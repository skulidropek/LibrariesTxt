internal class Microsoft.SqlServer.Diagnostics.STrace.ActivityContext : object {
    public ActivityContext(string parameterName);
    public sealed virtual void Dispose();
}
internal class Microsoft.SqlServer.Diagnostics.STrace.MethodContext : object {
    public sealed virtual void Dispose();
    public ActivityContext GetActivityContext(string s);
    public void TraceCatch(Exception ex);
}
internal class Microsoft.SqlServer.Diagnostics.STrace.MethodTraceContext : TraceContext {
    public MethodTraceContext(string parameterName);
}
internal class Microsoft.SqlServer.Diagnostics.STrace.STraceConfigurationAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <SkipAutoTrace>k__BackingField;
    public bool SkipAutoTrace { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_SkipAutoTrace();
    [CompilerGeneratedAttribute]
public void set_SkipAutoTrace(bool value);
}
internal class Microsoft.SqlServer.Diagnostics.STrace.TraceContext : object {
    public static TraceContext GetTraceContext(string componentName, string s);
    public ActivityContext GetActivityContext(string s);
    public MethodTraceContext GetMethodContext(string s);
    public MethodTraceContext GetMethodContext(string methodName, TraceEventType traceEventType);
    public void Assert(bool condition, string message);
    public sealed virtual void Dispose();
    public void TraceActivityStart(string s);
    public void TraceActivityEnd(string s);
    public void TraceCatch(Exception ex);
    public void TraceInformation(string format, Object[] info);
    public Exception TraceThrow(Exception exception);
    public Exception TraceThrow(Exception exception, TraceEventType traceEventType);
    public void TraceVerbose(string message);
    public void TraceVerbose(int id, string message);
    public void TraceVerbose(string format, Object[] args);
    public void TraceVerbose(int id, string format, Object[] args);
    public virtual void TraceParameterIn(string parameterName, object parameterValue);
    public virtual void TraceParameters(Object[] parameterValues);
    protected void TraceParameters(TraceEventType traceEventType, Object[] parameterValues);
    public void TraceMethodEnter(string methodName);
    public void TraceMethodExit(string methodName);
    public void DebugAssert(bool test);
    public void DebugAssert(bool test, string message);
    public void DebugAssert(bool test, int id, string message);
    public void DebugAssert(bool test, string format, Object[] args);
    public void DebugAssert(bool test, int id, string format, Object[] args);
    public void TraceError(string message);
    public void TraceError(int id, string message);
    public void TraceError(string format, Object[] args);
    public void TraceError(int id, string format, Object[] args);
    public virtual void TraceParameterOut(string parameterName, object parameterValue);
}
internal class Microsoft.SqlServer.Management.Diagnostics.SQLToolsCommonTraceLvl : ValueType {
    public static UInt32 L1;
    public static UInt32 L2;
    public static UInt32 L3;
    public static UInt32 L4;
    public static UInt32 Always;
    public static UInt32 Warning;
    public static UInt32 Error;
}
internal static class Microsoft.SqlServer.Management.Diagnostics.TraceHelper : object {
    private static UInt32 TraceLevelAssert;
    private static UInt32 TraceLevelException;
    private static string AddDate(string str);
    public static void Trace(string strComponentName, string strFormat, Object[] args);
    public static void Trace(string strComponentName, UInt32 traceLevel, string strFormat, Object[] args);
    public static void Assert(bool condition);
    public static void Assert(bool condition, string strFormat);
    public static void Implies(bool a, bool b, string s);
    public static void LogExCatch(Exception ex);
}
internal static class Microsoft.SqlServer.Management.Diagnostics.TraceLvl : object {
    public static UInt32 L1;
    public static UInt32 L2;
    public static UInt32 L3;
    public static UInt32 L4;
    public static UInt32 Always;
    public static UInt32 Warning;
    public static UInt32 Error;
}
public abstract class Microsoft.SqlServer.Management.Smo.AbstractCollectionBase : object {
    private SqlSmoObject parentInstance;
    protected internal bool initialized;
    private bool m_bIsDirty;
    public SqlSmoObject ParentInstance { get; }
    internal StringComparer StringComparer { get; }
    internal int NoFaultCount { get; }
    internal bool IsDirty { get; internal set; }
    internal AbstractCollectionBase(SqlSmoObject parentInstance);
    public SqlSmoObject get_ParentInstance();
    internal void MarkOutOfSync();
    internal virtual StringComparer get_StringComparer();
    protected internal void AddExisting(SqlSmoObject smoObj);
    protected abstract virtual void ImplAddExisting(SqlSmoObject smoObj);
    internal void RemoveObject(ObjectKeyBase key);
    internal abstract virtual void ImplRemove(ObjectKeyBase key);
    internal abstract virtual SqlSmoObject NoFaultLookup(ObjectKeyBase key);
    internal abstract virtual int get_NoFaultCount();
    internal bool get_IsDirty();
    internal void set_IsDirty(bool value);
    internal abstract virtual ObjectKeyBase CreateKeyFromUrn(Urn urn);
}
public class Microsoft.SqlServer.Management.Smo.AffinityInfo : AffinityInfoBase {
    private static byte CPUSPERKGROUP;
    internal Server server;
    private CpuCollection cpuCol;
    public static string UrnSuffix { get; }
    [SfcObjectAttribute("1")]
public Server Parent { get; }
    public CpuCollection Cpus { get; }
    internal SqlSmoObject SmoParent { get; }
    internal AffinityInfo(Server parentsrv);
    internal AffinityInfo(DataTable affinityInfoTable);
    public static string get_UrnSuffix();
    public Server get_Parent();
    public CpuCollection get_Cpus();
    public virtual void Refresh();
    internal virtual SqlSmoObject get_SmoParent();
    internal virtual void PopulateDataTable();
    internal virtual StringCollection DoAlter(ScriptingPreferences sp);
    internal void SetCPUAndNumaValues();
}
public abstract class Microsoft.SqlServer.Management.Smo.AffinityInfoBase : object {
    internal DataTable table;
    private NumaNodeCollection numaCol;
    private AffinityType affinityType;
    internal DataTable AffinityInfoTable { get; }
    public NumaNodeCollection NumaNodes { get; }
    public AffinityType AffinityType { get; public set; }
    internal SqlSmoObject SmoParent { get; }
    public ExecutionManager ExecutionManager { get; }
    internal DataTable get_AffinityInfoTable();
    public NumaNodeCollection get_NumaNodes();
    public AffinityType get_AffinityType();
    public void set_AffinityType(AffinityType value);
    internal abstract virtual SqlSmoObject get_SmoParent();
    internal abstract virtual void PopulateDataTable();
    public virtual void Refresh();
    internal abstract virtual StringCollection DoAlter(ScriptingPreferences sp);
    public ExecutionManager get_ExecutionManager();
    public sealed virtual void Alter();
    public sealed virtual StringCollection Script();
    internal StringCollection Script(ScriptingPreferences sp);
    public sealed virtual StringCollection Script(ScriptingOptions so);
    private ScriptingPreferences GetCurrentServerScriptingPreferences();
}
public enum Microsoft.SqlServer.Management.Smo.AffinityType : Enum {
    public int value__;
    public static AffinityType Auto;
    public static AffinityType Manual;
}
public class Microsoft.SqlServer.Management.Smo.Agent.AgentObjectBase : NamedSmoObject {
    internal AgentObjectBase(AbstractCollectionBase parentColl, ObjectKeyBase key, SqlSmoState state);
    internal AgentObjectBase(ObjectKeyBase key, SqlSmoState state);
    internal AgentObjectBase(string name);
    protected internal virtual string GetDBName();
}
public class Microsoft.SqlServer.Management.Smo.Agent.Alert : AgentObjectBase {
    public static string UrnSuffix { get; }
    [SfcObjectAttribute("1")]
public JobServer Parent { get; public set; }
    [SfcPropertyAttribute("1024")]
public AlertType AlertType { get; }
    [SfcPropertyAttribute("1024")]
public string CategoryName { get; public set; }
    [SfcPropertyAttribute("1024")]
public DateTime CountResetDate { get; public set; }
    [SfcPropertyAttribute("1024")]
public string DatabaseName { get; public set; }
    [SfcPropertyAttribute("1024")]
public int DelayBetweenResponses { get; public set; }
    [SfcPropertyAttribute("1024")]
public string EventDescriptionKeyword { get; public set; }
    [SfcPropertyAttribute("1024")]
public string EventSource { get; }
    [SfcPropertyAttribute("1024")]
public int HasNotification { get; }
    [SfcPropertyAttribute("1024")]
public int ID { get; }
    [SfcPropertyAttribute("1024")]
public NotifyMethods IncludeEventDescription { get; public set; }
    [SfcPropertyAttribute("1024")]
public bool IsEnabled { get; public set; }
    [SfcPropertyAttribute("1024")]
public Guid JobID { get; public set; }
    [SfcPropertyAttribute("1024")]
public string JobName { get; }
    [SfcPropertyAttribute("1024")]
public DateTime LastOccurrenceDate { get; public set; }
    [SfcPropertyAttribute("1024")]
public DateTime LastResponseDate { get; public set; }
    [SfcPropertyAttribute("1024")]
public int MessageID { get; public set; }
    [SfcPropertyAttribute("1024")]
public string NotificationMessage { get; public set; }
    [SfcPropertyAttribute("1024")]
public int OccurrenceCount { get; }
    [SfcPropertyAttribute("1024")]
public string PerformanceCondition { get; public set; }
    [SfcPropertyAttribute("1024")]
public int Severity { get; public set; }
    [SfcPropertyAttribute("1024")]
public string WmiEventNamespace { get; public set; }
    [SfcPropertyAttribute("1024")]
public string WmiEventQuery { get; public set; }
    internal Alert(AbstractCollectionBase parentColl, ObjectKeyBase key, SqlSmoState state);
    public Alert(JobServer jobServer, string name);
    public static string get_UrnSuffix();
    public sealed virtual void Create();
    internal virtual void ScriptCreate(StringCollection queries, ScriptingPreferences sp);
    private void GetAllParams(StringBuilder sb, ScriptingPreferences sp, Int32& count);
    public sealed virtual void Drop();
    public sealed virtual void DropIfExists();
    internal virtual void ScriptDrop(StringCollection queries, ScriptingPreferences sp);
    public sealed virtual void Alter();
    internal virtual void ScriptAlter(StringCollection queries, ScriptingPreferences sp);
    public sealed virtual void Rename(string newName);
    internal virtual void ScriptRename(StringCollection queries, ScriptingPreferences sp, string newName);
    public void ResetOccurrenceCount();
    public void AddNotification(string operatorName, NotifyMethods notifymethod);
    public void RemoveNotification(string operatorName);
    public void UpdateNotification(string operatorName, NotifyMethods notifymethod);
    public DataTable EnumNotifications();
    public DataTable EnumNotifications(NotifyMethods notifyMethod);
    public DataTable EnumNotifications(string operatorName);
    public DataTable EnumNotifications(NotifyMethods notifyMethod, string operatorName);
    public sealed virtual StringCollection Script();
    public sealed virtual StringCollection Script(ScriptingOptions scriptingOptions);
    public JobServer get_Parent();
    public void set_Parent(JobServer value);
    internal virtual SqlPropertyMetadataProvider GetPropertyMetadataProvider();
    public AlertType get_AlertType();
    public string get_CategoryName();
    public void set_CategoryName(string value);
    public DateTime get_CountResetDate();
    public void set_CountResetDate(DateTime value);
    public string get_DatabaseName();
    public void set_DatabaseName(string value);
    public int get_DelayBetweenResponses();
    public void set_DelayBetweenResponses(int value);
    public string get_EventDescriptionKeyword();
    public void set_EventDescriptionKeyword(string value);
    public string get_EventSource();
    public int get_HasNotification();
    public int get_ID();
    public NotifyMethods get_IncludeEventDescription();
    public void set_IncludeEventDescription(NotifyMethods value);
    public bool get_IsEnabled();
    public void set_IsEnabled(bool value);
    public Guid get_JobID();
    public void set_JobID(Guid value);
    public string get_JobName();
    public DateTime get_LastOccurrenceDate();
    public void set_LastOccurrenceDate(DateTime value);
    public DateTime get_LastResponseDate();
    public void set_LastResponseDate(DateTime value);
    public int get_MessageID();
    public void set_MessageID(int value);
    public string get_NotificationMessage();
    public void set_NotificationMessage(string value);
    public int get_OccurrenceCount();
    public string get_PerformanceCondition();
    public void set_PerformanceCondition(string value);
    public int get_Severity();
    public void set_Severity(int value);
    public string get_WmiEventNamespace();
    public void set_WmiEventNamespace(string value);
    public string get_WmiEventQuery();
    public void set_WmiEventQuery(string value);
}
public class Microsoft.SqlServer.Management.Smo.Agent.AlertCategory : CategoryBase {
    public static string UrnSuffix { get; }
    [SfcObjectAttribute("1")]
public JobServer Parent { get; public set; }
    [SfcPropertyAttribute("1024")]
public int ID { get; }
    internal AlertCategory(AbstractCollectionBase parentColl, ObjectKeyBase key, SqlSmoState state);
    public AlertCategory(JobServer jobServer, string name);
    public static string get_UrnSuffix();
    internal virtual string GetCategoryClassName();
    internal virtual int GetCategoryClass();
    public JobServer get_Parent();
    public void set_Parent(JobServer value);
    internal virtual SqlPropertyMetadataProvider GetPropertyMetadataProvider();
    public int get_ID();
}
[DefaultMemberAttribute("Item")]
public class Microsoft.SqlServer.Management.Smo.Agent.AlertCategoryCollection : SimpleObjectCollectionBase {
    public JobServer Parent { get; }
    public AlertCategory Item { get; }
    public AlertCategory Item { get; }
    internal AlertCategoryCollection(SqlSmoObject parentInstance);
    public JobServer get_Parent();
    public AlertCategory get_Item(int index);
    public AlertCategory get_Item(string name);
    public void CopyTo(AlertCategory[] array, int index);
    public AlertCategory ItemById(int id);
    protected virtual Type GetCollectionElementType();
    internal virtual SqlSmoObject GetCollectionElementInstance(ObjectKeyBase key, SqlSmoState state);
    public void Remove(AlertCategory alertCategory);
    public void Remove(string name);
    public void Add(AlertCategory alertCategory);
    internal SqlSmoObject GetObjectByName(string name);
    internal virtual ObjectKeyBase CreateKeyFromUrn(Urn urn);
}
[DefaultMemberAttribute("Item")]
public class Microsoft.SqlServer.Management.Smo.Agent.AlertCollection : SimpleObjectCollectionBase {
    public JobServer Parent { get; }
    public Alert Item { get; }
    public Alert Item { get; }
    internal AlertCollection(SqlSmoObject parentInstance);
    public JobServer get_Parent();
    public Alert get_Item(int index);
    public Alert get_Item(string name);
    public void CopyTo(Alert[] array, int index);
    public Alert ItemById(int id);
    public StringCollection Script();
    public StringCollection Script(ScriptingOptions scriptingOptions);
    protected virtual Type GetCollectionElementType();
    internal virtual SqlSmoObject GetCollectionElementInstance(ObjectKeyBase key, SqlSmoState state);
    public void Add(Alert alert);
    internal SqlSmoObject GetObjectByName(string name);
    internal virtual ObjectKeyBase CreateKeyFromUrn(Urn urn);
}
public class Microsoft.SqlServer.Management.Smo.Agent.AlertSystem : AgentObjectBase {
    protected internal string CollationDatabaseInServer { get; }
    [SfcObjectAttribute("1")]
public JobServer Parent { get; }
    public static string UrnSuffix { get; }
    [SfcPropertyAttribute("1024")]
public string FailSafeEmailAddress { get; public set; }
    [SfcPropertyAttribute("1024")]
public string FailSafeNetSendAddress { get; public set; }
    [SfcPropertyAttribute("1024")]
public string FailSafeOperator { get; public set; }
    [SfcPropertyAttribute("1024")]
public string FailSafePagerAddress { get; public set; }
    [SfcPropertyAttribute("1024")]
public string ForwardingServer { get; public set; }
    [SfcPropertyAttribute("1024")]
public int ForwardingSeverity { get; public set; }
    [SfcPropertyAttribute("1024")]
public bool IsForwardedAlways { get; public set; }
    [SfcPropertyAttribute("1024")]
public NotifyMethods NotificationMethod { get; public set; }
    [SfcPropertyAttribute("1024")]
public string PagerCCTemplate { get; public set; }
    [SfcPropertyAttribute("1024")]
public bool PagerSendSubjectOnly { get; public set; }
    [SfcPropertyAttribute("1024")]
public string PagerSubjectTemplate { get; public set; }
    [SfcPropertyAttribute("1024")]
public string PagerToTemplate { get; public set; }
    internal AlertSystem(JobServer parentsrv, ObjectKeyBase key, SqlSmoState state);
    protected internal virtual string get_CollationDatabaseInServer();
    public JobServer get_Parent();
    protected sealed virtual void GetUrnRecursive(StringBuilder urnbuilder, UrnIdOption idOption);
    protected internal virtual string GetDBName();
    public static string get_UrnSuffix();
    public sealed virtual void Alter();
    internal virtual void ScriptAlter(StringCollection queries, ScriptingPreferences sp);
    private void ScriptProperties(StringCollection queries, ScriptingPreferences sp);
    internal virtual void ScriptCreate(StringCollection queries, ScriptingPreferences sp);
    public sealed virtual StringCollection Script();
    public sealed virtual StringCollection Script(ScriptingOptions scriptingOptions);
    internal virtual SqlPropertyMetadataProvider GetPropertyMetadataProvider();
    public string get_FailSafeEmailAddress();
    public void set_FailSafeEmailAddress(string value);
    public string get_FailSafeNetSendAddress();
    public void set_FailSafeNetSendAddress(string value);
    public string get_FailSafeOperator();
    public void set_FailSafeOperator(string value);
    public string get_FailSafePagerAddress();
    public void set_FailSafePagerAddress(string value);
    public string get_ForwardingServer();
    public void set_ForwardingServer(string value);
    public int get_ForwardingSeverity();
    public void set_ForwardingSeverity(int value);
    public bool get_IsForwardedAlways();
    public void set_IsForwardedAlways(bool value);
    public NotifyMethods get_NotificationMethod();
    public void set_NotificationMethod(NotifyMethods value);
    public string get_PagerCCTemplate();
    public void set_PagerCCTemplate(string value);
    public bool get_PagerSendSubjectOnly();
    public void set_PagerSendSubjectOnly(bool value);
    public string get_PagerSubjectTemplate();
    public void set_PagerSubjectTemplate(string value);
    public string get_PagerToTemplate();
    public void set_PagerToTemplate(string value);
}
public class Microsoft.SqlServer.Management.Smo.Agent.CategoryBase : AgentObjectBase {
    internal CategoryBase(AbstractCollectionBase parentColl, ObjectKeyBase key, SqlSmoState state);
    public sealed virtual void Create();
    internal virtual string GetCategoryClassName();
    internal virtual int GetCategoryClass();
    internal virtual string GetCategoryTypeName();
    internal virtual void ScriptCreate(StringCollection queries, ScriptingPreferences sp);
    public sealed virtual void Drop();
    public sealed virtual void DropIfExists();
    internal virtual void ScriptDrop(StringCollection queries, ScriptingPreferences sp);
    public sealed virtual void Rename(string newName);
    internal virtual void ScriptRename(StringCollection queries, ScriptingPreferences sp, string newName);
    protected string GetCatTypeName(CategoryType ct);
    public sealed virtual StringCollection Script();
    public sealed virtual StringCollection Script(ScriptingOptions scriptingOptions);
}
public enum Microsoft.SqlServer.Management.Smo.Agent.FindOperand : Enum {
    public int value__;
    public static FindOperand EqualTo;
    public static FindOperand GreaterThan;
    public static FindOperand LessThan;
}
public class Microsoft.SqlServer.Management.Smo.Agent.Job : AgentObjectBase {
    private bool keepUnusedSchedules;
    private JobStepCollection jobSteps;
    private JobScheduleCollection jobSchedules;
    [SfcKeyAttribute("0")]
[SfcPropertyAttribute("1280")]
public string Name { get; public set; }
    [SfcKeyAttribute("1")]
[SfcPropertyAttribute("1024")]
public int CategoryID { get; }
    public static string UrnSuffix { get; }
    [SfcObjectAttribute("1", "0", "Microsoft.SqlServer.Management.Smo.Agent.JobStep")]
public JobStepCollection JobSteps { get; }
    [SfcObjectAttribute("1", "0", "Microsoft.SqlServer.Management.Smo.Agent.JobSchedule")]
public JobScheduleCollection JobSchedules { get; }
    internal Guid JobIDInternal { get; }
    [SfcObjectAttribute("1")]
public JobServer Parent { get; public set; }
    [SfcPropertyAttribute("1056")]
public string Category { get; public set; }
    [SfcPropertyAttribute("1056")]
public byte CategoryType { get; public set; }
    [SfcPropertyAttribute("1056")]
public int CurrentRunRetryAttempt { get; }
    [SfcPropertyAttribute("1056")]
public JobExecutionStatus CurrentRunStatus { get; }
    [SfcPropertyAttribute("1056")]
public string CurrentRunStep { get; }
    [SfcPropertyAttribute("1024")]
public DateTime DateCreated { get; }
    [SfcPropertyAttribute("1024")]
public DateTime DateLastModified { get; }
    [SfcPropertyAttribute("1024")]
public CompletionAction DeleteLevel { get; public set; }
    [SfcPropertyAttribute("1024")]
public string Description { get; public set; }
    [SfcPropertyAttribute("1024")]
public CompletionAction EmailLevel { get; public set; }
    [SfcPropertyAttribute("1024")]
public CompletionAction EventLogLevel { get; public set; }
    [SfcPropertyAttribute("1056")]
public bool HasSchedule { get; }
    [SfcPropertyAttribute("1056")]
public bool HasServer { get; }
    [SfcPropertyAttribute("1056")]
public bool HasStep { get; }
    [SfcPropertyAttribute("1024")]
public bool IsEnabled { get; public set; }
    [SfcPropertyAttribute("1024")]
public Guid JobID { get; }
    [SfcPropertyAttribute("1056")]
public JobType JobType { get; }
    [SfcPropertyAttribute("1056")]
public DateTime LastRunDate { get; }
    [SfcPropertyAttribute("1056")]
public CompletionResult LastRunOutcome { get; }
    [SfcPropertyAttribute("1024")]
public CompletionAction NetSendLevel { get; public set; }
    [SfcPropertyAttribute("1056")]
public DateTime NextRunDate { get; }
    [SfcPropertyAttribute("1056")]
public int NextRunScheduleID { get; }
    [SfcPropertyAttribute("1056")]
public string OperatorToEmail { get; public set; }
    [SfcPropertyAttribute("1056")]
public string OperatorToNetSend { get; public set; }
    [SfcPropertyAttribute("1056")]
public string OperatorToPage { get; public set; }
    [SfcPropertyAttribute("1024")]
public string OriginatingServer { get; }
    [SfcPropertyAttribute("1024")]
public string OwnerLoginName { get; public set; }
    [SfcPropertyAttribute("1024")]
public CompletionAction PageLevel { get; public set; }
    [SfcPropertyAttribute("1024")]
public int StartStepID { get; public set; }
    [SfcPropertyAttribute("1024")]
public int VersionNumber { get; }
    public Job(JobServer jobServer, string name);
    public Job(JobServer jobServer, string name, int categoryID);
    internal Job(AbstractCollectionBase parentColl, ObjectKeyBase key, SqlSmoState state);
    public virtual string get_Name();
    public virtual void set_Name(string value);
    public int get_CategoryID();
    public static string get_UrnSuffix();
    private void UpdateCategoryIDFromCategoryProperty();
    private void UpdateCategoryIDFromServer();
    protected sealed virtual void GetUrnRecursive(StringBuilder urnbuilder, UrnIdOption idOption);
    public sealed virtual void Create();
    internal virtual void ScriptCreate(StringCollection queries, ScriptingPreferences sp);
    private void DumpStringCollectionToBuilder(StringCollection coll, StringBuilder script);
    private void GetJobScriptingScript(StringBuilder createQuery, ScriptingPreferences sp);
    internal static void AddCheckErrorCode(StringBuilder query);
    internal static string GetReturnCode(ScriptingPreferences sp);
    private void GetJobCreationScript(StringBuilder createQuery, ScriptingPreferences sp);
    private void GetAllParams(StringBuilder sb, ScriptingPreferences sp, bool forAlter, Int32& count);
    public void Drop(bool keepUnusedSchedules);
    public sealed virtual void Drop();
    public sealed virtual void DropIfExists();
    internal virtual void ScriptDrop(StringCollection queries, ScriptingPreferences sp);
    public sealed virtual void Alter();
    internal virtual void ScriptAlter(StringCollection queries, ScriptingPreferences sp);
    public sealed virtual void Rename(string newName);
    internal virtual void ScriptRename(StringCollection queries, ScriptingPreferences sp, string newName);
    public JobStepCollection get_JobSteps();
    public JobScheduleCollection get_JobSchedules();
    protected virtual void MarkDropped();
    internal Guid get_JobIDInternal();
    internal string JobIdOrJobNameParameter();
    internal string JobIdOrJobNameParameter(ScriptingPreferences sp);
    internal string JobIdOrJobNameParameter(ScriptingPreferences sp, bool prefixAssignmentCode);
    public void ApplyToTargetServer(string serverName);
    public void ApplyToTargetServerGroup(string groupName);
    public DataTable EnumAlerts();
    public DataTable EnumHistory(JobHistoryFilter filter);
    public DataTable EnumHistory();
    public DataTable EnumJobStepLogs();
    public DataTable EnumJobStepLogs(int stepId);
    public DataTable EnumJobStepLogs(string stepName);
    public DataTable EnumTargetServers();
    public JobStep[] EnumJobStepsByID();
    public void DeleteJobStepLogs(DateTime olderThan);
    public void DeleteJobStepLogs(int largerThan);
    public void Invoke();
    public void PurgeHistory();
    public void AddSharedSchedule(int scheduleId);
    private JobSchedule GetJobScheduleByID(int scheduleId);
    public void RemoveSharedSchedule(int scheduleId);
    public void RemoveSharedSchedule(int scheduleId, bool keepUnusedSchedules);
    public void RemoveAllJobSchedules();
    public void RemoveAllJobSchedules(bool keepUnusedSchedules);
    public void RemoveAllJobSteps();
    public void RemoveFromTargetServer(string serverName);
    public void RemoveFromTargetServerGroup(string groupName);
    public void Start(string jobStepName);
    public void Start();
    internal void StartImpl(string jobStepName);
    public void Stop();
    public sealed virtual StringCollection Script();
    public sealed virtual StringCollection Script(ScriptingOptions scriptingOptions);
    internal static String[] GetScriptFields(Type parentType, ServerVersion version, DatabaseEngineType databaseEngineType, DatabaseEngineEdition databaseEngineEdition, bool defaultTextMode);
    public JobServer get_Parent();
    public void set_Parent(JobServer value);
    internal virtual SqlPropertyMetadataProvider GetPropertyMetadataProvider();
    public string get_Category();
    public void set_Category(string value);
    public byte get_CategoryType();
    public void set_CategoryType(byte value);
    public int get_CurrentRunRetryAttempt();
    public JobExecutionStatus get_CurrentRunStatus();
    public string get_CurrentRunStep();
    public DateTime get_DateCreated();
    public DateTime get_DateLastModified();
    public CompletionAction get_DeleteLevel();
    public void set_DeleteLevel(CompletionAction value);
    public string get_Description();
    public void set_Description(string value);
    public CompletionAction get_EmailLevel();
    public void set_EmailLevel(CompletionAction value);
    public CompletionAction get_EventLogLevel();
    public void set_EventLogLevel(CompletionAction value);
    public bool get_HasSchedule();
    public bool get_HasServer();
    public bool get_HasStep();
    public bool get_IsEnabled();
    public void set_IsEnabled(bool value);
    public Guid get_JobID();
    public JobType get_JobType();
    public DateTime get_LastRunDate();
    public CompletionResult get_LastRunOutcome();
    public CompletionAction get_NetSendLevel();
    public void set_NetSendLevel(CompletionAction value);
    public DateTime get_NextRunDate();
    public int get_NextRunScheduleID();
    public string get_OperatorToEmail();
    public void set_OperatorToEmail(string value);
    public string get_OperatorToNetSend();
    public void set_OperatorToNetSend(string value);
    public string get_OperatorToPage();
    public void set_OperatorToPage(string value);
    public string get_OriginatingServer();
    public string get_OwnerLoginName();
    public void set_OwnerLoginName(string value);
    public CompletionAction get_PageLevel();
    public void set_PageLevel(CompletionAction value);
    public int get_StartStepID();
    public void set_StartStepID(int value);
    public int get_VersionNumber();
}
public class Microsoft.SqlServer.Management.Smo.Agent.JobCategory : CategoryBase {
    public static string UrnSuffix { get; }
    [SfcObjectAttribute("1")]
public JobServer Parent { get; public set; }
    [SfcPropertyAttribute("1280")]
public CategoryType CategoryType { get; public set; }
    [SfcPropertyAttribute("1024")]
public int ID { get; }
    internal JobCategory(AbstractCollectionBase parentColl, ObjectKeyBase key, SqlSmoState state);
    public JobCategory(JobServer jobServer, string name);
    public static string get_UrnSuffix();
    internal virtual string GetCategoryClassName();
    internal virtual int GetCategoryClass();
    internal virtual string GetCategoryTypeName();
    public JobServer get_Parent();
    public void set_Parent(JobServer value);
    internal virtual SqlPropertyMetadataProvider GetPropertyMetadataProvider();
    public CategoryType get_CategoryType();
    public void set_CategoryType(CategoryType value);
    public int get_ID();
    internal virtual String[] GetNonAlterableProperties();
}
[DefaultMemberAttribute("Item")]
public class Microsoft.SqlServer.Management.Smo.Agent.JobCategoryCollection : SimpleObjectCollectionBase {
    public JobServer Parent { get; }
    public JobCategory Item { get; }
    public JobCategory Item { get; }
    internal JobCategoryCollection(SqlSmoObject parentInstance);
    public JobServer get_Parent();
    public JobCategory get_Item(int index);
    public JobCategory get_Item(string name);
    public void CopyTo(JobCategory[] array, int index);
    public JobCategory ItemById(int id);
    protected virtual Type GetCollectionElementType();
    internal virtual SqlSmoObject GetCollectionElementInstance(ObjectKeyBase key, SqlSmoState state);
    public void Remove(JobCategory jobCategory);
    public void Remove(string name);
    public void Add(JobCategory jobCategory);
    internal SqlSmoObject GetObjectByName(string name);
    internal virtual ObjectKeyBase CreateKeyFromUrn(Urn urn);
}
[DefaultMemberAttribute("Item")]
public class Microsoft.SqlServer.Management.Smo.Agent.JobCollection : ArrayListCollectionBase {
    public JobServer Parent { get; }
    public Job Item { get; }
    public Job Item { get; }
    public Job Item { get; }
    internal JobCollection(SqlSmoObject parent);
    protected virtual void InitInnerCollection();
    public bool Contains(string name);
    public bool Contains(string name, int categoryID);
    internal virtual ObjectKeyBase CreateKeyFromUrn(Urn urn);
    public Job ItemById(Guid id);
    public JobServer get_Parent();
    public Job get_Item(int index);
    public Job get_Item(string name);
    public Job get_Item(string name, int categoryID);
    public void CopyTo(Job[] array, int index);
    public StringCollection Script();
    public StringCollection Script(ScriptingOptions scriptingOptions);
    protected virtual Type GetCollectionElementType();
    internal virtual SqlSmoObject GetCollectionElementInstance(ObjectKeyBase key, SqlSmoState state);
    public void Add(Job job);
    internal SqlSmoObject GetObjectByName(string name);
    internal virtual SqlSmoObject GetObjectByKey(ObjectKeyBase key);
}
public class Microsoft.SqlServer.Management.Smo.Agent.JobFilter : object {
    private string category;
    private bool enabled;
    private bool enabledDirty;
    private JobExecutionStatus currentExecutionStatus;
    internal bool currentExecutionStatusDirty;
    private string owner;
    private FindOperand dateFindOperand;
    private AgentSubSystem stepSubsystem;
    internal bool stepSubsystemDirty;
    private DateTime dateJobCreated;
    private bool dateJobCreatedDirty;
    private JobType jobType;
    internal bool jobTypeDirty;
    private DateTime dateJobLastModified;
    private bool dateJobLastModifiedDirty;
    public string Category { get; public set; }
    public bool Enabled { get; public set; }
    public JobExecutionStatus CurrentExecutionStatus { get; public set; }
    public string Owner { get; public set; }
    public FindOperand DateFindOperand { get; public set; }
    public AgentSubSystem StepSubsystem { get; public set; }
    public DateTime DateJobCreated { get; public set; }
    public JobType JobType { get; public set; }
    public DateTime DateJobLastModified { get; public set; }
    public string get_Category();
    public void set_Category(string value);
    public bool get_Enabled();
    public void set_Enabled(bool value);
    public JobExecutionStatus get_CurrentExecutionStatus();
    public void set_CurrentExecutionStatus(JobExecutionStatus value);
    public string get_Owner();
    public void set_Owner(string value);
    public FindOperand get_DateFindOperand();
    public void set_DateFindOperand(FindOperand value);
    public AgentSubSystem get_StepSubsystem();
    public void set_StepSubsystem(AgentSubSystem value);
    public DateTime get_DateJobCreated();
    public void set_DateJobCreated(DateTime value);
    public JobType get_JobType();
    public void set_JobType(JobType value);
    public DateTime get_DateJobLastModified();
    public void set_DateJobLastModified(DateTime value);
    internal Request GetEnumRequest(JobServer jobServer);
    private void GetRequestFilter(StringBuilder builder);
    private string GetStringOperand(FindOperand fo);
}
public class Microsoft.SqlServer.Management.Smo.Agent.JobHistoryFilter : object {
    private Guid jobID;
    [CompilerGeneratedAttribute]
private string <JobName>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MinimumRetries>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MinimumRunDuration>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <OldestFirst>k__BackingField;
    private CompletionResult outcomeTypes;
    private bool outcomeDirty;
    private int messageID;
    private int severity;
    private bool startRunDateDirty;
    private DateTime startRunDate;
    private bool endRunDateDirty;
    private DateTime endRunDate;
    public Guid JobID { get; public set; }
    public string JobName { get; public set; }
    public int MinimumRetries { get; public set; }
    public int MinimumRunDuration { get; public set; }
    [ObsoleteAttribute]
public bool OldestFirst { get; public set; }
    public CompletionResult OutcomeTypes { get; public set; }
    public int SqlMessageID { get; public set; }
    public int SqlSeverity { get; public set; }
    public DateTime StartRunDate { get; public set; }
    public DateTime EndRunDate { get; public set; }
    public Guid get_JobID();
    public void set_JobID(Guid value);
    [CompilerGeneratedAttribute]
public string get_JobName();
    [CompilerGeneratedAttribute]
public void set_JobName(string value);
    [CompilerGeneratedAttribute]
public int get_MinimumRetries();
    [CompilerGeneratedAttribute]
public void set_MinimumRetries(int value);
    [CompilerGeneratedAttribute]
public int get_MinimumRunDuration();
    [CompilerGeneratedAttribute]
public void set_MinimumRunDuration(int value);
    [CompilerGeneratedAttribute]
public bool get_OldestFirst();
    [CompilerGeneratedAttribute]
public void set_OldestFirst(bool value);
    public CompletionResult get_OutcomeTypes();
    public void set_OutcomeTypes(CompletionResult value);
    public int get_SqlMessageID();
    public void set_SqlMessageID(int value);
    public int get_SqlSeverity();
    public void set_SqlSeverity(int value);
    public DateTime get_StartRunDate();
    public void set_StartRunDate(DateTime value);
    public DateTime get_EndRunDate();
    public void set_EndRunDate(DateTime value);
    internal Request GetEnumRequest(Job job);
    internal Request GetEnumRequest(JobServer jobServer);
    internal int GetDateInt(DateTime dateTime);
    internal int GetTimeInt(DateTime dateTime);
    private void GetRequestFilter(StringBuilder builder);
    internal string GetPurgeFilter();
}
internal class Microsoft.SqlServer.Management.Smo.Agent.JobObjectComparer : ObjectComparerBase {
    internal JobObjectComparer(IComparer comparer);
    public virtual int Compare(object obj1, object obj2);
}
internal class Microsoft.SqlServer.Management.Smo.Agent.JobObjectKey : SimpleObjectKey {
    private int categoryID;
    private static JobObjectKeySingleton jobObjectKeySingleton;
    internal static StringCollection jobKeyFields { get; }
    public int CategoryID { get; public set; }
    public string UrnFilter { get; }
    public bool IsNull { get; }
    public JobObjectKey(string name, int categoryID);
    private static JobObjectKey();
    internal static StringCollection get_jobKeyFields();
    public int get_CategoryID();
    public void set_CategoryID(int value);
    public virtual string ToString();
    public virtual string get_UrnFilter();
    public virtual StringCollection GetFieldNames();
    public virtual ObjectKeyBase Clone();
    internal virtual void Validate(Type objectType);
    public virtual bool get_IsNull();
    public virtual ObjectComparerBase GetComparer(IComparer stringComparer);
}
internal class Microsoft.SqlServer.Management.Smo.Agent.JobObjectKeySingleton : object {
    internal StringCollection jobKeyFields;
}
[SfcElementTypeAttribute("Schedule")]
public class Microsoft.SqlServer.Management.Smo.Agent.JobSchedule : ScheduleBase {
    private bool keepUnusedSchedule;
    public static string UrnSuffix { get; }
    private bool IsShared { get; }
    [SfcPropertyAttribute("1024")]
public Guid ScheduleUid { get; public set; }
    [SfcObjectAttribute("1")]
[SfcParentAttribute("Job")]
public SqlSmoObject Parent { get; public set; }
    [SfcPropertyAttribute("1024")]
public DateTime ActiveEndDate { get; public set; }
    [SfcPropertyAttribute("1024")]
public TimeSpan ActiveEndTimeOfDay { get; public set; }
    [SfcPropertyAttribute("1024")]
public DateTime ActiveStartDate { get; public set; }
    [SfcPropertyAttribute("1024")]
public TimeSpan ActiveStartTimeOfDay { get; public set; }
    [SfcPropertyAttribute("1024")]
public DateTime DateCreated { get; }
    [SfcPropertyAttribute("1024")]
public int FrequencyInterval { get; public set; }
    [SfcPropertyAttribute("1024")]
public int FrequencyRecurrenceFactor { get; public set; }
    [SfcPropertyAttribute("1024")]
public FrequencyRelativeIntervals FrequencyRelativeIntervals { get; public set; }
    [SfcPropertyAttribute("1024")]
public int FrequencySubDayInterval { get; public set; }
    [SfcPropertyAttribute("1024")]
public FrequencySubDayTypes FrequencySubDayTypes { get; public set; }
    [SfcPropertyAttribute("1024")]
public FrequencyTypes FrequencyTypes { get; public set; }
    [SfcPropertyAttribute("1024")]
public bool IsEnabled { get; public set; }
    [SfcPropertyAttribute("1024")]
public int JobCount { get; }
    [SfcPropertyAttribute("1024")]
public string OwnerLoginName { get; public set; }
    public JobSchedule(SqlSmoObject parent, string name);
    internal JobSchedule(AbstractCollectionBase parentColl, ObjectKeyBase key, SqlSmoState state);
    public static string get_UrnSuffix();
    public sealed virtual void Create();
    internal virtual void ScriptCreate(StringCollection queries, ScriptingPreferences sp);
    private bool get_IsShared();
    private void GetAllParams(StringBuilder sb, ScriptingPreferences sp, Int32& count);
    protected virtual void PostCreate();
    public void Drop(bool keepUnusedSchedule);
    public sealed virtual void Drop();
    public sealed virtual void DropIfExists();
    internal virtual void ScriptDrop(StringCollection queries, ScriptingPreferences sp);
    public sealed virtual void Alter();
    internal virtual void ScriptAlter(StringCollection queries, ScriptingPreferences sp);
    public sealed virtual void Rename(string newName);
    internal virtual void ScriptRename(StringCollection queries, ScriptingPreferences sp, string newName);
    public sealed virtual StringCollection Script();
    public sealed virtual StringCollection Script(ScriptingOptions scriptingOptions);
    public Guid[] EnumJobReferences();
    public Guid get_ScheduleUid();
    public void set_ScheduleUid(Guid value);
    public SqlSmoObject get_Parent();
    public void set_Parent(SqlSmoObject value);
    internal virtual SqlPropertyMetadataProvider GetPropertyMetadataProvider();
    public DateTime get_ActiveEndDate();
    public void set_ActiveEndDate(DateTime value);
    public TimeSpan get_ActiveEndTimeOfDay();
    public void set_ActiveEndTimeOfDay(TimeSpan value);
    public DateTime get_ActiveStartDate();
    public void set_ActiveStartDate(DateTime value);
    public TimeSpan get_ActiveStartTimeOfDay();
    public void set_ActiveStartTimeOfDay(TimeSpan value);
    public DateTime get_DateCreated();
    public int get_FrequencyInterval();
    public void set_FrequencyInterval(int value);
    public int get_FrequencyRecurrenceFactor();
    public void set_FrequencyRecurrenceFactor(int value);
    public FrequencyRelativeIntervals get_FrequencyRelativeIntervals();
    public void set_FrequencyRelativeIntervals(FrequencyRelativeIntervals value);
    public int get_FrequencySubDayInterval();
    public void set_FrequencySubDayInterval(int value);
    public FrequencySubDayTypes get_FrequencySubDayTypes();
    public void set_FrequencySubDayTypes(FrequencySubDayTypes value);
    public FrequencyTypes get_FrequencyTypes();
    public void set_FrequencyTypes(FrequencyTypes value);
    public bool get_IsEnabled();
    public void set_IsEnabled(bool value);
    public int get_JobCount();
    public string get_OwnerLoginName();
    public void set_OwnerLoginName(string value);
}
[DefaultMemberAttribute("Item")]
public class Microsoft.SqlServer.Management.Smo.Agent.JobScheduleCollection : JobScheduleCollectionBase {
    public SqlSmoObject Parent { get; }
    public JobSchedule Item { get; }
    public JobSchedule Item { get; }
    internal JobScheduleCollection(SqlSmoObject parentInstance);
    public SqlSmoObject get_Parent();
    public JobSchedule get_Item(int index);
    public JobSchedule get_Item(string name);
    public void CopyTo(JobSchedule[] array, int index);
    public JobSchedule ItemById(int id);
    protected virtual Type GetCollectionElementType();
    internal virtual SqlSmoObject GetCollectionElementInstance(ObjectKeyBase key, SqlSmoState state);
    internal SqlSmoObject GetObjectByName(string name);
}
public class Microsoft.SqlServer.Management.Smo.Agent.JobServer : SqlSmoObject {
    private JobCategoryCollection jobCategories;
    private OperatorCategoryCollection operatorCategories;
    private AlertCategoryCollection alertCategories;
    private AlertSystem alertSystem;
    private AlertCollection alerts;
    private OperatorCollection operators;
    private TargetServerCollection targetServers;
    private TargetServerGroupCollection targetServerGroups;
    private JobCollection jobs;
    private JobScheduleCollection sharedSchedules;
    private ProxyAccountCollection proxyAccounts;
    [SfcObjectAttribute("1")]
public Server Parent { get; }
    [SfcPropertyAttribute("1280")]
public string Name { get; }
    protected internal string CollationDatabaseInServer { get; }
    public static string UrnSuffix { get; }
    [SfcObjectAttribute("0", "0", "Microsoft.SqlServer.Management.Smo.Agent.JobCategory")]
public JobCategoryCollection JobCategories { get; }
    [SfcObjectAttribute("0", "0", "Microsoft.SqlServer.Management.Smo.Agent.OperatorCategory")]
public OperatorCategoryCollection OperatorCategories { get; }
    [SfcObjectAttribute("0", "0", "Microsoft.SqlServer.Management.Smo.Agent.AlertCategory")]
public AlertCategoryCollection AlertCategories { get; }
    [SfcObjectAttribute("0", "0")]
public AlertSystem AlertSystem { get; }
    [SfcObjectAttribute("0", "0", "Microsoft.SqlServer.Management.Smo.Agent.Alert")]
public AlertCollection Alerts { get; }
    [SfcObjectAttribute("0", "0", "Microsoft.SqlServer.Management.Smo.Agent.Operator")]
public OperatorCollection Operators { get; }
    [SfcObjectAttribute("0", "0", "Microsoft.SqlServer.Management.Smo.Agent.TargetServer")]
public TargetServerCollection TargetServers { get; }
    [SfcObjectAttribute("0", "0", "Microsoft.SqlServer.Management.Smo.Agent.TargetServerGroup")]
public TargetServerGroupCollection TargetServerGroups { get; }
    [SfcObjectAttribute("0", "0", "Microsoft.SqlServer.Management.Smo.Agent.Job")]
public JobCollection Jobs { get; }
    [SfcObjectAttribute("0", "0", "Microsoft.SqlServer.Management.Smo.Agent.JobSchedule")]
public JobScheduleCollection SharedSchedules { get; }
    [SfcObjectAttribute("0", "0", "Microsoft.SqlServer.Management.Smo.Agent.ProxyAccount")]
public ProxyAccountCollection ProxyAccounts { get; }
    [SfcPropertyAttribute("1024")]
public bool SysAdminOnly { get; }
    [SfcPropertyAttribute("1024")]
public string AgentDomainGroup { get; }
    [SfcPropertyAttribute("1024")]
public AgentLogLevels AgentLogLevel { get; public set; }
    [SfcPropertyAttribute("1024")]
public AgentMailType AgentMailType { get; public set; }
    [SfcPropertyAttribute("1024")]
public int AgentShutdownWaitTime { get; public set; }
    [SfcPropertyAttribute("1024")]
public string DatabaseMailProfile { get; public set; }
    [SfcPropertyAttribute("1024")]
public string ErrorLogFile { get; public set; }
    [SfcPropertyAttribute("1024")]
public string HostLoginName { get; }
    [SfcPropertyAttribute("1024")]
public int IdleCpuDuration { get; public set; }
    [SfcPropertyAttribute("1024")]
public int IdleCpuPercentage { get; public set; }
    [SfcPropertyAttribute("1024")]
public bool IsCpuPollingEnabled { get; public set; }
    [SfcPropertyAttribute("1024")]
public JobServerType JobServerType { get; }
    [SfcPropertyAttribute("1024")]
public string LocalHostAlias { get; public set; }
    [SfcPropertyAttribute("1024")]
public int LoginTimeout { get; public set; }
    [SfcPropertyAttribute("1024")]
public int MaximumHistoryRows { get; public set; }
    [SfcPropertyAttribute("1024")]
public int MaximumJobHistoryRows { get; public set; }
    [SfcPropertyAttribute("1056")]
public string MsxAccountCredentialName { get; }
    [SfcPropertyAttribute("1056")]
public string MsxAccountName { get; }
    [SfcPropertyAttribute("1024")]
public string MsxServerName { get; }
    [SfcPropertyAttribute("1024")]
public string NetSendRecipient { get; public set; }
    [SfcPropertyAttribute("1024")]
public bool ReplaceAlertTokensEnabled { get; public set; }
    [SfcPropertyAttribute("1024")]
public bool SaveInSentFolder { get; public set; }
    [SfcPropertyAttribute("1024")]
public string ServiceAccount { get; }
    [SfcPropertyAttribute("1024")]
public ServiceStartMode ServiceStartMode { get; }
    [SfcPropertyAttribute("1024")]
public bool SqlAgentAutoStart { get; public set; }
    [SfcPropertyAttribute("1024")]
public string SqlAgentMailProfile { get; public set; }
    [SfcPropertyAttribute("1024")]
public bool SqlAgentRestart { get; public set; }
    [SfcPropertyAttribute("1024")]
public bool SqlServerRestart { get; public set; }
    [SfcPropertyAttribute("1024")]
public bool WriteOemErrorLog { get; public set; }
    internal JobServer(Server parentsrv, ObjectKeyBase key, SqlSmoState state);
    public Server get_Parent();
    public string get_Name();
    public Job GetJobByID(Guid jobId);
    public void RemoveJobByID(Guid jobId);
    public void RemoveJobsByLogin(string login);
    protected sealed virtual void GetUrnRecursive(StringBuilder urnbuilder, UrnIdOption idOption);
    protected internal virtual string GetDBName();
    protected internal virtual string get_CollationDatabaseInServer();
    public static string get_UrnSuffix();
    public sealed virtual void Alter();
    internal virtual void ScriptCreate(StringCollection queries, ScriptingPreferences sp);
    internal virtual void ScriptAlter(StringCollection queries, ScriptingPreferences sp);
    private void ScriptProperties(StringCollection queries, ScriptingPreferences sp);
    public sealed virtual StringCollection Script();
    public sealed virtual StringCollection Script(ScriptingOptions scriptingOptions);
    protected virtual bool ImplInitialize(String[] fields, OrderBy[] orderby);
    public void TestMailProfile(string profileName);
    [ObsoleteAttribute]
public void TestNetSend();
    public void PurgeJobHistory();
    [ObsoleteAttribute]
public void SetHostLoginAccount(string loginName, string password);
    [ObsoleteAttribute]
public void ClearHostLoginAccount();
    [ObsoleteAttribute]
public void SetMsxAccount(string account, string password);
    public void SetMsxAccount(string credentialName);
    public void ClearMsxAccount();
    private void ParseAccountName(string accountName, StringBuilder domainName, StringBuilder userName);
    public void CycleErrorLog();
    public DataTable EnumErrorLogs();
    public DataTable ReadErrorLog();
    public DataTable ReadErrorLog(int logNumber);
    public JobCategoryCollection get_JobCategories();
    public OperatorCategoryCollection get_OperatorCategories();
    public AlertCategoryCollection get_AlertCategories();
    public AlertSystem get_AlertSystem();
    public AlertCollection get_Alerts();
    public OperatorCollection get_Operators();
    public TargetServerCollection get_TargetServers();
    public TargetServerGroupCollection get_TargetServerGroups();
    public JobCollection get_Jobs();
    public JobScheduleCollection get_SharedSchedules();
    public ProxyAccountCollection get_ProxyAccounts();
    public bool get_SysAdminOnly();
    protected virtual void MarkDropped();
    public DataTable EnumJobHistory(JobHistoryFilter filter);
    public DataTable EnumJobHistory();
    public DataTable EnumJobs(JobFilter filter);
    private void FilterJobsByExecutionStatus(JobFilter filter, DataTable& jobsTable);
    private void FilterJobsByJobType(JobFilter filter, DataTable& jobsTable);
    private void FilterJobsBySubSystem(JobFilter filter, DataTable& jobsTable);
    public DataTable EnumJobs();
    public DataTable EnumSubSystems();
    public void MsxDefect();
    public void MsxDefect(bool forceDefection);
    public void MsxEnlist(string masterServer, string location);
    public void PurgeJobHistory(JobHistoryFilter filter);
    public void ReassignJobsByLogin(string oldLogin, string newLogin);
    [ObsoleteAttribute("Use RemoveJobByID")]
public void DropJobByID(Guid jobid);
    public void DropJobsByLogin(string login);
    public void DropJobsByServer(string serverName);
    public void StartMonitor(string netSendAddress, int restartAttempts);
    public void StopMonitor();
    internal DataTable EnumPerfInfoInternal(string objectName, string counterName, string instanceName);
    public DataTable EnumPerformanceCounters();
    public DataTable EnumPerformanceCounters(string objectName);
    public DataTable EnumPerformanceCounters(string objectName, string counterName);
    public DataTable EnumPerformanceCounters(string objectName, string counterName, string instanceName);
    internal virtual SqlPropertyMetadataProvider GetPropertyMetadataProvider();
    public string get_AgentDomainGroup();
    public AgentLogLevels get_AgentLogLevel();
    public void set_AgentLogLevel(AgentLogLevels value);
    public AgentMailType get_AgentMailType();
    public void set_AgentMailType(AgentMailType value);
    public int get_AgentShutdownWaitTime();
    public void set_AgentShutdownWaitTime(int value);
    public string get_DatabaseMailProfile();
    public void set_DatabaseMailProfile(string value);
    public string get_ErrorLogFile();
    public void set_ErrorLogFile(string value);
    public string get_HostLoginName();
    public int get_IdleCpuDuration();
    public void set_IdleCpuDuration(int value);
    public int get_IdleCpuPercentage();
    public void set_IdleCpuPercentage(int value);
    public bool get_IsCpuPollingEnabled();
    public void set_IsCpuPollingEnabled(bool value);
    public JobServerType get_JobServerType();
    public string get_LocalHostAlias();
    public void set_LocalHostAlias(string value);
    public int get_LoginTimeout();
    public void set_LoginTimeout(int value);
    public int get_MaximumHistoryRows();
    public void set_MaximumHistoryRows(int value);
    public int get_MaximumJobHistoryRows();
    public void set_MaximumJobHistoryRows(int value);
    public string get_MsxAccountCredentialName();
    public string get_MsxAccountName();
    public string get_MsxServerName();
    public string get_NetSendRecipient();
    public void set_NetSendRecipient(string value);
    public bool get_ReplaceAlertTokensEnabled();
    public void set_ReplaceAlertTokensEnabled(bool value);
    public bool get_SaveInSentFolder();
    public void set_SaveInSentFolder(bool value);
    public string get_ServiceAccount();
    public ServiceStartMode get_ServiceStartMode();
    public bool get_SqlAgentAutoStart();
    public void set_SqlAgentAutoStart(bool value);
    public string get_SqlAgentMailProfile();
    public void set_SqlAgentMailProfile(string value);
    public bool get_SqlAgentRestart();
    public void set_SqlAgentRestart(bool value);
    public bool get_SqlServerRestart();
    public void set_SqlServerRestart(bool value);
    public bool get_WriteOemErrorLog();
    public void set_WriteOemErrorLog(bool value);
}
[SfcElementTypeAttribute("Step")]
public class Microsoft.SqlServer.Management.Smo.Agent.JobStep : AgentObjectBase {
    private int stepIDInternal;
    public static string UrnSuffix { get; }
    internal int StepIDInternal { get; }
    [SfcObjectAttribute("1")]
public Job Parent { get; public set; }
    [SfcPropertyAttribute("1024")]
public string Command { get; public set; }
    [SfcPropertyAttribute("1024")]
public int CommandExecutionSuccessCode { get; public set; }
    [SfcPropertyAttribute("1024")]
public string DatabaseName { get; public set; }
    [SfcPropertyAttribute("1024")]
public string DatabaseUserName { get; public set; }
    [SfcPropertyAttribute("1280")]
public int ID { get; public set; }
    [SfcPropertyAttribute("1024")]
public JobStepFlags JobStepFlags { get; public set; }
    [SfcPropertyAttribute("1024")]
public DateTime LastRunDate { get; }
    [SfcPropertyAttribute("1024")]
public int LastRunDuration { get; }
    [SfcPropertyAttribute("1024")]
public CompletionResult LastRunOutcome { get; }
    [SfcPropertyAttribute("1024")]
public int LastRunRetries { get; }
    [SfcPropertyAttribute("1024")]
public StepCompletionAction OnFailAction { get; public set; }
    [SfcPropertyAttribute("1024")]
public int OnFailStep { get; public set; }
    [SfcPropertyAttribute("1024")]
public StepCompletionAction OnSuccessAction { get; public set; }
    [SfcPropertyAttribute("1024")]
public int OnSuccessStep { get; public set; }
    [SfcPropertyAttribute("1024")]
public OSRunPriority OSRunPriority { get; public set; }
    [SfcPropertyAttribute("1024")]
public string OutputFileName { get; public set; }
    [SfcPropertyAttribute("1024")]
public string ProxyName { get; public set; }
    [SfcPropertyAttribute("1024")]
public int RetryAttempts { get; public set; }
    [SfcPropertyAttribute("1024")]
public int RetryInterval { get; public set; }
    [SfcPropertyAttribute("1024")]
public string Server { get; public set; }
    [SfcPropertyAttribute("1024")]
public AgentSubSystem SubSystem { get; public set; }
    internal JobStep(AbstractCollectionBase parentColl, ObjectKeyBase key, SqlSmoState state);
    public JobStep(Job job, string name);
    public static string get_UrnSuffix();
    public sealed virtual void Create();
    internal virtual void ScriptCreate(StringCollection queries, ScriptingPreferences sp);
    private void GetAllParams(StringBuilder sb, ScriptingPreferences sp, Int32& count);
    public sealed virtual void Drop();
    public sealed virtual void DropIfExists();
    internal virtual void ScriptDrop(StringCollection queries, ScriptingPreferences sp);
    protected virtual void PostDrop();
    public sealed virtual void Alter();
    internal virtual void ScriptAlter(StringCollection queries, ScriptingPreferences sp);
    public sealed virtual void Rename(string newName);
    internal virtual void ScriptRename(StringCollection queries, ScriptingPreferences sp, string newName);
    internal int get_StepIDInternal();
    public DataTable EnumLogs();
    public void DeleteLogs(DateTime olderThan);
    public void DeleteLogs(int largerThan);
    public sealed virtual StringCollection Script();
    public sealed virtual StringCollection Script(ScriptingOptions scriptingOptions);
    public Job get_Parent();
    public void set_Parent(Job value);
    internal virtual SqlPropertyMetadataProvider GetPropertyMetadataProvider();
    public string get_Command();
    public void set_Command(string value);
    public int get_CommandExecutionSuccessCode();
    public void set_CommandExecutionSuccessCode(int value);
    public string get_DatabaseName();
    public void set_DatabaseName(string value);
    public string get_DatabaseUserName();
    public void set_DatabaseUserName(string value);
    public int get_ID();
    public void set_ID(int value);
    public JobStepFlags get_JobStepFlags();
    public void set_JobStepFlags(JobStepFlags value);
    public DateTime get_LastRunDate();
    public int get_LastRunDuration();
    public CompletionResult get_LastRunOutcome();
    public int get_LastRunRetries();
    public StepCompletionAction get_OnFailAction();
    public void set_OnFailAction(StepCompletionAction value);
    public int get_OnFailStep();
    public void set_OnFailStep(int value);
    public StepCompletionAction get_OnSuccessAction();
    public void set_OnSuccessAction(StepCompletionAction value);
    public int get_OnSuccessStep();
    public void set_OnSuccessStep(int value);
    public OSRunPriority get_OSRunPriority();
    public void set_OSRunPriority(OSRunPriority value);
    public string get_OutputFileName();
    public void set_OutputFileName(string value);
    public string get_ProxyName();
    public void set_ProxyName(string value);
    public int get_RetryAttempts();
    public void set_RetryAttempts(int value);
    public int get_RetryInterval();
    public void set_RetryInterval(int value);
    public string get_Server();
    public void set_Server(string value);
    public AgentSubSystem get_SubSystem();
    public void set_SubSystem(AgentSubSystem value);
    internal virtual String[] GetNonAlterableProperties();
}
[DefaultMemberAttribute("Item")]
public class Microsoft.SqlServer.Management.Smo.Agent.JobStepCollection : ParameterCollectionBase {
    public Job Parent { get; }
    public JobStep Item { get; }
    public JobStep Item { get; }
    internal JobStepCollection(SqlSmoObject parentInstance);
    public Job get_Parent();
    public JobStep get_Item(int index);
    public void CopyTo(JobStep[] array, int index);
    public JobStep get_Item(string name);
    protected virtual Type GetCollectionElementType();
    internal virtual SqlSmoObject GetCollectionElementInstance(ObjectKeyBase key, SqlSmoState state);
    public void Add(JobStep jobStep);
    public void Add(JobStep jobStep, string insertAtColumnName);
    public void Add(JobStep jobStep, int insertAtPosition);
    public void Remove(JobStep jobStep);
    public JobStep ItemById(int id);
}
public enum Microsoft.SqlServer.Management.Smo.Agent.NotifyType : Enum {
    public int value__;
    public static NotifyType All;
    public static NotifyType Actual;
    public static NotifyType Target;
}
public class Microsoft.SqlServer.Management.Smo.Agent.Operator : AgentObjectBase {
    public static string UrnSuffix { get; }
    [SfcObjectAttribute("1")]
public JobServer Parent { get; public set; }
    [SfcPropertyAttribute("1024")]
public string CategoryName { get; public set; }
    [SfcPropertyAttribute("1024")]
public string EmailAddress { get; public set; }
    [SfcPropertyAttribute("1024")]
public bool Enabled { get; public set; }
    [SfcPropertyAttribute("1024")]
public int ID { get; }
    [SfcPropertyAttribute("1024")]
public DateTime LastEmailDate { get; }
    [SfcPropertyAttribute("1024")]
public DateTime LastNetSendDate { get; }
    [SfcPropertyAttribute("1024")]
public DateTime LastPagerDate { get; }
    [SfcPropertyAttribute("1024")]
public string NetSendAddress { get; public set; }
    [SfcPropertyAttribute("1024")]
public string PagerAddress { get; public set; }
    [SfcPropertyAttribute("1024")]
public WeekDays PagerDays { get; public set; }
    [SfcPropertyAttribute("1024")]
public TimeSpan SaturdayPagerEndTime { get; public set; }
    [SfcPropertyAttribute("1024")]
public TimeSpan SaturdayPagerStartTime { get; public set; }
    [SfcPropertyAttribute("1024")]
public TimeSpan SundayPagerEndTime { get; public set; }
    [SfcPropertyAttribute("1024")]
public TimeSpan SundayPagerStartTime { get; public set; }
    [SfcPropertyAttribute("1024")]
public TimeSpan WeekdayPagerEndTime { get; public set; }
    [SfcPropertyAttribute("1024")]
public TimeSpan WeekdayPagerStartTime { get; public set; }
    internal Operator(AbstractCollectionBase parentColl, ObjectKeyBase key, SqlSmoState state);
    public Operator(JobServer jobServer, string name);
    public static string get_UrnSuffix();
    public sealed virtual void Create();
    internal virtual void ScriptCreate(StringCollection queries, ScriptingPreferences sp);
    private void GetAllParams(StringBuilder sb, ScriptingPreferences sp, Int32& count);
    public sealed virtual void Drop();
    public sealed virtual void DropIfExists();
    internal virtual void ScriptDrop(StringCollection queries, ScriptingPreferences sp);
    public sealed virtual void Alter();
    internal virtual void ScriptAlter(StringCollection queries, ScriptingPreferences sp);
    public sealed virtual void Rename(string newName);
    internal virtual void ScriptRename(StringCollection queries, ScriptingPreferences sp, string newName);
    public void AddNotification(string alertName, NotifyMethods notifymethod);
    public void RemoveNotification(string alertName);
    public void UpdateNotification(string alertName, NotifyMethods notifymethod);
    public DataTable EnumNotifications();
    public DataTable EnumNotifications(NotifyMethods notifyMethod);
    public DataTable EnumNotifications(string alertName);
    public DataTable EnumNotifications(NotifyMethods notifyMethod, string alertName);
    public DataTable EnumJobNotifications();
    public sealed virtual StringCollection Script();
    public sealed virtual StringCollection Script(ScriptingOptions scriptingOptions);
    public JobServer get_Parent();
    public void set_Parent(JobServer value);
    internal virtual SqlPropertyMetadataProvider GetPropertyMetadataProvider();
    public string get_CategoryName();
    public void set_CategoryName(string value);
    public string get_EmailAddress();
    public void set_EmailAddress(string value);
    public bool get_Enabled();
    public void set_Enabled(bool value);
    public int get_ID();
    public DateTime get_LastEmailDate();
    public DateTime get_LastNetSendDate();
    public DateTime get_LastPagerDate();
    public string get_NetSendAddress();
    public void set_NetSendAddress(string value);
    public string get_PagerAddress();
    public void set_PagerAddress(string value);
    public WeekDays get_PagerDays();
    public void set_PagerDays(WeekDays value);
    public TimeSpan get_SaturdayPagerEndTime();
    public void set_SaturdayPagerEndTime(TimeSpan value);
    public TimeSpan get_SaturdayPagerStartTime();
    public void set_SaturdayPagerStartTime(TimeSpan value);
    public TimeSpan get_SundayPagerEndTime();
    public void set_SundayPagerEndTime(TimeSpan value);
    public TimeSpan get_SundayPagerStartTime();
    public void set_SundayPagerStartTime(TimeSpan value);
    public TimeSpan get_WeekdayPagerEndTime();
    public void set_WeekdayPagerEndTime(TimeSpan value);
    public TimeSpan get_WeekdayPagerStartTime();
    public void set_WeekdayPagerStartTime(TimeSpan value);
}
public class Microsoft.SqlServer.Management.Smo.Agent.OperatorCategory : CategoryBase {
    public static string UrnSuffix { get; }
    [SfcObjectAttribute("1")]
public JobServer Parent { get; public set; }
    [SfcPropertyAttribute("1024")]
public int ID { get; }
    internal OperatorCategory(AbstractCollectionBase parentColl, ObjectKeyBase key, SqlSmoState state);
    public OperatorCategory(JobServer jobServer, string name);
    public static string get_UrnSuffix();
    internal virtual string GetCategoryClassName();
    internal virtual int GetCategoryClass();
    public JobServer get_Parent();
    public void set_Parent(JobServer value);
    internal virtual SqlPropertyMetadataProvider GetPropertyMetadataProvider();
    public int get_ID();
}
[DefaultMemberAttribute("Item")]
public class Microsoft.SqlServer.Management.Smo.Agent.OperatorCategoryCollection : SimpleObjectCollectionBase {
    public JobServer Parent { get; }
    public OperatorCategory Item { get; }
    public OperatorCategory Item { get; }
    internal OperatorCategoryCollection(SqlSmoObject parentInstance);
    public JobServer get_Parent();
    public OperatorCategory get_Item(int index);
    public OperatorCategory get_Item(string name);
    public void CopyTo(OperatorCategory[] array, int index);
    public OperatorCategory ItemById(int id);
    protected virtual Type GetCollectionElementType();
    internal virtual SqlSmoObject GetCollectionElementInstance(ObjectKeyBase key, SqlSmoState state);
    public void Remove(OperatorCategory operatorCategory);
    public void Remove(string name);
    public void Add(OperatorCategory operatorCategory);
    internal SqlSmoObject GetObjectByName(string name);
    internal virtual ObjectKeyBase CreateKeyFromUrn(Urn urn);
}
[DefaultMemberAttribute("Item")]
public class Microsoft.SqlServer.Management.Smo.Agent.OperatorCollection : SimpleObjectCollectionBase {
    public JobServer Parent { get; }
    public Operator Item { get; }
    public Operator Item { get; }
    internal OperatorCollection(SqlSmoObject parentInstance);
    public JobServer get_Parent();
    public Operator get_Item(int index);
    public Operator get_Item(string name);
    public void CopyTo(Operator[] array, int index);
    public Operator ItemById(int id);
    public StringCollection Script();
    public StringCollection Script(ScriptingOptions scriptingOptions);
    protected virtual Type GetCollectionElementType();
    internal virtual SqlSmoObject GetCollectionElementInstance(ObjectKeyBase key, SqlSmoState state);
    public void Add(Operator serverOperator);
    internal SqlSmoObject GetObjectByName(string name);
    internal virtual ObjectKeyBase CreateKeyFromUrn(Urn urn);
}
public class Microsoft.SqlServer.Management.Smo.Agent.ProxyAccount : AgentObjectBase {
    public static string UrnSuffix { get; }
    [SfcObjectAttribute("1")]
public JobServer Parent { get; public set; }
    [SfcPropertyAttribute("1024")]
public int CredentialID { get; }
    [SfcPropertyAttribute("1024")]
public string CredentialIdentity { get; }
    [SfcPropertyAttribute("1024")]
public string CredentialName { get; public set; }
    [SfcPropertyAttribute("1024")]
public string Description { get; public set; }
    [SfcPropertyAttribute("1024")]
public int ID { get; }
    [SfcPropertyAttribute("1024")]
public bool IsEnabled { get; public set; }
    internal ProxyAccount(AbstractCollectionBase parentColl, ObjectKeyBase key, SqlSmoState state);
    public ProxyAccount(JobServer jobServer, string name);
    public ProxyAccount(JobServer jobServer, string proxyName, string credentialName, bool enabled, string description);
    public ProxyAccount(JobServer jobServer, string proxyName, string credentialName, bool enabled);
    public ProxyAccount(JobServer jobServer, string proxyName, string credentialName);
    public static string get_UrnSuffix();
    public sealed virtual void Create();
    internal virtual void ScriptCreate(StringCollection queries, ScriptingPreferences sp);
    public sealed virtual void Alter();
    internal virtual void ScriptAlter(StringCollection queries, ScriptingPreferences sp);
    public sealed virtual void Drop();
    public sealed virtual void DropIfExists();
    internal virtual void ScriptDrop(StringCollection queries, ScriptingPreferences sp);
    public sealed virtual void Rename(string newName);
    internal virtual void ScriptRename(StringCollection queries, ScriptingPreferences sp, string newName);
    public sealed virtual StringCollection Script();
    public sealed virtual StringCollection Script(ScriptingOptions scriptingOptions);
    public void AddSubSystem(AgentSubSystem subSystem);
    public void RemoveSubSystem(AgentSubSystem subSystem);
    public DataTable EnumSubSystems();
    public void AddLogin(string loginName);
    private void RemovePrincipal(string principalName, string exceptionString);
    public void RemoveLogin(string loginName);
    public DataTable EnumLogins();
    public void AddServerRole(string serverRoleName);
    public void RemoveServerRole(string serverRoleName);
    public DataTable EnumServerRoles();
    public void AddMsdbRole(string msdbRoleName);
    public void RemoveMsdbRole(string msdbRoleName);
    public DataTable EnumMsdbRoles();
    public void Reassign(string targetProxyAccountName);
    public JobServer get_Parent();
    public void set_Parent(JobServer value);
    internal virtual SqlPropertyMetadataProvider GetPropertyMetadataProvider();
    public int get_CredentialID();
    public string get_CredentialIdentity();
    public string get_CredentialName();
    public void set_CredentialName(string value);
    public string get_Description();
    public void set_Description(string value);
    public int get_ID();
    public bool get_IsEnabled();
    public void set_IsEnabled(bool value);
    private void Init(JobServer jobServer, string proxyName, string credentialName, bool enabled, string description);
}
[DefaultMemberAttribute("Item")]
public class Microsoft.SqlServer.Management.Smo.Agent.ProxyAccountCollection : SimpleObjectCollectionBase {
    public JobServer Parent { get; }
    public ProxyAccount Item { get; }
    public ProxyAccount Item { get; }
    internal ProxyAccountCollection(SqlSmoObject parentInstance);
    public JobServer get_Parent();
    public ProxyAccount get_Item(int index);
    public ProxyAccount get_Item(string name);
    public void CopyTo(ProxyAccount[] array, int index);
    public ProxyAccount ItemById(int id);
    protected virtual Type GetCollectionElementType();
    internal virtual SqlSmoObject GetCollectionElementInstance(ObjectKeyBase key, SqlSmoState state);
    public void Add(ProxyAccount proxyAccount);
    internal SqlSmoObject GetObjectByName(string name);
    internal virtual ObjectKeyBase CreateKeyFromUrn(Urn urn);
}
public class Microsoft.SqlServer.Management.Smo.Agent.ScheduleBase : AgentObjectBase {
    [SfcPropertyAttribute("1024")]
public int ID { get; }
    internal ScheduleBase(AbstractCollectionBase parentColl, ObjectKeyBase key, SqlSmoState eState);
    public int get_ID();
    protected void SetId(int id);
    internal virtual ObjectKeyBase GetEmptyKey();
}
public class Microsoft.SqlServer.Management.Smo.Agent.TargetServer : AgentObjectBase {
    public static string UrnSuffix { get; }
    [SfcObjectAttribute("1")]
public JobServer Parent { get; }
    [SfcPropertyAttribute("1024")]
public DateTime EnlistDate { get; }
    [SfcPropertyAttribute("1024")]
public int ID { get; }
    [SfcPropertyAttribute("1024")]
public DateTime LastPollDate { get; }
    [SfcPropertyAttribute("1024")]
public DateTime LocalTime { get; }
    [SfcPropertyAttribute("1024")]
public string Location { get; }
    [SfcPropertyAttribute("1024")]
public int PendingInstructions { get; }
    [SfcPropertyAttribute("1024")]
public int PollingInterval { get; }
    [SfcPropertyAttribute("1024")]
public TargetServerStatus Status { get; }
    [SfcPropertyAttribute("1024")]
public int TimeZoneAdjustment { get; }
    internal TargetServer(AbstractCollectionBase parentColl, ObjectKeyBase key, SqlSmoState state);
    public static string get_UrnSuffix();
    public JobServer get_Parent();
    internal virtual SqlPropertyMetadataProvider GetPropertyMetadataProvider();
    public DateTime get_EnlistDate();
    public int get_ID();
    public DateTime get_LastPollDate();
    public DateTime get_LocalTime();
    public string get_Location();
    public int get_PendingInstructions();
    public int get_PollingInterval();
    public TargetServerStatus get_Status();
    public int get_TimeZoneAdjustment();
}
[DefaultMemberAttribute("Item")]
public class Microsoft.SqlServer.Management.Smo.Agent.TargetServerCollection : SimpleObjectCollectionBase {
    public JobServer Parent { get; }
    public TargetServer Item { get; }
    public TargetServer Item { get; }
    internal TargetServerCollection(SqlSmoObject parentInstance);
    public JobServer get_Parent();
    public TargetServer get_Item(int index);
    public TargetServer get_Item(string name);
    public void CopyTo(TargetServer[] array, int index);
    public TargetServer ItemById(int id);
    protected virtual Type GetCollectionElementType();
    internal virtual SqlSmoObject GetCollectionElementInstance(ObjectKeyBase key, SqlSmoState state);
    public void Add(TargetServer server);
    internal SqlSmoObject GetObjectByName(string name);
    internal virtual ObjectKeyBase CreateKeyFromUrn(Urn urn);
}
public class Microsoft.SqlServer.Management.Smo.Agent.TargetServerGroup : AgentObjectBase {
    public static string UrnSuffix { get; }
    [SfcObjectAttribute("1")]
public JobServer Parent { get; public set; }
    [SfcPropertyAttribute("1024")]
public int ID { get; }
    internal TargetServerGroup(AbstractCollectionBase parentColl, ObjectKeyBase key, SqlSmoState state);
    public TargetServerGroup(JobServer jobServer, string name);
    public static string get_UrnSuffix();
    public sealed virtual void Create();
    internal virtual void ScriptCreate(StringCollection queries, ScriptingPreferences sp);
    public sealed virtual void Drop();
    public sealed virtual void DropIfExists();
    internal virtual void ScriptDrop(StringCollection queries, ScriptingPreferences sp);
    public sealed virtual void Rename(string newName);
    internal virtual void ScriptRename(StringCollection queries, ScriptingPreferences sp, string newName);
    public void AddMemberServer(string srvname);
    public TargetServer[] EnumMemberServers();
    public void RemoveMemberServer(string srvname);
    public StringCollection Script();
    public StringCollection Script(ScriptingOptions scriptingOptions);
    public JobServer get_Parent();
    public void set_Parent(JobServer value);
    internal virtual SqlPropertyMetadataProvider GetPropertyMetadataProvider();
    public int get_ID();
}
[DefaultMemberAttribute("Item")]
public class Microsoft.SqlServer.Management.Smo.Agent.TargetServerGroupCollection : SimpleObjectCollectionBase {
    public JobServer Parent { get; }
    public TargetServerGroup Item { get; }
    public TargetServerGroup Item { get; }
    internal TargetServerGroupCollection(SqlSmoObject parentInstance);
    public JobServer get_Parent();
    public TargetServerGroup get_Item(int index);
    public TargetServerGroup get_Item(string name);
    public void CopyTo(TargetServerGroup[] array, int index);
    public TargetServerGroup ItemById(int id);
    protected virtual Type GetCollectionElementType();
    internal virtual SqlSmoObject GetCollectionElementInstance(ObjectKeyBase key, SqlSmoState state);
    public void Add(TargetServerGroup targetServerGroup);
    internal SqlSmoObject GetObjectByName(string name);
    internal virtual ObjectKeyBase CreateKeyFromUrn(Urn urn);
}
internal class Microsoft.SqlServer.Management.Smo.AgentPreferences : object {
    [CompilerGeneratedAttribute]
private bool <AlertJob>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <JobId>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Notify>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <InScriptJob>k__BackingField;
    public bool AlertJob { get; public set; }
    public bool JobId { get; public set; }
    public bool Notify { get; public set; }
    internal bool InScriptJob { get; internal set; }
    [CompilerGeneratedAttribute]
public bool get_AlertJob();
    [CompilerGeneratedAttribute]
public void set_AlertJob(bool value);
    [CompilerGeneratedAttribute]
public bool get_JobId();
    [CompilerGeneratedAttribute]
public void set_JobId(bool value);
    [CompilerGeneratedAttribute]
public bool get_Notify();
    [CompilerGeneratedAttribute]
public void set_Notify(bool value);
    [CompilerGeneratedAttribute]
internal bool get_InScriptJob();
    [CompilerGeneratedAttribute]
internal void set_InScriptJob(bool value);
    private void Init();
    internal object Clone();
}
[StateChangeEventAttribute("CREATE_APPLICATION_ROLE", "APPLICATION ROLE")]
[StateChangeEventAttribute("ALTER_APPLICATION_ROLE", "APPLICATION ROLE")]
[EvaluationModeAttribute("7")]
[PhysicalFacetAttribute]
[SfcElementAttribute("48")]
public class Microsoft.SqlServer.Management.Smo.ApplicationRole : ScriptNameObjectBase {
    private SqlSecureString password;
    private ApplicationRoleEvents events;
    public static string UrnSuffix { get; }
    [SfcObjectAttribute("1", "0", "Microsoft.SqlServer.Management.Smo.ExtendedProperty")]
public ExtendedPropertyCollection ExtendedProperties { get; }
    [SfcObjectAttribute("1")]
public Database Parent { get; public set; }
    internal UserPermissionCollection Permissions { get; }
    private bool Microsoft.SqlServer.Management.Sdk.Sfc.ISfcSupportsDesignMode.IsDesignMode { get; }
    [SfcPropertyAttribute("3072")]
public DateTime CreateDate { get; }
    [SfcPropertyAttribute("3072")]
public DateTime DateLastModified { get; }
    [SfcPropertyAttribute("3072")]
[SfcReferenceAttribute("Microsoft.SqlServer.Management.Smo.Schema", "Server[@Name = '{0}']/Database[@Name = '{1}']/Schema[@Name = '{2}']", "Mono.Cecil.CustomAttributeArgument[]")]
[CLSCompliantAttribute("False")]
public string DefaultSchema { get; public set; }
    [SfcPropertyAttribute("3072")]
public int ID { get; }
    public ApplicationRoleEvents Events { get; }
    internal ApplicationRole(AbstractCollectionBase parentColl, ObjectKeyBase key, SqlSmoState state);
    public ApplicationRole(Database database, string name);
    public static string get_UrnSuffix();
    public sealed virtual ExtendedPropertyCollection get_ExtendedProperties();
    internal virtual void AddScriptPermission(StringCollection query, ScriptingPreferences sp);
    public sealed virtual void Drop();
    public sealed virtual void DropIfExists();
    internal virtual void ScriptDrop(StringCollection dropQuery, ScriptingPreferences sp);
    public void Create(string password);
    public void Create(SecureString password);
    private void ScriptDdl(StringBuilder sb, ScriptingPreferences sp);
    protected virtual void PostCreate();
    internal virtual void ScriptCreate(StringCollection createQuery, ScriptingPreferences sp);
    public sealed virtual StringCollection Script();
    public sealed virtual StringCollection Script(ScriptingOptions scriptingOptions);
    public sealed virtual void Alter();
    internal virtual void ScriptAlter(StringCollection query, ScriptingPreferences sp);
    public sealed virtual void Rename(string newname);
    internal virtual void ScriptRename(StringCollection renameQuery, ScriptingPreferences sp, string newName);
    public void ChangePassword(string password);
    public void ChangePassword(SecureString password);
    internal virtual PropagateInfo[] GetPropagateInfo(PropagateAction action);
    public Database get_Parent();
    public void set_Parent(Database value);
    internal virtual UserPermissionCollection get_Permissions();
    private sealed virtual override bool Microsoft.SqlServer.Management.Sdk.Sfc.ISfcSupportsDesignMode.get_IsDesignMode();
    internal virtual SqlPropertyMetadataProvider GetPropertyMetadataProvider();
    public DateTime get_CreateDate();
    public DateTime get_DateLastModified();
    public string get_DefaultSchema();
    public void set_DefaultSchema(string value);
    public int get_ID();
    public sealed virtual void Deny(ObjectPermissionSet permission, String[] granteeNames);
    public sealed virtual void Deny(ObjectPermissionSet permission, String[] granteeNames, bool cascade);
    public sealed virtual void Grant(ObjectPermissionSet permission, String[] granteeNames);
    public sealed virtual void Grant(ObjectPermissionSet permission, String[] granteeNames, bool grantGrant);
    public sealed virtual void Grant(ObjectPermissionSet permission, String[] granteeNames, bool grantGrant, string asRole);
    public sealed virtual void Revoke(ObjectPermissionSet permission, String[] granteeNames);
    public sealed virtual void Revoke(ObjectPermissionSet permission, String[] granteeNames, bool revokeGrant, bool cascade);
    public void Revoke(ObjectPermissionSet permission, String[] granteeNames, bool revokeGrant, bool cascade, string asRole);
    public sealed virtual void Deny(ObjectPermissionSet permission, string granteeName);
    public sealed virtual void Deny(ObjectPermissionSet permission, string granteeName, bool cascade);
    public sealed virtual void Grant(ObjectPermissionSet permission, string granteeName);
    public sealed virtual void Grant(ObjectPermissionSet permission, string granteeName, bool grantGrant);
    public sealed virtual void Grant(ObjectPermissionSet permission, string granteeName, bool grantGrant, string asRole);
    public sealed virtual void Revoke(ObjectPermissionSet permission, string granteeName);
    public void Revoke(ObjectPermissionSet permission, string granteeName, bool revokeGrant, bool cascade);
    public sealed virtual void Revoke(ObjectPermissionSet permission, string granteeName, bool revokeGrant, bool cascade, string asRole);
    public sealed virtual ObjectPermissionInfo[] EnumObjectPermissions();
    public sealed virtual ObjectPermissionInfo[] EnumObjectPermissions(string granteeName);
    public sealed virtual ObjectPermissionInfo[] EnumObjectPermissions(ObjectPermissionSet permissions);
    public sealed virtual ObjectPermissionInfo[] EnumObjectPermissions(string granteeName, ObjectPermissionSet permissions);
    public ApplicationRoleEvents get_Events();
}
[DefaultMemberAttribute("Item")]
public class Microsoft.SqlServer.Management.Smo.ApplicationRoleCollection : SimpleObjectCollectionBase {
    public Database Parent { get; }
    public ApplicationRole Item { get; }
    public ApplicationRole Item { get; }
    internal ApplicationRoleCollection(SqlSmoObject parentInstance);
    public Database get_Parent();
    public ApplicationRole get_Item(int index);
    public ApplicationRole get_Item(string name);
    public void CopyTo(ApplicationRole[] array, int index);
    public ApplicationRole ItemById(int id);
    protected virtual Type GetCollectionElementType();
    internal virtual SqlSmoObject GetCollectionElementInstance(ObjectKeyBase key, SqlSmoState state);
    public void Add(ApplicationRole applicationRole);
    internal SqlSmoObject GetObjectByName(string name);
    internal virtual ObjectKeyBase CreateKeyFromUrn(Urn urn);
}
public class Microsoft.SqlServer.Management.Smo.ApplicationRoleEvents : object {
    private ObjectEventsWorker serverEventsWorker;
    private ApplicationRole parent;
    internal ApplicationRoleEvents(ApplicationRole parent);
    public ObjectEventSet GetEventSelection();
    public void SubscribeToEvents(ObjectEventSet events);
    public void SubscribeToEvents(ObjectEventSet events, ServerEventHandler eventHandler);
    public void UnsubscribeFromEvents(ObjectEventSet events);
    public void UnsubscribeAllEvents();
    public void StartEvents();
    public void StopEvents();
    public void add_ServerEvent(ServerEventHandler value);
    public void remove_ServerEvent(ServerEventHandler value);
    private void InitializeEvents();
}
public abstract class Microsoft.SqlServer.Management.Smo.ArrayListCollectionBase : SmoCollectionBase {
    internal ArrayList InternalList { get; }
    internal ArrayListCollectionBase(SqlSmoObject parent);
    internal ArrayList get_InternalList();
    private void FixIDs(int startIdx);
    protected void AddImpl(SqlSmoObject obj, int insertAtPosition);
    internal void AddImpl(SqlSmoObject obj, ObjectKeyBase insertAtKey);
    internal void AddImpl(SqlSmoObject obj);
}
internal static class Microsoft.SqlServer.Management.Smo.AssemblyVersionInfo : object {
    public static string VersionString;
    public static int MajorVersion;
}
[StateChangeEventAttribute("CREATE_ASYMMETRIC_KEY", "ASYMMETRICKEY", "ASYMMETRIC KEY")]
[StateChangeEventAttribute("ALTER_ASYMMETRIC_KEY", "ASYMMETRICKEY", "ASYMMETRIC KEY")]
[StateChangeEventAttribute("ALTER_AUTHORIZATION_DATABASE", "ASYMMETRIC KEY")]
[EvaluationModeAttribute("7")]
[PhysicalFacetAttribute]
[SfcElementAttribute("48")]
public class Microsoft.SqlServer.Management.Smo.AsymmetricKey : NamedSmoObject {
    private bool removeProviderKey;
    private CreateInfo createInfo;
    public static string UrnSuffix { get; }
    [SfcObjectAttribute("1")]
public Database Parent { get; public set; }
    internal UserPermissionCollection Permissions { get; }
    private bool Microsoft.SqlServer.Management.Sdk.Sfc.ISfcSupportsDesignMode.IsDesignMode { get; }
    [SfcPropertyAttribute("3072")]
public int ID { get; }
    [SfcPropertyAttribute("3072")]
public AsymmetricKeyEncryptionAlgorithm KeyEncryptionAlgorithm { get; }
    [SfcPropertyAttribute("3072")]
public int KeyLength { get; }
    [SfcPropertyAttribute("3072")]
[SfcReferenceAttribute("Microsoft.SqlServer.Management.Smo.User", "Server[@Name = '{0}']/Database[@Name = '{1}']/User[@Name = '{2}']", "Mono.Cecil.CustomAttributeArgument[]")]
[SfcReferenceAttribute("Microsoft.SqlServer.Management.Smo.DatabaseRole", "Server[@Name = '{0}']/Database[@Name = '{1}']/Role[@Name = '{2}']", "Mono.Cecil.CustomAttributeArgument[]")]
[SfcReferenceAttribute("Microsoft.SqlServer.Management.Smo.ApplicationRole", "Server[@Name = '{0}']/Database[@Name = '{1}']/ApplicationRole[@Name = '{2}']", "Mono.Cecil.CustomAttributeArgument[]")]
[CLSCompliantAttribute("False")]
public string Owner { get; public set; }
    [SfcPropertyAttribute("3072")]
public PrivateKeyEncryptionType PrivateKeyEncryptionType { get; }
    [SfcPropertyAttribute("1024")]
[SfcReferenceAttribute("Microsoft.SqlServer.Management.Smo.CryptographicProvider", "Server[@Name = '{0}']/CryptographicProvider[@Name = '{1}']", "Mono.Cecil.CustomAttributeArgument[]")]
[CLSCompliantAttribute("False")]
public string ProviderName { get; public set; }
    [SfcPropertyAttribute("3072")]
public Byte[] PublicKey { get; }
    [SfcPropertyAttribute("3072")]
public Byte[] Sid { get; }
    [SfcPropertyAttribute("3072")]
public Byte[] Thumbprint { get; }
    internal AsymmetricKey(AbstractCollectionBase parentColl, ObjectKeyBase key, SqlSmoState state);
    public AsymmetricKey(Database database, string name);
    public void Create(AsymmetricKeyEncryptionAlgorithm encryptionAlgorithm);
    public void Create(AsymmetricKeyEncryptionAlgorithm encryptionAlgorithm, string password);
    public void Create(string keySource, AsymmetricKeySourceType sourceType);
    public void Create(string keySource, AsymmetricKeySourceType sourceType, string password);
    public void Create(string providerAlgorithm, string providerKeyName, CreateDispositionType createDispositionType, AsymmetricKeySourceType sourceType);
    private void SetProperties();
    private void SetEncryptionAlgorithm();
    private void ValidateAlgorithm(string providerAlgorithm);
    public sealed virtual void Drop();
    public void Drop(bool removeProviderKey);
    public void AddPrivateKey(string password);
    public void RemovePrivateKey();
    public sealed virtual void Alter();
    public void ChangePrivateKeyPassword(string oldPassword, string newPassword);
    public static string get_UrnSuffix();
    internal virtual String[] GetNonAlterableProperties();
    private void CheckNullArgument(object arg, string argName);
    internal virtual void ScriptAlter(StringCollection query, ScriptingPreferences sp);
    internal virtual void ScriptDrop(StringCollection query, ScriptingPreferences sp);
    internal virtual void ScriptCreate(StringCollection query, ScriptingPreferences sp);
    public Database get_Parent();
    public void set_Parent(Database value);
    internal virtual UserPermissionCollection get_Permissions();
    private sealed virtual override bool Microsoft.SqlServer.Management.Sdk.Sfc.ISfcSupportsDesignMode.get_IsDesignMode();
    internal virtual SqlPropertyMetadataProvider GetPropertyMetadataProvider();
    public int get_ID();
    public AsymmetricKeyEncryptionAlgorithm get_KeyEncryptionAlgorithm();
    public int get_KeyLength();
    public string get_Owner();
    public void set_Owner(string value);
    public PrivateKeyEncryptionType get_PrivateKeyEncryptionType();
    public string get_ProviderName();
    public void set_ProviderName(string value);
    public Byte[] get_PublicKey();
    public Byte[] get_Sid();
    public Byte[] get_Thumbprint();
    public sealed virtual void Deny(ObjectPermissionSet permission, String[] granteeNames);
    public sealed virtual void Deny(ObjectPermissionSet permission, String[] granteeNames, bool cascade);
    public sealed virtual void Grant(ObjectPermissionSet permission, String[] granteeNames);
    public sealed virtual void Grant(ObjectPermissionSet permission, String[] granteeNames, bool grantGrant);
    public sealed virtual void Grant(ObjectPermissionSet permission, String[] granteeNames, bool grantGrant, string asRole);
    public sealed virtual void Revoke(ObjectPermissionSet permission, String[] granteeNames);
    public sealed virtual void Revoke(ObjectPermissionSet permission, String[] granteeNames, bool revokeGrant, bool cascade);
    public void Revoke(ObjectPermissionSet permission, String[] granteeNames, bool revokeGrant, bool cascade, string asRole);
    public sealed virtual void Deny(ObjectPermissionSet permission, string granteeName);
    public sealed virtual void Deny(ObjectPermissionSet permission, string granteeName, bool cascade);
    public sealed virtual void Grant(ObjectPermissionSet permission, string granteeName);
    public sealed virtual void Grant(ObjectPermissionSet permission, string granteeName, bool grantGrant);
    public sealed virtual void Grant(ObjectPermissionSet permission, string granteeName, bool grantGrant, string asRole);
    public sealed virtual void Revoke(ObjectPermissionSet permission, string granteeName);
    public void Revoke(ObjectPermissionSet permission, string granteeName, bool revokeGrant, bool cascade);
    public sealed virtual void Revoke(ObjectPermissionSet permission, string granteeName, bool revokeGrant, bool cascade, string asRole);
    public sealed virtual ObjectPermissionInfo[] EnumObjectPermissions();
    public sealed virtual ObjectPermissionInfo[] EnumObjectPermissions(string granteeName);
    public sealed virtual ObjectPermissionInfo[] EnumObjectPermissions(ObjectPermissionSet permissions);
    public sealed virtual ObjectPermissionInfo[] EnumObjectPermissions(string granteeName, ObjectPermissionSet permissions);
}
[DefaultMemberAttribute("Item")]
public class Microsoft.SqlServer.Management.Smo.AsymmetricKeyCollection : SimpleObjectCollectionBase {
    public Database Parent { get; }
    public AsymmetricKey Item { get; }
    public AsymmetricKey Item { get; }
    internal AsymmetricKeyCollection(SqlSmoObject parentInstance);
    public Database get_Parent();
    public AsymmetricKey get_Item(int index);
    public AsymmetricKey get_Item(string name);
    public void CopyTo(AsymmetricKey[] array, int index);
    public AsymmetricKey ItemById(int id);
    protected virtual Type GetCollectionElementType();
    internal virtual SqlSmoObject GetCollectionElementInstance(ObjectKeyBase key, SqlSmoState state);
    public void Add(AsymmetricKey asymmetricKey);
    internal SqlSmoObject GetObjectByName(string name);
    internal virtual ObjectKeyBase CreateKeyFromUrn(Urn urn);
}
public enum Microsoft.SqlServer.Management.Smo.AsymmetricKeySourceType : Enum {
    public int value__;
    public static AsymmetricKeySourceType File;
    public static AsymmetricKeySourceType Executable;
    public static AsymmetricKeySourceType SqlAssembly;
    public static AsymmetricKeySourceType Provider;
}
public enum Microsoft.SqlServer.Management.Smo.AttachOptions : Enum {
    public int value__;
    public static AttachOptions None;
    public static AttachOptions EnableBroker;
    public static AttachOptions NewBroker;
    public static AttachOptions ErrorBrokerConversations;
    public static AttachOptions RebuildLog;
}
[EvaluationModeAttribute("4")]
[PhysicalFacetAttribute]
[SfcElementAttribute("16")]
public class Microsoft.SqlServer.Management.Smo.Audit : ScriptNameObjectBase {
    public static string UrnSuffix { get; }
    [SfcKeyAttribute("0")]
[SfcPropertyAttribute("1280")]
public string Name { get; public set; }
    [SfcObjectAttribute("1")]
public Server Parent { get; public set; }
    private bool Microsoft.SqlServer.Management.Sdk.Sfc.ISfcSupportsDesignMode.IsDesignMode { get; }
    [SfcPropertyAttribute("1024")]
public DateTime CreateDate { get; }
    [SfcPropertyAttribute("1024")]
public DateTime DateLastModified { get; }
    [SfcPropertyAttribute("1024")]
public AuditDestinationType DestinationType { get; public set; }
    [SfcPropertyAttribute("1024")]
public bool Enabled { get; }
    [SfcPropertyAttribute("1024")]
public string FileName { get; }
    [SfcPropertyAttribute("1024")]
public string FilePath { get; public set; }
    [SfcPropertyAttribute("1024")]
public string Filter { get; public set; }
    [SfcPropertyAttribute("1280")]
public Guid Guid { get; public set; }
    [SfcPropertyAttribute("1024")]
public int ID { get; }
    [SfcPropertyAttribute("1024")]
public bool IsOperator { get; public set; }
    [SfcPropertyAttribute("1024")]
public int MaximumFiles { get; public set; }
    [SfcPropertyAttribute("1024")]
public int MaximumFileSize { get; public set; }
    [SfcPropertyAttribute("1024")]
public AuditFileSizeUnit MaximumFileSizeUnit { get; public set; }
    [SfcPropertyAttribute("1024")]
public long MaximumRolloverFiles { get; public set; }
    [SfcPropertyAttribute("1024")]
public OnFailureAction OnFailure { get; public set; }
    [SfcPropertyAttribute("1024")]
public int QueueDelay { get; public set; }
    [SfcPropertyAttribute("1024")]
public bool ReserveDiskSpace { get; public set; }
    [SfcPropertyAttribute("1024")]
public int RetentionDays { get; public set; }
    internal Audit(AbstractCollectionBase parentColl, ObjectKeyBase key, SqlSmoState state);
    public Audit(Server server, string name);
    public static string get_UrnSuffix();
    public virtual string get_Name();
    public virtual void set_Name(string value);
    public sealed virtual void Create();
    public sealed virtual void Alter();
    public sealed virtual void Drop();
    public sealed virtual void DropIfExists();
    public sealed virtual void Rename(string newname);
    public sealed virtual StringCollection Script();
    public sealed virtual StringCollection Script(ScriptingOptions scriptingOptions);
    public void Enable();
    public void Disable();
    private void EnableDisable(bool enable);
    public string EnumServerAuditSpecification();
    public DataTable EnumDatabaseAuditSpecification();
    internal virtual void ScriptCreate(StringCollection query, ScriptingPreferences sp);
    internal virtual void ScriptAlter(StringCollection query, ScriptingPreferences sp);
    internal virtual void ScriptRename(StringCollection renameQuery, ScriptingPreferences sp, string newName);
    internal virtual void ScriptDrop(StringCollection query, ScriptingPreferences sp);
    private void ValidateManagedInstanceProperty(ScriptingPreferences sp, Property property);
    private void ScriptAudit(StringCollection query, ScriptingPreferences sp, bool create);
    private bool NeedToScriptTO();
    private void ScriptAuditOption(bool create, ScriptingPreferences sp, string propertyName, string optionName, ParameterValueFormat format, Func`2<object, string> valueResolver, ScriptStringBuilder& ssb);
    private string ScriptAuditOptions(bool create, ScriptingPreferences sp);
    private string ScriptFileOptions(bool create, bool mustHaveFilePath, ScriptingPreferences sp);
    private string ScriptUrlOptions(bool create);
    private void AppendCommaOption(StringBuilder sb, string optionName, string optionValue, bool appendLine, Boolean& needComma);
    public Server get_Parent();
    public void set_Parent(Server value);
    private sealed virtual override bool Microsoft.SqlServer.Management.Sdk.Sfc.ISfcSupportsDesignMode.get_IsDesignMode();
    internal virtual SqlPropertyMetadataProvider GetPropertyMetadataProvider();
    public DateTime get_CreateDate();
    public DateTime get_DateLastModified();
    public AuditDestinationType get_DestinationType();
    public void set_DestinationType(AuditDestinationType value);
    public bool get_Enabled();
    public string get_FileName();
    public string get_FilePath();
    public void set_FilePath(string value);
    public string get_Filter();
    public void set_Filter(string value);
    public Guid get_Guid();
    public void set_Guid(Guid value);
    public int get_ID();
    public bool get_IsOperator();
    public void set_IsOperator(bool value);
    public int get_MaximumFiles();
    public void set_MaximumFiles(int value);
    public int get_MaximumFileSize();
    public void set_MaximumFileSize(int value);
    public AuditFileSizeUnit get_MaximumFileSizeUnit();
    public void set_MaximumFileSizeUnit(AuditFileSizeUnit value);
    public long get_MaximumRolloverFiles();
    public void set_MaximumRolloverFiles(long value);
    public OnFailureAction get_OnFailure();
    public void set_OnFailure(OnFailureAction value);
    public int get_QueueDelay();
    public void set_QueueDelay(int value);
    public bool get_ReserveDiskSpace();
    public void set_ReserveDiskSpace(bool value);
    public int get_RetentionDays();
    public void set_RetentionDays(int value);
    internal virtual String[] GetNonAlterableProperties();
}
[DefaultMemberAttribute("Item")]
public class Microsoft.SqlServer.Management.Smo.AuditCollection : SimpleObjectCollectionBase {
    public Server Parent { get; }
    public Audit Item { get; }
    public Audit Item { get; }
    internal AuditCollection(SqlSmoObject parentInstance);
    public Server get_Parent();
    public Audit get_Item(int index);
    public Audit get_Item(string name);
    public void CopyTo(Audit[] array, int index);
    public Audit ItemById(int id);
    protected virtual Type GetCollectionElementType();
    internal virtual SqlSmoObject GetCollectionElementInstance(ObjectKeyBase key, SqlSmoState state);
    public void Add(Audit audit);
    internal SqlSmoObject GetObjectByName(string name);
    internal virtual ObjectKeyBase CreateKeyFromUrn(Urn urn);
}
[CLSCompliantAttribute("False")]
public class Microsoft.SqlServer.Management.Smo.AuditExtender : SmoObjectExtender`1<Audit> {
    [ExtendedPropertyAttribute]
public SqlSmoState State { get; }
    [ExtendedPropertyAttribute]
public ServerConnection ConnectionContext { get; }
    public AuditExtender(Audit audit);
    public SqlSmoState get_State();
    public ServerConnection get_ConnectionContext();
    public sealed virtual ValidationState Validate(string methodName, Object[] arguments);
}
public class Microsoft.SqlServer.Management.Smo.AuditSpecification : ScriptNameObjectBase {
    private bool isInitialized;
    private List`1<AuditSpecificationDetail> enumAuditSpecDetails;
    private List`1<AuditSpecificationDetail> auditSpecificationDetailsList;
    [SfcKeyAttribute("0")]
[SfcPropertyAttribute("1280")]
public string Name { get; public set; }
    private List`1<AuditSpecificationDetail> AuditSpecificationDetailsList { get; private set; }
    internal AuditSpecification(AbstractCollectionBase parentColl, ObjectKeyBase key, SqlSmoState state);
    public virtual string get_Name();
    public virtual void set_Name(string value);
    private List`1<AuditSpecificationDetail> get_AuditSpecificationDetailsList();
    private void set_AuditSpecificationDetailsList(List`1<AuditSpecificationDetail> value);
    public ICollection`1<AuditSpecificationDetail> EnumAuditSpecificationDetails();
    public sealed virtual void Create();
    public sealed virtual void Alter();
    public sealed virtual void Drop();
    public sealed virtual void DropIfExists();
    public virtual void Refresh();
    public sealed virtual StringCollection Script();
    public sealed virtual StringCollection Script(ScriptingOptions scriptingOptions);
    public void AddAuditSpecificationDetail(AuditSpecificationDetail auditSpecificationDetail);
    public void AddAuditSpecificationDetail(ICollection`1<AuditSpecificationDetail> auditSpecificationDetails);
    public void RemoveAuditSpecificationDetail(AuditSpecificationDetail auditSpecificationDetail);
    public void RemoveAuditSpecificationDetail(ICollection`1<AuditSpecificationDetail> auditSpecificationDetails);
    private StringCollection AddRemoveAuditSpecificationDetail(ICollection`1<AuditSpecificationDetail> auditSpecificationDetails, bool add, bool useDb);
    internal virtual void ScriptCreate(StringCollection query, ScriptingPreferences sp);
    private string ScriptAddDropAuditActionTypePart(ICollection`1<AuditSpecificationDetail> auditSpecificationDetails, bool add);
    internal virtual void ScriptDrop(StringCollection query, ScriptingPreferences sp);
    internal virtual void ScriptAlter(StringCollection query, ScriptingPreferences sp);
    public void Enable();
    public void Disable();
    private void EnableDisable(bool enable);
}
public class Microsoft.SqlServer.Management.Smo.AuditSpecificationDetail : ValueType {
    private AuditActionType action;
    private string objectClass;
    private string objectName;
    private string objectSchema;
    private string principal;
    private static Hashtable stringToEnum;
    public AuditActionType Action { get; }
    public string ObjectClass { get; }
    public string ObjectName { get; }
    public string ObjectSchema { get; }
    public string Principal { get; }
    public static Hashtable StringToEnum { get; }
    public AuditSpecificationDetail(AuditActionType action, string objectClass, string objectSchema, string objectName, string principal);
    public AuditSpecificationDetail(AuditActionType action, string objectSchema, string objectName, string principal);
    public AuditSpecificationDetail(AuditActionType action, string objectName, string principal);
    public AuditSpecificationDetail(AuditActionType action);
    private static AuditSpecificationDetail();
    public AuditActionType get_Action();
    public string get_ObjectClass();
    public string get_ObjectName();
    public string get_ObjectSchema();
    public string get_Principal();
    public static Hashtable get_StringToEnum();
}
[EvaluationModeAttribute("4")]
[PhysicalFacetAttribute]
[SfcElementAttribute("16")]
public class Microsoft.SqlServer.Management.Smo.AvailabilityDatabase : NamedSmoObject {
    private static TraceContext tc;
    public static string UrnSuffix { get; }
    [SfcObjectAttribute("1")]
public AvailabilityGroup Parent { get; public set; }
    [SfcPropertyAttribute("1024")]
public bool IsFailoverReady { get; }
    [SfcPropertyAttribute("1024")]
public bool IsJoined { get; }
    [SfcPropertyAttribute("1024")]
public bool IsPendingSecondarySuspend { get; }
    [SfcPropertyAttribute("1024")]
public bool IsSuspended { get; }
    [SfcPropertyAttribute("1024")]
public decimal RecoveryLSN { get; }
    [SfcPropertyAttribute("1024")]
public AvailabilityDatabaseSynchronizationState SynchronizationState { get; }
    [SfcPropertyAttribute("1024")]
public decimal TruncationLSN { get; }
    [SfcPropertyAttribute("1024")]
public Guid UniqueId { get; }
    internal AvailabilityDatabase(AbstractCollectionBase parentColl, ObjectKeyBase key, SqlSmoState state);
    public AvailabilityDatabase(AvailabilityGroup availabilityGroup, string name);
    private static AvailabilityDatabase();
    public static string get_UrnSuffix();
    public sealed virtual void Create();
    public sealed virtual void Drop();
    public sealed virtual void DropIfExists();
    public sealed virtual StringCollection Script();
    public sealed virtual StringCollection Script(ScriptingOptions scriptingOptions);
    public void JoinAvailablityGroup();
    public void LeaveAvailabilityGroup();
    public void SuspendDataMovement();
    public void ResumeDataMovement();
    internal virtual void ScriptCreate(StringCollection query, ScriptingPreferences sp);
    internal virtual void ScriptDrop(StringCollection dropQuery, ScriptingPreferences sp);
    public AvailabilityGroup get_Parent();
    public void set_Parent(AvailabilityGroup value);
    internal virtual SqlPropertyMetadataProvider GetPropertyMetadataProvider();
    public bool get_IsFailoverReady();
    public bool get_IsJoined();
    public bool get_IsPendingSecondarySuspend();
    public bool get_IsSuspended();
    public decimal get_RecoveryLSN();
    public AvailabilityDatabaseSynchronizationState get_SynchronizationState();
    public decimal get_TruncationLSN();
    public Guid get_UniqueId();
}
[DefaultMemberAttribute("Item")]
public class Microsoft.SqlServer.Management.Smo.AvailabilityDatabaseCollection : SimpleObjectCollectionBase {
    public AvailabilityGroup Parent { get; }
    public AvailabilityDatabase Item { get; }
    public AvailabilityDatabase Item { get; }
    internal AvailabilityDatabaseCollection(SqlSmoObject parentInstance);
    public AvailabilityGroup get_Parent();
    public AvailabilityDatabase get_Item(int index);
    public AvailabilityDatabase get_Item(string name);
    public void CopyTo(AvailabilityDatabase[] array, int index);
    public AvailabilityDatabase ItemById(int id);
    protected virtual Type GetCollectionElementType();
    internal virtual SqlSmoObject GetCollectionElementInstance(ObjectKeyBase key, SqlSmoState state);
    public void Remove(AvailabilityDatabase AvailabilityDatabase);
    public void Remove(string name);
    public void Add(AvailabilityDatabase AvailabilityDatabase);
    internal SqlSmoObject GetObjectByName(string name);
    internal virtual ObjectKeyBase CreateKeyFromUrn(Urn urn);
}
[EvaluationModeAttribute("4")]
[PhysicalFacetAttribute]
[SfcElementAttribute("16")]
public class Microsoft.SqlServer.Management.Smo.AvailabilityGroup : NamedSmoObject {
    [CompilerGeneratedAttribute]
private bool <ReuseSystemDatabases>k__BackingField;
    private AvailabilityReplicaCollection m_AvailabilityReplicas;
    private AvailabilityDatabaseCollection m_AvailabilityDatabases;
    private DatabaseReplicaStateCollection m_DatabaseReplicaStates;
    private AvailabilityGroupListenerCollection m_AvailabilityGroupListeners;
    internal static string ForceFailoverAllowDataLossScript;
    internal static string FailoverScript;
    internal static string AvailabilityGroupScript;
    internal static string DatabaseScript;
    internal static string ReplicaOn;
    internal static string AutomatedBackupPreferenceScript;
    internal static string BasicAvailabilityGroupScript;
    internal static string DatabaseHealthTriggerScript;
    internal static string DtcSupportEnabledScript;
    internal static string DtcSupportEnabledOnScript;
    internal static string DtcSupportEnabledOffScript;
    internal static string FailureConditionLevelScript;
    internal static string HealthCheckTimeoutScript;
    internal static string ListenerScript;
    internal static string PortScript;
    internal static string ClusterTypeScript;
    internal static string RequiredSynchronizedSecondariesToCommitScript;
    internal static string RoleScript;
    internal static string DistributedScript;
    internal static string AvailabilityGroupOn;
    internal static string ContainedScript;
    internal static string ReuseSystemDatabasesScript;
    internal static string AutomatedBackupPreferencePropertyName;
    internal static string BasicAvailabilityGroupPropertyName;
    internal static string DatabaseHealthTriggerPropertyName;
    internal static string DtcSupportEnabledPropertyName;
    internal static string FailureConditionLevelPropertyName;
    internal static string HealthCheckTimeoutPropertyName;
    internal static string ClusterTypePropertyName;
    internal static string RequiredSynchronizedSecondariesToCommitPropertyName;
    internal static string DistributedPropertyName;
    internal static string IsContainedPropertyName;
    internal static string PrimaryScript;
    internal static string SecondaryOnlyScript;
    internal static string SecondaryScript;
    internal static string NoneScript;
    internal static string WsfcScript;
    internal static string ExternalScript;
    internal static String[] CreatableGroupPropertyNames;
    internal static String[] BasicAlterableGroupPropertyNames;
    internal static String[] AlterableGroupPropertyNames;
    private static TraceContext tc;
    private bool ReuseSystemDatabases { get; public set; }
    public static string UrnSuffix { get; }
    public AvailabilityGroupClusterType ClusterTypeWithDefault { get; }
    [SfcObjectAttribute("0", "1", "Microsoft.SqlServer.Management.Smo.AvailabilityReplica")]
public AvailabilityReplicaCollection AvailabilityReplicas { get; }
    [SfcObjectAttribute("0", "0", "Microsoft.SqlServer.Management.Smo.AvailabilityDatabase")]
public AvailabilityDatabaseCollection AvailabilityDatabases { get; }
    [SfcObjectAttribute("0", "0", "Microsoft.SqlServer.Management.Smo.DatabaseReplicaState")]
public DatabaseReplicaStateCollection DatabaseReplicaStates { get; }
    [SfcObjectAttribute("0", "0", "Microsoft.SqlServer.Management.Smo.AvailabilityGroupListener")]
public AvailabilityGroupListenerCollection AvailabilityGroupListeners { get; }
    [SfcObjectAttribute("1")]
public Server Parent { get; public set; }
    internal UserPermissionCollection Permissions { get; }
    [SfcPropertyAttribute("1024")]
public AvailabilityGroupAutomatedBackupPreference AutomatedBackupPreference { get; public set; }
    [SfcPropertyAttribute("1024", "false")]
public bool BasicAvailabilityGroup { get; public set; }
    [SfcPropertyAttribute("1024")]
public AvailabilityGroupClusterType ClusterType { get; public set; }
    [SfcPropertyAttribute("1024", "false")]
public bool DatabaseHealthTrigger { get; public set; }
    [SfcPropertyAttribute("1024", "false")]
public bool DtcSupportEnabled { get; public set; }
    [SfcPropertyAttribute("1024")]
public AvailabilityGroupFailureConditionLevel FailureConditionLevel { get; public set; }
    [SfcPropertyAttribute("1024")]
public int HealthCheckTimeout { get; public set; }
    [SfcPropertyAttribute("1024")]
public int ID { get; }
    [SfcPropertyAttribute("1280", "false")]
public bool IsContained { get; public set; }
    [SfcPropertyAttribute("1024", "false")]
public bool IsDistributedAvailabilityGroup { get; public set; }
    [SfcPropertyAttribute("1056", "false")]
public bool IsManagedInstanceLink { get; }
    [SfcPropertyAttribute("1024")]
public AvailabilityReplicaRole LocalReplicaRole { get; }
    [SfcPropertyAttribute("1024")]
public string PrimaryReplicaServerName { get; }
    [SfcPropertyAttribute("1024")]
public int RequiredSynchronizedSecondariesToCommit { get; public set; }
    [SfcPropertyAttribute("1024")]
public Guid UniqueId { get; }
    internal AvailabilityGroup(AbstractCollectionBase parentColl, ObjectKeyBase key, SqlSmoState state);
    public AvailabilityGroup(Server server, string name);
    private static AvailabilityGroup();
    [CompilerGeneratedAttribute]
private bool get_ReuseSystemDatabases();
    [CompilerGeneratedAttribute]
public void set_ReuseSystemDatabases(bool value);
    public static string get_UrnSuffix();
    public AvailabilityGroupClusterType get_ClusterTypeWithDefault();
    public AvailabilityReplicaCollection get_AvailabilityReplicas();
    public AvailabilityDatabaseCollection get_AvailabilityDatabases();
    public DatabaseReplicaStateCollection get_DatabaseReplicaStates();
    public AvailabilityGroupListenerCollection get_AvailabilityGroupListeners();
    public void Failover();
    public void FailoverWithPotentialDataLoss();
    public void DemoteAsSecondary();
    public sealed virtual void Create();
    public sealed virtual void Alter();
    public sealed virtual void Drop();
    public sealed virtual void DropIfExists();
    public sealed virtual StringCollection Script();
    public sealed virtual StringCollection Script(ScriptingOptions scriptingOptions);
    public DataTable EnumReplicaClusterNodes();
    internal virtual void ScriptCreate(StringCollection query, ScriptingPreferences sp);
    internal virtual void ScriptAlter(StringCollection alterQuery, ScriptingPreferences sp);
    internal virtual void ScriptDrop(StringCollection dropQuery, ScriptingPreferences sp);
    internal virtual PropagateInfo[] GetPropagateInfo(PropagateAction action);
    protected virtual void PostCreate();
    internal static string GetAvailabilityGroupClusterType(AvailabilityGroupClusterType availabilityGroupClusterType);
    private bool IsDirty(string property);
    private AvailabilityGroupAutomatedBackupPreference GetEffectiveAutomatedBackupPreference(SqlServerVersionInternal targetVersion);
    private string GetAutomatedBackupPreferenceScript(AvailabilityGroupAutomatedBackupPreference preference);
    private string ScriptGroupOption(bool scriptAll, string propertyName, SqlServerVersionInternal targetServerVersion);
    private string ScriptCreateGroupOptions(SqlServerVersionInternal targetVersion, Func`2<string, bool> isValidGroupOptionProperty);
    private string ScriptAlterOneOption(string propertyName, ScriptingPreferences sp);
    public Server get_Parent();
    public void set_Parent(Server value);
    internal virtual UserPermissionCollection get_Permissions();
    internal virtual SqlPropertyMetadataProvider GetPropertyMetadataProvider();
    public AvailabilityGroupAutomatedBackupPreference get_AutomatedBackupPreference();
    public void set_AutomatedBackupPreference(AvailabilityGroupAutomatedBackupPreference value);
    public bool get_BasicAvailabilityGroup();
    public void set_BasicAvailabilityGroup(bool value);
    public AvailabilityGroupClusterType get_ClusterType();
    public void set_ClusterType(AvailabilityGroupClusterType value);
    public bool get_DatabaseHealthTrigger();
    public void set_DatabaseHealthTrigger(bool value);
    public bool get_DtcSupportEnabled();
    public void set_DtcSupportEnabled(bool value);
    public AvailabilityGroupFailureConditionLevel get_FailureConditionLevel();
    public void set_FailureConditionLevel(AvailabilityGroupFailureConditionLevel value);
    public int get_HealthCheckTimeout();
    public void set_HealthCheckTimeout(int value);
    public int get_ID();
    public bool get_IsContained();
    public void set_IsContained(bool value);
    public bool get_IsDistributedAvailabilityGroup();
    public void set_IsDistributedAvailabilityGroup(bool value);
    public bool get_IsManagedInstanceLink();
    public AvailabilityReplicaRole get_LocalReplicaRole();
    public string get_PrimaryReplicaServerName();
    public int get_RequiredSynchronizedSecondariesToCommit();
    public void set_RequiredSynchronizedSecondariesToCommit(int value);
    public Guid get_UniqueId();
    internal virtual String[] GetNonAlterableProperties();
    internal virtual object GetPropertyDefaultValue(string propname);
    public sealed virtual void Deny(ObjectPermissionSet permission, String[] granteeNames);
    public sealed virtual void Deny(ObjectPermissionSet permission, String[] granteeNames, bool cascade);
    public sealed virtual void Grant(ObjectPermissionSet permission, String[] granteeNames);
    public sealed virtual void Grant(ObjectPermissionSet permission, String[] granteeNames, bool grantGrant);
    public sealed virtual void Grant(ObjectPermissionSet permission, String[] granteeNames, bool grantGrant, string asRole);
    public sealed virtual void Revoke(ObjectPermissionSet permission, String[] granteeNames);
    public sealed virtual void Revoke(ObjectPermissionSet permission, String[] granteeNames, bool revokeGrant, bool cascade);
    public void Revoke(ObjectPermissionSet permission, String[] granteeNames, bool revokeGrant, bool cascade, string asRole);
    public sealed virtual void Deny(ObjectPermissionSet permission, string granteeName);
    public sealed virtual void Deny(ObjectPermissionSet permission, string granteeName, bool cascade);
    public sealed virtual void Grant(ObjectPermissionSet permission, string granteeName);
    public sealed virtual void Grant(ObjectPermissionSet permission, string granteeName, bool grantGrant);
    public sealed virtual void Grant(ObjectPermissionSet permission, string granteeName, bool grantGrant, string asRole);
    public sealed virtual void Revoke(ObjectPermissionSet permission, string granteeName);
    public void Revoke(ObjectPermissionSet permission, string granteeName, bool revokeGrant, bool cascade);
    public sealed virtual void Revoke(ObjectPermissionSet permission, string granteeName, bool revokeGrant, bool cascade, string asRole);
    public sealed virtual ObjectPermissionInfo[] EnumObjectPermissions();
    public sealed virtual ObjectPermissionInfo[] EnumObjectPermissions(string granteeName);
    public sealed virtual ObjectPermissionInfo[] EnumObjectPermissions(ObjectPermissionSet permissions);
    public sealed virtual ObjectPermissionInfo[] EnumObjectPermissions(string granteeName, ObjectPermissionSet permissions);
    [CompilerGeneratedAttribute]
private bool <ScriptCreate>b__31_0(string propName);
    [CompilerGeneratedAttribute]
private bool <ScriptAlter>b__32_0(string propertyName);
}
[DefaultMemberAttribute("Item")]
public class Microsoft.SqlServer.Management.Smo.AvailabilityGroupCollection : SimpleObjectCollectionBase {
    public Server Parent { get; }
    public AvailabilityGroup Item { get; }
    public AvailabilityGroup Item { get; }
    internal AvailabilityGroupCollection(SqlSmoObject parentInstance);
    public Server get_Parent();
    public AvailabilityGroup get_Item(int index);
    public AvailabilityGroup get_Item(string name);
    public void CopyTo(AvailabilityGroup[] array, int index);
    public AvailabilityGroup ItemById(int id);
    protected virtual Type GetCollectionElementType();
    internal virtual SqlSmoObject GetCollectionElementInstance(ObjectKeyBase key, SqlSmoState state);
    public void Remove(AvailabilityGroup availabilityGroup);
    public void Remove(string name);
    public void Add(AvailabilityGroup availabilityGroup);
    internal SqlSmoObject GetObjectByName(string name);
    internal virtual ObjectKeyBase CreateKeyFromUrn(Urn urn);
}
[SfcElementAttribute("16")]
public class Microsoft.SqlServer.Management.Smo.AvailabilityGroupListener : NamedSmoObject {
    internal static string ModifyListenerScript;
    internal static string RestartListenerScript;
    internal static string WithDHCPScript;
    internal static string WithIPScript;
    private static TraceContext tc;
    private AvailabilityGroupListenerIPAddressCollection availabilityGroupListenerIPAddresses;
    [SfcObjectAttribute("0", "1", "Microsoft.SqlServer.Management.Smo.AvailabilityGroupListenerIPAddress")]
public AvailabilityGroupListenerIPAddressCollection AvailabilityGroupListenerIPAddresses { get; }
    public static string UrnSuffix { get; }
    [SfcObjectAttribute("1")]
public AvailabilityGroup Parent { get; public set; }
    [SfcPropertyAttribute("1024")]
public string ClusterIPConfiguration { get; }
    [SfcPropertyAttribute("1024", "true")]
public bool IsConformant { get; }
    [SfcPropertyAttribute("1024")]
public int PortNumber { get; public set; }
    [SfcPropertyAttribute("1024")]
public string UniqueId { get; }
    internal AvailabilityGroupListener(AbstractCollectionBase parentColl, ObjectKeyBase key, SqlSmoState state);
    public AvailabilityGroupListener(AvailabilityGroup availabilityGroup, string name);
    private static AvailabilityGroupListener();
    public AvailabilityGroupListenerIPAddressCollection get_AvailabilityGroupListenerIPAddresses();
    public static string get_UrnSuffix();
    public void RestartListener();
    public sealed virtual void Create();
    public sealed virtual void Drop();
    public sealed virtual void DropIfExists();
    public sealed virtual void Alter();
    public sealed virtual StringCollection Script();
    public sealed virtual StringCollection Script(ScriptingOptions scriptingOptions);
    internal virtual void ScriptCreate(StringCollection query, ScriptingPreferences sp);
    internal void ValidateIPAddresses();
    internal string ScriptListenerOptions();
    internal virtual void ScriptAlter(StringCollection query, ScriptingPreferences sp);
    internal virtual void ScriptDrop(StringCollection dropQuery, ScriptingPreferences sp);
    internal void FetchIpAddressKeysPostCreate();
    internal virtual PropagateInfo[] GetPropagateInfo(PropagateAction action);
    protected virtual void PostCreate();
    public AvailabilityGroup get_Parent();
    public void set_Parent(AvailabilityGroup value);
    internal virtual SqlPropertyMetadataProvider GetPropertyMetadataProvider();
    public string get_ClusterIPConfiguration();
    public bool get_IsConformant();
    public int get_PortNumber();
    public void set_PortNumber(int value);
    public string get_UniqueId();
    internal virtual object GetPropertyDefaultValue(string propname);
}
[DefaultMemberAttribute("Item")]
public class Microsoft.SqlServer.Management.Smo.AvailabilityGroupListenerCollection : SimpleObjectCollectionBase {
    public AvailabilityGroup Parent { get; }
    public AvailabilityGroupListener Item { get; }
    public AvailabilityGroupListener Item { get; }
    internal AvailabilityGroupListenerCollection(SqlSmoObject parentInstance);
    public AvailabilityGroup get_Parent();
    public AvailabilityGroupListener get_Item(int index);
    public AvailabilityGroupListener get_Item(string name);
    public void CopyTo(AvailabilityGroupListener[] array, int index);
    public AvailabilityGroupListener ItemById(int id);
    protected virtual Type GetCollectionElementType();
    internal virtual SqlSmoObject GetCollectionElementInstance(ObjectKeyBase key, SqlSmoState state);
    public void Add(AvailabilityGroupListener AvailabilityGroupListener);
    internal SqlSmoObject GetObjectByName(string name);
    internal virtual ObjectKeyBase CreateKeyFromUrn(Urn urn);
}
[SfcElementAttribute("16")]
public class Microsoft.SqlServer.Management.Smo.AvailabilityGroupListenerIPAddress : SqlSmoObject {
    internal static string IpAddressPropertyName;
    internal static string SubnetMaskPropertyName;
    internal static string SubnetIpPropertyName;
    internal static string IsDHCPPropertyName;
    private static TraceContext tc;
    private static string IPScript;
    public bool IsIPv6 { get; }
    [SfcKeyAttribute("0")]
[SfcPropertyAttribute("1024")]
public string IPAddress { get; public set; }
    [SfcKeyAttribute("1")]
[SfcPropertyAttribute("1024")]
public string SubnetMask { get; public set; }
    [SfcKeyAttribute("2")]
[SfcPropertyAttribute("1024")]
public string SubnetIP { get; public set; }
    public static string UrnSuffix { get; }
    [SfcObjectAttribute("1")]
public AvailabilityGroupListener Parent { get; public set; }
    [SfcPropertyAttribute("1024")]
public AvailabilityGroupListenerIPState IPAddressState { get; }
    [SfcPropertyAttribute("1024")]
public string IPAddressStateDescription { get; }
    [SfcPropertyAttribute("1024", "false")]
public bool IsDHCP { get; public set; }
    [SfcPropertyAttribute("1024", "string.empty")]
public string SubnetIPv4Mask { get; }
    [SfcPropertyAttribute("1024")]
public int SubnetPrefixLength { get; }
    public AvailabilityGroupListenerIPAddress(AvailabilityGroupListener availabilityGroupListener);
    internal AvailabilityGroupListenerIPAddress(AbstractCollectionBase parentColl, ObjectKeyBase key, SqlSmoState state);
    private static AvailabilityGroupListenerIPAddress();
    public bool get_IsIPv6();
    public string get_IPAddress();
    public void set_IPAddress(string value);
    public string get_SubnetMask();
    public void set_SubnetMask(string value);
    public string get_SubnetIP();
    public void set_SubnetIP(string value);
    public static string get_UrnSuffix();
    public sealed virtual void Create();
    public sealed virtual StringCollection Script();
    public sealed virtual StringCollection Script(ScriptingOptions scriptingOptions);
    internal virtual void ScriptCreate(StringCollection query, ScriptingPreferences sp);
    internal virtual ObjectKeyBase GetEmptyKey();
    internal virtual void UpdateObjectState();
    internal void FetchKeyPostCreate();
    public AvailabilityGroupListener get_Parent();
    public void set_Parent(AvailabilityGroupListener value);
    internal virtual SqlPropertyMetadataProvider GetPropertyMetadataProvider();
    public AvailabilityGroupListenerIPState get_IPAddressState();
    public string get_IPAddressStateDescription();
    public bool get_IsDHCP();
    public void set_IsDHCP(bool value);
    public string get_SubnetIPv4Mask();
    public int get_SubnetPrefixLength();
    internal virtual object GetPropertyDefaultValue(string propname);
}
[DefaultMemberAttribute("Item")]
public class Microsoft.SqlServer.Management.Smo.AvailabilityGroupListenerIPAddressCollection : AvailabilityGroupListenerIPAddressCollectionBase {
    public AvailabilityGroupListener Parent { get; }
    public AvailabilityGroupListenerIPAddress Item { get; }
    public AvailabilityGroupListenerIPAddress Item { get; }
    internal AvailabilityGroupListenerIPAddressCollection(SqlSmoObject parentInstance);
    public AvailabilityGroupListener get_Parent();
    public AvailabilityGroupListenerIPAddress get_Item(int index);
    public AvailabilityGroupListenerIPAddress get_Item(string ipAddress, string subnetMask, string subnetIP);
    public void CopyTo(AvailabilityGroupListenerIPAddress[] array, int index);
    public AvailabilityGroupListenerIPAddress ItemById(int id);
    protected virtual Type GetCollectionElementType();
    internal virtual SqlSmoObject GetCollectionElementInstance(ObjectKeyBase key, SqlSmoState state);
    public void Add(AvailabilityGroupListenerIPAddress AvailabilityGroupListenerIPAddress);
}
public class Microsoft.SqlServer.Management.Smo.AvailabilityGroupListenerIPAddressCollectionBase : SortedListCollectionBase {
    internal AvailabilityGroupListenerIPAddressCollectionBase(SqlSmoObject parent);
    protected virtual void InitInnerCollection();
    protected virtual Type GetCollectionElementType();
    internal virtual ObjectKeyBase CreateKeyFromUrn(Urn urn);
}
internal class Microsoft.SqlServer.Management.Smo.AvailabilityGroupListenerIPAddressObjectComparer : ObjectComparerBase {
    public AvailabilityGroupListenerIPAddressObjectComparer(IComparer stringComparer);
    public virtual int Compare(object obj1, object obj2);
}
internal class Microsoft.SqlServer.Management.Smo.AvailabilityGroupListenerIPAddressObjectKey : ObjectKeyBase {
    internal static StringCollection fields;
    [CompilerGeneratedAttribute]
private string <IPAddress>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SubnetMask>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SubnetIP>k__BackingField;
    public string IPAddress { get; public set; }
    public string SubnetMask { get; public set; }
    public string SubnetIP { get; public set; }
    public string UrnFilter { get; }
    public bool IsNull { get; }
    public AvailabilityGroupListenerIPAddressObjectKey(string ipAddress, string subnetMask, string subnetIP);
    private static AvailabilityGroupListenerIPAddressObjectKey();
    [CompilerGeneratedAttribute]
public string get_IPAddress();
    [CompilerGeneratedAttribute]
public void set_IPAddress(string value);
    [CompilerGeneratedAttribute]
public string get_SubnetMask();
    [CompilerGeneratedAttribute]
public void set_SubnetMask(string value);
    [CompilerGeneratedAttribute]
public string get_SubnetIP();
    [CompilerGeneratedAttribute]
public void set_SubnetIP(string value);
    public virtual string get_UrnFilter();
    public virtual StringCollection GetFieldNames();
    internal virtual void Validate(Type objectType);
    public virtual bool get_IsNull();
    public virtual string GetExceptionName();
    public virtual ObjectKeyBase Clone();
    public virtual ObjectComparerBase GetComparer(IComparer stringComparer);
    public virtual string ToString();
}
public class Microsoft.SqlServer.Management.Smo.AvailabilityGroupState : object {
    private AvailabilityGroup ag;
    private bool isInitialized;
    private bool isOnline;
    private Nullable`1<bool> isAutoFailover;
    private int numberOfSynchronizedSecondaryReplicas;
    private int numberOfNotSynchronizingReplicas;
    private int numberOfNotSynchronizedReplicas;
    private int numberOfReplicasWithUnhealthyRole;
    private int numberOfDisconnectedReplicas;
    public bool IsOnline { get; }
    public bool IsAutoFailover { get; }
    public int NumberOfSynchronizedSecondaryReplicas { get; }
    public int NumberOfNotSynchronizingReplicas { get; }
    public int NumberOfNotSynchronizedReplicas { get; }
    public int NumberOfReplicasWithUnhealthyRole { get; }
    public int NumberOfDisconnectedReplicas { get; }
    public AvailabilityGroupState(AvailabilityGroup ag);
    public sealed virtual bool get_IsOnline();
    public sealed virtual bool get_IsAutoFailover();
    public sealed virtual int get_NumberOfSynchronizedSecondaryReplicas();
    public sealed virtual int get_NumberOfNotSynchronizingReplicas();
    public sealed virtual int get_NumberOfNotSynchronizedReplicas();
    public sealed virtual int get_NumberOfReplicasWithUnhealthyRole();
    public sealed virtual int get_NumberOfDisconnectedReplicas();
    public sealed virtual void Refresh();
    private void Initialize();
    private void CheckInitialized();
}
[EvaluationModeAttribute("4")]
[PhysicalFacetAttribute]
[SfcElementAttribute("16")]
public class Microsoft.SqlServer.Management.Smo.AvailabilityReplica : NamedSmoObject {
    private static char ReadOnlyRoutingListReplicaNameSeparator;
    private static char ReadOnlyRoutingLoadBalancingGroupStartCharacter;
    private static char ReadOnlyRoutingLoadBalancingGroupEndCharacter;
    internal static string TargetNameScript;
    internal static string ModifyReplicaScript;
    internal static string EndpointUrlScript;
    internal static string PrimaryRoleScript;
    internal static string SecondaryRoleScript;
    internal static string BackupPriorityScript;
    internal static string SeedingModeScript;
    internal static string ListenerUrlScript;
    internal static string ReadonlyRoutingConnectionUrlScript;
    internal static string ReadonlyRoutingListScript;
    internal static string NoneScript;
    internal static string AllowConnectionsScript;
    internal static string AvailabilityModeScript;
    internal static string FailoverModeScript;
    internal static string SessionTimeoutScript;
    internal static string EndPointUrlPropertyName;
    internal static string AvailabilityModePropertyName;
    internal static string FailoverModePropertyName;
    internal static string ConnectionModeInPrimaryRolePropertyName;
    internal static string ConnectionModeInSecondaryRolePropertyName;
    internal static string SessionTimeoutPropertyName;
    internal static string BackupPriorityPropertyName;
    internal static string SeedingModePropertyName;
    internal static string ReadonlyRoutingConnectionUrlPropertyName;
    internal static string ReadonlyRoutingListPropertyName;
    internal static String[] RequiredPropertyNames;
    internal static String[] ConfigurationOnlyModeProperties;
    private static Dictionary`2<string, PropertyType> AlterableReplicaProperties;
    private static String[] OrderedAlterableReplicaProperties;
    private StringCollection readonlyRoutingList;
    private IList`1<IList`1<string>> loadBalancedReadonlyRoutingList;
    private static TraceContext tc;
    public static string UrnSuffix { get; }
    [SfcPropertyAttribute("1024")]
public StringCollection ReadonlyRoutingList { get; }
    [SfcPropertyAttribute("1024")]
public IList`1<IList`1<string>> LoadBalancedReadOnlyRoutingList { get; }
    public string LoadBalancedReadOnlyRoutingListDisplayString { get; }
    public bool IsSeedingModeSupported { get; }
    [SfcPropertyAttribute("1024")]
private string ReadonlyRoutingListDelimited { get; }
    [SfcObjectAttribute("1")]
public AvailabilityGroup Parent { get; public set; }
    [SfcPropertyAttribute("1024")]
public AvailabilityReplicaAvailabilityMode AvailabilityMode { get; public set; }
    [SfcPropertyAttribute("1024")]
public int BackupPriority { get; public set; }
    [SfcPropertyAttribute("1024")]
public AvailabilityReplicaConnectionModeInPrimaryRole ConnectionModeInPrimaryRole { get; public set; }
    [SfcPropertyAttribute("1024")]
public AvailabilityReplicaConnectionModeInSecondaryRole ConnectionModeInSecondaryRole { get; public set; }
    [SfcPropertyAttribute("1024")]
public AvailabilityReplicaConnectionState ConnectionState { get; }
    [SfcPropertyAttribute("1024")]
public DateTime CreateDate { get; }
    [SfcPropertyAttribute("1024")]
public DateTime DateLastModified { get; }
    [SfcPropertyAttribute("1024")]
public string EndpointUrl { get; public set; }
    [SfcPropertyAttribute("1024")]
public AvailabilityReplicaFailoverMode FailoverMode { get; public set; }
    [SfcPropertyAttribute("1024")]
public AvailabilityReplicaJoinState JoinState { get; }
    [SfcPropertyAttribute("1024")]
public string LastConnectErrorDescription { get; }
    [SfcPropertyAttribute("1024")]
public int LastConnectErrorNumber { get; }
    [SfcPropertyAttribute("1024")]
public DateTime LastConnectErrorTimestamp { get; }
    [SfcPropertyAttribute("1056")]
public ClusterMemberState MemberState { get; }
    [SfcPropertyAttribute("1024")]
public AvailabilityReplicaOperationalState OperationalState { get; }
    [SfcPropertyAttribute("1024")]
public string Owner { get; }
    [SfcPropertyAttribute("1056")]
public int QuorumVoteCount { get; }
    [SfcPropertyAttribute("1024")]
public string ReadonlyRoutingConnectionUrl { get; public set; }
    [SfcPropertyAttribute("1024")]
public AvailabilityReplicaRole Role { get; }
    [SfcPropertyAttribute("1024")]
public AvailabilityReplicaRollupRecoveryState RollupRecoveryState { get; }
    [SfcPropertyAttribute("1024")]
public AvailabilityReplicaRollupSynchronizationState RollupSynchronizationState { get; }
    [SfcPropertyAttribute("1024")]
public AvailabilityReplicaSeedingMode SeedingMode { get; public set; }
    [SfcPropertyAttribute("1024")]
public int SessionTimeout { get; public set; }
    [SfcPropertyAttribute("1024")]
public Guid UniqueId { get; }
    internal AvailabilityReplica(AbstractCollectionBase parentColl, ObjectKeyBase key, SqlSmoState state);
    private static AvailabilityReplica();
    public AvailabilityReplica(AvailabilityGroup availabilityGroup, string name);
    public static string get_UrnSuffix();
    public StringCollection get_ReadonlyRoutingList();
    public IList`1<IList`1<string>> get_LoadBalancedReadOnlyRoutingList();
    public string get_LoadBalancedReadOnlyRoutingListDisplayString();
    public void SetLoadBalancedReadOnlyRoutingList(IList`1<IList`1<string>> routingList);
    public virtual void Refresh();
    public bool get_IsSeedingModeSupported();
    public sealed virtual void Create();
    public sealed virtual void Drop();
    public sealed virtual void DropIfExists();
    public sealed virtual void Alter();
    public sealed virtual StringCollection Script();
    public sealed virtual StringCollection Script(ScriptingOptions scriptingOptions);
    internal virtual void ScriptCreate(StringCollection query, ScriptingPreferences sp);
    internal virtual void ScriptAlter(StringCollection query, ScriptingPreferences sp);
    internal string ScriptAlterOneOption(string propertyName, ScriptingPreferences sp);
    internal virtual void ScriptDrop(StringCollection dropQuery, ScriptingPreferences sp);
    internal string ScriptReplicaOption(bool scriptAll, string propertyName, ScriptingPreferences scriptingPreferences);
    internal string ScriptReplicaOptions(ScriptingPreferences scriptingPreferences);
    internal string ScriptDistributedAvailabilityGroupReplicaOptions();
    private string ScriptReadonlyRoutingList();
    private void AppendReplicaRoleScripts(StringCollection replicaRolePropertyScriptCollection, string roleDDLScript, StringBuilder script);
    private string get_ReadonlyRoutingListDelimited();
    private bool IsDirty(string property);
    private void CheckRequiredPropertiesSetBeforeCreation();
    private bool IsAlterableProperty(string propertyName);
    private bool IsPrimaryRoleProperty(string propertyName);
    private bool IsSecondaryRoleProperty(string propertyName);
    private static void AddAlterableReplicaProperty(string propertyName, PropertyType propertyType);
    private static IList`1<IList`1<string>> ConvertToReadOnlyRoutingList(string readOnlyRoutingListDisplayString);
    public static string ConvertReadOnlyRoutingListToString(IList`1<IList`1<string>> readOnlyRoutingList, bool tsqlCompatible);
    public AvailabilityGroup get_Parent();
    public void set_Parent(AvailabilityGroup value);
    internal virtual SqlPropertyMetadataProvider GetPropertyMetadataProvider();
    public AvailabilityReplicaAvailabilityMode get_AvailabilityMode();
    public void set_AvailabilityMode(AvailabilityReplicaAvailabilityMode value);
    public int get_BackupPriority();
    public void set_BackupPriority(int value);
    public AvailabilityReplicaConnectionModeInPrimaryRole get_ConnectionModeInPrimaryRole();
    public void set_ConnectionModeInPrimaryRole(AvailabilityReplicaConnectionModeInPrimaryRole value);
    public AvailabilityReplicaConnectionModeInSecondaryRole get_ConnectionModeInSecondaryRole();
    public void set_ConnectionModeInSecondaryRole(AvailabilityReplicaConnectionModeInSecondaryRole value);
    public AvailabilityReplicaConnectionState get_ConnectionState();
    public DateTime get_CreateDate();
    public DateTime get_DateLastModified();
    public string get_EndpointUrl();
    public void set_EndpointUrl(string value);
    public AvailabilityReplicaFailoverMode get_FailoverMode();
    public void set_FailoverMode(AvailabilityReplicaFailoverMode value);
    public AvailabilityReplicaJoinState get_JoinState();
    public string get_LastConnectErrorDescription();
    public int get_LastConnectErrorNumber();
    public DateTime get_LastConnectErrorTimestamp();
    public ClusterMemberState get_MemberState();
    public AvailabilityReplicaOperationalState get_OperationalState();
    public string get_Owner();
    public int get_QuorumVoteCount();
    public string get_ReadonlyRoutingConnectionUrl();
    public void set_ReadonlyRoutingConnectionUrl(string value);
    public AvailabilityReplicaRole get_Role();
    public AvailabilityReplicaRollupRecoveryState get_RollupRecoveryState();
    public AvailabilityReplicaRollupSynchronizationState get_RollupSynchronizationState();
    public AvailabilityReplicaSeedingMode get_SeedingMode();
    public void set_SeedingMode(AvailabilityReplicaSeedingMode value);
    public int get_SessionTimeout();
    public void set_SessionTimeout(int value);
    public Guid get_UniqueId();
}
[DefaultMemberAttribute("Item")]
public class Microsoft.SqlServer.Management.Smo.AvailabilityReplicaCollection : SimpleObjectCollectionBase {
    private StringComparer m_comparer;
    internal StringComparer StringComparer { get; }
    public AvailabilityGroup Parent { get; }
    public AvailabilityReplica Item { get; }
    public AvailabilityReplica Item { get; }
    internal AvailabilityReplicaCollection(SqlSmoObject parentInstance, StringComparer comparer);
    internal virtual StringComparer get_StringComparer();
    public AvailabilityGroup get_Parent();
    public AvailabilityReplica get_Item(int index);
    public AvailabilityReplica get_Item(string name);
    public void CopyTo(AvailabilityReplica[] array, int index);
    public AvailabilityReplica ItemById(int id);
    protected virtual Type GetCollectionElementType();
    internal virtual SqlSmoObject GetCollectionElementInstance(ObjectKeyBase key, SqlSmoState state);
    public void Remove(AvailabilityReplica availabilityReplica);
    public void Remove(string name);
    public void Add(AvailabilityReplica availabilityReplica);
    internal SqlSmoObject GetObjectByName(string name);
    internal virtual ObjectKeyBase CreateKeyFromUrn(Urn urn);
}
[EvaluationModeAttribute("4")]
[PhysicalFacetAttribute]
[SfcElementAttribute("16")]
public class Microsoft.SqlServer.Management.Smo.BackupDevice : ScriptNameObjectBase {
    public static string UrnSuffix { get; }
    [SfcObjectAttribute("1")]
public Server Parent { get; public set; }
    [SfcPropertyAttribute("1280")]
public BackupDeviceType BackupDeviceType { get; public set; }
    [SfcPropertyAttribute("1280")]
public string PhysicalLocation { get; public set; }
    [SfcPropertyAttribute("1280")]
public bool SkipTapeLabel { get; public set; }
    internal BackupDevice(AbstractCollectionBase parentColl, ObjectKeyBase key, SqlSmoState state);
    public BackupDevice(Server server, string name);
    public static string get_UrnSuffix();
    public sealed virtual void Create();
    internal virtual void ScriptCreate(StringCollection queries, ScriptingPreferences sp);
    public sealed virtual void Drop();
    public sealed virtual void DropIfExists();
    internal virtual void ScriptDrop(StringCollection dropQuery, ScriptingPreferences sp);
    public sealed virtual StringCollection Script();
    public sealed virtual StringCollection Script(ScriptingOptions scriptingOptions);
    public DataTable ReadBackupHeader();
    public DataTable ReadMediaHeader();
    public Server get_Parent();
    public void set_Parent(Server value);
    internal virtual SqlPropertyMetadataProvider GetPropertyMetadataProvider();
    public BackupDeviceType get_BackupDeviceType();
    public void set_BackupDeviceType(BackupDeviceType value);
    public string get_PhysicalLocation();
    public void set_PhysicalLocation(string value);
    public bool get_SkipTapeLabel();
    public void set_SkipTapeLabel(bool value);
    internal virtual String[] GetNonAlterableProperties();
}
[DefaultMemberAttribute("Item")]
public class Microsoft.SqlServer.Management.Smo.BackupDeviceCollection : SimpleObjectCollectionBase {
    public Server Parent { get; }
    public BackupDevice Item { get; }
    public BackupDevice Item { get; }
    internal BackupDeviceCollection(SqlSmoObject parentInstance);
    public Server get_Parent();
    public BackupDevice get_Item(int index);
    public BackupDevice get_Item(string name);
    public void CopyTo(BackupDevice[] array, int index);
    protected virtual Type GetCollectionElementType();
    internal virtual SqlSmoObject GetCollectionElementInstance(ObjectKeyBase key, SqlSmoState state);
    public void Add(BackupDevice backupDevice);
    internal SqlSmoObject GetObjectByName(string name);
    internal virtual ObjectKeyBase CreateKeyFromUrn(Urn urn);
}
public enum Microsoft.SqlServer.Management.Smo.BackupEncryptionAlgorithm : Enum {
    public int value__;
    public static BackupEncryptionAlgorithm Aes128;
    public static BackupEncryptionAlgorithm Aes192;
    public static BackupEncryptionAlgorithm Aes256;
    public static BackupEncryptionAlgorithm TripleDes;
}
public enum Microsoft.SqlServer.Management.Smo.BackupEncryptorType : Enum {
    public int value__;
    public static BackupEncryptorType ServerCertificate;
    public static BackupEncryptorType ServerAsymmetricKey;
}
public class Microsoft.SqlServer.Management.Smo.BackupMedia : object {
    private string mediaName;
    private DeviceType mediaType;
    private byte familySequenceNumber;
    private string credentialName;
    private byte mirrorSequenceNumber;
    internal Guid mediaSetId;
    internal Guid mediaFamilyId;
    internal Exception ReadException;
    private DataTable header;
    private DataTable label;
    public string MediaName { get; }
    public DeviceType MediaType { get; }
    public byte FamilySequenceNumber { get; }
    public string CredentialName { get; public set; }
    public byte MirrorSequenceNumber { get; }
    internal ServerVersion BackupUrlDeviceSupportedServerVersion { get; }
    internal BackupMedia(DataRow dr);
    internal BackupMedia(string name, DeviceType backupMediaType);
    internal BackupMedia(string name, DeviceType backupMediaType, string credentialName);
    public string get_MediaName();
    public DeviceType get_MediaType();
    public byte get_FamilySequenceNumber();
    public string get_CredentialName();
    public void set_CredentialName(string value);
    public byte get_MirrorSequenceNumber();
    internal ServerVersion get_BackupUrlDeviceSupportedServerVersion();
    internal DataTable MediaHeader(Server server);
    internal DataTable MediaLabel(Server server);
    internal static string GetBackupMediaNameForScript(string name, DeviceType type);
    internal bool AddCredential(ServerVersion targetVersion, StringBuilder sb);
    internal bool IsBackupUrlDeviceSupported(ServerVersion currentServerVersion);
}
public class Microsoft.SqlServer.Management.Smo.BackupMediaSet : object {
    internal bool IsPresentInMsdb;
    private Server server;
    internal Guid mediaSetGuid;
    internal int mediaSetID;
    private string name;
    private string description;
    private int mirrorCount;
    private byte familyCount;
    private DeviceType mediaType;
    private List`1<BackupMedia> backupMediaList;
    public string Name { get; }
    public string Description { get; }
    public int MirrorCount { get; }
    public byte FamilyCount { get; }
    public DeviceType MediaType { get; }
    public IEnumerable`1<BackupMedia> BackupMediaList { get; }
    internal BackupMediaSet(Server server, int mediaSetID);
    public BackupMediaSet(Server server, List`1<BackupMedia> backupMediaList);
    public string get_Name();
    public string get_Description();
    public int get_MirrorCount();
    public byte get_FamilyCount();
    public DeviceType get_MediaType();
    public IEnumerable`1<BackupMedia> get_BackupMediaList();
    private void Populate(int mediaSetID);
    private void Populate(List`1<BackupMedia> backupMediaList);
    internal List`1<BackupSet> ReadBackupSetHeader();
    internal void CheckMediaSetComplete();
}
public class Microsoft.SqlServer.Management.Smo.BackupSet : object {
    internal decimal StopAtLsn;
    internal int ID;
    private bool isPopulated;
    internal Server server;
    internal string name;
    internal string description;
    internal BackupSetType backupSetType;
    internal DateTime backupStartDate;
    internal DateTime backupFinishDate;
    internal DateTime expirationDate;
    internal int position;
    internal string databaseName;
    internal string serverName;
    internal string machineName;
    internal string userName;
    internal ServerVersion serverVersion;
    internal bool isSnapshot;
    internal bool isReadOnly;
    internal bool isDamaged;
    internal bool isCopyOnly;
    internal bool isForceOffline;
    internal bool hasIncompleteMetaData;
    internal bool hasBulkLoggedData;
    internal bool beginsLogChain;
    internal int softwareVendorId;
    internal decimal firstLsn;
    internal decimal lastLsn;
    internal decimal checkpointLsn;
    internal decimal databaseBackupLsn;
    internal decimal forkPointLsn;
    internal decimal differentialBaseLsn;
    internal decimal backupSize;
    internal decimal compressedBackupSize;
    internal Guid backupSetGuid;
    internal Guid databaseGuid;
    internal Guid familyGuid;
    internal Guid differentialBaseGuid;
    internal Guid recoveryForkID;
    internal Guid firstRecoveryForkID;
    internal BackupMediaSet backupMediaSet;
    private DataSet fileList;
    private int targetServerVersion { get; }
    public Server Parent { get; }
    public string Name { get; }
    public string Description { get; }
    public BackupSetType BackupSetType { get; }
    public DateTime BackupStartDate { get; }
    public DateTime BackupFinishDate { get; }
    public DateTime ExpirationDate { get; }
    public int Position { get; }
    public string DatabaseName { get; }
    public string ServerName { get; }
    public string MachineName { get; }
    public string UserName { get; }
    public ServerVersion ServerVersion { get; }
    public bool IsSnapshot { get; }
    public bool IsReadOnly { get; }
    public bool IsDamaged { get; }
    public bool IsCopyOnly { get; }
    public bool IsForceOffline { get; }
    public bool HasIncompleteMetaData { get; }
    public bool HasBulkLoggedData { get; }
    public bool BeginsLogChain { get; }
    public int SoftwareVendorId { get; }
    public decimal FirstLsn { get; }
    public decimal LastLsn { get; }
    public decimal CheckpointLsn { get; }
    public decimal DatabaseBackupLsn { get; }
    public decimal ForkPointLsn { get; }
    public decimal DifferentialBaseLsn { get; }
    public decimal BackupSize { get; }
    public decimal CompressedBackupSize { get; }
    public Guid BackupSetGuid { get; }
    public Guid DatabaseGuid { get; }
    public Guid FamilyGuid { get; }
    public Guid DifferentialBaseGuid { get; }
    public Guid RecoveryForkID { get; }
    public Guid FirstRecoveryForkID { get; }
    public BackupMediaSet BackupMediaSet { get; }
    internal DataSet FileList { get; }
    internal BackupSet(Server parentServer, Guid BackupSetGuid);
    internal BackupSet(Server parentServer, BackupMediaSet mediaSet, DataRow dr);
    private int get_targetServerVersion();
    public Server get_Parent();
    public string get_Name();
    public string get_Description();
    public BackupSetType get_BackupSetType();
    public DateTime get_BackupStartDate();
    public DateTime get_BackupFinishDate();
    public DateTime get_ExpirationDate();
    public int get_Position();
    public string get_DatabaseName();
    public string get_ServerName();
    public string get_MachineName();
    public string get_UserName();
    public ServerVersion get_ServerVersion();
    public bool get_IsSnapshot();
    public bool get_IsReadOnly();
    public bool get_IsDamaged();
    public bool get_IsCopyOnly();
    public bool get_IsForceOffline();
    public bool get_HasIncompleteMetaData();
    public bool get_HasBulkLoggedData();
    public bool get_BeginsLogChain();
    public int get_SoftwareVendorId();
    public decimal get_FirstLsn();
    public decimal get_LastLsn();
    public decimal get_CheckpointLsn();
    public decimal get_DatabaseBackupLsn();
    public decimal get_ForkPointLsn();
    public decimal get_DifferentialBaseLsn();
    public decimal get_BackupSize();
    public decimal get_CompressedBackupSize();
    public Guid get_BackupSetGuid();
    public Guid get_DatabaseGuid();
    public Guid get_FamilyGuid();
    public Guid get_DifferentialBaseGuid();
    public Guid get_RecoveryForkID();
    public Guid get_FirstRecoveryForkID();
    public BackupMediaSet get_BackupMediaSet();
    public void CheckBackupFilesExistence();
    public void Verify();
    private void Populate();
    private void Populate(DataRow dr);
    private void PopulateFromDevice(DataRow dr);
    private void PopulateV7Properties(DataRow dr);
    private void PopulateV7PropertiesFromDevices(DataRow dr);
    private void PopulateV9Properties(DataRow dr);
    private void PopulateV9PropertiesFromDevices(DataRow dr);
    private void PopulateV10Properties(DataRow dr);
    private void PopulateV10PropertiesFromDevices(DataRow dr);
    private void VersionCheck(int minSupportedVersion, string propertyName);
    internal DataSet get_FileList();
    public DataSet GetFileList();
    internal static bool IsBackupsForked(List`1<BackupSet> backupSetList);
    public static bool IsBackupSetsInSequence(BackupSet first, BackupSet second, Decimal& stopAtLsn);
    public static bool IsBackupSetsInSequence(BackupSet first, BackupSet second);
    internal static bool IsBackupSetsInSequence(BackupSet first, BackupSet second, String& errMsg, Object& errSource, Decimal& stopAtLsn);
}
[DefaultMemberAttribute("Item")]
public class Microsoft.SqlServer.Management.Smo.BackupSetCollection : object {
    internal List`1<BackupSet> backupsetList;
    private ICollection backupsets;
    private Database parent;
    private string databaseName;
    private Server server;
    public BackupSet Item { get; }
    public int Count { get; }
    public bool IsSynchronized { get; }
    public object SyncRoot { get; }
    internal BackupSetCollection(Database parent);
    internal BackupSetCollection(Server server, string DatabaseName, bool PopulateFromMsdb, bool includeSnapshotBackups);
    public BackupSet get_Item(int index);
    private void GetBackupSetsFromMsdb(bool includeSnapshotBackups);
    public sealed virtual void CopyTo(Array array, int index);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsSynchronized();
    public sealed virtual object get_SyncRoot();
    public sealed virtual IEnumerator GetEnumerator();
}
[ExtensionAttribute]
internal static class Microsoft.SqlServer.Management.Smo.BatchExtension : object {
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.Smo.BatchExtension/<WithBatches>d__0")]
[ExtensionAttribute]
internal static IEnumerable`1<string> WithBatches(IEnumerable`1<string> script, string batchTerminator);
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.Smo.BatchExtension/<Batch>d__1`1")]
[ExtensionAttribute]
internal static IEnumerable`1<IEnumerable`1<T>> Batch(IEnumerable`1<T> collection, int batchSize);
}
internal class Microsoft.SqlServer.Management.Smo.BitStorage : object {
    private static int BitsPerItem;
    private static UInt32 BitPattern;
    private int count;
    private UInt32[] bitArray;
    internal int Count { get; }
    internal BitStorage(int itemCount);
    protected void SetBit(int itemIndex, BitIndex bitIndex, bool value);
    protected bool GetBit(int itemIndex, BitIndex bitIndex);
    internal int get_Count();
}
public class Microsoft.SqlServer.Management.Smo.Broker.BrokerObjectBase : ScriptNameObjectBase {
    [SfcKeyAttribute("0")]
[SfcPropertyAttribute("1280")]
public string Name { get; public set; }
    internal BrokerObjectBase(AbstractCollectionBase parentColl, ObjectKeyBase key, SqlSmoState state);
    protected internal virtual string GetDBName();
    public sealed virtual StringCollection Script();
    public sealed virtual StringCollection Script(ScriptingOptions scriptingOptions);
    public virtual string get_Name();
    public virtual void set_Name(string value);
}
[EvaluationModeAttribute("4")]
[PhysicalFacetAttribute]
[LocalizedPropertyResourcesAttribute("Microsoft.SqlServer.Management.Smo.Broker.BrokerLocalizableResources", "True")]
[TypeConverterAttribute("Microsoft.SqlServer.Management.Sdk.Sfc.LocalizableTypeConverter")]
public class Microsoft.SqlServer.Management.Smo.Broker.BrokerPriority : BrokerObjectBase {
    public static string UrnSuffix { get; }
    [SfcObjectAttribute("1")]
public ServiceBroker Parent { get; public set; }
    [SfcPropertyAttribute("1024")]
[SfcReferenceAttribute("Microsoft.SqlServer.Management.Smo.Broker.ServiceContract", "Server[@Name = '{0}']/Database[@Name = '{1}']/ServiceBroker/ServiceContract[@Name='{2}']", "Mono.Cecil.CustomAttributeArgument[]")]
[CLSCompliantAttribute("False")]
public string ContractName { get; public set; }
    [SfcPropertyAttribute("1024")]
public int ID { get; }
    [SfcPropertyAttribute("1024")]
[SfcReferenceAttribute("Microsoft.SqlServer.Management.Smo.Broker.BrokerService", "Server[@Name = '{0}']/Database[@Name = '{1}']/ServiceBroker/BrokerService[@Name='{2}']", "Mono.Cecil.CustomAttributeArgument[]")]
[CLSCompliantAttribute("False")]
public string LocalServiceName { get; public set; }
    [SfcPropertyAttribute("1024")]
public byte PriorityLevel { get; public set; }
    [SfcPropertyAttribute("1024")]
public string RemoteServiceName { get; public set; }
    internal BrokerPriority(AbstractCollectionBase parentColl, ObjectKeyBase key, SqlSmoState state);
    public BrokerPriority(ServiceBroker serviceBroker, string name);
    public static string get_UrnSuffix();
    public sealed virtual void Create();
    internal virtual void ScriptCreate(StringCollection queries, ScriptingPreferences sp);
    public sealed virtual void Drop();
    public sealed virtual void DropIfExists();
    private void GetDDL(StringCollection queries, ScriptingPreferences sp, bool bCreate);
    internal virtual void ScriptDrop(StringCollection queries, ScriptingPreferences sp);
    public sealed virtual void Alter();
    internal virtual void ScriptAlter(StringCollection queries, ScriptingPreferences sp);
    public ServiceBroker get_Parent();
    public void set_Parent(ServiceBroker value);
    internal virtual SqlPropertyMetadataProvider GetPropertyMetadataProvider();
    public string get_ContractName();
    public void set_ContractName(string value);
    public int get_ID();
    public string get_LocalServiceName();
    public void set_LocalServiceName(string value);
    public byte get_PriorityLevel();
    public void set_PriorityLevel(byte value);
    public string get_RemoteServiceName();
    public void set_RemoteServiceName(string value);
}
[DefaultMemberAttribute("Item")]
public class Microsoft.SqlServer.Management.Smo.Broker.BrokerPriorityCollection : SimpleObjectCollectionBase {
    private StringComparer m_comparer;
    internal StringComparer StringComparer { get; }
    public ServiceBroker Parent { get; }
    public BrokerPriority Item { get; }
    public BrokerPriority Item { get; }
    internal BrokerPriorityCollection(SqlSmoObject parentInstance, StringComparer comparer);
    internal virtual StringComparer get_StringComparer();
    public ServiceBroker get_Parent();
    public BrokerPriority get_Item(int index);
    public BrokerPriority get_Item(string name);
    public void CopyTo(BrokerPriority[] array, int index);
    public BrokerPriority ItemById(int id);
    protected virtual Type GetCollectionElementType();
    internal virtual SqlSmoObject GetCollectionElementInstance(ObjectKeyBase key, SqlSmoState state);
    public void Add(BrokerPriority brokerPriority);
    internal SqlSmoObject GetObjectByName(string name);
    internal virtual ObjectKeyBase CreateKeyFromUrn(Urn urn);
}
[CLSCompliantAttribute("False")]
public class Microsoft.SqlServer.Management.Smo.Broker.BrokerPriorityExtender : SmoObjectExtender`1<BrokerPriority> {
    [ExtendedPropertyAttribute]
public string Name { get; public set; }
    public BrokerPriorityExtender(BrokerPriority brokerPriority);
    public string get_Name();
    public void set_Name(string value);
    public sealed virtual ValidationState Validate(string methodName, Object[] arguments);
}
[EvaluationModeAttribute("4")]
[PhysicalFacetAttribute]
[LocalizedPropertyResourcesAttribute("Microsoft.SqlServer.Management.Smo.Broker.BrokerLocalizableResources", "True")]
[TypeConverterAttribute("Microsoft.SqlServer.Management.Sdk.Sfc.LocalizableTypeConverter")]
public class Microsoft.SqlServer.Management.Smo.Broker.BrokerService : BrokerObjectBase {
    private ServiceContractMappingCollection m_ServiceContractMappings;
    private BrokerServiceEvents events;
    public static string UrnSuffix { get; }
    [SfcObjectAttribute("1", "0", "Microsoft.SqlServer.Management.Smo.Broker.ServiceContractMapping")]
public ServiceContractMappingCollection ServiceContractMappings { get; }
    [SfcObjectAttribute("1", "0", "Microsoft.SqlServer.Management.Smo.ExtendedProperty")]
public ExtendedPropertyCollection ExtendedProperties { get; }
    [SfcObjectAttribute("1")]
public ServiceBroker Parent { get; public set; }
    internal UserPermissionCollection Permissions { get; }
    [SfcPropertyAttribute("1024")]
public int ID { get; }
    [SfcPropertyAttribute("1024")]
public bool IsSystemObject { get; }
    [SfcPropertyAttribute("1280")]
[SfcReferenceAttribute("Microsoft.SqlServer.Management.Smo.User", "Server[@Name = '{0}']/Database[@Name = '{1}']/User[@Name = '{2}']", "Mono.Cecil.CustomAttributeArgument[]")]
[SfcReferenceAttribute("Microsoft.SqlServer.Management.Smo.DatabaseRole", "Server[@Name = '{0}']/Database[@Name = '{1}']/Role[@Name = '{2}']", "Mono.Cecil.CustomAttributeArgument[]")]
[SfcReferenceAttribute("Microsoft.SqlServer.Management.Smo.ApplicationRole", "Server[@Name = '{0}']/Database[@Name = '{1}']/ApplicationRole[@Name = '{2}']", "Mono.Cecil.CustomAttributeArgument[]")]
[CLSCompliantAttribute("False")]
public string Owner { get; public set; }
    [SfcPropertyAttribute("1024")]
[SfcReferenceAttribute("Microsoft.SqlServer.Management.Smo.Broker.ServiceQueue", "Server[@Name = '{0}']/Database[@Name = '{1}']/ServiceBroker/ServiceQueue[@Name='{2}' and @Schema='{3}']", "Mono.Cecil.CustomAttributeArgument[]")]
[CLSCompliantAttribute("False")]
public string QueueName { get; public set; }
    [SfcPropertyAttribute("1024", "dbo")]
public string QueueSchema { get; public set; }
    public BrokerServiceEvents Events { get; }
    internal BrokerService(AbstractCollectionBase parentColl, ObjectKeyBase key, SqlSmoState state);
    public BrokerService(ServiceBroker serviceBroker, string name);
    public static string get_UrnSuffix();
    private void GetDDL(StringCollection queries, ScriptingPreferences sp, bool bCreate);
    public sealed virtual void Create();
    internal virtual void ScriptCreate(StringCollection queries, ScriptingPreferences sp);
    protected virtual void PostCreate();
    public sealed virtual void Drop();
    public sealed virtual void DropIfExists();
    internal virtual void ScriptDrop(StringCollection queries, ScriptingPreferences sp);
    public sealed virtual void Alter();
    internal virtual void ScriptAlter(StringCollection alterQuery, ScriptingPreferences sp);
    protected virtual bool IsObjectDirty();
    public ServiceContractMappingCollection get_ServiceContractMappings();
    public sealed virtual ExtendedPropertyCollection get_ExtendedProperties();
    public ServiceBroker get_Parent();
    public void set_Parent(ServiceBroker value);
    internal virtual UserPermissionCollection get_Permissions();
    internal virtual SqlPropertyMetadataProvider GetPropertyMetadataProvider();
    public int get_ID();
    public bool get_IsSystemObject();
    public string get_Owner();
    public void set_Owner(string value);
    public string get_QueueName();
    public void set_QueueName(string value);
    public string get_QueueSchema();
    public void set_QueueSchema(string value);
    internal virtual String[] GetNonAlterableProperties();
    internal virtual object GetPropertyDefaultValue(string propname);
    public sealed virtual void Deny(ObjectPermissionSet permission, String[] granteeNames);
    public sealed virtual void Deny(ObjectPermissionSet permission, String[] granteeNames, bool cascade);
    public sealed virtual void Grant(ObjectPermissionSet permission, String[] granteeNames);
    public sealed virtual void Grant(ObjectPermissionSet permission, String[] granteeNames, bool grantGrant);
    public sealed virtual void Grant(ObjectPermissionSet permission, String[] granteeNames, bool grantGrant, string asRole);
    public sealed virtual void Revoke(ObjectPermissionSet permission, String[] granteeNames);
    public sealed virtual void Revoke(ObjectPermissionSet permission, String[] granteeNames, bool revokeGrant, bool cascade);
    public void Revoke(ObjectPermissionSet permission, String[] granteeNames, bool revokeGrant, bool cascade, string asRole);
    public sealed virtual void Deny(ObjectPermissionSet permission, string granteeName);
    public sealed virtual void Deny(ObjectPermissionSet permission, string granteeName, bool cascade);
    public sealed virtual void Grant(ObjectPermissionSet permission, string granteeName);
    public sealed virtual void Grant(ObjectPermissionSet permission, string granteeName, bool grantGrant);
    public sealed virtual void Grant(ObjectPermissionSet permission, string granteeName, bool grantGrant, string asRole);
    public sealed virtual void Revoke(ObjectPermissionSet permission, string granteeName);
    public void Revoke(ObjectPermissionSet permission, string granteeName, bool revokeGrant, bool cascade);
    public sealed virtual void Revoke(ObjectPermissionSet permission, string granteeName, bool revokeGrant, bool cascade, string asRole);
    public sealed virtual ObjectPermissionInfo[] EnumObjectPermissions();
    public sealed virtual ObjectPermissionInfo[] EnumObjectPermissions(string granteeName);
    public sealed virtual ObjectPermissionInfo[] EnumObjectPermissions(ObjectPermissionSet permissions);
    public sealed virtual ObjectPermissionInfo[] EnumObjectPermissions(string granteeName, ObjectPermissionSet permissions);
    public BrokerServiceEvents get_Events();
}
[DefaultMemberAttribute("Item")]
public class Microsoft.SqlServer.Management.Smo.Broker.BrokerServiceCollection : SimpleObjectCollectionBase {
    private StringComparer m_comparer;
    internal StringComparer StringComparer { get; }
    public ServiceBroker Parent { get; }
    public BrokerService Item { get; }
    public BrokerService Item { get; }
    internal BrokerServiceCollection(SqlSmoObject parentInstance, StringComparer comparer);
    internal virtual StringComparer get_StringComparer();
    public ServiceBroker get_Parent();
    public BrokerService get_Item(int index);
    public BrokerService get_Item(string name);
    public void CopyTo(BrokerService[] array, int index);
    public BrokerService ItemById(int id);
    protected virtual Type GetCollectionElementType();
    internal virtual SqlSmoObject GetCollectionElementInstance(ObjectKeyBase key, SqlSmoState state);
    public void Add(BrokerService brokerService);
    internal SqlSmoObject GetObjectByName(string name);
    internal virtual ObjectKeyBase CreateKeyFromUrn(Urn urn);
}
public class Microsoft.SqlServer.Management.Smo.Broker.BrokerServiceEvents : object {
    private ObjectEventsWorker serverEventsWorker;
    private BrokerService parent;
    internal BrokerServiceEvents(BrokerService parent);
    public ObjectEventSet GetEventSelection();
    public void SubscribeToEvents(ObjectEventSet events);
    public void SubscribeToEvents(ObjectEventSet events, ServerEventHandler eventHandler);
    public void UnsubscribeFromEvents(ObjectEventSet events);
    public void UnsubscribeAllEvents();
    public void StartEvents();
    public void StopEvents();
    public void add_ServerEvent(ServerEventHandler value);
    public void remove_ServerEvent(ServerEventHandler value);
    private void InitializeEvents();
}
[CLSCompliantAttribute("False")]
public class Microsoft.SqlServer.Management.Smo.Broker.BrokerServiceExtender : SmoObjectExtender`1<BrokerService> {
    [ExtendedPropertyAttribute]
public string Name { get; public set; }
    [ExtendedPropertyAttribute]
public ServiceContractMappingCollection ServiceContractMappings { get; }
    public BrokerServiceExtender(BrokerService brokerService);
    public string get_Name();
    public void set_Name(string value);
    public ServiceContractMappingCollection get_ServiceContractMappings();
    public sealed virtual ValidationState Validate(string methodName, Object[] arguments);
}
[EvaluationModeAttribute("4")]
[PhysicalFacetAttribute]
[LocalizedPropertyResourcesAttribute("Microsoft.SqlServer.Management.Smo.Broker.BrokerLocalizableResources", "True")]
[TypeConverterAttribute("Microsoft.SqlServer.Management.Sdk.Sfc.LocalizableTypeConverter")]
public class Microsoft.SqlServer.Management.Smo.Broker.MessageType : BrokerObjectBase {
    private MessageTypeEvents events;
    public static string UrnSuffix { get; }
    [SfcObjectAttribute("1", "0", "Microsoft.SqlServer.Management.Smo.ExtendedProperty")]
public ExtendedPropertyCollection ExtendedProperties { get; }
    [SfcObjectAttribute("1")]
public ServiceBroker Parent { get; public set; }
    internal UserPermissionCollection Permissions { get; }
    [SfcPropertyAttribute("1024")]
public int ID { get; }
    [SfcPropertyAttribute("1024")]
public bool IsSystemObject { get; }
    [SfcPropertyAttribute("1024")]
public MessageTypeValidation MessageTypeValidation { get; public set; }
    [SfcPropertyAttribute("1024")]
[SfcReferenceAttribute("Microsoft.SqlServer.Management.Smo.User", "Server[@Name = '{0}']/Database[@Name = '{1}']/User[@Name = '{2}']", "Mono.Cecil.CustomAttributeArgument[]")]
[SfcReferenceAttribute("Microsoft.SqlServer.Management.Smo.DatabaseRole", "Server[@Name = '{0}']/Database[@Name = '{1}']/Role[@Name = '{2}']", "Mono.Cecil.CustomAttributeArgument[]")]
[SfcReferenceAttribute("Microsoft.SqlServer.Management.Smo.ApplicationRole", "Server[@Name = '{0}']/Database[@Name = '{1}']/ApplicationRole[@Name = '{2}']", "Mono.Cecil.CustomAttributeArgument[]")]
[CLSCompliantAttribute("False")]
public string Owner { get; public set; }
    [SfcPropertyAttribute("1024")]
[SfcReferenceAttribute("Microsoft.SqlServer.Management.Smo.XmlSchemaCollection", "Server[@Name = '{0}']/Database[@Name = '{1}']/XmlSchemaCollection[@Name='{2}' and @Schema='{3}']", "Mono.Cecil.CustomAttributeArgument[]")]
[CLSCompliantAttribute("False")]
public string ValidationXmlSchemaCollection { get; public set; }
    [SfcPropertyAttribute("1024", "dbo")]
public string ValidationXmlSchemaCollectionSchema { get; public set; }
    public MessageTypeEvents Events { get; }
    internal MessageType(AbstractCollectionBase parentColl, ObjectKeyBase key, SqlSmoState state);
    public MessageType(ServiceBroker serviceBroker, string name);
    public static string get_UrnSuffix();
    public sealed virtual void Alter();
    public sealed virtual void Create();
    public sealed virtual ExtendedPropertyCollection get_ExtendedProperties();
    private void ScriptMessageType(StringCollection queries, ScriptingPreferences sp, bool bForCreate);
    internal virtual void ScriptCreate(StringCollection queries, ScriptingPreferences sp);
    internal virtual void ScriptAlter(StringCollection queries, ScriptingPreferences sp);
    public sealed virtual void Drop();
    public sealed virtual void DropIfExists();
    internal virtual void ScriptDrop(StringCollection queries, ScriptingPreferences sp);
    public ServiceBroker get_Parent();
    public void set_Parent(ServiceBroker value);
    internal virtual UserPermissionCollection get_Permissions();
    internal virtual SqlPropertyMetadataProvider GetPropertyMetadataProvider();
    public int get_ID();
    public bool get_IsSystemObject();
    public MessageTypeValidation get_MessageTypeValidation();
    public void set_MessageTypeValidation(MessageTypeValidation value);
    public string get_Owner();
    public void set_Owner(string value);
    public string get_ValidationXmlSchemaCollection();
    public void set_ValidationXmlSchemaCollection(string value);
    public string get_ValidationXmlSchemaCollectionSchema();
    public void set_ValidationXmlSchemaCollectionSchema(string value);
    internal virtual object GetPropertyDefaultValue(string propname);
    public sealed virtual void Deny(ObjectPermissionSet permission, String[] granteeNames);
    public sealed virtual void Deny(ObjectPermissionSet permission, String[] granteeNames, bool cascade);
    public sealed virtual void Grant(ObjectPermissionSet permission, String[] granteeNames);
    public sealed virtual void Grant(ObjectPermissionSet permission, String[] granteeNames, bool grantGrant);
    public sealed virtual void Grant(ObjectPermissionSet permission, String[] granteeNames, bool grantGrant, string asRole);
    public sealed virtual void Revoke(ObjectPermissionSet permission, String[] granteeNames);
    public sealed virtual void Revoke(ObjectPermissionSet permission, String[] granteeNames, bool revokeGrant, bool cascade);
    public void Revoke(ObjectPermissionSet permission, String[] granteeNames, bool revokeGrant, bool cascade, string asRole);
    public sealed virtual void Deny(ObjectPermissionSet permission, string granteeName);
    public sealed virtual void Deny(ObjectPermissionSet permission, string granteeName, bool cascade);
    public sealed virtual void Grant(ObjectPermissionSet permission, string granteeName);
    public sealed virtual void Grant(ObjectPermissionSet permission, string granteeName, bool grantGrant);
    public sealed virtual void Grant(ObjectPermissionSet permission, string granteeName, bool grantGrant, string asRole);
    public sealed virtual void Revoke(ObjectPermissionSet permission, string granteeName);
    public void Revoke(ObjectPermissionSet permission, string granteeName, bool revokeGrant, bool cascade);
    public sealed virtual void Revoke(ObjectPermissionSet permission, string granteeName, bool revokeGrant, bool cascade, string asRole);
    public sealed virtual ObjectPermissionInfo[] EnumObjectPermissions();
    public sealed virtual ObjectPermissionInfo[] EnumObjectPermissions(string granteeName);
    public sealed virtual ObjectPermissionInfo[] EnumObjectPermissions(ObjectPermissionSet permissions);
    public sealed virtual ObjectPermissionInfo[] EnumObjectPermissions(string granteeName, ObjectPermissionSet permissions);
    public MessageTypeEvents get_Events();
}
[DefaultMemberAttribute("Item")]
public class Microsoft.SqlServer.Management.Smo.Broker.MessageTypeCollection : SimpleObjectCollectionBase {
    private StringComparer m_comparer;
    internal StringComparer StringComparer { get; }
    public ServiceBroker Parent { get; }
    public MessageType Item { get; }
    public MessageType Item { get; }
    internal MessageTypeCollection(SqlSmoObject parentInstance, StringComparer comparer);
    internal virtual StringComparer get_StringComparer();
    public ServiceBroker get_Parent();
    public MessageType get_Item(int index);
    public MessageType get_Item(string name);
    public void CopyTo(MessageType[] array, int index);
    public MessageType ItemById(int id);
    protected virtual Type GetCollectionElementType();
    internal virtual SqlSmoObject GetCollectionElementInstance(ObjectKeyBase key, SqlSmoState state);
    public void Add(MessageType messageType);
    internal SqlSmoObject GetObjectByName(string name);
    internal virtual ObjectKeyBase CreateKeyFromUrn(Urn urn);
}
public class Microsoft.SqlServer.Management.Smo.Broker.MessageTypeEvents : object {
    private ObjectEventsWorker serverEventsWorker;
    private MessageType parent;
    internal MessageTypeEvents(MessageType parent);
    public ObjectEventSet GetEventSelection();
    public void SubscribeToEvents(ObjectEventSet events);
    public void SubscribeToEvents(ObjectEventSet events, ServerEventHandler eventHandler);
    public void UnsubscribeFromEvents(ObjectEventSet events);
    public void UnsubscribeAllEvents();
    public void StartEvents();
    public void StopEvents();
    public void add_ServerEvent(ServerEventHandler value);
    public void remove_ServerEvent(ServerEventHandler value);
    private void InitializeEvents();
}
[CLSCompliantAttribute("False")]
public class Microsoft.SqlServer.Management.Smo.Broker.MessageTypeExtender : SmoObjectExtender`1<MessageType> {
    [ExtendedPropertyAttribute]
public string Name { get; public set; }
    public MessageTypeExtender(MessageType messageType);
    public string get_Name();
    public void set_Name(string value);
    public sealed virtual ValidationState Validate(string methodName, Object[] arguments);
}
public class Microsoft.SqlServer.Management.Smo.Broker.MessageTypeMapping : NamedSmoObject {
    public static string UrnSuffix { get; }
    [SfcKeyAttribute("0")]
[SfcReferenceAttribute("Microsoft.SqlServer.Management.Smo.Broker.MessageType", "Server[@Name = '{0}']/Database[@Name = '{1}']/ServiceBroker/MessageType[@Name='{2}']", "Mono.Cecil.CustomAttributeArgument[]")]
[CLSCompliantAttribute("False")]
[SfcPropertyAttribute("1280")]
public string Name { get; public set; }
    [SfcObjectAttribute("1")]
public ServiceContract Parent { get; public set; }
    private bool Microsoft.SqlServer.Management.Sdk.Sfc.ISfcSupportsDesignMode.IsDesignMode { get; }
    [SfcPropertyAttribute("1024")]
public MessageSource MessageSource { get; public set; }
    internal MessageTypeMapping(AbstractCollectionBase parentColl, ObjectKeyBase key, SqlSmoState state);
    public MessageTypeMapping(ServiceContract serviceContract, string name);
    public MessageTypeMapping(ServiceContract servicecontract, string messageName, MessageSource messageSource);
    public sealed virtual void MarkForDrop(bool dropOnAlter);
    public static string get_UrnSuffix();
    public virtual string get_Name();
    public virtual void set_Name(string value);
    internal static String[] GetScriptFields(Type parentType, ServerVersion version, DatabaseEngineType databaseEngineType, DatabaseEngineEdition databaseEngineEdition, bool defaultTextMode);
    public ServiceContract get_Parent();
    public void set_Parent(ServiceContract value);
    private sealed virtual override bool Microsoft.SqlServer.Management.Sdk.Sfc.ISfcSupportsDesignMode.get_IsDesignMode();
    internal virtual SqlPropertyMetadataProvider GetPropertyMetadataProvider();
    public MessageSource get_MessageSource();
    public void set_MessageSource(MessageSource value);
}
[DefaultMemberAttribute("Item")]
public class Microsoft.SqlServer.Management.Smo.Broker.MessageTypeMappingCollection : SimpleObjectCollectionBase {
    public ServiceContract Parent { get; }
    public MessageTypeMapping Item { get; }
    public MessageTypeMapping Item { get; }
    internal MessageTypeMappingCollection(SqlSmoObject parentInstance);
    public ServiceContract get_Parent();
    public MessageTypeMapping get_Item(int index);
    public MessageTypeMapping get_Item(string name);
    public void CopyTo(MessageTypeMapping[] array, int index);
    protected virtual Type GetCollectionElementType();
    internal virtual SqlSmoObject GetCollectionElementInstance(ObjectKeyBase key, SqlSmoState state);
    public void Remove(MessageTypeMapping messageTypeMapping);
    public void Remove(string name);
    public void Add(MessageTypeMapping messageTypeMapping);
    internal SqlSmoObject GetObjectByName(string name);
    internal virtual ObjectKeyBase CreateKeyFromUrn(Urn urn);
}
[EvaluationModeAttribute("4")]
[PhysicalFacetAttribute]
[LocalizedPropertyResourcesAttribute("Microsoft.SqlServer.Management.Smo.Broker.BrokerLocalizableResources", "True")]
[TypeConverterAttribute("Microsoft.SqlServer.Management.Sdk.Sfc.LocalizableTypeConverter")]
public class Microsoft.SqlServer.Management.Smo.Broker.RemoteServiceBinding : BrokerObjectBase {
    private RemoteServiceBindingEvents events;
    public static string UrnSuffix { get; }
    [SfcObjectAttribute("1", "0", "Microsoft.SqlServer.Management.Smo.ExtendedProperty")]
public ExtendedPropertyCollection ExtendedProperties { get; }
    [SfcObjectAttribute("1")]
public ServiceBroker Parent { get; public set; }
    internal UserPermissionCollection Permissions { get; }
    [SfcPropertyAttribute("1024")]
[SfcReferenceAttribute("Microsoft.SqlServer.Management.Smo.User", "Server[@Name = '{0}']/Database[@Name = '{1}']/User[@Name = '{2}']", "Mono.Cecil.CustomAttributeArgument[]")]
[CLSCompliantAttribute("False")]
public string CertificateUser { get; public set; }
    [SfcPropertyAttribute("1024")]
public int ID { get; }
    [SfcPropertyAttribute("1024")]
public bool IsAnonymous { get; public set; }
    [SfcPropertyAttribute("1280")]
[SfcReferenceAttribute("Microsoft.SqlServer.Management.Smo.User", "Server[@Name = '{0}']/Database[@Name = '{1}']/User[@Name = '{2}']", "Mono.Cecil.CustomAttributeArgument[]")]
[SfcReferenceAttribute("Microsoft.SqlServer.Management.Smo.DatabaseRole", "Server[@Name = '{0}']/Database[@Name = '{1}']/Role[@Name = '{2}']", "Mono.Cecil.CustomAttributeArgument[]")]
[SfcReferenceAttribute("Microsoft.SqlServer.Management.Smo.ApplicationRole", "Server[@Name = '{0}']/Database[@Name = '{1}']/ApplicationRole[@Name = '{2}']", "Mono.Cecil.CustomAttributeArgument[]")]
[CLSCompliantAttribute("False")]
public string Owner { get; public set; }
    [SfcPropertyAttribute("1024")]
public string RemoteService { get; public set; }
    public RemoteServiceBindingEvents Events { get; }
    internal RemoteServiceBinding(AbstractCollectionBase parentColl, ObjectKeyBase key, SqlSmoState state);
    public RemoteServiceBinding(ServiceBroker serviceBroker, string name);
    public static string get_UrnSuffix();
    public sealed virtual void Create();
    private void GetDDL(StringCollection queries, ScriptingPreferences sp, bool bCreate);
    internal virtual void ScriptCreate(StringCollection queries, ScriptingPreferences sp);
    public sealed virtual void Drop();
    public sealed virtual void DropIfExists();
    internal virtual void ScriptDrop(StringCollection queries, ScriptingPreferences sp);
    public sealed virtual void Alter();
    internal virtual void ScriptAlter(StringCollection alterQuery, ScriptingPreferences sp);
    public sealed virtual ExtendedPropertyCollection get_ExtendedProperties();
    public ServiceBroker get_Parent();
    public void set_Parent(ServiceBroker value);
    internal virtual UserPermissionCollection get_Permissions();
    internal virtual SqlPropertyMetadataProvider GetPropertyMetadataProvider();
    public string get_CertificateUser();
    public void set_CertificateUser(string value);
    public int get_ID();
    public bool get_IsAnonymous();
    public void set_IsAnonymous(bool value);
    public string get_Owner();
    public void set_Owner(string value);
    public string get_RemoteService();
    public void set_RemoteService(string value);
    internal virtual String[] GetNonAlterableProperties();
    public sealed virtual void Deny(ObjectPermissionSet permission, String[] granteeNames);
    public sealed virtual void Deny(ObjectPermissionSet permission, String[] granteeNames, bool cascade);
    public sealed virtual void Grant(ObjectPermissionSet permission, String[] granteeNames);
    public sealed virtual void Grant(ObjectPermissionSet permission, String[] granteeNames, bool grantGrant);
    public sealed virtual void Grant(ObjectPermissionSet permission, String[] granteeNames, bool grantGrant, string asRole);
    public sealed virtual void Revoke(ObjectPermissionSet permission, String[] granteeNames);
    public sealed virtual void Revoke(ObjectPermissionSet permission, String[] granteeNames, bool revokeGrant, bool cascade);
    public void Revoke(ObjectPermissionSet permission, String[] granteeNames, bool revokeGrant, bool cascade, string asRole);
    public sealed virtual void Deny(ObjectPermissionSet permission, string granteeName);
    public sealed virtual void Deny(ObjectPermissionSet permission, string granteeName, bool cascade);
    public sealed virtual void Grant(ObjectPermissionSet permission, string granteeName);
    public sealed virtual void Grant(ObjectPermissionSet permission, string granteeName, bool grantGrant);
    public sealed virtual void Grant(ObjectPermissionSet permission, string granteeName, bool grantGrant, string asRole);
    public sealed virtual void Revoke(ObjectPermissionSet permission, string granteeName);
    public void Revoke(ObjectPermissionSet permission, string granteeName, bool revokeGrant, bool cascade);
    public sealed virtual void Revoke(ObjectPermissionSet permission, string granteeName, bool revokeGrant, bool cascade, string asRole);
    public sealed virtual ObjectPermissionInfo[] EnumObjectPermissions();
    public sealed virtual ObjectPermissionInfo[] EnumObjectPermissions(string granteeName);
    public sealed virtual ObjectPermissionInfo[] EnumObjectPermissions(ObjectPermissionSet permissions);
    public sealed virtual ObjectPermissionInfo[] EnumObjectPermissions(string granteeName, ObjectPermissionSet permissions);
    public RemoteServiceBindingEvents get_Events();
}
[DefaultMemberAttribute("Item")]
public class Microsoft.SqlServer.Management.Smo.Broker.RemoteServiceBindingCollection : SimpleObjectCollectionBase {
    public ServiceBroker Parent { get; }
    public RemoteServiceBinding Item { get; }
    public RemoteServiceBinding Item { get; }
    internal RemoteServiceBindingCollection(SqlSmoObject parentInstance);
    public ServiceBroker get_Parent();
    public RemoteServiceBinding get_Item(int index);
    public RemoteServiceBinding get_Item(string name);
    public void CopyTo(RemoteServiceBinding[] array, int index);
    public RemoteServiceBinding ItemById(int id);
    protected virtual Type GetCollectionElementType();
    internal virtual SqlSmoObject GetCollectionElementInstance(ObjectKeyBase key, SqlSmoState state);
    public void Add(RemoteServiceBinding remoteServiceBinding);
    internal SqlSmoObject GetObjectByName(string name);
    internal virtual ObjectKeyBase CreateKeyFromUrn(Urn urn);
}
public class Microsoft.SqlServer.Management.Smo.Broker.RemoteServiceBindingEvents : object {
    private ObjectEventsWorker serverEventsWorker;
    private RemoteServiceBinding parent;
    internal RemoteServiceBindingEvents(RemoteServiceBinding parent);
    public ObjectEventSet GetEventSelection();
    public void SubscribeToEvents(ObjectEventSet events);
    public void SubscribeToEvents(ObjectEventSet events, ServerEventHandler eventHandler);
    public void UnsubscribeFromEvents(ObjectEventSet events);
    public void UnsubscribeAllEvents();
    public void StartEvents();
    public void StopEvents();
    public void add_ServerEvent(ServerEventHandler value);
    public void remove_ServerEvent(ServerEventHandler value);
    private void InitializeEvents();
}
[CLSCompliantAttribute("False")]
public class Microsoft.SqlServer.Management.Smo.Broker.RemoteServiceBindingExtender : SmoObjectExtender`1<RemoteServiceBinding> {
    [ExtendedPropertyAttribute]
public string Name { get; public set; }
    public RemoteServiceBindingExtender(RemoteServiceBinding remoteServiceBinding);
    public string get_Name();
    public void set_Name(string value);
    public sealed virtual ValidationState Validate(string methodName, Object[] arguments);
}
public class Microsoft.SqlServer.Management.Smo.Broker.ServiceBroker : SqlSmoObject {
    private MessageTypeCollection m_MessageTypes;
    private ServiceContractCollection m_ServiceContracts;
    private BrokerServiceCollection m_BrokerServices;
    private ServiceQueueCollection m_ServiceQueues;
    private ServiceRouteCollection m_ServiceRoutess;
    private RemoteServiceBindingCollection m_RemoteServiceBindings;
    private BrokerPriorityCollection m_BrokerPriorities;
    [SfcObjectAttribute("1")]
public Database Parent { get; internal set; }
    public static string UrnSuffix { get; }
    [SfcObjectAttribute("0", "0", "Microsoft.SqlServer.Management.Smo.Broker.MessageType")]
public MessageTypeCollection MessageTypes { get; }
    [SfcObjectAttribute("0", "0", "Microsoft.SqlServer.Management.Smo.Broker.ServiceContract")]
public ServiceContractCollection ServiceContracts { get; }
    [SfcObjectAttribute("0", "0", "Microsoft.SqlServer.Management.Smo.Broker.BrokerService")]
public BrokerServiceCollection Services { get; }
    [SfcObjectAttribute("0", "0", "Microsoft.SqlServer.Management.Smo.Broker.ServiceQueue")]
public ServiceQueueCollection Queues { get; }
    [SfcObjectAttribute("0", "0", "Microsoft.SqlServer.Management.Smo.Broker.ServiceRoute")]
public ServiceRouteCollection Routes { get; }
    [SfcObjectAttribute("0", "0", "Microsoft.SqlServer.Management.Smo.Broker.RemoteServiceBinding")]
public RemoteServiceBindingCollection RemoteServiceBindings { get; }
    [SfcObjectAttribute("0", "0", "Microsoft.SqlServer.Management.Smo.Broker.BrokerPriority")]
public BrokerPriorityCollection Priorities { get; }
    internal ServiceBroker(Database parentdb, ObjectKeyBase key, SqlSmoState state);
    public Database get_Parent();
    internal void set_Parent(Database value);
    internal virtual void ValidateParent(SqlSmoObject newParent);
    public static string get_UrnSuffix();
    protected sealed virtual void GetUrnRecursive(StringBuilder urnbuilder, UrnIdOption idOption);
    protected internal virtual string GetDBName();
    public MessageTypeCollection get_MessageTypes();
    public ServiceContractCollection get_ServiceContracts();
    public BrokerServiceCollection get_Services();
    public ServiceQueueCollection get_Queues();
    public ServiceRouteCollection get_Routes();
    public RemoteServiceBindingCollection get_RemoteServiceBindings();
    public BrokerPriorityCollection get_Priorities();
    internal virtual SqlPropertyMetadataProvider GetPropertyMetadataProvider();
}
[EvaluationModeAttribute("4")]
[PhysicalFacetAttribute]
[LocalizedPropertyResourcesAttribute("Microsoft.SqlServer.Management.Smo.Broker.BrokerLocalizableResources", "True")]
[TypeConverterAttribute("Microsoft.SqlServer.Management.Sdk.Sfc.LocalizableTypeConverter")]
public class Microsoft.SqlServer.Management.Smo.Broker.ServiceContract : BrokerObjectBase {
    private MessageTypeMappingCollection m_MessageTypeMappings;
    private ServiceContractEvents events;
    public static string UrnSuffix { get; }
    [SfcObjectAttribute("1", "1", "Microsoft.SqlServer.Management.Smo.Broker.MessageTypeMapping")]
public MessageTypeMappingCollection MessageTypeMappings { get; }
    [SfcObjectAttribute("1", "0", "Microsoft.SqlServer.Management.Smo.ExtendedProperty")]
public ExtendedPropertyCollection ExtendedProperties { get; }
    [SfcObjectAttribute("1")]
public ServiceBroker Parent { get; public set; }
    internal UserPermissionCollection Permissions { get; }
    [SfcPropertyAttribute("1024")]
public int ID { get; }
    [SfcPropertyAttribute("1024")]
public bool IsSystemObject { get; }
    [SfcPropertyAttribute("1024")]
[SfcReferenceAttribute("Microsoft.SqlServer.Management.Smo.User", "Server[@Name = '{0}']/Database[@Name = '{1}']/User[@Name = '{2}']", "Mono.Cecil.CustomAttributeArgument[]")]
[SfcReferenceAttribute("Microsoft.SqlServer.Management.Smo.DatabaseRole", "Server[@Name = '{0}']/Database[@Name = '{1}']/Role[@Name = '{2}']", "Mono.Cecil.CustomAttributeArgument[]")]
[SfcReferenceAttribute("Microsoft.SqlServer.Management.Smo.ApplicationRole", "Server[@Name = '{0}']/Database[@Name = '{1}']/ApplicationRole[@Name = '{2}']", "Mono.Cecil.CustomAttributeArgument[]")]
[CLSCompliantAttribute("False")]
public string Owner { get; public set; }
    public ServiceContractEvents Events { get; }
    internal ServiceContract(AbstractCollectionBase parentColl, ObjectKeyBase key, SqlSmoState state);
    public ServiceContract(ServiceBroker serviceBroker, string name);
    public static string get_UrnSuffix();
    public sealed virtual void Create();
    internal virtual void ScriptCreate(StringCollection queries, ScriptingPreferences sp);
    protected virtual void PostCreate();
    public sealed virtual void Drop();
    public sealed virtual void DropIfExists();
    internal virtual void ScriptDrop(StringCollection queries, ScriptingPreferences sp);
    public sealed virtual void Alter();
    internal virtual void ScriptAlter(StringCollection alterQuery, ScriptingPreferences sp);
    internal virtual PropagateInfo[] GetPropagateInfo(PropagateAction action);
    public MessageTypeMappingCollection get_MessageTypeMappings();
    public sealed virtual ExtendedPropertyCollection get_ExtendedProperties();
    protected virtual void MarkDropped();
    public ServiceBroker get_Parent();
    public void set_Parent(ServiceBroker value);
    internal virtual UserPermissionCollection get_Permissions();
    internal virtual SqlPropertyMetadataProvider GetPropertyMetadataProvider();
    public int get_ID();
    public bool get_IsSystemObject();
    public string get_Owner();
    public void set_Owner(string value);
    public sealed virtual void Deny(ObjectPermissionSet permission, String[] granteeNames);
    public sealed virtual void Deny(ObjectPermissionSet permission, String[] granteeNames, bool cascade);
    public sealed virtual void Grant(ObjectPermissionSet permission, String[] granteeNames);
    public sealed virtual void Grant(ObjectPermissionSet permission, String[] granteeNames, bool grantGrant);
    public sealed virtual void Grant(ObjectPermissionSet permission, String[] granteeNames, bool grantGrant, string asRole);
    public sealed virtual void Revoke(ObjectPermissionSet permission, String[] granteeNames);
    public sealed virtual void Revoke(ObjectPermissionSet permission, String[] granteeNames, bool revokeGrant, bool cascade);
    public void Revoke(ObjectPermissionSet permission, String[] granteeNames, bool revokeGrant, bool cascade, string asRole);
    public sealed virtual void Deny(ObjectPermissionSet permission, string granteeName);
    public sealed virtual void Deny(ObjectPermissionSet permission, string granteeName, bool cascade);
    public sealed virtual void Grant(ObjectPermissionSet permission, string granteeName);
    public sealed virtual void Grant(ObjectPermissionSet permission, string granteeName, bool grantGrant);
    public sealed virtual void Grant(ObjectPermissionSet permission, string granteeName, bool grantGrant, string asRole);
    public sealed virtual void Revoke(ObjectPermissionSet permission, string granteeName);
    public void Revoke(ObjectPermissionSet permission, string granteeName, bool revokeGrant, bool cascade);
    public sealed virtual void Revoke(ObjectPermissionSet permission, string granteeName, bool revokeGrant, bool cascade, string asRole);
    public sealed virtual ObjectPermissionInfo[] EnumObjectPermissions();
    public sealed virtual ObjectPermissionInfo[] EnumObjectPermissions(string granteeName);
    public sealed virtual ObjectPermissionInfo[] EnumObjectPermissions(ObjectPermissionSet permissions);
    public sealed virtual ObjectPermissionInfo[] EnumObjectPermissions(string granteeName, ObjectPermissionSet permissions);
    public ServiceContractEvents get_Events();
}
[DefaultMemberAttribute("Item")]
public class Microsoft.SqlServer.Management.Smo.Broker.ServiceContractCollection : SimpleObjectCollectionBase {
    private StringComparer m_comparer;
    internal StringComparer StringComparer { get; }
    public ServiceBroker Parent { get; }
    public ServiceContract Item { get; }
    public ServiceContract Item { get; }
    internal ServiceContractCollection(SqlSmoObject parentInstance, StringComparer comparer);
    internal virtual StringComparer get_StringComparer();
    public ServiceBroker get_Parent();
    public ServiceContract get_Item(int index);
    public ServiceContract get_Item(string name);
    public void CopyTo(ServiceContract[] array, int index);
    public ServiceContract ItemById(int id);
    protected virtual Type GetCollectionElementType();
    internal virtual SqlSmoObject GetCollectionElementInstance(ObjectKeyBase key, SqlSmoState state);
    public void Add(ServiceContract serviceContract);
    internal SqlSmoObject GetObjectByName(string name);
    internal virtual ObjectKeyBase CreateKeyFromUrn(Urn urn);
}
public class Microsoft.SqlServer.Management.Smo.Broker.ServiceContractEvents : object {
    private ObjectEventsWorker serverEventsWorker;
    private ServiceContract parent;
    internal ServiceContractEvents(ServiceContract parent);
    public ObjectEventSet GetEventSelection();
    public void SubscribeToEvents(ObjectEventSet events);
    public void SubscribeToEvents(ObjectEventSet events, ServerEventHandler eventHandler);
    public void UnsubscribeFromEvents(ObjectEventSet events);
    public void UnsubscribeAllEvents();
    public void StartEvents();
    public void StopEvents();
    public void add_ServerEvent(ServerEventHandler value);
    public void remove_ServerEvent(ServerEventHandler value);
    private void InitializeEvents();
}
[CLSCompliantAttribute("False")]
public class Microsoft.SqlServer.Management.Smo.Broker.ServiceContractExtender : SmoObjectExtender`1<ServiceContract> {
    [ExtendedPropertyAttribute]
public string Name { get; public set; }
    [ExtendedPropertyAttribute]
public MessageTypeMappingCollection MessageTypeMappings { get; }
    public ServiceContractExtender(ServiceContract serviceContract);
    public string get_Name();
    public void set_Name(string value);
    public MessageTypeMappingCollection get_MessageTypeMappings();
    public sealed virtual ValidationState Validate(string methodName, Object[] arguments);
}
public class Microsoft.SqlServer.Management.Smo.Broker.ServiceContractMapping : NamedSmoObject {
    public static string UrnSuffix { get; }
    [SfcKeyAttribute("0")]
[SfcPropertyAttribute("1280")]
[SfcReferenceAttribute("Microsoft.SqlServer.Management.Smo.Broker.ServiceContract", "Server[@Name = '{0}']/Database[@Name = '{1}']/ServiceBroker/ServiceContract[@Name='{2}']", "Mono.Cecil.CustomAttributeArgument[]")]
[CLSCompliantAttribute("False")]
public string Name { get; public set; }
    [SfcObjectAttribute("1")]
public BrokerService Parent { get; public set; }
    private bool Microsoft.SqlServer.Management.Sdk.Sfc.ISfcSupportsDesignMode.IsDesignMode { get; }
    internal ServiceContractMapping(AbstractCollectionBase parentColl, ObjectKeyBase key, SqlSmoState state);
    public ServiceContractMapping(BrokerService brokerService, string name);
    public static string get_UrnSuffix();
    public sealed virtual void MarkForDrop(bool dropOnAlter);
    public virtual string get_Name();
    public virtual void set_Name(string value);
    public BrokerService get_Parent();
    public void set_Parent(BrokerService value);
    private sealed virtual override bool Microsoft.SqlServer.Management.Sdk.Sfc.ISfcSupportsDesignMode.get_IsDesignMode();
    internal virtual SqlPropertyMetadataProvider GetPropertyMetadataProvider();
}
[DefaultMemberAttribute("Item")]
public class Microsoft.SqlServer.Management.Smo.Broker.ServiceContractMappingCollection : SimpleObjectCollectionBase {
    public BrokerService Parent { get; }
    public ServiceContractMapping Item { get; }
    public ServiceContractMapping Item { get; }
    internal ServiceContractMappingCollection(SqlSmoObject parentInstance);
    public BrokerService get_Parent();
    public ServiceContractMapping get_Item(int index);
    public ServiceContractMapping get_Item(string name);
    public void CopyTo(ServiceContractMapping[] array, int index);
    protected virtual Type GetCollectionElementType();
    internal virtual SqlSmoObject GetCollectionElementInstance(ObjectKeyBase key, SqlSmoState state);
    public void Remove(ServiceContractMapping serviceContractMapping);
    public void Remove(string name);
    public void Add(ServiceContractMapping serviceContractMapping);
    internal SqlSmoObject GetObjectByName(string name);
    internal virtual ObjectKeyBase CreateKeyFromUrn(Urn urn);
}
[EvaluationModeAttribute("4")]
[PhysicalFacetAttribute]
[LocalizedPropertyResourcesAttribute("Microsoft.SqlServer.Management.Smo.Broker.BrokerLocalizableResources", "True")]
[TypeConverterAttribute("Microsoft.SqlServer.Management.Sdk.Sfc.LocalizableTypeConverter")]
public class Microsoft.SqlServer.Management.Smo.Broker.ServiceQueue : ScriptSchemaObjectBase {
    private ServiceQueueEvents events;
    public static string UrnSuffix { get; }
    [SfcKeyAttribute("0")]
[SfcReferenceAttribute("Microsoft.SqlServer.Management.Smo.Schema", "Microsoft.SqlServer.Management.Smo.SchemaCustomResolver", "Resolve", "Mono.Cecil.CustomAttributeArgument[]")]
[SfcPropertyAttribute("1280")]
[CLSCompliantAttribute("False")]
public string Schema { get; public set; }
    [SfcKeyAttribute("1")]
[SfcPropertyAttribute("1280")]
public string Name { get; public set; }
    [SfcPropertyAttribute("1024")]
public double RowCountAsDouble { get; }
    [SfcObjectAttribute("1", "0", "Microsoft.SqlServer.Management.Smo.ExtendedProperty")]
public ExtendedPropertyCollection ExtendedProperties { get; }
    [SfcObjectAttribute("1")]
public ServiceBroker Parent { get; public set; }
    internal UserPermissionCollection Permissions { get; }
    private bool Microsoft.SqlServer.Management.Sdk.Sfc.ISfcSupportsDesignMode.IsDesignMode { get; }
    [SfcPropertyAttribute("1024")]
public ActivationExecutionContext ActivationExecutionContext { get; public set; }
    [SfcPropertyAttribute("1024")]
public DateTime CreateDate { get; }
    [SfcPropertyAttribute("1024")]
public DateTime DateLastModified { get; }
    [SfcPropertyAttribute("1024")]
[SfcReferenceAttribute("Microsoft.SqlServer.Management.Smo.User", "Server[@Name = '{0}']/Database[@Name = '{1}']/User[@Name = '{2}']", "Mono.Cecil.CustomAttributeArgument[]")]
[CLSCompliantAttribute("False")]
public string ExecutionContextPrincipal { get; public set; }
    [SfcPropertyAttribute("1024")]
public string FileGroup { get; public set; }
    [SfcPropertyAttribute("1024")]
public int ID { get; }
    [SfcPropertyAttribute("1024")]
public bool IsActivationEnabled { get; public set; }
    [SfcPropertyAttribute("1024")]
public bool IsEnqueueEnabled { get; public set; }
    [SfcPropertyAttribute("1024")]
public bool IsPoisonMessageHandlingEnabled { get; public set; }
    [SfcPropertyAttribute("1024")]
public bool IsRetentionEnabled { get; public set; }
    [SfcPropertyAttribute("1024")]
public bool IsSystemObject { get; }
    [SfcPropertyAttribute("1024")]
public short MaxReaders { get; public set; }
    [SfcPropertyAttribute("1024")]
public string ProcedureDatabase { get; public set; }
    [SfcPropertyAttribute("1024")]
[SfcReferenceAttribute("Microsoft.SqlServer.Management.Smo.StoredProcedure", "Server[@Name = '{0}']/Database[@Name = '{1}']/StoredProcedure[@Name='{2}' and @Schema='{3}']", "Mono.Cecil.CustomAttributeArgument[]")]
[CLSCompliantAttribute("False")]
public string ProcedureName { get; public set; }
    [SfcPropertyAttribute("1024", "dbo")]
public string ProcedureSchema { get; public set; }
    [SfcPropertyAttribute("1056")]
public long RowCount { get; }
    public ServiceQueueEvents Events { get; }
    internal ServiceQueue(AbstractCollectionBase parentColl, ObjectKeyBase key, SqlSmoState state);
    public ServiceQueue(ServiceBroker serviceBroker, string name);
    public ServiceQueue(ServiceBroker serviceBroker, string name, string schema);
    public static string get_UrnSuffix();
    public virtual string get_Schema();
    public virtual void set_Schema(string value);
    public virtual string get_Name();
    public virtual void set_Name(string value);
    public sealed virtual void Create();
    internal virtual void ScriptCreate(StringCollection queries, ScriptingPreferences sp);
    public sealed virtual void Drop();
    public sealed virtual void DropIfExists();
    private void GetDDL(StringCollection queries, ScriptingPreferences sp, bool bCreate);
    internal virtual void ScriptDrop(StringCollection queries, ScriptingPreferences sp);
    public void Reorganize();
    public void Reorganize(bool lobCompaction);
    private void ReorganizeImpl(Nullable`1<bool> lobCompaction);
    public void Rebuild();
    public void Rebuild(int maxDop);
    private void RebuildImpl(Nullable`1<int> maxDop);
    public void MoveTo(string fileGroup);
    public void MoveTo(string fileGroup, int maxDop);
    private void MoveToImpl(string fileGroup, Nullable`1<int> maxDop);
    public sealed virtual void Alter();
    internal virtual void ScriptAlter(StringCollection queries, ScriptingPreferences sp);
    public sealed virtual StringCollection Script();
    public sealed virtual StringCollection Script(ScriptingOptions scriptingOptions);
    public double get_RowCountAsDouble();
    public sealed virtual ExtendedPropertyCollection get_ExtendedProperties();
    public ServiceBroker get_Parent();
    public void set_Parent(ServiceBroker value);
    internal virtual UserPermissionCollection get_Permissions();
    private sealed virtual override bool Microsoft.SqlServer.Management.Sdk.Sfc.ISfcSupportsDesignMode.get_IsDesignMode();
    internal virtual SqlPropertyMetadataProvider GetPropertyMetadataProvider();
    public ActivationExecutionContext get_ActivationExecutionContext();
    public void set_ActivationExecutionContext(ActivationExecutionContext value);
    public DateTime get_CreateDate();
    public DateTime get_DateLastModified();
    public string get_ExecutionContextPrincipal();
    public void set_ExecutionContextPrincipal(string value);
    public string get_FileGroup();
    public void set_FileGroup(string value);
    public int get_ID();
    public bool get_IsActivationEnabled();
    public void set_IsActivationEnabled(bool value);
    public bool get_IsEnqueueEnabled();
    public void set_IsEnqueueEnabled(bool value);
    public bool get_IsPoisonMessageHandlingEnabled();
    public void set_IsPoisonMessageHandlingEnabled(bool value);
    public bool get_IsRetentionEnabled();
    public void set_IsRetentionEnabled(bool value);
    public bool get_IsSystemObject();
    public short get_MaxReaders();
    public void set_MaxReaders(short value);
    public string get_ProcedureDatabase();
    public void set_ProcedureDatabase(string value);
    public string get_ProcedureName();
    public void set_ProcedureName(string value);
    public string get_ProcedureSchema();
    public void set_ProcedureSchema(string value);
    public long get_RowCount();
    internal virtual object GetPropertyDefaultValue(string propname);
    public sealed virtual void Deny(ObjectPermissionSet permission, String[] granteeNames);
    public sealed virtual void Deny(ObjectPermissionSet permission, String[] granteeNames, bool cascade);
    public sealed virtual void Grant(ObjectPermissionSet permission, String[] granteeNames);
    public sealed virtual void Grant(ObjectPermissionSet permission, String[] granteeNames, bool grantGrant);
    public sealed virtual void Grant(ObjectPermissionSet permission, String[] granteeNames, bool grantGrant, string asRole);
    public sealed virtual void Revoke(ObjectPermissionSet permission, String[] granteeNames);
    public sealed virtual void Revoke(ObjectPermissionSet permission, String[] granteeNames, bool revokeGrant, bool cascade);
    public void Revoke(ObjectPermissionSet permission, String[] granteeNames, bool revokeGrant, bool cascade, string asRole);
    public sealed virtual void Deny(ObjectPermissionSet permission, string granteeName);
    public sealed virtual void Deny(ObjectPermissionSet permission, string granteeName, bool cascade);
    public sealed virtual void Grant(ObjectPermissionSet permission, string granteeName);
    public sealed virtual void Grant(ObjectPermissionSet permission, string granteeName, bool grantGrant);
    public sealed virtual void Grant(ObjectPermissionSet permission, string granteeName, bool grantGrant, string asRole);
    public sealed virtual void Revoke(ObjectPermissionSet permission, string granteeName);
    public void Revoke(ObjectPermissionSet permission, string granteeName, bool revokeGrant, bool cascade);
    public sealed virtual void Revoke(ObjectPermissionSet permission, string granteeName, bool revokeGrant, bool cascade, string asRole);
    public sealed virtual ObjectPermissionInfo[] EnumObjectPermissions();
    public sealed virtual ObjectPermissionInfo[] EnumObjectPermissions(string granteeName);
    public sealed virtual ObjectPermissionInfo[] EnumObjectPermissions(ObjectPermissionSet permissions);
    public sealed virtual ObjectPermissionInfo[] EnumObjectPermissions(string granteeName, ObjectPermissionSet permissions);
    public ServiceQueueEvents get_Events();
}
[DefaultMemberAttribute("Item")]
public class Microsoft.SqlServer.Management.Smo.Broker.ServiceQueueCollection : SchemaCollectionBase {
    public ServiceBroker Parent { get; }
    public ServiceQueue Item { get; }
    public ServiceQueue Item { get; }
    public ServiceQueue Item { get; }
    internal ServiceQueueCollection(SqlSmoObject parentInstance);
    public ServiceBroker get_Parent();
    public ServiceQueue get_Item(int index);
    public ServiceQueue get_Item(string name);
    public ServiceQueue get_Item(string name, string schema);
    public void CopyTo(ServiceQueue[] array, int index);
    public ServiceQueue ItemById(int id);
    protected virtual Type GetCollectionElementType();
    internal virtual SqlSmoObject GetCollectionElementInstance(ObjectKeyBase key, SqlSmoState state);
    public void Add(ServiceQueue serviceQueue);
    internal SqlSmoObject GetObjectByName(string name);
}
public class Microsoft.SqlServer.Management.Smo.Broker.ServiceQueueEvents : object {
    private ServiceQueueEventsWorker serverEventsWorker;
    private ServiceQueue parent;
    internal ServiceQueueEvents(ServiceQueue parent);
    public ServiceQueueEventSet GetEventSelection();
    public void SubscribeToEvents(ServiceQueueEventSet events);
    public void SubscribeToEvents(ServiceQueueEventSet events, ServerEventHandler eventHandler);
    public void UnsubscribeFromEvents(ServiceQueueEventSet events);
    public void UnsubscribeAllEvents();
    public void StartEvents();
    public void StopEvents();
    public void add_ServerEvent(ServerEventHandler value);
    public void remove_ServerEvent(ServerEventHandler value);
    private void InitializeEvents();
}
[CLSCompliantAttribute("False")]
public class Microsoft.SqlServer.Management.Smo.Broker.ServiceQueueExtender : SmoObjectExtender`1<ServiceQueue> {
    [ExtendedPropertyAttribute]
public string Name { get; public set; }
    [ExtendedPropertyAttribute]
public Version ServerVersion { get; }
    public ServiceQueueExtender(ServiceQueue serviceQueue);
    public string get_Name();
    public void set_Name(string value);
    public Version get_ServerVersion();
    public sealed virtual ValidationState Validate(string methodName, Object[] arguments);
}
[EvaluationModeAttribute("4")]
[PhysicalFacetAttribute]
[LocalizedPropertyResourcesAttribute("Microsoft.SqlServer.Management.Smo.Broker.BrokerLocalizableResources", "True")]
[TypeConverterAttribute("Microsoft.SqlServer.Management.Sdk.Sfc.LocalizableTypeConverter")]
public class Microsoft.SqlServer.Management.Smo.Broker.ServiceRoute : BrokerObjectBase {
    private ServiceRouteEvents events;
    public static string UrnSuffix { get; }
    [SfcObjectAttribute("1", "0", "Microsoft.SqlServer.Management.Smo.ExtendedProperty")]
public ExtendedPropertyCollection ExtendedProperties { get; }
    [SfcObjectAttribute("1")]
public ServiceBroker Parent { get; public set; }
    internal UserPermissionCollection Permissions { get; }
    [SfcPropertyAttribute("1024")]
public string Address { get; public set; }
    [SfcPropertyAttribute("1024")]
public string BrokerInstance { get; public set; }
    [SfcPropertyAttribute("1024")]
public DateTime ExpirationDate { get; public set; }
    [SfcPropertyAttribute("1024")]
public int ID { get; }
    [SfcPropertyAttribute("1024")]
public string MirrorAddress { get; public set; }
    [SfcPropertyAttribute("1280")]
[SfcReferenceAttribute("Microsoft.SqlServer.Management.Smo.User", "Server[@Name = '{0}']/Database[@Name = '{1}']/User[@Name = '{2}']", "Mono.Cecil.CustomAttributeArgument[]")]
[SfcReferenceAttribute("Microsoft.SqlServer.Management.Smo.DatabaseRole", "Server[@Name = '{0}']/Database[@Name = '{1}']/Role[@Name = '{2}']", "Mono.Cecil.CustomAttributeArgument[]")]
[SfcReferenceAttribute("Microsoft.SqlServer.Management.Smo.ApplicationRole", "Server[@Name = '{0}']/Database[@Name = '{1}']/ApplicationRole[@Name = '{2}']", "Mono.Cecil.CustomAttributeArgument[]")]
[CLSCompliantAttribute("False")]
public string Owner { get; public set; }
    [SfcPropertyAttribute("1024")]
public string RemoteService { get; public set; }
    public ServiceRouteEvents Events { get; }
    internal ServiceRoute(AbstractCollectionBase parentColl, ObjectKeyBase key, SqlSmoState state);
    public ServiceRoute(ServiceBroker serviceBroker, string name);
    public static string get_UrnSuffix();
    public sealed virtual void Create();
    private void GetDDL(StringCollection queries, ScriptingPreferences sp, bool bCreate);
    internal virtual void ScriptCreate(StringCollection queries, ScriptingPreferences sp);
    public sealed virtual void Alter();
    internal virtual void ScriptAlter(StringCollection queries, ScriptingPreferences sp);
    public sealed virtual void Drop();
    public sealed virtual void DropIfExists();
    internal virtual void ScriptDrop(StringCollection queries, ScriptingPreferences sp);
    public sealed virtual ExtendedPropertyCollection get_ExtendedProperties();
    public ServiceBroker get_Parent();
    public void set_Parent(ServiceBroker value);
    internal virtual UserPermissionCollection get_Permissions();
    internal virtual SqlPropertyMetadataProvider GetPropertyMetadataProvider();
    public string get_Address();
    public void set_Address(string value);
    public string get_BrokerInstance();
    public void set_BrokerInstance(string value);
    public DateTime get_ExpirationDate();
    public void set_ExpirationDate(DateTime value);
    public int get_ID();
    public string get_MirrorAddress();
    public void set_MirrorAddress(string value);
    public string get_Owner();
    public void set_Owner(string value);
    public string get_RemoteService();
    public void set_RemoteService(string value);
    internal virtual String[] GetNonAlterableProperties();
    public sealed virtual void Deny(ObjectPermissionSet permission, String[] granteeNames);
    public sealed virtual void Deny(ObjectPermissionSet permission, String[] granteeNames, bool cascade);
    public sealed virtual void Grant(ObjectPermissionSet permission, String[] granteeNames);
    public sealed virtual void Grant(ObjectPermissionSet permission, String[] granteeNames, bool grantGrant);
    public sealed virtual void Grant(ObjectPermissionSet permission, String[] granteeNames, bool grantGrant, string asRole);
    public sealed virtual void Revoke(ObjectPermissionSet permission, String[] granteeNames);
    public sealed virtual void Revoke(ObjectPermissionSet permission, String[] granteeNames, bool revokeGrant, bool cascade);
    public void Revoke(ObjectPermissionSet permission, String[] granteeNames, bool revokeGrant, bool cascade, string asRole);
    public sealed virtual void Deny(ObjectPermissionSet permission, string granteeName);
    public sealed virtual void Deny(ObjectPermissionSet permission, string granteeName, bool cascade);
    public sealed virtual void Grant(ObjectPermissionSet permission, string granteeName);
    public sealed virtual void Grant(ObjectPermissionSet permission, string granteeName, bool grantGrant);
    public sealed virtual void Grant(ObjectPermissionSet permission, string granteeName, bool grantGrant, string asRole);
    public sealed virtual void Revoke(ObjectPermissionSet permission, string granteeName);
    public void Revoke(ObjectPermissionSet permission, string granteeName, bool revokeGrant, bool cascade);
    public sealed virtual void Revoke(ObjectPermissionSet permission, string granteeName, bool revokeGrant, bool cascade, string asRole);
    public sealed virtual ObjectPermissionInfo[] EnumObjectPermissions();
    public sealed virtual ObjectPermissionInfo[] EnumObjectPermissions(string granteeName);
    public sealed virtual ObjectPermissionInfo[] EnumObjectPermissions(ObjectPermissionSet permissions);
    public sealed virtual ObjectPermissionInfo[] EnumObjectPermissions(string granteeName, ObjectPermissionSet permissions);
    public ServiceRouteEvents get_Events();
}
[DefaultMemberAttribute("Item")]
public class Microsoft.SqlServer.Management.Smo.Broker.ServiceRouteCollection : SimpleObjectCollectionBase {
    public ServiceBroker Parent { get; }
    public ServiceRoute Item { get; }
    public ServiceRoute Item { get; }
    internal ServiceRouteCollection(SqlSmoObject parentInstance);
    public ServiceBroker get_Parent();
    public ServiceRoute get_Item(int index);
    public ServiceRoute get_Item(string name);
    public void CopyTo(ServiceRoute[] array, int index);
    public ServiceRoute ItemById(int id);
    protected virtual Type GetCollectionElementType();
    internal virtual SqlSmoObject GetCollectionElementInstance(ObjectKeyBase key, SqlSmoState state);
    public void Add(ServiceRoute serviceRoute);
    internal SqlSmoObject GetObjectByName(string name);
    internal virtual ObjectKeyBase CreateKeyFromUrn(Urn urn);
}
public class Microsoft.SqlServer.Management.Smo.Broker.ServiceRouteEvents : object {
    private ObjectEventsWorker serverEventsWorker;
    private ServiceRoute parent;
    internal ServiceRouteEvents(ServiceRoute parent);
    public ObjectEventSet GetEventSelection();
    public void SubscribeToEvents(ObjectEventSet events);
    public void SubscribeToEvents(ObjectEventSet events, ServerEventHandler eventHandler);
    public void UnsubscribeFromEvents(ObjectEventSet events);
    public void UnsubscribeAllEvents();
    public void StartEvents();
    public void StopEvents();
    public void add_ServerEvent(ServerEventHandler value);
    public void remove_ServerEvent(ServerEventHandler value);
    private void InitializeEvents();
}
[CLSCompliantAttribute("False")]
public class Microsoft.SqlServer.Management.Smo.Broker.ServiceRouteExtender : SmoObjectExtender`1<ServiceRoute> {
    [ExtendedPropertyAttribute]
public string Name { get; public set; }
    public ServiceRouteExtender(ServiceRoute route);
    public string get_Name();
    public void set_Name(string value);
    public sealed virtual ValidationState Validate(string methodName, Object[] arguments);
}
[CompilerGeneratedAttribute]
internal class Microsoft.SqlServer.Management.Smo.BrokerLocalizableResources : object {
    public static CultureInfo Culture { get; public set; }
    public static string NamedSmoObject_NameName { get; }
    public static string NamedSmoObject_NameDesc { get; }
    public static string ScriptSchemaObjectBase_SchemaName { get; }
    public static string ScriptSchemaObjectBase_SchemaDesc { get; }
    public static string MessageType_Name { get; }
    public static string MessageType_Desc { get; }
    public static string MessageType_IDName { get; }
    public static string MessageType_IDDesc { get; }
    public static string MessageType_MessageTypeValidationName { get; }
    public static string MessageType_MessageTypeValidationDesc { get; }
    public static string MessageType_OwnerName { get; }
    public static string MessageType_OwnerDesc { get; }
    public static string MessageType_ValidationXmlSchemaCollectionName { get; }
    public static string MessageType_ValidationXmlSchemaCollectionDesc { get; }
    public static string MessageType_ValidationXmlSchemaCollectionSchemaName { get; }
    public static string MessageType_ValidationXmlSchemaCollectionSchemaDesc { get; }
    public static string MessageType_IsSystemObjectName { get; }
    public static string MessageType_IsSystemObjectDesc { get; }
    public static string ServiceContract_Name { get; }
    public static string ServiceContract_Desc { get; }
    public static string ServiceContract_OwnerName { get; }
    public static string ServiceContract_OwnerDesc { get; }
    public static string ServiceContract_IDName { get; }
    public static string ServiceContract_IDDesc { get; }
    public static string ServiceContract_IsSystemObjectName { get; }
    public static string ServiceContract_IsSystemObjectDesc { get; }
    public static string ServiceQueue_Name { get; }
    public static string ServiceQueue_Desc { get; }
    public static string ServiceQueue_IDName { get; }
    public static string ServiceQueue_IDDesc { get; }
    public static string ServiceQueue_ActivationExecutionContextName { get; }
    public static string ServiceQueue_ActivationExecutionContextDesc { get; }
    public static string ServiceQueue_CreateDateName { get; }
    public static string ServiceQueue_CreateDateDesc { get; }
    public static string ServiceQueue_DateLastModifiedName { get; }
    public static string ServiceQueue_DateLastModifiedDesc { get; }
    public static string ServiceQueue_ExecutionContextPrincipalName { get; }
    public static string ServiceQueue_ExecutionContextPrincipalDesc { get; }
    public static string ServiceQueue_FileGroupName { get; }
    public static string ServiceQueue_FileGroupDesc { get; }
    public static string ServiceQueue_IsActivationEnabledName { get; }
    public static string ServiceQueue_IsActivationEnabledDesc { get; }
    public static string ServiceQueue_IsEnqueueEnabledName { get; }
    public static string ServiceQueue_IsEnqueueEnabledDesc { get; }
    public static string ServiceQueue_IsRetentionEnabledName { get; }
    public static string ServiceQueue_IsRetentionEnabledDesc { get; }
    public static string ServiceQueue_IsPoisonMessageHandlingEnabledName { get; }
    public static string ServiceQueue_IsPoisonMessageHandlingEnabledDesc { get; }
    public static string ServiceQueue_MaxReadersName { get; }
    public static string ServiceQueue_MaxReadersDesc { get; }
    public static string ServiceQueue_ProcedureDatabaseName { get; }
    public static string ServiceQueue_ProcedureDatabaseDesc { get; }
    public static string ServiceQueue_ProcedureNameName { get; }
    public static string ServiceQueue_ProcedureNameDesc { get; }
    public static string ServiceQueue_ProcedureSchemaName { get; }
    public static string ServiceQueue_ProcedureSchemaDesc { get; }
    public static string ServiceQueue_RowCountName { get; }
    public static string ServiceQueue_RowCountDesc { get; }
    public static string ServiceQueue_IsSystemObjectName { get; }
    public static string ServiceQueue_IsSystemObjectDesc { get; }
    public static string ServiceQueue_SchemaName { get; }
    public static string ServiceQueue_SchemaDesc { get; }
    public static string BrokerService_Name { get; }
    public static string BrokerService_Desc { get; }
    public static string BrokerService_IDName { get; }
    public static string BrokerService_IDDesc { get; }
    public static string BrokerService_OwnerName { get; }
    public static string BrokerService_OwnerDesc { get; }
    public static string BrokerService_QueueNameName { get; }
    public static string BrokerService_QueueNameDesc { get; }
    public static string BrokerService_QueueSchemaName { get; }
    public static string BrokerService_QueueSchemaDesc { get; }
    public static string BrokerService_IsSystemObjectName { get; }
    public static string BrokerService_IsSystemObjectDesc { get; }
    public static string ServiceRoute_Name { get; }
    public static string ServiceRoute_Desc { get; }
    public static string ServiceRoute_IDName { get; }
    public static string ServiceRoute_IDDesc { get; }
    public static string ServiceRoute_AddressName { get; }
    public static string ServiceRoute_AddressDesc { get; }
    public static string ServiceRoute_BrokerInstanceName { get; }
    public static string ServiceRoute_BrokerInstanceDesc { get; }
    public static string ServiceRoute_ExpirationDateName { get; }
    public static string ServiceRoute_ExpirationDateDesc { get; }
    public static string ServiceRoute_MirrorAddressName { get; }
    public static string ServiceRoute_MirrorAddressDesc { get; }
    public static string ServiceRoute_OwnerName { get; }
    public static string ServiceRoute_OwnerDesc { get; }
    public static string ServiceRoute_RemoteServiceName { get; }
    public static string ServiceRoute_RemoteServiceDesc { get; }
    public static string RemoteServiceBinding_Name { get; }
    public static string RemoteServiceBinding_Desc { get; }
    public static string RemoteServiceBinding_IDName { get; }
    public static string RemoteServiceBinding_IDDesc { get; }
    public static string RemoteServiceBinding_OwnerName { get; }
    public static string RemoteServiceBinding_OwnerDesc { get; }
    public static string RemoteServiceBinding_CertificateUserName { get; }
    public static string RemoteServiceBinding_CertificateUserDesc { get; }
    public static string RemoteServiceBinding_IsAnonymousName { get; }
    public static string RemoteServiceBinding_IsAnonymousDesc { get; }
    public static string RemoteServiceBinding_RemoteServiceName { get; }
    public static string RemoteServiceBinding_RemoteServiceDesc { get; }
    public static string BrokerPriority_Name { get; }
    public static string BrokerPriority_Desc { get; }
    public static string BrokerPriority_IDName { get; }
    public static string BrokerPriority_IDDesc { get; }
    public static string BrokerPriority_ContractNameName { get; }
    public static string BrokerPriority_ContractNameDesc { get; }
    public static string BrokerPriority_LocalServiceNameName { get; }
    public static string BrokerPriority_LocalServiceNameDesc { get; }
    public static string BrokerPriority_RemoteServiceNameName { get; }
    public static string BrokerPriority_RemoteServiceNameDesc { get; }
    public static string BrokerPriority_PriorityLevelName { get; }
    public static string BrokerPriority_PriorityLevelDesc { get; }
    public static CultureInfo get_Culture();
    public static void set_Culture(CultureInfo value);
    public static string get_NamedSmoObject_NameName();
    public static string get_NamedSmoObject_NameDesc();
    public static string get_ScriptSchemaObjectBase_SchemaName();
    public static string get_ScriptSchemaObjectBase_SchemaDesc();
    public static string get_MessageType_Name();
    public static string get_MessageType_Desc();
    public static string get_MessageType_IDName();
    public static string get_MessageType_IDDesc();
    public static string get_MessageType_MessageTypeValidationName();
    public static string get_MessageType_MessageTypeValidationDesc();
    public static string get_MessageType_OwnerName();
    public static string get_MessageType_OwnerDesc();
    public static string get_MessageType_ValidationXmlSchemaCollectionName();
    public static string get_MessageType_ValidationXmlSchemaCollectionDesc();
    public static string get_MessageType_ValidationXmlSchemaCollectionSchemaName();
    public static string get_MessageType_ValidationXmlSchemaCollectionSchemaDesc();
    public static string get_MessageType_IsSystemObjectName();
    public static string get_MessageType_IsSystemObjectDesc();
    public static string get_ServiceContract_Name();
    public static string get_ServiceContract_Desc();
    public static string get_ServiceContract_OwnerName();
    public static string get_ServiceContract_OwnerDesc();
    public static string get_ServiceContract_IDName();
    public static string get_ServiceContract_IDDesc();
    public static string get_ServiceContract_IsSystemObjectName();
    public static string get_ServiceContract_IsSystemObjectDesc();
    public static string get_ServiceQueue_Name();
    public static string get_ServiceQueue_Desc();
    public static string get_ServiceQueue_IDName();
    public static string get_ServiceQueue_IDDesc();
    public static string get_ServiceQueue_ActivationExecutionContextName();
    public static string get_ServiceQueue_ActivationExecutionContextDesc();
    public static string get_ServiceQueue_CreateDateName();
    public static string get_ServiceQueue_CreateDateDesc();
    public static string get_ServiceQueue_DateLastModifiedName();
    public static string get_ServiceQueue_DateLastModifiedDesc();
    public static string get_ServiceQueue_ExecutionContextPrincipalName();
    public static string get_ServiceQueue_ExecutionContextPrincipalDesc();
    public static string get_ServiceQueue_FileGroupName();
    public static string get_ServiceQueue_FileGroupDesc();
    public static string get_ServiceQueue_IsActivationEnabledName();
    public static string get_ServiceQueue_IsActivationEnabledDesc();
    public static string get_ServiceQueue_IsEnqueueEnabledName();
    public static string get_ServiceQueue_IsEnqueueEnabledDesc();
    public static string get_ServiceQueue_IsRetentionEnabledName();
    public static string get_ServiceQueue_IsRetentionEnabledDesc();
    public static string get_ServiceQueue_IsPoisonMessageHandlingEnabledName();
    public static string get_ServiceQueue_IsPoisonMessageHandlingEnabledDesc();
    public static string get_ServiceQueue_MaxReadersName();
    public static string get_ServiceQueue_MaxReadersDesc();
    public static string get_ServiceQueue_ProcedureDatabaseName();
    public static string get_ServiceQueue_ProcedureDatabaseDesc();
    public static string get_ServiceQueue_ProcedureNameName();
    public static string get_ServiceQueue_ProcedureNameDesc();
    public static string get_ServiceQueue_ProcedureSchemaName();
    public static string get_ServiceQueue_ProcedureSchemaDesc();
    public static string get_ServiceQueue_RowCountName();
    public static string get_ServiceQueue_RowCountDesc();
    public static string get_ServiceQueue_IsSystemObjectName();
    public static string get_ServiceQueue_IsSystemObjectDesc();
    public static string get_ServiceQueue_SchemaName();
    public static string get_ServiceQueue_SchemaDesc();
    public static string get_BrokerService_Name();
    public static string get_BrokerService_Desc();
    public static string get_BrokerService_IDName();
    public static string get_BrokerService_IDDesc();
    public static string get_BrokerService_OwnerName();
    public static string get_BrokerService_OwnerDesc();
    public static string get_BrokerService_QueueNameName();
    public static string get_BrokerService_QueueNameDesc();
    public static string get_BrokerService_QueueSchemaName();
    public static string get_BrokerService_QueueSchemaDesc();
    public static string get_BrokerService_IsSystemObjectName();
    public static string get_BrokerService_IsSystemObjectDesc();
    public static string get_ServiceRoute_Name();
    public static string get_ServiceRoute_Desc();
    public static string get_ServiceRoute_IDName();
    public static string get_ServiceRoute_IDDesc();
    public static string get_ServiceRoute_AddressName();
    public static string get_ServiceRoute_AddressDesc();
    public static string get_ServiceRoute_BrokerInstanceName();
    public static string get_ServiceRoute_BrokerInstanceDesc();
    public static string get_ServiceRoute_ExpirationDateName();
    public static string get_ServiceRoute_ExpirationDateDesc();
    public static string get_ServiceRoute_MirrorAddressName();
    public static string get_ServiceRoute_MirrorAddressDesc();
    public static string get_ServiceRoute_OwnerName();
    public static string get_ServiceRoute_OwnerDesc();
    public static string get_ServiceRoute_RemoteServiceName();
    public static string get_ServiceRoute_RemoteServiceDesc();
    public static string get_RemoteServiceBinding_Name();
    public static string get_RemoteServiceBinding_Desc();
    public static string get_RemoteServiceBinding_IDName();
    public static string get_RemoteServiceBinding_IDDesc();
    public static string get_RemoteServiceBinding_OwnerName();
    public static string get_RemoteServiceBinding_OwnerDesc();
    public static string get_RemoteServiceBinding_CertificateUserName();
    public static string get_RemoteServiceBinding_CertificateUserDesc();
    public static string get_RemoteServiceBinding_IsAnonymousName();
    public static string get_RemoteServiceBinding_IsAnonymousDesc();
    public static string get_RemoteServiceBinding_RemoteServiceName();
    public static string get_RemoteServiceBinding_RemoteServiceDesc();
    public static string get_BrokerPriority_Name();
    public static string get_BrokerPriority_Desc();
    public static string get_BrokerPriority_IDName();
    public static string get_BrokerPriority_IDDesc();
    public static string get_BrokerPriority_ContractNameName();
    public static string get_BrokerPriority_ContractNameDesc();
    public static string get_BrokerPriority_LocalServiceNameName();
    public static string get_BrokerPriority_LocalServiceNameDesc();
    public static string get_BrokerPriority_RemoteServiceNameName();
    public static string get_BrokerPriority_RemoteServiceNameDesc();
    public static string get_BrokerPriority_PriorityLevelName();
    public static string get_BrokerPriority_PriorityLevelDesc();
}
[EvaluationModeAttribute("4")]
[PhysicalFacetAttribute]
[SfcElementAttribute("48")]
public class Microsoft.SqlServer.Management.Smo.Certificate : NamedSmoObject {
    private CertificateEvents events;
    public static string UrnSuffix { get; }
    [SfcObjectAttribute("1")]
public Database Parent { get; public set; }
    internal UserPermissionCollection Permissions { get; }
    private bool Microsoft.SqlServer.Management.Sdk.Sfc.ISfcSupportsDesignMode.IsDesignMode { get; }
    [SfcPropertyAttribute("3072")]
public bool ActiveForServiceBrokerDialog { get; public set; }
    [SfcPropertyAttribute("3328")]
public DateTime ExpirationDate { get; public set; }
    [SfcPropertyAttribute("3072")]
public int ID { get; }
    [SfcPropertyAttribute("3072")]
public string Issuer { get; }
    [SfcPropertyAttribute("1024")]
public DateTime LastBackupDate { get; }
    [SfcPropertyAttribute("3072")]
[SfcReferenceAttribute("Microsoft.SqlServer.Management.Smo.User", "Server[@Name = '{0}']/Database[@Name = '{1}']/User[@Name = '{2}']", "Mono.Cecil.CustomAttributeArgument[]")]
[SfcReferenceAttribute("Microsoft.SqlServer.Management.Smo.DatabaseRole", "Server[@Name = '{0}']/Database[@Name = '{1}']/Role[@Name = '{2}']", "Mono.Cecil.CustomAttributeArgument[]")]
[SfcReferenceAttribute("Microsoft.SqlServer.Management.Smo.ApplicationRole", "Server[@Name = '{0}']/Database[@Name = '{1}']/ApplicationRole[@Name = '{2}']", "Mono.Cecil.CustomAttributeArgument[]")]
[CLSCompliantAttribute("False")]
public string Owner { get; public set; }
    [SfcPropertyAttribute("3072")]
public PrivateKeyEncryptionType PrivateKeyEncryptionType { get; }
    [SfcPropertyAttribute("3072")]
public string Serial { get; }
    [SfcPropertyAttribute("3072")]
public Byte[] Sid { get; }
    [SfcPropertyAttribute("3328")]
public DateTime StartDate { get; public set; }
    [SfcPropertyAttribute("3328")]
public string Subject { get; public set; }
    [SfcPropertyAttribute("3072")]
public Byte[] Thumbprint { get; }
    public CertificateEvents Events { get; }
    internal Certificate(AbstractCollectionBase parentColl, ObjectKeyBase key, SqlSmoState state);
    public Certificate(Database database, string name);
    public sealed virtual void Create();
    public void Create(string encryptionPassword);
    public sealed virtual void Alter();
    public void AddPrivateKey(string privateKeyPath, string decryptionPassword);
    public void AddPrivateKey(string privateKeyPath, string decryptionPassword, string encryptionPassword);
    public sealed virtual void Drop();
    public void Create(string certificateSource, CertificateSourceType sourceType);
    public void Create(string certificateSource, CertificateSourceType sourceType, string privateKeyPath, string privateKeyDecryptionPassword);
    public void Create(string certificateSource, CertificateSourceType sourceType, string privateKeyPath, string privateKeyDecryptionPassword, string privateKeyEncryptionPassword);
    public void Export(string certificatePath);
    public void Export(string certificatePath, string privateKeyPath, string encryptionPassword);
    public void Export(string certificatePath, string privateKeyPath, string encryptionPassword, string decryptionPassword);
    public void ChangePrivateKeyPassword(string oldPassword, string newPassword);
    public void RemovePrivateKey();
    public static string get_UrnSuffix();
    private StringBuilder GetCertificateBuilder(string operationName);
    private StringBuilder GetCertificateBuilder(string operationName, ScriptingPreferences sp);
    private void CheckNullArgument(string arg, string argName);
    private bool AddToStringBuilderIfNotNull(StringBuilder sb, string prefix, object data, bool braket);
    private void CreateInternal(string encryptionPassword);
    internal virtual void ScriptAlter(StringCollection query, ScriptingPreferences sp);
    private void AddPrivateKeyInternal(string privateKeyPath, string decryptionPassword, string encryptionPassword);
    internal virtual void ScriptDrop(StringCollection dropQuery, ScriptingPreferences sp);
    private void ImportInternal(string certificateSource, CertificateSourceType sourceType, string privateKeyPath, string decryptionPassword, string encryptionPassword);
    private void ExportInternal(string certificatePath, string privateKeyPath, string encryptionPassword, string decryptionPassword);
    public Database get_Parent();
    public void set_Parent(Database value);
    internal virtual UserPermissionCollection get_Permissions();
    private sealed virtual override bool Microsoft.SqlServer.Management.Sdk.Sfc.ISfcSupportsDesignMode.get_IsDesignMode();
    internal virtual SqlPropertyMetadataProvider GetPropertyMetadataProvider();
    public bool get_ActiveForServiceBrokerDialog();
    public void set_ActiveForServiceBrokerDialog(bool value);
    public DateTime get_ExpirationDate();
    public void set_ExpirationDate(DateTime value);
    public int get_ID();
    public string get_Issuer();
    public DateTime get_LastBackupDate();
    public string get_Owner();
    public void set_Owner(string value);
    public PrivateKeyEncryptionType get_PrivateKeyEncryptionType();
    public string get_Serial();
    public Byte[] get_Sid();
    public DateTime get_StartDate();
    public void set_StartDate(DateTime value);
    public string get_Subject();
    public void set_Subject(string value);
    public Byte[] get_Thumbprint();
    internal virtual String[] GetNonAlterableProperties();
    public sealed virtual void Deny(ObjectPermissionSet permission, String[] granteeNames);
    public sealed virtual void Deny(ObjectPermissionSet permission, String[] granteeNames, bool cascade);
    public sealed virtual void Grant(ObjectPermissionSet permission, String[] granteeNames);
    public sealed virtual void Grant(ObjectPermissionSet permission, String[] granteeNames, bool grantGrant);
    public sealed virtual void Grant(ObjectPermissionSet permission, String[] granteeNames, bool grantGrant, string asRole);
    public sealed virtual void Revoke(ObjectPermissionSet permission, String[] granteeNames);
    public sealed virtual void Revoke(ObjectPermissionSet permission, String[] granteeNames, bool revokeGrant, bool cascade);
    public void Revoke(ObjectPermissionSet permission, String[] granteeNames, bool revokeGrant, bool cascade, string asRole);
    public sealed virtual void Deny(ObjectPermissionSet permission, string granteeName);
    public sealed virtual void Deny(ObjectPermissionSet permission, string granteeName, bool cascade);
    public sealed virtual void Grant(ObjectPermissionSet permission, string granteeName);
    public sealed virtual void Grant(ObjectPermissionSet permission, string granteeName, bool grantGrant);
    public sealed virtual void Grant(ObjectPermissionSet permission, string granteeName, bool grantGrant, string asRole);
    public sealed virtual void Revoke(ObjectPermissionSet permission, string granteeName);
    public void Revoke(ObjectPermissionSet permission, string granteeName, bool revokeGrant, bool cascade);
    public sealed virtual void Revoke(ObjectPermissionSet permission, string granteeName, bool revokeGrant, bool cascade, string asRole);
    public sealed virtual ObjectPermissionInfo[] EnumObjectPermissions();
    public sealed virtual ObjectPermissionInfo[] EnumObjectPermissions(string granteeName);
    public sealed virtual ObjectPermissionInfo[] EnumObjectPermissions(ObjectPermissionSet permissions);
    public sealed virtual ObjectPermissionInfo[] EnumObjectPermissions(string granteeName, ObjectPermissionSet permissions);
    public CertificateEvents get_Events();
}
[DefaultMemberAttribute("Item")]
public class Microsoft.SqlServer.Management.Smo.CertificateCollection : SimpleObjectCollectionBase {
    public Database Parent { get; }
    public Certificate Item { get; }
    public Certificate Item { get; }
    internal CertificateCollection(SqlSmoObject parentInstance);
    public Database get_Parent();
    public Certificate get_Item(int index);
    public Certificate get_Item(string name);
    public void CopyTo(Certificate[] array, int index);
    public Certificate ItemById(int id);
    protected virtual Type GetCollectionElementType();
    internal virtual SqlSmoObject GetCollectionElementInstance(ObjectKeyBase key, SqlSmoState state);
    public void Add(Certificate certificate);
    internal SqlSmoObject GetObjectByName(string name);
    internal virtual ObjectKeyBase CreateKeyFromUrn(Urn urn);
}
public class Microsoft.SqlServer.Management.Smo.CertificateEvents : object {
    private ObjectEventsWorker serverEventsWorker;
    private Certificate parent;
    internal CertificateEvents(Certificate parent);
    public ObjectEventSet GetEventSelection();
    public void SubscribeToEvents(ObjectEventSet events);
    public void SubscribeToEvents(ObjectEventSet events, ServerEventHandler eventHandler);
    public void UnsubscribeFromEvents(ObjectEventSet events);
    public void UnsubscribeAllEvents();
    public void StartEvents();
    public void StopEvents();
    public void add_ServerEvent(ServerEventHandler value);
    public void remove_ServerEvent(ServerEventHandler value);
    private void InitializeEvents();
}
public enum Microsoft.SqlServer.Management.Smo.CertificateSourceType : Enum {
    public int value__;
    public static CertificateSourceType File;
    public static CertificateSourceType Executable;
    public static CertificateSourceType SqlAssembly;
    public static CertificateSourceType Binary;
}
[SfcElementAttribute("48")]
public class Microsoft.SqlServer.Management.Smo.Check : ScriptNameObjectBase {
    public static string UrnSuffix { get; }
    [SfcKeyAttribute("0")]
[SfcPropertyAttribute("7424")]
public string Name { get; public set; }
    [SfcPropertyAttribute("3072")]
public bool IsSystemNamed { get; }
    [SfcObjectAttribute("1", "0", "Microsoft.SqlServer.Management.Smo.ExtendedProperty")]
public ExtendedPropertyCollection ExtendedProperties { get; }
    [SfcObjectAttribute("1", "32")]
[SfcParentAttribute("Table")]
[SfcParentAttribute("UserDefinedTableType")]
[SfcParentAttribute("UserDefinedFunction")]
public SqlSmoObject Parent { get; public set; }
    private bool Microsoft.SqlServer.Management.Sdk.Sfc.ISfcSupportsDesignMode.IsDesignMode { get; }
    [SfcPropertyAttribute("3072")]
public DateTime CreateDate { get; }
    [SfcPropertyAttribute("3072")]
public DateTime DateLastModified { get; }
    [SfcPropertyAttribute("3072")]
public int ID { get; }
    [SfcPropertyAttribute("7424")]
public bool IsChecked { get; public set; }
    [SfcPropertyAttribute("7168")]
public bool IsEnabled { get; public set; }
    [SfcPropertyAttribute("1024")]
public bool IsFileTableDefined { get; }
    [SfcPropertyAttribute("11520")]
public bool NotForReplication { get; public set; }
    [SfcPropertyAttribute("7456")]
public string Text { get; public set; }
    internal Check(AbstractCollectionBase parentColl, ObjectKeyBase key, SqlSmoState state);
    public Check(SqlSmoObject parent, string name);
    public static string get_UrnSuffix();
    public virtual string get_Name();
    public virtual void set_Name(string value);
    public bool get_IsSystemNamed();
    internal virtual void UpdateObjectState();
    public sealed virtual StringCollection Script();
    public sealed virtual StringCollection Script(ScriptingOptions scriptingOptions);
    public sealed virtual void Create();
    internal virtual void ScriptCreate(StringCollection queries, ScriptingPreferences sp);
    public sealed virtual void Alter();
    internal virtual void ScriptAlter(StringCollection queries, ScriptingPreferences sp);
    private string ScriptDdlBodyWithName(ScriptingPreferences sp);
    internal string ScriptDdlBodyWithoutName(ScriptingPreferences sp);
    internal string ScriptDdlBody(ScriptingPreferences sp);
    private string ScriptDdlBodyWorker(ScriptingPreferences sp, bool withConstraintName);
    internal virtual string GetScriptIncludeExists(ScriptingPreferences sp, string tableName, bool forCreate);
    public sealed virtual void Rename(string newname);
    internal virtual void ScriptRename(StringCollection renameQuery, ScriptingPreferences sp, string newName);
    public sealed virtual void Drop();
    public sealed virtual void DropIfExists();
    internal virtual void ScriptDrop(StringCollection queries, ScriptingPreferences sp);
    public sealed virtual void MarkForDrop(bool dropOnAlter);
    public sealed virtual ExtendedPropertyCollection get_ExtendedProperties();
    internal virtual PropagateInfo[] GetPropagateInfo(PropagateAction action);
    internal static String[] GetScriptFields(Type parentType, ServerVersion version, DatabaseEngineType databaseEngineType, DatabaseEngineEdition databaseEngineEdition, bool defaultTextMode);
    public SqlSmoObject get_Parent();
    public void set_Parent(SqlSmoObject value);
    private sealed virtual override bool Microsoft.SqlServer.Management.Sdk.Sfc.ISfcSupportsDesignMode.get_IsDesignMode();
    internal virtual SqlPropertyMetadataProvider GetPropertyMetadataProvider();
    public DateTime get_CreateDate();
    public DateTime get_DateLastModified();
    public int get_ID();
    public bool get_IsChecked();
    public void set_IsChecked(bool value);
    public bool get_IsEnabled();
    public void set_IsEnabled(bool value);
    public bool get_IsFileTableDefined();
    public bool get_NotForReplication();
    public void set_NotForReplication(bool value);
    public string get_Text();
    public void set_Text(string value);
    internal virtual String[] GetNonAlterableProperties();
}
[DefaultMemberAttribute("Item")]
public class Microsoft.SqlServer.Management.Smo.CheckCollection : SimpleObjectCollectionBase {
    public SqlSmoObject Parent { get; }
    public Check Item { get; }
    public Check Item { get; }
    internal CheckCollection(SqlSmoObject parentInstance);
    public SqlSmoObject get_Parent();
    public Check get_Item(int index);
    public Check get_Item(string name);
    public void CopyTo(Check[] array, int index);
    public Check ItemById(int id);
    protected virtual Type GetCollectionElementType();
    internal virtual SqlSmoObject GetCollectionElementInstance(ObjectKeyBase key, SqlSmoState state);
    public void Remove(Check check);
    public void Remove(string name);
    public void Add(Check check);
    internal SqlSmoObject GetObjectByName(string name);
    internal virtual ObjectKeyBase CreateKeyFromUrn(Urn urn);
}
internal class Microsoft.SqlServer.Management.Smo.ChildrenDiscoveryEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private Urn <Parent>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<Urn> <Children>k__BackingField;
    public Urn Parent { get; private set; }
    public IEnumerable`1<Urn> Children { get; private set; }
    internal ChildrenDiscoveryEventArgs(Urn parent, IEnumerable`1<Urn> children);
    [CompilerGeneratedAttribute]
public Urn get_Parent();
    [CompilerGeneratedAttribute]
private void set_Parent(Urn value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<Urn> get_Children();
    [CompilerGeneratedAttribute]
private void set_Children(IEnumerable`1<Urn> value);
}
internal class Microsoft.SqlServer.Management.Smo.ChildrenDiscoveryEventHandler : MulticastDelegate {
    public ChildrenDiscoveryEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, ChildrenDiscoveryEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, ChildrenDiscoveryEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class Microsoft.SqlServer.Management.Smo.CollationInfo : object {
    private static string DefaultCollationName;
    private static object syncObj;
    private string m_collationName;
    private int m_lcid;
    public static IDictionary`2<string, int> Collations { get; }
    public string Name { get; }
    public int LCID { get; }
    private CollationInfo(string name, int lcid);
    private static CollationInfo();
    public static IDictionary`2<string, int> get_Collations();
    public static CollationInfo GetCollationInfo(string collationName);
    public string get_Name();
    public int get_LCID();
    public virtual string ToString();
    private static CollationInfo GetCollationInfoInternal(string collationName);
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.Smo.CollationInfo/<GetCollationInfoCollection>d__15")]
private static IEnumerable`1<KeyValuePair`2<string, int>> GetCollationInfoCollection();
}
public class Microsoft.SqlServer.Management.Smo.CollectionNotAvailableException : SmoException {
    private string colname;
    private ServerVersion serverVersion;
    public SmoExceptionType SmoExceptionType { get; }
    public string Message { get; }
    public string CollectionName { get; }
    public ServerVersion ServerVersion { get; }
    public CollectionNotAvailableException(string message);
    public CollectionNotAvailableException(string message, Exception innerException);
    public CollectionNotAvailableException(string colname, ServerVersion serverVersion);
    private CollectionNotAvailableException(SerializationInfo info, StreamingContext context);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    public virtual SmoExceptionType get_SmoExceptionType();
    private void Init();
    public virtual string get_Message();
    public string get_CollectionName();
    public ServerVersion get_ServerVersion();
}
[SfcElementAttribute("48")]
public class Microsoft.SqlServer.Management.Smo.Column : ScriptNameObjectBase {
    private DataType dataType;
    private DefaultConstraint defaultConstraint;
    internal bool m_bDefaultInitialized;
    internal object oldRowGuidColValue;
    private XSchemaProps _XSchema;
    private XRuntimeProps _XRuntime;
    public static string UrnSuffix { get; }
    internal UserPermissionCollection Permissions { get; }
    internal SqlDataType UnderlyingSqlDataType { get; }
    [SfcObjectAttribute("1", "0", "Microsoft.SqlServer.Management.Smo.ExtendedProperty")]
public ExtendedPropertyCollection ExtendedProperties { get; }
    [SfcKeyAttribute("0")]
[SfcPropertyAttribute("7424")]
public string Name { get; public set; }
    [SfcPropertyAttribute("7168")]
[CLSCompliantAttribute("False")]
[SfcReferenceAttribute("Microsoft.SqlServer.Management.Smo.UserDefinedType", "Microsoft.SqlServer.Management.Smo.UserDefinedTypeResolver", "Resolve", "Mono.Cecil.CustomAttributeArgument[]")]
[SfcReferenceAttribute("Microsoft.SqlServer.Management.Smo.UserDefinedDataType", "Microsoft.SqlServer.Management.Smo.UserDefinedDataTypeResolver", "Resolve", "Mono.Cecil.CustomAttributeArgument[]")]
public DataType DataType { get; public set; }
    [SfcPropertyAttribute("3328")]
public bool IsEncrypted { get; }
    internal bool UserDefinedDefault { get; }
    [SfcObjectAttribute("2", "1", "32")]
public DefaultConstraint DefaultConstraint { get; internal set; }
    internal string ScriptName { get; internal set; }
    [SfcObjectAttribute("1", "32")]
[SfcParentAttribute("Table")]
[SfcParentAttribute("Statistic")]
[SfcParentAttribute("ForeignKey")]
[SfcParentAttribute("UserDefinedTableType")]
[SfcParentAttribute("UserDefinedFunction")]
[SfcParentAttribute("View")]
[SfcParentAttribute("Rule")]
[SfcParentAttribute("Default")]
public SqlSmoObject Parent { get; public set; }
    private bool Microsoft.SqlServer.Management.Sdk.Sfc.ISfcSupportsDesignMode.IsDesignMode { get; }
    private XSchemaProps XSchema { get; }
    private XRuntimeProps XRuntime { get; }
    [SfcPropertyAttribute("3072")]
public bool AnsiPaddingStatus { get; }
    [SfcPropertyAttribute("7168")]
public string Collation { get; public set; }
    [SfcPropertyAttribute("3328")]
public int ColumnEncryptionKeyID { get; public set; }
    [SfcPropertyAttribute("3328")]
public string ColumnEncryptionKeyName { get; public set; }
    [SfcPropertyAttribute("7424")]
public bool Computed { get; public set; }
    [SfcPropertyAttribute("7456")]
public string ComputedText { get; public set; }
    [SfcPropertyAttribute("3328")]
[SfcReferenceAttribute("Microsoft.SqlServer.Management.Smo.Default", "Server[@Name = '{0}']/Database[@Name = '{1}']/Default[@Name='{2}' and @Schema='{3}']", "Mono.Cecil.CustomAttributeArgument[]")]
[CLSCompliantAttribute("False")]
public string Default { get; public set; }
    [SfcPropertyAttribute("3328")]
public string DefaultConstraintName { get; public set; }
    [SfcPropertyAttribute("3328", "dbo")]
public string DefaultSchema { get; public set; }
    [SfcPropertyAttribute("3328")]
public string EncryptionAlgorithm { get; public set; }
    [SfcPropertyAttribute("3328")]
public ColumnEncryptionType EncryptionType { get; public set; }
    [SfcPropertyAttribute("3072")]
public GeneratedAlwaysType GeneratedAlwaysType { get; public set; }
    [SfcPropertyAttribute("3072")]
public GraphType GraphType { get; public set; }
    [SfcPropertyAttribute("3072")]
public int ID { get; }
    [SfcPropertyAttribute("7424")]
public bool Identity { get; public set; }
    [SfcPropertyAttribute("7456")]
public long IdentityIncrement { get; public set; }
    [SfcPropertyAttribute("7424")]
public decimal IdentityIncrementAsDecimal { get; public set; }
    [SfcPropertyAttribute("7456")]
public long IdentitySeed { get; public set; }
    [SfcPropertyAttribute("7424")]
public decimal IdentitySeedAsDecimal { get; public set; }
    [SfcPropertyAttribute("3072")]
public bool InPrimaryKey { get; }
    [SfcPropertyAttribute("7168")]
public bool IsClassified { get; }
    [SfcPropertyAttribute("7424")]
public bool IsColumnSet { get; public set; }
    [SfcPropertyAttribute("3072")]
public bool IsDeterministic { get; }
    [SfcPropertyAttribute("3072")]
public bool IsDroppedLedgerColumn { get; }
    [SfcPropertyAttribute("3328")]
public bool IsFileStream { get; public set; }
    [SfcPropertyAttribute("3072")]
public bool IsForeignKey { get; }
    [SfcPropertyAttribute("3072")]
public bool IsFullTextIndexed { get; }
    [SfcPropertyAttribute("3072")]
public bool IsHidden { get; public set; }
    [SfcPropertyAttribute("7168")]
public bool IsMasked { get; public set; }
    [SfcPropertyAttribute("7168")]
public bool IsPersisted { get; public set; }
    [SfcPropertyAttribute("3072")]
public bool IsPrecise { get; }
    [SfcPropertyAttribute("7168")]
public bool IsSparse { get; public set; }
    [SfcPropertyAttribute("7200")]
public string MaskingFunction { get; public set; }
    [SfcPropertyAttribute("11520")]
public bool NotForReplication { get; public set; }
    [SfcPropertyAttribute("7168")]
public bool Nullable { get; public set; }
    [SfcPropertyAttribute("7168")]
public bool RowGuidCol { get; public set; }
    [SfcPropertyAttribute("3328")]
[SfcReferenceAttribute("Microsoft.SqlServer.Management.Smo.Rule", "Server[@Name = '{0}']/Database[@Name = '{1}']/Rule[@Name='{2}' and @Schema='{3}']", "Mono.Cecil.CustomAttributeArgument[]")]
[CLSCompliantAttribute("False")]
public string Rule { get; public set; }
    [SfcPropertyAttribute("3328", "dbo")]
public string RuleSchema { get; public set; }
    [SfcPropertyAttribute("7200")]
public string SensitivityInformationTypeId { get; public set; }
    [SfcPropertyAttribute("7200")]
public string SensitivityInformationTypeName { get; public set; }
    [SfcPropertyAttribute("7200")]
public string SensitivityLabelId { get; public set; }
    [SfcPropertyAttribute("7200")]
public string SensitivityLabelName { get; public set; }
    [SfcPropertyAttribute("7200")]
public SensitivityRank SensitivityRank { get; public set; }
    [SfcPropertyAttribute("1024")]
public int StatisticalSemantics { get; }
    [SfcPropertyAttribute]
public string DistributionColumnName { get; public set; }
    [SfcPropertyAttribute]
public bool IsDistributedColumn { get; public set; }
    internal Column(AbstractCollectionBase parentColl, ObjectKeyBase key, SqlSmoState state);
    public Column(SqlSmoObject parent, string name, DataType dataType);
    public Column(SqlSmoObject parent, string name, DataType dataType, bool isFileStream);
    public Column(SqlSmoObject parent, string name);
    public static string get_UrnSuffix();
    public void RemoveClassification();
    public void ScriptDataClassification(StringCollection queries, ScriptingPreferences sp, bool forCreateScript);
    internal virtual UserPermissionCollection get_Permissions();
    internal virtual SqlSmoObject GetPermTargetObject();
    internal SqlDataType get_UnderlyingSqlDataType();
    private bool EmbedDefaultConstraints(ScriptingPreferences sp);
    public sealed virtual ExtendedPropertyCollection get_ExtendedProperties();
    public virtual string get_Name();
    public virtual void set_Name(string value);
    public DataType get_DataType();
    public void set_DataType(DataType value);
    public bool get_IsEncrypted();
    public sealed virtual void Create();
    internal virtual void ScriptCreate(StringCollection queries, ScriptingPreferences sp);
    internal virtual void ScriptDdl(StringCollection queries, ScriptingPreferences sp);
    private void ScriptDdlCreateImpl(StringBuilder sb, ScriptingPreferences sp);
    private void ScriptDefaultConstraint(StringBuilder sb, ScriptingPreferences sp);
    internal virtual string ScriptPermissionInfo(PermissionInfo pi, ScriptingPreferences sp);
    internal void VersionValidate(ScriptingPreferences sp);
    private SqlDataType GetNativeDataType();
    private void CheckSupportedType(ScriptingPreferences options);
    protected virtual void PostCreate();
    public sealed virtual void Drop();
    public sealed virtual void DropIfExists();
    internal virtual void ScriptDrop(StringCollection dropQuery, ScriptingPreferences sp);
    public sealed virtual void Alter();
    protected virtual bool IsObjectDirty();
    private bool AddedDefCnstr();
    private bool IsParentMemoryOptimized();
    private bool RequiresCollate(ScriptingPreferences sp);
    internal virtual void ScriptAlter(StringCollection alterQuery, ScriptingPreferences sp);
    private string GetAndValidateMaskingFunction(bool isMaskedColumn);
    public sealed virtual void Rename(string newname);
    internal virtual void ScriptRename(StringCollection renameQuery, ScriptingPreferences sp, string newName);
    internal void ScriptDefaultAndRuleBinding(StringCollection queries, ScriptingPreferences sp);
    public void BindRule(string ruleSchema, string ruleName);
    public void UnbindRule();
    public void BindDefault(string defaultSchema, string defaultName);
    public void UnbindDefault();
    public sealed virtual void MarkForDrop(bool dropOnAlter);
    internal bool get_UserDefinedDefault();
    private void InitDefaultConstraint(bool forScripting);
    public DefaultConstraint get_DefaultConstraint();
    internal void set_DefaultConstraint(DefaultConstraint value);
    internal DefaultConstraint GetDefaultConstraintBaseByName(string name);
    internal void InitializeDefault(IDataReader reader, int colIdx, bool forScripting);
    internal void RemoveDefaultConstraint();
    public DefaultConstraint AddDefaultConstraint();
    public DefaultConstraint AddDefaultConstraint(string name);
    public DataTable EnumUserPermissions(string username);
    internal virtual PropagateInfo[] GetPropagateInfo(PropagateAction action);
    public DataTable EnumForeignKeys();
    public DataTable EnumIndexes();
    public virtual void Refresh();
    public void UpdateStatistics();
    public void UpdateStatistics(StatisticsScanType scanType);
    public void UpdateStatistics(StatisticsScanType scanType, int sampleValue);
    public void UpdateStatistics(StatisticsScanType scanType, int sampleValue, bool recompute);
    private void ValidatePropertyChangeForText(Property prop, object value);
    internal virtual void ValidateProperty(Property prop, object value);
    internal virtual string get_ScriptName();
    internal virtual void set_ScriptName(string value);
    internal static String[] GetScriptFields(Type parentType, ServerVersion version, DatabaseEngineType databaseEngineType, DatabaseEngineEdition databaseEngineEdition, bool defaultTextMode);
    private bool CheckIsExternalTableColumn(ScriptingPreferences sp);
    internal bool IsGraphComputedColumn();
    internal bool IsGraphInternalColumn();
    internal bool DroppedLedgerColumn();
    public SqlSmoObject get_Parent();
    public void set_Parent(SqlSmoObject value);
    private sealed virtual override bool Microsoft.SqlServer.Management.Sdk.Sfc.ISfcSupportsDesignMode.get_IsDesignMode();
    internal virtual SqlPropertyMetadataProvider GetPropertyMetadataProvider();
    private sealed virtual override object Microsoft.SqlServer.Management.Smo.IPropertyDataDispatch.GetPropertyValue(int index);
    private sealed virtual override void Microsoft.SqlServer.Management.Smo.IPropertyDataDispatch.SetPropertyValue(int index, object value);
    private XSchemaProps get_XSchema();
    private XRuntimeProps get_XRuntime();
    public bool get_AnsiPaddingStatus();
    public string get_Collation();
    public void set_Collation(string value);
    public int get_ColumnEncryptionKeyID();
    public void set_ColumnEncryptionKeyID(int value);
    public string get_ColumnEncryptionKeyName();
    public void set_ColumnEncryptionKeyName(string value);
    public bool get_Computed();
    public void set_Computed(bool value);
    public string get_ComputedText();
    public void set_ComputedText(string value);
    public string get_Default();
    public void set_Default(string value);
    public string get_DefaultConstraintName();
    public void set_DefaultConstraintName(string value);
    public string get_DefaultSchema();
    public void set_DefaultSchema(string value);
    public string get_EncryptionAlgorithm();
    public void set_EncryptionAlgorithm(string value);
    public ColumnEncryptionType get_EncryptionType();
    public void set_EncryptionType(ColumnEncryptionType value);
    public GeneratedAlwaysType get_GeneratedAlwaysType();
    public void set_GeneratedAlwaysType(GeneratedAlwaysType value);
    public GraphType get_GraphType();
    public void set_GraphType(GraphType value);
    public int get_ID();
    public bool get_Identity();
    public void set_Identity(bool value);
    public long get_IdentityIncrement();
    public void set_IdentityIncrement(long value);
    public decimal get_IdentityIncrementAsDecimal();
    public void set_IdentityIncrementAsDecimal(decimal value);
    public long get_IdentitySeed();
    public void set_IdentitySeed(long value);
    public decimal get_IdentitySeedAsDecimal();
    public void set_IdentitySeedAsDecimal(decimal value);
    public bool get_InPrimaryKey();
    public bool get_IsClassified();
    public bool get_IsColumnSet();
    public void set_IsColumnSet(bool value);
    public bool get_IsDeterministic();
    public bool get_IsDroppedLedgerColumn();
    public bool get_IsFileStream();
    public void set_IsFileStream(bool value);
    public bool get_IsForeignKey();
    public bool get_IsFullTextIndexed();
    public bool get_IsHidden();
    public void set_IsHidden(bool value);
    public bool get_IsMasked();
    public void set_IsMasked(bool value);
    public bool get_IsPersisted();
    public void set_IsPersisted(bool value);
    public bool get_IsPrecise();
    public bool get_IsSparse();
    public void set_IsSparse(bool value);
    public string get_MaskingFunction();
    public void set_MaskingFunction(string value);
    public bool get_NotForReplication();
    public void set_NotForReplication(bool value);
    public bool get_Nullable();
    public void set_Nullable(bool value);
    public bool get_RowGuidCol();
    public void set_RowGuidCol(bool value);
    public string get_Rule();
    public void set_Rule(string value);
    public string get_RuleSchema();
    public void set_RuleSchema(string value);
    public string get_SensitivityInformationTypeId();
    public void set_SensitivityInformationTypeId(string value);
    public string get_SensitivityInformationTypeName();
    public void set_SensitivityInformationTypeName(string value);
    public string get_SensitivityLabelId();
    public void set_SensitivityLabelId(string value);
    public string get_SensitivityLabelName();
    public void set_SensitivityLabelName(string value);
    public SensitivityRank get_SensitivityRank();
    public void set_SensitivityRank(SensitivityRank value);
    public int get_StatisticalSemantics();
    public string get_DistributionColumnName();
    public void set_DistributionColumnName(string value);
    public bool get_IsDistributedColumn();
    public void set_IsDistributedColumn(bool value);
    internal virtual String[] GetNonAlterableProperties();
    internal virtual object GetPropertyDefaultValue(string propname);
}
[DefaultMemberAttribute("Item")]
public class Microsoft.SqlServer.Management.Smo.ColumnCollection : ParameterCollectionBase {
    public SqlSmoObject Parent { get; }
    public Column Item { get; }
    public Column Item { get; }
    internal ColumnCollection(SqlSmoObject parentInstance);
    public SqlSmoObject get_Parent();
    public Column get_Item(int index);
    public void CopyTo(Column[] array, int index);
    public Column get_Item(string name);
    protected virtual Type GetCollectionElementType();
    internal virtual SqlSmoObject GetCollectionElementInstance(ObjectKeyBase key, SqlSmoState state);
    public void Add(Column column);
    public void Add(Column column, string insertAtColumnName);
    public void Add(Column column, int insertAtPosition);
    public void Remove(Column column);
    public Column ItemById(int id);
}
[StateChangeEventAttribute("CREATE_COLUMN_ENCRYPTION_KEY", "COLUMN_ENCRYPTION_KEY", "COLUMN_ENCRYPTION_KEY")]
[StateChangeEventAttribute("ALTER_COLUMN_ENCRYPTION_KEY", "COLUMN_ENCRYPTION_KEY", "COLUMN_ENCRYPTION_KEY")]
[EvaluationModeAttribute("7")]
[PhysicalFacetAttribute]
[SfcElementAttribute("48")]
public class Microsoft.SqlServer.Management.Smo.ColumnEncryptionKey : ScriptNameObjectBase {
    private ColumnEncryptionKeyValueCollection m_cekValues;
    public static string UrnSuffix { get; }
    internal static string ParentType { get; }
    [SfcKeyAttribute("0")]
[SfcPropertyAttribute("3328")]
public string Name { get; public set; }
    [SfcObjectAttribute("1", "0", "Microsoft.SqlServer.Management.Smo.ColumnEncryptionKeyValue")]
public ColumnEncryptionKeyValueCollection ColumnEncryptionKeyValues { get; }
    [SfcObjectAttribute("1")]
public Database Parent { get; public set; }
    [SfcPropertyAttribute("3328")]
public DateTime CreateDate { get; }
    [SfcPropertyAttribute("3328")]
public DateTime DateLastModified { get; public set; }
    [SfcPropertyAttribute("3328")]
public int ID { get; }
    internal ColumnEncryptionKey(AbstractCollectionBase parentColl, ObjectKeyBase key, SqlSmoState state);
    public ColumnEncryptionKey(Database database, string name);
    public static string get_UrnSuffix();
    internal static string get_ParentType();
    public virtual string get_Name();
    public virtual void set_Name(string value);
    public ColumnEncryptionKeyValueCollection get_ColumnEncryptionKeyValues();
    public sealed virtual void Drop();
    public sealed virtual void DropIfExists();
    internal virtual void ScriptDrop(StringCollection dropQuery, ScriptingPreferences sp);
    public sealed virtual void Create();
    internal virtual void ScriptCreate(StringCollection createQuery, ScriptingPreferences sp);
    public sealed virtual void Alter();
    internal virtual void ScriptAlter(StringCollection alterQuery, ScriptingPreferences sp);
    public sealed virtual StringCollection Script();
    public sealed virtual StringCollection Script(ScriptingOptions scriptingOptions);
    internal virtual PropagateInfo[] GetPropagateInfo(PropagateAction action);
    public IList`1<Column> GetColumnsEncrypted();
    internal static String[] GetScriptFields(Type parentType, ServerVersion version, DatabaseEngineType databaseEngineType, DatabaseEngineEdition databaseEngineEdition, bool defaultTextMode);
    public Database get_Parent();
    public void set_Parent(Database value);
    internal virtual SqlPropertyMetadataProvider GetPropertyMetadataProvider();
    public DateTime get_CreateDate();
    public DateTime get_DateLastModified();
    public void set_DateLastModified(DateTime value);
    public int get_ID();
    internal virtual String[] GetNonAlterableProperties();
}
[DefaultMemberAttribute("Item")]
public class Microsoft.SqlServer.Management.Smo.ColumnEncryptionKeyCollection : SimpleObjectCollectionBase {
    public Database Parent { get; }
    public ColumnEncryptionKey Item { get; }
    public ColumnEncryptionKey Item { get; }
    internal ColumnEncryptionKeyCollection(SqlSmoObject parentInstance);
    public Database get_Parent();
    public ColumnEncryptionKey get_Item(int index);
    public ColumnEncryptionKey get_Item(string name);
    public void CopyTo(ColumnEncryptionKey[] array, int index);
    public ColumnEncryptionKey ItemById(int id);
    protected virtual Type GetCollectionElementType();
    internal virtual SqlSmoObject GetCollectionElementInstance(ObjectKeyBase key, SqlSmoState state);
    public void Add(ColumnEncryptionKey columnEncryptionKey);
    internal SqlSmoObject GetObjectByName(string name);
    internal virtual ObjectKeyBase CreateKeyFromUrn(Urn urn);
}
[StateChangeEventAttribute("CREATE_COLUMN_ENCRYPTION_KEY", "COLUMN_ENCRYPTION_KEY", "COLUMN ENCRYPTION KEY")]
[StateChangeEventAttribute("ALTER_COLUMN_ENCRYPTION_KEY", "COLUMN_ENCRYPTION_KEY", "COLUMN ENCRYPTION KEY")]
[EvaluationModeAttribute("7")]
[PhysicalFacetAttribute]
[SfcElementAttribute("48")]
public class Microsoft.SqlServer.Management.Smo.ColumnEncryptionKeyValue : SqlSmoObject {
    public static string UrnSuffix { get; }
    public string EncryptedValueAsSqlBinaryString { get; }
    [SfcObjectAttribute("1")]
public ColumnEncryptionKey Parent { get; }
    [SfcPropertyAttribute("3328")]
public string ColumnEncryptionKeyName { get; public set; }
    [SfcPropertyAttribute("3328")]
public int ColumnMasterKeyID { get; public set; }
    [SfcPropertyAttribute("3328")]
public string ColumnMasterKeyName { get; public set; }
    [SfcPropertyAttribute("3328")]
public Byte[] EncryptedValue { get; public set; }
    [SfcPropertyAttribute("3328")]
public string EncryptionAlgorithm { get; public set; }
    internal ColumnEncryptionKeyValue(AbstractCollectionBase parentColl, ObjectKeyBase key, SqlSmoState state);
    public ColumnEncryptionKeyValue(ColumnEncryptionKey parent, ColumnMasterKey cmk, string encryptionAlgorithm, Byte[] encryptedValue);
    public static string get_UrnSuffix();
    public string get_EncryptedValueAsSqlBinaryString();
    public sealed virtual void MarkForDrop(bool dropOnAlter);
    public sealed virtual void Drop();
    public sealed virtual void DropIfExists();
    internal virtual void ScriptDrop(StringCollection dropQuery, ScriptingPreferences sp);
    public sealed virtual void Create();
    internal virtual void ScriptCreate(StringCollection createQuery, ScriptingPreferences sp);
    internal static String[] GetScriptFields(Type parentType, ServerVersion version, DatabaseEngineType databaseEngineType, DatabaseEngineEdition databaseEngineEdition, bool defaultTextMode);
    public ColumnEncryptionKey get_Parent();
    internal virtual SqlPropertyMetadataProvider GetPropertyMetadataProvider();
    public string get_ColumnEncryptionKeyName();
    public void set_ColumnEncryptionKeyName(string value);
    public int get_ColumnMasterKeyID();
    public void set_ColumnMasterKeyID(int value);
    public string get_ColumnMasterKeyName();
    public void set_ColumnMasterKeyName(string value);
    public Byte[] get_EncryptedValue();
    public void set_EncryptedValue(Byte[] value);
    public string get_EncryptionAlgorithm();
    public void set_EncryptionAlgorithm(string value);
    internal virtual String[] GetNonAlterableProperties();
}
[DefaultMemberAttribute("Item")]
public class Microsoft.SqlServer.Management.Smo.ColumnEncryptionKeyValueCollection : ColumnEncryptionKeyValueCollectionBase {
    public ColumnEncryptionKey Parent { get; }
    public ColumnEncryptionKeyValue Item { get; }
    internal ColumnEncryptionKeyValueCollection(SqlSmoObject parentInstance);
    public ColumnEncryptionKey get_Parent();
    public ColumnEncryptionKeyValue get_Item(int index);
    public ColumnEncryptionKeyValue GetItemByColumnMasterKeyID(int ColumnMasterKeyID);
    public void Add(ColumnEncryptionKeyValue columnEncryptionKeyValue);
    public void CopyTo(ColumnEncryptionKeyValue[] array, int index);
    protected virtual Type GetCollectionElementType();
    internal virtual SqlSmoObject GetCollectionElementInstance(ObjectKeyBase key, SqlSmoState state);
}
public abstract class Microsoft.SqlServer.Management.Smo.ColumnEncryptionKeyValueCollectionBase : SortedListCollectionBase {
    internal ColumnEncryptionKeyValueCollectionBase(SqlSmoObject parent);
    protected virtual void InitInnerCollection();
    public bool Contains(int ColumnMasterKeyID);
    internal virtual ObjectKeyBase CreateKeyFromUrn(Urn urn);
}
internal class Microsoft.SqlServer.Management.Smo.ColumnEncryptionKeyValueObjectComparer : ObjectComparerBase {
    public virtual int Compare(object obj1, object obj2);
}
internal class Microsoft.SqlServer.Management.Smo.ColumnEncryptionKeyValueObjectKey : ObjectKeyBase {
    public int ColumnMasterKeyID;
    internal static StringCollection fields;
    public string UrnFilter { get; }
    public bool IsNull { get; }
    public ColumnEncryptionKeyValueObjectKey(int columnMasterKeyID);
    private static ColumnEncryptionKeyValueObjectKey();
    public virtual string ToString();
    public virtual string get_UrnFilter();
    public virtual StringCollection GetFieldNames();
    public virtual ObjectKeyBase Clone();
    public virtual bool get_IsNull();
    public virtual ObjectComparerBase GetComparer(IComparer stringComparer);
}
[StateChangeEventAttribute("CREATE_COLUMN_MASTER_KEY", "COLUMN_MASTER_KEY", "COLUMN_MASTER_KEY")]
[EvaluationModeAttribute("7")]
[PhysicalFacetAttribute]
[SfcElementAttribute("48")]
public class Microsoft.SqlServer.Management.Smo.ColumnMasterKey : ScriptNameObjectBase {
    public static string UrnSuffix { get; }
    internal static string ParentType { get; }
    [SfcKeyAttribute("0")]
[SfcPropertyAttribute("3328")]
public string Name { get; public set; }
    internal string SignatureAsSqlBinaryString { get; }
    [SfcObjectAttribute("1")]
public Database Parent { get; public set; }
    [SfcPropertyAttribute("3328")]
public bool AllowEnclaveComputations { get; public set; }
    [SfcPropertyAttribute("3328")]
public DateTime CreateDate { get; }
    [SfcPropertyAttribute("3328")]
public DateTime DateLastModified { get; public set; }
    [SfcPropertyAttribute("3328")]
public int ID { get; }
    [SfcPropertyAttribute("3328")]
public string KeyPath { get; public set; }
    [SfcPropertyAttribute("3328")]
public string KeyStoreProviderName { get; public set; }
    [SfcPropertyAttribute("3328")]
public Byte[] Signature { get; public set; }
    internal ColumnMasterKey(AbstractCollectionBase parentColl, ObjectKeyBase key, SqlSmoState state);
    public ColumnMasterKey(Database parent, string name, string keyStoreProviderName, string keyPath, bool allowEnclaveComputations, Byte[] signature);
    public ColumnMasterKey(Database parent, string name, string keyStoreProviderName, string keyPath);
    public ColumnMasterKey(Database database, string name);
    public static string get_UrnSuffix();
    internal static string get_ParentType();
    public virtual string get_Name();
    public virtual void set_Name(string value);
    internal string get_SignatureAsSqlBinaryString();
    public sealed virtual void Drop();
    public sealed virtual void DropIfExists();
    internal virtual void ScriptDrop(StringCollection dropQuery, ScriptingPreferences sp);
    public sealed virtual void Create();
    internal virtual void ScriptCreate(StringCollection createQuery, ScriptingPreferences sp);
    public sealed virtual StringCollection Script();
    public sealed virtual StringCollection Script(ScriptingOptions scriptingOptions);
    public IList`1<ColumnEncryptionKeyValue> GetColumnEncryptionKeyValuesEncrypted();
    internal static String[] GetScriptFields(Type parentType, ServerVersion version, DatabaseEngineType databaseEngineType, DatabaseEngineEdition databaseEngineEdition, bool defaultTextMode);
    public Database get_Parent();
    public void set_Parent(Database value);
    internal virtual SqlPropertyMetadataProvider GetPropertyMetadataProvider();
    public bool get_AllowEnclaveComputations();
    public void set_AllowEnclaveComputations(bool value);
    public DateTime get_CreateDate();
    public DateTime get_DateLastModified();
    public void set_DateLastModified(DateTime value);
    public int get_ID();
    public string get_KeyPath();
    public void set_KeyPath(string value);
    public string get_KeyStoreProviderName();
    public void set_KeyStoreProviderName(string value);
    public Byte[] get_Signature();
    public void set_Signature(Byte[] value);
    internal virtual String[] GetNonAlterableProperties();
}
[DefaultMemberAttribute("Item")]
public class Microsoft.SqlServer.Management.Smo.ColumnMasterKeyCollection : SimpleObjectCollectionBase {
    public Database Parent { get; }
    public ColumnMasterKey Item { get; }
    public ColumnMasterKey Item { get; }
    internal ColumnMasterKeyCollection(SqlSmoObject parentInstance);
    public Database get_Parent();
    public ColumnMasterKey get_Item(int index);
    public ColumnMasterKey get_Item(string name);
    public void CopyTo(ColumnMasterKey[] array, int index);
    public ColumnMasterKey ItemById(int id);
    protected virtual Type GetCollectionElementType();
    internal virtual SqlSmoObject GetCollectionElementInstance(ObjectKeyBase key, SqlSmoState state);
    public void Add(ColumnMasterKey columnMasterKey);
    internal SqlSmoObject GetObjectByName(string name);
    internal virtual ObjectKeyBase CreateKeyFromUrn(Urn urn);
}
public class Microsoft.SqlServer.Management.Smo.ConfigProperty : object {
    private ConfigurationBase m_configbase;
    private int m_iNumber;
    public string DisplayName { get; }
    public int Number { get; }
    public int Minimum { get; }
    public int Maximum { get; }
    public bool IsDynamic { get; }
    public bool IsAdvanced { get; }
    public string Description { get; }
    public int RunValue { get; }
    public int ConfigValue { get; public set; }
    internal ConfigProperty(ConfigurationBase configbase, int number);
    public string get_DisplayName();
    public int get_Number();
    public int get_Minimum();
    public int get_Maximum();
    public bool get_IsDynamic();
    public bool get_IsAdvanced();
    public string get_Description();
    public int get_RunValue();
    public int get_ConfigValue();
    public void set_ConfigValue(int value);
    private int GetIntProperty(string propertyName);
    private bool GetBoolProperty(string propertyName);
}
[DefaultMemberAttribute("Item")]
public class Microsoft.SqlServer.Management.Smo.ConfigPropertyCollection : object {
    private ConfigurationBase m_parent;
    public int Count { get; }
    public bool IsSynchronized { get; }
    public object SyncRoot { get; }
    public ConfigProperty Item { get; }
    public ConfigProperty Item { get; }
    internal ConfigPropertyCollection(ConfigurationBase parent);
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
    public void CopyTo(ConfigProperty[] array, int index);
    public sealed virtual IEnumerator GetEnumerator();
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsSynchronized();
    public sealed virtual object get_SyncRoot();
    public ConfigProperty get_Item(int index);
    public ConfigProperty get_Item(string name);
}
public class Microsoft.SqlServer.Management.Smo.Configuration : ConfigurationBase {
    private ConfigPropertyCollection m_prop;
    public ConfigPropertyCollection Properties { get; }
    public ConfigProperty ContainmentEnabled { get; }
    public ConfigProperty RecoveryInterval { get; }
    public ConfigProperty AllowUpdates { get; }
    public ConfigProperty UserConnections { get; }
    public ConfigProperty Locks { get; }
    public ConfigProperty OpenObjects { get; }
    public ConfigProperty FillFactor { get; }
    public ConfigProperty NestedTriggers { get; }
    public ConfigProperty RemoteAccess { get; }
    public ConfigProperty DefaultLanguage { get; }
    public ConfigProperty DefaultTraceEnabled { get; }
    public ConfigProperty CrossDBOwnershipChaining { get; }
    public ConfigProperty MaxWorkerThreads { get; }
    public ConfigProperty NetworkPacketSize { get; }
    public ConfigProperty ShowAdvancedOptions { get; }
    public ConfigProperty RemoteProcTrans { get; }
    public ConfigProperty C2AuditMode { get; }
    public ConfigProperty DefaultFullTextLanguage { get; }
    public ConfigProperty TwoDigitYearCutoff { get; }
    public ConfigProperty IndexCreateMemory { get; }
    public ConfigProperty PriorityBoost { get; }
    public ConfigProperty RemoteLoginTimeout { get; }
    public ConfigProperty RemoteQueryTimeout { get; }
    public ConfigProperty CursorThreshold { get; }
    public ConfigProperty SetWorkingSetSize { get; }
    public ConfigProperty UserOptions { get; }
    public ConfigProperty AffinityMask { get; }
    public ConfigProperty ReplicationMaxTextSize { get; }
    public ConfigProperty MediaRetention { get; }
    public ConfigProperty CostThresholdForParallelism { get; }
    public ConfigProperty MaxDegreeOfParallelism { get; }
    public ConfigProperty MinMemoryPerQuery { get; }
    public ConfigProperty QueryWait { get; }
    public ConfigProperty MinServerMemory { get; }
    public ConfigProperty MaxServerMemory { get; }
    public ConfigProperty QueryGovernorCostLimit { get; }
    public ConfigProperty LightweightPooling { get; }
    public ConfigProperty ScanForStartupProcedures { get; }
    [ObsoleteAttribute]
public ConfigProperty AweEnabled { get; }
    public ConfigProperty Affinity64Mask { get; }
    public ConfigProperty AffinityIOMask { get; }
    public ConfigProperty TransformNoiseWords { get; }
    public ConfigProperty PrecomputeRank { get; }
    public ConfigProperty ProtocolHandlerTimeout { get; }
    public ConfigProperty IsSqlClrEnabled { get; }
    public ConfigProperty RemoteDacConnectionsEnabled { get; }
    public ConfigProperty CommonCriteriaComplianceEnabled { get; }
    public ConfigProperty ExtensibleKeyManagementEnabled { get; }
    public ConfigProperty DefaultBackupCompression { get; }
    public ConfigProperty FilestreamAccessLevel { get; }
    public ConfigProperty OptimizeAdhocWorkloads { get; }
    public ConfigProperty DefaultBackupChecksum { get; }
    public ConfigProperty AgentXPsEnabled { get; }
    public ConfigProperty AdHocDistributedQueriesEnabled { get; }
    public ConfigProperty XPCmdShellEnabled { get; }
    public ConfigProperty SmoAndDmoXPsEnabled { get; }
    public ConfigProperty SqlMailXPsEnabled { get; }
    public ConfigProperty DatabaseMailEnabled { get; }
    public ConfigProperty OleAutomationProceduresEnabled { get; }
    public ConfigProperty ReplicationXPsEnabled { get; }
    public ConfigProperty WebXPsEnabled { get; }
    public ConfigProperty BlockedProcessThreshold { get; }
    public ConfigProperty Affinity64IOMask { get; }
    public ConfigProperty DisallowResultsFromTriggers { get; }
    public ConfigProperty FullTextCrawlBandwidthMin { get; }
    public ConfigProperty FullTextCrawlBandwidthMax { get; }
    public ConfigProperty FullTextNotifyBandwidthMin { get; }
    public ConfigProperty FullTextNotifyBandwidthMax { get; }
    public ConfigProperty InDoubtTransactionResolution { get; }
    public ConfigProperty FullTextCrawlRangeMax { get; }
    public ConfigProperty ServerTriggerRecursionEnabled { get; }
    public ConfigProperty UserInstanceTimeout { get; }
    public ConfigProperty UserInstancesEnabled { get; }
    public ConfigProperty RemoteDataArchiveEnabled { get; }
    internal Configuration(Server server);
    public ConfigPropertyCollection get_Properties();
    public ConfigProperty get_ContainmentEnabled();
    public ConfigProperty get_RecoveryInterval();
    public ConfigProperty get_AllowUpdates();
    public ConfigProperty get_UserConnections();
    public ConfigProperty get_Locks();
    public ConfigProperty get_OpenObjects();
    public ConfigProperty get_FillFactor();
    public ConfigProperty get_NestedTriggers();
    public ConfigProperty get_RemoteAccess();
    public ConfigProperty get_DefaultLanguage();
    public ConfigProperty get_DefaultTraceEnabled();
    public ConfigProperty get_CrossDBOwnershipChaining();
    public ConfigProperty get_MaxWorkerThreads();
    public ConfigProperty get_NetworkPacketSize();
    public ConfigProperty get_ShowAdvancedOptions();
    public ConfigProperty get_RemoteProcTrans();
    public ConfigProperty get_C2AuditMode();
    public ConfigProperty get_DefaultFullTextLanguage();
    public ConfigProperty get_TwoDigitYearCutoff();
    public ConfigProperty get_IndexCreateMemory();
    public ConfigProperty get_PriorityBoost();
    public ConfigProperty get_RemoteLoginTimeout();
    public ConfigProperty get_RemoteQueryTimeout();
    public ConfigProperty get_CursorThreshold();
    public ConfigProperty get_SetWorkingSetSize();
    public ConfigProperty get_UserOptions();
    public ConfigProperty get_AffinityMask();
    public ConfigProperty get_ReplicationMaxTextSize();
    public ConfigProperty get_MediaRetention();
    public ConfigProperty get_CostThresholdForParallelism();
    public ConfigProperty get_MaxDegreeOfParallelism();
    public ConfigProperty get_MinMemoryPerQuery();
    public ConfigProperty get_QueryWait();
    public ConfigProperty get_MinServerMemory();
    public ConfigProperty get_MaxServerMemory();
    public ConfigProperty get_QueryGovernorCostLimit();
    public ConfigProperty get_LightweightPooling();
    public ConfigProperty get_ScanForStartupProcedures();
    public ConfigProperty get_AweEnabled();
    public ConfigProperty get_Affinity64Mask();
    public ConfigProperty get_AffinityIOMask();
    public ConfigProperty get_TransformNoiseWords();
    public ConfigProperty get_PrecomputeRank();
    public ConfigProperty get_ProtocolHandlerTimeout();
    public ConfigProperty get_IsSqlClrEnabled();
    public ConfigProperty get_RemoteDacConnectionsEnabled();
    public ConfigProperty get_CommonCriteriaComplianceEnabled();
    public ConfigProperty get_ExtensibleKeyManagementEnabled();
    public ConfigProperty get_DefaultBackupCompression();
    public ConfigProperty get_FilestreamAccessLevel();
    public ConfigProperty get_OptimizeAdhocWorkloads();
    public ConfigProperty get_DefaultBackupChecksum();
    public ConfigProperty get_AgentXPsEnabled();
    public ConfigProperty get_AdHocDistributedQueriesEnabled();
    public ConfigProperty get_XPCmdShellEnabled();
    public ConfigProperty get_SmoAndDmoXPsEnabled();
    public ConfigProperty get_SqlMailXPsEnabled();
    public ConfigProperty get_DatabaseMailEnabled();
    public ConfigProperty get_OleAutomationProceduresEnabled();
    public ConfigProperty get_ReplicationXPsEnabled();
    public ConfigProperty get_WebXPsEnabled();
    public ConfigProperty get_BlockedProcessThreshold();
    public ConfigProperty get_Affinity64IOMask();
    public ConfigProperty get_DisallowResultsFromTriggers();
    public ConfigProperty get_FullTextCrawlBandwidthMin();
    public ConfigProperty get_FullTextCrawlBandwidthMax();
    public ConfigProperty get_FullTextNotifyBandwidthMin();
    public ConfigProperty get_FullTextNotifyBandwidthMax();
    public ConfigProperty get_InDoubtTransactionResolution();
    public ConfigProperty get_FullTextCrawlRangeMax();
    public ConfigProperty get_ServerTriggerRecursionEnabled();
    public ConfigProperty get_UserInstanceTimeout();
    public ConfigProperty get_UserInstancesEnabled();
    public ConfigProperty get_RemoteDataArchiveEnabled();
}
public class Microsoft.SqlServer.Management.Smo.ConfigurationBase : object {
    internal Server m_server;
    internal DataTable m_table;
    public static string UrnSuffix { get; }
    [SfcObjectAttribute("1")]
public Server Parent { get; }
    internal DataTable ConfigDataTable { get; }
    internal ConfigurationBase(Server server);
    public static string get_UrnSuffix();
    public Server get_Parent();
    internal DataTable get_ConfigDataTable();
    internal void PopulateDataTable();
    internal object GetConfigProperty(int iNumber, string sColumnName);
    internal bool SetConfigProperty(int iNumber, int iValue);
    private bool IsRowChanged(DataRow row);
    private void CleanRow(DataRow row);
    private bool ShowAdvancedOptionsIsSet();
    private string GetSchema();
    private void ScriptAlterWithStatistics(StringCollection configStrings, Boolean& bHasChangedOptions, Boolean& bHasAdvancedOptions, Boolean& bShowAdvancedOptionsModified);
    public void Refresh();
    internal void DoAlter(bool overrideValueChecking);
    internal void CleanObject();
    internal void ScriptAlter(StringCollection query, ScriptingPreferences sp, bool overrideValueChecking);
    public void Alter();
    public void Alter(bool overrideValueChecking);
}
public class Microsoft.SqlServer.Management.Smo.Cpu : object {
    private int id;
    private int numaNodeID;
    private int groupID;
    private bool affinityMask;
    private CpuCollection parent;
    public int ID { get; }
    public int NumaNodeID { get; }
    public int GroupID { get; }
    public bool AffinityMask { get; public set; }
    internal Cpu(int id, int numaNodeID, int groupID, bool affinityMask, CpuCollection parent);
    public int get_ID();
    public int get_NumaNodeID();
    public int get_GroupID();
    public bool get_AffinityMask();
    public void set_AffinityMask(bool value);
    internal void InitAffinityMask(bool value);
}
[DefaultMemberAttribute("Item")]
public class Microsoft.SqlServer.Management.Smo.CpuCollection : object {
    private AffinityInfoBase parent;
    private NumaCPUCollectionBase`1<Cpu> cpuCollection;
    internal SortedList cpuCol;
    internal bool setByUser;
    private ICollection iCol;
    private Dictionary`2<int, Cpu> cpuCollectionFromId;
    private int maxCpuId;
    private int minCpuId;
    public int Count { get; }
    public bool IsSynchronized { get; }
    public object SyncRoot { get; }
    public Cpu Item { get; }
    private Dictionary`2<int, Cpu> CpuCollectionFromId { get; }
    private int MaxCpuId { get; }
    private int MinCpuId { get; }
    public IEnumerable AffitinizedCPUs { get; }
    internal CpuCollection(AffinityInfoBase parent);
    public sealed virtual void CopyTo(Array array, int index);
    public void CopyTo(Cpu[] array, int index);
    public sealed virtual IEnumerator GetEnumerator();
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsSynchronized();
    public sealed virtual object get_SyncRoot();
    public Cpu get_Item(int index);
    public Cpu GetElementAt(int position);
    public Cpu GetByID(int cpuId);
    private Dictionary`2<int, Cpu> get_CpuCollectionFromId();
    private int get_MaxCpuId();
    private int get_MinCpuId();
    public void SetAffinityToAll(bool affinityMask);
    public void SetAffinityToRange(int startCpuId, int endCpuId, bool affinityMask);
    public void SetAffinityToRange(int startCpuId, int endCpuId, bool affinityMask, bool ignoreMissingIds);
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.Smo.CpuCollection/<get_AffitinizedCPUs>d__32")]
public IEnumerable get_AffitinizedCPUs();
    internal StringCollection AddCpuInDdl(StringBuilder sb);
}
internal class Microsoft.SqlServer.Management.Smo.CreatingObjectDictionary : object {
    private Dictionary`2<Urn, SqlSmoObject> objectsStored;
    private Server server;
    public CreatingObjectDictionary(Server server);
    public void Add(SqlSmoObject obj);
    public SqlSmoObject SmoObjectFromUrn(Urn urn);
    public bool ContainsKey(Urn urn);
}
[EvaluationModeAttribute("4")]
[PhysicalFacetAttribute]
[SfcElementAttribute("16")]
public class Microsoft.SqlServer.Management.Smo.Credential : NamedSmoObject {
    private SqlSecureString secret;
    public static string UrnSuffix { get; }
    [SfcObjectAttribute("1")]
public Server Parent { get; public set; }
    private bool Microsoft.SqlServer.Management.Sdk.Sfc.ISfcSupportsDesignMode.IsDesignMode { get; }
    [SfcPropertyAttribute("1024")]
public DateTime CreateDate { get; }
    [SfcPropertyAttribute("1024")]
public DateTime DateLastModified { get; }
    [SfcPropertyAttribute("1024")]
public int ID { get; }
    [SfcPropertyAttribute("1024")]
public string Identity { get; public set; }
    [SfcPropertyAttribute("1024", "None")]
public MappedClassType MappedClassType { get; public set; }
    [SfcPropertyAttribute("1024", "string.empty")]
[SfcReferenceAttribute("Microsoft.SqlServer.Management.Smo.CryptographicProvider", "Server[@Name = '{0}']/CryptographicProvider[@Name = '{1}']", "Mono.Cecil.CustomAttributeArgument[]")]
[CLSCompliantAttribute("False")]
public string ProviderName { get; public set; }
    internal Credential(AbstractCollectionBase parentColl, ObjectKeyBase key, SqlSmoState state);
    public Credential(Server server, string name);
    internal virtual String[] GetNonAlterableProperties();
    public sealed virtual void Create();
    public void Create(string identity);
    public void Create(string identity, string secret);
    public void Create(string identity, SecureString secret);
    internal virtual void ScriptCreate(StringCollection queries, ScriptingPreferences sp);
    public sealed virtual void Alter();
    public void Alter(string identity);
    public void Alter(string identity, string secret);
    public void Alter(string identity, SecureString secret);
    internal virtual void ScriptAlter(StringCollection queries, ScriptingPreferences sp);
    public sealed virtual void Drop();
    public sealed virtual void DropIfExists();
    internal virtual void ScriptDrop(StringCollection queries, ScriptingPreferences sp);
    public StringCollection EnumLogins();
    public static string get_UrnSuffix();
    private string CreateAlterScript(bool create, ScriptingPreferences sp);
    public Server get_Parent();
    public void set_Parent(Server value);
    private sealed virtual override bool Microsoft.SqlServer.Management.Sdk.Sfc.ISfcSupportsDesignMode.get_IsDesignMode();
    internal virtual SqlPropertyMetadataProvider GetPropertyMetadataProvider();
    public DateTime get_CreateDate();
    public DateTime get_DateLastModified();
    public int get_ID();
    public string get_Identity();
    public void set_Identity(string value);
    public MappedClassType get_MappedClassType();
    public void set_MappedClassType(MappedClassType value);
    public string get_ProviderName();
    public void set_ProviderName(string value);
    internal virtual object GetPropertyDefaultValue(string propname);
}
[DefaultMemberAttribute("Item")]
public class Microsoft.SqlServer.Management.Smo.CredentialCollection : SimpleObjectCollectionBase {
    public Server Parent { get; }
    public Credential Item { get; }
    public Credential Item { get; }
    internal CredentialCollection(SqlSmoObject parentInstance);
    public Server get_Parent();
    public Credential get_Item(int index);
    public Credential get_Item(string name);
    public void CopyTo(Credential[] array, int index);
    public Credential ItemById(int id);
    protected virtual Type GetCollectionElementType();
    internal virtual SqlSmoObject GetCollectionElementInstance(ObjectKeyBase key, SqlSmoState state);
    public void Add(Credential credential);
    internal SqlSmoObject GetObjectByName(string name);
    internal virtual ObjectKeyBase CreateKeyFromUrn(Urn urn);
}
[EvaluationModeAttribute("4")]
[PhysicalFacetAttribute]
[SfcElementAttribute("16")]
public class Microsoft.SqlServer.Management.Smo.CryptographicProvider : NamedSmoObject {
    public static string UrnSuffix { get; }
    [SfcKeyAttribute("0")]
[SfcPropertyAttribute("1280")]
public string Name { get; public set; }
    [SfcPropertyAttribute("1024")]
public Version Version { get; }
    [SfcPropertyAttribute("1024")]
public Version SqlCryptographicVersion { get; }
    [SfcObjectAttribute("1")]
public Server Parent { get; public set; }
    private bool Microsoft.SqlServer.Management.Sdk.Sfc.ISfcSupportsDesignMode.IsDesignMode { get; }
    [SfcPropertyAttribute("1024")]
public bool AsymmetricKeyExportable { get; }
    [SfcPropertyAttribute("1024")]
public bool AsymmetricKeyImportable { get; }
    [SfcPropertyAttribute("1024")]
public bool AsymmetricKeyPersistable { get; }
    [SfcPropertyAttribute("1024")]
public bool AsymmetricKeySupported { get; }
    [SfcPropertyAttribute("1024")]
public ProviderAuthenticationType AuthenticationType { get; }
    [SfcPropertyAttribute("1024")]
public string DllPath { get; public set; }
    [SfcPropertyAttribute("1024", "true")]
public bool Enabled { get; public set; }
    [SfcPropertyAttribute("1024")]
public int ID { get; }
    [SfcPropertyAttribute("1024")]
public Guid ProviderGuid { get; }
    [SfcPropertyAttribute("1024")]
public bool SymmetricKeyExportable { get; }
    [SfcPropertyAttribute("1024")]
public bool SymmetricKeyImportable { get; }
    [SfcPropertyAttribute("1024")]
public bool SymmetricKeyPersistable { get; }
    [SfcPropertyAttribute("1024")]
public bool SymmetricKeySupported { get; }
    internal CryptographicProvider(AbstractCollectionBase parentColl, ObjectKeyBase key, SqlSmoState state);
    public CryptographicProvider(Server server, string name);
    public static string get_UrnSuffix();
    public virtual string get_Name();
    public virtual void set_Name(string value);
    public Version get_Version();
    public Version get_SqlCryptographicVersion();
    public sealed virtual void Create();
    internal virtual void ScriptCreate(StringCollection queries, ScriptingPreferences sp);
    public sealed virtual void Alter();
    internal virtual void ScriptAlter(StringCollection queries, ScriptingPreferences sp);
    public sealed virtual void Drop();
    public sealed virtual void DropIfExists();
    internal virtual void ScriptDrop(StringCollection queries, ScriptingPreferences sp);
    public sealed virtual StringCollection Script();
    public sealed virtual StringCollection Script(ScriptingOptions scriptingOptions);
    public void Upgrade(string pathToDll);
    private void SetDllPath(string pathToDll);
    private void SetEnable(bool isEnabled);
    private string ScriptUpgrade(string pathToDll);
    public void Enable();
    public void Disable();
    private string ScriptEnableDisable(bool enable);
    public DataTable EnumEncryptionAlgorithms();
    public DataTable EnumProviderKeys();
    public Server get_Parent();
    public void set_Parent(Server value);
    private sealed virtual override bool Microsoft.SqlServer.Management.Sdk.Sfc.ISfcSupportsDesignMode.get_IsDesignMode();
    internal virtual SqlPropertyMetadataProvider GetPropertyMetadataProvider();
    public bool get_AsymmetricKeyExportable();
    public bool get_AsymmetricKeyImportable();
    public bool get_AsymmetricKeyPersistable();
    public bool get_AsymmetricKeySupported();
    public ProviderAuthenticationType get_AuthenticationType();
    public string get_DllPath();
    public void set_DllPath(string value);
    public bool get_Enabled();
    public void set_Enabled(bool value);
    public int get_ID();
    public Guid get_ProviderGuid();
    public bool get_SymmetricKeyExportable();
    public bool get_SymmetricKeyImportable();
    public bool get_SymmetricKeyPersistable();
    public bool get_SymmetricKeySupported();
    internal virtual object GetPropertyDefaultValue(string propname);
}
[DefaultMemberAttribute("Item")]
public class Microsoft.SqlServer.Management.Smo.CryptographicProviderCollection : SimpleObjectCollectionBase {
    public Server Parent { get; }
    public CryptographicProvider Item { get; }
    public CryptographicProvider Item { get; }
    internal CryptographicProviderCollection(SqlSmoObject parentInstance);
    public Server get_Parent();
    public CryptographicProvider get_Item(int index);
    public CryptographicProvider get_Item(string name);
    public void CopyTo(CryptographicProvider[] array, int index);
    public CryptographicProvider ItemById(int id);
    protected virtual Type GetCollectionElementType();
    internal virtual SqlSmoObject GetCollectionElementInstance(ObjectKeyBase key, SqlSmoState state);
    public void Add(CryptographicProvider cryptographicProvider);
    internal SqlSmoObject GetObjectByName(string name);
    internal virtual ObjectKeyBase CreateKeyFromUrn(Urn urn);
}
[EvaluationModeAttribute("4")]
[PhysicalFacetAttribute]
[SfcElementAttribute("48")]
public class Microsoft.SqlServer.Management.Smo.Database : ScriptNameObjectBase {
    private Nullable`1<DatabaseEngineEdition> m_edition;
    private object syncRoot;
    private ExecutionManager m_dbExecutionManager;
    private OptionTerminationStatement optionTerminationStatement;
    private bool bForAttach;
    private bool isDefaultLanguageModified;
    private bool isDefaultFulltextLanguageModified;
    private DatabaseOptions m_DatabaseOptions;
    private QueryStoreOptions m_QueryStoreOptions;
    private SynonymCollection m_Synonyms;
    private SequenceCollection m_Sequences;
    private TableCollection m_Tables;
    private SensitivityClassificationCollection m_SensitivityClassifications;
    private DatabaseScopedCredentialCollection m_DatabaseScopedCredentials;
    private WorkloadManagementWorkloadClassifierCollection m_WlmWorkloadClassifiers;
    private StoredProcedureCollection m_StoredProcedures;
    private SqlAssemblyCollection m_SqlAssemblies;
    private ExternalLanguageCollection m_ExternalLanguages;
    private ExternalLibraryCollection m_ExternalLibraries;
    private UserDefinedTypeCollection m_UserDefinedTypes;
    private UserDefinedAggregateCollection m_UserDefinedAggregates;
    private FullTextCatalogCollection m_FullTextCatalogs;
    private FullTextStopListCollection m_FullTextStopLists;
    private SearchPropertyListCollection m_SearchPropertyLists;
    private SecurityPolicyCollection m_SecurityPolicies;
    private DatabaseScopedConfigurationCollection m_DatabaseScopedConfigurations;
    private ExternalDataSourceCollection m_ExternalDataSources;
    private ExternalFileFormatCollection m_ExternalFileFormats;
    private ExternalStreamCollection m_ExternalStreams;
    private ExternalStreamingJobCollection m_ExternalStreamingJobs;
    private CertificateCollection certificateCollection;
    private ColumnMasterKeyCollection m_ColumnMasterKeys;
    private ColumnEncryptionKeyCollection m_ColumnEncryptionKeys;
    private SymmetricKeyCollection symmetricKeyCollection;
    private AsymmetricKeyCollection asymmetricKeyCollection;
    private DatabaseEncryptionKey m_DatabaseEncryptionKey;
    internal bool databaseEncryptionKeyInitialized;
    private ExtendedStoredProcedureCollection m_ExtendedStoredProcedures;
    private UserDefinedFunctionCollection m_UserDefinedFunctions;
    private ViewCollection m_Views;
    private UserCollection m_Users;
    private DatabaseAuditSpecificationCollection databaseAuditSpecifications;
    private SchemaCollection m_Schemas;
    private DatabaseRoleCollection m_Roles;
    private ApplicationRoleCollection m_ApplcicationRoles;
    private BackupSetCollection m_BackupSets;
    private LogFileCollection m_LogFiles;
    private FileGroupCollection m_FileGroups;
    private PlanGuideCollection m_PlanGuides;
    private DefaultCollection m_Defaults;
    private RuleCollection m_Rules;
    private UserDefinedDataTypeCollection m_UserDefinedDataTypes;
    private UserDefinedTableTypeCollection m_UserDefinedTableTypes;
    private XmlSchemaCollectionCollection m_XmlSchemaCollections;
    private PartitionFunctionCollection m_PartitionFunctions;
    private PartitionSchemeCollection m_PartitionSchemes;
    private MasterKey masterKey;
    internal bool masterKeyInitialized;
    private DatabaseDdlTriggerCollection databaseDdlTriggerCollection;
    private DefaultLanguage defaultLanguageObj;
    private DefaultLanguage defaultFullTextLanguageObj;
    private WorkloadManagementWorkloadGroupCollection m_WorkloadManagementWorkloadGroups;
    private ServiceBroker m_ServiceBroker;
    private XSchemaProps _XSchema;
    private XRuntimeProps _XRuntime;
    private DatabaseEvents events;
    internal ExecutionManager DatabaseExecutionManager { get; }
    public ExecutionManager ExecutionManager { get; }
    public DatabaseEngineType DatabaseEngineType { get; }
    public DatabaseEngineEdition DatabaseEngineEdition { get; }
    public static string UrnSuffix { get; }
    [SfcKeyAttribute("0")]
[SfcPropertyAttribute("3328")]
public string Name { get; public set; }
    internal UserPermissionCollection Permissions { get; }
    public bool WarnOnRename { get; }
    [SfcPropertyAttribute("11264")]
public bool DatabaseOwnershipChaining { get; public set; }
    [SfcPropertyAttribute("2304")]
public CatalogCollationType CatalogCollation { get; public set; }
    [SfcObjectAttribute("1", "0", "Microsoft.SqlServer.Management.Smo.ExtendedProperty")]
public ExtendedPropertyCollection ExtendedProperties { get; }
    [SfcObjectAttribute("2", "0")]
public DatabaseOptions DatabaseOptions { get; }
    [SfcObjectAttribute("2", "0")]
public QueryStoreOptions QueryStoreOptions { get; }
    [SfcObjectAttribute("0", "0", "Microsoft.SqlServer.Management.Smo.Synonym", "32")]
public SynonymCollection Synonyms { get; }
    [SfcObjectAttribute("0", "0", "Microsoft.SqlServer.Management.Smo.Sequence")]
public SequenceCollection Sequences { get; }
    [SfcObjectAttribute("0", "0", "Microsoft.SqlServer.Management.Smo.Table", "32")]
public TableCollection Tables { get; }
    [SfcObjectAttribute("0", "0", "Microsoft.SqlServer.Management.Smo.SensitivityClassification")]
public SensitivityClassificationCollection SensitivityClassifications { get; }
    [SfcObjectAttribute("0", "0", "Microsoft.SqlServer.Management.Smo.DatabaseScopedCredential")]
public DatabaseScopedCredentialCollection DatabaseScopedCredentials { get; }
    [SfcObjectAttribute("0", "0", "Microsoft.SqlServer.Management.Smo.WorkloadManagementWorkloadClassifier")]
public WorkloadManagementWorkloadClassifierCollection WorkloadManagementWorkloadClassifiers { get; }
    [SfcObjectAttribute("0", "0", "Microsoft.SqlServer.Management.Smo.StoredProcedure", "32")]
public StoredProcedureCollection StoredProcedures { get; }
    [SfcObjectAttribute("0", "0", "Microsoft.SqlServer.Management.Smo.SqlAssembly")]
public SqlAssemblyCollection Assemblies { get; }
    [SfcObjectAttribute("0", "0", "Microsoft.SqlServer.Management.Smo.ExternalLanguage")]
public ExternalLanguageCollection ExternalLanguages { get; }
    [SfcObjectAttribute("0", "0", "Microsoft.SqlServer.Management.Smo.ExternalLibrary")]
public ExternalLibraryCollection ExternalLibraries { get; }
    [SfcObjectAttribute("0", "0", "Microsoft.SqlServer.Management.Smo.UserDefinedType")]
public UserDefinedTypeCollection UserDefinedTypes { get; }
    [SfcObjectAttribute("0", "0", "Microsoft.SqlServer.Management.Smo.UserDefinedAggregate")]
public UserDefinedAggregateCollection UserDefinedAggregates { get; }
    [SfcObjectAttribute("1", "0", "Microsoft.SqlServer.Management.Smo.FullTextCatalog")]
public FullTextCatalogCollection FullTextCatalogs { get; }
    [SfcObjectAttribute("1", "0", "Microsoft.SqlServer.Management.Smo.FullTextStopList")]
public FullTextStopListCollection FullTextStopLists { get; }
    [SfcObjectAttribute("0", "0", "Microsoft.SqlServer.Management.Smo.SearchPropertyList")]
public SearchPropertyListCollection SearchPropertyLists { get; }
    [SfcObjectAttribute("0", "0", "Microsoft.SqlServer.Management.Smo.SecurityPolicy")]
public SecurityPolicyCollection SecurityPolicies { get; }
    [SfcObjectAttribute("0", "0", "Microsoft.SqlServer.Management.Smo.DatabaseScopedConfiguration")]
public DatabaseScopedConfigurationCollection DatabaseScopedConfigurations { get; }
    [SfcObjectAttribute("0", "0", "Microsoft.SqlServer.Management.Smo.ExternalDataSource")]
public ExternalDataSourceCollection ExternalDataSources { get; }
    [SfcObjectAttribute("0", "0", "Microsoft.SqlServer.Management.Smo.ExternalFileFormat")]
public ExternalFileFormatCollection ExternalFileFormats { get; }
    [SfcObjectAttribute("0", "0", "Microsoft.SqlServer.Management.Smo.ExternalStream")]
[SfcIgnoreAttribute]
public ExternalStreamCollection ExternalStreams { get; }
    [SfcObjectAttribute("0", "0", "Microsoft.SqlServer.Management.Smo.ExternalStreamingJob")]
[SfcIgnoreAttribute]
public ExternalStreamingJobCollection ExternalStreamingJobs { get; }
    [SfcObjectAttribute("0", "0", "Microsoft.SqlServer.Management.Smo.Certificate")]
public CertificateCollection Certificates { get; }
    [SfcObjectAttribute("0", "0", "Microsoft.SqlServer.Management.Smo.ColumnMasterKey")]
public ColumnMasterKeyCollection ColumnMasterKeys { get; }
    [SfcObjectAttribute("0", "0", "Microsoft.SqlServer.Management.Smo.ColumnEncryptionKey")]
public ColumnEncryptionKeyCollection ColumnEncryptionKeys { get; }
    [SfcObjectAttribute("0", "0", "Microsoft.SqlServer.Management.Smo.SymmetricKey")]
public SymmetricKeyCollection SymmetricKeys { get; }
    [SfcObjectAttribute("0", "0", "Microsoft.SqlServer.Management.Smo.AsymmetricKey")]
public AsymmetricKeyCollection AsymmetricKeys { get; }
    [SfcObjectAttribute("2", "0")]
public DatabaseEncryptionKey DatabaseEncryptionKey { get; }
    [SfcObjectAttribute("0", "0", "Microsoft.SqlServer.Management.Smo.ExtendedStoredProcedure")]
public ExtendedStoredProcedureCollection ExtendedStoredProcedures { get; }
    [SfcObjectAttribute("0", "0", "Microsoft.SqlServer.Management.Smo.UserDefinedFunction", "32")]
public UserDefinedFunctionCollection UserDefinedFunctions { get; }
    [SfcObjectAttribute("0", "0", "Microsoft.SqlServer.Management.Smo.View", "32")]
public ViewCollection Views { get; }
    [SfcObjectAttribute("0", "0", "Microsoft.SqlServer.Management.Smo.User", "32")]
public UserCollection Users { get; }
    [SfcObjectAttribute("0", "0", "Microsoft.SqlServer.Management.Smo.DatabaseAuditSpecification")]
public DatabaseAuditSpecificationCollection DatabaseAuditSpecifications { get; }
    [SfcObjectAttribute("0", "0", "Microsoft.SqlServer.Management.Smo.Schema", "32")]
public SchemaCollection Schemas { get; }
    [SfcObjectAttribute("0", "0", "Microsoft.SqlServer.Management.Smo.DatabaseRole", "32")]
public DatabaseRoleCollection Roles { get; }
    [SfcObjectAttribute("0", "0", "Microsoft.SqlServer.Management.Smo.ApplicationRole")]
public ApplicationRoleCollection ApplicationRoles { get; }
    internal BackupSetCollection BackupSets { get; }
    [SfcObjectAttribute("1", "1", "Microsoft.SqlServer.Management.Smo.LogFile")]
public LogFileCollection LogFiles { get; }
    [SfcObjectAttribute("1", "1", "Microsoft.SqlServer.Management.Smo.FileGroup")]
public FileGroupCollection FileGroups { get; }
    [SfcObjectAttribute("0", "0", "Microsoft.SqlServer.Management.Smo.PlanGuide")]
public PlanGuideCollection PlanGuides { get; }
    [SfcObjectAttribute("0", "0", "Microsoft.SqlServer.Management.Smo.Default")]
public DefaultCollection Defaults { get; }
    [SfcObjectAttribute("0", "0", "Microsoft.SqlServer.Management.Smo.Rule")]
public RuleCollection Rules { get; }
    [SfcObjectAttribute("0", "0", "Microsoft.SqlServer.Management.Smo.UserDefinedDataType", "32")]
public UserDefinedDataTypeCollection UserDefinedDataTypes { get; }
    [SfcObjectAttribute("0", "0", "Microsoft.SqlServer.Management.Smo.UserDefinedTableType", "32")]
public UserDefinedTableTypeCollection UserDefinedTableTypes { get; }
    [SfcObjectAttribute("0", "0", "Microsoft.SqlServer.Management.Smo.XmlSchemaCollection")]
public XmlSchemaCollectionCollection XmlSchemaCollections { get; }
    [SfcObjectAttribute("0", "0", "Microsoft.SqlServer.Management.Smo.PartitionFunction")]
public PartitionFunctionCollection PartitionFunctions { get; }
    [SfcObjectAttribute("0", "0", "Microsoft.SqlServer.Management.Smo.PartitionScheme")]
public PartitionSchemeCollection PartitionSchemes { get; }
    [SfcObjectAttribute("0", "1")]
public MasterKey MasterKey { get; }
    [SfcObjectAttribute("0", "0", "Microsoft.SqlServer.Management.Smo.DatabaseDdlTrigger")]
public DatabaseDdlTriggerCollection Triggers { get; }
    [SfcPropertyAttribute("1024")]
public DefaultLanguage DefaultLanguage { get; internal set; }
    [SfcPropertyAttribute("1024")]
public DefaultLanguage DefaultFullTextLanguage { get; internal set; }
    [SfcObjectAttribute("0", "0", "Microsoft.SqlServer.Management.Smo.WorkloadManagementWorkloadGroup")]
public WorkloadManagementWorkloadGroupCollection WorkloadManagementWorkloadGroups { get; }
    [SfcObjectAttribute("0", "0")]
public ServiceBroker ServiceBroker { get; }
    [SfcPropertyAttribute("3072")]
public int MaxDop { get; public set; }
    [SfcPropertyAttribute("3072")]
public Nullable`1<int> MaxDopForSecondary { get; public set; }
    [SfcPropertyAttribute("3072")]
public DatabaseScopedConfigurationOnOff LegacyCardinalityEstimation { get; public set; }
    [SfcPropertyAttribute("3072")]
public DatabaseScopedConfigurationOnOff LegacyCardinalityEstimationForSecondary { get; public set; }
    [SfcPropertyAttribute("3072")]
public DatabaseScopedConfigurationOnOff ParameterSniffing { get; public set; }
    [SfcPropertyAttribute("3072")]
public DatabaseScopedConfigurationOnOff ParameterSniffingForSecondary { get; public set; }
    [SfcPropertyAttribute("3072")]
public DatabaseScopedConfigurationOnOff QueryOptimizerHotfixes { get; public set; }
    [SfcPropertyAttribute("3072")]
public DatabaseScopedConfigurationOnOff QueryOptimizerHotfixesForSecondary { get; public set; }
    public bool IsVarDecimalStorageFormatSupported { get; }
    [SfcPropertyAttribute("9248")]
public bool IsVarDecimalStorageFormatEnabled { get; public set; }
    [SfcObjectAttribute("1")]
public Server Parent { get; public set; }
    private bool Microsoft.SqlServer.Management.Sdk.Sfc.ISfcSupportsDesignMode.IsDesignMode { get; }
    private XSchemaProps XSchema { get; }
    private XRuntimeProps XRuntime { get; }
    [SfcPropertyAttribute("1024")]
public bool AcceleratedRecoveryEnabled { get; public set; }
    [SfcPropertyAttribute("1056")]
public int ActiveConnections { get; }
    [SfcPropertyAttribute("7168")]
public bool AnsiNullDefault { get; public set; }
    [SfcPropertyAttribute("7168", "false")]
public bool AnsiNullsEnabled { get; public set; }
    [SfcPropertyAttribute("7168", "false")]
public bool AnsiPaddingEnabled { get; public set; }
    [SfcPropertyAttribute("7168")]
public bool AnsiWarningsEnabled { get; public set; }
    [SfcPropertyAttribute("7168")]
public bool ArithmeticAbortEnabled { get; public set; }
    [SfcPropertyAttribute("9216")]
public bool AutoClose { get; public set; }
    [SfcPropertyAttribute("11264")]
public bool AutoCreateIncrementalStatisticsEnabled { get; public set; }
    [SfcPropertyAttribute("11264")]
public bool AutoCreateStatisticsEnabled { get; public set; }
    [SfcPropertyAttribute("11264")]
public bool AutoShrink { get; public set; }
    [SfcPropertyAttribute("11264")]
public bool AutoUpdateStatisticsAsync { get; public set; }
    [SfcPropertyAttribute("11264")]
public bool AutoUpdateStatisticsEnabled { get; public set; }
    [SfcPropertyAttribute("1056")]
public AvailabilityDatabaseSynchronizationState AvailabilityDatabaseSynchronizationState { get; }
    [SfcPropertyAttribute("1056")]
public string AvailabilityGroupName { get; }
    [SfcPropertyAttribute("1024")]
public bool BrokerEnabled { get; public set; }
    [SfcPropertyAttribute("3104")]
public bool CaseSensitive { get; }
    [SfcPropertyAttribute("11264")]
public bool ChangeTrackingAutoCleanUp { get; public set; }
    [SfcPropertyAttribute("11264")]
public bool ChangeTrackingEnabled { get; public set; }
    [SfcPropertyAttribute("11264")]
public int ChangeTrackingRetentionPeriod { get; public set; }
    [SfcPropertyAttribute("11264")]
public RetentionPeriodUnits ChangeTrackingRetentionPeriodUnits { get; public set; }
    [SfcPropertyAttribute("11264")]
public bool CloseCursorsOnCommitEnabled { get; public set; }
    [SfcPropertyAttribute("7200", "SQL_Latin1_General_CP1_CI_AS")]
public string Collation { get; public set; }
    [SfcPropertyAttribute("7200")]
public CompatibilityLevel CompatibilityLevel { get; public set; }
    [SfcPropertyAttribute("7168")]
public bool ConcatenateNullYieldsNull { get; public set; }
    [SfcPropertyAttribute("1024")]
public ContainmentType ContainmentType { get; public set; }
    [SfcPropertyAttribute("3072")]
public DateTime CreateDate { get; }
    [SfcPropertyAttribute("1024")]
public Guid DatabaseGuid { get; }
    [SfcPropertyAttribute("3328")]
public string DatabaseSnapshotBaseName { get; public set; }
    [SfcPropertyAttribute("1024")]
public bool DataRetentionEnabled { get; public set; }
    [SfcPropertyAttribute("1056")]
public double DataSpaceUsage { get; }
    [SfcPropertyAttribute("11264")]
public bool DateCorrelationOptimization { get; public set; }
    [SfcPropertyAttribute("3104")]
public bool DboLogin { get; }
    [SfcPropertyAttribute("3104")]
public string DefaultFileGroup { get; }
    [SfcPropertyAttribute("1056")]
public string DefaultFileStreamFileGroup { get; }
    [SfcPropertyAttribute("3104")]
public string DefaultFullTextCatalog { get; public set; }
    [SfcPropertyAttribute("7200")]
public string DefaultSchema { get; public set; }
    [SfcPropertyAttribute("1024")]
public DelayedDurability DelayedDurability { get; public set; }
    [SfcPropertyAttribute("3072")]
public bool EncryptionEnabled { get; public set; }
    [SfcPropertyAttribute("1024")]
public string FilestreamDirectoryName { get; public set; }
    [SfcPropertyAttribute("1024")]
public FilestreamNonTransactedAccessType FilestreamNonTransactedAccess { get; public set; }
    [SfcPropertyAttribute("1056")]
public bool HasDatabaseEncryptionKey { get; }
    [SfcPropertyAttribute("3104")]
public bool HasFileInCloud { get; }
    [SfcPropertyAttribute("3104")]
public bool HasMemoryOptimizedObjects { get; }
    [SfcPropertyAttribute("3072")]
public bool HonorBrokerPriority { get; public set; }
    [SfcPropertyAttribute("3072")]
public int ID { get; }
    [SfcPropertyAttribute("1056")]
public double IndexSpaceUsage { get; }
    [SfcPropertyAttribute("3072")]
public bool IsAccessible { get; }
    [SfcPropertyAttribute("3072")]
public bool IsDatabaseSnapshot { get; }
    [SfcPropertyAttribute("3104")]
public bool IsDatabaseSnapshotBase { get; }
    [SfcPropertyAttribute("3104")]
public bool IsDbAccessAdmin { get; }
    [SfcPropertyAttribute("3104")]
public bool IsDbBackupOperator { get; }
    [SfcPropertyAttribute("3104")]
public bool IsDbDatareader { get; }
    [SfcPropertyAttribute("3104")]
public bool IsDbDatawriter { get; }
    [SfcPropertyAttribute("3104")]
public bool IsDbDdlAdmin { get; }
    [SfcPropertyAttribute("3104")]
public bool IsDbDenyDatareader { get; }
    [SfcPropertyAttribute("3104")]
public bool IsDbDenyDatawriter { get; }
    [SfcPropertyAttribute("3104")]
public bool IsDbOwner { get; }
    [SfcPropertyAttribute("3104")]
public bool IsDbSecurityAdmin { get; }
    [SfcPropertyAttribute("3072")]
public bool IsFullTextEnabled { get; public set; }
    [SfcPropertyAttribute("3328")]
public bool IsLedger { get; public set; }
    [SfcPropertyAttribute("1056")]
public bool IsMailHost { get; }
    [SfcPropertyAttribute("1056")]
public bool IsManagementDataWarehouse { get; }
    [SfcPropertyAttribute("3104")]
public bool IsMirroringEnabled { get; }
    [SfcPropertyAttribute("11264")]
public bool IsParameterizationForced { get; public set; }
    [SfcPropertyAttribute("11264")]
public bool IsReadCommittedSnapshotOn { get; public set; }
    [SfcPropertyAttribute("3072")]
public bool IsSqlDw { get; public set; }
    [SfcPropertyAttribute("3072")]
public bool IsSystemObject { get; }
    [SfcPropertyAttribute("3072")]
public bool IsUpdateable { get; }
    [SfcPropertyAttribute("1056")]
public DateTime LastBackupDate { get; }
    [SfcPropertyAttribute("1056")]
public DateTime LastDifferentialBackupDate { get; }
    [SfcPropertyAttribute("3072")]
public DateTime LastGoodCheckDbTime { get; }
    [SfcPropertyAttribute("1056")]
public DateTime LastLogBackupDate { get; }
    [SfcPropertyAttribute("5120")]
public bool LocalCursorsDefault { get; public set; }
    [SfcPropertyAttribute("1024")]
public LogReuseWaitStatus LogReuseWaitStatus { get; }
    [SfcPropertyAttribute("3104")]
public double MemoryAllocatedToMemoryOptimizedObjectsInKB { get; }
    [SfcPropertyAttribute("3104")]
public double MemoryUsedByMemoryOptimizedObjectsInKB { get; }
    [SfcPropertyAttribute("1056")]
public decimal MirroringFailoverLogSequenceNumber { get; }
    [SfcPropertyAttribute("1056")]
public Guid MirroringID { get; }
    [SfcPropertyAttribute("1056")]
public string MirroringPartner { get; public set; }
    [SfcPropertyAttribute("1056")]
public string MirroringPartnerInstance { get; }
    [SfcPropertyAttribute("1056")]
public int MirroringRedoQueueMaxSize { get; }
    [SfcPropertyAttribute("1056")]
public int MirroringRoleSequence { get; }
    [SfcPropertyAttribute("1056")]
public MirroringSafetyLevel MirroringSafetyLevel { get; public set; }
    [SfcPropertyAttribute("1056")]
public int MirroringSafetySequence { get; }
    [SfcPropertyAttribute("1056")]
public MirroringStatus MirroringStatus { get; }
    [SfcPropertyAttribute("1056")]
public int MirroringTimeout { get; public set; }
    [SfcPropertyAttribute("1056")]
public string MirroringWitness { get; public set; }
    [SfcPropertyAttribute("1056")]
public MirroringWitnessStatus MirroringWitnessStatus { get; }
    [SfcPropertyAttribute("1024")]
public bool NestedTriggersEnabled { get; public set; }
    [SfcPropertyAttribute("7168")]
public bool NumericRoundAbortEnabled { get; public set; }
    [SfcPropertyAttribute("3072")]
[SfcReferenceAttribute("Microsoft.SqlServer.Management.Smo.Login", "Server[@Name = '{0}']/Login[@Name = '{1}']", "Mono.Cecil.CustomAttributeArgument[]")]
[CLSCompliantAttribute("False")]
public string Owner { get; }
    [SfcPropertyAttribute("5120")]
public PageVerify PageVerify { get; public set; }
    [SfcPropertyAttribute("1056")]
[SfcReferenceAttribute("Microsoft.SqlServer.Management.Smo.FileGroup", "Server[@Name = '{0}']/Database[@Name = '{1}']/FileGroup[@Name = '{2}']", "Mono.Cecil.CustomAttributeArgument[]")]
[CLSCompliantAttribute("False")]
public string PersistentVersionStoreFileGroup { get; public set; }
    [SfcPropertyAttribute("1056")]
public long PersistentVersionStoreSizeKB { get; }
    [SfcPropertyAttribute("1056")]
public string PrimaryFilePath { get; }
    [SfcPropertyAttribute("7168")]
public bool QuotedIdentifiersEnabled { get; public set; }
    [SfcPropertyAttribute("7168")]
public bool ReadOnly { get; public set; }
    [SfcPropertyAttribute("1024")]
public Guid RecoveryForkGuid { get; }
    [SfcPropertyAttribute("9216")]
public RecoveryModel RecoveryModel { get; public set; }
    [SfcPropertyAttribute("7168")]
public bool RecursiveTriggersEnabled { get; public set; }
    [SfcPropertyAttribute("1056")]
public string RemoteDataArchiveCredential { get; public set; }
    [SfcPropertyAttribute("1024")]
public bool RemoteDataArchiveEnabled { get; public set; }
    [SfcPropertyAttribute("1056")]
public string RemoteDataArchiveEndpoint { get; public set; }
    [SfcPropertyAttribute("1312")]
public string RemoteDataArchiveLinkedServer { get; public set; }
    [SfcPropertyAttribute("1056")]
public bool RemoteDataArchiveUseFederatedServiceAccount { get; public set; }
    [SfcPropertyAttribute("1312")]
public string RemoteDatabaseName { get; public set; }
    [SfcPropertyAttribute("3072")]
public ReplicationOptions ReplicationOptions { get; }
    [SfcPropertyAttribute("3072")]
public Guid ServiceBrokerGuid { get; }
    [SfcPropertyAttribute("3104")]
public double Size { get; }
    [SfcPropertyAttribute("3072")]
public SnapshotIsolationState SnapshotIsolationState { get; }
    [SfcPropertyAttribute("3104")]
public double SpaceAvailable { get; }
    [SfcPropertyAttribute("3072")]
public DatabaseStatus Status { get; }
    [SfcPropertyAttribute("1024")]
public int TargetRecoveryTime { get; public set; }
    [SfcPropertyAttribute("1024")]
public bool TransformNoiseWords { get; public set; }
    [SfcPropertyAttribute("7168")]
public bool Trustworthy { get; public set; }
    [SfcPropertyAttribute("1024")]
public int TwoDigitYearCutoff { get; public set; }
    [SfcPropertyAttribute("11264")]
public DatabaseUserAccess UserAccess { get; public set; }
    [SfcPropertyAttribute("3104")]
public string UserName { get; }
    [SfcPropertyAttribute("1056")]
public int Version { get; }
    [SfcPropertyAttribute("2048")]
public string AzureEdition { get; public set; }
    [SfcPropertyAttribute("2048")]
public string AzureServiceObjective { get; public set; }
    [SfcPropertyAttribute("2080")]
public bool IsDbManager { get; }
    [SfcPropertyAttribute("2080")]
public bool IsLoginManager { get; }
    [SfcPropertyAttribute("2048")]
public bool IsMaxSizeApplicable { get; }
    [SfcPropertyAttribute("2048")]
public bool IsSqlDwEdition { get; }
    [SfcPropertyAttribute("2048")]
public double MaxSizeInBytes { get; public set; }
    [SfcPropertyAttribute("2048")]
public bool TemporalHistoryRetentionEnabled { get; public set; }
    public DatabaseEvents Events { get; }
    internal Database(AbstractCollectionBase parentColl, ObjectKeyBase key, SqlSmoState state);
    public Database(Server server, string name, DatabaseEngineEdition edition);
    public Database(Server server, string name);
    internal ExecutionManager get_DatabaseExecutionManager();
    public virtual ExecutionManager get_ExecutionManager();
    public virtual DatabaseEngineType get_DatabaseEngineType();
    public virtual DatabaseEngineEdition get_DatabaseEngineEdition();
    public static string get_UrnSuffix();
    public virtual string get_Name();
    public virtual void set_Name(string value);
    internal virtual void ValidateProperty(Property prop, object value);
    internal virtual UserPermissionCollection get_Permissions();
    public void Create(bool forAttach);
    public sealed virtual void Create();
    internal virtual void ScriptCreate(StringCollection createQuery, ScriptingPreferences sp);
    private void ScriptDbScopedConfigurations(StringCollection query, ScriptingPreferences sp);
    private void ScriptCreateUsersIfRequired(StringCollection createQuery, ScriptingPreferences sp);
    private void ScriptCreateForCloud(StringBuilder sbStatement, ScriptingPreferences sp, string scriptName);
    private static string GetMaxSizeString(double maxSizeInBytes);
    private void ScriptAlterForCloud(StringCollection sbStatement, ScriptingPreferences sp);
    private void ScriptDbProps70Comp(StringCollection query, ScriptingPreferences sp);
    private void ScriptDbProps80Comp(StringCollection query, ScriptingPreferences sp, bool isAzureDb);
    private void AddCompatibilityLevel(StringCollection query, ScriptingPreferences sp);
    private CompatibilityLevel UpgradeCompatibilityValueIfRequired(ScriptingPreferences sp, CompatibilityLevel compatibilityLevel);
    internal virtual PropagateInfo[] GetPropagateInfo(PropagateAction action);
    internal virtual void AddScriptPermission(StringCollection query, ScriptingPreferences sp);
    public void SetOffline();
    public void SetOnline();
    public void SetSnapshotIsolation(bool enabled);
    private void SetOfflineImpl(bool offline);
    public sealed virtual StringCollection Script();
    public sealed virtual StringCollection Script(ScriptingOptions scriptingOptions);
    internal virtual void ScriptOwnerForShiloh(StringBuilder sb, ScriptingPreferences sp, string newOwner);
    public void SetOwner(string loginName);
    public void SetOwner(string loginName, bool dropExistingUser);
    private void SetOwnerImpl(string loginName, bool dropExistingUser);
    public sealed virtual void Alter();
    protected virtual void CleanObject();
    public void Alter(TerminationClause terminationClause);
    public void Alter(TimeSpan transactionTerminationTime);
    private void ScriptAutoCreateStatistics(StringCollection queries, ScriptingPreferences sp);
    private void ScriptChangeTracking(StringCollection queries, ScriptingPreferences sp);
    private void ScriptMirroringOptions(StringCollection queries, ScriptingPreferences sp);
    private void ScriptRemoteDataArchive(StringCollection queries, ScriptingPreferences sp);
    private void ContainmentRelatedValidation(ScriptingPreferences sp);
    internal virtual void ScriptAlter(StringCollection alterQuery, ScriptingPreferences sp);
    public sealed virtual void Drop();
    public sealed virtual void DropIfExists();
    private void DatabaseDropImpl(bool ifExists);
    internal virtual void ScriptDrop(StringCollection dropQuery, ScriptingPreferences sp);
    public sealed virtual void Rename(string newName);
    public sealed virtual bool get_WarnOnRename();
    internal virtual void ScriptRename(StringCollection renameQuery, ScriptingPreferences sp, string newName);
    protected virtual void PostCreate();
    protected virtual void PostAlter();
    private void PostAlterAndCreate();
    private bool IsDefaultLanguageDirty();
    private bool IsDefaultFullTextLanguageDirty();
    private void SetComparerToNullIfRequired();
    public void Checkpoint();
    internal string GetUseDbStatement(string databaseName);
    internal void AddUseDb(StringCollection col, ScriptingPreferences sp);
    internal void AddUseDb(StringCollection col);
    private void InsertUseDb(int index, StringCollection col, DatabaseEngineType targetEngineType);
    public void ExecuteNonQuery(string sqlCommand);
    public void ExecuteNonQuery(string sqlCommand, ExecutionTypes executionType);
    public void ExecuteNonQuery(StringCollection sqlCommands);
    public void ExecuteNonQuery(StringCollection sqlCommands, ExecutionTypes executionType);
    public DataSet ExecuteWithResults(StringCollection sqlCommands);
    public DataSet ExecuteWithResults(string sqlCommand);
    public bool IsMember(string groupOrRole);
    internal void GetAutoGrowFilesScript(StringCollection query, ScriptingPreferences sp);
    internal void GetFileGroupsScript(StringBuilder query, bool databaseIsView, StringCollection emptyfgs, ScriptingPreferences sp);
    internal void GetLogFilesScript(ScriptingPreferences sp, StringBuilder query);
    public void ChangeMirroringState(MirroringOption mirroringOption);
    public void DropBackupHistory();
    public sealed virtual bool get_DatabaseOwnershipChaining();
    public sealed virtual void set_DatabaseOwnershipChaining(bool value);
    public CatalogCollationType get_CatalogCollation();
    public void set_CatalogCollation(CatalogCollationType value);
    public sealed virtual ExtendedPropertyCollection get_ExtendedProperties();
    public DatabaseOptions get_DatabaseOptions();
    public QueryStoreOptions get_QueryStoreOptions();
    public SynonymCollection get_Synonyms();
    public SequenceCollection get_Sequences();
    public TableCollection get_Tables();
    public SensitivityClassificationCollection get_SensitivityClassifications();
    public DatabaseScopedCredentialCollection get_DatabaseScopedCredentials();
    public WorkloadManagementWorkloadClassifierCollection get_WorkloadManagementWorkloadClassifiers();
    public StoredProcedureCollection get_StoredProcedures();
    public SqlAssemblyCollection get_Assemblies();
    public ExternalLanguageCollection get_ExternalLanguages();
    public ExternalLibraryCollection get_ExternalLibraries();
    public UserDefinedTypeCollection get_UserDefinedTypes();
    public UserDefinedAggregateCollection get_UserDefinedAggregates();
    public FullTextCatalogCollection get_FullTextCatalogs();
    public FullTextStopListCollection get_FullTextStopLists();
    public SearchPropertyListCollection get_SearchPropertyLists();
    public SecurityPolicyCollection get_SecurityPolicies();
    public DatabaseScopedConfigurationCollection get_DatabaseScopedConfigurations();
    public ExternalDataSourceCollection get_ExternalDataSources();
    public ExternalFileFormatCollection get_ExternalFileFormats();
    public ExternalStreamCollection get_ExternalStreams();
    public ExternalStreamingJobCollection get_ExternalStreamingJobs();
    public CertificateCollection get_Certificates();
    public ColumnMasterKeyCollection get_ColumnMasterKeys();
    public ColumnEncryptionKeyCollection get_ColumnEncryptionKeys();
    public SymmetricKeyCollection get_SymmetricKeys();
    public AsymmetricKeyCollection get_AsymmetricKeys();
    public DatabaseEncryptionKey get_DatabaseEncryptionKey();
    private DatabaseEncryptionKey InitializeDatabaseEncryptionKey();
    private bool IsDatabaseEncryptionKeyPresent();
    private bool IsDEKInitializedWithoutAnyPropertiesSet();
    public ExtendedStoredProcedureCollection get_ExtendedStoredProcedures();
    public UserDefinedFunctionCollection get_UserDefinedFunctions();
    public ViewCollection get_Views();
    public UserCollection get_Users();
    public DatabaseAuditSpecificationCollection get_DatabaseAuditSpecifications();
    public SchemaCollection get_Schemas();
    public DatabaseRoleCollection get_Roles();
    public ApplicationRoleCollection get_ApplicationRoles();
    internal BackupSetCollection get_BackupSets();
    public LogFileCollection get_LogFiles();
    public FileGroupCollection get_FileGroups();
    public PlanGuideCollection get_PlanGuides();
    public DefaultCollection get_Defaults();
    public RuleCollection get_Rules();
    public UserDefinedDataTypeCollection get_UserDefinedDataTypes();
    public UserDefinedTableTypeCollection get_UserDefinedTableTypes();
    public XmlSchemaCollectionCollection get_XmlSchemaCollections();
    public PartitionFunctionCollection get_PartitionFunctions();
    public PartitionSchemeCollection get_PartitionSchemes();
    public MasterKey get_MasterKey();
    internal bool DoesMasterKeyAlreadyExist();
    internal void SetRefMasterKey(MasterKey mk);
    internal void SetNullRefMasterKey();
    private MasterKey InitializeMasterKey();
    public DatabaseDdlTriggerCollection get_Triggers();
    public DefaultLanguage get_DefaultLanguage();
    internal void set_DefaultLanguage(DefaultLanguage value);
    public DefaultLanguage get_DefaultFullTextLanguage();
    internal void set_DefaultFullTextLanguage(DefaultLanguage value);
    public WorkloadManagementWorkloadGroupCollection get_WorkloadManagementWorkloadGroups();
    public ServiceBroker get_ServiceBroker();
    public int get_MaxDop();
    public void set_MaxDop(int value);
    public Nullable`1<int> get_MaxDopForSecondary();
    public void set_MaxDopForSecondary(Nullable`1<int> value);
    public DatabaseScopedConfigurationOnOff get_LegacyCardinalityEstimation();
    public void set_LegacyCardinalityEstimation(DatabaseScopedConfigurationOnOff value);
    public DatabaseScopedConfigurationOnOff get_LegacyCardinalityEstimationForSecondary();
    public void set_LegacyCardinalityEstimationForSecondary(DatabaseScopedConfigurationOnOff value);
    public DatabaseScopedConfigurationOnOff get_ParameterSniffing();
    public void set_ParameterSniffing(DatabaseScopedConfigurationOnOff value);
    public DatabaseScopedConfigurationOnOff get_ParameterSniffingForSecondary();
    public void set_ParameterSniffingForSecondary(DatabaseScopedConfigurationOnOff value);
    public DatabaseScopedConfigurationOnOff get_QueryOptimizerHotfixes();
    public void set_QueryOptimizerHotfixes(DatabaseScopedConfigurationOnOff value);
    public DatabaseScopedConfigurationOnOff get_QueryOptimizerHotfixesForSecondary();
    public void set_QueryOptimizerHotfixesForSecondary(DatabaseScopedConfigurationOnOff value);
    protected virtual void MarkDropped();
    private DataTable EnumGeneric(Urn urn);
    public DataTable EnumLocks(int processId);
    public DataTable EnumLocks();
    public DataTable EnumLoginMappings();
    public DataTable EnumWindowsGroups();
    public DataTable EnumWindowsGroups(string groupName);
    public StringCollection CheckAllocations(RepairType repairType);
    public StringCollection CheckAllocationsDataOnly();
    public StringCollection CheckCatalog();
    public StringCollection CheckTables(RepairType repairType);
    public StringCollection CheckTables(RepairType repairType, RepairOptions repairOptions, RepairStructure repairStructure, Nullable`1<long> maxDOP);
    public StringCollection CheckTables(RepairType repairType, RepairStructure repairStructure);
    public StringCollection CheckTables(RepairType repairType, RepairOptions repairOptions);
    public StringCollection CheckTablesDataOnly();
    public StringCollection CheckTablesDataOnly(RepairOptions repairOptions);
    public StringCollection CheckTablesDataOnly(RepairStructure repairStructure);
    public StringCollection CheckTablesDataOnly(RepairOptions repairOptions, RepairStructure repairStructure, Nullable`1<long> maxDOP);
    private string GenerateRepairOptionsScript(RepairOptions repairOptions, RepairStructure repairStructure, Nullable`1<long> maxDOP);
    public void Shrink(int percentFreeSpace, ShrinkMethod shrinkMethod);
    public void RecalculateSpaceUsage();
    public void PrefetchObjects();
    public void PrefetchObjects(Type objectType);
    internal void PrefetchObjects(Type objectType, ScriptingPreferences scriptingPreferences);
    public void PrefetchObjects(Type objectType, ScriptingOptions scriptingOptions);
    private void PrefetchObjectsImpl(Type objectType, ScriptingPreferences scriptingPreferences);
    internal void PrefetchStoredProcedures(ScriptingPreferences options);
    internal void PrefetchUsers(ScriptingPreferences options);
    internal void PrefetchScriptingOnlyChildren(ScriptingPreferences options);
    internal void PrefetchDatabaseRoles(ScriptingPreferences options);
    internal void PrefetchDefaults(ScriptingPreferences options);
    internal void PrefetchRules(ScriptingPreferences options);
    internal void PrefetchExternalLanguages(ScriptingPreferences options);
    internal void PrefetchExternalLibraries(ScriptingPreferences options);
    internal void PrefetchUserDefinedFunctions(ScriptingPreferences options);
    internal void PrefetchUserDefinedAggregates(ScriptingPreferences options);
    internal void PrefetchColumnEncryptionKey(ScriptingPreferences options);
    internal void PrefetchExtendedStoredProcedures(ScriptingPreferences options);
    internal void PrefetchSequences(ScriptingPreferences options);
    internal void PrefetchTables(ScriptingPreferences options);
    internal void PrefetchTables(ScriptingPreferences options, string tableFilter);
    internal void PrefetchViews(ScriptingPreferences options);
    internal void PrefetchViews(ScriptingPreferences options, string viewFilter);
    internal void PrefetchSecurityPolicy(ScriptingPreferences options);
    private void PrefetchObjects(ScriptingPreferences options, IEnumerable`1<string> filters);
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.Smo.Database/<EnumerateTableFiltersForPrefetch>d__340")]
internal IEnumerable`1<string> EnumerateTableFiltersForPrefetch(string tableFilter, ScriptingPreferences options);
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.Smo.Database/<EnumerateViewFiltersForPrefetch>d__341")]
internal IEnumerable`1<string> EnumerateViewFiltersForPrefetch(string viewFilter, ScriptingPreferences options);
    internal void PrefetchUDDT(ScriptingPreferences options);
    internal void PrefetchUserDefinedTableTypes(ScriptingPreferences options);
    internal void PrefetchUserDefinedTypes(ScriptingPreferences options);
    internal void PrefetchPartitionSchemes(ScriptingPreferences options);
    internal void PrefetchPartitionFunctions(ScriptingPreferences options);
    internal void PrefetchSchemas(ScriptingPreferences options);
    internal void PrefetchXmlSchemaCollections(ScriptingPreferences options);
    internal void PrefetchSqlAssemblies(ScriptingPreferences options);
    internal void PrefetchDatabaseScopedCredentials(ScriptingPreferences options);
    internal void PrefetchExternalFileFormats(ScriptingPreferences options);
    internal void PrefetchExternalDataSources(ScriptingPreferences options);
    internal void PrefetchOtherObjects(ScriptingPreferences options);
    internal virtual void PreInitChildLevel();
    public DataTable EnumTransactions();
    public DataTable EnumTransactions(TransactionTypes transactionType);
    public int GetTransactionCount();
    public int GetTransactionCount(TransactionTypes transactionType);
    private string GetTranFilterExpr(TransactionTypes tt);
    public void RemoveFullTextCatalogs();
    public void SetDefaultFullTextCatalog(string catalog);
    public void SetDefaultFileGroup(string fileGroupName);
    private StringCollection GetDefaultFileGroupScript(ScriptingPreferences sp, string dataSpaceName);
    public void SetDefaultFileStreamFileGroup(string fileGroupName);
    public virtual void Refresh();
    public DataTable EnumBackupSets();
    public DataTable EnumBackupSetFiles(int backupSetID);
    public DataTable EnumBackupSetFiles();
    public DataTable EnumCandidateKeys();
    public void UpdateIndexStatistics();
    public UrnCollection EnumMatchingSPs(string description, bool includeSystem);
    public UrnCollection EnumMatchingSPs(string description);
    public DataTable EnumObjects(DatabaseObjectTypes types, SortOrder order);
    public DataTable EnumObjects();
    public DataTable EnumObjects(DatabaseObjectTypes types);
    public void TruncateLog();
    internal static String[] GetScriptFields(Type parentType, ServerVersion version, DatabaseEngineType databaseEngineType, DatabaseEngineEdition databaseEngineEdition, bool defaultTextMode);
    internal static String[] GetScriptFields2(Type parentType, ServerVersion version, DatabaseEngineType databaseEngineType, DatabaseEngineEdition databaseEngineEdition, bool defaultTextMode, ScriptingPreferences sp);
    public bool get_IsVarDecimalStorageFormatSupported();
    public bool get_IsVarDecimalStorageFormatEnabled();
    public void set_IsVarDecimalStorageFormatEnabled(bool value);
    private void ScriptVardecimalCompression(StringCollection query, ScriptingPreferences sp, bool forCreate);
    public void EnableAllPlanGuides();
    public void DisableAllPlanGuides();
    public void DropAllPlanGuides();
    private void EnableDisableDropAllPlanGuides(string action);
    public bool ValidateAllPlanGuides();
    public bool ValidateAllPlanGuides(DataTable& errorInfo);
    public void ReauthorizeRemoteDataArchiveConnection(string credentialName, bool withCopy);
    public IEnumerable`1<RemoteDataArchiveMigrationStatusReport> GetRemoteDataArchiveMigrationStatusReports(DateTime migrationStartTime, int statusReportCount, string tableName);
    public RemoteDatabaseMigrationStatistics GetRemoteDatabaseMigrationStatistics();
    public void InitFileGroupFiles();
    public void InitTableColumns();
    private void ScriptDbOptionsProps(StringCollection query, ScriptingPreferences sp, bool isAzureDb);
    private void ScriptAlterFileStreamProp(ScriptingPreferences sp, StringCollection query);
    private void AddDefaultLanguageOption(string nameProperty, string lcidProperty, string optname, ScriptingPreferences sp, StringCollection query);
    internal void ScriptAlterPropReadonly(StringCollection query, ScriptingPreferences sp, bool readonlyMode);
    internal void Encryption(bool encryptionEnabled);
    public void EnableEncryption(bool isEnabled);
    private PageVerify GetPageVerify(ScriptingPreferences sp);
    private void ScriptAlterContainmentDDL(ScriptingPreferences sp, StringCollection queries);
    private void ScriptPageVerify(ScriptingPreferences sp, StringCollection queries);
    private SnapshotIsolationState GetSnapshotIsolationState(ScriptingPreferences sp);
    private void ScriptSnapshotIsolationState(ScriptingPreferences sp, StringCollection queries);
    private void ScriptAlterPropBool(string propname, string optname, ScriptingPreferences sp, StringCollection queries);
    private void ScriptAlterPropBool(string propname, string optname, ScriptingPreferences sp, StringCollection queries, bool useEqualityOperator);
    private void ScriptAlterPropBool(string propname, string optname, ScriptingPreferences sp, StringCollection queries, string scriptTrue, string scriptFalse);
    private void ScriptAlterPropBool(string propname, string optname, ScriptingPreferences sp, StringCollection queries, string scriptTrue, string scriptFalse, bool useEqualityOperator);
    private void ScriptAlterPropBool(string propname, string optname, ScriptingPreferences sp, StringCollection queries, string val);
    private bool ScriptAlterPropBool(string propname, string optname, ScriptingPreferences sp, StringCollection queries, string val, bool useEqualityOperator);
    public bool IsLocalPrimaryReplica();
    public void InitializeClassifiedColumns();
    public void CleanupPersistentVersionStore();
    internal virtual void AddObjectPropsFromDataReader(IDataReader reader, bool skipIfDirty, int startColIdx, int endColIdx);
    public Server get_Parent();
    public void set_Parent(Server value);
    private sealed virtual override bool Microsoft.SqlServer.Management.Sdk.Sfc.ISfcSupportsDesignMode.get_IsDesignMode();
    internal virtual SqlPropertyMetadataProvider GetPropertyMetadataProvider();
    private sealed virtual override object Microsoft.SqlServer.Management.Smo.IPropertyDataDispatch.GetPropertyValue(int index);
    private sealed virtual override void Microsoft.SqlServer.Management.Smo.IPropertyDataDispatch.SetPropertyValue(int index, object value);
    private XSchemaProps get_XSchema();
    private XRuntimeProps get_XRuntime();
    public bool get_AcceleratedRecoveryEnabled();
    public void set_AcceleratedRecoveryEnabled(bool value);
    public int get_ActiveConnections();
    public sealed virtual bool get_AnsiNullDefault();
    public sealed virtual void set_AnsiNullDefault(bool value);
    public sealed virtual bool get_AnsiNullsEnabled();
    public sealed virtual void set_AnsiNullsEnabled(bool value);
    public sealed virtual bool get_AnsiPaddingEnabled();
    public sealed virtual void set_AnsiPaddingEnabled(bool value);
    public sealed virtual bool get_AnsiWarningsEnabled();
    public sealed virtual void set_AnsiWarningsEnabled(bool value);
    public sealed virtual bool get_ArithmeticAbortEnabled();
    public sealed virtual void set_ArithmeticAbortEnabled(bool value);
    public sealed virtual bool get_AutoClose();
    public sealed virtual void set_AutoClose(bool value);
    public sealed virtual bool get_AutoCreateIncrementalStatisticsEnabled();
    public sealed virtual void set_AutoCreateIncrementalStatisticsEnabled(bool value);
    public sealed virtual bool get_AutoCreateStatisticsEnabled();
    public sealed virtual void set_AutoCreateStatisticsEnabled(bool value);
    public sealed virtual bool get_AutoShrink();
    public sealed virtual void set_AutoShrink(bool value);
    public sealed virtual bool get_AutoUpdateStatisticsAsync();
    public sealed virtual void set_AutoUpdateStatisticsAsync(bool value);
    public sealed virtual bool get_AutoUpdateStatisticsEnabled();
    public sealed virtual void set_AutoUpdateStatisticsEnabled(bool value);
    public AvailabilityDatabaseSynchronizationState get_AvailabilityDatabaseSynchronizationState();
    public string get_AvailabilityGroupName();
    public sealed virtual bool get_BrokerEnabled();
    public sealed virtual void set_BrokerEnabled(bool value);
    public bool get_CaseSensitive();
    public sealed virtual bool get_ChangeTrackingAutoCleanUp();
    public sealed virtual void set_ChangeTrackingAutoCleanUp(bool value);
    public sealed virtual bool get_ChangeTrackingEnabled();
    public sealed virtual void set_ChangeTrackingEnabled(bool value);
    public sealed virtual int get_ChangeTrackingRetentionPeriod();
    public sealed virtual void set_ChangeTrackingRetentionPeriod(int value);
    public sealed virtual RetentionPeriodUnits get_ChangeTrackingRetentionPeriodUnits();
    public sealed virtual void set_ChangeTrackingRetentionPeriodUnits(RetentionPeriodUnits value);
    public sealed virtual bool get_CloseCursorsOnCommitEnabled();
    public sealed virtual void set_CloseCursorsOnCommitEnabled(bool value);
    public sealed virtual string get_Collation();
    public sealed virtual void set_Collation(string value);
    public sealed virtual CompatibilityLevel get_CompatibilityLevel();
    public sealed virtual void set_CompatibilityLevel(CompatibilityLevel value);
    public sealed virtual bool get_ConcatenateNullYieldsNull();
    public sealed virtual void set_ConcatenateNullYieldsNull(bool value);
    public ContainmentType get_ContainmentType();
    public void set_ContainmentType(ContainmentType value);
    public sealed virtual DateTime get_CreateDate();
    public Guid get_DatabaseGuid();
    public sealed virtual string get_DatabaseSnapshotBaseName();
    public void set_DatabaseSnapshotBaseName(string value);
    public bool get_DataRetentionEnabled();
    public void set_DataRetentionEnabled(bool value);
    public double get_DataSpaceUsage();
    public sealed virtual bool get_DateCorrelationOptimization();
    public sealed virtual void set_DateCorrelationOptimization(bool value);
    public bool get_DboLogin();
    public sealed virtual string get_DefaultFileGroup();
    public sealed virtual string get_DefaultFileStreamFileGroup();
    public string get_DefaultFullTextCatalog();
    public void set_DefaultFullTextCatalog(string value);
    public string get_DefaultSchema();
    public void set_DefaultSchema(string value);
    public sealed virtual DelayedDurability get_DelayedDurability();
    public sealed virtual void set_DelayedDurability(DelayedDurability value);
    public sealed virtual bool get_EncryptionEnabled();
    public sealed virtual void set_EncryptionEnabled(bool value);
    public string get_FilestreamDirectoryName();
    public void set_FilestreamDirectoryName(string value);
    public FilestreamNonTransactedAccessType get_FilestreamNonTransactedAccess();
    public void set_FilestreamNonTransactedAccess(FilestreamNonTransactedAccessType value);
    public bool get_HasDatabaseEncryptionKey();
    public bool get_HasFileInCloud();
    public bool get_HasMemoryOptimizedObjects();
    public sealed virtual bool get_HonorBrokerPriority();
    public sealed virtual void set_HonorBrokerPriority(bool value);
    public sealed virtual int get_ID();
    public double get_IndexSpaceUsage();
    public bool get_IsAccessible();
    public bool get_IsDatabaseSnapshot();
    public bool get_IsDatabaseSnapshotBase();
    public bool get_IsDbAccessAdmin();
    public bool get_IsDbBackupOperator();
    public bool get_IsDbDatareader();
    public bool get_IsDbDatawriter();
    public bool get_IsDbDdlAdmin();
    public bool get_IsDbDenyDatareader();
    public bool get_IsDbDenyDatawriter();
    public bool get_IsDbOwner();
    public bool get_IsDbSecurityAdmin();
    public bool get_IsFullTextEnabled();
    public void set_IsFullTextEnabled(bool value);
    public sealed virtual bool get_IsLedger();
    public sealed virtual void set_IsLedger(bool value);
    public bool get_IsMailHost();
    public bool get_IsManagementDataWarehouse();
    public bool get_IsMirroringEnabled();
    public sealed virtual bool get_IsParameterizationForced();
    public sealed virtual void set_IsParameterizationForced(bool value);
    public sealed virtual bool get_IsReadCommittedSnapshotOn();
    public sealed virtual void set_IsReadCommittedSnapshotOn(bool value);
    public bool get_IsSqlDw();
    public void set_IsSqlDw(bool value);
    public sealed virtual bool get_IsSystemObject();
    public sealed virtual bool get_IsUpdateable();
    public DateTime get_LastBackupDate();
    public DateTime get_LastDifferentialBackupDate();
    public DateTime get_LastGoodCheckDbTime();
    public DateTime get_LastLogBackupDate();
    public sealed virtual bool get_LocalCursorsDefault();
    public sealed virtual void set_LocalCursorsDefault(bool value);
    public LogReuseWaitStatus get_LogReuseWaitStatus();
    public double get_MemoryAllocatedToMemoryOptimizedObjectsInKB();
    public double get_MemoryUsedByMemoryOptimizedObjectsInKB();
    public decimal get_MirroringFailoverLogSequenceNumber();
    public Guid get_MirroringID();
    public string get_MirroringPartner();
    public void set_MirroringPartner(string value);
    public string get_MirroringPartnerInstance();
    public int get_MirroringRedoQueueMaxSize();
    public int get_MirroringRoleSequence();
    public MirroringSafetyLevel get_MirroringSafetyLevel();
    public void set_MirroringSafetyLevel(MirroringSafetyLevel value);
    public int get_MirroringSafetySequence();
    public MirroringStatus get_MirroringStatus();
    public sealed virtual int get_MirroringTimeout();
    public sealed virtual void set_MirroringTimeout(int value);
    public string get_MirroringWitness();
    public void set_MirroringWitness(string value);
    public MirroringWitnessStatus get_MirroringWitnessStatus();
    public bool get_NestedTriggersEnabled();
    public void set_NestedTriggersEnabled(bool value);
    public sealed virtual bool get_NumericRoundAbortEnabled();
    public sealed virtual void set_NumericRoundAbortEnabled(bool value);
    public sealed virtual string get_Owner();
    public sealed virtual PageVerify get_PageVerify();
    public sealed virtual void set_PageVerify(PageVerify value);
    public string get_PersistentVersionStoreFileGroup();
    public void set_PersistentVersionStoreFileGroup(string value);
    public long get_PersistentVersionStoreSizeKB();
    public sealed virtual string get_PrimaryFilePath();
    public sealed virtual bool get_QuotedIdentifiersEnabled();
    public sealed virtual void set_QuotedIdentifiersEnabled(bool value);
    public sealed virtual bool get_ReadOnly();
    public sealed virtual void set_ReadOnly(bool value);
    public Guid get_RecoveryForkGuid();
    public sealed virtual RecoveryModel get_RecoveryModel();
    public sealed virtual void set_RecoveryModel(RecoveryModel value);
    public sealed virtual bool get_RecursiveTriggersEnabled();
    public sealed virtual void set_RecursiveTriggersEnabled(bool value);
    public sealed virtual string get_RemoteDataArchiveCredential();
    public void set_RemoteDataArchiveCredential(string value);
    public sealed virtual bool get_RemoteDataArchiveEnabled();
    public sealed virtual void set_RemoteDataArchiveEnabled(bool value);
    public sealed virtual string get_RemoteDataArchiveEndpoint();
    public sealed virtual void set_RemoteDataArchiveEndpoint(string value);
    public sealed virtual string get_RemoteDataArchiveLinkedServer();
    public void set_RemoteDataArchiveLinkedServer(string value);
    public sealed virtual bool get_RemoteDataArchiveUseFederatedServiceAccount();
    public void set_RemoteDataArchiveUseFederatedServiceAccount(bool value);
    public sealed virtual string get_RemoteDatabaseName();
    public void set_RemoteDatabaseName(string value);
    public ReplicationOptions get_ReplicationOptions();
    public Guid get_ServiceBrokerGuid();
    public double get_Size();
    public SnapshotIsolationState get_SnapshotIsolationState();
    public double get_SpaceAvailable();
    public DatabaseStatus get_Status();
    public sealed virtual int get_TargetRecoveryTime();
    public sealed virtual void set_TargetRecoveryTime(int value);
    public bool get_TransformNoiseWords();
    public void set_TransformNoiseWords(bool value);
    public sealed virtual bool get_Trustworthy();
    public sealed virtual void set_Trustworthy(bool value);
    public int get_TwoDigitYearCutoff();
    public void set_TwoDigitYearCutoff(int value);
    public sealed virtual DatabaseUserAccess get_UserAccess();
    public sealed virtual void set_UserAccess(DatabaseUserAccess value);
    public string get_UserName();
    public int get_Version();
    public string get_AzureEdition();
    public void set_AzureEdition(string value);
    public string get_AzureServiceObjective();
    public void set_AzureServiceObjective(string value);
    public bool get_IsDbManager();
    public bool get_IsLoginManager();
    public bool get_IsMaxSizeApplicable();
    public bool get_IsSqlDwEdition();
    public double get_MaxSizeInBytes();
    public void set_MaxSizeInBytes(double value);
    public bool get_TemporalHistoryRetentionEnabled();
    public void set_TemporalHistoryRetentionEnabled(bool value);
    internal virtual String[] GetNonAlterableProperties();
    internal virtual object GetPropertyDefaultValue(string propname);
    public void Deny(DatabasePermissionSet permission, String[] granteeNames);
    public void Deny(DatabasePermissionSet permission, String[] granteeNames, bool cascade);
    public void Grant(DatabasePermissionSet permission, String[] granteeNames);
    public void Grant(DatabasePermissionSet permission, String[] granteeNames, bool grantGrant);
    public void Grant(DatabasePermissionSet permission, String[] granteeNames, bool grantGrant, string asRole);
    public void Revoke(DatabasePermissionSet permission, String[] granteeNames);
    public void Revoke(DatabasePermissionSet permission, String[] granteeNames, bool revokeGrant, bool cascade);
    public void Revoke(DatabasePermissionSet permission, String[] granteeNames, bool revokeGrant, bool cascade, string asRole);
    public void Deny(DatabasePermissionSet permission, string granteeName);
    public void Deny(DatabasePermissionSet permission, string granteeName, bool cascade);
    public void Grant(DatabasePermissionSet permission, string granteeName);
    public void Grant(DatabasePermissionSet permission, string granteeName, bool grantGrant);
    public void Grant(DatabasePermissionSet permission, string granteeName, bool grantGrant, string asRole);
    public void Revoke(DatabasePermissionSet permission, string granteeName);
    public void Revoke(DatabasePermissionSet permission, string granteeName, bool revokeGrant, bool cascade);
    public void Revoke(DatabasePermissionSet permission, string granteeName, bool revokeGrant, bool cascade, string asRole);
    public DatabasePermissionInfo[] EnumDatabasePermissions();
    public DatabasePermissionInfo[] EnumDatabasePermissions(string granteeName);
    public DatabasePermissionInfo[] EnumDatabasePermissions(DatabasePermissionSet permissions);
    public DatabasePermissionInfo[] EnumDatabasePermissions(string granteeName, DatabasePermissionSet permissions);
    public ObjectPermissionInfo[] EnumObjectPermissions();
    public ObjectPermissionInfo[] EnumObjectPermissions(string granteeName);
    public ObjectPermissionInfo[] EnumObjectPermissions(ObjectPermissionSet permissions);
    public ObjectPermissionInfo[] EnumObjectPermissions(string granteeName, ObjectPermissionSet permissions);
    public DatabaseEvents get_Events();
}
public class Microsoft.SqlServer.Management.Smo.DatabaseAdapter : DatabaseAdapterBase {
    public DatabaseAdapter(Database obj);
}
public class Microsoft.SqlServer.Management.Smo.DatabaseAdapterBase : object {
    private Database wrappedObject;
    protected Database Database { get; }
    public double Size { get; }
    public DatabaseStatus Status { get; }
    public DateTime LastBackupDate { get; }
    public DateTime LastLogBackupDate { get; }
    public bool IsSystemObject { get; }
    public bool Trustworthy { get; public set; }
    public bool IsLedger { get; }
    public bool AutoClose { get; public set; }
    public bool AutoShrink { get; public set; }
    public RecoveryModel RecoveryModel { get; public set; }
    public bool ReadOnly { get; public set; }
    public PageVerify PageVerify { get; public set; }
    public int TargetRecoveryTime { get; public set; }
    public DelayedDurability DelayedDurability { get; public set; }
    public DatabaseAdapterBase(Database obj);
    protected Database get_Database();
    public sealed virtual double get_Size();
    public sealed virtual DatabaseStatus get_Status();
    public sealed virtual DateTime get_LastBackupDate();
    public sealed virtual DateTime get_LastLogBackupDate();
    public sealed virtual bool get_IsSystemObject();
    public sealed virtual bool get_Trustworthy();
    public sealed virtual void set_Trustworthy(bool value);
    public bool get_IsLedger();
    public sealed virtual bool get_AutoClose();
    public sealed virtual void set_AutoClose(bool value);
    public sealed virtual bool get_AutoShrink();
    public sealed virtual void set_AutoShrink(bool value);
    public sealed virtual RecoveryModel get_RecoveryModel();
    public sealed virtual void set_RecoveryModel(RecoveryModel value);
    public sealed virtual bool get_ReadOnly();
    public sealed virtual void set_ReadOnly(bool value);
    public sealed virtual PageVerify get_PageVerify();
    public sealed virtual void set_PageVerify(PageVerify value);
    public sealed virtual int get_TargetRecoveryTime();
    public sealed virtual void set_TargetRecoveryTime(int value);
    public sealed virtual DelayedDurability get_DelayedDurability();
    public sealed virtual void set_DelayedDurability(DelayedDurability value);
    public virtual void Refresh();
    public virtual void Alter();
    public string GetVolume(string file);
    protected bool DataFileVolumeNotIn(List`1<string> checkVolumes);
}
[EvaluationModeAttribute("4")]
[PhysicalFacetAttribute]
[SfcElementAttribute("16")]
public class Microsoft.SqlServer.Management.Smo.DatabaseAuditSpecification : AuditSpecification {
    public static string UrnSuffix { get; }
    internal static string ParentType { get; }
    [SfcKeyAttribute("0")]
[SfcPropertyAttribute("1280")]
public string Name { get; public set; }
    [SfcObjectAttribute("1")]
public Database Parent { get; public set; }
    private bool Microsoft.SqlServer.Management.Sdk.Sfc.ISfcSupportsDesignMode.IsDesignMode { get; }
    [SfcPropertyAttribute("1024")]
[SfcReferenceAttribute("Microsoft.SqlServer.Management.Smo.Audit", "Server[@Name = '{0}']/Audit[@Name = '{1}']", "Mono.Cecil.CustomAttributeArgument[]")]
[CLSCompliantAttribute("False")]
public string AuditName { get; public set; }
    [SfcPropertyAttribute("1024")]
public DateTime CreateDate { get; }
    [SfcPropertyAttribute("1024")]
public DateTime DateLastModified { get; }
    [SfcPropertyAttribute("1024")]
public bool Enabled { get; }
    [SfcPropertyAttribute("1024")]
public Guid Guid { get; }
    [SfcPropertyAttribute("1024")]
public int ID { get; }
    internal DatabaseAuditSpecification(AbstractCollectionBase parentColl, ObjectKeyBase key, SqlSmoState state);
    public DatabaseAuditSpecification(Database database, string name);
    public static string get_UrnSuffix();
    internal static string get_ParentType();
    public virtual string get_Name();
    public virtual void set_Name(string value);
    public Database get_Parent();
    public void set_Parent(Database value);
    private sealed virtual override bool Microsoft.SqlServer.Management.Sdk.Sfc.ISfcSupportsDesignMode.get_IsDesignMode();
    internal virtual SqlPropertyMetadataProvider GetPropertyMetadataProvider();
    public string get_AuditName();
    public void set_AuditName(string value);
    public DateTime get_CreateDate();
    public DateTime get_DateLastModified();
    public bool get_Enabled();
    public Guid get_Guid();
    public int get_ID();
}
[DefaultMemberAttribute("Item")]
public class Microsoft.SqlServer.Management.Smo.DatabaseAuditSpecificationCollection : SimpleObjectCollectionBase {
    public Database Parent { get; }
    public DatabaseAuditSpecification Item { get; }
    public DatabaseAuditSpecification Item { get; }
    internal DatabaseAuditSpecificationCollection(SqlSmoObject parentInstance);
    public Database get_Parent();
    public DatabaseAuditSpecification get_Item(int index);
    public DatabaseAuditSpecification get_Item(string name);
    public void CopyTo(DatabaseAuditSpecification[] array, int index);
    public DatabaseAuditSpecification ItemById(int id);
    protected virtual Type GetCollectionElementType();
    internal virtual SqlSmoObject GetCollectionElementInstance(ObjectKeyBase key, SqlSmoState state);
    public void Add(DatabaseAuditSpecification databaseAuditSpecification);
    internal SqlSmoObject GetObjectByName(string name);
    internal virtual ObjectKeyBase CreateKeyFromUrn(Urn urn);
}
[CLSCompliantAttribute("False")]
public class Microsoft.SqlServer.Management.Smo.DatabaseAuditSpecificationExtender : SmoObjectExtender`1<DatabaseAuditSpecification> {
    private StringCollection audits;
    private DataTable auditSpecDetails;
    private ValidationState gridValidationState;
    private static StringCollection granularActions;
    [ExtendedPropertyAttribute]
public StringCollection Audits { get; }
    [ExtendedPropertyAttribute]
public DataTable AuditSpecificationDetails { get; public set; }
    [ExtendedPropertyAttribute]
public ValidationState GridValidationState { get; public set; }
    [ExtendedPropertyAttribute]
public string Type { get; }
    [ExtendedPropertyAttribute]
public SqlSmoState State { get; }
    [ExtendedPropertyAttribute]
public string DatabaseName { get; }
    [ExtendedPropertyAttribute]
public ServerConnection ConnectionContext { get; }
    public DatabaseAuditSpecificationExtender(DatabaseAuditSpecification databaseAuditSpecification);
    private static DatabaseAuditSpecificationExtender();
    public StringCollection get_Audits();
    public DataTable get_AuditSpecificationDetails();
    public void set_AuditSpecificationDetails(DataTable value);
    public ValidationState get_GridValidationState();
    public void set_GridValidationState(ValidationState value);
    private bool IsGranular(string action);
    public string get_Type();
    public SqlSmoState get_State();
    public string get_DatabaseName();
    public ServerConnection get_ConnectionContext();
    public sealed virtual ValidationState Validate(string methodName, Object[] arguments);
}
[DefaultMemberAttribute("Item")]
public class Microsoft.SqlServer.Management.Smo.DatabaseCollection : SimpleObjectCollectionBase {
    public Server Parent { get; }
    public Database Item { get; }
    public Database Item { get; }
    internal DatabaseCollection(SqlSmoObject parentInstance);
    public Server get_Parent();
    public Database get_Item(int index);
    public Database get_Item(string name);
    public void CopyTo(Database[] array, int index);
    public Database ItemById(int id);
    protected virtual Type GetCollectionElementType();
    internal virtual SqlSmoObject GetCollectionElementInstance(ObjectKeyBase key, SqlSmoState state);
    public void Add(Database database);
    internal SqlSmoObject GetObjectByName(string name);
    internal virtual ObjectKeyBase CreateKeyFromUrn(Urn urn);
}
[EvaluationModeAttribute("4")]
[PhysicalFacetAttribute("1")]
[SfcElementTypeAttribute("DdlTrigger")]
[SfcElementAttribute("48")]
public class Microsoft.SqlServer.Management.Smo.DatabaseDdlTrigger : DdlTriggerBase {
    [SfcKeyAttribute("0")]
[SfcPropertyAttribute("7424")]
public string Name { get; public set; }
    [SfcObjectAttribute("1")]
public Database Parent { get; public set; }
    public static string UrnSuffix { get; }
    public DatabaseDdlTriggerEventSet DdlTriggerEvents { get; public set; }
    [SfcObjectAttribute("1", "0", "Microsoft.SqlServer.Management.Smo.ExtendedProperty")]
public ExtendedPropertyCollection ExtendedProperties { get; }
    [SfcPropertyAttribute("3104")]
public string TextBody { get; public set; }
    [SfcPropertyAttribute("3104")]
public string TextHeader { get; public set; }
    [SfcPropertyAttribute("3072")]
public bool TextMode { get; public set; }
    private bool Microsoft.SqlServer.Management.Sdk.Sfc.ISfcSupportsDesignMode.IsDesignMode { get; }
    [SfcPropertyAttribute("3072")]
public bool AnsiNullsStatus { get; public set; }
    [SfcPropertyAttribute("7168")]
[SfcReferenceAttribute("Microsoft.SqlServer.Management.Smo.SqlAssembly", "Server[@Name = '{0}']/Database[@Name = '{1}']/SqlAssembly[@Name = '{2}']", "Mono.Cecil.CustomAttributeArgument[]")]
[CLSCompliantAttribute("False")]
public string AssemblyName { get; public set; }
    [SfcPropertyAttribute("3104")]
public int BodyStartIndex { get; }
    [SfcPropertyAttribute("7168")]
public string ClassName { get; public set; }
    [SfcPropertyAttribute("3072")]
public DateTime CreateDate { get; }
    [SfcPropertyAttribute("3072")]
public DateTime DateLastModified { get; }
    [SfcPropertyAttribute("3072")]
public DatabaseDdlTriggerExecutionContext ExecutionContext { get; public set; }
    [SfcPropertyAttribute("3072")]
[SfcReferenceAttribute("Microsoft.SqlServer.Management.Smo.User", "Server[@Name = '{0}']/Database[@Name = '{1}']/User[@Name = '{2}']", "Mono.Cecil.CustomAttributeArgument[]")]
[CLSCompliantAttribute("False")]
public string ExecutionContextUser { get; public set; }
    [SfcPropertyAttribute("3072")]
public int ID { get; }
    [SfcPropertyAttribute("3072")]
public ImplementationType ImplementationType { get; public set; }
    [SfcPropertyAttribute("3072")]
public bool IsEnabled { get; public set; }
    [SfcPropertyAttribute("11264")]
public bool IsEncrypted { get; public set; }
    [SfcPropertyAttribute("3072")]
public bool IsSystemObject { get; }
    [SfcPropertyAttribute("7168")]
public string MethodName { get; public set; }
    [SfcPropertyAttribute("3072")]
public bool NotForReplication { get; public set; }
    [SfcPropertyAttribute("3072")]
public bool QuotedIdentifierStatus { get; public set; }
    [SfcPropertyAttribute("3104")]
public string Text { get; }
    internal DatabaseDdlTrigger(AbstractCollectionBase parentColl, ObjectKeyBase key, SqlSmoState state);
    public DatabaseDdlTrigger(Database database, string name);
    public DatabaseDdlTrigger(Database parent, string name, DatabaseDdlTriggerEventSet events, string textBody);
    public DatabaseDdlTrigger(Database parent, string name, DatabaseDdlTriggerEventSet events, string assemblyName, string className, string method);
    public virtual string get_Name();
    public virtual void set_Name(string value);
    public Database get_Parent();
    public void set_Parent(Database value);
    public static string get_UrnSuffix();
    public DatabaseDdlTriggerEventSet get_DdlTriggerEvents();
    public void set_DdlTriggerEvents(DatabaseDdlTriggerEventSet value);
    public sealed virtual ExtendedPropertyCollection get_ExtendedProperties();
    internal virtual void ScriptDrop(StringCollection queries, ScriptingPreferences sp);
    internal virtual void AddDdlTriggerEvents(StringBuilder sb, ScriptingPreferences sp);
    internal virtual PropagateInfo[] GetPropagateInfo(PropagateAction action);
    internal virtual void ValidateProperty(Property prop, object value);
    protected virtual bool IsObjectDirty();
    protected virtual void CleanObject();
    protected virtual bool IsEventSetDirty();
    internal virtual string GetIfNotExistStatement(ScriptingPreferences sp, string prefix);
    public virtual string get_TextBody();
    public virtual void set_TextBody(string value);
    public virtual string get_TextHeader();
    public virtual void set_TextHeader(string value);
    public virtual bool get_TextMode();
    public virtual void set_TextMode(bool value);
    internal static String[] GetScriptFields(Type parentType, ServerVersion version, DatabaseEngineType databaseEngineType, DatabaseEngineEdition databaseEngineEdition, bool defaultTextMode);
    internal static String[] GetScriptFields2(Type parentType, ServerVersion version, DatabaseEngineType databaseEngineType, DatabaseEngineEdition databaseEngineEdition, bool defaultTextMode, ScriptingPreferences sp);
    private sealed virtual override bool Microsoft.SqlServer.Management.Sdk.Sfc.ISfcSupportsDesignMode.get_IsDesignMode();
    internal virtual SqlPropertyMetadataProvider GetPropertyMetadataProvider();
    public bool get_AnsiNullsStatus();
    public void set_AnsiNullsStatus(bool value);
    public string get_AssemblyName();
    public void set_AssemblyName(string value);
    public int get_BodyStartIndex();
    public string get_ClassName();
    public void set_ClassName(string value);
    public DateTime get_CreateDate();
    public DateTime get_DateLastModified();
    public DatabaseDdlTriggerExecutionContext get_ExecutionContext();
    public void set_ExecutionContext(DatabaseDdlTriggerExecutionContext value);
    public string get_ExecutionContextUser();
    public void set_ExecutionContextUser(string value);
    public int get_ID();
    public ImplementationType get_ImplementationType();
    public void set_ImplementationType(ImplementationType value);
    public bool get_IsEnabled();
    public void set_IsEnabled(bool value);
    public bool get_IsEncrypted();
    public void set_IsEncrypted(bool value);
    public bool get_IsSystemObject();
    public string get_MethodName();
    public void set_MethodName(string value);
    public bool get_NotForReplication();
    public void set_NotForReplication(bool value);
    public bool get_QuotedIdentifierStatus();
    public void set_QuotedIdentifierStatus(bool value);
    public string get_Text();
    private string StringFromDatabaseDdlTriggerEvent(int evt);
}
[DefaultMemberAttribute("Item")]
public class Microsoft.SqlServer.Management.Smo.DatabaseDdlTriggerCollection : SimpleObjectCollectionBase {
    public Database Parent { get; }
    public DatabaseDdlTrigger Item { get; }
    public DatabaseDdlTrigger Item { get; }
    internal DatabaseDdlTriggerCollection(SqlSmoObject parentInstance);
    public Database get_Parent();
    public DatabaseDdlTrigger get_Item(int index);
    public DatabaseDdlTrigger get_Item(string name);
    public void CopyTo(DatabaseDdlTrigger[] array, int index);
    public DatabaseDdlTrigger ItemById(int id);
    protected virtual Type GetCollectionElementType();
    internal virtual SqlSmoObject GetCollectionElementInstance(ObjectKeyBase key, SqlSmoState state);
    public void Add(DatabaseDdlTrigger databaseDdlTrigger);
    internal SqlSmoObject GetObjectByName(string name);
    internal virtual ObjectKeyBase CreateKeyFromUrn(Urn urn);
}
[SfcElementAttribute("16")]
public class Microsoft.SqlServer.Management.Smo.DatabaseEncryptionKey : SqlSmoObject {
    [SfcObjectAttribute("1")]
public Database Parent { get; public set; }
    public static string UrnSuffix { get; }
    [SfcPropertyAttribute("1024")]
public DateTime CreateDate { get; }
    [SfcPropertyAttribute("1024")]
public DatabaseEncryptionAlgorithm EncryptionAlgorithm { get; public set; }
    [SfcPropertyAttribute("1024")]
public DatabaseEncryptionState EncryptionState { get; }
    [SfcPropertyAttribute("1024")]
public DatabaseEncryptionType EncryptionType { get; public set; }
    [SfcPropertyAttribute("1024")]
public string EncryptorName { get; public set; }
    [SfcPropertyAttribute("1024")]
public DateTime ModifyDate { get; }
    [SfcPropertyAttribute("1024")]
public DateTime OpenedDate { get; }
    [SfcPropertyAttribute("1024")]
public DateTime RegenerateDate { get; }
    [SfcPropertyAttribute("1024")]
public DateTime SetDate { get; }
    [SfcPropertyAttribute("1024")]
public Byte[] Thumbprint { get; }
    internal DatabaseEncryptionKey(Database parentdb, ObjectKeyBase key, SqlSmoState state);
    public Database get_Parent();
    public void set_Parent(Database value);
    internal virtual void ValidateParent(SqlSmoObject newParent);
    protected sealed virtual void GetUrnRecursive(StringBuilder urnbuilder, UrnIdOption idOption);
    protected internal virtual string GetDBName();
    public static string get_UrnSuffix();
    public sealed virtual void Create();
    internal virtual void ScriptCreate(StringCollection createQuery, ScriptingPreferences sp);
    public sealed virtual void Alter();
    internal virtual void ScriptAlter(StringCollection alterQuery, ScriptingPreferences sp);
    public sealed virtual void Drop();
    public sealed virtual void DropIfExists();
    internal virtual void ScriptDrop(StringCollection dropQuery, ScriptingPreferences sp);
    public sealed virtual StringCollection Script();
    public sealed virtual StringCollection Script(ScriptingOptions scriptingOptions);
    public void Regenerate(DatabaseEncryptionAlgorithm encryptAlgo);
    public void Reencrypt(string encryptorName, DatabaseEncryptionType encryptionType);
    private string GetEncryptionAlgorithm(DatabaseEncryptionAlgorithm encryptAlgo);
    private string GetEncryptionType(DatabaseEncryptionType encryptionType);
    internal virtual SqlPropertyMetadataProvider GetPropertyMetadataProvider();
    public DateTime get_CreateDate();
    public DatabaseEncryptionAlgorithm get_EncryptionAlgorithm();
    public void set_EncryptionAlgorithm(DatabaseEncryptionAlgorithm value);
    public DatabaseEncryptionState get_EncryptionState();
    public DatabaseEncryptionType get_EncryptionType();
    public void set_EncryptionType(DatabaseEncryptionType value);
    public string get_EncryptorName();
    public void set_EncryptorName(string value);
    public DateTime get_ModifyDate();
    public DateTime get_OpenedDate();
    public DateTime get_RegenerateDate();
    public DateTime get_SetDate();
    public Byte[] get_Thumbprint();
}
[CLSCompliantAttribute("False")]
public class Microsoft.SqlServer.Management.Smo.DatabaseEncryptionKeyExtender : SmoObjectExtender`1<DatabaseEncryptionKey> {
    private StringCollection certificateNames;
    private StringCollection asymmetricKeyNames;
    private bool reencrypt;
    private bool regenerate;
    private string certificateName;
    private string asymmetricKeyName;
    private Hashtable certificateNameBackupDateHash;
    [ExtendedPropertyAttribute]
public StringCollection CertificateNames { get; }
    [ExtendedPropertyAttribute]
public StringCollection AsymmetricKeyNames { get; }
    [ExtendedPropertyAttribute]
public bool DatabaseEncryptionEnabled { get; public set; }
    [ExtendedPropertyAttribute]
public SqlSmoState State { get; }
    [ExtendedPropertyAttribute]
public DatabaseEncryptionState EncryptionState { get; }
    [ExtendedPropertyAttribute]
public bool Regenerate { get; public set; }
    [ExtendedPropertyAttribute]
public bool ReEncrypt { get; public set; }
    [ExtendedPropertyAttribute]
public string CertificateName { get; public set; }
    [ExtendedPropertyAttribute]
public string AsymmetricKeyName { get; public set; }
    public DatabaseEncryptionKeyExtender(DatabaseEncryptionKey dek);
    public StringCollection get_CertificateNames();
    public StringCollection get_AsymmetricKeyNames();
    public bool get_DatabaseEncryptionEnabled();
    public void set_DatabaseEncryptionEnabled(bool value);
    public SqlSmoState get_State();
    public DatabaseEncryptionState get_EncryptionState();
    public bool get_Regenerate();
    public void set_Regenerate(bool value);
    public bool get_ReEncrypt();
    public void set_ReEncrypt(bool value);
    public string get_CertificateName();
    public void set_CertificateName(string value);
    public string get_AsymmetricKeyName();
    public void set_AsymmetricKeyName(string value);
    public sealed virtual ValidationState Validate(string methodName, Object[] arguments);
}
public class Microsoft.SqlServer.Management.Smo.DatabaseEvent : object {
    private DatabaseEventValues m_value;
    internal DatabaseEventValues Value { get; }
    public static DatabaseEvent AddRoleMember { get; }
    public static DatabaseEvent AddSensitivityClassification { get; }
    public static DatabaseEvent AddSignature { get; }
    public static DatabaseEvent AddSignatureSchemaObject { get; }
    public static DatabaseEvent AlterApplicationRole { get; }
    public static DatabaseEvent AlterAssembly { get; }
    public static DatabaseEvent AlterAsymmetricKey { get; }
    public static DatabaseEvent AlterAudit { get; }
    public static DatabaseEvent AlterAuthorizationDatabase { get; }
    public static DatabaseEvent AlterBrokerPriority { get; }
    public static DatabaseEvent AlterCertificate { get; }
    public static DatabaseEvent AlterColumnEncryptionKey { get; }
    public static DatabaseEvent AlterDatabaseAuditSpecification { get; }
    public static DatabaseEvent AlterDatabaseEncryptionKey { get; }
    public static DatabaseEvent AlterDatabaseScopedConfiguration { get; }
    public static DatabaseEvent AlterExtendedProperty { get; }
    public static DatabaseEvent AlterExternalLanguage { get; }
    public static DatabaseEvent AlterExternalLibrary { get; }
    public static DatabaseEvent AlterFulltextCatalog { get; }
    public static DatabaseEvent AlterFulltextIndex { get; }
    public static DatabaseEvent AlterFulltextStoplist { get; }
    public static DatabaseEvent AlterFunction { get; }
    public static DatabaseEvent AlterIndex { get; }
    public static DatabaseEvent AlterMasterKey { get; }
    public static DatabaseEvent AlterMessageType { get; }
    public static DatabaseEvent AlterPartitionFunction { get; }
    public static DatabaseEvent AlterPartitionScheme { get; }
    public static DatabaseEvent AlterPlanGuide { get; }
    public static DatabaseEvent AlterProcedure { get; }
    public static DatabaseEvent AlterQueue { get; }
    public static DatabaseEvent AlterRemoteServiceBinding { get; }
    public static DatabaseEvent AlterRole { get; }
    public static DatabaseEvent AlterRoute { get; }
    public static DatabaseEvent AlterSchema { get; }
    public static DatabaseEvent AlterSearchPropertyList { get; }
    public static DatabaseEvent AlterSecurityPolicy { get; }
    public static DatabaseEvent AlterSequence { get; }
    public static DatabaseEvent AlterService { get; }
    public static DatabaseEvent AlterSymmetricKey { get; }
    public static DatabaseEvent AlterTable { get; }
    public static DatabaseEvent AlterTrigger { get; }
    public static DatabaseEvent AlterUser { get; }
    public static DatabaseEvent AlterView { get; }
    public static DatabaseEvent AlterXmlSchemaCollection { get; }
    public static DatabaseEvent BindDefault { get; }
    public static DatabaseEvent BindRule { get; }
    public static DatabaseEvent CreateApplicationRole { get; }
    public static DatabaseEvent CreateAssembly { get; }
    public static DatabaseEvent CreateAsymmetricKey { get; }
    public static DatabaseEvent CreateAudit { get; }
    public static DatabaseEvent CreateBrokerPriority { get; }
    public static DatabaseEvent CreateCertificate { get; }
    public static DatabaseEvent CreateColumnEncryptionKey { get; }
    public static DatabaseEvent CreateColumnMasterKey { get; }
    public static DatabaseEvent CreateContract { get; }
    public static DatabaseEvent CreateDatabaseAuditSpecification { get; }
    public static DatabaseEvent CreateDatabaseEncryptionKey { get; }
    public static DatabaseEvent CreateDefault { get; }
    public static DatabaseEvent CreateEventNotification { get; }
    public static DatabaseEvent CreateExtendedProperty { get; }
    public static DatabaseEvent CreateExternalLanguage { get; }
    public static DatabaseEvent CreateExternalLibrary { get; }
    public static DatabaseEvent CreateFulltextCatalog { get; }
    public static DatabaseEvent CreateFulltextIndex { get; }
    public static DatabaseEvent CreateFulltextStoplist { get; }
    public static DatabaseEvent CreateFunction { get; }
    public static DatabaseEvent CreateIndex { get; }
    public static DatabaseEvent CreateMasterKey { get; }
    public static DatabaseEvent CreateMessageType { get; }
    public static DatabaseEvent CreatePartitionFunction { get; }
    public static DatabaseEvent CreatePartitionScheme { get; }
    public static DatabaseEvent CreatePlanGuide { get; }
    public static DatabaseEvent CreateProcedure { get; }
    public static DatabaseEvent CreateQueue { get; }
    public static DatabaseEvent CreateRemoteServiceBinding { get; }
    public static DatabaseEvent CreateRole { get; }
    public static DatabaseEvent CreateRoute { get; }
    public static DatabaseEvent CreateRule { get; }
    public static DatabaseEvent CreateSchema { get; }
    public static DatabaseEvent CreateSearchPropertyList { get; }
    public static DatabaseEvent CreateSecurityPolicy { get; }
    public static DatabaseEvent CreateSequence { get; }
    public static DatabaseEvent CreateService { get; }
    public static DatabaseEvent CreateSpatialIndex { get; }
    public static DatabaseEvent CreateStatistics { get; }
    public static DatabaseEvent CreateSymmetricKey { get; }
    public static DatabaseEvent CreateSynonym { get; }
    public static DatabaseEvent CreateTable { get; }
    public static DatabaseEvent CreateTrigger { get; }
    public static DatabaseEvent CreateType { get; }
    public static DatabaseEvent CreateUser { get; }
    public static DatabaseEvent CreateView { get; }
    public static DatabaseEvent CreateXmlIndex { get; }
    public static DatabaseEvent CreateXmlSchemaCollection { get; }
    public static DatabaseEvent DenyDatabase { get; }
    public static DatabaseEvent DropApplicationRole { get; }
    public static DatabaseEvent DropAssembly { get; }
    public static DatabaseEvent DropAsymmetricKey { get; }
    public static DatabaseEvent DropAudit { get; }
    public static DatabaseEvent DropBrokerPriority { get; }
    public static DatabaseEvent DropCertificate { get; }
    public static DatabaseEvent DropColumnEncryptionKey { get; }
    public static DatabaseEvent DropColumnMasterKey { get; }
    public static DatabaseEvent DropContract { get; }
    public static DatabaseEvent DropDatabase { get; }
    public static DatabaseEvent DropDatabaseAuditSpecification { get; }
    public static DatabaseEvent DropDatabaseEncryptionKey { get; }
    public static DatabaseEvent DropDefault { get; }
    public static DatabaseEvent DropEventNotification { get; }
    public static DatabaseEvent DropExtendedProperty { get; }
    public static DatabaseEvent DropExternalLanguage { get; }
    public static DatabaseEvent DropExternalLibrary { get; }
    public static DatabaseEvent DropFulltextCatalog { get; }
    public static DatabaseEvent DropFulltextIndex { get; }
    public static DatabaseEvent DropFulltextStoplist { get; }
    public static DatabaseEvent DropFunction { get; }
    public static DatabaseEvent DropIndex { get; }
    public static DatabaseEvent DropMasterKey { get; }
    public static DatabaseEvent DropMessageType { get; }
    public static DatabaseEvent DropPartitionFunction { get; }
    public static DatabaseEvent DropPartitionScheme { get; }
    public static DatabaseEvent DropPlanGuide { get; }
    public static DatabaseEvent DropProcedure { get; }
    public static DatabaseEvent DropQueue { get; }
    public static DatabaseEvent DropRemoteServiceBinding { get; }
    public static DatabaseEvent DropRole { get; }
    public static DatabaseEvent DropRoleMember { get; }
    public static DatabaseEvent DropRoute { get; }
    public static DatabaseEvent DropRule { get; }
    public static DatabaseEvent DropSchema { get; }
    public static DatabaseEvent DropSearchPropertyList { get; }
    public static DatabaseEvent DropSecurityPolicy { get; }
    public static DatabaseEvent DropSensitivityClassification { get; }
    public static DatabaseEvent DropSequence { get; }
    public static DatabaseEvent DropService { get; }
    public static DatabaseEvent DropSignature { get; }
    public static DatabaseEvent DropSignatureSchemaObject { get; }
    public static DatabaseEvent DropStatistics { get; }
    public static DatabaseEvent DropSymmetricKey { get; }
    public static DatabaseEvent DropSynonym { get; }
    public static DatabaseEvent DropTable { get; }
    public static DatabaseEvent DropTrigger { get; }
    public static DatabaseEvent DropType { get; }
    public static DatabaseEvent DropUser { get; }
    public static DatabaseEvent DropView { get; }
    public static DatabaseEvent DropXmlSchemaCollection { get; }
    public static DatabaseEvent GrantDatabase { get; }
    public static DatabaseEvent Rename { get; }
    public static DatabaseEvent RevokeDatabase { get; }
    public static DatabaseEvent UnbindDefault { get; }
    public static DatabaseEvent UnbindRule { get; }
    public static DatabaseEvent UpdateStatistics { get; }
    internal DatabaseEvent(DatabaseEventValues eventValue);
    internal DatabaseEventValues get_Value();
    public static DatabaseEventSet op_Implicit(DatabaseEvent eventValue);
    public static DatabaseEventSet op_Addition(DatabaseEvent eventLeft, DatabaseEvent eventRight);
    public static DatabaseEventSet Add(DatabaseEvent eventLeft, DatabaseEvent eventRight);
    public static DatabaseEventSet op_BitwiseOr(DatabaseEvent eventLeft, DatabaseEvent eventRight);
    public static DatabaseEventSet BitwiseOr(DatabaseEvent eventLeft, DatabaseEvent eventRight);
    public virtual string ToString();
    public static bool op_Equality(DatabaseEvent a, DatabaseEvent b);
    public static bool op_Inequality(DatabaseEvent a, DatabaseEvent b);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static DatabaseEvent get_AddRoleMember();
    public static DatabaseEvent get_AddSensitivityClassification();
    public static DatabaseEvent get_AddSignature();
    public static DatabaseEvent get_AddSignatureSchemaObject();
    public static DatabaseEvent get_AlterApplicationRole();
    public static DatabaseEvent get_AlterAssembly();
    public static DatabaseEvent get_AlterAsymmetricKey();
    public static DatabaseEvent get_AlterAudit();
    public static DatabaseEvent get_AlterAuthorizationDatabase();
    public static DatabaseEvent get_AlterBrokerPriority();
    public static DatabaseEvent get_AlterCertificate();
    public static DatabaseEvent get_AlterColumnEncryptionKey();
    public static DatabaseEvent get_AlterDatabaseAuditSpecification();
    public static DatabaseEvent get_AlterDatabaseEncryptionKey();
    public static DatabaseEvent get_AlterDatabaseScopedConfiguration();
    public static DatabaseEvent get_AlterExtendedProperty();
    public static DatabaseEvent get_AlterExternalLanguage();
    public static DatabaseEvent get_AlterExternalLibrary();
    public static DatabaseEvent get_AlterFulltextCatalog();
    public static DatabaseEvent get_AlterFulltextIndex();
    public static DatabaseEvent get_AlterFulltextStoplist();
    public static DatabaseEvent get_AlterFunction();
    public static DatabaseEvent get_AlterIndex();
    public static DatabaseEvent get_AlterMasterKey();
    public static DatabaseEvent get_AlterMessageType();
    public static DatabaseEvent get_AlterPartitionFunction();
    public static DatabaseEvent get_AlterPartitionScheme();
    public static DatabaseEvent get_AlterPlanGuide();
    public static DatabaseEvent get_AlterProcedure();
    public static DatabaseEvent get_AlterQueue();
    public static DatabaseEvent get_AlterRemoteServiceBinding();
    public static DatabaseEvent get_AlterRole();
    public static DatabaseEvent get_AlterRoute();
    public static DatabaseEvent get_AlterSchema();
    public static DatabaseEvent get_AlterSearchPropertyList();
    public static DatabaseEvent get_AlterSecurityPolicy();
    public static DatabaseEvent get_AlterSequence();
    public static DatabaseEvent get_AlterService();
    public static DatabaseEvent get_AlterSymmetricKey();
    public static DatabaseEvent get_AlterTable();
    public static DatabaseEvent get_AlterTrigger();
    public static DatabaseEvent get_AlterUser();
    public static DatabaseEvent get_AlterView();
    public static DatabaseEvent get_AlterXmlSchemaCollection();
    public static DatabaseEvent get_BindDefault();
    public static DatabaseEvent get_BindRule();
    public static DatabaseEvent get_CreateApplicationRole();
    public static DatabaseEvent get_CreateAssembly();
    public static DatabaseEvent get_CreateAsymmetricKey();
    public static DatabaseEvent get_CreateAudit();
    public static DatabaseEvent get_CreateBrokerPriority();
    public static DatabaseEvent get_CreateCertificate();
    public static DatabaseEvent get_CreateColumnEncryptionKey();
    public static DatabaseEvent get_CreateColumnMasterKey();
    public static DatabaseEvent get_CreateContract();
    public static DatabaseEvent get_CreateDatabaseAuditSpecification();
    public static DatabaseEvent get_CreateDatabaseEncryptionKey();
    public static DatabaseEvent get_CreateDefault();
    public static DatabaseEvent get_CreateEventNotification();
    public static DatabaseEvent get_CreateExtendedProperty();
    public static DatabaseEvent get_CreateExternalLanguage();
    public static DatabaseEvent get_CreateExternalLibrary();
    public static DatabaseEvent get_CreateFulltextCatalog();
    public static DatabaseEvent get_CreateFulltextIndex();
    public static DatabaseEvent get_CreateFulltextStoplist();
    public static DatabaseEvent get_CreateFunction();
    public static DatabaseEvent get_CreateIndex();
    public static DatabaseEvent get_CreateMasterKey();
    public static DatabaseEvent get_CreateMessageType();
    public static DatabaseEvent get_CreatePartitionFunction();
    public static DatabaseEvent get_CreatePartitionScheme();
    public static DatabaseEvent get_CreatePlanGuide();
    public static DatabaseEvent get_CreateProcedure();
    public static DatabaseEvent get_CreateQueue();
    public static DatabaseEvent get_CreateRemoteServiceBinding();
    public static DatabaseEvent get_CreateRole();
    public static DatabaseEvent get_CreateRoute();
    public static DatabaseEvent get_CreateRule();
    public static DatabaseEvent get_CreateSchema();
    public static DatabaseEvent get_CreateSearchPropertyList();
    public static DatabaseEvent get_CreateSecurityPolicy();
    public static DatabaseEvent get_CreateSequence();
    public static DatabaseEvent get_CreateService();
    public static DatabaseEvent get_CreateSpatialIndex();
    public static DatabaseEvent get_CreateStatistics();
    public static DatabaseEvent get_CreateSymmetricKey();
    public static DatabaseEvent get_CreateSynonym();
    public static DatabaseEvent get_CreateTable();
    public static DatabaseEvent get_CreateTrigger();
    public static DatabaseEvent get_CreateType();
    public static DatabaseEvent get_CreateUser();
    public static DatabaseEvent get_CreateView();
    public static DatabaseEvent get_CreateXmlIndex();
    public static DatabaseEvent get_CreateXmlSchemaCollection();
    public static DatabaseEvent get_DenyDatabase();
    public static DatabaseEvent get_DropApplicationRole();
    public static DatabaseEvent get_DropAssembly();
    public static DatabaseEvent get_DropAsymmetricKey();
    public static DatabaseEvent get_DropAudit();
    public static DatabaseEvent get_DropBrokerPriority();
    public static DatabaseEvent get_DropCertificate();
    public static DatabaseEvent get_DropColumnEncryptionKey();
    public static DatabaseEvent get_DropColumnMasterKey();
    public static DatabaseEvent get_DropContract();
    public static DatabaseEvent get_DropDatabase();
    public static DatabaseEvent get_DropDatabaseAuditSpecification();
    public static DatabaseEvent get_DropDatabaseEncryptionKey();
    public static DatabaseEvent get_DropDefault();
    public static DatabaseEvent get_DropEventNotification();
    public static DatabaseEvent get_DropExtendedProperty();
    public static DatabaseEvent get_DropExternalLanguage();
    public static DatabaseEvent get_DropExternalLibrary();
    public static DatabaseEvent get_DropFulltextCatalog();
    public static DatabaseEvent get_DropFulltextIndex();
    public static DatabaseEvent get_DropFulltextStoplist();
    public static DatabaseEvent get_DropFunction();
    public static DatabaseEvent get_DropIndex();
    public static DatabaseEvent get_DropMasterKey();
    public static DatabaseEvent get_DropMessageType();
    public static DatabaseEvent get_DropPartitionFunction();
    public static DatabaseEvent get_DropPartitionScheme();
    public static DatabaseEvent get_DropPlanGuide();
    public static DatabaseEvent get_DropProcedure();
    public static DatabaseEvent get_DropQueue();
    public static DatabaseEvent get_DropRemoteServiceBinding();
    public static DatabaseEvent get_DropRole();
    public static DatabaseEvent get_DropRoleMember();
    public static DatabaseEvent get_DropRoute();
    public static DatabaseEvent get_DropRule();
    public static DatabaseEvent get_DropSchema();
    public static DatabaseEvent get_DropSearchPropertyList();
    public static DatabaseEvent get_DropSecurityPolicy();
    public static DatabaseEvent get_DropSensitivityClassification();
    public static DatabaseEvent get_DropSequence();
    public static DatabaseEvent get_DropService();
    public static DatabaseEvent get_DropSignature();
    public static DatabaseEvent get_DropSignatureSchemaObject();
    public static DatabaseEvent get_DropStatistics();
    public static DatabaseEvent get_DropSymmetricKey();
    public static DatabaseEvent get_DropSynonym();
    public static DatabaseEvent get_DropTable();
    public static DatabaseEvent get_DropTrigger();
    public static DatabaseEvent get_DropType();
    public static DatabaseEvent get_DropUser();
    public static DatabaseEvent get_DropView();
    public static DatabaseEvent get_DropXmlSchemaCollection();
    public static DatabaseEvent get_GrantDatabase();
    public static DatabaseEvent get_Rename();
    public static DatabaseEvent get_RevokeDatabase();
    public static DatabaseEvent get_UnbindDefault();
    public static DatabaseEvent get_UnbindRule();
    public static DatabaseEvent get_UpdateStatistics();
}
public class Microsoft.SqlServer.Management.Smo.DatabaseEventArgs : SmoEventArgs {
    private object innerObject;
    private string databaseName;
    private DatabaseEventType databaseEventType;
    public object SmoObject { get; }
    public DatabaseEventType DatabaseEventType { get; }
    public string Name { get; }
    public DatabaseEventArgs(Urn urn, object obj, string name, DatabaseEventType databaseEventType);
    public object get_SmoObject();
    public DatabaseEventType get_DatabaseEventType();
    public string get_Name();
}
public class Microsoft.SqlServer.Management.Smo.DatabaseEvents : object {
    private DatabaseEventsWorker serverEventsWorker;
    private Database parent;
    internal DatabaseEvents(Database parent);
    public DatabaseEventSet GetEventSelection();
    public void SubscribeToEvents(DatabaseEventSet events);
    public void SubscribeToEvents(DatabaseEventSet events, ServerEventHandler eventHandler);
    public void UnsubscribeFromEvents(DatabaseEventSet events);
    public void UnsubscribeAllEvents();
    public void StartEvents();
    public void StopEvents();
    public void add_ServerEvent(ServerEventHandler value);
    public void remove_ServerEvent(ServerEventHandler value);
    private void InitializeEvents();
}
public class Microsoft.SqlServer.Management.Smo.DatabaseEventSet : EventSetBase {
    public int NumberOfElements { get; }
    public bool AddRoleMember { get; public set; }
    public bool AddSensitivityClassification { get; public set; }
    public bool AddSignature { get; public set; }
    public bool AddSignatureSchemaObject { get; public set; }
    public bool AlterApplicationRole { get; public set; }
    public bool AlterAssembly { get; public set; }
    public bool AlterAsymmetricKey { get; public set; }
    public bool AlterAudit { get; public set; }
    public bool AlterAuthorizationDatabase { get; public set; }
    public bool AlterBrokerPriority { get; public set; }
    public bool AlterCertificate { get; public set; }
    public bool AlterColumnEncryptionKey { get; public set; }
    public bool AlterDatabaseAuditSpecification { get; public set; }
    public bool AlterDatabaseEncryptionKey { get; public set; }
    public bool AlterDatabaseScopedConfiguration { get; public set; }
    public bool AlterExtendedProperty { get; public set; }
    public bool AlterExternalLanguage { get; public set; }
    public bool AlterExternalLibrary { get; public set; }
    public bool AlterFulltextCatalog { get; public set; }
    public bool AlterFulltextIndex { get; public set; }
    public bool AlterFulltextStoplist { get; public set; }
    public bool AlterFunction { get; public set; }
    public bool AlterIndex { get; public set; }
    public bool AlterMasterKey { get; public set; }
    public bool AlterMessageType { get; public set; }
    public bool AlterPartitionFunction { get; public set; }
    public bool AlterPartitionScheme { get; public set; }
    public bool AlterPlanGuide { get; public set; }
    public bool AlterProcedure { get; public set; }
    public bool AlterQueue { get; public set; }
    public bool AlterRemoteServiceBinding { get; public set; }
    public bool AlterRole { get; public set; }
    public bool AlterRoute { get; public set; }
    public bool AlterSchema { get; public set; }
    public bool AlterSearchPropertyList { get; public set; }
    public bool AlterSecurityPolicy { get; public set; }
    public bool AlterSequence { get; public set; }
    public bool AlterService { get; public set; }
    public bool AlterSymmetricKey { get; public set; }
    public bool AlterTable { get; public set; }
    public bool AlterTrigger { get; public set; }
    public bool AlterUser { get; public set; }
    public bool AlterView { get; public set; }
    public bool AlterXmlSchemaCollection { get; public set; }
    public bool BindDefault { get; public set; }
    public bool BindRule { get; public set; }
    public bool CreateApplicationRole { get; public set; }
    public bool CreateAssembly { get; public set; }
    public bool CreateAsymmetricKey { get; public set; }
    public bool CreateAudit { get; public set; }
    public bool CreateBrokerPriority { get; public set; }
    public bool CreateCertificate { get; public set; }
    public bool CreateColumnEncryptionKey { get; public set; }
    public bool CreateColumnMasterKey { get; public set; }
    public bool CreateContract { get; public set; }
    public bool CreateDatabaseAuditSpecification { get; public set; }
    public bool CreateDatabaseEncryptionKey { get; public set; }
    public bool CreateDefault { get; public set; }
    public bool CreateEventNotification { get; public set; }
    public bool CreateExtendedProperty { get; public set; }
    public bool CreateExternalLanguage { get; public set; }
    public bool CreateExternalLibrary { get; public set; }
    public bool CreateFulltextCatalog { get; public set; }
    public bool CreateFulltextIndex { get; public set; }
    public bool CreateFulltextStoplist { get; public set; }
    public bool CreateFunction { get; public set; }
    public bool CreateIndex { get; public set; }
    public bool CreateMasterKey { get; public set; }
    public bool CreateMessageType { get; public set; }
    public bool CreatePartitionFunction { get; public set; }
    public bool CreatePartitionScheme { get; public set; }
    public bool CreatePlanGuide { get; public set; }
    public bool CreateProcedure { get; public set; }
    public bool CreateQueue { get; public set; }
    public bool CreateRemoteServiceBinding { get; public set; }
    public bool CreateRole { get; public set; }
    public bool CreateRoute { get; public set; }
    public bool CreateRule { get; public set; }
    public bool CreateSchema { get; public set; }
    public bool CreateSearchPropertyList { get; public set; }
    public bool CreateSecurityPolicy { get; public set; }
    public bool CreateSequence { get; public set; }
    public bool CreateService { get; public set; }
    public bool CreateSpatialIndex { get; public set; }
    public bool CreateStatistics { get; public set; }
    public bool CreateSymmetricKey { get; public set; }
    public bool CreateSynonym { get; public set; }
    public bool CreateTable { get; public set; }
    public bool CreateTrigger { get; public set; }
    public bool CreateType { get; public set; }
    public bool CreateUser { get; public set; }
    public bool CreateView { get; public set; }
    public bool CreateXmlIndex { get; public set; }
    public bool CreateXmlSchemaCollection { get; public set; }
    public bool DenyDatabase { get; public set; }
    public bool DropApplicationRole { get; public set; }
    public bool DropAssembly { get; public set; }
    public bool DropAsymmetricKey { get; public set; }
    public bool DropAudit { get; public set; }
    public bool DropBrokerPriority { get; public set; }
    public bool DropCertificate { get; public set; }
    public bool DropColumnEncryptionKey { get; public set; }
    public bool DropColumnMasterKey { get; public set; }
    public bool DropContract { get; public set; }
    public bool DropDatabase { get; public set; }
    public bool DropDatabaseAuditSpecification { get; public set; }
    public bool DropDatabaseEncryptionKey { get; public set; }
    public bool DropDefault { get; public set; }
    public bool DropEventNotification { get; public set; }
    public bool DropExtendedProperty { get; public set; }
    public bool DropExternalLanguage { get; public set; }
    public bool DropExternalLibrary { get; public set; }
    public bool DropFulltextCatalog { get; public set; }
    public bool DropFulltextIndex { get; public set; }
    public bool DropFulltextStoplist { get; public set; }
    public bool DropFunction { get; public set; }
    public bool DropIndex { get; public set; }
    public bool DropMasterKey { get; public set; }
    public bool DropMessageType { get; public set; }
    public bool DropPartitionFunction { get; public set; }
    public bool DropPartitionScheme { get; public set; }
    public bool DropPlanGuide { get; public set; }
    public bool DropProcedure { get; public set; }
    public bool DropQueue { get; public set; }
    public bool DropRemoteServiceBinding { get; public set; }
    public bool DropRole { get; public set; }
    public bool DropRoleMember { get; public set; }
    public bool DropRoute { get; public set; }
    public bool DropRule { get; public set; }
    public bool DropSchema { get; public set; }
    public bool DropSearchPropertyList { get; public set; }
    public bool DropSecurityPolicy { get; public set; }
    public bool DropSensitivityClassification { get; public set; }
    public bool DropSequence { get; public set; }
    public bool DropService { get; public set; }
    public bool DropSignature { get; public set; }
    public bool DropSignatureSchemaObject { get; public set; }
    public bool DropStatistics { get; public set; }
    public bool DropSymmetricKey { get; public set; }
    public bool DropSynonym { get; public set; }
    public bool DropTable { get; public set; }
    public bool DropTrigger { get; public set; }
    public bool DropType { get; public set; }
    public bool DropUser { get; public set; }
    public bool DropView { get; public set; }
    public bool DropXmlSchemaCollection { get; public set; }
    public bool GrantDatabase { get; public set; }
    public bool Rename { get; public set; }
    public bool RevokeDatabase { get; public set; }
    public bool UnbindDefault { get; public set; }
    public bool UnbindRule { get; public set; }
    public bool UpdateStatistics { get; public set; }
    public DatabaseEventSet(DatabaseEventSet eventSet);
    public DatabaseEventSet(DatabaseEvent anEvent);
    public DatabaseEventSet(DatabaseEvent[] events);
    internal DatabaseEventSet(BitArray storage);
    public virtual EventSetBase Copy();
    internal void SetBit(DatabaseEvent anEvent);
    internal void ResetBit(DatabaseEvent anEvent);
    public DatabaseEventSet Add(DatabaseEvent anEvent);
    public DatabaseEventSet Remove(DatabaseEvent anEvent);
    public static DatabaseEventSet op_Addition(DatabaseEventSet eventSet, DatabaseEvent anEvent);
    public static DatabaseEventSet Add(DatabaseEventSet eventSet, DatabaseEvent anEvent);
    public static DatabaseEventSet op_Subtraction(DatabaseEventSet eventSet, DatabaseEvent anEvent);
    public static DatabaseEventSet Subtract(DatabaseEventSet eventSet, DatabaseEvent anEvent);
    public virtual int get_NumberOfElements();
    public virtual string ToString();
    public bool get_AddRoleMember();
    public void set_AddRoleMember(bool value);
    public bool get_AddSensitivityClassification();
    public void set_AddSensitivityClassification(bool value);
    public bool get_AddSignature();
    public void set_AddSignature(bool value);
    public bool get_AddSignatureSchemaObject();
    public void set_AddSignatureSchemaObject(bool value);
    public bool get_AlterApplicationRole();
    public void set_AlterApplicationRole(bool value);
    public bool get_AlterAssembly();
    public void set_AlterAssembly(bool value);
    public bool get_AlterAsymmetricKey();
    public void set_AlterAsymmetricKey(bool value);
    public bool get_AlterAudit();
    public void set_AlterAudit(bool value);
    public bool get_AlterAuthorizationDatabase();
    public void set_AlterAuthorizationDatabase(bool value);
    public bool get_AlterBrokerPriority();
    public void set_AlterBrokerPriority(bool value);
    public bool get_AlterCertificate();
    public void set_AlterCertificate(bool value);
    public bool get_AlterColumnEncryptionKey();
    public void set_AlterColumnEncryptionKey(bool value);
    public bool get_AlterDatabaseAuditSpecification();
    public void set_AlterDatabaseAuditSpecification(bool value);
    public bool get_AlterDatabaseEncryptionKey();
    public void set_AlterDatabaseEncryptionKey(bool value);
    public bool get_AlterDatabaseScopedConfiguration();
    public void set_AlterDatabaseScopedConfiguration(bool value);
    public bool get_AlterExtendedProperty();
    public void set_AlterExtendedProperty(bool value);
    public bool get_AlterExternalLanguage();
    public void set_AlterExternalLanguage(bool value);
    public bool get_AlterExternalLibrary();
    public void set_AlterExternalLibrary(bool value);
    public bool get_AlterFulltextCatalog();
    public void set_AlterFulltextCatalog(bool value);
    public bool get_AlterFulltextIndex();
    public void set_AlterFulltextIndex(bool value);
    public bool get_AlterFulltextStoplist();
    public void set_AlterFulltextStoplist(bool value);
    public bool get_AlterFunction();
    public void set_AlterFunction(bool value);
    public bool get_AlterIndex();
    public void set_AlterIndex(bool value);
    public bool get_AlterMasterKey();
    public void set_AlterMasterKey(bool value);
    public bool get_AlterMessageType();
    public void set_AlterMessageType(bool value);
    public bool get_AlterPartitionFunction();
    public void set_AlterPartitionFunction(bool value);
    public bool get_AlterPartitionScheme();
    public void set_AlterPartitionScheme(bool value);
    public bool get_AlterPlanGuide();
    public void set_AlterPlanGuide(bool value);
    public bool get_AlterProcedure();
    public void set_AlterProcedure(bool value);
    public bool get_AlterQueue();
    public void set_AlterQueue(bool value);
    public bool get_AlterRemoteServiceBinding();
    public void set_AlterRemoteServiceBinding(bool value);
    public bool get_AlterRole();
    public void set_AlterRole(bool value);
    public bool get_AlterRoute();
    public void set_AlterRoute(bool value);
    public bool get_AlterSchema();
    public void set_AlterSchema(bool value);
    public bool get_AlterSearchPropertyList();
    public void set_AlterSearchPropertyList(bool value);
    public bool get_AlterSecurityPolicy();
    public void set_AlterSecurityPolicy(bool value);
    public bool get_AlterSequence();
    public void set_AlterSequence(bool value);
    public bool get_AlterService();
    public void set_AlterService(bool value);
    public bool get_AlterSymmetricKey();
    public void set_AlterSymmetricKey(bool value);
    public bool get_AlterTable();
    public void set_AlterTable(bool value);
    public bool get_AlterTrigger();
    public void set_AlterTrigger(bool value);
    public bool get_AlterUser();
    public void set_AlterUser(bool value);
    public bool get_AlterView();
    public void set_AlterView(bool value);
    public bool get_AlterXmlSchemaCollection();
    public void set_AlterXmlSchemaCollection(bool value);
    public bool get_BindDefault();
    public void set_BindDefault(bool value);
    public bool get_BindRule();
    public void set_BindRule(bool value);
    public bool get_CreateApplicationRole();
    public void set_CreateApplicationRole(bool value);
    public bool get_CreateAssembly();
    public void set_CreateAssembly(bool value);
    public bool get_CreateAsymmetricKey();
    public void set_CreateAsymmetricKey(bool value);
    public bool get_CreateAudit();
    public void set_CreateAudit(bool value);
    public bool get_CreateBrokerPriority();
    public void set_CreateBrokerPriority(bool value);
    public bool get_CreateCertificate();
    public void set_CreateCertificate(bool value);
    public bool get_CreateColumnEncryptionKey();
    public void set_CreateColumnEncryptionKey(bool value);
    public bool get_CreateColumnMasterKey();
    public void set_CreateColumnMasterKey(bool value);
    public bool get_CreateContract();
    public void set_CreateContract(bool value);
    public bool get_CreateDatabaseAuditSpecification();
    public void set_CreateDatabaseAuditSpecification(bool value);
    public bool get_CreateDatabaseEncryptionKey();
    public void set_CreateDatabaseEncryptionKey(bool value);
    public bool get_CreateDefault();
    public void set_CreateDefault(bool value);
    public bool get_CreateEventNotification();
    public void set_CreateEventNotification(bool value);
    public bool get_CreateExtendedProperty();
    public void set_CreateExtendedProperty(bool value);
    public bool get_CreateExternalLanguage();
    public void set_CreateExternalLanguage(bool value);
    public bool get_CreateExternalLibrary();
    public void set_CreateExternalLibrary(bool value);
    public bool get_CreateFulltextCatalog();
    public void set_CreateFulltextCatalog(bool value);
    public bool get_CreateFulltextIndex();
    public void set_CreateFulltextIndex(bool value);
    public bool get_CreateFulltextStoplist();
    public void set_CreateFulltextStoplist(bool value);
    public bool get_CreateFunction();
    public void set_CreateFunction(bool value);
    public bool get_CreateIndex();
    public void set_CreateIndex(bool value);
    public bool get_CreateMasterKey();
    public void set_CreateMasterKey(bool value);
    public bool get_CreateMessageType();
    public void set_CreateMessageType(bool value);
    public bool get_CreatePartitionFunction();
    public void set_CreatePartitionFunction(bool value);
    public bool get_CreatePartitionScheme();
    public void set_CreatePartitionScheme(bool value);
    public bool get_CreatePlanGuide();
    public void set_CreatePlanGuide(bool value);
    public bool get_CreateProcedure();
    public void set_CreateProcedure(bool value);
    public bool get_CreateQueue();
    public void set_CreateQueue(bool value);
    public bool get_CreateRemoteServiceBinding();
    public void set_CreateRemoteServiceBinding(bool value);
    public bool get_CreateRole();
    public void set_CreateRole(bool value);
    public bool get_CreateRoute();
    public void set_CreateRoute(bool value);
    public bool get_CreateRule();
    public void set_CreateRule(bool value);
    public bool get_CreateSchema();
    public void set_CreateSchema(bool value);
    public bool get_CreateSearchPropertyList();
    public void set_CreateSearchPropertyList(bool value);
    public bool get_CreateSecurityPolicy();
    public void set_CreateSecurityPolicy(bool value);
    public bool get_CreateSequence();
    public void set_CreateSequence(bool value);
    public bool get_CreateService();
    public void set_CreateService(bool value);
    public bool get_CreateSpatialIndex();
    public void set_CreateSpatialIndex(bool value);
    public bool get_CreateStatistics();
    public void set_CreateStatistics(bool value);
    public bool get_CreateSymmetricKey();
    public void set_CreateSymmetricKey(bool value);
    public bool get_CreateSynonym();
    public void set_CreateSynonym(bool value);
    public bool get_CreateTable();
    public void set_CreateTable(bool value);
    public bool get_CreateTrigger();
    public void set_CreateTrigger(bool value);
    public bool get_CreateType();
    public void set_CreateType(bool value);
    public bool get_CreateUser();
    public void set_CreateUser(bool value);
    public bool get_CreateView();
    public void set_CreateView(bool value);
    public bool get_CreateXmlIndex();
    public void set_CreateXmlIndex(bool value);
    public bool get_CreateXmlSchemaCollection();
    public void set_CreateXmlSchemaCollection(bool value);
    public bool get_DenyDatabase();
    public void set_DenyDatabase(bool value);
    public bool get_DropApplicationRole();
    public void set_DropApplicationRole(bool value);
    public bool get_DropAssembly();
    public void set_DropAssembly(bool value);
    public bool get_DropAsymmetricKey();
    public void set_DropAsymmetricKey(bool value);
    public bool get_DropAudit();
    public void set_DropAudit(bool value);
    public bool get_DropBrokerPriority();
    public void set_DropBrokerPriority(bool value);
    public bool get_DropCertificate();
    public void set_DropCertificate(bool value);
    public bool get_DropColumnEncryptionKey();
    public void set_DropColumnEncryptionKey(bool value);
    public bool get_DropColumnMasterKey();
    public void set_DropColumnMasterKey(bool value);
    public bool get_DropContract();
    public void set_DropContract(bool value);
    public bool get_DropDatabase();
    public void set_DropDatabase(bool value);
    public bool get_DropDatabaseAuditSpecification();
    public void set_DropDatabaseAuditSpecification(bool value);
    public bool get_DropDatabaseEncryptionKey();
    public void set_DropDatabaseEncryptionKey(bool value);
    public bool get_DropDefault();
    public void set_DropDefault(bool value);
    public bool get_DropEventNotification();
    public void set_DropEventNotification(bool value);
    public bool get_DropExtendedProperty();
    public void set_DropExtendedProperty(bool value);
    public bool get_DropExternalLanguage();
    public void set_DropExternalLanguage(bool value);
    public bool get_DropExternalLibrary();
    public void set_DropExternalLibrary(bool value);
    public bool get_DropFulltextCatalog();
    public void set_DropFulltextCatalog(bool value);
    public bool get_DropFulltextIndex();
    public void set_DropFulltextIndex(bool value);
    public bool get_DropFulltextStoplist();
    public void set_DropFulltextStoplist(bool value);
    public bool get_DropFunction();
    public void set_DropFunction(bool value);
    public bool get_DropIndex();
    public void set_DropIndex(bool value);
    public bool get_DropMasterKey();
    public void set_DropMasterKey(bool value);
    public bool get_DropMessageType();
    public void set_DropMessageType(bool value);
    public bool get_DropPartitionFunction();
    public void set_DropPartitionFunction(bool value);
    public bool get_DropPartitionScheme();
    public void set_DropPartitionScheme(bool value);
    public bool get_DropPlanGuide();
    public void set_DropPlanGuide(bool value);
    public bool get_DropProcedure();
    public void set_DropProcedure(bool value);
    public bool get_DropQueue();
    public void set_DropQueue(bool value);
    public bool get_DropRemoteServiceBinding();
    public void set_DropRemoteServiceBinding(bool value);
    public bool get_DropRole();
    public void set_DropRole(bool value);
    public bool get_DropRoleMember();
    public void set_DropRoleMember(bool value);
    public bool get_DropRoute();
    public void set_DropRoute(bool value);
    public bool get_DropRule();
    public void set_DropRule(bool value);
    public bool get_DropSchema();
    public void set_DropSchema(bool value);
    public bool get_DropSearchPropertyList();
    public void set_DropSearchPropertyList(bool value);
    public bool get_DropSecurityPolicy();
    public void set_DropSecurityPolicy(bool value);
    public bool get_DropSensitivityClassification();
    public void set_DropSensitivityClassification(bool value);
    public bool get_DropSequence();
    public void set_DropSequence(bool value);
    public bool get_DropService();
    public void set_DropService(bool value);
    public bool get_DropSignature();
    public void set_DropSignature(bool value);
    public bool get_DropSignatureSchemaObject();
    public void set_DropSignatureSchemaObject(bool value);
    public bool get_DropStatistics();
    public void set_DropStatistics(bool value);
    public bool get_DropSymmetricKey();
    public void set_DropSymmetricKey(bool value);
    public bool get_DropSynonym();
    public void set_DropSynonym(bool value);
    public bool get_DropTable();
    public void set_DropTable(bool value);
    public bool get_DropTrigger();
    public void set_DropTrigger(bool value);
    public bool get_DropType();
    public void set_DropType(bool value);
    public bool get_DropUser();
    public void set_DropUser(bool value);
    public bool get_DropView();
    public void set_DropView(bool value);
    public bool get_DropXmlSchemaCollection();
    public void set_DropXmlSchemaCollection(bool value);
    public bool get_GrantDatabase();
    public void set_GrantDatabase(bool value);
    public bool get_Rename();
    public void set_Rename(bool value);
    public bool get_RevokeDatabase();
    public void set_RevokeDatabase(bool value);
    public bool get_UnbindDefault();
    public void set_UnbindDefault(bool value);
    public bool get_UnbindRule();
    public void set_UnbindRule(bool value);
    public bool get_UpdateStatistics();
    public void set_UpdateStatistics(bool value);
}
internal class Microsoft.SqlServer.Management.Smo.DatabaseEventsWorker : EventsWorkerBase {
    private Database target;
    protected SqlSmoObject Target { get; }
    public DatabaseEventsWorker(Database target);
    protected virtual SqlSmoObject get_Target();
    protected virtual EventQuery CreateWqlQuery(string eventClass);
}
public enum Microsoft.SqlServer.Management.Smo.DatabaseEventType : Enum {
    public int value__;
    public static DatabaseEventType Attach;
    public static DatabaseEventType Detach;
    public static DatabaseEventType Restore;
    public static DatabaseEventType Offline;
    public static DatabaseEventType Online;
    public static DatabaseEventType Backup;
}
internal enum Microsoft.SqlServer.Management.Smo.DatabaseEventValues : Enum {
    public int value__;
    public static DatabaseEventValues AddRoleMember;
    public static DatabaseEventValues AddSensitivityClassification;
    public static DatabaseEventValues AddSignature;
    public static DatabaseEventValues AddSignatureSchemaObject;
    public static DatabaseEventValues AlterApplicationRole;
    public static DatabaseEventValues AlterAssembly;
    public static DatabaseEventValues AlterAsymmetricKey;
    public static DatabaseEventValues AlterAudit;
    public static DatabaseEventValues AlterAuthorizationDatabase;
    public static DatabaseEventValues AlterBrokerPriority;
    public static DatabaseEventValues AlterCertificate;
    public static DatabaseEventValues AlterColumnEncryptionKey;
    public static DatabaseEventValues AlterDatabaseAuditSpecification;
    public static DatabaseEventValues AlterDatabaseEncryptionKey;
    public static DatabaseEventValues AlterDatabaseScopedConfiguration;
    public static DatabaseEventValues AlterExtendedProperty;
    public static DatabaseEventValues AlterExternalLanguage;
    public static DatabaseEventValues AlterExternalLibrary;
    public static DatabaseEventValues AlterFulltextCatalog;
    public static DatabaseEventValues AlterFulltextIndex;
    public static DatabaseEventValues AlterFulltextStoplist;
    public static DatabaseEventValues AlterFunction;
    public static DatabaseEventValues AlterIndex;
    public static DatabaseEventValues AlterMasterKey;
    public static DatabaseEventValues AlterMessageType;
    public static DatabaseEventValues AlterPartitionFunction;
    public static DatabaseEventValues AlterPartitionScheme;
    public static DatabaseEventValues AlterPlanGuide;
    public static DatabaseEventValues AlterProcedure;
    public static DatabaseEventValues AlterQueue;
    public static DatabaseEventValues AlterRemoteServiceBinding;
    public static DatabaseEventValues AlterRole;
    public static DatabaseEventValues AlterRoute;
    public static DatabaseEventValues AlterSchema;
    public static DatabaseEventValues AlterSearchPropertyList;
    public static DatabaseEventValues AlterSecurityPolicy;
    public static DatabaseEventValues AlterSequence;
    public static DatabaseEventValues AlterService;
    public static DatabaseEventValues AlterSymmetricKey;
    public static DatabaseEventValues AlterTable;
    public static DatabaseEventValues AlterTrigger;
    public static DatabaseEventValues AlterUser;
    public static DatabaseEventValues AlterView;
    public static DatabaseEventValues AlterXmlSchemaCollection;
    public static DatabaseEventValues BindDefault;
    public static DatabaseEventValues BindRule;
    public static DatabaseEventValues CreateApplicationRole;
    public static DatabaseEventValues CreateAssembly;
    public static DatabaseEventValues CreateAsymmetricKey;
    public static DatabaseEventValues CreateAudit;
    public static DatabaseEventValues CreateBrokerPriority;
    public static DatabaseEventValues CreateCertificate;
    public static DatabaseEventValues CreateColumnEncryptionKey;
    public static DatabaseEventValues CreateColumnMasterKey;
    public static DatabaseEventValues CreateContract;
    public static DatabaseEventValues CreateDatabaseAuditSpecification;
    public static DatabaseEventValues CreateDatabaseEncryptionKey;
    public static DatabaseEventValues CreateDefault;
    public static DatabaseEventValues CreateEventNotification;
    public static DatabaseEventValues CreateExtendedProperty;
    public static DatabaseEventValues CreateExternalLanguage;
    public static DatabaseEventValues CreateExternalLibrary;
    public static DatabaseEventValues CreateFulltextCatalog;
    public static DatabaseEventValues CreateFulltextIndex;
    public static DatabaseEventValues CreateFulltextStoplist;
    public static DatabaseEventValues CreateFunction;
    public static DatabaseEventValues CreateIndex;
    public static DatabaseEventValues CreateMasterKey;
    public static DatabaseEventValues CreateMessageType;
    public static DatabaseEventValues CreatePartitionFunction;
    public static DatabaseEventValues CreatePartitionScheme;
    public static DatabaseEventValues CreatePlanGuide;
    public static DatabaseEventValues CreateProcedure;
    public static DatabaseEventValues CreateQueue;
    public static DatabaseEventValues CreateRemoteServiceBinding;
    public static DatabaseEventValues CreateRole;
    public static DatabaseEventValues CreateRoute;
    public static DatabaseEventValues CreateRule;
    public static DatabaseEventValues CreateSchema;
    public static DatabaseEventValues CreateSearchPropertyList;
    public static DatabaseEventValues CreateSecurityPolicy;
    public static DatabaseEventValues CreateSequence;
    public static DatabaseEventValues CreateService;
    public static DatabaseEventValues CreateSpatialIndex;
    public static DatabaseEventValues CreateStatistics;
    public static DatabaseEventValues CreateSymmetricKey;
    public static DatabaseEventValues CreateSynonym;
    public static DatabaseEventValues CreateTable;
    public static DatabaseEventValues CreateTrigger;
    public static DatabaseEventValues CreateType;
    public static DatabaseEventValues CreateUser;
    public static DatabaseEventValues CreateView;
    public static DatabaseEventValues CreateXmlIndex;
    public static DatabaseEventValues CreateXmlSchemaCollection;
    public static DatabaseEventValues DenyDatabase;
    public static DatabaseEventValues DropApplicationRole;
    public static DatabaseEventValues DropAssembly;
    public static DatabaseEventValues DropAsymmetricKey;
    public static DatabaseEventValues DropAudit;
    public static DatabaseEventValues DropBrokerPriority;
    public static DatabaseEventValues DropCertificate;
    public static DatabaseEventValues DropColumnEncryptionKey;
    public static DatabaseEventValues DropColumnMasterKey;
    public static DatabaseEventValues DropContract;
    public static DatabaseEventValues DropDatabase;
    public static DatabaseEventValues DropDatabaseAuditSpecification;
    public static DatabaseEventValues DropDatabaseEncryptionKey;
    public static DatabaseEventValues DropDefault;
    public static DatabaseEventValues DropEventNotification;
    public static DatabaseEventValues DropExtendedProperty;
    public static DatabaseEventValues DropExternalLanguage;
    public static DatabaseEventValues DropExternalLibrary;
    public static DatabaseEventValues DropFulltextCatalog;
    public static DatabaseEventValues DropFulltextIndex;
    public static DatabaseEventValues DropFulltextStoplist;
    public static DatabaseEventValues DropFunction;
    public static DatabaseEventValues DropIndex;
    public static DatabaseEventValues DropMasterKey;
    public static DatabaseEventValues DropMessageType;
    public static DatabaseEventValues DropPartitionFunction;
    public static DatabaseEventValues DropPartitionScheme;
    public static DatabaseEventValues DropPlanGuide;
    public static DatabaseEventValues DropProcedure;
    public static DatabaseEventValues DropQueue;
    public static DatabaseEventValues DropRemoteServiceBinding;
    public static DatabaseEventValues DropRole;
    public static DatabaseEventValues DropRoleMember;
    public static DatabaseEventValues DropRoute;
    public static DatabaseEventValues DropRule;
    public static DatabaseEventValues DropSchema;
    public static DatabaseEventValues DropSearchPropertyList;
    public static DatabaseEventValues DropSecurityPolicy;
    public static DatabaseEventValues DropSensitivityClassification;
    public static DatabaseEventValues DropSequence;
    public static DatabaseEventValues DropService;
    public static DatabaseEventValues DropSignature;
    public static DatabaseEventValues DropSignatureSchemaObject;
    public static DatabaseEventValues DropStatistics;
    public static DatabaseEventValues DropSymmetricKey;
    public static DatabaseEventValues DropSynonym;
    public static DatabaseEventValues DropTable;
    public static DatabaseEventValues DropTrigger;
    public static DatabaseEventValues DropType;
    public static DatabaseEventValues DropUser;
    public static DatabaseEventValues DropView;
    public static DatabaseEventValues DropXmlSchemaCollection;
    public static DatabaseEventValues GrantDatabase;
    public static DatabaseEventValues Rename;
    public static DatabaseEventValues RevokeDatabase;
    public static DatabaseEventValues UnbindDefault;
    public static DatabaseEventValues UnbindRule;
    public static DatabaseEventValues UpdateStatistics;
}
public class Microsoft.SqlServer.Management.Smo.DatabaseFile : NamedSmoObject {
    private string DatabaseName { get; }
    internal DatabaseFile(AbstractCollectionBase parentColl, ObjectKeyBase key, SqlSmoState state);
    public sealed virtual void Drop();
    internal virtual void ScriptDrop(StringCollection dropQuery, ScriptingPreferences sp);
    internal bool ScriptDdl(ScriptingPreferences sp, StringBuilder ddl, bool bSuppressDirtyCheck, bool scriptCreate);
    internal bool ScriptDdl(ScriptingPreferences sp, StringBuilder ddl, bool bSuppressDirtyCheck, bool scriptCreate, string onlyThisProperty);
    private string get_DatabaseName();
    private void AppendSize(ScriptingPreferences sp, StringBuilder ddl, double size);
    private void ScriptSize(ScriptingPreferences sp, StringBuilder ddl, bool bSuppressDirtyCheck, Int32& changeCount);
    private void ScriptMaxSize(ScriptingPreferences sp, StringBuilder ddl, bool bSuppressDirtyCheck, Int32& changeCount);
    private void ScriptGrowth(ScriptingPreferences sp, StringBuilder ddl, bool bSuppressDirtyCheck, bool scriptCreate, Int32& changeCount);
    private bool ScriptFileName(ScriptingPreferences sp, StringBuilder ddl, bool bSuppressDirtyCheck, bool scriptCreate, Int32& changeCount);
    private bool IsFileStreamBasedFile();
    public sealed virtual void Alter();
    internal virtual void ScriptAlter(StringCollection alterQuery, ScriptingPreferences sp);
    public sealed virtual void Rename(string newname);
    internal virtual void ScriptRename(StringCollection renameQuery, ScriptingPreferences sp, string newName);
    public sealed virtual void MarkForDrop(bool dropOnAlter);
    public void Shrink(int newSizeInMB, ShrinkMethod shrinkType);
}
[DefaultMemberAttribute("Item")]
[ComVisibleAttribute("False")]
public class Microsoft.SqlServer.Management.Smo.DatabaseFileMappingsDictionary : Dictionary`2<string, string> {
    private Dictionary`2<string, string> databaseFileMappingsDictionary;
    public string Item { get; public set; }
    public bool ContainsKey(string sourceFilePath);
    public string get_Item(string sourceFilePath);
    public void set_Item(string sourceFilePath, string value);
    public void Add(string sourceFilePath, string targetFilePath);
}
public class Microsoft.SqlServer.Management.Smo.DatabaseMaintenanceAdapter : DatabaseAdapter {
    public bool DataAndBackupOnSeparateLogicalVolumes { get; }
    public DatabaseMaintenanceAdapter(Database obj);
    private void AddVolumesFromMediaFamily(string mediaSetId, List`1<string> backupFileVolumes);
    public sealed virtual bool get_DataAndBackupOnSeparateLogicalVolumes();
}
public class Microsoft.SqlServer.Management.Smo.DatabaseMapping : object {
    private string loginName;
    private string dbName;
    private string userName;
    [SfcPropertyAttribute("1024")]
public string LoginName { get; }
    [SfcPropertyAttribute("1024")]
public string DBName { get; }
    [SfcPropertyAttribute("1024")]
public string UserName { get; }
    public DatabaseMapping(string loginName, string dbName, string userName);
    public string get_LoginName();
    public string get_DBName();
    public string get_UserName();
    public virtual string ToString();
}
[SfcElementTypeAttribute("DatabaseMirroring")]
[SfcElementAttribute("16")]
public class Microsoft.SqlServer.Management.Smo.DatabaseMirroringPayload : EndpointPayload {
    public static string UrnSuffix { get; }
    [SfcPropertyAttribute("1024")]
public string Certificate { get; public set; }
    [SfcPropertyAttribute("1024")]
public EndpointAuthenticationOrder EndpointAuthenticationOrder { get; public set; }
    [SfcPropertyAttribute("1024")]
public EndpointEncryption EndpointEncryption { get; public set; }
    [SfcPropertyAttribute("1024")]
public EndpointEncryptionAlgorithm EndpointEncryptionAlgorithm { get; public set; }
    [SfcPropertyAttribute("1024")]
public bool IsSystemObject { get; }
    [SfcPropertyAttribute("1024")]
public ServerMirroringRole ServerMirroringRole { get; public set; }
    internal DatabaseMirroringPayload(Endpoint parentEndpoint, ObjectKeyBase key, SqlSmoState state);
    public static string get_UrnSuffix();
    protected sealed virtual void GetUrnRecursive(StringBuilder urnbuilder, UrnIdOption idOption);
    internal virtual void Script(StringBuilder sb, ScriptingPreferences sp);
    internal virtual SqlPropertyMetadataProvider GetPropertyMetadataProvider();
    public string get_Certificate();
    public void set_Certificate(string value);
    public EndpointAuthenticationOrder get_EndpointAuthenticationOrder();
    public void set_EndpointAuthenticationOrder(EndpointAuthenticationOrder value);
    public EndpointEncryption get_EndpointEncryption();
    public void set_EndpointEncryption(EndpointEncryption value);
    public EndpointEncryptionAlgorithm get_EndpointEncryptionAlgorithm();
    public void set_EndpointEncryptionAlgorithm(EndpointEncryptionAlgorithm value);
    public bool get_IsSystemObject();
    public ServerMirroringRole get_ServerMirroringRole();
    public void set_ServerMirroringRole(ServerMirroringRole value);
}
[FlagsAttribute]
public enum Microsoft.SqlServer.Management.Smo.DatabaseObjectTypes : Enum {
    public long value__;
    public static DatabaseObjectTypes ApplicationRole;
    public static DatabaseObjectTypes ServiceBroker;
    public static DatabaseObjectTypes Default;
    public static DatabaseObjectTypes ExtendedStoredProcedure;
    public static DatabaseObjectTypes FullTextCatalog;
    public static DatabaseObjectTypes MessageType;
    public static DatabaseObjectTypes PartitionFunction;
    public static DatabaseObjectTypes PartitionScheme;
    public static DatabaseObjectTypes DatabaseRole;
    public static DatabaseObjectTypes RemoteServiceBinding;
    public static DatabaseObjectTypes Rule;
    public static DatabaseObjectTypes Schema;
    public static DatabaseObjectTypes ServiceContract;
    public static DatabaseObjectTypes ServiceQueue;
    public static DatabaseObjectTypes ServiceRoute;
    public static DatabaseObjectTypes SqlAssembly;
    public static DatabaseObjectTypes StoredProcedure;
    public static DatabaseObjectTypes Synonym;
    public static DatabaseObjectTypes Table;
    public static DatabaseObjectTypes User;
    public static DatabaseObjectTypes UserDefinedAggregate;
    public static DatabaseObjectTypes UserDefinedDataType;
    public static DatabaseObjectTypes UserDefinedFunction;
    public static DatabaseObjectTypes UserDefinedType;
    public static DatabaseObjectTypes View;
    public static DatabaseObjectTypes XmlSchemaCollection;
    public static DatabaseObjectTypes SymmetricKey;
    public static DatabaseObjectTypes Certificate;
    public static DatabaseObjectTypes AsymmetricKey;
    public static DatabaseObjectTypes UserDefinedTableTypes;
    public static DatabaseObjectTypes PlanGuide;
    public static DatabaseObjectTypes DatabaseEncryptionKey;
    public static DatabaseObjectTypes DatabaseAuditSpecification;
    public static DatabaseObjectTypes FullTextStopList;
    public static DatabaseObjectTypes SearchPropertyList;
    public static DatabaseObjectTypes Sequence;
    public static DatabaseObjectTypes SecurityPolicy;
    public static DatabaseObjectTypes ExternalDataSource;
    public static DatabaseObjectTypes ExternalFileFormat;
    public static DatabaseObjectTypes ColumnMasterKey;
    public static DatabaseObjectTypes ColumnEncryptionKey;
    public static DatabaseObjectTypes QueryStoreOptions;
    public static DatabaseObjectTypes DatabaseScopedCredential;
    public static DatabaseObjectTypes DatabaseScopedConfiguration;
    public static DatabaseObjectTypes ExternalLibrary;
    public static DatabaseObjectTypes WorkloadManagementWorkloadGroup;
    public static DatabaseObjectTypes WorkloadManagementWorkloadClassifier;
    public static DatabaseObjectTypes ExternalLanguage;
    public static DatabaseObjectTypes ExternalStream;
    public static DatabaseObjectTypes ExternalStreamingJob;
    public static DatabaseObjectTypes All;
}
[SfcElementTypeAttribute("Option")]
[SfcElementAttribute("48")]
public class Microsoft.SqlServer.Management.Smo.DatabaseOptions : SqlSmoObject {
    private OptionTerminationStatement m_OptionTerminationStatement;
    [SfcObjectAttribute("1")]
public Database Parent { get; }
    public SqlPropertyCollection Properties { get; }
    public static string UrnSuffix { get; }
    [SfcPropertyAttribute("1024")]
public bool DatabaseOwnershipChaining { get; public set; }
    [SfcPropertyAttribute("1024")]
public bool AnsiNullDefault { get; public set; }
    [SfcPropertyAttribute("1024")]
public bool AnsiNullsEnabled { get; public set; }
    [SfcPropertyAttribute("1024")]
public bool AnsiPaddingEnabled { get; public set; }
    [SfcPropertyAttribute("1024")]
public bool AnsiWarningsEnabled { get; public set; }
    [SfcPropertyAttribute("1024")]
public bool ArithmeticAbortEnabled { get; public set; }
    [SfcPropertyAttribute("1024")]
public bool AutoClose { get; public set; }
    [SfcPropertyAttribute("1024")]
public bool AutoCreateStatistics { get; public set; }
    [SfcPropertyAttribute("3072")]
public bool AutoCreateStatisticsIncremental { get; public set; }
    [SfcPropertyAttribute("1024")]
public bool AutoShrink { get; public set; }
    [SfcPropertyAttribute("1024")]
public bool AutoUpdateStatistics { get; public set; }
    [SfcPropertyAttribute("1024")]
public bool AutoUpdateStatisticsAsync { get; public set; }
    [SfcPropertyAttribute("1024")]
public bool BrokerEnabled { get; public set; }
    [SfcPropertyAttribute("1024")]
public bool CloseCursorsOnCommitEnabled { get; public set; }
    [SfcPropertyAttribute("1024")]
public bool ConcatenateNullYieldsNull { get; public set; }
    [SfcPropertyAttribute("1024")]
public bool DateCorrelationOptimization { get; public set; }
    [SfcPropertyAttribute("1024")]
public bool IsParameterizationForced { get; public set; }
    [SfcPropertyAttribute("1024")]
public bool LocalCursorsDefault { get; public set; }
    [SfcPropertyAttribute("1024")]
public int MirroringRedoQueueMaxSize { get; }
    [SfcPropertyAttribute("1024")]
public int MirroringTimeout { get; public set; }
    [SfcPropertyAttribute("1024")]
public bool NumericRoundAbortEnabled { get; public set; }
    [SfcPropertyAttribute("1024")]
public PageVerify PageVerify { get; public set; }
    [SfcPropertyAttribute("1024")]
public bool QuotedIdentifiersEnabled { get; public set; }
    [SfcPropertyAttribute("1024")]
public bool ReadOnly { get; public set; }
    [SfcPropertyAttribute("1024")]
public RecoveryModel RecoveryModel { get; public set; }
    [SfcPropertyAttribute("1024")]
public bool RecursiveTriggersEnabled { get; public set; }
    [SfcPropertyAttribute("1024")]
public SnapshotIsolationState SnapshotIsolationState { get; }
    [SfcPropertyAttribute("1024")]
public bool Trustworthy { get; public set; }
    [SfcPropertyAttribute("1024")]
public DatabaseUserAccess UserAccess { get; public set; }
    [SfcPropertyAttribute("1024")]
public bool IsLedger { get; }
    [SfcPropertyAttribute("1024")]
public bool DataRetentionEnabled { get; public set; }
    internal DatabaseOptions(Database parentdb, ObjectKeyBase key, SqlSmoState state);
    internal void SetOptionTerminationStatement(OptionTerminationStatement optionTerminationStatement);
    public Database get_Parent();
    public SqlPropertyCollection get_Properties();
    public virtual void Refresh();
    protected internal virtual string GetDBName();
    public static string get_UrnSuffix();
    internal virtual void ScriptAlter(StringCollection query, ScriptingPreferences sp);
    public void SetSnapshotIsolation(bool enabled);
    public sealed virtual void Alter();
    public void Alter(TerminationClause terminationClause);
    public void Alter(TimeSpan transactionTerminationTime);
    internal void BuildOptionTerminationStatement(TerminationClause terminationClause);
    internal void BuildOptionTerminationStatement(TimeSpan transactionTerminationTime);
    public bool get_DatabaseOwnershipChaining();
    public void set_DatabaseOwnershipChaining(bool value);
    public bool get_AnsiNullDefault();
    public void set_AnsiNullDefault(bool value);
    public bool get_AnsiNullsEnabled();
    public void set_AnsiNullsEnabled(bool value);
    public bool get_AnsiPaddingEnabled();
    public void set_AnsiPaddingEnabled(bool value);
    public bool get_AnsiWarningsEnabled();
    public void set_AnsiWarningsEnabled(bool value);
    public bool get_ArithmeticAbortEnabled();
    public void set_ArithmeticAbortEnabled(bool value);
    public bool get_AutoClose();
    public void set_AutoClose(bool value);
    public bool get_AutoCreateStatistics();
    public void set_AutoCreateStatistics(bool value);
    public bool get_AutoCreateStatisticsIncremental();
    public void set_AutoCreateStatisticsIncremental(bool value);
    public bool get_AutoShrink();
    public void set_AutoShrink(bool value);
    public bool get_AutoUpdateStatistics();
    public void set_AutoUpdateStatistics(bool value);
    public bool get_AutoUpdateStatisticsAsync();
    public void set_AutoUpdateStatisticsAsync(bool value);
    public bool get_BrokerEnabled();
    public void set_BrokerEnabled(bool value);
    public bool get_CloseCursorsOnCommitEnabled();
    public void set_CloseCursorsOnCommitEnabled(bool value);
    public bool get_ConcatenateNullYieldsNull();
    public void set_ConcatenateNullYieldsNull(bool value);
    public bool get_DateCorrelationOptimization();
    public void set_DateCorrelationOptimization(bool value);
    public bool get_IsParameterizationForced();
    public void set_IsParameterizationForced(bool value);
    public bool get_LocalCursorsDefault();
    public void set_LocalCursorsDefault(bool value);
    public int get_MirroringRedoQueueMaxSize();
    public int get_MirroringTimeout();
    public void set_MirroringTimeout(int value);
    public bool get_NumericRoundAbortEnabled();
    public void set_NumericRoundAbortEnabled(bool value);
    public PageVerify get_PageVerify();
    public void set_PageVerify(PageVerify value);
    public bool get_QuotedIdentifiersEnabled();
    public void set_QuotedIdentifiersEnabled(bool value);
    public bool get_ReadOnly();
    public void set_ReadOnly(bool value);
    public RecoveryModel get_RecoveryModel();
    public void set_RecoveryModel(RecoveryModel value);
    public bool get_RecursiveTriggersEnabled();
    public void set_RecursiveTriggersEnabled(bool value);
    public SnapshotIsolationState get_SnapshotIsolationState();
    public bool get_Trustworthy();
    public void set_Trustworthy(bool value);
    public DatabaseUserAccess get_UserAccess();
    public void set_UserAccess(DatabaseUserAccess value);
    public bool get_IsLedger();
    protected sealed virtual void GetUrnRecursive(StringBuilder urnbuilder, UrnIdOption idOption);
    internal virtual SqlPropertyMetadataProvider GetPropertyMetadataProvider();
    public bool get_DataRetentionEnabled();
    public void set_DataRetentionEnabled(bool value);
    internal virtual object GetPropertyDefaultValue(string propname);
}
public class Microsoft.SqlServer.Management.Smo.DatabasePerformanceAdapter : DatabaseAdapterBase {
    public bool DataAndLogFilesOnSeparateLogicalVolumes { get; }
    public bool CollationMatchesModelOrMaster { get; }
    public DatabasePerformanceAdapter(Database obj);
    public sealed virtual bool get_DataAndLogFilesOnSeparateLogicalVolumes();
    public sealed virtual bool get_CollationMatchesModelOrMaster();
    public virtual void Refresh();
}
public class Microsoft.SqlServer.Management.Smo.DatabasePermission : object {
    private DatabasePermissionSetValue m_value;
    internal DatabasePermissionSetValue Value { get; }
    public static DatabasePermission AdministerDatabaseBulkOperations { get; }
    public static DatabasePermission Alter { get; }
    public static DatabasePermission AlterAnyApplicationRole { get; }
    public static DatabasePermission AlterAnyAssembly { get; }
    public static DatabasePermission AlterAnyAsymmetricKey { get; }
    public static DatabasePermission AlterAnyCertificate { get; }
    public static DatabasePermission AlterAnyColumnEncryptionKey { get; }
    public static DatabasePermission AlterAnyColumnMasterKey { get; }
    public static DatabasePermission AlterAnyContract { get; }
    public static DatabasePermission AlterAnyDatabaseAudit { get; }
    public static DatabasePermission AlterAnyDatabaseDdlTrigger { get; }
    public static DatabasePermission AlterAnyDatabaseEventNotification { get; }
    public static DatabasePermission AlterAnyDatabaseEventSession { get; }
    public static DatabasePermission AlterAnyDatabaseEventSessionAddEvent { get; }
    public static DatabasePermission AlterAnyDatabaseEventSessionAddTarget { get; }
    public static DatabasePermission AlterAnyDatabaseEventSessionDisable { get; }
    public static DatabasePermission AlterAnyDatabaseEventSessionDropEvent { get; }
    public static DatabasePermission AlterAnyDatabaseEventSessionDropTarget { get; }
    public static DatabasePermission AlterAnyDatabaseEventSessionEnable { get; }
    public static DatabasePermission AlterAnyDatabaseEventSessionOption { get; }
    public static DatabasePermission AlterAnyDatabaseScopedConfiguration { get; }
    public static DatabasePermission AlterAnyDataspace { get; }
    public static DatabasePermission AlterAnyExternalDataSource { get; }
    public static DatabasePermission AlterAnyExternalFileFormat { get; }
    public static DatabasePermission AlterAnyExternalJob { get; }
    public static DatabasePermission AlterAnyExternalLanguage { get; }
    public static DatabasePermission AlterAnyExternalLibrary { get; }
    public static DatabasePermission AlterAnyExternalMirror { get; }
    public static DatabasePermission AlterAnyExternalStream { get; }
    public static DatabasePermission AlterAnyFulltextCatalog { get; }
    public static DatabasePermission AlterAnyMask { get; }
    public static DatabasePermission AlterAnyMessageType { get; }
    public static DatabasePermission AlterAnyRemoteServiceBinding { get; }
    public static DatabasePermission AlterAnyRole { get; }
    public static DatabasePermission AlterAnyRoute { get; }
    public static DatabasePermission AlterAnySchema { get; }
    public static DatabasePermission AlterAnySecurityPolicy { get; }
    public static DatabasePermission AlterAnySensitivityClassification { get; }
    public static DatabasePermission AlterAnyService { get; }
    public static DatabasePermission AlterAnySymmetricKey { get; }
    public static DatabasePermission AlterAnyUser { get; }
    public static DatabasePermission AlterLedger { get; }
    public static DatabasePermission AlterLedgerConfiguration { get; }
    public static DatabasePermission Authenticate { get; }
    public static DatabasePermission BackupDatabase { get; }
    public static DatabasePermission BackupLog { get; }
    public static DatabasePermission Checkpoint { get; }
    public static DatabasePermission Connect { get; }
    public static DatabasePermission ConnectReplication { get; }
    public static DatabasePermission Control { get; }
    public static DatabasePermission CreateAggregate { get; }
    public static DatabasePermission CreateAnyDatabaseEventSession { get; }
    public static DatabasePermission CreateAssembly { get; }
    public static DatabasePermission CreateAsymmetricKey { get; }
    public static DatabasePermission CreateCertificate { get; }
    public static DatabasePermission CreateContract { get; }
    public static DatabasePermission CreateDatabase { get; }
    public static DatabasePermission CreateDatabaseDdlEventNotification { get; }
    public static DatabasePermission CreateDefault { get; }
    public static DatabasePermission CreateExternalLanguage { get; }
    public static DatabasePermission CreateExternalLibrary { get; }
    public static DatabasePermission CreateFulltextCatalog { get; }
    public static DatabasePermission CreateFunction { get; }
    public static DatabasePermission CreateMessageType { get; }
    public static DatabasePermission CreateProcedure { get; }
    public static DatabasePermission CreateQueue { get; }
    public static DatabasePermission CreateRemoteServiceBinding { get; }
    public static DatabasePermission CreateRole { get; }
    public static DatabasePermission CreateRoute { get; }
    public static DatabasePermission CreateRule { get; }
    public static DatabasePermission CreateSchema { get; }
    public static DatabasePermission CreateService { get; }
    public static DatabasePermission CreateSymmetricKey { get; }
    public static DatabasePermission CreateSynonym { get; }
    public static DatabasePermission CreateTable { get; }
    public static DatabasePermission CreateType { get; }
    public static DatabasePermission CreateUser { get; }
    public static DatabasePermission CreateView { get; }
    public static DatabasePermission CreateXmlSchemaCollection { get; }
    public static DatabasePermission Delete { get; }
    public static DatabasePermission DropAnyDatabaseEventSession { get; }
    public static DatabasePermission EnableLedger { get; }
    public static DatabasePermission Execute { get; }
    public static DatabasePermission ExecuteAnyExternalEndpoint { get; }
    public static DatabasePermission ExecuteAnyExternalScript { get; }
    public static DatabasePermission Insert { get; }
    public static DatabasePermission KillDatabaseConnection { get; }
    public static DatabasePermission OwnershipChaining { get; }
    public static DatabasePermission References { get; }
    public static DatabasePermission Select { get; }
    public static DatabasePermission Showplan { get; }
    public static DatabasePermission SubscribeQueryNotifications { get; }
    public static DatabasePermission TakeOwnership { get; }
    public static DatabasePermission Unmask { get; }
    public static DatabasePermission Update { get; }
    public static DatabasePermission ViewAnyColumnEncryptionKeyDefinition { get; }
    public static DatabasePermission ViewAnyColumnMasterKeyDefinition { get; }
    public static DatabasePermission ViewAnySensitivityClassification { get; }
    public static DatabasePermission ViewCryptographicallySecuredDefinition { get; }
    public static DatabasePermission ViewDatabasePerformanceState { get; }
    public static DatabasePermission ViewDatabaseSecurityAudit { get; }
    public static DatabasePermission ViewDatabaseSecurityState { get; }
    public static DatabasePermission ViewDatabaseState { get; }
    public static DatabasePermission ViewDefinition { get; }
    public static DatabasePermission ViewLedgerContent { get; }
    public static DatabasePermission ViewPerformanceDefinition { get; }
    public static DatabasePermission ViewSecurityDefinition { get; }
    internal DatabasePermission(DatabasePermissionSetValue permissionValue);
    internal DatabasePermissionSetValue get_Value();
    public static DatabasePermissionSet op_Implicit(DatabasePermission permission);
    public static DatabasePermissionSet ToDatabasePermissionSet(DatabasePermission permission);
    public static DatabasePermissionSet op_Addition(DatabasePermission permissionLeft, DatabasePermission permissionRight);
    public static DatabasePermissionSet Add(DatabasePermission permissionLeft, DatabasePermission permissionRight);
    public static DatabasePermissionSet op_BitwiseOr(DatabasePermission permissionLeft, DatabasePermission permissionRight);
    public static DatabasePermissionSet BitwiseOr(DatabasePermission permissionLeft, DatabasePermission permissionRight);
    public static DatabasePermission get_AdministerDatabaseBulkOperations();
    public static DatabasePermission get_Alter();
    public static DatabasePermission get_AlterAnyApplicationRole();
    public static DatabasePermission get_AlterAnyAssembly();
    public static DatabasePermission get_AlterAnyAsymmetricKey();
    public static DatabasePermission get_AlterAnyCertificate();
    public static DatabasePermission get_AlterAnyColumnEncryptionKey();
    public static DatabasePermission get_AlterAnyColumnMasterKey();
    public static DatabasePermission get_AlterAnyContract();
    public static DatabasePermission get_AlterAnyDatabaseAudit();
    public static DatabasePermission get_AlterAnyDatabaseDdlTrigger();
    public static DatabasePermission get_AlterAnyDatabaseEventNotification();
    public static DatabasePermission get_AlterAnyDatabaseEventSession();
    public static DatabasePermission get_AlterAnyDatabaseEventSessionAddEvent();
    public static DatabasePermission get_AlterAnyDatabaseEventSessionAddTarget();
    public static DatabasePermission get_AlterAnyDatabaseEventSessionDisable();
    public static DatabasePermission get_AlterAnyDatabaseEventSessionDropEvent();
    public static DatabasePermission get_AlterAnyDatabaseEventSessionDropTarget();
    public static DatabasePermission get_AlterAnyDatabaseEventSessionEnable();
    public static DatabasePermission get_AlterAnyDatabaseEventSessionOption();
    public static DatabasePermission get_AlterAnyDatabaseScopedConfiguration();
    public static DatabasePermission get_AlterAnyDataspace();
    public static DatabasePermission get_AlterAnyExternalDataSource();
    public static DatabasePermission get_AlterAnyExternalFileFormat();
    public static DatabasePermission get_AlterAnyExternalJob();
    public static DatabasePermission get_AlterAnyExternalLanguage();
    public static DatabasePermission get_AlterAnyExternalLibrary();
    public static DatabasePermission get_AlterAnyExternalMirror();
    public static DatabasePermission get_AlterAnyExternalStream();
    public static DatabasePermission get_AlterAnyFulltextCatalog();
    public static DatabasePermission get_AlterAnyMask();
    public static DatabasePermission get_AlterAnyMessageType();
    public static DatabasePermission get_AlterAnyRemoteServiceBinding();
    public static DatabasePermission get_AlterAnyRole();
    public static DatabasePermission get_AlterAnyRoute();
    public static DatabasePermission get_AlterAnySchema();
    public static DatabasePermission get_AlterAnySecurityPolicy();
    public static DatabasePermission get_AlterAnySensitivityClassification();
    public static DatabasePermission get_AlterAnyService();
    public static DatabasePermission get_AlterAnySymmetricKey();
    public static DatabasePermission get_AlterAnyUser();
    public static DatabasePermission get_AlterLedger();
    public static DatabasePermission get_AlterLedgerConfiguration();
    public static DatabasePermission get_Authenticate();
    public static DatabasePermission get_BackupDatabase();
    public static DatabasePermission get_BackupLog();
    public static DatabasePermission get_Checkpoint();
    public static DatabasePermission get_Connect();
    public static DatabasePermission get_ConnectReplication();
    public static DatabasePermission get_Control();
    public static DatabasePermission get_CreateAggregate();
    public static DatabasePermission get_CreateAnyDatabaseEventSession();
    public static DatabasePermission get_CreateAssembly();
    public static DatabasePermission get_CreateAsymmetricKey();
    public static DatabasePermission get_CreateCertificate();
    public static DatabasePermission get_CreateContract();
    public static DatabasePermission get_CreateDatabase();
    public static DatabasePermission get_CreateDatabaseDdlEventNotification();
    public static DatabasePermission get_CreateDefault();
    public static DatabasePermission get_CreateExternalLanguage();
    public static DatabasePermission get_CreateExternalLibrary();
    public static DatabasePermission get_CreateFulltextCatalog();
    public static DatabasePermission get_CreateFunction();
    public static DatabasePermission get_CreateMessageType();
    public static DatabasePermission get_CreateProcedure();
    public static DatabasePermission get_CreateQueue();
    public static DatabasePermission get_CreateRemoteServiceBinding();
    public static DatabasePermission get_CreateRole();
    public static DatabasePermission get_CreateRoute();
    public static DatabasePermission get_CreateRule();
    public static DatabasePermission get_CreateSchema();
    public static DatabasePermission get_CreateService();
    public static DatabasePermission get_CreateSymmetricKey();
    public static DatabasePermission get_CreateSynonym();
    public static DatabasePermission get_CreateTable();
    public static DatabasePermission get_CreateType();
    public static DatabasePermission get_CreateUser();
    public static DatabasePermission get_CreateView();
    public static DatabasePermission get_CreateXmlSchemaCollection();
    public static DatabasePermission get_Delete();
    public static DatabasePermission get_DropAnyDatabaseEventSession();
    public static DatabasePermission get_EnableLedger();
    public static DatabasePermission get_Execute();
    public static DatabasePermission get_ExecuteAnyExternalEndpoint();
    public static DatabasePermission get_ExecuteAnyExternalScript();
    public static DatabasePermission get_Insert();
    public static DatabasePermission get_KillDatabaseConnection();
    public static DatabasePermission get_OwnershipChaining();
    public static DatabasePermission get_References();
    public static DatabasePermission get_Select();
    public static DatabasePermission get_Showplan();
    public static DatabasePermission get_SubscribeQueryNotifications();
    public static DatabasePermission get_TakeOwnership();
    public static DatabasePermission get_Unmask();
    public static DatabasePermission get_Update();
    public static DatabasePermission get_ViewAnyColumnEncryptionKeyDefinition();
    public static DatabasePermission get_ViewAnyColumnMasterKeyDefinition();
    public static DatabasePermission get_ViewAnySensitivityClassification();
    public static DatabasePermission get_ViewCryptographicallySecuredDefinition();
    public static DatabasePermission get_ViewDatabasePerformanceState();
    public static DatabasePermission get_ViewDatabaseSecurityAudit();
    public static DatabasePermission get_ViewDatabaseSecurityState();
    public static DatabasePermission get_ViewDatabaseState();
    public static DatabasePermission get_ViewDefinition();
    public static DatabasePermission get_ViewLedgerContent();
    public static DatabasePermission get_ViewPerformanceDefinition();
    public static DatabasePermission get_ViewSecurityDefinition();
    public virtual int GetHashCode();
    public virtual bool Equals(object o);
    public static bool op_Equality(DatabasePermission p1, DatabasePermission p2);
    public static bool op_Inequality(DatabasePermission p1, DatabasePermission p2);
}
public class Microsoft.SqlServer.Management.Smo.DatabasePermissionInfo : PermissionInfo {
    public DatabasePermissionSet PermissionType { get; }
    public DatabasePermissionSet get_PermissionType();
}
public class Microsoft.SqlServer.Management.Smo.DatabasePermissionSet : PermissionSetBase {
    internal int NumberOfElements { get; }
    public bool AdministerDatabaseBulkOperations { get; public set; }
    public bool Alter { get; public set; }
    public bool AlterAnyApplicationRole { get; public set; }
    public bool AlterAnyAssembly { get; public set; }
    public bool AlterAnyAsymmetricKey { get; public set; }
    public bool AlterAnyCertificate { get; public set; }
    public bool AlterAnyColumnEncryptionKey { get; public set; }
    public bool AlterAnyColumnMasterKey { get; public set; }
    public bool AlterAnyContract { get; public set; }
    public bool AlterAnyDatabaseAudit { get; public set; }
    public bool AlterAnyDatabaseDdlTrigger { get; public set; }
    public bool AlterAnyDatabaseEventNotification { get; public set; }
    public bool AlterAnyDatabaseEventSession { get; public set; }
    public bool AlterAnyDatabaseEventSessionAddEvent { get; public set; }
    public bool AlterAnyDatabaseEventSessionAddTarget { get; public set; }
    public bool AlterAnyDatabaseEventSessionDisable { get; public set; }
    public bool AlterAnyDatabaseEventSessionDropEvent { get; public set; }
    public bool AlterAnyDatabaseEventSessionDropTarget { get; public set; }
    public bool AlterAnyDatabaseEventSessionEnable { get; public set; }
    public bool AlterAnyDatabaseEventSessionOption { get; public set; }
    public bool AlterAnyDatabaseScopedConfiguration { get; public set; }
    public bool AlterAnyDataspace { get; public set; }
    public bool AlterAnyExternalDataSource { get; public set; }
    public bool AlterAnyExternalFileFormat { get; public set; }
    public bool AlterAnyExternalJob { get; public set; }
    public bool AlterAnyExternalLanguage { get; public set; }
    public bool AlterAnyExternalLibrary { get; public set; }
    public bool AlterAnyExternalMirror { get; public set; }
    public bool AlterAnyExternalStream { get; public set; }
    public bool AlterAnyFulltextCatalog { get; public set; }
    public bool AlterAnyMask { get; public set; }
    public bool AlterAnyMessageType { get; public set; }
    public bool AlterAnyRemoteServiceBinding { get; public set; }
    public bool AlterAnyRole { get; public set; }
    public bool AlterAnyRoute { get; public set; }
    public bool AlterAnySchema { get; public set; }
    public bool AlterAnySecurityPolicy { get; public set; }
    public bool AlterAnySensitivityClassification { get; public set; }
    public bool AlterAnyService { get; public set; }
    public bool AlterAnySymmetricKey { get; public set; }
    public bool AlterAnyUser { get; public set; }
    public bool AlterLedger { get; public set; }
    public bool AlterLedgerConfiguration { get; public set; }
    public bool Authenticate { get; public set; }
    public bool BackupDatabase { get; public set; }
    public bool BackupLog { get; public set; }
    public bool Checkpoint { get; public set; }
    public bool Connect { get; public set; }
    public bool ConnectReplication { get; public set; }
    public bool Control { get; public set; }
    public bool CreateAggregate { get; public set; }
    public bool CreateAnyDatabaseEventSession { get; public set; }
    public bool CreateAssembly { get; public set; }
    public bool CreateAsymmetricKey { get; public set; }
    public bool CreateCertificate { get; public set; }
    public bool CreateContract { get; public set; }
    public bool CreateDatabase { get; public set; }
    public bool CreateDatabaseDdlEventNotification { get; public set; }
    public bool CreateDefault { get; public set; }
    public bool CreateExternalLanguage { get; public set; }
    public bool CreateExternalLibrary { get; public set; }
    public bool CreateFulltextCatalog { get; public set; }
    public bool CreateFunction { get; public set; }
    public bool CreateMessageType { get; public set; }
    public bool CreateProcedure { get; public set; }
    public bool CreateQueue { get; public set; }
    public bool CreateRemoteServiceBinding { get; public set; }
    public bool CreateRole { get; public set; }
    public bool CreateRoute { get; public set; }
    public bool CreateRule { get; public set; }
    public bool CreateSchema { get; public set; }
    public bool CreateService { get; public set; }
    public bool CreateSymmetricKey { get; public set; }
    public bool CreateSynonym { get; public set; }
    public bool CreateTable { get; public set; }
    public bool CreateType { get; public set; }
    public bool CreateUser { get; public set; }
    public bool CreateView { get; public set; }
    public bool CreateXmlSchemaCollection { get; public set; }
    public bool Delete { get; public set; }
    public bool DropAnyDatabaseEventSession { get; public set; }
    public bool EnableLedger { get; public set; }
    public bool Execute { get; public set; }
    public bool ExecuteAnyExternalEndpoint { get; public set; }
    public bool ExecuteAnyExternalScript { get; public set; }
    public bool Insert { get; public set; }
    public bool KillDatabaseConnection { get; public set; }
    public bool OwnershipChaining { get; public set; }
    public bool References { get; public set; }
    public bool Select { get; public set; }
    public bool Showplan { get; public set; }
    public bool SubscribeQueryNotifications { get; public set; }
    public bool TakeOwnership { get; public set; }
    public bool Unmask { get; public set; }
    public bool Update { get; public set; }
    public bool ViewAnyColumnEncryptionKeyDefinition { get; public set; }
    public bool ViewAnyColumnMasterKeyDefinition { get; public set; }
    public bool ViewAnySensitivityClassification { get; public set; }
    public bool ViewCryptographicallySecuredDefinition { get; public set; }
    public bool ViewDatabasePerformanceState { get; public set; }
    public bool ViewDatabaseSecurityAudit { get; public set; }
    public bool ViewDatabaseSecurityState { get; public set; }
    public bool ViewDatabaseState { get; public set; }
    public bool ViewDefinition { get; public set; }
    public bool ViewLedgerContent { get; public set; }
    public bool ViewPerformanceDefinition { get; public set; }
    public bool ViewSecurityDefinition { get; public set; }
    public DatabasePermissionSet(DatabasePermissionSet oDatabasePermissionSet);
    public DatabasePermissionSet(DatabasePermission permission);
    public DatabasePermissionSet(DatabasePermission[] permissions);
    internal void SetBit(DatabasePermission permission);
    internal void ResetBit(DatabasePermission permission);
    public DatabasePermissionSet Add(DatabasePermission permission);
    public DatabasePermissionSet Remove(DatabasePermission permission);
    public static DatabasePermissionSet op_Addition(DatabasePermissionSet permissionLeft, DatabasePermission permissionRight);
    public static DatabasePermissionSet Add(DatabasePermissionSet permissionLeft, DatabasePermission permissionRight);
    public static DatabasePermissionSet op_Subtraction(DatabasePermissionSet permissionLeft, DatabasePermission permissionRight);
    public static DatabasePermissionSet Subtract(DatabasePermissionSet permissionLeft, DatabasePermission permissionRight);
    internal virtual int get_NumberOfElements();
    internal virtual string PermissionCodeToPermissionName(int permissionCode);
    internal virtual string PermissionCodeToPermissionType(int permissionCode);
    public bool get_AdministerDatabaseBulkOperations();
    public void set_AdministerDatabaseBulkOperations(bool value);
    public bool get_Alter();
    public void set_Alter(bool value);
    public bool get_AlterAnyApplicationRole();
    public void set_AlterAnyApplicationRole(bool value);
    public bool get_AlterAnyAssembly();
    public void set_AlterAnyAssembly(bool value);
    public bool get_AlterAnyAsymmetricKey();
    public void set_AlterAnyAsymmetricKey(bool value);
    public bool get_AlterAnyCertificate();
    public void set_AlterAnyCertificate(bool value);
    public bool get_AlterAnyColumnEncryptionKey();
    public void set_AlterAnyColumnEncryptionKey(bool value);
    public bool get_AlterAnyColumnMasterKey();
    public void set_AlterAnyColumnMasterKey(bool value);
    public bool get_AlterAnyContract();
    public void set_AlterAnyContract(bool value);
    public bool get_AlterAnyDatabaseAudit();
    public void set_AlterAnyDatabaseAudit(bool value);
    public bool get_AlterAnyDatabaseDdlTrigger();
    public void set_AlterAnyDatabaseDdlTrigger(bool value);
    public bool get_AlterAnyDatabaseEventNotification();
    public void set_AlterAnyDatabaseEventNotification(bool value);
    public bool get_AlterAnyDatabaseEventSession();
    public void set_AlterAnyDatabaseEventSession(bool value);
    public bool get_AlterAnyDatabaseEventSessionAddEvent();
    public void set_AlterAnyDatabaseEventSessionAddEvent(bool value);
    public bool get_AlterAnyDatabaseEventSessionAddTarget();
    public void set_AlterAnyDatabaseEventSessionAddTarget(bool value);
    public bool get_AlterAnyDatabaseEventSessionDisable();
    public void set_AlterAnyDatabaseEventSessionDisable(bool value);
    public bool get_AlterAnyDatabaseEventSessionDropEvent();
    public void set_AlterAnyDatabaseEventSessionDropEvent(bool value);
    public bool get_AlterAnyDatabaseEventSessionDropTarget();
    public void set_AlterAnyDatabaseEventSessionDropTarget(bool value);
    public bool get_AlterAnyDatabaseEventSessionEnable();
    public void set_AlterAnyDatabaseEventSessionEnable(bool value);
    public bool get_AlterAnyDatabaseEventSessionOption();
    public void set_AlterAnyDatabaseEventSessionOption(bool value);
    public bool get_AlterAnyDatabaseScopedConfiguration();
    public void set_AlterAnyDatabaseScopedConfiguration(bool value);
    public bool get_AlterAnyDataspace();
    public void set_AlterAnyDataspace(bool value);
    public bool get_AlterAnyExternalDataSource();
    public void set_AlterAnyExternalDataSource(bool value);
    public bool get_AlterAnyExternalFileFormat();
    public void set_AlterAnyExternalFileFormat(bool value);
    public bool get_AlterAnyExternalJob();
    public void set_AlterAnyExternalJob(bool value);
    public bool get_AlterAnyExternalLanguage();
    public void set_AlterAnyExternalLanguage(bool value);
    public bool get_AlterAnyExternalLibrary();
    public void set_AlterAnyExternalLibrary(bool value);
    public bool get_AlterAnyExternalMirror();
    public void set_AlterAnyExternalMirror(bool value);
    public bool get_AlterAnyExternalStream();
    public void set_AlterAnyExternalStream(bool value);
    public bool get_AlterAnyFulltextCatalog();
    public void set_AlterAnyFulltextCatalog(bool value);
    public bool get_AlterAnyMask();
    public void set_AlterAnyMask(bool value);
    public bool get_AlterAnyMessageType();
    public void set_AlterAnyMessageType(bool value);
    public bool get_AlterAnyRemoteServiceBinding();
    public void set_AlterAnyRemoteServiceBinding(bool value);
    public bool get_AlterAnyRole();
    public void set_AlterAnyRole(bool value);
    public bool get_AlterAnyRoute();
    public void set_AlterAnyRoute(bool value);
    public bool get_AlterAnySchema();
    public void set_AlterAnySchema(bool value);
    public bool get_AlterAnySecurityPolicy();
    public void set_AlterAnySecurityPolicy(bool value);
    public bool get_AlterAnySensitivityClassification();
    public void set_AlterAnySensitivityClassification(bool value);
    public bool get_AlterAnyService();
    public void set_AlterAnyService(bool value);
    public bool get_AlterAnySymmetricKey();
    public void set_AlterAnySymmetricKey(bool value);
    public bool get_AlterAnyUser();
    public void set_AlterAnyUser(bool value);
    public bool get_AlterLedger();
    public void set_AlterLedger(bool value);
    public bool get_AlterLedgerConfiguration();
    public void set_AlterLedgerConfiguration(bool value);
    public bool get_Authenticate();
    public void set_Authenticate(bool value);
    public bool get_BackupDatabase();
    public void set_BackupDatabase(bool value);
    public bool get_BackupLog();
    public void set_BackupLog(bool value);
    public bool get_Checkpoint();
    public void set_Checkpoint(bool value);
    public bool get_Connect();
    public void set_Connect(bool value);
    public bool get_ConnectReplication();
    public void set_ConnectReplication(bool value);
    public bool get_Control();
    public void set_Control(bool value);
    public bool get_CreateAggregate();
    public void set_CreateAggregate(bool value);
    public bool get_CreateAnyDatabaseEventSession();
    public void set_CreateAnyDatabaseEventSession(bool value);
    public bool get_CreateAssembly();
    public void set_CreateAssembly(bool value);
    public bool get_CreateAsymmetricKey();
    public void set_CreateAsymmetricKey(bool value);
    public bool get_CreateCertificate();
    public void set_CreateCertificate(bool value);
    public bool get_CreateContract();
    public void set_CreateContract(bool value);
    public bool get_CreateDatabase();
    public void set_CreateDatabase(bool value);
    public bool get_CreateDatabaseDdlEventNotification();
    public void set_CreateDatabaseDdlEventNotification(bool value);
    public bool get_CreateDefault();
    public void set_CreateDefault(bool value);
    public bool get_CreateExternalLanguage();
    public void set_CreateExternalLanguage(bool value);
    public bool get_CreateExternalLibrary();
    public void set_CreateExternalLibrary(bool value);
    public bool get_CreateFulltextCatalog();
    public void set_CreateFulltextCatalog(bool value);
    public bool get_CreateFunction();
    public void set_CreateFunction(bool value);
    public bool get_CreateMessageType();
    public void set_CreateMessageType(bool value);
    public bool get_CreateProcedure();
    public void set_CreateProcedure(bool value);
    public bool get_CreateQueue();
    public void set_CreateQueue(bool value);
    public bool get_CreateRemoteServiceBinding();
    public void set_CreateRemoteServiceBinding(bool value);
    public bool get_CreateRole();
    public void set_CreateRole(bool value);
    public bool get_CreateRoute();
    public void set_CreateRoute(bool value);
    public bool get_CreateRule();
    public void set_CreateRule(bool value);
    public bool get_CreateSchema();
    public void set_CreateSchema(bool value);
    public bool get_CreateService();
    public void set_CreateService(bool value);
    public bool get_CreateSymmetricKey();
    public void set_CreateSymmetricKey(bool value);
    public bool get_CreateSynonym();
    public void set_CreateSynonym(bool value);
    public bool get_CreateTable();
    public void set_CreateTable(bool value);
    public bool get_CreateType();
    public void set_CreateType(bool value);
    public bool get_CreateUser();
    public void set_CreateUser(bool value);
    public bool get_CreateView();
    public void set_CreateView(bool value);
    public bool get_CreateXmlSchemaCollection();
    public void set_CreateXmlSchemaCollection(bool value);
    public bool get_Delete();
    public void set_Delete(bool value);
    public bool get_DropAnyDatabaseEventSession();
    public void set_DropAnyDatabaseEventSession(bool value);
    public bool get_EnableLedger();
    public void set_EnableLedger(bool value);
    public bool get_Execute();
    public void set_Execute(bool value);
    public bool get_ExecuteAnyExternalEndpoint();
    public void set_ExecuteAnyExternalEndpoint(bool value);
    public bool get_ExecuteAnyExternalScript();
    public void set_ExecuteAnyExternalScript(bool value);
    public bool get_Insert();
    public void set_Insert(bool value);
    public bool get_KillDatabaseConnection();
    public void set_KillDatabaseConnection(bool value);
    public bool get_OwnershipChaining();
    public void set_OwnershipChaining(bool value);
    public bool get_References();
    public void set_References(bool value);
    public bool get_Select();
    public void set_Select(bool value);
    public bool get_Showplan();
    public void set_Showplan(bool value);
    public bool get_SubscribeQueryNotifications();
    public void set_SubscribeQueryNotifications(bool value);
    public bool get_TakeOwnership();
    public void set_TakeOwnership(bool value);
    public bool get_Unmask();
    public void set_Unmask(bool value);
    public bool get_Update();
    public void set_Update(bool value);
    public bool get_ViewAnyColumnEncryptionKeyDefinition();
    public void set_ViewAnyColumnEncryptionKeyDefinition(bool value);
    public bool get_ViewAnyColumnMasterKeyDefinition();
    public void set_ViewAnyColumnMasterKeyDefinition(bool value);
    public bool get_ViewAnySensitivityClassification();
    public void set_ViewAnySensitivityClassification(bool value);
    public bool get_ViewCryptographicallySecuredDefinition();
    public void set_ViewCryptographicallySecuredDefinition(bool value);
    public bool get_ViewDatabasePerformanceState();
    public void set_ViewDatabasePerformanceState(bool value);
    public bool get_ViewDatabaseSecurityAudit();
    public void set_ViewDatabaseSecurityAudit(bool value);
    public bool get_ViewDatabaseSecurityState();
    public void set_ViewDatabaseSecurityState(bool value);
    public bool get_ViewDatabaseState();
    public void set_ViewDatabaseState(bool value);
    public bool get_ViewDefinition();
    public void set_ViewDefinition(bool value);
    public bool get_ViewLedgerContent();
    public void set_ViewLedgerContent(bool value);
    public bool get_ViewPerformanceDefinition();
    public void set_ViewPerformanceDefinition(bool value);
    public bool get_ViewSecurityDefinition();
    public void set_ViewSecurityDefinition(bool value);
    public virtual int GetHashCode();
    public virtual bool Equals(object o);
    public static bool op_Equality(DatabasePermissionSet p1, DatabasePermissionSet p2);
    public static bool op_Inequality(DatabasePermissionSet p1, DatabasePermissionSet p2);
}
internal abstract class Microsoft.SqlServer.Management.Smo.DatabasePrefetchBase : object {
    protected Database Database;
    protected ScriptingPreferences scriptingPreferences;
    protected HashSet`1<UrnTypeKey> filteredTypes;
    protected HashSet`1<string> prefetchableTypes;
    protected Dictionary`2<string, List`1<Urn>> batchedPrefetchDictionary;
    [CompilerGeneratedAttribute]
private CreatingObjectDictionary <creatingDictionary>k__BackingField;
    protected int batchSize;
    public CreatingObjectDictionary creatingDictionary { get; public set; }
    public DatabasePrefetchBase(Database db, ScriptingPreferences scriptingPreferences, HashSet`1<UrnTypeKey> filteredTypes);
    private void InitializeObjectCollection(string type);
    protected abstract virtual void InitializeBatchedPrefetchDictionary();
    protected abstract virtual void InitializePrefetchableTypes();
    [CompilerGeneratedAttribute]
public sealed virtual CreatingObjectDictionary get_creatingDictionary();
    [CompilerGeneratedAttribute]
public sealed virtual void set_creatingDictionary(CreatingObjectDictionary value);
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.Smo.DatabasePrefetchBase/<PrefetchObjects>d__14")]
public virtual IEnumerable`1<Urn> PrefetchObjects(IEnumerable`1<Urn> input);
    protected virtual IEnumerable`1<Urn> PrePrefetchBatches();
    protected virtual void PostPrefetchBatch(string urnType, HashSet`1<Urn> urnBatch, int currentBatchCount, int totalBatchCount);
    protected virtual void PrefetchBatch(string urnType, HashSet`1<Urn> urnBatch, int currentBatchCount, int totalBatchCount);
    protected virtual void AddUrn(Urn item);
    protected virtual void PrefetchAllObjects(string urnType);
    protected List`1<string> GetTablePrefetchList();
    protected List`1<string> GetViewPrefetchList();
    [CompilerGeneratedAttribute]
private bool <PrefetchObjects>b__14_0(KeyValuePair`2<string, List`1<Urn>> kvp);
}
[EvaluationModeAttribute("4")]
[PhysicalFacetAttribute("1")]
[SfcElementAttribute("16")]
public class Microsoft.SqlServer.Management.Smo.DatabaseReplicaState : SqlSmoObject {
    [SfcKeyAttribute("0")]
[SfcPropertyAttribute("1024")]
public string AvailabilityReplicaServerName { get; }
    [SfcKeyAttribute("1")]
[SfcPropertyAttribute("1024")]
public string AvailabilityDatabaseName { get; }
    public static string UrnSuffix { get; }
    [SfcObjectAttribute("1")]
public AvailabilityGroup Parent { get; }
    [SfcPropertyAttribute("1024")]
public Guid AvailabilityDateabaseId { get; }
    [SfcPropertyAttribute("1024")]
public Guid AvailabilityGroupId { get; }
    [SfcPropertyAttribute("1024")]
public string AvailabilityGroupName { get; }
    [SfcPropertyAttribute("1024")]
public Guid AvailabilityReplicaId { get; }
    [SfcPropertyAttribute("1024")]
public int DatabaseId { get; }
    [SfcPropertyAttribute("1024")]
public decimal EndOfLogLSN { get; }
    [SfcPropertyAttribute("1024")]
public int EstimatedDataLoss { get; }
    [SfcPropertyAttribute("1024")]
public double EstimatedRecoveryTime { get; }
    [SfcPropertyAttribute("1024")]
public long FileStreamSendRate { get; }
    [SfcPropertyAttribute("1024")]
public bool IsFailoverReady { get; }
    [SfcPropertyAttribute("1024")]
public bool IsJoined { get; }
    [SfcPropertyAttribute("1024")]
public bool IsLocal { get; }
    [SfcPropertyAttribute("1024")]
public bool IsSuspended { get; }
    [SfcPropertyAttribute("1024")]
public decimal LastCommitLSN { get; }
    [SfcPropertyAttribute("1024")]
public DateTime LastCommitTime { get; }
    [SfcPropertyAttribute("1024")]
public decimal LastHardenedLSN { get; }
    [SfcPropertyAttribute("1024")]
public DateTime LastHardenedTime { get; }
    [SfcPropertyAttribute("1024")]
public decimal LastReceivedLSN { get; }
    [SfcPropertyAttribute("1024")]
public DateTime LastReceivedTime { get; }
    [SfcPropertyAttribute("1024")]
public decimal LastRedoneLSN { get; }
    [SfcPropertyAttribute("1024")]
public DateTime LastRedoneTime { get; }
    [SfcPropertyAttribute("1024")]
public decimal LastSentLSN { get; }
    [SfcPropertyAttribute("1024")]
public DateTime LastSentTime { get; }
    [SfcPropertyAttribute("1024")]
public long LogSendQueueSize { get; }
    [SfcPropertyAttribute("1024")]
public long LogSendRate { get; }
    [SfcPropertyAttribute("1024")]
public decimal RecoveryLSN { get; }
    [SfcPropertyAttribute("1024")]
public long RedoQueueSize { get; }
    [SfcPropertyAttribute("1024")]
public long RedoRate { get; }
    [SfcPropertyAttribute("1024")]
public AvailabilityReplicaAvailabilityMode ReplicaAvailabilityMode { get; public set; }
    [SfcPropertyAttribute("1024")]
public AvailabilityReplicaRole ReplicaRole { get; }
    [SfcPropertyAttribute("1024")]
public DatabaseReplicaSuspendReason SuspendReason { get; }
    [SfcPropertyAttribute("1024")]
public double SynchronizationPerformance { get; }
    [SfcPropertyAttribute("1024")]
public AvailabilityDatabaseSynchronizationState SynchronizationState { get; }
    [SfcPropertyAttribute("1024")]
public decimal TruncationLSN { get; }
    internal DatabaseReplicaState(AbstractCollectionBase parentColl, ObjectKeyBase key, SqlSmoState state);
    public string get_AvailabilityReplicaServerName();
    public string get_AvailabilityDatabaseName();
    public static string get_UrnSuffix();
    public AvailabilityGroup get_Parent();
    internal virtual SqlPropertyMetadataProvider GetPropertyMetadataProvider();
    public Guid get_AvailabilityDateabaseId();
    public Guid get_AvailabilityGroupId();
    public string get_AvailabilityGroupName();
    public Guid get_AvailabilityReplicaId();
    public int get_DatabaseId();
    public decimal get_EndOfLogLSN();
    public int get_EstimatedDataLoss();
    public double get_EstimatedRecoveryTime();
    public long get_FileStreamSendRate();
    public bool get_IsFailoverReady();
    public bool get_IsJoined();
    public bool get_IsLocal();
    public bool get_IsSuspended();
    public decimal get_LastCommitLSN();
    public DateTime get_LastCommitTime();
    public decimal get_LastHardenedLSN();
    public DateTime get_LastHardenedTime();
    public decimal get_LastReceivedLSN();
    public DateTime get_LastReceivedTime();
    public decimal get_LastRedoneLSN();
    public DateTime get_LastRedoneTime();
    public decimal get_LastSentLSN();
    public DateTime get_LastSentTime();
    public long get_LogSendQueueSize();
    public long get_LogSendRate();
    public decimal get_RecoveryLSN();
    public long get_RedoQueueSize();
    public long get_RedoRate();
    public AvailabilityReplicaAvailabilityMode get_ReplicaAvailabilityMode();
    public void set_ReplicaAvailabilityMode(AvailabilityReplicaAvailabilityMode value);
    public AvailabilityReplicaRole get_ReplicaRole();
    public DatabaseReplicaSuspendReason get_SuspendReason();
    public double get_SynchronizationPerformance();
    public AvailabilityDatabaseSynchronizationState get_SynchronizationState();
    public decimal get_TruncationLSN();
}
[DefaultMemberAttribute("Item")]
public class Microsoft.SqlServer.Management.Smo.DatabaseReplicaStateCollection : DatabaseReplicaStateCollectionBase {
    public AvailabilityGroup Parent { get; }
    public DatabaseReplicaState Item { get; }
    public DatabaseReplicaState Item { get; }
    internal DatabaseReplicaStateCollection(SqlSmoObject parentInstance);
    public AvailabilityGroup get_Parent();
    public DatabaseReplicaState get_Item(int index);
    public DatabaseReplicaState get_Item(string replicaName, string name);
    public void CopyTo(DatabaseReplicaState[] array, int index);
    public DatabaseReplicaState ItemById(int id);
    protected virtual Type GetCollectionElementType();
    internal virtual SqlSmoObject GetCollectionElementInstance(ObjectKeyBase key, SqlSmoState state);
    public void Remove(string replicaName, string name);
    public void Remove(DatabaseReplicaState DatabaseReplicaState);
    public void Add(DatabaseReplicaState DatabaseReplicaState);
}
public class Microsoft.SqlServer.Management.Smo.DatabaseReplicaStateCollectionBase : SortedListCollectionBase {
    internal DatabaseReplicaStateCollectionBase(SqlSmoObject parent);
    protected virtual void InitInnerCollection();
    protected virtual Type GetCollectionElementType();
    internal virtual ObjectKeyBase CreateKeyFromUrn(Urn urn);
}
internal class Microsoft.SqlServer.Management.Smo.DatabaseReplicaStateObjectComparer : ObjectComparerBase {
    public DatabaseReplicaStateObjectComparer(IComparer stringComparer);
    public virtual int Compare(object obj1, object obj2);
}
internal class Microsoft.SqlServer.Management.Smo.DatabaseReplicaStateObjectKey : ObjectKeyBase {
    internal static StringCollection fields;
    [CompilerGeneratedAttribute]
private string <ReplicaName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DatabaseName>k__BackingField;
    public string ReplicaName { get; public set; }
    public string DatabaseName { get; public set; }
    public string UrnFilter { get; }
    public bool IsNull { get; }
    public DatabaseReplicaStateObjectKey(string replicaName, string databaseName);
    private static DatabaseReplicaStateObjectKey();
    [CompilerGeneratedAttribute]
public string get_ReplicaName();
    [CompilerGeneratedAttribute]
public void set_ReplicaName(string value);
    [CompilerGeneratedAttribute]
public string get_DatabaseName();
    [CompilerGeneratedAttribute]
public void set_DatabaseName(string value);
    public virtual string get_UrnFilter();
    public virtual StringCollection GetFieldNames();
    internal virtual void Validate(Type objectType);
    public virtual bool get_IsNull();
    public virtual string GetExceptionName();
    public virtual ObjectKeyBase Clone();
    public virtual ObjectComparerBase GetComparer(IComparer stringComparer);
    public virtual string ToString();
}
[StateChangeEventAttribute("CREATE_ROLE", "ROLE")]
[StateChangeEventAttribute("ALTER_ROLE", "ROLE")]
[StateChangeEventAttribute("ALTER_AUTHORIZATION_DATABASE", "ROLE")]
[EvaluationModeAttribute("7")]
[PhysicalFacetAttribute]
[SfcElementTypeAttribute("Role")]
[SfcElementAttribute("48")]
public class Microsoft.SqlServer.Management.Smo.DatabaseRole : ScriptNameObjectBase {
    public static string UrnSuffix { get; }
    [SfcObjectAttribute("1", "0", "Microsoft.SqlServer.Management.Smo.ExtendedProperty")]
public ExtendedPropertyCollection ExtendedProperties { get; }
    [SfcKeyAttribute("0")]
[SfcPropertyAttribute("7424")]
public string Name { get; public set; }
    [SfcPropertyAttribute("7168")]
[SfcReferenceAttribute("Microsoft.SqlServer.Management.Smo.User", "Server[@Name = '{0}']/Database[@Name = '{1}']/User[@Name = '{2}']", "Mono.Cecil.CustomAttributeArgument[]")]
[SfcReferenceAttribute("Microsoft.SqlServer.Management.Smo.DatabaseRole", "Server[@Name = '{0}']/Database[@Name = '{1}']/Role[@Name = '{2}']", "Mono.Cecil.CustomAttributeArgument[]")]
[SfcReferenceAttribute("Microsoft.SqlServer.Management.Smo.ApplicationRole", "Server[@Name = '{0}']/Database[@Name = '{1}']/ApplicationRole[@Name = '{2}']", "Mono.Cecil.CustomAttributeArgument[]")]
[CLSCompliantAttribute("False")]
public string Owner { get; public set; }
    [SfcObjectAttribute("1", "32")]
public Database Parent { get; public set; }
    internal UserPermissionCollection Permissions { get; }
    private bool Microsoft.SqlServer.Management.Sdk.Sfc.ISfcSupportsDesignMode.IsDesignMode { get; }
    [SfcPropertyAttribute("3072")]
public DateTime CreateDate { get; }
    [SfcPropertyAttribute("3072")]
public DateTime DateLastModified { get; }
    [SfcPropertyAttribute("3072")]
public int ID { get; }
    [SfcPropertyAttribute("7168")]
public bool IsFixedRole { get; }
    internal DatabaseRole(AbstractCollectionBase parentColl, ObjectKeyBase key, SqlSmoState state);
    public DatabaseRole(Database database, string name);
    public static string get_UrnSuffix();
    public sealed virtual ExtendedPropertyCollection get_ExtendedProperties();
    public sealed virtual void Drop();
    public sealed virtual void DropIfExists();
    internal virtual void ScriptDrop(StringCollection dropQuery, ScriptingPreferences sp);
    public sealed virtual void Create();
    private void CreateDdl(StringBuilder sb, ScriptingPreferences sp, string owner);
    internal virtual void ScriptCreate(StringCollection createQuery, ScriptingPreferences sp);
    internal virtual void ScriptAssociations(StringCollection createQuery, ScriptingPreferences sp);
    public void AddMember(string name);
    public void DropMember(string name);
    public StringCollection EnumMembers();
    private string ScriptAddToRole(string role, ScriptingPreferences sp);
    private void AddToRole(string role);
    private bool CompareAccToDbCollation(object obj1, object obj2);
    public StringCollection EnumRoles();
    public sealed virtual StringCollection Script();
    public sealed virtual StringCollection Script(ScriptingOptions scriptingOptions);
    public sealed virtual void Rename(string newname);
    internal virtual void ScriptRename(StringCollection renameQuery, ScriptingPreferences sp, string newName);
    public DataTable EnumAgentProxyAccounts();
    public virtual string get_Name();
    public virtual void set_Name(string value);
    public string get_Owner();
    public void set_Owner(string value);
    public sealed virtual void Alter();
    internal virtual void ScriptAlter(StringCollection alterQuery, ScriptingPreferences sp);
    internal virtual PropagateInfo[] GetPropagateInfo(PropagateAction action);
    internal virtual void AddScriptPermission(StringCollection query, ScriptingPreferences sp);
    internal static String[] GetScriptFields(Type parentType, ServerVersion version, DatabaseEngineType databaseEngineType, DatabaseEngineEdition databaseEngineEdition, bool defaultTextMode);
    public Database get_Parent();
    public void set_Parent(Database value);
    internal virtual UserPermissionCollection get_Permissions();
    private sealed virtual override bool Microsoft.SqlServer.Management.Sdk.Sfc.ISfcSupportsDesignMode.get_IsDesignMode();
    internal virtual SqlPropertyMetadataProvider GetPropertyMetadataProvider();
    public DateTime get_CreateDate();
    public DateTime get_DateLastModified();
    public int get_ID();
    public bool get_IsFixedRole();
    public sealed virtual void Deny(ObjectPermissionSet permission, String[] granteeNames);
    public sealed virtual void Deny(ObjectPermissionSet permission, String[] granteeNames, bool cascade);
    public sealed virtual void Grant(ObjectPermissionSet permission, String[] granteeNames);
    public sealed virtual void Grant(ObjectPermissionSet permission, String[] granteeNames, bool grantGrant);
    public sealed virtual void Grant(ObjectPermissionSet permission, String[] granteeNames, bool grantGrant, string asRole);
    public sealed virtual void Revoke(ObjectPermissionSet permission, String[] granteeNames);
    public sealed virtual void Revoke(ObjectPermissionSet permission, String[] granteeNames, bool revokeGrant, bool cascade);
    public void Revoke(ObjectPermissionSet permission, String[] granteeNames, bool revokeGrant, bool cascade, string asRole);
    public sealed virtual void Deny(ObjectPermissionSet permission, string granteeName);
    public sealed virtual void Deny(ObjectPermissionSet permission, string granteeName, bool cascade);
    public sealed virtual void Grant(ObjectPermissionSet permission, string granteeName);
    public sealed virtual void Grant(ObjectPermissionSet permission, string granteeName, bool grantGrant);
    public sealed virtual void Grant(ObjectPermissionSet permission, string granteeName, bool grantGrant, string asRole);
    public sealed virtual void Revoke(ObjectPermissionSet permission, string granteeName);
    public void Revoke(ObjectPermissionSet permission, string granteeName, bool revokeGrant, bool cascade);
    public sealed virtual void Revoke(ObjectPermissionSet permission, string granteeName, bool revokeGrant, bool cascade, string asRole);
    public sealed virtual ObjectPermissionInfo[] EnumObjectPermissions();
    public sealed virtual ObjectPermissionInfo[] EnumObjectPermissions(string granteeName);
    public sealed virtual ObjectPermissionInfo[] EnumObjectPermissions(ObjectPermissionSet permissions);
    public sealed virtual ObjectPermissionInfo[] EnumObjectPermissions(string granteeName, ObjectPermissionSet permissions);
}
[DefaultMemberAttribute("Item")]
public class Microsoft.SqlServer.Management.Smo.DatabaseRoleCollection : SimpleObjectCollectionBase {
    public Database Parent { get; }
    public DatabaseRole Item { get; }
    public DatabaseRole Item { get; }
    internal DatabaseRoleCollection(SqlSmoObject parentInstance);
    public Database get_Parent();
    public DatabaseRole get_Item(int index);
    public DatabaseRole get_Item(string name);
    public void CopyTo(DatabaseRole[] array, int index);
    public DatabaseRole ItemById(int id);
    protected virtual Type GetCollectionElementType();
    internal virtual SqlSmoObject GetCollectionElementInstance(ObjectKeyBase key, SqlSmoState state);
    public void Add(DatabaseRole databaseRole);
    internal SqlSmoObject GetObjectByName(string name);
    internal virtual ObjectKeyBase CreateKeyFromUrn(Urn urn);
}
[SfcElementAttribute("48")]
public class Microsoft.SqlServer.Management.Smo.DatabaseScopedConfiguration : NamedSmoObject {
    public static string UrnSuffix { get; }
    [SfcObjectAttribute("1")]
public Database Parent { get; public set; }
    [SfcPropertyAttribute("3072")]
public int Id { get; }
    [SfcPropertyAttribute("3072")]
public bool IsValueDefault { get; }
    [SfcPropertyAttribute("3072")]
public string Value { get; public set; }
    [SfcPropertyAttribute("3072")]
public string ValueForSecondary { get; public set; }
    internal DatabaseScopedConfiguration(AbstractCollectionBase parentColl, ObjectKeyBase key, SqlSmoState state);
    public DatabaseScopedConfiguration(Database database, string name);
    public static string get_UrnSuffix();
    internal static String[] GetScriptFields(Type parentType, ServerVersion version, DatabaseEngineType databaseEngineType, DatabaseEngineEdition databaseEngineEdition, bool defaultTextMode);
    public Database get_Parent();
    public void set_Parent(Database value);
    internal virtual SqlPropertyMetadataProvider GetPropertyMetadataProvider();
    public int get_Id();
    public bool get_IsValueDefault();
    public string get_Value();
    public void set_Value(string value);
    public string get_ValueForSecondary();
    public void set_ValueForSecondary(string value);
}
[DefaultMemberAttribute("Item")]
public class Microsoft.SqlServer.Management.Smo.DatabaseScopedConfigurationCollection : SimpleObjectCollectionBase {
    public Database Parent { get; }
    public DatabaseScopedConfiguration Item { get; }
    public DatabaseScopedConfiguration Item { get; }
    internal DatabaseScopedConfigurationCollection(SqlSmoObject parentInstance);
    public Database get_Parent();
    public DatabaseScopedConfiguration get_Item(int index);
    public DatabaseScopedConfiguration get_Item(string name);
    public void CopyTo(DatabaseScopedConfiguration[] array, int index);
    public DatabaseScopedConfiguration ItemById(int id);
    protected virtual Type GetCollectionElementType();
    internal virtual SqlSmoObject GetCollectionElementInstance(ObjectKeyBase key, SqlSmoState state);
    public void Add(DatabaseScopedConfiguration databaseScopedConfiguration);
    internal SqlSmoObject GetObjectByName(string name);
    internal virtual ObjectKeyBase CreateKeyFromUrn(Urn urn);
    protected virtual void InitInnerCollection();
}
internal class Microsoft.SqlServer.Management.Smo.DatabaseScopedConfigurationObjectComparer : ObjectComparerBase {
    public virtual int Compare(object obj1, object obj2);
}
[SfcElementAttribute("48")]
public class Microsoft.SqlServer.Management.Smo.DatabaseScopedCredential : NamedSmoObject {
    private SqlSecureString secret;
    public static string UrnSuffix { get; }
    [SfcObjectAttribute("1")]
public Database Parent { get; public set; }
    internal UserPermissionCollection Permissions { get; }
    [SfcPropertyAttribute("3072")]
public DateTime CreateDate { get; }
    [SfcPropertyAttribute("3072")]
public DateTime DateLastModified { get; }
    [SfcPropertyAttribute("3072")]
public int ID { get; }
    [SfcPropertyAttribute("3072")]
public string Identity { get; public set; }
    internal DatabaseScopedCredential(AbstractCollectionBase parentColl, ObjectKeyBase key, SqlSmoState state);
    public DatabaseScopedCredential(Database database, string name);
    public sealed virtual void Create();
    public void Create(string identity);
    public void Create(string identity, string secret);
    public void Create(string identity, SecureString secret);
    public sealed virtual StringCollection Script();
    public sealed virtual StringCollection Script(ScriptingOptions scriptingOptions);
    internal virtual void ScriptCreate(StringCollection queries, ScriptingPreferences sp);
    public sealed virtual void Alter();
    public void Alter(string identity);
    public void Alter(string identity, string secret);
    public void Alter(string identity, SecureString secret);
    internal virtual void ScriptAlter(StringCollection queries, ScriptingPreferences sp);
    public sealed virtual void Drop();
    public sealed virtual void DropIfExists();
    internal virtual void ScriptDrop(StringCollection queries, ScriptingPreferences sp);
    public static string get_UrnSuffix();
    private string CreateAlterScript(StringCollection queries, bool create, ScriptingPreferences sp);
    internal static String[] GetScriptFields(Type parentType, ServerVersion version, DatabaseEngineType databaseEngineType, DatabaseEngineEdition databaseEngineEdition, bool defaultTextMode);
    public Database get_Parent();
    public void set_Parent(Database value);
    internal virtual UserPermissionCollection get_Permissions();
    internal virtual SqlPropertyMetadataProvider GetPropertyMetadataProvider();
    public DateTime get_CreateDate();
    public DateTime get_DateLastModified();
    public int get_ID();
    public string get_Identity();
    public void set_Identity(string value);
    public sealed virtual void Deny(ObjectPermissionSet permission, String[] granteeNames);
    public sealed virtual void Deny(ObjectPermissionSet permission, String[] granteeNames, bool cascade);
    public sealed virtual void Grant(ObjectPermissionSet permission, String[] granteeNames);
    public sealed virtual void Grant(ObjectPermissionSet permission, String[] granteeNames, bool grantGrant);
    public sealed virtual void Grant(ObjectPermissionSet permission, String[] granteeNames, bool grantGrant, string asRole);
    public sealed virtual void Revoke(ObjectPermissionSet permission, String[] granteeNames);
    public sealed virtual void Revoke(ObjectPermissionSet permission, String[] granteeNames, bool revokeGrant, bool cascade);
    public void Revoke(ObjectPermissionSet permission, String[] granteeNames, bool revokeGrant, bool cascade, string asRole);
    public sealed virtual void Deny(ObjectPermissionSet permission, string granteeName);
    public sealed virtual void Deny(ObjectPermissionSet permission, string granteeName, bool cascade);
    public sealed virtual void Grant(ObjectPermissionSet permission, string granteeName);
    public sealed virtual void Grant(ObjectPermissionSet permission, string granteeName, bool grantGrant);
    public sealed virtual void Grant(ObjectPermissionSet permission, string granteeName, bool grantGrant, string asRole);
    public sealed virtual void Revoke(ObjectPermissionSet permission, string granteeName);
    public void Revoke(ObjectPermissionSet permission, string granteeName, bool revokeGrant, bool cascade);
    public sealed virtual void Revoke(ObjectPermissionSet permission, string granteeName, bool revokeGrant, bool cascade, string asRole);
    public sealed virtual ObjectPermissionInfo[] EnumObjectPermissions();
    public sealed virtual ObjectPermissionInfo[] EnumObjectPermissions(string granteeName);
    public sealed virtual ObjectPermissionInfo[] EnumObjectPermissions(ObjectPermissionSet permissions);
    public sealed virtual ObjectPermissionInfo[] EnumObjectPermissions(string granteeName, ObjectPermissionSet permissions);
}
[DefaultMemberAttribute("Item")]
public class Microsoft.SqlServer.Management.Smo.DatabaseScopedCredentialCollection : SimpleObjectCollectionBase {
    public Database Parent { get; }
    public DatabaseScopedCredential Item { get; }
    public DatabaseScopedCredential Item { get; }
    internal DatabaseScopedCredentialCollection(SqlSmoObject parentInstance);
    public Database get_Parent();
    public DatabaseScopedCredential get_Item(int index);
    public DatabaseScopedCredential get_Item(string name);
    public void CopyTo(DatabaseScopedCredential[] array, int index);
    public DatabaseScopedCredential ItemById(int id);
    protected virtual Type GetCollectionElementType();
    internal virtual SqlSmoObject GetCollectionElementInstance(ObjectKeyBase key, SqlSmoState state);
    public void Add(DatabaseScopedCredential databaseScopedCredential);
    internal SqlSmoObject GetObjectByName(string name);
    internal virtual ObjectKeyBase CreateKeyFromUrn(Urn urn);
}
public class Microsoft.SqlServer.Management.Smo.DatabaseSecurityAdapter : DatabaseAdapter {
    public bool IsOwnerSysadmin { get; }
    public DatabaseSecurityAdapter(Database obj);
    public sealed virtual bool get_IsOwnerSysadmin();
    public virtual void Refresh();
}
[CLSCompliantAttribute("False")]
public class Microsoft.SqlServer.Management.Smo.DatabaseSnapshotExtender : SmoObjectExtender`1<Database> {
    private ReadOnlyCollection`1<DataFile> files;
    private string name;
    [ExtendedPropertyAttribute]
public ReadOnlyCollection`1<DataFile> Files { get; }
    public DatabaseSnapshotExtender(Database database);
    public ReadOnlyCollection`1<DataFile> get_Files();
    private ReadOnlyCollection`1<DataFile> CreateFilesCollection();
    protected virtual void parent_PropertyChanged(object sender, PropertyChangedEventArgs e);
    private void ProcessDataFileNames();
    private void ProcessDataFileName(DataFile dataFile, string oldName, string newName);
    private sealed virtual override ValidationState Microsoft.SqlServer.Management.Sdk.Sfc.ISfcValidate.Validate(string methodName, Object[] arguments);
}
internal abstract class Microsoft.SqlServer.Management.Smo.DataClassificationScriptGenerator : object {
    protected ScriptingPreferences ScriptingPreferences;
    protected Tuple`2[] dcPropertyTuples;
    protected string columnName;
    protected string tableName;
    protected string schemaName;
    protected bool scriptOnlyMode;
    private DataClassificationScriptGenerator(Column column, ScriptingPreferences sp);
    private DataClassificationScriptGenerator(SensitivityClassification sensitivityClassification, ScriptingPreferences sp);
    internal static DataClassificationScriptGenerator Create(Column column, ScriptingPreferences sp);
    internal static DataClassificationScriptGenerator Create(SensitivityClassification sensitivityClassification, ScriptingPreferences sp);
    internal abstract virtual string Add();
    internal abstract virtual string Update();
    internal abstract virtual string Drop();
}
internal class Microsoft.SqlServer.Management.Smo.DataEnumerator : object {
    private SqlDataReader reader;
    private SqlConnection conn;
    private Database database;
    private Dictionary`2<string, SqlDataType> columnDataType;
    private Dictionary`2<string, int> columnNumericPrecision;
    private Dictionary`2<string, int> columnNumericScale;
    private Dictionary`2<string, string> columnCollation;
    private string tableName;
    private string schemaQualifiedTableName;
    private ScriptingPreferences options;
    private string insertPrefix;
    private string selectCommand;
    private string columnNames;
    private bool hasIdentity;
    private bool hasPersisted;
    private bool hasWritableColumns;
    private string currentScriptString;
    private EnumeratorState state;
    public object Current { get; }
    private string System.Collections.Generic.IEnumerator<System.String>.Current { get; }
    private SqlConnection Connection { get; }
    internal DataEnumerator(Table table, ScriptingPreferences options);
    public sealed virtual object get_Current();
    private sealed virtual override string System.Collections.Generic.IEnumerator<System.String>.get_Current();
    public sealed virtual bool MoveNext();
    public sealed virtual void Reset();
    public sealed virtual void Dispose();
    private void GetColumnNamesAndSelectSQL(StringBuilder& columnNameSQL, StringBuilder& selectSQL, ScriptingPreferences options, Table table);
    private void StoreDataTypeInformation(Column col);
    private string GetNextInsertStatement();
    private string FormatValueByTypeForSelect(Column col);
    private string FormatSqlVariantValue(int columnIndex);
    private string FormatValueByType(string columnName, int columnIndex);
    private static CultureInfo GetUsCultureInfo();
    private static string ByteArrayToHexString(Byte[] binValue);
    private void CleanUp();
    private SqlConnection get_Connection();
}
[EvaluationModeAttribute("4")]
[PhysicalFacetAttribute]
[SfcElementTypeAttribute("File")]
[SfcElementAttribute("16")]
public class Microsoft.SqlServer.Management.Smo.DataFile : DatabaseFile {
    public static string UrnSuffix { get; }
    [SfcObjectAttribute("1")]
public FileGroup Parent { get; public set; }
    private bool Microsoft.SqlServer.Management.Sdk.Sfc.ISfcSupportsDesignMode.IsDesignMode { get; }
    [SfcPropertyAttribute("1056")]
public double AvailableSpace { get; }
    [SfcPropertyAttribute("1056")]
public long BytesReadFromDisk { get; }
    [SfcPropertyAttribute("1056")]
public long BytesWrittenToDisk { get; }
    [SfcPropertyAttribute("1280")]
public string FileName { get; public set; }
    [SfcPropertyAttribute("1024")]
public double Growth { get; public set; }
    [SfcPropertyAttribute("1024")]
public FileGrowthType GrowthType { get; public set; }
    [SfcPropertyAttribute("1024")]
public int ID { get; }
    [SfcPropertyAttribute("1024")]
public bool IsOffline { get; }
    [SfcPropertyAttribute("1280")]
public bool IsPrimaryFile { get; public set; }
    [SfcPropertyAttribute("1024")]
public bool IsReadOnly { get; }
    [SfcPropertyAttribute("1024")]
public bool IsReadOnlyMedia { get; }
    [SfcPropertyAttribute("1024")]
public bool IsSparse { get; }
    [SfcPropertyAttribute("1024")]
public double MaxSize { get; public set; }
    [SfcPropertyAttribute("1056")]
public long NumberOfDiskReads { get; }
    [SfcPropertyAttribute("1056")]
public long NumberOfDiskWrites { get; }
    [SfcPropertyAttribute("1024")]
public double Size { get; public set; }
    [SfcPropertyAttribute("1056")]
public double UsedSpace { get; }
    [SfcPropertyAttribute("1056")]
public long VolumeFreeSpace { get; }
    internal DataFile(AbstractCollectionBase parentColl, ObjectKeyBase key, SqlSmoState state);
    public DataFile(FileGroup fileGroup, string name, string fileName);
    public DataFile(FileGroup fileGroup, string name);
    private void InitializeDefaults();
    public static string get_UrnSuffix();
    public sealed virtual void Create();
    internal virtual void ScriptCreate(StringCollection createQuery, ScriptingPreferences sp);
    internal static void Validate_set_IsPrimaryFile(Property prop, object newValue);
    internal virtual void ValidateProperty(Property prop, object value);
    public void SetOffline();
    internal static String[] GetScriptFields(Type parentType, ServerVersion version, DatabaseEngineType databaseEngineType, DatabaseEngineEdition databaseEngineEdition, bool defaultTextMode);
    public FileGroup get_Parent();
    public void set_Parent(FileGroup value);
    private sealed virtual override bool Microsoft.SqlServer.Management.Sdk.Sfc.ISfcSupportsDesignMode.get_IsDesignMode();
    internal virtual SqlPropertyMetadataProvider GetPropertyMetadataProvider();
    public double get_AvailableSpace();
    public long get_BytesReadFromDisk();
    public long get_BytesWrittenToDisk();
    public string get_FileName();
    public void set_FileName(string value);
    public double get_Growth();
    public void set_Growth(double value);
    public FileGrowthType get_GrowthType();
    public void set_GrowthType(FileGrowthType value);
    public int get_ID();
    public bool get_IsOffline();
    public bool get_IsPrimaryFile();
    public void set_IsPrimaryFile(bool value);
    public bool get_IsReadOnly();
    public bool get_IsReadOnlyMedia();
    public bool get_IsSparse();
    public double get_MaxSize();
    public void set_MaxSize(double value);
    public long get_NumberOfDiskReads();
    public long get_NumberOfDiskWrites();
    public double get_Size();
    public void set_Size(double value);
    public double get_UsedSpace();
    public long get_VolumeFreeSpace();
    internal virtual String[] GetNonAlterableProperties();
}
[DefaultMemberAttribute("Item")]
public class Microsoft.SqlServer.Management.Smo.DataFileCollection : SimpleObjectCollectionBase {
    public FileGroup Parent { get; }
    public DataFile Item { get; }
    public DataFile Item { get; }
    internal DataFileCollection(SqlSmoObject parentInstance);
    public FileGroup get_Parent();
    public DataFile get_Item(int index);
    public DataFile get_Item(string name);
    public void CopyTo(DataFile[] array, int index);
    public DataFile ItemById(int id);
    protected virtual Type GetCollectionElementType();
    internal virtual SqlSmoObject GetCollectionElementInstance(ObjectKeyBase key, SqlSmoState state);
    public void Remove(DataFile dataFile);
    public void Remove(string name);
    public void Add(DataFile dataFile);
    internal SqlSmoObject GetObjectByName(string name);
    internal virtual ObjectKeyBase CreateKeyFromUrn(Urn urn);
}
internal class Microsoft.SqlServer.Management.Smo.DataPreferences : object {
    [CompilerGeneratedAttribute]
private bool <ChangeTracking>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <OptimizerData>k__BackingField;
    public bool ChangeTracking { get; public set; }
    public bool OptimizerData { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_ChangeTracking();
    [CompilerGeneratedAttribute]
public void set_ChangeTracking(bool value);
    [CompilerGeneratedAttribute]
public bool get_OptimizerData();
    [CompilerGeneratedAttribute]
public void set_OptimizerData(bool value);
    internal object Clone();
}
internal class Microsoft.SqlServer.Management.Smo.DataScriptCollection : object {
    private DataEnumerator dataEnumerator;
    private Table table;
    private ScriptingPreferences options;
    public DataScriptCollection(Table table, ScriptingPreferences options);
    public DataScriptCollection(DataEnumerator dataEnumerator);
    public sealed virtual IEnumerator`1<string> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public class Microsoft.SqlServer.Management.Smo.DataType : object {
    private SqlSmoObject parent;
    private string name;
    internal SqlDataType sqlDataType;
    private string schema;
    private int maximumLength;
    private int numericPrecision;
    private int numericScale;
    private XmlDocumentConstraint xmlDocumentConstraint;
    public static DataType BigInt { get; }
    public static DataType HierarchyId { get; }
    public static DataType Bit { get; }
    public static DataType DateTime { get; }
    public static DataType Float { get; }
    public static DataType Geography { get; }
    public static DataType Geometry { get; }
    public static DataType Image { get; }
    public static DataType Int { get; }
    public static DataType Money { get; }
    public static DataType NText { get; }
    public static DataType NVarCharMax { get; }
    public static DataType Real { get; }
    public static DataType SmallDateTime { get; }
    public static DataType SmallInt { get; }
    public static DataType SmallMoney { get; }
    public static DataType Text { get; }
    public static DataType Timestamp { get; }
    public static DataType TinyInt { get; }
    public static DataType UniqueIdentifier { get; }
    public static DataType VarBinaryMax { get; }
    public static DataType VarCharMax { get; }
    public static DataType Variant { get; }
    public static DataType SysName { get; }
    public static DataType Date { get; }
    public static DataType Json { get; }
    internal SqlSmoObject Parent { get; internal set; }
    public string Name { get; public set; }
    public SqlDataType SqlDataType { get; public set; }
    public string Schema { get; public set; }
    public int MaximumLength { get; public set; }
    public int NumericPrecision { get; public set; }
    public int NumericScale { get; public set; }
    public XmlDocumentConstraint XmlDocumentConstraint { get; public set; }
    public bool IsNumericType { get; }
    public bool IsStringType { get; }
    public DataType(SqlDataType sqlDataType);
    public DataType(SqlDataType sqlDataType, int precisionOrMaxLengthOrScale);
    public DataType(SqlDataType sqlDataType, int precision, int scale);
    public DataType(SqlDataType sqlDataType, string type);
    public DataType(SqlDataType sqlDataType, string type, string schema);
    public DataType(XmlSchemaCollection xmlSchemaCollection);
    public DataType(UserDefinedDataType userDefinedDataType);
    public DataType(UserDefinedTableType userDefinedTableType);
    public DataType(UserDefinedType userDefinedType);
    public virtual bool Equals(object obj);
    public bool Equals(DataType dt);
    public virtual int GetHashCode();
    private bool IsEqualInAllAspects(DataType dt);
    public static DataType get_BigInt();
    public static DataType get_HierarchyId();
    public static DataType Binary(int maxLength);
    public static DataType get_Bit();
    public static DataType Char(int maxLength);
    public static DataType get_DateTime();
    public static DataType Decimal(int scale, int precision);
    public static DataType Numeric(int scale, int precision);
    public static DataType get_Float();
    public static DataType get_Geography();
    public static DataType get_Geometry();
    public static DataType get_Image();
    public static DataType get_Int();
    public static DataType get_Money();
    public static DataType NChar(int maxLength);
    public static DataType get_NText();
    public static DataType NVarChar(int maxLength);
    public static DataType get_NVarCharMax();
    public static DataType get_Real();
    public static DataType get_SmallDateTime();
    public static DataType get_SmallInt();
    public static DataType get_SmallMoney();
    public static DataType get_Text();
    public static DataType get_Timestamp();
    public static DataType get_TinyInt();
    public static DataType get_UniqueIdentifier();
    public static DataType UserDefinedDataType(string type, string schema);
    public static DataType UserDefinedDataType(string type);
    public static DataType UserDefinedTableType(string type, string schema);
    public static DataType UserDefinedTableType(string type);
    public static DataType UserDefinedType(string type, string schema);
    public static DataType UserDefinedType(string type);
    public static DataType VarBinary(int maxLength);
    public static DataType get_VarBinaryMax();
    public static DataType VarChar(int maxLength);
    public static DataType get_VarCharMax();
    public static DataType get_Variant();
    public static DataType Xml(string type);
    public static DataType Xml(string type, string schema);
    public static DataType Xml(string type, string schema, XmlDocumentConstraint xmlDocumentConstraint);
    public static DataType get_SysName();
    public static DataType get_Date();
    public static DataType Time(int scale);
    public static DataType DateTimeOffset(int scale);
    public static DataType DateTime2(int scale);
    public static DataType get_Json();
    public virtual string ToString();
    private void CheckInputObject(SqlSmoObject input);
    internal SqlSmoObject get_Parent();
    internal void set_Parent(SqlSmoObject value);
    public string get_Name();
    public void set_Name(string value);
    public SqlDataType get_SqlDataType();
    public void set_SqlDataType(SqlDataType value);
    public string get_Schema();
    public void set_Schema(string value);
    public int get_MaximumLength();
    public void set_MaximumLength(int value);
    public int get_NumericPrecision();
    public void set_NumericPrecision(int value);
    public int get_NumericScale();
    public void set_NumericScale(int value);
    public XmlDocumentConstraint get_XmlDocumentConstraint();
    public void set_XmlDocumentConstraint(XmlDocumentConstraint value);
    public bool get_IsNumericType();
    public bool get_IsStringType();
    internal DataType Clone();
    internal void ReadFromPropBag(SqlSmoObject sqlObject);
    public string GetSqlName(SqlDataType sqldt);
    internal static SqlDataType UserDefinedDataTypeToEnum(UserDefinedDataType uddt);
    public static SqlDataType SqlToEnum(string sqlTypeName);
    private static bool IsSystemDataType80(SqlDataType dataType);
    private static bool IsSystemDataType90(SqlDataType dataType);
    private static bool IsSystemDataType100(SqlDataType dataType);
    private static bool IsSystemDataType160(SqlDataType dataType);
    internal static bool IsSystemDataType(SqlDataType dataType, SqlServerVersion targetVersion, DatabaseEngineType engineType, DatabaseEngineEdition engineEdition);
    internal static bool IsDataTypeSupportedOnTargetVersion(SqlDataType dataType, SqlServerVersion targetVersion, DatabaseEngineType engineType, DatabaseEngineEdition engineEdition);
    internal static bool IsDataTypeSupportedOnCloud(SqlDataType dataType);
    internal static bool IsSystemDataTypeOnAzure(SqlDataType dataType, DatabaseEngineEdition engineEdition);
    internal static bool IsDataTypeSupportedOnSqlDw(SqlDataType dataType);
    internal static void CheckColumnTypeSupportability(string parentName, string columnName, SqlDataType dataType, ScriptingPreferences sp);
    internal static bool IsTypeFloatStateCreating(string sqlType, SqlSmoObject sObj);
    private bool HasTypeChangedToReal();
    private sealed virtual override XmlSchema System.Xml.Serialization.IXmlSerializable.GetSchema();
    private sealed virtual override void System.Xml.Serialization.IXmlSerializable.ReadXml(XmlReader reader);
    private sealed virtual override void System.Xml.Serialization.IXmlSerializable.WriteXml(XmlWriter writer);
}
internal class Microsoft.SqlServer.Management.Smo.DataTypePreferences : object {
    [CompilerGeneratedAttribute]
private bool <UserDefinedDataTypesToBaseType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <TimestampToBinary>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <XmlNamespaces>k__BackingField;
    public bool UserDefinedDataTypesToBaseType { get; public set; }
    public bool TimestampToBinary { get; public set; }
    public bool XmlNamespaces { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_UserDefinedDataTypesToBaseType();
    [CompilerGeneratedAttribute]
public void set_UserDefinedDataTypesToBaseType(bool value);
    [CompilerGeneratedAttribute]
public bool get_TimestampToBinary();
    [CompilerGeneratedAttribute]
public void set_TimestampToBinary(bool value);
    [CompilerGeneratedAttribute]
public bool get_XmlNamespaces();
    [CompilerGeneratedAttribute]
public void set_XmlNamespaces(bool value);
    private void Init();
    internal object Clone();
}
public abstract class Microsoft.SqlServer.Management.Smo.DdlTriggerBase : ScriptNameObjectBase {
    [SfcPropertyAttribute("1056")]
public string TextBody { get; public set; }
    [SfcPropertyAttribute("1056")]
public string TextHeader { get; public set; }
    [SfcPropertyAttribute("1024")]
public bool TextMode { get; public set; }
    internal DdlTriggerBase(AbstractCollectionBase parentColl, ObjectKeyBase key, SqlSmoState state);
    public sealed virtual void Create();
    internal virtual void ScriptCreate(StringCollection queries, ScriptingPreferences sp);
    public sealed virtual void CreateOrAlter();
    internal virtual void ScriptCreateOrAlter(StringCollection queries, ScriptingPreferences sp);
    public sealed virtual void Drop();
    public sealed virtual void DropIfExists();
    public sealed virtual void Alter();
    internal virtual void ScriptAlter(StringCollection alterQuery, ScriptingPreferences sp);
    private bool ShouldScriptBodyAtAlter();
    protected virtual bool IsEventSetDirty();
    private bool GetInsteafOfValue(ScriptingPreferences sp);
    private void ScriptTrigger(StringCollection queries, ScriptingPreferences sp, ScriptHeaderType scriptHeaderType);
    internal string ScriptEnableDisableCommand(bool isEnabled, ScriptingPreferences sp);
    internal abstract virtual string GetIfNotExistStatement(ScriptingPreferences sp, string prefix);
    protected virtual bool CheckObjectDirty();
    private void GetInternalDDL(StringCollection queries, ScriptingPreferences sp, ScriptHeaderType scriptHeaderType);
    internal virtual void AddDdlTriggerEvents(StringBuilder sb, ScriptingPreferences sp);
    public sealed virtual StringCollection Script();
    public sealed virtual StringCollection Script(ScriptingOptions scriptingOptions);
    public sealed virtual string ScriptHeader(bool forAlter);
    public sealed virtual string ScriptHeader(ScriptHeaderType scriptHeaderType);
    public virtual string get_TextBody();
    public virtual void set_TextBody(string value);
    public virtual string get_TextHeader();
    public virtual void set_TextHeader(string value);
    public virtual bool get_TextMode();
    public virtual void set_TextMode(bool value);
}
[EvaluationModeAttribute("4")]
[PhysicalFacetAttribute]
[SfcElementAttribute("48")]
public class Microsoft.SqlServer.Management.Smo.Default : DefaultRuleBase {
    public static string UrnSuffix { get; }
    [SfcObjectAttribute("1")]
public Database Parent { get; public set; }
    private bool Microsoft.SqlServer.Management.Sdk.Sfc.ISfcSupportsDesignMode.IsDesignMode { get; }
    [SfcPropertyAttribute("3072")]
public DateTime CreateDate { get; }
    [SfcPropertyAttribute("3072")]
public int ID { get; }
    internal Default(AbstractCollectionBase parentColl, ObjectKeyBase key, SqlSmoState state);
    public Default(Database database, string name);
    public Default(Database database, string name, string schema);
    public void ChangeSchema(string newSchema);
    public static string get_UrnSuffix();
    internal static String[] GetScriptFields(Type parentType, ServerVersion version, DatabaseEngineType databaseEngineType, DatabaseEngineEdition databaseEngineEdition, bool defaultTextMode);
    public Database get_Parent();
    public void set_Parent(Database value);
    private sealed virtual override bool Microsoft.SqlServer.Management.Sdk.Sfc.ISfcSupportsDesignMode.get_IsDesignMode();
    internal virtual SqlPropertyMetadataProvider GetPropertyMetadataProvider();
    public DateTime get_CreateDate();
    public int get_ID();
    internal virtual String[] GetNonAlterableProperties();
}
[DefaultMemberAttribute("Item")]
public class Microsoft.SqlServer.Management.Smo.DefaultCollection : SchemaCollectionBase {
    public Database Parent { get; }
    public Default Item { get; }
    public Default Item { get; }
    public Default Item { get; }
    internal DefaultCollection(SqlSmoObject parentInstance);
    public Database get_Parent();
    public Default get_Item(int index);
    public Default get_Item(string name);
    public Default get_Item(string name, string schema);
    public void CopyTo(Default[] array, int index);
    public Default ItemById(int id);
    protected virtual Type GetCollectionElementType();
    internal virtual SqlSmoObject GetCollectionElementInstance(ObjectKeyBase key, SqlSmoState state);
    public void Add(Default def);
    internal SqlSmoObject GetObjectByName(string name);
}
[SfcElementTypeAttribute("Default")]
[SfcElementAttribute("48")]
public class Microsoft.SqlServer.Management.Smo.DefaultConstraint : ScriptNameObjectBase {
    internal bool forceEmbedDefaultConstraint;
    [SfcObjectAttribute("1", "32")]
public Column Parent { get; internal set; }
    [SfcPropertyAttribute("7424")]
public string Name { get; public set; }
    [SfcPropertyAttribute("3072")]
public bool IsSystemNamed { get; }
    public static string UrnSuffix { get; }
    [SfcObjectAttribute("1", "0", "Microsoft.SqlServer.Management.Smo.ExtendedProperty")]
public ExtendedPropertyCollection ExtendedProperties { get; }
    private bool Microsoft.SqlServer.Management.Sdk.Sfc.ISfcSupportsDesignMode.IsDesignMode { get; }
    [SfcPropertyAttribute("3072")]
public DateTime CreateDate { get; }
    [SfcPropertyAttribute("3072")]
public DateTime DateLastModified { get; }
    [SfcPropertyAttribute("3072")]
public int ID { get; }
    [SfcPropertyAttribute("3072")]
public bool IsFileTableDefined { get; }
    [SfcPropertyAttribute("7200")]
public string Text { get; public set; }
    internal DefaultConstraint(Column parentColumn, ObjectKeyBase key, SqlSmoState state);
    private string IfExistsDefaultConstraint(string notOrEmpty, string name, string script, string newLine);
    public Column get_Parent();
    internal void set_Parent(Column value);
    public virtual string get_Name();
    public virtual void set_Name(string value);
    public bool get_IsSystemNamed();
    internal virtual void UpdateObjectState();
    internal virtual void ValidateName(string name);
    public sealed virtual StringCollection Script();
    public sealed virtual StringCollection Script(ScriptingOptions scriptingOptions);
    public static string get_UrnSuffix();
    protected sealed virtual void GetUrnRecursive(StringBuilder urnbuilder, UrnIdOption idOption);
    public sealed virtual void Create();
    internal virtual void ScriptCreate(StringCollection queries, ScriptingPreferences sp);
    public sealed virtual void Drop();
    public sealed virtual void DropIfExists();
    internal virtual void ScriptDrop(StringCollection dropQuery, ScriptingPreferences sp);
    private string AddIfExistsCheck(string script, ScriptingPreferences sp, string qualifier);
    public sealed virtual void Alter();
    internal string ScriptDdl(ScriptingPreferences sp);
    public sealed virtual void Rename(string newname);
    internal virtual void ScriptRename(StringCollection renameQuery, ScriptingPreferences sp, string newName);
    protected virtual string GetServerName();
    protected internal virtual string GetDBName();
    public sealed virtual ExtendedPropertyCollection get_ExtendedProperties();
    internal virtual PropagateInfo[] GetPropagateInfo(PropagateAction action);
    internal static String[] GetScriptFields(Type parentType, ServerVersion version, DatabaseEngineType databaseEngineType, DatabaseEngineEdition databaseEngineEdition, bool defaultTextMode);
    internal virtual string FormatFullNameForScripting(ScriptingPreferences sp);
    private sealed virtual override bool Microsoft.SqlServer.Management.Sdk.Sfc.ISfcSupportsDesignMode.get_IsDesignMode();
    internal virtual SqlPropertyMetadataProvider GetPropertyMetadataProvider();
    public DateTime get_CreateDate();
    public DateTime get_DateLastModified();
    public int get_ID();
    public bool get_IsFileTableDefined();
    public string get_Text();
    public void set_Text(string value);
}
internal class Microsoft.SqlServer.Management.Smo.DefaultDatabasePrefetch : DatabasePrefetchBase {
    private static int MAX_BATCH_SIZE;
    private Dictionary`2<Urn, int> idDictionary;
    public DefaultDatabasePrefetch(Database db, ScriptingPreferences scriptingPreferences, HashSet`1<UrnTypeKey> filteredTypes);
    private static DefaultDatabasePrefetch();
    private void InitializeTableSets(HashSet`1<Urn> userTables, HashSet`1<Urn> systemTables);
    private void InitializeViewSets(HashSet`1<Urn> userViews, HashSet`1<Urn> systemViews);
    private void GetIsSystemObjectForCollection(string urnSuffix);
    private void GetUserAndSystemObjects(SmoCollectionBase collection, ICollection`1<Urn> userObjects, ICollection`1<Urn> systemObjects);
    protected virtual void InitializeBatchedPrefetchDictionary();
    protected virtual void InitializePrefetchableTypes();
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.Smo.DefaultDatabasePrefetch/<PrePrefetchBatches>d__9")]
protected virtual IEnumerable`1<Urn> PrePrefetchBatches();
    private bool IsAllObjectPrefetchPossible(List`1<Urn> inputList, HashSet`1<Urn> userObjectSet, HashSet`1<Urn> systemObjectSet, String& filter);
    protected virtual void PrefetchBatch(string urnType, HashSet`1<Urn> urnBatch, int currentBatchCount, int totalBatchCount);
    protected virtual List`1<string> GetChildrenList(string urnType);
    private string GetIdFilter(HashSet`1<Urn> urnBatch);
    private string GetFilteringids(HashSet`1<Urn> objects);
    protected virtual void PrefetchUsingIN(string idFilter, string initializeCollectionsFilter, string type, IEnumerable`1<string> prefetchingList);
    protected virtual void AddUrn(Urn item);
}
public class Microsoft.SqlServer.Management.Smo.DefaultLanguage : object {
    private SqlSmoObject smoObj;
    private string parentPropertyName;
    private string lcidPropertyName;
    private string namePropertyName;
    private string name;
    private int lcid;
    public int Lcid { get; public set; }
    public string Name { get; public set; }
    internal DefaultLanguage(SqlSmoObject smoObj, string parentPropertyName);
    public int get_Lcid();
    public void set_Lcid(int value);
    public string get_Name();
    public void set_Name(string value);
    private void SetProperty(string propertyName, bool isLcid, object value, bool withConsistencyCheck);
    internal bool IsProperlyInitialized();
    internal DefaultLanguage Copy(SqlSmoObject smoObj, string parentPropertyName);
    internal void VerifyBothLcidAndNameNotDirty(bool isLanguageValueNoneAllowed);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class Microsoft.SqlServer.Management.Smo.DefaultRuleBase : ScriptSchemaObjectBase {
    [SfcObjectAttribute("1", "0", "Microsoft.SqlServer.Management.Smo.ExtendedProperty")]
public ExtendedPropertyCollection ExtendedProperties { get; }
    [SfcPropertyAttribute("3104")]
public string TextBody { get; public set; }
    [SfcPropertyAttribute("3104")]
public string TextHeader { get; public set; }
    [SfcPropertyAttribute("3072")]
public bool TextMode { get; public set; }
    internal DefaultRuleBase(AbstractCollectionBase parentColl, ObjectKeyBase key, SqlSmoState state);
    public void BindToColumn(string tablename, string colname, string tableschema);
    public void BindToColumn(string tablename, string colname);
    public void BindToDataType(string datatypename, bool bindcolumns);
    public void UnbindFromColumn(string tablename, string colname);
    public void UnbindFromColumn(string tablename, string colname, string tableschema);
    public void UnbindFromDataType(string datatypename, bool bindcolumns);
    public SqlSmoObject[] EnumBoundColumns();
    public SqlSmoObject[] EnumBoundDataTypes();
    public sealed virtual ExtendedPropertyCollection get_ExtendedProperties();
    public sealed virtual void Create();
    internal virtual void ScriptCreate(StringCollection queries, ScriptingPreferences sp);
    public sealed virtual void Drop();
    public sealed virtual void DropIfExists();
    internal virtual void ScriptDrop(StringCollection queries, ScriptingPreferences sp);
    public sealed virtual void Alter();
    internal virtual void ScriptAlter(StringCollection alterQuery, ScriptingPreferences sp);
    protected virtual void PostCreate();
    internal virtual PropagateInfo[] GetPropagateInfo(PropagateAction action);
    public sealed virtual StringCollection Script();
    public sealed virtual StringCollection Script(ScriptingOptions scriptingOptions);
    public sealed virtual string ScriptHeader(bool forAlter);
    public sealed virtual string ScriptHeader(ScriptHeaderType scriptHeaderType);
    public sealed virtual string get_TextBody();
    public sealed virtual void set_TextBody(string value);
    public sealed virtual string get_TextHeader();
    public sealed virtual void set_TextHeader(string value);
    public sealed virtual bool get_TextMode();
    public sealed virtual void set_TextMode(bool value);
}
[DefaultMemberAttribute("Item")]
public class Microsoft.SqlServer.Management.Smo.DependencyCollection : object {
    private List`1<DependencyCollectionNode> innerColl;
    public DependencyCollectionNode Item { get; public set; }
    public int Count { get; }
    private bool System.Collections.Generic.ICollection<Microsoft.SqlServer.Management.Smo.DependencyCollectionNode>.IsReadOnly { get; }
    public bool ContainsUrn(Urn urn, Server srv);
    public sealed virtual int IndexOf(DependencyCollectionNode dependencyCollectionNode);
    public sealed virtual void Insert(int index, DependencyCollectionNode dependencyCollectionNode);
    public sealed virtual void RemoveAt(int index);
    public sealed virtual DependencyCollectionNode get_Item(int index);
    public sealed virtual void set_Item(int index, DependencyCollectionNode value);
    public sealed virtual void Add(DependencyCollectionNode dependencyCollectionNode);
    public void AddRange(IEnumerable`1<DependencyCollectionNode> dependencyCollectionNodeCollection);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(DependencyCollectionNode dependencyCollectionNode);
    public sealed virtual void CopyTo(DependencyCollectionNode[] array, int arrayIndex);
    public sealed virtual bool Remove(DependencyCollectionNode dependencyCollectionNode);
    public sealed virtual int get_Count();
    private sealed virtual override bool System.Collections.Generic.ICollection<Microsoft.SqlServer.Management.Smo.DependencyCollectionNode>.get_IsReadOnly();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual IEnumerator`1<DependencyCollectionNode> GetEnumerator();
}
public class Microsoft.SqlServer.Management.Smo.DependencyCollectionNode : DependencyNode {
    private bool isRootNode;
    public bool IsRootNode { get; public set; }
    internal bool Transactable { get; }
    internal DependencyCollectionNode(Urn urn, bool isSchemaBound, bool fRoot);
    public bool get_IsRootNode();
    public void set_IsRootNode(bool value);
    internal bool get_Transactable();
}
internal class Microsoft.SqlServer.Management.Smo.DependencyComparer : object {
    private Server server;
    internal DependencyComparer(Server srv);
    public sealed virtual int Compare(object x, object y);
}
public class Microsoft.SqlServer.Management.Smo.DependencyNode : object {
    private Urn urn;
    private bool schemaBound;
    public Urn Urn { get; public set; }
    public bool IsSchemaBound { get; public set; }
    internal DependencyNode(Urn urn, bool isSchemaBound);
    public virtual Urn get_Urn();
    public virtual void set_Urn(Urn value);
    public virtual bool get_IsSchemaBound();
    public virtual void set_IsSchemaBound(bool value);
}
public class Microsoft.SqlServer.Management.Smo.DependencyTree : DependencyTreeNode {
    private DependencyChainCollection dependencies;
    private DependencyChainCollection roots;
    private bool dependsOnParents;
    private Server server;
    protected internal DependencyChainCollection Dependencies { get; protected internal set; }
    protected internal DependencyChainCollection Roots { get; protected internal set; }
    protected internal bool DependsOnParents { get; protected internal set; }
    public int NumberOfSiblings { get; }
    public int Count { get; }
    public Urn Urn { get; }
    public bool HasChildNodes { get; }
    public DependencyTreeNode FirstChild { get; }
    public DependencyTreeNode NextSibling { get; }
    internal DependencyTree(Urn[] urns, DependencyChainCollection dependencies, bool fParents, Server server);
    public DependencyTree(DependencyTree tree);
    protected internal DependencyChainCollection get_Dependencies();
    protected internal void set_Dependencies(DependencyChainCollection value);
    protected internal DependencyChainCollection get_Roots();
    protected internal void set_Roots(DependencyChainCollection value);
    protected internal bool get_DependsOnParents();
    protected internal void set_DependsOnParents(bool value);
    public virtual int get_NumberOfSiblings();
    public int get_Count();
    public DependencyTree Copy();
    public virtual Urn get_Urn();
    public virtual bool get_HasChildNodes();
    public virtual DependencyTreeNode get_FirstChild();
    public virtual DependencyTreeNode get_NextSibling();
    public void Remove(DependencyTreeNode depNode);
}
public class Microsoft.SqlServer.Management.Smo.DependencyTreeNode : DependencyNode {
    private int index;
    private DependencyChainCollection siblings;
    protected internal int Index { get; protected internal set; }
    protected internal DependencyChainCollection Siblings { get; protected internal set; }
    public int NumberOfSiblings { get; }
    public bool HasChildNodes { get; }
    public DependencyTreeNode FirstChild { get; }
    public DependencyTreeNode NextSibling { get; }
    internal DependencyTreeNode(int index, DependencyChainCollection siblings);
    protected internal int get_Index();
    protected internal void set_Index(int value);
    protected internal DependencyChainCollection get_Siblings();
    protected internal void set_Siblings(DependencyChainCollection value);
    public virtual int get_NumberOfSiblings();
    public virtual bool get_HasChildNodes();
    public virtual DependencyTreeNode get_FirstChild();
    public virtual DependencyTreeNode get_NextSibling();
}
public enum Microsoft.SqlServer.Management.Smo.DependencyType : Enum {
    public int value__;
    public static DependencyType Children;
    public static DependencyType Parents;
}
public class Microsoft.SqlServer.Management.Smo.DependencyWalker : object {
    private Server server;
    private DependencyTree tree;
    private int totalCount;
    private int total;
    private Hashtable knownObjectsList;
    private ProgressReportEventHandler discoveryProgress;
    private ScriptingFilter filterCallbackFunction;
    public Server Server { get; public set; }
    protected internal DependencyTree DependencyTree { get; protected internal set; }
    protected internal int TotalCount { get; protected internal set; }
    protected internal int Total { get; protected internal set; }
    protected internal Hashtable KnownObjectsList { get; protected internal set; }
    public ScriptingFilter FilterCallbackFunction { get; public set; }
    public DependencyWalker(Server server);
    public Server get_Server();
    public void set_Server(Server value);
    protected internal DependencyTree get_DependencyTree();
    protected internal void set_DependencyTree(DependencyTree value);
    protected internal int get_TotalCount();
    protected internal void set_TotalCount(int value);
    protected internal int get_Total();
    protected internal void set_Total(int value);
    protected internal Hashtable get_KnownObjectsList();
    protected internal void set_KnownObjectsList(Hashtable value);
    protected Server GetServerObject();
    public void add_DiscoveryProgress(ProgressReportEventHandler value);
    public void remove_DiscoveryProgress(ProgressReportEventHandler value);
    public ScriptingFilter get_FilterCallbackFunction();
    public void set_FilterCallbackFunction(ScriptingFilter value);
    public DependencyTree DiscoverDependencies(UrnCollection list, DependencyType dependencyType);
    public DependencyTree DiscoverDependencies(UrnCollection list, bool parents);
    public DependencyTree DiscoverDependencies(SqlSmoObject[] objects, DependencyType dependencyType);
    public DependencyTree DiscoverDependencies(SqlSmoObject[] objects, bool parents);
    public DependencyTree DiscoverDependencies(Urn[] urns, DependencyType dependencyType);
    public DependencyTree DiscoverDependencies(Urn[] urns, bool parents);
    private bool ObjectEncounteredBefore(Urn newUrn);
    private void WalkDependentChildren(DependencyTree tree, DependencyTreeNode depParent, DependencyCollection depList);
    public DependencyCollection WalkDependencies(DependencyTree tree);
}
public enum Microsoft.SqlServer.Management.Smo.DeviceType : Enum {
    public int value__;
    public static DeviceType LogicalDevice;
    public static DeviceType Tape;
    public static DeviceType File;
    public static DeviceType Pipe;
    public static DeviceType VirtualDevice;
    public static DeviceType Url;
}
internal static class Microsoft.SqlServer.Management.Smo.DiscoveryHelper : object {
    internal static bool IsSystemObject(object obj);
}
internal enum Microsoft.SqlServer.Management.Smo.DurabilityTypeMap : Enum {
    public int value__;
    public static DurabilityTypeMap SCHEMA_ONLY;
    public static DurabilityTypeMap SCHEMA_AND_DATA;
}
internal class Microsoft.SqlServer.Management.Smo.DynamicPropertyMetadataProvider : PropertyMetadataProvider {
    private SortedList`2<string, StaticMetadata> m_listData;
    public int Count { get; }
    public virtual int PropertyNameToIDLookup(string propertyName);
    public virtual int get_Count();
    public virtual StaticMetadata GetStaticMetadata(int id);
    public void AddMetadata(string name, bool readOnly, Type type);
}
[SfcElementAttribute("48")]
public class Microsoft.SqlServer.Management.Smo.EdgeConstraint : ScriptNameObjectBase {
    private static string EDGE_CONSTRAINT_URN;
    private static string DELETE_ACTION;
    private EdgeConstraintClauseCollection m_EdgeConstraintClauses;
    [SfcObjectAttribute("1", "0", "Microsoft.SqlServer.Management.Smo.EdgeConstraintClause", "32")]
public EdgeConstraintClauseCollection EdgeConstraintClauses { get; }
    public static string UrnSuffix { get; }
    [SfcKeyAttribute("0")]
[SfcPropertyAttribute("7424")]
public string Name { get; public set; }
    [SfcPropertyAttribute("3072")]
public bool IsSystemNamed { get; }
    [SfcObjectAttribute("1", "32")]
[SfcParentAttribute("Table")]
[SfcParentAttribute("UserDefinedTableType")]
public SqlSmoObject Parent { get; public set; }
    private bool Microsoft.SqlServer.Management.Sdk.Sfc.ISfcSupportsDesignMode.IsDesignMode { get; }
    [SfcPropertyAttribute("3072")]
public DateTime CreateDate { get; }
    [SfcPropertyAttribute("3072")]
public DateTime DateLastModified { get; }
    [SfcPropertyAttribute("7424")]
public EdgeConstraintDeleteAction DeleteAction { get; public set; }
    [SfcPropertyAttribute("3072")]
public int ID { get; }
    internal EdgeConstraint(AbstractCollectionBase parentColl, ObjectKeyBase key, SqlSmoState state);
    public EdgeConstraint(SqlSmoObject parent, string name);
    public EdgeConstraintClauseCollection get_EdgeConstraintClauses();
    public static string get_UrnSuffix();
    public virtual string get_Name();
    public virtual void set_Name(string value);
    public bool get_IsSystemNamed();
    internal virtual void UpdateObjectState();
    public sealed virtual StringCollection Script();
    public sealed virtual StringCollection Script(ScriptingOptions scriptingOptions);
    public sealed virtual void Create();
    internal virtual void ScriptCreate(StringCollection queries, ScriptingPreferences sp);
    internal string ScriptWithOption(ScriptingPreferences sp, ScriptFlag option);
    internal string ScriptDdlBody(ScriptingPreferences sp);
    private string ScriptDeleteReferentialAction();
    private string ScriptDdlBodyWorker(ScriptingPreferences sp, bool withConstraintName);
    private string ScriptEdgeConstraintClauses();
    public sealed virtual void Rename(string newName);
    internal virtual void ScriptRename(StringCollection renameQuery, ScriptingPreferences sp, string newName);
    public sealed virtual void Drop();
    private void ThrowIfParentIsNotEdgeTable();
    public sealed virtual void DropIfExists();
    internal virtual void ScriptDrop(StringCollection queries, ScriptingPreferences sp);
    public sealed virtual void MarkForDrop(bool dropOnAlter);
    internal static String[] GetScriptFields(Type parentType, ServerVersion version, DatabaseEngineType databaseEngineType, DatabaseEngineEdition databaseEngineEdition, bool defaultTextMode);
    public SqlSmoObject get_Parent();
    public void set_Parent(SqlSmoObject value);
    private sealed virtual override bool Microsoft.SqlServer.Management.Sdk.Sfc.ISfcSupportsDesignMode.get_IsDesignMode();
    internal virtual SqlPropertyMetadataProvider GetPropertyMetadataProvider();
    public DateTime get_CreateDate();
    public DateTime get_DateLastModified();
    public EdgeConstraintDeleteAction get_DeleteAction();
    public void set_DeleteAction(EdgeConstraintDeleteAction value);
    public int get_ID();
    internal virtual String[] GetNonAlterableProperties();
}
[SfcElementAttribute("48")]
public class Microsoft.SqlServer.Management.Smo.EdgeConstraintClause : ScriptNameObjectBase {
    private static string EdgeConstraintClause_URN;
    public static string UrnSuffix { get; }
    [SfcObjectAttribute("1", "32")]
[SfcParentAttribute("EdgeConstraint")]
public SqlSmoObject Parent { get; public set; }
    private bool Microsoft.SqlServer.Management.Sdk.Sfc.ISfcSupportsDesignMode.IsDesignMode { get; }
    [SfcPropertyAttribute("3072")]
public string From { get; public set; }
    [SfcPropertyAttribute("3072")]
public string FromSchema { get; public set; }
    [SfcPropertyAttribute("3072")]
public string To { get; public set; }
    [SfcPropertyAttribute("3072")]
public string ToSchema { get; public set; }
    internal EdgeConstraintClause(AbstractCollectionBase parentColl, ObjectKeyBase key, SqlSmoState state);
    public EdgeConstraintClause(EdgeConstraint parent, Table fromTable, Table toTable);
    public EdgeConstraintClause(SqlSmoObject parent, string name);
    public static string get_UrnSuffix();
    internal static String[] GetScriptFields(Type parentType, ServerVersion version, DatabaseEngineType databaseEngineType, DatabaseEngineEdition databaseEngineEdition, bool defaultTextMode);
    public SqlSmoObject get_Parent();
    public void set_Parent(SqlSmoObject value);
    private sealed virtual override bool Microsoft.SqlServer.Management.Sdk.Sfc.ISfcSupportsDesignMode.get_IsDesignMode();
    internal virtual SqlPropertyMetadataProvider GetPropertyMetadataProvider();
    public string get_From();
    public void set_From(string value);
    public string get_FromSchema();
    public void set_FromSchema(string value);
    public string get_To();
    public void set_To(string value);
    public string get_ToSchema();
    public void set_ToSchema(string value);
}
[DefaultMemberAttribute("Item")]
public class Microsoft.SqlServer.Management.Smo.EdgeConstraintClauseCollection : SimpleObjectCollectionBase {
    public SqlSmoObject Parent { get; }
    public EdgeConstraintClause Item { get; }
    public EdgeConstraintClause Item { get; }
    internal EdgeConstraintClauseCollection(SqlSmoObject parentInstance);
    public SqlSmoObject get_Parent();
    public EdgeConstraintClause get_Item(int index);
    public EdgeConstraintClause get_Item(string name);
    public void CopyTo(EdgeConstraintClause[] array, int index);
    public EdgeConstraintClause ItemById(int id);
    protected virtual Type GetCollectionElementType();
    internal virtual SqlSmoObject GetCollectionElementInstance(ObjectKeyBase key, SqlSmoState state);
    public void Remove(EdgeConstraintClause edgeconstraintclause);
    public void Remove(string name);
    public void Add(EdgeConstraintClause edgeconstraintclause);
    internal SqlSmoObject GetObjectByName(string name);
    internal virtual ObjectKeyBase CreateKeyFromUrn(Urn urn);
}
[DefaultMemberAttribute("Item")]
public class Microsoft.SqlServer.Management.Smo.EdgeConstraintCollection : SimpleObjectCollectionBase {
    public SqlSmoObject Parent { get; }
    public EdgeConstraint Item { get; }
    public EdgeConstraint Item { get; }
    internal EdgeConstraintCollection(SqlSmoObject parentInstance);
    public SqlSmoObject get_Parent();
    public EdgeConstraint get_Item(int index);
    public EdgeConstraint get_Item(string name);
    public void CopyTo(EdgeConstraint[] array, int index);
    public EdgeConstraint ItemById(int id);
    protected virtual Type GetCollectionElementType();
    internal virtual SqlSmoObject GetCollectionElementInstance(ObjectKeyBase key, SqlSmoState state);
    public void Remove(EdgeConstraint edgeconstraint);
    public void Remove(string name);
    public void Add(EdgeConstraint edgeconstraint);
    internal SqlSmoObject GetObjectByName(string name);
    internal virtual ObjectKeyBase CreateKeyFromUrn(Urn urn);
}
public enum Microsoft.SqlServer.Management.Smo.Edition : Enum {
    public int value__;
    public static Edition Unknown;
    public static Edition PersonalOrDesktopEngine;
    public static Edition Standard;
    public static Edition EnterpriseOrDeveloper;
    public static Edition Express;
    public static Edition SqlDatabase;
    public static Edition SqlDataWarehouse;
    public static Edition SqlStretchDatabase;
    public static Edition SqlManagedInstance;
    public static Edition SqlDatabaseEdge;
    public static Edition SqlAzureArcManagedInstance;
    public static Edition SqlOnDemand;
}
[StateChangeEventAttribute("CREATE_ENDPOINT", "ENDPOINT")]
[StateChangeEventAttribute("ALTER_ENDPOINT", "ENDPOINT")]
[StateChangeEventAttribute("ALTER_AUTHORIZATION_SERVER", "ENDPOINT")]
[EvaluationModeAttribute("7")]
[PhysicalFacetAttribute]
[SfcElementAttribute("16")]
public class Microsoft.SqlServer.Management.Smo.Endpoint : ScriptNameObjectBase {
    private Payload m_payload;
    private Protocol m_protocol;
    internal object oldEndpointTypeValue;
    public static string UrnSuffix { get; }
    [SfcObjectAttribute("2", "0")]
public Payload Payload { get; }
    [SfcObjectAttribute("2", "0")]
public Protocol Protocol { get; }
    [SfcObjectAttribute("1")]
public Server Parent { get; public set; }
    internal UserPermissionCollection Permissions { get; }
    [SfcPropertyAttribute("1024")]
public EndpointState EndpointState { get; }
    [SfcPropertyAttribute("1024")]
public EndpointType EndpointType { get; public set; }
    [SfcPropertyAttribute("1024")]
public int ID { get; }
    [SfcPropertyAttribute("1024")]
public bool IsAdminEndpoint { get; }
    [SfcPropertyAttribute("1024")]
public bool IsSystemObject { get; }
    [SfcPropertyAttribute("1024")]
public string Owner { get; public set; }
    [SfcPropertyAttribute("1024")]
public ProtocolType ProtocolType { get; public set; }
    internal Endpoint(AbstractCollectionBase parentColl, ObjectKeyBase key, SqlSmoState state);
    public Endpoint(Server server, string name);
    public static string get_UrnSuffix();
    public Payload get_Payload();
    public Protocol get_Protocol();
    public sealed virtual void Create();
    internal virtual void ScriptCreate(StringCollection queries, ScriptingPreferences sp);
    private void ScriptEndpoint(StringBuilder sb, ScriptingPreferences sp);
    public sealed virtual void Alter();
    internal virtual void ScriptAlter(StringCollection alterQuery, ScriptingPreferences sp);
    public sealed virtual void Drop();
    public sealed virtual void DropIfExists();
    internal virtual void ScriptDrop(StringCollection dropQuery, ScriptingPreferences sp);
    public void Start();
    public void Stop();
    public void Disable();
    private void SetEndpointState(EndpointState newState);
    public sealed virtual StringCollection Script();
    public sealed virtual StringCollection Script(ScriptingOptions scriptingOptions);
    private bool IsDllDirty();
    internal virtual PropagateInfo[] GetPropagateInfo(PropagateAction action);
    protected virtual void MarkDropped();
    internal virtual void ValidateProperty(Property prop, object value);
    public virtual void Refresh();
    public Server get_Parent();
    public void set_Parent(Server value);
    internal virtual UserPermissionCollection get_Permissions();
    internal virtual SqlPropertyMetadataProvider GetPropertyMetadataProvider();
    public EndpointState get_EndpointState();
    public EndpointType get_EndpointType();
    public void set_EndpointType(EndpointType value);
    public int get_ID();
    public bool get_IsAdminEndpoint();
    public bool get_IsSystemObject();
    public string get_Owner();
    public void set_Owner(string value);
    public ProtocolType get_ProtocolType();
    public void set_ProtocolType(ProtocolType value);
    public sealed virtual void Deny(ObjectPermissionSet permission, String[] granteeNames);
    public sealed virtual void Deny(ObjectPermissionSet permission, String[] granteeNames, bool cascade);
    public sealed virtual void Grant(ObjectPermissionSet permission, String[] granteeNames);
    public sealed virtual void Grant(ObjectPermissionSet permission, String[] granteeNames, bool grantGrant);
    public sealed virtual void Grant(ObjectPermissionSet permission, String[] granteeNames, bool grantGrant, string asRole);
    public sealed virtual void Revoke(ObjectPermissionSet permission, String[] granteeNames);
    public sealed virtual void Revoke(ObjectPermissionSet permission, String[] granteeNames, bool revokeGrant, bool cascade);
    public void Revoke(ObjectPermissionSet permission, String[] granteeNames, bool revokeGrant, bool cascade, string asRole);
    public sealed virtual void Deny(ObjectPermissionSet permission, string granteeName);
    public sealed virtual void Deny(ObjectPermissionSet permission, string granteeName, bool cascade);
    public sealed virtual void Grant(ObjectPermissionSet permission, string granteeName);
    public sealed virtual void Grant(ObjectPermissionSet permission, string granteeName, bool grantGrant);
    public sealed virtual void Grant(ObjectPermissionSet permission, string granteeName, bool grantGrant, string asRole);
    public sealed virtual void Revoke(ObjectPermissionSet permission, string granteeName);
    public void Revoke(ObjectPermissionSet permission, string granteeName, bool revokeGrant, bool cascade);
    public sealed virtual void Revoke(ObjectPermissionSet permission, string granteeName, bool revokeGrant, bool cascade, string asRole);
    public sealed virtual ObjectPermissionInfo[] EnumObjectPermissions();
    public sealed virtual ObjectPermissionInfo[] EnumObjectPermissions(string granteeName);
    public sealed virtual ObjectPermissionInfo[] EnumObjectPermissions(ObjectPermissionSet permissions);
    public sealed virtual ObjectPermissionInfo[] EnumObjectPermissions(string granteeName, ObjectPermissionSet permissions);
}
[DefaultMemberAttribute("Item")]
public class Microsoft.SqlServer.Management.Smo.EndpointCollection : SimpleObjectCollectionBase {
    public Server Parent { get; }
    public Endpoint Item { get; }
    public Endpoint Item { get; }
    internal EndpointCollection(SqlSmoObject parentInstance);
    public Server get_Parent();
    public Endpoint get_Item(int index);
    public Endpoint get_Item(string name);
    public void CopyTo(Endpoint[] array, int index);
    public Endpoint ItemById(int id);
    protected virtual Type GetCollectionElementType();
    internal virtual SqlSmoObject GetCollectionElementInstance(ObjectKeyBase key, SqlSmoState state);
    public void Add(Endpoint endpoint);
    internal SqlSmoObject GetObjectByName(string name);
    internal virtual ObjectKeyBase CreateKeyFromUrn(Urn urn);
    public Endpoint[] EnumEndpoints(EndpointType endpointType);
}
public abstract class Microsoft.SqlServer.Management.Smo.EndpointPayload : SqlSmoObject {
    [SfcObjectAttribute("1")]
public Endpoint Parent { get; }
    internal EndpointPayload(Endpoint parentEndpoint, ObjectKeyBase key, SqlSmoState state);
    public Endpoint get_Parent();
    public virtual string ToString();
    internal abstract virtual void Script(StringBuilder sb, ScriptingPreferences sp);
    internal void ScriptAuthenticationAndEncryption(StringBuilder sb, ScriptingPreferences sp, bool needsComma);
}
public abstract class Microsoft.SqlServer.Management.Smo.EndpointProtocol : SqlSmoObject {
    [SfcObjectAttribute("1")]
public Endpoint Parent { get; }
    internal EndpointProtocol(Endpoint parentEndpoint, ObjectKeyBase key, SqlSmoState state);
    public Endpoint get_Parent();
    public virtual string ToString();
    internal abstract virtual void Script(StringBuilder sb, ScriptingPreferences sp);
}
internal class Microsoft.SqlServer.Management.Smo.EnumerableContainer : object {
    private List`1<IEnumerable> listOfObjects;
    internal void Insert(int index, StringCollection stringCollection);
    internal void Clear();
    internal void Add(IEnumerable`1<string> stringEnumerable);
    internal void Add(StringCollection stringCollection);
    internal static StringCollection IEnumerableToStringCollection(IEnumerable`1<string> enumerable);
    public sealed virtual IEnumerator`1<string> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
internal class Microsoft.SqlServer.Management.Smo.EnumeratorContainer : object {
    private List`1<IEnumerable> listOfObjects;
    private IEnumerator currentEnumerator;
    private int indexOfObject;
    private EnumeratorState state;
    public string Current { get; }
    private object System.Collections.IEnumerator.Current { get; }
    internal void Add(IEnumerable`1<string> stringEnumerable);
    internal void Add(StringCollection stringCollection);
    public sealed virtual string get_Current();
    public sealed virtual void Dispose();
    private sealed virtual override object System.Collections.IEnumerator.get_Current();
    public sealed virtual bool MoveNext();
    public sealed virtual void Reset();
}
internal enum Microsoft.SqlServer.Management.Smo.EnumScriptOptions : Enum {
    public int value__;
    public static EnumScriptOptions ScriptBatchTerminator;
    public static EnumScriptOptions NoCommandTerminator;
    public static EnumScriptOptions AppendToFile;
    public static EnumScriptOptions AnsiFile;
    public static EnumScriptOptions ToFileOnly;
    public static EnumScriptOptions DriPrimaryKey;
    public static EnumScriptOptions DriForeignKeys;
    public static EnumScriptOptions DriUniqueKeys;
    public static EnumScriptOptions DriIndexes;
    public static EnumScriptOptions DriClustered;
    public static EnumScriptOptions DriNonClustered;
    public static EnumScriptOptions DriChecks;
    public static EnumScriptOptions DriDefaults;
    public static EnumScriptOptions Triggers;
    public static EnumScriptOptions ClusteredIndexes;
    public static EnumScriptOptions NonClusteredIndexes;
    public static EnumScriptOptions FullTextCatalogs;
    public static EnumScriptOptions FullTextStopLists;
    public static EnumScriptOptions FullTextIndexes;
    public static EnumScriptOptions Statistics;
    public static EnumScriptOptions NoAssemblies;
    public static EnumScriptOptions Indexes;
    public static EnumScriptOptions DriAllKeys;
    public static EnumScriptOptions DriAllConstraints;
    public static EnumScriptOptions DriAll;
    public static EnumScriptOptions XmlIndexes;
    public static EnumScriptOptions SpatialIndexes;
    public static EnumScriptOptions ColumnStoreIndexes;
    public static EnumScriptOptions TotalFilterOptions;
    public static EnumScriptOptions NoTablePartitioningSchemes;
    public static EnumScriptOptions NoIndexPartitioningSchemes;
    public static EnumScriptOptions SchemaQualifyForeignKeysReferences;
    public static EnumScriptOptions IncludeDatabaseRoleMemberships;
    public static EnumScriptOptions SchemaQualify;
    public static EnumScriptOptions IncludeHeaders;
    public static EnumScriptOptions IncludeIfNotExists;
    public static EnumScriptOptions WithDependencies;
    public static EnumScriptOptions Bindings;
    public static EnumScriptOptions ContinueScriptingOnError;
    public static EnumScriptOptions Permissions;
    public static EnumScriptOptions AllowSystemObjects;
    public static EnumScriptOptions DriWithNoCheck;
    public static EnumScriptOptions ConvertUserDefinedDataTypesToBaseType;
    public static EnumScriptOptions TimestampToBinary;
    public static EnumScriptOptions AnsiPadding;
    public static EnumScriptOptions ExtendedProperties;
    public static EnumScriptOptions DdlHeaderOnly;
    public static EnumScriptOptions DdlBodyOnly;
    public static EnumScriptOptions NoViewColumns;
    public static EnumScriptOptions LoginSid;
    public static EnumScriptOptions IncludeDatabaseContext;
    public static EnumScriptOptions AgentAlertJob;
    public static EnumScriptOptions AgentJobId;
    public static EnumScriptOptions AgentNotify;
    public static EnumScriptOptions DriIncludeSystemNames;
    public static EnumScriptOptions OptimizerData;
    public static EnumScriptOptions NoExecuteAs;
    public static EnumScriptOptions EnforceScriptingOptions;
    public static EnumScriptOptions NoVardecimal;
    public static EnumScriptOptions ScriptSchema;
    public static EnumScriptOptions ScriptData;
    public static EnumScriptOptions IncludeFullTextCatalogRootPath;
    public static EnumScriptOptions ChangeTracking;
    public static EnumScriptOptions ScriptDataCompression;
    public static EnumScriptOptions ScriptXmlCompression;
    public static EnumScriptOptions ScriptOwner;
    public static EnumScriptOptions NoFileGroup;
    public static EnumScriptOptions NoFileStream;
    public static EnumScriptOptions NoFileStreamColumn;
    public static EnumScriptOptions NoCollation;
    public static EnumScriptOptions NoIdentities;
    public static EnumScriptOptions NoXmlNamespaces;
    public static EnumScriptOptions NoMailProfileAccounts;
    public static EnumScriptOptions NoMailProfilePrincipals;
    public static EnumScriptOptions PrimaryObject;
    public static EnumScriptOptions TotalOptions;
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.SqlServer.Management.Smo.EventHandlerList : object {
    private object syncRoot;
    private ListEntry head;
    public Delegate Item { get; public set; }
    public Delegate get_Item(object key);
    public void set_Item(object key, Delegate value);
    public void AddHandler(object key, Delegate value);
    public void RemoveHandler(object key, Delegate value);
    public object FindHandler(Delegate value);
    public sealed virtual void Dispose();
    private ListEntry Find(object key);
}
public class Microsoft.SqlServer.Management.Smo.EventProperty : object {
    private string name;
    private object value;
    public string Name { get; }
    public object Value { get; }
    internal EventProperty(string name, object value);
    public string get_Name();
    public object get_Value();
}
[DefaultMemberAttribute("Item")]
public class Microsoft.SqlServer.Management.Smo.EventPropertyCollection : object {
    private Collection collection;
    public EventProperty Item { get; }
    public EventProperty Item { get; }
    public int Count { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    internal EventPropertyCollection(PropertyDataCollection properties);
    public EventProperty get_Item(int index);
    public EventProperty get_Item(string name);
    public sealed virtual int get_Count();
    public void CopyTo(EventProperty[] array, int index);
    [CLSCompliantAttribute("False")]
public sealed virtual IEnumerator`1<EventProperty> GetEnumerator();
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private static DateTime ConvertToDateTime(string dateTime);
    internal void Add(string name, object value);
}
internal abstract class Microsoft.SqlServer.Management.Smo.EventsWorkerBase : object {
    private EventHandlerList eventHandlers;
    private Hashtable eventSubscriptions;
    private Type eventEnumType;
    private EventSetBase events;
    private bool eventsStarted;
    private ManagementScope managementScope;
    private static object defaultEventHandlerKey;
    protected SqlSmoObject Target { get; }
    internal EventsWorkerBase(SqlSmoObject target, Type eventSetType, Type eventEnumType);
    private static EventsWorkerBase();
    public EventSetBase GetEventSelection();
    public void AddDefaultEventHandler(ServerEventHandler eventHandler);
    public void RemoveDefaultEventHandler(ServerEventHandler eventHandler);
    public void SubscribeToEvents(EventSetBase addEvents, ServerEventHandler eventHandler);
    public void UnsubscribeFromEvents(EventSetBase removeEvents);
    public void StartEvents();
    public void StopEvents();
    public sealed virtual void Dispose();
    protected abstract virtual SqlSmoObject get_Target();
    protected abstract virtual EventQuery CreateWqlQuery(string eventClass);
    private object GetEventHandlerKey(ServerEventHandler eventHandler);
    protected virtual string GetEventClass(int eventID);
    protected static string ConvertToEventClass(StringBuilder eventName);
    protected static EventType ConvertFromEventClass(string eventClass);
    private void CreateSubscription(int eventID, string eventClass, object eventHandlerKey);
    private void OnEventArrived(object sender, EventArrivedEventArgs args);
    private void TryConnect();
    internal static EventQuery CreateWqlQueryForServer(string eventClass);
    internal static EventQuery CreateWqlQueryForDatabase(string eventClass, string databaseName);
    internal static EventQuery CreateWqlQueryForDatabaseObject(string eventClass, string databaseName, string objectName, string objectType);
    internal static EventQuery CreateWqlQueryForTargetObject(string eventClass, string databaseName, string schemaName, string objectType, string targetObjectName, string targetObjectType);
    internal static EventQuery CreateWqlQueryForSourceObject(string eventClass, string databaseName, string schemaName, string objectName, string objectType);
    private static string EscapeWqlParameter(string parameter);
}
public enum Microsoft.SqlServer.Management.Smo.EventType : Enum {
    public int value__;
    public static EventType AddRoleMember;
    public static EventType AddSensitivityClassification;
    public static EventType AddServerRoleMember;
    public static EventType AddSignature;
    public static EventType AddSignatureSchemaObject;
    public static EventType AlterApplicationRole;
    public static EventType AlterAssembly;
    public static EventType AlterAsymmetricKey;
    public static EventType AlterAudit;
    public static EventType AlterAuthorizationDatabase;
    public static EventType AlterAuthorizationServer;
    public static EventType AlterAvailabilityGroup;
    public static EventType AlterBrokerPriority;
    public static EventType AlterCertificate;
    public static EventType AlterColumnEncryptionKey;
    public static EventType AlterCredential;
    public static EventType AlterCryptographicProvider;
    public static EventType AlterDatabase;
    public static EventType AlterDatabaseAuditSpecification;
    public static EventType AlterDatabaseEncryptionKey;
    public static EventType AlterDatabaseScopedConfiguration;
    public static EventType AlterEndpoint;
    public static EventType AlterEventSession;
    public static EventType AlterExtendedProperty;
    public static EventType AlterExternalLanguage;
    public static EventType AlterExternalLibrary;
    public static EventType AlterExternalResourcePool;
    public static EventType AlterFulltextCatalog;
    public static EventType AlterFulltextIndex;
    public static EventType AlterFulltextStoplist;
    public static EventType AlterFunction;
    public static EventType AlterIndex;
    public static EventType AlterInstance;
    public static EventType AlterLinkedServer;
    public static EventType AlterLogin;
    public static EventType AlterMasterKey;
    public static EventType AlterMessage;
    public static EventType AlterMessageType;
    public static EventType AlterPartitionFunction;
    public static EventType AlterPartitionScheme;
    public static EventType AlterPlanGuide;
    public static EventType AlterProcedure;
    public static EventType AlterQueue;
    public static EventType AlterRemoteServer;
    public static EventType AlterRemoteServiceBinding;
    public static EventType AlterResourceGovernorConfig;
    public static EventType AlterResourcePool;
    public static EventType AlterRole;
    public static EventType AlterRoute;
    public static EventType AlterSchema;
    public static EventType AlterSearchPropertyList;
    public static EventType AlterSecurityPolicy;
    public static EventType AlterSequence;
    public static EventType AlterServerAudit;
    public static EventType AlterServerAuditSpecification;
    public static EventType AlterServerConfiguration;
    public static EventType AlterServerRole;
    public static EventType AlterService;
    public static EventType AlterServiceMasterKey;
    public static EventType AlterSymmetricKey;
    public static EventType AlterTable;
    public static EventType AlterTrigger;
    public static EventType AlterUser;
    public static EventType AlterView;
    public static EventType AlterWorkloadGroup;
    public static EventType AlterXmlSchemaCollection;
    public static EventType AssemblyLoad;
    public static EventType AuditAddloginEvent;
    public static EventType AuditAddDBUserEvent;
    public static EventType AuditAddLoginToServerRoleEvent;
    public static EventType AuditAddMemberToDBRoleEvent;
    public static EventType AuditAddRoleEvent;
    public static EventType AuditAppRoleChangePasswordEvent;
    public static EventType AuditBackupRestoreEvent;
    public static EventType AuditChangeAuditEvent;
    public static EventType AuditChangeDatabaseOwner;
    public static EventType AuditDatabaseManagementEvent;
    public static EventType AuditDatabaseObjectAccessEvent;
    public static EventType AuditDatabaseObjectGdrEvent;
    public static EventType AuditDatabaseObjectManagementEvent;
    public static EventType AuditDatabaseObjectTakeOwnershipEvent;
    public static EventType AuditDatabaseOperationEvent;
    public static EventType AuditDatabasePrincipalImpersonationEvent;
    public static EventType AuditDatabasePrincipalManagementEvent;
    public static EventType AuditDatabaseScopeGdrEvent;
    public static EventType AuditDbccEvent;
    public static EventType AuditFulltext;
    public static EventType AuditLogin;
    public static EventType AuditLoginChangePasswordEvent;
    public static EventType AuditLoginChangePropertyEvent;
    public static EventType AuditLoginFailed;
    public static EventType AuditLoginGdrEvent;
    public static EventType AuditLogout;
    public static EventType AuditSchemaObjectAccessEvent;
    public static EventType AuditSchemaObjectGdrEvent;
    public static EventType AuditSchemaObjectManagementEvent;
    public static EventType AuditSchemaObjectTakeOwnershipEvent;
    public static EventType AuditServerAlterTraceEvent;
    public static EventType AuditServerObjectGdrEvent;
    public static EventType AuditServerObjectManagementEvent;
    public static EventType AuditServerObjectTakeOwnershipEvent;
    public static EventType AuditServerOperationEvent;
    public static EventType AuditServerPrincipalImpersonationEvent;
    public static EventType AuditServerPrincipalManagementEvent;
    public static EventType AuditServerScopeGdrEvent;
    public static EventType BindDefault;
    public static EventType BindRule;
    public static EventType BitmapWarning;
    public static EventType BlockedProcessReport;
    public static EventType BrokerQueueDisabled;
    public static EventType CpuThresholdExceeded;
    public static EventType CreateApplicationRole;
    public static EventType CreateAssembly;
    public static EventType CreateAsymmetricKey;
    public static EventType CreateAudit;
    public static EventType CreateAvailabilityGroup;
    public static EventType CreateBrokerPriority;
    public static EventType CreateCertificate;
    public static EventType CreateColumnEncryptionKey;
    public static EventType CreateColumnMasterKey;
    public static EventType CreateContract;
    public static EventType CreateCredential;
    public static EventType CreateCryptographicProvider;
    public static EventType CreateDatabase;
    public static EventType CreateDatabaseAuditSpecification;
    public static EventType CreateDatabaseEncryptionKey;
    public static EventType CreateDefault;
    public static EventType CreateEndpoint;
    public static EventType CreateEventNotification;
    public static EventType CreateEventSession;
    public static EventType CreateExtendedProcedure;
    public static EventType CreateExtendedProperty;
    public static EventType CreateExternalLanguage;
    public static EventType CreateExternalLibrary;
    public static EventType CreateExternalResourcePool;
    public static EventType CreateFulltextCatalog;
    public static EventType CreateFulltextIndex;
    public static EventType CreateFulltextStoplist;
    public static EventType CreateFunction;
    public static EventType CreateIndex;
    public static EventType CreateLinkedServer;
    public static EventType CreateLinkedServerLogin;
    public static EventType CreateLogin;
    public static EventType CreateMasterKey;
    public static EventType CreateMessage;
    public static EventType CreateMessageType;
    public static EventType CreatePartitionFunction;
    public static EventType CreatePartitionScheme;
    public static EventType CreatePlanGuide;
    public static EventType CreateProcedure;
    public static EventType CreateQueue;
    public static EventType CreateRemoteServer;
    public static EventType CreateRemoteServiceBinding;
    public static EventType CreateResourcePool;
    public static EventType CreateRole;
    public static EventType CreateRoute;
    public static EventType CreateRule;
    public static EventType CreateSchema;
    public static EventType CreateSearchPropertyList;
    public static EventType CreateSecurityPolicy;
    public static EventType CreateSequence;
    public static EventType CreateServerAudit;
    public static EventType CreateServerAuditSpecification;
    public static EventType CreateServerRole;
    public static EventType CreateService;
    public static EventType CreateSpatialIndex;
    public static EventType CreateStatistics;
    public static EventType CreateSymmetricKey;
    public static EventType CreateSynonym;
    public static EventType CreateTable;
    public static EventType CreateTrigger;
    public static EventType CreateType;
    public static EventType CreateUser;
    public static EventType CreateView;
    public static EventType CreateWorkloadGroup;
    public static EventType CreateXmlIndex;
    public static EventType CreateXmlSchemaCollection;
    public static EventType DatabaseMirroringStateChange;
    public static EventType DatabaseSuspectDataPage;
    public static EventType DataFileAutoGrow;
    public static EventType DataFileAutoShrink;
    public static EventType DeadlockGraph;
    public static EventType DenyDatabase;
    public static EventType DenyServer;
    public static EventType DeprecationAnnouncement;
    public static EventType DeprecationFinalSupport;
    public static EventType DropApplicationRole;
    public static EventType DropAssembly;
    public static EventType DropAsymmetricKey;
    public static EventType DropAudit;
    public static EventType DropAvailabilityGroup;
    public static EventType DropBrokerPriority;
    public static EventType DropCertificate;
    public static EventType DropColumnEncryptionKey;
    public static EventType DropColumnMasterKey;
    public static EventType DropContract;
    public static EventType DropCredential;
    public static EventType DropCryptographicProvider;
    public static EventType DropDatabase;
    public static EventType DropDatabaseAuditSpecification;
    public static EventType DropDatabaseEncryptionKey;
    public static EventType DropDefault;
    public static EventType DropEndpoint;
    public static EventType DropEventNotification;
    public static EventType DropEventSession;
    public static EventType DropExtendedProcedure;
    public static EventType DropExtendedProperty;
    public static EventType DropExternalLanguage;
    public static EventType DropExternalLibrary;
    public static EventType DropExternalResourcePool;
    public static EventType DropFulltextCatalog;
    public static EventType DropFulltextIndex;
    public static EventType DropFulltextStoplist;
    public static EventType DropFunction;
    public static EventType DropIndex;
    public static EventType DropLinkedServer;
    public static EventType DropLinkedServerLogin;
    public static EventType DropLogin;
    public static EventType DropMasterKey;
    public static EventType DropMessage;
    public static EventType DropMessageType;
    public static EventType DropPartitionFunction;
    public static EventType DropPartitionScheme;
    public static EventType DropPlanGuide;
    public static EventType DropProcedure;
    public static EventType DropQueue;
    public static EventType DropRemoteServer;
    public static EventType DropRemoteServiceBinding;
    public static EventType DropResourcePool;
    public static EventType DropRole;
    public static EventType DropRoleMember;
    public static EventType DropRoute;
    public static EventType DropRule;
    public static EventType DropSchema;
    public static EventType DropSearchPropertyList;
    public static EventType DropSecurityPolicy;
    public static EventType DropSensitivityClassification;
    public static EventType DropSequence;
    public static EventType DropServerAudit;
    public static EventType DropServerAuditSpecification;
    public static EventType DropServerRole;
    public static EventType DropServerRoleMember;
    public static EventType DropService;
    public static EventType DropSignature;
    public static EventType DropSignatureSchemaObject;
    public static EventType DropStatistics;
    public static EventType DropSymmetricKey;
    public static EventType DropSynonym;
    public static EventType DropTable;
    public static EventType DropTrigger;
    public static EventType DropType;
    public static EventType DropUser;
    public static EventType DropView;
    public static EventType DropWorkloadGroup;
    public static EventType DropXmlSchemaCollection;
    public static EventType Errorlog;
    public static EventType Eventlog;
    public static EventType Exception;
    public static EventType ExchangeSpillEvent;
    public static EventType ExecutionWarnings;
    public static EventType FtCrawlAborted;
    public static EventType FtCrawlStarted;
    public static EventType FtCrawlStopped;
    public static EventType GrantDatabase;
    public static EventType GrantServer;
    public static EventType HashWarning;
    public static EventType LockDeadlock;
    public static EventType LockDeadlockChain;
    public static EventType LockEscalation;
    public static EventType LogFileAutoGrow;
    public static EventType LogFileAutoShrink;
    public static EventType MissingColumnStatistics;
    public static EventType MissingJoinPredicate;
    public static EventType MountTape;
    public static EventType ObjectAltered;
    public static EventType ObjectCreated;
    public static EventType ObjectDeleted;
    public static EventType OledbCallEvent;
    public static EventType OledbDatareadEvent;
    public static EventType OledbErrors;
    public static EventType OledbProviderInformation;
    public static EventType OledbQueryinterfaceEvent;
    public static EventType Qn_dynamics;
    public static EventType Qn_parameterTable;
    public static EventType Qn_subscription;
    public static EventType Qn_template;
    public static EventType QueueActivation;
    public static EventType Rename;
    public static EventType RevokeDatabase;
    public static EventType RevokeServer;
    public static EventType ServerMemoryChange;
    public static EventType ShowplanAllForQueryCompile;
    public static EventType ShowplanXml;
    public static EventType ShowplanXmlForQueryCompile;
    public static EventType ShowplanXmlStatisticsProfile;
    public static EventType SortWarnings;
    public static EventType SpCacheinsert;
    public static EventType SpCachemiss;
    public static EventType SpCacheremove;
    public static EventType SpRecompile;
    public static EventType SqlStmtrecompile;
    public static EventType TraceFileClose;
    public static EventType UnbindDefault;
    public static EventType UnbindRule;
    public static EventType UpdateStatistics;
    public static EventType Userconfigurable0;
    public static EventType Userconfigurable1;
    public static EventType Userconfigurable2;
    public static EventType Userconfigurable3;
    public static EventType Userconfigurable4;
    public static EventType Userconfigurable5;
    public static EventType Userconfigurable6;
    public static EventType Userconfigurable7;
    public static EventType Userconfigurable8;
    public static EventType Userconfigurable9;
    public static EventType UserErrorMessage;
    public static EventType XqueryStaticType;
}
internal class Microsoft.SqlServer.Management.Smo.ExceptionTemplates : ExceptionTemplatesImpl {
    public static string IncludeHeader(string objectType, string name, string dateString);
}
[CompilerGeneratedAttribute]
internal class Microsoft.SqlServer.Management.Smo.ExceptionTemplatesImpl : object {
    public static CultureInfo Culture { get; public set; }
    public static string InvalidPasswordHash { get; }
    public static string LoginPropertyNotSet { get; }
    public static string LoginEnable { get; }
    public static string LoginDisable { get; }
    public static string AddCredential { get; }
    public static string DropCredential { get; }
    public static string EnterServerRoleName { get; }
    public static string ServerRoleOwnerNameEmpty { get; }
    public static string CreateAlterNotSupported { get; }
    public static string EnterSequenceName { get; }
    public static string EnterMinValue { get; }
    public static string EnterMaxValue { get; }
    public static string EnterIncrementValue { get; }
    public static string EnterStartValue { get; }
    public static string UpgradeDll { get; }
    public static string ProviderEnable { get; }
    public static string ProviderDisable { get; }
    public static string SourceTypeShouldBeProvider { get; }
    public static string CyclicalForeignKeys { get; }
    public static string NullParameterTable { get; }
    public static string NullParameterScriptingOptions { get; }
    public static string CannotEnableViewTrigger { get; }
    public static string ReplicationOptionNotSupportedForCloud { get; }
    public static string NoSparseOnColumnSet { get; }
    public static string NoSparseOnComputed { get; }
    public static string NoColumnSetOnComputed { get; }
    public static string NoGeneratedAlwaysColumnsOnNonTables { get; }
    public static string NoSparseOrColumnSetOnTemporalColumns { get; }
    public static string ComputedTemporalColumns { get; }
    public static string IdentityTemporalColumns { get; }
    public static string NullableTemporalColumns { get; }
    public static string InvalidAlwaysEncryptedPropertyValues { get; }
    public static string NoMemoryOptimizedTemporalTables { get; }
    public static string SystemVersionedTableWithoutPeriod { get; }
    public static string HistoryTableWithoutSystemVersioning { get; }
    public static string NoTemporalFileTables { get; }
    public static string NoAddingPeriodOnDroppedTable { get; }
    public static string CannotHaveMultiplePeriods { get; }
    public static string NoDroppingPeriodOnDroppedTable { get; }
    public static string NoDroppingPeriodOnNotYetCreatedTable { get; }
    public static string CannotDropNonExistingPeriod { get; }
    public static string MustProvideExistingColumn { get; }
    public static string PeriodMustHaveDifferentColumns { get; }
    public static string PeriodStartColumnMustBeGeneratedAlways { get; }
    public static string PeriodEndColumnMustBeGeneratedAlways { get; }
    public static string PeriodInvalidDataType { get; }
    public static string InvalidPeriodColumnName { get; }
    public static string BothHistoryTableNameAndSchemaMustBeProvided { get; }
    public static string NoHiddenColumnsOnNonGeneratedAlwaysColumns { get; }
    public static string InvalidHistoryRetentionPeriodSpecification { get; }
    public static string InvalidHistoryRetentionPeriodUnitSpecification { get; }
    public static string LedgerTypeMustBeProvided { get; }
    public static string BothLedgerViewNameAndSchemaMustBeProvided { get; }
    public static string CannotProvideLedgerViewColumnNamesWithoutLedgerViewNameAndSchema { get; }
    public static string NoDataMaskingOnNonTables { get; }
    public static string NoDataMaskingOnColumnSet { get; }
    public static string NoDataMaskingOnTemporalColumns { get; }
    public static string NoDataMaskingOnComputedColumns { get; }
    public static string NoDataMaskingOnFileStreamColumns { get; }
    public static string NoDataMaskingOnEncryptedColumns { get; }
    public static string NoDataClassificationOnNonTables { get; }
    public static string NoDataClassificationOnComputedColumns { get; }
    public static string MissingBackupDevices { get; }
    public static string MissingBackupDeviceType { get; }
    public static string PipeDeviceNotSupported { get; }
    public static string BackupEncryptionNotSupported { get; }
    public static string UnknownShrinkType { get; }
    public static string CannotChangePrimary { get; }
    public static string OnlyOnePrimaryFile { get; }
    public static string MustSpecifyGrowth { get; }
    public static string WrongPercentageGrowth { get; }
    public static string WrongSize { get; }
    public static string InvalidSizeFileStream { get; }
    public static string InvalidMaxSizeFileStream { get; }
    public static string InvalidGrowthFileStream { get; }
    public static string PrimaryAlreadyDefault { get; }
    public static string ColumnNotVarbinaryMax { get; }
    public static string NotClusteredIndex { get; }
    public static string NotNonClusteredIndex { get; }
    public static string UnsupportedFileGroupType { get; }
    public static string VarDecimalAndDataCompressionConflict { get; }
    public static string RebuildHeapOnClusteredIndexError { get; }
    public static string TooFewFiles { get; }
    public static string UnknownChild { get; }
    public static string InvalidGranteeList { get; }
    public static string DatabaseAlreadyExists { get; }
    public static string ReasonTextIsEncrypted { get; }
    public static string ReasonPropertyIsNotSupportedOnCurrentServerVersion { get; }
    public static string SearchPropertyIntIDNotValid { get; }
    public static string SearchPropertySetGuidNotValid { get; }
    public static string SearchPropertyGuidIntIdNotValid { get; }
    public static string NullOrEmptyParameterSourceDatabaseName { get; }
    public static string NullOrEmptyParameterSourceSearchPropertyListName { get; }
    public static string EmptySourceSearchPropertyListName { get; }
    public static string SearchPropertyListNameAllWhiteSpaces { get; }
    public static string EmptyRestorePlan { get; }
    public static string MultipleDatabaseSelectedToRestore { get; }
    public static string ConflictWithNoRecovery { get; }
    public static string BackupsOfDifferentDb { get; }
    public static string FullBackupShouldBeFirst { get; }
    public static string BackupsNotInSequence { get; }
    public static string NoFullBackupSelected { get; }
    public static string WrongDiffbackup { get; }
    public static string DiffBackupNotCompatible { get; }
    public static string WrongTLogbackup { get; }
    public static string TailLogBackupDeviceNull { get; }
    public static string OnlyLastRestoreWithNoRecovery { get; }
    public static string UnsupportedServerVersion { get; }
    public static string BackupMediaSetEmpty { get; }
    public static string GetMediaSetGuid { get; }
    public static string MediaNotPartOfSet { get; }
    public static string FileGroupNotSupported { get; }
    public static string InvalidDatabaseState { get; }
    public static string PageRestoreOnlyForFullRecovery { get; }
    public static string CloseConnectionsFailed { get; }
    public static string BackupTailLog { get; }
    public static string TailLog { get; }
    public static string UnableToCreateRestoreSequence { get; }
    public static string UnableToCreatePageRestoreSequence { get; }
    public static string UnableToCreatePlanTakeTLogBackup { get; }
    public static string OperationCancelledByUser { get; }
    public static string InvalidSuspectpage { get; }
    public static string SqlInnerException { get; }
    public static string InnerException { get; }
    public static string InnerWmiException { get; }
    public static string UnknownError { get; }
    public static string UnableToRetrieveBackupHistory { get; }
    public static string OneFilePageSupported { get; }
    public static string ScriptDataNotSupportedByThisMethod { get; }
    public static string ForeignKeyCycleInObjects { get; }
    public static string NotSupportedOnStandalone { get; }
    public static string NotSupportedOnCloud { get; }
    public static string InvalidScriptingOptions { get; }
    public static string CreateOrAlterNotSupportedVersion { get; }
    public static string SupportedOnlyBelow110 { get; }
    public static string SupportedOnlyBelow100 { get; }
    public static string SupportedOnlyBelow90 { get; }
    public static string SupportedOnlyOn150 { get; }
    public static string SupportedOnlyOn160 { get; }
    public static string SupportedOnlyOn140 { get; }
    public static string SupportedOnlyOn130 { get; }
    public static string SupportedOnlyOn120 { get; }
    public static string SupportedOnlyOn110 { get; }
    public static string SupportedOnlyOn105 { get; }
    public static string SupportedOnlyOn100 { get; }
    public static string SupportedOnlyOn90 { get; }
    public static string SupportedOnlyOn80SP3 { get; }
    public static string SupportedOnlyOn80 { get; }
    public static string NotSupportedForVersionEarlierThan110 { get; }
    public static string NotSupportedForVersionEarlierThan120 { get; }
    public static string NotSupportedForVersionEarlierThan130 { get; }
    public static string NotSupportedForVersionEarlierThan140 { get; }
    public static string NotSupportedForVersionEarlierThan150 { get; }
    public static string MustSpecifyOneParameter { get; }
    public static string NeedPSParams { get; }
    public static string ViewCannotHaveKeys { get; }
    public static string InvalidAcctName { get; }
    public static string OperationOnlyInPendingState { get; }
    public static string OperationNotInPendingState { get; }
    public static string RemoteServerEndpointRequired { get; }
    public static string DatabaseScopedCredentialsRequired { get; }
    public static string MissingBoundingParameters { get; }
    public static string InvalidNonGeometryParameters { get; }
    public static string UnsupportedNonSpatialParameters { get; }
    public static string NotSpatialIndexOnView { get; }
    public static string OneColumnInSpatialIndex { get; }
    public static string NoSpatialIndexUnique { get; }
    public static string NoSpatialIndexClustered { get; }
    public static string LowPriorityCannotBeSetForDrop { get; }
    public static string OnlyHashIndexIsSupportedInAlter { get; }
    public static string NotXmlIndexOnView { get; }
    public static string OneColumnInXmlIndex { get; }
    public static string BucketCountForHashIndex { get; }
    public static string ScriptMemoryOptimizedIndex { get; }
    public static string HashIndexTableDependency { get; }
    public static string TableMemoryOptimizedIndexDependency { get; }
    public static string TableSqlDwIndexRestrictions { get; }
    public static string NoXmlIndexUnique { get; }
    public static string NoXmlIndexClustered { get; }
    public static string UnsupportedNonXmlParameters { get; }
    public static string CantSetDefaultFalse { get; }
    public static string TimeoutMustBePositive { get; }
    public static string ChangeTrackingException { get; }
    public static string MissingChangeTrackingParameters { get; }
    public static string TrackColumnsException { get; }
    public static string ViewColumnsCannotBeModified { get; }
    public static string SystemMessageReadOnly { get; }
    public static string CantSetContainedDatabaseCatalogCollation { get; }
    public static string ViewFragInfoNotInV7 { get; }
    public static string DtsNotInstalled { get; }
    public static string NSNotInstalled { get; }
    public static string InvalidNSOperation { get; }
    public static string NSNotConnectedToServer { get; }
    public static string InvalidThreadPoolSize { get; }
    public static string InvalidQuantumLimit { get; }
    public static string InvalidQuantumDuration { get; }
    public static string InvalidThrottle { get; }
    public static string InvalidFailuresBeforeLoggingEvent { get; }
    public static string InvalidFailuresBeforeAbort { get; }
    public static string InvalidMulticastRecipientLimit { get; }
    public static string InvalidNotificationClassBatchSize { get; }
    public static string StartTimeGreaterThanADay { get; }
    public static string NoPermissions { get; }
    public static string PrimaryFgMustHaveFiles { get; }
    public static string NeedToSetParent { get; }
    public static string ErrorInCreatingState { get; }
    public static string BackupFailed { get; }
    public static string RestoreFailed { get; }
    public static string SetPasswordError { get; }
    public static string PassPhraseAndIdentityNotSpecified { get; }
    public static string PassPhraseNotSpecified { get; }
    public static string NotEnoughRights { get; }
    public static string SqlDwCreateRequiredParameterMissing { get; }
    public static string CannotAlterKeyWithProvider { get; }
    public static string AlterQueryStorePropertyForRestoringDatabase { get; }
    public static string NoUrnSuffix { get; }
    public static string GetParentFailed { get; }
    public static string ParentNull { get; }
    public static string InvalidFileInformationData { get; }
    public static string ExecutionContextPrincipalIsNotSpecified { get; }
    public static string MissingBrokerEndpoint { get; }
    public static string CannotEnableSoapEndpoints { get; }
    public static string ServiceError0 { get; }
    public static string ServiceError1 { get; }
    public static string ServiceError2 { get; }
    public static string ServiceError3 { get; }
    public static string ServiceError4 { get; }
    public static string ServiceError5 { get; }
    public static string ServiceError6 { get; }
    public static string ServiceError7 { get; }
    public static string ServiceError8 { get; }
    public static string ServiceError9 { get; }
    public static string ServiceError10 { get; }
    public static string ServiceError11 { get; }
    public static string ServiceError12 { get; }
    public static string ServiceError13 { get; }
    public static string ServiceError14 { get; }
    public static string ServiceError15 { get; }
    public static string ServiceError16 { get; }
    public static string ServiceError17 { get; }
    public static string ServiceError18 { get; }
    public static string ServiceError19 { get; }
    public static string ServiceError20 { get; }
    public static string ServiceError21 { get; }
    public static string ServiceError22 { get; }
    public static string ServiceError23 { get; }
    public static string ServiceError24 { get; }
    public static string UnsupportedFeatureSqlAgent { get; }
    public static string UnsupportedFeatureSqlMail { get; }
    public static string UnsupportedFeatureServiceBroker { get; }
    public static string UnsupportedFeatureFullText { get; }
    public static string UnsupportedFeatureResourceGovernor { get; }
    public static string UnsupportedFeatureSmartAdmin { get; }
    public static string CannotSubscribe { get; }
    public static string CannotStartSubscription { get; }
    public static string InnerRegSvrException { get; }
    public static string SqlServerTypeName { get; }
    public static string ColumnsMustBeSpecified { get; }
    public static string PasswdModiOnlyForStandardLogin { get; }
    public static string DenyLoginModiNotForStandardLogin { get; }
    public static string CloudSidNotApplicableOnStandalone { get; }
    public static string CannotCreateExtendedPropertyWithoutSchema { get; }
    public static string InvalidSchema { get; }
    public static string FailedToChangeSchema { get; }
    public static string InvalidUrnServerLevel { get; }
    public static string ServerLevelMustBePresent { get; }
    public static string OperationInProgress { get; }
    public static string PasswordError { get; }
    public static string MediaPasswordError { get; }
    public static string CannotChangePassword { get; }
    public static string CannotChangePasswordForUser { get; }
    public static string PasswordOnlyForDatabaseAuthenticatedNonWindowsUser { get; }
    public static string DefaultLanguageOnlyForDatabaseAuthenticatedUser { get; }
    public static string CannotCopyPasswordToUser { get; }
    public static string FollowingPropertiesCanBeSetOnlyWithContainmentEnabled { get; }
    public static string OperationNotSupportedWhenPartOfAUDF { get; }
    public static string ReasonIntextMode { get; }
    public static string ReasonNotIntextMode { get; }
    public static string CollectionCannotBeModified { get; }
    public static string KeyOptionsIncorrect { get; }
    public static string TableOrViewParentForUpdateStatistics { get; }
    public static string PropertyAvailable { get; }
    public static string ServerPropertyMustBeSetForOlap { get; }
    public static string InvalidInstanceName { get; }
    public static string TransferCtorErr { get; }
    public static string UnsupportedVersionException { get; }
    public static string UnsupportedEngineTypeException { get; }
    public static string UnsupportedEngineEditionException { get; }
    public static string TargetRecoveryTimeNotNegative { get; }
    public static string InvalidEdgeConstraintParent { get; }
    public static string EmptyConstraintName { get; }
    public static string InvalidEdgeConstraintDefinition { get; }
    public static string ObjectIdCannotBeSet { get; }
    public static string CannotEnableUDTTTrigger { get; }
    public static string NotIndexOnUDTT { get; }
    public static string NotXmlIndexOnUDTT { get; }
    public static string NotFullTextIndexOnUDTT { get; }
    public static string UDTTColumnsCannotBeModified { get; }
    public static string UDTTCannotBeModified { get; }
    public static string UDTTIndexCannotBeModified { get; }
    public static string NotFragInfoOnUDTT { get; }
    public static string NotStatisticsOnUDTT { get; }
    public static string NotTriggersOnUDTT { get; }
    public static string NotCheckIndexOnUDTT { get; }
    public static string UDTTChecksCannotBeModified { get; }
    public static string OperationNotSupportedWhenPartOfUDTT { get; }
    public static string AddAuditSpecificationDetail { get; }
    public static string RemoveAuditSpecificationDetail { get; }
    public static string EnterAuditName { get; }
    public static string EnterOwner { get; }
    public static string EnterFilePath { get; }
    public static string EnterName { get; }
    public static string EnterServerAudit { get; }
    public static string EnterStoragePath { get; }
    public static string ReserveDiskSpaceNotAllowedWhenMaxFileSizeIsUnlimited { get; }
    public static string EnterServerCertificate { get; }
    public static string EnterServerAsymmetricKey { get; }
    public static string CertificateNotBackedUp { get; }
    public static string FailedOperationMessageNotSupportedTempdb { get; }
    public static string InvalidOperationInDisconnectedMode { get; }
    public static string ReadOnlyRoutingListContainsEmptyReplicaName { get; }
    public static string CannotUpdateBothReadOnlyRoutingLists { get; }
    public static string DistributedAvailabilityGroupTwoReplicasRequired { get; }
    public static string DistributedAvailabilityGroupNoReplicatedDatabases { get; }
    public static string DistributedAvailabilityGroupFailoverMode { get; }
    public static string DistributedAvailabilityGroupAvailabilityMode { get; }
    public static string DistributedAvailabilityGroupNoOptions { get; }
    public static string SetAccount { get; }
    public static string Create { get; }
    public static string Alter { get; }
    public static string CreateOrAlter { get; }
    public static string Drop { get; }
    public static string Rename { get; }
    public static string Script { get; }
    public static string Grant { get; }
    public static string Revoke { get; }
    public static string Deny { get; }
    public static string GrantWithGrant { get; }
    public static string Bind { get; }
    public static string Unbind { get; }
    public static string AddDefaultConstraint { get; }
    public static string TestMailProfile { get; }
    public static string TestNetSend { get; }
    public static string SetState { get; }
    public static string DropAndMove { get; }
    public static string GetSmoObject { get; }
    public static string AdvancedProperties { get; }
    public static string AddCollection { get; }
    public static string RemoveCollection { get; }
    public static string This { get; }
    public static string Abort { get; }
    public static string AddMember { get; }
    public static string DropMember { get; }
    public static string EnumMembers { get; }
    public static string EnumPermissions { get; }
    public static string EnumContainingRoles { get; }
    public static string EnumAgentProxyAccounts { get; }
    public static string AddMemberServer { get; }
    public static string EnumMemberServers { get; }
    public static string RemoveMemberServer { get; }
    public static string ResetOccurrenceCount { get; }
    public static string AddNotification { get; }
    public static string RemoveNotification { get; }
    public static string UpdateNotification { get; }
    public static string EnumNotifications { get; }
    public static string ApplyToTargetServer { get; }
    public static string ApplyToTargetServerGroup { get; }
    public static string EnumAlerts { get; }
    public static string EnumHistory { get; }
    public static string EnumJobStepOutputLogs { get; }
    public static string EnumTargetServers { get; }
    public static string EnumJobSteps { get; }
    public static string Invoke { get; }
    public static string PurgeHistory { get; }
    public static string AddSharedSchedule { get; }
    public static string RemoveSharedSchedule { get; }
    public static string RemoveAllJobSchedules { get; }
    public static string RemoveAllJobSteps { get; }
    public static string RemoveFromTargetServer { get; }
    public static string RemoveFromTargetServerGroup { get; }
    public static string Start { get; }
    public static string Stop { get; }
    public static string SetPassword { get; }
    public static string ChangePassword { get; }
    public static string MakeContained { get; }
    public static string EnumDatabaseMappings { get; }
    public static string GetDatabaseUser { get; }
    public static string AddToRole { get; }
    public static string AttachDatabase { get; }
    public static string DetachDatabase { get; }
    public static string EnumCollations { get; }
    public static string EnumPerformanceCounters { get; }
    public static string EnumErrorLogs { get; }
    public static string EnumDatabaseMirrorWitnessRoles { get; }
    public static string ReadErrorLog { get; }
    public static string KillDatabase { get; }
    public static string KillProcess { get; }
    public static string GetActiveDBConnectionCount { get; }
    public static string DropAllActiveDBConnections { get; }
    public static string EnumDirectories { get; }
    public static string EnumLocks { get; }
    public static string AddPrivateKey { get; }
    public static string ExportCertificate { get; }
    public static string ChangePrivateKeyPassword { get; }
    public static string RemovePrivateKey { get; }
    public static string AddKeyEncryption { get; }
    public static string DropKeyEncryption { get; }
    public static string SymmetricKeyOpen { get; }
    public static string SymmetricKeyClose { get; }
    public static string EnumLogins { get; }
    public static string EnumWindowsDomainGroups { get; }
    public static string EnumProcesses { get; }
    public static string EnumStartupProcedures { get; }
    public static string EnumWindowsUserInfo { get; }
    public static string EnumWindowsGroupInfo { get; }
    public static string EnumAvailableMedia { get; }
    public static string EnumServerAttributes { get; }
    public static string DeleteBackupHistory { get; }
    public static string Refresh { get; }
    public static string EnumBoundColumns { get; }
    public static string EnumBoundDataTypes { get; }
    public static string CheckAllocations { get; }
    public static string CheckCatalog { get; }
    public static string CheckIdentityValues { get; }
    public static string CheckTables { get; }
    public static string CheckTable { get; }
    public static string Shrink { get; }
    public static string RecalculateSpaceUsage { get; }
    public static string PrefetchObjects { get; }
    public static string EnumTransactions { get; }
    public static string GetTransactionCount { get; }
    public static string ImportXmlSchema { get; }
    public static string ExtendXmlSchema { get; }
    public static string RemoveFullTextCatalogs { get; }
    public static string SetDefaultFullTextCatalog { get; }
    public static string SetDefaultFileGroup { get; }
    public static string SetDefaultFileStreamFileGroup { get; }
    public static string CheckFileGroup { get; }
    public static string CheckIndex { get; }
    public static string Checkpoint { get; }
    public static string Cleanup { get; }
    public static string CannotReadProp { get; }
    public static string UpdateLanguageResources { get; }
    public static string CatalogUpgradeOptions { get; }
    public static string EnumLanguages { get; }
    public static string EnumSemanticLanguages { get; }
    public static string ClearHostLoginAccount { get; }
    public static string SetProxyAccount { get; }
    public static string ClearProxyAccount { get; }
    public static string SetMsxAccount { get; }
    public static string ClearMsxAccount { get; }
    public static string CycleErrorLog { get; }
    public static string EnumJobHistory { get; }
    public static string EnumJobs { get; }
    public static string MoreThanOneProxyAccountIsNotSupported { get; }
    public static string AddSubSystems { get; }
    public static string DeleteJobStepLogs { get; }
    public static string RemoveSubSystems { get; }
    public static string EnumSubSystems { get; }
    public static string AddMailAccountToProfile { get; }
    public static string RemoveMailAccountFromProfile { get; }
    public static string EnumMailAccountsForProfile { get; }
    public static string AddPrincipalToMailProfile { get; }
    public static string RemovePrincipalFromMailProfile { get; }
    public static string EnumPrincipalsForMailProfile { get; }
    public static string AddLoginToProxyAccount { get; }
    public static string RemoveLoginFromProxyAccount { get; }
    public static string EnumLoginsOfProxyAccount { get; }
    public static string AddServerRoleToProxyAccount { get; }
    public static string RemoveServerRoleFromProxyAccount { get; }
    public static string EnumServerRolesOfProxyAccount { get; }
    public static string AddMSDBRoleToProxyAccount { get; }
    public static string RemoveMSDBRoleFromProxyAccount { get; }
    public static string EnumMSDBRolesOfProxyAccount { get; }
    public static string MsxDefect { get; }
    public static string MsxEnlist { get; }
    public static string PurgeJobHistory { get; }
    public static string ReassignJobsByLogin { get; }
    public static string CreateRestorePlan { get; }
    public static string DropJobsByLogin { get; }
    public static string StartMonitor { get; }
    public static string StopMonitor { get; }
    public static string EnumProxies { get; }
    public static string DropJobsByServer { get; }
    public static string CompareUrn { get; }
    public static string Disable { get; }
    public static string DisableAllIndexes { get; }
    public static string EnableAllIndexes { get; }
    public static string DiscoverDependencies { get; }
    public static string DropBackupHistory { get; }
    public static string ChangeMirroringState { get; }
    public static string IsMember { get; }
    public static string Recreate { get; }
    public static string Enable { get; }
    public static string EnumColumns { get; }
    public static string EnumForeignKeys { get; }
    public static string EnumIndexes { get; }
    public static string EnumFragmentation { get; }
    public static string EnumReferences { get; }
    public static string SetOffline { get; }
    public static string SetEncryption { get; }
    public static string SetOwner { get; }
    public static string StartPopulation { get; }
    public static string StopPopulation { get; }
    public static string Rebuild { get; }
    public static string Reorganize { get; }
    public static string UpdateStatistics { get; }
    public static string SetHostLoginAccount { get; }
    public static string SetMailServerAccount { get; }
    public static string SetMailServerPassword { get; }
    public static string EnumLastStatisticsUpdates { get; }
    public static string RebuildIndexes { get; }
    public static string ResumeIndexes { get; }
    public static string AbortIndexes { get; }
    public static string PauseIndexes { get; }
    public static string ReCompileReferences { get; }
    public static string TruncateData { get; }
    public static string TruncateLog { get; }
    public static string TruncatePartitionsNotSupported { get; }
    public static string SwitchPartition { get; }
    public static string MergeHashPartition { get; }
    public static string MergeRangePartition { get; }
    public static string SplitHashPartition { get; }
    public static string SplitRangePartition { get; }
    public static string GetRangeValues { get; }
    public static string ResetNextUsed { get; }
    public static string GetFileGroups { get; }
    public static string GetDefaultInitFields { get; }
    public static string SetDefaultInitFields { get; }
    public static string GetPropertyNames { get; }
    public static string SetParent { get; }
    public static string InitObject { get; }
    public static string SetName { get; }
    public static string SetNamespace { get; }
    public static string SetSchema { get; }
    public static string ExecuteNonQuery { get; }
    public static string SetSnapshotIsolation { get; }
    public static string AlterDatabaseScopedConfiguration { get; }
    public static string EnumNamespaces { get; }
    public static string EnumTypes { get; }
    public static string AddSchemaDocument { get; }
    public static string ScriptTransfer { get; }
    public static string SetIdentityPhrase { get; }
    public static string SetEncryptionOptions { get; }
    public static string EnumStatistics { get; }
    public static string GetJobByID { get; }
    public static string RemoveJobByID { get; }
    public static string RemoveJobsByLogin { get; }
    public static string EnumCandidateKeys { get; }
    public static string ExecuteWithResults { get; }
    public static string UpdateIndexStatistics { get; }
    public static string EnumMatchingSPs { get; }
    public static string EnumObjects { get; }
    public static string ReadBackupHeader { get; }
    public static string ReadMediaHeader { get; }
    public static string DetachedDatabaseInfo { get; }
    public static string IsDetachedPrimaryFile { get; }
    public static string IsWindowsGroupMember { get; }
    public static string EnumDetachedDatabaseFiles { get; }
    public static string EnumDetachedLogFiles { get; }
    public static string ServerEnumMembers { get; }
    public static string Contains { get; }
    public static string PingSqlServerVersion { get; }
    public static string SetServiceAccount { get; }
    public static string ChangeServicePassword { get; }
    public static string RecoverMasterKey { get; }
    public static string RegenerateMasterKey { get; }
    public static string ImportMasterKey { get; }
    public static string ExportMasterKey { get; }
    public static string ChangeAcctMasterKey { get; }
    public static string AddEncryptionMasterKey { get; }
    public static string DropEncryptionMasterKey { get; }
    public static string Close { get; }
    public static string Open { get; }
    public static string EnumKeyEncryptions { get; }
    public static string Compare { get; }
    public static string Insert { get; }
    public static string AddRange { get; }
    public static string SetRange { get; }
    public static string AddDevice { get; }
    public static string SetMirrors { get; }
    public static string SetDatabase { get; }
    public static string SqlManagement { get; }
    public static string EnumEncryptionAlgorithms { get; }
    public static string EnumProviderKeys { get; }
    public static string SetIpAddress { get; }
    public static string SetSubnetIp { get; }
    public static string SetSubnetMask { get; }
    public static string GetDHCPAddress { get; }
    public static string GetQueryStoreOptions { get; }
    public static string SetQueryStoreOptions { get; }
    public static string InvalidQueryStoreOptions { get; }
    public static string ReauthorizeRemoteDataArchive { get; }
    public static string GetRemoteDataArchiveMigrationStatusReports { get; }
    public static string GetRemoteDatabaseMigrationStatistics { get; }
    public static string GetRemoteTableMigrationStatistics { get; }
    public static string Table { get; }
    public static string FileTable { get; }
    public static string View { get; }
    public static string Server { get; }
    public static string Database { get; }
    public static string ExtendedProperty { get; }
    public static string DatabaseOptions { get; }
    public static string Synonym { get; }
    public static string Sequence { get; }
    public static string FullTextIndex { get; }
    public static string FullTextIndexColumn { get; }
    public static string Check { get; }
    public static string ForeignKey { get; }
    public static string ForeignKeyColumn { get; }
    public static string PartitionSchemeParameter { get; }
    public static string PlanGuide { get; }
    public static string Trigger { get; }
    public static string Index { get; }
    public static string BrokerPriority { get; }
    public static string IndexedColumn { get; }
    public static string Statistic { get; }
    public static string StatisticColumn { get; }
    public static string Column { get; }
    public static string DefaultConstraint { get; }
    public static string StoredProcedure { get; }
    public static string StoredProcedureParameter { get; }
    public static string SqlAssembly { get; }
    public static string SqlAssemblyFile { get; }
    public static string UserDefinedType { get; }
    public static string UserDefinedAggregate { get; }
    public static string UserDefinedAggregateParameter { get; }
    public static string FullTextCatalog { get; }
    public static string FullTextStopList { get; }
    public static string SearchPropertyList { get; }
    public static string ExtendedStoredProcedure { get; }
    public static string UserDefinedFunction { get; }
    public static string UserDefinedFunctionParameter { get; }
    public static string User { get; }
    public static string Schema { get; }
    public static string DatabaseRole { get; }
    public static string ApplicationRole { get; }
    public static string LogFile { get; }
    public static string FileGroup { get; }
    public static string DataFile { get; }
    public static string Default { get; }
    public static string Rule { get; }
    public static string UserDefinedDataType { get; }
    public static string UserDefinedTableType { get; }
    public static string PartitionFunction { get; }
    public static string PartitionScheme { get; }
    public static string Language { get; }
    public static string Login { get; }
    public static string ServerRole { get; }
    public static string LinkedServer { get; }
    public static string LinkedServerLogin { get; }
    public static string SystemDataType { get; }
    public static string JobServer { get; }
    public static string Category { get; }
    public static string AlertSystem { get; }
    public static string Alert { get; }
    public static string Operator { get; }
    public static string TargetServer { get; }
    public static string TargetServerGroup { get; }
    public static string Job { get; }
    public static string JobStep { get; }
    public static string JobSchedule { get; }
    public static string Settings { get; }
    public static string Information { get; }
    public static string UserOptions { get; }
    public static string BackupDevice { get; }
    public static string FullTextService { get; }
    public static string ServerActiveDirectory { get; }
    public static string HttpEndpoint { get; }
    public static string SoapConfiguration { get; }
    public static string SoapMethod { get; }
    public static string ServerAlias { get; }
    public static string PhysicalPartition { get; }
    public static string Audit { get; }
    public static string ServerAuditSpecification { get; }
    public static string DatabaseAuditSpecification { get; }
    public static string ManagedComputer { get; }
    public static string Service { get; }
    public static string XmlSchemaCollection { get; }
    public static string DatabaseEncryptionKey { get; }
    public static string Restore { get; }
    public static string RestoreAsync { get; }
    public static string EnumAvailableSqlServers { get; }
    public static string GetDataType { get; }
    public static string SetDataType { get; }
    public static string Backup { get; }
    public static string AvailabilityGroup { get; }
    public static string AvailabilityReplica { get; }
    public static string AvailabilityDatabase { get; }
    public static string AvailabilityGroupListener { get; }
    public static string AvailabilityGroupListenerIPAddress { get; }
    public static string SecurityPolicy { get; }
    public static string SecurityPredicate { get; }
    public static string ExternalDataSource { get; }
    public static string ExternalFileFormat { get; }
    public static string ColumnMasterKey { get; }
    public static string SmoSQLCLRUnAvailable { get; }
    public static string MoveToPool { get; }
    public static string ResourcePoolNotExist { get; }
    public static string CannotMoveToInternalResourcePool { get; }
    public static string CannotMoveToSamePool { get; }
    public static string AffinityTypeCannotBeSet { get; }
    public static string AffinityValueCannotBeSet { get; }
    public static string NoCPUAffinitized { get; }
    public static string ResourceGovernorPoolMissing { get; }
    public static string CannotSwitchDesignModeOff { get; }
    public static string ServerVersionNotSpecified { get; }
    public static string OperationNotAvailableInDesignMode { get; }
    public static string OnlyDesignModeSupported { get; }
    public static string OnlySmoObjectsSupported { get; }
    public static string RootNotFound { get; }
    public static string FileWritingException { get; }
    public static string InvalideFileName { get; }
    public static string FolderPathNotFound { get; }
    public static string FilePerObjectUrnMissingName { get; }
    public static string OrderingCycleDetected { get; }
    public static string IncorrectEndpointProtocol { get; }
    public static string FileTableCannotHaveUserColumns { get; }
    public static string ExternalTableCannotContainChecks { get; }
    public static string ExternalTableCannotContainForeignKeys { get; }
    public static string ExternalTableCannotContainPartitionSchemeParameters { get; }
    public static string ExternalTableCannotContainTriggers { get; }
    public static string ExternalTableCannotContainIndexes { get; }
    public static string ExternalTableCannotContainPhysicalPartitions { get; }
    public static string IdentityColumnForExternalTable { get; }
    public static string TruncateOperationNotSupportedOnExternalTables { get; }
    public static string ChangeTrackingNotSupportedOnExternalTables { get; }
    public static string ColumnStoreCompressionNotSettable { get; }
    public static string NoIndexUnique { get; }
    public static string NoIndexIgnoreDupKey { get; }
    public static string NoIndexOptimizeForSequentialKey { get; }
    public static string NoIndexClustered { get; }
    public static string InvaildColumnStoreIndexOption { get; }
    public static string IndexOnTableView { get; }
    public static string IncludedColumnNotSupported { get; }
    public static string ConflictingIndexProperties { get; }
    public static string SelectiveXmlIndexDoesNotSupportReorganize { get; }
    public static string MoreThenOneXmlDefaultNamespace { get; }
    public static string SecondarySelectiveXmlIndexModify { get; }
    public static string InvaildSXIOption { get; }
    public static string InvalidUpgradeToCCIIndexType { get; }
    public static string PropertyValidOnlyForColumnStoreIndexes { get; }
    public static string InvalidCompressionDelayValue { get; }
    public static string TransferDataException { get; }
    public static string ColumnCollationIncompatible { get; }
    public static string ConflictingExternalFileFormatProperties { get; }
    public static string UnsupportedPropertyForAlter { get; }
    public static string UnsupportedResourceManagerLocationProperty { get; }
    public static string UnsupportedParamForDataSourceType { get; }
    public static string AlterNotSupportedForRelationalTypes { get; }
    public static string InvalidTextForModifyingToCreateOrAlter { get; }
    public static string ExpectedGraphColumnNotFound { get; }
    public static string MissingDataRetentionFilterColumn { get; }
    public static string MissingExternalLanguageFileSpec { get; }
    public static string BadPropertiesCombination { get; }
    public static CultureInfo get_Culture();
    public static void set_Culture(CultureInfo value);
    public static string get_InvalidPasswordHash();
    public static string get_LoginPropertyNotSet();
    public static string get_LoginEnable();
    public static string get_LoginDisable();
    public static string get_AddCredential();
    public static string get_DropCredential();
    public static string get_EnterServerRoleName();
    public static string get_ServerRoleOwnerNameEmpty();
    public static string get_CreateAlterNotSupported();
    public static string get_EnterSequenceName();
    public static string get_EnterMinValue();
    public static string get_EnterMaxValue();
    public static string get_EnterIncrementValue();
    public static string get_EnterStartValue();
    public static string get_UpgradeDll();
    public static string get_ProviderEnable();
    public static string get_ProviderDisable();
    public static string get_SourceTypeShouldBeProvider();
    public static string get_CyclicalForeignKeys();
    public static string get_NullParameterTable();
    public static string get_NullParameterScriptingOptions();
    public static string get_CannotEnableViewTrigger();
    public static string get_ReplicationOptionNotSupportedForCloud();
    public static string get_NoSparseOnColumnSet();
    public static string get_NoSparseOnComputed();
    public static string get_NoColumnSetOnComputed();
    public static string get_NoGeneratedAlwaysColumnsOnNonTables();
    public static string get_NoSparseOrColumnSetOnTemporalColumns();
    public static string get_ComputedTemporalColumns();
    public static string get_IdentityTemporalColumns();
    public static string get_NullableTemporalColumns();
    public static string get_InvalidAlwaysEncryptedPropertyValues();
    public static string get_NoMemoryOptimizedTemporalTables();
    public static string get_SystemVersionedTableWithoutPeriod();
    public static string get_HistoryTableWithoutSystemVersioning();
    public static string get_NoTemporalFileTables();
    public static string get_NoAddingPeriodOnDroppedTable();
    public static string get_CannotHaveMultiplePeriods();
    public static string get_NoDroppingPeriodOnDroppedTable();
    public static string get_NoDroppingPeriodOnNotYetCreatedTable();
    public static string get_CannotDropNonExistingPeriod();
    public static string get_MustProvideExistingColumn();
    public static string get_PeriodMustHaveDifferentColumns();
    public static string get_PeriodStartColumnMustBeGeneratedAlways();
    public static string get_PeriodEndColumnMustBeGeneratedAlways();
    public static string get_PeriodInvalidDataType();
    public static string get_InvalidPeriodColumnName();
    public static string get_BothHistoryTableNameAndSchemaMustBeProvided();
    public static string get_NoHiddenColumnsOnNonGeneratedAlwaysColumns();
    public static string get_InvalidHistoryRetentionPeriodSpecification();
    public static string get_InvalidHistoryRetentionPeriodUnitSpecification();
    public static string get_LedgerTypeMustBeProvided();
    public static string get_BothLedgerViewNameAndSchemaMustBeProvided();
    public static string get_CannotProvideLedgerViewColumnNamesWithoutLedgerViewNameAndSchema();
    public static string get_NoDataMaskingOnNonTables();
    public static string get_NoDataMaskingOnColumnSet();
    public static string get_NoDataMaskingOnTemporalColumns();
    public static string get_NoDataMaskingOnComputedColumns();
    public static string get_NoDataMaskingOnFileStreamColumns();
    public static string get_NoDataMaskingOnEncryptedColumns();
    public static string get_NoDataClassificationOnNonTables();
    public static string get_NoDataClassificationOnComputedColumns();
    public static string get_MissingBackupDevices();
    public static string get_MissingBackupDeviceType();
    public static string get_PipeDeviceNotSupported();
    public static string get_BackupEncryptionNotSupported();
    public static string get_UnknownShrinkType();
    public static string get_CannotChangePrimary();
    public static string get_OnlyOnePrimaryFile();
    public static string get_MustSpecifyGrowth();
    public static string get_WrongPercentageGrowth();
    public static string get_WrongSize();
    public static string get_InvalidSizeFileStream();
    public static string get_InvalidMaxSizeFileStream();
    public static string get_InvalidGrowthFileStream();
    public static string get_PrimaryAlreadyDefault();
    public static string get_ColumnNotVarbinaryMax();
    public static string get_NotClusteredIndex();
    public static string get_NotNonClusteredIndex();
    public static string get_UnsupportedFileGroupType();
    public static string get_VarDecimalAndDataCompressionConflict();
    public static string get_RebuildHeapOnClusteredIndexError();
    public static string get_TooFewFiles();
    public static string get_UnknownChild();
    public static string get_InvalidGranteeList();
    public static string get_DatabaseAlreadyExists();
    public static string get_ReasonTextIsEncrypted();
    public static string get_ReasonPropertyIsNotSupportedOnCurrentServerVersion();
    public static string get_SearchPropertyIntIDNotValid();
    public static string get_SearchPropertySetGuidNotValid();
    public static string get_SearchPropertyGuidIntIdNotValid();
    public static string get_NullOrEmptyParameterSourceDatabaseName();
    public static string get_NullOrEmptyParameterSourceSearchPropertyListName();
    public static string get_EmptySourceSearchPropertyListName();
    public static string get_SearchPropertyListNameAllWhiteSpaces();
    public static string get_EmptyRestorePlan();
    public static string get_MultipleDatabaseSelectedToRestore();
    public static string get_ConflictWithNoRecovery();
    public static string get_BackupsOfDifferentDb();
    public static string get_FullBackupShouldBeFirst();
    public static string get_BackupsNotInSequence();
    public static string get_NoFullBackupSelected();
    public static string get_WrongDiffbackup();
    public static string get_DiffBackupNotCompatible();
    public static string get_WrongTLogbackup();
    public static string get_TailLogBackupDeviceNull();
    public static string get_OnlyLastRestoreWithNoRecovery();
    public static string get_UnsupportedServerVersion();
    public static string get_BackupMediaSetEmpty();
    public static string get_GetMediaSetGuid();
    public static string get_MediaNotPartOfSet();
    public static string get_FileGroupNotSupported();
    public static string get_InvalidDatabaseState();
    public static string get_PageRestoreOnlyForFullRecovery();
    public static string get_CloseConnectionsFailed();
    public static string get_BackupTailLog();
    public static string get_TailLog();
    public static string get_UnableToCreateRestoreSequence();
    public static string get_UnableToCreatePageRestoreSequence();
    public static string get_UnableToCreatePlanTakeTLogBackup();
    public static string get_OperationCancelledByUser();
    public static string get_InvalidSuspectpage();
    public static string get_SqlInnerException();
    public static string get_InnerException();
    public static string get_InnerWmiException();
    public static string get_UnknownError();
    public static string get_UnableToRetrieveBackupHistory();
    public static string get_OneFilePageSupported();
    public static string get_ScriptDataNotSupportedByThisMethod();
    public static string get_ForeignKeyCycleInObjects();
    public static string get_NotSupportedOnStandalone();
    public static string get_NotSupportedOnCloud();
    public static string get_InvalidScriptingOptions();
    public static string get_CreateOrAlterNotSupportedVersion();
    public static string get_SupportedOnlyBelow110();
    public static string get_SupportedOnlyBelow100();
    public static string get_SupportedOnlyBelow90();
    public static string get_SupportedOnlyOn150();
    public static string get_SupportedOnlyOn160();
    public static string get_SupportedOnlyOn140();
    public static string get_SupportedOnlyOn130();
    public static string get_SupportedOnlyOn120();
    public static string get_SupportedOnlyOn110();
    public static string get_SupportedOnlyOn105();
    public static string get_SupportedOnlyOn100();
    public static string get_SupportedOnlyOn90();
    public static string get_SupportedOnlyOn80SP3();
    public static string get_SupportedOnlyOn80();
    public static string get_NotSupportedForVersionEarlierThan110();
    public static string get_NotSupportedForVersionEarlierThan120();
    public static string get_NotSupportedForVersionEarlierThan130();
    public static string get_NotSupportedForVersionEarlierThan140();
    public static string get_NotSupportedForVersionEarlierThan150();
    public static string get_MustSpecifyOneParameter();
    public static string get_NeedPSParams();
    public static string get_ViewCannotHaveKeys();
    public static string get_InvalidAcctName();
    public static string get_OperationOnlyInPendingState();
    public static string get_OperationNotInPendingState();
    public static string get_RemoteServerEndpointRequired();
    public static string get_DatabaseScopedCredentialsRequired();
    public static string get_MissingBoundingParameters();
    public static string get_InvalidNonGeometryParameters();
    public static string get_UnsupportedNonSpatialParameters();
    public static string get_NotSpatialIndexOnView();
    public static string get_OneColumnInSpatialIndex();
    public static string get_NoSpatialIndexUnique();
    public static string get_NoSpatialIndexClustered();
    public static string get_LowPriorityCannotBeSetForDrop();
    public static string get_OnlyHashIndexIsSupportedInAlter();
    public static string get_NotXmlIndexOnView();
    public static string get_OneColumnInXmlIndex();
    public static string get_BucketCountForHashIndex();
    public static string get_ScriptMemoryOptimizedIndex();
    public static string get_HashIndexTableDependency();
    public static string get_TableMemoryOptimizedIndexDependency();
    public static string get_TableSqlDwIndexRestrictions();
    public static string get_NoXmlIndexUnique();
    public static string get_NoXmlIndexClustered();
    public static string get_UnsupportedNonXmlParameters();
    public static string get_CantSetDefaultFalse();
    public static string get_TimeoutMustBePositive();
    public static string get_ChangeTrackingException();
    public static string get_MissingChangeTrackingParameters();
    public static string get_TrackColumnsException();
    public static string get_ViewColumnsCannotBeModified();
    public static string get_SystemMessageReadOnly();
    public static string get_CantSetContainedDatabaseCatalogCollation();
    public static string get_ViewFragInfoNotInV7();
    public static string get_DtsNotInstalled();
    public static string get_NSNotInstalled();
    public static string get_InvalidNSOperation();
    public static string get_NSNotConnectedToServer();
    public static string get_InvalidThreadPoolSize();
    public static string get_InvalidQuantumLimit();
    public static string get_InvalidQuantumDuration();
    public static string get_InvalidThrottle();
    public static string get_InvalidFailuresBeforeLoggingEvent();
    public static string get_InvalidFailuresBeforeAbort();
    public static string get_InvalidMulticastRecipientLimit();
    public static string get_InvalidNotificationClassBatchSize();
    public static string get_StartTimeGreaterThanADay();
    public static string get_NoPermissions();
    public static string get_PrimaryFgMustHaveFiles();
    public static string get_NeedToSetParent();
    public static string get_ErrorInCreatingState();
    public static string get_BackupFailed();
    public static string get_RestoreFailed();
    public static string get_SetPasswordError();
    public static string get_PassPhraseAndIdentityNotSpecified();
    public static string get_PassPhraseNotSpecified();
    public static string get_NotEnoughRights();
    public static string get_SqlDwCreateRequiredParameterMissing();
    public static string get_CannotAlterKeyWithProvider();
    public static string get_AlterQueryStorePropertyForRestoringDatabase();
    public static string get_NoUrnSuffix();
    public static string get_GetParentFailed();
    public static string get_ParentNull();
    public static string get_InvalidFileInformationData();
    public static string get_ExecutionContextPrincipalIsNotSpecified();
    public static string get_MissingBrokerEndpoint();
    public static string get_CannotEnableSoapEndpoints();
    public static string get_ServiceError0();
    public static string get_ServiceError1();
    public static string get_ServiceError2();
    public static string get_ServiceError3();
    public static string get_ServiceError4();
    public static string get_ServiceError5();
    public static string get_ServiceError6();
    public static string get_ServiceError7();
    public static string get_ServiceError8();
    public static string get_ServiceError9();
    public static string get_ServiceError10();
    public static string get_ServiceError11();
    public static string get_ServiceError12();
    public static string get_ServiceError13();
    public static string get_ServiceError14();
    public static string get_ServiceError15();
    public static string get_ServiceError16();
    public static string get_ServiceError17();
    public static string get_ServiceError18();
    public static string get_ServiceError19();
    public static string get_ServiceError20();
    public static string get_ServiceError21();
    public static string get_ServiceError22();
    public static string get_ServiceError23();
    public static string get_ServiceError24();
    public static string get_UnsupportedFeatureSqlAgent();
    public static string get_UnsupportedFeatureSqlMail();
    public static string get_UnsupportedFeatureServiceBroker();
    public static string get_UnsupportedFeatureFullText();
    public static string get_UnsupportedFeatureResourceGovernor();
    public static string get_UnsupportedFeatureSmartAdmin();
    public static string get_CannotSubscribe();
    public static string get_CannotStartSubscription();
    public static string get_InnerRegSvrException();
    public static string get_SqlServerTypeName();
    public static string get_ColumnsMustBeSpecified();
    public static string get_PasswdModiOnlyForStandardLogin();
    public static string get_DenyLoginModiNotForStandardLogin();
    public static string get_CloudSidNotApplicableOnStandalone();
    public static string get_CannotCreateExtendedPropertyWithoutSchema();
    public static string get_InvalidSchema();
    public static string get_FailedToChangeSchema();
    public static string get_InvalidUrnServerLevel();
    public static string get_ServerLevelMustBePresent();
    public static string get_OperationInProgress();
    public static string get_PasswordError();
    public static string get_MediaPasswordError();
    public static string get_CannotChangePassword();
    public static string get_CannotChangePasswordForUser();
    public static string get_PasswordOnlyForDatabaseAuthenticatedNonWindowsUser();
    public static string get_DefaultLanguageOnlyForDatabaseAuthenticatedUser();
    public static string get_CannotCopyPasswordToUser();
    public static string get_FollowingPropertiesCanBeSetOnlyWithContainmentEnabled();
    public static string get_OperationNotSupportedWhenPartOfAUDF();
    public static string get_ReasonIntextMode();
    public static string get_ReasonNotIntextMode();
    public static string get_CollectionCannotBeModified();
    public static string get_KeyOptionsIncorrect();
    public static string get_TableOrViewParentForUpdateStatistics();
    public static string get_PropertyAvailable();
    public static string get_ServerPropertyMustBeSetForOlap();
    public static string get_InvalidInstanceName();
    public static string get_TransferCtorErr();
    public static string get_UnsupportedVersionException();
    public static string get_UnsupportedEngineTypeException();
    public static string get_UnsupportedEngineEditionException();
    public static string get_TargetRecoveryTimeNotNegative();
    public static string get_InvalidEdgeConstraintParent();
    public static string get_EmptyConstraintName();
    public static string get_InvalidEdgeConstraintDefinition();
    public static string get_ObjectIdCannotBeSet();
    public static string get_CannotEnableUDTTTrigger();
    public static string get_NotIndexOnUDTT();
    public static string get_NotXmlIndexOnUDTT();
    public static string get_NotFullTextIndexOnUDTT();
    public static string get_UDTTColumnsCannotBeModified();
    public static string get_UDTTCannotBeModified();
    public static string get_UDTTIndexCannotBeModified();
    public static string get_NotFragInfoOnUDTT();
    public static string get_NotStatisticsOnUDTT();
    public static string get_NotTriggersOnUDTT();
    public static string get_NotCheckIndexOnUDTT();
    public static string get_UDTTChecksCannotBeModified();
    public static string get_OperationNotSupportedWhenPartOfUDTT();
    public static string get_AddAuditSpecificationDetail();
    public static string get_RemoveAuditSpecificationDetail();
    public static string get_EnterAuditName();
    public static string get_EnterOwner();
    public static string get_EnterFilePath();
    public static string get_EnterName();
    public static string get_EnterServerAudit();
    public static string get_EnterStoragePath();
    public static string get_ReserveDiskSpaceNotAllowedWhenMaxFileSizeIsUnlimited();
    public static string get_EnterServerCertificate();
    public static string get_EnterServerAsymmetricKey();
    public static string get_CertificateNotBackedUp();
    public static string get_FailedOperationMessageNotSupportedTempdb();
    public static string get_InvalidOperationInDisconnectedMode();
    public static string get_ReadOnlyRoutingListContainsEmptyReplicaName();
    public static string get_CannotUpdateBothReadOnlyRoutingLists();
    public static string get_DistributedAvailabilityGroupTwoReplicasRequired();
    public static string get_DistributedAvailabilityGroupNoReplicatedDatabases();
    public static string get_DistributedAvailabilityGroupFailoverMode();
    public static string get_DistributedAvailabilityGroupAvailabilityMode();
    public static string get_DistributedAvailabilityGroupNoOptions();
    public static string get_SetAccount();
    public static string get_Create();
    public static string get_Alter();
    public static string get_CreateOrAlter();
    public static string get_Drop();
    public static string get_Rename();
    public static string get_Script();
    public static string get_Grant();
    public static string get_Revoke();
    public static string get_Deny();
    public static string get_GrantWithGrant();
    public static string get_Bind();
    public static string get_Unbind();
    public static string get_AddDefaultConstraint();
    public static string get_TestMailProfile();
    public static string get_TestNetSend();
    public static string get_SetState();
    public static string get_DropAndMove();
    public static string get_GetSmoObject();
    public static string get_AdvancedProperties();
    public static string get_AddCollection();
    public static string get_RemoveCollection();
    public static string get_This();
    public static string get_Abort();
    public static string get_AddMember();
    public static string get_DropMember();
    public static string get_EnumMembers();
    public static string get_EnumPermissions();
    public static string get_EnumContainingRoles();
    public static string get_EnumAgentProxyAccounts();
    public static string get_AddMemberServer();
    public static string get_EnumMemberServers();
    public static string get_RemoveMemberServer();
    public static string get_ResetOccurrenceCount();
    public static string get_AddNotification();
    public static string get_RemoveNotification();
    public static string get_UpdateNotification();
    public static string get_EnumNotifications();
    public static string get_ApplyToTargetServer();
    public static string get_ApplyToTargetServerGroup();
    public static string get_EnumAlerts();
    public static string get_EnumHistory();
    public static string get_EnumJobStepOutputLogs();
    public static string get_EnumTargetServers();
    public static string get_EnumJobSteps();
    public static string get_Invoke();
    public static string get_PurgeHistory();
    public static string get_AddSharedSchedule();
    public static string get_RemoveSharedSchedule();
    public static string get_RemoveAllJobSchedules();
    public static string get_RemoveAllJobSteps();
    public static string get_RemoveFromTargetServer();
    public static string get_RemoveFromTargetServerGroup();
    public static string get_Start();
    public static string get_Stop();
    public static string get_SetPassword();
    public static string get_ChangePassword();
    public static string get_MakeContained();
    public static string get_EnumDatabaseMappings();
    public static string get_GetDatabaseUser();
    public static string get_AddToRole();
    public static string get_AttachDatabase();
    public static string get_DetachDatabase();
    public static string get_EnumCollations();
    public static string get_EnumPerformanceCounters();
    public static string get_EnumErrorLogs();
    public static string get_EnumDatabaseMirrorWitnessRoles();
    public static string get_ReadErrorLog();
    public static string get_KillDatabase();
    public static string get_KillProcess();
    public static string get_GetActiveDBConnectionCount();
    public static string get_DropAllActiveDBConnections();
    public static string get_EnumDirectories();
    public static string get_EnumLocks();
    public static string get_AddPrivateKey();
    public static string get_ExportCertificate();
    public static string get_ChangePrivateKeyPassword();
    public static string get_RemovePrivateKey();
    public static string get_AddKeyEncryption();
    public static string get_DropKeyEncryption();
    public static string get_SymmetricKeyOpen();
    public static string get_SymmetricKeyClose();
    public static string get_EnumLogins();
    public static string get_EnumWindowsDomainGroups();
    public static string get_EnumProcesses();
    public static string get_EnumStartupProcedures();
    public static string get_EnumWindowsUserInfo();
    public static string get_EnumWindowsGroupInfo();
    public static string get_EnumAvailableMedia();
    public static string get_EnumServerAttributes();
    public static string get_DeleteBackupHistory();
    public static string get_Refresh();
    public static string get_EnumBoundColumns();
    public static string get_EnumBoundDataTypes();
    public static string get_CheckAllocations();
    public static string get_CheckCatalog();
    public static string get_CheckIdentityValues();
    public static string get_CheckTables();
    public static string get_CheckTable();
    public static string get_Shrink();
    public static string get_RecalculateSpaceUsage();
    public static string get_PrefetchObjects();
    public static string get_EnumTransactions();
    public static string get_GetTransactionCount();
    public static string get_ImportXmlSchema();
    public static string get_ExtendXmlSchema();
    public static string get_RemoveFullTextCatalogs();
    public static string get_SetDefaultFullTextCatalog();
    public static string get_SetDefaultFileGroup();
    public static string get_SetDefaultFileStreamFileGroup();
    public static string get_CheckFileGroup();
    public static string get_CheckIndex();
    public static string get_Checkpoint();
    public static string get_Cleanup();
    public static string get_CannotReadProp();
    public static string get_UpdateLanguageResources();
    public static string get_CatalogUpgradeOptions();
    public static string get_EnumLanguages();
    public static string get_EnumSemanticLanguages();
    public static string get_ClearHostLoginAccount();
    public static string get_SetProxyAccount();
    public static string get_ClearProxyAccount();
    public static string get_SetMsxAccount();
    public static string get_ClearMsxAccount();
    public static string get_CycleErrorLog();
    public static string get_EnumJobHistory();
    public static string get_EnumJobs();
    public static string get_MoreThanOneProxyAccountIsNotSupported();
    public static string get_AddSubSystems();
    public static string get_DeleteJobStepLogs();
    public static string get_RemoveSubSystems();
    public static string get_EnumSubSystems();
    public static string get_AddMailAccountToProfile();
    public static string get_RemoveMailAccountFromProfile();
    public static string get_EnumMailAccountsForProfile();
    public static string get_AddPrincipalToMailProfile();
    public static string get_RemovePrincipalFromMailProfile();
    public static string get_EnumPrincipalsForMailProfile();
    public static string get_AddLoginToProxyAccount();
    public static string get_RemoveLoginFromProxyAccount();
    public static string get_EnumLoginsOfProxyAccount();
    public static string get_AddServerRoleToProxyAccount();
    public static string get_RemoveServerRoleFromProxyAccount();
    public static string get_EnumServerRolesOfProxyAccount();
    public static string get_AddMSDBRoleToProxyAccount();
    public static string get_RemoveMSDBRoleFromProxyAccount();
    public static string get_EnumMSDBRolesOfProxyAccount();
    public static string get_MsxDefect();
    public static string get_MsxEnlist();
    public static string get_PurgeJobHistory();
    public static string get_ReassignJobsByLogin();
    public static string get_CreateRestorePlan();
    public static string get_DropJobsByLogin();
    public static string get_StartMonitor();
    public static string get_StopMonitor();
    public static string get_EnumProxies();
    public static string get_DropJobsByServer();
    public static string get_CompareUrn();
    public static string get_Disable();
    public static string get_DisableAllIndexes();
    public static string get_EnableAllIndexes();
    public static string get_DiscoverDependencies();
    public static string get_DropBackupHistory();
    public static string get_ChangeMirroringState();
    public static string get_IsMember();
    public static string get_Recreate();
    public static string get_Enable();
    public static string get_EnumColumns();
    public static string get_EnumForeignKeys();
    public static string get_EnumIndexes();
    public static string get_EnumFragmentation();
    public static string get_EnumReferences();
    public static string get_SetOffline();
    public static string get_SetEncryption();
    public static string get_SetOwner();
    public static string get_StartPopulation();
    public static string get_StopPopulation();
    public static string get_Rebuild();
    public static string get_Reorganize();
    public static string get_UpdateStatistics();
    public static string get_SetHostLoginAccount();
    public static string get_SetMailServerAccount();
    public static string get_SetMailServerPassword();
    public static string get_EnumLastStatisticsUpdates();
    public static string get_RebuildIndexes();
    public static string get_ResumeIndexes();
    public static string get_AbortIndexes();
    public static string get_PauseIndexes();
    public static string get_ReCompileReferences();
    public static string get_TruncateData();
    public static string get_TruncateLog();
    public static string get_TruncatePartitionsNotSupported();
    public static string get_SwitchPartition();
    public static string get_MergeHashPartition();
    public static string get_MergeRangePartition();
    public static string get_SplitHashPartition();
    public static string get_SplitRangePartition();
    public static string get_GetRangeValues();
    public static string get_ResetNextUsed();
    public static string get_GetFileGroups();
    public static string get_GetDefaultInitFields();
    public static string get_SetDefaultInitFields();
    public static string get_GetPropertyNames();
    public static string get_SetParent();
    public static string get_InitObject();
    public static string get_SetName();
    public static string get_SetNamespace();
    public static string get_SetSchema();
    public static string get_ExecuteNonQuery();
    public static string get_SetSnapshotIsolation();
    public static string get_AlterDatabaseScopedConfiguration();
    public static string get_EnumNamespaces();
    public static string get_EnumTypes();
    public static string get_AddSchemaDocument();
    public static string get_ScriptTransfer();
    public static string get_SetIdentityPhrase();
    public static string get_SetEncryptionOptions();
    public static string get_EnumStatistics();
    public static string get_GetJobByID();
    public static string get_RemoveJobByID();
    public static string get_RemoveJobsByLogin();
    public static string get_EnumCandidateKeys();
    public static string get_ExecuteWithResults();
    public static string get_UpdateIndexStatistics();
    public static string get_EnumMatchingSPs();
    public static string get_EnumObjects();
    public static string get_ReadBackupHeader();
    public static string get_ReadMediaHeader();
    public static string get_DetachedDatabaseInfo();
    public static string get_IsDetachedPrimaryFile();
    public static string get_IsWindowsGroupMember();
    public static string get_EnumDetachedDatabaseFiles();
    public static string get_EnumDetachedLogFiles();
    public static string get_ServerEnumMembers();
    public static string get_Contains();
    public static string get_PingSqlServerVersion();
    public static string get_SetServiceAccount();
    public static string get_ChangeServicePassword();
    public static string get_RecoverMasterKey();
    public static string get_RegenerateMasterKey();
    public static string get_ImportMasterKey();
    public static string get_ExportMasterKey();
    public static string get_ChangeAcctMasterKey();
    public static string get_AddEncryptionMasterKey();
    public static string get_DropEncryptionMasterKey();
    public static string get_Close();
    public static string get_Open();
    public static string get_EnumKeyEncryptions();
    public static string get_Compare();
    public static string get_Insert();
    public static string get_AddRange();
    public static string get_SetRange();
    public static string get_AddDevice();
    public static string get_SetMirrors();
    public static string get_SetDatabase();
    public static string get_SqlManagement();
    public static string get_EnumEncryptionAlgorithms();
    public static string get_EnumProviderKeys();
    public static string get_SetIpAddress();
    public static string get_SetSubnetIp();
    public static string get_SetSubnetMask();
    public static string get_GetDHCPAddress();
    public static string get_GetQueryStoreOptions();
    public static string get_SetQueryStoreOptions();
    public static string get_InvalidQueryStoreOptions();
    public static string get_ReauthorizeRemoteDataArchive();
    public static string get_GetRemoteDataArchiveMigrationStatusReports();
    public static string get_GetRemoteDatabaseMigrationStatistics();
    public static string get_GetRemoteTableMigrationStatistics();
    public static string get_Table();
    public static string get_FileTable();
    public static string get_View();
    public static string get_Server();
    public static string get_Database();
    public static string get_ExtendedProperty();
    public static string get_DatabaseOptions();
    public static string get_Synonym();
    public static string get_Sequence();
    public static string get_FullTextIndex();
    public static string get_FullTextIndexColumn();
    public static string get_Check();
    public static string get_ForeignKey();
    public static string get_ForeignKeyColumn();
    public static string get_PartitionSchemeParameter();
    public static string get_PlanGuide();
    public static string get_Trigger();
    public static string get_Index();
    public static string get_BrokerPriority();
    public static string get_IndexedColumn();
    public static string get_Statistic();
    public static string get_StatisticColumn();
    public static string get_Column();
    public static string get_DefaultConstraint();
    public static string get_StoredProcedure();
    public static string get_StoredProcedureParameter();
    public static string get_SqlAssembly();
    public static string get_SqlAssemblyFile();
    public static string get_UserDefinedType();
    public static string get_UserDefinedAggregate();
    public static string get_UserDefinedAggregateParameter();
    public static string get_FullTextCatalog();
    public static string get_FullTextStopList();
    public static string get_SearchPropertyList();
    public static string get_ExtendedStoredProcedure();
    public static string get_UserDefinedFunction();
    public static string get_UserDefinedFunctionParameter();
    public static string get_User();
    public static string get_Schema();
    public static string get_DatabaseRole();
    public static string get_ApplicationRole();
    public static string get_LogFile();
    public static string get_FileGroup();
    public static string get_DataFile();
    public static string get_Default();
    public static string get_Rule();
    public static string get_UserDefinedDataType();
    public static string get_UserDefinedTableType();
    public static string get_PartitionFunction();
    public static string get_PartitionScheme();
    public static string get_Language();
    public static string get_Login();
    public static string get_ServerRole();
    public static string get_LinkedServer();
    public static string get_LinkedServerLogin();
    public static string get_SystemDataType();
    public static string get_JobServer();
    public static string get_Category();
    public static string get_AlertSystem();
    public static string get_Alert();
    public static string get_Operator();
    public static string get_TargetServer();
    public static string get_TargetServerGroup();
    public static string get_Job();
    public static string get_JobStep();
    public static string get_JobSchedule();
    public static string get_Settings();
    public static string get_Information();
    public static string get_UserOptions();
    public static string get_BackupDevice();
    public static string get_FullTextService();
    public static string get_ServerActiveDirectory();
    public static string get_HttpEndpoint();
    public static string get_SoapConfiguration();
    public static string get_SoapMethod();
    public static string get_ServerAlias();
    public static string get_PhysicalPartition();
    public static string get_Audit();
    public static string get_ServerAuditSpecification();
    public static string get_DatabaseAuditSpecification();
    public static string get_ManagedComputer();
    public static string get_Service();
    public static string get_XmlSchemaCollection();
    public static string get_DatabaseEncryptionKey();
    public static string get_Restore();
    public static string get_RestoreAsync();
    public static string get_EnumAvailableSqlServers();
    public static string get_GetDataType();
    public static string get_SetDataType();
    public static string get_Backup();
    public static string get_AvailabilityGroup();
    public static string get_AvailabilityReplica();
    public static string get_AvailabilityDatabase();
    public static string get_AvailabilityGroupListener();
    public static string get_AvailabilityGroupListenerIPAddress();
    public static string get_SecurityPolicy();
    public static string get_SecurityPredicate();
    public static string get_ExternalDataSource();
    public static string get_ExternalFileFormat();
    public static string get_ColumnMasterKey();
    public static string get_SmoSQLCLRUnAvailable();
    public static string get_MoveToPool();
    public static string get_ResourcePoolNotExist();
    public static string get_CannotMoveToInternalResourcePool();
    public static string get_CannotMoveToSamePool();
    public static string get_AffinityTypeCannotBeSet();
    public static string get_AffinityValueCannotBeSet();
    public static string get_NoCPUAffinitized();
    public static string get_ResourceGovernorPoolMissing();
    public static string get_CannotSwitchDesignModeOff();
    public static string get_ServerVersionNotSpecified();
    public static string get_OperationNotAvailableInDesignMode();
    public static string get_OnlyDesignModeSupported();
    public static string get_OnlySmoObjectsSupported();
    public static string get_RootNotFound();
    public static string get_FileWritingException();
    public static string get_InvalideFileName();
    public static string get_FolderPathNotFound();
    public static string get_FilePerObjectUrnMissingName();
    public static string get_OrderingCycleDetected();
    public static string get_IncorrectEndpointProtocol();
    public static string get_FileTableCannotHaveUserColumns();
    public static string get_ExternalTableCannotContainChecks();
    public static string get_ExternalTableCannotContainForeignKeys();
    public static string get_ExternalTableCannotContainPartitionSchemeParameters();
    public static string get_ExternalTableCannotContainTriggers();
    public static string get_ExternalTableCannotContainIndexes();
    public static string get_ExternalTableCannotContainPhysicalPartitions();
    public static string get_IdentityColumnForExternalTable();
    public static string get_TruncateOperationNotSupportedOnExternalTables();
    public static string get_ChangeTrackingNotSupportedOnExternalTables();
    public static string get_ColumnStoreCompressionNotSettable();
    public static string get_NoIndexUnique();
    public static string get_NoIndexIgnoreDupKey();
    public static string get_NoIndexOptimizeForSequentialKey();
    public static string get_NoIndexClustered();
    public static string get_InvaildColumnStoreIndexOption();
    public static string get_IndexOnTableView();
    public static string get_IncludedColumnNotSupported();
    public static string get_ConflictingIndexProperties();
    public static string get_SelectiveXmlIndexDoesNotSupportReorganize();
    public static string get_MoreThenOneXmlDefaultNamespace();
    public static string get_SecondarySelectiveXmlIndexModify();
    public static string get_InvaildSXIOption();
    public static string get_InvalidUpgradeToCCIIndexType();
    public static string get_PropertyValidOnlyForColumnStoreIndexes();
    public static string get_InvalidCompressionDelayValue();
    public static string get_TransferDataException();
    public static string get_ColumnCollationIncompatible();
    public static string get_ConflictingExternalFileFormatProperties();
    public static string get_UnsupportedPropertyForAlter();
    public static string get_UnsupportedResourceManagerLocationProperty();
    public static string get_UnsupportedParamForDataSourceType();
    public static string get_AlterNotSupportedForRelationalTypes();
    public static string get_InvalidTextForModifyingToCreateOrAlter();
    public static string get_ExpectedGraphColumnNotFound();
    public static string get_MissingDataRetentionFilterColumn();
    public static string get_MissingExternalLanguageFileSpec();
    public static string get_BadPropertiesCombination();
    public static string InvalidTypeForMetadataProvider(string typeName);
    public static string InvalidPropertyExpression(string expression);
    public static string InvalidSequenceValue(string propertyName);
    public static string CannotSetPrivilege(string privName);
    public static string UsersWithoutLoginsDownLevel(string targetVersion);
    public static string EncryptedUserDefinedFunctionsDownlevel(string udf, string targetVersion);
    public static string EncryptedStoredProcedureDownlevel(string sproc, string targetVersion);
    public static string EncryptedViewsFunctionsDownlevel(string view, string targetVersion);
    public static string SchemaDownlevel(string objectName, string targetVersion);
    public static string UserDefinedAggregatesDownlevel(string objectName, string targetVersion);
    public static string XmlSchemaCollectionDownlevel(string objectName, string targetVersion);
    public static string SynonymDownlevel(string objectName, string targetVersion);
    public static string SequenceDownlevel(string objectName, string targetVersion);
    public static string SecurityPolicyDownlevel(string objectName, string targetVersion);
    public static string ExternalDataSourceDownlevel(string objectName, string targetVersion);
    public static string ColumnEncryptionKeyDownlevel(string objectName, string targetVersion);
    public static string ExternalFileFormatDownlevel(string objectName, string targetVersion);
    public static string ColumnMasterKeyDownlevel(string objectName, string targetVersion);
    public static string DatabaseScopedCredentialDownlevel(string objectName, string targetVersion);
    public static string UserDefinedTableDownlevel(string objectName, string targetVersion);
    public static string DdlTriggerDownlevel(string objectName, string targetVersion);
    public static string ClrUserDefinedFunctionDownlevel(string objectName, string targetVersion);
    public static string ClrStoredProcedureDownlevel(string objectName, string targetVersion);
    public static string AssemblyDownlevel(string objectName, string targetVersion);
    public static string ColumnEncryptionKeyNoValues(string objectName);
    public static string SecurityPolicyNoPredicates(string objectName);
    public static string ComputedColumnDownlevelContraint(string objectName, string targetVersion);
    public static string DataScriptingUnsupportedDataTypeException(string tableName, string columnName, string dataType);
    public static string StoredProcedureDownlevelExecutionContext(string objectName, string executionPrincipal, string targetVersion);
    public static string UserDefinedFunctionDownlevelExecutionContext(string objectName, string executionPrincipal, string targetVersion);
    public static string TriggerDownlevelExecutionContext(string objectName, string executionPrincipal, string targetVersion);
    public static string UnsupportedColumnCollation(string columnName, string parentName, string collationName, string targetVersion);
    public static string UnsupportedDatabaseCollation(string collationName, string targetVersion);
    public static string UnsupportedColumnType(string parentName, string columnName, string columnDataType, string targetVersion, string engineType, string editionType);
    public static string UnsupportedColumnTypeOnEngineType(string parentName, string columnName, string columnDataType, string engineType);
    public static string UnsupportedDataTypeOnTarget(string dataType, string targetVersion, string engineType, string editionType);
    public static string UnscriptableDataTypeOnTarget(string dataType, string targetVersion, string engineType, string editionType);
    public static string CollectionNotAvailable(string objectname, string serverversion);
    public static string CreateOrAlterDownlevel(string objectName, string targetVersion);
    public static string CreateOrAlterNotSupported(string objectName);
    public static string TriggerNotSupported(string serverversion);
    public static string UnknownRecoveryModel(string modelname);
    public static string UnknownUserAccess(string modelname);
    public static string CannotRenameObject(string objectname, string serverversion);
    public static string PropertyNotSet(string propname, string objtype);
    public static string ColumnAlreadyHasDefault(string name);
    public static string ColumnHasNoDefault(string colname, string defname);
    public static string MismatchingServerName(string srvname, string urnsrvname);
    public static string MismatchingNumberOfMirrors(int i1, int i2);
    public static string BackupToPipesNotSupported(string serverversion);
    public static string BackupToUrlNotSupported(string serverVersion, string supportedVersion);
    public static string CredentialNotSupportedError(string credential, string serverVersion, string supportedVersion);
    public static string LoginHasUser(string name, string dbname);
    public static string LoginHasAlias(string name);
    public static string InvalidLogin(string loginname);
    public static string InvalidShrinkMethod(string name);
    public static string ObjectRefsNonexCol(string objname, string key, string col);
    public static string OrderHintRefsNonexCol(string key, string col);
    public static string CannotCopyPartition(int startPartition, int endPartition);
    public static string PartitionNumberStartOutOfRange(int maxvalue);
    public static string RebuildHeapError(string msg);
    public static string PartitionSchemeNotAssignedError(string msg);
    public static string CannotAddObject(string typename, string objectName);
    public static string UnknownObjectType(string name);
    public static string UnknownProperty(string name, string typename);
    public static string ObjectNotUnderServer(string name);
    public static string UnknownChildCollection(string objtypename, string childname);
    public static string CantCreateType(string name);
    public static string ObjectAlreadyExists(string type, string name);
    public static string NoSqlGen(string objname);
    public static string InvalidType(string typename);
    public static string WrongUrn(string objectType, string urn);
    public static string NoDepForSysObjects(string objUrn);
    public static string UrnMissing(string urn);
    public static string ObjectWithNoChildren(string objectName, string childName);
    public static string ColumnBeforeNotExisting(string colname);
    public static string PropNotModifiable(string propName, string objectType);
    public static string UnsupportedLoginMode(string loginmode);
    public static string CannotSetDefInitFlds(string typename);
    public static string ObjectWithMoreChildren(string objectName, string childName);
    public static string WrongHybridIPAddresses(string objectName);
    public static string WrongDHCPv6IPAddress(string objectName);
    public static string WrongMultiDHCPIPAddresses(string objectName);
    public static string GetDHCPAddressFailed(string listenerName, int count);
    public static string CannotAddDHCPIPAddress(string objectName, string propName);
    public static string SearchPropertyListNameNotValid(int maxLength);
    public static string SearchPropertyNameNotValid(int maxLength);
    public static string SearchPropertyDescriptionNotValid(int maxLength);
    public static string BackupMediaSetNotComplete(string files, int familyCount, int missing);
    public static string UnableToReadDevice(string backupDeviceName);
    public static string BackupFileAlreadyExists(string backupFile);
    public static string Restoring(string backupset);
    public static string BackupFileNotFound(string file);
    public static string CannotRestoreFileBootPage(int fileid, long pageid);
    public static string CannotRestoreDatabaseBootPage(int fileid, long pageid);
    public static string DuplicateSuspectPage(int fileId, long pageId);
    public static string InvalidPathChildCollectionNotFound(string child, string parent);
    public static string InvalidPathChildSingletonNotFound(string child, string parent);
    public static string WMIException(string errorCode);
    public static string CallingInitChildLevelWithWrongUrn(string urn);
    public static string CallingInitQueryUrnsWithWrongUrn(string urn);
    public static string UnsupportedObjectQueryUrn(string urn);
    public static string UnsupportedBackupDeviceType(string name);
    public static string UnsupportedVersion(string version);
    public static string UnsupportedCompatLevelException(long targetLevel, long minLevel);
    public static string ObjectDoesNotExist(string type, string name);
    public static string UnsupportedFeature(string type);
    public static string NoObjectWithoutColumns(string objName);
    public static string ConflictingScriptingOptions(string opt1, string opt2);
    public static string InvalidScriptingOutput(string opt1, string opt2);
    public static string NotSupportedForCloudVersion(string type, string version);
    public static string NotSupportedForSqlDw(string type);
    public static string NotSupportedForSqlOd(string type);
    public static string NotSupportedForSqlDb(string type);
    public static string NotSupportedForSqlEdge(string type);
    public static string NotSupportedOnStandaloneWithDetails(string type);
    public static string NotSupportedOnCloudWithDetails(string type);
    public static string NotSupportedOnOnDemandWithDetails(string type);
    public static string NotSupportedOnSqlEdge(string type);
    public static string ScriptingNotSupportedForSqlDw(string type);
    public static string ScriptingNotSupportedForSqlDb(string type);
    public static string ScriptingNotSupportedOnStandalone(string type);
    public static string ScriptingNotSupportedOnCloud(string type);
    public static string ScriptingNotSupportedOnEdge(string type);
    public static string PropertySupportedOnlyOn110SP1(string propertyName);
    public static string PropertySupportedOnlyOn110(string propertyName);
    public static string PropertyNotSupportedForCloudVersion(string propertyName, string version);
    public static string PropertyNotSupportedOnStandalone(string propertyName);
    public static string PropertyNotSupportedOnCloud(string propertyName);
    public static string PropertyNotSupportedOnEdge(string propertyName);
    public static string PropertyNotSupportedWithDetails(string propertyName, string engineType, string version, string engineEdition);
    public static string PropertyValueSupportedOnlyOn110(string propertyName, string propertyValue);
    public static string PropertyValueNotSupportedForSqlDw(string propertyName, string propertyValue);
    public static string PropertyValueNotSupportedForSqlDb(string propertyName, string propertyValue);
    public static string WrongPropertyValueException(string propertyName, string propertyValue);
    public static string InvalidPropertyValueForVersion(string typeName, string propertyName, string propertyValue, string sqlVersionName);
    public static string PropertyCannotBeSetForVersion(string propertyName, string objectType, string version);
    public static string EmptyInputParam(string paramName, string paramKind);
    public static string MutuallyExclusiveProperties(string prop1, string prop2);
    public static string IndexMustBeClustered(string tableName, string indexName);
    public static string ParentMustExist(string objectType, string objectName);
    public static string OperationNotInPendingState1(string prop1);
    public static string OperationNotInPendingState2(string prop1, string prop2);
    public static string OperationNotInPendingState3(string prop1, string prop2, string prop3);
    public static string UnsupportedDatabaseScopedConfiguration(string configName);
    public static string SpatialAutoGridDownlevel(string objectName, string targetVersion);
    public static string NoAutoGridWithGrids(string objectName);
    public static string TableSqlDwIndexTypeRestrictions(string indexType);
    public static string UnexpectedIndexTypeDetected(string indexType);
    public static string NoPropertyChangeForDotNet(string propertyName);
    public static string ClrNotSupported(string propName, string version);
    public static string InvalidPropertyNumberRange(string propName, string numberMin, string numberMax);
    public static string InvalidCollation(string name);
    public static string UnsupportedCollation(string name, string version);
    public static string NeedToPassObject(string objtype);
    public static string InexistentDir(string dir);
    public static string CantCreateTempFile(string dir);
    public static string UnknownFilter(string filter);
    public static string MessageIDTooSmall(int id);
    public static string DataTypeUnsupported(string dt);
    public static string CantSetTypeName(string type);
    public static string CantSetTypeSchema(string type);
    public static string UnknownSqlDataType(string type);
    public static string NeedExistingObjForDataType(string objName);
    public static string NoPendingObjForDataType(string state);
    public static string InvalidOptionForVersion(string method, string optionName, string SqlVersionName);
    public static string InvalidParamForVersion(string method, string paramName, string SqlVersionName);
    public static string UnknownLanguageId(string langid);
    public static string UnknownEnumeration(string type);
    public static string UnknownEnumerationWithValue(string type, object value);
    public static string MissingConfigVariable(string fnName, string varName);
    public static string ThreadPoolSizeNotValidForEdition(string componentName, int threadPoolSize);
    public static string InvalidPropertySetForExistingObject(string propertyName);
    public static string InvalidEncryptArgumentsAndArgumentKey(string EncryptArguments, string ArgumentKey);
    public static string InvalidSerializerAdapterFound(string name, string expectedType, string actualType);
    public static string InvalidConversionError(string name, string input, string type);
    public static string RequiredChildMissingFromParent(string requiredChildType, string parentName, string parentType);
    public static string WrongParent(string objectName);
    public static string VerifyFailed(string database, string backupType);
    public static string VerifyFailed0(string database);
    public static string InvalidVersion(string version);
    public static string ConflictingSwitches(string prop1, string prop2);
    public static string BadCompatLevel(string level);
    public static string InvalidAlgorithm(string parent, string argument);
    public static string IncludeHeader(string objectType, string name, string dateString);
    public static string FullPropertyBag(string propName);
    public static string MultipleRowsForUrn(string urnName);
    public static string CouldNotFindKey(string keyName);
    public static string UnsupportedUrnFilter(string attrib, string functionType);
    public static string UnsupportedUrnAttrib(string attrib);
    public static string MappingObjectIdMissing(string typename, int id);
    public static string EmptyMapping(string parent, string mappingname);
    public static string UnknownCategoryName(string name);
    public static string UnknownCategoryType(string typename);
    public static string UnknownOperator(string name);
    public static string InvalidServerUrn(string serverName);
    public static string InvalidUrn(string type);
    public static string WMIProviderNotInstalled(string machineName);
    public static string PropertyCannotBeChangedAfterConnection(string propertyName);
    public static string CouldNotFindManagementObject(string type, string name);
    public static string NotSupportedNotification(string className, string eventType);
    public static string MissingObjectExceptionText(string parentName, string objectName, string serverVersion);
    public static string PropertyNotSetExceptionText(string propertyName);
    public static string MissingObjectNameExceptionText(string parentName, string objectType, string objectName);
    public static string WrongPropertyValueExceptionText(string propName, string propValue);
    public static string PropertyTypeMismatchExceptionText(string propname, string received, string expected);
    public static string MissingPropertyExceptionText(string propertyName, string serverVersion);
    public static string UnknownPropertyExceptionText(string propertyName);
    public static string PropertyReadOnlyExceptionText(string name);
    public static string InvalidSmoOperationExceptionText(string opName, string state);
    public static string PropertyCannotBeRetrievedExceptionText(string objType, string propname, string objName);
    public static string ObjectDroppedExceptionText(string type, string name);
    public static string UnsupportedObjectNameExceptionText(string objectType);
    public static string FailedtoInitialize(string urn);
    public static string PropertyMustBeSpecifiedInUrn(string propName, string nodeType);
    public static string InvalidScanType(string scanType);
    public static string TempTablesNotSupported(string tableName);
    public static string PlanGuideNameCannotStartWithHash(string planGuideName);
    public static string PropertiesNotValidException(string propNames, string propName, string propValue);
    public static string TypeSchemaMustBeDbo(string prop, string value);
    public static string UnsupportedPermission(string permName);
    public static string InvalidVersionSmoOperation(string version);
    public static string ContainmentNotSupported(string version);
    public static string AweEnabledNotSupported(string version);
    public static string FailedToWriteProperty(string propName, string objectType, string objectName, string reason);
    public static string SyntaxErrorInTextHeader(string objectType, string objectName);
    public static string IncorrectTextHeader(string objectType, string objectName, string propNameSmall, string propName);
    public static string ScriptHeaderTypeNotSupported(string scriptHeaderType, string objectType, string objectName);
    public static string PropertyIsInvalidInUrn(string propName, string nodeType);
    public static string ReasonObjectAlreadyCreated(string objName);
    public static string CannotReadProperty(string propName);
    public static string CannotWriteProperty(string propName);
    public static string CannotAccessProperty(string propName);
    public static string PropertyNotAvailableToWrite(string propName, string version);
    public static string CantScriptObject(string urn);
    public static string PropertyNotValidException(string propName1, string propName2, string propValue);
    public static string InvalidEdgeConstraintReferentialAction(string referentialAction);
    public static string FailedOperationExceptionText(string opName, string objType, string objName);
    public static string FailedOperationExceptionText2(string opName);
    public static string FailedOperationExceptionText3(string opName, string objType, string objName, string Reason);
    public static string FailedOperationExceptionTextColl(string opName, string coll, string objType, string parent);
    public static string FailedOperationExceptionTextScript(string objType, string objName);
    public static string CannotCreateAvailabilityGroupWithoutCurrentIntance(string instanceName, string agName);
    public static string JoinAvailabilityGroupFailed(string replicaName, string agName);
    public static string ForceFailoverFailed(string serverName, string agName);
    public static string ManualFailoverFailed(string serverName, string agName);
    public static string DatabaseJoinAvailabilityGroupFailed(string replicaName, string agName, string dbName);
    public static string DatabaseJoinAvailabilityGroupInvalidGroupName(string agName, string parentAgName, string dbName);
    public static string DatabaseLeaveAvailabilityGroupFailed(string replicaName, string agName, string dbName);
    public static string SuspendDataMovementFailed(string replicaName, string agName, string dbName);
    public static string ResumeDataMovementFailed(string replicaName, string agName, string dbName);
    public static string EnumClusterMemberState(string serverName);
    public static string EnumReplicaClusterNodes(string serverName);
    public static string EnumClusterSubnets(string serverName);
    public static string RestartListenerFailed(string listenerName, string agName);
    public static string PropertyCannotBeRetrievedFromSecondary(string propname);
    public static string GrantAGCreateDatabasePrivilegeFailed(string serverName, string agName);
    public static string RevokeAGCreateDatabasePrivilegeFailed(string serverName, string agName);
    public static string Win32Error(string code);
    public static string WrongIndexRangeProvidedCPU(int startIndex, int endIndex);
    public static string WrongIndexRangeProvidedNuma(int startIndex, int endIndex);
    public static string HoleInIndexRangeProvidedCPU(int index);
    public static string HoleInIndexRangeProvidedNumaNode(int index);
    public static string WrongIndexRangeProvidedScheduler(int startIndex, int endIndex);
    public static string PropertyNotSetInDesignMode(string name);
    public static string PropertyNotAvailableInDesignMode(string name);
    public static string PropertyNotFound(string propertyName, string typeName);
    public static string UnknownDomain(string name);
    public static string FileTableNotSupportedOnTargetEngine(string targetVersion);
    public static string PropertyOnlySupportedForFileTable(string propName);
    public static string TableNotFileTable(string name);
    public static string NamespaceNotEnabled(string name);
    public static string TableNotExternalTable(string name);
    public static string PropertyOnlySupportedForExternalTable(string propName);
    public static string ConflictingExternalTableProperties(string propName, string propValue, string confPropName, string confPropValue);
    public static string ShardingColumnNotSupportedWithNonShardedDistribution(string shardingColPropName, string distributionName);
    public static string ShardingColumnNotSpecifiedForShardedDistribution(string shardingColPropName);
    public static string ShardingColumnNotAddedToTable(string shardingColName);
    public static string DependentPropertyMissing(string propName, string dependentPropName);
    public static string UnsupportedPropertyForSXI(string propertyName);
    public static string UnsupportedValueForSXI(string value, string propertyName, string suggestion);
    public static string ExecutingScript(string statement);
    public static string StartingDataTransfer(string tableName);
    public static string CompletedDataTransfer(string tableName);
    public static string InvalidIndexSpecifiedForModifyingTextToCreateOrAlter(int index, int startIndex, int endIndex);
}
internal class Microsoft.SqlServer.Management.Smo.ExecuteNonQueryCompletedEventArgs : EventArgs {
    private ExecutionStatus executionStatus;
    private Exception lastException;
    public ExecutionStatus ExecutionStatus { get; }
    public Exception LastException { get; }
    internal ExecuteNonQueryCompletedEventArgs(ExecutionStatus status, Exception lastException);
    public ExecutionStatus get_ExecutionStatus();
    public Exception get_LastException();
}
internal class Microsoft.SqlServer.Management.Smo.ExecuteNonQueryCompletedEventHandler : MulticastDelegate {
    public ExecuteNonQueryCompletedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, ExecuteNonQueryCompletedEventArgs args);
    public virtual IAsyncResult BeginInvoke(object sender, ExecuteNonQueryCompletedEventArgs args, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class Microsoft.SqlServer.Management.Smo.ExecuteNonQueryThread : object {
    private ExecutionManager em;
    private StringCollection queries;
    private ServerMessageEventHandler dbccMessageHandler;
    private bool errorsAsMessages;
    private bool retry;
    public ExecuteNonQueryThread(ExecutionManager em, StringCollection queries, ServerMessageEventHandler dbccMessageHandler, bool errorsAsMessages);
    public ExecuteNonQueryThread(ExecutionManager em, StringCollection queries, ServerMessageEventHandler dbccMessageHandler, bool errorsAsMessages, bool retry);
    public void Start();
    private void ThreadProc();
}
public class Microsoft.SqlServer.Management.Smo.ExecutionManager : object {
    private ServerConnection m_conctx;
    private SqlSmoObject m_parent;
    private StringCollection m_ServerMessages;
    private EventHandler beforeExecuteSql;
    private ExecuteNonQueryCompletedEventHandler executeNonQueryCompleted;
    private AutoResetEvent asyncWaitHandle;
    public ServerConnection ConnectionContext { get; }
    internal SqlSmoObject Parent { get; internal set; }
    internal AutoResetEvent AsyncWaitHandle { get; }
    internal bool Recording { get; }
    internal string TrueServerName { get; }
    internal ExecutionManager(string name);
    internal ExecutionManager(ServerConnection cc);
    public ServerConnection get_ConnectionContext();
    internal SqlSmoObject get_Parent();
    internal void set_Parent(SqlSmoObject value);
    internal DataTable GetEnumeratorData(Request req);
    internal IDataReader GetEnumeratorDataReader(Request req);
    internal ObjectInfo GetEnumeratorInfo(RequestObjectInfo roi);
    internal DependencyChainCollection GetDependencies(DependencyRequest dependencyRequest);
    private void OnServerMessage(object sender, ServerMessageEventArgs e);
    internal void add_BeforeExecuteSql(EventHandler value);
    internal void remove_BeforeExecuteSql(EventHandler value);
    internal void add_ExecuteNonQueryCompleted(ExecuteNonQueryCompletedEventHandler value);
    internal void remove_ExecuteNonQueryCompleted(ExecuteNonQueryCompletedEventHandler value);
    internal void OnExecuteNonQueryCompleted(ExecuteNonQueryCompletedEventArgs args);
    internal AutoResetEvent get_AsyncWaitHandle();
    internal void ExecuteNonQuery(StringCollection queries, ExecutionTypes executionType);
    internal void ExecuteNonQuery(string sqlCommand, ExecutionTypes executionType);
    internal StringCollection ExecuteNonQueryWithMessage(StringCollection queries);
    internal void ExecuteNonQueryWithMessage(StringCollection queries, ServerMessageEventHandler dbccMessageHandler);
    internal void ExecuteNonQueryWithMessage(StringCollection queries, ServerMessageEventHandler dbccMessageHandler, bool errorsAsMessages);
    internal void ExecuteNonQueryWithMessage(StringCollection queries, ServerMessageEventHandler dbccMessageHandler, bool errorsAsMessages, bool retry);
    internal DataSet ExecuteWithResultsAndMessages(string cmd, ServerMessageEventHandler dbccMessageHandler, bool errorsAsMessages);
    internal DataSet ExecuteWithResultsAndMessages(string cmd, ServerMessageEventHandler dbccMessageHandler, bool errorsAsMessages, bool retry);
    internal void ExecuteNonQueryWithMessageAsync(StringCollection queries, ServerMessageEventHandler dbccMessageHandler, bool errorsAsMessages);
    internal void ExecuteNonQueryWithMessageAsync(StringCollection queries, ServerMessageEventHandler dbccMessageHandler, bool errorsAsMessages, bool retry);
    internal void ExecuteNonQuery(StringCollection queries);
    internal void ExecuteNonQuery(StringCollection queries, bool retry);
    internal void ExecuteNonQueryAsync(StringCollection queries);
    internal void ExecuteNonQueryAsync(StringCollection queries, bool retry);
    internal void ExecuteNonQuery(string cmd);
    internal void ExecuteNonQuery(string cmd, bool retry);
    internal DataSet ExecuteWithResults(StringCollection query);
    internal DataSet ExecuteWithResults(string query);
    internal DataSet ExecuteWithResults(string query, bool retry);
    internal Object[] ExecuteScalar(StringCollection query);
    internal object ExecuteScalar(string query);
    internal bool get_Recording();
    internal Version GetProductVersion();
    internal ServerVersion GetServerVersion();
    internal DatabaseEngineType GetDatabaseEngineType();
    internal DatabaseEngineEdition GetDatabaseEngineEdition();
    internal NetworkProtocol GetConnectionProtocol();
    internal bool IsCurrentConnectionStandardLogin(string name);
    internal string get_TrueServerName();
    internal void Abort();
    private void DumpTraceString(string s);
}
public enum Microsoft.SqlServer.Management.Smo.ExecutionStatus : Enum {
    public int value__;
    public static ExecutionStatus Inactive;
    public static ExecutionStatus InProgress;
    public static ExecutionStatus Succeeded;
    public static ExecutionStatus Failed;
}
[SfcElementAttribute("48")]
public class Microsoft.SqlServer.Management.Smo.ExtendedProperty : ScriptNameObjectBase {
    public static string UrnSuffix { get; }
    [SfcPropertyAttribute("1024")]
public object Value { get; public set; }
    [SfcObjectAttribute("1")]
[SfcParentAttribute("Database")]
[SfcParentAttribute("SqlAssembly")]
[SfcParentAttribute("UserDefinedAggregate")]
[SfcParentAttribute("UserDefinedAggregateParameter")]
[SfcParentAttribute("UserDefinedType")]
[SfcParentAttribute("PlanGuide")]
[SfcParentAttribute("User")]
[SfcParentAttribute("Schema")]
[SfcParentAttribute("DatabaseRole")]
[SfcParentAttribute("ApplicationRole")]
[SfcParentAttribute("Table")]
[SfcParentAttribute("Column")]
[SfcParentAttribute("Trigger")]
[SfcParentAttribute("Check")]
[SfcParentAttribute("Index")]
[SfcParentAttribute("ForeignKey")]
[SfcParentAttribute("Default")]
[SfcParentAttribute("Rule")]
[SfcParentAttribute("Synonym")]
[SfcParentAttribute("Sequence")]
[SfcParentAttribute("StoredProcedure")]
[SfcParentAttribute("StoredProcedureParameter")]
[SfcParentAttribute("NumberedStoredProcedureParameter")]
[SfcParentAttribute("ExtendedStoredProcedure")]
[SfcParentAttribute("UserDefinedDataType")]
[SfcParentAttribute("UserDefinedTableType")]
[SfcParentAttribute("UserDefinedFunction")]
[SfcParentAttribute("UserDefinedFunctionParameter")]
[SfcParentAttribute("View")]
[SfcParentAttribute("XmlSchemaCollection")]
[SfcParentAttribute("PartitionFunction")]
[SfcParentAttribute("PartitionScheme")]
[SfcParentAttribute("DatabaseDdlTrigger")]
[SfcParentAttribute("SecurityPolicy")]
public SqlSmoObject Parent { get; public set; }
    internal ExtendedProperty(AbstractCollectionBase parentColl, ObjectKeyBase key, SqlSmoState state);
    public ExtendedProperty(SqlSmoObject parent, string name, object propertyValue);
    public ExtendedProperty(SqlSmoObject parent, string name);
    public static string get_UrnSuffix();
    protected internal virtual string GetDBName();
    private string GetParams(SqlSmoObject objParent, ScriptingPreferences sp);
    public sealed virtual void Create();
    private string GetPrefix(ScriptingPreferences sp);
    private string GetIfNotExistString(bool bCreate, string name, string param);
    internal virtual void ScriptCreate(StringCollection queries, ScriptingPreferences sp);
    public sealed virtual void Drop();
    public sealed virtual void DropIfExists();
    internal virtual void ScriptDrop(StringCollection queries, ScriptingPreferences sp);
    public sealed virtual void Alter();
    internal virtual void ScriptAlter(StringCollection alterQuery, ScriptingPreferences sp);
    internal virtual void ScriptCreateOrAlter(StringCollection queries, ScriptingPreferences sp);
    private void GetScriptCreate(StringBuilder sb, ScriptingPreferences sp, ScriptingParameters parameters, object value, bool isDateTime);
    private void GetScriptAlter(StringBuilder sb, ScriptingPreferences sp, object value, bool isDateTime);
    public sealed virtual void MarkForDrop(bool dropOnAlter);
    public sealed virtual StringCollection Script();
    public sealed virtual StringCollection Script(ScriptingOptions scriptingOptions);
    public object get_Value();
    public void set_Value(object value);
    internal static String[] GetScriptFields(Type parentType, ServerVersion version, DatabaseEngineType databaseEngineType, DatabaseEngineEdition databaseEngineEdition, bool defaultTextMode);
    public sealed virtual void CreateOrAlter();
    public SqlSmoObject get_Parent();
    public void set_Parent(SqlSmoObject value);
    internal virtual SqlPropertyMetadataProvider GetPropertyMetadataProvider();
}
[DefaultMemberAttribute("Item")]
public class Microsoft.SqlServer.Management.Smo.ExtendedPropertyCollection : SimpleObjectCollectionBase {
    public SqlSmoObject Parent { get; }
    public ExtendedProperty Item { get; }
    public ExtendedProperty Item { get; }
    internal ExtendedPropertyCollection(SqlSmoObject parentInstance);
    public SqlSmoObject get_Parent();
    public ExtendedProperty get_Item(int index);
    public ExtendedProperty get_Item(string name);
    public void CopyTo(ExtendedProperty[] array, int index);
    protected virtual Type GetCollectionElementType();
    internal virtual SqlSmoObject GetCollectionElementInstance(ObjectKeyBase key, SqlSmoState state);
    public void Remove(ExtendedProperty extendedProperty);
    public void Remove(string name);
    public void Add(ExtendedProperty extendedProperty);
    internal SqlSmoObject GetObjectByName(string name);
    internal virtual ObjectKeyBase CreateKeyFromUrn(Urn urn);
}
[SfcElementAttribute("48")]
public class Microsoft.SqlServer.Management.Smo.ExtendedStoredProcedure : ScriptSchemaObjectBase {
    [SfcObjectAttribute("1", "0", "Microsoft.SqlServer.Management.Smo.ExtendedProperty")]
public ExtendedPropertyCollection ExtendedProperties { get; }
    public static string UrnSuffix { get; }
    [SfcObjectAttribute("1")]
public Database Parent { get; public set; }
    internal UserPermissionCollection Permissions { get; }
    [SfcPropertyAttribute("3072")]
public DateTime CreateDate { get; }
    [SfcPropertyAttribute("3072")]
public DateTime DateLastModified { get; }
    [SfcPropertyAttribute("3328")]
public string DllLocation { get; public set; }
    [SfcPropertyAttribute("3072")]
public int ID { get; }
    [SfcPropertyAttribute("7168")]
public bool IsSchemaOwned { get; }
    [SfcPropertyAttribute("3072")]
public bool IsSystemObject { get; }
    [SfcPropertyAttribute("7168")]
public string Owner { get; public set; }
    internal ExtendedStoredProcedure(AbstractCollectionBase parentColl, ObjectKeyBase key, SqlSmoState state);
    public ExtendedStoredProcedure(Database database, string name);
    public ExtendedStoredProcedure(Database database, string name, string schema);
    public void ChangeSchema(string newSchema);
    public sealed virtual ExtendedPropertyCollection get_ExtendedProperties();
    public static string get_UrnSuffix();
    public sealed virtual void Create();
    internal virtual void ScriptCreate(StringCollection queries, ScriptingPreferences sp);
    public sealed virtual void Drop();
    internal virtual void ScriptDrop(StringCollection queries, ScriptingPreferences sp);
    internal virtual PropagateInfo[] GetPropagateInfo(PropagateAction action);
    public sealed virtual void Alter();
    internal virtual void ScriptAlter(StringCollection alterQuery, ScriptingPreferences sp);
    internal static String[] GetScriptFields(Type parentType, ServerVersion version, DatabaseEngineType databaseEngineType, DatabaseEngineEdition databaseEngineEdition, bool defaultTextMode);
    public Database get_Parent();
    public void set_Parent(Database value);
    internal virtual UserPermissionCollection get_Permissions();
    internal virtual SqlPropertyMetadataProvider GetPropertyMetadataProvider();
    public DateTime get_CreateDate();
    public DateTime get_DateLastModified();
    public string get_DllLocation();
    public void set_DllLocation(string value);
    public int get_ID();
    public bool get_IsSchemaOwned();
    public bool get_IsSystemObject();
    public string get_Owner();
    public void set_Owner(string value);
    internal virtual String[] GetNonAlterableProperties();
    public sealed virtual void Deny(ObjectPermissionSet permission, String[] granteeNames);
    public sealed virtual void Deny(ObjectPermissionSet permission, String[] granteeNames, bool cascade);
    public sealed virtual void Grant(ObjectPermissionSet permission, String[] granteeNames);
    public sealed virtual void Grant(ObjectPermissionSet permission, String[] granteeNames, bool grantGrant);
    public sealed virtual void Grant(ObjectPermissionSet permission, String[] granteeNames, bool grantGrant, string asRole);
    public sealed virtual void Revoke(ObjectPermissionSet permission, String[] granteeNames);
    public sealed virtual void Revoke(ObjectPermissionSet permission, String[] granteeNames, bool revokeGrant, bool cascade);
    public void Revoke(ObjectPermissionSet permission, String[] granteeNames, bool revokeGrant, bool cascade, string asRole);
    public sealed virtual void Deny(ObjectPermissionSet permission, string granteeName);
    public sealed virtual void Deny(ObjectPermissionSet permission, string granteeName, bool cascade);
    public sealed virtual void Grant(ObjectPermissionSet permission, string granteeName);
    public sealed virtual void Grant(ObjectPermissionSet permission, string granteeName, bool grantGrant);
    public sealed virtual void Grant(ObjectPermissionSet permission, string granteeName, bool grantGrant, string asRole);
    public sealed virtual void Revoke(ObjectPermissionSet permission, string granteeName);
    public void Revoke(ObjectPermissionSet permission, string granteeName, bool revokeGrant, bool cascade);
    public sealed virtual void Revoke(ObjectPermissionSet permission, string granteeName, bool revokeGrant, bool cascade, string asRole);
    public sealed virtual ObjectPermissionInfo[] EnumObjectPermissions();
    public sealed virtual ObjectPermissionInfo[] EnumObjectPermissions(string granteeName);
    public sealed virtual ObjectPermissionInfo[] EnumObjectPermissions(ObjectPermissionSet permissions);
    public sealed virtual ObjectPermissionInfo[] EnumObjectPermissions(string granteeName, ObjectPermissionSet permissions);
}
[DefaultMemberAttribute("Item")]
public class Microsoft.SqlServer.Management.Smo.ExtendedStoredProcedureCollection : SchemaCollectionBase {
    public Database Parent { get; }
    public ExtendedStoredProcedure Item { get; }
    public ExtendedStoredProcedure Item { get; }
    public ExtendedStoredProcedure Item { get; }
    internal ExtendedStoredProcedureCollection(SqlSmoObject parentInstance);
    public Database get_Parent();
    public ExtendedStoredProcedure get_Item(int index);
    public ExtendedStoredProcedure get_Item(string name);
    public ExtendedStoredProcedure get_Item(string name, string schema);
    public void CopyTo(ExtendedStoredProcedure[] array, int index);
    public ExtendedStoredProcedure ItemById(int id);
    protected virtual Type GetCollectionElementType();
    internal virtual SqlSmoObject GetCollectionElementInstance(ObjectKeyBase key, SqlSmoState state);
    public void Add(ExtendedStoredProcedure extendedStoredProcedure);
    internal SqlSmoObject GetObjectByName(string name);
}
[ExtensionAttribute]
internal static class Microsoft.SqlServer.Management.Smo.ExtensionClass : object {
    [ExtensionAttribute]
internal static void AddCollection(StringCollection strcol1, StringCollection strcol2);
    [ExtensionAttribute]
internal static void AddCollection(StringCollection collection, IEnumerable`1<string> enumerableString);
}
[SfcElementAttribute("48")]
public class Microsoft.SqlServer.Management.Smo.ExternalDataSource : NamedSmoObject {
    private static string ExternalDataSourceLocationWasb;
    private static string ExternalDataSourceLocationAsv;
    public static string UrnSuffix { get; }
    [SfcObjectAttribute("1", "32")]
public Database Parent { get; public set; }
    private bool Microsoft.SqlServer.Management.Sdk.Sfc.ISfcSupportsDesignMode.IsDesignMode { get; }
    [SfcPropertyAttribute("1024")]
public string ConnectionOptions { get; }
    [SfcPropertyAttribute("3072")]
[SfcReferenceAttribute("Microsoft.SqlServer.Management.Smo.Credential", "Server[@Name = '{0}']/Database[@Name = '{1}']/Credential[@Name = '{2}']", "Mono.Cecil.CustomAttributeArgument[]")]
[CLSCompliantAttribute("False")]
public string Credential { get; public set; }
    [SfcPropertyAttribute("3072")]
public ExternalDataSourceType DataSourceType { get; public set; }
    [SfcPropertyAttribute("3072")]
public int ID { get; }
    [SfcPropertyAttribute("3072")]
public string Location { get; public set; }
    [SfcPropertyAttribute("1024")]
public ExternalDataSourcePushdownOption PushdownOption { get; }
    [SfcPropertyAttribute("1024")]
public string ResourceManagerLocation { get; public set; }
    [SfcPropertyAttribute("2048")]
public string DatabaseName { get; public set; }
    [SfcPropertyAttribute("2048")]
public string ShardMapName { get; public set; }
    internal ExternalDataSource(AbstractCollectionBase parentColl, ObjectKeyBase key, SqlSmoState state);
    public ExternalDataSource(Database parent, string name, ExternalDataSourceType dataSourceType, string location);
    public ExternalDataSource(Database database, string name);
    public sealed virtual void Alter();
    public sealed virtual void Create();
    public sealed virtual void Drop();
    public void DropIfExists();
    public sealed virtual StringCollection Script();
    public sealed virtual StringCollection Script(ScriptingOptions scriptingOptions);
    public static string get_UrnSuffix();
    internal virtual void ScriptDrop(StringCollection dropQuery, ScriptingPreferences sp);
    internal virtual void ScriptCreate(StringCollection createQuery, ScriptingPreferences sp);
    internal virtual void ScriptAlter(StringCollection alterQuery, ScriptingPreferences sp);
    private void ValidatePropertySet(string propertyName, ScriptingPreferences sp);
    private void ValidatePropertyUnset(string propertyName, ExternalDataSourceType dataSourceType, ScriptingPreferences sp);
    private void ValidateResourceManagerLocation(string externalDataSourceResourceManagerLocaiton, string externalDataSourceLocation);
    internal static String[] GetScriptFields(Type parentType, ServerVersion version, DatabaseEngineType databaseEngineType, DatabaseEngineEdition databaseEngineEdition, bool defaultTextMode);
    public Database get_Parent();
    public void set_Parent(Database value);
    private sealed virtual override bool Microsoft.SqlServer.Management.Sdk.Sfc.ISfcSupportsDesignMode.get_IsDesignMode();
    internal virtual SqlPropertyMetadataProvider GetPropertyMetadataProvider();
    public string get_ConnectionOptions();
    public string get_Credential();
    public void set_Credential(string value);
    public ExternalDataSourceType get_DataSourceType();
    public void set_DataSourceType(ExternalDataSourceType value);
    public int get_ID();
    public string get_Location();
    public void set_Location(string value);
    public ExternalDataSourcePushdownOption get_PushdownOption();
    public string get_ResourceManagerLocation();
    public void set_ResourceManagerLocation(string value);
    public string get_DatabaseName();
    public void set_DatabaseName(string value);
    public string get_ShardMapName();
    public void set_ShardMapName(string value);
}
[DefaultMemberAttribute("Item")]
public class Microsoft.SqlServer.Management.Smo.ExternalDataSourceCollection : SimpleObjectCollectionBase {
    public Database Parent { get; }
    public ExternalDataSource Item { get; }
    public ExternalDataSource Item { get; }
    internal ExternalDataSourceCollection(SqlSmoObject parentInstance);
    public Database get_Parent();
    public ExternalDataSource get_Item(int index);
    public ExternalDataSource get_Item(string name);
    public void CopyTo(ExternalDataSource[] array, int index);
    public ExternalDataSource ItemById(int id);
    protected virtual Type GetCollectionElementType();
    internal virtual SqlSmoObject GetCollectionElementInstance(ObjectKeyBase key, SqlSmoState state);
    public void Add(ExternalDataSource externalDataSource);
    internal SqlSmoObject GetObjectByName(string name);
    internal virtual ObjectKeyBase CreateKeyFromUrn(Urn urn);
}
[SfcElementAttribute("48")]
public class Microsoft.SqlServer.Management.Smo.ExternalFileFormat : NamedSmoObject {
    private static string FirstRowName;
    private static string FormatTypePropertyName;
    public static string UrnSuffix { get; }
    [SfcObjectAttribute("1", "32")]
public Database Parent { get; public set; }
    private bool Microsoft.SqlServer.Management.Sdk.Sfc.ISfcSupportsDesignMode.IsDesignMode { get; }
    [SfcPropertyAttribute("3072")]
public string DataCompression { get; public set; }
    [SfcPropertyAttribute("3072")]
public string DateFormat { get; public set; }
    [SfcPropertyAttribute("3072")]
public string Encoding { get; }
    [SfcPropertyAttribute("3072")]
public string FieldTerminator { get; public set; }
    [SfcPropertyAttribute("3072")]
public ExternalFileFormatType FormatType { get; public set; }
    [SfcPropertyAttribute("3072")]
public int ID { get; }
    [SfcPropertyAttribute("3072")]
public string RowTerminator { get; }
    [SfcPropertyAttribute("3072")]
public string SerDeMethod { get; public set; }
    [SfcPropertyAttribute("3072")]
public string StringDelimiter { get; public set; }
    [SfcPropertyAttribute("3072")]
public bool UseTypeDefault { get; public set; }
    [SfcPropertyAttribute("2304")]
public int FirstRow { get; public set; }
    internal ExternalFileFormat(AbstractCollectionBase parentColl, ObjectKeyBase key, SqlSmoState state);
    public ExternalFileFormat(Database parent, string name, ExternalFileFormatType formatType);
    public ExternalFileFormat(Database database, string name);
    public sealed virtual void Create();
    public sealed virtual void Drop();
    public void DropIfExists();
    public sealed virtual StringCollection Script();
    public sealed virtual StringCollection Script(ScriptingOptions scriptingOptions);
    public static string get_UrnSuffix();
    internal virtual void ScriptDrop(StringCollection dropQuery, ScriptingPreferences sp);
    internal virtual void ScriptCreate(StringCollection createQuery, ScriptingPreferences sp);
    private void AddPropertyToScript(string propertyValue, string sqlString, StringBuilder fileFormatOptions);
    private bool IsPropertyDefaultValue(Property prop, T value, List`1<T> defaultValues);
    private void ProcessOptionalProperties(ExternalFileFormatType externalFileFormatType, StringBuilder script, ScriptingPreferences sp);
    private void ValidateOptionalProperty(string propertyName, string sqlString, List`1<T> defaultValues, StringBuilder fileFormatOptions, ScriptingPreferences sp, bool quotePropertyValue);
    private void ValidateOrcParquetJsonOrDeltaProperties(StringBuilder script, ScriptingPreferences sp);
    private void ValidateProperty(string propertyName, ScriptingPreferences sp);
    private void ValidateRcFileProperties(StringBuilder script, ScriptingPreferences sp);
    internal static String[] GetScriptFields(Type parentType, ServerVersion version, DatabaseEngineType databaseEngineType, DatabaseEngineEdition databaseEngineEdition, bool defaultTextMode);
    public Database get_Parent();
    public void set_Parent(Database value);
    private sealed virtual override bool Microsoft.SqlServer.Management.Sdk.Sfc.ISfcSupportsDesignMode.get_IsDesignMode();
    internal virtual SqlPropertyMetadataProvider GetPropertyMetadataProvider();
    public string get_DataCompression();
    public void set_DataCompression(string value);
    public string get_DateFormat();
    public void set_DateFormat(string value);
    public string get_Encoding();
    public string get_FieldTerminator();
    public void set_FieldTerminator(string value);
    public ExternalFileFormatType get_FormatType();
    public void set_FormatType(ExternalFileFormatType value);
    public int get_ID();
    public string get_RowTerminator();
    public string get_SerDeMethod();
    public void set_SerDeMethod(string value);
    public string get_StringDelimiter();
    public void set_StringDelimiter(string value);
    public bool get_UseTypeDefault();
    public void set_UseTypeDefault(bool value);
    public int get_FirstRow();
    public void set_FirstRow(int value);
    internal virtual String[] GetNonAlterableProperties();
}
[DefaultMemberAttribute("Item")]
public class Microsoft.SqlServer.Management.Smo.ExternalFileFormatCollection : SimpleObjectCollectionBase {
    public Database Parent { get; }
    public ExternalFileFormat Item { get; }
    public ExternalFileFormat Item { get; }
    internal ExternalFileFormatCollection(SqlSmoObject parentInstance);
    public Database get_Parent();
    public ExternalFileFormat get_Item(int index);
    public ExternalFileFormat get_Item(string name);
    public void CopyTo(ExternalFileFormat[] array, int index);
    public ExternalFileFormat ItemById(int id);
    protected virtual Type GetCollectionElementType();
    internal virtual SqlSmoObject GetCollectionElementInstance(ObjectKeyBase key, SqlSmoState state);
    public void Add(ExternalFileFormat externalFileFormat);
    internal SqlSmoObject GetObjectByName(string name);
    internal virtual ObjectKeyBase CreateKeyFromUrn(Urn urn);
}
[SfcElementAttribute("16")]
public class Microsoft.SqlServer.Management.Smo.ExternalLanguage : NamedSmoObject {
    private HashSet`1<ExternalLanguageFilePlatform> toBeRemovedPlatforms;
    private ExternalLanguageFileCollection m_ExternalLanguageFiles;
    public static string UrnSuffix { get; }
    [SfcObjectAttribute("1", "0", "Microsoft.SqlServer.Management.Smo.ExtendedProperty")]
public ExtendedPropertyCollection ExtendedProperties { get; }
    [SfcObjectAttribute("1", "0", "Microsoft.SqlServer.Management.Smo.ExternalLanguageFile")]
public ExternalLanguageFileCollection ExternalLanguageFiles { get; }
    [SfcObjectAttribute("1")]
public Database Parent { get; public set; }
    internal UserPermissionCollection Permissions { get; }
    private bool Microsoft.SqlServer.Management.Sdk.Sfc.ISfcSupportsDesignMode.IsDesignMode { get; }
    [SfcPropertyAttribute("1024")]
public int ID { get; }
    [SfcPropertyAttribute("1024", "false")]
public bool IsSystemObject { get; }
    [SfcPropertyAttribute("1024")]
[SfcReferenceAttribute("Microsoft.SqlServer.Management.Smo.User", "Server[@Name = '{0}']/Database[@Name = '{1}']/User[@Name = '{2}']", "Mono.Cecil.CustomAttributeArgument[]")]
[CLSCompliantAttribute("False")]
public string Owner { get; public set; }
    internal ExternalLanguage(AbstractCollectionBase parentColl, ObjectKeyBase key, SqlSmoState state);
    public ExternalLanguage(Database database, string name);
    public static string get_UrnSuffix();
    public sealed virtual ExtendedPropertyCollection get_ExtendedProperties();
    internal virtual PropagateInfo[] GetPropagateInfo(PropagateAction action);
    public ExternalLanguageFileCollection get_ExternalLanguageFiles();
    public void AddFile(string fileName, Byte[] contentFromBinary, ExternalLanguageFilePlatform platform);
    public void AddFile(string fileName, string contentFromFile, ExternalLanguageFilePlatform platform);
    public void RemoveFile(ExternalLanguageFilePlatform platform);
    public sealed virtual void Create();
    protected virtual void PostCreate();
    internal virtual void ScriptCreate(StringCollection queries, ScriptingPreferences sp);
    public sealed virtual void Drop();
    public sealed virtual void DropIfExists();
    internal virtual void ScriptDrop(StringCollection dropQuery, ScriptingPreferences sp);
    public sealed virtual void Alter();
    internal virtual void ScriptAlter(StringCollection alterQuery, ScriptingPreferences sp);
    protected virtual void PostAlter();
    private void AddFile(string fileName, ExternalLanguageFilePlatform platform, Byte[] contentFromBinary, string contentFromFile);
    private static string GenerateContentAndFileNameString(string contentFromFile, string contentFromBinary, string fileName, ExternalLanguageFilePlatform platform);
    private static string IncludeExistsExternalLanguage(bool exists, string name);
    private static string GetPlatformDescription(ExternalLanguageFilePlatform platform);
    private static string ConvertBinaryToString(Byte[] fileBytes);
    public sealed virtual StringCollection Script();
    public sealed virtual StringCollection Script(ScriptingOptions scriptingOptions);
    protected virtual void MarkDropped();
    public virtual void Refresh();
    internal static String[] GetScriptFields(Type parentType, ServerVersion version, DatabaseEngineType databaseEngineType, DatabaseEngineEdition databaseEngineEdition, bool defaultTextMode);
    public Database get_Parent();
    public void set_Parent(Database value);
    internal virtual UserPermissionCollection get_Permissions();
    private sealed virtual override bool Microsoft.SqlServer.Management.Sdk.Sfc.ISfcSupportsDesignMode.get_IsDesignMode();
    internal virtual SqlPropertyMetadataProvider GetPropertyMetadataProvider();
    public int get_ID();
    public bool get_IsSystemObject();
    public string get_Owner();
    public void set_Owner(string value);
    internal virtual object GetPropertyDefaultValue(string propname);
    public sealed virtual void Deny(ObjectPermissionSet permission, String[] granteeNames);
    public sealed virtual void Deny(ObjectPermissionSet permission, String[] granteeNames, bool cascade);
    public sealed virtual void Grant(ObjectPermissionSet permission, String[] granteeNames);
    public sealed virtual void Grant(ObjectPermissionSet permission, String[] granteeNames, bool grantGrant);
    public sealed virtual void Grant(ObjectPermissionSet permission, String[] granteeNames, bool grantGrant, string asRole);
    public sealed virtual void Revoke(ObjectPermissionSet permission, String[] granteeNames);
    public sealed virtual void Revoke(ObjectPermissionSet permission, String[] granteeNames, bool revokeGrant, bool cascade);
    public void Revoke(ObjectPermissionSet permission, String[] granteeNames, bool revokeGrant, bool cascade, string asRole);
    public sealed virtual void Deny(ObjectPermissionSet permission, string granteeName);
    public sealed virtual void Deny(ObjectPermissionSet permission, string granteeName, bool cascade);
    public sealed virtual void Grant(ObjectPermissionSet permission, string granteeName);
    public sealed virtual void Grant(ObjectPermissionSet permission, string granteeName, bool grantGrant);
    public sealed virtual void Grant(ObjectPermissionSet permission, string granteeName, bool grantGrant, string asRole);
    public sealed virtual void Revoke(ObjectPermissionSet permission, string granteeName);
    public void Revoke(ObjectPermissionSet permission, string granteeName, bool revokeGrant, bool cascade);
    public sealed virtual void Revoke(ObjectPermissionSet permission, string granteeName, bool revokeGrant, bool cascade, string asRole);
    public sealed virtual ObjectPermissionInfo[] EnumObjectPermissions();
    public sealed virtual ObjectPermissionInfo[] EnumObjectPermissions(string granteeName);
    public sealed virtual ObjectPermissionInfo[] EnumObjectPermissions(ObjectPermissionSet permissions);
    public sealed virtual ObjectPermissionInfo[] EnumObjectPermissions(string granteeName, ObjectPermissionSet permissions);
}
[DefaultMemberAttribute("Item")]
public class Microsoft.SqlServer.Management.Smo.ExternalLanguageCollection : SimpleObjectCollectionBase {
    public Database Parent { get; }
    public ExternalLanguage Item { get; }
    public ExternalLanguage Item { get; }
    internal ExternalLanguageCollection(SqlSmoObject parentInstance);
    public Database get_Parent();
    public ExternalLanguage get_Item(int index);
    public ExternalLanguage get_Item(string name);
    public void CopyTo(ExternalLanguage[] array, int index);
    public ExternalLanguage ItemById(int id);
    protected virtual Type GetCollectionElementType();
    internal virtual SqlSmoObject GetCollectionElementInstance(ObjectKeyBase key, SqlSmoState state);
    public void Remove(ExternalLanguage externalLanguage);
    public void Remove(string name);
    public void Add(ExternalLanguage externalLanguage);
    internal SqlSmoObject GetObjectByName(string name);
    internal virtual ObjectKeyBase CreateKeyFromUrn(Urn urn);
}
[SfcElementAttribute("16")]
public class Microsoft.SqlServer.Management.Smo.ExternalLanguageFile : ScriptNameObjectBase {
    public static string UrnSuffix { get; }
    [SfcObjectAttribute("1")]
public ExternalLanguage Parent { get; public set; }
    private bool Microsoft.SqlServer.Management.Sdk.Sfc.ISfcSupportsDesignMode.IsDesignMode { get; }
    [SfcPropertyAttribute("1024")]
public Byte[] ContentFromBinary { get; public set; }
    [SfcPropertyAttribute("1024")]
public string ContentFromFile { get; public set; }
    [SfcPropertyAttribute("1024")]
public string EnvironmentVariables { get; }
    [SfcPropertyAttribute("1024")]
public string FileName { get; public set; }
    [SfcPropertyAttribute("1024")]
public bool IsSystemNamed { get; }
    [SfcPropertyAttribute("1024")]
public string Parameters { get; }
    [SfcPropertyAttribute("1024")]
public ExternalLanguageFilePlatform Platform { get; public set; }
    internal ExternalLanguageFile(AbstractCollectionBase parentColl, ObjectKeyBase key, SqlSmoState state);
    public ExternalLanguageFile(ExternalLanguage externalLanguage, string name);
    public static string get_UrnSuffix();
    public Byte[] GetFileBytes();
    public string GetFileName();
    public string GetFileText();
    internal static String[] GetScriptFields(Type parentType, ServerVersion version, DatabaseEngineType databaseEngineType, DatabaseEngineEdition databaseEngineEdition, bool defaultTextMode);
    public ExternalLanguage get_Parent();
    public void set_Parent(ExternalLanguage value);
    private sealed virtual override bool Microsoft.SqlServer.Management.Sdk.Sfc.ISfcSupportsDesignMode.get_IsDesignMode();
    internal virtual SqlPropertyMetadataProvider GetPropertyMetadataProvider();
    public Byte[] get_ContentFromBinary();
    public void set_ContentFromBinary(Byte[] value);
    public string get_ContentFromFile();
    public void set_ContentFromFile(string value);
    public string get_EnvironmentVariables();
    public string get_FileName();
    public void set_FileName(string value);
    public bool get_IsSystemNamed();
    public string get_Parameters();
    public ExternalLanguageFilePlatform get_Platform();
    public void set_Platform(ExternalLanguageFilePlatform value);
}
[DefaultMemberAttribute("Item")]
public class Microsoft.SqlServer.Management.Smo.ExternalLanguageFileCollection : SimpleObjectCollectionBase {
    public ExternalLanguage Parent { get; }
    public ExternalLanguageFile Item { get; }
    public ExternalLanguageFile Item { get; }
    internal ExternalLanguageFileCollection(SqlSmoObject parentInstance);
    public ExternalLanguage get_Parent();
    public ExternalLanguageFile get_Item(int index);
    public ExternalLanguageFile get_Item(string name);
    public void CopyTo(ExternalLanguageFile[] array, int index);
    public ExternalLanguageFile ItemById(int id);
    protected virtual Type GetCollectionElementType();
    internal virtual SqlSmoObject GetCollectionElementInstance(ObjectKeyBase key, SqlSmoState state);
    public void Remove(ExternalLanguageFile externalLanguageFile);
    public void Remove(string name);
    public void Add(ExternalLanguageFile externalLanguageFile);
    internal SqlSmoObject GetObjectByName(string name);
    internal virtual ObjectKeyBase CreateKeyFromUrn(Urn urn);
}
[SfcElementAttribute("16")]
public class Microsoft.SqlServer.Management.Smo.ExternalLibrary : ScriptNameObjectBase {
    private string libraryContent;
    private ExternalLibraryContentType libraryContentType;
    private ExternalLibraryFile externalLibraryFile;
    public static string UrnSuffix { get; }
    [SfcObjectAttribute("1", "0", "Microsoft.SqlServer.Management.Smo.ExtendedProperty")]
public ExtendedPropertyCollection ExtendedProperties { get; }
    [SfcObjectAttribute("2", "0")]
public ExternalLibraryFile ExternalLibraryFile { get; }
    [SfcObjectAttribute("1")]
public Database Parent { get; public set; }
    private bool Microsoft.SqlServer.Management.Sdk.Sfc.ISfcSupportsDesignMode.IsDesignMode { get; }
    [SfcPropertyAttribute("1024")]
public string ExternalLibraryLanguage { get; public set; }
    [SfcPropertyAttribute("1024")]
public int ID { get; }
    [SfcPropertyAttribute("1024")]
[SfcReferenceAttribute("Microsoft.SqlServer.Management.Smo.User", "Server[@Name = '{0}']/Database[@Name = '{1}']/User[@Name = '{2}']", "Mono.Cecil.CustomAttributeArgument[]")]
[CLSCompliantAttribute("False")]
public string Owner { get; public set; }
    internal ExternalLibrary(AbstractCollectionBase parentColl, ObjectKeyBase key, SqlSmoState state);
    public ExternalLibrary(Database database, string name);
    private void Init();
    public static string get_UrnSuffix();
    public sealed virtual ExtendedPropertyCollection get_ExtendedProperties();
    internal virtual PropagateInfo[] GetPropagateInfo(PropagateAction action);
    public ExternalLibraryFile get_ExternalLibraryFile();
    public void Create(string libraryContent, ExternalLibraryContentType contentType);
    public void Create();
    internal virtual void ScriptCreate(StringCollection queries, ScriptingPreferences sp);
    public sealed virtual void Drop();
    public sealed virtual void DropIfExists();
    internal virtual void ScriptDrop(StringCollection dropQuery, ScriptingPreferences sp);
    public sealed virtual void Alter();
    public void Alter(string libraryContent, ExternalLibraryContentType contentType);
    internal virtual void ScriptAlter(StringCollection alterQuery, ScriptingPreferences sp);
    private static string GenerateContentString(string content, ExternalLibraryContentType contentType);
    public sealed virtual StringCollection Script();
    public sealed virtual StringCollection Script(ScriptingOptions scriptingOptions);
    protected virtual bool IsObjectDirty();
    protected virtual void MarkDropped();
    internal static String[] GetScriptFields(Type parentType, ServerVersion version, DatabaseEngineType databaseEngineType, DatabaseEngineEdition databaseEngineEdition, bool defaultTextMode);
    public Database get_Parent();
    public void set_Parent(Database value);
    private sealed virtual override bool Microsoft.SqlServer.Management.Sdk.Sfc.ISfcSupportsDesignMode.get_IsDesignMode();
    internal virtual SqlPropertyMetadataProvider GetPropertyMetadataProvider();
    public string get_ExternalLibraryLanguage();
    public void set_ExternalLibraryLanguage(string value);
    public int get_ID();
    public string get_Owner();
    public void set_Owner(string value);
    public void Deny(ObjectPermissionSet permission, String[] granteeNames);
    public void Deny(ObjectPermissionSet permission, String[] granteeNames, bool cascade);
    public void Grant(ObjectPermissionSet permission, String[] granteeNames);
    public void Grant(ObjectPermissionSet permission, String[] granteeNames, bool grantGrant);
    public void Grant(ObjectPermissionSet permission, String[] granteeNames, bool grantGrant, string asRole);
    public void Revoke(ObjectPermissionSet permission, String[] granteeNames);
    public void Revoke(ObjectPermissionSet permission, String[] granteeNames, bool revokeGrant, bool cascade);
    public void Revoke(ObjectPermissionSet permission, String[] granteeNames, bool revokeGrant, bool cascade, string asRole);
    public void Deny(ObjectPermissionSet permission, string granteeName);
    public void Deny(ObjectPermissionSet permission, string granteeName, bool cascade);
    public void Grant(ObjectPermissionSet permission, string granteeName);
    public void Grant(ObjectPermissionSet permission, string granteeName, bool grantGrant);
    public void Grant(ObjectPermissionSet permission, string granteeName, bool grantGrant, string asRole);
    public void Revoke(ObjectPermissionSet permission, string granteeName);
    public void Revoke(ObjectPermissionSet permission, string granteeName, bool revokeGrant, bool cascade);
    public void Revoke(ObjectPermissionSet permission, string granteeName, bool revokeGrant, bool cascade, string asRole);
    public ObjectPermissionInfo[] EnumObjectPermissions();
    public ObjectPermissionInfo[] EnumObjectPermissions(string granteeName);
    public ObjectPermissionInfo[] EnumObjectPermissions(ObjectPermissionSet permissions);
    public ObjectPermissionInfo[] EnumObjectPermissions(string granteeName, ObjectPermissionSet permissions);
}
[DefaultMemberAttribute("Item")]
public class Microsoft.SqlServer.Management.Smo.ExternalLibraryCollection : SimpleObjectCollectionBase {
    public Database Parent { get; }
    public ExternalLibrary Item { get; }
    public ExternalLibrary Item { get; }
    internal ExternalLibraryCollection(SqlSmoObject parentInstance);
    public Database get_Parent();
    public ExternalLibrary get_Item(int index);
    public ExternalLibrary get_Item(string name);
    public void CopyTo(ExternalLibrary[] array, int index);
    public ExternalLibrary ItemById(int id);
    protected virtual Type GetCollectionElementType();
    internal virtual SqlSmoObject GetCollectionElementInstance(ObjectKeyBase key, SqlSmoState state);
    public void Add(ExternalLibrary externalLibrary);
    internal SqlSmoObject GetObjectByName(string name);
    internal virtual ObjectKeyBase CreateKeyFromUrn(Urn urn);
}
[SfcElementAttribute("16")]
public class Microsoft.SqlServer.Management.Smo.ExternalLibraryFile : ScriptNameObjectBase {
    [SfcObjectAttribute("1")]
public ExternalLibrary Parent { get; }
    public static string UrnSuffix { get; }
    internal ExternalLibraryFile(ExternalLibrary parent, ObjectKeyBase key, SqlSmoState state);
    public ExternalLibrary get_Parent();
    public static string get_UrnSuffix();
    public Byte[] GetFileBytes();
    public string GetFileText();
    protected sealed virtual void GetUrnRecursive(StringBuilder urnbuilder, UrnIdOption idOption);
    internal static String[] GetScriptFields(Type parentType, ServerVersion version, DatabaseEngineType databaseEngineType, DatabaseEngineEdition databaseEngineEdition, bool defaultTextMode);
    internal virtual SqlPropertyMetadataProvider GetPropertyMetadataProvider();
}
[SfcElementAttribute("16")]
public class Microsoft.SqlServer.Management.Smo.ExternalResourcePool : ScriptNameObjectBase {
    private ExternalResourcePoolAffinityInfo affinityInfo;
    [SfcKeyAttribute("0")]
[SfcPropertyAttribute("1280")]
public string Name { get; public set; }
    [SfcObjectAttribute("2", "0")]
public ExternalResourcePoolAffinityInfo ExternalResourcePoolAffinityInfo { get; }
    public static string UrnSuffix { get; }
    [SfcObjectAttribute("1")]
public ResourceGovernor Parent { get; public set; }
    private bool Microsoft.SqlServer.Management.Sdk.Sfc.ISfcSupportsDesignMode.IsDesignMode { get; }
    [SfcPropertyAttribute("1024")]
public int ID { get; }
    [SfcPropertyAttribute("1024")]
public bool IsSystemObject { get; }
    [SfcPropertyAttribute("1024")]
public int MaximumCpuPercentage { get; public set; }
    [SfcPropertyAttribute("1024")]
public int MaximumMemoryPercentage { get; public set; }
    [SfcPropertyAttribute("1024")]
public long MaximumProcesses { get; public set; }
    internal ExternalResourcePool(AbstractCollectionBase parentColl, ObjectKeyBase key, SqlSmoState state);
    public ExternalResourcePool(ResourceGovernor resourceGovernor, string name);
    public virtual string get_Name();
    public virtual void set_Name(string value);
    public ExternalResourcePoolAffinityInfo get_ExternalResourcePoolAffinityInfo();
    public sealed virtual void Create();
    public sealed virtual void Drop();
    public sealed virtual void DropIfExists();
    public sealed virtual void Alter();
    public sealed virtual StringCollection Script();
    public sealed virtual StringCollection Script(ScriptingOptions scriptingOptions);
    internal virtual void ScriptCreate(StringCollection queries, ScriptingPreferences sp);
    internal virtual void ScriptAlter(StringCollection queries, ScriptingPreferences sp);
    internal virtual void ScriptDrop(StringCollection queries, ScriptingPreferences sp);
    public virtual void Refresh();
    private void GetAllParams(StringBuilder sb, ScriptingPreferences sp, Int32& count);
    public static string get_UrnSuffix();
    public ResourceGovernor get_Parent();
    public void set_Parent(ResourceGovernor value);
    private sealed virtual override bool Microsoft.SqlServer.Management.Sdk.Sfc.ISfcSupportsDesignMode.get_IsDesignMode();
    internal virtual SqlPropertyMetadataProvider GetPropertyMetadataProvider();
    public int get_ID();
    public bool get_IsSystemObject();
    public int get_MaximumCpuPercentage();
    public void set_MaximumCpuPercentage(int value);
    public int get_MaximumMemoryPercentage();
    public void set_MaximumMemoryPercentage(int value);
    public long get_MaximumProcesses();
    public void set_MaximumProcesses(long value);
}
public class Microsoft.SqlServer.Management.Smo.ExternalResourcePoolAffinityInfo : AffinityInfoBase {
    internal ExternalResourcePool externalResourcePool;
    private CpuCollection cpuCol;
    [SfcObjectAttribute("1")]
public ExternalResourcePool Parent { get; }
    internal SqlSmoObject SmoParent { get; }
    public static string UrnSuffix { get; }
    public CpuCollection Cpus { get; }
    public ExternalResourcePoolAffinityInfo(ExternalResourcePool parent);
    public ExternalResourcePool get_Parent();
    internal virtual SqlSmoObject get_SmoParent();
    public static string get_UrnSuffix();
    public CpuCollection get_Cpus();
    public virtual void Refresh();
    internal virtual void PopulateDataTable();
    private void SetCPUAndNumaValues(bool isCreating);
    internal virtual StringCollection DoAlter(ScriptingPreferences sp);
    internal StringCollection DoAlterInternal(ScriptingPreferences sp);
}
[DefaultMemberAttribute("Item")]
public class Microsoft.SqlServer.Management.Smo.ExternalResourcePoolCollection : SimpleObjectCollectionBase {
    public ResourceGovernor Parent { get; }
    public ExternalResourcePool Item { get; }
    public ExternalResourcePool Item { get; }
    internal ExternalResourcePoolCollection(SqlSmoObject parentInstance);
    public ResourceGovernor get_Parent();
    public ExternalResourcePool get_Item(int index);
    public ExternalResourcePool get_Item(string name);
    public void CopyTo(ExternalResourcePool[] array, int index);
    public ExternalResourcePool ItemById(int id);
    protected virtual Type GetCollectionElementType();
    internal virtual SqlSmoObject GetCollectionElementInstance(ObjectKeyBase key, SqlSmoState state);
    public void Add(ExternalResourcePool externalResourcePool);
    internal SqlSmoObject GetObjectByName(string name);
    internal virtual ObjectKeyBase CreateKeyFromUrn(Urn urn);
}
[SfcIgnoreAttribute]
[SfcElementAttribute("16")]
public class Microsoft.SqlServer.Management.Smo.ExternalStream : NamedSmoObject {
    public static string UrnSuffix { get; }
    public static StringCollection RequiredFields { get; }
    [SfcObjectAttribute("1")]
public Database Parent { get; public set; }
    [SfcPropertyAttribute("1024")]
public DateTime CreateDate { get; }
    [SfcPropertyAttribute("1024")]
public string DataSourceName { get; public set; }
    [SfcPropertyAttribute("1024")]
public string FileFormatName { get; public set; }
    [SfcPropertyAttribute("1024")]
public int ID { get; }
    [SfcPropertyAttribute("1024")]
public string InputOptions { get; public set; }
    [SfcPropertyAttribute("1024")]
public bool IsPublished { get; }
    [SfcPropertyAttribute("1024")]
public bool IsSchemaPublished { get; }
    [SfcPropertyAttribute("1024")]
public bool IsSystemObject { get; }
    [SfcPropertyAttribute("1024")]
public string Location { get; public set; }
    [SfcPropertyAttribute("1024")]
public string OutputOptions { get; public set; }
    [SfcPropertyAttribute("1024")]
public string Type { get; }
    [SfcPropertyAttribute("1024")]
public string TypeDesc { get; }
    internal ExternalStream(AbstractCollectionBase parentColl, ObjectKeyBase key, SqlSmoState state);
    public ExternalStream(Database database, string name);
    private bool HasLocationOption();
    private bool HasFileFormatOption();
    private bool HasDataSourceOption();
    private bool HasInputOptionsOption();
    private bool HasOutputOptionsOption();
    public static string get_UrnSuffix();
    public static StringCollection get_RequiredFields();
    internal virtual void ScriptCreate(StringCollection query, ScriptingPreferences sp);
    internal virtual void ScriptDrop(StringCollection dropQuery, ScriptingPreferences sp);
    public sealed virtual void Create();
    public sealed virtual void Drop();
    public sealed virtual StringCollection Script();
    public sealed virtual StringCollection Script(ScriptingOptions scriptingOptions);
    public Database get_Parent();
    public void set_Parent(Database value);
    internal virtual SqlPropertyMetadataProvider GetPropertyMetadataProvider();
    public DateTime get_CreateDate();
    public string get_DataSourceName();
    public void set_DataSourceName(string value);
    public string get_FileFormatName();
    public void set_FileFormatName(string value);
    public int get_ID();
    public string get_InputOptions();
    public void set_InputOptions(string value);
    public bool get_IsPublished();
    public bool get_IsSchemaPublished();
    public bool get_IsSystemObject();
    public string get_Location();
    public void set_Location(string value);
    public string get_OutputOptions();
    public void set_OutputOptions(string value);
    public string get_Type();
    public string get_TypeDesc();
}
[DefaultMemberAttribute("Item")]
public class Microsoft.SqlServer.Management.Smo.ExternalStreamCollection : SimpleObjectCollectionBase {
    public Database Parent { get; }
    public ExternalStream Item { get; }
    public ExternalStream Item { get; }
    internal ExternalStreamCollection(SqlSmoObject parentInstance);
    public Database get_Parent();
    public ExternalStream get_Item(int index);
    public ExternalStream get_Item(string name);
    public void CopyTo(ExternalStream[] array, int index);
    public ExternalStream ItemById(int id);
    protected virtual Type GetCollectionElementType();
    internal virtual SqlSmoObject GetCollectionElementInstance(ObjectKeyBase key, SqlSmoState state);
    public void Add(ExternalStream externalStream);
    internal SqlSmoObject GetObjectByName(string name);
    internal virtual ObjectKeyBase CreateKeyFromUrn(Urn urn);
}
[SfcElementAttribute("16")]
public class Microsoft.SqlServer.Management.Smo.ExternalStreamingJob : NamedSmoObject {
    public static string UrnSuffix { get; }
    public static StringCollection RequiredFields { get; }
    [SfcObjectAttribute("1")]
public Database Parent { get; public set; }
    [SfcPropertyAttribute("1024")]
public DateTime CreateDate { get; }
    [SfcPropertyAttribute("1024")]
public int ID { get; }
    [SfcPropertyAttribute("1024")]
public bool IsPublished { get; }
    [SfcPropertyAttribute("1024")]
public bool IsSchemaPublished { get; }
    [SfcPropertyAttribute("1024")]
public bool IsSystemObject { get; }
    [SfcPropertyAttribute("1024")]
public string Statement { get; public set; }
    [SfcPropertyAttribute("1024")]
public ExternalStreamingJobStatusType Status { get; public set; }
    [SfcPropertyAttribute("1024")]
public string Type { get; }
    [SfcPropertyAttribute("1024")]
public string TypeDesc { get; }
    internal ExternalStreamingJob(AbstractCollectionBase parentColl, ObjectKeyBase key, SqlSmoState state);
    public ExternalStreamingJob(Database database, string name);
    private bool HasStatementOption();
    private string GetRequiredName();
    private bool HasStatusOption();
    public static string get_UrnSuffix();
    public static StringCollection get_RequiredFields();
    internal virtual void ScriptCreate(StringCollection query, ScriptingPreferences sp);
    internal virtual void ScriptDrop(StringCollection dropQuery, ScriptingPreferences sp);
    public void StartStreamingJob();
    public void StopStreamingJob();
    public sealed virtual void Create();
    public sealed virtual void Drop();
    public sealed virtual StringCollection Script();
    public sealed virtual StringCollection Script(ScriptingOptions scriptingOptions);
    public Database get_Parent();
    public void set_Parent(Database value);
    internal virtual SqlPropertyMetadataProvider GetPropertyMetadataProvider();
    public DateTime get_CreateDate();
    public int get_ID();
    public bool get_IsPublished();
    public bool get_IsSchemaPublished();
    public bool get_IsSystemObject();
    public string get_Statement();
    public void set_Statement(string value);
    public ExternalStreamingJobStatusType get_Status();
    public void set_Status(ExternalStreamingJobStatusType value);
    public string get_Type();
    public string get_TypeDesc();
}
[DefaultMemberAttribute("Item")]
public class Microsoft.SqlServer.Management.Smo.ExternalStreamingJobCollection : SimpleObjectCollectionBase {
    public Database Parent { get; }
    public ExternalStreamingJob Item { get; }
    public ExternalStreamingJob Item { get; }
    internal ExternalStreamingJobCollection(SqlSmoObject parentInstance);
    public Database get_Parent();
    public ExternalStreamingJob get_Item(int index);
    public ExternalStreamingJob get_Item(string name);
    public void CopyTo(ExternalStreamingJob[] array, int index);
    public ExternalStreamingJob ItemById(int id);
    protected virtual Type GetCollectionElementType();
    internal virtual SqlSmoObject GetCollectionElementInstance(ObjectKeyBase key, SqlSmoState state);
    public void Add(ExternalStreamingJob externalStreamingJob);
    internal SqlSmoObject GetObjectByName(string name);
    internal virtual ObjectKeyBase CreateKeyFromUrn(Urn urn);
}
[CompilerGeneratedAttribute]
internal class Microsoft.SqlServer.Management.Smo.FacetSR : object {
    public static CultureInfo Culture { get; public set; }
    public static string MultipartNameName { get; }
    public static string MultipartNameDesc { get; }
    public static string ServerSecurityName { get; }
    public static string ServerSecurityDesc { get; }
    public static string ServerPerformanceName { get; }
    public static string ServerPerformanceDesc { get; }
    public static string ServerAuditName { get; }
    public static string ServerAuditDesc { get; }
    public static string ServerSurfaceAreaConfigurationName { get; }
    public static string ServerSurfaceAreaConfigurationDesc { get; }
    public static string NameName { get; }
    public static string SchemaName { get; }
    public static string NameDesc { get; }
    public static string SchemaDesc { get; }
    public static string PublicServerRoleIsGrantedPermissionsName { get; }
    public static string LoginModeName { get; }
    public static string XPCmdShellEnabledName { get; }
    public static string CrossDBOwnershipChainingEnabledName { get; }
    public static string CommonCriteriaComplianceEnabledName { get; }
    public static string ServiceBrokerEndpointActiveName { get; }
    public static string ServiceBrokerEndpointActiveDesc { get; }
    public static string SoapEndpointsEnabledName { get; }
    public static string SoapEndpointsEnabledDesc { get; }
    public static string PublicServerRoleIsGrantedPermissionsDesc { get; }
    public static string LoginModeDesc { get; }
    public static string XPCmdShellEnabledDesc { get; }
    public static string CrossDBOwnershipChainingEnabledDesc { get; }
    public static string CommonCriteriaComplianceEnabledDesc { get; }
    public static string BlockedProcessThresholdName { get; }
    public static string AffinityMaskName { get; }
    public static string Affinity64MaskName { get; }
    public static string AffinityMaskIOName { get; }
    public static string Affinity64IOMaskName { get; }
    public static string DynamicLocksName { get; }
    public static string LightweightPoolingEnabledName { get; }
    public static string MaxDegreeOfParallelismName { get; }
    public static string CostThresholdforParallelismName { get; }
    public static string MaxWorkerThreadsName { get; }
    public static string NetworkPacketSizeName { get; }
    public static string OpenObjectsName { get; }
    public static string BlockedProcessThresholdDesc { get; }
    public static string AffinityMaskDesc { get; }
    public static string Affinity64MaskDesc { get; }
    public static string AffinityMaskIODesc { get; }
    public static string Affinity64IOMaskDesc { get; }
    public static string DynamicLocksDesc { get; }
    public static string LightweightPoolingEnabledDesc { get; }
    public static string MaxDegreeOfParallelismDesc { get; }
    public static string CostThresholdforParallelismDesc { get; }
    public static string MaxWorkerThreadsDesc { get; }
    public static string NetworkPacketSizeDesc { get; }
    public static string OpenObjectsDesc { get; }
    public static string DefaultTraceEnabledName { get; }
    public static string C2AuditTracingEnabledName { get; }
    public static string LoginAuditLevelName { get; }
    public static string DefaultTraceEnabledDesc { get; }
    public static string C2AuditTracingEnabledDesc { get; }
    public static string LoginAuditLevelDesc { get; }
    public static string AdHocRemoteQueriesEnabledName { get; }
    public static string DatabaseMailEnabledName { get; }
    public static string ClrIntegrationEnabledName { get; }
    public static string OleAutomationEnabledName { get; }
    public static string RemoteDacEnabledName { get; }
    public static string SqlMailEnabledName { get; }
    public static string WebAssistantEnabledName { get; }
    public static string AdHocRemoteQueriesEnabledDesc { get; }
    public static string DatabaseMailEnabledDesc { get; }
    public static string ClrIntegrationEnabledDesc { get; }
    public static string OleAutomationEnabledDesc { get; }
    public static string RemoteDacEnabledDesc { get; }
    public static string SqlMailEnabledDesc { get; }
    public static string WebAssistantEnabledDesc { get; }
    public static string XPCmdShellEnabledDescSAC { get; }
    public static string IServerSecurityFacet_CmdExecRightsForSystemAdminsOnlyName { get; }
    public static string IServerSecurityFacet_CmdExecRightsForSystemAdminsOnlyDesc { get; }
    public static string IServerSecurityFacet_ProxyAccountIsGrantedToPublicRoleName { get; }
    public static string IServerSecurityFacet_ProxyAccountIsGrantedToPublicRoleDesc { get; }
    public static string IServerSecurityFacet_ReplaceAlertTokensEnabledName { get; }
    public static string IServerSecurityFacet_ReplaceAlertTokensEnabledDesc { get; }
    public static string IServerSecurityFacet_ProxyAccountEnabledName { get; }
    public static string IServerSecurityFacet_ProxyAccountEnabledDesc { get; }
    public static string AvailabilityGroupStateName { get; }
    public static string AvailabilityGroupStateDesc { get; }
    public static string AvailabilityGroupState_IsOnlineName { get; }
    public static string AvailabilityGroupState_IsOnlineDesc { get; }
    public static string AvailabilityGroupState_IsAutoFailoverName { get; }
    public static string AvailabilityGroupState_IsAutoFailoverDesc { get; }
    public static string AvailabilityGroupState_NumberOfSynchronizedSecondaryReplicasName { get; }
    public static string AvailabilityGroupState_NumberOfSynchronizedSecondaryReplicasDesc { get; }
    public static string AvailabilityGroupState_NumberOfNotSynchronizingReplicasName { get; }
    public static string AvailabilityGroupState_NumberOfNotSynchronizingReplicasDesc { get; }
    public static string AvailabilityGroupState_NumberOfNotSynchronizedReplicasName { get; }
    public static string AvailabilityGroupState_NumberOfNotSynchronizedReplicasDesc { get; }
    public static string AvailabilityGroupState_NumberOfReplicasWithUnhealthyRoleName { get; }
    public static string AvailabilityGroupState_NumberOfReplicasWithUnhealthyRoleDesc { get; }
    public static string AvailabilityGroupState_NumberOfDisconnectedReplicasName { get; }
    public static string AvailabilityGroupState_NumberOfDisconnectedReplicasDesc { get; }
    public static string SmartAdminStateName { get; }
    public static string SmartAdminStateDesc { get; }
    public static string SmartAdminState_IsMasterSwitchEnabledName { get; }
    public static string SmartAdminState_IsMasterSwitchEnabledDesc { get; }
    public static string SmartAdminState_IsBackupEnabledName { get; }
    public static string SmartAdminState_IsBackupEnabledDesc { get; }
    public static string SmartAdminState_NumberOfStorageConnectivityErrorsName { get; }
    public static string SmartAdminState_NumberOfStorageConnectivityErrorsDesc { get; }
    public static string SmartAdminState_NumberOfSqlErrorsName { get; }
    public static string SmartAdminState_NumberOfSqlErrorsDesc { get; }
    public static string SmartAdminState_NumberOfInvalidCredentialErrorsName { get; }
    public static string SmartAdminState_NumberOfInvalidCredentialErrorsDesc { get; }
    public static string SmartAdminState_NumberOfOtherErrorsName { get; }
    public static string SmartAdminState_NumberOfOtherErrorsDesc { get; }
    public static string SmartAdminState_NumberOfCorruptedOrDeletedBackupsName { get; }
    public static string SmartAdminState_NumberOfCorruptedOrDeletedBackupsDesc { get; }
    public static string SmartAdminState_IsSmartBackupOnlineName { get; }
    public static string SmartAdminState_IsSmartBackupOnlineDesc { get; }
    public static string SmartAdminState_IsStorageAccountAccessibleName { get; }
    public static string SmartAdminState_IsStorageAccountAccessibleDesc { get; }
    public static string SmartAdminState_NumberOfBackupsWithRestoreHeaderOnlyFailedName { get; }
    public static string SmartAdminState_NumberOfBackupsWithRestoreHeaderOnlyFailedDesc { get; }
    public static string SmartAdminState_NumberOfUserDeletedBackupsName { get; }
    public static string SmartAdminState_NumberOfUserDeletedBackupsDesc { get; }
    public static string SmartAdminState_NumberOfBackupLoopsName { get; }
    public static string SmartAdminState_NumberOfBackupLoopsDesc { get; }
    public static string SmartAdminState_NumberOfRetentionLoopsName { get; }
    public static string SmartAdminState_NumberOfRetentionLoopsDesc { get; }
    public static CultureInfo get_Culture();
    public static void set_Culture(CultureInfo value);
    public static string get_MultipartNameName();
    public static string get_MultipartNameDesc();
    public static string get_ServerSecurityName();
    public static string get_ServerSecurityDesc();
    public static string get_ServerPerformanceName();
    public static string get_ServerPerformanceDesc();
    public static string get_ServerAuditName();
    public static string get_ServerAuditDesc();
    public static string get_ServerSurfaceAreaConfigurationName();
    public static string get_ServerSurfaceAreaConfigurationDesc();
    public static string get_NameName();
    public static string get_SchemaName();
    public static string get_NameDesc();
    public static string get_SchemaDesc();
    public static string get_PublicServerRoleIsGrantedPermissionsName();
    public static string get_LoginModeName();
    public static string get_XPCmdShellEnabledName();
    public static string get_CrossDBOwnershipChainingEnabledName();
    public static string get_CommonCriteriaComplianceEnabledName();
    public static string get_ServiceBrokerEndpointActiveName();
    public static string get_ServiceBrokerEndpointActiveDesc();
    public static string get_SoapEndpointsEnabledName();
    public static string get_SoapEndpointsEnabledDesc();
    public static string get_PublicServerRoleIsGrantedPermissionsDesc();
    public static string get_LoginModeDesc();
    public static string get_XPCmdShellEnabledDesc();
    public static string get_CrossDBOwnershipChainingEnabledDesc();
    public static string get_CommonCriteriaComplianceEnabledDesc();
    public static string get_BlockedProcessThresholdName();
    public static string get_AffinityMaskName();
    public static string get_Affinity64MaskName();
    public static string get_AffinityMaskIOName();
    public static string get_Affinity64IOMaskName();
    public static string get_DynamicLocksName();
    public static string get_LightweightPoolingEnabledName();
    public static string get_MaxDegreeOfParallelismName();
    public static string get_CostThresholdforParallelismName();
    public static string get_MaxWorkerThreadsName();
    public static string get_NetworkPacketSizeName();
    public static string get_OpenObjectsName();
    public static string get_BlockedProcessThresholdDesc();
    public static string get_AffinityMaskDesc();
    public static string get_Affinity64MaskDesc();
    public static string get_AffinityMaskIODesc();
    public static string get_Affinity64IOMaskDesc();
    public static string get_DynamicLocksDesc();
    public static string get_LightweightPoolingEnabledDesc();
    public static string get_MaxDegreeOfParallelismDesc();
    public static string get_CostThresholdforParallelismDesc();
    public static string get_MaxWorkerThreadsDesc();
    public static string get_NetworkPacketSizeDesc();
    public static string get_OpenObjectsDesc();
    public static string get_DefaultTraceEnabledName();
    public static string get_C2AuditTracingEnabledName();
    public static string get_LoginAuditLevelName();
    public static string get_DefaultTraceEnabledDesc();
    public static string get_C2AuditTracingEnabledDesc();
    public static string get_LoginAuditLevelDesc();
    public static string get_AdHocRemoteQueriesEnabledName();
    public static string get_DatabaseMailEnabledName();
    public static string get_ClrIntegrationEnabledName();
    public static string get_OleAutomationEnabledName();
    public static string get_RemoteDacEnabledName();
    public static string get_SqlMailEnabledName();
    public static string get_WebAssistantEnabledName();
    public static string get_AdHocRemoteQueriesEnabledDesc();
    public static string get_DatabaseMailEnabledDesc();
    public static string get_ClrIntegrationEnabledDesc();
    public static string get_OleAutomationEnabledDesc();
    public static string get_RemoteDacEnabledDesc();
    public static string get_SqlMailEnabledDesc();
    public static string get_WebAssistantEnabledDesc();
    public static string get_XPCmdShellEnabledDescSAC();
    public static string get_IServerSecurityFacet_CmdExecRightsForSystemAdminsOnlyName();
    public static string get_IServerSecurityFacet_CmdExecRightsForSystemAdminsOnlyDesc();
    public static string get_IServerSecurityFacet_ProxyAccountIsGrantedToPublicRoleName();
    public static string get_IServerSecurityFacet_ProxyAccountIsGrantedToPublicRoleDesc();
    public static string get_IServerSecurityFacet_ReplaceAlertTokensEnabledName();
    public static string get_IServerSecurityFacet_ReplaceAlertTokensEnabledDesc();
    public static string get_IServerSecurityFacet_ProxyAccountEnabledName();
    public static string get_IServerSecurityFacet_ProxyAccountEnabledDesc();
    public static string get_AvailabilityGroupStateName();
    public static string get_AvailabilityGroupStateDesc();
    public static string get_AvailabilityGroupState_IsOnlineName();
    public static string get_AvailabilityGroupState_IsOnlineDesc();
    public static string get_AvailabilityGroupState_IsAutoFailoverName();
    public static string get_AvailabilityGroupState_IsAutoFailoverDesc();
    public static string get_AvailabilityGroupState_NumberOfSynchronizedSecondaryReplicasName();
    public static string get_AvailabilityGroupState_NumberOfSynchronizedSecondaryReplicasDesc();
    public static string get_AvailabilityGroupState_NumberOfNotSynchronizingReplicasName();
    public static string get_AvailabilityGroupState_NumberOfNotSynchronizingReplicasDesc();
    public static string get_AvailabilityGroupState_NumberOfNotSynchronizedReplicasName();
    public static string get_AvailabilityGroupState_NumberOfNotSynchronizedReplicasDesc();
    public static string get_AvailabilityGroupState_NumberOfReplicasWithUnhealthyRoleName();
    public static string get_AvailabilityGroupState_NumberOfReplicasWithUnhealthyRoleDesc();
    public static string get_AvailabilityGroupState_NumberOfDisconnectedReplicasName();
    public static string get_AvailabilityGroupState_NumberOfDisconnectedReplicasDesc();
    public static string get_SmartAdminStateName();
    public static string get_SmartAdminStateDesc();
    public static string get_SmartAdminState_IsMasterSwitchEnabledName();
    public static string get_SmartAdminState_IsMasterSwitchEnabledDesc();
    public static string get_SmartAdminState_IsBackupEnabledName();
    public static string get_SmartAdminState_IsBackupEnabledDesc();
    public static string get_SmartAdminState_NumberOfStorageConnectivityErrorsName();
    public static string get_SmartAdminState_NumberOfStorageConnectivityErrorsDesc();
    public static string get_SmartAdminState_NumberOfSqlErrorsName();
    public static string get_SmartAdminState_NumberOfSqlErrorsDesc();
    public static string get_SmartAdminState_NumberOfInvalidCredentialErrorsName();
    public static string get_SmartAdminState_NumberOfInvalidCredentialErrorsDesc();
    public static string get_SmartAdminState_NumberOfOtherErrorsName();
    public static string get_SmartAdminState_NumberOfOtherErrorsDesc();
    public static string get_SmartAdminState_NumberOfCorruptedOrDeletedBackupsName();
    public static string get_SmartAdminState_NumberOfCorruptedOrDeletedBackupsDesc();
    public static string get_SmartAdminState_IsSmartBackupOnlineName();
    public static string get_SmartAdminState_IsSmartBackupOnlineDesc();
    public static string get_SmartAdminState_IsStorageAccountAccessibleName();
    public static string get_SmartAdminState_IsStorageAccountAccessibleDesc();
    public static string get_SmartAdminState_NumberOfBackupsWithRestoreHeaderOnlyFailedName();
    public static string get_SmartAdminState_NumberOfBackupsWithRestoreHeaderOnlyFailedDesc();
    public static string get_SmartAdminState_NumberOfUserDeletedBackupsName();
    public static string get_SmartAdminState_NumberOfUserDeletedBackupsDesc();
    public static string get_SmartAdminState_NumberOfBackupLoopsName();
    public static string get_SmartAdminState_NumberOfBackupLoopsDesc();
    public static string get_SmartAdminState_NumberOfRetentionLoopsName();
    public static string get_SmartAdminState_NumberOfRetentionLoopsDesc();
}
public class Microsoft.SqlServer.Management.Smo.FailedOperationException : SmoException {
    private string operation;
    private object failedObject;
    private string reason;
    public SmoExceptionType SmoExceptionType { get; }
    public string Operation { get; public set; }
    public object FailedObject { get; public set; }
    public string Message { get; }
    public FailedOperationException(string message);
    public FailedOperationException(string message, Exception innerException);
    private FailedOperationException(SerializationInfo info, StreamingContext context);
    public FailedOperationException(string operation, object failedObject, Exception innerException);
    public FailedOperationException(string operation, object failedObject, Exception innerException, string reason);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    public virtual SmoExceptionType get_SmoExceptionType();
    public string get_Operation();
    public void set_Operation(string value);
    public object get_FailedObject();
    public void set_FailedObject(object value);
    public virtual string get_Message();
}
[EvaluationModeAttribute("4")]
[PhysicalFacetAttribute]
[SfcElementAttribute("48")]
public class Microsoft.SqlServer.Management.Smo.FileGroup : NamedSmoObject {
    private DataFileCollection m_Files;
    public static string UrnSuffix { get; }
    [SfcObjectAttribute("1", "0", "Microsoft.SqlServer.Management.Smo.DataFile")]
public DataFileCollection Files { get; }
    [SfcObjectAttribute("1")]
public Database Parent { get; public set; }
    private bool Microsoft.SqlServer.Management.Sdk.Sfc.ISfcSupportsDesignMode.IsDesignMode { get; }
    [SfcPropertyAttribute("1024")]
public bool AutogrowAllFiles { get; public set; }
    [SfcPropertyAttribute("3328")]
public FileGroupType FileGroupType { get; public set; }
    [SfcPropertyAttribute("3072")]
public int ID { get; }
    [SfcPropertyAttribute("3072")]
public bool IsDefault { get; public set; }
    [SfcPropertyAttribute("3328")]
public bool IsFileStream { get; public set; }
    [SfcPropertyAttribute("3072")]
public bool ReadOnly { get; public set; }
    [SfcPropertyAttribute("3072")]
public double Size { get; }
    internal FileGroup(AbstractCollectionBase parentColl, ObjectKeyBase key, SqlSmoState state);
    public FileGroup(Database database, string name, FileGroupType fileGroupType);
    public FileGroup(Database database, string name, bool isFileStream);
    public FileGroup(Database database, string name);
    public static string get_UrnSuffix();
    internal virtual void ValidateName(string name);
    private void InitializeDefaults();
    public DataFileCollection get_Files();
    protected virtual void MarkDropped();
    public sealed virtual void Rename(string newname);
    internal virtual void ScriptRename(StringCollection renameQuery, ScriptingPreferences sp, string newName);
    public sealed virtual void Alter();
    internal virtual void ScriptAlter(StringCollection alterQuery, ScriptingPreferences sp);
    public sealed virtual void Create();
    internal virtual void ScriptCreate(StringCollection createQuery, ScriptingPreferences sp);
    public sealed virtual void Drop();
    internal virtual void ScriptDrop(StringCollection dropQuery, ScriptingPreferences sp);
    public sealed virtual void MarkForDrop(bool dropOnAlter);
    internal void ScriptDdl(ScriptingPreferences sp, StringBuilder ddl);
    private void ScriptFileGroupFiles(ScriptingPreferences sp, StringBuilder ddl, bool databaseIsView);
    private void ScriptPrimaryFileGroup(ScriptingPreferences sp, StringBuilder ddl, bool databaseIsView);
    internal void ScriptDdl(ScriptingPreferences sp, StringBuilder ddl, bool databaseIsView);
    internal static void GetFileScriptWithCheck(ScriptingPreferences sp, DatabaseFile df, StringBuilder ddl, bool databaseIsView);
    internal virtual PropagateInfo[] GetPropagateInfo(PropagateAction action);
    public StringCollection CheckFileGroup();
    public StringCollection CheckFileGroupDataOnly();
    private void AddObjects(string partialUrn, ArrayList list);
    public SqlSmoObject[] EnumObjects();
    public Database get_Parent();
    public void set_Parent(Database value);
    private sealed virtual override bool Microsoft.SqlServer.Management.Sdk.Sfc.ISfcSupportsDesignMode.get_IsDesignMode();
    internal virtual SqlPropertyMetadataProvider GetPropertyMetadataProvider();
    public bool get_AutogrowAllFiles();
    public void set_AutogrowAllFiles(bool value);
    public FileGroupType get_FileGroupType();
    public void set_FileGroupType(FileGroupType value);
    public int get_ID();
    public bool get_IsDefault();
    public void set_IsDefault(bool value);
    public bool get_IsFileStream();
    public void set_IsFileStream(bool value);
    public bool get_ReadOnly();
    public void set_ReadOnly(bool value);
    public double get_Size();
    internal virtual String[] GetNonAlterableProperties();
}
[DefaultMemberAttribute("Item")]
public class Microsoft.SqlServer.Management.Smo.FileGroupCollection : SimpleObjectCollectionBase {
    public Database Parent { get; }
    public FileGroup Item { get; }
    public FileGroup Item { get; }
    internal FileGroupCollection(SqlSmoObject parentInstance);
    public Database get_Parent();
    public FileGroup get_Item(int index);
    public FileGroup get_Item(string name);
    public void CopyTo(FileGroup[] array, int index);
    public FileGroup ItemById(int id);
    protected virtual Type GetCollectionElementType();
    internal virtual SqlSmoObject GetCollectionElementInstance(ObjectKeyBase key, SqlSmoState state);
    public void Remove(FileGroup fileGroup);
    public void Remove(string name);
    public void Add(FileGroup fileGroup);
    internal SqlSmoObject GetObjectByName(string name);
    internal virtual ObjectKeyBase CreateKeyFromUrn(Urn urn);
}
internal class Microsoft.SqlServer.Management.Smo.FilePerObjectWriter : object {
    private Dictionary`2<Urn, SingleFileWriter> SingleFileWriters;
    private HashSet`1<string> fileNames;
    [CompilerGeneratedAttribute]
private Encoding <Encoding>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AppendToFile>k__BackingField;
    private string folderPath;
    private static string FILE_EXTENSION;
    private static char INVALID_CHARACTER_REPLACEMENT;
    [CompilerGeneratedAttribute]
private string <BatchTerminator>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ScriptBatchTerminator>k__BackingField;
    [CompilerGeneratedAttribute]
private int <InsertBatchSize>k__BackingField;
    private string _header;
    public Encoding Encoding { get; public set; }
    public bool AppendToFile { get; public set; }
    public string BatchTerminator { get; public set; }
    public bool ScriptBatchTerminator { get; public set; }
    public int InsertBatchSize { get; public set; }
    unknown string Header {public set; }
    public FilePerObjectWriter(string folderPath);
    [CompilerGeneratedAttribute]
public Encoding get_Encoding();
    [CompilerGeneratedAttribute]
public void set_Encoding(Encoding value);
    [CompilerGeneratedAttribute]
public bool get_AppendToFile();
    [CompilerGeneratedAttribute]
public void set_AppendToFile(bool value);
    [CompilerGeneratedAttribute]
public string get_BatchTerminator();
    [CompilerGeneratedAttribute]
public void set_BatchTerminator(string value);
    [CompilerGeneratedAttribute]
public bool get_ScriptBatchTerminator();
    [CompilerGeneratedAttribute]
public void set_ScriptBatchTerminator(bool value);
    [CompilerGeneratedAttribute]
public int get_InsertBatchSize();
    [CompilerGeneratedAttribute]
public void set_InsertBatchSize(int value);
    private void Init();
    private void VerfiyFolderPath(string folderPath);
    public sealed virtual void ScriptObject(IEnumerable`1<string> script, Urn obj);
    public sealed virtual void ScriptData(IEnumerable`1<string> dataScript, Urn table);
    public sealed virtual void ScriptContext(string databaseContext, Urn obj);
    public sealed virtual void set_Header(string value);
    public void Close();
    public sealed virtual void Dispose();
    protected virtual string CompleteFileName(string fileName);
    private SingleFileWriter GetSingleFileWriter(string uniqueFileName);
    protected virtual SingleFileWriter GetFileWriter(Urn obj);
    private static Urn ObjectKey(Urn obj);
    private static Urn ObjectKeyRec(Urn key);
    private SingleFileWriter GetUnresolveEntityWriter();
    protected virtual string GetValidFileName(Urn urn);
    protected virtual string GetFileName(Urn urn);
}
public enum Microsoft.SqlServer.Management.Smo.FilestreamAccessLevelType : Enum {
    public int value__;
    public static FilestreamAccessLevelType Disabled;
    public static FilestreamAccessLevelType TSqlAccess;
    public static FilestreamAccessLevelType FullAccess;
}
public enum Microsoft.SqlServer.Management.Smo.FileStreamEffectiveLevel : Enum {
    public int value__;
    public static FileStreamEffectiveLevel Disabled;
    public static FileStreamEffectiveLevel TSqlAccess;
    public static FileStreamEffectiveLevel TSqlLocalFileSystemAccess;
    public static FileStreamEffectiveLevel TSqlFullFileSystemAccess;
}
[SfcElementAttribute("48")]
public class Microsoft.SqlServer.Management.Smo.ForeignKey : ScriptNameObjectBase {
    private ForeignKeyColumnCollection m_Columns;
    private string m_sReferencedTable;
    private string m_sReferencedTableSchema;
    private XSchemaProps _XSchema;
    private XRuntimeProps _XRuntime;
    public static string UrnSuffix { get; }
    [SfcKeyAttribute("0")]
[SfcPropertyAttribute("7424")]
public string Name { get; public set; }
    [SfcPropertyAttribute("3072")]
public bool IsSystemNamed { get; }
    [SfcObjectAttribute("1", "1", "Microsoft.SqlServer.Management.Smo.ForeignKeyColumn", "48")]
public ForeignKeyColumnCollection Columns { get; }
    [SfcObjectAttribute("1", "0", "Microsoft.SqlServer.Management.Smo.ExtendedProperty")]
public ExtendedPropertyCollection ExtendedProperties { get; }
    [SfcPropertyAttribute("3072")]
public string ScriptReferencedTable { get; public set; }
    [SfcPropertyAttribute("3072")]
public string ScriptReferencedTableSchema { get; public set; }
    [SfcObjectAttribute("1", "32")]
public Table Parent { get; public set; }
    private bool Microsoft.SqlServer.Management.Sdk.Sfc.ISfcSupportsDesignMode.IsDesignMode { get; }
    private XSchemaProps XSchema { get; }
    private XRuntimeProps XRuntime { get; }
    [SfcPropertyAttribute("3072")]
public DateTime CreateDate { get; }
    [SfcPropertyAttribute("3072")]
public DateTime DateLastModified { get; }
    [SfcPropertyAttribute("7424")]
public ForeignKeyAction DeleteAction { get; public set; }
    [SfcPropertyAttribute("3072")]
public int ID { get; }
    [SfcPropertyAttribute("7424")]
public bool IsChecked { get; public set; }
    [SfcPropertyAttribute("7168")]
public bool IsEnabled { get; public set; }
    [SfcPropertyAttribute("1024")]
public bool IsFileTableDefined { get; }
    [SfcPropertyAttribute("3360")]
public bool IsMemoryOptimized { get; public set; }
    [SfcPropertyAttribute("11520")]
public bool NotForReplication { get; public set; }
    [SfcPropertyAttribute("3072")]
public string ReferencedKey { get; }
    [SfcPropertyAttribute("7168")]
[SfcReferenceAttribute("Microsoft.SqlServer.Management.Smo.Table", "Server[@Name='{0}']/Database[@Name='{1}']/Table[@Name='{2}' and @Schema='{3}']", "Mono.Cecil.CustomAttributeArgument[]")]
[CLSCompliantAttribute("False")]
public string ReferencedTable { get; public set; }
    [SfcPropertyAttribute("7168")]
public string ReferencedTableSchema { get; public set; }
    [SfcPropertyAttribute("7424")]
public ForeignKeyAction UpdateAction { get; public set; }
    internal ForeignKey(AbstractCollectionBase parentColl, ObjectKeyBase key, SqlSmoState state);
    public ForeignKey(Table table, string name);
    public static string get_UrnSuffix();
    public virtual string get_Name();
    public virtual void set_Name(string value);
    public bool get_IsSystemNamed();
    internal virtual void UpdateObjectState();
    public ForeignKeyColumnCollection get_Columns();
    protected virtual void MarkDropped();
    public sealed virtual void Create();
    internal virtual void ScriptCreate(StringCollection createQuery, ScriptingPreferences sp);
    internal string ScriptDdlBody(ScriptingPreferences sp);
    internal virtual string GetScriptIncludeExists(ScriptingPreferences sp, string tableName, bool forCreate);
    public sealed virtual void Drop();
    public sealed virtual void DropIfExists();
    private void AddReferentioalAction(ScriptingPreferences sp, StringBuilder sb, string propertyName, string action);
    internal virtual void ScriptDrop(StringCollection queries, ScriptingPreferences sp);
    public sealed virtual void MarkForDrop(bool dropOnAlter);
    public sealed virtual void Alter();
    internal virtual void ScriptAlter(StringCollection alterQuery, ScriptingPreferences sp);
    public sealed virtual StringCollection Script();
    public sealed virtual StringCollection Script(ScriptingOptions scriptingOptions);
    public sealed virtual void Rename(string newName);
    internal virtual void ScriptRename(StringCollection renameQuery, ScriptingPreferences sp, string newName);
    public sealed virtual ExtendedPropertyCollection get_ExtendedProperties();
    internal virtual PropagateInfo[] GetPropagateInfo(PropagateAction action);
    public string get_ScriptReferencedTable();
    public void set_ScriptReferencedTable(string value);
    public string get_ScriptReferencedTableSchema();
    public void set_ScriptReferencedTableSchema(string value);
    internal static String[] GetScriptFields(Type parentType, ServerVersion version, DatabaseEngineType databaseEngineType, DatabaseEngineEdition databaseEngineEdition, bool defaultTextMode);
    public Table get_Parent();
    public void set_Parent(Table value);
    private sealed virtual override bool Microsoft.SqlServer.Management.Sdk.Sfc.ISfcSupportsDesignMode.get_IsDesignMode();
    internal virtual SqlPropertyMetadataProvider GetPropertyMetadataProvider();
    private sealed virtual override object Microsoft.SqlServer.Management.Smo.IPropertyDataDispatch.GetPropertyValue(int index);
    private sealed virtual override void Microsoft.SqlServer.Management.Smo.IPropertyDataDispatch.SetPropertyValue(int index, object value);
    private XSchemaProps get_XSchema();
    private XRuntimeProps get_XRuntime();
    public DateTime get_CreateDate();
    public DateTime get_DateLastModified();
    public ForeignKeyAction get_DeleteAction();
    public void set_DeleteAction(ForeignKeyAction value);
    public int get_ID();
    public bool get_IsChecked();
    public void set_IsChecked(bool value);
    public bool get_IsEnabled();
    public void set_IsEnabled(bool value);
    public bool get_IsFileTableDefined();
    public bool get_IsMemoryOptimized();
    public void set_IsMemoryOptimized(bool value);
    public bool get_NotForReplication();
    public void set_NotForReplication(bool value);
    public string get_ReferencedKey();
    public string get_ReferencedTable();
    public void set_ReferencedTable(string value);
    public string get_ReferencedTableSchema();
    public void set_ReferencedTableSchema(string value);
    public ForeignKeyAction get_UpdateAction();
    public void set_UpdateAction(ForeignKeyAction value);
    internal virtual String[] GetNonAlterableProperties();
}
[DefaultMemberAttribute("Item")]
public class Microsoft.SqlServer.Management.Smo.ForeignKeyCollection : SimpleObjectCollectionBase {
    public Table Parent { get; }
    public ForeignKey Item { get; }
    public ForeignKey Item { get; }
    internal ForeignKeyCollection(SqlSmoObject parentInstance);
    public Table get_Parent();
    public ForeignKey get_Item(int index);
    public ForeignKey get_Item(string name);
    public void CopyTo(ForeignKey[] array, int index);
    public ForeignKey ItemById(int id);
    protected virtual Type GetCollectionElementType();
    internal virtual SqlSmoObject GetCollectionElementInstance(ObjectKeyBase key, SqlSmoState state);
    public void Remove(ForeignKey foreignKey);
    public void Remove(string name);
    public void Add(ForeignKey foreignKey);
    internal SqlSmoObject GetObjectByName(string name);
    internal virtual ObjectKeyBase CreateKeyFromUrn(Urn urn);
}
[SfcElementTypeAttribute("Column")]
[SfcElementAttribute("48")]
public class Microsoft.SqlServer.Management.Smo.ForeignKeyColumn : NamedSmoObject {
    private XSchemaProps _XSchema;
    private XRuntimeProps _XRuntime;
    public static string UrnSuffix { get; }
    [SfcKeyAttribute("0")]
[SfcPropertyAttribute("7424")]
public string Name { get; public set; }
    [SfcObjectAttribute("1", "32")]
public ForeignKey Parent { get; public set; }
    private bool Microsoft.SqlServer.Management.Sdk.Sfc.ISfcSupportsDesignMode.IsDesignMode { get; }
    private XSchemaProps XSchema { get; }
    private XRuntimeProps XRuntime { get; }
    [SfcPropertyAttribute("3072")]
public int ID { get; }
    [SfcPropertyAttribute("7168")]
public string ReferencedColumn { get; public set; }
    internal ForeignKeyColumn(AbstractCollectionBase parentColl, ObjectKeyBase key, SqlSmoState state);
    public ForeignKeyColumn(ForeignKey foreignKey, string name, string referencedColumn);
    public ForeignKeyColumn(ForeignKey foreignKey, string name);
    public static string get_UrnSuffix();
    public virtual string get_Name();
    public virtual void set_Name(string value);
    internal static String[] GetScriptFields(Type parentType, ServerVersion version, DatabaseEngineType databaseEngineType, DatabaseEngineEdition databaseEngineEdition, bool defaultTextMode);
    public ForeignKey get_Parent();
    public void set_Parent(ForeignKey value);
    private sealed virtual override bool Microsoft.SqlServer.Management.Sdk.Sfc.ISfcSupportsDesignMode.get_IsDesignMode();
    internal virtual SqlPropertyMetadataProvider GetPropertyMetadataProvider();
    private sealed virtual override object Microsoft.SqlServer.Management.Smo.IPropertyDataDispatch.GetPropertyValue(int index);
    private sealed virtual override void Microsoft.SqlServer.Management.Smo.IPropertyDataDispatch.SetPropertyValue(int index, object value);
    private XSchemaProps get_XSchema();
    private XRuntimeProps get_XRuntime();
    public int get_ID();
    public string get_ReferencedColumn();
    public void set_ReferencedColumn(string value);
}
[DefaultMemberAttribute("Item")]
public class Microsoft.SqlServer.Management.Smo.ForeignKeyColumnCollection : ParameterCollectionBase {
    public ForeignKey Parent { get; }
    public ForeignKeyColumn Item { get; }
    public ForeignKeyColumn Item { get; }
    internal ForeignKeyColumnCollection(SqlSmoObject parentInstance);
    public ForeignKey get_Parent();
    public ForeignKeyColumn get_Item(int index);
    public void CopyTo(ForeignKeyColumn[] array, int index);
    public ForeignKeyColumn get_Item(string name);
    protected virtual Type GetCollectionElementType();
    internal virtual SqlSmoObject GetCollectionElementInstance(ObjectKeyBase key, SqlSmoState state);
    public void Add(ForeignKeyColumn foreignKeyColumn);
    public void Add(ForeignKeyColumn foreignKeyColumn, string insertAtColumnName);
    public void Add(ForeignKeyColumn foreignKeyColumn, int insertAtPosition);
    public void Remove(ForeignKeyColumn foreignKeyColumn);
    public ForeignKeyColumn ItemById(int id);
}
public enum Microsoft.SqlServer.Management.Smo.FragmentationOption : Enum {
    public int value__;
    public static FragmentationOption Fast;
    public static FragmentationOption Sampled;
    public static FragmentationOption Detailed;
}
public class Microsoft.SqlServer.Management.Smo.FrequencyPair : object {
    private int count;
    private TimeSpan duration;
    public int Count { get; public set; }
    public TimeSpan Duration { get; public set; }
    public int get_Count();
    public void set_Count(int value);
    public TimeSpan get_Duration();
    public void set_Duration(TimeSpan value);
}
[EvaluationModeAttribute("4")]
[PhysicalFacetAttribute]
[SfcElementAttribute("48")]
public class Microsoft.SqlServer.Management.Smo.FullTextCatalog : ScriptNameObjectBase {
    [SfcObjectAttribute("1")]
public Database Parent { get; public set; }
    public static string UrnSuffix { get; }
    [SfcKeyAttribute("0")]
[SfcPropertyAttribute("1280")]
public string Name { get; public set; }
    internal UserPermissionCollection Permissions { get; }
    private bool Microsoft.SqlServer.Management.Sdk.Sfc.ISfcSupportsDesignMode.IsDesignMode { get; }
    [SfcPropertyAttribute("3072")]
public int ErrorLogSize { get; }
    [SfcPropertyAttribute("3072")]
public string FileGroup { get; public set; }
    [SfcPropertyAttribute("3072")]
public int FullTextIndexSize { get; }
    [SfcPropertyAttribute("3072")]
public bool HasFullTextIndexedTables { get; }
    [SfcPropertyAttribute("3072")]
public int ID { get; }
    [SfcPropertyAttribute("3072")]
public bool IsAccentSensitive { get; public set; }
    [SfcPropertyAttribute("3328")]
public bool IsDefault { get; public set; }
    [SfcPropertyAttribute("3072")]
public int ItemCount { get; }
    [SfcPropertyAttribute("3072")]
[SfcReferenceAttribute("Microsoft.SqlServer.Management.Smo.User", "Server[@Name = '{0}']/Database[@Name = '{1}']/User[@Name = '{2}']", "Mono.Cecil.CustomAttributeArgument[]")]
[SfcReferenceAttribute("Microsoft.SqlServer.Management.Smo.DatabaseRole", "Server[@Name = '{0}']/Database[@Name = '{1}']/Role[@Name = '{2}']", "Mono.Cecil.CustomAttributeArgument[]")]
[SfcReferenceAttribute("Microsoft.SqlServer.Management.Smo.ApplicationRole", "Server[@Name = '{0}']/Database[@Name = '{1}']/ApplicationRole[@Name = '{2}']", "Mono.Cecil.CustomAttributeArgument[]")]
[CLSCompliantAttribute("False")]
public string Owner { get; public set; }
    [SfcPropertyAttribute("3072")]
public TimeSpan PopulationCompletionAge { get; }
    [SfcPropertyAttribute("3072")]
public DateTime PopulationCompletionDate { get; }
    [SfcPropertyAttribute("3072")]
public CatalogPopulationStatus PopulationStatus { get; }
    [SfcPropertyAttribute("3328")]
public string RootPath { get; public set; }
    [SfcPropertyAttribute("3104")]
public int UniqueKeyCount { get; }
    public FullTextCatalog(Database database, string name);
    internal FullTextCatalog(AbstractCollectionBase parentColl, ObjectKeyBase key, SqlSmoState state);
    public Database get_Parent();
    public void set_Parent(Database value);
    public static string get_UrnSuffix();
    public virtual string get_Name();
    public virtual void set_Name(string value);
    public sealed virtual void Create();
    internal virtual void ScriptCreate(StringCollection queries, ScriptingPreferences sp);
    public sealed virtual void Alter();
    internal virtual void ScriptAlter(StringCollection alterQuery, ScriptingPreferences sp);
    private void ScriptCreateCatalog(StringCollection queries, ScriptingPreferences sp);
    private void ScriptAlterCatalog(StringCollection queries, ScriptingPreferences sp);
    public sealed virtual void Drop();
    public sealed virtual void DropIfExists();
    internal virtual void AddScriptPermission(StringCollection query, ScriptingPreferences sp);
    internal virtual void ScriptDrop(StringCollection dropQuery, ScriptingPreferences sp);
    public sealed virtual StringCollection Script();
    public sealed virtual StringCollection Script(ScriptingOptions scriptingOptions);
    public void Rebuild();
    public void Rebuild(bool accentSensitive);
    public void Reorganize();
    private void StartOrStopPopulation(CatalogPopulationActionEx action);
    public void StartPopulation(CatalogPopulationAction action);
    public void StopPopulation();
    private DataTable EnumTables();
    internal void Validate_set_IsDefault(Property prop, object newValue);
    internal virtual void ValidateProperty(Property prop, object value);
    protected virtual void PostCreate();
    public DataTable EnumErrorLogs();
    public DataTable ReadErrorLog();
    public DataTable ReadErrorLog(int logNumber);
    internal virtual UserPermissionCollection get_Permissions();
    private sealed virtual override bool Microsoft.SqlServer.Management.Sdk.Sfc.ISfcSupportsDesignMode.get_IsDesignMode();
    internal virtual SqlPropertyMetadataProvider GetPropertyMetadataProvider();
    public int get_ErrorLogSize();
    public string get_FileGroup();
    public void set_FileGroup(string value);
    public int get_FullTextIndexSize();
    public bool get_HasFullTextIndexedTables();
    public int get_ID();
    public bool get_IsAccentSensitive();
    public void set_IsAccentSensitive(bool value);
    public bool get_IsDefault();
    public void set_IsDefault(bool value);
    public int get_ItemCount();
    public string get_Owner();
    public void set_Owner(string value);
    public TimeSpan get_PopulationCompletionAge();
    public DateTime get_PopulationCompletionDate();
    public CatalogPopulationStatus get_PopulationStatus();
    public string get_RootPath();
    public void set_RootPath(string value);
    public int get_UniqueKeyCount();
    internal virtual String[] GetNonAlterableProperties();
    public sealed virtual void Deny(ObjectPermissionSet permission, String[] granteeNames);
    public sealed virtual void Deny(ObjectPermissionSet permission, String[] granteeNames, bool cascade);
    public sealed virtual void Grant(ObjectPermissionSet permission, String[] granteeNames);
    public sealed virtual void Grant(ObjectPermissionSet permission, String[] granteeNames, bool grantGrant);
    public sealed virtual void Grant(ObjectPermissionSet permission, String[] granteeNames, bool grantGrant, string asRole);
    public sealed virtual void Revoke(ObjectPermissionSet permission, String[] granteeNames);
    public sealed virtual void Revoke(ObjectPermissionSet permission, String[] granteeNames, bool revokeGrant, bool cascade);
    public void Revoke(ObjectPermissionSet permission, String[] granteeNames, bool revokeGrant, bool cascade, string asRole);
    public sealed virtual void Deny(ObjectPermissionSet permission, string granteeName);
    public sealed virtual void Deny(ObjectPermissionSet permission, string granteeName, bool cascade);
    public sealed virtual void Grant(ObjectPermissionSet permission, string granteeName);
    public sealed virtual void Grant(ObjectPermissionSet permission, string granteeName, bool grantGrant);
    public sealed virtual void Grant(ObjectPermissionSet permission, string granteeName, bool grantGrant, string asRole);
    public sealed virtual void Revoke(ObjectPermissionSet permission, string granteeName);
    public void Revoke(ObjectPermissionSet permission, string granteeName, bool revokeGrant, bool cascade);
    public sealed virtual void Revoke(ObjectPermissionSet permission, string granteeName, bool revokeGrant, bool cascade, string asRole);
    public sealed virtual ObjectPermissionInfo[] EnumObjectPermissions();
    public sealed virtual ObjectPermissionInfo[] EnumObjectPermissions(string granteeName);
    public sealed virtual ObjectPermissionInfo[] EnumObjectPermissions(ObjectPermissionSet permissions);
    public sealed virtual ObjectPermissionInfo[] EnumObjectPermissions(string granteeName, ObjectPermissionSet permissions);
}
[DefaultMemberAttribute("Item")]
public class Microsoft.SqlServer.Management.Smo.FullTextCatalogCollection : SimpleObjectCollectionBase {
    public Database Parent { get; }
    public FullTextCatalog Item { get; }
    public FullTextCatalog Item { get; }
    internal FullTextCatalogCollection(SqlSmoObject parentInstance);
    public Database get_Parent();
    public FullTextCatalog get_Item(int index);
    public FullTextCatalog get_Item(string name);
    public void CopyTo(FullTextCatalog[] array, int index);
    public FullTextCatalog ItemById(int id);
    protected virtual Type GetCollectionElementType();
    internal virtual SqlSmoObject GetCollectionElementInstance(ObjectKeyBase key, SqlSmoState state);
    public void Add(FullTextCatalog fullTextCatalog);
    internal SqlSmoObject GetObjectByName(string name);
    internal virtual ObjectKeyBase CreateKeyFromUrn(Urn urn);
}
[EvaluationModeAttribute("4")]
[PhysicalFacetAttribute]
[SfcElementAttribute("48")]
public class Microsoft.SqlServer.Management.Smo.FullTextIndex : SqlSmoObject {
    private FullTextIndexColumnCollection fullTextIndexColumns;
    internal bool noPopulation;
    internal object oldChangeTrackingValue;
    [SfcObjectAttribute("1")]
[SfcParentAttribute("Table")]
[SfcParentAttribute("View")]
public TableViewBase Parent { get; public set; }
    public static string UrnSuffix { get; }
    [SfcObjectAttribute("1", "1", "Microsoft.SqlServer.Management.Smo.FullTextIndexColumn")]
public FullTextIndexColumnCollection IndexedColumns { get; }
    private bool Microsoft.SqlServer.Management.Sdk.Sfc.ISfcSupportsDesignMode.IsDesignMode { get; }
    [SfcPropertyAttribute("3328")]
public string CatalogName { get; public set; }
    [SfcPropertyAttribute("3072")]
public ChangeTracking ChangeTracking { get; public set; }
    [SfcPropertyAttribute("3072")]
public int DocumentsProcessed { get; }
    [SfcPropertyAttribute("3328")]
public string FilegroupName { get; public set; }
    [SfcPropertyAttribute("3072")]
public bool IsEnabled { get; }
    [SfcPropertyAttribute("3072")]
public int ItemCount { get; }
    [SfcPropertyAttribute("3072")]
public int NumberOfFailures { get; }
    [SfcPropertyAttribute("3072")]
public int PendingChanges { get; }
    [SfcPropertyAttribute("3072")]
public IndexPopulationStatus PopulationStatus { get; }
    [SfcPropertyAttribute("3072")]
public string SearchPropertyListName { get; public set; }
    [SfcPropertyAttribute("3072")]
public string StopListName { get; public set; }
    [SfcPropertyAttribute("3072")]
public StopListOption StopListOption { get; public set; }
    [SfcPropertyAttribute("3328")]
public string UniqueIndexName { get; public set; }
    public FullTextIndex(TableViewBase parent);
    internal FullTextIndex(TableViewBase parent, ObjectKeyBase key, SqlSmoState state);
    public TableViewBase get_Parent();
    public void set_Parent(TableViewBase value);
    internal virtual void ValidateParent(SqlSmoObject newParent);
    internal virtual void UpdateObjectState();
    public static string get_UrnSuffix();
    protected sealed virtual void GetUrnRecursive(StringBuilder urnbuilder, UrnIdOption idOption);
    public FullTextIndexColumnCollection get_IndexedColumns();
    protected virtual void MarkDropped();
    public sealed virtual void Create();
    public void Create(bool noPopulation);
    internal virtual void ScriptCreate(StringCollection queries, ScriptingPreferences sp);
    protected virtual void PostCreate();
    public sealed virtual void Alter();
    public void Alter(bool noPopulation);
    internal virtual void ScriptAlter(StringCollection alterQuery, ScriptingPreferences sp);
    private void ScriptCreateFullTextIndex(StringCollection queries, ScriptingPreferences sp);
    private void ScriptAlterFullTextIndex(StringCollection queries, ScriptingPreferences sp);
    public sealed virtual void Drop();
    public sealed virtual void DropIfExists();
    internal virtual void ScriptDrop(StringCollection dropQuery, ScriptingPreferences sp);
    public sealed virtual StringCollection Script();
    public sealed virtual StringCollection Script(ScriptingOptions scriptingOptions);
    internal virtual PropagateInfo[] GetPropagateInfo(PropagateAction action);
    public void Disable();
    internal void ScriptDisable(StringCollection queries);
    internal void ScriptDisable(StringCollection queries, ScriptingPreferences sp);
    public void Enable();
    public void StartPopulation(IndexPopulationAction action);
    public void StopPopulation();
    public virtual void Refresh();
    internal virtual void ValidateProperty(Property prop, object value);
    internal static String[] GetScriptFields(Type parentType, ServerVersion version, DatabaseEngineType databaseEngineType, DatabaseEngineEdition databaseEngineEdition, bool defaultTextMode);
    private sealed virtual override bool Microsoft.SqlServer.Management.Sdk.Sfc.ISfcSupportsDesignMode.get_IsDesignMode();
    internal virtual SqlPropertyMetadataProvider GetPropertyMetadataProvider();
    public string get_CatalogName();
    public void set_CatalogName(string value);
    public ChangeTracking get_ChangeTracking();
    public void set_ChangeTracking(ChangeTracking value);
    public int get_DocumentsProcessed();
    public string get_FilegroupName();
    public void set_FilegroupName(string value);
    public bool get_IsEnabled();
    public int get_ItemCount();
    public int get_NumberOfFailures();
    public int get_PendingChanges();
    public IndexPopulationStatus get_PopulationStatus();
    public string get_SearchPropertyListName();
    public void set_SearchPropertyListName(string value);
    public string get_StopListName();
    public void set_StopListName(string value);
    public StopListOption get_StopListOption();
    public void set_StopListOption(StopListOption value);
    public string get_UniqueIndexName();
    public void set_UniqueIndexName(string value);
    internal virtual String[] GetNonAlterableProperties();
}
[SfcElementAttribute("48")]
public class Microsoft.SqlServer.Management.Smo.FullTextIndexColumn : ScriptNameObjectBase {
    internal bool noPopulation;
    public static string UrnSuffix { get; }
    [SfcKeyAttribute("0")]
[SfcPropertyAttribute("1280")]
public string Name { get; public set; }
    [SfcObjectAttribute("1")]
public FullTextIndex Parent { get; public set; }
    [SfcPropertyAttribute("3328")]
public string Language { get; public set; }
    [SfcPropertyAttribute("3328")]
public int StatisticalSemantics { get; public set; }
    [SfcPropertyAttribute("3328")]
public string TypeColumnName { get; public set; }
    internal FullTextIndexColumn(AbstractCollectionBase parentColl, ObjectKeyBase key, SqlSmoState state);
    public FullTextIndexColumn(FullTextIndex fullTextIndex, string name);
    public static string get_UrnSuffix();
    public virtual string get_Name();
    public virtual void set_Name(string value);
    public sealed virtual void Alter();
    public void Alter(bool noPopulation);
    internal virtual void ScriptAlter(StringCollection alterQuery, ScriptingPreferences sp);
    internal void ScriptAlterFullTextIndexColumn(StringCollection queries, ScriptingPreferences sp);
    public sealed virtual void Create();
    public void Create(bool noPopulation);
    internal virtual void ScriptCreate(StringCollection queries, ScriptingPreferences sp);
    internal void ScriptCreateFullTextIndexColumn(StringCollection queries, ScriptingPreferences sp);
    public sealed virtual void Drop();
    public void Drop(bool noPopulation);
    internal virtual void ScriptDrop(StringCollection dropQuery, ScriptingPreferences sp);
    public sealed virtual StringCollection Script();
    public sealed virtual StringCollection Script(ScriptingOptions scriptingOptions);
    internal static String[] GetScriptFields(Type parentType, ServerVersion version, DatabaseEngineType databaseEngineType, DatabaseEngineEdition databaseEngineEdition, bool defaultTextMode);
    public FullTextIndex get_Parent();
    public void set_Parent(FullTextIndex value);
    internal virtual SqlPropertyMetadataProvider GetPropertyMetadataProvider();
    public string get_Language();
    public void set_Language(string value);
    public int get_StatisticalSemantics();
    public void set_StatisticalSemantics(int value);
    public string get_TypeColumnName();
    public void set_TypeColumnName(string value);
    internal virtual String[] GetNonAlterableProperties();
}
[DefaultMemberAttribute("Item")]
public class Microsoft.SqlServer.Management.Smo.FullTextIndexColumnCollection : SimpleObjectCollectionBase {
    public FullTextIndex Parent { get; }
    public FullTextIndexColumn Item { get; }
    public FullTextIndexColumn Item { get; }
    internal FullTextIndexColumnCollection(SqlSmoObject parentInstance);
    public FullTextIndex get_Parent();
    public FullTextIndexColumn get_Item(int index);
    public FullTextIndexColumn get_Item(string name);
    public void CopyTo(FullTextIndexColumn[] array, int index);
    protected virtual Type GetCollectionElementType();
    internal virtual SqlSmoObject GetCollectionElementInstance(ObjectKeyBase key, SqlSmoState state);
    public void Remove(FullTextIndexColumn fullTextIndexColumn);
    public void Remove(string name);
    public void Add(FullTextIndexColumn fullTextIndexColumn);
    internal SqlSmoObject GetObjectByName(string name);
    internal virtual ObjectKeyBase CreateKeyFromUrn(Urn urn);
}
[SfcElementAttribute("48")]
public class Microsoft.SqlServer.Management.Smo.FullTextService : ScriptNameObjectBase {
    [SfcObjectAttribute("1")]
public Server Parent { get; }
    public static string UrnSuffix { get; }
    [SfcKeyAttribute("0")]
[SfcPropertyAttribute("1280")]
public string Name { get; public set; }
    [SfcPropertyAttribute("3072")]
public bool AllowUnsignedBinaries { get; public set; }
    [SfcPropertyAttribute("3072")]
public FullTextCatalogUpgradeOption CatalogUpgradeOption { get; public set; }
    [SfcPropertyAttribute("3072")]
public TimeSpan ConnectTimeout { get; public set; }
    [SfcPropertyAttribute("3072")]
public TimeSpan DataTimeout { get; public set; }
    [SfcPropertyAttribute("3072")]
public string DefaultPath { get; }
    [SfcPropertyAttribute("3072")]
public bool LoadOSResourcesEnabled { get; public set; }
    [SfcPropertyAttribute("3072")]
public ResourceUsage ResourceUsage { get; public set; }
    internal FullTextService(Server parentsrv, ObjectKeyBase key, SqlSmoState state);
    public Server get_Parent();
    protected sealed virtual void GetUrnRecursive(StringBuilder urnbuilder, UrnIdOption idOption);
    public static string get_UrnSuffix();
    public virtual string get_Name();
    public virtual void set_Name(string value);
    public void Cleanup();
    public void UpdateLanguageResources();
    public sealed virtual void Alter();
    public sealed virtual StringCollection Script();
    public sealed virtual StringCollection Script(ScriptingOptions scriptingOptions);
    internal virtual void ScriptCreate(StringCollection queries, ScriptingPreferences sp);
    internal virtual void ScriptAlter(StringCollection queries, ScriptingPreferences sp);
    private void ScriptService(StringCollection queries, ScriptingPreferences sp);
    public DataTable EnumLanguages();
    public DataTable EnumSemanticLanguages();
    internal virtual SqlPropertyMetadataProvider GetPropertyMetadataProvider();
    public bool get_AllowUnsignedBinaries();
    public void set_AllowUnsignedBinaries(bool value);
    public FullTextCatalogUpgradeOption get_CatalogUpgradeOption();
    public void set_CatalogUpgradeOption(FullTextCatalogUpgradeOption value);
    public TimeSpan get_ConnectTimeout();
    public void set_ConnectTimeout(TimeSpan value);
    public TimeSpan get_DataTimeout();
    public void set_DataTimeout(TimeSpan value);
    public string get_DefaultPath();
    public bool get_LoadOSResourcesEnabled();
    public void set_LoadOSResourcesEnabled(bool value);
    public ResourceUsage get_ResourceUsage();
    public void set_ResourceUsage(ResourceUsage value);
}
[EvaluationModeAttribute("4")]
[PhysicalFacetAttribute]
[SfcElementAttribute("48")]
public class Microsoft.SqlServer.Management.Smo.FullTextStopList : ScriptNameObjectBase {
    private Dictionary`2<string, List`1<string>> stopListCollection;
    internal string srcFullTextStopListName;
    internal string srcDbName;
    internal bool srcSystemDefault;
    public static string UrnSuffix { get; }
    [SfcKeyAttribute("0")]
[SfcPropertyAttribute("1280")]
public string Name { get; public set; }
    [SfcObjectAttribute("1")]
public Database Parent { get; public set; }
    internal UserPermissionCollection Permissions { get; }
    private bool Microsoft.SqlServer.Management.Sdk.Sfc.ISfcSupportsDesignMode.IsDesignMode { get; }
    [SfcPropertyAttribute("3072")]
public int ID { get; }
    [SfcPropertyAttribute("3328")]
[SfcReferenceAttribute("Microsoft.SqlServer.Management.Smo.User", "Server[@Name = '{0}']/Database[@Name = '{1}']/User[@Name = '{2}']", "Mono.Cecil.CustomAttributeArgument[]")]
[SfcReferenceAttribute("Microsoft.SqlServer.Management.Smo.DatabaseRole", "Server[@Name = '{0}']/Database[@Name = '{1}']/Role[@Name = '{2}']", "Mono.Cecil.CustomAttributeArgument[]")]
[SfcReferenceAttribute("Microsoft.SqlServer.Management.Smo.ApplicationRole", "Server[@Name = '{0}']/Database[@Name = '{1}']/ApplicationRole[@Name = '{2}']", "Mono.Cecil.CustomAttributeArgument[]")]
[CLSCompliantAttribute("False")]
public string Owner { get; public set; }
    internal FullTextStopList(AbstractCollectionBase parentColl, ObjectKeyBase key, SqlSmoState state);
    public FullTextStopList(Database database, string name);
    public static string get_UrnSuffix();
    public virtual string get_Name();
    public virtual void set_Name(string value);
    public sealed virtual void Create();
    public void CreateFromExistingStopList(string stoplistName);
    public void CreateFromExistingStopList(string dbName, string stoplistName);
    public void CreateFromSystemStopList();
    internal virtual void ScriptCreate(StringCollection createQuery, ScriptingPreferences sp);
    public sealed virtual void Drop();
    public sealed virtual void DropIfExists();
    internal virtual void ScriptDrop(StringCollection dropQuery, ScriptingPreferences sp);
    public sealed virtual StringCollection Script();
    public sealed virtual StringCollection Script(ScriptingOptions scriptingOptions);
    public DataTable EnumStopWords();
    public bool HasStopWord(string stopword, string language);
    public void AddStopWord(string stopword, string language);
    public void RemoveStopWord(string stopword, string language);
    public void RemoveAllStopWords();
    public void RemoveAllStopWords(string language);
    public Database get_Parent();
    public void set_Parent(Database value);
    internal virtual UserPermissionCollection get_Permissions();
    private sealed virtual override bool Microsoft.SqlServer.Management.Sdk.Sfc.ISfcSupportsDesignMode.get_IsDesignMode();
    internal virtual SqlPropertyMetadataProvider GetPropertyMetadataProvider();
    public int get_ID();
    public string get_Owner();
    public void set_Owner(string value);
    internal virtual String[] GetNonAlterableProperties();
    public sealed virtual void Deny(ObjectPermissionSet permission, String[] granteeNames);
    public sealed virtual void Deny(ObjectPermissionSet permission, String[] granteeNames, bool cascade);
    public sealed virtual void Grant(ObjectPermissionSet permission, String[] granteeNames);
    public sealed virtual void Grant(ObjectPermissionSet permission, String[] granteeNames, bool grantGrant);
    public sealed virtual void Grant(ObjectPermissionSet permission, String[] granteeNames, bool grantGrant, string asRole);
    public sealed virtual void Revoke(ObjectPermissionSet permission, String[] granteeNames);
    public sealed virtual void Revoke(ObjectPermissionSet permission, String[] granteeNames, bool revokeGrant, bool cascade);
    public void Revoke(ObjectPermissionSet permission, String[] granteeNames, bool revokeGrant, bool cascade, string asRole);
    public sealed virtual void Deny(ObjectPermissionSet permission, string granteeName);
    public sealed virtual void Deny(ObjectPermissionSet permission, string granteeName, bool cascade);
    public sealed virtual void Grant(ObjectPermissionSet permission, string granteeName);
    public sealed virtual void Grant(ObjectPermissionSet permission, string granteeName, bool grantGrant);
    public sealed virtual void Grant(ObjectPermissionSet permission, string granteeName, bool grantGrant, string asRole);
    public sealed virtual void Revoke(ObjectPermissionSet permission, string granteeName);
    public void Revoke(ObjectPermissionSet permission, string granteeName, bool revokeGrant, bool cascade);
    public sealed virtual void Revoke(ObjectPermissionSet permission, string granteeName, bool revokeGrant, bool cascade, string asRole);
    public sealed virtual ObjectPermissionInfo[] EnumObjectPermissions();
    public sealed virtual ObjectPermissionInfo[] EnumObjectPermissions(string granteeName);
    public sealed virtual ObjectPermissionInfo[] EnumObjectPermissions(ObjectPermissionSet permissions);
    public sealed virtual ObjectPermissionInfo[] EnumObjectPermissions(string granteeName, ObjectPermissionSet permissions);
}
[DefaultMemberAttribute("Item")]
public class Microsoft.SqlServer.Management.Smo.FullTextStopListCollection : SimpleObjectCollectionBase {
    public Database Parent { get; }
    public FullTextStopList Item { get; }
    public FullTextStopList Item { get; }
    internal FullTextStopListCollection(SqlSmoObject parentInstance);
    public Database get_Parent();
    public FullTextStopList get_Item(int index);
    public FullTextStopList get_Item(string name);
    public void CopyTo(FullTextStopList[] array, int index);
    public FullTextStopList ItemById(int id);
    protected virtual Type GetCollectionElementType();
    internal virtual SqlSmoObject GetCollectionElementInstance(ObjectKeyBase key, SqlSmoState state);
    public void Add(FullTextStopList fullTextStopList);
    internal SqlSmoObject GetObjectByName(string name);
    internal virtual ObjectKeyBase CreateKeyFromUrn(Urn urn);
}
public enum Microsoft.SqlServer.Management.Smo.GeneratedAlwaysType : Enum {
    public int value__;
    public static GeneratedAlwaysType None;
    public static GeneratedAlwaysType AsRowStart;
    public static GeneratedAlwaysType AsRowEnd;
    public static GeneratedAlwaysType AsTransactionIdStart;
    public static GeneratedAlwaysType AsTransactionIdEnd;
    public static GeneratedAlwaysType AsSequenceNumberStart;
    public static GeneratedAlwaysType AsSequenceNumberEnd;
}
internal class Microsoft.SqlServer.Management.Smo.Globals : object {
    public static string comma;
    public static string statementTerminator;
    public static string space;
    public static string commaspace;
    public static string LParen;
    public static string RParen;
    public static string newline;
    public static string tab;
    public static string percent;
    public static string LBracket;
    public static string RBracket;
    public static string Dot;
    public static string Go;
    public static string On;
    public static string Off;
    public static string For;
    public static string With;
    public static string EqualSign;
    public static int INIT_BUFFER_SIZE;
    public static string InstanceNameSeparator;
    private static Globals();
}
internal class Microsoft.SqlServer.Management.Smo.GswDatabasePrefetch : DefaultDatabasePrefetch {
    private static int MAX_BATCH_SIZE;
    private PrefetchBatchEventHandler prefetchBatchEvent;
    public GswDatabasePrefetch(Database db, ScriptingPreferences scriptingPreferences, HashSet`1<UrnTypeKey> filteredTypes);
    private static GswDatabasePrefetch();
    public void add_PrefetchBatchEvent(PrefetchBatchEventHandler value);
    public void remove_PrefetchBatchEvent(PrefetchBatchEventHandler value);
    protected virtual void InitializeBatchedPrefetchDictionary();
    protected virtual void InitializePrefetchableTypes();
    protected virtual IEnumerable`1<Urn> PrePrefetchBatches();
    protected virtual void PostPrefetchBatch(string urnType, HashSet`1<Urn> urnBatch, int currentBatchCount, int totalBatchCount);
    protected virtual void PrefetchBatch(string urnType, HashSet`1<Urn> urnBatch, int currentBatchCount, int totalBatchCount);
    protected virtual void PrefetchUsingIN(string idFilter, string initializeCollectionsFilter, string type, IEnumerable`1<string> prefetchingList);
    protected virtual List`1<string> GetChildrenList(string urnType);
}
[SfcElementTypeAttribute("Http")]
[SfcElementAttribute("16")]
public class Microsoft.SqlServer.Management.Smo.HttpProtocol : EndpointProtocol {
    public static string UrnSuffix { get; }
    [SfcPropertyAttribute("1024")]
public string AuthenticationRealm { get; public set; }
    [SfcPropertyAttribute("1024")]
public int ClearPort { get; public set; }
    [SfcPropertyAttribute("1024")]
public string DefaultLogonDomain { get; public set; }
    [SfcPropertyAttribute("1024")]
public HttpAuthenticationModes HttpAuthenticationModes { get; public set; }
    [SfcPropertyAttribute("1024")]
public HttpPortTypes HttpPortTypes { get; public set; }
    [SfcPropertyAttribute("1024")]
public bool IsCompressionEnabled { get; public set; }
    [SfcPropertyAttribute("1024")]
public bool IsSystemObject { get; }
    [SfcPropertyAttribute("1024")]
public int SslPort { get; public set; }
    [SfcPropertyAttribute("1024")]
public string WebSite { get; public set; }
    [SfcPropertyAttribute("1024")]
public string WebSiteUrlPath { get; public set; }
    internal HttpProtocol(Endpoint parentEndpoint, ObjectKeyBase key, SqlSmoState state);
    public static string get_UrnSuffix();
    protected sealed virtual void GetUrnRecursive(StringBuilder urnbuilder, UrnIdOption idOption);
    public void Create();
    internal virtual void Script(StringBuilder sb, ScriptingPreferences sp);
    internal virtual SqlPropertyMetadataProvider GetPropertyMetadataProvider();
    public string get_AuthenticationRealm();
    public void set_AuthenticationRealm(string value);
    public int get_ClearPort();
    public void set_ClearPort(int value);
    public string get_DefaultLogonDomain();
    public void set_DefaultLogonDomain(string value);
    public HttpAuthenticationModes get_HttpAuthenticationModes();
    public void set_HttpAuthenticationModes(HttpAuthenticationModes value);
    public HttpPortTypes get_HttpPortTypes();
    public void set_HttpPortTypes(HttpPortTypes value);
    public bool get_IsCompressionEnabled();
    public void set_IsCompressionEnabled(bool value);
    public bool get_IsSystemObject();
    public int get_SslPort();
    public void set_SslPort(int value);
    public string get_WebSite();
    public void set_WebSite(string value);
    public string get_WebSiteUrlPath();
    public void set_WebSiteUrlPath(string value);
}
[EvaluationModeAttribute("4")]
[TypeConverterAttribute("Microsoft.SqlServer.Management.Sdk.Sfc.LocalizableTypeConverter")]
[LocalizedPropertyResourcesAttribute("Microsoft.SqlServer.Management.Smo.FacetSR")]
[DisplayNameKeyAttribute("AvailabilityGroupStateName")]
[DisplayDescriptionKeyAttribute("AvailabilityGroupStateDesc")]
public interface Microsoft.SqlServer.Management.Smo.IAvailabilityGroupState {
    [DisplayNameKeyAttribute("AvailabilityGroupState_IsOnlineName")]
[DisplayDescriptionKeyAttribute("AvailabilityGroupState_IsOnlineDesc")]
public bool IsOnline { get; }
    [DisplayNameKeyAttribute("AvailabilityGroupState_IsAutoFailoverName")]
[DisplayDescriptionKeyAttribute("AvailabilityGroupState_IsAutoFailoverDesc")]
public bool IsAutoFailover { get; }
    [DisplayNameKeyAttribute("AvailabilityGroupState_NumberOfSynchronizedSecondaryReplicasName")]
[DisplayDescriptionKeyAttribute("AvailabilityGroupState_NumberOfSynchronizedSecondaryReplicasDesc")]
public int NumberOfSynchronizedSecondaryReplicas { get; }
    [DisplayNameKeyAttribute("AvailabilityGroupState_NumberOfNotSynchronizingReplicasName")]
[DisplayDescriptionKeyAttribute("AvailabilityGroupState_NumberOfNotSynchronizingReplicasDesc")]
public int NumberOfNotSynchronizingReplicas { get; }
    [DisplayNameKeyAttribute("AvailabilityGroupState_NumberOfNotSynchronizedReplicasName")]
[DisplayDescriptionKeyAttribute("AvailabilityGroupState_NumberOfNotSynchronizedReplicasDesc")]
public int NumberOfNotSynchronizedReplicas { get; }
    [DisplayNameKeyAttribute("AvailabilityGroupState_NumberOfReplicasWithUnhealthyRoleName")]
[DisplayDescriptionKeyAttribute("AvailabilityGroupState_NumberOfReplicasWithUnhealthyRoleDesc")]
public int NumberOfReplicasWithUnhealthyRole { get; }
    [DisplayNameKeyAttribute("AvailabilityGroupState_NumberOfDisconnectedReplicasName")]
[DisplayDescriptionKeyAttribute("AvailabilityGroupState_NumberOfDisconnectedReplicasDesc")]
public int NumberOfDisconnectedReplicas { get; }
    public abstract virtual bool get_IsOnline();
    public abstract virtual bool get_IsAutoFailover();
    public abstract virtual int get_NumberOfSynchronizedSecondaryReplicas();
    public abstract virtual int get_NumberOfNotSynchronizingReplicas();
    public abstract virtual int get_NumberOfNotSynchronizedReplicas();
    public abstract virtual int get_NumberOfReplicasWithUnhealthyRole();
    public abstract virtual int get_NumberOfDisconnectedReplicas();
}
public interface Microsoft.SqlServer.Management.Smo.IColumnPermission {
    public abstract virtual void Deny(ObjectPermissionSet permissions, String[] granteeNames, String[] columnNames);
    public abstract virtual void Deny(ObjectPermissionSet permissions, string granteeName, String[] columnNames);
    public abstract virtual void Deny(ObjectPermissionSet permissions, String[] granteeNames, String[] columnNames, bool cascade);
    public abstract virtual void Deny(ObjectPermissionSet permissions, string granteeName, String[] columnNames, bool cascade);
    public abstract virtual void Grant(ObjectPermissionSet permissions, String[] granteeNames, String[] columnNames);
    public abstract virtual void Grant(ObjectPermissionSet permissions, string granteeName, String[] columnNames);
    public abstract virtual void Grant(ObjectPermissionSet permissions, String[] granteeNames, String[] columnNames, bool grantGrant);
    public abstract virtual void Grant(ObjectPermissionSet permissions, string granteeName, String[] columnNames, bool grantGrant);
    public abstract virtual void Grant(ObjectPermissionSet permissions, String[] granteeNames, String[] columnNames, bool grantGrant, string asRole);
    public abstract virtual void Grant(ObjectPermissionSet permissions, string granteeName, String[] columnNames, bool grantGrant, string asRole);
    public abstract virtual void Revoke(ObjectPermissionSet permissions, String[] granteeNames, String[] columnNames);
    public abstract virtual void Revoke(ObjectPermissionSet permissions, string granteeName, String[] columnNames);
    public abstract virtual void Revoke(ObjectPermissionSet permissions, String[] granteeNames, String[] columnNames, bool revokeGrant, bool cascade);
    public abstract virtual void Revoke(ObjectPermissionSet permissions, string granteeName, String[] columnNames, bool revokeGrant, bool cascade);
    public abstract virtual void Revoke(ObjectPermissionSet permissions, String[] granteeNames, String[] columnNames, bool revokeGrant, bool cascade, string asRole);
    public abstract virtual void Revoke(ObjectPermissionSet permissions, string granteeName, String[] columnNames, bool revokeGrant, bool cascade, string asRole);
    public abstract virtual ObjectPermissionInfo[] EnumColumnPermissions(string granteeName);
    public abstract virtual ObjectPermissionInfo[] EnumColumnPermissions(string granteeName, ObjectPermissionSet permissions);
}
[EvaluationModeAttribute("4")]
[CLSCompliantAttribute("False")]
[TypeConverterAttribute("Microsoft.SqlServer.Management.Sdk.Sfc.LocalizableTypeConverter")]
[LocalizedPropertyResourcesAttribute("Microsoft.SqlServer.Management.Smo.LocalizableResources")]
[DisplayNameKeyAttribute("IDatabaseMaintenanceFacet_Name")]
[DisplayDescriptionKeyAttribute("IDatabaseMaintenanceFacet_Desc")]
public interface Microsoft.SqlServer.Management.Smo.IDatabaseMaintenanceFacet {
    [DisplayNameKeyAttribute("Database_RecoveryModelName")]
[DisplayDescriptionKeyAttribute("Database_RecoveryModelDesc")]
public RecoveryModel RecoveryModel { get; public set; }
    [DisplayNameKeyAttribute("Database_ReadOnlyName")]
[DisplayDescriptionKeyAttribute("Database_ReadOnlyDesc")]
public bool ReadOnly { get; public set; }
    [DisplayNameKeyAttribute("Database_PageVerifyName")]
[DisplayDescriptionKeyAttribute("Database_PageVerifyDesc")]
public PageVerify PageVerify { get; public set; }
    [DisplayNameKeyAttribute("Database_StatusName")]
[DisplayDescriptionKeyAttribute("Database_StatusDesc")]
public DatabaseStatus Status { get; }
    [DisplayNameKeyAttribute("Database_LastBackupDateName")]
[DisplayDescriptionKeyAttribute("Database_LastBackupDateDesc")]
public DateTime LastBackupDate { get; }
    [DisplayNameKeyAttribute("Database_LastLogBackupDateName")]
[DisplayDescriptionKeyAttribute("Database_LastLogBackupDateDesc")]
public DateTime LastLogBackupDate { get; }
    [DisplayNameKeyAttribute("IDatabaseMaintenanceFacet_DataAndBackupOnSeparateLogicalVolumesName")]
[DisplayDescriptionKeyAttribute("IDatabaseMaintenanceFacet_DataAndBackupOnSeparateLogicalVolumesDesc")]
public bool DataAndBackupOnSeparateLogicalVolumes { get; }
    [DisplayNameKeyAttribute("Database_TargetRecoveryTimeName")]
[DisplayDescriptionKeyAttribute("Database_TargetRecoveryTimeDesc")]
public int TargetRecoveryTime { get; public set; }
    [DisplayNameKeyAttribute("Database_DelayedDurabilityName")]
[DisplayDescriptionKeyAttribute("Database_DelayedDurabilityDesc")]
public DelayedDurability DelayedDurability { get; public set; }
    public abstract virtual RecoveryModel get_RecoveryModel();
    public abstract virtual void set_RecoveryModel(RecoveryModel value);
    public abstract virtual bool get_ReadOnly();
    public abstract virtual void set_ReadOnly(bool value);
    public abstract virtual PageVerify get_PageVerify();
    public abstract virtual void set_PageVerify(PageVerify value);
    public abstract virtual DatabaseStatus get_Status();
    public abstract virtual DateTime get_LastBackupDate();
    public abstract virtual DateTime get_LastLogBackupDate();
    public abstract virtual bool get_DataAndBackupOnSeparateLogicalVolumes();
    public abstract virtual int get_TargetRecoveryTime();
    public abstract virtual void set_TargetRecoveryTime(int value);
    public abstract virtual DelayedDurability get_DelayedDurability();
    public abstract virtual void set_DelayedDurability(DelayedDurability value);
}
[CLSCompliantAttribute("False")]
[StateChangeEventAttribute("CREATE_DATABASE", "DATABASE")]
[StateChangeEventAttribute("ALTER_DATABASE", "DATABASE")]
[StateChangeEventAttribute("ALTER_AUTHORIZATION_DATABASE", "DATABASE")]
[EvaluationModeAttribute("6")]
[LocalizedPropertyResourcesAttribute("Microsoft.SqlServer.Management.Smo.LocalizableResources")]
[TypeConverterAttribute("Microsoft.SqlServer.Management.Sdk.Sfc.LocalizableTypeConverter")]
[DisplayNameKeyAttribute("IDatabaseOptions_Name")]
[DisplayDescriptionKeyAttribute("IDatabaseOptions_Desc")]
public interface Microsoft.SqlServer.Management.Smo.IDatabaseOptions {
    [DisplayNameKeyAttribute("Database_AnsiNullDefaultName")]
[DisplayDescriptionKeyAttribute("Database_AnsiNullDefaultDesc")]
public bool AnsiNullDefault { get; public set; }
    [DisplayNameKeyAttribute("Database_AnsiNullsEnabledName")]
[DisplayDescriptionKeyAttribute("Database_AnsiNullsEnabledDesc")]
public bool AnsiNullsEnabled { get; public set; }
    [DisplayNameKeyAttribute("Database_AnsiPaddingEnabledName")]
[DisplayDescriptionKeyAttribute("Database_AnsiPaddingEnabledDesc")]
public bool AnsiPaddingEnabled { get; public set; }
    [DisplayNameKeyAttribute("Database_AnsiWarningsEnabledName")]
[DisplayDescriptionKeyAttribute("Database_AnsiWarningsEnabledDesc")]
public bool AnsiWarningsEnabled { get; public set; }
    [DisplayNameKeyAttribute("Database_ArithmeticAbortEnabledName")]
[DisplayDescriptionKeyAttribute("Database_ArithmeticAbortEnabledDesc")]
public bool ArithmeticAbortEnabled { get; public set; }
    [DisplayNameKeyAttribute("Database_AutoCloseName")]
[DisplayDescriptionKeyAttribute("Database_AutoCloseDesc")]
public bool AutoClose { get; public set; }
    [DisplayNameKeyAttribute("Database_AutoCreateStatisticsEnabledName")]
[DisplayDescriptionKeyAttribute("Database_AutoCreateStatisticsEnabledDesc")]
public bool AutoCreateStatisticsEnabled { get; public set; }
    [DisplayNameKeyAttribute("Database_AutoCreateIncrementalStatisticsEnabledName")]
[DisplayDescriptionKeyAttribute("Database_AutoCreateIncrementalStatisticsEnabledDesc")]
public bool AutoCreateIncrementalStatisticsEnabled { get; public set; }
    [DisplayNameKeyAttribute("Database_AutoShrinkName")]
[DisplayDescriptionKeyAttribute("Database_AutoShrinkDesc")]
public bool AutoShrink { get; public set; }
    [DisplayNameKeyAttribute("Database_AutoUpdateStatisticsAsyncName")]
[DisplayDescriptionKeyAttribute("Database_AutoUpdateStatisticsAsyncDesc")]
public bool AutoUpdateStatisticsAsync { get; public set; }
    [DisplayNameKeyAttribute("Database_AutoUpdateStatisticsEnabledName")]
[DisplayDescriptionKeyAttribute("Database_AutoUpdateStatisticsEnabledDesc")]
public bool AutoUpdateStatisticsEnabled { get; public set; }
    [DisplayNameKeyAttribute("Database_BrokerEnabledName")]
[DisplayDescriptionKeyAttribute("Database_BrokerEnabledDesc")]
public bool BrokerEnabled { get; public set; }
    [DisplayNameKeyAttribute("Database_ChangeTrackingAutoCleanUpName")]
[DisplayDescriptionKeyAttribute("Database_ChangeTrackingAutoCleanUpDesc")]
public bool ChangeTrackingAutoCleanUp { get; public set; }
    [DisplayNameKeyAttribute("Database_ChangeTrackingEnabledName")]
[DisplayDescriptionKeyAttribute("Database_ChangeTrackingEnabledDesc")]
public bool ChangeTrackingEnabled { get; public set; }
    [DisplayNameKeyAttribute("Database_ChangeTrackingRetentionPeriodName")]
[DisplayDescriptionKeyAttribute("Database_ChangeTrackingRetentionPeriodDesc")]
public int ChangeTrackingRetentionPeriod { get; public set; }
    [DisplayNameKeyAttribute("Database_ChangeTrackingRetentionPeriodUnitsName")]
[DisplayDescriptionKeyAttribute("Database_ChangeTrackingRetentionPeriodUnitsDesc")]
public RetentionPeriodUnits ChangeTrackingRetentionPeriodUnits { get; public set; }
    [DisplayNameKeyAttribute("Database_CloseCursorsOnCommitEnabledName")]
[DisplayDescriptionKeyAttribute("Database_CloseCursorsOnCommitEnabledDesc")]
public bool CloseCursorsOnCommitEnabled { get; public set; }
    [DisplayNameKeyAttribute("Database_CollationName")]
[DisplayDescriptionKeyAttribute("Database_CollationDesc")]
public string Collation { get; public set; }
    [DisplayNameKeyAttribute("Database_CompatibilityLevelName")]
[DisplayDescriptionKeyAttribute("Database_CompatibilityLevelDesc")]
public CompatibilityLevel CompatibilityLevel { get; public set; }
    [DisplayNameKeyAttribute("Database_ConcatenateNullYieldsNullName")]
[DisplayDescriptionKeyAttribute("Database_ConcatenateNullYieldsNullDesc")]
public bool ConcatenateNullYieldsNull { get; public set; }
    [DisplayNameKeyAttribute("Database_CreateDateName")]
[DisplayDescriptionKeyAttribute("Database_CreateDateDesc")]
public DateTime CreateDate { get; }
    [DisplayNameKeyAttribute("Database_DatabaseOwnershipChainingName")]
[DisplayDescriptionKeyAttribute("Database_DatabaseOwnershipChainingDesc")]
public bool DatabaseOwnershipChaining { get; public set; }
    [DisplayNameKeyAttribute("Database_DatabaseSnapshotBaseNameName")]
[DisplayDescriptionKeyAttribute("Database_DatabaseSnapshotBaseNameDesc")]
public string DatabaseSnapshotBaseName { get; }
    [DisplayNameKeyAttribute("Database_DateCorrelationOptimizationName")]
[DisplayDescriptionKeyAttribute("Database_DateCorrelationOptimizationDesc")]
public bool DateCorrelationOptimization { get; public set; }
    [DisplayNameKeyAttribute("Database_DefaultFileGroupName")]
[DisplayDescriptionKeyAttribute("Database_DefaultFileGroupDesc")]
public string DefaultFileGroup { get; }
    [DisplayNameKeyAttribute("Database_DefaultFileStreamFileGroupName")]
[DisplayDescriptionKeyAttribute("Database_DefaultFileStreamFileGroupDesc")]
public string DefaultFileStreamFileGroup { get; }
    [DisplayNameKeyAttribute("Database_EncryptionEnabledName")]
[DisplayDescriptionKeyAttribute("Database_EncryptionEnabledDesc")]
public bool EncryptionEnabled { get; public set; }
    [DisplayNameKeyAttribute("Database_HonorBrokerPriorityName")]
[DisplayDescriptionKeyAttribute("Database_HonorBrokerPriorityDesc")]
public bool HonorBrokerPriority { get; public set; }
    [DisplayNameKeyAttribute("Database_IDName")]
[DisplayDescriptionKeyAttribute("Database_IDDesc")]
public int ID { get; }
    [DisplayNameKeyAttribute("Database_IsLedgerName")]
[DisplayDescriptionKeyAttribute("Database_IsLedgerDesc")]
public bool IsLedger { get; public set; }
    [DisplayNameKeyAttribute("Database_IsParameterizationForcedName")]
[DisplayDescriptionKeyAttribute("Database_IsParameterizationForcedDesc")]
public bool IsParameterizationForced { get; public set; }
    [DisplayNameKeyAttribute("Database_IsReadCommittedSnapshotOnName")]
[DisplayDescriptionKeyAttribute("Database_IsReadCommittedSnapshotOnDesc")]
public bool IsReadCommittedSnapshotOn { get; public set; }
    [DisplayNameKeyAttribute("Database_IsSystemObjectName")]
[DisplayDescriptionKeyAttribute("Database_IsSystemObjectDesc")]
public bool IsSystemObject { get; }
    [DisplayNameKeyAttribute("Database_IsUpdateableName")]
[DisplayDescriptionKeyAttribute("Database_IsUpdateableDesc")]
public bool IsUpdateable { get; }
    [DisplayNameKeyAttribute("Database_LocalCursorsDefaultName")]
[DisplayDescriptionKeyAttribute("Database_LocalCursorsDefaultDesc")]
public bool LocalCursorsDefault { get; public set; }
    [DisplayNameKeyAttribute("NamedSmoObject_NameName")]
[DisplayDescriptionKeyAttribute("NamedSmoObject_NameDesc")]
public string Name { get; }
    [DisplayNameKeyAttribute("Database_OwnerName")]
[DisplayDescriptionKeyAttribute("Database_OwnerDesc")]
public string Owner { get; }
    [DisplayNameKeyAttribute("Database_NumericRoundAbortEnabledName")]
[DisplayDescriptionKeyAttribute("Database_NumericRoundAbortEnabledDesc")]
public bool NumericRoundAbortEnabled { get; public set; }
    [DisplayNameKeyAttribute("Database_MirroringTimeoutName")]
[DisplayDescriptionKeyAttribute("Database_MirroringTimeoutDesc")]
public int MirroringTimeout { get; public set; }
    [DisplayNameKeyAttribute("Database_PageVerifyName")]
[DisplayDescriptionKeyAttribute("Database_PageVerifyDesc")]
public PageVerify PageVerify { get; public set; }
    [DisplayNameKeyAttribute("Database_PrimaryFilePathName")]
[DisplayDescriptionKeyAttribute("Database_PrimaryFilePathDesc")]
public string PrimaryFilePath { get; }
    [DisplayNameKeyAttribute("Database_QuotedIdentifiersEnabledName")]
[DisplayDescriptionKeyAttribute("Database_QuotedIdentifiersEnabledDesc")]
public bool QuotedIdentifiersEnabled { get; public set; }
    [DisplayNameKeyAttribute("Database_ReadOnlyName")]
[DisplayDescriptionKeyAttribute("Database_ReadOnlyDesc")]
public bool ReadOnly { get; public set; }
    [DisplayNameKeyAttribute("Database_RecoveryModelName")]
[DisplayDescriptionKeyAttribute("Database_RecoveryModelDesc")]
public RecoveryModel RecoveryModel { get; public set; }
    [DisplayNameKeyAttribute("Database_RecursiveTriggersEnabledName")]
[DisplayDescriptionKeyAttribute("Database_RecursiveTriggersEnabledDesc")]
public bool RecursiveTriggersEnabled { get; public set; }
    [DisplayNameKeyAttribute("Database_RemoteDataArchiveEnabledName")]
[DisplayDescriptionKeyAttribute("Database_RemoteDataArchiveEnabledDesc")]
public bool RemoteDataArchiveEnabled { get; public set; }
    [DisplayNameKeyAttribute("Database_RemoteDataArchiveEndpointName")]
[DisplayDescriptionKeyAttribute("Database_RemoteDataArchiveEndpointDesc")]
public string RemoteDataArchiveEndpoint { get; public set; }
    [DisplayNameKeyAttribute("Database_RemoteDataArchiveLinkedServerName")]
[DisplayDescriptionKeyAttribute("Database_RemoteDataArchiveLinkedServerDesc")]
public string RemoteDataArchiveLinkedServer { get; }
    [DisplayNameKeyAttribute("Database_RemoteDatabaseNameName")]
[DisplayDescriptionKeyAttribute("Database_RemoteDatabaseNameDesc")]
public string RemoteDatabaseName { get; }
    [DisplayNameKeyAttribute("Database_RemoteDataArchiveUseFederatedServiceAccount")]
[DisplayDescriptionKeyAttribute("Database_RemoteDataArchiveUseFederatedServiceAccountDesc")]
public bool RemoteDataArchiveUseFederatedServiceAccount { get; }
    [DisplayNameKeyAttribute("Database_RemoteDataArchiveCredentialName")]
[DisplayDescriptionKeyAttribute("Database_RemoteDataArchiveCredentialDesc")]
public string RemoteDataArchiveCredential { get; }
    [DisplayNameKeyAttribute("Database_TrustworthyName")]
[DisplayDescriptionKeyAttribute("Database_TrustworthyDesc")]
public bool Trustworthy { get; public set; }
    [DisplayNameKeyAttribute("Database_UserAccessName")]
[DisplayDescriptionKeyAttribute("Database_UserAccessDesc")]
public DatabaseUserAccess UserAccess { get; public set; }
    [DisplayNameKeyAttribute("Database_TargetRecoveryTimeName")]
[DisplayDescriptionKeyAttribute("Database_TargetRecoveryTimeDesc")]
public int TargetRecoveryTime { get; public set; }
    [DisplayNameKeyAttribute("Database_DelayedDurabilityName")]
[DisplayDescriptionKeyAttribute("Database_DelayedDurabilityDesc")]
public DelayedDurability DelayedDurability { get; public set; }
    public abstract virtual bool get_AnsiNullDefault();
    public abstract virtual void set_AnsiNullDefault(bool value);
    public abstract virtual bool get_AnsiNullsEnabled();
    public abstract virtual void set_AnsiNullsEnabled(bool value);
    public abstract virtual bool get_AnsiPaddingEnabled();
    public abstract virtual void set_AnsiPaddingEnabled(bool value);
    public abstract virtual bool get_AnsiWarningsEnabled();
    public abstract virtual void set_AnsiWarningsEnabled(bool value);
    public abstract virtual bool get_ArithmeticAbortEnabled();
    public abstract virtual void set_ArithmeticAbortEnabled(bool value);
    public abstract virtual bool get_AutoClose();
    public abstract virtual void set_AutoClose(bool value);
    public abstract virtual bool get_AutoCreateStatisticsEnabled();
    public abstract virtual void set_AutoCreateStatisticsEnabled(bool value);
    public abstract virtual bool get_AutoCreateIncrementalStatisticsEnabled();
    public abstract virtual void set_AutoCreateIncrementalStatisticsEnabled(bool value);
    public abstract virtual bool get_AutoShrink();
    public abstract virtual void set_AutoShrink(bool value);
    public abstract virtual bool get_AutoUpdateStatisticsAsync();
    public abstract virtual void set_AutoUpdateStatisticsAsync(bool value);
    public abstract virtual bool get_AutoUpdateStatisticsEnabled();
    public abstract virtual void set_AutoUpdateStatisticsEnabled(bool value);
    public abstract virtual bool get_BrokerEnabled();
    public abstract virtual void set_BrokerEnabled(bool value);
    public abstract virtual bool get_ChangeTrackingAutoCleanUp();
    public abstract virtual void set_ChangeTrackingAutoCleanUp(bool value);
    public abstract virtual bool get_ChangeTrackingEnabled();
    public abstract virtual void set_ChangeTrackingEnabled(bool value);
    public abstract virtual int get_ChangeTrackingRetentionPeriod();
    public abstract virtual void set_ChangeTrackingRetentionPeriod(int value);
    public abstract virtual RetentionPeriodUnits get_ChangeTrackingRetentionPeriodUnits();
    public abstract virtual void set_ChangeTrackingRetentionPeriodUnits(RetentionPeriodUnits value);
    public abstract virtual bool get_CloseCursorsOnCommitEnabled();
    public abstract virtual void set_CloseCursorsOnCommitEnabled(bool value);
    public abstract virtual string get_Collation();
    public abstract virtual void set_Collation(string value);
    public abstract virtual CompatibilityLevel get_CompatibilityLevel();
    public abstract virtual void set_CompatibilityLevel(CompatibilityLevel value);
    public abstract virtual bool get_ConcatenateNullYieldsNull();
    public abstract virtual void set_ConcatenateNullYieldsNull(bool value);
    public abstract virtual DateTime get_CreateDate();
    public abstract virtual bool get_DatabaseOwnershipChaining();
    public abstract virtual void set_DatabaseOwnershipChaining(bool value);
    public abstract virtual string get_DatabaseSnapshotBaseName();
    public abstract virtual bool get_DateCorrelationOptimization();
    public abstract virtual void set_DateCorrelationOptimization(bool value);
    public abstract virtual string get_DefaultFileGroup();
    public abstract virtual string get_DefaultFileStreamFileGroup();
    public abstract virtual bool get_EncryptionEnabled();
    public abstract virtual void set_EncryptionEnabled(bool value);
    public abstract virtual bool get_HonorBrokerPriority();
    public abstract virtual void set_HonorBrokerPriority(bool value);
    public abstract virtual int get_ID();
    public abstract virtual bool get_IsLedger();
    public abstract virtual void set_IsLedger(bool value);
    public abstract virtual bool get_IsParameterizationForced();
    public abstract virtual void set_IsParameterizationForced(bool value);
    public abstract virtual bool get_IsReadCommittedSnapshotOn();
    public abstract virtual void set_IsReadCommittedSnapshotOn(bool value);
    public abstract virtual bool get_IsSystemObject();
    public abstract virtual bool get_IsUpdateable();
    public abstract virtual bool get_LocalCursorsDefault();
    public abstract virtual void set_LocalCursorsDefault(bool value);
    public abstract virtual string get_Name();
    public abstract virtual string get_Owner();
    public abstract virtual bool get_NumericRoundAbortEnabled();
    public abstract virtual void set_NumericRoundAbortEnabled(bool value);
    public abstract virtual int get_MirroringTimeout();
    public abstract virtual void set_MirroringTimeout(int value);
    public abstract virtual PageVerify get_PageVerify();
    public abstract virtual void set_PageVerify(PageVerify value);
    public abstract virtual string get_PrimaryFilePath();
    public abstract virtual bool get_QuotedIdentifiersEnabled();
    public abstract virtual void set_QuotedIdentifiersEnabled(bool value);
    public abstract virtual bool get_ReadOnly();
    public abstract virtual void set_ReadOnly(bool value);
    public abstract virtual RecoveryModel get_RecoveryModel();
    public abstract virtual void set_RecoveryModel(RecoveryModel value);
    public abstract virtual bool get_RecursiveTriggersEnabled();
    public abstract virtual void set_RecursiveTriggersEnabled(bool value);
    public abstract virtual bool get_RemoteDataArchiveEnabled();
    public abstract virtual void set_RemoteDataArchiveEnabled(bool value);
    public abstract virtual string get_RemoteDataArchiveEndpoint();
    public abstract virtual void set_RemoteDataArchiveEndpoint(string value);
    public abstract virtual string get_RemoteDataArchiveLinkedServer();
    public abstract virtual string get_RemoteDatabaseName();
    public abstract virtual bool get_RemoteDataArchiveUseFederatedServiceAccount();
    public abstract virtual string get_RemoteDataArchiveCredential();
    public abstract virtual bool get_Trustworthy();
    public abstract virtual void set_Trustworthy(bool value);
    public abstract virtual DatabaseUserAccess get_UserAccess();
    public abstract virtual void set_UserAccess(DatabaseUserAccess value);
    public abstract virtual int get_TargetRecoveryTime();
    public abstract virtual void set_TargetRecoveryTime(int value);
    public abstract virtual DelayedDurability get_DelayedDurability();
    public abstract virtual void set_DelayedDurability(DelayedDurability value);
}
[EvaluationModeAttribute("4")]
[CLSCompliantAttribute("False")]
[TypeConverterAttribute("Microsoft.SqlServer.Management.Sdk.Sfc.LocalizableTypeConverter")]
[LocalizedPropertyResourcesAttribute("Microsoft.SqlServer.Management.Smo.LocalizableResources")]
[DisplayNameKeyAttribute("IDatabasePerformanceFacet_Name")]
[DisplayDescriptionKeyAttribute("IDatabasePerformanceFacet_Desc")]
public interface Microsoft.SqlServer.Management.Smo.IDatabasePerformanceFacet {
    [DisplayNameKeyAttribute("Database_AutoCloseName")]
[DisplayDescriptionKeyAttribute("Database_AutoCloseDesc")]
public bool AutoClose { get; public set; }
    [DisplayNameKeyAttribute("Database_AutoShrinkName")]
[DisplayDescriptionKeyAttribute("Database_AutoShrinkDesc")]
public bool AutoShrink { get; public set; }
    [DisplayNameKeyAttribute("Database_SizeName")]
[DisplayDescriptionKeyAttribute("Database_SizeDesc")]
public double Size { get; }
    [DisplayNameKeyAttribute("IDatabasePerformanceFacet_DataAndLogFilesOnSeparateLogicalVolumesName")]
[DisplayDescriptionKeyAttribute("IDatabasePerformanceFacet_DataAndLogFilesOnSeparateLogicalVolumesDesc")]
public bool DataAndLogFilesOnSeparateLogicalVolumes { get; }
    [DisplayNameKeyAttribute("IDatabasePerformanceFacet_CollationMatchesModelOrMasterName")]
[DisplayDescriptionKeyAttribute("IDatabasePerformanceFacet_CollationMatchesModelOrMasterDesc")]
public bool CollationMatchesModelOrMaster { get; }
    [DisplayNameKeyAttribute("Database_IsSystemObjectName")]
[DisplayDescriptionKeyAttribute("Database_IsSystemObjectDesc")]
public bool IsSystemObject { get; }
    [DisplayNameKeyAttribute("Database_StatusName")]
[DisplayDescriptionKeyAttribute("Database_StatusDesc")]
public DatabaseStatus Status { get; }
    public abstract virtual bool get_AutoClose();
    public abstract virtual void set_AutoClose(bool value);
    public abstract virtual bool get_AutoShrink();
    public abstract virtual void set_AutoShrink(bool value);
    public abstract virtual double get_Size();
    public abstract virtual bool get_DataAndLogFilesOnSeparateLogicalVolumes();
    public abstract virtual bool get_CollationMatchesModelOrMaster();
    public abstract virtual bool get_IsSystemObject();
    public abstract virtual DatabaseStatus get_Status();
}
internal interface Microsoft.SqlServer.Management.Smo.IDatabasePrefetch {
    public CreatingObjectDictionary creatingDictionary { get; public set; }
    public abstract virtual IEnumerable`1<Urn> PrefetchObjects(IEnumerable`1<Urn> input);
    public abstract virtual CreatingObjectDictionary get_creatingDictionary();
    public abstract virtual void set_creatingDictionary(CreatingObjectDictionary value);
}
[CLSCompliantAttribute("False")]
[EvaluationModeAttribute("4")]
[TypeConverterAttribute("Microsoft.SqlServer.Management.Sdk.Sfc.LocalizableTypeConverter")]
[LocalizedPropertyResourcesAttribute("Microsoft.SqlServer.Management.Smo.LocalizableResources")]
[DisplayNameKeyAttribute("IDatabaseSecurityFacet_Name")]
[DisplayDescriptionKeyAttribute("IDatabaseSecurityFacet_Desc")]
public interface Microsoft.SqlServer.Management.Smo.IDatabaseSecurityFacet {
    [DisplayNameKeyAttribute("Database_TrustworthyName")]
[DisplayDescriptionKeyAttribute("Database_TrustworthyDesc")]
public bool Trustworthy { get; public set; }
    [DisplayNameKeyAttribute("IDatabaseSecurityFacet_IsOwnerSysadminName")]
[DisplayDescriptionKeyAttribute("IDatabaseSecurityFacet_IsOwnerSysadminDesc")]
public bool IsOwnerSysadmin { get; }
    public abstract virtual bool get_Trustworthy();
    public abstract virtual void set_Trustworthy(bool value);
    public abstract virtual bool get_IsOwnerSysadmin();
}
internal class Microsoft.SqlServer.Management.Smo.IdBasedObjectScriptContainer : ObjectScriptContainer {
    [CompilerGeneratedAttribute]
private int <ID>k__BackingField;
    public int ID { get; public set; }
    public IdBasedObjectScriptContainer(SqlSmoObject obj, ScriptingPreferences sp, RetryRequestedEventHandler retryEvent);
    [CompilerGeneratedAttribute]
public int get_ID();
    [CompilerGeneratedAttribute]
public void set_ID(int value);
    protected virtual void Initialize(SqlSmoObject obj, ScriptingPreferences sp, RetryRequestedEventHandler retryEvent);
}
public interface Microsoft.SqlServer.Management.Smo.IExtendedProperties {
    public ExtendedPropertyCollection ExtendedProperties { get; }
    public abstract virtual ExtendedPropertyCollection get_ExtendedProperties();
}
[CLSCompliantAttribute("False")]
[StateChangeEventAttribute("CREATE_LOGIN", "LOGIN")]
[StateChangeEventAttribute("ALTER_LOGIN", "LOGIN")]
[EvaluationModeAttribute("7")]
[LocalizedPropertyResourcesAttribute("Microsoft.SqlServer.Management.Smo.LocalizableResources")]
[TypeConverterAttribute("Microsoft.SqlServer.Management.Sdk.Sfc.LocalizableTypeConverter")]
[DisplayNameKeyAttribute("ILoginOptions_Name")]
[DisplayDescriptionKeyAttribute("ILoginOptions_Desc")]
public interface Microsoft.SqlServer.Management.Smo.ILoginOptions {
    [DisplayNameKeyAttribute("Login_AsymmetricKeyName")]
[DisplayDescriptionKeyAttribute("Login_AsymmetricKeyDesc")]
public string AsymmetricKey { get; public set; }
    [DisplayNameKeyAttribute("Login_CertificateName")]
[DisplayDescriptionKeyAttribute("Login_CertificateDesc")]
public string Certificate { get; public set; }
    [DisplayNameKeyAttribute("Login_CreateDateName")]
[DisplayDescriptionKeyAttribute("Login_CreateDateDesc")]
public DateTime CreateDate { get; }
    [DisplayNameKeyAttribute("Login_CredentialName")]
[DisplayDescriptionKeyAttribute("Login_CredentialDesc")]
public string Credential { get; public set; }
    [DisplayNameKeyAttribute("Login_DefaultDatabaseName")]
[DisplayDescriptionKeyAttribute("Login_DefaultDatabaseDesc")]
public string DefaultDatabase { get; public set; }
    [DisplayNameKeyAttribute("Login_IDName")]
[DisplayDescriptionKeyAttribute("Login_IDDesc")]
public int ID { get; }
    [DisplayNameKeyAttribute("Login_IsDisabledName")]
[DisplayDescriptionKeyAttribute("Login_IsDisabledDesc")]
public bool IsDisabled { get; }
    [DisplayNameKeyAttribute("Login_IsLockedName")]
[DisplayDescriptionKeyAttribute("Login_IsLockedDesc")]
public bool IsLocked { get; }
    [DisplayNameKeyAttribute("Login_IsSystemObjectName")]
[DisplayDescriptionKeyAttribute("Login_IsSystemObjectDesc")]
public bool IsSystemObject { get; }
    [DisplayNameKeyAttribute("Login_LanguageName")]
[DisplayDescriptionKeyAttribute("Login_LanguageDesc")]
public string Language { get; public set; }
    [DisplayNameKeyAttribute("Login_LanguageAliasName")]
[DisplayDescriptionKeyAttribute("Login_LanguageAliasDesc")]
public string LanguageAlias { get; }
    [DisplayNameKeyAttribute("Login_LoginTypeName")]
[DisplayDescriptionKeyAttribute("Login_LoginTypeDesc")]
public LoginType LoginType { get; }
    [DisplayNameKeyAttribute("Login_MustChangePasswordName")]
[DisplayDescriptionKeyAttribute("Login_MustChangePasswordDesc")]
public bool MustChangePassword { get; }
    [DisplayNameKeyAttribute("NamedSmoObject_NameName")]
[DisplayDescriptionKeyAttribute("NamedSmoObject_NameDesc")]
public string Name { get; public set; }
    [DisplayNameKeyAttribute("Login_PasswordExpirationEnabledName")]
[DisplayDescriptionKeyAttribute("Login_PasswordExpirationEnabledDesc")]
public bool PasswordExpirationEnabled { get; public set; }
    [DisplayNameKeyAttribute("Login_PasswordPolicyEnforcedName")]
[DisplayDescriptionKeyAttribute("Login_PasswordPolicyEnforcedDesc")]
public bool PasswordPolicyEnforced { get; public set; }
    public abstract virtual string get_AsymmetricKey();
    public abstract virtual void set_AsymmetricKey(string value);
    public abstract virtual string get_Certificate();
    public abstract virtual void set_Certificate(string value);
    public abstract virtual DateTime get_CreateDate();
    public abstract virtual string get_Credential();
    public abstract virtual void set_Credential(string value);
    public abstract virtual string get_DefaultDatabase();
    public abstract virtual void set_DefaultDatabase(string value);
    public abstract virtual int get_ID();
    public abstract virtual bool get_IsDisabled();
    public abstract virtual bool get_IsLocked();
    public abstract virtual bool get_IsSystemObject();
    public abstract virtual string get_Language();
    public abstract virtual void set_Language(string value);
    public abstract virtual string get_LanguageAlias();
    public abstract virtual LoginType get_LoginType();
    public abstract virtual bool get_MustChangePassword();
    public abstract virtual string get_Name();
    public abstract virtual void set_Name(string value);
    public abstract virtual bool get_PasswordExpirationEnabled();
    public abstract virtual void set_PasswordExpirationEnabled(bool value);
    public abstract virtual bool get_PasswordPolicyEnforced();
    public abstract virtual void set_PasswordPolicyEnforced(bool value);
}
[CLSCompliantAttribute("False")]
[StateChangeEventAttribute("CREATE_TABLE", "TABLE")]
[StateChangeEventAttribute("ALTER_TABLE", "TABLE")]
[StateChangeEventAttribute("RENAME", "TABLE")]
[StateChangeEventAttribute("CREATE_VIEW", "VIEW")]
[StateChangeEventAttribute("ALTER_VIEW", "VIEW")]
[StateChangeEventAttribute("RENAME", "VIEW")]
[StateChangeEventAttribute("CREATE_FUNCTION", "FUNCTION")]
[StateChangeEventAttribute("ALTER_FUNCTION", "FUNCTION")]
[StateChangeEventAttribute("RENAME", "FUNCTION")]
[StateChangeEventAttribute("CREATE_PROCEDURE", "PROCEDURE")]
[StateChangeEventAttribute("ALTER_PROCEDURE", "PROCEDURE")]
[StateChangeEventAttribute("RENAME", "PROCEDURE")]
[StateChangeEventAttribute("CREATE_SYNONYM", "SYNONYM")]
[StateChangeEventAttribute("CREATE_SEQUENCE", "SEQUENCE")]
[StateChangeEventAttribute("ALTER_SEQUENCE", "SEQUENCE")]
[StateChangeEventAttribute("RENAME", "SEQUENCE")]
[StateChangeEventAttribute("CREATE_TYPE", "TYPE")]
[StateChangeEventAttribute("RENAME", "TYPE")]
[StateChangeEventAttribute("CREATE_XML_SCHEMA_COLLECTION", "XMLSCHEMACOLLECTION")]
[StateChangeEventAttribute("ALTER_XML_SCHEMA_COLLECTION", "XMLSCHEMACOLLECTION")]
[StateChangeEventAttribute("RENAME", "XMLSCHEMACOLLECTION")]
[StateChangeEventAttribute("ALTER_SCHEMA", "TABLE")]
[StateChangeEventAttribute("ALTER_SCHEMA", "VIEW")]
[StateChangeEventAttribute("ALTER_SCHEMA", "FUNCTION")]
[StateChangeEventAttribute("ALTER_SCHEMA", "PROCEDURE")]
[StateChangeEventAttribute("ALTER_SCHEMA", "SYNONYM")]
[StateChangeEventAttribute("ALTER_SCHEMA", "SEQUENCE")]
[StateChangeEventAttribute("ALTER_SCHEMA", "TYPE")]
[StateChangeEventAttribute("ALTER_SCHEMA", "XMLSCHEMACOLLECTION")]
[EvaluationModeAttribute("7")]
[TypeConverterAttribute("Microsoft.SqlServer.Management.Sdk.Sfc.LocalizableTypeConverter")]
[LocalizedPropertyResourcesAttribute("Microsoft.SqlServer.Management.Smo.FacetSR")]
[DisplayNameKeyAttribute("MultipartNameName")]
[DisplayDescriptionKeyAttribute("MultipartNameDesc")]
public interface Microsoft.SqlServer.Management.Smo.IMultipartNameFacet {
    [DisplayNameKeyAttribute("NameName")]
[DisplayDescriptionKeyAttribute("NameDesc")]
public string Name { get; }
    [DisplayNameKeyAttribute("SchemaName")]
[DisplayDescriptionKeyAttribute("SchemaDesc")]
public string Schema { get; }
    public abstract virtual string get_Name();
    public abstract virtual string get_Schema();
}
[CLSCompliantAttribute("False")]
[EvaluationModeAttribute("4")]
[TypeConverterAttribute("Microsoft.SqlServer.Management.Sdk.Sfc.LocalizableTypeConverter")]
[LocalizedPropertyResourcesAttribute("Microsoft.SqlServer.Management.Smo.FacetSR")]
[DisplayNameKeyAttribute("NameName")]
[DisplayDescriptionKeyAttribute("NameDesc")]
public interface Microsoft.SqlServer.Management.Smo.INameFacet {
    [DisplayNameKeyAttribute("NameName")]
[DisplayDescriptionKeyAttribute("NameDesc")]
public string Name { get; }
    public abstract virtual string get_Name();
}
internal class Microsoft.SqlServer.Management.Smo.IncludeScriptPreferences : object {
    [CompilerGeneratedAttribute]
private bool <Data>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Permissions>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ExistenceCheck>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Header>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ScriptingParameterHeader>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SchemaQualify>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SchemaQualifyForeignKeysReferences>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ExtendedProperties>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Collation>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Owner>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DatabaseContext>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Associations>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AnsiPadding>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Ddl>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CreateDdlTriggerDisabled>k__BackingField;
    public bool Data { get; public set; }
    public bool Permissions { get; public set; }
    public bool ExistenceCheck { get; public set; }
    public bool Header { get; public set; }
    public bool ScriptingParameterHeader { get; public set; }
    public bool SchemaQualify { get; public set; }
    internal bool SchemaQualifyForeignKeysReferences { get; internal set; }
    internal bool ExtendedProperties { get; internal set; }
    public bool Collation { get; public set; }
    public bool Owner { get; public set; }
    public bool DatabaseContext { get; public set; }
    public bool Associations { get; public set; }
    public bool AnsiPadding { get; public set; }
    public bool Ddl { get; public set; }
    internal bool CreateDdlTriggerDisabled { get; internal set; }
    [CompilerGeneratedAttribute]
public bool get_Data();
    [CompilerGeneratedAttribute]
public void set_Data(bool value);
    [CompilerGeneratedAttribute]
public bool get_Permissions();
    [CompilerGeneratedAttribute]
public void set_Permissions(bool value);
    [CompilerGeneratedAttribute]
public bool get_ExistenceCheck();
    [CompilerGeneratedAttribute]
public void set_ExistenceCheck(bool value);
    [CompilerGeneratedAttribute]
public bool get_Header();
    [CompilerGeneratedAttribute]
public void set_Header(bool value);
    [CompilerGeneratedAttribute]
public bool get_ScriptingParameterHeader();
    [CompilerGeneratedAttribute]
public void set_ScriptingParameterHeader(bool value);
    [CompilerGeneratedAttribute]
public bool get_SchemaQualify();
    [CompilerGeneratedAttribute]
public void set_SchemaQualify(bool value);
    [CompilerGeneratedAttribute]
internal bool get_SchemaQualifyForeignKeysReferences();
    [CompilerGeneratedAttribute]
internal void set_SchemaQualifyForeignKeysReferences(bool value);
    [CompilerGeneratedAttribute]
internal bool get_ExtendedProperties();
    [CompilerGeneratedAttribute]
internal void set_ExtendedProperties(bool value);
    [CompilerGeneratedAttribute]
public bool get_Collation();
    [CompilerGeneratedAttribute]
public void set_Collation(bool value);
    [CompilerGeneratedAttribute]
public bool get_Owner();
    [CompilerGeneratedAttribute]
public void set_Owner(bool value);
    [CompilerGeneratedAttribute]
public bool get_DatabaseContext();
    [CompilerGeneratedAttribute]
public void set_DatabaseContext(bool value);
    [CompilerGeneratedAttribute]
public bool get_Associations();
    [CompilerGeneratedAttribute]
public void set_Associations(bool value);
    [CompilerGeneratedAttribute]
public bool get_AnsiPadding();
    [CompilerGeneratedAttribute]
public void set_AnsiPadding(bool value);
    [CompilerGeneratedAttribute]
public bool get_Ddl();
    [CompilerGeneratedAttribute]
public void set_Ddl(bool value);
    [CompilerGeneratedAttribute]
internal bool get_CreateDdlTriggerDisabled();
    [CompilerGeneratedAttribute]
internal void set_CreateDdlTriggerDisabled(bool value);
    private void Init();
    internal object Clone();
}
[EvaluationModeAttribute("4")]
[PhysicalFacetAttribute]
[SfcElementAttribute("48")]
public class Microsoft.SqlServer.Management.Smo.Index : ScriptNameObjectBase {
    private bool m_bIsOnComputed;
    private bool xmlOrSpatialIndex;
    private bool isOnColumnWithAnsiPadding;
    private static double m_boundingBoxDef;
    private static int m_cellsPerObjectDef;
    private static byte fillFactorDef;
    private static int m_minCompressionDelay;
    private static int m_maxCompressionDelay;
    private static int m_hkMinCompressionDelay;
    internal Nullable`1<bool> IsParentBeingScriptedWithANSIPaddingON;
    private IndexedColumnCollection m_IndexedColumns;
    private IndexedXmlPathCollection m_IndexedXmlPaths;
    private IndexedXmlPathNamespaceCollection m_IndexedXmlPathNamespaces;
    private PartitionSchemeParameterCollection m_PartitionSchemeParameters;
    private PhysicalPartitionCollection m_PhysicalPartitions;
    private bool affectAllIndexes;
    private int optimizePartitionNumber;
    internal bool dropExistingIndex;
    private bool sortInTempdb;
    private bool onlineIndexOperation;
    private bool resumableIndexOperation;
    private int resumableMaxDuration;
    private int lowPriorityMaxDuration;
    private AbortAfterWait lowPriorityAbortAfterWait;
    private int maximumDegreeOfParallelism;
    private bool compactLargeObjects;
    private bool compressAllRowGroups;
    internal object oldIndexKeyTypeValue;
    private XSchemaProps _XSchema;
    private XRuntimeProps _XRuntime;
    private IndexEvents events;
    public static string UrnSuffix { get; }
    [SfcKeyAttribute("0")]
[SfcPropertyAttribute("15616")]
public string Name { get; public set; }
    [SfcPropertyAttribute("3072")]
public bool IsSystemNamed { get; }
    [SfcObjectAttribute("1", "1", "Microsoft.SqlServer.Management.Smo.IndexedColumn", "112")]
public IndexedColumnCollection IndexedColumns { get; }
    [SfcObjectAttribute("1", "1", "Microsoft.SqlServer.Management.Smo.IndexedXmlPath", "112")]
public IndexedXmlPathCollection IndexedXmlPaths { get; }
    [SfcObjectAttribute("1", "1", "Microsoft.SqlServer.Management.Smo.IndexedXmlPathNamespace", "112")]
public IndexedXmlPathNamespaceCollection IndexedXmlPathNamespaces { get; }
    [SfcObjectAttribute("1", "0", "Microsoft.SqlServer.Management.Smo.ExtendedProperty")]
public ExtendedPropertyCollection ExtendedProperties { get; }
    [SfcObjectAttribute("1", "0", "Microsoft.SqlServer.Management.Smo.PartitionSchemeParameter")]
[SfcInvalidForTypeAttribute("Microsoft.SqlServer.Management.Smo.UserDefinedFunction")]
public PartitionSchemeParameterCollection PartitionSchemeParameters { get; }
    [SfcObjectAttribute("1", "1", "Microsoft.SqlServer.Management.Smo.PhysicalPartition")]
public PhysicalPartitionCollection PhysicalPartitions { get; }
    [SfcPropertyAttribute("13312")]
public int CompressionDelay { get; public set; }
    internal IndexType InferredIndexType { get; }
    public bool DropExistingIndex { get; public set; }
    [SfcPropertyAttribute("1024")]
public bool SortInTempdb { get; public set; }
    [SfcPropertyAttribute("3072")]
public bool OnlineIndexOperation { get; public set; }
    [SfcPropertyAttribute("1024")]
public bool ResumableIndexOperation { get; public set; }
    [SfcPropertyAttribute("1024")]
public int ResumableMaxDuration { get; public set; }
    [SfcPropertyAttribute("3072")]
public int LowPriorityMaxDuration { get; public set; }
    [SfcPropertyAttribute("3072")]
public AbortAfterWait LowPriorityAbortAfterWait { get; public set; }
    [SfcPropertyAttribute("1024")]
public int MaximumDegreeOfParallelism { get; public set; }
    [SfcPropertyAttribute("1024")]
public bool CompactLargeObjects { get; public set; }
    [SfcPropertyAttribute("1024")]
public bool CompressAllRowGroups { get; public set; }
    [SfcPropertyAttribute("3072")]
public bool IsIndexOnTable { get; }
    [SfcPropertyAttribute("3072")]
public bool IsIndexOnComputed { get; }
    public bool IsOnlineRebuildSupported { get; }
    internal bool IsMemoryOptimizedIndex { get; }
    internal bool IsSqlDwIndex { get; }
    [SfcObjectAttribute("1", "32")]
[SfcParentAttribute("Table")]
[SfcParentAttribute("UserDefinedTableType")]
[SfcParentAttribute("UserDefinedFunction")]
[SfcParentAttribute("View")]
public SqlSmoObject Parent { get; public set; }
    private bool Microsoft.SqlServer.Management.Sdk.Sfc.ISfcSupportsDesignMode.IsDesignMode { get; }
    private XSchemaProps XSchema { get; }
    private XRuntimeProps XRuntime { get; }
    [SfcPropertyAttribute("3328")]
public double BoundingBoxXMax { get; public set; }
    [SfcPropertyAttribute("3328")]
public double BoundingBoxXMin { get; public set; }
    [SfcPropertyAttribute("3328")]
public double BoundingBoxYMax { get; public set; }
    [SfcPropertyAttribute("3328")]
public double BoundingBoxYMin { get; public set; }
    [SfcPropertyAttribute("3328")]
public int BucketCount { get; public set; }
    [SfcPropertyAttribute("3328")]
public int CellsPerObject { get; public set; }
    [SfcPropertyAttribute("15360")]
public bool DisallowPageLocks { get; public set; }
    [SfcPropertyAttribute("15360")]
public bool DisallowRowLocks { get; public set; }
    [SfcPropertyAttribute("3360")]
public string FileGroup { get; public set; }
    [SfcPropertyAttribute("3328")]
public string FileStreamFileGroup { get; public set; }
    [SfcPropertyAttribute("3328")]
[SfcReferenceAttribute("Microsoft.SqlServer.Management.Smo.PartitionScheme", "Server[@Name='{0}']/Database[@Name='{1}']/PartitionScheme[@Name='{2}']", "Mono.Cecil.CustomAttributeArgument[]")]
[CLSCompliantAttribute("False")]
public string FileStreamPartitionScheme { get; public set; }
    [SfcPropertyAttribute("15616")]
public byte FillFactor { get; public set; }
    [SfcPropertyAttribute("11520")]
public string FilterDefinition { get; public set; }
    [SfcPropertyAttribute("3104")]
public bool HasCompressedPartitions { get; }
    [SfcPropertyAttribute("3072")]
public bool HasFilter { get; }
    [SfcPropertyAttribute("3072")]
public bool HasSparseColumn { get; }
    [SfcPropertyAttribute("1056")]
public bool HasXmlCompressedPartitions { get; }
    [SfcPropertyAttribute("3072")]
public int ID { get; }
    [SfcPropertyAttribute("15360")]
public bool IgnoreDuplicateKeys { get; public set; }
    [SfcPropertyAttribute("3328")]
public string IndexedXmlPathName { get; public set; }
    [SfcPropertyAttribute("15616")]
public IndexKeyType IndexKeyType { get; public set; }
    [SfcPropertyAttribute("3328")]
public IndexType IndexType { get; public set; }
    [SfcPropertyAttribute("15616")]
public bool IsClustered { get; public set; }
    [SfcPropertyAttribute("3072")]
public bool IsDisabled { get; }
    [SfcPropertyAttribute("1024")]
public bool IsFileTableDefined { get; }
    [SfcPropertyAttribute("3072")]
public bool IsFullTextKey { get; public set; }
    [SfcPropertyAttribute("3360")]
public bool IsMemoryOptimized { get; public set; }
    [SfcPropertyAttribute("15360")]
public bool IsOptimizedForSequentialKey { get; public set; }
    [SfcPropertyAttribute("3072")]
public bool IsPartitioned { get; }
    [SfcPropertyAttribute("3072")]
public bool IsSpatialIndex { get; }
    [SfcPropertyAttribute("3072")]
public bool IsSystemObject { get; }
    [SfcPropertyAttribute("15616")]
public bool IsUnique { get; public set; }
    [SfcPropertyAttribute("3072")]
public bool IsXmlIndex { get; }
    [SfcPropertyAttribute("3328")]
public SpatialGeoLevelSize Level1Grid { get; public set; }
    [SfcPropertyAttribute("3328")]
public SpatialGeoLevelSize Level2Grid { get; public set; }
    [SfcPropertyAttribute("3328")]
public SpatialGeoLevelSize Level3Grid { get; public set; }
    [SfcPropertyAttribute("3328")]
public SpatialGeoLevelSize Level4Grid { get; public set; }
    [SfcPropertyAttribute("15360")]
public bool NoAutomaticRecomputation { get; public set; }
    [SfcPropertyAttribute("15616")]
public bool PadIndex { get; public set; }
    [SfcPropertyAttribute("3328")]
public string ParentXmlIndex { get; public set; }
    [SfcPropertyAttribute("3328")]
[SfcReferenceAttribute("Microsoft.SqlServer.Management.Smo.PartitionScheme", "Server[@Name='{0}']/Database[@Name='{1}']/PartitionScheme[@Name='{2}']", "Mono.Cecil.CustomAttributeArgument[]")]
[CLSCompliantAttribute("False")]
public string PartitionScheme { get; public set; }
    [SfcPropertyAttribute("3072")]
public ResumableOperationStateType ResumableOperationState { get; }
    [SfcPropertyAttribute("3328")]
public SecondaryXmlIndexType SecondaryXmlIndexType { get; public set; }
    [SfcPropertyAttribute("1056")]
public double SpaceUsed { get; }
    [SfcPropertyAttribute("3328")]
public SpatialIndexType SpatialIndexType { get; public set; }
    public IndexEvents Events { get; }
    internal Index(AbstractCollectionBase parentColl, ObjectKeyBase key, SqlSmoState state);
    public Index(SqlSmoObject parent, string name);
    public static string get_UrnSuffix();
    internal virtual object GetPropertyDefaultValue(string propname);
    public virtual string get_Name();
    public virtual void set_Name(string value);
    public bool get_IsSystemNamed();
    public IndexedColumnCollection get_IndexedColumns();
    public IndexedXmlPathCollection get_IndexedXmlPaths();
    public IndexedXmlPathNamespaceCollection get_IndexedXmlPathNamespaces();
    public sealed virtual ExtendedPropertyCollection get_ExtendedProperties();
    public PartitionSchemeParameterCollection get_PartitionSchemeParameters();
    public PhysicalPartitionCollection get_PhysicalPartitions();
    public int get_CompressionDelay();
    public void set_CompressionDelay(int value);
    protected virtual void MarkDropped();
    internal bool IsDirty(string property);
    internal virtual void UpdateObjectState();
    public sealed virtual void Create();
    internal virtual void ScriptCreate(StringCollection queries, ScriptingPreferences sp);
    protected virtual void PostCreate();
    internal virtual void ScriptDdl(StringCollection queries, ScriptingPreferences sp);
    internal void ScriptDdl(StringCollection queries, ScriptingPreferences sp, bool notEmbedded);
    internal void ScriptDdl(StringCollection queries, ScriptingPreferences sp, bool notEmbedded, bool createStatement);
    private IndexKeyType GetIndexKeyType();
    private string GetDDL(ScriptingPreferences sp, bool creating);
    private string GetDDL(ScriptingPreferences sp, bool creating, bool tableCreate);
    internal IndexType get_InferredIndexType();
    private bool IsSpatialColumn(Column colBase);
    private bool IsCompressionCodeRequired(bool bAlter);
    private bool IsXmlCompressionCodeRequired(bool isAlter);
    internal bool HasXmlColumn(bool throwIfNotSet);
    internal bool HasSpatialColumn(bool throwIfNotSet);
    private bool CheckColumnsDataType(bool throwIfNotSet, CheckColumnDataType checkDataType);
    private static bool IsColumnXmlDataType(string dataType);
    private static bool IsColumnSpatialDataType(string dataType);
    private static bool IsGraphPseudoColumn(string name);
    public sealed virtual void Drop();
    public sealed virtual void DropIfExists();
    internal virtual void ScriptDrop(StringCollection queries, ScriptingPreferences sp);
    public sealed virtual void MarkForDrop(bool dropOnAlter);
    private void CheckUnsupportedSXI(bool checkPrimarySXI, bool checkSecondarySXI, string operation, string reason);
    public sealed virtual void Alter();
    public void Alter(IndexOperation operation);
    public void AlterAllIndexes();
    private void ScriptSpIndexoptions(StringCollection queries, ScriptingPreferences sp);
    internal virtual void ScriptAlter(StringCollection alterQuery, ScriptingPreferences sp);
    public void Rebuild(int partitionNumber);
    public void Rebuild();
    public void Resume();
    private void ResumeImpl();
    public void Abort();
    private void AbortImpl();
    public void Pause();
    private void PauseImpl();
    public void RebuildAllIndexes();
    public void UpgradeToClusteredColumnStoreIndex();
    internal bool AddSetOptionsForIndex(StringCollection queries);
    private void RebuildImpl(bool allIndexes);
    public sealed virtual void Rename(string newname);
    internal virtual void ScriptRename(StringCollection renameQuery, ScriptingPreferences sp, string newName);
    public void Reorganize(int partitionNumber);
    public void ReorganizeAllIndexes();
    private void ReorganizeGeneralImpl(bool allIndexes);
    private void Reorganize80Impl(bool allIndexes);
    private void AlterIndexReorganizeImpl(bool allIndexes);
    private void UpgradeToCCI120Impl();
    private void ScriptAlterPropNonBag(bool propValue, string optname, ServerVersion serverVersion, StringBuilder statement, Int32& optCount);
    public void Disable();
    public void Enable(IndexEnableAction action);
    public void Recreate();
    public StringCollection CheckIndex();
    public DataTable CheckIndexWithResult();
    public DataSet EnumStatistics();
    public void RecalculateSpaceUsage();
    internal virtual PropagateInfo[] GetPropagateInfo(PropagateAction action);
    public bool get_DropExistingIndex();
    public void set_DropExistingIndex(bool value);
    public bool get_SortInTempdb();
    public void set_SortInTempdb(bool value);
    public bool get_OnlineIndexOperation();
    public void set_OnlineIndexOperation(bool value);
    public bool get_ResumableIndexOperation();
    public void set_ResumableIndexOperation(bool value);
    public int get_ResumableMaxDuration();
    public void set_ResumableMaxDuration(int value);
    public int get_LowPriorityMaxDuration();
    public void set_LowPriorityMaxDuration(int value);
    public AbortAfterWait get_LowPriorityAbortAfterWait();
    public void set_LowPriorityAbortAfterWait(AbortAfterWait value);
    public int get_MaximumDegreeOfParallelism();
    public void set_MaximumDegreeOfParallelism(int value);
    public bool get_CompactLargeObjects();
    public void set_CompactLargeObjects(bool value);
    public bool get_CompressAllRowGroups();
    public void set_CompressAllRowGroups(bool value);
    public void UpdateStatistics();
    public void UpdateStatistics(StatisticsScanType scanType);
    public void UpdateStatistics(StatisticsScanType scanType, int sampleValue);
    public void UpdateStatistics(StatisticsScanType scanType, int sampleValue, bool recompute);
    public DataTable EnumFragmentation();
    public DataTable EnumFragmentation(FragmentationOption fragmentationOption);
    public DataTable EnumFragmentation(FragmentationOption fragmentationOption, int partitionNumber);
    public void DropAndMove(string partitionScheme, StringCollection partitionSchemeParameters);
    public void DropAndMove(string fileGroup);
    private void DropAndMoveImpl(string dataSpaceName, StringCollection partitionSchemeParameters);
    private void DropAndMoveImplWorker(string dataSpaceName, StringCollection partitionSchemeParameters);
    public sealed virtual StringCollection Script();
    public sealed virtual StringCollection Script(ScriptingOptions scriptingOptions);
    public bool get_IsIndexOnTable();
    public bool get_IsIndexOnComputed();
    internal virtual void ValidateProperty(Property prop, object value);
    public virtual void Refresh();
    internal static String[] GetScriptFields(Type parentType, ServerVersion version, DatabaseEngineType databaseEngineType, DatabaseEngineEdition databaseEngineEdition, bool defaultTextMode);
    internal static String[] GetScriptFields2(Type parentType, ServerVersion version, DatabaseEngineType databaseEngineType, DatabaseEngineEdition databaseEngineEdition, bool defaultTextMode, ScriptingPreferences sp);
    internal static String[] GetRebuildFields(ServerVersion version, DatabaseEngineType databaseEngineType);
    internal static String[] GetRebuildFields(ServerVersion version, DatabaseEngineType databaseEngineType, DatabaseEngineEdition databaseEngineEdition);
    public bool get_IsOnlineRebuildSupported();
    internal static bool IsLargeObject(SqlDataType dataType);
    internal bool get_IsMemoryOptimizedIndex();
    internal bool get_IsSqlDwIndex();
    public SqlSmoObject get_Parent();
    public void set_Parent(SqlSmoObject value);
    private sealed virtual override bool Microsoft.SqlServer.Management.Sdk.Sfc.ISfcSupportsDesignMode.get_IsDesignMode();
    internal virtual SqlPropertyMetadataProvider GetPropertyMetadataProvider();
    private sealed virtual override object Microsoft.SqlServer.Management.Smo.IPropertyDataDispatch.GetPropertyValue(int index);
    private sealed virtual override void Microsoft.SqlServer.Management.Smo.IPropertyDataDispatch.SetPropertyValue(int index, object value);
    private XSchemaProps get_XSchema();
    private XRuntimeProps get_XRuntime();
    public double get_BoundingBoxXMax();
    public void set_BoundingBoxXMax(double value);
    public double get_BoundingBoxXMin();
    public void set_BoundingBoxXMin(double value);
    public double get_BoundingBoxYMax();
    public void set_BoundingBoxYMax(double value);
    public double get_BoundingBoxYMin();
    public void set_BoundingBoxYMin(double value);
    public int get_BucketCount();
    public void set_BucketCount(int value);
    public int get_CellsPerObject();
    public void set_CellsPerObject(int value);
    public bool get_DisallowPageLocks();
    public void set_DisallowPageLocks(bool value);
    public bool get_DisallowRowLocks();
    public void set_DisallowRowLocks(bool value);
    public string get_FileGroup();
    public void set_FileGroup(string value);
    public string get_FileStreamFileGroup();
    public void set_FileStreamFileGroup(string value);
    public string get_FileStreamPartitionScheme();
    public void set_FileStreamPartitionScheme(string value);
    public byte get_FillFactor();
    public void set_FillFactor(byte value);
    public string get_FilterDefinition();
    public void set_FilterDefinition(string value);
    public bool get_HasCompressedPartitions();
    public bool get_HasFilter();
    public bool get_HasSparseColumn();
    public bool get_HasXmlCompressedPartitions();
    public int get_ID();
    public bool get_IgnoreDuplicateKeys();
    public void set_IgnoreDuplicateKeys(bool value);
    public string get_IndexedXmlPathName();
    public void set_IndexedXmlPathName(string value);
    public IndexKeyType get_IndexKeyType();
    public void set_IndexKeyType(IndexKeyType value);
    public IndexType get_IndexType();
    public void set_IndexType(IndexType value);
    public bool get_IsClustered();
    public void set_IsClustered(bool value);
    public bool get_IsDisabled();
    public bool get_IsFileTableDefined();
    public bool get_IsFullTextKey();
    public void set_IsFullTextKey(bool value);
    public bool get_IsMemoryOptimized();
    public void set_IsMemoryOptimized(bool value);
    public bool get_IsOptimizedForSequentialKey();
    public void set_IsOptimizedForSequentialKey(bool value);
    public bool get_IsPartitioned();
    public bool get_IsSpatialIndex();
    public bool get_IsSystemObject();
    public bool get_IsUnique();
    public void set_IsUnique(bool value);
    public bool get_IsXmlIndex();
    public SpatialGeoLevelSize get_Level1Grid();
    public void set_Level1Grid(SpatialGeoLevelSize value);
    public SpatialGeoLevelSize get_Level2Grid();
    public void set_Level2Grid(SpatialGeoLevelSize value);
    public SpatialGeoLevelSize get_Level3Grid();
    public void set_Level3Grid(SpatialGeoLevelSize value);
    public SpatialGeoLevelSize get_Level4Grid();
    public void set_Level4Grid(SpatialGeoLevelSize value);
    public bool get_NoAutomaticRecomputation();
    public void set_NoAutomaticRecomputation(bool value);
    public bool get_PadIndex();
    public void set_PadIndex(bool value);
    public string get_ParentXmlIndex();
    public void set_ParentXmlIndex(string value);
    public string get_PartitionScheme();
    public void set_PartitionScheme(string value);
    public ResumableOperationStateType get_ResumableOperationState();
    public SecondaryXmlIndexType get_SecondaryXmlIndexType();
    public void set_SecondaryXmlIndexType(SecondaryXmlIndexType value);
    public double get_SpaceUsed();
    public SpatialIndexType get_SpatialIndexType();
    public void set_SpatialIndexType(SpatialIndexType value);
    internal virtual String[] GetNonAlterableProperties();
    public IndexEvents get_Events();
}
[DefaultMemberAttribute("Item")]
public class Microsoft.SqlServer.Management.Smo.IndexCollection : SimpleObjectCollectionBase {
    public SqlSmoObject Parent { get; }
    public Index Item { get; }
    public Index Item { get; }
    internal IndexCollection(SqlSmoObject parentInstance);
    public SqlSmoObject get_Parent();
    public Index get_Item(int index);
    public Index get_Item(string name);
    public void CopyTo(Index[] array, int index);
    public Index ItemById(int id);
    protected virtual Type GetCollectionElementType();
    internal virtual SqlSmoObject GetCollectionElementInstance(ObjectKeyBase key, SqlSmoState state);
    public void Remove(Index index);
    public void Remove(string name);
    public void Add(Index index);
    internal SqlSmoObject GetObjectByName(string name);
    internal virtual ObjectKeyBase CreateKeyFromUrn(Urn urn);
}
[SfcElementAttribute("48")]
public class Microsoft.SqlServer.Management.Smo.IndexedColumn : NamedSmoObject {
    private XSchemaProps _XSchema;
    private XRuntimeProps _XRuntime;
    public static string UrnSuffix { get; }
    [SfcKeyAttribute("0")]
[SfcPropertyAttribute("15616")]
public string Name { get; public set; }
    [SfcObjectAttribute("1", "96")]
public Index Parent { get; public set; }
    private bool Microsoft.SqlServer.Management.Sdk.Sfc.ISfcSupportsDesignMode.IsDesignMode { get; }
    private XSchemaProps XSchema { get; }
    private XRuntimeProps XRuntime { get; }
    [SfcPropertyAttribute("3072")]
public int ColumnStoreOrderOrdinal { get; }
    [SfcPropertyAttribute("15360")]
public bool Descending { get; public set; }
    [SfcPropertyAttribute("3072")]
public int ID { get; }
    [SfcPropertyAttribute("3072")]
public bool IsComputed { get; }
    [SfcPropertyAttribute("15360")]
public bool IsIncluded { get; public set; }
    internal IndexedColumn(AbstractCollectionBase parentColl, ObjectKeyBase key, SqlSmoState state);
    public IndexedColumn(Index index, string name, bool descending);
    public IndexedColumn(Index index, string name);
    public static string get_UrnSuffix();
    public virtual string get_Name();
    public virtual void set_Name(string value);
    internal static String[] GetScriptFields(Type parentType, ServerVersion version, DatabaseEngineType databaseEngineType, DatabaseEngineEdition databaseEngineEdition, bool defaultTextMode);
    public Index get_Parent();
    public void set_Parent(Index value);
    private sealed virtual override bool Microsoft.SqlServer.Management.Sdk.Sfc.ISfcSupportsDesignMode.get_IsDesignMode();
    internal virtual SqlPropertyMetadataProvider GetPropertyMetadataProvider();
    private sealed virtual override object Microsoft.SqlServer.Management.Smo.IPropertyDataDispatch.GetPropertyValue(int index);
    private sealed virtual override void Microsoft.SqlServer.Management.Smo.IPropertyDataDispatch.SetPropertyValue(int index, object value);
    private XSchemaProps get_XSchema();
    private XRuntimeProps get_XRuntime();
    public int get_ColumnStoreOrderOrdinal();
    public bool get_Descending();
    public void set_Descending(bool value);
    public int get_ID();
    public bool get_IsComputed();
    public bool get_IsIncluded();
    public void set_IsIncluded(bool value);
}
[DefaultMemberAttribute("Item")]
public class Microsoft.SqlServer.Management.Smo.IndexedColumnCollection : ParameterCollectionBase {
    public Index Parent { get; }
    public IndexedColumn Item { get; }
    public IndexedColumn Item { get; }
    internal IndexedColumnCollection(SqlSmoObject parentInstance);
    public Index get_Parent();
    public IndexedColumn get_Item(int index);
    public void CopyTo(IndexedColumn[] array, int index);
    public IndexedColumn get_Item(string name);
    protected virtual Type GetCollectionElementType();
    internal virtual SqlSmoObject GetCollectionElementInstance(ObjectKeyBase key, SqlSmoState state);
    public void Add(IndexedColumn indexedColumn);
    public void Add(IndexedColumn indexedColumn, string insertAtColumnName);
    public void Add(IndexedColumn indexedColumn, int insertAtPosition);
    public void Remove(IndexedColumn indexedColumn);
    public IndexedColumn ItemById(int id);
}
[SfcElementAttribute("48")]
public class Microsoft.SqlServer.Management.Smo.IndexedXmlPath : NamedSmoObject {
    private DataType dataType;
    private XSchemaProps _XSchema;
    private XRuntimeProps _XRuntime;
    [SfcKeyAttribute("0")]
[SfcPropertyAttribute("15616")]
public string Name { get; public set; }
    [SfcPropertyAttribute("1024")]
public DataType DataType { get; public set; }
    public static string UrnSuffix { get; }
    [SfcObjectAttribute("1", "32")]
public Index Parent { get; public set; }
    private bool Microsoft.SqlServer.Management.Sdk.Sfc.ISfcSupportsDesignMode.IsDesignMode { get; }
    private XSchemaProps XSchema { get; }
    private XRuntimeProps XRuntime { get; }
    [SfcPropertyAttribute("3072")]
public int ID { get; }
    [SfcPropertyAttribute("3328")]
public bool IsNode { get; public set; }
    [SfcPropertyAttribute("3328")]
public bool IsSingleton { get; public set; }
    [SfcPropertyAttribute("3072")]
public bool IsXQueryMaxlengthInferred { get; }
    [SfcPropertyAttribute("3072")]
public bool IsXQueryTypeInferred { get; }
    [SfcPropertyAttribute("3328")]
public string Path { get; public set; }
    [SfcPropertyAttribute("3328", "XQuery")]
public IndexedXmlPathType PathType { get; public set; }
    [SfcPropertyAttribute("3328")]
public string PathTypeDesc { get; public set; }
    [SfcPropertyAttribute("3328")]
public string SqlTypeCollationName { get; public set; }
    [SfcPropertyAttribute("3328")]
public int XmlComponentID { get; public set; }
    [SfcPropertyAttribute("3328")]
public int XQueryMaxLength { get; public set; }
    [SfcPropertyAttribute("3328")]
public string XQueryTypeDescription { get; public set; }
    internal IndexedXmlPath(AbstractCollectionBase parentColl, ObjectKeyBase key, SqlSmoState state);
    public IndexedXmlPath(Index index, string name);
    public virtual string get_Name();
    public virtual void set_Name(string value);
    public DataType get_DataType();
    public void set_DataType(DataType value);
    public sealed virtual void MarkForDrop(bool dropOnAlter);
    public static string get_UrnSuffix();
    internal static String[] GetScriptFields(Type parentType, ServerVersion version, DatabaseEngineType databaseEngineType, DatabaseEngineEdition databaseEngineEdition, bool defaultTextMode);
    public Index get_Parent();
    public void set_Parent(Index value);
    private sealed virtual override bool Microsoft.SqlServer.Management.Sdk.Sfc.ISfcSupportsDesignMode.get_IsDesignMode();
    internal virtual SqlPropertyMetadataProvider GetPropertyMetadataProvider();
    private sealed virtual override object Microsoft.SqlServer.Management.Smo.IPropertyDataDispatch.GetPropertyValue(int index);
    private sealed virtual override void Microsoft.SqlServer.Management.Smo.IPropertyDataDispatch.SetPropertyValue(int index, object value);
    private XSchemaProps get_XSchema();
    private XRuntimeProps get_XRuntime();
    public int get_ID();
    public bool get_IsNode();
    public void set_IsNode(bool value);
    public bool get_IsSingleton();
    public void set_IsSingleton(bool value);
    public bool get_IsXQueryMaxlengthInferred();
    public bool get_IsXQueryTypeInferred();
    public string get_Path();
    public void set_Path(string value);
    public IndexedXmlPathType get_PathType();
    public void set_PathType(IndexedXmlPathType value);
    public string get_PathTypeDesc();
    public void set_PathTypeDesc(string value);
    public string get_SqlTypeCollationName();
    public void set_SqlTypeCollationName(string value);
    public int get_XmlComponentID();
    public void set_XmlComponentID(int value);
    public int get_XQueryMaxLength();
    public void set_XQueryMaxLength(int value);
    public string get_XQueryTypeDescription();
    public void set_XQueryTypeDescription(string value);
    internal virtual String[] GetNonAlterableProperties();
    internal virtual object GetPropertyDefaultValue(string propname);
}
[DefaultMemberAttribute("Item")]
public class Microsoft.SqlServer.Management.Smo.IndexedXmlPathCollection : ParameterCollectionBase {
    public Index Parent { get; }
    public IndexedXmlPath Item { get; }
    public IndexedXmlPath Item { get; }
    internal IndexedXmlPathCollection(SqlSmoObject parentInstance);
    public Index get_Parent();
    public IndexedXmlPath get_Item(int index);
    public void CopyTo(IndexedXmlPath[] array, int index);
    public IndexedXmlPath get_Item(string name);
    protected virtual Type GetCollectionElementType();
    internal virtual SqlSmoObject GetCollectionElementInstance(ObjectKeyBase key, SqlSmoState state);
    public void Add(IndexedXmlPath indexedXmlPath);
    public void Add(IndexedXmlPath indexedXmlPath, string insertAtColumnName);
    public void Add(IndexedXmlPath indexedXmlPath, int insertAtPosition);
    public void Remove(IndexedXmlPath indexedXmlPath);
    public IndexedXmlPath ItemById(int id);
}
[SfcElementAttribute("48")]
public class Microsoft.SqlServer.Management.Smo.IndexedXmlPathNamespace : NamedSmoObject {
    private XSchemaProps _XSchema;
    private XRuntimeProps _XRuntime;
    public static string UrnSuffix { get; }
    [SfcObjectAttribute("1", "32")]
public Index Parent { get; public set; }
    private bool Microsoft.SqlServer.Management.Sdk.Sfc.ISfcSupportsDesignMode.IsDesignMode { get; }
    private XSchemaProps XSchema { get; }
    private XRuntimeProps XRuntime { get; }
    [SfcPropertyAttribute("3328")]
public bool IsDefaultUri { get; public set; }
    [SfcPropertyAttribute("3328")]
public string Uri { get; public set; }
    internal IndexedXmlPathNamespace(AbstractCollectionBase parentColl, ObjectKeyBase key, SqlSmoState state);
    public IndexedXmlPathNamespace(Index index, string name);
    public static string get_UrnSuffix();
    internal static String[] GetScriptFields(Type parentType, ServerVersion version, DatabaseEngineType databaseEngineType, DatabaseEngineEdition databaseEngineEdition, bool defaultTextMode);
    public Index get_Parent();
    public void set_Parent(Index value);
    private sealed virtual override bool Microsoft.SqlServer.Management.Sdk.Sfc.ISfcSupportsDesignMode.get_IsDesignMode();
    internal virtual SqlPropertyMetadataProvider GetPropertyMetadataProvider();
    private sealed virtual override object Microsoft.SqlServer.Management.Smo.IPropertyDataDispatch.GetPropertyValue(int index);
    private sealed virtual override void Microsoft.SqlServer.Management.Smo.IPropertyDataDispatch.SetPropertyValue(int index, object value);
    private XSchemaProps get_XSchema();
    private XRuntimeProps get_XRuntime();
    public bool get_IsDefaultUri();
    public void set_IsDefaultUri(bool value);
    public string get_Uri();
    public void set_Uri(string value);
    internal virtual String[] GetNonAlterableProperties();
}
[DefaultMemberAttribute("Item")]
public class Microsoft.SqlServer.Management.Smo.IndexedXmlPathNamespaceCollection : SimpleObjectCollectionBase {
    public Index Parent { get; }
    public IndexedXmlPathNamespace Item { get; }
    public IndexedXmlPathNamespace Item { get; }
    internal IndexedXmlPathNamespaceCollection(SqlSmoObject parentInstance);
    public Index get_Parent();
    public IndexedXmlPathNamespace get_Item(int index);
    public IndexedXmlPathNamespace get_Item(string name);
    public void CopyTo(IndexedXmlPathNamespace[] array, int index);
    protected virtual Type GetCollectionElementType();
    internal virtual SqlSmoObject GetCollectionElementInstance(ObjectKeyBase key, SqlSmoState state);
    public void Remove(IndexedXmlPathNamespace indexedXmlPathNamespace);
    public void Remove(string name);
    public void Add(IndexedXmlPathNamespace indexedXmlPathNamespace);
    internal SqlSmoObject GetObjectByName(string name);
    internal virtual ObjectKeyBase CreateKeyFromUrn(Urn urn);
}
public enum Microsoft.SqlServer.Management.Smo.IndexEnableAction : Enum {
    public int value__;
    public static IndexEnableAction Rebuild;
    public static IndexEnableAction Recreate;
}
public class Microsoft.SqlServer.Management.Smo.IndexEvents : object {
    private ObjectEventsWorker serverEventsWorker;
    private Index parent;
    internal IndexEvents(Index parent);
    public ObjectEventSet GetEventSelection();
    public void SubscribeToEvents(ObjectEventSet events);
    public void SubscribeToEvents(ObjectEventSet events, ServerEventHandler eventHandler);
    public void UnsubscribeFromEvents(ObjectEventSet events);
    public void UnsubscribeAllEvents();
    public void StartEvents();
    public void StopEvents();
    public void add_ServerEvent(ServerEventHandler value);
    public void remove_ServerEvent(ServerEventHandler value);
    private void InitializeEvents();
}
public enum Microsoft.SqlServer.Management.Smo.IndexOperation : Enum {
    public int value__;
    public static IndexOperation Rebuild;
    public static IndexOperation Reorganize;
    public static IndexOperation Disable;
}
internal class Microsoft.SqlServer.Management.Smo.IndexPropagateInfo : object {
    private IndexCollection Indexes;
    private Index clusteredPrimaryKey;
    private Index nonclusteredPrimaryKey;
    private List`1<Index> clusteredUniqueKeys;
    private List`1<Index> nonclusteredUniqueKeys;
    private List`1<Index> clusteredIndexes;
    private List`1<Index> nonclusteredIndexes;
    private List`1<Index> xmlIndexes;
    private List`1<Index> spatialIndexes;
    public IndexPropagateInfo(IndexCollection indexCollection);
    private void SetupIndexPropagation();
    private void CheckKeyAndAdd(Index index, Index& primaryKey, List`1<Index> uniqueKeys, List`1<Index> indexes);
    private void ResetIndexPropagation();
    public void PropagateInfo(ArrayList propInfo);
}
internal class Microsoft.SqlServer.Management.Smo.IndexScriptContainer : ObjectScriptContainer {
    private bool isMemoryOptimized;
    [CompilerGeneratedAttribute]
private IndexType <IndexType>k__BackingField;
    public IndexType IndexType { get; private set; }
    public bool IsMemoryOptimizedIndex { get; }
    public IndexScriptContainer(Index index, ScriptingPreferences sp, RetryRequestedEventHandler retryEvent);
    [CompilerGeneratedAttribute]
public IndexType get_IndexType();
    [CompilerGeneratedAttribute]
private void set_IndexType(IndexType value);
    public bool get_IsMemoryOptimizedIndex();
    protected virtual void Initialize(SqlSmoObject obj, ScriptingPreferences sp, RetryRequestedEventHandler retryEvent);
}
public enum Microsoft.SqlServer.Management.Smo.InDoubtTransactionResolutionType : Enum {
    public int value__;
    public static InDoubtTransactionResolutionType NoPresumption;
    public static InDoubtTransactionResolutionType PresumeCommit;
    public static InDoubtTransactionResolutionType PresumeAbort;
}
[SfcElementAttribute("48")]
public class Microsoft.SqlServer.Management.Smo.Information : SqlSmoObject {
    [SfcObjectAttribute("1")]
public Server Parent { get; }
    public static string UrnSuffix { get; }
    [SfcPropertyAttribute("1056")]
public Version Version { get; }
    [SfcPropertyAttribute("1024")]
public Edition EngineEdition { get; }
    [SfcPropertyAttribute("1024")]
public Version ResourceVersion { get; }
    [SfcPropertyAttribute("1024")]
public Version BuildClrVersion { get; }
    [SfcPropertyAttribute("1024")]
public string BuildClrVersionString { get; }
    [SfcPropertyAttribute("3104")]
public int BuildNumber { get; }
    [SfcPropertyAttribute("3072")]
public string Collation { get; }
    [SfcPropertyAttribute("3072")]
public int CollationID { get; }
    [SfcPropertyAttribute("3072")]
public int ComparisonStyle { get; }
    [SfcPropertyAttribute("1024")]
public string ComputerNamePhysicalNetBIOS { get; }
    [SfcPropertyAttribute("3072")]
public string Edition { get; }
    [SfcPropertyAttribute("1024")]
public string ErrorLogPath { get; }
    [SfcPropertyAttribute("1056")]
public string FullyQualifiedNetName { get; }
    [SfcPropertyAttribute("1056")]
public string HardwareGeneration { get; }
    [SfcPropertyAttribute("1056")]
public string HostDistribution { get; }
    [SfcPropertyAttribute("3104")]
public string HostPlatform { get; }
    [SfcPropertyAttribute("1056")]
public string HostRelease { get; }
    [SfcPropertyAttribute("1056")]
public string HostServicePackLevel { get; }
    [SfcPropertyAttribute("1056")]
public int HostSku { get; }
    [SfcPropertyAttribute("3072")]
public bool IsCaseSensitive { get; }
    [SfcPropertyAttribute("1024")]
public bool IsClustered { get; }
    [SfcPropertyAttribute("3072")]
public bool IsFullTextInstalled { get; }
    [SfcPropertyAttribute("1056")]
public bool IsHadrEnabled { get; }
    [SfcPropertyAttribute("1024")]
public bool IsPolyBaseInstalled { get; }
    [SfcPropertyAttribute("3072")]
public bool IsSingleUser { get; }
    [SfcPropertyAttribute("3104")]
public bool IsXTPSupported { get; }
    [SfcPropertyAttribute("1056")]
public string Language { get; }
    [SfcPropertyAttribute("1024")]
public string MasterDBLogPath { get; }
    [SfcPropertyAttribute("1024")]
public string MasterDBPath { get; }
    [SfcPropertyAttribute("3072")]
public byte MaxPrecision { get; }
    [SfcPropertyAttribute("1056")]
public string NetName { get; }
    [SfcPropertyAttribute("1056")]
public string OSVersion { get; }
    [SfcPropertyAttribute("3072")]
public string PathSeparator { get; }
    [SfcPropertyAttribute("1056")]
public int PhysicalMemory { get; }
    [SfcPropertyAttribute("1056")]
public string Platform { get; }
    [SfcPropertyAttribute("1056")]
public int Processors { get; }
    [SfcPropertyAttribute("1056")]
public string Product { get; }
    [SfcPropertyAttribute("3072")]
public string ProductLevel { get; }
    [SfcPropertyAttribute("1056")]
public int ReservedStorageSizeMB { get; }
    [SfcPropertyAttribute("3072")]
public DateTime ResourceLastUpdateDateTime { get; }
    [SfcPropertyAttribute("3072")]
public string ResourceVersionString { get; }
    [SfcPropertyAttribute("1024")]
public string RootDirectory { get; }
    [SfcPropertyAttribute("1056")]
public string ServiceTier { get; }
    [SfcPropertyAttribute("3072")]
public short SqlCharSet { get; }
    [SfcPropertyAttribute("3072")]
public string SqlCharSetName { get; }
    [SfcPropertyAttribute("3072")]
public short SqlSortOrder { get; }
    [SfcPropertyAttribute("3072")]
public string SqlSortOrderName { get; }
    [SfcPropertyAttribute("1056")]
public int UsedStorageSizeMB { get; }
    [SfcPropertyAttribute("3104")]
public int VersionMajor { get; }
    [SfcPropertyAttribute("3104")]
public int VersionMinor { get; }
    [SfcPropertyAttribute("3104")]
public string VersionString { get; }
    internal Information(Server parentsrv, ObjectKeyBase key, SqlSmoState state);
    public Server get_Parent();
    protected sealed virtual void GetUrnRecursive(StringBuilder urnbuilder, UrnIdOption idOption);
    public static string get_UrnSuffix();
    public Version get_Version();
    public Edition get_EngineEdition();
    public Version get_ResourceVersion();
    public Version get_BuildClrVersion();
    internal virtual SqlPropertyMetadataProvider GetPropertyMetadataProvider();
    public string get_BuildClrVersionString();
    public int get_BuildNumber();
    public string get_Collation();
    public int get_CollationID();
    public int get_ComparisonStyle();
    public string get_ComputerNamePhysicalNetBIOS();
    public string get_Edition();
    public string get_ErrorLogPath();
    public string get_FullyQualifiedNetName();
    public string get_HardwareGeneration();
    public string get_HostDistribution();
    public string get_HostPlatform();
    public string get_HostRelease();
    public string get_HostServicePackLevel();
    public int get_HostSku();
    public bool get_IsCaseSensitive();
    public bool get_IsClustered();
    public bool get_IsFullTextInstalled();
    public bool get_IsHadrEnabled();
    public bool get_IsPolyBaseInstalled();
    public bool get_IsSingleUser();
    public bool get_IsXTPSupported();
    public string get_Language();
    public string get_MasterDBLogPath();
    public string get_MasterDBPath();
    public byte get_MaxPrecision();
    public string get_NetName();
    public string get_OSVersion();
    public string get_PathSeparator();
    public int get_PhysicalMemory();
    public string get_Platform();
    public int get_Processors();
    public string get_Product();
    public string get_ProductLevel();
    public int get_ReservedStorageSizeMB();
    public DateTime get_ResourceLastUpdateDateTime();
    public string get_ResourceVersionString();
    public string get_RootDirectory();
    public string get_ServiceTier();
    public short get_SqlCharSet();
    public string get_SqlCharSetName();
    public short get_SqlSortOrder();
    public string get_SqlSortOrderName();
    public int get_UsedStorageSizeMB();
    public int get_VersionMajor();
    public int get_VersionMinor();
    public string get_VersionString();
}
public enum Microsoft.SqlServer.Management.Smo.InstanceState : Enum {
    public int value__;
    public static InstanceState Unknown;
    public static InstanceState Online;
    public static InstanceState OnlinePending;
    public static InstanceState Offline;
    public static InstanceState OfflinePending;
}
public class Microsoft.SqlServer.Management.Smo.InternalSmoErrorException : SmoException {
    public SmoExceptionType SmoExceptionType { get; }
    public InternalSmoErrorException(string message);
    public InternalSmoErrorException(string message, Exception innerException);
    private InternalSmoErrorException(SerializationInfo info, StreamingContext context);
    private void Init();
    public virtual SmoExceptionType get_SmoExceptionType();
}
public class Microsoft.SqlServer.Management.Smo.InvalidScriptingOptionException : SmoException {
    public SmoExceptionType SmoExceptionType { get; }
    public InvalidScriptingOptionException(string message);
    public InvalidScriptingOptionException(string message, Exception innerException);
    private InvalidScriptingOptionException(SerializationInfo info, StreamingContext context);
    private void Init();
    public virtual SmoExceptionType get_SmoExceptionType();
}
public class Microsoft.SqlServer.Management.Smo.InvalidSmoOperationException : SmoException {
    private string opName;
    private SqlSmoState state;
    public SmoExceptionType SmoExceptionType { get; }
    public string Message { get; }
    public InvalidSmoOperationException(string message);
    public InvalidSmoOperationException(string message, Exception innerException);
    public InvalidSmoOperationException(string opName, SqlSmoState state);
    private InvalidSmoOperationException(SerializationInfo info, StreamingContext context);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    public virtual SmoExceptionType get_SmoExceptionType();
    public virtual string get_Message();
    private void Init();
}
public class Microsoft.SqlServer.Management.Smo.InvalidVersionSmoOperationException : SmoException {
    private ServerVersion version;
    public SmoExceptionType SmoExceptionType { get; }
    public string Message { get; }
    public InvalidVersionSmoOperationException(string message);
    public InvalidVersionSmoOperationException(string message, Exception innerException);
    public InvalidVersionSmoOperationException(ServerVersion version);
    private InvalidVersionSmoOperationException(SerializationInfo info, StreamingContext context);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    public virtual SmoExceptionType get_SmoExceptionType();
    public virtual string get_Message();
    private void Init();
}
public interface Microsoft.SqlServer.Management.Smo.IObjectPermission {
    public abstract virtual void Deny(ObjectPermissionSet permissions, String[] granteeNames);
    public abstract virtual void Deny(ObjectPermissionSet permissions, string granteeName);
    public abstract virtual void Deny(ObjectPermissionSet permissions, String[] granteeNames, bool cascade);
    public abstract virtual void Deny(ObjectPermissionSet permissions, string granteeName, bool cascade);
    public abstract virtual void Grant(ObjectPermissionSet permissions, String[] granteeNames);
    public abstract virtual void Grant(ObjectPermissionSet permissions, string granteeName);
    public abstract virtual void Grant(ObjectPermissionSet permissions, String[] granteeNames, bool grantGrant);
    public abstract virtual void Grant(ObjectPermissionSet permissions, string granteeName, bool grantGrant);
    public abstract virtual void Grant(ObjectPermissionSet permissions, String[] granteeNames, bool grantGrant, string asRole);
    public abstract virtual void Grant(ObjectPermissionSet permissions, string granteeName, bool grantGrant, string asRole);
    public abstract virtual void Revoke(ObjectPermissionSet permissions, String[] granteeNames);
    public abstract virtual void Revoke(ObjectPermissionSet permissions, string granteeName);
    public abstract virtual void Revoke(ObjectPermissionSet permissions, String[] granteeNames, bool revokeGrant, bool cascade);
    public abstract virtual void Revoke(ObjectPermissionSet permissions, string granteeName, bool revokeGrant, bool cascade, string asRole);
    public abstract virtual ObjectPermissionInfo[] EnumObjectPermissions();
    public abstract virtual ObjectPermissionInfo[] EnumObjectPermissions(string granteeName);
    public abstract virtual ObjectPermissionInfo[] EnumObjectPermissions(ObjectPermissionSet permissions);
    public abstract virtual ObjectPermissionInfo[] EnumObjectPermissions(string granteeName, ObjectPermissionSet permissions);
}
internal interface Microsoft.SqlServer.Management.Smo.IPropertyDataDispatch {
    public abstract virtual object GetPropertyValue(int index);
    public abstract virtual void SetPropertyValue(int index, object value);
}
public interface Microsoft.SqlServer.Management.Smo.IScriptable {
    public abstract virtual StringCollection Script();
    public abstract virtual StringCollection Script(ScriptingOptions scriptingOptions);
}
internal interface Microsoft.SqlServer.Management.Smo.IScriptStringBuilderParameter {
    public abstract virtual string GetKey();
    public abstract virtual string ToScript();
}
[EvaluationModeAttribute("4")]
[CLSCompliantAttribute("False")]
[TypeConverterAttribute("Microsoft.SqlServer.Management.Sdk.Sfc.LocalizableTypeConverter")]
[LocalizedPropertyResourcesAttribute("Microsoft.SqlServer.Management.Smo.FacetSR")]
[DisplayNameKeyAttribute("ServerAuditName")]
[DisplayDescriptionKeyAttribute("ServerAuditDesc")]
public interface Microsoft.SqlServer.Management.Smo.IServerAuditFacet {
    [DisplayNameKeyAttribute("DefaultTraceEnabledName")]
[DisplayDescriptionKeyAttribute("DefaultTraceEnabledDesc")]
public bool DefaultTraceEnabled { get; public set; }
    [DisplayNameKeyAttribute("C2AuditTracingEnabledName")]
[DisplayDescriptionKeyAttribute("C2AuditTracingEnabledDesc")]
[PostConfigurationActionAttribute("1")]
public bool C2AuditTracingEnabled { get; public set; }
    [DisplayNameKeyAttribute("LoginAuditLevelName")]
[DisplayDescriptionKeyAttribute("LoginAuditLevelDesc")]
public AuditLevel LoginAuditLevel { get; public set; }
    public abstract virtual bool get_DefaultTraceEnabled();
    public abstract virtual void set_DefaultTraceEnabled(bool value);
    public abstract virtual bool get_C2AuditTracingEnabled();
    public abstract virtual void set_C2AuditTracingEnabled(bool value);
    public abstract virtual AuditLevel get_LoginAuditLevel();
    public abstract virtual void set_LoginAuditLevel(AuditLevel value);
}
[StateChangeEventAttribute("AUDIT_SERVER_OPERATION_EVENT", "SERVER")]
[EvaluationModeAttribute("6")]
[CLSCompliantAttribute("False")]
[TypeConverterAttribute("Microsoft.SqlServer.Management.Sdk.Sfc.LocalizableTypeConverter")]
public interface Microsoft.SqlServer.Management.Smo.IServerConfigurationFacet {
    public bool ContainmentEnabled { get; public set; }
    public bool AdHocRemoteQueriesEnabled { get; public set; }
    public int AffinityMask { get; public set; }
    public int Affinity64Mask { get; public set; }
    [PostConfigurationActionAttribute("1")]
public int AffinityIOMask { get; public set; }
    [PostConfigurationActionAttribute("1")]
public int Affinity64IOMask { get; public set; }
    public bool AgentXPsEnabled { get; public set; }
    public bool AllowUpdates { get; public set; }
    [PostConfigurationActionAttribute("1")]
public bool AweEnabled { get; public set; }
    public int BlockedProcessThreshold { get; public set; }
    [PostConfigurationActionAttribute("1")]
public bool C2AuditTracingEnabled { get; public set; }
    public bool ClrIntegrationEnabled { get; public set; }
    public bool CommonCriteriaComplianceEnabled { get; }
    public int CostThresholdForParallelism { get; public set; }
    public bool CrossDBOwnershipChainingEnabled { get; public set; }
    public int CursorThreshold { get; public set; }
    public bool DatabaseMailEnabled { get; public set; }
    public bool DefaultTraceEnabled { get; public set; }
    public int DefaultFullTextLanguage { get; public set; }
    public int DefaultLanguage { get; public set; }
    public bool DisallowResultsFromTriggers { get; public set; }
    [PostConfigurationActionAttribute("1")]
public int FillFactor { get; public set; }
    public int FullTextCrawlBandwidthMin { get; public set; }
    public int FullTextCrawlBandwidthMax { get; public set; }
    public int FullTextNotifyBandwidthMin { get; public set; }
    public int FullTextNotifyBandwidthMax { get; public set; }
    public int FullTextCrawlRangeMax { get; public set; }
    public InDoubtTransactionResolutionType InDoubtTransactionResolution { get; public set; }
    public int IndexCreateMemory { get; public set; }
    [PostConfigurationActionAttribute("1")]
public bool LightweightPoolingEnabled { get; public set; }
    [PostConfigurationActionAttribute("1")]
public int DynamicLocks { get; public set; }
    public int MaxDegreeOfParallelism { get; public set; }
    public int MaxServerMemory { get; public set; }
    [PostConfigurationActionAttribute("1")]
public int MaxWorkerThreads { get; public set; }
    [PostConfigurationActionAttribute("1")]
public int MediaRetention { get; public set; }
    public int MinMemoryPerQuery { get; public set; }
    public int MinServerMemory { get; public set; }
    public bool NestedTriggersEnabled { get; public set; }
    public int NetworkPacketSize { get; public set; }
    public bool OleAutomationEnabled { get; public set; }
    [PostConfigurationActionAttribute("1")]
public int OpenObjects { get; public set; }
    public bool PrecomputeRank { get; public set; }
    [PostConfigurationActionAttribute("1")]
public bool PriorityBoost { get; public set; }
    public int ProtocolHandlerTimeout { get; public set; }
    public int QueryGovernorCostLimit { get; public set; }
    public int QueryWait { get; public set; }
    public int RecoveryInterval { get; public set; }
    [PostConfigurationActionAttribute("1")]
public bool RemoteAccessEnabled { get; public set; }
    public bool RemoteDacEnabled { get; public set; }
    public int RemoteLoginTimeout { get; public set; }
    public bool RemoteProcTransEnabled { get; public set; }
    public int RemoteQueryTimeout { get; public set; }
    public int ReplicationMaxTextSize { get; public set; }
    public bool ReplicationXPsEnabled { get; public set; }
    [PostConfigurationActionAttribute("1")]
public bool ScanForStartupProcedures { get; public set; }
    public bool ServerTriggerRecursionEnabled { get; public set; }
    [PostConfigurationActionAttribute("1")]
public bool SetWorkingSetSize { get; public set; }
    public bool ShowAdvancedOptions { get; public set; }
    public bool SmoAndDmoXPsEnabled { get; public set; }
    public bool SqlMailEnabled { get; public set; }
    public bool TransformNoiseWords { get; public set; }
    public int TwoDigitYearCutoff { get; public set; }
    [PostConfigurationActionAttribute("1")]
public int UserConnections { get; public set; }
    public int UserInstanceTimeout { get; public set; }
    public bool UserInstancesEnabled { get; public set; }
    public int UserOptions { get; public set; }
    public bool WebAssistantEnabled { get; public set; }
    public bool XPCmdShellEnabled { get; public set; }
    public bool DefaultBackupCompressionEnabled { get; public set; }
    public bool ExtensibleKeyManagementEnabled { get; public set; }
    [PostConfigurationActionAttribute("1")]
public FilestreamAccessLevelType FilestreamAccessLevel { get; public set; }
    public bool OptimizeAdhocWorkloads { get; public set; }
    public bool RemoteDataArchiveEnabled { get; public set; }
    public abstract virtual bool get_ContainmentEnabled();
    public abstract virtual void set_ContainmentEnabled(bool value);
    public abstract virtual bool get_AdHocRemoteQueriesEnabled();
    public abstract virtual void set_AdHocRemoteQueriesEnabled(bool value);
    public abstract virtual int get_AffinityMask();
    public abstract virtual void set_AffinityMask(int value);
    public abstract virtual int get_Affinity64Mask();
    public abstract virtual void set_Affinity64Mask(int value);
    public abstract virtual int get_AffinityIOMask();
    public abstract virtual void set_AffinityIOMask(int value);
    public abstract virtual int get_Affinity64IOMask();
    public abstract virtual void set_Affinity64IOMask(int value);
    public abstract virtual bool get_AgentXPsEnabled();
    public abstract virtual void set_AgentXPsEnabled(bool value);
    public abstract virtual bool get_AllowUpdates();
    public abstract virtual void set_AllowUpdates(bool value);
    public abstract virtual bool get_AweEnabled();
    public abstract virtual void set_AweEnabled(bool value);
    public abstract virtual int get_BlockedProcessThreshold();
    public abstract virtual void set_BlockedProcessThreshold(int value);
    public abstract virtual bool get_C2AuditTracingEnabled();
    public abstract virtual void set_C2AuditTracingEnabled(bool value);
    public abstract virtual bool get_ClrIntegrationEnabled();
    public abstract virtual void set_ClrIntegrationEnabled(bool value);
    public abstract virtual bool get_CommonCriteriaComplianceEnabled();
    public abstract virtual int get_CostThresholdForParallelism();
    public abstract virtual void set_CostThresholdForParallelism(int value);
    public abstract virtual bool get_CrossDBOwnershipChainingEnabled();
    public abstract virtual void set_CrossDBOwnershipChainingEnabled(bool value);
    public abstract virtual int get_CursorThreshold();
    public abstract virtual void set_CursorThreshold(int value);
    public abstract virtual bool get_DatabaseMailEnabled();
    public abstract virtual void set_DatabaseMailEnabled(bool value);
    public abstract virtual bool get_DefaultTraceEnabled();
    public abstract virtual void set_DefaultTraceEnabled(bool value);
    public abstract virtual int get_DefaultFullTextLanguage();
    public abstract virtual void set_DefaultFullTextLanguage(int value);
    public abstract virtual int get_DefaultLanguage();
    public abstract virtual void set_DefaultLanguage(int value);
    public abstract virtual bool get_DisallowResultsFromTriggers();
    public abstract virtual void set_DisallowResultsFromTriggers(bool value);
    public abstract virtual int get_FillFactor();
    public abstract virtual void set_FillFactor(int value);
    public abstract virtual int get_FullTextCrawlBandwidthMin();
    public abstract virtual void set_FullTextCrawlBandwidthMin(int value);
    public abstract virtual int get_FullTextCrawlBandwidthMax();
    public abstract virtual void set_FullTextCrawlBandwidthMax(int value);
    public abstract virtual int get_FullTextNotifyBandwidthMin();
    public abstract virtual void set_FullTextNotifyBandwidthMin(int value);
    public abstract virtual int get_FullTextNotifyBandwidthMax();
    public abstract virtual void set_FullTextNotifyBandwidthMax(int value);
    public abstract virtual int get_FullTextCrawlRangeMax();
    public abstract virtual void set_FullTextCrawlRangeMax(int value);
    public abstract virtual InDoubtTransactionResolutionType get_InDoubtTransactionResolution();
    public abstract virtual void set_InDoubtTransactionResolution(InDoubtTransactionResolutionType value);
    public abstract virtual int get_IndexCreateMemory();
    public abstract virtual void set_IndexCreateMemory(int value);
    public abstract virtual bool get_LightweightPoolingEnabled();
    public abstract virtual void set_LightweightPoolingEnabled(bool value);
    public abstract virtual int get_DynamicLocks();
    public abstract virtual void set_DynamicLocks(int value);
    public abstract virtual int get_MaxDegreeOfParallelism();
    public abstract virtual void set_MaxDegreeOfParallelism(int value);
    public abstract virtual int get_MaxServerMemory();
    public abstract virtual void set_MaxServerMemory(int value);
    public abstract virtual int get_MaxWorkerThreads();
    public abstract virtual void set_MaxWorkerThreads(int value);
    public abstract virtual int get_MediaRetention();
    public abstract virtual void set_MediaRetention(int value);
    public abstract virtual int get_MinMemoryPerQuery();
    public abstract virtual void set_MinMemoryPerQuery(int value);
    public abstract virtual int get_MinServerMemory();
    public abstract virtual void set_MinServerMemory(int value);
    public abstract virtual bool get_NestedTriggersEnabled();
    public abstract virtual void set_NestedTriggersEnabled(bool value);
    public abstract virtual int get_NetworkPacketSize();
    public abstract virtual void set_NetworkPacketSize(int value);
    public abstract virtual bool get_OleAutomationEnabled();
    public abstract virtual void set_OleAutomationEnabled(bool value);
    public abstract virtual int get_OpenObjects();
    public abstract virtual void set_OpenObjects(int value);
    public abstract virtual bool get_PrecomputeRank();
    public abstract virtual void set_PrecomputeRank(bool value);
    public abstract virtual bool get_PriorityBoost();
    public abstract virtual void set_PriorityBoost(bool value);
    public abstract virtual int get_ProtocolHandlerTimeout();
    public abstract virtual void set_ProtocolHandlerTimeout(int value);
    public abstract virtual int get_QueryGovernorCostLimit();
    public abstract virtual void set_QueryGovernorCostLimit(int value);
    public abstract virtual int get_QueryWait();
    public abstract virtual void set_QueryWait(int value);
    public abstract virtual int get_RecoveryInterval();
    public abstract virtual void set_RecoveryInterval(int value);
    public abstract virtual bool get_RemoteAccessEnabled();
    public abstract virtual void set_RemoteAccessEnabled(bool value);
    public abstract virtual bool get_RemoteDacEnabled();
    public abstract virtual void set_RemoteDacEnabled(bool value);
    public abstract virtual int get_RemoteLoginTimeout();
    public abstract virtual void set_RemoteLoginTimeout(int value);
    public abstract virtual bool get_RemoteProcTransEnabled();
    public abstract virtual void set_RemoteProcTransEnabled(bool value);
    public abstract virtual int get_RemoteQueryTimeout();
    public abstract virtual void set_RemoteQueryTimeout(int value);
    public abstract virtual int get_ReplicationMaxTextSize();
    public abstract virtual void set_ReplicationMaxTextSize(int value);
    public abstract virtual bool get_ReplicationXPsEnabled();
    public abstract virtual void set_ReplicationXPsEnabled(bool value);
    public abstract virtual bool get_ScanForStartupProcedures();
    public abstract virtual void set_ScanForStartupProcedures(bool value);
    public abstract virtual bool get_ServerTriggerRecursionEnabled();
    public abstract virtual void set_ServerTriggerRecursionEnabled(bool value);
    public abstract virtual bool get_SetWorkingSetSize();
    public abstract virtual void set_SetWorkingSetSize(bool value);
    public abstract virtual bool get_ShowAdvancedOptions();
    public abstract virtual void set_ShowAdvancedOptions(bool value);
    public abstract virtual bool get_SmoAndDmoXPsEnabled();
    public abstract virtual void set_SmoAndDmoXPsEnabled(bool value);
    public abstract virtual bool get_SqlMailEnabled();
    public abstract virtual void set_SqlMailEnabled(bool value);
    public abstract virtual bool get_TransformNoiseWords();
    public abstract virtual void set_TransformNoiseWords(bool value);
    public abstract virtual int get_TwoDigitYearCutoff();
    public abstract virtual void set_TwoDigitYearCutoff(int value);
    public abstract virtual int get_UserConnections();
    public abstract virtual void set_UserConnections(int value);
    public abstract virtual int get_UserInstanceTimeout();
    public abstract virtual void set_UserInstanceTimeout(int value);
    public abstract virtual bool get_UserInstancesEnabled();
    public abstract virtual void set_UserInstancesEnabled(bool value);
    public abstract virtual int get_UserOptions();
    public abstract virtual void set_UserOptions(int value);
    public abstract virtual bool get_WebAssistantEnabled();
    public abstract virtual void set_WebAssistantEnabled(bool value);
    public abstract virtual bool get_XPCmdShellEnabled();
    public abstract virtual void set_XPCmdShellEnabled(bool value);
    public abstract virtual bool get_DefaultBackupCompressionEnabled();
    public abstract virtual void set_DefaultBackupCompressionEnabled(bool value);
    public abstract virtual bool get_ExtensibleKeyManagementEnabled();
    public abstract virtual void set_ExtensibleKeyManagementEnabled(bool value);
    public abstract virtual FilestreamAccessLevelType get_FilestreamAccessLevel();
    public abstract virtual void set_FilestreamAccessLevel(FilestreamAccessLevelType value);
    public abstract virtual bool get_OptimizeAdhocWorkloads();
    public abstract virtual void set_OptimizeAdhocWorkloads(bool value);
    public abstract virtual bool get_RemoteDataArchiveEnabled();
    public abstract virtual void set_RemoteDataArchiveEnabled(bool value);
}
[CLSCompliantAttribute("False")]
[EvaluationModeAttribute("4")]
[TypeConverterAttribute("Microsoft.SqlServer.Management.Sdk.Sfc.LocalizableTypeConverter")]
[LocalizedPropertyResourcesAttribute("Microsoft.SqlServer.Management.Smo.LocalizableResources")]
[DisplayNameKeyAttribute("IServerInformation_Name")]
[DisplayDescriptionKeyAttribute("IServerInformation_Desc")]
[RootFacetAttribute("Microsoft.SqlServer.Management.Smo.Server")]
public interface Microsoft.SqlServer.Management.Smo.IServerInformation {
    [DisplayNameKeyAttribute("Server_CollationName")]
[DisplayDescriptionKeyAttribute("Server_CollationDesc")]
public string Collation { get; }
    [DisplayNameKeyAttribute("Server_EditionName")]
[DisplayDescriptionKeyAttribute("Server_EditionDesc")]
public string Edition { get; }
    [DisplayNameKeyAttribute("Server_Name")]
[DisplayDescriptionKeyAttribute("Server_Desc")]
public string ErrorLogPath { get; }
    [DisplayNameKeyAttribute("Server_IsCaseSensitiveName")]
[DisplayDescriptionKeyAttribute("Server_IsCaseSensitiveDesc")]
public bool IsCaseSensitive { get; }
    [DisplayNameKeyAttribute("Server_IsClusteredName")]
[DisplayDescriptionKeyAttribute("Server_IsClusteredDesc")]
public bool IsClustered { get; }
    [DisplayNameKeyAttribute("Server_IsFullTextInstalledName")]
[DisplayDescriptionKeyAttribute("Server_IsFullTextInstalledDesc")]
public bool IsFullTextInstalled { get; }
    [DisplayNameKeyAttribute("Server_IsPolyBaseInstalledName")]
[DisplayDescriptionKeyAttribute("Server_IsPolyBaseInstalledDesc")]
public bool IsPolyBaseInstalled { get; }
    [DisplayNameKeyAttribute("Server_IsSingleUserName")]
[DisplayDescriptionKeyAttribute("Server_IsSingleUserDesc")]
public bool IsSingleUser { get; }
    [DisplayNameKeyAttribute("Server_LanguageName")]
[DisplayDescriptionKeyAttribute("Server_LanguageDesc")]
public string Language { get; }
    [DisplayNameKeyAttribute("Server_MasterDBLogPathName")]
[DisplayDescriptionKeyAttribute("Server_MasterDBLogPathDesc")]
public string MasterDBLogPath { get; }
    [DisplayNameKeyAttribute("Server_MasterDBPathName")]
[DisplayDescriptionKeyAttribute("Server_MasterDBPathDesc")]
public string MasterDBPath { get; }
    [DisplayNameKeyAttribute("Server_MaxPrecisionName")]
[DisplayDescriptionKeyAttribute("Server_MaxPrecisionDesc")]
public byte MaxPrecision { get; }
    [DisplayNameKeyAttribute("Server_NetNameName")]
[DisplayDescriptionKeyAttribute("Server_NetNameDesc")]
public string NetName { get; }
    [DisplayNameKeyAttribute("Server_OSVersionName")]
[DisplayDescriptionKeyAttribute("Server_OSVersionDesc")]
public string OSVersion { get; }
    [DisplayNameKeyAttribute("Server_PhysicalMemoryName")]
[DisplayDescriptionKeyAttribute("Server_PhysicalMemoryDesc")]
public int PhysicalMemory { get; }
    [DisplayNameKeyAttribute("Server_PlatformName")]
[DisplayDescriptionKeyAttribute("Server_PlatformDesc")]
public string Platform { get; }
    [DisplayNameKeyAttribute("Server_ProcessorsName")]
[DisplayDescriptionKeyAttribute("Server_ProcessorsDesc")]
public int Processors { get; }
    [DisplayNameKeyAttribute("Server_ProductName")]
[DisplayDescriptionKeyAttribute("Server_ProductDesc")]
public string Product { get; }
    [DisplayNameKeyAttribute("Server_ProductLevelName")]
[DisplayDescriptionKeyAttribute("Server_ProductLevelDesc")]
public string ProductLevel { get; }
    [DisplayNameKeyAttribute("Server_RootDirectoryName")]
[DisplayDescriptionKeyAttribute("Server_RootDirectoryDesc")]
public string RootDirectory { get; }
    [DisplayNameKeyAttribute("Server_VersionStringName")]
[DisplayDescriptionKeyAttribute("Server_VersionStringDesc")]
public string VersionString { get; }
    [DisplayNameKeyAttribute("Server_EngineEditionName")]
[DisplayDescriptionKeyAttribute("Server_EngineEditionDesc")]
public Edition EngineEdition { get; }
    [DisplayNameKeyAttribute("Server_VersionMajorName")]
[DisplayDescriptionKeyAttribute("Server_VersionMajorDesc")]
public int VersionMajor { get; }
    [DisplayNameKeyAttribute("Server_VersionMinorName")]
[DisplayDescriptionKeyAttribute("Server_VersionMinorDesc")]
public int VersionMinor { get; }
    [DisplayNameKeyAttribute("Server_BuildClrVersionStringName")]
[DisplayDescriptionKeyAttribute("Server_BuildClrVersionStringDesc")]
public string BuildClrVersionString { get; }
    [DisplayNameKeyAttribute("Server_BuildNumberName")]
[DisplayDescriptionKeyAttribute("Server_BuildNumberDesc")]
public int BuildNumber { get; }
    [DisplayNameKeyAttribute("Server_CollationIDName")]
[DisplayDescriptionKeyAttribute("Server_CollationIDDesc")]
public int CollationID { get; }
    [DisplayNameKeyAttribute("Server_ComparisonStyleName")]
[DisplayDescriptionKeyAttribute("Server_ComparisonStyleDesc")]
public int ComparisonStyle { get; }
    [DisplayNameKeyAttribute("Server_ComputerNamePhysicalNetBIOSName")]
[DisplayDescriptionKeyAttribute("Server_ComputerNamePhysicalNetBIOSDesc")]
public string ComputerNamePhysicalNetBIOS { get; }
    [DisplayNameKeyAttribute("Server_ResourceLastUpdateDateTimeName")]
[DisplayDescriptionKeyAttribute("Server_ResourceLastUpdateDateTimeDesc")]
public DateTime ResourceLastUpdateDateTime { get; }
    [DisplayNameKeyAttribute("Server_ResourceVersionStringName")]
[DisplayDescriptionKeyAttribute("Server_ResourceVersionStringDesc")]
public string ResourceVersionString { get; }
    [DisplayNameKeyAttribute("Server_SqlCharSetName")]
[DisplayDescriptionKeyAttribute("Server_SqlCharSetDesc")]
public short SqlCharSet { get; }
    [DisplayNameKeyAttribute("Server_SqlCharSetNameName")]
[DisplayDescriptionKeyAttribute("Server_SqlCharSetNameDesc")]
public string SqlCharSetName { get; }
    [DisplayNameKeyAttribute("Server_SqlSortOrderName")]
[DisplayDescriptionKeyAttribute("Server_SqlSortOrderDesc")]
public short SqlSortOrder { get; }
    [DisplayNameKeyAttribute("Server_SqlSortOrderNameName")]
[DisplayDescriptionKeyAttribute("Server_SqlSortOrderNameDesc")]
public string SqlSortOrderName { get; }
    [DisplayNameKeyAttribute("Server_IsHadrEnabledName")]
[DisplayDescriptionKeyAttribute("Server_IsHadrEnabledDesc")]
public bool IsHadrEnabled { get; }
    [DisplayNameKeyAttribute("Server_IsXTPSupported")]
[DisplayDescriptionKeyAttribute("Server_IsXTPSupportedDesc")]
public bool IsXTPSupported { get; }
    public abstract virtual string get_Collation();
    public abstract virtual string get_Edition();
    public abstract virtual string get_ErrorLogPath();
    public abstract virtual bool get_IsCaseSensitive();
    public abstract virtual bool get_IsClustered();
    public abstract virtual bool get_IsFullTextInstalled();
    public abstract virtual bool get_IsPolyBaseInstalled();
    public abstract virtual bool get_IsSingleUser();
    public abstract virtual string get_Language();
    public abstract virtual string get_MasterDBLogPath();
    public abstract virtual string get_MasterDBPath();
    public abstract virtual byte get_MaxPrecision();
    public abstract virtual string get_NetName();
    public abstract virtual string get_OSVersion();
    public abstract virtual int get_PhysicalMemory();
    public abstract virtual string get_Platform();
    public abstract virtual int get_Processors();
    public abstract virtual string get_Product();
    public abstract virtual string get_ProductLevel();
    public abstract virtual string get_RootDirectory();
    public abstract virtual string get_VersionString();
    public abstract virtual Edition get_EngineEdition();
    public abstract virtual int get_VersionMajor();
    public abstract virtual int get_VersionMinor();
    public abstract virtual string get_BuildClrVersionString();
    public abstract virtual int get_BuildNumber();
    public abstract virtual int get_CollationID();
    public abstract virtual int get_ComparisonStyle();
    public abstract virtual string get_ComputerNamePhysicalNetBIOS();
    public abstract virtual DateTime get_ResourceLastUpdateDateTime();
    public abstract virtual string get_ResourceVersionString();
    public abstract virtual short get_SqlCharSet();
    public abstract virtual string get_SqlCharSetName();
    public abstract virtual short get_SqlSortOrder();
    public abstract virtual string get_SqlSortOrderName();
    public abstract virtual bool get_IsHadrEnabled();
    public abstract virtual bool get_IsXTPSupported();
}
[EvaluationModeAttribute("4")]
[CLSCompliantAttribute("False")]
[TypeConverterAttribute("Microsoft.SqlServer.Management.Sdk.Sfc.LocalizableTypeConverter")]
[LocalizedPropertyResourcesAttribute("Microsoft.SqlServer.Management.Smo.FacetSR")]
[DisplayNameKeyAttribute("ServerPerformanceName")]
[DisplayDescriptionKeyAttribute("ServerPerformanceDesc")]
public interface Microsoft.SqlServer.Management.Smo.IServerPerformanceFacet {
    [DisplayNameKeyAttribute("AffinityMaskName")]
[DisplayDescriptionKeyAttribute("AffinityMaskDesc")]
public int AffinityMask { get; }
    [DisplayNameKeyAttribute("Affinity64MaskName")]
[DisplayDescriptionKeyAttribute("Affinity64MaskDesc")]
public int Affinity64Mask { get; }
    [DisplayNameKeyAttribute("AffinityMaskIOName")]
[DisplayDescriptionKeyAttribute("AffinityMaskIODesc")]
[PostConfigurationActionAttribute("1")]
public int AffinityIOMask { get; public set; }
    [DisplayNameKeyAttribute("Affinity64IOMaskName")]
[DisplayDescriptionKeyAttribute("Affinity64IOMaskDesc")]
public int Affinity64IOMask { get; }
    [DisplayNameKeyAttribute("BlockedProcessThresholdName")]
[DisplayDescriptionKeyAttribute("ServerPerformanceDesc")]
public int BlockedProcessThreshold { get; public set; }
    [DisplayNameKeyAttribute("DynamicLocksName")]
[DisplayDescriptionKeyAttribute("DynamicLocksDesc")]
[PostConfigurationActionAttribute("1")]
public int DynamicLocks { get; public set; }
    [DisplayNameKeyAttribute("LightweightPoolingEnabledName")]
[DisplayDescriptionKeyAttribute("LightweightPoolingEnabledDesc")]
[PostConfigurationActionAttribute("1")]
public bool LightweightPoolingEnabled { get; public set; }
    [DisplayNameKeyAttribute("ServerPerformanceName")]
[DisplayDescriptionKeyAttribute("ServerPerformanceDesc")]
public int MaxDegreeOfParallelism { get; public set; }
    [DisplayNameKeyAttribute("CostThresholdforParallelismName")]
[DisplayDescriptionKeyAttribute("CostThresholdforParallelismDesc")]
public int CostThresholdForParallelism { get; public set; }
    [DisplayNameKeyAttribute("MaxWorkerThreadsName")]
[DisplayDescriptionKeyAttribute("MaxWorkerThreadsDesc")]
[PostConfigurationActionAttribute("1")]
public int MaxWorkerThreads { get; public set; }
    [DisplayNameKeyAttribute("NetworkPacketSizeName")]
[DisplayDescriptionKeyAttribute("NetworkPacketSizeDesc")]
public int NetworkPacketSize { get; public set; }
    [DisplayNameKeyAttribute("OpenObjectsName")]
[DisplayDescriptionKeyAttribute("OpenObjectsDesc")]
[PostConfigurationActionAttribute("1")]
public int OpenObjects { get; public set; }
    public abstract virtual int get_AffinityMask();
    public abstract virtual int get_Affinity64Mask();
    public abstract virtual int get_AffinityIOMask();
    public abstract virtual void set_AffinityIOMask(int value);
    public abstract virtual int get_Affinity64IOMask();
    public abstract virtual int get_BlockedProcessThreshold();
    public abstract virtual void set_BlockedProcessThreshold(int value);
    public abstract virtual int get_DynamicLocks();
    public abstract virtual void set_DynamicLocks(int value);
    public abstract virtual bool get_LightweightPoolingEnabled();
    public abstract virtual void set_LightweightPoolingEnabled(bool value);
    public abstract virtual int get_MaxDegreeOfParallelism();
    public abstract virtual void set_MaxDegreeOfParallelism(int value);
    public abstract virtual int get_CostThresholdForParallelism();
    public abstract virtual void set_CostThresholdForParallelism(int value);
    public abstract virtual int get_MaxWorkerThreads();
    public abstract virtual void set_MaxWorkerThreads(int value);
    public abstract virtual int get_NetworkPacketSize();
    public abstract virtual void set_NetworkPacketSize(int value);
    public abstract virtual int get_OpenObjects();
    public abstract virtual void set_OpenObjects(int value);
}
[EvaluationModeAttribute("4")]
[CLSCompliantAttribute("False")]
[TypeConverterAttribute("Microsoft.SqlServer.Management.Sdk.Sfc.LocalizableTypeConverter")]
[LocalizedPropertyResourcesAttribute("Microsoft.SqlServer.Management.Smo.FacetSR")]
[DisplayNameKeyAttribute("ServerSecurityName")]
[DisplayDescriptionKeyAttribute("ServerSecurityDesc")]
public interface Microsoft.SqlServer.Management.Smo.IServerSecurityFacet {
    [DisplayNameKeyAttribute("PublicServerRoleIsGrantedPermissionsName")]
[DisplayDescriptionKeyAttribute("PublicServerRoleIsGrantedPermissionsDesc")]
public bool PublicServerRoleIsGrantedPermissions { get; }
    [DisplayNameKeyAttribute("LoginModeName")]
[DisplayDescriptionKeyAttribute("LoginModeDesc")]
public ServerLoginMode LoginMode { get; }
    [DisplayNameKeyAttribute("XPCmdShellEnabledName")]
[DisplayDescriptionKeyAttribute("XPCmdShellEnabledDesc")]
public bool XPCmdShellEnabled { get; public set; }
    [DisplayNameKeyAttribute("CrossDBOwnershipChainingEnabledName")]
[DisplayDescriptionKeyAttribute("CrossDBOwnershipChainingEnabledDesc")]
public bool CrossDBOwnershipChainingEnabled { get; public set; }
    [DisplayNameKeyAttribute("CommonCriteriaComplianceEnabledName")]
[DisplayDescriptionKeyAttribute("CommonCriteriaComplianceEnabledDesc")]
public bool CommonCriteriaComplianceEnabled { get; }
    [DisplayNameKeyAttribute("IServerSecurityFacet_CmdExecRightsForSystemAdminsOnlyName")]
[DisplayDescriptionKeyAttribute("IServerSecurityFacet_CmdExecRightsForSystemAdminsOnlyDesc")]
public bool CmdExecRightsForSystemAdminsOnly { get; }
    [DisplayNameKeyAttribute("IServerSecurityFacet_ProxyAccountIsGrantedToPublicRoleName")]
[DisplayDescriptionKeyAttribute("IServerSecurityFacet_ProxyAccountIsGrantedToPublicRoleDesc")]
public bool ProxyAccountIsGrantedToPublicRole { get; }
    [DisplayNameKeyAttribute("IServerSecurityFacet_ReplaceAlertTokensEnabledName")]
[DisplayDescriptionKeyAttribute("IServerSecurityFacet_ReplaceAlertTokensEnabledDesc")]
public bool ReplaceAlertTokensEnabled { get; public set; }
    [DisplayNameKeyAttribute("IServerSecurityFacet_ProxyAccountEnabledName")]
[DisplayDescriptionKeyAttribute("IServerSecurityFacet_ProxyAccountEnabledDesc")]
public bool ProxyAccountEnabled { get; }
    public abstract virtual bool get_PublicServerRoleIsGrantedPermissions();
    public abstract virtual ServerLoginMode get_LoginMode();
    public abstract virtual bool get_XPCmdShellEnabled();
    public abstract virtual void set_XPCmdShellEnabled(bool value);
    public abstract virtual bool get_CrossDBOwnershipChainingEnabled();
    public abstract virtual void set_CrossDBOwnershipChainingEnabled(bool value);
    public abstract virtual bool get_CommonCriteriaComplianceEnabled();
    public abstract virtual bool get_CmdExecRightsForSystemAdminsOnly();
    public abstract virtual bool get_ProxyAccountIsGrantedToPublicRole();
    public abstract virtual bool get_ReplaceAlertTokensEnabled();
    public abstract virtual void set_ReplaceAlertTokensEnabled(bool value);
    public abstract virtual bool get_ProxyAccountEnabled();
}
[CLSCompliantAttribute("False")]
[TypeConverterAttribute("Microsoft.SqlServer.Management.Sdk.Sfc.LocalizableTypeConverter")]
[LocalizedPropertyResourcesAttribute("Microsoft.SqlServer.Management.Smo.LocalizableResources")]
[DisplayNameKeyAttribute("IServerSelection_Name")]
[DisplayDescriptionKeyAttribute("IServerSelection_Desc")]
public interface Microsoft.SqlServer.Management.Smo.IServerSelectionFacet {
    [DisplayNameKeyAttribute("Server_BuildNumberName")]
[DisplayDescriptionKeyAttribute("Server_BuildNumberDesc")]
public int BuildNumber { get; }
    [DisplayNameKeyAttribute("Server_CollationName")]
[DisplayDescriptionKeyAttribute("Server_CollationDesc")]
public string Collation { get; }
    [DisplayNameKeyAttribute("Server_EditionName")]
[DisplayDescriptionKeyAttribute("Server_EditionDesc")]
public string Edition { get; }
    [DisplayNameKeyAttribute("Server_IsCaseSensitiveName")]
[DisplayDescriptionKeyAttribute("Server_IsCaseSensitiveDesc")]
public bool IsCaseSensitive { get; }
    [DisplayNameKeyAttribute("Server_LanguageName")]
[DisplayDescriptionKeyAttribute("Server_LanguageDesc")]
public string Language { get; }
    [DisplayNameKeyAttribute("Server_NamedPipesEnabledName")]
[DisplayDescriptionKeyAttribute("Server_NamedPipesEnabledDesc")]
public bool NamedPipesEnabled { get; }
    [DisplayNameKeyAttribute("Server_OSVersionName")]
[DisplayDescriptionKeyAttribute("Server_OSVersionDesc")]
public string OSVersion { get; }
    [DisplayNameKeyAttribute("Server_PlatformName")]
[DisplayDescriptionKeyAttribute("Server_PlatformDesc")]
public string Platform { get; }
    [DisplayNameKeyAttribute("Server_TcpIpProtocolEnabledName")]
[DisplayDescriptionKeyAttribute("Server_TcpEnabledDesc")]
public bool TcpEnabled { get; }
    [DisplayNameKeyAttribute("Server_VersionMajorName")]
[DisplayDescriptionKeyAttribute("Server_VersionMajorDesc")]
public int VersionMajor { get; }
    [DisplayNameKeyAttribute("Server_VersionMinorName")]
[DisplayDescriptionKeyAttribute("Server_VersionMinorDesc")]
public int VersionMinor { get; }
    public abstract virtual int get_BuildNumber();
    public abstract virtual string get_Collation();
    public abstract virtual string get_Edition();
    public abstract virtual bool get_IsCaseSensitive();
    public abstract virtual string get_Language();
    public abstract virtual bool get_NamedPipesEnabled();
    public abstract virtual string get_OSVersion();
    public abstract virtual string get_Platform();
    public abstract virtual bool get_TcpEnabled();
    public abstract virtual int get_VersionMajor();
    public abstract virtual int get_VersionMinor();
}
[CLSCompliantAttribute("False")]
[EvaluationModeAttribute("4")]
[TypeConverterAttribute("Microsoft.SqlServer.Management.Sdk.Sfc.LocalizableTypeConverter")]
[LocalizedPropertyResourcesAttribute("Microsoft.SqlServer.Management.Smo.LocalizableResources")]
[DisplayNameKeyAttribute("IServerSettings_Name")]
[DisplayDescriptionKeyAttribute("IServerSettings_Desc")]
[RootFacetAttribute("Microsoft.SqlServer.Management.Smo.Server")]
public interface Microsoft.SqlServer.Management.Smo.IServerSettings {
    [DisplayNameKeyAttribute("Server_AuditLevelName")]
[DisplayDescriptionKeyAttribute("Server_AuditLevelDesc")]
public AuditLevel AuditLevel { get; public set; }
    [DisplayNameKeyAttribute("Server_BackupDirectoryName")]
[DisplayDescriptionKeyAttribute("Server_BackupDirectoryDesc")]
public string BackupDirectory { get; public set; }
    [DisplayNameKeyAttribute("Server_DefaultFileName")]
[DisplayDescriptionKeyAttribute("Server_DefaultFileDesc")]
public string DefaultFile { get; public set; }
    [DisplayNameKeyAttribute("Server_DefaultLogName")]
[DisplayDescriptionKeyAttribute("Server_DefaultLogDesc")]
public string DefaultLog { get; public set; }
    [DisplayNameKeyAttribute("Server_LoginModeName")]
[DisplayDescriptionKeyAttribute("Server_LoginModeDesc")]
public ServerLoginMode LoginMode { get; }
    [DisplayNameKeyAttribute("Server_MailProfileName")]
[DisplayDescriptionKeyAttribute("Server_MailProfileDesc")]
public string MailProfile { get; public set; }
    [DisplayNameKeyAttribute("Server_NumberOfLogFilesName")]
[DisplayDescriptionKeyAttribute("Server_NumberOfLogFilesDesc")]
public int NumberOfLogFiles { get; public set; }
    [DisplayNameKeyAttribute("Server_PerfMonModeName")]
[DisplayDescriptionKeyAttribute("Server_PerfMonModeDesc")]
public PerfMonMode PerfMonMode { get; public set; }
    [DisplayNameKeyAttribute("Server_TapeLoadWaitTimeName")]
[DisplayDescriptionKeyAttribute("Server_TapeLoadWaitTimeDesc")]
public int TapeLoadWaitTime { get; public set; }
    public abstract virtual AuditLevel get_AuditLevel();
    public abstract virtual void set_AuditLevel(AuditLevel value);
    public abstract virtual string get_BackupDirectory();
    public abstract virtual void set_BackupDirectory(string value);
    public abstract virtual string get_DefaultFile();
    public abstract virtual void set_DefaultFile(string value);
    public abstract virtual string get_DefaultLog();
    public abstract virtual void set_DefaultLog(string value);
    public abstract virtual ServerLoginMode get_LoginMode();
    public abstract virtual string get_MailProfile();
    public abstract virtual void set_MailProfile(string value);
    public abstract virtual int get_NumberOfLogFiles();
    public abstract virtual void set_NumberOfLogFiles(int value);
    public abstract virtual PerfMonMode get_PerfMonMode();
    public abstract virtual void set_PerfMonMode(PerfMonMode value);
    public abstract virtual int get_TapeLoadWaitTime();
    public abstract virtual void set_TapeLoadWaitTime(int value);
}
[CLSCompliantAttribute("False")]
[TypeConverterAttribute("Microsoft.SqlServer.Management.Sdk.Sfc.LocalizableTypeConverter")]
[LocalizedPropertyResourcesAttribute("Microsoft.SqlServer.Management.Smo.LocalizableResources")]
[DisplayNameKeyAttribute("IServerSetupFacet_Name")]
[DisplayDescriptionKeyAttribute("IServerSetupFacet_Desc")]
[EvaluationModeAttribute("4")]
public interface Microsoft.SqlServer.Management.Smo.IServerSetupFacet {
    [DisplayNameKeyAttribute("Server_ServiceNameName")]
[DisplayDescriptionKeyAttribute("Server_ServiceNameDesc")]
public string ServiceName { get; }
    [DisplayNameKeyAttribute("Server_ServiceAccountName")]
[DisplayDescriptionKeyAttribute("Server_ServiceAccountDesc")]
public string EngineServiceAccount { get; }
    [DisplayNameKeyAttribute("Server_ServiceStartModeName")]
[DisplayDescriptionKeyAttribute("Server_ServiceStartModeDesc")]
public ServiceStartMode ServiceStartMode { get; }
    [DisplayNameKeyAttribute("Server_InstanceNameName")]
[DisplayDescriptionKeyAttribute("Server_InstanceNameDesc")]
public string InstanceName { get; }
    [DisplayNameKeyAttribute("IServerSetupFacet_ServiceInstanceIdSuffixName")]
[DisplayDescriptionKeyAttribute("IServerSetupFacet_ServiceInstanceIdSuffixDesc")]
public string ServiceInstanceIdSuffix { get; }
    [DisplayNameKeyAttribute("Server_FilestreamLevelName")]
[DisplayDescriptionKeyAttribute("Server_FilestreamLevelDesc")]
public FileStreamEffectiveLevel FilestreamLevel { get; }
    [DisplayNameKeyAttribute("Server_FilestreamShareNameName")]
[DisplayDescriptionKeyAttribute("Server_FilestreamShareNameDesc")]
public string FilestreamShareName { get; }
    [DisplayNameKeyAttribute("IServerConfigurationFacet_UserInstancesEnabledName")]
[DisplayDescriptionKeyAttribute("IServerConfigurationFacet_UserInstancesEnabledDesc")]
public bool UserInstancesEnabled { get; }
    [DisplayNameKeyAttribute("Server_CollationName")]
[DisplayDescriptionKeyAttribute("Server_CollationDesc")]
public string Collation { get; }
    [DisplayNameKeyAttribute("Server_SqlDomainGroupName")]
[DisplayDescriptionKeyAttribute("Server_SqlDomainGroupDesc")]
public string SqlDomainGroup { get; }
    [DisplayNameKeyAttribute("IServerSetupFacet_WindowsUsersAndGroupsInSysadminRoleName")]
[DisplayDescriptionKeyAttribute("IServerSetupFacet_WindowsUsersAndGroupsInSysadminRoleDesc")]
public String[] WindowsUsersAndGroupsInSysadminRole { get; }
    [DisplayNameKeyAttribute("Server_LoginModeName")]
[DisplayDescriptionKeyAttribute("Server_LoginModeDesc")]
public ServerLoginMode LoginMode { get; }
    [DisplayNameKeyAttribute("Server_InstallDataDirectoryName")]
[DisplayDescriptionKeyAttribute("Server_InstallDataDirectoryDesc")]
public string InstallDataDirectory { get; }
    [DisplayNameKeyAttribute("Server_BackupDirectoryName")]
[DisplayDescriptionKeyAttribute("Server_BackupDirectoryDesc")]
public string BackupDirectory { get; }
    [DisplayNameKeyAttribute("Server_DefaultFileName")]
[DisplayDescriptionKeyAttribute("Server_DefaultFileDesc")]
public string DefaultFile { get; }
    [DisplayNameKeyAttribute("Server_DefaultLogName")]
[DisplayDescriptionKeyAttribute("Server_DefaultLogDesc")]
public string DefaultLog { get; }
    [DisplayNameKeyAttribute("IServerSetupFacet_TempdbPrimaryFilePathName")]
[DisplayDescriptionKeyAttribute("IServerSetupFacet_TempdbPrimaryFilePathDesc")]
public string TempdbPrimaryFilePath { get; }
    [DisplayNameKeyAttribute("IServerSetupFacet_TempdbLogPathName")]
[DisplayDescriptionKeyAttribute("IServerSetupFacet_TempdbLogPathDesc")]
public string TempdbLogPath { get; }
    [DisplayNameKeyAttribute("JobServer_ServiceStartModeName")]
[DisplayDescriptionKeyAttribute("JobServer_ServiceStartModeDesc")]
public ServiceStartMode AgentStartMode { get; }
    [DisplayNameKeyAttribute("JobServer_ServiceAccountName")]
[DisplayDescriptionKeyAttribute("JobServer_ServiceAccountDesc")]
public string AgentServiceAccount { get; }
    [DisplayNameKeyAttribute("JobServer_AgentDomainGroupName")]
[DisplayDescriptionKeyAttribute("JobServer_AgentDomainGroupDesc")]
public string AgentDomainGroup { get; }
    [DisplayNameKeyAttribute("Server_NamedPipesEnabledName")]
[DisplayDescriptionKeyAttribute("Server_NamedPipesEnabledDesc")]
public bool NamedPipesEnabled { get; }
    [DisplayNameKeyAttribute("Server_TcpEnabledName")]
[DisplayDescriptionKeyAttribute("Server_TcpEnabledDesc")]
public bool TcpEnabled { get; }
    [DisplayNameKeyAttribute("Server_InstallSharedDirectoryName")]
[DisplayDescriptionKeyAttribute("Server_InstallSharedDirectoryDesc")]
public string InstallSharedDirectory { get; }
    [DisplayNameKeyAttribute("Server_BrowserStartModeName")]
[DisplayDescriptionKeyAttribute("Server_InstallSharedDirectoryDesc")]
public ServiceStartMode BrowserStartMode { get; }
    [DisplayNameKeyAttribute("Server_BrowserServiceAccountName")]
[DisplayDescriptionKeyAttribute("Server_BrowserServiceAccountDesc")]
public string BrowserServiceAccount { get; }
    public abstract virtual string get_ServiceName();
    public abstract virtual string get_EngineServiceAccount();
    public abstract virtual ServiceStartMode get_ServiceStartMode();
    public abstract virtual string get_InstanceName();
    public abstract virtual string get_ServiceInstanceIdSuffix();
    public abstract virtual FileStreamEffectiveLevel get_FilestreamLevel();
    public abstract virtual string get_FilestreamShareName();
    public abstract virtual bool get_UserInstancesEnabled();
    public abstract virtual string get_Collation();
    public abstract virtual string get_SqlDomainGroup();
    public abstract virtual String[] get_WindowsUsersAndGroupsInSysadminRole();
    public abstract virtual ServerLoginMode get_LoginMode();
    public abstract virtual string get_InstallDataDirectory();
    public abstract virtual string get_BackupDirectory();
    public abstract virtual string get_DefaultFile();
    public abstract virtual string get_DefaultLog();
    public abstract virtual string get_TempdbPrimaryFilePath();
    public abstract virtual string get_TempdbLogPath();
    public abstract virtual ServiceStartMode get_AgentStartMode();
    public abstract virtual string get_AgentServiceAccount();
    public abstract virtual string get_AgentDomainGroup();
    public abstract virtual bool get_NamedPipesEnabled();
    public abstract virtual bool get_TcpEnabled();
    public abstract virtual string get_InstallSharedDirectory();
    public abstract virtual ServiceStartMode get_BrowserStartMode();
    public abstract virtual string get_BrowserServiceAccount();
}
[EvaluationModeAttribute("4")]
[TypeConverterAttribute("Microsoft.SqlServer.Management.Sdk.Sfc.LocalizableTypeConverter")]
[LocalizedPropertyResourcesAttribute("Microsoft.SqlServer.Management.Smo.FacetSR")]
[DisplayNameKeyAttribute("SmartAdminStateName")]
[DisplayDescriptionKeyAttribute("SmartAdminStateDesc")]
public interface Microsoft.SqlServer.Management.Smo.ISmartAdminState {
    [DisplayNameKeyAttribute("SmartAdminState_IsMasterSwitchEnabledName")]
[DisplayDescriptionKeyAttribute("SmartAdminState_IsMasterSwitchEnabledDesc")]
public bool IsMasterSwitchEnabled { get; }
    [DisplayNameKeyAttribute("SmartAdminState_IsBackupEnabledName")]
[DisplayDescriptionKeyAttribute("SmartAdminState_IsBackupEnabledDesc")]
public bool IsBackupEnabled { get; }
    [DisplayNameKeyAttribute("SmartAdminState_NumberOfStorageConnectivityErrorsName")]
[DisplayDescriptionKeyAttribute("SmartAdminState_NumberOfStorageConnectivityErrorsDesc")]
public int NumberOfStorageConnectivityErrors { get; }
    [DisplayNameKeyAttribute("SmartAdminState_NumberOfSqlErrorsName")]
[DisplayDescriptionKeyAttribute("SmartAdminState_NumberOfSqlErrorsDesc")]
public int NumberOfSqlErrors { get; }
    [DisplayNameKeyAttribute("SmartAdminState_NumberOfInvalidCredentialErrorsName")]
[DisplayDescriptionKeyAttribute("SmartAdminState_NumberOfInvalidCredentialErrorsDesc")]
public int NumberOfInvalidCredentialErrors { get; }
    [DisplayNameKeyAttribute("SmartAdminState_NumberOfOtherErrorsName")]
[DisplayDescriptionKeyAttribute("SmartAdminState_NumberOfOtherErrorsDesc")]
public int NumberOfOtherErrors { get; }
    [DisplayNameKeyAttribute("SmartAdminState_NumberOfCorruptedOrDeletedBackupsName")]
[DisplayDescriptionKeyAttribute("SmartAdminState_NumberOfCorruptedOrDeletedBackupsDesc")]
public int NumberOfCorruptedOrDeletedBackups { get; }
    [DisplayNameKeyAttribute("SmartAdminState_NumberOfBackupLoopsName")]
[DisplayDescriptionKeyAttribute("SmartAdminState_NumberOfBackupLoopsDesc")]
public int NumberOfBackupLoops { get; }
    [DisplayNameKeyAttribute("SmartAdminState_NumberOfRetentionLoopsName")]
[DisplayDescriptionKeyAttribute("SmartAdminState_NumberOfRetentionLoopsDesc")]
public int NumberOfRetentionLoops { get; }
    public abstract virtual bool get_IsMasterSwitchEnabled();
    public abstract virtual bool get_IsBackupEnabled();
    public abstract virtual int get_NumberOfStorageConnectivityErrors();
    public abstract virtual int get_NumberOfSqlErrors();
    public abstract virtual int get_NumberOfInvalidCredentialErrors();
    public abstract virtual int get_NumberOfOtherErrors();
    public abstract virtual int get_NumberOfCorruptedOrDeletedBackups();
    public abstract virtual int get_NumberOfBackupLoops();
    public abstract virtual int get_NumberOfRetentionLoops();
}
public interface Microsoft.SqlServer.Management.Smo.ISmoApplicationEvents {
    [CompilerGeneratedAttribute]
public abstract virtual void add_ObjectCreated(ObjectCreatedEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ObjectCreated(ObjectCreatedEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_ObjectDropped(ObjectDroppedEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ObjectDropped(ObjectDroppedEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_ObjectRenamed(ObjectRenamedEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ObjectRenamed(ObjectRenamedEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_ObjectAltered(ObjectAlteredEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ObjectAltered(ObjectAlteredEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_AnyObjectEvent(AnyObjectEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_AnyObjectEvent(AnyObjectEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_DatabaseEvent(DatabaseEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_DatabaseEvent(DatabaseEventHandler value);
}
public interface Microsoft.SqlServer.Management.Smo.ISmoDependencyDiscoverer {
    public Server Server { get; public set; }
    public abstract virtual Server get_Server();
    public abstract virtual void set_Server(Server value);
    public abstract virtual IEnumerable`1<Urn> Discover(IEnumerable`1<Urn> urns);
}
internal interface Microsoft.SqlServer.Management.Smo.ISmoDependencyOrderer {
    public Server Server { get; public set; }
    public abstract virtual Server get_Server();
    public abstract virtual void set_Server(Server value);
    public abstract virtual List`1<Urn> Order(IEnumerable`1<Urn> urns);
}
internal interface Microsoft.SqlServer.Management.Smo.ISmoFilter {
    public Server Server { get; public set; }
    public abstract virtual Server get_Server();
    public abstract virtual void set_Server(Server value);
    public abstract virtual IEnumerable`1<Urn> Filter(IEnumerable`1<Urn> urns);
}
public interface Microsoft.SqlServer.Management.Smo.ISmoScriptWriter {
    unknown string Header {public set; }
    public abstract virtual void ScriptObject(IEnumerable`1<string> script, Urn obj);
    public abstract virtual void ScriptData(IEnumerable`1<string> dataScript, Urn table);
    public abstract virtual void ScriptContext(string databaseContext, Urn obj);
    public abstract virtual void set_Header(string value);
}
[StateChangeEventAttribute("AUDIT_SERVER_OPERATION_EVENT", "SERVER")]
[StateChangeEventAttribute("CREATE_ENDPOINT", "SERVER")]
[StateChangeEventAttribute("ALTER_ENDPOINT", "SERVER")]
[StateChangeEventAttribute("SAC_ENDPOINT_CHANGE", "SERVER")]
[EvaluationModeAttribute("6")]
[TypeConverterAttribute("Microsoft.SqlServer.Management.Sdk.Sfc.LocalizableTypeConverter")]
[LocalizedPropertyResourcesAttribute("Microsoft.SqlServer.Management.Smo.FacetSR")]
[DisplayNameKeyAttribute("ServerSurfaceAreaConfigurationName")]
[DisplayDescriptionKeyAttribute("ServerSurfaceAreaConfigurationDesc")]
[CLSCompliantAttribute("False")]
public interface Microsoft.SqlServer.Management.Smo.ISurfaceAreaFacet {
    [DisplayNameKeyAttribute("AdHocRemoteQueriesEnabledName")]
[DisplayDescriptionKeyAttribute("AdHocRemoteQueriesEnabledDesc")]
public bool AdHocRemoteQueriesEnabled { get; public set; }
    [DisplayNameKeyAttribute("DatabaseMailEnabledName")]
[DisplayDescriptionKeyAttribute("DatabaseMailEnabledDesc")]
public bool DatabaseMailEnabled { get; public set; }
    [DisplayNameKeyAttribute("ClrIntegrationEnabledName")]
[DisplayDescriptionKeyAttribute("ClrIntegrationEnabledDesc")]
public bool ClrIntegrationEnabled { get; public set; }
    [DisplayNameKeyAttribute("OleAutomationEnabledName")]
[DisplayDescriptionKeyAttribute("OleAutomationEnabledDesc")]
public bool OleAutomationEnabled { get; public set; }
    [DisplayNameKeyAttribute("RemoteDacEnabledName")]
[DisplayDescriptionKeyAttribute("RemoteDacEnabledDesc")]
public bool RemoteDacEnabled { get; public set; }
    [DisplayNameKeyAttribute("SqlMailEnabledName")]
[DisplayDescriptionKeyAttribute("SqlMailEnabledDesc")]
public bool SqlMailEnabled { get; public set; }
    [DisplayNameKeyAttribute("WebAssistantEnabledName")]
[DisplayDescriptionKeyAttribute("WebAssistantEnabledDesc")]
public bool WebAssistantEnabled { get; public set; }
    [DisplayNameKeyAttribute("XPCmdShellEnabledName")]
[DisplayDescriptionKeyAttribute("XPCmdShellEnabledDesc")]
public bool XPCmdShellEnabled { get; public set; }
    [DisplayNameKeyAttribute("ServiceBrokerEndpointActiveName")]
[DisplayDescriptionKeyAttribute("ServiceBrokerEndpointActiveDesc")]
public bool ServiceBrokerEndpointActive { get; public set; }
    [DisplayNameKeyAttribute("SoapEndpointsEnabledName")]
[DisplayDescriptionKeyAttribute("SoapEndpointsEnabledDesc")]
public bool SoapEndpointsEnabled { get; public set; }
    public abstract virtual bool get_AdHocRemoteQueriesEnabled();
    public abstract virtual void set_AdHocRemoteQueriesEnabled(bool value);
    public abstract virtual bool get_DatabaseMailEnabled();
    public abstract virtual void set_DatabaseMailEnabled(bool value);
    public abstract virtual bool get_ClrIntegrationEnabled();
    public abstract virtual void set_ClrIntegrationEnabled(bool value);
    public abstract virtual bool get_OleAutomationEnabled();
    public abstract virtual void set_OleAutomationEnabled(bool value);
    public abstract virtual bool get_RemoteDacEnabled();
    public abstract virtual void set_RemoteDacEnabled(bool value);
    public abstract virtual bool get_SqlMailEnabled();
    public abstract virtual void set_SqlMailEnabled(bool value);
    public abstract virtual bool get_WebAssistantEnabled();
    public abstract virtual void set_WebAssistantEnabled(bool value);
    public abstract virtual bool get_XPCmdShellEnabled();
    public abstract virtual void set_XPCmdShellEnabled(bool value);
    public abstract virtual bool get_ServiceBrokerEndpointActive();
    public abstract virtual void set_ServiceBrokerEndpointActive(bool value);
    public abstract virtual bool get_SoapEndpointsEnabled();
    public abstract virtual void set_SoapEndpointsEnabled(bool value);
}
[CLSCompliantAttribute("False")]
[StateChangeEventAttribute("CREATE_TABLE", "TABLE")]
[StateChangeEventAttribute("ALTER_TABLE", "TABLE")]
[StateChangeEventAttribute("RENAME", "TABLE")]
[StateChangeEventAttribute("ALTER_AUTHORIZATION_DATABASE", "TABLE")]
[StateChangeEventAttribute("ALTER_SCHEMA", "TABLE")]
[EvaluationModeAttribute("7")]
[LocalizedPropertyResourcesAttribute("Microsoft.SqlServer.Management.Smo.LocalizableResources")]
[TypeConverterAttribute("Microsoft.SqlServer.Management.Sdk.Sfc.LocalizableTypeConverter")]
[DisplayNameKeyAttribute("ITableOptions_Name")]
[DisplayDescriptionKeyAttribute("ITableOptions_Desc")]
public interface Microsoft.SqlServer.Management.Smo.ITableOptions {
    [DisplayNameKeyAttribute("Table_AnsiNullsStatusName")]
[DisplayDescriptionKeyAttribute("Table_AnsiNullsStatusDesc")]
public bool AnsiNullsStatus { get; public set; }
    [DisplayNameKeyAttribute("Table_ChangeTrackingEnabledName")]
[DisplayDescriptionKeyAttribute("Table_ChangeTrackingEnabledDesc")]
public bool ChangeTrackingEnabled { get; public set; }
    [DisplayNameKeyAttribute("Table_CreateDateName")]
[DisplayDescriptionKeyAttribute("Table_CreateDateDesc")]
public DateTime CreateDate { get; }
    [DisplayNameKeyAttribute("Table_FakeSystemTableName")]
[DisplayDescriptionKeyAttribute("Table_FakeSystemTableDesc")]
public bool FakeSystemTable { get; }
    [DisplayNameKeyAttribute("Table_IDName")]
[DisplayDescriptionKeyAttribute("Table_IDDesc")]
public int ID { get; }
    [DisplayNameKeyAttribute("Table_IsSchemaOwnedName")]
[DisplayDescriptionKeyAttribute("Table_IsSchemaOwnedDesc")]
public bool IsSchemaOwned { get; }
    [DisplayNameKeyAttribute("Table_IsSystemObjectName")]
[DisplayDescriptionKeyAttribute("Table_IsSystemObjectDesc")]
public bool IsSystemObject { get; }
    [DisplayNameKeyAttribute("Table_LockEscalationName")]
[DisplayDescriptionKeyAttribute("Table_LockEscalationDesc")]
public LockEscalationType LockEscalation { get; public set; }
    [DisplayNameKeyAttribute("NamedSmoObject_NameName")]
[DisplayDescriptionKeyAttribute("NamedSmoObject_NameDesc")]
public string Name { get; }
    [DisplayNameKeyAttribute("Table_OwnerName")]
[DisplayDescriptionKeyAttribute("Table_OwnerDesc")]
public string Owner { get; public set; }
    [DisplayNameKeyAttribute("Table_QuotedIdentifierStatusName")]
[DisplayDescriptionKeyAttribute("Table_QuotedIdentifierStatusDesc")]
public bool QuotedIdentifierStatus { get; }
    [DisplayNameKeyAttribute("Table_RemoteDataArchiveEnabledName")]
[DisplayDescriptionKeyAttribute("Table_RemoteDataArchiveEnabledDesc")]
public bool RemoteDataArchiveEnabled { get; public set; }
    [DisplayNameKeyAttribute("Table_RemoteDataArchiveDataMigrationStateName")]
[DisplayDescriptionKeyAttribute("Table_RemoteDataArchiveDataMigrationStateDesc")]
public RemoteDataArchiveMigrationState RemoteDataArchiveDataMigrationState { get; public set; }
    [DisplayNameKeyAttribute("Table_RemoteTableNameName")]
[DisplayDescriptionKeyAttribute("Table_RemoteTableNameDesc")]
public string RemoteTableName { get; }
    [DisplayNameKeyAttribute("Table_RemoteTableProvisionedName")]
[DisplayDescriptionKeyAttribute("Table_RemoteTableProvisionedDesc")]
public bool RemoteTableProvisioned { get; }
    [DisplayNameKeyAttribute("Table_ReplicatedName")]
[DisplayDescriptionKeyAttribute("Table_ReplicatedDesc")]
public bool Replicated { get; }
    [DisplayNameKeyAttribute("ScriptSchemaObjectBase_SchemaName")]
[DisplayDescriptionKeyAttribute("ScriptSchemaObjectBase_SchemaDesc")]
public string Schema { get; }
    [DisplayNameKeyAttribute("Table_TrackColumnsUpdatedEnabledName")]
[DisplayDescriptionKeyAttribute("Table_TrackColumnsUpdatedEnabledDesc")]
public bool TrackColumnsUpdatedEnabled { get; public set; }
    public abstract virtual bool get_AnsiNullsStatus();
    public abstract virtual void set_AnsiNullsStatus(bool value);
    public abstract virtual bool get_ChangeTrackingEnabled();
    public abstract virtual void set_ChangeTrackingEnabled(bool value);
    public abstract virtual DateTime get_CreateDate();
    public abstract virtual bool get_FakeSystemTable();
    public abstract virtual int get_ID();
    public abstract virtual bool get_IsSchemaOwned();
    public abstract virtual bool get_IsSystemObject();
    public abstract virtual LockEscalationType get_LockEscalation();
    public abstract virtual void set_LockEscalation(LockEscalationType value);
    public abstract virtual string get_Name();
    public abstract virtual string get_Owner();
    public abstract virtual void set_Owner(string value);
    public abstract virtual bool get_QuotedIdentifierStatus();
    public abstract virtual bool get_RemoteDataArchiveEnabled();
    public abstract virtual void set_RemoteDataArchiveEnabled(bool value);
    public abstract virtual RemoteDataArchiveMigrationState get_RemoteDataArchiveDataMigrationState();
    public abstract virtual void set_RemoteDataArchiveDataMigrationState(RemoteDataArchiveMigrationState value);
    public abstract virtual string get_RemoteTableName();
    public abstract virtual bool get_RemoteTableProvisioned();
    public abstract virtual bool get_Replicated();
    public abstract virtual string get_Schema();
    public abstract virtual bool get_TrackColumnsUpdatedEnabled();
    public abstract virtual void set_TrackColumnsUpdatedEnabled(bool value);
}
public interface Microsoft.SqlServer.Management.Smo.ITextObject {
    public string TextBody { get; public set; }
    public string TextHeader { get; public set; }
    public bool TextMode { get; public set; }
    public abstract virtual string ScriptHeader(bool forAlter);
    public abstract virtual string ScriptHeader(ScriptHeaderType scriptHeaderType);
    public abstract virtual string get_TextBody();
    public abstract virtual void set_TextBody(string value);
    public abstract virtual string get_TextHeader();
    public abstract virtual void set_TextHeader(string value);
    public abstract virtual bool get_TextMode();
    public abstract virtual void set_TextMode(bool value);
}
[CLSCompliantAttribute("False")]
[StateChangeEventAttribute("CREATE_USER", "USER", "SQL USER")]
[StateChangeEventAttribute("ALTER_USER", "USER", "SQL USER")]
[StateChangeEventAttribute("CREATE_USER", "USER", "WINDOWS USER")]
[StateChangeEventAttribute("ALTER_USER", "USER", "WINDOWS USER")]
[StateChangeEventAttribute("CREATE_USER", "USER", "GROUP USER")]
[StateChangeEventAttribute("ALTER_USER", "USER", "GROUP USER")]
[StateChangeEventAttribute("CREATE_USER", "USER", "CERTIFICATE USER")]
[StateChangeEventAttribute("ALTER_USER", "USER", "CERTIFICATE USER")]
[StateChangeEventAttribute("CREATE_USER", "USER", "ASYMMETRIC KEY USER")]
[StateChangeEventAttribute("ALTER_USER", "USER", "ASYMMETRIC KEY USER")]
[EvaluationModeAttribute("7")]
[LocalizedPropertyResourcesAttribute("Microsoft.SqlServer.Management.Smo.LocalizableResources")]
[TypeConverterAttribute("Microsoft.SqlServer.Management.Sdk.Sfc.LocalizableTypeConverter")]
[DisplayNameKeyAttribute("IUserOptions_Name")]
[DisplayDescriptionKeyAttribute("IUserOptions_Desc")]
public interface Microsoft.SqlServer.Management.Smo.IUserOptions {
    [DisplayNameKeyAttribute("User_AsymmetricKeyName")]
[DisplayDescriptionKeyAttribute("User_AsymmetricKeyDesc")]
public string AsymmetricKey { get; }
    [DisplayNameKeyAttribute("User_CertificateName")]
[DisplayDescriptionKeyAttribute("User_CertificateDesc")]
public string Certificate { get; }
    [DisplayNameKeyAttribute("User_CreateDateName")]
[DisplayDescriptionKeyAttribute("User_CreateDateDesc")]
public DateTime CreateDate { get; }
    [DisplayNameKeyAttribute("User_DefaultSchemaName")]
[DisplayDescriptionKeyAttribute("User_DefaultSchemaDesc")]
public string DefaultSchema { get; public set; }
    [DisplayNameKeyAttribute("User_IDName")]
[DisplayDescriptionKeyAttribute("User_IDDesc")]
public int ID { get; }
    [DisplayNameKeyAttribute("User_IsSystemObjectName")]
[DisplayDescriptionKeyAttribute("User_IsSystemObjectDesc")]
public bool IsSystemObject { get; }
    [DisplayNameKeyAttribute("User_LoginName")]
[DisplayDescriptionKeyAttribute("User_LoginDesc")]
public string Login { get; }
    [DisplayNameKeyAttribute("User_LoginTypeName")]
[DisplayDescriptionKeyAttribute("User_LoginTypeDesc")]
public LoginType LoginType { get; }
    [DisplayNameKeyAttribute("NamedSmoObject_NameName")]
[DisplayDescriptionKeyAttribute("NamedSmoObject_NameDesc")]
public string Name { get; }
    [DisplayNameKeyAttribute("User_SidName")]
[DisplayDescriptionKeyAttribute("User_SidDesc")]
public Byte[] Sid { get; }
    [DisplayNameKeyAttribute("User_UserTypeName")]
[DisplayDescriptionKeyAttribute("User_UserTypeDesc")]
public UserType UserType { get; }
    public abstract virtual string get_AsymmetricKey();
    public abstract virtual string get_Certificate();
    public abstract virtual DateTime get_CreateDate();
    public abstract virtual string get_DefaultSchema();
    public abstract virtual void set_DefaultSchema(string value);
    public abstract virtual int get_ID();
    public abstract virtual bool get_IsSystemObject();
    public abstract virtual string get_Login();
    public abstract virtual LoginType get_LoginType();
    public abstract virtual string get_Name();
    public abstract virtual Byte[] get_Sid();
    public abstract virtual UserType get_UserType();
}
[CLSCompliantAttribute("False")]
[StateChangeEventAttribute("CREATE_VIEW", "VIEW")]
[StateChangeEventAttribute("ALTER_VIEW", "VIEW")]
[StateChangeEventAttribute("RENAME", "VIEW")]
[StateChangeEventAttribute("ALTER_AUTHORIZATION_DATABASE", "VIEW")]
[StateChangeEventAttribute("ALTER_SCHEMA", "VIEW")]
[EvaluationModeAttribute("7")]
[LocalizedPropertyResourcesAttribute("Microsoft.SqlServer.Management.Smo.LocalizableResources")]
[TypeConverterAttribute("Microsoft.SqlServer.Management.Sdk.Sfc.LocalizableTypeConverter")]
[DisplayNameKeyAttribute("IViewOptions_Name")]
[DisplayDescriptionKeyAttribute("IViewOptions_Desc")]
public interface Microsoft.SqlServer.Management.Smo.IViewOptions {
    [DisplayNameKeyAttribute("View_AnsiNullsStatusName")]
[DisplayDescriptionKeyAttribute("View_AnsiNullsStatusDesc")]
public bool AnsiNullsStatus { get; }
    [DisplayNameKeyAttribute("View_CreateDateName")]
[DisplayDescriptionKeyAttribute("View_CreateDateDesc")]
public DateTime CreateDate { get; }
    [DisplayNameKeyAttribute("View_IDName")]
[DisplayDescriptionKeyAttribute("View_IDDesc")]
public int ID { get; }
    [DisplayNameKeyAttribute("View_IsEncryptedName")]
[DisplayDescriptionKeyAttribute("View_IsEncryptedDesc")]
public bool IsEncrypted { get; }
    [DisplayNameKeyAttribute("View_IsSchemaBoundName")]
[DisplayDescriptionKeyAttribute("View_IsSchemaBoundDesc")]
public bool IsSchemaBound { get; }
    [DisplayNameKeyAttribute("View_IsSchemaOwnedName")]
[DisplayDescriptionKeyAttribute("View_IsSchemaOwnedDesc")]
public bool IsSchemaOwned { get; }
    [DisplayNameKeyAttribute("View_IsSystemObjectName")]
[DisplayDescriptionKeyAttribute("View_IsSystemObjectDesc")]
public bool IsSystemObject { get; }
    [DisplayNameKeyAttribute("NamedSmoObject_NameName")]
[DisplayDescriptionKeyAttribute("NamedSmoObject_NameDesc")]
public string Name { get; }
    [DisplayNameKeyAttribute("View_OwnerName")]
[DisplayDescriptionKeyAttribute("View_OwnerDesc")]
public string Owner { get; }
    [DisplayNameKeyAttribute("ScriptSchemaObjectBase_SchemaName")]
[DisplayDescriptionKeyAttribute("ScriptSchemaObjectBase_SchemaDesc")]
public string Schema { get; }
    [DisplayNameKeyAttribute("View_QuotedIdentifierStatusName")]
[DisplayDescriptionKeyAttribute("View_QuotedIdentifierStatusDesc")]
public bool QuotedIdentifierStatus { get; }
    [DisplayNameKeyAttribute("View_ReturnsViewMetadataName")]
[DisplayDescriptionKeyAttribute("View_ReturnsViewMetadataDesc")]
public bool ReturnsViewMetadata { get; }
    public abstract virtual bool get_AnsiNullsStatus();
    public abstract virtual DateTime get_CreateDate();
    public abstract virtual int get_ID();
    public abstract virtual bool get_IsEncrypted();
    public abstract virtual bool get_IsSchemaBound();
    public abstract virtual bool get_IsSchemaOwned();
    public abstract virtual bool get_IsSystemObject();
    public abstract virtual string get_Name();
    public abstract virtual string get_Owner();
    public abstract virtual string get_Schema();
    public abstract virtual bool get_QuotedIdentifierStatus();
    public abstract virtual bool get_ReturnsViewMetadata();
}
[DefaultMemberAttribute("Item")]
public class Microsoft.SqlServer.Management.Smo.JobScheduleCollectionBase : ArrayListCollectionBase {
    public JobSchedule Item { get; }
    internal JobScheduleCollectionBase(SqlSmoObject parent);
    protected virtual void InitInnerCollection();
    internal void RemoveObject(string name, int id);
    public bool Contains(string name);
    public bool Contains(string name, int id);
    internal static int GetDefaultID();
    internal virtual ObjectKeyBase CreateKeyFromUrn(Urn urn);
    public JobSchedule get_Item(Guid scheduleuid);
}
public enum Microsoft.SqlServer.Management.Smo.KeyEncryptionType : Enum {
    public int value__;
    public static KeyEncryptionType SymmetricKey;
    public static KeyEncryptionType Certificate;
    public static KeyEncryptionType Password;
    public static KeyEncryptionType AsymmetricKey;
    public static KeyEncryptionType Provider;
}
[SfcElementAttribute("48")]
public class Microsoft.SqlServer.Management.Smo.Language : NamedSmoObject {
    public static string UrnSuffix { get; }
    [SfcObjectAttribute("1")]
public Server Parent { get; }
    [SfcPropertyAttribute("3072")]
public string Alias { get; }
    [SfcPropertyAttribute("3072")]
public string DateFormat { get; }
    [SfcPropertyAttribute("3072")]
public string Days { get; }
    [SfcPropertyAttribute("3072")]
public byte FirstDayOfWeek { get; }
    [SfcPropertyAttribute("3072")]
public short LangID { get; }
    [SfcPropertyAttribute("3072")]
public int LocaleID { get; }
    [SfcPropertyAttribute("3072")]
public string Months { get; }
    [SfcPropertyAttribute("3072")]
public short MsgLangID { get; }
    [SfcPropertyAttribute("3072")]
public string ShortMonths { get; }
    [SfcPropertyAttribute("3072")]
public int Upgrade { get; }
    internal Language(AbstractCollectionBase parentColl, ObjectKeyBase key, SqlSmoState state);
    public static string get_UrnSuffix();
    public string Day(DayOfWeek day);
    public string ShortMonth(Month month);
    public string Month(Month month);
    public Server get_Parent();
    internal virtual SqlPropertyMetadataProvider GetPropertyMetadataProvider();
    public string get_Alias();
    public string get_DateFormat();
    public string get_Days();
    public byte get_FirstDayOfWeek();
    public short get_LangID();
    public int get_LocaleID();
    public string get_Months();
    public short get_MsgLangID();
    public string get_ShortMonths();
    public int get_Upgrade();
}
[DefaultMemberAttribute("Item")]
public class Microsoft.SqlServer.Management.Smo.LanguageCollection : SimpleObjectCollectionBase {
    public Server Parent { get; }
    public Language Item { get; }
    public Language Item { get; }
    internal LanguageCollection(SqlSmoObject parentInstance);
    public Server get_Parent();
    public Language get_Item(int index);
    public Language get_Item(string name);
    public void CopyTo(Language[] array, int index);
    public Language ItemById(int id);
    protected virtual Type GetCollectionElementType();
    internal virtual SqlSmoObject GetCollectionElementInstance(ObjectKeyBase key, SqlSmoState state);
    public void Add(Language language);
    internal SqlSmoObject GetObjectByName(string name);
    internal virtual ObjectKeyBase CreateKeyFromUrn(Urn urn);
}
[EvaluationModeAttribute("4")]
[PhysicalFacetAttribute]
[SfcElementAttribute("16")]
public class Microsoft.SqlServer.Management.Smo.LinkedServer : NamedSmoObject {
    private bool dropLogins;
    private LinkedServerLoginCollection m_LinkedServerLogins;
    public static string UrnSuffix { get; }
    [SfcKeyAttribute("0")]
[SfcPropertyAttribute("1280")]
public string Name { get; public set; }
    [SfcPropertyAttribute("1280")]
[DmfIgnorePropertyAttribute]
public string ProviderString { get; public set; }
    [SfcObjectAttribute("1", "0", "Microsoft.SqlServer.Management.Smo.LinkedServerLogin")]
public LinkedServerLoginCollection LinkedServerLogins { get; }
    [SfcObjectAttribute("1")]
public Server Parent { get; public set; }
    private bool Microsoft.SqlServer.Management.Sdk.Sfc.ISfcSupportsDesignMode.IsDesignMode { get; }
    [SfcPropertyAttribute("1280")]
public string Catalog { get; public set; }
    [SfcPropertyAttribute("1024")]
public bool CollationCompatible { get; public set; }
    [SfcPropertyAttribute("1024")]
public string CollationName { get; public set; }
    [SfcPropertyAttribute("1024")]
public int ConnectTimeout { get; public set; }
    [SfcPropertyAttribute("1024")]
public bool DataAccess { get; public set; }
    [SfcPropertyAttribute("1280")]
public string DataSource { get; public set; }
    [SfcPropertyAttribute("1024")]
public DateTime DateLastModified { get; }
    [SfcPropertyAttribute("1024")]
public bool DistPublisher { get; public set; }
    [SfcPropertyAttribute("1024")]
public bool Distributor { get; public set; }
    [SfcPropertyAttribute("1024")]
public int ID { get; }
    [SfcPropertyAttribute("1024")]
public bool IsPromotionofDistributedTransactionsForRPCEnabled { get; public set; }
    [SfcPropertyAttribute("1024")]
public bool LazySchemaValidation { get; public set; }
    [SfcPropertyAttribute("1280")]
public string Location { get; public set; }
    [SfcPropertyAttribute("1280")]
public string ProductName { get; public set; }
    [SfcPropertyAttribute("1280")]
public string ProviderName { get; public set; }
    [SfcPropertyAttribute("1024")]
public bool Publisher { get; public set; }
    [SfcPropertyAttribute("1024")]
public int QueryTimeout { get; public set; }
    [SfcPropertyAttribute("1024")]
public bool Rpc { get; public set; }
    [SfcPropertyAttribute("1024")]
public bool RpcOut { get; public set; }
    [SfcPropertyAttribute("1024")]
public bool Subscriber { get; public set; }
    [SfcPropertyAttribute("1024")]
public bool UseRemoteCollation { get; public set; }
    internal LinkedServer(AbstractCollectionBase parentColl, ObjectKeyBase key, SqlSmoState state);
    public LinkedServer(Server server, string name);
    public static string get_UrnSuffix();
    public virtual string get_Name();
    public virtual void set_Name(string value);
    public string get_ProviderString();
    public void set_ProviderString(string value);
    public sealed virtual void Create();
    internal virtual void ScriptCreate(StringCollection query, ScriptingPreferences sp);
    private void GetStringParam(StringBuilder buffer, ScriptingPreferences sp, string propName, string sqlPropName, Int32& count);
    private void GetStringParamCompulsory(StringBuilder buffer, ScriptingPreferences sp, string propName, string sqlPropName, Int32& count);
    public sealed virtual void Alter();
    internal virtual void ScriptAlter(StringCollection query, ScriptingPreferences sp);
    private void GetStringOption(StringCollection queries, ScriptingPreferences sp, string propName, string optionName);
    public sealed virtual void Drop();
    public sealed virtual void DropIfExists();
    public void Drop(bool dropDependentLogins);
    public void DropIfExists(bool dropDependentLogins);
    internal virtual void ScriptDrop(StringCollection dropQuery, ScriptingPreferences sp);
    protected virtual void PostDrop();
    private void ScriptIncludeIfNotExists(StringBuilder sb, ScriptingPreferences sp, string predicate);
    public sealed virtual StringCollection Script();
    public sealed virtual StringCollection Script(ScriptingOptions scriptingOptions);
    public LinkedServerLoginCollection get_LinkedServerLogins();
    protected virtual void MarkDropped();
    public DataTable EnumColumns();
    public DataTable EnumColumns(string tableName);
    public DataTable EnumColumns(string tableName, string schemaName);
    public DataTable EnumColumns(string tableName, string schemaName, string databaseName);
    public DataTable EnumColumns(string tableName, string schemaName, string databaseName, string columnName);
    public DataTable EnumTables();
    public DataTable EnumTables(string tableName);
    public DataTable EnumTables(string tableName, string schemaName);
    public DataTable EnumTables(string tableName, string schemaName, string databaseName);
    public DataTable EnumTables(string tableName, string schemaName, string databaseName, LinkedTableType tableType);
    private void InternalAdd(StringBuilder stmt, string optname);
    public void TestConnection();
    public Server get_Parent();
    public void set_Parent(Server value);
    private sealed virtual override bool Microsoft.SqlServer.Management.Sdk.Sfc.ISfcSupportsDesignMode.get_IsDesignMode();
    internal virtual SqlPropertyMetadataProvider GetPropertyMetadataProvider();
    public string get_Catalog();
    public void set_Catalog(string value);
    public bool get_CollationCompatible();
    public void set_CollationCompatible(bool value);
    public string get_CollationName();
    public void set_CollationName(string value);
    public int get_ConnectTimeout();
    public void set_ConnectTimeout(int value);
    public bool get_DataAccess();
    public void set_DataAccess(bool value);
    public string get_DataSource();
    public void set_DataSource(string value);
    public DateTime get_DateLastModified();
    public bool get_DistPublisher();
    public void set_DistPublisher(bool value);
    public bool get_Distributor();
    public void set_Distributor(bool value);
    public int get_ID();
    public bool get_IsPromotionofDistributedTransactionsForRPCEnabled();
    public void set_IsPromotionofDistributedTransactionsForRPCEnabled(bool value);
    public bool get_LazySchemaValidation();
    public void set_LazySchemaValidation(bool value);
    public string get_Location();
    public void set_Location(string value);
    public string get_ProductName();
    public void set_ProductName(string value);
    public string get_ProviderName();
    public void set_ProviderName(string value);
    public bool get_Publisher();
    public void set_Publisher(bool value);
    public int get_QueryTimeout();
    public void set_QueryTimeout(int value);
    public bool get_Rpc();
    public void set_Rpc(bool value);
    public bool get_RpcOut();
    public void set_RpcOut(bool value);
    public bool get_Subscriber();
    public void set_Subscriber(bool value);
    public bool get_UseRemoteCollation();
    public void set_UseRemoteCollation(bool value);
    internal virtual String[] GetNonAlterableProperties();
}
[DefaultMemberAttribute("Item")]
public class Microsoft.SqlServer.Management.Smo.LinkedServerCollection : SimpleObjectCollectionBase {
    public Server Parent { get; }
    public LinkedServer Item { get; }
    public LinkedServer Item { get; }
    internal LinkedServerCollection(SqlSmoObject parentInstance);
    public Server get_Parent();
    public LinkedServer get_Item(int index);
    public LinkedServer get_Item(string name);
    public void CopyTo(LinkedServer[] array, int index);
    public LinkedServer ItemById(int id);
    protected virtual Type GetCollectionElementType();
    internal virtual SqlSmoObject GetCollectionElementInstance(ObjectKeyBase key, SqlSmoState state);
    public void Add(LinkedServer linkedServer);
    internal SqlSmoObject GetObjectByName(string name);
    internal virtual ObjectKeyBase CreateKeyFromUrn(Urn urn);
}
[SfcElementTypeAttribute("Login")]
[SfcElementAttribute("16")]
public class Microsoft.SqlServer.Management.Smo.LinkedServerLogin : NamedSmoObject {
    private SqlSecureString remoteUserPassword;
    public static string UrnSuffix { get; }
    [SfcKeyAttribute("0")]
[SfcReferenceAttribute("Microsoft.SqlServer.Management.Smo.Login", "Server[@Name = '{0}']/Login[@Name = '{1}']", "Mono.Cecil.CustomAttributeArgument[]")]
[CLSCompliantAttribute("False")]
[SfcPropertyAttribute("1280")]
public string Name { get; public set; }
    [SfcObjectAttribute("1")]
public LinkedServer Parent { get; public set; }
    private bool Microsoft.SqlServer.Management.Sdk.Sfc.ISfcSupportsDesignMode.IsDesignMode { get; }
    [SfcPropertyAttribute("1024")]
public DateTime DateLastModified { get; }
    [SfcPropertyAttribute("1024")]
public bool Impersonate { get; public set; }
    [SfcPropertyAttribute("1024")]
public string RemoteUser { get; public set; }
    internal LinkedServerLogin(AbstractCollectionBase parentColl, ObjectKeyBase key, SqlSmoState state);
    public LinkedServerLogin(LinkedServer linkedServer, string name);
    public static string get_UrnSuffix();
    public virtual string get_Name();
    public virtual void set_Name(string value);
    public sealed virtual void Create();
    internal virtual void ScriptCreate(StringCollection query, ScriptingPreferences sp);
    public sealed virtual void Drop();
    public sealed virtual void DropIfExists();
    internal virtual void ScriptDrop(StringCollection dropQuery, ScriptingPreferences sp);
    private void ScriptIncludeIfNotExists(StringBuilder sb, ScriptingPreferences sp, string predicate);
    public sealed virtual void Alter();
    internal virtual void ScriptAlter(StringCollection alterQuery, ScriptingPreferences sp);
    public void SetRemotePassword(string password);
    public void SetRemotePassword(SecureString password);
    public LinkedServer get_Parent();
    public void set_Parent(LinkedServer value);
    private sealed virtual override bool Microsoft.SqlServer.Management.Sdk.Sfc.ISfcSupportsDesignMode.get_IsDesignMode();
    internal virtual SqlPropertyMetadataProvider GetPropertyMetadataProvider();
    public DateTime get_DateLastModified();
    public bool get_Impersonate();
    public void set_Impersonate(bool value);
    public string get_RemoteUser();
    public void set_RemoteUser(string value);
}
[DefaultMemberAttribute("Item")]
public class Microsoft.SqlServer.Management.Smo.LinkedServerLoginCollection : SimpleObjectCollectionBase {
    public LinkedServer Parent { get; }
    public LinkedServerLogin Item { get; }
    public LinkedServerLogin Item { get; }
    internal LinkedServerLoginCollection(SqlSmoObject parentInstance);
    public LinkedServer get_Parent();
    public LinkedServerLogin get_Item(int index);
    public LinkedServerLogin get_Item(string name);
    public void CopyTo(LinkedServerLogin[] array, int index);
    protected virtual Type GetCollectionElementType();
    internal virtual SqlSmoObject GetCollectionElementInstance(ObjectKeyBase key, SqlSmoState state);
    public void Add(LinkedServerLogin linkedServerLogin);
    internal SqlSmoObject GetObjectByName(string name);
    internal virtual ObjectKeyBase CreateKeyFromUrn(Urn urn);
}
public enum Microsoft.SqlServer.Management.Smo.LinkedTableType : Enum {
    public int value__;
    public static LinkedTableType Default;
    public static LinkedTableType Alias;
    public static LinkedTableType GlobalTemporary;
    public static LinkedTableType LocalTemporary;
    public static LinkedTableType SystemTable;
    public static LinkedTableType Table;
    public static LinkedTableType View;
    public static LinkedTableType SystemView;
}
[CompilerGeneratedAttribute]
internal class Microsoft.SqlServer.Management.Smo.LocalizableResources : object {
    public static CultureInfo Culture { get; public set; }
    public static string ScriptingParameters { get; }
    public static string SourceServerVersion { get; }
    public static string SourceDatabaseEngineEdition { get; }
    public static string SourceDatabaseEngineType { get; }
    public static string TargetServerVersion { get; }
    public static string TargetDatabaseEngineEdition { get; }
    public static string TargetDatabaseEngineType { get; }
    public static string ServerSphinx { get; }
    public static string ServerShiloh { get; }
    public static string ServerYukon { get; }
    public static string ServerKatmai { get; }
    public static string ServerKilimanjaro { get; }
    public static string ServerDenali { get; }
    public static string ServerSQL14 { get; }
    public static string ServerSQL15 { get; }
    public static string ServerSQL2017 { get; }
    public static string ServerSQLv150 { get; }
    public static string ServerSQLv160 { get; }
    public static string EngineCloud { get; }
    public static string EngineCloudMI { get; }
    public static string EngineSingleton { get; }
    public static string EngineDatawarehouse { get; }
    public static string NamedSmoObject_NameName { get; }
    public static string NamedSmoObject_NameDesc { get; }
    public static string ScriptSchemaObjectBase_SchemaName { get; }
    public static string ScriptSchemaObjectBase_SchemaDesc { get; }
    public static string SmoObjectBase_StateName { get; }
    public static string SmoObjectBase_StateDesc { get; }
    public static string SqlSmoObject_UrnName { get; }
    public static string SqlSmoObject_UrnDesc { get; }
    public static string SmoObjectBase_UserDataName { get; }
    public static string SmoObjectBase_UserDataDesc { get; }
    public static string SqlSmoObject_PropertiesName { get; }
    public static string SqlSmoObject_PropertiesDesc { get; }
    public static string DdlTriggerBase_TextBodyName { get; }
    public static string DdlTriggerBase_TextBodyDesc { get; }
    public static string DdlTriggerBase_TextHeaderName { get; }
    public static string DdlTriggerBase_TextHeaderDesc { get; }
    public static string DdlTriggerBase_TextModeName { get; }
    public static string DdlTriggerBase_TextModeDesc { get; }
    public static string DefaultRuleBase_TextBodyName { get; }
    public static string DefaultRuleBase_TextBodyDesc { get; }
    public static string DefaultRuleBase_TextHeaderName { get; }
    public static string DefaultRuleBase_TextHeaderDesc { get; }
    public static string DefaultRuleBase_TextModeName { get; }
    public static string DefaultRuleBase_TextModeDesc { get; }
    public static string User_Name { get; }
    public static string User_Desc { get; }
    public static string User_AsymmetricKeyName { get; }
    public static string User_AsymmetricKeyDesc { get; }
    public static string User_CertificateName { get; }
    public static string User_CertificateDesc { get; }
    public static string User_CreateDateName { get; }
    public static string User_CreateDateDesc { get; }
    public static string User_DateLastModifiedName { get; }
    public static string User_DateLastModifiedDesc { get; }
    public static string User_DefaultSchemaName { get; }
    public static string User_DefaultSchemaDesc { get; }
    public static string User_HasDBAccessName { get; }
    public static string User_HasDBAccessDesc { get; }
    public static string User_IDName { get; }
    public static string User_IDDesc { get; }
    public static string User_IsSystemObjectName { get; }
    public static string User_IsSystemObjectDesc { get; }
    public static string User_LoginName { get; }
    public static string User_LoginDesc { get; }
    public static string User_LoginTypeName { get; }
    public static string User_LoginTypeDesc { get; }
    public static string User_SidName { get; }
    public static string User_SidDesc { get; }
    public static string User_UserTypeName { get; }
    public static string User_UserTypeDesc { get; }
    public static string User_LanguageName { get; }
    public static string User_LanguageDesc { get; }
    public static string User_AuthenticationTypeName { get; }
    public static string User_AuthenticationTypeDesc { get; }
    public static string ApplicationRole_Name { get; }
    public static string ApplicationRole_Desc { get; }
    public static string ApplicationRole_CreateDateName { get; }
    public static string ApplicationRole_CreateDateDesc { get; }
    public static string ApplicationRole_DateLastModifiedName { get; }
    public static string ApplicationRole_DateLastModifiedDesc { get; }
    public static string ApplicationRole_IDName { get; }
    public static string ApplicationRole_IDDesc { get; }
    public static string ApplicationRole_DefaultSchemaName { get; }
    public static string ApplicationRole_DefaultSchemaDesc { get; }
    public static string ApplicationRole_NameName { get; }
    public static string ApplicationRole_NameDesc { get; }
    public static string AsymmetricKey_Name { get; }
    public static string AsymmetricKey_Desc { get; }
    public static string AsymmetricKey_IDName { get; }
    public static string AsymmetricKey_IDDesc { get; }
    public static string AsymmetricKey_KeyEncryptionAlgorithmName { get; }
    public static string AsymmetricKey_KeyEncryptionAlgorithmDesc { get; }
    public static string AsymmetricKey_KeyLengthName { get; }
    public static string AsymmetricKey_KeyLengthDesc { get; }
    public static string AsymmetricKey_OwnerName { get; }
    public static string AsymmetricKey_OwnerDesc { get; }
    public static string AsymmetricKey_PrivateKeyEncryptionTypeName { get; }
    public static string AsymmetricKey_PrivateKeyEncryptionTypeDesc { get; }
    public static string AsymmetricKey_ProviderNameName { get; }
    public static string AsymmetricKey_ProviderNameDesc { get; }
    public static string AsymmetricKey_PublicKeyName { get; }
    public static string AsymmetricKey_PublicKeyDesc { get; }
    public static string AsymmetricKey_SidName { get; }
    public static string AsymmetricKey_SidDesc { get; }
    public static string AsymmetricKey_ThumbprintName { get; }
    public static string AsymmetricKey_ThumbprintDesc { get; }
    public static string AsymmetricKey_NameName { get; }
    public static string AsymmetricKey_NameDesc { get; }
    public static string BackupDevice_Name { get; }
    public static string BackupDevice_Desc { get; }
    public static string BackupDevice_BackupDeviceTypeName { get; }
    public static string BackupDevice_BackupDeviceTypeDesc { get; }
    public static string BackupDevice_PhysicalLocationName { get; }
    public static string BackupDevice_PhysicalLocationDesc { get; }
    public static string BackupDevice_SkipTapeLabelName { get; }
    public static string BackupDevice_SkipTapeLabelDesc { get; }
    public static string BackupDevice_NameName { get; }
    public static string BackupDevice_NameDesc { get; }
    public static string IDatabaseOptions_Name { get; }
    public static string IDatabaseOptions_Desc { get; }
    public static string Database_Name { get; }
    public static string Database_Desc { get; }
    public static string Database_AcceleratedRecoveryEnabledName { get; }
    public static string Database_AcceleratedRecoveryEnabledDesc { get; }
    public static string Database_ActiveConnectionsName { get; }
    public static string Database_ActiveConnectionsDesc { get; }
    public static string Database_AutoCreateStatisticsEnabledName { get; }
    public static string Database_AutoCreateStatisticsEnabledDesc { get; }
    public static string Database_AutoCreateIncrementalStatisticsEnabledName { get; }
    public static string Database_AutoCreateIncrementalStatisticsEnabledDesc { get; }
    public static string Database_AutoUpdateStatisticsEnabledName { get; }
    public static string Database_AutoUpdateStatisticsEnabledDesc { get; }
    public static string Database_AvailabilityGroupNameName { get; }
    public static string Database_AvailabilityGroupNameDesc { get; }
    public static string Database_AvailabilityDatabaseSynchronizationStateName { get; }
    public static string Database_AvailabilityDatabaseSynchronizationStateDesc { get; }
    public static string Database_CaseSensitiveName { get; }
    public static string Database_CaseSensitiveDesc { get; }
    public static string Database_CatalogCollationName { get; }
    public static string Database_CatalogCollationDesc { get; }
    public static string Database_CollationName { get; }
    public static string Database_CollationDesc { get; }
    public static string Database_CompatibilityLevelName { get; }
    public static string Database_CompatibilityLevelDesc { get; }
    public static string Database_CreateDateName { get; }
    public static string Database_CreateDateDesc { get; }
    public static string Database_DatabaseGuidName { get; }
    public static string Database_DatabaseGuidDesc { get; }
    public static string Database_DatabaseSnapshotBaseNameName { get; }
    public static string Database_DatabaseSnapshotBaseNameDesc { get; }
    public static string Database_DataRetentionEnabledName { get; }
    public static string Database_DataRetentionEnabledDesc { get; }
    public static string Database_DataSpaceUsageName { get; }
    public static string Database_DataSpaceUsageDesc { get; }
    public static string Database_DboLoginName { get; }
    public static string Database_DboLoginDesc { get; }
    public static string Database_DefaultFileGroupName { get; }
    public static string Database_DefaultFileGroupDesc { get; }
    public static string Database_DefaultFullTextCatalogName { get; }
    public static string Database_DefaultFullTextCatalogDesc { get; }
    public static string Database_DefaultSchemaName { get; }
    public static string Database_DefaultSchemaDesc { get; }
    public static string Database_HasDatabaseEncryptionKeyName { get; }
    public static string Database_HasDatabaseEncryptionKeyDesc { get; }
    public static string Database_IDName { get; }
    public static string Database_IDDesc { get; }
    public static string Database_IndexSpaceUsageName { get; }
    public static string Database_IndexSpaceUsageDesc { get; }
    public static string Database_IsAccessibleName { get; }
    public static string Database_IsAccessibleDesc { get; }
    public static string Database_IsDatabaseSnapshotName { get; }
    public static string Database_IsDatabaseSnapshotDesc { get; }
    public static string Database_IsDatabaseSnapshotBaseName { get; }
    public static string Database_IsDatabaseSnapshotBaseDesc { get; }
    public static string Database_IsDbAccessAdminName { get; }
    public static string Database_IsDbAccessAdminDesc { get; }
    public static string Database_IsDbBackupOperatorName { get; }
    public static string Database_IsDbBackupOperatorDesc { get; }
    public static string Database_IsDbDatareaderName { get; }
    public static string Database_IsDbDatareaderDesc { get; }
    public static string Database_IsDbDatawriterName { get; }
    public static string Database_IsDbDatawriterDesc { get; }
    public static string Database_IsDbDdlAdminName { get; }
    public static string Database_IsDbDdlAdminDesc { get; }
    public static string Database_IsDbDenyDatareaderName { get; }
    public static string Database_IsDbDenyDatareaderDesc { get; }
    public static string Database_IsDbDenyDatawriterName { get; }
    public static string Database_IsDbDenyDatawriterDesc { get; }
    public static string Database_IsDbOwnerName { get; }
    public static string Database_IsDbOwnerDesc { get; }
    public static string Database_IsDbSecurityAdminName { get; }
    public static string Database_IsDbSecurityAdminDesc { get; }
    public static string Database_IsFullTextEnabledName { get; }
    public static string Database_IsFullTextEnabledDesc { get; }
    public static string Database_IsLedgerName { get; }
    public static string Database_IsLedgerDesc { get; }
    public static string Database_IsMailHostName { get; }
    public static string Database_IsMailHostDesc { get; }
    public static string Database_IsManagementDataWarehouse { get; }
    public static string Database_IsManagementDataWarehouseDesc { get; }
    public static string Database_IsMirroringEnabledName { get; }
    public static string Database_IsMirroringEnabledDesc { get; }
    public static string Database_IsSqlDwName { get; }
    public static string Database_IsSqlDwDesc { get; }
    public static string Database_IsSystemObjectName { get; }
    public static string Database_IsSystemObjectDesc { get; }
    public static string Database_IsUpdateableName { get; }
    public static string Database_IsUpdateableDesc { get; }
    public static string Database_IsVarDecimalStorageFormatEnabledName { get; }
    public static string Database_IsVarDecimalStorageFormatEnabledDesc { get; }
    public static string Database_LastBackupDateName { get; }
    public static string Database_LastBackupDateDesc { get; }
    public static string Database_LastGoodCheckDbTimeName { get; }
    public static string Database_LastGoodCheckDbTimeDesc { get; }
    public static string Database_LastLogBackupDateName { get; }
    public static string Database_LastLogBackupDateDesc { get; }
    public static string Database_LegacyCardinalityEstimationName { get; }
    public static string Database_LegacyCardinalityEstimationDesc { get; }
    public static string Database_LegacyCardinalityEstimationForSecondaryName { get; }
    public static string Database_LegacyCardinalityEstimationForSecondaryDesc { get; }
    public static string Database_LogReuseWaitStatusName { get; }
    public static string Database_LogReuseWaitStatusDesc { get; }
    public static string Database_MaxDopName { get; }
    public static string Database_MaxDopDesc { get; }
    public static string Database_MaxDopForSecondaryName { get; }
    public static string Database_MaxDopForSecondaryDesc { get; }
    public static string Database_MirroringFailoverLogSequenceNumberName { get; }
    public static string Database_MirroringFailoverLogSequenceNumberDesc { get; }
    public static string Database_MirroringIDName { get; }
    public static string Database_MirroringIDDesc { get; }
    public static string Database_MirroringPartnerName { get; }
    public static string Database_MirroringPartnerDesc { get; }
    public static string Database_MirroringPartnerInstanceName { get; }
    public static string Database_MirroringPartnerInstanceDesc { get; }
    public static string Database_MirroringRoleSequenceName { get; }
    public static string Database_MirroringRoleSequenceDesc { get; }
    public static string Database_MirroringSafetyLevelName { get; }
    public static string Database_MirroringSafetyLevelDesc { get; }
    public static string Database_MirroringSafetySequenceName { get; }
    public static string Database_MirroringSafetySequenceDesc { get; }
    public static string Database_MirroringStatusName { get; }
    public static string Database_MirroringStatusDesc { get; }
    public static string Database_MirroringWitnessName { get; }
    public static string Database_MirroringWitnessDesc { get; }
    public static string Database_MirroringWitnessStatusName { get; }
    public static string Database_MirroringWitnessStatusDesc { get; }
    public static string Database_NameName { get; }
    public static string Database_NameDesc { get; }
    public static string Database_OwnerName { get; }
    public static string Database_OwnerDesc { get; }
    public static string Database_ParameterSniffingName { get; }
    public static string Database_ParameterSniffingDesc { get; }
    public static string Database_ParameterSniffingForSecondaryName { get; }
    public static string Database_ParameterSniffingForSecondaryDesc { get; }
    public static string Database_PersistentVersionStoreFileGroupName { get; }
    public static string Database_PersistentVersionStoreFileGroupDesc { get; }
    public static string Database_PersistentVersionStoreSizeKBName { get; }
    public static string Database_PersistentVersionStoreSizeKBDesc { get; }
    public static string Database_PrimaryFilePathName { get; }
    public static string Database_PrimaryFilePathDesc { get; }
    public static string Database_QueryOptimizerHotfixesName { get; }
    public static string Database_QueryOptimizerHotfixesDesc { get; }
    public static string Database_QueryOptimizerHotfixesForSecondaryName { get; }
    public static string Database_QueryOptimizerHotfixesForSecondaryDesc { get; }
    public static string Database_RecoveryForkGuidName { get; }
    public static string Database_RecoveryForkGuidDesc { get; }
    public static string Database_ReplicationOptionsName { get; }
    public static string Database_ReplicationOptionsDesc { get; }
    public static string Database_ServiceBrokerGuidName { get; }
    public static string Database_ServiceBrokerGuidDesc { get; }
    public static string Database_SizeName { get; }
    public static string Database_SizeDesc { get; }
    public static string Database_SpaceAvailableName { get; }
    public static string Database_SpaceAvailableDesc { get; }
    public static string Database_StatusName { get; }
    public static string Database_StatusDesc { get; }
    public static string Database_UserNameName { get; }
    public static string Database_UserNameDesc { get; }
    public static string Database_VersionName { get; }
    public static string Database_VersionDesc { get; }
    public static string Database_AnsiNullDefaultName { get; }
    public static string Database_AnsiNullDefaultDesc { get; }
    public static string Database_AnsiNullsEnabledName { get; }
    public static string Database_AnsiNullsEnabledDesc { get; }
    public static string Database_AnsiPaddingEnabledName { get; }
    public static string Database_AnsiPaddingEnabledDesc { get; }
    public static string Database_AnsiWarningsEnabledName { get; }
    public static string Database_AnsiWarningsEnabledDesc { get; }
    public static string Database_ArithmeticAbortEnabledName { get; }
    public static string Database_ArithmeticAbortEnabledDesc { get; }
    public static string Database_AutoCloseName { get; }
    public static string Database_AutoCloseDesc { get; }
    public static string Database_AutoShrinkName { get; }
    public static string Database_AutoShrinkDesc { get; }
    public static string Database_AutoUpdateStatisticsAsyncName { get; }
    public static string Database_AutoUpdateStatisticsAsyncDesc { get; }
    public static string Database_BrokerEnabledName { get; }
    public static string Database_BrokerEnabledDesc { get; }
    public static string Database_FilestreamDirectoryNameName { get; }
    public static string Database_FilestreamDirectoryNameDesc { get; }
    public static string Database_FilestreamNonTransactedAccessName { get; }
    public static string Database_FilestreamNonTransactedAccessDesc { get; }
    public static string Database_HonorBrokerPriorityName { get; }
    public static string Database_HonorBrokerPriorityDesc { get; }
    public static string Database_CloseCursorsOnCommitEnabledName { get; }
    public static string Database_CloseCursorsOnCommitEnabledDesc { get; }
    public static string Database_ConcatenateNullYieldsNullName { get; }
    public static string Database_ConcatenateNullYieldsNullDesc { get; }
    public static string Database_DatabaseOwnershipChainingName { get; }
    public static string Database_DatabaseOwnershipChainingDesc { get; }
    public static string Database_DateCorrelationOptimizationName { get; }
    public static string Database_DateCorrelationOptimizationDesc { get; }
    public static string Database_IsParameterizationForcedName { get; }
    public static string Database_IsParameterizationForcedDesc { get; }
    public static string Database_LocalCursorsDefaultName { get; }
    public static string Database_LocalCursorsDefaultDesc { get; }
    public static string Database_MirroringRedoQueueMaxSizeName { get; }
    public static string Database_MirroringRedoQueueMaxSizeDesc { get; }
    public static string Database_MirroringTimeoutName { get; }
    public static string Database_MirroringTimeoutDesc { get; }
    public static string Database_NumericRoundAbortEnabledName { get; }
    public static string Database_NumericRoundAbortEnabledDesc { get; }
    public static string Database_PageVerifyName { get; }
    public static string Database_PageVerifyDesc { get; }
    public static string Database_TargetRecoveryTimeName { get; }
    public static string Database_TargetRecoveryTimeDesc { get; }
    public static string Database_ParentName { get; }
    public static string Database_ParentDesc { get; }
    public static string Database_PropertiesName { get; }
    public static string Database_PropertiesDesc { get; }
    public static string Database_QuotedIdentifiersEnabledName { get; }
    public static string Database_QuotedIdentifiersEnabledDesc { get; }
    public static string Database_ReadOnlyName { get; }
    public static string Database_ReadOnlyDesc { get; }
    public static string Database_RecoveryModelName { get; }
    public static string Database_RecoveryModelDesc { get; }
    public static string Database_RecursiveTriggersEnabledName { get; }
    public static string Database_RecursiveTriggersEnabledDesc { get; }
    public static string Database_RemoteDataArchiveEnabledName { get; }
    public static string Database_RemoteDataArchiveEnabledDesc { get; }
    public static string Database_RemoteDataArchiveEndpointName { get; }
    public static string Database_RemoteDataArchiveEndpointDesc { get; }
    public static string Database_RemoteDataArchiveLinkedServerName { get; }
    public static string Database_RemoteDataArchiveLinkedServerDesc { get; }
    public static string Database_RemoteDatabaseNameName { get; }
    public static string Database_RemoteDatabaseNameDesc { get; }
    public static string Database_RemoteDataArchiveCredentialName { get; }
    public static string Database_RemoteDataArchiveCredentialDesc { get; }
    public static string Database_RemoteDataArchiveUseFederatedServiceAccountName { get; }
    public static string Database_RemoteDataArchiveUseFederatedServiceAccountDesc { get; }
    public static string Database_SnapshotIsolationStateName { get; }
    public static string Database_SnapshotIsolationStateDesc { get; }
    public static string Database_StateName { get; }
    public static string Database_StateDesc { get; }
    public static string Database_TrustworthyName { get; }
    public static string Database_TrustworthyDesc { get; }
    public static string Database_UrnName { get; }
    public static string Database_UrnDesc { get; }
    public static string Database_UserAccessName { get; }
    public static string Database_UserAccessDesc { get; }
    public static string Database_UserDataName { get; }
    public static string Database_UserDataDesc { get; }
    public static string Datababase_DefaultFileStreamFileGroupName { get; }
    public static string Database_DefaultFileStreamFileGroupDesc { get; }
    public static string Database_ChangeTrackingAutoCleanUpName { get; }
    public static string Database_ChangeTrackingAutoCleanUpDesc { get; }
    public static string Database_ChangeTrackingEnabledName { get; }
    public static string Database_ChangeTrackingEnabledDesc { get; }
    public static string Database_ChangeTrackingRetentionPeriodName { get; }
    public static string Database_ChangeTrackingRetentionPeriodDesc { get; }
    public static string Database_ChangeTrackingRetentionPeriodUnitsName { get; }
    public static string Database_ChangeTrackingRetentionPeriodUnitsDesc { get; }
    public static string Database_EncryptionEnabledName { get; }
    public static string Database_EncryptionEnabledDesc { get; }
    public static string Database_IsReadCommittedSnapshotOnName { get; }
    public static string Database_IsReadCommittedSnapshotOnDesc { get; }
    public static string Database_LastDifferentialBackupDateName { get; }
    public static string Database_LastDifferentialBackupDateDesc { get; }
    public static string Database_ContainmentTypeName { get; }
    public static string Database_ContainmentTypeDesc { get; }
    public static string Database_DefaultLanguageLcidName { get; }
    public static string Database_DefaultLanguageLcidDesc { get; }
    public static string Database_DefaultFullTextLanguageLcidName { get; }
    public static string Database_DefaultFullTextLanguageLcidDesc { get; }
    public static string Database_NestedTriggersEnabledName { get; }
    public static string Database_NestedTriggersEnabledDesc { get; }
    public static string Database_TransformNoiseWordsName { get; }
    public static string Database_TransformNoiseWordsDesc { get; }
    public static string Database_TwoDigitYearCutoffName { get; }
    public static string Database_TwoDigitYearCutoffDesc { get; }
    public static string Database_HasMemoryOptimizedObjectsName { get; }
    public static string Database_HasMemoryOptimizedObjectsDesc { get; }
    public static string Database_MemoryAllocatedToMemoryOptimizedObjectsInKBName { get; }
    public static string Database_MemoryAllocatedToMemoryOptimizedObjectsInKBDesc { get; }
    public static string Database_MemoryUsedByMemoryOptimizedObjectsInKBName { get; }
    public static string Database_MemoryUsedByMemoryOptimizedObjectsInKBDesc { get; }
    public static string Database_HasFileInCloudName { get; }
    public static string Database_HasFileInCloudDesc { get; }
    public static string Database_DelayedDurabilityName { get; }
    public static string Database_DelayedDurabilityDesc { get; }
    public static string DatabaseOptions_Name { get; }
    public static string DatabaseOptions_Desc { get; }
    public static string DatabaseOptions_AnsiNullDefaultName { get; }
    public static string DatabaseOptions_AnsiNullDefaultDesc { get; }
    public static string DatabaseOptions_AnsiNullsEnabledName { get; }
    public static string DatabaseOptions_AnsiNullsEnabledDesc { get; }
    public static string DatabaseOptions_AnsiPaddingEnabledName { get; }
    public static string DatabaseOptions_AnsiPaddingEnabledDesc { get; }
    public static string DatabaseOptions_AnsiWarningsEnabledName { get; }
    public static string DatabaseOptions_AnsiWarningsEnabledDesc { get; }
    public static string DatabaseOptions_ArithmeticAbortEnabledName { get; }
    public static string DatabaseOptions_ArithmeticAbortEnabledDesc { get; }
    public static string DatabaseOptions_AutoCloseName { get; }
    public static string DatabaseOptions_AutoCloseDesc { get; }
    public static string DatabaseOptions_AutoCreateStatisticsName { get; }
    public static string DatabaseOptions_AutoCreateStatisticsDesc { get; }
    public static string DatabaseOptions_AutoShrinkName { get; }
    public static string DatabaseOptions_AutoShrinkDesc { get; }
    public static string DatabaseOptions_AutoUpdateStatisticsName { get; }
    public static string DatabaseOptions_AutoUpdateStatisticsDesc { get; }
    public static string DatabaseOptions_AutoUpdateStatisticsAsyncName { get; }
    public static string DatabaseOptions_AutoUpdateStatisticsAsyncDesc { get; }
    public static string DatabaseOptions_BrokerEnabledName { get; }
    public static string DatabaseOptions_BrokerEnabledDesc { get; }
    public static string DatabaseOptions_CloseCursorsOnCommitEnabledName { get; }
    public static string DatabaseOptions_CloseCursorsOnCommitEnabledDesc { get; }
    public static string DatabaseOptions_ConcatenateNullYieldsNullName { get; }
    public static string DatabaseOptions_ConcatenateNullYieldsNullDesc { get; }
    public static string DatabaseOptions_DatabaseOwnershipChainingName { get; }
    public static string DatabaseOptions_DatabaseOwnershipChainingDesc { get; }
    public static string DatabaseOptions_DateCorrelationOptimizationName { get; }
    public static string DatabaseOptions_DateCorrelationOptimizationDesc { get; }
    public static string DatabaseOptions_IsParameterizationForcedName { get; }
    public static string DatabaseOptions_IsParameterizationForcedDesc { get; }
    public static string DatabaseOptions_LocalCursorsDefaultName { get; }
    public static string DatabaseOptions_LocalCursorsDefaultDesc { get; }
    public static string DatabaseOptions_MirroringRedoQueueMaxSizeName { get; }
    public static string DatabaseOptions_MirroringRedoQueueMaxSizeDesc { get; }
    public static string DatabaseOptions_MirroringTimeoutName { get; }
    public static string DatabaseOptions_MirroringTimeoutDesc { get; }
    public static string DatabaseOptions_NumericRoundAbortEnabledName { get; }
    public static string DatabaseOptions_NumericRoundAbortEnabledDesc { get; }
    public static string DatabaseOptions_PageVerifyName { get; }
    public static string DatabaseOptions_PageVerifyDesc { get; }
    public static string DatabaseOptions_ParentName { get; }
    public static string DatabaseOptions_ParentDesc { get; }
    public static string DatabaseOptions_PropertiesName { get; }
    public static string DatabaseOptions_PropertiesDesc { get; }
    public static string DatabaseOptions_QuotedIdentifiersEnabledName { get; }
    public static string DatabaseOptions_QuotedIdentifiersEnabledDesc { get; }
    public static string DatabaseOptions_ReadOnlyName { get; }
    public static string DatabaseOptions_ReadOnlyDesc { get; }
    public static string DatabaseOptions_RecoveryModelName { get; }
    public static string DatabaseOptions_RecoveryModelDesc { get; }
    public static string DatabaseOptions_RecursiveTriggersEnabledName { get; }
    public static string DatabaseOptions_RecursiveTriggersEnabledDesc { get; }
    public static string DatabaseOptions_SnapshotIsolationStateName { get; }
    public static string DatabaseOptions_SnapshotIsolationStateDesc { get; }
    public static string DatabaseOptions_StateName { get; }
    public static string DatabaseOptions_StateDesc { get; }
    public static string DatabaseOptions_TrustworthyName { get; }
    public static string DatabaseOptions_TrustworthyDesc { get; }
    public static string DatabaseOptions_UrnName { get; }
    public static string DatabaseOptions_UrnDesc { get; }
    public static string DatabaseOptions_UserAccessName { get; }
    public static string DatabaseOptions_UserAccessDesc { get; }
    public static string DatabaseOptions_UserDataName { get; }
    public static string DatabaseOptions_UserDataDesc { get; }
    public static string XmlSchemaCollection_Name { get; }
    public static string XmlSchemaCollection_Desc { get; }
    public static string XmlSchemaCollection_CreateDateName { get; }
    public static string XmlSchemaCollection_CreateDateDesc { get; }
    public static string XmlSchemaCollection_DateLastModifiedName { get; }
    public static string XmlSchemaCollection_DateLastModifiedDesc { get; }
    public static string XmlSchemaCollection_ExtendedPropertiesName { get; }
    public static string XmlSchemaCollection_ExtendedPropertiesDesc { get; }
    public static string XmlSchemaCollection_IDName { get; }
    public static string XmlSchemaCollection_IDDesc { get; }
    public static string XmlSchemaCollection_ParentName { get; }
    public static string XmlSchemaCollection_ParentDesc { get; }
    public static string XmlSchemaCollection_TextName { get; }
    public static string XmlSchemaCollection_TextDesc { get; }
    public static string View_Name { get; }
    public static string View_Desc { get; }
    public static string View_AnsiNullsStatusName { get; }
    public static string View_AnsiNullsStatusDesc { get; }
    public static string View_CreateDateName { get; }
    public static string View_CreateDateDesc { get; }
    public static string View_DateLastModifiedName { get; }
    public static string View_DateLastModifiedDesc { get; }
    public static string View_HasAfterTriggerName { get; }
    public static string View_HasAfterTriggerDesc { get; }
    public static string View_HasClusteredIndexName { get; }
    public static string View_HasClusteredIndexDesc { get; }
    public static string View_HasColumnSpecificationName { get; }
    public static string View_HasColumnSpecificationDesc { get; }
    public static string View_HasDeleteTriggerName { get; }
    public static string View_HasDeleteTriggerDesc { get; }
    public static string View_HasIndexName { get; }
    public static string View_HasIndexDesc { get; }
    public static string View_HasInsertTriggerName { get; }
    public static string View_HasInsertTriggerDesc { get; }
    public static string View_HasInsteadOfTriggerName { get; }
    public static string View_HasInsteadOfTriggerDesc { get; }
    public static string View_HasNonClusteredIndexName { get; }
    public static string View_HasNonClusteredIndexDesc { get; }
    public static string View_HasPrimaryClusteredIndexName { get; }
    public static string View_HasPrimaryClusteredIndexDesc { get; }
    public static string View_HasUpdateTriggerName { get; }
    public static string View_HasUpdateTriggerDesc { get; }
    public static string View_IDName { get; }
    public static string View_IDDesc { get; }
    public static string View_IsDroppedLedgerViewName { get; }
    public static string View_IsDroppedLedgerViewDesc { get; }
    public static string View_IsEncryptedName { get; }
    public static string View_IsEncryptedDesc { get; }
    public static string View_IsIndexableName { get; }
    public static string View_IsIndexableDesc { get; }
    public static string View_IsSchemaBoundName { get; }
    public static string View_IsSchemaBoundDesc { get; }
    public static string View_IsSystemObjectName { get; }
    public static string View_IsSystemObjectDesc { get; }
    public static string View_IsSchemaOwnedName { get; }
    public static string View_IsSchemaOwnedDesc { get; }
    public static string View_LedgerViewTypeName { get; }
    public static string View_LedgerViewTypeDesc { get; }
    public static string View_OwnerName { get; }
    public static string View_OwnerDesc { get; }
    public static string View_QuotedIdentifierStatusName { get; }
    public static string View_QuotedIdentifierStatusDesc { get; }
    public static string View_ReturnsViewMetadataName { get; }
    public static string View_ReturnsViewMetadataDesc { get; }
    public static string View_TextBodyName { get; }
    public static string View_TextBodyDesc { get; }
    public static string View_TextHeaderName { get; }
    public static string View_TextHeaderDesc { get; }
    public static string View_TextModeName { get; }
    public static string View_TextModeDesc { get; }
    public static string UserDefinedType_Name { get; }
    public static string UserDefinedType_Desc { get; }
    public static string UserDefinedType_AssemblyNameName { get; }
    public static string UserDefinedType_AssemblyNameDesc { get; }
    public static string UserDefinedType_BinaryTypeIdentifierName { get; }
    public static string UserDefinedType_BinaryTypeIdentifierDesc { get; }
    public static string UserDefinedType_ClassNameName { get; }
    public static string UserDefinedType_ClassNameDesc { get; }
    public static string UserDefinedType_CollationName { get; }
    public static string UserDefinedType_CollationDesc { get; }
    public static string UserDefinedType_IDName { get; }
    public static string UserDefinedType_IDDesc { get; }
    public static string UserDefinedType_IsBinaryOrderedName { get; }
    public static string UserDefinedType_IsBinaryOrderedDesc { get; }
    public static string UserDefinedType_IsComVisibleName { get; }
    public static string UserDefinedType_IsComVisibleDesc { get; }
    public static string UserDefinedType_IsFixedLengthName { get; }
    public static string UserDefinedType_IsFixedLengthDesc { get; }
    public static string UserDefinedType_IsNullableName { get; }
    public static string UserDefinedType_IsNullableDesc { get; }
    public static string UserDefinedType_IsSchemaOwnedName { get; }
    public static string UserDefinedType_IsSchemaOwnedDesc { get; }
    public static string UserDefinedType_MaxLengthName { get; }
    public static string UserDefinedType_MaxLengthDesc { get; }
    public static string UserDefinedType_NumericPrecisionName { get; }
    public static string UserDefinedType_NumericPrecisionDesc { get; }
    public static string UserDefinedType_NumericScaleName { get; }
    public static string UserDefinedType_NumericScaleDesc { get; }
    public static string UserDefinedType_OwnerName { get; }
    public static string UserDefinedType_OwnerDesc { get; }
    public static string UserDefinedType_UserDefinedTypeFormatName { get; }
    public static string UserDefinedType_UserDefinedTypeFormatDesc { get; }
    public static string Information_Name { get; }
    public static string Information_Desc { get; }
    public static string Information_CollationName { get; }
    public static string Information_CollationDesc { get; }
    public static string Information_EditionName { get; }
    public static string Information_EditionDesc { get; }
    public static string Information_IsCaseSensitiveName { get; }
    public static string Information_IsCaseSensitiveDesc { get; }
    public static string Information_IsClusteredName { get; }
    public static string Information_IsClusteredDesc { get; }
    public static string Information_IsFullTextInstalledName { get; }
    public static string Information_IsFullTextInstalledDesc { get; }
    public static string Information_IsSingleUserName { get; }
    public static string Information_IsSingleUserDesc { get; }
    public static string Information_LanguageName { get; }
    public static string Information_LanguageDesc { get; }
    public static string Information_MasterDBLogPathName { get; }
    public static string Information_MasterDBLogPathDesc { get; }
    public static string Information_MasterDBPathName { get; }
    public static string Information_MasterDBPathDesc { get; }
    public static string Information_MaxPrecisionName { get; }
    public static string Information_MaxPrecisionDesc { get; }
    public static string Information_NetNameName { get; }
    public static string Information_NetNameDesc { get; }
    public static string Information_OSVersionName { get; }
    public static string Information_OSVersionDesc { get; }
    public static string Information_ParentName { get; }
    public static string Information_ParentDesc { get; }
    public static string Information_PhysicalMemoryName { get; }
    public static string Information_PhysicalMemoryDesc { get; }
    public static string Information_PlatformName { get; }
    public static string Information_PlatformDesc { get; }
    public static string Information_ProcessorsName { get; }
    public static string Information_ProcessorsDesc { get; }
    public static string Information_ProductName { get; }
    public static string Information_ProductDesc { get; }
    public static string Information_ProductLevelName { get; }
    public static string Information_ProductLevelDesc { get; }
    public static string Information_RootDirectoryName { get; }
    public static string Information_RootDirectoryDesc { get; }
    public static string Information_VersionName { get; }
    public static string Information_VersionDesc { get; }
    public static string Information_VersionStringName { get; }
    public static string Information_VersionStringDesc { get; }
    public static string Table_IsMemoryOptimizedName { get; }
    public static string Table_IsMemoryOptimizedDesc { get; }
    public static string Table_DurabilityName { get; }
    public static string Table_DurabilityDesc { get; }
    public static string ISettings_Name { get; }
    public static string ISettings_Desc { get; }
    public static string Settings_AuditLevelName { get; }
    public static string Settings_AuditLevelDesc { get; }
    public static string Settings_BackupDirectoryName { get; }
    public static string Settings_BackupDirectoryDesc { get; }
    public static string Settings_DefaultFileName { get; }
    public static string Settings_DefaultFileDesc { get; }
    public static string Settings_DefaultLogName { get; }
    public static string Settings_DefaultLogDesc { get; }
    public static string Settings_ImpersonateClientName { get; }
    public static string Settings_ImpersonateClientDesc { get; }
    public static string Settings_LoginModeName { get; }
    public static string Settings_LoginModeDesc { get; }
    public static string Settings_MailProfileName { get; }
    public static string Settings_MailProfileDesc { get; }
    public static string Settings_NumberOfLogFilesName { get; }
    public static string Settings_NumberOfLogFilesDesc { get; }
    public static string Settings_ParentName { get; }
    public static string Settings_ParentDesc { get; }
    public static string ServerConfiguration_Name { get; }
    public static string ServerConfiguration_Desc { get; }
    public static string ServerConfiguration_ContainmentEnabledName { get; }
    public static string ServerConfiguration_ContainmentEnabledDesc { get; }
    public static string ServerConfiguration_AdHocDistributedQueriesEnabledName { get; }
    public static string ServerConfiguration_AdHocDistributedQueriesEnabledDesc { get; }
    public static string ServerConfiguration_Affinity64MaskName { get; }
    public static string ServerConfiguration_Affinity64MaskDesc { get; }
    public static string ServerConfiguration_AffinityIOMaskName { get; }
    public static string ServerConfiguration_AffinityIOMaskDesc { get; }
    public static string ServerConfiguration_AffinityMaskName { get; }
    public static string ServerConfiguration_AffinityMaskDesc { get; }
    public static string ServerConfiguration_AgentXPsEnabledName { get; }
    public static string ServerConfiguration_AgentXPsEnabledDesc { get; }
    public static string ServerConfiguration_AllowedHttpSessionsName { get; }
    public static string ServerConfiguration_AllowedHttpSessionsDesc { get; }
    public static string ServerConfiguration_AllowUpdatesName { get; }
    public static string ServerConfiguration_AllowUpdatesDesc { get; }
    public static string ServerConfiguration_AweEnabledName { get; }
    public static string ServerConfiguration_AweEnabledDesc { get; }
    public static string ServerConfiguration_C2AuditModeName { get; }
    public static string ServerConfiguration_C2AuditModeDesc { get; }
    public static string ServerConfiguration_CostThresholdForParallelismName { get; }
    public static string ServerConfiguration_CostThresholdForParallelismDesc { get; }
    public static string ServerConfiguration_CrossDBOwnershipChainingName { get; }
    public static string ServerConfiguration_CrossDBOwnershipChainingDesc { get; }
    public static string ServerConfiguration_CursorThresholdName { get; }
    public static string ServerConfiguration_CursorThresholdDesc { get; }
    public static string ServerConfiguration_DatabaseMailEnabledName { get; }
    public static string ServerConfiguration_DatabaseMailEnabledDesc { get; }
    public static string ServerConfiguration_DefaultFullTextLanguageName { get; }
    public static string ServerConfiguration_DefaultFullTextLanguageDesc { get; }
    public static string ServerConfiguration_DefaultLanguageName { get; }
    public static string ServerConfiguration_DefaultLanguageDesc { get; }
    public static string ServerConfiguration_FilestreamAccessLevelName { get; }
    public static string ServerConfiguration_FilestreamAccessLevelDesc { get; }
    public static string ServerConfiguration_FillFactorName { get; }
    public static string ServerConfiguration_FillFactorDesc { get; }
    public static string ServerConfiguration_HttpConnectionIdleMaximumTimeName { get; }
    public static string ServerConfiguration_HttpConnectionIdleMaximumTimeDesc { get; }
    public static string ServerConfiguration_HttpSessionIdleMaximumTimeName { get; }
    public static string ServerConfiguration_HttpSessionIdleMaximumTimeDesc { get; }
    public static string ServerConfiguration_IndexCreateMemoryName { get; }
    public static string ServerConfiguration_IndexCreateMemoryDesc { get; }
    public static string ServerConfiguration_IsSqlClrEnabledName { get; }
    public static string ServerConfiguration_IsSqlClrEnabledDesc { get; }
    public static string ServerConfiguration_LightweightPoolingName { get; }
    public static string ServerConfiguration_LightweightPoolingDesc { get; }
    public static string ServerConfiguration_LocksName { get; }
    public static string ServerConfiguration_LocksDesc { get; }
    public static string ServerConfiguration_MaxDegreeOfParallelismName { get; }
    public static string ServerConfiguration_MaxDegreeOfParallelismDesc { get; }
    public static string ServerConfiguration_MaxServerMemoryName { get; }
    public static string ServerConfiguration_MaxServerMemoryDesc { get; }
    public static string ServerConfiguration_MaxWorkerThreadsName { get; }
    public static string ServerConfiguration_MaxWorkerThreadsDesc { get; }
    public static string ServerConfiguration_MediaRetentionName { get; }
    public static string ServerConfiguration_MediaRetentionDesc { get; }
    public static string ServerConfiguration_MinMemoryPerQueryName { get; }
    public static string ServerConfiguration_MinMemoryPerQueryDesc { get; }
    public static string ServerConfiguration_OptimizeAdhocWorkloadsName { get; }
    public static string ServerConfiguration_OptimizeAdhocWorkloadsDesc { get; }
    public static string ServerConfiguration_MinServerMemoryName { get; }
    public static string ServerConfiguration_MinServerMemoryDesc { get; }
    public static string ServerConfiguration_NestedTriggersName { get; }
    public static string ServerConfiguration_NestedTriggersDesc { get; }
    public static string ServerConfiguration_NetworkPacketSizeName { get; }
    public static string ServerConfiguration_NetworkPacketSizeDesc { get; }
    public static string ServerConfiguration_OleAutomationProceduresEnabledName { get; }
    public static string ServerConfiguration_OleAutomationProceduresEnabledDesc { get; }
    public static string ServerConfiguration_OpenObjectsName { get; }
    public static string ServerConfiguration_OpenObjectsDesc { get; }
    public static string ServerConfiguration_PrecomputeRankName { get; }
    public static string ServerConfiguration_PrecomputeRankDesc { get; }
    public static string ServerConfiguration_PriorityBoostName { get; }
    public static string ServerConfiguration_PriorityBoostDesc { get; }
    public static string ServerConfiguration_ProtocolHandlerTimeoutName { get; }
    public static string ServerConfiguration_ProtocolHandlerTimeoutDesc { get; }
    public static string ServerConfiguration_QueryGovernorCostLimitName { get; }
    public static string ServerConfiguration_QueryGovernorCostLimitDesc { get; }
    public static string ServerConfiguration_QueryWaitName { get; }
    public static string ServerConfiguration_QueryWaitDesc { get; }
    public static string ServerConfiguration_RecoveryIntervalName { get; }
    public static string ServerConfiguration_RecoveryIntervalDesc { get; }
    public static string ServerConfiguration_RemoteAccessName { get; }
    public static string ServerConfiguration_RemoteAccessDesc { get; }
    public static string ServerConfiguration_RemoteDacConnectionsEnabledName { get; }
    public static string ServerConfiguration_RemoteDacConnectionsEnabledDesc { get; }
    public static string ServerConfiguration_RemoteLoginTimeoutName { get; }
    public static string ServerConfiguration_RemoteLoginTimeoutDesc { get; }
    public static string ServerConfiguration_RemoteProcTransName { get; }
    public static string ServerConfiguration_RemoteProcTransDesc { get; }
    public static string ServerConfiguration_RemoteQueryTimeoutName { get; }
    public static string ServerConfiguration_RemoteQueryTimeoutDesc { get; }
    public static string ServerConfiguration_ReplicationMaxTextSizeName { get; }
    public static string ServerConfiguration_ReplicationMaxTextSizeDesc { get; }
    public static string ServerConfiguration_ReplicationXPsEnabledName { get; }
    public static string ServerConfiguration_ReplicationXPsEnabledDesc { get; }
    public static string ServerConfiguration_ScanForStartupProceduresName { get; }
    public static string ServerConfiguration_ScanForStartupProceduresDesc { get; }
    public static string ServerConfiguration_SetWorkingSetSizeName { get; }
    public static string ServerConfiguration_SetWorkingSetSizeDesc { get; }
    public static string ServerConfiguration_ShowAdvancedOptionsName { get; }
    public static string ServerConfiguration_ShowAdvancedOptionsDesc { get; }
    public static string ServerConfiguration_SmoAndDmoXPsEnabledName { get; }
    public static string ServerConfiguration_SmoAndDmoXPsEnabledDesc { get; }
    public static string ServerConfiguration_SqlMailXPsEnabledName { get; }
    public static string ServerConfiguration_SqlMailXPsEnabledDesc { get; }
    public static string ServerConfiguration_TransformNoiseWordsName { get; }
    public static string ServerConfiguration_TransformNoiseWordsDesc { get; }
    public static string ServerConfiguration_TwoDigitYearCutoffName { get; }
    public static string ServerConfiguration_TwoDigitYearCutoffDesc { get; }
    public static string ServerConfiguration_UserConnectionsName { get; }
    public static string ServerConfiguration_UserConnectionsDesc { get; }
    public static string ServerConfiguration_UserOptionsName { get; }
    public static string ServerConfiguration_UserOptionsDesc { get; }
    public static string ServerConfiguration_WebXPsEnabledName { get; }
    public static string ServerConfiguration_WebXPsEnabledDesc { get; }
    public static string ServerConfiguration_XPCmdShellEnabledName { get; }
    public static string ServerConfiguration_XPCmdShellEnabledDesc { get; }
    public static string Login_Name { get; }
    public static string Login_Desc { get; }
    public static string Login_AsymmetricKeyName { get; }
    public static string Login_AsymmetricKeyDesc { get; }
    public static string Login_CreateDateName { get; }
    public static string Login_CreateDateDesc { get; }
    public static string Login_CertificateName { get; }
    public static string Login_CertificateDesc { get; }
    public static string Login_CredentialName { get; }
    public static string Login_CredentialDesc { get; }
    public static string Login_DateLastModifiedName { get; }
    public static string Login_DateLastModifiedDesc { get; }
    public static string Login_DefaultDatabaseName { get; }
    public static string Login_DefaultDatabaseDesc { get; }
    public static string Login_DenyWindowsLoginName { get; }
    public static string Login_DenyWindowsLoginDesc { get; }
    public static string Login_EventsName { get; }
    public static string Login_EventsDesc { get; }
    public static string Login_HasAccessName { get; }
    public static string Login_HasAccessDesc { get; }
    public static string Login_IDName { get; }
    public static string Login_IDDesc { get; }
    public static string Login_IsDisabledName { get; }
    public static string Login_IsDisabledDesc { get; }
    public static string Login_IsLockedName { get; }
    public static string Login_IsLockedDesc { get; }
    public static string Login_IsPasswordExpiredName { get; }
    public static string Login_IsPasswordExpiredDesc { get; }
    public static string Login_IsSystemObjectName { get; }
    public static string Login_IsSystemObjectDesc { get; }
    public static string Login_LanguageName { get; }
    public static string Login_LanguageDesc { get; }
    public static string Login_LanguageAliasName { get; }
    public static string Login_LanguageAliasDesc { get; }
    public static string Login_LoginTypeName { get; }
    public static string Login_LoginTypeDesc { get; }
    public static string Login_MustChangePasswordName { get; }
    public static string Login_MustChangePasswordDesc { get; }
    public static string Login_PasswordExpirationEnabledName { get; }
    public static string Login_PasswordExpirationEnabledDesc { get; }
    public static string Login_PasswordPolicyEnforcedName { get; }
    public static string Login_PasswordPolicyEnforcedDesc { get; }
    public static string Login_SidName { get; }
    public static string Login_SidDesc { get; }
    public static string Login_WindowsLoginAccessTypeName { get; }
    public static string Login_WindowsLoginAccessTypeDesc { get; }
    public static string Login_PasswordHashAlgorithmName { get; }
    public static string Login_PasswordHashAlgorithmDesc { get; }
    public static string Index_Name { get; }
    public static string Index_Desc { get; }
    public static string Index_HasCompressedPartitionsName { get; }
    public static string Index_HasCompressedPartitionsDesc { get; }
    public static string Index_HasSparseColumnName { get; }
    public static string Index_HasSparseColumnDesc { get; }
    public static string Index_CompactLargeObjectsName { get; }
    public static string Index_CompactLargeObjectsDesc { get; }
    public static string Index_HasXmlCompressedPartitionsName { get; }
    public static string Index_HasXmlCompressedPartitionsDesc { get; }
    public static string Index_DisallowPageLocksName { get; }
    public static string Index_DisallowPageLocksDesc { get; }
    public static string Index_DisallowRowLocksName { get; }
    public static string Index_DisallowRowLocksDesc { get; }
    public static string Index_EventsName { get; }
    public static string Index_EventsDesc { get; }
    public static string Index_FileGroupName { get; }
    public static string Index_FileGroupDesc { get; }
    public static string Index_FileStreamFileGroupName { get; }
    public static string Index_FileStreamFileGroupDesc { get; }
    public static string Index_FileStreamPartitionSchemeName { get; }
    public static string Index_FileStreamPartitionSchemeDesc { get; }
    public static string Index_FillFactorName { get; }
    public static string Index_FillFactorDesc { get; }
    public static string Index_IDName { get; }
    public static string Index_IDDesc { get; }
    public static string Index_IgnoreDuplicateKeysName { get; }
    public static string Index_IgnoreDuplicateKeysDesc { get; }
    public static string Index_IndexKeyTypeName { get; }
    public static string Index_IndexKeyTypeDesc { get; }
    public static string Index_IsClusteredName { get; }
    public static string Index_IsClusteredDesc { get; }
    public static string Index_IsDisabledName { get; }
    public static string Index_IsDisabledDesc { get; }
    public static string Index_IsFileTableDefinedName { get; }
    public static string Index_IsFileTableDefinedDesc { get; }
    public static string Index_IsFullTextKeyName { get; }
    public static string Index_IsFullTextKeyDesc { get; }
    public static string Index_IsIndexOnComputedName { get; }
    public static string Index_IsIndexOnComputedDesc { get; }
    public static string Index_IsIndexOnTableName { get; }
    public static string Index_IsIndexOnTableDesc { get; }
    public static string Index_IsOptimizedForSequentialKeyName { get; }
    public static string Index_IsOptimizedForSequentialKeyDesc { get; }
    public static string Index_IsPartitionedName { get; }
    public static string Index_IsPartitionedDesc { get; }
    public static string Index_IsSystemNamedName { get; }
    public static string Index_IsSystemNamedDesc { get; }
    public static string Index_IsSystemObjectName { get; }
    public static string Index_IsSystemObjectDesc { get; }
    public static string Index_IsUniqueName { get; }
    public static string Index_IsUniqueDesc { get; }
    public static string Index_IsXmlIndexName { get; }
    public static string Index_IsXmlIndexDesc { get; }
    public static string Index_MaximumDegreeOfParallelismName { get; }
    public static string Index_MaximumDegreeOfParallelismDesc { get; }
    public static string Index_NoAutomaticRecomputationName { get; }
    public static string Index_NoAutomaticRecomputationDesc { get; }
    public static string Index_OnlineIndexOperationName { get; }
    public static string Index_OnlineIndexOperationDesc { get; }
    public static string Index_PadIndexName { get; }
    public static string Index_PadIndexDesc { get; }
    public static string Index_ParentXmlIndexName { get; }
    public static string Index_ParentXmlIndexDesc { get; }
    public static string Index_PartitionSchemeName { get; }
    public static string Index_PartitionSchemeDesc { get; }
    public static string Index_ResumableOperationStateName { get; }
    public static string Index_ResumableOperationStateDesc { get; }
    public static string Index_SecondaryXmlIndexTypeName { get; }
    public static string Index_SecondaryXmlIndexTypeDesc { get; }
    public static string Index_SortInTempdbName { get; }
    public static string Index_SortInTempdbDesc { get; }
    public static string Index_SpaceUsedName { get; }
    public static string Index_SpaceUsedDesc { get; }
    public static string Index_BoundingBoxXMaxName { get; }
    public static string Index_BoundingBoxXMaxDesc { get; }
    public static string Index_BoundingBoxXMinName { get; }
    public static string Index_BoundingBoxXMinDesc { get; }
    public static string Index_BoundingBoxYMaxName { get; }
    public static string Index_BoundingBoxYMaxDesc { get; }
    public static string Index_BoundingBoxYMin { get; }
    public static string Index_BoundingBoxYMinDesc { get; }
    public static string Index_CellsPerObjectName { get; }
    public static string Index_CellsPerObjectDesc { get; }
    public static string Index_IsSpatialIndexName { get; }
    public static string Index_IsSpatialIndexDesc { get; }
    public static string Index_Level1Grid { get; }
    public static string Index_Level1GridDesc { get; }
    public static string Index_Level2GridName { get; }
    public static string Index_Level2GridDesc { get; }
    public static string Index_Level3GridName { get; }
    public static string Index_Level3GridDesc { get; }
    public static string Index_Level4GridName { get; }
    public static string Index_Level4GridDesc { get; }
    public static string Index_HasFilterName { get; }
    public static string Index_HasFilterDesc { get; }
    public static string Index_FilterDefinitionName { get; }
    public static string Index_FilterDefinitionDesc { get; }
    public static string Index_SpatialIndexTypeName { get; }
    public static string Index_SpatialIndexTypeDesc { get; }
    public static string Index_IndexTypeName { get; }
    public static string Index_IndexTypeDesc { get; }
    public static string Index_BucketCountName { get; }
    public static string Index_BucketCountDesc { get; }
    public static string Index_IndexedXmlPathNameName { get; }
    public static string Index_IndexedXmlPathNameDesc { get; }
    public static string Index_IsMemoryOptimizedName { get; }
    public static string Index_IsMemoryOptimizedDesc { get; }
    public static string Index_CompressionDelayName { get; }
    public static string Index_CompressionDelayDesc { get; }
    public static string Rule_Name { get; }
    public static string Rule_Desc { get; }
    public static string Rule_CreateDateName { get; }
    public static string Rule_CreateDateDesc { get; }
    public static string Rule_DateLastModifiedName { get; }
    public static string Rule_DateLastModifiedDesc { get; }
    public static string Rule_IDName { get; }
    public static string Rule_IDDesc { get; }
    public static string LogFile_Name { get; }
    public static string LogFile_Desc { get; }
    public static string LogFile_FileNameName { get; }
    public static string LogFile_FileNameDesc { get; }
    public static string LogFile_GrowthName { get; }
    public static string LogFile_GrowthDesc { get; }
    public static string LogFile_GrowthTypeName { get; }
    public static string LogFile_GrowthTypeDesc { get; }
    public static string LogFile_IDName { get; }
    public static string LogFile_IDDesc { get; }
    public static string LogFile_IsOfflineName { get; }
    public static string LogFile_IsOfflineDesc { get; }
    public static string LogFile_IsReadOnlyName { get; }
    public static string LogFile_IsReadOnlyDesc { get; }
    public static string LogFile_IsReadOnlyMediaName { get; }
    public static string LogFile_IsReadOnlyMediaDesc { get; }
    public static string LogFile_IsSparseName { get; }
    public static string LogFile_IsSparseDesc { get; }
    public static string LogFile_MaxSizeName { get; }
    public static string LogFile_MaxSizeDesc { get; }
    public static string LogFile_NumberOfDiskReadsName { get; }
    public static string LogFile_NumberOfDiskReadsDesc { get; }
    public static string LogFile_NumberOfDiskWritesName { get; }
    public static string LogFile_NumberOfDiskWritesDesc { get; }
    public static string LogFile_BytesReadFromDiskName { get; }
    public static string LogFile_BytesReadFromDiskDesc { get; }
    public static string LogFile_BytesWrittenToDiskName { get; }
    public static string LogFile_BytesWrittenToDiskDesc { get; }
    public static string LogFile_SizeName { get; }
    public static string LogFile_SizeDesc { get; }
    public static string LogFile_UsedSpaceName { get; }
    public static string LogFile_UsedSpaceDesc { get; }
    public static string LogFile_VolumeFreeSpaceName { get; }
    public static string LogFile_VolumeFreeSpaceDesc { get; }
    public static string LinkedServer_Name { get; }
    public static string LinkedServer_Desc { get; }
    public static string LinkedServer_CatalogName { get; }
    public static string LinkedServer_CatalogDesc { get; }
    public static string LinkedServer_CollationCompatibleName { get; }
    public static string LinkedServer_CollationCompatibleDesc { get; }
    public static string LinkedServer_CollationNameName { get; }
    public static string LinkedServer_CollationNameDesc { get; }
    public static string LinkedServer_ConnectTimeoutName { get; }
    public static string LinkedServer_ConnectTimeoutDesc { get; }
    public static string LinkedServer_DataAccessName { get; }
    public static string LinkedServer_DataAccessDesc { get; }
    public static string LinkedServer_DataSourceName { get; }
    public static string LinkedServer_DataSourceDesc { get; }
    public static string LinkedServer_DateLastModifiedName { get; }
    public static string LinkedServer_DateLastModifiedDesc { get; }
    public static string LinkedServer_DistPublisherName { get; }
    public static string LinkedServer_DistPublisherDesc { get; }
    public static string LinkedServer_DistributorName { get; }
    public static string LinkedServer_DistributorDesc { get; }
    public static string LinkedServer_IDName { get; }
    public static string LinkedServer_IDDesc { get; }
    public static string LinkedServer_LazySchemaValidationName { get; }
    public static string LinkedServer_LazySchemaValidationDesc { get; }
    public static string LinkedServer_LocationName { get; }
    public static string LinkedServer_LocationDesc { get; }
    public static string LinkedServer_ProductNameName { get; }
    public static string LinkedServer_ProductNameDesc { get; }
    public static string LinkedServer_ProviderNameName { get; }
    public static string LinkedServer_ProviderNameDesc { get; }
    public static string LinkedServer_ProviderStringName { get; }
    public static string LinkedServer_ProviderStringDesc { get; }
    public static string LinkedServer_PublisherName { get; }
    public static string LinkedServer_PublisherDesc { get; }
    public static string LinkedServer_QueryTimeoutName { get; }
    public static string LinkedServer_QueryTimeoutDesc { get; }
    public static string LinkedServer_RpcName { get; }
    public static string LinkedServer_RpcDesc { get; }
    public static string LinkedServer_RpcOutName { get; }
    public static string LinkedServer_RpcOutDesc { get; }
    public static string LinkedServer_SubscriberName { get; }
    public static string LinkedServer_SubscriberDesc { get; }
    public static string LinkedServer_UseRemoteCollationName { get; }
    public static string LinkedServer_UseRemoteCollationDesc { get; }
    public static string LinkedServer_IsPromotionofDistributedTransactionsForRPCEnabledName { get; }
    public static string LinkedServer_IsPromotionofDistributedTransactionsForRPCEnabledDesc { get; }
    public static string DataFile_Name { get; }
    public static string DataFile_Desc { get; }
    public static string DataFile_AvailableSpaceName { get; }
    public static string DataFile_AvailableSpaceDesc { get; }
    public static string DataFile_FileNameName { get; }
    public static string DataFile_FileNameDesc { get; }
    public static string DataFile_GrowthName { get; }
    public static string DataFile_GrowthDesc { get; }
    public static string DataFile_GrowthTypeName { get; }
    public static string DataFile_GrowthTypeDesc { get; }
    public static string DataFile_IDName { get; }
    public static string DataFile_IDDesc { get; }
    public static string DataFile_IsOfflineName { get; }
    public static string DataFile_IsOfflineDesc { get; }
    public static string DataFile_IsPrimaryFileName { get; }
    public static string DataFile_IsPrimaryFileDesc { get; }
    public static string DataFile_IsReadOnlyName { get; }
    public static string DataFile_IsReadOnlyDesc { get; }
    public static string DataFile_IsReadOnlyMediaName { get; }
    public static string DataFile_IsReadOnlyMediaDesc { get; }
    public static string DataFile_IsSparseName { get; }
    public static string DataFile_IsSparseDesc { get; }
    public static string DataFile_MaxSizeName { get; }
    public static string DataFile_MaxSizeDesc { get; }
    public static string DataFile_NumberOfDiskReadsName { get; }
    public static string DataFile_NumberOfDiskReadsDesc { get; }
    public static string DataFile_NumberOfDiskWritesName { get; }
    public static string DataFile_NumberOfDiskWritesDesc { get; }
    public static string DataFile_BytesReadFromDiskName { get; }
    public static string DataFile_BytesReadFromDiskDesc { get; }
    public static string DataFile_BytesWrittenToDiskName { get; }
    public static string DataFile_BytesWrittenToDiskDesc { get; }
    public static string DataFile_SizeName { get; }
    public static string DataFile_SizeDesc { get; }
    public static string DataFile_UsedSpaceName { get; }
    public static string DataFile_UsedSpaceDesc { get; }
    public static string DataFile_VolumeFreeSpaceName { get; }
    public static string DataFile_VolumeFreeSpaceDesc { get; }
    public static string DatabaseRole_Name { get; }
    public static string DatabaseRole_Desc { get; }
    public static string DatabaseRole_CreateDateName { get; }
    public static string DatabaseRole_CreateDateDesc { get; }
    public static string DatabaseRole_DateLastModifiedName { get; }
    public static string DatabaseRole_DateLastModifiedDesc { get; }
    public static string DatabaseRole_IDName { get; }
    public static string DatabaseRole_IDDesc { get; }
    public static string DatabaseRole_IsFixedRoleName { get; }
    public static string DatabaseRole_IsFixedRoleDesc { get; }
    public static string DatabaseRole_OwnerName { get; }
    public static string DatabaseRole_OwnerDesc { get; }
    public static string ServerRole_Name { get; }
    public static string ServerRole_Desc { get; }
    public static string ServerRole_DateCreatedName { get; }
    public static string ServerRole_DateCreatedDesc { get; }
    public static string ServerRole_DateModifiedName { get; }
    public static string ServerRole_DateModifiedDesc { get; }
    public static string ServerRole_IDName { get; }
    public static string ServerRole_IDDesc { get; }
    public static string ServerRole_IsFixedRoleName { get; }
    public static string ServerRole_IsFixedRoleDesc { get; }
    public static string ServerRole_OwnerName { get; }
    public static string ServerRole_OwnerDesc { get; }
    public static string DatabaseDdlTrigger_Name { get; }
    public static string DatabaseDdlTrigger_Desc { get; }
    public static string DatabaseDdlTrigger_AnsiNullsStatusName { get; }
    public static string DatabaseDdlTrigger_AnsiNullsStatusDesc { get; }
    public static string DatabaseDdlTrigger_AssemblyNameName { get; }
    public static string DatabaseDdlTrigger_AssemblyNameDesc { get; }
    public static string DatabaseDdlTrigger_BodyStartIndexName { get; }
    public static string DatabaseDdlTrigger_BodyStartIndexDesc { get; }
    public static string DatabaseDdlTrigger_ClassNameName { get; }
    public static string DatabaseDdlTrigger_ClassNameDesc { get; }
    public static string DatabaseDdlTrigger_CreateDateName { get; }
    public static string DatabaseDdlTrigger_CreateDateDesc { get; }
    public static string DatabaseDdlTrigger_DateLastModifiedName { get; }
    public static string DatabaseDdlTrigger_DateLastModifiedDesc { get; }
    public static string DatabaseDdlTrigger_DdlTriggerEventsName { get; }
    public static string DatabaseDdlTrigger_DdlTriggerEventsDesc { get; }
    public static string DatabaseDdlTrigger_IDName { get; }
    public static string DatabaseDdlTrigger_IDDesc { get; }
    public static string DatabaseDdlTrigger_ImplementationTypeName { get; }
    public static string DatabaseDdlTrigger_ImplementationTypeDesc { get; }
    public static string DatabaseDdlTrigger_IsEnabledName { get; }
    public static string DatabaseDdlTrigger_IsEnabledDesc { get; }
    public static string DatabaseDdlTrigger_IsEncryptedName { get; }
    public static string DatabaseDdlTrigger_IsEncryptedDesc { get; }
    public static string DatabaseDdlTrigger_IsSystemObjectName { get; }
    public static string DatabaseDdlTrigger_IsSystemObjectDesc { get; }
    public static string DatabaseDdlTrigger_MethodNameName { get; }
    public static string DatabaseDdlTrigger_MethodNameDesc { get; }
    public static string DatabaseDdlTrigger_NotForReplicationName { get; }
    public static string DatabaseDdlTrigger_NotForReplicationDesc { get; }
    public static string DatabaseDdlTrigger_QuotedIdentifierStatusName { get; }
    public static string DatabaseDdlTrigger_QuotedIdentifierStatusDesc { get; }
    public static string DatabaseDdlTrigger_TextName { get; }
    public static string DatabaseDdlTrigger_TextDesc { get; }
    public static string DatabaseDdlTrigger_ExecutionContextName { get; }
    public static string DatabaseDdlTrigger_ExecutionContextDesc { get; }
    public static string DatabaseDdlTrigger_ExecutionContextUserName { get; }
    public static string DatabaseDdlTrigger_ExecutionContextUserDesc { get; }
    public static string Synonym_Name { get; }
    public static string Synonym_Desc { get; }
    public static string Synonym_BaseTypeName { get; }
    public static string Synonym_BaseTypeDesc { get; }
    public static string Synonym_BaseDatabaseName { get; }
    public static string Synonym_BaseDatabaseDesc { get; }
    public static string Synonym_BaseObjectName { get; }
    public static string Synonym_BaseObjectDesc { get; }
    public static string Synonym_BaseSchemaName { get; }
    public static string Synonym_BaseSchemaDesc { get; }
    public static string Synonym_BaseServerName { get; }
    public static string Synonym_BaseServerDesc { get; }
    public static string Synonym_CreateDateName { get; }
    public static string Synonym_CreateDateDesc { get; }
    public static string Synonym_DateLastModifiedName { get; }
    public static string Synonym_DateLastModifiedDesc { get; }
    public static string Synonym_EventsName { get; }
    public static string Synonym_EventsDesc { get; }
    public static string Synonym_IDName { get; }
    public static string Synonym_IDDesc { get; }
    public static string Synonym_OwnerName { get; }
    public static string Synonym_OwnerDesc { get; }
    public static string Sequence_Name { get; }
    public static string Sequence_Desc { get; }
    public static string Sequence_CacheSizeName { get; }
    public static string Sequence_CacheSizeDesc { get; }
    public static string Sequence_CreateDateName { get; }
    public static string Sequence_CreateDateDesc { get; }
    public static string Sequence_DataTypeName { get; }
    public static string Sequence_DataTypeDesc { get; }
    public static string Sequence_DateLastModifiedName { get; }
    public static string Sequence_DateLastModifiedDesc { get; }
    public static string Sequence_IDName { get; }
    public static string Sequence_IDDesc { get; }
    public static string Sequence_IsCycleEnabledName { get; }
    public static string Sequence_IsCycleEnabledDesc { get; }
    public static string Sequence_IsSchemaOwnedName { get; }
    public static string Sequence_IsSchemaOwnedDesc { get; }
    public static string Sequence_NumericPrecisionName { get; }
    public static string Sequence_NumericPrecisionDesc { get; }
    public static string Sequence_NumericScaleName { get; }
    public static string Sequence_NumericScaleDesc { get; }
    public static string Sequence_OwnerName { get; }
    public static string Sequence_OwnerDesc { get; }
    public static string Sequence_SequenceCacheTypeName { get; }
    public static string Sequence_SequenceCacheTypeDesc { get; }
    public static string Sequence_IncrementValueName { get; }
    public static string Sequence_IncrementValueDesc { get; }
    public static string Sequence_MinValueName { get; }
    public static string Sequence_MinValueDesc { get; }
    public static string Sequence_MaxValueName { get; }
    public static string Sequence_MaxValueDesc { get; }
    public static string Sequence_StartValueName { get; }
    public static string Sequence_StartValueDesc { get; }
    public static string Sequence_CurrentValueName { get; }
    public static string Sequence_CurrentValueDesc { get; }
    public static string Sequence_IsExhaustedName { get; }
    public static string Sequence_IsExhaustedDesc { get; }
    public static string SymmetricKey_Name { get; }
    public static string SymmetricKey_Desc { get; }
    public static string SymmetricKey_CreateDateName { get; }
    public static string SymmetricKey_CreateDateDesc { get; }
    public static string SymmetricKey_DateLastModifiedName { get; }
    public static string SymmetricKey_DateLastModifiedDesc { get; }
    public static string SymmetricKey_EncryptionAlgorithmName { get; }
    public static string SymmetricKey_EncryptionAlgorithmDesc { get; }
    public static string SymmetricKey_IDName { get; }
    public static string SymmetricKey_IDDesc { get; }
    public static string SymmetricKey_IsOpenName { get; }
    public static string SymmetricKey_IsOpenDesc { get; }
    public static string Synonym_IsSchemaOwnedName { get; }
    public static string Synonym_IsSchemaOwnedDesc { get; }
    public static string SymmetricKey_KeyGuidName { get; }
    public static string SymmetricKey_KeyGuidDesc { get; }
    public static string SymmetricKey_KeyLengthName { get; }
    public static string SymmetricKey_KeyLengthDesc { get; }
    public static string SymmetricKey_OwnerName { get; }
    public static string SymmetricKey_OwnerDesc { get; }
    public static string SymmetricKey_ProviderNameName { get; }
    public static string SymmetricKey_ProviderNameDesc { get; }
    public static string StoredProcedure_Name { get; }
    public static string StoredProcedure_Desc { get; }
    public static string StoredProcedure_AnsiNullsStatusName { get; }
    public static string StoredProcedure_AnsiNullsStatusDesc { get; }
    public static string StoredProcedure_AssemblyNameName { get; }
    public static string StoredProcedure_AssemblyNameDesc { get; }
    public static string StoredProcedure_ClassNameName { get; }
    public static string StoredProcedure_ClassNameDesc { get; }
    public static string StoredProcedure_CreateDateName { get; }
    public static string StoredProcedure_CreateDateDesc { get; }
    public static string StoredProcedure_DateLastModifiedName { get; }
    public static string StoredProcedure_DateLastModifiedDesc { get; }
    public static string StoredProcedure_ExecutionContextName { get; }
    public static string StoredProcedure_ExecutionContextDesc { get; }
    public static string StoredProcedure_ExecutionContextPrincipalName { get; }
    public static string StoredProcedure_ExecutionContextPrincipalDesc { get; }
    public static string StoredProcedure_ForReplicationName { get; }
    public static string StoredProcedure_ForReplicationDesc { get; }
    public static string StoredProcedure_IDName { get; }
    public static string StoredProcedure_IDDesc { get; }
    public static string StoredProcedure_ImplementationTypeName { get; }
    public static string StoredProcedure_ImplementationTypeDesc { get; }
    public static string StoredProcedure_IsEncryptedName { get; }
    public static string StoredProcedure_IsEncryptedDesc { get; }
    public static string StoredProcedure_IsSystemObjectName { get; }
    public static string StoredProcedure_IsSystemObjectDesc { get; }
    public static string StoredProcedure_IsSchemaOwnedName { get; }
    public static string StoredProcedure_IsSchemaOwnedDesc { get; }
    public static string StoredProcedure_MethodNameName { get; }
    public static string StoredProcedure_MethodNameDesc { get; }
    public static string StoredProcedure_OwnerName { get; }
    public static string StoredProcedure_OwnerDesc { get; }
    public static string StoredProcedure_QuotedIdentifierStatusName { get; }
    public static string StoredProcedure_QuotedIdentifierStatusDesc { get; }
    public static string StoredProcedure_RecompileName { get; }
    public static string StoredProcedure_RecompileDesc { get; }
    public static string StoredProcedure_StartupName { get; }
    public static string StoredProcedure_StartupDesc { get; }
    public static string StoredProcedure_TextBodyName { get; }
    public static string StoredProcedure_TextBodyDesc { get; }
    public static string StoredProcedure_TextHeaderName { get; }
    public static string StoredProcedure_TextHeaderDesc { get; }
    public static string StoredProcedure_TextModeName { get; }
    public static string StoredProcedure_TextModeDesc { get; }
    public static string StoredProcedure_IsNativelyCompiledName { get; }
    public static string StoredProcedure_IsNativelyCompiledDesc { get; }
    public static string StoredProcedure_IsSchemaBoundName { get; }
    public static string StoredProcedure_IsSchemaBoundDesc { get; }
    public static string ServerDdlTrigger_Name { get; }
    public static string ServerDdlTrigger_Desc { get; }
    public static string ServerDdlTrigger_AnsiNullsStatusName { get; }
    public static string ServerDdlTrigger_AnsiNullsStatusDesc { get; }
    public static string ServerDdlTrigger_AssemblyNameName { get; }
    public static string ServerDdlTrigger_AssemblyNameDesc { get; }
    public static string ServerDdlTrigger_BodyStartIndexName { get; }
    public static string ServerDdlTrigger_BodyStartIndexDesc { get; }
    public static string ServerDdlTrigger_ClassNameName { get; }
    public static string ServerDdlTrigger_ClassNameDesc { get; }
    public static string ServerDdlTrigger_CreateDateName { get; }
    public static string ServerDdlTrigger_CreateDateDesc { get; }
    public static string ServerDdlTrigger_DateLastModifiedName { get; }
    public static string ServerDdlTrigger_DateLastModifiedDesc { get; }
    public static string ServerDdlTrigger_DdlTriggerEventsName { get; }
    public static string ServerDdlTrigger_DdlTriggerEventsDesc { get; }
    public static string ServerDdlTrigger_IDName { get; }
    public static string ServerDdlTrigger_IDDesc { get; }
    public static string ServerDdlTrigger_ImplementationTypeName { get; }
    public static string ServerDdlTrigger_ImplementationTypeDesc { get; }
    public static string ServerDdlTrigger_IsEnabledName { get; }
    public static string ServerDdlTrigger_IsEnabledDesc { get; }
    public static string ServerDdlTrigger_IsEncryptedName { get; }
    public static string ServerDdlTrigger_IsEncryptedDesc { get; }
    public static string ServerDdlTrigger_IsSystemObjectName { get; }
    public static string ServerDdlTrigger_IsSystemObjectDesc { get; }
    public static string ServerDdlTrigger_MethodNameName { get; }
    public static string ServerDdlTrigger_MethodNameDesc { get; }
    public static string ServerDdlTrigger_QuotedIdentifierStatusName { get; }
    public static string ServerDdlTrigger_QuotedIdentifierStatusDesc { get; }
    public static string ServerDdlTrigger_TextName { get; }
    public static string ServerDdlTrigger_TextDesc { get; }
    public static string ServerDdlTrigger_ExecutionContextName { get; }
    public static string ServerDdlTrigger_ExecutionContextDesc { get; }
    public static string ServerDdlTrigger_ExecutionContextLoginName { get; }
    public static string ServerDdlTrigger_ExecutionContextLoginDesc { get; }
    public static string Trigger_Name { get; }
    public static string Trigger_Desc { get; }
    public static string Trigger_AnsiNullsStatusName { get; }
    public static string Trigger_AnsiNullsStatusDesc { get; }
    public static string Trigger_AssemblyNameName { get; }
    public static string Trigger_AssemblyNameDesc { get; }
    public static string Trigger_ClassNameName { get; }
    public static string Trigger_ClassNameDesc { get; }
    public static string Trigger_CreateDateName { get; }
    public static string Trigger_CreateDateDesc { get; }
    public static string Trigger_DateLastModifiedName { get; }
    public static string Trigger_DateLastModifiedDesc { get; }
    public static string Trigger_DeleteName { get; }
    public static string Trigger_DeleteDesc { get; }
    public static string Trigger_DeleteOrderName { get; }
    public static string Trigger_DeleteOrderDesc { get; }
    public static string Trigger_ExecutionContextName { get; }
    public static string Trigger_ExecutionContextDesc { get; }
    public static string Trigger_ExecutionContextPrincipalName { get; }
    public static string Trigger_ExecutionContextPrincipalDesc { get; }
    public static string Trigger_IDName { get; }
    public static string Trigger_IDDesc { get; }
    public static string Trigger_ImplementationTypeName { get; }
    public static string Trigger_ImplementationTypeDesc { get; }
    public static string Trigger_InsertName { get; }
    public static string Trigger_InsertDesc { get; }
    public static string Trigger_InsertOrderName { get; }
    public static string Trigger_InsertOrderDesc { get; }
    public static string Trigger_InsteadOfName { get; }
    public static string Trigger_InsteadOfDesc { get; }
    public static string Trigger_IsEnabledName { get; }
    public static string Trigger_IsEnabledDesc { get; }
    public static string Trigger_IsEncryptedName { get; }
    public static string Trigger_IsEncryptedDesc { get; }
    public static string Trigger_IsSystemObjectName { get; }
    public static string Trigger_IsSystemObjectDesc { get; }
    public static string Trigger_MethodNameName { get; }
    public static string Trigger_MethodNameDesc { get; }
    public static string Trigger_NotForReplicationName { get; }
    public static string Trigger_NotForReplicationDesc { get; }
    public static string Trigger_QuotedIdentifierStatusName { get; }
    public static string Trigger_QuotedIdentifierStatusDesc { get; }
    public static string Trigger_TextBodyName { get; }
    public static string Trigger_TextBodyDesc { get; }
    public static string Trigger_TextHeaderName { get; }
    public static string Trigger_TextHeaderDesc { get; }
    public static string Trigger_TextModeName { get; }
    public static string Trigger_TextModeDesc { get; }
    public static string Trigger_UpdateName { get; }
    public static string Trigger_UpdateDesc { get; }
    public static string Trigger_UpdateOrderName { get; }
    public static string Trigger_UpdateOrderDesc { get; }
    public static string Trigger_IsNativelyCompiledName { get; }
    public static string Trigger_IsNativelyCompiledDesc { get; }
    public static string Trigger_IsSchemaBoundName { get; }
    public static string Trigger_IsSchemaBoundDesc { get; }
    public static string Table_Name { get; }
    public static string Table_Desc { get; }
    public static string Table_HasCompressedPartitionsName { get; }
    public static string Table_HasCompressedPartitionsDesc { get; }
    public static string Table_HasXmlCompressedPartitionsName { get; }
    public static string Table_HasXmlCompressedPartitionsDesc { get; }
    public static string Table_IsVarDecimalStorageFormatEnabledName { get; }
    public static string Table_IsVarDecimalStorageFormatEnabledDesc { get; }
    public static string Table_AnsiNulAnsiNullsStatusName { get; }
    public static string Table_AnsiNullsStatusDesc { get; }
    public static string Table_ChangeTrackingEnabledName { get; }
    public static string Table_ChangeTrackingEnabledDesc { get; }
    public static string Table_CreateDateName { get; }
    public static string Table_CreateDateDesc { get; }
    public static string Table_DataSpaceUsedName { get; }
    public static string Table_DataSpaceUsedDesc { get; }
    public static string Table_DataRetentionEnabledName { get; }
    public static string Table_DataRetentionEnabledDesc { get; }
    public static string Table_DataRetentionPeriodName { get; }
    public static string Table_DataRetentionPeriodDesc { get; }
    public static string Table_DataRetentionPeriodUnitName { get; }
    public static string Table_DataRetentionPeriodUnitDesc { get; }
    public static string Table_DataRetentionFilterColumnName { get; }
    public static string Table_DataRetentionFilterColumnNameDesc { get; }
    public static string Table_DateLastModifiedName { get; }
    public static string Table_DateLastModifiedDesc { get; }
    public static string Table_EventsName { get; }
    public static string Table_EventsDesc { get; }
    public static string Table_ExternalTableDistributionName { get; }
    public static string Table_ExternalTableDistributionDesc { get; }
    public static string Table_FakeSystemTableName { get; }
    public static string Table_FakeSystemTableDesc { get; }
    public static string Table_FileGroupName { get; }
    public static string Table_FileGroupDesc { get; }
    public static string Table_FileStreamFileGroupName { get; }
    public static string Table_FileStreamFileGroupDesc { get; }
    public static string Table_FileStreamPartitionSchemeName { get; }
    public static string Table_FileStreamPartitionSchemeDesc { get; }
    public static string Table_IsFileTableName { get; }
    public static string Table_IsFileTableDesc { get; }
    public static string Table_FileTableDirectoryNameName { get; }
    public static string Table_FileTableDirectoryNameDesc { get; }
    public static string Table_FileTableNamespaceEnabledName { get; }
    public static string Table_FileTableNamespaceEnabledDesc { get; }
    public static string Table_FileTableNameColumnCollationName { get; }
    public static string Table_FileTableNameColumnCollationDesc { get; }
    public static string Table_HasAfterTriggerName { get; }
    public static string Table_HasAfterTriggerDesc { get; }
    public static string Table_HasClassifiedColumnName { get; }
    public static string Table_HasClassifiedColumnDesc { get; }
    public static string Table_HasClusteredIndexName { get; }
    public static string Table_HasClusteredIndexDesc { get; }
    public static string Table_HasDeleteTriggerName { get; }
    public static string Table_HasDeleteTriggerDesc { get; }
    public static string Table_HasHeapIndexName { get; }
    public static string Table_HasHeapIndexDesc { get; }
    public static string Table_HasIndexName { get; }
    public static string Table_HasIndexDesc { get; }
    public static string Table_HasInsertTriggerName { get; }
    public static string Table_HasInsertTriggerDesc { get; }
    public static string Table_HasInsteadOfTriggerName { get; }
    public static string Table_HasInsteadOfTriggerDesc { get; }
    public static string Table_HasNonClusteredColumnStoreIndexName { get; }
    public static string Table_HasNonClusteredColumnStoreIndexDesc { get; }
    public static string Table_HasNonClusteredIndexName { get; }
    public static string Table_HasNonClusteredIndexDesc { get; }
    public static string Table_HasPrimaryClusteredIndexName { get; }
    public static string Table_HasPrimaryClusteredIndexDesc { get; }
    public static string Table_HasSparseColumnName { get; }
    public static string Table_HasSparseColumnDesc { get; }
    public static string Table_HasSpatialDataName { get; }
    public static string Table_HasSpatialDataDesc { get; }
    public static string Table_HasUpdateTriggerName { get; }
    public static string Table_HasUpdateTriggerDesc { get; }
    public static string Table_HasXmlDataName { get; }
    public static string Table_HasXmlDataDesc { get; }
    public static string Table_HasXmlIndexName { get; }
    public static string Table_HasXmlIndexDesc { get; }
    public static string Table_IDName { get; }
    public static string Table_IDDesc { get; }
    public static string Table_IndexSpaceUsedName { get; }
    public static string Table_IndexSpaceUsedDesc { get; }
    public static string Table_IsDroppedLedgerTableName { get; }
    public static string Table_IsDroppedLedgerTableDesc { get; }
    public static string Table_IsIndexableName { get; }
    public static string Table_IsIndexableDesc { get; }
    public static string Table_IsPartitionedName { get; }
    public static string Table_IsPartitionedDesc { get; }
    public static string Table_IsSystemObjectName { get; }
    public static string Table_IsSystemObjectDesc { get; }
    public static string Table_IsSchemaOwnedName { get; }
    public static string Table_IsSchemaOwnedDesc { get; }
    public static string Table_OwnerName { get; }
    public static string Table_OwnerDesc { get; }
    public static string Table_PartitionSchemeName { get; }
    public static string Table_PartitionSchemeDesc { get; }
    public static string Table_QuotedIdentifierStatusName { get; }
    public static string Table_QuotedIdentifierStatusDesc { get; }
    public static string Table_RemoteDataArchiveEnabledName { get; }
    public static string Table_RemoteDataArchiveEnabledDesc { get; }
    public static string Table_RemoteDataArchiveMigrationEnabledName { get; }
    public static string Table_RemoteDataArchiveMigrationEnabledDesc { get; }
    public static string Table_RemoteDataArchiveDataMigrationStateName { get; }
    public static string Table_RemoteDataArchiveDataMigrationStateDesc { get; }
    public static string Table_RemoteDataArchiveFilterPredicateName { get; }
    public static string Table_RemoteDataArchiveFilterPredicateDesc { get; }
    public static string Table_RemoteObjectNameName { get; }
    public static string Table_RemoteObjectNameDesc { get; }
    public static string Table_RemoteTableNameName { get; }
    public static string Table_RemoteTableNameDesc { get; }
    public static string Table_RemoteDataArchiveMigratedRowCountName { get; }
    public static string Table_RemoteDataArchiveMigratedRowCountDesc { get; }
    public static string Table_RemoteSchemaNameName { get; }
    public static string Table_RemoteSchemaNameDesc { get; }
    public static string Table_RemoteTableSizeName { get; }
    public static string Table_RemoteTableSizeDesc { get; }
    public static string Table_RemoteTableProvisionedName { get; }
    public static string Table_RemoteTableProvisionedDesc { get; }
    public static string Table_ReplicatedName { get; }
    public static string Table_ReplicatedDesc { get; }
    public static string Table_LockEscalationName { get; }
    public static string Table_LockEscalationDesc { get; }
    public static string Table_RowCountName { get; }
    public static string Table_RowCountDesc { get; }
    public static string Table_RowCountAsDoubleName { get; }
    public static string Table_RowCountAsDoubleDesc { get; }
    public static string Table_ShardingColumnNameName { get; }
    public static string Table_ShardingColumnNameDesc { get; }
    public static string Table_TextFileGroupName { get; }
    public static string Table_TextFileGroupDesc { get; }
    public static string Table_TrackColumnsUpdatedEnabledName { get; }
    public static string Table_TrackColumnsUpdatedEnabledDesc { get; }
    public static string Table_HasClusteredColumnStoreIndexName { get; }
    public static string Table_HasClusteredColumnStoreIndexDesc { get; }
    public static string Table_IsExternalName { get; }
    public static string Table_IsExternalDesc { get; }
    public static string Table_DataSourceNameName { get; }
    public static string Table_DataSourceNameDesc { get; }
    public static string Table_FileFormatNameName { get; }
    public static string Table_FileFormatNameDesc { get; }
    public static string Table_LocationName { get; }
    public static string Table_LocationDesc { get; }
    public static string Table_RejectTypeName { get; }
    public static string Table_RejectTypeDesc { get; }
    public static string Table_RejectValueName { get; }
    public static string Table_RejectValueDesc { get; }
    public static string Table_RejectSampleValueName { get; }
    public static string Table_RejectSampleValueDesc { get; }
    public static string Table_HasSystemTimePeriodName { get; }
    public static string Table_HasSystemTimePeriodDesc { get; }
    public static string Table_HistoryTableIDName { get; }
    public static string Table_HistoryTableIDDesc { get; }
    public static string Table_HistoryTableNameName { get; }
    public static string Table_HistoryTableNameDesc { get; }
    public static string Table_HistoryTableSchemaName { get; }
    public static string Table_HistoryTableSchemaDesc { get; }
    public static string Table_IsLedgerName { get; }
    public static string Table_IsLedgerDesc { get; }
    public static string Table_IsSystemVersionedName { get; }
    public static string Table_IsSystemVersionedDesc { get; }
    public static string Table_LedgerTypeName { get; }
    public static string Table_LedgerTypeDesc { get; }
    public static string Table_LedgerViewOperationTypeColumnNameName { get; }
    public static string Table_LedgerViewOperationTypeColumnNameDesc { get; }
    public static string Table_LedgerViewOperationTypeDescColumnNameName { get; }
    public static string Table_LedgerViewOperationTypeDescColumnNameDesc { get; }
    public static string Table_LedgerViewSequenceNumberColumnNameName { get; }
    public static string Table_LedgerViewSequenceNumberColumnNameDesc { get; }
    public static string Table_LedgerViewTransactionIdColumnNameName { get; }
    public static string Table_LedgerViewTransactionIdColumnNameDesc { get; }
    public static string Table_LedgerViewNameName { get; }
    public static string Table_LedgerViewNameDesc { get; }
    public static string Table_LedgerViewSchemaName { get; }
    public static string Table_LedgerViewSchemaDesc { get; }
    public static string Table_SystemTimePeriodEndColumnName { get; }
    public static string Table_SystemTimePeriodEndColumnDesc { get; }
    public static string Table_SystemTimePeriodStartColumnName { get; }
    public static string Table_SystemTimePeriodStartColumnDesc { get; }
    public static string Table_TemporalTypeName { get; }
    public static string Table_TemporalTypeDesc { get; }
    public static string Table_IsNodeName { get; }
    public static string Table_IsNodeDesc { get; }
    public static string Table_IsEdgeName { get; }
    public static string Table_IsEdgeDesc { get; }
    public static string JobServer_AgentDomainGroupName { get; }
    public static string JobServer_AgentDomainGroupDesc { get; }
    public static string JobServer_ServiceStartModeName { get; }
    public static string JobServer_ServiceStartModeDesc { get; }
    public static string JobServer_ServiceAccountName { get; }
    public static string JobServer_ServiceAccountDesc { get; }
    public static string Server_Name { get; }
    public static string Server_Desc { get; }
    public static string IServerSelection_Name { get; }
    public static string IServerSelection_Desc { get; }
    public static string IServerInformation_Name { get; }
    public static string IServerInformation_Desc { get; }
    public static string IServerSettings_Name { get; }
    public static string IServerSettings_Desc { get; }
    public static string IServerSetupFacet_Name { get; }
    public static string IServerSetupFacet_Desc { get; }
    public static string IServerSetupFacet_ServiceInstanceIdSuffixName { get; }
    public static string IServerSetupFacet_ServiceInstanceIdSuffixDesc { get; }
    public static string IServerSetupFacet_WindowsUsersAndGroupsInSysadminRoleName { get; }
    public static string IServerSetupFacet_WindowsUsersAndGroupsInSysadminRoleDesc { get; }
    public static string IServerSetupFacet_TempdbPrimaryFilePathName { get; }
    public static string IServerSetupFacet_TempdbPrimaryFilePathDesc { get; }
    public static string IServerSetupFacet_TempdbLogPathName { get; }
    public static string IServerSetupFacet_TempdbLogPathDesc { get; }
    public static string Server_ServiceAccountName { get; }
    public static string Server_ServiceAccountDesc { get; }
    public static string Server_ServiceInstanceIdName { get; }
    public static string Server_ServiceInstanceIdDesc { get; }
    public static string Server_BrowserStartModeName { get; }
    public static string Server_BrowserStartModeDesc { get; }
    public static string Server_BrowserServiceAccountName { get; }
    public static string Server_BrowserServiceAccountDesc { get; }
    public static string Server_NamedPipesEnabledName { get; }
    public static string Server_NamedPipesEnabledDesc { get; }
    public static string Server_TcpIpProtocolEnabledName { get; }
    public static string Server_TcpEnabledDesc { get; }
    public static string Server_InstallSharedDirectoryName { get; }
    public static string Server_InstallSharedDirectoryDesc { get; }
    public static string Server_ServiceNameName { get; }
    public static string Server_ServiceNameDesc { get; }
    public static string Server_ServiceStartModeName { get; }
    public static string Server_ServiceStartModeDesc { get; }
    public static string Server_InstanceIdName { get; }
    public static string Server_InstanceIdDesc { get; }
    public static string SServer_FilestreamLevelName { get; }
    public static string Server_FilestreamLevelDesc { get; }
    public static string Server_FilestreamShareNameName { get; }
    public static string Server_FilestreamShareNameDesc { get; }
    public static string Server_SqlDomainGroupName { get; }
    public static string Server_SqlDomainGroupDesc { get; }
    public static string Server_InstallDataDirectoryName { get; }
    public static string Server_InstallDataDirectoryDesc { get; }
    public static string Server_InstanceNameName { get; }
    public static string Server_InstanceNameDesc { get; }
    public static string Server_CollationName { get; }
    public static string Server_CollationDesc { get; }
    public static string Server_EditionName { get; }
    public static string Server_EditionDesc { get; }
    public static string Server_ErrorLogSizeKbName { get; }
    public static string Server_ErrorLogSizeKbDesc { get; }
    public static string Server_IsCaseSensitiveName { get; }
    public static string Server_IsCaseSensitiveDesc { get; }
    public static string Server_IsClusteredName { get; }
    public static string Server_IsClusteredDesc { get; }
    public static string Server_IsHadrEnabledName { get; }
    public static string Server_IsHadrEnabledDesc { get; }
    public static string Server_HadrManagerStatusName { get; }
    public static string Server_HadrManagerStatusDesc { get; }
    public static string Server_ClusterNameName { get; }
    public static string Server_ClusterNameDesc { get; }
    public static string Server_ClusterQuorumTypeName { get; }
    public static string Server_ClusterQuorumTypeDesc { get; }
    public static string Server_ClusterQuorumStateName { get; }
    public static string Server_ClusterQuorumStateDesc { get; }
    public static string Server_IsPolyBaseInstalledName { get; }
    public static string Server_IsPolyBaseInstalledDesc { get; }
    public static string Server_IsJsonDataTypeEnabledName { get; }
    public static string Server_IsJsonDataTypeEnabledDesc { get; }
    public static string Server_IsXTPSupportedName { get; }
    public static string Server_IsXTPSupportedDesc { get; }
    public static string Server_IsSingleUserName { get; }
    public static string Server_IsSingleUserDesc { get; }
    public static string Server_LanguageName { get; }
    public static string Server_LanguageDesc { get; }
    public static string Server_MasterDBLogPathName { get; }
    public static string Server_MasterDBLogPathDesc { get; }
    public static string Server_MasterDBPathName { get; }
    public static string Server_MasterDBPathDesc { get; }
    public static string Server_MaxPrecisionName { get; }
    public static string Server_MaxPrecisionDesc { get; }
    public static string Server_NetNameName { get; }
    public static string Server_NetNameDesc { get; }
    public static string Server_OSVersionName { get; }
    public static string Server_OSVersionDesc { get; }
    public static string Server_PhysicalMemoryName { get; }
    public static string Server_PhysicalMemoryDesc { get; }
    public static string Server_PhysicalMemoryUsageInKBName { get; }
    public static string Server_PhysicalMemoryUsageInKBDesc { get; }
    public static string Server_ProcessorUsageName { get; }
    public static string Server_ProcessorUsageDesc { get; }
    public static string Server_PlatformName { get; }
    public static string Server_PlatformDesc { get; }
    public static string Server_ProcessorsName { get; }
    public static string Server_ProcessorsDesc { get; }
    public static string Server_ProductName { get; }
    public static string Server_ProductDesc { get; }
    public static string Server_ProductLevelName { get; }
    public static string Server_ProductLevelDesc { get; }
    public static string Server_RootDirectoryName { get; }
    public static string Server_RootDirectoryDesc { get; }
    public static string Server_VersionName { get; }
    public static string Server_VersionDesc { get; }
    public static string Server_VersionStringName { get; }
    public static string Server_VersionStringDesc { get; }
    public static string Server_AuditLevelName { get; }
    public static string Server_AuditLevelDesc { get; }
    public static string Server_BackupDirectoryName { get; }
    public static string Server_BackupDirectoryDesc { get; }
    public static string Server_DefaultFileName { get; }
    public static string Server_DefaultFileDesc { get; }
    public static string Server_DefaultLogName { get; }
    public static string Server_DefaultLogDesc { get; }
    public static string Server_ImpersonateClientName { get; }
    public static string Server_ImpersonateClientDesc { get; }
    public static string Server_LoginModeName { get; }
    public static string Server_LoginModeDesc { get; }
    public static string Server_MailProfileName { get; }
    public static string Server_MailProfileDesc { get; }
    public static string Server_NumberOfLogFilesName { get; }
    public static string Server_NumberOfLogFilesDesc { get; }
    public static string Server_BuildClrVersionStringName { get; }
    public static string Server_BuildClrVersionStringDesc { get; }
    public static string Server_BuildNumberName { get; }
    public static string Server_BuildNumberDesc { get; }
    public static string Server_CollationIDName { get; }
    public static string Server_CollationIDDesc { get; }
    public static string Server_ComparisonStyleName { get; }
    public static string Server_ComparisonStyleDesc { get; }
    public static string Server_ComputerNamePhysicalNetBIOSName { get; }
    public static string Server_ComputerNamePhysicalNetBIOSDesc { get; }
    public static string Server_EngineEditionName { get; }
    public static string Server_EngineEditionDesc { get; }
    public static string Server_ErrorLogPathName { get; }
    public static string Server_ErrorLogPathDesc { get; }
    public static string Server_HardwareGenerationName { get; }
    public static string Server_HardwareGenerationDesc { get; }
    public static string Server_HostDistributionName { get; }
    public static string Server_HostDistributionDesc { get; }
    public static string Server_HostPlatformName { get; }
    public static string Server_HostPlatformDesc { get; }
    public static string Server_HostReleaseName { get; }
    public static string Server_HostReleaseDesc { get; }
    public static string Server_HostServicePackLevelName { get; }
    public static string Server_HostServicePackLevelDesc { get; }
    public static string Server_HostSkuName { get; }
    public static string Server_HostSkuDesc { get; }
    public static string Server_IsFullTextInstalledName { get; }
    public static string Server_IsFullTextInstalledDesc { get; }
    public static string Server_PathSeparatorName { get; }
    public static string Server_PathSeparatorDesc { get; }
    public static string Server_PerfMonModeName { get; }
    public static string Server_PerfMonModeDesc { get; }
    public static string Server_ProductUpdateLevelName { get; }
    public static string Server_ProductUpdateLevelDesc { get; }
    public static string Server_ResourceLastUpdateDateTimeName { get; }
    public static string Server_ResourceLastUpdateDateTimeDesc { get; }
    public static string Server_ResourceVersionStringName { get; }
    public static string Server_ResourceVersionStringDesc { get; }
    public static string Server_ReservedStorageSizeMBName { get; }
    public static string Server_ReservedStorageSizeMBDesc { get; }
    public static string Server_ServiceTierName { get; }
    public static string Server_ServiceTierDesc { get; }
    public static string Server_SqlCharSetName { get; }
    public static string Server_SqlCharSetDesc { get; }
    public static string Server_SqlCharSetNameName { get; }
    public static string Server_SqlCharSetNameDesc { get; }
    public static string Server_SqlSortOrderName { get; }
    public static string Server_SqlSortOrderDesc { get; }
    public static string Server_SqlSortOrderNameName { get; }
    public static string Server_SqlSortOrderNameDesc { get; }
    public static string Server_TapeLoadWaitTimeName { get; }
    public static string Server_TapeLoadWaitTimeDesc { get; }
    public static string Server_UsedStorageSizeMBName { get; }
    public static string Server_UsedStorageSizeMBDesc { get; }
    public static string Server_VersionMajorName { get; }
    public static string Server_VersionMajorDesc { get; }
    public static string Server_VersionMinorName { get; }
    public static string Server_VersionMinorDesc { get; }
    public static string Server_ServerTypeName { get; }
    public static string Server_ServerTypeDesc { get; }
    public static string Server_StatusName { get; }
    public static string Server_StatusDesc { get; }
    public static string Schema_Name { get; }
    public static string Schema_Desc { get; }
    public static string Schema_IDName { get; }
    public static string Schema_IDDesc { get; }
    public static string Schema_IsSystemObjectName { get; }
    public static string Schema_IsSystemObjectDesc { get; }
    public static string Schema_OwnerName { get; }
    public static string Schema_OwnerDesc { get; }
    public static string FileGroup_Name { get; }
    public static string FileGroup_Desc { get; }
    public static string FileGroup_IDName { get; }
    public static string FileGroup_IDDesc { get; }
    public static string FileGroup_IsDefaultName { get; }
    public static string FileGroup_IsDefaultDesc { get; }
    public static string FileGroup_ReadOnlyName { get; }
    public static string FileGroup_ReadOnlyDesc { get; }
    public static string FileGroup_AutogrowAllFilesName { get; }
    public static string FileGroup_AutogrowAllFilesDesc { get; }
    public static string FileGroup_SizeName { get; }
    public static string FileGroup_SizeDesc { get; }
    public static string FileGroup_IsFileStreamName { get; }
    public static string FileGroup_IsFileStreamDesc { get; }
    public static string FileGroup_FileGroupTypeName { get; }
    public static string FileGroup_FileGroupTypeDesc { get; }
    public static string IServerConfigurationFacet_Name { get; }
    public static string IServerConfigurationFacet_Desc { get; }
    public static string IServerConfigurationFacet_ContainmentEnabledName { get; }
    public static string IServerConfigurationFacet_ContainmentEnabledDesc { get; }
    public static string IServerConfigurationFacet_AdHocRemoteQueriesEnabledName { get; }
    public static string IServerConfigurationFacet_AdHocRemoteQueriesEnabledDesc { get; }
    public static string IServerConfigurationFacet_AffinityMaskName { get; }
    public static string IServerConfigurationFacet_AffinityMaskDesc { get; }
    public static string IServerConfigurationFacet_Affinity64MaskName { get; }
    public static string IServerConfigurationFacet_Affinity64MaskDesc { get; }
    public static string IServerConfigurationFacet_AffinityIOMaskName { get; }
    public static string IServerConfigurationFacet_AffinityIOMaskDesc { get; }
    public static string IServerConfigurationFacet_Affinity64IOMaskName { get; }
    public static string IServerConfigurationFacet_Affinity64IOMaskDesc { get; }
    public static string IServerConfigurationFacet_AgentXPsEnabledName { get; }
    public static string IServerConfigurationFacet_AgentXPsEnabledDesc { get; }
    public static string IServerConfigurationFacet_AllowUpdatesName { get; }
    public static string IServerConfigurationFacet_AllowUpdatesDesc { get; }
    public static string IServerConfigurationFacet_AweEnabledName { get; }
    public static string IServerConfigurationFacet_AweEnabledDesc { get; }
    public static string IServerConfigurationFacet_BlockedProcessThresholdName { get; }
    public static string IServerConfigurationFacet_BlockedProcessThresholdDesc { get; }
    public static string IServerConfigurationFacet_C2AuditTracingEnabledName { get; }
    public static string IServerConfigurationFacet_C2AuditTracingEnabledDesc { get; }
    public static string IServerConfigurationFacet_ClrIntegrationEnabledName { get; }
    public static string IServerConfigurationFacet_ClrIntegrationEnabledDesc { get; }
    public static string IServerConfigurationFacet_CommonCriteriaComplianceEnabledName { get; }
    public static string IServerConfigurationFacet_CommonCriteriaComplianceEnabledDesc { get; }
    public static string IServerConfigurationFacet_CostThresholdForParallelismName { get; }
    public static string IServerConfigurationFacet_CostThresholdForParallelismDesc { get; }
    public static string IServerConfigurationFacet_CrossDBOwnershipChainingEnabledName { get; }
    public static string IServerConfigurationFacet_CrossDBOwnershipChainingEnabledDesc { get; }
    public static string IServerConfigurationFacet_CursorThresholdName { get; }
    public static string IServerConfigurationFacet_CursorThresholdDesc { get; }
    public static string IServerConfigurationFacet_DatabaseMailEnabledName { get; }
    public static string IServerConfigurationFacet_DatabaseMailEnabledDesc { get; }
    public static string IServerConfigurationFacet_DefaultTraceEnabledName { get; }
    public static string IServerConfigurationFacet_DefaultTraceEnabledDesc { get; }
    public static string IServerConfigurationFacet_DefaultFullTextLanguageName { get; }
    public static string IServerConfigurationFacet_DefaultFullTextLanguageDesc { get; }
    public static string IServerConfigurationFacet_DefaultLanguageName { get; }
    public static string IServerConfigurationFacet_DefaultLanguageDesc { get; }
    public static string IServerConfigurationFacet_DisallowResultsFromTriggersName { get; }
    public static string IServerConfigurationFacet_DisallowResultsFromTriggersDesc { get; }
    public static string IServerConfigurationFacet_FilestreamAccessLevelName { get; }
    public static string IServerConfigurationFacet_FilestreamAccessLevelDesc { get; }
    public static string IServerConfigurationFacet_FillFactorName { get; }
    public static string IServerConfigurationFacet_FillFactorDesc { get; }
    public static string IServerConfigurationFacet_FullTextCrawlBandwidthMinName { get; }
    public static string IServerConfigurationFacet_FullTextCrawlBandwidthMinDesc { get; }
    public static string IServerConfigurationFacet_FullTextCrawlBandwidthMaxName { get; }
    public static string IServerConfigurationFacet_FullTextCrawlBandwidthMaxDesc { get; }
    public static string IServerConfigurationFacet_FullTextNotifyBandwidthMinName { get; }
    public static string IServerConfigurationFacet_FullTextNotifyBandwidthMinDesc { get; }
    public static string IServerConfigurationFacet_FullTextNotifyBandwidthMaxName { get; }
    public static string IServerConfigurationFacet_FullTextNotifyBandwidthMaxDesc { get; }
    public static string IServerConfigurationFacet_FullTextCrawlRangeMaxName { get; }
    public static string IServerConfigurationFacet_FullTextCrawlRangeMaxDesc { get; }
    public static string IServerConfigurationFacet_InDoubtTransactionResolutionName { get; }
    public static string IServerConfigurationFacet_InDoubtTransactionResolutionDesc { get; }
    public static string IServerConfigurationFacet_IndexCreateMemoryName { get; }
    public static string IServerConfigurationFacet_IndexCreateMemoryDesc { get; }
    public static string IServerConfigurationFacet_LightweightPoolingEnabledName { get; }
    public static string IServerConfigurationFacet_LightweightPoolingEnabledDesc { get; }
    public static string IServerConfigurationFacet_DynamicLocksName { get; }
    public static string IServerConfigurationFacet_DynamicLocksDesc { get; }
    public static string IServerConfigurationFacet_MaxDegreeOfParallelismName { get; }
    public static string IServerConfigurationFacet_MaxDegreeOfParallelismDesc { get; }
    public static string IServerConfigurationFacet_MaxServerMemoryName { get; }
    public static string IServerConfigurationFacet_MaxServerMemoryDesc { get; }
    public static string IServerConfigurationFacet_MaxWorkerThreadsName { get; }
    public static string IServerConfigurationFacet_MaxWorkerThreadsDesc { get; }
    public static string IServerConfigurationFacet_MediaRetentionName { get; }
    public static string IServerConfigurationFacet_MediaRetentionDesc { get; }
    public static string IServerConfigurationFacet_MinMemoryPerQueryName { get; }
    public static string IServerConfigurationFacet_MinMemoryPerQueryDesc { get; }
    public static string IServerConfigurationFacet_OptimizeAdhocWorkloadsName { get; }
    public static string IServerConfigurationFacet_OptimizeAdhocWorkloadsDesc { get; }
    public static string IServerConfigurationFacet_MinServerMemoryName { get; }
    public static string IServerConfigurationFacet_MinServerMemoryDesc { get; }
    public static string IServerConfigurationFacet_NestedTriggersEnabledName { get; }
    public static string IServerConfigurationFacet_NestedTriggersEnabledDesc { get; }
    public static string IServerConfigurationFacet_NetworkPacketSizeName { get; }
    public static string IServerConfigurationFacet_NetworkPacketSizeDesc { get; }
    public static string IServerConfigurationFacet_OleAutomationEnabledName { get; }
    public static string IServerConfigurationFacet_OleAutomationEnabledDesc { get; }
    public static string IServerConfigurationFacet_OpenObjectsName { get; }
    public static string IServerConfigurationFacet_OpenObjectsDesc { get; }
    public static string IServerConfigurationFacet_PrecomputeRankName { get; }
    public static string IServerConfigurationFacet_PrecomputeRankDesc { get; }
    public static string IServerConfigurationFacet_PriorityBoostName { get; }
    public static string IServerConfigurationFacet_PriorityBoostDesc { get; }
    public static string IServerConfigurationFacet_ProtocolHandlerTimeoutName { get; }
    public static string IServerConfigurationFacet_ProtocolHandlerTimeoutDesc { get; }
    public static string IServerConfigurationFacet_QueryGovernorCostLimitName { get; }
    public static string IServerConfigurationFacet_QueryGovernorCostLimitDesc { get; }
    public static string IServerConfigurationFacet_QueryWaitName { get; }
    public static string IServerConfigurationFacet_QueryWaitDesc { get; }
    public static string IServerConfigurationFacet_RecoveryIntervalName { get; }
    public static string IServerConfigurationFacet_RecoveryIntervalDesc { get; }
    public static string IServerConfigurationFacet_RemoteAccessEnabledName { get; }
    public static string IServerConfigurationFacet_RemoteAccessEnabledDesc { get; }
    public static string IServerConfigurationFacet_RemoteDacEnabledName { get; }
    public static string IServerConfigurationFacet_RemoteDacEnabledDesc { get; }
    public static string IServerConfigurationFacet_RemoteLoginTimeoutName { get; }
    public static string IServerConfigurationFacet_RemoteLoginTimeoutDesc { get; }
    public static string IServerConfigurationFacet_RemoteProcTransEnabledName { get; }
    public static string IServerConfigurationFacet_RemoteProcTransEnabledDesc { get; }
    public static string IServerConfigurationFacet_RemoteQueryTimeoutName { get; }
    public static string IServerConfigurationFacet_RemoteQueryTimeoutDesc { get; }
    public static string IServerConfigurationFacet_ReplicationMaxTextSizeName { get; }
    public static string IServerConfigurationFacet_ReplicationMaxTextSizeDesc { get; }
    public static string IServerConfigurationFacet_ReplicationXPsEnabledName { get; }
    public static string IServerConfigurationFacet_ReplicationXPsEnabledDesc { get; }
    public static string IServerConfigurationFacet_ScanForStartupProceduresName { get; }
    public static string IServerConfigurationFacet_ScanForStartupProceduresDesc { get; }
    public static string IServerConfigurationFacet_ServerTriggerRecursionEnabledName { get; }
    public static string IServerConfigurationFacet_ServerTriggerRecursionEnabledDesc { get; }
    public static string IServerConfigurationFacet_SetWorkingSetSizeName { get; }
    public static string IServerConfigurationFacet_SetWorkingSetSizeDesc { get; }
    public static string IServerConfigurationFacet_ShowAdvancedOptionsName { get; }
    public static string IServerConfigurationFacet_ShowAdvancedOptionsDesc { get; }
    public static string IServerConfigurationFacet_SmoAndDmoXPsEnabledName { get; }
    public static string IServerConfigurationFacet_SmoAndDmoXPsEnabledDesc { get; }
    public static string IServerConfigurationFacet_SqlMailEnabledName { get; }
    public static string IServerConfigurationFacet_SqlMailEnabledDesc { get; }
    public static string IServerConfigurationFacet_TransformNoiseWordsName { get; }
    public static string IServerConfigurationFacet_TransformNoiseWordsDesc { get; }
    public static string IServerConfigurationFacet_TwoDigitYearCutoffName { get; }
    public static string IServerConfigurationFacet_TwoDigitYearCutoffDesc { get; }
    public static string IServerConfigurationFacet_UserConnectionsName { get; }
    public static string IServerConfigurationFacet_UserConnectionsDesc { get; }
    public static string IServerConfigurationFacet_UserInstanceTimeoutName { get; }
    public static string IServerConfigurationFacet_UserInstanceTimeoutDesc { get; }
    public static string IServerConfigurationFacet_UserInstancesEnabledName { get; }
    public static string IServerConfigurationFacet_UserInstancesEnabledDesc { get; }
    public static string IServerConfigurationFacet_UserOptionsName { get; }
    public static string IServerConfigurationFacet_UserOptionsDesc { get; }
    public static string IServerConfigurationFacet_WebAssistantEnabledName { get; }
    public static string IServerConfigurationFacet_WebAssistantEnabledDesc { get; }
    public static string IServerConfigurationFacet_XPCmdShellEnabledName { get; }
    public static string IServerConfigurationFacet_XPCmdShellEnabledDesc { get; }
    public static string IServerConfigurationFacet_DefaultBackupCompressionEnabledName { get; }
    public static string IServerConfigurationFacet_DefaultBackupCompressionEnabledDesc { get; }
    public static string IServerConfigurationFacet_ExtensibleKeyManagementEnabledName { get; }
    public static string IServerConfigurationFacet_ExtensibleKeyManagementEnabledDesc { get; }
    public static string IServerConfigurationFacet_RemoteDataArchiveEnabledName { get; }
    public static string IServerConfigurationFacet_RemoteDataArchiveEnabledDesc { get; }
    public static string IDatabaseMaintenanceFacet_Name { get; }
    public static string IDatabaseMaintenanceFacet_Desc { get; }
    public static string IDatabaseMaintenanceFacet_DataAndBackupOnSeparateLogicalVolumesName { get; }
    public static string IDatabaseMaintenanceFacet_DataAndBackupOnSeparateLogicalVolumesDesc { get; }
    public static string IDatabaseSecurityFacet_Name { get; }
    public static string IDatabaseSecurityFacet_Desc { get; }
    public static string IDatabaseSecurityFacet_IsOwnerSysadminName { get; }
    public static string IDatabaseSecurityFacet_IsOwnerSysadminDesc { get; }
    public static string IDatabasePerformanceFacet_Name { get; }
    public static string IDatabasePerformanceFacet_Desc { get; }
    public static string IDatabasePerformanceFacet_CollationMatchesModelOrMasterName { get; }
    public static string IDatabasePerformanceFacet_CollationMatchesModelOrMasterDesc { get; }
    public static string IDatabasePerformanceFacet_DataAndLogFilesOnSeparateLogicalVolumesName { get; }
    public static string IDatabasePerformanceFacet_DataAndLogFilesOnSeparateLogicalVolumesDesc { get; }
    public static string UserDefinedFunction_Name { get; }
    public static string UserDefinedFunction_Desc { get; }
    public static string UserDefinedFunction_AnsiNullsStatusName { get; }
    public static string UserDefinedFunction_AnsiNullsStatusDesc { get; }
    public static string UserDefinedFunction_AssemblyNameName { get; }
    public static string UserDefinedFunction_AssemblyNameDesc { get; }
    public static string UserDefinedFunction_ClassNameName { get; }
    public static string UserDefinedFunction_ClassNameDesc { get; }
    public static string UserDefinedFunction_CreateDateName { get; }
    public static string UserDefinedFunction_CreateDateDesc { get; }
    public static string UserDefinedFunction_DataTypeName { get; }
    public static string UserDefinedFunction_DataTypeDesc { get; }
    public static string UserDefinedFunction_DateLastModifiedName { get; }
    public static string UserDefinedFunction_DateLastModifiedDesc { get; }
    public static string UserDefinedFunction_EventsName { get; }
    public static string UserDefinedFunction_EventsDesc { get; }
    public static string UserDefinedFunction_ExecutionContextName { get; }
    public static string UserDefinedFunction_ExecutionContextDesc { get; }
    public static string UserDefinedFunction_ExecutionContextPrincipalName { get; }
    public static string UserDefinedFunction_ExecutionContextPrincipalDesc { get; }
    public static string UserDefinedFunction_ExtendedPropertiesName { get; }
    public static string UserDefinedFunction_ExtendedPropertiesDesc { get; }
    public static string UserDefinedFunction_FunctionTypeName { get; }
    public static string UserDefinedFunction_FunctionTypeDesc { get; }
    public static string UserDefinedFunction_IDName { get; }
    public static string UserDefinedFunction_IDDesc { get; }
    public static string UserDefinedFunction_ImplementationTypeName { get; }
    public static string UserDefinedFunction_ImplementationTypeDesc { get; }
    public static string UserDefinedFunction_InlineTypeName { get; }
    public static string UserDefinedFunction_InlineTypeDesc { get; }
    public static string UserDefinedFunction_IsDeterministicName { get; }
    public static string UserDefinedFunction_IsDeterministicDesc { get; }
    public static string UserDefinedFunction_IsEncryptedName { get; }
    public static string UserDefinedFunction_IsEncryptedDesc { get; }
    public static string UserDefinedFunction_IsInlineableName { get; }
    public static string UserDefinedFunction_IsInlineableDesc { get; }
    public static string UserDefinedFunction_IsNativelyCompiledName { get; }
    public static string UserDefinedFunction_IsNativelyCompiledDesc { get; }
    public static string UserDefinedFunction_IsSchemaBoundName { get; }
    public static string UserDefinedFunction_IsSchemaBoundDesc { get; }
    public static string UserDefinedFunction_IsSchemaOwnedName { get; }
    public static string UserDefinedFunction_IsSchemaOwnedDesc { get; }
    public static string UserDefinedFunction_IsSystemObjectName { get; }
    public static string UserDefinedFunction_IsSystemObjectDesc { get; }
    public static string UserDefinedFunction_MethodNameName { get; }
    public static string UserDefinedFunction_MethodNameDesc { get; }
    public static string UserDefinedFunction_OwnerName { get; }
    public static string UserDefinedFunction_OwnerDesc { get; }
    public static string UserDefinedFunction_QuotedIdentifierStatusName { get; }
    public static string UserDefinedFunction_QuotedIdentifierStatusDesc { get; }
    public static string UserDefinedFunction_ReturnsNullOnNullInputName { get; }
    public static string UserDefinedFunction_ReturnsNullOnNullInputDesc { get; }
    public static string UserDefinedFunction_TableVariableNameName { get; }
    public static string UserDefinedFunction_TableVariableNameDesc { get; }
    public static string UserDefinedFunction_TextBodyName { get; }
    public static string UserDefinedFunction_TextBodyDesc { get; }
    public static string UserDefinedFunction_TextHeaderName { get; }
    public static string UserDefinedFunction_TextHeaderDesc { get; }
    public static string UserDefinedFunction_TextModeName { get; }
    public static string UserDefinedFunction_TextModeDesc { get; }
    public static string Audit_Name { get; }
    public static string Audit_Desc { get; }
    public static string Audit_CreateDateName { get; }
    public static string Audit_CreateDateDesc { get; }
    public static string Audit_DateLastModifiedName { get; }
    public static string Audit_DateLastModifiedDesc { get; }
    public static string Audit_DestinationTypeName { get; }
    public static string Audit_DestinationTypeDesc { get; }
    public static string Audit_EnabledName { get; }
    public static string Audit_EnabledDesc { get; }
    public static string Audit_FileNameName { get; }
    public static string Audit_FileNameDesc { get; }
    public static string Audit_FilePathName { get; }
    public static string Audit_FilePathDesc { get; }
    public static string Audit_Filter { get; }
    public static string Audit_FilterDesc { get; }
    public static string Audit_GuidName { get; }
    public static string Audit_GuidDesc { get; }
    public static string Audit_IDName { get; }
    public static string Audit_IDDesc { get; }
    public static string Audit_IsOperatorName { get; }
    public static string Audit_IsOperatorDesc { get; }
    public static string Audit_MaximumFileSizeName { get; }
    public static string Audit_MaximumFileSizeDesc { get; }
    public static string Audit_MaximumFileSizeUnitName { get; }
    public static string Audit_MaximumFileSizeUnitDesc { get; }
    public static string Audit_MaximumRolloverFilesName { get; }
    public static string Audit_MaximumRolloverFilesDesc { get; }
    public static string Audit_MaximumFilesName { get; }
    public static string Audit_MaximumFilesDesc { get; }
    public static string Audit_OnFailureName { get; }
    public static string Audit_OnFailureDesc { get; }
    public static string Audit_QueueDelayName { get; }
    public static string Audit_QueueDelayDesc { get; }
    public static string Audit_ReserveDiskSpaceName { get; }
    public static string Audit_ReserveDiskSpaceDesc { get; }
    public static string Audit_RetentionDaysName { get; }
    public static string Audit_RetentionDaysDesc { get; }
    public static string DatabaseAuditSpecification_Name { get; }
    public static string DatabaseAuditSpecification_Desc { get; }
    public static string DatabaseAuditSpecification_AuditNameName { get; }
    public static string DatabaseAuditSpecification_AuditNameDesc { get; }
    public static string DatabaseAuditSpecification_CreateDateName { get; }
    public static string DatabaseAuditSpecification_CreateDateDesc { get; }
    public static string DatabaseAuditSpecification_DateLastModifiedName { get; }
    public static string DatabaseAuditSpecification_DateLastModifiedDesc { get; }
    public static string DatabaseAuditSpecification_EnabledName { get; }
    public static string DatabaseAuditSpecification_EnabledDesc { get; }
    public static string DatabaseAuditSpecification_GuidName { get; }
    public static string DatabaseAuditSpecification_GuidDesc { get; }
    public static string DatabaseAuditSpecification_IDName { get; }
    public static string DatabaseAuditSpecification_IDDesc { get; }
    public static string ServerAuditSpecification_Name { get; }
    public static string ServerAuditSpecification_Desc { get; }
    public static string ServerAuditSpecification_AuditNameName { get; }
    public static string ServerAuditSpecification_AuditNameDesc { get; }
    public static string ServerAuditSpecification_CreateDateName { get; }
    public static string ServerAuditSpecification_CreateDateDesc { get; }
    public static string ServerAuditSpecification_DateLastModifiedName { get; }
    public static string ServerAuditSpecification_DateLastModifiedDesc { get; }
    public static string ServerAuditSpecification_EnabledName { get; }
    public static string ServerAuditSpecification_EnabledDesc { get; }
    public static string ServerAuditSpecification_GuidName { get; }
    public static string ServerAuditSpecification_GuidDesc { get; }
    public static string ServerAuditSpecification_IDName { get; }
    public static string ServerAuditSpecification_IDDesc { get; }
    public static string ResourceGovernor_Name { get; }
    public static string ResourceGovernor_Desc { get; }
    public static string ResourceGovernor_ClassifierFunctionName { get; }
    public static string ResourceGovernor_ClassifierFunctionDesc { get; }
    public static string ResourceGovernor_MaxOutstandingIOPerVolumeName { get; }
    public static string ResourceGovernor_MaxOutstandingIOPerVolumeDesc { get; }
    public static string ResourceGovernor_EnabledName { get; }
    public static string ResourceGovernor_EnabledDesc { get; }
    public static string ResourceGovernor_ReconfigurePendingName { get; }
    public static string ResourceGovernor_ReconfigurePendingDesc { get; }
    public static string ResourcePool_Name { get; }
    public static string ResourcePool_Desc { get; }
    public static string ResourcePool_IDName { get; }
    public static string ResourcePool_IDDesc { get; }
    public static string ResourcePool_IsSystemObjectName { get; }
    public static string ResourcePool_IsSystemObjectDesc { get; }
    public static string ResourcePool_NameName { get; }
    public static string ResourcePool_NameDesc { get; }
    public static string ResourcePool_MaximumCpuPercentageName { get; }
    public static string ResourcePool_MaximumCpuPercentageDesc { get; }
    public static string ResourcePool_CapCpuPercentageName { get; }
    public static string ResourcePool_CapCpuPercentageDesc { get; }
    public static string ResourcePool_MaximumMemoryPercentageName { get; }
    public static string ResourcePool_MaximumMemoryPercentageDesc { get; }
    public static string ResourcePool_MinimumCpuPercentageName { get; }
    public static string ResourcePool_MinimumCpuPercentageDesc { get; }
    public static string ResourcePool_MinimumMemoryPercentageName { get; }
    public static string ResourcePool_MinimumMemoryPercentageDesc { get; }
    public static string ResourcePool_MinimumIopsPerVolumeName { get; }
    public static string ResourcePool_MinimumIopsPerVolumeDesc { get; }
    public static string ResourcePool_MaximumIopsPerVolumeName { get; }
    public static string ResourcePool_MaximumIopsPerVolumeDesc { get; }
    public static string ExternalResourcePool_Name { get; }
    public static string ExternalResourcePool_Desc { get; }
    public static string ExternalResourcePool_IDName { get; }
    public static string ExternalResourcePool_IDDesc { get; }
    public static string ExternalResourcePool_IsSystemObjectName { get; }
    public static string ExternalResourcePool_IsSystemObjectDesc { get; }
    public static string ExternalResourcePool_NameName { get; }
    public static string ExternalResourcePool_NameDesc { get; }
    public static string ExternalResourcePool_MaximumCpuPercentageName { get; }
    public static string ExternalResourcePool_MaximumCpuPercentageDesc { get; }
    public static string ExternalResourcePool_MaximumMemoryPercentageName { get; }
    public static string ExternalResourcePool_MaximumMemoryPercentageDesc { get; }
    public static string ExternalResourcePool_MaximumProcessesName { get; }
    public static string ExternalResourcePool_MaximumProcessesDesc { get; }
    public static string WorkloadGroup_Name { get; }
    public static string WorkloadGroup_Desc { get; }
    public static string WorkloadGroup_IDName { get; }
    public static string WorkloadGroup_IDDesc { get; }
    public static string WorkloadGroup_IsSystemObjectName { get; }
    public static string WorkloadGroup_IsSystemObjectDesc { get; }
    public static string WorkloadGroup_NameName { get; }
    public static string WorkloadGroup_NameDesc { get; }
    public static string WorkloadGroup_GroupMaximumRequestsName { get; }
    public static string WorkloadGroup_GroupMaximumRequestsDesc { get; }
    public static string WorkloadGroup_ImportanceName { get; }
    public static string WorkloadGroup_ImportanceDesc { get; }
    public static string WorkloadGroup_MaximumDegreeOfParallelismName { get; }
    public static string WorkloadGroup_MaximumDegreeOfParallelismDesc { get; }
    public static string WorkloadGroup_RequestMaximumCpuTimeInSecondsName { get; }
    public static string WorkloadGroup_RequestMaximumCpuTimeInSecondsDesc { get; }
    public static string WorkloadGroup_RequestMaximumMemoryGrantPercentageName { get; }
    public static string WorkloadGroup_RequestMaximumMemoryGrantPercentageDesc { get; }
    public static string WorkloadGroup_RequestMaximumMemoryGrantPercentageAsDoubleName { get; }
    public static string WorkloadGroup_RequestMaximumMemoryGrantPercentageAsDoubleDesc { get; }
    public static string WorkloadGroup_RequestMemoryGrantTimeoutInSecondsName { get; }
    public static string WorkloadGroup_RequestMemoryGrantTimeoutInSecondsDesc { get; }
    public static string WorkloadGroup_ExternalResourcePoolNameName { get; }
    public static string WorkloadGroup_ExternalResourcePoolNameDesc { get; }
    public static string CryptographicProvider_Name { get; }
    public static string CryptographicProvider_Desc { get; }
    public static string CryptographicProvider_AsymmetricKeyExportableName { get; }
    public static string CryptographicProvider_AsymmetricKeyExportableDesc { get; }
    public static string CryptographicProvider_AsymmetricKeyImportableName { get; }
    public static string CryptographicProvider_AsymmetricKeyImportableDesc { get; }
    public static string CryptographicProvider_AsymmetricKeyPersistableName { get; }
    public static string CryptographicProvider_AsymmetricKeyPersistableDesc { get; }
    public static string CryptographicProvider_AsymmetricKeySupportedName { get; }
    public static string CryptographicProvider_AsymmetricKeySupportedDesc { get; }
    public static string CryptographicProvider_AuthenticationTypeName { get; }
    public static string CryptographicProvider_AuthenticationTypeDesc { get; }
    public static string CryptographicProvider_DllPathName { get; }
    public static string CryptographicProvider_DllPathDesc { get; }
    public static string CryptographicProvider_EnabledName { get; }
    public static string CryptographicProvider_EnabledDesc { get; }
    public static string CryptographicProvider_IDName { get; }
    public static string CryptographicProvider_IDDesc { get; }
    public static string CryptographicProvider_ProviderGuidName { get; }
    public static string CryptographicProvider_ProviderGuidDesc { get; }
    public static string CryptographicProvider_SymmetricKeyExportableName { get; }
    public static string CryptographicProvider_SymmetricKeyExportableDesc { get; }
    public static string CryptographicProvider_SymmetricKeyImportableName { get; }
    public static string CryptographicProvider_SymmetricKeyImportableDesc { get; }
    public static string CryptographicProvider_SymmetricKeyPersistableName { get; }
    public static string CryptographicProvider_SymmetricKeyPersistableDesc { get; }
    public static string CryptographicProvider_SymmetricKeySupportedName { get; }
    public static string CryptographicProvider_SymmetricKeySupportedDesc { get; }
    public static string Endpoint_Name { get; }
    public static string Endpoint_Desc { get; }
    public static string Endpoint_EndpointStateName { get; }
    public static string Endpoint_EndpointStateDesc { get; }
    public static string Endpoint_EndpointTypeName { get; }
    public static string Endpoint_EndpointTypeDesc { get; }
    public static string Endpoint_IDName { get; }
    public static string Endpoint_IDDesc { get; }
    public static string Endpoint_IsAdminEndpointName { get; }
    public static string Endpoint_IsAdminEndpointDesc { get; }
    public static string Endpoint_IsSystemObjectName { get; }
    public static string Endpoint_IsSystemObjectDesc { get; }
    public static string Endpoint_NameName { get; }
    public static string Endpoint_NameDesc { get; }
    public static string Endpoint_OwnerName { get; }
    public static string Endpoint_OwnerDesc { get; }
    public static string Endpoint_ParentName { get; }
    public static string Endpoint_ParentDesc { get; }
    public static string Endpoint_PayloadName { get; }
    public static string Endpoint_PayloadDesc { get; }
    public static string Endpoint_ProtocolName { get; }
    public static string Endpoint_ProtocolDesc { get; }
    public static string Endpoint_ProtocolTypeName { get; }
    public static string Endpoint_ProtocolTypeDesc { get; }
    public static string Endpoint_StateName { get; }
    public static string Endpoint_StateDesc { get; }
    public static string Endpoint_UserDataName { get; }
    public static string Endpoint_UserDataDesc { get; }
    public static string PlanGuide_Name { get; }
    public static string PlanGuide_Desc { get; }
    public static string PlanGuide_IDName { get; }
    public static string PlanGuide_IDDesc { get; }
    public static string PlanGuide_HintsName { get; }
    public static string PlanGuide_HintsDesc { get; }
    public static string PlanGuide_IsDisabledName { get; }
    public static string PlanGuide_IsDisabledDesc { get; }
    public static string PlanGuide_ParametersName { get; }
    public static string PlanGuide_ParametersDesc { get; }
    public static string PlanGuide_ScopeBatchName { get; }
    public static string PlanGuide_ScopeBatchDesc { get; }
    public static string PlanGuide_ScopeObjectNameName { get; }
    public static string PlanGuide_ScopeObjectNameDesc { get; }
    public static string PlanGuide_ScopeSchemaNameName { get; }
    public static string PlanGuide_ScopeSchemaNameDesc { get; }
    public static string PlanGuide_ScopeTypeName { get; }
    public static string PlanGuide_ScopeTypeDesc { get; }
    public static string PlanGuide_StatementName { get; }
    public static string PlanGuide_StatementDesc { get; }
    public static string Statistic_Name { get; }
    public static string Statistic_Desc { get; }
    public static string Statistic_IDName { get; }
    public static string Statistic_IDDesc { get; }
    public static string Statistic_FileGroupName { get; }
    public static string Statistic_FileGroupDesc { get; }
    public static string Statistic_FilterDefinitionName { get; }
    public static string Statistic_FilterDefinitionDesc { get; }
    public static string Statistic_HasFilterName { get; }
    public static string Statistic_HasFilterDesc { get; }
    public static string Statistic_IsAutoCreatedName { get; }
    public static string Statistic_IsAutoCreatedDesc { get; }
    public static string Statistic_IsAutoDroppedName { get; }
    public static string Statistic_IsAutoDroppedDesc { get; }
    public static string Statistic_IsFromIndexCreationName { get; }
    public static string Statistic_IsFromIndexCreationDesc { get; }
    public static string Statistic_IsTemporaryName { get; }
    public static string Statistic_IsTemporaryDesc { get; }
    public static string Statistic_LastUpdatedName { get; }
    public static string Statistic_LastUpdatedDesc { get; }
    public static string Statistic_NoAutomaticRecomputationName { get; }
    public static string Statistic_NoAutomaticRecomputationDesc { get; }
    public static string Default_Name { get; }
    public static string Default_Desc { get; }
    public static string Default_IDName { get; }
    public static string Default_IDDesc { get; }
    public static string Default_SchemaName { get; }
    public static string Default_SchemaDesc { get; }
    public static string Default_CreateDateName { get; }
    public static string Default_CreateDateDesc { get; }
    public static string Default_TextBodyName { get; }
    public static string Default_TextBodyDesc { get; }
    public static string Default_TextHeaderName { get; }
    public static string Default_TextHeaderDesc { get; }
    public static string Default_TextModeName { get; }
    public static string Default_TextModeDesc { get; }
    public static string UserDefinedDataType_Name { get; }
    public static string UserDefinedDataType_Desc { get; }
    public static string UserDefinedDataType_IDName { get; }
    public static string UserDefinedDataType_IDDesc { get; }
    public static string UserDefinedDataType_SchemaName { get; }
    public static string UserDefinedDataType_SchemaDesc { get; }
    public static string UserDefinedDataType_AllowIdentityName { get; }
    public static string UserDefinedDataType_AllowIdentityDesc { get; }
    public static string UserDefinedDataType_CollationName { get; }
    public static string UserDefinedDataType_CollationDesc { get; }
    public static string UserDefinedDataType_DefaultName { get; }
    public static string UserDefinedDataType_DefaultDesc { get; }
    public static string UserDefinedDataType_DefaultSchemaName { get; }
    public static string UserDefinedDataType_DefaultSchemaDesc { get; }
    public static string UserDefinedDataType_IsSchemaOwnedName { get; }
    public static string UserDefinedDataType_IsSchemaOwnedDesc { get; }
    public static string UserDefinedDataType_LengthName { get; }
    public static string UserDefinedDataType_LengthDesc { get; }
    public static string UserDefinedDataType_MaxLengthName { get; }
    public static string UserDefinedDataType_MaxLengthDesc { get; }
    public static string UserDefinedDataType_NullableName { get; }
    public static string UserDefinedDataType_NullableDesc { get; }
    public static string UserDefinedDataType_NumericPrecisionName { get; }
    public static string UserDefinedDataType_NumericPrecisionDesc { get; }
    public static string UserDefinedDataType_NumericScaleName { get; }
    public static string UserDefinedDataType_NumericScaleDesc { get; }
    public static string UserDefinedDataType_OwnerName { get; }
    public static string UserDefinedDataType_OwnerDesc { get; }
    public static string UserDefinedDataType_RuleName { get; }
    public static string UserDefinedDataType_RuleDesc { get; }
    public static string UserDefinedDataType_RuleSchemaName { get; }
    public static string UserDefinedDataType_RuleSchemaDesc { get; }
    public static string UserDefinedDataType_SystemTypeName { get; }
    public static string UserDefinedDataType_SystemTypeDesc { get; }
    public static string UserDefinedDataType_VariableLengthName { get; }
    public static string UserDefinedDataType_VariableLengthDesc { get; }
    public static string PartitionScheme_Name { get; }
    public static string PartitionScheme_Desc { get; }
    public static string PartitionScheme_IDName { get; }
    public static string PartitionScheme_IDDesc { get; }
    public static string PartitionScheme_NextUsedFileGroupName { get; }
    public static string PartitionScheme_NextUsedFileGroupDesc { get; }
    public static string PartitionScheme_PartitionFunctionName { get; }
    public static string PartitionScheme_PartitionFunctionDesc { get; }
    public static string FullTextCatalog_Name { get; }
    public static string FullTextCatalog_Desc { get; }
    public static string FullTextCatalog_IDName { get; }
    public static string FullTextCatalog_IDDesc { get; }
    public static string FullTextCatalog_ErrorLogSizeName { get; }
    public static string FullTextCatalog_ErrorLogSizeDesc { get; }
    public static string FullTextCatalog_FileGroupName { get; }
    public static string FullTextCatalog_FileGroupDesc { get; }
    public static string FullTextCatalog_FullTextIndexSizeName { get; }
    public static string FullTextCatalog_FullTextIndexSizeDesc { get; }
    public static string FullTextCatalog_HasFullTextIndexedTablesName { get; }
    public static string FullTextCatalog_HasFullTextIndexedTablesDesc { get; }
    public static string FullTextCatalog_IsAccentSensitiveName { get; }
    public static string FullTextCatalog_IsAccentSensitiveDesc { get; }
    public static string FullTextCatalog_IsDefaultName { get; }
    public static string FullTextCatalog_IsDefaultDesc { get; }
    public static string FullTextCatalog_ItemCountName { get; }
    public static string FullTextCatalog_ItemCountDesc { get; }
    public static string FullTextCatalog_OwnerName { get; }
    public static string FullTextCatalog_OwnerDesc { get; }
    public static string FullTextCatalog_PopulationCompletionDateName { get; }
    public static string FullTextCatalog_PopulationCompletionDateDesc { get; }
    public static string FullTextCatalog_PopulationStatusName { get; }
    public static string FullTextCatalog_PopulationStatusDesc { get; }
    public static string FullTextCatalog_RootPathName { get; }
    public static string FullTextCatalog_RootPathDesc { get; }
    public static string FullTextCatalog_UniqueKeyCountName { get; }
    public static string FullTextCatalog_UniqueKeyCountDesc { get; }
    public static string FullTextStopList_Name { get; }
    public static string FullTextStopList_Desc { get; }
    public static string FullTextStopList_IDName { get; }
    public static string FullTextStopList_IDDesc { get; }
    public static string FullTextStopList_OwnerName { get; }
    public static string FullTextStopList_OwnerDesc { get; }
    public static string FullTextIndex_Name { get; }
    public static string FullTextIndex_Desc { get; }
    public static string FullTextIndex_CatalogNameName { get; }
    public static string FullTextIndex_CatalogNameDesc { get; }
    public static string FullTextIndex_ChangeTrackingName { get; }
    public static string FullTextIndex_ChangeTrackingDesc { get; }
    public static string FullTextIndex_DocumentsProcessedName { get; }
    public static string FullTextIndex_DocumentsProcessedDesc { get; }
    public static string FullTextIndex_FilegroupNameName { get; }
    public static string FullTextIndex_FilegroupNameDesc { get; }
    public static string FullTextIndex_IsEnabledName { get; }
    public static string FullTextIndex_IsEnabledDesc { get; }
    public static string FullTextIndex_ItemCountName { get; }
    public static string FullTextIndex_ItemCountDesc { get; }
    public static string FullTextIndex_NumberOfFailuresName { get; }
    public static string FullTextIndex_NumberOfFailuresDesc { get; }
    public static string FullTextIndex_PendingChangesName { get; }
    public static string FullTextIndex_PendingChangesDesc { get; }
    public static string FullTextIndex_PopulationStatusName { get; }
    public static string FullTextIndex_PopulationStatusDesc { get; }
    public static string FullTextIndex_StopListNameName { get; }
    public static string FullTextIndex_StopListNameDesc { get; }
    public static string FullTextIndex_StopListOptionName { get; }
    public static string FullTextIndex_StopListOptionDesc { get; }
    public static string FullTextIndex_UniqueIndexNameName { get; }
    public static string FullTextIndex_UniqueIndexNameDesc { get; }
    public static string FullTextIndex_IndexedColumnsName { get; }
    public static string FullTextIndex_IndexedColumnsDesc { get; }
    public static string FullTextIndex_SearchPropertyListNameName { get; }
    public static string FullTextIndex_SearchPropertyListNameDesc { get; }
    public static string Credential_Name { get; }
    public static string Credential_Desc { get; }
    public static string Credential_IDName { get; }
    public static string Credential_IDDesc { get; }
    public static string Credential_CreateDateName { get; }
    public static string Credential_CreateDateDesc { get; }
    public static string Credential_DateLastModifiedName { get; }
    public static string Credential_DateLastModifiedDesc { get; }
    public static string Credential_IdentityName { get; }
    public static string Credential_IdentityDesc { get; }
    public static string Credential_MappedClassTypeName { get; }
    public static string Credential_MappedClassTypeDesc { get; }
    public static string Credential_ProviderNameName { get; }
    public static string Credential_ProviderNameDesc { get; }
    public static string DatabaseScopedCredential_Name { get; }
    public static string DatabaseScopedCredential_Desc { get; }
    public static string DatabaseScopedCredential_IDName { get; }
    public static string DatabaseScopedCredential_IDDesc { get; }
    public static string DatabaseScopedCredential_CreateDateName { get; }
    public static string DatabaseScopedCredential_CreateDateDesc { get; }
    public static string DatabaseScopedCredential_DateLastModifiedName { get; }
    public static string DatabaseScopedCredential_DateLastModifiedDesc { get; }
    public static string DatabaseScopedCredential_IdentityName { get; }
    public static string DatabaseScopedCredential_IdentityDesc { get; }
    public static string DatabaseScopedCredential_MappedClassTypeName { get; }
    public static string DatabaseScopedCredential_MappedClassTypeDesc { get; }
    public static string DatabaseScopedCredential_ProviderNameName { get; }
    public static string DatabaseScopedCredential_ProviderNameDesc { get; }
    public static string Certificate_Name { get; }
    public static string Certificate_Desc { get; }
    public static string Certificate_IDName { get; }
    public static string Certificate_IDDesc { get; }
    public static string Certificate_ActiveForServiceBrokerDialogName { get; }
    public static string Certificate_ActiveForServiceBrokerDialogDesc { get; }
    public static string Certificate_ExpirationDateName { get; }
    public static string Certificate_ExpirationDateDesc { get; }
    public static string Certificate_IssuerName { get; }
    public static string Certificate_IssuerDesc { get; }
    public static string Certificate_OwnerName { get; }
    public static string Certificate_OwnerDesc { get; }
    public static string Certificate_PrivateKeyEncryptionTypeName { get; }
    public static string Certificate_PrivateKeyEncryptionTypeDesc { get; }
    public static string Certificate_SerialName { get; }
    public static string Certificate_SerialDesc { get; }
    public static string Certificate_SidName { get; }
    public static string Certificate_SidDesc { get; }
    public static string Certificate_StartDateName { get; }
    public static string Certificate_StartDateDesc { get; }
    public static string Certificate_SubjectName { get; }
    public static string Certificate_SubjectDesc { get; }
    public static string Certificate_ThumbprintName { get; }
    public static string Certificate_ThumbprintDesc { get; }
    public static string Certificate_LastBackupDateName { get; }
    public static string Certificate_LastBackupDateDesc { get; }
    public static string PartitionFunction_Name { get; }
    public static string PartitionFunction_Desc { get; }
    public static string PartitionFunction_IDName { get; }
    public static string PartitionFunction_IDDesc { get; }
    public static string PartitionFunction_CreateDateName { get; }
    public static string PartitionFunction_CreateDateDesc { get; }
    public static string PartitionFunction_NumberOfPartitionsName { get; }
    public static string PartitionFunction_NumberOfPartitionsDesc { get; }
    public static string PartitionFunction_RangeTypeName { get; }
    public static string PartitionFunction_RangeTypeDesc { get; }
    public static string PartitionFunction_RangeValuesName { get; }
    public static string PartitionFunction_RangeValuesDesc { get; }
    public static string UserDefinedAggregate_Name { get; }
    public static string UserDefinedAggregate_Desc { get; }
    public static string UserDefinedAggregate_IDName { get; }
    public static string UserDefinedAggregate_IDDesc { get; }
    public static string UserDefinedAggregate_SchemaName { get; }
    public static string UserDefinedAggregate_SchemaDesc { get; }
    public static string UserDefinedAggregate_AssemblyNameName { get; }
    public static string UserDefinedAggregate_AssemblyNameDesc { get; }
    public static string UserDefinedAggregate_ClassNameName { get; }
    public static string UserDefinedAggregate_ClassNameDesc { get; }
    public static string UserDefinedAggregate_CreateDateName { get; }
    public static string UserDefinedAggregate_CreateDateDesc { get; }
    public static string UserDefinedAggregate_DateLastModifiedName { get; }
    public static string UserDefinedAggregate_DateLastModifiedDesc { get; }
    public static string UserDefinedAggregate_IsSchemaOwnedName { get; }
    public static string UserDefinedAggregate_IsSchemaOwnedDesc { get; }
    public static string UserDefinedAggregate_OwnerName { get; }
    public static string UserDefinedAggregate_OwnerDesc { get; }
    public static string UserDefinedAggregate_ParametersName { get; }
    public static string UserDefinedAggregate_ParametersDesc { get; }
    public static string UserDefinedAggregate_DataTypeName { get; }
    public static string UserDefinedAggregate_DataTypeDesc { get; }
    public static string UserDefinedTableType_Name { get; }
    public static string UserDefinedTableType_Desc { get; }
    public static string UserDefinedTableType_CollationName { get; }
    public static string UserDefinedTableType_CollationDesc { get; }
    public static string UserDefinedTableType_CreateDateName { get; }
    public static string UserDefinedTableType_CreateDateDesc { get; }
    public static string UserDefinedTableType_DateLastModifiedName { get; }
    public static string UserDefinedTableType_DateLastModifiedDesc { get; }
    public static string UserDefinedTableType_IDName { get; }
    public static string UserDefinedTableType_IDDesc { get; }
    public static string UserDefinedTableType_IsSchemaOwnedName { get; }
    public static string UserDefinedTableType_IsSchemaOwnedDesc { get; }
    public static string UserDefinedTableType_IsUserDefinedName { get; }
    public static string UserDefinedTableType_IsUserDefinedDesc { get; }
    public static string UserDefinedTableType_MaxLengthName { get; }
    public static string UserDefinedTableType_MaxLengthDesc { get; }
    public static string UserDefinedTableType_NullableName { get; }
    public static string UserDefinedTableType_NullableDesc { get; }
    public static string UserDefinedTableType_OwnerName { get; }
    public static string UserDefinedTableType_OwnerDesc { get; }
    public static string UserDefinedTableType_IsMemoryOptimizedName { get; }
    public static string UserDefinedTableType_IsMemoryOptimizedDesc { get; }
    public static string ITableOptions_Name { get; }
    public static string ITableOptions_Desc { get; }
    public static string IViewOptions_Name { get; }
    public static string IViewOptions_Desc { get; }
    public static string ILoginOptions_Name { get; }
    public static string ILoginOptions_Desc { get; }
    public static string IUserOptions_Name { get; }
    public static string IUserOptions_Desc { get; }
    public static string SearchPropertyList_Name { get; }
    public static string SearchPropertyList_Desc { get; }
    public static string SearchPropertyList_IDName { get; }
    public static string SearchPropertyList_IDDesc { get; }
    public static string SearchPropertyList_OwnerName { get; }
    public static string SearchPropertyList_OwnerDesc { get; }
    public static string SearchPropertyList_DateCreatedName { get; }
    public static string SearchPropertyList_DateCreatedDesc { get; }
    public static string SearchPropertyList_DateLastModifiedName { get; }
    public static string SearchPropertyList_DateLastModifiedDesc { get; }
    public static string AvailabilityGroup_ClusterTypeName { get; }
    public static string AvailabilityGroup_ClusterTypeDesc { get; }
    public static string AvailabilityGroup_Name { get; }
    public static string AvailabilityGroup_Desc { get; }
    public static string AvailabilityGroup_IDName { get; }
    public static string AvailabilityGroup_IDDesc { get; }
    public static string AvailabilityGroup_UniqueIdName { get; }
    public static string AvailabilityGroup_UniqueIdDesc { get; }
    public static string AvailabilityGroup_PrimaryReplicaServerNameName { get; }
    public static string AvailabilityGroup_PrimaryReplicaServerNameDesc { get; }
    public static string AvailabilityGroup_IsLocalName { get; }
    public static string AvailabilityGroup_IsLocalDesc { get; }
    public static string AvailabilityGroup_AutomatedBackupPreferenceName { get; }
    public static string AvailabilityGroup_AutomatedBackupPreferenceDesc { get; }
    public static string AvailabilityGroup_FailureConditionLevelName { get; }
    public static string AvailabilityGroup_FailureConditionLevelDesc { get; }
    public static string AvailabilityGroup_HealthCheckTimeoutName { get; }
    public static string AvailabilityGroup_HealthCheckTimeoutDesc { get; }
    public static string AvailabilityGroup_LocalReplicaRoleName { get; }
    public static string AvailabilityGroup_LocalReplicaRoleDesc { get; }
    public static string AvailabilityGroup_BasicAvailabilityGroupName { get; }
    public static string AvailabilityGroup_BasicAvailabilityGroupDesc { get; }
    public static string AvailabilityGroup_DatabaseHealthTriggerName { get; }
    public static string AvailabilityGroup_DatabaseHealthTriggerDesc { get; }
    public static string AvailabilityGroup_DtcSupportEnabledName { get; }
    public static string AvailabilityGroup_DtcSupportEnabledDesc { get; }
    public static string AvailabilityGroup_IsDistributedAvailabilityGroupName { get; }
    public static string AvailabilityGroup_IsDistributedAvailabilityGroupDesc { get; }
    public static string AvailabilityGroup_IsManagedInstanceLinkName { get; }
    public static string AvailabilityGroup_IsManagedInstanceLinkDesc { get; }
    public static string AvailabilityGroup_RequiredSynchronizedSecondariesToCommitName { get; }
    public static string AvailabilityGroup_RequiredSynchronizedSecondariesToCommitDesc { get; }
    public static string AvailabilityGroup_IsContainedName { get; }
    public static string AvailabilityGroup_IsContainedDesc { get; }
    public static string AvailabilityReplica_Name { get; }
    public static string AvailabilityReplica_Desc { get; }
    public static string AvailabilityReplica_UniqueIdName { get; }
    public static string AvailabilityReplica_UniqueIdDesc { get; }
    public static string AvailabilityReplica_RoleName { get; }
    public static string AvailabilityReplica_RoleDesc { get; }
    public static string AvailabilityReplica_OperationalStateName { get; }
    public static string AvailabilityReplica_OperationalStateDesc { get; }
    public static string AvailabilityReplica_RollupRecoveryStateName { get; }
    public static string AvailabilityReplica_RollupRecoveryStateDesc { get; }
    public static string AvailabilityReplica_RollupSynchronizationStateName { get; }
    public static string AvailabilityReplica_RollupSynchronizationStateDesc { get; }
    public static string AvailabilityReplica_ConnectionStateName { get; }
    public static string AvailabilityReplica_ConnectionStateDesc { get; }
    public static string AvailabilityReplica_JoinStateName { get; }
    public static string AvailabilityReplica_JoinStateDesc { get; }
    public static string AvailabilityReplica_CreateDateName { get; }
    public static string AvailabilityReplica_CreateDateDesc { get; }
    public static string AvailabilityReplica_DateLastModifiedName { get; }
    public static string AvailabilityReplica_DateLastModifiedDesc { get; }
    public static string AvailabilityReplica_EndpointUrlName { get; }
    public static string AvailabilityReplica_EndpointUrlDesc { get; }
    public static string AvailabilityReplica_ReadonlyRoutingConnectionUrlName { get; }
    public static string AvailabilityReplica_ReadonlyRoutingConnectionUrlDesc { get; }
    public static string AvailabilityReplica_ConnectionModeInPrimaryRoleName { get; }
    public static string AvailabilityReplica_ConnectionModeInPrimaryRoleDesc { get; }
    public static string AvailabilityReplica_ConnectionModeInSecondaryRoleName { get; }
    public static string AvailabilityReplica_ConnectionModeInSecondaryRoleDesc { get; }
    public static string AvailabilityReplica_AvailabilityModeName { get; }
    public static string AvailabilityReplica_AvailabilityModeDesc { get; }
    public static string AvailabilityReplica_FailoverModeName { get; }
    public static string AvailabilityReplica_FailoverModeDesc { get; }
    public static string AvailabilityReplica_SeedingModeName { get; }
    public static string AvailabilityReplica_SeedingModeDesc { get; }
    public static string AvailabilityReplica_SessionTimeoutName { get; }
    public static string AvailabilityReplica_SessionTimeoutDesc { get; }
    public static string AvailabilityReplica_LastConnectErrorDescriptionName { get; }
    public static string AvailabilityReplica_LastConnectErrorDescriptionDesc { get; }
    public static string AvailabilityReplica_LastConnectErrorNumberName { get; }
    public static string AvailabilityReplica_LastConnectErrorNumberDesc { get; }
    public static string AvailabilityReplica_LastConnectErrorTimestampName { get; }
    public static string AvailabilityReplica_LastConnectErrorTimestampDesc { get; }
    public static string AvailabilityReplica_BackupPriorityName { get; }
    public static string AvailabilityReplica_BackupPriorityDesc { get; }
    public static string AvailabilityReplica_OwnerName { get; }
    public static string AvailabilityReplica_OwnerDesc { get; }
    public static string AvailabilityReplica_QuorumVoteCountName { get; }
    public static string AvailabilityReplica_QuorumVoteCountDesc { get; }
    public static string AvailabilityReplica_MemberStateName { get; }
    public static string AvailabilityReplica_MemberStateDesc { get; }
    public static string AvailabilityDatabase_Name { get; }
    public static string AvailabilityDatabase_Desc { get; }
    public static string AvailabilityDatabase_SynchronizationStateName { get; }
    public static string AvailabilityDatabase_SynchronizationStateDesc { get; }
    public static string AvailabilityDatabase_UniqueIdName { get; }
    public static string AvailabilityDatabase_UniqueIdDesc { get; }
    public static string AvailabilityDatabase_IsFailoverReadyName { get; }
    public static string AvailabilityDatabase_IsFailoverReadyDesc { get; }
    public static string AvailabilityDatabase_IsJoinedName { get; }
    public static string AvailabilityDatabase_IsJoinedDesc { get; }
    public static string AvailabilityDatabase_IsPendingSecondarySuspendName { get; }
    public static string AvailabilityDatabase_IsPendingSecondarySuspendDesc { get; }
    public static string AvailabilityDatabase_IsSuspendedName { get; }
    public static string AvailabilityDatabase_IsSuspendedDesc { get; }
    public static string AvailabilityDatabase_RecoveryLSNName { get; }
    public static string AvailabilityDatabase_RecoveryLSNDesc { get; }
    public static string AvailabilityDatabase_TruncationLSNName { get; }
    public static string AvailabilityDatabase_TruncationLSNDesc { get; }
    public static string DatabaseReplicaState_Name { get; }
    public static string DatabaseReplicaState_Desc { get; }
    public static string DatabaseReplicaState_DatabaseIdName { get; }
    public static string DatabaseReplicaState_DatabaseIdDesc { get; }
    public static string DatabaseReplicaState_AvailabilityGroupIdName { get; }
    public static string DatabaseReplicaState_AvailabilityGroupIdDesc { get; }
    public static string DatabaseReplicaState_AvailabilityReplicaIdName { get; }
    public static string DatabaseReplicaState_AvailabilityReplicaIdDesc { get; }
    public static string DatabaseReplicaState_AvailabilityDateabaseIdName { get; }
    public static string DatabaseReplicaState_AvailabilityDateabaseIdDesc { get; }
    public static string DatabaseReplicaState_AvailabilityGroupNameName { get; }
    public static string DatabaseReplicaState_AvailabilityGroupNameDesc { get; }
    public static string DatabaseReplicaState_AvailabilityReplicaServerNameName { get; }
    public static string DatabaseReplicaState_AvailabilityReplicaServerNameDesc { get; }
    public static string DatabaseReplicaState_AvailabilityDatabaseNameName { get; }
    public static string DatabaseReplicaState_AvailabilityDatabaseNameDesc { get; }
    public static string DatabaseReplicaState_ReplicaAvailabilityModeName { get; }
    public static string DatabaseReplicaState_ReplicaAvailabilityModeDesc { get; }
    public static string DatabaseReplicaState_ReplicaRoleName { get; }
    public static string DatabaseReplicaState_ReplicaRoleDesc { get; }
    public static string DatabaseReplicaState_IsLocalName { get; }
    public static string DatabaseReplicaState_IsLocalDesc { get; }
    public static string DatabaseReplicaState_IsFailoverReadyName { get; }
    public static string DatabaseReplicaState_IsFailoverReadyDesc { get; }
    public static string DatabaseReplicaState_SynchronizationStateName { get; }
    public static string DatabaseReplicaState_SynchronizationStateDesc { get; }
    public static string DatabaseReplicaState_IsSuspendedName { get; }
    public static string DatabaseReplicaState_IsSuspendedDesc { get; }
    public static string DatabaseReplicaState_SuspendReasonName { get; }
    public static string DatabaseReplicaState_SuspendReasonDesc { get; }
    public static string DatabaseReplicaState_RecoveryLSNName { get; }
    public static string DatabaseReplicaState_RecoveryLSNDesc { get; }
    public static string DatabaseReplicaState_TruncationLSNName { get; }
    public static string DatabaseReplicaState_TruncationLSNDesc { get; }
    public static string DatabaseReplicaState_LastSentLSNName { get; }
    public static string DatabaseReplicaState_LastSentLSNDesc { get; }
    public static string DatabaseReplicaState_LastSentTimeName { get; }
    public static string DatabaseReplicaState_LastSentTimeDesc { get; }
    public static string DatabaseReplicaState_LastReceivedLSNName { get; }
    public static string DatabaseReplicaState_LastReceivedLSNDesc { get; }
    public static string DatabaseReplicaState_LastReceivedTimeName { get; }
    public static string DatabaseReplicaState_LastReceivedTimeDesc { get; }
    public static string DatabaseReplicaState_LastHardenedLSNName { get; }
    public static string DatabaseReplicaState_LastHardenedLSNDesc { get; }
    public static string DatabaseReplicaState_LastHardenedTimeName { get; }
    public static string DatabaseReplicaState_LastHardenedTimeDesc { get; }
    public static string DatabaseReplicaState_LastRedoneLSNName { get; }
    public static string DatabaseReplicaState_LastRedoneLSNDesc { get; }
    public static string DatabaseReplicaState_LastRedoneTimeName { get; }
    public static string DatabaseReplicaState_LastRedoneTimeDesc { get; }
    public static string DatabaseReplicaState_LogSendQueueSizeName { get; }
    public static string DatabaseReplicaState_LogSendQueueSizeDesc { get; }
    public static string DatabaseReplicaState_LogSendRateName { get; }
    public static string DatabaseReplicaState_LogSendRateDesc { get; }
    public static string DatabaseReplicaState_RedoQueueSizeName { get; }
    public static string DatabaseReplicaState_RedoQueueSizeDesc { get; }
    public static string DatabaseReplicaState_RedoRateName { get; }
    public static string DatabaseReplicaState_RedoRateDesc { get; }
    public static string DatabaseReplicaState_FileStreamSendRateName { get; }
    public static string DatabaseReplicaState_FileStreamSendRateDesc { get; }
    public static string DatabaseReplicaState_EndOfLogLSNName { get; }
    public static string DatabaseReplicaState_EndOfLogLSNDesc { get; }
    public static string DatabaseReplicaState_LastCommitLSNName { get; }
    public static string DatabaseReplicaState_LastCommitLSNDesc { get; }
    public static string DatabaseReplicaState_LastCommitTimeName { get; }
    public static string DatabaseReplicaState_LastCommitTimeDesc { get; }
    public static string DatabaseReplicaState_EstimatedRecoveryTimeName { get; }
    public static string DatabaseReplicaState_EstimatedRecoveryTimeDesc { get; }
    public static string DatabaseReplicaState_SynchronizationPerformanceName { get; }
    public static string DatabaseReplicaState_SynchronizationPerformanceDesc { get; }
    public static string DatabaseReplicaState_IsJoinedName { get; }
    public static string DatabaseReplicaState_IsJoinedDesc { get; }
    public static string DatabaseReplicaState_EstimatedDataLossName { get; }
    public static string DatabaseReplicaState_EstimatedDataLossDesc { get; }
    public static string ResumableIndex_Name { get; }
    public static string ResumableIndex_Desc { get; }
    public static string ResumableIndex_ParentID { get; }
    public static string ResumableIndex_ParentIDDesc { get; }
    public static string ResumableIndex_ID { get; }
    public static string ResumableIndex_IDDesc { get; }
    public static string ResumableIndex_PartitionNumber { get; }
    public static string ResumableIndex_PartitionNumberDesc { get; }
    public static string ResumableIndex_SqlText { get; }
    public static string ResumableIndex_SqlTextDesc { get; }
    public static string ResumableIndex_ResumableOperationState { get; }
    public static string ResumableIndex_ResumableOperationStateDesc { get; }
    public static string ResumableIndex_StartTime { get; }
    public static string ResumableIndex_StartTimeDesc { get; }
    public static string ResumableIndex_LastPauseTime { get; }
    public static string ResumableIndex_LastPauseTimeDesc { get; }
    public static string ResumableIndex_TotalExecutionTime { get; }
    public static string ResumableIndex_TotalExecutionTimeDesc { get; }
    public static string ResumableIndex_PageCount { get; }
    public static string ResumableIndex_PageCountDesc { get; }
    public static string ResumableIndex_PercentComplete { get; }
    public static string ResumableIndex_PercentCompleteDesc { get; }
    public static string ResumableIndex_MaxDOP { get; }
    public static string ResumableIndex_MaxDOPDesc { get; }
    public static string ResumableIndex_ResumableMaxDuration { get; }
    public static string ResumableIndex_ResumableMaxDurationDesc { get; }
    public static string ResumableIndex_LowPriorityMaxDuration { get; }
    public static string ResumableIndex_LowPriorityMaxDurationDesc { get; }
    public static string ResumableIndex_LowPriorityAbortAfterWait { get; }
    public static string ResumableIndex_LowPriorityAbortAfterWaitDesc { get; }
    public static string SmartAdmin_Name { get; }
    public static string SmartAdmin_Desc { get; }
    public static string SmartAdmin_MasterSwitchName { get; }
    public static string SmartAdmin_MasterSwitchDesc { get; }
    public static string SmartAdmin_BackupRetentionPeriodInDaysName { get; }
    public static string SmartAdmin_BackupRetentionPeriodInDaysDesc { get; }
    public static string SmartAdmin_CredentialNameName { get; }
    public static string SmartAdmin_CredentialNameDesc { get; }
    public static string SmartAdmin_BackupEnabledName { get; }
    public static string SmartAdmin_BackupEnabledDesc { get; }
    public static string SmartAdmin_EncryptionAlgorithmName { get; }
    public static string SmartAdmin_EncryptionAlgorithmDesc { get; }
    public static string SmartAdmin_EncryptorNameName { get; }
    public static string SmartAdmin_EncryptorNameDesc { get; }
    public static string SmartAdmin_EncryptorTypeName { get; }
    public static string SmartAdmin_EncryptorTypeDesc { get; }
    public static string SmartAdmin_StorageUrlName { get; }
    public static string SmartAdmin_StorageUrlDesc { get; }
    public static string SmartAdmin_NoSuchDB { get; }
    public static string SmartAdmin_WrongRecords { get; }
    public static string SecurityPolicy_Name { get; }
    public static string SecurityPolicy_Desc { get; }
    public static string SecurityPolicy_NotForReplicationName { get; }
    public static string SecurityPolicy_NotForReplicationDesc { get; }
    public static string SecurityPolicy_EnabledName { get; }
    public static string SecurityPolicy_EnabledDesc { get; }
    public static string SecurityPolicy_CreateDateName { get; }
    public static string SecurityPolicy_CreateDateDesc { get; }
    public static string SecurityPolicy_DateLastModifiedName { get; }
    public static string SecurityPolicy_DateLastModifiedDesc { get; }
    public static string SecurityPolicy_IDName { get; }
    public static string SecurityPolicy_IDDesc { get; }
    public static string SecurityPolicy_IsSchemaOwnedName { get; }
    public static string SecurityPolicy_IsSchemaOwnedDesc { get; }
    public static string SecurityPolicy_IsSchemaBound { get; }
    public static string SecurityPolicy_IsSchemaBoundDesc { get; }
    public static string SecurityPolicy_OwnerName { get; }
    public static string SecurityPolicy_OwnerDesc { get; }
    public static string SecurityPredicate_Name { get; }
    public static string SecurityPredicate_Desc { get; }
    public static string SecurityPredicate_TargetObjectIDName { get; }
    public static string SecurityPredicate_TargetObjectIDDesc { get; }
    public static string SecurityPredicate_TargetObjectNameName { get; }
    public static string SecurityPredicate_TargetObjectNameDesc { get; }
    public static string SecurityPredicate_SecurityPredicateIDName { get; }
    public static string SecurityPredicate_SecurityPredicateIDDesc { get; }
    public static string SecurityPredicate_PredicateDefinitionName { get; }
    public static string SecurityPredicate_PredicateDefinitionDesc { get; }
    public static string SecurityPredicate_TargetObjectSchemaName { get; }
    public static string SecurityPredicate_TargetObjectSchemaDesc { get; }
    public static string SecurityPredicate_PredicateTypeName { get; }
    public static string SecurityPredicate_PredicateTypeDesc { get; }
    public static string SecurityPredicate_PredicateOperationName { get; }
    public static string SecurityPredicate_PredicateOperationDesc { get; }
    public static string ExternalDataSource_Name { get; }
    public static string ExternalDataSource_Desc { get; }
    public static string ExternalDataSource_IDName { get; }
    public static string ExternalDataSource_IDDesc { get; }
    public static string ExternalDataSource_LocationName { get; }
    public static string ExternalDataSource_LocationDesc { get; }
    public static string ExternalDataSource_DataSourceTypeName { get; }
    public static string ExternalDataSource_DataSourceTypeDesc { get; }
    public static string ExternalDataSource_ResourceManagerLocationName { get; }
    public static string ExternalDataSource_ResourceManagerLocationDesc { get; }
    public static string ExternalDataSource_CredentialName { get; }
    public static string ExternalDataSource_CredentialDesc { get; }
    public static string ExternalDataSource_ConnectionOptions { get; }
    public static string ExternalDataSource_ConnectionOptionsDesc { get; }
    public static string ExternalDataSource_PushdownOption { get; }
    public static string ExternalDataSource_PushdownOptionDesc { get; }
    public static string ExternalFileFormat_Name { get; }
    public static string ExternalFileFormat_Desc { get; }
    public static string ExternalFileFormat_IDName { get; }
    public static string ExternalFileFormat_IDDesc { get; }
    public static string ExternalFileFormat_FormatTypeName { get; }
    public static string ExternalFileFormat_FormatTypeDesc { get; }
    public static string ExternalFileFormat_FieldTerminatorName { get; }
    public static string ExternalFileFormat_FieldTerminatorDesc { get; }
    public static string ExternalFileFormat_StringDelimiterName { get; }
    public static string ExternalFileFormat_StringDelimiterDesc { get; }
    public static string ExternalFileFormat_DateFormatName { get; }
    public static string ExternalFileFormat_DateFormatDesc { get; }
    public static string ExternalFileFormat_UseTypeDefaultName { get; }
    public static string ExternalFileFormat_UseTypeDefaultDesc { get; }
    public static string ExternalFileFormat_SerDeMethodName { get; }
    public static string ExternalFileFormat_SerDeMethodDesc { get; }
    public static string ExternalFileFormat_RowTerminatorName { get; }
    public static string ExternalFileFormat_RowTerminatorDesc { get; }
    public static string ExternalFileFormat_EncodingName { get; }
    public static string ExternalFileFormat_EncodingDesc { get; }
    public static string ExternalFileFormat_DataCompressionName { get; }
    public static string ExternalFileFormat_DataCompressionDesc { get; }
    public static string ExternalFileFormat_RejectDbLocationName { get; }
    public static string ExternalFileFormat_RejectDbLocationDesc { get; }
    public static string ColumnMasterKey_AllowEnclaveComputationsName { get; }
    public static string ColumnMasterKey_AllowEnclaveComputationsDesc { get; }
    public static string ColumnMasterKey_Name { get; }
    public static string ColumnMasterKey_Desc { get; }
    public static string ColumnMasterKey_IDName { get; }
    public static string ColumnMasterKey_IDDesc { get; }
    public static string ColumnMasterKey_KeyStoreProviderNameName { get; }
    public static string ColumnMasterKey_KeyStoreProviderNameDesc { get; }
    public static string ColumnMasterKey_KeyPath { get; }
    public static string ColumnMasterKey_KeyPathDesc { get; }
    public static string ColumnMasterKey_CreateDateName { get; }
    public static string ColumnMasterKey_CreateDateDesc { get; }
    public static string ColumnMasterKey_DateLastModifiedName { get; }
    public static string ColumnMasterKey_DateLastModifiedDesc { get; }
    public static string ColumnMasterKey_SignatureName { get; }
    public static string ColumnMasterKey_SignatureDesc { get; }
    public static string ColumnEncryptionKey_Name { get; }
    public static string ColumnEncryptionKey_Desc { get; }
    public static string ColumnEncryptionKey_IDName { get; }
    public static string ColumnEncryptionKey_IDDesc { get; }
    public static string ColumnEncryptionKey_CreateDateName { get; }
    public static string ColumnEncryptionKey_CreateDateDesc { get; }
    public static string ColumnEncryptionKey_DateLastModifiedName { get; }
    public static string ColumnEncryptionKey_DateLastModifiedDesc { get; }
    public static string ColumnEncryptionKeyValue_Name { get; }
    public static string ColumnEncryptionKeyValue_Desc { get; }
    public static string ColumnEncryptionKeyValue_ColumnEncryptionKeyNameName { get; }
    public static string ColumnEncryptionKeyValue_ColumnEncryptionKeyNameDesc { get; }
    public static string ColumnEncryptionKeyValue_ColumnMasterKeyNameName { get; }
    public static string ColumnEncryptionKeyValue_ColumnMasterKeyNameDesc { get; }
    public static string ColumnEncryptionKeyValue_ColumnMasterKeyIDName { get; }
    public static string ColumnEncryptionKeyValue_ColumnMasterKeyIDDesc { get; }
    public static string ColumnEncryptionKeyValue_EncryptionAlgorithmName { get; }
    public static string ColumnEncryptionKeyValue_EncryptionAlgorithmDesc { get; }
    public static string ColumnEncryptionKeyValue_EncryptedValueName { get; }
    public static string ColumnEncryptionKeyValue_EncryptedValueDesc { get; }
    public static string DatabaseScopedConfiguration_Name { get; }
    public static string DatabaseScopedConfiguration_Desc { get; }
    public static string DatabaseScopedConfiguration_IDName { get; }
    public static string DatabaseScopedConfiguration_IDDesc { get; }
    public static string DatabaseScopedConfiguration_ValueName { get; }
    public static string DatabaseScopedConfiguration_ValueDesc { get; }
    public static string DatabaseScopedConfiguration_ValueForSecondaryName { get; }
    public static string DatabaseScopedConfiguration_ValueForSecondaryDesc { get; }
    public static string DatabaseScopedConfiguration_CreateScriptOnAzureDesc { get; }
    public static string ExternalStream_ID { get; }
    public static string ExternalStream_Name { get; }
    public static string ExternalStream_Type { get; }
    public static string ExternalStream_TypeDesc { get; }
    public static string ExternalStream_CreateDate { get; }
    public static string ExternalStream_IsSystemObject { get; }
    public static string ExternalStream_IsPublished { get; }
    public static string ExternalStream_IsSchemaPublished { get; }
    public static string ExternalStream_DataSourceName { get; }
    public static string ExternalStream_FileFormatName { get; }
    public static string ExternalStream_Location { get; }
    public static string ExternalStream_InputOptions { get; }
    public static string ExternalStream_OutputOptions { get; }
    public static string ExternalStreamingJob_ID { get; }
    public static string ExternalStreamingJob_Name { get; }
    public static string ExternalStreamingJob_Type { get; }
    public static string ExternalStreamingJob_TypeDesc { get; }
    public static string ExternalStreamingJob_CreateDate { get; }
    public static string ExternalStreamingJob_IsSystemObject { get; }
    public static string ExternalStreamingJob_IsPublished { get; }
    public static string ExternalStreamingJob_IsSchemaPublished { get; }
    public static string ExternalStreamingJob_Statement { get; }
    public static string ExternalStreamingJob_Status { get; }
    public static CultureInfo get_Culture();
    public static void set_Culture(CultureInfo value);
    public static string get_ScriptingParameters();
    public static string get_SourceServerVersion();
    public static string get_SourceDatabaseEngineEdition();
    public static string get_SourceDatabaseEngineType();
    public static string get_TargetServerVersion();
    public static string get_TargetDatabaseEngineEdition();
    public static string get_TargetDatabaseEngineType();
    public static string get_ServerSphinx();
    public static string get_ServerShiloh();
    public static string get_ServerYukon();
    public static string get_ServerKatmai();
    public static string get_ServerKilimanjaro();
    public static string get_ServerDenali();
    public static string get_ServerSQL14();
    public static string get_ServerSQL15();
    public static string get_ServerSQL2017();
    public static string get_ServerSQLv150();
    public static string get_ServerSQLv160();
    public static string get_EngineCloud();
    public static string get_EngineCloudMI();
    public static string get_EngineSingleton();
    public static string get_EngineDatawarehouse();
    public static string get_NamedSmoObject_NameName();
    public static string get_NamedSmoObject_NameDesc();
    public static string get_ScriptSchemaObjectBase_SchemaName();
    public static string get_ScriptSchemaObjectBase_SchemaDesc();
    public static string get_SmoObjectBase_StateName();
    public static string get_SmoObjectBase_StateDesc();
    public static string get_SqlSmoObject_UrnName();
    public static string get_SqlSmoObject_UrnDesc();
    public static string get_SmoObjectBase_UserDataName();
    public static string get_SmoObjectBase_UserDataDesc();
    public static string get_SqlSmoObject_PropertiesName();
    public static string get_SqlSmoObject_PropertiesDesc();
    public static string get_DdlTriggerBase_TextBodyName();
    public static string get_DdlTriggerBase_TextBodyDesc();
    public static string get_DdlTriggerBase_TextHeaderName();
    public static string get_DdlTriggerBase_TextHeaderDesc();
    public static string get_DdlTriggerBase_TextModeName();
    public static string get_DdlTriggerBase_TextModeDesc();
    public static string get_DefaultRuleBase_TextBodyName();
    public static string get_DefaultRuleBase_TextBodyDesc();
    public static string get_DefaultRuleBase_TextHeaderName();
    public static string get_DefaultRuleBase_TextHeaderDesc();
    public static string get_DefaultRuleBase_TextModeName();
    public static string get_DefaultRuleBase_TextModeDesc();
    public static string get_User_Name();
    public static string get_User_Desc();
    public static string get_User_AsymmetricKeyName();
    public static string get_User_AsymmetricKeyDesc();
    public static string get_User_CertificateName();
    public static string get_User_CertificateDesc();
    public static string get_User_CreateDateName();
    public static string get_User_CreateDateDesc();
    public static string get_User_DateLastModifiedName();
    public static string get_User_DateLastModifiedDesc();
    public static string get_User_DefaultSchemaName();
    public static string get_User_DefaultSchemaDesc();
    public static string get_User_HasDBAccessName();
    public static string get_User_HasDBAccessDesc();
    public static string get_User_IDName();
    public static string get_User_IDDesc();
    public static string get_User_IsSystemObjectName();
    public static string get_User_IsSystemObjectDesc();
    public static string get_User_LoginName();
    public static string get_User_LoginDesc();
    public static string get_User_LoginTypeName();
    public static string get_User_LoginTypeDesc();
    public static string get_User_SidName();
    public static string get_User_SidDesc();
    public static string get_User_UserTypeName();
    public static string get_User_UserTypeDesc();
    public static string get_User_LanguageName();
    public static string get_User_LanguageDesc();
    public static string get_User_AuthenticationTypeName();
    public static string get_User_AuthenticationTypeDesc();
    public static string get_ApplicationRole_Name();
    public static string get_ApplicationRole_Desc();
    public static string get_ApplicationRole_CreateDateName();
    public static string get_ApplicationRole_CreateDateDesc();
    public static string get_ApplicationRole_DateLastModifiedName();
    public static string get_ApplicationRole_DateLastModifiedDesc();
    public static string get_ApplicationRole_IDName();
    public static string get_ApplicationRole_IDDesc();
    public static string get_ApplicationRole_DefaultSchemaName();
    public static string get_ApplicationRole_DefaultSchemaDesc();
    public static string get_ApplicationRole_NameName();
    public static string get_ApplicationRole_NameDesc();
    public static string get_AsymmetricKey_Name();
    public static string get_AsymmetricKey_Desc();
    public static string get_AsymmetricKey_IDName();
    public static string get_AsymmetricKey_IDDesc();
    public static string get_AsymmetricKey_KeyEncryptionAlgorithmName();
    public static string get_AsymmetricKey_KeyEncryptionAlgorithmDesc();
    public static string get_AsymmetricKey_KeyLengthName();
    public static string get_AsymmetricKey_KeyLengthDesc();
    public static string get_AsymmetricKey_OwnerName();
    public static string get_AsymmetricKey_OwnerDesc();
    public static string get_AsymmetricKey_PrivateKeyEncryptionTypeName();
    public static string get_AsymmetricKey_PrivateKeyEncryptionTypeDesc();
    public static string get_AsymmetricKey_ProviderNameName();
    public static string get_AsymmetricKey_ProviderNameDesc();
    public static string get_AsymmetricKey_PublicKeyName();
    public static string get_AsymmetricKey_PublicKeyDesc();
    public static string get_AsymmetricKey_SidName();
    public static string get_AsymmetricKey_SidDesc();
    public static string get_AsymmetricKey_ThumbprintName();
    public static string get_AsymmetricKey_ThumbprintDesc();
    public static string get_AsymmetricKey_NameName();
    public static string get_AsymmetricKey_NameDesc();
    public static string get_BackupDevice_Name();
    public static string get_BackupDevice_Desc();
    public static string get_BackupDevice_BackupDeviceTypeName();
    public static string get_BackupDevice_BackupDeviceTypeDesc();
    public static string get_BackupDevice_PhysicalLocationName();
    public static string get_BackupDevice_PhysicalLocationDesc();
    public static string get_BackupDevice_SkipTapeLabelName();
    public static string get_BackupDevice_SkipTapeLabelDesc();
    public static string get_BackupDevice_NameName();
    public static string get_BackupDevice_NameDesc();
    public static string get_IDatabaseOptions_Name();
    public static string get_IDatabaseOptions_Desc();
    public static string get_Database_Name();
    public static string get_Database_Desc();
    public static string get_Database_AcceleratedRecoveryEnabledName();
    public static string get_Database_AcceleratedRecoveryEnabledDesc();
    public static string get_Database_ActiveConnectionsName();
    public static string get_Database_ActiveConnectionsDesc();
    public static string get_Database_AutoCreateStatisticsEnabledName();
    public static string get_Database_AutoCreateStatisticsEnabledDesc();
    public static string get_Database_AutoCreateIncrementalStatisticsEnabledName();
    public static string get_Database_AutoCreateIncrementalStatisticsEnabledDesc();
    public static string get_Database_AutoUpdateStatisticsEnabledName();
    public static string get_Database_AutoUpdateStatisticsEnabledDesc();
    public static string get_Database_AvailabilityGroupNameName();
    public static string get_Database_AvailabilityGroupNameDesc();
    public static string get_Database_AvailabilityDatabaseSynchronizationStateName();
    public static string get_Database_AvailabilityDatabaseSynchronizationStateDesc();
    public static string get_Database_CaseSensitiveName();
    public static string get_Database_CaseSensitiveDesc();
    public static string get_Database_CatalogCollationName();
    public static string get_Database_CatalogCollationDesc();
    public static string get_Database_CollationName();
    public static string get_Database_CollationDesc();
    public static string get_Database_CompatibilityLevelName();
    public static string get_Database_CompatibilityLevelDesc();
    public static string get_Database_CreateDateName();
    public static string get_Database_CreateDateDesc();
    public static string get_Database_DatabaseGuidName();
    public static string get_Database_DatabaseGuidDesc();
    public static string get_Database_DatabaseSnapshotBaseNameName();
    public static string get_Database_DatabaseSnapshotBaseNameDesc();
    public static string get_Database_DataRetentionEnabledName();
    public static string get_Database_DataRetentionEnabledDesc();
    public static string get_Database_DataSpaceUsageName();
    public static string get_Database_DataSpaceUsageDesc();
    public static string get_Database_DboLoginName();
    public static string get_Database_DboLoginDesc();
    public static string get_Database_DefaultFileGroupName();
    public static string get_Database_DefaultFileGroupDesc();
    public static string get_Database_DefaultFullTextCatalogName();
    public static string get_Database_DefaultFullTextCatalogDesc();
    public static string get_Database_DefaultSchemaName();
    public static string get_Database_DefaultSchemaDesc();
    public static string get_Database_HasDatabaseEncryptionKeyName();
    public static string get_Database_HasDatabaseEncryptionKeyDesc();
    public static string get_Database_IDName();
    public static string get_Database_IDDesc();
    public static string get_Database_IndexSpaceUsageName();
    public static string get_Database_IndexSpaceUsageDesc();
    public static string get_Database_IsAccessibleName();
    public static string get_Database_IsAccessibleDesc();
    public static string get_Database_IsDatabaseSnapshotName();
    public static string get_Database_IsDatabaseSnapshotDesc();
    public static string get_Database_IsDatabaseSnapshotBaseName();
    public static string get_Database_IsDatabaseSnapshotBaseDesc();
    public static string get_Database_IsDbAccessAdminName();
    public static string get_Database_IsDbAccessAdminDesc();
    public static string get_Database_IsDbBackupOperatorName();
    public static string get_Database_IsDbBackupOperatorDesc();
    public static string get_Database_IsDbDatareaderName();
    public static string get_Database_IsDbDatareaderDesc();
    public static string get_Database_IsDbDatawriterName();
    public static string get_Database_IsDbDatawriterDesc();
    public static string get_Database_IsDbDdlAdminName();
    public static string get_Database_IsDbDdlAdminDesc();
    public static string get_Database_IsDbDenyDatareaderName();
    public static string get_Database_IsDbDenyDatareaderDesc();
    public static string get_Database_IsDbDenyDatawriterName();
    public static string get_Database_IsDbDenyDatawriterDesc();
    public static string get_Database_IsDbOwnerName();
    public static string get_Database_IsDbOwnerDesc();
    public static string get_Database_IsDbSecurityAdminName();
    public static string get_Database_IsDbSecurityAdminDesc();
    public static string get_Database_IsFullTextEnabledName();
    public static string get_Database_IsFullTextEnabledDesc();
    public static string get_Database_IsLedgerName();
    public static string get_Database_IsLedgerDesc();
    public static string get_Database_IsMailHostName();
    public static string get_Database_IsMailHostDesc();
    public static string get_Database_IsManagementDataWarehouse();
    public static string get_Database_IsManagementDataWarehouseDesc();
    public static string get_Database_IsMirroringEnabledName();
    public static string get_Database_IsMirroringEnabledDesc();
    public static string get_Database_IsSqlDwName();
    public static string get_Database_IsSqlDwDesc();
    public static string get_Database_IsSystemObjectName();
    public static string get_Database_IsSystemObjectDesc();
    public static string get_Database_IsUpdateableName();
    public static string get_Database_IsUpdateableDesc();
    public static string get_Database_IsVarDecimalStorageFormatEnabledName();
    public static string get_Database_IsVarDecimalStorageFormatEnabledDesc();
    public static string get_Database_LastBackupDateName();
    public static string get_Database_LastBackupDateDesc();
    public static string get_Database_LastGoodCheckDbTimeName();
    public static string get_Database_LastGoodCheckDbTimeDesc();
    public static string get_Database_LastLogBackupDateName();
    public static string get_Database_LastLogBackupDateDesc();
    public static string get_Database_LegacyCardinalityEstimationName();
    public static string get_Database_LegacyCardinalityEstimationDesc();
    public static string get_Database_LegacyCardinalityEstimationForSecondaryName();
    public static string get_Database_LegacyCardinalityEstimationForSecondaryDesc();
    public static string get_Database_LogReuseWaitStatusName();
    public static string get_Database_LogReuseWaitStatusDesc();
    public static string get_Database_MaxDopName();
    public static string get_Database_MaxDopDesc();
    public static string get_Database_MaxDopForSecondaryName();
    public static string get_Database_MaxDopForSecondaryDesc();
    public static string get_Database_MirroringFailoverLogSequenceNumberName();
    public static string get_Database_MirroringFailoverLogSequenceNumberDesc();
    public static string get_Database_MirroringIDName();
    public static string get_Database_MirroringIDDesc();
    public static string get_Database_MirroringPartnerName();
    public static string get_Database_MirroringPartnerDesc();
    public static string get_Database_MirroringPartnerInstanceName();
    public static string get_Database_MirroringPartnerInstanceDesc();
    public static string get_Database_MirroringRoleSequenceName();
    public static string get_Database_MirroringRoleSequenceDesc();
    public static string get_Database_MirroringSafetyLevelName();
    public static string get_Database_MirroringSafetyLevelDesc();
    public static string get_Database_MirroringSafetySequenceName();
    public static string get_Database_MirroringSafetySequenceDesc();
    public static string get_Database_MirroringStatusName();
    public static string get_Database_MirroringStatusDesc();
    public static string get_Database_MirroringWitnessName();
    public static string get_Database_MirroringWitnessDesc();
    public static string get_Database_MirroringWitnessStatusName();
    public static string get_Database_MirroringWitnessStatusDesc();
    public static string get_Database_NameName();
    public static string get_Database_NameDesc();
    public static string get_Database_OwnerName();
    public static string get_Database_OwnerDesc();
    public static string get_Database_ParameterSniffingName();
    public static string get_Database_ParameterSniffingDesc();
    public static string get_Database_ParameterSniffingForSecondaryName();
    public static string get_Database_ParameterSniffingForSecondaryDesc();
    public static string get_Database_PersistentVersionStoreFileGroupName();
    public static string get_Database_PersistentVersionStoreFileGroupDesc();
    public static string get_Database_PersistentVersionStoreSizeKBName();
    public static string get_Database_PersistentVersionStoreSizeKBDesc();
    public static string get_Database_PrimaryFilePathName();
    public static string get_Database_PrimaryFilePathDesc();
    public static string get_Database_QueryOptimizerHotfixesName();
    public static string get_Database_QueryOptimizerHotfixesDesc();
    public static string get_Database_QueryOptimizerHotfixesForSecondaryName();
    public static string get_Database_QueryOptimizerHotfixesForSecondaryDesc();
    public static string get_Database_RecoveryForkGuidName();
    public static string get_Database_RecoveryForkGuidDesc();
    public static string get_Database_ReplicationOptionsName();
    public static string get_Database_ReplicationOptionsDesc();
    public static string get_Database_ServiceBrokerGuidName();
    public static string get_Database_ServiceBrokerGuidDesc();
    public static string get_Database_SizeName();
    public static string get_Database_SizeDesc();
    public static string get_Database_SpaceAvailableName();
    public static string get_Database_SpaceAvailableDesc();
    public static string get_Database_StatusName();
    public static string get_Database_StatusDesc();
    public static string get_Database_UserNameName();
    public static string get_Database_UserNameDesc();
    public static string get_Database_VersionName();
    public static string get_Database_VersionDesc();
    public static string get_Database_AnsiNullDefaultName();
    public static string get_Database_AnsiNullDefaultDesc();
    public static string get_Database_AnsiNullsEnabledName();
    public static string get_Database_AnsiNullsEnabledDesc();
    public static string get_Database_AnsiPaddingEnabledName();
    public static string get_Database_AnsiPaddingEnabledDesc();
    public static string get_Database_AnsiWarningsEnabledName();
    public static string get_Database_AnsiWarningsEnabledDesc();
    public static string get_Database_ArithmeticAbortEnabledName();
    public static string get_Database_ArithmeticAbortEnabledDesc();
    public static string get_Database_AutoCloseName();
    public static string get_Database_AutoCloseDesc();
    public static string get_Database_AutoShrinkName();
    public static string get_Database_AutoShrinkDesc();
    public static string get_Database_AutoUpdateStatisticsAsyncName();
    public static string get_Database_AutoUpdateStatisticsAsyncDesc();
    public static string get_Database_BrokerEnabledName();
    public static string get_Database_BrokerEnabledDesc();
    public static string get_Database_FilestreamDirectoryNameName();
    public static string get_Database_FilestreamDirectoryNameDesc();
    public static string get_Database_FilestreamNonTransactedAccessName();
    public static string get_Database_FilestreamNonTransactedAccessDesc();
    public static string get_Database_HonorBrokerPriorityName();
    public static string get_Database_HonorBrokerPriorityDesc();
    public static string get_Database_CloseCursorsOnCommitEnabledName();
    public static string get_Database_CloseCursorsOnCommitEnabledDesc();
    public static string get_Database_ConcatenateNullYieldsNullName();
    public static string get_Database_ConcatenateNullYieldsNullDesc();
    public static string get_Database_DatabaseOwnershipChainingName();
    public static string get_Database_DatabaseOwnershipChainingDesc();
    public static string get_Database_DateCorrelationOptimizationName();
    public static string get_Database_DateCorrelationOptimizationDesc();
    public static string get_Database_IsParameterizationForcedName();
    public static string get_Database_IsParameterizationForcedDesc();
    public static string get_Database_LocalCursorsDefaultName();
    public static string get_Database_LocalCursorsDefaultDesc();
    public static string get_Database_MirroringRedoQueueMaxSizeName();
    public static string get_Database_MirroringRedoQueueMaxSizeDesc();
    public static string get_Database_MirroringTimeoutName();
    public static string get_Database_MirroringTimeoutDesc();
    public static string get_Database_NumericRoundAbortEnabledName();
    public static string get_Database_NumericRoundAbortEnabledDesc();
    public static string get_Database_PageVerifyName();
    public static string get_Database_PageVerifyDesc();
    public static string get_Database_TargetRecoveryTimeName();
    public static string get_Database_TargetRecoveryTimeDesc();
    public static string get_Database_ParentName();
    public static string get_Database_ParentDesc();
    public static string get_Database_PropertiesName();
    public static string get_Database_PropertiesDesc();
    public static string get_Database_QuotedIdentifiersEnabledName();
    public static string get_Database_QuotedIdentifiersEnabledDesc();
    public static string get_Database_ReadOnlyName();
    public static string get_Database_ReadOnlyDesc();
    public static string get_Database_RecoveryModelName();
    public static string get_Database_RecoveryModelDesc();
    public static string get_Database_RecursiveTriggersEnabledName();
    public static string get_Database_RecursiveTriggersEnabledDesc();
    public static string get_Database_RemoteDataArchiveEnabledName();
    public static string get_Database_RemoteDataArchiveEnabledDesc();
    public static string get_Database_RemoteDataArchiveEndpointName();
    public static string get_Database_RemoteDataArchiveEndpointDesc();
    public static string get_Database_RemoteDataArchiveLinkedServerName();
    public static string get_Database_RemoteDataArchiveLinkedServerDesc();
    public static string get_Database_RemoteDatabaseNameName();
    public static string get_Database_RemoteDatabaseNameDesc();
    public static string get_Database_RemoteDataArchiveCredentialName();
    public static string get_Database_RemoteDataArchiveCredentialDesc();
    public static string get_Database_RemoteDataArchiveUseFederatedServiceAccountName();
    public static string get_Database_RemoteDataArchiveUseFederatedServiceAccountDesc();
    public static string get_Database_SnapshotIsolationStateName();
    public static string get_Database_SnapshotIsolationStateDesc();
    public static string get_Database_StateName();
    public static string get_Database_StateDesc();
    public static string get_Database_TrustworthyName();
    public static string get_Database_TrustworthyDesc();
    public static string get_Database_UrnName();
    public static string get_Database_UrnDesc();
    public static string get_Database_UserAccessName();
    public static string get_Database_UserAccessDesc();
    public static string get_Database_UserDataName();
    public static string get_Database_UserDataDesc();
    public static string get_Datababase_DefaultFileStreamFileGroupName();
    public static string get_Database_DefaultFileStreamFileGroupDesc();
    public static string get_Database_ChangeTrackingAutoCleanUpName();
    public static string get_Database_ChangeTrackingAutoCleanUpDesc();
    public static string get_Database_ChangeTrackingEnabledName();
    public static string get_Database_ChangeTrackingEnabledDesc();
    public static string get_Database_ChangeTrackingRetentionPeriodName();
    public static string get_Database_ChangeTrackingRetentionPeriodDesc();
    public static string get_Database_ChangeTrackingRetentionPeriodUnitsName();
    public static string get_Database_ChangeTrackingRetentionPeriodUnitsDesc();
    public static string get_Database_EncryptionEnabledName();
    public static string get_Database_EncryptionEnabledDesc();
    public static string get_Database_IsReadCommittedSnapshotOnName();
    public static string get_Database_IsReadCommittedSnapshotOnDesc();
    public static string get_Database_LastDifferentialBackupDateName();
    public static string get_Database_LastDifferentialBackupDateDesc();
    public static string get_Database_ContainmentTypeName();
    public static string get_Database_ContainmentTypeDesc();
    public static string get_Database_DefaultLanguageLcidName();
    public static string get_Database_DefaultLanguageLcidDesc();
    public static string get_Database_DefaultFullTextLanguageLcidName();
    public static string get_Database_DefaultFullTextLanguageLcidDesc();
    public static string get_Database_NestedTriggersEnabledName();
    public static string get_Database_NestedTriggersEnabledDesc();
    public static string get_Database_TransformNoiseWordsName();
    public static string get_Database_TransformNoiseWordsDesc();
    public static string get_Database_TwoDigitYearCutoffName();
    public static string get_Database_TwoDigitYearCutoffDesc();
    public static string get_Database_HasMemoryOptimizedObjectsName();
    public static string get_Database_HasMemoryOptimizedObjectsDesc();
    public static string get_Database_MemoryAllocatedToMemoryOptimizedObjectsInKBName();
    public static string get_Database_MemoryAllocatedToMemoryOptimizedObjectsInKBDesc();
    public static string get_Database_MemoryUsedByMemoryOptimizedObjectsInKBName();
    public static string get_Database_MemoryUsedByMemoryOptimizedObjectsInKBDesc();
    public static string get_Database_HasFileInCloudName();
    public static string get_Database_HasFileInCloudDesc();
    public static string get_Database_DelayedDurabilityName();
    public static string get_Database_DelayedDurabilityDesc();
    public static string get_DatabaseOptions_Name();
    public static string get_DatabaseOptions_Desc();
    public static string get_DatabaseOptions_AnsiNullDefaultName();
    public static string get_DatabaseOptions_AnsiNullDefaultDesc();
    public static string get_DatabaseOptions_AnsiNullsEnabledName();
    public static string get_DatabaseOptions_AnsiNullsEnabledDesc();
    public static string get_DatabaseOptions_AnsiPaddingEnabledName();
    public static string get_DatabaseOptions_AnsiPaddingEnabledDesc();
    public static string get_DatabaseOptions_AnsiWarningsEnabledName();
    public static string get_DatabaseOptions_AnsiWarningsEnabledDesc();
    public static string get_DatabaseOptions_ArithmeticAbortEnabledName();
    public static string get_DatabaseOptions_ArithmeticAbortEnabledDesc();
    public static string get_DatabaseOptions_AutoCloseName();
    public static string get_DatabaseOptions_AutoCloseDesc();
    public static string get_DatabaseOptions_AutoCreateStatisticsName();
    public static string get_DatabaseOptions_AutoCreateStatisticsDesc();
    public static string get_DatabaseOptions_AutoShrinkName();
    public static string get_DatabaseOptions_AutoShrinkDesc();
    public static string get_DatabaseOptions_AutoUpdateStatisticsName();
    public static string get_DatabaseOptions_AutoUpdateStatisticsDesc();
    public static string get_DatabaseOptions_AutoUpdateStatisticsAsyncName();
    public static string get_DatabaseOptions_AutoUpdateStatisticsAsyncDesc();
    public static string get_DatabaseOptions_BrokerEnabledName();
    public static string get_DatabaseOptions_BrokerEnabledDesc();
    public static string get_DatabaseOptions_CloseCursorsOnCommitEnabledName();
    public static string get_DatabaseOptions_CloseCursorsOnCommitEnabledDesc();
    public static string get_DatabaseOptions_ConcatenateNullYieldsNullName();
    public static string get_DatabaseOptions_ConcatenateNullYieldsNullDesc();
    public static string get_DatabaseOptions_DatabaseOwnershipChainingName();
    public static string get_DatabaseOptions_DatabaseOwnershipChainingDesc();
    public static string get_DatabaseOptions_DateCorrelationOptimizationName();
    public static string get_DatabaseOptions_DateCorrelationOptimizationDesc();
    public static string get_DatabaseOptions_IsParameterizationForcedName();
    public static string get_DatabaseOptions_IsParameterizationForcedDesc();
    public static string get_DatabaseOptions_LocalCursorsDefaultName();
    public static string get_DatabaseOptions_LocalCursorsDefaultDesc();
    public static string get_DatabaseOptions_MirroringRedoQueueMaxSizeName();
    public static string get_DatabaseOptions_MirroringRedoQueueMaxSizeDesc();
    public static string get_DatabaseOptions_MirroringTimeoutName();
    public static string get_DatabaseOptions_MirroringTimeoutDesc();
    public static string get_DatabaseOptions_NumericRoundAbortEnabledName();
    public static string get_DatabaseOptions_NumericRoundAbortEnabledDesc();
    public static string get_DatabaseOptions_PageVerifyName();
    public static string get_DatabaseOptions_PageVerifyDesc();
    public static string get_DatabaseOptions_ParentName();
    public static string get_DatabaseOptions_ParentDesc();
    public static string get_DatabaseOptions_PropertiesName();
    public static string get_DatabaseOptions_PropertiesDesc();
    public static string get_DatabaseOptions_QuotedIdentifiersEnabledName();
    public static string get_DatabaseOptions_QuotedIdentifiersEnabledDesc();
    public static string get_DatabaseOptions_ReadOnlyName();
    public static string get_DatabaseOptions_ReadOnlyDesc();
    public static string get_DatabaseOptions_RecoveryModelName();
    public static string get_DatabaseOptions_RecoveryModelDesc();
    public static string get_DatabaseOptions_RecursiveTriggersEnabledName();
    public static string get_DatabaseOptions_RecursiveTriggersEnabledDesc();
    public static string get_DatabaseOptions_SnapshotIsolationStateName();
    public static string get_DatabaseOptions_SnapshotIsolationStateDesc();
    public static string get_DatabaseOptions_StateName();
    public static string get_DatabaseOptions_StateDesc();
    public static string get_DatabaseOptions_TrustworthyName();
    public static string get_DatabaseOptions_TrustworthyDesc();
    public static string get_DatabaseOptions_UrnName();
    public static string get_DatabaseOptions_UrnDesc();
    public static string get_DatabaseOptions_UserAccessName();
    public static string get_DatabaseOptions_UserAccessDesc();
    public static string get_DatabaseOptions_UserDataName();
    public static string get_DatabaseOptions_UserDataDesc();
    public static string get_XmlSchemaCollection_Name();
    public static string get_XmlSchemaCollection_Desc();
    public static string get_XmlSchemaCollection_CreateDateName();
    public static string get_XmlSchemaCollection_CreateDateDesc();
    public static string get_XmlSchemaCollection_DateLastModifiedName();
    public static string get_XmlSchemaCollection_DateLastModifiedDesc();
    public static string get_XmlSchemaCollection_ExtendedPropertiesName();
    public static string get_XmlSchemaCollection_ExtendedPropertiesDesc();
    public static string get_XmlSchemaCollection_IDName();
    public static string get_XmlSchemaCollection_IDDesc();
    public static string get_XmlSchemaCollection_ParentName();
    public static string get_XmlSchemaCollection_ParentDesc();
    public static string get_XmlSchemaCollection_TextName();
    public static string get_XmlSchemaCollection_TextDesc();
    public static string get_View_Name();
    public static string get_View_Desc();
    public static string get_View_AnsiNullsStatusName();
    public static string get_View_AnsiNullsStatusDesc();
    public static string get_View_CreateDateName();
    public static string get_View_CreateDateDesc();
    public static string get_View_DateLastModifiedName();
    public static string get_View_DateLastModifiedDesc();
    public static string get_View_HasAfterTriggerName();
    public static string get_View_HasAfterTriggerDesc();
    public static string get_View_HasClusteredIndexName();
    public static string get_View_HasClusteredIndexDesc();
    public static string get_View_HasColumnSpecificationName();
    public static string get_View_HasColumnSpecificationDesc();
    public static string get_View_HasDeleteTriggerName();
    public static string get_View_HasDeleteTriggerDesc();
    public static string get_View_HasIndexName();
    public static string get_View_HasIndexDesc();
    public static string get_View_HasInsertTriggerName();
    public static string get_View_HasInsertTriggerDesc();
    public static string get_View_HasInsteadOfTriggerName();
    public static string get_View_HasInsteadOfTriggerDesc();
    public static string get_View_HasNonClusteredIndexName();
    public static string get_View_HasNonClusteredIndexDesc();
    public static string get_View_HasPrimaryClusteredIndexName();
    public static string get_View_HasPrimaryClusteredIndexDesc();
    public static string get_View_HasUpdateTriggerName();
    public static string get_View_HasUpdateTriggerDesc();
    public static string get_View_IDName();
    public static string get_View_IDDesc();
    public static string get_View_IsDroppedLedgerViewName();
    public static string get_View_IsDroppedLedgerViewDesc();
    public static string get_View_IsEncryptedName();
    public static string get_View_IsEncryptedDesc();
    public static string get_View_IsIndexableName();
    public static string get_View_IsIndexableDesc();
    public static string get_View_IsSchemaBoundName();
    public static string get_View_IsSchemaBoundDesc();
    public static string get_View_IsSystemObjectName();
    public static string get_View_IsSystemObjectDesc();
    public static string get_View_IsSchemaOwnedName();
    public static string get_View_IsSchemaOwnedDesc();
    public static string get_View_LedgerViewTypeName();
    public static string get_View_LedgerViewTypeDesc();
    public static string get_View_OwnerName();
    public static string get_View_OwnerDesc();
    public static string get_View_QuotedIdentifierStatusName();
    public static string get_View_QuotedIdentifierStatusDesc();
    public static string get_View_ReturnsViewMetadataName();
    public static string get_View_ReturnsViewMetadataDesc();
    public static string get_View_TextBodyName();
    public static string get_View_TextBodyDesc();
    public static string get_View_TextHeaderName();
    public static string get_View_TextHeaderDesc();
    public static string get_View_TextModeName();
    public static string get_View_TextModeDesc();
    public static string get_UserDefinedType_Name();
    public static string get_UserDefinedType_Desc();
    public static string get_UserDefinedType_AssemblyNameName();
    public static string get_UserDefinedType_AssemblyNameDesc();
    public static string get_UserDefinedType_BinaryTypeIdentifierName();
    public static string get_UserDefinedType_BinaryTypeIdentifierDesc();
    public static string get_UserDefinedType_ClassNameName();
    public static string get_UserDefinedType_ClassNameDesc();
    public static string get_UserDefinedType_CollationName();
    public static string get_UserDefinedType_CollationDesc();
    public static string get_UserDefinedType_IDName();
    public static string get_UserDefinedType_IDDesc();
    public static string get_UserDefinedType_IsBinaryOrderedName();
    public static string get_UserDefinedType_IsBinaryOrderedDesc();
    public static string get_UserDefinedType_IsComVisibleName();
    public static string get_UserDefinedType_IsComVisibleDesc();
    public static string get_UserDefinedType_IsFixedLengthName();
    public static string get_UserDefinedType_IsFixedLengthDesc();
    public static string get_UserDefinedType_IsNullableName();
    public static string get_UserDefinedType_IsNullableDesc();
    public static string get_UserDefinedType_IsSchemaOwnedName();
    public static string get_UserDefinedType_IsSchemaOwnedDesc();
    public static string get_UserDefinedType_MaxLengthName();
    public static string get_UserDefinedType_MaxLengthDesc();
    public static string get_UserDefinedType_NumericPrecisionName();
    public static string get_UserDefinedType_NumericPrecisionDesc();
    public static string get_UserDefinedType_NumericScaleName();
    public static string get_UserDefinedType_NumericScaleDesc();
    public static string get_UserDefinedType_OwnerName();
    public static string get_UserDefinedType_OwnerDesc();
    public static string get_UserDefinedType_UserDefinedTypeFormatName();
    public static string get_UserDefinedType_UserDefinedTypeFormatDesc();
    public static string get_Information_Name();
    public static string get_Information_Desc();
    public static string get_Information_CollationName();
    public static string get_Information_CollationDesc();
    public static string get_Information_EditionName();
    public static string get_Information_EditionDesc();
    public static string get_Information_IsCaseSensitiveName();
    public static string get_Information_IsCaseSensitiveDesc();
    public static string get_Information_IsClusteredName();
    public static string get_Information_IsClusteredDesc();
    public static string get_Information_IsFullTextInstalledName();
    public static string get_Information_IsFullTextInstalledDesc();
    public static string get_Information_IsSingleUserName();
    public static string get_Information_IsSingleUserDesc();
    public static string get_Information_LanguageName();
    public static string get_Information_LanguageDesc();
    public static string get_Information_MasterDBLogPathName();
    public static string get_Information_MasterDBLogPathDesc();
    public static string get_Information_MasterDBPathName();
    public static string get_Information_MasterDBPathDesc();
    public static string get_Information_MaxPrecisionName();
    public static string get_Information_MaxPrecisionDesc();
    public static string get_Information_NetNameName();
    public static string get_Information_NetNameDesc();
    public static string get_Information_OSVersionName();
    public static string get_Information_OSVersionDesc();
    public static string get_Information_ParentName();
    public static string get_Information_ParentDesc();
    public static string get_Information_PhysicalMemoryName();
    public static string get_Information_PhysicalMemoryDesc();
    public static string get_Information_PlatformName();
    public static string get_Information_PlatformDesc();
    public static string get_Information_ProcessorsName();
    public static string get_Information_ProcessorsDesc();
    public static string get_Information_ProductName();
    public static string get_Information_ProductDesc();
    public static string get_Information_ProductLevelName();
    public static string get_Information_ProductLevelDesc();
    public static string get_Information_RootDirectoryName();
    public static string get_Information_RootDirectoryDesc();
    public static string get_Information_VersionName();
    public static string get_Information_VersionDesc();
    public static string get_Information_VersionStringName();
    public static string get_Information_VersionStringDesc();
    public static string get_Table_IsMemoryOptimizedName();
    public static string get_Table_IsMemoryOptimizedDesc();
    public static string get_Table_DurabilityName();
    public static string get_Table_DurabilityDesc();
    public static string get_ISettings_Name();
    public static string get_ISettings_Desc();
    public static string get_Settings_AuditLevelName();
    public static string get_Settings_AuditLevelDesc();
    public static string get_Settings_BackupDirectoryName();
    public static string get_Settings_BackupDirectoryDesc();
    public static string get_Settings_DefaultFileName();
    public static string get_Settings_DefaultFileDesc();
    public static string get_Settings_DefaultLogName();
    public static string get_Settings_DefaultLogDesc();
    public static string get_Settings_ImpersonateClientName();
    public static string get_Settings_ImpersonateClientDesc();
    public static string get_Settings_LoginModeName();
    public static string get_Settings_LoginModeDesc();
    public static string get_Settings_MailProfileName();
    public static string get_Settings_MailProfileDesc();
    public static string get_Settings_NumberOfLogFilesName();
    public static string get_Settings_NumberOfLogFilesDesc();
    public static string get_Settings_ParentName();
    public static string get_Settings_ParentDesc();
    public static string get_ServerConfiguration_Name();
    public static string get_ServerConfiguration_Desc();
    public static string get_ServerConfiguration_ContainmentEnabledName();
    public static string get_ServerConfiguration_ContainmentEnabledDesc();
    public static string get_ServerConfiguration_AdHocDistributedQueriesEnabledName();
    public static string get_ServerConfiguration_AdHocDistributedQueriesEnabledDesc();
    public static string get_ServerConfiguration_Affinity64MaskName();
    public static string get_ServerConfiguration_Affinity64MaskDesc();
    public static string get_ServerConfiguration_AffinityIOMaskName();
    public static string get_ServerConfiguration_AffinityIOMaskDesc();
    public static string get_ServerConfiguration_AffinityMaskName();
    public static string get_ServerConfiguration_AffinityMaskDesc();
    public static string get_ServerConfiguration_AgentXPsEnabledName();
    public static string get_ServerConfiguration_AgentXPsEnabledDesc();
    public static string get_ServerConfiguration_AllowedHttpSessionsName();
    public static string get_ServerConfiguration_AllowedHttpSessionsDesc();
    public static string get_ServerConfiguration_AllowUpdatesName();
    public static string get_ServerConfiguration_AllowUpdatesDesc();
    public static string get_ServerConfiguration_AweEnabledName();
    public static string get_ServerConfiguration_AweEnabledDesc();
    public static string get_ServerConfiguration_C2AuditModeName();
    public static string get_ServerConfiguration_C2AuditModeDesc();
    public static string get_ServerConfiguration_CostThresholdForParallelismName();
    public static string get_ServerConfiguration_CostThresholdForParallelismDesc();
    public static string get_ServerConfiguration_CrossDBOwnershipChainingName();
    public static string get_ServerConfiguration_CrossDBOwnershipChainingDesc();
    public static string get_ServerConfiguration_CursorThresholdName();
    public static string get_ServerConfiguration_CursorThresholdDesc();
    public static string get_ServerConfiguration_DatabaseMailEnabledName();
    public static string get_ServerConfiguration_DatabaseMailEnabledDesc();
    public static string get_ServerConfiguration_DefaultFullTextLanguageName();
    public static string get_ServerConfiguration_DefaultFullTextLanguageDesc();
    public static string get_ServerConfiguration_DefaultLanguageName();
    public static string get_ServerConfiguration_DefaultLanguageDesc();
    public static string get_ServerConfiguration_FilestreamAccessLevelName();
    public static string get_ServerConfiguration_FilestreamAccessLevelDesc();
    public static string get_ServerConfiguration_FillFactorName();
    public static string get_ServerConfiguration_FillFactorDesc();
    public static string get_ServerConfiguration_HttpConnectionIdleMaximumTimeName();
    public static string get_ServerConfiguration_HttpConnectionIdleMaximumTimeDesc();
    public static string get_ServerConfiguration_HttpSessionIdleMaximumTimeName();
    public static string get_ServerConfiguration_HttpSessionIdleMaximumTimeDesc();
    public static string get_ServerConfiguration_IndexCreateMemoryName();
    public static string get_ServerConfiguration_IndexCreateMemoryDesc();
    public static string get_ServerConfiguration_IsSqlClrEnabledName();
    public static string get_ServerConfiguration_IsSqlClrEnabledDesc();
    public static string get_ServerConfiguration_LightweightPoolingName();
    public static string get_ServerConfiguration_LightweightPoolingDesc();
    public static string get_ServerConfiguration_LocksName();
    public static string get_ServerConfiguration_LocksDesc();
    public static string get_ServerConfiguration_MaxDegreeOfParallelismName();
    public static string get_ServerConfiguration_MaxDegreeOfParallelismDesc();
    public static string get_ServerConfiguration_MaxServerMemoryName();
    public static string get_ServerConfiguration_MaxServerMemoryDesc();
    public static string get_ServerConfiguration_MaxWorkerThreadsName();
    public static string get_ServerConfiguration_MaxWorkerThreadsDesc();
    public static string get_ServerConfiguration_MediaRetentionName();
    public static string get_ServerConfiguration_MediaRetentionDesc();
    public static string get_ServerConfiguration_MinMemoryPerQueryName();
    public static string get_ServerConfiguration_MinMemoryPerQueryDesc();
    public static string get_ServerConfiguration_OptimizeAdhocWorkloadsName();
    public static string get_ServerConfiguration_OptimizeAdhocWorkloadsDesc();
    public static string get_ServerConfiguration_MinServerMemoryName();
    public static string get_ServerConfiguration_MinServerMemoryDesc();
    public static string get_ServerConfiguration_NestedTriggersName();
    public static string get_ServerConfiguration_NestedTriggersDesc();
    public static string get_ServerConfiguration_NetworkPacketSizeName();
    public static string get_ServerConfiguration_NetworkPacketSizeDesc();
    public static string get_ServerConfiguration_OleAutomationProceduresEnabledName();
    public static string get_ServerConfiguration_OleAutomationProceduresEnabledDesc();
    public static string get_ServerConfiguration_OpenObjectsName();
    public static string get_ServerConfiguration_OpenObjectsDesc();
    public static string get_ServerConfiguration_PrecomputeRankName();
    public static string get_ServerConfiguration_PrecomputeRankDesc();
    public static string get_ServerConfiguration_PriorityBoostName();
    public static string get_ServerConfiguration_PriorityBoostDesc();
    public static string get_ServerConfiguration_ProtocolHandlerTimeoutName();
    public static string get_ServerConfiguration_ProtocolHandlerTimeoutDesc();
    public static string get_ServerConfiguration_QueryGovernorCostLimitName();
    public static string get_ServerConfiguration_QueryGovernorCostLimitDesc();
    public static string get_ServerConfiguration_QueryWaitName();
    public static string get_ServerConfiguration_QueryWaitDesc();
    public static string get_ServerConfiguration_RecoveryIntervalName();
    public static string get_ServerConfiguration_RecoveryIntervalDesc();
    public static string get_ServerConfiguration_RemoteAccessName();
    public static string get_ServerConfiguration_RemoteAccessDesc();
    public static string get_ServerConfiguration_RemoteDacConnectionsEnabledName();
    public static string get_ServerConfiguration_RemoteDacConnectionsEnabledDesc();
    public static string get_ServerConfiguration_RemoteLoginTimeoutName();
    public static string get_ServerConfiguration_RemoteLoginTimeoutDesc();
    public static string get_ServerConfiguration_RemoteProcTransName();
    public static string get_ServerConfiguration_RemoteProcTransDesc();
    public static string get_ServerConfiguration_RemoteQueryTimeoutName();
    public static string get_ServerConfiguration_RemoteQueryTimeoutDesc();
    public static string get_ServerConfiguration_ReplicationMaxTextSizeName();
    public static string get_ServerConfiguration_ReplicationMaxTextSizeDesc();
    public static string get_ServerConfiguration_ReplicationXPsEnabledName();
    public static string get_ServerConfiguration_ReplicationXPsEnabledDesc();
    public static string get_ServerConfiguration_ScanForStartupProceduresName();
    public static string get_ServerConfiguration_ScanForStartupProceduresDesc();
    public static string get_ServerConfiguration_SetWorkingSetSizeName();
    public static string get_ServerConfiguration_SetWorkingSetSizeDesc();
    public static string get_ServerConfiguration_ShowAdvancedOptionsName();
    public static string get_ServerConfiguration_ShowAdvancedOptionsDesc();
    public static string get_ServerConfiguration_SmoAndDmoXPsEnabledName();
    public static string get_ServerConfiguration_SmoAndDmoXPsEnabledDesc();
    public static string get_ServerConfiguration_SqlMailXPsEnabledName();
    public static string get_ServerConfiguration_SqlMailXPsEnabledDesc();
    public static string get_ServerConfiguration_TransformNoiseWordsName();
    public static string get_ServerConfiguration_TransformNoiseWordsDesc();
    public static string get_ServerConfiguration_TwoDigitYearCutoffName();
    public static string get_ServerConfiguration_TwoDigitYearCutoffDesc();
    public static string get_ServerConfiguration_UserConnectionsName();
    public static string get_ServerConfiguration_UserConnectionsDesc();
    public static string get_ServerConfiguration_UserOptionsName();
    public static string get_ServerConfiguration_UserOptionsDesc();
    public static string get_ServerConfiguration_WebXPsEnabledName();
    public static string get_ServerConfiguration_WebXPsEnabledDesc();
    public static string get_ServerConfiguration_XPCmdShellEnabledName();
    public static string get_ServerConfiguration_XPCmdShellEnabledDesc();
    public static string get_Login_Name();
    public static string get_Login_Desc();
    public static string get_Login_AsymmetricKeyName();
    public static string get_Login_AsymmetricKeyDesc();
    public static string get_Login_CreateDateName();
    public static string get_Login_CreateDateDesc();
    public static string get_Login_CertificateName();
    public static string get_Login_CertificateDesc();
    public static string get_Login_CredentialName();
    public static string get_Login_CredentialDesc();
    public static string get_Login_DateLastModifiedName();
    public static string get_Login_DateLastModifiedDesc();
    public static string get_Login_DefaultDatabaseName();
    public static string get_Login_DefaultDatabaseDesc();
    public static string get_Login_DenyWindowsLoginName();
    public static string get_Login_DenyWindowsLoginDesc();
    public static string get_Login_EventsName();
    public static string get_Login_EventsDesc();
    public static string get_Login_HasAccessName();
    public static string get_Login_HasAccessDesc();
    public static string get_Login_IDName();
    public static string get_Login_IDDesc();
    public static string get_Login_IsDisabledName();
    public static string get_Login_IsDisabledDesc();
    public static string get_Login_IsLockedName();
    public static string get_Login_IsLockedDesc();
    public static string get_Login_IsPasswordExpiredName();
    public static string get_Login_IsPasswordExpiredDesc();
    public static string get_Login_IsSystemObjectName();
    public static string get_Login_IsSystemObjectDesc();
    public static string get_Login_LanguageName();
    public static string get_Login_LanguageDesc();
    public static string get_Login_LanguageAliasName();
    public static string get_Login_LanguageAliasDesc();
    public static string get_Login_LoginTypeName();
    public static string get_Login_LoginTypeDesc();
    public static string get_Login_MustChangePasswordName();
    public static string get_Login_MustChangePasswordDesc();
    public static string get_Login_PasswordExpirationEnabledName();
    public static string get_Login_PasswordExpirationEnabledDesc();
    public static string get_Login_PasswordPolicyEnforcedName();
    public static string get_Login_PasswordPolicyEnforcedDesc();
    public static string get_Login_SidName();
    public static string get_Login_SidDesc();
    public static string get_Login_WindowsLoginAccessTypeName();
    public static string get_Login_WindowsLoginAccessTypeDesc();
    public static string get_Login_PasswordHashAlgorithmName();
    public static string get_Login_PasswordHashAlgorithmDesc();
    public static string get_Index_Name();
    public static string get_Index_Desc();
    public static string get_Index_HasCompressedPartitionsName();
    public static string get_Index_HasCompressedPartitionsDesc();
    public static string get_Index_HasSparseColumnName();
    public static string get_Index_HasSparseColumnDesc();
    public static string get_Index_CompactLargeObjectsName();
    public static string get_Index_CompactLargeObjectsDesc();
    public static string get_Index_HasXmlCompressedPartitionsName();
    public static string get_Index_HasXmlCompressedPartitionsDesc();
    public static string get_Index_DisallowPageLocksName();
    public static string get_Index_DisallowPageLocksDesc();
    public static string get_Index_DisallowRowLocksName();
    public static string get_Index_DisallowRowLocksDesc();
    public static string get_Index_EventsName();
    public static string get_Index_EventsDesc();
    public static string get_Index_FileGroupName();
    public static string get_Index_FileGroupDesc();
    public static string get_Index_FileStreamFileGroupName();
    public static string get_Index_FileStreamFileGroupDesc();
    public static string get_Index_FileStreamPartitionSchemeName();
    public static string get_Index_FileStreamPartitionSchemeDesc();
    public static string get_Index_FillFactorName();
    public static string get_Index_FillFactorDesc();
    public static string get_Index_IDName();
    public static string get_Index_IDDesc();
    public static string get_Index_IgnoreDuplicateKeysName();
    public static string get_Index_IgnoreDuplicateKeysDesc();
    public static string get_Index_IndexKeyTypeName();
    public static string get_Index_IndexKeyTypeDesc();
    public static string get_Index_IsClusteredName();
    public static string get_Index_IsClusteredDesc();
    public static string get_Index_IsDisabledName();
    public static string get_Index_IsDisabledDesc();
    public static string get_Index_IsFileTableDefinedName();
    public static string get_Index_IsFileTableDefinedDesc();
    public static string get_Index_IsFullTextKeyName();
    public static string get_Index_IsFullTextKeyDesc();
    public static string get_Index_IsIndexOnComputedName();
    public static string get_Index_IsIndexOnComputedDesc();
    public static string get_Index_IsIndexOnTableName();
    public static string get_Index_IsIndexOnTableDesc();
    public static string get_Index_IsOptimizedForSequentialKeyName();
    public static string get_Index_IsOptimizedForSequentialKeyDesc();
    public static string get_Index_IsPartitionedName();
    public static string get_Index_IsPartitionedDesc();
    public static string get_Index_IsSystemNamedName();
    public static string get_Index_IsSystemNamedDesc();
    public static string get_Index_IsSystemObjectName();
    public static string get_Index_IsSystemObjectDesc();
    public static string get_Index_IsUniqueName();
    public static string get_Index_IsUniqueDesc();
    public static string get_Index_IsXmlIndexName();
    public static string get_Index_IsXmlIndexDesc();
    public static string get_Index_MaximumDegreeOfParallelismName();
    public static string get_Index_MaximumDegreeOfParallelismDesc();
    public static string get_Index_NoAutomaticRecomputationName();
    public static string get_Index_NoAutomaticRecomputationDesc();
    public static string get_Index_OnlineIndexOperationName();
    public static string get_Index_OnlineIndexOperationDesc();
    public static string get_Index_PadIndexName();
    public static string get_Index_PadIndexDesc();
    public static string get_Index_ParentXmlIndexName();
    public static string get_Index_ParentXmlIndexDesc();
    public static string get_Index_PartitionSchemeName();
    public static string get_Index_PartitionSchemeDesc();
    public static string get_Index_ResumableOperationStateName();
    public static string get_Index_ResumableOperationStateDesc();
    public static string get_Index_SecondaryXmlIndexTypeName();
    public static string get_Index_SecondaryXmlIndexTypeDesc();
    public static string get_Index_SortInTempdbName();
    public static string get_Index_SortInTempdbDesc();
    public static string get_Index_SpaceUsedName();
    public static string get_Index_SpaceUsedDesc();
    public static string get_Index_BoundingBoxXMaxName();
    public static string get_Index_BoundingBoxXMaxDesc();
    public static string get_Index_BoundingBoxXMinName();
    public static string get_Index_BoundingBoxXMinDesc();
    public static string get_Index_BoundingBoxYMaxName();
    public static string get_Index_BoundingBoxYMaxDesc();
    public static string get_Index_BoundingBoxYMin();
    public static string get_Index_BoundingBoxYMinDesc();
    public static string get_Index_CellsPerObjectName();
    public static string get_Index_CellsPerObjectDesc();
    public static string get_Index_IsSpatialIndexName();
    public static string get_Index_IsSpatialIndexDesc();
    public static string get_Index_Level1Grid();
    public static string get_Index_Level1GridDesc();
    public static string get_Index_Level2GridName();
    public static string get_Index_Level2GridDesc();
    public static string get_Index_Level3GridName();
    public static string get_Index_Level3GridDesc();
    public static string get_Index_Level4GridName();
    public static string get_Index_Level4GridDesc();
    public static string get_Index_HasFilterName();
    public static string get_Index_HasFilterDesc();
    public static string get_Index_FilterDefinitionName();
    public static string get_Index_FilterDefinitionDesc();
    public static string get_Index_SpatialIndexTypeName();
    public static string get_Index_SpatialIndexTypeDesc();
    public static string get_Index_IndexTypeName();
    public static string get_Index_IndexTypeDesc();
    public static string get_Index_BucketCountName();
    public static string get_Index_BucketCountDesc();
    public static string get_Index_IndexedXmlPathNameName();
    public static string get_Index_IndexedXmlPathNameDesc();
    public static string get_Index_IsMemoryOptimizedName();
    public static string get_Index_IsMemoryOptimizedDesc();
    public static string get_Index_CompressionDelayName();
    public static string get_Index_CompressionDelayDesc();
    public static string get_Rule_Name();
    public static string get_Rule_Desc();
    public static string get_Rule_CreateDateName();
    public static string get_Rule_CreateDateDesc();
    public static string get_Rule_DateLastModifiedName();
    public static string get_Rule_DateLastModifiedDesc();
    public static string get_Rule_IDName();
    public static string get_Rule_IDDesc();
    public static string get_LogFile_Name();
    public static string get_LogFile_Desc();
    public static string get_LogFile_FileNameName();
    public static string get_LogFile_FileNameDesc();
    public static string get_LogFile_GrowthName();
    public static string get_LogFile_GrowthDesc();
    public static string get_LogFile_GrowthTypeName();
    public static string get_LogFile_GrowthTypeDesc();
    public static string get_LogFile_IDName();
    public static string get_LogFile_IDDesc();
    public static string get_LogFile_IsOfflineName();
    public static string get_LogFile_IsOfflineDesc();
    public static string get_LogFile_IsReadOnlyName();
    public static string get_LogFile_IsReadOnlyDesc();
    public static string get_LogFile_IsReadOnlyMediaName();
    public static string get_LogFile_IsReadOnlyMediaDesc();
    public static string get_LogFile_IsSparseName();
    public static string get_LogFile_IsSparseDesc();
    public static string get_LogFile_MaxSizeName();
    public static string get_LogFile_MaxSizeDesc();
    public static string get_LogFile_NumberOfDiskReadsName();
    public static string get_LogFile_NumberOfDiskReadsDesc();
    public static string get_LogFile_NumberOfDiskWritesName();
    public static string get_LogFile_NumberOfDiskWritesDesc();
    public static string get_LogFile_BytesReadFromDiskName();
    public static string get_LogFile_BytesReadFromDiskDesc();
    public static string get_LogFile_BytesWrittenToDiskName();
    public static string get_LogFile_BytesWrittenToDiskDesc();
    public static string get_LogFile_SizeName();
    public static string get_LogFile_SizeDesc();
    public static string get_LogFile_UsedSpaceName();
    public static string get_LogFile_UsedSpaceDesc();
    public static string get_LogFile_VolumeFreeSpaceName();
    public static string get_LogFile_VolumeFreeSpaceDesc();
    public static string get_LinkedServer_Name();
    public static string get_LinkedServer_Desc();
    public static string get_LinkedServer_CatalogName();
    public static string get_LinkedServer_CatalogDesc();
    public static string get_LinkedServer_CollationCompatibleName();
    public static string get_LinkedServer_CollationCompatibleDesc();
    public static string get_LinkedServer_CollationNameName();
    public static string get_LinkedServer_CollationNameDesc();
    public static string get_LinkedServer_ConnectTimeoutName();
    public static string get_LinkedServer_ConnectTimeoutDesc();
    public static string get_LinkedServer_DataAccessName();
    public static string get_LinkedServer_DataAccessDesc();
    public static string get_LinkedServer_DataSourceName();
    public static string get_LinkedServer_DataSourceDesc();
    public static string get_LinkedServer_DateLastModifiedName();
    public static string get_LinkedServer_DateLastModifiedDesc();
    public static string get_LinkedServer_DistPublisherName();
    public static string get_LinkedServer_DistPublisherDesc();
    public static string get_LinkedServer_DistributorName();
    public static string get_LinkedServer_DistributorDesc();
    public static string get_LinkedServer_IDName();
    public static string get_LinkedServer_IDDesc();
    public static string get_LinkedServer_LazySchemaValidationName();
    public static string get_LinkedServer_LazySchemaValidationDesc();
    public static string get_LinkedServer_LocationName();
    public static string get_LinkedServer_LocationDesc();
    public static string get_LinkedServer_ProductNameName();
    public static string get_LinkedServer_ProductNameDesc();
    public static string get_LinkedServer_ProviderNameName();
    public static string get_LinkedServer_ProviderNameDesc();
    public static string get_LinkedServer_ProviderStringName();
    public static string get_LinkedServer_ProviderStringDesc();
    public static string get_LinkedServer_PublisherName();
    public static string get_LinkedServer_PublisherDesc();
    public static string get_LinkedServer_QueryTimeoutName();
    public static string get_LinkedServer_QueryTimeoutDesc();
    public static string get_LinkedServer_RpcName();
    public static string get_LinkedServer_RpcDesc();
    public static string get_LinkedServer_RpcOutName();
    public static string get_LinkedServer_RpcOutDesc();
    public static string get_LinkedServer_SubscriberName();
    public static string get_LinkedServer_SubscriberDesc();
    public static string get_LinkedServer_UseRemoteCollationName();
    public static string get_LinkedServer_UseRemoteCollationDesc();
    public static string get_LinkedServer_IsPromotionofDistributedTransactionsForRPCEnabledName();
    public static string get_LinkedServer_IsPromotionofDistributedTransactionsForRPCEnabledDesc();
    public static string get_DataFile_Name();
    public static string get_DataFile_Desc();
    public static string get_DataFile_AvailableSpaceName();
    public static string get_DataFile_AvailableSpaceDesc();
    public static string get_DataFile_FileNameName();
    public static string get_DataFile_FileNameDesc();
    public static string get_DataFile_GrowthName();
    public static string get_DataFile_GrowthDesc();
    public static string get_DataFile_GrowthTypeName();
    public static string get_DataFile_GrowthTypeDesc();
    public static string get_DataFile_IDName();
    public static string get_DataFile_IDDesc();
    public static string get_DataFile_IsOfflineName();
    public static string get_DataFile_IsOfflineDesc();
    public static string get_DataFile_IsPrimaryFileName();
    public static string get_DataFile_IsPrimaryFileDesc();
    public static string get_DataFile_IsReadOnlyName();
    public static string get_DataFile_IsReadOnlyDesc();
    public static string get_DataFile_IsReadOnlyMediaName();
    public static string get_DataFile_IsReadOnlyMediaDesc();
    public static string get_DataFile_IsSparseName();
    public static string get_DataFile_IsSparseDesc();
    public static string get_DataFile_MaxSizeName();
    public static string get_DataFile_MaxSizeDesc();
    public static string get_DataFile_NumberOfDiskReadsName();
    public static string get_DataFile_NumberOfDiskReadsDesc();
    public static string get_DataFile_NumberOfDiskWritesName();
    public static string get_DataFile_NumberOfDiskWritesDesc();
    public static string get_DataFile_BytesReadFromDiskName();
    public static string get_DataFile_BytesReadFromDiskDesc();
    public static string get_DataFile_BytesWrittenToDiskName();
    public static string get_DataFile_BytesWrittenToDiskDesc();
    public static string get_DataFile_SizeName();
    public static string get_DataFile_SizeDesc();
    public static string get_DataFile_UsedSpaceName();
    public static string get_DataFile_UsedSpaceDesc();
    public static string get_DataFile_VolumeFreeSpaceName();
    public static string get_DataFile_VolumeFreeSpaceDesc();
    public static string get_DatabaseRole_Name();
    public static string get_DatabaseRole_Desc();
    public static string get_DatabaseRole_CreateDateName();
    public static string get_DatabaseRole_CreateDateDesc();
    public static string get_DatabaseRole_DateLastModifiedName();
    public static string get_DatabaseRole_DateLastModifiedDesc();
    public static string get_DatabaseRole_IDName();
    public static string get_DatabaseRole_IDDesc();
    public static string get_DatabaseRole_IsFixedRoleName();
    public static string get_DatabaseRole_IsFixedRoleDesc();
    public static string get_DatabaseRole_OwnerName();
    public static string get_DatabaseRole_OwnerDesc();
    public static string get_ServerRole_Name();
    public static string get_ServerRole_Desc();
    public static string get_ServerRole_DateCreatedName();
    public static string get_ServerRole_DateCreatedDesc();
    public static string get_ServerRole_DateModifiedName();
    public static string get_ServerRole_DateModifiedDesc();
    public static string get_ServerRole_IDName();
    public static string get_ServerRole_IDDesc();
    public static string get_ServerRole_IsFixedRoleName();
    public static string get_ServerRole_IsFixedRoleDesc();
    public static string get_ServerRole_OwnerName();
    public static string get_ServerRole_OwnerDesc();
    public static string get_DatabaseDdlTrigger_Name();
    public static string get_DatabaseDdlTrigger_Desc();
    public static string get_DatabaseDdlTrigger_AnsiNullsStatusName();
    public static string get_DatabaseDdlTrigger_AnsiNullsStatusDesc();
    public static string get_DatabaseDdlTrigger_AssemblyNameName();
    public static string get_DatabaseDdlTrigger_AssemblyNameDesc();
    public static string get_DatabaseDdlTrigger_BodyStartIndexName();
    public static string get_DatabaseDdlTrigger_BodyStartIndexDesc();
    public static string get_DatabaseDdlTrigger_ClassNameName();
    public static string get_DatabaseDdlTrigger_ClassNameDesc();
    public static string get_DatabaseDdlTrigger_CreateDateName();
    public static string get_DatabaseDdlTrigger_CreateDateDesc();
    public static string get_DatabaseDdlTrigger_DateLastModifiedName();
    public static string get_DatabaseDdlTrigger_DateLastModifiedDesc();
    public static string get_DatabaseDdlTrigger_DdlTriggerEventsName();
    public static string get_DatabaseDdlTrigger_DdlTriggerEventsDesc();
    public static string get_DatabaseDdlTrigger_IDName();
    public static string get_DatabaseDdlTrigger_IDDesc();
    public static string get_DatabaseDdlTrigger_ImplementationTypeName();
    public static string get_DatabaseDdlTrigger_ImplementationTypeDesc();
    public static string get_DatabaseDdlTrigger_IsEnabledName();
    public static string get_DatabaseDdlTrigger_IsEnabledDesc();
    public static string get_DatabaseDdlTrigger_IsEncryptedName();
    public static string get_DatabaseDdlTrigger_IsEncryptedDesc();
    public static string get_DatabaseDdlTrigger_IsSystemObjectName();
    public static string get_DatabaseDdlTrigger_IsSystemObjectDesc();
    public static string get_DatabaseDdlTrigger_MethodNameName();
    public static string get_DatabaseDdlTrigger_MethodNameDesc();
    public static string get_DatabaseDdlTrigger_NotForReplicationName();
    public static string get_DatabaseDdlTrigger_NotForReplicationDesc();
    public static string get_DatabaseDdlTrigger_QuotedIdentifierStatusName();
    public static string get_DatabaseDdlTrigger_QuotedIdentifierStatusDesc();
    public static string get_DatabaseDdlTrigger_TextName();
    public static string get_DatabaseDdlTrigger_TextDesc();
    public static string get_DatabaseDdlTrigger_ExecutionContextName();
    public static string get_DatabaseDdlTrigger_ExecutionContextDesc();
    public static string get_DatabaseDdlTrigger_ExecutionContextUserName();
    public static string get_DatabaseDdlTrigger_ExecutionContextUserDesc();
    public static string get_Synonym_Name();
    public static string get_Synonym_Desc();
    public static string get_Synonym_BaseTypeName();
    public static string get_Synonym_BaseTypeDesc();
    public static string get_Synonym_BaseDatabaseName();
    public static string get_Synonym_BaseDatabaseDesc();
    public static string get_Synonym_BaseObjectName();
    public static string get_Synonym_BaseObjectDesc();
    public static string get_Synonym_BaseSchemaName();
    public static string get_Synonym_BaseSchemaDesc();
    public static string get_Synonym_BaseServerName();
    public static string get_Synonym_BaseServerDesc();
    public static string get_Synonym_CreateDateName();
    public static string get_Synonym_CreateDateDesc();
    public static string get_Synonym_DateLastModifiedName();
    public static string get_Synonym_DateLastModifiedDesc();
    public static string get_Synonym_EventsName();
    public static string get_Synonym_EventsDesc();
    public static string get_Synonym_IDName();
    public static string get_Synonym_IDDesc();
    public static string get_Synonym_OwnerName();
    public static string get_Synonym_OwnerDesc();
    public static string get_Sequence_Name();
    public static string get_Sequence_Desc();
    public static string get_Sequence_CacheSizeName();
    public static string get_Sequence_CacheSizeDesc();
    public static string get_Sequence_CreateDateName();
    public static string get_Sequence_CreateDateDesc();
    public static string get_Sequence_DataTypeName();
    public static string get_Sequence_DataTypeDesc();
    public static string get_Sequence_DateLastModifiedName();
    public static string get_Sequence_DateLastModifiedDesc();
    public static string get_Sequence_IDName();
    public static string get_Sequence_IDDesc();
    public static string get_Sequence_IsCycleEnabledName();
    public static string get_Sequence_IsCycleEnabledDesc();
    public static string get_Sequence_IsSchemaOwnedName();
    public static string get_Sequence_IsSchemaOwnedDesc();
    public static string get_Sequence_NumericPrecisionName();
    public static string get_Sequence_NumericPrecisionDesc();
    public static string get_Sequence_NumericScaleName();
    public static string get_Sequence_NumericScaleDesc();
    public static string get_Sequence_OwnerName();
    public static string get_Sequence_OwnerDesc();
    public static string get_Sequence_SequenceCacheTypeName();
    public static string get_Sequence_SequenceCacheTypeDesc();
    public static string get_Sequence_IncrementValueName();
    public static string get_Sequence_IncrementValueDesc();
    public static string get_Sequence_MinValueName();
    public static string get_Sequence_MinValueDesc();
    public static string get_Sequence_MaxValueName();
    public static string get_Sequence_MaxValueDesc();
    public static string get_Sequence_StartValueName();
    public static string get_Sequence_StartValueDesc();
    public static string get_Sequence_CurrentValueName();
    public static string get_Sequence_CurrentValueDesc();
    public static string get_Sequence_IsExhaustedName();
    public static string get_Sequence_IsExhaustedDesc();
    public static string get_SymmetricKey_Name();
    public static string get_SymmetricKey_Desc();
    public static string get_SymmetricKey_CreateDateName();
    public static string get_SymmetricKey_CreateDateDesc();
    public static string get_SymmetricKey_DateLastModifiedName();
    public static string get_SymmetricKey_DateLastModifiedDesc();
    public static string get_SymmetricKey_EncryptionAlgorithmName();
    public static string get_SymmetricKey_EncryptionAlgorithmDesc();
    public static string get_SymmetricKey_IDName();
    public static string get_SymmetricKey_IDDesc();
    public static string get_SymmetricKey_IsOpenName();
    public static string get_SymmetricKey_IsOpenDesc();
    public static string get_Synonym_IsSchemaOwnedName();
    public static string get_Synonym_IsSchemaOwnedDesc();
    public static string get_SymmetricKey_KeyGuidName();
    public static string get_SymmetricKey_KeyGuidDesc();
    public static string get_SymmetricKey_KeyLengthName();
    public static string get_SymmetricKey_KeyLengthDesc();
    public static string get_SymmetricKey_OwnerName();
    public static string get_SymmetricKey_OwnerDesc();
    public static string get_SymmetricKey_ProviderNameName();
    public static string get_SymmetricKey_ProviderNameDesc();
    public static string get_StoredProcedure_Name();
    public static string get_StoredProcedure_Desc();
    public static string get_StoredProcedure_AnsiNullsStatusName();
    public static string get_StoredProcedure_AnsiNullsStatusDesc();
    public static string get_StoredProcedure_AssemblyNameName();
    public static string get_StoredProcedure_AssemblyNameDesc();
    public static string get_StoredProcedure_ClassNameName();
    public static string get_StoredProcedure_ClassNameDesc();
    public static string get_StoredProcedure_CreateDateName();
    public static string get_StoredProcedure_CreateDateDesc();
    public static string get_StoredProcedure_DateLastModifiedName();
    public static string get_StoredProcedure_DateLastModifiedDesc();
    public static string get_StoredProcedure_ExecutionContextName();
    public static string get_StoredProcedure_ExecutionContextDesc();
    public static string get_StoredProcedure_ExecutionContextPrincipalName();
    public static string get_StoredProcedure_ExecutionContextPrincipalDesc();
    public static string get_StoredProcedure_ForReplicationName();
    public static string get_StoredProcedure_ForReplicationDesc();
    public static string get_StoredProcedure_IDName();
    public static string get_StoredProcedure_IDDesc();
    public static string get_StoredProcedure_ImplementationTypeName();
    public static string get_StoredProcedure_ImplementationTypeDesc();
    public static string get_StoredProcedure_IsEncryptedName();
    public static string get_StoredProcedure_IsEncryptedDesc();
    public static string get_StoredProcedure_IsSystemObjectName();
    public static string get_StoredProcedure_IsSystemObjectDesc();
    public static string get_StoredProcedure_IsSchemaOwnedName();
    public static string get_StoredProcedure_IsSchemaOwnedDesc();
    public static string get_StoredProcedure_MethodNameName();
    public static string get_StoredProcedure_MethodNameDesc();
    public static string get_StoredProcedure_OwnerName();
    public static string get_StoredProcedure_OwnerDesc();
    public static string get_StoredProcedure_QuotedIdentifierStatusName();
    public static string get_StoredProcedure_QuotedIdentifierStatusDesc();
    public static string get_StoredProcedure_RecompileName();
    public static string get_StoredProcedure_RecompileDesc();
    public static string get_StoredProcedure_StartupName();
    public static string get_StoredProcedure_StartupDesc();
    public static string get_StoredProcedure_TextBodyName();
    public static string get_StoredProcedure_TextBodyDesc();
    public static string get_StoredProcedure_TextHeaderName();
    public static string get_StoredProcedure_TextHeaderDesc();
    public static string get_StoredProcedure_TextModeName();
    public static string get_StoredProcedure_TextModeDesc();
    public static string get_StoredProcedure_IsNativelyCompiledName();
    public static string get_StoredProcedure_IsNativelyCompiledDesc();
    public static string get_StoredProcedure_IsSchemaBoundName();
    public static string get_StoredProcedure_IsSchemaBoundDesc();
    public static string get_ServerDdlTrigger_Name();
    public static string get_ServerDdlTrigger_Desc();
    public static string get_ServerDdlTrigger_AnsiNullsStatusName();
    public static string get_ServerDdlTrigger_AnsiNullsStatusDesc();
    public static string get_ServerDdlTrigger_AssemblyNameName();
    public static string get_ServerDdlTrigger_AssemblyNameDesc();
    public static string get_ServerDdlTrigger_BodyStartIndexName();
    public static string get_ServerDdlTrigger_BodyStartIndexDesc();
    public static string get_ServerDdlTrigger_ClassNameName();
    public static string get_ServerDdlTrigger_ClassNameDesc();
    public static string get_ServerDdlTrigger_CreateDateName();
    public static string get_ServerDdlTrigger_CreateDateDesc();
    public static string get_ServerDdlTrigger_DateLastModifiedName();
    public static string get_ServerDdlTrigger_DateLastModifiedDesc();
    public static string get_ServerDdlTrigger_DdlTriggerEventsName();
    public static string get_ServerDdlTrigger_DdlTriggerEventsDesc();
    public static string get_ServerDdlTrigger_IDName();
    public static string get_ServerDdlTrigger_IDDesc();
    public static string get_ServerDdlTrigger_ImplementationTypeName();
    public static string get_ServerDdlTrigger_ImplementationTypeDesc();
    public static string get_ServerDdlTrigger_IsEnabledName();
    public static string get_ServerDdlTrigger_IsEnabledDesc();
    public static string get_ServerDdlTrigger_IsEncryptedName();
    public static string get_ServerDdlTrigger_IsEncryptedDesc();
    public static string get_ServerDdlTrigger_IsSystemObjectName();
    public static string get_ServerDdlTrigger_IsSystemObjectDesc();
    public static string get_ServerDdlTrigger_MethodNameName();
    public static string get_ServerDdlTrigger_MethodNameDesc();
    public static string get_ServerDdlTrigger_QuotedIdentifierStatusName();
    public static string get_ServerDdlTrigger_QuotedIdentifierStatusDesc();
    public static string get_ServerDdlTrigger_TextName();
    public static string get_ServerDdlTrigger_TextDesc();
    public static string get_ServerDdlTrigger_ExecutionContextName();
    public static string get_ServerDdlTrigger_ExecutionContextDesc();
    public static string get_ServerDdlTrigger_ExecutionContextLoginName();
    public static string get_ServerDdlTrigger_ExecutionContextLoginDesc();
    public static string get_Trigger_Name();
    public static string get_Trigger_Desc();
    public static string get_Trigger_AnsiNullsStatusName();
    public static string get_Trigger_AnsiNullsStatusDesc();
    public static string get_Trigger_AssemblyNameName();
    public static string get_Trigger_AssemblyNameDesc();
    public static string get_Trigger_ClassNameName();
    public static string get_Trigger_ClassNameDesc();
    public static string get_Trigger_CreateDateName();
    public static string get_Trigger_CreateDateDesc();
    public static string get_Trigger_DateLastModifiedName();
    public static string get_Trigger_DateLastModifiedDesc();
    public static string get_Trigger_DeleteName();
    public static string get_Trigger_DeleteDesc();
    public static string get_Trigger_DeleteOrderName();
    public static string get_Trigger_DeleteOrderDesc();
    public static string get_Trigger_ExecutionContextName();
    public static string get_Trigger_ExecutionContextDesc();
    public static string get_Trigger_ExecutionContextPrincipalName();
    public static string get_Trigger_ExecutionContextPrincipalDesc();
    public static string get_Trigger_IDName();
    public static string get_Trigger_IDDesc();
    public static string get_Trigger_ImplementationTypeName();
    public static string get_Trigger_ImplementationTypeDesc();
    public static string get_Trigger_InsertName();
    public static string get_Trigger_InsertDesc();
    public static string get_Trigger_InsertOrderName();
    public static string get_Trigger_InsertOrderDesc();
    public static string get_Trigger_InsteadOfName();
    public static string get_Trigger_InsteadOfDesc();
    public static string get_Trigger_IsEnabledName();
    public static string get_Trigger_IsEnabledDesc();
    public static string get_Trigger_IsEncryptedName();
    public static string get_Trigger_IsEncryptedDesc();
    public static string get_Trigger_IsSystemObjectName();
    public static string get_Trigger_IsSystemObjectDesc();
    public static string get_Trigger_MethodNameName();
    public static string get_Trigger_MethodNameDesc();
    public static string get_Trigger_NotForReplicationName();
    public static string get_Trigger_NotForReplicationDesc();
    public static string get_Trigger_QuotedIdentifierStatusName();
    public static string get_Trigger_QuotedIdentifierStatusDesc();
    public static string get_Trigger_TextBodyName();
    public static string get_Trigger_TextBodyDesc();
    public static string get_Trigger_TextHeaderName();
    public static string get_Trigger_TextHeaderDesc();
    public static string get_Trigger_TextModeName();
    public static string get_Trigger_TextModeDesc();
    public static string get_Trigger_UpdateName();
    public static string get_Trigger_UpdateDesc();
    public static string get_Trigger_UpdateOrderName();
    public static string get_Trigger_UpdateOrderDesc();
    public static string get_Trigger_IsNativelyCompiledName();
    public static string get_Trigger_IsNativelyCompiledDesc();
    public static string get_Trigger_IsSchemaBoundName();
    public static string get_Trigger_IsSchemaBoundDesc();
    public static string get_Table_Name();
    public static string get_Table_Desc();
    public static string get_Table_HasCompressedPartitionsName();
    public static string get_Table_HasCompressedPartitionsDesc();
    public static string get_Table_HasXmlCompressedPartitionsName();
    public static string get_Table_HasXmlCompressedPartitionsDesc();
    public static string get_Table_IsVarDecimalStorageFormatEnabledName();
    public static string get_Table_IsVarDecimalStorageFormatEnabledDesc();
    public static string get_Table_AnsiNulAnsiNullsStatusName();
    public static string get_Table_AnsiNullsStatusDesc();
    public static string get_Table_ChangeTrackingEnabledName();
    public static string get_Table_ChangeTrackingEnabledDesc();
    public static string get_Table_CreateDateName();
    public static string get_Table_CreateDateDesc();
    public static string get_Table_DataSpaceUsedName();
    public static string get_Table_DataSpaceUsedDesc();
    public static string get_Table_DataRetentionEnabledName();
    public static string get_Table_DataRetentionEnabledDesc();
    public static string get_Table_DataRetentionPeriodName();
    public static string get_Table_DataRetentionPeriodDesc();
    public static string get_Table_DataRetentionPeriodUnitName();
    public static string get_Table_DataRetentionPeriodUnitDesc();
    public static string get_Table_DataRetentionFilterColumnName();
    public static string get_Table_DataRetentionFilterColumnNameDesc();
    public static string get_Table_DateLastModifiedName();
    public static string get_Table_DateLastModifiedDesc();
    public static string get_Table_EventsName();
    public static string get_Table_EventsDesc();
    public static string get_Table_ExternalTableDistributionName();
    public static string get_Table_ExternalTableDistributionDesc();
    public static string get_Table_FakeSystemTableName();
    public static string get_Table_FakeSystemTableDesc();
    public static string get_Table_FileGroupName();
    public static string get_Table_FileGroupDesc();
    public static string get_Table_FileStreamFileGroupName();
    public static string get_Table_FileStreamFileGroupDesc();
    public static string get_Table_FileStreamPartitionSchemeName();
    public static string get_Table_FileStreamPartitionSchemeDesc();
    public static string get_Table_IsFileTableName();
    public static string get_Table_IsFileTableDesc();
    public static string get_Table_FileTableDirectoryNameName();
    public static string get_Table_FileTableDirectoryNameDesc();
    public static string get_Table_FileTableNamespaceEnabledName();
    public static string get_Table_FileTableNamespaceEnabledDesc();
    public static string get_Table_FileTableNameColumnCollationName();
    public static string get_Table_FileTableNameColumnCollationDesc();
    public static string get_Table_HasAfterTriggerName();
    public static string get_Table_HasAfterTriggerDesc();
    public static string get_Table_HasClassifiedColumnName();
    public static string get_Table_HasClassifiedColumnDesc();
    public static string get_Table_HasClusteredIndexName();
    public static string get_Table_HasClusteredIndexDesc();
    public static string get_Table_HasDeleteTriggerName();
    public static string get_Table_HasDeleteTriggerDesc();
    public static string get_Table_HasHeapIndexName();
    public static string get_Table_HasHeapIndexDesc();
    public static string get_Table_HasIndexName();
    public static string get_Table_HasIndexDesc();
    public static string get_Table_HasInsertTriggerName();
    public static string get_Table_HasInsertTriggerDesc();
    public static string get_Table_HasInsteadOfTriggerName();
    public static string get_Table_HasInsteadOfTriggerDesc();
    public static string get_Table_HasNonClusteredColumnStoreIndexName();
    public static string get_Table_HasNonClusteredColumnStoreIndexDesc();
    public static string get_Table_HasNonClusteredIndexName();
    public static string get_Table_HasNonClusteredIndexDesc();
    public static string get_Table_HasPrimaryClusteredIndexName();
    public static string get_Table_HasPrimaryClusteredIndexDesc();
    public static string get_Table_HasSparseColumnName();
    public static string get_Table_HasSparseColumnDesc();
    public static string get_Table_HasSpatialDataName();
    public static string get_Table_HasSpatialDataDesc();
    public static string get_Table_HasUpdateTriggerName();
    public static string get_Table_HasUpdateTriggerDesc();
    public static string get_Table_HasXmlDataName();
    public static string get_Table_HasXmlDataDesc();
    public static string get_Table_HasXmlIndexName();
    public static string get_Table_HasXmlIndexDesc();
    public static string get_Table_IDName();
    public static string get_Table_IDDesc();
    public static string get_Table_IndexSpaceUsedName();
    public static string get_Table_IndexSpaceUsedDesc();
    public static string get_Table_IsDroppedLedgerTableName();
    public static string get_Table_IsDroppedLedgerTableDesc();
    public static string get_Table_IsIndexableName();
    public static string get_Table_IsIndexableDesc();
    public static string get_Table_IsPartitionedName();
    public static string get_Table_IsPartitionedDesc();
    public static string get_Table_IsSystemObjectName();
    public static string get_Table_IsSystemObjectDesc();
    public static string get_Table_IsSchemaOwnedName();
    public static string get_Table_IsSchemaOwnedDesc();
    public static string get_Table_OwnerName();
    public static string get_Table_OwnerDesc();
    public static string get_Table_PartitionSchemeName();
    public static string get_Table_PartitionSchemeDesc();
    public static string get_Table_QuotedIdentifierStatusName();
    public static string get_Table_QuotedIdentifierStatusDesc();
    public static string get_Table_RemoteDataArchiveEnabledName();
    public static string get_Table_RemoteDataArchiveEnabledDesc();
    public static string get_Table_RemoteDataArchiveMigrationEnabledName();
    public static string get_Table_RemoteDataArchiveMigrationEnabledDesc();
    public static string get_Table_RemoteDataArchiveDataMigrationStateName();
    public static string get_Table_RemoteDataArchiveDataMigrationStateDesc();
    public static string get_Table_RemoteDataArchiveFilterPredicateName();
    public static string get_Table_RemoteDataArchiveFilterPredicateDesc();
    public static string get_Table_RemoteObjectNameName();
    public static string get_Table_RemoteObjectNameDesc();
    public static string get_Table_RemoteTableNameName();
    public static string get_Table_RemoteTableNameDesc();
    public static string get_Table_RemoteDataArchiveMigratedRowCountName();
    public static string get_Table_RemoteDataArchiveMigratedRowCountDesc();
    public static string get_Table_RemoteSchemaNameName();
    public static string get_Table_RemoteSchemaNameDesc();
    public static string get_Table_RemoteTableSizeName();
    public static string get_Table_RemoteTableSizeDesc();
    public static string get_Table_RemoteTableProvisionedName();
    public static string get_Table_RemoteTableProvisionedDesc();
    public static string get_Table_ReplicatedName();
    public static string get_Table_ReplicatedDesc();
    public static string get_Table_LockEscalationName();
    public static string get_Table_LockEscalationDesc();
    public static string get_Table_RowCountName();
    public static string get_Table_RowCountDesc();
    public static string get_Table_RowCountAsDoubleName();
    public static string get_Table_RowCountAsDoubleDesc();
    public static string get_Table_ShardingColumnNameName();
    public static string get_Table_ShardingColumnNameDesc();
    public static string get_Table_TextFileGroupName();
    public static string get_Table_TextFileGroupDesc();
    public static string get_Table_TrackColumnsUpdatedEnabledName();
    public static string get_Table_TrackColumnsUpdatedEnabledDesc();
    public static string get_Table_HasClusteredColumnStoreIndexName();
    public static string get_Table_HasClusteredColumnStoreIndexDesc();
    public static string get_Table_IsExternalName();
    public static string get_Table_IsExternalDesc();
    public static string get_Table_DataSourceNameName();
    public static string get_Table_DataSourceNameDesc();
    public static string get_Table_FileFormatNameName();
    public static string get_Table_FileFormatNameDesc();
    public static string get_Table_LocationName();
    public static string get_Table_LocationDesc();
    public static string get_Table_RejectTypeName();
    public static string get_Table_RejectTypeDesc();
    public static string get_Table_RejectValueName();
    public static string get_Table_RejectValueDesc();
    public static string get_Table_RejectSampleValueName();
    public static string get_Table_RejectSampleValueDesc();
    public static string get_Table_HasSystemTimePeriodName();
    public static string get_Table_HasSystemTimePeriodDesc();
    public static string get_Table_HistoryTableIDName();
    public static string get_Table_HistoryTableIDDesc();
    public static string get_Table_HistoryTableNameName();
    public static string get_Table_HistoryTableNameDesc();
    public static string get_Table_HistoryTableSchemaName();
    public static string get_Table_HistoryTableSchemaDesc();
    public static string get_Table_IsLedgerName();
    public static string get_Table_IsLedgerDesc();
    public static string get_Table_IsSystemVersionedName();
    public static string get_Table_IsSystemVersionedDesc();
    public static string get_Table_LedgerTypeName();
    public static string get_Table_LedgerTypeDesc();
    public static string get_Table_LedgerViewOperationTypeColumnNameName();
    public static string get_Table_LedgerViewOperationTypeColumnNameDesc();
    public static string get_Table_LedgerViewOperationTypeDescColumnNameName();
    public static string get_Table_LedgerViewOperationTypeDescColumnNameDesc();
    public static string get_Table_LedgerViewSequenceNumberColumnNameName();
    public static string get_Table_LedgerViewSequenceNumberColumnNameDesc();
    public static string get_Table_LedgerViewTransactionIdColumnNameName();
    public static string get_Table_LedgerViewTransactionIdColumnNameDesc();
    public static string get_Table_LedgerViewNameName();
    public static string get_Table_LedgerViewNameDesc();
    public static string get_Table_LedgerViewSchemaName();
    public static string get_Table_LedgerViewSchemaDesc();
    public static string get_Table_SystemTimePeriodEndColumnName();
    public static string get_Table_SystemTimePeriodEndColumnDesc();
    public static string get_Table_SystemTimePeriodStartColumnName();
    public static string get_Table_SystemTimePeriodStartColumnDesc();
    public static string get_Table_TemporalTypeName();
    public static string get_Table_TemporalTypeDesc();
    public static string get_Table_IsNodeName();
    public static string get_Table_IsNodeDesc();
    public static string get_Table_IsEdgeName();
    public static string get_Table_IsEdgeDesc();
    public static string get_JobServer_AgentDomainGroupName();
    public static string get_JobServer_AgentDomainGroupDesc();
    public static string get_JobServer_ServiceStartModeName();
    public static string get_JobServer_ServiceStartModeDesc();
    public static string get_JobServer_ServiceAccountName();
    public static string get_JobServer_ServiceAccountDesc();
    public static string get_Server_Name();
    public static string get_Server_Desc();
    public static string get_IServerSelection_Name();
    public static string get_IServerSelection_Desc();
    public static string get_IServerInformation_Name();
    public static string get_IServerInformation_Desc();
    public static string get_IServerSettings_Name();
    public static string get_IServerSettings_Desc();
    public static string get_IServerSetupFacet_Name();
    public static string get_IServerSetupFacet_Desc();
    public static string get_IServerSetupFacet_ServiceInstanceIdSuffixName();
    public static string get_IServerSetupFacet_ServiceInstanceIdSuffixDesc();
    public static string get_IServerSetupFacet_WindowsUsersAndGroupsInSysadminRoleName();
    public static string get_IServerSetupFacet_WindowsUsersAndGroupsInSysadminRoleDesc();
    public static string get_IServerSetupFacet_TempdbPrimaryFilePathName();
    public static string get_IServerSetupFacet_TempdbPrimaryFilePathDesc();
    public static string get_IServerSetupFacet_TempdbLogPathName();
    public static string get_IServerSetupFacet_TempdbLogPathDesc();
    public static string get_Server_ServiceAccountName();
    public static string get_Server_ServiceAccountDesc();
    public static string get_Server_ServiceInstanceIdName();
    public static string get_Server_ServiceInstanceIdDesc();
    public static string get_Server_BrowserStartModeName();
    public static string get_Server_BrowserStartModeDesc();
    public static string get_Server_BrowserServiceAccountName();
    public static string get_Server_BrowserServiceAccountDesc();
    public static string get_Server_NamedPipesEnabledName();
    public static string get_Server_NamedPipesEnabledDesc();
    public static string get_Server_TcpIpProtocolEnabledName();
    public static string get_Server_TcpEnabledDesc();
    public static string get_Server_InstallSharedDirectoryName();
    public static string get_Server_InstallSharedDirectoryDesc();
    public static string get_Server_ServiceNameName();
    public static string get_Server_ServiceNameDesc();
    public static string get_Server_ServiceStartModeName();
    public static string get_Server_ServiceStartModeDesc();
    public static string get_Server_InstanceIdName();
    public static string get_Server_InstanceIdDesc();
    public static string get_SServer_FilestreamLevelName();
    public static string get_Server_FilestreamLevelDesc();
    public static string get_Server_FilestreamShareNameName();
    public static string get_Server_FilestreamShareNameDesc();
    public static string get_Server_SqlDomainGroupName();
    public static string get_Server_SqlDomainGroupDesc();
    public static string get_Server_InstallDataDirectoryName();
    public static string get_Server_InstallDataDirectoryDesc();
    public static string get_Server_InstanceNameName();
    public static string get_Server_InstanceNameDesc();
    public static string get_Server_CollationName();
    public static string get_Server_CollationDesc();
    public static string get_Server_EditionName();
    public static string get_Server_EditionDesc();
    public static string get_Server_ErrorLogSizeKbName();
    public static string get_Server_ErrorLogSizeKbDesc();
    public static string get_Server_IsCaseSensitiveName();
    public static string get_Server_IsCaseSensitiveDesc();
    public static string get_Server_IsClusteredName();
    public static string get_Server_IsClusteredDesc();
    public static string get_Server_IsHadrEnabledName();
    public static string get_Server_IsHadrEnabledDesc();
    public static string get_Server_HadrManagerStatusName();
    public static string get_Server_HadrManagerStatusDesc();
    public static string get_Server_ClusterNameName();
    public static string get_Server_ClusterNameDesc();
    public static string get_Server_ClusterQuorumTypeName();
    public static string get_Server_ClusterQuorumTypeDesc();
    public static string get_Server_ClusterQuorumStateName();
    public static string get_Server_ClusterQuorumStateDesc();
    public static string get_Server_IsPolyBaseInstalledName();
    public static string get_Server_IsPolyBaseInstalledDesc();
    public static string get_Server_IsJsonDataTypeEnabledName();
    public static string get_Server_IsJsonDataTypeEnabledDesc();
    public static string get_Server_IsXTPSupportedName();
    public static string get_Server_IsXTPSupportedDesc();
    public static string get_Server_IsSingleUserName();
    public static string get_Server_IsSingleUserDesc();
    public static string get_Server_LanguageName();
    public static string get_Server_LanguageDesc();
    public static string get_Server_MasterDBLogPathName();
    public static string get_Server_MasterDBLogPathDesc();
    public static string get_Server_MasterDBPathName();
    public static string get_Server_MasterDBPathDesc();
    public static string get_Server_MaxPrecisionName();
    public static string get_Server_MaxPrecisionDesc();
    public static string get_Server_NetNameName();
    public static string get_Server_NetNameDesc();
    public static string get_Server_OSVersionName();
    public static string get_Server_OSVersionDesc();
    public static string get_Server_PhysicalMemoryName();
    public static string get_Server_PhysicalMemoryDesc();
    public static string get_Server_PhysicalMemoryUsageInKBName();
    public static string get_Server_PhysicalMemoryUsageInKBDesc();
    public static string get_Server_ProcessorUsageName();
    public static string get_Server_ProcessorUsageDesc();
    public static string get_Server_PlatformName();
    public static string get_Server_PlatformDesc();
    public static string get_Server_ProcessorsName();
    public static string get_Server_ProcessorsDesc();
    public static string get_Server_ProductName();
    public static string get_Server_ProductDesc();
    public static string get_Server_ProductLevelName();
    public static string get_Server_ProductLevelDesc();
    public static string get_Server_RootDirectoryName();
    public static string get_Server_RootDirectoryDesc();
    public static string get_Server_VersionName();
    public static string get_Server_VersionDesc();
    public static string get_Server_VersionStringName();
    public static string get_Server_VersionStringDesc();
    public static string get_Server_AuditLevelName();
    public static string get_Server_AuditLevelDesc();
    public static string get_Server_BackupDirectoryName();
    public static string get_Server_BackupDirectoryDesc();
    public static string get_Server_DefaultFileName();
    public static string get_Server_DefaultFileDesc();
    public static string get_Server_DefaultLogName();
    public static string get_Server_DefaultLogDesc();
    public static string get_Server_ImpersonateClientName();
    public static string get_Server_ImpersonateClientDesc();
    public static string get_Server_LoginModeName();
    public static string get_Server_LoginModeDesc();
    public static string get_Server_MailProfileName();
    public static string get_Server_MailProfileDesc();
    public static string get_Server_NumberOfLogFilesName();
    public static string get_Server_NumberOfLogFilesDesc();
    public static string get_Server_BuildClrVersionStringName();
    public static string get_Server_BuildClrVersionStringDesc();
    public static string get_Server_BuildNumberName();
    public static string get_Server_BuildNumberDesc();
    public static string get_Server_CollationIDName();
    public static string get_Server_CollationIDDesc();
    public static string get_Server_ComparisonStyleName();
    public static string get_Server_ComparisonStyleDesc();
    public static string get_Server_ComputerNamePhysicalNetBIOSName();
    public static string get_Server_ComputerNamePhysicalNetBIOSDesc();
    public static string get_Server_EngineEditionName();
    public static string get_Server_EngineEditionDesc();
    public static string get_Server_ErrorLogPathName();
    public static string get_Server_ErrorLogPathDesc();
    public static string get_Server_HardwareGenerationName();
    public static string get_Server_HardwareGenerationDesc();
    public static string get_Server_HostDistributionName();
    public static string get_Server_HostDistributionDesc();
    public static string get_Server_HostPlatformName();
    public static string get_Server_HostPlatformDesc();
    public static string get_Server_HostReleaseName();
    public static string get_Server_HostReleaseDesc();
    public static string get_Server_HostServicePackLevelName();
    public static string get_Server_HostServicePackLevelDesc();
    public static string get_Server_HostSkuName();
    public static string get_Server_HostSkuDesc();
    public static string get_Server_IsFullTextInstalledName();
    public static string get_Server_IsFullTextInstalledDesc();
    public static string get_Server_PathSeparatorName();
    public static string get_Server_PathSeparatorDesc();
    public static string get_Server_PerfMonModeName();
    public static string get_Server_PerfMonModeDesc();
    public static string get_Server_ProductUpdateLevelName();
    public static string get_Server_ProductUpdateLevelDesc();
    public static string get_Server_ResourceLastUpdateDateTimeName();
    public static string get_Server_ResourceLastUpdateDateTimeDesc();
    public static string get_Server_ResourceVersionStringName();
    public static string get_Server_ResourceVersionStringDesc();
    public static string get_Server_ReservedStorageSizeMBName();
    public static string get_Server_ReservedStorageSizeMBDesc();
    public static string get_Server_ServiceTierName();
    public static string get_Server_ServiceTierDesc();
    public static string get_Server_SqlCharSetName();
    public static string get_Server_SqlCharSetDesc();
    public static string get_Server_SqlCharSetNameName();
    public static string get_Server_SqlCharSetNameDesc();
    public static string get_Server_SqlSortOrderName();
    public static string get_Server_SqlSortOrderDesc();
    public static string get_Server_SqlSortOrderNameName();
    public static string get_Server_SqlSortOrderNameDesc();
    public static string get_Server_TapeLoadWaitTimeName();
    public static string get_Server_TapeLoadWaitTimeDesc();
    public static string get_Server_UsedStorageSizeMBName();
    public static string get_Server_UsedStorageSizeMBDesc();
    public static string get_Server_VersionMajorName();
    public static string get_Server_VersionMajorDesc();
    public static string get_Server_VersionMinorName();
    public static string get_Server_VersionMinorDesc();
    public static string get_Server_ServerTypeName();
    public static string get_Server_ServerTypeDesc();
    public static string get_Server_StatusName();
    public static string get_Server_StatusDesc();
    public static string get_Schema_Name();
    public static string get_Schema_Desc();
    public static string get_Schema_IDName();
    public static string get_Schema_IDDesc();
    public static string get_Schema_IsSystemObjectName();
    public static string get_Schema_IsSystemObjectDesc();
    public static string get_Schema_OwnerName();
    public static string get_Schema_OwnerDesc();
    public static string get_FileGroup_Name();
    public static string get_FileGroup_Desc();
    public static string get_FileGroup_IDName();
    public static string get_FileGroup_IDDesc();
    public static string get_FileGroup_IsDefaultName();
    public static string get_FileGroup_IsDefaultDesc();
    public static string get_FileGroup_ReadOnlyName();
    public static string get_FileGroup_ReadOnlyDesc();
    public static string get_FileGroup_AutogrowAllFilesName();
    public static string get_FileGroup_AutogrowAllFilesDesc();
    public static string get_FileGroup_SizeName();
    public static string get_FileGroup_SizeDesc();
    public static string get_FileGroup_IsFileStreamName();
    public static string get_FileGroup_IsFileStreamDesc();
    public static string get_FileGroup_FileGroupTypeName();
    public static string get_FileGroup_FileGroupTypeDesc();
    public static string get_IServerConfigurationFacet_Name();
    public static string get_IServerConfigurationFacet_Desc();
    public static string get_IServerConfigurationFacet_ContainmentEnabledName();
    public static string get_IServerConfigurationFacet_ContainmentEnabledDesc();
    public static string get_IServerConfigurationFacet_AdHocRemoteQueriesEnabledName();
    public static string get_IServerConfigurationFacet_AdHocRemoteQueriesEnabledDesc();
    public static string get_IServerConfigurationFacet_AffinityMaskName();
    public static string get_IServerConfigurationFacet_AffinityMaskDesc();
    public static string get_IServerConfigurationFacet_Affinity64MaskName();
    public static string get_IServerConfigurationFacet_Affinity64MaskDesc();
    public static string get_IServerConfigurationFacet_AffinityIOMaskName();
    public static string get_IServerConfigurationFacet_AffinityIOMaskDesc();
    public static string get_IServerConfigurationFacet_Affinity64IOMaskName();
    public static string get_IServerConfigurationFacet_Affinity64IOMaskDesc();
    public static string get_IServerConfigurationFacet_AgentXPsEnabledName();
    public static string get_IServerConfigurationFacet_AgentXPsEnabledDesc();
    public static string get_IServerConfigurationFacet_AllowUpdatesName();
    public static string get_IServerConfigurationFacet_AllowUpdatesDesc();
    public static string get_IServerConfigurationFacet_AweEnabledName();
    public static string get_IServerConfigurationFacet_AweEnabledDesc();
    public static string get_IServerConfigurationFacet_BlockedProcessThresholdName();
    public static string get_IServerConfigurationFacet_BlockedProcessThresholdDesc();
    public static string get_IServerConfigurationFacet_C2AuditTracingEnabledName();
    public static string get_IServerConfigurationFacet_C2AuditTracingEnabledDesc();
    public static string get_IServerConfigurationFacet_ClrIntegrationEnabledName();
    public static string get_IServerConfigurationFacet_ClrIntegrationEnabledDesc();
    public static string get_IServerConfigurationFacet_CommonCriteriaComplianceEnabledName();
    public static string get_IServerConfigurationFacet_CommonCriteriaComplianceEnabledDesc();
    public static string get_IServerConfigurationFacet_CostThresholdForParallelismName();
    public static string get_IServerConfigurationFacet_CostThresholdForParallelismDesc();
    public static string get_IServerConfigurationFacet_CrossDBOwnershipChainingEnabledName();
    public static string get_IServerConfigurationFacet_CrossDBOwnershipChainingEnabledDesc();
    public static string get_IServerConfigurationFacet_CursorThresholdName();
    public static string get_IServerConfigurationFacet_CursorThresholdDesc();
    public static string get_IServerConfigurationFacet_DatabaseMailEnabledName();
    public static string get_IServerConfigurationFacet_DatabaseMailEnabledDesc();
    public static string get_IServerConfigurationFacet_DefaultTraceEnabledName();
    public static string get_IServerConfigurationFacet_DefaultTraceEnabledDesc();
    public static string get_IServerConfigurationFacet_DefaultFullTextLanguageName();
    public static string get_IServerConfigurationFacet_DefaultFullTextLanguageDesc();
    public static string get_IServerConfigurationFacet_DefaultLanguageName();
    public static string get_IServerConfigurationFacet_DefaultLanguageDesc();
    public static string get_IServerConfigurationFacet_DisallowResultsFromTriggersName();
    public static string get_IServerConfigurationFacet_DisallowResultsFromTriggersDesc();
    public static string get_IServerConfigurationFacet_FilestreamAccessLevelName();
    public static string get_IServerConfigurationFacet_FilestreamAccessLevelDesc();
    public static string get_IServerConfigurationFacet_FillFactorName();
    public static string get_IServerConfigurationFacet_FillFactorDesc();
    public static string get_IServerConfigurationFacet_FullTextCrawlBandwidthMinName();
    public static string get_IServerConfigurationFacet_FullTextCrawlBandwidthMinDesc();
    public static string get_IServerConfigurationFacet_FullTextCrawlBandwidthMaxName();
    public static string get_IServerConfigurationFacet_FullTextCrawlBandwidthMaxDesc();
    public static string get_IServerConfigurationFacet_FullTextNotifyBandwidthMinName();
    public static string get_IServerConfigurationFacet_FullTextNotifyBandwidthMinDesc();
    public static string get_IServerConfigurationFacet_FullTextNotifyBandwidthMaxName();
    public static string get_IServerConfigurationFacet_FullTextNotifyBandwidthMaxDesc();
    public static string get_IServerConfigurationFacet_FullTextCrawlRangeMaxName();
    public static string get_IServerConfigurationFacet_FullTextCrawlRangeMaxDesc();
    public static string get_IServerConfigurationFacet_InDoubtTransactionResolutionName();
    public static string get_IServerConfigurationFacet_InDoubtTransactionResolutionDesc();
    public static string get_IServerConfigurationFacet_IndexCreateMemoryName();
    public static string get_IServerConfigurationFacet_IndexCreateMemoryDesc();
    public static string get_IServerConfigurationFacet_LightweightPoolingEnabledName();
    public static string get_IServerConfigurationFacet_LightweightPoolingEnabledDesc();
    public static string get_IServerConfigurationFacet_DynamicLocksName();
    public static string get_IServerConfigurationFacet_DynamicLocksDesc();
    public static string get_IServerConfigurationFacet_MaxDegreeOfParallelismName();
    public static string get_IServerConfigurationFacet_MaxDegreeOfParallelismDesc();
    public static string get_IServerConfigurationFacet_MaxServerMemoryName();
    public static string get_IServerConfigurationFacet_MaxServerMemoryDesc();
    public static string get_IServerConfigurationFacet_MaxWorkerThreadsName();
    public static string get_IServerConfigurationFacet_MaxWorkerThreadsDesc();
    public static string get_IServerConfigurationFacet_MediaRetentionName();
    public static string get_IServerConfigurationFacet_MediaRetentionDesc();
    public static string get_IServerConfigurationFacet_MinMemoryPerQueryName();
    public static string get_IServerConfigurationFacet_MinMemoryPerQueryDesc();
    public static string get_IServerConfigurationFacet_OptimizeAdhocWorkloadsName();
    public static string get_IServerConfigurationFacet_OptimizeAdhocWorkloadsDesc();
    public static string get_IServerConfigurationFacet_MinServerMemoryName();
    public static string get_IServerConfigurationFacet_MinServerMemoryDesc();
    public static string get_IServerConfigurationFacet_NestedTriggersEnabledName();
    public static string get_IServerConfigurationFacet_NestedTriggersEnabledDesc();
    public static string get_IServerConfigurationFacet_NetworkPacketSizeName();
    public static string get_IServerConfigurationFacet_NetworkPacketSizeDesc();
    public static string get_IServerConfigurationFacet_OleAutomationEnabledName();
    public static string get_IServerConfigurationFacet_OleAutomationEnabledDesc();
    public static string get_IServerConfigurationFacet_OpenObjectsName();
    public static string get_IServerConfigurationFacet_OpenObjectsDesc();
    public static string get_IServerConfigurationFacet_PrecomputeRankName();
    public static string get_IServerConfigurationFacet_PrecomputeRankDesc();
    public static string get_IServerConfigurationFacet_PriorityBoostName();
    public static string get_IServerConfigurationFacet_PriorityBoostDesc();
    public static string get_IServerConfigurationFacet_ProtocolHandlerTimeoutName();
    public static string get_IServerConfigurationFacet_ProtocolHandlerTimeoutDesc();
    public static string get_IServerConfigurationFacet_QueryGovernorCostLimitName();
    public static string get_IServerConfigurationFacet_QueryGovernorCostLimitDesc();
    public static string get_IServerConfigurationFacet_QueryWaitName();
    public static string get_IServerConfigurationFacet_QueryWaitDesc();
    public static string get_IServerConfigurationFacet_RecoveryIntervalName();
    public static string get_IServerConfigurationFacet_RecoveryIntervalDesc();
    public static string get_IServerConfigurationFacet_RemoteAccessEnabledName();
    public static string get_IServerConfigurationFacet_RemoteAccessEnabledDesc();
    public static string get_IServerConfigurationFacet_RemoteDacEnabledName();
    public static string get_IServerConfigurationFacet_RemoteDacEnabledDesc();
    public static string get_IServerConfigurationFacet_RemoteLoginTimeoutName();
    public static string get_IServerConfigurationFacet_RemoteLoginTimeoutDesc();
    public static string get_IServerConfigurationFacet_RemoteProcTransEnabledName();
    public static string get_IServerConfigurationFacet_RemoteProcTransEnabledDesc();
    public static string get_IServerConfigurationFacet_RemoteQueryTimeoutName();
    public static string get_IServerConfigurationFacet_RemoteQueryTimeoutDesc();
    public static string get_IServerConfigurationFacet_ReplicationMaxTextSizeName();
    public static string get_IServerConfigurationFacet_ReplicationMaxTextSizeDesc();
    public static string get_IServerConfigurationFacet_ReplicationXPsEnabledName();
    public static string get_IServerConfigurationFacet_ReplicationXPsEnabledDesc();
    public static string get_IServerConfigurationFacet_ScanForStartupProceduresName();
    public static string get_IServerConfigurationFacet_ScanForStartupProceduresDesc();
    public static string get_IServerConfigurationFacet_ServerTriggerRecursionEnabledName();
    public static string get_IServerConfigurationFacet_ServerTriggerRecursionEnabledDesc();
    public static string get_IServerConfigurationFacet_SetWorkingSetSizeName();
    public static string get_IServerConfigurationFacet_SetWorkingSetSizeDesc();
    public static string get_IServerConfigurationFacet_ShowAdvancedOptionsName();
    public static string get_IServerConfigurationFacet_ShowAdvancedOptionsDesc();
    public static string get_IServerConfigurationFacet_SmoAndDmoXPsEnabledName();
    public static string get_IServerConfigurationFacet_SmoAndDmoXPsEnabledDesc();
    public static string get_IServerConfigurationFacet_SqlMailEnabledName();
    public static string get_IServerConfigurationFacet_SqlMailEnabledDesc();
    public static string get_IServerConfigurationFacet_TransformNoiseWordsName();
    public static string get_IServerConfigurationFacet_TransformNoiseWordsDesc();
    public static string get_IServerConfigurationFacet_TwoDigitYearCutoffName();
    public static string get_IServerConfigurationFacet_TwoDigitYearCutoffDesc();
    public static string get_IServerConfigurationFacet_UserConnectionsName();
    public static string get_IServerConfigurationFacet_UserConnectionsDesc();
    public static string get_IServerConfigurationFacet_UserInstanceTimeoutName();
    public static string get_IServerConfigurationFacet_UserInstanceTimeoutDesc();
    public static string get_IServerConfigurationFacet_UserInstancesEnabledName();
    public static string get_IServerConfigurationFacet_UserInstancesEnabledDesc();
    public static string get_IServerConfigurationFacet_UserOptionsName();
    public static string get_IServerConfigurationFacet_UserOptionsDesc();
    public static string get_IServerConfigurationFacet_WebAssistantEnabledName();
    public static string get_IServerConfigurationFacet_WebAssistantEnabledDesc();
    public static string get_IServerConfigurationFacet_XPCmdShellEnabledName();
    public static string get_IServerConfigurationFacet_XPCmdShellEnabledDesc();
    public static string get_IServerConfigurationFacet_DefaultBackupCompressionEnabledName();
    public static string get_IServerConfigurationFacet_DefaultBackupCompressionEnabledDesc();
    public static string get_IServerConfigurationFacet_ExtensibleKeyManagementEnabledName();
    public static string get_IServerConfigurationFacet_ExtensibleKeyManagementEnabledDesc();
    public static string get_IServerConfigurationFacet_RemoteDataArchiveEnabledName();
    public static string get_IServerConfigurationFacet_RemoteDataArchiveEnabledDesc();
    public static string get_IDatabaseMaintenanceFacet_Name();
    public static string get_IDatabaseMaintenanceFacet_Desc();
    public static string get_IDatabaseMaintenanceFacet_DataAndBackupOnSeparateLogicalVolumesName();
    public static string get_IDatabaseMaintenanceFacet_DataAndBackupOnSeparateLogicalVolumesDesc();
    public static string get_IDatabaseSecurityFacet_Name();
    public static string get_IDatabaseSecurityFacet_Desc();
    public static string get_IDatabaseSecurityFacet_IsOwnerSysadminName();
    public static string get_IDatabaseSecurityFacet_IsOwnerSysadminDesc();
    public static string get_IDatabasePerformanceFacet_Name();
    public static string get_IDatabasePerformanceFacet_Desc();
    public static string get_IDatabasePerformanceFacet_CollationMatchesModelOrMasterName();
    public static string get_IDatabasePerformanceFacet_CollationMatchesModelOrMasterDesc();
    public static string get_IDatabasePerformanceFacet_DataAndLogFilesOnSeparateLogicalVolumesName();
    public static string get_IDatabasePerformanceFacet_DataAndLogFilesOnSeparateLogicalVolumesDesc();
    public static string get_UserDefinedFunction_Name();
    public static string get_UserDefinedFunction_Desc();
    public static string get_UserDefinedFunction_AnsiNullsStatusName();
    public static string get_UserDefinedFunction_AnsiNullsStatusDesc();
    public static string get_UserDefinedFunction_AssemblyNameName();
    public static string get_UserDefinedFunction_AssemblyNameDesc();
    public static string get_UserDefinedFunction_ClassNameName();
    public static string get_UserDefinedFunction_ClassNameDesc();
    public static string get_UserDefinedFunction_CreateDateName();
    public static string get_UserDefinedFunction_CreateDateDesc();
    public static string get_UserDefinedFunction_DataTypeName();
    public static string get_UserDefinedFunction_DataTypeDesc();
    public static string get_UserDefinedFunction_DateLastModifiedName();
    public static string get_UserDefinedFunction_DateLastModifiedDesc();
    public static string get_UserDefinedFunction_EventsName();
    public static string get_UserDefinedFunction_EventsDesc();
    public static string get_UserDefinedFunction_ExecutionContextName();
    public static string get_UserDefinedFunction_ExecutionContextDesc();
    public static string get_UserDefinedFunction_ExecutionContextPrincipalName();
    public static string get_UserDefinedFunction_ExecutionContextPrincipalDesc();
    public static string get_UserDefinedFunction_ExtendedPropertiesName();
    public static string get_UserDefinedFunction_ExtendedPropertiesDesc();
    public static string get_UserDefinedFunction_FunctionTypeName();
    public static string get_UserDefinedFunction_FunctionTypeDesc();
    public static string get_UserDefinedFunction_IDName();
    public static string get_UserDefinedFunction_IDDesc();
    public static string get_UserDefinedFunction_ImplementationTypeName();
    public static string get_UserDefinedFunction_ImplementationTypeDesc();
    public static string get_UserDefinedFunction_InlineTypeName();
    public static string get_UserDefinedFunction_InlineTypeDesc();
    public static string get_UserDefinedFunction_IsDeterministicName();
    public static string get_UserDefinedFunction_IsDeterministicDesc();
    public static string get_UserDefinedFunction_IsEncryptedName();
    public static string get_UserDefinedFunction_IsEncryptedDesc();
    public static string get_UserDefinedFunction_IsInlineableName();
    public static string get_UserDefinedFunction_IsInlineableDesc();
    public static string get_UserDefinedFunction_IsNativelyCompiledName();
    public static string get_UserDefinedFunction_IsNativelyCompiledDesc();
    public static string get_UserDefinedFunction_IsSchemaBoundName();
    public static string get_UserDefinedFunction_IsSchemaBoundDesc();
    public static string get_UserDefinedFunction_IsSchemaOwnedName();
    public static string get_UserDefinedFunction_IsSchemaOwnedDesc();
    public static string get_UserDefinedFunction_IsSystemObjectName();
    public static string get_UserDefinedFunction_IsSystemObjectDesc();
    public static string get_UserDefinedFunction_MethodNameName();
    public static string get_UserDefinedFunction_MethodNameDesc();
    public static string get_UserDefinedFunction_OwnerName();
    public static string get_UserDefinedFunction_OwnerDesc();
    public static string get_UserDefinedFunction_QuotedIdentifierStatusName();
    public static string get_UserDefinedFunction_QuotedIdentifierStatusDesc();
    public static string get_UserDefinedFunction_ReturnsNullOnNullInputName();
    public static string get_UserDefinedFunction_ReturnsNullOnNullInputDesc();
    public static string get_UserDefinedFunction_TableVariableNameName();
    public static string get_UserDefinedFunction_TableVariableNameDesc();
    public static string get_UserDefinedFunction_TextBodyName();
    public static string get_UserDefinedFunction_TextBodyDesc();
    public static string get_UserDefinedFunction_TextHeaderName();
    public static string get_UserDefinedFunction_TextHeaderDesc();
    public static string get_UserDefinedFunction_TextModeName();
    public static string get_UserDefinedFunction_TextModeDesc();
    public static string get_Audit_Name();
    public static string get_Audit_Desc();
    public static string get_Audit_CreateDateName();
    public static string get_Audit_CreateDateDesc();
    public static string get_Audit_DateLastModifiedName();
    public static string get_Audit_DateLastModifiedDesc();
    public static string get_Audit_DestinationTypeName();
    public static string get_Audit_DestinationTypeDesc();
    public static string get_Audit_EnabledName();
    public static string get_Audit_EnabledDesc();
    public static string get_Audit_FileNameName();
    public static string get_Audit_FileNameDesc();
    public static string get_Audit_FilePathName();
    public static string get_Audit_FilePathDesc();
    public static string get_Audit_Filter();
    public static string get_Audit_FilterDesc();
    public static string get_Audit_GuidName();
    public static string get_Audit_GuidDesc();
    public static string get_Audit_IDName();
    public static string get_Audit_IDDesc();
    public static string get_Audit_IsOperatorName();
    public static string get_Audit_IsOperatorDesc();
    public static string get_Audit_MaximumFileSizeName();
    public static string get_Audit_MaximumFileSizeDesc();
    public static string get_Audit_MaximumFileSizeUnitName();
    public static string get_Audit_MaximumFileSizeUnitDesc();
    public static string get_Audit_MaximumRolloverFilesName();
    public static string get_Audit_MaximumRolloverFilesDesc();
    public static string get_Audit_MaximumFilesName();
    public static string get_Audit_MaximumFilesDesc();
    public static string get_Audit_OnFailureName();
    public static string get_Audit_OnFailureDesc();
    public static string get_Audit_QueueDelayName();
    public static string get_Audit_QueueDelayDesc();
    public static string get_Audit_ReserveDiskSpaceName();
    public static string get_Audit_ReserveDiskSpaceDesc();
    public static string get_Audit_RetentionDaysName();
    public static string get_Audit_RetentionDaysDesc();
    public static string get_DatabaseAuditSpecification_Name();
    public static string get_DatabaseAuditSpecification_Desc();
    public static string get_DatabaseAuditSpecification_AuditNameName();
    public static string get_DatabaseAuditSpecification_AuditNameDesc();
    public static string get_DatabaseAuditSpecification_CreateDateName();
    public static string get_DatabaseAuditSpecification_CreateDateDesc();
    public static string get_DatabaseAuditSpecification_DateLastModifiedName();
    public static string get_DatabaseAuditSpecification_DateLastModifiedDesc();
    public static string get_DatabaseAuditSpecification_EnabledName();
    public static string get_DatabaseAuditSpecification_EnabledDesc();
    public static string get_DatabaseAuditSpecification_GuidName();
    public static string get_DatabaseAuditSpecification_GuidDesc();
    public static string get_DatabaseAuditSpecification_IDName();
    public static string get_DatabaseAuditSpecification_IDDesc();
    public static string get_ServerAuditSpecification_Name();
    public static string get_ServerAuditSpecification_Desc();
    public static string get_ServerAuditSpecification_AuditNameName();
    public static string get_ServerAuditSpecification_AuditNameDesc();
    public static string get_ServerAuditSpecification_CreateDateName();
    public static string get_ServerAuditSpecification_CreateDateDesc();
    public static string get_ServerAuditSpecification_DateLastModifiedName();
    public static string get_ServerAuditSpecification_DateLastModifiedDesc();
    public static string get_ServerAuditSpecification_EnabledName();
    public static string get_ServerAuditSpecification_EnabledDesc();
    public static string get_ServerAuditSpecification_GuidName();
    public static string get_ServerAuditSpecification_GuidDesc();
    public static string get_ServerAuditSpecification_IDName();
    public static string get_ServerAuditSpecification_IDDesc();
    public static string get_ResourceGovernor_Name();
    public static string get_ResourceGovernor_Desc();
    public static string get_ResourceGovernor_ClassifierFunctionName();
    public static string get_ResourceGovernor_ClassifierFunctionDesc();
    public static string get_ResourceGovernor_MaxOutstandingIOPerVolumeName();
    public static string get_ResourceGovernor_MaxOutstandingIOPerVolumeDesc();
    public static string get_ResourceGovernor_EnabledName();
    public static string get_ResourceGovernor_EnabledDesc();
    public static string get_ResourceGovernor_ReconfigurePendingName();
    public static string get_ResourceGovernor_ReconfigurePendingDesc();
    public static string get_ResourcePool_Name();
    public static string get_ResourcePool_Desc();
    public static string get_ResourcePool_IDName();
    public static string get_ResourcePool_IDDesc();
    public static string get_ResourcePool_IsSystemObjectName();
    public static string get_ResourcePool_IsSystemObjectDesc();
    public static string get_ResourcePool_NameName();
    public static string get_ResourcePool_NameDesc();
    public static string get_ResourcePool_MaximumCpuPercentageName();
    public static string get_ResourcePool_MaximumCpuPercentageDesc();
    public static string get_ResourcePool_CapCpuPercentageName();
    public static string get_ResourcePool_CapCpuPercentageDesc();
    public static string get_ResourcePool_MaximumMemoryPercentageName();
    public static string get_ResourcePool_MaximumMemoryPercentageDesc();
    public static string get_ResourcePool_MinimumCpuPercentageName();
    public static string get_ResourcePool_MinimumCpuPercentageDesc();
    public static string get_ResourcePool_MinimumMemoryPercentageName();
    public static string get_ResourcePool_MinimumMemoryPercentageDesc();
    public static string get_ResourcePool_MinimumIopsPerVolumeName();
    public static string get_ResourcePool_MinimumIopsPerVolumeDesc();
    public static string get_ResourcePool_MaximumIopsPerVolumeName();
    public static string get_ResourcePool_MaximumIopsPerVolumeDesc();
    public static string get_ExternalResourcePool_Name();
    public static string get_ExternalResourcePool_Desc();
    public static string get_ExternalResourcePool_IDName();
    public static string get_ExternalResourcePool_IDDesc();
    public static string get_ExternalResourcePool_IsSystemObjectName();
    public static string get_ExternalResourcePool_IsSystemObjectDesc();
    public static string get_ExternalResourcePool_NameName();
    public static string get_ExternalResourcePool_NameDesc();
    public static string get_ExternalResourcePool_MaximumCpuPercentageName();
    public static string get_ExternalResourcePool_MaximumCpuPercentageDesc();
    public static string get_ExternalResourcePool_MaximumMemoryPercentageName();
    public static string get_ExternalResourcePool_MaximumMemoryPercentageDesc();
    public static string get_ExternalResourcePool_MaximumProcessesName();
    public static string get_ExternalResourcePool_MaximumProcessesDesc();
    public static string get_WorkloadGroup_Name();
    public static string get_WorkloadGroup_Desc();
    public static string get_WorkloadGroup_IDName();
    public static string get_WorkloadGroup_IDDesc();
    public static string get_WorkloadGroup_IsSystemObjectName();
    public static string get_WorkloadGroup_IsSystemObjectDesc();
    public static string get_WorkloadGroup_NameName();
    public static string get_WorkloadGroup_NameDesc();
    public static string get_WorkloadGroup_GroupMaximumRequestsName();
    public static string get_WorkloadGroup_GroupMaximumRequestsDesc();
    public static string get_WorkloadGroup_ImportanceName();
    public static string get_WorkloadGroup_ImportanceDesc();
    public static string get_WorkloadGroup_MaximumDegreeOfParallelismName();
    public static string get_WorkloadGroup_MaximumDegreeOfParallelismDesc();
    public static string get_WorkloadGroup_RequestMaximumCpuTimeInSecondsName();
    public static string get_WorkloadGroup_RequestMaximumCpuTimeInSecondsDesc();
    public static string get_WorkloadGroup_RequestMaximumMemoryGrantPercentageName();
    public static string get_WorkloadGroup_RequestMaximumMemoryGrantPercentageDesc();
    public static string get_WorkloadGroup_RequestMaximumMemoryGrantPercentageAsDoubleName();
    public static string get_WorkloadGroup_RequestMaximumMemoryGrantPercentageAsDoubleDesc();
    public static string get_WorkloadGroup_RequestMemoryGrantTimeoutInSecondsName();
    public static string get_WorkloadGroup_RequestMemoryGrantTimeoutInSecondsDesc();
    public static string get_WorkloadGroup_ExternalResourcePoolNameName();
    public static string get_WorkloadGroup_ExternalResourcePoolNameDesc();
    public static string get_CryptographicProvider_Name();
    public static string get_CryptographicProvider_Desc();
    public static string get_CryptographicProvider_AsymmetricKeyExportableName();
    public static string get_CryptographicProvider_AsymmetricKeyExportableDesc();
    public static string get_CryptographicProvider_AsymmetricKeyImportableName();
    public static string get_CryptographicProvider_AsymmetricKeyImportableDesc();
    public static string get_CryptographicProvider_AsymmetricKeyPersistableName();
    public static string get_CryptographicProvider_AsymmetricKeyPersistableDesc();
    public static string get_CryptographicProvider_AsymmetricKeySupportedName();
    public static string get_CryptographicProvider_AsymmetricKeySupportedDesc();
    public static string get_CryptographicProvider_AuthenticationTypeName();
    public static string get_CryptographicProvider_AuthenticationTypeDesc();
    public static string get_CryptographicProvider_DllPathName();
    public static string get_CryptographicProvider_DllPathDesc();
    public static string get_CryptographicProvider_EnabledName();
    public static string get_CryptographicProvider_EnabledDesc();
    public static string get_CryptographicProvider_IDName();
    public static string get_CryptographicProvider_IDDesc();
    public static string get_CryptographicProvider_ProviderGuidName();
    public static string get_CryptographicProvider_ProviderGuidDesc();
    public static string get_CryptographicProvider_SymmetricKeyExportableName();
    public static string get_CryptographicProvider_SymmetricKeyExportableDesc();
    public static string get_CryptographicProvider_SymmetricKeyImportableName();
    public static string get_CryptographicProvider_SymmetricKeyImportableDesc();
    public static string get_CryptographicProvider_SymmetricKeyPersistableName();
    public static string get_CryptographicProvider_SymmetricKeyPersistableDesc();
    public static string get_CryptographicProvider_SymmetricKeySupportedName();
    public static string get_CryptographicProvider_SymmetricKeySupportedDesc();
    public static string get_Endpoint_Name();
    public static string get_Endpoint_Desc();
    public static string get_Endpoint_EndpointStateName();
    public static string get_Endpoint_EndpointStateDesc();
    public static string get_Endpoint_EndpointTypeName();
    public static string get_Endpoint_EndpointTypeDesc();
    public static string get_Endpoint_IDName();
    public static string get_Endpoint_IDDesc();
    public static string get_Endpoint_IsAdminEndpointName();
    public static string get_Endpoint_IsAdminEndpointDesc();
    public static string get_Endpoint_IsSystemObjectName();
    public static string get_Endpoint_IsSystemObjectDesc();
    public static string get_Endpoint_NameName();
    public static string get_Endpoint_NameDesc();
    public static string get_Endpoint_OwnerName();
    public static string get_Endpoint_OwnerDesc();
    public static string get_Endpoint_ParentName();
    public static string get_Endpoint_ParentDesc();
    public static string get_Endpoint_PayloadName();
    public static string get_Endpoint_PayloadDesc();
    public static string get_Endpoint_ProtocolName();
    public static string get_Endpoint_ProtocolDesc();
    public static string get_Endpoint_ProtocolTypeName();
    public static string get_Endpoint_ProtocolTypeDesc();
    public static string get_Endpoint_StateName();
    public static string get_Endpoint_StateDesc();
    public static string get_Endpoint_UserDataName();
    public static string get_Endpoint_UserDataDesc();
    public static string get_PlanGuide_Name();
    public static string get_PlanGuide_Desc();
    public static string get_PlanGuide_IDName();
    public static string get_PlanGuide_IDDesc();
    public static string get_PlanGuide_HintsName();
    public static string get_PlanGuide_HintsDesc();
    public static string get_PlanGuide_IsDisabledName();
    public static string get_PlanGuide_IsDisabledDesc();
    public static string get_PlanGuide_ParametersName();
    public static string get_PlanGuide_ParametersDesc();
    public static string get_PlanGuide_ScopeBatchName();
    public static string get_PlanGuide_ScopeBatchDesc();
    public static string get_PlanGuide_ScopeObjectNameName();
    public static string get_PlanGuide_ScopeObjectNameDesc();
    public static string get_PlanGuide_ScopeSchemaNameName();
    public static string get_PlanGuide_ScopeSchemaNameDesc();
    public static string get_PlanGuide_ScopeTypeName();
    public static string get_PlanGuide_ScopeTypeDesc();
    public static string get_PlanGuide_StatementName();
    public static string get_PlanGuide_StatementDesc();
    public static string get_Statistic_Name();
    public static string get_Statistic_Desc();
    public static string get_Statistic_IDName();
    public static string get_Statistic_IDDesc();
    public static string get_Statistic_FileGroupName();
    public static string get_Statistic_FileGroupDesc();
    public static string get_Statistic_FilterDefinitionName();
    public static string get_Statistic_FilterDefinitionDesc();
    public static string get_Statistic_HasFilterName();
    public static string get_Statistic_HasFilterDesc();
    public static string get_Statistic_IsAutoCreatedName();
    public static string get_Statistic_IsAutoCreatedDesc();
    public static string get_Statistic_IsAutoDroppedName();
    public static string get_Statistic_IsAutoDroppedDesc();
    public static string get_Statistic_IsFromIndexCreationName();
    public static string get_Statistic_IsFromIndexCreationDesc();
    public static string get_Statistic_IsTemporaryName();
    public static string get_Statistic_IsTemporaryDesc();
    public static string get_Statistic_LastUpdatedName();
    public static string get_Statistic_LastUpdatedDesc();
    public static string get_Statistic_NoAutomaticRecomputationName();
    public static string get_Statistic_NoAutomaticRecomputationDesc();
    public static string get_Default_Name();
    public static string get_Default_Desc();
    public static string get_Default_IDName();
    public static string get_Default_IDDesc();
    public static string get_Default_SchemaName();
    public static string get_Default_SchemaDesc();
    public static string get_Default_CreateDateName();
    public static string get_Default_CreateDateDesc();
    public static string get_Default_TextBodyName();
    public static string get_Default_TextBodyDesc();
    public static string get_Default_TextHeaderName();
    public static string get_Default_TextHeaderDesc();
    public static string get_Default_TextModeName();
    public static string get_Default_TextModeDesc();
    public static string get_UserDefinedDataType_Name();
    public static string get_UserDefinedDataType_Desc();
    public static string get_UserDefinedDataType_IDName();
    public static string get_UserDefinedDataType_IDDesc();
    public static string get_UserDefinedDataType_SchemaName();
    public static string get_UserDefinedDataType_SchemaDesc();
    public static string get_UserDefinedDataType_AllowIdentityName();
    public static string get_UserDefinedDataType_AllowIdentityDesc();
    public static string get_UserDefinedDataType_CollationName();
    public static string get_UserDefinedDataType_CollationDesc();
    public static string get_UserDefinedDataType_DefaultName();
    public static string get_UserDefinedDataType_DefaultDesc();
    public static string get_UserDefinedDataType_DefaultSchemaName();
    public static string get_UserDefinedDataType_DefaultSchemaDesc();
    public static string get_UserDefinedDataType_IsSchemaOwnedName();
    public static string get_UserDefinedDataType_IsSchemaOwnedDesc();
    public static string get_UserDefinedDataType_LengthName();
    public static string get_UserDefinedDataType_LengthDesc();
    public static string get_UserDefinedDataType_MaxLengthName();
    public static string get_UserDefinedDataType_MaxLengthDesc();
    public static string get_UserDefinedDataType_NullableName();
    public static string get_UserDefinedDataType_NullableDesc();
    public static string get_UserDefinedDataType_NumericPrecisionName();
    public static string get_UserDefinedDataType_NumericPrecisionDesc();
    public static string get_UserDefinedDataType_NumericScaleName();
    public static string get_UserDefinedDataType_NumericScaleDesc();
    public static string get_UserDefinedDataType_OwnerName();
    public static string get_UserDefinedDataType_OwnerDesc();
    public static string get_UserDefinedDataType_RuleName();
    public static string get_UserDefinedDataType_RuleDesc();
    public static string get_UserDefinedDataType_RuleSchemaName();
    public static string get_UserDefinedDataType_RuleSchemaDesc();
    public static string get_UserDefinedDataType_SystemTypeName();
    public static string get_UserDefinedDataType_SystemTypeDesc();
    public static string get_UserDefinedDataType_VariableLengthName();
    public static string get_UserDefinedDataType_VariableLengthDesc();
    public static string get_PartitionScheme_Name();
    public static string get_PartitionScheme_Desc();
    public static string get_PartitionScheme_IDName();
    public static string get_PartitionScheme_IDDesc();
    public static string get_PartitionScheme_NextUsedFileGroupName();
    public static string get_PartitionScheme_NextUsedFileGroupDesc();
    public static string get_PartitionScheme_PartitionFunctionName();
    public static string get_PartitionScheme_PartitionFunctionDesc();
    public static string get_FullTextCatalog_Name();
    public static string get_FullTextCatalog_Desc();
    public static string get_FullTextCatalog_IDName();
    public static string get_FullTextCatalog_IDDesc();
    public static string get_FullTextCatalog_ErrorLogSizeName();
    public static string get_FullTextCatalog_ErrorLogSizeDesc();
    public static string get_FullTextCatalog_FileGroupName();
    public static string get_FullTextCatalog_FileGroupDesc();
    public static string get_FullTextCatalog_FullTextIndexSizeName();
    public static string get_FullTextCatalog_FullTextIndexSizeDesc();
    public static string get_FullTextCatalog_HasFullTextIndexedTablesName();
    public static string get_FullTextCatalog_HasFullTextIndexedTablesDesc();
    public static string get_FullTextCatalog_IsAccentSensitiveName();
    public static string get_FullTextCatalog_IsAccentSensitiveDesc();
    public static string get_FullTextCatalog_IsDefaultName();
    public static string get_FullTextCatalog_IsDefaultDesc();
    public static string get_FullTextCatalog_ItemCountName();
    public static string get_FullTextCatalog_ItemCountDesc();
    public static string get_FullTextCatalog_OwnerName();
    public static string get_FullTextCatalog_OwnerDesc();
    public static string get_FullTextCatalog_PopulationCompletionDateName();
    public static string get_FullTextCatalog_PopulationCompletionDateDesc();
    public static string get_FullTextCatalog_PopulationStatusName();
    public static string get_FullTextCatalog_PopulationStatusDesc();
    public static string get_FullTextCatalog_RootPathName();
    public static string get_FullTextCatalog_RootPathDesc();
    public static string get_FullTextCatalog_UniqueKeyCountName();
    public static string get_FullTextCatalog_UniqueKeyCountDesc();
    public static string get_FullTextStopList_Name();
    public static string get_FullTextStopList_Desc();
    public static string get_FullTextStopList_IDName();
    public static string get_FullTextStopList_IDDesc();
    public static string get_FullTextStopList_OwnerName();
    public static string get_FullTextStopList_OwnerDesc();
    public static string get_FullTextIndex_Name();
    public static string get_FullTextIndex_Desc();
    public static string get_FullTextIndex_CatalogNameName();
    public static string get_FullTextIndex_CatalogNameDesc();
    public static string get_FullTextIndex_ChangeTrackingName();
    public static string get_FullTextIndex_ChangeTrackingDesc();
    public static string get_FullTextIndex_DocumentsProcessedName();
    public static string get_FullTextIndex_DocumentsProcessedDesc();
    public static string get_FullTextIndex_FilegroupNameName();
    public static string get_FullTextIndex_FilegroupNameDesc();
    public static string get_FullTextIndex_IsEnabledName();
    public static string get_FullTextIndex_IsEnabledDesc();
    public static string get_FullTextIndex_ItemCountName();
    public static string get_FullTextIndex_ItemCountDesc();
    public static string get_FullTextIndex_NumberOfFailuresName();
    public static string get_FullTextIndex_NumberOfFailuresDesc();
    public static string get_FullTextIndex_PendingChangesName();
    public static string get_FullTextIndex_PendingChangesDesc();
    public static string get_FullTextIndex_PopulationStatusName();
    public static string get_FullTextIndex_PopulationStatusDesc();
    public static string get_FullTextIndex_StopListNameName();
    public static string get_FullTextIndex_StopListNameDesc();
    public static string get_FullTextIndex_StopListOptionName();
    public static string get_FullTextIndex_StopListOptionDesc();
    public static string get_FullTextIndex_UniqueIndexNameName();
    public static string get_FullTextIndex_UniqueIndexNameDesc();
    public static string get_FullTextIndex_IndexedColumnsName();
    public static string get_FullTextIndex_IndexedColumnsDesc();
    public static string get_FullTextIndex_SearchPropertyListNameName();
    public static string get_FullTextIndex_SearchPropertyListNameDesc();
    public static string get_Credential_Name();
    public static string get_Credential_Desc();
    public static string get_Credential_IDName();
    public static string get_Credential_IDDesc();
    public static string get_Credential_CreateDateName();
    public static string get_Credential_CreateDateDesc();
    public static string get_Credential_DateLastModifiedName();
    public static string get_Credential_DateLastModifiedDesc();
    public static string get_Credential_IdentityName();
    public static string get_Credential_IdentityDesc();
    public static string get_Credential_MappedClassTypeName();
    public static string get_Credential_MappedClassTypeDesc();
    public static string get_Credential_ProviderNameName();
    public static string get_Credential_ProviderNameDesc();
    public static string get_DatabaseScopedCredential_Name();
    public static string get_DatabaseScopedCredential_Desc();
    public static string get_DatabaseScopedCredential_IDName();
    public static string get_DatabaseScopedCredential_IDDesc();
    public static string get_DatabaseScopedCredential_CreateDateName();
    public static string get_DatabaseScopedCredential_CreateDateDesc();
    public static string get_DatabaseScopedCredential_DateLastModifiedName();
    public static string get_DatabaseScopedCredential_DateLastModifiedDesc();
    public static string get_DatabaseScopedCredential_IdentityName();
    public static string get_DatabaseScopedCredential_IdentityDesc();
    public static string get_DatabaseScopedCredential_MappedClassTypeName();
    public static string get_DatabaseScopedCredential_MappedClassTypeDesc();
    public static string get_DatabaseScopedCredential_ProviderNameName();
    public static string get_DatabaseScopedCredential_ProviderNameDesc();
    public static string get_Certificate_Name();
    public static string get_Certificate_Desc();
    public static string get_Certificate_IDName();
    public static string get_Certificate_IDDesc();
    public static string get_Certificate_ActiveForServiceBrokerDialogName();
    public static string get_Certificate_ActiveForServiceBrokerDialogDesc();
    public static string get_Certificate_ExpirationDateName();
    public static string get_Certificate_ExpirationDateDesc();
    public static string get_Certificate_IssuerName();
    public static string get_Certificate_IssuerDesc();
    public static string get_Certificate_OwnerName();
    public static string get_Certificate_OwnerDesc();
    public static string get_Certificate_PrivateKeyEncryptionTypeName();
    public static string get_Certificate_PrivateKeyEncryptionTypeDesc();
    public static string get_Certificate_SerialName();
    public static string get_Certificate_SerialDesc();
    public static string get_Certificate_SidName();
    public static string get_Certificate_SidDesc();
    public static string get_Certificate_StartDateName();
    public static string get_Certificate_StartDateDesc();
    public static string get_Certificate_SubjectName();
    public static string get_Certificate_SubjectDesc();
    public static string get_Certificate_ThumbprintName();
    public static string get_Certificate_ThumbprintDesc();
    public static string get_Certificate_LastBackupDateName();
    public static string get_Certificate_LastBackupDateDesc();
    public static string get_PartitionFunction_Name();
    public static string get_PartitionFunction_Desc();
    public static string get_PartitionFunction_IDName();
    public static string get_PartitionFunction_IDDesc();
    public static string get_PartitionFunction_CreateDateName();
    public static string get_PartitionFunction_CreateDateDesc();
    public static string get_PartitionFunction_NumberOfPartitionsName();
    public static string get_PartitionFunction_NumberOfPartitionsDesc();
    public static string get_PartitionFunction_RangeTypeName();
    public static string get_PartitionFunction_RangeTypeDesc();
    public static string get_PartitionFunction_RangeValuesName();
    public static string get_PartitionFunction_RangeValuesDesc();
    public static string get_UserDefinedAggregate_Name();
    public static string get_UserDefinedAggregate_Desc();
    public static string get_UserDefinedAggregate_IDName();
    public static string get_UserDefinedAggregate_IDDesc();
    public static string get_UserDefinedAggregate_SchemaName();
    public static string get_UserDefinedAggregate_SchemaDesc();
    public static string get_UserDefinedAggregate_AssemblyNameName();
    public static string get_UserDefinedAggregate_AssemblyNameDesc();
    public static string get_UserDefinedAggregate_ClassNameName();
    public static string get_UserDefinedAggregate_ClassNameDesc();
    public static string get_UserDefinedAggregate_CreateDateName();
    public static string get_UserDefinedAggregate_CreateDateDesc();
    public static string get_UserDefinedAggregate_DateLastModifiedName();
    public static string get_UserDefinedAggregate_DateLastModifiedDesc();
    public static string get_UserDefinedAggregate_IsSchemaOwnedName();
    public static string get_UserDefinedAggregate_IsSchemaOwnedDesc();
    public static string get_UserDefinedAggregate_OwnerName();
    public static string get_UserDefinedAggregate_OwnerDesc();
    public static string get_UserDefinedAggregate_ParametersName();
    public static string get_UserDefinedAggregate_ParametersDesc();
    public static string get_UserDefinedAggregate_DataTypeName();
    public static string get_UserDefinedAggregate_DataTypeDesc();
    public static string get_UserDefinedTableType_Name();
    public static string get_UserDefinedTableType_Desc();
    public static string get_UserDefinedTableType_CollationName();
    public static string get_UserDefinedTableType_CollationDesc();
    public static string get_UserDefinedTableType_CreateDateName();
    public static string get_UserDefinedTableType_CreateDateDesc();
    public static string get_UserDefinedTableType_DateLastModifiedName();
    public static string get_UserDefinedTableType_DateLastModifiedDesc();
    public static string get_UserDefinedTableType_IDName();
    public static string get_UserDefinedTableType_IDDesc();
    public static string get_UserDefinedTableType_IsSchemaOwnedName();
    public static string get_UserDefinedTableType_IsSchemaOwnedDesc();
    public static string get_UserDefinedTableType_IsUserDefinedName();
    public static string get_UserDefinedTableType_IsUserDefinedDesc();
    public static string get_UserDefinedTableType_MaxLengthName();
    public static string get_UserDefinedTableType_MaxLengthDesc();
    public static string get_UserDefinedTableType_NullableName();
    public static string get_UserDefinedTableType_NullableDesc();
    public static string get_UserDefinedTableType_OwnerName();
    public static string get_UserDefinedTableType_OwnerDesc();
    public static string get_UserDefinedTableType_IsMemoryOptimizedName();
    public static string get_UserDefinedTableType_IsMemoryOptimizedDesc();
    public static string get_ITableOptions_Name();
    public static string get_ITableOptions_Desc();
    public static string get_IViewOptions_Name();
    public static string get_IViewOptions_Desc();
    public static string get_ILoginOptions_Name();
    public static string get_ILoginOptions_Desc();
    public static string get_IUserOptions_Name();
    public static string get_IUserOptions_Desc();
    public static string get_SearchPropertyList_Name();
    public static string get_SearchPropertyList_Desc();
    public static string get_SearchPropertyList_IDName();
    public static string get_SearchPropertyList_IDDesc();
    public static string get_SearchPropertyList_OwnerName();
    public static string get_SearchPropertyList_OwnerDesc();
    public static string get_SearchPropertyList_DateCreatedName();
    public static string get_SearchPropertyList_DateCreatedDesc();
    public static string get_SearchPropertyList_DateLastModifiedName();
    public static string get_SearchPropertyList_DateLastModifiedDesc();
    public static string get_AvailabilityGroup_ClusterTypeName();
    public static string get_AvailabilityGroup_ClusterTypeDesc();
    public static string get_AvailabilityGroup_Name();
    public static string get_AvailabilityGroup_Desc();
    public static string get_AvailabilityGroup_IDName();
    public static string get_AvailabilityGroup_IDDesc();
    public static string get_AvailabilityGroup_UniqueIdName();
    public static string get_AvailabilityGroup_UniqueIdDesc();
    public static string get_AvailabilityGroup_PrimaryReplicaServerNameName();
    public static string get_AvailabilityGroup_PrimaryReplicaServerNameDesc();
    public static string get_AvailabilityGroup_IsLocalName();
    public static string get_AvailabilityGroup_IsLocalDesc();
    public static string get_AvailabilityGroup_AutomatedBackupPreferenceName();
    public static string get_AvailabilityGroup_AutomatedBackupPreferenceDesc();
    public static string get_AvailabilityGroup_FailureConditionLevelName();
    public static string get_AvailabilityGroup_FailureConditionLevelDesc();
    public static string get_AvailabilityGroup_HealthCheckTimeoutName();
    public static string get_AvailabilityGroup_HealthCheckTimeoutDesc();
    public static string get_AvailabilityGroup_LocalReplicaRoleName();
    public static string get_AvailabilityGroup_LocalReplicaRoleDesc();
    public static string get_AvailabilityGroup_BasicAvailabilityGroupName();
    public static string get_AvailabilityGroup_BasicAvailabilityGroupDesc();
    public static string get_AvailabilityGroup_DatabaseHealthTriggerName();
    public static string get_AvailabilityGroup_DatabaseHealthTriggerDesc();
    public static string get_AvailabilityGroup_DtcSupportEnabledName();
    public static string get_AvailabilityGroup_DtcSupportEnabledDesc();
    public static string get_AvailabilityGroup_IsDistributedAvailabilityGroupName();
    public static string get_AvailabilityGroup_IsDistributedAvailabilityGroupDesc();
    public static string get_AvailabilityGroup_IsManagedInstanceLinkName();
    public static string get_AvailabilityGroup_IsManagedInstanceLinkDesc();
    public static string get_AvailabilityGroup_RequiredSynchronizedSecondariesToCommitName();
    public static string get_AvailabilityGroup_RequiredSynchronizedSecondariesToCommitDesc();
    public static string get_AvailabilityGroup_IsContainedName();
    public static string get_AvailabilityGroup_IsContainedDesc();
    public static string get_AvailabilityReplica_Name();
    public static string get_AvailabilityReplica_Desc();
    public static string get_AvailabilityReplica_UniqueIdName();
    public static string get_AvailabilityReplica_UniqueIdDesc();
    public static string get_AvailabilityReplica_RoleName();
    public static string get_AvailabilityReplica_RoleDesc();
    public static string get_AvailabilityReplica_OperationalStateName();
    public static string get_AvailabilityReplica_OperationalStateDesc();
    public static string get_AvailabilityReplica_RollupRecoveryStateName();
    public static string get_AvailabilityReplica_RollupRecoveryStateDesc();
    public static string get_AvailabilityReplica_RollupSynchronizationStateName();
    public static string get_AvailabilityReplica_RollupSynchronizationStateDesc();
    public static string get_AvailabilityReplica_ConnectionStateName();
    public static string get_AvailabilityReplica_ConnectionStateDesc();
    public static string get_AvailabilityReplica_JoinStateName();
    public static string get_AvailabilityReplica_JoinStateDesc();
    public static string get_AvailabilityReplica_CreateDateName();
    public static string get_AvailabilityReplica_CreateDateDesc();
    public static string get_AvailabilityReplica_DateLastModifiedName();
    public static string get_AvailabilityReplica_DateLastModifiedDesc();
    public static string get_AvailabilityReplica_EndpointUrlName();
    public static string get_AvailabilityReplica_EndpointUrlDesc();
    public static string get_AvailabilityReplica_ReadonlyRoutingConnectionUrlName();
    public static string get_AvailabilityReplica_ReadonlyRoutingConnectionUrlDesc();
    public static string get_AvailabilityReplica_ConnectionModeInPrimaryRoleName();
    public static string get_AvailabilityReplica_ConnectionModeInPrimaryRoleDesc();
    public static string get_AvailabilityReplica_ConnectionModeInSecondaryRoleName();
    public static string get_AvailabilityReplica_ConnectionModeInSecondaryRoleDesc();
    public static string get_AvailabilityReplica_AvailabilityModeName();
    public static string get_AvailabilityReplica_AvailabilityModeDesc();
    public static string get_AvailabilityReplica_FailoverModeName();
    public static string get_AvailabilityReplica_FailoverModeDesc();
    public static string get_AvailabilityReplica_SeedingModeName();
    public static string get_AvailabilityReplica_SeedingModeDesc();
    public static string get_AvailabilityReplica_SessionTimeoutName();
    public static string get_AvailabilityReplica_SessionTimeoutDesc();
    public static string get_AvailabilityReplica_LastConnectErrorDescriptionName();
    public static string get_AvailabilityReplica_LastConnectErrorDescriptionDesc();
    public static string get_AvailabilityReplica_LastConnectErrorNumberName();
    public static string get_AvailabilityReplica_LastConnectErrorNumberDesc();
    public static string get_AvailabilityReplica_LastConnectErrorTimestampName();
    public static string get_AvailabilityReplica_LastConnectErrorTimestampDesc();
    public static string get_AvailabilityReplica_BackupPriorityName();
    public static string get_AvailabilityReplica_BackupPriorityDesc();
    public static string get_AvailabilityReplica_OwnerName();
    public static string get_AvailabilityReplica_OwnerDesc();
    public static string get_AvailabilityReplica_QuorumVoteCountName();
    public static string get_AvailabilityReplica_QuorumVoteCountDesc();
    public static string get_AvailabilityReplica_MemberStateName();
    public static string get_AvailabilityReplica_MemberStateDesc();
    public static string get_AvailabilityDatabase_Name();
    public static string get_AvailabilityDatabase_Desc();
    public static string get_AvailabilityDatabase_SynchronizationStateName();
    public static string get_AvailabilityDatabase_SynchronizationStateDesc();
    public static string get_AvailabilityDatabase_UniqueIdName();
    public static string get_AvailabilityDatabase_UniqueIdDesc();
    public static string get_AvailabilityDatabase_IsFailoverReadyName();
    public static string get_AvailabilityDatabase_IsFailoverReadyDesc();
    public static string get_AvailabilityDatabase_IsJoinedName();
    public static string get_AvailabilityDatabase_IsJoinedDesc();
    public static string get_AvailabilityDatabase_IsPendingSecondarySuspendName();
    public static string get_AvailabilityDatabase_IsPendingSecondarySuspendDesc();
    public static string get_AvailabilityDatabase_IsSuspendedName();
    public static string get_AvailabilityDatabase_IsSuspendedDesc();
    public static string get_AvailabilityDatabase_RecoveryLSNName();
    public static string get_AvailabilityDatabase_RecoveryLSNDesc();
    public static string get_AvailabilityDatabase_TruncationLSNName();
    public static string get_AvailabilityDatabase_TruncationLSNDesc();
    public static string get_DatabaseReplicaState_Name();
    public static string get_DatabaseReplicaState_Desc();
    public static string get_DatabaseReplicaState_DatabaseIdName();
    public static string get_DatabaseReplicaState_DatabaseIdDesc();
    public static string get_DatabaseReplicaState_AvailabilityGroupIdName();
    public static string get_DatabaseReplicaState_AvailabilityGroupIdDesc();
    public static string get_DatabaseReplicaState_AvailabilityReplicaIdName();
    public static string get_DatabaseReplicaState_AvailabilityReplicaIdDesc();
    public static string get_DatabaseReplicaState_AvailabilityDateabaseIdName();
    public static string get_DatabaseReplicaState_AvailabilityDateabaseIdDesc();
    public static string get_DatabaseReplicaState_AvailabilityGroupNameName();
    public static string get_DatabaseReplicaState_AvailabilityGroupNameDesc();
    public static string get_DatabaseReplicaState_AvailabilityReplicaServerNameName();
    public static string get_DatabaseReplicaState_AvailabilityReplicaServerNameDesc();
    public static string get_DatabaseReplicaState_AvailabilityDatabaseNameName();
    public static string get_DatabaseReplicaState_AvailabilityDatabaseNameDesc();
    public static string get_DatabaseReplicaState_ReplicaAvailabilityModeName();
    public static string get_DatabaseReplicaState_ReplicaAvailabilityModeDesc();
    public static string get_DatabaseReplicaState_ReplicaRoleName();
    public static string get_DatabaseReplicaState_ReplicaRoleDesc();
    public static string get_DatabaseReplicaState_IsLocalName();
    public static string get_DatabaseReplicaState_IsLocalDesc();
    public static string get_DatabaseReplicaState_IsFailoverReadyName();
    public static string get_DatabaseReplicaState_IsFailoverReadyDesc();
    public static string get_DatabaseReplicaState_SynchronizationStateName();
    public static string get_DatabaseReplicaState_SynchronizationStateDesc();
    public static string get_DatabaseReplicaState_IsSuspendedName();
    public static string get_DatabaseReplicaState_IsSuspendedDesc();
    public static string get_DatabaseReplicaState_SuspendReasonName();
    public static string get_DatabaseReplicaState_SuspendReasonDesc();
    public static string get_DatabaseReplicaState_RecoveryLSNName();
    public static string get_DatabaseReplicaState_RecoveryLSNDesc();
    public static string get_DatabaseReplicaState_TruncationLSNName();
    public static string get_DatabaseReplicaState_TruncationLSNDesc();
    public static string get_DatabaseReplicaState_LastSentLSNName();
    public static string get_DatabaseReplicaState_LastSentLSNDesc();
    public static string get_DatabaseReplicaState_LastSentTimeName();
    public static string get_DatabaseReplicaState_LastSentTimeDesc();
    public static string get_DatabaseReplicaState_LastReceivedLSNName();
    public static string get_DatabaseReplicaState_LastReceivedLSNDesc();
    public static string get_DatabaseReplicaState_LastReceivedTimeName();
    public static string get_DatabaseReplicaState_LastReceivedTimeDesc();
    public static string get_DatabaseReplicaState_LastHardenedLSNName();
    public static string get_DatabaseReplicaState_LastHardenedLSNDesc();
    public static string get_DatabaseReplicaState_LastHardenedTimeName();
    public static string get_DatabaseReplicaState_LastHardenedTimeDesc();
    public static string get_DatabaseReplicaState_LastRedoneLSNName();
    public static string get_DatabaseReplicaState_LastRedoneLSNDesc();
    public static string get_DatabaseReplicaState_LastRedoneTimeName();
    public static string get_DatabaseReplicaState_LastRedoneTimeDesc();
    public static string get_DatabaseReplicaState_LogSendQueueSizeName();
    public static string get_DatabaseReplicaState_LogSendQueueSizeDesc();
    public static string get_DatabaseReplicaState_LogSendRateName();
    public static string get_DatabaseReplicaState_LogSendRateDesc();
    public static string get_DatabaseReplicaState_RedoQueueSizeName();
    public static string get_DatabaseReplicaState_RedoQueueSizeDesc();
    public static string get_DatabaseReplicaState_RedoRateName();
    public static string get_DatabaseReplicaState_RedoRateDesc();
    public static string get_DatabaseReplicaState_FileStreamSendRateName();
    public static string get_DatabaseReplicaState_FileStreamSendRateDesc();
    public static string get_DatabaseReplicaState_EndOfLogLSNName();
    public static string get_DatabaseReplicaState_EndOfLogLSNDesc();
    public static string get_DatabaseReplicaState_LastCommitLSNName();
    public static string get_DatabaseReplicaState_LastCommitLSNDesc();
    public static string get_DatabaseReplicaState_LastCommitTimeName();
    public static string get_DatabaseReplicaState_LastCommitTimeDesc();
    public static string get_DatabaseReplicaState_EstimatedRecoveryTimeName();
    public static string get_DatabaseReplicaState_EstimatedRecoveryTimeDesc();
    public static string get_DatabaseReplicaState_SynchronizationPerformanceName();
    public static string get_DatabaseReplicaState_SynchronizationPerformanceDesc();
    public static string get_DatabaseReplicaState_IsJoinedName();
    public static string get_DatabaseReplicaState_IsJoinedDesc();
    public static string get_DatabaseReplicaState_EstimatedDataLossName();
    public static string get_DatabaseReplicaState_EstimatedDataLossDesc();
    public static string get_ResumableIndex_Name();
    public static string get_ResumableIndex_Desc();
    public static string get_ResumableIndex_ParentID();
    public static string get_ResumableIndex_ParentIDDesc();
    public static string get_ResumableIndex_ID();
    public static string get_ResumableIndex_IDDesc();
    public static string get_ResumableIndex_PartitionNumber();
    public static string get_ResumableIndex_PartitionNumberDesc();
    public static string get_ResumableIndex_SqlText();
    public static string get_ResumableIndex_SqlTextDesc();
    public static string get_ResumableIndex_ResumableOperationState();
    public static string get_ResumableIndex_ResumableOperationStateDesc();
    public static string get_ResumableIndex_StartTime();
    public static string get_ResumableIndex_StartTimeDesc();
    public static string get_ResumableIndex_LastPauseTime();
    public static string get_ResumableIndex_LastPauseTimeDesc();
    public static string get_ResumableIndex_TotalExecutionTime();
    public static string get_ResumableIndex_TotalExecutionTimeDesc();
    public static string get_ResumableIndex_PageCount();
    public static string get_ResumableIndex_PageCountDesc();
    public static string get_ResumableIndex_PercentComplete();
    public static string get_ResumableIndex_PercentCompleteDesc();
    public static string get_ResumableIndex_MaxDOP();
    public static string get_ResumableIndex_MaxDOPDesc();
    public static string get_ResumableIndex_ResumableMaxDuration();
    public static string get_ResumableIndex_ResumableMaxDurationDesc();
    public static string get_ResumableIndex_LowPriorityMaxDuration();
    public static string get_ResumableIndex_LowPriorityMaxDurationDesc();
    public static string get_ResumableIndex_LowPriorityAbortAfterWait();
    public static string get_ResumableIndex_LowPriorityAbortAfterWaitDesc();
    public static string get_SmartAdmin_Name();
    public static string get_SmartAdmin_Desc();
    public static string get_SmartAdmin_MasterSwitchName();
    public static string get_SmartAdmin_MasterSwitchDesc();
    public static string get_SmartAdmin_BackupRetentionPeriodInDaysName();
    public static string get_SmartAdmin_BackupRetentionPeriodInDaysDesc();
    public static string get_SmartAdmin_CredentialNameName();
    public static string get_SmartAdmin_CredentialNameDesc();
    public static string get_SmartAdmin_BackupEnabledName();
    public static string get_SmartAdmin_BackupEnabledDesc();
    public static string get_SmartAdmin_EncryptionAlgorithmName();
    public static string get_SmartAdmin_EncryptionAlgorithmDesc();
    public static string get_SmartAdmin_EncryptorNameName();
    public static string get_SmartAdmin_EncryptorNameDesc();
    public static string get_SmartAdmin_EncryptorTypeName();
    public static string get_SmartAdmin_EncryptorTypeDesc();
    public static string get_SmartAdmin_StorageUrlName();
    public static string get_SmartAdmin_StorageUrlDesc();
    public static string get_SmartAdmin_NoSuchDB();
    public static string get_SmartAdmin_WrongRecords();
    public static string get_SecurityPolicy_Name();
    public static string get_SecurityPolicy_Desc();
    public static string get_SecurityPolicy_NotForReplicationName();
    public static string get_SecurityPolicy_NotForReplicationDesc();
    public static string get_SecurityPolicy_EnabledName();
    public static string get_SecurityPolicy_EnabledDesc();
    public static string get_SecurityPolicy_CreateDateName();
    public static string get_SecurityPolicy_CreateDateDesc();
    public static string get_SecurityPolicy_DateLastModifiedName();
    public static string get_SecurityPolicy_DateLastModifiedDesc();
    public static string get_SecurityPolicy_IDName();
    public static string get_SecurityPolicy_IDDesc();
    public static string get_SecurityPolicy_IsSchemaOwnedName();
    public static string get_SecurityPolicy_IsSchemaOwnedDesc();
    public static string get_SecurityPolicy_IsSchemaBound();
    public static string get_SecurityPolicy_IsSchemaBoundDesc();
    public static string get_SecurityPolicy_OwnerName();
    public static string get_SecurityPolicy_OwnerDesc();
    public static string get_SecurityPredicate_Name();
    public static string get_SecurityPredicate_Desc();
    public static string get_SecurityPredicate_TargetObjectIDName();
    public static string get_SecurityPredicate_TargetObjectIDDesc();
    public static string get_SecurityPredicate_TargetObjectNameName();
    public static string get_SecurityPredicate_TargetObjectNameDesc();
    public static string get_SecurityPredicate_SecurityPredicateIDName();
    public static string get_SecurityPredicate_SecurityPredicateIDDesc();
    public static string get_SecurityPredicate_PredicateDefinitionName();
    public static string get_SecurityPredicate_PredicateDefinitionDesc();
    public static string get_SecurityPredicate_TargetObjectSchemaName();
    public static string get_SecurityPredicate_TargetObjectSchemaDesc();
    public static string get_SecurityPredicate_PredicateTypeName();
    public static string get_SecurityPredicate_PredicateTypeDesc();
    public static string get_SecurityPredicate_PredicateOperationName();
    public static string get_SecurityPredicate_PredicateOperationDesc();
    public static string get_ExternalDataSource_Name();
    public static string get_ExternalDataSource_Desc();
    public static string get_ExternalDataSource_IDName();
    public static string get_ExternalDataSource_IDDesc();
    public static string get_ExternalDataSource_LocationName();
    public static string get_ExternalDataSource_LocationDesc();
    public static string get_ExternalDataSource_DataSourceTypeName();
    public static string get_ExternalDataSource_DataSourceTypeDesc();
    public static string get_ExternalDataSource_ResourceManagerLocationName();
    public static string get_ExternalDataSource_ResourceManagerLocationDesc();
    public static string get_ExternalDataSource_CredentialName();
    public static string get_ExternalDataSource_CredentialDesc();
    public static string get_ExternalDataSource_ConnectionOptions();
    public static string get_ExternalDataSource_ConnectionOptionsDesc();
    public static string get_ExternalDataSource_PushdownOption();
    public static string get_ExternalDataSource_PushdownOptionDesc();
    public static string get_ExternalFileFormat_Name();
    public static string get_ExternalFileFormat_Desc();
    public static string get_ExternalFileFormat_IDName();
    public static string get_ExternalFileFormat_IDDesc();
    public static string get_ExternalFileFormat_FormatTypeName();
    public static string get_ExternalFileFormat_FormatTypeDesc();
    public static string get_ExternalFileFormat_FieldTerminatorName();
    public static string get_ExternalFileFormat_FieldTerminatorDesc();
    public static string get_ExternalFileFormat_StringDelimiterName();
    public static string get_ExternalFileFormat_StringDelimiterDesc();
    public static string get_ExternalFileFormat_DateFormatName();
    public static string get_ExternalFileFormat_DateFormatDesc();
    public static string get_ExternalFileFormat_UseTypeDefaultName();
    public static string get_ExternalFileFormat_UseTypeDefaultDesc();
    public static string get_ExternalFileFormat_SerDeMethodName();
    public static string get_ExternalFileFormat_SerDeMethodDesc();
    public static string get_ExternalFileFormat_RowTerminatorName();
    public static string get_ExternalFileFormat_RowTerminatorDesc();
    public static string get_ExternalFileFormat_EncodingName();
    public static string get_ExternalFileFormat_EncodingDesc();
    public static string get_ExternalFileFormat_DataCompressionName();
    public static string get_ExternalFileFormat_DataCompressionDesc();
    public static string get_ExternalFileFormat_RejectDbLocationName();
    public static string get_ExternalFileFormat_RejectDbLocationDesc();
    public static string get_ColumnMasterKey_AllowEnclaveComputationsName();
    public static string get_ColumnMasterKey_AllowEnclaveComputationsDesc();
    public static string get_ColumnMasterKey_Name();
    public static string get_ColumnMasterKey_Desc();
    public static string get_ColumnMasterKey_IDName();
    public static string get_ColumnMasterKey_IDDesc();
    public static string get_ColumnMasterKey_KeyStoreProviderNameName();
    public static string get_ColumnMasterKey_KeyStoreProviderNameDesc();
    public static string get_ColumnMasterKey_KeyPath();
    public static string get_ColumnMasterKey_KeyPathDesc();
    public static string get_ColumnMasterKey_CreateDateName();
    public static string get_ColumnMasterKey_CreateDateDesc();
    public static string get_ColumnMasterKey_DateLastModifiedName();
    public static string get_ColumnMasterKey_DateLastModifiedDesc();
    public static string get_ColumnMasterKey_SignatureName();
    public static string get_ColumnMasterKey_SignatureDesc();
    public static string get_ColumnEncryptionKey_Name();
    public static string get_ColumnEncryptionKey_Desc();
    public static string get_ColumnEncryptionKey_IDName();
    public static string get_ColumnEncryptionKey_IDDesc();
    public static string get_ColumnEncryptionKey_CreateDateName();
    public static string get_ColumnEncryptionKey_CreateDateDesc();
    public static string get_ColumnEncryptionKey_DateLastModifiedName();
    public static string get_ColumnEncryptionKey_DateLastModifiedDesc();
    public static string get_ColumnEncryptionKeyValue_Name();
    public static string get_ColumnEncryptionKeyValue_Desc();
    public static string get_ColumnEncryptionKeyValue_ColumnEncryptionKeyNameName();
    public static string get_ColumnEncryptionKeyValue_ColumnEncryptionKeyNameDesc();
    public static string get_ColumnEncryptionKeyValue_ColumnMasterKeyNameName();
    public static string get_ColumnEncryptionKeyValue_ColumnMasterKeyNameDesc();
    public static string get_ColumnEncryptionKeyValue_ColumnMasterKeyIDName();
    public static string get_ColumnEncryptionKeyValue_ColumnMasterKeyIDDesc();
    public static string get_ColumnEncryptionKeyValue_EncryptionAlgorithmName();
    public static string get_ColumnEncryptionKeyValue_EncryptionAlgorithmDesc();
    public static string get_ColumnEncryptionKeyValue_EncryptedValueName();
    public static string get_ColumnEncryptionKeyValue_EncryptedValueDesc();
    public static string get_DatabaseScopedConfiguration_Name();
    public static string get_DatabaseScopedConfiguration_Desc();
    public static string get_DatabaseScopedConfiguration_IDName();
    public static string get_DatabaseScopedConfiguration_IDDesc();
    public static string get_DatabaseScopedConfiguration_ValueName();
    public static string get_DatabaseScopedConfiguration_ValueDesc();
    public static string get_DatabaseScopedConfiguration_ValueForSecondaryName();
    public static string get_DatabaseScopedConfiguration_ValueForSecondaryDesc();
    public static string get_DatabaseScopedConfiguration_CreateScriptOnAzureDesc();
    public static string get_ExternalStream_ID();
    public static string get_ExternalStream_Name();
    public static string get_ExternalStream_Type();
    public static string get_ExternalStream_TypeDesc();
    public static string get_ExternalStream_CreateDate();
    public static string get_ExternalStream_IsSystemObject();
    public static string get_ExternalStream_IsPublished();
    public static string get_ExternalStream_IsSchemaPublished();
    public static string get_ExternalStream_DataSourceName();
    public static string get_ExternalStream_FileFormatName();
    public static string get_ExternalStream_Location();
    public static string get_ExternalStream_InputOptions();
    public static string get_ExternalStream_OutputOptions();
    public static string get_ExternalStreamingJob_ID();
    public static string get_ExternalStreamingJob_Name();
    public static string get_ExternalStreamingJob_Type();
    public static string get_ExternalStreamingJob_TypeDesc();
    public static string get_ExternalStreamingJob_CreateDate();
    public static string get_ExternalStreamingJob_IsSystemObject();
    public static string get_ExternalStreamingJob_IsPublished();
    public static string get_ExternalStreamingJob_IsSchemaPublished();
    public static string get_ExternalStreamingJob_Statement();
    public static string get_ExternalStreamingJob_Status();
}
[EvaluationModeAttribute("4")]
[PhysicalFacetAttribute]
[SfcElementAttribute("16")]
public class Microsoft.SqlServer.Management.Smo.LogFile : DatabaseFile {
    public static string UrnSuffix { get; }
    [SfcObjectAttribute("1")]
public Database Parent { get; public set; }
    private bool Microsoft.SqlServer.Management.Sdk.Sfc.ISfcSupportsDesignMode.IsDesignMode { get; }
    [SfcPropertyAttribute("1056")]
public long BytesReadFromDisk { get; }
    [SfcPropertyAttribute("1056")]
public long BytesWrittenToDisk { get; }
    [SfcPropertyAttribute("1280")]
public string FileName { get; public set; }
    [SfcPropertyAttribute("1024")]
public double Growth { get; public set; }
    [SfcPropertyAttribute("1024")]
public FileGrowthType GrowthType { get; public set; }
    [SfcPropertyAttribute("1024")]
public int ID { get; }
    [SfcPropertyAttribute("1024")]
public bool IsOffline { get; }
    [SfcPropertyAttribute("1024")]
public bool IsReadOnly { get; }
    [SfcPropertyAttribute("1024")]
public bool IsReadOnlyMedia { get; }
    [SfcPropertyAttribute("1024")]
public bool IsSparse { get; }
    [SfcPropertyAttribute("1024")]
public double MaxSize { get; public set; }
    [SfcPropertyAttribute("1056")]
public long NumberOfDiskReads { get; }
    [SfcPropertyAttribute("1056")]
public long NumberOfDiskWrites { get; }
    [SfcPropertyAttribute("1024")]
public double Size { get; public set; }
    [SfcPropertyAttribute("1056")]
public double UsedSpace { get; }
    [SfcPropertyAttribute("1056")]
public long VolumeFreeSpace { get; }
    internal LogFile(AbstractCollectionBase parentColl, ObjectKeyBase key, SqlSmoState state);
    public LogFile(Database database, string name, string fileName);
    public LogFile(Database database, string name);
    public static string get_UrnSuffix();
    public sealed virtual void Create();
    internal virtual void ScriptCreate(StringCollection createQuery, ScriptingPreferences sp);
    public Database get_Parent();
    public void set_Parent(Database value);
    private sealed virtual override bool Microsoft.SqlServer.Management.Sdk.Sfc.ISfcSupportsDesignMode.get_IsDesignMode();
    internal virtual SqlPropertyMetadataProvider GetPropertyMetadataProvider();
    public long get_BytesReadFromDisk();
    public long get_BytesWrittenToDisk();
    public string get_FileName();
    public void set_FileName(string value);
    public double get_Growth();
    public void set_Growth(double value);
    public FileGrowthType get_GrowthType();
    public void set_GrowthType(FileGrowthType value);
    public int get_ID();
    public bool get_IsOffline();
    public bool get_IsReadOnly();
    public bool get_IsReadOnlyMedia();
    public bool get_IsSparse();
    public double get_MaxSize();
    public void set_MaxSize(double value);
    public long get_NumberOfDiskReads();
    public long get_NumberOfDiskWrites();
    public double get_Size();
    public void set_Size(double value);
    public double get_UsedSpace();
    public long get_VolumeFreeSpace();
    internal virtual String[] GetNonAlterableProperties();
}
[DefaultMemberAttribute("Item")]
public class Microsoft.SqlServer.Management.Smo.LogFileCollection : SimpleObjectCollectionBase {
    public Database Parent { get; }
    public LogFile Item { get; }
    public LogFile Item { get; }
    internal LogFileCollection(SqlSmoObject parentInstance);
    public Database get_Parent();
    public LogFile get_Item(int index);
    public LogFile get_Item(string name);
    public void CopyTo(LogFile[] array, int index);
    public LogFile ItemById(int id);
    protected virtual Type GetCollectionElementType();
    internal virtual SqlSmoObject GetCollectionElementInstance(ObjectKeyBase key, SqlSmoState state);
    public void Remove(LogFile logFile);
    public void Remove(string name);
    public void Add(LogFile logFile);
    internal SqlSmoObject GetObjectByName(string name);
    internal virtual ObjectKeyBase CreateKeyFromUrn(Urn urn);
}
[EvaluationModeAttribute("4")]
[PhysicalFacetAttribute]
[SfcElementAttribute("48")]
public class Microsoft.SqlServer.Management.Smo.Login : ScriptNameObjectBase {
    private SqlSecureString password;
    private bool passwordIsHashed;
    private bool mustChangePassword;
    private StringCollection credentialCollection;
    private string oldCredential;
    private Guid objectId;
    private LoginEvents events;
    [SfcKeyAttribute("0")]
[SfcPropertyAttribute("3328")]
public string Name { get; public set; }
    [SfcPropertyAttribute("3328")]
public Guid ObjectId { get; public set; }
    public static string UrnSuffix { get; }
    [SfcObjectAttribute("1")]
public Server Parent { get; public set; }
    internal UserPermissionCollection Permissions { get; }
    private bool Microsoft.SqlServer.Management.Sdk.Sfc.ISfcSupportsDesignMode.IsDesignMode { get; }
    [SfcPropertyAttribute("1280", "string.empty")]
[SfcReferenceAttribute("Microsoft.SqlServer.Management.Smo.AsymmetricKey", "Server[@Name = '{0}']/Database[@Name = 'master']/AsymmetricKey[@Name = '{1}']", "Mono.Cecil.CustomAttributeArgument[]")]
[CLSCompliantAttribute("False")]
public string AsymmetricKey { get; public set; }
    [SfcPropertyAttribute("1280", "string.empty")]
[SfcReferenceAttribute("Microsoft.SqlServer.Management.Smo.Certificate", "Server[@Name = '{0}']/Database[@Name = 'master']/Certificate[@Name = '{1}']", "Mono.Cecil.CustomAttributeArgument[]")]
[CLSCompliantAttribute("False")]
public string Certificate { get; public set; }
    [SfcPropertyAttribute("3072")]
public DateTime CreateDate { get; }
    [SfcPropertyAttribute("1024", "string.empty")]
[SfcReferenceAttribute("Microsoft.SqlServer.Management.Smo.Credential", "Server[@Name = '{0}']/Credential[@Name = '{1}']", "Mono.Cecil.CustomAttributeArgument[]")]
[CLSCompliantAttribute("False")]
public string Credential { get; public set; }
    [SfcPropertyAttribute("3072")]
public DateTime DateLastModified { get; }
    [SfcPropertyAttribute("3072", "master")]
[SfcReferenceAttribute("Microsoft.SqlServer.Management.Smo.Database", "Server[@Name = '{0}']/Database[@Name = '{1}']", "Mono.Cecil.CustomAttributeArgument[]")]
[CLSCompliantAttribute("False")]
public string DefaultDatabase { get; public set; }
    [SfcPropertyAttribute("1024", "false")]
public bool DenyWindowsLogin { get; public set; }
    [SfcPropertyAttribute("1024", "true")]
public bool HasAccess { get; }
    [SfcPropertyAttribute("3072")]
public int ID { get; }
    [SfcPropertyAttribute("3072", "false")]
public bool IsDisabled { get; }
    [SfcPropertyAttribute("1024", "false")]
public bool IsLocked { get; }
    [SfcPropertyAttribute("1024")]
public bool IsPasswordExpired { get; }
    [SfcPropertyAttribute("3072", "false")]
public bool IsSystemObject { get; }
    [SfcPropertyAttribute("3072")]
public string Language { get; public set; }
    [SfcPropertyAttribute("3072")]
public string LanguageAlias { get; }
    [SfcPropertyAttribute("3328")]
public LoginType LoginType { get; public set; }
    [SfcPropertyAttribute("1024", "false")]
public bool MustChangePassword { get; }
    [SfcPropertyAttribute("3072", "false")]
public bool PasswordExpirationEnabled { get; public set; }
    [SfcPropertyAttribute("1024")]
public PasswordHashAlgorithm PasswordHashAlgorithm { get; }
    [SfcPropertyAttribute("3072", "false")]
public bool PasswordPolicyEnforced { get; public set; }
    [SfcPropertyAttribute("3328")]
public Byte[] Sid { get; public set; }
    [SfcPropertyAttribute("1024")]
public WindowsLoginAccessType WindowsLoginAccessType { get; }
    public LoginEvents Events { get; }
    internal Login(AbstractCollectionBase parentColl, ObjectKeyBase key, SqlSmoState state);
    public Login(Server server, string name);
    private void InitVariables();
    public virtual string get_Name();
    public virtual void set_Name(string value);
    public Guid get_ObjectId();
    public void set_ObjectId(Guid value);
    public StringCollection EnumCredentials();
    public void ChangePassword(string newPassword);
    public void ChangePassword(SecureString newPassword);
    public void ChangePassword(string oldPassword, string newPassword);
    public void ChangePassword(SecureString oldPassword, SecureString newPassword);
    public void ChangePassword(string newPassword, bool unlock, bool mustChange);
    public void ChangePassword(SecureString newPassword, bool unlock, bool mustChange);
    public static string get_UrnSuffix();
    public sealed virtual void Create();
    private void SetProperties();
    private void SetHasAccess();
    private void SetMustChangePassword();
    private void SetCredential();
    private void SetWindowsLoginType();
    public void Create(string password);
    public void Create(SecureString password);
    public void Create(string password, LoginCreateOptions options);
    public void Create(SecureString password, LoginCreateOptions options);
    internal void ScriptCreateCheck(StringCollection query, ScriptingPreferences sp);
    internal virtual void ScriptCreate(StringCollection query, ScriptingPreferences sp);
    private void AddComma(StringBuilder sb, Boolean& bStuffAdded);
    private void AppendSid(object oSid, StringBuilder sb);
    private string BoolToOnOff(object oBool);
    private void ExecuteLoginPasswordOptions(SqlSecureString password, SqlSecureString oldPassword, bool bUnlock, bool bMustChange);
    private void AddPasswordOptions(ScriptingPreferences sp, StringBuilder sb, SqlSecureString password, SqlSecureString oldPassword, bool bIsHashed, bool bMustChange, bool bUnlock);
    private void ValidatePasswordHash(string passwordHash);
    private bool HasMainDdlDirtyProps();
    private void ScriptLogin(StringCollection sc, ScriptingPreferences sp, bool bForCreate, bool bForServerCreateCheck);
    internal virtual void ScriptAssociations(StringCollection rolesCmd, ScriptingPreferences sp);
    private void ScriptCreateForCloud(StringCollection query, ScriptingPreferences sp);
    private void ScriptCreateGreaterEqual9(StringCollection query, ScriptingPreferences sp);
    private void ScriptCreateLess9(StringCollection query, ScriptingPreferences sp);
    public sealed virtual void Alter();
    internal virtual void ScriptAlter(StringCollection query, ScriptingPreferences sp);
    private void ScriptAlterGreaterEqual9(StringCollection query, ScriptingPreferences sp);
    private void ScriptAlterLess9(StringCollection query, ScriptingPreferences sp);
    protected virtual void PostCreate();
    internal void GetLanguageDDL(StringBuilder statement, bool bSuppressDirtyCheck);
    public sealed virtual void Drop();
    public sealed virtual void DropIfExists();
    internal virtual void ScriptDrop(StringCollection dropQuery, ScriptingPreferences sp);
    public StringCollection ListMembers();
    public DatabaseMapping[] EnumDatabaseMappings();
    public bool IsMember(string role);
    public string GetDatabaseUser(string databaseName);
    public sealed virtual StringCollection Script();
    public sealed virtual StringCollection Script(ScriptingOptions scriptingOptions);
    public void AddToRole(string role);
    private string GetAddToRoleDdl(string role, ScriptingPreferences sp);
    public sealed virtual void Rename(string newname);
    internal virtual void ScriptRename(StringCollection renameQuery, ScriptingPreferences sp, string newName);
    public DataTable EnumAgentProxyAccounts();
    public void Disable();
    public void Enable();
    public virtual void Refresh();
    public void AddCredential(string credentialName);
    public void DropCredential(string credentialName);
    private string ScriptAddDropCredential(bool add, string credentialName);
    internal static String[] GetScriptFields(Type parentType, ServerVersion version, DatabaseEngineType databaseEngineType, DatabaseEngineEdition databaseEngineEdition, bool defaultTextMode);
    internal virtual void AddScriptPermission(StringCollection query, ScriptingPreferences sp);
    public Server get_Parent();
    public void set_Parent(Server value);
    internal virtual UserPermissionCollection get_Permissions();
    private sealed virtual override bool Microsoft.SqlServer.Management.Sdk.Sfc.ISfcSupportsDesignMode.get_IsDesignMode();
    internal virtual SqlPropertyMetadataProvider GetPropertyMetadataProvider();
    public sealed virtual string get_AsymmetricKey();
    public sealed virtual void set_AsymmetricKey(string value);
    public sealed virtual string get_Certificate();
    public sealed virtual void set_Certificate(string value);
    public sealed virtual DateTime get_CreateDate();
    public sealed virtual string get_Credential();
    public sealed virtual void set_Credential(string value);
    public DateTime get_DateLastModified();
    public sealed virtual string get_DefaultDatabase();
    public sealed virtual void set_DefaultDatabase(string value);
    public bool get_DenyWindowsLogin();
    public void set_DenyWindowsLogin(bool value);
    public bool get_HasAccess();
    public sealed virtual int get_ID();
    public sealed virtual bool get_IsDisabled();
    public sealed virtual bool get_IsLocked();
    public bool get_IsPasswordExpired();
    public sealed virtual bool get_IsSystemObject();
    public sealed virtual string get_Language();
    public sealed virtual void set_Language(string value);
    public sealed virtual string get_LanguageAlias();
    public sealed virtual LoginType get_LoginType();
    public void set_LoginType(LoginType value);
    public sealed virtual bool get_MustChangePassword();
    public sealed virtual bool get_PasswordExpirationEnabled();
    public sealed virtual void set_PasswordExpirationEnabled(bool value);
    public PasswordHashAlgorithm get_PasswordHashAlgorithm();
    public sealed virtual bool get_PasswordPolicyEnforced();
    public sealed virtual void set_PasswordPolicyEnforced(bool value);
    public Byte[] get_Sid();
    public void set_Sid(Byte[] value);
    public WindowsLoginAccessType get_WindowsLoginAccessType();
    internal virtual String[] GetNonAlterableProperties();
    internal virtual object GetPropertyDefaultValue(string propname);
    public sealed virtual void Deny(ObjectPermissionSet permission, String[] granteeNames);
    public sealed virtual void Deny(ObjectPermissionSet permission, String[] granteeNames, bool cascade);
    public sealed virtual void Grant(ObjectPermissionSet permission, String[] granteeNames);
    public sealed virtual void Grant(ObjectPermissionSet permission, String[] granteeNames, bool grantGrant);
    public sealed virtual void Grant(ObjectPermissionSet permission, String[] granteeNames, bool grantGrant, string asRole);
    public sealed virtual void Revoke(ObjectPermissionSet permission, String[] granteeNames);
    public sealed virtual void Revoke(ObjectPermissionSet permission, String[] granteeNames, bool revokeGrant, bool cascade);
    public void Revoke(ObjectPermissionSet permission, String[] granteeNames, bool revokeGrant, bool cascade, string asRole);
    public sealed virtual void Deny(ObjectPermissionSet permission, string granteeName);
    public sealed virtual void Deny(ObjectPermissionSet permission, string granteeName, bool cascade);
    public sealed virtual void Grant(ObjectPermissionSet permission, string granteeName);
    public sealed virtual void Grant(ObjectPermissionSet permission, string granteeName, bool grantGrant);
    public sealed virtual void Grant(ObjectPermissionSet permission, string granteeName, bool grantGrant, string asRole);
    public sealed virtual void Revoke(ObjectPermissionSet permission, string granteeName);
    public void Revoke(ObjectPermissionSet permission, string granteeName, bool revokeGrant, bool cascade);
    public sealed virtual void Revoke(ObjectPermissionSet permission, string granteeName, bool revokeGrant, bool cascade, string asRole);
    public sealed virtual ObjectPermissionInfo[] EnumObjectPermissions();
    public sealed virtual ObjectPermissionInfo[] EnumObjectPermissions(string granteeName);
    public sealed virtual ObjectPermissionInfo[] EnumObjectPermissions(ObjectPermissionSet permissions);
    public sealed virtual ObjectPermissionInfo[] EnumObjectPermissions(string granteeName, ObjectPermissionSet permissions);
    public LoginEvents get_Events();
    [CompilerGeneratedAttribute]
private bool <GetDatabaseUser>b__59_0(User u);
}
[DefaultMemberAttribute("Item")]
public class Microsoft.SqlServer.Management.Smo.LoginCollection : SimpleObjectCollectionBase {
    public Server Parent { get; }
    public Login Item { get; }
    public Login Item { get; }
    internal LoginCollection(SqlSmoObject parentInstance);
    public Server get_Parent();
    public Login get_Item(int index);
    public Login get_Item(string name);
    public void CopyTo(Login[] array, int index);
    public Login ItemById(int id);
    protected virtual Type GetCollectionElementType();
    internal virtual SqlSmoObject GetCollectionElementInstance(ObjectKeyBase key, SqlSmoState state);
    public void Add(Login login);
    internal SqlSmoObject GetObjectByName(string name);
    internal virtual ObjectKeyBase CreateKeyFromUrn(Urn urn);
}
[FlagsAttribute]
public enum Microsoft.SqlServer.Management.Smo.LoginCreateOptions : Enum {
    public int value__;
    public static LoginCreateOptions None;
    public static LoginCreateOptions IsHashed;
    public static LoginCreateOptions MustChange;
}
public class Microsoft.SqlServer.Management.Smo.LoginEvents : object {
    private ObjectEventsWorker serverEventsWorker;
    private Login parent;
    internal LoginEvents(Login parent);
    public ObjectEventSet GetEventSelection();
    public void SubscribeToEvents(ObjectEventSet events);
    public void SubscribeToEvents(ObjectEventSet events, ServerEventHandler eventHandler);
    public void UnsubscribeFromEvents(ObjectEventSet events);
    public void UnsubscribeAllEvents();
    public void StartEvents();
    public void StopEvents();
    public void add_ServerEvent(ServerEventHandler value);
    public void remove_ServerEvent(ServerEventHandler value);
    private void InitializeEvents();
}
public class Microsoft.SqlServer.Management.Smo.Mail.ConfigurationValue : NamedSmoObject {
    public static string UrnSuffix { get; }
    [SfcObjectAttribute("1")]
public SqlMail Parent { get; }
    [SfcPropertyAttribute("1024")]
public string Description { get; public set; }
    [SfcPropertyAttribute("1024")]
public string Value { get; public set; }
    internal ConfigurationValue(AbstractCollectionBase parentColl, ObjectKeyBase key, SqlSmoState state);
    public static string get_UrnSuffix();
    internal virtual void ScriptCreate(StringCollection queries, ScriptingPreferences sp);
    public sealed virtual void Alter();
    internal virtual void ScriptAlter(StringCollection queries, ScriptingPreferences sp);
    private void ScriptConfigurationValue(StringCollection queries, ScriptingPreferences sp);
    public sealed virtual StringCollection Script();
    public sealed virtual StringCollection Script(ScriptingOptions scriptingOptions);
    public SqlMail get_Parent();
    internal virtual SqlPropertyMetadataProvider GetPropertyMetadataProvider();
    public string get_Description();
    public void set_Description(string value);
    public string get_Value();
    public void set_Value(string value);
}
[DefaultMemberAttribute("Item")]
public class Microsoft.SqlServer.Management.Smo.Mail.ConfigurationValueCollection : SimpleObjectCollectionBase {
    public SqlMail Parent { get; }
    public ConfigurationValue Item { get; }
    public ConfigurationValue Item { get; }
    internal ConfigurationValueCollection(SqlSmoObject parentInstance);
    public SqlMail get_Parent();
    public ConfigurationValue get_Item(int index);
    public ConfigurationValue get_Item(string name);
    public void CopyTo(ConfigurationValue[] array, int index);
    protected virtual Type GetCollectionElementType();
    internal virtual SqlSmoObject GetCollectionElementInstance(ObjectKeyBase key, SqlSmoState state);
    public void Add(ConfigurationValue configurationValue);
    internal SqlSmoObject GetObjectByName(string name);
    internal virtual ObjectKeyBase CreateKeyFromUrn(Urn urn);
}
public class Microsoft.SqlServer.Management.Smo.Mail.MailAccount : ScriptNameObjectBase {
    private MailServerCollection mailServers;
    public static string UrnSuffix { get; }
    [SfcPropertyAttribute("1024")]
public bool IsBusyAccount { get; }
    [SfcObjectAttribute("0", "0", "Microsoft.SqlServer.Management.Smo.Mail.MailServer")]
public MailServerCollection MailServers { get; }
    [SfcObjectAttribute("1")]
public SqlMail Parent { get; public set; }
    [SfcPropertyAttribute("1024")]
public string Description { get; public set; }
    [SfcPropertyAttribute("1024")]
public string DisplayName { get; public set; }
    [SfcPropertyAttribute("1024")]
public string EmailAddress { get; public set; }
    [SfcPropertyAttribute("1024")]
public int ID { get; }
    [SfcPropertyAttribute("1024")]
public string ReplyToAddress { get; public set; }
    internal MailAccount(AbstractCollectionBase parentColl, ObjectKeyBase key, SqlSmoState state);
    public MailAccount(SqlMail sqlMail, string name);
    public MailAccount(SqlMail parent, string name, string description);
    public MailAccount(SqlMail parent, string name, string description, string displayName, string emailAddress);
    public static string get_UrnSuffix();
    public sealed virtual void Create();
    public bool get_IsBusyAccount();
    public String[] GetAccountProfileNames();
    internal virtual void ScriptCreate(StringCollection queries, ScriptingPreferences sp);
    public sealed virtual void Alter();
    internal virtual void ScriptAlter(StringCollection queries, ScriptingPreferences sp);
    public sealed virtual void Drop();
    public sealed virtual void DropIfExists();
    internal virtual void ScriptDrop(StringCollection queries, ScriptingPreferences sp);
    public sealed virtual void Rename(string newName);
    internal virtual void ScriptRename(StringCollection queries, ScriptingPreferences sp, string newName);
    public sealed virtual StringCollection Script();
    public sealed virtual StringCollection Script(ScriptingOptions scriptingOptions);
    public MailServerCollection get_MailServers();
    public SqlMail get_Parent();
    public void set_Parent(SqlMail value);
    internal virtual SqlPropertyMetadataProvider GetPropertyMetadataProvider();
    public string get_Description();
    public void set_Description(string value);
    public string get_DisplayName();
    public void set_DisplayName(string value);
    public string get_EmailAddress();
    public void set_EmailAddress(string value);
    public int get_ID();
    public string get_ReplyToAddress();
    public void set_ReplyToAddress(string value);
}
[DefaultMemberAttribute("Item")]
public class Microsoft.SqlServer.Management.Smo.Mail.MailAccountCollection : SimpleObjectCollectionBase {
    public SqlMail Parent { get; }
    public MailAccount Item { get; }
    public MailAccount Item { get; }
    internal MailAccountCollection(SqlSmoObject parentInstance);
    public SqlMail get_Parent();
    public MailAccount get_Item(int index);
    public MailAccount get_Item(string name);
    public void CopyTo(MailAccount[] array, int index);
    public MailAccount ItemById(int id);
    protected virtual Type GetCollectionElementType();
    internal virtual SqlSmoObject GetCollectionElementInstance(ObjectKeyBase key, SqlSmoState state);
    public void Add(MailAccount mailAccount);
    internal SqlSmoObject GetObjectByName(string name);
    internal virtual ObjectKeyBase CreateKeyFromUrn(Urn urn);
}
public class Microsoft.SqlServer.Management.Smo.Mail.MailProfile : ScriptNameObjectBase {
    private bool forceDeleteForActiveProfiles;
    public static string UrnSuffix { get; }
    [SfcPropertyAttribute("1024")]
public bool ForceDeleteForActiveProfiles { get; public set; }
    [SfcPropertyAttribute("1024")]
public bool IsBusyProfile { get; }
    internal int ProfileIDInternal { get; }
    [SfcObjectAttribute("1")]
public SqlMail Parent { get; public set; }
    [SfcPropertyAttribute("1024")]
public string Description { get; public set; }
    [SfcPropertyAttribute("1024")]
public int ID { get; }
    internal MailProfile(AbstractCollectionBase parentColl, ObjectKeyBase key, SqlSmoState state);
    public MailProfile(SqlMail sqlMail, string name);
    public MailProfile(SqlMail parent, string name, string description);
    public static string get_UrnSuffix();
    public sealed virtual void Create();
    internal virtual void ScriptCreate(StringCollection queries, ScriptingPreferences sp);
    public void set_ForceDeleteForActiveProfiles(bool value);
    public bool get_ForceDeleteForActiveProfiles();
    public sealed virtual void Alter();
    internal virtual void ScriptAlter(StringCollection queries, ScriptingPreferences sp);
    public sealed virtual void Drop();
    public sealed virtual void DropIfExists();
    public bool get_IsBusyProfile();
    internal virtual void ScriptDrop(StringCollection queries, ScriptingPreferences sp);
    public sealed virtual void Rename(string newName);
    internal virtual void ScriptRename(StringCollection queries, ScriptingPreferences sp, string newName);
    internal int get_ProfileIDInternal();
    public sealed virtual StringCollection Script();
    public sealed virtual StringCollection Script(ScriptingOptions scriptingOptions);
    public void AddAccount(string accountName, int sequenceNumber);
    private StringBuilder ScriptAddAccount(string profileName, string accountName, int sequenceNumber);
    public void RemoveAccount(string accountName);
    public DataTable EnumAccounts();
    public void AddPrincipal(string principalName);
    public void AddPrincipal(string principalName, bool isDefaultProfile);
    private StringBuilder ScriptAddPrincipal(string profileName, string principalName, bool isDefaultProfile);
    public void RemovePrincipal(string principalName);
    public DataTable EnumPrincipals();
    public SqlMail get_Parent();
    public void set_Parent(SqlMail value);
    internal virtual SqlPropertyMetadataProvider GetPropertyMetadataProvider();
    public string get_Description();
    public void set_Description(string value);
    public int get_ID();
}
[DefaultMemberAttribute("Item")]
public class Microsoft.SqlServer.Management.Smo.Mail.MailProfileCollection : SimpleObjectCollectionBase {
    public SqlMail Parent { get; }
    public MailProfile Item { get; }
    public MailProfile Item { get; }
    internal MailProfileCollection(SqlSmoObject parentInstance);
    public SqlMail get_Parent();
    public MailProfile get_Item(int index);
    public MailProfile get_Item(string name);
    public void CopyTo(MailProfile[] array, int index);
    public MailProfile ItemById(int id);
    protected virtual Type GetCollectionElementType();
    internal virtual SqlSmoObject GetCollectionElementInstance(ObjectKeyBase key, SqlSmoState state);
    public void Add(MailProfile mailProfile);
    internal SqlSmoObject GetObjectByName(string name);
    internal virtual ObjectKeyBase CreateKeyFromUrn(Urn urn);
}
public class Microsoft.SqlServer.Management.Smo.Mail.MailServer : ScriptNameObjectBase {
    private SqlSecureString password;
    private bool noCredentialChange;
    public static string UrnSuffix { get; }
    internal SqlSecureString Password { get; }
    public bool NoCredentialChange { get; public set; }
    [SfcObjectAttribute("1")]
public MailAccount Parent { get; }
    [SfcPropertyAttribute("1024")]
public bool EnableSsl { get; public set; }
    [SfcPropertyAttribute("1024")]
public int Port { get; public set; }
    [SfcPropertyAttribute("1024")]
public string ServerType { get; }
    [SfcPropertyAttribute("1024")]
public bool UseDefaultCredentials { get; public set; }
    [SfcPropertyAttribute("1024")]
public string UserName { get; public set; }
    internal MailServer(AbstractCollectionBase parentColl, ObjectKeyBase key, SqlSmoState state);
    public static string get_UrnSuffix();
    internal SqlSecureString get_Password();
    public bool get_NoCredentialChange();
    public void set_NoCredentialChange(bool value);
    public void SetAccount(string userName, string password);
    public void SetAccount(string userName, SecureString password);
    public void SetPassword(string password);
    public void SetPassword(SecureString password);
    private void SetAccountPasswordInternal(bool setAccount);
    internal void ScriptMailServer(StringCollection queries, ScriptingPreferences sp);
    internal void ScriptMailServer(StringCollection queries, ScriptingPreferences sp, string newAccountName, string newServerName);
    internal virtual void ScriptCreate(StringCollection queries, ScriptingPreferences sp);
    public sealed virtual void Alter();
    internal virtual void ScriptAlter(StringCollection queries, ScriptingPreferences sp);
    public sealed virtual void Rename(string newName);
    internal virtual void ScriptRename(StringCollection queries, ScriptingPreferences sp, string newName);
    public sealed virtual StringCollection Script();
    public sealed virtual StringCollection Script(ScriptingOptions scriptingOptions);
    public MailAccount get_Parent();
    internal virtual SqlPropertyMetadataProvider GetPropertyMetadataProvider();
    public bool get_EnableSsl();
    public void set_EnableSsl(bool value);
    public int get_Port();
    public void set_Port(int value);
    public string get_ServerType();
    public bool get_UseDefaultCredentials();
    public void set_UseDefaultCredentials(bool value);
    public string get_UserName();
    public void set_UserName(string value);
}
[DefaultMemberAttribute("Item")]
public class Microsoft.SqlServer.Management.Smo.Mail.MailServerCollection : SimpleObjectCollectionBase {
    public MailAccount Parent { get; }
    public MailServer Item { get; }
    public MailServer Item { get; }
    internal MailServerCollection(SqlSmoObject parentInstance);
    public MailAccount get_Parent();
    public MailServer get_Item(int index);
    public MailServer get_Item(string name);
    public void CopyTo(MailServer[] array, int index);
    protected virtual Type GetCollectionElementType();
    internal virtual SqlSmoObject GetCollectionElementInstance(ObjectKeyBase key, SqlSmoState state);
    public void Add(MailServer mailServer);
    internal SqlSmoObject GetObjectByName(string name);
    internal virtual ObjectKeyBase CreateKeyFromUrn(Urn urn);
}
[SfcElementTypeAttribute("Mail")]
public class Microsoft.SqlServer.Management.Smo.Mail.SqlMail : SqlSmoObject {
    private MailProfileCollection mailProfiles;
    private MailAccountCollection mailAccounts;
    private ConfigurationValueCollection configuratonValues;
    protected internal string CollationDatabaseInServer { get; }
    [SfcObjectAttribute("1")]
public Server Parent { get; }
    public static string UrnSuffix { get; }
    [SfcObjectAttribute("1", "0", "Microsoft.SqlServer.Management.Smo.Mail.MailProfile")]
public MailProfileCollection Profiles { get; }
    [SfcObjectAttribute("1", "0", "Microsoft.SqlServer.Management.Smo.Mail.MailAccount")]
public MailAccountCollection Accounts { get; }
    [SfcObjectAttribute("1", "0", "Microsoft.SqlServer.Management.Smo.Mail.ConfigurationValue")]
public ConfigurationValueCollection ConfigurationValues { get; }
    internal SqlMail(Server parentsrv, ObjectKeyBase key, SqlSmoState state);
    protected internal virtual string get_CollationDatabaseInServer();
    public Server get_Parent();
    protected sealed virtual void GetUrnRecursive(StringBuilder urnbuilder, UrnIdOption idOption);
    protected internal virtual string GetDBName();
    public static string get_UrnSuffix();
    internal virtual void ScriptCreate(StringCollection queries, ScriptingPreferences sp);
    public sealed virtual StringCollection Script();
    public sealed virtual StringCollection Script(ScriptingOptions scriptingOptions);
    public MailProfileCollection get_Profiles();
    public MailAccountCollection get_Accounts();
    public ConfigurationValueCollection get_ConfigurationValues();
    internal virtual SqlPropertyMetadataProvider GetPropertyMetadataProvider();
}
internal class Microsoft.SqlServer.Management.Smo.MailPreferences : object {
    [CompilerGeneratedAttribute]
private bool <Accounts>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Principals>k__BackingField;
    public bool Accounts { get; public set; }
    public bool Principals { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_Accounts();
    [CompilerGeneratedAttribute]
public void set_Accounts(bool value);
    [CompilerGeneratedAttribute]
public bool get_Principals();
    [CompilerGeneratedAttribute]
public void set_Principals(bool value);
    private void Init();
    internal object Clone();
}
[SfcElementAttribute("48")]
public class Microsoft.SqlServer.Management.Smo.MasterKey : SqlSmoObject {
    private SqlSecureString encryptionPwd;
    private SqlSecureString decryptionPwd;
    private string path;
    [SfcObjectAttribute("1")]
public Database Parent { get; public set; }
    public static string UrnSuffix { get; }
    private bool Microsoft.SqlServer.Management.Sdk.Sfc.ISfcSupportsDesignMode.IsDesignMode { get; }
    [SfcPropertyAttribute("3072")]
public DateTime CreateDate { get; }
    [SfcPropertyAttribute("3072")]
public DateTime DateLastModified { get; }
    [SfcPropertyAttribute("3072")]
public bool IsEncryptedByServer { get; }
    [SfcPropertyAttribute("3072")]
public bool IsOpen { get; }
    internal MasterKey(Database parentdb, ObjectKeyBase key, SqlSmoState state);
    public MasterKey(Database parent);
    public Database get_Parent();
    public void set_Parent(Database value);
    internal virtual void ValidateParent(SqlSmoObject newParent);
    protected sealed virtual void GetUrnRecursive(StringBuilder urnbuilder, UrnIdOption idOption);
    protected internal virtual string GetDBName();
    public static string get_UrnSuffix();
    public void Create(string encryptionPassword);
    internal virtual void ScriptCreate(StringCollection queries, ScriptingPreferences sp);
    public void Create(string path, string decryptionPassword, string encryptionPassword);
    private void DoesMkExist();
    protected virtual void PostCreate();
    public sealed virtual void Drop();
    internal virtual void ScriptDrop(StringCollection queries, ScriptingPreferences sp);
    public void Import(string path, string decryptionPassword, string encryptionPassword);
    public void Import(string path, string decryptionPassword, string encryptionPassword, bool forceRegeneration);
    public void Export(string path, string password);
    public void AddPasswordEncryption(string password);
    public void AddServiceKeyEncryption();
    public void Close();
    public void Open(string password);
    public void DropPasswordEncryption(string password);
    public void DropServiceKeyEncryption();
    public void Regenerate(string password);
    public void Regenerate(string password, bool forceRegeneration);
    public DataTable EnumKeyEncryptions();
    private sealed virtual override bool Microsoft.SqlServer.Management.Sdk.Sfc.ISfcSupportsDesignMode.get_IsDesignMode();
    internal virtual SqlPropertyMetadataProvider GetPropertyMetadataProvider();
    public DateTime get_CreateDate();
    public DateTime get_DateLastModified();
    public bool get_IsEncryptedByServer();
    public bool get_IsOpen();
}
public class Microsoft.SqlServer.Management.Smo.MessageCollectionBase : SortedListCollectionBase {
    internal MessageCollectionBase(SqlSmoObject parent);
    protected virtual void InitInnerCollection();
    public void Remove(int id);
    public void Remove(int id, string language);
    internal virtual ObjectKeyBase CreateKeyFromUrn(Urn urn);
    internal static string GetDefaultLanguage();
    public bool Contains(int id, string language);
    public bool Contains(int id, int languageId);
}
public class Microsoft.SqlServer.Management.Smo.MessageObjectBase : SqlSmoObject {
    internal MessageObjectBase(AbstractCollectionBase parentColl, ObjectKeyBase key, SqlSmoState state);
    internal MessageObjectBase(ObjectKeyBase key, SqlSmoState state);
    internal virtual ObjectKeyBase GetEmptyKey();
}
internal class Microsoft.SqlServer.Management.Smo.MessageObjectComparer : ObjectComparerBase {
    internal MessageObjectComparer(IComparer stringComparer);
    public virtual int Compare(object obj1, object obj2);
}
internal class Microsoft.SqlServer.Management.Smo.MessageObjectKey : ObjectKeyBase {
    private int messageID;
    private string language;
    internal static StringCollection fields;
    public int ID { get; public set; }
    public string Language { get; public set; }
    public string UrnFilter { get; }
    public bool IsNull { get; }
    public MessageObjectKey(int messageID, string language);
    private static MessageObjectKey();
    public int get_ID();
    public void set_ID(int value);
    public string get_Language();
    public void set_Language(string value);
    public virtual string get_UrnFilter();
    public virtual StringCollection GetFieldNames();
    public virtual string ToString();
    public virtual ObjectKeyBase Clone();
    internal virtual void Validate(Type objectType);
    public virtual bool get_IsNull();
    public virtual ObjectComparerBase GetComparer(IComparer stringComparer);
}
internal static class Microsoft.SqlServer.Management.Smo.MetadataProviderLookup : object {
    private static Dictionary`2<Type, Type> providerLookup;
    private static MetadataProviderLookup();
    private static void UpdateProviderLookup(Assembly assembly);
    public static Type GetPropertyMetadataProviderType();
    public static Type GetPropertyMetadataProviderType(Type t);
}
public class Microsoft.SqlServer.Management.Smo.MissingObjectException : SmoException {
    public SmoExceptionType SmoExceptionType { get; }
    public string Message { get; }
    public MissingObjectException(string message);
    public MissingObjectException(string message, Exception innerException);
    private MissingObjectException(SerializationInfo info, StreamingContext context);
    private void Init();
    public virtual SmoExceptionType get_SmoExceptionType();
    public virtual string get_Message();
}
public enum Microsoft.SqlServer.Management.Smo.Month : Enum {
    public int value__;
    public static Month January;
    public static Month February;
    public static Month March;
    public static Month April;
    public static Month May;
    public static Month June;
    public static Month July;
    public static Month August;
    public static Month September;
    public static Month October;
    public static Month November;
    public static Month December;
}
internal class Microsoft.SqlServer.Management.Smo.MultipartNameAdapter : object {
    private static string cName;
    private static string cSchema;
    private ScriptSchemaObjectBase wrappedObject;
    private string schema;
    public string Name { get; }
    public string Schema { get; }
    public MultipartNameAdapter(Table obj);
    public MultipartNameAdapter(View obj);
    public MultipartNameAdapter(UserDefinedFunction obj);
    public MultipartNameAdapter(StoredProcedure obj);
    public MultipartNameAdapter(Synonym obj);
    public MultipartNameAdapter(Sequence obj);
    public MultipartNameAdapter(UserDefinedType obj);
    public MultipartNameAdapter(XmlSchemaCollection obj);
    public sealed virtual string get_Name();
    public sealed virtual string get_Schema();
    public sealed virtual void Refresh();
}
internal class Microsoft.SqlServer.Management.Smo.NameAdapter : object {
    private static string cName;
    private NamedSmoObject wrappedObject;
    public string Name { get; }
    public NameAdapter(Table obj);
    public NameAdapter(Index obj);
    public NameAdapter(StoredProcedure obj);
    public NameAdapter(Trigger obj);
    public NameAdapter(SqlAssembly obj);
    public NameAdapter(View obj);
    public NameAdapter(UserDefinedFunction obj);
    public NameAdapter(Synonym obj);
    public NameAdapter(Sequence obj);
    public NameAdapter(UserDefinedType obj);
    public NameAdapter(Rule obj);
    public NameAdapter(Default obj);
    public NameAdapter(User obj);
    public NameAdapter(AsymmetricKey obj);
    public NameAdapter(SymmetricKey obj);
    public NameAdapter(Certificate obj);
    public NameAdapter(DatabaseRole obj);
    public NameAdapter(ApplicationRole obj);
    public NameAdapter(Schema obj);
    public NameAdapter(XmlSchemaCollection obj);
    public sealed virtual string get_Name();
    public sealed virtual void Refresh();
}
public class Microsoft.SqlServer.Management.Smo.NamedSmoObject : SqlSmoObject {
    [SfcKeyAttribute("0")]
[SfcPropertyAttribute("5376")]
public string Name { get; public set; }
    internal string FullQualifiedName { get; }
    internal string InternalName { get; }
    internal string PermissionPrefix { get; }
    internal NamedSmoObject(AbstractCollectionBase parentColl, ObjectKeyBase key, SqlSmoState state);
    internal NamedSmoObject(ObjectKeyBase key, SqlSmoState state);
    public virtual string get_Name();
    public virtual void set_Name(string value);
    internal virtual void ValidateName(string name);
    internal virtual string get_FullQualifiedName();
    internal virtual string get_InternalName();
    protected void RenameImpl(string newName);
    protected void RenameImplWorker(string newName);
    protected virtual void ExecuteRenameQuery(string newName);
    internal virtual void ScriptRename(StringCollection renameQuery, ScriptingPreferences sp, string newName);
    internal virtual ObjectKeyBase GetEmptyKey();
    internal string get_PermissionPrefix();
    internal virtual string FormatFullNameForScripting(ScriptingPreferences sp);
    internal string FormatFullNameForScripting(ScriptingPreferences sp, bool nameIsIndentifier);
    internal virtual string GetName(ScriptingPreferences sp);
    internal void ScriptOwner(StringCollection queries, ScriptingPreferences sp);
    protected void SetSchemaOwned();
    internal virtual void ScriptChangeOwner(StringCollection queries, ScriptingPreferences sp);
    internal virtual void ScriptChangeOwner(StringCollection queries, string newOwner, ScriptingPreferences sp);
    internal virtual void ScriptOwnerForShiloh(StringBuilder sb, ScriptingPreferences sp, string newOwner);
}
[ExtensionAttribute]
internal static class Microsoft.SqlServer.Management.Smo.NetCoreHelpers : object {
    private static int DefaultFileStreamBufferSize;
    private static CultureInfo invariantCulture;
    public static CultureInfo InvariantCulture { get; }
    public static int InvariantCultureLcid { get; }
    private static NetCoreHelpers();
    public static CultureInfo get_InvariantCulture();
    public static int get_InvariantCultureLcid();
    public static XmlWriter CreateXmlWriter(TextWriter textWriter, XmlWriterSettings xmlSettings);
    [ExtensionAttribute]
public static StringComparer GetStringComparer(CultureInfo culture, bool ignoreCase);
    [ExtensionAttribute]
public static Assembly GetAssembly(Type type);
    [ExtensionAttribute]
public static Type GetBaseType(Type type);
    [ExtensionAttribute]
public static Type[] GetGenericArguments(Type type);
    [ExtensionAttribute]
public static bool GetIsAssignableFrom(Type type, Type c);
    [ExtensionAttribute]
public static bool GetIsClass(Type type);
    [ExtensionAttribute]
public static bool GetIsEnum(Type type);
    [ExtensionAttribute]
public static bool GetIsGenericType(Type type);
    [ExtensionAttribute]
public static bool GetIsNestedPrivate(Type type);
    [ExtensionAttribute]
public static bool GetIsPrimitive(Type type);
    [ExtensionAttribute]
public static bool GetIsSealed(Type type);
    [ExtensionAttribute]
public static bool GetIsValueType(Type type);
    public static StreamWriter CreateStreamWriter(string path, bool appendToFile);
    public static StreamWriter CreateStreamWriter(string path, bool appendToFile, Encoding encoding);
    private static FileStream CreateFileStream(string path, bool appendToFile);
    public static int StringCompare(string x, string y, bool ignoreCase, CultureInfo culture);
    [ExtensionAttribute]
public static string FixNewLines(string input, ScriptingPreferences sp);
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.SqlServer.Management.Smo.NumaCPUCollectionBase`1 : object {
    private AffinityInfoBase parent;
    internal SortedList cpuNumaCol;
    private int System.Collections.ICollection.Count { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    internal T Item { get; }
    internal NumaCPUCollectionBase`1(AffinityInfoBase parent);
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
    private void CopyTo(T[] array, int index);
    public sealed virtual IEnumerator GetEnumerator();
    private sealed virtual override int System.Collections.ICollection.get_Count();
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    internal T get_Item(int index);
}
internal class Microsoft.SqlServer.Management.Smo.NumaCPUComparer : object {
    private sealed virtual override int System.Collections.IComparer.Compare(object object1, object object2);
}
internal class Microsoft.SqlServer.Management.Smo.NumaCPUEnumerator : object {
    private int idx;
    private SortedList col;
    private object System.Collections.IEnumerator.Current { get; }
    internal NumaCPUEnumerator(SortedList col);
    private sealed virtual override object System.Collections.IEnumerator.get_Current();
    private sealed virtual override bool System.Collections.IEnumerator.MoveNext();
    private sealed virtual override void System.Collections.IEnumerator.Reset();
}
public class Microsoft.SqlServer.Management.Smo.NumaNode : object {
    private int id;
    private int groupID;
    private AffinityInfoBase affInfo;
    private CpuCollection cpuCol;
    public CpuCollection Cpus { get; }
    public int ID { get; }
    public int GroupID { get; }
    public NumaNodeAffinity AffinityMask { get; public set; }
    internal NumaNode(int id, int groupID, AffinityInfoBase parent);
    public CpuCollection get_Cpus();
    public int get_ID();
    public int get_GroupID();
    public NumaNodeAffinity get_AffinityMask();
    public void set_AffinityMask(NumaNodeAffinity value);
}
public enum Microsoft.SqlServer.Management.Smo.NumaNodeAffinity : Enum {
    public int value__;
    public static NumaNodeAffinity Full;
    public static NumaNodeAffinity None;
    public static NumaNodeAffinity Partial;
}
[DefaultMemberAttribute("Item")]
public class Microsoft.SqlServer.Management.Smo.NumaNodeCollection : object {
    private AffinityInfoBase parent;
    private NumaCPUCollectionBase`1<NumaNode> numaCollection;
    internal SortedList numaNodeCol;
    private ICollection iCol;
    private Dictionary`2<int, NumaNode> numaCollectionFromId;
    private int maxNumaId;
    private int minNumaId;
    public int Count { get; }
    public bool IsSynchronized { get; }
    public object SyncRoot { get; }
    public NumaNode Item { get; }
    private Dictionary`2<int, NumaNode> NumaCollectionFromId { get; }
    private int MaxNumaId { get; }
    private int MinNumaId { get; }
    internal NumaNodeCollection(AffinityInfoBase parent);
    public sealed virtual void CopyTo(Array array, int index);
    public void CopyTo(NumaNode[] array, int index);
    public sealed virtual IEnumerator GetEnumerator();
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsSynchronized();
    public sealed virtual object get_SyncRoot();
    public NumaNode get_Item(int index);
    private Dictionary`2<int, NumaNode> get_NumaCollectionFromId();
    private int get_MaxNumaId();
    private int get_MinNumaId();
    public NumaNode GetElementAt(int position);
    public NumaNode GetByID(int numanodeId);
    public void SetAffinityToRange(int startNumaNodeId, int endNumaNodeId, NumaNodeAffinity affinityMask);
    public void SetAffinityToRange(int startNumaNodeId, int endNumaNodeId, NumaNodeAffinity affinityMask, bool ignoreMissingIds);
    internal StringCollection AddNumaInDdl(StringBuilder stringBuilder);
    internal bool IsManuallySet();
}
public abstract class Microsoft.SqlServer.Management.Smo.NumberedObjectCollectionBase : SortedListCollectionBase {
    internal NumberedObjectCollectionBase(SqlSmoObject parent);
    protected virtual void InitInnerCollection();
    public bool Contains(short number);
    internal virtual ObjectKeyBase CreateKeyFromUrn(Urn urn);
}
internal class Microsoft.SqlServer.Management.Smo.NumberedObjectComparer : ObjectComparerBase {
    public virtual int Compare(object obj1, object obj2);
}
internal class Microsoft.SqlServer.Management.Smo.NumberedObjectKey : ObjectKeyBase {
    protected short number;
    internal static StringCollection fields;
    public short Number { get; public set; }
    public string UrnFilter { get; }
    public bool IsNull { get; }
    public NumberedObjectKey(short number);
    private static NumberedObjectKey();
    public short get_Number();
    public void set_Number(short value);
    public virtual string ToString();
    public virtual string get_UrnFilter();
    public virtual StringCollection GetFieldNames();
    public virtual ObjectKeyBase Clone();
    public virtual bool get_IsNull();
    public virtual ObjectComparerBase GetComparer(IComparer stringComparer);
}
[SfcElementTypeAttribute("Numbered")]
[SfcElementAttribute("48")]
public class Microsoft.SqlServer.Management.Smo.NumberedStoredProcedure : ScriptNameObjectBase {
    private NumberedStoredProcedureParameterCollection m_Params;
    [SfcObjectAttribute("1")]
public StoredProcedure Parent { get; internal set; }
    [SfcPropertyAttribute("1024")]
public short Number { get; }
    [SfcObjectAttribute("1", "0", "Microsoft.SqlServer.Management.Smo.NumberedStoredProcedureParameter")]
public NumberedStoredProcedureParameterCollection Parameters { get; }
    public static string UrnSuffix { get; }
    [SfcKeyAttribute("0")]
[SfcPropertyAttribute("1280")]
public string Name { get; public set; }
    [SfcPropertyAttribute("1056")]
public string TextBody { get; public set; }
    [SfcPropertyAttribute("1056")]
public string TextHeader { get; public set; }
    [SfcPropertyAttribute("1024")]
public bool TextMode { get; public set; }
    private bool Microsoft.SqlServer.Management.Sdk.Sfc.ISfcSupportsDesignMode.IsDesignMode { get; }
    [SfcPropertyAttribute("3072")]
public bool IsEncrypted { get; public set; }
    internal NumberedStoredProcedure(AbstractCollectionBase parentColl, ObjectKeyBase key, SqlSmoState state);
    public NumberedStoredProcedure(StoredProcedure storedProcedure, short number);
    public StoredProcedure get_Parent();
    internal void set_Parent(StoredProcedure value);
    public short get_Number();
    public NumberedStoredProcedureParameterCollection get_Parameters();
    public static string get_UrnSuffix();
    private void ScriptSP(StringCollection queries, ScriptingPreferences sp, ScriptHeaderType scriptHeaderType);
    internal virtual string FormatFullNameForScripting(ScriptingPreferences sp);
    private void ScriptSPHeaderInternal(StringBuilder sb, ScriptingPreferences sp, ScriptHeaderType scriptHeaderType);
    private void ScriptSPBodyInternal(StringBuilder sb);
    private void ScriptInternal(StringCollection queries, ScriptingPreferences sp, ScriptHeaderType scriptHeaderType);
    public virtual string ToString();
    internal void ScriptInternalCreateDdl(StringCollection queries, ScriptingPreferences sp, ScriptHeaderType scriptHeaderType);
    public sealed virtual void Create();
    internal virtual void ScriptCreate(StringCollection queries, ScriptingPreferences sp);
    public sealed virtual void Alter();
    internal virtual void ScriptAlter(StringCollection alterQuery, ScriptingPreferences sp);
    protected virtual bool IsObjectDirty();
    internal virtual PropagateInfo[] GetPropagateInfo(PropagateAction action);
    public virtual string get_Name();
    public virtual void set_Name(string value);
    public sealed virtual string ScriptHeader(bool forAlter);
    public sealed virtual string ScriptHeader(ScriptHeaderType scriptHeaderType);
    public sealed virtual string get_TextBody();
    public sealed virtual void set_TextBody(string value);
    public sealed virtual string get_TextHeader();
    public sealed virtual void set_TextHeader(string value);
    public sealed virtual bool get_TextMode();
    public sealed virtual void set_TextMode(bool value);
    internal virtual void ValidateProperty(Property prop, object value);
    protected virtual string GetBraketNameForText();
    internal static String[] GetScriptFields(Type parentType, ServerVersion version, DatabaseEngineType databaseEngineType, DatabaseEngineEdition databaseEngineEdition, bool defaultTextMode);
    private sealed virtual override bool Microsoft.SqlServer.Management.Sdk.Sfc.ISfcSupportsDesignMode.get_IsDesignMode();
    internal virtual SqlPropertyMetadataProvider GetPropertyMetadataProvider();
    public bool get_IsEncrypted();
    public void set_IsEncrypted(bool value);
    internal virtual String[] GetNonAlterableProperties();
}
[DefaultMemberAttribute("Item")]
public class Microsoft.SqlServer.Management.Smo.NumberedStoredProcedureCollection : NumberedObjectCollectionBase {
    public StoredProcedure Parent { get; }
    public NumberedStoredProcedure Item { get; }
    internal NumberedStoredProcedureCollection(SqlSmoObject parentInstance);
    public StoredProcedure get_Parent();
    public NumberedStoredProcedure get_Item(int index);
    protected virtual Type GetCollectionElementType();
    internal virtual SqlSmoObject GetCollectionElementInstance(ObjectKeyBase key, SqlSmoState state);
    public NumberedStoredProcedure GetProcedureByNumber(short number);
    public void CopyTo(NumberedStoredProcedure[] array, int index);
}
[SfcElementTypeAttribute("Param")]
[SfcElementAttribute("48")]
public class Microsoft.SqlServer.Management.Smo.NumberedStoredProcedureParameter : Parameter {
    [SfcKeyAttribute("0")]
[SfcPropertyAttribute("5376")]
public string Name { get; public set; }
    [SfcObjectAttribute("1")]
public NumberedStoredProcedure Parent { get; public set; }
    private bool Microsoft.SqlServer.Management.Sdk.Sfc.ISfcSupportsDesignMode.IsDesignMode { get; }
    [SfcPropertyAttribute("3072")]
public bool IsOutputParameter { get; public set; }
    internal NumberedStoredProcedureParameter(AbstractCollectionBase parent, ObjectKeyBase key, SqlSmoState state);
    public NumberedStoredProcedureParameter(NumberedStoredProcedure numberedStoredProcedure, string name);
    internal virtual void ValidateProperty(Property prop, object value);
    public virtual string get_Name();
    public virtual void set_Name(string value);
    public NumberedStoredProcedure get_Parent();
    public void set_Parent(NumberedStoredProcedure value);
    private sealed virtual override bool Microsoft.SqlServer.Management.Sdk.Sfc.ISfcSupportsDesignMode.get_IsDesignMode();
    internal virtual SqlPropertyMetadataProvider GetPropertyMetadataProvider();
    public bool get_IsOutputParameter();
    public void set_IsOutputParameter(bool value);
}
[DefaultMemberAttribute("Item")]
public class Microsoft.SqlServer.Management.Smo.NumberedStoredProcedureParameterCollection : ParameterCollectionBase {
    public NumberedStoredProcedure Parent { get; }
    public NumberedStoredProcedureParameter Item { get; }
    public NumberedStoredProcedureParameter Item { get; }
    internal NumberedStoredProcedureParameterCollection(SqlSmoObject parentInstance);
    public NumberedStoredProcedure get_Parent();
    public NumberedStoredProcedureParameter get_Item(int index);
    public void CopyTo(NumberedStoredProcedureParameter[] array, int index);
    public NumberedStoredProcedureParameter get_Item(string name);
    protected virtual Type GetCollectionElementType();
    internal virtual SqlSmoObject GetCollectionElementInstance(ObjectKeyBase key, SqlSmoState state);
    public void Add(NumberedStoredProcedureParameter numberedStoredProcedureParameter);
    public void Add(NumberedStoredProcedureParameter numberedStoredProcedureParameter, string insertAtColumnName);
    public void Add(NumberedStoredProcedureParameter numberedStoredProcedureParameter, int insertAtPosition);
    public void Remove(NumberedStoredProcedureParameter numberedStoredProcedureParameter);
    public NumberedStoredProcedureParameter ItemById(int id);
}
public class Microsoft.SqlServer.Management.Smo.ObjectAlteredEventArgs : SmoEventArgs {
    private object innerObject;
    public object SmoObject { get; }
    public ObjectAlteredEventArgs(Urn urn, object innerObject);
    public object get_SmoObject();
}
internal class Microsoft.SqlServer.Management.Smo.ObjectComparerBase : object {
    protected IComparer stringComparer;
    internal ObjectComparerBase(IComparer stringComparer);
    public virtual int Compare(object obj1, object obj2);
}
public class Microsoft.SqlServer.Management.Smo.ObjectCreatedEventArgs : SmoEventArgs {
    private object innerObject;
    public object SmoObject { get; }
    public ObjectCreatedEventArgs(Urn urn, object innerObject);
    public object get_SmoObject();
}
public class Microsoft.SqlServer.Management.Smo.ObjectDroppedEventArgs : SmoEventArgs {
    public ObjectDroppedEventArgs(Urn urn);
}
public class Microsoft.SqlServer.Management.Smo.ObjectEvent : object {
    private ObjectEventValues m_value;
    internal ObjectEventValues Value { get; }
    public static ObjectEvent Alter { get; }
    public static ObjectEvent Drop { get; }
    internal ObjectEvent(ObjectEventValues eventValue);
    internal ObjectEventValues get_Value();
    public static ObjectEventSet op_Implicit(ObjectEvent eventValue);
    public static ObjectEventSet op_Addition(ObjectEvent eventLeft, ObjectEvent eventRight);
    public static ObjectEventSet Add(ObjectEvent eventLeft, ObjectEvent eventRight);
    public static ObjectEventSet op_BitwiseOr(ObjectEvent eventLeft, ObjectEvent eventRight);
    public static ObjectEventSet BitwiseOr(ObjectEvent eventLeft, ObjectEvent eventRight);
    public virtual string ToString();
    public static bool op_Equality(ObjectEvent a, ObjectEvent b);
    public static bool op_Inequality(ObjectEvent a, ObjectEvent b);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static ObjectEvent get_Alter();
    public static ObjectEvent get_Drop();
}
public class Microsoft.SqlServer.Management.Smo.ObjectEventSet : EventSetBase {
    public int NumberOfElements { get; }
    public bool Alter { get; public set; }
    public bool Drop { get; public set; }
    public ObjectEventSet(ObjectEventSet eventSet);
    public ObjectEventSet(ObjectEvent anEvent);
    public ObjectEventSet(ObjectEvent[] events);
    internal ObjectEventSet(BitArray storage);
    public virtual EventSetBase Copy();
    internal void SetBit(ObjectEvent anEvent);
    internal void ResetBit(ObjectEvent anEvent);
    public ObjectEventSet Add(ObjectEvent anEvent);
    public ObjectEventSet Remove(ObjectEvent anEvent);
    public static ObjectEventSet op_Addition(ObjectEventSet eventSet, ObjectEvent anEvent);
    public static ObjectEventSet Add(ObjectEventSet eventSet, ObjectEvent anEvent);
    public static ObjectEventSet op_Subtraction(ObjectEventSet eventSet, ObjectEvent anEvent);
    public static ObjectEventSet Subtract(ObjectEventSet eventSet, ObjectEvent anEvent);
    public virtual int get_NumberOfElements();
    public virtual string ToString();
    public bool get_Alter();
    public void set_Alter(bool value);
    public bool get_Drop();
    public void set_Drop(bool value);
}
internal class Microsoft.SqlServer.Management.Smo.ObjectEventsWorker : EventsWorkerBase {
    private SqlSmoObject target;
    protected SqlSmoObject Target { get; }
    public ObjectEventsWorker(SqlSmoObject target);
    protected virtual SqlSmoObject get_Target();
    protected virtual string GetEventClass(int eventID);
    protected virtual EventQuery CreateWqlQuery(string eventClass);
}
internal enum Microsoft.SqlServer.Management.Smo.ObjectEventValues : Enum {
    public int value__;
    public static ObjectEventValues Alter;
    public static ObjectEventValues Drop;
}
internal abstract class Microsoft.SqlServer.Management.Smo.ObjectInSchemaEventsWorker : EventsWorkerBase {
    private ScriptSchemaObjectBase target;
    protected SqlSmoObject Target { get; }
    protected string ObjectType { get; }
    internal ObjectInSchemaEventsWorker(ScriptSchemaObjectBase target, Type eventSetType, Type eventEnumType);
    protected virtual SqlSmoObject get_Target();
    protected virtual string get_ObjectType();
    protected virtual EventQuery CreateWqlQuery(string eventClass);
}
internal class Microsoft.SqlServer.Management.Smo.ObjectKeyBase : object {
    private bool writable;
    public string UrnFilter { get; }
    public bool IsNull { get; }
    internal bool Writable { get; internal set; }
    internal virtual void Validate(Type objectType);
    public virtual string get_UrnFilter();
    public virtual StringCollection GetFieldNames();
    public virtual bool get_IsNull();
    internal bool get_Writable();
    internal void set_Writable(bool value);
    public virtual ObjectComparerBase GetComparer(IComparer stringComparer);
    public virtual ObjectKeyBase Clone();
    public virtual string GetExceptionName();
    internal static StringCollection GetFieldNames(Type t);
    internal static ObjectKeyBase CreateKeyOffset(Type t, IDataReader reader, int columnOffset);
}
internal enum Microsoft.SqlServer.Management.Smo.ObjectOrder : Enum {
    public int value__;
    public static ObjectOrder uninitialized;
    public static ObjectOrder unresolvedentity;
    public static ObjectOrder server;
    public static ObjectOrder settings;
    public static ObjectOrder oledbprovidersettings;
    public static ObjectOrder useroptions;
    public static ObjectOrder filestreamsettings;
    public static ObjectOrder fulltextservice;
    public static ObjectOrder cryptographicprovider;
    public static ObjectOrder credential;
    public static ObjectOrder database;
    public static ObjectOrder databasescopedcredential;
    public static ObjectOrder login;
    public static ObjectOrder masterassembly;
    public static ObjectOrder mastercertificate;
    public static ObjectOrder masterasymmetrickey;
    public static ObjectOrder certificatekeylogin;
    public static ObjectOrder roleserver;
    public static ObjectOrder serverpermission;
    public static ObjectOrder serverassociation;
    public static ObjectOrder serverownership;
    public static ObjectOrder linkedserver;
    public static ObjectOrder audit;
    public static ObjectOrder userdefinedmessage;
    public static ObjectOrder httpendpoint;
    public static ObjectOrder endpoint;
    public static ObjectOrder databaseencryptionkey;
    public static ObjectOrder masterkey;
    public static ObjectOrder applicationrole;
    public static ObjectOrder user;
    public static ObjectOrder userassembly;
    public static ObjectOrder usercertificate;
    public static ObjectOrder userasymmetrickey;
    public static ObjectOrder certificatekeyuser;
    public static ObjectOrder roledatabase;
    public static ObjectOrder databasepermission;
    public static ObjectOrder databaseassociation;
    public static ObjectOrder databaseownership;
    public static ObjectOrder sqlassembly;
    public static ObjectOrder externalLanguage;
    public static ObjectOrder externalLibrary;
    public static ObjectOrder asymmetrickey;
    public static ObjectOrder certificate;
    public static ObjectOrder symmetrickeys;
    public static ObjectOrder schema;
    public static ObjectOrder defaultdatabase;
    public static ObjectOrder fulltextcatalog;
    public static ObjectOrder fulltextstoplist;
    public static ObjectOrder searchpropertylist;
    public static ObjectOrder searchproperty;
    public static ObjectOrder partitionfunction;
    public static ObjectOrder partitionscheme;
    public static ObjectOrder rule;
    public static ObjectOrder xmlschemacollection;
    public static ObjectOrder userdefineddatatype;
    public static ObjectOrder userdefinedtype;
    public static ObjectOrder sequence;
    public static ObjectOrder userdefinedtabletype;
    public static ObjectOrder userdefinedaggregate;
    public static ObjectOrder storedprocedure;
    public static ObjectOrder servicebroker;
    public static ObjectOrder messagetype;
    public static ObjectOrder servicecontract;
    public static ObjectOrder servicequeue;
    public static ObjectOrder brokerservice;
    public static ObjectOrder serviceroute;
    public static ObjectOrder remoteservicebinding;
    public static ObjectOrder brokerpriority;
    public static ObjectOrder synonym;
    public static ObjectOrder scalarudf;
    public static ObjectOrder regulartable;
    public static ObjectOrder userdefinedfunction;
    public static ObjectOrder externaldatasource;
    public static ObjectOrder externalfileformat;
    public static ObjectOrder externalStream;
    public static ObjectOrder externalStreamingJob;
    public static ObjectOrder columnmasterkey;
    public static ObjectOrder columnencryptionkey;
    public static ObjectOrder columnencryptionkeyvalue;
    public static ObjectOrder table;
    public static ObjectOrder sensitivityclassification;
    public static ObjectOrder view;
    public static ObjectOrder tableviewudf;
    public static ObjectOrder creatingudf;
    public static ObjectOrder creatingtable;
    public static ObjectOrder creatingview;
    public static ObjectOrder securitypolicy;
    public static ObjectOrder securitypredicate;
    public static ObjectOrder clusteredindex;
    public static ObjectOrder data;
    public static ObjectOrder nonclusteredindex;
    public static ObjectOrder columnstoreindex;
    public static ObjectOrder clusteredcolumnstoreindex;
    public static ObjectOrder primaryxmlindex;
    public static ObjectOrder secondaryxmlindex;
    public static ObjectOrder selectivexmlindex;
    public static ObjectOrder secondaryselectivexmlindex;
    public static ObjectOrder index;
    public static ObjectOrder fulltextindex;
    public static ObjectOrder defaultcolumn;
    public static ObjectOrder foreignkey;
    public static ObjectOrder check;
    public static ObjectOrder creatingsproc;
    public static ObjectOrder nonschemaboundsproc;
    public static ObjectOrder trigger;
    public static ObjectOrder statistic;
    public static ObjectOrder planguide;
    public static ObjectOrder databaseauditspecification;
    public static ObjectOrder ddltriggerdatabase;
    public static ObjectOrder ddltriggerdatabaseenable;
    public static ObjectOrder ddltriggerdatabasedisable;
    public static ObjectOrder extendedproperty;
    public static ObjectOrder resourcepool;
    public static ObjectOrder externalresourcepool;
    public static ObjectOrder workloadgroup;
    public static ObjectOrder workloadmanagementworkloadclassifier;
    public static ObjectOrder workloadmanagementworkloadgroup;
    public static ObjectOrder resourcegovernor;
    public static ObjectOrder mail;
    public static ObjectOrder mailprofile;
    public static ObjectOrder mailaccount;
    public static ObjectOrder mailserver;
    public static ObjectOrder configurationvalue;
    public static ObjectOrder job;
    public static ObjectOrder step;
    public static ObjectOrder operator;
    public static ObjectOrder operatorcategory;
    public static ObjectOrder jobcategory;
    public static ObjectOrder alertcategory;
    public static ObjectOrder schedule;
    public static ObjectOrder targetservergroup;
    public static ObjectOrder alert;
    public static ObjectOrder backupdevice;
    public static ObjectOrder proxyaccount;
    public static ObjectOrder jobserver;
    public static ObjectOrder alertsystem;
    public static ObjectOrder serverauditspecification;
    public static ObjectOrder ddltriggerserver;
    public static ObjectOrder ddltriggerserverenable;
    public static ObjectOrder ddltriggerserverdisable;
    public static ObjectOrder availabilitygroup;
    public static ObjectOrder availabilityreplica;
    public static ObjectOrder availabilitydatabase;
    public static ObjectOrder availabilitygrouplistener;
    public static ObjectOrder availabilitygrouplisteneripaddress;
    public static ObjectOrder querystoreoptions;
    public static ObjectOrder databasescopedconfiguration;
    public static ObjectOrder resumableindex;
    public static ObjectOrder edgeconstraint;
    public static ObjectOrder spatialindex;
    public static ObjectOrder databasereadonly;
    public static ObjectOrder default;
}
public class Microsoft.SqlServer.Management.Smo.ObjectPermission : object {
    private ObjectPermissionSetValue m_value;
    internal ObjectPermissionSetValue Value { get; }
    public static ObjectPermission Alter { get; }
    public static ObjectPermission Connect { get; }
    public static ObjectPermission Control { get; }
    public static ObjectPermission CreateSequence { get; }
    public static ObjectPermission Delete { get; }
    public static ObjectPermission Execute { get; }
    public static ObjectPermission ExecuteExternalScript { get; }
    public static ObjectPermission Impersonate { get; }
    public static ObjectPermission Insert { get; }
    public static ObjectPermission Receive { get; }
    public static ObjectPermission References { get; }
    public static ObjectPermission Select { get; }
    public static ObjectPermission Send { get; }
    public static ObjectPermission TakeOwnership { get; }
    public static ObjectPermission Unmask { get; }
    public static ObjectPermission Update { get; }
    public static ObjectPermission ViewChangeTracking { get; }
    public static ObjectPermission ViewDefinition { get; }
    internal ObjectPermission(ObjectPermissionSetValue permissionValue);
    internal ObjectPermissionSetValue get_Value();
    public static ObjectPermissionSet op_Implicit(ObjectPermission permission);
    public static ObjectPermissionSet ToObjectPermissionSet(ObjectPermission permission);
    public static ObjectPermissionSet op_Addition(ObjectPermission permissionLeft, ObjectPermission permissionRight);
    public static ObjectPermissionSet Add(ObjectPermission permissionLeft, ObjectPermission permissionRight);
    public static ObjectPermissionSet op_BitwiseOr(ObjectPermission permissionLeft, ObjectPermission permissionRight);
    public static ObjectPermissionSet BitwiseOr(ObjectPermission permissionLeft, ObjectPermission permissionRight);
    public static ObjectPermission get_Alter();
    public static ObjectPermission get_Connect();
    public static ObjectPermission get_Control();
    public static ObjectPermission get_CreateSequence();
    public static ObjectPermission get_Delete();
    public static ObjectPermission get_Execute();
    public static ObjectPermission get_ExecuteExternalScript();
    public static ObjectPermission get_Impersonate();
    public static ObjectPermission get_Insert();
    public static ObjectPermission get_Receive();
    public static ObjectPermission get_References();
    public static ObjectPermission get_Select();
    public static ObjectPermission get_Send();
    public static ObjectPermission get_TakeOwnership();
    public static ObjectPermission get_Unmask();
    public static ObjectPermission get_Update();
    public static ObjectPermission get_ViewChangeTracking();
    public static ObjectPermission get_ViewDefinition();
    public virtual int GetHashCode();
    public virtual bool Equals(object o);
    public static bool op_Equality(ObjectPermission p1, ObjectPermission p2);
    public static bool op_Inequality(ObjectPermission p1, ObjectPermission p2);
}
public class Microsoft.SqlServer.Management.Smo.ObjectPermissionInfo : PermissionInfo {
    public ObjectPermissionSet PermissionType { get; }
    public ObjectPermissionSet get_PermissionType();
}
public class Microsoft.SqlServer.Management.Smo.ObjectPermissionSet : PermissionSetBase {
    internal int NumberOfElements { get; }
    public bool Alter { get; public set; }
    public bool Control { get; public set; }
    public bool Connect { get; public set; }
    public bool Delete { get; public set; }
    public bool Execute { get; public set; }
    public bool ExecuteExternalScript { get; public set; }
    public bool Impersonate { get; public set; }
    public bool Insert { get; public set; }
    public bool Receive { get; public set; }
    public bool References { get; public set; }
    public bool Select { get; public set; }
    public bool Send { get; public set; }
    public bool TakeOwnership { get; public set; }
    public bool Unmask { get; public set; }
    public bool Update { get; public set; }
    public bool ViewDefinition { get; public set; }
    public bool ViewChangeTracking { get; public set; }
    public bool CreateSequence { get; public set; }
    public ObjectPermissionSet(ObjectPermissionSet oObjectPermissionSet);
    public ObjectPermissionSet(ObjectPermission permission);
    public ObjectPermissionSet(ObjectPermission[] permissions);
    internal void SetBit(ObjectPermission permission);
    internal void ResetBit(ObjectPermission permission);
    public ObjectPermissionSet Add(ObjectPermission permission);
    public ObjectPermissionSet Remove(ObjectPermission permission);
    public static ObjectPermissionSet op_Addition(ObjectPermissionSet permissionLeft, ObjectPermission permissionRight);
    public static ObjectPermissionSet Add(ObjectPermissionSet permissionLeft, ObjectPermission permissionRight);
    public static ObjectPermissionSet op_Subtraction(ObjectPermissionSet permissionLeft, ObjectPermission permissionRight);
    public static ObjectPermissionSet Subtract(ObjectPermissionSet permissionLeft, ObjectPermission permissionRight);
    internal virtual int get_NumberOfElements();
    internal virtual string PermissionCodeToPermissionName(int permissionCode);
    internal virtual string PermissionCodeToPermissionType(int permissionCode);
    public bool get_Alter();
    public void set_Alter(bool value);
    public bool get_Control();
    public void set_Control(bool value);
    public bool get_Connect();
    public void set_Connect(bool value);
    public bool get_Delete();
    public void set_Delete(bool value);
    public bool get_Execute();
    public void set_Execute(bool value);
    public bool get_ExecuteExternalScript();
    public void set_ExecuteExternalScript(bool value);
    public bool get_Impersonate();
    public void set_Impersonate(bool value);
    public bool get_Insert();
    public void set_Insert(bool value);
    public bool get_Receive();
    public void set_Receive(bool value);
    public bool get_References();
    public void set_References(bool value);
    public bool get_Select();
    public void set_Select(bool value);
    public bool get_Send();
    public void set_Send(bool value);
    public bool get_TakeOwnership();
    public void set_TakeOwnership(bool value);
    public bool get_Unmask();
    public void set_Unmask(bool value);
    public bool get_Update();
    public void set_Update(bool value);
    public bool get_ViewDefinition();
    public void set_ViewDefinition(bool value);
    public bool get_ViewChangeTracking();
    public void set_ViewChangeTracking(bool value);
    public bool get_CreateSequence();
    public void set_CreateSequence(bool value);
    public virtual int GetHashCode();
    public virtual bool Equals(object o);
    public static bool op_Equality(ObjectPermissionSet p1, ObjectPermissionSet p2);
    public static bool op_Inequality(ObjectPermissionSet p1, ObjectPermissionSet p2);
}
public class Microsoft.SqlServer.Management.Smo.ObjectRenamedEventArgs : SmoEventArgs {
    private string oldUrn;
    private string newName;
    private string oldName;
    private object innerObject;
    public object SmoObject { get; }
    public string OldName { get; }
    public string NewName { get; }
    public string OldUrn { get; }
    public ObjectRenamedEventArgs(Urn urn, object innerObject, string oldName, string newName);
    public ObjectRenamedEventArgs(Urn newUrn, object innerObject, string oldName, string newName, string oldUrn);
    public object get_SmoObject();
    public string get_OldName();
    public string get_NewName();
    public string get_OldUrn();
}
internal class Microsoft.SqlServer.Management.Smo.ObjectScriptContainer : ScriptContainer {
    public ObjectScriptContainer(SqlSmoObject obj, ScriptingPreferences sp, RetryRequestedEventHandler retryEvent);
    protected virtual void Initialize(SqlSmoObject obj, ScriptingPreferences sp, RetryRequestedEventHandler retryEvent);
    protected ScriptFragment GenerateScript(ScriptingPreferences sp, ScriptGenerator scriptGenerator, RetryRequestedEventHandler retryEvent, Urn urn);
    protected static bool ThrowException(ScriptingPreferences sp, Exception ex);
}
internal class Microsoft.SqlServer.Management.Smo.ObjectScriptingEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private Urn <Current>k__BackingField;
    [CompilerGeneratedAttribute]
private Urn <Original>k__BackingField;
    [CompilerGeneratedAttribute]
private int <CurrentCount>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Total>k__BackingField;
    [CompilerGeneratedAttribute]
private ObjectScriptingType <ScriptType>k__BackingField;
    public Urn Current { get; private set; }
    public Urn Original { get; private set; }
    public int CurrentCount { get; private set; }
    public int Total { get; private set; }
    public ObjectScriptingType ScriptType { get; private set; }
    internal ObjectScriptingEventArgs(Urn current, Urn original, int currentCount, int total, ObjectScriptingType scriptType);
    [CompilerGeneratedAttribute]
public Urn get_Current();
    [CompilerGeneratedAttribute]
private void set_Current(Urn value);
    [CompilerGeneratedAttribute]
public Urn get_Original();
    [CompilerGeneratedAttribute]
private void set_Original(Urn value);
    [CompilerGeneratedAttribute]
public int get_CurrentCount();
    [CompilerGeneratedAttribute]
private void set_CurrentCount(int value);
    [CompilerGeneratedAttribute]
public int get_Total();
    [CompilerGeneratedAttribute]
private void set_Total(int value);
    [CompilerGeneratedAttribute]
public ObjectScriptingType get_ScriptType();
    [CompilerGeneratedAttribute]
private void set_ScriptType(ObjectScriptingType value);
}
internal class Microsoft.SqlServer.Management.Smo.ObjectScriptingEventHandler : MulticastDelegate {
    public ObjectScriptingEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, ObjectScriptingEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, ObjectScriptingEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal enum Microsoft.SqlServer.Management.Smo.ObjectScriptingType : Enum {
    public int value__;
    public static ObjectScriptingType None;
    public static ObjectScriptingType Object;
    public static ObjectScriptingType Data;
    public static ObjectScriptingType OwnerShip;
    public static ObjectScriptingType Association;
    public static ObjectScriptingType Permission;
    public static ObjectScriptingType Comment;
    public static ObjectScriptingType All;
}
internal enum Microsoft.SqlServer.Management.Smo.ObjectType : Enum {
    public int value__;
    public static ObjectType Unknown;
    public static ObjectType Application;
    public static ObjectType UserDefinedDataType;
    public static ObjectType SystemTable;
    public static ObjectType View;
    public static ObjectType UserTable;
    public static ObjectType StoredProcedure;
    public static ObjectType Default;
    public static ObjectType Rule;
    public static ObjectType Trigger;
    public static ObjectType XmlSchemaCollection;
    public static ObjectType UserDefinedTableType;
    public static ObjectType UserDefinedFunction;
    public static ObjectType SystemDataType;
    public static ObjectType User;
    public static ObjectType Group;
    public static ObjectType Index;
    public static ObjectType Key;
    public static ObjectType Column;
    public static ObjectType DBObject;
    public static ObjectType DBOption;
    public static ObjectType ProcedureParameter;
    public static ObjectType Permission;
    public static ObjectType IntegratedSecurity;
    public static ObjectType Check;
    public static ObjectType DRIDefault;
    public static ObjectType EdgeConstraint;
    public static ObjectType SqlServer;
    public static ObjectType Database;
    public static ObjectType BackupDevice;
    public static ObjectType Login;
    public static ObjectType Language;
    public static ObjectType RemoteServer;
    public static ObjectType RemoteLogin;
    public static ObjectType Configuration;
    public static ObjectType ConfigValue;
    public static ObjectType QueryResults;
    public static ObjectType TransactionLog;
    public static ObjectType Registry;
    public static ObjectType Transfer;
    public static ObjectType Backup;
    public static ObjectType AutoProperty;
    public static ObjectType ServerGroup;
    public static ObjectType RegisteredServer;
    public static ObjectType BulkCopy;
    public static ObjectType FileGroup;
    public static ObjectType DBFile;
    public static ObjectType LogFile;
    public static ObjectType ServerRole;
    public static ObjectType DatabaseRole;
    public static ObjectType Restore;
    public static ObjectType LinkedServer;
    public static ObjectType LinkedServerLogin;
    public static ObjectType FullTextCatalog;
    public static ObjectType FullTextService;
}
internal class Microsoft.SqlServer.Management.Smo.OldScriptingOptions : object {
    [CompilerGeneratedAttribute]
private bool <Bindings>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IncludeDatabaseRoleMemberships>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NoViewColumns>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnforceScriptingPreferences>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DdlHeaderOnly>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DdlBodyOnly>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NoVardecimal>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IncludeFullTextCatalogRootPath>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PrimaryObject>k__BackingField;
    public bool Bindings { get; public set; }
    public bool IncludeDatabaseRoleMemberships { get; public set; }
    public bool NoViewColumns { get; public set; }
    public bool EnforceScriptingPreferences { get; public set; }
    public bool DdlHeaderOnly { get; public set; }
    public bool DdlBodyOnly { get; public set; }
    public bool NoVardecimal { get; public set; }
    public bool IncludeFullTextCatalogRootPath { get; public set; }
    public bool PrimaryObject { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_Bindings();
    [CompilerGeneratedAttribute]
public void set_Bindings(bool value);
    [CompilerGeneratedAttribute]
public bool get_IncludeDatabaseRoleMemberships();
    [CompilerGeneratedAttribute]
public void set_IncludeDatabaseRoleMemberships(bool value);
    [CompilerGeneratedAttribute]
public bool get_NoViewColumns();
    [CompilerGeneratedAttribute]
public void set_NoViewColumns(bool value);
    [CompilerGeneratedAttribute]
public bool get_EnforceScriptingPreferences();
    [CompilerGeneratedAttribute]
public void set_EnforceScriptingPreferences(bool value);
    [CompilerGeneratedAttribute]
public bool get_DdlHeaderOnly();
    [CompilerGeneratedAttribute]
public void set_DdlHeaderOnly(bool value);
    [CompilerGeneratedAttribute]
public bool get_DdlBodyOnly();
    [CompilerGeneratedAttribute]
public void set_DdlBodyOnly(bool value);
    [CompilerGeneratedAttribute]
public bool get_NoVardecimal();
    [CompilerGeneratedAttribute]
public void set_NoVardecimal(bool value);
    [CompilerGeneratedAttribute]
public bool get_IncludeFullTextCatalogRootPath();
    [CompilerGeneratedAttribute]
public void set_IncludeFullTextCatalogRootPath(bool value);
    [CompilerGeneratedAttribute]
public bool get_PrimaryObject();
    [CompilerGeneratedAttribute]
public void set_PrimaryObject(bool value);
    private void Init();
    internal object Clone();
}
[SfcElementTypeAttribute("OleDbProviderSetting")]
[SfcBrowsableAttribute("False")]
[SfcElementAttribute("16")]
public class Microsoft.SqlServer.Management.Smo.OleDbProviderSettings : NamedSmoObject {
    public static string UrnSuffix { get; }
    [SfcKeyAttribute("0")]
[SfcPropertyAttribute("1280")]
public string Name { get; public set; }
    [SfcObjectAttribute("1")]
public Settings Parent { get; }
    [SfcPropertyAttribute("1024")]
public bool AllowInProcess { get; public set; }
    [SfcPropertyAttribute("1024")]
public string Description { get; }
    [SfcPropertyAttribute("1024")]
public bool DisallowAdHocAccess { get; public set; }
    [SfcPropertyAttribute("1024")]
public bool DynamicParameters { get; public set; }
    [SfcPropertyAttribute("1024")]
public bool IndexAsAccessPath { get; public set; }
    [SfcPropertyAttribute("1024")]
public bool LevelZeroOnly { get; public set; }
    [SfcPropertyAttribute("1024")]
public bool NestedQueries { get; public set; }
    [SfcPropertyAttribute("1024")]
public bool NonTransactedUpdates { get; public set; }
    [SfcPropertyAttribute("1024")]
public bool SqlServerLike { get; public set; }
    internal OleDbProviderSettings(AbstractCollectionBase parentColl, ObjectKeyBase key, SqlSmoState state);
    public static string get_UrnSuffix();
    public virtual string get_Name();
    public virtual void set_Name(string value);
    public sealed virtual void Alter();
    internal virtual void ScriptAlter(StringCollection query, ScriptingPreferences sp);
    internal virtual void ScriptCreate(StringCollection query, ScriptingPreferences sp);
    private void ScriptProperties(StringCollection query, ScriptingPreferences sp);
    private void ScriptRegSetting(StringCollection query, String[] prop, object oValue);
    private void ScriptDeleteRegSetting(StringCollection query, String[] prop);
    public sealed virtual StringCollection Script();
    public sealed virtual StringCollection Script(ScriptingOptions scriptingOptions);
    public Settings get_Parent();
    internal virtual SqlPropertyMetadataProvider GetPropertyMetadataProvider();
    public bool get_AllowInProcess();
    public void set_AllowInProcess(bool value);
    public string get_Description();
    public bool get_DisallowAdHocAccess();
    public void set_DisallowAdHocAccess(bool value);
    public bool get_DynamicParameters();
    public void set_DynamicParameters(bool value);
    public bool get_IndexAsAccessPath();
    public void set_IndexAsAccessPath(bool value);
    public bool get_LevelZeroOnly();
    public void set_LevelZeroOnly(bool value);
    public bool get_NestedQueries();
    public void set_NestedQueries(bool value);
    public bool get_NonTransactedUpdates();
    public void set_NonTransactedUpdates(bool value);
    public bool get_SqlServerLike();
    public void set_SqlServerLike(bool value);
}
[DefaultMemberAttribute("Item")]
public class Microsoft.SqlServer.Management.Smo.OleDbProviderSettingsCollection : SimpleObjectCollectionBase {
    public Settings Parent { get; }
    public OleDbProviderSettings Item { get; }
    public OleDbProviderSettings Item { get; }
    internal OleDbProviderSettingsCollection(SqlSmoObject parentInstance);
    public Settings get_Parent();
    public OleDbProviderSettings get_Item(int index);
    public OleDbProviderSettings get_Item(string name);
    public void CopyTo(OleDbProviderSettings[] array, int index);
    protected virtual Type GetCollectionElementType();
    internal virtual SqlSmoObject GetCollectionElementInstance(ObjectKeyBase key, SqlSmoState state);
    public void Add(OleDbProviderSettings settings);
    internal SqlSmoObject GetObjectByName(string name);
    internal virtual ObjectKeyBase CreateKeyFromUrn(Urn urn);
}
internal class Microsoft.SqlServer.Management.Smo.OnlineSmoAvailablePropertyProvider : AvailablePropertyValueProvider {
    public virtual bool IsGraphSupported(ISfcSimpleNode node);
    public virtual bool IsValueAvailable(ISfcSimpleNode node, string propName);
    private static bool IsSystemGeneratedException(Exception e);
}
[SfcElementAttribute("16")]
public class Microsoft.SqlServer.Management.Smo.OrderColumn : NamedSmoObject {
    private XSchemaProps _XSchema;
    private XRuntimeProps _XRuntime;
    public static string UrnSuffix { get; }
    [SfcObjectAttribute("1")]
public UserDefinedFunction Parent { get; public set; }
    private XSchemaProps XSchema { get; }
    private XRuntimeProps XRuntime { get; }
    [SfcPropertyAttribute("1024")]
public bool Descending { get; public set; }
    [SfcPropertyAttribute("1024")]
public int ID { get; }
    internal OrderColumn(AbstractCollectionBase parentColl, ObjectKeyBase key, SqlSmoState state);
    public OrderColumn(UserDefinedFunction udf, string name, bool descending);
    public OrderColumn(UserDefinedFunction userDefinedFunction, string name);
    public static string get_UrnSuffix();
    public UserDefinedFunction get_Parent();
    public void set_Parent(UserDefinedFunction value);
    internal virtual SqlPropertyMetadataProvider GetPropertyMetadataProvider();
    private sealed virtual override object Microsoft.SqlServer.Management.Smo.IPropertyDataDispatch.GetPropertyValue(int index);
    private sealed virtual override void Microsoft.SqlServer.Management.Smo.IPropertyDataDispatch.SetPropertyValue(int index, object value);
    private XSchemaProps get_XSchema();
    private XRuntimeProps get_XRuntime();
    public bool get_Descending();
    public void set_Descending(bool value);
    public int get_ID();
}
[DefaultMemberAttribute("Item")]
public class Microsoft.SqlServer.Management.Smo.OrderColumnCollection : ParameterCollectionBase {
    public UserDefinedFunction Parent { get; }
    public OrderColumn Item { get; }
    public OrderColumn Item { get; }
    internal OrderColumnCollection(SqlSmoObject parentInstance);
    public UserDefinedFunction get_Parent();
    public OrderColumn get_Item(int index);
    public void CopyTo(OrderColumn[] array, int index);
    public OrderColumn get_Item(string name);
    protected virtual Type GetCollectionElementType();
    internal virtual SqlSmoObject GetCollectionElementInstance(ObjectKeyBase key, SqlSmoState state);
    public void Add(OrderColumn orderColumn);
    public void Add(OrderColumn orderColumn, string insertAtColumnName);
    public void Add(OrderColumn orderColumn, int insertAtPosition);
    public void Remove(OrderColumn orderColumn);
    public OrderColumn ItemById(int id);
}
[SfcElementAttribute("48")]
public class Microsoft.SqlServer.Management.Smo.Parameter : ParameterBase {
    private bool Microsoft.SqlServer.Management.Sdk.Sfc.ISfcSupportsDesignMode.IsDesignMode { get; }
    [SfcPropertyAttribute("7168")]
public string DefaultValue { get; public set; }
    [SfcPropertyAttribute("3072")]
public int ID { get; }
    [SfcPropertyAttribute("7168")]
public bool IsReadOnly { get; public set; }
    internal Parameter(AbstractCollectionBase parent, ObjectKeyBase key, SqlSmoState state);
    private sealed virtual override bool Microsoft.SqlServer.Management.Sdk.Sfc.ISfcSupportsDesignMode.get_IsDesignMode();
    public string get_DefaultValue();
    public void set_DefaultValue(string value);
    public int get_ID();
    public bool get_IsReadOnly();
    public void set_IsReadOnly(bool value);
}
public class Microsoft.SqlServer.Management.Smo.ParameterBase : ScriptNameObjectBase {
    private static char longUderscoreChar;
    private bool bUseOutput;
    private bool bUseDefault;
    private bool bIsReadOnly;
    private DataType dataType;
    public static string UrnSuffix { get; }
    internal bool UseOutput { get; internal set; }
    internal bool UseDefault { get; internal set; }
    internal bool UseIsReadOnly { get; internal set; }
    [SfcObjectAttribute("1", "0", "Microsoft.SqlServer.Management.Smo.ExtendedProperty")]
public ExtendedPropertyCollection ExtendedProperties { get; }
    [SfcKeyAttribute("0")]
[SfcPropertyAttribute("7424")]
public string Name { get; public set; }
    [CLSCompliantAttribute("False")]
[SfcReferenceAttribute("Microsoft.SqlServer.Management.Smo.UserDefinedType", "Microsoft.SqlServer.Management.Smo.UserDefinedTypeResolver", "Resolve", "Mono.Cecil.CustomAttributeArgument[]")]
[SfcReferenceAttribute("Microsoft.SqlServer.Management.Smo.UserDefinedDataType", "Microsoft.SqlServer.Management.Smo.UserDefinedDataTypeResolver", "Resolve", "Mono.Cecil.CustomAttributeArgument[]")]
[SfcReferenceAttribute("Microsoft.SqlServer.Management.Smo.UserDefinedTableType", "Microsoft.SqlServer.Management.Smo.UserDefinedTableTypeResolver", "Resolve", "Mono.Cecil.CustomAttributeArgument[]")]
[SfcPropertyAttribute("5120")]
public DataType DataType { get; public set; }
    internal string ScriptName { get; internal set; }
    internal ParameterBase(AbstractCollectionBase parentColl, ObjectKeyBase key, SqlSmoState state);
    private void Init();
    public static string get_UrnSuffix();
    internal bool get_UseOutput();
    internal void set_UseOutput(bool value);
    internal bool get_UseDefault();
    internal void set_UseDefault(bool value);
    internal bool get_UseIsReadOnly();
    internal void set_UseIsReadOnly(bool value);
    public sealed virtual ExtendedPropertyCollection get_ExtendedProperties();
    public virtual string get_Name();
    public virtual void set_Name(string value);
    public virtual DataType get_DataType();
    public virtual void set_DataType(DataType value);
    internal virtual void ValidateName(string name);
    protected void CheckParamName(string paramName);
    internal virtual void ScriptDdl(StringCollection queries, ScriptingPreferences sp);
    private string MakeSqlStringIfRequired(string defaultValue);
    public sealed virtual void MarkForDrop(bool dropOnAlter);
    internal virtual PropagateInfo[] GetPropagateInfo(PropagateAction action);
    public virtual void Refresh();
    internal virtual string get_ScriptName();
    internal virtual void set_ScriptName(string value);
    protected virtual bool isParentClrImplemented();
}
public abstract class Microsoft.SqlServer.Management.Smo.ParameterCollectionBase : ArrayListCollectionBase {
    internal ParameterCollectionBase(SqlSmoObject parent);
    protected virtual void InitInnerCollection();
    public bool Contains(string name);
    public void Remove(string name);
    internal virtual ObjectKeyBase CreateKeyFromUrn(Urn urn);
    protected virtual void ImplAddExisting(SqlSmoObject obj);
}
internal enum Microsoft.SqlServer.Management.Smo.ParameterValueFormat : Enum {
    public int value__;
    public static ParameterValueFormat NotString;
    public static ParameterValueFormat CharString;
    public static ParameterValueFormat NVarCharString;
}
[EvaluationModeAttribute("4")]
[PhysicalFacetAttribute]
[SfcElementAttribute("48")]
public class Microsoft.SqlServer.Management.Smo.PartitionFunction : ScriptNameObjectBase {
    private PartitionFunctionParameterCollection m_PartitionFunctionParameters;
    private Object[] rangeValues;
    private PartitionFunctionEvents events;
    public static string UrnSuffix { get; }
    [SfcKeyAttribute("0")]
[SfcPropertyAttribute("3328")]
public string Name { get; public set; }
    [SfcObjectAttribute("1", "0", "Microsoft.SqlServer.Management.Smo.ExtendedProperty")]
public ExtendedPropertyCollection ExtendedProperties { get; }
    [SfcObjectAttribute("1", "1", "Microsoft.SqlServer.Management.Smo.PartitionFunctionParameter")]
public PartitionFunctionParameterCollection PartitionFunctionParameters { get; }
    [SfcPropertyAttribute("3072")]
[SfcSerializationAdapterAttribute("Microsoft.SqlServer.Management.Smo.SqlVariantSerializationAdapter")]
public Object[] RangeValues { get; public set; }
    [SfcObjectAttribute("1")]
public Database Parent { get; public set; }
    private bool Microsoft.SqlServer.Management.Sdk.Sfc.ISfcSupportsDesignMode.IsDesignMode { get; }
    [SfcPropertyAttribute("3072")]
public DateTime CreateDate { get; }
    [SfcPropertyAttribute("3072")]
public int ID { get; }
    [SfcPropertyAttribute("3072")]
public int NumberOfPartitions { get; }
    [SfcPropertyAttribute("3328")]
public RangeType RangeType { get; public set; }
    public PartitionFunctionEvents Events { get; }
    internal PartitionFunction(AbstractCollectionBase parentColl, ObjectKeyBase key, SqlSmoState state);
    public PartitionFunction(Database database, string name);
    public static string get_UrnSuffix();
    public virtual string get_Name();
    public virtual void set_Name(string value);
    public sealed virtual void Create();
    internal virtual void ScriptCreate(StringCollection queries, ScriptingPreferences sp);
    public sealed virtual void Drop();
    public sealed virtual void DropIfExists();
    internal virtual void ScriptDrop(StringCollection queries, ScriptingPreferences sp);
    public sealed virtual void Alter();
    internal virtual void ScriptAlter(StringCollection alterQuery, ScriptingPreferences sp);
    public sealed virtual ExtendedPropertyCollection get_ExtendedProperties();
    public PartitionFunctionParameterCollection get_PartitionFunctionParameters();
    internal virtual PropagateInfo[] GetPropagateInfo(PropagateAction action);
    public sealed virtual StringCollection Script();
    public sealed virtual StringCollection Script(ScriptingOptions scriptingOptions);
    protected virtual void MarkDropped();
    public void MergeRangePartition(object boundaryValue);
    public void SplitRangePartition(object boundaryValue);
    public Object[] get_RangeValues();
    public void set_RangeValues(Object[] value);
    public virtual void Refresh();
    internal static String[] GetScriptFields(Type parentType, ServerVersion version, DatabaseEngineType databaseEngineType, DatabaseEngineEdition databaseEngineEdition, bool defaultTextMode);
    public Database get_Parent();
    public void set_Parent(Database value);
    private sealed virtual override bool Microsoft.SqlServer.Management.Sdk.Sfc.ISfcSupportsDesignMode.get_IsDesignMode();
    internal virtual SqlPropertyMetadataProvider GetPropertyMetadataProvider();
    public DateTime get_CreateDate();
    public int get_ID();
    public int get_NumberOfPartitions();
    public RangeType get_RangeType();
    public void set_RangeType(RangeType value);
    internal virtual String[] GetNonAlterableProperties();
    public PartitionFunctionEvents get_Events();
}
[DefaultMemberAttribute("Item")]
public class Microsoft.SqlServer.Management.Smo.PartitionFunctionCollection : SimpleObjectCollectionBase {
    public Database Parent { get; }
    public PartitionFunction Item { get; }
    public PartitionFunction Item { get; }
    internal PartitionFunctionCollection(SqlSmoObject parentInstance);
    public Database get_Parent();
    public PartitionFunction get_Item(int index);
    public PartitionFunction get_Item(string name);
    public void CopyTo(PartitionFunction[] array, int index);
    public PartitionFunction ItemById(int id);
    protected virtual Type GetCollectionElementType();
    internal virtual SqlSmoObject GetCollectionElementInstance(ObjectKeyBase key, SqlSmoState state);
    public void Add(PartitionFunction partitionFunction);
    internal SqlSmoObject GetObjectByName(string name);
    internal virtual ObjectKeyBase CreateKeyFromUrn(Urn urn);
}
public class Microsoft.SqlServer.Management.Smo.PartitionFunctionEvents : object {
    private ObjectEventsWorker serverEventsWorker;
    private PartitionFunction parent;
    internal PartitionFunctionEvents(PartitionFunction parent);
    public ObjectEventSet GetEventSelection();
    public void SubscribeToEvents(ObjectEventSet events);
    public void SubscribeToEvents(ObjectEventSet events, ServerEventHandler eventHandler);
    public void UnsubscribeFromEvents(ObjectEventSet events);
    public void UnsubscribeAllEvents();
    public void StartEvents();
    public void StopEvents();
    public void add_ServerEvent(ServerEventHandler value);
    public void remove_ServerEvent(ServerEventHandler value);
    private void InitializeEvents();
}
[SfcElementAttribute("48")]
public class Microsoft.SqlServer.Management.Smo.PartitionFunctionParameter : ScriptNameObjectBase {
    [SfcObjectAttribute("1")]
public PartitionFunction Parent { get; public set; }
    public static string UrnSuffix { get; }
    [SfcKeyAttribute("0")]
[SfcPropertyAttribute("3328")]
public string Name { get; public set; }
    private bool Microsoft.SqlServer.Management.Sdk.Sfc.ISfcSupportsDesignMode.IsDesignMode { get; }
    [SfcPropertyAttribute("3072")]
public string Collation { get; public set; }
    [SfcPropertyAttribute("3072")]
public int ID { get; }
    [SfcPropertyAttribute("7168")]
public int Length { get; public set; }
    [SfcPropertyAttribute("7168")]
public int NumericPrecision { get; public set; }
    [SfcPropertyAttribute("7168")]
public int NumericScale { get; public set; }
    internal PartitionFunctionParameter(AbstractCollectionBase parentColl, ObjectKeyBase key, SqlSmoState state);
    public PartitionFunctionParameter(PartitionFunction partitionFunction);
    public PartitionFunctionParameter(PartitionFunction partitionFunction, DataType dataType);
    public PartitionFunction get_Parent();
    public void set_Parent(PartitionFunction value);
    public static string get_UrnSuffix();
    public virtual string get_Name();
    public virtual void set_Name(string value);
    internal static String[] GetScriptFields(Type parentType, ServerVersion version, DatabaseEngineType databaseEngineType, DatabaseEngineEdition databaseEngineEdition, bool defaultTextMode);
    private sealed virtual override bool Microsoft.SqlServer.Management.Sdk.Sfc.ISfcSupportsDesignMode.get_IsDesignMode();
    internal virtual SqlPropertyMetadataProvider GetPropertyMetadataProvider();
    public string get_Collation();
    public void set_Collation(string value);
    public int get_ID();
    public int get_Length();
    public void set_Length(int value);
    public int get_NumericPrecision();
    public void set_NumericPrecision(int value);
    public int get_NumericScale();
    public void set_NumericScale(int value);
}
[DefaultMemberAttribute("Item")]
public class Microsoft.SqlServer.Management.Smo.PartitionFunctionParameterCollection : ParameterCollectionBase {
    public PartitionFunction Parent { get; }
    public PartitionFunctionParameter Item { get; }
    internal PartitionFunctionParameterCollection(SqlSmoObject parentInstance);
    public PartitionFunction get_Parent();
    public PartitionFunctionParameter get_Item(int index);
    public void CopyTo(PartitionFunctionParameter[] array, int index);
    protected virtual Type GetCollectionElementType();
    internal virtual SqlSmoObject GetCollectionElementInstance(ObjectKeyBase key, SqlSmoState state);
    public void Add(PartitionFunctionParameter partitionFunctionParameter);
    public void Add(PartitionFunctionParameter partitionFunctionParameter, string insertAtColumnName);
    public void Add(PartitionFunctionParameter partitionFunctionParameter, int insertAtPosition);
    public void Remove(PartitionFunctionParameter partitionFunctionParameter);
    public PartitionFunctionParameter ItemById(int id);
}
[FlagsAttribute]
public enum Microsoft.SqlServer.Management.Smo.PartitioningScheme : Enum {
    public int value__;
    public static PartitioningScheme None;
    public static PartitioningScheme Table;
    public static PartitioningScheme Index;
    public static PartitioningScheme All;
}
public abstract class Microsoft.SqlServer.Management.Smo.PartitionNumberedObjectCollectionBase : SortedListCollectionBase {
    internal PartitionNumberedObjectCollectionBase(SqlSmoObject parent);
    protected virtual void InitInnerCollection();
    public bool Contains(int number);
    internal virtual ObjectKeyBase CreateKeyFromUrn(Urn urn);
}
internal class Microsoft.SqlServer.Management.Smo.PartitionNumberedObjectComparer : ObjectComparerBase {
    public virtual int Compare(object obj1, object obj2);
}
internal class Microsoft.SqlServer.Management.Smo.PartitionNumberedObjectKey : ObjectKeyBase {
    protected int number;
    internal static StringCollection fields;
    public int Number { get; public set; }
    public string UrnFilter { get; }
    public bool IsNull { get; }
    public PartitionNumberedObjectKey(int number);
    private static PartitionNumberedObjectKey();
    public int get_Number();
    public void set_Number(int value);
    public virtual string ToString();
    public virtual string get_UrnFilter();
    public virtual StringCollection GetFieldNames();
    public virtual ObjectKeyBase Clone();
    public virtual bool get_IsNull();
    public virtual ObjectComparerBase GetComparer(IComparer stringComparer);
}
[EvaluationModeAttribute("4")]
[PhysicalFacetAttribute]
[SfcElementAttribute("48")]
public class Microsoft.SqlServer.Management.Smo.PartitionScheme : ScriptNameObjectBase {
    private StringCollection fileGroups;
    private PartitionSchemeEvents events;
    public static string UrnSuffix { get; }
    [SfcKeyAttribute("0")]
[SfcPropertyAttribute("3328")]
public string Name { get; public set; }
    [SfcObjectAttribute("1", "0", "Microsoft.SqlServer.Management.Smo.ExtendedProperty")]
public ExtendedPropertyCollection ExtendedProperties { get; }
    [SfcPropertyAttribute("3072")]
public StringCollection FileGroups { get; }
    [SfcObjectAttribute("1")]
public Database Parent { get; public set; }
    private bool Microsoft.SqlServer.Management.Sdk.Sfc.ISfcSupportsDesignMode.IsDesignMode { get; }
    [SfcPropertyAttribute("3072")]
public int ID { get; }
    [SfcPropertyAttribute("3072")]
public string NextUsedFileGroup { get; public set; }
    [SfcPropertyAttribute("3328")]
[SfcReferenceAttribute("Microsoft.SqlServer.Management.Smo.PartitionFunction", "Server[@Name = '{0}']/Database[@Name = '{1}']/PartitionFunction[@Name = '{2}']", "Mono.Cecil.CustomAttributeArgument[]")]
[CLSCompliantAttribute("False")]
public string PartitionFunction { get; public set; }
    public PartitionSchemeEvents Events { get; }
    internal PartitionScheme(AbstractCollectionBase parentColl, ObjectKeyBase key, SqlSmoState state);
    public PartitionScheme(Database database, string name);
    public static string get_UrnSuffix();
    public virtual string get_Name();
    public virtual void set_Name(string value);
    public sealed virtual void Create();
    internal virtual void ScriptCreate(StringCollection queries, ScriptingPreferences sp);
    public sealed virtual void Drop();
    public sealed virtual void DropIfExists();
    internal virtual void ScriptDrop(StringCollection queries, ScriptingPreferences sp);
    public sealed virtual void Alter();
    internal virtual void ScriptAlter(StringCollection alterQuery, ScriptingPreferences sp);
    public void ResetNextUsed();
    public ExtendedPropertyCollection get_ExtendedProperties();
    internal virtual PropagateInfo[] GetPropagateInfo(PropagateAction action);
    protected virtual void MarkDropped();
    public sealed virtual StringCollection Script();
    public sealed virtual StringCollection Script(ScriptingOptions scriptingOptions);
    public StringCollection get_FileGroups();
    public virtual void Refresh();
    internal static String[] GetScriptFields(Type parentType, ServerVersion version, DatabaseEngineType databaseEngineType, DatabaseEngineEdition databaseEngineEdition, bool defaultTextMode);
    public Database get_Parent();
    public void set_Parent(Database value);
    private sealed virtual override bool Microsoft.SqlServer.Management.Sdk.Sfc.ISfcSupportsDesignMode.get_IsDesignMode();
    internal virtual SqlPropertyMetadataProvider GetPropertyMetadataProvider();
    public int get_ID();
    public string get_NextUsedFileGroup();
    public void set_NextUsedFileGroup(string value);
    public string get_PartitionFunction();
    public void set_PartitionFunction(string value);
    internal virtual String[] GetNonAlterableProperties();
    public PartitionSchemeEvents get_Events();
}
[DefaultMemberAttribute("Item")]
public class Microsoft.SqlServer.Management.Smo.PartitionSchemeCollection : SimpleObjectCollectionBase {
    public Database Parent { get; }
    public PartitionScheme Item { get; }
    public PartitionScheme Item { get; }
    internal PartitionSchemeCollection(SqlSmoObject parentInstance);
    public Database get_Parent();
    public PartitionScheme get_Item(int index);
    public PartitionScheme get_Item(string name);
    public void CopyTo(PartitionScheme[] array, int index);
    public PartitionScheme ItemById(int id);
    protected virtual Type GetCollectionElementType();
    internal virtual SqlSmoObject GetCollectionElementInstance(ObjectKeyBase key, SqlSmoState state);
    public void Add(PartitionScheme partitionScheme);
    internal SqlSmoObject GetObjectByName(string name);
    internal virtual ObjectKeyBase CreateKeyFromUrn(Urn urn);
}
public class Microsoft.SqlServer.Management.Smo.PartitionSchemeEvents : object {
    private ObjectEventsWorker serverEventsWorker;
    private PartitionScheme parent;
    internal PartitionSchemeEvents(PartitionScheme parent);
    public ObjectEventSet GetEventSelection();
    public void SubscribeToEvents(ObjectEventSet events);
    public void SubscribeToEvents(ObjectEventSet events, ServerEventHandler eventHandler);
    public void UnsubscribeFromEvents(ObjectEventSet events);
    public void UnsubscribeAllEvents();
    public void StartEvents();
    public void StopEvents();
    public void add_ServerEvent(ServerEventHandler value);
    public void remove_ServerEvent(ServerEventHandler value);
    private void InitializeEvents();
}
[SfcElementAttribute("48")]
public class Microsoft.SqlServer.Management.Smo.PartitionSchemeParameter : ScriptNameObjectBase {
    public static string UrnSuffix { get; }
    [SfcKeyAttribute("0")]
[SfcPropertyAttribute("3328")]
public string Name { get; public set; }
    [SfcObjectAttribute("1")]
[SfcParentAttribute("Table")]
[SfcParentAttribute("Index")]
public SqlSmoObject Parent { get; public set; }
    private bool Microsoft.SqlServer.Management.Sdk.Sfc.ISfcSupportsDesignMode.IsDesignMode { get; }
    [SfcPropertyAttribute("3072")]
public int ID { get; }
    internal PartitionSchemeParameter(AbstractCollectionBase parentColl, ObjectKeyBase key, SqlSmoState state);
    public PartitionSchemeParameter(SqlSmoObject parent, string name);
    public static string get_UrnSuffix();
    public virtual string get_Name();
    public virtual void set_Name(string value);
    public SqlSmoObject get_Parent();
    public void set_Parent(SqlSmoObject value);
    private sealed virtual override bool Microsoft.SqlServer.Management.Sdk.Sfc.ISfcSupportsDesignMode.get_IsDesignMode();
    internal virtual SqlPropertyMetadataProvider GetPropertyMetadataProvider();
    public int get_ID();
}
[DefaultMemberAttribute("Item")]
public class Microsoft.SqlServer.Management.Smo.PartitionSchemeParameterCollection : ParameterCollectionBase {
    public SqlSmoObject Parent { get; }
    public PartitionSchemeParameter Item { get; }
    public PartitionSchemeParameter Item { get; }
    internal PartitionSchemeParameterCollection(SqlSmoObject parentInstance);
    public SqlSmoObject get_Parent();
    public PartitionSchemeParameter get_Item(int index);
    public void CopyTo(PartitionSchemeParameter[] array, int index);
    public PartitionSchemeParameter get_Item(string name);
    protected virtual Type GetCollectionElementType();
    internal virtual SqlSmoObject GetCollectionElementInstance(ObjectKeyBase key, SqlSmoState state);
    public void Add(PartitionSchemeParameter partitionSchemeParameter);
    public void Add(PartitionSchemeParameter partitionSchemeParameter, string insertAtColumnName);
    public void Add(PartitionSchemeParameter partitionSchemeParameter, int insertAtPosition);
    public void Remove(PartitionSchemeParameter partitionSchemeParameter);
    public PartitionSchemeParameter ItemById(int id);
}
public class Microsoft.SqlServer.Management.Smo.Payload : object {
    private Endpoint m_endpoint;
    private SoapPayload m_soapPayload;
    private ServiceBrokerPayload m_serviceBrokerPayload;
    private DatabaseMirroringPayload m_databaseMirroringPayload;
    public SoapPayload Soap { get; }
    public ServiceBrokerPayload ServiceBroker { get; }
    public DatabaseMirroringPayload DatabaseMirroring { get; }
    internal EndpointPayload EndpointPayload { get; }
    private string PayloadDdlName { get; }
    internal Payload(Endpoint endpoint);
    public SoapPayload get_Soap();
    public ServiceBrokerPayload get_ServiceBroker();
    public DatabaseMirroringPayload get_DatabaseMirroring();
    private SqlSmoState GetStateForType(EndpointType et);
    internal EndpointPayload get_EndpointPayload();
    internal void MarkDropped();
    private string get_PayloadDdlName();
    internal void Script(StringBuilder sb, ScriptingPreferences sp);
}
public class Microsoft.SqlServer.Management.Smo.PerformanceCounters : object {
    private static PerformanceCountersSingleton performanceCountersSingleton;
    public static bool DoCount { get; public set; }
    public static TimeSpan EnumQueriesDuration { get; public set; }
    public static int EnumQueriesCount { get; public set; }
    public static Hashtable UrnSkeletonsPerf { get; }
    public static TimeSpan SqlExecutionDuration { get; public set; }
    public static TimeSpan DependencyDiscoveryDuration { get; public set; }
    public static int ObjectInfoRequestCount { get; public set; }
    public static int InitializeCallsCount { get; public set; }
    public static int UrnCallsCount { get; public set; }
    public static int UrnSkelCallsCount { get; public set; }
    public static TimeSpan DiscoverDependenciesDuration { get; public set; }
    public static TimeSpan WalkDependenciesDuration { get; public set; }
    private static PerformanceCounters();
    public static bool get_DoCount();
    public static void set_DoCount(bool value);
    public static TimeSpan get_EnumQueriesDuration();
    public static void set_EnumQueriesDuration(TimeSpan value);
    public static int get_EnumQueriesCount();
    public static void set_EnumQueriesCount(int value);
    public static Hashtable get_UrnSkeletonsPerf();
    public static TimeSpan get_SqlExecutionDuration();
    public static void set_SqlExecutionDuration(TimeSpan value);
    public static TimeSpan get_DependencyDiscoveryDuration();
    public static void set_DependencyDiscoveryDuration(TimeSpan value);
    public static int get_ObjectInfoRequestCount();
    public static void set_ObjectInfoRequestCount(int value);
    public static int get_InitializeCallsCount();
    public static void set_InitializeCallsCount(int value);
    public static int get_UrnCallsCount();
    public static void set_UrnCallsCount(int value);
    public static int get_UrnSkelCallsCount();
    public static void set_UrnSkelCallsCount(int value);
    public static TimeSpan get_DiscoverDependenciesDuration();
    public static void set_DiscoverDependenciesDuration(TimeSpan value);
    public static TimeSpan get_WalkDependenciesDuration();
    public static void set_WalkDependenciesDuration(TimeSpan value);
    public static void Dump(bool toLogFile);
    public static void Dump(string fileName);
    public static void Dump(string fileName, bool header);
    private static StringCollection GetDumpStrings(bool header);
    public static void Reset();
}
internal class Microsoft.SqlServer.Management.Smo.PerformanceCountersSingleton : object {
    internal bool doCount;
    internal TimeSpan enumQueriesDuration;
    internal int enumQueriesCount;
    internal Hashtable urnSkeletonsPerf;
    internal TimeSpan sqlExecutionDuration;
    internal TimeSpan dependencyDiscoveryDuration;
    internal int objectInfoRequestCount;
    internal int initializeCallsCount;
    internal int urnCallsCount;
    internal int urnSkelCallsCount;
    internal TimeSpan dscoverDependenciesDuration;
    internal TimeSpan walkDependenciesDuration;
}
public class Microsoft.SqlServer.Management.Smo.PermissionInfo : object {
    private string grantee;
    private PrincipalType granteeType;
    private string grantor;
    private PrincipalType grantorType;
    private PermissionState permissionState;
    private PermissionSetBase permissionSet;
    private string columnName;
    private ObjIdent objIdent;
    public string Grantee { get; }
    public PrincipalType GranteeType { get; }
    public string Grantor { get; }
    public PrincipalType GrantorType { get; }
    public PermissionState PermissionState { get; }
    protected internal PermissionSetBase PermissionTypeInternal { get; }
    public string ColumnName { get; }
    public ObjectClass ObjectClass { get; }
    public string ObjectName { get; }
    public string ObjectSchema { get; }
    public int ObjectID { get; }
    internal void SetPermissionInfoData(string grantee, PrincipalType granteeType, string grantor, PrincipalType grantorType, PermissionState permissionState, PermissionSetBase permissionSet, string columnName, ObjIdent objIdent);
    public string get_Grantee();
    public PrincipalType get_GranteeType();
    public string get_Grantor();
    public PrincipalType get_GrantorType();
    public PermissionState get_PermissionState();
    internal void SetPermissionState(PermissionState ps);
    protected internal PermissionSetBase get_PermissionTypeInternal();
    public string get_ColumnName();
    public ObjectClass get_ObjectClass();
    public string get_ObjectName();
    public string get_ObjectSchema();
    public int get_ObjectID();
    public virtual string ToString();
}
public abstract class Microsoft.SqlServer.Management.Smo.PermissionSetBase : object {
    private BitArray m_storage;
    internal BitArray Storage { get; internal set; }
    internal int NumberOfElements { get; }
    public PermissionSetBase(PermissionSetBase permissionSetBase);
    internal BitArray get_Storage();
    internal void set_Storage(BitArray value);
    internal abstract virtual int get_NumberOfElements();
    internal void SetBitAt(int idx);
    internal abstract virtual string PermissionCodeToPermissionName(int permissionCode);
    internal abstract virtual string PermissionCodeToPermissionType(int permissionCode);
    private int YukonToShilohPermission(string permCode);
    internal bool IsValidPermissionForVersion(SqlServerVersionInternal ver);
    internal void AddPermissionFilter(StringBuilder sb, ServerVersion ver);
    internal bool AddPermissionList(StringBuilder sb);
    internal int GetPermissionCount();
    public virtual string ToString();
    public virtual bool Equals(object o);
    public virtual int GetHashCode();
}
internal class Microsoft.SqlServer.Management.Smo.PermissionWorker : object {
    private static void AddArrayToStringBuider(StringBuilder sb, String[] list);
    internal static void CheckPermissionsAllowed(SqlSmoObject obj);
    internal static string ScriptPermissionInfo(SqlSmoObject obj, PermissionInfo pi, ScriptingPreferences sp, bool grantGrant, bool cascade);
    internal static string ScriptPermissionInfo(SqlSmoObject obj, PermissionInfo pi, ScriptingPreferences sp);
    private static string GetObjectName(SqlSmoObject obj, ScriptingPreferences sp);
    private static string Script(PermissionState ps, SqlSmoObject obj, PermissionSetBase pb, String[] granteeNames, String[] columnNames, bool grantGrant, bool cascade, string asRole, ScriptingPreferences sp);
    internal static PermissionSetBase GetPermissionSetBase(PermissionEnumKind kind, int i);
    internal static ObjectClass GetObjectClass(SqlSmoObject obj);
    internal static string GetObjectOwner(SqlSmoObject smoObj);
    internal static void AddPermission(PermissionState ps, SqlSmoObject obj, PermissionSetBase pb, String[] granteeNames, bool grantGrant, bool cascade, string asRole);
    internal static void Execute(PermissionState ps, SqlSmoObject obj, PermissionSetBase pb, String[] granteeNames, String[] columnNames, bool grantGrant, bool cascade, string asRole);
    internal static PermissionInfo GetPermissionInfo(PermissionEnumKind kind);
    internal static PermissionInfo[] GetPermissionInfoArray(PermissionEnumKind kind, int count);
    private static string GetFilter(ServerVersion ver, string granteeName, PermissionSetBase permissions);
    internal static PermissionInfo[] EnumPermissions(PermissionEnumKind kind, SqlSmoObject obj, string granteeName, PermissionSetBase permissions);
    private static ObjIdent RetrievePermission(UserPermissionCollection userPermCollection, PermissionEnumKind kind, string columnName, string granteeName, PermissionSetBase permissions, ArrayList ar, ObjIdent objectIdent);
    internal static PermissionInfo[] EnumAllPermissions(SqlSmoObject obj, string granteeName, ObjectPermissionSet permissions);
    internal static Urn[] EnumOwnedObjects(SqlSmoObject obj);
}
[SfcElementAttribute("48")]
public class Microsoft.SqlServer.Management.Smo.PhysicalPartition : SqlSmoObject {
    private XSchemaProps _XSchema;
    private XRuntimeProps _XRuntime;
    [SfcPropertyAttribute("3072")]
public object RightBoundaryValue { get; public set; }
    [SfcPropertyAttribute("3072")]
public RangeType RangeType { get; public set; }
    [SfcPropertyAttribute("1024")]
public DataCompressionType DataCompression { get; public set; }
    public static string UrnSuffix { get; }
    [SfcObjectAttribute("1")]
[SfcParentAttribute("Table")]
[SfcParentAttribute("Index")]
public SqlSmoObject Parent { get; }
    private XSchemaProps XSchema { get; }
    private XRuntimeProps XRuntime { get; }
    [SfcPropertyAttribute("3072")]
public string FileGroupName { get; public set; }
    [SfcPropertyAttribute("3072")]
public int PartitionNumber { get; public set; }
    [SfcPropertyAttribute("3072")]
public double RowCount { get; }
    [SfcPropertyAttribute("1024")]
public XmlCompressionType XmlCompression { get; public set; }
    internal PhysicalPartition(AbstractCollectionBase parentColl, ObjectKeyBase key, SqlSmoState state);
    public PhysicalPartition(SqlSmoObject parent, int partitionNumber, DataCompressionType dataCompressionType);
    public PhysicalPartition(SqlSmoObject parent, int partitionNumber, DataCompressionType dataCompressionType, XmlCompressionType xmlCompressionType);
    public PhysicalPartition(SqlSmoObject parent, int partitionNumber);
    internal PhysicalPartition(PhysicalPartition physicalPartition);
    private void Init();
    internal bool Compare(PhysicalPartition physicalPartition);
    public object get_RightBoundaryValue();
    public void set_RightBoundaryValue(object value);
    public RangeType get_RangeType();
    public void set_RangeType(RangeType value);
    public DataCompressionType get_DataCompression();
    public void set_DataCompression(DataCompressionType value);
    public static string get_UrnSuffix();
    internal bool IsDirty(string property);
    public SqlSmoObject get_Parent();
    internal virtual SqlPropertyMetadataProvider GetPropertyMetadataProvider();
    private sealed virtual override object Microsoft.SqlServer.Management.Smo.IPropertyDataDispatch.GetPropertyValue(int index);
    private sealed virtual override void Microsoft.SqlServer.Management.Smo.IPropertyDataDispatch.SetPropertyValue(int index, object value);
    private XSchemaProps get_XSchema();
    private XRuntimeProps get_XRuntime();
    public string get_FileGroupName();
    public void set_FileGroupName(string value);
    public int get_PartitionNumber();
    public void set_PartitionNumber(int value);
    public double get_RowCount();
    public XmlCompressionType get_XmlCompression();
    public void set_XmlCompression(XmlCompressionType value);
}
[DefaultMemberAttribute("Item")]
public class Microsoft.SqlServer.Management.Smo.PhysicalPartitionCollection : PartitionNumberedObjectCollectionBase {
    public SqlSmoObject Parent { get; }
    public PhysicalPartition Item { get; }
    private Database Database { get; }
    internal PhysicalPartitionCollection(SqlSmoObject parentInstance);
    public SqlSmoObject get_Parent();
    public void Add(PhysicalPartition physicalPartition);
    public void Remove(PhysicalPartition physicalPartition);
    public void Remove(int partitionNumber);
    public PhysicalPartition get_Item(int index);
    protected virtual Type GetCollectionElementType();
    internal virtual SqlSmoObject GetCollectionElementInstance(ObjectKeyBase key, SqlSmoState state);
    public void CopyTo(PhysicalPartition[] array, int partitionNumberStart);
    public void CopyTo(PhysicalPartition[] array);
    public void CopyTo(PhysicalPartition[] array, int partitionNumberStart, int partitionNumberEnd);
    private Database get_Database();
    internal void Reset();
    private bool IsAppropriateForCompression();
    internal void Reset(int partitionNumber);
    internal bool IsDataCompressionStateDirty(int partitionNumber);
    internal string GetCompressionCode(int partitionNumber);
    internal bool IsCollectionDirty();
    internal bool IsCompressionCodeRequired(bool isOnAlter);
    internal bool IsXmlCompressionStateDirty(int partitionNumber);
    internal string GetXmlCompressionCode(int partitionNumber);
    internal bool IsXmlCollectionDirty();
    internal bool IsXmlCompressionCodeRequired(bool isOnAlter);
    private string ReformatCommaString(string input);
    private bool IsNonDescriptiveScriptAllowed();
    private void ValidatePhysicalPartitionObject(string objectName);
    internal string GetCompressionCode(bool isOnAlter, bool isOnTable, ScriptingPreferences sp);
    internal string GetXmlCompressionCode(bool isOnAlter, bool isOnTable, ScriptingPreferences sp);
}
[EvaluationModeAttribute("4")]
[PhysicalFacetAttribute]
[SfcElementAttribute("48")]
public class Microsoft.SqlServer.Management.Smo.PlanGuide : NamedSmoObject {
    public static string UrnSuffix { get; }
    [SfcObjectAttribute("1", "0", "Microsoft.SqlServer.Management.Smo.ExtendedProperty")]
public ExtendedPropertyCollection ExtendedProperties { get; }
    [SfcObjectAttribute("1")]
public Database Parent { get; public set; }
    [SfcPropertyAttribute("3328")]
public string Hints { get; public set; }
    [SfcPropertyAttribute("3072")]
public int ID { get; }
    [SfcPropertyAttribute("3072")]
public bool IsDisabled { get; public set; }
    [SfcPropertyAttribute("3328")]
public string Parameters { get; public set; }
    [SfcPropertyAttribute("3328")]
public string ScopeBatch { get; public set; }
    [SfcPropertyAttribute("3328")]
public string ScopeObjectName { get; public set; }
    [SfcPropertyAttribute("3328")]
public string ScopeSchemaName { get; public set; }
    [SfcPropertyAttribute("3328")]
public PlanGuideType ScopeType { get; public set; }
    [SfcPropertyAttribute("3328")]
public string Statement { get; public set; }
    internal PlanGuide(AbstractCollectionBase parentColl, ObjectKeyBase key, SqlSmoState state);
    public PlanGuide(Database database, string name);
    public static string get_UrnSuffix();
    internal virtual void ValidateName(string name);
    public sealed virtual ExtendedPropertyCollection get_ExtendedProperties();
    internal virtual PropagateInfo[] GetPropagateInfo(PropagateAction action);
    public sealed virtual void Alter();
    internal virtual void ScriptAlter(StringCollection alterQuery, ScriptingPreferences sp);
    public sealed virtual void Create();
    internal virtual void ScriptCreate(StringCollection createQuery, ScriptingPreferences sp);
    public sealed virtual void Drop();
    public sealed virtual void DropIfExists();
    internal virtual void ScriptDrop(StringCollection dropQuery, ScriptingPreferences sp);
    public sealed virtual StringCollection Script();
    public sealed virtual StringCollection Script(ScriptingOptions scriptingOptions);
    private void CheckPlanGuideName(string planGuideName);
    public bool ValidatePlanGuide();
    public bool ValidatePlanGuide(DataRow& errorInfo);
    public Database get_Parent();
    public void set_Parent(Database value);
    internal virtual SqlPropertyMetadataProvider GetPropertyMetadataProvider();
    public string get_Hints();
    public void set_Hints(string value);
    public int get_ID();
    public bool get_IsDisabled();
    public void set_IsDisabled(bool value);
    public string get_Parameters();
    public void set_Parameters(string value);
    public string get_ScopeBatch();
    public void set_ScopeBatch(string value);
    public string get_ScopeObjectName();
    public void set_ScopeObjectName(string value);
    public string get_ScopeSchemaName();
    public void set_ScopeSchemaName(string value);
    public PlanGuideType get_ScopeType();
    public void set_ScopeType(PlanGuideType value);
    public string get_Statement();
    public void set_Statement(string value);
    internal virtual String[] GetNonAlterableProperties();
}
[DefaultMemberAttribute("Item")]
public class Microsoft.SqlServer.Management.Smo.PlanGuideCollection : SimpleObjectCollectionBase {
    public Database Parent { get; }
    public PlanGuide Item { get; }
    public PlanGuide Item { get; }
    internal PlanGuideCollection(SqlSmoObject parentInstance);
    public Database get_Parent();
    public PlanGuide get_Item(int index);
    public PlanGuide get_Item(string name);
    public void CopyTo(PlanGuide[] array, int index);
    public PlanGuide ItemById(int id);
    protected virtual Type GetCollectionElementType();
    internal virtual SqlSmoObject GetCollectionElementInstance(ObjectKeyBase key, SqlSmoState state);
    public void Remove(PlanGuide planGuide);
    public void Remove(string name);
    public void Add(PlanGuide planGuide);
    internal SqlSmoObject GetObjectByName(string name);
    internal virtual ObjectKeyBase CreateKeyFromUrn(Urn urn);
}
[CLSCompliantAttribute("False")]
public class Microsoft.SqlServer.Management.Smo.PlanGuideExtender : SmoObjectExtender`1<PlanGuide> {
    private StringCollection schemaNames;
    [ExtendedPropertyAttribute]
public string Name { get; public set; }
    [ExtendedPropertyAttribute]
public StringCollection SchemaNames { get; }
    public PlanGuideExtender(PlanGuide planGuide);
    public string get_Name();
    public void set_Name(string value);
    public StringCollection get_SchemaNames();
    public sealed virtual ValidationState Validate(string methodName, Object[] arguments);
}
internal class Microsoft.SqlServer.Management.Smo.PrefetchBatchEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private string <UrnType>k__BackingField;
    [CompilerGeneratedAttribute]
private int <BatchSize>k__BackingField;
    [CompilerGeneratedAttribute]
private int <CurrentBatchCount>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TotalBatchCount>k__BackingField;
    public string UrnType { get; private set; }
    public int BatchSize { get; private set; }
    public int CurrentBatchCount { get; private set; }
    public int TotalBatchCount { get; private set; }
    internal PrefetchBatchEventArgs(string urnType, int batchSize, int currentBatchCount, int totalBatchCount);
    [CompilerGeneratedAttribute]
public string get_UrnType();
    [CompilerGeneratedAttribute]
private void set_UrnType(string value);
    [CompilerGeneratedAttribute]
public int get_BatchSize();
    [CompilerGeneratedAttribute]
private void set_BatchSize(int value);
    [CompilerGeneratedAttribute]
public int get_CurrentBatchCount();
    [CompilerGeneratedAttribute]
private void set_CurrentBatchCount(int value);
    [CompilerGeneratedAttribute]
public int get_TotalBatchCount();
    [CompilerGeneratedAttribute]
private void set_TotalBatchCount(int value);
}
internal class Microsoft.SqlServer.Management.Smo.PrefetchBatchEventHandler : MulticastDelegate {
    public PrefetchBatchEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, PrefetchBatchEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, PrefetchBatchEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[FlagsAttribute]
public enum Microsoft.SqlServer.Management.Smo.PrivilegeTypes : Enum {
    public int value__;
    public static PrivilegeTypes Unknown;
    public static PrivilegeTypes Select;
    public static PrivilegeTypes Insert;
    public static PrivilegeTypes Update;
    public static PrivilegeTypes Delete;
    public static PrivilegeTypes Execute;
    public static PrivilegeTypes References;
    public static PrivilegeTypes ViewDefinition;
    public static PrivilegeTypes Control;
    public static PrivilegeTypes Alter;
    public static PrivilegeTypes Drop;
    public static PrivilegeTypes AllObjectPrivileges;
    public static PrivilegeTypes CreateTable;
    public static PrivilegeTypes CreateDatabase;
    public static PrivilegeTypes CreateView;
    public static PrivilegeTypes CreateProcedure;
    public static PrivilegeTypes DumpDatabase;
    public static PrivilegeTypes CreateDefault;
    public static PrivilegeTypes DumpTransaction;
    public static PrivilegeTypes CreateRule;
    public static PrivilegeTypes DumpTable;
    public static PrivilegeTypes CreateFunction;
    public static PrivilegeTypes CreateType;
    public static PrivilegeTypes AllDatabasePrivileges;
    public static PrivilegeTypes BackupDatabase;
    public static PrivilegeTypes BackupLog;
}
public class Microsoft.SqlServer.Management.Smo.ProgressReportEventArgs : EventArgs {
    private bool schemaBound;
    private Urn current;
    private Urn parent;
    private int subTotalCount;
    private int subTotal;
    private int totalCount;
    private int total;
    public bool IsSchemaBound { get; }
    public Urn Current { get; }
    public Urn Parent { get; }
    public int SubTotalCount { get; }
    public int SubTotal { get; }
    public int TotalCount { get; }
    public int Total { get; }
    public ProgressReportEventArgs(Urn current, Urn parent, int subTotalCount, int subTotal, int totalCount, int total);
    public ProgressReportEventArgs(Urn current, Urn parent, bool isSchemaBound, int subTotalCount, int subTotal, int totalCount, int total);
    public bool get_IsSchemaBound();
    public Urn get_Current();
    public Urn get_Parent();
    public int get_SubTotalCount();
    public int get_SubTotal();
    public int get_TotalCount();
    public int get_Total();
}
public class Microsoft.SqlServer.Management.Smo.ProgressReportEventHandler : MulticastDelegate {
    public ProgressReportEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, ProgressReportEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, ProgressReportEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class Microsoft.SqlServer.Management.Smo.Property : object {
    private PropertyCollection m_propertyCollection;
    private int m_propertyIndex;
    public string Name { get; }
    public object Value { get; public set; }
    internal PropertyCollection Parent { get; }
    internal bool Enumeration { get; }
    public Type Type { get; }
    public bool Writable { get; }
    public bool Readable { get; }
    public bool Expensive { get; }
    public bool Dirty { get; }
    public bool Retrieved { get; }
    public bool IsNull { get; }
    private AttributeCollection Microsoft.SqlServer.Management.Sdk.Sfc.ISfcProperty.Attributes { get; }
    private bool Microsoft.SqlServer.Management.Sdk.Sfc.ISfcProperty.Dirty { get; }
    private bool Microsoft.SqlServer.Management.Sdk.Sfc.ISfcProperty.Enabled { get; }
    private bool Microsoft.SqlServer.Management.Sdk.Sfc.ISfcProperty.IsNull { get; }
    private string Microsoft.SqlServer.Management.Sdk.Sfc.ISfcProperty.Name { get; }
    private bool Microsoft.SqlServer.Management.Sdk.Sfc.ISfcProperty.Required { get; }
    private Type Microsoft.SqlServer.Management.Sdk.Sfc.ISfcProperty.Type { get; }
    private object Microsoft.SqlServer.Management.Sdk.Sfc.ISfcProperty.Value { get; private set; }
    private bool Microsoft.SqlServer.Management.Sdk.Sfc.ISfcProperty.Writable { get; }
    internal Property(PropertyCollection propertyCollection, int propertyIndex);
    internal Property(Property p);
    internal Property(object o1, object o2, object o3);
    public string get_Name();
    public object get_Value();
    public void set_Value(object value);
    internal void SetValue(object value);
    internal PropertyCollection get_Parent();
    internal void SetRetrieved(bool retrieved);
    internal void SetDirty(bool dirty);
    internal void SetEnabled(bool enabled);
    internal bool get_Enumeration();
    public Type get_Type();
    public bool get_Writable();
    public bool get_Readable();
    public bool get_Expensive();
    public bool get_Dirty();
    public bool get_Retrieved();
    public bool get_IsNull();
    public virtual string ToString();
    public int CompareTo(object obj);
    public virtual bool Equals(object o);
    public static bool op_Equality(Property prop1, Property prop2);
    public static bool op_Inequality(Property prop1, Property prop2);
    public static bool op_GreaterThan(Property prop1, Property prop2);
    public static bool op_LessThan(Property prop1, Property prop2);
    public virtual int GetHashCode();
    private sealed virtual override AttributeCollection Microsoft.SqlServer.Management.Sdk.Sfc.ISfcProperty.get_Attributes();
    private sealed virtual override bool Microsoft.SqlServer.Management.Sdk.Sfc.ISfcProperty.get_Dirty();
    private sealed virtual override bool Microsoft.SqlServer.Management.Sdk.Sfc.ISfcProperty.get_Enabled();
    private sealed virtual override bool Microsoft.SqlServer.Management.Sdk.Sfc.ISfcProperty.get_IsNull();
    private sealed virtual override string Microsoft.SqlServer.Management.Sdk.Sfc.ISfcProperty.get_Name();
    private sealed virtual override bool Microsoft.SqlServer.Management.Sdk.Sfc.ISfcProperty.get_Required();
    private sealed virtual override Type Microsoft.SqlServer.Management.Sdk.Sfc.ISfcProperty.get_Type();
    private sealed virtual override object Microsoft.SqlServer.Management.Sdk.Sfc.ISfcProperty.get_Value();
    private sealed virtual override void Microsoft.SqlServer.Management.Sdk.Sfc.ISfcProperty.set_Value(object value);
    private sealed virtual override bool Microsoft.SqlServer.Management.Sdk.Sfc.ISfcProperty.get_Writable();
}
internal enum Microsoft.SqlServer.Management.Smo.PropertyAccessPurpose : Enum {
    public int value__;
    public static PropertyAccessPurpose Read;
    public static PropertyAccessPurpose Write;
    public static PropertyAccessPurpose Unknown;
}
internal class Microsoft.SqlServer.Management.Smo.PropertyBag : PropertyStorageBase {
    private Object[] m_propertyValues;
    internal PropertyBag(int count);
    internal virtual object GetValue(int index);
    internal virtual void SetValue(int index, object value);
}
internal enum Microsoft.SqlServer.Management.Smo.PropertyBagState : Enum {
    public int value__;
    public static PropertyBagState Empty;
    public static PropertyBagState Lazy;
    public static PropertyBagState Full;
    public static PropertyBagState Unknown;
}
public class Microsoft.SqlServer.Management.Smo.PropertyCannotBeRetrievedException : SmoException {
    private string reason;
    private string propertyName;
    private object failedObject;
    public SmoExceptionType SmoExceptionType { get; }
    public string Message { get; }
    public string PropertyName { get; }
    public object FailedObject { get; }
    public PropertyCannotBeRetrievedException(string message);
    public PropertyCannotBeRetrievedException(string message, Exception innerException);
    public PropertyCannotBeRetrievedException(string propertyName, object failedObject);
    internal PropertyCannotBeRetrievedException(string propertyName, object failedObject, string reason);
    private PropertyCannotBeRetrievedException(SerializationInfo info, StreamingContext context);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    private void Init();
    public virtual SmoExceptionType get_SmoExceptionType();
    public virtual string get_Message();
    public string get_PropertyName();
    public object get_FailedObject();
}
[DefaultMemberAttribute("Item")]
public class Microsoft.SqlServer.Management.Smo.PropertyCollection : object {
    internal SmoObjectBase m_parent;
    private PropertyStorageBase m_PropertyStorage;
    private PropertyMetadataProvider m_pmp;
    internal PropertyMetadataProvider PropertiesMetadata { get; }
    internal bool IsDesignMode { get; }
    internal bool Dirty { get; }
    public int Count { get; }
    public Property Item { get; }
    public Property Item { get; }
    public bool IsSynchronized { get; }
    public object SyncRoot { get; }
    internal PropertyCollection(SmoObjectBase parent, PropertyMetadataProvider pmp);
    internal PropertyMetadataProvider get_PropertiesMetadata();
    internal int LookupID(string propertyName, PropertyAccessPurpose pap);
    protected int LookupID(string propertyName);
    private int LookupIDNoBoundCheck(string propertyName);
    private void RetrieveProperty(int index, bool useDefaultOnMissingValue);
    private void HandleNullValue(int index);
    private Property GetProperty(string name);
    private Property GetProperty(int index);
    private StaticMetadata GetStaticMetadata(int index);
    internal Property Get(string name);
    internal Property Get(int index);
    internal string GetName(int index);
    internal object GetValueWithNullReplacement(string propertyName);
    internal object GetValueWithNullReplacement(string propertyName, bool throwOnNullValue, bool useDefaultOnMissingValue);
    internal object GetValue(int index);
    internal void SetValueWithConsistencyCheck(string propertyName, object value);
    internal void SetValueWithConsistencyCheck(string propertyName, object value, bool allowNull);
    internal void SetValueFromUser(int index, object value);
    internal void SetValue(int index, object value);
    internal bool IsDirty(int index);
    internal void SetDirty(int index, bool val);
    internal bool IsRetrieved(int index);
    internal void SetAllRetrieved(bool val);
    internal void SetRetrieved(int index, bool val);
    internal bool IsEnabled(int index);
    internal void SetEnabled(int index, bool enabled);
    internal Type PropertyType(int index);
    internal bool IsReadOnly(int index);
    internal bool IsExpensive(int index);
    internal bool IsAvailable(int index);
    internal bool IsNull(int index);
    internal bool IsEnumeration(int index);
    internal bool get_IsDesignMode();
    internal bool get_Dirty();
    internal void SetAllDirty(bool val);
    internal void SetAllDirtyAsRetrieved(bool val);
    internal bool ArePropertiesDirty(StringCollection propsList);
    public Property GetPropertyObject(int index);
    internal Property GetPropertyObjectAllowNull(int index);
    public Property GetPropertyObject(int index, bool doNotLoadPropertyValues);
    public Property GetPropertyObject(string name);
    internal Property GetPropertyObjectAllowNull(string name);
    public Property GetPropertyObject(string name, bool doNotLoadPropertyValues);
    public void SetDirty(string propertyName, bool isDirty);
    public sealed virtual int get_Count();
    public void CopyTo(Property[] array, int index);
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
    public Property get_Item(string name);
    public Property get_Item(int index);
    public sealed virtual IEnumerator GetEnumerator();
    public bool Contains(string propertyName);
    public sealed virtual bool get_IsSynchronized();
    public sealed virtual object get_SyncRoot();
    private ISfcProperty GetISfcProperty(int index);
    private sealed virtual override bool Microsoft.SqlServer.Management.Sdk.Sfc.ISfcPropertySet.Contains(string name);
    private sealed virtual override bool Microsoft.SqlServer.Management.Sdk.Sfc.ISfcPropertySet.Contains(ISfcProperty property);
    private sealed virtual override bool Microsoft.SqlServer.Management.Sdk.Sfc.ISfcPropertySet.Contains(string propertyName);
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.Smo.PropertyCollection/<Microsoft-SqlServer-Management-Sdk-Sfc-ISfcPropertySet-EnumProperties>d__72")]
private sealed virtual override IEnumerable`1<ISfcProperty> Microsoft.SqlServer.Management.Sdk.Sfc.ISfcPropertySet.EnumProperties();
    private sealed virtual override bool Microsoft.SqlServer.Management.Sdk.Sfc.ISfcPropertySet.TryGetProperty(string name, ISfcProperty& property);
    private sealed virtual override bool Microsoft.SqlServer.Management.Sdk.Sfc.ISfcPropertySet.TryGetPropertyValue(string name, Object& value);
    private sealed virtual override bool Microsoft.SqlServer.Management.Sdk.Sfc.ISfcPropertySet.TryGetPropertyValue(string name, T& value);
}
internal class Microsoft.SqlServer.Management.Smo.PropertyDispatcher : PropertyStorageBase {
    private IPropertyDataDispatch m_dispatch;
    internal PropertyDispatcher(int count, IPropertyDataDispatch dispatch);
    internal virtual object GetValue(int index);
    internal virtual void SetValue(int index, object value);
}
internal abstract class Microsoft.SqlServer.Management.Smo.PropertyMetadataProvider : object {
    internal static Int32[] defaultSingletonArray;
    public int Count { get; }
    private static PropertyMetadataProvider();
    public abstract virtual int PropertyNameToIDLookup(string propertyName);
    public abstract virtual StaticMetadata GetStaticMetadata(int id);
    public abstract virtual int get_Count();
    internal static StaticMetadata[] GetStaticMetadataArray(DatabaseEngineType databaseEngineType, DatabaseEngineEdition databaseEngineEdition);
    internal static Int32[] GetVersionArray(DatabaseEngineType databaseEngineType, DatabaseEngineEdition databaseEngineEdition);
    internal virtual int PropertyNameToIDLookupWithException(string propertyName, PropertyAccessPurpose pap);
    internal int PropertyNameToIDLookupWithException(string propertyName);
    internal virtual bool TryPropertyNameToIDLookup(string propertyName, Int32& index);
    internal static bool CheckPropertyValid(Type type, string propertyName, ServerVersion version, DatabaseEngineType databaseEngineType, DatabaseEngineEdition databaseEngineEdition);
    internal static int GetCurrentVersionIndex(ServerVersion sv, DatabaseEngineType databaseEngineType, DatabaseEngineEdition databaseEngineEdition);
}
public class Microsoft.SqlServer.Management.Smo.PropertyMissingEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private string <PropertyName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TypeName>k__BackingField;
    public string PropertyName { get; private set; }
    public string TypeName { get; private set; }
    internal PropertyMissingEventArgs(string propertyName, string typeName);
    [CompilerGeneratedAttribute]
public string get_PropertyName();
    [CompilerGeneratedAttribute]
private void set_PropertyName(string value);
    [CompilerGeneratedAttribute]
public string get_TypeName();
    [CompilerGeneratedAttribute]
private void set_TypeName(string value);
}
public class Microsoft.SqlServer.Management.Smo.PropertyNotSetException : SmoException {
    private string propertyName;
    public SmoExceptionType SmoExceptionType { get; }
    public string Message { get; }
    public string PropertyName { get; }
    public PropertyNotSetException(string message, Exception innerException);
    public PropertyNotSetException(string propertyName);
    private PropertyNotSetException(SerializationInfo info, StreamingContext context);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    private void Init();
    public virtual SmoExceptionType get_SmoExceptionType();
    public virtual string get_Message();
    public string get_PropertyName();
}
public class Microsoft.SqlServer.Management.Smo.PropertyReadOnlyException : SmoException {
    private string propertyName;
    public SmoExceptionType SmoExceptionType { get; }
    public string Message { get; }
    public string PropertyName { get; }
    public PropertyReadOnlyException(string message, Exception innerException);
    public PropertyReadOnlyException(string propertyName);
    private PropertyReadOnlyException(SerializationInfo info, StreamingContext context);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    private void Init();
    public virtual SmoExceptionType get_SmoExceptionType();
    public virtual string get_Message();
    public string get_PropertyName();
}
internal abstract class Microsoft.SqlServer.Management.Smo.PropertyStorageBase : BitStorage {
    internal PropertyStorageBase(int count);
    internal bool IsNull(int index);
    internal bool IsDirty(int index);
    internal void SetDirty(int index, bool val);
    internal bool IsRetrieved(int index);
    internal void SetRetrieved(int index, bool val);
    internal bool IsEnabled(int index);
    internal void SetEnabled(int index, bool val);
    internal abstract virtual object GetValue(int index);
    internal abstract virtual void SetValue(int index, object value);
}
internal class Microsoft.SqlServer.Management.Smo.PropertyStorageFactory : object {
    internal static PropertyStorageBase Create(SmoObjectBase parent, int propCount);
}
public class Microsoft.SqlServer.Management.Smo.PropertyTypeMismatchException : SmoException {
    private string propertyName;
    private string receivedType;
    private string expectedType;
    public SmoExceptionType SmoExceptionType { get; }
    public string Message { get; }
    public string PropertyName { get; }
    public string ReceivedType { get; }
    public string ExpectedType { get; }
    public PropertyTypeMismatchException(string message);
    public PropertyTypeMismatchException(string message, Exception innerException);
    public PropertyTypeMismatchException(string propertyName, string receivedType, string expectedType);
    private PropertyTypeMismatchException(SerializationInfo info, StreamingContext context);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    public virtual SmoExceptionType get_SmoExceptionType();
    public virtual string get_Message();
    private void Init();
    public string get_PropertyName();
    public string get_ReceivedType();
    public string get_ExpectedType();
}
public class Microsoft.SqlServer.Management.Smo.PropertyWriteException : SmoException {
    private string propertyName;
    private string objectKind;
    private string objectName;
    private string reason;
    public SmoExceptionType SmoExceptionType { get; }
    public string Message { get; }
    public string PropertyName { get; }
    public PropertyWriteException(string message);
    public PropertyWriteException(string message, Exception innerException);
    public PropertyWriteException(string propertyName, string objectKind, string objectName, string reason);
    private PropertyWriteException(SerializationInfo info, StreamingContext context);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    private void Init();
    public virtual SmoExceptionType get_SmoExceptionType();
    public virtual string get_Message();
    public string get_PropertyName();
}
public class Microsoft.SqlServer.Management.Smo.Protocol : object {
    private Endpoint m_endpoint;
    private HttpProtocol m_httpProtocol;
    private TcpProtocol m_tcpProtocol;
    public HttpProtocol Http { get; }
    public TcpProtocol Tcp { get; }
    internal EndpointProtocol EndpointProtocol { get; }
    private string ProtocolDdlName { get; }
    internal Protocol(Endpoint endpoint);
    public HttpProtocol get_Http();
    public TcpProtocol get_Tcp();
    private SqlSmoState GetStateForType(ProtocolType et);
    internal EndpointProtocol get_EndpointProtocol();
    internal void MarkDropped();
    private string get_ProtocolDdlName();
    internal void Script(StringBuilder sb, ScriptingPreferences sp);
}
[TypeConverterAttribute("Microsoft.SqlServer.Management.Smo.QueryStoreCaptureModeConverter")]
public enum Microsoft.SqlServer.Management.Smo.QueryStoreCaptureMode : Enum {
    public int value__;
    [LocDisplayNameAttribute("All")]
[TsqlSyntaxStringAttribute("ALL")]
public static QueryStoreCaptureMode All;
    [LocDisplayNameAttribute("Auto")]
[TsqlSyntaxStringAttribute("AUTO")]
public static QueryStoreCaptureMode Auto;
    [LocDisplayNameAttribute("None")]
[TsqlSyntaxStringAttribute("NONE")]
public static QueryStoreCaptureMode None;
    [LocDisplayNameAttribute("Custom")]
[TsqlSyntaxStringAttribute("CUSTOM")]
public static QueryStoreCaptureMode Custom;
}
public class Microsoft.SqlServer.Management.Smo.QueryStoreCaptureModeConverter : EnumToDisplayNameConverter {
}
[TypeConverterAttribute("Microsoft.SqlServer.Management.Smo.QueryStoreOperationModeConverter")]
public enum Microsoft.SqlServer.Management.Smo.QueryStoreOperationMode : Enum {
    public int value__;
    [LocDisplayNameAttribute("Off")]
[TsqlSyntaxStringAttribute("OFF")]
public static QueryStoreOperationMode Off;
    [LocDisplayNameAttribute("ReadOnly")]
[TsqlSyntaxStringAttribute("READ_ONLY")]
public static QueryStoreOperationMode ReadOnly;
    [LocDisplayNameAttribute("ReadWrite")]
[TsqlSyntaxStringAttribute("READ_WRITE")]
public static QueryStoreOperationMode ReadWrite;
    [LocDisplayNameAttribute("Error")]
public static QueryStoreOperationMode Error;
}
public class Microsoft.SqlServer.Management.Smo.QueryStoreOperationModeConverter : EnumToDisplayNameConverter {
}
[SfcElementTypeAttribute("QueryStoreOptions")]
[SfcElementAttribute("48")]
public class Microsoft.SqlServer.Management.Smo.QueryStoreOptions : SqlSmoObject {
    internal static string UrnSuffix { get; }
    [SfcObjectAttribute("1")]
public Database Parent { get; }
    private bool Microsoft.SqlServer.Management.Sdk.Sfc.ISfcSupportsDesignMode.IsDesignMode { get; }
    [SfcPropertyAttribute("3072")]
public QueryStoreOperationMode ActualState { get; }
    [SfcPropertyAttribute("9216")]
public int CapturePolicyExecutionCount { get; public set; }
    [SfcPropertyAttribute("9216")]
public int CapturePolicyStaleThresholdInHrs { get; public set; }
    [SfcPropertyAttribute("9216")]
public long CapturePolicyTotalCompileCpuTimeInMS { get; public set; }
    [SfcPropertyAttribute("9216")]
public long CapturePolicyTotalExecutionCpuTimeInMS { get; public set; }
    [SfcPropertyAttribute("11264")]
public long CurrentStorageSizeInMB { get; public set; }
    [SfcPropertyAttribute("11264")]
public long DataFlushIntervalInSeconds { get; public set; }
    [SfcPropertyAttribute("11264")]
public QueryStoreOperationMode DesiredState { get; public set; }
    [SfcPropertyAttribute("11264")]
public long MaxPlansPerQuery { get; public set; }
    [SfcPropertyAttribute("11264")]
public long MaxStorageSizeInMB { get; public set; }
    [SfcPropertyAttribute("11264")]
public QueryStoreCaptureMode QueryCaptureMode { get; public set; }
    [SfcPropertyAttribute("3072")]
public int ReadOnlyReason { get; public set; }
    [SfcPropertyAttribute("11264")]
public QueryStoreSizeBasedCleanupMode SizeBasedCleanupMode { get; public set; }
    [SfcPropertyAttribute("11264")]
public long StaleQueryThresholdInDays { get; public set; }
    [SfcPropertyAttribute("11264")]
public long StatisticsCollectionIntervalInMinutes { get; public set; }
    [SfcPropertyAttribute("11264")]
public QueryStoreWaitStatsCaptureMode WaitStatsCaptureMode { get; public set; }
    internal QueryStoreOptions(Database parentdb, ObjectKeyBase key, SqlSmoState state);
    protected sealed virtual void GetUrnRecursive(StringBuilder urnbuilder, UrnIdOption idOption);
    internal static string get_UrnSuffix();
    public Database get_Parent();
    internal virtual void ScriptAlter(StringCollection query, ScriptingPreferences sp);
    internal virtual void ScriptCreate(StringCollection query, ScriptingPreferences sp);
    private void ScriptQueryStoreOptions(StringCollection query, ScriptingPreferences sp, bool scriptAll);
    public sealed virtual void Alter();
    public sealed virtual StringCollection Script();
    public sealed virtual StringCollection Script(ScriptingOptions scriptingOptions);
    public void PurgeQueryStoreData();
    internal static String[] GetScriptFields(Type parentType, ServerVersion version, DatabaseEngineType databaseEngineType, DatabaseEngineEdition databaseEngineEdition, bool defaultTextMode);
    private sealed virtual override bool Microsoft.SqlServer.Management.Sdk.Sfc.ISfcSupportsDesignMode.get_IsDesignMode();
    internal virtual SqlPropertyMetadataProvider GetPropertyMetadataProvider();
    public QueryStoreOperationMode get_ActualState();
    public int get_CapturePolicyExecutionCount();
    public void set_CapturePolicyExecutionCount(int value);
    public int get_CapturePolicyStaleThresholdInHrs();
    public void set_CapturePolicyStaleThresholdInHrs(int value);
    public long get_CapturePolicyTotalCompileCpuTimeInMS();
    public void set_CapturePolicyTotalCompileCpuTimeInMS(long value);
    public long get_CapturePolicyTotalExecutionCpuTimeInMS();
    public void set_CapturePolicyTotalExecutionCpuTimeInMS(long value);
    public long get_CurrentStorageSizeInMB();
    public void set_CurrentStorageSizeInMB(long value);
    public long get_DataFlushIntervalInSeconds();
    public void set_DataFlushIntervalInSeconds(long value);
    public QueryStoreOperationMode get_DesiredState();
    public void set_DesiredState(QueryStoreOperationMode value);
    public long get_MaxPlansPerQuery();
    public void set_MaxPlansPerQuery(long value);
    public long get_MaxStorageSizeInMB();
    public void set_MaxStorageSizeInMB(long value);
    public QueryStoreCaptureMode get_QueryCaptureMode();
    public void set_QueryCaptureMode(QueryStoreCaptureMode value);
    public int get_ReadOnlyReason();
    public void set_ReadOnlyReason(int value);
    public QueryStoreSizeBasedCleanupMode get_SizeBasedCleanupMode();
    public void set_SizeBasedCleanupMode(QueryStoreSizeBasedCleanupMode value);
    public long get_StaleQueryThresholdInDays();
    public void set_StaleQueryThresholdInDays(long value);
    public long get_StatisticsCollectionIntervalInMinutes();
    public void set_StatisticsCollectionIntervalInMinutes(long value);
    public QueryStoreWaitStatsCaptureMode get_WaitStatsCaptureMode();
    public void set_WaitStatsCaptureMode(QueryStoreWaitStatsCaptureMode value);
}
[TypeConverterAttribute("Microsoft.SqlServer.Management.Smo.QueryStoreSizeBasedCleanupModeConverter")]
public enum Microsoft.SqlServer.Management.Smo.QueryStoreSizeBasedCleanupMode : Enum {
    public int value__;
    [LocDisplayNameAttribute("Off")]
[TsqlSyntaxStringAttribute("OFF")]
public static QueryStoreSizeBasedCleanupMode Off;
    [LocDisplayNameAttribute("Auto")]
[TsqlSyntaxStringAttribute("AUTO")]
public static QueryStoreSizeBasedCleanupMode Auto;
}
public class Microsoft.SqlServer.Management.Smo.QueryStoreSizeBasedCleanupModeConverter : EnumToDisplayNameConverter {
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
}
[TypeConverterAttribute("Microsoft.SqlServer.Management.Smo.QueryStoreWaitStatsCaptureModeConverter")]
public enum Microsoft.SqlServer.Management.Smo.QueryStoreWaitStatsCaptureMode : Enum {
    public int value__;
    [LocDisplayNameAttribute("Off")]
[TsqlSyntaxStringAttribute("OFF")]
public static QueryStoreWaitStatsCaptureMode Off;
    [LocDisplayNameAttribute("On")]
[TsqlSyntaxStringAttribute("ON")]
public static QueryStoreWaitStatsCaptureMode On;
}
public class Microsoft.SqlServer.Management.Smo.QueryStoreWaitStatsCaptureModeConverter : EnumToDisplayNameConverter {
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
}
public enum Microsoft.SqlServer.Management.Smo.RemoteDataArchiveMigrationState : Enum {
    public int value__;
    public static RemoteDataArchiveMigrationState Disabled;
    public static RemoteDataArchiveMigrationState PausedOutbound;
    public static RemoteDataArchiveMigrationState PausedInbound;
    public static RemoteDataArchiveMigrationState Outbound;
    public static RemoteDataArchiveMigrationState Inbound;
    public static RemoteDataArchiveMigrationState Paused;
}
public class Microsoft.SqlServer.Management.Smo.RemoteDataArchiveMigrationStatusReport : object {
    [CompilerGeneratedAttribute]
private string <DatabaseName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TableName>k__BackingField;
    [CompilerGeneratedAttribute]
private long <MigratedRows>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <StatusReportStartTimeInUtc>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <StatusReportEndTimeInUtc>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ErrorNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ErrorSeverity>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ErrorState>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Details>k__BackingField;
    public string DatabaseName { get; private set; }
    public string TableName { get; private set; }
    public long MigratedRows { get; private set; }
    public DateTime StatusReportStartTimeInUtc { get; private set; }
    public DateTime StatusReportEndTimeInUtc { get; private set; }
    public int ErrorNumber { get; private set; }
    public int ErrorSeverity { get; private set; }
    public int ErrorState { get; private set; }
    public string Details { get; private set; }
    internal RemoteDataArchiveMigrationStatusReport(string databaseName, string tableName, long migratedRows, DateTime statusReportStartTimeInUtc, DateTime statusReportEndTimeInUtc);
    internal RemoteDataArchiveMigrationStatusReport(string databaseName, string tableName, long migratedRows, DateTime statusReportStartTimeInUtc, DateTime statusReportEndTimeInUtc, Nullable`1<int> errorNumber, Nullable`1<int> errorSeverity, Nullable`1<int> errorState, string details);
    [CompilerGeneratedAttribute]
public string get_DatabaseName();
    [CompilerGeneratedAttribute]
private void set_DatabaseName(string value);
    [CompilerGeneratedAttribute]
public string get_TableName();
    [CompilerGeneratedAttribute]
private void set_TableName(string value);
    [CompilerGeneratedAttribute]
public long get_MigratedRows();
    [CompilerGeneratedAttribute]
private void set_MigratedRows(long value);
    [CompilerGeneratedAttribute]
public DateTime get_StatusReportStartTimeInUtc();
    [CompilerGeneratedAttribute]
private void set_StatusReportStartTimeInUtc(DateTime value);
    [CompilerGeneratedAttribute]
public DateTime get_StatusReportEndTimeInUtc();
    [CompilerGeneratedAttribute]
private void set_StatusReportEndTimeInUtc(DateTime value);
    [CompilerGeneratedAttribute]
public int get_ErrorNumber();
    [CompilerGeneratedAttribute]
private void set_ErrorNumber(int value);
    [CompilerGeneratedAttribute]
public int get_ErrorSeverity();
    [CompilerGeneratedAttribute]
private void set_ErrorSeverity(int value);
    [CompilerGeneratedAttribute]
public int get_ErrorState();
    [CompilerGeneratedAttribute]
private void set_ErrorState(int value);
    [CompilerGeneratedAttribute]
public string get_Details();
    [CompilerGeneratedAttribute]
private void set_Details(string value);
}
public class Microsoft.SqlServer.Management.Smo.RemoteDatabaseMigrationStatistics : object {
    [CompilerGeneratedAttribute]
private double <RemoteDatabaseSizeInMB>k__BackingField;
    public double RemoteDatabaseSizeInMB { get; private set; }
    internal RemoteDatabaseMigrationStatistics(double remoteDatabaseSizeInMB);
    [CompilerGeneratedAttribute]
public double get_RemoteDatabaseSizeInMB();
    [CompilerGeneratedAttribute]
private void set_RemoteDatabaseSizeInMB(double value);
}
public class Microsoft.SqlServer.Management.Smo.RemoteTableMigrationStatistics : object {
    [CompilerGeneratedAttribute]
private double <SizeInKB>k__BackingField;
    [CompilerGeneratedAttribute]
private long <RowCount>k__BackingField;
    public double SizeInKB { get; private set; }
    public long RowCount { get; private set; }
    internal RemoteTableMigrationStatistics(double sizeInKB, long rowCount);
    [CompilerGeneratedAttribute]
public double get_SizeInKB();
    [CompilerGeneratedAttribute]
private void set_SizeInKB(double value);
    [CompilerGeneratedAttribute]
public long get_RowCount();
    [CompilerGeneratedAttribute]
private void set_RowCount(long value);
}
public enum Microsoft.SqlServer.Management.Smo.RepairType : Enum {
    public int value__;
    public static RepairType None;
    public static RepairType Fast;
    public static RepairType Rebuild;
    public static RepairType AllowDataLoss;
}
[EvaluationModeAttribute("4")]
[PhysicalFacetAttribute]
[SfcElementAttribute("16")]
public class Microsoft.SqlServer.Management.Smo.ResourceGovernor : SqlSmoObject {
    private ResourcePoolCollection m_ResourcePools;
    private ExternalResourcePoolCollection m_ExternalResourcePools;
    internal object oldEnabledValue;
    [SfcObjectAttribute("1")]
public Server Parent { get; internal set; }
    [SfcObjectAttribute("0", "0", "Microsoft.SqlServer.Management.Smo.ResourcePool")]
public ResourcePoolCollection ResourcePools { get; }
    [SfcObjectAttribute("0", "0", "Microsoft.SqlServer.Management.Smo.ExternalResourcePool")]
public ExternalResourcePoolCollection ExternalResourcePools { get; }
    public static string UrnSuffix { get; }
    private bool Microsoft.SqlServer.Management.Sdk.Sfc.ISfcSupportsDesignMode.IsDesignMode { get; }
    [SfcPropertyAttribute("1024")]
public string ClassifierFunction { get; public set; }
    [SfcPropertyAttribute("1024")]
public bool Enabled { get; public set; }
    [SfcPropertyAttribute("1024")]
public int MaxOutstandingIOPerVolume { get; public set; }
    [SfcPropertyAttribute("1024", "false")]
public bool ReconfigurePending { get; }
    internal ResourceGovernor(Server parentsrv, ObjectKeyBase key, SqlSmoState state);
    public Server get_Parent();
    internal void set_Parent(Server value);
    public ResourcePoolCollection get_ResourcePools();
    public ExternalResourcePoolCollection get_ExternalResourcePools();
    internal virtual void ValidateProperty(Property prop, object value);
    public sealed virtual void Alter();
    public sealed virtual StringCollection Script();
    public sealed virtual StringCollection Script(ScriptingOptions scriptingOptions);
    protected sealed virtual void GetUrnRecursive(StringBuilder urnbuilder, UrnIdOption idOption);
    internal virtual void ScriptCreate(StringCollection queries, ScriptingPreferences sp);
    internal virtual void ScriptAlter(StringCollection queries, ScriptingPreferences sp);
    private void ScriptProperties(StringCollection queries, ScriptingPreferences sp);
    private bool HasEnabledPropertyChanged(bool newValue);
    public static string get_UrnSuffix();
    private sealed virtual override bool Microsoft.SqlServer.Management.Sdk.Sfc.ISfcSupportsDesignMode.get_IsDesignMode();
    internal virtual SqlPropertyMetadataProvider GetPropertyMetadataProvider();
    public string get_ClassifierFunction();
    public void set_ClassifierFunction(string value);
    public bool get_Enabled();
    public void set_Enabled(bool value);
    public int get_MaxOutstandingIOPerVolume();
    public void set_MaxOutstandingIOPerVolume(int value);
    public bool get_ReconfigurePending();
    internal virtual object GetPropertyDefaultValue(string propname);
}
[StateChangeEventAttribute("CREATE_RESOURCE_POOL", "RESOURCEPOOL", "RESOURCE POOL")]
[StateChangeEventAttribute("ALTER_RESOURCE_POOL", "RESOURCEPOOL", "RESOURCE POOL")]
[EvaluationModeAttribute("7")]
[PhysicalFacetAttribute]
[SfcElementAttribute("16")]
public class Microsoft.SqlServer.Management.Smo.ResourcePool : ScriptNameObjectBase {
    private WorkloadGroupCollection m_WorkloadGroups;
    private ResourcePoolAffinityInfo affinityInfo;
    [SfcObjectAttribute("0", "0", "Microsoft.SqlServer.Management.Smo.WorkloadGroup")]
public WorkloadGroupCollection WorkloadGroups { get; }
    [SfcKeyAttribute("0")]
[SfcPropertyAttribute("1280")]
public string Name { get; public set; }
    [SfcObjectAttribute("2", "0")]
public ResourcePoolAffinityInfo ResourcePoolAffinityInfo { get; }
    public static string UrnSuffix { get; }
    [SfcObjectAttribute("1")]
public ResourceGovernor Parent { get; public set; }
    private bool Microsoft.SqlServer.Management.Sdk.Sfc.ISfcSupportsDesignMode.IsDesignMode { get; }
    [SfcPropertyAttribute("1024")]
public int CapCpuPercentage { get; public set; }
    [SfcPropertyAttribute("1024")]
public int ID { get; }
    [SfcPropertyAttribute("1024")]
public bool IsSystemObject { get; }
    [SfcPropertyAttribute("1024")]
public int MaximumCpuPercentage { get; public set; }
    [SfcPropertyAttribute("1024")]
public int MaximumIopsPerVolume { get; public set; }
    [SfcPropertyAttribute("1024")]
public int MaximumMemoryPercentage { get; public set; }
    [SfcPropertyAttribute("1024")]
public int MinimumCpuPercentage { get; public set; }
    [SfcPropertyAttribute("1024")]
public int MinimumIopsPerVolume { get; public set; }
    [SfcPropertyAttribute("1024")]
public int MinimumMemoryPercentage { get; public set; }
    internal ResourcePool(AbstractCollectionBase parentColl, ObjectKeyBase key, SqlSmoState state);
    public ResourcePool(ResourceGovernor resourceGovernor, string name);
    public WorkloadGroupCollection get_WorkloadGroups();
    public virtual string get_Name();
    public virtual void set_Name(string value);
    public ResourcePoolAffinityInfo get_ResourcePoolAffinityInfo();
    public sealed virtual void Create();
    public sealed virtual void Drop();
    public sealed virtual void DropIfExists();
    public sealed virtual void Alter();
    public sealed virtual StringCollection Script();
    public sealed virtual StringCollection Script(ScriptingOptions scriptingOptions);
    internal virtual void ScriptCreate(StringCollection queries, ScriptingPreferences sp);
    internal virtual void ScriptAlter(StringCollection queries, ScriptingPreferences sp);
    internal virtual void ScriptDrop(StringCollection queries, ScriptingPreferences sp);
    protected virtual void TouchImpl();
    protected virtual void MarkDropped();
    public virtual void Refresh();
    private void GetAllParams(StringBuilder sb, ScriptingPreferences sp, Int32& count);
    public static string get_UrnSuffix();
    public ResourceGovernor get_Parent();
    public void set_Parent(ResourceGovernor value);
    private sealed virtual override bool Microsoft.SqlServer.Management.Sdk.Sfc.ISfcSupportsDesignMode.get_IsDesignMode();
    internal virtual SqlPropertyMetadataProvider GetPropertyMetadataProvider();
    public int get_CapCpuPercentage();
    public void set_CapCpuPercentage(int value);
    public int get_ID();
    public bool get_IsSystemObject();
    public int get_MaximumCpuPercentage();
    public void set_MaximumCpuPercentage(int value);
    public int get_MaximumIopsPerVolume();
    public void set_MaximumIopsPerVolume(int value);
    public int get_MaximumMemoryPercentage();
    public void set_MaximumMemoryPercentage(int value);
    public int get_MinimumCpuPercentage();
    public void set_MinimumCpuPercentage(int value);
    public int get_MinimumIopsPerVolume();
    public void set_MinimumIopsPerVolume(int value);
    public int get_MinimumMemoryPercentage();
    public void set_MinimumMemoryPercentage(int value);
}
public class Microsoft.SqlServer.Management.Smo.ResourcePoolAffinityInfo : AffinityInfoBase {
    internal ResourcePool resourcePool;
    private SchedulerCollection schedulerCollection;
    private DataTable schedulerTable;
    [SfcObjectAttribute("1")]
public ResourcePool Parent { get; }
    internal SqlSmoObject SmoParent { get; }
    public static string UrnSuffix { get; }
    public SchedulerCollection Schedulers { get; }
    internal ResourcePoolAffinityInfo(ResourcePool parent);
    public ResourcePool get_Parent();
    internal virtual SqlSmoObject get_SmoParent();
    public static string get_UrnSuffix();
    public SchedulerCollection get_Schedulers();
    public virtual void Refresh();
    internal virtual void PopulateDataTable();
    internal void SetSchedulerValues();
    internal void SetNumaValues();
    internal virtual StringCollection DoAlter(ScriptingPreferences sp);
    internal StringCollection DoAlterInternal(ScriptingPreferences sp);
}
[DefaultMemberAttribute("Item")]
public class Microsoft.SqlServer.Management.Smo.ResourcePoolCollection : SimpleObjectCollectionBase {
    public ResourceGovernor Parent { get; }
    public ResourcePool Item { get; }
    public ResourcePool Item { get; }
    internal ResourcePoolCollection(SqlSmoObject parentInstance);
    public ResourceGovernor get_Parent();
    public ResourcePool get_Item(int index);
    public ResourcePool get_Item(string name);
    public void CopyTo(ResourcePool[] array, int index);
    public ResourcePool ItemById(int id);
    protected virtual Type GetCollectionElementType();
    internal virtual SqlSmoObject GetCollectionElementInstance(ObjectKeyBase key, SqlSmoState state);
    public void Add(ResourcePool resourcePool);
    internal SqlSmoObject GetObjectByName(string name);
    internal virtual ObjectKeyBase CreateKeyFromUrn(Urn urn);
}
[SfcElementAttribute("48")]
public class Microsoft.SqlServer.Management.Smo.ResumableIndex : NamedSmoObject {
    private int resumableMaxDuration;
    private int lowPriorityMaxDuration;
    private AbortAfterWait lowPriorityAbortAfterWait;
    [SfcPropertyAttribute("3072")]
public int ResumableMaxDuration { get; public set; }
    [SfcPropertyAttribute("3072")]
public int LowPriorityMaxDuration { get; public set; }
    [SfcPropertyAttribute("3072")]
public AbortAfterWait LowPriorityAbortAfterWait { get; public set; }
    public static string UrnSuffix { get; }
    [SfcObjectAttribute("1")]
[SfcParentAttribute("Table")]
[SfcParentAttribute("View")]
public SqlSmoObject Parent { get; }
    [SfcPropertyAttribute("3072")]
public int ID { get; }
    [SfcPropertyAttribute("3072")]
public DateTime LastPauseTime { get; }
    [SfcPropertyAttribute("3072")]
public short MaxDOP { get; public set; }
    [SfcPropertyAttribute("3072")]
public long PageCount { get; }
    [SfcPropertyAttribute("3072")]
public int PartitionNumber { get; }
    [SfcPropertyAttribute("3072")]
public double PercentComplete { get; }
    [SfcPropertyAttribute("3072")]
public ResumableOperationStateType ResumableOperationState { get; }
    [SfcPropertyAttribute("3072")]
public string SqlText { get; }
    [SfcPropertyAttribute("3072")]
public DateTime StartTime { get; }
    [SfcPropertyAttribute("3072")]
public int TotalExecutionTime { get; }
    internal ResumableIndex(AbstractCollectionBase parentColl, ObjectKeyBase key, SqlSmoState state);
    public void Abort();
    public void Pause();
    public void Resume();
    public int get_ResumableMaxDuration();
    public void set_ResumableMaxDuration(int value);
    public int get_LowPriorityMaxDuration();
    public void set_LowPriorityMaxDuration(int value);
    public AbortAfterWait get_LowPriorityAbortAfterWait();
    public void set_LowPriorityAbortAfterWait(AbortAfterWait value);
    public static string get_UrnSuffix();
    private void PauseOrAbort(bool isAbort);
    public SqlSmoObject get_Parent();
    internal virtual SqlPropertyMetadataProvider GetPropertyMetadataProvider();
    public int get_ID();
    public DateTime get_LastPauseTime();
    public short get_MaxDOP();
    public void set_MaxDOP(short value);
    public long get_PageCount();
    public int get_PartitionNumber();
    public double get_PercentComplete();
    public ResumableOperationStateType get_ResumableOperationState();
    public string get_SqlText();
    public DateTime get_StartTime();
    public int get_TotalExecutionTime();
}
[DefaultMemberAttribute("Item")]
public class Microsoft.SqlServer.Management.Smo.ResumableIndexCollection : SimpleObjectCollectionBase {
    public SqlSmoObject Parent { get; }
    public ResumableIndex Item { get; }
    public ResumableIndex Item { get; }
    internal ResumableIndexCollection(SqlSmoObject parentInstance);
    public SqlSmoObject get_Parent();
    public ResumableIndex get_Item(int index);
    public ResumableIndex get_Item(string name);
    public void CopyTo(ResumableIndex[] array, int index);
    public ResumableIndex ItemById(int id);
    protected virtual Type GetCollectionElementType();
    internal virtual SqlSmoObject GetCollectionElementInstance(ObjectKeyBase key, SqlSmoState state);
    public void Add(ResumableIndex resumableIndex);
    internal SqlSmoObject GetObjectByName(string name);
    internal virtual ObjectKeyBase CreateKeyFromUrn(Urn urn);
}
internal class Microsoft.SqlServer.Management.Smo.RetryRequestedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private Urn <Urn>k__BackingField;
    [CompilerGeneratedAttribute]
private ScriptingPreferences <ScriptingPreferences>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShouldRetry>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PreText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PostText>k__BackingField;
    public Urn Urn { get; private set; }
    public ScriptingPreferences ScriptingPreferences { get; private set; }
    public bool ShouldRetry { get; public set; }
    public string PreText { get; public set; }
    public string PostText { get; public set; }
    public RetryRequestedEventArgs(Urn urn, ScriptingPreferences scriptingPreferences);
    [CompilerGeneratedAttribute]
public Urn get_Urn();
    [CompilerGeneratedAttribute]
private void set_Urn(Urn value);
    [CompilerGeneratedAttribute]
public ScriptingPreferences get_ScriptingPreferences();
    [CompilerGeneratedAttribute]
private void set_ScriptingPreferences(ScriptingPreferences value);
    [CompilerGeneratedAttribute]
public bool get_ShouldRetry();
    [CompilerGeneratedAttribute]
public void set_ShouldRetry(bool value);
    [CompilerGeneratedAttribute]
public string get_PreText();
    [CompilerGeneratedAttribute]
public void set_PreText(string value);
    [CompilerGeneratedAttribute]
public string get_PostText();
    [CompilerGeneratedAttribute]
public void set_PostText(string value);
}
internal class Microsoft.SqlServer.Management.Smo.RetryRequestedEventHandler : MulticastDelegate {
    public RetryRequestedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, RetryRequestedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, RetryRequestedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[FlagsAttribute]
public enum Microsoft.SqlServer.Management.Smo.RoleTypes : Enum {
    public int value__;
    public static RoleTypes Database;
    public static RoleTypes Server;
    public static RoleTypes All;
}
[EvaluationModeAttribute("4")]
[PhysicalFacetAttribute("1")]
[SfcElementAttribute("48")]
public class Microsoft.SqlServer.Management.Smo.Rule : DefaultRuleBase {
    public static string UrnSuffix { get; }
    [SfcObjectAttribute("1")]
public Database Parent { get; public set; }
    private bool Microsoft.SqlServer.Management.Sdk.Sfc.ISfcSupportsDesignMode.IsDesignMode { get; }
    [SfcPropertyAttribute("3072")]
public DateTime CreateDate { get; }
    [SfcPropertyAttribute("3072")]
public DateTime DateLastModified { get; }
    [SfcPropertyAttribute("3072")]
public int ID { get; }
    internal Rule(AbstractCollectionBase parentColl, ObjectKeyBase key, SqlSmoState state);
    public Rule(Database database, string name);
    public Rule(Database database, string name, string schema);
    public void ChangeSchema(string newSchema);
    public static string get_UrnSuffix();
    internal static String[] GetScriptFields(Type parentType, ServerVersion version, DatabaseEngineType databaseEngineType, DatabaseEngineEdition databaseEngineEdition, bool defaultTextMode);
    public Database get_Parent();
    public void set_Parent(Database value);
    private sealed virtual override bool Microsoft.SqlServer.Management.Sdk.Sfc.ISfcSupportsDesignMode.get_IsDesignMode();
    internal virtual SqlPropertyMetadataProvider GetPropertyMetadataProvider();
    public DateTime get_CreateDate();
    public DateTime get_DateLastModified();
    public int get_ID();
    internal virtual String[] GetNonAlterableProperties();
}
[DefaultMemberAttribute("Item")]
public class Microsoft.SqlServer.Management.Smo.RuleCollection : SchemaCollectionBase {
    public Database Parent { get; }
    public Rule Item { get; }
    public Rule Item { get; }
    public Rule Item { get; }
    internal RuleCollection(SqlSmoObject parentInstance);
    public Database get_Parent();
    public Rule get_Item(int index);
    public Rule get_Item(string name);
    public Rule get_Item(string name, string schema);
    public void CopyTo(Rule[] array, int index);
    public Rule ItemById(int id);
    protected virtual Type GetCollectionElementType();
    internal virtual SqlSmoObject GetCollectionElementInstance(ObjectKeyBase key, SqlSmoState state);
    public void Add(Rule rule);
    internal SqlSmoObject GetObjectByName(string name);
}
internal class Microsoft.SqlServer.Management.Smo.ScheduleObjectComparer : ObjectComparerBase {
    internal ScheduleObjectComparer(IComparer stringComparer);
    public virtual int Compare(object obj1, object obj2);
}
internal class Microsoft.SqlServer.Management.Smo.ScheduleObjectKey : SimpleObjectKey {
    private int id;
    internal static StringCollection schemaFields;
    public int ID { get; public set; }
    public string UrnFilter { get; }
    public bool IsNull { get; }
    public ScheduleObjectKey(string name, int id);
    private static ScheduleObjectKey();
    public int get_ID();
    public void set_ID(int value);
    public virtual string get_UrnFilter();
    public virtual string ToString();
    public virtual StringCollection GetFieldNames();
    public virtual ObjectKeyBase Clone();
    internal virtual void Validate(Type objectType);
    public virtual bool get_IsNull();
    public virtual ObjectComparerBase GetComparer(IComparer stringComparer);
}
public class Microsoft.SqlServer.Management.Smo.Scheduler : object {
    private int id;
    private Cpu cpu;
    private bool affinityMask;
    private SchedulerCollection parent;
    public int Id { get; }
    public Cpu Cpu { get; }
    public bool AffinityMask { get; public set; }
    internal Scheduler(int id, Cpu cpu, bool affinityMask, SchedulerCollection parent);
    public int get_Id();
    public Cpu get_Cpu();
    public bool get_AffinityMask();
    public void set_AffinityMask(bool value);
}
[DefaultMemberAttribute("Item")]
public class Microsoft.SqlServer.Management.Smo.SchedulerCollection : object {
    private AffinityInfoBase parent;
    private NumaCPUCollectionBase`1<Scheduler> schedulerCollection;
    internal SortedList schedulerList;
    private ICollection iCol;
    internal bool setByUser;
    private Dictionary`2<int, Scheduler> schedulerCollectionFromId;
    private int maxSchedulerId;
    private int minSchedulerId;
    public int Count { get; }
    public bool IsSynchronized { get; }
    public object SyncRoot { get; }
    public Scheduler Item { get; }
    private Dictionary`2<int, Scheduler> SchedulerCollectionFromId { get; }
    private int MaxSchedulerId { get; }
    private int MinSchedulerId { get; }
    internal SchedulerCollection(AffinityInfoBase parent);
    public sealed virtual void CopyTo(Array array, int index);
    public void CopyTo(NumaNode[] array, int index);
    public sealed virtual IEnumerator GetEnumerator();
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsSynchronized();
    public sealed virtual object get_SyncRoot();
    public Scheduler get_Item(int index);
    internal StringCollection AddSchedulerInDdl(StringBuilder sb);
    private Dictionary`2<int, Scheduler> get_SchedulerCollectionFromId();
    private int get_MaxSchedulerId();
    private int get_MinSchedulerId();
    public Scheduler GetElementAt(int position);
    public Scheduler GetByID(int SchedulernodeId);
    public void SetAffinityToRange(int startIndex, int endIndex, bool affinityMask);
}
[StateChangeEventAttribute("CREATE_SCHEMA", "SCHEMA")]
[StateChangeEventAttribute("ALTER_SCHEMA", "SCHEMA")]
[StateChangeEventAttribute("ALTER_AUTHORIZATION_DATABASE", "SCHEMA")]
[EvaluationModeAttribute("7")]
[PhysicalFacetAttribute]
[SfcElementAttribute("48")]
public class Microsoft.SqlServer.Management.Smo.Schema : ScriptNameObjectBase {
    private SchemaEvents events;
    public static string UrnSuffix { get; }
    [SfcKeyAttribute("0")]
[SfcPropertyAttribute("7424")]
public string Name { get; public set; }
    [SfcObjectAttribute("1", "0", "Microsoft.SqlServer.Management.Smo.ExtendedProperty")]
public ExtendedPropertyCollection ExtendedProperties { get; }
    [SfcObjectAttribute("1", "32")]
public Database Parent { get; public set; }
    internal UserPermissionCollection Permissions { get; }
    private bool Microsoft.SqlServer.Management.Sdk.Sfc.ISfcSupportsDesignMode.IsDesignMode { get; }
    [SfcPropertyAttribute("3072")]
public int ID { get; }
    [SfcPropertyAttribute("3072")]
public bool IsSystemObject { get; }
    [SfcPropertyAttribute("7168")]
[SfcReferenceAttribute("Microsoft.SqlServer.Management.Smo.User", "Server[@Name = '{0}']/Database[@Name = '{1}']/User[@Name = '{2}']", "Mono.Cecil.CustomAttributeArgument[]")]
[SfcReferenceAttribute("Microsoft.SqlServer.Management.Smo.DatabaseRole", "Server[@Name = '{0}']/Database[@Name = '{1}']/Role[@Name = '{2}']", "Mono.Cecil.CustomAttributeArgument[]")]
[SfcReferenceAttribute("Microsoft.SqlServer.Management.Smo.ApplicationRole", "Server[@Name = '{0}']/Database[@Name = '{1}']/ApplicationRole[@Name = '{2}']", "Mono.Cecil.CustomAttributeArgument[]")]
[CLSCompliantAttribute("False")]
public string Owner { get; public set; }
    public SchemaEvents Events { get; }
    internal Schema(AbstractCollectionBase parentColl, ObjectKeyBase key, SqlSmoState state);
    public Schema(Database database, string name);
    public static string get_UrnSuffix();
    public virtual string get_Name();
    public virtual void set_Name(string value);
    public sealed virtual ExtendedPropertyCollection get_ExtendedProperties();
    public sealed virtual void Drop();
    public sealed virtual void DropIfExists();
    internal virtual void ScriptDrop(StringCollection dropQuery, ScriptingPreferences sp);
    public sealed virtual void Create();
    internal virtual void ScriptCreate(StringCollection createQuery, ScriptingPreferences sp);
    public sealed virtual StringCollection Script();
    public sealed virtual StringCollection Script(ScriptingOptions scriptingOptions);
    public sealed virtual void Alter();
    internal virtual void ScriptAlter(StringCollection query, ScriptingPreferences sp);
    internal virtual PropagateInfo[] GetPropagateInfo(PropagateAction action);
    internal static String[] GetScriptFields(Type parentType, ServerVersion version, DatabaseEngineType databaseEngineType, DatabaseEngineEdition databaseEngineEdition, bool defaultTextMode);
    public Database get_Parent();
    public void set_Parent(Database value);
    internal virtual UserPermissionCollection get_Permissions();
    private sealed virtual override bool Microsoft.SqlServer.Management.Sdk.Sfc.ISfcSupportsDesignMode.get_IsDesignMode();
    internal virtual SqlPropertyMetadataProvider GetPropertyMetadataProvider();
    public int get_ID();
    public bool get_IsSystemObject();
    public string get_Owner();
    public void set_Owner(string value);
    public sealed virtual void Deny(ObjectPermissionSet permission, String[] granteeNames);
    public sealed virtual void Deny(ObjectPermissionSet permission, String[] granteeNames, bool cascade);
    public sealed virtual void Grant(ObjectPermissionSet permission, String[] granteeNames);
    public sealed virtual void Grant(ObjectPermissionSet permission, String[] granteeNames, bool grantGrant);
    public sealed virtual void Grant(ObjectPermissionSet permission, String[] granteeNames, bool grantGrant, string asRole);
    public sealed virtual void Revoke(ObjectPermissionSet permission, String[] granteeNames);
    public sealed virtual void Revoke(ObjectPermissionSet permission, String[] granteeNames, bool revokeGrant, bool cascade);
    public void Revoke(ObjectPermissionSet permission, String[] granteeNames, bool revokeGrant, bool cascade, string asRole);
    public sealed virtual void Deny(ObjectPermissionSet permission, string granteeName);
    public sealed virtual void Deny(ObjectPermissionSet permission, string granteeName, bool cascade);
    public sealed virtual void Grant(ObjectPermissionSet permission, string granteeName);
    public sealed virtual void Grant(ObjectPermissionSet permission, string granteeName, bool grantGrant);
    public sealed virtual void Grant(ObjectPermissionSet permission, string granteeName, bool grantGrant, string asRole);
    public sealed virtual void Revoke(ObjectPermissionSet permission, string granteeName);
    public void Revoke(ObjectPermissionSet permission, string granteeName, bool revokeGrant, bool cascade);
    public sealed virtual void Revoke(ObjectPermissionSet permission, string granteeName, bool revokeGrant, bool cascade, string asRole);
    public sealed virtual ObjectPermissionInfo[] EnumObjectPermissions();
    public sealed virtual ObjectPermissionInfo[] EnumObjectPermissions(string granteeName);
    public sealed virtual ObjectPermissionInfo[] EnumObjectPermissions(ObjectPermissionSet permissions);
    public sealed virtual ObjectPermissionInfo[] EnumObjectPermissions(string granteeName, ObjectPermissionSet permissions);
    public Urn[] EnumOwnedObjects();
    public SchemaEvents get_Events();
}
[DefaultMemberAttribute("Item")]
public class Microsoft.SqlServer.Management.Smo.SchemaCollection : SimpleObjectCollectionBase {
    public Database Parent { get; }
    public Schema Item { get; }
    public Schema Item { get; }
    internal SchemaCollection(SqlSmoObject parentInstance);
    public Database get_Parent();
    public Schema get_Item(int index);
    public Schema get_Item(string name);
    public void CopyTo(Schema[] array, int index);
    public Schema ItemById(int id);
    protected virtual Type GetCollectionElementType();
    internal virtual SqlSmoObject GetCollectionElementInstance(ObjectKeyBase key, SqlSmoState state);
    public void Add(Schema schema);
    internal SqlSmoObject GetObjectByName(string name);
    internal virtual ObjectKeyBase CreateKeyFromUrn(Urn urn);
}
public class Microsoft.SqlServer.Management.Smo.SchemaCollectionBase : SortedListCollectionBase {
    internal SchemaCollectionBase(SqlSmoObject parent);
    protected virtual void InitInnerCollection();
    internal void RemoveObject(string name, string schema);
    public bool Contains(string name);
    public bool Contains(string name, string schema);
    internal virtual string GetDefaultSchema();
    internal virtual ObjectKeyBase CreateKeyFromUrn(Urn urn);
}
public class Microsoft.SqlServer.Management.Smo.SchemaCustomResolver : object {
    public static object Resolve(object instance, Object[] parameters);
    public static object ResolveUrn(object instance, Object[] parameters);
}
public class Microsoft.SqlServer.Management.Smo.SchemaEvents : object {
    private ObjectEventsWorker serverEventsWorker;
    private Schema parent;
    internal SchemaEvents(Schema parent);
    public ObjectEventSet GetEventSelection();
    public void SubscribeToEvents(ObjectEventSet events);
    public void SubscribeToEvents(ObjectEventSet events, ServerEventHandler eventHandler);
    public void UnsubscribeFromEvents(ObjectEventSet events);
    public void UnsubscribeAllEvents();
    public void StartEvents();
    public void StopEvents();
    public void add_ServerEvent(ServerEventHandler value);
    public void remove_ServerEvent(ServerEventHandler value);
    private void InitializeEvents();
}
internal class Microsoft.SqlServer.Management.Smo.SchemaObjectComparer : ObjectComparerBase {
    internal SchemaObjectComparer(IComparer stringComparer);
    public virtual int Compare(object obj1, object obj2);
}
internal class Microsoft.SqlServer.Management.Smo.SchemaObjectKey : SimpleObjectKey {
    private string schema;
    internal static StringCollection schemaFields;
    public string Schema { get; public set; }
    public string UrnFilter { get; }
    public bool IsNull { get; }
    public SchemaObjectKey(string name, string schema);
    private static SchemaObjectKey();
    public string get_Schema();
    public void set_Schema(string value);
    public virtual string get_UrnFilter();
    public virtual string ToString();
    public virtual string GetExceptionName();
    public virtual StringCollection GetFieldNames();
    public virtual ObjectKeyBase Clone();
    internal virtual void Validate(Type objectType);
    public virtual bool get_IsNull();
    public virtual ObjectComparerBase GetComparer(IComparer stringComparer);
}
[FlagsAttribute]
public enum Microsoft.SqlServer.Management.Smo.ScriptBehavior : Enum {
    public int value__;
    public static ScriptBehavior Create;
    public static ScriptBehavior Drop;
    public static ScriptBehavior DropAndCreate;
    public static ScriptBehavior CreateOrAlter;
}
internal abstract class Microsoft.SqlServer.Management.Smo.ScriptContainer : object {
    [CompilerGeneratedAttribute]
private ScriptFragment <CreateScript>k__BackingField;
    [CompilerGeneratedAttribute]
private ScriptFragment <DropScript>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DatabaseContext>k__BackingField;
    public ScriptFragment CreateScript { get; protected set; }
    public ScriptFragment DropScript { get; protected set; }
    public string DatabaseContext { get; protected set; }
    [CompilerGeneratedAttribute]
public ScriptFragment get_CreateScript();
    [CompilerGeneratedAttribute]
protected void set_CreateScript(ScriptFragment value);
    [CompilerGeneratedAttribute]
public ScriptFragment get_DropScript();
    [CompilerGeneratedAttribute]
protected void set_DropScript(ScriptFragment value);
    [CompilerGeneratedAttribute]
public string get_DatabaseContext();
    [CompilerGeneratedAttribute]
protected void set_DatabaseContext(string value);
}
internal class Microsoft.SqlServer.Management.Smo.ScriptContainerFactory : object {
    private Dictionary`2<Urn, ScriptContainer> scriptCollection;
    private ScriptingPreferences scriptingPreferences;
    private RetryRequestedEventHandler retry;
    private HashSet`1<UrnTypeKey> filteredTypes;
    public ScriptContainerFactory(ScriptingPreferences sp, HashSet`1<UrnTypeKey> filteredTypes, RetryRequestedEventHandler retryEvent);
    public void AddContainer(SqlSmoObject obj);
    public bool TryGetValue(Urn key, ScriptContainer& value);
}
public class Microsoft.SqlServer.Management.Smo.Scripter : DependencyWalker {
    private ProgressReportEventHandler scriptingProgress;
    private ScriptingErrorEventHandler scriptingError;
    private ScriptingOptions scriptingOptions;
    private bool prefetchObjects;
    public ScriptingOptions Options { get; public set; }
    public bool PrefetchObjects { get; public set; }
    public Scripter(Server svr);
    protected internal void Init();
    public void add_ScriptingProgress(ProgressReportEventHandler value);
    public void remove_ScriptingProgress(ProgressReportEventHandler value);
    public void add_ScriptingError(ScriptingErrorEventHandler value);
    public void remove_ScriptingError(ScriptingErrorEventHandler value);
    public ScriptingOptions get_Options();
    public void set_Options(ScriptingOptions value);
    internal ScriptingOptions GetOptions();
    public bool get_PrefetchObjects();
    public void set_PrefetchObjects(bool value);
    public StringCollection ScriptWithList(SqlSmoObject[] objects);
    public IEnumerable`1<string> EnumScriptWithList(SqlSmoObject[] objects);
    public StringCollection ScriptWithList(UrnCollection list);
    public IEnumerable`1<string> EnumScriptWithList(UrnCollection list);
    internal IEnumerable`1<string> ScriptWithList(UrnCollection list, SqlSmoObject[] objects);
    public StringCollection ScriptWithList(Urn[] urns);
    public IEnumerable`1<string> EnumScriptWithList(Urn[] urns);
    internal IEnumerable`1<string> ScriptWithList(Urn[] urns, SqlSmoObject[] objects);
    public StringCollection ScriptWithList(DependencyCollection depList);
    public IEnumerable`1<string> EnumScriptWithList(DependencyCollection depList);
    internal IEnumerable`1<string> ScriptWithList(DependencyCollection depList, SqlSmoObject[] objects);
    private IEnumerable`1<string> ScriptWithList(DependencyCollection depList, SqlSmoObject[] objects, bool discoveryRequired);
    private IEnumerable`1<string> ScriptWithListWorker(DependencyCollection depList, SqlSmoObject[] objects, bool discoveryRequired);
    private void scriptMaker_ObjectScripting(object sender, ObjectScriptingEventArgs e);
    private ISmoDependencyDiscoverer GetDiscoverer(Server server, ScriptingOptions so, bool discoveryRequired);
    private void WriteToFile(ScriptingOptions options, IEnumerable`1<string> queryEnumerable);
    private void CheckConflictingOptions();
    public StringCollection Script(SqlSmoObject[] objects);
    public IEnumerable`1<string> EnumScript(SqlSmoObject[] objects);
    public StringCollection Script(UrnCollection list);
    public IEnumerable`1<string> EnumScript(UrnCollection list);
    public StringCollection Script(Urn[] urns);
    public IEnumerable`1<string> EnumScript(Urn[] urns);
    internal IEnumerable`1<string> Script(Urn[] urns, SqlSmoObject[] objects);
    public static UrnCollection EnumDependencies(SqlSmoObject smoObject, DependencyType dependencyType);
    internal StringCollection Script(SqlSmoObject sqlSmoObject);
    internal IEnumerable`1<string> EnumScript(SqlSmoObject sqlSmoObject);
    private void RestoreOptions(bool originalWithDependencies, SqlServerVersion sqlServerVersion);
    private void StoreAndChangeOptions(SqlSmoObject sqlSmoObject, Boolean& originalWithDependencies, SqlServerVersion& sqlServerVersion);
}
internal enum Microsoft.SqlServer.Management.Smo.ScriptFlag : Enum {
    public int value__;
    public static ScriptFlag CREATE;
    public static ScriptFlag DROP;
}
internal class Microsoft.SqlServer.Management.Smo.ScriptFragment : object {
    private StringCollection script;
    private Exception ex;
    public StringCollection Script { get; }
    public ScriptFragment(StringCollection script);
    public ScriptFragment(Exception ex);
    public StringCollection get_Script();
}
internal class Microsoft.SqlServer.Management.Smo.ScriptGenerator : MulticastDelegate {
    public ScriptGenerator(object object, IntPtr method);
    public virtual void Invoke(StringCollection stringCollection, ScriptingPreferences sp);
    public virtual IAsyncResult BeginInvoke(StringCollection stringCollection, ScriptingPreferences sp, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class Microsoft.SqlServer.Management.Smo.ScriptingErrorEventArgs : EventArgs {
    private Urn current;
    private Exception innerException;
    public Urn Current { get; }
    public Exception InnerException { get; }
    internal ScriptingErrorEventArgs(Urn current, Exception innerException);
    public Urn get_Current();
    public Exception get_InnerException();
}
public class Microsoft.SqlServer.Management.Smo.ScriptingErrorEventHandler : MulticastDelegate {
    public ScriptingErrorEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, ScriptingErrorEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, ScriptingErrorEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class Microsoft.SqlServer.Management.Smo.ScriptingFilter : MulticastDelegate {
    public ScriptingFilter(object object, IntPtr method);
    public virtual bool Invoke(Urn urn);
    public virtual IAsyncResult BeginInvoke(Urn urn, AsyncCallback callback, object object);
    public virtual bool EndInvoke(IAsyncResult result);
}
[DefaultMemberAttribute("Item")]
public class Microsoft.SqlServer.Management.Smo.ScriptingOptions : object {
    private string m_sFileName;
    private Encoding m_encoding;
    private bool skipClusteredIndexes;
    private ScriptingPreferences scriptingPreferences;
    private int m_batchSize;
    private BitArray m_options;
    internal string NewLine { get; internal set; }
    public string FileName { get; public set; }
    public Encoding Encoding { get; public set; }
    public bool ScriptForCreateDrop { get; public set; }
    public bool ScriptForCreateOrAlter { get; public set; }
    public bool ScriptForAlter { get; public set; }
    internal bool SkipClusteredIndexes { get; internal set; }
    public bool DriWithNoCheck { get; public set; }
    public bool IncludeFullTextCatalogRootPath { get; public set; }
    public bool SpatialIndexes { get; public set; }
    public bool ColumnStoreIndexes { get; public set; }
    public int BatchSize { get; public set; }
    public bool ScriptDrops { get; public set; }
    internal SqlServerVersionInternal TargetServerVersionInternal { get; internal set; }
    public SqlServerVersion TargetServerVersion { get; public set; }
    public DatabaseEngineType TargetDatabaseEngineType { get; public set; }
    public DatabaseEngineEdition TargetDatabaseEngineEdition { get; public set; }
    public bool AnsiFile { get; public set; }
    public bool AppendToFile { get; public set; }
    public bool ToFileOnly { get; public set; }
    public bool SchemaQualify { get; public set; }
    public bool IncludeHeaders { get; public set; }
    public bool IncludeScriptingParametersHeader { get; public set; }
    public bool IncludeIfNotExists { get; public set; }
    public bool WithDependencies { get; public set; }
    public bool DriPrimaryKey { get; public set; }
    public bool DriForeignKeys { get; public set; }
    public bool DriUniqueKeys { get; public set; }
    public bool DriClustered { get; public set; }
    public bool DriNonClustered { get; public set; }
    public bool DriChecks { get; public set; }
    public bool DriDefaults { get; public set; }
    public bool Triggers { get; public set; }
    public bool Statistics { get; public set; }
    public bool ClusteredIndexes { get; public set; }
    public bool NonClusteredIndexes { get; public set; }
    public bool NoAssemblies { get; public set; }
    public bool PrimaryObject { get; public set; }
    public bool Default { get; public set; }
    public bool XmlIndexes { get; public set; }
    public bool FullTextCatalogs { get; public set; }
    public bool FullTextIndexes { get; public set; }
    public bool FullTextStopLists { get; public set; }
    public bool Indexes { get; public set; }
    public bool DriIndexes { get; public set; }
    public bool DriAllKeys { get; public set; }
    public bool DriAllConstraints { get; public set; }
    public bool DriAll { get; public set; }
    public bool Bindings { get; public set; }
    public bool NoFileGroup { get; public set; }
    public bool NoFileStream { get; public set; }
    public bool NoFileStreamColumn { get; public set; }
    public bool NoCollation { get; public set; }
    public bool ContinueScriptingOnError { get; public set; }
    public bool IncludeDatabaseRoleMemberships { get; public set; }
    public bool Permissions { get; public set; }
    public bool AllowSystemObjects { get; public set; }
    public bool NoIdentities { get; public set; }
    public bool ConvertUserDefinedDataTypesToBaseType { get; public set; }
    public bool TimestampToBinary { get; public set; }
    public bool AnsiPadding { get; public set; }
    public bool ExtendedProperties { get; public set; }
    public bool DdlHeaderOnly { get; public set; }
    public bool DdlBodyOnly { get; public set; }
    public bool NoViewColumns { get; public set; }
    public bool SchemaQualifyForeignKeysReferences { get; public set; }
    public bool AgentAlertJob { get; public set; }
    public bool AgentJobId { get; public set; }
    public bool AgentNotify { get; public set; }
    public bool LoginSid { get; public set; }
    public bool NoCommandTerminator { get; public set; }
    public bool NoIndexPartitioningSchemes { get; public set; }
    public bool NoTablePartitioningSchemes { get; public set; }
    public bool IncludeDatabaseContext { get; public set; }
    public bool NoXmlNamespaces { get; public set; }
    public bool DriIncludeSystemNames { get; public set; }
    public bool OptimizerData { get; public set; }
    public bool NoExecuteAs { get; public set; }
    public bool EnforceScriptingOptions { get; public set; }
    public bool NoMailProfileAccounts { get; public set; }
    public bool NoMailProfilePrincipals { get; public set; }
    public bool NoVardecimal { get; public set; }
    public bool ChangeTracking { get; public set; }
    public bool ScriptDataCompression { get; public set; }
    public bool ScriptXmlCompression { get; public set; }
    public bool ScriptSchema { get; public set; }
    public bool ScriptData { get; public set; }
    public bool ScriptBatchTerminator { get; public set; }
    public bool ScriptOwner { get; public set; }
    private bool Item { get; private set; }
    public ScriptingOptions(ScriptingOptions so);
    public ScriptingOptions(ScriptOption so);
    public ScriptingOptions(SqlSmoObject parent);
    internal ScriptingOptions(EnumScriptOptions[] options);
    private void InitializeOptionsAsFalse();
    private BitArray InitializeBitArray();
    private void Init();
    public ScriptingOptions Add(ScriptOption scriptOption);
    public ScriptingOptions Remove(ScriptOption scriptOption);
    public static ScriptingOptions op_Addition(ScriptingOptions options, ScriptOption scriptOption);
    public static ScriptingOptions Add(ScriptingOptions options, ScriptOption scriptOption);
    public static ScriptingOptions op_Subtraction(ScriptingOptions options, ScriptOption scriptOption);
    public static ScriptingOptions Subtract(ScriptingOptions options, ScriptOption scriptOption);
    public virtual string ToString();
    internal string get_NewLine();
    internal void set_NewLine(string value);
    public string get_FileName();
    public void set_FileName(string value);
    public Encoding get_Encoding();
    public void set_Encoding(Encoding value);
    public bool get_ScriptForCreateDrop();
    public void set_ScriptForCreateDrop(bool value);
    public bool get_ScriptForCreateOrAlter();
    public void set_ScriptForCreateOrAlter(bool value);
    public bool get_ScriptForAlter();
    public void set_ScriptForAlter(bool value);
    internal bool get_SkipClusteredIndexes();
    internal void set_SkipClusteredIndexes(bool value);
    public bool get_DriWithNoCheck();
    public void set_DriWithNoCheck(bool value);
    public bool get_IncludeFullTextCatalogRootPath();
    public void set_IncludeFullTextCatalogRootPath(bool value);
    public bool get_SpatialIndexes();
    public void set_SpatialIndexes(bool value);
    public bool get_ColumnStoreIndexes();
    public void set_ColumnStoreIndexes(bool value);
    public int get_BatchSize();
    public void set_BatchSize(int value);
    public bool get_ScriptDrops();
    public void set_ScriptDrops(bool value);
    internal SqlServerVersionInternal get_TargetServerVersionInternal();
    internal void set_TargetServerVersionInternal(SqlServerVersionInternal value);
    public SqlServerVersion get_TargetServerVersion();
    public void set_TargetServerVersion(SqlServerVersion value);
    public DatabaseEngineType get_TargetDatabaseEngineType();
    public void set_TargetDatabaseEngineType(DatabaseEngineType value);
    public DatabaseEngineEdition get_TargetDatabaseEngineEdition();
    public void set_TargetDatabaseEngineEdition(DatabaseEngineEdition value);
    public void SetTargetServerVersion(ServerVersion ver);
    internal static ServerVersion ConvertToServerVersion(SqlServerVersion ver);
    public void SetTargetDatabaseEngineType(DatabaseEngineType databaseEngineType);
    internal void SetTargetDatabaseEngineType(SqlSmoObject o);
    internal void SetTargetServerVersion(SqlSmoObject o);
    internal void SetTargetServerInfo(SqlSmoObject o);
    internal void SetTargetServerInfo(SqlSmoObject o, bool forced);
    public bool get_AnsiFile();
    public void set_AnsiFile(bool value);
    public bool get_AppendToFile();
    public void set_AppendToFile(bool value);
    public bool get_ToFileOnly();
    public void set_ToFileOnly(bool value);
    public bool get_SchemaQualify();
    public void set_SchemaQualify(bool value);
    public bool get_IncludeHeaders();
    public void set_IncludeHeaders(bool value);
    public bool get_IncludeScriptingParametersHeader();
    public void set_IncludeScriptingParametersHeader(bool value);
    public bool get_IncludeIfNotExists();
    public void set_IncludeIfNotExists(bool value);
    public bool get_WithDependencies();
    public void set_WithDependencies(bool value);
    public bool get_DriPrimaryKey();
    public void set_DriPrimaryKey(bool value);
    internal bool ScriptDriPrimaryKey();
    public bool get_DriForeignKeys();
    public void set_DriForeignKeys(bool value);
    internal bool ScriptDriForeignKeys();
    public bool get_DriUniqueKeys();
    public void set_DriUniqueKeys(bool value);
    internal bool ScriptDriUniqueKeys();
    public bool get_DriClustered();
    public void set_DriClustered(bool value);
    internal bool ScriptDriClustered();
    public bool get_DriNonClustered();
    public void set_DriNonClustered(bool value);
    internal bool ScriptDriNonClustered();
    public bool get_DriChecks();
    public void set_DriChecks(bool value);
    internal bool ScriptDriChecks();
    public bool get_DriDefaults();
    public void set_DriDefaults(bool value);
    internal bool ScriptDriDefaults();
    public bool get_Triggers();
    public void set_Triggers(bool value);
    public bool get_Statistics();
    public void set_Statistics(bool value);
    public bool get_ClusteredIndexes();
    public void set_ClusteredIndexes(bool value);
    internal bool ScriptClusteredIndexes();
    public bool get_NonClusteredIndexes();
    public void set_NonClusteredIndexes(bool value);
    internal bool ScriptNonClusteredIndexes();
    public bool get_NoAssemblies();
    public void set_NoAssemblies(bool value);
    public bool get_PrimaryObject();
    public void set_PrimaryObject(bool value);
    public bool get_Default();
    public void set_Default(bool value);
    public bool get_XmlIndexes();
    public void set_XmlIndexes(bool value);
    internal bool ScriptXmlIndexes();
    public bool get_FullTextCatalogs();
    public void set_FullTextCatalogs(bool value);
    public bool get_FullTextIndexes();
    public void set_FullTextIndexes(bool value);
    public bool get_FullTextStopLists();
    public void set_FullTextStopLists(bool value);
    public bool get_Indexes();
    public void set_Indexes(bool value);
    public bool get_DriIndexes();
    public void set_DriIndexes(bool value);
    public bool get_DriAllKeys();
    public void set_DriAllKeys(bool value);
    public bool get_DriAllConstraints();
    public void set_DriAllConstraints(bool value);
    public bool get_DriAll();
    public void set_DriAll(bool value);
    public bool get_Bindings();
    public void set_Bindings(bool value);
    public bool get_NoFileGroup();
    public void set_NoFileGroup(bool value);
    public bool get_NoFileStream();
    public void set_NoFileStream(bool value);
    public bool get_NoFileStreamColumn();
    public void set_NoFileStreamColumn(bool value);
    public bool get_NoCollation();
    public void set_NoCollation(bool value);
    public bool get_ContinueScriptingOnError();
    public void set_ContinueScriptingOnError(bool value);
    public bool get_IncludeDatabaseRoleMemberships();
    public void set_IncludeDatabaseRoleMemberships(bool value);
    public bool get_Permissions();
    public void set_Permissions(bool value);
    public bool get_AllowSystemObjects();
    public void set_AllowSystemObjects(bool value);
    public bool get_NoIdentities();
    public void set_NoIdentities(bool value);
    public bool get_ConvertUserDefinedDataTypesToBaseType();
    public void set_ConvertUserDefinedDataTypesToBaseType(bool value);
    public bool get_TimestampToBinary();
    public void set_TimestampToBinary(bool value);
    public bool get_AnsiPadding();
    public void set_AnsiPadding(bool value);
    public bool get_ExtendedProperties();
    public void set_ExtendedProperties(bool value);
    public bool get_DdlHeaderOnly();
    public void set_DdlHeaderOnly(bool value);
    public bool get_DdlBodyOnly();
    public void set_DdlBodyOnly(bool value);
    public bool get_NoViewColumns();
    public void set_NoViewColumns(bool value);
    public bool get_SchemaQualifyForeignKeysReferences();
    public void set_SchemaQualifyForeignKeysReferences(bool value);
    public bool get_AgentAlertJob();
    public void set_AgentAlertJob(bool value);
    public bool get_AgentJobId();
    public void set_AgentJobId(bool value);
    public bool get_AgentNotify();
    public void set_AgentNotify(bool value);
    public bool get_LoginSid();
    public void set_LoginSid(bool value);
    public bool get_NoCommandTerminator();
    public void set_NoCommandTerminator(bool value);
    public bool get_NoIndexPartitioningSchemes();
    public void set_NoIndexPartitioningSchemes(bool value);
    public bool get_NoTablePartitioningSchemes();
    public void set_NoTablePartitioningSchemes(bool value);
    public bool get_IncludeDatabaseContext();
    public void set_IncludeDatabaseContext(bool value);
    public bool get_NoXmlNamespaces();
    public void set_NoXmlNamespaces(bool value);
    public bool get_DriIncludeSystemNames();
    public void set_DriIncludeSystemNames(bool value);
    public bool get_OptimizerData();
    public void set_OptimizerData(bool value);
    public bool get_NoExecuteAs();
    public void set_NoExecuteAs(bool value);
    public bool get_EnforceScriptingOptions();
    public void set_EnforceScriptingOptions(bool value);
    public bool get_NoMailProfileAccounts();
    public void set_NoMailProfileAccounts(bool value);
    public bool get_NoMailProfilePrincipals();
    public void set_NoMailProfilePrincipals(bool value);
    public bool get_NoVardecimal();
    public void set_NoVardecimal(bool value);
    public bool get_ChangeTracking();
    public void set_ChangeTracking(bool value);
    public bool get_ScriptDataCompression();
    public void set_ScriptDataCompression(bool value);
    public bool get_ScriptXmlCompression();
    public void set_ScriptXmlCompression(bool value);
    public bool get_ScriptSchema();
    public void set_ScriptSchema(bool value);
    public bool get_ScriptData();
    public void set_ScriptData(bool value);
    public bool get_ScriptBatchTerminator();
    public void set_ScriptBatchTerminator(bool value);
    public bool get_ScriptOwner();
    public void set_ScriptOwner(bool value);
    private bool get_Item(EnumScriptOptions eso);
    private void set_Item(EnumScriptOptions eso, bool value);
    private void SetScriptingPreference(EnumScriptOptions eso, bool value);
    private bool GetScriptingPreference(EnumScriptOptions eso);
    public static SqlServerVersion ConvertVersion(Version version);
    public static SqlServerVersion ConvertToSqlServerVersion(ServerVersion serverVersion);
    public static SqlServerVersion ConvertToSqlServerVersion(int majorVersion, int minorVersion);
    public ScriptingPreferences GetScriptingPreferences();
    internal SmoUrnFilter GetSmoUrnFilterForDiscovery(Server srv);
    internal static SmoUrnFilter GetAllFilters(Server srv);
    internal SmoUrnFilter GetSmoUrnFilterForFiltering(Server srv);
    private void AddIndexFilters(SmoUrnFilter smoUrnFilter);
}
public class Microsoft.SqlServer.Management.Smo.ScriptingPreferences : object {
    [CompilerGeneratedAttribute]
private ScriptBehavior <Behavior>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ScriptForAlter>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ContinueOnScriptingError>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SystemObjects>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IgnoreDependencyError>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DependentObjects>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SfcChildren>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NewLine>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ScriptForCreateDrop>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ForDirectExecution>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SuppressDirtyCheck>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <VersionDirty>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DatabaseEngineTypeDirty>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DatabaseEngineEditionDirty>k__BackingField;
    private SqlServerVersionInternal m_eTargetServerVersion;
    private DatabaseEngineType m_eTargetDatabaseEngineType;
    private DatabaseEngineEdition m_eTargetDatabaseEngineEdition;
    [CompilerGeneratedAttribute]
private IncludeScriptPreferences <IncludeScripts>k__BackingField;
    [CompilerGeneratedAttribute]
private SecurityPreferences <Security>k__BackingField;
    [CompilerGeneratedAttribute]
private StoragePreferences <Storage>k__BackingField;
    [CompilerGeneratedAttribute]
private TablePreferences <Table>k__BackingField;
    [CompilerGeneratedAttribute]
private DataTypePreferences <DataType>k__BackingField;
    [CompilerGeneratedAttribute]
private DataPreferences <Data>k__BackingField;
    [CompilerGeneratedAttribute]
private OldScriptingOptions <OldOptions>k__BackingField;
    private AgentPreferences agentPreferences;
    private MailPreferences mailPreferences;
    public ScriptBehavior Behavior { get; public set; }
    public bool ScriptForAlter { get; public set; }
    internal bool ContinueOnScriptingError { get; internal set; }
    internal bool SystemObjects { get; internal set; }
    internal bool IgnoreDependencyError { get; internal set; }
    internal bool DependentObjects { get; internal set; }
    internal bool SfcChildren { get; internal set; }
    internal string NewLine { get; internal set; }
    internal bool ScriptForCreateDrop { get; internal set; }
    internal bool ForDirectExecution { get; internal set; }
    internal bool SuppressDirtyCheck { get; internal set; }
    internal bool VersionDirty { get; private set; }
    internal bool DatabaseEngineTypeDirty { get; private set; }
    internal bool DatabaseEngineEditionDirty { get; private set; }
    internal bool TargetVersionAndDatabaseEngineTypeDirty { get; }
    internal SqlServerVersionInternal TargetServerVersionInternal { get; internal set; }
    internal SqlServerVersion TargetServerVersion { get; internal set; }
    internal DatabaseEngineType TargetDatabaseEngineType { get; internal set; }
    internal DatabaseEngineEdition TargetDatabaseEngineEdition { get; internal set; }
    internal IncludeScriptPreferences IncludeScripts { get; private set; }
    internal SecurityPreferences Security { get; private set; }
    internal StoragePreferences Storage { get; private set; }
    internal TablePreferences Table { get; private set; }
    internal DataTypePreferences DataType { get; private set; }
    internal DataPreferences Data { get; private set; }
    internal OldScriptingOptions OldOptions { get; private set; }
    internal AgentPreferences Agent { get; }
    internal MailPreferences Mail { get; }
    internal ScriptingPreferences(SqlSmoObject Obj);
    [CompilerGeneratedAttribute]
public ScriptBehavior get_Behavior();
    [CompilerGeneratedAttribute]
public void set_Behavior(ScriptBehavior value);
    [CompilerGeneratedAttribute]
public bool get_ScriptForAlter();
    [CompilerGeneratedAttribute]
public void set_ScriptForAlter(bool value);
    [CompilerGeneratedAttribute]
internal bool get_ContinueOnScriptingError();
    [CompilerGeneratedAttribute]
internal void set_ContinueOnScriptingError(bool value);
    [CompilerGeneratedAttribute]
internal bool get_SystemObjects();
    [CompilerGeneratedAttribute]
internal void set_SystemObjects(bool value);
    [CompilerGeneratedAttribute]
internal bool get_IgnoreDependencyError();
    [CompilerGeneratedAttribute]
internal void set_IgnoreDependencyError(bool value);
    [CompilerGeneratedAttribute]
internal bool get_DependentObjects();
    [CompilerGeneratedAttribute]
internal void set_DependentObjects(bool value);
    [CompilerGeneratedAttribute]
internal bool get_SfcChildren();
    [CompilerGeneratedAttribute]
internal void set_SfcChildren(bool value);
    [CompilerGeneratedAttribute]
internal string get_NewLine();
    [CompilerGeneratedAttribute]
internal void set_NewLine(string value);
    [CompilerGeneratedAttribute]
internal bool get_ScriptForCreateDrop();
    [CompilerGeneratedAttribute]
internal void set_ScriptForCreateDrop(bool value);
    [CompilerGeneratedAttribute]
internal bool get_ForDirectExecution();
    [CompilerGeneratedAttribute]
internal void set_ForDirectExecution(bool value);
    [CompilerGeneratedAttribute]
internal bool get_SuppressDirtyCheck();
    [CompilerGeneratedAttribute]
internal void set_SuppressDirtyCheck(bool value);
    [CompilerGeneratedAttribute]
internal bool get_VersionDirty();
    [CompilerGeneratedAttribute]
private void set_VersionDirty(bool value);
    [CompilerGeneratedAttribute]
internal bool get_DatabaseEngineTypeDirty();
    [CompilerGeneratedAttribute]
private void set_DatabaseEngineTypeDirty(bool value);
    [CompilerGeneratedAttribute]
internal bool get_DatabaseEngineEditionDirty();
    [CompilerGeneratedAttribute]
private void set_DatabaseEngineEditionDirty(bool value);
    internal bool get_TargetVersionAndDatabaseEngineTypeDirty();
    internal SqlServerVersionInternal get_TargetServerVersionInternal();
    internal void set_TargetServerVersionInternal(SqlServerVersionInternal value);
    internal SqlServerVersion get_TargetServerVersion();
    internal void set_TargetServerVersion(SqlServerVersion value);
    internal DatabaseEngineType get_TargetDatabaseEngineType();
    internal void set_TargetDatabaseEngineType(DatabaseEngineType value);
    internal DatabaseEngineEdition get_TargetDatabaseEngineEdition();
    internal void set_TargetDatabaseEngineEdition(DatabaseEngineEdition value);
    internal void SetTargetServerVersion(ServerVersion ver);
    internal void SetTargetDatabaseEngineType(DatabaseEngineType databaseEngineType);
    internal void SetTargetDatabaseEngineEdition(DatabaseEngineEdition databaseEngineEdition);
    internal void SetTargetServerVersion(SqlSmoObject o);
    internal void SetTargetDatabaseEngineType(SqlSmoObject o);
    internal void SetTargetDatabaseEngineEdition(SqlSmoObject o);
    internal bool TargetEngineIsAzureStretchDb();
    internal bool TargetEngineIsAzureSqlDw();
    internal void SetTargetServerInfo(SqlSmoObject o);
    internal void SetTargetServerInfo(SqlSmoObject o, bool forced);
    [CompilerGeneratedAttribute]
internal IncludeScriptPreferences get_IncludeScripts();
    [CompilerGeneratedAttribute]
private void set_IncludeScripts(IncludeScriptPreferences value);
    [CompilerGeneratedAttribute]
internal SecurityPreferences get_Security();
    [CompilerGeneratedAttribute]
private void set_Security(SecurityPreferences value);
    [CompilerGeneratedAttribute]
internal StoragePreferences get_Storage();
    [CompilerGeneratedAttribute]
private void set_Storage(StoragePreferences value);
    [CompilerGeneratedAttribute]
internal TablePreferences get_Table();
    [CompilerGeneratedAttribute]
private void set_Table(TablePreferences value);
    [CompilerGeneratedAttribute]
internal DataTypePreferences get_DataType();
    [CompilerGeneratedAttribute]
private void set_DataType(DataTypePreferences value);
    [CompilerGeneratedAttribute]
internal DataPreferences get_Data();
    [CompilerGeneratedAttribute]
private void set_Data(DataPreferences value);
    [CompilerGeneratedAttribute]
internal OldScriptingOptions get_OldOptions();
    [CompilerGeneratedAttribute]
private void set_OldOptions(OldScriptingOptions value);
    internal AgentPreferences get_Agent();
    internal MailPreferences get_Mail();
    private void Init();
    internal object Clone();
}
internal class Microsoft.SqlServer.Management.Smo.ScriptingProgressEventArgs : EventArgs {
    private List`1<Urn> urnList;
    [CompilerGeneratedAttribute]
private ScriptingProgressStages <ProgressStage>k__BackingField;
    public IList`1<Urn> Urns { get; }
    public ScriptingProgressStages ProgressStage { get; private set; }
    internal ScriptingProgressEventArgs(ScriptingProgressStages progressStage, List`1<Urn> urnList);
    public IList`1<Urn> get_Urns();
    [CompilerGeneratedAttribute]
public ScriptingProgressStages get_ProgressStage();
    [CompilerGeneratedAttribute]
private void set_ProgressStage(ScriptingProgressStages value);
}
internal class Microsoft.SqlServer.Management.Smo.ScriptingProgressEventHandler : MulticastDelegate {
    public ScriptingProgressEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, ScriptingProgressEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, ScriptingProgressEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal enum Microsoft.SqlServer.Management.Smo.ScriptingProgressStages : Enum {
    public int value__;
    public static ScriptingProgressStages VerificationDone;
    public static ScriptingProgressStages DiscoveryDone;
    public static ScriptingProgressStages FilteringDone;
    public static ScriptingProgressStages OrderingDone;
    public static ScriptingProgressStages ScriptingCompleted;
}
public class Microsoft.SqlServer.Management.Smo.ScriptMaker : object {
    [CompilerGeneratedAttribute]
private Server <Server>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Prefetch>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DatabaseEngineEdition> <SourceDatabaseEngineEdition>k__BackingField;
    private IDatabasePrefetch currentDatabasePrefetch;
    private string currentlyScriptingDatabase;
    private HashSet`1<Urn> inputList;
    private SortedList`2<string, HashSet`1<Urn>> perDatabaseUrns;
    private SortedList`2<string, bool> prefetchableObjects;
    private bool multipleDatabases;
    [CompilerGeneratedAttribute]
private IDatabasePrefetch <DatabasePrefetch>k__BackingField;
    private ScriptingErrorEventHandler scriptingError;
    private int totalObjectsToScript;
    private HashSet`1<Urn> ObjectsToScript;
    private ObjectScriptingEventHandler objectScripting;
    private ScriptingProgressEventHandler scriptingProgress;
    private RetryRequestedEventArgs currentRetryArgs;
    private RetryRequestedEventHandler retry;
    [CompilerGeneratedAttribute]
private ScriptingPreferences <Preferences>k__BackingField;
    [CompilerGeneratedAttribute]
private ISmoFilter <Filter>k__BackingField;
    private ISmoScriptWriter writer;
    internal ISmoDependencyDiscoverer discoverer;
    private CreatingObjectDictionary creatingDictionary;
    private ScriptContainerFactory scriptContainerFactory;
    private static HashSet`1<string> scriptableTypes;
    public Server Server { get; public set; }
    public bool Prefetch { get; public set; }
    public Nullable`1<DatabaseEngineEdition> SourceDatabaseEngineEdition { get; public set; }
    internal IDatabasePrefetch DatabasePrefetch { get; internal set; }
    public ScriptingPreferences Preferences { get; public set; }
    internal ISmoFilter Filter { get; internal set; }
    public ISmoDependencyDiscoverer Discoverer { get; public set; }
    public ScriptMaker(Server server);
    public ScriptMaker(Server server, ScriptingOptions scriptingOptions);
    private static ScriptMaker();
    [CompilerGeneratedAttribute]
public Server get_Server();
    [CompilerGeneratedAttribute]
public void set_Server(Server value);
    [CompilerGeneratedAttribute]
public bool get_Prefetch();
    [CompilerGeneratedAttribute]
public void set_Prefetch(bool value);
    [CompilerGeneratedAttribute]
public Nullable`1<DatabaseEngineEdition> get_SourceDatabaseEngineEdition();
    [CompilerGeneratedAttribute]
public void set_SourceDatabaseEngineEdition(Nullable`1<DatabaseEngineEdition> value);
    [CompilerGeneratedAttribute]
internal IDatabasePrefetch get_DatabasePrefetch();
    [CompilerGeneratedAttribute]
internal void set_DatabasePrefetch(IDatabasePrefetch value);
    public void add_ScriptingError(ScriptingErrorEventHandler value);
    public void remove_ScriptingError(ScriptingErrorEventHandler value);
    internal void add_ObjectScripting(ObjectScriptingEventHandler value);
    internal void remove_ObjectScripting(ObjectScriptingEventHandler value);
    internal void add_ScriptingProgress(ScriptingProgressEventHandler value);
    internal void remove_ScriptingProgress(ScriptingProgressEventHandler value);
    internal void add_Retry(RetryRequestedEventHandler value);
    internal void remove_Retry(RetryRequestedEventHandler value);
    [CompilerGeneratedAttribute]
public ScriptingPreferences get_Preferences();
    [CompilerGeneratedAttribute]
public void set_Preferences(ScriptingPreferences value);
    [CompilerGeneratedAttribute]
internal ISmoFilter get_Filter();
    [CompilerGeneratedAttribute]
internal void set_Filter(ISmoFilter value);
    public ISmoDependencyDiscoverer get_Discoverer();
    public void set_Discoverer(ISmoDependencyDiscoverer value);
    private void Script(SqlSmoObject[] objects, ISmoScriptWriter writer);
    public StringCollection Script(SqlSmoObject[] objects);
    public void Script(Urn[] urns, ISmoScriptWriter writer);
    public StringCollection Script(Urn[] urns);
    internal void Script(UrnCollection list, ISmoScriptWriter writer);
    internal void Script(DependencyCollection depList, SqlSmoObject[] objects, ISmoScriptWriter writer);
    private void StoreObjects(SqlSmoObject[] objects);
    public StringCollection Script(UrnCollection list);
    internal StringCollection Script(SqlSmoObject obj);
    private void ScriptWorker(List`1<Urn> urns, ISmoScriptWriter writer);
    private void CleanUp();
    private void InitializeCurrentDatabasePrefetch();
    private void OnPrefetchBatchEvent(object sender, PrefetchBatchEventArgs e);
    private void DiscoverOrderScript(IEnumerable`1<Urn> urns);
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.Smo.ScriptMaker/<RemoveDuplicatesDiscovered>d__73")]
private IEnumerable`1<Urn> RemoveDuplicatesDiscovered(IEnumerable`1<Urn> discoveredUrns);
    private bool DuplicateUrn(Urn urn);
    private void ScriptUrns(List`1<Urn> orderedUrns);
    private void Verify(List`1<Urn> urns);
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.Smo.ScriptMaker/<SingleDatabaseUrns>d__77")]
private IEnumerable`1<IEnumerable`1<Urn>> SingleDatabaseUrns(IEnumerable`1<Urn> urns);
    private void BucketizeUrns(IEnumerable`1<Urn> urns, List`1<Urn> serverObjectList);
    private IDatabasePrefetch GetDatabasePrefetch(string databaseName);
    private HashSet`1<UrnTypeKey> GetFilteredTypes();
    private void OnScriptingProgress(ScriptingProgressStages scriptingProgressStages, IEnumerable`1<Urn> urns);
    private void SetupObjectScriptingProgress(List`1<Urn> orderedUrns);
    private SmoDependencyDiscoverer SetupDiscoverer();
    private void OnChildrenDiscovery(object sender, ChildrenDiscoveryEventArgs e);
    private bool AddIndexToTablePropagationList(Index index);
    private IEnumerable`1<Urn> FilterUrns(IEnumerable`1<Urn> discoveredObjects);
    private IEnumerable`1<Urn> Discover(IEnumerable`1<Urn> urns);
    private List`1<Urn> Order(IEnumerable`1<Urn> filteredObjects);
    private SmoDependencyOrderer SetupOrderer();
    private void VerifyInput(List`1<Urn> urns);
    private void ScriptCreateObjects(IEnumerable`1<Urn> urns);
    private void ScriptCreate(Urn urn, ScriptingPreferences sp, ObjectScriptingType& scriptType);
    private static ScriptingPreferences CloneScriptingPreferencesForSpecialUrns(ScriptingPreferences sp);
    private void ScriptDataStoredObject(Urn urn, ScriptingPreferences sp, ObjectScriptingType& scriptType, ScriptContainer scriptContainer);
    private void ScriptCreateStoredObject(Urn urn, ScriptingPreferences sp, ObjectScriptingType& scriptType, ScriptContainer scriptContainer);
    private void ScriptCreateObject(Urn urn, ScriptingPreferences sp, ObjectScriptingType& scriptType);
    private void ScriptCreateUnresolvedEntity(Urn urn, ObjectScriptingType& scriptType);
    private void ScriptCreateSpecialUrn(Urn urn, ScriptingPreferences sp, ObjectScriptingType& scriptType);
    private void ScriptDataToWriter(IEnumerable`1<string> dataScripts, Urn urn);
    internal static IEnumerable`1<string> SurroundWithRetryTexts(IEnumerable`1<string> dataScripts, RetryRequestedEventArgs retryRequestedEventArgs);
    private void ScriptObjectToWriterWithContext(StringCollection scriptCollection, ScriptingPreferences sp, SqlSmoObject obj);
    private void ScriptDatabaseContextToWriter(SqlSmoObject obj, ScriptingPreferences sp, bool isScriptingPermission);
    internal static string ScriptDatabaseContext(SqlSmoObject obj, bool isScriptingPermission);
    private void ScriptDropObjects(IEnumerable`1<Urn> urns);
    private void ScriptDrop(Urn urn, ScriptingPreferences sp, ObjectScriptingType& scriptType);
    private void ScriptDropStoredObject(Urn urn, ScriptingPreferences sp, ObjectScriptingType& scriptType, ScriptContainer scriptContainer);
    private void ScriptDropObject(Urn urn, ScriptingPreferences sp, ObjectScriptingType& scriptType);
    private void CheckCloudSupport(SqlSmoObject obj, ScriptingPreferences sp);
    private bool IsFiltered(SqlSmoObject obj, ScriptingPreferences sp);
    private void ScriptDropSpecialUrn(Urn urn, ScriptingPreferences sp, ObjectScriptingType& scriptType);
    private string ScriptDdlTriggerDisable(DdlTriggerBase ddlTrigger, ScriptingPreferences sp);
    private void ScriptAlterObjects(List`1<Urn> urns, bool isCreateOrAlter);
    private void ScriptObjectToWriter(StringCollection stringCollection, Urn obj);
    internal static void SurroundWithRetryTexts(StringCollection stringCollection, RetryRequestedEventArgs retryRequestedEventArgs);
    private bool ThrowException(Urn urn, Exception e);
    private bool IsSystemObject(SqlSmoObject obj);
    private bool Scriptable(Urn urn);
    private void CheckForConflictiongPreferences();
    [CompilerGeneratedAttribute]
private bool <VerifyInput>b__90_0(Urn p);
}
public class Microsoft.SqlServer.Management.Smo.ScriptNameObjectBase : NamedSmoObject {
    private string m_sScriptName;
    private bool m_textMode;
    private bool m_isTextModeInitialized;
    private int m_headerCutIndex;
    private string m_textHeader;
    private string m_textBody;
    private bool m_isTextDirty;
    internal string ScriptName { get; internal set; }
    internal ScriptNameObjectBase(AbstractCollectionBase parentColl, ObjectKeyBase key, SqlSmoState eState);
    internal ScriptNameObjectBase(ObjectKeyBase key, SqlSmoState eState);
    internal virtual string get_ScriptName();
    internal virtual void set_ScriptName(string value);
    protected void AutoGenerateName();
    protected void SetIsSystemNamed(bool flag);
    protected bool GetIsSystemNamed();
    internal virtual string GetName(ScriptingPreferences sp);
    internal void AddConstraintName(StringBuilder sb, ScriptingPreferences sp);
    internal bool ScriptConstraintWithName(ScriptingPreferences sp);
    internal virtual string GetScriptIncludeExists(ScriptingPreferences sp, string tableName, bool forCreate);
    internal void ConstraintScriptCreate(string scriptBody, StringCollection createQuery, ScriptingPreferences sp);
    internal void ConstraintScriptAlter(StringCollection alterQuery, ScriptingPreferences sp);
    protected void AppendWithOption(StringBuilder sb, string propName, string optionText, Boolean& needsComma);
    protected void AppendWithCommaText(StringBuilder sb, string optionText, Boolean& needsComma);
    protected void AppendCommaText(StringBuilder sb, string optionText, Boolean& needsComma, string beginWord);
    internal void ScriptAnsiQI(SqlSmoObject o, ScriptingPreferences sp, StringCollection queries, StringBuilder sb, Object& ansiNull, Object& qi, bool skipSetOptions);
    internal void ScriptInformativeHeaders(ScriptingPreferences sp, StringBuilder sb);
    internal bool AddScriptExecuteAs(StringBuilder sb, ScriptingPreferences sp, PropertyCollection col, Boolean& needsComma);
    internal bool AddScriptServerDdlExecuteAs(StringBuilder sb, ScriptingPreferences sp, PropertyCollection col, Boolean& needsComma);
    internal bool AddScriptDatabaseDdlExecuteAs(StringBuilder sb, ScriptingPreferences sp, PropertyCollection col, Boolean& needsComma);
    internal bool IsCreate(ScriptHeaderType scriptHeaderType);
    internal bool IsOrAlterSupported(ScriptingPreferences sp);
    protected void SetTextMode(bool textMode, SmoCollectionBase[] collList);
    protected bool GetTextMode();
    protected bool CheckTextModeSupport();
    internal void CheckTextModeAccess(string propName);
    private string ScriptDDLPartialInternal(ScriptDDLPartialOptions options);
    private int GetHeaderCutIndex(string text);
    private void ResetTextData();
    protected void ThrowIfTextIsDirtyForAlter();
    protected virtual void CleanObject();
    public virtual void Refresh();
    protected void SetTextHeader(string textHeader);
    private void SetTextHeaderInternal(string textHeader);
    protected void SetTextBody(string textBody);
    private void SetTextBodyInternal(string textBody);
    protected bool ForceTextModeOnTextBody();
    protected string GetTextBody();
    protected string GetTextBody(bool forScripting);
    protected string GetTextHeader(bool forAlter);
    protected string GetTextHeader(ScriptHeaderType scriptHeaderType);
    protected void SetCollectionTextMode(bool newTextModeValue, SmoCollectionBase coll);
    protected void SwitchTextMode(bool newTextModeValue, SmoCollectionBase[] collList);
    internal static void Validate_set_TextObjectDDLProperty(Property prop, object newValue);
    internal static void Validate_set_ChildTextObjectDDLProperty(Property prop, object newValue);
    private bool ShouldScriptForNonCreate(ScriptHeaderType scriptHeaderType);
    private string ModifyTextForAlter(string text, int indexCreate);
    private string ModifyTextForCreateOrAlter(string text, int indexCreate);
    protected bool GetIsTextDirty();
    protected virtual bool IsObjectDirty();
    internal string GetTextForScript(ScriptingPreferences sp, String[] expectedObjectTypes, bool forceCheckNameAndManipulateIfRequired, ScriptHeaderType scriptHeaderType);
    protected virtual bool CheckObjectDirty();
    private void CheckObjectSupportability(DdlTextParserHeaderInfo headerInfo, ScriptingPreferences sp);
    private string BuildText(ScriptingPreferences sp);
    protected virtual string GetBraketNameForText();
    internal void CheckNameInTextCorrectness(string expectedName, string expectedSchema, string foundName, string foundSchema, string foundProcedureNumber);
    protected void CheckTextCorrectness(string ddlText, bool enforceCreate, bool checkName, String[] expectedObjectTypes, DdlTextParserHeaderInfo& headerInfo);
    protected void CheckTextCorrectness(string ddlText, bool enforceCreate, bool checkName, bool isOrAlterSupported, String[] expectedObjectTypes, DdlTextParserHeaderInfo& headerInfo);
    private string CheckAndManipulateText(string ddlText, String[] expectedObjectTypes, ScriptingPreferences sp, ScriptHeaderType scriptHeaderType);
    private bool IsSchemaNameSame(string schemaName);
    private void CheckAndManipulateName(String& ddlText, ScriptingPreferences sp, DdlTextParserHeaderInfo& headerInfo, bool forceScriptingName);
    private bool GetQuotedIdentifier();
    protected string GetTextProperty(string requestingProperty);
    internal string GetTextProperty(string requestingProperty, ScriptingPreferences sp);
    private string GetTextProperty(string requestingProperty, bool bThrowIfCreating);
    private string GetExecutionContextString(ServerDdlTriggerExecutionContext ec);
    private string GetExecutionContextString(DatabaseDdlTriggerExecutionContext ec);
    private string GetExecutionContextString(ExecutionContext ec);
    private string GetTextProperty(string requestingProperty, ScriptingPreferences sp, bool bThrowIfCreating);
    private string GetTextPropertyDesignMode(string requestingProperty, ScriptingPreferences sp, bool bThrowIfCreating);
}
public class Microsoft.SqlServer.Management.Smo.ScriptOption : object {
    private EnumScriptOptions m_value;
    internal EnumScriptOptions Value { get; }
    public static ScriptOption AppendToFile { get; }
    public static ScriptOption ToFileOnly { get; }
    public static ScriptOption SchemaQualify { get; }
    public static ScriptOption IncludeHeaders { get; }
    public static ScriptOption IncludeIfNotExists { get; }
    public static ScriptOption WithDependencies { get; }
    public static ScriptOption DriPrimaryKey { get; }
    public static ScriptOption DriForeignKeys { get; }
    public static ScriptOption DriUniqueKeys { get; }
    public static ScriptOption DriClustered { get; }
    public static ScriptOption DriNonClustered { get; }
    public static ScriptOption DriChecks { get; }
    public static ScriptOption DriDefaults { get; }
    public static ScriptOption Triggers { get; }
    public static ScriptOption Bindings { get; }
    public static ScriptOption NoFileGroup { get; }
    public static ScriptOption NoFileStream { get; }
    public static ScriptOption NoFileStreamColumn { get; }
    public static ScriptOption NoCollation { get; }
    public static ScriptOption ContinueScriptingOnError { get; }
    public static ScriptOption Permissions { get; }
    public static ScriptOption AllowSystemObjects { get; }
    public static ScriptOption NoIdentities { get; }
    public static ScriptOption ConvertUserDefinedDataTypesToBaseType { get; }
    public static ScriptOption TimestampToBinary { get; }
    public static ScriptOption AnsiPadding { get; }
    public static ScriptOption ExtendedProperties { get; }
    public static ScriptOption DdlHeaderOnly { get; }
    public static ScriptOption DdlBodyOnly { get; }
    public static ScriptOption NoViewColumns { get; }
    public static ScriptOption Statistics { get; }
    public static ScriptOption SchemaQualifyForeignKeysReferences { get; }
    public static ScriptOption ClusteredIndexes { get; }
    public static ScriptOption NonClusteredIndexes { get; }
    public static ScriptOption AnsiFile { get; }
    public static ScriptOption AgentAlertJob { get; }
    public static ScriptOption AgentJobId { get; }
    public static ScriptOption AgentNotify { get; }
    public static ScriptOption LoginSid { get; }
    public static ScriptOption NoCommandTerminator { get; }
    public static ScriptOption NoIndexPartitioningSchemes { get; }
    public static ScriptOption NoTablePartitioningSchemes { get; }
    public static ScriptOption IncludeDatabaseContext { get; }
    public static ScriptOption FullTextCatalogs { get; }
    public static ScriptOption FullTextStopLists { get; }
    public static ScriptOption FullTextIndexes { get; }
    public static ScriptOption NoXmlNamespaces { get; }
    public static ScriptOption NoAssemblies { get; }
    public static ScriptOption PrimaryObject { get; }
    public static ScriptOption DriIncludeSystemNames { get; }
    public static ScriptOption Default { get; }
    public static ScriptOption XmlIndexes { get; }
    public static ScriptOption OptimizerData { get; }
    public static ScriptOption NoExecuteAs { get; }
    public static ScriptOption EnforceScriptingOptions { get; }
    public static ScriptOption NoMailProfileAccounts { get; }
    public static ScriptOption NoMailProfilePrincipals { get; }
    public static ScriptOption DriWithNoCheck { get; }
    public static ScriptOption DriAllKeys { get; }
    public static ScriptOption Indexes { get; }
    public static ScriptOption DriIndexes { get; }
    public static ScriptOption DriAllConstraints { get; }
    public static ScriptOption DriAll { get; }
    public static ScriptOption NoVardecimal { get; }
    public static ScriptOption IncludeDatabaseRoleMemberships { get; }
    public static ScriptOption ChangeTracking { get; }
    public static ScriptOption ScriptOwner { get; }
    public static ScriptOption IncludeFullTextCatalogRootPath { get; }
    public static ScriptOption ScriptSchema { get; }
    public static ScriptOption ScriptData { get; }
    public static ScriptOption ScriptBatchTerminator { get; }
    public static ScriptOption ScriptDataCompression { get; }
    public static ScriptOption ScriptXmlCompression { get; }
    internal ScriptOption(EnumScriptOptions optionValue);
    internal EnumScriptOptions get_Value();
    public static ScriptingOptions op_Implicit(ScriptOption scriptOption);
    public static ScriptingOptions op_BitwiseOr(ScriptOption leftOption, ScriptOption rightOption);
    public static ScriptingOptions BitwiseOr(ScriptOption leftOption, ScriptOption rightOption);
    public static ScriptingOptions op_Addition(ScriptOption leftOption, ScriptOption rightOption);
    public static ScriptingOptions Add(ScriptOption leftOption, ScriptOption rightOption);
    public virtual string ToString();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static ScriptOption get_AppendToFile();
    public static ScriptOption get_ToFileOnly();
    public static ScriptOption get_SchemaQualify();
    public static ScriptOption get_IncludeHeaders();
    public static ScriptOption get_IncludeIfNotExists();
    public static ScriptOption get_WithDependencies();
    public static ScriptOption get_DriPrimaryKey();
    public static ScriptOption get_DriForeignKeys();
    public static ScriptOption get_DriUniqueKeys();
    public static ScriptOption get_DriClustered();
    public static ScriptOption get_DriNonClustered();
    public static ScriptOption get_DriChecks();
    public static ScriptOption get_DriDefaults();
    public static ScriptOption get_Triggers();
    public static ScriptOption get_Bindings();
    public static ScriptOption get_NoFileGroup();
    public static ScriptOption get_NoFileStream();
    public static ScriptOption get_NoFileStreamColumn();
    public static ScriptOption get_NoCollation();
    public static ScriptOption get_ContinueScriptingOnError();
    public static ScriptOption get_Permissions();
    public static ScriptOption get_AllowSystemObjects();
    public static ScriptOption get_NoIdentities();
    public static ScriptOption get_ConvertUserDefinedDataTypesToBaseType();
    public static ScriptOption get_TimestampToBinary();
    public static ScriptOption get_AnsiPadding();
    public static ScriptOption get_ExtendedProperties();
    public static ScriptOption get_DdlHeaderOnly();
    public static ScriptOption get_DdlBodyOnly();
    public static ScriptOption get_NoViewColumns();
    public static ScriptOption get_Statistics();
    public static ScriptOption get_SchemaQualifyForeignKeysReferences();
    public static ScriptOption get_ClusteredIndexes();
    public static ScriptOption get_NonClusteredIndexes();
    public static ScriptOption get_AnsiFile();
    public static ScriptOption get_AgentAlertJob();
    public static ScriptOption get_AgentJobId();
    public static ScriptOption get_AgentNotify();
    public static ScriptOption get_LoginSid();
    public static ScriptOption get_NoCommandTerminator();
    public static ScriptOption get_NoIndexPartitioningSchemes();
    public static ScriptOption get_NoTablePartitioningSchemes();
    public static ScriptOption get_IncludeDatabaseContext();
    public static ScriptOption get_FullTextCatalogs();
    public static ScriptOption get_FullTextStopLists();
    public static ScriptOption get_FullTextIndexes();
    public static ScriptOption get_NoXmlNamespaces();
    public static ScriptOption get_NoAssemblies();
    public static ScriptOption get_PrimaryObject();
    public static ScriptOption get_DriIncludeSystemNames();
    public static ScriptOption get_Default();
    public static ScriptOption get_XmlIndexes();
    public static ScriptOption get_OptimizerData();
    public static ScriptOption get_NoExecuteAs();
    public static ScriptOption get_EnforceScriptingOptions();
    public static ScriptOption get_NoMailProfileAccounts();
    public static ScriptOption get_NoMailProfilePrincipals();
    public static ScriptOption get_DriWithNoCheck();
    public static ScriptOption get_DriAllKeys();
    public static ScriptOption get_Indexes();
    public static ScriptOption get_DriIndexes();
    public static ScriptOption get_DriAllConstraints();
    public static ScriptOption get_DriAll();
    public static ScriptOption get_NoVardecimal();
    public static ScriptOption get_IncludeDatabaseRoleMemberships();
    public static ScriptOption get_ChangeTracking();
    public static ScriptOption get_ScriptOwner();
    public static ScriptOption get_IncludeFullTextCatalogRootPath();
    public static ScriptOption get_ScriptSchema();
    public static ScriptOption get_ScriptData();
    public static ScriptOption get_ScriptBatchTerminator();
    public static ScriptOption get_ScriptDataCompression();
    public static ScriptOption get_ScriptXmlCompression();
}
internal class Microsoft.SqlServer.Management.Smo.Scripts : object {
    public static string Priv_References;
    public static string Priv_Select;
    public static string Priv_Insert;
    public static string Priv_Delete;
    public static string Priv_Update;
    public static string Priv_Execute;
    public static string Priv_CreateDatabase;
    public static string Priv_CreateDefault;
    public static string Priv_CreateProcedure;
    public static string Priv_CreateRule;
    public static string Priv_CreateTable;
    public static string Priv_CreateView;
    public static string Priv_CreateFunction;
    public static string Priv_DumpTable;
    public static string Priv_CreateType;
    public static string Priv_Control;
    public static string Priv_ViewDefinition;
    public static string Priv_Alter;
    public static string Priv_Drop;
    public static string Priv_AllPrivs;
    public static string GRANT;
    public static string REVOKEGRANT;
    public static string GRANTGRANT;
    public static string REVOKE;
    public static string DENY;
    public static string ENABLE;
    public static string DISABLE;
    public static string USEDB;
    public static string USEMASTER;
    public static string RECOVERY_BULK;
    public static string RECOVERY_FULL;
    public static string RECOVERY_SIMPLE;
    public static string SP_ADDDBROLEMEMBER;
    public static string SP_DROPDBROLEMEMBER;
    public static string SHRINKFILE2;
    public static string SHRINKFILE3;
    public static string REG_WRITE_WRITE_PROP70;
    public static string REG_WRITE_WRITE_PROP;
    public static string REG_DELETE70;
    public static string REG_DELETE;
    public static string SRV_SET_OPTIONS80;
    public static string SRV_SET_OPTIONS90;
    public static string SP_CONTROLPLANGUIDE_NAME;
    public static string SP_CONTROLPLANGUIDE;
    public static string SP_CREATEPLANGUIDE;
    public static string INCLUDE_EXISTS_AUDIT;
    public static string INCLUDE_EXISTS_AUDIT_SPECIFICATION;
    public static string SP_RDA_REAUTHORIZE_DB;
    public static string DROP_DATABASEROLE_MEMBERS_80;
    public static string DROP_DATABASEROLE_MEMBERS_110;
    public static string DROP_DATABASEROLE_MEMBERS_90;
    public static string DROP_DATABASEROLE_MEMBERS_DW;
    public static string DROP_SERVER_ROLE_MEMBERS;
    public static string DECLARE_ROLE_MEMEBER;
    public static string IS_DBROLE_FIXED_OR_PUBLIC_90;
    public static string IS_SERVER_ROLE_FIXED_OR_PUBLIC;
    public static string INCLUDE_EXISTS_ROLE_MEMBERS90;
    public static string INCLUDE_EXISTS_ROLE_MEMBERS80;
    public static string INCLUDE_EXISTS_SERVER_ROLE_MEMBERS;
    public static string INCLUDE_EXISTS_TABLE80;
    public static string INCLUDE_EXISTS_TABLE90;
    public static string INCLUDE_EXISTS_VIEW90;
    public static string INCLUDE_EXISTS_VIEW80;
    public static string INCLUDE_EXISTS_PROCEDURE80;
    public static string INCLUDE_EXISTS_PROCEDURE90;
    public static string INCLUDE_EXISTS_NUMBERED_PROCEDURE80;
    public static string INCLUDE_EXISTS_NUMBERED_PROCEDURE90;
    public static string INCLUDE_EXISTS_TRIGGER80;
    public static string INCLUDE_EXISTS_TRIGGER90;
    public static string INCLUDE_EXISTS_RULE_DEFAULT80;
    public static string INCLUDE_EXISTS_RULE_DEFAULT90;
    public static string INCLUDE_EXISTS_FUNCTION80;
    public static string INCLUDE_EXISTS_FUNCTION90;
    public static string INCLUDE_EXISTS_UDDT80;
    public static string INCLUDE_EXISTS_UDDT90;
    public static string INCLUDE_EXISTS_USER80;
    public static string INCLUDE_EXISTS_USER90;
    public static string INCLUDE_EXISTS_STATISTIC90;
    public static string INCLUDE_EXISTS_STATISTIC80;
    public static string INCLUDE_EXISTS_LOGIN80;
    public static string INCLUDE_EXISTS_LOGIN90;
    public static string INCLUDE_EXISTS_APPROLE80;
    public static string INCLUDE_EXISTS_APPROLE90;
    public static string INCLUDE_EXISTS_DBROLE80;
    public static string INCLUDE_EXISTS_DBROLE90;
    public static string INCLUDE_EXISTS_SERVER_ROLE;
    public static string INCLUDE_EXISTS_CHECK80;
    public static string INCLUDE_EXISTS_CHECK90;
    public static string INCLUDE_EXISTS_FOREIGN_KEY80;
    public static string INCLUDE_EXISTS_FOREIGN_KEY90;
    public static string INCLUDE_EXISTS_SCHEMA90;
    public static string INCLUDE_EXISTS_DATABASE80;
    public static string INCLUDE_EXISTS_DATABASE90;
    public static string INCLUDE_IF_NOT_EXISTS_XPROCEDURE;
    public static string INCLUDE_EXISTS_UDT;
    public static string INCLUDE_EXISTS_ASSEMBLY;
    public static string INCLUDE_EXISTS_ASSEMBLY100;
    public static string INCLUDE_EXISTS_EXTERNAL_LIBRARY;
    public static string INCLUDE_EXISTS_UDA;
    public static string INCLUDE_EXISTS_FT_CATALOG;
    public static string INCLUDE_EXISTS_FT_INDEX;
    public static string INCLUDE_EXISTS_FT_INDEX90;
    public static string INCLUDE_EXISTS_FT_STOPLIST;
    public static string INCLUDE_EXISTS_SEARCH_PROPERTY_LIST;
    public static string INCLUDE_EXISTS_SEARCH_PROPERTY;
    public static string INCLUDE_EXISTS_DB_ROLE;
    public static string INCLUDE_EXISTS_DATABASE_TRIGGER90;
    public static string INCLUDE_EXISTS_SERVER_TRIGGER90;
    public static string INCLUDE_EXISTS_ENDPOINT;
    public static string INCLUDE_EXISTS_XML_COLLECTION;
    public static string INCLUDE_EXISTS_SYNONYM;
    public static string INCLUDE_EXISTS_SECURITY_POLICY;
    public static string INCLUDE_EXISTS_SECURITY_PREDICATE;
    public static string INCLUDE_EXISTS_SEQUENCE;
    public static string INCLUDE_EXISTS_COLUMN_MASTER_KEY;
    public static string INCLUDE_EXISTS_COLUMN_ENCRYPTION_KEY;
    public static string INCLUDE_EXISTS_CEK_VALUE;
    public static string INCLUDE_EXISTS_EXTERNAL_DATA_SOURCE;
    public static string INCLUDE_EXISTS_EXTERNAL_FILE_FORMAT;
    public static string INCLUDE_EXISTS_PLANGUIDE;
    public static string INCLUDE_EXISTS_DATABASE_DDL_TRIGGER;
    public static string INCLUDE_EXISTS_SERVER_DDL_TRIGGER;
    public static string INCLUDE_EXISTS_INDEX90;
    public static string INCLUDE_EXISTS_INDEX80;
    public static string INCLUDE_EXISTS_PARTITION_FUNCTION;
    public static string INCLUDE_EXISTS_PARTITION_SCHEME;
    public static string INCLUDE_EXISTS_MESSAGE_TYPE;
    public static string INCLUDE_EXISTS_SERVICE_CONTRACT;
    public static string INCLUDE_EXISTS_SERVICE_ROUTE;
    public static string INCLUDE_EXISTS_SERVICE_QUEUE;
    public static string INCLUDE_EXISTS_BROKER_SERVICE;
    public static string INCLUDE_EXISTS_BROKER_PRIORITY;
    public static string INCLUDE_EXISTS_REMOTE_SERVICE_BINDING;
    public static string INCLUDE_EXISTS_AGENT_ALERT;
    public static string INCLUDE_EXISTS_BACKUP_DEVICE;
    public static string INCLUDE_EXISTS_AGENT_CATEGORY;
    public static string INCLUDE_EXISTS_CERTIFICATE;
    public static string INCLUDE_EXISTS_CREDENTIAL;
    public static string INCLUDE_EXISTS_DATABASESCOPEDCREDENTIAL;
    public static string INCLUDE_EXISTS_CRYPTOGRAPHIC_PROVIDER;
    public static string INCLUDE_EXISTS_AGENT_JOB;
    public static string INCLUDE_EXISTS_AGENT_SCHEDULE;
    public static string INCLUDE_EXISTS_AGENT_JOBSCHEDULE;
    public static string INCLUDE_EXISTS_AGENT_JOBSTEP;
    public static string INCLUDE_EXISTS_AGENT_OPERATOR;
    public static string INCLUDE_EXISTS_AGENT_PROXY;
    public static string INCLUDE_EXISTS_AGENT_TARGETSERVERGROUP;
    public static string INCLUDE_EXISTS_LINKED_SERVER80;
    public static string INCLUDE_EXISTS_LINKED_SERVER90;
    public static string INCLUDE_EXISTS_LINKED_SERVER_LOGIN80;
    public static string INCLUDE_EXISTS_LINKED_SERVER_LOGIN90;
    public static string INCLUDE_EXISTS_MAIL_ACCOUNT;
    public static string INCLUDE_EXISTS_MAIL_PROFILE;
    public static string INCLUDE_EXISTS_DATABASE_ENCRYPTION_KEY;
    public static string INCLUDE_EXISTS_AVAILABILITY_GROUP;
    public static string INCLUDE_EXISTS_AVAILABILITY_REPLICA;
    public static string INCLUDE_EXISTS_AVAILABILITY_DATABASE;
    public static string INCLUDE_EXISTS_AVAILABILITY_GROUP_LISTENER;
    public static string INCLUDE_EXISTS_RG_RESOUREPOOL;
    public static string INCLUDE_EXISTS_RG_EXTERNALRESOUREPOOL;
    public static string INCLUDE_EXISTS_RG_WORKLOADGROUP;
    public static string RESOURCE_GOVERNOR_RECONFIGURE;
    public static string IF_SCHEMA_NOT_EXISTS_WITH_GIVEN_OWNER;
    public static string IF_SCHEMA_EXISTS_WITH_GIVEN_OWNER;
    public static string BEGIN;
    public static string END;
    public static string ANY;
    public static string DEFAULT;
    public static string SET_ANSI_NULLS;
    public static string SET_QUOTED_IDENTIFIER;
    public static string ENUM_STATISTICS;
    public static string ENUM_ACCOUNTINFO;
    public static string CREATE;
    public static string ALTER;
    public static string DROP;
    public static string SET;
    public static string CREATE_OR_ALTER;
    public static string JOIN;
    public static string DELETE;
    public static string INSERT;
    public static string UPDATE;
    public static string HADR;
    public static string SUSPEND;
    public static string RESUME;
    public static string REMOVE;
    public static string ADD;
    public static string MEMORY_OPTIMIZED;
    public static string HASH;
    public static string UNIQUE;
    public static string PRIMARY_KEY;
    public static string CONSTRAINT;
    public static string WITH_BUCKET_COUNT;
    public static string WITH_MEMORY_OPTIMIZED;
    public static string WITH_MEMORY_OPTIMIZED_AND_DURABILITY;
    public static string WITH_MEMORY_OPTIMIZED_AND_DURABILITY_AND_TEMPORAL_SYSTEM_VERSIONING;
    public static string INDEX_NAME;
    public static string NATIVELY_COMPILED;
    public static string SP_SCHEMABINDING;
    public static string INLINE_TYPE;
    public static string OFF_WITHOUT_DATA_RECOVERY;
    public static string NONCLUSTERED;
    public static string CLUSTERED;
    public static string EXTERNAL_DATASOURCE_NAME;
    public static string AS_NODE;
    public static string AS_EDGE;
    private static Scripts();
}
public class Microsoft.SqlServer.Management.Smo.ScriptSchemaObjectBase : ScriptNameObjectBase {
    private string m_sScriptSchema;
    internal string ScriptSchema { get; internal set; }
    [SfcKeyAttribute("0")]
[SfcReferenceAttribute("Microsoft.SqlServer.Management.Smo.Schema", "Microsoft.SqlServer.Management.Smo.SchemaCustomResolver", "Resolve", "Mono.Cecil.CustomAttributeArgument[]")]
[SfcPropertyAttribute("5376")]
[CLSCompliantAttribute("False")]
public string Schema { get; public set; }
    [SfcKeyAttribute("1")]
[SfcPropertyAttribute("5376")]
public string Name { get; public set; }
    internal string FullQualifiedName { get; }
    internal ScriptSchemaObjectBase(AbstractCollectionBase parentColl, ObjectKeyBase key, SqlSmoState eState);
    internal virtual string get_ScriptSchema();
    internal virtual void set_ScriptSchema(string value);
    internal virtual string FormatFullNameForScripting(ScriptingPreferences sp);
    internal virtual void ScriptChangeOwner(StringCollection queries, ScriptingPreferences sp);
    internal string GetSchema(ScriptingPreferences sp);
    public virtual string get_Schema();
    public virtual void set_Schema(string value);
    public virtual string get_Name();
    public virtual void set_Name(string value);
    internal void SetSchema(string newSchema);
    internal void ChangeSchema(string newSchema, bool bCheckExisting);
    private StringCollection ScriptChangeSchema(string oldSchema, string newSchema);
    internal virtual string get_FullQualifiedName();
    internal virtual ObjectKeyBase GetEmptyKey();
}
internal class Microsoft.SqlServer.Management.Smo.ScriptStringBuilder : object {
    private string statement;
    private IList`1<IScriptStringBuilderParameter> parameters;
    private ScriptingPreferences scriptingPreferences;
    public ScriptStringBuilder(string baseStatement, ScriptingPreferences scriptingPreferences);
    public ScriptStringBuilder SetParameter(string name, string value, ParameterValueFormat format);
    public ScriptStringBuilder SetParameter(string name, IList`1<IScriptStringBuilderParameter> parameters);
    public ScriptStringBuilder SetParameter(IScriptStringBuilderParameter param);
    public virtual string ToString();
    public string ToString(bool scriptSemiColon, bool pretty);
}
internal class Microsoft.SqlServer.Management.Smo.ScriptStringBuilderObjectParameter : object {
    [CompilerGeneratedAttribute]
private string <key>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<IScriptStringBuilderParameter> <parameters>k__BackingField;
    private string key { get; private set; }
    private IList`1<IScriptStringBuilderParameter> parameters { get; private set; }
    public ScriptStringBuilderObjectParameter(string key, IList`1<IScriptStringBuilderParameter> parameters);
    [CompilerGeneratedAttribute]
private string get_key();
    [CompilerGeneratedAttribute]
private void set_key(string value);
    [CompilerGeneratedAttribute]
private IList`1<IScriptStringBuilderParameter> get_parameters();
    [CompilerGeneratedAttribute]
private void set_parameters(IList`1<IScriptStringBuilderParameter> value);
    public sealed virtual string GetKey();
    public sealed virtual string ToScript();
}
internal class Microsoft.SqlServer.Management.Smo.ScriptStringBuilderParameter : object {
    private string key;
    private string value;
    private ParameterValueFormat format;
    public ScriptStringBuilderParameter(string key, string value, ParameterValueFormat format);
    public sealed virtual string GetKey();
    public sealed virtual string ToScript();
}
public class Microsoft.SqlServer.Management.Smo.ScriptWriterException : SmoException {
    public SmoExceptionType SmoExceptionType { get; }
    public ScriptWriterException(string message);
    public ScriptWriterException(string message, Exception innerException);
    private ScriptWriterException(SerializationInfo info, StreamingContext context);
    private void Init();
    public virtual SmoExceptionType get_SmoExceptionType();
}
[SfcElementAttribute("48")]
public class Microsoft.SqlServer.Management.Smo.SearchProperty : ScriptNameObjectBase {
    public static string UrnSuffix { get; }
    [SfcKeyAttribute("0")]
[SfcPropertyAttribute("1280")]
public string Name { get; public set; }
    [SfcObjectAttribute("1")]
public SearchPropertyList Parent { get; public set; }
    [SfcPropertyAttribute("3328")]
public string Description { get; public set; }
    [SfcPropertyAttribute("3072")]
public int ID { get; }
    [SfcPropertyAttribute("3328")]
public int IntID { get; public set; }
    [SfcPropertyAttribute("3328")]
public Guid PropertySetGuid { get; public set; }
    internal SearchProperty(AbstractCollectionBase parentColl, ObjectKeyBase key, SqlSmoState state);
    public SearchProperty(SearchPropertyList parent, string name, string propertySetGuid, int intID, string description);
    public SearchProperty(SearchPropertyList searchPropertyList, string name);
    public static string get_UrnSuffix();
    public virtual string get_Name();
    public virtual void set_Name(string value);
    public sealed virtual StringCollection Script();
    public sealed virtual StringCollection Script(ScriptingOptions scriptingOptions);
    public sealed virtual void Create();
    internal virtual void ScriptCreate(StringCollection createQuery, ScriptingPreferences sp);
    public sealed virtual void Drop();
    internal virtual void ScriptDrop(StringCollection dropQuery, ScriptingPreferences sp);
    internal static String[] GetScriptFields(Type parentType, ServerVersion version, DatabaseEngineType databaseEngineType, DatabaseEngineEdition databaseEngineEdition, bool defaultTextMode);
    public SearchPropertyList get_Parent();
    public void set_Parent(SearchPropertyList value);
    internal virtual SqlPropertyMetadataProvider GetPropertyMetadataProvider();
    public string get_Description();
    public void set_Description(string value);
    public int get_ID();
    public int get_IntID();
    public void set_IntID(int value);
    public Guid get_PropertySetGuid();
    public void set_PropertySetGuid(Guid value);
    internal virtual String[] GetNonAlterableProperties();
}
[DefaultMemberAttribute("Item")]
public class Microsoft.SqlServer.Management.Smo.SearchPropertyCollection : SimpleObjectCollectionBase {
    public SearchPropertyList Parent { get; }
    public SearchProperty Item { get; }
    public SearchProperty Item { get; }
    internal SearchPropertyCollection(SqlSmoObject parentInstance);
    public SearchPropertyList get_Parent();
    public SearchProperty get_Item(int index);
    public SearchProperty get_Item(string name);
    public void CopyTo(SearchProperty[] array, int index);
    public SearchProperty ItemById(int id);
    protected virtual Type GetCollectionElementType();
    internal virtual SqlSmoObject GetCollectionElementInstance(ObjectKeyBase key, SqlSmoState state);
    public void Add(SearchProperty searchProperty);
    internal SqlSmoObject GetObjectByName(string name);
    internal virtual ObjectKeyBase CreateKeyFromUrn(Urn urn);
    protected virtual void InitInnerCollection();
}
[TypeConverterAttribute("Microsoft.SqlServer.Management.Smo.SearchPropertyIntIDTypeConverter")]
internal class Microsoft.SqlServer.Management.Smo.SearchPropertyIntIDType : object {
    private string value;
    public SearchPropertyIntIDType(string value);
    private sealed virtual override int System.IComparable.CompareTo(object obj);
    public virtual string ToString();
    private int ParseInt(string proposedValue);
}
internal class Microsoft.SqlServer.Management.Smo.SearchPropertyIntIDTypeConverter : TypeConverter {
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
}
[StateChangeEventAttribute("CREATE_SEARCH_PROPERTY_LIST", "SEARCHPROPERTYLIST", "SEARCH PROPERTY LIST")]
[StateChangeEventAttribute("ALTER_SEARCH_PROPERTY_LIST", "SEARCHPROPERTYLIST", "SEARCH PROPERTY LIST")]
[StateChangeEventAttribute("ALTER_AUTHORIZATION_DATABASE", "SEARCHPROPERTYLIST", "SEARCH PROPERTY LIST")]
[EvaluationModeAttribute("6")]
[PhysicalFacetAttribute]
[SfcElementAttribute("48")]
public class Microsoft.SqlServer.Management.Smo.SearchPropertyList : ScriptNameObjectBase {
    internal string sourceSearchPropertyListName;
    internal string sourceDatabaseName;
    private SearchPropertyCollection m_SearchProperties;
    public static string UrnSuffix { get; }
    [SfcKeyAttribute("0")]
[SfcPropertyAttribute("1280")]
public string Name { get; public set; }
    [SfcObjectAttribute("1", "0", "Microsoft.SqlServer.Management.Smo.SearchProperty")]
public SearchPropertyCollection SearchProperties { get; }
    [SfcObjectAttribute("1")]
public Database Parent { get; public set; }
    internal UserPermissionCollection Permissions { get; }
    [SfcPropertyAttribute("3072")]
public DateTime DateCreated { get; }
    [SfcPropertyAttribute("3072")]
public DateTime DateLastModified { get; }
    [SfcPropertyAttribute("3072")]
public int ID { get; }
    [SfcPropertyAttribute("3072")]
public string Owner { get; public set; }
    internal SearchPropertyList(AbstractCollectionBase parentColl, ObjectKeyBase key, SqlSmoState state);
    public SearchPropertyList(Database database, string name);
    public static string get_UrnSuffix();
    public virtual string get_Name();
    public virtual void set_Name(string value);
    public SearchPropertyCollection get_SearchProperties();
    public sealed virtual void Create();
    public void Create(string sourceSearchPropertyListName);
    public void Create(string sourceDatabaseName, string sourceSearchPropertyListName);
    internal virtual void ScriptCreate(StringCollection createQuery, ScriptingPreferences sp);
    public sealed virtual void Drop();
    public sealed virtual void DropIfExists();
    internal virtual void ScriptDrop(StringCollection dropQuery, ScriptingPreferences sp);
    public sealed virtual StringCollection Script();
    public sealed virtual StringCollection Script(ScriptingOptions scriptingOptions);
    public sealed virtual void Alter();
    internal virtual void ScriptAlter(StringCollection alterQuery, ScriptingPreferences sp);
    internal virtual PropagateInfo[] GetPropagateInfo(PropagateAction action);
    public Database get_Parent();
    public void set_Parent(Database value);
    internal virtual UserPermissionCollection get_Permissions();
    internal virtual SqlPropertyMetadataProvider GetPropertyMetadataProvider();
    public DateTime get_DateCreated();
    public DateTime get_DateLastModified();
    public int get_ID();
    public string get_Owner();
    public void set_Owner(string value);
    public sealed virtual void Deny(ObjectPermissionSet permission, String[] granteeNames);
    public sealed virtual void Deny(ObjectPermissionSet permission, String[] granteeNames, bool cascade);
    public sealed virtual void Grant(ObjectPermissionSet permission, String[] granteeNames);
    public sealed virtual void Grant(ObjectPermissionSet permission, String[] granteeNames, bool grantGrant);
    public sealed virtual void Grant(ObjectPermissionSet permission, String[] granteeNames, bool grantGrant, string asRole);
    public sealed virtual void Revoke(ObjectPermissionSet permission, String[] granteeNames);
    public sealed virtual void Revoke(ObjectPermissionSet permission, String[] granteeNames, bool revokeGrant, bool cascade);
    public void Revoke(ObjectPermissionSet permission, String[] granteeNames, bool revokeGrant, bool cascade, string asRole);
    public sealed virtual void Deny(ObjectPermissionSet permission, string granteeName);
    public sealed virtual void Deny(ObjectPermissionSet permission, string granteeName, bool cascade);
    public sealed virtual void Grant(ObjectPermissionSet permission, string granteeName);
    public sealed virtual void Grant(ObjectPermissionSet permission, string granteeName, bool grantGrant);
    public sealed virtual void Grant(ObjectPermissionSet permission, string granteeName, bool grantGrant, string asRole);
    public sealed virtual void Revoke(ObjectPermissionSet permission, string granteeName);
    public void Revoke(ObjectPermissionSet permission, string granteeName, bool revokeGrant, bool cascade);
    public sealed virtual void Revoke(ObjectPermissionSet permission, string granteeName, bool revokeGrant, bool cascade, string asRole);
    public sealed virtual ObjectPermissionInfo[] EnumObjectPermissions();
    public sealed virtual ObjectPermissionInfo[] EnumObjectPermissions(string granteeName);
    public sealed virtual ObjectPermissionInfo[] EnumObjectPermissions(ObjectPermissionSet permissions);
    public sealed virtual ObjectPermissionInfo[] EnumObjectPermissions(string granteeName, ObjectPermissionSet permissions);
}
[DefaultMemberAttribute("Item")]
public class Microsoft.SqlServer.Management.Smo.SearchPropertyListCollection : SimpleObjectCollectionBase {
    public Database Parent { get; }
    public SearchPropertyList Item { get; }
    public SearchPropertyList Item { get; }
    internal SearchPropertyListCollection(SqlSmoObject parentInstance);
    public Database get_Parent();
    public SearchPropertyList get_Item(int index);
    public SearchPropertyList get_Item(string name);
    public void CopyTo(SearchPropertyList[] array, int index);
    public SearchPropertyList ItemById(int id);
    protected virtual Type GetCollectionElementType();
    internal virtual SqlSmoObject GetCollectionElementInstance(ObjectKeyBase key, SqlSmoState state);
    public void Add(SearchPropertyList searchPropertyList);
    internal SqlSmoObject GetObjectByName(string name);
    internal virtual ObjectKeyBase CreateKeyFromUrn(Urn urn);
}
internal static class Microsoft.SqlServer.Management.Smo.SearchPropertyListConstants : object {
    public static string SearchPropertyList;
    public static string SearchProperty;
    public static int MaxSearchPropertyListNameLength;
    public static int MaxSearchPropertyNameLength;
    public static int MaxSearchPropertyDescriptionLength;
}
[CLSCompliantAttribute("False")]
public class Microsoft.SqlServer.Management.Smo.SearchPropertyListExtender : SmoObjectExtender`1<SearchPropertyList> {
    private StringCollection databaseNamesToSelect;
    private StringCollection propertyListNamesToSelect;
    private string selectedDatabaseName;
    private string selectedPropertyListName;
    private DataTable searchProperties;
    private ValidationState gridValidationState;
    private SearchPropertyListValidator searchPropertyListValidator;
    private string sortingExpression;
    private bool isEmptyList;
    [ExtendedPropertyAttribute]
public string Name { get; public set; }
    [ExtendedPropertyAttribute]
public string SelectedDatabaseName { get; public set; }
    [ExtendedPropertyAttribute]
public StringCollection DatabaseNamesToSelect { get; }
    [ExtendedPropertyAttribute]
public string SelectedPropertyListName { get; public set; }
    [ExtendedPropertyAttribute]
public StringCollection PropertyListNamesToSelect { get; }
    [ExtendedPropertyAttribute]
public DataTable SearchProperties { get; public set; }
    [ExtendedPropertyAttribute]
public DataTable SortedSearchProperties { get; }
    [ExtendedPropertyAttribute]
internal string SortingExpression { get; public set; }
    [ExtendedPropertyAttribute]
public bool IsEmptyList { get; public set; }
    [ExtendedPropertyAttribute]
public string DatabaseName { get; }
    [ExtendedPropertyAttribute]
public ServerConnection ConnectionContext { get; }
    [ExtendedPropertyAttribute]
public ValidationState GridValidationState { get; public set; }
    public SearchPropertyListExtender(SearchPropertyList SearchPropertyList);
    private void Initialize();
    public string get_Name();
    public void set_Name(string value);
    public string get_SelectedDatabaseName();
    public void set_SelectedDatabaseName(string value);
    public StringCollection get_DatabaseNamesToSelect();
    public string get_SelectedPropertyListName();
    public void set_SelectedPropertyListName(string value);
    public StringCollection get_PropertyListNamesToSelect();
    public DataTable get_SearchProperties();
    public void set_SearchProperties(DataTable value);
    public DataTable get_SortedSearchProperties();
    internal string get_SortingExpression();
    public void set_SortingExpression(string value);
    public bool get_IsEmptyList();
    public void set_IsEmptyList(bool value);
    public string get_DatabaseName();
    public ServerConnection get_ConnectionContext();
    private void InitPropertyListNamesToSelect();
    public ValidationState get_GridValidationState();
    public void set_GridValidationState(ValidationState value);
    internal DataRow GetRow(int rowId);
    public void ApplyChanges();
    public sealed virtual ValidationState Validate(string methodName, Object[] arguments);
}
internal class Microsoft.SqlServer.Management.Smo.SearchPropertyListValidator : object {
    private SearchPropertyListExtender searchPropertyListExtender;
    private SearchPropertyCollection existingSearchProperties;
    private SmoSet`1<string> deletedSearchPropertyNames;
    private SmoSet`1<int> updatedRows;
    private SmoSet`1<int> newRows;
    private Dictionary`2<int, ValidationError> validationErrors;
    private Dictionary`2<string, List`1<int>> matchingRowsForNames;
    private Dictionary`2<string, List`1<int>> matchingRowsForGuidIntId;
    private int nameErrors;
    private int guidErrors;
    private int intIdErrors;
    private int descriptionErrors;
    private int guidIntIdErrors;
    private int changingRowId;
    public SmoSet`1<string> DeletedSearchPropertyNames { get; }
    public SmoSet`1<int> UpdatedRows { get; }
    public SmoSet`1<int> NewRows { get; }
    public SearchPropertyListValidator(SearchPropertyListExtender searchPropertyListExtender);
    public void Initialize(SearchPropertyCollection existingSearchProperties);
    private bool AddMatchingRowForName(string searchPropertyName, int rowId);
    private void RemoveMatchingRowForName(string searchPropertyName, int rowId);
    private bool AddMatchingRowForGuidIntId(string guidIntId, int rowId);
    private void RemoveMatchingRowForGuidIntId(string guidIntId, int rowId);
    public string GetValidationErrorsMessage(int rowId);
    public void SearchPropertiesColumnChangingValidationHandler(object sender, DataColumnChangeEventArgs e);
    public void SearchPropertiesColumnChangedValidationHandler(object sender, DataColumnChangeEventArgs e);
    private void InitializeRow(DataRow row);
    public void SearchPropertiesRowDeleteValidationHandler(object sender, DataRowChangeEventArgs e);
    private void SetGridValidationState();
    private bool AddValidationError(int rowID, ValidationError error);
    private bool RemoveValidationError(int rowID, ValidationError error);
    private void AddOrRemoveValidationError(int rowID, ValidationError error, bool isValid, Int32& errorCount);
    private void ValidateName(int rowId, string proposedValue);
    private string GetNormalizedIntId(string intId);
    private void ValidateGuidIntId(int rowId, string proposedValue);
    private void ValidateGuid(int rowId, string proposedValue);
    private void ValidateIntID(int rowId, string proposedValue);
    private void ValidateDescription(int rowId, string proposedValue);
    private bool IsValidGuidAndIntIds(int rowId);
    private bool IsValidNameLength(string searchPropertyName);
    private void ResetValiationErrors(int rowId);
    private bool IsEquals(string s1, string s2);
    public SmoSet`1<string> get_DeletedSearchPropertyNames();
    public SmoSet`1<int> get_UpdatedRows();
    public SmoSet`1<int> get_NewRows();
}
[SfcElementAttribute("48")]
public class Microsoft.SqlServer.Management.Smo.SecurityPolicy : ScriptSchemaObjectBase {
    private SecurityPredicateCollection m_securityPredicates;
    public static string UrnSuffix { get; }
    [SfcKeyAttribute("0")]
[SfcPropertyAttribute("3328")]
public string Schema { get; public set; }
    [SfcKeyAttribute("1")]
[SfcPropertyAttribute("3328")]
public string Name { get; public set; }
    [SfcObjectAttribute("1", "0", "Microsoft.SqlServer.Management.Smo.SecurityPredicate")]
public SecurityPredicateCollection SecurityPredicates { get; }
    [SfcObjectAttribute("1", "0", "Microsoft.SqlServer.Management.Smo.ExtendedProperty")]
public ExtendedPropertyCollection ExtendedProperties { get; }
    [SfcObjectAttribute("1")]
public Database Parent { get; public set; }
    internal UserPermissionCollection Permissions { get; }
    [SfcPropertyAttribute("3072")]
public DateTime CreateDate { get; }
    [SfcPropertyAttribute("3072")]
public DateTime DateLastModified { get; }
    [SfcPropertyAttribute("3072")]
public bool Enabled { get; public set; }
    [SfcPropertyAttribute("3072")]
public int ID { get; }
    [SfcPropertyAttribute("3328")]
public bool IsSchemaBound { get; public set; }
    [SfcPropertyAttribute("7168")]
public bool IsSchemaOwned { get; }
    [SfcPropertyAttribute("3072")]
public bool NotForReplication { get; public set; }
    [SfcPropertyAttribute("7168")]
public string Owner { get; public set; }
    internal SecurityPolicy(AbstractCollectionBase parentColl, ObjectKeyBase key, SqlSmoState state);
    public SecurityPolicy(Database parent, string name, string schema, bool notForReplication, bool isEnabled);
    public SecurityPolicy(Database database, string name);
    public SecurityPolicy(Database database, string name, string schema);
    public static string get_UrnSuffix();
    public virtual string get_Schema();
    public virtual void set_Schema(string value);
    public virtual string get_Name();
    public virtual void set_Name(string value);
    public SecurityPredicateCollection get_SecurityPredicates();
    public sealed virtual ExtendedPropertyCollection get_ExtendedProperties();
    public sealed virtual void Drop();
    public sealed virtual void DropIfExists();
    internal virtual void ScriptDrop(StringCollection dropQuery, ScriptingPreferences sp);
    public sealed virtual void Create();
    internal virtual void ScriptCreate(StringCollection createQuery, ScriptingPreferences sp);
    public sealed virtual StringCollection Script();
    public sealed virtual StringCollection Script(ScriptingOptions scriptingOptions);
    public sealed virtual void Alter();
    internal virtual void ScriptAlter(StringCollection alterQuery, ScriptingPreferences sp);
    internal virtual PropagateInfo[] GetPropagateInfo(PropagateAction action);
    internal static String[] GetScriptFields(Type parentType, ServerVersion version, DatabaseEngineType databaseEngineType, DatabaseEngineEdition databaseEngineEdition, bool defaultTextMode);
    public Database get_Parent();
    public void set_Parent(Database value);
    internal virtual UserPermissionCollection get_Permissions();
    internal virtual SqlPropertyMetadataProvider GetPropertyMetadataProvider();
    public DateTime get_CreateDate();
    public DateTime get_DateLastModified();
    public bool get_Enabled();
    public void set_Enabled(bool value);
    public int get_ID();
    public bool get_IsSchemaBound();
    public void set_IsSchemaBound(bool value);
    public bool get_IsSchemaOwned();
    public bool get_NotForReplication();
    public void set_NotForReplication(bool value);
    public string get_Owner();
    public void set_Owner(string value);
    internal virtual String[] GetNonAlterableProperties();
    public sealed virtual void Deny(ObjectPermissionSet permission, String[] granteeNames);
    public sealed virtual void Deny(ObjectPermissionSet permission, String[] granteeNames, bool cascade);
    public sealed virtual void Grant(ObjectPermissionSet permission, String[] granteeNames);
    public sealed virtual void Grant(ObjectPermissionSet permission, String[] granteeNames, bool grantGrant);
    public sealed virtual void Grant(ObjectPermissionSet permission, String[] granteeNames, bool grantGrant, string asRole);
    public sealed virtual void Revoke(ObjectPermissionSet permission, String[] granteeNames);
    public sealed virtual void Revoke(ObjectPermissionSet permission, String[] granteeNames, bool revokeGrant, bool cascade);
    public void Revoke(ObjectPermissionSet permission, String[] granteeNames, bool revokeGrant, bool cascade, string asRole);
    public sealed virtual void Deny(ObjectPermissionSet permission, string granteeName);
    public sealed virtual void Deny(ObjectPermissionSet permission, string granteeName, bool cascade);
    public sealed virtual void Grant(ObjectPermissionSet permission, string granteeName);
    public sealed virtual void Grant(ObjectPermissionSet permission, string granteeName, bool grantGrant);
    public sealed virtual void Grant(ObjectPermissionSet permission, string granteeName, bool grantGrant, string asRole);
    public sealed virtual void Revoke(ObjectPermissionSet permission, string granteeName);
    public void Revoke(ObjectPermissionSet permission, string granteeName, bool revokeGrant, bool cascade);
    public sealed virtual void Revoke(ObjectPermissionSet permission, string granteeName, bool revokeGrant, bool cascade, string asRole);
    public sealed virtual ObjectPermissionInfo[] EnumObjectPermissions();
    public sealed virtual ObjectPermissionInfo[] EnumObjectPermissions(string granteeName);
    public sealed virtual ObjectPermissionInfo[] EnumObjectPermissions(ObjectPermissionSet permissions);
    public sealed virtual ObjectPermissionInfo[] EnumObjectPermissions(string granteeName, ObjectPermissionSet permissions);
}
[DefaultMemberAttribute("Item")]
public class Microsoft.SqlServer.Management.Smo.SecurityPolicyCollection : SchemaCollectionBase {
    public Database Parent { get; }
    public SecurityPolicy Item { get; }
    public SecurityPolicy Item { get; }
    public SecurityPolicy Item { get; }
    internal SecurityPolicyCollection(SqlSmoObject parentInstance);
    public Database get_Parent();
    public SecurityPolicy get_Item(int index);
    public SecurityPolicy get_Item(string name);
    public SecurityPolicy get_Item(string name, string schema);
    public void CopyTo(SecurityPolicy[] array, int index);
    public SecurityPolicy ItemById(int id);
    protected virtual Type GetCollectionElementType();
    internal virtual SqlSmoObject GetCollectionElementInstance(ObjectKeyBase key, SqlSmoState state);
    public void Add(SecurityPolicy securityPolicy);
    internal SqlSmoObject GetObjectByName(string name);
}
[SfcElementAttribute("48")]
public class Microsoft.SqlServer.Management.Smo.SecurityPredicate : SqlSmoObject {
    public static string UrnSuffix { get; }
    internal string FullQualifiedTargetName { get; }
    [SfcPropertyAttribute("3072")]
public string PredicateDefinition { get; public set; }
    [SfcObjectAttribute("1")]
public SecurityPolicy Parent { get; }
    [SfcPropertyAttribute("3328")]
public SecurityPredicateOperation PredicateOperation { get; public set; }
    [SfcPropertyAttribute("3328")]
public SecurityPredicateType PredicateType { get; public set; }
    [SfcPropertyAttribute("3328")]
public int SecurityPredicateID { get; public set; }
    [SfcPropertyAttribute("3328")]
public int TargetObjectID { get; public set; }
    [SfcPropertyAttribute("3328")]
public string TargetObjectName { get; public set; }
    [SfcPropertyAttribute("3328")]
public string TargetObjectSchema { get; public set; }
    internal SecurityPredicate(AbstractCollectionBase parentColl, ObjectKeyBase key, SqlSmoState state);
    public SecurityPredicate(SecurityPolicy parent, Table table, string predicateDefinition);
    public SecurityPredicate(SecurityPolicy parent, string targetObjectSchema, string targetObjectName, int targetObjectId, string predicateDefinition);
    public static string get_UrnSuffix();
    internal string get_FullQualifiedTargetName();
    public string get_PredicateDefinition();
    public void set_PredicateDefinition(string value);
    public sealed virtual void MarkForDrop(bool dropOnAlter);
    public sealed virtual void Drop();
    public sealed virtual void DropIfExists();
    internal virtual void ScriptDrop(StringCollection dropQuery, ScriptingPreferences sp);
    public sealed virtual void Create();
    internal virtual void ScriptCreate(StringCollection createQuery, ScriptingPreferences sp);
    public sealed virtual void Alter();
    internal virtual void ScriptAlter(StringCollection alterQuery, ScriptingPreferences sp);
    internal void ScriptPredicate(StringBuilder sb, ScriptingPreferences sp, bool forCreate);
    internal static String[] GetScriptFields(Type parentType, ServerVersion version, DatabaseEngineType databaseEngineType, DatabaseEngineEdition databaseEngineEdition, bool defaultTextMode);
    public SecurityPolicy get_Parent();
    internal virtual SqlPropertyMetadataProvider GetPropertyMetadataProvider();
    public SecurityPredicateOperation get_PredicateOperation();
    public void set_PredicateOperation(SecurityPredicateOperation value);
    public SecurityPredicateType get_PredicateType();
    public void set_PredicateType(SecurityPredicateType value);
    public int get_SecurityPredicateID();
    public void set_SecurityPredicateID(int value);
    public int get_TargetObjectID();
    public void set_TargetObjectID(int value);
    public string get_TargetObjectName();
    public void set_TargetObjectName(string value);
    public string get_TargetObjectSchema();
    public void set_TargetObjectSchema(string value);
    internal virtual String[] GetNonAlterableProperties();
}
[DefaultMemberAttribute("Item")]
public class Microsoft.SqlServer.Management.Smo.SecurityPredicateCollection : SecurityPredicateCollectionBase {
    public SecurityPolicy Parent { get; }
    public SecurityPredicate Item { get; }
    internal SecurityPredicateCollection(SqlSmoObject parentInstance);
    public SecurityPolicy get_Parent();
    public SecurityPredicate get_Item(int index);
    public void Add(SecurityPredicate securityPredicate);
    public void CopyTo(SecurityPredicate[] array, int index);
    protected virtual Type GetCollectionElementType();
    internal virtual SqlSmoObject GetCollectionElementInstance(ObjectKeyBase key, SqlSmoState state);
}
public abstract class Microsoft.SqlServer.Management.Smo.SecurityPredicateCollectionBase : SortedListCollectionBase {
    internal SecurityPredicateCollectionBase(SqlSmoObject parent);
    protected virtual void InitInnerCollection();
    public bool Contains(int securityPredicateID);
    public SecurityPredicate GetItemByTargetObjectID(int targetObjectID);
    public SecurityPredicate GetItemByTargetObjectID(int targetObjectID, SecurityPredicateType predicateType, SecurityPredicateOperation predicateOperation);
    internal virtual ObjectKeyBase CreateKeyFromUrn(Urn urn);
}
internal class Microsoft.SqlServer.Management.Smo.SecurityPredicateObjectComparer : ObjectComparerBase {
    public virtual int Compare(object obj1, object obj2);
}
internal class Microsoft.SqlServer.Management.Smo.SecurityPredicateObjectKey : ObjectKeyBase {
    protected int securityPredicateID;
    internal static StringCollection fields;
    public int SecurityPredicateID { get; public set; }
    public string UrnFilter { get; }
    public bool IsNull { get; }
    public SecurityPredicateObjectKey(int securityPredicateID);
    private static SecurityPredicateObjectKey();
    public int get_SecurityPredicateID();
    public void set_SecurityPredicateID(int value);
    public virtual string ToString();
    public virtual string get_UrnFilter();
    public virtual StringCollection GetFieldNames();
    public virtual ObjectKeyBase Clone();
    public virtual bool get_IsNull();
    public virtual ObjectComparerBase GetComparer(IComparer stringComparer);
}
internal class Microsoft.SqlServer.Management.Smo.SecurityPreferences : object {
    [CompilerGeneratedAttribute]
private bool <ExecuteAs>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Sid>k__BackingField;
    public bool ExecuteAs { get; public set; }
    public bool Sid { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_ExecuteAs();
    [CompilerGeneratedAttribute]
public void set_ExecuteAs(bool value);
    [CompilerGeneratedAttribute]
public bool get_Sid();
    [CompilerGeneratedAttribute]
public void set_Sid(bool value);
    private void Init();
    internal object Clone();
}
internal static class Microsoft.SqlServer.Management.Smo.SecurityUtils : object {
    private static RandomNumberGenerator rng;
    private static RandomNumberGenerator Rng { get; }
    private static SecurityUtils();
    public static void ScriptPlaceholderPwd(StringBuilder pwdGenScript);
    public static string GenerateRandomPassword();
    private static RandomNumberGenerator get_Rng();
}
[SfcElementAttribute("48")]
public class Microsoft.SqlServer.Management.Smo.SensitivityClassification : NamedSmoObject {
    public static string UrnSuffix { get; }
    [SfcObjectAttribute("1")]
public SqlSmoObject Parent { get; public set; }
    [SfcPropertyAttribute("3072")]
[SfcReferenceAttribute("Microsoft.SqlServer.Management.Smo.Column", "Server[@Name = '{0}']/Database[@Name = '{1}']/Table[@Name = '{2}' and @Schema = '{3}']/Column[@Name = '{4}']", "Mono.Cecil.CustomAttributeArgument[]")]
[CLSCompliantAttribute("False")]
public string ReferencedColumn { get; }
    [SfcPropertyAttribute("3072")]
[SfcReferenceAttribute("Microsoft.SqlServer.Management.Smo.Table", "Server[@Name = '{0}']/Database[@Name = '{1}']/Table[@Name = '{2}' and @Schema = '{3}']", "Mono.Cecil.CustomAttributeArgument[]")]
[CLSCompliantAttribute("False")]
public string ReferencedTable { get; }
    [SfcPropertyAttribute("3072")]
[SfcReferenceAttribute("Microsoft.SqlServer.Management.Smo.Schema", "Server[@Name = '{0}']/Database[@Name = '{1}']/Schema[@Name = '{2}']", "Mono.Cecil.CustomAttributeArgument[]")]
[CLSCompliantAttribute("False")]
public string ReferencedTableSchema { get; }
    [SfcPropertyAttribute("3072")]
public string SensitivityInformationTypeId { get; }
    [SfcPropertyAttribute("3072")]
public string SensitivityInformationTypeName { get; }
    [SfcPropertyAttribute("3072")]
public string SensitivityLabelId { get; }
    [SfcPropertyAttribute("3072")]
public string SensitivityLabelName { get; }
    [SfcPropertyAttribute("3072")]
public SensitivityRank SensitivityRank { get; }
    internal SensitivityClassification(AbstractCollectionBase parentColl, ObjectKeyBase key, SqlSmoState state);
    public SensitivityClassification(SqlSmoObject parent, string name);
    public static string get_UrnSuffix();
    public sealed virtual void Drop();
    public sealed virtual StringCollection Script();
    public sealed virtual StringCollection Script(ScriptingOptions scriptingOptions);
    internal virtual void ScriptCreate(StringCollection queries, ScriptingPreferences sp);
    internal virtual void ScriptDrop(StringCollection queries, ScriptingPreferences sp);
    public SqlSmoObject get_Parent();
    public void set_Parent(SqlSmoObject value);
    internal virtual SqlPropertyMetadataProvider GetPropertyMetadataProvider();
    public string get_ReferencedColumn();
    public string get_ReferencedTable();
    public string get_ReferencedTableSchema();
    public string get_SensitivityInformationTypeId();
    public string get_SensitivityInformationTypeName();
    public string get_SensitivityLabelId();
    public string get_SensitivityLabelName();
    public SensitivityRank get_SensitivityRank();
}
[DefaultMemberAttribute("Item")]
public class Microsoft.SqlServer.Management.Smo.SensitivityClassificationCollection : SimpleObjectCollectionBase {
    public SqlSmoObject Parent { get; }
    public SensitivityClassification Item { get; }
    public SensitivityClassification Item { get; }
    internal SensitivityClassificationCollection(SqlSmoObject parentInstance);
    public SqlSmoObject get_Parent();
    public SensitivityClassification get_Item(int index);
    public SensitivityClassification get_Item(string name);
    public void CopyTo(SensitivityClassification[] array, int index);
    public SensitivityClassification ItemById(int id);
    protected virtual Type GetCollectionElementType();
    internal virtual SqlSmoObject GetCollectionElementInstance(ObjectKeyBase key, SqlSmoState state);
    public void Add(SensitivityClassification SensitivityClassification);
    internal SqlSmoObject GetObjectByName(string name);
    internal virtual ObjectKeyBase CreateKeyFromUrn(Urn urn);
}
[StateChangeEventAttribute("CREATE_SEQUENCE", "SEQUENCE")]
[StateChangeEventAttribute("ALTER_SEQUENCE", "SEQUENCE")]
[StateChangeEventAttribute("RENAME", "SEQUENCE")]
[StateChangeEventAttribute("ALTER_AUTHORIZATION_DATABASE", "SEQUENCE")]
[StateChangeEventAttribute("ALTER_SCHEMA", "SEQUENCE")]
[EvaluationModeAttribute("7")]
[PhysicalFacetAttribute]
[SfcElementAttribute("48")]
public class Microsoft.SqlServer.Management.Smo.Sequence : ScriptSchemaObjectBase {
    private DataType dataType;
    private SequenceEvents events;
    public static string UrnSuffix { get; }
    [SfcObjectAttribute("1", "0", "Microsoft.SqlServer.Management.Smo.ExtendedProperty")]
public ExtendedPropertyCollection ExtendedProperties { get; }
    [SfcKeyAttribute("0")]
[SfcPropertyAttribute("3328")]
public string Schema { get; public set; }
    [SfcKeyAttribute("1")]
[SfcPropertyAttribute("3328")]
public string Name { get; public set; }
    [SfcPropertyAttribute("3072")]
public DataType DataType { get; public set; }
    [SfcObjectAttribute("1")]
public Database Parent { get; public set; }
    internal UserPermissionCollection Permissions { get; }
    [SfcPropertyAttribute("3072")]
public int CacheSize { get; public set; }
    [SfcPropertyAttribute("3072")]
public DateTime CreateDate { get; }
    [SfcPropertyAttribute("3072")]
public object CurrentValue { get; }
    [SfcPropertyAttribute("3072")]
public DateTime DateLastModified { get; }
    [SfcPropertyAttribute("3072")]
public int ID { get; }
    [SfcPropertyAttribute("3072")]
public object IncrementValue { get; public set; }
    [SfcPropertyAttribute("3072")]
public bool IsCycleEnabled { get; public set; }
    [SfcPropertyAttribute("3072")]
public bool IsExhausted { get; }
    [SfcPropertyAttribute("7168")]
public bool IsSchemaOwned { get; }
    [SfcPropertyAttribute("3072")]
public object MaxValue { get; public set; }
    [SfcPropertyAttribute("3072")]
public object MinValue { get; public set; }
    [SfcPropertyAttribute("7168")]
public string Owner { get; public set; }
    [SfcPropertyAttribute("3072")]
public SequenceCacheType SequenceCacheType { get; public set; }
    [SfcPropertyAttribute("3072")]
public object StartValue { get; public set; }
    public SequenceEvents Events { get; }
    internal Sequence(AbstractCollectionBase parentColl, ObjectKeyBase key, SqlSmoState state);
    public Sequence(Database database, string name);
    public Sequence(Database database, string name, string schema);
    public static string get_UrnSuffix();
    public sealed virtual ExtendedPropertyCollection get_ExtendedProperties();
    public virtual string get_Schema();
    public virtual void set_Schema(string value);
    public virtual string get_Name();
    public virtual void set_Name(string value);
    public DataType get_DataType();
    public void set_DataType(DataType value);
    public sealed virtual void Drop();
    public sealed virtual void DropIfExists();
    internal virtual void ScriptDrop(StringCollection dropQuery, ScriptingPreferences sp);
    public sealed virtual void Create();
    private bool IsValidDoubleValue(string propertyName, string propertyValue);
    internal virtual void ScriptCreate(StringCollection createQuery, ScriptingPreferences sp);
    public sealed virtual StringCollection Script();
    public sealed virtual StringCollection Script(ScriptingOptions scriptingOptions);
    public sealed virtual void Alter();
    internal virtual void ScriptAlter(StringCollection alterQuery, ScriptingPreferences sp);
    public sealed virtual void Rename(string newname);
    internal virtual void ScriptRename(StringCollection renameQuery, ScriptingPreferences sp, string newName);
    public virtual void Refresh();
    internal virtual PropagateInfo[] GetPropagateInfo(PropagateAction action);
    internal static String[] GetScriptFields(Type parentType, ServerVersion version, DatabaseEngineType databaseEngineType, DatabaseEngineEdition databaseEngineEdition, bool defaultTextMode);
    public Database get_Parent();
    public void set_Parent(Database value);
    internal virtual UserPermissionCollection get_Permissions();
    internal virtual SqlPropertyMetadataProvider GetPropertyMetadataProvider();
    public int get_CacheSize();
    public void set_CacheSize(int value);
    public DateTime get_CreateDate();
    public object get_CurrentValue();
    public DateTime get_DateLastModified();
    public int get_ID();
    public object get_IncrementValue();
    public void set_IncrementValue(object value);
    public bool get_IsCycleEnabled();
    public void set_IsCycleEnabled(bool value);
    public bool get_IsExhausted();
    public bool get_IsSchemaOwned();
    public object get_MaxValue();
    public void set_MaxValue(object value);
    public object get_MinValue();
    public void set_MinValue(object value);
    public string get_Owner();
    public void set_Owner(string value);
    public SequenceCacheType get_SequenceCacheType();
    public void set_SequenceCacheType(SequenceCacheType value);
    public object get_StartValue();
    public void set_StartValue(object value);
    internal virtual String[] GetNonAlterableProperties();
    public sealed virtual void Deny(ObjectPermissionSet permission, String[] granteeNames);
    public sealed virtual void Deny(ObjectPermissionSet permission, String[] granteeNames, bool cascade);
    public sealed virtual void Grant(ObjectPermissionSet permission, String[] granteeNames);
    public sealed virtual void Grant(ObjectPermissionSet permission, String[] granteeNames, bool grantGrant);
    public sealed virtual void Grant(ObjectPermissionSet permission, String[] granteeNames, bool grantGrant, string asRole);
    public sealed virtual void Revoke(ObjectPermissionSet permission, String[] granteeNames);
    public sealed virtual void Revoke(ObjectPermissionSet permission, String[] granteeNames, bool revokeGrant, bool cascade);
    public void Revoke(ObjectPermissionSet permission, String[] granteeNames, bool revokeGrant, bool cascade, string asRole);
    public sealed virtual void Deny(ObjectPermissionSet permission, string granteeName);
    public sealed virtual void Deny(ObjectPermissionSet permission, string granteeName, bool cascade);
    public sealed virtual void Grant(ObjectPermissionSet permission, string granteeName);
    public sealed virtual void Grant(ObjectPermissionSet permission, string granteeName, bool grantGrant);
    public sealed virtual void Grant(ObjectPermissionSet permission, string granteeName, bool grantGrant, string asRole);
    public sealed virtual void Revoke(ObjectPermissionSet permission, string granteeName);
    public void Revoke(ObjectPermissionSet permission, string granteeName, bool revokeGrant, bool cascade);
    public sealed virtual void Revoke(ObjectPermissionSet permission, string granteeName, bool revokeGrant, bool cascade, string asRole);
    public sealed virtual ObjectPermissionInfo[] EnumObjectPermissions();
    public sealed virtual ObjectPermissionInfo[] EnumObjectPermissions(string granteeName);
    public sealed virtual ObjectPermissionInfo[] EnumObjectPermissions(ObjectPermissionSet permissions);
    public sealed virtual ObjectPermissionInfo[] EnumObjectPermissions(string granteeName, ObjectPermissionSet permissions);
    public SequenceEvents get_Events();
}
[DefaultMemberAttribute("Item")]
public class Microsoft.SqlServer.Management.Smo.SequenceCollection : SchemaCollectionBase {
    public Database Parent { get; }
    public Sequence Item { get; }
    public Sequence Item { get; }
    public Sequence Item { get; }
    internal SequenceCollection(SqlSmoObject parentInstance);
    public Database get_Parent();
    public Sequence get_Item(int index);
    public Sequence get_Item(string name);
    public Sequence get_Item(string name, string schema);
    public void CopyTo(Sequence[] array, int index);
    public Sequence ItemById(int id);
    protected virtual Type GetCollectionElementType();
    internal virtual SqlSmoObject GetCollectionElementInstance(ObjectKeyBase key, SqlSmoState state);
    public void Add(Sequence sequence);
    internal SqlSmoObject GetObjectByName(string name);
}
public class Microsoft.SqlServer.Management.Smo.SequenceEvents : object {
    private ObjectEventsWorker serverEventsWorker;
    private Sequence parent;
    internal SequenceEvents(Sequence parent);
    public ObjectEventSet GetEventSelection();
    public void SubscribeToEvents(ObjectEventSet events);
    public void SubscribeToEvents(ObjectEventSet events, ServerEventHandler eventHandler);
    public void UnsubscribeFromEvents(ObjectEventSet events);
    public void UnsubscribeAllEvents();
    public void StartEvents();
    public void StopEvents();
    public void add_ServerEvent(ServerEventHandler value);
    public void remove_ServerEvent(ServerEventHandler value);
    private void InitializeEvents();
}
[CLSCompliantAttribute("False")]
public class Microsoft.SqlServer.Management.Smo.SequenceExtender : SmoObjectExtender`1<Sequence> {
    private StringCollection datatypeNames;
    private string selectedDatatypeName;
    private int defaultPrecision;
    private string selectedNumericPrecision;
    private bool hasMinimumValue;
    private bool hasMaximumValue;
    private string sequenceDatatypeName;
    private string sequenceNumericPrecision;
    private bool hasRestartValue;
    private object originalStartValue;
    [CompilerGeneratedAttribute]
private EventHandler permissionPageOnRunNow;
    private object permissionPageDataContainer;
    [CompilerGeneratedAttribute]
private EventHandler extendedPropertyPageOnRunNow;
    [CompilerGeneratedAttribute]
private EventHandler extendedPropertyPageCommitCellEdits;
    private object extendedPropertyPageDataContainer;
    private bool extendedPropertyPageIsDirty;
    [ExtendedPropertyAttribute]
public SqlSmoState State { get; }
    [ExtendedPropertyAttribute]
public SqlSmoObject CurrentObject { get; }
    [ExtendedPropertyAttribute]
public string Name { get; public set; }
    [ExtendedPropertyAttribute]
public string Schema { get; public set; }
    [ExtendedPropertyAttribute]
public string DatabaseName { get; }
    [ExtendedPropertyAttribute]
public ServerConnection ConnectionContext { get; }
    [ExtendedPropertyAttribute]
public StringCollection DatatypeNames { get; }
    [ExtendedPropertyAttribute]
public string SelectedDatatypeName { get; public set; }
    [ExtendedPropertyAttribute]
public int DefaultPrecision { get; }
    [ExtendedPropertyAttribute]
public string SelectedNumericPrecision { get; public set; }
    [ExtendedPropertyAttribute]
public bool HasMinimumValue { get; public set; }
    [ExtendedPropertyAttribute]
public bool HasMaximumValue { get; public set; }
    [ExtendedPropertyAttribute]
public string SequenceDatatypeName { get; }
    [ExtendedPropertyAttribute]
public string SequenceNumericPrecision { get; }
    [ExtendedPropertyAttribute]
public bool HasRestartValue { get; public set; }
    [ExtendedPropertyAttribute]
public object OriginalStartValue { get; public set; }
    [ExtendedPropertyAttribute]
public object PermissionPageOnRunNow { get; public set; }
    [ExtendedPropertyAttribute]
public object PermissionPageDataContainer { get; public set; }
    [ExtendedPropertyAttribute]
public object ExtendedPropertyPageOnRunNow { get; public set; }
    [ExtendedPropertyAttribute]
public object ExtendedPropertyPageCommitCellEdits { get; public set; }
    [ExtendedPropertyAttribute]
public object ExtendedPropertyPageDataContainer { get; public set; }
    [ExtendedPropertyAttribute]
public bool ExtendedPropertyPageIsDirty { get; public set; }
    public SequenceExtender(Sequence sequence);
    public SqlSmoState get_State();
    public SqlSmoObject get_CurrentObject();
    public string get_Name();
    public void set_Name(string value);
    public string get_Schema();
    public void set_Schema(string value);
    public string get_DatabaseName();
    public ServerConnection get_ConnectionContext();
    public StringCollection get_DatatypeNames();
    public string get_SelectedDatatypeName();
    public void set_SelectedDatatypeName(string value);
    private UserDefinedDataType GetUDDT(string datatypename);
    private static string UddtFullName(string schema, string name);
    public int get_DefaultPrecision();
    public string get_SelectedNumericPrecision();
    public void set_SelectedNumericPrecision(string value);
    public bool get_HasMinimumValue();
    public void set_HasMinimumValue(bool value);
    public bool get_HasMaximumValue();
    public void set_HasMaximumValue(bool value);
    public string get_SequenceDatatypeName();
    public string get_SequenceNumericPrecision();
    public bool get_HasRestartValue();
    public void set_HasRestartValue(bool value);
    public object get_OriginalStartValue();
    public void set_OriginalStartValue(object value);
    [CompilerGeneratedAttribute]
private void add_permissionPageOnRunNow(EventHandler value);
    [CompilerGeneratedAttribute]
private void remove_permissionPageOnRunNow(EventHandler value);
    public object get_PermissionPageOnRunNow();
    public void set_PermissionPageOnRunNow(object value);
    public object get_PermissionPageDataContainer();
    public void set_PermissionPageDataContainer(object value);
    [CompilerGeneratedAttribute]
private void add_extendedPropertyPageOnRunNow(EventHandler value);
    [CompilerGeneratedAttribute]
private void remove_extendedPropertyPageOnRunNow(EventHandler value);
    public object get_ExtendedPropertyPageOnRunNow();
    public void set_ExtendedPropertyPageOnRunNow(object value);
    [CompilerGeneratedAttribute]
private void add_extendedPropertyPageCommitCellEdits(EventHandler value);
    [CompilerGeneratedAttribute]
private void remove_extendedPropertyPageCommitCellEdits(EventHandler value);
    public object get_ExtendedPropertyPageCommitCellEdits();
    public void set_ExtendedPropertyPageCommitCellEdits(object value);
    public object get_ExtendedPropertyPageDataContainer();
    public void set_ExtendedPropertyPageDataContainer(object value);
    public bool get_ExtendedPropertyPageIsDirty();
    public void set_ExtendedPropertyPageIsDirty(bool value);
    public sealed virtual ValidationState Validate(string methodName, Object[] arguments);
}
[EvaluationModeAttribute("4")]
[PhysicalFacetAttribute]
[RootFacetAttribute("Microsoft.SqlServer.Management.Smo.Server")]
[SfcElementAttribute("48")]
public class Microsoft.SqlServer.Management.Smo.Server : SqlSmoObject {
    private ExecutionManager m_ExecutionManager;
    private static string DomainName;
    private ServerConnection serverConnection;
    private SortedList collationCache;
    private bool overrideValueChecking;
    private bool defaultTextMode;
    private Configuration m_config;
    private AffinityInfo affinityInfo;
    private ServerProxyAccount proxyAccount;
    private SqlMail mail;
    private DatabaseCollection m_Databases;
    private EndpointCollection m_Endpoints;
    private LanguageCollection m_Languages;
    private SystemMessageCollection systemMessages;
    private UserDefinedMessageCollection userDefinedMessages;
    private CredentialCollection credentials;
    private CryptographicProviderCollection cryptographicProviders;
    private LoginCollection m_Logins;
    private ServerRoleCollection m_Roles;
    private LinkedServerCollection m_LinkedServers;
    private SystemDataTypeCollection systemDataTypes;
    private JobServer jobServer;
    private ResourceGovernor resourceGovernor;
    private ServiceMasterKey masterKey;
    private SmartAdmin smartAdmin;
    private Settings m_Settings;
    private Information m_Information;
    private UserOptions m_UserOption;
    private BackupDeviceCollection m_BackupDevices;
    private FullTextService fullTextService;
    private ServerDdlTriggerCollection serverDdlTriggerCollection;
    private AuditCollection auditCollection;
    private ServerAuditSpecificationCollection serverAuditSpecificationCollection;
    private AvailabilityGroupCollection m_AvailabilityGroups;
    private DataTable collations;
    private Dictionary`2<string, CollationVersion> collationVersionDictionary;
    [CompilerGeneratedAttribute]
private IDictionary`2<Type, IList`1<string>> <TypeInitFields>k__BackingField;
    private bool useAllFieldsForInit;
    private Hashtable objectMetadataHash;
    private static HashSet`1<string> typesToIgnore;
    private object syncRoot;
    private ServerEvents events;
    private OleDbProviderSettingsCollection m_OleDbProviderSettings;
    private SfcConnectionContext sfcConnectionContext;
    public ExecutionManager ExecutionManager { get; }
    [SfcKeyAttribute("0")]
[SfcPropertyAttribute("3072")]
public string Name { get; }
    [SfcSerializationAdapterAttribute("Microsoft.SqlServer.Management.Smo.VersionSerializationAdapter")]
[SfcPropertyAttribute("3072")]
public Version Version { get; internal set; }
    [SfcPropertyAttribute("3072")]
public Edition EngineEdition { get; }
    [SfcPropertyAttribute("3072")]
public Version ResourceVersion { get; }
    [SfcPropertyAttribute("1024")]
public Version BuildClrVersion { get; }
    public static string UrnSuffix { get; }
    internal UserPermissionCollection Permissions { get; }
    public bool DefaultTextMode { get; public set; }
    [SfcObjectAttribute("2", "0")]
public Configuration Configuration { get; }
    [SfcObjectAttribute("2", "0")]
public AffinityInfo AffinityInfo { get; }
    [SfcObjectAttribute("0", "0")]
public ServerProxyAccount ProxyAccount { get; }
    [SfcObjectAttribute("0", "0")]
public SqlMail Mail { get; }
    [SfcObjectAttribute("0", "0", "Microsoft.SqlServer.Management.Smo.Database", "32")]
public DatabaseCollection Databases { get; }
    [SfcObjectAttribute("0", "0", "Microsoft.SqlServer.Management.Smo.Endpoint")]
public EndpointCollection Endpoints { get; }
    [SfcObjectAttribute("0", "0", "Microsoft.SqlServer.Management.Smo.Language")]
public LanguageCollection Languages { get; }
    [SfcObjectAttribute("0", "0", "Microsoft.SqlServer.Management.Smo.SystemMessage")]
public SystemMessageCollection SystemMessages { get; }
    [SfcObjectAttribute("0", "0", "Microsoft.SqlServer.Management.Smo.UserDefinedMessage")]
public UserDefinedMessageCollection UserDefinedMessages { get; }
    [SfcObjectAttribute("0", "0", "Microsoft.SqlServer.Management.Smo.Credential")]
public CredentialCollection Credentials { get; }
    [SfcObjectAttribute("0", "0", "Microsoft.SqlServer.Management.Smo.CryptographicProvider")]
public CryptographicProviderCollection CryptographicProviders { get; }
    [SfcObjectAttribute("0", "0", "Microsoft.SqlServer.Management.Smo.Login")]
public LoginCollection Logins { get; }
    [SfcObjectAttribute("0", "0", "Microsoft.SqlServer.Management.Smo.ServerRole")]
public ServerRoleCollection Roles { get; }
    [SfcObjectAttribute("0", "0", "Microsoft.SqlServer.Management.Smo.LinkedServer")]
public LinkedServerCollection LinkedServers { get; }
    [SfcObjectAttribute("0", "0", "Microsoft.SqlServer.Management.Smo.SystemDataType")]
public SystemDataTypeCollection SystemDataTypes { get; }
    [SfcObjectAttribute("0", "0")]
public JobServer JobServer { get; }
    [SfcObjectAttribute("0", "0")]
public ResourceGovernor ResourceGovernor { get; }
    [SfcObjectAttribute("0", "0")]
public ServiceMasterKey ServiceMasterKey { get; }
    [SfcObjectAttribute("0", "0")]
public SmartAdmin SmartAdmin { get; }
    [SfcObjectAttribute("2", "0")]
public Settings Settings { get; }
    [SfcObjectAttribute("2", "0")]
public Information Information { get; }
    [SfcObjectAttribute("2", "0")]
public UserOptions UserOptions { get; }
    [SfcObjectAttribute("0", "0", "Microsoft.SqlServer.Management.Smo.BackupDevice")]
public BackupDeviceCollection BackupDevices { get; }
    [SfcObjectAttribute("0", "0")]
public FullTextService FullTextService { get; }
    [SfcObjectAttribute("0", "0", "Microsoft.SqlServer.Management.Smo.ServerDdlTrigger")]
public ServerDdlTriggerCollection Triggers { get; }
    [SfcObjectAttribute("0", "0", "Microsoft.SqlServer.Management.Smo.Audit")]
public AuditCollection Audits { get; }
    [SfcObjectAttribute("0", "0", "Microsoft.SqlServer.Management.Smo.ServerAuditSpecification")]
public ServerAuditSpecificationCollection ServerAuditSpecifications { get; }
    [SfcObjectAttribute("0", "0", "Microsoft.SqlServer.Management.Smo.AvailabilityGroup")]
public AvailabilityGroupCollection AvailabilityGroups { get; }
    private IDictionary`2<Type, IList`1<string>> TypeInitFields { get; }
    public ServerConnection ConnectionContext { get; }
    public ServerEvents Events { get; }
    [SfcObjectAttribute("0", "0", "Microsoft.SqlServer.Management.Smo.OleDbProviderSettings")]
public OleDbProviderSettingsCollection OleDbProviderSettings { get; }
    private SfcConnectionContext Microsoft.SqlServer.Management.Sdk.Sfc.ISfcHasConnection.ConnectionContext { get; }
    private string Microsoft.SqlServer.Management.Sdk.Sfc.ISfcDomainLite.DomainName { get; }
    private string Microsoft.SqlServer.Management.Sdk.Sfc.ISfcDomainLite.DomainInstanceName { get; }
    public AvailabilityGroupClusterType[] SupportedAvailabilityGroupClusterTypes { get; }
    public AvailabilityGroupClusterType DefaultAvailabilityGroupClusterType { get; }
    public bool IsMemberOfWsfcCluster { get; }
    public bool IsConfigurationOnlyAvailabilityReplicaSupported { get; }
    public bool IsAvailabilityReplicaSeedingModeSupported { get; }
    public bool IsCrossPlatformAvailabilityGroupSupported { get; }
    public bool IsReadOnlyListWithLoadBalancingSupported { get; }
    private bool Microsoft.SqlServer.Management.Sdk.Sfc.ISfcSupportsDesignMode.IsDesignMode { get; }
    [SfcPropertyAttribute("1024")]
public AuditLevel AuditLevel { get; public set; }
    [SfcPropertyAttribute("1024")]
public string BackupDirectory { get; public set; }
    [SfcPropertyAttribute("1056")]
public string BrowserServiceAccount { get; }
    [SfcPropertyAttribute("1056")]
public ServiceStartMode BrowserStartMode { get; }
    [SfcPropertyAttribute("1024", "v2.0.50727")]
public string BuildClrVersionString { get; }
    [SfcPropertyAttribute("3104")]
public int BuildNumber { get; }
    [SfcPropertyAttribute("1024")]
public string ClusterName { get; }
    [SfcPropertyAttribute("1024")]
public ClusterQuorumState ClusterQuorumState { get; }
    [SfcPropertyAttribute("1024")]
public ClusterQuorumType ClusterQuorumType { get; }
    [SfcPropertyAttribute("3072")]
public string Collation { get; }
    [SfcPropertyAttribute("3072")]
public int CollationID { get; }
    [SfcPropertyAttribute("3072")]
public int ComparisonStyle { get; }
    [SfcPropertyAttribute("1024")]
public string ComputerNamePhysicalNetBIOS { get; }
    [SfcPropertyAttribute("1024")]
public string DefaultFile { get; public set; }
    [SfcPropertyAttribute("1024")]
public string DefaultLog { get; public set; }
    [SfcPropertyAttribute("3072")]
public string Edition { get; }
    [SfcPropertyAttribute("1024")]
public string ErrorLogPath { get; }
    [SfcPropertyAttribute("1056")]
public int ErrorLogSizeKb { get; public set; }
    [SfcPropertyAttribute("1024")]
public FileStreamEffectiveLevel FilestreamLevel { get; }
    [SfcPropertyAttribute("1024")]
public string FilestreamShareName { get; }
    [SfcPropertyAttribute("1024")]
public HadrManagerStatus HadrManagerStatus { get; }
    [SfcPropertyAttribute("1056")]
public string HardwareGeneration { get; }
    [SfcPropertyAttribute("1056")]
public string HostDistribution { get; }
    [SfcPropertyAttribute("3104")]
public string HostPlatform { get; }
    [SfcPropertyAttribute("1056")]
public string HostRelease { get; }
    [SfcPropertyAttribute("1056")]
public string HostServicePackLevel { get; }
    [SfcPropertyAttribute("1056")]
public int HostSku { get; }
    [SfcPropertyAttribute("1024")]
public string InstallDataDirectory { get; }
    [SfcPropertyAttribute("1024")]
public string InstallSharedDirectory { get; }
    [SfcPropertyAttribute("3072")]
public string InstanceName { get; }
    [SfcPropertyAttribute("3072")]
public bool IsCaseSensitive { get; }
    [SfcPropertyAttribute("1024")]
public bool IsClustered { get; }
    [SfcPropertyAttribute("3072")]
public bool IsFullTextInstalled { get; }
    [SfcPropertyAttribute("1024")]
public bool IsHadrEnabled { get; }
    [SfcPropertyAttribute("3104")]
public bool IsJsonDataTypeEnabled { get; }
    [SfcPropertyAttribute("1024")]
public bool IsPolyBaseInstalled { get; }
    [SfcPropertyAttribute("3072")]
public bool IsSingleUser { get; }
    [SfcPropertyAttribute("3104")]
public bool IsXTPSupported { get; }
    [SfcPropertyAttribute("1056")]
public string Language { get; }
    [DmfIgnorePropertyAttribute]
[SfcPropertyAttribute("1024")]
public ServerLoginMode LoginMode { get; public set; }
    [SfcPropertyAttribute("1024")]
public string MailProfile { get; public set; }
    [SfcPropertyAttribute("1024")]
public string MasterDBLogPath { get; }
    [SfcPropertyAttribute("1024")]
public string MasterDBPath { get; }
    [SfcPropertyAttribute("3072")]
public byte MaxPrecision { get; }
    [SfcPropertyAttribute("1024")]
public bool NamedPipesEnabled { get; }
    [SfcPropertyAttribute("1024")]
public string NetName { get; }
    [SfcPropertyAttribute("1024")]
public int NumberOfLogFiles { get; public set; }
    [SfcPropertyAttribute("1056")]
public string OSVersion { get; }
    [SfcPropertyAttribute("3072")]
public string PathSeparator { get; }
    [SfcPropertyAttribute("1024")]
public PerfMonMode PerfMonMode { get; public set; }
    [SfcPropertyAttribute("1056")]
public int PhysicalMemory { get; }
    [SfcPropertyAttribute("1056")]
public long PhysicalMemoryUsageInKB { get; }
    [SfcPropertyAttribute("1056")]
public string Platform { get; }
    [SfcPropertyAttribute("1056")]
public int Processors { get; }
    [SfcPropertyAttribute("1056")]
public int ProcessorUsage { get; }
    [SfcPropertyAttribute("1056")]
public string Product { get; }
    [SfcPropertyAttribute("3072")]
public string ProductLevel { get; }
    [SfcPropertyAttribute("3072")]
public string ProductUpdateLevel { get; }
    [SfcPropertyAttribute("1056")]
public int ReservedStorageSizeMB { get; }
    [SfcPropertyAttribute("3072")]
public DateTime ResourceLastUpdateDateTime { get; }
    [SfcPropertyAttribute("3072", "10.50.0000")]
public string ResourceVersionString { get; }
    [SfcPropertyAttribute("1024")]
public string RootDirectory { get; }
    [SfcPropertyAttribute("3072")]
public DatabaseEngineType ServerType { get; }
    [SfcPropertyAttribute("1024")]
public string ServiceAccount { get; }
    [SfcPropertyAttribute("1056")]
public string ServiceInstanceId { get; }
    [SfcPropertyAttribute("1024")]
public string ServiceName { get; }
    [SfcPropertyAttribute("1024")]
public ServiceStartMode ServiceStartMode { get; }
    [SfcPropertyAttribute("1056")]
public string ServiceTier { get; }
    [SfcPropertyAttribute("3072")]
public short SqlCharSet { get; }
    [SfcPropertyAttribute("3072")]
public string SqlCharSetName { get; }
    [SfcPropertyAttribute("1024")]
public string SqlDomainGroup { get; }
    [SfcPropertyAttribute("3072")]
public short SqlSortOrder { get; }
    [SfcPropertyAttribute("3072")]
public string SqlSortOrderName { get; }
    [SfcPropertyAttribute("3072")]
public ServerStatus Status { get; }
    [SfcPropertyAttribute("1024")]
public int TapeLoadWaitTime { get; public set; }
    [SfcPropertyAttribute("1024")]
public bool TcpEnabled { get; }
    [SfcPropertyAttribute("1056")]
public int UsedStorageSizeMB { get; }
    [SfcPropertyAttribute("3104")]
public int VersionMajor { get; }
    [SfcPropertyAttribute("3104")]
public int VersionMinor { get; }
    [SfcPropertyAttribute("3072")]
public string VersionString { get; }
    public Server(string name);
    public Server(ServerConnection serverConnection);
    private static Server();
    private bool IsAzureDbScopedConnection(ServerConnection sc);
    public virtual ExecutionManager get_ExecutionManager();
    private void Init();
    public sealed virtual string get_Name();
    public Version get_Version();
    internal void set_Version(Version value);
    public sealed virtual Edition get_EngineEdition();
    public Version get_ResourceVersion();
    public Version get_BuildClrVersion();
    internal virtual void AddScriptPermission(StringCollection query, ScriptingPreferences sp);
    internal void SetServerNameFromConnectionInfo();
    private string NormalizeServerName(string name);
    public static string get_UrnSuffix();
    internal virtual UserPermissionCollection get_Permissions();
    public IComparer GetStringComparer(string collationName);
    internal int GetLCIDCollation(string collationName);
    private sealed virtual override object Microsoft.SqlServer.Management.Sdk.Sfc.IAlienRoot.SfcHelper_GetSmoObject(string urn);
    private sealed virtual override DataTable Microsoft.SqlServer.Management.Sdk.Sfc.IAlienRoot.SfcHelper_GetDataTable(object connection, string urn, String[] fields, OrderBy[] orderByFields);
    private sealed virtual override void Microsoft.SqlServer.Management.Sdk.Sfc.IAlienRoot.DesignModeInitialize();
    private sealed virtual override List`1<string> Microsoft.SqlServer.Management.Sdk.Sfc.IAlienRoot.SfcHelper_GetSmoObjectQuery(string urn, String[] fields, OrderBy[] orderByFields);
    private List`1<string> GetSmoObjectQuery(string queryString, String[] fields, OrderBy[] orderByFields);
    private void GetSmoObjectQueryRec(Urn urn);
    public SqlSmoObject GetSmoObject(Urn urn);
    private SqlSmoObject GetSmoObjectRec(Urn urn);
    public sealed virtual void Alter();
    public void Alter(bool overrideValueChecking);
    internal virtual void ScriptAlter(StringCollection query, ScriptingPreferences sp);
    public bool get_DefaultTextMode();
    public void set_DefaultTextMode(bool value);
    public void DetachDatabase(string databaseName, bool updateStatistics);
    public void DetachDatabase(string databaseName, bool updateStatistics, bool removeFulltextIndexFile);
    private void DetachDatabaseWorker(string name, bool updateStatistics, bool emitFT, bool dropFulltextIndexFile);
    private void AttachDatabaseWorker(string name, StringCollection files, string owner, AttachOptions attachOptions);
    public void AttachDatabase(string name, StringCollection files, string owner);
    public void AttachDatabase(string name, StringCollection files);
    public void AttachDatabase(string name, StringCollection files, AttachOptions attachOptions);
    public void AttachDatabase(string name, StringCollection files, string owner, AttachOptions attachOptions);
    private void CheckValidUrnServerLevel(XPathExpressionBlock xb);
    public int CompareUrn(Urn urn1, Urn urn2);
    private int CompareUrnWorker(Urn urn1, Urn urn2);
    public Configuration get_Configuration();
    public AffinityInfo get_AffinityInfo();
    public ServerProxyAccount get_ProxyAccount();
    public SqlMail get_Mail();
    public DatabaseCollection get_Databases();
    public EndpointCollection get_Endpoints();
    public LanguageCollection get_Languages();
    public SystemMessageCollection get_SystemMessages();
    public UserDefinedMessageCollection get_UserDefinedMessages();
    public CredentialCollection get_Credentials();
    public CryptographicProviderCollection get_CryptographicProviders();
    public LoginCollection get_Logins();
    public ServerRoleCollection get_Roles();
    public LinkedServerCollection get_LinkedServers();
    public SystemDataTypeCollection get_SystemDataTypes();
    public JobServer get_JobServer();
    public ResourceGovernor get_ResourceGovernor();
    public ServiceMasterKey get_ServiceMasterKey();
    public SmartAdmin get_SmartAdmin();
    public Settings get_Settings();
    public Information get_Information();
    public UserOptions get_UserOptions();
    public BackupDeviceCollection get_BackupDevices();
    public FullTextService get_FullTextService();
    public ServerDdlTriggerCollection get_Triggers();
    public AuditCollection get_Audits();
    public ServerAuditSpecificationCollection get_ServerAuditSpecifications();
    public AvailabilityGroupCollection get_AvailabilityGroups();
    public DataTable EnumCollations();
    internal CollationVersion GetCollationVersion(string collationName);
    private void InitializeCollationVersionDictionary();
    private CollationVersion FindCollationVersion(string collationName);
    internal DataTable EnumPerfInfoInternal(string objectName, string counterName, string instanceName);
    public DataTable EnumPerformanceCounters();
    public DataTable EnumPerformanceCounters(string objectName);
    public DataTable EnumPerformanceCounters(string objectName, string counterName);
    public DataTable EnumPerformanceCounters(string objectName, string counterName, string instanceName);
    public DataTable EnumDatabaseMirrorWitnessRoles();
    public DataTable EnumDatabaseMirrorWitnessRoles(string database);
    public DataTable EnumErrorLogs();
    public DataTable ReadErrorLog();
    public DataTable ReadErrorLog(int logNumber);
    public void KillDatabase(string database);
    public void KillProcess(int processId);
    public int GetActiveDBConnectionCount(string dbName);
    public void KillAllProcesses(string databaseName);
    public DataTable EnumDirectories(string path);
    public DataTable EnumLocks();
    public DataTable EnumLocks(int processId);
    public DataTable EnumWindowsDomainGroups();
    public DataTable EnumWindowsDomainGroups(string domain);
    public DataTable EnumProcesses();
    public DataTable EnumProcesses(int processId);
    public DataTable EnumProcesses(bool excludeSystemProcesses);
    public DataTable EnumProcesses(string loginName);
    public DataTable EnumStartupProcedures();
    public void SetTraceFlag(int number, bool isOn);
    public bool IsTraceFlagOn(int traceFlag, bool isGlobalTraceFlag);
    public DataTable EnumActiveGlobalTraceFlags();
    public DataTable EnumActiveCurrentSessionTraceFlags();
    internal DataTable EnumAccountInfo(string arguments, string filter);
    public DataTable EnumWindowsUserInfo();
    public DataTable EnumWindowsUserInfo(string account);
    public DataTable EnumWindowsUserInfo(string account, bool listPermissionPaths);
    public DataTable EnumWindowsGroupInfo();
    public DataTable EnumWindowsGroupInfo(string group);
    public DataTable EnumWindowsGroupInfo(string group, bool listMembers);
    public DataTable EnumAvailableMedia();
    public DataTable EnumAvailableMedia(MediaTypes media);
    public DataTable EnumServerAttributes();
    protected virtual void CleanObject();
    internal virtual PropagateInfo[] GetPropagateInfo(PropagateAction action);
    [CompilerGeneratedAttribute]
private IDictionary`2<Type, IList`1<string>> get_TypeInitFields();
    public StringCollection GetDefaultInitFields(Type typeObject);
    public StringCollection GetDefaultInitFields(Type typeObject, DatabaseEngineEdition databaseEngineEdition);
    public void SetDefaultInitFields(Type typeObject, StringCollection fields);
    public void SetDefaultInitFields(Type typeObject, StringCollection fields, DatabaseEngineEdition databaseEngineEdition);
    public void SetDefaultInitFields(Type typeObject, String[] fields);
    public void SetDefaultInitFields(Type typeObject, DatabaseEngineEdition databaseEngineEdition, String[] fields);
    public StringCollection GetPropertyNames(Type typeObject, DatabaseEngineEdition databaseEngineEdition);
    public void SetDefaultInitFields(Type typeObject, bool allFields);
    public void SetDefaultInitFields(Type typeObject, bool allFields, DatabaseEngineEdition databaseEngineEdition);
    public void SetDefaultInitFields(bool allFields);
    internal bool IsInitField(Type typeObject, string fieldName);
    internal String[] GetDefaultInitFieldsInternal(Type typeObject, DatabaseEngineEdition databaseEngineEdition);
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.Smo.Server/<CreateInitFieldsColl>d__204")]
private IEnumerable`1<string> CreateInitFieldsColl(Type typeObject);
    internal String[] GetScriptInitFieldsInternal(Type childType, Type parentType, ScriptingPreferences sp, DatabaseEngineEdition databaseEngineEdition);
    private static String[] AddNecessaryFields(Type childType, String[] res2);
    internal String[] GetScriptInitFieldsInternal2(Type childType, Type parentType, ScriptingPreferences sp, DatabaseEngineEdition databaseEngineEdition);
    internal bool GetScriptInitExpensiveFieldsInternal(Type childType, Type parentType, ScriptingPreferences sp, String[]& fields, DatabaseEngineEdition databaseEngineEdition);
    private String[] GetScriptInitExpensiveFieldsInternal2(Type childType, Type parentType, ScriptingPreferences sp, DatabaseEngineEdition databaseEngineEdition);
    public sealed virtual ServerConnection get_ConnectionContext();
    internal ExecutionManager GetExecutionManager();
    public void DeleteBackupHistory(DateTime oldestDate);
    public DataTable DetachedDatabaseInfo(string mdfName);
    public StringCollection EnumDetachedDatabaseFiles(string mdfName);
    public StringCollection EnumDetachedLogFiles(string mdfName);
    public bool IsDetachedPrimaryFile(string mdfName);
    public bool IsWindowsGroupMember(string windowsGroup, string windowsUser);
    public StringCollection EnumMembers(RoleTypes roleType);
    public ServerVersion PingSqlServerVersion(string serverName, string login, string password);
    public ServerVersion PingSqlServerVersion(string serverName);
    public void DeleteBackupHistory(int mediaSetId);
    public void DeleteBackupHistory(string database);
    public virtual void Refresh();
    public ServerEvents get_Events();
    protected virtual void GetUrnRecursive(StringBuilder urnbuilder, UrnIdOption idOption);
    public sealed virtual StringCollection Script();
    public sealed virtual StringCollection Script(ScriptingOptions scriptingOptions);
    internal virtual void ScriptCreate(StringCollection query, ScriptingPreferences sp);
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.Smo.Server/<RegistryProperties>d__235")]
internal static IEnumerable RegistryProperties(DatabaseEngineType engineType);
    private void ScriptProperties(StringCollection query, ScriptingPreferences sp);
    private void ScriptRegSetting(StringCollection query, String[] prop, object oValue);
    private void ScriptDeleteRegSetting(StringCollection query, String[] prop);
    public OleDbProviderSettingsCollection get_OleDbProviderSettings();
    public bool IsSupportedProperty(Type type, string propertyName, DatabaseEngineEdition databaseEngineEdition);
    public bool IsSupportedProperty(string propertyName, DatabaseEngineEdition databaseEngineEdition);
    public bool IsSupportedProperty(Expression`1<Func`2<T, object>> expression, DatabaseEngineEdition databaseEngineEdition);
    private sealed virtual override SfcConnectionContext Microsoft.SqlServer.Management.Sdk.Sfc.ISfcHasConnection.get_ConnectionContext();
    private sealed virtual override ISfcConnection Microsoft.SqlServer.Management.Sdk.Sfc.ISfcHasConnection.GetConnection(SfcObjectQueryMode activeQueriesMode);
    private sealed virtual override ISfcConnection Microsoft.SqlServer.Management.Sdk.Sfc.ISfcHasConnection.GetConnection();
    private sealed virtual override void Microsoft.SqlServer.Management.Sdk.Sfc.ISfcHasConnection.SetConnection(ISfcConnection connection);
    private sealed virtual override int Microsoft.SqlServer.Management.Sdk.Sfc.ISfcDomainLite.GetLogicalVersion();
    private sealed virtual override string Microsoft.SqlServer.Management.Sdk.Sfc.ISfcDomainLite.get_DomainName();
    private sealed virtual override string Microsoft.SqlServer.Management.Sdk.Sfc.ISfcDomainLite.get_DomainInstanceName();
    public AvailabilityGroupClusterType[] get_SupportedAvailabilityGroupClusterTypes();
    public AvailabilityGroupClusterType get_DefaultAvailabilityGroupClusterType();
    public bool get_IsMemberOfWsfcCluster();
    public void JoinAvailabilityGroup(string availabilityGroupName);
    public void JoinAvailabilityGroup(string availabilityGroupName, AvailabilityGroupClusterType availabilityGroupClusterType);
    public void GrantAvailabilityGroupCreateDatabasePrivilege(string availabilityGroupName);
    public void RevokeAvailabilityGroupCreateDatabasePrivilege(string availabilityGroupName);
    private void SetAvailabilityGroupCreateDatabasePrivilege(string availabilityGroupName, bool grantPrivilege);
    public DataTable EnumClusterSubnets();
    public DataTable EnumClusterMembersState();
    public bool get_IsConfigurationOnlyAvailabilityReplicaSupported();
    public bool get_IsAvailabilityReplicaSeedingModeSupported();
    public bool get_IsCrossPlatformAvailabilityGroupSupported();
    public bool get_IsReadOnlyListWithLoadBalancingSupported();
    public bool FileExists(string filePath);
    public bool ParentDirectoryExists(string filePath);
    private DataRow QueryFileInformation(string filePath);
    private sealed virtual override bool Microsoft.SqlServer.Management.Sdk.Sfc.ISfcSupportsDesignMode.get_IsDesignMode();
    internal virtual SqlPropertyMetadataProvider GetPropertyMetadataProvider();
    public sealed virtual AuditLevel get_AuditLevel();
    public sealed virtual void set_AuditLevel(AuditLevel value);
    public sealed virtual string get_BackupDirectory();
    public sealed virtual void set_BackupDirectory(string value);
    public string get_BrowserServiceAccount();
    public ServiceStartMode get_BrowserStartMode();
    public sealed virtual string get_BuildClrVersionString();
    public sealed virtual int get_BuildNumber();
    public string get_ClusterName();
    public ClusterQuorumState get_ClusterQuorumState();
    public ClusterQuorumType get_ClusterQuorumType();
    public sealed virtual string get_Collation();
    public sealed virtual int get_CollationID();
    public sealed virtual int get_ComparisonStyle();
    public sealed virtual string get_ComputerNamePhysicalNetBIOS();
    public sealed virtual string get_DefaultFile();
    public sealed virtual void set_DefaultFile(string value);
    public sealed virtual string get_DefaultLog();
    public sealed virtual void set_DefaultLog(string value);
    public sealed virtual string get_Edition();
    public sealed virtual string get_ErrorLogPath();
    public int get_ErrorLogSizeKb();
    public void set_ErrorLogSizeKb(int value);
    public FileStreamEffectiveLevel get_FilestreamLevel();
    public string get_FilestreamShareName();
    public HadrManagerStatus get_HadrManagerStatus();
    public string get_HardwareGeneration();
    public string get_HostDistribution();
    public string get_HostPlatform();
    public string get_HostRelease();
    public string get_HostServicePackLevel();
    public int get_HostSku();
    public string get_InstallDataDirectory();
    public string get_InstallSharedDirectory();
    public string get_InstanceName();
    public sealed virtual bool get_IsCaseSensitive();
    public sealed virtual bool get_IsClustered();
    public sealed virtual bool get_IsFullTextInstalled();
    public sealed virtual bool get_IsHadrEnabled();
    public bool get_IsJsonDataTypeEnabled();
    public sealed virtual bool get_IsPolyBaseInstalled();
    public sealed virtual bool get_IsSingleUser();
    public sealed virtual bool get_IsXTPSupported();
    public sealed virtual string get_Language();
    public sealed virtual ServerLoginMode get_LoginMode();
    public void set_LoginMode(ServerLoginMode value);
    public sealed virtual string get_MailProfile();
    public sealed virtual void set_MailProfile(string value);
    public sealed virtual string get_MasterDBLogPath();
    public sealed virtual string get_MasterDBPath();
    public sealed virtual byte get_MaxPrecision();
    public bool get_NamedPipesEnabled();
    public sealed virtual string get_NetName();
    public sealed virtual int get_NumberOfLogFiles();
    public sealed virtual void set_NumberOfLogFiles(int value);
    public sealed virtual string get_OSVersion();
    public string get_PathSeparator();
    public sealed virtual PerfMonMode get_PerfMonMode();
    public sealed virtual void set_PerfMonMode(PerfMonMode value);
    public sealed virtual int get_PhysicalMemory();
    public long get_PhysicalMemoryUsageInKB();
    public sealed virtual string get_Platform();
    public sealed virtual int get_Processors();
    public int get_ProcessorUsage();
    public sealed virtual string get_Product();
    public sealed virtual string get_ProductLevel();
    public string get_ProductUpdateLevel();
    public int get_ReservedStorageSizeMB();
    public sealed virtual DateTime get_ResourceLastUpdateDateTime();
    public sealed virtual string get_ResourceVersionString();
    public sealed virtual string get_RootDirectory();
    public DatabaseEngineType get_ServerType();
    public string get_ServiceAccount();
    public string get_ServiceInstanceId();
    public string get_ServiceName();
    public ServiceStartMode get_ServiceStartMode();
    public string get_ServiceTier();
    public sealed virtual short get_SqlCharSet();
    public sealed virtual string get_SqlCharSetName();
    public string get_SqlDomainGroup();
    public sealed virtual short get_SqlSortOrder();
    public sealed virtual string get_SqlSortOrderName();
    public ServerStatus get_Status();
    public sealed virtual int get_TapeLoadWaitTime();
    public sealed virtual void set_TapeLoadWaitTime(int value);
    public bool get_TcpEnabled();
    public int get_UsedStorageSizeMB();
    public sealed virtual int get_VersionMajor();
    public sealed virtual int get_VersionMinor();
    public sealed virtual string get_VersionString();
    internal virtual String[] GetNonAlterableProperties();
    internal virtual object GetPropertyDefaultValue(string propname);
    public void Deny(ServerPermissionSet permission, String[] granteeNames);
    public void Deny(ServerPermissionSet permission, String[] granteeNames, bool cascade);
    public void Grant(ServerPermissionSet permission, String[] granteeNames);
    public void Grant(ServerPermissionSet permission, String[] granteeNames, bool grantGrant);
    public void Grant(ServerPermissionSet permission, String[] granteeNames, bool grantGrant, string asRole);
    public void Revoke(ServerPermissionSet permission, String[] granteeNames);
    public void Revoke(ServerPermissionSet permission, String[] granteeNames, bool revokeGrant, bool cascade);
    public void Revoke(ServerPermissionSet permission, String[] granteeNames, bool revokeGrant, bool cascade, string asRole);
    public void Deny(ServerPermissionSet permission, string granteeName);
    public void Deny(ServerPermissionSet permission, string granteeName, bool cascade);
    public void Grant(ServerPermissionSet permission, string granteeName);
    public void Grant(ServerPermissionSet permission, string granteeName, bool grantGrant);
    public void Grant(ServerPermissionSet permission, string granteeName, bool grantGrant, string asRole);
    public void Revoke(ServerPermissionSet permission, string granteeName);
    public void Revoke(ServerPermissionSet permission, string granteeName, bool revokeGrant, bool cascade);
    public void Revoke(ServerPermissionSet permission, string granteeName, bool revokeGrant, bool cascade, string asRole);
    public ServerPermissionInfo[] EnumServerPermissions();
    public ServerPermissionInfo[] EnumServerPermissions(string granteeName);
    public ServerPermissionInfo[] EnumServerPermissions(ServerPermissionSet permissions);
    public ServerPermissionInfo[] EnumServerPermissions(string granteeName, ServerPermissionSet permissions);
    public ObjectPermissionInfo[] EnumObjectPermissions();
    public ObjectPermissionInfo[] EnumObjectPermissions(string granteeName);
    public ObjectPermissionInfo[] EnumObjectPermissions(ObjectPermissionSet permissions);
    public ObjectPermissionInfo[] EnumObjectPermissions(string granteeName, ObjectPermissionSet permissions);
}
public class Microsoft.SqlServer.Management.Smo.ServerAdapter : ServerAdapterBase {
    public ServerAdapter(Server obj);
}
public abstract class Microsoft.SqlServer.Management.Smo.ServerAdapterBase : object {
    private Server wrappedObject;
    protected Server Server { get; }
    public AuditLevel LoginAuditLevel { get; public set; }
    public ServerLoginMode LoginMode { get; }
    public string ServiceName { get; }
    public ServiceStartMode ServiceStartMode { get; }
    public string InstanceName { get; }
    public FileStreamEffectiveLevel FilestreamLevel { get; }
    public string FilestreamShareName { get; }
    public string Collation { get; }
    public string SqlDomainGroup { get; }
    public string InstallDataDirectory { get; }
    public string BackupDirectory { get; }
    public string DefaultFile { get; }
    public string DefaultLog { get; }
    public bool NamedPipesEnabled { get; }
    public bool TcpEnabled { get; }
    public string InstallSharedDirectory { get; }
    public ServiceStartMode BrowserStartMode { get; }
    public string BrowserServiceAccount { get; }
    public bool ContainmentEnabled { get; public set; }
    public bool AdHocRemoteQueriesEnabled { get; public set; }
    public int AffinityMask { get; public set; }
    public int Affinity64Mask { get; public set; }
    public int AffinityIOMask { get; public set; }
    public int Affinity64IOMask { get; public set; }
    public bool AgentXPsEnabled { get; public set; }
    public bool AllowUpdates { get; public set; }
    public bool AweEnabled { get; public set; }
    public bool C2AuditTracingEnabled { get; public set; }
    public int BlockedProcessThreshold { get; public set; }
    public bool DefaultBackupCompressionEnabled { get; public set; }
    public bool ClrIntegrationEnabled { get; public set; }
    public bool CommonCriteriaComplianceEnabled { get; }
    public int CostThresholdForParallelism { get; public set; }
    public bool CrossDBOwnershipChainingEnabled { get; public set; }
    public int CursorThreshold { get; public set; }
    public bool ExtensibleKeyManagementEnabled { get; public set; }
    public bool DatabaseMailEnabled { get; public set; }
    public bool DefaultTraceEnabled { get; public set; }
    public int DefaultFullTextLanguage { get; public set; }
    public int DefaultLanguage { get; public set; }
    public bool DisallowResultsFromTriggers { get; public set; }
    public FilestreamAccessLevelType FilestreamAccessLevel { get; public set; }
    public bool OptimizeAdhocWorkloads { get; public set; }
    public int FillFactor { get; public set; }
    public int FullTextCrawlBandwidthMin { get; public set; }
    public int FullTextCrawlBandwidthMax { get; public set; }
    public int FullTextNotifyBandwidthMin { get; public set; }
    public int FullTextNotifyBandwidthMax { get; public set; }
    public int FullTextCrawlRangeMax { get; public set; }
    public InDoubtTransactionResolutionType InDoubtTransactionResolution { get; public set; }
    public int IndexCreateMemory { get; public set; }
    public bool LightweightPoolingEnabled { get; public set; }
    public int DynamicLocks { get; public set; }
    public int MaxDegreeOfParallelism { get; public set; }
    public int MaxServerMemory { get; public set; }
    public int MaxWorkerThreads { get; public set; }
    public int MediaRetention { get; public set; }
    public int MinMemoryPerQuery { get; public set; }
    public int MinServerMemory { get; public set; }
    public bool NestedTriggersEnabled { get; public set; }
    public int NetworkPacketSize { get; public set; }
    public bool OleAutomationEnabled { get; public set; }
    public int OpenObjects { get; public set; }
    public bool PrecomputeRank { get; public set; }
    public bool PriorityBoost { get; public set; }
    public int ProtocolHandlerTimeout { get; public set; }
    public int QueryGovernorCostLimit { get; public set; }
    public int QueryWait { get; public set; }
    public int RecoveryInterval { get; public set; }
    public bool RemoteAccessEnabled { get; public set; }
    public bool RemoteDacEnabled { get; public set; }
    public int RemoteLoginTimeout { get; public set; }
    public bool RemoteProcTransEnabled { get; public set; }
    public int RemoteQueryTimeout { get; public set; }
    public int ReplicationMaxTextSize { get; public set; }
    public bool ReplicationXPsEnabled { get; public set; }
    public bool ScanForStartupProcedures { get; public set; }
    public bool ServerTriggerRecursionEnabled { get; public set; }
    public bool SetWorkingSetSize { get; public set; }
    public bool ShowAdvancedOptions { get; public set; }
    public bool SmoAndDmoXPsEnabled { get; public set; }
    public bool SqlMailEnabled { get; public set; }
    public bool TransformNoiseWords { get; public set; }
    public int TwoDigitYearCutoff { get; public set; }
    public int UserConnections { get; public set; }
    public int UserInstanceTimeout { get; public set; }
    public bool UserInstancesEnabled { get; public set; }
    public int UserOptions { get; public set; }
    public bool WebAssistantEnabled { get; public set; }
    public bool XPCmdShellEnabled { get; public set; }
    public bool RemoteDataArchiveEnabled { get; public set; }
    public ServerAdapterBase(Server obj);
    protected Server get_Server();
    public sealed virtual AuditLevel get_LoginAuditLevel();
    public sealed virtual void set_LoginAuditLevel(AuditLevel value);
    public sealed virtual ServerLoginMode get_LoginMode();
    public sealed virtual string get_ServiceName();
    public sealed virtual ServiceStartMode get_ServiceStartMode();
    public sealed virtual string get_InstanceName();
    public sealed virtual FileStreamEffectiveLevel get_FilestreamLevel();
    public sealed virtual string get_FilestreamShareName();
    public sealed virtual string get_Collation();
    public sealed virtual string get_SqlDomainGroup();
    public sealed virtual string get_InstallDataDirectory();
    public sealed virtual string get_BackupDirectory();
    public sealed virtual string get_DefaultFile();
    public sealed virtual string get_DefaultLog();
    public sealed virtual bool get_NamedPipesEnabled();
    public sealed virtual bool get_TcpEnabled();
    public sealed virtual string get_InstallSharedDirectory();
    public sealed virtual ServiceStartMode get_BrowserStartMode();
    public sealed virtual string get_BrowserServiceAccount();
    public sealed virtual bool get_ContainmentEnabled();
    public sealed virtual void set_ContainmentEnabled(bool value);
    public sealed virtual bool get_AdHocRemoteQueriesEnabled();
    public sealed virtual void set_AdHocRemoteQueriesEnabled(bool value);
    public sealed virtual int get_AffinityMask();
    public sealed virtual void set_AffinityMask(int value);
    public sealed virtual int get_Affinity64Mask();
    public sealed virtual void set_Affinity64Mask(int value);
    public sealed virtual int get_AffinityIOMask();
    public sealed virtual void set_AffinityIOMask(int value);
    public sealed virtual int get_Affinity64IOMask();
    public sealed virtual void set_Affinity64IOMask(int value);
    public sealed virtual bool get_AgentXPsEnabled();
    public sealed virtual void set_AgentXPsEnabled(bool value);
    public sealed virtual bool get_AllowUpdates();
    public sealed virtual void set_AllowUpdates(bool value);
    public sealed virtual bool get_AweEnabled();
    public sealed virtual void set_AweEnabled(bool value);
    public sealed virtual bool get_C2AuditTracingEnabled();
    public sealed virtual void set_C2AuditTracingEnabled(bool value);
    public sealed virtual int get_BlockedProcessThreshold();
    public sealed virtual void set_BlockedProcessThreshold(int value);
    public sealed virtual bool get_DefaultBackupCompressionEnabled();
    public sealed virtual void set_DefaultBackupCompressionEnabled(bool value);
    public sealed virtual bool get_ClrIntegrationEnabled();
    public sealed virtual void set_ClrIntegrationEnabled(bool value);
    public sealed virtual bool get_CommonCriteriaComplianceEnabled();
    public sealed virtual int get_CostThresholdForParallelism();
    public sealed virtual void set_CostThresholdForParallelism(int value);
    public sealed virtual bool get_CrossDBOwnershipChainingEnabled();
    public sealed virtual void set_CrossDBOwnershipChainingEnabled(bool value);
    public sealed virtual int get_CursorThreshold();
    public sealed virtual void set_CursorThreshold(int value);
    public sealed virtual bool get_ExtensibleKeyManagementEnabled();
    public sealed virtual void set_ExtensibleKeyManagementEnabled(bool value);
    public sealed virtual bool get_DatabaseMailEnabled();
    public sealed virtual void set_DatabaseMailEnabled(bool value);
    public sealed virtual bool get_DefaultTraceEnabled();
    public sealed virtual void set_DefaultTraceEnabled(bool value);
    public sealed virtual int get_DefaultFullTextLanguage();
    public sealed virtual void set_DefaultFullTextLanguage(int value);
    public sealed virtual int get_DefaultLanguage();
    public sealed virtual void set_DefaultLanguage(int value);
    public sealed virtual bool get_DisallowResultsFromTriggers();
    public sealed virtual void set_DisallowResultsFromTriggers(bool value);
    public sealed virtual FilestreamAccessLevelType get_FilestreamAccessLevel();
    public sealed virtual void set_FilestreamAccessLevel(FilestreamAccessLevelType value);
    public sealed virtual bool get_OptimizeAdhocWorkloads();
    public sealed virtual void set_OptimizeAdhocWorkloads(bool value);
    public sealed virtual int get_FillFactor();
    public sealed virtual void set_FillFactor(int value);
    public sealed virtual int get_FullTextCrawlBandwidthMin();
    public sealed virtual void set_FullTextCrawlBandwidthMin(int value);
    public sealed virtual int get_FullTextCrawlBandwidthMax();
    public sealed virtual void set_FullTextCrawlBandwidthMax(int value);
    public sealed virtual int get_FullTextNotifyBandwidthMin();
    public sealed virtual void set_FullTextNotifyBandwidthMin(int value);
    public sealed virtual int get_FullTextNotifyBandwidthMax();
    public sealed virtual void set_FullTextNotifyBandwidthMax(int value);
    public sealed virtual int get_FullTextCrawlRangeMax();
    public sealed virtual void set_FullTextCrawlRangeMax(int value);
    public sealed virtual InDoubtTransactionResolutionType get_InDoubtTransactionResolution();
    public sealed virtual void set_InDoubtTransactionResolution(InDoubtTransactionResolutionType value);
    public sealed virtual int get_IndexCreateMemory();
    public sealed virtual void set_IndexCreateMemory(int value);
    public sealed virtual bool get_LightweightPoolingEnabled();
    public sealed virtual void set_LightweightPoolingEnabled(bool value);
    public sealed virtual int get_DynamicLocks();
    public sealed virtual void set_DynamicLocks(int value);
    public sealed virtual int get_MaxDegreeOfParallelism();
    public sealed virtual void set_MaxDegreeOfParallelism(int value);
    public sealed virtual int get_MaxServerMemory();
    public sealed virtual void set_MaxServerMemory(int value);
    public sealed virtual int get_MaxWorkerThreads();
    public sealed virtual void set_MaxWorkerThreads(int value);
    public sealed virtual int get_MediaRetention();
    public sealed virtual void set_MediaRetention(int value);
    public sealed virtual int get_MinMemoryPerQuery();
    public sealed virtual void set_MinMemoryPerQuery(int value);
    public sealed virtual int get_MinServerMemory();
    public sealed virtual void set_MinServerMemory(int value);
    public sealed virtual bool get_NestedTriggersEnabled();
    public sealed virtual void set_NestedTriggersEnabled(bool value);
    public sealed virtual int get_NetworkPacketSize();
    public sealed virtual void set_NetworkPacketSize(int value);
    public sealed virtual bool get_OleAutomationEnabled();
    public sealed virtual void set_OleAutomationEnabled(bool value);
    public sealed virtual int get_OpenObjects();
    public sealed virtual void set_OpenObjects(int value);
    public sealed virtual bool get_PrecomputeRank();
    public sealed virtual void set_PrecomputeRank(bool value);
    public sealed virtual bool get_PriorityBoost();
    public sealed virtual void set_PriorityBoost(bool value);
    public sealed virtual int get_ProtocolHandlerTimeout();
    public sealed virtual void set_ProtocolHandlerTimeout(int value);
    public sealed virtual int get_QueryGovernorCostLimit();
    public sealed virtual void set_QueryGovernorCostLimit(int value);
    public sealed virtual int get_QueryWait();
    public sealed virtual void set_QueryWait(int value);
    public sealed virtual int get_RecoveryInterval();
    public sealed virtual void set_RecoveryInterval(int value);
    public sealed virtual bool get_RemoteAccessEnabled();
    public sealed virtual void set_RemoteAccessEnabled(bool value);
    public sealed virtual bool get_RemoteDacEnabled();
    public sealed virtual void set_RemoteDacEnabled(bool value);
    public sealed virtual int get_RemoteLoginTimeout();
    public sealed virtual void set_RemoteLoginTimeout(int value);
    public sealed virtual bool get_RemoteProcTransEnabled();
    public sealed virtual void set_RemoteProcTransEnabled(bool value);
    public sealed virtual int get_RemoteQueryTimeout();
    public sealed virtual void set_RemoteQueryTimeout(int value);
    public sealed virtual int get_ReplicationMaxTextSize();
    public sealed virtual void set_ReplicationMaxTextSize(int value);
    public sealed virtual bool get_ReplicationXPsEnabled();
    public sealed virtual void set_ReplicationXPsEnabled(bool value);
    public sealed virtual bool get_ScanForStartupProcedures();
    public sealed virtual void set_ScanForStartupProcedures(bool value);
    public sealed virtual bool get_ServerTriggerRecursionEnabled();
    public sealed virtual void set_ServerTriggerRecursionEnabled(bool value);
    public sealed virtual bool get_SetWorkingSetSize();
    public sealed virtual void set_SetWorkingSetSize(bool value);
    public sealed virtual bool get_ShowAdvancedOptions();
    public sealed virtual void set_ShowAdvancedOptions(bool value);
    public sealed virtual bool get_SmoAndDmoXPsEnabled();
    public sealed virtual void set_SmoAndDmoXPsEnabled(bool value);
    public sealed virtual bool get_SqlMailEnabled();
    public sealed virtual void set_SqlMailEnabled(bool value);
    public sealed virtual bool get_TransformNoiseWords();
    public sealed virtual void set_TransformNoiseWords(bool value);
    public sealed virtual int get_TwoDigitYearCutoff();
    public sealed virtual void set_TwoDigitYearCutoff(int value);
    public sealed virtual int get_UserConnections();
    public sealed virtual void set_UserConnections(int value);
    public sealed virtual int get_UserInstanceTimeout();
    public sealed virtual void set_UserInstanceTimeout(int value);
    public sealed virtual bool get_UserInstancesEnabled();
    public sealed virtual void set_UserInstancesEnabled(bool value);
    public sealed virtual int get_UserOptions();
    public sealed virtual void set_UserOptions(int value);
    public sealed virtual bool get_WebAssistantEnabled();
    public sealed virtual void set_WebAssistantEnabled(bool value);
    public sealed virtual bool get_XPCmdShellEnabled();
    public sealed virtual void set_XPCmdShellEnabled(bool value);
    public sealed virtual bool get_RemoteDataArchiveEnabled();
    public sealed virtual void set_RemoteDataArchiveEnabled(bool value);
    public virtual void Refresh();
    public virtual void Alter();
}
[EvaluationModeAttribute("4")]
[PhysicalFacetAttribute]
[SfcElementAttribute("16")]
public class Microsoft.SqlServer.Management.Smo.ServerAuditSpecification : AuditSpecification {
    public static string UrnSuffix { get; }
    internal static string ParentType { get; }
    [SfcObjectAttribute("1")]
public Server Parent { get; public set; }
    private bool Microsoft.SqlServer.Management.Sdk.Sfc.ISfcSupportsDesignMode.IsDesignMode { get; }
    [SfcPropertyAttribute("1024")]
[SfcReferenceAttribute("Microsoft.SqlServer.Management.Smo.Audit", "Server[@Name = '{0}']/Audit[@Name = '{1}']", "Mono.Cecil.CustomAttributeArgument[]")]
[CLSCompliantAttribute("False")]
public string AuditName { get; public set; }
    [SfcPropertyAttribute("1024")]
public DateTime CreateDate { get; }
    [SfcPropertyAttribute("1024")]
public DateTime DateLastModified { get; }
    [SfcPropertyAttribute("1024")]
public bool Enabled { get; }
    [SfcPropertyAttribute("1024")]
public Guid Guid { get; }
    [SfcPropertyAttribute("1024")]
public int ID { get; }
    internal ServerAuditSpecification(AbstractCollectionBase parentColl, ObjectKeyBase key, SqlSmoState state);
    public ServerAuditSpecification(Server server, string name);
    public static string get_UrnSuffix();
    internal static string get_ParentType();
    public Server get_Parent();
    public void set_Parent(Server value);
    private sealed virtual override bool Microsoft.SqlServer.Management.Sdk.Sfc.ISfcSupportsDesignMode.get_IsDesignMode();
    internal virtual SqlPropertyMetadataProvider GetPropertyMetadataProvider();
    public string get_AuditName();
    public void set_AuditName(string value);
    public DateTime get_CreateDate();
    public DateTime get_DateLastModified();
    public bool get_Enabled();
    public Guid get_Guid();
    public int get_ID();
}
[DefaultMemberAttribute("Item")]
public class Microsoft.SqlServer.Management.Smo.ServerAuditSpecificationCollection : SimpleObjectCollectionBase {
    public Server Parent { get; }
    public ServerAuditSpecification Item { get; }
    public ServerAuditSpecification Item { get; }
    internal ServerAuditSpecificationCollection(SqlSmoObject parentInstance);
    public Server get_Parent();
    public ServerAuditSpecification get_Item(int index);
    public ServerAuditSpecification get_Item(string name);
    public void CopyTo(ServerAuditSpecification[] array, int index);
    public ServerAuditSpecification ItemById(int id);
    protected virtual Type GetCollectionElementType();
    internal virtual SqlSmoObject GetCollectionElementInstance(ObjectKeyBase key, SqlSmoState state);
    public void Add(ServerAuditSpecification serverAuditSpecification);
    internal SqlSmoObject GetObjectByName(string name);
    internal virtual ObjectKeyBase CreateKeyFromUrn(Urn urn);
}
[CLSCompliantAttribute("False")]
public class Microsoft.SqlServer.Management.Smo.ServerAuditSpecificationExtender : SmoObjectExtender`1<ServerAuditSpecification> {
    private StringCollection audits;
    private DataTable auditSpecDetails;
    private ValidationState gridValidationState;
    [ExtendedPropertyAttribute]
public StringCollection Audits { get; }
    [ExtendedPropertyAttribute]
public DataTable AuditSpecificationDetails { get; public set; }
    [ExtendedPropertyAttribute]
public ValidationState GridValidationState { get; public set; }
    [ExtendedPropertyAttribute]
public string Type { get; }
    [ExtendedPropertyAttribute]
public SqlSmoState State { get; }
    [ExtendedPropertyAttribute]
public string DatabaseName { get; }
    [ExtendedPropertyAttribute]
public ServerConnection ConnectionContext { get; }
    public ServerAuditSpecificationExtender(ServerAuditSpecification serverAuditSpecification);
    public StringCollection get_Audits();
    public DataTable get_AuditSpecificationDetails();
    public void set_AuditSpecificationDetails(DataTable value);
    public ValidationState get_GridValidationState();
    public void set_GridValidationState(ValidationState value);
    public string get_Type();
    public SqlSmoState get_State();
    public string get_DatabaseName();
    public ServerConnection get_ConnectionContext();
    public sealed virtual ValidationState Validate(string methodName, Object[] arguments);
}
public class Microsoft.SqlServer.Management.Smo.ServerConfigurationAdapter : ServerAdapterBase {
    public ServerConfigurationAdapter(Server obj);
    public virtual void Refresh();
    public virtual void Alter();
}
[EvaluationModeAttribute("4")]
[PhysicalFacetAttribute("1")]
[SfcElementTypeAttribute("DdlTrigger")]
[SfcElementAttribute("16")]
public class Microsoft.SqlServer.Management.Smo.ServerDdlTrigger : DdlTriggerBase {
    [SfcObjectAttribute("1")]
public Server Parent { get; public set; }
    public static string UrnSuffix { get; }
    public ServerDdlTriggerEventSet DdlTriggerEvents { get; public set; }
    private bool Microsoft.SqlServer.Management.Sdk.Sfc.ISfcSupportsDesignMode.IsDesignMode { get; }
    [SfcPropertyAttribute("1024")]
public bool AnsiNullsStatus { get; public set; }
    [SfcPropertyAttribute("1024")]
[SfcReferenceAttribute("Microsoft.SqlServer.Management.Smo.SqlAssembly", "Server[@Name = '{0}']/Database[@Name = 'master']/SqlAssembly[@Name = '{1}']", "Mono.Cecil.CustomAttributeArgument[]")]
[CLSCompliantAttribute("False")]
public string AssemblyName { get; public set; }
    [SfcPropertyAttribute("1056")]
public int BodyStartIndex { get; }
    [SfcPropertyAttribute("1024")]
public string ClassName { get; public set; }
    [SfcPropertyAttribute("1024")]
public DateTime CreateDate { get; }
    [SfcPropertyAttribute("1024")]
public DateTime DateLastModified { get; }
    [SfcPropertyAttribute("1024")]
public ServerDdlTriggerExecutionContext ExecutionContext { get; public set; }
    [SfcPropertyAttribute("1024")]
[SfcReferenceAttribute("Microsoft.SqlServer.Management.Smo.Login", "Server[@Name = '{0}']/Login[@Name = '{1}']", "Mono.Cecil.CustomAttributeArgument[]")]
[CLSCompliantAttribute("False")]
public string ExecutionContextLogin { get; public set; }
    [SfcPropertyAttribute("1024")]
public int ID { get; }
    [SfcPropertyAttribute("1024")]
public ImplementationType ImplementationType { get; public set; }
    [SfcPropertyAttribute("1024")]
public bool IsEnabled { get; public set; }
    [SfcPropertyAttribute("1024")]
public bool IsEncrypted { get; public set; }
    [SfcPropertyAttribute("1024")]
public bool IsSystemObject { get; }
    [SfcPropertyAttribute("1024")]
public string MethodName { get; public set; }
    [SfcPropertyAttribute("1024")]
public bool QuotedIdentifierStatus { get; public set; }
    [SfcPropertyAttribute("1056")]
public string Text { get; }
    internal ServerDdlTrigger(AbstractCollectionBase parentColl, ObjectKeyBase key, SqlSmoState state);
    public ServerDdlTrigger(Server server, string name);
    public ServerDdlTrigger(Server parent, string name, ServerDdlTriggerEventSet events, string textBody);
    public ServerDdlTrigger(Server parent, string name, ServerDdlTriggerEventSet events, string assemblyName, string className, string method);
    public Server get_Parent();
    public void set_Parent(Server value);
    public static string get_UrnSuffix();
    public ServerDdlTriggerEventSet get_DdlTriggerEvents();
    public void set_DdlTriggerEvents(ServerDdlTriggerEventSet value);
    internal virtual void ScriptDrop(StringCollection queries, ScriptingPreferences sp);
    internal virtual void AddDdlTriggerEvents(StringBuilder sb, ScriptingPreferences sp);
    internal virtual void ValidateProperty(Property prop, object value);
    protected virtual bool IsObjectDirty();
    protected virtual void CleanObject();
    protected virtual bool IsEventSetDirty();
    internal virtual string GetIfNotExistStatement(ScriptingPreferences sp, string prefix);
    private sealed virtual override bool Microsoft.SqlServer.Management.Sdk.Sfc.ISfcSupportsDesignMode.get_IsDesignMode();
    internal virtual SqlPropertyMetadataProvider GetPropertyMetadataProvider();
    public bool get_AnsiNullsStatus();
    public void set_AnsiNullsStatus(bool value);
    public string get_AssemblyName();
    public void set_AssemblyName(string value);
    public int get_BodyStartIndex();
    public string get_ClassName();
    public void set_ClassName(string value);
    public DateTime get_CreateDate();
    public DateTime get_DateLastModified();
    public ServerDdlTriggerExecutionContext get_ExecutionContext();
    public void set_ExecutionContext(ServerDdlTriggerExecutionContext value);
    public string get_ExecutionContextLogin();
    public void set_ExecutionContextLogin(string value);
    public int get_ID();
    public ImplementationType get_ImplementationType();
    public void set_ImplementationType(ImplementationType value);
    public bool get_IsEnabled();
    public void set_IsEnabled(bool value);
    public bool get_IsEncrypted();
    public void set_IsEncrypted(bool value);
    public bool get_IsSystemObject();
    public string get_MethodName();
    public void set_MethodName(string value);
    public bool get_QuotedIdentifierStatus();
    public void set_QuotedIdentifierStatus(bool value);
    public string get_Text();
    private string StringFromServerDdlTriggerEvent(int evt);
}
[DefaultMemberAttribute("Item")]
public class Microsoft.SqlServer.Management.Smo.ServerDdlTriggerCollection : SimpleObjectCollectionBase {
    public Server Parent { get; }
    public ServerDdlTrigger Item { get; }
    public ServerDdlTrigger Item { get; }
    internal ServerDdlTriggerCollection(SqlSmoObject parentInstance);
    public Server get_Parent();
    public ServerDdlTrigger get_Item(int index);
    public ServerDdlTrigger get_Item(string name);
    public void CopyTo(ServerDdlTrigger[] array, int index);
    public ServerDdlTrigger ItemById(int id);
    protected virtual Type GetCollectionElementType();
    internal virtual SqlSmoObject GetCollectionElementInstance(ObjectKeyBase key, SqlSmoState state);
    public void Add(ServerDdlTrigger serverDdlTrigger);
    internal SqlSmoObject GetObjectByName(string name);
    internal virtual ObjectKeyBase CreateKeyFromUrn(Urn urn);
}
public class Microsoft.SqlServer.Management.Smo.ServerEvent : object {
    private ServerEventValues m_value;
    internal ServerEventValues Value { get; }
    public static ServerEvent AddRoleMember { get; }
    public static ServerEvent AddSensitivityClassification { get; }
    public static ServerEvent AddServerRoleMember { get; }
    public static ServerEvent AddSignature { get; }
    public static ServerEvent AddSignatureSchemaObject { get; }
    public static ServerEvent AlterApplicationRole { get; }
    public static ServerEvent AlterAssembly { get; }
    public static ServerEvent AlterAsymmetricKey { get; }
    public static ServerEvent AlterAudit { get; }
    public static ServerEvent AlterAuthorizationDatabase { get; }
    public static ServerEvent AlterAuthorizationServer { get; }
    public static ServerEvent AlterAvailabilityGroup { get; }
    public static ServerEvent AlterBrokerPriority { get; }
    public static ServerEvent AlterCertificate { get; }
    public static ServerEvent AlterColumnEncryptionKey { get; }
    public static ServerEvent AlterCredential { get; }
    public static ServerEvent AlterCryptographicProvider { get; }
    public static ServerEvent AlterDatabase { get; }
    public static ServerEvent AlterDatabaseAuditSpecification { get; }
    public static ServerEvent AlterDatabaseEncryptionKey { get; }
    public static ServerEvent AlterDatabaseScopedConfiguration { get; }
    public static ServerEvent AlterEndpoint { get; }
    public static ServerEvent AlterEventSession { get; }
    public static ServerEvent AlterExtendedProperty { get; }
    public static ServerEvent AlterExternalLanguage { get; }
    public static ServerEvent AlterExternalLibrary { get; }
    public static ServerEvent AlterExternalResourcePool { get; }
    public static ServerEvent AlterFulltextCatalog { get; }
    public static ServerEvent AlterFulltextIndex { get; }
    public static ServerEvent AlterFulltextStoplist { get; }
    public static ServerEvent AlterFunction { get; }
    public static ServerEvent AlterIndex { get; }
    public static ServerEvent AlterInstance { get; }
    public static ServerEvent AlterLinkedServer { get; }
    public static ServerEvent AlterLogin { get; }
    public static ServerEvent AlterMasterKey { get; }
    public static ServerEvent AlterMessage { get; }
    public static ServerEvent AlterMessageType { get; }
    public static ServerEvent AlterPartitionFunction { get; }
    public static ServerEvent AlterPartitionScheme { get; }
    public static ServerEvent AlterPlanGuide { get; }
    public static ServerEvent AlterProcedure { get; }
    public static ServerEvent AlterQueue { get; }
    public static ServerEvent AlterRemoteServer { get; }
    public static ServerEvent AlterRemoteServiceBinding { get; }
    public static ServerEvent AlterResourceGovernorConfig { get; }
    public static ServerEvent AlterResourcePool { get; }
    public static ServerEvent AlterRole { get; }
    public static ServerEvent AlterRoute { get; }
    public static ServerEvent AlterSchema { get; }
    public static ServerEvent AlterSearchPropertyList { get; }
    public static ServerEvent AlterSecurityPolicy { get; }
    public static ServerEvent AlterSequence { get; }
    public static ServerEvent AlterServerAudit { get; }
    public static ServerEvent AlterServerAuditSpecification { get; }
    public static ServerEvent AlterServerConfiguration { get; }
    public static ServerEvent AlterServerRole { get; }
    public static ServerEvent AlterService { get; }
    public static ServerEvent AlterServiceMasterKey { get; }
    public static ServerEvent AlterSymmetricKey { get; }
    public static ServerEvent AlterTable { get; }
    public static ServerEvent AlterTrigger { get; }
    public static ServerEvent AlterUser { get; }
    public static ServerEvent AlterView { get; }
    public static ServerEvent AlterWorkloadGroup { get; }
    public static ServerEvent AlterXmlSchemaCollection { get; }
    public static ServerEvent BindDefault { get; }
    public static ServerEvent BindRule { get; }
    public static ServerEvent CreateApplicationRole { get; }
    public static ServerEvent CreateAssembly { get; }
    public static ServerEvent CreateAsymmetricKey { get; }
    public static ServerEvent CreateAudit { get; }
    public static ServerEvent CreateAvailabilityGroup { get; }
    public static ServerEvent CreateBrokerPriority { get; }
    public static ServerEvent CreateCertificate { get; }
    public static ServerEvent CreateColumnEncryptionKey { get; }
    public static ServerEvent CreateColumnMasterKey { get; }
    public static ServerEvent CreateContract { get; }
    public static ServerEvent CreateCredential { get; }
    public static ServerEvent CreateCryptographicProvider { get; }
    public static ServerEvent CreateDatabase { get; }
    public static ServerEvent CreateDatabaseAuditSpecification { get; }
    public static ServerEvent CreateDatabaseEncryptionKey { get; }
    public static ServerEvent CreateDefault { get; }
    public static ServerEvent CreateEndpoint { get; }
    public static ServerEvent CreateEventNotification { get; }
    public static ServerEvent CreateEventSession { get; }
    public static ServerEvent CreateExtendedProcedure { get; }
    public static ServerEvent CreateExtendedProperty { get; }
    public static ServerEvent CreateExternalLanguage { get; }
    public static ServerEvent CreateExternalLibrary { get; }
    public static ServerEvent CreateExternalResourcePool { get; }
    public static ServerEvent CreateFulltextCatalog { get; }
    public static ServerEvent CreateFulltextIndex { get; }
    public static ServerEvent CreateFulltextStoplist { get; }
    public static ServerEvent CreateFunction { get; }
    public static ServerEvent CreateIndex { get; }
    public static ServerEvent CreateLinkedServer { get; }
    public static ServerEvent CreateLinkedServerLogin { get; }
    public static ServerEvent CreateLogin { get; }
    public static ServerEvent CreateMasterKey { get; }
    public static ServerEvent CreateMessage { get; }
    public static ServerEvent CreateMessageType { get; }
    public static ServerEvent CreatePartitionFunction { get; }
    public static ServerEvent CreatePartitionScheme { get; }
    public static ServerEvent CreatePlanGuide { get; }
    public static ServerEvent CreateProcedure { get; }
    public static ServerEvent CreateQueue { get; }
    public static ServerEvent CreateRemoteServer { get; }
    public static ServerEvent CreateRemoteServiceBinding { get; }
    public static ServerEvent CreateResourcePool { get; }
    public static ServerEvent CreateRole { get; }
    public static ServerEvent CreateRoute { get; }
    public static ServerEvent CreateRule { get; }
    public static ServerEvent CreateSchema { get; }
    public static ServerEvent CreateSearchPropertyList { get; }
    public static ServerEvent CreateSecurityPolicy { get; }
    public static ServerEvent CreateSequence { get; }
    public static ServerEvent CreateServerAudit { get; }
    public static ServerEvent CreateServerAuditSpecification { get; }
    public static ServerEvent CreateServerRole { get; }
    public static ServerEvent CreateService { get; }
    public static ServerEvent CreateSpatialIndex { get; }
    public static ServerEvent CreateStatistics { get; }
    public static ServerEvent CreateSymmetricKey { get; }
    public static ServerEvent CreateSynonym { get; }
    public static ServerEvent CreateTable { get; }
    public static ServerEvent CreateTrigger { get; }
    public static ServerEvent CreateType { get; }
    public static ServerEvent CreateUser { get; }
    public static ServerEvent CreateView { get; }
    public static ServerEvent CreateWorkloadGroup { get; }
    public static ServerEvent CreateXmlIndex { get; }
    public static ServerEvent CreateXmlSchemaCollection { get; }
    public static ServerEvent DenyDatabase { get; }
    public static ServerEvent DenyServer { get; }
    public static ServerEvent DropApplicationRole { get; }
    public static ServerEvent DropAssembly { get; }
    public static ServerEvent DropAsymmetricKey { get; }
    public static ServerEvent DropAudit { get; }
    public static ServerEvent DropAvailabilityGroup { get; }
    public static ServerEvent DropBrokerPriority { get; }
    public static ServerEvent DropCertificate { get; }
    public static ServerEvent DropColumnEncryptionKey { get; }
    public static ServerEvent DropColumnMasterKey { get; }
    public static ServerEvent DropContract { get; }
    public static ServerEvent DropCredential { get; }
    public static ServerEvent DropCryptographicProvider { get; }
    public static ServerEvent DropDatabase { get; }
    public static ServerEvent DropDatabaseAuditSpecification { get; }
    public static ServerEvent DropDatabaseEncryptionKey { get; }
    public static ServerEvent DropDefault { get; }
    public static ServerEvent DropEndpoint { get; }
    public static ServerEvent DropEventNotification { get; }
    public static ServerEvent DropEventSession { get; }
    public static ServerEvent DropExtendedProcedure { get; }
    public static ServerEvent DropExtendedProperty { get; }
    public static ServerEvent DropExternalLanguage { get; }
    public static ServerEvent DropExternalLibrary { get; }
    public static ServerEvent DropExternalResourcePool { get; }
    public static ServerEvent DropFulltextCatalog { get; }
    public static ServerEvent DropFulltextIndex { get; }
    public static ServerEvent DropFulltextStoplist { get; }
    public static ServerEvent DropFunction { get; }
    public static ServerEvent DropIndex { get; }
    public static ServerEvent DropLinkedServer { get; }
    public static ServerEvent DropLinkedServerLogin { get; }
    public static ServerEvent DropLogin { get; }
    public static ServerEvent DropMasterKey { get; }
    public static ServerEvent DropMessage { get; }
    public static ServerEvent DropMessageType { get; }
    public static ServerEvent DropPartitionFunction { get; }
    public static ServerEvent DropPartitionScheme { get; }
    public static ServerEvent DropPlanGuide { get; }
    public static ServerEvent DropProcedure { get; }
    public static ServerEvent DropQueue { get; }
    public static ServerEvent DropRemoteServer { get; }
    public static ServerEvent DropRemoteServiceBinding { get; }
    public static ServerEvent DropResourcePool { get; }
    public static ServerEvent DropRole { get; }
    public static ServerEvent DropRoleMember { get; }
    public static ServerEvent DropRoute { get; }
    public static ServerEvent DropRule { get; }
    public static ServerEvent DropSchema { get; }
    public static ServerEvent DropSearchPropertyList { get; }
    public static ServerEvent DropSecurityPolicy { get; }
    public static ServerEvent DropSensitivityClassification { get; }
    public static ServerEvent DropSequence { get; }
    public static ServerEvent DropServerAudit { get; }
    public static ServerEvent DropServerAuditSpecification { get; }
    public static ServerEvent DropServerRole { get; }
    public static ServerEvent DropServerRoleMember { get; }
    public static ServerEvent DropService { get; }
    public static ServerEvent DropSignature { get; }
    public static ServerEvent DropSignatureSchemaObject { get; }
    public static ServerEvent DropStatistics { get; }
    public static ServerEvent DropSymmetricKey { get; }
    public static ServerEvent DropSynonym { get; }
    public static ServerEvent DropTable { get; }
    public static ServerEvent DropTrigger { get; }
    public static ServerEvent DropType { get; }
    public static ServerEvent DropUser { get; }
    public static ServerEvent DropView { get; }
    public static ServerEvent DropWorkloadGroup { get; }
    public static ServerEvent DropXmlSchemaCollection { get; }
    public static ServerEvent GrantDatabase { get; }
    public static ServerEvent GrantServer { get; }
    public static ServerEvent Rename { get; }
    public static ServerEvent RevokeDatabase { get; }
    public static ServerEvent RevokeServer { get; }
    public static ServerEvent UnbindDefault { get; }
    public static ServerEvent UnbindRule { get; }
    public static ServerEvent UpdateStatistics { get; }
    internal ServerEvent(ServerEventValues eventValue);
    internal ServerEventValues get_Value();
    public static ServerEventSet op_Implicit(ServerEvent eventValue);
    public static ServerEventSet op_Addition(ServerEvent eventLeft, ServerEvent eventRight);
    public static ServerEventSet Add(ServerEvent eventLeft, ServerEvent eventRight);
    public static ServerEventSet op_BitwiseOr(ServerEvent eventLeft, ServerEvent eventRight);
    public static ServerEventSet BitwiseOr(ServerEvent eventLeft, ServerEvent eventRight);
    public virtual string ToString();
    public static bool op_Equality(ServerEvent a, ServerEvent b);
    public static bool op_Inequality(ServerEvent a, ServerEvent b);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static ServerEvent get_AddRoleMember();
    public static ServerEvent get_AddSensitivityClassification();
    public static ServerEvent get_AddServerRoleMember();
    public static ServerEvent get_AddSignature();
    public static ServerEvent get_AddSignatureSchemaObject();
    public static ServerEvent get_AlterApplicationRole();
    public static ServerEvent get_AlterAssembly();
    public static ServerEvent get_AlterAsymmetricKey();
    public static ServerEvent get_AlterAudit();
    public static ServerEvent get_AlterAuthorizationDatabase();
    public static ServerEvent get_AlterAuthorizationServer();
    public static ServerEvent get_AlterAvailabilityGroup();
    public static ServerEvent get_AlterBrokerPriority();
    public static ServerEvent get_AlterCertificate();
    public static ServerEvent get_AlterColumnEncryptionKey();
    public static ServerEvent get_AlterCredential();
    public static ServerEvent get_AlterCryptographicProvider();
    public static ServerEvent get_AlterDatabase();
    public static ServerEvent get_AlterDatabaseAuditSpecification();
    public static ServerEvent get_AlterDatabaseEncryptionKey();
    public static ServerEvent get_AlterDatabaseScopedConfiguration();
    public static ServerEvent get_AlterEndpoint();
    public static ServerEvent get_AlterEventSession();
    public static ServerEvent get_AlterExtendedProperty();
    public static ServerEvent get_AlterExternalLanguage();
    public static ServerEvent get_AlterExternalLibrary();
    public static ServerEvent get_AlterExternalResourcePool();
    public static ServerEvent get_AlterFulltextCatalog();
    public static ServerEvent get_AlterFulltextIndex();
    public static ServerEvent get_AlterFulltextStoplist();
    public static ServerEvent get_AlterFunction();
    public static ServerEvent get_AlterIndex();
    public static ServerEvent get_AlterInstance();
    public static ServerEvent get_AlterLinkedServer();
    public static ServerEvent get_AlterLogin();
    public static ServerEvent get_AlterMasterKey();
    public static ServerEvent get_AlterMessage();
    public static ServerEvent get_AlterMessageType();
    public static ServerEvent get_AlterPartitionFunction();
    public static ServerEvent get_AlterPartitionScheme();
    public static ServerEvent get_AlterPlanGuide();
    public static ServerEvent get_AlterProcedure();
    public static ServerEvent get_AlterQueue();
    public static ServerEvent get_AlterRemoteServer();
    public static ServerEvent get_AlterRemoteServiceBinding();
    public static ServerEvent get_AlterResourceGovernorConfig();
    public static ServerEvent get_AlterResourcePool();
    public static ServerEvent get_AlterRole();
    public static ServerEvent get_AlterRoute();
    public static ServerEvent get_AlterSchema();
    public static ServerEvent get_AlterSearchPropertyList();
    public static ServerEvent get_AlterSecurityPolicy();
    public static ServerEvent get_AlterSequence();
    public static ServerEvent get_AlterServerAudit();
    public static ServerEvent get_AlterServerAuditSpecification();
    public static ServerEvent get_AlterServerConfiguration();
    public static ServerEvent get_AlterServerRole();
    public static ServerEvent get_AlterService();
    public static ServerEvent get_AlterServiceMasterKey();
    public static ServerEvent get_AlterSymmetricKey();
    public static ServerEvent get_AlterTable();
    public static ServerEvent get_AlterTrigger();
    public static ServerEvent get_AlterUser();
    public static ServerEvent get_AlterView();
    public static ServerEvent get_AlterWorkloadGroup();
    public static ServerEvent get_AlterXmlSchemaCollection();
    public static ServerEvent get_BindDefault();
    public static ServerEvent get_BindRule();
    public static ServerEvent get_CreateApplicationRole();
    public static ServerEvent get_CreateAssembly();
    public static ServerEvent get_CreateAsymmetricKey();
    public static ServerEvent get_CreateAudit();
    public static ServerEvent get_CreateAvailabilityGroup();
    public static ServerEvent get_CreateBrokerPriority();
    public static ServerEvent get_CreateCertificate();
    public static ServerEvent get_CreateColumnEncryptionKey();
    public static ServerEvent get_CreateColumnMasterKey();
    public static ServerEvent get_CreateContract();
    public static ServerEvent get_CreateCredential();
    public static ServerEvent get_CreateCryptographicProvider();
    public static ServerEvent get_CreateDatabase();
    public static ServerEvent get_CreateDatabaseAuditSpecification();
    public static ServerEvent get_CreateDatabaseEncryptionKey();
    public static ServerEvent get_CreateDefault();
    public static ServerEvent get_CreateEndpoint();
    public static ServerEvent get_CreateEventNotification();
    public static ServerEvent get_CreateEventSession();
    public static ServerEvent get_CreateExtendedProcedure();
    public static ServerEvent get_CreateExtendedProperty();
    public static ServerEvent get_CreateExternalLanguage();
    public static ServerEvent get_CreateExternalLibrary();
    public static ServerEvent get_CreateExternalResourcePool();
    public static ServerEvent get_CreateFulltextCatalog();
    public static ServerEvent get_CreateFulltextIndex();
    public static ServerEvent get_CreateFulltextStoplist();
    public static ServerEvent get_CreateFunction();
    public static ServerEvent get_CreateIndex();
    public static ServerEvent get_CreateLinkedServer();
    public static ServerEvent get_CreateLinkedServerLogin();
    public static ServerEvent get_CreateLogin();
    public static ServerEvent get_CreateMasterKey();
    public static ServerEvent get_CreateMessage();
    public static ServerEvent get_CreateMessageType();
    public static ServerEvent get_CreatePartitionFunction();
    public static ServerEvent get_CreatePartitionScheme();
    public static ServerEvent get_CreatePlanGuide();
    public static ServerEvent get_CreateProcedure();
    public static ServerEvent get_CreateQueue();
    public static ServerEvent get_CreateRemoteServer();
    public static ServerEvent get_CreateRemoteServiceBinding();
    public static ServerEvent get_CreateResourcePool();
    public static ServerEvent get_CreateRole();
    public static ServerEvent get_CreateRoute();
    public static ServerEvent get_CreateRule();
    public static ServerEvent get_CreateSchema();
    public static ServerEvent get_CreateSearchPropertyList();
    public static ServerEvent get_CreateSecurityPolicy();
    public static ServerEvent get_CreateSequence();
    public static ServerEvent get_CreateServerAudit();
    public static ServerEvent get_CreateServerAuditSpecification();
    public static ServerEvent get_CreateServerRole();
    public static ServerEvent get_CreateService();
    public static ServerEvent get_CreateSpatialIndex();
    public static ServerEvent get_CreateStatistics();
    public static ServerEvent get_CreateSymmetricKey();
    public static ServerEvent get_CreateSynonym();
    public static ServerEvent get_CreateTable();
    public static ServerEvent get_CreateTrigger();
    public static ServerEvent get_CreateType();
    public static ServerEvent get_CreateUser();
    public static ServerEvent get_CreateView();
    public static ServerEvent get_CreateWorkloadGroup();
    public static ServerEvent get_CreateXmlIndex();
    public static ServerEvent get_CreateXmlSchemaCollection();
    public static ServerEvent get_DenyDatabase();
    public static ServerEvent get_DenyServer();
    public static ServerEvent get_DropApplicationRole();
    public static ServerEvent get_DropAssembly();
    public static ServerEvent get_DropAsymmetricKey();
    public static ServerEvent get_DropAudit();
    public static ServerEvent get_DropAvailabilityGroup();
    public static ServerEvent get_DropBrokerPriority();
    public static ServerEvent get_DropCertificate();
    public static ServerEvent get_DropColumnEncryptionKey();
    public static ServerEvent get_DropColumnMasterKey();
    public static ServerEvent get_DropContract();
    public static ServerEvent get_DropCredential();
    public static ServerEvent get_DropCryptographicProvider();
    public static ServerEvent get_DropDatabase();
    public static ServerEvent get_DropDatabaseAuditSpecification();
    public static ServerEvent get_DropDatabaseEncryptionKey();
    public static ServerEvent get_DropDefault();
    public static ServerEvent get_DropEndpoint();
    public static ServerEvent get_DropEventNotification();
    public static ServerEvent get_DropEventSession();
    public static ServerEvent get_DropExtendedProcedure();
    public static ServerEvent get_DropExtendedProperty();
    public static ServerEvent get_DropExternalLanguage();
    public static ServerEvent get_DropExternalLibrary();
    public static ServerEvent get_DropExternalResourcePool();
    public static ServerEvent get_DropFulltextCatalog();
    public static ServerEvent get_DropFulltextIndex();
    public static ServerEvent get_DropFulltextStoplist();
    public static ServerEvent get_DropFunction();
    public static ServerEvent get_DropIndex();
    public static ServerEvent get_DropLinkedServer();
    public static ServerEvent get_DropLinkedServerLogin();
    public static ServerEvent get_DropLogin();
    public static ServerEvent get_DropMasterKey();
    public static ServerEvent get_DropMessage();
    public static ServerEvent get_DropMessageType();
    public static ServerEvent get_DropPartitionFunction();
    public static ServerEvent get_DropPartitionScheme();
    public static ServerEvent get_DropPlanGuide();
    public static ServerEvent get_DropProcedure();
    public static ServerEvent get_DropQueue();
    public static ServerEvent get_DropRemoteServer();
    public static ServerEvent get_DropRemoteServiceBinding();
    public static ServerEvent get_DropResourcePool();
    public static ServerEvent get_DropRole();
    public static ServerEvent get_DropRoleMember();
    public static ServerEvent get_DropRoute();
    public static ServerEvent get_DropRule();
    public static ServerEvent get_DropSchema();
    public static ServerEvent get_DropSearchPropertyList();
    public static ServerEvent get_DropSecurityPolicy();
    public static ServerEvent get_DropSensitivityClassification();
    public static ServerEvent get_DropSequence();
    public static ServerEvent get_DropServerAudit();
    public static ServerEvent get_DropServerAuditSpecification();
    public static ServerEvent get_DropServerRole();
    public static ServerEvent get_DropServerRoleMember();
    public static ServerEvent get_DropService();
    public static ServerEvent get_DropSignature();
    public static ServerEvent get_DropSignatureSchemaObject();
    public static ServerEvent get_DropStatistics();
    public static ServerEvent get_DropSymmetricKey();
    public static ServerEvent get_DropSynonym();
    public static ServerEvent get_DropTable();
    public static ServerEvent get_DropTrigger();
    public static ServerEvent get_DropType();
    public static ServerEvent get_DropUser();
    public static ServerEvent get_DropView();
    public static ServerEvent get_DropWorkloadGroup();
    public static ServerEvent get_DropXmlSchemaCollection();
    public static ServerEvent get_GrantDatabase();
    public static ServerEvent get_GrantServer();
    public static ServerEvent get_Rename();
    public static ServerEvent get_RevokeDatabase();
    public static ServerEvent get_RevokeServer();
    public static ServerEvent get_UnbindDefault();
    public static ServerEvent get_UnbindRule();
    public static ServerEvent get_UpdateStatistics();
}
public class Microsoft.SqlServer.Management.Smo.ServerEventArgs : EventArgs {
    private EventPropertyCollection properties;
    private EventType eventType;
    public EventType EventType { get; }
    public DateTime PostTime { get; }
    public int Spid { get; }
    public string SqlInstance { get; }
    public EventPropertyCollection Properties { get; }
    internal ServerEventArgs(EventType eventType, PropertyDataCollection properties);
    public EventType get_EventType();
    public DateTime get_PostTime();
    public int get_Spid();
    public string get_SqlInstance();
    public EventPropertyCollection get_Properties();
}
public class Microsoft.SqlServer.Management.Smo.ServerEventHandler : MulticastDelegate {
    public ServerEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, ServerEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, ServerEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class Microsoft.SqlServer.Management.Smo.ServerEvents : object {
    private ManagementScope managementScope;
    private ConnectionOptions connectionOptions;
    private ServerEventsWorker serverEventWorker;
    private ServerEventsWorker serverTraceEventWorker;
    private Server parent;
    internal ManagementScope ManagementScope { get; }
    internal ServerEvents(Server parent);
    internal ManagementScope get_ManagementScope();
    public void SetCredentials(string username, string password);
    public ServerEventSet GetEventSelection();
    public ServerTraceEventSet GetTraceEventSelection();
    public void SubscribeToEvents(ServerEventSet events);
    public void SubscribeToEvents(ServerEventSet events, ServerEventHandler eventHandler);
    public void SubscribeToEvents(ServerTraceEventSet events);
    public void SubscribeToEvents(ServerTraceEventSet events, ServerEventHandler eventHandler);
    public void StartEvents();
    public void StopEvents();
    public void UnsubscribeFromEvents(ServerEventSet events);
    public void UnsubscribeFromEvents(ServerTraceEventSet events);
    public void UnsubscribeAllEvents();
    public void add_ServerEvent(ServerEventHandler value);
    public void remove_ServerEvent(ServerEventHandler value);
    private void InitializeServerEvent();
    private void InitializeServerTraceEvent();
}
public class Microsoft.SqlServer.Management.Smo.ServerEventSet : EventSetBase {
    public int NumberOfElements { get; }
    public bool AddRoleMember { get; public set; }
    public bool AddSensitivityClassification { get; public set; }
    public bool AddServerRoleMember { get; public set; }
    public bool AddSignature { get; public set; }
    public bool AddSignatureSchemaObject { get; public set; }
    public bool AlterApplicationRole { get; public set; }
    public bool AlterAssembly { get; public set; }
    public bool AlterAsymmetricKey { get; public set; }
    public bool AlterAudit { get; public set; }
    public bool AlterAuthorizationDatabase { get; public set; }
    public bool AlterAuthorizationServer { get; public set; }
    public bool AlterAvailabilityGroup { get; public set; }
    public bool AlterBrokerPriority { get; public set; }
    public bool AlterCertificate { get; public set; }
    public bool AlterColumnEncryptionKey { get; public set; }
    public bool AlterCredential { get; public set; }
    public bool AlterCryptographicProvider { get; public set; }
    public bool AlterDatabase { get; public set; }
    public bool AlterDatabaseAuditSpecification { get; public set; }
    public bool AlterDatabaseEncryptionKey { get; public set; }
    public bool AlterDatabaseScopedConfiguration { get; public set; }
    public bool AlterEndpoint { get; public set; }
    public bool AlterEventSession { get; public set; }
    public bool AlterExtendedProperty { get; public set; }
    public bool AlterExternalLanguage { get; public set; }
    public bool AlterExternalLibrary { get; public set; }
    public bool AlterExternalResourcePool { get; public set; }
    public bool AlterFulltextCatalog { get; public set; }
    public bool AlterFulltextIndex { get; public set; }
    public bool AlterFulltextStoplist { get; public set; }
    public bool AlterFunction { get; public set; }
    public bool AlterIndex { get; public set; }
    public bool AlterInstance { get; public set; }
    public bool AlterLinkedServer { get; public set; }
    public bool AlterLogin { get; public set; }
    public bool AlterMasterKey { get; public set; }
    public bool AlterMessage { get; public set; }
    public bool AlterMessageType { get; public set; }
    public bool AlterPartitionFunction { get; public set; }
    public bool AlterPartitionScheme { get; public set; }
    public bool AlterPlanGuide { get; public set; }
    public bool AlterProcedure { get; public set; }
    public bool AlterQueue { get; public set; }
    public bool AlterRemoteServer { get; public set; }
    public bool AlterRemoteServiceBinding { get; public set; }
    public bool AlterResourceGovernorConfig { get; public set; }
    public bool AlterResourcePool { get; public set; }
    public bool AlterRole { get; public set; }
    public bool AlterRoute { get; public set; }
    public bool AlterSchema { get; public set; }
    public bool AlterSearchPropertyList { get; public set; }
    public bool AlterSecurityPolicy { get; public set; }
    public bool AlterSequence { get; public set; }
    public bool AlterServerAudit { get; public set; }
    public bool AlterServerAuditSpecification { get; public set; }
    public bool AlterServerConfiguration { get; public set; }
    public bool AlterServerRole { get; public set; }
    public bool AlterService { get; public set; }
    public bool AlterServiceMasterKey { get; public set; }
    public bool AlterSymmetricKey { get; public set; }
    public bool AlterTable { get; public set; }
    public bool AlterTrigger { get; public set; }
    public bool AlterUser { get; public set; }
    public bool AlterView { get; public set; }
    public bool AlterWorkloadGroup { get; public set; }
    public bool AlterXmlSchemaCollection { get; public set; }
    public bool BindDefault { get; public set; }
    public bool BindRule { get; public set; }
    public bool CreateApplicationRole { get; public set; }
    public bool CreateAssembly { get; public set; }
    public bool CreateAsymmetricKey { get; public set; }
    public bool CreateAudit { get; public set; }
    public bool CreateAvailabilityGroup { get; public set; }
    public bool CreateBrokerPriority { get; public set; }
    public bool CreateCertificate { get; public set; }
    public bool CreateColumnEncryptionKey { get; public set; }
    public bool CreateColumnMasterKey { get; public set; }
    public bool CreateContract { get; public set; }
    public bool CreateCredential { get; public set; }
    public bool CreateCryptographicProvider { get; public set; }
    public bool CreateDatabase { get; public set; }
    public bool CreateDatabaseAuditSpecification { get; public set; }
    public bool CreateDatabaseEncryptionKey { get; public set; }
    public bool CreateDefault { get; public set; }
    public bool CreateEndpoint { get; public set; }
    public bool CreateEventNotification { get; public set; }
    public bool CreateEventSession { get; public set; }
    public bool CreateExtendedProcedure { get; public set; }
    public bool CreateExtendedProperty { get; public set; }
    public bool CreateExternalLanguage { get; public set; }
    public bool CreateExternalLibrary { get; public set; }
    public bool CreateExternalResourcePool { get; public set; }
    public bool CreateFulltextCatalog { get; public set; }
    public bool CreateFulltextIndex { get; public set; }
    public bool CreateFulltextStoplist { get; public set; }
    public bool CreateFunction { get; public set; }
    public bool CreateIndex { get; public set; }
    public bool CreateLinkedServer { get; public set; }
    public bool CreateLinkedServerLogin { get; public set; }
    public bool CreateLogin { get; public set; }
    public bool CreateMasterKey { get; public set; }
    public bool CreateMessage { get; public set; }
    public bool CreateMessageType { get; public set; }
    public bool CreatePartitionFunction { get; public set; }
    public bool CreatePartitionScheme { get; public set; }
    public bool CreatePlanGuide { get; public set; }
    public bool CreateProcedure { get; public set; }
    public bool CreateQueue { get; public set; }
    public bool CreateRemoteServer { get; public set; }
    public bool CreateRemoteServiceBinding { get; public set; }
    public bool CreateResourcePool { get; public set; }
    public bool CreateRole { get; public set; }
    public bool CreateRoute { get; public set; }
    public bool CreateRule { get; public set; }
    public bool CreateSchema { get; public set; }
    public bool CreateSearchPropertyList { get; public set; }
    public bool CreateSecurityPolicy { get; public set; }
    public bool CreateSequence { get; public set; }
    public bool CreateServerAudit { get; public set; }
    public bool CreateServerAuditSpecification { get; public set; }
    public bool CreateServerRole { get; public set; }
    public bool CreateService { get; public set; }
    public bool CreateSpatialIndex { get; public set; }
    public bool CreateStatistics { get; public set; }
    public bool CreateSymmetricKey { get; public set; }
    public bool CreateSynonym { get; public set; }
    public bool CreateTable { get; public set; }
    public bool CreateTrigger { get; public set; }
    public bool CreateType { get; public set; }
    public bool CreateUser { get; public set; }
    public bool CreateView { get; public set; }
    public bool CreateWorkloadGroup { get; public set; }
    public bool CreateXmlIndex { get; public set; }
    public bool CreateXmlSchemaCollection { get; public set; }
    public bool DenyDatabase { get; public set; }
    public bool DenyServer { get; public set; }
    public bool DropApplicationRole { get; public set; }
    public bool DropAssembly { get; public set; }
    public bool DropAsymmetricKey { get; public set; }
    public bool DropAudit { get; public set; }
    public bool DropAvailabilityGroup { get; public set; }
    public bool DropBrokerPriority { get; public set; }
    public bool DropCertificate { get; public set; }
    public bool DropColumnEncryptionKey { get; public set; }
    public bool DropColumnMasterKey { get; public set; }
    public bool DropContract { get; public set; }
    public bool DropCredential { get; public set; }
    public bool DropCryptographicProvider { get; public set; }
    public bool DropDatabase { get; public set; }
    public bool DropDatabaseAuditSpecification { get; public set; }
    public bool DropDatabaseEncryptionKey { get; public set; }
    public bool DropDefault { get; public set; }
    public bool DropEndpoint { get; public set; }
    public bool DropEventNotification { get; public set; }
    public bool DropEventSession { get; public set; }
    public bool DropExtendedProcedure { get; public set; }
    public bool DropExtendedProperty { get; public set; }
    public bool DropExternalLanguage { get; public set; }
    public bool DropExternalLibrary { get; public set; }
    public bool DropExternalResourcePool { get; public set; }
    public bool DropFulltextCatalog { get; public set; }
    public bool DropFulltextIndex { get; public set; }
    public bool DropFulltextStoplist { get; public set; }
    public bool DropFunction { get; public set; }
    public bool DropIndex { get; public set; }
    public bool DropLinkedServer { get; public set; }
    public bool DropLinkedServerLogin { get; public set; }
    public bool DropLogin { get; public set; }
    public bool DropMasterKey { get; public set; }
    public bool DropMessage { get; public set; }
    public bool DropMessageType { get; public set; }
    public bool DropPartitionFunction { get; public set; }
    public bool DropPartitionScheme { get; public set; }
    public bool DropPlanGuide { get; public set; }
    public bool DropProcedure { get; public set; }
    public bool DropQueue { get; public set; }
    public bool DropRemoteServer { get; public set; }
    public bool DropRemoteServiceBinding { get; public set; }
    public bool DropResourcePool { get; public set; }
    public bool DropRole { get; public set; }
    public bool DropRoleMember { get; public set; }
    public bool DropRoute { get; public set; }
    public bool DropRule { get; public set; }
    public bool DropSchema { get; public set; }
    public bool DropSearchPropertyList { get; public set; }
    public bool DropSecurityPolicy { get; public set; }
    public bool DropSensitivityClassification { get; public set; }
    public bool DropSequence { get; public set; }
    public bool DropServerAudit { get; public set; }
    public bool DropServerAuditSpecification { get; public set; }
    public bool DropServerRole { get; public set; }
    public bool DropServerRoleMember { get; public set; }
    public bool DropService { get; public set; }
    public bool DropSignature { get; public set; }
    public bool DropSignatureSchemaObject { get; public set; }
    public bool DropStatistics { get; public set; }
    public bool DropSymmetricKey { get; public set; }
    public bool DropSynonym { get; public set; }
    public bool DropTable { get; public set; }
    public bool DropTrigger { get; public set; }
    public bool DropType { get; public set; }
    public bool DropUser { get; public set; }
    public bool DropView { get; public set; }
    public bool DropWorkloadGroup { get; public set; }
    public bool DropXmlSchemaCollection { get; public set; }
    public bool GrantDatabase { get; public set; }
    public bool GrantServer { get; public set; }
    public bool Rename { get; public set; }
    public bool RevokeDatabase { get; public set; }
    public bool RevokeServer { get; public set; }
    public bool UnbindDefault { get; public set; }
    public bool UnbindRule { get; public set; }
    public bool UpdateStatistics { get; public set; }
    public ServerEventSet(ServerEventSet eventSet);
    public ServerEventSet(ServerEvent anEvent);
    public ServerEventSet(ServerEvent[] events);
    internal ServerEventSet(BitArray storage);
    public virtual EventSetBase Copy();
    internal void SetBit(ServerEvent anEvent);
    internal void ResetBit(ServerEvent anEvent);
    public ServerEventSet Add(ServerEvent anEvent);
    public ServerEventSet Remove(ServerEvent anEvent);
    public static ServerEventSet op_Addition(ServerEventSet eventSet, ServerEvent anEvent);
    public static ServerEventSet Add(ServerEventSet eventSet, ServerEvent anEvent);
    public static ServerEventSet op_Subtraction(ServerEventSet eventSet, ServerEvent anEvent);
    public static ServerEventSet Subtract(ServerEventSet eventSet, ServerEvent anEvent);
    public virtual int get_NumberOfElements();
    public virtual string ToString();
    public bool get_AddRoleMember();
    public void set_AddRoleMember(bool value);
    public bool get_AddSensitivityClassification();
    public void set_AddSensitivityClassification(bool value);
    public bool get_AddServerRoleMember();
    public void set_AddServerRoleMember(bool value);
    public bool get_AddSignature();
    public void set_AddSignature(bool value);
    public bool get_AddSignatureSchemaObject();
    public void set_AddSignatureSchemaObject(bool value);
    public bool get_AlterApplicationRole();
    public void set_AlterApplicationRole(bool value);
    public bool get_AlterAssembly();
    public void set_AlterAssembly(bool value);
    public bool get_AlterAsymmetricKey();
    public void set_AlterAsymmetricKey(bool value);
    public bool get_AlterAudit();
    public void set_AlterAudit(bool value);
    public bool get_AlterAuthorizationDatabase();
    public void set_AlterAuthorizationDatabase(bool value);
    public bool get_AlterAuthorizationServer();
    public void set_AlterAuthorizationServer(bool value);
    public bool get_AlterAvailabilityGroup();
    public void set_AlterAvailabilityGroup(bool value);
    public bool get_AlterBrokerPriority();
    public void set_AlterBrokerPriority(bool value);
    public bool get_AlterCertificate();
    public void set_AlterCertificate(bool value);
    public bool get_AlterColumnEncryptionKey();
    public void set_AlterColumnEncryptionKey(bool value);
    public bool get_AlterCredential();
    public void set_AlterCredential(bool value);
    public bool get_AlterCryptographicProvider();
    public void set_AlterCryptographicProvider(bool value);
    public bool get_AlterDatabase();
    public void set_AlterDatabase(bool value);
    public bool get_AlterDatabaseAuditSpecification();
    public void set_AlterDatabaseAuditSpecification(bool value);
    public bool get_AlterDatabaseEncryptionKey();
    public void set_AlterDatabaseEncryptionKey(bool value);
    public bool get_AlterDatabaseScopedConfiguration();
    public void set_AlterDatabaseScopedConfiguration(bool value);
    public bool get_AlterEndpoint();
    public void set_AlterEndpoint(bool value);
    public bool get_AlterEventSession();
    public void set_AlterEventSession(bool value);
    public bool get_AlterExtendedProperty();
    public void set_AlterExtendedProperty(bool value);
    public bool get_AlterExternalLanguage();
    public void set_AlterExternalLanguage(bool value);
    public bool get_AlterExternalLibrary();
    public void set_AlterExternalLibrary(bool value);
    public bool get_AlterExternalResourcePool();
    public void set_AlterExternalResourcePool(bool value);
    public bool get_AlterFulltextCatalog();
    public void set_AlterFulltextCatalog(bool value);
    public bool get_AlterFulltextIndex();
    public void set_AlterFulltextIndex(bool value);
    public bool get_AlterFulltextStoplist();
    public void set_AlterFulltextStoplist(bool value);
    public bool get_AlterFunction();
    public void set_AlterFunction(bool value);
    public bool get_AlterIndex();
    public void set_AlterIndex(bool value);
    public bool get_AlterInstance();
    public void set_AlterInstance(bool value);
    public bool get_AlterLinkedServer();
    public void set_AlterLinkedServer(bool value);
    public bool get_AlterLogin();
    public void set_AlterLogin(bool value);
    public bool get_AlterMasterKey();
    public void set_AlterMasterKey(bool value);
    public bool get_AlterMessage();
    public void set_AlterMessage(bool value);
    public bool get_AlterMessageType();
    public void set_AlterMessageType(bool value);
    public bool get_AlterPartitionFunction();
    public void set_AlterPartitionFunction(bool value);
    public bool get_AlterPartitionScheme();
    public void set_AlterPartitionScheme(bool value);
    public bool get_AlterPlanGuide();
    public void set_AlterPlanGuide(bool value);
    public bool get_AlterProcedure();
    public void set_AlterProcedure(bool value);
    public bool get_AlterQueue();
    public void set_AlterQueue(bool value);
    public bool get_AlterRemoteServer();
    public void set_AlterRemoteServer(bool value);
    public bool get_AlterRemoteServiceBinding();
    public void set_AlterRemoteServiceBinding(bool value);
    public bool get_AlterResourceGovernorConfig();
    public void set_AlterResourceGovernorConfig(bool value);
    public bool get_AlterResourcePool();
    public void set_AlterResourcePool(bool value);
    public bool get_AlterRole();
    public void set_AlterRole(bool value);
    public bool get_AlterRoute();
    public void set_AlterRoute(bool value);
    public bool get_AlterSchema();
    public void set_AlterSchema(bool value);
    public bool get_AlterSearchPropertyList();
    public void set_AlterSearchPropertyList(bool value);
    public bool get_AlterSecurityPolicy();
    public void set_AlterSecurityPolicy(bool value);
    public bool get_AlterSequence();
    public void set_AlterSequence(bool value);
    public bool get_AlterServerAudit();
    public void set_AlterServerAudit(bool value);
    public bool get_AlterServerAuditSpecification();
    public void set_AlterServerAuditSpecification(bool value);
    public bool get_AlterServerConfiguration();
    public void set_AlterServerConfiguration(bool value);
    public bool get_AlterServerRole();
    public void set_AlterServerRole(bool value);
    public bool get_AlterService();
    public void set_AlterService(bool value);
    public bool get_AlterServiceMasterKey();
    public void set_AlterServiceMasterKey(bool value);
    public bool get_AlterSymmetricKey();
    public void set_AlterSymmetricKey(bool value);
    public bool get_AlterTable();
    public void set_AlterTable(bool value);
    public bool get_AlterTrigger();
    public void set_AlterTrigger(bool value);
    public bool get_AlterUser();
    public void set_AlterUser(bool value);
    public bool get_AlterView();
    public void set_AlterView(bool value);
    public bool get_AlterWorkloadGroup();
    public void set_AlterWorkloadGroup(bool value);
    public bool get_AlterXmlSchemaCollection();
    public void set_AlterXmlSchemaCollection(bool value);
    public bool get_BindDefault();
    public void set_BindDefault(bool value);
    public bool get_BindRule();
    public void set_BindRule(bool value);
    public bool get_CreateApplicationRole();
    public void set_CreateApplicationRole(bool value);
    public bool get_CreateAssembly();
    public void set_CreateAssembly(bool value);
    public bool get_CreateAsymmetricKey();
    public void set_CreateAsymmetricKey(bool value);
    public bool get_CreateAudit();
    public void set_CreateAudit(bool value);
    public bool get_CreateAvailabilityGroup();
    public void set_CreateAvailabilityGroup(bool value);
    public bool get_CreateBrokerPriority();
    public void set_CreateBrokerPriority(bool value);
    public bool get_CreateCertificate();
    public void set_CreateCertificate(bool value);
    public bool get_CreateColumnEncryptionKey();
    public void set_CreateColumnEncryptionKey(bool value);
    public bool get_CreateColumnMasterKey();
    public void set_CreateColumnMasterKey(bool value);
    public bool get_CreateContract();
    public void set_CreateContract(bool value);
    public bool get_CreateCredential();
    public void set_CreateCredential(bool value);
    public bool get_CreateCryptographicProvider();
    public void set_CreateCryptographicProvider(bool value);
    public bool get_CreateDatabase();
    public void set_CreateDatabase(bool value);
    public bool get_CreateDatabaseAuditSpecification();
    public void set_CreateDatabaseAuditSpecification(bool value);
    public bool get_CreateDatabaseEncryptionKey();
    public void set_CreateDatabaseEncryptionKey(bool value);
    public bool get_CreateDefault();
    public void set_CreateDefault(bool value);
    public bool get_CreateEndpoint();
    public void set_CreateEndpoint(bool value);
    public bool get_CreateEventNotification();
    public void set_CreateEventNotification(bool value);
    public bool get_CreateEventSession();
    public void set_CreateEventSession(bool value);
    public bool get_CreateExtendedProcedure();
    public void set_CreateExtendedProcedure(bool value);
    public bool get_CreateExtendedProperty();
    public void set_CreateExtendedProperty(bool value);
    public bool get_CreateExternalLanguage();
    public void set_CreateExternalLanguage(bool value);
    public bool get_CreateExternalLibrary();
    public void set_CreateExternalLibrary(bool value);
    public bool get_CreateExternalResourcePool();
    public void set_CreateExternalResourcePool(bool value);
    public bool get_CreateFulltextCatalog();
    public void set_CreateFulltextCatalog(bool value);
    public bool get_CreateFulltextIndex();
    public void set_CreateFulltextIndex(bool value);
    public bool get_CreateFulltextStoplist();
    public void set_CreateFulltextStoplist(bool value);
    public bool get_CreateFunction();
    public void set_CreateFunction(bool value);
    public bool get_CreateIndex();
    public void set_CreateIndex(bool value);
    public bool get_CreateLinkedServer();
    public void set_CreateLinkedServer(bool value);
    public bool get_CreateLinkedServerLogin();
    public void set_CreateLinkedServerLogin(bool value);
    public bool get_CreateLogin();
    public void set_CreateLogin(bool value);
    public bool get_CreateMasterKey();
    public void set_CreateMasterKey(bool value);
    public bool get_CreateMessage();
    public void set_CreateMessage(bool value);
    public bool get_CreateMessageType();
    public void set_CreateMessageType(bool value);
    public bool get_CreatePartitionFunction();
    public void set_CreatePartitionFunction(bool value);
    public bool get_CreatePartitionScheme();
    public void set_CreatePartitionScheme(bool value);
    public bool get_CreatePlanGuide();
    public void set_CreatePlanGuide(bool value);
    public bool get_CreateProcedure();
    public void set_CreateProcedure(bool value);
    public bool get_CreateQueue();
    public void set_CreateQueue(bool value);
    public bool get_CreateRemoteServer();
    public void set_CreateRemoteServer(bool value);
    public bool get_CreateRemoteServiceBinding();
    public void set_CreateRemoteServiceBinding(bool value);
    public bool get_CreateResourcePool();
    public void set_CreateResourcePool(bool value);
    public bool get_CreateRole();
    public void set_CreateRole(bool value);
    public bool get_CreateRoute();
    public void set_CreateRoute(bool value);
    public bool get_CreateRule();
    public void set_CreateRule(bool value);
    public bool get_CreateSchema();
    public void set_CreateSchema(bool value);
    public bool get_CreateSearchPropertyList();
    public void set_CreateSearchPropertyList(bool value);
    public bool get_CreateSecurityPolicy();
    public void set_CreateSecurityPolicy(bool value);
    public bool get_CreateSequence();
    public void set_CreateSequence(bool value);
    public bool get_CreateServerAudit();
    public void set_CreateServerAudit(bool value);
    public bool get_CreateServerAuditSpecification();
    public void set_CreateServerAuditSpecification(bool value);
    public bool get_CreateServerRole();
    public void set_CreateServerRole(bool value);
    public bool get_CreateService();
    public void set_CreateService(bool value);
    public bool get_CreateSpatialIndex();
    public void set_CreateSpatialIndex(bool value);
    public bool get_CreateStatistics();
    public void set_CreateStatistics(bool value);
    public bool get_CreateSymmetricKey();
    public void set_CreateSymmetricKey(bool value);
    public bool get_CreateSynonym();
    public void set_CreateSynonym(bool value);
    public bool get_CreateTable();
    public void set_CreateTable(bool value);
    public bool get_CreateTrigger();
    public void set_CreateTrigger(bool value);
    public bool get_CreateType();
    public void set_CreateType(bool value);
    public bool get_CreateUser();
    public void set_CreateUser(bool value);
    public bool get_CreateView();
    public void set_CreateView(bool value);
    public bool get_CreateWorkloadGroup();
    public void set_CreateWorkloadGroup(bool value);
    public bool get_CreateXmlIndex();
    public void set_CreateXmlIndex(bool value);
    public bool get_CreateXmlSchemaCollection();
    public void set_CreateXmlSchemaCollection(bool value);
    public bool get_DenyDatabase();
    public void set_DenyDatabase(bool value);
    public bool get_DenyServer();
    public void set_DenyServer(bool value);
    public bool get_DropApplicationRole();
    public void set_DropApplicationRole(bool value);
    public bool get_DropAssembly();
    public void set_DropAssembly(bool value);
    public bool get_DropAsymmetricKey();
    public void set_DropAsymmetricKey(bool value);
    public bool get_DropAudit();
    public void set_DropAudit(bool value);
    public bool get_DropAvailabilityGroup();
    public void set_DropAvailabilityGroup(bool value);
    public bool get_DropBrokerPriority();
    public void set_DropBrokerPriority(bool value);
    public bool get_DropCertificate();
    public void set_DropCertificate(bool value);
    public bool get_DropColumnEncryptionKey();
    public void set_DropColumnEncryptionKey(bool value);
    public bool get_DropColumnMasterKey();
    public void set_DropColumnMasterKey(bool value);
    public bool get_DropContract();
    public void set_DropContract(bool value);
    public bool get_DropCredential();
    public void set_DropCredential(bool value);
    public bool get_DropCryptographicProvider();
    public void set_DropCryptographicProvider(bool value);
    public bool get_DropDatabase();
    public void set_DropDatabase(bool value);
    public bool get_DropDatabaseAuditSpecification();
    public void set_DropDatabaseAuditSpecification(bool value);
    public bool get_DropDatabaseEncryptionKey();
    public void set_DropDatabaseEncryptionKey(bool value);
    public bool get_DropDefault();
    public void set_DropDefault(bool value);
    public bool get_DropEndpoint();
    public void set_DropEndpoint(bool value);
    public bool get_DropEventNotification();
    public void set_DropEventNotification(bool value);
    public bool get_DropEventSession();
    public void set_DropEventSession(bool value);
    public bool get_DropExtendedProcedure();
    public void set_DropExtendedProcedure(bool value);
    public bool get_DropExtendedProperty();
    public void set_DropExtendedProperty(bool value);
    public bool get_DropExternalLanguage();
    public void set_DropExternalLanguage(bool value);
    public bool get_DropExternalLibrary();
    public void set_DropExternalLibrary(bool value);
    public bool get_DropExternalResourcePool();
    public void set_DropExternalResourcePool(bool value);
    public bool get_DropFulltextCatalog();
    public void set_DropFulltextCatalog(bool value);
    public bool get_DropFulltextIndex();
    public void set_DropFulltextIndex(bool value);
    public bool get_DropFulltextStoplist();
    public void set_DropFulltextStoplist(bool value);
    public bool get_DropFunction();
    public void set_DropFunction(bool value);
    public bool get_DropIndex();
    public void set_DropIndex(bool value);
    public bool get_DropLinkedServer();
    public void set_DropLinkedServer(bool value);
    public bool get_DropLinkedServerLogin();
    public void set_DropLinkedServerLogin(bool value);
    public bool get_DropLogin();
    public void set_DropLogin(bool value);
    public bool get_DropMasterKey();
    public void set_DropMasterKey(bool value);
    public bool get_DropMessage();
    public void set_DropMessage(bool value);
    public bool get_DropMessageType();
    public void set_DropMessageType(bool value);
    public bool get_DropPartitionFunction();
    public void set_DropPartitionFunction(bool value);
    public bool get_DropPartitionScheme();
    public void set_DropPartitionScheme(bool value);
    public bool get_DropPlanGuide();
    public void set_DropPlanGuide(bool value);
    public bool get_DropProcedure();
    public void set_DropProcedure(bool value);
    public bool get_DropQueue();
    public void set_DropQueue(bool value);
    public bool get_DropRemoteServer();
    public void set_DropRemoteServer(bool value);
    public bool get_DropRemoteServiceBinding();
    public void set_DropRemoteServiceBinding(bool value);
    public bool get_DropResourcePool();
    public void set_DropResourcePool(bool value);
    public bool get_DropRole();
    public void set_DropRole(bool value);
    public bool get_DropRoleMember();
    public void set_DropRoleMember(bool value);
    public bool get_DropRoute();
    public void set_DropRoute(bool value);
    public bool get_DropRule();
    public void set_DropRule(bool value);
    public bool get_DropSchema();
    public void set_DropSchema(bool value);
    public bool get_DropSearchPropertyList();
    public void set_DropSearchPropertyList(bool value);
    public bool get_DropSecurityPolicy();
    public void set_DropSecurityPolicy(bool value);
    public bool get_DropSensitivityClassification();
    public void set_DropSensitivityClassification(bool value);
    public bool get_DropSequence();
    public void set_DropSequence(bool value);
    public bool get_DropServerAudit();
    public void set_DropServerAudit(bool value);
    public bool get_DropServerAuditSpecification();
    public void set_DropServerAuditSpecification(bool value);
    public bool get_DropServerRole();
    public void set_DropServerRole(bool value);
    public bool get_DropServerRoleMember();
    public void set_DropServerRoleMember(bool value);
    public bool get_DropService();
    public void set_DropService(bool value);
    public bool get_DropSignature();
    public void set_DropSignature(bool value);
    public bool get_DropSignatureSchemaObject();
    public void set_DropSignatureSchemaObject(bool value);
    public bool get_DropStatistics();
    public void set_DropStatistics(bool value);
    public bool get_DropSymmetricKey();
    public void set_DropSymmetricKey(bool value);
    public bool get_DropSynonym();
    public void set_DropSynonym(bool value);
    public bool get_DropTable();
    public void set_DropTable(bool value);
    public bool get_DropTrigger();
    public void set_DropTrigger(bool value);
    public bool get_DropType();
    public void set_DropType(bool value);
    public bool get_DropUser();
    public void set_DropUser(bool value);
    public bool get_DropView();
    public void set_DropView(bool value);
    public bool get_DropWorkloadGroup();
    public void set_DropWorkloadGroup(bool value);
    public bool get_DropXmlSchemaCollection();
    public void set_DropXmlSchemaCollection(bool value);
    public bool get_GrantDatabase();
    public void set_GrantDatabase(bool value);
    public bool get_GrantServer();
    public void set_GrantServer(bool value);
    public bool get_Rename();
    public void set_Rename(bool value);
    public bool get_RevokeDatabase();
    public void set_RevokeDatabase(bool value);
    public bool get_RevokeServer();
    public void set_RevokeServer(bool value);
    public bool get_UnbindDefault();
    public void set_UnbindDefault(bool value);
    public bool get_UnbindRule();
    public void set_UnbindRule(bool value);
    public bool get_UpdateStatistics();
    public void set_UpdateStatistics(bool value);
}
internal class Microsoft.SqlServer.Management.Smo.ServerEventsWorker : EventsWorkerBase {
    private Server target;
    protected SqlSmoObject Target { get; }
    public ServerEventsWorker(Server target, Type eventSetType, Type eventEnumType);
    protected virtual SqlSmoObject get_Target();
    protected virtual EventQuery CreateWqlQuery(string eventClass);
}
internal enum Microsoft.SqlServer.Management.Smo.ServerEventValues : Enum {
    public int value__;
    public static ServerEventValues AddRoleMember;
    public static ServerEventValues AddSensitivityClassification;
    public static ServerEventValues AddServerRoleMember;
    public static ServerEventValues AddSignature;
    public static ServerEventValues AddSignatureSchemaObject;
    public static ServerEventValues AlterApplicationRole;
    public static ServerEventValues AlterAssembly;
    public static ServerEventValues AlterAsymmetricKey;
    public static ServerEventValues AlterAudit;
    public static ServerEventValues AlterAuthorizationDatabase;
    public static ServerEventValues AlterAuthorizationServer;
    public static ServerEventValues AlterAvailabilityGroup;
    public static ServerEventValues AlterBrokerPriority;
    public static ServerEventValues AlterCertificate;
    public static ServerEventValues AlterColumnEncryptionKey;
    public static ServerEventValues AlterCredential;
    public static ServerEventValues AlterCryptographicProvider;
    public static ServerEventValues AlterDatabase;
    public static ServerEventValues AlterDatabaseAuditSpecification;
    public static ServerEventValues AlterDatabaseEncryptionKey;
    public static ServerEventValues AlterDatabaseScopedConfiguration;
    public static ServerEventValues AlterEndpoint;
    public static ServerEventValues AlterEventSession;
    public static ServerEventValues AlterExtendedProperty;
    public static ServerEventValues AlterExternalLanguage;
    public static ServerEventValues AlterExternalLibrary;
    public static ServerEventValues AlterExternalResourcePool;
    public static ServerEventValues AlterFulltextCatalog;
    public static ServerEventValues AlterFulltextIndex;
    public static ServerEventValues AlterFulltextStoplist;
    public static ServerEventValues AlterFunction;
    public static ServerEventValues AlterIndex;
    public static ServerEventValues AlterInstance;
    public static ServerEventValues AlterLinkedServer;
    public static ServerEventValues AlterLogin;
    public static ServerEventValues AlterMasterKey;
    public static ServerEventValues AlterMessage;
    public static ServerEventValues AlterMessageType;
    public static ServerEventValues AlterPartitionFunction;
    public static ServerEventValues AlterPartitionScheme;
    public static ServerEventValues AlterPlanGuide;
    public static ServerEventValues AlterProcedure;
    public static ServerEventValues AlterQueue;
    public static ServerEventValues AlterRemoteServer;
    public static ServerEventValues AlterRemoteServiceBinding;
    public static ServerEventValues AlterResourceGovernorConfig;
    public static ServerEventValues AlterResourcePool;
    public static ServerEventValues AlterRole;
    public static ServerEventValues AlterRoute;
    public static ServerEventValues AlterSchema;
    public static ServerEventValues AlterSearchPropertyList;
    public static ServerEventValues AlterSecurityPolicy;
    public static ServerEventValues AlterSequence;
    public static ServerEventValues AlterServerAudit;
    public static ServerEventValues AlterServerAuditSpecification;
    public static ServerEventValues AlterServerConfiguration;
    public static ServerEventValues AlterServerRole;
    public static ServerEventValues AlterService;
    public static ServerEventValues AlterServiceMasterKey;
    public static ServerEventValues AlterSymmetricKey;
    public static ServerEventValues AlterTable;
    public static ServerEventValues AlterTrigger;
    public static ServerEventValues AlterUser;
    public static ServerEventValues AlterView;
    public static ServerEventValues AlterWorkloadGroup;
    public static ServerEventValues AlterXmlSchemaCollection;
    public static ServerEventValues BindDefault;
    public static ServerEventValues BindRule;
    public static ServerEventValues CreateApplicationRole;
    public static ServerEventValues CreateAssembly;
    public static ServerEventValues CreateAsymmetricKey;
    public static ServerEventValues CreateAudit;
    public static ServerEventValues CreateAvailabilityGroup;
    public static ServerEventValues CreateBrokerPriority;
    public static ServerEventValues CreateCertificate;
    public static ServerEventValues CreateColumnEncryptionKey;
    public static ServerEventValues CreateColumnMasterKey;
    public static ServerEventValues CreateContract;
    public static ServerEventValues CreateCredential;
    public static ServerEventValues CreateCryptographicProvider;
    public static ServerEventValues CreateDatabase;
    public static ServerEventValues CreateDatabaseAuditSpecification;
    public static ServerEventValues CreateDatabaseEncryptionKey;
    public static ServerEventValues CreateDefault;
    public static ServerEventValues CreateEndpoint;
    public static ServerEventValues CreateEventNotification;
    public static ServerEventValues CreateEventSession;
    public static ServerEventValues CreateExtendedProcedure;
    public static ServerEventValues CreateExtendedProperty;
    public static ServerEventValues CreateExternalLanguage;
    public static ServerEventValues CreateExternalLibrary;
    public static ServerEventValues CreateExternalResourcePool;
    public static ServerEventValues CreateFulltextCatalog;
    public static ServerEventValues CreateFulltextIndex;
    public static ServerEventValues CreateFulltextStoplist;
    public static ServerEventValues CreateFunction;
    public static ServerEventValues CreateIndex;
    public static ServerEventValues CreateLinkedServer;
    public static ServerEventValues CreateLinkedServerLogin;
    public static ServerEventValues CreateLogin;
    public static ServerEventValues CreateMasterKey;
    public static ServerEventValues CreateMessage;
    public static ServerEventValues CreateMessageType;
    public static ServerEventValues CreatePartitionFunction;
    public static ServerEventValues CreatePartitionScheme;
    public static ServerEventValues CreatePlanGuide;
    public static ServerEventValues CreateProcedure;
    public static ServerEventValues CreateQueue;
    public static ServerEventValues CreateRemoteServer;
    public static ServerEventValues CreateRemoteServiceBinding;
    public static ServerEventValues CreateResourcePool;
    public static ServerEventValues CreateRole;
    public static ServerEventValues CreateRoute;
    public static ServerEventValues CreateRule;
    public static ServerEventValues CreateSchema;
    public static ServerEventValues CreateSearchPropertyList;
    public static ServerEventValues CreateSecurityPolicy;
    public static ServerEventValues CreateSequence;
    public static ServerEventValues CreateServerAudit;
    public static ServerEventValues CreateServerAuditSpecification;
    public static ServerEventValues CreateServerRole;
    public static ServerEventValues CreateService;
    public static ServerEventValues CreateSpatialIndex;
    public static ServerEventValues CreateStatistics;
    public static ServerEventValues CreateSymmetricKey;
    public static ServerEventValues CreateSynonym;
    public static ServerEventValues CreateTable;
    public static ServerEventValues CreateTrigger;
    public static ServerEventValues CreateType;
    public static ServerEventValues CreateUser;
    public static ServerEventValues CreateView;
    public static ServerEventValues CreateWorkloadGroup;
    public static ServerEventValues CreateXmlIndex;
    public static ServerEventValues CreateXmlSchemaCollection;
    public static ServerEventValues DenyDatabase;
    public static ServerEventValues DenyServer;
    public static ServerEventValues DropApplicationRole;
    public static ServerEventValues DropAssembly;
    public static ServerEventValues DropAsymmetricKey;
    public static ServerEventValues DropAudit;
    public static ServerEventValues DropAvailabilityGroup;
    public static ServerEventValues DropBrokerPriority;
    public static ServerEventValues DropCertificate;
    public static ServerEventValues DropColumnEncryptionKey;
    public static ServerEventValues DropColumnMasterKey;
    public static ServerEventValues DropContract;
    public static ServerEventValues DropCredential;
    public static ServerEventValues DropCryptographicProvider;
    public static ServerEventValues DropDatabase;
    public static ServerEventValues DropDatabaseAuditSpecification;
    public static ServerEventValues DropDatabaseEncryptionKey;
    public static ServerEventValues DropDefault;
    public static ServerEventValues DropEndpoint;
    public static ServerEventValues DropEventNotification;
    public static ServerEventValues DropEventSession;
    public static ServerEventValues DropExtendedProcedure;
    public static ServerEventValues DropExtendedProperty;
    public static ServerEventValues DropExternalLanguage;
    public static ServerEventValues DropExternalLibrary;
    public static ServerEventValues DropExternalResourcePool;
    public static ServerEventValues DropFulltextCatalog;
    public static ServerEventValues DropFulltextIndex;
    public static ServerEventValues DropFulltextStoplist;
    public static ServerEventValues DropFunction;
    public static ServerEventValues DropIndex;
    public static ServerEventValues DropLinkedServer;
    public static ServerEventValues DropLinkedServerLogin;
    public static ServerEventValues DropLogin;
    public static ServerEventValues DropMasterKey;
    public static ServerEventValues DropMessage;
    public static ServerEventValues DropMessageType;
    public static ServerEventValues DropPartitionFunction;
    public static ServerEventValues DropPartitionScheme;
    public static ServerEventValues DropPlanGuide;
    public static ServerEventValues DropProcedure;
    public static ServerEventValues DropQueue;
    public static ServerEventValues DropRemoteServer;
    public static ServerEventValues DropRemoteServiceBinding;
    public static ServerEventValues DropResourcePool;
    public static ServerEventValues DropRole;
    public static ServerEventValues DropRoleMember;
    public static ServerEventValues DropRoute;
    public static ServerEventValues DropRule;
    public static ServerEventValues DropSchema;
    public static ServerEventValues DropSearchPropertyList;
    public static ServerEventValues DropSecurityPolicy;
    public static ServerEventValues DropSensitivityClassification;
    public static ServerEventValues DropSequence;
    public static ServerEventValues DropServerAudit;
    public static ServerEventValues DropServerAuditSpecification;
    public static ServerEventValues DropServerRole;
    public static ServerEventValues DropServerRoleMember;
    public static ServerEventValues DropService;
    public static ServerEventValues DropSignature;
    public static ServerEventValues DropSignatureSchemaObject;
    public static ServerEventValues DropStatistics;
    public static ServerEventValues DropSymmetricKey;
    public static ServerEventValues DropSynonym;
    public static ServerEventValues DropTable;
    public static ServerEventValues DropTrigger;
    public static ServerEventValues DropType;
    public static ServerEventValues DropUser;
    public static ServerEventValues DropView;
    public static ServerEventValues DropWorkloadGroup;
    public static ServerEventValues DropXmlSchemaCollection;
    public static ServerEventValues GrantDatabase;
    public static ServerEventValues GrantServer;
    public static ServerEventValues Rename;
    public static ServerEventValues RevokeDatabase;
    public static ServerEventValues RevokeServer;
    public static ServerEventValues UnbindDefault;
    public static ServerEventValues UnbindRule;
    public static ServerEventValues UpdateStatistics;
}
public class Microsoft.SqlServer.Management.Smo.ServerPermission : object {
    private ServerPermissionSetValue m_value;
    internal ServerPermissionSetValue Value { get; }
    public static ServerPermission AdministerBulkOperations { get; }
    public static ServerPermission AlterAnyServerAudit { get; }
    public static ServerPermission AlterAnyCredential { get; }
    public static ServerPermission AlterAnyConnection { get; }
    public static ServerPermission AlterAnyDatabase { get; }
    public static ServerPermission AlterAnyEventNotification { get; }
    public static ServerPermission AlterAnyEndpoint { get; }
    public static ServerPermission AlterAnyEventSessionAddEvent { get; }
    public static ServerPermission AlterAnyEventSessionAddTarget { get; }
    public static ServerPermission AlterAnyEventSessionDisable { get; }
    public static ServerPermission AlterAnyEventSessionDropEvent { get; }
    public static ServerPermission AlterAnyEventSessionDropTarget { get; }
    public static ServerPermission AlterAnyEventSessionEnable { get; }
    public static ServerPermission AlterAnyEventSessionOption { get; }
    public static ServerPermission AlterAnyLogin { get; }
    public static ServerPermission AlterAnyLinkedServer { get; }
    public static ServerPermission AlterResources { get; }
    public static ServerPermission AlterServerState { get; }
    public static ServerPermission AlterSettings { get; }
    public static ServerPermission AlterTrace { get; }
    public static ServerPermission AuthenticateServer { get; }
    public static ServerPermission ControlServer { get; }
    public static ServerPermission ConnectSql { get; }
    public static ServerPermission CreateAnyDatabase { get; }
    public static ServerPermission CreateAnyEventSession { get; }
    public static ServerPermission CreateDdlEventNotification { get; }
    public static ServerPermission CreateEndpoint { get; }
    public static ServerPermission CreateLogin { get; }
    public static ServerPermission CreateTraceEventNotification { get; }
    public static ServerPermission DropAnyEventSession { get; }
    public static ServerPermission Shutdown { get; }
    public static ServerPermission ViewAnyCryptographicallySecuredDefinition { get; }
    public static ServerPermission ViewAnyDefinition { get; }
    public static ServerPermission ViewAnyDatabase { get; }
    public static ServerPermission ViewAnyErrorLog { get; }
    public static ServerPermission ViewAnyPerformanceDefinition { get; }
    public static ServerPermission ViewAnySecurityDefinition { get; }
    public static ServerPermission ViewServerPerformanceState { get; }
    public static ServerPermission ViewServerSecurityAudit { get; }
    public static ServerPermission ViewServerSecurityState { get; }
    public static ServerPermission ViewServerState { get; }
    public static ServerPermission ExternalAccessAssembly { get; }
    public static ServerPermission UnsafeAssembly { get; }
    public static ServerPermission AlterAnyServerRole { get; }
    public static ServerPermission CreateServerRole { get; }
    public static ServerPermission AlterAnyAvailabilityGroup { get; }
    public static ServerPermission CreateAvailabilityGroup { get; }
    public static ServerPermission AlterAnyEventSession { get; }
    public static ServerPermission SelectAllUserSecurables { get; }
    public static ServerPermission ConnectAnyDatabase { get; }
    public static ServerPermission ImpersonateAnyLogin { get; }
    internal ServerPermission(ServerPermissionSetValue permissionValue);
    internal ServerPermissionSetValue get_Value();
    public static ServerPermissionSet op_Implicit(ServerPermission permission);
    public static ServerPermissionSet ToServerPermissionSet(ServerPermission permission);
    public static ServerPermissionSet op_Addition(ServerPermission permissionLeft, ServerPermission permissionRight);
    public static ServerPermissionSet Add(ServerPermission permissionLeft, ServerPermission permissionRight);
    public static ServerPermissionSet op_BitwiseOr(ServerPermission permissionLeft, ServerPermission permissionRight);
    public static ServerPermissionSet BitwiseOr(ServerPermission permissionLeft, ServerPermission permissionRight);
    public static ServerPermission get_AdministerBulkOperations();
    public static ServerPermission get_AlterAnyServerAudit();
    public static ServerPermission get_AlterAnyCredential();
    public static ServerPermission get_AlterAnyConnection();
    public static ServerPermission get_AlterAnyDatabase();
    public static ServerPermission get_AlterAnyEventNotification();
    public static ServerPermission get_AlterAnyEndpoint();
    public static ServerPermission get_AlterAnyEventSessionAddEvent();
    public static ServerPermission get_AlterAnyEventSessionAddTarget();
    public static ServerPermission get_AlterAnyEventSessionDisable();
    public static ServerPermission get_AlterAnyEventSessionDropEvent();
    public static ServerPermission get_AlterAnyEventSessionDropTarget();
    public static ServerPermission get_AlterAnyEventSessionEnable();
    public static ServerPermission get_AlterAnyEventSessionOption();
    public static ServerPermission get_AlterAnyLogin();
    public static ServerPermission get_AlterAnyLinkedServer();
    public static ServerPermission get_AlterResources();
    public static ServerPermission get_AlterServerState();
    public static ServerPermission get_AlterSettings();
    public static ServerPermission get_AlterTrace();
    public static ServerPermission get_AuthenticateServer();
    public static ServerPermission get_ControlServer();
    public static ServerPermission get_ConnectSql();
    public static ServerPermission get_CreateAnyDatabase();
    public static ServerPermission get_CreateAnyEventSession();
    public static ServerPermission get_CreateDdlEventNotification();
    public static ServerPermission get_CreateEndpoint();
    public static ServerPermission get_CreateLogin();
    public static ServerPermission get_CreateTraceEventNotification();
    public static ServerPermission get_DropAnyEventSession();
    public static ServerPermission get_Shutdown();
    public static ServerPermission get_ViewAnyCryptographicallySecuredDefinition();
    public static ServerPermission get_ViewAnyDefinition();
    public static ServerPermission get_ViewAnyDatabase();
    public static ServerPermission get_ViewAnyErrorLog();
    public static ServerPermission get_ViewAnyPerformanceDefinition();
    public static ServerPermission get_ViewAnySecurityDefinition();
    public static ServerPermission get_ViewServerPerformanceState();
    public static ServerPermission get_ViewServerSecurityAudit();
    public static ServerPermission get_ViewServerSecurityState();
    public static ServerPermission get_ViewServerState();
    public static ServerPermission get_ExternalAccessAssembly();
    public static ServerPermission get_UnsafeAssembly();
    public static ServerPermission get_AlterAnyServerRole();
    public static ServerPermission get_CreateServerRole();
    public static ServerPermission get_AlterAnyAvailabilityGroup();
    public static ServerPermission get_CreateAvailabilityGroup();
    public static ServerPermission get_AlterAnyEventSession();
    public static ServerPermission get_SelectAllUserSecurables();
    public static ServerPermission get_ConnectAnyDatabase();
    public static ServerPermission get_ImpersonateAnyLogin();
    public virtual int GetHashCode();
    public virtual bool Equals(object o);
    public static bool op_Equality(ServerPermission p1, ServerPermission p2);
    public static bool op_Inequality(ServerPermission p1, ServerPermission p2);
}
public class Microsoft.SqlServer.Management.Smo.ServerPermissionInfo : PermissionInfo {
    public ServerPermissionSet PermissionType { get; }
    public ServerPermissionSet get_PermissionType();
}
public class Microsoft.SqlServer.Management.Smo.ServerPermissionSet : PermissionSetBase {
    internal int NumberOfElements { get; }
    public bool AdministerBulkOperations { get; public set; }
    public bool AlterAnyServerAudit { get; public set; }
    public bool AlterAnyCredential { get; public set; }
    public bool AlterAnyConnection { get; public set; }
    public bool AlterAnyDatabase { get; public set; }
    public bool AlterAnyEventNotification { get; public set; }
    public bool AlterAnyEndpoint { get; public set; }
    public bool AlterAnyEventSessionAddEvent { get; public set; }
    public bool AlterAnyEventSessionAddTarget { get; public set; }
    public bool AlterAnyEventSessionDisable { get; public set; }
    public bool AlterAnyEventSessionDropEvent { get; public set; }
    public bool AlterAnyEventSessionDropTarget { get; public set; }
    public bool AlterAnyEventSessionEnable { get; public set; }
    public bool AlterAnyEventSessionOption { get; public set; }
    public bool AlterAnyLogin { get; public set; }
    public bool AlterAnyLinkedServer { get; public set; }
    public bool AlterResources { get; public set; }
    public bool AlterServerState { get; public set; }
    public bool AlterSettings { get; public set; }
    public bool AlterTrace { get; public set; }
    public bool AuthenticateServer { get; public set; }
    public bool ControlServer { get; public set; }
    public bool ConnectSql { get; public set; }
    public bool CreateAnyDatabase { get; public set; }
    public bool CreateAnyEventSession { get; public set; }
    public bool CreateDdlEventNotification { get; public set; }
    public bool CreateEndpoint { get; public set; }
    public bool CreateLogin { get; public set; }
    public bool CreateTraceEventNotification { get; public set; }
    public bool DropAnyEventSession { get; public set; }
    public bool Shutdown { get; public set; }
    public bool ViewAnyCryptographicallySecuredDefinition { get; public set; }
    public bool ViewAnyDefinition { get; public set; }
    public bool ViewAnyDatabase { get; public set; }
    public bool ViewAnyErrorLog { get; public set; }
    public bool ViewAnyPerformanceDefinition { get; public set; }
    public bool ViewAnySecurityDefinition { get; public set; }
    public bool ViewServerPerformanceState { get; public set; }
    public bool ViewServerSecurityAudit { get; public set; }
    public bool ViewServerSecurityState { get; public set; }
    public bool ViewServerState { get; public set; }
    public bool ExternalAccessAssembly { get; public set; }
    public bool UnsafeAssembly { get; public set; }
    public bool AlterAnyServerRole { get; public set; }
    public bool CreateServerRole { get; public set; }
    public bool AlterAnyAvailabilityGroup { get; public set; }
    public bool CreateAvailabilityGroup { get; public set; }
    public bool AlterAnyEventSession { get; public set; }
    public bool SelectAllUserSecurables { get; public set; }
    public bool ConnectAnyDatabase { get; public set; }
    public bool ImpersonateAnyLogin { get; public set; }
    public ServerPermissionSet(ServerPermissionSet oServerPermissionSet);
    public ServerPermissionSet(ServerPermission permission);
    public ServerPermissionSet(ServerPermission[] permissions);
    internal void SetBit(ServerPermission permission);
    internal void ResetBit(ServerPermission permission);
    public ServerPermissionSet Add(ServerPermission permission);
    public ServerPermissionSet Remove(ServerPermission permission);
    public static ServerPermissionSet op_Addition(ServerPermissionSet permissionLeft, ServerPermission permissionRight);
    public static ServerPermissionSet Add(ServerPermissionSet permissionLeft, ServerPermission permissionRight);
    public static ServerPermissionSet op_Subtraction(ServerPermissionSet permissionLeft, ServerPermission permissionRight);
    public static ServerPermissionSet Subtract(ServerPermissionSet permissionLeft, ServerPermission permissionRight);
    internal virtual int get_NumberOfElements();
    internal virtual string PermissionCodeToPermissionName(int permissionCode);
    internal virtual string PermissionCodeToPermissionType(int permissionCode);
    public bool get_AdministerBulkOperations();
    public void set_AdministerBulkOperations(bool value);
    public bool get_AlterAnyServerAudit();
    public void set_AlterAnyServerAudit(bool value);
    public bool get_AlterAnyCredential();
    public void set_AlterAnyCredential(bool value);
    public bool get_AlterAnyConnection();
    public void set_AlterAnyConnection(bool value);
    public bool get_AlterAnyDatabase();
    public void set_AlterAnyDatabase(bool value);
    public bool get_AlterAnyEventNotification();
    public void set_AlterAnyEventNotification(bool value);
    public bool get_AlterAnyEndpoint();
    public void set_AlterAnyEndpoint(bool value);
    public bool get_AlterAnyEventSessionAddEvent();
    public void set_AlterAnyEventSessionAddEvent(bool value);
    public bool get_AlterAnyEventSessionAddTarget();
    public void set_AlterAnyEventSessionAddTarget(bool value);
    public bool get_AlterAnyEventSessionDisable();
    public void set_AlterAnyEventSessionDisable(bool value);
    public bool get_AlterAnyEventSessionDropEvent();
    public void set_AlterAnyEventSessionDropEvent(bool value);
    public bool get_AlterAnyEventSessionDropTarget();
    public void set_AlterAnyEventSessionDropTarget(bool value);
    public bool get_AlterAnyEventSessionEnable();
    public void set_AlterAnyEventSessionEnable(bool value);
    public bool get_AlterAnyEventSessionOption();
    public void set_AlterAnyEventSessionOption(bool value);
    public bool get_AlterAnyLogin();
    public void set_AlterAnyLogin(bool value);
    public bool get_AlterAnyLinkedServer();
    public void set_AlterAnyLinkedServer(bool value);
    public bool get_AlterResources();
    public void set_AlterResources(bool value);
    public bool get_AlterServerState();
    public void set_AlterServerState(bool value);
    public bool get_AlterSettings();
    public void set_AlterSettings(bool value);
    public bool get_AlterTrace();
    public void set_AlterTrace(bool value);
    public bool get_AuthenticateServer();
    public void set_AuthenticateServer(bool value);
    public bool get_ControlServer();
    public void set_ControlServer(bool value);
    public bool get_ConnectSql();
    public void set_ConnectSql(bool value);
    public bool get_CreateAnyDatabase();
    public void set_CreateAnyDatabase(bool value);
    public bool get_CreateAnyEventSession();
    public void set_CreateAnyEventSession(bool value);
    public bool get_CreateDdlEventNotification();
    public void set_CreateDdlEventNotification(bool value);
    public bool get_CreateEndpoint();
    public void set_CreateEndpoint(bool value);
    public bool get_CreateLogin();
    public void set_CreateLogin(bool value);
    public bool get_CreateTraceEventNotification();
    public void set_CreateTraceEventNotification(bool value);
    public bool get_DropAnyEventSession();
    public void set_DropAnyEventSession(bool value);
    public bool get_Shutdown();
    public void set_Shutdown(bool value);
    public bool get_ViewAnyCryptographicallySecuredDefinition();
    public void set_ViewAnyCryptographicallySecuredDefinition(bool value);
    public bool get_ViewAnyDefinition();
    public void set_ViewAnyDefinition(bool value);
    public bool get_ViewAnyDatabase();
    public void set_ViewAnyDatabase(bool value);
    public bool get_ViewAnyErrorLog();
    public void set_ViewAnyErrorLog(bool value);
    public bool get_ViewAnyPerformanceDefinition();
    public void set_ViewAnyPerformanceDefinition(bool value);
    public bool get_ViewAnySecurityDefinition();
    public void set_ViewAnySecurityDefinition(bool value);
    public bool get_ViewServerPerformanceState();
    public void set_ViewServerPerformanceState(bool value);
    public bool get_ViewServerSecurityAudit();
    public void set_ViewServerSecurityAudit(bool value);
    public bool get_ViewServerSecurityState();
    public void set_ViewServerSecurityState(bool value);
    public bool get_ViewServerState();
    public void set_ViewServerState(bool value);
    public bool get_ExternalAccessAssembly();
    public void set_ExternalAccessAssembly(bool value);
    public bool get_UnsafeAssembly();
    public void set_UnsafeAssembly(bool value);
    public bool get_AlterAnyServerRole();
    public void set_AlterAnyServerRole(bool value);
    public bool get_CreateServerRole();
    public void set_CreateServerRole(bool value);
    public bool get_AlterAnyAvailabilityGroup();
    public void set_AlterAnyAvailabilityGroup(bool value);
    public bool get_CreateAvailabilityGroup();
    public void set_CreateAvailabilityGroup(bool value);
    public bool get_AlterAnyEventSession();
    public void set_AlterAnyEventSession(bool value);
    public bool get_SelectAllUserSecurables();
    public void set_SelectAllUserSecurables(bool value);
    public bool get_ConnectAnyDatabase();
    public void set_ConnectAnyDatabase(bool value);
    public bool get_ImpersonateAnyLogin();
    public void set_ImpersonateAnyLogin(bool value);
    public virtual int GetHashCode();
    public virtual bool Equals(object o);
    public static bool op_Equality(ServerPermissionSet p1, ServerPermissionSet p2);
    public static bool op_Inequality(ServerPermissionSet p1, ServerPermissionSet p2);
}
[SfcElementAttribute("16")]
public class Microsoft.SqlServer.Management.Smo.ServerProxyAccount : SqlSmoObject {
    private SqlSecureString m_password;
    [SfcObjectAttribute("1")]
public Server Parent { get; }
    public static string UrnSuffix { get; }
    [SfcPropertyAttribute("1024")]
public bool IsEnabled { get; public set; }
    [SfcPropertyAttribute("1024")]
public string WindowsAccount { get; public set; }
    internal ServerProxyAccount(Server parent, ObjectKeyBase key, SqlSmoState state);
    public Server get_Parent();
    public void SetPassword(string password);
    public void SetPassword(SecureString password);
    public void SetAccount(string windowsAccount, string password);
    public void SetAccount(string windowsAccount, SecureString password);
    public static string get_UrnSuffix();
    internal static void ParseAccountName(string accountName, StringBuilder domainName, StringBuilder userName);
    internal virtual void ScriptAlter(StringCollection query, ScriptingPreferences sp);
    public sealed virtual void Alter();
    protected sealed virtual void GetUrnRecursive(StringBuilder urnbuilder, UrnIdOption idOption);
    internal virtual SqlPropertyMetadataProvider GetPropertyMetadataProvider();
    public bool get_IsEnabled();
    public void set_IsEnabled(bool value);
    public string get_WindowsAccount();
    public void set_WindowsAccount(string value);
}
[StateChangeEventAttribute("CREATE_SERVER_ROLE", "SERVER ROLE")]
[StateChangeEventAttribute("ALTER_SERVER_ROLE", "SERVER ROLE")]
[StateChangeEventAttribute("ALTER_AUTHORIZATION_SERVER", "SERVER ROLE")]
[EvaluationModeAttribute("7")]
[PhysicalFacetAttribute]
[SfcElementTypeAttribute("Role")]
[SfcElementAttribute("16")]
public class Microsoft.SqlServer.Management.Smo.ServerRole : ScriptNameObjectBase {
    private ServerRoleEvents events;
    public static string UrnSuffix { get; }
    [SfcObjectAttribute("1")]
public Server Parent { get; public set; }
    internal UserPermissionCollection Permissions { get; }
    [SfcPropertyAttribute("1024")]
public DateTime DateCreated { get; }
    [SfcPropertyAttribute("1024")]
public DateTime DateModified { get; }
    [SfcPropertyAttribute("1024")]
public int ID { get; }
    [SfcPropertyAttribute("1024")]
public bool IsFixedRole { get; }
    [SfcPropertyAttribute("1024")]
public string Owner { get; public set; }
    public ServerRoleEvents Events { get; }
    internal ServerRole(AbstractCollectionBase parentColl, ObjectKeyBase key, SqlSmoState state);
    public ServerRole(Server server, string name);
    public static string get_UrnSuffix();
    public sealed virtual void Alter();
    public sealed virtual StringCollection Script();
    public sealed virtual StringCollection Script(ScriptingOptions scriptingOptions);
    public sealed virtual void Rename(string newname);
    public sealed virtual void Create();
    public sealed virtual void Drop();
    public sealed virtual void DropIfExists();
    internal virtual void ScriptAlter(StringCollection alterQuery, ScriptingPreferences sp);
    internal virtual void ScriptRename(StringCollection renameQuery, ScriptingPreferences sp, string newName);
    internal virtual void ScriptDrop(StringCollection dropQuery, ScriptingPreferences sp);
    internal virtual void ScriptCreate(StringCollection createQuery, ScriptingPreferences sp);
    internal virtual void ScriptAssociations(StringCollection rolesCmd, ScriptingPreferences sp);
    private string ScriptAddMembershipToRole(string role);
    private string ScriptDropMembershipFromRole(string role);
    public StringCollection EnumContainingRoleNames();
    public void AddMember(string memberName);
    public void DropMember(string memberName);
    [ObsoleteAttribute]
public StringCollection EnumServerRoleMembers();
    public StringCollection EnumMemberNames();
    internal StringCollection EnumServerRoleMemberships();
    public void AddMembershipToRole(string roleName);
    public void DropMembershipFromRole(string roleName);
    [ObsoleteAttribute]
public DataTable EnumServerRolePermissions();
    public DataTable EnumAgentProxyAccounts();
    public Server get_Parent();
    public void set_Parent(Server value);
    internal virtual UserPermissionCollection get_Permissions();
    internal virtual SqlPropertyMetadataProvider GetPropertyMetadataProvider();
    public DateTime get_DateCreated();
    public DateTime get_DateModified();
    public int get_ID();
    public bool get_IsFixedRole();
    public string get_Owner();
    public void set_Owner(string value);
    public sealed virtual void Deny(ObjectPermissionSet permission, String[] granteeNames);
    public sealed virtual void Deny(ObjectPermissionSet permission, String[] granteeNames, bool cascade);
    public sealed virtual void Grant(ObjectPermissionSet permission, String[] granteeNames);
    public sealed virtual void Grant(ObjectPermissionSet permission, String[] granteeNames, bool grantGrant);
    public sealed virtual void Grant(ObjectPermissionSet permission, String[] granteeNames, bool grantGrant, string asRole);
    public sealed virtual void Revoke(ObjectPermissionSet permission, String[] granteeNames);
    public sealed virtual void Revoke(ObjectPermissionSet permission, String[] granteeNames, bool revokeGrant, bool cascade);
    public void Revoke(ObjectPermissionSet permission, String[] granteeNames, bool revokeGrant, bool cascade, string asRole);
    public sealed virtual void Deny(ObjectPermissionSet permission, string granteeName);
    public sealed virtual void Deny(ObjectPermissionSet permission, string granteeName, bool cascade);
    public sealed virtual void Grant(ObjectPermissionSet permission, string granteeName);
    public sealed virtual void Grant(ObjectPermissionSet permission, string granteeName, bool grantGrant);
    public sealed virtual void Grant(ObjectPermissionSet permission, string granteeName, bool grantGrant, string asRole);
    public sealed virtual void Revoke(ObjectPermissionSet permission, string granteeName);
    public void Revoke(ObjectPermissionSet permission, string granteeName, bool revokeGrant, bool cascade);
    public sealed virtual void Revoke(ObjectPermissionSet permission, string granteeName, bool revokeGrant, bool cascade, string asRole);
    public sealed virtual ObjectPermissionInfo[] EnumObjectPermissions();
    public sealed virtual ObjectPermissionInfo[] EnumObjectPermissions(string granteeName);
    public sealed virtual ObjectPermissionInfo[] EnumObjectPermissions(ObjectPermissionSet permissions);
    public sealed virtual ObjectPermissionInfo[] EnumObjectPermissions(string granteeName, ObjectPermissionSet permissions);
    public ServerRoleEvents get_Events();
}
[DefaultMemberAttribute("Item")]
public class Microsoft.SqlServer.Management.Smo.ServerRoleCollection : SimpleObjectCollectionBase {
    public Server Parent { get; }
    public ServerRole Item { get; }
    public ServerRole Item { get; }
    internal ServerRoleCollection(SqlSmoObject parentInstance);
    public Server get_Parent();
    public ServerRole get_Item(int index);
    public ServerRole get_Item(string name);
    public void CopyTo(ServerRole[] array, int index);
    public ServerRole ItemById(int id);
    protected virtual Type GetCollectionElementType();
    internal virtual SqlSmoObject GetCollectionElementInstance(ObjectKeyBase key, SqlSmoState state);
    public void Add(ServerRole serverRole);
    internal SqlSmoObject GetObjectByName(string name);
    internal virtual ObjectKeyBase CreateKeyFromUrn(Urn urn);
}
public class Microsoft.SqlServer.Management.Smo.ServerRoleEvents : object {
    private ObjectEventsWorker serverEventsWorker;
    private ServerRole parent;
    internal ServerRoleEvents(ServerRole parent);
    public ObjectEventSet GetEventSelection();
    public void SubscribeToEvents(ObjectEventSet events);
    public void SubscribeToEvents(ObjectEventSet events, ServerEventHandler eventHandler);
    public void UnsubscribeFromEvents(ObjectEventSet events);
    public void UnsubscribeAllEvents();
    public void StartEvents();
    public void StopEvents();
    public void add_ServerEvent(ServerEventHandler value);
    public void remove_ServerEvent(ServerEventHandler value);
    private void InitializeEvents();
}
[CLSCompliantAttribute("False")]
public class Microsoft.SqlServer.Management.Smo.ServerRoleExtender : SmoObjectExtender`1<ServerRole> {
    private DataTable serverRoleMembershipsTableData;
    private StringCollection containingRoleNames;
    private ServerRoleCollection serverRoleCol;
    private Dictionary`2<string, bool> svrRoleNameHasMembershipHash;
    private DataTable roleMembersTableData;
    private Dictionary`2<string, bool> memberNameIsMemberHash;
    private StringCollection memberNames;
    [CompilerGeneratedAttribute]
private EventHandler generalPageOnRunNow;
    private object generalPageDataContainer;
    [ExtendedPropertyAttribute]
public SqlSmoState State { get; }
    [ExtendedPropertyAttribute]
public SqlSmoObject CurrentObject { get; }
    [ExtendedPropertyAttribute]
public bool IsFixedRoleOrPublic { get; }
    [ExtendedPropertyAttribute]
public string OwnerForUI { get; public set; }
    [ExtendedPropertyAttribute]
public ServerConnection ConnectionContext { get; }
    [ExtendedPropertyAttribute]
public DataTable ServerRoleMembershipsTableData { get; }
    [ExtendedPropertyAttribute]
public object GeneralPageOnRunNow { get; public set; }
    [ExtendedPropertyAttribute]
public object GeneralPageDataContainer { get; public set; }
    private DataTable ServerRoleMembershipsTableSchema { get; }
    public Dictionary`2<string, bool> ServerRoleNameHasMembershipHash { get; }
    private ServerRoleCollection SvrRoleCollection { get; }
    [ExtendedPropertyAttribute]
public StringCollection ContainingRoleNames { get; }
    [ExtendedPropertyAttribute]
public DataTable RoleMembersTableData { get; }
    private StringCollection MemberNames { get; }
    private DataTable RoleMembersTableSchema { get; }
    public Dictionary`2<string, bool> MemberNameIsMemberHash { get; }
    public ServerRoleExtender(ServerRole serverRole);
    [CompilerGeneratedAttribute]
private void add_generalPageOnRunNow(EventHandler value);
    [CompilerGeneratedAttribute]
private void remove_generalPageOnRunNow(EventHandler value);
    public SqlSmoState get_State();
    public SqlSmoObject get_CurrentObject();
    public bool get_IsFixedRoleOrPublic();
    public string get_OwnerForUI();
    public void set_OwnerForUI(string value);
    public ServerConnection get_ConnectionContext();
    public DataTable get_ServerRoleMembershipsTableData();
    public object get_GeneralPageOnRunNow();
    public void set_GeneralPageOnRunNow(object value);
    public object get_GeneralPageDataContainer();
    public void set_GeneralPageDataContainer(object value);
    private void PopulateRequiredVariables();
    private DataTable get_ServerRoleMembershipsTableSchema();
    public void RefreshServerRoleNameHasMembershipHash();
    private bool IsMembershipChanged(string roleName, bool hasMembership);
    public Dictionary`2<string, bool> get_ServerRoleNameHasMembershipHash();
    private ServerRoleCollection get_SvrRoleCollection();
    public StringCollection get_ContainingRoleNames();
    public DataTable get_RoleMembersTableData();
    public void RefreshRoleMembersHash();
    private StringCollection get_MemberNames();
    private DataTable get_RoleMembersTableSchema();
    public Dictionary`2<string, bool> get_MemberNameIsMemberHash();
    public sealed virtual ValidationState Validate(string methodName, Object[] arguments);
}
public class Microsoft.SqlServer.Management.Smo.ServerSecurityAdapter : ServerAdapterBase {
    public bool CmdExecRightsForSystemAdminsOnly { get; }
    public bool ReplaceAlertTokensEnabled { get; public set; }
    public bool ProxyAccountIsGrantedToPublicRole { get; }
    public bool ProxyAccountEnabled { get; }
    public bool PublicServerRoleIsGrantedPermissions { get; }
    public ServerSecurityAdapter(Server obj);
    public sealed virtual bool get_CmdExecRightsForSystemAdminsOnly();
    public sealed virtual bool get_ReplaceAlertTokensEnabled();
    public sealed virtual void set_ReplaceAlertTokensEnabled(bool value);
    public sealed virtual bool get_ProxyAccountIsGrantedToPublicRole();
    public sealed virtual bool get_ProxyAccountEnabled();
    public sealed virtual bool get_PublicServerRoleIsGrantedPermissions();
    public virtual void Refresh();
    public virtual void Alter();
}
public class Microsoft.SqlServer.Management.Smo.ServerSelectionAdapter : ServerAdapterBase {
    public int BuildNumber { get; }
    public string Edition { get; }
    public bool IsCaseSensitive { get; }
    public string Language { get; }
    public string OSVersion { get; }
    public string Platform { get; }
    public int VersionMajor { get; }
    public int VersionMinor { get; }
    public ServerSelectionAdapter(Server obj);
    public sealed virtual int get_BuildNumber();
    public sealed virtual string get_Edition();
    public sealed virtual bool get_IsCaseSensitive();
    public sealed virtual string get_Language();
    public sealed virtual string get_OSVersion();
    public sealed virtual string get_Platform();
    public sealed virtual int get_VersionMajor();
    public sealed virtual int get_VersionMinor();
}
public class Microsoft.SqlServer.Management.Smo.ServerSetupAdapter : ServerAdapterBase {
    public string ServiceInstanceIdSuffix { get; }
    public String[] WindowsUsersAndGroupsInSysadminRole { get; }
    public string TempdbPrimaryFilePath { get; }
    public string TempdbLogPath { get; }
    public ServiceStartMode AgentStartMode { get; }
    public string AgentServiceAccount { get; }
    public string AgentDomainGroup { get; }
    public string EngineServiceAccount { get; }
    public ServerSetupAdapter(Server obj);
    public sealed virtual string get_ServiceInstanceIdSuffix();
    public sealed virtual String[] get_WindowsUsersAndGroupsInSysadminRole();
    public sealed virtual string get_TempdbPrimaryFilePath();
    public sealed virtual string get_TempdbLogPath();
    public sealed virtual ServiceStartMode get_AgentStartMode();
    public sealed virtual string get_AgentServiceAccount();
    public sealed virtual string get_AgentDomainGroup();
    public sealed virtual string get_EngineServiceAccount();
    public virtual void Refresh();
}
[FlagsAttribute]
public enum Microsoft.SqlServer.Management.Smo.ServerStatus : Enum {
    public int value__;
    public static ServerStatus Unknown;
    public static ServerStatus Online;
    public static ServerStatus OnlinePending;
    public static ServerStatus Offline;
    public static ServerStatus OfflinePending;
}
public class Microsoft.SqlServer.Management.Smo.ServerSurfaceAreaAdapter : ServerAdapterBase {
    private EndpointState desiredBrokerEndpointState;
    private bool brokerEndpointStateAltered;
    private bool disableSoapEndpoints;
    public bool ServiceBrokerEndpointActive { get; public set; }
    public bool SoapEndpointsEnabled { get; public set; }
    public ServerSurfaceAreaAdapter(Server obj);
    private Endpoint GetBrokerEndpoint();
    public sealed virtual bool get_ServiceBrokerEndpointActive();
    public sealed virtual void set_ServiceBrokerEndpointActive(bool value);
    public sealed virtual bool get_SoapEndpointsEnabled();
    public sealed virtual void set_SoapEndpointsEnabled(bool value);
    protected void RefreshEndpoints();
    protected void AlterEndpoints();
    public virtual void Refresh();
    public virtual void Alter();
}
public class Microsoft.SqlServer.Management.Smo.ServerTraceEvent : object {
    private ServerTraceEventValues m_value;
    internal ServerTraceEventValues Value { get; }
    public static ServerTraceEvent AssemblyLoad { get; }
    public static ServerTraceEvent AuditAddloginEvent { get; }
    public static ServerTraceEvent AuditAddDBUserEvent { get; }
    public static ServerTraceEvent AuditAddLoginToServerRoleEvent { get; }
    public static ServerTraceEvent AuditAddMemberToDBRoleEvent { get; }
    public static ServerTraceEvent AuditAddRoleEvent { get; }
    public static ServerTraceEvent AuditAppRoleChangePasswordEvent { get; }
    public static ServerTraceEvent AuditBackupRestoreEvent { get; }
    public static ServerTraceEvent AuditChangeAuditEvent { get; }
    public static ServerTraceEvent AuditChangeDatabaseOwner { get; }
    public static ServerTraceEvent AuditDatabaseManagementEvent { get; }
    public static ServerTraceEvent AuditDatabaseObjectAccessEvent { get; }
    public static ServerTraceEvent AuditDatabaseObjectGdrEvent { get; }
    public static ServerTraceEvent AuditDatabaseObjectManagementEvent { get; }
    public static ServerTraceEvent AuditDatabaseObjectTakeOwnershipEvent { get; }
    public static ServerTraceEvent AuditDatabaseOperationEvent { get; }
    public static ServerTraceEvent AuditDatabasePrincipalImpersonationEvent { get; }
    public static ServerTraceEvent AuditDatabasePrincipalManagementEvent { get; }
    public static ServerTraceEvent AuditDatabaseScopeGdrEvent { get; }
    public static ServerTraceEvent AuditDbccEvent { get; }
    public static ServerTraceEvent AuditFulltext { get; }
    public static ServerTraceEvent AuditLogin { get; }
    public static ServerTraceEvent AuditLoginChangePasswordEvent { get; }
    public static ServerTraceEvent AuditLoginChangePropertyEvent { get; }
    public static ServerTraceEvent AuditLoginFailed { get; }
    public static ServerTraceEvent AuditLoginGdrEvent { get; }
    public static ServerTraceEvent AuditLogout { get; }
    public static ServerTraceEvent AuditSchemaObjectAccessEvent { get; }
    public static ServerTraceEvent AuditSchemaObjectGdrEvent { get; }
    public static ServerTraceEvent AuditSchemaObjectManagementEvent { get; }
    public static ServerTraceEvent AuditSchemaObjectTakeOwnershipEvent { get; }
    public static ServerTraceEvent AuditServerAlterTraceEvent { get; }
    public static ServerTraceEvent AuditServerObjectGdrEvent { get; }
    public static ServerTraceEvent AuditServerObjectManagementEvent { get; }
    public static ServerTraceEvent AuditServerObjectTakeOwnershipEvent { get; }
    public static ServerTraceEvent AuditServerOperationEvent { get; }
    public static ServerTraceEvent AuditServerPrincipalImpersonationEvent { get; }
    public static ServerTraceEvent AuditServerPrincipalManagementEvent { get; }
    public static ServerTraceEvent AuditServerScopeGdrEvent { get; }
    public static ServerTraceEvent BitmapWarning { get; }
    public static ServerTraceEvent BlockedProcessReport { get; }
    public static ServerTraceEvent CpuThresholdExceeded { get; }
    public static ServerTraceEvent DatabaseMirroringStateChange { get; }
    public static ServerTraceEvent DatabaseSuspectDataPage { get; }
    public static ServerTraceEvent DataFileAutoGrow { get; }
    public static ServerTraceEvent DataFileAutoShrink { get; }
    public static ServerTraceEvent DeadlockGraph { get; }
    public static ServerTraceEvent DeprecationAnnouncement { get; }
    public static ServerTraceEvent DeprecationFinalSupport { get; }
    public static ServerTraceEvent Errorlog { get; }
    public static ServerTraceEvent Eventlog { get; }
    public static ServerTraceEvent Exception { get; }
    public static ServerTraceEvent ExchangeSpillEvent { get; }
    public static ServerTraceEvent ExecutionWarnings { get; }
    public static ServerTraceEvent FtCrawlAborted { get; }
    public static ServerTraceEvent FtCrawlStarted { get; }
    public static ServerTraceEvent FtCrawlStopped { get; }
    public static ServerTraceEvent HashWarning { get; }
    public static ServerTraceEvent LockDeadlock { get; }
    public static ServerTraceEvent LockDeadlockChain { get; }
    public static ServerTraceEvent LockEscalation { get; }
    public static ServerTraceEvent LogFileAutoGrow { get; }
    public static ServerTraceEvent LogFileAutoShrink { get; }
    public static ServerTraceEvent MissingColumnStatistics { get; }
    public static ServerTraceEvent MissingJoinPredicate { get; }
    public static ServerTraceEvent MountTape { get; }
    public static ServerTraceEvent ObjectAltered { get; }
    public static ServerTraceEvent ObjectCreated { get; }
    public static ServerTraceEvent ObjectDeleted { get; }
    public static ServerTraceEvent OledbCallEvent { get; }
    public static ServerTraceEvent OledbDatareadEvent { get; }
    public static ServerTraceEvent OledbErrors { get; }
    public static ServerTraceEvent OledbProviderInformation { get; }
    public static ServerTraceEvent OledbQueryinterfaceEvent { get; }
    public static ServerTraceEvent Qn_dynamics { get; }
    public static ServerTraceEvent Qn_parameterTable { get; }
    public static ServerTraceEvent Qn_subscription { get; }
    public static ServerTraceEvent Qn_template { get; }
    public static ServerTraceEvent ServerMemoryChange { get; }
    public static ServerTraceEvent ShowplanAllForQueryCompile { get; }
    public static ServerTraceEvent ShowplanXml { get; }
    public static ServerTraceEvent ShowplanXmlForQueryCompile { get; }
    public static ServerTraceEvent ShowplanXmlStatisticsProfile { get; }
    public static ServerTraceEvent SortWarnings { get; }
    public static ServerTraceEvent SpCacheinsert { get; }
    public static ServerTraceEvent SpCachemiss { get; }
    public static ServerTraceEvent SpCacheremove { get; }
    public static ServerTraceEvent SpRecompile { get; }
    public static ServerTraceEvent SqlStmtrecompile { get; }
    public static ServerTraceEvent TraceFileClose { get; }
    public static ServerTraceEvent TraceAllEvents { get; }
    public static ServerTraceEvent TraceClr { get; }
    public static ServerTraceEvent TraceDatabase { get; }
    public static ServerTraceEvent TraceDeprecation { get; }
    public static ServerTraceEvent TraceErrorsAndWarnings { get; }
    public static ServerTraceEvent TraceFullText { get; }
    public static ServerTraceEvent TraceLocks { get; }
    public static ServerTraceEvent TraceObjects { get; }
    public static ServerTraceEvent TraceOledb { get; }
    public static ServerTraceEvent TracePerformance { get; }
    public static ServerTraceEvent TraceQueryNotifications { get; }
    public static ServerTraceEvent TraceSecurityAudit { get; }
    public static ServerTraceEvent TraceServer { get; }
    public static ServerTraceEvent TraceStoredProcedures { get; }
    public static ServerTraceEvent TraceTsql { get; }
    public static ServerTraceEvent TraceUserConfigurable { get; }
    public static ServerTraceEvent Userconfigurable0 { get; }
    public static ServerTraceEvent Userconfigurable1 { get; }
    public static ServerTraceEvent Userconfigurable2 { get; }
    public static ServerTraceEvent Userconfigurable3 { get; }
    public static ServerTraceEvent Userconfigurable4 { get; }
    public static ServerTraceEvent Userconfigurable5 { get; }
    public static ServerTraceEvent Userconfigurable6 { get; }
    public static ServerTraceEvent Userconfigurable7 { get; }
    public static ServerTraceEvent Userconfigurable8 { get; }
    public static ServerTraceEvent Userconfigurable9 { get; }
    public static ServerTraceEvent UserErrorMessage { get; }
    public static ServerTraceEvent XqueryStaticType { get; }
    internal ServerTraceEvent(ServerTraceEventValues eventValue);
    internal ServerTraceEventValues get_Value();
    public static ServerTraceEventSet op_Implicit(ServerTraceEvent eventValue);
    public static ServerTraceEventSet op_Addition(ServerTraceEvent eventLeft, ServerTraceEvent eventRight);
    public static ServerTraceEventSet Add(ServerTraceEvent eventLeft, ServerTraceEvent eventRight);
    public static ServerTraceEventSet op_BitwiseOr(ServerTraceEvent eventLeft, ServerTraceEvent eventRight);
    public static ServerTraceEventSet BitwiseOr(ServerTraceEvent eventLeft, ServerTraceEvent eventRight);
    public virtual string ToString();
    public static bool op_Equality(ServerTraceEvent a, ServerTraceEvent b);
    public static bool op_Inequality(ServerTraceEvent a, ServerTraceEvent b);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static ServerTraceEvent get_AssemblyLoad();
    public static ServerTraceEvent get_AuditAddloginEvent();
    public static ServerTraceEvent get_AuditAddDBUserEvent();
    public static ServerTraceEvent get_AuditAddLoginToServerRoleEvent();
    public static ServerTraceEvent get_AuditAddMemberToDBRoleEvent();
    public static ServerTraceEvent get_AuditAddRoleEvent();
    public static ServerTraceEvent get_AuditAppRoleChangePasswordEvent();
    public static ServerTraceEvent get_AuditBackupRestoreEvent();
    public static ServerTraceEvent get_AuditChangeAuditEvent();
    public static ServerTraceEvent get_AuditChangeDatabaseOwner();
    public static ServerTraceEvent get_AuditDatabaseManagementEvent();
    public static ServerTraceEvent get_AuditDatabaseObjectAccessEvent();
    public static ServerTraceEvent get_AuditDatabaseObjectGdrEvent();
    public static ServerTraceEvent get_AuditDatabaseObjectManagementEvent();
    public static ServerTraceEvent get_AuditDatabaseObjectTakeOwnershipEvent();
    public static ServerTraceEvent get_AuditDatabaseOperationEvent();
    public static ServerTraceEvent get_AuditDatabasePrincipalImpersonationEvent();
    public static ServerTraceEvent get_AuditDatabasePrincipalManagementEvent();
    public static ServerTraceEvent get_AuditDatabaseScopeGdrEvent();
    public static ServerTraceEvent get_AuditDbccEvent();
    public static ServerTraceEvent get_AuditFulltext();
    public static ServerTraceEvent get_AuditLogin();
    public static ServerTraceEvent get_AuditLoginChangePasswordEvent();
    public static ServerTraceEvent get_AuditLoginChangePropertyEvent();
    public static ServerTraceEvent get_AuditLoginFailed();
    public static ServerTraceEvent get_AuditLoginGdrEvent();
    public static ServerTraceEvent get_AuditLogout();
    public static ServerTraceEvent get_AuditSchemaObjectAccessEvent();
    public static ServerTraceEvent get_AuditSchemaObjectGdrEvent();
    public static ServerTraceEvent get_AuditSchemaObjectManagementEvent();
    public static ServerTraceEvent get_AuditSchemaObjectTakeOwnershipEvent();
    public static ServerTraceEvent get_AuditServerAlterTraceEvent();
    public static ServerTraceEvent get_AuditServerObjectGdrEvent();
    public static ServerTraceEvent get_AuditServerObjectManagementEvent();
    public static ServerTraceEvent get_AuditServerObjectTakeOwnershipEvent();
    public static ServerTraceEvent get_AuditServerOperationEvent();
    public static ServerTraceEvent get_AuditServerPrincipalImpersonationEvent();
    public static ServerTraceEvent get_AuditServerPrincipalManagementEvent();
    public static ServerTraceEvent get_AuditServerScopeGdrEvent();
    public static ServerTraceEvent get_BitmapWarning();
    public static ServerTraceEvent get_BlockedProcessReport();
    public static ServerTraceEvent get_CpuThresholdExceeded();
    public static ServerTraceEvent get_DatabaseMirroringStateChange();
    public static ServerTraceEvent get_DatabaseSuspectDataPage();
    public static ServerTraceEvent get_DataFileAutoGrow();
    public static ServerTraceEvent get_DataFileAutoShrink();
    public static ServerTraceEvent get_DeadlockGraph();
    public static ServerTraceEvent get_DeprecationAnnouncement();
    public static ServerTraceEvent get_DeprecationFinalSupport();
    public static ServerTraceEvent get_Errorlog();
    public static ServerTraceEvent get_Eventlog();
    public static ServerTraceEvent get_Exception();
    public static ServerTraceEvent get_ExchangeSpillEvent();
    public static ServerTraceEvent get_ExecutionWarnings();
    public static ServerTraceEvent get_FtCrawlAborted();
    public static ServerTraceEvent get_FtCrawlStarted();
    public static ServerTraceEvent get_FtCrawlStopped();
    public static ServerTraceEvent get_HashWarning();
    public static ServerTraceEvent get_LockDeadlock();
    public static ServerTraceEvent get_LockDeadlockChain();
    public static ServerTraceEvent get_LockEscalation();
    public static ServerTraceEvent get_LogFileAutoGrow();
    public static ServerTraceEvent get_LogFileAutoShrink();
    public static ServerTraceEvent get_MissingColumnStatistics();
    public static ServerTraceEvent get_MissingJoinPredicate();
    public static ServerTraceEvent get_MountTape();
    public static ServerTraceEvent get_ObjectAltered();
    public static ServerTraceEvent get_ObjectCreated();
    public static ServerTraceEvent get_ObjectDeleted();
    public static ServerTraceEvent get_OledbCallEvent();
    public static ServerTraceEvent get_OledbDatareadEvent();
    public static ServerTraceEvent get_OledbErrors();
    public static ServerTraceEvent get_OledbProviderInformation();
    public static ServerTraceEvent get_OledbQueryinterfaceEvent();
    public static ServerTraceEvent get_Qn_dynamics();
    public static ServerTraceEvent get_Qn_parameterTable();
    public static ServerTraceEvent get_Qn_subscription();
    public static ServerTraceEvent get_Qn_template();
    public static ServerTraceEvent get_ServerMemoryChange();
    public static ServerTraceEvent get_ShowplanAllForQueryCompile();
    public static ServerTraceEvent get_ShowplanXml();
    public static ServerTraceEvent get_ShowplanXmlForQueryCompile();
    public static ServerTraceEvent get_ShowplanXmlStatisticsProfile();
    public static ServerTraceEvent get_SortWarnings();
    public static ServerTraceEvent get_SpCacheinsert();
    public static ServerTraceEvent get_SpCachemiss();
    public static ServerTraceEvent get_SpCacheremove();
    public static ServerTraceEvent get_SpRecompile();
    public static ServerTraceEvent get_SqlStmtrecompile();
    public static ServerTraceEvent get_TraceFileClose();
    public static ServerTraceEvent get_TraceAllEvents();
    public static ServerTraceEvent get_TraceClr();
    public static ServerTraceEvent get_TraceDatabase();
    public static ServerTraceEvent get_TraceDeprecation();
    public static ServerTraceEvent get_TraceErrorsAndWarnings();
    public static ServerTraceEvent get_TraceFullText();
    public static ServerTraceEvent get_TraceLocks();
    public static ServerTraceEvent get_TraceObjects();
    public static ServerTraceEvent get_TraceOledb();
    public static ServerTraceEvent get_TracePerformance();
    public static ServerTraceEvent get_TraceQueryNotifications();
    public static ServerTraceEvent get_TraceSecurityAudit();
    public static ServerTraceEvent get_TraceServer();
    public static ServerTraceEvent get_TraceStoredProcedures();
    public static ServerTraceEvent get_TraceTsql();
    public static ServerTraceEvent get_TraceUserConfigurable();
    public static ServerTraceEvent get_Userconfigurable0();
    public static ServerTraceEvent get_Userconfigurable1();
    public static ServerTraceEvent get_Userconfigurable2();
    public static ServerTraceEvent get_Userconfigurable3();
    public static ServerTraceEvent get_Userconfigurable4();
    public static ServerTraceEvent get_Userconfigurable5();
    public static ServerTraceEvent get_Userconfigurable6();
    public static ServerTraceEvent get_Userconfigurable7();
    public static ServerTraceEvent get_Userconfigurable8();
    public static ServerTraceEvent get_Userconfigurable9();
    public static ServerTraceEvent get_UserErrorMessage();
    public static ServerTraceEvent get_XqueryStaticType();
}
public class Microsoft.SqlServer.Management.Smo.ServerTraceEventSet : EventSetBase {
    public int NumberOfElements { get; }
    public bool AssemblyLoad { get; public set; }
    public bool AuditAddloginEvent { get; public set; }
    public bool AuditAddDBUserEvent { get; public set; }
    public bool AuditAddLoginToServerRoleEvent { get; public set; }
    public bool AuditAddMemberToDBRoleEvent { get; public set; }
    public bool AuditAddRoleEvent { get; public set; }
    public bool AuditAppRoleChangePasswordEvent { get; public set; }
    public bool AuditBackupRestoreEvent { get; public set; }
    public bool AuditChangeAuditEvent { get; public set; }
    public bool AuditChangeDatabaseOwner { get; public set; }
    public bool AuditDatabaseManagementEvent { get; public set; }
    public bool AuditDatabaseObjectAccessEvent { get; public set; }
    public bool AuditDatabaseObjectGdrEvent { get; public set; }
    public bool AuditDatabaseObjectManagementEvent { get; public set; }
    public bool AuditDatabaseObjectTakeOwnershipEvent { get; public set; }
    public bool AuditDatabaseOperationEvent { get; public set; }
    public bool AuditDatabasePrincipalImpersonationEvent { get; public set; }
    public bool AuditDatabasePrincipalManagementEvent { get; public set; }
    public bool AuditDatabaseScopeGdrEvent { get; public set; }
    public bool AuditDbccEvent { get; public set; }
    public bool AuditFulltext { get; public set; }
    public bool AuditLogin { get; public set; }
    public bool AuditLoginChangePasswordEvent { get; public set; }
    public bool AuditLoginChangePropertyEvent { get; public set; }
    public bool AuditLoginFailed { get; public set; }
    public bool AuditLoginGdrEvent { get; public set; }
    public bool AuditLogout { get; public set; }
    public bool AuditSchemaObjectAccessEvent { get; public set; }
    public bool AuditSchemaObjectGdrEvent { get; public set; }
    public bool AuditSchemaObjectManagementEvent { get; public set; }
    public bool AuditSchemaObjectTakeOwnershipEvent { get; public set; }
    public bool AuditServerAlterTraceEvent { get; public set; }
    public bool AuditServerObjectGdrEvent { get; public set; }
    public bool AuditServerObjectManagementEvent { get; public set; }
    public bool AuditServerObjectTakeOwnershipEvent { get; public set; }
    public bool AuditServerOperationEvent { get; public set; }
    public bool AuditServerPrincipalImpersonationEvent { get; public set; }
    public bool AuditServerPrincipalManagementEvent { get; public set; }
    public bool AuditServerScopeGdrEvent { get; public set; }
    public bool BitmapWarning { get; public set; }
    public bool BlockedProcessReport { get; public set; }
    public bool CpuThresholdExceeded { get; public set; }
    public bool DatabaseMirroringStateChange { get; public set; }
    public bool DatabaseSuspectDataPage { get; public set; }
    public bool DataFileAutoGrow { get; public set; }
    public bool DataFileAutoShrink { get; public set; }
    public bool DeadlockGraph { get; public set; }
    public bool DeprecationAnnouncement { get; public set; }
    public bool DeprecationFinalSupport { get; public set; }
    public bool Errorlog { get; public set; }
    public bool Eventlog { get; public set; }
    public bool Exception { get; public set; }
    public bool ExchangeSpillEvent { get; public set; }
    public bool ExecutionWarnings { get; public set; }
    public bool FtCrawlAborted { get; public set; }
    public bool FtCrawlStarted { get; public set; }
    public bool FtCrawlStopped { get; public set; }
    public bool HashWarning { get; public set; }
    public bool LockDeadlock { get; public set; }
    public bool LockDeadlockChain { get; public set; }
    public bool LockEscalation { get; public set; }
    public bool LogFileAutoGrow { get; public set; }
    public bool LogFileAutoShrink { get; public set; }
    public bool MissingColumnStatistics { get; public set; }
    public bool MissingJoinPredicate { get; public set; }
    public bool MountTape { get; public set; }
    public bool ObjectAltered { get; public set; }
    public bool ObjectCreated { get; public set; }
    public bool ObjectDeleted { get; public set; }
    public bool OledbCallEvent { get; public set; }
    public bool OledbDatareadEvent { get; public set; }
    public bool OledbErrors { get; public set; }
    public bool OledbProviderInformation { get; public set; }
    public bool OledbQueryinterfaceEvent { get; public set; }
    public bool Qn_dynamics { get; public set; }
    public bool Qn_parameterTable { get; public set; }
    public bool Qn_subscription { get; public set; }
    public bool Qn_template { get; public set; }
    public bool ServerMemoryChange { get; public set; }
    public bool ShowplanAllForQueryCompile { get; public set; }
    public bool ShowplanXml { get; public set; }
    public bool ShowplanXmlForQueryCompile { get; public set; }
    public bool ShowplanXmlStatisticsProfile { get; public set; }
    public bool SortWarnings { get; public set; }
    public bool SpCacheinsert { get; public set; }
    public bool SpCachemiss { get; public set; }
    public bool SpCacheremove { get; public set; }
    public bool SpRecompile { get; public set; }
    public bool SqlStmtrecompile { get; public set; }
    public bool TraceFileClose { get; public set; }
    public bool TraceAllEvents { get; public set; }
    public bool TraceClr { get; public set; }
    public bool TraceDatabase { get; public set; }
    public bool TraceDeprecation { get; public set; }
    public bool TraceErrorsAndWarnings { get; public set; }
    public bool TraceFullText { get; public set; }
    public bool TraceLocks { get; public set; }
    public bool TraceObjects { get; public set; }
    public bool TraceOledb { get; public set; }
    public bool TracePerformance { get; public set; }
    public bool TraceQueryNotifications { get; public set; }
    public bool TraceSecurityAudit { get; public set; }
    public bool TraceServer { get; public set; }
    public bool TraceStoredProcedures { get; public set; }
    public bool TraceTsql { get; public set; }
    public bool TraceUserConfigurable { get; public set; }
    public bool Userconfigurable0 { get; public set; }
    public bool Userconfigurable1 { get; public set; }
    public bool Userconfigurable2 { get; public set; }
    public bool Userconfigurable3 { get; public set; }
    public bool Userconfigurable4 { get; public set; }
    public bool Userconfigurable5 { get; public set; }
    public bool Userconfigurable6 { get; public set; }
    public bool Userconfigurable7 { get; public set; }
    public bool Userconfigurable8 { get; public set; }
    public bool Userconfigurable9 { get; public set; }
    public bool UserErrorMessage { get; public set; }
    public bool XqueryStaticType { get; public set; }
    public ServerTraceEventSet(ServerTraceEventSet eventSet);
    public ServerTraceEventSet(ServerTraceEvent anEvent);
    public ServerTraceEventSet(ServerTraceEvent[] events);
    internal ServerTraceEventSet(BitArray storage);
    public virtual EventSetBase Copy();
    internal void SetBit(ServerTraceEvent anEvent);
    internal void ResetBit(ServerTraceEvent anEvent);
    public ServerTraceEventSet Add(ServerTraceEvent anEvent);
    public ServerTraceEventSet Remove(ServerTraceEvent anEvent);
    public static ServerTraceEventSet op_Addition(ServerTraceEventSet eventSet, ServerTraceEvent anEvent);
    public static ServerTraceEventSet Add(ServerTraceEventSet eventSet, ServerTraceEvent anEvent);
    public static ServerTraceEventSet op_Subtraction(ServerTraceEventSet eventSet, ServerTraceEvent anEvent);
    public static ServerTraceEventSet Subtract(ServerTraceEventSet eventSet, ServerTraceEvent anEvent);
    public virtual int get_NumberOfElements();
    public virtual string ToString();
    public bool get_AssemblyLoad();
    public void set_AssemblyLoad(bool value);
    public bool get_AuditAddloginEvent();
    public void set_AuditAddloginEvent(bool value);
    public bool get_AuditAddDBUserEvent();
    public void set_AuditAddDBUserEvent(bool value);
    public bool get_AuditAddLoginToServerRoleEvent();
    public void set_AuditAddLoginToServerRoleEvent(bool value);
    public bool get_AuditAddMemberToDBRoleEvent();
    public void set_AuditAddMemberToDBRoleEvent(bool value);
    public bool get_AuditAddRoleEvent();
    public void set_AuditAddRoleEvent(bool value);
    public bool get_AuditAppRoleChangePasswordEvent();
    public void set_AuditAppRoleChangePasswordEvent(bool value);
    public bool get_AuditBackupRestoreEvent();
    public void set_AuditBackupRestoreEvent(bool value);
    public bool get_AuditChangeAuditEvent();
    public void set_AuditChangeAuditEvent(bool value);
    public bool get_AuditChangeDatabaseOwner();
    public void set_AuditChangeDatabaseOwner(bool value);
    public bool get_AuditDatabaseManagementEvent();
    public void set_AuditDatabaseManagementEvent(bool value);
    public bool get_AuditDatabaseObjectAccessEvent();
    public void set_AuditDatabaseObjectAccessEvent(bool value);
    public bool get_AuditDatabaseObjectGdrEvent();
    public void set_AuditDatabaseObjectGdrEvent(bool value);
    public bool get_AuditDatabaseObjectManagementEvent();
    public void set_AuditDatabaseObjectManagementEvent(bool value);
    public bool get_AuditDatabaseObjectTakeOwnershipEvent();
    public void set_AuditDatabaseObjectTakeOwnershipEvent(bool value);
    public bool get_AuditDatabaseOperationEvent();
    public void set_AuditDatabaseOperationEvent(bool value);
    public bool get_AuditDatabasePrincipalImpersonationEvent();
    public void set_AuditDatabasePrincipalImpersonationEvent(bool value);
    public bool get_AuditDatabasePrincipalManagementEvent();
    public void set_AuditDatabasePrincipalManagementEvent(bool value);
    public bool get_AuditDatabaseScopeGdrEvent();
    public void set_AuditDatabaseScopeGdrEvent(bool value);
    public bool get_AuditDbccEvent();
    public void set_AuditDbccEvent(bool value);
    public bool get_AuditFulltext();
    public void set_AuditFulltext(bool value);
    public bool get_AuditLogin();
    public void set_AuditLogin(bool value);
    public bool get_AuditLoginChangePasswordEvent();
    public void set_AuditLoginChangePasswordEvent(bool value);
    public bool get_AuditLoginChangePropertyEvent();
    public void set_AuditLoginChangePropertyEvent(bool value);
    public bool get_AuditLoginFailed();
    public void set_AuditLoginFailed(bool value);
    public bool get_AuditLoginGdrEvent();
    public void set_AuditLoginGdrEvent(bool value);
    public bool get_AuditLogout();
    public void set_AuditLogout(bool value);
    public bool get_AuditSchemaObjectAccessEvent();
    public void set_AuditSchemaObjectAccessEvent(bool value);
    public bool get_AuditSchemaObjectGdrEvent();
    public void set_AuditSchemaObjectGdrEvent(bool value);
    public bool get_AuditSchemaObjectManagementEvent();
    public void set_AuditSchemaObjectManagementEvent(bool value);
    public bool get_AuditSchemaObjectTakeOwnershipEvent();
    public void set_AuditSchemaObjectTakeOwnershipEvent(bool value);
    public bool get_AuditServerAlterTraceEvent();
    public void set_AuditServerAlterTraceEvent(bool value);
    public bool get_AuditServerObjectGdrEvent();
    public void set_AuditServerObjectGdrEvent(bool value);
    public bool get_AuditServerObjectManagementEvent();
    public void set_AuditServerObjectManagementEvent(bool value);
    public bool get_AuditServerObjectTakeOwnershipEvent();
    public void set_AuditServerObjectTakeOwnershipEvent(bool value);
    public bool get_AuditServerOperationEvent();
    public void set_AuditServerOperationEvent(bool value);
    public bool get_AuditServerPrincipalImpersonationEvent();
    public void set_AuditServerPrincipalImpersonationEvent(bool value);
    public bool get_AuditServerPrincipalManagementEvent();
    public void set_AuditServerPrincipalManagementEvent(bool value);
    public bool get_AuditServerScopeGdrEvent();
    public void set_AuditServerScopeGdrEvent(bool value);
    public bool get_BitmapWarning();
    public void set_BitmapWarning(bool value);
    public bool get_BlockedProcessReport();
    public void set_BlockedProcessReport(bool value);
    public bool get_CpuThresholdExceeded();
    public void set_CpuThresholdExceeded(bool value);
    public bool get_DatabaseMirroringStateChange();
    public void set_DatabaseMirroringStateChange(bool value);
    public bool get_DatabaseSuspectDataPage();
    public void set_DatabaseSuspectDataPage(bool value);
    public bool get_DataFileAutoGrow();
    public void set_DataFileAutoGrow(bool value);
    public bool get_DataFileAutoShrink();
    public void set_DataFileAutoShrink(bool value);
    public bool get_DeadlockGraph();
    public void set_DeadlockGraph(bool value);
    public bool get_DeprecationAnnouncement();
    public void set_DeprecationAnnouncement(bool value);
    public bool get_DeprecationFinalSupport();
    public void set_DeprecationFinalSupport(bool value);
    public bool get_Errorlog();
    public void set_Errorlog(bool value);
    public bool get_Eventlog();
    public void set_Eventlog(bool value);
    public bool get_Exception();
    public void set_Exception(bool value);
    public bool get_ExchangeSpillEvent();
    public void set_ExchangeSpillEvent(bool value);
    public bool get_ExecutionWarnings();
    public void set_ExecutionWarnings(bool value);
    public bool get_FtCrawlAborted();
    public void set_FtCrawlAborted(bool value);
    public bool get_FtCrawlStarted();
    public void set_FtCrawlStarted(bool value);
    public bool get_FtCrawlStopped();
    public void set_FtCrawlStopped(bool value);
    public bool get_HashWarning();
    public void set_HashWarning(bool value);
    public bool get_LockDeadlock();
    public void set_LockDeadlock(bool value);
    public bool get_LockDeadlockChain();
    public void set_LockDeadlockChain(bool value);
    public bool get_LockEscalation();
    public void set_LockEscalation(bool value);
    public bool get_LogFileAutoGrow();
    public void set_LogFileAutoGrow(bool value);
    public bool get_LogFileAutoShrink();
    public void set_LogFileAutoShrink(bool value);
    public bool get_MissingColumnStatistics();
    public void set_MissingColumnStatistics(bool value);
    public bool get_MissingJoinPredicate();
    public void set_MissingJoinPredicate(bool value);
    public bool get_MountTape();
    public void set_MountTape(bool value);
    public bool get_ObjectAltered();
    public void set_ObjectAltered(bool value);
    public bool get_ObjectCreated();
    public void set_ObjectCreated(bool value);
    public bool get_ObjectDeleted();
    public void set_ObjectDeleted(bool value);
    public bool get_OledbCallEvent();
    public void set_OledbCallEvent(bool value);
    public bool get_OledbDatareadEvent();
    public void set_OledbDatareadEvent(bool value);
    public bool get_OledbErrors();
    public void set_OledbErrors(bool value);
    public bool get_OledbProviderInformation();
    public void set_OledbProviderInformation(bool value);
    public bool get_OledbQueryinterfaceEvent();
    public void set_OledbQueryinterfaceEvent(bool value);
    public bool get_Qn_dynamics();
    public void set_Qn_dynamics(bool value);
    public bool get_Qn_parameterTable();
    public void set_Qn_parameterTable(bool value);
    public bool get_Qn_subscription();
    public void set_Qn_subscription(bool value);
    public bool get_Qn_template();
    public void set_Qn_template(bool value);
    public bool get_ServerMemoryChange();
    public void set_ServerMemoryChange(bool value);
    public bool get_ShowplanAllForQueryCompile();
    public void set_ShowplanAllForQueryCompile(bool value);
    public bool get_ShowplanXml();
    public void set_ShowplanXml(bool value);
    public bool get_ShowplanXmlForQueryCompile();
    public void set_ShowplanXmlForQueryCompile(bool value);
    public bool get_ShowplanXmlStatisticsProfile();
    public void set_ShowplanXmlStatisticsProfile(bool value);
    public bool get_SortWarnings();
    public void set_SortWarnings(bool value);
    public bool get_SpCacheinsert();
    public void set_SpCacheinsert(bool value);
    public bool get_SpCachemiss();
    public void set_SpCachemiss(bool value);
    public bool get_SpCacheremove();
    public void set_SpCacheremove(bool value);
    public bool get_SpRecompile();
    public void set_SpRecompile(bool value);
    public bool get_SqlStmtrecompile();
    public void set_SqlStmtrecompile(bool value);
    public bool get_TraceFileClose();
    public void set_TraceFileClose(bool value);
    public bool get_TraceAllEvents();
    public void set_TraceAllEvents(bool value);
    public bool get_TraceClr();
    public void set_TraceClr(bool value);
    public bool get_TraceDatabase();
    public void set_TraceDatabase(bool value);
    public bool get_TraceDeprecation();
    public void set_TraceDeprecation(bool value);
    public bool get_TraceErrorsAndWarnings();
    public void set_TraceErrorsAndWarnings(bool value);
    public bool get_TraceFullText();
    public void set_TraceFullText(bool value);
    public bool get_TraceLocks();
    public void set_TraceLocks(bool value);
    public bool get_TraceObjects();
    public void set_TraceObjects(bool value);
    public bool get_TraceOledb();
    public void set_TraceOledb(bool value);
    public bool get_TracePerformance();
    public void set_TracePerformance(bool value);
    public bool get_TraceQueryNotifications();
    public void set_TraceQueryNotifications(bool value);
    public bool get_TraceSecurityAudit();
    public void set_TraceSecurityAudit(bool value);
    public bool get_TraceServer();
    public void set_TraceServer(bool value);
    public bool get_TraceStoredProcedures();
    public void set_TraceStoredProcedures(bool value);
    public bool get_TraceTsql();
    public void set_TraceTsql(bool value);
    public bool get_TraceUserConfigurable();
    public void set_TraceUserConfigurable(bool value);
    public bool get_Userconfigurable0();
    public void set_Userconfigurable0(bool value);
    public bool get_Userconfigurable1();
    public void set_Userconfigurable1(bool value);
    public bool get_Userconfigurable2();
    public void set_Userconfigurable2(bool value);
    public bool get_Userconfigurable3();
    public void set_Userconfigurable3(bool value);
    public bool get_Userconfigurable4();
    public void set_Userconfigurable4(bool value);
    public bool get_Userconfigurable5();
    public void set_Userconfigurable5(bool value);
    public bool get_Userconfigurable6();
    public void set_Userconfigurable6(bool value);
    public bool get_Userconfigurable7();
    public void set_Userconfigurable7(bool value);
    public bool get_Userconfigurable8();
    public void set_Userconfigurable8(bool value);
    public bool get_Userconfigurable9();
    public void set_Userconfigurable9(bool value);
    public bool get_UserErrorMessage();
    public void set_UserErrorMessage(bool value);
    public bool get_XqueryStaticType();
    public void set_XqueryStaticType(bool value);
}
internal enum Microsoft.SqlServer.Management.Smo.ServerTraceEventValues : Enum {
    public int value__;
    public static ServerTraceEventValues AssemblyLoad;
    public static ServerTraceEventValues AuditAddloginEvent;
    public static ServerTraceEventValues AuditAddDBUserEvent;
    public static ServerTraceEventValues AuditAddLoginToServerRoleEvent;
    public static ServerTraceEventValues AuditAddMemberToDBRoleEvent;
    public static ServerTraceEventValues AuditAddRoleEvent;
    public static ServerTraceEventValues AuditAppRoleChangePasswordEvent;
    public static ServerTraceEventValues AuditBackupRestoreEvent;
    public static ServerTraceEventValues AuditChangeAuditEvent;
    public static ServerTraceEventValues AuditChangeDatabaseOwner;
    public static ServerTraceEventValues AuditDatabaseManagementEvent;
    public static ServerTraceEventValues AuditDatabaseObjectAccessEvent;
    public static ServerTraceEventValues AuditDatabaseObjectGdrEvent;
    public static ServerTraceEventValues AuditDatabaseObjectManagementEvent;
    public static ServerTraceEventValues AuditDatabaseObjectTakeOwnershipEvent;
    public static ServerTraceEventValues AuditDatabaseOperationEvent;
    public static ServerTraceEventValues AuditDatabasePrincipalImpersonationEvent;
    public static ServerTraceEventValues AuditDatabasePrincipalManagementEvent;
    public static ServerTraceEventValues AuditDatabaseScopeGdrEvent;
    public static ServerTraceEventValues AuditDbccEvent;
    public static ServerTraceEventValues AuditFulltext;
    public static ServerTraceEventValues AuditLogin;
    public static ServerTraceEventValues AuditLoginChangePasswordEvent;
    public static ServerTraceEventValues AuditLoginChangePropertyEvent;
    public static ServerTraceEventValues AuditLoginFailed;
    public static ServerTraceEventValues AuditLoginGdrEvent;
    public static ServerTraceEventValues AuditLogout;
    public static ServerTraceEventValues AuditSchemaObjectAccessEvent;
    public static ServerTraceEventValues AuditSchemaObjectGdrEvent;
    public static ServerTraceEventValues AuditSchemaObjectManagementEvent;
    public static ServerTraceEventValues AuditSchemaObjectTakeOwnershipEvent;
    public static ServerTraceEventValues AuditServerAlterTraceEvent;
    public static ServerTraceEventValues AuditServerObjectGdrEvent;
    public static ServerTraceEventValues AuditServerObjectManagementEvent;
    public static ServerTraceEventValues AuditServerObjectTakeOwnershipEvent;
    public static ServerTraceEventValues AuditServerOperationEvent;
    public static ServerTraceEventValues AuditServerPrincipalImpersonationEvent;
    public static ServerTraceEventValues AuditServerPrincipalManagementEvent;
    public static ServerTraceEventValues AuditServerScopeGdrEvent;
    public static ServerTraceEventValues BitmapWarning;
    public static ServerTraceEventValues BlockedProcessReport;
    public static ServerTraceEventValues CpuThresholdExceeded;
    public static ServerTraceEventValues DatabaseMirroringStateChange;
    public static ServerTraceEventValues DatabaseSuspectDataPage;
    public static ServerTraceEventValues DataFileAutoGrow;
    public static ServerTraceEventValues DataFileAutoShrink;
    public static ServerTraceEventValues DeadlockGraph;
    public static ServerTraceEventValues DeprecationAnnouncement;
    public static ServerTraceEventValues DeprecationFinalSupport;
    public static ServerTraceEventValues Errorlog;
    public static ServerTraceEventValues Eventlog;
    public static ServerTraceEventValues Exception;
    public static ServerTraceEventValues ExchangeSpillEvent;
    public static ServerTraceEventValues ExecutionWarnings;
    public static ServerTraceEventValues FtCrawlAborted;
    public static ServerTraceEventValues FtCrawlStarted;
    public static ServerTraceEventValues FtCrawlStopped;
    public static ServerTraceEventValues HashWarning;
    public static ServerTraceEventValues LockDeadlock;
    public static ServerTraceEventValues LockDeadlockChain;
    public static ServerTraceEventValues LockEscalation;
    public static ServerTraceEventValues LogFileAutoGrow;
    public static ServerTraceEventValues LogFileAutoShrink;
    public static ServerTraceEventValues MissingColumnStatistics;
    public static ServerTraceEventValues MissingJoinPredicate;
    public static ServerTraceEventValues MountTape;
    public static ServerTraceEventValues ObjectAltered;
    public static ServerTraceEventValues ObjectCreated;
    public static ServerTraceEventValues ObjectDeleted;
    public static ServerTraceEventValues OledbCallEvent;
    public static ServerTraceEventValues OledbDatareadEvent;
    public static ServerTraceEventValues OledbErrors;
    public static ServerTraceEventValues OledbProviderInformation;
    public static ServerTraceEventValues OledbQueryinterfaceEvent;
    public static ServerTraceEventValues Qn_dynamics;
    public static ServerTraceEventValues Qn_parameterTable;
    public static ServerTraceEventValues Qn_subscription;
    public static ServerTraceEventValues Qn_template;
    public static ServerTraceEventValues ServerMemoryChange;
    public static ServerTraceEventValues ShowplanAllForQueryCompile;
    public static ServerTraceEventValues ShowplanXml;
    public static ServerTraceEventValues ShowplanXmlForQueryCompile;
    public static ServerTraceEventValues ShowplanXmlStatisticsProfile;
    public static ServerTraceEventValues SortWarnings;
    public static ServerTraceEventValues SpCacheinsert;
    public static ServerTraceEventValues SpCachemiss;
    public static ServerTraceEventValues SpCacheremove;
    public static ServerTraceEventValues SpRecompile;
    public static ServerTraceEventValues SqlStmtrecompile;
    public static ServerTraceEventValues TraceFileClose;
    public static ServerTraceEventValues TraceAllEvents;
    public static ServerTraceEventValues TraceClr;
    public static ServerTraceEventValues TraceDatabase;
    public static ServerTraceEventValues TraceDeprecation;
    public static ServerTraceEventValues TraceErrorsAndWarnings;
    public static ServerTraceEventValues TraceFullText;
    public static ServerTraceEventValues TraceLocks;
    public static ServerTraceEventValues TraceObjects;
    public static ServerTraceEventValues TraceOledb;
    public static ServerTraceEventValues TracePerformance;
    public static ServerTraceEventValues TraceQueryNotifications;
    public static ServerTraceEventValues TraceSecurityAudit;
    public static ServerTraceEventValues TraceServer;
    public static ServerTraceEventValues TraceStoredProcedures;
    public static ServerTraceEventValues TraceTsql;
    public static ServerTraceEventValues TraceUserConfigurable;
    public static ServerTraceEventValues Userconfigurable0;
    public static ServerTraceEventValues Userconfigurable1;
    public static ServerTraceEventValues Userconfigurable2;
    public static ServerTraceEventValues Userconfigurable3;
    public static ServerTraceEventValues Userconfigurable4;
    public static ServerTraceEventValues Userconfigurable5;
    public static ServerTraceEventValues Userconfigurable6;
    public static ServerTraceEventValues Userconfigurable7;
    public static ServerTraceEventValues Userconfigurable8;
    public static ServerTraceEventValues Userconfigurable9;
    public static ServerTraceEventValues UserErrorMessage;
    public static ServerTraceEventValues XqueryStaticType;
}
[SfcElementAttribute("16")]
public class Microsoft.SqlServer.Management.Smo.ServiceBrokerPayload : EndpointPayload {
    public static string UrnSuffix { get; }
    [SfcPropertyAttribute("1024")]
public string Certificate { get; public set; }
    [SfcPropertyAttribute("1024")]
public EndpointAuthenticationOrder EndpointAuthenticationOrder { get; public set; }
    [SfcPropertyAttribute("1024")]
public EndpointEncryption EndpointEncryption { get; public set; }
    [SfcPropertyAttribute("1024")]
public EndpointEncryptionAlgorithm EndpointEncryptionAlgorithm { get; public set; }
    [SfcPropertyAttribute("1024")]
public bool IsMessageForwardingEnabled { get; public set; }
    [SfcPropertyAttribute("1024")]
public bool IsSystemObject { get; }
    [SfcPropertyAttribute("1024")]
public int MessageForwardingSize { get; public set; }
    internal ServiceBrokerPayload(Endpoint parentEndpoint, ObjectKeyBase key, SqlSmoState state);
    public static string get_UrnSuffix();
    protected sealed virtual void GetUrnRecursive(StringBuilder urnbuilder, UrnIdOption idOption);
    internal virtual void Script(StringBuilder sb, ScriptingPreferences sp);
    internal virtual SqlPropertyMetadataProvider GetPropertyMetadataProvider();
    public string get_Certificate();
    public void set_Certificate(string value);
    public EndpointAuthenticationOrder get_EndpointAuthenticationOrder();
    public void set_EndpointAuthenticationOrder(EndpointAuthenticationOrder value);
    public EndpointEncryption get_EndpointEncryption();
    public void set_EndpointEncryption(EndpointEncryption value);
    public EndpointEncryptionAlgorithm get_EndpointEncryptionAlgorithm();
    public void set_EndpointEncryptionAlgorithm(EndpointEncryptionAlgorithm value);
    public bool get_IsMessageForwardingEnabled();
    public void set_IsMessageForwardingEnabled(bool value);
    public bool get_IsSystemObject();
    public int get_MessageForwardingSize();
    public void set_MessageForwardingSize(int value);
}
[SfcElementTypeAttribute("MasterKey")]
[SfcElementAttribute("16")]
public class Microsoft.SqlServer.Management.Smo.ServiceMasterKey : SqlSmoObject {
    [SfcObjectAttribute("1")]
public Server Parent { get; }
    public static string UrnSuffix { get; }
    internal ServiceMasterKey(Server parentsrv, ObjectKeyBase key, SqlSmoState state);
    public Server get_Parent();
    protected sealed virtual void GetUrnRecursive(StringBuilder urnbuilder, UrnIdOption idOption);
    protected internal virtual string GetDBName();
    public static string get_UrnSuffix();
    public void ChangeAccount(string newAccount, string newPassword);
    public void Import(string path, string password);
    public void Recover(string oldAccount, string oldPassword);
    public void Regenerate();
    public void Regenerate(bool forceRegeneration);
    public void Export(string path, string password);
    internal virtual SqlPropertyMetadataProvider GetPropertyMetadataProvider();
}
public class Microsoft.SqlServer.Management.Smo.ServiceQueueEvent : object {
    private ServiceQueueEventValues m_value;
    internal ServiceQueueEventValues Value { get; }
    public static ServiceQueueEvent AlterQueue { get; }
    public static ServiceQueueEvent BrokerQueueDisabled { get; }
    public static ServiceQueueEvent DropQueue { get; }
    public static ServiceQueueEvent QueueActivation { get; }
    internal ServiceQueueEvent(ServiceQueueEventValues eventValue);
    internal ServiceQueueEventValues get_Value();
    public static ServiceQueueEventSet op_Implicit(ServiceQueueEvent eventValue);
    public static ServiceQueueEventSet op_Addition(ServiceQueueEvent eventLeft, ServiceQueueEvent eventRight);
    public static ServiceQueueEventSet Add(ServiceQueueEvent eventLeft, ServiceQueueEvent eventRight);
    public static ServiceQueueEventSet op_BitwiseOr(ServiceQueueEvent eventLeft, ServiceQueueEvent eventRight);
    public static ServiceQueueEventSet BitwiseOr(ServiceQueueEvent eventLeft, ServiceQueueEvent eventRight);
    public virtual string ToString();
    public static bool op_Equality(ServiceQueueEvent a, ServiceQueueEvent b);
    public static bool op_Inequality(ServiceQueueEvent a, ServiceQueueEvent b);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static ServiceQueueEvent get_AlterQueue();
    public static ServiceQueueEvent get_BrokerQueueDisabled();
    public static ServiceQueueEvent get_DropQueue();
    public static ServiceQueueEvent get_QueueActivation();
}
public class Microsoft.SqlServer.Management.Smo.ServiceQueueEventSet : EventSetBase {
    public int NumberOfElements { get; }
    public bool AlterQueue { get; public set; }
    public bool BrokerQueueDisabled { get; public set; }
    public bool DropQueue { get; public set; }
    public bool QueueActivation { get; public set; }
    public ServiceQueueEventSet(ServiceQueueEventSet eventSet);
    public ServiceQueueEventSet(ServiceQueueEvent anEvent);
    public ServiceQueueEventSet(ServiceQueueEvent[] events);
    internal ServiceQueueEventSet(BitArray storage);
    public virtual EventSetBase Copy();
    internal void SetBit(ServiceQueueEvent anEvent);
    internal void ResetBit(ServiceQueueEvent anEvent);
    public ServiceQueueEventSet Add(ServiceQueueEvent anEvent);
    public ServiceQueueEventSet Remove(ServiceQueueEvent anEvent);
    public static ServiceQueueEventSet op_Addition(ServiceQueueEventSet eventSet, ServiceQueueEvent anEvent);
    public static ServiceQueueEventSet Add(ServiceQueueEventSet eventSet, ServiceQueueEvent anEvent);
    public static ServiceQueueEventSet op_Subtraction(ServiceQueueEventSet eventSet, ServiceQueueEvent anEvent);
    public static ServiceQueueEventSet Subtract(ServiceQueueEventSet eventSet, ServiceQueueEvent anEvent);
    public virtual int get_NumberOfElements();
    public virtual string ToString();
    public bool get_AlterQueue();
    public void set_AlterQueue(bool value);
    public bool get_BrokerQueueDisabled();
    public void set_BrokerQueueDisabled(bool value);
    public bool get_DropQueue();
    public void set_DropQueue(bool value);
    public bool get_QueueActivation();
    public void set_QueueActivation(bool value);
}
internal class Microsoft.SqlServer.Management.Smo.ServiceQueueEventsWorker : ObjectInSchemaEventsWorker {
    protected string ObjectType { get; }
    public ServiceQueueEventsWorker(ServiceQueue target);
    protected virtual string get_ObjectType();
    protected virtual EventQuery CreateWqlQuery(string eventClass);
}
internal enum Microsoft.SqlServer.Management.Smo.ServiceQueueEventValues : Enum {
    public int value__;
    public static ServiceQueueEventValues AlterQueue;
    public static ServiceQueueEventValues BrokerQueueDisabled;
    public static ServiceQueueEventValues DropQueue;
    public static ServiceQueueEventValues QueueActivation;
}
public class Microsoft.SqlServer.Management.Smo.ServiceRequestException : SmoException {
    private UInt32 errorCode;
    private String[] ServiceErrorMessageMap;
    public SmoExceptionType SmoExceptionType { get; }
    public int ErrorCode { get; }
    public string Message { get; }
    public ServiceRequestException(string message);
    public ServiceRequestException(string message, Exception innerException);
    internal ServiceRequestException(UInt32 retcode);
    private ServiceRequestException(SerializationInfo info, StreamingContext context);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    private void Init();
    public virtual SmoExceptionType get_SmoExceptionType();
    public int get_ErrorCode();
    public virtual string get_Message();
}
public enum Microsoft.SqlServer.Management.Smo.ServiceStartMode : Enum {
    public int value__;
    public static ServiceStartMode Boot;
    public static ServiceStartMode System;
    public static ServiceStartMode Auto;
    public static ServiceStartMode Manual;
    public static ServiceStartMode Disabled;
}
[SfcElementTypeAttribute("Setting")]
[SfcElementAttribute("16")]
public class Microsoft.SqlServer.Management.Smo.Settings : SqlSmoObject {
    private OleDbProviderSettingsCollection m_OleDbProviderSettings;
    [SfcObjectAttribute("1")]
public Server Parent { get; }
    public static string UrnSuffix { get; }
    [SfcObjectAttribute("0", "0", "Microsoft.SqlServer.Management.Smo.OleDbProviderSettings")]
public OleDbProviderSettingsCollection OleDbProviderSettings { get; }
    [SfcPropertyAttribute("1024")]
public AuditLevel AuditLevel { get; public set; }
    [SfcPropertyAttribute("1024")]
public string BackupDirectory { get; public set; }
    [SfcPropertyAttribute("1024")]
public string DefaultFile { get; public set; }
    [SfcPropertyAttribute("1024")]
public string DefaultLog { get; public set; }
    [SfcPropertyAttribute("1024")]
public int ErrorLogSizeKb { get; public set; }
    [SfcPropertyAttribute("1024")]
public ServerLoginMode LoginMode { get; public set; }
    [SfcPropertyAttribute("1024")]
public string MailProfile { get; public set; }
    [SfcPropertyAttribute("1024")]
public int NumberOfLogFiles { get; public set; }
    [SfcPropertyAttribute("1024")]
public PerfMonMode PerfMonMode { get; public set; }
    [SfcPropertyAttribute("1024")]
public int TapeLoadWaitTime { get; public set; }
    internal Settings(Server parentsrv, ObjectKeyBase key, SqlSmoState state);
    public Server get_Parent();
    protected sealed virtual void GetUrnRecursive(StringBuilder urnbuilder, UrnIdOption idOption);
    public static string get_UrnSuffix();
    public sealed virtual void Alter();
    internal virtual void ScriptAlter(StringCollection query, ScriptingPreferences sp);
    internal virtual void ScriptCreate(StringCollection query, ScriptingPreferences sp);
    private void ScriptProperties(StringCollection query, ScriptingPreferences sp);
    private void ScriptRegSetting(StringCollection query, String[] prop, object oValue);
    private void ScriptDeleteRegSetting(StringCollection query, String[] prop);
    public sealed virtual StringCollection Script();
    public sealed virtual StringCollection Script(ScriptingOptions scriptingOptions);
    public OleDbProviderSettingsCollection get_OleDbProviderSettings();
    internal virtual SqlPropertyMetadataProvider GetPropertyMetadataProvider();
    public AuditLevel get_AuditLevel();
    public void set_AuditLevel(AuditLevel value);
    public string get_BackupDirectory();
    public void set_BackupDirectory(string value);
    public string get_DefaultFile();
    public void set_DefaultFile(string value);
    public string get_DefaultLog();
    public void set_DefaultLog(string value);
    public int get_ErrorLogSizeKb();
    public void set_ErrorLogSizeKb(int value);
    public ServerLoginMode get_LoginMode();
    public void set_LoginMode(ServerLoginMode value);
    public string get_MailProfile();
    public void set_MailProfile(string value);
    public int get_NumberOfLogFiles();
    public void set_NumberOfLogFiles(int value);
    public PerfMonMode get_PerfMonMode();
    public void set_PerfMonMode(PerfMonMode value);
    public int get_TapeLoadWaitTime();
    public void set_TapeLoadWaitTime(int value);
}
public class Microsoft.SqlServer.Management.Smo.SfcDependencyException : SmoException {
    public SmoExceptionType SmoExceptionType { get; }
    public SfcDependencyException(string message);
    public SfcDependencyException(string message, Exception innerException);
    private SfcDependencyException(SerializationInfo info, StreamingContext context);
    private void Init();
    public virtual SmoExceptionType get_SmoExceptionType();
}
internal class Microsoft.SqlServer.Management.Smo.SfcResolverHelper : object {
    internal static Database GetDatabase(object obj);
    internal static DataType GetDataType(object obj);
    internal static string GetSchemaName(object obj);
}
public enum Microsoft.SqlServer.Management.Smo.ShrinkMethod : Enum {
    public int value__;
    public static ShrinkMethod Default;
    public static ShrinkMethod NoTruncate;
    public static ShrinkMethod TruncateOnly;
    public static ShrinkMethod EmptyFile;
}
public abstract class Microsoft.SqlServer.Management.Smo.SimpleObjectCollectionBase : SortedListCollectionBase {
    internal SimpleObjectCollectionBase(SqlSmoObject parent);
    protected virtual void InitInnerCollection();
    public bool Contains(string name);
    internal virtual ObjectKeyBase CreateKeyFromUrn(Urn urn);
}
internal class Microsoft.SqlServer.Management.Smo.SimpleObjectComparer : ObjectComparerBase {
    internal SimpleObjectComparer(IComparer stringComparer);
    public virtual int Compare(object obj1, object obj2);
}
internal class Microsoft.SqlServer.Management.Smo.SimpleObjectKey : ObjectKeyBase {
    protected string name;
    internal static StringCollection fields;
    public string Name { get; public set; }
    public string UrnFilter { get; }
    public bool IsNull { get; }
    public SimpleObjectKey(string name);
    private static SimpleObjectKey();
    public string get_Name();
    public void set_Name(string value);
    public virtual string ToString();
    public virtual string GetExceptionName();
    public virtual string get_UrnFilter();
    public virtual StringCollection GetFieldNames();
    public virtual ObjectKeyBase Clone();
    internal virtual void Validate(Type objectType);
    public virtual bool get_IsNull();
    public virtual ObjectComparerBase GetComparer(IComparer stringComparer);
}
internal class Microsoft.SqlServer.Management.Smo.SingleFileWriter : SingleFileWriterBase {
    private StreamWriter streamWriter;
    private bool _wroteHeader;
    public SingleFileWriter(string path);
    public SingleFileWriter(string path, bool appendToFile);
    public SingleFileWriter(string path, bool appendToFile, Encoding encoding);
    public SingleFileWriter(string path, Encoding encoding);
    private void Init(string path, bool appendToFile, Encoding encoding);
    protected virtual void ScriptObjectImpl(IEnumerable`1<string> script, Urn obj);
    protected virtual void ScriptDataImpl(IEnumerable`1<string> dataScript, Urn table);
    protected virtual void ScriptContextImpl(IEnumerable`1<string> databaseContext, Urn obj);
    protected virtual void WriteHeaderImpl(string header);
    public void Close();
    protected virtual void Dispose(bool disposing);
}
internal abstract class Microsoft.SqlServer.Management.Smo.SingleFileWriterBase : object {
    private string currentContext;
    [CompilerGeneratedAttribute]
private string <BatchTerminator>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ScriptBatchTerminator>k__BackingField;
    [CompilerGeneratedAttribute]
private int <InsertBatchSize>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Indented>k__BackingField;
    private bool _wroteHeader;
    public string BatchTerminator { get; public set; }
    public bool ScriptBatchTerminator { get; public set; }
    public int InsertBatchSize { get; public set; }
    public bool Indented { get; public set; }
    unknown string Header {public set; }
    [CompilerGeneratedAttribute]
public string get_BatchTerminator();
    [CompilerGeneratedAttribute]
public void set_BatchTerminator(string value);
    [CompilerGeneratedAttribute]
public bool get_ScriptBatchTerminator();
    [CompilerGeneratedAttribute]
public void set_ScriptBatchTerminator(bool value);
    [CompilerGeneratedAttribute]
public int get_InsertBatchSize();
    [CompilerGeneratedAttribute]
public void set_InsertBatchSize(int value);
    [CompilerGeneratedAttribute]
public bool get_Indented();
    [CompilerGeneratedAttribute]
public void set_Indented(bool value);
    public sealed virtual void set_Header(string value);
    protected abstract virtual void WriteHeaderImpl(string header);
    public sealed virtual void Dispose();
    protected virtual override void Finalize();
    protected abstract virtual void Dispose(bool disposing);
    public sealed virtual void ScriptContext(string databaseContext, Urn obj);
    protected abstract virtual void ScriptContextImpl(IEnumerable`1<string> context, Urn obj);
    public sealed virtual void ScriptData(IEnumerable`1<string> dataScript, Urn table);
    protected abstract virtual void ScriptDataImpl(IEnumerable`1<string> dataScript, Urn table);
    public sealed virtual void ScriptObject(IEnumerable`1<string> script, Urn obj);
    protected abstract virtual void ScriptObjectImpl(IEnumerable`1<string> script, Urn obj);
    protected void CheckValidFileName(string path);
}
[EvaluationModeAttribute("4")]
[PhysicalFacetAttribute]
[SfcElementAttribute("16")]
public class Microsoft.SqlServer.Management.Smo.SmartAdmin : SqlSmoObject {
    private string m_databaseName;
    private Nullable`1<bool> m_isDroppedDB;
    private Nullable`1<bool> m_isAvailabilityDB;
    [SfcPropertyAttribute("64")]
public string DatabaseName { get; public set; }
    [SfcPropertyAttribute("64")]
public Nullable`1<bool> IsDroppedDB { get; public set; }
    [SfcPropertyAttribute("64")]
public Nullable`1<bool> IsAvailabilityDB { get; public set; }
    [SfcObjectAttribute("1")]
public Server Parent { get; internal set; }
    public static string UrnSuffix { get; }
    private bool Microsoft.SqlServer.Management.Sdk.Sfc.ISfcSupportsDesignMode.IsDesignMode { get; }
    [SfcPropertyAttribute("1024")]
public bool BackupEnabled { get; public set; }
    [SfcPropertyAttribute("1024")]
public int BackupRetentionPeriodInDays { get; public set; }
    [SfcPropertyAttribute("1024")]
public string CredentialName { get; public set; }
    [SfcPropertyAttribute("1024")]
public string EncryptionAlgorithm { get; public set; }
    [SfcPropertyAttribute("1024")]
public string EncryptorName { get; public set; }
    [SfcPropertyAttribute("1024")]
public string EncryptorType { get; public set; }
    [SfcPropertyAttribute("1024")]
public bool MasterSwitch { get; public set; }
    [SfcPropertyAttribute("1024")]
public string StorageUrl { get; public set; }
    internal SmartAdmin(Server parentsrv, ObjectKeyBase key, SqlSmoState state);
    public string get_DatabaseName();
    public void set_DatabaseName(string value);
    public Nullable`1<bool> get_IsDroppedDB();
    public void set_IsDroppedDB(Nullable`1<bool> value);
    public Nullable`1<bool> get_IsAvailabilityDB();
    public void set_IsAvailabilityDB(Nullable`1<bool> value);
    public Server get_Parent();
    internal void set_Parent(Server value);
    public sealed virtual void Alter();
    public sealed virtual StringCollection Script();
    public sealed virtual StringCollection Script(ScriptingOptions scriptingOptions);
    public DataTable EnumHealthStatus();
    public DataTable EnumHealthStatus(Nullable`1<DateTime> startDate, Nullable`1<DateTime> endDate);
    public sealed virtual void Refresh();
    protected sealed virtual void GetUrnRecursive(StringBuilder urnbuilder, UrnIdOption idOption);
    internal virtual void ScriptCreate(StringCollection queries, ScriptingPreferences sp);
    internal virtual void ScriptAlter(StringCollection queries, ScriptingPreferences sp);
    private void SetParameters(List`1<string> parameters, ScriptingPreferences sp);
    private void ScriptProperties(StringCollection queries, ScriptingPreferences sp);
    private void RefreshDBLevelProperties();
    private void BypassValues();
    public static string get_UrnSuffix();
    private sealed virtual override bool Microsoft.SqlServer.Management.Sdk.Sfc.ISfcSupportsDesignMode.get_IsDesignMode();
    internal virtual SqlPropertyMetadataProvider GetPropertyMetadataProvider();
    public bool get_BackupEnabled();
    public void set_BackupEnabled(bool value);
    public int get_BackupRetentionPeriodInDays();
    public void set_BackupRetentionPeriodInDays(int value);
    public string get_CredentialName();
    public void set_CredentialName(string value);
    public string get_EncryptionAlgorithm();
    public void set_EncryptionAlgorithm(string value);
    public string get_EncryptorName();
    public void set_EncryptorName(string value);
    public string get_EncryptorType();
    public void set_EncryptorType(string value);
    public bool get_MasterSwitch();
    public void set_MasterSwitch(bool value);
    public string get_StorageUrl();
    public void set_StorageUrl(string value);
}
public class Microsoft.SqlServer.Management.Smo.SmartAdminState : object {
    private bool isInitialized;
    private SmartAdmin smartAdmin;
    private bool isMasterSwitchEnabled;
    private bool isBackupEnabled;
    private int numberOfStorageConnectivityErrors;
    private int numberOfSqlErrors;
    private int numberOfInvalidCredentialErrors;
    private int numberOfOtherErrors;
    private int numberOfCorruptedOrDeletedBackups;
    private int numberOfBackupLoops;
    private int numberOfRetentionLoops;
    public bool IsMasterSwitchEnabled { get; }
    public bool IsBackupEnabled { get; }
    public int NumberOfStorageConnectivityErrors { get; }
    public int NumberOfSqlErrors { get; }
    public int NumberOfInvalidCredentialErrors { get; }
    public int NumberOfOtherErrors { get; }
    public int NumberOfCorruptedOrDeletedBackups { get; }
    public int NumberOfBackupLoops { get; }
    public int NumberOfRetentionLoops { get; }
    public SmartAdminState(SmartAdmin smartadmin);
    public sealed virtual bool get_IsMasterSwitchEnabled();
    public sealed virtual bool get_IsBackupEnabled();
    public sealed virtual int get_NumberOfStorageConnectivityErrors();
    public sealed virtual int get_NumberOfSqlErrors();
    public sealed virtual int get_NumberOfInvalidCredentialErrors();
    public sealed virtual int get_NumberOfOtherErrors();
    public sealed virtual int get_NumberOfCorruptedOrDeletedBackups();
    public sealed virtual int get_NumberOfBackupLoops();
    public sealed virtual int get_NumberOfRetentionLoops();
    public sealed virtual void Refresh();
    private void Initialize();
    private void CheckInitialized();
}
public class Microsoft.SqlServer.Management.Smo.SmoApplication : object {
    internal static UInt32 trL1;
    internal static UInt32 trL2;
    internal static UInt32 trErr;
    internal static UInt32 trWarn;
    internal static UInt32 trAlways;
    internal static SmoApplicationEventsSingleton eventsSingleton;
    internal static string ModuleName;
    public static ISmoApplicationEvents EventsSingleton { get; }
    internal static string Namespace { get; }
    public static CultureInfo DefaultCulture { get; }
    private static SmoApplication();
    public static ISmoApplicationEvents get_EventsSingleton();
    internal static string get_Namespace();
    internal static int ConvertUInt32ToInt32(UInt32 value);
    internal static UInt32 ConvertInt32ToUInt32(int value);
    public static CultureInfo get_DefaultCulture();
    public static DataTable EnumAvailableSqlServers();
    public static DataTable EnumAvailableSqlServers(bool localOnly);
    public static DataTable EnumAvailableSqlServers(string name);
}
internal class Microsoft.SqlServer.Management.Smo.SmoApplicationEventsSingleton : object {
    private ObjectCreatedEventHandler objectCreated;
    private ObjectDroppedEventHandler objectDropped;
    private ObjectRenamedEventHandler objectRenamed;
    private ObjectAlteredEventHandler objectAltered;
    private AnyObjectEventHandler anyObjectEvent;
    private DatabaseEventHandler databaseEvent;
    public sealed virtual void add_ObjectCreated(ObjectCreatedEventHandler value);
    public sealed virtual void remove_ObjectCreated(ObjectCreatedEventHandler value);
    internal void CallObjectCreated(object sender, ObjectCreatedEventArgs e);
    internal bool IsNullObjectCreated();
    public sealed virtual void add_ObjectDropped(ObjectDroppedEventHandler value);
    public sealed virtual void remove_ObjectDropped(ObjectDroppedEventHandler value);
    internal void CallObjectDropped(object sender, ObjectDroppedEventArgs e);
    internal bool IsNullObjectDropped();
    public sealed virtual void add_ObjectRenamed(ObjectRenamedEventHandler value);
    public sealed virtual void remove_ObjectRenamed(ObjectRenamedEventHandler value);
    internal void CallObjectRenamed(object sender, ObjectRenamedEventArgs e);
    internal bool IsNullObjectRenamed();
    public sealed virtual void add_ObjectAltered(ObjectAlteredEventHandler value);
    public sealed virtual void remove_ObjectAltered(ObjectAlteredEventHandler value);
    internal void CallObjectAltered(object sender, ObjectAlteredEventArgs e);
    internal bool IsNullObjectAltered();
    public sealed virtual void add_AnyObjectEvent(AnyObjectEventHandler value);
    public sealed virtual void remove_AnyObjectEvent(AnyObjectEventHandler value);
    public sealed virtual void add_DatabaseEvent(DatabaseEventHandler value);
    public sealed virtual void remove_DatabaseEvent(DatabaseEventHandler value);
    internal void CallDatabaseEvent(object sender, DatabaseEventArgs e);
    internal bool IsNullDatabaseEvent();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.SqlServer.Management.Smo.SmoArrayList : SmoInternalStorage {
    internal ArrayList innerCollection;
    private SmoCollectionBase parent;
    internal SqlSmoObject Item { get; internal set; }
    public int Count { get; }
    internal bool IsSynchronized { get; }
    internal object SyncRoot { get; }
    internal SmoArrayList(IComparer keyComparer, SmoCollectionBase parent);
    internal virtual bool Contains(ObjectKeyBase key);
    internal virtual int LookUp(ObjectKeyBase key);
    internal virtual SqlSmoObject get_Item(ObjectKeyBase key);
    internal virtual void set_Item(ObjectKeyBase key, SqlSmoObject value);
    internal virtual SqlSmoObject GetByIndex(int index);
    public virtual int get_Count();
    internal virtual void Add(ObjectKeyBase key, SqlSmoObject o);
    internal virtual void Remove(ObjectKeyBase key);
    internal virtual void Clear();
    internal virtual void InsertAt(int position, SqlSmoObject o);
    internal virtual void RemoveAt(int position);
    internal virtual bool get_IsSynchronized();
    internal virtual object get_SyncRoot();
    public virtual IEnumerator GetEnumerator();
}
internal class Microsoft.SqlServer.Management.Smo.SmoAvaliablePropertyProvider : AvailablePropertyValueProvider {
    public virtual bool IsGraphSupported(ISfcSimpleNode node);
    public virtual bool IsValueAvailable(ISfcSimpleNode node, string propName);
}
public abstract class Microsoft.SqlServer.Management.Smo.SmoCollectionBase : AbstractCollectionBase {
    private SmoInternalStorage internalStorage;
    private string m_lockReason;
    private bool acceptDuplicateNames;
    internal SmoInternalStorage InternalStorage { get; internal set; }
    internal bool IsCollectionLocked { get; }
    public bool IsSynchronized { get; }
    public object SyncRoot { get; }
    public int Count { get; }
    internal int NoFaultCount { get; }
    internal bool AcceptDuplicateNames { get; internal set; }
    internal SmoCollectionBase(SqlSmoObject parent);
    internal SmoInternalStorage get_InternalStorage();
    internal void set_InternalStorage(SmoInternalStorage value);
    protected abstract virtual void InitInnerCollection();
    protected virtual Type GetCollectionElementType();
    internal void LockCollection(string lockReason);
    internal void UnlockCollection();
    internal bool get_IsCollectionLocked();
    internal void CheckCollectionLock();
    internal virtual SqlSmoObject GetCollectionElementInstance(ObjectKeyBase key, SqlSmoState state);
    public sealed virtual bool get_IsSynchronized();
    public sealed virtual object get_SyncRoot();
    internal virtual void ImplRemove(ObjectKeyBase key);
    internal void Remove(ObjectKeyBase key);
    internal void RemoveObj(SqlSmoObject obj, ObjectKeyBase key);
    internal SqlSmoObject GetNewObject(ObjectKeyBase key);
    protected SqlSmoObject GetObjectByIndex(int index);
    internal virtual SqlSmoObject GetObjectByKey(ObjectKeyBase key);
    public void ClearAndInitialize(string filterQuery, IEnumerable`1<string> extraFields);
    public void ResetCollection();
    private void InitializeChildCollection(bool refresh, ScriptingPreferences sp);
    protected void InitializeChildCollection();
    protected void InitializeChildCollection(bool refresh);
    private void InitializeChildCollection(bool refresh, ScriptingPreferences sp, string filterQuery, IEnumerable`1<string> extraFields);
    internal object InitializeChildObject(ObjectKeyBase key);
    internal bool Contains(ObjectKeyBase key);
    internal bool ContainsKey(ObjectKeyBase key);
    public sealed virtual int get_Count();
    public void Refresh();
    public void Refresh(bool refreshChildObjects);
    internal void Clear();
    protected SqlSmoObject GetItemById(int id);
    protected SqlSmoObject GetItemById(int id, string idPropName);
    internal void MarkAllDropped();
    internal IEnumerator GetEnumerator(ScriptingPreferences sp);
    public virtual IEnumerator GetEnumerator();
    internal virtual SqlSmoObject NoFaultLookup(ObjectKeyBase key);
    internal virtual int get_NoFaultCount();
    protected virtual void ImplAddExisting(SqlSmoObject obj);
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
    internal bool get_AcceptDuplicateNames();
    internal void set_AcceptDuplicateNames(bool value);
    internal bool CanHaveEmptyName(Urn urn);
    protected void ValidateParentObject(SqlSmoObject obj);
}
internal class Microsoft.SqlServer.Management.Smo.SmoCollectionCompararer : object {
    private IComparer comparer;
    internal SmoCollectionCompararer(IComparer comparer);
    public sealed virtual int Compare(ISfcSimpleNode left, ISfcSimpleNode right);
}
internal class Microsoft.SqlServer.Management.Smo.SmoCollectionSortingProvider : ContainerSortingProvider {
    private static StringComparer DEFAULT_COMPARER;
    private static SmoCollectionSortingProvider();
    public virtual bool AreGraphsSupported(ISfcSimpleNode source, ISfcSimpleNode target);
    public virtual IComparer`1<ISfcSimpleNode> GetComparer(ISfcSimpleList source, ISfcSimpleList target);
    private bool AreListsComparable(ISfcSimpleList source, ISfcSimpleList target);
    private string GetParentCollation(SqlSmoObject obj);
}
public class Microsoft.SqlServer.Management.Smo.SmoDependencyDiscoverer : object {
    internal HashSet`1<UrnTypeKey> filteredUrnTypes;
    [CompilerGeneratedAttribute]
private IDatabasePrefetch <DatabasePrefetch>k__BackingField;
    internal CreatingObjectDictionary creatingDictionary;
    [CompilerGeneratedAttribute]
private ScriptingPreferences <Preferences>k__BackingField;
    private static HashSet`1<UrnTypeKey> DwFilteredUrnTypes;
    private ChildrenDiscoveryEventHandler childrenDiscovery;
    [CompilerGeneratedAttribute]
private Server <Server>k__BackingField;
    internal IDatabasePrefetch DatabasePrefetch { get; internal set; }
    public ScriptingPreferences Preferences { get; public set; }
    public Server Server { get; public set; }
    public SmoDependencyDiscoverer(Server server);
    public SmoDependencyDiscoverer(Server server, ScriptingOptions so);
    private static SmoDependencyDiscoverer();
    [CompilerGeneratedAttribute]
internal IDatabasePrefetch get_DatabasePrefetch();
    [CompilerGeneratedAttribute]
internal void set_DatabasePrefetch(IDatabasePrefetch value);
    [CompilerGeneratedAttribute]
public ScriptingPreferences get_Preferences();
    [CompilerGeneratedAttribute]
public void set_Preferences(ScriptingPreferences value);
    internal void add_ChildrenDiscovery(ChildrenDiscoveryEventHandler value);
    internal void remove_ChildrenDiscovery(ChildrenDiscoveryEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual Server get_Server();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Server(Server value);
    public sealed virtual IEnumerable`1<Urn> Discover(IEnumerable`1<Urn> urns);
    private HashSet`1<Urn> SfcChildrenDiscovery(HashSet`1<Urn> discoveredUrns);
    private List`1<Urn> GetScriptableChildren(List`1<PropagateInfo> propInfoList, PropagateAction propagateAction);
    private PropagateAction GetPropagateAction();
    private HashSet`1<Urn> ReferenceDiscovery(HashSet`1<Urn> urns);
    private HashSet`1<Urn> CallDependencyWalker(Urn[] urns);
    private bool DiscoverSupported(Urn urn);
}
internal class Microsoft.SqlServer.Management.Smo.SmoDependencyOrderer : object {
    private Dictionary`2<UrnTypeKey, List`1<Urn>> urnTypeDictionary;
    [CompilerGeneratedAttribute]
private ScriptingPreferences <ScriptingPreferences>k__BackingField;
    [CompilerGeneratedAttribute]
private ScriptContainerFactory <ScriptContainerFactory>k__BackingField;
    internal CreatingObjectDictionary creatingDictionary;
    private static string CERTIFICATEKEYLOGIN;
    private static string CERTIFICATEKEYUSER;
    private static string MASTERASSEMBLY;
    private static string MASTERCERTIFICATE;
    private static string MASTERASYMMETRICKEY;
    private static string USERASSEMBLY;
    private static string USERCERTIFICATE;
    private static string USERASYMMETRICKEY;
    private static string CLUSTEREDINDEX;
    private static string NONCLUSTEREDINDEX;
    private static string PRIMARYXMLINDEX;
    private static string SECONDARYXMLINDEX;
    private static string SELECTIVEXMLINDEX;
    private static string SECONDARYSELECTIVEXMLINDEX;
    private static string SPATIALINDEX;
    private static string COLUMNSTOREINDEX;
    private static string CLUSTEREDCOLUMNSTOREINDEX;
    private static string DATA;
    private static string SERVERPERMISSION;
    private static string DATABASEPERMISSION;
    private static string SERVERASSOCIATION;
    private static string DATABASEASSOCIATION;
    private static string SERVEROWNERSHIP;
    private static string DATABASEOWNERSHIP;
    private static string DATABASEREADONLY;
    private static string CREATINGUDF;
    private static string SCALARUDF;
    private static string TABLEVIEWUDF;
    private static string CREATINGSPROC;
    private static string NONSCHEMABOUNDSPROC;
    private static string CREATINGVIEW;
    private static string CREATINGTABLE;
    private static string SERVERROLESUFFIX;
    private static string DATABASEROLESUFFIX;
    private static string DATABASEDDLTRIGGERSUFFIX;
    private static string DATABASEDDLTRIGGERENABLE;
    private static string DATABASEDDLTRIGGERDISABLE;
    private static string SERVERDDLTRIGGERSUFFIX;
    private static string SERVERDDLTRIGGERENABLE;
    private static string SERVERDDLTRIGGERDISABLE;
    [CompilerGeneratedAttribute]
private Server <Server>k__BackingField;
    public ScriptingPreferences ScriptingPreferences { get; public set; }
    internal ScriptContainerFactory ScriptContainerFactory { get; internal set; }
    public Server Server { get; public set; }
    public SmoDependencyOrderer(Server srv);
    private static SmoDependencyOrderer();
    [CompilerGeneratedAttribute]
public ScriptingPreferences get_ScriptingPreferences();
    [CompilerGeneratedAttribute]
public void set_ScriptingPreferences(ScriptingPreferences value);
    [CompilerGeneratedAttribute]
internal ScriptContainerFactory get_ScriptContainerFactory();
    [CompilerGeneratedAttribute]
internal void set_ScriptContainerFactory(ScriptContainerFactory value);
    [CompilerGeneratedAttribute]
public sealed virtual Server get_Server();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Server(Server value);
    public sealed virtual List`1<Urn> Order(IEnumerable`1<Urn> urns);
    private List`1<Urn> ResolveSingleUrn(IEnumerable`1<Urn> urns, Urn outUrn);
    private List`1<Urn> SortedList();
    private int StoreInDictionary(IEnumerable`1<Urn> urns, Urn& outUrn);
    private void AddToDictionary(Urn urn);
    private void ResolveDependencies();
    private void ResolveSqlAssemblyDependencies();
    private void ResolveDdlTriggerDependencies();
    private void ResolveServerDdlTriggerDependencies();
    private void ResolveDatabaseDdlTriggerDependencies();
    private void ResolveIndexDependencies();
    private void ResolveIndexDependenciesWithoutFactory();
    private void ResolveIndexDependenciesWithFactory();
    internal static bool IsSecondaryXmlIndex(Index index);
    private void AddToTable(Index index);
    internal static bool IsClustered(Index index);
    internal static bool IsKey(Index index);
    internal static bool IsFilestreamTable(Table table, ScriptingPreferences sp);
    private void EmbedForeignKeysChecksDefaultConstraints();
    private void AddTableData(List`1<Urn> tableList);
    private Urn ConvertUrn(Urn p, string type);
    private void AddTableData();
    private void AddForeignKeys();
    private void ResolveTableViewUDFSprocDependencies();
    private void ResolveUDFDependencies(List`1<Urn> schemaboundList);
    private void ResolveSprocDependencies(List`1<Urn> schemaboundList);
    private void ResolveTableDependencies(List`1<Urn> schemaboundList);
    private void ResolveViewDependencies(List`1<Urn> schemaboundList);
    private void ResolveTemporalHistoryTableDependencies(List`1<Urn> schemaboundList);
    private void OrderAndStoreSchemaBound(List`1<Urn> schemaboundList);
    private void OrderAndStoreSchemaBoundInSingleDatabase(List`1<Urn> list, string query);
    private void ExecuteQuery(List`1<Urn> objectList, List`1<SqlSmoObject> list, string query);
    private void ExecuteQueryUsingTempTable(List`1<Urn> objectList, List`1<Urn> list, string query);
    private int GetIdFromUrn(Urn urn);
    private void SortDataSet(List`1<Urn> objectList, Dictionary`2<int, Urn> idDictionary, DataSet ds);
    private List`1<int> SortDataSet(DataSet ds);
    private List`1<int> SortDictionary(Dictionary`2<int, List`1<int>> dictionary);
    private void DependencyGraphTraversal(int num, Dictionary`2<int, List`1<int>> dictionary, List`1<int> sortedList, HashSet`1<int> visited, HashSet`1<int> current);
    private List`1<Urn> ReturnComputedColumnTables(List`1<Urn> existingTableList);
    private void ResolveTableOnlyDependencies();
    private List`1<T> GetList(string UrnSuffix);
    private void ResolveSecurityObjectDependencies();
    private void ChangeUrns();
    private void MarkUrnListSpecial(string UrnSuffix);
    private void AddPermissions();
    private void AddConvertedUrnsToList(List`1<Urn> List, string UrnSuffix, string type);
    private void AddOwner();
    private bool AddServerAssociations();
    private bool AddDatabaseReadOnly();
    private void AddDatabaseAssociations();
    private void ResolveServerSecurityObjectDependencies();
    private void FindAndAddMasterSecurityObjects(string UrnSuffix, string urnTypeKey);
    private void ResolveDatabaseSecurityObjectDependencies();
    private void AddCertificateKeyUserDependencies(string UrnSuffix, string urnKeyType);
    [CompilerGeneratedAttribute]
private Urn <ResolveServerDdlTriggerDependencies>b__63_0(Urn p);
    [CompilerGeneratedAttribute]
private Urn <ResolveServerDdlTriggerDependencies>b__63_1(Urn p);
    [CompilerGeneratedAttribute]
private Urn <ResolveDatabaseDdlTriggerDependencies>b__64_0(Urn p);
    [CompilerGeneratedAttribute]
private Urn <ResolveDatabaseDdlTriggerDependencies>b__64_1(Urn p);
    [CompilerGeneratedAttribute]
private bool <ResolveIndexDependenciesWithoutFactory>b__66_0(Urn p);
    [CompilerGeneratedAttribute]
private Urn <AddTableData>b__74_0(Urn p);
    [CompilerGeneratedAttribute]
private bool <AddTableData>b__76_0(Urn p);
    [CompilerGeneratedAttribute]
private bool <ResolveTableOnlyDependencies>b__94_0(Urn p);
    [CompilerGeneratedAttribute]
private T <GetList>b__95_0(Urn p);
    [CompilerGeneratedAttribute]
private Urn <ResolveSecurityObjectDependencies>b__96_0(Urn p);
    [CompilerGeneratedAttribute]
private Urn <MarkUrnListSpecial>b__98_0(Urn p);
}
public class Microsoft.SqlServer.Management.Smo.SmoDmfAdapter : object {
    private static PropertyInfo SmoSchemaPropertyInfo;
    private static PropertyInfo SmoNamePropertyInfo;
    private static SmoDmfAdapter();
    internal static PropertyInfo[] GetTypeProperties(Type type);
    internal static PropertyInfo[] GetTypeFilterProperties(string skeleton);
    internal static PropertyInfo[] GetTypeFilterProperties(Type type);
}
public class Microsoft.SqlServer.Management.Smo.SmoEventArgs : EventArgs {
    private Urn urn;
    public Urn Urn { get; }
    public SmoEventArgs(Urn urn);
    public Urn get_Urn();
}
public class Microsoft.SqlServer.Management.Smo.SmoException : SqlServerManagementException {
    private static SmoExceptionSingleton smoExceptionSingleton;
    protected static string ProdVer { get; }
    public SmoExceptionType SmoExceptionType { get; }
    public string HelpLink { get; }
    public SmoException(string message);
    public SmoException(string message, Exception innerException);
    protected SmoException(SerializationInfo info, StreamingContext context);
    private static SmoException();
    private void Init();
    protected static string get_ProdVer();
    protected internal SmoException SetHelpContext(string resource);
    public virtual SmoExceptionType get_SmoExceptionType();
    public virtual string get_HelpLink();
}
internal class Microsoft.SqlServer.Management.Smo.SmoExceptionSingleton : object {
    internal string prodVer;
}
public enum Microsoft.SqlServer.Management.Smo.SmoExceptionType : Enum {
    public int value__;
    public static SmoExceptionType SmoException;
    public static SmoExceptionType MissingObjectException;
    public static SmoExceptionType PropertyNotSetException;
    public static SmoExceptionType WrongPropertyValueException;
    public static SmoExceptionType PropertyTypeMismatchException;
    public static SmoExceptionType UnknownPropertyException;
    public static SmoExceptionType PropertyReadOnlyException;
    public static SmoExceptionType InvalidSmoOperationException;
    public static SmoExceptionType InvalidVersionSmoOperationException;
    public static SmoExceptionType CollectionNotAvailableException;
    public static SmoExceptionType PropertyCannotBeRetrievedException;
    public static SmoExceptionType InternalSmoErrorException;
    public static SmoExceptionType FailedOperationException;
    public static SmoExceptionType UnsupportedObjectNameException;
    public static SmoExceptionType ServiceRequestException;
    public static SmoExceptionType UnsupportedVersionException;
    public static SmoExceptionType PropertyWriteException;
    public static SmoExceptionType UnsupportedFeatureException;
    public static SmoExceptionType SfcDependencyException;
    public static SmoExceptionType UnsupportedEngineTypeException;
    public static SmoExceptionType InvalidScriptingOptionException;
    public static SmoExceptionType ScriptWriterException;
    public static SmoExceptionType UnsupportedCompatLevelException;
    public static SmoExceptionType UnsupportedEngineEditionException;
}
[DefaultMemberAttribute("Item")]
internal abstract class Microsoft.SqlServer.Management.Smo.SmoInternalStorage : object {
    protected IComparer keyComparer;
    internal SqlSmoObject Item { get; internal set; }
    public int Count { get; }
    internal bool IsSynchronized { get; }
    internal object SyncRoot { get; }
    internal SmoInternalStorage(IComparer keyComparer);
    internal abstract virtual bool Contains(ObjectKeyBase key);
    internal abstract virtual int LookUp(ObjectKeyBase key);
    internal abstract virtual SqlSmoObject get_Item(ObjectKeyBase key);
    internal abstract virtual void set_Item(ObjectKeyBase key, SqlSmoObject value);
    internal abstract virtual SqlSmoObject GetByIndex(int index);
    public abstract virtual int get_Count();
    internal abstract virtual void Add(ObjectKeyBase key, SqlSmoObject o);
    internal abstract virtual void Remove(ObjectKeyBase key);
    internal abstract virtual void InsertAt(int position, SqlSmoObject o);
    internal abstract virtual void RemoveAt(int position);
    internal abstract virtual bool get_IsSynchronized();
    internal abstract virtual object get_SyncRoot();
    public abstract virtual IEnumerator GetEnumerator();
    internal abstract virtual void Clear();
}
internal class Microsoft.SqlServer.Management.Smo.SmoNodeAdapterProvider : SfcNodeAdapterProvider {
    public virtual bool IsGraphSupported(object obj);
    public virtual ISfcSimpleNode GetGraphAdapter(object obj);
}
public abstract class Microsoft.SqlServer.Management.Smo.SmoObjectBase : object {
    private object userData;
    private SqlSmoState m_state;
    internal PropertyBagState propertyBagState;
    public object UserData { get; public set; }
    public SqlSmoState State { get; }
    internal bool ShouldNotifyPropertyChange { get; }
    internal bool ShouldNotifyPropertyMetadataChange { get; }
    public object get_UserData();
    public void set_UserData(object value);
    public SqlSmoState get_State();
    public void SetState(SqlSmoState state);
    internal void SetState(PropertyBagState state);
    internal virtual void ValidateProperty(Property prop, object value);
    internal virtual object GetPropertyDefaultValue(string propname);
    internal virtual object OnPropertyMissing(string propname, bool useDefaultValue);
    internal virtual void OnPropertyChanged(string propname);
    internal virtual bool get_ShouldNotifyPropertyChange();
    internal virtual void OnPropertyMetadataChanged(string propname);
    internal virtual bool get_ShouldNotifyPropertyMetadataChange();
    internal virtual void OnStateChanged();
    [CLSCompliantAttribute("False")]
public virtual ValidationState Validate(string methodName, Object[] arguments);
}
[CLSCompliantAttribute("False")]
public class Microsoft.SqlServer.Management.Smo.SmoObjectExtender`1 : SfcObjectExtender`1<T> {
    public SmoObjectExtender`1(T obj);
    private void Initialize();
    protected void PropagateAlterToChildren(StringCollection script, bool scriptParent);
    protected virtual ISfcPropertySet GetParentSfcPropertySet();
}
internal class Microsoft.SqlServer.Management.Smo.SmoPropertyComparerProvider : PropertyComparerProvider {
    public virtual bool AreGraphsSupported(ISfcSimpleNode left, ISfcSimpleNode right);
    public virtual bool Compare(ISfcSimpleNode left, ISfcSimpleNode right, string propName);
    private static bool CompareDataTypeWorkaround(Column leftCol, Column rightCol);
    private static bool CompareObjects(object left, object right);
}
internal class Microsoft.SqlServer.Management.Smo.SmoSet`1 : object {
    private Dictionary`2<T, object> namesList;
    public SmoSet`1(SmoSet`1<T> set);
    public bool Add(T name);
    public bool Remove(T name);
    public bool Contains(T name);
    public IEnumerator`1<T> GetEnumerator();
}
internal class Microsoft.SqlServer.Management.Smo.SmoSimpleNodeAdapter : SimpleNodeAdapter {
    private static IList`1<string> SYSTEM_SCHEMA_NAMES;
    private static IList`1<string> SYSTEM_USER_NAMES;
    public SmoSimpleNodeAdapter(SqlSmoObject obj);
    private static SmoSimpleNodeAdapter();
    public virtual bool IsSupported(object reference);
    public virtual Urn GetUrn(object reference);
    public virtual object GetProperty(object reference, string propertyName);
    public virtual bool IsCriteriaMatched(object reference);
    private bool IsDesignModeSystemSchema(Schema schema);
    private bool IsDesignModeSystemUser(User user);
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.SqlServer.Management.Smo.SmoSortedList : SmoInternalStorage {
    private SortedList innerCollection;
    internal SqlSmoObject Item { get; internal set; }
    public int Count { get; }
    internal bool IsSynchronized { get; }
    internal object SyncRoot { get; }
    internal SmoSortedList(IComparer keyComparer);
    internal virtual bool Contains(ObjectKeyBase key);
    internal virtual int LookUp(ObjectKeyBase key);
    internal virtual SqlSmoObject get_Item(ObjectKeyBase key);
    internal virtual void set_Item(ObjectKeyBase key, SqlSmoObject value);
    internal virtual SqlSmoObject GetByIndex(int index);
    public virtual int get_Count();
    internal virtual void Add(ObjectKeyBase key, SqlSmoObject o);
    internal virtual void Remove(ObjectKeyBase key);
    internal virtual void InsertAt(int position, SqlSmoObject o);
    internal virtual void RemoveAt(int position);
    internal virtual void Clear();
    internal virtual bool get_IsSynchronized();
    internal virtual object get_SyncRoot();
    public virtual IEnumerator GetEnumerator();
}
internal class Microsoft.SqlServer.Management.Smo.SmoStringWriter : object {
    [CompilerGeneratedAttribute]
private StringCollection <FinalStringCollection>k__BackingField;
    private string currentContext;
    private string _header;
    private bool _wroteHeader;
    public StringCollection FinalStringCollection { get; public set; }
    private string Header { get; public set; }
    [CompilerGeneratedAttribute]
public StringCollection get_FinalStringCollection();
    [CompilerGeneratedAttribute]
public void set_FinalStringCollection(StringCollection value);
    public sealed virtual void ScriptObject(IEnumerable`1<string> script, Urn obj);
    public sealed virtual void ScriptData(IEnumerable`1<string> dataScript, Urn table);
    public sealed virtual void ScriptContext(string databaseContext, Urn obj);
    private string get_Header();
    public sealed virtual void set_Header(string value);
    private void PrependHeaderIfNeeded();
}
internal class Microsoft.SqlServer.Management.Smo.SmoUrnFilter : object {
    [CompilerGeneratedAttribute]
private Server <Server>k__BackingField;
    internal HashSet`1<UrnTypeKey> filteredTypes;
    public Server Server { get; public set; }
    public SmoUrnFilter(Server srv);
    [CompilerGeneratedAttribute]
public sealed virtual Server get_Server();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Server(Server value);
    public sealed virtual IEnumerable`1<Urn> Filter(IEnumerable`1<Urn> urns);
    public void AddFilteredType(string urnType, string parentType);
    public void RemoveFilteredType(string urnType, string parentType);
}
[ExtensionAttribute]
public static class Microsoft.SqlServer.Management.Smo.SmoUtility : object {
    private static ServerVersion[] supportedOnPremVersions;
    private static ServerVersion[] supportedCloudVersions;
    private static SmoUtility();
    public static bool IsSupportedObject(Type type, ServerVersion serverVersion, DatabaseEngineType databaseEngineType, DatabaseEngineEdition databaseEngineEdition);
    private static bool isObjectSupportedBySqlDw(string name);
    [ExtensionAttribute]
public static bool IsSupportedObject(SqlSmoObject smoObject, ScriptingPreferences sp);
    [ExtensionAttribute]
internal static bool IsSupportedObject(SqlSmoObject smoObject, Type type, ScriptingPreferences sp);
    [ExtensionAttribute]
internal static void ThrowIfNotSupported(SqlSmoObject smoObject, Type type, ScriptingPreferences sp);
    [ExtensionAttribute]
internal static void ThrowIfNotSupported(SqlSmoObject smoObject, Type type, string message, ScriptingPreferences sp);
    internal static ServerVersion GetMinimumSupportedVersion(Type type, DatabaseEngineType databaseEngineType, DatabaseEngineEdition databaseEngineEdition);
    internal static IEnumerable`1<ServerVersion> GetSupportedVersions(DatabaseEngineType dbEngineType, DatabaseEngineEdition dbEngineEdition);
    internal static void EncodeStringCollectionAsComment(StringCollection stringCollection, string headComment);
}
public class Microsoft.SqlServer.Management.Smo.SoapMethodCollectionBase : SimpleObjectCollectionBase {
    internal SoapMethodCollectionBase(SqlSmoObject parent);
    protected virtual void InitInnerCollection();
    public void Remove(string name);
    public void Remove(string name, string methodNamespace);
    internal virtual ObjectKeyBase CreateKeyFromUrn(Urn urn);
    internal static string GetDefaultNamespace();
    public bool Contains(string name, string methodNamespace);
    public bool Contains(string name);
}
internal class Microsoft.SqlServer.Management.Smo.SoapMethodComparer : ObjectComparerBase {
    internal SoapMethodComparer(IComparer stringComparer);
    public virtual int Compare(object obj1, object obj2);
}
internal class Microsoft.SqlServer.Management.Smo.SoapMethodKey : SimpleObjectKey {
    private string methodNamespace;
    internal static StringCollection soapMethodFields;
    public string Namespace { get; public set; }
    public string UrnFilter { get; }
    public bool IsNull { get; }
    public SoapMethodKey(string name, string methodNamespace);
    private static SoapMethodKey();
    public string get_Namespace();
    public void set_Namespace(string value);
    public virtual string get_UrnFilter();
    public virtual StringCollection GetFieldNames();
    public virtual string ToString();
    public virtual string GetExceptionName();
    public virtual ObjectKeyBase Clone();
    public virtual bool get_IsNull();
    public virtual ObjectComparerBase GetComparer(IComparer stringComparer);
}
public class Microsoft.SqlServer.Management.Smo.SoapMethodObject : ScriptNameObjectBase {
    [SfcPropertyAttribute("1024")]
public string Namespace { get; public set; }
    internal SoapMethodObject(AbstractCollectionBase parentColl, ObjectKeyBase key, SqlSmoState state);
    internal SoapMethodObject(ObjectKeyBase key, SqlSmoState state);
    public string get_Namespace();
    public void set_Namespace(string value);
    internal virtual ObjectKeyBase GetEmptyKey();
}
[SfcElementTypeAttribute("Soap")]
[SfcElementAttribute("16")]
public class Microsoft.SqlServer.Management.Smo.SoapPayload : EndpointPayload {
    private SoapPayloadMethodCollection m_soapPayloadMethodCollection;
    public static string UrnSuffix { get; }
    [SfcObjectAttribute("1", "0", "Microsoft.SqlServer.Management.Smo.SoapPayloadMethod")]
public SoapPayloadMethodCollection SoapPayloadMethods { get; }
    [SfcPropertyAttribute("1024")]
public string DefaultDatabase { get; public set; }
    [SfcPropertyAttribute("1024")]
public string DefaultNamespace { get; public set; }
    [SfcPropertyAttribute("1024")]
public bool IsSessionEnabled { get; public set; }
    [SfcPropertyAttribute("1024")]
public bool IsSqlBatchesEnabled { get; public set; }
    [SfcPropertyAttribute("1024")]
public bool IsSystemObject { get; }
    [SfcPropertyAttribute("1024")]
public bool SessionNeverTimesOut { get; public set; }
    [SfcPropertyAttribute("1024")]
public int SessionTimeout { get; public set; }
    [SfcPropertyAttribute("1024")]
public WsdlGeneratorOption WsdlGeneratorOption { get; public set; }
    [SfcPropertyAttribute("1024")]
public string WsdlGeneratorProcedure { get; public set; }
    [SfcPropertyAttribute("1024")]
public XmlFormatOption XmlFormatOption { get; public set; }
    [SfcPropertyAttribute("1024")]
public XsdSchemaOption XsdSchemaOption { get; public set; }
    internal SoapPayload(Endpoint parentEndpoint, ObjectKeyBase key, SqlSmoState state);
    public static string get_UrnSuffix();
    protected sealed virtual void GetUrnRecursive(StringBuilder urnbuilder, UrnIdOption idOption);
    public SoapPayloadMethodCollection get_SoapPayloadMethods();
    protected virtual void MarkDropped();
    internal virtual void Script(StringBuilder sb, ScriptingPreferences sp);
    internal virtual PropagateInfo[] GetPropagateInfo(PropagateAction action);
    internal virtual SqlPropertyMetadataProvider GetPropertyMetadataProvider();
    public string get_DefaultDatabase();
    public void set_DefaultDatabase(string value);
    public string get_DefaultNamespace();
    public void set_DefaultNamespace(string value);
    public bool get_IsSessionEnabled();
    public void set_IsSessionEnabled(bool value);
    public bool get_IsSqlBatchesEnabled();
    public void set_IsSqlBatchesEnabled(bool value);
    public bool get_IsSystemObject();
    public bool get_SessionNeverTimesOut();
    public void set_SessionNeverTimesOut(bool value);
    public int get_SessionTimeout();
    public void set_SessionTimeout(int value);
    public WsdlGeneratorOption get_WsdlGeneratorOption();
    public void set_WsdlGeneratorOption(WsdlGeneratorOption value);
    public string get_WsdlGeneratorProcedure();
    public void set_WsdlGeneratorProcedure(string value);
    public XmlFormatOption get_XmlFormatOption();
    public void set_XmlFormatOption(XmlFormatOption value);
    public XsdSchemaOption get_XsdSchemaOption();
    public void set_XsdSchemaOption(XsdSchemaOption value);
}
[SfcElementTypeAttribute("Method")]
[SfcElementAttribute("16")]
public class Microsoft.SqlServer.Management.Smo.SoapPayloadMethod : SoapMethodObject {
    public static string UrnSuffix { get; }
    [SfcObjectAttribute("1")]
public SoapPayload Parent { get; public set; }
    [SfcPropertyAttribute("1024")]
public bool IsSystemObject { get; }
    [SfcPropertyAttribute("1024")]
public MethodLoginType MethodLoginType { get; public set; }
    [SfcPropertyAttribute("1024")]
public MethodXsdSchemaOption MethodXsdSchemaOption { get; public set; }
    [SfcPropertyAttribute("1024")]
public ResultFormat ResultFormat { get; public set; }
    [SfcPropertyAttribute("1024")]
public string SqlMethod { get; }
    public SoapPayloadMethod(SoapPayload soapPayload, string name);
    public SoapPayloadMethod(SoapPayload soapPayload, string name, string methodNamespace);
    public SoapPayloadMethod(SoapPayload soapPayload, string name, string database, string schema, string sqlMethod);
    public SoapPayloadMethod(SoapPayload soapPayload, string name, string database, string schema, string sqlMethod, string methodNamespace);
    internal SoapPayloadMethod(AbstractCollectionBase parentColl, ObjectKeyBase key, SqlSmoState state);
    public static string get_UrnSuffix();
    public sealed virtual void Create();
    private void AddEndpointPart(StringBuilder sb, ScriptingPreferences sp);
    internal virtual void ScriptCreate(StringCollection queries, ScriptingPreferences sp);
    public sealed virtual void Alter();
    internal virtual void ScriptAlter(StringCollection alterQuery, ScriptingPreferences sp);
    public sealed virtual void Drop();
    internal virtual void ScriptDrop(StringCollection queries, ScriptingPreferences sp);
    public void SetSqlMethod(string database, string schema, string name);
    internal void Script(StringBuilder sb, ScriptingPreferences sp);
    public SoapPayload get_Parent();
    public void set_Parent(SoapPayload value);
    internal virtual SqlPropertyMetadataProvider GetPropertyMetadataProvider();
    public bool get_IsSystemObject();
    public MethodLoginType get_MethodLoginType();
    public void set_MethodLoginType(MethodLoginType value);
    public MethodXsdSchemaOption get_MethodXsdSchemaOption();
    public void set_MethodXsdSchemaOption(MethodXsdSchemaOption value);
    public ResultFormat get_ResultFormat();
    public void set_ResultFormat(ResultFormat value);
    public string get_SqlMethod();
}
[DefaultMemberAttribute("Item")]
public class Microsoft.SqlServer.Management.Smo.SoapPayloadMethodCollection : SoapMethodCollectionBase {
    public SoapPayload Parent { get; }
    public SoapPayloadMethod Item { get; }
    public SoapPayloadMethod Item { get; }
    public SoapPayloadMethod Item { get; }
    internal SoapPayloadMethodCollection(SqlSmoObject parentInstance);
    public SoapPayload get_Parent();
    public SoapPayloadMethod get_Item(string name);
    public SoapPayloadMethod get_Item(string name, string methodNamespace);
    public SoapPayloadMethod get_Item(int index);
    protected virtual Type GetCollectionElementType();
    internal virtual SqlSmoObject GetCollectionElementInstance(ObjectKeyBase key, SqlSmoState state);
    public void CopyTo(SoapPayloadMethod[] array, int index);
    public void Remove(SoapPayloadMethod soapMethod);
    public void Add(SoapPayloadMethod soapMethod);
}
public abstract class Microsoft.SqlServer.Management.Smo.SortedListCollectionBase : SmoCollectionBase {
    internal SortedListCollectionBase(SqlSmoObject parent);
    protected void AddImpl(SqlSmoObject obj);
    protected virtual void ImplAddExisting(SqlSmoObject obj);
}
public enum Microsoft.SqlServer.Management.Smo.SortOrder : Enum {
    public int value__;
    public static SortOrder Name;
    public static SortOrder Schema;
    public static SortOrder Type;
    public static SortOrder Urn;
}
[SfcElementAttribute("48")]
public class Microsoft.SqlServer.Management.Smo.SqlAssembly : ScriptNameObjectBase {
    private string primaryAssemblyServerPath;
    private String[] assemblyLocalPaths;
    private AssemblyAlterOptions assemblyAlterMethod;
    private SqlAssemblyFileCollection sqlAssemblyFiles;
    private SqlAssemblyEvents events;
    public static string UrnSuffix { get; }
    [SfcObjectAttribute("1", "0", "Microsoft.SqlServer.Management.Smo.ExtendedProperty")]
public ExtendedPropertyCollection ExtendedProperties { get; }
    [SfcObjectAttribute("1", "0", "Microsoft.SqlServer.Management.Smo.SqlAssemblyFile")]
public SqlAssemblyFileCollection SqlAssemblyFiles { get; }
    [SfcPropertyAttribute("3072")]
public Version Version { get; }
    [SfcObjectAttribute("1")]
public Database Parent { get; public set; }
    internal UserPermissionCollection Permissions { get; }
    private bool Microsoft.SqlServer.Management.Sdk.Sfc.ISfcSupportsDesignMode.IsDesignMode { get; }
    [SfcPropertyAttribute("3072")]
public AssemblySecurityLevel AssemblySecurityLevel { get; public set; }
    [SfcPropertyAttribute("3072")]
public DateTime CreateDate { get; }
    [SfcPropertyAttribute("3072")]
public string Culture { get; }
    [SfcPropertyAttribute("3072")]
public int ID { get; }
    [SfcPropertyAttribute("3072")]
public bool IsSystemObject { get; }
    [SfcPropertyAttribute("3072")]
public bool IsVisible { get; public set; }
    [SfcPropertyAttribute("3072")]
[SfcReferenceAttribute("Microsoft.SqlServer.Management.Smo.User", "Server[@Name = '{0}']/Database[@Name = '{1}']/User[@Name = '{2}']", "Mono.Cecil.CustomAttributeArgument[]")]
[SfcReferenceAttribute("Microsoft.SqlServer.Management.Smo.DatabaseRole", "Server[@Name = '{0}']/Database[@Name = '{1}']/Role[@Name = '{2}']", "Mono.Cecil.CustomAttributeArgument[]")]
[SfcReferenceAttribute("Microsoft.SqlServer.Management.Smo.ApplicationRole", "Server[@Name = '{0}']/Database[@Name = '{1}']/ApplicationRole[@Name = '{2}']", "Mono.Cecil.CustomAttributeArgument[]")]
[CLSCompliantAttribute("False")]
public string Owner { get; public set; }
    [SfcPropertyAttribute("3072")]
public Byte[] PublicKey { get; public set; }
    public SqlAssemblyEvents Events { get; }
    internal SqlAssembly(AbstractCollectionBase parentColl, ObjectKeyBase key, SqlSmoState state);
    public SqlAssembly(Database database, string name);
    private void init();
    public static string get_UrnSuffix();
    public sealed virtual ExtendedPropertyCollection get_ExtendedProperties();
    internal virtual PropagateInfo[] GetPropagateInfo(PropagateAction action);
    public SqlAssemblyFileCollection get_SqlAssemblyFiles();
    public void Create(String[] assemblyLocalPaths);
    public void Create(string primaryAssemblyServerPath);
    internal virtual void ScriptCreate(StringCollection queries, ScriptingPreferences sp);
    public sealed virtual void Drop();
    public sealed virtual void DropIfExists();
    internal virtual void ScriptDrop(StringCollection dropQuery, ScriptingPreferences sp);
    public sealed virtual void Alter();
    public void Alter(AssemblyAlterOptions assemblyAlterMethod);
    public void Alter(AssemblyAlterOptions assemblyAlterMethod, string primaryAssemblyServerPath);
    public void Alter(AssemblyAlterOptions assemblyAlterMethod, String[] assemblyLocalPaths);
    internal virtual void ScriptAlter(StringCollection alterQuery, ScriptingPreferences sp);
    public sealed virtual StringCollection Script();
    public sealed virtual StringCollection Script(ScriptingOptions scriptingOptions);
    protected virtual bool IsObjectDirty();
    private void AppendAssemblyFile(StringBuilder sb, string assemblyLocalPath);
    protected virtual void MarkDropped();
    public Version get_Version();
    internal static String[] GetScriptFields(Type parentType, ServerVersion version, DatabaseEngineType databaseEngineType, DatabaseEngineEdition databaseEngineEdition, bool defaultTextMode);
    public Database get_Parent();
    public void set_Parent(Database value);
    internal virtual UserPermissionCollection get_Permissions();
    private sealed virtual override bool Microsoft.SqlServer.Management.Sdk.Sfc.ISfcSupportsDesignMode.get_IsDesignMode();
    internal virtual SqlPropertyMetadataProvider GetPropertyMetadataProvider();
    public AssemblySecurityLevel get_AssemblySecurityLevel();
    public void set_AssemblySecurityLevel(AssemblySecurityLevel value);
    public DateTime get_CreateDate();
    public string get_Culture();
    public int get_ID();
    public bool get_IsSystemObject();
    public bool get_IsVisible();
    public void set_IsVisible(bool value);
    public string get_Owner();
    public void set_Owner(string value);
    public Byte[] get_PublicKey();
    public void set_PublicKey(Byte[] value);
    public sealed virtual void Deny(ObjectPermissionSet permission, String[] granteeNames);
    public sealed virtual void Deny(ObjectPermissionSet permission, String[] granteeNames, bool cascade);
    public sealed virtual void Grant(ObjectPermissionSet permission, String[] granteeNames);
    public sealed virtual void Grant(ObjectPermissionSet permission, String[] granteeNames, bool grantGrant);
    public sealed virtual void Grant(ObjectPermissionSet permission, String[] granteeNames, bool grantGrant, string asRole);
    public sealed virtual void Revoke(ObjectPermissionSet permission, String[] granteeNames);
    public sealed virtual void Revoke(ObjectPermissionSet permission, String[] granteeNames, bool revokeGrant, bool cascade);
    public void Revoke(ObjectPermissionSet permission, String[] granteeNames, bool revokeGrant, bool cascade, string asRole);
    public sealed virtual void Deny(ObjectPermissionSet permission, string granteeName);
    public sealed virtual void Deny(ObjectPermissionSet permission, string granteeName, bool cascade);
    public sealed virtual void Grant(ObjectPermissionSet permission, string granteeName);
    public sealed virtual void Grant(ObjectPermissionSet permission, string granteeName, bool grantGrant);
    public sealed virtual void Grant(ObjectPermissionSet permission, string granteeName, bool grantGrant, string asRole);
    public sealed virtual void Revoke(ObjectPermissionSet permission, string granteeName);
    public void Revoke(ObjectPermissionSet permission, string granteeName, bool revokeGrant, bool cascade);
    public sealed virtual void Revoke(ObjectPermissionSet permission, string granteeName, bool revokeGrant, bool cascade, string asRole);
    public sealed virtual ObjectPermissionInfo[] EnumObjectPermissions();
    public sealed virtual ObjectPermissionInfo[] EnumObjectPermissions(string granteeName);
    public sealed virtual ObjectPermissionInfo[] EnumObjectPermissions(ObjectPermissionSet permissions);
    public sealed virtual ObjectPermissionInfo[] EnumObjectPermissions(string granteeName, ObjectPermissionSet permissions);
    public SqlAssemblyEvents get_Events();
}
[DefaultMemberAttribute("Item")]
public class Microsoft.SqlServer.Management.Smo.SqlAssemblyCollection : SimpleObjectCollectionBase {
    public Database Parent { get; }
    public SqlAssembly Item { get; }
    public SqlAssembly Item { get; }
    internal SqlAssemblyCollection(SqlSmoObject parentInstance);
    public Database get_Parent();
    public SqlAssembly get_Item(int index);
    public SqlAssembly get_Item(string name);
    public void CopyTo(SqlAssembly[] array, int index);
    public SqlAssembly ItemById(int id);
    protected virtual Type GetCollectionElementType();
    internal virtual SqlSmoObject GetCollectionElementInstance(ObjectKeyBase key, SqlSmoState state);
    public void Add(SqlAssembly sqlAssembly);
    internal SqlSmoObject GetObjectByName(string name);
    internal virtual ObjectKeyBase CreateKeyFromUrn(Urn urn);
}
public class Microsoft.SqlServer.Management.Smo.SqlAssemblyEvent : object {
    private SqlAssemblyEventValues m_value;
    internal SqlAssemblyEventValues Value { get; }
    public static SqlAssemblyEvent AlterAssembly { get; }
    public static SqlAssemblyEvent DropAssembly { get; }
    internal SqlAssemblyEvent(SqlAssemblyEventValues eventValue);
    internal SqlAssemblyEventValues get_Value();
    public static SqlAssemblyEventSet op_Implicit(SqlAssemblyEvent eventValue);
    public static SqlAssemblyEventSet op_Addition(SqlAssemblyEvent eventLeft, SqlAssemblyEvent eventRight);
    public static SqlAssemblyEventSet Add(SqlAssemblyEvent eventLeft, SqlAssemblyEvent eventRight);
    public static SqlAssemblyEventSet op_BitwiseOr(SqlAssemblyEvent eventLeft, SqlAssemblyEvent eventRight);
    public static SqlAssemblyEventSet BitwiseOr(SqlAssemblyEvent eventLeft, SqlAssemblyEvent eventRight);
    public virtual string ToString();
    public static bool op_Equality(SqlAssemblyEvent a, SqlAssemblyEvent b);
    public static bool op_Inequality(SqlAssemblyEvent a, SqlAssemblyEvent b);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static SqlAssemblyEvent get_AlterAssembly();
    public static SqlAssemblyEvent get_DropAssembly();
}
public class Microsoft.SqlServer.Management.Smo.SqlAssemblyEvents : object {
    private SqlAssemblyEventsWorker serverEventsWorker;
    private SqlAssembly parent;
    internal SqlAssemblyEvents(SqlAssembly parent);
    public SqlAssemblyEventSet GetEventSelection();
    public void SubscribeToEvents(SqlAssemblyEventSet events);
    public void SubscribeToEvents(SqlAssemblyEventSet events, ServerEventHandler eventHandler);
    public void UnsubscribeFromEvents(SqlAssemblyEventSet events);
    public void UnsubscribeAllEvents();
    public void StartEvents();
    public void StopEvents();
    public void add_ServerEvent(ServerEventHandler value);
    public void remove_ServerEvent(ServerEventHandler value);
    private void InitializeEvents();
}
public class Microsoft.SqlServer.Management.Smo.SqlAssemblyEventSet : EventSetBase {
    public int NumberOfElements { get; }
    public bool AlterAssembly { get; public set; }
    public bool DropAssembly { get; public set; }
    public SqlAssemblyEventSet(SqlAssemblyEventSet eventSet);
    public SqlAssemblyEventSet(SqlAssemblyEvent anEvent);
    public SqlAssemblyEventSet(SqlAssemblyEvent[] events);
    internal SqlAssemblyEventSet(BitArray storage);
    public virtual EventSetBase Copy();
    internal void SetBit(SqlAssemblyEvent anEvent);
    internal void ResetBit(SqlAssemblyEvent anEvent);
    public SqlAssemblyEventSet Add(SqlAssemblyEvent anEvent);
    public SqlAssemblyEventSet Remove(SqlAssemblyEvent anEvent);
    public static SqlAssemblyEventSet op_Addition(SqlAssemblyEventSet eventSet, SqlAssemblyEvent anEvent);
    public static SqlAssemblyEventSet Add(SqlAssemblyEventSet eventSet, SqlAssemblyEvent anEvent);
    public static SqlAssemblyEventSet op_Subtraction(SqlAssemblyEventSet eventSet, SqlAssemblyEvent anEvent);
    public static SqlAssemblyEventSet Subtract(SqlAssemblyEventSet eventSet, SqlAssemblyEvent anEvent);
    public virtual int get_NumberOfElements();
    public virtual string ToString();
    public bool get_AlterAssembly();
    public void set_AlterAssembly(bool value);
    public bool get_DropAssembly();
    public void set_DropAssembly(bool value);
}
internal class Microsoft.SqlServer.Management.Smo.SqlAssemblyEventsWorker : EventsWorkerBase {
    private SqlAssembly target;
    protected SqlSmoObject Target { get; }
    public SqlAssemblyEventsWorker(SqlAssembly target);
    protected virtual SqlSmoObject get_Target();
    protected virtual EventQuery CreateWqlQuery(string eventClass);
}
internal enum Microsoft.SqlServer.Management.Smo.SqlAssemblyEventValues : Enum {
    public int value__;
    public static SqlAssemblyEventValues AlterAssembly;
    public static SqlAssemblyEventValues DropAssembly;
}
[SfcElementAttribute("48")]
public class Microsoft.SqlServer.Management.Smo.SqlAssemblyFile : ScriptNameObjectBase {
    public static string UrnSuffix { get; }
    [SfcObjectAttribute("1")]
public SqlAssembly Parent { get; public set; }
    [SfcPropertyAttribute("3072")]
public int ID { get; }
    internal SqlAssemblyFile(AbstractCollectionBase parentColl, ObjectKeyBase key, SqlSmoState state);
    public SqlAssemblyFile(SqlAssembly sqlAssembly, string name);
    public static string get_UrnSuffix();
    public Byte[] GetFileBytes();
    public string GetFileText();
    internal static String[] GetScriptFields(Type parentType, ServerVersion version, DatabaseEngineType databaseEngineType, DatabaseEngineEdition databaseEngineEdition, bool defaultTextMode);
    public SqlAssembly get_Parent();
    public void set_Parent(SqlAssembly value);
    internal virtual SqlPropertyMetadataProvider GetPropertyMetadataProvider();
    public int get_ID();
}
[DefaultMemberAttribute("Item")]
public class Microsoft.SqlServer.Management.Smo.SqlAssemblyFileCollection : SimpleObjectCollectionBase {
    public SqlAssembly Parent { get; }
    public SqlAssemblyFile Item { get; }
    public SqlAssemblyFile Item { get; }
    internal SqlAssemblyFileCollection(SqlSmoObject parentInstance);
    public SqlAssembly get_Parent();
    public SqlAssemblyFile get_Item(int index);
    public SqlAssemblyFile get_Item(string name);
    public void CopyTo(SqlAssemblyFile[] array, int index);
    public SqlAssemblyFile ItemById(int id);
    protected virtual Type GetCollectionElementType();
    internal virtual SqlSmoObject GetCollectionElementInstance(ObjectKeyBase key, SqlSmoState state);
    public void Add(SqlAssemblyFile file);
    internal SqlSmoObject GetObjectByName(string name);
    internal virtual ObjectKeyBase CreateKeyFromUrn(Urn urn);
}
public enum Microsoft.SqlServer.Management.Smo.SqlDataType : Enum {
    public int value__;
    public static SqlDataType None;
    public static SqlDataType BigInt;
    public static SqlDataType Binary;
    public static SqlDataType Bit;
    public static SqlDataType Char;
    public static SqlDataType DateTime;
    public static SqlDataType Decimal;
    public static SqlDataType Float;
    public static SqlDataType Image;
    public static SqlDataType Int;
    public static SqlDataType Money;
    public static SqlDataType NChar;
    public static SqlDataType NText;
    public static SqlDataType NVarChar;
    public static SqlDataType NVarCharMax;
    public static SqlDataType Real;
    public static SqlDataType SmallDateTime;
    public static SqlDataType SmallInt;
    public static SqlDataType SmallMoney;
    public static SqlDataType Text;
    public static SqlDataType Timestamp;
    public static SqlDataType TinyInt;
    public static SqlDataType UniqueIdentifier;
    public static SqlDataType UserDefinedDataType;
    public static SqlDataType UserDefinedType;
    public static SqlDataType VarBinary;
    public static SqlDataType VarBinaryMax;
    public static SqlDataType VarChar;
    public static SqlDataType VarCharMax;
    public static SqlDataType Variant;
    public static SqlDataType Xml;
    public static SqlDataType SysName;
    public static SqlDataType Numeric;
    public static SqlDataType Date;
    public static SqlDataType Time;
    public static SqlDataType DateTimeOffset;
    public static SqlDataType DateTime2;
    public static SqlDataType UserDefinedTableType;
    public static SqlDataType HierarchyId;
    public static SqlDataType Geometry;
    public static SqlDataType Geography;
    public static SqlDataType Json;
}
public class Microsoft.SqlServer.Management.Smo.SqlPropertyCollection : PropertyCollection {
    internal SqlPropertyCollection(SqlSmoObject parent, SqlPropertyMetadataProvider pmp);
    public SqlPropertyInfo GetPropertyInfo(string name);
    public SqlPropertyInfo[] EnumPropertyInfo(SqlServerVersions versions);
    public SqlPropertyInfo[] EnumPropertyInfo();
}
public class Microsoft.SqlServer.Management.Smo.SqlPropertyInfo : object {
    private StaticMetadata m_sm;
    private SqlServerVersions m_versions;
    public string Name { get; }
    public bool IsWriteable { get; }
    public bool IsExpensive { get; }
    public Type PropertyType { get; }
    public SqlServerVersions Versions { get; }
    internal SqlPropertyInfo(StaticMetadata sm, SqlServerVersions versions);
    public string get_Name();
    public bool get_IsWriteable();
    public bool get_IsExpensive();
    public Type get_PropertyType();
    public SqlServerVersions get_Versions();
}
internal abstract class Microsoft.SqlServer.Management.Smo.SqlPropertyMetadataProvider : PropertyMetadataProvider {
    protected int currentVersionIndex;
    protected DatabaseEngineType databaseEngineType;
    protected DatabaseEngineEdition databaseEngineEdition;
    protected DatabaseEngineType DatabaseEngineType { get; }
    protected DatabaseEngineEdition DatabaseEngineEdition { get; }
    protected Int32[] VersionCount { get; }
    public SqlPropertyMetadataProvider(ServerVersion sv, DatabaseEngineType databaseEngineType, DatabaseEngineEdition databaseEngineEdition);
    protected DatabaseEngineType get_DatabaseEngineType();
    protected DatabaseEngineEdition get_DatabaseEngineEdition();
    internal virtual int PropertyNameToIDLookupWithException(string propertyName, PropertyAccessPurpose pap);
    internal virtual bool TryPropertyNameToIDLookup(string propertyName, Int32& index);
    protected string GetExceptionText(string propertyName, PropertyAccessPurpose pap);
    protected abstract virtual Int32[] get_VersionCount();
    private string GetServerNameFromVersionIndex(int index);
    private SqlServerVersions GetSupportedVersions(int index);
    internal SqlPropertyInfo GetPropertyInfo(int index);
    private int GetCountForVersions(SqlServerVersions m_versions);
    internal SqlPropertyInfo[] EnumPropertyInfo(SqlServerVersions versions);
}
[LocalizedPropertyResourcesAttribute("Microsoft.SqlServer.Management.Smo.LocalizableResources")]
[TypeConverterAttribute("Microsoft.SqlServer.Management.Sdk.Sfc.LocalizableEnumConverter")]
public enum Microsoft.SqlServer.Management.Smo.SqlServerVersion : Enum {
    public int value__;
    [DisplayNameKeyAttribute("ServerShiloh")]
public static SqlServerVersion Version80;
    [DisplayNameKeyAttribute("ServerYukon")]
public static SqlServerVersion Version90;
    [DisplayNameKeyAttribute("ServerKatmai")]
public static SqlServerVersion Version100;
    [DisplayNameKeyAttribute("ServerKilimanjaro")]
public static SqlServerVersion Version105;
    [DisplayNameKeyAttribute("ServerDenali")]
public static SqlServerVersion Version110;
    [DisplayNameKeyAttribute("ServerSQL14")]
public static SqlServerVersion Version120;
    [DisplayNameKeyAttribute("ServerSQL15")]
public static SqlServerVersion Version130;
    [DisplayNameKeyAttribute("ServerSQL2017")]
public static SqlServerVersion Version140;
    [DisplayNameKeyAttribute("ServerSQLv150")]
public static SqlServerVersion Version150;
    [DisplayNameKeyAttribute("ServerSQLv160")]
public static SqlServerVersion Version160;
}
internal enum Microsoft.SqlServer.Management.Smo.SqlServerVersionInternal : Enum {
    public int value__;
    public static SqlServerVersionInternal Version70;
    public static SqlServerVersionInternal Version80;
    public static SqlServerVersionInternal Version90;
    public static SqlServerVersionInternal Version100;
    public static SqlServerVersionInternal Version105;
    public static SqlServerVersionInternal Version110;
    public static SqlServerVersionInternal Version120;
    public static SqlServerVersionInternal Version130;
    public static SqlServerVersionInternal Version140;
    public static SqlServerVersionInternal Version150;
    public static SqlServerVersionInternal Version160;
}
[FlagsAttribute]
public enum Microsoft.SqlServer.Management.Smo.SqlServerVersions : Enum {
    public int value__;
    public static SqlServerVersions Unknown;
    public static SqlServerVersions Version70;
    public static SqlServerVersions Version80;
    public static SqlServerVersions Version90;
    public static SqlServerVersions Version100;
    public static SqlServerVersions Version105;
    public static SqlServerVersions Version110;
    public static SqlServerVersions Version120;
    public static SqlServerVersions Version130;
    public static SqlServerVersions Version140;
    public static SqlServerVersions Version150;
}
[TypeConverterAttribute("Microsoft.SqlServer.Management.Sdk.Sfc.LocalizableTypeConverter")]
public abstract class Microsoft.SqlServer.Management.Smo.SqlSmoObject : SmoObjectBase {
    internal static BindingFlags UrnSuffixBindingFlags;
    [CompilerGeneratedAttribute]
private static EventHandler`1<PropertyMissingEventArgs> PropertyMissing;
    private static Dictionary`2<Type, string> s_SingletonTypeToProperty;
    private static Dictionary`2<Type, String[]> s_TypeToKeyFields;
    private bool initializedForScripting;
    internal bool objectInSpace;
    protected ExtendedPropertyCollection m_ExtendedProperties;
    private AbstractCollectionBase parentColl;
    internal ObjectKeyBase key;
    protected SqlSmoObject singletonParent;
    internal SqlPropertyCollection properties;
    private Server m_server;
    private bool executeForScalar;
    private Object[] scalarResult;
    private UserPermissionCollection userPermissions;
    internal StringComparer m_comparer;
    private ObjectComparerBase keyComparer;
    private bool m_bIgnoreForScripting;
    private IRenewableToken accessToken;
    private bool isTouched;
    [CompilerGeneratedAttribute]
private EventHandler`1<SfcPropertyMetadataChangedEventArgs> PropertyMetadataChanged;
    [CompilerGeneratedAttribute]
private PropertyChangedEventHandler PropertyChanged;
    private static IList`1<string> DATABASE_SPECIAL_PROPS;
    private Dictionary`2<string, StringCollection> roleToLoginCache;
    internal bool InitializedForScripting { get; internal set; }
    protected bool ObjectInSpace { get; }
    internal AbstractCollectionBase ParentColl { get; internal set; }
    public AbstractCollectionBase ParentCollection { get; }
    internal string FullQualifiedName { get; }
    internal string InternalName { get; }
    internal string UrnSkeleton { get; }
    public Urn Urn { get; }
    internal Urn UrnWithId { get; }
    internal Urn UrnOnlyId { get; }
    public SqlPropertyCollection Properties { get; }
    protected bool ExecuteForScalar { get; protected set; }
    protected Object[] ScalarResult { get; }
    internal UserPermissionCollection Permissions { get; }
    internal StringComparer StringComparer { get; }
    internal ObjectComparerBase KeyComparer { get; }
    protected internal string CollationDatabaseInServer { get; }
    internal bool IgnoreForScripting { get; internal set; }
    public ServerVersion ServerVersion { get; }
    public DatabaseEngineType DatabaseEngineType { get; }
    public DatabaseEngineEdition DatabaseEngineEdition { get; }
    internal bool IsCloudSupported { get; }
    internal ServerInformation ServerInfo { get; }
    internal bool InternalIsObjectDirty { get; }
    protected bool IsTouched { get; }
    public ExecutionManager ExecutionManager { get; }
    internal bool IsDesignMode { get; }
    internal bool SupportsDesignMode { get; }
    internal bool ShouldNotifyPropertyMetadataChange { get; }
    internal bool ShouldNotifyPropertyChange { get; }
    internal SqlSmoObject(AbstractCollectionBase parentColl, ObjectKeyBase key, SqlSmoState state);
    internal SqlSmoObject(ObjectKeyBase key, SqlSmoState state);
    private static SqlSmoObject();
    [CompilerGeneratedAttribute]
public static void add_PropertyMissing(EventHandler`1<PropertyMissingEventArgs> value);
    [CompilerGeneratedAttribute]
public static void remove_PropertyMissing(EventHandler`1<PropertyMissingEventArgs> value);
    internal virtual SqlPropertyMetadataProvider GetPropertyMetadataProvider();
    internal virtual ObjectKeyBase GetEmptyKey();
    private void Init();
    internal bool get_InitializedForScripting();
    internal void set_InitializedForScripting(bool value);
    protected bool get_ObjectInSpace();
    protected internal bool IsObjectInSpace();
    protected virtual void MarkDropped();
    internal void MarkDroppedInternal();
    protected void MarkForDropImpl(bool dropOnAlter);
    protected void CheckObjectState();
    protected virtual void CheckObjectState(bool throwIfNotCreated);
    protected void CheckObjectStateImpl(bool throwIfNotCreated);
    internal AbstractCollectionBase get_ParentColl();
    internal void set_ParentColl(AbstractCollectionBase value);
    public AbstractCollectionBase get_ParentCollection();
    internal virtual string get_FullQualifiedName();
    internal virtual string get_InternalName();
    public virtual string ToString();
    internal string get_UrnSkeleton();
    public static Type GetTypeFromUrnSkeleton(Urn urn);
    internal void GetUrnShellRecursive(StringBuilder urnbuilder);
    internal void GetUrnRecImpl(StringBuilder urnbuilder, UrnIdOption idOption);
    protected virtual void GetUrnRecursive(StringBuilder urnbuilder);
    protected virtual void GetUrnRecursive(StringBuilder urnbuilder, UrnIdOption idOption);
    public static string GetUrnSuffix(Type type);
    public Urn get_Urn();
    internal Urn get_UrnWithId();
    internal Urn get_UrnOnlyId();
    internal void SetObjectKey(ObjectKeyBase key);
    internal virtual void ValidateParent(SqlSmoObject newParent);
    protected internal void SetParentImpl(SqlSmoObject newParent);
    internal virtual void UpdateObjectState();
    private ScriptingPreferences GetScriptingPreferencesForAlter();
    internal void AddDatabaseContext(StringCollection queries, ScriptingPreferences sp);
    protected void AddDatabaseContext(StringCollection queries);
    protected void AlterImplWorker();
    private void CheckNonAlterableProperties();
    internal void AlterImplInit(StringCollection& alterQuery, ScriptingPreferences& sp);
    internal void AlterImplFinish(StringCollection alterQuery, ScriptingPreferences sp);
    protected void AlterImpl();
    protected void GenerateAlterEvent(Urn urn, object innerObject);
    protected void GenerateAlterEvent();
    internal virtual void ScriptAlter(StringCollection alterQuery, ScriptingPreferences sp);
    internal void ScriptAlterInternal(StringCollection alterQuery, ScriptingPreferences sp);
    public virtual void Refresh();
    internal void ReCompile(string name, string schema);
    internal virtual object GetPropertyDefaultValue(string propname);
    internal virtual object OnPropertyMissing(string propname, bool useDefaultValue);
    public bool Initialize();
    public bool Initialize(bool allProperties);
    protected internal bool IsObjectInitialized();
    internal bool InitializeKeepDirtyValues();
    private IDataReader GetInitDataReader(String[] fields, OrderBy[] orderby);
    internal virtual String[] GetRejectFields();
    protected virtual bool ImplInitialize(String[] fields, OrderBy[] orderby);
    private sealed virtual override void Microsoft.SqlServer.Management.Sdk.Sfc.ISqlSmoObjectInitialize.InitializeFromDataReader(IDataReader reader);
    internal void AddObjectPropsFromDataReader(IDataReader reader, bool skipIfDirty);
    internal virtual void AddObjectPropsFromDataReader(IDataReader reader, bool skipIfDirty, int startColIdx, int endColIdx);
    public SqlPropertyCollection get_Properties();
    internal virtual String[] GetNonAlterableProperties();
    protected internal object GetPropValue(string propName);
    protected internal object GetPropValueOptional(string propName);
    internal Nullable`1<T> GetPropValueOptional(string propName);
    public T GetPropValueOptional(string propName, T defaultValue);
    protected internal object GetPropValueOptionalAllowNull(string propName);
    internal T GetPropValueIfSupported(string propertyName, T defaultValue, ScriptingPreferences sp);
    internal T GetPropValueIfSupportedWithThrowOnTarget(string propertyName, T defaultValue, ScriptingPreferences sp);
    internal Property GetPropertyOptional(string propName);
    protected object GetRealValue(Property prop, object oldValue);
    protected virtual string GetServerName();
    private Server TryGetServerObject();
    protected internal Server GetServerObject();
    internal void SetServerObject(Server server);
    protected internal virtual string GetDBName();
    protected internal Database GetContextDB();
    protected internal static void Trace(string traceText);
    protected bool get_ExecuteForScalar();
    protected void set_ExecuteForScalar(bool value);
    protected Object[] get_ScalarResult();
    internal static void FilterException(Exception e);
    protected void CreateImpl();
    protected void CreateOrAlterImpl();
    internal virtual void ScriptCreateOrAlter(StringCollection query, ScriptingPreferences sp);
    internal virtual void ScriptCreateOrAlterInternal(StringCollection query, ScriptingPreferences sp);
    internal virtual void ScriptCreateOrAlterInternal(StringCollection query, ScriptingPreferences sp, bool skipPropagateScript);
    internal ScriptingPreferences GetScriptingPreferencesForCreate();
    private SqlSmoObject GetParentObject(bool throwIfParentIsCreating, bool throwIfParentNotExist);
    private void ExecuteNonQuery(StringCollection queries, bool executeForAlter);
    protected void ExecuteNonQuery(StringCollection queries, bool includeDbContext, bool executeForAlter);
    internal void CreateImplInit(StringCollection& createQuery, ScriptingPreferences& sp);
    internal void CreateImplFinish(StringCollection createQuery, ScriptingPreferences sp);
    internal void CreateOrAlterImplInit(StringCollection& createOrAlterQuery, ScriptingPreferences& sp);
    internal void CreateOrAlterImplFinish(StringCollection createOrAlterQuery, ScriptingPreferences sp);
    protected virtual void PostCreate();
    protected virtual void PostAlter();
    protected virtual void PostDrop();
    internal virtual void PostPropagate();
    internal virtual void ScriptDdl(StringCollection query, ScriptingPreferences sp);
    internal void ScriptDdlInternal(StringCollection query, ScriptingPreferences sp);
    internal virtual void ScriptAssociations(StringCollection query, ScriptingPreferences sp);
    internal void ScriptAssociationsInternal(StringCollection query, ScriptingPreferences sp);
    internal virtual void ScriptCreate(StringCollection query, ScriptingPreferences sp);
    internal virtual void ScriptCreateInternal(StringCollection query, ScriptingPreferences sp);
    internal virtual void ScriptCreateInternal(StringCollection query, ScriptingPreferences sp, bool skipPropagateScript);
    internal virtual void AddScriptPermission(StringCollection query, ScriptingPreferences sp);
    private PermissionInfo[] GetPermissionsFromCache(PermissionEnumKind kind);
    internal virtual UserPermissionCollection get_Permissions();
    internal UserPermissionCollection GetUserPermissions();
    internal void ClearUserPemissions();
    internal void AddScriptPermissions(StringCollection sc, PermissionEnumKind kind, ScriptingPreferences sp);
    internal virtual string ScriptPermissionInfo(PermissionInfo pi, ScriptingPreferences sp);
    internal virtual SqlSmoObject GetPermTargetObject();
    protected internal void DropImpl(bool isDropIfExists, bool handleSevereError);
    protected void DropImpl(bool isDropIfExists);
    protected void DropImplWorker(Urn& urn, bool isDropIfExists);
    internal virtual void ScriptDrop(StringCollection dropQuery, ScriptingPreferences sp);
    internal void ScriptDropInternal(StringCollection dropQuery, ScriptingPreferences sp);
    internal void ScriptIncludeHeaders(StringBuilder sb, ScriptingPreferences sp, string objectType);
    public IComparer`1<string> GetStringComparer();
    internal StringComparer get_StringComparer();
    internal void InitializeStringComparer();
    internal ObjectComparerBase get_KeyComparer();
    private bool TryGetProperty(string propertyName, T& value);
    private string GetCollationRelatedProperties(string dbName, ContainmentType& containmentType, CatalogCollationType& catalogCollation);
    protected internal virtual string get_CollationDatabaseInServer();
    internal StringComparer GetDbComparer(bool inServer);
    internal StringComparer GetComparerFromCollation(string collationName);
    internal CultureInfo GetDbCulture();
    internal bool get_IgnoreForScripting();
    internal void set_IgnoreForScripting(bool value);
    public ServerVersion get_ServerVersion();
    public virtual DatabaseEngineType get_DatabaseEngineType();
    public virtual DatabaseEngineEdition get_DatabaseEngineEdition();
    public void SetAccessToken(IRenewableToken token);
    internal virtual bool get_IsCloudSupported();
    public static bool IsSupportedOnSqlAzure(Type type);
    internal ServerInformation get_ServerInfo();
    internal static string EscapeString(string s, char cEsc);
    [EditorBrowsableAttribute("1")]
public static string SqlString(string s);
    [EditorBrowsableAttribute("1")]
public static string MakeSqlString(string s);
    [EditorBrowsableAttribute("1")]
public static string QuoteString(string name, char cStart, char cEnd);
    internal static string MakeSqlStringForInsert(string s);
    internal static string SqlBraket(string s);
    internal static string MakeSqlBraket(string s);
    internal static string SqlStringBraket(string s);
    internal static string MakeSqlBraketNoEscape(string s);
    protected virtual bool IsObjectDirty();
    internal bool get_InternalIsObjectDirty();
    protected virtual void CleanObject();
    protected bool get_IsTouched();
    public void Touch();
    protected virtual void TouchImpl();
    protected static bool IsCollectionDirty(ICollection col);
    internal virtual PropagateInfo[] GetPropagateInfo(PropagateAction action);
    internal virtual PropagateInfo[] GetPropagateInfoForDiscovery(PropagateAction action);
    internal void PropagateScript(StringCollection query, ScriptingPreferences sp, PropagateAction action);
    private void PropagateStateAndCleanUp(StringCollection query, ScriptingPreferences sp, PropagateAction action);
    protected internal static void UpdateCollectionState2(ICollection col);
    internal virtual void PreInitChildLevel();
    internal List`1<string> InitQueryUrns(Urn levelFilter, String[] queryFields, OrderBy[] orderByFields, String[] infrastructureFields);
    internal List`1<string> InitQueryUrns(Urn levelFilter, String[] queryFields, OrderBy[] orderByFields, String[] infrastructureFields, ScriptingPreferences sp, Urn initializeCollectionsFilter, DatabaseEngineEdition edition);
    public IEnumerable`1<string> GetDisabledProperties(ScriptingPreferences sp);
    [IteratorStateMachineAttribute("Microsoft.SqlServer.Management.Smo.SqlSmoObject/<GetDisabledProperties>d__215")]
internal static IEnumerable`1<string> GetDisabledProperties(Type type, DatabaseEngineEdition databaseEngineEdition);
    private bool IsDisabledProperty(string propertyName, ScriptingPreferences sp);
    internal bool IsSupportedProperty(string propertyName, ScriptingPreferences sp);
    public bool IsSupportedProperty(string propertyName);
    internal void ThrowIfPropertyNotSupported(string propertyName, ScriptingPreferences sp);
    internal static List`1<string> GetSupportedScriptFields(Type type, String[] fields, ServerVersion serverVersion, DatabaseEngineType databaseEngineType, DatabaseEngineEdition databaseEngineEdition);
    internal void InitChildLevel(Urn levelDescription, ScriptingPreferences sp);
    public void InitChildCollection(Urn childType, bool forScripting);
    internal void InitChildLevel(Urn levelFilter, ScriptingPreferences sp, bool forScripting);
    internal void InitChildLevel(Urn levelFilter, ScriptingPreferences sp, bool forScripting, IEnumerable`1<string> extraFields);
    private bool IsDatabaseSpecialCase(bool forScripting, XPathExpression parsedUrn, String[] fields, IList`1<string> defaultFields);
    private void DoDatabaseSpecialCase(Request levelQuery, Urn levelFilter, bool forScripting, List`1<string> urnList, int startLeafIdx, IList`1<string> defaultFields);
    private void MarkChildCollRetrieved(Urn levelFilter, int filterIdx);
    private void MarkChildCollRetrievedRec(SqlSmoObject currentSmoObject, XPathExpression levelFilter, int filterIdx);
    private bool ObjectInFilter(SqlSmoObject current, XPathExpressionBlock levelFilterBlock, HashSet`1<string> idSet);
    private bool ObjectInFilterRec(SqlSmoObject current, FilterNodeOperator opNode);
    private bool CompareAttributeToObject(SqlSmoObject current, FilterNodeOperator oper);
    private StringComparer GetParentStringComparer(SqlSmoObject Object);
    private void InitObjectsFromEnumResults(Urn levelFilter, IDataReader reader, bool forScripting, List`1<string> urnList, int startLeafIdx, bool skipServer);
    private void InitObjectsFromEnumResultsRec(SqlSmoObject currentSmoObject, XPathExpression levelFilter, int filterIdx, IDataReader reader, int columnIdx, Object[] parentRow, bool forScripting, List`1<string> urnList, int startLeafIdx);
    private SqlSmoObject CreateNewObjectFromRow(AbstractCollectionBase childColl, Type childType, IDataReader reader, int columnIdx, bool isOrderedByID, bool skipOrderChecking);
    private SqlSmoObject GetExistingOrCreateNewObject(IDataReader reader, int columnIdx, Type childType, AbstractCollectionBase childColl, bool isOrderedByID);
    private bool AdvanceInitRec(SqlSmoObject currentSmoObject, XPathExpression levelFilter, int filterIdx, IDataReader reader, int columnIdx, int columnOffset, Object[] parentRow, bool forScripting, List`1<string> urnList, int startLeafIdx);
    internal static AbstractCollectionBase GetChildCollection(SqlSmoObject parent, XPathExpression levelFilter, int filterIdx, ServerVersion srvVer);
    internal static string GetPluralName(string name, SqlSmoObject parent);
    internal static AbstractCollectionBase GetChildCollection(SqlSmoObject parent, string childUrnSuffix, string categorystr, ServerVersion srvVer);
    private SqlSmoObject GetChildSingleton(SqlSmoObject parent, XPathExpression levelFilter, int filterIdx, ServerVersion srvVer);
    private int CompareObjectToRow(SqlSmoObject currObj, IDataReader currentRow, int colIdx, bool isOrderedByID, XPathExpression xpath, int xpathIdx);
    private bool CompareRows(IDataReader reader, Object[] parentRow, int columnStartIdx, int columnStopIdx);
    internal static String[] GetQueryTypeInfrastructureFields(Type t);
    private static OrderBy[] GetOrderByList(Type objType);
    internal static bool IsOrderedByID(Type t);
    internal static String[] GetQueryTypeKeyFields(Type t);
    internal static int GetQueryTypeKeyFieldsCount(Type t);
    public static Type GetChildType(string objectName, string parentName);
    public virtual ExecutionManager get_ExecutionManager();
    protected void ThrowIfAboveVersion80(string exceptionMessage);
    protected void ThrowIfBelowVersion80(string exceptionMessage);
    internal void ThrowIfSourceOrDestBelowVersion80(SqlServerVersionInternal targetVersion, string exceptionMessage);
    protected void ThrowIfBelowVersion90(string exceptionMessage);
    internal void ThrowIfSourceOrDestBelowVersion90(SqlServerVersionInternal targetVersion, string exceptionMessage);
    protected void ThrowIfAboveVersion100(string exceptionMessage);
    protected void ThrowIfBelowVersion100(string exceptionMessage);
    protected void ThrowIfBelowVersion160(string exceptionMessage);
    internal void ThrowIfSourceOrDestBelowVersion100(SqlServerVersionInternal targetVersion, string exceptionMessage);
    protected void ThrowIfBelowVersion110(string exceptionMessage);
    protected void ThrowIfBelowVersion110Prop(string propertyName);
    internal void ThrowIfSourceOrDestBelowVersion110(SqlServerVersionInternal targetVersion, string exceptionMessage);
    protected void ThrowIfBelowVersion120(string exceptionMessage);
    protected void ThrowIfBelowVersion120Prop(string propertyName);
    internal void ThrowIfSourceOrDestBelowVersion120(SqlServerVersionInternal targetVersion, string exceptionMessage);
    protected void ThrowIfBelowVersion130(string exceptionMessage);
    protected void ThrowIfBelowVersion130Prop(string propertyName);
    protected void ThrowIfBelowVersion140(string exceptionMessage);
    protected void ThrowIfBelowVersion140Prop(string propertyName);
    internal void ThrowIfSourceOrDestBelowVersion130(SqlServerVersionInternal targetVersion, string exceptionMessage);
    internal void ThrowIfExpressSku(string uft);
    internal void ThrowIfCloudProp(string propertyName);
    internal void ThrowIfCloud(string exceptionMessage);
    internal void ThrowIfCloudAndVersionBelow12(string propertyName);
    public bool IsExpressSku();
    internal bool get_IsDesignMode();
    internal bool get_SupportsDesignMode();
    internal static void ThrowIfCloud(DatabaseEngineType targetEngineType);
    internal static void ThrowIfCloud(DatabaseEngineType targetDatabaseEngineType, string exceptionMessage);
    internal static void ThrowIfNotCloud(DatabaseEngineType targetDatabaseEngineType, string exceptionMessage);
    internal static void ThrowIfNotSqlDw(DatabaseEngineEdition targetDatabaseEngineEdition, string exceptionMessage);
    internal static void ThrowIfCloudAndBelowVersion120(DatabaseEngineType targetDatabaseEngineType, SqlServerVersionInternal targetVersion, string exceptionMessage);
    internal static void ThrowIfBelowVersion90(SqlServerVersionInternal targetVersion, string exceptionMessage);
    internal static void ThrowIfBelowVersion100(SqlServerVersionInternal targetVersion, string exceptionMessage);
    internal static void ThrowIfBelowVersion105(SqlServerVersionInternal targetVersion, string exceptionMessage);
    internal static void ThrowIfBelowVersion110(SqlServerVersionInternal targetVersion, string exceptionMessage);
    internal static void ThrowIfBelowVersion120(SqlServerVersionInternal targetVersion, string exceptionMessage);
    internal static void ThrowIfBelowVersion130(SqlServerVersionInternal targetVersion, string exceptionMessage);
    internal static void ThrowIfBelowVersion80(SqlServerVersionInternal targetVersion, string exceptionMessage);
    private static void ThrowIfBelowVersionLimit(SqlServerVersionInternal targetVersion, SqlServerVersionInternal upperLimit, string exceptionText);
    internal CompatibilityLevel GetCompatibilityLevel();
    internal static CompatibilityLevel GetCompatibilityLevel(ServerVersion ver);
    internal void ThrowIfCompatibilityLevelBelow130();
    internal void ThrowIfCompatibilityLevelBelow120();
    internal void ThrowIfCompatibilityLevelBelow100();
    internal void ThrowIfCompatibilityLevelBelow90();
    internal void ThrowIfCompatibilityLevelBelow80();
    private static void ThrowIfCompatibilityLevelBelowLimit(CompatibilityLevel targetCompatLevel, CompatibilityLevel upperLimit);
    internal static void ThrowIfCreateOrAlterUnsupported(SqlServerVersionInternal targetVersion, string exceptionMessage);
    internal static string GetSqlServerName(ScriptingPreferences sp);
    internal static string GetSqlServerName(SqlSmoObject srv);
    internal static bool IsCloudAtSrcOrDest(DatabaseEngineType srcEngineType, DatabaseEngineType destEngineType);
    internal static string GetDatabaseEngineName(ScriptingPreferences sp);
    public string GetSqlServerVersionName();
    protected string GetFragOptionString(FragmentationOption fragmentationOption);
    internal static string FormatSqlVariant(object sqlVariant);
    public static string SqlDateString(DateTime date);
    internal static string SqlDateString(DateTime date, string format);
    internal static string SqlDateString(DateTimeOffset date);
    private static string ByteArrayToString(Byte[] bytes);
    internal void GenerateDataSpaceScript(StringBuilder parentScript, ScriptingPreferences sp);
    internal void GenerateDataSpaceFileStreamScript(StringBuilder parentScript, ScriptingPreferences sp, bool alterTable);
    protected StringCollection ScriptImpl();
    internal StringCollection ScriptImpl(ScriptingPreferences sp);
    protected StringCollection ScriptImpl(ScriptingOptions so);
    internal IEnumerable`1<string> EnumScriptImpl(ScriptingPreferences sp);
    internal StringCollection ScriptImplWorker(ScriptingPreferences sp);
    internal IEnumerable`1<string> EnumScriptImplWorker(ScriptingPreferences sp);
    protected bool IsVersion80SP3();
    protected bool IsVersion90AndAbove();
    protected void ThrowIfBelowVersion80SP3();
    internal string GetBindRuleScript(ScriptingPreferences sp, string ruleSchema, string ruleName, bool futureOnly);
    internal string GetBindDefaultScript(ScriptingPreferences sp, string defSchema, string defName, bool futureOnly);
    private string GetBindScript(ScriptingPreferences sp, string schema, string name, bool futureOnly, bool forRule);
    protected void BindRuleImpl(string ruleSchema, string rule, bool bindColumns);
    protected void UnbindRuleImpl(bool bindColumns);
    protected void BindDefaultImpl(string defaultSchema, string defaultName, bool bindColumns);
    protected void UnbindDefaultImpl(bool bindColumns);
    internal void CheckCollation(string collationName, ScriptingPreferences sp);
    private void AddNewLineFormat(StringBuilder buffer);
    internal void GetBoolParameter(StringBuilder buffer, ScriptingPreferences sp, string propName, string sqlPropScript, Int32& count);
    internal void GetBoolParameter(StringBuilder buffer, ScriptingPreferences sp, string propName, string sqlPropScript, Int32& count, bool valueAsTrueFalse);
    internal void GetEnumParameter(StringBuilder buffer, ScriptingPreferences sp, string propName, string sqlPropScript, Type enumtype, Int32& count);
    internal bool GetDateTimeParameterAsInt(StringBuilder buffer, ScriptingPreferences sp, string propName, string sqlPropScript, Int32& count);
    internal bool GetTimeSpanParameterAsInt(StringBuilder buffer, ScriptingPreferences sp, string propName, string sqlPropScript, Int32& count);
    internal void GetDateTimeParameter(StringBuilder buffer, ScriptingPreferences sp, string propName, string sqlPropScript, Int32& count);
    internal bool GetGuidParameter(StringBuilder buffer, ScriptingPreferences sp, string propName, string sqlPropScript, Int32& count);
    internal bool GetStringParameter(StringBuilder buffer, ScriptingPreferences sp, string propName, string sqlPropScript, Int32& count);
    internal bool GetStringParameter(StringBuilder buffer, ScriptingPreferences sp, string propName, string sqlPropScript, Int32& count, bool throwIfNotSet);
    internal void GetParameter(StringBuilder buffer, ScriptingPreferences sp, string propName, string sqlPropScript, Int32& count);
    internal void GetParameter(StringBuilder buffer, ScriptingPreferences sp, string propName, string sqlPropScript, Int32& count, bool throwIfNotSet);
    internal void CheckPendingState();
    internal DataType GetDataType(DataType& dataType);
    internal void SetDataType(DataType& targetDataType, DataType sourceDataType);
    internal void WriteToPropBag(DataType dataType);
    internal static string GetTypeName(string typeName);
    private sealed virtual override ISfcPropertySet Microsoft.SqlServer.Management.Sdk.Sfc.ISfcPropertyProvider.GetPropertySet();
    internal virtual void OnPropertyMetadataChanged(string propname);
    internal virtual bool get_ShouldNotifyPropertyMetadataChange();
    [CompilerGeneratedAttribute]
public sealed virtual void add_PropertyMetadataChanged(EventHandler`1<SfcPropertyMetadataChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyMetadataChanged(EventHandler`1<SfcPropertyMetadataChangedEventArgs> value);
    internal virtual void OnPropertyChanged(string propname);
    internal virtual bool get_ShouldNotifyPropertyChange();
    [CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    internal bool IsSystemObjectInternal();
    public List`1<object> Discover();
    private sealed virtual override object Microsoft.SqlServer.Management.Sdk.Sfc.IAlienObject.Resolve(string urnString);
    private sealed virtual override List`1<object> Microsoft.SqlServer.Management.Sdk.Sfc.IAlienObject.Discover();
    private sealed virtual override void Microsoft.SqlServer.Management.Sdk.Sfc.IAlienObject.SetPropertyValue(string propertyName, Type propertyType, object value);
    private sealed virtual override object Microsoft.SqlServer.Management.Sdk.Sfc.IAlienObject.GetParent();
    private sealed virtual override Urn Microsoft.SqlServer.Management.Sdk.Sfc.IAlienObject.GetUrn();
    private sealed virtual override object Microsoft.SqlServer.Management.Sdk.Sfc.IAlienObject.GetPropertyValue(string propertyName, Type propertyType);
    private object GetPropertyValueByReflection(string propertyName, Type propertyType);
    private bool IsSpeciallyLoaded(Type t, string propertyName);
    private sealed virtual override Type Microsoft.SqlServer.Management.Sdk.Sfc.IAlienObject.GetPropertyType(string propertyName);
    private sealed virtual override void Microsoft.SqlServer.Management.Sdk.Sfc.IAlienObject.SetObjectState(SfcObjectState state);
    private sealed virtual override ISfcDomainLite Microsoft.SqlServer.Management.Sdk.Sfc.IAlienObject.GetDomainRoot();
    internal void AddLoginToRole(string roleName, string loginName);
    internal void RemoveLoginFromRole(string roleName, string loginName);
    internal StringCollection EnumLoginsForRole(string roleName);
    internal StringCollection EnumRolesForLogin(string loginName);
    internal void DoCustomAction(string script, string toplevelExceptionMessage);
    public void ExecuteWithModes(SqlExecutionModes modes, Action action);
}
public enum Microsoft.SqlServer.Management.Smo.SqlSmoState : Enum {
    public int value__;
    public static SqlSmoState Pending;
    public static SqlSmoState Creating;
    public static SqlSmoState Existing;
    public static SqlSmoState ToBeDropped;
    public static SqlSmoState Dropped;
}
public class Microsoft.SqlServer.Management.Smo.SqlVariantSerializationAdapter : object {
    public sealed virtual void ReadXml(XmlReader reader, Object& deserializedObject);
    public sealed virtual void WriteXml(XmlWriter writer, object objectToSerialize);
    internal static string StringFromSqlVariant(object sqlVariant);
}
[DebuggerDisplayAttribute("{Name} : {PropertyType}")]
internal class Microsoft.SqlServer.Management.Smo.StaticMetadata : ValueType {
    private string m_name;
    private Type m_propertyType;
    private bool m_expensive;
    private bool m_readonly;
    internal static StaticMetadata Empty;
    internal string Name { get; internal set; }
    internal bool Expensive { get; internal set; }
    internal Type PropertyType { get; internal set; }
    internal bool ReadOnly { get; internal set; }
    internal bool IsEnumeration { get; }
    public Predicate`1<StaticMetadata> Match { get; }
    internal StaticMetadata(string name, bool expensive, bool readOnly, Type propertyType);
    internal StaticMetadata(string name);
    private static StaticMetadata();
    internal string get_Name();
    internal void set_Name(string value);
    internal bool get_Expensive();
    internal void set_Expensive(bool value);
    internal Type get_PropertyType();
    internal void set_PropertyType(Type value);
    internal bool get_ReadOnly();
    internal void set_ReadOnly(bool value);
    internal bool get_IsEnumeration();
    private bool CompareNameOnly(StaticMetadata p);
    public Predicate`1<StaticMetadata> get_Match();
}
[EvaluationModeAttribute("4")]
[PhysicalFacetAttribute]
[SfcElementAttribute("48")]
public class Microsoft.SqlServer.Management.Smo.Statistic : ScriptNameObjectBase {
    private StatisticsScanType m_ScanType;
    private int m_sampleValue;
    private bool m_bIsOnComputed;
    private StatisticColumnCollection m_StatisticColumn;
    private StatisticEvents events;
    public static string UrnSuffix { get; }
    [SfcKeyAttribute("0")]
[SfcPropertyAttribute("7424")]
public string Name { get; public set; }
    [SfcObjectAttribute("1", "1", "Microsoft.SqlServer.Management.Smo.StatisticColumn")]
public StatisticColumnCollection StatisticColumns { get; }
    [SfcObjectAttribute("1")]
[SfcParentAttribute("Table")]
[SfcParentAttribute("View")]
public SqlSmoObject Parent { get; public set; }
    private bool Microsoft.SqlServer.Management.Sdk.Sfc.ISfcSupportsDesignMode.IsDesignMode { get; }
    [SfcPropertyAttribute("3072")]
public string FileGroup { get; public set; }
    [SfcPropertyAttribute("3072")]
public string FilterDefinition { get; public set; }
    [SfcPropertyAttribute("3072")]
public bool HasFilter { get; }
    [SfcPropertyAttribute("3072")]
public int ID { get; }
    [SfcPropertyAttribute("3072")]
public bool IsAutoCreated { get; }
    [SfcPropertyAttribute("3072")]
public bool IsAutoDropped { get; public set; }
    [SfcPropertyAttribute("3072")]
public bool IsFromIndexCreation { get; }
    [SfcPropertyAttribute("1024")]
public bool IsTemporary { get; }
    [SfcPropertyAttribute("3072")]
public DateTime LastUpdated { get; }
    [SfcPropertyAttribute("3072")]
public bool NoAutomaticRecomputation { get; public set; }
    public StatisticEvents Events { get; }
    internal Statistic(AbstractCollectionBase parentColl, ObjectKeyBase key, SqlSmoState state);
    public Statistic(SqlSmoObject parent, string name);
    public static string get_UrnSuffix();
    public void SetScanOptions(StatisticsScanType type, int no);
    public virtual string get_Name();
    public virtual void set_Name(string value);
    public StatisticColumnCollection get_StatisticColumns();
    protected virtual void MarkDropped();
    public sealed virtual void Create();
    internal virtual void ScriptCreate(StringCollection queries, ScriptingPreferences sp);
    private void GetDDL(StringBuilder sb, ScriptingPreferences sp, bool creating);
    private static string replaceOR(Match m);
    private static string ParseFilterDefinition(string p);
    private bool GetColumnList(StringBuilder sb, ScriptingPreferences sp);
    internal bool AddSetOptionsForStats(StringCollection queries);
    public sealed virtual void Drop();
    public sealed virtual void DropIfExists();
    internal virtual void ScriptDrop(StringCollection queries, ScriptingPreferences sp);
    public sealed virtual void MarkForDrop(bool dropOnAlter);
    public void Update();
    public void Update(StatisticsScanType scanType);
    public void Update(StatisticsScanType scanType, int sampleValue);
    public void Update(StatisticsScanType scanType, int sampleValue, bool recompute);
    private string GetTableName();
    private string GetTableName(ScriptingPreferences sp);
    private string GetDatabaseName();
    private bool GetNoRecompute();
    private bool GetAutoDrop();
    private void GetDDLBody(StringBuilder sb, ScriptingPreferences sp, bool creating);
    public sealed virtual StringCollection Script();
    public sealed virtual StringCollection Script(ScriptingOptions scriptingOptions);
    internal static StringCollection UpdateStatistics(string dbName, string tableName, string statisticName, StatisticsScanType scanType, StatisticsTarget affectType, bool bIsNorecompute, int sampleValue);
    internal static StringCollection UpdateStatistics(string dbName, string tableName, string statisticName, StatisticsScanType scanType, StatisticsTarget affectType, bool bIsNorecompute, bool bUpdateAutoDrop, bool bIsAutoDropped, int sampleValue);
    private static void UpdateStatisticsBody(StringBuilder sb, ScriptingPreferences sp, StatisticsScanType scanType, StatisticsTarget affectType, bool bIsNorecompute, bool bUpdateAutoDrop, bool bIsAutoDropped, int sampleValue);
    internal static String[] GetScriptFields(Type parentType, ServerVersion version, DatabaseEngineType databaseEngineType, DatabaseEngineEdition databaseEngineEdition, bool defaultTextMode);
    public DataSet EnumStatistics();
    public SqlSmoObject get_Parent();
    public void set_Parent(SqlSmoObject value);
    private sealed virtual override bool Microsoft.SqlServer.Management.Sdk.Sfc.ISfcSupportsDesignMode.get_IsDesignMode();
    internal virtual SqlPropertyMetadataProvider GetPropertyMetadataProvider();
    public string get_FileGroup();
    public void set_FileGroup(string value);
    public string get_FilterDefinition();
    public void set_FilterDefinition(string value);
    public bool get_HasFilter();
    public int get_ID();
    public bool get_IsAutoCreated();
    public bool get_IsAutoDropped();
    public void set_IsAutoDropped(bool value);
    public bool get_IsFromIndexCreation();
    public bool get_IsTemporary();
    public DateTime get_LastUpdated();
    public bool get_NoAutomaticRecomputation();
    public void set_NoAutomaticRecomputation(bool value);
    public StatisticEvents get_Events();
}
[DefaultMemberAttribute("Item")]
public class Microsoft.SqlServer.Management.Smo.StatisticCollection : SimpleObjectCollectionBase {
    public SqlSmoObject Parent { get; }
    public Statistic Item { get; }
    public Statistic Item { get; }
    internal StatisticCollection(SqlSmoObject parentInstance);
    public SqlSmoObject get_Parent();
    public Statistic get_Item(int index);
    public Statistic get_Item(string name);
    public void CopyTo(Statistic[] array, int index);
    public Statistic ItemById(int id);
    protected virtual Type GetCollectionElementType();
    internal virtual SqlSmoObject GetCollectionElementInstance(ObjectKeyBase key, SqlSmoState state);
    public void Remove(Statistic statistic);
    public void Remove(string name);
    public void Add(Statistic statistic);
    internal SqlSmoObject GetObjectByName(string name);
    internal virtual ObjectKeyBase CreateKeyFromUrn(Urn urn);
}
[SfcElementTypeAttribute("Column")]
[SfcElementAttribute("48")]
public class Microsoft.SqlServer.Management.Smo.StatisticColumn : NamedSmoObject {
    public static string UrnSuffix { get; }
    [SfcKeyAttribute("0")]
[SfcPropertyAttribute("7424")]
public string Name { get; public set; }
    [SfcObjectAttribute("1")]
public Statistic Parent { get; public set; }
    private bool Microsoft.SqlServer.Management.Sdk.Sfc.ISfcSupportsDesignMode.IsDesignMode { get; }
    [SfcPropertyAttribute("3072")]
public int ID { get; }
    internal StatisticColumn(AbstractCollectionBase parentColl, ObjectKeyBase key, SqlSmoState state);
    public StatisticColumn(Statistic statistic, string name);
    public static string get_UrnSuffix();
    public virtual string get_Name();
    public virtual void set_Name(string value);
    internal static String[] GetScriptFields(Type parentType, ServerVersion version, DatabaseEngineType databaseEngineType, DatabaseEngineEdition databaseEngineEdition, bool defaultTextMode);
    public Statistic get_Parent();
    public void set_Parent(Statistic value);
    private sealed virtual override bool Microsoft.SqlServer.Management.Sdk.Sfc.ISfcSupportsDesignMode.get_IsDesignMode();
    internal virtual SqlPropertyMetadataProvider GetPropertyMetadataProvider();
    public int get_ID();
}
[DefaultMemberAttribute("Item")]
public class Microsoft.SqlServer.Management.Smo.StatisticColumnCollection : ParameterCollectionBase {
    public Statistic Parent { get; }
    public StatisticColumn Item { get; }
    public StatisticColumn Item { get; }
    internal StatisticColumnCollection(SqlSmoObject parentInstance);
    public Statistic get_Parent();
    public StatisticColumn get_Item(int index);
    public void CopyTo(StatisticColumn[] array, int index);
    public StatisticColumn get_Item(string name);
    protected virtual Type GetCollectionElementType();
    internal virtual SqlSmoObject GetCollectionElementInstance(ObjectKeyBase key, SqlSmoState state);
    public void Add(StatisticColumn statisticColumn);
    public void Add(StatisticColumn statisticColumn, string insertAtColumnName);
    public void Add(StatisticColumn statisticColumn, int insertAtPosition);
    public void Remove(StatisticColumn statisticColumn);
    public StatisticColumn ItemById(int id);
}
public class Microsoft.SqlServer.Management.Smo.StatisticEvents : object {
    private ObjectEventsWorker serverEventsWorker;
    private Statistic parent;
    internal StatisticEvents(Statistic parent);
    public ObjectEventSet GetEventSelection();
    public void SubscribeToEvents(ObjectEventSet events);
    public void SubscribeToEvents(ObjectEventSet events, ServerEventHandler eventHandler);
    public void UnsubscribeFromEvents(ObjectEventSet events);
    public void UnsubscribeAllEvents();
    public void StartEvents();
    public void StopEvents();
    public void add_ServerEvent(ServerEventHandler value);
    public void remove_ServerEvent(ServerEventHandler value);
    private void InitializeEvents();
}
public enum Microsoft.SqlServer.Management.Smo.StatisticsScanType : Enum {
    public int value__;
    public static StatisticsScanType Default;
    public static StatisticsScanType Resample;
    public static StatisticsScanType FullScan;
    public static StatisticsScanType Percent;
    public static StatisticsScanType Rows;
}
public enum Microsoft.SqlServer.Management.Smo.StatisticsTarget : Enum {
    public int value__;
    public static StatisticsTarget All;
    public static StatisticsTarget Column;
    public static StatisticsTarget Index;
}
internal class Microsoft.SqlServer.Management.Smo.StoragePreferences : object {
    [CompilerGeneratedAttribute]
private bool <FileStreamFileGroup>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <FileStreamColumn>k__BackingField;
    [CompilerGeneratedAttribute]
private PartitioningScheme <PartitionSchemeInternal>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DataCompression>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <XmlCompression>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <FileGroup>k__BackingField;
    internal bool FileStreamFileGroup { get; internal set; }
    internal bool FileStreamColumn { get; internal set; }
    public bool FileStream { get; public set; }
    internal PartitioningScheme PartitionSchemeInternal { get; internal set; }
    public bool PartitionScheme { get; public set; }
    public bool DataCompression { get; public set; }
    public bool XmlCompression { get; public set; }
    public bool FileGroup { get; public set; }
    [CompilerGeneratedAttribute]
internal bool get_FileStreamFileGroup();
    [CompilerGeneratedAttribute]
internal void set_FileStreamFileGroup(bool value);
    [CompilerGeneratedAttribute]
internal bool get_FileStreamColumn();
    [CompilerGeneratedAttribute]
internal void set_FileStreamColumn(bool value);
    public bool get_FileStream();
    public void set_FileStream(bool value);
    [CompilerGeneratedAttribute]
internal PartitioningScheme get_PartitionSchemeInternal();
    [CompilerGeneratedAttribute]
internal void set_PartitionSchemeInternal(PartitioningScheme value);
    public bool get_PartitionScheme();
    public void set_PartitionScheme(bool value);
    [CompilerGeneratedAttribute]
public bool get_DataCompression();
    [CompilerGeneratedAttribute]
public void set_DataCompression(bool value);
    [CompilerGeneratedAttribute]
public bool get_XmlCompression();
    [CompilerGeneratedAttribute]
public void set_XmlCompression(bool value);
    [CompilerGeneratedAttribute]
public bool get_FileGroup();
    [CompilerGeneratedAttribute]
public void set_FileGroup(bool value);
    private void Init();
    internal object Clone();
}
[StateChangeEventAttribute("CREATE_PROCEDURE", "PROCEDURE")]
[StateChangeEventAttribute("ALTER_PROCEDURE", "PROCEDURE")]
[StateChangeEventAttribute("RENAME", "PROCEDURE")]
[StateChangeEventAttribute("ALTER_AUTHORIZATION_DATABASE", "PROCEDURE")]
[StateChangeEventAttribute("ALTER_SCHEMA", "PROCEDURE")]
[EvaluationModeAttribute("7")]
[PhysicalFacetAttribute("1")]
[SfcElementAttribute("48")]
public class Microsoft.SqlServer.Management.Smo.StoredProcedure : ScriptSchemaObjectBase {
    private NumberedStoredProcedureCollection numberedStoredProcedureCollection;
    private StoredProcedureParameterCollection m_Params;
    private StoredProcedureEvents events;
    [SfcObjectAttribute("1", "0", "Microsoft.SqlServer.Management.Smo.NumberedStoredProcedure")]
public NumberedStoredProcedureCollection NumberedStoredProcedures { get; }
    [SfcObjectAttribute("1", "0", "Microsoft.SqlServer.Management.Smo.ExtendedProperty")]
public ExtendedPropertyCollection ExtendedProperties { get; }
    [SfcObjectAttribute("1", "0", "Microsoft.SqlServer.Management.Smo.StoredProcedureParameter", "48")]
public StoredProcedureParameterCollection Parameters { get; }
    public static string UrnSuffix { get; }
    [SfcKeyAttribute("1")]
[SfcPropertyAttribute("7424")]
public string Name { get; public set; }
    [SfcKeyAttribute("0")]
[SfcPropertyAttribute("7424")]
[CLSCompliantAttribute("False")]
[SfcReferenceAttribute("Microsoft.SqlServer.Management.Smo.Schema", "Microsoft.SqlServer.Management.Smo.SchemaCustomResolver", "Resolve", "Mono.Cecil.CustomAttributeArgument[]")]
public string Schema { get; public set; }
    [SfcPropertyAttribute("7200")]
public string TextBody { get; public set; }
    [SfcPropertyAttribute("3104")]
public string TextHeader { get; public set; }
    [SfcPropertyAttribute("7168")]
public bool TextMode { get; public set; }
    [SfcObjectAttribute("1", "32")]
public Database Parent { get; public set; }
    internal UserPermissionCollection Permissions { get; }
    private bool Microsoft.SqlServer.Management.Sdk.Sfc.ISfcSupportsDesignMode.IsDesignMode { get; }
    [SfcPropertyAttribute("7168")]
public bool AnsiNullsStatus { get; public set; }
    [SfcPropertyAttribute("7168")]
[SfcReferenceAttribute("Microsoft.SqlServer.Management.Smo.SqlAssembly", "Server[@Name = '{0}']/Database[@Name = '{1}']/SqlAssembly[@Name = '{2}']", "Mono.Cecil.CustomAttributeArgument[]")]
[CLSCompliantAttribute("False")]
public string AssemblyName { get; public set; }
    [SfcPropertyAttribute("7168")]
public string ClassName { get; public set; }
    [SfcPropertyAttribute("3072")]
public DateTime CreateDate { get; }
    [DmfIgnorePropertyAttribute]
[SfcPropertyAttribute("3072")]
public DateTime DateLastModified { get; }
    [SfcPropertyAttribute("11264")]
public ExecutionContext ExecutionContext { get; public set; }
    [SfcPropertyAttribute("11264")]
[SfcReferenceAttribute("Microsoft.SqlServer.Management.Smo.User", "Server[@Name = '{0}']/Database[@Name = '{1}']/User[@Name = '{2}']", "Mono.Cecil.CustomAttributeArgument[]")]
[CLSCompliantAttribute("False")]
public string ExecutionContextPrincipal { get; public set; }
    [SfcPropertyAttribute("11520")]
public bool ForReplication { get; public set; }
    [SfcPropertyAttribute("3072")]
public int ID { get; }
    [SfcPropertyAttribute("7168", "TransactSql")]
public ImplementationType ImplementationType { get; public set; }
    [SfcPropertyAttribute("11264", "false")]
public bool IsEncrypted { get; public set; }
    [SfcPropertyAttribute("3328")]
public bool IsNativelyCompiled { get; public set; }
    [SfcPropertyAttribute("7168")]
public bool IsSchemaBound { get; public set; }
    [SfcPropertyAttribute("7168")]
public bool IsSchemaOwned { get; }
    [SfcPropertyAttribute("3072")]
public bool IsSystemObject { get; }
    [SfcPropertyAttribute("7168")]
public string MethodName { get; public set; }
    [SfcPropertyAttribute("7168")]
[SfcReferenceAttribute("Microsoft.SqlServer.Management.Smo.User", "Server[@Name = '{0}']/Database[@Name = '{1}']/User[@Name = '{2}']", "Mono.Cecil.CustomAttributeArgument[]")]
[SfcReferenceAttribute("Microsoft.SqlServer.Management.Smo.DatabaseRole", "Server[@Name = '{0}']/Database[@Name = '{1}']/Role[@Name = '{2}']", "Mono.Cecil.CustomAttributeArgument[]")]
[SfcReferenceAttribute("Microsoft.SqlServer.Management.Smo.ApplicationRole", "Server[@Name = '{0}']/Database[@Name = '{1}']/ApplicationRole[@Name = '{2}']", "Mono.Cecil.CustomAttributeArgument[]")]
[CLSCompliantAttribute("False")]
public string Owner { get; public set; }
    [SfcPropertyAttribute("7168")]
public bool QuotedIdentifierStatus { get; public set; }
    [SfcPropertyAttribute("7168")]
public bool Recompile { get; public set; }
    [SfcPropertyAttribute("7168")]
public bool Startup { get; public set; }
    public StoredProcedureEvents Events { get; }
    internal StoredProcedure(AbstractCollectionBase parentColl, ObjectKeyBase key, SqlSmoState state);
    public StoredProcedure(Database database, string name);
    public StoredProcedure(Database database, string name, string schema);
    public void ChangeSchema(string newSchema);
    public NumberedStoredProcedureCollection get_NumberedStoredProcedures();
    public sealed virtual ExtendedPropertyCollection get_ExtendedProperties();
    public StoredProcedureParameterCollection get_Parameters();
    public static string get_UrnSuffix();
    public virtual string get_Name();
    public virtual void set_Name(string value);
    public virtual string get_Schema();
    public virtual void set_Schema(string value);
    protected virtual void TouchImpl();
    private bool ShouldScriptBodyAtAlter();
    private void ScriptSP(StringCollection queries, ScriptingPreferences sp, ScriptHeaderType scriptHeaderType, bool skipSetOptions);
    private void ScriptSPHeaderInternal(StringBuilder sb, ScriptingPreferences sp, ScriptHeaderType scriptHeaderType);
    private void ScriptSPBodyInternal(StringBuilder sb, ScriptingPreferences sp);
    private bool IsTransactSql(ScriptingPreferences sp);
    private void ScriptAlterSkipSetOptions(StringCollection alterQuery, ScriptingPreferences sp);
    private void ScriptInternal(StringCollection queries, ScriptingPreferences sp, ScriptHeaderType scriptHeaderType, bool skipSetOptions);
    private void ScriptExternal(StringCollection queries, ScriptingPreferences sp, bool bForCreate);
    public sealed virtual void Create();
    internal virtual void ScriptCreate(StringCollection queries, ScriptingPreferences sp);
    public sealed virtual void CreateOrAlter();
    internal virtual void ScriptCreateOrAlter(StringCollection queries, ScriptingPreferences sp);
    public sealed virtual void Drop();
    public sealed virtual void DropIfExists();
    internal virtual void ScriptDrop(StringCollection queries, ScriptingPreferences sp);
    public sealed virtual void Alter();
    internal virtual void ScriptAlter(StringCollection alterQuery, ScriptingPreferences sp);
    public sealed virtual void Rename(string newname);
    public void ReCompileReferences();
    internal virtual void ScriptRename(StringCollection renameQuery, ScriptingPreferences sp, string newName);
    protected virtual bool IsObjectDirty();
    internal virtual PropagateInfo[] GetPropagateInfo(PropagateAction action);
    public sealed virtual StringCollection Script();
    public sealed virtual StringCollection Script(ScriptingOptions scriptingOptions);
    protected virtual void MarkDropped();
    internal static String[] GetScriptFields(Type parentType, ServerVersion version, DatabaseEngineType databaseEngineType, DatabaseEngineEdition databaseEngineEdition, bool defaultTextMode);
    public sealed virtual string ScriptHeader(bool forAlter);
    public sealed virtual string ScriptHeader(ScriptHeaderType scriptHeaderType);
    public sealed virtual string get_TextBody();
    public sealed virtual void set_TextBody(string value);
    public sealed virtual string get_TextHeader();
    public sealed virtual void set_TextHeader(string value);
    public sealed virtual bool get_TextMode();
    public sealed virtual void set_TextMode(bool value);
    internal virtual void ValidateProperty(Property prop, object value);
    protected virtual void PostCreate();
    internal virtual void ScriptCreateInternal(StringCollection query, ScriptingPreferences sp, bool skipPropagateScript);
    private void ScriptNumberedStoredProcedures(StringCollection queries, ScriptingPreferences sp);
    public Database get_Parent();
    public void set_Parent(Database value);
    internal virtual UserPermissionCollection get_Permissions();
    private sealed virtual override bool Microsoft.SqlServer.Management.Sdk.Sfc.ISfcSupportsDesignMode.get_IsDesignMode();
    internal virtual SqlPropertyMetadataProvider GetPropertyMetadataProvider();
    public bool get_AnsiNullsStatus();
    public void set_AnsiNullsStatus(bool value);
    public string get_AssemblyName();
    public void set_AssemblyName(string value);
    public string get_ClassName();
    public void set_ClassName(string value);
    public DateTime get_CreateDate();
    public DateTime get_DateLastModified();
    public ExecutionContext get_ExecutionContext();
    public void set_ExecutionContext(ExecutionContext value);
    public string get_ExecutionContextPrincipal();
    public void set_ExecutionContextPrincipal(string value);
    public bool get_ForReplication();
    public void set_ForReplication(bool value);
    public int get_ID();
    public ImplementationType get_ImplementationType();
    public void set_ImplementationType(ImplementationType value);
    public bool get_IsEncrypted();
    public void set_IsEncrypted(bool value);
    public bool get_IsNativelyCompiled();
    public void set_IsNativelyCompiled(bool value);
    public bool get_IsSchemaBound();
    public void set_IsSchemaBound(bool value);
    public bool get_IsSchemaOwned();
    public bool get_IsSystemObject();
    public string get_MethodName();
    public void set_MethodName(string value);
    public string get_Owner();
    public void set_Owner(string value);
    public bool get_QuotedIdentifierStatus();
    public void set_QuotedIdentifierStatus(bool value);
    public bool get_Recompile();
    public void set_Recompile(bool value);
    public bool get_Startup();
    public void set_Startup(bool value);
    internal virtual String[] GetNonAlterableProperties();
    internal virtual object GetPropertyDefaultValue(string propname);
    public sealed virtual void Deny(ObjectPermissionSet permission, String[] granteeNames);
    public sealed virtual void Deny(ObjectPermissionSet permission, String[] granteeNames, bool cascade);
    public sealed virtual void Grant(ObjectPermissionSet permission, String[] granteeNames);
    public sealed virtual void Grant(ObjectPermissionSet permission, String[] granteeNames, bool grantGrant);
    public sealed virtual void Grant(ObjectPermissionSet permission, String[] granteeNames, bool grantGrant, string asRole);
    public sealed virtual void Revoke(ObjectPermissionSet permission, String[] granteeNames);
    public sealed virtual void Revoke(ObjectPermissionSet permission, String[] granteeNames, bool revokeGrant, bool cascade);
    public void Revoke(ObjectPermissionSet permission, String[] granteeNames, bool revokeGrant, bool cascade, string asRole);
    public sealed virtual void Deny(ObjectPermissionSet permission, string granteeName);
    public sealed virtual void Deny(ObjectPermissionSet permission, string granteeName, bool cascade);
    public sealed virtual void Grant(ObjectPermissionSet permission, string granteeName);
    public sealed virtual void Grant(ObjectPermissionSet permission, string granteeName, bool grantGrant);
    public sealed virtual void Grant(ObjectPermissionSet permission, string granteeName, bool grantGrant, string asRole);
    public sealed virtual void Revoke(ObjectPermissionSet permission, string granteeName);
    public void Revoke(ObjectPermissionSet permission, string granteeName, bool revokeGrant, bool cascade);
    public sealed virtual void Revoke(ObjectPermissionSet permission, string granteeName, bool revokeGrant, bool cascade, string asRole);
    public sealed virtual ObjectPermissionInfo[] EnumObjectPermissions();
    public sealed virtual ObjectPermissionInfo[] EnumObjectPermissions(string granteeName);
    public sealed virtual ObjectPermissionInfo[] EnumObjectPermissions(ObjectPermissionSet permissions);
    public sealed virtual ObjectPermissionInfo[] EnumObjectPermissions(string granteeName, ObjectPermissionSet permissions);
    public StoredProcedureEvents get_Events();
}
[DefaultMemberAttribute("Item")]
public class Microsoft.SqlServer.Management.Smo.StoredProcedureCollection : SchemaCollectionBase {
    public Database Parent { get; }
    public StoredProcedure Item { get; }
    public StoredProcedure Item { get; }
    public StoredProcedure Item { get; }
    internal StoredProcedureCollection(SqlSmoObject parentInstance);
    public Database get_Parent();
    public StoredProcedure get_Item(int index);
    public StoredProcedure get_Item(string name);
    public StoredProcedure get_Item(string name, string schema);
    public void CopyTo(StoredProcedure[] array, int index);
    public StoredProcedure ItemById(int id);
    protected virtual Type GetCollectionElementType();
    internal virtual SqlSmoObject GetCollectionElementInstance(ObjectKeyBase key, SqlSmoState state);
    public void Add(StoredProcedure storedProcedure);
    internal SqlSmoObject GetObjectByName(string name);
}
public class Microsoft.SqlServer.Management.Smo.StoredProcedureEvent : object {
    private StoredProcedureEventValues m_value;
    internal StoredProcedureEventValues Value { get; }
    public static StoredProcedureEvent AlterProcedure { get; }
    public static StoredProcedureEvent DropProcedure { get; }
    internal StoredProcedureEvent(StoredProcedureEventValues eventValue);
    internal StoredProcedureEventValues get_Value();
    public static StoredProcedureEventSet op_Implicit(StoredProcedureEvent eventValue);
    public static StoredProcedureEventSet op_Addition(StoredProcedureEvent eventLeft, StoredProcedureEvent eventRight);
    public static StoredProcedureEventSet Add(StoredProcedureEvent eventLeft, StoredProcedureEvent eventRight);
    public static StoredProcedureEventSet op_BitwiseOr(StoredProcedureEvent eventLeft, StoredProcedureEvent eventRight);
    public static StoredProcedureEventSet BitwiseOr(StoredProcedureEvent eventLeft, StoredProcedureEvent eventRight);
    public virtual string ToString();
    public static bool op_Equality(StoredProcedureEvent a, StoredProcedureEvent b);
    public static bool op_Inequality(StoredProcedureEvent a, StoredProcedureEvent b);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static StoredProcedureEvent get_AlterProcedure();
    public static StoredProcedureEvent get_DropProcedure();
}
public class Microsoft.SqlServer.Management.Smo.StoredProcedureEvents : object {
    private StoredProcedureEventsWorker serverEventsWorker;
    private StoredProcedure parent;
    internal StoredProcedureEvents(StoredProcedure parent);
    public StoredProcedureEventSet GetEventSelection();
    public void SubscribeToEvents(StoredProcedureEventSet events);
    public void SubscribeToEvents(StoredProcedureEventSet events, ServerEventHandler eventHandler);
    public void UnsubscribeFromEvents(StoredProcedureEventSet events);
    public void UnsubscribeAllEvents();
    public void StartEvents();
    public void StopEvents();
    public void add_ServerEvent(ServerEventHandler value);
    public void remove_ServerEvent(ServerEventHandler value);
    private void InitializeEvents();
}
public class Microsoft.SqlServer.Management.Smo.StoredProcedureEventSet : EventSetBase {
    public int NumberOfElements { get; }
    public bool AlterProcedure { get; public set; }
    public bool DropProcedure { get; public set; }
    public StoredProcedureEventSet(StoredProcedureEventSet eventSet);
    public StoredProcedureEventSet(StoredProcedureEvent anEvent);
    public StoredProcedureEventSet(StoredProcedureEvent[] events);
    internal StoredProcedureEventSet(BitArray storage);
    public virtual EventSetBase Copy();
    internal void SetBit(StoredProcedureEvent anEvent);
    internal void ResetBit(StoredProcedureEvent anEvent);
    public StoredProcedureEventSet Add(StoredProcedureEvent anEvent);
    public StoredProcedureEventSet Remove(StoredProcedureEvent anEvent);
    public static StoredProcedureEventSet op_Addition(StoredProcedureEventSet eventSet, StoredProcedureEvent anEvent);
    public static StoredProcedureEventSet Add(StoredProcedureEventSet eventSet, StoredProcedureEvent anEvent);
    public static StoredProcedureEventSet op_Subtraction(StoredProcedureEventSet eventSet, StoredProcedureEvent anEvent);
    public static StoredProcedureEventSet Subtract(StoredProcedureEventSet eventSet, StoredProcedureEvent anEvent);
    public virtual int get_NumberOfElements();
    public virtual string ToString();
    public bool get_AlterProcedure();
    public void set_AlterProcedure(bool value);
    public bool get_DropProcedure();
    public void set_DropProcedure(bool value);
}
internal class Microsoft.SqlServer.Management.Smo.StoredProcedureEventsWorker : ObjectInSchemaEventsWorker {
    protected string ObjectType { get; }
    public StoredProcedureEventsWorker(StoredProcedure target);
    protected virtual string get_ObjectType();
}
internal enum Microsoft.SqlServer.Management.Smo.StoredProcedureEventValues : Enum {
    public int value__;
    public static StoredProcedureEventValues AlterProcedure;
    public static StoredProcedureEventValues DropProcedure;
}
[SfcElementTypeAttribute("Param")]
[SfcElementAttribute("48")]
public class Microsoft.SqlServer.Management.Smo.StoredProcedureParameter : Parameter {
    [SfcObjectAttribute("1", "32")]
public StoredProcedure Parent { get; public set; }
    private bool Microsoft.SqlServer.Management.Sdk.Sfc.ISfcSupportsDesignMode.IsDesignMode { get; }
    [SfcPropertyAttribute("7168")]
public bool IsCursorParameter { get; public set; }
    [SfcPropertyAttribute("7168")]
public bool IsOutputParameter { get; public set; }
    internal StoredProcedureParameter(AbstractCollectionBase parent, ObjectKeyBase key, SqlSmoState state);
    public StoredProcedureParameter(StoredProcedure storedProcedure, string name);
    public StoredProcedureParameter(StoredProcedure storedProcedure, string name, DataType dataType);
    internal virtual void ValidateProperty(Property prop, object value);
    internal static String[] GetScriptFields(Type parentType, ServerVersion version, DatabaseEngineType databaseEngineType, DatabaseEngineEdition databaseEngineEdition, bool defaultTextMode);
    protected virtual bool isParentClrImplemented();
    public StoredProcedure get_Parent();
    public void set_Parent(StoredProcedure value);
    private sealed virtual override bool Microsoft.SqlServer.Management.Sdk.Sfc.ISfcSupportsDesignMode.get_IsDesignMode();
    internal virtual SqlPropertyMetadataProvider GetPropertyMetadataProvider();
    public bool get_IsCursorParameter();
    public void set_IsCursorParameter(bool value);
    public bool get_IsOutputParameter();
    public void set_IsOutputParameter(bool value);
}
[DefaultMemberAttribute("Item")]
public class Microsoft.SqlServer.Management.Smo.StoredProcedureParameterCollection : ParameterCollectionBase {
    public StoredProcedure Parent { get; }
    public StoredProcedureParameter Item { get; }
    public StoredProcedureParameter Item { get; }
    internal StoredProcedureParameterCollection(SqlSmoObject parentInstance);
    public StoredProcedure get_Parent();
    public StoredProcedureParameter get_Item(int index);
    public void CopyTo(StoredProcedureParameter[] array, int index);
    public StoredProcedureParameter get_Item(string name);
    protected virtual Type GetCollectionElementType();
    internal virtual SqlSmoObject GetCollectionElementInstance(ObjectKeyBase key, SqlSmoState state);
    public void Add(StoredProcedureParameter storedProcedureParameter);
    public void Add(StoredProcedureParameter storedProcedureParameter, string insertAtColumnName);
    public void Add(StoredProcedureParameter storedProcedureParameter, int insertAtPosition);
    public void Remove(StoredProcedureParameter storedProcedureParameter);
    public StoredProcedureParameter ItemById(int id);
}
internal class Microsoft.SqlServer.Management.Smo.StringComparer : object {
    private CultureInfo m_cultureInfo;
    private CompareOptions m_options;
    internal CultureInfo CultureInfo { get; }
    internal CompareOptions CompareOptions { get; }
    internal StringComparer(string collation, int lcid);
    internal void ChangeCollation(string newCollation, int lcid);
    public sealed virtual int Compare(object x, object y);
    internal CultureInfo get_CultureInfo();
    internal CompareOptions get_CompareOptions();
    public sealed virtual int Compare(string x, string y);
    public sealed virtual bool Equals(string x, string y);
    public sealed virtual int GetHashCode(string obj);
}
[EvaluationModeAttribute("4")]
[PhysicalFacetAttribute]
[SfcElementAttribute("48")]
public class Microsoft.SqlServer.Management.Smo.SymmetricKey : NamedSmoObject {
    private bool removeProviderKey;
    private CreateInfo createInfo;
    public static string UrnSuffix { get; }
    [SfcObjectAttribute("1")]
public Database Parent { get; public set; }
    internal UserPermissionCollection Permissions { get; }
    [SfcPropertyAttribute("3072")]
public DateTime CreateDate { get; }
    [SfcPropertyAttribute("3072")]
public DateTime DateLastModified { get; }
    [SfcPropertyAttribute("3072")]
public SymmetricKeyEncryptionAlgorithm EncryptionAlgorithm { get; }
    [SfcPropertyAttribute("3072")]
public int ID { get; }
    [SfcPropertyAttribute("3072")]
public bool IsOpen { get; }
    [SfcPropertyAttribute("3072")]
public Guid KeyGuid { get; }
    [SfcPropertyAttribute("3072")]
public int KeyLength { get; }
    [SfcPropertyAttribute("3072")]
public string Owner { get; public set; }
    [SfcPropertyAttribute("1024")]
public string ProviderName { get; public set; }
    internal SymmetricKey(AbstractCollectionBase parentColl, ObjectKeyBase key, SqlSmoState state);
    public SymmetricKey(Database database, string name);
    public sealed virtual void Alter();
    public void Create(SymmetricKeyEncryption keyEncryption, SymmetricKeyEncryptionAlgorithm keyEncryptionAlgorithm);
    public void Create(SymmetricKeyEncryption keyEncryption, SymmetricKeyEncryptionAlgorithm keyEncryptionAlgorithm, string passPhrase);
    public void Create(SymmetricKeyEncryption keyEncryption, SymmetricKeyEncryptionAlgorithm keyEncryptionAlgorithm, SecureString passPhrase);
    public void Create(SymmetricKeyEncryption keyEncryption, SymmetricKeyEncryptionAlgorithm keyEncryptionAlgorithm, string passPhrase, string identityPhrase);
    public void Create(SymmetricKeyEncryption keyEncryption, SymmetricKeyEncryptionAlgorithm keyEncryptionAlgorithm, SecureString passPhrase, string identityPhrase);
    public void Create(SymmetricKeyEncryption keyEncryption, string providerAlgorithm, string providerKeyName, CreateDispositionType createDispositionType);
    private void ValidateAlgorithm(string providerAlgorithm);
    public void Create(SymmetricKeyEncryption[] keyEncryptions, SymmetricKeyEncryptionAlgorithm keyEncryptionAlgorithm);
    public void Create(SymmetricKeyEncryption[] keyEncryptions, SymmetricKeyEncryptionAlgorithm keyEncryptionAlgorithm, string passPhrase);
    public void Create(SymmetricKeyEncryption[] keyEncryptions, SymmetricKeyEncryptionAlgorithm keyEncryptionAlgorithm, SecureString passPhrase);
    public void Create(SymmetricKeyEncryption[] keyEncryptions, SymmetricKeyEncryptionAlgorithm keyEncryptionAlgorithm, string passPhrase, string identityPhrase);
    public void Create(SymmetricKeyEncryption[] keyEncryptions, SymmetricKeyEncryptionAlgorithm keyEncryptionAlgorithm, SecureString passPhrase, string identityPhrase);
    public sealed virtual void Drop();
    public void Drop(bool removeProviderKey);
    public DataTable EnumKeyEncryptions();
    public void AddKeyEncryption(SymmetricKeyEncryption keyEncryption);
    public void AddKeyEncryption(SymmetricKeyEncryption[] keyEncryptions);
    public void DropKeyEncryption(SymmetricKeyEncryption keyEncryption);
    public void DropKeyEncryption(SymmetricKeyEncryption[] keyEncryptions);
    public void OpenWithCertificate(string certificateName);
    public void OpenWithCertificate(string certificateName, string privateKeyPassword);
    public void OpenWithSymmetricKey(string symmetricKeyName);
    public void Open(string password);
    public void Close();
    public static string get_UrnSuffix();
    internal virtual void ScriptAlter(StringCollection query, ScriptingPreferences sp);
    private void CheckNullArgument(object arg, string argName);
    internal virtual void ScriptCreate(StringCollection query, ScriptingPreferences sp);
    private string ScriptSymmetricKeyEncryptions(SymmetricKeyEncryption[] keyEncryptions);
    internal virtual void ScriptDrop(StringCollection query, ScriptingPreferences sp);
    internal virtual String[] GetNonAlterableProperties();
    public Database get_Parent();
    public void set_Parent(Database value);
    internal virtual UserPermissionCollection get_Permissions();
    internal virtual SqlPropertyMetadataProvider GetPropertyMetadataProvider();
    public DateTime get_CreateDate();
    public DateTime get_DateLastModified();
    public SymmetricKeyEncryptionAlgorithm get_EncryptionAlgorithm();
    public int get_ID();
    public bool get_IsOpen();
    public Guid get_KeyGuid();
    public int get_KeyLength();
    public string get_Owner();
    public void set_Owner(string value);
    public string get_ProviderName();
    public void set_ProviderName(string value);
    public sealed virtual void Deny(ObjectPermissionSet permission, String[] granteeNames);
    public sealed virtual void Deny(ObjectPermissionSet permission, String[] granteeNames, bool cascade);
    public sealed virtual void Grant(ObjectPermissionSet permission, String[] granteeNames);
    public sealed virtual void Grant(ObjectPermissionSet permission, String[] granteeNames, bool grantGrant);
    public sealed virtual void Grant(ObjectPermissionSet permission, String[] granteeNames, bool grantGrant, string asRole);
    public sealed virtual void Revoke(ObjectPermissionSet permission, String[] granteeNames);
    public sealed virtual void Revoke(ObjectPermissionSet permission, String[] granteeNames, bool revokeGrant, bool cascade);
    public void Revoke(ObjectPermissionSet permission, String[] granteeNames, bool revokeGrant, bool cascade, string asRole);
    public sealed virtual void Deny(ObjectPermissionSet permission, string granteeName);
    public sealed virtual void Deny(ObjectPermissionSet permission, string granteeName, bool cascade);
    public sealed virtual void Grant(ObjectPermissionSet permission, string granteeName);
    public sealed virtual void Grant(ObjectPermissionSet permission, string granteeName, bool grantGrant);
    public sealed virtual void Grant(ObjectPermissionSet permission, string granteeName, bool grantGrant, string asRole);
    public sealed virtual void Revoke(ObjectPermissionSet permission, string granteeName);
    public void Revoke(ObjectPermissionSet permission, string granteeName, bool revokeGrant, bool cascade);
    public sealed virtual void Revoke(ObjectPermissionSet permission, string granteeName, bool revokeGrant, bool cascade, string asRole);
    public sealed virtual ObjectPermissionInfo[] EnumObjectPermissions();
    public sealed virtual ObjectPermissionInfo[] EnumObjectPermissions(string granteeName);
    public sealed virtual ObjectPermissionInfo[] EnumObjectPermissions(ObjectPermissionSet permissions);
    public sealed virtual ObjectPermissionInfo[] EnumObjectPermissions(string granteeName, ObjectPermissionSet permissions);
}
[DefaultMemberAttribute("Item")]
public class Microsoft.SqlServer.Management.Smo.SymmetricKeyCollection : SimpleObjectCollectionBase {
    public Database Parent { get; }
    public SymmetricKey Item { get; }
    public SymmetricKey Item { get; }
    internal SymmetricKeyCollection(SqlSmoObject parentInstance);
    public Database get_Parent();
    public SymmetricKey get_Item(int index);
    public SymmetricKey get_Item(string name);
    public void CopyTo(SymmetricKey[] array, int index);
    public SymmetricKey ItemById(int id);
    protected virtual Type GetCollectionElementType();
    internal virtual SqlSmoObject GetCollectionElementInstance(ObjectKeyBase key, SqlSmoState state);
    public void Add(SymmetricKey symmetricKey);
    internal SqlSmoObject GetObjectByName(string name);
    internal virtual ObjectKeyBase CreateKeyFromUrn(Urn urn);
}
public class Microsoft.SqlServer.Management.Smo.SymmetricKeyEncryption : object {
    private SqlSecureString objectNameOrPassword;
    public KeyEncryptionType KeyEncryptionType;
    public string ObjectNameOrPassword { get; public set; }
    public SymmetricKeyEncryption(KeyEncryptionType encryptionType, string value);
    public string get_ObjectNameOrPassword();
    public void set_ObjectNameOrPassword(string value);
}
[EvaluationModeAttribute("4")]
[PhysicalFacetAttribute]
[SfcElementAttribute("48")]
public class Microsoft.SqlServer.Management.Smo.Synonym : ScriptSchemaObjectBase {
    private SynonymEvents events;
    public static string UrnSuffix { get; }
    [SfcKeyAttribute("1")]
[SfcPropertyAttribute("7424")]
public string Name { get; public set; }
    [SfcKeyAttribute("0")]
[SfcPropertyAttribute("7424")]
[CLSCompliantAttribute("False")]
[SfcReferenceAttribute("Microsoft.SqlServer.Management.Smo.Schema", "Microsoft.SqlServer.Management.Smo.SchemaCustomResolver", "Resolve", "Mono.Cecil.CustomAttributeArgument[]")]
public string Schema { get; public set; }
    [SfcObjectAttribute("1", "0", "Microsoft.SqlServer.Management.Smo.ExtendedProperty")]
public ExtendedPropertyCollection ExtendedProperties { get; }
    [SfcObjectAttribute("1", "32")]
public Database Parent { get; public set; }
    internal UserPermissionCollection Permissions { get; }
    private bool Microsoft.SqlServer.Management.Sdk.Sfc.ISfcSupportsDesignMode.IsDesignMode { get; }
    [SfcPropertyAttribute("7424")]
public string BaseDatabase { get; public set; }
    [SfcPropertyAttribute("7424")]
[SfcReferenceAttribute("Microsoft.SqlServer.Management.Smo.StoredProcedure", "Server[@Name = '{0}']/Database[@Name = '{1}']/StoredProcedure[@Name='{2}' and @Schema='{3}']", "Mono.Cecil.CustomAttributeArgument[]")]
[SfcReferenceAttribute("Microsoft.SqlServer.Management.Smo.UserDefinedFunction", "Server[@Name = '{0}']/Database[@Name = '{1}']/UserDefinedFunction[@Name='{2}' and @Schema='{3}']", "Mono.Cecil.CustomAttributeArgument[]")]
[SfcReferenceAttribute("Microsoft.SqlServer.Management.Smo.View", "Server[@Name = '{0}']/Database[@Name = '{1}']/View[@Name='{2}' and @Schema='{3}']", "Mono.Cecil.CustomAttributeArgument[]")]
[SfcReferenceAttribute("Microsoft.SqlServer.Management.Smo.Table", "Server[@Name = '{0}']/Database[@Name = '{1}']/Table[@Name='{2}' and @Schema='{3}']", "Mono.Cecil.CustomAttributeArgument[]")]
[SfcReferenceAttribute("Microsoft.SqlServer.Management.Smo.UserDefinedAggregate", "Server[@Name = '{0}']/Database[@Name = '{1}']/UserDefinedAggregate[@Name='{2}' and @Schema='{3}']", "Mono.Cecil.CustomAttributeArgument[]")]
[CLSCompliantAttribute("False")]
public string BaseObject { get; public set; }
    [SfcPropertyAttribute("7424", "dbo")]
public string BaseSchema { get; public set; }
    [SfcPropertyAttribute("9472")]
public string BaseServer { get; public set; }
    [SfcPropertyAttribute("3072")]
public SynonymBaseType BaseType { get; }
    [SfcPropertyAttribute("3072")]
public DateTime CreateDate { get; }
    [SfcPropertyAttribute("3072")]
public DateTime DateLastModified { get; }
    [SfcPropertyAttribute("3072")]
public int ID { get; }
    [SfcPropertyAttribute("7168")]
public bool IsSchemaOwned { get; }
    [SfcPropertyAttribute("7168")]
[SfcReferenceAttribute("Microsoft.SqlServer.Management.Smo.User", "Server[@Name = '{0}']/Database[@Name = '{1}']/User[@Name = '{2}']", "Mono.Cecil.CustomAttributeArgument[]")]
[SfcReferenceAttribute("Microsoft.SqlServer.Management.Smo.DatabaseRole", "Server[@Name = '{0}']/Database[@Name = '{1}']/Role[@Name = '{2}']", "Mono.Cecil.CustomAttributeArgument[]")]
[SfcReferenceAttribute("Microsoft.SqlServer.Management.Smo.ApplicationRole", "Server[@Name = '{0}']/Database[@Name = '{1}']/ApplicationRole[@Name = '{2}']", "Mono.Cecil.CustomAttributeArgument[]")]
[CLSCompliantAttribute("False")]
public string Owner { get; public set; }
    public SynonymEvents Events { get; }
    internal Synonym(AbstractCollectionBase parentColl, ObjectKeyBase key, SqlSmoState state);
    public Synonym(Database database, string name);
    public Synonym(Database database, string name, string schema);
    public Synonym(Database database, string name, string schema, string baseServer, string baseDatabase, string baseSchema, string baseObject);
    public Synonym(Database database, string name, string baseServer, string baseDatabase, string baseSchema, string baseObject);
    public static string get_UrnSuffix();
    public virtual string get_Name();
    public virtual void set_Name(string value);
    public virtual string get_Schema();
    public virtual void set_Schema(string value);
    public sealed virtual ExtendedPropertyCollection get_ExtendedProperties();
    public sealed virtual void Drop();
    public sealed virtual void DropIfExists();
    internal virtual void ScriptDrop(StringCollection dropQuery, ScriptingPreferences sp);
    public sealed virtual void Create();
    internal virtual void ScriptCreate(StringCollection createQuery, ScriptingPreferences sp);
    public sealed virtual StringCollection Script();
    public sealed virtual StringCollection Script(ScriptingOptions scriptingOptions);
    public sealed virtual void Alter();
    internal virtual void ScriptAlter(StringCollection alterQuery, ScriptingPreferences sp);
    internal virtual PropagateInfo[] GetPropagateInfo(PropagateAction action);
    public Database get_Parent();
    public void set_Parent(Database value);
    internal virtual UserPermissionCollection get_Permissions();
    private sealed virtual override bool Microsoft.SqlServer.Management.Sdk.Sfc.ISfcSupportsDesignMode.get_IsDesignMode();
    internal virtual SqlPropertyMetadataProvider GetPropertyMetadataProvider();
    public string get_BaseDatabase();
    public void set_BaseDatabase(string value);
    public string get_BaseObject();
    public void set_BaseObject(string value);
    public string get_BaseSchema();
    public void set_BaseSchema(string value);
    public string get_BaseServer();
    public void set_BaseServer(string value);
    public SynonymBaseType get_BaseType();
    public DateTime get_CreateDate();
    public DateTime get_DateLastModified();
    public int get_ID();
    public bool get_IsSchemaOwned();
    public string get_Owner();
    public void set_Owner(string value);
    internal virtual String[] GetNonAlterableProperties();
    internal virtual object GetPropertyDefaultValue(string propname);
    public sealed virtual void Deny(ObjectPermissionSet permission, String[] granteeNames);
    public sealed virtual void Deny(ObjectPermissionSet permission, String[] granteeNames, bool cascade);
    public sealed virtual void Grant(ObjectPermissionSet permission, String[] granteeNames);
    public sealed virtual void Grant(ObjectPermissionSet permission, String[] granteeNames, bool grantGrant);
    public sealed virtual void Grant(ObjectPermissionSet permission, String[] granteeNames, bool grantGrant, string asRole);
    public sealed virtual void Revoke(ObjectPermissionSet permission, String[] granteeNames);
    public sealed virtual void Revoke(ObjectPermissionSet permission, String[] granteeNames, bool revokeGrant, bool cascade);
    public void Revoke(ObjectPermissionSet permission, String[] granteeNames, bool revokeGrant, bool cascade, string asRole);
    public sealed virtual void Deny(ObjectPermissionSet permission, string granteeName);
    public sealed virtual void Deny(ObjectPermissionSet permission, string granteeName, bool cascade);
    public sealed virtual void Grant(ObjectPermissionSet permission, string granteeName);
    public sealed virtual void Grant(ObjectPermissionSet permission, string granteeName, bool grantGrant);
    public sealed virtual void Grant(ObjectPermissionSet permission, string granteeName, bool grantGrant, string asRole);
    public sealed virtual void Revoke(ObjectPermissionSet permission, string granteeName);
    public void Revoke(ObjectPermissionSet permission, string granteeName, bool revokeGrant, bool cascade);
    public sealed virtual void Revoke(ObjectPermissionSet permission, string granteeName, bool revokeGrant, bool cascade, string asRole);
    public sealed virtual ObjectPermissionInfo[] EnumObjectPermissions();
    public sealed virtual ObjectPermissionInfo[] EnumObjectPermissions(string granteeName);
    public sealed virtual ObjectPermissionInfo[] EnumObjectPermissions(ObjectPermissionSet permissions);
    public sealed virtual ObjectPermissionInfo[] EnumObjectPermissions(string granteeName, ObjectPermissionSet permissions);
    private void Init(Database database, string schema, string name, string baseServer, string baseDatabase, string baseSchema, string baseObject);
    public SynonymEvents get_Events();
}
[DefaultMemberAttribute("Item")]
public class Microsoft.SqlServer.Management.Smo.SynonymCollection : SchemaCollectionBase {
    public Database Parent { get; }
    public Synonym Item { get; }
    public Synonym Item { get; }
    public Synonym Item { get; }
    internal SynonymCollection(SqlSmoObject parentInstance);
    public Database get_Parent();
    public Synonym get_Item(int index);
    public Synonym get_Item(string name);
    public Synonym get_Item(string name, string schema);
    public void CopyTo(Synonym[] array, int index);
    public Synonym ItemById(int id);
    protected virtual Type GetCollectionElementType();
    internal virtual SqlSmoObject GetCollectionElementInstance(ObjectKeyBase key, SqlSmoState state);
    public void Add(Synonym synonym);
    internal SqlSmoObject GetObjectByName(string name);
}
public class Microsoft.SqlServer.Management.Smo.SynonymEvents : object {
    private ObjectEventsWorker serverEventsWorker;
    private Synonym parent;
    internal SynonymEvents(Synonym parent);
    public ObjectEventSet GetEventSelection();
    public void SubscribeToEvents(ObjectEventSet events);
    public void SubscribeToEvents(ObjectEventSet events, ServerEventHandler eventHandler);
    public void UnsubscribeFromEvents(ObjectEventSet events);
    public void UnsubscribeAllEvents();
    public void StartEvents();
    public void StopEvents();
    public void add_ServerEvent(ServerEventHandler value);
    public void remove_ServerEvent(ServerEventHandler value);
    private void InitializeEvents();
}
[SfcElementAttribute("48")]
public class Microsoft.SqlServer.Management.Smo.SystemDataType : NamedSmoObject {
    public static string UrnSuffix { get; }
    [SfcKeyAttribute("0")]
[SfcPropertyAttribute("7424")]
public string Name { get; public set; }
    [SfcObjectAttribute("1")]
public Server Parent { get; }
    private bool Microsoft.SqlServer.Management.Sdk.Sfc.ISfcSupportsDesignMode.IsDesignMode { get; }
    [SfcPropertyAttribute("3072")]
public bool AllowIdentity { get; }
    [SfcPropertyAttribute("3072")]
public bool AllowLength { get; }
    [SfcPropertyAttribute("3072")]
public bool AllowNulls { get; }
    [SfcPropertyAttribute("3072")]
public string Collation { get; }
    [SfcPropertyAttribute("3072")]
public int ID { get; }
    [SfcPropertyAttribute("3072")]
public int MaximumLength { get; }
    [SfcPropertyAttribute("3072")]
public int NumericPrecision { get; }
    [SfcPropertyAttribute("3072")]
public int NumericScale { get; }
    internal SystemDataType(AbstractCollectionBase parentColl, ObjectKeyBase key, SqlSmoState state);
    public static string get_UrnSuffix();
    public virtual string get_Name();
    public virtual void set_Name(string value);
    public Server get_Parent();
    private sealed virtual override bool Microsoft.SqlServer.Management.Sdk.Sfc.ISfcSupportsDesignMode.get_IsDesignMode();
    internal virtual SqlPropertyMetadataProvider GetPropertyMetadataProvider();
    public bool get_AllowIdentity();
    public bool get_AllowLength();
    public bool get_AllowNulls();
    public string get_Collation();
    public int get_ID();
    public int get_MaximumLength();
    public int get_NumericPrecision();
    public int get_NumericScale();
}
[DefaultMemberAttribute("Item")]
public class Microsoft.SqlServer.Management.Smo.SystemDataTypeCollection : SimpleObjectCollectionBase {
    public Server Parent { get; }
    public SystemDataType Item { get; }
    public SystemDataType Item { get; }
    internal SystemDataTypeCollection(SqlSmoObject parentInstance);
    public Server get_Parent();
    public SystemDataType get_Item(int index);
    public SystemDataType get_Item(string name);
    public void CopyTo(SystemDataType[] array, int index);
    public SystemDataType ItemById(int id);
    protected virtual Type GetCollectionElementType();
    internal virtual SqlSmoObject GetCollectionElementInstance(ObjectKeyBase key, SqlSmoState state);
    public void Add(SystemDataType dataType);
    internal SqlSmoObject GetObjectByName(string name);
    internal virtual ObjectKeyBase CreateKeyFromUrn(Urn urn);
}
[SfcElementAttribute("16")]
public class Microsoft.SqlServer.Management.Smo.SystemMessage : MessageObjectBase {
    public static string UrnSuffix { get; }
    [SfcKeyAttribute("1")]
[SfcPropertyAttribute("1024")]
public int ID { get; }
    [SfcKeyAttribute("0")]
[SfcPropertyAttribute("1024")]
public string Language { get; }
    [SfcObjectAttribute("1")]
public Server Parent { get; }
    [SfcPropertyAttribute("1024")]
public bool IsLogged { get; }
    [SfcPropertyAttribute("1024")]
public int LanguageID { get; }
    [SfcPropertyAttribute("1024")]
public byte Severity { get; }
    [SfcPropertyAttribute("1024")]
public string Text { get; }
    internal SystemMessage(AbstractCollectionBase parentColl, ObjectKeyBase key, SqlSmoState state);
    public static string get_UrnSuffix();
    public int get_ID();
    public string get_Language();
    internal static String[] GetScriptFields(Type parentType, ServerVersion version, DatabaseEngineType databaseEngineType, DatabaseEngineEdition databaseEngineEdition, bool defaultTextMode);
    public Server get_Parent();
    internal virtual SqlPropertyMetadataProvider GetPropertyMetadataProvider();
    public bool get_IsLogged();
    public int get_LanguageID();
    public byte get_Severity();
    public string get_Text();
}
[DefaultMemberAttribute("Item")]
public class Microsoft.SqlServer.Management.Smo.SystemMessageCollection : MessageCollectionBase {
    public Server Parent { get; }
    public SystemMessage Item { get; }
    public SystemMessage Item { get; }
    internal SystemMessageCollection(SqlSmoObject parentInstance);
    public Server get_Parent();
    public SystemMessage get_Item(int index);
    public SystemMessage get_Item(int id, string language);
    public SystemMessage ItemByIdAndLanguage(int id, string language);
    public SystemMessage ItemByIdAndLanguageId(int id, int languageId);
    protected virtual Type GetCollectionElementType();
    internal virtual SqlSmoObject GetCollectionElementInstance(ObjectKeyBase key, SqlSmoState state);
    public void CopyTo(SystemMessage[] array, int index);
}
[EvaluationModeAttribute("4")]
[PhysicalFacetAttribute]
[SfcElementAttribute("48")]
public class Microsoft.SqlServer.Management.Smo.Table : TableViewBase {
    private CheckCollection m_Checks;
    private EdgeConstraintCollection m_EdgeConstraints;
    private ResumableIndexCollection m_ResumableIndexes;
    private bool m_OnlineHeapOperation;
    private int m_lowPriorityMaxDuration;
    private bool m_DataConsistencyCheckForSystemVersionedTable;
    private SystemTimePeriodInfo m_systemTimePeriodInfo;
    private AbortAfterWait m_lowPriorityAbortAfterWait;
    private int m_MaximumDegreeOfParallelism;
    private ForeignKeyCollection m_ForeignKeys;
    private PhysicalPartitionCollection m_PhysicalPartitions;
    private PartitionSchemeParameterCollection m_PartitionSchemeParameters;
    private List`1<Index> indexPropagationList;
    private List`1<SqlSmoObject> embeddedForeignKeyChecksList;
    private XSchemaProps _XSchema;
    private XRuntimeProps _XRuntime;
    private TableEvents events;
    public static string UrnSuffix { get; }
    [SfcObjectAttribute("1", "0", "Microsoft.SqlServer.Management.Smo.Index", "96")]
public IndexCollection Indexes { get; }
    [SfcObjectAttribute("1", "0", "Microsoft.SqlServer.Management.Smo.Check", "32")]
public CheckCollection Checks { get; }
    [SfcObjectAttribute("1", "0", "Microsoft.SqlServer.Management.Smo.EdgeConstraint", "32")]
public EdgeConstraintCollection EdgeConstraints { get; }
    [SfcObjectAttribute("1", "0", "Microsoft.SqlServer.Management.Smo.ResumableIndex", "32")]
public ResumableIndexCollection ResumableIndexes { get; }
    public bool OnlineHeapOperation { get; public set; }
    public int LowPriorityMaxDuration { get; public set; }
    public bool DataConsistencyCheck { get; public set; }
    public AbortAfterWait LowPriorityAbortAfterWait { get; public set; }
    public int MaximumDegreeOfParallelism { get; public set; }
    [SfcPropertyAttribute("3072")]
public bool IsNode { get; public set; }
    [SfcPropertyAttribute("3072")]
public bool IsEdge { get; public set; }
    [SfcObjectAttribute("1", "0", "Microsoft.SqlServer.Management.Smo.ForeignKey", "32")]
public ForeignKeyCollection ForeignKeys { get; }
    [SfcObjectAttribute("1", "1", "Microsoft.SqlServer.Management.Smo.PhysicalPartition")]
public PhysicalPartitionCollection PhysicalPartitions { get; }
    [SfcObjectAttribute("1", "0", "Microsoft.SqlServer.Management.Smo.PartitionSchemeParameter")]
public PartitionSchemeParameterCollection PartitionSchemeParameters { get; }
    [SfcPropertyAttribute("1024")]
public double RowCountAsDouble { get; }
    [SfcPropertyAttribute("11296")]
public bool IsVarDecimalStorageFormatEnabled { get; public set; }
    [SfcObjectAttribute("1", "32")]
public Database Parent { get; public set; }
    internal UserPermissionCollection Permissions { get; }
    private bool Microsoft.SqlServer.Management.Sdk.Sfc.ISfcSupportsDesignMode.IsDesignMode { get; }
    private XSchemaProps XSchema { get; }
    private XRuntimeProps XRuntime { get; }
    [SfcPropertyAttribute("7424")]
public bool AnsiNullsStatus { get; public set; }
    [SfcPropertyAttribute("11264")]
public bool ChangeTrackingEnabled { get; public set; }
    [SfcPropertyAttribute("3072")]
public DateTime CreateDate { get; }
    [SfcPropertyAttribute("1056")]
public bool DataRetentionEnabled { get; public set; }
    [SfcPropertyAttribute("1056")]
public string DataRetentionFilterColumnName { get; public set; }
    [SfcPropertyAttribute("1056")]
public int DataRetentionPeriod { get; public set; }
    [SfcPropertyAttribute("1056")]
public DataRetentionPeriodUnit DataRetentionPeriodUnit { get; public set; }
    [SfcPropertyAttribute("3104")]
[SfcReferenceAttribute("Microsoft.SqlServer.Management.Smo.ExternalDataSource", "Server[@Name = '{0}']/Database[@Name = '{1}']/ExternalDataSource[@Name='{2}']", "Mono.Cecil.CustomAttributeArgument[]")]
[CLSCompliantAttribute("False")]
public string DataSourceName { get; public set; }
    [SfcPropertyAttribute("1056")]
public double DataSpaceUsed { get; }
    [SfcPropertyAttribute("3072")]
public DateTime DateLastModified { get; }
    [SfcPropertyAttribute("3328")]
public DurabilityType Durability { get; public set; }
    [SfcPropertyAttribute("3104")]
public ExternalTableDistributionType ExternalTableDistribution { get; public set; }
    [SfcPropertyAttribute("3072")]
public bool FakeSystemTable { get; }
    [SfcPropertyAttribute("1056")]
[SfcReferenceAttribute("Microsoft.SqlServer.Management.Smo.ExternalFileFormat", "Server[@Name = '{0}']/Database[@Name = '{1}']/ExternalFileFormat[@Name='{2}']", "Mono.Cecil.CustomAttributeArgument[]")]
[CLSCompliantAttribute("False")]
public string FileFormatName { get; public set; }
    [SfcPropertyAttribute("3360")]
public string FileGroup { get; public set; }
    [SfcPropertyAttribute("3072")]
public string FileStreamFileGroup { get; public set; }
    [SfcPropertyAttribute("3072")]
[SfcReferenceAttribute("Microsoft.SqlServer.Management.Smo.PartitionScheme", "Server[@Name='{0}']/Database[@Name='{1}']/PartitionScheme[@Name='{2}']", "Mono.Cecil.CustomAttributeArgument[]")]
[CLSCompliantAttribute("False")]
public string FileStreamPartitionScheme { get; public set; }
    [SfcPropertyAttribute("3072")]
public string FileTableDirectoryName { get; public set; }
    [SfcPropertyAttribute("3328")]
public string FileTableNameColumnCollation { get; public set; }
    [SfcPropertyAttribute("3072")]
public bool FileTableNamespaceEnabled { get; public set; }
    [SfcPropertyAttribute("3072")]
public bool HasAfterTrigger { get; }
    [SfcPropertyAttribute("3104")]
public bool HasClassifiedColumn { get; }
    [SfcPropertyAttribute("3072")]
public bool HasClusteredColumnStoreIndex { get; }
    [SfcPropertyAttribute("3072")]
public bool HasClusteredIndex { get; }
    [SfcPropertyAttribute("3104", "false")]
public bool HasCompressedPartitions { get; }
    [SfcPropertyAttribute("3072")]
public bool HasDeleteTrigger { get; }
    [SfcPropertyAttribute("3072")]
public bool HasHeapIndex { get; }
    [SfcPropertyAttribute("3072")]
public bool HasIndex { get; }
    [SfcPropertyAttribute("3072")]
public bool HasInsertTrigger { get; }
    [SfcPropertyAttribute("3072")]
public bool HasInsteadOfTrigger { get; }
    [SfcPropertyAttribute("3072")]
public bool HasNonClusteredColumnStoreIndex { get; }
    [SfcPropertyAttribute("3072")]
public bool HasNonClusteredIndex { get; }
    [SfcPropertyAttribute("3072")]
public bool HasPrimaryClusteredIndex { get; }
    [SfcPropertyAttribute("3104")]
public bool HasSparseColumn { get; }
    [SfcPropertyAttribute("3072")]
public bool HasSpatialData { get; }
    [SfcPropertyAttribute("3072")]
public bool HasSystemTimePeriod { get; }
    [SfcPropertyAttribute("3072")]
public bool HasUpdateTrigger { get; }
    [SfcPropertyAttribute("1056", "false")]
public bool HasXmlCompressedPartitions { get; }
    [SfcPropertyAttribute("3072")]
public bool HasXmlData { get; }
    [SfcPropertyAttribute("3072")]
public bool HasXmlIndex { get; }
    [SfcPropertyAttribute("3072")]
public int HistoryTableID { get; }
    [SfcPropertyAttribute("3072")]
public string HistoryTableName { get; public set; }
    [SfcPropertyAttribute("3072")]
public string HistoryTableSchema { get; public set; }
    [SfcPropertyAttribute("3072")]
public int ID { get; }
    [SfcPropertyAttribute("1056")]
public double IndexSpaceUsed { get; }
    [SfcPropertyAttribute("3072")]
public bool IsDroppedLedgerTable { get; }
    [SfcPropertyAttribute("3072")]
public bool IsExternal { get; public set; }
    [SfcPropertyAttribute("3328")]
public bool IsFileTable { get; public set; }
    [SfcPropertyAttribute("3072")]
public bool IsIndexable { get; }
    [SfcPropertyAttribute("3328")]
public bool IsLedger { get; public set; }
    [SfcPropertyAttribute("3328")]
public bool IsMemoryOptimized { get; public set; }
    [SfcPropertyAttribute("3072")]
public bool IsPartitioned { get; }
    [SfcPropertyAttribute("7168")]
public bool IsSchemaOwned { get; }
    [SfcPropertyAttribute("3072")]
public bool IsSystemObject { get; }
    [SfcPropertyAttribute("3072")]
public bool IsSystemVersioned { get; public set; }
    [SfcPropertyAttribute("3328")]
public LedgerTableType LedgerType { get; public set; }
    [SfcPropertyAttribute("3360")]
public string LedgerViewName { get; public set; }
    [SfcPropertyAttribute("3360")]
public string LedgerViewOperationTypeColumnName { get; public set; }
    [SfcPropertyAttribute("3360")]
public string LedgerViewOperationTypeDescColumnName { get; public set; }
    [SfcPropertyAttribute("3360")]
public string LedgerViewSchema { get; public set; }
    [SfcPropertyAttribute("3360")]
public string LedgerViewSequenceNumberColumnName { get; public set; }
    [SfcPropertyAttribute("3360")]
public string LedgerViewTransactionIdColumnName { get; public set; }
    [SfcPropertyAttribute("1056")]
public string Location { get; public set; }
    [SfcPropertyAttribute("11264")]
public LockEscalationType LockEscalation { get; public set; }
    [SfcPropertyAttribute("7168")]
[SfcReferenceAttribute("Microsoft.SqlServer.Management.Smo.User", "Server[@Name = '{0}']/Database[@Name = '{1}']/User[@Name = '{2}']", "Mono.Cecil.CustomAttributeArgument[]")]
[SfcReferenceAttribute("Microsoft.SqlServer.Management.Smo.DatabaseRole", "Server[@Name = '{0}']/Database[@Name = '{1}']/Role[@Name = '{2}']", "Mono.Cecil.CustomAttributeArgument[]")]
[SfcReferenceAttribute("Microsoft.SqlServer.Management.Smo.ApplicationRole", "Server[@Name = '{0}']/Database[@Name = '{1}']/ApplicationRole[@Name = '{2}']", "Mono.Cecil.CustomAttributeArgument[]")]
[CLSCompliantAttribute("False")]
public string Owner { get; public set; }
    [SfcPropertyAttribute("3328")]
[SfcReferenceAttribute("Microsoft.SqlServer.Management.Smo.PartitionScheme", "Server[@Name='{0}']/Database[@Name='{1}']/PartitionScheme[@Name='{2}']", "Mono.Cecil.CustomAttributeArgument[]")]
[CLSCompliantAttribute("False")]
public string PartitionScheme { get; public set; }
    [SfcPropertyAttribute("7424")]
public bool QuotedIdentifierStatus { get; public set; }
    [SfcPropertyAttribute("1056")]
public double RejectSampleValue { get; public set; }
    [SfcPropertyAttribute("1056")]
public ExternalTableRejectType RejectType { get; public set; }
    [SfcPropertyAttribute("1056")]
public double RejectValue { get; public set; }
    [SfcPropertyAttribute("1024")]
public RemoteDataArchiveMigrationState RemoteDataArchiveDataMigrationState { get; public set; }
    [SfcPropertyAttribute("1024")]
public bool RemoteDataArchiveEnabled { get; public set; }
    [SfcPropertyAttribute("1024")]
public string RemoteDataArchiveFilterPredicate { get; public set; }
    [SfcPropertyAttribute("3104")]
public string RemoteObjectName { get; public set; }
    [SfcPropertyAttribute("3104")]
public string RemoteSchemaName { get; public set; }
    [SfcPropertyAttribute("1280")]
public string RemoteTableName { get; public set; }
    [SfcPropertyAttribute("1280")]
public bool RemoteTableProvisioned { get; public set; }
    [SfcPropertyAttribute("3072")]
public bool Replicated { get; }
    [SfcPropertyAttribute("3104")]
public long RowCount { get; }
    [SfcPropertyAttribute("3104")]
public string ShardingColumnName { get; public set; }
    [SfcPropertyAttribute("3072")]
public string SystemTimePeriodEndColumn { get; }
    [SfcPropertyAttribute("3072")]
public string SystemTimePeriodStartColumn { get; }
    [SfcPropertyAttribute("3072")]
public TableTemporalType TemporalType { get; }
    [SfcPropertyAttribute("3328")]
public string TextFileGroup { get; public set; }
    [SfcPropertyAttribute("11264")]
public bool TrackColumnsUpdatedEnabled { get; public set; }
    [SfcPropertyAttribute("2080")]
[SfcReferenceAttribute("Microsoft.SqlServer.Management.Smo.ExternalFileFormat", "Server[@Name = '{0}']/Database[@Name = '{1}']/ExternalFileFormat[@Name='{2}']", "Mono.Cecil.CustomAttributeArgument[]")]
[CLSCompliantAttribute("False")]
public string FileFormatNameOd { get; }
    [SfcPropertyAttribute("2048")]
public int HistoryRetentionPeriod { get; public set; }
    [SfcPropertyAttribute("2048")]
public TemporalHistoryRetentionPeriodUnit HistoryRetentionPeriodUnit { get; public set; }
    [SfcPropertyAttribute("2080")]
public string LocationOd { get; }
    [SfcPropertyAttribute]
public DwTableDistributionType DwTableDistribution { get; public set; }
    [SfcPropertyAttribute("288")]
public string RejectedRowLocation { get; public set; }
    public TableEvents Events { get; }
    internal Table(AbstractCollectionBase parentColl, ObjectKeyBase key, SqlSmoState state);
    public Table(Database database, string name);
    public Table(Database database, string name, string schema);
    public void ChangeSchema(string newSchema);
    private void Init();
    public static string get_UrnSuffix();
    public virtual IndexCollection get_Indexes();
    public CheckCollection get_Checks();
    public EdgeConstraintCollection get_EdgeConstraints();
    public ResumableIndexCollection get_ResumableIndexes();
    public bool get_OnlineHeapOperation();
    public void set_OnlineHeapOperation(bool value);
    public int get_LowPriorityMaxDuration();
    public void set_LowPriorityMaxDuration(int value);
    public bool get_DataConsistencyCheck();
    public void set_DataConsistencyCheck(bool value);
    public AbortAfterWait get_LowPriorityAbortAfterWait();
    public void set_LowPriorityAbortAfterWait(AbortAfterWait value);
    public int get_MaximumDegreeOfParallelism();
    public void set_MaximumDegreeOfParallelism(int value);
    public bool get_IsNode();
    public void set_IsNode(bool value);
    public bool get_IsEdge();
    public void set_IsEdge(bool value);
    public ForeignKeyCollection get_ForeignKeys();
    public PhysicalPartitionCollection get_PhysicalPartitions();
    public PartitionSchemeParameterCollection get_PartitionSchemeParameters();
    public string GetFileTableNamespacePath();
    internal bool IsDirty(string property);
    public sealed virtual void Create();
    internal virtual void ValidateName(string name);
    internal void AddToIndexPropagationList(Index i);
    internal void AddToEmbeddedForeignKeyChecksList(SqlSmoObject fkck);
    internal IEnumerable`1<string> ScriptDataInternal(ScriptingPreferences sp);
    internal StringCollection ScriptDropData(ScriptingPreferences sp);
    public IEnumerable`1<string> EnumScript();
    public IEnumerable`1<string> EnumScript(ScriptingOptions scriptingOptions);
    public void InitPhysicalPartitions();
    public void InitIndexes();
    public void InitColumns();
    internal virtual void ScriptCreate(StringCollection queries, ScriptingPreferences sp);
    private void GetMemoryOptimizedTableCreationScript(ScriptingPreferences sp, StringBuilder sb);
    private void GetExternalTableCreationScript(ScriptingPreferences sp, StringBuilder sb);
    private void GetSqlDwTableCreationScript(ScriptingPreferences sp, StringBuilder sb);
    private void ScriptUpdateStatistics(ScriptingPreferences sp, StringCollection scqueries, StringBuilder sb);
    internal void ScriptBindings(StringCollection scqueries, ScriptingPreferences sp);
    private bool IsCompressionCodeRequired(bool bAlter);
    private bool IsXmlCompressionCodeRequired(bool bAlter);
    private void GetTableCreationScript(ScriptingPreferences sp, StringBuilder sb);
    private void ScriptPeriodForSystemTime(StringBuilder sb);
    private void GetFileTableCreationScript(ScriptingPreferences sp, StringBuilder sb);
    private void ScriptChecksAndForeignKeys(ScriptingPreferences sp, StringBuilder sb);
    private bool HasClusteredPrimaryOrUniqueKey(ScriptingPreferences sp);
    private void GetTableCreationScriptWithAnsiPadding(ScriptingPreferences sp, StringBuilder sb, bool initialPadding);
    private void GenerateWithOptionScript(StringBuilder sb, ScriptingPreferences sp);
    private string GenerateSystemVersioningWithClauseContent(ScriptingPreferences sp);
    private string GenerateLedgerOptionsWithClauseContent(ScriptingPreferences sp);
    private void GenerateStretchHeapWithClause(StringBuilder sb, ScriptingPreferences sp);
    private bool FetchFileTableIndexNames(String& pkIndex, String& stream_idIndex, String& fullpathIndex, bool systemNameAllowed);
    private void GenerateTextFileGroupScript(StringBuilder sb, ScriptingPreferences sp);
    private void GenerateGraphScript(StringBuilder sb, ScriptingPreferences sp);
    protected virtual void PostCreate();
    private void ProcessExternalTableOptionalProperties(StringBuilder script, ScriptingPreferences sp);
    private void ValidateLocationProperties(string locationPropertyName, string sqlString, ScriptingPreferences sp, StringBuilder script);
    private void ProcessSqlDwTableProperties(StringBuilder script, ScriptingPreferences sp);
    private void ValidateOptionalProperty(string propertyName, string sqlString, List`1<T> defaultValues, StringBuilder fileFormatOptions, ScriptingPreferences sp, bool bracketize, TypeConverter typeConverter, bool isNullable);
    private void AddPropertyToScript(string propertyValue, string sqlString, StringBuilder script, bool formatted);
    private bool IsPropertyDefaultValue(Property prop, T value, List`1<T> defaultValues);
    private Nullable`1<bool> GetTableAnsiPadded();
    private Nullable`1<bool> GetColumnPadding(Column c);
    internal bool HasTextimageColumn(ScriptingPreferences sp);
    internal bool HasMultiplePaddings();
    internal bool IsPaddingType(Column col);
    internal static void ScriptTableInternal(ScriptingPreferences sp, StringBuilder sb, ColumnCollection columns, ICollection indexes, bool isEdgeTable);
    private static void ScriptColumns(ScriptingPreferences sp, StringBuilder sb, ColumnCollection columns, bool isEdgeTable);
    private static bool ShouldEmitColumnListParenthesis(bool isEdgeTable, ColumnCollection columns);
    private static void GenerateMemoryOptimizedIndexes(StringBuilder sb, ScriptingPreferences sp, ICollection indexes);
    private static void ScriptSqlDwClusteredIndexes(StringBuilder sb, ScriptingPreferences sp, ICollection indexes);
    private static void ScriptSqlDwOrderedClusteredColumnstoreIndexes(string indexTypeName, StringBuilder script, List`1<IndexedColumn> indexedColumns);
    private static void GeneratePkUkInCreateTable(StringBuilder sb, ScriptingPreferences sp, ICollection indexes, bool embedded);
    private static bool IsColumnstoreIndex(Index index);
    private static bool VerifyIndexType(Index index, IndexType expectedIndexType);
    public sealed virtual void Drop();
    public sealed virtual void DropIfExists();
    internal virtual void ScriptDrop(StringCollection queries, ScriptingPreferences sp);
    public sealed virtual void Alter();
    public void Rebuild(int rebuildPartitionNumber);
    private StringCollection InsertUseDbIfNeeded(StringCollection queries);
    public void Rebuild();
    private void ScriptRebuildOptions(StringBuilder rebuildOptions, ScriptingPreferences sp);
    private void ScriptWaitAtLowPriorityIndexOption(StringBuilder options);
    private void GenerateDataAndXmlCompressionAlterScript(StringCollection alterQuery, ScriptingPreferences sp);
    internal virtual void ScriptAlter(StringCollection alterQuery, ScriptingPreferences sp);
    protected virtual void PostAlter();
    public void AlterWithNoCheck();
    public sealed virtual void Rename(string newname);
    internal virtual void ScriptRename(StringCollection renameQuery, ScriptingPreferences sp, string newName);
    protected virtual void MarkDropped();
    public StringCollection CheckIdentityValue();
    public StringCollection CheckTable();
    public StringCollection CheckTableDataOnly();
    public DataTable EnumLastStatisticsUpdates();
    public DataTable EnumLastStatisticsUpdates(string statname);
    public DataTable EnumForeignKeys();
    public void RebuildIndexes(int fillFactor);
    public void RecalculateSpaceUsage();
    public void TruncateData();
    public void TruncateData(int partitionNumber);
    public void DisableAllIndexes();
    public void EnableAllIndexes(IndexEnableAction action);
    public void AddPeriodForSystemTime(string periodStartColumn, string periodEndColumn, bool addPeriod);
    public void DropPeriodForSystemTime();
    internal virtual PropagateInfo[] GetPropagateInfo(PropagateAction action);
    private PropagateInfo[] GetPropagateInfoImpl(PropagateAction action, bool forDiscovery);
    internal virtual PropagateInfo[] GetPropagateInfoForDiscovery(PropagateAction action);
    public double get_RowCountAsDouble();
    public void SwitchPartition(int sourcePartitionNumber, Table targetTable, int targetPartitionNumber);
    public void SwitchPartition(int sourcePartitionNumber, Table targetTable);
    public void SwitchPartition(Table targetTable, int targetPartitionNumber);
    public void SwitchPartition(Table targetTable);
    public RemoteTableMigrationStatistics GetRemoteTableMigrationStatistics();
    private StringBuilder ScriptDataRetention(ScriptingPreferences sp);
    private void SwitchPartitionImpl(int sourcePartitionNumber, Table targetTable, int targetPartitionNumber);
    private void ValidateExternalTableOptionalProperties(ScriptingPreferences sp);
    private bool CheckIsExternalTable();
    private bool CheckIsSqlDwTable();
    private bool CheckIsMemoryOptimizedTable();
    internal static void CheckTableName(string tableName);
    internal static String[] GetScriptFields(Type parentType, ServerVersion version, DatabaseEngineType databaseEngineType, DatabaseEngineEdition databaseEngineEdition, bool defaultTextMode);
    internal static String[] GetScriptFields2(Type parentType, ServerVersion version, DatabaseEngineType databaseEngineType, DatabaseEngineEdition databaseEngineEdition, bool defaultTextMode, ScriptingPreferences sp);
    public bool get_IsVarDecimalStorageFormatEnabled();
    public void set_IsVarDecimalStorageFormatEnabled(bool value);
    private void ScriptVardecimalCompression(StringCollection query, ScriptingPreferences sp, bool forCreate);
    private void ScriptAlterFileTableProp(StringCollection query, ScriptingPreferences sp);
    private void ScriptChangeTracking(StringCollection query, ScriptingPreferences sp);
    private void ScriptSystemVersioning(StringCollection query, ScriptingPreferences sp);
    private void ScriptSystemTimePeriodForAlter(StringCollection query, ScriptingPreferences sp);
    private void ScriptRemoteDataArchive(StringCollection queries, ScriptingPreferences sp);
    internal void ScriptLockGranularity(StringCollection scqueries, LockEscalationType lockStatus, ScriptingPreferences sp, bool scriptTableGranularity);
    internal void ScriptLockEscalationSettings(StringCollection scqueries, ScriptingPreferences sp);
    internal virtual void ScriptCreateInternal(StringCollection query, ScriptingPreferences sp);
    private void ValidateExternalTable();
    private void ValidateIndexes();
    private void ValidateExternalTableRequiredStringProperty(string propertyName, ScriptingPreferences sp);
    private void ValidateSystemTimeTemporal();
    public Database get_Parent();
    public void set_Parent(Database value);
    internal virtual UserPermissionCollection get_Permissions();
    private sealed virtual override bool Microsoft.SqlServer.Management.Sdk.Sfc.ISfcSupportsDesignMode.get_IsDesignMode();
    internal virtual SqlPropertyMetadataProvider GetPropertyMetadataProvider();
    private sealed virtual override object Microsoft.SqlServer.Management.Smo.IPropertyDataDispatch.GetPropertyValue(int index);
    private sealed virtual override void Microsoft.SqlServer.Management.Smo.IPropertyDataDispatch.SetPropertyValue(int index, object value);
    private XSchemaProps get_XSchema();
    private XRuntimeProps get_XRuntime();
    public sealed virtual bool get_AnsiNullsStatus();
    public sealed virtual void set_AnsiNullsStatus(bool value);
    public sealed virtual bool get_ChangeTrackingEnabled();
    public sealed virtual void set_ChangeTrackingEnabled(bool value);
    public sealed virtual DateTime get_CreateDate();
    public bool get_DataRetentionEnabled();
    public void set_DataRetentionEnabled(bool value);
    public string get_DataRetentionFilterColumnName();
    public void set_DataRetentionFilterColumnName(string value);
    public int get_DataRetentionPeriod();
    public void set_DataRetentionPeriod(int value);
    public DataRetentionPeriodUnit get_DataRetentionPeriodUnit();
    public void set_DataRetentionPeriodUnit(DataRetentionPeriodUnit value);
    public string get_DataSourceName();
    public void set_DataSourceName(string value);
    public double get_DataSpaceUsed();
    public DateTime get_DateLastModified();
    public DurabilityType get_Durability();
    public void set_Durability(DurabilityType value);
    public ExternalTableDistributionType get_ExternalTableDistribution();
    public void set_ExternalTableDistribution(ExternalTableDistributionType value);
    public sealed virtual bool get_FakeSystemTable();
    public string get_FileFormatName();
    public void set_FileFormatName(string value);
    public string get_FileGroup();
    public void set_FileGroup(string value);
    public string get_FileStreamFileGroup();
    public void set_FileStreamFileGroup(string value);
    public string get_FileStreamPartitionScheme();
    public void set_FileStreamPartitionScheme(string value);
    public string get_FileTableDirectoryName();
    public void set_FileTableDirectoryName(string value);
    public string get_FileTableNameColumnCollation();
    public void set_FileTableNameColumnCollation(string value);
    public bool get_FileTableNamespaceEnabled();
    public void set_FileTableNamespaceEnabled(bool value);
    public bool get_HasAfterTrigger();
    public bool get_HasClassifiedColumn();
    public bool get_HasClusteredColumnStoreIndex();
    public bool get_HasClusteredIndex();
    public bool get_HasCompressedPartitions();
    public bool get_HasDeleteTrigger();
    public bool get_HasHeapIndex();
    public bool get_HasIndex();
    public bool get_HasInsertTrigger();
    public bool get_HasInsteadOfTrigger();
    public bool get_HasNonClusteredColumnStoreIndex();
    public bool get_HasNonClusteredIndex();
    public bool get_HasPrimaryClusteredIndex();
    public bool get_HasSparseColumn();
    public bool get_HasSpatialData();
    public bool get_HasSystemTimePeriod();
    public bool get_HasUpdateTrigger();
    public bool get_HasXmlCompressedPartitions();
    public bool get_HasXmlData();
    public bool get_HasXmlIndex();
    public int get_HistoryTableID();
    public string get_HistoryTableName();
    public void set_HistoryTableName(string value);
    public string get_HistoryTableSchema();
    public void set_HistoryTableSchema(string value);
    public sealed virtual int get_ID();
    public double get_IndexSpaceUsed();
    public bool get_IsDroppedLedgerTable();
    public bool get_IsExternal();
    public void set_IsExternal(bool value);
    public bool get_IsFileTable();
    public void set_IsFileTable(bool value);
    public bool get_IsIndexable();
    public bool get_IsLedger();
    public void set_IsLedger(bool value);
    public bool get_IsMemoryOptimized();
    public void set_IsMemoryOptimized(bool value);
    public bool get_IsPartitioned();
    public sealed virtual bool get_IsSchemaOwned();
    public sealed virtual bool get_IsSystemObject();
    public bool get_IsSystemVersioned();
    public void set_IsSystemVersioned(bool value);
    public LedgerTableType get_LedgerType();
    public void set_LedgerType(LedgerTableType value);
    public string get_LedgerViewName();
    public void set_LedgerViewName(string value);
    public string get_LedgerViewOperationTypeColumnName();
    public void set_LedgerViewOperationTypeColumnName(string value);
    public string get_LedgerViewOperationTypeDescColumnName();
    public void set_LedgerViewOperationTypeDescColumnName(string value);
    public string get_LedgerViewSchema();
    public void set_LedgerViewSchema(string value);
    public string get_LedgerViewSequenceNumberColumnName();
    public void set_LedgerViewSequenceNumberColumnName(string value);
    public string get_LedgerViewTransactionIdColumnName();
    public void set_LedgerViewTransactionIdColumnName(string value);
    public string get_Location();
    public void set_Location(string value);
    public sealed virtual LockEscalationType get_LockEscalation();
    public sealed virtual void set_LockEscalation(LockEscalationType value);
    public sealed virtual string get_Owner();
    public sealed virtual void set_Owner(string value);
    public string get_PartitionScheme();
    public void set_PartitionScheme(string value);
    public sealed virtual bool get_QuotedIdentifierStatus();
    public void set_QuotedIdentifierStatus(bool value);
    public double get_RejectSampleValue();
    public void set_RejectSampleValue(double value);
    public ExternalTableRejectType get_RejectType();
    public void set_RejectType(ExternalTableRejectType value);
    public double get_RejectValue();
    public void set_RejectValue(double value);
    public sealed virtual RemoteDataArchiveMigrationState get_RemoteDataArchiveDataMigrationState();
    public sealed virtual void set_RemoteDataArchiveDataMigrationState(RemoteDataArchiveMigrationState value);
    public sealed virtual bool get_RemoteDataArchiveEnabled();
    public sealed virtual void set_RemoteDataArchiveEnabled(bool value);
    public string get_RemoteDataArchiveFilterPredicate();
    public void set_RemoteDataArchiveFilterPredicate(string value);
    public string get_RemoteObjectName();
    public void set_RemoteObjectName(string value);
    public string get_RemoteSchemaName();
    public void set_RemoteSchemaName(string value);
    public sealed virtual string get_RemoteTableName();
    public void set_RemoteTableName(string value);
    public sealed virtual bool get_RemoteTableProvisioned();
    public void set_RemoteTableProvisioned(bool value);
    public sealed virtual bool get_Replicated();
    public long get_RowCount();
    public string get_ShardingColumnName();
    public void set_ShardingColumnName(string value);
    public string get_SystemTimePeriodEndColumn();
    public string get_SystemTimePeriodStartColumn();
    public TableTemporalType get_TemporalType();
    public string get_TextFileGroup();
    public void set_TextFileGroup(string value);
    public sealed virtual bool get_TrackColumnsUpdatedEnabled();
    public sealed virtual void set_TrackColumnsUpdatedEnabled(bool value);
    public string get_FileFormatNameOd();
    public int get_HistoryRetentionPeriod();
    public void set_HistoryRetentionPeriod(int value);
    public TemporalHistoryRetentionPeriodUnit get_HistoryRetentionPeriodUnit();
    public void set_HistoryRetentionPeriodUnit(TemporalHistoryRetentionPeriodUnit value);
    public string get_LocationOd();
    public DwTableDistributionType get_DwTableDistribution();
    public void set_DwTableDistribution(DwTableDistributionType value);
    public string get_RejectedRowLocation();
    public void set_RejectedRowLocation(string value);
    internal virtual String[] GetNonAlterableProperties();
    internal virtual object GetPropertyDefaultValue(string propname);
    public sealed virtual void Deny(ObjectPermissionSet permission, String[] granteeNames);
    public sealed virtual void Deny(ObjectPermissionSet permission, String[] granteeNames, bool cascade);
    public sealed virtual void Grant(ObjectPermissionSet permission, String[] granteeNames);
    public sealed virtual void Grant(ObjectPermissionSet permission, String[] granteeNames, bool grantGrant);
    public sealed virtual void Grant(ObjectPermissionSet permission, String[] granteeNames, bool grantGrant, string asRole);
    public sealed virtual void Revoke(ObjectPermissionSet permission, String[] granteeNames);
    public sealed virtual void Revoke(ObjectPermissionSet permission, String[] granteeNames, bool revokeGrant, bool cascade);
    public void Revoke(ObjectPermissionSet permission, String[] granteeNames, bool revokeGrant, bool cascade, string asRole);
    public sealed virtual void Deny(ObjectPermissionSet permission, string granteeName);
    public sealed virtual void Deny(ObjectPermissionSet permission, string granteeName, bool cascade);
    public sealed virtual void Grant(ObjectPermissionSet permission, string granteeName);
    public sealed virtual void Grant(ObjectPermissionSet permission, string granteeName, bool grantGrant);
    public sealed virtual void Grant(ObjectPermissionSet permission, string granteeName, bool grantGrant, string asRole);
    public sealed virtual void Revoke(ObjectPermissionSet permission, string granteeName);
    public void Revoke(ObjectPermissionSet permission, string granteeName, bool revokeGrant, bool cascade);
    public sealed virtual void Revoke(ObjectPermissionSet permission, string granteeName, bool revokeGrant, bool cascade, string asRole);
    public sealed virtual ObjectPermissionInfo[] EnumObjectPermissions();
    public sealed virtual ObjectPermissionInfo[] EnumObjectPermissions(string granteeName);
    public sealed virtual ObjectPermissionInfo[] EnumObjectPermissions(ObjectPermissionSet permissions);
    public sealed virtual ObjectPermissionInfo[] EnumObjectPermissions(string granteeName, ObjectPermissionSet permissions);
    public sealed virtual void Deny(ObjectPermissionSet permission, String[] granteeNames, String[] columnNames);
    public sealed virtual void Deny(ObjectPermissionSet permission, String[] granteeNames, String[] columnNames, bool cascade);
    public sealed virtual void Grant(ObjectPermissionSet permission, String[] granteeNames, String[] columnNames);
    public sealed virtual void Grant(ObjectPermissionSet permission, String[] granteeNames, String[] columnNames, bool grantGrant);
    public sealed virtual void Grant(ObjectPermissionSet permission, String[] granteeNames, String[] columnNames, bool grantGrant, string asRole);
    public sealed virtual void Revoke(ObjectPermissionSet permission, String[] granteeNames, String[] columnNames);
    public sealed virtual void Revoke(ObjectPermissionSet permission, String[] granteeNames, String[] columnNames, bool revokeGrant, bool cascade);
    public sealed virtual void Revoke(ObjectPermissionSet permission, String[] granteeNames, String[] columnNames, bool revokeGrant, bool cascade, string asRole);
    public sealed virtual void Deny(ObjectPermissionSet permission, string granteeName, String[] columnNames);
    public sealed virtual void Deny(ObjectPermissionSet permission, string granteeName, String[] columnNames, bool cascade);
    public sealed virtual void Grant(ObjectPermissionSet permission, string granteeName, String[] columnNames);
    public sealed virtual void Grant(ObjectPermissionSet permission, string granteeName, String[] columnNames, bool grantGrant);
    public sealed virtual void Grant(ObjectPermissionSet permission, string granteeName, String[] columnNames, bool grantGrant, string asRole);
    public sealed virtual void Revoke(ObjectPermissionSet permission, string granteeName, String[] columnNames);
    public sealed virtual void Revoke(ObjectPermissionSet permission, string granteeName, String[] columnNames, bool revokeGrant, bool cascade);
    public sealed virtual void Revoke(ObjectPermissionSet permission, string granteeName, String[] columnNames, bool revokeGrant, bool cascade, string asRole);
    public ObjectPermissionInfo[] EnumColumnPermissions();
    public sealed virtual ObjectPermissionInfo[] EnumColumnPermissions(string granteeName);
    public ObjectPermissionInfo[] EnumColumnPermissions(ObjectPermissionSet permissions);
    public sealed virtual ObjectPermissionInfo[] EnumColumnPermissions(string granteeName, ObjectPermissionSet permissions);
    public TableEvents get_Events();
}
[DefaultMemberAttribute("Item")]
public class Microsoft.SqlServer.Management.Smo.TableCollection : SchemaCollectionBase {
    public Database Parent { get; }
    public Table Item { get; }
    public Table Item { get; }
    public Table Item { get; }
    internal TableCollection(SqlSmoObject parentInstance);
    public Database get_Parent();
    public Table get_Item(int index);
    public Table get_Item(string name);
    public Table get_Item(string name, string schema);
    public void CopyTo(Table[] array, int index);
    public Table ItemById(int id);
    protected virtual Type GetCollectionElementType();
    internal virtual SqlSmoObject GetCollectionElementInstance(ObjectKeyBase key, SqlSmoState state);
    public void Add(Table table);
    internal SqlSmoObject GetObjectByName(string name);
}
public class Microsoft.SqlServer.Management.Smo.TableEvent : object {
    private TableEventValues m_value;
    internal TableEventValues Value { get; }
    public static TableEvent AlterFulltextIndex { get; }
    public static TableEvent AlterIndex { get; }
    public static TableEvent AlterTable { get; }
    public static TableEvent CreateFulltextIndex { get; }
    public static TableEvent CreateIndex { get; }
    public static TableEvent CreateSpatialIndex { get; }
    public static TableEvent CreateStatistics { get; }
    public static TableEvent CreateXmlIndex { get; }
    public static TableEvent DropFulltextIndex { get; }
    public static TableEvent DropIndex { get; }
    public static TableEvent DropStatistics { get; }
    public static TableEvent DropTable { get; }
    public static TableEvent UpdateStatistics { get; }
    internal TableEvent(TableEventValues eventValue);
    internal TableEventValues get_Value();
    public static TableEventSet op_Implicit(TableEvent eventValue);
    public static TableEventSet op_Addition(TableEvent eventLeft, TableEvent eventRight);
    public static TableEventSet Add(TableEvent eventLeft, TableEvent eventRight);
    public static TableEventSet op_BitwiseOr(TableEvent eventLeft, TableEvent eventRight);
    public static TableEventSet BitwiseOr(TableEvent eventLeft, TableEvent eventRight);
    public virtual string ToString();
    public static bool op_Equality(TableEvent a, TableEvent b);
    public static bool op_Inequality(TableEvent a, TableEvent b);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static TableEvent get_AlterFulltextIndex();
    public static TableEvent get_AlterIndex();
    public static TableEvent get_AlterTable();
    public static TableEvent get_CreateFulltextIndex();
    public static TableEvent get_CreateIndex();
    public static TableEvent get_CreateSpatialIndex();
    public static TableEvent get_CreateStatistics();
    public static TableEvent get_CreateXmlIndex();
    public static TableEvent get_DropFulltextIndex();
    public static TableEvent get_DropIndex();
    public static TableEvent get_DropStatistics();
    public static TableEvent get_DropTable();
    public static TableEvent get_UpdateStatistics();
}
public class Microsoft.SqlServer.Management.Smo.TableEvents : object {
    private TableEventsWorker serverEventsWorker;
    private Table parent;
    internal TableEvents(Table parent);
    public TableEventSet GetEventSelection();
    public void SubscribeToEvents(TableEventSet events);
    public void SubscribeToEvents(TableEventSet events, ServerEventHandler eventHandler);
    public void UnsubscribeFromEvents(TableEventSet events);
    public void UnsubscribeAllEvents();
    public void StartEvents();
    public void StopEvents();
    public void add_ServerEvent(ServerEventHandler value);
    public void remove_ServerEvent(ServerEventHandler value);
    private void InitializeEvents();
}
public class Microsoft.SqlServer.Management.Smo.TableEventSet : EventSetBase {
    public int NumberOfElements { get; }
    public bool AlterFulltextIndex { get; public set; }
    public bool AlterIndex { get; public set; }
    public bool AlterTable { get; public set; }
    public bool CreateFulltextIndex { get; public set; }
    public bool CreateIndex { get; public set; }
    public bool CreateSpatialIndex { get; public set; }
    public bool CreateStatistics { get; public set; }
    public bool CreateXmlIndex { get; public set; }
    public bool DropFulltextIndex { get; public set; }
    public bool DropIndex { get; public set; }
    public bool DropStatistics { get; public set; }
    public bool DropTable { get; public set; }
    public bool UpdateStatistics { get; public set; }
    public TableEventSet(TableEventSet eventSet);
    public TableEventSet(TableEvent anEvent);
    public TableEventSet(TableEvent[] events);
    internal TableEventSet(BitArray storage);
    public virtual EventSetBase Copy();
    internal void SetBit(TableEvent anEvent);
    internal void ResetBit(TableEvent anEvent);
    public TableEventSet Add(TableEvent anEvent);
    public TableEventSet Remove(TableEvent anEvent);
    public static TableEventSet op_Addition(TableEventSet eventSet, TableEvent anEvent);
    public static TableEventSet Add(TableEventSet eventSet, TableEvent anEvent);
    public static TableEventSet op_Subtraction(TableEventSet eventSet, TableEvent anEvent);
    public static TableEventSet Subtract(TableEventSet eventSet, TableEvent anEvent);
    public virtual int get_NumberOfElements();
    public virtual string ToString();
    public bool get_AlterFulltextIndex();
    public void set_AlterFulltextIndex(bool value);
    public bool get_AlterIndex();
    public void set_AlterIndex(bool value);
    public bool get_AlterTable();
    public void set_AlterTable(bool value);
    public bool get_CreateFulltextIndex();
    public void set_CreateFulltextIndex(bool value);
    public bool get_CreateIndex();
    public void set_CreateIndex(bool value);
    public bool get_CreateSpatialIndex();
    public void set_CreateSpatialIndex(bool value);
    public bool get_CreateStatistics();
    public void set_CreateStatistics(bool value);
    public bool get_CreateXmlIndex();
    public void set_CreateXmlIndex(bool value);
    public bool get_DropFulltextIndex();
    public void set_DropFulltextIndex(bool value);
    public bool get_DropIndex();
    public void set_DropIndex(bool value);
    public bool get_DropStatistics();
    public void set_DropStatistics(bool value);
    public bool get_DropTable();
    public void set_DropTable(bool value);
    public bool get_UpdateStatistics();
    public void set_UpdateStatistics(bool value);
}
internal class Microsoft.SqlServer.Management.Smo.TableEventsWorker : ObjectInSchemaEventsWorker {
    public TableEventsWorker(Table target);
    protected virtual EventQuery CreateWqlQuery(string eventClass);
}
internal enum Microsoft.SqlServer.Management.Smo.TableEventValues : Enum {
    public int value__;
    public static TableEventValues AlterFulltextIndex;
    public static TableEventValues AlterIndex;
    public static TableEventValues AlterTable;
    public static TableEventValues CreateFulltextIndex;
    public static TableEventValues CreateIndex;
    public static TableEventValues CreateSpatialIndex;
    public static TableEventValues CreateStatistics;
    public static TableEventValues CreateXmlIndex;
    public static TableEventValues DropFulltextIndex;
    public static TableEventValues DropIndex;
    public static TableEventValues DropStatistics;
    public static TableEventValues DropTable;
    public static TableEventValues UpdateStatistics;
}
internal class Microsoft.SqlServer.Management.Smo.TablePreferences : object {
    [CompilerGeneratedAttribute]
private bool <SystemNamesForConstraints>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ConstraintsWithNoCheck>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Identities>k__BackingField;
    public bool SystemNamesForConstraints { get; public set; }
    public bool ConstraintsWithNoCheck { get; public set; }
    public bool Identities { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_SystemNamesForConstraints();
    [CompilerGeneratedAttribute]
public void set_SystemNamesForConstraints(bool value);
    [CompilerGeneratedAttribute]
public bool get_ConstraintsWithNoCheck();
    [CompilerGeneratedAttribute]
public void set_ConstraintsWithNoCheck(bool value);
    [CompilerGeneratedAttribute]
public bool get_Identities();
    [CompilerGeneratedAttribute]
public void set_Identities(bool value);
    private void Init();
    internal object Clone();
}
internal class Microsoft.SqlServer.Management.Smo.TableScriptContainer : IdBasedObjectScriptContainer {
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <DataScript>k__BackingField;
    [CompilerGeneratedAttribute]
private ScriptFragment <BindingsScript>k__BackingField;
    public IEnumerable`1<string> DataScript { get; private set; }
    public ScriptFragment BindingsScript { get; protected set; }
    public TableScriptContainer(Table table, ScriptingPreferences sp, RetryRequestedEventHandler retryEvent);
    [CompilerGeneratedAttribute]
public IEnumerable`1<string> get_DataScript();
    [CompilerGeneratedAttribute]
private void set_DataScript(IEnumerable`1<string> value);
    [CompilerGeneratedAttribute]
public ScriptFragment get_BindingsScript();
    [CompilerGeneratedAttribute]
protected void set_BindingsScript(ScriptFragment value);
    protected virtual void Initialize(SqlSmoObject obj, ScriptingPreferences sp, RetryRequestedEventHandler retryEvent);
    private void ScriptData(SqlSmoObject obj, ScriptingPreferences sp, RetryRequestedEventHandler retryEvent);
    private void ScriptDropData(SqlSmoObject obj, ScriptingPreferences sp);
}
public enum Microsoft.SqlServer.Management.Smo.TableTemporalType : Enum {
    public int value__;
    public static TableTemporalType None;
    public static TableTemporalType HistoryTable;
    public static TableTemporalType SystemVersioned;
}
public class Microsoft.SqlServer.Management.Smo.TableViewBase : TableViewTableTypeBase {
    private TriggerCollection m_Triggers;
    private StatisticCollection m_Statistics;
    private List`1<string> keysForPermissionWithGrantOption;
    internal FullTextIndex m_FullTextIndex;
    internal bool m_bFullTextIndexInitialized;
    [SfcObjectAttribute("1", "0", "Microsoft.SqlServer.Management.Smo.Trigger", "32")]
public TriggerCollection Triggers { get; }
    [SfcObjectAttribute("1", "0", "Microsoft.SqlServer.Management.Smo.Statistic")]
public StatisticCollection Statistics { get; }
    [SfcObjectAttribute("2", "1")]
public FullTextIndex FullTextIndex { get; }
    internal TableViewBase(AbstractCollectionBase parentColl, ObjectKeyBase key, SqlSmoState state);
    public TriggerCollection get_Triggers();
    public StatisticCollection get_Statistics();
    public void UpdateStatistics();
    public void UpdateStatistics(StatisticsTarget affectType, StatisticsScanType scanType);
    public void UpdateStatistics(StatisticsTarget affectType, StatisticsScanType scanType, int sampleValue);
    public void UpdateStatistics(StatisticsTarget affectType, StatisticsScanType scanType, int sampleValue, bool recompute);
    public DataTable EnumFragmentation();
    public DataTable EnumFragmentation(FragmentationOption fragmentationOption);
    public DataTable EnumFragmentation(FragmentationOption fragmentationOption, int partitionNumber);
    public virtual void Refresh();
    public void ReCompileReferences();
    private string GetDatabaseName();
    internal List`1<string> GetKeysForPermissionWithGrantOptionFromCache();
    internal static string GetKeyToMatchColumnPermissions(string permissionClass, string grantee, string granteeType, string grantor, string grantorType, string permissionName);
    internal virtual void AddScriptPermission(StringCollection query, ScriptingPreferences sp);
    public FullTextIndex get_FullTextIndex();
    internal void DropFullTextIndexRef();
    private FullTextIndex InitializeFullTextIndex();
    internal FullTextIndex InitializeFullTextIndexNoEnum();
}
public class Microsoft.SqlServer.Management.Smo.TableViewTableTypeBase : ScriptSchemaObjectBase {
    private IndexCollection m_Indexes;
    private ColumnCollection m_Columns;
    [SfcKeyAttribute("1")]
[SfcPropertyAttribute("7424")]
public string Name { get; public set; }
    [SfcKeyAttribute("0")]
[SfcPropertyAttribute("7424")]
[CLSCompliantAttribute("False")]
[SfcReferenceAttribute("Microsoft.SqlServer.Management.Smo.Schema", "Microsoft.SqlServer.Management.Smo.SchemaCustomResolver", "Resolve", "Mono.Cecil.CustomAttributeArgument[]")]
public string Schema { get; public set; }
    [SfcObjectAttribute("1", "0", "Microsoft.SqlServer.Management.Smo.Index", "32")]
public IndexCollection Indexes { get; }
    [SfcObjectAttribute("1", "0", "Microsoft.SqlServer.Management.Smo.ExtendedProperty")]
public ExtendedPropertyCollection ExtendedProperties { get; }
    [SfcObjectAttribute("1", "1", "Microsoft.SqlServer.Management.Smo.Column", "48")]
public ColumnCollection Columns { get; }
    internal TableViewTableTypeBase(AbstractCollectionBase parentColl, ObjectKeyBase key, SqlSmoState state);
    public virtual string get_Name();
    public virtual void set_Name(string value);
    public virtual string get_Schema();
    public virtual void set_Schema(string value);
    public virtual IndexCollection get_Indexes();
    public sealed virtual ExtendedPropertyCollection get_ExtendedProperties();
    public ColumnCollection get_Columns();
    internal virtual void AddScriptPermission(StringCollection query, ScriptingPreferences sp);
    protected virtual void MarkDropped();
    public sealed virtual StringCollection Script();
    public sealed virtual StringCollection Script(ScriptingOptions scriptingOptions);
    public virtual void Refresh();
}
[SfcElementTypeAttribute("Tcp")]
[SfcElementAttribute("16")]
public class Microsoft.SqlServer.Management.Smo.TcpProtocol : EndpointProtocol {
    public static string UrnSuffix { get; }
    [SfcPropertyAttribute("1024")]
public IPAddress ListenerIPAddress { get; public set; }
    [SfcPropertyAttribute("1024")]
public bool IsDynamicPort { get; }
    [SfcPropertyAttribute("1024")]
public bool IsSystemObject { get; }
    [SfcPropertyAttribute("1024")]
public int ListenerPort { get; public set; }
    internal TcpProtocol(Endpoint parentEndpoint, ObjectKeyBase key, SqlSmoState state);
    protected sealed virtual void GetUrnRecursive(StringBuilder urnbuilder, UrnIdOption idOption);
    public static string get_UrnSuffix();
    public void Create();
    internal virtual void Script(StringBuilder sb, ScriptingPreferences sp);
    public IPAddress get_ListenerIPAddress();
    public void set_ListenerIPAddress(IPAddress value);
    internal virtual SqlPropertyMetadataProvider GetPropertyMetadataProvider();
    public bool get_IsDynamicPort();
    public bool get_IsSystemObject();
    public int get_ListenerPort();
    public void set_ListenerPort(int value);
}
public enum Microsoft.SqlServer.Management.Smo.TerminationClause : Enum {
    public int value__;
    public static TerminationClause FailOnOpenTransactions;
    public static TerminationClause RollbackTransactionsImmediately;
}
[FlagsAttribute]
public enum Microsoft.SqlServer.Management.Smo.TransactionTypes : Enum {
    public int value__;
    public static TransactionTypes Versioned;
    public static TransactionTypes UnVersioned;
    public static TransactionTypes Both;
}
[EvaluationModeAttribute("4")]
[PhysicalFacetAttribute("1")]
[SfcElementAttribute("48")]
public class Microsoft.SqlServer.Management.Smo.Trigger : ScriptNameObjectBase {
    private TriggerEvents events;
    public static string UrnSuffix { get; }
    [SfcKeyAttribute("0")]
[SfcPropertyAttribute("7424")]
public string Name { get; public set; }
    [SfcObjectAttribute("1", "0", "Microsoft.SqlServer.Management.Smo.ExtendedProperty")]
public ExtendedPropertyCollection ExtendedProperties { get; }
    [SfcPropertyAttribute("7200")]
public string TextBody { get; public set; }
    [SfcPropertyAttribute("3104")]
public string TextHeader { get; public set; }
    [SfcPropertyAttribute("7168")]
public bool TextMode { get; public set; }
    [SfcObjectAttribute("1", "32")]
[SfcParentAttribute("Table")]
[SfcParentAttribute("View")]
public SqlSmoObject Parent { get; public set; }
    private bool Microsoft.SqlServer.Management.Sdk.Sfc.ISfcSupportsDesignMode.IsDesignMode { get; }
    [SfcPropertyAttribute("7168")]
public bool AnsiNullsStatus { get; public set; }
    [SfcPropertyAttribute("7168")]
[SfcReferenceAttribute("Microsoft.SqlServer.Management.Smo.SqlAssembly", "Server[@Name = '{0}']/Database[@Name = '{1}']/SqlAssembly[@Name = '{2}']", "Mono.Cecil.CustomAttributeArgument[]")]
[CLSCompliantAttribute("False")]
public string AssemblyName { get; public set; }
    [SfcPropertyAttribute("7168")]
public string ClassName { get; public set; }
    [SfcPropertyAttribute("3072")]
public DateTime CreateDate { get; }
    [SfcPropertyAttribute("3072")]
public DateTime DateLastModified { get; }
    [SfcPropertyAttribute("7168")]
public bool Delete { get; public set; }
    [SfcPropertyAttribute("7168")]
public ActivationOrder DeleteOrder { get; public set; }
    [SfcPropertyAttribute("11264")]
public ExecutionContext ExecutionContext { get; public set; }
    [SfcPropertyAttribute("11264")]
[SfcReferenceAttribute("Microsoft.SqlServer.Management.Smo.User", "Server[@Name = '{0}']/Database[@Name = '{1}']/User[@Name = '{2}']", "Mono.Cecil.CustomAttributeArgument[]")]
[CLSCompliantAttribute("False")]
public string ExecutionContextPrincipal { get; public set; }
    [SfcPropertyAttribute("3072")]
public int ID { get; }
    [SfcPropertyAttribute("7168")]
public ImplementationType ImplementationType { get; public set; }
    [SfcPropertyAttribute("7168")]
public bool Insert { get; public set; }
    [SfcPropertyAttribute("7168")]
public ActivationOrder InsertOrder { get; public set; }
    [SfcPropertyAttribute("7168")]
public bool InsteadOf { get; public set; }
    [SfcPropertyAttribute("7168")]
public bool IsEnabled { get; public set; }
    [SfcPropertyAttribute("11264")]
public bool IsEncrypted { get; public set; }
    [SfcPropertyAttribute("1024")]
public bool IsNativelyCompiled { get; public set; }
    [SfcPropertyAttribute("1024")]
public bool IsSchemaBound { get; public set; }
    [SfcPropertyAttribute("3072")]
public bool IsSystemObject { get; }
    [SfcPropertyAttribute("7168")]
public string MethodName { get; public set; }
    [SfcPropertyAttribute("11264")]
public bool NotForReplication { get; public set; }
    [SfcPropertyAttribute("7168")]
public bool QuotedIdentifierStatus { get; public set; }
    [SfcPropertyAttribute("7168")]
public bool Update { get; public set; }
    [SfcPropertyAttribute("7168")]
public ActivationOrder UpdateOrder { get; public set; }
    public TriggerEvents Events { get; }
    internal Trigger(AbstractCollectionBase parentColl, ObjectKeyBase key, SqlSmoState eState);
    public Trigger(SqlSmoObject parent, string name);
    public static string get_UrnSuffix();
    internal virtual String[] GetNonAlterableProperties();
    public virtual string get_Name();
    public virtual void set_Name(string value);
    public sealed virtual ExtendedPropertyCollection get_ExtendedProperties();
    public sealed virtual void Create();
    internal virtual void ScriptCreate(StringCollection queries, ScriptingPreferences sp);
    internal virtual void ScriptDdl(StringCollection queries, ScriptingPreferences sp);
    public sealed virtual void CreateOrAlter();
    internal virtual void ScriptCreateOrAlter(StringCollection queries, ScriptingPreferences sp);
    private string GetIfNotExistString(bool forCreate, ScriptingPreferences sp);
    public sealed virtual void Drop();
    public sealed virtual void DropIfExists();
    internal virtual void ScriptDrop(StringCollection queries, ScriptingPreferences sp);
    public sealed virtual void Alter();
    internal virtual void ScriptAlter(StringCollection alterQuery, ScriptingPreferences sp);
    public sealed virtual void MarkForDrop(bool dropOnAlter);
    internal virtual string FormatFullNameForScripting(ScriptingPreferences sp);
    private bool ShouldScriptBodyAtAlter();
    private bool GetInsteafOfValue(ScriptingPreferences sp);
    private void ScriptTrigger(StringCollection queries, ScriptingPreferences sp, ScriptHeaderType scriptHeaderType);
    private void GetInternalDDL(StringCollection queries, ScriptingPreferences sp, ScriptHeaderType scriptHeaderType);
    private void GetExternalDDL(StringCollection queries, ScriptingPreferences sp, ScriptHeaderType scriptHeaderType);
    internal virtual PropagateInfo[] GetPropagateInfo(PropagateAction action);
    public void ReCompileReferences();
    public sealed virtual StringCollection Script();
    public sealed virtual StringCollection Script(ScriptingOptions scriptingOptions);
    public sealed virtual string ScriptHeader(bool forAlter);
    public sealed virtual string ScriptHeader(ScriptHeaderType scriptHeaderType);
    public sealed virtual string get_TextBody();
    public sealed virtual void set_TextBody(string value);
    public sealed virtual string get_TextHeader();
    public sealed virtual void set_TextHeader(string value);
    public sealed virtual bool get_TextMode();
    public sealed virtual void set_TextMode(bool value);
    internal virtual void ValidateProperty(Property prop, object value);
    protected virtual void PostCreate();
    internal static String[] GetScriptFields(Type parentType, ServerVersion version, DatabaseEngineType databaseEngineType, DatabaseEngineEdition databaseEngineEdition, bool defaultTextMode);
    public SqlSmoObject get_Parent();
    public void set_Parent(SqlSmoObject value);
    private sealed virtual override bool Microsoft.SqlServer.Management.Sdk.Sfc.ISfcSupportsDesignMode.get_IsDesignMode();
    internal virtual SqlPropertyMetadataProvider GetPropertyMetadataProvider();
    public bool get_AnsiNullsStatus();
    public void set_AnsiNullsStatus(bool value);
    public string get_AssemblyName();
    public void set_AssemblyName(string value);
    public string get_ClassName();
    public void set_ClassName(string value);
    public DateTime get_CreateDate();
    public DateTime get_DateLastModified();
    public bool get_Delete();
    public void set_Delete(bool value);
    public ActivationOrder get_DeleteOrder();
    public void set_DeleteOrder(ActivationOrder value);
    public ExecutionContext get_ExecutionContext();
    public void set_ExecutionContext(ExecutionContext value);
    public string get_ExecutionContextPrincipal();
    public void set_ExecutionContextPrincipal(string value);
    public int get_ID();
    public ImplementationType get_ImplementationType();
    public void set_ImplementationType(ImplementationType value);
    public bool get_Insert();
    public void set_Insert(bool value);
    public ActivationOrder get_InsertOrder();
    public void set_InsertOrder(ActivationOrder value);
    public bool get_InsteadOf();
    public void set_InsteadOf(bool value);
    public bool get_IsEnabled();
    public void set_IsEnabled(bool value);
    public bool get_IsEncrypted();
    public void set_IsEncrypted(bool value);
    public bool get_IsNativelyCompiled();
    public void set_IsNativelyCompiled(bool value);
    public bool get_IsSchemaBound();
    public void set_IsSchemaBound(bool value);
    public bool get_IsSystemObject();
    public string get_MethodName();
    public void set_MethodName(string value);
    public bool get_NotForReplication();
    public void set_NotForReplication(bool value);
    public bool get_QuotedIdentifierStatus();
    public void set_QuotedIdentifierStatus(bool value);
    public bool get_Update();
    public void set_Update(bool value);
    public ActivationOrder get_UpdateOrder();
    public void set_UpdateOrder(ActivationOrder value);
    public TriggerEvents get_Events();
}
[DefaultMemberAttribute("Item")]
public class Microsoft.SqlServer.Management.Smo.TriggerCollection : SimpleObjectCollectionBase {
    public SqlSmoObject Parent { get; }
    public Trigger Item { get; }
    public Trigger Item { get; }
    internal TriggerCollection(SqlSmoObject parentInstance);
    public SqlSmoObject get_Parent();
    public Trigger get_Item(int index);
    public Trigger get_Item(string name);
    public void CopyTo(Trigger[] array, int index);
    public Trigger ItemById(int id);
    protected virtual Type GetCollectionElementType();
    internal virtual SqlSmoObject GetCollectionElementInstance(ObjectKeyBase key, SqlSmoState state);
    public void Remove(Trigger trigger);
    public void Remove(string name);
    public void Add(Trigger trigger);
    internal SqlSmoObject GetObjectByName(string name);
    internal virtual ObjectKeyBase CreateKeyFromUrn(Urn urn);
}
public class Microsoft.SqlServer.Management.Smo.TriggerEvents : object {
    private ObjectEventsWorker serverEventsWorker;
    private Trigger parent;
    internal TriggerEvents(Trigger parent);
    public ObjectEventSet GetEventSelection();
    public void SubscribeToEvents(ObjectEventSet events);
    public void SubscribeToEvents(ObjectEventSet events, ServerEventHandler eventHandler);
    public void UnsubscribeFromEvents(ObjectEventSet events);
    public void UnsubscribeAllEvents();
    public void StartEvents();
    public void StopEvents();
    public void add_ServerEvent(ServerEventHandler value);
    public void remove_ServerEvent(ServerEventHandler value);
    private void InitializeEvents();
}
public static class Microsoft.SqlServer.Management.Smo.TypeConverters : object {
    public static TypeConverter SqlServerVersionTypeConverter;
    private static TypeConverters();
}
public class Microsoft.SqlServer.Management.Smo.UnknownPropertyException : SmoException {
    private string propertyName;
    private ServerVersion[] supportedVersions;
    private ServerVersion currentVersion;
    public SmoExceptionType SmoExceptionType { get; }
    public string Message { get; }
    public string PropertyName { get; }
    public ServerVersion[] SupportedVersions { get; }
    public ServerVersion CurrentVersion { get; }
    public UnknownPropertyException(string message, Exception innerException);
    public UnknownPropertyException(string propertyName);
    internal UnknownPropertyException(string propertyName, string message);
    private UnknownPropertyException(SerializationInfo info, StreamingContext context);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    public virtual SmoExceptionType get_SmoExceptionType();
    public virtual string get_Message();
    private void Init();
    public string get_PropertyName();
    public ServerVersion[] get_SupportedVersions();
    public ServerVersion get_CurrentVersion();
}
public class Microsoft.SqlServer.Management.Smo.UnsupportedCompatLevelException : SmoException {
    public SmoExceptionType SmoExceptionType { get; }
    public UnsupportedCompatLevelException(string message);
    public UnsupportedCompatLevelException(string message, Exception innerException);
    private UnsupportedCompatLevelException(SerializationInfo info, StreamingContext context);
    private void Init();
    public virtual SmoExceptionType get_SmoExceptionType();
}
public class Microsoft.SqlServer.Management.Smo.UnsupportedEngineEditionException : SmoException {
    public SmoExceptionType SmoExceptionType { get; }
    public UnsupportedEngineEditionException(string message);
    public UnsupportedEngineEditionException(string message, Exception innerException);
    private UnsupportedEngineEditionException(SerializationInfo info, StreamingContext context);
    private void Init();
    public virtual SmoExceptionType get_SmoExceptionType();
}
public class Microsoft.SqlServer.Management.Smo.UnsupportedEngineTypeException : SmoException {
    public SmoExceptionType SmoExceptionType { get; }
    public UnsupportedEngineTypeException(string message);
    public UnsupportedEngineTypeException(string message, Exception innerException);
    private UnsupportedEngineTypeException(SerializationInfo info, StreamingContext context);
    private void Init();
    public virtual SmoExceptionType get_SmoExceptionType();
}
public class Microsoft.SqlServer.Management.Smo.UnsupportedFeatureException : SmoException {
    public SmoExceptionType SmoExceptionType { get; }
    public UnsupportedFeatureException(string message);
    public UnsupportedFeatureException(string message, Exception innerException);
    private UnsupportedFeatureException(SerializationInfo info, StreamingContext context);
    private void Init();
    public virtual SmoExceptionType get_SmoExceptionType();
}
public class Microsoft.SqlServer.Management.Smo.UnsupportedObjectNameException : SmoException {
    public SmoExceptionType SmoExceptionType { get; }
    public UnsupportedObjectNameException(string message);
    public UnsupportedObjectNameException(string message, Exception innerException);
    private UnsupportedObjectNameException(SerializationInfo info, StreamingContext context);
    public virtual SmoExceptionType get_SmoExceptionType();
}
public class Microsoft.SqlServer.Management.Smo.UnsupportedVersionException : SmoException {
    public SmoExceptionType SmoExceptionType { get; }
    public UnsupportedVersionException(string message);
    public UnsupportedVersionException(string message, Exception innerException);
    private UnsupportedVersionException(SerializationInfo info, StreamingContext context);
    private void Init();
    public virtual SmoExceptionType get_SmoExceptionType();
}
[DefaultMemberAttribute("Item")]
public class Microsoft.SqlServer.Management.Smo.UrnCollection : object {
    private List`1<Urn> innerColl;
    public Urn Item { get; public set; }
    public int Count { get; }
    private bool System.Collections.Generic.ICollection<Microsoft.SqlServer.Management.Sdk.Sfc.Urn>.IsReadOnly { get; }
    public sealed virtual int IndexOf(Urn urn);
    public sealed virtual void Insert(int index, Urn urn);
    public sealed virtual void RemoveAt(int index);
    public sealed virtual Urn get_Item(int index);
    public sealed virtual void set_Item(int index, Urn value);
    public sealed virtual void Add(Urn urn);
    public void AddRange(IEnumerable`1<Urn> urnCollection);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(Urn urn);
    public sealed virtual void CopyTo(Urn[] array, int arrayIndex);
    public sealed virtual bool Remove(Urn urn);
    public sealed virtual int get_Count();
    private sealed virtual override bool System.Collections.Generic.ICollection<Microsoft.SqlServer.Management.Sdk.Sfc.Urn>.get_IsReadOnly();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual IEnumerator`1<Urn> GetEnumerator();
}
internal class Microsoft.SqlServer.Management.Smo.UrnComparer : object {
    private Server server;
    internal UrnComparer(Server srv);
    public sealed virtual int Compare(object x, object y);
}
public enum Microsoft.SqlServer.Management.Smo.UrnIdOption : Enum {
    public int value__;
    public static UrnIdOption WithId;
    public static UrnIdOption OnlyId;
    public static UrnIdOption NoId;
}
internal class Microsoft.SqlServer.Management.Smo.UrnTypeKey : object {
    private string uniqueUrnType;
    private ObjectOrder createOrder;
    internal ObjectOrder CreateOrder { get; }
    public UrnTypeKey(Urn urn);
    public UrnTypeKey(string urnTypeKey);
    public UrnTypeKey(string urnType, string parentUrnType);
    internal ObjectOrder get_CreateOrder();
    private ObjectOrder SetCreateOrder();
    private string GetUniqueUrnType(Urn urn);
    private string GetUniqueSmoType(string urnType, string parentUrnType);
    public virtual int GetHashCode();
    public virtual string ToString();
    public virtual bool Equals(object obj);
    public sealed virtual int CompareTo(object obj);
}
[EvaluationModeAttribute("4")]
[PhysicalFacetAttribute]
[SfcElementAttribute("48")]
public class Microsoft.SqlServer.Management.Smo.User : ScriptNameObjectBase {
    private SqlSecureString password;
    private Guid objectId;
    private DefaultLanguage defaultLanguageObj;
    private bool userContainmentInProgress;
    private bool isDefaultLanguageModified;
    private UserEvents events;
    public static string UrnSuffix { get; }
    [SfcKeyAttribute("0")]
[SfcPropertyAttribute("7424")]
public string Name { get; public set; }
    [SfcPropertyAttribute("1024")]
public DefaultLanguage DefaultLanguage { get; internal set; }
    [SfcObjectAttribute("1", "0", "Microsoft.SqlServer.Management.Smo.ExtendedProperty")]
public ExtendedPropertyCollection ExtendedProperties { get; }
    [SfcPropertyAttribute("3328")]
public Guid ObjectId { get; public set; }
    [SfcObjectAttribute("1", "32")]
public Database Parent { get; public set; }
    internal UserPermissionCollection Permissions { get; }
    private bool Microsoft.SqlServer.Management.Sdk.Sfc.ISfcSupportsDesignMode.IsDesignMode { get; }
    [SfcPropertyAttribute("3328")]
[SfcReferenceAttribute("Microsoft.SqlServer.Management.Smo.AsymmetricKey", "Server[@Name = '{0}']/Database[@Name = '{1}']/AsymmetricKey[@Name = '{2}']", "Mono.Cecil.CustomAttributeArgument[]")]
[CLSCompliantAttribute("False")]
public string AsymmetricKey { get; public set; }
    [SfcPropertyAttribute("3072")]
public AuthenticationType AuthenticationType { get; }
    [SfcPropertyAttribute("3328")]
[SfcReferenceAttribute("Microsoft.SqlServer.Management.Smo.Certificate", "Server[@Name = '{0}']/Database[@Name = '{1}']/Certificate[@Name = '{2}']", "Mono.Cecil.CustomAttributeArgument[]")]
[CLSCompliantAttribute("False")]
public string Certificate { get; public set; }
    [SfcPropertyAttribute("3072")]
public DateTime CreateDate { get; }
    [SfcPropertyAttribute("3072")]
public DateTime DateLastModified { get; }
    [SfcPropertyAttribute("7168")]
[SfcReferenceAttribute("Microsoft.SqlServer.Management.Smo.Schema", "Server[@Name = '{0}']/Database[@Name = '{1}']/Schema[@Name = '{2}']", "Mono.Cecil.CustomAttributeArgument[]")]
[CLSCompliantAttribute("False")]
public string DefaultSchema { get; public set; }
    [SfcPropertyAttribute("3072")]
public bool HasDBAccess { get; }
    [SfcPropertyAttribute("3072")]
public int ID { get; }
    [SfcPropertyAttribute("3072", "false")]
public bool IsSystemObject { get; }
    [SfcPropertyAttribute("7424")]
[SfcReferenceAttribute("Microsoft.SqlServer.Management.Smo.Login", "Server[@Name = '{0}']/Login[@Name = '{1}']", "Mono.Cecil.CustomAttributeArgument[]")]
[CLSCompliantAttribute("False")]
public string Login { get; public set; }
    [SfcPropertyAttribute("3072")]
public LoginType LoginType { get; }
    [SfcPropertyAttribute("3072")]
public Byte[] Sid { get; }
    [SfcPropertyAttribute("7424")]
public UserType UserType { get; public set; }
    public UserEvents Events { get; }
    internal User(AbstractCollectionBase parentColl, ObjectKeyBase key, SqlSmoState state);
    public User(Database database, string name);
    private void InitVariables();
    public static string get_UrnSuffix();
    public virtual string get_Name();
    public virtual void set_Name(string value);
    public DefaultLanguage get_DefaultLanguage();
    internal void set_DefaultLanguage(DefaultLanguage value);
    public sealed virtual ExtendedPropertyCollection get_ExtendedProperties();
    public Guid get_ObjectId();
    public void set_ObjectId(Guid value);
    public sealed virtual void Drop();
    public sealed virtual void DropIfExists();
    internal virtual void ScriptDrop(StringCollection dropQuery, ScriptingPreferences sp);
    private void ScriptDropFrom80ToCloud(StringCollection dropQuery, ScriptingPreferences sp);
    public sealed virtual void Create();
    public void Create(string password);
    public void Create(SecureString password);
    internal virtual void ScriptCreate(StringCollection createQuery, ScriptingPreferences sp);
    private void AddDefaultLanguageOptionToScript(StringBuilder sbOption, ScriptingPreferences sp, Boolean& optionAdded);
    private void ValidateVersionAndEngineTypeForScripting(ScriptingPreferences sp);
    private void ValidateBeforeScriptCreate();
    public void ChangePassword(string newPassword);
    public void ChangePassword(SecureString newPassword);
    public void ChangePassword(string oldPassword, string newPassword);
    public void ChangePassword(SecureString oldPassword, SecureString newPassword);
    private void ExecuteUserPasswordOptions(SqlSecureString password, SqlSecureString oldPassword);
    protected virtual void ExecuteRenameQuery(string newName);
    public void MakeContained(bool copyLoginName, bool disableLogin);
    private StringCollection GetMakeContainedScript(bool copyLoginName, bool disableLogin);
    private void ScriptCreateFrom80ToCloud(StringCollection createQuery, ScriptingPreferences sp);
    internal virtual void ScriptAssociations(StringCollection createQuery, ScriptingPreferences sp);
    private void AddPasswordOptions(ScriptingPreferences sp, StringBuilder sb, SqlSecureString password, SqlSecureString oldPassword, Boolean& optionAdded);
    private void AddComma(StringBuilder sb, Boolean& bStuffAdded);
    protected virtual void PostCreate();
    protected virtual void PostAlter();
    private bool IsDefaultLanguageModified();
    protected virtual void CleanObject();
    public sealed virtual void Alter();
    private void ValidateAlterInputs();
    private void ValidateDefaultLanguageNotDirty();
    internal virtual void ScriptAlter(StringCollection query, ScriptingPreferences sp);
    public bool IsMember(string role);
    public StringCollection EnumRoles();
    internal virtual PropagateInfo[] GetPropagateInfo(PropagateAction action);
    public sealed virtual StringCollection Script();
    public sealed virtual StringCollection Script(ScriptingOptions scriptingOptions);
    internal virtual void AddScriptPermission(StringCollection query, ScriptingPreferences sp);
    private string ScriptAddToRole(string role, ScriptingPreferences sp);
    public void AddToRole(string role);
    public sealed virtual void Rename(string newname);
    internal virtual void ScriptRename(StringCollection renameQuery, ScriptingPreferences sp, string newName);
    internal static String[] GetScriptFields(Type parentType, ServerVersion version, DatabaseEngineType databaseEngineType, DatabaseEngineEdition databaseEngineEdition, bool defaultTextMode);
    public Database get_Parent();
    public void set_Parent(Database value);
    internal virtual UserPermissionCollection get_Permissions();
    private sealed virtual override bool Microsoft.SqlServer.Management.Sdk.Sfc.ISfcSupportsDesignMode.get_IsDesignMode();
    internal virtual SqlPropertyMetadataProvider GetPropertyMetadataProvider();
    public sealed virtual string get_AsymmetricKey();
    public void set_AsymmetricKey(string value);
    public AuthenticationType get_AuthenticationType();
    public sealed virtual string get_Certificate();
    public void set_Certificate(string value);
    public sealed virtual DateTime get_CreateDate();
    public DateTime get_DateLastModified();
    public sealed virtual string get_DefaultSchema();
    public sealed virtual void set_DefaultSchema(string value);
    public bool get_HasDBAccess();
    public sealed virtual int get_ID();
    public sealed virtual bool get_IsSystemObject();
    public sealed virtual string get_Login();
    public void set_Login(string value);
    public sealed virtual LoginType get_LoginType();
    public sealed virtual Byte[] get_Sid();
    public sealed virtual UserType get_UserType();
    public void set_UserType(UserType value);
    internal virtual String[] GetNonAlterableProperties();
    internal virtual object GetPropertyDefaultValue(string propname);
    public sealed virtual void Deny(ObjectPermissionSet permission, String[] granteeNames);
    public sealed virtual void Deny(ObjectPermissionSet permission, String[] granteeNames, bool cascade);
    public sealed virtual void Grant(ObjectPermissionSet permission, String[] granteeNames);
    public sealed virtual void Grant(ObjectPermissionSet permission, String[] granteeNames, bool grantGrant);
    public sealed virtual void Grant(ObjectPermissionSet permission, String[] granteeNames, bool grantGrant, string asRole);
    public sealed virtual void Revoke(ObjectPermissionSet permission, String[] granteeNames);
    public sealed virtual void Revoke(ObjectPermissionSet permission, String[] granteeNames, bool revokeGrant, bool cascade);
    public void Revoke(ObjectPermissionSet permission, String[] granteeNames, bool revokeGrant, bool cascade, string asRole);
    public sealed virtual void Deny(ObjectPermissionSet permission, string granteeName);
    public sealed virtual void Deny(ObjectPermissionSet permission, string granteeName, bool cascade);
    public sealed virtual void Grant(ObjectPermissionSet permission, string granteeName);
    public sealed virtual void Grant(ObjectPermissionSet permission, string granteeName, bool grantGrant);
    public sealed virtual void Grant(ObjectPermissionSet permission, string granteeName, bool grantGrant, string asRole);
    public sealed virtual void Revoke(ObjectPermissionSet permission, string granteeName);
    public void Revoke(ObjectPermissionSet permission, string granteeName, bool revokeGrant, bool cascade);
    public sealed virtual void Revoke(ObjectPermissionSet permission, string granteeName, bool revokeGrant, bool cascade, string asRole);
    public sealed virtual ObjectPermissionInfo[] EnumObjectPermissions();
    public sealed virtual ObjectPermissionInfo[] EnumObjectPermissions(string granteeName);
    public sealed virtual ObjectPermissionInfo[] EnumObjectPermissions(ObjectPermissionSet permissions);
    public sealed virtual ObjectPermissionInfo[] EnumObjectPermissions(string granteeName, ObjectPermissionSet permissions);
    public Urn[] EnumOwnedObjects();
    public UserEvents get_Events();
}
[DefaultMemberAttribute("Item")]
public class Microsoft.SqlServer.Management.Smo.UserCollection : SimpleObjectCollectionBase {
    public Database Parent { get; }
    public User Item { get; }
    public User Item { get; }
    internal UserCollection(SqlSmoObject parentInstance);
    public Database get_Parent();
    public User get_Item(int index);
    public User get_Item(string name);
    public void CopyTo(User[] array, int index);
    public User ItemById(int id);
    protected virtual Type GetCollectionElementType();
    internal virtual SqlSmoObject GetCollectionElementInstance(ObjectKeyBase key, SqlSmoState state);
    public void Add(User user);
    internal SqlSmoObject GetObjectByName(string name);
    internal virtual ObjectKeyBase CreateKeyFromUrn(Urn urn);
}
[EvaluationModeAttribute("4")]
[PhysicalFacetAttribute]
[SfcElementAttribute("48")]
public class Microsoft.SqlServer.Management.Smo.UserDefinedAggregate : ScriptSchemaObjectBase {
    private UserDefinedAggregateParameterCollection parameters;
    private DataType dataType;
    public static string UrnSuffix { get; }
    [SfcKeyAttribute("0")]
[SfcReferenceAttribute("Microsoft.SqlServer.Management.Smo.Schema", "Microsoft.SqlServer.Management.Smo.SchemaCustomResolver", "Resolve", "Mono.Cecil.CustomAttributeArgument[]")]
[SfcPropertyAttribute("3328")]
[CLSCompliantAttribute("False")]
public string Schema { get; public set; }
    [SfcKeyAttribute("1")]
[SfcPropertyAttribute("3328")]
public string Name { get; public set; }
    [SfcObjectAttribute("1", "0", "Microsoft.SqlServer.Management.Smo.ExtendedProperty")]
public ExtendedPropertyCollection ExtendedProperties { get; }
    [SfcObjectAttribute("1", "1", "Microsoft.SqlServer.Management.Smo.UserDefinedAggregateParameter")]
public UserDefinedAggregateParameterCollection Parameters { get; }
    [CLSCompliantAttribute("False")]
[SfcReferenceAttribute("Microsoft.SqlServer.Management.Smo.UserDefinedType", "Microsoft.SqlServer.Management.Smo.UserDefinedTypeResolver", "Resolve", "Mono.Cecil.CustomAttributeArgument[]")]
[SfcReferenceAttribute("Microsoft.SqlServer.Management.Smo.UserDefinedDataType", "Microsoft.SqlServer.Management.Smo.UserDefinedDataTypeResolver", "Resolve", "Mono.Cecil.CustomAttributeArgument[]")]
[SfcPropertyAttribute("3072")]
public DataType DataType { get; public set; }
    [SfcObjectAttribute("1")]
public Database Parent { get; public set; }
    internal UserPermissionCollection Permissions { get; }
    private bool Microsoft.SqlServer.Management.Sdk.Sfc.ISfcSupportsDesignMode.IsDesignMode { get; }
    [SfcPropertyAttribute("3072")]
[SfcReferenceAttribute("Microsoft.SqlServer.Management.Smo.SqlAssembly", "Server[@Name = '{0}']/Database[@Name = '{1}']/SqlAssembly[@Name = '{2}']", "Mono.Cecil.CustomAttributeArgument[]")]
[CLSCompliantAttribute("False")]
public string AssemblyName { get; public set; }
    [SfcPropertyAttribute("3072")]
public string ClassName { get; public set; }
    [SfcPropertyAttribute("3072")]
public DateTime CreateDate { get; }
    [SfcPropertyAttribute("3072")]
public DateTime DateLastModified { get; }
    [SfcPropertyAttribute("3072")]
public int ID { get; }
    [SfcPropertyAttribute("7168")]
public bool IsSchemaOwned { get; }
    [SfcPropertyAttribute("7168")]
[SfcReferenceAttribute("Microsoft.SqlServer.Management.Smo.User", "Server[@Name = '{0}']/Database[@Name = '{1}']/User[@Name = '{2}']", "Mono.Cecil.CustomAttributeArgument[]")]
[SfcReferenceAttribute("Microsoft.SqlServer.Management.Smo.DatabaseRole", "Server[@Name = '{0}']/Database[@Name = '{1}']/Role[@Name = '{2}']", "Mono.Cecil.CustomAttributeArgument[]")]
[SfcReferenceAttribute("Microsoft.SqlServer.Management.Smo.ApplicationRole", "Server[@Name = '{0}']/Database[@Name = '{1}']/ApplicationRole[@Name = '{2}']", "Mono.Cecil.CustomAttributeArgument[]")]
[CLSCompliantAttribute("False")]
public string Owner { get; public set; }
    internal UserDefinedAggregate(AbstractCollectionBase parentColl, ObjectKeyBase key, SqlSmoState state);
    public UserDefinedAggregate(Database database, string name);
    public UserDefinedAggregate(Database database, string name, string schema);
    private void init();
    public void ChangeSchema(string newSchema);
    public static string get_UrnSuffix();
    public virtual string get_Schema();
    public virtual void set_Schema(string value);
    public virtual string get_Name();
    public virtual void set_Name(string value);
    public sealed virtual ExtendedPropertyCollection get_ExtendedProperties();
    internal virtual PropagateInfo[] GetPropagateInfo(PropagateAction action);
    public UserDefinedAggregateParameterCollection get_Parameters();
    private void AddParam(StringBuilder sb, ScriptingPreferences sp, UserDefinedAggregateParameter spp);
    public sealed virtual void Alter();
    internal virtual void ScriptAlter(StringCollection alterQuery, ScriptingPreferences sp);
    public sealed virtual void Create();
    internal virtual void ScriptCreate(StringCollection queries, ScriptingPreferences sp);
    public sealed virtual void Drop();
    public sealed virtual void DropIfExists();
    internal virtual void ScriptDrop(StringCollection dropQuery, ScriptingPreferences sp);
    public DataType get_DataType();
    public void set_DataType(DataType value);
    public virtual void Refresh();
    public sealed virtual StringCollection Script();
    public sealed virtual StringCollection Script(ScriptingOptions scriptingOptions);
    internal static String[] GetScriptFields(Type parentType, ServerVersion version, DatabaseEngineType databaseEngineType, DatabaseEngineEdition databaseEngineEdition, bool defaultTextMode);
    public Database get_Parent();
    public void set_Parent(Database value);
    internal virtual UserPermissionCollection get_Permissions();
    private sealed virtual override bool Microsoft.SqlServer.Management.Sdk.Sfc.ISfcSupportsDesignMode.get_IsDesignMode();
    internal virtual SqlPropertyMetadataProvider GetPropertyMetadataProvider();
    public string get_AssemblyName();
    public void set_AssemblyName(string value);
    public string get_ClassName();
    public void set_ClassName(string value);
    public DateTime get_CreateDate();
    public DateTime get_DateLastModified();
    public int get_ID();
    public bool get_IsSchemaOwned();
    public string get_Owner();
    public void set_Owner(string value);
    public sealed virtual void Deny(ObjectPermissionSet permission, String[] granteeNames);
    public sealed virtual void Deny(ObjectPermissionSet permission, String[] granteeNames, bool cascade);
    public sealed virtual void Grant(ObjectPermissionSet permission, String[] granteeNames);
    public sealed virtual void Grant(ObjectPermissionSet permission, String[] granteeNames, bool grantGrant);
    public sealed virtual void Grant(ObjectPermissionSet permission, String[] granteeNames, bool grantGrant, string asRole);
    public sealed virtual void Revoke(ObjectPermissionSet permission, String[] granteeNames);
    public sealed virtual void Revoke(ObjectPermissionSet permission, String[] granteeNames, bool revokeGrant, bool cascade);
    public void Revoke(ObjectPermissionSet permission, String[] granteeNames, bool revokeGrant, bool cascade, string asRole);
    public sealed virtual void Deny(ObjectPermissionSet permission, string granteeName);
    public sealed virtual void Deny(ObjectPermissionSet permission, string granteeName, bool cascade);
    public sealed virtual void Grant(ObjectPermissionSet permission, string granteeName);
    public sealed virtual void Grant(ObjectPermissionSet permission, string granteeName, bool grantGrant);
    public sealed virtual void Grant(ObjectPermissionSet permission, string granteeName, bool grantGrant, string asRole);
    public sealed virtual void Revoke(ObjectPermissionSet permission, string granteeName);
    public void Revoke(ObjectPermissionSet permission, string granteeName, bool revokeGrant, bool cascade);
    public sealed virtual void Revoke(ObjectPermissionSet permission, string granteeName, bool revokeGrant, bool cascade, string asRole);
    public sealed virtual ObjectPermissionInfo[] EnumObjectPermissions();
    public sealed virtual ObjectPermissionInfo[] EnumObjectPermissions(string granteeName);
    public sealed virtual ObjectPermissionInfo[] EnumObjectPermissions(ObjectPermissionSet permissions);
    public sealed virtual ObjectPermissionInfo[] EnumObjectPermissions(string granteeName, ObjectPermissionSet permissions);
}
[DefaultMemberAttribute("Item")]
public class Microsoft.SqlServer.Management.Smo.UserDefinedAggregateCollection : SchemaCollectionBase {
    public Database Parent { get; }
    public UserDefinedAggregate Item { get; }
    public UserDefinedAggregate Item { get; }
    public UserDefinedAggregate Item { get; }
    internal UserDefinedAggregateCollection(SqlSmoObject parentInstance);
    public Database get_Parent();
    public UserDefinedAggregate get_Item(int index);
    public UserDefinedAggregate get_Item(string name);
    public UserDefinedAggregate get_Item(string name, string schema);
    public void CopyTo(UserDefinedAggregate[] array, int index);
    public UserDefinedAggregate ItemById(int id);
    protected virtual Type GetCollectionElementType();
    internal virtual SqlSmoObject GetCollectionElementInstance(ObjectKeyBase key, SqlSmoState state);
    public void Add(UserDefinedAggregate userDefinedAggregate);
    internal SqlSmoObject GetObjectByName(string name);
}
[SfcElementAttribute("48")]
public class Microsoft.SqlServer.Management.Smo.UserDefinedAggregateParameter : ParameterBase {
    internal static string UrnSuffix { get; }
    [SfcKeyAttribute("0")]
[SfcPropertyAttribute("3328")]
public string Name { get; public set; }
    [CLSCompliantAttribute("False")]
[SfcReferenceAttribute("Microsoft.SqlServer.Management.Smo.UserDefinedType", "Microsoft.SqlServer.Management.Smo.UserDefinedTypeResolver", "Resolve", "Mono.Cecil.CustomAttributeArgument[]")]
[SfcReferenceAttribute("Microsoft.SqlServer.Management.Smo.UserDefinedDataType", "Microsoft.SqlServer.Management.Smo.UserDefinedDataTypeResolver", "Resolve", "Mono.Cecil.CustomAttributeArgument[]")]
[SfcReferenceAttribute("Microsoft.SqlServer.Management.Smo.UserDefinedTableType", "Microsoft.SqlServer.Management.Smo.UserDefinedTableTypeResolver", "Resolve", "Mono.Cecil.CustomAttributeArgument[]")]
[SfcPropertyAttribute("3072")]
public DataType DataType { get; public set; }
    [SfcObjectAttribute("1")]
public UserDefinedAggregate Parent { get; public set; }
    private bool Microsoft.SqlServer.Management.Sdk.Sfc.ISfcSupportsDesignMode.IsDesignMode { get; }
    [SfcPropertyAttribute("3072")]
public int ID { get; }
    internal UserDefinedAggregateParameter(AbstractCollectionBase parentColl, ObjectKeyBase key, SqlSmoState state);
    public UserDefinedAggregateParameter(UserDefinedAggregate userDefinedAggregate, string name, DataType dataType);
    public UserDefinedAggregateParameter(UserDefinedAggregate userDefinedAggregate, string name);
    internal static string get_UrnSuffix();
    public virtual string get_Name();
    public virtual void set_Name(string value);
    public virtual DataType get_DataType();
    public virtual void set_DataType(DataType value);
    internal static String[] GetScriptFields(Type parentType, ServerVersion version, DatabaseEngineType databaseEngineType, DatabaseEngineEdition databaseEngineEdition, bool defaultTextMode);
    protected virtual bool isParentClrImplemented();
    public UserDefinedAggregate get_Parent();
    public void set_Parent(UserDefinedAggregate value);
    private sealed virtual override bool Microsoft.SqlServer.Management.Sdk.Sfc.ISfcSupportsDesignMode.get_IsDesignMode();
    internal virtual SqlPropertyMetadataProvider GetPropertyMetadataProvider();
    public int get_ID();
}
[DefaultMemberAttribute("Item")]
public class Microsoft.SqlServer.Management.Smo.UserDefinedAggregateParameterCollection : ParameterCollectionBase {
    public UserDefinedAggregate Parent { get; }
    public UserDefinedAggregateParameter Item { get; }
    public UserDefinedAggregateParameter Item { get; }
    internal UserDefinedAggregateParameterCollection(SqlSmoObject parentInstance);
    public UserDefinedAggregate get_Parent();
    public UserDefinedAggregateParameter get_Item(int index);
    public void CopyTo(UserDefinedAggregateParameter[] array, int index);
    public UserDefinedAggregateParameter get_Item(string name);
    protected virtual Type GetCollectionElementType();
    internal virtual SqlSmoObject GetCollectionElementInstance(ObjectKeyBase key, SqlSmoState state);
    public void Add(UserDefinedAggregateParameter userDefinedAggregateParameter);
    public void Add(UserDefinedAggregateParameter userDefinedAggregateParameter, string insertAtColumnName);
    public void Add(UserDefinedAggregateParameter userDefinedAggregateParameter, int insertAtPosition);
    public void Remove(UserDefinedAggregateParameter userDefinedAggregateParameter);
    public UserDefinedAggregateParameter ItemById(int id);
}
[EvaluationModeAttribute("4")]
[PhysicalFacetAttribute]
[SfcElementAttribute("48")]
public class Microsoft.SqlServer.Management.Smo.UserDefinedDataType : ScriptSchemaObjectBase {
    private static string AddUddt;
    private static string AddUddtNullOption;
    private static string AddUddtOwnerOption80;
    private static string IfUddtNotExists;
    public static string UrnSuffix { get; }
    [SfcKeyAttribute("1")]
[SfcPropertyAttribute("7424")]
public string Name { get; public set; }
    [SfcKeyAttribute("0")]
[SfcPropertyAttribute("7424")]
[CLSCompliantAttribute("False")]
[SfcReferenceAttribute("Microsoft.SqlServer.Management.Smo.Schema", "Microsoft.SqlServer.Management.Smo.SchemaCustomResolver", "Resolve", "Mono.Cecil.CustomAttributeArgument[]")]
public string Schema { get; public set; }
    [SfcObjectAttribute("1", "0", "Microsoft.SqlServer.Management.Smo.ExtendedProperty")]
public ExtendedPropertyCollection ExtendedProperties { get; }
    [SfcObjectAttribute("1", "32")]
public Database Parent { get; public set; }
    internal UserPermissionCollection Permissions { get; }
    private bool Microsoft.SqlServer.Management.Sdk.Sfc.ISfcSupportsDesignMode.IsDesignMode { get; }
    [SfcPropertyAttribute("3072")]
public bool AllowIdentity { get; }
    [SfcPropertyAttribute("3072")]
public string Collation { get; }
    [SfcPropertyAttribute("3328")]
[SfcReferenceAttribute("Microsoft.SqlServer.Management.Smo.Default", "Server[@Name = '{0}']/Database[@Name = '{1}']/Default[@Name='{2}' and @Schema='{3}']", "Mono.Cecil.CustomAttributeArgument[]")]
[CLSCompliantAttribute("False")]
public string Default { get; public set; }
    [SfcPropertyAttribute("3328", "dbo")]
public string DefaultSchema { get; public set; }
    [SfcPropertyAttribute("3072")]
public int ID { get; }
    [SfcPropertyAttribute("7168")]
public bool IsSchemaOwned { get; }
    [SfcPropertyAttribute("7424")]
public int Length { get; public set; }
    [SfcPropertyAttribute("3072")]
public short MaxLength { get; }
    [SfcPropertyAttribute("7424")]
public bool Nullable { get; public set; }
    [SfcPropertyAttribute("7424")]
public int NumericPrecision { get; public set; }
    [SfcPropertyAttribute("7424")]
public int NumericScale { get; public set; }
    [SfcPropertyAttribute("7168")]
[SfcReferenceAttribute("Microsoft.SqlServer.Management.Smo.User", "Server[@Name = '{0}']/Database[@Name = '{1}']/User[@Name = '{2}']", "Mono.Cecil.CustomAttributeArgument[]")]
[SfcReferenceAttribute("Microsoft.SqlServer.Management.Smo.DatabaseRole", "Server[@Name = '{0}']/Database[@Name = '{1}']/Role[@Name = '{2}']", "Mono.Cecil.CustomAttributeArgument[]")]
[SfcReferenceAttribute("Microsoft.SqlServer.Management.Smo.ApplicationRole", "Server[@Name = '{0}']/Database[@Name = '{1}']/ApplicationRole[@Name = '{2}']", "Mono.Cecil.CustomAttributeArgument[]")]
[CLSCompliantAttribute("False")]
public string Owner { get; public set; }
    [SfcPropertyAttribute("3328")]
[SfcReferenceAttribute("Microsoft.SqlServer.Management.Smo.Rule", "Server[@Name = '{0}']/Database[@Name = '{1}']/Rule[@Name='{2}' and @Schema='{3}']", "Mono.Cecil.CustomAttributeArgument[]")]
[CLSCompliantAttribute("False")]
public string Rule { get; public set; }
    [SfcPropertyAttribute("3328", "dbo")]
public string RuleSchema { get; public set; }
    [SfcPropertyAttribute("7424")]
public string SystemType { get; public set; }
    [SfcPropertyAttribute("3072")]
public bool VariableLength { get; }
    internal UserDefinedDataType(AbstractCollectionBase parentColl, ObjectKeyBase key, SqlSmoState state);
    public UserDefinedDataType(Database database, string name);
    public UserDefinedDataType(Database database, string name, string schema);
    public static string get_UrnSuffix();
    public virtual string get_Name();
    public virtual void set_Name(string value);
    public virtual string get_Schema();
    public virtual void set_Schema(string value);
    public sealed virtual ExtendedPropertyCollection get_ExtendedProperties();
    public sealed virtual void Create();
    internal virtual void ScriptCreate(StringCollection queries, ScriptingPreferences sp);
    internal virtual void ScriptOwnerForShiloh(StringBuilder sb, ScriptingPreferences sp, string newOwner);
    private void ScriptDdlGreaterEqual9(StringBuilder sb, ScriptingPreferences sp);
    private void ScriptDdlLess9(StringBuilder sb, ScriptingPreferences sp);
    internal void AddBindings(StringCollection queries, ScriptingPreferences sp);
    private static string GetTypeDefinitionScript(ScriptingPreferences sp, SqlSmoObject oObj, string sTypeNameProperty, bool bSquareBraketsForNative);
    internal static void AppendScriptTypeDefinition(StringBuilder sb, ScriptingPreferences sp, SqlSmoObject oObj, SqlDataType sqlDataType);
    internal static bool IsSystemType(SqlSmoObject oObj, ScriptingPreferences sp);
    public sealed virtual void Drop();
    public sealed virtual void DropIfExists();
    internal virtual void ScriptDrop(StringCollection queries, ScriptingPreferences sp);
    private void AddExistsCheck(StringBuilder sb, string prefix, ScriptingPreferences sp);
    public sealed virtual void Alter();
    public void BindRule(string ruleSchema, string ruleName);
    public void BindRule(string ruleSchema, string ruleName, bool bindColumns);
    public void UnbindRule();
    public void UnbindRule(bool bindColumns);
    public void BindDefault(string defaultSchema, string defaultName);
    public void BindDefault(string defaultSchema, string defaultName, bool bindColumns);
    public void UnbindDefault();
    public void UnbindDefault(bool bindColumns);
    internal virtual void ScriptAlter(StringCollection alterQuery, ScriptingPreferences sp);
    protected virtual void PostCreate();
    internal virtual PropagateInfo[] GetPropagateInfo(PropagateAction action);
    public SqlSmoObject[] EnumBoundColumns();
    internal static bool TypeAllowsLength(string type, StringComparer comparer);
    internal static bool TypeAllowsCollation(string type, StringComparer comparer);
    internal static bool TypeAllowsPrecisionScale(string type, StringComparer comparer);
    internal static bool TypeAllowsScale(string type, StringComparer comparer);
    public sealed virtual void Rename(string newname);
    internal virtual void ScriptRename(StringCollection renameQuery, ScriptingPreferences sp, string newName);
    public sealed virtual StringCollection Script();
    public sealed virtual StringCollection Script(ScriptingOptions scriptingOptions);
    internal virtual void AddScriptPermission(StringCollection query, ScriptingPreferences sp);
    internal static String[] GetScriptFields(Type parentType, ServerVersion version, DatabaseEngineType databaseEngineType, DatabaseEngineEdition databaseEngineEdition, bool defaultTextMode);
    public Database get_Parent();
    public void set_Parent(Database value);
    internal virtual UserPermissionCollection get_Permissions();
    private sealed virtual override bool Microsoft.SqlServer.Management.Sdk.Sfc.ISfcSupportsDesignMode.get_IsDesignMode();
    internal virtual SqlPropertyMetadataProvider GetPropertyMetadataProvider();
    public bool get_AllowIdentity();
    public string get_Collation();
    public string get_Default();
    public void set_Default(string value);
    public string get_DefaultSchema();
    public void set_DefaultSchema(string value);
    public int get_ID();
    public bool get_IsSchemaOwned();
    public int get_Length();
    public void set_Length(int value);
    public short get_MaxLength();
    public bool get_Nullable();
    public void set_Nullable(bool value);
    public int get_NumericPrecision();
    public void set_NumericPrecision(int value);
    public int get_NumericScale();
    public void set_NumericScale(int value);
    public string get_Owner();
    public void set_Owner(string value);
    public string get_Rule();
    public void set_Rule(string value);
    public string get_RuleSchema();
    public void set_RuleSchema(string value);
    public string get_SystemType();
    public void set_SystemType(string value);
    public bool get_VariableLength();
    internal virtual String[] GetNonAlterableProperties();
    internal virtual object GetPropertyDefaultValue(string propname);
    public sealed virtual void Deny(ObjectPermissionSet permission, String[] granteeNames);
    public sealed virtual void Deny(ObjectPermissionSet permission, String[] granteeNames, bool cascade);
    public sealed virtual void Grant(ObjectPermissionSet permission, String[] granteeNames);
    public sealed virtual void Grant(ObjectPermissionSet permission, String[] granteeNames, bool grantGrant);
    public sealed virtual void Grant(ObjectPermissionSet permission, String[] granteeNames, bool grantGrant, string asRole);
    public sealed virtual void Revoke(ObjectPermissionSet permission, String[] granteeNames);
    public sealed virtual void Revoke(ObjectPermissionSet permission, String[] granteeNames, bool revokeGrant, bool cascade);
    public void Revoke(ObjectPermissionSet permission, String[] granteeNames, bool revokeGrant, bool cascade, string asRole);
    public sealed virtual void Deny(ObjectPermissionSet permission, string granteeName);
    public sealed virtual void Deny(ObjectPermissionSet permission, string granteeName, bool cascade);
    public sealed virtual void Grant(ObjectPermissionSet permission, string granteeName);
    public sealed virtual void Grant(ObjectPermissionSet permission, string granteeName, bool grantGrant);
    public sealed virtual void Grant(ObjectPermissionSet permission, string granteeName, bool grantGrant, string asRole);
    public sealed virtual void Revoke(ObjectPermissionSet permission, string granteeName);
    public void Revoke(ObjectPermissionSet permission, string granteeName, bool revokeGrant, bool cascade);
    public sealed virtual void Revoke(ObjectPermissionSet permission, string granteeName, bool revokeGrant, bool cascade, string asRole);
    public sealed virtual ObjectPermissionInfo[] EnumObjectPermissions();
    public sealed virtual ObjectPermissionInfo[] EnumObjectPermissions(string granteeName);
    public sealed virtual ObjectPermissionInfo[] EnumObjectPermissions(ObjectPermissionSet permissions);
    public sealed virtual ObjectPermissionInfo[] EnumObjectPermissions(string granteeName, ObjectPermissionSet permissions);
}
[DefaultMemberAttribute("Item")]
public class Microsoft.SqlServer.Management.Smo.UserDefinedDataTypeCollection : SchemaCollectionBase {
    public Database Parent { get; }
    public UserDefinedDataType Item { get; }
    public UserDefinedDataType Item { get; }
    public UserDefinedDataType Item { get; }
    internal UserDefinedDataTypeCollection(SqlSmoObject parentInstance);
    public Database get_Parent();
    public UserDefinedDataType get_Item(int index);
    public UserDefinedDataType get_Item(string name);
    public UserDefinedDataType get_Item(string name, string schema);
    public void CopyTo(UserDefinedDataType[] array, int index);
    public UserDefinedDataType ItemById(int id);
    protected virtual Type GetCollectionElementType();
    internal virtual SqlSmoObject GetCollectionElementInstance(ObjectKeyBase key, SqlSmoState state);
    public void Add(UserDefinedDataType userDefinedDataType);
    internal SqlSmoObject GetObjectByName(string name);
}
public class Microsoft.SqlServer.Management.Smo.UserDefinedDataTypeResolver : object {
    public static object Resolve(object instance, Object[] parameters);
    public static object ResolveUrn(object instance, Object[] parameters);
}
[StateChangeEventAttribute("CREATE_FUNCTION", "FUNCTION")]
[StateChangeEventAttribute("ALTER_FUNCTION", "FUNCTION")]
[StateChangeEventAttribute("RENAME", "FUNCTION")]
[StateChangeEventAttribute("ALTER_AUTHORIZATION_DATABASE", "FUNCTION")]
[StateChangeEventAttribute("ALTER_SCHEMA", "FUNCTION")]
[EvaluationModeAttribute("7")]
[PhysicalFacetAttribute("1")]
[SfcElementAttribute("48")]
public class Microsoft.SqlServer.Management.Smo.UserDefinedFunction : ScriptSchemaObjectBase {
    private UserDefinedFunctionParameterCollection m_UserDefinedFunctionParams;
    private IndexCollection m_Indexes;
    private ColumnCollection m_Columns;
    private OrderColumnCollection m_OrderColumns;
    private CheckCollection m_Checks;
    private DataType dataType;
    private UserDefinedFunctionEvents events;
    [SfcObjectAttribute("1", "0", "Microsoft.SqlServer.Management.Smo.ExtendedProperty")]
public ExtendedPropertyCollection ExtendedProperties { get; }
    [SfcObjectAttribute("1", "0", "Microsoft.SqlServer.Management.Smo.UserDefinedFunctionParameter", "48")]
public UserDefinedFunctionParameterCollection Parameters { get; }
    public static string UrnSuffix { get; }
    [SfcObjectAttribute("1", "0", "Microsoft.SqlServer.Management.Smo.Index", "32")]
public IndexCollection Indexes { get; }
    [SfcObjectAttribute("1", "0", "Microsoft.SqlServer.Management.Smo.Column", "48")]
public ColumnCollection Columns { get; }
    [SfcObjectAttribute("1", "0", "Microsoft.SqlServer.Management.Smo.OrderColumn")]
public OrderColumnCollection OrderColumns { get; }
    [SfcObjectAttribute("1", "0", "Microsoft.SqlServer.Management.Smo.Check", "32")]
public CheckCollection Checks { get; }
    [SfcKeyAttribute("1")]
[SfcPropertyAttribute("7424")]
public string Name { get; public set; }
    [SfcKeyAttribute("0")]
[SfcPropertyAttribute("7424")]
[CLSCompliantAttribute("False")]
[SfcReferenceAttribute("Microsoft.SqlServer.Management.Smo.Schema", "Microsoft.SqlServer.Management.Smo.SchemaCustomResolver", "Resolve", "Mono.Cecil.CustomAttributeArgument[]")]
public string Schema { get; public set; }
    [CLSCompliantAttribute("False")]
[SfcReferenceAttribute("Microsoft.SqlServer.Management.Smo.UserDefinedType", "Microsoft.SqlServer.Management.Smo.UserDefinedTypeResolver", "Resolve", "Mono.Cecil.CustomAttributeArgument[]")]
[SfcReferenceAttribute("Microsoft.SqlServer.Management.Smo.UserDefinedDataType", "Microsoft.SqlServer.Management.Smo.UserDefinedDataTypeResolver", "Resolve", "Mono.Cecil.CustomAttributeArgument[]")]
[SfcPropertyAttribute("7168")]
public DataType DataType { get; public set; }
    [SfcPropertyAttribute("7200")]
public string TextBody { get; public set; }
    [SfcPropertyAttribute("3104")]
public string TextHeader { get; public set; }
    [SfcPropertyAttribute("7168")]
public bool TextMode { get; public set; }
    [SfcObjectAttribute("1", "32")]
public Database Parent { get; public set; }
    internal UserPermissionCollection Permissions { get; }
    private bool Microsoft.SqlServer.Management.Sdk.Sfc.ISfcSupportsDesignMode.IsDesignMode { get; }
    [SfcPropertyAttribute("7168")]
public bool AnsiNullsStatus { get; public set; }
    [SfcPropertyAttribute("7168")]
[SfcReferenceAttribute("Microsoft.SqlServer.Management.Smo.SqlAssembly", "Server[@Name = '{0}']/Database[@Name = '{1}']/SqlAssembly[@Name = '{2}']", "Mono.Cecil.CustomAttributeArgument[]")]
[CLSCompliantAttribute("False")]
public string AssemblyName { get; public set; }
    [SfcPropertyAttribute("7168")]
public string ClassName { get; public set; }
    [SfcPropertyAttribute("3072")]
public DateTime CreateDate { get; }
    [DmfIgnorePropertyAttribute]
[SfcPropertyAttribute("3072")]
public DateTime DateLastModified { get; }
    [SfcPropertyAttribute("11264")]
public ExecutionContext ExecutionContext { get; public set; }
    [SfcPropertyAttribute("11264")]
[SfcReferenceAttribute("Microsoft.SqlServer.Management.Smo.User", "Server[@Name = '{0}']/Database[@Name = '{1}']/User[@Name = '{2}']", "Mono.Cecil.CustomAttributeArgument[]")]
[CLSCompliantAttribute("False")]
public string ExecutionContextPrincipal { get; public set; }
    [SfcPropertyAttribute("7168")]
public UserDefinedFunctionType FunctionType { get; public set; }
    [SfcPropertyAttribute("3072")]
public int ID { get; }
    [SfcPropertyAttribute("7168", "TransactSql")]
public ImplementationType ImplementationType { get; public set; }
    [SfcPropertyAttribute("3328")]
public bool InlineType { get; public set; }
    [SfcPropertyAttribute("3072")]
public bool IsDeterministic { get; }
    [SfcPropertyAttribute("11264", "false")]
public bool IsEncrypted { get; public set; }
    [SfcPropertyAttribute("3072")]
public bool IsInlineable { get; }
    [SfcPropertyAttribute("3328")]
public bool IsNativelyCompiled { get; public set; }
    [SfcPropertyAttribute("7168")]
public bool IsSchemaBound { get; public set; }
    [SfcPropertyAttribute("7168")]
public bool IsSchemaOwned { get; }
    [SfcPropertyAttribute("3072")]
public bool IsSystemObject { get; }
    [SfcPropertyAttribute("7168")]
public string MethodName { get; public set; }
    [SfcPropertyAttribute("7168")]
[SfcReferenceAttribute("Microsoft.SqlServer.Management.Smo.User", "Server[@Name = '{0}']/Database[@Name = '{1}']/User[@Name = '{2}']", "Mono.Cecil.CustomAttributeArgument[]")]
[SfcReferenceAttribute("Microsoft.SqlServer.Management.Smo.DatabaseRole", "Server[@Name = '{0}']/Database[@Name = '{1}']/Role[@Name = '{2}']", "Mono.Cecil.CustomAttributeArgument[]")]
[SfcReferenceAttribute("Microsoft.SqlServer.Management.Smo.ApplicationRole", "Server[@Name = '{0}']/Database[@Name = '{1}']/ApplicationRole[@Name = '{2}']", "Mono.Cecil.CustomAttributeArgument[]")]
[CLSCompliantAttribute("False")]
public string Owner { get; public set; }
    [SfcPropertyAttribute("7168")]
public bool QuotedIdentifierStatus { get; public set; }
    [SfcPropertyAttribute("7168")]
public bool ReturnsNullOnNullInput { get; public set; }
    [SfcPropertyAttribute("7168")]
public string TableVariableName { get; public set; }
    public UserDefinedFunctionEvents Events { get; }
    internal UserDefinedFunction(AbstractCollectionBase parentColl, ObjectKeyBase key, SqlSmoState state);
    public UserDefinedFunction(Database database, string name);
    public UserDefinedFunction(Database database, string name, string schema);
    public void ChangeSchema(string newSchema);
    public sealed virtual ExtendedPropertyCollection get_ExtendedProperties();
    public UserDefinedFunctionParameterCollection get_Parameters();
    internal virtual void AddScriptPermission(StringCollection query, ScriptingPreferences sp);
    public static string get_UrnSuffix();
    private void AddParam(StringBuilder sb, ScriptingPreferences sp, UserDefinedFunctionParameter spp);
    private void ScriptUDF(StringCollection queries, ScriptingPreferences sp, ScriptHeaderType scriptHeaderType);
    public sealed virtual void Create();
    internal virtual void ScriptCreate(StringCollection queries, ScriptingPreferences sp);
    public sealed virtual void CreateOrAlter();
    internal virtual void ScriptCreateOrAlter(StringCollection queries, ScriptingPreferences sp);
    public sealed virtual void Drop();
    public sealed virtual void DropIfExists();
    internal virtual void ScriptDrop(StringCollection queries, ScriptingPreferences sp);
    public sealed virtual void Alter();
    private bool ShouldScriptBodyAtAlter();
    internal virtual void ScriptAlter(StringCollection alterQuery, ScriptingPreferences sp);
    protected virtual bool IsObjectDirty();
    internal virtual PropagateInfo[] GetPropagateInfo(PropagateAction action);
    public sealed virtual void Rename(string newname);
    internal virtual void ScriptRename(StringCollection renameQuery, ScriptingPreferences sp, string newName);
    public sealed virtual StringCollection Script();
    public sealed virtual StringCollection Script(ScriptingOptions scriptingOptions);
    private void ScriptReturnType(ScriptingPreferences sp, StringBuilder sb, UserDefinedFunctionType type);
    public IndexCollection get_Indexes();
    public ColumnCollection get_Columns();
    public OrderColumnCollection get_OrderColumns();
    public CheckCollection get_Checks();
    public virtual string get_Name();
    public virtual void set_Name(string value);
    public virtual string get_Schema();
    public virtual void set_Schema(string value);
    public DataType get_DataType();
    public void set_DataType(DataType value);
    public virtual void Refresh();
    internal static String[] GetScriptFields(Type parentType, ServerVersion version, DatabaseEngineType databaseEngineType, DatabaseEngineEdition databaseEngineEdition, bool defaultTextMode);
    public sealed virtual string ScriptHeader(bool forAlter);
    public sealed virtual string ScriptHeader(ScriptHeaderType scriptHeaderType);
    public sealed virtual string get_TextBody();
    public sealed virtual void set_TextBody(string value);
    public sealed virtual string get_TextHeader();
    public sealed virtual void set_TextHeader(string value);
    public sealed virtual bool get_TextMode();
    public sealed virtual void set_TextMode(bool value);
    internal virtual void ValidateProperty(Property prop, object value);
    protected virtual void PostCreate();
    public Database get_Parent();
    public void set_Parent(Database value);
    internal virtual UserPermissionCollection get_Permissions();
    private sealed virtual override bool Microsoft.SqlServer.Management.Sdk.Sfc.ISfcSupportsDesignMode.get_IsDesignMode();
    internal virtual SqlPropertyMetadataProvider GetPropertyMetadataProvider();
    public bool get_AnsiNullsStatus();
    public void set_AnsiNullsStatus(bool value);
    public string get_AssemblyName();
    public void set_AssemblyName(string value);
    public string get_ClassName();
    public void set_ClassName(string value);
    public DateTime get_CreateDate();
    public DateTime get_DateLastModified();
    public ExecutionContext get_ExecutionContext();
    public void set_ExecutionContext(ExecutionContext value);
    public string get_ExecutionContextPrincipal();
    public void set_ExecutionContextPrincipal(string value);
    public UserDefinedFunctionType get_FunctionType();
    public void set_FunctionType(UserDefinedFunctionType value);
    public int get_ID();
    public ImplementationType get_ImplementationType();
    public void set_ImplementationType(ImplementationType value);
    public bool get_InlineType();
    public void set_InlineType(bool value);
    public bool get_IsDeterministic();
    public bool get_IsEncrypted();
    public void set_IsEncrypted(bool value);
    public bool get_IsInlineable();
    public bool get_IsNativelyCompiled();
    public void set_IsNativelyCompiled(bool value);
    public bool get_IsSchemaBound();
    public void set_IsSchemaBound(bool value);
    public bool get_IsSchemaOwned();
    public bool get_IsSystemObject();
    public string get_MethodName();
    public void set_MethodName(string value);
    public string get_Owner();
    public void set_Owner(string value);
    public bool get_QuotedIdentifierStatus();
    public void set_QuotedIdentifierStatus(bool value);
    public bool get_ReturnsNullOnNullInput();
    public void set_ReturnsNullOnNullInput(bool value);
    public string get_TableVariableName();
    public void set_TableVariableName(string value);
    internal virtual String[] GetNonAlterableProperties();
    internal virtual object GetPropertyDefaultValue(string propname);
    public sealed virtual void Deny(ObjectPermissionSet permission, String[] granteeNames);
    public sealed virtual void Deny(ObjectPermissionSet permission, String[] granteeNames, bool cascade);
    public sealed virtual void Grant(ObjectPermissionSet permission, String[] granteeNames);
    public sealed virtual void Grant(ObjectPermissionSet permission, String[] granteeNames, bool grantGrant);
    public sealed virtual void Grant(ObjectPermissionSet permission, String[] granteeNames, bool grantGrant, string asRole);
    public sealed virtual void Revoke(ObjectPermissionSet permission, String[] granteeNames);
    public sealed virtual void Revoke(ObjectPermissionSet permission, String[] granteeNames, bool revokeGrant, bool cascade);
    public void Revoke(ObjectPermissionSet permission, String[] granteeNames, bool revokeGrant, bool cascade, string asRole);
    public sealed virtual void Deny(ObjectPermissionSet permission, string granteeName);
    public sealed virtual void Deny(ObjectPermissionSet permission, string granteeName, bool cascade);
    public sealed virtual void Grant(ObjectPermissionSet permission, string granteeName);
    public sealed virtual void Grant(ObjectPermissionSet permission, string granteeName, bool grantGrant);
    public sealed virtual void Grant(ObjectPermissionSet permission, string granteeName, bool grantGrant, string asRole);
    public sealed virtual void Revoke(ObjectPermissionSet permission, string granteeName);
    public void Revoke(ObjectPermissionSet permission, string granteeName, bool revokeGrant, bool cascade);
    public sealed virtual void Revoke(ObjectPermissionSet permission, string granteeName, bool revokeGrant, bool cascade, string asRole);
    public sealed virtual ObjectPermissionInfo[] EnumObjectPermissions();
    public sealed virtual ObjectPermissionInfo[] EnumObjectPermissions(string granteeName);
    public sealed virtual ObjectPermissionInfo[] EnumObjectPermissions(ObjectPermissionSet permissions);
    public sealed virtual ObjectPermissionInfo[] EnumObjectPermissions(string granteeName, ObjectPermissionSet permissions);
    public sealed virtual void Deny(ObjectPermissionSet permission, String[] granteeNames, String[] columnNames);
    public sealed virtual void Deny(ObjectPermissionSet permission, String[] granteeNames, String[] columnNames, bool cascade);
    public sealed virtual void Grant(ObjectPermissionSet permission, String[] granteeNames, String[] columnNames);
    public sealed virtual void Grant(ObjectPermissionSet permission, String[] granteeNames, String[] columnNames, bool grantGrant);
    public sealed virtual void Grant(ObjectPermissionSet permission, String[] granteeNames, String[] columnNames, bool grantGrant, string asRole);
    public sealed virtual void Revoke(ObjectPermissionSet permission, String[] granteeNames, String[] columnNames);
    public sealed virtual void Revoke(ObjectPermissionSet permission, String[] granteeNames, String[] columnNames, bool revokeGrant, bool cascade);
    public sealed virtual void Revoke(ObjectPermissionSet permission, String[] granteeNames, String[] columnNames, bool revokeGrant, bool cascade, string asRole);
    public sealed virtual void Deny(ObjectPermissionSet permission, string granteeName, String[] columnNames);
    public sealed virtual void Deny(ObjectPermissionSet permission, string granteeName, String[] columnNames, bool cascade);
    public sealed virtual void Grant(ObjectPermissionSet permission, string granteeName, String[] columnNames);
    public sealed virtual void Grant(ObjectPermissionSet permission, string granteeName, String[] columnNames, bool grantGrant);
    public sealed virtual void Grant(ObjectPermissionSet permission, string granteeName, String[] columnNames, bool grantGrant, string asRole);
    public sealed virtual void Revoke(ObjectPermissionSet permission, string granteeName, String[] columnNames);
    public sealed virtual void Revoke(ObjectPermissionSet permission, string granteeName, String[] columnNames, bool revokeGrant, bool cascade);
    public sealed virtual void Revoke(ObjectPermissionSet permission, string granteeName, String[] columnNames, bool revokeGrant, bool cascade, string asRole);
    public ObjectPermissionInfo[] EnumColumnPermissions();
    public sealed virtual ObjectPermissionInfo[] EnumColumnPermissions(string granteeName);
    public ObjectPermissionInfo[] EnumColumnPermissions(ObjectPermissionSet permissions);
    public sealed virtual ObjectPermissionInfo[] EnumColumnPermissions(string granteeName, ObjectPermissionSet permissions);
    public UserDefinedFunctionEvents get_Events();
}
[DefaultMemberAttribute("Item")]
public class Microsoft.SqlServer.Management.Smo.UserDefinedFunctionCollection : SchemaCollectionBase {
    public Database Parent { get; }
    public UserDefinedFunction Item { get; }
    public UserDefinedFunction Item { get; }
    public UserDefinedFunction Item { get; }
    internal UserDefinedFunctionCollection(SqlSmoObject parentInstance);
    public Database get_Parent();
    public UserDefinedFunction get_Item(int index);
    public UserDefinedFunction get_Item(string name);
    public UserDefinedFunction get_Item(string name, string schema);
    public void CopyTo(UserDefinedFunction[] array, int index);
    public UserDefinedFunction ItemById(int id);
    protected virtual Type GetCollectionElementType();
    internal virtual SqlSmoObject GetCollectionElementInstance(ObjectKeyBase key, SqlSmoState state);
    public void Add(UserDefinedFunction userDefinedFunction);
    internal SqlSmoObject GetObjectByName(string name);
}
public class Microsoft.SqlServer.Management.Smo.UserDefinedFunctionEvent : object {
    private UserDefinedFunctionEventValues m_value;
    internal UserDefinedFunctionEventValues Value { get; }
    public static UserDefinedFunctionEvent AlterFunction { get; }
    public static UserDefinedFunctionEvent DropFunction { get; }
    internal UserDefinedFunctionEvent(UserDefinedFunctionEventValues eventValue);
    internal UserDefinedFunctionEventValues get_Value();
    public static UserDefinedFunctionEventSet op_Implicit(UserDefinedFunctionEvent eventValue);
    public static UserDefinedFunctionEventSet op_Addition(UserDefinedFunctionEvent eventLeft, UserDefinedFunctionEvent eventRight);
    public static UserDefinedFunctionEventSet Add(UserDefinedFunctionEvent eventLeft, UserDefinedFunctionEvent eventRight);
    public static UserDefinedFunctionEventSet op_BitwiseOr(UserDefinedFunctionEvent eventLeft, UserDefinedFunctionEvent eventRight);
    public static UserDefinedFunctionEventSet BitwiseOr(UserDefinedFunctionEvent eventLeft, UserDefinedFunctionEvent eventRight);
    public virtual string ToString();
    public static bool op_Equality(UserDefinedFunctionEvent a, UserDefinedFunctionEvent b);
    public static bool op_Inequality(UserDefinedFunctionEvent a, UserDefinedFunctionEvent b);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static UserDefinedFunctionEvent get_AlterFunction();
    public static UserDefinedFunctionEvent get_DropFunction();
}
public class Microsoft.SqlServer.Management.Smo.UserDefinedFunctionEvents : object {
    private UserDefinedFunctionEventsWorker serverEventsWorker;
    private UserDefinedFunction parent;
    internal UserDefinedFunctionEvents(UserDefinedFunction parent);
    public UserDefinedFunctionEventSet GetEventSelection();
    public void SubscribeToEvents(UserDefinedFunctionEventSet events);
    public void SubscribeToEvents(UserDefinedFunctionEventSet events, ServerEventHandler eventHandler);
    public void UnsubscribeFromEvents(UserDefinedFunctionEventSet events);
    public void UnsubscribeAllEvents();
    public void StartEvents();
    public void StopEvents();
    public void add_ServerEvent(ServerEventHandler value);
    public void remove_ServerEvent(ServerEventHandler value);
    private void InitializeEvents();
}
public class Microsoft.SqlServer.Management.Smo.UserDefinedFunctionEventSet : EventSetBase {
    public int NumberOfElements { get; }
    public bool AlterFunction { get; public set; }
    public bool DropFunction { get; public set; }
    public UserDefinedFunctionEventSet(UserDefinedFunctionEventSet eventSet);
    public UserDefinedFunctionEventSet(UserDefinedFunctionEvent anEvent);
    public UserDefinedFunctionEventSet(UserDefinedFunctionEvent[] events);
    internal UserDefinedFunctionEventSet(BitArray storage);
    public virtual EventSetBase Copy();
    internal void SetBit(UserDefinedFunctionEvent anEvent);
    internal void ResetBit(UserDefinedFunctionEvent anEvent);
    public UserDefinedFunctionEventSet Add(UserDefinedFunctionEvent anEvent);
    public UserDefinedFunctionEventSet Remove(UserDefinedFunctionEvent anEvent);
    public static UserDefinedFunctionEventSet op_Addition(UserDefinedFunctionEventSet eventSet, UserDefinedFunctionEvent anEvent);
    public static UserDefinedFunctionEventSet Add(UserDefinedFunctionEventSet eventSet, UserDefinedFunctionEvent anEvent);
    public static UserDefinedFunctionEventSet op_Subtraction(UserDefinedFunctionEventSet eventSet, UserDefinedFunctionEvent anEvent);
    public static UserDefinedFunctionEventSet Subtract(UserDefinedFunctionEventSet eventSet, UserDefinedFunctionEvent anEvent);
    public virtual int get_NumberOfElements();
    public virtual string ToString();
    public bool get_AlterFunction();
    public void set_AlterFunction(bool value);
    public bool get_DropFunction();
    public void set_DropFunction(bool value);
}
internal class Microsoft.SqlServer.Management.Smo.UserDefinedFunctionEventsWorker : ObjectInSchemaEventsWorker {
    protected string ObjectType { get; }
    public UserDefinedFunctionEventsWorker(UserDefinedFunction target);
    protected virtual string get_ObjectType();
}
internal enum Microsoft.SqlServer.Management.Smo.UserDefinedFunctionEventValues : Enum {
    public int value__;
    public static UserDefinedFunctionEventValues AlterFunction;
    public static UserDefinedFunctionEventValues DropFunction;
}
[SfcElementTypeAttribute("Param")]
[SfcElementAttribute("48")]
public class Microsoft.SqlServer.Management.Smo.UserDefinedFunctionParameter : Parameter {
    [SfcObjectAttribute("1", "32")]
public UserDefinedFunction Parent { get; public set; }
    private bool Microsoft.SqlServer.Management.Sdk.Sfc.ISfcSupportsDesignMode.IsDesignMode { get; }
    internal UserDefinedFunctionParameter(AbstractCollectionBase parent, ObjectKeyBase key, SqlSmoState state);
    public UserDefinedFunctionParameter(UserDefinedFunction userDefinedFunction, string name);
    public UserDefinedFunctionParameter(UserDefinedFunction userDefinedFunction, string name, DataType dataType);
    internal virtual void ValidateProperty(Property prop, object value);
    internal static String[] GetScriptFields(Type parentType, ServerVersion version, DatabaseEngineType databaseEngineType, DatabaseEngineEdition databaseEngineEdition, bool defaultTextMode);
    protected virtual bool isParentClrImplemented();
    public UserDefinedFunction get_Parent();
    public void set_Parent(UserDefinedFunction value);
    private sealed virtual override bool Microsoft.SqlServer.Management.Sdk.Sfc.ISfcSupportsDesignMode.get_IsDesignMode();
    internal virtual SqlPropertyMetadataProvider GetPropertyMetadataProvider();
}
[DefaultMemberAttribute("Item")]
public class Microsoft.SqlServer.Management.Smo.UserDefinedFunctionParameterCollection : ParameterCollectionBase {
    public UserDefinedFunction Parent { get; }
    public UserDefinedFunctionParameter Item { get; }
    public UserDefinedFunctionParameter Item { get; }
    internal UserDefinedFunctionParameterCollection(SqlSmoObject parentInstance);
    public UserDefinedFunction get_Parent();
    public UserDefinedFunctionParameter get_Item(int index);
    public void CopyTo(UserDefinedFunctionParameter[] array, int index);
    public UserDefinedFunctionParameter get_Item(string name);
    protected virtual Type GetCollectionElementType();
    internal virtual SqlSmoObject GetCollectionElementInstance(ObjectKeyBase key, SqlSmoState state);
    public void Add(UserDefinedFunctionParameter userDefinedFunctionParameter);
    public void Add(UserDefinedFunctionParameter userDefinedFunctionParameter, string insertAtColumnName);
    public void Add(UserDefinedFunctionParameter userDefinedFunctionParameter, int insertAtPosition);
    public void Remove(UserDefinedFunctionParameter userDefinedFunctionParameter);
    public UserDefinedFunctionParameter ItemById(int id);
}
[SfcElementAttribute("16")]
public class Microsoft.SqlServer.Management.Smo.UserDefinedMessage : MessageObjectBase {
    [SfcKeyAttribute("1")]
[SfcPropertyAttribute("1280")]
public int ID { get; public set; }
    [SfcKeyAttribute("0")]
[SfcPropertyAttribute("1280")]
public string Language { get; public set; }
    [SfcObjectAttribute("1")]
public Server Parent { get; public set; }
    public static string UrnSuffix { get; }
    [SfcPropertyAttribute("1024")]
public bool IsLogged { get; public set; }
    [SfcPropertyAttribute("1280")]
public int LanguageID { get; public set; }
    [SfcPropertyAttribute("1024")]
public int Severity { get; public set; }
    [SfcPropertyAttribute("1024")]
public string Text { get; public set; }
    internal UserDefinedMessage(AbstractCollectionBase parentColl, ObjectKeyBase key, SqlSmoState state);
    public UserDefinedMessage(Server server, int id);
    public UserDefinedMessage(Server server, int id, string language);
    public UserDefinedMessage(Server server, int id, string language, int severity, string message);
    public UserDefinedMessage(Server server, int id, string language, int severity, string message, bool isLogged);
    public UserDefinedMessage(Server server, int id, int language, int severity, string message);
    public UserDefinedMessage(Server server, int id, int language, int severity, string message, bool isLogged);
    public int get_ID();
    public void set_ID(int value);
    public string get_Language();
    public void set_Language(string value);
    internal void ValidateState();
    internal void ValidateLanguage(string language);
    public Server get_Parent();
    public void set_Parent(Server value);
    public static string get_UrnSuffix();
    public sealed virtual void Create();
    internal virtual void ScriptCreate(StringCollection queries, ScriptingPreferences sp);
    public sealed virtual void Alter();
    internal virtual void ScriptAlter(StringCollection alterQuery, ScriptingPreferences sp);
    public sealed virtual void Drop();
    internal virtual void ScriptDrop(StringCollection queries, ScriptingPreferences sp);
    protected virtual void PostDrop();
    public sealed virtual StringCollection Script();
    public sealed virtual StringCollection Script(ScriptingOptions scriptingOptions);
    internal static String[] GetScriptFields(Type parentType, ServerVersion version, DatabaseEngineType databaseEngineType, DatabaseEngineEdition databaseEngineEdition, bool defaultTextMode);
    internal virtual SqlPropertyMetadataProvider GetPropertyMetadataProvider();
    public bool get_IsLogged();
    public void set_IsLogged(bool value);
    public int get_LanguageID();
    public void set_LanguageID(int value);
    public int get_Severity();
    public void set_Severity(int value);
    public string get_Text();
    public void set_Text(string value);
    internal virtual String[] GetNonAlterableProperties();
}
[DefaultMemberAttribute("Item")]
public class Microsoft.SqlServer.Management.Smo.UserDefinedMessageCollection : MessageCollectionBase {
    public Server Parent { get; }
    public UserDefinedMessage Item { get; }
    public UserDefinedMessage Item { get; }
    internal UserDefinedMessageCollection(SqlSmoObject parentInstance);
    public Server get_Parent();
    public UserDefinedMessage get_Item(int index);
    public UserDefinedMessage get_Item(int id, string language);
    public UserDefinedMessage ItemByIdAndLanguage(int id, string language);
    public UserDefinedMessage ItemByIdAndLanguageId(int id, int languageId);
    protected virtual Type GetCollectionElementType();
    internal virtual SqlSmoObject GetCollectionElementInstance(ObjectKeyBase key, SqlSmoState state);
    public void CopyTo(UserDefinedMessage[] array, int index);
}
[EvaluationModeAttribute("4")]
[PhysicalFacetAttribute("1")]
[SfcElementAttribute("48")]
public class Microsoft.SqlServer.Management.Smo.UserDefinedTableType : TableViewTableTypeBase {
    private CheckCollection m_checks;
    public static string UrnSuffix { get; }
    [SfcKeyAttribute("0")]
[SfcReferenceAttribute("Microsoft.SqlServer.Management.Smo.Schema", "Microsoft.SqlServer.Management.Smo.SchemaCustomResolver", "Resolve", "Mono.Cecil.CustomAttributeArgument[]")]
[SfcPropertyAttribute("7424")]
[CLSCompliantAttribute("False")]
public string Schema { get; public set; }
    [SfcKeyAttribute("1")]
[SfcPropertyAttribute("7424")]
public string Name { get; public set; }
    [SfcObjectAttribute("1", "0", "Microsoft.SqlServer.Management.Smo.Check", "32")]
public CheckCollection Checks { get; }
    [SfcObjectAttribute("1", "32")]
public Database Parent { get; public set; }
    internal UserPermissionCollection Permissions { get; }
    private bool Microsoft.SqlServer.Management.Sdk.Sfc.ISfcSupportsDesignMode.IsDesignMode { get; }
    [SfcPropertyAttribute("3072")]
public string Collation { get; }
    [SfcPropertyAttribute("3072")]
public DateTime CreateDate { get; }
    [SfcPropertyAttribute("3072")]
public DateTime DateLastModified { get; }
    [SfcPropertyAttribute("3072")]
public int ID { get; }
    [SfcPropertyAttribute("3328")]
public bool IsMemoryOptimized { get; public set; }
    [SfcPropertyAttribute("7168")]
public bool IsSchemaOwned { get; }
    [SfcPropertyAttribute("7424")]
public bool IsUserDefined { get; public set; }
    [SfcPropertyAttribute("3072")]
public short MaxLength { get; }
    [SfcPropertyAttribute("3328")]
public bool Nullable { get; public set; }
    [SfcPropertyAttribute("7168")]
[SfcReferenceAttribute("Microsoft.SqlServer.Management.Smo.User", "Server[@Name = '{0}']/Database[@Name = '{1}']/User[@Name = '{2}']", "Mono.Cecil.CustomAttributeArgument[]")]
[SfcReferenceAttribute("Microsoft.SqlServer.Management.Smo.DatabaseRole", "Server[@Name = '{0}']/Database[@Name = '{1}']/Role[@Name = '{2}']", "Mono.Cecil.CustomAttributeArgument[]")]
[SfcReferenceAttribute("Microsoft.SqlServer.Management.Smo.ApplicationRole", "Server[@Name = '{0}']/Database[@Name = '{1}']/ApplicationRole[@Name = '{2}']", "Mono.Cecil.CustomAttributeArgument[]")]
[CLSCompliantAttribute("False")]
public string Owner { get; public set; }
    internal UserDefinedTableType(AbstractCollectionBase parentColl, ObjectKeyBase key, SqlSmoState state);
    public UserDefinedTableType(Database database, string name);
    public UserDefinedTableType(Database database, string name, string schema);
    public static string get_UrnSuffix();
    public virtual string get_Schema();
    public virtual void set_Schema(string value);
    public virtual string get_Name();
    public virtual void set_Name(string value);
    public CheckCollection get_Checks();
    public sealed virtual void Create();
    internal virtual PropagateInfo[] GetPropagateInfo(PropagateAction action);
    internal virtual void ScriptCreate(StringCollection query, ScriptingPreferences sp);
    protected virtual void PostCreate();
    public sealed virtual void Alter();
    internal virtual void ScriptAlter(StringCollection query, ScriptingPreferences sp);
    public sealed virtual void Rename(string newname);
    internal virtual void ScriptRename(StringCollection renameQuery, ScriptingPreferences sp, string newName);
    public sealed virtual void Drop();
    public sealed virtual void DropIfExists();
    internal virtual void ScriptDrop(StringCollection dropQuery, ScriptingPreferences sp);
    public sealed virtual StringCollection Script();
    public sealed virtual StringCollection Script(ScriptingOptions so);
    internal static String[] GetScriptFields(Type parentType, ServerVersion version, DatabaseEngineType databaseEngineType, DatabaseEngineEdition databaseEngineEdition, bool defaultTextMode);
    public Database get_Parent();
    public void set_Parent(Database value);
    internal virtual UserPermissionCollection get_Permissions();
    private sealed virtual override bool Microsoft.SqlServer.Management.Sdk.Sfc.ISfcSupportsDesignMode.get_IsDesignMode();
    internal virtual SqlPropertyMetadataProvider GetPropertyMetadataProvider();
    public string get_Collation();
    public DateTime get_CreateDate();
    public DateTime get_DateLastModified();
    public int get_ID();
    public bool get_IsMemoryOptimized();
    public void set_IsMemoryOptimized(bool value);
    public bool get_IsSchemaOwned();
    public bool get_IsUserDefined();
    public void set_IsUserDefined(bool value);
    public short get_MaxLength();
    public bool get_Nullable();
    public void set_Nullable(bool value);
    public string get_Owner();
    public void set_Owner(string value);
    internal virtual String[] GetNonAlterableProperties();
    public sealed virtual void Deny(ObjectPermissionSet permission, String[] granteeNames);
    public sealed virtual void Deny(ObjectPermissionSet permission, String[] granteeNames, bool cascade);
    public sealed virtual void Grant(ObjectPermissionSet permission, String[] granteeNames);
    public sealed virtual void Grant(ObjectPermissionSet permission, String[] granteeNames, bool grantGrant);
    public sealed virtual void Grant(ObjectPermissionSet permission, String[] granteeNames, bool grantGrant, string asRole);
    public sealed virtual void Revoke(ObjectPermissionSet permission, String[] granteeNames);
    public sealed virtual void Revoke(ObjectPermissionSet permission, String[] granteeNames, bool revokeGrant, bool cascade);
    public void Revoke(ObjectPermissionSet permission, String[] granteeNames, bool revokeGrant, bool cascade, string asRole);
    public sealed virtual void Deny(ObjectPermissionSet permission, string granteeName);
    public sealed virtual void Deny(ObjectPermissionSet permission, string granteeName, bool cascade);
    public sealed virtual void Grant(ObjectPermissionSet permission, string granteeName);
    public sealed virtual void Grant(ObjectPermissionSet permission, string granteeName, bool grantGrant);
    public sealed virtual void Grant(ObjectPermissionSet permission, string granteeName, bool grantGrant, string asRole);
    public sealed virtual void Revoke(ObjectPermissionSet permission, string granteeName);
    public void Revoke(ObjectPermissionSet permission, string granteeName, bool revokeGrant, bool cascade);
    public sealed virtual void Revoke(ObjectPermissionSet permission, string granteeName, bool revokeGrant, bool cascade, string asRole);
    public sealed virtual ObjectPermissionInfo[] EnumObjectPermissions();
    public sealed virtual ObjectPermissionInfo[] EnumObjectPermissions(string granteeName);
    public sealed virtual ObjectPermissionInfo[] EnumObjectPermissions(ObjectPermissionSet permissions);
    public sealed virtual ObjectPermissionInfo[] EnumObjectPermissions(string granteeName, ObjectPermissionSet permissions);
}
[DefaultMemberAttribute("Item")]
public class Microsoft.SqlServer.Management.Smo.UserDefinedTableTypeCollection : SchemaCollectionBase {
    public Database Parent { get; }
    public UserDefinedTableType Item { get; }
    public UserDefinedTableType Item { get; }
    public UserDefinedTableType Item { get; }
    internal UserDefinedTableTypeCollection(SqlSmoObject parentInstance);
    public Database get_Parent();
    public UserDefinedTableType get_Item(int index);
    public UserDefinedTableType get_Item(string name);
    public UserDefinedTableType get_Item(string name, string schema);
    public void CopyTo(UserDefinedTableType[] array, int index);
    public UserDefinedTableType ItemById(int id);
    protected virtual Type GetCollectionElementType();
    internal virtual SqlSmoObject GetCollectionElementInstance(ObjectKeyBase key, SqlSmoState state);
    public void Add(UserDefinedTableType userDefinedTableType);
    internal SqlSmoObject GetObjectByName(string name);
}
public class Microsoft.SqlServer.Management.Smo.UserDefinedTableTypeResolver : object {
    public static object Resolve(object instance, Object[] parameters);
    public static object ResolveUrn(object instance, Object[] parameters);
}
[EvaluationModeAttribute("4")]
[PhysicalFacetAttribute]
[SfcElementAttribute("48")]
public class Microsoft.SqlServer.Management.Smo.UserDefinedType : ScriptSchemaObjectBase {
    private UserDefinedTypeEvents events;
    public static string UrnSuffix { get; }
    [SfcObjectAttribute("1", "0", "Microsoft.SqlServer.Management.Smo.ExtendedProperty")]
public ExtendedPropertyCollection ExtendedProperties { get; }
    [SfcObjectAttribute("1")]
public Database Parent { get; public set; }
    internal UserPermissionCollection Permissions { get; }
    private bool Microsoft.SqlServer.Management.Sdk.Sfc.ISfcSupportsDesignMode.IsDesignMode { get; }
    [SfcPropertyAttribute("3072")]
[SfcReferenceAttribute("Microsoft.SqlServer.Management.Smo.SqlAssembly", "Server[@Name = '{0}']/Database[@Name = '{1}']/SqlAssembly[@Name = '{2}']", "Mono.Cecil.CustomAttributeArgument[]")]
[CLSCompliantAttribute("False")]
public string AssemblyName { get; public set; }
    [SfcPropertyAttribute("3072")]
public Byte[] BinaryTypeIdentifier { get; }
    [SfcPropertyAttribute("3072")]
public string ClassName { get; public set; }
    [SfcPropertyAttribute("3072")]
public string Collation { get; }
    [SfcPropertyAttribute("3072")]
public int ID { get; }
    [SfcPropertyAttribute("3072")]
public bool IsBinaryOrdered { get; }
    [SfcPropertyAttribute("3072")]
public bool IsComVisible { get; }
    [SfcPropertyAttribute("3072")]
public bool IsFixedLength { get; }
    [SfcPropertyAttribute("3072")]
public bool IsNullable { get; }
    [SfcPropertyAttribute("7168")]
public bool IsSchemaOwned { get; }
    [SfcPropertyAttribute("3072")]
public int MaxLength { get; }
    [SfcPropertyAttribute("3072")]
public int NumericPrecision { get; }
    [SfcPropertyAttribute("3072")]
public int NumericScale { get; }
    [SfcPropertyAttribute("7168")]
[SfcReferenceAttribute("Microsoft.SqlServer.Management.Smo.User", "Server[@Name = '{0}']/Database[@Name = '{1}']/User[@Name = '{2}']", "Mono.Cecil.CustomAttributeArgument[]")]
[SfcReferenceAttribute("Microsoft.SqlServer.Management.Smo.DatabaseRole", "Server[@Name = '{0}']/Database[@Name = '{1}']/Role[@Name = '{2}']", "Mono.Cecil.CustomAttributeArgument[]")]
[SfcReferenceAttribute("Microsoft.SqlServer.Management.Smo.ApplicationRole", "Server[@Name = '{0}']/Database[@Name = '{1}']/ApplicationRole[@Name = '{2}']", "Mono.Cecil.CustomAttributeArgument[]")]
[CLSCompliantAttribute("False")]
public string Owner { get; public set; }
    [SfcPropertyAttribute("3072")]
public UserDefinedTypeFormat UserDefinedTypeFormat { get; }
    public UserDefinedTypeEvents Events { get; }
    internal UserDefinedType(AbstractCollectionBase parentColl, ObjectKeyBase key, SqlSmoState state);
    public UserDefinedType(Database database, string name);
    public UserDefinedType(Database database, string name, string schema);
    private void init();
    public void ChangeSchema(string newSchema);
    public static string get_UrnSuffix();
    public sealed virtual ExtendedPropertyCollection get_ExtendedProperties();
    internal virtual PropagateInfo[] GetPropagateInfo(PropagateAction action);
    public sealed virtual void Create();
    internal virtual void ScriptCreate(StringCollection queries, ScriptingPreferences sp);
    public sealed virtual void Alter();
    internal virtual void ScriptAlter(StringCollection query, ScriptingPreferences sp);
    public sealed virtual void Drop();
    public sealed virtual void DropIfExists();
    internal virtual void ScriptDrop(StringCollection dropQuery, ScriptingPreferences sp);
    public sealed virtual StringCollection Script();
    public sealed virtual StringCollection Script(ScriptingOptions scriptingOptions);
    internal static String[] GetScriptFields(Type parentType, ServerVersion version, DatabaseEngineType databaseEngineType, DatabaseEngineEdition databaseEngineEdition, bool defaultTextMode);
    public Database get_Parent();
    public void set_Parent(Database value);
    internal virtual UserPermissionCollection get_Permissions();
    private sealed virtual override bool Microsoft.SqlServer.Management.Sdk.Sfc.ISfcSupportsDesignMode.get_IsDesignMode();
    internal virtual SqlPropertyMetadataProvider GetPropertyMetadataProvider();
    public string get_AssemblyName();
    public void set_AssemblyName(string value);
    public Byte[] get_BinaryTypeIdentifier();
    public string get_ClassName();
    public void set_ClassName(string value);
    public string get_Collation();
    public int get_ID();
    public bool get_IsBinaryOrdered();
    public bool get_IsComVisible();
    public bool get_IsFixedLength();
    public bool get_IsNullable();
    public bool get_IsSchemaOwned();
    public int get_MaxLength();
    public int get_NumericPrecision();
    public int get_NumericScale();
    public string get_Owner();
    public void set_Owner(string value);
    public UserDefinedTypeFormat get_UserDefinedTypeFormat();
    public sealed virtual void Deny(ObjectPermissionSet permission, String[] granteeNames);
    public sealed virtual void Deny(ObjectPermissionSet permission, String[] granteeNames, bool cascade);
    public sealed virtual void Grant(ObjectPermissionSet permission, String[] granteeNames);
    public sealed virtual void Grant(ObjectPermissionSet permission, String[] granteeNames, bool grantGrant);
    public sealed virtual void Grant(ObjectPermissionSet permission, String[] granteeNames, bool grantGrant, string asRole);
    public sealed virtual void Revoke(ObjectPermissionSet permission, String[] granteeNames);
    public sealed virtual void Revoke(ObjectPermissionSet permission, String[] granteeNames, bool revokeGrant, bool cascade);
    public void Revoke(ObjectPermissionSet permission, String[] granteeNames, bool revokeGrant, bool cascade, string asRole);
    public sealed virtual void Deny(ObjectPermissionSet permission, string granteeName);
    public sealed virtual void Deny(ObjectPermissionSet permission, string granteeName, bool cascade);
    public sealed virtual void Grant(ObjectPermissionSet permission, string granteeName);
    public sealed virtual void Grant(ObjectPermissionSet permission, string granteeName, bool grantGrant);
    public sealed virtual void Grant(ObjectPermissionSet permission, string granteeName, bool grantGrant, string asRole);
    public sealed virtual void Revoke(ObjectPermissionSet permission, string granteeName);
    public void Revoke(ObjectPermissionSet permission, string granteeName, bool revokeGrant, bool cascade);
    public sealed virtual void Revoke(ObjectPermissionSet permission, string granteeName, bool revokeGrant, bool cascade, string asRole);
    public sealed virtual ObjectPermissionInfo[] EnumObjectPermissions();
    public sealed virtual ObjectPermissionInfo[] EnumObjectPermissions(string granteeName);
    public sealed virtual ObjectPermissionInfo[] EnumObjectPermissions(ObjectPermissionSet permissions);
    public sealed virtual ObjectPermissionInfo[] EnumObjectPermissions(string granteeName, ObjectPermissionSet permissions);
    public UserDefinedTypeEvents get_Events();
}
[DefaultMemberAttribute("Item")]
public class Microsoft.SqlServer.Management.Smo.UserDefinedTypeCollection : SchemaCollectionBase {
    public Database Parent { get; }
    public UserDefinedType Item { get; }
    public UserDefinedType Item { get; }
    public UserDefinedType Item { get; }
    internal UserDefinedTypeCollection(SqlSmoObject parentInstance);
    public Database get_Parent();
    public UserDefinedType get_Item(int index);
    public UserDefinedType get_Item(string name);
    public UserDefinedType get_Item(string name, string schema);
    public void CopyTo(UserDefinedType[] array, int index);
    public UserDefinedType ItemById(int id);
    protected virtual Type GetCollectionElementType();
    internal virtual SqlSmoObject GetCollectionElementInstance(ObjectKeyBase key, SqlSmoState state);
    public void Add(UserDefinedType userDefinedType);
    internal SqlSmoObject GetObjectByName(string name);
}
public class Microsoft.SqlServer.Management.Smo.UserDefinedTypeEvents : object {
    private ObjectEventsWorker serverEventsWorker;
    private UserDefinedType parent;
    internal UserDefinedTypeEvents(UserDefinedType parent);
    public ObjectEventSet GetEventSelection();
    public void SubscribeToEvents(ObjectEventSet events);
    public void SubscribeToEvents(ObjectEventSet events, ServerEventHandler eventHandler);
    public void UnsubscribeFromEvents(ObjectEventSet events);
    public void UnsubscribeAllEvents();
    public void StartEvents();
    public void StopEvents();
    public void add_ServerEvent(ServerEventHandler value);
    public void remove_ServerEvent(ServerEventHandler value);
    private void InitializeEvents();
}
public class Microsoft.SqlServer.Management.Smo.UserDefinedTypeResolver : object {
    public static object Resolve(object instance, Object[] parameters);
    public static object ResolveUrn(object instance, Object[] parameters);
}
public class Microsoft.SqlServer.Management.Smo.UserEvents : object {
    private ObjectEventsWorker serverEventsWorker;
    private User parent;
    internal UserEvents(User parent);
    public ObjectEventSet GetEventSelection();
    public void SubscribeToEvents(ObjectEventSet events);
    public void SubscribeToEvents(ObjectEventSet events, ServerEventHandler eventHandler);
    public void UnsubscribeFromEvents(ObjectEventSet events);
    public void UnsubscribeAllEvents();
    public void StartEvents();
    public void StopEvents();
    public void add_ServerEvent(ServerEventHandler value);
    public void remove_ServerEvent(ServerEventHandler value);
    private void InitializeEvents();
}
[SfcElementTypeAttribute("UserOption")]
[SfcElementAttribute("48")]
public class Microsoft.SqlServer.Management.Smo.UserOptions : SqlSmoObject {
    private bool overrideValueChecking;
    [SfcObjectAttribute("1")]
public Server Parent { get; internal set; }
    public static string UrnSuffix { get; }
    private bool Microsoft.SqlServer.Management.Sdk.Sfc.ISfcSupportsDesignMode.IsDesignMode { get; }
    [SfcPropertyAttribute("11264", "false")]
public bool AbortOnArithmeticErrors { get; public set; }
    [SfcPropertyAttribute("11264", "false")]
public bool AbortTransactionOnError { get; public set; }
    [SfcPropertyAttribute("11264", "false")]
public bool AnsiNullDefaultOff { get; public set; }
    [SfcPropertyAttribute("11264", "true")]
public bool AnsiNullDefaultOn { get; public set; }
    [SfcPropertyAttribute("11264", "true")]
public bool AnsiNulls { get; public set; }
    [SfcPropertyAttribute("11264", "true")]
public bool AnsiPadding { get; public set; }
    [SfcPropertyAttribute("11264", "true")]
public bool AnsiWarnings { get; public set; }
    [SfcPropertyAttribute("11264", "true")]
public bool ConcatenateNullYieldsNull { get; public set; }
    [SfcPropertyAttribute("11264", "false")]
public bool CursorCloseOnCommit { get; public set; }
    [SfcPropertyAttribute("11264", "false")]
public bool DisableDefaultConstraintCheck { get; public set; }
    [SfcPropertyAttribute("11264", "false")]
public bool IgnoreArithmeticErrors { get; public set; }
    [SfcPropertyAttribute("11264", "true")]
public bool ImplicitTransactions { get; public set; }
    [SfcPropertyAttribute("11264", "false")]
public bool NoCount { get; public set; }
    [SfcPropertyAttribute("11264", "false")]
public bool NumericRoundAbort { get; public set; }
    [SfcPropertyAttribute("11264", "true")]
public bool QuotedIdentifier { get; public set; }
    internal UserOptions(Server parentsrv, ObjectKeyBase key, SqlSmoState state);
    public Server get_Parent();
    internal void set_Parent(Server value);
    protected sealed virtual void GetUrnRecursive(StringBuilder urnbuilder, UrnIdOption idOption);
    public static string get_UrnSuffix();
    public sealed virtual void Alter();
    public void Alter(bool overrideValueChecking);
    internal virtual void ScriptAlter(StringCollection query, ScriptingPreferences sp);
    internal virtual void ScriptCreate(StringCollection query, ScriptingPreferences sp);
    private void ScriptProperties(StringCollection query, ScriptingPreferences sp);
    protected internal virtual string GetDBName();
    public sealed virtual StringCollection Script();
    public sealed virtual StringCollection Script(ScriptingOptions scriptingOptions);
    internal static String[] GetScriptFields(Type parentType, ServerVersion version, DatabaseEngineType databaseEngineType, DatabaseEngineEdition databaseEngineEdition, bool defaultTextMode);
    private sealed virtual override bool Microsoft.SqlServer.Management.Sdk.Sfc.ISfcSupportsDesignMode.get_IsDesignMode();
    internal virtual SqlPropertyMetadataProvider GetPropertyMetadataProvider();
    public bool get_AbortOnArithmeticErrors();
    public void set_AbortOnArithmeticErrors(bool value);
    public bool get_AbortTransactionOnError();
    public void set_AbortTransactionOnError(bool value);
    public bool get_AnsiNullDefaultOff();
    public void set_AnsiNullDefaultOff(bool value);
    public bool get_AnsiNullDefaultOn();
    public void set_AnsiNullDefaultOn(bool value);
    public bool get_AnsiNulls();
    public void set_AnsiNulls(bool value);
    public bool get_AnsiPadding();
    public void set_AnsiPadding(bool value);
    public bool get_AnsiWarnings();
    public void set_AnsiWarnings(bool value);
    public bool get_ConcatenateNullYieldsNull();
    public void set_ConcatenateNullYieldsNull(bool value);
    public bool get_CursorCloseOnCommit();
    public void set_CursorCloseOnCommit(bool value);
    public bool get_DisableDefaultConstraintCheck();
    public void set_DisableDefaultConstraintCheck(bool value);
    public bool get_IgnoreArithmeticErrors();
    public void set_IgnoreArithmeticErrors(bool value);
    public bool get_ImplicitTransactions();
    public void set_ImplicitTransactions(bool value);
    public bool get_NoCount();
    public void set_NoCount(bool value);
    public bool get_NumericRoundAbort();
    public void set_NumericRoundAbort(bool value);
    public bool get_QuotedIdentifier();
    public void set_QuotedIdentifier(bool value);
    internal virtual object GetPropertyDefaultValue(string propname);
}
[SfcElementTypeAttribute("Permission")]
internal class Microsoft.SqlServer.Management.Smo.UserPermission : NamedSmoObject {
    [SfcPropertyAttribute("3072")]
public ObjectPermissionSetValue Code { get; public set; }
    [SfcPropertyAttribute("3072")]
public string Grantee { get; public set; }
    [SfcPropertyAttribute("3072")]
public PrincipalType GranteeType { get; public set; }
    [SfcPropertyAttribute("3072")]
public string Grantor { get; public set; }
    [SfcPropertyAttribute("3072")]
public PrincipalType GrantorType { get; public set; }
    [SfcPropertyAttribute("3072")]
public int IntCode { get; public set; }
    [SfcPropertyAttribute("3072")]
public ObjectClass ObjectClass { get; public set; }
    [SfcPropertyAttribute("3072")]
public PermissionState PermissionState { get; public set; }
    [SfcObjectAttribute("1")]
internal SqlSmoObject Parent { get; internal set; }
    public static string UrnSuffix { get; }
    internal UserPermission(AbstractCollectionBase parentColl, ObjectKeyBase key, SqlSmoState state);
    internal virtual SqlPropertyMetadataProvider GetPropertyMetadataProvider();
    public ObjectPermissionSetValue get_Code();
    public void set_Code(ObjectPermissionSetValue value);
    public string get_Grantee();
    public void set_Grantee(string value);
    public PrincipalType get_GranteeType();
    public void set_GranteeType(PrincipalType value);
    public string get_Grantor();
    public void set_Grantor(string value);
    public PrincipalType get_GrantorType();
    public void set_GrantorType(PrincipalType value);
    public int get_IntCode();
    public void set_IntCode(int value);
    public ObjectClass get_ObjectClass();
    public void set_ObjectClass(ObjectClass value);
    public PermissionState get_PermissionState();
    public void set_PermissionState(PermissionState value);
    internal SqlSmoObject get_Parent();
    internal void set_Parent(SqlSmoObject value);
    public static string get_UrnSuffix();
    internal static String[] GetScriptFields(Type parentType, ServerVersion version, DatabaseEngineType databaseEngineType, DatabaseEngineEdition databaseEngineEdition, bool defaultTextMode);
    internal virtual String[] GetRejectFields();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.SqlServer.Management.Smo.UserPermissionCollection : SimpleObjectCollectionBase {
    public SqlSmoObject Parent { get; }
    public UserPermission Item { get; }
    public UserPermission Item { get; }
    internal UserPermissionCollection(SqlSmoObject parentInstance);
    public SqlSmoObject get_Parent();
    public UserPermission get_Item(int index);
    public UserPermission get_Item(string name);
    public void CopyTo(UserPermission[] array, int index);
    public UserPermission ItemById(int id);
    protected virtual Type GetCollectionElementType();
    internal virtual SqlSmoObject GetCollectionElementInstance(ObjectKeyBase key, SqlSmoState state);
    internal SqlSmoObject GetObjectByName(string name);
}
public class Microsoft.SqlServer.Management.Smo.VersionSerializationAdapter : object {
    public sealed virtual void WriteXml(XmlWriter writer, object objectToSerialize);
    public sealed virtual void ReadXml(XmlReader reader, Object& deserializedObject);
}
[EditorBrowsableAttribute("1")]
public static class Microsoft.SqlServer.Management.Smo.VersionUtils : object {
    internal static ServerVersion HighestKnownServerVersion { get; }
    internal static ServerVersion Sql110ServerVersion { get; }
    internal static ServerVersion Sql120ServerVersion { get; }
    internal static ServerVersion Sql130ServerVersion { get; }
    internal static ServerVersion Sql140ServerVersion { get; }
    internal static ServerVersion Sql150ServerVersion { get; }
    internal static ServerVersion Sql160ServerVersion { get; }
    internal static SqlServerVersionInternal Sql110TargetServerVersion { get; }
    internal static SqlServerVersionInternal Sql120TargetServerVersion { get; }
    internal static SqlServerVersionInternal Sql130TargetServerVersion { get; }
    internal static SqlServerVersionInternal Sql140TargetServerVersion { get; }
    internal static SqlServerVersionInternal Sql150TargetServerVersion { get; }
    internal static SqlServerVersionInternal Sql160TargetServerVersion { get; }
    internal static bool IsTargetVersionSql15Azure12OrLater(DatabaseEngineType targetDatabaseEngineType, SqlServerVersionInternal targetServerVersion);
    internal static bool IsTargetVersionSql16Azure12OrLater(DatabaseEngineType targetDatabaseEngineType, SqlServerVersionInternal targetServerVersion);
    internal static bool IsSql15Azure12OrLater(DatabaseEngineType currentDatabaseEngineType, ServerVersion currentServerVersion);
    internal static bool IsSql16Azure12OrLater(DatabaseEngineType currentDatabaseEngineType, ServerVersion currentServerVersion);
    internal static bool IsSql15OrLater(SqlServerVersionInternal targetServerVersion, ServerVersion currentServerVersion);
    internal static bool IsSql16OrLater(SqlServerVersionInternal targetServerVersion, ServerVersion currentServerVersion);
    internal static bool IsTargetServerVersionSQl15OrLater(SqlServerVersionInternal targetServerVersion);
    internal static bool IsTargetServerVersionSQl16OrLater(SqlServerVersionInternal targetServerVersion);
    public static bool IsSql15OrLater(ServerVersion currentServerVersion);
    public static bool IsSql16OrLater(ServerVersion currentServerVersion);
    internal static bool IsSql14OrLater(SqlServerVersionInternal targetServerVersion, ServerVersion currentServerVersion);
    public static bool IsSql14OrLater(ServerVersion currentServerVersion);
    internal static bool IsTargetServerVersionSQl14OrLater(SqlServerVersionInternal targetServerVersion);
    internal static bool IsSql13OrLater(SqlServerVersionInternal targetServerVersion, ServerVersion currentServerVersion);
    public static bool IsSql13OrLater(ServerVersion currentServerVersion);
    internal static bool IsTargetServerVersionSQl13OrLater(SqlServerVersionInternal targetServerVersion);
    internal static bool IsSql12OrLater(SqlServerVersionInternal targetServerVersion, ServerVersion currentServerVersion);
    public static bool IsSql12OrLater(ServerVersion currentServerVersion);
    internal static bool IsTargetServerVersionSQl12OrLater(SqlServerVersionInternal targetServerVersion);
    internal static bool IsSql11OrLater(SqlServerVersionInternal targetServerVersion, ServerVersion currentServerVersion);
    public static bool IsSql11OrLater(ServerVersion currentServerVersion);
    internal static bool IsTargetServerVersionSQl11OrLater(SqlServerVersionInternal targetServerVersion);
    internal static bool IsSql13Azure12OrLater(DatabaseEngineType currentDatabaseEngineType, ServerVersion currentServerVersion, ScriptingPreferences sp);
    [EditorBrowsableAttribute("1")]
public static bool IsSql13Azure12OrLater(DatabaseEngineType currentDatabaseEngineType, ServerVersion currentServerVersion);
    internal static ServerVersion get_HighestKnownServerVersion();
    internal static ServerVersion get_Sql110ServerVersion();
    internal static ServerVersion get_Sql120ServerVersion();
    internal static ServerVersion get_Sql130ServerVersion();
    internal static ServerVersion get_Sql140ServerVersion();
    internal static ServerVersion get_Sql150ServerVersion();
    internal static ServerVersion get_Sql160ServerVersion();
    internal static SqlServerVersionInternal get_Sql110TargetServerVersion();
    internal static SqlServerVersionInternal get_Sql120TargetServerVersion();
    internal static SqlServerVersionInternal get_Sql130TargetServerVersion();
    internal static SqlServerVersionInternal get_Sql140TargetServerVersion();
    internal static SqlServerVersionInternal get_Sql150TargetServerVersion();
    internal static SqlServerVersionInternal get_Sql160TargetServerVersion();
}
[EvaluationModeAttribute("4")]
[PhysicalFacetAttribute("1")]
[SfcElementAttribute("48")]
public class Microsoft.SqlServer.Management.Smo.View : TableViewBase {
    private ResumableIndexCollection m_ResumableIndexes;
    private ViewEvents events;
    public static string UrnSuffix { get; }
    [SfcObjectAttribute("1", "0", "Microsoft.SqlServer.Management.Smo.Index", "64")]
public IndexCollection Indexes { get; }
    [SfcObjectAttribute("1", "0", "Microsoft.SqlServer.Management.Smo.Index", "64")]
public ResumableIndexCollection ResumableIndexes { get; }
    [SfcPropertyAttribute("7200")]
public string TextBody { get; public set; }
    [SfcPropertyAttribute("3104")]
public string TextHeader { get; public set; }
    [SfcPropertyAttribute("7168")]
public bool TextMode { get; public set; }
    [SfcObjectAttribute("1", "32")]
public Database Parent { get; public set; }
    internal UserPermissionCollection Permissions { get; }
    private bool Microsoft.SqlServer.Management.Sdk.Sfc.ISfcSupportsDesignMode.IsDesignMode { get; }
    [SfcPropertyAttribute("7168")]
public bool AnsiNullsStatus { get; public set; }
    [SfcPropertyAttribute("3072")]
public DateTime CreateDate { get; }
    [SfcPropertyAttribute("3072")]
public DateTime DateLastModified { get; }
    [SfcPropertyAttribute("3072")]
public bool HasAfterTrigger { get; }
    [SfcPropertyAttribute("3072")]
public bool HasClusteredIndex { get; }
    [SfcPropertyAttribute("3104")]
public bool HasColumnSpecification { get; }
    [SfcPropertyAttribute("3072")]
public bool HasDeleteTrigger { get; }
    [SfcPropertyAttribute("3072")]
public bool HasIndex { get; }
    [SfcPropertyAttribute("3072")]
public bool HasInsertTrigger { get; }
    [SfcPropertyAttribute("3072")]
public bool HasInsteadOfTrigger { get; }
    [SfcPropertyAttribute("3072")]
public bool HasNonClusteredIndex { get; }
    [SfcPropertyAttribute("3072")]
public bool HasPrimaryClusteredIndex { get; }
    [SfcPropertyAttribute("3072")]
public bool HasUpdateTrigger { get; }
    [SfcPropertyAttribute("3072")]
public int ID { get; }
    [SfcPropertyAttribute("3072")]
public bool IsDroppedLedgerView { get; }
    [SfcPropertyAttribute("11264", "false")]
public bool IsEncrypted { get; public set; }
    [SfcPropertyAttribute("3072")]
public bool IsIndexable { get; }
    [SfcPropertyAttribute("7168")]
public bool IsSchemaBound { get; public set; }
    [SfcPropertyAttribute("7168")]
public bool IsSchemaOwned { get; }
    [SfcPropertyAttribute("3072")]
public bool IsSystemObject { get; }
    [SfcPropertyAttribute("3328")]
public LedgerViewType LedgerViewType { get; public set; }
    [SfcPropertyAttribute("7168")]
[SfcReferenceAttribute("Microsoft.SqlServer.Management.Smo.User", "Server[@Name = '{0}']/Database[@Name = '{1}']/User[@Name = '{2}']", "Mono.Cecil.CustomAttributeArgument[]")]
[SfcReferenceAttribute("Microsoft.SqlServer.Management.Smo.DatabaseRole", "Server[@Name = '{0}']/Database[@Name = '{1}']/Role[@Name = '{2}']", "Mono.Cecil.CustomAttributeArgument[]")]
[SfcReferenceAttribute("Microsoft.SqlServer.Management.Smo.ApplicationRole", "Server[@Name = '{0}']/Database[@Name = '{1}']/ApplicationRole[@Name = '{2}']", "Mono.Cecil.CustomAttributeArgument[]")]
[CLSCompliantAttribute("False")]
public string Owner { get; public set; }
    [SfcPropertyAttribute("7168")]
public bool QuotedIdentifierStatus { get; public set; }
    [SfcPropertyAttribute("7168")]
public bool ReturnsViewMetadata { get; public set; }
    [SfcPropertyAttribute]
public DwViewDistributionType DwMaterializedViewDistribution { get; public set; }
    public ViewEvents Events { get; }
    internal View(AbstractCollectionBase parentColl, ObjectKeyBase key, SqlSmoState state);
    public View(Database database, string name);
    public View(Database database, string name, string schema);
    public static string get_UrnSuffix();
    public virtual IndexCollection get_Indexes();
    public ResumableIndexCollection get_ResumableIndexes();
    public void ChangeSchema(string newSchema);
    public sealed virtual void Create();
    internal virtual void ScriptCreate(StringCollection queries, ScriptingPreferences sp);
    public sealed virtual void CreateOrAlter();
    internal virtual void ScriptCreateOrAlter(StringCollection queries, ScriptingPreferences sp);
    public sealed virtual void Alter();
    internal virtual void ScriptAlter(StringCollection queries, ScriptingPreferences sp);
    protected virtual bool IsObjectDirty();
    private string GetIfNotExistString(bool forCreate, ScriptingPreferences sp);
    public sealed virtual void Drop();
    public sealed virtual void DropIfExists();
    internal virtual void ScriptDrop(StringCollection queries, ScriptingPreferences sp);
    public sealed virtual void Rename(string newName);
    internal virtual void ScriptRename(StringCollection renameQuery, ScriptingPreferences sp, string newName);
    private void GetDDL(StringCollection queries, ScriptingPreferences sp, ScriptHeaderType scriptHeaderType);
    private bool ShouldScriptBodyAtAlter();
    public DataTable EnumColumns();
    public void Refresh(bool refreshViewMetadata);
    internal virtual PropagateInfo[] GetPropagateInfo(PropagateAction action);
    private PropagateInfo[] GetPropagateInfoImpl(bool forDiscovery);
    internal virtual PropagateInfo[] GetPropagateInfoForDiscovery(PropagateAction action);
    internal virtual void AddScriptPermission(StringCollection query, ScriptingPreferences sp);
    internal static String[] GetScriptFields(Type parentType, ServerVersion version, DatabaseEngineType databaseEngineType, DatabaseEngineEdition databaseEngineEdition, bool defaultTextMode);
    public sealed virtual string ScriptHeader(bool forAlter);
    public sealed virtual string ScriptHeader(ScriptHeaderType scriptHeaderType);
    public sealed virtual string get_TextBody();
    public sealed virtual void set_TextBody(string value);
    public sealed virtual string get_TextHeader();
    public sealed virtual void set_TextHeader(string value);
    public sealed virtual bool get_TextMode();
    public sealed virtual void set_TextMode(bool value);
    internal virtual void ValidateProperty(Property prop, object value);
    public Database get_Parent();
    public void set_Parent(Database value);
    internal virtual UserPermissionCollection get_Permissions();
    private sealed virtual override bool Microsoft.SqlServer.Management.Sdk.Sfc.ISfcSupportsDesignMode.get_IsDesignMode();
    internal virtual SqlPropertyMetadataProvider GetPropertyMetadataProvider();
    public sealed virtual bool get_AnsiNullsStatus();
    public void set_AnsiNullsStatus(bool value);
    public sealed virtual DateTime get_CreateDate();
    public DateTime get_DateLastModified();
    public bool get_HasAfterTrigger();
    public bool get_HasClusteredIndex();
    public bool get_HasColumnSpecification();
    public bool get_HasDeleteTrigger();
    public bool get_HasIndex();
    public bool get_HasInsertTrigger();
    public bool get_HasInsteadOfTrigger();
    public bool get_HasNonClusteredIndex();
    public bool get_HasPrimaryClusteredIndex();
    public bool get_HasUpdateTrigger();
    public sealed virtual int get_ID();
    public bool get_IsDroppedLedgerView();
    public sealed virtual bool get_IsEncrypted();
    public void set_IsEncrypted(bool value);
    public bool get_IsIndexable();
    public sealed virtual bool get_IsSchemaBound();
    public void set_IsSchemaBound(bool value);
    public sealed virtual bool get_IsSchemaOwned();
    public sealed virtual bool get_IsSystemObject();
    public LedgerViewType get_LedgerViewType();
    public void set_LedgerViewType(LedgerViewType value);
    public sealed virtual string get_Owner();
    public void set_Owner(string value);
    public sealed virtual bool get_QuotedIdentifierStatus();
    public void set_QuotedIdentifierStatus(bool value);
    public sealed virtual bool get_ReturnsViewMetadata();
    public void set_ReturnsViewMetadata(bool value);
    public DwViewDistributionType get_DwMaterializedViewDistribution();
    public void set_DwMaterializedViewDistribution(DwViewDistributionType value);
    internal virtual String[] GetNonAlterableProperties();
    internal virtual object GetPropertyDefaultValue(string propname);
    public sealed virtual void Deny(ObjectPermissionSet permission, String[] granteeNames);
    public sealed virtual void Deny(ObjectPermissionSet permission, String[] granteeNames, bool cascade);
    public sealed virtual void Grant(ObjectPermissionSet permission, String[] granteeNames);
    public sealed virtual void Grant(ObjectPermissionSet permission, String[] granteeNames, bool grantGrant);
    public sealed virtual void Grant(ObjectPermissionSet permission, String[] granteeNames, bool grantGrant, string asRole);
    public sealed virtual void Revoke(ObjectPermissionSet permission, String[] granteeNames);
    public sealed virtual void Revoke(ObjectPermissionSet permission, String[] granteeNames, bool revokeGrant, bool cascade);
    public void Revoke(ObjectPermissionSet permission, String[] granteeNames, bool revokeGrant, bool cascade, string asRole);
    public sealed virtual void Deny(ObjectPermissionSet permission, string granteeName);
    public sealed virtual void Deny(ObjectPermissionSet permission, string granteeName, bool cascade);
    public sealed virtual void Grant(ObjectPermissionSet permission, string granteeName);
    public sealed virtual void Grant(ObjectPermissionSet permission, string granteeName, bool grantGrant);
    public sealed virtual void Grant(ObjectPermissionSet permission, string granteeName, bool grantGrant, string asRole);
    public sealed virtual void Revoke(ObjectPermissionSet permission, string granteeName);
    public void Revoke(ObjectPermissionSet permission, string granteeName, bool revokeGrant, bool cascade);
    public sealed virtual void Revoke(ObjectPermissionSet permission, string granteeName, bool revokeGrant, bool cascade, string asRole);
    public sealed virtual ObjectPermissionInfo[] EnumObjectPermissions();
    public sealed virtual ObjectPermissionInfo[] EnumObjectPermissions(string granteeName);
    public sealed virtual ObjectPermissionInfo[] EnumObjectPermissions(ObjectPermissionSet permissions);
    public sealed virtual ObjectPermissionInfo[] EnumObjectPermissions(string granteeName, ObjectPermissionSet permissions);
    public sealed virtual void Deny(ObjectPermissionSet permission, String[] granteeNames, String[] columnNames);
    public sealed virtual void Deny(ObjectPermissionSet permission, String[] granteeNames, String[] columnNames, bool cascade);
    public sealed virtual void Grant(ObjectPermissionSet permission, String[] granteeNames, String[] columnNames);
    public sealed virtual void Grant(ObjectPermissionSet permission, String[] granteeNames, String[] columnNames, bool grantGrant);
    public sealed virtual void Grant(ObjectPermissionSet permission, String[] granteeNames, String[] columnNames, bool grantGrant, string asRole);
    public sealed virtual void Revoke(ObjectPermissionSet permission, String[] granteeNames, String[] columnNames);
    public sealed virtual void Revoke(ObjectPermissionSet permission, String[] granteeNames, String[] columnNames, bool revokeGrant, bool cascade);
    public sealed virtual void Revoke(ObjectPermissionSet permission, String[] granteeNames, String[] columnNames, bool revokeGrant, bool cascade, string asRole);
    public sealed virtual void Deny(ObjectPermissionSet permission, string granteeName, String[] columnNames);
    public sealed virtual void Deny(ObjectPermissionSet permission, string granteeName, String[] columnNames, bool cascade);
    public sealed virtual void Grant(ObjectPermissionSet permission, string granteeName, String[] columnNames);
    public sealed virtual void Grant(ObjectPermissionSet permission, string granteeName, String[] columnNames, bool grantGrant);
    public sealed virtual void Grant(ObjectPermissionSet permission, string granteeName, String[] columnNames, bool grantGrant, string asRole);
    public sealed virtual void Revoke(ObjectPermissionSet permission, string granteeName, String[] columnNames);
    public sealed virtual void Revoke(ObjectPermissionSet permission, string granteeName, String[] columnNames, bool revokeGrant, bool cascade);
    public sealed virtual void Revoke(ObjectPermissionSet permission, string granteeName, String[] columnNames, bool revokeGrant, bool cascade, string asRole);
    public ObjectPermissionInfo[] EnumColumnPermissions();
    public sealed virtual ObjectPermissionInfo[] EnumColumnPermissions(string granteeName);
    public ObjectPermissionInfo[] EnumColumnPermissions(ObjectPermissionSet permissions);
    public sealed virtual ObjectPermissionInfo[] EnumColumnPermissions(string granteeName, ObjectPermissionSet permissions);
    public ViewEvents get_Events();
}
[DefaultMemberAttribute("Item")]
public class Microsoft.SqlServer.Management.Smo.ViewCollection : SchemaCollectionBase {
    public Database Parent { get; }
    public View Item { get; }
    public View Item { get; }
    public View Item { get; }
    internal ViewCollection(SqlSmoObject parentInstance);
    public Database get_Parent();
    public View get_Item(int index);
    public View get_Item(string name);
    public View get_Item(string name, string schema);
    public void CopyTo(View[] array, int index);
    public View ItemById(int id);
    protected virtual Type GetCollectionElementType();
    internal virtual SqlSmoObject GetCollectionElementInstance(ObjectKeyBase key, SqlSmoState state);
    public void Add(View view);
    internal SqlSmoObject GetObjectByName(string name);
}
public class Microsoft.SqlServer.Management.Smo.ViewEvent : object {
    private ViewEventValues m_value;
    internal ViewEventValues Value { get; }
    public static ViewEvent AlterFulltextIndex { get; }
    public static ViewEvent AlterIndex { get; }
    public static ViewEvent AlterView { get; }
    public static ViewEvent CreateFulltextIndex { get; }
    public static ViewEvent CreateIndex { get; }
    public static ViewEvent CreateSpatialIndex { get; }
    public static ViewEvent CreateStatistics { get; }
    public static ViewEvent CreateXmlIndex { get; }
    public static ViewEvent DropFulltextIndex { get; }
    public static ViewEvent DropIndex { get; }
    public static ViewEvent DropStatistics { get; }
    public static ViewEvent DropView { get; }
    public static ViewEvent UpdateStatistics { get; }
    internal ViewEvent(ViewEventValues eventValue);
    internal ViewEventValues get_Value();
    public static ViewEventSet op_Implicit(ViewEvent eventValue);
    public static ViewEventSet op_Addition(ViewEvent eventLeft, ViewEvent eventRight);
    public static ViewEventSet Add(ViewEvent eventLeft, ViewEvent eventRight);
    public static ViewEventSet op_BitwiseOr(ViewEvent eventLeft, ViewEvent eventRight);
    public static ViewEventSet BitwiseOr(ViewEvent eventLeft, ViewEvent eventRight);
    public virtual string ToString();
    public static bool op_Equality(ViewEvent a, ViewEvent b);
    public static bool op_Inequality(ViewEvent a, ViewEvent b);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static ViewEvent get_AlterFulltextIndex();
    public static ViewEvent get_AlterIndex();
    public static ViewEvent get_AlterView();
    public static ViewEvent get_CreateFulltextIndex();
    public static ViewEvent get_CreateIndex();
    public static ViewEvent get_CreateSpatialIndex();
    public static ViewEvent get_CreateStatistics();
    public static ViewEvent get_CreateXmlIndex();
    public static ViewEvent get_DropFulltextIndex();
    public static ViewEvent get_DropIndex();
    public static ViewEvent get_DropStatistics();
    public static ViewEvent get_DropView();
    public static ViewEvent get_UpdateStatistics();
}
public class Microsoft.SqlServer.Management.Smo.ViewEvents : object {
    private ViewEventsWorker serverEventsWorker;
    private View parent;
    internal ViewEvents(View parent);
    public ViewEventSet GetEventSelection();
    public void SubscribeToEvents(ViewEventSet events);
    public void SubscribeToEvents(ViewEventSet events, ServerEventHandler eventHandler);
    public void UnsubscribeFromEvents(ViewEventSet events);
    public void UnsubscribeAllEvents();
    public void StartEvents();
    public void StopEvents();
    public void add_ServerEvent(ServerEventHandler value);
    public void remove_ServerEvent(ServerEventHandler value);
    private void InitializeEvents();
}
public class Microsoft.SqlServer.Management.Smo.ViewEventSet : EventSetBase {
    public int NumberOfElements { get; }
    public bool AlterFulltextIndex { get; public set; }
    public bool AlterIndex { get; public set; }
    public bool AlterView { get; public set; }
    public bool CreateFulltextIndex { get; public set; }
    public bool CreateIndex { get; public set; }
    public bool CreateSpatialIndex { get; public set; }
    public bool CreateStatistics { get; public set; }
    public bool CreateXmlIndex { get; public set; }
    public bool DropFulltextIndex { get; public set; }
    public bool DropIndex { get; public set; }
    public bool DropStatistics { get; public set; }
    public bool DropView { get; public set; }
    public bool UpdateStatistics { get; public set; }
    public ViewEventSet(ViewEventSet eventSet);
    public ViewEventSet(ViewEvent anEvent);
    public ViewEventSet(ViewEvent[] events);
    internal ViewEventSet(BitArray storage);
    public virtual EventSetBase Copy();
    internal void SetBit(ViewEvent anEvent);
    internal void ResetBit(ViewEvent anEvent);
    public ViewEventSet Add(ViewEvent anEvent);
    public ViewEventSet Remove(ViewEvent anEvent);
    public static ViewEventSet op_Addition(ViewEventSet eventSet, ViewEvent anEvent);
    public static ViewEventSet Add(ViewEventSet eventSet, ViewEvent anEvent);
    public static ViewEventSet op_Subtraction(ViewEventSet eventSet, ViewEvent anEvent);
    public static ViewEventSet Subtract(ViewEventSet eventSet, ViewEvent anEvent);
    public virtual int get_NumberOfElements();
    public virtual string ToString();
    public bool get_AlterFulltextIndex();
    public void set_AlterFulltextIndex(bool value);
    public bool get_AlterIndex();
    public void set_AlterIndex(bool value);
    public bool get_AlterView();
    public void set_AlterView(bool value);
    public bool get_CreateFulltextIndex();
    public void set_CreateFulltextIndex(bool value);
    public bool get_CreateIndex();
    public void set_CreateIndex(bool value);
    public bool get_CreateSpatialIndex();
    public void set_CreateSpatialIndex(bool value);
    public bool get_CreateStatistics();
    public void set_CreateStatistics(bool value);
    public bool get_CreateXmlIndex();
    public void set_CreateXmlIndex(bool value);
    public bool get_DropFulltextIndex();
    public void set_DropFulltextIndex(bool value);
    public bool get_DropIndex();
    public void set_DropIndex(bool value);
    public bool get_DropStatistics();
    public void set_DropStatistics(bool value);
    public bool get_DropView();
    public void set_DropView(bool value);
    public bool get_UpdateStatistics();
    public void set_UpdateStatistics(bool value);
}
internal class Microsoft.SqlServer.Management.Smo.ViewEventsWorker : ObjectInSchemaEventsWorker {
    public ViewEventsWorker(View target);
    protected virtual EventQuery CreateWqlQuery(string eventClass);
}
internal enum Microsoft.SqlServer.Management.Smo.ViewEventValues : Enum {
    public int value__;
    public static ViewEventValues AlterFulltextIndex;
    public static ViewEventValues AlterIndex;
    public static ViewEventValues AlterView;
    public static ViewEventValues CreateFulltextIndex;
    public static ViewEventValues CreateIndex;
    public static ViewEventValues CreateSpatialIndex;
    public static ViewEventValues CreateStatistics;
    public static ViewEventValues CreateXmlIndex;
    public static ViewEventValues DropFulltextIndex;
    public static ViewEventValues DropIndex;
    public static ViewEventValues DropStatistics;
    public static ViewEventValues DropView;
    public static ViewEventValues UpdateStatistics;
}
[StateChangeEventAttribute("CREATE_WORKLOAD_GROUP", "WORKLOADGROUP", "WORKLOAD GROUP")]
[StateChangeEventAttribute("ALTER_WORKLOAD_GROUP", "WORKLOADGROUP", "WORKLOAD GROUP")]
[EvaluationModeAttribute("7")]
[PhysicalFacetAttribute]
[SfcElementAttribute("16")]
public class Microsoft.SqlServer.Management.Smo.WorkloadGroup : ScriptNameObjectBase {
    private static string InternalPoolName;
    [SfcKeyAttribute("0")]
[SfcPropertyAttribute("1280")]
public string Name { get; public set; }
    public static string UrnSuffix { get; }
    [SfcObjectAttribute("1")]
public ResourcePool Parent { get; public set; }
    private bool Microsoft.SqlServer.Management.Sdk.Sfc.ISfcSupportsDesignMode.IsDesignMode { get; }
    [SfcPropertyAttribute("1024")]
public string ExternalResourcePoolName { get; public set; }
    [SfcPropertyAttribute("1024")]
public int GroupMaximumRequests { get; public set; }
    [SfcPropertyAttribute("1024")]
public int ID { get; }
    [SfcPropertyAttribute("1024")]
public WorkloadGroupImportance Importance { get; public set; }
    [SfcPropertyAttribute("1024")]
public bool IsSystemObject { get; }
    [SfcPropertyAttribute("1024")]
public int MaximumDegreeOfParallelism { get; public set; }
    [SfcPropertyAttribute("1024")]
public int RequestMaximumCpuTimeInSeconds { get; public set; }
    [SfcPropertyAttribute("1024")]
public int RequestMaximumMemoryGrantPercentage { get; public set; }
    [SfcPropertyAttribute("1024")]
public double RequestMaximumMemoryGrantPercentageAsDouble { get; public set; }
    [SfcPropertyAttribute("1024")]
public int RequestMemoryGrantTimeoutInSeconds { get; public set; }
    internal WorkloadGroup(AbstractCollectionBase parentColl, ObjectKeyBase key, SqlSmoState state);
    public WorkloadGroup(ResourcePool resourcePool, string name);
    public sealed virtual void Create();
    public sealed virtual void Alter();
    public sealed virtual void Drop();
    public sealed virtual void DropIfExists();
    public virtual string get_Name();
    public virtual void set_Name(string value);
    public sealed virtual StringCollection Script();
    public sealed virtual StringCollection Script(ScriptingOptions scriptingOptions);
    public void MoveToPool(string poolName);
    public StringCollection ScriptMoveToPool(string poolName);
    internal virtual void ScriptCreate(StringCollection queries, ScriptingPreferences sp);
    internal virtual void ScriptAlter(StringCollection queries, ScriptingPreferences sp);
    internal virtual void ScriptDrop(StringCollection queries, ScriptingPreferences sp);
    protected virtual void TouchImpl();
    private void InitComparer();
    private void GetAllParams(StringBuilder sb, ScriptingPreferences sp, Int32& count);
    private void MoveToPoolImpl(string poolName);
    public static string get_UrnSuffix();
    internal static WorkloadGroup GetWorkloadGroup(Server server, string groupName);
    public ResourcePool get_Parent();
    public void set_Parent(ResourcePool value);
    private sealed virtual override bool Microsoft.SqlServer.Management.Sdk.Sfc.ISfcSupportsDesignMode.get_IsDesignMode();
    internal virtual SqlPropertyMetadataProvider GetPropertyMetadataProvider();
    public string get_ExternalResourcePoolName();
    public void set_ExternalResourcePoolName(string value);
    public int get_GroupMaximumRequests();
    public void set_GroupMaximumRequests(int value);
    public int get_ID();
    public WorkloadGroupImportance get_Importance();
    public void set_Importance(WorkloadGroupImportance value);
    public bool get_IsSystemObject();
    public int get_MaximumDegreeOfParallelism();
    public void set_MaximumDegreeOfParallelism(int value);
    public int get_RequestMaximumCpuTimeInSeconds();
    public void set_RequestMaximumCpuTimeInSeconds(int value);
    public int get_RequestMaximumMemoryGrantPercentage();
    public void set_RequestMaximumMemoryGrantPercentage(int value);
    public double get_RequestMaximumMemoryGrantPercentageAsDouble();
    public void set_RequestMaximumMemoryGrantPercentageAsDouble(double value);
    public int get_RequestMemoryGrantTimeoutInSeconds();
    public void set_RequestMemoryGrantTimeoutInSeconds(int value);
}
[DefaultMemberAttribute("Item")]
public class Microsoft.SqlServer.Management.Smo.WorkloadGroupCollection : SimpleObjectCollectionBase {
    public ResourcePool Parent { get; }
    public WorkloadGroup Item { get; }
    public WorkloadGroup Item { get; }
    internal WorkloadGroupCollection(SqlSmoObject parentInstance);
    public ResourcePool get_Parent();
    public WorkloadGroup get_Item(int index);
    public WorkloadGroup get_Item(string name);
    public void CopyTo(WorkloadGroup[] array, int index);
    public WorkloadGroup ItemById(int id);
    protected virtual Type GetCollectionElementType();
    internal virtual SqlSmoObject GetCollectionElementInstance(ObjectKeyBase key, SqlSmoState state);
    public void Add(WorkloadGroup workloadGroup);
    internal SqlSmoObject GetObjectByName(string name);
    internal virtual ObjectKeyBase CreateKeyFromUrn(Urn urn);
}
[SfcElementAttribute("48")]
public class Microsoft.SqlServer.Management.Smo.WorkloadManagementWorkloadClassifier : ScriptNameObjectBase {
    public static string UrnSuffix { get; }
    [SfcObjectAttribute("1")]
public Database Parent { get; public set; }
    private bool Microsoft.SqlServer.Management.Sdk.Sfc.ISfcSupportsDesignMode.IsDesignMode { get; }
    [SfcPropertyAttribute]
public string EndTime { get; public set; }
    [SfcPropertyAttribute]
public string GroupName { get; public set; }
    [SfcPropertyAttribute]
public int Id { get; public set; }
    [SfcPropertyAttribute]
public WorkloadManagementImportance Importance { get; public set; }
    [SfcPropertyAttribute]
public string MemberName { get; public set; }
    [SfcPropertyAttribute]
public string StartTime { get; public set; }
    [SfcPropertyAttribute]
public string WlmContext { get; public set; }
    [SfcPropertyAttribute]
public string WlmLabel { get; public set; }
    internal WorkloadManagementWorkloadClassifier(AbstractCollectionBase parentColl, ObjectKeyBase key, SqlSmoState state);
    public WorkloadManagementWorkloadClassifier(Database database, string name);
    public sealed virtual void Create();
    public void Alter();
    public sealed virtual void Drop();
    public void DropIfExists();
    public sealed virtual StringCollection Script();
    public sealed virtual StringCollection Script(ScriptingOptions scriptingOptions);
    internal virtual void ScriptCreate(StringCollection queries, ScriptingPreferences sp);
    internal virtual void ScriptDrop(StringCollection queries, ScriptingPreferences sp);
    public static string get_UrnSuffix();
    public static string IncludeExistsWorkloadClassifier(string name);
    public void SetActivityWindow(int hours, int minutes, TimeSpan duration);
    internal void ThrowIfTargetNotDw(bool targetEngineIsAzureSqlDw);
    private void GetImportanceTSql(StringBuilder buffer, Int32& count);
    private void GetAllParams(StringBuilder sb, ScriptingPreferences so, Int32& count);
    public Database get_Parent();
    public void set_Parent(Database value);
    private sealed virtual override bool Microsoft.SqlServer.Management.Sdk.Sfc.ISfcSupportsDesignMode.get_IsDesignMode();
    internal virtual SqlPropertyMetadataProvider GetPropertyMetadataProvider();
    public string get_EndTime();
    public void set_EndTime(string value);
    public string get_GroupName();
    public void set_GroupName(string value);
    public int get_Id();
    public void set_Id(int value);
    public WorkloadManagementImportance get_Importance();
    public void set_Importance(WorkloadManagementImportance value);
    public string get_MemberName();
    public void set_MemberName(string value);
    public string get_StartTime();
    public void set_StartTime(string value);
    public string get_WlmContext();
    public void set_WlmContext(string value);
    public string get_WlmLabel();
    public void set_WlmLabel(string value);
}
[DefaultMemberAttribute("Item")]
public class Microsoft.SqlServer.Management.Smo.WorkloadManagementWorkloadClassifierCollection : SimpleObjectCollectionBase {
    public Database Parent { get; }
    public WorkloadManagementWorkloadClassifier Item { get; }
    public WorkloadManagementWorkloadClassifier Item { get; }
    internal WorkloadManagementWorkloadClassifierCollection(SqlSmoObject parentInstance);
    public Database get_Parent();
    public WorkloadManagementWorkloadClassifier get_Item(int index);
    public WorkloadManagementWorkloadClassifier get_Item(string name);
    public void CopyTo(WorkloadManagementWorkloadClassifier[] array, int index);
    public WorkloadManagementWorkloadClassifier ItemById(int id);
    protected virtual Type GetCollectionElementType();
    internal virtual SqlSmoObject GetCollectionElementInstance(ObjectKeyBase key, SqlSmoState state);
    public void Add(WorkloadManagementWorkloadClassifier WorkloadManagementWorkloadClassifier);
    internal SqlSmoObject GetObjectByName(string name);
    internal virtual ObjectKeyBase CreateKeyFromUrn(Urn urn);
}
[SfcElementAttribute("48")]
public class Microsoft.SqlServer.Management.Smo.WorkloadManagementWorkloadGroup : ScriptNameObjectBase {
    public static string UrnSuffix { get; }
    [SfcObjectAttribute("1")]
public Database Parent { get; public set; }
    private bool Microsoft.SqlServer.Management.Sdk.Sfc.ISfcSupportsDesignMode.IsDesignMode { get; }
    [SfcPropertyAttribute]
public int CapPercentageResource { get; public set; }
    [SfcPropertyAttribute]
public int GroupId { get; public set; }
    [SfcPropertyAttribute("32")]
public bool HasClassifier { get; public set; }
    [SfcPropertyAttribute]
public WorkloadManagementImportance Importance { get; public set; }
    [SfcPropertyAttribute]
public bool IsSystemObject { get; }
    [SfcPropertyAttribute]
public int MinPercentageResource { get; public set; }
    [SfcPropertyAttribute]
public int QueryExecutionTimeoutSec { get; public set; }
    [SfcPropertyAttribute]
public double RequestMaxResourceGrantPercent { get; public set; }
    [SfcPropertyAttribute]
public double RequestMinResourceGrantPercent { get; public set; }
    internal WorkloadManagementWorkloadGroup(AbstractCollectionBase parentColl, ObjectKeyBase key, SqlSmoState state);
    public WorkloadManagementWorkloadGroup(Database database, string name);
    public sealed virtual void Create();
    public sealed virtual void Alter();
    public sealed virtual void Drop();
    public sealed virtual void DropIfExists();
    public sealed virtual StringCollection Script();
    public sealed virtual StringCollection Script(ScriptingOptions scriptingOptions);
    internal void ThrowIfTargetNotDw(bool targetEngineIsAzureSqlDw);
    internal virtual void ScriptCreate(StringCollection queries, ScriptingPreferences sp);
    internal virtual void ScriptAlter(StringCollection queries, ScriptingPreferences sp);
    internal virtual void ScriptDrop(StringCollection queries, ScriptingPreferences sp);
    private void GetAllParams(StringBuilder sb, ScriptingPreferences sp, Int32& count);
    private void GetImportanceTSql(StringBuilder buffer, Int32& count);
    private string IncludeExistsWorkloadManagementWorkloadGroup(bool fExists, string workloadGroupName);
    internal static String[] GetScriptFields(Type parentType, ServerVersion version, DatabaseEngineType databaseEngineType, DatabaseEngineEdition databaseEngineEdition, bool defaultTextMode);
    public static string get_UrnSuffix();
    public Database get_Parent();
    public void set_Parent(Database value);
    private sealed virtual override bool Microsoft.SqlServer.Management.Sdk.Sfc.ISfcSupportsDesignMode.get_IsDesignMode();
    internal virtual SqlPropertyMetadataProvider GetPropertyMetadataProvider();
    public int get_CapPercentageResource();
    public void set_CapPercentageResource(int value);
    public int get_GroupId();
    public void set_GroupId(int value);
    public bool get_HasClassifier();
    public void set_HasClassifier(bool value);
    public WorkloadManagementImportance get_Importance();
    public void set_Importance(WorkloadManagementImportance value);
    public bool get_IsSystemObject();
    public int get_MinPercentageResource();
    public void set_MinPercentageResource(int value);
    public int get_QueryExecutionTimeoutSec();
    public void set_QueryExecutionTimeoutSec(int value);
    public double get_RequestMaxResourceGrantPercent();
    public void set_RequestMaxResourceGrantPercent(double value);
    public double get_RequestMinResourceGrantPercent();
    public void set_RequestMinResourceGrantPercent(double value);
}
[DefaultMemberAttribute("Item")]
public class Microsoft.SqlServer.Management.Smo.WorkloadManagementWorkloadGroupCollection : SimpleObjectCollectionBase {
    public Database Parent { get; }
    public WorkloadManagementWorkloadGroup Item { get; }
    public WorkloadManagementWorkloadGroup Item { get; }
    internal WorkloadManagementWorkloadGroupCollection(SqlSmoObject parentInstance);
    public Database get_Parent();
    public WorkloadManagementWorkloadGroup get_Item(int index);
    public WorkloadManagementWorkloadGroup get_Item(string name);
    public void CopyTo(WorkloadManagementWorkloadGroup[] array, int index);
    public WorkloadManagementWorkloadGroup ItemById(int id);
    protected virtual Type GetCollectionElementType();
    internal virtual SqlSmoObject GetCollectionElementInstance(ObjectKeyBase key, SqlSmoState state);
    public void Add(WorkloadManagementWorkloadGroup WorkloadManagementWorkloadGroup);
    internal SqlSmoObject GetObjectByName(string name);
    internal virtual ObjectKeyBase CreateKeyFromUrn(Urn urn);
}
public class Microsoft.SqlServer.Management.Smo.WrongPropertyValueException : SmoException {
    private Property property;
    public SmoExceptionType SmoExceptionType { get; }
    public string Message { get; }
    public Property Property { get; }
    public WrongPropertyValueException(string message);
    public WrongPropertyValueException(string message, Exception innerException);
    public WrongPropertyValueException(Property propertyObject);
    private WrongPropertyValueException(SerializationInfo info, StreamingContext context);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    private void Init();
    public virtual SmoExceptionType get_SmoExceptionType();
    public virtual string get_Message();
    public Property get_Property();
}
[EvaluationModeAttribute("4")]
[PhysicalFacetAttribute]
[SfcElementAttribute("48")]
public class Microsoft.SqlServer.Management.Smo.XmlSchemaCollection : ScriptSchemaObjectBase {
    private string xmlSchemaDocument;
    public static string UrnSuffix { get; }
    [SfcObjectAttribute("1", "0", "Microsoft.SqlServer.Management.Smo.ExtendedProperty")]
public ExtendedPropertyCollection ExtendedProperties { get; }
    [SfcObjectAttribute("1")]
public Database Parent { get; public set; }
    internal UserPermissionCollection Permissions { get; }
    private bool Microsoft.SqlServer.Management.Sdk.Sfc.ISfcSupportsDesignMode.IsDesignMode { get; }
    [SfcPropertyAttribute("3072")]
public DateTime CreateDate { get; }
    [SfcPropertyAttribute("3072")]
public DateTime DateLastModified { get; }
    [SfcPropertyAttribute("3072")]
public int ID { get; }
    [SfcPropertyAttribute("3328")]
public string Text { get; public set; }
    internal XmlSchemaCollection(AbstractCollectionBase parentColl, ObjectKeyBase key, SqlSmoState state);
    public XmlSchemaCollection(Database database, string name, string schema, string xmlSchemaDocument);
    public XmlSchemaCollection(Database database, string name);
    public XmlSchemaCollection(Database database, string name, string schema);
    public static string get_UrnSuffix();
    public sealed virtual void Create();
    internal virtual void ScriptCreate(StringCollection queries, ScriptingPreferences sp);
    public sealed virtual void Drop();
    public sealed virtual void DropIfExists();
    internal virtual void ScriptDrop(StringCollection queries, ScriptingPreferences sp);
    public sealed virtual void Alter();
    internal virtual void ScriptAlter(StringCollection alterQuery, ScriptingPreferences sp);
    public sealed virtual StringCollection Script();
    public sealed virtual StringCollection Script(ScriptingOptions scriptingOptions);
    public sealed virtual ExtendedPropertyCollection get_ExtendedProperties();
    internal virtual PropagateInfo[] GetPropagateInfo(PropagateAction action);
    public void AddSchemaDocument(string xmlSchemaDocument);
    public DataTable EnumNamespaces();
    public DataTable EnumTypes();
    public DataTable EnumTypes(string xmlNamespace);
    internal static String[] GetScriptFields(Type parentType, ServerVersion version, DatabaseEngineType databaseEngineType, DatabaseEngineEdition databaseEngineEdition, bool defaultTextMode);
    public Database get_Parent();
    public void set_Parent(Database value);
    internal virtual UserPermissionCollection get_Permissions();
    private sealed virtual override bool Microsoft.SqlServer.Management.Sdk.Sfc.ISfcSupportsDesignMode.get_IsDesignMode();
    internal virtual SqlPropertyMetadataProvider GetPropertyMetadataProvider();
    public DateTime get_CreateDate();
    public DateTime get_DateLastModified();
    public int get_ID();
    public string get_Text();
    public void set_Text(string value);
    internal virtual String[] GetNonAlterableProperties();
    public sealed virtual void Deny(ObjectPermissionSet permission, String[] granteeNames);
    public sealed virtual void Deny(ObjectPermissionSet permission, String[] granteeNames, bool cascade);
    public sealed virtual void Grant(ObjectPermissionSet permission, String[] granteeNames);
    public sealed virtual void Grant(ObjectPermissionSet permission, String[] granteeNames, bool grantGrant);
    public sealed virtual void Grant(ObjectPermissionSet permission, String[] granteeNames, bool grantGrant, string asRole);
    public sealed virtual void Revoke(ObjectPermissionSet permission, String[] granteeNames);
    public sealed virtual void Revoke(ObjectPermissionSet permission, String[] granteeNames, bool revokeGrant, bool cascade);
    public void Revoke(ObjectPermissionSet permission, String[] granteeNames, bool revokeGrant, bool cascade, string asRole);
    public sealed virtual void Deny(ObjectPermissionSet permission, string granteeName);
    public sealed virtual void Deny(ObjectPermissionSet permission, string granteeName, bool cascade);
    public sealed virtual void Grant(ObjectPermissionSet permission, string granteeName);
    public sealed virtual void Grant(ObjectPermissionSet permission, string granteeName, bool grantGrant);
    public sealed virtual void Grant(ObjectPermissionSet permission, string granteeName, bool grantGrant, string asRole);
    public sealed virtual void Revoke(ObjectPermissionSet permission, string granteeName);
    public void Revoke(ObjectPermissionSet permission, string granteeName, bool revokeGrant, bool cascade);
    public sealed virtual void Revoke(ObjectPermissionSet permission, string granteeName, bool revokeGrant, bool cascade, string asRole);
    public sealed virtual ObjectPermissionInfo[] EnumObjectPermissions();
    public sealed virtual ObjectPermissionInfo[] EnumObjectPermissions(string granteeName);
    public sealed virtual ObjectPermissionInfo[] EnumObjectPermissions(ObjectPermissionSet permissions);
    public sealed virtual ObjectPermissionInfo[] EnumObjectPermissions(string granteeName, ObjectPermissionSet permissions);
}
[DefaultMemberAttribute("Item")]
public class Microsoft.SqlServer.Management.Smo.XmlSchemaCollectionCollection : SchemaCollectionBase {
    public Database Parent { get; }
    public XmlSchemaCollection Item { get; }
    public XmlSchemaCollection Item { get; }
    public XmlSchemaCollection Item { get; }
    internal XmlSchemaCollectionCollection(SqlSmoObject parentInstance);
    public Database get_Parent();
    public XmlSchemaCollection get_Item(int index);
    public XmlSchemaCollection get_Item(string name);
    public XmlSchemaCollection get_Item(string name, string schema);
    public void CopyTo(XmlSchemaCollection[] array, int index);
    public XmlSchemaCollection ItemById(int id);
    protected virtual Type GetCollectionElementType();
    internal virtual SqlSmoObject GetCollectionElementInstance(ObjectKeyBase key, SqlSmoState state);
    public void Add(XmlSchemaCollection xmlSchemaCollection);
    internal SqlSmoObject GetObjectByName(string name);
}
