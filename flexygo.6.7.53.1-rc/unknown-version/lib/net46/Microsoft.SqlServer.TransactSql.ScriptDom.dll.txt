internal class antlr.ANTLRException : Exception {
    public ANTLRException(string s);
    public ANTLRException(string s, Exception inner);
    protected ANTLRException(SerializationInfo info, StreamingContext context);
}
internal class antlr.ANTLRPanicException : ANTLRException {
    public ANTLRPanicException(string s);
    public ANTLRPanicException(string s, Exception inner);
    protected ANTLRPanicException(SerializationInfo info, StreamingContext context);
}
internal class antlr.ByteBuffer : InputBuffer {
    private static int BUF_SIZE;
    internal Stream input;
    private Byte[] buf;
    public ByteBuffer(Stream input_);
    public virtual void fill(int amount);
}
internal class antlr.CharBuffer : InputBuffer {
    private static int BUF_SIZE;
    internal TextReader input;
    private Char[] buf;
    public CharBuffer(TextReader input_);
    public virtual void fill(int amount);
}
internal class antlr.CharQueue : object {
    protected internal Char[] buffer;
    private int sizeLessOne;
    private int offset;
    protected internal int nbrEntries;
    public CharQueue(int minSize);
    public void append(char tok);
    public char elementAt(int idx);
    private void expand();
    public virtual void init(int size);
    public void reset();
    public void removeFirst();
}
internal abstract class antlr.CharScanner : object {
    internal static char NO_CHAR;
    public static char EOF_CHAR;
    internal static object EnterRuleEventKey;
    internal static object ExitRuleEventKey;
    internal static object DoneEventKey;
    internal static object ReportErrorEventKey;
    internal static object ReportWarningEventKey;
    internal static object NewLineEventKey;
    internal static object MatchEventKey;
    internal static object MatchNotEventKey;
    internal static object MisMatchEventKey;
    internal static object MisMatchNotEventKey;
    internal static object ConsumeEventKey;
    internal static object LAEventKey;
    internal static object SemPredEvaluatedEventKey;
    internal static object SynPredStartedEventKey;
    internal static object SynPredFailedEventKey;
    internal static object SynPredSucceededEventKey;
    protected internal StringBuilder text;
    protected bool saveConsumedInput;
    protected TokenCreator tokenCreator;
    protected char cached_LA1;
    protected char cached_LA2;
    protected bool caseSensitive;
    protected bool caseSensitiveLiterals;
    protected Hashtable literals;
    protected internal int tabsize;
    protected internal IToken returnToken_;
    protected internal LexerSharedInputState inputState;
    protected internal bool commitToPath;
    protected internal int traceDepth;
    public CharScanner(InputBuffer cb);
    public CharScanner(LexerSharedInputState sharedState);
    private static CharScanner();
    public virtual IToken nextToken();
    public virtual void append(char c);
    public virtual void append(string s);
    public virtual void commit();
    public virtual void consume();
    public virtual void consumeUntil(int c);
    public virtual void consumeUntil(BitSet bset);
    public virtual bool getCaseSensitive();
    public bool getCaseSensitiveLiterals();
    public virtual int getColumn();
    public virtual void setColumn(int c);
    public virtual bool getCommitToPath();
    public virtual string getFilename();
    public virtual InputBuffer getInputBuffer();
    public virtual LexerSharedInputState getInputState();
    public virtual void setInputState(LexerSharedInputState state);
    public virtual int getLine();
    public virtual string getText();
    public virtual IToken getTokenObject();
    public virtual char LA(int i);
    protected internal virtual IToken makeToken(int t);
    public virtual int mark();
    public virtual void match(char c);
    public virtual void match(int c);
    public virtual void match(BitSet b);
    public virtual void match(string s);
    public virtual void matchNot(char c);
    public virtual void matchNot(int c);
    public virtual void matchRange(int c1, int c2);
    public virtual void matchRange(char c1, char c2);
    public virtual void newline();
    public virtual void tab();
    public virtual void setTabSize(int size);
    public virtual int getTabSize();
    public virtual void panic();
    public virtual void panic(string s);
    public virtual void reportError(RecognitionException ex);
    public virtual void reportError(string s);
    public virtual void reportWarning(string s);
    public virtual void refresh();
    public virtual void resetState(InputBuffer ib);
    public void resetState(Stream s);
    public void resetState(TextReader tr);
    public virtual void resetText();
    public virtual void rewind(int pos);
    public virtual void setCaseSensitive(bool t);
    public virtual void setCommitToPath(bool commit);
    public virtual void setFilename(string f);
    public virtual void setLine(int line);
    public virtual void setText(string s);
    public virtual void setTokenObjectClass(string cl);
    public virtual void setTokenCreator(TokenCreator newTokenCreator);
    public virtual int testLiteralsTable(int ttype);
    public virtual int testLiteralsTable(string someText, int ttype);
    public virtual char toLower(int c);
    public virtual void traceIndent();
    public virtual void traceIn(string rname);
    public virtual void traceOut(string rname);
    public virtual void uponEOF();
}
internal class antlr.collections.impl.BitSet : object {
    protected internal static int BITS;
    protected internal static int NIBBLE;
    protected internal static int LOG_BITS;
    protected internal static int MOD_MASK;
    protected internal Int64[] dataBits;
    public BitSet(Int64[] bits_);
    public BitSet(int nbits);
    private static BitSet();
    public virtual void add(int el);
    public virtual BitSet and(BitSet a);
    public virtual void andInPlace(BitSet a);
    private static long bitMask(int bitNumber);
    public virtual void clear();
    public virtual void clear(int el);
    public virtual object Clone();
    public virtual int degree();
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public virtual void growToInclude(int bit);
    public virtual bool member(int el);
    public virtual bool nil();
    public virtual BitSet not();
    public virtual void notInPlace();
    public virtual void notInPlace(int maxBit);
    public virtual void notInPlace(int minBit, int maxBit);
    private static int numWordsToHold(int el);
    public static BitSet of(int el);
    public virtual BitSet or(BitSet a);
    public virtual void orInPlace(BitSet a);
    public virtual void remove(int el);
    private void setSize(int nwords);
    public virtual int size();
    public virtual int lengthInLongWords();
    public virtual bool subset(BitSet a);
    public virtual void subtractInPlace(BitSet a);
    public virtual Int32[] toArray();
    public virtual Int64[] toPackedArray();
    public virtual string ToString();
    public virtual string ToString(string separator);
    public virtual string ToString(string separator, ArrayList vocabulary);
    public virtual string toStringOfHalfWords();
    public virtual string toStringOfWords();
    private static int wordNumber(int bit);
    public static int URShift(int number, int bits);
    public static int URShift(int number, long bits);
    public static long URShift(long number, int bits);
    public static long URShift(long number, long bits);
}
internal class antlr.CommonHiddenStreamToken : CommonToken {
    public static CommonHiddenStreamTokenCreator Creator;
    protected internal IHiddenStreamToken hiddenBefore;
    protected internal IHiddenStreamToken hiddenAfter;
    public CommonHiddenStreamToken(int t, string txt);
    public CommonHiddenStreamToken(string s);
    private static CommonHiddenStreamToken();
    public virtual IHiddenStreamToken getHiddenAfter();
    public virtual IHiddenStreamToken getHiddenBefore();
    public virtual void setHiddenAfter(IHiddenStreamToken t);
    public virtual void setHiddenBefore(IHiddenStreamToken t);
}
internal class antlr.CommonToken : Token {
    public static CommonTokenCreator Creator;
    protected internal int line;
    protected internal string text;
    protected internal int col;
    public CommonToken(int t, string txt);
    public CommonToken(string s);
    private static CommonToken();
    public virtual int getLine();
    public virtual string getText();
    public virtual void setLine(int l);
    public virtual void setText(string s);
    public virtual string ToString();
    public virtual int getColumn();
    public virtual void setColumn(int c);
}
internal class antlr.DefaultFileLineFormatter : FileLineFormatter {
    public virtual string getFormatString(string fileName, int line, int column);
}
internal abstract class antlr.FileLineFormatter : object {
    private static FileLineFormatter formatter;
    private static FileLineFormatter();
    public static FileLineFormatter getFormatter();
    public static void setFormatter(FileLineFormatter f);
    public abstract virtual string getFormatString(string fileName, int line, int column);
}
internal interface antlr.IHiddenStreamToken {
    public abstract virtual IHiddenStreamToken getHiddenAfter();
    public abstract virtual void setHiddenAfter(IHiddenStreamToken t);
    public abstract virtual IHiddenStreamToken getHiddenBefore();
    public abstract virtual void setHiddenBefore(IHiddenStreamToken t);
}
internal abstract class antlr.InputBuffer : object {
    protected internal int nMarkers;
    protected internal int markerOffset;
    protected internal int numToConsume;
    protected ArrayList queue;
    public virtual void commit();
    public virtual char consume();
    public abstract virtual void fill(int amount);
    public virtual string getLAChars();
    public virtual string getMarkedChars();
    public virtual bool isMarked();
    public virtual char LA(int i);
    public virtual int mark();
    public virtual void rewind(int mark);
    public virtual void reset();
    protected internal virtual void syncConsume();
}
internal interface antlr.IToken {
    public int Type { get; public set; }
    public abstract virtual int getColumn();
    public abstract virtual void setColumn(int c);
    public abstract virtual int getLine();
    public abstract virtual void setLine(int l);
    public abstract virtual string getFilename();
    public abstract virtual void setFilename(string name);
    public abstract virtual string getText();
    public abstract virtual void setText(string t);
    public abstract virtual int get_Type();
    public abstract virtual void set_Type(int value);
}
internal class antlr.LexerSharedInputState : object {
    protected internal int column;
    protected internal int line;
    protected internal int tokenStartColumn;
    protected internal int tokenStartLine;
    protected internal InputBuffer input;
    protected internal string filename;
    public int guessing;
    public LexerSharedInputState(InputBuffer inbuf);
    public LexerSharedInputState(Stream inStream);
    public LexerSharedInputState(TextReader inReader);
    private void initialize();
    public virtual void reset();
    public virtual void resetInput(InputBuffer ib);
    public virtual void resetInput(Stream s);
    public virtual void resetInput(TextReader tr);
}
internal class antlr.LLkParser : Parser {
    internal int k;
    public LLkParser(int k_);
    public LLkParser(ParserSharedInputState state, int k_);
    public LLkParser(TokenBuffer tokenBuf, int k_);
    public LLkParser(TokenStream lexer, int k_);
    public virtual void consume();
    public virtual int LA(int i);
    public virtual IToken LT(int i);
    private void trace(string ee, string rname);
    public virtual void traceIn(string rname);
    public virtual void traceOut(string rname);
}
internal class antlr.MismatchedCharException : RecognitionException {
    public CharTypeEnum mismatchType;
    public int foundChar;
    public int expecting;
    public int upper;
    public BitSet bset;
    public CharScanner scanner;
    public string Message { get; }
    public MismatchedCharException(char c, char lower, char upper_, bool matchNot, CharScanner scanner_);
    public MismatchedCharException(char c, char expecting_, bool matchNot, CharScanner scanner_);
    public MismatchedCharException(char c, BitSet set_, bool matchNot, CharScanner scanner_);
    protected MismatchedCharException(SerializationInfo info, StreamingContext context);
    public virtual string get_Message();
    private static void appendCharName(StringBuilder sb, int c);
}
internal class antlr.MismatchedTokenException : RecognitionException {
    internal String[] tokenNames;
    public IToken token;
    internal string tokenText;
    public TokenTypeEnum mismatchType;
    public int expecting;
    public int upper;
    public BitSet bset;
    public string Message { get; }
    public MismatchedTokenException(String[] tokenNames_, IToken token_, int lower, int upper_, bool matchNot, string fileName_);
    public MismatchedTokenException(String[] tokenNames_, IToken token_, int expecting_, bool matchNot, string fileName_);
    public MismatchedTokenException(String[] tokenNames_, IToken token_, BitSet set_, bool matchNot, string fileName_);
    protected MismatchedTokenException(SerializationInfo info, StreamingContext context);
    public virtual string get_Message();
    private string tokenName(int tokenType);
}
internal class antlr.NoViableAltException : RecognitionException {
    public IToken token;
    public string Message { get; }
    public NoViableAltException(IToken t, string fileName_);
    protected NoViableAltException(SerializationInfo info, StreamingContext context);
    public virtual string get_Message();
}
internal class antlr.NoViableAltForCharException : RecognitionException {
    public char foundChar;
    public string Message { get; }
    public NoViableAltForCharException(char c, CharScanner scanner);
    public NoViableAltForCharException(char c, string fileName, int line, int column);
    protected NoViableAltForCharException(SerializationInfo info, StreamingContext context);
    public virtual string get_Message();
}
internal abstract class antlr.Parser : object {
    internal static object EnterRuleEventKey;
    internal static object ExitRuleEventKey;
    internal static object DoneEventKey;
    internal static object ReportErrorEventKey;
    internal static object ReportWarningEventKey;
    internal static object NewLineEventKey;
    internal static object MatchEventKey;
    internal static object MatchNotEventKey;
    internal static object MisMatchEventKey;
    internal static object MisMatchNotEventKey;
    internal static object ConsumeEventKey;
    internal static object LAEventKey;
    internal static object SemPredEvaluatedEventKey;
    internal static object SynPredStartedEventKey;
    internal static object SynPredFailedEventKey;
    internal static object SynPredSucceededEventKey;
    protected internal ParserSharedInputState inputState;
    protected internal String[] tokenNames;
    private bool ignoreInvalidDebugCalls;
    protected internal int traceDepth;
    public Parser(ParserSharedInputState state);
    private static Parser();
    public abstract virtual void consume();
    public virtual void consumeUntil(int tokenType);
    public virtual void consumeUntil(BitSet bset);
    protected internal virtual void defaultDebuggingSetup(TokenStream lexer, TokenBuffer tokBuf);
    public virtual string getFilename();
    public virtual ParserSharedInputState getInputState();
    public virtual void setInputState(ParserSharedInputState state);
    public virtual void resetState();
    public virtual string getTokenName(int num);
    public virtual String[] getTokenNames();
    public virtual bool isDebugMode();
    public abstract virtual int LA(int i);
    public abstract virtual IToken LT(int i);
    public virtual int mark();
    public virtual void match(int t);
    public virtual void match(BitSet b);
    public virtual void matchNot(int t);
    public virtual void reportError(RecognitionException ex);
    public virtual void reportError(string s);
    public virtual void reportWarning(string s);
    public virtual void recover(RecognitionException ex, BitSet tokenSet);
    public virtual void rewind(int pos);
    public virtual void setDebugMode(bool debugMode);
    public virtual void setFilename(string f);
    public virtual void setIgnoreInvalidDebugCalls(bool Value);
    public virtual void setTokenBuffer(TokenBuffer t);
    public virtual void traceIndent();
    public virtual void traceIn(string rname);
    public virtual void traceOut(string rname);
}
internal class antlr.ParserSharedInputState : object {
    protected internal TokenBuffer input;
    public int guessing;
    protected internal string filename;
    public virtual void reset();
}
internal class antlr.RecognitionException : ANTLRException {
    public string fileName;
    public int line;
    public int column;
    public RecognitionException(string s);
    public RecognitionException(string s, string fileName_, int line_, int column_);
    protected RecognitionException(SerializationInfo info, StreamingContext context);
    public virtual string getFilename();
    public virtual int getLine();
    public virtual int getColumn();
    public virtual string ToString();
}
internal class antlr.SemanticException : RecognitionException {
    public SemanticException(string s);
    public SemanticException(string s, string fileName, int line, int column);
    protected SemanticException(SerializationInfo info, StreamingContext context);
}
internal class antlr.StringUtils : object {
    public static string stripBack(string s, char c);
    public static string stripBack(string s, string remove);
    public static string stripFront(string s, char c);
    public static string stripFront(string s, string remove);
    public static string stripFrontBack(string src, string head, string tail);
}
internal class antlr.Token : object {
    public static int MIN_USER_TYPE;
    public static int NULL_TREE_LOOKAHEAD;
    public static int INVALID_TYPE;
    public static int EOF_TYPE;
    public static int SKIP;
    protected int type_;
    public static Token badToken;
    public int Type { get; public set; }
    public Token(int t);
    public Token(int t, string txt);
    private static Token();
    public virtual int getColumn();
    public virtual int getLine();
    public virtual string getFilename();
    public virtual void setFilename(string name);
    public virtual string getText();
    public sealed virtual int get_Type();
    public sealed virtual void set_Type(int value);
    public virtual void setType(int newType);
    public virtual void setColumn(int c);
    public virtual void setLine(int l);
    public virtual void setText(string t);
    public virtual string ToString();
}
internal class antlr.TokenBuffer : object {
    protected internal TokenStream input;
    protected internal int nMarkers;
    protected internal int markerOffset;
    protected internal int numToConsume;
    internal TokenQueue queue;
    public TokenBuffer(TokenStream input_);
    public virtual void reset();
    public virtual void consume();
    protected virtual void fill(int amount);
    public virtual TokenStream getInput();
    public virtual int LA(int i);
    public virtual IToken LT(int i);
    public virtual int mark();
    public virtual void rewind(int mark);
    protected virtual void syncConsume();
}
internal abstract class antlr.TokenCreator : object {
    public string TokenTypeName { get; }
    public abstract virtual string get_TokenTypeName();
    public abstract virtual IToken Create();
}
internal class antlr.TokenQueue : object {
    private IToken[] buffer;
    private int sizeLessOne;
    private int offset;
    protected internal int nbrEntries;
    public TokenQueue(int minSize);
    public void append(IToken tok);
    public IToken elementAt(int idx);
    private void expand();
    private void init(int size);
    public void reset();
    public void removeFirst();
}
internal interface antlr.TokenStream {
    public abstract virtual IToken nextToken();
}
internal class antlr.TokenStreamBasicFilter : object {
    protected internal BitSet discardMask;
    protected internal TokenStream input;
    public TokenStreamBasicFilter(TokenStream input);
    public virtual void discard(int ttype);
    public virtual void discard(BitSet mask);
    public virtual IToken nextToken();
}
internal class antlr.TokenStreamException : ANTLRException {
    public TokenStreamException(string s);
    protected TokenStreamException(SerializationInfo info, StreamingContext context);
}
internal class antlr.TokenStreamHiddenTokenFilter : TokenStreamBasicFilter {
    protected internal BitSet hideMask;
    private IHiddenStreamToken nextMonitoredToken;
    protected internal IHiddenStreamToken lastHiddenToken;
    protected internal IHiddenStreamToken firstHidden;
    public TokenStreamHiddenTokenFilter(TokenStream input);
    protected internal virtual void consume();
    private void consumeFirst();
    public virtual BitSet getDiscardMask();
    public virtual IHiddenStreamToken getHiddenAfter(IHiddenStreamToken t);
    public virtual IHiddenStreamToken getHiddenBefore(IHiddenStreamToken t);
    public virtual BitSet getHideMask();
    public virtual IHiddenStreamToken getInitialHiddenToken();
    public virtual void hide(int m);
    public virtual void hide(BitSet mask);
    protected internal virtual IHiddenStreamToken LA(int i);
    public virtual IToken nextToken();
    public virtual void resetState();
}
internal class antlr.TokenStreamRecognitionException : TokenStreamException {
    public RecognitionException recog;
    public TokenStreamRecognitionException(RecognitionException re);
    protected TokenStreamRecognitionException(SerializationInfo info, StreamingContext context);
    public virtual string ToString();
}
internal class antlr.TokenStreamRetryException : TokenStreamException {
    protected TokenStreamRetryException(SerializationInfo info, StreamingContext context);
}
internal class antlr.TokenStreamRewriteEngine : object {
    public static int MIN_TOKEN_INDEX;
    public static string DEFAULT_PROGRAM_NAME;
    public static int PROGRAM_INIT_SIZE;
    protected IList tokens;
    protected IDictionary programs;
    protected IDictionary lastRewriteTokenIndexes;
    protected int _index;
    protected TokenStream stream;
    protected BitSet discardMask;
    public TokenStreamRewriteEngine(TokenStream upstream);
    public TokenStreamRewriteEngine(TokenStream upstream, int initialSize);
    public sealed virtual IToken nextToken();
    public void rollback(int instructionIndex);
    public void rollback(string programName, int instructionIndex);
    public void deleteProgram();
    public void deleteProgram(string programName);
    protected void addToSortedRewriteList(RewriteOperation op);
    protected void addToSortedRewriteList(string programName, RewriteOperation op);
    public void insertAfter(IToken t, string text);
    public void insertAfter(int index, string text);
    public void insertAfter(string programName, IToken t, string text);
    public void insertAfter(string programName, int index, string text);
    public void insertBefore(IToken t, string text);
    public void insertBefore(int index, string text);
    public void insertBefore(string programName, IToken t, string text);
    public void insertBefore(string programName, int index, string text);
    public void replace(int index, string text);
    public void replace(int from, int to, string text);
    public void replace(IToken indexT, string text);
    public void replace(IToken from, IToken to, string text);
    public void replace(string programName, int from, int to, string text);
    public void replace(string programName, IToken from, IToken to, string text);
    public void delete(int index);
    public void delete(int from, int to);
    public void delete(IToken indexT);
    public void delete(IToken from, IToken to);
    public void delete(string programName, int from, int to);
    public void delete(string programName, IToken from, IToken to);
    public void discard(int ttype);
    public TokenWithIndex getToken(int i);
    public int getTokenStreamSize();
    public string ToOriginalString();
    public string ToOriginalString(int start, int end);
    public virtual string ToString();
    public string ToString(string programName);
    public string ToString(int start, int end);
    public string ToString(string programName, int start, int end);
    public string ToDebugString();
    public string ToDebugString(int start, int end);
    public int getLastRewriteTokenIndex();
    protected int getLastRewriteTokenIndex(string programName);
    protected void setLastRewriteTokenIndex(string programName, int i);
    protected IList getProgram(string name);
    private IList initializeProgram(string name);
}
internal class antlr.TokenStreamSelector : object {
    protected internal Hashtable inputStreamNames;
    protected internal TokenStream input;
    protected internal Stack streamStack;
    public virtual void addInputStream(TokenStream stream, string key);
    public virtual TokenStream getCurrentStream();
    public virtual TokenStream getStream(string sname);
    public virtual IToken nextToken();
    public virtual TokenStream pop();
    public virtual void push(TokenStream stream);
    public virtual void push(string sname);
    public virtual void retry();
    public virtual void select(TokenStream stream);
    public virtual void select(string sname);
}
internal class antlr.TokenWithIndex : CommonToken {
    private int index;
    public TokenWithIndex(int i, string t);
    public void setIndex(int i);
    public int getIndex();
    public virtual string ToString();
}
internal static class AssemblyRef : object {
    internal static string ProductPublicKey;
    internal static string TestPublicKey;
}
public enum Microsoft.SqlServer.TransactSql.ScriptDom.AbortAfterWaitType : Enum {
    public int value__;
    public static AbortAfterWaitType None;
    public static AbortAfterWaitType Blockers;
    public static AbortAfterWaitType Self;
}
internal class Microsoft.SqlServer.TransactSql.ScriptDom.AbortAfterWaitTypeHelper : OptionsHelper`1<AbortAfterWaitType> {
    public static AbortAfterWaitTypeHelper Instance;
    private static AbortAfterWaitTypeHelper();
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.AcceleratedDatabaseRecoveryDatabaseOption : DatabaseOption {
    private OptionState _optionState;
    public OptionState OptionState { get; public set; }
    public OptionState get_OptionState();
    public void set_OptionState(OptionState value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.AddAlterFullTextIndexAction : AlterFullTextIndexAction {
    private List`1<FullTextIndexColumn> _columns;
    private bool _withNoPopulation;
    public IList`1<FullTextIndexColumn> Columns { get; }
    public bool WithNoPopulation { get; public set; }
    public IList`1<FullTextIndexColumn> get_Columns();
    public bool get_WithNoPopulation();
    public void set_WithNoPopulation(bool value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.AddFileSpec : TSqlFragment {
    private ScalarExpression _file;
    private Literal _fileName;
    public ScalarExpression File { get; public set; }
    public Literal FileName { get; public set; }
    public ScalarExpression get_File();
    public void set_File(ScalarExpression value);
    public Literal get_FileName();
    public void set_FileName(Literal value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.AddMemberAlterRoleAction : AlterRoleAction {
    private Identifier _member;
    public Identifier Member { get; public set; }
    public Identifier get_Member();
    public void set_Member(Identifier value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.AddSearchPropertyListAction : SearchPropertyListAction {
    private StringLiteral _propertyName;
    private StringLiteral _guid;
    private IntegerLiteral _id;
    private StringLiteral _description;
    public StringLiteral PropertyName { get; public set; }
    public StringLiteral Guid { get; public set; }
    public IntegerLiteral Id { get; public set; }
    public StringLiteral Description { get; public set; }
    public StringLiteral get_PropertyName();
    public void set_PropertyName(StringLiteral value);
    public StringLiteral get_Guid();
    public void set_Guid(StringLiteral value);
    public IntegerLiteral get_Id();
    public void set_Id(IntegerLiteral value);
    public StringLiteral get_Description();
    public void set_Description(StringLiteral value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.AddSensitivityClassificationStatement : SensitivityClassificationStatement {
    private List`1<SensitivityClassificationOption> _options;
    public IList`1<SensitivityClassificationOption> Options { get; }
    public IList`1<SensitivityClassificationOption> get_Options();
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.AddSignatureStatement : SignatureStatementBase {
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.AdHocDataSource : TSqlFragment {
    private StringLiteral _providerName;
    private StringLiteral _initString;
    public StringLiteral ProviderName { get; public set; }
    public StringLiteral InitString { get; public set; }
    public StringLiteral get_ProviderName();
    public void set_ProviderName(StringLiteral value);
    public StringLiteral get_InitString();
    public void set_InitString(StringLiteral value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.AdHocTableReference : TableReferenceWithAlias {
    private AdHocDataSource _dataSource;
    private SchemaObjectNameOrValueExpression _object;
    public AdHocDataSource DataSource { get; public set; }
    public SchemaObjectNameOrValueExpression Object { get; public set; }
    public AdHocDataSource get_DataSource();
    public void set_DataSource(AdHocDataSource value);
    public SchemaObjectNameOrValueExpression get_Object();
    public void set_Object(SchemaObjectNameOrValueExpression value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public enum Microsoft.SqlServer.TransactSql.ScriptDom.AffinityKind : Enum {
    public int value__;
    public static AffinityKind NotSpecified;
    public static AffinityKind None;
    public static AffinityKind Integer;
    public static AffinityKind Admin;
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.AlgorithmKeyOption : KeyOption {
    private EncryptionAlgorithm _algorithm;
    public EncryptionAlgorithm Algorithm { get; public set; }
    public EncryptionAlgorithm get_Algorithm();
    public void set_Algorithm(EncryptionAlgorithm value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public enum Microsoft.SqlServer.TransactSql.ScriptDom.AllowConnectionsOptionKind : Enum {
    public int value__;
    public static AllowConnectionsOptionKind No;
    public static AllowConnectionsOptionKind ReadOnly;
    public static AllowConnectionsOptionKind ReadWrite;
    public static AllowConnectionsOptionKind All;
}
internal class Microsoft.SqlServer.TransactSql.ScriptDom.AllowConnectionsOptionsHelper : OptionsHelper`1<AllowConnectionsOptionKind> {
    public static AllowConnectionsOptionsHelper Instance;
    private static AllowConnectionsOptionsHelper();
}
public enum Microsoft.SqlServer.TransactSql.ScriptDom.AlterAction : Enum {
    public int value__;
    public static AlterAction None;
    public static AlterAction Add;
    public static AlterAction Drop;
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.AlterApplicationRoleStatement : ApplicationRoleStatement {
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.AlterAssemblyStatement : AssemblyStatement {
    private List`1<Literal> _dropFiles;
    private bool _isDropAll;
    private List`1<AddFileSpec> _addFiles;
    public IList`1<Literal> DropFiles { get; }
    public bool IsDropAll { get; public set; }
    public IList`1<AddFileSpec> AddFiles { get; }
    public IList`1<Literal> get_DropFiles();
    public bool get_IsDropAll();
    public void set_IsDropAll(bool value);
    public IList`1<AddFileSpec> get_AddFiles();
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.AlterAsymmetricKeyStatement : TSqlStatement {
    private Identifier _name;
    private Literal _attestedBy;
    private AlterCertificateStatementKind _kind;
    private Literal _encryptionPassword;
    private Literal _decryptionPassword;
    public Identifier Name { get; public set; }
    public Literal AttestedBy { get; public set; }
    public AlterCertificateStatementKind Kind { get; public set; }
    public Literal EncryptionPassword { get; public set; }
    public Literal DecryptionPassword { get; public set; }
    public Identifier get_Name();
    public void set_Name(Identifier value);
    public Literal get_AttestedBy();
    public void set_AttestedBy(Literal value);
    public AlterCertificateStatementKind get_Kind();
    public void set_Kind(AlterCertificateStatementKind value);
    public sealed virtual Literal get_EncryptionPassword();
    public sealed virtual void set_EncryptionPassword(Literal value);
    public sealed virtual Literal get_DecryptionPassword();
    public sealed virtual void set_DecryptionPassword(Literal value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.AlterAuthorizationStatement : TSqlStatement {
    private SecurityTargetObject _securityTargetObject;
    private bool _toSchemaOwner;
    private Identifier _principalName;
    public SecurityTargetObject SecurityTargetObject { get; public set; }
    public bool ToSchemaOwner { get; public set; }
    public Identifier PrincipalName { get; public set; }
    public SecurityTargetObject get_SecurityTargetObject();
    public void set_SecurityTargetObject(SecurityTargetObject value);
    public bool get_ToSchemaOwner();
    public void set_ToSchemaOwner(bool value);
    public Identifier get_PrincipalName();
    public void set_PrincipalName(Identifier value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.AlterAvailabilityGroupAction : TSqlFragment {
    private AlterAvailabilityGroupActionType _actionType;
    public AlterAvailabilityGroupActionType ActionType { get; public set; }
    public AlterAvailabilityGroupActionType get_ActionType();
    public void set_ActionType(AlterAvailabilityGroupActionType value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public enum Microsoft.SqlServer.TransactSql.ScriptDom.AlterAvailabilityGroupActionType : Enum {
    public int value__;
    public static AlterAvailabilityGroupActionType Failover;
    public static AlterAvailabilityGroupActionType ForceFailoverAllowDataLoss;
    public static AlterAvailabilityGroupActionType Online;
    public static AlterAvailabilityGroupActionType Offline;
    public static AlterAvailabilityGroupActionType Join;
}
internal class Microsoft.SqlServer.TransactSql.ScriptDom.AlterAvailabilityGroupActionTypeHelper : OptionsHelper`1<AlterAvailabilityGroupActionType> {
    public static AlterAvailabilityGroupActionTypeHelper Instance;
    private static AlterAvailabilityGroupActionTypeHelper();
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.AlterAvailabilityGroupFailoverAction : AlterAvailabilityGroupAction {
    private List`1<AlterAvailabilityGroupFailoverOption> _options;
    public IList`1<AlterAvailabilityGroupFailoverOption> Options { get; }
    public IList`1<AlterAvailabilityGroupFailoverOption> get_Options();
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.AlterAvailabilityGroupFailoverOption : TSqlFragment {
    private FailoverActionOptionKind _optionKind;
    private Literal _value;
    public FailoverActionOptionKind OptionKind { get; public set; }
    public Literal Value { get; public set; }
    public FailoverActionOptionKind get_OptionKind();
    public void set_OptionKind(FailoverActionOptionKind value);
    public Literal get_Value();
    public void set_Value(Literal value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.AlterAvailabilityGroupStatement : AvailabilityGroupStatement {
    private AlterAvailabilityGroupStatementType _alterAvailabilityGroupStatementType;
    private AlterAvailabilityGroupAction _action;
    public AlterAvailabilityGroupStatementType AlterAvailabilityGroupStatementType { get; public set; }
    public AlterAvailabilityGroupAction Action { get; public set; }
    public AlterAvailabilityGroupStatementType get_AlterAvailabilityGroupStatementType();
    public void set_AlterAvailabilityGroupStatementType(AlterAvailabilityGroupStatementType value);
    public AlterAvailabilityGroupAction get_Action();
    public void set_Action(AlterAvailabilityGroupAction value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public enum Microsoft.SqlServer.TransactSql.ScriptDom.AlterAvailabilityGroupStatementType : Enum {
    public int value__;
    public static AlterAvailabilityGroupStatementType AddDatabase;
    public static AlterAvailabilityGroupStatementType RemoveDatabase;
    public static AlterAvailabilityGroupStatementType AddReplica;
    public static AlterAvailabilityGroupStatementType ModifyReplica;
    public static AlterAvailabilityGroupStatementType RemoveReplica;
    public static AlterAvailabilityGroupStatementType Set;
    public static AlterAvailabilityGroupStatementType Action;
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.AlterBrokerPriorityStatement : BrokerPriorityStatement {
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.AlterCertificateStatement : CertificateStatementBase {
    private AlterCertificateStatementKind _kind;
    private Literal _attestedBy;
    public AlterCertificateStatementKind Kind { get; public set; }
    public Literal AttestedBy { get; public set; }
    public AlterCertificateStatementKind get_Kind();
    public void set_Kind(AlterCertificateStatementKind value);
    public Literal get_AttestedBy();
    public void set_AttestedBy(Literal value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public enum Microsoft.SqlServer.TransactSql.ScriptDom.AlterCertificateStatementKind : Enum {
    public int value__;
    public static AlterCertificateStatementKind None;
    public static AlterCertificateStatementKind RemovePrivateKey;
    public static AlterCertificateStatementKind RemoveAttestedOption;
    public static AlterCertificateStatementKind WithPrivateKey;
    public static AlterCertificateStatementKind WithActiveForBeginDialog;
    public static AlterCertificateStatementKind AttestedBy;
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.AlterColumnAlterFullTextIndexAction : AlterFullTextIndexAction {
    private FullTextIndexColumn _column;
    private bool _withNoPopulation;
    public FullTextIndexColumn Column { get; public set; }
    public bool WithNoPopulation { get; public set; }
    public FullTextIndexColumn get_Column();
    public void set_Column(FullTextIndexColumn value);
    public bool get_WithNoPopulation();
    public void set_WithNoPopulation(bool value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.AlterColumnEncryptionKeyStatement : ColumnEncryptionKeyStatement {
    private ColumnEncryptionKeyAlterType _alterType;
    public ColumnEncryptionKeyAlterType AlterType { get; public set; }
    public ColumnEncryptionKeyAlterType get_AlterType();
    public void set_AlterType(ColumnEncryptionKeyAlterType value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public abstract class Microsoft.SqlServer.TransactSql.ScriptDom.AlterCreateEndpointStatementBase : TSqlStatement {
    private Identifier _name;
    private EndpointState _state;
    private EndpointAffinity _affinity;
    private EndpointProtocol _protocol;
    private List`1<EndpointProtocolOption> _protocolOptions;
    private EndpointType _endpointType;
    private List`1<PayloadOption> _payloadOptions;
    public Identifier Name { get; public set; }
    public EndpointState State { get; public set; }
    public EndpointAffinity Affinity { get; public set; }
    public EndpointProtocol Protocol { get; public set; }
    public IList`1<EndpointProtocolOption> ProtocolOptions { get; }
    public EndpointType EndpointType { get; public set; }
    public IList`1<PayloadOption> PayloadOptions { get; }
    public Identifier get_Name();
    public void set_Name(Identifier value);
    public EndpointState get_State();
    public void set_State(EndpointState value);
    public EndpointAffinity get_Affinity();
    public void set_Affinity(EndpointAffinity value);
    public EndpointProtocol get_Protocol();
    public void set_Protocol(EndpointProtocol value);
    public IList`1<EndpointProtocolOption> get_ProtocolOptions();
    public EndpointType get_EndpointType();
    public void set_EndpointType(EndpointType value);
    public IList`1<PayloadOption> get_PayloadOptions();
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public abstract class Microsoft.SqlServer.TransactSql.ScriptDom.AlterCreateServiceStatementBase : TSqlStatement {
    private Identifier _name;
    private SchemaObjectName _queueName;
    private List`1<ServiceContract> _serviceContracts;
    public Identifier Name { get; public set; }
    public SchemaObjectName QueueName { get; public set; }
    public IList`1<ServiceContract> ServiceContracts { get; }
    public Identifier get_Name();
    public void set_Name(Identifier value);
    public SchemaObjectName get_QueueName();
    public void set_QueueName(SchemaObjectName value);
    public IList`1<ServiceContract> get_ServiceContracts();
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.AlterCredentialStatement : CredentialStatement {
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.AlterCryptographicProviderStatement : TSqlStatement {
    private Identifier _name;
    private EnableDisableOptionType _option;
    private Literal _file;
    public Identifier Name { get; public set; }
    public EnableDisableOptionType Option { get; public set; }
    public Literal File { get; public set; }
    public Identifier get_Name();
    public void set_Name(Identifier value);
    public EnableDisableOptionType get_Option();
    public void set_Option(EnableDisableOptionType value);
    public Literal get_File();
    public void set_File(Literal value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.AlterDatabaseAddFileGroupStatement : AlterDatabaseStatement {
    private Identifier _fileGroup;
    private bool _containsFileStream;
    private bool _containsMemoryOptimizedData;
    public Identifier FileGroup { get; public set; }
    public bool ContainsFileStream { get; public set; }
    public bool ContainsMemoryOptimizedData { get; public set; }
    public Identifier get_FileGroup();
    public void set_FileGroup(Identifier value);
    public bool get_ContainsFileStream();
    public void set_ContainsFileStream(bool value);
    public bool get_ContainsMemoryOptimizedData();
    public void set_ContainsMemoryOptimizedData(bool value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.AlterDatabaseAddFileStatement : AlterDatabaseStatement {
    private List`1<FileDeclaration> _fileDeclarations;
    private Identifier _fileGroup;
    private bool _isLog;
    public IList`1<FileDeclaration> FileDeclarations { get; }
    public Identifier FileGroup { get; public set; }
    public bool IsLog { get; public set; }
    public IList`1<FileDeclaration> get_FileDeclarations();
    public Identifier get_FileGroup();
    public void set_FileGroup(Identifier value);
    public bool get_IsLog();
    public void set_IsLog(bool value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.AlterDatabaseAuditSpecificationStatement : AuditSpecificationStatement {
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.AlterDatabaseCollateStatement : AlterDatabaseStatement {
    private Identifier _collation;
    public Identifier Collation { get; public set; }
    public sealed virtual Identifier get_Collation();
    public sealed virtual void set_Collation(Identifier value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.AlterDatabaseEncryptionKeyStatement : DatabaseEncryptionKeyStatement {
    private bool _regenerate;
    public bool Regenerate { get; public set; }
    public bool get_Regenerate();
    public void set_Regenerate(bool value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.AlterDatabaseModifyFileGroupStatement : AlterDatabaseStatement {
    private Identifier _fileGroup;
    private Identifier _newFileGroupName;
    private bool _makeDefault;
    private ModifyFileGroupOption _updatabilityOption;
    private AlterDatabaseTermination _termination;
    public Identifier FileGroup { get; public set; }
    public Identifier NewFileGroupName { get; public set; }
    public bool MakeDefault { get; public set; }
    public ModifyFileGroupOption UpdatabilityOption { get; public set; }
    public AlterDatabaseTermination Termination { get; public set; }
    public Identifier get_FileGroup();
    public void set_FileGroup(Identifier value);
    public Identifier get_NewFileGroupName();
    public void set_NewFileGroupName(Identifier value);
    public bool get_MakeDefault();
    public void set_MakeDefault(bool value);
    public ModifyFileGroupOption get_UpdatabilityOption();
    public void set_UpdatabilityOption(ModifyFileGroupOption value);
    public AlterDatabaseTermination get_Termination();
    public void set_Termination(AlterDatabaseTermination value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.AlterDatabaseModifyFileStatement : AlterDatabaseStatement {
    private FileDeclaration _fileDeclaration;
    public FileDeclaration FileDeclaration { get; public set; }
    public FileDeclaration get_FileDeclaration();
    public void set_FileDeclaration(FileDeclaration value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.AlterDatabaseModifyNameStatement : AlterDatabaseStatement {
    private Identifier _newDatabaseName;
    public Identifier NewDatabaseName { get; public set; }
    public Identifier get_NewDatabaseName();
    public void set_NewDatabaseName(Identifier value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.AlterDatabaseRebuildLogStatement : AlterDatabaseStatement {
    private FileDeclaration _fileDeclaration;
    public FileDeclaration FileDeclaration { get; public set; }
    public FileDeclaration get_FileDeclaration();
    public void set_FileDeclaration(FileDeclaration value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.AlterDatabaseRemoveFileGroupStatement : AlterDatabaseStatement {
    private Identifier _fileGroup;
    public Identifier FileGroup { get; public set; }
    public Identifier get_FileGroup();
    public void set_FileGroup(Identifier value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.AlterDatabaseRemoveFileStatement : AlterDatabaseStatement {
    private Identifier _file;
    public Identifier File { get; public set; }
    public Identifier get_File();
    public void set_File(Identifier value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.AlterDatabaseScopedConfigurationClearStatement : AlterDatabaseScopedConfigurationStatement {
    private DatabaseConfigurationClearOption _option;
    public DatabaseConfigurationClearOption Option { get; public set; }
    public DatabaseConfigurationClearOption get_Option();
    public void set_Option(DatabaseConfigurationClearOption value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.AlterDatabaseScopedConfigurationSetStatement : AlterDatabaseScopedConfigurationStatement {
    private DatabaseConfigurationSetOption _option;
    public DatabaseConfigurationSetOption Option { get; public set; }
    public DatabaseConfigurationSetOption get_Option();
    public void set_Option(DatabaseConfigurationSetOption value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public abstract class Microsoft.SqlServer.TransactSql.ScriptDom.AlterDatabaseScopedConfigurationStatement : TSqlStatement {
    private bool _secondary;
    public bool Secondary { get; public set; }
    public bool get_Secondary();
    public void set_Secondary(bool value);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.AlterDatabaseSetStatement : AlterDatabaseStatement {
    private AlterDatabaseTermination _termination;
    private List`1<DatabaseOption> _options;
    public AlterDatabaseTermination Termination { get; public set; }
    public IList`1<DatabaseOption> Options { get; }
    public AlterDatabaseTermination get_Termination();
    public void set_Termination(AlterDatabaseTermination value);
    public IList`1<DatabaseOption> get_Options();
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public abstract class Microsoft.SqlServer.TransactSql.ScriptDom.AlterDatabaseStatement : TSqlStatement {
    private Identifier _databaseName;
    private bool _useCurrent;
    public Identifier DatabaseName { get; public set; }
    public bool UseCurrent { get; public set; }
    public Identifier get_DatabaseName();
    public void set_DatabaseName(Identifier value);
    public bool get_UseCurrent();
    public void set_UseCurrent(bool value);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.AlterDatabaseTermination : TSqlFragment {
    private bool _immediateRollback;
    private Literal _rollbackAfter;
    private bool _noWait;
    public bool ImmediateRollback { get; public set; }
    public Literal RollbackAfter { get; public set; }
    public bool NoWait { get; public set; }
    public bool get_ImmediateRollback();
    public void set_ImmediateRollback(bool value);
    public Literal get_RollbackAfter();
    public void set_RollbackAfter(Literal value);
    public bool get_NoWait();
    public void set_NoWait(bool value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.AlterEndpointStatement : AlterCreateEndpointStatementBase {
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.AlterEventSessionStatement : EventSessionStatement {
    private AlterEventSessionStatementType _statementType;
    private List`1<EventSessionObjectName> _dropEventDeclarations;
    private List`1<EventSessionObjectName> _dropTargetDeclarations;
    public AlterEventSessionStatementType StatementType { get; public set; }
    public IList`1<EventSessionObjectName> DropEventDeclarations { get; }
    public IList`1<EventSessionObjectName> DropTargetDeclarations { get; }
    public AlterEventSessionStatementType get_StatementType();
    public void set_StatementType(AlterEventSessionStatementType value);
    public IList`1<EventSessionObjectName> get_DropEventDeclarations();
    public IList`1<EventSessionObjectName> get_DropTargetDeclarations();
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public enum Microsoft.SqlServer.TransactSql.ScriptDom.AlterEventSessionStatementType : Enum {
    public int value__;
    public static AlterEventSessionStatementType Unknown;
    public static AlterEventSessionStatementType AddEventDeclarationOptionalSessionOptions;
    public static AlterEventSessionStatementType DropEventSpecificationOptionalSessionOptions;
    public static AlterEventSessionStatementType AddTargetDeclarationOptionalSessionOptions;
    public static AlterEventSessionStatementType DropTargetSpecificationOptionalSessionOptions;
    public static AlterEventSessionStatementType RequiredSessionOptions;
    public static AlterEventSessionStatementType AlterStateIsStart;
    public static AlterEventSessionStatementType AlterStateIsStop;
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.AlterExternalDataSourceStatement : ExternalDataSourceStatement {
    private ExternalDataSourcePushdownOption _previousPushDownOption;
    public ExternalDataSourcePushdownOption PreviousPushDownOption { get; public set; }
    public ExternalDataSourcePushdownOption get_PreviousPushDownOption();
    public void set_PreviousPushDownOption(ExternalDataSourcePushdownOption value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.AlterExternalLanguageStatement : ExternalLanguageStatement {
    private Identifier _platform;
    private Identifier _operation;
    private Identifier _owner;
    public Identifier Platform { get; public set; }
    public Identifier Operation { get; public set; }
    public Identifier Owner { get; public set; }
    public Identifier get_Platform();
    public void set_Platform(Identifier value);
    public Identifier get_Operation();
    public void set_Operation(Identifier value);
    public sealed virtual Identifier get_Owner();
    public sealed virtual void set_Owner(Identifier value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.AlterExternalLibraryStatement : ExternalLibraryStatement {
    private Identifier _owner;
    public Identifier Owner { get; public set; }
    public sealed virtual Identifier get_Owner();
    public sealed virtual void set_Owner(Identifier value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.AlterExternalResourcePoolStatement : ExternalResourcePoolStatement {
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public enum Microsoft.SqlServer.TransactSql.ScriptDom.AlterFederationKind : Enum {
    public int value__;
    public static AlterFederationKind Unknown;
    public static AlterFederationKind Split;
    public static AlterFederationKind DropLow;
    public static AlterFederationKind DropHigh;
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.AlterFederationStatement : TSqlStatement {
    private Identifier _name;
    private AlterFederationKind _kind;
    private Identifier _distributionName;
    private ScalarExpression _boundary;
    public Identifier Name { get; public set; }
    public AlterFederationKind Kind { get; public set; }
    public Identifier DistributionName { get; public set; }
    public ScalarExpression Boundary { get; public set; }
    public Identifier get_Name();
    public void set_Name(Identifier value);
    public AlterFederationKind get_Kind();
    public void set_Kind(AlterFederationKind value);
    public Identifier get_DistributionName();
    public void set_DistributionName(Identifier value);
    public ScalarExpression get_Boundary();
    public void set_Boundary(ScalarExpression value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public enum Microsoft.SqlServer.TransactSql.ScriptDom.AlterFullTextCatalogAction : Enum {
    public int value__;
    public static AlterFullTextCatalogAction None;
    public static AlterFullTextCatalogAction Rebuild;
    public static AlterFullTextCatalogAction Reorganize;
    public static AlterFullTextCatalogAction AsDefault;
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.AlterFullTextCatalogStatement : FullTextCatalogStatement {
    private AlterFullTextCatalogAction _action;
    public AlterFullTextCatalogAction Action { get; public set; }
    public AlterFullTextCatalogAction get_Action();
    public void set_Action(AlterFullTextCatalogAction value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public abstract class Microsoft.SqlServer.TransactSql.ScriptDom.AlterFullTextIndexAction : TSqlFragment {
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.AlterFullTextIndexStatement : TSqlStatement {
    private SchemaObjectName _onName;
    private AlterFullTextIndexAction _action;
    public SchemaObjectName OnName { get; public set; }
    public AlterFullTextIndexAction Action { get; public set; }
    public SchemaObjectName get_OnName();
    public void set_OnName(SchemaObjectName value);
    public AlterFullTextIndexAction get_Action();
    public void set_Action(AlterFullTextIndexAction value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.AlterFullTextStopListStatement : TSqlStatement {
    private Identifier _name;
    private FullTextStopListAction _action;
    public Identifier Name { get; public set; }
    public FullTextStopListAction Action { get; public set; }
    public Identifier get_Name();
    public void set_Name(Identifier value);
    public FullTextStopListAction get_Action();
    public void set_Action(FullTextStopListAction value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.AlterFunctionStatement : FunctionStatementBody {
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.AlterIndexStatement : IndexStatement {
    private bool _all;
    private AlterIndexType _alterIndexType;
    private PartitionSpecifier _partition;
    private List`1<SelectiveXmlIndexPromotedPath> _promotedPaths;
    private XmlNamespaces _xmlNamespaces;
    public bool All { get; public set; }
    public AlterIndexType AlterIndexType { get; public set; }
    public PartitionSpecifier Partition { get; public set; }
    public IList`1<SelectiveXmlIndexPromotedPath> PromotedPaths { get; }
    public XmlNamespaces XmlNamespaces { get; public set; }
    public bool get_All();
    public void set_All(bool value);
    public AlterIndexType get_AlterIndexType();
    public void set_AlterIndexType(AlterIndexType value);
    public PartitionSpecifier get_Partition();
    public void set_Partition(PartitionSpecifier value);
    public IList`1<SelectiveXmlIndexPromotedPath> get_PromotedPaths();
    public XmlNamespaces get_XmlNamespaces();
    public void set_XmlNamespaces(XmlNamespaces value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public enum Microsoft.SqlServer.TransactSql.ScriptDom.AlterIndexType : Enum {
    public int value__;
    public static AlterIndexType Rebuild;
    public static AlterIndexType Disable;
    public static AlterIndexType Reorganize;
    public static AlterIndexType Set;
    public static AlterIndexType UpdateSelectiveXmlPaths;
    public static AlterIndexType Abort;
    public static AlterIndexType Pause;
    public static AlterIndexType Resume;
}
internal class Microsoft.SqlServer.TransactSql.ScriptDom.AlterIndexTypeHelper : OptionsHelper`1<AlterIndexType> {
    internal static AlterIndexTypeHelper Instance;
    private static AlterIndexTypeHelper();
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.AlterLoginAddDropCredentialStatement : AlterLoginStatement {
    private bool _isAdd;
    private Identifier _credentialName;
    public bool IsAdd { get; public set; }
    public Identifier CredentialName { get; public set; }
    public bool get_IsAdd();
    public void set_IsAdd(bool value);
    public Identifier get_CredentialName();
    public void set_CredentialName(Identifier value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.AlterLoginEnableDisableStatement : AlterLoginStatement {
    private bool _isEnable;
    public bool IsEnable { get; public set; }
    public bool get_IsEnable();
    public void set_IsEnable(bool value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.AlterLoginOptionsStatement : AlterLoginStatement {
    private List`1<PrincipalOption> _options;
    public IList`1<PrincipalOption> Options { get; }
    public IList`1<PrincipalOption> get_Options();
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public abstract class Microsoft.SqlServer.TransactSql.ScriptDom.AlterLoginStatement : TSqlStatement {
    private Identifier _name;
    public Identifier Name { get; public set; }
    public Identifier get_Name();
    public void set_Name(Identifier value);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public enum Microsoft.SqlServer.TransactSql.ScriptDom.AlterMasterKeyOption : Enum {
    public int value__;
    public static AlterMasterKeyOption None;
    public static AlterMasterKeyOption Regenerate;
    public static AlterMasterKeyOption ForceRegenerate;
    public static AlterMasterKeyOption AddEncryptionByServiceMasterKey;
    public static AlterMasterKeyOption AddEncryptionByPassword;
    public static AlterMasterKeyOption DropEncryptionByServiceMasterKey;
    public static AlterMasterKeyOption DropEncryptionByPassword;
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.AlterMasterKeyStatement : MasterKeyStatement {
    private AlterMasterKeyOption _option;
    public AlterMasterKeyOption Option { get; public set; }
    public AlterMasterKeyOption get_Option();
    public void set_Option(AlterMasterKeyOption value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.AlterMessageTypeStatement : MessageTypeStatementBase {
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.AlterPartitionFunctionStatement : TSqlStatement {
    private Identifier _name;
    private bool _isSplit;
    private ScalarExpression _boundary;
    public Identifier Name { get; public set; }
    public bool IsSplit { get; public set; }
    public ScalarExpression Boundary { get; public set; }
    public Identifier get_Name();
    public void set_Name(Identifier value);
    public bool get_IsSplit();
    public void set_IsSplit(bool value);
    public ScalarExpression get_Boundary();
    public void set_Boundary(ScalarExpression value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.AlterPartitionSchemeStatement : TSqlStatement {
    private Identifier _name;
    private IdentifierOrValueExpression _fileGroup;
    public Identifier Name { get; public set; }
    public IdentifierOrValueExpression FileGroup { get; public set; }
    public Identifier get_Name();
    public void set_Name(Identifier value);
    public IdentifierOrValueExpression get_FileGroup();
    public void set_FileGroup(IdentifierOrValueExpression value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.AlterProcedureStatement : ProcedureStatementBody {
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.AlterQueueStatement : QueueStatement {
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.AlterRemoteServiceBindingStatement : RemoteServiceBindingStatementBase {
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public enum Microsoft.SqlServer.TransactSql.ScriptDom.AlterResourceGovernorCommandType : Enum {
    public int value__;
    public static AlterResourceGovernorCommandType Unknown;
    public static AlterResourceGovernorCommandType Disable;
    public static AlterResourceGovernorCommandType Reconfigure;
    public static AlterResourceGovernorCommandType ClassifierFunction;
    public static AlterResourceGovernorCommandType ResetStatistics;
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.AlterResourceGovernorStatement : TSqlStatement {
    private AlterResourceGovernorCommandType _command;
    private SchemaObjectName _classifierFunction;
    public AlterResourceGovernorCommandType Command { get; public set; }
    public SchemaObjectName ClassifierFunction { get; public set; }
    public AlterResourceGovernorCommandType get_Command();
    public void set_Command(AlterResourceGovernorCommandType value);
    public SchemaObjectName get_ClassifierFunction();
    public void set_ClassifierFunction(SchemaObjectName value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.AlterResourcePoolStatement : ResourcePoolStatement {
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public abstract class Microsoft.SqlServer.TransactSql.ScriptDom.AlterRoleAction : TSqlFragment {
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.AlterRoleStatement : RoleStatement {
    private AlterRoleAction _action;
    public AlterRoleAction Action { get; public set; }
    public AlterRoleAction get_Action();
    public void set_Action(AlterRoleAction value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.AlterRouteStatement : RouteStatement {
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.AlterSchemaStatement : TSqlStatement {
    private Identifier _name;
    private SchemaObjectName _objectName;
    private SecurityObjectKind _objectKind;
    public Identifier Name { get; public set; }
    public SchemaObjectName ObjectName { get; public set; }
    public SecurityObjectKind ObjectKind { get; public set; }
    public Identifier get_Name();
    public void set_Name(Identifier value);
    public SchemaObjectName get_ObjectName();
    public void set_ObjectName(SchemaObjectName value);
    public SecurityObjectKind get_ObjectKind();
    public void set_ObjectKind(SecurityObjectKind value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.AlterSearchPropertyListStatement : TSqlStatement {
    private Identifier _name;
    private SearchPropertyListAction _action;
    public Identifier Name { get; public set; }
    public SearchPropertyListAction Action { get; public set; }
    public Identifier get_Name();
    public void set_Name(Identifier value);
    public SearchPropertyListAction get_Action();
    public void set_Action(SearchPropertyListAction value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.AlterSecurityPolicyStatement : SecurityPolicyStatement {
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.AlterSequenceStatement : SequenceStatement {
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.AlterServerAuditSpecificationStatement : AuditSpecificationStatement {
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.AlterServerAuditStatement : ServerAuditStatement {
    private Identifier _newName;
    private bool _removeWhere;
    public Identifier NewName { get; public set; }
    public bool RemoveWhere { get; public set; }
    public Identifier get_NewName();
    public void set_NewName(Identifier value);
    public bool get_RemoveWhere();
    public void set_RemoveWhere(bool value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.AlterServerConfigurationBufferPoolExtensionContainerOption : AlterServerConfigurationBufferPoolExtensionOption {
    private List`1<AlterServerConfigurationBufferPoolExtensionOption> _suboptions;
    public IList`1<AlterServerConfigurationBufferPoolExtensionOption> Suboptions { get; }
    public IList`1<AlterServerConfigurationBufferPoolExtensionOption> get_Suboptions();
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.AlterServerConfigurationBufferPoolExtensionOption : TSqlFragment {
    private AlterServerConfigurationBufferPoolExtensionOptionKind _optionKind;
    private OptionValue _optionValue;
    public AlterServerConfigurationBufferPoolExtensionOptionKind OptionKind { get; public set; }
    public OptionValue OptionValue { get; public set; }
    public AlterServerConfigurationBufferPoolExtensionOptionKind get_OptionKind();
    public void set_OptionKind(AlterServerConfigurationBufferPoolExtensionOptionKind value);
    public OptionValue get_OptionValue();
    public void set_OptionValue(OptionValue value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
internal class Microsoft.SqlServer.TransactSql.ScriptDom.AlterServerConfigurationBufferPoolExtensionOptionHelper : OptionsHelper`1<AlterServerConfigurationBufferPoolExtensionOptionKind> {
    internal static AlterServerConfigurationBufferPoolExtensionOptionHelper Instance;
    private static AlterServerConfigurationBufferPoolExtensionOptionHelper();
}
public enum Microsoft.SqlServer.TransactSql.ScriptDom.AlterServerConfigurationBufferPoolExtensionOptionKind : Enum {
    public int value__;
    public static AlterServerConfigurationBufferPoolExtensionOptionKind None;
    public static AlterServerConfigurationBufferPoolExtensionOptionKind OnOff;
    public static AlterServerConfigurationBufferPoolExtensionOptionKind FileName;
    public static AlterServerConfigurationBufferPoolExtensionOptionKind Size;
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.AlterServerConfigurationBufferPoolExtensionSizeOption : AlterServerConfigurationBufferPoolExtensionOption {
    private MemoryUnit _sizeUnit;
    public MemoryUnit SizeUnit { get; public set; }
    public MemoryUnit get_SizeUnit();
    public void set_SizeUnit(MemoryUnit value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.AlterServerConfigurationDiagnosticsLogMaxSizeOption : AlterServerConfigurationDiagnosticsLogOption {
    private MemoryUnit _sizeUnit;
    public MemoryUnit SizeUnit { get; public set; }
    public MemoryUnit get_SizeUnit();
    public void set_SizeUnit(MemoryUnit value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.AlterServerConfigurationDiagnosticsLogOption : TSqlFragment {
    private AlterServerConfigurationDiagnosticsLogOptionKind _optionKind;
    private OptionValue _optionValue;
    public AlterServerConfigurationDiagnosticsLogOptionKind OptionKind { get; public set; }
    public OptionValue OptionValue { get; public set; }
    public AlterServerConfigurationDiagnosticsLogOptionKind get_OptionKind();
    public void set_OptionKind(AlterServerConfigurationDiagnosticsLogOptionKind value);
    public OptionValue get_OptionValue();
    public void set_OptionValue(OptionValue value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
internal class Microsoft.SqlServer.TransactSql.ScriptDom.AlterServerConfigurationDiagnosticsLogOptionHelper : OptionsHelper`1<AlterServerConfigurationDiagnosticsLogOptionKind> {
    internal static AlterServerConfigurationDiagnosticsLogOptionHelper Instance;
    private static AlterServerConfigurationDiagnosticsLogOptionHelper();
}
public enum Microsoft.SqlServer.TransactSql.ScriptDom.AlterServerConfigurationDiagnosticsLogOptionKind : Enum {
    public int value__;
    public static AlterServerConfigurationDiagnosticsLogOptionKind None;
    public static AlterServerConfigurationDiagnosticsLogOptionKind OnOff;
    public static AlterServerConfigurationDiagnosticsLogOptionKind Path;
    public static AlterServerConfigurationDiagnosticsLogOptionKind MaxSize;
    public static AlterServerConfigurationDiagnosticsLogOptionKind MaxFiles;
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.AlterServerConfigurationExternalAuthenticationContainerOption : AlterServerConfigurationExternalAuthenticationOption {
    private List`1<AlterServerConfigurationExternalAuthenticationOption> _suboptions;
    public IList`1<AlterServerConfigurationExternalAuthenticationOption> Suboptions { get; }
    public IList`1<AlterServerConfigurationExternalAuthenticationOption> get_Suboptions();
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.AlterServerConfigurationExternalAuthenticationOption : TSqlFragment {
    private AlterServerConfigurationExternalAuthenticationOptionKind _optionKind;
    private OptionValue _optionValue;
    public AlterServerConfigurationExternalAuthenticationOptionKind OptionKind { get; public set; }
    public OptionValue OptionValue { get; public set; }
    public AlterServerConfigurationExternalAuthenticationOptionKind get_OptionKind();
    public void set_OptionKind(AlterServerConfigurationExternalAuthenticationOptionKind value);
    public OptionValue get_OptionValue();
    public void set_OptionValue(OptionValue value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
internal class Microsoft.SqlServer.TransactSql.ScriptDom.AlterServerConfigurationExternalAuthenticationOptionHelper : OptionsHelper`1<AlterServerConfigurationExternalAuthenticationOptionKind> {
    internal static AlterServerConfigurationExternalAuthenticationOptionHelper Instance;
    private static AlterServerConfigurationExternalAuthenticationOptionHelper();
}
public enum Microsoft.SqlServer.TransactSql.ScriptDom.AlterServerConfigurationExternalAuthenticationOptionKind : Enum {
    public int value__;
    public static AlterServerConfigurationExternalAuthenticationOptionKind None;
    public static AlterServerConfigurationExternalAuthenticationOptionKind OnOff;
    public static AlterServerConfigurationExternalAuthenticationOptionKind CredentialName;
    public static AlterServerConfigurationExternalAuthenticationOptionKind UseIdentity;
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.AlterServerConfigurationFailoverClusterPropertyOption : TSqlFragment {
    private AlterServerConfigurationFailoverClusterPropertyOptionKind _optionKind;
    private OptionValue _optionValue;
    public AlterServerConfigurationFailoverClusterPropertyOptionKind OptionKind { get; public set; }
    public OptionValue OptionValue { get; public set; }
    public AlterServerConfigurationFailoverClusterPropertyOptionKind get_OptionKind();
    public void set_OptionKind(AlterServerConfigurationFailoverClusterPropertyOptionKind value);
    public OptionValue get_OptionValue();
    public void set_OptionValue(OptionValue value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
internal class Microsoft.SqlServer.TransactSql.ScriptDom.AlterServerConfigurationFailoverClusterPropertyOptionHelper : OptionsHelper`1<AlterServerConfigurationFailoverClusterPropertyOptionKind> {
    internal static AlterServerConfigurationFailoverClusterPropertyOptionHelper Instance;
    private static AlterServerConfigurationFailoverClusterPropertyOptionHelper();
}
public enum Microsoft.SqlServer.TransactSql.ScriptDom.AlterServerConfigurationFailoverClusterPropertyOptionKind : Enum {
    public int value__;
    public static AlterServerConfigurationFailoverClusterPropertyOptionKind None;
    public static AlterServerConfigurationFailoverClusterPropertyOptionKind VerboseLogging;
    public static AlterServerConfigurationFailoverClusterPropertyOptionKind SqlDumperDumpFlags;
    public static AlterServerConfigurationFailoverClusterPropertyOptionKind SqlDumperDumpPath;
    public static AlterServerConfigurationFailoverClusterPropertyOptionKind SqlDumperDumpTimeout;
    public static AlterServerConfigurationFailoverClusterPropertyOptionKind FailureConditionLevel;
    public static AlterServerConfigurationFailoverClusterPropertyOptionKind HealthCheckTimeout;
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.AlterServerConfigurationHadrClusterOption : TSqlFragment {
    private AlterServerConfigurationHadrClusterOptionKind _optionKind;
    private OptionValue _optionValue;
    private bool _isLocal;
    public AlterServerConfigurationHadrClusterOptionKind OptionKind { get; public set; }
    public OptionValue OptionValue { get; public set; }
    public bool IsLocal { get; public set; }
    public AlterServerConfigurationHadrClusterOptionKind get_OptionKind();
    public void set_OptionKind(AlterServerConfigurationHadrClusterOptionKind value);
    public OptionValue get_OptionValue();
    public void set_OptionValue(OptionValue value);
    public bool get_IsLocal();
    public void set_IsLocal(bool value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
internal class Microsoft.SqlServer.TransactSql.ScriptDom.AlterServerConfigurationHadrClusterOptionHelper : OptionsHelper`1<AlterServerConfigurationHadrClusterOptionKind> {
    internal static AlterServerConfigurationHadrClusterOptionHelper Instance;
    private static AlterServerConfigurationHadrClusterOptionHelper();
}
public enum Microsoft.SqlServer.TransactSql.ScriptDom.AlterServerConfigurationHadrClusterOptionKind : Enum {
    public int value__;
    public static AlterServerConfigurationHadrClusterOptionKind None;
    public static AlterServerConfigurationHadrClusterOptionKind Context;
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.AlterServerConfigurationSetBufferPoolExtensionStatement : TSqlStatement {
    private List`1<AlterServerConfigurationBufferPoolExtensionOption> _options;
    public IList`1<AlterServerConfigurationBufferPoolExtensionOption> Options { get; }
    public IList`1<AlterServerConfigurationBufferPoolExtensionOption> get_Options();
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.AlterServerConfigurationSetDiagnosticsLogStatement : TSqlStatement {
    private List`1<AlterServerConfigurationDiagnosticsLogOption> _options;
    public IList`1<AlterServerConfigurationDiagnosticsLogOption> Options { get; }
    public IList`1<AlterServerConfigurationDiagnosticsLogOption> get_Options();
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.AlterServerConfigurationSetExternalAuthenticationStatement : TSqlStatement {
    private List`1<AlterServerConfigurationExternalAuthenticationOption> _options;
    public IList`1<AlterServerConfigurationExternalAuthenticationOption> Options { get; }
    public IList`1<AlterServerConfigurationExternalAuthenticationOption> get_Options();
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.AlterServerConfigurationSetFailoverClusterPropertyStatement : TSqlStatement {
    private List`1<AlterServerConfigurationFailoverClusterPropertyOption> _options;
    public IList`1<AlterServerConfigurationFailoverClusterPropertyOption> Options { get; }
    public IList`1<AlterServerConfigurationFailoverClusterPropertyOption> get_Options();
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.AlterServerConfigurationSetHadrClusterStatement : TSqlStatement {
    private List`1<AlterServerConfigurationHadrClusterOption> _options;
    public IList`1<AlterServerConfigurationHadrClusterOption> Options { get; }
    public IList`1<AlterServerConfigurationHadrClusterOption> get_Options();
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.AlterServerConfigurationSetSoftNumaStatement : TSqlStatement {
    private List`1<AlterServerConfigurationSoftNumaOption> _options;
    public IList`1<AlterServerConfigurationSoftNumaOption> Options { get; }
    public IList`1<AlterServerConfigurationSoftNumaOption> get_Options();
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.AlterServerConfigurationSoftNumaOption : TSqlFragment {
    private AlterServerConfigurationSoftNumaOptionKind _optionKind;
    private OptionValue _optionValue;
    public AlterServerConfigurationSoftNumaOptionKind OptionKind { get; public set; }
    public OptionValue OptionValue { get; public set; }
    public AlterServerConfigurationSoftNumaOptionKind get_OptionKind();
    public void set_OptionKind(AlterServerConfigurationSoftNumaOptionKind value);
    public OptionValue get_OptionValue();
    public void set_OptionValue(OptionValue value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public enum Microsoft.SqlServer.TransactSql.ScriptDom.AlterServerConfigurationSoftNumaOptionKind : Enum {
    public int value__;
    public static AlterServerConfigurationSoftNumaOptionKind None;
    public static AlterServerConfigurationSoftNumaOptionKind OnOff;
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.AlterServerConfigurationStatement : TSqlStatement {
    private ProcessAffinityType _processAffinity;
    private List`1<ProcessAffinityRange> _processAffinityRanges;
    public ProcessAffinityType ProcessAffinity { get; public set; }
    public IList`1<ProcessAffinityRange> ProcessAffinityRanges { get; }
    public ProcessAffinityType get_ProcessAffinity();
    public void set_ProcessAffinity(ProcessAffinityType value);
    public IList`1<ProcessAffinityRange> get_ProcessAffinityRanges();
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.AlterServerRoleStatement : AlterRoleStatement {
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public enum Microsoft.SqlServer.TransactSql.ScriptDom.AlterServiceMasterKeyOption : Enum {
    public int value__;
    public static AlterServiceMasterKeyOption None;
    public static AlterServiceMasterKeyOption Regenerate;
    public static AlterServiceMasterKeyOption ForceRegenerate;
    public static AlterServiceMasterKeyOption WithOldAccount;
    public static AlterServiceMasterKeyOption WithNewAccount;
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.AlterServiceMasterKeyStatement : TSqlStatement {
    private Literal _account;
    private Literal _password;
    private AlterServiceMasterKeyOption _kind;
    public Literal Account { get; public set; }
    public Literal Password { get; public set; }
    public AlterServiceMasterKeyOption Kind { get; public set; }
    public Literal get_Account();
    public void set_Account(Literal value);
    public Literal get_Password();
    public void set_Password(Literal value);
    public AlterServiceMasterKeyOption get_Kind();
    public void set_Kind(AlterServiceMasterKeyOption value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.AlterServiceStatement : AlterCreateServiceStatementBase {
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.AlterSymmetricKeyStatement : SymmetricKeyStatement {
    private bool _isAdd;
    public bool IsAdd { get; public set; }
    public bool get_IsAdd();
    public void set_IsAdd(bool value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.AlterTableAddTableElementStatement : AlterTableStatement {
    private ConstraintEnforcement _existingRowsCheckEnforcement;
    private TableDefinition _definition;
    public ConstraintEnforcement ExistingRowsCheckEnforcement { get; public set; }
    public TableDefinition Definition { get; public set; }
    public ConstraintEnforcement get_ExistingRowsCheckEnforcement();
    public void set_ExistingRowsCheckEnforcement(ConstraintEnforcement value);
    public TableDefinition get_Definition();
    public void set_Definition(TableDefinition value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public enum Microsoft.SqlServer.TransactSql.ScriptDom.AlterTableAlterColumnOption : Enum {
    public int value__;
    public static AlterTableAlterColumnOption NoOptionDefined;
    public static AlterTableAlterColumnOption AddRowGuidCol;
    public static AlterTableAlterColumnOption DropRowGuidCol;
    public static AlterTableAlterColumnOption Null;
    public static AlterTableAlterColumnOption NotNull;
    public static AlterTableAlterColumnOption AddPersisted;
    public static AlterTableAlterColumnOption DropPersisted;
    public static AlterTableAlterColumnOption AddNotForReplication;
    public static AlterTableAlterColumnOption DropNotForReplication;
    public static AlterTableAlterColumnOption AddSparse;
    public static AlterTableAlterColumnOption DropSparse;
    public static AlterTableAlterColumnOption AddMaskingFunction;
    public static AlterTableAlterColumnOption DropMaskingFunction;
    public static AlterTableAlterColumnOption AddHidden;
    public static AlterTableAlterColumnOption DropHidden;
    public static AlterTableAlterColumnOption Encryption;
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.AlterTableAlterColumnStatement : AlterTableStatement {
    private Identifier _columnIdentifier;
    private DataTypeReference _dataType;
    private AlterTableAlterColumnOption _alterTableAlterColumnOption;
    private ColumnStorageOptions _storageOptions;
    private List`1<IndexOption> _options;
    private Nullable`1<GeneratedAlwaysType> _generatedAlways;
    private bool _isHidden;
    private ColumnEncryptionDefinition _encryption;
    private Identifier _collation;
    private bool _isMasked;
    private StringLiteral _maskingFunction;
    public Identifier ColumnIdentifier { get; public set; }
    public DataTypeReference DataType { get; public set; }
    public AlterTableAlterColumnOption AlterTableAlterColumnOption { get; public set; }
    public ColumnStorageOptions StorageOptions { get; public set; }
    public IList`1<IndexOption> Options { get; }
    public Nullable`1<GeneratedAlwaysType> GeneratedAlways { get; public set; }
    public bool IsHidden { get; public set; }
    public ColumnEncryptionDefinition Encryption { get; public set; }
    public Identifier Collation { get; public set; }
    public bool IsMasked { get; public set; }
    public StringLiteral MaskingFunction { get; public set; }
    public Identifier get_ColumnIdentifier();
    public void set_ColumnIdentifier(Identifier value);
    public DataTypeReference get_DataType();
    public void set_DataType(DataTypeReference value);
    public AlterTableAlterColumnOption get_AlterTableAlterColumnOption();
    public void set_AlterTableAlterColumnOption(AlterTableAlterColumnOption value);
    public ColumnStorageOptions get_StorageOptions();
    public void set_StorageOptions(ColumnStorageOptions value);
    public IList`1<IndexOption> get_Options();
    public Nullable`1<GeneratedAlwaysType> get_GeneratedAlways();
    public void set_GeneratedAlways(Nullable`1<GeneratedAlwaysType> value);
    public bool get_IsHidden();
    public void set_IsHidden(bool value);
    public ColumnEncryptionDefinition get_Encryption();
    public void set_Encryption(ColumnEncryptionDefinition value);
    public sealed virtual Identifier get_Collation();
    public sealed virtual void set_Collation(Identifier value);
    public sealed virtual bool get_IsMasked();
    public sealed virtual void set_IsMasked(bool value);
    public sealed virtual StringLiteral get_MaskingFunction();
    public sealed virtual void set_MaskingFunction(StringLiteral value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.AlterTableAlterIndexStatement : AlterTableStatement {
    private Identifier _indexIdentifier;
    private AlterIndexType _alterIndexType;
    private List`1<IndexOption> _indexOptions;
    public Identifier IndexIdentifier { get; public set; }
    public AlterIndexType AlterIndexType { get; public set; }
    public IList`1<IndexOption> IndexOptions { get; }
    public Identifier get_IndexIdentifier();
    public void set_IndexIdentifier(Identifier value);
    public AlterIndexType get_AlterIndexType();
    public void set_AlterIndexType(AlterIndexType value);
    public IList`1<IndexOption> get_IndexOptions();
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.AlterTableAlterPartitionStatement : AlterTableStatement {
    private ScalarExpression _boundaryValue;
    private bool _isSplit;
    public ScalarExpression BoundaryValue { get; public set; }
    public bool IsSplit { get; public set; }
    public ScalarExpression get_BoundaryValue();
    public void set_BoundaryValue(ScalarExpression value);
    public bool get_IsSplit();
    public void set_IsSplit(bool value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.AlterTableChangeTrackingModificationStatement : AlterTableStatement {
    private bool _isEnable;
    private OptionState _trackColumnsUpdated;
    public bool IsEnable { get; public set; }
    public OptionState TrackColumnsUpdated { get; public set; }
    public bool get_IsEnable();
    public void set_IsEnable(bool value);
    public OptionState get_TrackColumnsUpdated();
    public void set_TrackColumnsUpdated(OptionState value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.AlterTableConstraintModificationStatement : AlterTableStatement {
    private ConstraintEnforcement _existingRowsCheckEnforcement;
    private ConstraintEnforcement _constraintEnforcement;
    private bool _all;
    private List`1<Identifier> _constraintNames;
    public ConstraintEnforcement ExistingRowsCheckEnforcement { get; public set; }
    public ConstraintEnforcement ConstraintEnforcement { get; public set; }
    public bool All { get; public set; }
    public IList`1<Identifier> ConstraintNames { get; }
    public ConstraintEnforcement get_ExistingRowsCheckEnforcement();
    public void set_ExistingRowsCheckEnforcement(ConstraintEnforcement value);
    public ConstraintEnforcement get_ConstraintEnforcement();
    public void set_ConstraintEnforcement(ConstraintEnforcement value);
    public bool get_All();
    public void set_All(bool value);
    public IList`1<Identifier> get_ConstraintNames();
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.AlterTableDropTableElement : TSqlFragment {
    private TableElementType _tableElementType;
    private Identifier _name;
    private List`1<DropClusteredConstraintOption> _dropClusteredConstraintOptions;
    private bool _isIfExists;
    public TableElementType TableElementType { get; public set; }
    public Identifier Name { get; public set; }
    public IList`1<DropClusteredConstraintOption> DropClusteredConstraintOptions { get; }
    public bool IsIfExists { get; public set; }
    public TableElementType get_TableElementType();
    public void set_TableElementType(TableElementType value);
    public Identifier get_Name();
    public void set_Name(Identifier value);
    public IList`1<DropClusteredConstraintOption> get_DropClusteredConstraintOptions();
    public bool get_IsIfExists();
    public void set_IsIfExists(bool value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.AlterTableDropTableElementStatement : AlterTableStatement {
    private List`1<AlterTableDropTableElement> _alterTableDropTableElements;
    public IList`1<AlterTableDropTableElement> AlterTableDropTableElements { get; }
    public IList`1<AlterTableDropTableElement> get_AlterTableDropTableElements();
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.AlterTableFileTableNamespaceStatement : AlterTableStatement {
    private bool _isEnable;
    public bool IsEnable { get; public set; }
    public bool get_IsEnable();
    public void set_IsEnable(bool value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.AlterTableRebuildStatement : AlterTableStatement {
    private PartitionSpecifier _partition;
    private List`1<IndexOption> _indexOptions;
    public PartitionSpecifier Partition { get; public set; }
    public IList`1<IndexOption> IndexOptions { get; }
    public PartitionSpecifier get_Partition();
    public void set_Partition(PartitionSpecifier value);
    public IList`1<IndexOption> get_IndexOptions();
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.AlterTableSetStatement : AlterTableStatement {
    private List`1<TableOption> _options;
    public IList`1<TableOption> Options { get; }
    public IList`1<TableOption> get_Options();
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public abstract class Microsoft.SqlServer.TransactSql.ScriptDom.AlterTableStatement : TSqlStatement {
    private SchemaObjectName _schemaObjectName;
    public SchemaObjectName SchemaObjectName { get; public set; }
    public SchemaObjectName get_SchemaObjectName();
    public void set_SchemaObjectName(SchemaObjectName value);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.AlterTableSwitchStatement : AlterTableStatement {
    private ScalarExpression _sourcePartitionNumber;
    private ScalarExpression _targetPartitionNumber;
    private SchemaObjectName _targetTable;
    private List`1<TableSwitchOption> _options;
    public ScalarExpression SourcePartitionNumber { get; public set; }
    public ScalarExpression TargetPartitionNumber { get; public set; }
    public SchemaObjectName TargetTable { get; public set; }
    public IList`1<TableSwitchOption> Options { get; }
    public ScalarExpression get_SourcePartitionNumber();
    public void set_SourcePartitionNumber(ScalarExpression value);
    public ScalarExpression get_TargetPartitionNumber();
    public void set_TargetPartitionNumber(ScalarExpression value);
    public SchemaObjectName get_TargetTable();
    public void set_TargetTable(SchemaObjectName value);
    public IList`1<TableSwitchOption> get_Options();
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.AlterTableTriggerModificationStatement : AlterTableStatement {
    private TriggerEnforcement _triggerEnforcement;
    private bool _all;
    private List`1<Identifier> _triggerNames;
    public TriggerEnforcement TriggerEnforcement { get; public set; }
    public bool All { get; public set; }
    public IList`1<Identifier> TriggerNames { get; }
    public TriggerEnforcement get_TriggerEnforcement();
    public void set_TriggerEnforcement(TriggerEnforcement value);
    public bool get_All();
    public void set_All(bool value);
    public IList`1<Identifier> get_TriggerNames();
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.AlterTriggerStatement : TriggerStatementBody {
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.AlterUserStatement : UserStatement {
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.AlterViewStatement : ViewStatementBody {
    private bool _isRebuild;
    private bool _isDisable;
    public bool IsRebuild { get; public set; }
    public bool IsDisable { get; public set; }
    public bool get_IsRebuild();
    public void set_IsRebuild(bool value);
    public bool get_IsDisable();
    public void set_IsDisable(bool value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.AlterWorkloadGroupStatement : WorkloadGroupStatement {
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.AlterXmlSchemaCollectionStatement : TSqlStatement {
    private SchemaObjectName _name;
    private ScalarExpression _expression;
    public SchemaObjectName Name { get; public set; }
    public ScalarExpression Expression { get; public set; }
    public SchemaObjectName get_Name();
    public void set_Name(SchemaObjectName value);
    public ScalarExpression get_Expression();
    public void set_Expression(ScalarExpression value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.ApplicationRoleOption : TSqlFragment {
    private ApplicationRoleOptionKind _optionKind;
    private IdentifierOrValueExpression _value;
    public ApplicationRoleOptionKind OptionKind { get; public set; }
    public IdentifierOrValueExpression Value { get; public set; }
    public ApplicationRoleOptionKind get_OptionKind();
    public void set_OptionKind(ApplicationRoleOptionKind value);
    public IdentifierOrValueExpression get_Value();
    public void set_Value(IdentifierOrValueExpression value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
internal class Microsoft.SqlServer.TransactSql.ScriptDom.ApplicationRoleOptionHelper : OptionsHelper`1<ApplicationRoleOptionKind> {
    internal static ApplicationRoleOptionHelper Instance;
    private static ApplicationRoleOptionHelper();
}
public enum Microsoft.SqlServer.TransactSql.ScriptDom.ApplicationRoleOptionKind : Enum {
    public int value__;
    public static ApplicationRoleOptionKind Name;
    public static ApplicationRoleOptionKind DefaultSchema;
    public static ApplicationRoleOptionKind Login;
    public static ApplicationRoleOptionKind Password;
}
public abstract class Microsoft.SqlServer.TransactSql.ScriptDom.ApplicationRoleStatement : TSqlStatement {
    private Identifier _name;
    private List`1<ApplicationRoleOption> _applicationRoleOptions;
    public Identifier Name { get; public set; }
    public IList`1<ApplicationRoleOption> ApplicationRoleOptions { get; }
    public Identifier get_Name();
    public void set_Name(Identifier value);
    public IList`1<ApplicationRoleOption> get_ApplicationRoleOptions();
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.AssemblyEncryptionSource : EncryptionSource {
    private Identifier _assembly;
    public Identifier Assembly { get; public set; }
    public Identifier get_Assembly();
    public void set_Assembly(Identifier value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.AssemblyName : TSqlFragment {
    private Identifier _name;
    private Identifier _className;
    public Identifier Name { get; public set; }
    public Identifier ClassName { get; public set; }
    public Identifier get_Name();
    public void set_Name(Identifier value);
    public Identifier get_ClassName();
    public void set_ClassName(Identifier value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.AssemblyOption : TSqlFragment {
    private AssemblyOptionKind _optionKind;
    public AssemblyOptionKind OptionKind { get; public set; }
    public AssemblyOptionKind get_OptionKind();
    public void set_OptionKind(AssemblyOptionKind value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public enum Microsoft.SqlServer.TransactSql.ScriptDom.AssemblyOptionKind : Enum {
    public int value__;
    public static AssemblyOptionKind PermissionSet;
    public static AssemblyOptionKind Visibility;
    public static AssemblyOptionKind UncheckedData;
}
public abstract class Microsoft.SqlServer.TransactSql.ScriptDom.AssemblyStatement : TSqlStatement {
    private Identifier _name;
    private List`1<ScalarExpression> _parameters;
    private List`1<AssemblyOption> _options;
    public Identifier Name { get; public set; }
    public IList`1<ScalarExpression> Parameters { get; }
    public IList`1<AssemblyOption> Options { get; }
    public Identifier get_Name();
    public void set_Name(Identifier value);
    public IList`1<ScalarExpression> get_Parameters();
    public IList`1<AssemblyOption> get_Options();
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public enum Microsoft.SqlServer.TransactSql.ScriptDom.AssignmentKind : Enum {
    public int value__;
    public static AssignmentKind Equals;
    public static AssignmentKind AddEquals;
    public static AssignmentKind SubtractEquals;
    public static AssignmentKind MultiplyEquals;
    public static AssignmentKind DivideEquals;
    public static AssignmentKind ModEquals;
    public static AssignmentKind BitwiseAndEquals;
    public static AssignmentKind BitwiseOrEquals;
    public static AssignmentKind BitwiseXorEquals;
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.AssignmentSetClause : SetClause {
    private VariableReference _variable;
    private ColumnReferenceExpression _column;
    private ScalarExpression _newValue;
    private AssignmentKind _assignmentKind;
    public VariableReference Variable { get; public set; }
    public ColumnReferenceExpression Column { get; public set; }
    public ScalarExpression NewValue { get; public set; }
    public AssignmentKind AssignmentKind { get; public set; }
    public VariableReference get_Variable();
    public void set_Variable(VariableReference value);
    public ColumnReferenceExpression get_Column();
    public void set_Column(ColumnReferenceExpression value);
    public ScalarExpression get_NewValue();
    public void set_NewValue(ScalarExpression value);
    public AssignmentKind get_AssignmentKind();
    public void set_AssignmentKind(AssignmentKind value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.AsymmetricKeyCreateLoginSource : CreateLoginSource {
    private Identifier _key;
    private Identifier _credential;
    public Identifier Key { get; public set; }
    public Identifier Credential { get; public set; }
    public Identifier get_Key();
    public void set_Key(Identifier value);
    public Identifier get_Credential();
    public void set_Credential(Identifier value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public abstract class Microsoft.SqlServer.TransactSql.ScriptDom.AtomicBlockOption : TSqlFragment {
    private AtomicBlockOptionKind _optionKind;
    public AtomicBlockOptionKind OptionKind { get; public set; }
    public AtomicBlockOptionKind get_OptionKind();
    public void set_OptionKind(AtomicBlockOptionKind value);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
internal class Microsoft.SqlServer.TransactSql.ScriptDom.AtomicBlockOptionHelper : OptionsHelper`1<AtomicBlockOptionKind> {
    internal static AtomicBlockOptionHelper Instance;
    private static AtomicBlockOptionHelper();
}
public enum Microsoft.SqlServer.TransactSql.ScriptDom.AtomicBlockOptionKind : Enum {
    public int value__;
    public static AtomicBlockOptionKind IsolationLevel;
    public static AtomicBlockOptionKind Language;
    public static AtomicBlockOptionKind DateFirst;
    public static AtomicBlockOptionKind DateFormat;
    public static AtomicBlockOptionKind DelayedDurability;
}
public enum Microsoft.SqlServer.TransactSql.ScriptDom.AttachMode : Enum {
    public int value__;
    public static AttachMode None;
    public static AttachMode Attach;
    public static AttachMode AttachRebuildLog;
    public static AttachMode AttachForceRebuildLog;
    public static AttachMode Load;
}
internal class Microsoft.SqlServer.TransactSql.ScriptDom.AttachModeHelper : OptionsHelper`1<AttachMode> {
    internal static AttachModeHelper Instance;
    private static AttachModeHelper();
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.AtTimeZoneCall : PrimaryExpression {
    private ScalarExpression _dateValue;
    private ScalarExpression _timeZone;
    public ScalarExpression DateValue { get; public set; }
    public ScalarExpression TimeZone { get; public set; }
    public ScalarExpression get_DateValue();
    public void set_DateValue(ScalarExpression value);
    public ScalarExpression get_TimeZone();
    public void set_TimeZone(ScalarExpression value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public enum Microsoft.SqlServer.TransactSql.ScriptDom.AuditActionGroup : Enum {
    public int value__;
    public static AuditActionGroup None;
    public static AuditActionGroup SuccessfulLogin;
    public static AuditActionGroup Logout;
    public static AuditActionGroup ServerStateChange;
    public static AuditActionGroup FailedLogin;
    public static AuditActionGroup LoginChangePassword;
    public static AuditActionGroup ServerRoleMemberChange;
    public static AuditActionGroup ServerPrincipalImpersonation;
    public static AuditActionGroup ServerObjectOwnershipChange;
    public static AuditActionGroup DatabaseMirroringLogin;
    public static AuditActionGroup BrokerLogin;
    public static AuditActionGroup ServerPermissionChange;
    public static AuditActionGroup ServerObjectPermissionChange;
    public static AuditActionGroup ServerOperation;
    public static AuditActionGroup TraceChange;
    public static AuditActionGroup ServerObjectChange;
    public static AuditActionGroup ServerPrincipalChange;
    public static AuditActionGroup DatabasePermissionChange;
    public static AuditActionGroup SchemaObjectPermissionChange;
    public static AuditActionGroup DatabaseRoleMemberChange;
    public static AuditActionGroup ApplicationRoleChangePassword;
    public static AuditActionGroup SchemaObjectAccess;
    public static AuditActionGroup BackupRestore;
    public static AuditActionGroup Dbcc;
    public static AuditActionGroup AuditChange;
    public static AuditActionGroup DatabaseChange;
    public static AuditActionGroup DatabaseObjectChange;
    public static AuditActionGroup DatabasePrincipalChange;
    public static AuditActionGroup SchemaObjectChange;
    public static AuditActionGroup DatabasePrincipalImpersonation;
    public static AuditActionGroup DatabaseObjectOwnershipChange;
    public static AuditActionGroup DatabaseOwnershipChange;
    public static AuditActionGroup SchemaObjectOwnershipChange;
    public static AuditActionGroup DatabaseObjectPermissionChange;
    public static AuditActionGroup DatabaseOperation;
    public static AuditActionGroup DatabaseObjectAccess;
    public static AuditActionGroup SuccessfulDatabaseAuthenticationGroup;
    public static AuditActionGroup FailedDatabaseAuthenticationGroup;
    public static AuditActionGroup DatabaseLogoutGroup;
    public static AuditActionGroup UserChangePasswordGroup;
    public static AuditActionGroup UserDefinedAuditGroup;
    public static AuditActionGroup TransactionBegin;
    public static AuditActionGroup TransactionCommit;
    public static AuditActionGroup TransactionRollback;
    public static AuditActionGroup StatementRollback;
    public static AuditActionGroup TransactionGroup;
    public static AuditActionGroup BatchCompletedGroup;
    public static AuditActionGroup BatchStartedGroup;
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.AuditActionGroupReference : AuditSpecificationDetail {
    private AuditActionGroup _group;
    public AuditActionGroup Group { get; public set; }
    public AuditActionGroup get_Group();
    public void set_Group(AuditActionGroup value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.AuditActionSpecification : AuditSpecificationDetail {
    private List`1<DatabaseAuditAction> _actions;
    private List`1<SecurityPrincipal> _principals;
    private SecurityTargetObject _targetObject;
    public IList`1<DatabaseAuditAction> Actions { get; }
    public IList`1<SecurityPrincipal> Principals { get; }
    public SecurityTargetObject TargetObject { get; public set; }
    public IList`1<DatabaseAuditAction> get_Actions();
    public IList`1<SecurityPrincipal> get_Principals();
    public SecurityTargetObject get_TargetObject();
    public void set_TargetObject(SecurityTargetObject value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
internal class Microsoft.SqlServer.TransactSql.ScriptDom.AuditEventGroupHelper : OptionsHelper`1<EventNotificationEventGroup> {
    internal static AuditEventGroupHelper Instance;
    private static AuditEventGroupHelper();
}
internal class Microsoft.SqlServer.TransactSql.ScriptDom.AuditEventTypeHelper : OptionsHelper`1<EventNotificationEventType> {
    internal static AuditEventTypeHelper Instance;
    private static AuditEventTypeHelper();
}
public enum Microsoft.SqlServer.TransactSql.ScriptDom.AuditFailureActionType : Enum {
    public int value__;
    public static AuditFailureActionType Continue;
    public static AuditFailureActionType Shutdown;
    public static AuditFailureActionType FailOperation;
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.AuditGuidAuditOption : AuditOption {
    private Literal _guid;
    public Literal Guid { get; public set; }
    public Literal get_Guid();
    public void set_Guid(Literal value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public abstract class Microsoft.SqlServer.TransactSql.ScriptDom.AuditOption : TSqlFragment {
    private AuditOptionKind _optionKind;
    public AuditOptionKind OptionKind { get; public set; }
    public AuditOptionKind get_OptionKind();
    public void set_OptionKind(AuditOptionKind value);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public enum Microsoft.SqlServer.TransactSql.ScriptDom.AuditOptionKind : Enum {
    public int value__;
    public static AuditOptionKind QueueDelay;
    public static AuditOptionKind AuditGuid;
    public static AuditOptionKind OnFailure;
    public static AuditOptionKind State;
}
public abstract class Microsoft.SqlServer.TransactSql.ScriptDom.AuditSpecificationDetail : TSqlFragment {
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.AuditSpecificationPart : TSqlFragment {
    private bool _isDrop;
    private AuditSpecificationDetail _details;
    public bool IsDrop { get; public set; }
    public AuditSpecificationDetail Details { get; public set; }
    public bool get_IsDrop();
    public void set_IsDrop(bool value);
    public AuditSpecificationDetail get_Details();
    public void set_Details(AuditSpecificationDetail value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public abstract class Microsoft.SqlServer.TransactSql.ScriptDom.AuditSpecificationStatement : TSqlStatement {
    private OptionState _auditState;
    private List`1<AuditSpecificationPart> _parts;
    private Identifier _specificationName;
    private Identifier _auditName;
    public OptionState AuditState { get; public set; }
    public IList`1<AuditSpecificationPart> Parts { get; }
    public Identifier SpecificationName { get; public set; }
    public Identifier AuditName { get; public set; }
    public OptionState get_AuditState();
    public void set_AuditState(OptionState value);
    public IList`1<AuditSpecificationPart> get_Parts();
    public Identifier get_SpecificationName();
    public void set_SpecificationName(Identifier value);
    public Identifier get_AuditName();
    public void set_AuditName(Identifier value);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.AuditTarget : TSqlFragment {
    private AuditTargetKind _targetKind;
    private List`1<AuditTargetOption> _targetOptions;
    public AuditTargetKind TargetKind { get; public set; }
    public IList`1<AuditTargetOption> TargetOptions { get; }
    public AuditTargetKind get_TargetKind();
    public void set_TargetKind(AuditTargetKind value);
    public IList`1<AuditTargetOption> get_TargetOptions();
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public enum Microsoft.SqlServer.TransactSql.ScriptDom.AuditTargetKind : Enum {
    public int value__;
    public static AuditTargetKind File;
    public static AuditTargetKind ApplicationLog;
    public static AuditTargetKind SecurityLog;
    public static AuditTargetKind Url;
    public static AuditTargetKind ExternalMonitor;
}
public abstract class Microsoft.SqlServer.TransactSql.ScriptDom.AuditTargetOption : TSqlFragment {
    private AuditTargetOptionKind _optionKind;
    public AuditTargetOptionKind OptionKind { get; public set; }
    public AuditTargetOptionKind get_OptionKind();
    public void set_OptionKind(AuditTargetOptionKind value);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public enum Microsoft.SqlServer.TransactSql.ScriptDom.AuditTargetOptionKind : Enum {
    public int value__;
    public static AuditTargetOptionKind MaxRolloverFiles;
    public static AuditTargetOptionKind FilePath;
    public static AuditTargetOptionKind ReserveDiskSpace;
    public static AuditTargetOptionKind MaxSize;
    public static AuditTargetOptionKind MaxFiles;
    public static AuditTargetOptionKind Path;
    public static AuditTargetOptionKind RetentionDays;
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.AuthenticationEndpointProtocolOption : EndpointProtocolOption {
    private AuthenticationTypes _authenticationTypes;
    public AuthenticationTypes AuthenticationTypes { get; public set; }
    public AuthenticationTypes get_AuthenticationTypes();
    public void set_AuthenticationTypes(AuthenticationTypes value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.AuthenticationPayloadOption : PayloadOption {
    private AuthenticationProtocol _protocol;
    private Identifier _certificate;
    private bool _tryCertificateFirst;
    public AuthenticationProtocol Protocol { get; public set; }
    public Identifier Certificate { get; public set; }
    public bool TryCertificateFirst { get; public set; }
    public AuthenticationProtocol get_Protocol();
    public void set_Protocol(AuthenticationProtocol value);
    public Identifier get_Certificate();
    public void set_Certificate(Identifier value);
    public bool get_TryCertificateFirst();
    public void set_TryCertificateFirst(bool value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public enum Microsoft.SqlServer.TransactSql.ScriptDom.AuthenticationProtocol : Enum {
    public int value__;
    public static AuthenticationProtocol NotSpecified;
    public static AuthenticationProtocol Windows;
    public static AuthenticationProtocol WindowsNtlm;
    public static AuthenticationProtocol WindowsKerberos;
    public static AuthenticationProtocol WindowsNegotiate;
}
[FlagsAttribute]
public enum Microsoft.SqlServer.TransactSql.ScriptDom.AuthenticationTypes : Enum {
    public int value__;
    public static AuthenticationTypes None;
    public static AuthenticationTypes Basic;
    public static AuthenticationTypes Digest;
    public static AuthenticationTypes Integrated;
    public static AuthenticationTypes Ntlm;
    public static AuthenticationTypes Kerberos;
}
internal class Microsoft.SqlServer.TransactSql.ScriptDom.AuthenticationTypesHelper : OptionsHelper`1<AuthenticationTypes> {
    internal static AuthenticationTypesHelper Instance;
    private static AuthenticationTypesHelper();
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.AutoCleanupChangeTrackingOptionDetail : ChangeTrackingOptionDetail {
    private bool _isOn;
    public bool IsOn { get; public set; }
    public bool get_IsOn();
    public void set_IsOn(bool value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.AutoCreateStatisticsDatabaseOption : OnOffDatabaseOption {
    private bool _hasIncremental;
    private OptionState _incrementalState;
    public bool HasIncremental { get; public set; }
    public OptionState IncrementalState { get; public set; }
    public bool get_HasIncremental();
    public void set_HasIncremental(bool value);
    public OptionState get_IncrementalState();
    public void set_IncrementalState(OptionState value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.AutomaticTuningCreateIndexOption : AutomaticTuningOption {
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
internal class Microsoft.SqlServer.TransactSql.ScriptDom.AutomaticTuningCreateIndexOptionHelper : OptionsHelper`1<AutomaticTuningOptionState> {
    internal static AutomaticTuningCreateIndexOptionHelper Instance;
    private static AutomaticTuningCreateIndexOptionHelper();
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.AutomaticTuningDatabaseOption : DatabaseOption {
    private AutomaticTuningState _automaticTuningState;
    private List`1<AutomaticTuningOption> _options;
    public AutomaticTuningState AutomaticTuningState { get; public set; }
    public IList`1<AutomaticTuningOption> Options { get; }
    public AutomaticTuningState get_AutomaticTuningState();
    public void set_AutomaticTuningState(AutomaticTuningState value);
    public IList`1<AutomaticTuningOption> get_Options();
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.AutomaticTuningDropIndexOption : AutomaticTuningOption {
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
internal class Microsoft.SqlServer.TransactSql.ScriptDom.AutomaticTuningDropIndexOptionHelper : OptionsHelper`1<AutomaticTuningOptionState> {
    internal static AutomaticTuningDropIndexOptionHelper Instance;
    private static AutomaticTuningDropIndexOptionHelper();
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.AutomaticTuningForceLastGoodPlanOption : AutomaticTuningOption {
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
internal class Microsoft.SqlServer.TransactSql.ScriptDom.AutomaticTuningForceLastGoodPlanOptionHelper : OptionsHelper`1<AutomaticTuningOptionState> {
    internal static AutomaticTuningForceLastGoodPlanOptionHelper Instance;
    private static AutomaticTuningForceLastGoodPlanOptionHelper();
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.AutomaticTuningMaintainIndexOption : AutomaticTuningOption {
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
internal class Microsoft.SqlServer.TransactSql.ScriptDom.AutomaticTuningMaintainIndexOptionHelper : OptionsHelper`1<AutomaticTuningOptionState> {
    internal static AutomaticTuningMaintainIndexOptionHelper Instance;
    private static AutomaticTuningMaintainIndexOptionHelper();
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.AutomaticTuningOption : TSqlFragment {
    private AutomaticTuningOptionKind _optionKind;
    private AutomaticTuningOptionState _value;
    public AutomaticTuningOptionKind OptionKind { get; public set; }
    public AutomaticTuningOptionState Value { get; public set; }
    public AutomaticTuningOptionKind get_OptionKind();
    public void set_OptionKind(AutomaticTuningOptionKind value);
    public AutomaticTuningOptionState get_Value();
    public void set_Value(AutomaticTuningOptionState value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public enum Microsoft.SqlServer.TransactSql.ScriptDom.AutomaticTuningOptionKind : Enum {
    public int value__;
    public static AutomaticTuningOptionKind Force_Last_Good_Plan;
    public static AutomaticTuningOptionKind Create_Index;
    public static AutomaticTuningOptionKind Drop_Index;
    public static AutomaticTuningOptionKind Maintain_Index;
}
internal class Microsoft.SqlServer.TransactSql.ScriptDom.AutomaticTuningOptionsHelper : OptionsHelper`1<AutomaticTuningOptionKind> {
    internal static AutomaticTuningOptionsHelper Instance;
    private static AutomaticTuningOptionsHelper();
}
public enum Microsoft.SqlServer.TransactSql.ScriptDom.AutomaticTuningOptionState : Enum {
    public int value__;
    public static AutomaticTuningOptionState Off;
    public static AutomaticTuningOptionState On;
    public static AutomaticTuningOptionState Default;
}
public enum Microsoft.SqlServer.TransactSql.ScriptDom.AutomaticTuningState : Enum {
    public int value__;
    public static AutomaticTuningState NotSet;
    public static AutomaticTuningState Inherit;
    public static AutomaticTuningState Auto;
    public static AutomaticTuningState Custom;
}
public abstract class Microsoft.SqlServer.TransactSql.ScriptDom.AvailabilityGroupOption : TSqlFragment {
    private AvailabilityGroupOptionKind _optionKind;
    public AvailabilityGroupOptionKind OptionKind { get; public set; }
    public AvailabilityGroupOptionKind get_OptionKind();
    public void set_OptionKind(AvailabilityGroupOptionKind value);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public enum Microsoft.SqlServer.TransactSql.ScriptDom.AvailabilityGroupOptionKind : Enum {
    public int value__;
    public static AvailabilityGroupOptionKind RequiredCopiesToCommit;
}
public abstract class Microsoft.SqlServer.TransactSql.ScriptDom.AvailabilityGroupStatement : TSqlStatement {
    private Identifier _name;
    private List`1<AvailabilityGroupOption> _options;
    private List`1<Identifier> _databases;
    private List`1<AvailabilityReplica> _replicas;
    public Identifier Name { get; public set; }
    public IList`1<AvailabilityGroupOption> Options { get; }
    public IList`1<Identifier> Databases { get; }
    public IList`1<AvailabilityReplica> Replicas { get; }
    public Identifier get_Name();
    public void set_Name(Identifier value);
    public IList`1<AvailabilityGroupOption> get_Options();
    public IList`1<Identifier> get_Databases();
    public IList`1<AvailabilityReplica> get_Replicas();
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public enum Microsoft.SqlServer.TransactSql.ScriptDom.AvailabilityModeOptionKind : Enum {
    public int value__;
    public static AvailabilityModeOptionKind SynchronousCommit;
    public static AvailabilityModeOptionKind AsynchronousCommit;
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.AvailabilityModeReplicaOption : AvailabilityReplicaOption {
    private AvailabilityModeOptionKind _value;
    public AvailabilityModeOptionKind Value { get; public set; }
    public AvailabilityModeOptionKind get_Value();
    public void set_Value(AvailabilityModeOptionKind value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.AvailabilityReplica : TSqlFragment {
    private StringLiteral _serverName;
    private List`1<AvailabilityReplicaOption> _options;
    public StringLiteral ServerName { get; public set; }
    public IList`1<AvailabilityReplicaOption> Options { get; }
    public StringLiteral get_ServerName();
    public void set_ServerName(StringLiteral value);
    public IList`1<AvailabilityReplicaOption> get_Options();
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public abstract class Microsoft.SqlServer.TransactSql.ScriptDom.AvailabilityReplicaOption : TSqlFragment {
    private AvailabilityReplicaOptionKind _optionKind;
    public AvailabilityReplicaOptionKind OptionKind { get; public set; }
    public AvailabilityReplicaOptionKind get_OptionKind();
    public void set_OptionKind(AvailabilityReplicaOptionKind value);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public enum Microsoft.SqlServer.TransactSql.ScriptDom.AvailabilityReplicaOptionKind : Enum {
    public int value__;
    public static AvailabilityReplicaOptionKind AvailabilityMode;
    public static AvailabilityReplicaOptionKind FailoverMode;
    public static AvailabilityReplicaOptionKind EndpointUrl;
    public static AvailabilityReplicaOptionKind SecondaryRole;
    public static AvailabilityReplicaOptionKind SessionTimeout;
    public static AvailabilityReplicaOptionKind ApplyDelay;
    public static AvailabilityReplicaOptionKind PrimaryRole;
}
internal class Microsoft.SqlServer.TransactSql.ScriptDom.AvailabilityReplicaOptionsHelper : OptionsHelper`1<AvailabilityReplicaOptionKind> {
    public static AvailabilityReplicaOptionsHelper Instance;
    private static AvailabilityReplicaOptionsHelper();
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.BackupCertificateStatement : CertificateStatementBase {
    private Literal _file;
    public Literal File { get; public set; }
    public Literal get_File();
    public void set_File(Literal value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.BackupDatabaseStatement : BackupStatement {
    private List`1<BackupRestoreFileInfo> _files;
    public IList`1<BackupRestoreFileInfo> Files { get; }
    public IList`1<BackupRestoreFileInfo> get_Files();
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.BackupEncryptionOption : BackupOption {
    private EncryptionAlgorithm _algorithm;
    private CryptoMechanism _encryptor;
    public EncryptionAlgorithm Algorithm { get; public set; }
    public CryptoMechanism Encryptor { get; public set; }
    public EncryptionAlgorithm get_Algorithm();
    public void set_Algorithm(EncryptionAlgorithm value);
    public CryptoMechanism get_Encryptor();
    public void set_Encryptor(CryptoMechanism value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.BackupMasterKeyStatement : BackupRestoreMasterKeyStatementBase {
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.BackupOption : TSqlFragment {
    private BackupOptionKind _optionKind;
    private ScalarExpression _value;
    public BackupOptionKind OptionKind { get; public set; }
    public ScalarExpression Value { get; public set; }
    public BackupOptionKind get_OptionKind();
    public void set_OptionKind(BackupOptionKind value);
    public ScalarExpression get_Value();
    public void set_Value(ScalarExpression value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public enum Microsoft.SqlServer.TransactSql.ScriptDom.BackupOptionKind : Enum {
    public int value__;
    public static BackupOptionKind None;
    public static BackupOptionKind NoRecovery;
    public static BackupOptionKind TruncateOnly;
    public static BackupOptionKind NoLog;
    public static BackupOptionKind NoTruncate;
    public static BackupOptionKind Unload;
    public static BackupOptionKind NoUnload;
    public static BackupOptionKind Rewind;
    public static BackupOptionKind NoRewind;
    public static BackupOptionKind Format;
    public static BackupOptionKind NoFormat;
    public static BackupOptionKind Init;
    public static BackupOptionKind NoInit;
    public static BackupOptionKind Skip;
    public static BackupOptionKind NoSkip;
    public static BackupOptionKind Restart;
    public static BackupOptionKind Stats;
    public static BackupOptionKind Differential;
    public static BackupOptionKind Snapshot;
    public static BackupOptionKind Checksum;
    public static BackupOptionKind NoChecksum;
    public static BackupOptionKind ContinueAfterError;
    public static BackupOptionKind StopOnError;
    public static BackupOptionKind CopyOnly;
    public static BackupOptionKind Standby;
    public static BackupOptionKind ExpireDate;
    public static BackupOptionKind RetainDays;
    public static BackupOptionKind Name;
    public static BackupOptionKind Description;
    public static BackupOptionKind Password;
    public static BackupOptionKind MediaName;
    public static BackupOptionKind MediaDescription;
    public static BackupOptionKind MediaPassword;
    public static BackupOptionKind BlockSize;
    public static BackupOptionKind BufferCount;
    public static BackupOptionKind MaxTransferSize;
    public static BackupOptionKind EnhancedIntegrity;
    public static BackupOptionKind Compression;
    public static BackupOptionKind NoCompression;
    public static BackupOptionKind Encryption;
}
internal class Microsoft.SqlServer.TransactSql.ScriptDom.BackupOptionsNoValueHelper : OptionsHelper`1<BackupOptionKind> {
    internal static BackupOptionsNoValueHelper Instance;
    private static BackupOptionsNoValueHelper();
}
internal class Microsoft.SqlServer.TransactSql.ScriptDom.BackupOptionsWithValueHelper : OptionsHelper`1<BackupOptionKind> {
    internal static BackupOptionsWithValueHelper Instance;
    private static BackupOptionsWithValueHelper();
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.BackupRestoreFileInfo : TSqlFragment {
    private List`1<ValueExpression> _items;
    private BackupRestoreItemKind _itemKind;
    public IList`1<ValueExpression> Items { get; }
    public BackupRestoreItemKind ItemKind { get; public set; }
    public IList`1<ValueExpression> get_Items();
    public BackupRestoreItemKind get_ItemKind();
    public void set_ItemKind(BackupRestoreItemKind value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public enum Microsoft.SqlServer.TransactSql.ScriptDom.BackupRestoreItemKind : Enum {
    public int value__;
    public static BackupRestoreItemKind None;
    public static BackupRestoreItemKind Files;
    public static BackupRestoreItemKind FileGroups;
    public static BackupRestoreItemKind Page;
    public static BackupRestoreItemKind ReadWriteFileGroups;
}
public abstract class Microsoft.SqlServer.TransactSql.ScriptDom.BackupRestoreMasterKeyStatementBase : TSqlStatement {
    private Literal _file;
    private Literal _password;
    public Literal File { get; public set; }
    public Literal Password { get; public set; }
    public Literal get_File();
    public void set_File(Literal value);
    public Literal get_Password();
    public void set_Password(Literal value);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.BackupServiceMasterKeyStatement : BackupRestoreMasterKeyStatementBase {
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public abstract class Microsoft.SqlServer.TransactSql.ScriptDom.BackupStatement : TSqlStatement {
    private IdentifierOrValueExpression _databaseName;
    private List`1<BackupOption> _options;
    private List`1<MirrorToClause> _mirrorToClauses;
    private List`1<DeviceInfo> _devices;
    public IdentifierOrValueExpression DatabaseName { get; public set; }
    public IList`1<BackupOption> Options { get; }
    public IList`1<MirrorToClause> MirrorToClauses { get; }
    public IList`1<DeviceInfo> Devices { get; }
    public IdentifierOrValueExpression get_DatabaseName();
    public void set_DatabaseName(IdentifierOrValueExpression value);
    public IList`1<BackupOption> get_Options();
    public IList`1<MirrorToClause> get_MirrorToClauses();
    public IList`1<DeviceInfo> get_Devices();
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.BackupTransactionLogStatement : BackupStatement {
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.BackwardsCompatibleDropIndexClause : DropIndexClauseBase {
    private ChildObjectName _index;
    public ChildObjectName Index { get; public set; }
    public ChildObjectName get_Index();
    public void set_Index(ChildObjectName value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.BeginConversationTimerStatement : TSqlStatement {
    private ScalarExpression _handle;
    private ScalarExpression _timeout;
    public ScalarExpression Handle { get; public set; }
    public ScalarExpression Timeout { get; public set; }
    public ScalarExpression get_Handle();
    public void set_Handle(ScalarExpression value);
    public ScalarExpression get_Timeout();
    public void set_Timeout(ScalarExpression value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.BeginDialogStatement : TSqlStatement {
    private bool _isConversation;
    private VariableReference _handle;
    private IdentifierOrValueExpression _initiatorServiceName;
    private ValueExpression _targetServiceName;
    private ValueExpression _instanceSpec;
    private IdentifierOrValueExpression _contractName;
    private List`1<DialogOption> _options;
    public bool IsConversation { get; public set; }
    public VariableReference Handle { get; public set; }
    public IdentifierOrValueExpression InitiatorServiceName { get; public set; }
    public ValueExpression TargetServiceName { get; public set; }
    public ValueExpression InstanceSpec { get; public set; }
    public IdentifierOrValueExpression ContractName { get; public set; }
    public IList`1<DialogOption> Options { get; }
    public bool get_IsConversation();
    public void set_IsConversation(bool value);
    public VariableReference get_Handle();
    public void set_Handle(VariableReference value);
    public IdentifierOrValueExpression get_InitiatorServiceName();
    public void set_InitiatorServiceName(IdentifierOrValueExpression value);
    public ValueExpression get_TargetServiceName();
    public void set_TargetServiceName(ValueExpression value);
    public ValueExpression get_InstanceSpec();
    public void set_InstanceSpec(ValueExpression value);
    public IdentifierOrValueExpression get_ContractName();
    public void set_ContractName(IdentifierOrValueExpression value);
    public IList`1<DialogOption> get_Options();
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.BeginEndAtomicBlockStatement : BeginEndBlockStatement {
    private List`1<AtomicBlockOption> _options;
    public IList`1<AtomicBlockOption> Options { get; }
    public IList`1<AtomicBlockOption> get_Options();
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.BeginEndBlockStatement : TSqlStatement {
    private StatementList _statementList;
    public StatementList StatementList { get; public set; }
    public StatementList get_StatementList();
    public void set_StatementList(StatementList value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.BeginTransactionStatement : TransactionStatement {
    private bool _distributed;
    private bool _markDefined;
    private ValueExpression _markDescription;
    public bool Distributed { get; public set; }
    public bool MarkDefined { get; public set; }
    public ValueExpression MarkDescription { get; public set; }
    public bool get_Distributed();
    public void set_Distributed(bool value);
    public bool get_MarkDefined();
    public void set_MarkDefined(bool value);
    public ValueExpression get_MarkDescription();
    public void set_MarkDescription(ValueExpression value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.BinaryExpression : ScalarExpression {
    private BinaryExpressionType _binaryExpressionType;
    private ScalarExpression _firstExpression;
    private ScalarExpression _secondExpression;
    public BinaryExpressionType BinaryExpressionType { get; public set; }
    public ScalarExpression FirstExpression { get; public set; }
    public ScalarExpression SecondExpression { get; public set; }
    public BinaryExpressionType get_BinaryExpressionType();
    public void set_BinaryExpressionType(BinaryExpressionType value);
    public ScalarExpression get_FirstExpression();
    public void set_FirstExpression(ScalarExpression value);
    public ScalarExpression get_SecondExpression();
    public void set_SecondExpression(ScalarExpression value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public enum Microsoft.SqlServer.TransactSql.ScriptDom.BinaryExpressionType : Enum {
    public int value__;
    public static BinaryExpressionType Add;
    public static BinaryExpressionType Subtract;
    public static BinaryExpressionType Multiply;
    public static BinaryExpressionType Divide;
    public static BinaryExpressionType Modulo;
    public static BinaryExpressionType BitwiseAnd;
    public static BinaryExpressionType BitwiseOr;
    public static BinaryExpressionType BitwiseXor;
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.BinaryLiteral : Literal {
    private bool _isLargeObject;
    public LiteralType LiteralType { get; }
    public bool IsLargeObject { get; public set; }
    public virtual LiteralType get_LiteralType();
    public bool get_IsLargeObject();
    public void set_IsLargeObject(bool value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.BinaryQueryExpression : QueryExpression {
    private BinaryQueryExpressionType _binaryQueryExpressionType;
    private bool _all;
    private QueryExpression _firstQueryExpression;
    private QueryExpression _secondQueryExpression;
    public BinaryQueryExpressionType BinaryQueryExpressionType { get; public set; }
    public bool All { get; public set; }
    public QueryExpression FirstQueryExpression { get; public set; }
    public QueryExpression SecondQueryExpression { get; public set; }
    public BinaryQueryExpressionType get_BinaryQueryExpressionType();
    public void set_BinaryQueryExpressionType(BinaryQueryExpressionType value);
    public bool get_All();
    public void set_All(bool value);
    public QueryExpression get_FirstQueryExpression();
    public void set_FirstQueryExpression(QueryExpression value);
    public QueryExpression get_SecondQueryExpression();
    public void set_SecondQueryExpression(QueryExpression value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public enum Microsoft.SqlServer.TransactSql.ScriptDom.BinaryQueryExpressionType : Enum {
    public int value__;
    public static BinaryQueryExpressionType Union;
    public static BinaryQueryExpressionType Except;
    public static BinaryQueryExpressionType Intersect;
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.BooleanBinaryExpression : BooleanExpression {
    private BooleanBinaryExpressionType _binaryExpressionType;
    private BooleanExpression _firstExpression;
    private BooleanExpression _secondExpression;
    public BooleanBinaryExpressionType BinaryExpressionType { get; public set; }
    public BooleanExpression FirstExpression { get; public set; }
    public BooleanExpression SecondExpression { get; public set; }
    public BooleanBinaryExpressionType get_BinaryExpressionType();
    public void set_BinaryExpressionType(BooleanBinaryExpressionType value);
    public BooleanExpression get_FirstExpression();
    public void set_FirstExpression(BooleanExpression value);
    public BooleanExpression get_SecondExpression();
    public void set_SecondExpression(BooleanExpression value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public enum Microsoft.SqlServer.TransactSql.ScriptDom.BooleanBinaryExpressionType : Enum {
    public int value__;
    public static BooleanBinaryExpressionType And;
    public static BooleanBinaryExpressionType Or;
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.BooleanComparisonExpression : BooleanExpression {
    private BooleanComparisonType _comparisonType;
    private ScalarExpression _firstExpression;
    private ScalarExpression _secondExpression;
    public BooleanComparisonType ComparisonType { get; public set; }
    public ScalarExpression FirstExpression { get; public set; }
    public ScalarExpression SecondExpression { get; public set; }
    public BooleanComparisonType get_ComparisonType();
    public void set_ComparisonType(BooleanComparisonType value);
    public ScalarExpression get_FirstExpression();
    public void set_FirstExpression(ScalarExpression value);
    public ScalarExpression get_SecondExpression();
    public void set_SecondExpression(ScalarExpression value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public enum Microsoft.SqlServer.TransactSql.ScriptDom.BooleanComparisonType : Enum {
    public int value__;
    public static BooleanComparisonType Equals;
    public static BooleanComparisonType GreaterThan;
    public static BooleanComparisonType LessThan;
    public static BooleanComparisonType GreaterThanOrEqualTo;
    public static BooleanComparisonType LessThanOrEqualTo;
    public static BooleanComparisonType NotEqualToBrackets;
    public static BooleanComparisonType NotEqualToExclamation;
    public static BooleanComparisonType NotLessThan;
    public static BooleanComparisonType NotGreaterThan;
    public static BooleanComparisonType LeftOuterJoin;
    public static BooleanComparisonType RightOuterJoin;
}
public abstract class Microsoft.SqlServer.TransactSql.ScriptDom.BooleanExpression : TSqlFragment {
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.BooleanExpressionSnippet : BooleanExpression {
    private string _script;
    public string Script { get; public set; }
    public string get_Script();
    public void set_Script(string value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.BooleanIsNullExpression : BooleanExpression {
    private bool _isNot;
    private ScalarExpression _expression;
    public bool IsNot { get; public set; }
    public ScalarExpression Expression { get; public set; }
    public bool get_IsNot();
    public void set_IsNot(bool value);
    public ScalarExpression get_Expression();
    public void set_Expression(ScalarExpression value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.BooleanNotExpression : BooleanExpression {
    private BooleanExpression _expression;
    public BooleanExpression Expression { get; public set; }
    public BooleanExpression get_Expression();
    public void set_Expression(BooleanExpression value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.BooleanParenthesisExpression : BooleanExpression {
    private BooleanExpression _expression;
    public BooleanExpression Expression { get; public set; }
    public BooleanExpression get_Expression();
    public void set_Expression(BooleanExpression value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.BooleanTernaryExpression : BooleanExpression {
    private BooleanTernaryExpressionType _ternaryExpressionType;
    private ScalarExpression _firstExpression;
    private ScalarExpression _secondExpression;
    private ScalarExpression _thirdExpression;
    public BooleanTernaryExpressionType TernaryExpressionType { get; public set; }
    public ScalarExpression FirstExpression { get; public set; }
    public ScalarExpression SecondExpression { get; public set; }
    public ScalarExpression ThirdExpression { get; public set; }
    public BooleanTernaryExpressionType get_TernaryExpressionType();
    public void set_TernaryExpressionType(BooleanTernaryExpressionType value);
    public ScalarExpression get_FirstExpression();
    public void set_FirstExpression(ScalarExpression value);
    public ScalarExpression get_SecondExpression();
    public void set_SecondExpression(ScalarExpression value);
    public ScalarExpression get_ThirdExpression();
    public void set_ThirdExpression(ScalarExpression value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public enum Microsoft.SqlServer.TransactSql.ScriptDom.BooleanTernaryExpressionType : Enum {
    public int value__;
    public static BooleanTernaryExpressionType Between;
    public static BooleanTernaryExpressionType NotBetween;
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.BoundingBoxParameter : TSqlFragment {
    private BoundingBoxParameterType _parameter;
    private ScalarExpression _value;
    public BoundingBoxParameterType Parameter { get; public set; }
    public ScalarExpression Value { get; public set; }
    public BoundingBoxParameterType get_Parameter();
    public void set_Parameter(BoundingBoxParameterType value);
    public ScalarExpression get_Value();
    public void set_Value(ScalarExpression value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public enum Microsoft.SqlServer.TransactSql.ScriptDom.BoundingBoxParameterType : Enum {
    public int value__;
    public static BoundingBoxParameterType None;
    public static BoundingBoxParameterType XMin;
    public static BoundingBoxParameterType YMin;
    public static BoundingBoxParameterType XMax;
    public static BoundingBoxParameterType YMax;
}
internal class Microsoft.SqlServer.TransactSql.ScriptDom.BoundingBoxParameterTypeHelper : OptionsHelper`1<BoundingBoxParameterType> {
    internal static BoundingBoxParameterTypeHelper Instance;
    private static BoundingBoxParameterTypeHelper();
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.BoundingBoxSpatialIndexOption : SpatialIndexOption {
    private List`1<BoundingBoxParameter> _boundingBoxParameters;
    public IList`1<BoundingBoxParameter> BoundingBoxParameters { get; }
    public IList`1<BoundingBoxParameter> get_BoundingBoxParameters();
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.BreakStatement : TSqlStatement {
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.BrokerPriorityParameter : TSqlFragment {
    private BrokerPriorityParameterSpecialType _isDefaultOrAny;
    private BrokerPriorityParameterType _parameterType;
    private IdentifierOrValueExpression _parameterValue;
    public BrokerPriorityParameterSpecialType IsDefaultOrAny { get; public set; }
    public BrokerPriorityParameterType ParameterType { get; public set; }
    public IdentifierOrValueExpression ParameterValue { get; public set; }
    public BrokerPriorityParameterSpecialType get_IsDefaultOrAny();
    public void set_IsDefaultOrAny(BrokerPriorityParameterSpecialType value);
    public BrokerPriorityParameterType get_ParameterType();
    public void set_ParameterType(BrokerPriorityParameterType value);
    public IdentifierOrValueExpression get_ParameterValue();
    public void set_ParameterValue(IdentifierOrValueExpression value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
internal class Microsoft.SqlServer.TransactSql.ScriptDom.BrokerPriorityParameterHelper : OptionsHelper`1<BrokerPriorityParameterType> {
    internal static BrokerPriorityParameterHelper Instance;
    private static BrokerPriorityParameterHelper();
}
public enum Microsoft.SqlServer.TransactSql.ScriptDom.BrokerPriorityParameterSpecialType : Enum {
    public int value__;
    public static BrokerPriorityParameterSpecialType None;
    public static BrokerPriorityParameterSpecialType Any;
    public static BrokerPriorityParameterSpecialType Default;
}
public enum Microsoft.SqlServer.TransactSql.ScriptDom.BrokerPriorityParameterType : Enum {
    public int value__;
    public static BrokerPriorityParameterType Unknown;
    public static BrokerPriorityParameterType ContractName;
    public static BrokerPriorityParameterType LocalServiceName;
    public static BrokerPriorityParameterType RemoteServiceName;
    public static BrokerPriorityParameterType PriorityLevel;
}
public abstract class Microsoft.SqlServer.TransactSql.ScriptDom.BrokerPriorityStatement : TSqlStatement {
    private Identifier _name;
    private List`1<BrokerPriorityParameter> _brokerPriorityParameters;
    public Identifier Name { get; public set; }
    public IList`1<BrokerPriorityParameter> BrokerPriorityParameters { get; }
    public Identifier get_Name();
    public void set_Name(Identifier value);
    public IList`1<BrokerPriorityParameter> get_BrokerPriorityParameters();
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.BrowseForClause : ForClause {
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.BuiltInFunctionTableReference : TableReferenceWithAlias {
    private Identifier _name;
    private List`1<ScalarExpression> _parameters;
    public Identifier Name { get; public set; }
    public IList`1<ScalarExpression> Parameters { get; }
    public Identifier get_Name();
    public void set_Name(Identifier value);
    public IList`1<ScalarExpression> get_Parameters();
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public abstract class Microsoft.SqlServer.TransactSql.ScriptDom.BulkInsertBase : TSqlStatement {
    private SchemaObjectName _to;
    private List`1<BulkInsertOption> _options;
    public SchemaObjectName To { get; public set; }
    public IList`1<BulkInsertOption> Options { get; }
    public SchemaObjectName get_To();
    public void set_To(SchemaObjectName value);
    public IList`1<BulkInsertOption> get_Options();
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
internal class Microsoft.SqlServer.TransactSql.ScriptDom.BulkInsertFlagOptionsHelper : OptionsHelper`1<BulkInsertOptionKind> {
    internal static BulkInsertFlagOptionsHelper Instance;
    private static BulkInsertFlagOptionsHelper();
}
internal class Microsoft.SqlServer.TransactSql.ScriptDom.BulkInsertIntOptionsHelper : OptionsHelper`1<BulkInsertOptionKind> {
    internal static BulkInsertIntOptionsHelper Instance;
    private static BulkInsertIntOptionsHelper();
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.BulkInsertOption : TSqlFragment {
    private BulkInsertOptionKind _optionKind;
    public BulkInsertOptionKind OptionKind { get; public set; }
    public BulkInsertOptionKind get_OptionKind();
    public void set_OptionKind(BulkInsertOptionKind value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public enum Microsoft.SqlServer.TransactSql.ScriptDom.BulkInsertOptionKind : Enum {
    public int value__;
    public static BulkInsertOptionKind None;
    public static BulkInsertOptionKind BatchSize;
    public static BulkInsertOptionKind CheckConstraints;
    public static BulkInsertOptionKind CodePage;
    public static BulkInsertOptionKind DataFileType;
    public static BulkInsertOptionKind FieldTerminator;
    public static BulkInsertOptionKind FirstRow;
    public static BulkInsertOptionKind FireTriggers;
    public static BulkInsertOptionKind FormatFile;
    public static BulkInsertOptionKind KeepIdentity;
    public static BulkInsertOptionKind KeepNulls;
    public static BulkInsertOptionKind KilobytesPerBatch;
    public static BulkInsertOptionKind LastRow;
    public static BulkInsertOptionKind MaxErrors;
    public static BulkInsertOptionKind RowsPerBatch;
    public static BulkInsertOptionKind RowTerminator;
    public static BulkInsertOptionKind TabLock;
    public static BulkInsertOptionKind ErrorFile;
    public static BulkInsertOptionKind NoTriggers;
    public static BulkInsertOptionKind SingleBlob;
    public static BulkInsertOptionKind SingleClob;
    public static BulkInsertOptionKind SingleNClob;
    public static BulkInsertOptionKind Order;
    public static BulkInsertOptionKind IncludeHidden;
    public static BulkInsertOptionKind DataSource;
    public static BulkInsertOptionKind FormatDataSource;
    public static BulkInsertOptionKind ErrorDataSource;
    public static BulkInsertOptionKind DataFileFormat;
    public static BulkInsertOptionKind FieldQuote;
    public static BulkInsertOptionKind EscapeChar;
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.BulkInsertStatement : BulkInsertBase {
    private IdentifierOrValueExpression _from;
    public IdentifierOrValueExpression From { get; public set; }
    public IdentifierOrValueExpression get_From();
    public void set_From(IdentifierOrValueExpression value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
internal class Microsoft.SqlServer.TransactSql.ScriptDom.BulkInsertStringOptionsHelper : OptionsHelper`1<BulkInsertOptionKind> {
    internal static BulkInsertStringOptionsHelper Instance;
    private static BulkInsertStringOptionsHelper();
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.BulkOpenRowset : TableReferenceWithAliasAndColumns {
    private StringLiteral _dataFile;
    private List`1<BulkInsertOption> _options;
    public StringLiteral DataFile { get; public set; }
    public IList`1<BulkInsertOption> Options { get; }
    public StringLiteral get_DataFile();
    public void set_DataFile(StringLiteral value);
    public IList`1<BulkInsertOption> get_Options();
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public abstract class Microsoft.SqlServer.TransactSql.ScriptDom.CallTarget : TSqlFragment {
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public abstract class Microsoft.SqlServer.TransactSql.ScriptDom.CaseExpression : PrimaryExpression {
    private ScalarExpression _elseExpression;
    public ScalarExpression ElseExpression { get; public set; }
    public ScalarExpression get_ElseExpression();
    public void set_ElseExpression(ScalarExpression value);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.CastCall : PrimaryExpression {
    private DataTypeReference _dataType;
    private ScalarExpression _parameter;
    public DataTypeReference DataType { get; public set; }
    public ScalarExpression Parameter { get; public set; }
    public DataTypeReference get_DataType();
    public void set_DataType(DataTypeReference value);
    public ScalarExpression get_Parameter();
    public void set_Parameter(ScalarExpression value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public enum Microsoft.SqlServer.TransactSql.ScriptDom.CatalogCollation : Enum {
    public int value__;
    public static CatalogCollation Database_Default;
    public static CatalogCollation Latin1_General_100_CI_AS_KS_WS_SC;
    public static CatalogCollation SQL_Latin1_General_CP1_CI_AS;
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.CatalogCollationOption : DatabaseOption {
    private Nullable`1<CatalogCollation> _catalogCollation;
    public Nullable`1<CatalogCollation> CatalogCollation { get; public set; }
    public Nullable`1<CatalogCollation> get_CatalogCollation();
    public void set_CatalogCollation(Nullable`1<CatalogCollation> value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.CellsPerObjectSpatialIndexOption : SpatialIndexOption {
    private Literal _value;
    public Literal Value { get; public set; }
    public Literal get_Value();
    public void set_Value(Literal value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.CertificateCreateLoginSource : CreateLoginSource {
    private Identifier _certificate;
    private Identifier _credential;
    public Identifier Certificate { get; public set; }
    public Identifier Credential { get; public set; }
    public Identifier get_Certificate();
    public void set_Certificate(Identifier value);
    public Identifier get_Credential();
    public void set_Credential(Identifier value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.CertificateOption : TSqlFragment {
    private CertificateOptionKinds _kind;
    private Literal _value;
    public CertificateOptionKinds Kind { get; public set; }
    public Literal Value { get; public set; }
    public CertificateOptionKinds get_Kind();
    public void set_Kind(CertificateOptionKinds value);
    public Literal get_Value();
    public void set_Value(Literal value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
[FlagsAttribute]
public enum Microsoft.SqlServer.TransactSql.ScriptDom.CertificateOptionKinds : Enum {
    public int value__;
    public static CertificateOptionKinds None;
    public static CertificateOptionKinds Subject;
    public static CertificateOptionKinds StartDate;
    public static CertificateOptionKinds ExpiryDate;
}
internal class Microsoft.SqlServer.TransactSql.ScriptDom.CertificateOptionKindsHelper : OptionsHelper`1<CertificateOptionKinds> {
    internal static CertificateOptionKindsHelper Instance;
    private static CertificateOptionKindsHelper();
}
public abstract class Microsoft.SqlServer.TransactSql.ScriptDom.CertificateStatementBase : TSqlStatement {
    private Identifier _name;
    private OptionState _activeForBeginDialog;
    private Literal _privateKeyPath;
    private Literal _encryptionPassword;
    private Literal _decryptionPassword;
    public Identifier Name { get; public set; }
    public OptionState ActiveForBeginDialog { get; public set; }
    public Literal PrivateKeyPath { get; public set; }
    public Literal EncryptionPassword { get; public set; }
    public Literal DecryptionPassword { get; public set; }
    public Identifier get_Name();
    public void set_Name(Identifier value);
    public OptionState get_ActiveForBeginDialog();
    public void set_ActiveForBeginDialog(OptionState value);
    public Literal get_PrivateKeyPath();
    public void set_PrivateKeyPath(Literal value);
    public sealed virtual Literal get_EncryptionPassword();
    public sealed virtual void set_EncryptionPassword(Literal value);
    public sealed virtual Literal get_DecryptionPassword();
    public sealed virtual void set_DecryptionPassword(Literal value);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.ChangeRetentionChangeTrackingOptionDetail : ChangeTrackingOptionDetail {
    private Literal _retentionPeriod;
    private TimeUnit _unit;
    public Literal RetentionPeriod { get; public set; }
    public TimeUnit Unit { get; public set; }
    public Literal get_RetentionPeriod();
    public void set_RetentionPeriod(Literal value);
    public TimeUnit get_Unit();
    public void set_Unit(TimeUnit value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.ChangeTableChangesTableReference : TableReferenceWithAliasAndColumns {
    private SchemaObjectName _target;
    private ValueExpression _sinceVersion;
    public SchemaObjectName Target { get; public set; }
    public ValueExpression SinceVersion { get; public set; }
    public SchemaObjectName get_Target();
    public void set_Target(SchemaObjectName value);
    public ValueExpression get_SinceVersion();
    public void set_SinceVersion(ValueExpression value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.ChangeTableVersionTableReference : TableReferenceWithAliasAndColumns {
    private SchemaObjectName _target;
    private List`1<Identifier> _primaryKeyColumns;
    private List`1<ScalarExpression> _primaryKeyValues;
    public SchemaObjectName Target { get; public set; }
    public IList`1<Identifier> PrimaryKeyColumns { get; }
    public IList`1<ScalarExpression> PrimaryKeyValues { get; }
    public SchemaObjectName get_Target();
    public void set_Target(SchemaObjectName value);
    public IList`1<Identifier> get_PrimaryKeyColumns();
    public IList`1<ScalarExpression> get_PrimaryKeyValues();
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.ChangeTrackingDatabaseOption : DatabaseOption {
    private OptionState _optionState;
    private List`1<ChangeTrackingOptionDetail> _details;
    public OptionState OptionState { get; public set; }
    public IList`1<ChangeTrackingOptionDetail> Details { get; }
    public OptionState get_OptionState();
    public void set_OptionState(OptionState value);
    public IList`1<ChangeTrackingOptionDetail> get_Details();
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.ChangeTrackingFullTextIndexOption : FullTextIndexOption {
    private ChangeTrackingOption _value;
    public ChangeTrackingOption Value { get; public set; }
    public ChangeTrackingOption get_Value();
    public void set_Value(ChangeTrackingOption value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public enum Microsoft.SqlServer.TransactSql.ScriptDom.ChangeTrackingOption : Enum {
    public int value__;
    public static ChangeTrackingOption NotSpecified;
    public static ChangeTrackingOption Auto;
    public static ChangeTrackingOption Manual;
    public static ChangeTrackingOption Off;
    public static ChangeTrackingOption OffNoPopulation;
}
public abstract class Microsoft.SqlServer.TransactSql.ScriptDom.ChangeTrackingOptionDetail : TSqlFragment {
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.CharacterSetPayloadOption : PayloadOption {
    private bool _isSql;
    public bool IsSql { get; public set; }
    public bool get_IsSql();
    public void set_IsSql(bool value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.CheckConstraintDefinition : ConstraintDefinition {
    private BooleanExpression _checkCondition;
    private bool _notForReplication;
    public BooleanExpression CheckCondition { get; public set; }
    public bool NotForReplication { get; public set; }
    public BooleanExpression get_CheckCondition();
    public void set_CheckCondition(BooleanExpression value);
    public bool get_NotForReplication();
    public void set_NotForReplication(bool value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.CheckpointStatement : TSqlStatement {
    private Literal _duration;
    public Literal Duration { get; public set; }
    public Literal get_Duration();
    public void set_Duration(Literal value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.ChildObjectName : SchemaObjectName {
    private static int ServerModifierNumber;
    private static int DatabaseModifierNumber;
    private static int SchemaModifierNumber;
    private static int BaseModifierNumber;
    private static int ChildModifierNumber;
    public Identifier BaseIdentifier { get; }
    public Identifier DatabaseIdentifier { get; }
    public Identifier SchemaIdentifier { get; }
    public Identifier ServerIdentifier { get; }
    public Identifier ChildIdentifier { get; }
    public virtual Identifier get_BaseIdentifier();
    public virtual Identifier get_DatabaseIdentifier();
    public virtual Identifier get_SchemaIdentifier();
    public virtual Identifier get_ServerIdentifier();
    public virtual Identifier get_ChildIdentifier();
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.ClassifierEndTimeOption : WorkloadClassifierOption {
    private WlmTimeLiteral _time;
    public WlmTimeLiteral Time { get; public set; }
    public WlmTimeLiteral get_Time();
    public void set_Time(WlmTimeLiteral value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.ClassifierImportanceOption : WorkloadClassifierOption {
    private ImportanceParameterType _importance;
    public ImportanceParameterType Importance { get; public set; }
    public ImportanceParameterType get_Importance();
    public void set_Importance(ImportanceParameterType value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.ClassifierMemberNameOption : WorkloadClassifierOption {
    private StringLiteral _memberName;
    public StringLiteral MemberName { get; public set; }
    public StringLiteral get_MemberName();
    public void set_MemberName(StringLiteral value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.ClassifierStartTimeOption : WorkloadClassifierOption {
    private WlmTimeLiteral _time;
    public WlmTimeLiteral Time { get; public set; }
    public WlmTimeLiteral get_Time();
    public void set_Time(WlmTimeLiteral value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.ClassifierWlmContextOption : WorkloadClassifierOption {
    private StringLiteral _wlmContext;
    public StringLiteral WlmContext { get; public set; }
    public StringLiteral get_WlmContext();
    public void set_WlmContext(StringLiteral value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.ClassifierWlmLabelOption : WorkloadClassifierOption {
    private StringLiteral _wlmLabel;
    public StringLiteral WlmLabel { get; public set; }
    public StringLiteral get_WlmLabel();
    public void set_WlmLabel(StringLiteral value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.ClassifierWorkloadGroupOption : WorkloadClassifierOption {
    private StringLiteral _workloadGroupName;
    public StringLiteral WorkloadGroupName { get; public set; }
    public StringLiteral get_WorkloadGroupName();
    public void set_WorkloadGroupName(StringLiteral value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.CloseCursorStatement : CursorStatement {
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.CloseMasterKeyStatement : TSqlStatement {
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.CloseSymmetricKeyStatement : TSqlStatement {
    private Identifier _name;
    private bool _all;
    public Identifier Name { get; public set; }
    public bool All { get; public set; }
    public Identifier get_Name();
    public void set_Name(Identifier value);
    public bool get_All();
    public void set_All(bool value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.CoalesceExpression : PrimaryExpression {
    private List`1<ScalarExpression> _expressions;
    public IList`1<ScalarExpression> Expressions { get; }
    public IList`1<ScalarExpression> get_Expressions();
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
internal static class Microsoft.SqlServer.TransactSql.ScriptDom.CodeGenerationSupporter : object {
    internal static string KB;
    internal static string MB;
    internal static string GB;
    internal static string TB;
    internal static string ACP;
    internal static string OEM;
    internal static string Tcp;
    internal static string Http;
    internal static string Year;
    internal static string Years;
    internal static string Month;
    internal static string Months;
    internal static string Week;
    internal static string Weeks;
    internal static string Day;
    internal static string Days;
    internal static string Hours;
    internal static string Minute;
    internal static string Minutes;
    internal static string RC2;
    internal static string RC4;
    internal static string RC4_128;
    internal static string Des;
    internal static string TripleDes;
    internal static string TripleDes3Key;
    internal static string DesX;
    internal static string Aes;
    internal static string Aes128;
    internal static string Aes192;
    internal static string Aes256;
    internal static string Rsa512;
    internal static string Rsa1024;
    internal static string Rsa2048;
    internal static string Rsa3072;
    internal static string Rsa4096;
    internal static string QuotedIdentifier;
    internal static string ConcatNullYieldsNull;
    internal static string ArithAbort;
    internal static string ArithIgnore;
    internal static string FmtOnly;
    internal static string NoCompression;
    internal static string NoCount;
    internal static string NoExec;
    internal static string NumericRoundAbort;
    internal static string ParseOnly;
    internal static string AnsiDefaults;
    internal static string AnsiNullDfltOff;
    internal static string AnsiNullDfltOn;
    internal static string AnsiNulls;
    internal static string AnsiPadding;
    internal static string AnsiWarnings;
    internal static string ForcePlan;
    internal static string ForAppend;
    internal static string ShowPlanAll;
    internal static string ShowPlanText;
    internal static string IO;
    internal static string Profile;
    internal static string ImplicitTransactions;
    internal static string RemoteProcTransactions;
    internal static string XactAbort;
    internal static string Abort;
    internal static string AbortAfterWait;
    internal static string Above_Normal;
    internal static string Absent;
    internal static string Absolute;
    internal static string AcceleratedDatabaseRecovery;
    internal static string AccentSensitivity;
    internal static string Action;
    internal static string Active;
    internal static string Activation;
    internal static string Add;
    internal static string Address;
    internal static string Admin;
    internal static string Affinity;
    internal static string After;
    internal static string Aggregate;
    internal static string Algorithm;
    internal static string AlterColumn;
    internal static string All;
    internal static string AllConstraints;
    internal static string AllErrorMessages;
    internal static string AllIndexes;
    internal static string AllLevels;
    internal static string AllowConnections;
    internal static string Allowed;
    internal static string AllowMultipleEventLoss;
    internal static string AllowSingleEventLoss;
    internal static string AllowSnapshotIsolation;
    internal static string AllowPageLocks;
    internal static string AllowRowLocks;
    internal static string AllResults;
    internal static string AllSparseColumns;
    internal static string Always;
    internal static string Anonymous;
    internal static string AnsiNullDefault;
    internal static string Application;
    internal static string ApplicationLog;
    internal static string Apply;
    internal static string ApplyDelay;
    internal static string Assembly;
    internal static string Asymmetric;
    internal static string AsynchronousCommit;
    internal static string At;
    internal static string Attach;
    internal static string AttachRebuildLog;
    internal static string AttachForceRebuildLog;
    internal static string Atomic;
    internal static string Append;
    internal static string AppendOnly;
    internal static string Avg;
    internal static string Attested;
    internal static string AuditGuid;
    internal static string Authentication;
    internal static string AuthRealm;
    internal static string Auto;
    internal static string AutoCleanup;
    internal static string AutoClose;
    internal static string AutoCreateStatistics;
    internal static string AutogrowAllFiles;
    internal static string AutogrowSingleFile;
    internal static string Automatic;
    internal static string AutomaticTuning;
    internal static string AutoShrink;
    internal static string AutoUpdateStatistics;
    internal static string AutoUpdateStatisticsAsync;
    internal static string Availability;
    internal static string AvailabilityMode;
    internal static string Base64;
    internal static string Basic;
    internal static string Batches;
    internal static string BatchSize;
    internal static string Before;
    internal static string BeginDialog;
    internal static string Below_Normal;
    internal static string BigInt;
    internal static string Binding;
    internal static string Binary;
    internal static string Bit;
    internal static string BlobStorage;
    internal static string Block;
    internal static string Blockers;
    internal static string BlockSize;
    internal static string BoundingBox;
    internal static string Broker;
    internal static string BrokerInstance;
    internal static string BufferCount;
    internal static string BucketCount;
    internal static string BulkLogged;
    internal static string Bypass;
    internal static string Cache;
    internal static string Called;
    internal static string Caller;
    internal static string CapCpuPercent;
    internal static string CapIoPercent;
    internal static string CardinalityTunerLimit;
    internal static string Cast;
    internal static string Catalog;
    internal static string CatalogCollation;
    internal static string Catch;
    internal static string CellsPerObject;
    internal static string Certificate;
    internal static string ChangeRetention;
    internal static string Changes;
    internal static string ChangeTable;
    internal static string ChangeTracking;
    internal static string ChangeTrackingContext;
    internal static string Char;
    internal static string CharacterSet;
    internal static string CheckConstraints;
    internal static string CheckConstraintsHint;
    internal static string CheckExpiration;
    internal static string CheckPolicy;
    internal static string Checksum;
    internal static string ChecksumAgg;
    internal static string ModularSum;
    internal static string Classifier;
    internal static string Classification;
    internal static string ClassifierFunction;
    internal static string Cleanup;
    internal static string CleanupPolicy;
    internal static string Clear;
    internal static string Cluster;
    internal static string Clustered;
    internal static string ClearPort;
    internal static string CodePage;
    internal static string Collection;
    internal static string Column;
    internal static string ColumnEncryptionKey;
    internal static string ColumnMasterKey;
    internal static string Columns;
    internal static string ColumnSet;
    internal static string ColumnStore;
    internal static string ColumnStoreArchive;
    internal static string CommitDifferentialBase;
    internal static string Committed;
    internal static string CompatibilityLevel;
    internal static string Compression;
    internal static string CompressionDelay;
    internal static string CompressAllRowGroups;
    internal static string Concat;
    internal static string Configuration;
    internal static string ConnectionOptions;
    internal static string Contained;
    internal static string Containment;
    internal static string Content;
    internal static string Context;
    internal static string ContextInfo;
    internal static string ContinueAfterError;
    internal static string Contract;
    internal static string ContractName;
    internal static string Conversation;
    internal static string ConversationGroupId;
    internal static string ConversationHandle;
    internal static string Cookie;
    internal static string Copy;
    internal static string CopyCommand;
    internal static string CopyOnly;
    internal static string Correlated;
    internal static string Count;
    internal static string CountBig;
    internal static string Counter;
    internal static string CountRows;
    internal static string Cpu;
    internal static string CreateNew;
    internal static string CreationDisposition;
    internal static string Credential;
    internal static string CredentialName;
    internal static string Cryptographic;
    internal static string Csv;
    internal static string Cube;
    internal static string Cuid;
    internal static string CursorCloseOnCommit;
    internal static string CursorDefault;
    internal static string Custom;
    internal static string Cycle;
    internal static string D;
    internal static string Data;
    internal static string Database;
    internal static string DatabaseDefault;
    internal static string DatabaseMirroring;
    internal static string DatabaseName;
    internal static string DatabaseSnapshot;
    internal static string DataCompression;
    internal static string DataConsistencyCheck;
    internal static string DataDeletion;
    internal static string DataFileType;
    internal static string DataMirroring;
    internal static string DataPurity;
    internal static string DataRetention;
    internal static string DataSource;
    internal static string Date;
    internal static string DateCorrelationOptimization;
    internal static string DateFirst;
    internal static string DateFormat;
    internal static string DateFormat2;
    internal static string DateTime;
    internal static string DateTime2;
    internal static string DateTimeOffset;
    internal static string Deterministic;
    internal static string DboOnly;
    internal static string DbChaining;
    internal static string DeadlockPriority;
    internal static string Decimal;
    internal static string Decryption;
    internal static string Default;
    internal static string DefaultDatabase;
    internal static string DefaultFullTextLanguage;
    internal static string DefaultLanguage;
    internal static string DefaultSchema;
    internal static string DefaultLogonDomain;
    internal static string DensityVector;
    internal static string Dependents;
    internal static string Description;
    internal static string DesiredState;
    internal static string Delay;
    internal static string DelayedDurability;
    internal static string DelimitedText;
    internal static string Diagnostics;
    internal static string Dialog;
    internal static string Differential;
    internal static string Digest;
    internal static string DirectoryName;
    internal static string Disable;
    internal static string Disabled;
    internal static string DisableBroker;
    internal static string DisableDefCnstChk;
    internal static string Disk;
    internal static string Distribution;
    internal static string Document;
    internal static string DollarSign;
    internal static string DollarPartition;
    internal static string Drop;
    internal static string DropExisting;
    internal static string DTSBuffers;
    internal static string Durability;
    internal static string Dynamic;
    internal static string Edition;
    internal static string Elements;
    internal static string Emergency;
    internal static string Empty;
    internal static string Enable;
    internal static string Enabled;
    internal static string EnableBroker;
    internal static string EnclaveComputations;
    internal static string Encoding;
    internal static string Encrypted;
    internal static string EncryptedValue;
    internal static string Encryption;
    internal static string EncryptionType;
    internal static string EndTime;
    internal static string EnhancedIntegrity;
    internal static string End;
    internal static string Endpoint;
    internal static string EndpointUrl;
    internal static string Enforced;
    internal static string Entry;
    internal static string EnvironmentVariables;
    internal static string Equal;
    internal static string Error;
    internal static string ErrorBrokerConversations;
    internal static string ErrorDataSource;
    internal static string ErrorFile;
    internal static string ErrorFileCredential;
    internal static string EscapeChar;
    internal static string EstimateOnly;
    internal static string Event;
    internal static string EventRetentionMode;
    internal static string Exclamation;
    internal static string Executable;
    internal static string Explicit;
    internal static string Expand;
    internal static string ExpireDate;
    internal static string ExpiryDate;
    internal static string ExtendedLogicalChecks;
    internal static string Extension;
    internal static string External;
    internal static string ExternalAccess;
    internal static string ExternalMonitor;
    internal static string Extract;
    internal static string FailOperation;
    internal static string Failover;
    internal static string FailoverMode;
    internal static string FailureConditionLevel;
    internal static string False;
    internal static string FanIn;
    internal static string Fast;
    internal static string FastForward;
    internal static string FastFirstRow;
    internal static string Federated;
    internal static string FederatedServiceAccount;
    internal static string Federation;
    internal static string File;
    internal static string FileType;
    internal static string FileFormat;
    internal static string Filegroup;
    internal static string FileGrowth;
    internal static string FileListOnly;
    internal static string FileName;
    internal static string File_Name;
    internal static string FilePath;
    internal static string FileStream;
    internal static string FileStreamOn;
    internal static string FileTable;
    internal static string FileTableCollateFileName;
    internal static string FileTableDirectory;
    internal static string FileTableFullPathUniqueConstraintName;
    internal static string FileTableNamespace;
    internal static string FileTablePrimaryKeyConstraintName;
    internal static string FileTableStreamIdUniqueConstraintName;
    internal static string FillFactor;
    internal static string Filtering;
    internal static string Filter;
    internal static string FilterColumn;
    internal static string FilterPredicate;
    internal static string FireTriggers;
    internal static string FirstRow;
    internal static string FirstRow2;
    internal static string FieldTerminator;
    internal static string FieldTerminator2;
    internal static string FieldQuote;
    internal static string FipsFlagger;
    internal static string First;
    internal static string FlushIntervalSeconds;
    internal static string FlushIntervalSecondsAlt;
    internal static string Fn;
    internal static string Float;
    internal static string For;
    internal static string ForceFailoverAllowDataLoss;
    internal static string ForceScan;
    internal static string ForceSeek;
    internal static string ForceServiceAllowDataLoss;
    internal static string ForwardOnly;
    internal static string Force;
    internal static string Forced;
    internal static string ForceLastGoodPlan;
    internal static string Format;
    internal static string FormatDataSource;
    internal static string FormatOptions;
    internal static string FormatFile;
    internal static string FormatType;
    internal static string From;
    internal static string Full;
    internal static string FullScan;
    internal static string Fulltext;
    internal static string General;
    internal static string Generated;
    internal static string GeographyAutoGrid;
    internal static string GeographyGrid;
    internal static string GeometryAutoGrid;
    internal static string GeometryGrid;
    internal static string Get;
    internal static string Global;
    internal static string Governor;
    internal static string Grids;
    internal static string Group;
    internal static string Grouping;
    internal static string GroupMaxRequests;
    internal static string GroupMinMemoryPercent;
    internal static string MinPercentageResource;
    internal static string CapPercentageResource;
    internal static string RequestMinResourceGrantPercent;
    internal static string RequestMaxResourceGrantPercent;
    internal static string QueryExecutionTimeoutSec;
    internal static string Guid;
    internal static string Hadr;
    internal static string Hadoop;
    internal static string Hash;
    internal static string Hashed;
    internal static string HeaderLimit;
    internal static string HeaderOnly;
    internal static string HealthCheckTimeout;
    internal static string Heap;
    internal static string Hidden;
    internal static string High;
    internal static string Hint;
    internal static string Histogram;
    internal static string HistogramSteps;
    internal static string HistoryRetentionPeriod;
    internal static string HistoryTable;
    internal static string HonorBrokerPriority;
    internal static string Identity;
    internal static string Identity_Insert;
    internal static string IdentityValue;
    internal static string IgnoreConstraints;
    internal static string IgnoreDupKey;
    internal static string IgnoreNonClusteredColumnStoreIndex;
    internal static string IgnoreTriggers;
    internal static string IIf;
    internal static string Image;
    internal static string Immediate;
    internal static string Importance;
    internal static string Inbound;
    internal static string Include;
    internal static string IncludeHidden;
    internal static string IncludeNullValues;
    internal static string Increment;
    internal static string Incremental;
    internal static string Infinite;
    internal static string InformationType;
    internal static string InformationTypeId;
    internal static string Inherit;
    internal static string Init;
    internal static string Initiator;
    internal static string Inline;
    internal static string Input;
    internal static string Instead;
    internal static string Int;
    internal static string Integrated;
    internal static string Intermediate;
    internal static string IntervalLengthMinutes;
    internal static string Insensitive;
    internal static string IRowset;
    internal static string Isolation;
    internal static string Job;
    internal static string Json;
    internal static string Keep;
    internal static string KeepDefaults;
    internal static string KeepFixed;
    internal static string KeepIdentity;
    internal static string KeepNulls;
    internal static string KeepReplication;
    internal static string KeepTemporalRetention;
    internal static string Kerberos;
    internal static string Key;
    internal static string Keys;
    internal static string Keyset;
    internal static string KeySource;
    internal static string KeyStoreProviderName;
    internal static string KeyPath;
    internal static string KilobytesPerBatch;
    internal static string Label;
    internal static string LabelId;
    internal static string LabelOnly;
    internal static string Language;
    internal static string Last;
    internal static string LastRow;
    internal static string LedgerView;
    internal static string LegacyCardinalityEstimation;
    internal static string Level;
    internal static string Level1;
    internal static string Level2;
    internal static string Level3;
    internal static string Level4;
    internal static string Library;
    internal static string LifeTime;
    internal static string Linux;
    internal static string List;
    internal static string ListenerIP;
    internal static string ListenerPort;
    internal static string Load;
    internal static string LoadHistory;
    internal static string LobCompaction;
    internal static string Local;
    internal static string Location;
    internal static string LocationUserDB;
    internal static string LocalServiceName;
    internal static string LockTimeout;
    internal static string Log;
    internal static string Login;
    internal static string LoginType;
    internal static string Logon;
    internal static string Loop;
    internal static string Low;
    internal static string LSquareParen;
    internal static string MaintainIndex;
    internal static string Manual;
    internal static string Mark;
    internal static string MarkInUseForRemoval;
    internal static string Masked;
    internal static string Master;
    internal static string Matched;
    internal static string Materialized;
    internal static string Max;
    internal static string MaxCpuPercent;
    internal static string MaxDispatchLatency;
    internal static string MaxDop;
    internal static string Max_Dop;
    internal static string MaxDuration;
    internal static string MaxErrors;
    internal static string MaxEventSize;
    internal static string MaxFiles;
    internal static string MaxGrantPercent;
    internal static string MaxLength;
    internal static string MaxIoPercent;
    internal static string MaxIopsPerVolume;
    internal static string MaxMemory;
    internal static string MaxMemoryPercent;
    internal static string MaxPlansPerQuery;
    internal static string MaxProcesses;
    internal static string MaxQueueReaders;
    internal static string MaxQdsSize;
    internal static string MaxRecursion;
    internal static string MaxRolloverFiles;
    internal static string MaxUnderscoreSize;
    internal static string MaxSize;
    internal static string MaxTransferSize;
    internal static string MaxValue;
    internal static string MediaDescription;
    internal static string MediaName;
    internal static string MediaPassword;
    internal static string Medium;
    internal static string Member;
    internal static string MemberName;
    internal static string MemoryOptimized;
    internal static string MemoryOptimizedData;
    internal static string MemoryOptimizedElevateToSnapshot;
    internal static string MemoryPartitionMode;
    internal static string Merge;
    internal static string Message;
    internal static string MessageForwarding;
    internal static string MessageForwardSize;
    internal static string MigrationState;
    internal static string Min;
    internal static string MinGrantPercent;
    internal static string MinCpuPercent;
    internal static string MinIoPercent;
    internal static string MinIopsPerVolume;
    internal static string MinMemoryPercent;
    internal static string MinValue;
    internal static string MirrorAddress;
    internal static string Mirror;
    internal static string Mixed;
    internal static string MixedPageAllocation;
    internal static string Modify;
    internal static string Money;
    internal static string Move;
    internal static string MultiUser;
    internal static string MustChange;
    internal static string Name;
    internal static string Namespace;
    internal static string Native;
    internal static string NativeCompilation;
    internal static string NChar;
    internal static string Negotiate;
    internal static string Never;
    internal static string NestedTriggers;
    internal static string NewAccount;
    internal static string NewName;
    internal static string NewBroker;
    internal static string NewPassword;
    internal static string Next;
    internal static string No;
    internal static string NoChecksum;
    internal static string NoEventLoss;
    internal static string NoExpand;
    internal static string NoFormat;
    internal static string NoInfoMessages;
    internal static string NoInit;
    internal static string NoLock;
    internal static string NoLog;
    internal static string NoBrowsetable;
    internal static string NonTransactedAccess;
    internal static string NoPerformanceSpool;
    internal static string NoRecompute;
    internal static string NoRecovery;
    internal static string NoReset;
    internal static string NoRewind;
    internal static string Normal;
    internal static string None;
    internal static string NoSkip;
    internal static string NoTriggers;
    internal static string NoTruncate;
    internal static string Notification;
    internal static string NoWait;
    internal static string NoUnload;
    internal static string NoWaitAlterDb;
    internal static string NText;
    internal static string Ntlm;
    internal static string NullValuesOption;
    internal static string NumaNode;
    internal static string Numeric;
    internal static string NVarChar;
    internal static string Object;
    internal static string ObjectName;
    internal static string Off;
    internal static string Offline;
    internal static string Offset;
    internal static string OffWithoutDataRecovery;
    internal static string Oj;
    internal static string OldAccount;
    internal static string OldPassword;
    internal static string On;
    internal static string OnFailure;
    internal static string Online;
    internal static string Only;
    internal static string OpenExisting;
    internal static string OpenJson;
    internal static string OperationTypeColumnName;
    internal static string OperationTypeDescColumnName;
    internal static string OperationMode;
    internal static string Optimistic;
    internal static string Optimize;
    internal static string OptimizeForSequentialKey;
    internal static string OptimizerQueue;
    internal static string Order;
    internal static string Orc;
    internal static string Out;
    internal static string Outbound;
    internal static string Output;
    internal static string Override;
    internal static string Owner;
    internal static string PadIndex;
    internal static string Page;
    internal static string PageCount;
    internal static string PageVerify;
    internal static string PagLock;
    internal static string Param;
    internal static string Parameter;
    internal static string Parameters;
    internal static string Parameterization;
    internal static string ParameterSniffing;
    internal static string Parquet;
    internal static string Parse;
    internal static string Partition;
    internal static string Partitions;
    internal static string Partner;
    internal static string Password;
    internal static string Path;
    internal static string Partial;
    internal static string Pause;
    internal static string Paused;
    internal static string Percentage;
    internal static string PerCpu;
    internal static string Period;
    internal static string PermissionSet;
    internal static string PerNode;
    internal static string Persisted;
    internal static string PhysicalOnly;
    internal static string PhysName;
    internal static string Pivot;
    internal static string Platform;
    internal static string PoisonMessageHandling;
    internal static string Policy;
    internal static string Pool;
    internal static string Population;
    internal static string Ports;
    internal static string Precision;
    internal static string Predicate;
    internal static string Primary;
    internal static string PrimaryRole;
    internal static string Prior;
    internal static string Priority;
    internal static string PriorityLevel;
    internal static string Private;
    internal static string Privileges;
    internal static string Predict;
    internal static string Model;
    internal static string RunTime;
    internal static string Onnx;
    internal static string Process;
    internal static string PropertySetGuid;
    internal static string PropertyIntId;
    internal static string PropertyDescription;
    internal static string Provider;
    internal static string ProviderKeyName;
    internal static string Procedure;
    internal static string ProcedureCache;
    internal static string ProcedureName;
    internal static string Property;
    internal static string PushdownOption;
    internal static string Queue;
    internal static string QueueDelay;
    internal static string Query;
    internal static string QueryCaptureMode;
    internal static string QueryGovernorCostLimit;
    internal static string QueryStore;
    internal static string QueryTraceOn;
    internal static string QueryOptimizerHotFixes;
    internal static string Randomized;
    internal static string Range;
    internal static string Rank;
    internal static string Raw;
    internal static string RcFile;
    internal static string Rdbms;
    internal static string ReadCommitted;
    internal static string ReadCommittedLock;
    internal static string ReadCommittedSnapshot;
    internal static string Read;
    internal static string ReadPast;
    internal static string ReadOnlyOld;
    internal static string ReadOnly;
    internal static string ReadUncommitted;
    internal static string ReadWrite;
    internal static string ReadWriteFilegroups;
    internal static string ReadWriteOld;
    internal static string Real;
    internal static string Rebuild;
    internal static string Receive;
    internal static string Recompile;
    internal static string RecursiveTriggers;
    internal static string Recovery;
    internal static string Regenerate;
    internal static string RejectType;
    internal static string RejectSampleValue;
    internal static string RejectValue;
    internal static string RejectedRowLocation;
    internal static string RelatedConversation;
    internal static string RelatedConversationGroup;
    internal static string Relative;
    internal static string Remote;
    internal static string RemoteDataArchive;
    internal static string RemoteServiceName;
    internal static string Remove;
    internal static string Reorganize;
    internal static string Repeatable;
    internal static string RepeatableRead;
    internal static string Replace;
    internal static string Replica;
    internal static string Replicate;
    internal static string Replicated;
    internal static string Required;
    internal static string ReserveDiskSpace;
    internal static string Reset;
    internal static string Resize;
    internal static string Resource;
    internal static string ResourceManagerLocation;
    internal static string RestrictedUser;
    internal static string Resume;
    internal static string Resumable;
    internal static string Result;
    internal static string RetainDays;
    internal static string Retention;
    internal static string RetentionDays;
    internal static string RetentionPeriod;
    internal static string Returns;
    internal static string RequestMaxCpuTimeSec;
    internal static string RequestMaxMemoryGrantPercent;
    internal static string RequestMemoryGrantTimeoutSec;
    internal static string RequiredCopiesToCommit;
    internal static string Resample;
    internal static string Revert;
    internal static string Restart;
    internal static string Rewind;
    internal static string RewindOnly;
    internal static string Robust;
    internal static string Role;
    internal static string Rollup;
    internal static string Root;
    internal static string RoundRobin;
    internal static string Route;
    internal static string Row;
    internal static string Rowguid;
    internal static string RowLock;
    internal static string Rows;
    internal static string RowsetsOnly;
    internal static string RowsPerBatch;
    internal static string RowTerminator;
    internal static string Rowversion;
    internal static string RSquareParen;
    internal static string Rule;
    internal static string Safe;
    internal static string Safety;
    internal static string Sample;
    internal static string Scheduler;
    internal static string SchemaBinding;
    internal static string Schema;
    internal static string SchemaAndData;
    internal static string SchemaName;
    internal static string SchemaOnly;
    internal static string Scheme;
    internal static string Scoped;
    internal static string Scroll;
    internal static string ScrollLocks;
    internal static string Search;
    internal static string Secondary;
    internal static string SecondaryRole;
    internal static string Seconds;
    internal static string Secret;
    internal static string Security;
    internal static string SecurityPolicy;
    internal static string SecurityLog;
    internal static string Selective;
    internal static string Self;
    internal static string SemiColon;
    internal static string Send;
    internal static string Sensitivity;
    internal static string Sent;
    internal static string Sequence;
    internal static string SequenceNumberColumnName;
    internal static string SerDeMethod;
    internal static string Serializable;
    internal static string Server;
    internal static string Service;
    internal static string ServiceBroker;
    internal static string ServiceName;
    internal static string ServiceObjective;
    internal static string Session;
    internal static string Sessions;
    internal static string SessionTimeout;
    internal static string Set;
    internal static string SetError;
    internal static string Sets;
    internal static string Sharded;
    internal static string ShardMapManager;
    internal static string ShardMapName;
    internal static string ShrinkDb;
    internal static string Sid;
    internal static string Signature;
    internal static string Simple;
    internal static string SingleBlob;
    internal static string SingleClob;
    internal static string SingleNClob;
    internal static string SingleSpace;
    internal static string SingleUser;
    internal static string Singleton;
    internal static string Site;
    internal static string Size;
    internal static string SizeBasedCleanupMode;
    internal static string Skip;
    internal static string Soap;
    internal static string SoftNuma;
    internal static string SortedData;
    internal static string SortedDataReorg;
    internal static string SortInTempDb;
    internal static string Source;
    internal static string SmallDateTime;
    internal static string SmallInt;
    internal static string SmallMoney;
    internal static string Snapshot;
    internal static string SnapshotImport;
    internal static string SnapshotRestorePhase;
    internal static string Spatial;
    internal static string SpatialWindowMaxCells;
    internal static string Specification;
    internal static string Split;
    internal static string Sql;
    internal static string SqlDumperDumpFlags;
    internal static string SqlDumperDumpPath;
    internal static string SqlDumperDumpTimeout;
    internal static string SqlLatin1GeneralCP1CIAS;
    internal static string Ssl;
    internal static string SslPort;
    internal static string SupplementalLogging;
    internal static string SuserSid;
    internal static string SuserSname;
    internal static string TransactionId;
    internal static string SequenceNumber;
    internal static string Standard;
    internal static string Standby;
    internal static string Start;
    internal static string StartDate;
    internal static string Started;
    internal static string StartTime;
    internal static string StartupState;
    internal static string Statement;
    internal static string State;
    internal static string Static;
    internal static string Stats;
    internal static string StatsStream;
    internal static string StatHeader;
    internal static string StatisticalSemantics;
    internal static string StatisticsIncremental;
    internal static string StatisticsNoRecompute;
    internal static string Status;
    internal static string StatusOnly;
    internal static string Stdev;
    internal static string Stdevp;
    internal static string Stop;
    internal static string StopAt;
    internal static string StopAtMark;
    internal static string StopBeforeMark;
    internal static string StopList;
    internal static string Stopped;
    internal static string StopOnError;
    internal static string Stream;
    internal static string StringDelimiter;
    internal static string StringSplit;
    internal static string Style;
    internal static string Subject;
    internal static string Subscription;
    internal static string Sum;
    internal static string Supported;
    internal static string SuppressMessages;
    internal static string Suspend;
    internal static string Sql_Variant;
    internal static string Switch;
    internal static string Symmetric;
    internal static string SynchronousCommit;
    internal static string Synonym;
    internal static string Sys;
    internal static string System;
    internal static string SystemTime;
    internal static string SystemVersioning;
    internal static string Ledger;
    internal static string T;
    internal static string Tab;
    internal static string Table;
    internal static string TableResults;
    internal static string TableSample;
    internal static string TabLock;
    internal static string TabLockX;
    internal static string Tape;
    internal static string Target;
    internal static string TargetMemoryPercent;
    internal static string TargetRecoveryTime;
    internal static string TemporalHistoryRetention;
    internal static string Text;
    internal static string TextImageOn;
    internal static string Throw;
    internal static string Ties;
    internal static string Time;
    internal static string Timeout;
    internal static string Timer;
    internal static string TimeStamp;
    internal static string TinyInt;
    internal static string TornPageDetection;
    internal static string TrackCausality;
    internal static string TrackColumnsUpdated;
    internal static string Transaction;
    internal static string TransactionIdColumnName;
    internal static string TransactionIsolationLevel;
    internal static string Transfer;
    internal static string TransformNoiseWords;
    internal static string Trigger;
    internal static string Trim;
    internal static string True;
    internal static string TruncateOnly;
    internal static string TruncateTarget;
    internal static string Trustworthy;
    internal static string Try;
    internal static string TryCast;
    internal static string TryParse;
    internal static string TS;
    internal static string TSql;
    internal static string TwoDigitYearCutoff;
    internal static string Type;
    internal static string TypeWarning;
    internal static string Unchecked;
    internal static string Uncommitted;
    internal static string Undefined;
    internal static string UniqueIdentifier;
    internal static string Unknown;
    internal static string Unlimited;
    internal static string Unload;
    internal static string Unlock;
    internal static string Unsafe;
    internal static string Unpivot;
    internal static string UpdLock;
    internal static string Url;
    internal static string Used;
    internal static string UseIdentity;
    internal static string UseTypeDefault;
    internal static string UsePlan;
    internal static string User;
    internal static string Using;
    internal static string Validation;
    internal static string ValidXml;
    internal static string Value;
    internal static string Values;
    internal static string Var;
    internal static string VarBinary;
    internal static string VarChar;
    internal static string VardecimalStorageFormat;
    internal static string Varp;
    internal static string VDevNo;
    internal static string Verbose;
    internal static string VerboseLogging;
    internal static string VerifyOnly;
    internal static string Version;
    internal static string Views;
    internal static string ViewMetadata;
    internal static string Visibility;
    internal static string VirtualDevice;
    internal static string VStart;
    internal static string WaitAtLowPriority;
    internal static string WebMethod;
    internal static string WellFormedXml;
    internal static string WideChar;
    internal static string WideCharAnsi;
    internal static string WideNative;
    internal static string Windows;
    internal static string Without;
    internal static string WithoutArrayWrapper;
    internal static string Witness;
    internal static string With;
    internal static string WlmLabel;
    internal static string WlmContext;
    internal static string Work;
    internal static string Workload;
    internal static string WorkloadGroup;
    internal static string Wsdl;
    internal static string XLock;
    internal static string XMax;
    internal static string XMin;
    internal static string Xml;
    internal static string XmlData;
    internal static string XmlNamespaces;
    internal static string XmlSchema;
    internal static string XsiNil;
    internal static string XQuery;
    internal static string YMax;
    internal static string YMin;
    internal static string Unbounded;
    internal static string Preceding;
    internal static string Following;
    internal static string Within;
    internal static string Zone;
    internal static string ActiveCursors;
    internal static string AddExtendedProc;
    internal static string AddInstance;
    internal static string Audit;
    internal static string AuditEvent;
    internal static string AutoPilot;
    internal static string Buffer;
    internal static string Bytes;
    internal static string CacheProfile;
    internal static string CacheStats;
    internal static string CallFulltext;
    internal static string CheckAlloc;
    internal static string CheckCatalog;
    internal static string CheckDb;
    internal static string CheckFilegroup;
    internal static string CheckIdent;
    internal static string CheckPrimaryFile;
    internal static string CheckTable;
    internal static string CleanTable;
    internal static string ClearSpaceCaches;
    internal static string CollectStats;
    internal static string ConcurrencyViolation;
    internal static string CursorStats;
    internal static string DbRecover;
    internal static string DbReindex;
    internal static string DbReindexAll;
    internal static string DbRepair;
    internal static string DebugBreak;
    internal static string DeleteInstance;
    internal static string DetachDb;
    internal static string DistributedAgg;
    internal static string DropCleanBuffers;
    internal static string DropExtendedProc;
    internal static string DumpConfig;
    internal static string DumpDbInfo;
    internal static string DumpDbTable;
    internal static string DumpLock;
    internal static string DumpLog;
    internal static string DumpPage;
    internal static string DumpResource;
    internal static string DumpTrigger;
    internal static string ExtentInfo;
    internal static string FileHeader;
    internal static string FixAllocation;
    internal static string Flush;
    internal static string FlushProcInDb;
    internal static string ForceGhostCleanup;
    internal static string Free;
    internal static string FreeProcCache;
    internal static string FreeSessionCache;
    internal static string FreeSystemCache;
    internal static string FreezeIo;
    internal static string Help;
    internal static string IceCapQuery;
    internal static string IncrementInstance;
    internal static string Ind;
    internal static string IndexDefrag;
    internal static string InputBuffer;
    internal static string InputOptions;
    internal static string InvalidateTextptr;
    internal static string InvalidateTextptrObjid;
    internal static string Latch;
    internal static string LogInfo;
    internal static string MapAllocUnit;
    internal static string MemObjList;
    internal static string MemoryMap;
    internal static string MemoryStatus;
    internal static string Metadata;
    internal static string MovePage;
    internal static string NoTextptr;
    internal static string OpenTran;
    internal static string OptimizerWhatIf;
    internal static string OutputBuffer;
    internal static string OutputOptions;
    internal static string PerfMonStats;
    internal static string PersistStackHash;
    internal static string PinTable;
    internal static string ProcCache;
    internal static string PrtiPage;
    internal static string ReadPage;
    internal static string RenameColumn;
    internal static string RuleOff;
    internal static string RuleOn;
    internal static string SeMetadata;
    internal static string SetCpuWeight;
    internal static string SetInstance;
    internal static string SetIoWeight;
    internal static string ShowStatistics;
    internal static string ShowContig;
    internal static string ShowDbAffinity;
    internal static string ShowFileStats;
    internal static string ShowOffRules;
    internal static string ShowOnRules;
    internal static string ShowTableAffinity;
    internal static string ShowText;
    internal static string ShowWeights;
    internal static string ShrinkDatabase;
    internal static string ShrinkFile;
    internal static string Sparse;
    internal static string SqlMgrStats;
    internal static string SqlPerf;
    internal static string StackDump;
    internal static string StaleQueryThresholdDays;
    internal static string Tec;
    internal static string ThawIo;
    internal static string ThrottleIo;
    internal static string TraceOff;
    internal static string TraceOn;
    internal static string TraceStatus;
    internal static string UnpinTable;
    internal static string UpdateUsage;
    internal static string UserOptions;
    internal static string WritePage;
    internal static string ChineseMacaoSar;
    internal static string ChineseSingapore;
    internal static string SerbianCyrillic;
    internal static string Spanish;
    internal static string ChineseHongKong;
    internal static string SerbianLatin;
    internal static string Portuegese;
    internal static string BritishEnglish;
    internal static string SimplifiedChinese;
    internal static string Marathi;
    internal static string Malayalam;
    internal static string Kannada;
    internal static string Telugu;
    internal static string Tamil;
    internal static string Gujarati;
    internal static string Punjabi;
    internal static string BengaliIndia;
    internal static string MalayMalaysia;
    internal static string Hindi;
    internal static string Vietnamese;
    internal static string Lithuanian;
    internal static string Latvian;
    internal static string Slovenian;
    internal static string Ukrainian;
    internal static string Indonesian;
    internal static string Urdu;
    internal static string Thai;
    internal static string Swedish;
    internal static string Slovak;
    internal static string Croatian;
    internal static string Russian;
    internal static string Romanian;
    internal static string Brazilian;
    internal static string NorwegianBokmal;
    internal static string Dutch;
    internal static string Korean;
    internal static string Japanese;
    internal static string Italian;
    internal static string Icelandic;
    internal static string Hebrew;
    internal static string French;
    internal static string English;
    internal static string German;
    internal static string TraditionalChinese;
    internal static string Catalan;
    internal static string Bulgarian;
    internal static string Arabic;
    internal static string Neutral;
    internal static string AddSignature;
    internal static string AddSignatureSchemaObject;
    internal static string AlterAsymmetricKey;
    internal static string AlterBrokerPriority;
    internal static string AlterDatabaseAudit;
    internal static string AlterDatabaseAuditSpecification;
    internal static string AlterDatabaseEncryptionKey;
    internal static string AlterExtendedProperty;
    internal static string AlterFullTextCatalog;
    internal static string AlterFullTextIndex;
    internal static string AlterFullTextStopList;
    internal static string AlterMasterKey;
    internal static string AlterPlanGuide;
    internal static string AlterSearchPropertyList;
    internal static string AlterSequence;
    internal static string AlterAvailabilityGroup;
    internal static string AlterSecurityPolicy;
    internal static string AlterServerConfiguration;
    internal static string AlterServerRole;
    internal static string AlterSymmetricKey;
    internal static string BindDefault;
    internal static string BindRule;
    internal static string CreateAsymmetricKey;
    internal static string CreateBrokerPriority;
    internal static string CreateDatabaseAudit;
    internal static string CreateDatabaseAuditSpecification;
    internal static string CreateDatabaseEncryptionKey;
    internal static string CreateDefault;
    internal static string CreateExtendedProperty;
    internal static string CreateFullTextCatalog;
    internal static string CreateFullTextIndex;
    internal static string CreateFullTextStopList;
    internal static string CreateMasterKey;
    internal static string CreatePlanGuide;
    internal static string CreateRule;
    internal static string CreateSearchPropertyList;
    internal static string CreateSequence;
    internal static string CreateAvailabilityGroup;
    internal static string CreateSecurityPolicy;
    internal static string CreateColumnMasterKey;
    internal static string CreateColumnEncryptionKey;
    internal static string CreateServerRole;
    internal static string CreateSpatialIndex;
    internal static string CreateSymmetricKey;
    internal static string DropAsymmetricKey;
    internal static string DropBrokerPriority;
    internal static string DropDatabaseAudit;
    internal static string DropDatabaseAuditSpecification;
    internal static string DropDatabaseEncryptionKey;
    internal static string DropDefault;
    internal static string DropExtendedProperty;
    internal static string DropFullTextCatalog;
    internal static string DropFullTextIndex;
    internal static string DropFullTextStopList;
    internal static string DropMasterKey;
    internal static string DropPlanGuide;
    internal static string DropRule;
    internal static string DropSearchPropertyList;
    internal static string DropSequence;
    internal static string DropAvailabilityGroup;
    internal static string DropSecurityPolicy;
    internal static string DropColumnMasterKey;
    internal static string DropColumnEncryptionKey;
    internal static string DropServerRole;
    internal static string DropSignature;
    internal static string DropSignatureSchemaObject;
    internal static string DropSymmetricKey;
    internal static string Rename;
    internal static string UnbindDefault;
    internal static string UnbindRule;
    internal static string AlterCredential;
    internal static string AlterCryptographicProvider;
    internal static string AlterDatabaseScopedConfiguration;
    internal static string AlterEventSession;
    internal static string AlterInstance;
    internal static string AlterLinkedServer;
    internal static string AlterMessage;
    internal static string AlterRemoteServer;
    internal static string AlterResourceGovernorConfig;
    internal static string AlterResourcePool;
    internal static string AlterExternalResourcePool;
    internal static string AlterServerAudit;
    internal static string AlterServerAuditSpecification;
    internal static string AlterServiceMasterKey;
    internal static string AlterWorkloadGroup;
    internal static string AlterColumnEncryptionKey;
    internal static string CreateCredential;
    internal static string CreateCryptographicProvider;
    internal static string CreateEventSession;
    internal static string CreateExtendedProcedure;
    internal static string CreateLinkedServer;
    internal static string CreateLinkedServerLogin;
    internal static string CreateMessage;
    internal static string CreateRemoteServer;
    internal static string CreateResourcePool;
    internal static string CreateExternalResourcePool;
    internal static string CreateServerAudit;
    internal static string CreateServerAuditSpecification;
    internal static string CreateWorkloadGroup;
    internal static string DropCredential;
    internal static string DropCryptographicProvider;
    internal static string DropEventSession;
    internal static string DropExtendedProcedure;
    internal static string DropLinkedServer;
    internal static string DropLinkedServerLogin;
    internal static string DropMessage;
    internal static string DropRemoteServer;
    internal static string DropResourcePool;
    internal static string DropExternalResourcePool;
    internal static string DropServerAudit;
    internal static string DropServerAuditSpecification;
    internal static string DropWorkloadGroup;
    internal static string CreateApplicationRole;
    internal static string AlterApplicationRole;
    internal static string DropApplicationRole;
    internal static string CreateAssembly;
    internal static string AlterAssembly;
    internal static string DropAssembly;
    internal static string AlterAuthorizationDatabase;
    internal static string CreateCertificate;
    internal static string AlterCertificate;
    internal static string DropCertificate;
    internal static string CreateContract;
    internal static string DropContract;
    internal static string GrantDatabase;
    internal static string DenyDatabase;
    internal static string RevokeDatabase;
    internal static string CreateEventNotification;
    internal static string DropEventNotification;
    internal static string CreateFunction;
    internal static string AlterFunction;
    internal static string DropFunction;
    internal static string CreateIndex;
    internal static string AlterIndex;
    internal static string DropIndex;
    internal static string CreateMessageType;
    internal static string AlterMessageType;
    internal static string DropMessageType;
    internal static string CreatePartitionFunction;
    internal static string AlterPartitionFunction;
    internal static string DropPartitionFunction;
    internal static string CreatePartitionScheme;
    internal static string AlterPartitionScheme;
    internal static string DropPartitionScheme;
    internal static string CreateProcedure;
    internal static string AlterProcedure;
    internal static string DropProcedure;
    internal static string CreateQueue;
    internal static string AlterQueue;
    internal static string DropQueue;
    internal static string CreateRemoteServiceBinding;
    internal static string AlterRemoteServiceBinding;
    internal static string DropRemoteServiceBinding;
    internal static string CreateRole;
    internal static string AlterRole;
    internal static string DropRole;
    internal static string CreateRoute;
    internal static string AlterRoute;
    internal static string DropRoute;
    internal static string CreateSchema;
    internal static string AlterSchema;
    internal static string DropSchema;
    internal static string CreateService;
    internal static string AlterService;
    internal static string DropService;
    internal static string CreateStatistics;
    internal static string DropStatistics;
    internal static string UpdateStatistics;
    internal static string CreateSynonym;
    internal static string DropSynonym;
    internal static string CreateTable;
    internal static string AlterTable;
    internal static string DropTable;
    internal static string CreateTrigger;
    internal static string AlterTrigger;
    internal static string DropTrigger;
    internal static string CreateType;
    internal static string DropType;
    internal static string CreateUser;
    internal static string AlterUser;
    internal static string DropUser;
    internal static string CreateView;
    internal static string AlterView;
    internal static string DropView;
    internal static string CreateXmlSchemaCollection;
    internal static string AlterXmlSchemaCollection;
    internal static string DropXmlSchemaCollection;
    internal static string AlterAuthorizationServer;
    internal static string CreateDatabase;
    internal static string AlterDatabase;
    internal static string DropDatabase;
    internal static string CreateLogin;
    internal static string AlterLogin;
    internal static string CreateEndpoint;
    internal static string DropEndpoint;
    internal static string DropLogin;
    internal static string GrantServer;
    internal static string DenyServer;
    internal static string RevokeServer;
    internal static string AddRoleMember;
    internal static string AddServerRoleMember;
    internal static string DropRoleMember;
    internal static string DropServerRoleMember;
    internal static string AlterEndpoint;
    internal static string CreateXmlIndex;
    internal static string QueueActivation;
    internal static string BrokerQueueDisabled;
    internal static string AssemblyLoad;
    internal static string AuditAddDbUserEvent;
    internal static string AuditAddLoginEvent;
    internal static string AuditAddLoginToServerRoleEvent;
    internal static string AuditAddMemberToDbRoleEvent;
    internal static string AuditAddRoleEvent;
    internal static string AuditAppRoleChangePasswordEvent;
    internal static string AuditBackupRestoreEvent;
    internal static string AuditChangeAuditEvent;
    internal static string AuditChangeDatabaseOwner;
    internal static string AuditDatabaseManagementEvent;
    internal static string AuditDatabaseObjectAccessEvent;
    internal static string AuditDatabaseObjectGdrEvent;
    internal static string AuditDatabaseObjectManagementEvent;
    internal static string AuditDatabaseObjectTakeOwnershipEvent;
    internal static string AuditDatabaseOperationEvent;
    internal static string AuditDatabasePrincipalImpersonationEvent;
    internal static string AuditDatabasePrincipalManagementEvent;
    internal static string AuditDatabaseScopeGdrEvent;
    internal static string AuditDbccEvent;
    internal static string AuditLogin;
    internal static string AuditLoginChangePasswordEvent;
    internal static string AuditLoginChangePropertyEvent;
    internal static string AuditLoginFailed;
    internal static string AuditLoginGdrEvent;
    internal static string AuditLogout;
    internal static string AuditSchemaObjectAccessEvent;
    internal static string AuditSchemaObjectGdrEvent;
    internal static string AuditSchemaObjectManagementEvent;
    internal static string AuditSchemaObjectTakeOwnershipEvent;
    internal static string AuditServerAlterTraceEvent;
    internal static string AuditServerObjectGdrEvent;
    internal static string AuditServerObjectManagementEvent;
    internal static string AuditServerObjectTakeOwnershipEvent;
    internal static string AuditServerOperationEvent;
    internal static string AuditServerPrincipalImpersonationEvent;
    internal static string AuditServerPrincipalManagementEvent;
    internal static string AuditServerScopeGdrEvent;
    internal static string BlockedProcessReport;
    internal static string DataFileAutoGrow;
    internal static string DataFileAutoShrink;
    internal static string DatabaseMirroringStateChange;
    internal static string DeadlockGraph;
    internal static string DeprecationAnnouncement;
    internal static string DeprecationFinalSupport;
    internal static string ErrorLog;
    internal static string EventLog;
    internal static string Exception;
    internal static string ExchangeSpillEvent;
    internal static string ExecutionWarnings;
    internal static string FtCrawlAborted;
    internal static string FtCrawlStarted;
    internal static string FtCrawlStopped;
    internal static string HashWarning;
    internal static string LockDeadlock;
    internal static string LockDeadlockChain;
    internal static string LockEscalation;
    internal static string LogFileAutoGrow;
    internal static string LogFileAutoShrink;
    internal static string MissingColumnStatistics;
    internal static string MissingJoinPredicate;
    internal static string MountTape;
    internal static string ObjectAltered;
    internal static string ObjectCreated;
    internal static string ObjectDeleted;
    internal static string OledbCallEvent;
    internal static string OledbDataReadEvent;
    internal static string OledbErrors;
    internal static string OledbProviderInformation;
    internal static string OledbQueryInterfaceEvent;
    internal static string QnDynamics;
    internal static string QnParameterTable;
    internal static string QnSubscription;
    internal static string QnTemplate;
    internal static string ServerMemoryChange;
    internal static string ShowPlanAllForQueryCompile;
    internal static string ShowPlanXmlForQueryCompile;
    internal static string ShowPlanXml;
    internal static string ShowPlanXmlStatisticsProfile;
    internal static string SortWarnings;
    internal static string SpCacheInsert;
    internal static string SpCacheMiss;
    internal static string SpCacheRemove;
    internal static string SpCreateStreamingJob;
    internal static string SpDropStreamingJob;
    internal static string SpRecompile;
    internal static string SqlStmtRecompile;
    internal static string TraceFileClose;
    internal static string UserErrorMessage;
    internal static string UserConfigurable0;
    internal static string UserConfigurable1;
    internal static string UserConfigurable2;
    internal static string UserConfigurable3;
    internal static string UserConfigurable4;
    internal static string UserConfigurable5;
    internal static string UserConfigurable6;
    internal static string UserConfigurable7;
    internal static string UserConfigurable8;
    internal static string UserConfigurable9;
    internal static string XQueryStaticType;
    internal static string AuditFullText;
    internal static string BitmapWarning;
    internal static string CpuThresholdExceeded;
    internal static string DatabaseSuspectDataPage;
    internal static string DdlAsymmetricKeyEvents;
    internal static string DdlBrokerPriorityEvents;
    internal static string DdlCryptoSignatureEvents;
    internal static string DdlDatabaseAuditSpecificationEvents;
    internal static string DdlDatabaseEncryptionKeyEvents;
    internal static string DdlDefaultEvents;
    internal static string DdlExtendedPropertyEvents;
    internal static string DdlFullTextCatalogEvents;
    internal static string DdlFullTextStopListEvents;
    internal static string DdlMasterKeyEvents;
    internal static string DdlPlanGuideEvents;
    internal static string DdlRuleEvents;
    internal static string DdlSymmetricKeyEvents;
    internal static string DdlCredentialEvents;
    internal static string DdlDatabaseEvents;
    internal static string DdlCryptographicProviderEvents;
    internal static string DdlEventSessionEvents;
    internal static string DdlExtendedProcedureEvents;
    internal static string DdlLinkedServerEvents;
    internal static string DdlLinkedServerLoginEvents;
    internal static string DdlMessageEvents;
    internal static string DdlRemoteServerEvents;
    internal static string DdlResourceGovernorEvents;
    internal static string DdlResourcePool;
    internal static string DdlSearchPropertyListEvents;
    internal static string DdlSequenceEvents;
    internal static string DdlAvailabilityGroupEvents;
    internal static string DdlDatabaseAuditEvents;
    internal static string DdlSecurityPolicyEvents;
    internal static string DdlServerAuditEvents;
    internal static string DdlServerAuditSpecificationEvents;
    internal static string DdlServiceMasterKeyEvents;
    internal static string DdlWorkloadGroup;
    internal static string DdlEvents;
    internal static string DdlApplicationRoleEvents;
    internal static string DdlAssemblyEvents;
    internal static string DdlAuthorizationDatabaseEvents;
    internal static string DdlAuthorizationServerEvents;
    internal static string DdlCertificateEvents;
    internal static string DdlContractEvents;
    internal static string DdlDatabaseLevelEvents;
    internal static string DdlDatabaseSecurityEvents;
    internal static string DdlEndpointEvents;
    internal static string DdlEventNotificationEvents;
    internal static string DdlFunctionEvents;
    internal static string DdlGdrDatabaseEvents;
    internal static string DdlGdrServerEvents;
    internal static string DdlIndexEvents;
    internal static string DdlLoginEvents;
    internal static string DdlMessageTypeEvents;
    internal static string DdlPartitionEvents;
    internal static string DdlPartitionFunctionEvents;
    internal static string DdlPartitionSchemeEvents;
    internal static string DdlProcedureEvents;
    internal static string DdlQueueEvents;
    internal static string DdlRemoteServiceBindingEvents;
    internal static string DdlRoleEvents;
    internal static string DdlRouteEvents;
    internal static string DdlSchemaEvents;
    internal static string DdlServerLevelEvents;
    internal static string DdlServerSecurityEvents;
    internal static string DdlServiceEvents;
    internal static string DdlSsbEvents;
    internal static string DdlStatisticsEvents;
    internal static string DdlSynonymEvents;
    internal static string DdlTableEvents;
    internal static string DdlTableViewEvents;
    internal static string DdlTriggerEvents;
    internal static string DdlTypeEvents;
    internal static string DdlUserEvents;
    internal static string DdlViewEvents;
    internal static string DdlXmlSchemaCollectionEvents;
    internal static string TrcClr;
    internal static string TrcDatabase;
    internal static string TrcDeprecation;
    internal static string TrcErrorsAndWarnings;
    internal static string TrcFullText;
    internal static string TrcLocks;
    internal static string TrcObjects;
    internal static string TrcOledb;
    internal static string TrcPerformance;
    internal static string TrcQueryNotifications;
    internal static string TrcSecurityAudit;
    internal static string TrcServer;
    internal static string TrcStoredProcedures;
    internal static string TrcTsql;
    internal static string TrcUserConfigurable;
    internal static string TrcAllEvents;
    internal static string SuccessfulLoginGroup;
    internal static string LogoutGroup;
    internal static string ServerStateChangeGroup;
    internal static string FailedLoginGroup;
    internal static string LoginChangePasswordGroup;
    internal static string ServerRoleMemberChangeGroup;
    internal static string ServerPrincipalImpersonationGroup;
    internal static string ServerObjectOwnershipChangeGroup;
    internal static string DatabaseMirroringLoginGroup;
    internal static string BrokerLoginGroup;
    internal static string ServerPermissionChangeGroup;
    internal static string ServerObjectPermissionChangeGroup;
    internal static string ServerOperationGroup;
    internal static string TraceChangeGroup;
    internal static string ServerObjectChangeGroup;
    internal static string ServerPrincipalChangeGroup;
    internal static string DatabasePermissionChangeGroup;
    internal static string SchemaObjectPermissionChangeGroup;
    internal static string DatabaseRoleMemberChangeGroup;
    internal static string ApplicationRoleChangePasswordGroup;
    internal static string SchemaObjectAccessGroup;
    internal static string BackupRestoreGroup;
    internal static string DbccGroup;
    internal static string AuditChangeGroup;
    internal static string DatabaseChangeGroup;
    internal static string DatabaseObjectChangeGroup;
    internal static string DatabasePrincipalChangeGroup;
    internal static string SchemaObjectChangeGroup;
    internal static string DatabasePrincipalImpersonationGroup;
    internal static string DatabaseObjectOwnershipChangeGroup;
    internal static string DatabaseOwnershipChangeGroup;
    internal static string SchemaObjectOwnershipChangeGroup;
    internal static string DatabaseObjectPermissionChangeGroup;
    internal static string DatabaseOperationGroup;
    internal static string DatabaseObjectAccessGroup;
    internal static string SuccessfulDatabaseAuthenticationGroup;
    internal static string FailedDatabaseAuthenticationGroup;
    internal static string DatabaseLogoutGroup;
    internal static string UserChangePasswordGroup;
    internal static string UserDefinedAuditGroup;
    internal static string TransactionBeginGroup;
    internal static string TransactionCommitGroup;
    internal static string TransactionRollbackGroup;
    internal static string StatementRollbackGroup;
    internal static string TransactionGroup;
    internal static string BatchCompletedGroup;
    internal static string BatchStartedGroup;
    internal static string GraphEdge;
    internal static string GraphMatch;
    internal static string GraphNode;
    internal static string GraphEdgeId;
    internal static string GraphNodeId;
    internal static string GraphFromId;
    internal static string GraphToId;
    internal static string Connection;
    internal static string ShortestPath;
    internal static string LastNode;
    internal static string Graph;
    internal static string AtSymbol;
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.ColumnDefinition : ColumnDefinitionBase {
    private ScalarExpression _computedColumnExpression;
    private bool _isPersisted;
    private DefaultConstraintDefinition _defaultConstraint;
    private IdentityOptions _identityOptions;
    private bool _isRowGuidCol;
    private List`1<ConstraintDefinition> _constraints;
    private ColumnStorageOptions _storageOptions;
    private IndexDefinition _index;
    private Nullable`1<GeneratedAlwaysType> _generatedAlways;
    private bool _isHidden;
    private ColumnEncryptionDefinition _encryption;
    private bool _isMasked;
    private StringLiteral _maskingFunction;
    public ScalarExpression ComputedColumnExpression { get; public set; }
    public bool IsPersisted { get; public set; }
    public DefaultConstraintDefinition DefaultConstraint { get; public set; }
    public IdentityOptions IdentityOptions { get; public set; }
    public bool IsRowGuidCol { get; public set; }
    public IList`1<ConstraintDefinition> Constraints { get; }
    public ColumnStorageOptions StorageOptions { get; public set; }
    public IndexDefinition Index { get; public set; }
    public Nullable`1<GeneratedAlwaysType> GeneratedAlways { get; public set; }
    public bool IsHidden { get; public set; }
    public ColumnEncryptionDefinition Encryption { get; public set; }
    public bool IsMasked { get; public set; }
    public StringLiteral MaskingFunction { get; public set; }
    public ScalarExpression get_ComputedColumnExpression();
    public void set_ComputedColumnExpression(ScalarExpression value);
    public bool get_IsPersisted();
    public void set_IsPersisted(bool value);
    public DefaultConstraintDefinition get_DefaultConstraint();
    public void set_DefaultConstraint(DefaultConstraintDefinition value);
    public IdentityOptions get_IdentityOptions();
    public void set_IdentityOptions(IdentityOptions value);
    public bool get_IsRowGuidCol();
    public void set_IsRowGuidCol(bool value);
    public IList`1<ConstraintDefinition> get_Constraints();
    public ColumnStorageOptions get_StorageOptions();
    public void set_StorageOptions(ColumnStorageOptions value);
    public IndexDefinition get_Index();
    public void set_Index(IndexDefinition value);
    public Nullable`1<GeneratedAlwaysType> get_GeneratedAlways();
    public void set_GeneratedAlways(Nullable`1<GeneratedAlwaysType> value);
    public bool get_IsHidden();
    public void set_IsHidden(bool value);
    public ColumnEncryptionDefinition get_Encryption();
    public void set_Encryption(ColumnEncryptionDefinition value);
    public sealed virtual bool get_IsMasked();
    public sealed virtual void set_IsMasked(bool value);
    public sealed virtual StringLiteral get_MaskingFunction();
    public sealed virtual void set_MaskingFunction(StringLiteral value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.ColumnDefinitionBase : TSqlFragment {
    private Identifier _columnIdentifier;
    private DataTypeReference _dataType;
    private Identifier _collation;
    public Identifier ColumnIdentifier { get; public set; }
    public DataTypeReference DataType { get; public set; }
    public Identifier Collation { get; public set; }
    public Identifier get_ColumnIdentifier();
    public void set_ColumnIdentifier(Identifier value);
    public DataTypeReference get_DataType();
    public void set_DataType(DataTypeReference value);
    public sealed virtual Identifier get_Collation();
    public sealed virtual void set_Collation(Identifier value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.ColumnEncryptionAlgorithmNameParameter : ColumnEncryptionKeyValueParameter {
    private StringLiteral _algorithm;
    public StringLiteral Algorithm { get; public set; }
    public StringLiteral get_Algorithm();
    public void set_Algorithm(StringLiteral value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.ColumnEncryptionAlgorithmParameter : ColumnEncryptionDefinitionParameter {
    private StringLiteral _encryptionAlgorithm;
    public StringLiteral EncryptionAlgorithm { get; public set; }
    public StringLiteral get_EncryptionAlgorithm();
    public void set_EncryptionAlgorithm(StringLiteral value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.ColumnEncryptionDefinition : TSqlFragment {
    private List`1<ColumnEncryptionDefinitionParameter> _parameters;
    public IList`1<ColumnEncryptionDefinitionParameter> Parameters { get; }
    public IList`1<ColumnEncryptionDefinitionParameter> get_Parameters();
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public abstract class Microsoft.SqlServer.TransactSql.ScriptDom.ColumnEncryptionDefinitionParameter : TSqlFragment {
    private ColumnEncryptionDefinitionParameterKind _parameterKind;
    public ColumnEncryptionDefinitionParameterKind ParameterKind { get; public set; }
    public ColumnEncryptionDefinitionParameterKind get_ParameterKind();
    public void set_ParameterKind(ColumnEncryptionDefinitionParameterKind value);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public enum Microsoft.SqlServer.TransactSql.ScriptDom.ColumnEncryptionDefinitionParameterKind : Enum {
    public int value__;
    public static ColumnEncryptionDefinitionParameterKind ColumnEncryptionKey;
    public static ColumnEncryptionDefinitionParameterKind EncryptionType;
    public static ColumnEncryptionDefinitionParameterKind Algorithm;
}
public enum Microsoft.SqlServer.TransactSql.ScriptDom.ColumnEncryptionKeyAlterType : Enum {
    public int value__;
    public static ColumnEncryptionKeyAlterType Add;
    public static ColumnEncryptionKeyAlterType Drop;
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.ColumnEncryptionKeyNameParameter : ColumnEncryptionDefinitionParameter {
    private Identifier _name;
    public Identifier Name { get; public set; }
    public Identifier get_Name();
    public void set_Name(Identifier value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public abstract class Microsoft.SqlServer.TransactSql.ScriptDom.ColumnEncryptionKeyStatement : TSqlStatement {
    private Identifier _name;
    private List`1<ColumnEncryptionKeyValue> _columnEncryptionKeyValues;
    public Identifier Name { get; public set; }
    public IList`1<ColumnEncryptionKeyValue> ColumnEncryptionKeyValues { get; }
    public Identifier get_Name();
    public void set_Name(Identifier value);
    public IList`1<ColumnEncryptionKeyValue> get_ColumnEncryptionKeyValues();
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.ColumnEncryptionKeyValue : TSqlFragment {
    private List`1<ColumnEncryptionKeyValueParameter> _parameters;
    public IList`1<ColumnEncryptionKeyValueParameter> Parameters { get; }
    public IList`1<ColumnEncryptionKeyValueParameter> get_Parameters();
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public abstract class Microsoft.SqlServer.TransactSql.ScriptDom.ColumnEncryptionKeyValueParameter : TSqlFragment {
    private ColumnEncryptionKeyValueParameterKind _parameterKind;
    public ColumnEncryptionKeyValueParameterKind ParameterKind { get; public set; }
    public ColumnEncryptionKeyValueParameterKind get_ParameterKind();
    public void set_ParameterKind(ColumnEncryptionKeyValueParameterKind value);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public enum Microsoft.SqlServer.TransactSql.ScriptDom.ColumnEncryptionKeyValueParameterKind : Enum {
    public int value__;
    public static ColumnEncryptionKeyValueParameterKind ColumnMasterKeyName;
    public static ColumnEncryptionKeyValueParameterKind EncryptionAlgorithmName;
    public static ColumnEncryptionKeyValueParameterKind EncryptedValue;
}
public enum Microsoft.SqlServer.TransactSql.ScriptDom.ColumnEncryptionType : Enum {
    public int value__;
    public static ColumnEncryptionType Deterministic;
    public static ColumnEncryptionType Randomized;
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.ColumnEncryptionTypeParameter : ColumnEncryptionDefinitionParameter {
    private ColumnEncryptionType _encryptionType;
    public ColumnEncryptionType EncryptionType { get; public set; }
    public ColumnEncryptionType get_EncryptionType();
    public void set_EncryptionType(ColumnEncryptionType value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.ColumnMasterKeyEnclaveComputationsParameter : ColumnMasterKeyParameter {
    private BinaryLiteral _signature;
    public BinaryLiteral Signature { get; public set; }
    public BinaryLiteral get_Signature();
    public void set_Signature(BinaryLiteral value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.ColumnMasterKeyNameParameter : ColumnEncryptionKeyValueParameter {
    private Identifier _name;
    public Identifier Name { get; public set; }
    public Identifier get_Name();
    public void set_Name(Identifier value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public abstract class Microsoft.SqlServer.TransactSql.ScriptDom.ColumnMasterKeyParameter : TSqlFragment {
    private ColumnMasterKeyParameterKind _parameterKind;
    public ColumnMasterKeyParameterKind ParameterKind { get; public set; }
    public ColumnMasterKeyParameterKind get_ParameterKind();
    public void set_ParameterKind(ColumnMasterKeyParameterKind value);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public enum Microsoft.SqlServer.TransactSql.ScriptDom.ColumnMasterKeyParameterKind : Enum {
    public int value__;
    public static ColumnMasterKeyParameterKind KeyStoreProviderName;
    public static ColumnMasterKeyParameterKind KeyPath;
    public static ColumnMasterKeyParameterKind AllowEnclaveComputations;
    public static ColumnMasterKeyParameterKind Signature;
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.ColumnMasterKeyPathParameter : ColumnMasterKeyParameter {
    private StringLiteral _path;
    public StringLiteral Path { get; public set; }
    public StringLiteral get_Path();
    public void set_Path(StringLiteral value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.ColumnMasterKeyStoreProviderNameParameter : ColumnMasterKeyParameter {
    private StringLiteral _name;
    public StringLiteral Name { get; public set; }
    public StringLiteral get_Name();
    public void set_Name(StringLiteral value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.ColumnReferenceExpression : PrimaryExpression {
    private ColumnType _columnType;
    private MultiPartIdentifier _multiPartIdentifier;
    public ColumnType ColumnType { get; public set; }
    public MultiPartIdentifier MultiPartIdentifier { get; public set; }
    public ColumnType get_ColumnType();
    public void set_ColumnType(ColumnType value);
    public MultiPartIdentifier get_MultiPartIdentifier();
    public void set_MultiPartIdentifier(MultiPartIdentifier value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.ColumnStorageOptions : TSqlFragment {
    private bool _isFileStream;
    private SparseColumnOption _sparseOption;
    public bool IsFileStream { get; public set; }
    public SparseColumnOption SparseOption { get; public set; }
    public bool get_IsFileStream();
    public void set_IsFileStream(bool value);
    public SparseColumnOption get_SparseOption();
    public void set_SparseOption(SparseColumnOption value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public enum Microsoft.SqlServer.TransactSql.ScriptDom.ColumnType : Enum {
    public int value__;
    public static ColumnType Regular;
    public static ColumnType IdentityCol;
    public static ColumnType RowGuidCol;
    public static ColumnType Wildcard;
    public static ColumnType PseudoColumnIdentity;
    public static ColumnType PseudoColumnRowGuid;
    public static ColumnType PseudoColumnAction;
    public static ColumnType PseudoColumnCuid;
    public static ColumnType PseudoColumnGraphNodeId;
    public static ColumnType PseudoColumnGraphEdgeId;
    public static ColumnType PseudoColumnGraphFromId;
    public static ColumnType PseudoColumnGraphToId;
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.ColumnWithSortOrder : TSqlFragment {
    private ColumnReferenceExpression _column;
    private SortOrder _sortOrder;
    public ColumnReferenceExpression Column { get; public set; }
    public SortOrder SortOrder { get; public set; }
    public ColumnReferenceExpression get_Column();
    public void set_Column(ColumnReferenceExpression value);
    public SortOrder get_SortOrder();
    public void set_SortOrder(SortOrder value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
[FlagsAttribute]
public enum Microsoft.SqlServer.TransactSql.ScriptDom.CommandOptions : Enum {
    public int value__;
    public static CommandOptions None;
    public static CommandOptions CreateDatabase;
    public static CommandOptions CreateDefault;
    public static CommandOptions CreateProcedure;
    public static CommandOptions CreateFunction;
    public static CommandOptions CreateRule;
    public static CommandOptions CreateTable;
    public static CommandOptions CreateView;
    public static CommandOptions BackupDatabase;
    public static CommandOptions BackupLog;
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.CommandSecurityElement80 : SecurityElement80 {
    private bool _all;
    private CommandOptions _commandOptions;
    public bool All { get; public set; }
    public CommandOptions CommandOptions { get; public set; }
    public bool get_All();
    public void set_All(bool value);
    public CommandOptions get_CommandOptions();
    public void set_CommandOptions(CommandOptions value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.CommitTransactionStatement : TransactionStatement {
    private OptionState _delayedDurabilityOption;
    public OptionState DelayedDurabilityOption { get; public set; }
    public OptionState get_DelayedDurabilityOption();
    public void set_DelayedDurabilityOption(OptionState value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.CommonTableExpression : TSqlFragment {
    private Identifier _expressionName;
    private List`1<Identifier> _columns;
    private QueryExpression _queryExpression;
    public Identifier ExpressionName { get; public set; }
    public IList`1<Identifier> Columns { get; }
    public QueryExpression QueryExpression { get; public set; }
    public Identifier get_ExpressionName();
    public void set_ExpressionName(Identifier value);
    public IList`1<Identifier> get_Columns();
    public QueryExpression get_QueryExpression();
    public void set_QueryExpression(QueryExpression value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.CompositeGroupingSpecification : GroupingSpecification {
    private List`1<GroupingSpecification> _items;
    public IList`1<GroupingSpecification> Items { get; }
    public IList`1<GroupingSpecification> get_Items();
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.CompressionDelayIndexOption : IndexOption {
    private ScalarExpression _expression;
    private CompressionDelayTimeUnit _timeUnit;
    public ScalarExpression Expression { get; public set; }
    public CompressionDelayTimeUnit TimeUnit { get; public set; }
    public ScalarExpression get_Expression();
    public void set_Expression(ScalarExpression value);
    public CompressionDelayTimeUnit get_TimeUnit();
    public void set_TimeUnit(CompressionDelayTimeUnit value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public enum Microsoft.SqlServer.TransactSql.ScriptDom.CompressionDelayTimeUnit : Enum {
    public int value__;
    public static CompressionDelayTimeUnit Unitless;
    public static CompressionDelayTimeUnit Minute;
    public static CompressionDelayTimeUnit Minutes;
}
internal class Microsoft.SqlServer.TransactSql.ScriptDom.CompressionDelayTimeUnitHelper : OptionsHelper`1<CompressionDelayTimeUnit> {
    internal static CompressionDelayTimeUnitHelper Instance;
    private static CompressionDelayTimeUnitHelper();
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.CompressionEndpointProtocolOption : EndpointProtocolOption {
    private bool _isEnabled;
    public bool IsEnabled { get; public set; }
    public bool get_IsEnabled();
    public void set_IsEnabled(bool value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.CompressionPartitionRange : TSqlFragment {
    private ScalarExpression _from;
    private ScalarExpression _to;
    public ScalarExpression From { get; public set; }
    public ScalarExpression To { get; public set; }
    public ScalarExpression get_From();
    public void set_From(ScalarExpression value);
    public ScalarExpression get_To();
    public void set_To(ScalarExpression value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.ComputeClause : TSqlFragment {
    private List`1<ComputeFunction> _computeFunctions;
    private List`1<ScalarExpression> _byExpressions;
    public IList`1<ComputeFunction> ComputeFunctions { get; }
    public IList`1<ScalarExpression> ByExpressions { get; }
    public IList`1<ComputeFunction> get_ComputeFunctions();
    public IList`1<ScalarExpression> get_ByExpressions();
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.ComputeFunction : TSqlFragment {
    private ComputeFunctionType _computeFunctionType;
    private ScalarExpression _expression;
    public ComputeFunctionType ComputeFunctionType { get; public set; }
    public ScalarExpression Expression { get; public set; }
    public ComputeFunctionType get_ComputeFunctionType();
    public void set_ComputeFunctionType(ComputeFunctionType value);
    public ScalarExpression get_Expression();
    public void set_Expression(ScalarExpression value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public enum Microsoft.SqlServer.TransactSql.ScriptDom.ComputeFunctionType : Enum {
    public int value__;
    public static ComputeFunctionType NotSpecified;
    public static ComputeFunctionType Avg;
    public static ComputeFunctionType Count;
    public static ComputeFunctionType Max;
    public static ComputeFunctionType Min;
    public static ComputeFunctionType Stdev;
    public static ComputeFunctionType Stdevp;
    public static ComputeFunctionType Var;
    public static ComputeFunctionType Varp;
    public static ComputeFunctionType Sum;
    public static ComputeFunctionType CountBig;
    public static ComputeFunctionType ChecksumAgg;
    public static ComputeFunctionType ModularSum;
}
internal class Microsoft.SqlServer.TransactSql.ScriptDom.ComputeFunctionTypeHelper : OptionsHelper`1<ComputeFunctionType> {
    internal static ComputeFunctionTypeHelper Instance;
    private static ComputeFunctionTypeHelper();
    protected virtual TSqlParseErrorException GetMatchingException(IToken token);
}
public abstract class Microsoft.SqlServer.TransactSql.ScriptDom.ConstraintDefinition : TSqlFragment {
    private Identifier _constraintIdentifier;
    public Identifier ConstraintIdentifier { get; public set; }
    public Identifier get_ConstraintIdentifier();
    public void set_ConstraintIdentifier(Identifier value);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public enum Microsoft.SqlServer.TransactSql.ScriptDom.ConstraintEnforcement : Enum {
    public int value__;
    public static ConstraintEnforcement NotSpecified;
    public static ConstraintEnforcement NoCheck;
    public static ConstraintEnforcement Check;
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.ContainmentDatabaseOption : DatabaseOption {
    private ContainmentOptionKind _value;
    public ContainmentOptionKind Value { get; public set; }
    public ContainmentOptionKind get_Value();
    public void set_Value(ContainmentOptionKind value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public enum Microsoft.SqlServer.TransactSql.ScriptDom.ContainmentOptionKind : Enum {
    public int value__;
    public static ContainmentOptionKind None;
    public static ContainmentOptionKind Partial;
}
internal class Microsoft.SqlServer.TransactSql.ScriptDom.ContainmentOptionKindHelper : OptionsHelper`1<ContainmentOptionKind> {
    internal static ContainmentOptionKindHelper Instance;
    private static ContainmentOptionKindHelper();
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.ContinueStatement : TSqlStatement {
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.ContractMessage : TSqlFragment {
    private Identifier _name;
    private MessageSender _sentBy;
    public Identifier Name { get; public set; }
    public MessageSender SentBy { get; public set; }
    public Identifier get_Name();
    public void set_Name(Identifier value);
    public MessageSender get_SentBy();
    public void set_SentBy(MessageSender value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.ConvertCall : PrimaryExpression {
    private DataTypeReference _dataType;
    private ScalarExpression _parameter;
    private ScalarExpression _style;
    public DataTypeReference DataType { get; public set; }
    public ScalarExpression Parameter { get; public set; }
    public ScalarExpression Style { get; public set; }
    public DataTypeReference get_DataType();
    public void set_DataType(DataTypeReference value);
    public ScalarExpression get_Parameter();
    public void set_Parameter(ScalarExpression value);
    public ScalarExpression get_Style();
    public void set_Style(ScalarExpression value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.CopyColumnOption : CopyStatementOptionBase {
    private Identifier _columnName;
    private ScalarExpression _defaultValue;
    private IntegerLiteral _fieldNumber;
    public Identifier ColumnName { get; public set; }
    public ScalarExpression DefaultValue { get; public set; }
    public IntegerLiteral FieldNumber { get; public set; }
    public Identifier get_ColumnName();
    public void set_ColumnName(Identifier value);
    public ScalarExpression get_DefaultValue();
    public void set_DefaultValue(ScalarExpression value);
    public IntegerLiteral get_FieldNumber();
    public void set_FieldNumber(IntegerLiteral value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public enum Microsoft.SqlServer.TransactSql.ScriptDom.CopyCommandCompressionType : Enum {
    public int value__;
    public static CopyCommandCompressionType None;
    public static CopyCommandCompressionType Gzip;
    public static CopyCommandCompressionType DefaultCodec;
    public static CopyCommandCompressionType Snappy;
}
public enum Microsoft.SqlServer.TransactSql.ScriptDom.CopyCommandCredentialType : Enum {
    public int value__;
    public static CopyCommandCredentialType Sas;
    public static CopyCommandCredentialType AccountKey;
    public static CopyCommandCredentialType ServicePrincipal;
    public static CopyCommandCredentialType ManagedIdentity;
    public static CopyCommandCredentialType PassThrough;
    public static CopyCommandCredentialType None;
}
public enum Microsoft.SqlServer.TransactSql.ScriptDom.CopyCommandDateFormat : Enum {
    public int value__;
    public static CopyCommandDateFormat mdy;
    public static CopyCommandDateFormat dmy;
    public static CopyCommandDateFormat ymd;
    public static CopyCommandDateFormat ydm;
    public static CopyCommandDateFormat myd;
    public static CopyCommandDateFormat dym;
}
public enum Microsoft.SqlServer.TransactSql.ScriptDom.CopyCommandEncoding : Enum {
    public int value__;
    public static CopyCommandEncoding UTF8;
    public static CopyCommandEncoding UTF16;
}
public enum Microsoft.SqlServer.TransactSql.ScriptDom.CopyCommandFileFormatType : Enum {
    public int value__;
    public static CopyCommandFileFormatType Orc;
    public static CopyCommandFileFormatType Csv;
    public static CopyCommandFileFormatType Parquet;
}
public enum Microsoft.SqlServer.TransactSql.ScriptDom.CopyCommandIdentityInsert : Enum {
    public int value__;
    public static CopyCommandIdentityInsert ON;
    public static CopyCommandIdentityInsert OFF;
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.CopyCredentialOption : CopyStatementOptionBase {
    private StringLiteral _identity;
    private StringLiteral _secret;
    public StringLiteral Identity { get; public set; }
    public StringLiteral Secret { get; public set; }
    public StringLiteral get_Identity();
    public void set_Identity(StringLiteral value);
    public StringLiteral get_Secret();
    public void set_Secret(StringLiteral value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
internal class Microsoft.SqlServer.TransactSql.ScriptDom.CopyIdentifierOrValueOptionsHelper : OptionsHelper`1<CopyOptionKind> {
    private static int MaxAsciiCharValue;
    public static CopyIdentifierOrValueOptionsHelper Instance;
    private int maxLength;
    private int fieldQuoteMaxLength;
    private int hexDecimalFieldQuoteMaxLen;
    private static Dictionary`2<string, CopyCommandCredentialType> credentialTypeMapping;
    private static CopyIdentifierOrValueOptionsHelper();
    internal void AssignValueToCopyOption(CopyOption copyOption, SingleValueTypeCopyOption singleValueTypeOption);
    internal bool ValidateCopyCredential(CopyCredentialOption credentialOption);
    internal void ValidateSecret(ValueExpression valueExpression);
    private static void CheckForInvalidChars(string key);
    private void CheckForEmptyValues(string optionName, int length);
    private void ValidateDelimiters(string optionName, ValueExpression valueExpression);
    private string ValidateAsStringLiteral(string optionName, ValueExpression valueExpression, bool checkForEmptyValues);
    private string ValidateAsStringLiteral(string optionName, ValueExpression valueExpression);
    public static bool GetCredentialType(string credentialIdentity, CopyCommandCredentialType& credentialType);
}
internal class Microsoft.SqlServer.TransactSql.ScriptDom.CopyListOptionsHelper : OptionsHelper`1<CopyOptionKind> {
    public static CopyListOptionsHelper Instance;
    private static CopyListOptionsHelper();
    internal void AssignCopyColumnOptions(CopyColumnOption columnOption, Identifier columnName, ScalarExpression defaultColumnValue, bool defaultSpecified, IntegerLiteral fieldNumber, int columnCount);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.CopyOption : TSqlFragment {
    private CopyOptionKind _kind;
    private CopyStatementOptionBase _value;
    public CopyOptionKind Kind { get; public set; }
    public CopyStatementOptionBase Value { get; public set; }
    public CopyOptionKind get_Kind();
    public void set_Kind(CopyOptionKind value);
    public CopyStatementOptionBase get_Value();
    public void set_Value(CopyStatementOptionBase value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public enum Microsoft.SqlServer.TransactSql.ScriptDom.CopyOptionKind : Enum {
    public int value__;
    public static CopyOptionKind File_Format;
    public static CopyOptionKind File_Type;
    public static CopyOptionKind ErrorFile;
    public static CopyOptionKind Identity_Insert;
    public static CopyOptionKind MaxErrors;
    public static CopyOptionKind Compression;
    public static CopyOptionKind FieldQuote;
    public static CopyOptionKind FieldTerminator;
    public static CopyOptionKind RowTerminator;
    public static CopyOptionKind FirstRow;
    public static CopyOptionKind DateFormat;
    public static CopyOptionKind Encoding;
    public static CopyOptionKind ColumnOptions;
    public static CopyOptionKind Credential;
    public static CopyOptionKind ErrorFileCredential;
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.CopyStatement : TSqlStatement {
    private List`1<StringLiteral> _from;
    private SchemaObjectName _into;
    private List`1<CopyOption> _options;
    private List`1<OptimizerHint> _optimizerHints;
    public IList`1<StringLiteral> From { get; }
    public SchemaObjectName Into { get; public set; }
    public IList`1<CopyOption> Options { get; }
    public IList`1<OptimizerHint> OptimizerHints { get; }
    public IList`1<StringLiteral> get_From();
    public SchemaObjectName get_Into();
    public void set_Into(SchemaObjectName value);
    public IList`1<CopyOption> get_Options();
    public IList`1<OptimizerHint> get_OptimizerHints();
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public abstract class Microsoft.SqlServer.TransactSql.ScriptDom.CopyStatementOptionBase : TSqlFragment {
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.CreateAggregateStatement : TSqlStatement {
    private SchemaObjectName _name;
    private AssemblyName _assemblyName;
    private List`1<ProcedureParameter> _parameters;
    private DataTypeReference _returnType;
    public SchemaObjectName Name { get; public set; }
    public AssemblyName AssemblyName { get; public set; }
    public IList`1<ProcedureParameter> Parameters { get; }
    public DataTypeReference ReturnType { get; public set; }
    public SchemaObjectName get_Name();
    public void set_Name(SchemaObjectName value);
    public AssemblyName get_AssemblyName();
    public void set_AssemblyName(AssemblyName value);
    public IList`1<ProcedureParameter> get_Parameters();
    public DataTypeReference get_ReturnType();
    public void set_ReturnType(DataTypeReference value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.CreateApplicationRoleStatement : ApplicationRoleStatement {
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.CreateAssemblyStatement : AssemblyStatement {
    private Identifier _owner;
    public Identifier Owner { get; public set; }
    public sealed virtual Identifier get_Owner();
    public sealed virtual void set_Owner(Identifier value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.CreateAsymmetricKeyStatement : TSqlStatement {
    private Identifier _name;
    private EncryptionSource _keySource;
    private EncryptionAlgorithm _encryptionAlgorithm;
    private Literal _password;
    private Identifier _owner;
    public Identifier Name { get; public set; }
    public EncryptionSource KeySource { get; public set; }
    public EncryptionAlgorithm EncryptionAlgorithm { get; public set; }
    public Literal Password { get; public set; }
    public Identifier Owner { get; public set; }
    public Identifier get_Name();
    public void set_Name(Identifier value);
    public EncryptionSource get_KeySource();
    public void set_KeySource(EncryptionSource value);
    public EncryptionAlgorithm get_EncryptionAlgorithm();
    public void set_EncryptionAlgorithm(EncryptionAlgorithm value);
    public Literal get_Password();
    public void set_Password(Literal value);
    public sealed virtual Identifier get_Owner();
    public sealed virtual void set_Owner(Identifier value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.CreateAvailabilityGroupStatement : AvailabilityGroupStatement {
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.CreateBrokerPriorityStatement : BrokerPriorityStatement {
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.CreateCertificateStatement : CertificateStatementBase {
    private EncryptionSource _certificateSource;
    private List`1<CertificateOption> _certificateOptions;
    private Identifier _owner;
    public EncryptionSource CertificateSource { get; public set; }
    public IList`1<CertificateOption> CertificateOptions { get; }
    public Identifier Owner { get; public set; }
    public EncryptionSource get_CertificateSource();
    public void set_CertificateSource(EncryptionSource value);
    public IList`1<CertificateOption> get_CertificateOptions();
    public sealed virtual Identifier get_Owner();
    public sealed virtual void set_Owner(Identifier value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.CreateColumnEncryptionKeyStatement : ColumnEncryptionKeyStatement {
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.CreateColumnMasterKeyStatement : TSqlStatement {
    private Identifier _name;
    private List`1<ColumnMasterKeyParameter> _parameters;
    public Identifier Name { get; public set; }
    public IList`1<ColumnMasterKeyParameter> Parameters { get; }
    public Identifier get_Name();
    public void set_Name(Identifier value);
    public IList`1<ColumnMasterKeyParameter> get_Parameters();
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.CreateColumnStoreIndexStatement : TSqlStatement {
    private Identifier _name;
    private Nullable`1<bool> _clustered;
    private SchemaObjectName _onName;
    private List`1<ColumnReferenceExpression> _columns;
    private BooleanExpression _filterPredicate;
    private List`1<IndexOption> _indexOptions;
    private FileGroupOrPartitionScheme _onFileGroupOrPartitionScheme;
    private List`1<ColumnReferenceExpression> _orderedColumns;
    public Identifier Name { get; public set; }
    public Nullable`1<bool> Clustered { get; public set; }
    public SchemaObjectName OnName { get; public set; }
    public IList`1<ColumnReferenceExpression> Columns { get; }
    public BooleanExpression FilterPredicate { get; public set; }
    public IList`1<IndexOption> IndexOptions { get; }
    public FileGroupOrPartitionScheme OnFileGroupOrPartitionScheme { get; public set; }
    public IList`1<ColumnReferenceExpression> OrderedColumns { get; }
    public Identifier get_Name();
    public void set_Name(Identifier value);
    public Nullable`1<bool> get_Clustered();
    public void set_Clustered(Nullable`1<bool> value);
    public SchemaObjectName get_OnName();
    public void set_OnName(SchemaObjectName value);
    public IList`1<ColumnReferenceExpression> get_Columns();
    public BooleanExpression get_FilterPredicate();
    public void set_FilterPredicate(BooleanExpression value);
    public IList`1<IndexOption> get_IndexOptions();
    public FileGroupOrPartitionScheme get_OnFileGroupOrPartitionScheme();
    public void set_OnFileGroupOrPartitionScheme(FileGroupOrPartitionScheme value);
    public IList`1<ColumnReferenceExpression> get_OrderedColumns();
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.CreateContractStatement : TSqlStatement {
    private Identifier _name;
    private List`1<ContractMessage> _messages;
    private Identifier _owner;
    public Identifier Name { get; public set; }
    public IList`1<ContractMessage> Messages { get; }
    public Identifier Owner { get; public set; }
    public Identifier get_Name();
    public void set_Name(Identifier value);
    public IList`1<ContractMessage> get_Messages();
    public sealed virtual Identifier get_Owner();
    public sealed virtual void set_Owner(Identifier value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.CreateCredentialStatement : CredentialStatement {
    private Identifier _cryptographicProviderName;
    public Identifier CryptographicProviderName { get; public set; }
    public Identifier get_CryptographicProviderName();
    public void set_CryptographicProviderName(Identifier value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.CreateCryptographicProviderStatement : TSqlStatement {
    private Identifier _name;
    private Literal _file;
    public Identifier Name { get; public set; }
    public Literal File { get; public set; }
    public Identifier get_Name();
    public void set_Name(Identifier value);
    public Literal get_File();
    public void set_File(Literal value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.CreateDatabaseAuditSpecificationStatement : AuditSpecificationStatement {
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.CreateDatabaseEncryptionKeyStatement : DatabaseEncryptionKeyStatement {
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.CreateDatabaseStatement : TSqlStatement {
    private Identifier _databaseName;
    private ContainmentDatabaseOption _containment;
    private List`1<FileGroupDefinition> _fileGroups;
    private List`1<FileDeclaration> _logOn;
    private List`1<DatabaseOption> _options;
    private AttachMode _attachMode;
    private Identifier _databaseSnapshot;
    private MultiPartIdentifier _copyOf;
    private Identifier _collation;
    public Identifier DatabaseName { get; public set; }
    public ContainmentDatabaseOption Containment { get; public set; }
    public IList`1<FileGroupDefinition> FileGroups { get; }
    public IList`1<FileDeclaration> LogOn { get; }
    public IList`1<DatabaseOption> Options { get; }
    public AttachMode AttachMode { get; public set; }
    public Identifier DatabaseSnapshot { get; public set; }
    public MultiPartIdentifier CopyOf { get; public set; }
    public Identifier Collation { get; public set; }
    public Identifier get_DatabaseName();
    public void set_DatabaseName(Identifier value);
    public ContainmentDatabaseOption get_Containment();
    public void set_Containment(ContainmentDatabaseOption value);
    public IList`1<FileGroupDefinition> get_FileGroups();
    public IList`1<FileDeclaration> get_LogOn();
    public IList`1<DatabaseOption> get_Options();
    public AttachMode get_AttachMode();
    public void set_AttachMode(AttachMode value);
    public Identifier get_DatabaseSnapshot();
    public void set_DatabaseSnapshot(Identifier value);
    public MultiPartIdentifier get_CopyOf();
    public void set_CopyOf(MultiPartIdentifier value);
    public sealed virtual Identifier get_Collation();
    public sealed virtual void set_Collation(Identifier value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.CreateDefaultStatement : TSqlStatement {
    private SchemaObjectName _name;
    private ScalarExpression _expression;
    public SchemaObjectName Name { get; public set; }
    public ScalarExpression Expression { get; public set; }
    public SchemaObjectName get_Name();
    public void set_Name(SchemaObjectName value);
    public ScalarExpression get_Expression();
    public void set_Expression(ScalarExpression value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.CreateEndpointStatement : AlterCreateEndpointStatementBase {
    private Identifier _owner;
    public Identifier Owner { get; public set; }
    public sealed virtual Identifier get_Owner();
    public sealed virtual void set_Owner(Identifier value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.CreateEventNotificationStatement : TSqlStatement {
    private Identifier _name;
    private EventNotificationObjectScope _scope;
    private bool _withFanIn;
    private List`1<EventTypeGroupContainer> _eventTypeGroups;
    private Literal _brokerService;
    private Literal _brokerInstanceSpecifier;
    public Identifier Name { get; public set; }
    public EventNotificationObjectScope Scope { get; public set; }
    public bool WithFanIn { get; public set; }
    public IList`1<EventTypeGroupContainer> EventTypeGroups { get; }
    public Literal BrokerService { get; public set; }
    public Literal BrokerInstanceSpecifier { get; public set; }
    public Identifier get_Name();
    public void set_Name(Identifier value);
    public EventNotificationObjectScope get_Scope();
    public void set_Scope(EventNotificationObjectScope value);
    public bool get_WithFanIn();
    public void set_WithFanIn(bool value);
    public IList`1<EventTypeGroupContainer> get_EventTypeGroups();
    public Literal get_BrokerService();
    public void set_BrokerService(Literal value);
    public Literal get_BrokerInstanceSpecifier();
    public void set_BrokerInstanceSpecifier(Literal value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.CreateEventSessionStatement : EventSessionStatement {
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.CreateExternalDataSourceStatement : ExternalDataSourceStatement {
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.CreateExternalFileFormatStatement : ExternalFileFormatStatement {
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.CreateExternalLanguageStatement : ExternalLanguageStatement {
    private Identifier _owner;
    public Identifier Owner { get; public set; }
    public sealed virtual Identifier get_Owner();
    public sealed virtual void set_Owner(Identifier value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.CreateExternalLibraryStatement : ExternalLibraryStatement {
    private Identifier _owner;
    public Identifier Owner { get; public set; }
    public sealed virtual Identifier get_Owner();
    public sealed virtual void set_Owner(Identifier value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.CreateExternalResourcePoolStatement : ExternalResourcePoolStatement {
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.CreateExternalStreamingJobStatement : ExternalStreamingJobStatement {
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.CreateExternalStreamStatement : ExternalStreamStatement {
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.CreateExternalTableStatement : ExternalTableStatement {
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.CreateFederationStatement : TSqlStatement {
    private Identifier _name;
    private Identifier _distributionName;
    private DataTypeReference _dataType;
    public Identifier Name { get; public set; }
    public Identifier DistributionName { get; public set; }
    public DataTypeReference DataType { get; public set; }
    public Identifier get_Name();
    public void set_Name(Identifier value);
    public Identifier get_DistributionName();
    public void set_DistributionName(Identifier value);
    public DataTypeReference get_DataType();
    public void set_DataType(DataTypeReference value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.CreateFullTextCatalogStatement : FullTextCatalogStatement {
    private Identifier _fileGroup;
    private Literal _path;
    private bool _isDefault;
    private Identifier _owner;
    public Identifier FileGroup { get; public set; }
    public Literal Path { get; public set; }
    public bool IsDefault { get; public set; }
    public Identifier Owner { get; public set; }
    public Identifier get_FileGroup();
    public void set_FileGroup(Identifier value);
    public Literal get_Path();
    public void set_Path(Literal value);
    public bool get_IsDefault();
    public void set_IsDefault(bool value);
    public sealed virtual Identifier get_Owner();
    public sealed virtual void set_Owner(Identifier value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.CreateFullTextIndexStatement : TSqlStatement {
    private SchemaObjectName _onName;
    private List`1<FullTextIndexColumn> _fullTextIndexColumns;
    private Identifier _keyIndexName;
    private FullTextCatalogAndFileGroup _catalogAndFileGroup;
    private List`1<FullTextIndexOption> _options;
    public SchemaObjectName OnName { get; public set; }
    public IList`1<FullTextIndexColumn> FullTextIndexColumns { get; }
    public Identifier KeyIndexName { get; public set; }
    public FullTextCatalogAndFileGroup CatalogAndFileGroup { get; public set; }
    public IList`1<FullTextIndexOption> Options { get; }
    public SchemaObjectName get_OnName();
    public void set_OnName(SchemaObjectName value);
    public IList`1<FullTextIndexColumn> get_FullTextIndexColumns();
    public Identifier get_KeyIndexName();
    public void set_KeyIndexName(Identifier value);
    public FullTextCatalogAndFileGroup get_CatalogAndFileGroup();
    public void set_CatalogAndFileGroup(FullTextCatalogAndFileGroup value);
    public IList`1<FullTextIndexOption> get_Options();
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.CreateFullTextStopListStatement : TSqlStatement {
    private Identifier _name;
    private bool _isSystemStopList;
    private Identifier _databaseName;
    private Identifier _sourceStopListName;
    private Identifier _owner;
    public Identifier Name { get; public set; }
    public bool IsSystemStopList { get; public set; }
    public Identifier DatabaseName { get; public set; }
    public Identifier SourceStopListName { get; public set; }
    public Identifier Owner { get; public set; }
    public Identifier get_Name();
    public void set_Name(Identifier value);
    public bool get_IsSystemStopList();
    public void set_IsSystemStopList(bool value);
    public Identifier get_DatabaseName();
    public void set_DatabaseName(Identifier value);
    public Identifier get_SourceStopListName();
    public void set_SourceStopListName(Identifier value);
    public sealed virtual Identifier get_Owner();
    public sealed virtual void set_Owner(Identifier value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.CreateFunctionStatement : FunctionStatementBody {
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.CreateIndexStatement : IndexStatement {
    private bool _translated80SyntaxTo90;
    private bool _unique;
    private Nullable`1<bool> _clustered;
    private List`1<ColumnWithSortOrder> _columns;
    private List`1<ColumnReferenceExpression> _includeColumns;
    private FileGroupOrPartitionScheme _onFileGroupOrPartitionScheme;
    private BooleanExpression _filterPredicate;
    private IdentifierOrValueExpression _fileStreamOn;
    public bool Translated80SyntaxTo90 { get; public set; }
    public bool Unique { get; public set; }
    public Nullable`1<bool> Clustered { get; public set; }
    public IList`1<ColumnWithSortOrder> Columns { get; }
    public IList`1<ColumnReferenceExpression> IncludeColumns { get; }
    public FileGroupOrPartitionScheme OnFileGroupOrPartitionScheme { get; public set; }
    public BooleanExpression FilterPredicate { get; public set; }
    public IdentifierOrValueExpression FileStreamOn { get; public set; }
    public bool get_Translated80SyntaxTo90();
    public void set_Translated80SyntaxTo90(bool value);
    public bool get_Unique();
    public void set_Unique(bool value);
    public Nullable`1<bool> get_Clustered();
    public void set_Clustered(Nullable`1<bool> value);
    public IList`1<ColumnWithSortOrder> get_Columns();
    public IList`1<ColumnReferenceExpression> get_IncludeColumns();
    public FileGroupOrPartitionScheme get_OnFileGroupOrPartitionScheme();
    public void set_OnFileGroupOrPartitionScheme(FileGroupOrPartitionScheme value);
    public BooleanExpression get_FilterPredicate();
    public void set_FilterPredicate(BooleanExpression value);
    public sealed virtual IdentifierOrValueExpression get_FileStreamOn();
    public sealed virtual void set_FileStreamOn(IdentifierOrValueExpression value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public abstract class Microsoft.SqlServer.TransactSql.ScriptDom.CreateLoginSource : TSqlFragment {
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.CreateLoginStatement : TSqlStatement {
    private Identifier _name;
    private CreateLoginSource _source;
    public Identifier Name { get; public set; }
    public CreateLoginSource Source { get; public set; }
    public Identifier get_Name();
    public void set_Name(Identifier value);
    public CreateLoginSource get_Source();
    public void set_Source(CreateLoginSource value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.CreateMasterKeyStatement : MasterKeyStatement {
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.CreateMessageTypeStatement : MessageTypeStatementBase {
    private Identifier _owner;
    public Identifier Owner { get; public set; }
    public sealed virtual Identifier get_Owner();
    public sealed virtual void set_Owner(Identifier value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.CreateOrAlterFunctionStatement : FunctionStatementBody {
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.CreateOrAlterProcedureStatement : ProcedureStatementBody {
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.CreateOrAlterTriggerStatement : TriggerStatementBody {
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.CreateOrAlterViewStatement : ViewStatementBody {
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.CreatePartitionFunctionStatement : TSqlStatement {
    private Identifier _name;
    private PartitionParameterType _parameterType;
    private PartitionFunctionRange _range;
    private List`1<ScalarExpression> _boundaryValues;
    public Identifier Name { get; public set; }
    public PartitionParameterType ParameterType { get; public set; }
    public PartitionFunctionRange Range { get; public set; }
    public IList`1<ScalarExpression> BoundaryValues { get; }
    public Identifier get_Name();
    public void set_Name(Identifier value);
    public PartitionParameterType get_ParameterType();
    public void set_ParameterType(PartitionParameterType value);
    public PartitionFunctionRange get_Range();
    public void set_Range(PartitionFunctionRange value);
    public IList`1<ScalarExpression> get_BoundaryValues();
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.CreatePartitionSchemeStatement : TSqlStatement {
    private Identifier _name;
    private Identifier _partitionFunction;
    private bool _isAll;
    private List`1<IdentifierOrValueExpression> _fileGroups;
    public Identifier Name { get; public set; }
    public Identifier PartitionFunction { get; public set; }
    public bool IsAll { get; public set; }
    public IList`1<IdentifierOrValueExpression> FileGroups { get; }
    public Identifier get_Name();
    public void set_Name(Identifier value);
    public Identifier get_PartitionFunction();
    public void set_PartitionFunction(Identifier value);
    public bool get_IsAll();
    public void set_IsAll(bool value);
    public IList`1<IdentifierOrValueExpression> get_FileGroups();
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.CreateProcedureStatement : ProcedureStatementBody {
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.CreateQueueStatement : QueueStatement {
    private IdentifierOrValueExpression _onFileGroup;
    public IdentifierOrValueExpression OnFileGroup { get; public set; }
    public IdentifierOrValueExpression get_OnFileGroup();
    public void set_OnFileGroup(IdentifierOrValueExpression value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.CreateRemoteServiceBindingStatement : RemoteServiceBindingStatementBase {
    private Literal _service;
    private Identifier _owner;
    public Literal Service { get; public set; }
    public Identifier Owner { get; public set; }
    public Literal get_Service();
    public void set_Service(Literal value);
    public sealed virtual Identifier get_Owner();
    public sealed virtual void set_Owner(Identifier value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.CreateResourcePoolStatement : ResourcePoolStatement {
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.CreateRoleStatement : RoleStatement {
    private Identifier _owner;
    public Identifier Owner { get; public set; }
    public sealed virtual Identifier get_Owner();
    public sealed virtual void set_Owner(Identifier value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.CreateRouteStatement : RouteStatement {
    private Identifier _owner;
    public Identifier Owner { get; public set; }
    public sealed virtual Identifier get_Owner();
    public sealed virtual void set_Owner(Identifier value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.CreateRuleStatement : TSqlStatement {
    private SchemaObjectName _name;
    private BooleanExpression _expression;
    public SchemaObjectName Name { get; public set; }
    public BooleanExpression Expression { get; public set; }
    public SchemaObjectName get_Name();
    public void set_Name(SchemaObjectName value);
    public BooleanExpression get_Expression();
    public void set_Expression(BooleanExpression value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.CreateSchemaStatement : TSqlStatement {
    private Identifier _name;
    private StatementList _statementList;
    private Identifier _owner;
    public Identifier Name { get; public set; }
    public StatementList StatementList { get; public set; }
    public Identifier Owner { get; public set; }
    public Identifier get_Name();
    public void set_Name(Identifier value);
    public StatementList get_StatementList();
    public void set_StatementList(StatementList value);
    public sealed virtual Identifier get_Owner();
    public sealed virtual void set_Owner(Identifier value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.CreateSearchPropertyListStatement : TSqlStatement {
    private Identifier _name;
    private MultiPartIdentifier _sourceSearchPropertyList;
    private Identifier _owner;
    public Identifier Name { get; public set; }
    public MultiPartIdentifier SourceSearchPropertyList { get; public set; }
    public Identifier Owner { get; public set; }
    public Identifier get_Name();
    public void set_Name(Identifier value);
    public MultiPartIdentifier get_SourceSearchPropertyList();
    public void set_SourceSearchPropertyList(MultiPartIdentifier value);
    public sealed virtual Identifier get_Owner();
    public sealed virtual void set_Owner(Identifier value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.CreateSecurityPolicyStatement : SecurityPolicyStatement {
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.CreateSelectiveXmlIndexStatement : IndexStatement {
    private bool _isSecondary;
    private Identifier _xmlColumn;
    private List`1<SelectiveXmlIndexPromotedPath> _promotedPaths;
    private XmlNamespaces _xmlNamespaces;
    private Identifier _usingXmlIndexName;
    private Identifier _pathName;
    public bool IsSecondary { get; public set; }
    public Identifier XmlColumn { get; public set; }
    public IList`1<SelectiveXmlIndexPromotedPath> PromotedPaths { get; }
    public XmlNamespaces XmlNamespaces { get; public set; }
    public Identifier UsingXmlIndexName { get; public set; }
    public Identifier PathName { get; public set; }
    public bool get_IsSecondary();
    public void set_IsSecondary(bool value);
    public Identifier get_XmlColumn();
    public void set_XmlColumn(Identifier value);
    public IList`1<SelectiveXmlIndexPromotedPath> get_PromotedPaths();
    public XmlNamespaces get_XmlNamespaces();
    public void set_XmlNamespaces(XmlNamespaces value);
    public Identifier get_UsingXmlIndexName();
    public void set_UsingXmlIndexName(Identifier value);
    public Identifier get_PathName();
    public void set_PathName(Identifier value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.CreateSequenceStatement : SequenceStatement {
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.CreateServerAuditSpecificationStatement : AuditSpecificationStatement {
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.CreateServerAuditStatement : ServerAuditStatement {
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.CreateServerRoleStatement : CreateRoleStatement {
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.CreateServiceStatement : AlterCreateServiceStatementBase {
    private Identifier _owner;
    public Identifier Owner { get; public set; }
    public sealed virtual Identifier get_Owner();
    public sealed virtual void set_Owner(Identifier value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.CreateSpatialIndexStatement : TSqlStatement {
    private Identifier _name;
    private SchemaObjectName _object;
    private Identifier _spatialColumnName;
    private SpatialIndexingSchemeType _spatialIndexingScheme;
    private List`1<SpatialIndexOption> _spatialIndexOptions;
    private IdentifierOrValueExpression _onFileGroup;
    public Identifier Name { get; public set; }
    public SchemaObjectName Object { get; public set; }
    public Identifier SpatialColumnName { get; public set; }
    public SpatialIndexingSchemeType SpatialIndexingScheme { get; public set; }
    public IList`1<SpatialIndexOption> SpatialIndexOptions { get; }
    public IdentifierOrValueExpression OnFileGroup { get; public set; }
    public Identifier get_Name();
    public void set_Name(Identifier value);
    public SchemaObjectName get_Object();
    public void set_Object(SchemaObjectName value);
    public Identifier get_SpatialColumnName();
    public void set_SpatialColumnName(Identifier value);
    public SpatialIndexingSchemeType get_SpatialIndexingScheme();
    public void set_SpatialIndexingScheme(SpatialIndexingSchemeType value);
    public IList`1<SpatialIndexOption> get_SpatialIndexOptions();
    public IdentifierOrValueExpression get_OnFileGroup();
    public void set_OnFileGroup(IdentifierOrValueExpression value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.CreateStatisticsStatement : TSqlStatement {
    private Identifier _name;
    private SchemaObjectName _onName;
    private List`1<ColumnReferenceExpression> _columns;
    private List`1<StatisticsOption> _statisticsOptions;
    private BooleanExpression _filterPredicate;
    public Identifier Name { get; public set; }
    public SchemaObjectName OnName { get; public set; }
    public IList`1<ColumnReferenceExpression> Columns { get; }
    public IList`1<StatisticsOption> StatisticsOptions { get; }
    public BooleanExpression FilterPredicate { get; public set; }
    public Identifier get_Name();
    public void set_Name(Identifier value);
    public SchemaObjectName get_OnName();
    public void set_OnName(SchemaObjectName value);
    public IList`1<ColumnReferenceExpression> get_Columns();
    public IList`1<StatisticsOption> get_StatisticsOptions();
    public BooleanExpression get_FilterPredicate();
    public void set_FilterPredicate(BooleanExpression value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.CreateSymmetricKeyStatement : SymmetricKeyStatement {
    private List`1<KeyOption> _keyOptions;
    private Identifier _provider;
    private Identifier _owner;
    public IList`1<KeyOption> KeyOptions { get; }
    public Identifier Provider { get; public set; }
    public Identifier Owner { get; public set; }
    public IList`1<KeyOption> get_KeyOptions();
    public Identifier get_Provider();
    public void set_Provider(Identifier value);
    public sealed virtual Identifier get_Owner();
    public sealed virtual void set_Owner(Identifier value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.CreateSynonymStatement : TSqlStatement {
    private SchemaObjectName _name;
    private SchemaObjectName _forName;
    public SchemaObjectName Name { get; public set; }
    public SchemaObjectName ForName { get; public set; }
    public SchemaObjectName get_Name();
    public void set_Name(SchemaObjectName value);
    public SchemaObjectName get_ForName();
    public void set_ForName(SchemaObjectName value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.CreateTableStatement : TSqlStatement {
    private SchemaObjectName _schemaObjectName;
    private bool _asEdge;
    private bool _asFileTable;
    private bool _asNode;
    private TableDefinition _definition;
    private FileGroupOrPartitionScheme _onFileGroupOrPartitionScheme;
    private FederationScheme _federationScheme;
    private IdentifierOrValueExpression _textImageOn;
    private List`1<TableOption> _options;
    private SelectStatement _selectStatement;
    private List`1<Identifier> _ctasColumns;
    private IdentifierOrValueExpression _fileStreamOn;
    public SchemaObjectName SchemaObjectName { get; public set; }
    public bool AsEdge { get; public set; }
    public bool AsFileTable { get; public set; }
    public bool AsNode { get; public set; }
    public TableDefinition Definition { get; public set; }
    public FileGroupOrPartitionScheme OnFileGroupOrPartitionScheme { get; public set; }
    public FederationScheme FederationScheme { get; public set; }
    public IdentifierOrValueExpression TextImageOn { get; public set; }
    public IList`1<TableOption> Options { get; }
    public SelectStatement SelectStatement { get; public set; }
    public IList`1<Identifier> CtasColumns { get; }
    public IdentifierOrValueExpression FileStreamOn { get; public set; }
    public SchemaObjectName get_SchemaObjectName();
    public void set_SchemaObjectName(SchemaObjectName value);
    public bool get_AsEdge();
    public void set_AsEdge(bool value);
    public bool get_AsFileTable();
    public void set_AsFileTable(bool value);
    public bool get_AsNode();
    public void set_AsNode(bool value);
    public TableDefinition get_Definition();
    public void set_Definition(TableDefinition value);
    public FileGroupOrPartitionScheme get_OnFileGroupOrPartitionScheme();
    public void set_OnFileGroupOrPartitionScheme(FileGroupOrPartitionScheme value);
    public FederationScheme get_FederationScheme();
    public void set_FederationScheme(FederationScheme value);
    public IdentifierOrValueExpression get_TextImageOn();
    public void set_TextImageOn(IdentifierOrValueExpression value);
    public IList`1<TableOption> get_Options();
    public SelectStatement get_SelectStatement();
    public void set_SelectStatement(SelectStatement value);
    public IList`1<Identifier> get_CtasColumns();
    public sealed virtual IdentifierOrValueExpression get_FileStreamOn();
    public sealed virtual void set_FileStreamOn(IdentifierOrValueExpression value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.CreateTriggerStatement : TriggerStatementBody {
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public abstract class Microsoft.SqlServer.TransactSql.ScriptDom.CreateTypeStatement : TSqlStatement {
    private SchemaObjectName _name;
    public SchemaObjectName Name { get; public set; }
    public SchemaObjectName get_Name();
    public void set_Name(SchemaObjectName value);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.CreateTypeTableStatement : CreateTypeStatement {
    private TableDefinition _definition;
    private List`1<TableOption> _options;
    public TableDefinition Definition { get; public set; }
    public IList`1<TableOption> Options { get; }
    public TableDefinition get_Definition();
    public void set_Definition(TableDefinition value);
    public IList`1<TableOption> get_Options();
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.CreateTypeUddtStatement : CreateTypeStatement {
    private DataTypeReference _dataType;
    private NullableConstraintDefinition _nullableConstraint;
    public DataTypeReference DataType { get; public set; }
    public NullableConstraintDefinition NullableConstraint { get; public set; }
    public DataTypeReference get_DataType();
    public void set_DataType(DataTypeReference value);
    public NullableConstraintDefinition get_NullableConstraint();
    public void set_NullableConstraint(NullableConstraintDefinition value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.CreateTypeUdtStatement : CreateTypeStatement {
    private AssemblyName _assemblyName;
    public AssemblyName AssemblyName { get; public set; }
    public AssemblyName get_AssemblyName();
    public void set_AssemblyName(AssemblyName value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.CreateUserStatement : UserStatement {
    private UserLoginOption _userLoginOption;
    public UserLoginOption UserLoginOption { get; public set; }
    public UserLoginOption get_UserLoginOption();
    public void set_UserLoginOption(UserLoginOption value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.CreateViewStatement : ViewStatementBody {
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.CreateWorkloadClassifierStatement : WorkloadClassifierStatement {
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.CreateWorkloadGroupStatement : WorkloadGroupStatement {
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.CreateXmlIndexStatement : IndexStatement {
    private bool _primary;
    private Identifier _xmlColumn;
    private Identifier _secondaryXmlIndexName;
    private SecondaryXmlIndexType _secondaryXmlIndexType;
    public bool Primary { get; public set; }
    public Identifier XmlColumn { get; public set; }
    public Identifier SecondaryXmlIndexName { get; public set; }
    public SecondaryXmlIndexType SecondaryXmlIndexType { get; public set; }
    public bool get_Primary();
    public void set_Primary(bool value);
    public Identifier get_XmlColumn();
    public void set_XmlColumn(Identifier value);
    public Identifier get_SecondaryXmlIndexName();
    public void set_SecondaryXmlIndexName(Identifier value);
    public SecondaryXmlIndexType get_SecondaryXmlIndexType();
    public void set_SecondaryXmlIndexType(SecondaryXmlIndexType value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.CreateXmlSchemaCollectionStatement : TSqlStatement {
    private SchemaObjectName _name;
    private ScalarExpression _expression;
    public SchemaObjectName Name { get; public set; }
    public ScalarExpression Expression { get; public set; }
    public SchemaObjectName get_Name();
    public void set_Name(SchemaObjectName value);
    public ScalarExpression get_Expression();
    public void set_Expression(ScalarExpression value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.CreationDispositionKeyOption : KeyOption {
    private bool _isCreateNew;
    public bool IsCreateNew { get; public set; }
    public bool get_IsCreateNew();
    public void set_IsCreateNew(bool value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public abstract class Microsoft.SqlServer.TransactSql.ScriptDom.CredentialStatement : TSqlStatement {
    private Identifier _name;
    private Literal _identity;
    private Literal _secret;
    private bool _isDatabaseScoped;
    public Identifier Name { get; public set; }
    public Literal Identity { get; public set; }
    public Literal Secret { get; public set; }
    public bool IsDatabaseScoped { get; public set; }
    public Identifier get_Name();
    public void set_Name(Identifier value);
    public Literal get_Identity();
    public void set_Identity(Literal value);
    public Literal get_Secret();
    public void set_Secret(Literal value);
    public bool get_IsDatabaseScoped();
    public void set_IsDatabaseScoped(bool value);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.CryptoMechanism : TSqlFragment {
    private CryptoMechanismType _cryptoMechanismType;
    private Identifier _identifier;
    private Literal _passwordOrSignature;
    public CryptoMechanismType CryptoMechanismType { get; public set; }
    public Identifier Identifier { get; public set; }
    public Literal PasswordOrSignature { get; public set; }
    public CryptoMechanismType get_CryptoMechanismType();
    public void set_CryptoMechanismType(CryptoMechanismType value);
    public Identifier get_Identifier();
    public void set_Identifier(Identifier value);
    public Literal get_PasswordOrSignature();
    public void set_PasswordOrSignature(Literal value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public enum Microsoft.SqlServer.TransactSql.ScriptDom.CryptoMechanismType : Enum {
    public int value__;
    public static CryptoMechanismType Certificate;
    public static CryptoMechanismType AsymmetricKey;
    public static CryptoMechanismType SymmetricKey;
    public static CryptoMechanismType Password;
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.CubeGroupingSpecification : GroupingSpecification {
    private List`1<GroupingSpecification> _arguments;
    public IList`1<GroupingSpecification> Arguments { get; }
    public IList`1<GroupingSpecification> get_Arguments();
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.CursorDefaultDatabaseOption : DatabaseOption {
    private bool _isLocal;
    public bool IsLocal { get; public set; }
    public bool get_IsLocal();
    public void set_IsLocal(bool value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.CursorDefinition : TSqlFragment {
    private List`1<CursorOption> _options;
    private SelectStatement _select;
    public IList`1<CursorOption> Options { get; }
    public SelectStatement Select { get; public set; }
    public IList`1<CursorOption> get_Options();
    public SelectStatement get_Select();
    public void set_Select(SelectStatement value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.CursorId : TSqlFragment {
    private bool _isGlobal;
    private IdentifierOrValueExpression _name;
    public bool IsGlobal { get; public set; }
    public IdentifierOrValueExpression Name { get; public set; }
    public bool get_IsGlobal();
    public void set_IsGlobal(bool value);
    public IdentifierOrValueExpression get_Name();
    public void set_Name(IdentifierOrValueExpression value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.CursorOption : TSqlFragment {
    private CursorOptionKind _optionKind;
    public CursorOptionKind OptionKind { get; public set; }
    public CursorOptionKind get_OptionKind();
    public void set_OptionKind(CursorOptionKind value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public enum Microsoft.SqlServer.TransactSql.ScriptDom.CursorOptionKind : Enum {
    public int value__;
    public static CursorOptionKind Local;
    public static CursorOptionKind Global;
    public static CursorOptionKind Scroll;
    public static CursorOptionKind ForwardOnly;
    public static CursorOptionKind Insensitive;
    public static CursorOptionKind Keyset;
    public static CursorOptionKind Dynamic;
    public static CursorOptionKind FastForward;
    public static CursorOptionKind ScrollLocks;
    public static CursorOptionKind Optimistic;
    public static CursorOptionKind ReadOnly;
    public static CursorOptionKind Static;
    public static CursorOptionKind TypeWarning;
}
internal class Microsoft.SqlServer.TransactSql.ScriptDom.CursorOptionsHelper : OptionsHelper`1<CursorOptionKind> {
    internal static CursorOptionsHelper Instance;
    private static CursorOptionsHelper();
}
public abstract class Microsoft.SqlServer.TransactSql.ScriptDom.CursorStatement : TSqlStatement {
    private CursorId _cursor;
    public CursorId Cursor { get; public set; }
    public CursorId get_Cursor();
    public void set_Cursor(CursorId value);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.DatabaseAuditAction : TSqlFragment {
    private DatabaseAuditActionKind _actionKind;
    public DatabaseAuditActionKind ActionKind { get; public set; }
    public DatabaseAuditActionKind get_ActionKind();
    public void set_ActionKind(DatabaseAuditActionKind value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
internal class Microsoft.SqlServer.TransactSql.ScriptDom.DatabaseAuditActionGroupHelper : OptionsHelper`1<AuditActionGroup> {
    internal static DatabaseAuditActionGroupHelper Instance;
    private static DatabaseAuditActionGroupHelper();
}
public enum Microsoft.SqlServer.TransactSql.ScriptDom.DatabaseAuditActionKind : Enum {
    public int value__;
    public static DatabaseAuditActionKind Select;
    public static DatabaseAuditActionKind Update;
    public static DatabaseAuditActionKind Insert;
    public static DatabaseAuditActionKind Delete;
    public static DatabaseAuditActionKind Execute;
    public static DatabaseAuditActionKind Receive;
    public static DatabaseAuditActionKind References;
}
public enum Microsoft.SqlServer.TransactSql.ScriptDom.DatabaseConfigClearOptionKind : Enum {
    public int value__;
    public static DatabaseConfigClearOptionKind ProcedureCache;
}
internal class Microsoft.SqlServer.TransactSql.ScriptDom.DatabaseConfigClearOptionKindHelper : OptionsHelper`1<DatabaseConfigClearOptionKind> {
    internal static DatabaseConfigClearOptionKindHelper Instance;
    private static DatabaseConfigClearOptionKindHelper();
}
public enum Microsoft.SqlServer.TransactSql.ScriptDom.DatabaseConfigSetOptionKind : Enum {
    public int value__;
    public static DatabaseConfigSetOptionKind MaxDop;
    public static DatabaseConfigSetOptionKind LegacyCardinalityEstimate;
    public static DatabaseConfigSetOptionKind ParameterSniffing;
    public static DatabaseConfigSetOptionKind QueryOptimizerHotFixes;
}
internal class Microsoft.SqlServer.TransactSql.ScriptDom.DatabaseConfigSetOptionKindHelper : OptionsHelper`1<DatabaseConfigSetOptionKind> {
    internal static DatabaseConfigSetOptionKindHelper Instance;
    private static DatabaseConfigSetOptionKindHelper();
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.DatabaseConfigurationClearOption : TSqlFragment {
    private DatabaseConfigClearOptionKind _optionKind;
    private BinaryLiteral _planHandle;
    public DatabaseConfigClearOptionKind OptionKind { get; public set; }
    public BinaryLiteral PlanHandle { get; public set; }
    public DatabaseConfigClearOptionKind get_OptionKind();
    public void set_OptionKind(DatabaseConfigClearOptionKind value);
    public BinaryLiteral get_PlanHandle();
    public void set_PlanHandle(BinaryLiteral value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public enum Microsoft.SqlServer.TransactSql.ScriptDom.DatabaseConfigurationOptionState : Enum {
    public int value__;
    public static DatabaseConfigurationOptionState NotSet;
    public static DatabaseConfigurationOptionState On;
    public static DatabaseConfigurationOptionState Off;
    public static DatabaseConfigurationOptionState Primary;
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.DatabaseConfigurationSetOption : TSqlFragment {
    private DatabaseConfigSetOptionKind _optionKind;
    private Identifier _genericOptionKind;
    public DatabaseConfigSetOptionKind OptionKind { get; public set; }
    public Identifier GenericOptionKind { get; public set; }
    public DatabaseConfigSetOptionKind get_OptionKind();
    public void set_OptionKind(DatabaseConfigSetOptionKind value);
    public Identifier get_GenericOptionKind();
    public void set_GenericOptionKind(Identifier value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public enum Microsoft.SqlServer.TransactSql.ScriptDom.DatabaseEncryptionKeyAlgorithm : Enum {
    public int value__;
    public static DatabaseEncryptionKeyAlgorithm None;
    public static DatabaseEncryptionKeyAlgorithm Aes128;
    public static DatabaseEncryptionKeyAlgorithm Aes192;
    public static DatabaseEncryptionKeyAlgorithm Aes256;
    public static DatabaseEncryptionKeyAlgorithm TripleDes3Key;
}
internal class Microsoft.SqlServer.TransactSql.ScriptDom.DatabaseEncryptionKeyAlgorithmHelper : OptionsHelper`1<DatabaseEncryptionKeyAlgorithm> {
    internal static DatabaseEncryptionKeyAlgorithmHelper Instance;
    private static DatabaseEncryptionKeyAlgorithmHelper();
}
public abstract class Microsoft.SqlServer.TransactSql.ScriptDom.DatabaseEncryptionKeyStatement : TSqlStatement {
    private CryptoMechanism _encryptor;
    private DatabaseEncryptionKeyAlgorithm _algorithm;
    public CryptoMechanism Encryptor { get; public set; }
    public DatabaseEncryptionKeyAlgorithm Algorithm { get; public set; }
    public CryptoMechanism get_Encryptor();
    public void set_Encryptor(CryptoMechanism value);
    public DatabaseEncryptionKeyAlgorithm get_Algorithm();
    public void set_Algorithm(DatabaseEncryptionKeyAlgorithm value);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public enum Microsoft.SqlServer.TransactSql.ScriptDom.DatabaseMirroringEndpointRole : Enum {
    public int value__;
    public static DatabaseMirroringEndpointRole NotSpecified;
    public static DatabaseMirroringEndpointRole Witness;
    public static DatabaseMirroringEndpointRole Partner;
    public static DatabaseMirroringEndpointRole All;
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.DatabaseOption : TSqlFragment {
    private DatabaseOptionKind _optionKind;
    public DatabaseOptionKind OptionKind { get; public set; }
    public DatabaseOptionKind get_OptionKind();
    public void set_OptionKind(DatabaseOptionKind value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public enum Microsoft.SqlServer.TransactSql.ScriptDom.DatabaseOptionKind : Enum {
    public int value__;
    public static DatabaseOptionKind Online;
    public static DatabaseOptionKind Offline;
    public static DatabaseOptionKind Emergency;
    public static DatabaseOptionKind SingleUser;
    public static DatabaseOptionKind RestrictedUser;
    public static DatabaseOptionKind MultiUser;
    public static DatabaseOptionKind ReadOnly;
    public static DatabaseOptionKind ReadWrite;
    public static DatabaseOptionKind EnableBroker;
    public static DatabaseOptionKind DisableBroker;
    public static DatabaseOptionKind NewBroker;
    public static DatabaseOptionKind ErrorBrokerConversations;
    public static DatabaseOptionKind DBChaining;
    public static DatabaseOptionKind Trustworthy;
    public static DatabaseOptionKind CursorCloseOnCommit;
    public static DatabaseOptionKind AutoClose;
    public static DatabaseOptionKind AutoCreateStatistics;
    public static DatabaseOptionKind AutoShrink;
    public static DatabaseOptionKind AutoUpdateStatistics;
    public static DatabaseOptionKind AutoUpdateStatisticsAsync;
    public static DatabaseOptionKind AnsiNullDefault;
    public static DatabaseOptionKind AnsiNulls;
    public static DatabaseOptionKind AnsiPadding;
    public static DatabaseOptionKind AnsiWarnings;
    public static DatabaseOptionKind ArithAbort;
    public static DatabaseOptionKind ConcatNullYieldsNull;
    public static DatabaseOptionKind NumericRoundAbort;
    public static DatabaseOptionKind QuotedIdentifier;
    public static DatabaseOptionKind RecursiveTriggers;
    public static DatabaseOptionKind TornPageDetection;
    public static DatabaseOptionKind DateCorrelationOptimization;
    public static DatabaseOptionKind AllowSnapshotIsolation;
    public static DatabaseOptionKind ReadCommittedSnapshot;
    public static DatabaseOptionKind Encryption;
    public static DatabaseOptionKind HonorBrokerPriority;
    public static DatabaseOptionKind VarDecimalStorageFormat;
    public static DatabaseOptionKind SupplementalLogging;
    public static DatabaseOptionKind CompatibilityLevel;
    public static DatabaseOptionKind CursorDefault;
    public static DatabaseOptionKind Recovery;
    public static DatabaseOptionKind PageVerify;
    public static DatabaseOptionKind Partner;
    public static DatabaseOptionKind Witness;
    public static DatabaseOptionKind Parameterization;
    public static DatabaseOptionKind ChangeTracking;
    public static DatabaseOptionKind DefaultLanguage;
    public static DatabaseOptionKind DefaultFullTextLanguage;
    public static DatabaseOptionKind NestedTriggers;
    public static DatabaseOptionKind TransformNoiseWords;
    public static DatabaseOptionKind TwoDigitYearCutoff;
    public static DatabaseOptionKind Containment;
    public static DatabaseOptionKind Hadr;
    public static DatabaseOptionKind FileStream;
    public static DatabaseOptionKind Edition;
    public static DatabaseOptionKind MaxSize;
    public static DatabaseOptionKind TargetRecoveryTime;
    public static DatabaseOptionKind MemoryOptimizedData;
    public static DatabaseOptionKind DelayedDurability;
    public static DatabaseOptionKind MemoryOptimizedElevateToSnapshot;
    public static DatabaseOptionKind ServiceObjective;
    public static DatabaseOptionKind RemoteDataArchive;
    public static DatabaseOptionKind QueryStore;
    public static DatabaseOptionKind MixedPageAllocation;
    public static DatabaseOptionKind TemporalHistoryRetention;
    public static DatabaseOptionKind CatalogCollation;
    public static DatabaseOptionKind AutomaticTuning;
    public static DatabaseOptionKind AcceleratedDatabaseRecovery;
    public static DatabaseOptionKind DataRetention;
    public static DatabaseOptionKind Ledger;
}
internal class Microsoft.SqlServer.TransactSql.ScriptDom.DatabaseOptionKindHelper : OptionsHelper`1<DatabaseOptionKind> {
    internal static DatabaseOptionKindHelper Instance;
    private static DatabaseOptionKindHelper();
}
public enum Microsoft.SqlServer.TransactSql.ScriptDom.DataCompressionLevel : Enum {
    public int value__;
    public static DataCompressionLevel None;
    public static DataCompressionLevel Row;
    public static DataCompressionLevel Page;
    public static DataCompressionLevel ColumnStore;
    public static DataCompressionLevel ColumnStoreArchive;
}
internal class Microsoft.SqlServer.TransactSql.ScriptDom.DataCompressionLevelHelper : OptionsHelper`1<DataCompressionLevel> {
    public static DataCompressionLevelHelper Instance;
    private static DataCompressionLevelHelper();
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.DataCompressionOption : IndexOption {
    private DataCompressionLevel _compressionLevel;
    private List`1<CompressionPartitionRange> _partitionRanges;
    public DataCompressionLevel CompressionLevel { get; public set; }
    public IList`1<CompressionPartitionRange> PartitionRanges { get; }
    public DataCompressionLevel get_CompressionLevel();
    public void set_CompressionLevel(DataCompressionLevel value);
    public IList`1<CompressionPartitionRange> get_PartitionRanges();
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public abstract class Microsoft.SqlServer.TransactSql.ScriptDom.DataModificationSpecification : TSqlFragment {
    private TableReference _target;
    private TopRowFilter _topRowFilter;
    private OutputIntoClause _outputIntoClause;
    private OutputClause _outputClause;
    public TableReference Target { get; public set; }
    public TopRowFilter TopRowFilter { get; public set; }
    public OutputIntoClause OutputIntoClause { get; public set; }
    public OutputClause OutputClause { get; public set; }
    public TableReference get_Target();
    public void set_Target(TableReference value);
    public TopRowFilter get_TopRowFilter();
    public void set_TopRowFilter(TopRowFilter value);
    public OutputIntoClause get_OutputIntoClause();
    public void set_OutputIntoClause(OutputIntoClause value);
    public OutputClause get_OutputClause();
    public void set_OutputClause(OutputClause value);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public abstract class Microsoft.SqlServer.TransactSql.ScriptDom.DataModificationStatement : StatementWithCtesAndXmlNamespaces {
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.DataModificationTableReference : TableReferenceWithAliasAndColumns {
    private DataModificationSpecification _dataModificationSpecification;
    public DataModificationSpecification DataModificationSpecification { get; public set; }
    public DataModificationSpecification get_DataModificationSpecification();
    public void set_DataModificationSpecification(DataModificationSpecification value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.DataRetentionTableOption : TableOption {
    private OptionState _optionState;
    private string _filterColumn;
    private RetentionPeriodDefinition _retentionPeriod;
    public OptionState OptionState { get; public set; }
    public string FilterColumn { get; public set; }
    public RetentionPeriodDefinition RetentionPeriod { get; public set; }
    public OptionState get_OptionState();
    public void set_OptionState(OptionState value);
    public string get_FilterColumn();
    public void set_FilterColumn(string value);
    public RetentionPeriodDefinition get_RetentionPeriod();
    public void set_RetentionPeriod(RetentionPeriodDefinition value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public abstract class Microsoft.SqlServer.TransactSql.ScriptDom.DataTypeReference : TSqlFragment {
    private SchemaObjectName _name;
    public SchemaObjectName Name { get; public set; }
    public SchemaObjectName get_Name();
    public void set_Name(SchemaObjectName value);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.DataTypeSequenceOption : SequenceOption {
    private DataTypeReference _dataType;
    public DataTypeReference DataType { get; public set; }
    public DataTypeReference get_DataType();
    public void set_DataType(DataTypeReference value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public enum Microsoft.SqlServer.TransactSql.ScriptDom.DbccCommand : Enum {
    public int value__;
    public static DbccCommand None;
    public static DbccCommand ActiveCursors;
    public static DbccCommand AddExtendedProc;
    public static DbccCommand AddInstance;
    public static DbccCommand AuditEvent;
    public static DbccCommand AutoPilot;
    public static DbccCommand Buffer;
    public static DbccCommand Bytes;
    public static DbccCommand CacheProfile;
    public static DbccCommand CacheStats;
    public static DbccCommand CallFullText;
    public static DbccCommand CheckAlloc;
    public static DbccCommand CheckCatalog;
    public static DbccCommand CheckConstraints;
    public static DbccCommand CheckDB;
    public static DbccCommand CheckFileGroup;
    public static DbccCommand CheckIdent;
    public static DbccCommand CheckPrimaryFile;
    public static DbccCommand CheckTable;
    public static DbccCommand CleanTable;
    public static DbccCommand ClearSpaceCaches;
    public static DbccCommand CollectStats;
    public static DbccCommand ConcurrencyViolation;
    public static DbccCommand CursorStats;
    public static DbccCommand DBRecover;
    public static DbccCommand DBReindex;
    public static DbccCommand DBReindexAll;
    public static DbccCommand DBRepair;
    public static DbccCommand DebugBreak;
    public static DbccCommand DeleteInstance;
    public static DbccCommand DetachDB;
    public static DbccCommand DropCleanBuffers;
    public static DbccCommand DropExtendedProc;
    public static DbccCommand DumpConfig;
    public static DbccCommand DumpDBInfo;
    public static DbccCommand DumpDBTable;
    public static DbccCommand DumpLock;
    public static DbccCommand DumpLog;
    public static DbccCommand DumpPage;
    public static DbccCommand DumpResource;
    public static DbccCommand DumpTrigger;
    public static DbccCommand ErrorLog;
    public static DbccCommand ExtentInfo;
    public static DbccCommand FileHeader;
    public static DbccCommand FixAllocation;
    public static DbccCommand Flush;
    public static DbccCommand FlushProcInDB;
    public static DbccCommand ForceGhostCleanup;
    public static DbccCommand Free;
    public static DbccCommand FreeProcCache;
    public static DbccCommand FreeSessionCache;
    public static DbccCommand FreeSystemCache;
    public static DbccCommand FreezeIO;
    public static DbccCommand Help;
    public static DbccCommand IcecapQuery;
    public static DbccCommand IncrementInstance;
    public static DbccCommand Ind;
    public static DbccCommand IndexDefrag;
    public static DbccCommand InputBuffer;
    public static DbccCommand InvalidateTextptr;
    public static DbccCommand InvalidateTextptrObjid;
    public static DbccCommand Latch;
    public static DbccCommand LogInfo;
    public static DbccCommand MapAllocUnit;
    public static DbccCommand MemObjList;
    public static DbccCommand MemoryMap;
    public static DbccCommand MemoryStatus;
    public static DbccCommand Metadata;
    public static DbccCommand MovePage;
    public static DbccCommand NoTextptr;
    public static DbccCommand OpenTran;
    public static DbccCommand OptimizerWhatIf;
    public static DbccCommand OutputBuffer;
    public static DbccCommand PerfMonStats;
    public static DbccCommand PersistStackHash;
    public static DbccCommand PinTable;
    public static DbccCommand ProcCache;
    public static DbccCommand PrtiPage;
    public static DbccCommand ReadPage;
    public static DbccCommand RenameColumn;
    public static DbccCommand RuleOff;
    public static DbccCommand RuleOn;
    public static DbccCommand SeMetadata;
    public static DbccCommand SetCpuWeight;
    public static DbccCommand SetInstance;
    public static DbccCommand SetIOWeight;
    public static DbccCommand ShowStatistics;
    public static DbccCommand ShowContig;
    public static DbccCommand ShowDBAffinity;
    public static DbccCommand ShowFileStats;
    public static DbccCommand ShowOffRules;
    public static DbccCommand ShowOnRules;
    public static DbccCommand ShowTableAffinity;
    public static DbccCommand ShowText;
    public static DbccCommand ShowWeights;
    public static DbccCommand ShrinkDatabase;
    public static DbccCommand ShrinkFile;
    public static DbccCommand SqlMgrStats;
    public static DbccCommand SqlPerf;
    public static DbccCommand StackDump;
    public static DbccCommand Tec;
    public static DbccCommand ThawIO;
    public static DbccCommand ThrottleIO;
    public static DbccCommand TraceOff;
    public static DbccCommand TraceOn;
    public static DbccCommand TraceStatus;
    public static DbccCommand UnpinTable;
    public static DbccCommand UpdateUsage;
    public static DbccCommand UsePlan;
    public static DbccCommand UserOptions;
    public static DbccCommand WritePage;
}
internal class Microsoft.SqlServer.TransactSql.ScriptDom.DbccCommandsHelper : OptionsHelper`1<DbccCommand> {
    internal static DbccCommandsHelper Instance;
    private static DbccCommandsHelper();
}
internal class Microsoft.SqlServer.TransactSql.ScriptDom.DbccJoinOptionsHelper : OptionsHelper`1<DbccOptionKind> {
    internal static DbccJoinOptionsHelper Instance;
    private static DbccJoinOptionsHelper();
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.DbccNamedLiteral : TSqlFragment {
    private string _name;
    private ScalarExpression _value;
    public string Name { get; public set; }
    public ScalarExpression Value { get; public set; }
    public string get_Name();
    public void set_Name(string value);
    public ScalarExpression get_Value();
    public void set_Value(ScalarExpression value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.DbccOption : TSqlFragment {
    private DbccOptionKind _optionKind;
    public DbccOptionKind OptionKind { get; public set; }
    public DbccOptionKind get_OptionKind();
    public void set_OptionKind(DbccOptionKind value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public enum Microsoft.SqlServer.TransactSql.ScriptDom.DbccOptionKind : Enum {
    public int value__;
    public static DbccOptionKind AllErrorMessages;
    public static DbccOptionKind CountRows;
    public static DbccOptionKind NoInfoMessages;
    public static DbccOptionKind TableResults;
    public static DbccOptionKind TabLock;
    public static DbccOptionKind StatHeader;
    public static DbccOptionKind DensityVector;
    public static DbccOptionKind HistogramSteps;
    public static DbccOptionKind EstimateOnly;
    public static DbccOptionKind Fast;
    public static DbccOptionKind AllLevels;
    public static DbccOptionKind AllIndexes;
    public static DbccOptionKind PhysicalOnly;
    public static DbccOptionKind AllConstraints;
    public static DbccOptionKind StatsStream;
    public static DbccOptionKind Histogram;
    public static DbccOptionKind DataPurity;
    public static DbccOptionKind MarkInUseForRemoval;
    public static DbccOptionKind ExtendedLogicalChecks;
}
internal class Microsoft.SqlServer.TransactSql.ScriptDom.DbccOptionsHelper : OptionsHelper`1<DbccOptionKind> {
    internal static DbccOptionsHelper Instance;
    private static DbccOptionsHelper();
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.DbccStatement : TSqlStatement {
    private string _dllName;
    private DbccCommand _command;
    private bool _parenthesisRequired;
    private List`1<DbccNamedLiteral> _literals;
    private List`1<DbccOption> _options;
    private bool _optionsUseJoin;
    public string DllName { get; public set; }
    public DbccCommand Command { get; public set; }
    public bool ParenthesisRequired { get; public set; }
    public IList`1<DbccNamedLiteral> Literals { get; }
    public IList`1<DbccOption> Options { get; }
    public bool OptionsUseJoin { get; public set; }
    public string get_DllName();
    public void set_DllName(string value);
    public DbccCommand get_Command();
    public void set_Command(DbccCommand value);
    public bool get_ParenthesisRequired();
    public void set_ParenthesisRequired(bool value);
    public IList`1<DbccNamedLiteral> get_Literals();
    public IList`1<DbccOption> get_Options();
    public bool get_OptionsUseJoin();
    public void set_OptionsUseJoin(bool value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.DeallocateCursorStatement : CursorStatement {
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.DeclareCursorStatement : TSqlStatement {
    private Identifier _name;
    private CursorDefinition _cursorDefinition;
    public Identifier Name { get; public set; }
    public CursorDefinition CursorDefinition { get; public set; }
    public Identifier get_Name();
    public void set_Name(Identifier value);
    public CursorDefinition get_CursorDefinition();
    public void set_CursorDefinition(CursorDefinition value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.DeclareTableVariableBody : TSqlFragment {
    private Identifier _variableName;
    private bool _asDefined;
    private TableDefinition _definition;
    public Identifier VariableName { get; public set; }
    public bool AsDefined { get; public set; }
    public TableDefinition Definition { get; public set; }
    public Identifier get_VariableName();
    public void set_VariableName(Identifier value);
    public bool get_AsDefined();
    public void set_AsDefined(bool value);
    public TableDefinition get_Definition();
    public void set_Definition(TableDefinition value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.DeclareTableVariableStatement : TSqlStatement {
    private DeclareTableVariableBody _body;
    public DeclareTableVariableBody Body { get; public set; }
    public DeclareTableVariableBody get_Body();
    public void set_Body(DeclareTableVariableBody value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.DeclareVariableElement : TSqlFragment {
    private Identifier _variableName;
    private DataTypeReference _dataType;
    private NullableConstraintDefinition _nullable;
    private ScalarExpression _value;
    public Identifier VariableName { get; public set; }
    public DataTypeReference DataType { get; public set; }
    public NullableConstraintDefinition Nullable { get; public set; }
    public ScalarExpression Value { get; public set; }
    public Identifier get_VariableName();
    public void set_VariableName(Identifier value);
    public DataTypeReference get_DataType();
    public void set_DataType(DataTypeReference value);
    public NullableConstraintDefinition get_Nullable();
    public void set_Nullable(NullableConstraintDefinition value);
    public ScalarExpression get_Value();
    public void set_Value(ScalarExpression value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.DeclareVariableStatement : TSqlStatement {
    private List`1<DeclareVariableElement> _declarations;
    public IList`1<DeclareVariableElement> Declarations { get; }
    public IList`1<DeclareVariableElement> get_Declarations();
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.DefaultConstraintDefinition : ConstraintDefinition {
    private ScalarExpression _expression;
    private bool _withValues;
    private Identifier _column;
    public ScalarExpression Expression { get; public set; }
    public bool WithValues { get; public set; }
    public Identifier Column { get; public set; }
    public ScalarExpression get_Expression();
    public void set_Expression(ScalarExpression value);
    public bool get_WithValues();
    public void set_WithValues(bool value);
    public Identifier get_Column();
    public void set_Column(Identifier value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.DefaultLiteral : Literal {
    public LiteralType LiteralType { get; }
    public virtual LiteralType get_LiteralType();
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.DelayedDurabilityDatabaseOption : DatabaseOption {
    private DelayedDurabilityOptionKind _value;
    public DelayedDurabilityOptionKind Value { get; public set; }
    public DelayedDurabilityOptionKind get_Value();
    public void set_Value(DelayedDurabilityOptionKind value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public enum Microsoft.SqlServer.TransactSql.ScriptDom.DelayedDurabilityOptionKind : Enum {
    public int value__;
    public static DelayedDurabilityOptionKind Disabled;
    public static DelayedDurabilityOptionKind Allowed;
    public static DelayedDurabilityOptionKind Forced;
}
internal class Microsoft.SqlServer.TransactSql.ScriptDom.DelayedDurabilityOptionKindHelper : OptionsHelper`1<DelayedDurabilityOptionKind> {
    internal static DelayedDurabilityOptionKindHelper Instance;
    private static DelayedDurabilityOptionKindHelper();
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.DeleteMergeAction : MergeAction {
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.DeleteSpecification : UpdateDeleteSpecificationBase {
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.DeleteStatement : DataModificationStatement {
    private DeleteSpecification _deleteSpecification;
    public DeleteSpecification DeleteSpecification { get; public set; }
    public DeleteSpecification get_DeleteSpecification();
    public void set_DeleteSpecification(DeleteSpecification value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public enum Microsoft.SqlServer.TransactSql.ScriptDom.DeleteUpdateAction : Enum {
    public int value__;
    public static DeleteUpdateAction NotSpecified;
    public static DeleteUpdateAction Cascade;
    public static DeleteUpdateAction SetNull;
    public static DeleteUpdateAction SetDefault;
    public static DeleteUpdateAction NoAction;
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.DenyStatement : SecurityStatement {
    private bool _cascadeOption;
    public bool CascadeOption { get; public set; }
    public bool get_CascadeOption();
    public void set_CascadeOption(bool value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.DenyStatement80 : SecurityStatementBody80 {
    private bool _cascadeOption;
    public bool CascadeOption { get; public set; }
    public bool get_CascadeOption();
    public void set_CascadeOption(bool value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.DeviceInfo : TSqlFragment {
    private IdentifierOrValueExpression _logicalDevice;
    private ValueExpression _physicalDevice;
    private DeviceType _deviceType;
    public IdentifierOrValueExpression LogicalDevice { get; public set; }
    public ValueExpression PhysicalDevice { get; public set; }
    public DeviceType DeviceType { get; public set; }
    public IdentifierOrValueExpression get_LogicalDevice();
    public void set_LogicalDevice(IdentifierOrValueExpression value);
    public ValueExpression get_PhysicalDevice();
    public void set_PhysicalDevice(ValueExpression value);
    public DeviceType get_DeviceType();
    public void set_DeviceType(DeviceType value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public enum Microsoft.SqlServer.TransactSql.ScriptDom.DeviceType : Enum {
    public int value__;
    public static DeviceType None;
    public static DeviceType Disk;
    public static DeviceType Tape;
    public static DeviceType VirtualDevice;
    public static DeviceType DatabaseSnapshot;
}
internal class Microsoft.SqlServer.TransactSql.ScriptDom.DeviceTypesHelper : OptionsHelper`1<DeviceType> {
    internal static DeviceTypesHelper Instance;
    private static DeviceTypesHelper();
}
public abstract class Microsoft.SqlServer.TransactSql.ScriptDom.DialogOption : TSqlFragment {
    private DialogOptionKind _optionKind;
    public DialogOptionKind OptionKind { get; public set; }
    public DialogOptionKind get_OptionKind();
    public void set_OptionKind(DialogOptionKind value);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public enum Microsoft.SqlServer.TransactSql.ScriptDom.DialogOptionKind : Enum {
    public int value__;
    public static DialogOptionKind RelatedConversation;
    public static DialogOptionKind RelatedConversationGroup;
    public static DialogOptionKind Lifetime;
    public static DialogOptionKind Encryption;
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.DiskStatement : TSqlStatement {
    private DiskStatementType _diskStatementType;
    private List`1<DiskStatementOption> _options;
    public DiskStatementType DiskStatementType { get; public set; }
    public IList`1<DiskStatementOption> Options { get; }
    public DiskStatementType get_DiskStatementType();
    public void set_DiskStatementType(DiskStatementType value);
    public IList`1<DiskStatementOption> get_Options();
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.DiskStatementOption : TSqlFragment {
    private DiskStatementOptionKind _optionKind;
    private IdentifierOrValueExpression _value;
    public DiskStatementOptionKind OptionKind { get; public set; }
    public IdentifierOrValueExpression Value { get; public set; }
    public DiskStatementOptionKind get_OptionKind();
    public void set_OptionKind(DiskStatementOptionKind value);
    public IdentifierOrValueExpression get_Value();
    public void set_Value(IdentifierOrValueExpression value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public enum Microsoft.SqlServer.TransactSql.ScriptDom.DiskStatementOptionKind : Enum {
    public int value__;
    public static DiskStatementOptionKind Name;
    public static DiskStatementOptionKind PhysName;
    public static DiskStatementOptionKind VDevNo;
    public static DiskStatementOptionKind Size;
    public static DiskStatementOptionKind VStart;
}
internal class Microsoft.SqlServer.TransactSql.ScriptDom.DiskStatementOptionsHelper : OptionsHelper`1<DiskStatementOptionKind> {
    internal static DiskStatementOptionsHelper Instance;
    private static DiskStatementOptionsHelper();
}
public enum Microsoft.SqlServer.TransactSql.ScriptDom.DiskStatementType : Enum {
    public int value__;
    public static DiskStatementType Init;
    public static DiskStatementType Resize;
}
internal class Microsoft.SqlServer.TransactSql.ScriptDom.DoubleOptimizerHintHelper : OptionsHelper`1<OptimizerHintKind> {
    internal static DoubleOptimizerHintHelper Instance;
    private static DoubleOptimizerHintHelper();
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.DropAggregateStatement : DropObjectsStatement {
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.DropAlterFullTextIndexAction : AlterFullTextIndexAction {
    private List`1<Identifier> _columns;
    private bool _withNoPopulation;
    public IList`1<Identifier> Columns { get; }
    public bool WithNoPopulation { get; public set; }
    public IList`1<Identifier> get_Columns();
    public bool get_WithNoPopulation();
    public void set_WithNoPopulation(bool value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.DropApplicationRoleStatement : DropUnownedObjectStatement {
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.DropAssemblyStatement : DropObjectsStatement {
    private bool _withNoDependents;
    public bool WithNoDependents { get; public set; }
    public bool get_WithNoDependents();
    public void set_WithNoDependents(bool value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.DropAsymmetricKeyStatement : DropUnownedObjectStatement {
    private bool _removeProviderKey;
    public bool RemoveProviderKey { get; public set; }
    public bool get_RemoveProviderKey();
    public void set_RemoveProviderKey(bool value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.DropAvailabilityGroupStatement : DropUnownedObjectStatement {
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.DropBrokerPriorityStatement : DropUnownedObjectStatement {
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.DropCertificateStatement : DropUnownedObjectStatement {
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public abstract class Microsoft.SqlServer.TransactSql.ScriptDom.DropChildObjectsStatement : TSqlStatement {
    private List`1<ChildObjectName> _objects;
    public IList`1<ChildObjectName> Objects { get; }
    public IList`1<ChildObjectName> get_Objects();
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.DropClusteredConstraintMoveOption : DropClusteredConstraintOption {
    private FileGroupOrPartitionScheme _optionValue;
    public FileGroupOrPartitionScheme OptionValue { get; public set; }
    public FileGroupOrPartitionScheme get_OptionValue();
    public void set_OptionValue(FileGroupOrPartitionScheme value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public abstract class Microsoft.SqlServer.TransactSql.ScriptDom.DropClusteredConstraintOption : TSqlFragment {
    private DropClusteredConstraintOptionKind _optionKind;
    public DropClusteredConstraintOptionKind OptionKind { get; public set; }
    public DropClusteredConstraintOptionKind get_OptionKind();
    public void set_OptionKind(DropClusteredConstraintOptionKind value);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public enum Microsoft.SqlServer.TransactSql.ScriptDom.DropClusteredConstraintOptionKind : Enum {
    public int value__;
    public static DropClusteredConstraintOptionKind MaxDop;
    public static DropClusteredConstraintOptionKind Online;
    public static DropClusteredConstraintOptionKind MoveTo;
    public static DropClusteredConstraintOptionKind WaitAtLowPriority;
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.DropClusteredConstraintStateOption : DropClusteredConstraintOption {
    private OptionState _optionState;
    public OptionState OptionState { get; public set; }
    public OptionState get_OptionState();
    public void set_OptionState(OptionState value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.DropClusteredConstraintValueOption : DropClusteredConstraintOption {
    private Literal _optionValue;
    public Literal OptionValue { get; public set; }
    public Literal get_OptionValue();
    public void set_OptionValue(Literal value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.DropClusteredConstraintWaitAtLowPriorityLockOption : DropClusteredConstraintOption {
    private List`1<LowPriorityLockWaitOption> _options;
    public IList`1<LowPriorityLockWaitOption> Options { get; }
    public IList`1<LowPriorityLockWaitOption> get_Options();
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.DropColumnEncryptionKeyStatement : DropUnownedObjectStatement {
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.DropColumnMasterKeyStatement : DropUnownedObjectStatement {
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.DropContractStatement : DropUnownedObjectStatement {
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.DropCredentialStatement : DropUnownedObjectStatement {
    private bool _isDatabaseScoped;
    public bool IsDatabaseScoped { get; public set; }
    public bool get_IsDatabaseScoped();
    public void set_IsDatabaseScoped(bool value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.DropCryptographicProviderStatement : DropUnownedObjectStatement {
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.DropDatabaseAuditSpecificationStatement : DropUnownedObjectStatement {
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.DropDatabaseEncryptionKeyStatement : TSqlStatement {
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.DropDatabaseStatement : TSqlStatement {
    private List`1<Identifier> _databases;
    private bool _isIfExists;
    public IList`1<Identifier> Databases { get; }
    public bool IsIfExists { get; public set; }
    public IList`1<Identifier> get_Databases();
    public bool get_IsIfExists();
    public void set_IsIfExists(bool value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.DropDefaultStatement : DropObjectsStatement {
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.DropEndpointStatement : DropUnownedObjectStatement {
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.DropEventNotificationStatement : TSqlStatement {
    private List`1<Identifier> _notifications;
    private EventNotificationObjectScope _scope;
    public IList`1<Identifier> Notifications { get; }
    public EventNotificationObjectScope Scope { get; public set; }
    public IList`1<Identifier> get_Notifications();
    public EventNotificationObjectScope get_Scope();
    public void set_Scope(EventNotificationObjectScope value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.DropEventSessionStatement : DropUnownedObjectStatement {
    private EventSessionScope _sessionScope;
    public EventSessionScope SessionScope { get; public set; }
    public EventSessionScope get_SessionScope();
    public void set_SessionScope(EventSessionScope value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.DropExternalDataSourceStatement : DropUnownedObjectStatement {
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.DropExternalFileFormatStatement : DropUnownedObjectStatement {
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.DropExternalLanguageStatement : TSqlStatement {
    private Identifier _name;
    private Identifier _owner;
    public Identifier Name { get; public set; }
    public Identifier Owner { get; public set; }
    public Identifier get_Name();
    public void set_Name(Identifier value);
    public sealed virtual Identifier get_Owner();
    public sealed virtual void set_Owner(Identifier value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.DropExternalLibraryStatement : TSqlStatement {
    private Identifier _name;
    private Identifier _owner;
    public Identifier Name { get; public set; }
    public Identifier Owner { get; public set; }
    public Identifier get_Name();
    public void set_Name(Identifier value);
    public sealed virtual Identifier get_Owner();
    public sealed virtual void set_Owner(Identifier value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.DropExternalResourcePoolStatement : DropUnownedObjectStatement {
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.DropExternalStreamingJobStatement : DropUnownedObjectStatement {
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.DropExternalStreamStatement : DropUnownedObjectStatement {
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.DropExternalTableStatement : DropObjectsStatement {
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.DropFederationStatement : DropUnownedObjectStatement {
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.DropFullTextCatalogStatement : DropUnownedObjectStatement {
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.DropFullTextIndexStatement : TSqlStatement {
    private SchemaObjectName _tableName;
    public SchemaObjectName TableName { get; public set; }
    public SchemaObjectName get_TableName();
    public void set_TableName(SchemaObjectName value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.DropFullTextStopListStatement : DropUnownedObjectStatement {
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.DropFunctionStatement : DropObjectsStatement {
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.DropIndexClause : DropIndexClauseBase {
    private Identifier _index;
    private SchemaObjectName _object;
    private List`1<IndexOption> _options;
    public Identifier Index { get; public set; }
    public SchemaObjectName Object { get; public set; }
    public IList`1<IndexOption> Options { get; }
    public Identifier get_Index();
    public void set_Index(Identifier value);
    public SchemaObjectName get_Object();
    public void set_Object(SchemaObjectName value);
    public IList`1<IndexOption> get_Options();
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public abstract class Microsoft.SqlServer.TransactSql.ScriptDom.DropIndexClauseBase : TSqlFragment {
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.DropIndexStatement : TSqlStatement {
    private List`1<DropIndexClauseBase> _dropIndexClauses;
    private bool _isIfExists;
    public IList`1<DropIndexClauseBase> DropIndexClauses { get; }
    public bool IsIfExists { get; public set; }
    public IList`1<DropIndexClauseBase> get_DropIndexClauses();
    public bool get_IsIfExists();
    public void set_IsIfExists(bool value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.DropLoginStatement : DropUnownedObjectStatement {
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.DropMasterKeyStatement : TSqlStatement {
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.DropMemberAlterRoleAction : AlterRoleAction {
    private Identifier _member;
    public Identifier Member { get; public set; }
    public Identifier get_Member();
    public void set_Member(Identifier value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.DropMessageTypeStatement : DropUnownedObjectStatement {
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public abstract class Microsoft.SqlServer.TransactSql.ScriptDom.DropObjectsStatement : TSqlStatement {
    private List`1<SchemaObjectName> _objects;
    private bool _isIfExists;
    public IList`1<SchemaObjectName> Objects { get; }
    public bool IsIfExists { get; public set; }
    public IList`1<SchemaObjectName> get_Objects();
    public bool get_IsIfExists();
    public void set_IsIfExists(bool value);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.DropPartitionFunctionStatement : DropUnownedObjectStatement {
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.DropPartitionSchemeStatement : DropUnownedObjectStatement {
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.DropProcedureStatement : DropObjectsStatement {
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.DropQueueStatement : TSqlStatement {
    private SchemaObjectName _name;
    public SchemaObjectName Name { get; public set; }
    public SchemaObjectName get_Name();
    public void set_Name(SchemaObjectName value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.DropRemoteServiceBindingStatement : DropUnownedObjectStatement {
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.DropResourcePoolStatement : DropUnownedObjectStatement {
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.DropRoleStatement : DropUnownedObjectStatement {
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.DropRouteStatement : DropUnownedObjectStatement {
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.DropRuleStatement : DropObjectsStatement {
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public enum Microsoft.SqlServer.TransactSql.ScriptDom.DropSchemaBehavior : Enum {
    public int value__;
    public static DropSchemaBehavior None;
    public static DropSchemaBehavior Cascade;
    public static DropSchemaBehavior Restrict;
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.DropSchemaStatement : TSqlStatement {
    private SchemaObjectName _schema;
    private DropSchemaBehavior _dropBehavior;
    private bool _isIfExists;
    public SchemaObjectName Schema { get; public set; }
    public DropSchemaBehavior DropBehavior { get; public set; }
    public bool IsIfExists { get; public set; }
    public SchemaObjectName get_Schema();
    public void set_Schema(SchemaObjectName value);
    public DropSchemaBehavior get_DropBehavior();
    public void set_DropBehavior(DropSchemaBehavior value);
    public bool get_IsIfExists();
    public void set_IsIfExists(bool value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.DropSearchPropertyListAction : SearchPropertyListAction {
    private StringLiteral _propertyName;
    public StringLiteral PropertyName { get; public set; }
    public StringLiteral get_PropertyName();
    public void set_PropertyName(StringLiteral value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.DropSearchPropertyListStatement : DropUnownedObjectStatement {
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.DropSecurityPolicyStatement : DropObjectsStatement {
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.DropSensitivityClassificationStatement : SensitivityClassificationStatement {
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.DropSequenceStatement : DropObjectsStatement {
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.DropServerAuditSpecificationStatement : DropUnownedObjectStatement {
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.DropServerAuditStatement : DropUnownedObjectStatement {
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.DropServerRoleStatement : DropUnownedObjectStatement {
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.DropServiceStatement : DropUnownedObjectStatement {
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.DropSignatureStatement : SignatureStatementBase {
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.DropStatisticsStatement : DropChildObjectsStatement {
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.DropSymmetricKeyStatement : DropUnownedObjectStatement {
    private bool _removeProviderKey;
    public bool RemoveProviderKey { get; public set; }
    public bool get_RemoveProviderKey();
    public void set_RemoveProviderKey(bool value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.DropSynonymStatement : DropObjectsStatement {
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.DropTableStatement : DropObjectsStatement {
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.DropTriggerStatement : DropObjectsStatement {
    private TriggerScope _triggerScope;
    public TriggerScope TriggerScope { get; public set; }
    public TriggerScope get_TriggerScope();
    public void set_TriggerScope(TriggerScope value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.DropTypeStatement : TSqlStatement {
    private SchemaObjectName _name;
    private bool _isIfExists;
    public SchemaObjectName Name { get; public set; }
    public bool IsIfExists { get; public set; }
    public SchemaObjectName get_Name();
    public void set_Name(SchemaObjectName value);
    public bool get_IsIfExists();
    public void set_IsIfExists(bool value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public abstract class Microsoft.SqlServer.TransactSql.ScriptDom.DropUnownedObjectStatement : TSqlStatement {
    private Identifier _name;
    private bool _isIfExists;
    public Identifier Name { get; public set; }
    public bool IsIfExists { get; public set; }
    public Identifier get_Name();
    public void set_Name(Identifier value);
    public bool get_IsIfExists();
    public void set_IsIfExists(bool value);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.DropUserStatement : DropUnownedObjectStatement {
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.DropViewStatement : DropObjectsStatement {
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.DropWorkloadClassifierStatement : DropUnownedObjectStatement {
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.DropWorkloadGroupStatement : DropUnownedObjectStatement {
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.DropXmlSchemaCollectionStatement : TSqlStatement {
    private SchemaObjectName _name;
    public SchemaObjectName Name { get; public set; }
    public SchemaObjectName get_Name();
    public void set_Name(SchemaObjectName value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.DurabilityTableOption : TableOption {
    private DurabilityTableOptionKind _durabilityTableOptionKind;
    public DurabilityTableOptionKind DurabilityTableOptionKind { get; public set; }
    public DurabilityTableOptionKind get_DurabilityTableOptionKind();
    public void set_DurabilityTableOptionKind(DurabilityTableOptionKind value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
internal class Microsoft.SqlServer.TransactSql.ScriptDom.DurabilityTableOptionHelper : OptionsHelper`1<DurabilityTableOptionKind> {
    internal static DurabilityTableOptionHelper Instance;
    private static DurabilityTableOptionHelper();
}
public enum Microsoft.SqlServer.TransactSql.ScriptDom.DurabilityTableOptionKind : Enum {
    public int value__;
    public static DurabilityTableOptionKind SchemaOnly;
    public static DurabilityTableOptionKind SchemaAndData;
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.EnabledDisabledPayloadOption : PayloadOption {
    private bool _isEnabled;
    public bool IsEnabled { get; public set; }
    public bool get_IsEnabled();
    public void set_IsEnabled(bool value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public enum Microsoft.SqlServer.TransactSql.ScriptDom.EnableDisableOptionType : Enum {
    public int value__;
    public static EnableDisableOptionType None;
    public static EnableDisableOptionType Enable;
    public static EnableDisableOptionType Disable;
}
internal class Microsoft.SqlServer.TransactSql.ScriptDom.EnableDisableOptionTypeHelper : OptionsHelper`1<EnableDisableOptionType> {
    internal static EnableDisableOptionTypeHelper Instance;
    private static EnableDisableOptionTypeHelper();
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.EnableDisableTriggerStatement : TSqlStatement {
    private TriggerEnforcement _triggerEnforcement;
    private bool _all;
    private List`1<SchemaObjectName> _triggerNames;
    private TriggerObject _triggerObject;
    public TriggerEnforcement TriggerEnforcement { get; public set; }
    public bool All { get; public set; }
    public IList`1<SchemaObjectName> TriggerNames { get; }
    public TriggerObject TriggerObject { get; public set; }
    public TriggerEnforcement get_TriggerEnforcement();
    public void set_TriggerEnforcement(TriggerEnforcement value);
    public bool get_All();
    public void set_All(bool value);
    public IList`1<SchemaObjectName> get_TriggerNames();
    public TriggerObject get_TriggerObject();
    public void set_TriggerObject(TriggerObject value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.EncryptedValueParameter : ColumnEncryptionKeyValueParameter {
    private BinaryLiteral _value;
    public BinaryLiteral Value { get; public set; }
    public BinaryLiteral get_Value();
    public void set_Value(BinaryLiteral value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public enum Microsoft.SqlServer.TransactSql.ScriptDom.EncryptionAlgorithm : Enum {
    public int value__;
    public static EncryptionAlgorithm None;
    public static EncryptionAlgorithm RC2;
    public static EncryptionAlgorithm RC4;
    public static EncryptionAlgorithm RC4_128;
    public static EncryptionAlgorithm Des;
    public static EncryptionAlgorithm TripleDes;
    public static EncryptionAlgorithm DesX;
    public static EncryptionAlgorithm Aes128;
    public static EncryptionAlgorithm Aes192;
    public static EncryptionAlgorithm Aes256;
    public static EncryptionAlgorithm Rsa512;
    public static EncryptionAlgorithm Rsa1024;
    public static EncryptionAlgorithm Rsa2048;
    public static EncryptionAlgorithm TripleDes3Key;
    public static EncryptionAlgorithm Rsa3072;
    public static EncryptionAlgorithm Rsa4096;
}
public enum Microsoft.SqlServer.TransactSql.ScriptDom.EncryptionAlgorithmPreference : Enum {
    public int value__;
    public static EncryptionAlgorithmPreference NotSpecified;
    public static EncryptionAlgorithmPreference Aes;
    public static EncryptionAlgorithmPreference Rc4;
}
internal class Microsoft.SqlServer.TransactSql.ScriptDom.EncryptionAlgorithmsHelper : OptionsHelper`1<EncryptionAlgorithm> {
    internal static EncryptionAlgorithmsHelper Instance;
    private static EncryptionAlgorithmsHelper();
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.EncryptionPayloadOption : PayloadOption {
    private EndpointEncryptionSupport _encryptionSupport;
    private EncryptionAlgorithmPreference _algorithmPartOne;
    private EncryptionAlgorithmPreference _algorithmPartTwo;
    public EndpointEncryptionSupport EncryptionSupport { get; public set; }
    public EncryptionAlgorithmPreference AlgorithmPartOne { get; public set; }
    public EncryptionAlgorithmPreference AlgorithmPartTwo { get; public set; }
    public EndpointEncryptionSupport get_EncryptionSupport();
    public void set_EncryptionSupport(EndpointEncryptionSupport value);
    public EncryptionAlgorithmPreference get_AlgorithmPartOne();
    public void set_AlgorithmPartOne(EncryptionAlgorithmPreference value);
    public EncryptionAlgorithmPreference get_AlgorithmPartTwo();
    public void set_AlgorithmPartTwo(EncryptionAlgorithmPreference value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public abstract class Microsoft.SqlServer.TransactSql.ScriptDom.EncryptionSource : TSqlFragment {
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.EndConversationStatement : TSqlStatement {
    private ScalarExpression _conversation;
    private bool _withCleanup;
    private ValueExpression _errorCode;
    private ValueExpression _errorDescription;
    public ScalarExpression Conversation { get; public set; }
    public bool WithCleanup { get; public set; }
    public ValueExpression ErrorCode { get; public set; }
    public ValueExpression ErrorDescription { get; public set; }
    public ScalarExpression get_Conversation();
    public void set_Conversation(ScalarExpression value);
    public bool get_WithCleanup();
    public void set_WithCleanup(bool value);
    public ValueExpression get_ErrorCode();
    public void set_ErrorCode(ValueExpression value);
    public ValueExpression get_ErrorDescription();
    public void set_ErrorDescription(ValueExpression value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.EndpointAffinity : TSqlFragment {
    private AffinityKind _kind;
    private Literal _value;
    public AffinityKind Kind { get; public set; }
    public Literal Value { get; public set; }
    public AffinityKind get_Kind();
    public void set_Kind(AffinityKind value);
    public Literal get_Value();
    public void set_Value(Literal value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public enum Microsoft.SqlServer.TransactSql.ScriptDom.EndpointEncryptionSupport : Enum {
    public int value__;
    public static EndpointEncryptionSupport NotSpecified;
    public static EndpointEncryptionSupport Disabled;
    public static EndpointEncryptionSupport Supported;
    public static EndpointEncryptionSupport Required;
}
internal class Microsoft.SqlServer.TransactSql.ScriptDom.EndpointEncryptionSupportHelper : OptionsHelper`1<EndpointEncryptionSupport> {
    internal static EndpointEncryptionSupportHelper Instance;
    private static EndpointEncryptionSupportHelper();
}
public enum Microsoft.SqlServer.TransactSql.ScriptDom.EndpointProtocol : Enum {
    public int value__;
    public static EndpointProtocol None;
    public static EndpointProtocol Http;
    public static EndpointProtocol Tcp;
}
public abstract class Microsoft.SqlServer.TransactSql.ScriptDom.EndpointProtocolOption : TSqlFragment {
    private EndpointProtocolOptions _kind;
    public EndpointProtocolOptions Kind { get; public set; }
    public EndpointProtocolOptions get_Kind();
    public void set_Kind(EndpointProtocolOptions value);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
[FlagsAttribute]
public enum Microsoft.SqlServer.TransactSql.ScriptDom.EndpointProtocolOptions : Enum {
    public int value__;
    public static EndpointProtocolOptions None;
    public static EndpointProtocolOptions HttpAuthenticationRealm;
    public static EndpointProtocolOptions HttpAuthentication;
    public static EndpointProtocolOptions HttpClearPort;
    public static EndpointProtocolOptions HttpCompression;
    public static EndpointProtocolOptions HttpDefaultLogonDomain;
    public static EndpointProtocolOptions HttpPath;
    public static EndpointProtocolOptions HttpPorts;
    public static EndpointProtocolOptions HttpSite;
    public static EndpointProtocolOptions HttpSslPort;
    public static EndpointProtocolOptions HttpOptions;
    public static EndpointProtocolOptions TcpListenerIP;
    public static EndpointProtocolOptions TcpListenerPort;
    public static EndpointProtocolOptions TcpOptions;
}
internal class Microsoft.SqlServer.TransactSql.ScriptDom.EndpointProtocolOptionsHelper : OptionsHelper`1<EndpointProtocolOptions> {
    internal static EndpointProtocolOptionsHelper Instance;
    private static EndpointProtocolOptionsHelper();
}
internal class Microsoft.SqlServer.TransactSql.ScriptDom.EndpointProtocolsHelper : OptionsHelper`1<EndpointProtocol> {
    internal static EndpointProtocolsHelper Instance;
    private static EndpointProtocolsHelper();
}
public enum Microsoft.SqlServer.TransactSql.ScriptDom.EndpointState : Enum {
    public int value__;
    public static EndpointState NotSpecified;
    public static EndpointState Disabled;
    public static EndpointState Started;
    public static EndpointState Stopped;
}
internal class Microsoft.SqlServer.TransactSql.ScriptDom.EndpointStateHelper : OptionsHelper`1<EndpointState> {
    internal static EndpointStateHelper Instance;
    private static EndpointStateHelper();
}
public enum Microsoft.SqlServer.TransactSql.ScriptDom.EndpointType : Enum {
    public int value__;
    public static EndpointType NotSpecified;
    public static EndpointType Soap;
    public static EndpointType TSql;
    public static EndpointType ServiceBroker;
    public static EndpointType DatabaseMirroring;
}
internal class Microsoft.SqlServer.TransactSql.ScriptDom.EndpointTypesHelper : OptionsHelper`1<EndpointType> {
    internal static EndpointTypesHelper Instance;
    private static EndpointTypesHelper();
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.EventDeclaration : TSqlFragment {
    private EventSessionObjectName _objectName;
    private List`1<EventDeclarationSetParameter> _eventDeclarationSetParameters;
    private List`1<EventSessionObjectName> _eventDeclarationActionParameters;
    private BooleanExpression _eventDeclarationPredicateParameter;
    public EventSessionObjectName ObjectName { get; public set; }
    public IList`1<EventDeclarationSetParameter> EventDeclarationSetParameters { get; }
    public IList`1<EventSessionObjectName> EventDeclarationActionParameters { get; }
    public BooleanExpression EventDeclarationPredicateParameter { get; public set; }
    public EventSessionObjectName get_ObjectName();
    public void set_ObjectName(EventSessionObjectName value);
    public IList`1<EventDeclarationSetParameter> get_EventDeclarationSetParameters();
    public IList`1<EventSessionObjectName> get_EventDeclarationActionParameters();
    public BooleanExpression get_EventDeclarationPredicateParameter();
    public void set_EventDeclarationPredicateParameter(BooleanExpression value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.EventDeclarationCompareFunctionParameter : BooleanExpression {
    private EventSessionObjectName _name;
    private SourceDeclaration _sourceDeclaration;
    private ScalarExpression _eventValue;
    public EventSessionObjectName Name { get; public set; }
    public SourceDeclaration SourceDeclaration { get; public set; }
    public ScalarExpression EventValue { get; public set; }
    public EventSessionObjectName get_Name();
    public void set_Name(EventSessionObjectName value);
    public SourceDeclaration get_SourceDeclaration();
    public void set_SourceDeclaration(SourceDeclaration value);
    public ScalarExpression get_EventValue();
    public void set_EventValue(ScalarExpression value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.EventDeclarationSetParameter : TSqlFragment {
    private Identifier _eventField;
    private ScalarExpression _eventValue;
    public Identifier EventField { get; public set; }
    public ScalarExpression EventValue { get; public set; }
    public Identifier get_EventField();
    public void set_EventField(Identifier value);
    public ScalarExpression get_EventValue();
    public void set_EventValue(ScalarExpression value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.EventGroupContainer : EventTypeGroupContainer {
    private EventNotificationEventGroup _eventGroup;
    public EventNotificationEventGroup EventGroup { get; public set; }
    public EventNotificationEventGroup get_EventGroup();
    public void set_EventGroup(EventNotificationEventGroup value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public enum Microsoft.SqlServer.TransactSql.ScriptDom.EventNotificationEventGroup : Enum {
    public int value__;
    public static EventNotificationEventGroup Unknown;
    public static EventNotificationEventGroup DdlEvents;
    public static EventNotificationEventGroup DdlServerLevelEvents;
    public static EventNotificationEventGroup DdlEndpointEvents;
    public static EventNotificationEventGroup DdlDatabaseEvents;
    public static EventNotificationEventGroup DdlServerSecurityEvents;
    public static EventNotificationEventGroup DdlLoginEvents;
    public static EventNotificationEventGroup DdlGdrServerEvents;
    public static EventNotificationEventGroup DdlAuthorizationServerEvents;
    public static EventNotificationEventGroup DdlCredentialEvents;
    public static EventNotificationEventGroup DdlServiceMasterKeyEvents;
    public static EventNotificationEventGroup DdlExtendedProcedureEvents;
    public static EventNotificationEventGroup DdlLinkedServerEvents;
    public static EventNotificationEventGroup DdlLinkedServerLoginEvents;
    public static EventNotificationEventGroup DdlMessageEvents;
    public static EventNotificationEventGroup DdlRemoteServerEvents;
    public static EventNotificationEventGroup DdlDatabaseLevelEvents;
    public static EventNotificationEventGroup DdlTableViewEvents;
    public static EventNotificationEventGroup DdlTableEvents;
    public static EventNotificationEventGroup DdlViewEvents;
    public static EventNotificationEventGroup DdlIndexEvents;
    public static EventNotificationEventGroup DdlStatisticsEvents;
    public static EventNotificationEventGroup DdlSynonymEvents;
    public static EventNotificationEventGroup DdlFunctionEvents;
    public static EventNotificationEventGroup DdlProcedureEvents;
    public static EventNotificationEventGroup DdlTriggerEvents;
    public static EventNotificationEventGroup DdlEventNotificationEvents;
    public static EventNotificationEventGroup DdlAssemblyEvents;
    public static EventNotificationEventGroup DdlTypeEvents;
    public static EventNotificationEventGroup DdlDatabaseSecurityEvents;
    public static EventNotificationEventGroup DdlCertificateEvents;
    public static EventNotificationEventGroup DdlUserEvents;
    public static EventNotificationEventGroup DdlRoleEvents;
    public static EventNotificationEventGroup DdlApplicationRoleEvents;
    public static EventNotificationEventGroup DdlSchemaEvents;
    public static EventNotificationEventGroup DdlGdrDatabaseEvents;
    public static EventNotificationEventGroup DdlAuthorizationDatabaseEvents;
    public static EventNotificationEventGroup DdlSymmetricKeyEvents;
    public static EventNotificationEventGroup DdlAsymmetricKeyEvents;
    public static EventNotificationEventGroup DdlCryptoSignatureEvents;
    public static EventNotificationEventGroup DdlMasterKeyEvents;
    public static EventNotificationEventGroup DdlSsbEvents;
    public static EventNotificationEventGroup DdlMessageTypeEvents;
    public static EventNotificationEventGroup DdlContractEvents;
    public static EventNotificationEventGroup DdlQueueEvents;
    public static EventNotificationEventGroup DdlServiceEvents;
    public static EventNotificationEventGroup DdlRouteEvents;
    public static EventNotificationEventGroup DdlRemoteServiceBindingEvents;
    public static EventNotificationEventGroup DdlXmlSchemaCollectionEvents;
    public static EventNotificationEventGroup DdlPartitionEvents;
    public static EventNotificationEventGroup DdlPartitionFunctionEvents;
    public static EventNotificationEventGroup DdlPartitionSchemeEvents;
    public static EventNotificationEventGroup DdlDefaultEvents;
    public static EventNotificationEventGroup DdlExtendedPropertyEvents;
    public static EventNotificationEventGroup DdlFullTextCatalogEvents;
    public static EventNotificationEventGroup DdlPlanGuideEvents;
    public static EventNotificationEventGroup DdlRuleEvents;
    public static EventNotificationEventGroup DdlEventSessionEvents;
    public static EventNotificationEventGroup DdlResourceGovernorEvents;
    public static EventNotificationEventGroup DdlResourcePool;
    public static EventNotificationEventGroup DdlWorkloadGroup;
    public static EventNotificationEventGroup DdlCryptographicProviderEvents;
    public static EventNotificationEventGroup DdlDatabaseEncryptionKeyEvents;
    public static EventNotificationEventGroup DdlBrokerPriorityEvents;
    public static EventNotificationEventGroup DdlServerAuditEvents;
    public static EventNotificationEventGroup DdlServerAuditSpecificationEvents;
    public static EventNotificationEventGroup DdlDatabaseAuditSpecificationEvents;
    public static EventNotificationEventGroup DdlFullTextStopListEvents;
    public static EventNotificationEventGroup DdlSearchPropertyListEvents;
    public static EventNotificationEventGroup DdlSequenceEvents;
    public static EventNotificationEventGroup DdlAvailabilityGroupEvents;
    public static EventNotificationEventGroup DdlDatabaseAuditEvents;
    public static EventNotificationEventGroup DdlSecurityPolicyEvents;
    public static EventNotificationEventGroup DdlColumnMasterKeyEvents;
    public static EventNotificationEventGroup DdlColumnEncryptionKeyEvents;
    public static EventNotificationEventGroup DdlExternalResourcePoolEvents;
    public static EventNotificationEventGroup DdlExternalLibraryEvents;
    public static EventNotificationEventGroup DdlSensitivityEvents;
    public static EventNotificationEventGroup DdlExternalLanguageEvents;
    public static EventNotificationEventGroup TrcAllEvents;
    public static EventNotificationEventGroup TrcDatabase;
    public static EventNotificationEventGroup TrcErrorsAndWarnings;
    public static EventNotificationEventGroup TrcLocks;
    public static EventNotificationEventGroup TrcObjects;
    public static EventNotificationEventGroup TrcPerformance;
    public static EventNotificationEventGroup TrcSecurityAudit;
    public static EventNotificationEventGroup TrcServer;
    public static EventNotificationEventGroup TrcStoredProcedures;
    public static EventNotificationEventGroup TrcTSql;
    public static EventNotificationEventGroup TrcUserConfigurable;
    public static EventNotificationEventGroup TrcOledb;
    public static EventNotificationEventGroup TrcFullText;
    public static EventNotificationEventGroup TrcDeprecation;
    public static EventNotificationEventGroup TrcClr;
    public static EventNotificationEventGroup TrcQueryNotifications;
}
public enum Microsoft.SqlServer.TransactSql.ScriptDom.EventNotificationEventType : Enum {
    public int value__;
    public static EventNotificationEventType Unknown;
    public static EventNotificationEventType CreateTable;
    public static EventNotificationEventType AlterTable;
    public static EventNotificationEventType DropTable;
    public static EventNotificationEventType CreateIndex;
    public static EventNotificationEventType AlterIndex;
    public static EventNotificationEventType DropIndex;
    public static EventNotificationEventType CreateStatistics;
    public static EventNotificationEventType UpdateStatistics;
    public static EventNotificationEventType DropStatistics;
    public static EventNotificationEventType CreateSynonym;
    public static EventNotificationEventType DropSynonym;
    public static EventNotificationEventType CreateView;
    public static EventNotificationEventType AlterView;
    public static EventNotificationEventType DropView;
    public static EventNotificationEventType CreateProcedure;
    public static EventNotificationEventType AlterProcedure;
    public static EventNotificationEventType DropProcedure;
    public static EventNotificationEventType CreateFunction;
    public static EventNotificationEventType AlterFunction;
    public static EventNotificationEventType DropFunction;
    public static EventNotificationEventType CreateTrigger;
    public static EventNotificationEventType AlterTrigger;
    public static EventNotificationEventType DropTrigger;
    public static EventNotificationEventType CreateEventNotification;
    public static EventNotificationEventType DropEventNotification;
    public static EventNotificationEventType CreateType;
    public static EventNotificationEventType DropType;
    public static EventNotificationEventType CreateAssembly;
    public static EventNotificationEventType AlterAssembly;
    public static EventNotificationEventType DropAssembly;
    public static EventNotificationEventType CreateUser;
    public static EventNotificationEventType AlterUser;
    public static EventNotificationEventType DropUser;
    public static EventNotificationEventType CreateRole;
    public static EventNotificationEventType AlterRole;
    public static EventNotificationEventType DropRole;
    public static EventNotificationEventType CreateApplicationRole;
    public static EventNotificationEventType AlterApplicationRole;
    public static EventNotificationEventType DropApplicationRole;
    public static EventNotificationEventType CreateSchema;
    public static EventNotificationEventType AlterSchema;
    public static EventNotificationEventType DropSchema;
    public static EventNotificationEventType CreateLogin;
    public static EventNotificationEventType AlterLogin;
    public static EventNotificationEventType DropLogin;
    public static EventNotificationEventType CreateMessageType;
    public static EventNotificationEventType AlterMessageType;
    public static EventNotificationEventType DropMessageType;
    public static EventNotificationEventType CreateContract;
    public static EventNotificationEventType DropContract;
    public static EventNotificationEventType CreateQueue;
    public static EventNotificationEventType AlterQueue;
    public static EventNotificationEventType DropQueue;
    public static EventNotificationEventType BrokerQueueDisabled;
    public static EventNotificationEventType CreateService;
    public static EventNotificationEventType AlterService;
    public static EventNotificationEventType DropService;
    public static EventNotificationEventType CreateRoute;
    public static EventNotificationEventType AlterRoute;
    public static EventNotificationEventType DropRoute;
    public static EventNotificationEventType GrantServer;
    public static EventNotificationEventType DenyServer;
    public static EventNotificationEventType RevokeServer;
    public static EventNotificationEventType GrantDatabase;
    public static EventNotificationEventType DenyDatabase;
    public static EventNotificationEventType RevokeDatabase;
    public static EventNotificationEventType QueueActivation;
    public static EventNotificationEventType CreateRemoteServiceBinding;
    public static EventNotificationEventType AlterRemoteServiceBinding;
    public static EventNotificationEventType DropRemoteServiceBinding;
    public static EventNotificationEventType CreateXmlSchemaCollection;
    public static EventNotificationEventType AlterXmlSchemaCollection;
    public static EventNotificationEventType DropXmlSchemaCollection;
    public static EventNotificationEventType CreateEndpoint;
    public static EventNotificationEventType AlterEndpoint;
    public static EventNotificationEventType DropEndpoint;
    public static EventNotificationEventType CreatePartitionFunction;
    public static EventNotificationEventType AlterPartitionFunction;
    public static EventNotificationEventType DropPartitionFunction;
    public static EventNotificationEventType CreatePartitionScheme;
    public static EventNotificationEventType AlterPartitionScheme;
    public static EventNotificationEventType DropPartitionScheme;
    public static EventNotificationEventType CreateCertificate;
    public static EventNotificationEventType AlterCertificate;
    public static EventNotificationEventType DropCertificate;
    public static EventNotificationEventType CreateDatabase;
    public static EventNotificationEventType AlterDatabase;
    public static EventNotificationEventType DropDatabase;
    public static EventNotificationEventType AlterAuthorizationServer;
    public static EventNotificationEventType AlterAuthorizationDatabase;
    public static EventNotificationEventType CreateXmlIndex;
    public static EventNotificationEventType AddRoleMember;
    public static EventNotificationEventType DropRoleMember;
    public static EventNotificationEventType AddServerRoleMember;
    public static EventNotificationEventType DropServerRoleMember;
    public static EventNotificationEventType AlterExtendedProperty;
    public static EventNotificationEventType AlterFullTextCatalog;
    public static EventNotificationEventType AlterFullTextIndex;
    public static EventNotificationEventType AlterInstance;
    public static EventNotificationEventType AlterMessage;
    public static EventNotificationEventType AlterPlanGuide;
    public static EventNotificationEventType AlterRemoteServer;
    public static EventNotificationEventType BindDefault;
    public static EventNotificationEventType BindRule;
    public static EventNotificationEventType CreateDefault;
    public static EventNotificationEventType CreateExtendedProcedure;
    public static EventNotificationEventType CreateExtendedProperty;
    public static EventNotificationEventType CreateFullTextCatalog;
    public static EventNotificationEventType CreateFullTextIndex;
    public static EventNotificationEventType CreateLinkedServer;
    public static EventNotificationEventType CreateLinkedServerLogin;
    public static EventNotificationEventType CreateMessage;
    public static EventNotificationEventType CreatePlanGuide;
    public static EventNotificationEventType CreateRule;
    public static EventNotificationEventType CreateRemoteServer;
    public static EventNotificationEventType DropDefault;
    public static EventNotificationEventType DropExtendedProcedure;
    public static EventNotificationEventType DropExtendedProperty;
    public static EventNotificationEventType DropFullTextCatalog;
    public static EventNotificationEventType DropFullTextIndex;
    public static EventNotificationEventType DropLinkedServerLogin;
    public static EventNotificationEventType DropMessage;
    public static EventNotificationEventType DropPlanGuide;
    public static EventNotificationEventType DropRule;
    public static EventNotificationEventType DropRemoteServer;
    public static EventNotificationEventType Rename;
    public static EventNotificationEventType UnbindDefault;
    public static EventNotificationEventType UnbindRule;
    public static EventNotificationEventType CreateSymmetricKey;
    public static EventNotificationEventType AlterSymmetricKey;
    public static EventNotificationEventType DropSymmetricKey;
    public static EventNotificationEventType CreateAsymmetricKey;
    public static EventNotificationEventType AlterAsymmetricKey;
    public static EventNotificationEventType DropAsymmetricKey;
    public static EventNotificationEventType AlterServiceMasterKey;
    public static EventNotificationEventType CreateMasterKey;
    public static EventNotificationEventType AlterMasterKey;
    public static EventNotificationEventType DropMasterKey;
    public static EventNotificationEventType AddSignatureSchemaObject;
    public static EventNotificationEventType DropSignatureSchemaObject;
    public static EventNotificationEventType AddSignature;
    public static EventNotificationEventType DropSignature;
    public static EventNotificationEventType CreateCredential;
    public static EventNotificationEventType AlterCredential;
    public static EventNotificationEventType DropCredential;
    public static EventNotificationEventType DropLinkedServer;
    public static EventNotificationEventType AlterLinkedServer;
    public static EventNotificationEventType CreateEventSession;
    public static EventNotificationEventType AlterEventSession;
    public static EventNotificationEventType DropEventSession;
    public static EventNotificationEventType CreateResourcePool;
    public static EventNotificationEventType AlterResourcePool;
    public static EventNotificationEventType DropResourcePool;
    public static EventNotificationEventType CreateWorkloadGroup;
    public static EventNotificationEventType AlterWorkloadGroup;
    public static EventNotificationEventType DropWorkloadGroup;
    public static EventNotificationEventType AlterResourceGovernorConfig;
    public static EventNotificationEventType CreateSpatialIndex;
    public static EventNotificationEventType CreateCryptographicProvider;
    public static EventNotificationEventType AlterCryptographicProvider;
    public static EventNotificationEventType DropCryptographicProvider;
    public static EventNotificationEventType CreateDatabaseEncryptionKey;
    public static EventNotificationEventType AlterDatabaseEncryptionKey;
    public static EventNotificationEventType DropDatabaseEncryptionKey;
    public static EventNotificationEventType CreateBrokerPriority;
    public static EventNotificationEventType AlterBrokerPriority;
    public static EventNotificationEventType DropBrokerPriority;
    public static EventNotificationEventType CreateServerAudit;
    public static EventNotificationEventType AlterServerAudit;
    public static EventNotificationEventType DropServerAudit;
    public static EventNotificationEventType CreateServerAuditSpecification;
    public static EventNotificationEventType AlterServerAuditSpecification;
    public static EventNotificationEventType DropServerAuditSpecification;
    public static EventNotificationEventType CreateDatabaseAuditSpecification;
    public static EventNotificationEventType AlterDatabaseAuditSpecification;
    public static EventNotificationEventType DropDatabaseAuditSpecification;
    public static EventNotificationEventType CreateFullTextStopList;
    public static EventNotificationEventType AlterFullTextStopList;
    public static EventNotificationEventType DropFullTextStopList;
    public static EventNotificationEventType AlterServerConfiguration;
    public static EventNotificationEventType CreateSearchPropertyList;
    public static EventNotificationEventType AlterSearchPropertyList;
    public static EventNotificationEventType DropSearchPropertyList;
    public static EventNotificationEventType CreateServerRole;
    public static EventNotificationEventType AlterServerRole;
    public static EventNotificationEventType DropServerRole;
    public static EventNotificationEventType CreateSequence;
    public static EventNotificationEventType AlterSequence;
    public static EventNotificationEventType DropSequence;
    public static EventNotificationEventType CreateAvailabilityGroup;
    public static EventNotificationEventType AlterAvailabilityGroup;
    public static EventNotificationEventType DropAvailabilityGroup;
    public static EventNotificationEventType CreateDatabaseAudit;
    public static EventNotificationEventType DropDatabaseAudit;
    public static EventNotificationEventType AlterDatabaseAudit;
    public static EventNotificationEventType CreateSecurityPolicy;
    public static EventNotificationEventType AlterSecurityPolicy;
    public static EventNotificationEventType DropSecurityPolicy;
    public static EventNotificationEventType CreateColumnMasterKey;
    public static EventNotificationEventType DropColumnMasterKey;
    public static EventNotificationEventType CreateColumnEncryptionKey;
    public static EventNotificationEventType AlterColumnEncryptionKey;
    public static EventNotificationEventType DropColumnEncryptionKey;
    public static EventNotificationEventType AlterDatabaseScopedConfiguration;
    public static EventNotificationEventType CreateExternalResourcePool;
    public static EventNotificationEventType AlterExternalResourcePool;
    public static EventNotificationEventType DropExternalResourcePool;
    public static EventNotificationEventType CreateExternalLibrary;
    public static EventNotificationEventType AlterExternalLibrary;
    public static EventNotificationEventType DropExternalLibrary;
    public static EventNotificationEventType AddSensitivityClassification;
    public static EventNotificationEventType DropSensitivityClassification;
    public static EventNotificationEventType CreateExternalLanguage;
    public static EventNotificationEventType AlterExternalLanguage;
    public static EventNotificationEventType DropExternalLanguage;
    public static EventNotificationEventType AuditLogin;
    public static EventNotificationEventType AuditLogout;
    public static EventNotificationEventType AuditLoginFailed;
    public static EventNotificationEventType EventLog;
    public static EventNotificationEventType ErrorLog;
    public static EventNotificationEventType LockDeadlock;
    public static EventNotificationEventType Exception;
    public static EventNotificationEventType SpCacheMiss;
    public static EventNotificationEventType SpCacheInsert;
    public static EventNotificationEventType SpCacheRemove;
    public static EventNotificationEventType SpRecompile;
    public static EventNotificationEventType ObjectCreated;
    public static EventNotificationEventType ObjectDeleted;
    public static EventNotificationEventType HashWarning;
    public static EventNotificationEventType LockDeadlockChain;
    public static EventNotificationEventType LockEscalation;
    public static EventNotificationEventType OledbErrors;
    public static EventNotificationEventType ExecutionWarnings;
    public static EventNotificationEventType SortWarnings;
    public static EventNotificationEventType MissingColumnStatistics;
    public static EventNotificationEventType MissingJoinPredicate;
    public static EventNotificationEventType ServerMemoryChange;
    public static EventNotificationEventType UserConfigurable0;
    public static EventNotificationEventType UserConfigurable1;
    public static EventNotificationEventType UserConfigurable2;
    public static EventNotificationEventType UserConfigurable3;
    public static EventNotificationEventType UserConfigurable4;
    public static EventNotificationEventType UserConfigurable5;
    public static EventNotificationEventType UserConfigurable6;
    public static EventNotificationEventType UserConfigurable7;
    public static EventNotificationEventType UserConfigurable8;
    public static EventNotificationEventType UserConfigurable9;
    public static EventNotificationEventType DataFileAutoGrow;
    public static EventNotificationEventType LogFileAutoGrow;
    public static EventNotificationEventType DataFileAutoShrink;
    public static EventNotificationEventType LogFileAutoShrink;
    public static EventNotificationEventType AuditDatabaseScopeGdrEvent;
    public static EventNotificationEventType AuditSchemaObjectGdrEvent;
    public static EventNotificationEventType AuditAddLoginEvent;
    public static EventNotificationEventType AuditLoginGdrEvent;
    public static EventNotificationEventType AuditLoginChangePropertyEvent;
    public static EventNotificationEventType AuditLoginChangePasswordEvent;
    public static EventNotificationEventType AuditAddLoginToServerRoleEvent;
    public static EventNotificationEventType AuditAddDBUserEvent;
    public static EventNotificationEventType AuditAddMemberToDBRoleEvent;
    public static EventNotificationEventType AuditAddRoleEvent;
    public static EventNotificationEventType AuditAppRoleChangePasswordEvent;
    public static EventNotificationEventType AuditSchemaObjectAccessEvent;
    public static EventNotificationEventType AuditBackupRestoreEvent;
    public static EventNotificationEventType AuditDbccEvent;
    public static EventNotificationEventType AuditChangeAuditEvent;
    public static EventNotificationEventType OledbCallEvent;
    public static EventNotificationEventType OledbQueryInterfaceEvent;
    public static EventNotificationEventType OledbDataReadEvent;
    public static EventNotificationEventType ShowPlanXml;
    public static EventNotificationEventType DeprecationAnnouncement;
    public static EventNotificationEventType DeprecationFinalSupport;
    public static EventNotificationEventType ExchangeSpillEvent;
    public static EventNotificationEventType AuditDatabaseManagementEvent;
    public static EventNotificationEventType AuditDatabaseObjectManagementEvent;
    public static EventNotificationEventType AuditDatabasePrincipalManagementEvent;
    public static EventNotificationEventType AuditSchemaObjectManagementEvent;
    public static EventNotificationEventType AuditServerPrincipalImpersonationEvent;
    public static EventNotificationEventType AuditDatabasePrincipalImpersonationEvent;
    public static EventNotificationEventType AuditServerObjectTakeOwnershipEvent;
    public static EventNotificationEventType AuditDatabaseObjectTakeOwnershipEvent;
    public static EventNotificationEventType BlockedProcessReport;
    public static EventNotificationEventType ShowPlanXmlStatisticsProfile;
    public static EventNotificationEventType DeadlockGraph;
    public static EventNotificationEventType TraceFileClose;
    public static EventNotificationEventType AuditChangeDatabaseOwner;
    public static EventNotificationEventType AuditSchemaObjectTakeOwnershipEvent;
    public static EventNotificationEventType FtCrawlStarted;
    public static EventNotificationEventType FtCrawlStopped;
    public static EventNotificationEventType FtCrawlAborted;
    public static EventNotificationEventType UserErrorMessage;
    public static EventNotificationEventType ObjectAltered;
    public static EventNotificationEventType SqlStmtRecompile;
    public static EventNotificationEventType DatabaseMirroringStateChange;
    public static EventNotificationEventType ShowPlanXmlForQueryCompile;
    public static EventNotificationEventType ShowPlanAllForQueryCompile;
    public static EventNotificationEventType AuditServerScopeGdrEvent;
    public static EventNotificationEventType AuditServerObjectGdrEvent;
    public static EventNotificationEventType AuditDatabaseObjectGdrEvent;
    public static EventNotificationEventType AuditServerOperationEvent;
    public static EventNotificationEventType AuditServerAlterTraceEvent;
    public static EventNotificationEventType AuditServerObjectManagementEvent;
    public static EventNotificationEventType AuditServerPrincipalManagementEvent;
    public static EventNotificationEventType AuditDatabaseOperationEvent;
    public static EventNotificationEventType AuditDatabaseObjectAccessEvent;
    public static EventNotificationEventType OledbProviderInformation;
    public static EventNotificationEventType MountTape;
    public static EventNotificationEventType AssemblyLoad;
    public static EventNotificationEventType XQueryStaticType;
    public static EventNotificationEventType QnSubscription;
    public static EventNotificationEventType QnParameterTable;
    public static EventNotificationEventType QnTemplate;
    public static EventNotificationEventType QnDynamics;
    public static EventNotificationEventType BitmapWarning;
    public static EventNotificationEventType DatabaseSuspectDataPage;
    public static EventNotificationEventType CpuThresholdExceeded;
    public static EventNotificationEventType AuditFullText;
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.EventNotificationObjectScope : TSqlFragment {
    private EventNotificationTarget _target;
    private SchemaObjectName _queueName;
    public EventNotificationTarget Target { get; public set; }
    public SchemaObjectName QueueName { get; public set; }
    public EventNotificationTarget get_Target();
    public void set_Target(EventNotificationTarget value);
    public SchemaObjectName get_QueueName();
    public void set_QueueName(SchemaObjectName value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public enum Microsoft.SqlServer.TransactSql.ScriptDom.EventNotificationTarget : Enum {
    public int value__;
    public static EventNotificationTarget Unknown;
    public static EventNotificationTarget Server;
    public static EventNotificationTarget Database;
    public static EventNotificationTarget Queue;
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.EventRetentionSessionOption : SessionOption {
    private EventSessionEventRetentionModeType _value;
    public EventSessionEventRetentionModeType Value { get; public set; }
    public EventSessionEventRetentionModeType get_Value();
    public void set_Value(EventSessionEventRetentionModeType value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public enum Microsoft.SqlServer.TransactSql.ScriptDom.EventSessionEventRetentionModeType : Enum {
    public int value__;
    public static EventSessionEventRetentionModeType Unknown;
    public static EventSessionEventRetentionModeType AllowSingleEventLoss;
    public static EventSessionEventRetentionModeType AllowMultipleEventLoss;
    public static EventSessionEventRetentionModeType NoEventLoss;
}
internal class Microsoft.SqlServer.TransactSql.ScriptDom.EventSessionEventRetentionModeTypeHelper : OptionsHelper`1<EventSessionEventRetentionModeType> {
    internal static EventSessionEventRetentionModeTypeHelper Instance;
    private static EventSessionEventRetentionModeTypeHelper();
}
public enum Microsoft.SqlServer.TransactSql.ScriptDom.EventSessionMemoryPartitionModeType : Enum {
    public int value__;
    public static EventSessionMemoryPartitionModeType Unknown;
    public static EventSessionMemoryPartitionModeType None;
    public static EventSessionMemoryPartitionModeType PerNode;
    public static EventSessionMemoryPartitionModeType PerCpu;
}
internal class Microsoft.SqlServer.TransactSql.ScriptDom.EventSessionMemoryPartitionModeTypeHelper : OptionsHelper`1<EventSessionMemoryPartitionModeType> {
    internal static EventSessionMemoryPartitionModeTypeHelper Instance;
    private static EventSessionMemoryPartitionModeTypeHelper();
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.EventSessionObjectName : TSqlFragment {
    private MultiPartIdentifier _multiPartIdentifier;
    public MultiPartIdentifier MultiPartIdentifier { get; public set; }
    public MultiPartIdentifier get_MultiPartIdentifier();
    public void set_MultiPartIdentifier(MultiPartIdentifier value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public enum Microsoft.SqlServer.TransactSql.ScriptDom.EventSessionScope : Enum {
    public int value__;
    public static EventSessionScope Server;
    public static EventSessionScope Database;
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.EventSessionStatement : TSqlStatement {
    private Identifier _name;
    private EventSessionScope _sessionScope;
    private List`1<EventDeclaration> _eventDeclarations;
    private List`1<TargetDeclaration> _targetDeclarations;
    private List`1<SessionOption> _sessionOptions;
    public Identifier Name { get; public set; }
    public EventSessionScope SessionScope { get; public set; }
    public IList`1<EventDeclaration> EventDeclarations { get; }
    public IList`1<TargetDeclaration> TargetDeclarations { get; }
    public IList`1<SessionOption> SessionOptions { get; }
    public Identifier get_Name();
    public void set_Name(Identifier value);
    public EventSessionScope get_SessionScope();
    public void set_SessionScope(EventSessionScope value);
    public IList`1<EventDeclaration> get_EventDeclarations();
    public IList`1<TargetDeclaration> get_TargetDeclarations();
    public IList`1<SessionOption> get_SessionOptions();
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.EventTypeContainer : EventTypeGroupContainer {
    private EventNotificationEventType _eventType;
    public EventNotificationEventType EventType { get; public set; }
    public EventNotificationEventType get_EventType();
    public void set_EventType(EventNotificationEventType value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public abstract class Microsoft.SqlServer.TransactSql.ScriptDom.EventTypeGroupContainer : TSqlFragment {
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public abstract class Microsoft.SqlServer.TransactSql.ScriptDom.ExecutableEntity : TSqlFragment {
    private List`1<ExecuteParameter> _parameters;
    public IList`1<ExecuteParameter> Parameters { get; }
    public IList`1<ExecuteParameter> get_Parameters();
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.ExecutableProcedureReference : ExecutableEntity {
    private ProcedureReferenceName _procedureReference;
    private AdHocDataSource _adHocDataSource;
    public ProcedureReferenceName ProcedureReference { get; public set; }
    public AdHocDataSource AdHocDataSource { get; public set; }
    public ProcedureReferenceName get_ProcedureReference();
    public void set_ProcedureReference(ProcedureReferenceName value);
    public AdHocDataSource get_AdHocDataSource();
    public void set_AdHocDataSource(AdHocDataSource value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.ExecutableStringList : ExecutableEntity {
    private List`1<ValueExpression> _strings;
    public IList`1<ValueExpression> Strings { get; }
    public IList`1<ValueExpression> get_Strings();
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.ExecuteAsClause : TSqlFragment {
    private ExecuteAsOption _executeAsOption;
    private Literal _literal;
    public ExecuteAsOption ExecuteAsOption { get; public set; }
    public Literal Literal { get; public set; }
    public ExecuteAsOption get_ExecuteAsOption();
    public void set_ExecuteAsOption(ExecuteAsOption value);
    public Literal get_Literal();
    public void set_Literal(Literal value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.ExecuteAsFunctionOption : FunctionOption {
    private ExecuteAsClause _executeAs;
    public ExecuteAsClause ExecuteAs { get; public set; }
    public ExecuteAsClause get_ExecuteAs();
    public void set_ExecuteAs(ExecuteAsClause value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public enum Microsoft.SqlServer.TransactSql.ScriptDom.ExecuteAsOption : Enum {
    public int value__;
    public static ExecuteAsOption Caller;
    public static ExecuteAsOption Self;
    public static ExecuteAsOption Owner;
    public static ExecuteAsOption String;
    public static ExecuteAsOption Login;
    public static ExecuteAsOption User;
}
internal class Microsoft.SqlServer.TransactSql.ScriptDom.ExecuteAsOptionHelper : OptionsHelper`1<ExecuteAsOption> {
    internal static ExecuteAsOptionHelper Instance;
    private static ExecuteAsOptionHelper();
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.ExecuteAsProcedureOption : ProcedureOption {
    private ExecuteAsClause _executeAs;
    public ExecuteAsClause ExecuteAs { get; public set; }
    public ExecuteAsClause get_ExecuteAs();
    public void set_ExecuteAs(ExecuteAsClause value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.ExecuteAsStatement : TSqlStatement {
    private bool _withNoRevert;
    private VariableReference _cookie;
    private ExecuteContext _executeContext;
    public bool WithNoRevert { get; public set; }
    public VariableReference Cookie { get; public set; }
    public ExecuteContext ExecuteContext { get; public set; }
    public bool get_WithNoRevert();
    public void set_WithNoRevert(bool value);
    public VariableReference get_Cookie();
    public void set_Cookie(VariableReference value);
    public ExecuteContext get_ExecuteContext();
    public void set_ExecuteContext(ExecuteContext value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.ExecuteAsTriggerOption : TriggerOption {
    private ExecuteAsClause _executeAsClause;
    public ExecuteAsClause ExecuteAsClause { get; public set; }
    public ExecuteAsClause get_ExecuteAsClause();
    public void set_ExecuteAsClause(ExecuteAsClause value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.ExecuteContext : TSqlFragment {
    private ScalarExpression _principal;
    private ExecuteAsOption _kind;
    public ScalarExpression Principal { get; public set; }
    public ExecuteAsOption Kind { get; public set; }
    public ScalarExpression get_Principal();
    public void set_Principal(ScalarExpression value);
    public ExecuteAsOption get_Kind();
    public void set_Kind(ExecuteAsOption value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.ExecuteInsertSource : InsertSource {
    private ExecuteSpecification _execute;
    public ExecuteSpecification Execute { get; public set; }
    public ExecuteSpecification get_Execute();
    public void set_Execute(ExecuteSpecification value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.ExecuteOption : TSqlFragment {
    private ExecuteOptionKind _optionKind;
    public ExecuteOptionKind OptionKind { get; public set; }
    public ExecuteOptionKind get_OptionKind();
    public void set_OptionKind(ExecuteOptionKind value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public enum Microsoft.SqlServer.TransactSql.ScriptDom.ExecuteOptionKind : Enum {
    public int value__;
    public static ExecuteOptionKind Recompile;
    public static ExecuteOptionKind ResultSets;
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.ExecuteParameter : TSqlFragment {
    private VariableReference _variable;
    private ScalarExpression _parameterValue;
    private bool _isOutput;
    public VariableReference Variable { get; public set; }
    public ScalarExpression ParameterValue { get; public set; }
    public bool IsOutput { get; public set; }
    public VariableReference get_Variable();
    public void set_Variable(VariableReference value);
    public ScalarExpression get_ParameterValue();
    public void set_ParameterValue(ScalarExpression value);
    public bool get_IsOutput();
    public void set_IsOutput(bool value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.ExecuteSpecification : TSqlFragment {
    private VariableReference _variable;
    private Identifier _linkedServer;
    private ExecuteContext _executeContext;
    private ExecutableEntity _executableEntity;
    public VariableReference Variable { get; public set; }
    public Identifier LinkedServer { get; public set; }
    public ExecuteContext ExecuteContext { get; public set; }
    public ExecutableEntity ExecutableEntity { get; public set; }
    public VariableReference get_Variable();
    public void set_Variable(VariableReference value);
    public Identifier get_LinkedServer();
    public void set_LinkedServer(Identifier value);
    public ExecuteContext get_ExecuteContext();
    public void set_ExecuteContext(ExecuteContext value);
    public ExecutableEntity get_ExecutableEntity();
    public void set_ExecutableEntity(ExecutableEntity value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.ExecuteStatement : TSqlStatement {
    private ExecuteSpecification _executeSpecification;
    private List`1<ExecuteOption> _options;
    public ExecuteSpecification ExecuteSpecification { get; public set; }
    public IList`1<ExecuteOption> Options { get; }
    public ExecuteSpecification get_ExecuteSpecification();
    public void set_ExecuteSpecification(ExecuteSpecification value);
    public IList`1<ExecuteOption> get_Options();
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.ExistsPredicate : BooleanExpression {
    private ScalarSubquery _subquery;
    public ScalarSubquery Subquery { get; public set; }
    public ScalarSubquery get_Subquery();
    public void set_Subquery(ScalarSubquery value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.ExpressionCallTarget : CallTarget {
    private ScalarExpression _expression;
    public ScalarExpression Expression { get; public set; }
    public ScalarExpression get_Expression();
    public void set_Expression(ScalarExpression value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
[FlagsAttribute]
internal enum Microsoft.SqlServer.TransactSql.ScriptDom.ExpressionFlags : Enum {
    public int value__;
    public static ExpressionFlags None;
    public static ExpressionFlags ScalarSubqueriesDisallowed;
    public static ExpressionFlags MatchClauseAllowed;
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.ExpressionGroupingSpecification : GroupingSpecification {
    private ScalarExpression _expression;
    private bool _distributedAggregation;
    public ScalarExpression Expression { get; public set; }
    public bool DistributedAggregation { get; public set; }
    public ScalarExpression get_Expression();
    public void set_Expression(ScalarExpression value);
    public bool get_DistributedAggregation();
    public void set_DistributedAggregation(bool value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.ExpressionWithSortOrder : TSqlFragment {
    private SortOrder _sortOrder;
    private ScalarExpression _expression;
    public SortOrder SortOrder { get; public set; }
    public ScalarExpression Expression { get; public set; }
    public SortOrder get_SortOrder();
    public void set_SortOrder(SortOrder value);
    public ScalarExpression get_Expression();
    public void set_Expression(ScalarExpression value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.ExternalCreateLoginSource : CreateLoginSource {
    private List`1<PrincipalOption> _options;
    public IList`1<PrincipalOption> Options { get; }
    public IList`1<PrincipalOption> get_Options();
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.ExternalDataSourceLiteralOrIdentifierOption : ExternalDataSourceOption {
    private IdentifierOrValueExpression _value;
    public IdentifierOrValueExpression Value { get; public set; }
    public IdentifierOrValueExpression get_Value();
    public void set_Value(IdentifierOrValueExpression value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public abstract class Microsoft.SqlServer.TransactSql.ScriptDom.ExternalDataSourceOption : TSqlFragment {
    private ExternalDataSourceOptionKind _optionKind;
    public ExternalDataSourceOptionKind OptionKind { get; public set; }
    public ExternalDataSourceOptionKind get_OptionKind();
    public void set_OptionKind(ExternalDataSourceOptionKind value);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
internal class Microsoft.SqlServer.TransactSql.ScriptDom.ExternalDataSourceOptionHelper : OptionsHelper`1<ExternalDataSourceOptionKind> {
    internal static ExternalDataSourceOptionHelper Instance;
    private static ExternalDataSourceOptionHelper();
}
public enum Microsoft.SqlServer.TransactSql.ScriptDom.ExternalDataSourceOptionKind : Enum {
    public int value__;
    public static ExternalDataSourceOptionKind ResourceManagerLocation;
    public static ExternalDataSourceOptionKind Credential;
    public static ExternalDataSourceOptionKind DatabaseName;
    public static ExternalDataSourceOptionKind ShardMapName;
    public static ExternalDataSourceOptionKind ConnectionOptions;
}
public enum Microsoft.SqlServer.TransactSql.ScriptDom.ExternalDataSourcePushdownOption : Enum {
    public int value__;
    public static ExternalDataSourcePushdownOption ON;
    public static ExternalDataSourcePushdownOption OFF;
}
public abstract class Microsoft.SqlServer.TransactSql.ScriptDom.ExternalDataSourceStatement : TSqlStatement {
    private Identifier _name;
    private ExternalDataSourceType _dataSourceType;
    private Literal _location;
    private ExternalDataSourcePushdownOption _pushdownOption;
    private List`1<ExternalDataSourceOption> _externalDataSourceOptions;
    public Identifier Name { get; public set; }
    public ExternalDataSourceType DataSourceType { get; public set; }
    public Literal Location { get; public set; }
    public ExternalDataSourcePushdownOption PushdownOption { get; public set; }
    public IList`1<ExternalDataSourceOption> ExternalDataSourceOptions { get; }
    public Identifier get_Name();
    public void set_Name(Identifier value);
    public ExternalDataSourceType get_DataSourceType();
    public void set_DataSourceType(ExternalDataSourceType value);
    public Literal get_Location();
    public void set_Location(Literal value);
    public ExternalDataSourcePushdownOption get_PushdownOption();
    public void set_PushdownOption(ExternalDataSourcePushdownOption value);
    public IList`1<ExternalDataSourceOption> get_ExternalDataSourceOptions();
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public enum Microsoft.SqlServer.TransactSql.ScriptDom.ExternalDataSourceType : Enum {
    public int value__;
    public static ExternalDataSourceType HADOOP;
    public static ExternalDataSourceType RDBMS;
    public static ExternalDataSourceType SHARD_MAP_MANAGER;
    public static ExternalDataSourceType BLOB_STORAGE;
    public static ExternalDataSourceType EXTERNAL_GENERICS;
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.ExternalFileFormatContainerOption : ExternalFileFormatOption {
    private List`1<ExternalFileFormatOption> _suboptions;
    public IList`1<ExternalFileFormatOption> Suboptions { get; }
    public IList`1<ExternalFileFormatOption> get_Suboptions();
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.ExternalFileFormatLiteralOption : ExternalFileFormatOption {
    private Literal _value;
    public Literal Value { get; public set; }
    public Literal get_Value();
    public void set_Value(Literal value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public abstract class Microsoft.SqlServer.TransactSql.ScriptDom.ExternalFileFormatOption : TSqlFragment {
    private ExternalFileFormatOptionKind _optionKind;
    public ExternalFileFormatOptionKind OptionKind { get; public set; }
    public ExternalFileFormatOptionKind get_OptionKind();
    public void set_OptionKind(ExternalFileFormatOptionKind value);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
internal class Microsoft.SqlServer.TransactSql.ScriptDom.ExternalFileFormatOptionHelper : OptionsHelper`1<ExternalFileFormatOptionKind> {
    internal static ExternalFileFormatOptionHelper Instance;
    private static ExternalFileFormatOptionHelper();
}
public enum Microsoft.SqlServer.TransactSql.ScriptDom.ExternalFileFormatOptionKind : Enum {
    public int value__;
    public static ExternalFileFormatOptionKind SerDeMethod;
    public static ExternalFileFormatOptionKind FormatOptions;
    public static ExternalFileFormatOptionKind FieldTerminator;
    public static ExternalFileFormatOptionKind StringDelimiter;
    public static ExternalFileFormatOptionKind DateFormat;
    public static ExternalFileFormatOptionKind UseTypeDefault;
    public static ExternalFileFormatOptionKind DataCompression;
    public static ExternalFileFormatOptionKind FirstRow;
    public static ExternalFileFormatOptionKind Encoding;
}
public abstract class Microsoft.SqlServer.TransactSql.ScriptDom.ExternalFileFormatStatement : TSqlStatement {
    private Identifier _name;
    private ExternalFileFormatType _formatType;
    private List`1<ExternalFileFormatOption> _externalFileFormatOptions;
    public Identifier Name { get; public set; }
    public ExternalFileFormatType FormatType { get; public set; }
    public IList`1<ExternalFileFormatOption> ExternalFileFormatOptions { get; }
    public Identifier get_Name();
    public void set_Name(Identifier value);
    public ExternalFileFormatType get_FormatType();
    public void set_FormatType(ExternalFileFormatType value);
    public IList`1<ExternalFileFormatOption> get_ExternalFileFormatOptions();
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public enum Microsoft.SqlServer.TransactSql.ScriptDom.ExternalFileFormatType : Enum {
    public int value__;
    public static ExternalFileFormatType DelimitedText;
    public static ExternalFileFormatType RcFile;
    public static ExternalFileFormatType Orc;
    public static ExternalFileFormatType Parquet;
    public static ExternalFileFormatType JSON;
}
public enum Microsoft.SqlServer.TransactSql.ScriptDom.ExternalFileFormatUseDefaultType : Enum {
    public int value__;
    public static ExternalFileFormatUseDefaultType False;
    public static ExternalFileFormatUseDefaultType True;
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.ExternalFileFormatUseDefaultTypeOption : ExternalFileFormatOption {
    private ExternalFileFormatUseDefaultType _externalFileFormatUseDefaultType;
    public ExternalFileFormatUseDefaultType ExternalFileFormatUseDefaultType { get; public set; }
    public ExternalFileFormatUseDefaultType get_ExternalFileFormatUseDefaultType();
    public void set_ExternalFileFormatUseDefaultType(ExternalFileFormatUseDefaultType value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.ExternalFileOption : object {
    [CompilerGeneratedAttribute]
private static Func`2<char, bool> CS$<>9__CachedAnonymousMethodDelegate1;
    public static void CheckXMLValidity(StringLiteral sequence, string option);
    public static void CheckXMLValidity(string sequence, string option);
    public static void CheckDelimiterValidity(string sequence, string option);
    [CompilerGeneratedAttribute]
private static bool <CheckXMLValidity>b__0(char c);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.ExternalLanguageFileOption : TSqlFragment {
    private ScalarExpression _content;
    private StringLiteral _fileName;
    private StringLiteral _path;
    private Identifier _platform;
    private StringLiteral _parameters;
    private StringLiteral _environmentVariables;
    public ScalarExpression Content { get; public set; }
    public StringLiteral FileName { get; public set; }
    public StringLiteral Path { get; public set; }
    public Identifier Platform { get; public set; }
    public StringLiteral Parameters { get; public set; }
    public StringLiteral EnvironmentVariables { get; public set; }
    public ScalarExpression get_Content();
    public void set_Content(ScalarExpression value);
    public StringLiteral get_FileName();
    public void set_FileName(StringLiteral value);
    public StringLiteral get_Path();
    public void set_Path(StringLiteral value);
    public Identifier get_Platform();
    public void set_Platform(Identifier value);
    public StringLiteral get_Parameters();
    public void set_Parameters(StringLiteral value);
    public StringLiteral get_EnvironmentVariables();
    public void set_EnvironmentVariables(StringLiteral value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public abstract class Microsoft.SqlServer.TransactSql.ScriptDom.ExternalLanguageStatement : TSqlStatement {
    private Identifier _name;
    private List`1<ExternalLanguageFileOption> _externalLanguageFiles;
    public Identifier Name { get; public set; }
    public IList`1<ExternalLanguageFileOption> ExternalLanguageFiles { get; }
    public Identifier get_Name();
    public void set_Name(Identifier value);
    public IList`1<ExternalLanguageFileOption> get_ExternalLanguageFiles();
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.ExternalLibraryFileOption : TSqlFragment {
    private ScalarExpression _content;
    private StringLiteral _path;
    private Identifier _platform;
    public ScalarExpression Content { get; public set; }
    public StringLiteral Path { get; public set; }
    public Identifier Platform { get; public set; }
    public ScalarExpression get_Content();
    public void set_Content(ScalarExpression value);
    public StringLiteral get_Path();
    public void set_Path(StringLiteral value);
    public Identifier get_Platform();
    public void set_Platform(Identifier value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public abstract class Microsoft.SqlServer.TransactSql.ScriptDom.ExternalLibraryStatement : TSqlStatement {
    private Identifier _name;
    private StringLiteral _language;
    private List`1<ExternalLibraryFileOption> _externalLibraryFiles;
    public Identifier Name { get; public set; }
    public StringLiteral Language { get; public set; }
    public IList`1<ExternalLibraryFileOption> ExternalLibraryFiles { get; }
    public Identifier get_Name();
    public void set_Name(Identifier value);
    public StringLiteral get_Language();
    public void set_Language(StringLiteral value);
    public IList`1<ExternalLibraryFileOption> get_ExternalLibraryFiles();
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
internal class Microsoft.SqlServer.TransactSql.ScriptDom.ExternalResourcePoolAffinityHelper : OptionsHelper`1<ExternalResourcePoolAffinityType> {
    internal static ExternalResourcePoolAffinityHelper Instance;
    private static ExternalResourcePoolAffinityHelper();
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.ExternalResourcePoolAffinitySpecification : TSqlFragment {
    private ExternalResourcePoolAffinityType _affinityType;
    private Literal _parameterValue;
    private bool _isAuto;
    private List`1<LiteralRange> _poolAffinityRanges;
    public ExternalResourcePoolAffinityType AffinityType { get; public set; }
    public Literal ParameterValue { get; public set; }
    public bool IsAuto { get; public set; }
    public IList`1<LiteralRange> PoolAffinityRanges { get; }
    public ExternalResourcePoolAffinityType get_AffinityType();
    public void set_AffinityType(ExternalResourcePoolAffinityType value);
    public Literal get_ParameterValue();
    public void set_ParameterValue(Literal value);
    public bool get_IsAuto();
    public void set_IsAuto(bool value);
    public IList`1<LiteralRange> get_PoolAffinityRanges();
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public enum Microsoft.SqlServer.TransactSql.ScriptDom.ExternalResourcePoolAffinityType : Enum {
    public int value__;
    public static ExternalResourcePoolAffinityType None;
    public static ExternalResourcePoolAffinityType Cpu;
    public static ExternalResourcePoolAffinityType NumaNode;
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.ExternalResourcePoolParameter : TSqlFragment {
    private ExternalResourcePoolParameterType _parameterType;
    private Literal _parameterValue;
    private ExternalResourcePoolAffinitySpecification _affinitySpecification;
    public ExternalResourcePoolParameterType ParameterType { get; public set; }
    public Literal ParameterValue { get; public set; }
    public ExternalResourcePoolAffinitySpecification AffinitySpecification { get; public set; }
    public ExternalResourcePoolParameterType get_ParameterType();
    public void set_ParameterType(ExternalResourcePoolParameterType value);
    public Literal get_ParameterValue();
    public void set_ParameterValue(Literal value);
    public ExternalResourcePoolAffinitySpecification get_AffinitySpecification();
    public void set_AffinitySpecification(ExternalResourcePoolAffinitySpecification value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
internal class Microsoft.SqlServer.TransactSql.ScriptDom.ExternalResourcePoolParameterHelper : OptionsHelper`1<ExternalResourcePoolParameterType> {
    internal static ExternalResourcePoolParameterHelper Instance;
    private static ExternalResourcePoolParameterHelper();
}
public enum Microsoft.SqlServer.TransactSql.ScriptDom.ExternalResourcePoolParameterType : Enum {
    public int value__;
    public static ExternalResourcePoolParameterType Unknown;
    public static ExternalResourcePoolParameterType MaxCpuPercent;
    public static ExternalResourcePoolParameterType MaxMemoryPercent;
    public static ExternalResourcePoolParameterType MaxProcesses;
    public static ExternalResourcePoolParameterType Affinity;
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.ExternalResourcePoolStatement : TSqlStatement {
    private Identifier _name;
    private List`1<ExternalResourcePoolParameter> _externalResourcePoolParameters;
    public Identifier Name { get; public set; }
    public IList`1<ExternalResourcePoolParameter> ExternalResourcePoolParameters { get; }
    public Identifier get_Name();
    public void set_Name(Identifier value);
    public IList`1<ExternalResourcePoolParameter> get_ExternalResourcePoolParameters();
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public abstract class Microsoft.SqlServer.TransactSql.ScriptDom.ExternalStreamingJobStatement : TSqlStatement {
    private StringLiteral _name;
    private StringLiteral _statement;
    public StringLiteral Name { get; public set; }
    public StringLiteral Statement { get; public set; }
    public StringLiteral get_Name();
    public void set_Name(StringLiteral value);
    public StringLiteral get_Statement();
    public void set_Statement(StringLiteral value);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.ExternalStreamLiteralOrIdentifierOption : ExternalStreamOption {
    private IdentifierOrValueExpression _value;
    public IdentifierOrValueExpression Value { get; public set; }
    public IdentifierOrValueExpression get_Value();
    public void set_Value(IdentifierOrValueExpression value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public abstract class Microsoft.SqlServer.TransactSql.ScriptDom.ExternalStreamOption : TSqlFragment {
    private ExternalStreamOptionKind _optionKind;
    public ExternalStreamOptionKind OptionKind { get; public set; }
    public ExternalStreamOptionKind get_OptionKind();
    public void set_OptionKind(ExternalStreamOptionKind value);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
internal class Microsoft.SqlServer.TransactSql.ScriptDom.ExternalStreamOptionHelper : OptionsHelper`1<ExternalStreamOptionKind> {
    internal static ExternalStreamOptionHelper Instance;
    private static ExternalStreamOptionHelper();
}
public enum Microsoft.SqlServer.TransactSql.ScriptDom.ExternalStreamOptionKind : Enum {
    public int value__;
    public static ExternalStreamOptionKind DataSource;
    public static ExternalStreamOptionKind FileFormat;
}
public abstract class Microsoft.SqlServer.TransactSql.ScriptDom.ExternalStreamStatement : TSqlStatement {
    private Identifier _name;
    private Literal _location;
    private Literal _inputOptions;
    private Literal _outputOptions;
    private List`1<ExternalStreamOption> _externalStreamOptions;
    public Identifier Name { get; public set; }
    public Literal Location { get; public set; }
    public Literal InputOptions { get; public set; }
    public Literal OutputOptions { get; public set; }
    public IList`1<ExternalStreamOption> ExternalStreamOptions { get; }
    public Identifier get_Name();
    public void set_Name(Identifier value);
    public Literal get_Location();
    public void set_Location(Literal value);
    public Literal get_InputOptions();
    public void set_InputOptions(Literal value);
    public Literal get_OutputOptions();
    public void set_OutputOptions(Literal value);
    public IList`1<ExternalStreamOption> get_ExternalStreamOptions();
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.ExternalTableColumnDefinition : TSqlFragment {
    private ColumnDefinitionBase _columnDefinition;
    private NullableConstraintDefinition _nullableConstraint;
    public ColumnDefinitionBase ColumnDefinition { get; public set; }
    public NullableConstraintDefinition NullableConstraint { get; public set; }
    public ColumnDefinitionBase get_ColumnDefinition();
    public void set_ColumnDefinition(ColumnDefinitionBase value);
    public NullableConstraintDefinition get_NullableConstraint();
    public void set_NullableConstraint(NullableConstraintDefinition value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.ExternalTableDistributionOption : ExternalTableOption {
    private ExternalTableDistributionPolicy _value;
    public ExternalTableDistributionPolicy Value { get; public set; }
    public ExternalTableDistributionPolicy get_Value();
    public void set_Value(ExternalTableDistributionPolicy value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public abstract class Microsoft.SqlServer.TransactSql.ScriptDom.ExternalTableDistributionPolicy : TSqlFragment {
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.ExternalTableLiteralOrIdentifierOption : ExternalTableOption {
    private IdentifierOrValueExpression _value;
    public IdentifierOrValueExpression Value { get; public set; }
    public IdentifierOrValueExpression get_Value();
    public void set_Value(IdentifierOrValueExpression value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public abstract class Microsoft.SqlServer.TransactSql.ScriptDom.ExternalTableOption : TSqlFragment {
    private ExternalTableOptionKind _optionKind;
    public ExternalTableOptionKind OptionKind { get; public set; }
    public ExternalTableOptionKind get_OptionKind();
    public void set_OptionKind(ExternalTableOptionKind value);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
internal class Microsoft.SqlServer.TransactSql.ScriptDom.ExternalTableOptionHelper : OptionsHelper`1<ExternalTableOptionKind> {
    internal static ExternalTableOptionHelper Instance;
    private static ExternalTableOptionHelper();
}
public enum Microsoft.SqlServer.TransactSql.ScriptDom.ExternalTableOptionKind : Enum {
    public int value__;
    public static ExternalTableOptionKind Distribution;
    public static ExternalTableOptionKind FileFormat;
    public static ExternalTableOptionKind Location;
    public static ExternalTableOptionKind RejectSampleValue;
    public static ExternalTableOptionKind RejectType;
    public static ExternalTableOptionKind RejectValue;
    public static ExternalTableOptionKind SchemaName;
    public static ExternalTableOptionKind ObjectName;
    public static ExternalTableOptionKind RejectedRowLocation;
}
public enum Microsoft.SqlServer.TransactSql.ScriptDom.ExternalTableRejectType : Enum {
    public int value__;
    public static ExternalTableRejectType Value;
    public static ExternalTableRejectType Percentage;
}
internal class Microsoft.SqlServer.TransactSql.ScriptDom.ExternalTableRejectTypeHelper : OptionsHelper`1<ExternalTableRejectType> {
    internal static ExternalTableRejectTypeHelper Instance;
    private static ExternalTableRejectTypeHelper();
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.ExternalTableRejectTypeOption : ExternalTableOption {
    private ExternalTableRejectType _value;
    public ExternalTableRejectType Value { get; public set; }
    public ExternalTableRejectType get_Value();
    public void set_Value(ExternalTableRejectType value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.ExternalTableReplicatedDistributionPolicy : ExternalTableDistributionPolicy {
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.ExternalTableRoundRobinDistributionPolicy : ExternalTableDistributionPolicy {
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.ExternalTableShardedDistributionPolicy : ExternalTableDistributionPolicy {
    private Identifier _shardingColumn;
    public Identifier ShardingColumn { get; public set; }
    public Identifier get_ShardingColumn();
    public void set_ShardingColumn(Identifier value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public abstract class Microsoft.SqlServer.TransactSql.ScriptDom.ExternalTableStatement : TSqlStatement {
    private SchemaObjectName _schemaObjectName;
    private List`1<ExternalTableColumnDefinition> _columnDefinitions;
    private Identifier _dataSource;
    private List`1<ExternalTableOption> _externalTableOptions;
    private SelectStatement _selectStatement;
    public SchemaObjectName SchemaObjectName { get; public set; }
    public IList`1<ExternalTableColumnDefinition> ColumnDefinitions { get; }
    public Identifier DataSource { get; public set; }
    public IList`1<ExternalTableOption> ExternalTableOptions { get; }
    public SelectStatement SelectStatement { get; public set; }
    public SchemaObjectName get_SchemaObjectName();
    public void set_SchemaObjectName(SchemaObjectName value);
    public IList`1<ExternalTableColumnDefinition> get_ColumnDefinitions();
    public Identifier get_DataSource();
    public void set_DataSource(Identifier value);
    public IList`1<ExternalTableOption> get_ExternalTableOptions();
    public SelectStatement get_SelectStatement();
    public void set_SelectStatement(SelectStatement value);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.ExtractFromExpression : ScalarExpression {
    private ScalarExpression _expression;
    private Identifier _extractedElement;
    public ScalarExpression Expression { get; public set; }
    public Identifier ExtractedElement { get; public set; }
    public ScalarExpression get_Expression();
    public void set_Expression(ScalarExpression value);
    public Identifier get_ExtractedElement();
    public void set_ExtractedElement(Identifier value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public enum Microsoft.SqlServer.TransactSql.ScriptDom.FailoverActionOptionKind : Enum {
    public int value__;
    public static FailoverActionOptionKind Target;
}
public enum Microsoft.SqlServer.TransactSql.ScriptDom.FailoverModeOptionKind : Enum {
    public int value__;
    public static FailoverModeOptionKind Automatic;
    public static FailoverModeOptionKind Manual;
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.FailoverModeReplicaOption : AvailabilityReplicaOption {
    private FailoverModeOptionKind _value;
    public FailoverModeOptionKind Value { get; public set; }
    public FailoverModeOptionKind get_Value();
    public void set_Value(FailoverModeOptionKind value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.FederationScheme : TSqlFragment {
    private Identifier _distributionName;
    private Identifier _columnName;
    public Identifier DistributionName { get; public set; }
    public Identifier ColumnName { get; public set; }
    public Identifier get_DistributionName();
    public void set_DistributionName(Identifier value);
    public Identifier get_ColumnName();
    public void set_ColumnName(Identifier value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.FetchCursorStatement : CursorStatement {
    private FetchType _fetchType;
    private List`1<VariableReference> _intoVariables;
    public FetchType FetchType { get; public set; }
    public IList`1<VariableReference> IntoVariables { get; }
    public FetchType get_FetchType();
    public void set_FetchType(FetchType value);
    public IList`1<VariableReference> get_IntoVariables();
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public enum Microsoft.SqlServer.TransactSql.ScriptDom.FetchOrientation : Enum {
    public int value__;
    public static FetchOrientation None;
    public static FetchOrientation First;
    public static FetchOrientation Next;
    public static FetchOrientation Prior;
    public static FetchOrientation Last;
    public static FetchOrientation Relative;
    public static FetchOrientation Absolute;
}
internal class Microsoft.SqlServer.TransactSql.ScriptDom.FetchOrientationHelper : OptionsHelper`1<FetchOrientation> {
    internal static FetchOrientationHelper Instance;
    private static FetchOrientationHelper();
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.FetchType : TSqlFragment {
    private FetchOrientation _orientation;
    private ScalarExpression _rowOffset;
    public FetchOrientation Orientation { get; public set; }
    public ScalarExpression RowOffset { get; public set; }
    public FetchOrientation get_Orientation();
    public void set_Orientation(FetchOrientation value);
    public ScalarExpression get_RowOffset();
    public void set_RowOffset(ScalarExpression value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.FileDeclaration : TSqlFragment {
    private List`1<FileDeclarationOption> _options;
    private bool _isPrimary;
    public IList`1<FileDeclarationOption> Options { get; }
    public bool IsPrimary { get; public set; }
    public IList`1<FileDeclarationOption> get_Options();
    public bool get_IsPrimary();
    public void set_IsPrimary(bool value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.FileDeclarationOption : TSqlFragment {
    private FileDeclarationOptionKind _optionKind;
    public FileDeclarationOptionKind OptionKind { get; public set; }
    public FileDeclarationOptionKind get_OptionKind();
    public void set_OptionKind(FileDeclarationOptionKind value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public enum Microsoft.SqlServer.TransactSql.ScriptDom.FileDeclarationOptionKind : Enum {
    public int value__;
    public static FileDeclarationOptionKind Name;
    public static FileDeclarationOptionKind NewName;
    public static FileDeclarationOptionKind Offline;
    public static FileDeclarationOptionKind FileName;
    public static FileDeclarationOptionKind Size;
    public static FileDeclarationOptionKind MaxSize;
    public static FileDeclarationOptionKind FileGrowth;
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.FileEncryptionSource : EncryptionSource {
    private bool _isExecutable;
    private Literal _file;
    public bool IsExecutable { get; public set; }
    public Literal File { get; public set; }
    public bool get_IsExecutable();
    public void set_IsExecutable(bool value);
    public Literal get_File();
    public void set_File(Literal value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public enum Microsoft.SqlServer.TransactSql.ScriptDom.FileFormatType : Enum {
    public int value__;
    public static FileFormatType Undefined;
    public static FileFormatType RcFile;
    public static FileFormatType Orc;
    public static FileFormatType DelimitedText;
    public static FileFormatType Parquet;
    public static FileFormatType Csv;
    public static FileFormatType Parallel_Csv;
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.FileGroupDefinition : TSqlFragment {
    private Identifier _name;
    private List`1<FileDeclaration> _fileDeclarations;
    private bool _isDefault;
    private bool _containsFileStream;
    private bool _containsMemoryOptimizedData;
    public Identifier Name { get; public set; }
    public IList`1<FileDeclaration> FileDeclarations { get; }
    public bool IsDefault { get; public set; }
    public bool ContainsFileStream { get; public set; }
    public bool ContainsMemoryOptimizedData { get; public set; }
    public Identifier get_Name();
    public void set_Name(Identifier value);
    public IList`1<FileDeclaration> get_FileDeclarations();
    public bool get_IsDefault();
    public void set_IsDefault(bool value);
    public bool get_ContainsFileStream();
    public void set_ContainsFileStream(bool value);
    public bool get_ContainsMemoryOptimizedData();
    public void set_ContainsMemoryOptimizedData(bool value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.FileGroupOrPartitionScheme : TSqlFragment {
    private IdentifierOrValueExpression _name;
    private List`1<Identifier> _partitionSchemeColumns;
    public IdentifierOrValueExpression Name { get; public set; }
    public IList`1<Identifier> PartitionSchemeColumns { get; }
    public IdentifierOrValueExpression get_Name();
    public void set_Name(IdentifierOrValueExpression value);
    public IList`1<Identifier> get_PartitionSchemeColumns();
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.FileGrowthFileDeclarationOption : FileDeclarationOption {
    private Literal _growthIncrement;
    private MemoryUnit _units;
    public Literal GrowthIncrement { get; public set; }
    public MemoryUnit Units { get; public set; }
    public Literal get_GrowthIncrement();
    public void set_GrowthIncrement(Literal value);
    public MemoryUnit get_Units();
    public void set_Units(MemoryUnit value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.FileNameFileDeclarationOption : FileDeclarationOption {
    private Literal _oSFileName;
    public Literal OSFileName { get; public set; }
    public Literal get_OSFileName();
    public void set_OSFileName(Literal value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.FileStreamDatabaseOption : DatabaseOption {
    private Nullable`1<NonTransactedFileStreamAccess> _nonTransactedAccess;
    private Literal _directoryName;
    public Nullable`1<NonTransactedFileStreamAccess> NonTransactedAccess { get; public set; }
    public Literal DirectoryName { get; public set; }
    public Nullable`1<NonTransactedFileStreamAccess> get_NonTransactedAccess();
    public void set_NonTransactedAccess(Nullable`1<NonTransactedFileStreamAccess> value);
    public Literal get_DirectoryName();
    public void set_DirectoryName(Literal value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.FileStreamOnDropIndexOption : IndexOption {
    private IdentifierOrValueExpression _fileStreamOn;
    public IdentifierOrValueExpression FileStreamOn { get; public set; }
    public sealed virtual IdentifierOrValueExpression get_FileStreamOn();
    public sealed virtual void set_FileStreamOn(IdentifierOrValueExpression value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.FileStreamOnTableOption : TableOption {
    private IdentifierOrValueExpression _value;
    public IdentifierOrValueExpression Value { get; public set; }
    public IdentifierOrValueExpression get_Value();
    public void set_Value(IdentifierOrValueExpression value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.FileStreamRestoreOption : RestoreOption {
    private FileStreamDatabaseOption _fileStreamOption;
    public FileStreamDatabaseOption FileStreamOption { get; public set; }
    public FileStreamDatabaseOption get_FileStreamOption();
    public void set_FileStreamOption(FileStreamDatabaseOption value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.FileTableCollateFileNameTableOption : TableOption {
    private Identifier _value;
    public Identifier Value { get; public set; }
    public Identifier get_Value();
    public void set_Value(Identifier value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.FileTableConstraintNameTableOption : TableOption {
    private Identifier _value;
    public Identifier Value { get; public set; }
    public Identifier get_Value();
    public void set_Value(Identifier value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.FileTableDirectoryTableOption : TableOption {
    private Literal _value;
    public Literal Value { get; public set; }
    public Literal get_Value();
    public void set_Value(Literal value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public enum Microsoft.SqlServer.TransactSql.ScriptDom.FipsComplianceLevel : Enum {
    public int value__;
    public static FipsComplianceLevel Off;
    public static FipsComplianceLevel Entry;
    public static FipsComplianceLevel Intermediate;
    public static FipsComplianceLevel Full;
}
internal class Microsoft.SqlServer.TransactSql.ScriptDom.FipsComplianceLevelHelper : OptionsHelper`1<FipsComplianceLevel> {
    internal static FipsComplianceLevelHelper Instance;
    private static FipsComplianceLevelHelper();
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.ForceSeekTableHint : TableHint {
    private IdentifierOrValueExpression _indexValue;
    private List`1<ColumnReferenceExpression> _columnValues;
    public IdentifierOrValueExpression IndexValue { get; public set; }
    public IList`1<ColumnReferenceExpression> ColumnValues { get; }
    public IdentifierOrValueExpression get_IndexValue();
    public void set_IndexValue(IdentifierOrValueExpression value);
    public IList`1<ColumnReferenceExpression> get_ColumnValues();
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public abstract class Microsoft.SqlServer.TransactSql.ScriptDom.ForClause : TSqlFragment {
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.ForeignKeyConstraintDefinition : ConstraintDefinition {
    private List`1<Identifier> _columns;
    private SchemaObjectName _referenceTableName;
    private List`1<Identifier> _referencedTableColumns;
    private DeleteUpdateAction _deleteAction;
    private DeleteUpdateAction _updateAction;
    private bool _notForReplication;
    public IList`1<Identifier> Columns { get; }
    public SchemaObjectName ReferenceTableName { get; public set; }
    public IList`1<Identifier> ReferencedTableColumns { get; }
    public DeleteUpdateAction DeleteAction { get; public set; }
    public DeleteUpdateAction UpdateAction { get; public set; }
    public bool NotForReplication { get; public set; }
    public IList`1<Identifier> get_Columns();
    public SchemaObjectName get_ReferenceTableName();
    public void set_ReferenceTableName(SchemaObjectName value);
    public IList`1<Identifier> get_ReferencedTableColumns();
    public DeleteUpdateAction get_DeleteAction();
    public void set_DeleteAction(DeleteUpdateAction value);
    public DeleteUpdateAction get_UpdateAction();
    public void set_UpdateAction(DeleteUpdateAction value);
    public bool get_NotForReplication();
    public void set_NotForReplication(bool value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.FromClause : TSqlFragment {
    private List`1<TableReference> _tableReferences;
    private List`1<PredictTableReference> _predictTableReference;
    public IList`1<TableReference> TableReferences { get; }
    public IList`1<PredictTableReference> PredictTableReference { get; }
    public IList`1<TableReference> get_TableReferences();
    public IList`1<PredictTableReference> get_PredictTableReference();
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.FullTextCatalogAndFileGroup : TSqlFragment {
    private Identifier _catalogName;
    private Identifier _fileGroupName;
    private bool _fileGroupIsFirst;
    public Identifier CatalogName { get; public set; }
    public Identifier FileGroupName { get; public set; }
    public bool FileGroupIsFirst { get; public set; }
    public Identifier get_CatalogName();
    public void set_CatalogName(Identifier value);
    public Identifier get_FileGroupName();
    public void set_FileGroupName(Identifier value);
    public bool get_FileGroupIsFirst();
    public void set_FileGroupIsFirst(bool value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public abstract class Microsoft.SqlServer.TransactSql.ScriptDom.FullTextCatalogOption : TSqlFragment {
    private FullTextCatalogOptionKind _optionKind;
    public FullTextCatalogOptionKind OptionKind { get; public set; }
    public FullTextCatalogOptionKind get_OptionKind();
    public void set_OptionKind(FullTextCatalogOptionKind value);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public enum Microsoft.SqlServer.TransactSql.ScriptDom.FullTextCatalogOptionKind : Enum {
    public int value__;
    public static FullTextCatalogOptionKind AccentSensitivity;
}
public abstract class Microsoft.SqlServer.TransactSql.ScriptDom.FullTextCatalogStatement : TSqlStatement {
    private Identifier _name;
    private List`1<FullTextCatalogOption> _options;
    public Identifier Name { get; public set; }
    public IList`1<FullTextCatalogOption> Options { get; }
    public Identifier get_Name();
    public void set_Name(Identifier value);
    public IList`1<FullTextCatalogOption> get_Options();
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public enum Microsoft.SqlServer.TransactSql.ScriptDom.FullTextFunctionType : Enum {
    public int value__;
    public static FullTextFunctionType None;
    public static FullTextFunctionType Contains;
    public static FullTextFunctionType FreeText;
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.FullTextIndexColumn : TSqlFragment {
    private Identifier _name;
    private Identifier _typeColumn;
    private IdentifierOrValueExpression _languageTerm;
    private bool _statisticalSemantics;
    public Identifier Name { get; public set; }
    public Identifier TypeColumn { get; public set; }
    public IdentifierOrValueExpression LanguageTerm { get; public set; }
    public bool StatisticalSemantics { get; public set; }
    public Identifier get_Name();
    public void set_Name(Identifier value);
    public Identifier get_TypeColumn();
    public void set_TypeColumn(Identifier value);
    public IdentifierOrValueExpression get_LanguageTerm();
    public void set_LanguageTerm(IdentifierOrValueExpression value);
    public bool get_StatisticalSemantics();
    public void set_StatisticalSemantics(bool value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public abstract class Microsoft.SqlServer.TransactSql.ScriptDom.FullTextIndexOption : TSqlFragment {
    private FullTextIndexOptionKind _optionKind;
    public FullTextIndexOptionKind OptionKind { get; public set; }
    public FullTextIndexOptionKind get_OptionKind();
    public void set_OptionKind(FullTextIndexOptionKind value);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public enum Microsoft.SqlServer.TransactSql.ScriptDom.FullTextIndexOptionKind : Enum {
    public int value__;
    public static FullTextIndexOptionKind ChangeTracking;
    public static FullTextIndexOptionKind StopList;
    public static FullTextIndexOptionKind SearchPropertyList;
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.FullTextPredicate : BooleanExpression {
    private FullTextFunctionType _fullTextFunctionType;
    private List`1<ColumnReferenceExpression> _columns;
    private ValueExpression _value;
    private ValueExpression _languageTerm;
    private StringLiteral _propertyName;
    public FullTextFunctionType FullTextFunctionType { get; public set; }
    public IList`1<ColumnReferenceExpression> Columns { get; }
    public ValueExpression Value { get; public set; }
    public ValueExpression LanguageTerm { get; public set; }
    public StringLiteral PropertyName { get; public set; }
    public FullTextFunctionType get_FullTextFunctionType();
    public void set_FullTextFunctionType(FullTextFunctionType value);
    public IList`1<ColumnReferenceExpression> get_Columns();
    public ValueExpression get_Value();
    public void set_Value(ValueExpression value);
    public ValueExpression get_LanguageTerm();
    public void set_LanguageTerm(ValueExpression value);
    public StringLiteral get_PropertyName();
    public void set_PropertyName(StringLiteral value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.FullTextStopListAction : TSqlFragment {
    private bool _isAdd;
    private bool _isAll;
    private Literal _stopWord;
    private IdentifierOrValueExpression _languageTerm;
    public bool IsAdd { get; public set; }
    public bool IsAll { get; public set; }
    public Literal StopWord { get; public set; }
    public IdentifierOrValueExpression LanguageTerm { get; public set; }
    public bool get_IsAdd();
    public void set_IsAdd(bool value);
    public bool get_IsAll();
    public void set_IsAll(bool value);
    public Literal get_StopWord();
    public void set_StopWord(Literal value);
    public IdentifierOrValueExpression get_LanguageTerm();
    public void set_LanguageTerm(IdentifierOrValueExpression value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.FullTextTableReference : TableReferenceWithAlias {
    private FullTextFunctionType _fullTextFunctionType;
    private SchemaObjectName _tableName;
    private List`1<ColumnReferenceExpression> _columns;
    private ValueExpression _searchCondition;
    private ValueExpression _topN;
    private ValueExpression _language;
    private StringLiteral _propertyName;
    public FullTextFunctionType FullTextFunctionType { get; public set; }
    public SchemaObjectName TableName { get; public set; }
    public IList`1<ColumnReferenceExpression> Columns { get; }
    public ValueExpression SearchCondition { get; public set; }
    public ValueExpression TopN { get; public set; }
    public ValueExpression Language { get; public set; }
    public StringLiteral PropertyName { get; public set; }
    public FullTextFunctionType get_FullTextFunctionType();
    public void set_FullTextFunctionType(FullTextFunctionType value);
    public SchemaObjectName get_TableName();
    public void set_TableName(SchemaObjectName value);
    public IList`1<ColumnReferenceExpression> get_Columns();
    public ValueExpression get_SearchCondition();
    public void set_SearchCondition(ValueExpression value);
    public ValueExpression get_TopN();
    public void set_TopN(ValueExpression value);
    public ValueExpression get_Language();
    public void set_Language(ValueExpression value);
    public StringLiteral get_PropertyName();
    public void set_PropertyName(StringLiteral value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.FunctionCall : PrimaryExpression {
    private CallTarget _callTarget;
    private Identifier _functionName;
    private List`1<ScalarExpression> _parameters;
    private UniqueRowFilter _uniqueRowFilter;
    private OverClause _overClause;
    private WithinGroupClause _withinGroupClause;
    public CallTarget CallTarget { get; public set; }
    public Identifier FunctionName { get; public set; }
    public IList`1<ScalarExpression> Parameters { get; }
    public UniqueRowFilter UniqueRowFilter { get; public set; }
    public OverClause OverClause { get; public set; }
    public WithinGroupClause WithinGroupClause { get; public set; }
    public CallTarget get_CallTarget();
    public void set_CallTarget(CallTarget value);
    public Identifier get_FunctionName();
    public void set_FunctionName(Identifier value);
    public IList`1<ScalarExpression> get_Parameters();
    public UniqueRowFilter get_UniqueRowFilter();
    public void set_UniqueRowFilter(UniqueRowFilter value);
    public OverClause get_OverClause();
    public void set_OverClause(OverClause value);
    public WithinGroupClause get_WithinGroupClause();
    public void set_WithinGroupClause(WithinGroupClause value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.FunctionCallSetClause : SetClause {
    private FunctionCall _mutatorFunction;
    public FunctionCall MutatorFunction { get; public set; }
    public FunctionCall get_MutatorFunction();
    public void set_MutatorFunction(FunctionCall value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.FunctionOption : TSqlFragment {
    private FunctionOptionKind _optionKind;
    public FunctionOptionKind OptionKind { get; public set; }
    public FunctionOptionKind get_OptionKind();
    public void set_OptionKind(FunctionOptionKind value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public enum Microsoft.SqlServer.TransactSql.ScriptDom.FunctionOptionKind : Enum {
    public int value__;
    public static FunctionOptionKind Encryption;
    public static FunctionOptionKind SchemaBinding;
    public static FunctionOptionKind ReturnsNullOnNullInput;
    public static FunctionOptionKind CalledOnNullInput;
    public static FunctionOptionKind ExecuteAs;
    public static FunctionOptionKind NativeCompilation;
    public static FunctionOptionKind Inline;
}
public abstract class Microsoft.SqlServer.TransactSql.ScriptDom.FunctionReturnType : TSqlFragment {
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public abstract class Microsoft.SqlServer.TransactSql.ScriptDom.FunctionStatementBody : ProcedureStatementBodyBase {
    private SchemaObjectName _name;
    private FunctionReturnType _returnType;
    private List`1<FunctionOption> _options;
    private OrderBulkInsertOption _orderHint;
    public SchemaObjectName Name { get; public set; }
    public FunctionReturnType ReturnType { get; public set; }
    public IList`1<FunctionOption> Options { get; }
    public OrderBulkInsertOption OrderHint { get; public set; }
    public SchemaObjectName get_Name();
    public void set_Name(SchemaObjectName value);
    public FunctionReturnType get_ReturnType();
    public void set_ReturnType(FunctionReturnType value);
    public IList`1<FunctionOption> get_Options();
    public OrderBulkInsertOption get_OrderHint();
    public void set_OrderHint(OrderBulkInsertOption value);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.GeneralSetCommand : SetCommand {
    private GeneralSetCommandType _commandType;
    private ScalarExpression _parameter;
    public GeneralSetCommandType CommandType { get; public set; }
    public ScalarExpression Parameter { get; public set; }
    public GeneralSetCommandType get_CommandType();
    public void set_CommandType(GeneralSetCommandType value);
    public ScalarExpression get_Parameter();
    public void set_Parameter(ScalarExpression value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public enum Microsoft.SqlServer.TransactSql.ScriptDom.GeneralSetCommandType : Enum {
    public int value__;
    public static GeneralSetCommandType None;
    public static GeneralSetCommandType Language;
    public static GeneralSetCommandType DateFormat;
    public static GeneralSetCommandType DateFirst;
    public static GeneralSetCommandType DeadlockPriority;
    public static GeneralSetCommandType LockTimeout;
    public static GeneralSetCommandType QueryGovernorCostLimit;
    public static GeneralSetCommandType ContextInfo;
}
internal class Microsoft.SqlServer.TransactSql.ScriptDom.GeneralSetCommandTypeHelper : OptionsHelper`1<GeneralSetCommandType> {
    internal static GeneralSetCommandTypeHelper Instance;
    private static GeneralSetCommandTypeHelper();
}
internal class Microsoft.SqlServer.TransactSql.ScriptDom.GenerateAlwaysTypeHelper : OptionsHelper`1<GeneratedAlwaysType> {
    internal static GenerateAlwaysTypeHelper Instance;
    private static GenerateAlwaysTypeHelper();
}
public enum Microsoft.SqlServer.TransactSql.ScriptDom.GeneratedAlwaysType : Enum {
    public int value__;
    public static GeneratedAlwaysType RowStart;
    public static GeneratedAlwaysType RowEnd;
    public static GeneratedAlwaysType UserIdStart;
    public static GeneratedAlwaysType UserIdEnd;
    public static GeneratedAlwaysType UserNameStart;
    public static GeneratedAlwaysType UserNameEnd;
    public static GeneratedAlwaysType TransactionIdStart;
    public static GeneratedAlwaysType TransactionIdEnd;
    public static GeneratedAlwaysType SequenceNumberStart;
    public static GeneratedAlwaysType SequenceNumberEnd;
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.GenericConfigurationOption : DatabaseConfigurationSetOption {
    private IdentifierOrScalarExpression _genericOptionState;
    public IdentifierOrScalarExpression GenericOptionState { get; public set; }
    public IdentifierOrScalarExpression get_GenericOptionState();
    public void set_GenericOptionState(IdentifierOrScalarExpression value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.GetConversationGroupStatement : WaitForSupportedStatement {
    private VariableReference _groupId;
    private SchemaObjectName _queue;
    public VariableReference GroupId { get; public set; }
    public SchemaObjectName Queue { get; public set; }
    public VariableReference get_GroupId();
    public void set_GroupId(VariableReference value);
    public SchemaObjectName get_Queue();
    public void set_Queue(SchemaObjectName value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.GlobalFunctionTableReference : TableReferenceWithAlias {
    private Identifier _name;
    private List`1<ScalarExpression> _parameters;
    public Identifier Name { get; public set; }
    public IList`1<ScalarExpression> Parameters { get; }
    public Identifier get_Name();
    public void set_Name(Identifier value);
    public IList`1<ScalarExpression> get_Parameters();
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.GlobalVariableExpression : ValueExpression {
    private string _name;
    public string Name { get; public set; }
    public string get_Name();
    public void set_Name(string value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.GoToStatement : TSqlStatement {
    private Identifier _labelName;
    public Identifier LabelName { get; public set; }
    public Identifier get_LabelName();
    public void set_LabelName(Identifier value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.GrandTotalGroupingSpecification : GroupingSpecification {
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.GrantStatement : SecurityStatement {
    private bool _withGrantOption;
    public bool WithGrantOption { get; public set; }
    public bool get_WithGrantOption();
    public void set_WithGrantOption(bool value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.GrantStatement80 : SecurityStatementBody80 {
    private bool _withGrantOption;
    private Identifier _asClause;
    public bool WithGrantOption { get; public set; }
    public Identifier AsClause { get; public set; }
    public bool get_WithGrantOption();
    public void set_WithGrantOption(bool value);
    public Identifier get_AsClause();
    public void set_AsClause(Identifier value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.GraphConnectionBetweenNodes : TSqlFragment {
    private SchemaObjectName _fromNode;
    private SchemaObjectName _toNode;
    public SchemaObjectName FromNode { get; public set; }
    public SchemaObjectName ToNode { get; public set; }
    public SchemaObjectName get_FromNode();
    public void set_FromNode(SchemaObjectName value);
    public SchemaObjectName get_ToNode();
    public void set_ToNode(SchemaObjectName value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.GraphConnectionConstraintDefinition : ConstraintDefinition {
    private List`1<GraphConnectionBetweenNodes> _fromNodeToNodeList;
    private DeleteUpdateAction _deleteAction;
    public IList`1<GraphConnectionBetweenNodes> FromNodeToNodeList { get; }
    public DeleteUpdateAction DeleteAction { get; public set; }
    public IList`1<GraphConnectionBetweenNodes> get_FromNodeToNodeList();
    public DeleteUpdateAction get_DeleteAction();
    public void set_DeleteAction(DeleteUpdateAction value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.GraphMatchCompositeExpression : BooleanExpression {
    private GraphMatchNodeExpression _leftNode;
    private Identifier _edge;
    private GraphMatchNodeExpression _rightNode;
    private bool _arrowOnRight;
    public GraphMatchNodeExpression LeftNode { get; public set; }
    public Identifier Edge { get; public set; }
    public GraphMatchNodeExpression RightNode { get; public set; }
    public bool ArrowOnRight { get; public set; }
    public GraphMatchNodeExpression get_LeftNode();
    public void set_LeftNode(GraphMatchNodeExpression value);
    public Identifier get_Edge();
    public void set_Edge(Identifier value);
    public GraphMatchNodeExpression get_RightNode();
    public void set_RightNode(GraphMatchNodeExpression value);
    public bool get_ArrowOnRight();
    public void set_ArrowOnRight(bool value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.GraphMatchExpression : BooleanExpression {
    private Identifier _leftNode;
    private Identifier _edge;
    private Identifier _rightNode;
    private bool _arrowOnRight;
    public Identifier LeftNode { get; public set; }
    public Identifier Edge { get; public set; }
    public Identifier RightNode { get; public set; }
    public bool ArrowOnRight { get; public set; }
    public Identifier get_LeftNode();
    public void set_LeftNode(Identifier value);
    public Identifier get_Edge();
    public void set_Edge(Identifier value);
    public Identifier get_RightNode();
    public void set_RightNode(Identifier value);
    public bool get_ArrowOnRight();
    public void set_ArrowOnRight(bool value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.GraphMatchLastNodePredicate : BooleanExpression {
    private GraphMatchNodeExpression _leftExpression;
    private GraphMatchNodeExpression _rightExpression;
    public GraphMatchNodeExpression LeftExpression { get; public set; }
    public GraphMatchNodeExpression RightExpression { get; public set; }
    public GraphMatchNodeExpression get_LeftExpression();
    public void set_LeftExpression(GraphMatchNodeExpression value);
    public GraphMatchNodeExpression get_RightExpression();
    public void set_RightExpression(GraphMatchNodeExpression value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.GraphMatchNodeExpression : BooleanExpression {
    private Identifier _node;
    private bool _usesLastNode;
    public Identifier Node { get; public set; }
    public bool UsesLastNode { get; public set; }
    public Identifier get_Node();
    public void set_Node(Identifier value);
    public bool get_UsesLastNode();
    public void set_UsesLastNode(bool value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.GraphMatchPredicate : BooleanExpression {
    private BooleanExpression _expression;
    public BooleanExpression Expression { get; public set; }
    public BooleanExpression get_Expression();
    public void set_Expression(BooleanExpression value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.GraphMatchRecursivePredicate : BooleanExpression {
    private GraphMatchRecursivePredicateKind _function;
    private GraphMatchNodeExpression _outerNodeExpression;
    private List`1<BooleanExpression> _expression;
    private GraphRecursiveMatchQuantifier _recursiveQuantifier;
    private bool _anchorOnLeft;
    public GraphMatchRecursivePredicateKind Function { get; public set; }
    public GraphMatchNodeExpression OuterNodeExpression { get; public set; }
    public IList`1<BooleanExpression> Expression { get; }
    public GraphRecursiveMatchQuantifier RecursiveQuantifier { get; public set; }
    public bool AnchorOnLeft { get; public set; }
    public GraphMatchRecursivePredicateKind get_Function();
    public void set_Function(GraphMatchRecursivePredicateKind value);
    public GraphMatchNodeExpression get_OuterNodeExpression();
    public void set_OuterNodeExpression(GraphMatchNodeExpression value);
    public IList`1<BooleanExpression> get_Expression();
    public GraphRecursiveMatchQuantifier get_RecursiveQuantifier();
    public void set_RecursiveQuantifier(GraphRecursiveMatchQuantifier value);
    public bool get_AnchorOnLeft();
    public void set_AnchorOnLeft(bool value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public enum Microsoft.SqlServer.TransactSql.ScriptDom.GraphMatchRecursivePredicateKind : Enum {
    public int value__;
    public static GraphMatchRecursivePredicateKind ShortestPath;
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.GraphRecursiveMatchQuantifier : BooleanExpression {
    private bool _isPlusSign;
    private Literal _lowerLimit;
    private Literal _upperLimit;
    public bool IsPlusSign { get; public set; }
    public Literal LowerLimit { get; public set; }
    public Literal UpperLimit { get; public set; }
    public bool get_IsPlusSign();
    public void set_IsPlusSign(bool value);
    public Literal get_LowerLimit();
    public void set_LowerLimit(Literal value);
    public Literal get_UpperLimit();
    public void set_UpperLimit(Literal value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.GridParameter : TSqlFragment {
    private GridParameterType _parameter;
    private ImportanceParameterType _value;
    public GridParameterType Parameter { get; public set; }
    public ImportanceParameterType Value { get; public set; }
    public GridParameterType get_Parameter();
    public void set_Parameter(GridParameterType value);
    public ImportanceParameterType get_Value();
    public void set_Value(ImportanceParameterType value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public enum Microsoft.SqlServer.TransactSql.ScriptDom.GridParameterType : Enum {
    public int value__;
    public static GridParameterType None;
    public static GridParameterType Level1;
    public static GridParameterType Level2;
    public static GridParameterType Level3;
    public static GridParameterType Level4;
}
internal class Microsoft.SqlServer.TransactSql.ScriptDom.GridParameterTypeHelper : OptionsHelper`1<GridParameterType> {
    internal static GridParameterTypeHelper Instance;
    private static GridParameterTypeHelper();
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.GridsSpatialIndexOption : SpatialIndexOption {
    private List`1<GridParameter> _gridParameters;
    public IList`1<GridParameter> GridParameters { get; }
    public IList`1<GridParameter> get_GridParameters();
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.GroupByClause : TSqlFragment {
    private GroupByOption _groupByOption;
    private bool _all;
    private List`1<GroupingSpecification> _groupingSpecifications;
    public GroupByOption GroupByOption { get; public set; }
    public bool All { get; public set; }
    public IList`1<GroupingSpecification> GroupingSpecifications { get; }
    public GroupByOption get_GroupByOption();
    public void set_GroupByOption(GroupByOption value);
    public bool get_All();
    public void set_All(bool value);
    public IList`1<GroupingSpecification> get_GroupingSpecifications();
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public enum Microsoft.SqlServer.TransactSql.ScriptDom.GroupByOption : Enum {
    public int value__;
    public static GroupByOption None;
    public static GroupByOption Cube;
    public static GroupByOption Rollup;
}
internal class Microsoft.SqlServer.TransactSql.ScriptDom.GroupByOptionHelper : OptionsHelper`1<GroupByOption> {
    internal static GroupByOptionHelper Instance;
    private static GroupByOptionHelper();
    protected virtual TSqlParseErrorException GetMatchingException(IToken token);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.GroupingSetsGroupingSpecification : GroupingSpecification {
    private List`1<GroupingSpecification> _sets;
    public IList`1<GroupingSpecification> Sets { get; }
    public IList`1<GroupingSpecification> get_Sets();
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public abstract class Microsoft.SqlServer.TransactSql.ScriptDom.GroupingSpecification : TSqlFragment {
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.HadrAvailabilityGroupDatabaseOption : HadrDatabaseOption {
    private Identifier _groupName;
    public Identifier GroupName { get; public set; }
    public Identifier get_GroupName();
    public void set_GroupName(Identifier value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.HadrDatabaseOption : DatabaseOption {
    private HadrDatabaseOptionKind _hadrOption;
    public HadrDatabaseOptionKind HadrOption { get; public set; }
    public HadrDatabaseOptionKind get_HadrOption();
    public void set_HadrOption(HadrDatabaseOptionKind value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public enum Microsoft.SqlServer.TransactSql.ScriptDom.HadrDatabaseOptionKind : Enum {
    public int value__;
    public static HadrDatabaseOptionKind Suspend;
    public static HadrDatabaseOptionKind Resume;
    public static HadrDatabaseOptionKind Off;
    public static HadrDatabaseOptionKind AvailabilityGroup;
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.HavingClause : TSqlFragment {
    private BooleanExpression _searchCondition;
    public BooleanExpression SearchCondition { get; public set; }
    public BooleanExpression get_SearchCondition();
    public void set_SearchCondition(BooleanExpression value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
internal interface Microsoft.SqlServer.TransactSql.ScriptDom.IAuthorization {
    public Identifier Owner { get; public set; }
    public abstract virtual Identifier get_Owner();
    public abstract virtual void set_Owner(Identifier value);
}
internal interface Microsoft.SqlServer.TransactSql.ScriptDom.ICollationSetter {
    public Identifier Collation { get; public set; }
    public abstract virtual Identifier get_Collation();
    public abstract virtual void set_Collation(Identifier value);
}
internal interface Microsoft.SqlServer.TransactSql.ScriptDom.IDataMaskingSetter {
    public bool IsMasked { get; public set; }
    public StringLiteral MaskingFunction { get; public set; }
    public abstract virtual bool get_IsMasked();
    public abstract virtual void set_IsMasked(bool value);
    public abstract virtual StringLiteral get_MaskingFunction();
    public abstract virtual void set_MaskingFunction(StringLiteral value);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.Identifier : TSqlFragment {
    private static string EscapedRSquareParen;
    private static string EscapedQuote;
    private static string Quote;
    private static char LSquareParenChar;
    private static char RSquareParenChar;
    private static char QuoteChar;
    internal static int MaxIdentifierLength;
    private string _value;
    private QuoteType _quoteType;
    public string Value { get; public set; }
    public QuoteType QuoteType { get; public set; }
    public static string DecodeIdentifier(string identifier, QuoteType& quote);
    public static string EncodeIdentifier(string identifier);
    public static string EncodeIdentifier(string identifier, QuoteType quoteType);
    internal void SetUnquotedIdentifier(string text);
    internal void SetIdentifier(string text);
    public string get_Value();
    public void set_Value(string value);
    public QuoteType get_QuoteType();
    public void set_QuoteType(QuoteType value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.IdentifierAtomicBlockOption : AtomicBlockOption {
    private Identifier _value;
    public Identifier Value { get; public set; }
    public Identifier get_Value();
    public void set_Value(Identifier value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
internal class Microsoft.SqlServer.TransactSql.ScriptDom.IdentifierCreateLoginOptionsHelper : OptionsHelper`1<PrincipalOptionKind> {
    internal static IdentifierCreateLoginOptionsHelper Instance;
    private static IdentifierCreateLoginOptionsHelper();
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.IdentifierDatabaseOption : DatabaseOption {
    private Identifier _value;
    public Identifier Value { get; public set; }
    public Identifier get_Value();
    public void set_Value(Identifier value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.IdentifierLiteral : Literal {
    private QuoteType _quoteType;
    public LiteralType LiteralType { get; }
    public QuoteType QuoteType { get; public set; }
    internal void SetUnquotedIdentifier(string text);
    internal void SetIdentifier(string text);
    public virtual LiteralType get_LiteralType();
    public QuoteType get_QuoteType();
    public void set_QuoteType(QuoteType value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.IdentifierOrScalarExpression : TSqlFragment {
    private Identifier _identifier;
    private ScalarExpression _scalarExpression;
    public Identifier Identifier { get; public set; }
    public ScalarExpression ScalarExpression { get; public set; }
    public Identifier get_Identifier();
    public void set_Identifier(Identifier value);
    public ScalarExpression get_ScalarExpression();
    public void set_ScalarExpression(ScalarExpression value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.IdentifierOrValueExpression : TSqlFragment {
    private Identifier _identifier;
    private ValueExpression _valueExpression;
    public string Value { get; }
    public Identifier Identifier { get; public set; }
    public ValueExpression ValueExpression { get; public set; }
    public string get_Value();
    public Identifier get_Identifier();
    public void set_Identifier(Identifier value);
    public ValueExpression get_ValueExpression();
    public void set_ValueExpression(ValueExpression value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.IdentifierPrincipalOption : PrincipalOption {
    private Identifier _identifier;
    public Identifier Identifier { get; public set; }
    public Identifier get_Identifier();
    public void set_Identifier(Identifier value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.IdentifierSnippet : Identifier {
    private string _script;
    public string Script { get; public set; }
    public string get_Script();
    public void set_Script(string value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.IdentityFunctionCall : ScalarExpression {
    private DataTypeReference _dataType;
    private ScalarExpression _seed;
    private ScalarExpression _increment;
    public DataTypeReference DataType { get; public set; }
    public ScalarExpression Seed { get; public set; }
    public ScalarExpression Increment { get; public set; }
    public DataTypeReference get_DataType();
    public void set_DataType(DataTypeReference value);
    public ScalarExpression get_Seed();
    public void set_Seed(ScalarExpression value);
    public ScalarExpression get_Increment();
    public void set_Increment(ScalarExpression value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.IdentityOptions : TSqlFragment {
    private ScalarExpression _identitySeed;
    private ScalarExpression _identityIncrement;
    private bool _isIdentityNotForReplication;
    public ScalarExpression IdentitySeed { get; public set; }
    public ScalarExpression IdentityIncrement { get; public set; }
    public bool IsIdentityNotForReplication { get; public set; }
    public ScalarExpression get_IdentitySeed();
    public void set_IdentitySeed(ScalarExpression value);
    public ScalarExpression get_IdentityIncrement();
    public void set_IdentityIncrement(ScalarExpression value);
    public bool get_IsIdentityNotForReplication();
    public void set_IsIdentityNotForReplication(bool value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.IdentityValueKeyOption : KeyOption {
    private Literal _identityPhrase;
    public Literal IdentityPhrase { get; public set; }
    public Literal get_IdentityPhrase();
    public void set_IdentityPhrase(Literal value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
internal interface Microsoft.SqlServer.TransactSql.ScriptDom.IFileStreamSpecifier {
    public IdentifierOrValueExpression FileStreamOn { get; public set; }
    public abstract virtual IdentifierOrValueExpression get_FileStreamOn();
    public abstract virtual void set_FileStreamOn(IdentifierOrValueExpression value);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.IfStatement : TSqlStatement {
    private BooleanExpression _predicate;
    private TSqlStatement _thenStatement;
    private TSqlStatement _elseStatement;
    public BooleanExpression Predicate { get; public set; }
    public TSqlStatement ThenStatement { get; public set; }
    public TSqlStatement ElseStatement { get; public set; }
    public BooleanExpression get_Predicate();
    public void set_Predicate(BooleanExpression value);
    public TSqlStatement get_ThenStatement();
    public void set_ThenStatement(TSqlStatement value);
    public TSqlStatement get_ElseStatement();
    public void set_ElseStatement(TSqlStatement value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.IgnoreDupKeyIndexOption : IndexStateOption {
    private Nullable`1<bool> _suppressMessagesOption;
    public Nullable`1<bool> SuppressMessagesOption { get; public set; }
    public Nullable`1<bool> get_SuppressMessagesOption();
    public void set_SuppressMessagesOption(Nullable`1<bool> value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.IIfCall : PrimaryExpression {
    private BooleanExpression _predicate;
    private ScalarExpression _thenExpression;
    private ScalarExpression _elseExpression;
    public BooleanExpression Predicate { get; public set; }
    public ScalarExpression ThenExpression { get; public set; }
    public ScalarExpression ElseExpression { get; public set; }
    public BooleanExpression get_Predicate();
    public void set_Predicate(BooleanExpression value);
    public ScalarExpression get_ThenExpression();
    public void set_ThenExpression(ScalarExpression value);
    public ScalarExpression get_ElseExpression();
    public void set_ElseExpression(ScalarExpression value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
internal class Microsoft.SqlServer.TransactSql.ScriptDom.ImportanceParameterHelper : OptionsHelper`1<ImportanceParameterType> {
    internal static ImportanceParameterHelper Instance;
    private static ImportanceParameterHelper();
}
public enum Microsoft.SqlServer.TransactSql.ScriptDom.ImportanceParameterType : Enum {
    public int value__;
    public static ImportanceParameterType Unknown;
    public static ImportanceParameterType Low;
    public static ImportanceParameterType Medium;
    public static ImportanceParameterType High;
    public static ImportanceParameterType Normal;
    public static ImportanceParameterType Above_Normal;
    public static ImportanceParameterType Below_Normal;
}
internal enum Microsoft.SqlServer.TransactSql.ScriptDom.IndexAffectingStatement : Enum {
    public int value__;
    public static IndexAffectingStatement AlterTableAddElement;
    public static IndexAffectingStatement AlterTableAlterIndexRebuild;
    public static IndexAffectingStatement AlterTableRebuildOnePartition;
    public static IndexAffectingStatement AlterTableRebuildAllPartitions;
    public static IndexAffectingStatement AlterIndexSet;
    public static IndexAffectingStatement AlterIndexRebuildOnePartition;
    public static IndexAffectingStatement AlterIndexRebuildAllPartitions;
    public static IndexAffectingStatement AlterIndexReorganize;
    public static IndexAffectingStatement CreateColumnStoreIndex;
    public static IndexAffectingStatement CreateIndex;
    public static IndexAffectingStatement CreateTable;
    public static IndexAffectingStatement CreateType;
    public static IndexAffectingStatement CreateXmlIndex;
    public static IndexAffectingStatement CreateOrAlterFunction;
    public static IndexAffectingStatement DeclareTableVariable;
    public static IndexAffectingStatement CreateSpatialIndex;
    public static IndexAffectingStatement CreateTableInlineIndex;
    public static IndexAffectingStatement AlterTableAlterColumn;
    public static IndexAffectingStatement AlterIndexResume;
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.IndexDefinition : TSqlStatement {
    private Identifier _name;
    private bool _unique;
    private IndexType _indexType;
    private List`1<IndexOption> _indexOptions;
    private List`1<ColumnWithSortOrder> _columns;
    private List`1<ColumnReferenceExpression> _includeColumns;
    private FileGroupOrPartitionScheme _onFileGroupOrPartitionScheme;
    private BooleanExpression _filterPredicate;
    private IdentifierOrValueExpression _fileStreamOn;
    public Identifier Name { get; public set; }
    public bool Unique { get; public set; }
    public IndexType IndexType { get; public set; }
    public IList`1<IndexOption> IndexOptions { get; }
    public IList`1<ColumnWithSortOrder> Columns { get; }
    public IList`1<ColumnReferenceExpression> IncludeColumns { get; }
    public FileGroupOrPartitionScheme OnFileGroupOrPartitionScheme { get; public set; }
    public BooleanExpression FilterPredicate { get; public set; }
    public IdentifierOrValueExpression FileStreamOn { get; public set; }
    public Identifier get_Name();
    public void set_Name(Identifier value);
    public bool get_Unique();
    public void set_Unique(bool value);
    public IndexType get_IndexType();
    public void set_IndexType(IndexType value);
    public IList`1<IndexOption> get_IndexOptions();
    public IList`1<ColumnWithSortOrder> get_Columns();
    public IList`1<ColumnReferenceExpression> get_IncludeColumns();
    public FileGroupOrPartitionScheme get_OnFileGroupOrPartitionScheme();
    public void set_OnFileGroupOrPartitionScheme(FileGroupOrPartitionScheme value);
    public BooleanExpression get_FilterPredicate();
    public void set_FilterPredicate(BooleanExpression value);
    public sealed virtual IdentifierOrValueExpression get_FileStreamOn();
    public sealed virtual void set_FileStreamOn(IdentifierOrValueExpression value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.IndexExpressionOption : IndexOption {
    private ScalarExpression _expression;
    public ScalarExpression Expression { get; public set; }
    public ScalarExpression get_Expression();
    public void set_Expression(ScalarExpression value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public abstract class Microsoft.SqlServer.TransactSql.ScriptDom.IndexOption : TSqlFragment {
    private IndexOptionKind _optionKind;
    public IndexOptionKind OptionKind { get; public set; }
    public IndexOptionKind get_OptionKind();
    public void set_OptionKind(IndexOptionKind value);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
internal class Microsoft.SqlServer.TransactSql.ScriptDom.IndexOptionHelper : OptionsHelper`1<IndexOptionKind> {
    internal static IndexOptionHelper Instance;
    private static IndexOptionHelper();
}
public enum Microsoft.SqlServer.TransactSql.ScriptDom.IndexOptionKind : Enum {
    public int value__;
    public static IndexOptionKind PadIndex;
    public static IndexOptionKind FillFactor;
    public static IndexOptionKind SortInTempDB;
    public static IndexOptionKind IgnoreDupKey;
    public static IndexOptionKind StatisticsNoRecompute;
    public static IndexOptionKind DropExisting;
    public static IndexOptionKind Online;
    public static IndexOptionKind AllowRowLocks;
    public static IndexOptionKind AllowPageLocks;
    public static IndexOptionKind MaxDop;
    public static IndexOptionKind LobCompaction;
    public static IndexOptionKind FileStreamOn;
    public static IndexOptionKind DataCompression;
    public static IndexOptionKind MoveTo;
    public static IndexOptionKind BucketCount;
    public static IndexOptionKind StatisticsIncremental;
    public static IndexOptionKind Order;
    public static IndexOptionKind CompressAllRowGroups;
    public static IndexOptionKind CompressionDelay;
    public static IndexOptionKind Resumable;
    public static IndexOptionKind MaxDuration;
    public static IndexOptionKind WaitAtLowPriority;
    public static IndexOptionKind OptimizeForSequentialKey;
}
public abstract class Microsoft.SqlServer.TransactSql.ScriptDom.IndexStatement : TSqlStatement {
    private Identifier _name;
    private SchemaObjectName _onName;
    private List`1<IndexOption> _indexOptions;
    public Identifier Name { get; public set; }
    public SchemaObjectName OnName { get; public set; }
    public IList`1<IndexOption> IndexOptions { get; }
    public Identifier get_Name();
    public void set_Name(Identifier value);
    public SchemaObjectName get_OnName();
    public void set_OnName(SchemaObjectName value);
    public IList`1<IndexOption> get_IndexOptions();
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.IndexStateOption : IndexOption {
    private OptionState _optionState;
    public OptionState OptionState { get; public set; }
    public OptionState get_OptionState();
    public void set_OptionState(OptionState value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.IndexTableHint : TableHint {
    private List`1<IdentifierOrValueExpression> _indexValues;
    public IList`1<IdentifierOrValueExpression> IndexValues { get; }
    public IList`1<IdentifierOrValueExpression> get_IndexValues();
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.IndexType : TSqlFragment {
    private Nullable`1<IndexTypeKind> _indexTypeKind;
    public Nullable`1<IndexTypeKind> IndexTypeKind { get; public set; }
    public Nullable`1<IndexTypeKind> get_IndexTypeKind();
    public void set_IndexTypeKind(Nullable`1<IndexTypeKind> value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public enum Microsoft.SqlServer.TransactSql.ScriptDom.IndexTypeKind : Enum {
    public int value__;
    public static IndexTypeKind Clustered;
    public static IndexTypeKind NonClustered;
    public static IndexTypeKind NonClusteredHash;
    public static IndexTypeKind ClusteredColumnStore;
    public static IndexTypeKind NonClusteredColumnStore;
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.InlineDerivedTable : TableReferenceWithAliasAndColumns {
    private List`1<RowValue> _rowValues;
    public IList`1<RowValue> RowValues { get; }
    public IList`1<RowValue> get_RowValues();
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.InlineFunctionOption : FunctionOption {
    private OptionState _optionState;
    public OptionState OptionState { get; public set; }
    public OptionState get_OptionState();
    public void set_OptionState(OptionState value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.InlineResultSetDefinition : ResultSetDefinition {
    private List`1<ResultColumnDefinition> _resultColumnDefinitions;
    public IList`1<ResultColumnDefinition> ResultColumnDefinitions { get; }
    public IList`1<ResultColumnDefinition> get_ResultColumnDefinitions();
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.InPredicate : BooleanExpression {
    private ScalarExpression _expression;
    private ScalarSubquery _subquery;
    private bool _notDefined;
    private List`1<ScalarExpression> _values;
    public ScalarExpression Expression { get; public set; }
    public ScalarSubquery Subquery { get; public set; }
    public bool NotDefined { get; public set; }
    public IList`1<ScalarExpression> Values { get; }
    public ScalarExpression get_Expression();
    public void set_Expression(ScalarExpression value);
    public ScalarSubquery get_Subquery();
    public void set_Subquery(ScalarSubquery value);
    public bool get_NotDefined();
    public void set_NotDefined(bool value);
    public IList`1<ScalarExpression> get_Values();
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.InsertBulkColumnDefinition : TSqlFragment {
    private ColumnDefinitionBase _column;
    private NullNotNull _nullNotNull;
    public ColumnDefinitionBase Column { get; public set; }
    public NullNotNull NullNotNull { get; public set; }
    public ColumnDefinitionBase get_Column();
    public void set_Column(ColumnDefinitionBase value);
    public NullNotNull get_NullNotNull();
    public void set_NullNotNull(NullNotNull value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.InsertBulkStatement : BulkInsertBase {
    private List`1<InsertBulkColumnDefinition> _columnDefinitions;
    public IList`1<InsertBulkColumnDefinition> ColumnDefinitions { get; }
    public IList`1<InsertBulkColumnDefinition> get_ColumnDefinitions();
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.InsertMergeAction : MergeAction {
    private List`1<ColumnReferenceExpression> _columns;
    private ValuesInsertSource _source;
    public IList`1<ColumnReferenceExpression> Columns { get; }
    public ValuesInsertSource Source { get; public set; }
    public IList`1<ColumnReferenceExpression> get_Columns();
    public ValuesInsertSource get_Source();
    public void set_Source(ValuesInsertSource value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public enum Microsoft.SqlServer.TransactSql.ScriptDom.InsertOption : Enum {
    public int value__;
    public static InsertOption None;
    public static InsertOption Into;
    public static InsertOption Over;
}
public abstract class Microsoft.SqlServer.TransactSql.ScriptDom.InsertSource : TSqlFragment {
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.InsertSpecification : DataModificationSpecification {
    private InsertOption _insertOption;
    private InsertSource _insertSource;
    private List`1<ColumnReferenceExpression> _columns;
    public InsertOption InsertOption { get; public set; }
    public InsertSource InsertSource { get; public set; }
    public IList`1<ColumnReferenceExpression> Columns { get; }
    public InsertOption get_InsertOption();
    public void set_InsertOption(InsertOption value);
    public InsertSource get_InsertSource();
    public void set_InsertSource(InsertSource value);
    public IList`1<ColumnReferenceExpression> get_Columns();
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.InsertStatement : DataModificationStatement {
    private InsertSpecification _insertSpecification;
    public InsertSpecification InsertSpecification { get; public set; }
    public InsertSpecification get_InsertSpecification();
    public void set_InsertSpecification(InsertSpecification value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.IntegerLiteral : Literal {
    public LiteralType LiteralType { get; }
    public virtual LiteralType get_LiteralType();
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
internal class Microsoft.SqlServer.TransactSql.ScriptDom.IntegerOptimizerHintHelper : OptionsHelper`1<OptimizerHintKind> {
    internal static IntegerOptimizerHintHelper Instance;
    private static IntegerOptimizerHintHelper();
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.InternalOpenRowset : TableReferenceWithAlias {
    private Identifier _identifier;
    private List`1<ScalarExpression> _varArgs;
    public Identifier Identifier { get; public set; }
    public IList`1<ScalarExpression> VarArgs { get; }
    public Identifier get_Identifier();
    public void set_Identifier(Identifier value);
    public IList`1<ScalarExpression> get_VarArgs();
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
internal interface Microsoft.SqlServer.TransactSql.ScriptDom.IPasswordChangeOption {
    public Literal EncryptionPassword { get; public set; }
    public Literal DecryptionPassword { get; public set; }
    public abstract virtual Literal get_EncryptionPassword();
    public abstract virtual void set_EncryptionPassword(Literal value);
    public abstract virtual Literal get_DecryptionPassword();
    public abstract virtual void set_DecryptionPassword(Literal value);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.IPv4 : TSqlFragment {
    private Literal _octetOne;
    private Literal _octetTwo;
    private Literal _octetThree;
    private Literal _octetFour;
    public Literal OctetOne { get; public set; }
    public Literal OctetTwo { get; public set; }
    public Literal OctetThree { get; public set; }
    public Literal OctetFour { get; public set; }
    public Literal get_OctetOne();
    public void set_OctetOne(Literal value);
    public Literal get_OctetTwo();
    public void set_OctetTwo(Literal value);
    public Literal get_OctetThree();
    public void set_OctetThree(Literal value);
    public Literal get_OctetFour();
    public void set_OctetFour(Literal value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public enum Microsoft.SqlServer.TransactSql.ScriptDom.IsolationLevel : Enum {
    public int value__;
    public static IsolationLevel None;
    public static IsolationLevel ReadCommitted;
    public static IsolationLevel ReadUncommitted;
    public static IsolationLevel RepeatableRead;
    public static IsolationLevel Serializable;
    public static IsolationLevel Snapshot;
}
public enum Microsoft.SqlServer.TransactSql.ScriptDom.JoinHint : Enum {
    public int value__;
    public static JoinHint None;
    public static JoinHint Loop;
    public static JoinHint Hash;
    public static JoinHint Merge;
    public static JoinHint Remote;
}
internal class Microsoft.SqlServer.TransactSql.ScriptDom.JoinHintHelper : OptionsHelper`1<JoinHint> {
    internal static JoinHintHelper Instance;
    private static JoinHintHelper();
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.JoinParenthesisTableReference : TableReference {
    private TableReference _join;
    public TableReference Join { get; public set; }
    public TableReference get_Join();
    public void set_Join(TableReference value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public abstract class Microsoft.SqlServer.TransactSql.ScriptDom.JoinTableReference : TableReference {
    private TableReference _firstTableReference;
    private TableReference _secondTableReference;
    public TableReference FirstTableReference { get; public set; }
    public TableReference SecondTableReference { get; public set; }
    public TableReference get_FirstTableReference();
    public void set_FirstTableReference(TableReference value);
    public TableReference get_SecondTableReference();
    public void set_SecondTableReference(TableReference value);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.JsonForClause : ForClause {
    private List`1<JsonForClauseOption> _options;
    public IList`1<JsonForClauseOption> Options { get; }
    public IList`1<JsonForClauseOption> get_Options();
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
internal class Microsoft.SqlServer.TransactSql.ScriptDom.JsonForClauseModeHelper : OptionsHelper`1<JsonForClauseOptions> {
    internal static JsonForClauseModeHelper Instance;
    private static JsonForClauseModeHelper();
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.JsonForClauseOption : ForClause {
    private JsonForClauseOptions _optionKind;
    private Literal _value;
    public JsonForClauseOptions OptionKind { get; public set; }
    public Literal Value { get; public set; }
    public JsonForClauseOptions get_OptionKind();
    public void set_OptionKind(JsonForClauseOptions value);
    public Literal get_Value();
    public void set_Value(Literal value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
[FlagsAttribute]
public enum Microsoft.SqlServer.TransactSql.ScriptDom.JsonForClauseOptions : Enum {
    public int value__;
    public static JsonForClauseOptions None;
    public static JsonForClauseOptions Auto;
    public static JsonForClauseOptions Path;
    public static JsonForClauseOptions Root;
    public static JsonForClauseOptions IncludeNullValues;
    public static JsonForClauseOptions WithoutArrayWrapper;
}
internal class Microsoft.SqlServer.TransactSql.ScriptDom.JsonForClauseOptionsHelper : OptionsHelper`1<JsonForClauseOptions> {
    internal static JsonForClauseOptionsHelper Instance;
    private static JsonForClauseOptionsHelper();
}
public abstract class Microsoft.SqlServer.TransactSql.ScriptDom.KeyOption : TSqlFragment {
    private KeyOptionKind _optionKind;
    public KeyOptionKind OptionKind { get; public set; }
    public KeyOptionKind get_OptionKind();
    public void set_OptionKind(KeyOptionKind value);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public enum Microsoft.SqlServer.TransactSql.ScriptDom.KeyOptionKind : Enum {
    public int value__;
    public static KeyOptionKind KeySource;
    public static KeyOptionKind Algorithm;
    public static KeyOptionKind IdentityValue;
    public static KeyOptionKind ProviderKeyName;
    public static KeyOptionKind CreationDisposition;
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.KeySourceKeyOption : KeyOption {
    private Literal _passPhrase;
    public Literal PassPhrase { get; public set; }
    public Literal get_PassPhrase();
    public void set_PassPhrase(Literal value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public enum Microsoft.SqlServer.TransactSql.ScriptDom.KeywordCasing : Enum {
    public int value__;
    public static KeywordCasing Lowercase;
    public static KeywordCasing Uppercase;
    public static KeywordCasing PascalCase;
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.KillQueryNotificationSubscriptionStatement : TSqlStatement {
    private Literal _subscriptionId;
    private bool _all;
    public Literal SubscriptionId { get; public set; }
    public bool All { get; public set; }
    public Literal get_SubscriptionId();
    public void set_SubscriptionId(Literal value);
    public bool get_All();
    public void set_All(bool value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.KillStatement : TSqlStatement {
    private ScalarExpression _parameter;
    private bool _withStatusOnly;
    public ScalarExpression Parameter { get; public set; }
    public bool WithStatusOnly { get; public set; }
    public ScalarExpression get_Parameter();
    public void set_Parameter(ScalarExpression value);
    public bool get_WithStatusOnly();
    public void set_WithStatusOnly(bool value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.KillStatsJobStatement : TSqlStatement {
    private ScalarExpression _jobId;
    public ScalarExpression JobId { get; public set; }
    public ScalarExpression get_JobId();
    public void set_JobId(ScalarExpression value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.LabelStatement : TSqlStatement {
    private string _value;
    public string Value { get; public set; }
    public string get_Value();
    public void set_Value(string value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.LedgerOption : DatabaseOption {
    private OptionState _optionState;
    public OptionState OptionState { get; public set; }
    public OptionState get_OptionState();
    public void set_OptionState(OptionState value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.LedgerTableOption : TableOption {
    private OptionState _optionState;
    private OptionState _appendOnly;
    private LedgerViewOption _ledgerViewOption;
    public OptionState OptionState { get; public set; }
    public OptionState AppendOnly { get; public set; }
    public LedgerViewOption LedgerViewOption { get; public set; }
    public OptionState get_OptionState();
    public void set_OptionState(OptionState value);
    public OptionState get_AppendOnly();
    public void set_AppendOnly(OptionState value);
    public LedgerViewOption get_LedgerViewOption();
    public void set_LedgerViewOption(LedgerViewOption value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.LedgerViewOption : TableOption {
    private SchemaObjectName _viewName;
    private Identifier _transactionIdColumnName;
    private Identifier _sequenceNumberColumnName;
    private Identifier _operationTypeColumnName;
    private Identifier _operationTypeDescColumnName;
    public SchemaObjectName ViewName { get; public set; }
    public Identifier TransactionIdColumnName { get; public set; }
    public Identifier SequenceNumberColumnName { get; public set; }
    public Identifier OperationTypeColumnName { get; public set; }
    public Identifier OperationTypeDescColumnName { get; public set; }
    public SchemaObjectName get_ViewName();
    public void set_ViewName(SchemaObjectName value);
    public Identifier get_TransactionIdColumnName();
    public void set_TransactionIdColumnName(Identifier value);
    public Identifier get_SequenceNumberColumnName();
    public void set_SequenceNumberColumnName(Identifier value);
    public Identifier get_OperationTypeColumnName();
    public void set_OperationTypeColumnName(Identifier value);
    public Identifier get_OperationTypeDescColumnName();
    public void set_OperationTypeDescColumnName(Identifier value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.LeftFunctionCall : PrimaryExpression {
    private List`1<ScalarExpression> _parameters;
    public IList`1<ScalarExpression> Parameters { get; }
    public IList`1<ScalarExpression> get_Parameters();
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.LikePredicate : BooleanExpression {
    private ScalarExpression _firstExpression;
    private ScalarExpression _secondExpression;
    private bool _notDefined;
    private bool _odbcEscape;
    private ScalarExpression _escapeExpression;
    public ScalarExpression FirstExpression { get; public set; }
    public ScalarExpression SecondExpression { get; public set; }
    public bool NotDefined { get; public set; }
    public bool OdbcEscape { get; public set; }
    public ScalarExpression EscapeExpression { get; public set; }
    public ScalarExpression get_FirstExpression();
    public void set_FirstExpression(ScalarExpression value);
    public ScalarExpression get_SecondExpression();
    public void set_SecondExpression(ScalarExpression value);
    public bool get_NotDefined();
    public void set_NotDefined(bool value);
    public bool get_OdbcEscape();
    public void set_OdbcEscape(bool value);
    public ScalarExpression get_EscapeExpression();
    public void set_EscapeExpression(ScalarExpression value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.LineNoStatement : TSqlStatement {
    private IntegerLiteral _lineNo;
    public IntegerLiteral LineNo { get; public set; }
    public IntegerLiteral get_LineNo();
    public void set_LineNo(IntegerLiteral value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.ListenerIPEndpointProtocolOption : EndpointProtocolOption {
    private bool _isAll;
    private Literal _iPv6;
    private IPv4 _iPv4PartOne;
    private IPv4 _iPv4PartTwo;
    public bool IsAll { get; public set; }
    public Literal IPv6 { get; public set; }
    public IPv4 IPv4PartOne { get; public set; }
    public IPv4 IPv4PartTwo { get; public set; }
    public bool get_IsAll();
    public void set_IsAll(bool value);
    public Literal get_IPv6();
    public void set_IPv6(Literal value);
    public IPv4 get_IPv4PartOne();
    public void set_IPv4PartOne(IPv4 value);
    public IPv4 get_IPv4PartTwo();
    public void set_IPv4PartTwo(IPv4 value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.ListTypeCopyOption : CopyStatementOptionBase {
    private List`1<CopyStatementOptionBase> _options;
    public IList`1<CopyStatementOptionBase> Options { get; }
    public IList`1<CopyStatementOptionBase> get_Options();
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public abstract class Microsoft.SqlServer.TransactSql.ScriptDom.Literal : ValueExpression {
    private string _value;
    public LiteralType LiteralType { get; }
    public string Value { get; public set; }
    public abstract virtual LiteralType get_LiteralType();
    public string get_Value();
    public void set_Value(string value);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.LiteralAtomicBlockOption : AtomicBlockOption {
    private Literal _value;
    public Literal Value { get; public set; }
    public Literal get_Value();
    public void set_Value(Literal value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.LiteralAuditTargetOption : AuditTargetOption {
    private Literal _value;
    public Literal Value { get; public set; }
    public Literal get_Value();
    public void set_Value(Literal value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.LiteralAvailabilityGroupOption : AvailabilityGroupOption {
    private Literal _value;
    public Literal Value { get; public set; }
    public Literal get_Value();
    public void set_Value(Literal value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.LiteralBulkInsertOption : BulkInsertOption {
    private Literal _value;
    public Literal Value { get; public set; }
    public Literal get_Value();
    public void set_Value(Literal value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.LiteralDatabaseOption : DatabaseOption {
    private Literal _value;
    public Literal Value { get; public set; }
    public Literal get_Value();
    public void set_Value(Literal value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.LiteralEndpointProtocolOption : EndpointProtocolOption {
    private Literal _value;
    public Literal Value { get; public set; }
    public Literal get_Value();
    public void set_Value(Literal value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.LiteralOptimizerHint : OptimizerHint {
    private Literal _value;
    public Literal Value { get; public set; }
    public Literal get_Value();
    public void set_Value(Literal value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.LiteralOptionValue : OptionValue {
    private Literal _value;
    public Literal Value { get; public set; }
    public Literal get_Value();
    public void set_Value(Literal value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.LiteralPayloadOption : PayloadOption {
    private Literal _value;
    public Literal Value { get; public set; }
    public Literal get_Value();
    public void set_Value(Literal value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.LiteralPrincipalOption : PrincipalOption {
    private Literal _value;
    public Literal Value { get; public set; }
    public Literal get_Value();
    public void set_Value(Literal value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.LiteralRange : TSqlFragment {
    private Literal _from;
    private Literal _to;
    public Literal From { get; public set; }
    public Literal To { get; public set; }
    public Literal get_From();
    public void set_From(Literal value);
    public Literal get_To();
    public void set_To(Literal value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.LiteralReplicaOption : AvailabilityReplicaOption {
    private Literal _value;
    public Literal Value { get; public set; }
    public Literal get_Value();
    public void set_Value(Literal value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.LiteralSessionOption : SessionOption {
    private Literal _value;
    private MemoryUnit _unit;
    public Literal Value { get; public set; }
    public MemoryUnit Unit { get; public set; }
    public Literal get_Value();
    public void set_Value(Literal value);
    public MemoryUnit get_Unit();
    public void set_Unit(MemoryUnit value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.LiteralStatisticsOption : StatisticsOption {
    private Literal _literal;
    public Literal Literal { get; public set; }
    public Literal get_Literal();
    public void set_Literal(Literal value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.LiteralTableHint : TableHint {
    private Literal _value;
    public Literal Value { get; public set; }
    public Literal get_Value();
    public void set_Value(Literal value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public enum Microsoft.SqlServer.TransactSql.ScriptDom.LiteralType : Enum {
    public int value__;
    public static LiteralType Integer;
    public static LiteralType Real;
    public static LiteralType Money;
    public static LiteralType Binary;
    public static LiteralType String;
    public static LiteralType Null;
    public static LiteralType Default;
    public static LiteralType Max;
    public static LiteralType Odbc;
    public static LiteralType Identifier;
    public static LiteralType Numeric;
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.LocationOption : TableOption {
    private Identifier _locationValue;
    public Identifier LocationValue { get; public set; }
    public Identifier get_LocationValue();
    public void set_LocationValue(Identifier value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public enum Microsoft.SqlServer.TransactSql.ScriptDom.LockEscalationMethod : Enum {
    public int value__;
    public static LockEscalationMethod Table;
    public static LockEscalationMethod Auto;
    public static LockEscalationMethod Disable;
}
internal class Microsoft.SqlServer.TransactSql.ScriptDom.LockEscalationMethodHelper : OptionsHelper`1<LockEscalationMethod> {
    public static LockEscalationMethodHelper Instance;
    private static LockEscalationMethodHelper();
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.LockEscalationTableOption : TableOption {
    private LockEscalationMethod _value;
    public LockEscalationMethod Value { get; public set; }
    public LockEscalationMethod get_Value();
    public void set_Value(LockEscalationMethod value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.LoginTypePayloadOption : PayloadOption {
    private bool _isWindows;
    public bool IsWindows { get; public set; }
    public bool get_IsWindows();
    public void set_IsWindows(bool value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.LowPriorityLockWaitAbortAfterWaitOption : LowPriorityLockWaitOption {
    private AbortAfterWaitType _abortAfterWait;
    public AbortAfterWaitType AbortAfterWait { get; public set; }
    public AbortAfterWaitType get_AbortAfterWait();
    public void set_AbortAfterWait(AbortAfterWaitType value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.LowPriorityLockWaitMaxDurationOption : LowPriorityLockWaitOption {
    private Literal _maxDuration;
    private Nullable`1<TimeUnit> _unit;
    public Literal MaxDuration { get; public set; }
    public Nullable`1<TimeUnit> Unit { get; public set; }
    public Literal get_MaxDuration();
    public void set_MaxDuration(Literal value);
    public Nullable`1<TimeUnit> get_Unit();
    public void set_Unit(Nullable`1<TimeUnit> value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
internal class Microsoft.SqlServer.TransactSql.ScriptDom.LowPriorityLockWaitMaxDurationTimeUnitHelper : OptionsHelper`1<TimeUnit> {
    internal static LowPriorityLockWaitMaxDurationTimeUnitHelper Instance;
    private static LowPriorityLockWaitMaxDurationTimeUnitHelper();
}
public abstract class Microsoft.SqlServer.TransactSql.ScriptDom.LowPriorityLockWaitOption : TSqlFragment {
    private LowPriorityLockWaitOptionKind _optionKind;
    public LowPriorityLockWaitOptionKind OptionKind { get; public set; }
    public LowPriorityLockWaitOptionKind get_OptionKind();
    public void set_OptionKind(LowPriorityLockWaitOptionKind value);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public enum Microsoft.SqlServer.TransactSql.ScriptDom.LowPriorityLockWaitOptionKind : Enum {
    public int value__;
    public static LowPriorityLockWaitOptionKind MaxDuration;
    public static LowPriorityLockWaitOptionKind AbortAfterWait;
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.LowPriorityLockWaitTableSwitchOption : TableSwitchOption {
    private List`1<LowPriorityLockWaitOption> _options;
    public IList`1<LowPriorityLockWaitOption> Options { get; }
    public IList`1<LowPriorityLockWaitOption> get_Options();
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public abstract class Microsoft.SqlServer.TransactSql.ScriptDom.MasterKeyStatement : TSqlStatement {
    private Literal _password;
    public Literal Password { get; public set; }
    public Literal get_Password();
    public void set_Password(Literal value);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.MaxDispatchLatencySessionOption : SessionOption {
    private bool _isInfinite;
    private Literal _value;
    public bool IsInfinite { get; public set; }
    public Literal Value { get; public set; }
    public bool get_IsInfinite();
    public void set_IsInfinite(bool value);
    public Literal get_Value();
    public void set_Value(Literal value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.MaxDopConfigurationOption : DatabaseConfigurationSetOption {
    private Literal _value;
    private bool _primary;
    public Literal Value { get; public set; }
    public bool Primary { get; public set; }
    public Literal get_Value();
    public void set_Value(Literal value);
    public bool get_Primary();
    public void set_Primary(bool value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.MaxDurationOption : IndexOption {
    private Literal _maxDuration;
    private Nullable`1<TimeUnit> _unit;
    public Literal MaxDuration { get; public set; }
    public Nullable`1<TimeUnit> Unit { get; public set; }
    public Literal get_MaxDuration();
    public void set_MaxDuration(Literal value);
    public Nullable`1<TimeUnit> get_Unit();
    public void set_Unit(Nullable`1<TimeUnit> value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.MaxLiteral : Literal {
    public LiteralType LiteralType { get; }
    public virtual LiteralType get_LiteralType();
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.MaxRolloverFilesAuditTargetOption : AuditTargetOption {
    private Literal _value;
    private bool _isUnlimited;
    public Literal Value { get; public set; }
    public bool IsUnlimited { get; public set; }
    public Literal get_Value();
    public void set_Value(Literal value);
    public bool get_IsUnlimited();
    public void set_IsUnlimited(bool value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.MaxSizeAuditTargetOption : AuditTargetOption {
    private bool _isUnlimited;
    private Literal _size;
    private MemoryUnit _unit;
    public bool IsUnlimited { get; public set; }
    public Literal Size { get; public set; }
    public MemoryUnit Unit { get; public set; }
    public bool get_IsUnlimited();
    public void set_IsUnlimited(bool value);
    public Literal get_Size();
    public void set_Size(Literal value);
    public MemoryUnit get_Unit();
    public void set_Unit(MemoryUnit value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.MaxSizeDatabaseOption : DatabaseOption {
    private Literal _maxSize;
    private MemoryUnit _units;
    public Literal MaxSize { get; public set; }
    public MemoryUnit Units { get; public set; }
    public Literal get_MaxSize();
    public void set_MaxSize(Literal value);
    public MemoryUnit get_Units();
    public void set_Units(MemoryUnit value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.MaxSizeFileDeclarationOption : FileDeclarationOption {
    private Literal _maxSize;
    private MemoryUnit _units;
    private bool _unlimited;
    public Literal MaxSize { get; public set; }
    public MemoryUnit Units { get; public set; }
    public bool Unlimited { get; public set; }
    public Literal get_MaxSize();
    public void set_MaxSize(Literal value);
    public MemoryUnit get_Units();
    public void set_Units(MemoryUnit value);
    public bool get_Unlimited();
    public void set_Unlimited(bool value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.MemoryOptimizedTableOption : TableOption {
    private OptionState _optionState;
    public OptionState OptionState { get; public set; }
    public OptionState get_OptionState();
    public void set_OptionState(OptionState value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.MemoryPartitionSessionOption : SessionOption {
    private EventSessionMemoryPartitionModeType _value;
    public EventSessionMemoryPartitionModeType Value { get; public set; }
    public EventSessionMemoryPartitionModeType get_Value();
    public void set_Value(EventSessionMemoryPartitionModeType value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public enum Microsoft.SqlServer.TransactSql.ScriptDom.MemoryUnit : Enum {
    public int value__;
    public static MemoryUnit Unspecified;
    public static MemoryUnit Percent;
    public static MemoryUnit Bytes;
    public static MemoryUnit KB;
    public static MemoryUnit MB;
    public static MemoryUnit GB;
    public static MemoryUnit TB;
    public static MemoryUnit PB;
    public static MemoryUnit EB;
}
internal class Microsoft.SqlServer.TransactSql.ScriptDom.MemoryUnitsHelper : OptionsHelper`1<MemoryUnit> {
    internal static MemoryUnitsHelper Instance;
    private static MemoryUnitsHelper();
}
public abstract class Microsoft.SqlServer.TransactSql.ScriptDom.MergeAction : TSqlFragment {
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.MergeActionClause : TSqlFragment {
    private MergeCondition _condition;
    private BooleanExpression _searchCondition;
    private MergeAction _action;
    public MergeCondition Condition { get; public set; }
    public BooleanExpression SearchCondition { get; public set; }
    public MergeAction Action { get; public set; }
    public MergeCondition get_Condition();
    public void set_Condition(MergeCondition value);
    public BooleanExpression get_SearchCondition();
    public void set_SearchCondition(BooleanExpression value);
    public MergeAction get_Action();
    public void set_Action(MergeAction value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public enum Microsoft.SqlServer.TransactSql.ScriptDom.MergeCondition : Enum {
    public int value__;
    public static MergeCondition NotSpecified;
    public static MergeCondition Matched;
    public static MergeCondition NotMatched;
    public static MergeCondition NotMatchedByTarget;
    public static MergeCondition NotMatchedBySource;
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.MergeSpecification : DataModificationSpecification {
    private Identifier _tableAlias;
    private TableReference _tableReference;
    private BooleanExpression _searchCondition;
    private List`1<MergeActionClause> _actionClauses;
    public Identifier TableAlias { get; public set; }
    public TableReference TableReference { get; public set; }
    public BooleanExpression SearchCondition { get; public set; }
    public IList`1<MergeActionClause> ActionClauses { get; }
    public Identifier get_TableAlias();
    public void set_TableAlias(Identifier value);
    public TableReference get_TableReference();
    public void set_TableReference(TableReference value);
    public BooleanExpression get_SearchCondition();
    public void set_SearchCondition(BooleanExpression value);
    public IList`1<MergeActionClause> get_ActionClauses();
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.MergeStatement : DataModificationStatement {
    private MergeSpecification _mergeSpecification;
    public MergeSpecification MergeSpecification { get; public set; }
    public MergeSpecification get_MergeSpecification();
    public void set_MergeSpecification(MergeSpecification value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public enum Microsoft.SqlServer.TransactSql.ScriptDom.MessageSender : Enum {
    public int value__;
    public static MessageSender None;
    public static MessageSender Initiator;
    public static MessageSender Target;
    public static MessageSender Any;
}
public abstract class Microsoft.SqlServer.TransactSql.ScriptDom.MessageTypeStatementBase : TSqlStatement {
    private Identifier _name;
    private MessageValidationMethod _validationMethod;
    private SchemaObjectName _xmlSchemaCollectionName;
    public Identifier Name { get; public set; }
    public MessageValidationMethod ValidationMethod { get; public set; }
    public SchemaObjectName XmlSchemaCollectionName { get; public set; }
    public Identifier get_Name();
    public void set_Name(Identifier value);
    public MessageValidationMethod get_ValidationMethod();
    public void set_ValidationMethod(MessageValidationMethod value);
    public SchemaObjectName get_XmlSchemaCollectionName();
    public void set_XmlSchemaCollectionName(SchemaObjectName value);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public enum Microsoft.SqlServer.TransactSql.ScriptDom.MessageValidationMethod : Enum {
    public int value__;
    public static MessageValidationMethod NotSpecified;
    public static MessageValidationMethod None;
    public static MessageValidationMethod Empty;
    public static MessageValidationMethod WellFormedXml;
    public static MessageValidationMethod ValidXml;
}
internal class Microsoft.SqlServer.TransactSql.ScriptDom.MessageValidationMethodsHelper : OptionsHelper`1<MessageValidationMethod> {
    internal static MessageValidationMethodsHelper Instance;
    private static MessageValidationMethodsHelper();
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.MethodSpecifier : TSqlFragment {
    private Identifier _assemblyName;
    private Identifier _className;
    private Identifier _methodName;
    public Identifier AssemblyName { get; public set; }
    public Identifier ClassName { get; public set; }
    public Identifier MethodName { get; public set; }
    public Identifier get_AssemblyName();
    public void set_AssemblyName(Identifier value);
    public Identifier get_ClassName();
    public void set_ClassName(Identifier value);
    public Identifier get_MethodName();
    public void set_MethodName(Identifier value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public enum Microsoft.SqlServer.TransactSql.ScriptDom.MigrationState : Enum {
    public int value__;
    public static MigrationState Paused;
    public static MigrationState Outbound;
    public static MigrationState Inbound;
}
internal class Microsoft.SqlServer.TransactSql.ScriptDom.MigrationStateHelper : OptionsHelper`1<MigrationState> {
    public static MigrationStateHelper Instance;
    private static MigrationStateHelper();
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.MirrorToClause : TSqlFragment {
    private List`1<DeviceInfo> _devices;
    public IList`1<DeviceInfo> Devices { get; }
    public IList`1<DeviceInfo> get_Devices();
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public enum Microsoft.SqlServer.TransactSql.ScriptDom.ModifyFileGroupOption : Enum {
    public int value__;
    public static ModifyFileGroupOption None;
    public static ModifyFileGroupOption ReadWrite;
    public static ModifyFileGroupOption ReadWriteOld;
    public static ModifyFileGroupOption ReadOnly;
    public static ModifyFileGroupOption ReadOnlyOld;
    public static ModifyFileGroupOption AutogrowAllFiles;
    public static ModifyFileGroupOption AutogrowSingleFile;
}
internal class Microsoft.SqlServer.TransactSql.ScriptDom.ModifyFilegroupOptionsHelper : OptionsHelper`1<ModifyFileGroupOption> {
    internal static ModifyFilegroupOptionsHelper Instance;
    private static ModifyFilegroupOptionsHelper();
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.MoneyLiteral : Literal {
    public LiteralType LiteralType { get; }
    public virtual LiteralType get_LiteralType();
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
internal class Microsoft.SqlServer.TransactSql.ScriptDom.MonoOptimizerHintHelper : OptionsHelper`1<OptimizerHintKind> {
    internal static MonoOptimizerHintHelper Instance;
    private static MonoOptimizerHintHelper();
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.MoveConversationStatement : TSqlStatement {
    private ScalarExpression _conversation;
    private ScalarExpression _group;
    public ScalarExpression Conversation { get; public set; }
    public ScalarExpression Group { get; public set; }
    public ScalarExpression get_Conversation();
    public void set_Conversation(ScalarExpression value);
    public ScalarExpression get_Group();
    public void set_Group(ScalarExpression value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.MoveRestoreOption : RestoreOption {
    private ValueExpression _logicalFileName;
    private ValueExpression _oSFileName;
    public ValueExpression LogicalFileName { get; public set; }
    public ValueExpression OSFileName { get; public set; }
    public ValueExpression get_LogicalFileName();
    public void set_LogicalFileName(ValueExpression value);
    public ValueExpression get_OSFileName();
    public void set_OSFileName(ValueExpression value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.MoveToDropIndexOption : IndexOption {
    private FileGroupOrPartitionScheme _moveTo;
    public FileGroupOrPartitionScheme MoveTo { get; public set; }
    public FileGroupOrPartitionScheme get_MoveTo();
    public void set_MoveTo(FileGroupOrPartitionScheme value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
[DefaultMemberAttribute("Item")]
public class Microsoft.SqlServer.TransactSql.ScriptDom.MultiPartIdentifier : TSqlFragment {
    private List`1<Identifier> _identifiers;
    public Identifier Item { get; public set; }
    public int Count { get; }
    public IList`1<Identifier> Identifiers { get; }
    public Identifier get_Item(int index);
    public void set_Item(int index, Identifier value);
    public int get_Count();
    public IList`1<Identifier> get_Identifiers();
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.MultiPartIdentifierCallTarget : CallTarget {
    private MultiPartIdentifier _multiPartIdentifier;
    public MultiPartIdentifier MultiPartIdentifier { get; public set; }
    public MultiPartIdentifier get_MultiPartIdentifier();
    public void set_MultiPartIdentifier(MultiPartIdentifier value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.NamedTableReference : TableReferenceWithAlias {
    private SchemaObjectName _schemaObject;
    private List`1<TableHint> _tableHints;
    private TableSampleClause _tableSampleClause;
    private TemporalClause _temporalClause;
    public SchemaObjectName SchemaObject { get; public set; }
    public IList`1<TableHint> TableHints { get; }
    public TableSampleClause TableSampleClause { get; public set; }
    public TemporalClause TemporalClause { get; public set; }
    public SchemaObjectName get_SchemaObject();
    public void set_SchemaObject(SchemaObjectName value);
    public IList`1<TableHint> get_TableHints();
    public TableSampleClause get_TableSampleClause();
    public void set_TableSampleClause(TableSampleClause value);
    public TemporalClause get_TemporalClause();
    public void set_TemporalClause(TemporalClause value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.NameFileDeclarationOption : FileDeclarationOption {
    private IdentifierOrValueExpression _logicalFileName;
    private bool _isNewName;
    public IdentifierOrValueExpression LogicalFileName { get; public set; }
    public bool IsNewName { get; public set; }
    public IdentifierOrValueExpression get_LogicalFileName();
    public void set_LogicalFileName(IdentifierOrValueExpression value);
    public bool get_IsNewName();
    public void set_IsNewName(bool value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.NextValueForExpression : PrimaryExpression {
    private SchemaObjectName _sequenceName;
    private OverClause _overClause;
    public SchemaObjectName SequenceName { get; public set; }
    public OverClause OverClause { get; public set; }
    public SchemaObjectName get_SequenceName();
    public void set_SequenceName(SchemaObjectName value);
    public OverClause get_OverClause();
    public void set_OverClause(OverClause value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public enum Microsoft.SqlServer.TransactSql.ScriptDom.NonTransactedFileStreamAccess : Enum {
    public int value__;
    public static NonTransactedFileStreamAccess Off;
    public static NonTransactedFileStreamAccess ReadOnly;
    public static NonTransactedFileStreamAccess Full;
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.NullableConstraintDefinition : ConstraintDefinition {
    private bool _nullable;
    public bool Nullable { get; public set; }
    public bool get_Nullable();
    public void set_Nullable(bool value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.NullIfExpression : PrimaryExpression {
    private ScalarExpression _firstExpression;
    private ScalarExpression _secondExpression;
    public ScalarExpression FirstExpression { get; public set; }
    public ScalarExpression SecondExpression { get; public set; }
    public ScalarExpression get_FirstExpression();
    public void set_FirstExpression(ScalarExpression value);
    public ScalarExpression get_SecondExpression();
    public void set_SecondExpression(ScalarExpression value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.NullLiteral : Literal {
    public LiteralType LiteralType { get; }
    public virtual LiteralType get_LiteralType();
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public enum Microsoft.SqlServer.TransactSql.ScriptDom.NullNotNull : Enum {
    public int value__;
    public static NullNotNull NotSpecified;
    public static NullNotNull Null;
    public static NullNotNull NotNull;
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.NumericLiteral : Literal {
    public LiteralType LiteralType { get; }
    public virtual LiteralType get_LiteralType();
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.OdbcConvertSpecification : ScalarExpression {
    private Identifier _identifier;
    public Identifier Identifier { get; public set; }
    public Identifier get_Identifier();
    public void set_Identifier(Identifier value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.OdbcFunctionCall : PrimaryExpression {
    private Identifier _name;
    private bool _parametersUsed;
    private List`1<ScalarExpression> _parameters;
    public Identifier Name { get; public set; }
    public bool ParametersUsed { get; public set; }
    public IList`1<ScalarExpression> Parameters { get; }
    public Identifier get_Name();
    public void set_Name(Identifier value);
    public bool get_ParametersUsed();
    public void set_ParametersUsed(bool value);
    public IList`1<ScalarExpression> get_Parameters();
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.OdbcLiteral : Literal {
    private OdbcLiteralType _odbcLiteralType;
    private bool _isNational;
    public LiteralType LiteralType { get; }
    public OdbcLiteralType OdbcLiteralType { get; public set; }
    public bool IsNational { get; public set; }
    public virtual LiteralType get_LiteralType();
    public OdbcLiteralType get_OdbcLiteralType();
    public void set_OdbcLiteralType(OdbcLiteralType value);
    public bool get_IsNational();
    public void set_IsNational(bool value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public enum Microsoft.SqlServer.TransactSql.ScriptDom.OdbcLiteralType : Enum {
    public int value__;
    public static OdbcLiteralType Time;
    public static OdbcLiteralType Date;
    public static OdbcLiteralType Timestamp;
    public static OdbcLiteralType Guid;
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.OdbcQualifiedJoinTableReference : TableReference {
    private TableReference _tableReference;
    public TableReference TableReference { get; public set; }
    public TableReference get_TableReference();
    public void set_TableReference(TableReference value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.OffsetClause : TSqlFragment {
    private ScalarExpression _offsetExpression;
    private ScalarExpression _fetchExpression;
    public ScalarExpression OffsetExpression { get; public set; }
    public ScalarExpression FetchExpression { get; public set; }
    public ScalarExpression get_OffsetExpression();
    public void set_OffsetExpression(ScalarExpression value);
    public ScalarExpression get_FetchExpression();
    public void set_FetchExpression(ScalarExpression value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.OnFailureAuditOption : AuditOption {
    private AuditFailureActionType _onFailureAction;
    public AuditFailureActionType OnFailureAction { get; public set; }
    public AuditFailureActionType get_OnFailureAction();
    public void set_OnFailureAction(AuditFailureActionType value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.OnlineIndexLowPriorityLockWaitOption : TSqlFragment {
    private List`1<LowPriorityLockWaitOption> _options;
    public IList`1<LowPriorityLockWaitOption> Options { get; }
    public IList`1<LowPriorityLockWaitOption> get_Options();
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.OnlineIndexOption : IndexStateOption {
    private OnlineIndexLowPriorityLockWaitOption _lowPriorityLockWaitOption;
    public OnlineIndexLowPriorityLockWaitOption LowPriorityLockWaitOption { get; public set; }
    public OnlineIndexLowPriorityLockWaitOption get_LowPriorityLockWaitOption();
    public void set_LowPriorityLockWaitOption(OnlineIndexLowPriorityLockWaitOption value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.OnOffAssemblyOption : AssemblyOption {
    private OptionState _optionState;
    public OptionState OptionState { get; public set; }
    public OptionState get_OptionState();
    public void set_OptionState(OptionState value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.OnOffAtomicBlockOption : AtomicBlockOption {
    private OptionState _optionState;
    public OptionState OptionState { get; public set; }
    public OptionState get_OptionState();
    public void set_OptionState(OptionState value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.OnOffAuditTargetOption : AuditTargetOption {
    private OptionState _value;
    public OptionState Value { get; public set; }
    public OptionState get_Value();
    public void set_Value(OptionState value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.OnOffDatabaseOption : DatabaseOption {
    private OptionState _optionState;
    public OptionState OptionState { get; public set; }
    public OptionState get_OptionState();
    public void set_OptionState(OptionState value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.OnOffDialogOption : DialogOption {
    private OptionState _optionState;
    public OptionState OptionState { get; public set; }
    public OptionState get_OptionState();
    public void set_OptionState(OptionState value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.OnOffFullTextCatalogOption : FullTextCatalogOption {
    private OptionState _optionState;
    public OptionState OptionState { get; public set; }
    public OptionState get_OptionState();
    public void set_OptionState(OptionState value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.OnOffOptionValue : OptionValue {
    private OptionState _optionState;
    public OptionState OptionState { get; public set; }
    public OptionState get_OptionState();
    public void set_OptionState(OptionState value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.OnOffPrimaryConfigurationOption : DatabaseConfigurationSetOption {
    private DatabaseConfigurationOptionState _optionState;
    public DatabaseConfigurationOptionState OptionState { get; public set; }
    public DatabaseConfigurationOptionState get_OptionState();
    public void set_OptionState(DatabaseConfigurationOptionState value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.OnOffPrincipalOption : PrincipalOption {
    private OptionState _optionState;
    public OptionState OptionState { get; public set; }
    public OptionState get_OptionState();
    public void set_OptionState(OptionState value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.OnOffRemoteServiceBindingOption : RemoteServiceBindingOption {
    private OptionState _optionState;
    public OptionState OptionState { get; public set; }
    public OptionState get_OptionState();
    public void set_OptionState(OptionState value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.OnOffSessionOption : SessionOption {
    private OptionState _optionState;
    public OptionState OptionState { get; public set; }
    public OptionState get_OptionState();
    public void set_OptionState(OptionState value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
internal class Microsoft.SqlServer.TransactSql.ScriptDom.OnOffSimpleDbOptionsHelper : OptionsHelper`1<DatabaseOptionKind> {
    internal static OnOffSimpleDbOptionsHelper Instance;
    private static OnOffSimpleDbOptionsHelper();
    internal bool RequiresEqualsSign(DatabaseOptionKind optionKind);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.OnOffStatisticsOption : StatisticsOption {
    private OptionState _optionState;
    public OptionState OptionState { get; public set; }
    public OptionState get_OptionState();
    public void set_OptionState(OptionState value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.OpenCursorStatement : CursorStatement {
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.OpenJsonTableReference : TableReferenceWithAlias {
    private ScalarExpression _variable;
    private ScalarExpression _rowPattern;
    private List`1<SchemaDeclarationItemOpenjson> _schemaDeclarationItems;
    public ScalarExpression Variable { get; public set; }
    public ScalarExpression RowPattern { get; public set; }
    public IList`1<SchemaDeclarationItemOpenjson> SchemaDeclarationItems { get; }
    public ScalarExpression get_Variable();
    public void set_Variable(ScalarExpression value);
    public ScalarExpression get_RowPattern();
    public void set_RowPattern(ScalarExpression value);
    public IList`1<SchemaDeclarationItemOpenjson> get_SchemaDeclarationItems();
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.OpenMasterKeyStatement : TSqlStatement {
    private Literal _password;
    public Literal Password { get; public set; }
    public Literal get_Password();
    public void set_Password(Literal value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.OpenQueryTableReference : TableReferenceWithAlias {
    private Identifier _linkedServer;
    private StringLiteral _query;
    public Identifier LinkedServer { get; public set; }
    public StringLiteral Query { get; public set; }
    public Identifier get_LinkedServer();
    public void set_LinkedServer(Identifier value);
    public StringLiteral get_Query();
    public void set_Query(StringLiteral value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
internal class Microsoft.SqlServer.TransactSql.ScriptDom.OpenRowsetBulkHintOptionsHelper : OptionsHelper`1<BulkInsertOptionKind> {
    internal static OpenRowsetBulkHintOptionsHelper Instance;
    private static OpenRowsetBulkHintOptionsHelper();
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.OpenRowsetTableReference : TableReferenceWithAlias {
    private StringLiteral _providerName;
    private StringLiteral _dataSource;
    private StringLiteral _userId;
    private StringLiteral _password;
    private StringLiteral _providerString;
    private StringLiteral _query;
    private SchemaObjectName _object;
    public StringLiteral ProviderName { get; public set; }
    public StringLiteral DataSource { get; public set; }
    public StringLiteral UserId { get; public set; }
    public StringLiteral Password { get; public set; }
    public StringLiteral ProviderString { get; public set; }
    public StringLiteral Query { get; public set; }
    public SchemaObjectName Object { get; public set; }
    public StringLiteral get_ProviderName();
    public void set_ProviderName(StringLiteral value);
    public StringLiteral get_DataSource();
    public void set_DataSource(StringLiteral value);
    public StringLiteral get_UserId();
    public void set_UserId(StringLiteral value);
    public StringLiteral get_Password();
    public void set_Password(StringLiteral value);
    public StringLiteral get_ProviderString();
    public void set_ProviderString(StringLiteral value);
    public StringLiteral get_Query();
    public void set_Query(StringLiteral value);
    public SchemaObjectName get_Object();
    public void set_Object(SchemaObjectName value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.OpenSymmetricKeyStatement : TSqlStatement {
    private Identifier _name;
    private CryptoMechanism _decryptionMechanism;
    public Identifier Name { get; public set; }
    public CryptoMechanism DecryptionMechanism { get; public set; }
    public Identifier get_Name();
    public void set_Name(Identifier value);
    public CryptoMechanism get_DecryptionMechanism();
    public void set_DecryptionMechanism(CryptoMechanism value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.OpenXmlTableReference : TableReferenceWithAlias {
    private VariableReference _variable;
    private ValueExpression _rowPattern;
    private ValueExpression _flags;
    private List`1<SchemaDeclarationItem> _schemaDeclarationItems;
    private SchemaObjectName _tableName;
    public VariableReference Variable { get; public set; }
    public ValueExpression RowPattern { get; public set; }
    public ValueExpression Flags { get; public set; }
    public IList`1<SchemaDeclarationItem> SchemaDeclarationItems { get; }
    public SchemaObjectName TableName { get; public set; }
    public VariableReference get_Variable();
    public void set_Variable(VariableReference value);
    public ValueExpression get_RowPattern();
    public void set_RowPattern(ValueExpression value);
    public ValueExpression get_Flags();
    public void set_Flags(ValueExpression value);
    public IList`1<SchemaDeclarationItem> get_SchemaDeclarationItems();
    public SchemaObjectName get_TableName();
    public void set_TableName(SchemaObjectName value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.OptimizeForOptimizerHint : OptimizerHint {
    private List`1<VariableValuePair> _pairs;
    private bool _isForUnknown;
    public IList`1<VariableValuePair> Pairs { get; }
    public bool IsForUnknown { get; public set; }
    public IList`1<VariableValuePair> get_Pairs();
    public bool get_IsForUnknown();
    public void set_IsForUnknown(bool value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.OptimizerHint : TSqlFragment {
    private OptimizerHintKind _hintKind;
    public OptimizerHintKind HintKind { get; public set; }
    public OptimizerHintKind get_HintKind();
    public void set_HintKind(OptimizerHintKind value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public enum Microsoft.SqlServer.TransactSql.ScriptDom.OptimizerHintKind : Enum {
    public int value__;
    public static OptimizerHintKind Unspecified;
    public static OptimizerHintKind HashGroup;
    public static OptimizerHintKind OrderGroup;
    public static OptimizerHintKind MergeJoin;
    public static OptimizerHintKind HashJoin;
    public static OptimizerHintKind LoopJoin;
    public static OptimizerHintKind ConcatUnion;
    public static OptimizerHintKind HashUnion;
    public static OptimizerHintKind MergeUnion;
    public static OptimizerHintKind KeepUnion;
    public static OptimizerHintKind ForceOrder;
    public static OptimizerHintKind RobustPlan;
    public static OptimizerHintKind KeepPlan;
    public static OptimizerHintKind KeepFixedPlan;
    public static OptimizerHintKind ExpandViews;
    public static OptimizerHintKind AlterColumnPlan;
    public static OptimizerHintKind ShrinkDBPlan;
    public static OptimizerHintKind BypassOptimizerQueue;
    public static OptimizerHintKind UsePlan;
    public static OptimizerHintKind ParameterizationSimple;
    public static OptimizerHintKind ParameterizationForced;
    public static OptimizerHintKind OptimizeCorrelatedUnionAll;
    public static OptimizerHintKind Recompile;
    public static OptimizerHintKind Fast;
    public static OptimizerHintKind CheckConstraintsPlan;
    public static OptimizerHintKind MaxRecursion;
    public static OptimizerHintKind MaxDop;
    public static OptimizerHintKind QueryTraceOn;
    public static OptimizerHintKind CardinalityTunerLimit;
    public static OptimizerHintKind TableHints;
    public static OptimizerHintKind OptimizeFor;
    public static OptimizerHintKind IgnoreNonClusteredColumnStoreIndex;
    public static OptimizerHintKind MaxGrantPercent;
    public static OptimizerHintKind MinGrantPercent;
    public static OptimizerHintKind NoPerformanceSpool;
    public static OptimizerHintKind Label;
}
internal abstract class Microsoft.SqlServer.TransactSql.ScriptDom.OptionsHelper`1 : object {
    private Dictionary`2<OptionType, OptionInfo<OptionType>> _optionToOptionInfo;
    private Dictionary`2<string, OptionInfo<OptionType>> _stringToOptionInfo;
    protected void AddOptionMapping(OptionType option, string identifier, SqlVersionFlags validVersions);
    protected void AddOptionMapping(OptionType option, TSqlTokenType tokenId, SqlVersionFlags validVersions);
    protected void AddOptionMapping(OptionType option, string identifier);
    protected void AddOptionMapping(OptionType option, TSqlTokenType tokenId);
    internal bool IsValidKeyword(IToken token);
    internal SqlVersionFlags MapSqlVersionToSqlVersionFlags(SqlVersion sqlVersion);
    internal OptionType ParseOption(IToken token, SqlVersionFlags version);
    internal bool TryParseOption(IToken token, SqlVersionFlags version, OptionType& returnValue);
    internal bool TryParseOption(string tokenString, SqlVersionFlags version, OptionType& returnValue);
    internal OptionType ParseOption(IToken token);
    internal bool TryParseOption(IToken token, OptionType& returnValue);
    protected virtual TSqlParseErrorException GetMatchingException(IToken token);
    internal void GenerateSourceForOption(ScriptWriter writer, OptionType option);
    internal bool TryGenerateSourceForOption(ScriptWriter writer, OptionType option);
    internal void GenerateCommaSeparatedFlagOptions(ScriptWriter writer, OptionType options);
}
public enum Microsoft.SqlServer.TransactSql.ScriptDom.OptionState : Enum {
    public int value__;
    public static OptionState NotSet;
    public static OptionState On;
    public static OptionState Off;
    public static OptionState Primary;
}
public abstract class Microsoft.SqlServer.TransactSql.ScriptDom.OptionValue : TSqlFragment {
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.OrderBulkInsertOption : BulkInsertOption {
    private List`1<ColumnWithSortOrder> _columns;
    private bool _isUnique;
    public IList`1<ColumnWithSortOrder> Columns { get; }
    public bool IsUnique { get; public set; }
    public IList`1<ColumnWithSortOrder> get_Columns();
    public bool get_IsUnique();
    public void set_IsUnique(bool value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.OrderByClause : TSqlFragment {
    private List`1<ExpressionWithSortOrder> _orderByElements;
    public IList`1<ExpressionWithSortOrder> OrderByElements { get; }
    public IList`1<ExpressionWithSortOrder> get_OrderByElements();
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.OrderIndexOption : IndexOption {
    private List`1<ColumnReferenceExpression> _columns;
    public IList`1<ColumnReferenceExpression> Columns { get; }
    public IList`1<ColumnReferenceExpression> get_Columns();
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.OutputClause : TSqlFragment {
    private List`1<SelectElement> _selectColumns;
    public IList`1<SelectElement> SelectColumns { get; }
    public IList`1<SelectElement> get_SelectColumns();
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.OutputIntoClause : TSqlFragment {
    private List`1<SelectElement> _selectColumns;
    private TableReference _intoTable;
    private List`1<ColumnReferenceExpression> _intoTableColumns;
    public IList`1<SelectElement> SelectColumns { get; }
    public TableReference IntoTable { get; public set; }
    public IList`1<ColumnReferenceExpression> IntoTableColumns { get; }
    public IList`1<SelectElement> get_SelectColumns();
    public TableReference get_IntoTable();
    public void set_IntoTable(TableReference value);
    public IList`1<ColumnReferenceExpression> get_IntoTableColumns();
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.OverClause : TSqlFragment {
    private List`1<ScalarExpression> _partitions;
    private OrderByClause _orderByClause;
    private WindowFrameClause _windowFrameClause;
    public IList`1<ScalarExpression> Partitions { get; }
    public OrderByClause OrderByClause { get; public set; }
    public WindowFrameClause WindowFrameClause { get; public set; }
    public IList`1<ScalarExpression> get_Partitions();
    public OrderByClause get_OrderByClause();
    public void set_OrderByClause(OrderByClause value);
    public WindowFrameClause get_WindowFrameClause();
    public void set_WindowFrameClause(WindowFrameClause value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.PageVerifyDatabaseOption : DatabaseOption {
    private PageVerifyDatabaseOptionKind _value;
    public PageVerifyDatabaseOptionKind Value { get; public set; }
    public PageVerifyDatabaseOptionKind get_Value();
    public void set_Value(PageVerifyDatabaseOptionKind value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public enum Microsoft.SqlServer.TransactSql.ScriptDom.PageVerifyDatabaseOptionKind : Enum {
    public int value__;
    public static PageVerifyDatabaseOptionKind None;
    public static PageVerifyDatabaseOptionKind Checksum;
    public static PageVerifyDatabaseOptionKind TornPageDetection;
}
internal class Microsoft.SqlServer.TransactSql.ScriptDom.PageVerifyDbOptionsHelper : OptionsHelper`1<PageVerifyDatabaseOptionKind> {
    internal static PageVerifyDbOptionsHelper Instance;
    private static PageVerifyDbOptionsHelper();
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.ParameterizationDatabaseOption : DatabaseOption {
    private bool _isSimple;
    public bool IsSimple { get; public set; }
    public bool get_IsSimple();
    public void set_IsSimple(bool value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public abstract class Microsoft.SqlServer.TransactSql.ScriptDom.ParameterizedDataTypeReference : DataTypeReference {
    private List`1<Literal> _parameters;
    public IList`1<Literal> Parameters { get; }
    public IList`1<Literal> get_Parameters();
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.ParameterlessCall : PrimaryExpression {
    private ParameterlessCallType _parameterlessCallType;
    public ParameterlessCallType ParameterlessCallType { get; public set; }
    public ParameterlessCallType get_ParameterlessCallType();
    public void set_ParameterlessCallType(ParameterlessCallType value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public enum Microsoft.SqlServer.TransactSql.ScriptDom.ParameterlessCallType : Enum {
    public int value__;
    public static ParameterlessCallType User;
    public static ParameterlessCallType CurrentUser;
    public static ParameterlessCallType SessionUser;
    public static ParameterlessCallType SystemUser;
    public static ParameterlessCallType CurrentTimestamp;
}
public enum Microsoft.SqlServer.TransactSql.ScriptDom.ParameterModifier : Enum {
    public int value__;
    public static ParameterModifier None;
    public static ParameterModifier Output;
    public static ParameterModifier ReadOnly;
}
public enum Microsoft.SqlServer.TransactSql.ScriptDom.ParameterStyle : Enum {
    public int value__;
    public static ParameterStyle None;
    public static ParameterStyle Sql;
    public static ParameterStyle General;
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.ParenthesisExpression : PrimaryExpression {
    private ScalarExpression _expression;
    public ScalarExpression Expression { get; public set; }
    public ScalarExpression get_Expression();
    public void set_Expression(ScalarExpression value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.ParseCall : PrimaryExpression {
    private ScalarExpression _stringValue;
    private DataTypeReference _dataType;
    private ScalarExpression _culture;
    public ScalarExpression StringValue { get; public set; }
    public DataTypeReference DataType { get; public set; }
    public ScalarExpression Culture { get; public set; }
    public ScalarExpression get_StringValue();
    public void set_StringValue(ScalarExpression value);
    public DataTypeReference get_DataType();
    public void set_DataType(DataTypeReference value);
    public ScalarExpression get_Culture();
    public void set_Culture(ScalarExpression value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.ParseError : object {
    private int _number;
    private int _offset;
    private int _line;
    private int _column;
    private string _message;
    public int Number { get; }
    public int Offset { get; }
    public int Line { get; }
    public int Column { get; }
    public string Message { get; }
    public ParseError(int number, int offset, int line, int column, string message);
    public int get_Number();
    public int get_Offset();
    public int get_Line();
    public int get_Column();
    public string get_Message();
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.PartitionFunctionCall : PrimaryExpression {
    private Identifier _databaseName;
    private Identifier _functionName;
    private List`1<ScalarExpression> _parameters;
    public Identifier DatabaseName { get; public set; }
    public Identifier FunctionName { get; public set; }
    public IList`1<ScalarExpression> Parameters { get; }
    public Identifier get_DatabaseName();
    public void set_DatabaseName(Identifier value);
    public Identifier get_FunctionName();
    public void set_FunctionName(Identifier value);
    public IList`1<ScalarExpression> get_Parameters();
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public enum Microsoft.SqlServer.TransactSql.ScriptDom.PartitionFunctionRange : Enum {
    public int value__;
    public static PartitionFunctionRange NotSpecified;
    public static PartitionFunctionRange Left;
    public static PartitionFunctionRange Right;
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.PartitionParameterType : TSqlFragment {
    private DataTypeReference _dataType;
    private Identifier _collation;
    public DataTypeReference DataType { get; public set; }
    public Identifier Collation { get; public set; }
    public DataTypeReference get_DataType();
    public void set_DataType(DataTypeReference value);
    public sealed virtual Identifier get_Collation();
    public sealed virtual void set_Collation(Identifier value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public abstract class Microsoft.SqlServer.TransactSql.ScriptDom.PartitionSpecifications : TSqlFragment {
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.PartitionSpecifier : TSqlFragment {
    private ScalarExpression _number;
    private bool _all;
    public ScalarExpression Number { get; public set; }
    public bool All { get; public set; }
    public ScalarExpression get_Number();
    public void set_Number(ScalarExpression value);
    public bool get_All();
    public void set_All(bool value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public enum Microsoft.SqlServer.TransactSql.ScriptDom.PartitionTableOptionRange : Enum {
    public int value__;
    public static PartitionTableOptionRange NotSpecified;
    public static PartitionTableOptionRange Left;
    public static PartitionTableOptionRange Right;
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.PartnerDatabaseOption : DatabaseOption {
    private Literal _partnerServer;
    private PartnerDatabaseOptionKind _partnerOption;
    private Literal _timeout;
    public Literal PartnerServer { get; public set; }
    public PartnerDatabaseOptionKind PartnerOption { get; public set; }
    public Literal Timeout { get; public set; }
    public Literal get_PartnerServer();
    public void set_PartnerServer(Literal value);
    public PartnerDatabaseOptionKind get_PartnerOption();
    public void set_PartnerOption(PartnerDatabaseOptionKind value);
    public Literal get_Timeout();
    public void set_Timeout(Literal value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public enum Microsoft.SqlServer.TransactSql.ScriptDom.PartnerDatabaseOptionKind : Enum {
    public int value__;
    public static PartnerDatabaseOptionKind None;
    public static PartnerDatabaseOptionKind PartnerServer;
    public static PartnerDatabaseOptionKind Failover;
    public static PartnerDatabaseOptionKind ForceServiceAllowDataLoss;
    public static PartnerDatabaseOptionKind Off;
    public static PartnerDatabaseOptionKind Resume;
    public static PartnerDatabaseOptionKind SafetyFull;
    public static PartnerDatabaseOptionKind SafetyOff;
    public static PartnerDatabaseOptionKind Suspend;
    public static PartnerDatabaseOptionKind Timeout;
}
internal class Microsoft.SqlServer.TransactSql.ScriptDom.PartnerDbOptionsHelper : OptionsHelper`1<PartnerDatabaseOptionKind> {
    public static PartnerDbOptionsHelper Instance;
    private static PartnerDbOptionsHelper();
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.PasswordAlterPrincipalOption : PrincipalOption {
    private Literal _password;
    private Literal _oldPassword;
    private bool _mustChange;
    private bool _unlock;
    private bool _hashed;
    public Literal Password { get; public set; }
    public Literal OldPassword { get; public set; }
    public bool MustChange { get; public set; }
    public bool Unlock { get; public set; }
    public bool Hashed { get; public set; }
    public Literal get_Password();
    public void set_Password(Literal value);
    public Literal get_OldPassword();
    public void set_OldPassword(Literal value);
    public bool get_MustChange();
    public void set_MustChange(bool value);
    public bool get_Unlock();
    public void set_Unlock(bool value);
    public bool get_Hashed();
    public void set_Hashed(bool value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.PasswordCreateLoginSource : CreateLoginSource {
    private Literal _password;
    private bool _hashed;
    private bool _mustChange;
    private List`1<PrincipalOption> _options;
    public Literal Password { get; public set; }
    public bool Hashed { get; public set; }
    public bool MustChange { get; public set; }
    public IList`1<PrincipalOption> Options { get; }
    public Literal get_Password();
    public void set_Password(Literal value);
    public bool get_Hashed();
    public void set_Hashed(bool value);
    public bool get_MustChange();
    public void set_MustChange(bool value);
    public IList`1<PrincipalOption> get_Options();
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public abstract class Microsoft.SqlServer.TransactSql.ScriptDom.PayloadOption : TSqlFragment {
    private PayloadOptionKinds _kind;
    public PayloadOptionKinds Kind { get; public set; }
    public PayloadOptionKinds get_Kind();
    public void set_Kind(PayloadOptionKinds value);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
[FlagsAttribute]
public enum Microsoft.SqlServer.TransactSql.ScriptDom.PayloadOptionKinds : Enum {
    public int value__;
    public static PayloadOptionKinds None;
    public static PayloadOptionKinds WebMethod;
    public static PayloadOptionKinds Batches;
    public static PayloadOptionKinds Wsdl;
    public static PayloadOptionKinds Sessions;
    public static PayloadOptionKinds LoginType;
    public static PayloadOptionKinds SessionTimeout;
    public static PayloadOptionKinds Database;
    public static PayloadOptionKinds Namespace;
    public static PayloadOptionKinds Schema;
    public static PayloadOptionKinds CharacterSet;
    public static PayloadOptionKinds HeaderLimit;
    public static PayloadOptionKinds Authentication;
    public static PayloadOptionKinds Encryption;
    public static PayloadOptionKinds MessageForwarding;
    public static PayloadOptionKinds MessageForwardSize;
    public static PayloadOptionKinds Role;
    public static PayloadOptionKinds SoapOptions;
    public static PayloadOptionKinds ServiceBrokerOptions;
    public static PayloadOptionKinds DatabaseMirroringOptions;
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.Permission : TSqlFragment {
    private List`1<Identifier> _identifiers;
    private List`1<Identifier> _columns;
    public IList`1<Identifier> Identifiers { get; }
    public IList`1<Identifier> Columns { get; }
    public IList`1<Identifier> get_Identifiers();
    public IList`1<Identifier> get_Columns();
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.PermissionSetAssemblyOption : AssemblyOption {
    private PermissionSetOption _permissionSetOption;
    public PermissionSetOption PermissionSetOption { get; public set; }
    public PermissionSetOption get_PermissionSetOption();
    public void set_PermissionSetOption(PermissionSetOption value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public enum Microsoft.SqlServer.TransactSql.ScriptDom.PermissionSetOption : Enum {
    public int value__;
    public static PermissionSetOption None;
    public static PermissionSetOption Safe;
    public static PermissionSetOption ExternalAccess;
    public static PermissionSetOption Unsafe;
}
internal class Microsoft.SqlServer.TransactSql.ScriptDom.PermissionSetOptionHelper : OptionsHelper`1<PermissionSetOption> {
    internal static PermissionSetOptionHelper Instance;
    private static PermissionSetOptionHelper();
}
internal class Microsoft.SqlServer.TransactSql.ScriptDom.PhaseOneBatchException : Exception {
    private PhaseOneBatchException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.SqlServer.TransactSql.ScriptDom.PhaseOneConstraintException : Exception {
    private ConstraintDefinition _constraint;
    public ConstraintDefinition Constraint { get; }
    public PhaseOneConstraintException(ConstraintDefinition constraint);
    private PhaseOneConstraintException(SerializationInfo info, StreamingContext context);
    public ConstraintDefinition get_Constraint();
}
internal class Microsoft.SqlServer.TransactSql.ScriptDom.PhaseOnePartialAstException : Exception {
    private TSqlStatement _statement;
    public TSqlStatement Statement { get; }
    public PhaseOnePartialAstException(TSqlStatement statement);
    private PhaseOnePartialAstException(SerializationInfo info, StreamingContext context);
    public TSqlStatement get_Statement();
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.PivotedTableReference : TableReferenceWithAlias {
    private TableReference _tableReference;
    private List`1<Identifier> _inColumns;
    private ColumnReferenceExpression _pivotColumn;
    private List`1<ColumnReferenceExpression> _valueColumns;
    private MultiPartIdentifier _aggregateFunctionIdentifier;
    public TableReference TableReference { get; public set; }
    public IList`1<Identifier> InColumns { get; }
    public ColumnReferenceExpression PivotColumn { get; public set; }
    public IList`1<ColumnReferenceExpression> ValueColumns { get; }
    public MultiPartIdentifier AggregateFunctionIdentifier { get; public set; }
    public TableReference get_TableReference();
    public void set_TableReference(TableReference value);
    public IList`1<Identifier> get_InColumns();
    public ColumnReferenceExpression get_PivotColumn();
    public void set_PivotColumn(ColumnReferenceExpression value);
    public IList`1<ColumnReferenceExpression> get_ValueColumns();
    public MultiPartIdentifier get_AggregateFunctionIdentifier();
    public void set_AggregateFunctionIdentifier(MultiPartIdentifier value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
internal class Microsoft.SqlServer.TransactSql.ScriptDom.PlanOptimizerHintHelper : OptionsHelper`1<OptimizerHintKind> {
    internal static PlanOptimizerHintHelper Instance;
    private static PlanOptimizerHintHelper();
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.PortsEndpointProtocolOption : EndpointProtocolOption {
    private PortTypes _portTypes;
    public PortTypes PortTypes { get; public set; }
    public PortTypes get_PortTypes();
    public void set_PortTypes(PortTypes value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
[FlagsAttribute]
public enum Microsoft.SqlServer.TransactSql.ScriptDom.PortTypes : Enum {
    public int value__;
    public static PortTypes None;
    public static PortTypes Clear;
    public static PortTypes Ssl;
}
internal class Microsoft.SqlServer.TransactSql.ScriptDom.PortTypesHelper : OptionsHelper`1<PortTypes> {
    internal static PortTypesHelper Instance;
    private static PortTypesHelper();
}
internal class Microsoft.SqlServer.TransactSql.ScriptDom.PredicateSetOptionsHelper : OptionsHelper`1<SetOptions> {
    internal static PredicateSetOptionsHelper Instance;
    private static PredicateSetOptionsHelper();
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.PredicateSetStatement : SetOnOffStatement {
    private SetOptions _options;
    public SetOptions Options { get; public set; }
    public SetOptions get_Options();
    public void set_Options(SetOptions value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public enum Microsoft.SqlServer.TransactSql.ScriptDom.PredictRunTimeOptions : Enum {
    public int value__;
    public static PredictRunTimeOptions ONNX;
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.PredictTableReference : TableReferenceWithAlias {
    private ScalarExpression _modelVariable;
    private ScalarSubquery _modelSubquery;
    private TableReferenceWithAlias _dataSource;
    private Identifier _runTime;
    private List`1<SchemaDeclarationItem> _schemaDeclarationItems;
    public ScalarExpression ModelVariable { get; public set; }
    public ScalarSubquery ModelSubquery { get; public set; }
    public TableReferenceWithAlias DataSource { get; public set; }
    public Identifier RunTime { get; public set; }
    public IList`1<SchemaDeclarationItem> SchemaDeclarationItems { get; }
    public ScalarExpression get_ModelVariable();
    public void set_ModelVariable(ScalarExpression value);
    public ScalarSubquery get_ModelSubquery();
    public void set_ModelSubquery(ScalarSubquery value);
    public TableReferenceWithAlias get_DataSource();
    public void set_DataSource(TableReferenceWithAlias value);
    public Identifier get_RunTime();
    public void set_RunTime(Identifier value);
    public IList`1<SchemaDeclarationItem> get_SchemaDeclarationItems();
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public abstract class Microsoft.SqlServer.TransactSql.ScriptDom.PrimaryExpression : ScalarExpression {
    private Identifier _collation;
    public Identifier Collation { get; public set; }
    public sealed virtual Identifier get_Collation();
    public sealed virtual void set_Collation(Identifier value);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.PrimaryRoleReplicaOption : AvailabilityReplicaOption {
    private AllowConnectionsOptionKind _allowConnections;
    public AllowConnectionsOptionKind AllowConnections { get; public set; }
    public AllowConnectionsOptionKind get_AllowConnections();
    public void set_AllowConnections(AllowConnectionsOptionKind value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.PrincipalOption : TSqlFragment {
    private PrincipalOptionKind _optionKind;
    public PrincipalOptionKind OptionKind { get; public set; }
    public PrincipalOptionKind get_OptionKind();
    public void set_OptionKind(PrincipalOptionKind value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public enum Microsoft.SqlServer.TransactSql.ScriptDom.PrincipalOptionKind : Enum {
    public int value__;
    public static PrincipalOptionKind CheckExpiration;
    public static PrincipalOptionKind CheckPolicy;
    public static PrincipalOptionKind Sid;
    public static PrincipalOptionKind DefaultDatabase;
    public static PrincipalOptionKind DefaultLanguage;
    public static PrincipalOptionKind Credential;
    public static PrincipalOptionKind Name;
    public static PrincipalOptionKind NoCredential;
    public static PrincipalOptionKind DefaultSchema;
    public static PrincipalOptionKind Login;
    public static PrincipalOptionKind Password;
    public static PrincipalOptionKind Type;
}
public enum Microsoft.SqlServer.TransactSql.ScriptDom.PrincipalType : Enum {
    public int value__;
    public static PrincipalType Null;
    public static PrincipalType Public;
    public static PrincipalType Identifier;
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.PrintStatement : TSqlStatement {
    private ScalarExpression _expression;
    public ScalarExpression Expression { get; public set; }
    public ScalarExpression get_Expression();
    public void set_Expression(ScalarExpression value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.Privilege80 : TSqlFragment {
    private List`1<Identifier> _columns;
    private PrivilegeType80 _privilegeType80;
    public IList`1<Identifier> Columns { get; }
    public PrivilegeType80 PrivilegeType80 { get; public set; }
    public IList`1<Identifier> get_Columns();
    public PrivilegeType80 get_PrivilegeType80();
    public void set_PrivilegeType80(PrivilegeType80 value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.PrivilegeSecurityElement80 : SecurityElement80 {
    private List`1<Privilege80> _privileges;
    private SchemaObjectName _schemaObjectName;
    private List`1<Identifier> _columns;
    public IList`1<Privilege80> Privileges { get; }
    public SchemaObjectName SchemaObjectName { get; public set; }
    public IList`1<Identifier> Columns { get; }
    public IList`1<Privilege80> get_Privileges();
    public SchemaObjectName get_SchemaObjectName();
    public void set_SchemaObjectName(SchemaObjectName value);
    public IList`1<Identifier> get_Columns();
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public enum Microsoft.SqlServer.TransactSql.ScriptDom.PrivilegeType80 : Enum {
    public int value__;
    public static PrivilegeType80 All;
    public static PrivilegeType80 Select;
    public static PrivilegeType80 Insert;
    public static PrivilegeType80 Delete;
    public static PrivilegeType80 Update;
    public static PrivilegeType80 Execute;
    public static PrivilegeType80 References;
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.ProcedureOption : TSqlFragment {
    private ProcedureOptionKind _optionKind;
    public ProcedureOptionKind OptionKind { get; public set; }
    public ProcedureOptionKind get_OptionKind();
    public void set_OptionKind(ProcedureOptionKind value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
internal class Microsoft.SqlServer.TransactSql.ScriptDom.ProcedureOptionHelper : OptionsHelper`1<ProcedureOptionKind> {
    internal static ProcedureOptionHelper Instance;
    private static ProcedureOptionHelper();
    protected virtual TSqlParseErrorException GetMatchingException(IToken token);
}
public enum Microsoft.SqlServer.TransactSql.ScriptDom.ProcedureOptionKind : Enum {
    public int value__;
    public static ProcedureOptionKind Encryption;
    public static ProcedureOptionKind Recompile;
    public static ProcedureOptionKind ExecuteAs;
    public static ProcedureOptionKind NativeCompilation;
    public static ProcedureOptionKind SchemaBinding;
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.ProcedureParameter : DeclareVariableElement {
    private bool _isVarying;
    private ParameterModifier _modifier;
    public bool IsVarying { get; public set; }
    public ParameterModifier Modifier { get; public set; }
    public bool get_IsVarying();
    public void set_IsVarying(bool value);
    public ParameterModifier get_Modifier();
    public void set_Modifier(ParameterModifier value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.ProcedureReference : TSqlFragment {
    private SchemaObjectName _name;
    private Literal _number;
    public SchemaObjectName Name { get; public set; }
    public Literal Number { get; public set; }
    public SchemaObjectName get_Name();
    public void set_Name(SchemaObjectName value);
    public Literal get_Number();
    public void set_Number(Literal value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.ProcedureReferenceName : TSqlFragment {
    private ProcedureReference _procedureReference;
    private VariableReference _procedureVariable;
    public ProcedureReference ProcedureReference { get; public set; }
    public VariableReference ProcedureVariable { get; public set; }
    public ProcedureReference get_ProcedureReference();
    public void set_ProcedureReference(ProcedureReference value);
    public VariableReference get_ProcedureVariable();
    public void set_ProcedureVariable(VariableReference value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public abstract class Microsoft.SqlServer.TransactSql.ScriptDom.ProcedureStatementBody : ProcedureStatementBodyBase {
    private ProcedureReference _procedureReference;
    private bool _isForReplication;
    private List`1<ProcedureOption> _options;
    public ProcedureReference ProcedureReference { get; public set; }
    public bool IsForReplication { get; public set; }
    public IList`1<ProcedureOption> Options { get; }
    public ProcedureReference get_ProcedureReference();
    public void set_ProcedureReference(ProcedureReference value);
    public bool get_IsForReplication();
    public void set_IsForReplication(bool value);
    public IList`1<ProcedureOption> get_Options();
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public abstract class Microsoft.SqlServer.TransactSql.ScriptDom.ProcedureStatementBodyBase : TSqlStatement {
    private List`1<ProcedureParameter> _parameters;
    private StatementList _statementList;
    private MethodSpecifier _methodSpecifier;
    public IList`1<ProcedureParameter> Parameters { get; }
    public StatementList StatementList { get; public set; }
    public MethodSpecifier MethodSpecifier { get; public set; }
    public IList`1<ProcedureParameter> get_Parameters();
    public StatementList get_StatementList();
    public void set_StatementList(StatementList value);
    public MethodSpecifier get_MethodSpecifier();
    public void set_MethodSpecifier(MethodSpecifier value);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.ProcessAffinityRange : LiteralRange {
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public enum Microsoft.SqlServer.TransactSql.ScriptDom.ProcessAffinityType : Enum {
    public int value__;
    public static ProcessAffinityType CpuAuto;
    public static ProcessAffinityType Cpu;
    public static ProcessAffinityType NumaNode;
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.ProviderEncryptionSource : EncryptionSource {
    private Identifier _name;
    private List`1<KeyOption> _keyOptions;
    public Identifier Name { get; public set; }
    public IList`1<KeyOption> KeyOptions { get; }
    public Identifier get_Name();
    public void set_Name(Identifier value);
    public IList`1<KeyOption> get_KeyOptions();
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.ProviderKeyNameKeyOption : KeyOption {
    private Literal _keyName;
    public Literal KeyName { get; public set; }
    public Literal get_KeyName();
    public void set_KeyName(Literal value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
internal class Microsoft.SqlServer.TransactSql.ScriptDom.PseudoColumnHelper : OptionsHelper`1<ColumnType> {
    internal static PseudoColumnHelper Instance;
    private static PseudoColumnHelper();
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.QualifiedJoin : JoinTableReference {
    private BooleanExpression _searchCondition;
    private QualifiedJoinType _qualifiedJoinType;
    private JoinHint _joinHint;
    public BooleanExpression SearchCondition { get; public set; }
    public QualifiedJoinType QualifiedJoinType { get; public set; }
    public JoinHint JoinHint { get; public set; }
    public BooleanExpression get_SearchCondition();
    public void set_SearchCondition(BooleanExpression value);
    public QualifiedJoinType get_QualifiedJoinType();
    public void set_QualifiedJoinType(QualifiedJoinType value);
    public JoinHint get_JoinHint();
    public void set_JoinHint(JoinHint value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public enum Microsoft.SqlServer.TransactSql.ScriptDom.QualifiedJoinType : Enum {
    public int value__;
    public static QualifiedJoinType Inner;
    public static QualifiedJoinType LeftOuter;
    public static QualifiedJoinType RightOuter;
    public static QualifiedJoinType FullOuter;
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.QueryDerivedTable : TableReferenceWithAliasAndColumns {
    private QueryExpression _queryExpression;
    public QueryExpression QueryExpression { get; public set; }
    public QueryExpression get_QueryExpression();
    public void set_QueryExpression(QueryExpression value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public abstract class Microsoft.SqlServer.TransactSql.ScriptDom.QueryExpression : TSqlFragment {
    private OrderByClause _orderByClause;
    private OffsetClause _offsetClause;
    private ForClause _forClause;
    public OrderByClause OrderByClause { get; public set; }
    public OffsetClause OffsetClause { get; public set; }
    public ForClause ForClause { get; public set; }
    public OrderByClause get_OrderByClause();
    public void set_OrderByClause(OrderByClause value);
    public OffsetClause get_OffsetClause();
    public void set_OffsetClause(OffsetClause value);
    public ForClause get_ForClause();
    public void set_ForClause(ForClause value);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.QueryParenthesisExpression : QueryExpression {
    private QueryExpression _queryExpression;
    public QueryExpression QueryExpression { get; public set; }
    public QueryExpression get_QueryExpression();
    public void set_QueryExpression(QueryExpression value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.QuerySpecification : QueryExpression {
    private UniqueRowFilter _uniqueRowFilter;
    private TopRowFilter _topRowFilter;
    private List`1<SelectElement> _selectElements;
    private FromClause _fromClause;
    private WhereClause _whereClause;
    private GroupByClause _groupByClause;
    private HavingClause _havingClause;
    public UniqueRowFilter UniqueRowFilter { get; public set; }
    public TopRowFilter TopRowFilter { get; public set; }
    public IList`1<SelectElement> SelectElements { get; }
    public FromClause FromClause { get; public set; }
    public WhereClause WhereClause { get; public set; }
    public GroupByClause GroupByClause { get; public set; }
    public HavingClause HavingClause { get; public set; }
    public UniqueRowFilter get_UniqueRowFilter();
    public void set_UniqueRowFilter(UniqueRowFilter value);
    public TopRowFilter get_TopRowFilter();
    public void set_TopRowFilter(TopRowFilter value);
    public IList`1<SelectElement> get_SelectElements();
    public FromClause get_FromClause();
    public void set_FromClause(FromClause value);
    public WhereClause get_WhereClause();
    public void set_WhereClause(WhereClause value);
    public GroupByClause get_GroupByClause();
    public void set_GroupByClause(GroupByClause value);
    public HavingClause get_HavingClause();
    public void set_HavingClause(HavingClause value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
internal class Microsoft.SqlServer.TransactSql.ScriptDom.QueryStoreCapturePolicyHelper : OptionsHelper`1<QueryStoreCapturePolicyOptionKind> {
    internal static QueryStoreCapturePolicyHelper Instance;
    private static QueryStoreCapturePolicyHelper();
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.QueryStoreCapturePolicyOption : QueryStoreOption {
    private QueryStoreCapturePolicyOptionKind _value;
    public QueryStoreCapturePolicyOptionKind Value { get; public set; }
    public QueryStoreCapturePolicyOptionKind get_Value();
    public void set_Value(QueryStoreCapturePolicyOptionKind value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public enum Microsoft.SqlServer.TransactSql.ScriptDom.QueryStoreCapturePolicyOptionKind : Enum {
    public int value__;
    public static QueryStoreCapturePolicyOptionKind NONE;
    public static QueryStoreCapturePolicyOptionKind AUTO;
    public static QueryStoreCapturePolicyOptionKind ALL;
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.QueryStoreDatabaseOption : DatabaseOption {
    private bool _clear;
    private bool _clearAll;
    private OptionState _optionState;
    private List`1<QueryStoreOption> _options;
    public bool Clear { get; public set; }
    public bool ClearAll { get; public set; }
    public OptionState OptionState { get; public set; }
    public IList`1<QueryStoreOption> Options { get; }
    public bool get_Clear();
    public void set_Clear(bool value);
    public bool get_ClearAll();
    public void set_ClearAll(bool value);
    public OptionState get_OptionState();
    public void set_OptionState(OptionState value);
    public IList`1<QueryStoreOption> get_Options();
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.QueryStoreDataFlushIntervalOption : QueryStoreOption {
    private Literal _flushInterval;
    public Literal FlushInterval { get; public set; }
    public Literal get_FlushInterval();
    public void set_FlushInterval(Literal value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
internal class Microsoft.SqlServer.TransactSql.ScriptDom.QueryStoreDesiredStateHelper : OptionsHelper`1<QueryStoreDesiredStateOptionKind> {
    internal static QueryStoreDesiredStateHelper Instance;
    private static QueryStoreDesiredStateHelper();
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.QueryStoreDesiredStateOption : QueryStoreOption {
    private QueryStoreDesiredStateOptionKind _value;
    private bool _operationModeSpecified;
    public QueryStoreDesiredStateOptionKind Value { get; public set; }
    public bool OperationModeSpecified { get; public set; }
    public QueryStoreDesiredStateOptionKind get_Value();
    public void set_Value(QueryStoreDesiredStateOptionKind value);
    public bool get_OperationModeSpecified();
    public void set_OperationModeSpecified(bool value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public enum Microsoft.SqlServer.TransactSql.ScriptDom.QueryStoreDesiredStateOptionKind : Enum {
    public int value__;
    public static QueryStoreDesiredStateOptionKind Off;
    public static QueryStoreDesiredStateOptionKind ReadOnly;
    public static QueryStoreDesiredStateOptionKind ReadWrite;
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.QueryStoreIntervalLengthOption : QueryStoreOption {
    private Literal _statsIntervalLength;
    public Literal StatsIntervalLength { get; public set; }
    public Literal get_StatsIntervalLength();
    public void set_StatsIntervalLength(Literal value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.QueryStoreMaxPlansPerQueryOption : QueryStoreOption {
    private Literal _maxPlansPerQuery;
    public Literal MaxPlansPerQuery { get; public set; }
    public Literal get_MaxPlansPerQuery();
    public void set_MaxPlansPerQuery(Literal value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.QueryStoreMaxStorageSizeOption : QueryStoreOption {
    private Literal _maxQdsSize;
    public Literal MaxQdsSize { get; public set; }
    public Literal get_MaxQdsSize();
    public void set_MaxQdsSize(Literal value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public abstract class Microsoft.SqlServer.TransactSql.ScriptDom.QueryStoreOption : TSqlFragment {
    private QueryStoreOptionKind _optionKind;
    public QueryStoreOptionKind OptionKind { get; public set; }
    public QueryStoreOptionKind get_OptionKind();
    public void set_OptionKind(QueryStoreOptionKind value);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public enum Microsoft.SqlServer.TransactSql.ScriptDom.QueryStoreOptionKind : Enum {
    public int value__;
    public static QueryStoreOptionKind Desired_State;
    public static QueryStoreOptionKind Query_Capture_Mode;
    public static QueryStoreOptionKind Size_Based_Cleanup_Mode;
    public static QueryStoreOptionKind Flush_Interval_Seconds;
    public static QueryStoreOptionKind Interval_Length_Minutes;
    public static QueryStoreOptionKind Current_Storage_Size_MB;
    public static QueryStoreOptionKind Max_Plans_Per_Query;
    public static QueryStoreOptionKind Stale_Query_Threshold_Days;
}
internal class Microsoft.SqlServer.TransactSql.ScriptDom.QueryStoreOptionsHelper : OptionsHelper`1<QueryStoreOptionKind> {
    internal static QueryStoreOptionsHelper Instance;
    private static QueryStoreOptionsHelper();
}
internal class Microsoft.SqlServer.TransactSql.ScriptDom.QueryStoreSizeCleanupPolicyHelper : OptionsHelper`1<QueryStoreSizeCleanupPolicyOptionKind> {
    internal static QueryStoreSizeCleanupPolicyHelper Instance;
    private static QueryStoreSizeCleanupPolicyHelper();
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.QueryStoreSizeCleanupPolicyOption : QueryStoreOption {
    private QueryStoreSizeCleanupPolicyOptionKind _value;
    public QueryStoreSizeCleanupPolicyOptionKind Value { get; public set; }
    public QueryStoreSizeCleanupPolicyOptionKind get_Value();
    public void set_Value(QueryStoreSizeCleanupPolicyOptionKind value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public enum Microsoft.SqlServer.TransactSql.ScriptDom.QueryStoreSizeCleanupPolicyOptionKind : Enum {
    public int value__;
    public static QueryStoreSizeCleanupPolicyOptionKind OFF;
    public static QueryStoreSizeCleanupPolicyOptionKind AUTO;
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.QueryStoreTimeCleanupPolicyOption : QueryStoreOption {
    private Literal _staleQueryThreshold;
    public Literal StaleQueryThreshold { get; public set; }
    public Literal get_StaleQueryThreshold();
    public void set_StaleQueryThreshold(Literal value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.QueueDelayAuditOption : AuditOption {
    private Literal _delay;
    public Literal Delay { get; public set; }
    public Literal get_Delay();
    public void set_Delay(Literal value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.QueueExecuteAsOption : QueueOption {
    private ExecuteAsClause _optionValue;
    public ExecuteAsClause OptionValue { get; public set; }
    public ExecuteAsClause get_OptionValue();
    public void set_OptionValue(ExecuteAsClause value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.QueueOption : TSqlFragment {
    private QueueOptionKind _optionKind;
    public QueueOptionKind OptionKind { get; public set; }
    public QueueOptionKind get_OptionKind();
    public void set_OptionKind(QueueOptionKind value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public enum Microsoft.SqlServer.TransactSql.ScriptDom.QueueOptionKind : Enum {
    public int value__;
    public static QueueOptionKind Status;
    public static QueueOptionKind Retention;
    public static QueueOptionKind ActivationStatus;
    public static QueueOptionKind ActivationProcedureName;
    public static QueueOptionKind ActivationMaxQueueReaders;
    public static QueueOptionKind ActivationExecuteAs;
    public static QueueOptionKind ActivationDrop;
    public static QueueOptionKind PoisonMessageHandlingStatus;
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.QueueProcedureOption : QueueOption {
    private SchemaObjectName _optionValue;
    public SchemaObjectName OptionValue { get; public set; }
    public SchemaObjectName get_OptionValue();
    public void set_OptionValue(SchemaObjectName value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public abstract class Microsoft.SqlServer.TransactSql.ScriptDom.QueueStatement : TSqlStatement {
    private SchemaObjectName _name;
    private List`1<QueueOption> _queueOptions;
    public SchemaObjectName Name { get; public set; }
    public IList`1<QueueOption> QueueOptions { get; }
    public SchemaObjectName get_Name();
    public void set_Name(SchemaObjectName value);
    public IList`1<QueueOption> get_QueueOptions();
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.QueueStateOption : QueueOption {
    private OptionState _optionState;
    public OptionState OptionState { get; public set; }
    public OptionState get_OptionState();
    public void set_OptionState(OptionState value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.QueueValueOption : QueueOption {
    private ValueExpression _optionValue;
    public ValueExpression OptionValue { get; public set; }
    public ValueExpression get_OptionValue();
    public void set_OptionValue(ValueExpression value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public enum Microsoft.SqlServer.TransactSql.ScriptDom.QuoteType : Enum {
    public int value__;
    public static QuoteType NotQuoted;
    public static QuoteType SquareBracket;
    public static QuoteType DoubleQuote;
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.RaiseErrorLegacyStatement : TSqlStatement {
    private ScalarExpression _firstParameter;
    private ValueExpression _secondParameter;
    public ScalarExpression FirstParameter { get; public set; }
    public ValueExpression SecondParameter { get; public set; }
    public ScalarExpression get_FirstParameter();
    public void set_FirstParameter(ScalarExpression value);
    public ValueExpression get_SecondParameter();
    public void set_SecondParameter(ValueExpression value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
[FlagsAttribute]
public enum Microsoft.SqlServer.TransactSql.ScriptDom.RaiseErrorOptions : Enum {
    public int value__;
    public static RaiseErrorOptions None;
    public static RaiseErrorOptions Log;
    public static RaiseErrorOptions NoWait;
    public static RaiseErrorOptions SetError;
}
internal class Microsoft.SqlServer.TransactSql.ScriptDom.RaiseErrorOptionsHelper : OptionsHelper`1<RaiseErrorOptions> {
    internal static RaiseErrorOptionsHelper Instance;
    private static RaiseErrorOptionsHelper();
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.RaiseErrorStatement : TSqlStatement {
    private ScalarExpression _firstParameter;
    private ScalarExpression _secondParameter;
    private ScalarExpression _thirdParameter;
    private List`1<ScalarExpression> _optionalParameters;
    private RaiseErrorOptions _raiseErrorOptions;
    public ScalarExpression FirstParameter { get; public set; }
    public ScalarExpression SecondParameter { get; public set; }
    public ScalarExpression ThirdParameter { get; public set; }
    public IList`1<ScalarExpression> OptionalParameters { get; }
    public RaiseErrorOptions RaiseErrorOptions { get; public set; }
    public ScalarExpression get_FirstParameter();
    public void set_FirstParameter(ScalarExpression value);
    public ScalarExpression get_SecondParameter();
    public void set_SecondParameter(ScalarExpression value);
    public ScalarExpression get_ThirdParameter();
    public void set_ThirdParameter(ScalarExpression value);
    public IList`1<ScalarExpression> get_OptionalParameters();
    public RaiseErrorOptions get_RaiseErrorOptions();
    public void set_RaiseErrorOptions(RaiseErrorOptions value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public enum Microsoft.SqlServer.TransactSql.ScriptDom.RdaTableOption : Enum {
    public int value__;
    public static RdaTableOption Disable;
    public static RdaTableOption Enable;
    public static RdaTableOption OffWithoutDataRecovery;
}
internal class Microsoft.SqlServer.TransactSql.ScriptDom.RdaTableOptionHelper : OptionsHelper`1<RdaTableOption> {
    public static RdaTableOptionHelper Instance;
    private static RdaTableOptionHelper();
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.ReadOnlyForClause : ForClause {
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.ReadTextStatement : TSqlStatement {
    private ColumnReferenceExpression _column;
    private ValueExpression _textPointer;
    private ValueExpression _offset;
    private ValueExpression _size;
    private bool _holdLock;
    public ColumnReferenceExpression Column { get; public set; }
    public ValueExpression TextPointer { get; public set; }
    public ValueExpression Offset { get; public set; }
    public ValueExpression Size { get; public set; }
    public bool HoldLock { get; public set; }
    public ColumnReferenceExpression get_Column();
    public void set_Column(ColumnReferenceExpression value);
    public ValueExpression get_TextPointer();
    public void set_TextPointer(ValueExpression value);
    public ValueExpression get_Offset();
    public void set_Offset(ValueExpression value);
    public ValueExpression get_Size();
    public void set_Size(ValueExpression value);
    public bool get_HoldLock();
    public void set_HoldLock(bool value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.RealLiteral : Literal {
    public LiteralType LiteralType { get; }
    public virtual LiteralType get_LiteralType();
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.ReceiveStatement : WaitForSupportedStatement {
    private ScalarExpression _top;
    private List`1<SelectElement> _selectElements;
    private SchemaObjectName _queue;
    private VariableTableReference _into;
    private ValueExpression _where;
    private bool _isConversationGroupIdWhere;
    public ScalarExpression Top { get; public set; }
    public IList`1<SelectElement> SelectElements { get; }
    public SchemaObjectName Queue { get; public set; }
    public VariableTableReference Into { get; public set; }
    public ValueExpression Where { get; public set; }
    public bool IsConversationGroupIdWhere { get; public set; }
    public ScalarExpression get_Top();
    public void set_Top(ScalarExpression value);
    public IList`1<SelectElement> get_SelectElements();
    public SchemaObjectName get_Queue();
    public void set_Queue(SchemaObjectName value);
    public VariableTableReference get_Into();
    public void set_Into(VariableTableReference value);
    public ValueExpression get_Where();
    public void set_Where(ValueExpression value);
    public bool get_IsConversationGroupIdWhere();
    public void set_IsConversationGroupIdWhere(bool value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.ReconfigureStatement : TSqlStatement {
    private bool _withOverride;
    public bool WithOverride { get; public set; }
    public bool get_WithOverride();
    public void set_WithOverride(bool value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.RecoveryDatabaseOption : DatabaseOption {
    private RecoveryDatabaseOptionKind _value;
    public RecoveryDatabaseOptionKind Value { get; public set; }
    public RecoveryDatabaseOptionKind get_Value();
    public void set_Value(RecoveryDatabaseOptionKind value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public enum Microsoft.SqlServer.TransactSql.ScriptDom.RecoveryDatabaseOptionKind : Enum {
    public int value__;
    public static RecoveryDatabaseOptionKind None;
    public static RecoveryDatabaseOptionKind Full;
    public static RecoveryDatabaseOptionKind BulkLogged;
    public static RecoveryDatabaseOptionKind Simple;
}
internal class Microsoft.SqlServer.TransactSql.ScriptDom.RecoveryDbOptionsHelper : OptionsHelper`1<RecoveryDatabaseOptionKind> {
    internal static RecoveryDbOptionsHelper Instance;
    private static RecoveryDbOptionsHelper();
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.RemoteDataArchiveAlterTableOption : TableOption {
    private RdaTableOption _rdaTableOption;
    private MigrationState _migrationState;
    private bool _isMigrationStateSpecified;
    private bool _isFilterPredicateSpecified;
    private FunctionCall _filterPredicate;
    public RdaTableOption RdaTableOption { get; public set; }
    public MigrationState MigrationState { get; public set; }
    public bool IsMigrationStateSpecified { get; public set; }
    public bool IsFilterPredicateSpecified { get; public set; }
    public FunctionCall FilterPredicate { get; public set; }
    public RdaTableOption get_RdaTableOption();
    public void set_RdaTableOption(RdaTableOption value);
    public MigrationState get_MigrationState();
    public void set_MigrationState(MigrationState value);
    public bool get_IsMigrationStateSpecified();
    public void set_IsMigrationStateSpecified(bool value);
    public bool get_IsFilterPredicateSpecified();
    public void set_IsFilterPredicateSpecified(bool value);
    public FunctionCall get_FilterPredicate();
    public void set_FilterPredicate(FunctionCall value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.RemoteDataArchiveDatabaseOption : DatabaseOption {
    private OptionState _optionState;
    private List`1<RemoteDataArchiveDatabaseSetting> _settings;
    public OptionState OptionState { get; public set; }
    public IList`1<RemoteDataArchiveDatabaseSetting> Settings { get; }
    public OptionState get_OptionState();
    public void set_OptionState(OptionState value);
    public IList`1<RemoteDataArchiveDatabaseSetting> get_Settings();
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public abstract class Microsoft.SqlServer.TransactSql.ScriptDom.RemoteDataArchiveDatabaseSetting : TSqlFragment {
    private RemoteDataArchiveDatabaseSettingKind _settingKind;
    public RemoteDataArchiveDatabaseSettingKind SettingKind { get; public set; }
    public RemoteDataArchiveDatabaseSettingKind get_SettingKind();
    public void set_SettingKind(RemoteDataArchiveDatabaseSettingKind value);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public enum Microsoft.SqlServer.TransactSql.ScriptDom.RemoteDataArchiveDatabaseSettingKind : Enum {
    public int value__;
    public static RemoteDataArchiveDatabaseSettingKind Server;
    public static RemoteDataArchiveDatabaseSettingKind Credential;
    public static RemoteDataArchiveDatabaseSettingKind FederatedServiceAccount;
}
internal class Microsoft.SqlServer.TransactSql.ScriptDom.RemoteDataArchiveDatabaseSettingsHelper : OptionsHelper`1<RemoteDataArchiveDatabaseSettingKind> {
    internal static RemoteDataArchiveDatabaseSettingsHelper Instance;
    private static RemoteDataArchiveDatabaseSettingsHelper();
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.RemoteDataArchiveDbCredentialSetting : RemoteDataArchiveDatabaseSetting {
    private Identifier _credential;
    public Identifier Credential { get; public set; }
    public Identifier get_Credential();
    public void set_Credential(Identifier value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.RemoteDataArchiveDbFederatedServiceAccountSetting : RemoteDataArchiveDatabaseSetting {
    private bool _isOn;
    public bool IsOn { get; public set; }
    public bool get_IsOn();
    public void set_IsOn(bool value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.RemoteDataArchiveDbServerSetting : RemoteDataArchiveDatabaseSetting {
    private StringLiteral _server;
    public StringLiteral Server { get; public set; }
    public StringLiteral get_Server();
    public void set_Server(StringLiteral value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.RemoteDataArchiveTableOption : TableOption {
    private RdaTableOption _rdaTableOption;
    private MigrationState _migrationState;
    public RdaTableOption RdaTableOption { get; public set; }
    public MigrationState MigrationState { get; public set; }
    public RdaTableOption get_RdaTableOption();
    public void set_RdaTableOption(RdaTableOption value);
    public MigrationState get_MigrationState();
    public void set_MigrationState(MigrationState value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public abstract class Microsoft.SqlServer.TransactSql.ScriptDom.RemoteServiceBindingOption : TSqlFragment {
    private RemoteServiceBindingOptionKind _optionKind;
    public RemoteServiceBindingOptionKind OptionKind { get; public set; }
    public RemoteServiceBindingOptionKind get_OptionKind();
    public void set_OptionKind(RemoteServiceBindingOptionKind value);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public enum Microsoft.SqlServer.TransactSql.ScriptDom.RemoteServiceBindingOptionKind : Enum {
    public int value__;
    public static RemoteServiceBindingOptionKind User;
    public static RemoteServiceBindingOptionKind Anonymous;
}
public abstract class Microsoft.SqlServer.TransactSql.ScriptDom.RemoteServiceBindingStatementBase : TSqlStatement {
    private Identifier _name;
    private List`1<RemoteServiceBindingOption> _options;
    public Identifier Name { get; public set; }
    public IList`1<RemoteServiceBindingOption> Options { get; }
    public Identifier get_Name();
    public void set_Name(Identifier value);
    public IList`1<RemoteServiceBindingOption> get_Options();
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.RenameAlterRoleAction : AlterRoleAction {
    private Identifier _newName;
    public Identifier NewName { get; public set; }
    public Identifier get_NewName();
    public void set_NewName(Identifier value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.RenameEntityStatement : TSqlStatement {
    private SecurityObjectKind _renameEntityType;
    private Nullable`1<SeparatorType> _separatorType;
    private SchemaObjectName _oldName;
    private Identifier _newName;
    public SecurityObjectKind RenameEntityType { get; public set; }
    public Nullable`1<SeparatorType> SeparatorType { get; public set; }
    public SchemaObjectName OldName { get; public set; }
    public Identifier NewName { get; public set; }
    public SecurityObjectKind get_RenameEntityType();
    public void set_RenameEntityType(SecurityObjectKind value);
    public Nullable`1<SeparatorType> get_SeparatorType();
    public void set_SeparatorType(Nullable`1<SeparatorType> value);
    public SchemaObjectName get_OldName();
    public void set_OldName(SchemaObjectName value);
    public Identifier get_NewName();
    public void set_NewName(Identifier value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.ResampleStatisticsOption : StatisticsOption {
    private List`1<StatisticsPartitionRange> _partitions;
    public IList`1<StatisticsPartitionRange> Partitions { get; }
    public IList`1<StatisticsPartitionRange> get_Partitions();
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
internal class Microsoft.SqlServer.TransactSql.ScriptDom.ResourcePoolAffinityHelper : OptionsHelper`1<ResourcePoolAffinityType> {
    internal static ResourcePoolAffinityHelper Instance;
    private static ResourcePoolAffinityHelper();
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.ResourcePoolAffinitySpecification : TSqlFragment {
    private ResourcePoolAffinityType _affinityType;
    private Literal _parameterValue;
    private bool _isAuto;
    private List`1<LiteralRange> _poolAffinityRanges;
    public ResourcePoolAffinityType AffinityType { get; public set; }
    public Literal ParameterValue { get; public set; }
    public bool IsAuto { get; public set; }
    public IList`1<LiteralRange> PoolAffinityRanges { get; }
    public ResourcePoolAffinityType get_AffinityType();
    public void set_AffinityType(ResourcePoolAffinityType value);
    public Literal get_ParameterValue();
    public void set_ParameterValue(Literal value);
    public bool get_IsAuto();
    public void set_IsAuto(bool value);
    public IList`1<LiteralRange> get_PoolAffinityRanges();
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public enum Microsoft.SqlServer.TransactSql.ScriptDom.ResourcePoolAffinityType : Enum {
    public int value__;
    public static ResourcePoolAffinityType None;
    public static ResourcePoolAffinityType Scheduler;
    public static ResourcePoolAffinityType NumaNode;
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.ResourcePoolParameter : TSqlFragment {
    private ResourcePoolParameterType _parameterType;
    private Literal _parameterValue;
    private ResourcePoolAffinitySpecification _affinitySpecification;
    public ResourcePoolParameterType ParameterType { get; public set; }
    public Literal ParameterValue { get; public set; }
    public ResourcePoolAffinitySpecification AffinitySpecification { get; public set; }
    public ResourcePoolParameterType get_ParameterType();
    public void set_ParameterType(ResourcePoolParameterType value);
    public Literal get_ParameterValue();
    public void set_ParameterValue(Literal value);
    public ResourcePoolAffinitySpecification get_AffinitySpecification();
    public void set_AffinitySpecification(ResourcePoolAffinitySpecification value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
internal class Microsoft.SqlServer.TransactSql.ScriptDom.ResourcePoolParameterHelper : OptionsHelper`1<ResourcePoolParameterType> {
    internal static ResourcePoolParameterHelper Instance;
    private static ResourcePoolParameterHelper();
}
public enum Microsoft.SqlServer.TransactSql.ScriptDom.ResourcePoolParameterType : Enum {
    public int value__;
    public static ResourcePoolParameterType Unknown;
    public static ResourcePoolParameterType MaxCpuPercent;
    public static ResourcePoolParameterType MaxMemoryPercent;
    public static ResourcePoolParameterType MinCpuPercent;
    public static ResourcePoolParameterType MinMemoryPercent;
    public static ResourcePoolParameterType CapCpuPercent;
    public static ResourcePoolParameterType TargetMemoryPercent;
    public static ResourcePoolParameterType MinIoPercent;
    public static ResourcePoolParameterType MaxIoPercent;
    public static ResourcePoolParameterType CapIoPercent;
    public static ResourcePoolParameterType Affinity;
    public static ResourcePoolParameterType MinIopsPerVolume;
    public static ResourcePoolParameterType MaxIopsPerVolume;
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.ResourcePoolStatement : TSqlStatement {
    private Identifier _name;
    private List`1<ResourcePoolParameter> _resourcePoolParameters;
    public Identifier Name { get; public set; }
    public IList`1<ResourcePoolParameter> ResourcePoolParameters { get; }
    public Identifier get_Name();
    public void set_Name(Identifier value);
    public IList`1<ResourcePoolParameter> get_ResourcePoolParameters();
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.RestoreMasterKeyStatement : BackupRestoreMasterKeyStatementBase {
    private bool _isForce;
    private Literal _encryptionPassword;
    public bool IsForce { get; public set; }
    public Literal EncryptionPassword { get; public set; }
    public bool get_IsForce();
    public void set_IsForce(bool value);
    public Literal get_EncryptionPassword();
    public void set_EncryptionPassword(Literal value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.RestoreOption : TSqlFragment {
    private RestoreOptionKind _optionKind;
    public RestoreOptionKind OptionKind { get; public set; }
    public RestoreOptionKind get_OptionKind();
    public void set_OptionKind(RestoreOptionKind value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public enum Microsoft.SqlServer.TransactSql.ScriptDom.RestoreOptionKind : Enum {
    public int value__;
    public static RestoreOptionKind NoLog;
    public static RestoreOptionKind Checksum;
    public static RestoreOptionKind NoChecksum;
    public static RestoreOptionKind ContinueAfterError;
    public static RestoreOptionKind StopOnError;
    public static RestoreOptionKind Unload;
    public static RestoreOptionKind NoUnload;
    public static RestoreOptionKind Rewind;
    public static RestoreOptionKind NoRewind;
    public static RestoreOptionKind NoRecovery;
    public static RestoreOptionKind Recovery;
    public static RestoreOptionKind Replace;
    public static RestoreOptionKind Restart;
    public static RestoreOptionKind Verbose;
    public static RestoreOptionKind LoadHistory;
    public static RestoreOptionKind DboOnly;
    public static RestoreOptionKind RestrictedUser;
    public static RestoreOptionKind Partial;
    public static RestoreOptionKind Snapshot;
    public static RestoreOptionKind KeepReplication;
    public static RestoreOptionKind Online;
    public static RestoreOptionKind CommitDifferentialBase;
    public static RestoreOptionKind SnapshotImport;
    public static RestoreOptionKind EnableBroker;
    public static RestoreOptionKind NewBroker;
    public static RestoreOptionKind ErrorBrokerConversations;
    public static RestoreOptionKind Stats;
    public static RestoreOptionKind File;
    public static RestoreOptionKind StopAt;
    public static RestoreOptionKind MediaName;
    public static RestoreOptionKind MediaPassword;
    public static RestoreOptionKind Password;
    public static RestoreOptionKind BlockSize;
    public static RestoreOptionKind BufferCount;
    public static RestoreOptionKind MaxTransferSize;
    public static RestoreOptionKind Standby;
    public static RestoreOptionKind EnhancedIntegrity;
    public static RestoreOptionKind SnapshotRestorePhase;
    public static RestoreOptionKind Move;
    public static RestoreOptionKind Stop;
    public static RestoreOptionKind FileStream;
    public static RestoreOptionKind KeepTemporalRetention;
}
internal class Microsoft.SqlServer.TransactSql.ScriptDom.RestoreOptionNoValueHelper : OptionsHelper`1<RestoreOptionKind> {
    internal static RestoreOptionNoValueHelper Instance;
    private static RestoreOptionNoValueHelper();
}
internal class Microsoft.SqlServer.TransactSql.ScriptDom.RestoreOptionWithValueHelper : OptionsHelper`1<RestoreOptionKind> {
    internal static RestoreOptionWithValueHelper Instance;
    private static RestoreOptionWithValueHelper();
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.RestoreServiceMasterKeyStatement : BackupRestoreMasterKeyStatementBase {
    private bool _isForce;
    public bool IsForce { get; public set; }
    public bool get_IsForce();
    public void set_IsForce(bool value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.RestoreStatement : TSqlStatement {
    private IdentifierOrValueExpression _databaseName;
    private List`1<DeviceInfo> _devices;
    private List`1<BackupRestoreFileInfo> _files;
    private List`1<RestoreOption> _options;
    private RestoreStatementKind _kind;
    public IdentifierOrValueExpression DatabaseName { get; public set; }
    public IList`1<DeviceInfo> Devices { get; }
    public IList`1<BackupRestoreFileInfo> Files { get; }
    public IList`1<RestoreOption> Options { get; }
    public RestoreStatementKind Kind { get; public set; }
    public IdentifierOrValueExpression get_DatabaseName();
    public void set_DatabaseName(IdentifierOrValueExpression value);
    public IList`1<DeviceInfo> get_Devices();
    public IList`1<BackupRestoreFileInfo> get_Files();
    public IList`1<RestoreOption> get_Options();
    public RestoreStatementKind get_Kind();
    public void set_Kind(RestoreStatementKind value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public enum Microsoft.SqlServer.TransactSql.ScriptDom.RestoreStatementKind : Enum {
    public int value__;
    public static RestoreStatementKind None;
    public static RestoreStatementKind Database;
    public static RestoreStatementKind TransactionLog;
    public static RestoreStatementKind FileListOnly;
    public static RestoreStatementKind VerifyOnly;
    public static RestoreStatementKind LabelOnly;
    public static RestoreStatementKind RewindOnly;
    public static RestoreStatementKind HeaderOnly;
}
internal class Microsoft.SqlServer.TransactSql.ScriptDom.RestoreStatementKindsHelper : OptionsHelper`1<RestoreStatementKind> {
    internal static RestoreStatementKindsHelper Instance;
    private static RestoreStatementKindsHelper();
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.ResultColumnDefinition : TSqlFragment {
    private ColumnDefinitionBase _columnDefinition;
    private NullableConstraintDefinition _nullable;
    public ColumnDefinitionBase ColumnDefinition { get; public set; }
    public NullableConstraintDefinition Nullable { get; public set; }
    public ColumnDefinitionBase get_ColumnDefinition();
    public void set_ColumnDefinition(ColumnDefinitionBase value);
    public NullableConstraintDefinition get_Nullable();
    public void set_Nullable(NullableConstraintDefinition value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.ResultSetDefinition : TSqlFragment {
    private ResultSetType _resultSetType;
    public ResultSetType ResultSetType { get; public set; }
    public ResultSetType get_ResultSetType();
    public void set_ResultSetType(ResultSetType value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.ResultSetsExecuteOption : ExecuteOption {
    private ResultSetsOptionKind _resultSetsOptionKind;
    private List`1<ResultSetDefinition> _definitions;
    public ResultSetsOptionKind ResultSetsOptionKind { get; public set; }
    public IList`1<ResultSetDefinition> Definitions { get; }
    public ResultSetsOptionKind get_ResultSetsOptionKind();
    public void set_ResultSetsOptionKind(ResultSetsOptionKind value);
    public IList`1<ResultSetDefinition> get_Definitions();
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public enum Microsoft.SqlServer.TransactSql.ScriptDom.ResultSetsOptionKind : Enum {
    public int value__;
    public static ResultSetsOptionKind Undefined;
    public static ResultSetsOptionKind None;
    public static ResultSetsOptionKind ResultSetsDefined;
}
public enum Microsoft.SqlServer.TransactSql.ScriptDom.ResultSetType : Enum {
    public int value__;
    public static ResultSetType Inline;
    public static ResultSetType Object;
    public static ResultSetType Type;
    public static ResultSetType ForXml;
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.RetentionDaysAuditTargetOption : AuditTargetOption {
    private Literal _days;
    public Literal Days { get; public set; }
    public Literal get_Days();
    public void set_Days(Literal value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.RetentionPeriodDefinition : TSqlFragment {
    private IntegerLiteral _duration;
    private TemporalRetentionPeriodUnit _units;
    private bool _isInfinity;
    public IntegerLiteral Duration { get; public set; }
    public TemporalRetentionPeriodUnit Units { get; public set; }
    public bool IsInfinity { get; public set; }
    public IntegerLiteral get_Duration();
    public void set_Duration(IntegerLiteral value);
    public TemporalRetentionPeriodUnit get_Units();
    public void set_Units(TemporalRetentionPeriodUnit value);
    public bool get_IsInfinity();
    public void set_IsInfinity(bool value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
internal class Microsoft.SqlServer.TransactSql.ScriptDom.RetentionUnitHelper : OptionsHelper`1<TimeUnit> {
    internal static RetentionUnitHelper Instance;
    private static RetentionUnitHelper();
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.ReturnStatement : TSqlStatement {
    private ScalarExpression _expression;
    public ScalarExpression Expression { get; public set; }
    public ScalarExpression get_Expression();
    public void set_Expression(ScalarExpression value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.RevertStatement : TSqlStatement {
    private ScalarExpression _cookie;
    public ScalarExpression Cookie { get; public set; }
    public ScalarExpression get_Cookie();
    public void set_Cookie(ScalarExpression value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.RevokeStatement : SecurityStatement {
    private bool _grantOptionFor;
    private bool _cascadeOption;
    public bool GrantOptionFor { get; public set; }
    public bool CascadeOption { get; public set; }
    public bool get_GrantOptionFor();
    public void set_GrantOptionFor(bool value);
    public bool get_CascadeOption();
    public void set_CascadeOption(bool value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.RevokeStatement80 : SecurityStatementBody80 {
    private bool _grantOptionFor;
    private bool _cascadeOption;
    private Identifier _asClause;
    public bool GrantOptionFor { get; public set; }
    public bool CascadeOption { get; public set; }
    public Identifier AsClause { get; public set; }
    public bool get_GrantOptionFor();
    public void set_GrantOptionFor(bool value);
    public bool get_CascadeOption();
    public void set_CascadeOption(bool value);
    public Identifier get_AsClause();
    public void set_AsClause(Identifier value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.RightFunctionCall : PrimaryExpression {
    private List`1<ScalarExpression> _parameters;
    public IList`1<ScalarExpression> Parameters { get; }
    public IList`1<ScalarExpression> get_Parameters();
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.RolePayloadOption : PayloadOption {
    private DatabaseMirroringEndpointRole _role;
    public DatabaseMirroringEndpointRole Role { get; public set; }
    public DatabaseMirroringEndpointRole get_Role();
    public void set_Role(DatabaseMirroringEndpointRole value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public abstract class Microsoft.SqlServer.TransactSql.ScriptDom.RoleStatement : TSqlStatement {
    private Identifier _name;
    public Identifier Name { get; public set; }
    public Identifier get_Name();
    public void set_Name(Identifier value);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.RollbackTransactionStatement : TransactionStatement {
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.RollupGroupingSpecification : GroupingSpecification {
    private List`1<GroupingSpecification> _arguments;
    public IList`1<GroupingSpecification> Arguments { get; }
    public IList`1<GroupingSpecification> get_Arguments();
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.RouteOption : TSqlFragment {
    private RouteOptionKind _optionKind;
    private Literal _literal;
    public RouteOptionKind OptionKind { get; public set; }
    public Literal Literal { get; public set; }
    public RouteOptionKind get_OptionKind();
    public void set_OptionKind(RouteOptionKind value);
    public Literal get_Literal();
    public void set_Literal(Literal value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
internal class Microsoft.SqlServer.TransactSql.ScriptDom.RouteOptionHelper : OptionsHelper`1<RouteOptionKind> {
    internal static RouteOptionHelper Instance;
    private static RouteOptionHelper();
}
public enum Microsoft.SqlServer.TransactSql.ScriptDom.RouteOptionKind : Enum {
    public int value__;
    public static RouteOptionKind Address;
    public static RouteOptionKind BrokerInstance;
    public static RouteOptionKind Lifetime;
    public static RouteOptionKind MirrorAddress;
    public static RouteOptionKind ServiceName;
}
public abstract class Microsoft.SqlServer.TransactSql.ScriptDom.RouteStatement : TSqlStatement {
    private Identifier _name;
    private List`1<RouteOption> _routeOptions;
    public Identifier Name { get; public set; }
    public IList`1<RouteOption> RouteOptions { get; }
    public Identifier get_Name();
    public void set_Name(Identifier value);
    public IList`1<RouteOption> get_RouteOptions();
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.RowValue : TSqlFragment {
    private List`1<ScalarExpression> _columnValues;
    public IList`1<ScalarExpression> ColumnValues { get; }
    public IList`1<ScalarExpression> get_ColumnValues();
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.SaveTransactionStatement : TransactionStatement {
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public abstract class Microsoft.SqlServer.TransactSql.ScriptDom.ScalarExpression : TSqlFragment {
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.ScalarExpressionDialogOption : DialogOption {
    private ScalarExpression _value;
    public ScalarExpression Value { get; public set; }
    public ScalarExpression get_Value();
    public void set_Value(ScalarExpression value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.ScalarExpressionRestoreOption : RestoreOption {
    private ScalarExpression _value;
    public ScalarExpression Value { get; public set; }
    public ScalarExpression get_Value();
    public void set_Value(ScalarExpression value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.ScalarExpressionSequenceOption : SequenceOption {
    private ScalarExpression _optionValue;
    public ScalarExpression OptionValue { get; public set; }
    public ScalarExpression get_OptionValue();
    public void set_OptionValue(ScalarExpression value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.ScalarExpressionSnippet : ScalarExpression {
    private string _script;
    public string Script { get; public set; }
    public string get_Script();
    public void set_Script(string value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.ScalarFunctionReturnType : FunctionReturnType {
    private DataTypeReference _dataType;
    public DataTypeReference DataType { get; public set; }
    public DataTypeReference get_DataType();
    public void set_DataType(DataTypeReference value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.ScalarSubquery : PrimaryExpression {
    private QueryExpression _queryExpression;
    public QueryExpression QueryExpression { get; public set; }
    public QueryExpression get_QueryExpression();
    public void set_QueryExpression(QueryExpression value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.SchemaDeclarationItem : TSqlFragment {
    private ColumnDefinitionBase _columnDefinition;
    private ValueExpression _mapping;
    public ColumnDefinitionBase ColumnDefinition { get; public set; }
    public ValueExpression Mapping { get; public set; }
    public ColumnDefinitionBase get_ColumnDefinition();
    public void set_ColumnDefinition(ColumnDefinitionBase value);
    public ValueExpression get_Mapping();
    public void set_Mapping(ValueExpression value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.SchemaDeclarationItemOpenjson : SchemaDeclarationItem {
    private bool _asJson;
    public bool AsJson { get; public set; }
    public bool get_AsJson();
    public void set_AsJson(bool value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.SchemaObjectFunctionTableReference : TableReferenceWithAliasAndColumns {
    private SchemaObjectName _schemaObject;
    private List`1<ScalarExpression> _parameters;
    public SchemaObjectName SchemaObject { get; public set; }
    public IList`1<ScalarExpression> Parameters { get; }
    public SchemaObjectName get_SchemaObject();
    public void set_SchemaObject(SchemaObjectName value);
    public IList`1<ScalarExpression> get_Parameters();
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.SchemaObjectName : MultiPartIdentifier {
    private static int MaxIdentifiers;
    private static int ServerModifier;
    private static int DatabaseModifier;
    private static int SchemaModifier;
    private static int BaseModifier;
    public Identifier ServerIdentifier { get; }
    public Identifier DatabaseIdentifier { get; }
    public Identifier SchemaIdentifier { get; }
    public Identifier BaseIdentifier { get; }
    public virtual Identifier get_ServerIdentifier();
    public virtual Identifier get_DatabaseIdentifier();
    public virtual Identifier get_SchemaIdentifier();
    public virtual Identifier get_BaseIdentifier();
    protected Identifier ChooseIdentifier(int modifier);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.SchemaObjectNameOrValueExpression : TSqlFragment {
    private SchemaObjectName _schemaObjectName;
    private ValueExpression _valueExpression;
    public SchemaObjectName SchemaObjectName { get; public set; }
    public ValueExpression ValueExpression { get; public set; }
    public SchemaObjectName get_SchemaObjectName();
    public void set_SchemaObjectName(SchemaObjectName value);
    public ValueExpression get_ValueExpression();
    public void set_ValueExpression(ValueExpression value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.SchemaObjectNameSnippet : SchemaObjectName {
    private string _script;
    public string Script { get; public set; }
    public string get_Script();
    public void set_Script(string value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.SchemaObjectResultSetDefinition : ResultSetDefinition {
    private SchemaObjectName _name;
    public SchemaObjectName Name { get; public set; }
    public SchemaObjectName get_Name();
    public void set_Name(SchemaObjectName value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.SchemaPayloadOption : PayloadOption {
    private bool _isStandard;
    public bool IsStandard { get; public set; }
    public bool get_IsStandard();
    public void set_IsStandard(bool value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
internal class Microsoft.SqlServer.TransactSql.ScriptDom.ScriptGenerator.AlignmentPoint : object {
    private string _name;
    public string Name { get; }
    public AlignmentPoint(string name);
    public string get_Name();
}
internal class Microsoft.SqlServer.TransactSql.ScriptDom.ScriptGenerator.EmptyGenerator : TokenGenerator {
    public virtual void Generate(ScriptWriter writer);
}
internal class Microsoft.SqlServer.TransactSql.ScriptDom.ScriptGenerator.IdentifierGenerator : TokenGenerator {
    private string _identifier;
    public IdentifierGenerator(string identifier);
    public IdentifierGenerator(string identifier, bool appendSpace);
    public virtual void Generate(ScriptWriter writer);
}
internal class Microsoft.SqlServer.TransactSql.ScriptDom.ScriptGenerator.KeywordGenerator : TokenGenerator {
    private TSqlTokenType _keywordId;
    public KeywordGenerator(TSqlTokenType keywordId);
    public KeywordGenerator(TSqlTokenType keywordId, bool appendSpace);
    public virtual void Generate(ScriptWriter writer);
}
internal static class Microsoft.SqlServer.TransactSql.ScriptDom.ScriptGenerator.ScriptGeneratorSupporter : object {
    internal static string EscapedRSquareParen;
    internal static string EscapedQuote;
    internal static string Quote;
    private static String[] _typeStrings;
    public static int TokenTypeCount { get; }
    private static ScriptGeneratorSupporter();
    public static int get_TokenTypeCount();
    [SuppressMessageAttribute("Microsoft.Globalization", "CA1308:NormalizeStringsToUppercase")]
public static string GetCasedString(string str, KeywordCasing casing);
    [SuppressMessageAttribute("Microsoft.Globalization", "CA1308:NormalizeStringsToUppercase")]
public static string GetPascalCase(string str);
    public static string GetLowerCase(TSqlTokenType tokenType);
    public static string GetUpperCase(TSqlTokenType tokenType);
    public static string GetPascalCase(TSqlTokenType tokenType);
    public static string GetTokenString(TSqlTokenType tokenType, KeywordCasing casing);
    public static TSqlParserToken CreateWhitespaceToken(int count);
    internal static void CheckForNullReference(object variable, string variableName);
}
internal class Microsoft.SqlServer.TransactSql.ScriptDom.ScriptGenerator.ScriptWriter : object {
    private static NewLineElement _newLine;
    private static TSqlParserToken _newLineToken;
    private SqlScriptGeneratorOptions _options;
    private Dictionary`2<AlignmentPoint, AlignmentPointData> _alignmentPointDataMap;
    private Dictionary`2<string, AlignmentPoint> _alignmentPointNameMapForCurrentScope;
    private Stack`1<Dictionary`2<string, AlignmentPoint>> _alignmentPointNameMaps;
    private List`1<ScriptWriterElement> _scriptWriterElements;
    private Stack`1<AlignmentPoint> _newLineAlignmentPoints;
    public ScriptWriter(SqlScriptGeneratorOptions options);
    private static ScriptWriter();
    public void AddKeyword(TSqlTokenType keywordId);
    public void AddIdentifierWithCasing(string text);
    public void AddIdentifierWithoutCasing(string text);
    public void AddToken(TSqlParserToken token);
    public void NewLine();
    public void Indent(int size);
    public void Mark(AlignmentPoint ap);
    public void PushNewLineAlignmentPoint(AlignmentPoint ap);
    public void PopNewLineAlignmentPoint();
    public AlignmentPoint FindOrCreateAlignmentPoint(string name);
    public void WriteTo(TextWriter writer);
    public void WriteTo(IList`1<TSqlParserToken> tokens);
    private void AddIdentifier(string text, bool applyCasing);
    private void AddSpace(int count);
    private void AddTokenWrapper(TokenWrapper token);
    private void AddAlignmentPoint(AlignmentPoint ap);
    private void AddNewLine();
    private ScriptWriterElement FindOrCreateAlignmentPointData(AlignmentPoint ap);
    private List`1<TSqlParserToken> TryGetAlignedTokens();
    private List`1<TSqlParserToken> Align();
    private List`1<TSqlParserToken> GetAllTokens();
    private static AlignmentPointData FindOneAlignmentPointWithOutDependent(HashSet`1<AlignmentPointData> points);
}
internal class Microsoft.SqlServer.TransactSql.ScriptDom.ScriptGenerator.Sql100ScriptGeneratorVisitor : SqlScriptGeneratorVisitor {
    private static HashSet`1<Type> _typesCantHaveSemiColon;
    internal HashSet`1<Type> StatementsThatCannotHaveSemiColon { get; }
    public Sql100ScriptGeneratorVisitor(SqlScriptGeneratorOptions options, ScriptWriter writer);
    private static Sql100ScriptGeneratorVisitor();
    internal virtual HashSet`1<Type> get_StatementsThatCannotHaveSemiColon();
}
internal class Microsoft.SqlServer.TransactSql.ScriptDom.ScriptGenerator.Sql110ScriptGeneratorVisitor : SqlScriptGeneratorVisitor {
    private static HashSet`1<Type> _typesCantHaveSemiColon;
    internal HashSet`1<Type> StatementsThatCannotHaveSemiColon { get; }
    public Sql110ScriptGeneratorVisitor(SqlScriptGeneratorOptions options, ScriptWriter writer);
    private static Sql110ScriptGeneratorVisitor();
    internal virtual HashSet`1<Type> get_StatementsThatCannotHaveSemiColon();
}
internal class Microsoft.SqlServer.TransactSql.ScriptDom.ScriptGenerator.Sql120ScriptGeneratorVisitor : SqlScriptGeneratorVisitor {
    private static HashSet`1<Type> _typesCantHaveSemiColon;
    internal HashSet`1<Type> StatementsThatCannotHaveSemiColon { get; }
    public Sql120ScriptGeneratorVisitor(SqlScriptGeneratorOptions options, ScriptWriter writer);
    private static Sql120ScriptGeneratorVisitor();
    internal virtual HashSet`1<Type> get_StatementsThatCannotHaveSemiColon();
}
internal class Microsoft.SqlServer.TransactSql.ScriptDom.ScriptGenerator.Sql130ScriptGeneratorVisitor : SqlScriptGeneratorVisitor {
    private static HashSet`1<Type> _typesCantHaveSemiColon;
    internal HashSet`1<Type> StatementsThatCannotHaveSemiColon { get; }
    public Sql130ScriptGeneratorVisitor(SqlScriptGeneratorOptions options, ScriptWriter writer);
    private static Sql130ScriptGeneratorVisitor();
    internal virtual HashSet`1<Type> get_StatementsThatCannotHaveSemiColon();
}
internal class Microsoft.SqlServer.TransactSql.ScriptDom.ScriptGenerator.Sql140ScriptGeneratorVisitor : SqlScriptGeneratorVisitor {
    private static HashSet`1<Type> _typesCantHaveSemiColon;
    internal HashSet`1<Type> StatementsThatCannotHaveSemiColon { get; }
    public Sql140ScriptGeneratorVisitor(SqlScriptGeneratorOptions options, ScriptWriter writer);
    private static Sql140ScriptGeneratorVisitor();
    internal virtual HashSet`1<Type> get_StatementsThatCannotHaveSemiColon();
}
internal class Microsoft.SqlServer.TransactSql.ScriptDom.ScriptGenerator.Sql150ScriptGeneratorVisitor : SqlScriptGeneratorVisitor {
    private static HashSet`1<Type> _typesCantHaveSemiColon;
    internal HashSet`1<Type> StatementsThatCannotHaveSemiColon { get; }
    public Sql150ScriptGeneratorVisitor(SqlScriptGeneratorOptions options, ScriptWriter writer);
    private static Sql150ScriptGeneratorVisitor();
    internal virtual HashSet`1<Type> get_StatementsThatCannotHaveSemiColon();
    public virtual void ExplicitVisit(DataRetentionTableOption node);
}
internal class Microsoft.SqlServer.TransactSql.ScriptDom.ScriptGenerator.Sql80ScriptGeneratorVisitor : SqlScriptGeneratorVisitor {
    private static HashSet`1<Type> _typesCantHaveSemiColon;
    internal HashSet`1<Type> StatementsThatCannotHaveSemiColon { get; }
    public Sql80ScriptGeneratorVisitor(SqlScriptGeneratorOptions options, ScriptWriter writer);
    private static Sql80ScriptGeneratorVisitor();
    protected virtual void GenerateIndexOptions(IList`1<IndexOption> options);
    public virtual void ExplicitVisit(IndexStateOption node);
    internal virtual HashSet`1<Type> get_StatementsThatCannotHaveSemiColon();
}
internal class Microsoft.SqlServer.TransactSql.ScriptDom.ScriptGenerator.Sql90ScriptGeneratorVisitor : SqlScriptGeneratorVisitor {
    private static HashSet`1<Type> _typesCantHaveSemiColon;
    internal HashSet`1<Type> StatementsThatCannotHaveSemiColon { get; }
    public Sql90ScriptGeneratorVisitor(SqlScriptGeneratorOptions options, ScriptWriter writer);
    private static Sql90ScriptGeneratorVisitor();
    internal virtual HashSet`1<Type> get_StatementsThatCannotHaveSemiColon();
}
internal abstract class Microsoft.SqlServer.TransactSql.ScriptDom.ScriptGenerator.SqlScriptGeneratorVisitor : TSqlConcreteFragmentVisitor {
    protected static string ClauseBody;
    protected static string SetClauseItemFirstEqualSign;
    protected static string SetClauseItemSecondEqualSign;
    protected static string InsertColumns;
    protected static Dictionary`2<EndpointState, string> _endpointStateNames;
    protected static Dictionary`2<EndpointProtocol, string> _endpointProtocolNames;
    protected static Dictionary`2<EndpointType, string> _endpointTypeNames;
    protected static Dictionary`2<PayloadOptionKinds, TokenGenerator> _payloadOptionKindsGenerators;
    protected static Dictionary`2<SimpleAlterFullTextIndexActionKind, List`1<TokenGenerator>> _simpleAlterFulltextIndexActionKindActions;
    private static Dictionary`2<AlterTableAlterColumnOption, List`1<TokenGenerator>> _alterTableAlterColumnOptionNames;
    protected static Dictionary`2<TableElementType, TokenGenerator> _tableElementTypeGenerators;
    protected static Dictionary`2<AuthenticationTypes, TokenGenerator> _authenticationTypesGenerators;
    protected static Dictionary`2<AuthenticationProtocol, string> _authenticationProtocolNames;
    protected static Dictionary`2<AutomaticTuningOptionState, string> _optionNames;
    protected static Dictionary`2<DialogOptionKind, string> _dialogOptionNames;
    protected static Dictionary`2<BinaryQueryExpressionType, TokenGenerator> _binaryQueryExpressionTypeGenerators;
    protected static Dictionary`2<BooleanTernaryExpressionType, List`1<TokenGenerator>> _ternaryExpressionTypeGenerators;
    private static Dictionary`2<CertificateOptionKinds, string> _certificateOptionNames;
    private static Array _commandOptions;
    protected static Dictionary`2<BinaryExpressionType, List`1<TokenGenerator>> _binaryExpressionTypeGenerators;
    protected static Dictionary`2<BooleanComparisonType, List`1<TokenGenerator>> _booleanComparisonTypeGenerators;
    protected static Dictionary`2<BooleanBinaryExpressionType, List`1<TokenGenerator>> _booleanBinaryExpressionTypeGenerators;
    protected bool _generateSemiColon;
    private static Dictionary`2<DeleteUpdateAction, List`1<TokenGenerator>> _deleteUpdateActionGenerators;
    protected static Dictionary`2<MessageSender, TokenGenerator> _messageSenderGenerators;
    protected static Dictionary`2<PermissionSetOption, string> _permissionSetOptionNames;
    private static HashSet`1<DatabaseOptionKind> azureOnlyOptions;
    private static Dictionary`2<AttachMode, TokenGenerator> _attachModeGenerators;
    protected static Dictionary`2<ExternalDataSourceType, string> _externalDataSourceTypeNames;
    protected static Dictionary`2<ExternalDataSourcePushdownOption, string> _externalDataSourcePushdownOption;
    protected static Dictionary`2<ExternalFileFormatType, string> _externalFileFormatTypeNames;
    private static Dictionary`2<SecondaryXmlIndexType, string> _secondaryXmlIndexTypeNames;
    protected SqlScriptGeneratorOptions _options;
    protected ScriptWriter _writer;
    private Dictionary`2<TSqlFragment, Dictionary`2<string, AlignmentPoint>> _alignmentPointsForFragments;
    private static Dictionary`2<CursorOptionKind, string> _cursorOptionsNames;
    private static Dictionary`2<DatabaseAuditActionKind, TokenGenerator> _databaseAuditActionName;
    private static Dictionary`2<DbccCommand, string> _dbccCommandNames;
    private static Dictionary`2<DbccOptionKind, TokenGenerator> _dbccOptionsGenerators;
    private static Dictionary`2<DeviceType, TokenGenerator> _deviceTypeGenerators;
    protected static Dictionary`2<DropClusteredConstraintOptionKind, List`1<TokenGenerator>> _dropClusteredConstraintOptionTypeGenerators;
    protected static Dictionary`2<EndpointEncryptionSupport, TokenGenerator> _endpointEncryptionSupportGenerators;
    private static Dictionary`2<ExecuteAsOption, TokenGenerator> _executeAsOptionGenerators;
    protected static Dictionary`2<SortOrder, TokenGenerator> _sortOrderGenerators;
    protected static Dictionary`2<ExternalFileFormatUseDefaultType, string> _externalFileFormatUseDefaultTypeNames;
    protected static Dictionary`2<ExternalTableRejectType, string> _externalTableRejectTypeNames;
    private static Dictionary`2<FetchOrientation, string> _fetchOrientationNames;
    protected static Dictionary`2<NonTransactedFileStreamAccess, string> _nonTransactedFileStreamAccessNames;
    protected static Dictionary`2<FullTextFunctionType, TokenGenerator> _fulltextFunctionTypeGenerators;
    protected static Dictionary`2<FunctionOptionKind, List`1<TokenGenerator>> _functionOptionsGenerators;
    protected static Dictionary`2<GeneralSetCommandType, TokenGenerator> _generalSetCommandTypeGenerators;
    private static Dictionary`2<PrincipalOptionKind, string> _loginOptionsNames;
    protected static Dictionary`2<InsertOption, TokenGenerator> _insertOptionGenerators;
    protected static Dictionary`2<JsonForClauseOptions, TokenGenerator> _jsonForClauseOptionsGenerators;
    protected static Dictionary`2<EndpointProtocolOptions, string> _endpointProtocolOptionsNames;
    private static Dictionary`2<MessageValidationMethod, string> _MessageValidationMethodNames;
    protected static Dictionary`2<OptimizerHintKind, List`1<TokenGenerator>> _optimizerHintKindsGenerators;
    private static Dictionary`2<PageVerifyDatabaseOptionKind, string> _pageVerifyDatabaseOptionKindNames;
    protected static Dictionary`2<ParameterlessCallType, TokenGenerator> _parameterlessCallTypeGenerators;
    protected static Dictionary`2<PortTypes, TokenGenerator> _portTypesGenerators;
    protected static Dictionary`2<SetOptions, TokenGenerator> _setOptionsGenerators;
    private static Dictionary`2<PrivilegeType80, TokenGenerator> _privilegeType80Generators;
    protected static Dictionary`2<QualifiedJoinType, List`1<TokenGenerator>> _qualifiedJoinTypeGenerators;
    protected static Dictionary`2<QueryStoreCapturePolicyOptionKind, string> _captureModeOptionNames;
    protected static Dictionary`2<QueryStoreSizeCleanupPolicyOptionKind, string> _sizeBasedCleanupOptionNames;
    private static Dictionary`2<QueueOptionKind, string> _queueOptionTypeNames;
    protected static Dictionary`2<RaiseErrorOptions, TokenGenerator> _raiseErrorOptionsGenerators;
    private static Dictionary`2<RecoveryDatabaseOptionKind, TokenGenerator> _recoveryDatabaseOptionKindNames;
    protected static Dictionary`2<RestoreOptionKind, TokenGenerator> _restoreOptionKindGenerators;
    private static Dictionary`2<RestoreStatementKind, TokenGenerator> _restoreStatementKindGenerators;
    protected static Dictionary`2<DatabaseMirroringEndpointRole, TokenGenerator> _databaseMirroringEndpointRoleGenerators;
    private static Dictionary`2<RouteOptionKind, string> _RouteOptionTypeNames;
    protected static Dictionary`2<SecurityObjectKind, List`1<TokenGenerator>> _securityObjectKindGenerators;
    private static Dictionary`2<AssignmentKind, TSqlTokenType> _assignmentKindSymbols;
    protected static Dictionary`2<SetOffsets, TokenGenerator> _setOffsetsGenerators;
    protected static Dictionary`2<IsolationLevel, List`1<TokenGenerator>> _isolationLevelGenerators;
    protected static Dictionary`2<SoapMethodAction, TokenGenerator> _soapMethodActionGenerators;
    protected static Dictionary`2<SoapMethodSchemas, TokenGenerator> _soapMethodSchemasGenerators;
    protected static Dictionary`2<SoapMethodFormat, string> _soapMethodFormatNames;
    protected static Dictionary`2<SqlDataTypeOption, TokenGenerator> _sqlDataTypeOptionGenerators;
    protected static Dictionary`2<SubqueryComparisonPredicateType, TokenGenerator> _subqueryComparisonPredicateTypeGenerators;
    protected static Dictionary`2<TableSampleClauseOption, TokenGenerator> _tableSampleClauseOptionGenerators;
    private static Dictionary`2<TriggerType, List`1<TokenGenerator>> _triggerTypeGenerators;
    protected static Dictionary`2<UnaryExpressionType, List`1<TokenGenerator>> _unaryExpressionTypeGenerators;
    protected static Dictionary`2<UnqualifiedJoinType, List`1<TokenGenerator>> _unqualifiedJoinTypeGenerators;
    protected static Dictionary`2<ViewOptionKind, string> _viewOptionTypeNames;
    protected static Dictionary`2<WaitForOption, TokenGenerator> _waitForOptionGenerators;
    protected static Dictionary`2<XmlDataTypeOption, TokenGenerator> _xmlDataTypeOptionGenerators;
    protected static Dictionary`2<XmlForClauseOptions, List`1<TokenGenerator>> _xmlForClauseOptionsGenerators;
    [CompilerGeneratedAttribute]
private static Func`2<DatabaseOption, bool> CS$<>9__CachedAnonymousMethodDelegate3;
    [CompilerGeneratedAttribute]
private static Func`2<DatabaseOption, bool> CS$<>9__CachedAnonymousMethodDelegate4;
    internal HashSet`1<Type> StatementsThatCannotHaveSemiColon { get; }
    public SqlScriptGeneratorVisitor(SqlScriptGeneratorOptions options, ScriptWriter writer);
    private static SqlScriptGeneratorVisitor();
    public virtual void ExplicitVisit(AlterExternalLibraryStatement node);
    public virtual void ExplicitVisit(CreateExternalLibraryStatement node);
    public virtual void ExplicitVisit(DropExternalLibraryStatement node);
    public virtual void ExplicitVisit(AlterExternalLanguageStatement node);
    private void GenerateExternalLanguageFileFragment(ExternalLanguageFileOption file);
    public virtual void ExplicitVisit(CreateExternalLanguageStatement node);
    public virtual void ExplicitVisit(DropExternalLanguageStatement node);
    public virtual void ExplicitVisit(CopyColumnOption node);
    public virtual void ExplicitVisit(CopyCredentialOption node);
    public virtual void ExplicitVisit(CopyOption node);
    private string ExtractStringValue(StringLiteral credOption);
    private string ExtractStringValue(CopyStatementOptionBase option);
    public virtual void ExplicitVisit(CopyStatement node);
    public virtual void ExplicitVisit(CreateExternalStreamingJobStatement node);
    public virtual void ExplicitVisit(CreateWorkloadClassifierStatement node);
    public virtual void ExplicitVisit(CreateExternalStreamStatement node);
    protected void GenerateExternalStreamStatementBody(ExternalStreamStatement node);
    private void GenerateExternalStreamOptions(ExternalStreamStatement node);
    public virtual void ExplicitVisit(DropExternalStreamingJobStatement node);
    public virtual void ExplicitVisit(DropExternalStreamStatement node);
    public virtual void ExplicitVisit(ExternalStreamLiteralOrIdentifierOption node);
    public virtual void ExplicitVisit(GlobalFunctionTableReference node);
    public virtual void ExplicitVisit(LedgerTableOption node);
    public virtual void ExplicitVisit(ListTypeCopyOption node);
    public virtual void ExplicitVisit(PredictTableReference node);
    public virtual void ExplicitVisit(SingleValueTypeCopyOption node);
    public virtual void ExplicitVisit(ViewForAppendOption node);
    public virtual void ExplicitVisit(ViewHashDistributionPolicy node);
    public virtual void ExplicitVisit(ViewRoundRobinDistributionPolicy node);
    public virtual void ExplicitVisit(ViewDistributionOption node);
    public virtual void ExplicitVisit(TruncateTargetTableSwitchOption node);
    protected void GenerateWorkloadClassifierStatementBody(WorkloadClassifierStatement node);
    public virtual void ExplicitVisit(ClassifierWorkloadGroupOption node);
    public virtual void ExplicitVisit(ClassifierMemberNameOption node);
    public virtual void ExplicitVisit(ClassifierWlmLabelOption node);
    public virtual void ExplicitVisit(ClassifierWlmContextOption node);
    public virtual void ExplicitVisit(ClassifierStartTimeOption node);
    public virtual void ExplicitVisit(ClassifierEndTimeOption node);
    public virtual void ExplicitVisit(ClassifierImportanceOption node);
    public virtual void ExplicitVisit(AcceleratedDatabaseRecoveryDatabaseOption node);
    public virtual void ExplicitVisit(AddFileSpec node);
    public virtual void ExplicitVisit(AddSensitivityClassificationStatement node);
    public virtual void ExplicitVisit(SensitivityClassificationOption node);
    public virtual void ExplicitVisit(AddSignatureStatement node);
    public virtual void ExplicitVisit(AdHocDataSource node);
    public virtual void ExplicitVisit(AdHocTableReference node);
    public virtual void ExplicitVisit(AlterApplicationRoleStatement node);
    public virtual void ExplicitVisit(AlterAssemblyStatement node);
    internal void GenerateAssemblyOptions(IList`1<AssemblyOption> options);
    public virtual void ExplicitVisit(AssemblyOption node);
    public virtual void ExplicitVisit(PermissionSetAssemblyOption node);
    public virtual void ExplicitVisit(OnOffAssemblyOption node);
    public virtual void ExplicitVisit(AlterAuthorizationStatement node);
    public virtual void ExplicitVisit(AlterAvailabilityGroupStatement node);
    public virtual void ExplicitVisit(AlterAvailabilityGroupAction node);
    public virtual void ExplicitVisit(AlterAvailabilityGroupFailoverAction node);
    public virtual void ExplicitVisit(AlterAvailabilityGroupFailoverOption node);
    public virtual void ExplicitVisit(AlterBrokerPriorityStatement node);
    public virtual void ExplicitVisit(AlterCertificateStatement node);
    public virtual void ExplicitVisit(AlterColumnEncryptionKeyStatement node);
    protected void GenerateEndpointBody(AlterCreateEndpointStatementBase node);
    public virtual void ExplicitVisit(AlterCredentialStatement node);
    public virtual void ExplicitVisit(AlterDatabaseAddFileGroupStatement node);
    public virtual void ExplicitVisit(AlterDatabaseAddFileStatement node);
    public virtual void ExplicitVisit(AlterDatabaseCollateStatement node);
    public virtual void ExplicitVisit(GenericConfigurationOption node);
    public virtual void ExplicitVisit(AlterDatabaseModifyFileGroupStatement node);
    public virtual void ExplicitVisit(AlterDatabaseModifyFileStatement node);
    public virtual void ExplicitVisit(AlterDatabaseModifyNameStatement node);
    public virtual void ExplicitVisit(AlterDatabaseRebuildLogStatement node);
    public virtual void ExplicitVisit(AlterDatabaseRemoveFileGroupStatement node);
    public virtual void ExplicitVisit(AlterDatabaseRemoveFileStatement node);
    public virtual void ExplicitVisit(AlterDatabaseSetStatement node);
    public virtual void ExplicitVisit(AlterDatabaseScopedConfigurationClearStatement node);
    public virtual void ExplicitVisit(AlterDatabaseScopedConfigurationSetStatement node);
    protected void GenerateAlterDatabaseScopedConfigHead(AlterDatabaseScopedConfigurationStatement node);
    protected void GenerateAlterDbStatementHead(AlterDatabaseStatement node);
    public virtual void ExplicitVisit(AlterDatabaseTermination node);
    public virtual void ExplicitVisit(AlterEndpointStatement node);
    public virtual void ExplicitVisit(AlterExternalDataSourceStatement node);
    protected void GenerateAlterExternalDataSourceStatementBody(AlterExternalDataSourceStatement node);
    private void GenerateAlterExternalDataSourceOptions(AlterExternalDataSourceStatement node);
    public virtual void ExplicitVisit(AlterExternalResourcePoolStatement node);
    public virtual void ExplicitVisit(AlterFederationStatement node);
    public virtual void ExplicitVisit(AlterFullTextCatalogStatement node);
    public virtual void ExplicitVisit(AlterFullTextIndexStatement node);
    public virtual void ExplicitVisit(SimpleAlterFullTextIndexAction node);
    public virtual void ExplicitVisit(SetStopListAlterFullTextIndexAction node);
    public virtual void ExplicitVisit(SetSearchPropertyListAlterFullTextIndexAction node);
    public virtual void ExplicitVisit(DropAlterFullTextIndexAction node);
    public virtual void ExplicitVisit(AddAlterFullTextIndexAction node);
    public virtual void ExplicitVisit(AlterColumnAlterFullTextIndexAction node);
    protected void GenerateWithNoPopulation(bool withNoPopulation);
    public virtual void ExplicitVisit(AlterFullTextStopListStatement node);
    public virtual void ExplicitVisit(AlterFunctionStatement node);
    public virtual void ExplicitVisit(AlterIndexStatement node);
    public virtual void ExplicitVisit(AlterLoginEnableDisableStatement node);
    public virtual void ExplicitVisit(AlterLoginOptionsStatement node);
    public virtual void ExplicitVisit(AlterLoginAddDropCredentialStatement node);
    private void GenerateAlterLoginHeader(AlterLoginStatement node);
    public virtual void ExplicitVisit(AlterMasterKeyStatement node);
    private void GenerateRegenerateOption(Literal password);
    private void GenerateEncyptionByServiceMasterKey();
    public virtual void ExplicitVisit(AlterMessageTypeStatement node);
    public virtual void ExplicitVisit(AlterPartitionFunctionStatement node);
    public virtual void ExplicitVisit(AlterPartitionSchemeStatement node);
    public virtual void ExplicitVisit(AlterProcedureStatement node);
    public virtual void ExplicitVisit(AlterQueueStatement node);
    public virtual void ExplicitVisit(AlterRemoteServiceBindingStatement node);
    public virtual void ExplicitVisit(AlterResourceGovernorStatement node);
    public void GenerateResourceGovernorClassifierFunction(AlterResourceGovernorStatement node);
    public virtual void ExplicitVisit(AlterResourcePoolStatement node);
    public virtual void ExplicitVisit(RenameAlterRoleAction node);
    public virtual void ExplicitVisit(AddMemberAlterRoleAction node);
    public virtual void ExplicitVisit(DropMemberAlterRoleAction node);
    public virtual void ExplicitVisit(AlterRoleStatement node);
    public virtual void ExplicitVisit(AlterRouteStatement node);
    public virtual void ExplicitVisit(AlterSchemaStatement node);
    public virtual void ExplicitVisit(AlterSearchPropertyListStatement node);
    public virtual void ExplicitVisit(AlterSequenceStatement node);
    public virtual void ExplicitVisit(AlterSecurityPolicyStatement node);
    public virtual void ExplicitVisit(AlterServerConfigurationSetBufferPoolExtensionStatement node);
    public virtual void ExplicitVisit(AlterServerConfigurationBufferPoolExtensionContainerOption node);
    public virtual void ExplicitVisit(AlterServerConfigurationBufferPoolExtensionOption node);
    public virtual void ExplicitVisit(AlterServerConfigurationBufferPoolExtensionSizeOption node);
    public virtual void ExplicitVisit(AlterServerConfigurationSetDiagnosticsLogStatement node);
    public virtual void ExplicitVisit(AlterServerConfigurationDiagnosticsLogOption node);
    public virtual void ExplicitVisit(AlterServerConfigurationDiagnosticsLogMaxSizeOption node);
    public virtual void ExplicitVisit(AlterServerConfigurationSetExternalAuthenticationStatement node);
    public virtual void ExplicitVisit(AlterServerConfigurationExternalAuthenticationContainerOption node);
    public virtual void ExplicitVisit(AlterServerConfigurationExternalAuthenticationOption node);
    public virtual void ExplicitVisit(AlterServerConfigurationSetFailoverClusterPropertyStatement node);
    public virtual void ExplicitVisit(AlterServerConfigurationFailoverClusterPropertyOption node);
    public virtual void ExplicitVisit(AlterServerConfigurationSetHadrClusterStatement node);
    public virtual void ExplicitVisit(AlterServerConfigurationHadrClusterOption node);
    public virtual void ExplicitVisit(AlterServerConfigurationSetSoftNumaStatement node);
    public virtual void ExplicitVisit(AlterServerConfigurationSoftNumaOption node);
    public virtual void ExplicitVisit(AlterServerConfigurationStatement node);
    public virtual void ExplicitVisit(ProcessAffinityRange node);
    public virtual void ExplicitVisit(AlterServerRoleStatement node);
    public virtual void ExplicitVisit(AlterServiceMasterKeyStatement node);
    private void GenerateWithClause(AlterServiceMasterKeyStatement node, string accountTitle, string passwordTitle);
    public virtual void ExplicitVisit(AlterServiceStatement node);
    public virtual void ExplicitVisit(AlterTableAddTableElementStatement node);
    public virtual void ExplicitVisit(AlterTableAlterColumnStatement node);
    public virtual void ExplicitVisit(AlterTableAlterIndexStatement node);
    public virtual void ExplicitVisit(AlterTableChangeTrackingModificationStatement node);
    public virtual void ExplicitVisit(AlterTableConstraintModificationStatement node);
    public virtual void ExplicitVisit(AlterTableDropTableElement node);
    public virtual void ExplicitVisit(AlterTableDropTableElementStatement node);
    public virtual void ExplicitVisit(AlterTableFileTableNamespaceStatement node);
    public virtual void ExplicitVisit(AlterTableRebuildStatement node);
    public virtual void ExplicitVisit(AlterTableAlterPartitionStatement node);
    public virtual void ExplicitVisit(AlterTableSetStatement node);
    protected void GenerateAlterTableHead(AlterTableStatement node);
    protected void GenerateConstraintEnforcement(ConstraintEnforcement enforcement);
    public virtual void ExplicitVisit(AlterTableSwitchStatement node);
    private void GenerateForPartitionIfNotNull(ScalarExpression expression);
    public virtual void ExplicitVisit(AlterTableTriggerModificationStatement node);
    public virtual void ExplicitVisit(AlterTriggerStatement node);
    public virtual void ExplicitVisit(AlterUserStatement node);
    public virtual void ExplicitVisit(AlterViewStatement node);
    public virtual void ExplicitVisit(AlterWorkloadGroupStatement node);
    public virtual void ExplicitVisit(AlterXmlSchemaCollectionStatement node);
    public virtual void ExplicitVisit(ApplicationRoleOption node);
    protected void GenerateApplicationRoleStatementBase(ApplicationRoleStatement node);
    public virtual void ExplicitVisit(AssemblyName node);
    public virtual void ExplicitVisit(AsymmetricKeyCreateLoginSource node);
    public virtual void ExplicitVisit(CreateAsymmetricKeyStatement node);
    public virtual void ExplicitVisit(AlterAsymmetricKeyStatement node);
    public virtual void ExplicitVisit(DropAsymmetricKeyStatement node);
    private void GenerateRemoveProviderKeyOpt(bool generate);
    private void GenerateAsymmetricKeyName(Identifier name);
    public virtual void ExplicitVisit(AtTimeZoneCall node);
    public virtual void ExplicitVisit(AuditActionGroupReference node);
    public virtual void ExplicitVisit(AuditActionSpecification node);
    public virtual void ExplicitVisit(AuditSpecificationPart node);
    protected void GenerateAuditSpecificationStatement(AuditSpecificationStatement node);
    public virtual void ExplicitVisit(AuditTarget node);
    public virtual void ExplicitVisit(MaxSizeAuditTargetOption node);
    public virtual void ExplicitVisit(RetentionDaysAuditTargetOption node);
    public virtual void ExplicitVisit(MaxRolloverFilesAuditTargetOption node);
    public virtual void ExplicitVisit(LiteralAuditTargetOption node);
    public virtual void ExplicitVisit(OnOffAuditTargetOption node);
    public virtual void ExplicitVisit(AuthenticationEndpointProtocolOption node);
    public virtual void ExplicitVisit(AuthenticationPayloadOption node);
    protected void GenerateCertificateForAuthenticationPayloadOption(bool generate, Identifier certificateName);
    public virtual void ExplicitVisit(AutoCleanupChangeTrackingOptionDetail node);
    public virtual void ExplicitVisit(AutoCreateStatisticsDatabaseOption node);
    public virtual void ExplicitVisit(AutomaticTuningDatabaseOption node);
    public virtual void ExplicitVisit(AutomaticTuningCreateIndexOption node);
    public virtual void ExplicitVisit(AutomaticTuningDropIndexOption node);
    public virtual void ExplicitVisit(AutomaticTuningForceLastGoodPlanOption node);
    public virtual void ExplicitVisit(AutomaticTuningMaintainIndexOption node);
    public virtual void ExplicitVisit(AvailabilityReplica node);
    public virtual void ExplicitVisit(AvailabilityModeReplicaOption node);
    public virtual void ExplicitVisit(FailoverModeReplicaOption node);
    public virtual void ExplicitVisit(LiteralReplicaOption node);
    public virtual void ExplicitVisit(SecondaryRoleReplicaOption node);
    public virtual void ExplicitVisit(PrimaryRoleReplicaOption node);
    public virtual void ExplicitVisit(BackupCertificateStatement node);
    public virtual void ExplicitVisit(BackupDatabaseStatement node);
    public virtual void ExplicitVisit(BackupOption node);
    public virtual void ExplicitVisit(BackupEncryptionOption node);
    public virtual void ExplicitVisit(BackupMasterKeyStatement node);
    public virtual void ExplicitVisit(BackupRestoreFileInfo node);
    private void GenerateItems(IList`1<ValueExpression> items);
    protected void GenerateCommonRestorePart(BackupRestoreMasterKeyStatementBase node, bool isService);
    public virtual void ExplicitVisit(BackupServiceMasterKeyStatement node);
    protected void GenerateDeviceAndOption(BackupStatement node);
    public virtual void ExplicitVisit(BackupTransactionLogStatement node);
    public virtual void ExplicitVisit(BackwardsCompatibleDropIndexClause node);
    public virtual void ExplicitVisit(BeginConversationTimerStatement node);
    public virtual void ExplicitVisit(BeginDialogStatement node);
    private void GenerateDialogOptions(IList`1<DialogOption> options);
    public virtual void ExplicitVisit(OnOffDialogOption node);
    public virtual void ExplicitVisit(ScalarExpressionDialogOption node);
    public virtual void ExplicitVisit(BeginEndBlockStatement node);
    public virtual void ExplicitVisit(BeginEndAtomicBlockStatement node);
    public virtual void ExplicitVisit(LiteralAtomicBlockOption node);
    public virtual void ExplicitVisit(IdentifierAtomicBlockOption node);
    public virtual void ExplicitVisit(OnOffAtomicBlockOption node);
    public virtual void ExplicitVisit(BeginTransactionStatement node);
    public virtual void ExplicitVisit(BinaryExpression node);
    public virtual void ExplicitVisit(BinaryQueryExpression node);
    public void GenerateBinaryQueryExpression(BinaryQueryExpression node, AlignmentPoint clauseBody, SchemaObjectName intoClause, Identifier filegroupClause);
    public virtual void ExplicitVisit(BooleanBinaryExpression node);
    private bool RightPredicateOnNewline(BooleanBinaryExpression node);
    public virtual void ExplicitVisit(BooleanComparisonExpression node);
    public virtual void ExplicitVisit(BooleanIsNullExpression node);
    public virtual void ExplicitVisit(BooleanNotExpression node);
    public virtual void ExplicitVisit(BooleanParenthesisExpression node);
    public virtual void ExplicitVisit(BooleanTernaryExpression node);
    public virtual void ExplicitVisit(BreakStatement node);
    public virtual void ExplicitVisit(BrokerPriorityParameter node);
    protected void GenerateBrokerPriorityStatementBody(BrokerPriorityStatement node);
    public virtual void ExplicitVisit(BrowseForClause node);
    public virtual void ExplicitVisit(BuiltInFunctionTableReference node);
    protected void GenerateOption(BulkInsertBase node);
    public virtual void ExplicitVisit(OrderBulkInsertOption node);
    public virtual void ExplicitVisit(BulkInsertOption node);
    public virtual void ExplicitVisit(LiteralBulkInsertOption node);
    public virtual void ExplicitVisit(BulkInsertStatement node);
    public virtual void ExplicitVisit(BulkOpenRowset node);
    public virtual void ExplicitVisit(ExpressionCallTarget node);
    public virtual void ExplicitVisit(MultiPartIdentifierCallTarget node);
    public virtual void ExplicitVisit(UserDefinedTypeCallTarget node);
    public virtual void ExplicitVisit(SimpleCaseExpression node);
    public virtual void ExplicitVisit(SearchedCaseExpression node);
    public virtual void ExplicitVisit(CastCall node);
    public virtual void ExplicitVisit(CertificateCreateLoginSource node);
    public virtual void ExplicitVisit(CertificateOption node);
    public virtual void ExplicitVisit(ChangeRetentionChangeTrackingOptionDetail node);
    protected void GenerateChangeTablePrefix(SchemaObjectName target, string changeTableKind);
    public virtual void ExplicitVisit(ChangeTableChangesTableReference node);
    public virtual void ExplicitVisit(ChangeTableVersionTableReference node);
    public virtual void ExplicitVisit(ChangeTrackingDatabaseOption node);
    public virtual void ExplicitVisit(CharacterSetPayloadOption node);
    public virtual void ExplicitVisit(CheckConstraintDefinition node);
    public virtual void ExplicitVisit(CheckpointStatement node);
    public virtual void ExplicitVisit(ChildObjectName node);
    public virtual void ExplicitVisit(CloseCursorStatement node);
    public virtual void ExplicitVisit(CloseMasterKeyStatement node);
    public virtual void ExplicitVisit(CloseSymmetricKeyStatement node);
    public virtual void ExplicitVisit(CoalesceExpression node);
    public virtual void ExplicitVisit(ColumnDefinition node);
    public virtual void ExplicitVisit(ColumnStorageOptions node);
    private void GenerateIdentity(IdentityOptions node, string apName, Boolean& firstConstraint);
    private void GenerateGeneratedAlways(Nullable`1<GeneratedAlwaysType> node);
    private void MarkForConstraintsWhenNecessary(string apName, Boolean& firstConstraint);
    private void MarkWhenNecessary(string apName);
    public virtual void ExplicitVisit(ColumnDefinitionBase node);
    public virtual void ExplicitVisit(ColumnEncryptionAlgorithmNameParameter node);
    public virtual void ExplicitVisit(ColumnEncryptionAlgorithmParameter node);
    public virtual void ExplicitVisit(ColumnEncryptionDefinition node);
    public virtual void ExplicitVisit(ColumnEncryptionKeyNameParameter node);
    public virtual void ExplicitVisit(ColumnEncryptionKeyValue node);
    public virtual void ExplicitVisit(ColumnEncryptionTypeParameter node);
    public virtual void ExplicitVisit(ColumnMasterKeyNameParameter node);
    public virtual void ExplicitVisit(ColumnMasterKeyPathParameter node);
    public virtual void ExplicitVisit(ColumnMasterKeyStoreProviderNameParameter node);
    public virtual void ExplicitVisit(ColumnMasterKeyEnclaveComputationsParameter node);
    public virtual void ExplicitVisit(ColumnReferenceExpression node);
    public virtual void ExplicitVisit(ColumnWithSortOrder node);
    public virtual void ExplicitVisit(CommandSecurityElement80 node);
    private void GenerateCommandOptions(CommandOptions option);
    public virtual void ExplicitVisit(CommitTransactionStatement node);
    protected void GenerateSpaceAndMemoryUnit(MemoryUnit unit);
    protected void GenerateOwnerIfNotNull(Identifier owner);
    private void GenerateCredential(Identifier identifier);
    protected void GenerateRemovePrivateKey();
    protected void GenerateAttestedBy(Literal attestedBy);
    protected void GenerateRemoteAttestedOption();
    internal void GenerateWithPrivateKey(Literal privateKeyPath, Literal encryptionPassword, Literal decryptionPassword);
    protected void GenerateSpaceAndCollation(Identifier collation);
    protected void GenerateTriggerEnforcement(TriggerEnforcement triggerEnforcement);
    protected void GenerateNotForReplication();
    protected void GenerateDecryptionByPassword(Literal password);
    protected void GenerateEncryptionByPassword(Literal password);
    protected void GenerateByPassword(Literal password);
    protected void GenerateBinaryOperator(BinaryExpressionType operatorType);
    protected void GenerateBinaryOperator(BooleanComparisonType operatorType);
    protected void GenerateBinaryOperator(BooleanBinaryExpressionType operatorType);
    protected void GenerateUniqueRowFilter(UniqueRowFilter uniqueRowFilter, bool spaceBefore);
    protected void GenerateNewLineOrSpace(bool newline);
    protected void MarkClauseBodyAlignmentWhenNecessary(bool newline, AlignmentPoint ap);
    protected void MarkInsertColumnsAlignmentPointWhenNecessary(AlignmentPoint ap);
    protected void GenerateSeparatorForOrderBy();
    protected void GenerateSeparatorForFromClause();
    protected void GenerateSeparatorForWhereClause();
    protected void GenerateSeparatorForGroupByClause();
    protected void GenerateSeparatorForHavingClause();
    protected void GenerateSeparatorForOutputClause();
    protected void GenerateSeparatorForOffsetClause();
    protected void GenerateQueryExpressionInParentheses(QueryExpression queryExpression);
    private void GenerateSelectElementsList(IList`1<SelectElement> selectElements);
    protected void GenerateParameters(ParameterizedDataTypeReference node);
    internal abstract virtual HashSet`1<Type> get_StatementsThatCannotHaveSemiColon();
    protected void GenerateSemiColonWhenNecessary(TSqlStatement node);
    protected void GenerateCommaSeparatedWithClause(IList`1<T> fragments, bool indent, bool includeParentheses);
    public virtual void ExplicitVisit(CommonTableExpression node);
    public virtual void ExplicitVisit(CompressionEndpointProtocolOption node);
    public virtual void ExplicitVisit(CompressionPartitionRange node);
    public virtual void ExplicitVisit(ComputeClause node);
    public virtual void ExplicitVisit(ComputeFunction node);
    protected void GenerateConstraintHead(ConstraintDefinition node);
    protected void GenerateDeleteUpdateAction(DeleteUpdateAction action);
    public virtual void ExplicitVisit(ContainmentDatabaseOption node);
    public virtual void ExplicitVisit(ContinueStatement node);
    public virtual void ExplicitVisit(ContractMessage node);
    public virtual void ExplicitVisit(ConvertCall node);
    public virtual void ExplicitVisit(CreateAggregateStatement node);
    public virtual void ExplicitVisit(CreateApplicationRoleStatement node);
    public virtual void ExplicitVisit(CreateAssemblyStatement node);
    public virtual void ExplicitVisit(CreateAvailabilityGroupStatement node);
    public virtual void ExplicitVisit(LiteralAvailabilityGroupOption node);
    public virtual void ExplicitVisit(CreateBrokerPriorityStatement node);
    public virtual void ExplicitVisit(CreateCertificateStatement node);
    private void GenerateEncryptionPassword(Literal password);
    public virtual void ExplicitVisit(CreateColumnEncryptionKeyStatement node);
    public virtual void ExplicitVisit(CreateColumnMasterKeyStatement node);
    public virtual void ExplicitVisit(CreateColumnStoreIndexStatement node);
    public virtual void ExplicitVisit(CreateContractStatement node);
    public virtual void ExplicitVisit(CreateCredentialStatement node);
    public virtual void ExplicitVisit(CreateDatabaseStatement node);
    public virtual void ExplicitVisit(CreateDefaultStatement node);
    public virtual void ExplicitVisit(CreateEndpointStatement node);
    public virtual void ExplicitVisit(CreateExternalDataSourceStatement node);
    protected void GenerateExternalDataSourceStatementBody(ExternalDataSourceStatement node);
    private void GenerateExternalDataSourceOptions(ExternalDataSourceStatement node);
    public virtual void ExplicitVisit(CreateExternalFileFormatStatement node);
    protected void GenerateExternalFileFormatStatementBody(ExternalFileFormatStatement node);
    private void GenerateExternalFileFormatOptions(ExternalFileFormatStatement node);
    public virtual void ExplicitVisit(CreateExternalResourcePoolStatement node);
    public virtual void ExplicitVisit(CreateExternalTableStatement node);
    protected void GenerateExternalTableStatementBody(ExternalTableStatement node);
    private void GenerateExternalTableColumnDefinitions(ExternalTableStatement node);
    private void GenerateExternalTableOptions(ExternalTableStatement node);
    public virtual void ExplicitVisit(CreateEventNotificationStatement node);
    public virtual void ExplicitVisit(CreateFederationStatement node);
    public virtual void ExplicitVisit(CreateFullTextCatalogStatement node);
    public virtual void ExplicitVisit(OnOffFullTextCatalogOption node);
    public virtual void ExplicitVisit(CreateFullTextIndexStatement node);
    public virtual void ExplicitVisit(FullTextCatalogAndFileGroup node);
    public virtual void ExplicitVisit(ChangeTrackingFullTextIndexOption node);
    public virtual void ExplicitVisit(StopListFullTextIndexOption node);
    public virtual void ExplicitVisit(SearchPropertyListFullTextIndexOption node);
    public virtual void ExplicitVisit(CreateFullTextStopListStatement node);
    public virtual void ExplicitVisit(CreateFunctionStatement node);
    public virtual void ExplicitVisit(CreateIndexStatement node);
    protected virtual void GenerateIndexOptions(IList`1<IndexOption> options);
    private void GenerateFileStreamOn(IFileStreamSpecifier node);
    public virtual void ExplicitVisit(CreateLoginStatement node);
    public virtual void ExplicitVisit(CreateMasterKeyStatement node);
    public virtual void ExplicitVisit(CreateMessageTypeStatement node);
    public virtual void ExplicitVisit(CreateOrAlterFunctionStatement node);
    public virtual void ExplicitVisit(CreateOrAlterProcedureStatement node);
    public virtual void ExplicitVisit(CreateOrAlterTriggerStatement node);
    public virtual void ExplicitVisit(CreateOrAlterViewStatement node);
    public virtual void ExplicitVisit(CreatePartitionFunctionStatement node);
    public virtual void ExplicitVisit(PartitionParameterType node);
    public virtual void ExplicitVisit(CreatePartitionSchemeStatement node);
    public virtual void ExplicitVisit(CreateProcedureStatement node);
    public virtual void ExplicitVisit(CreateQueueStatement node);
    public virtual void ExplicitVisit(CreateRemoteServiceBindingStatement node);
    public virtual void ExplicitVisit(CreateResourcePoolStatement node);
    public virtual void ExplicitVisit(CreateRoleStatement node);
    public virtual void ExplicitVisit(CreateRouteStatement node);
    public virtual void ExplicitVisit(CreateRuleStatement node);
    public virtual void ExplicitVisit(CreateSchemaStatement node);
    public virtual void ExplicitVisit(CreateSearchPropertyListStatement node);
    public virtual void ExplicitVisit(CreateSecurityPolicyStatement node);
    public virtual void ExplicitVisit(CreateSelectiveXmlIndexStatement node);
    public virtual void ExplicitVisit(CreateSequenceStatement node);
    public virtual void ExplicitVisit(CreateServerRoleStatement node);
    public virtual void ExplicitVisit(CreateServiceStatement node);
    public virtual void ExplicitVisit(CreateSpatialIndexStatement node);
    public virtual void ExplicitVisit(SpatialIndexRegularOption node);
    public virtual void ExplicitVisit(BoundingBoxSpatialIndexOption node);
    public virtual void ExplicitVisit(BoundingBoxParameter node);
    public virtual void ExplicitVisit(GridsSpatialIndexOption node);
    public virtual void ExplicitVisit(GridParameter node);
    public virtual void ExplicitVisit(CellsPerObjectSpatialIndexOption node);
    public virtual void ExplicitVisit(CreateStatisticsStatement node);
    public virtual void ExplicitVisit(CreateSynonymStatement node);
    public virtual void ExplicitVisit(CreateTableStatement node);
    public virtual void ExplicitVisit(CreateTriggerStatement node);
    public virtual void ExplicitVisit(CreateTypeTableStatement node);
    private void GenerateColumnsConstraintsIndexes(IList`1<T> fragmentList, Boolean& commaNeeded);
    public virtual void ExplicitVisit(CreateTypeUddtStatement node);
    public virtual void ExplicitVisit(CreateTypeUdtStatement node);
    public virtual void ExplicitVisit(CreateUserStatement node);
    public virtual void ExplicitVisit(CreateViewStatement node);
    public virtual void ExplicitVisit(CreateWorkloadGroupStatement node);
    public virtual void ExplicitVisit(CreateXmlIndexStatement node);
    public virtual void ExplicitVisit(CreateXmlSchemaCollectionStatement node);
    protected void GenerateCredentialStatementBody(CredentialStatement node);
    public virtual void ExplicitVisit(CreateCryptographicProviderStatement node);
    public void CryptographicProviderFile(Literal node, AlignmentPoint ap);
    public virtual void ExplicitVisit(AlterCryptographicProviderStatement node);
    public virtual void ExplicitVisit(DropCryptographicProviderStatement node);
    public virtual void ExplicitVisit(CryptoMechanism node);
    private void GenerateIdentifierWithPassword(CryptoMechanism node);
    public virtual void ExplicitVisit(CompressionDelayIndexOption node);
    protected void NewLineAndIndent();
    protected void Indent();
    protected void NewLineAndIndent(int indentSize);
    protected void Indent(int indentSize);
    protected void Mark(AlignmentPoint ap);
    protected void NewLine();
    protected void PushAlignmentPoint(AlignmentPoint ap);
    protected void PopAlignmentPoint();
    protected void MarkAndPushAlignmentPoint(AlignmentPoint ap);
    protected AlignmentPoint FindOrCreateAlignmentPointByName(string apName);
    protected void AddAlignmentPointForFragment(TSqlFragment node, AlignmentPoint ap);
    protected AlignmentPoint GetAlignmentPointForFragment(TSqlFragment node, string name);
    protected void ClearAlignmentPointsForFragment(TSqlFragment node);
    public virtual void ExplicitVisit(CursorDefaultDatabaseOption node);
    public virtual void ExplicitVisit(CursorDefinition node);
    public virtual void ExplicitVisit(CursorOption node);
    public virtual void ExplicitVisit(CursorId node);
    public virtual void ExplicitVisit(DatabaseAuditAction node);
    public virtual void ExplicitVisit(AlterDatabaseAuditSpecificationStatement node);
    public virtual void ExplicitVisit(CreateDatabaseAuditSpecificationStatement node);
    public virtual void ExplicitVisit(DropDatabaseAuditSpecificationStatement node);
    public virtual void ExplicitVisit(DatabaseConfigurationClearOption node);
    public virtual void ExplicitVisit(DatabaseConfigurationSetOption node);
    public virtual void ExplicitVisit(AlterDatabaseEncryptionKeyStatement node);
    public virtual void ExplicitVisit(CreateDatabaseEncryptionKeyStatement node);
    public virtual void ExplicitVisit(DropDatabaseEncryptionKeyStatement node);
    private void GenerateDatabaseEncryptionKeyHeader();
    protected void GenerateDatabaseEncryptionKeyStatementBody(DatabaseEncryptionKeyStatement node);
    public virtual void ExplicitVisit(DatabaseOption node);
    public virtual void ExplicitVisit(DataCompressionOption node);
    public virtual void ExplicitVisit(DataModificationTableReference node);
    public virtual void ExplicitVisit(DbccNamedLiteral node);
    public virtual void ExplicitVisit(DbccStatement node);
    public virtual void ExplicitVisit(DbccOption node);
    protected void GenerateJoinSeparatedList(IList`1<T> list);
    public virtual void ExplicitVisit(DeallocateCursorStatement node);
    public virtual void ExplicitVisit(DeclareCursorStatement node);
    public virtual void ExplicitVisit(DeclareTableVariableStatement node);
    public virtual void ExplicitVisit(DeclareTableVariableBody node);
    public virtual void ExplicitVisit(DeclareVariableElement node);
    public virtual void ExplicitVisit(DeclareVariableStatement node);
    public virtual void ExplicitVisit(DefaultConstraintDefinition node);
    public virtual void ExplicitVisit(DelayedDurabilityDatabaseOption node);
    public virtual void ExplicitVisit(DeleteStatement node);
    public virtual void ExplicitVisit(DeleteSpecification node);
    public virtual void ExplicitVisit(DenyStatement node);
    public virtual void ExplicitVisit(DenyStatement80 node);
    public virtual void ExplicitVisit(QueryDerivedTable node);
    public virtual void ExplicitVisit(InlineDerivedTable node);
    public virtual void ExplicitVisit(DeviceInfo node);
    public virtual void ExplicitVisit(MirrorToClause node);
    public virtual void ExplicitVisit(DiskStatement node);
    public virtual void ExplicitVisit(DiskStatementOption node);
    public virtual void ExplicitVisit(DropAggregateStatement node);
    public virtual void ExplicitVisit(DropApplicationRoleStatement node);
    public virtual void ExplicitVisit(DropAssemblyStatement node);
    public virtual void ExplicitVisit(DropAvailabilityGroupStatement node);
    public virtual void ExplicitVisit(DropBrokerPriorityStatement node);
    public virtual void ExplicitVisit(DropCertificateStatement node);
    protected void GenerateOptionHeader(DropClusteredConstraintOption node);
    public virtual void ExplicitVisit(DropClusteredConstraintValueOption node);
    public virtual void ExplicitVisit(DropClusteredConstraintMoveOption node);
    public virtual void ExplicitVisit(DropClusteredConstraintWaitAtLowPriorityLockOption node);
    public virtual void ExplicitVisit(DropClusteredConstraintStateOption node);
    public virtual void ExplicitVisit(DropColumnEncryptionKeyStatement node);
    public virtual void ExplicitVisit(DropColumnMasterKeyStatement node);
    public virtual void ExplicitVisit(DropContractStatement node);
    public virtual void ExplicitVisit(DropCredentialStatement node);
    public virtual void ExplicitVisit(DropDatabaseStatement node);
    public virtual void ExplicitVisit(DropDefaultStatement node);
    public virtual void ExplicitVisit(DropEndpointStatement node);
    public virtual void ExplicitVisit(DropExternalDataSourceStatement node);
    public virtual void ExplicitVisit(DropExternalFileFormatStatement node);
    public virtual void ExplicitVisit(DropExternalResourcePoolStatement node);
    public virtual void ExplicitVisit(DropExternalTableStatement node);
    public virtual void ExplicitVisit(DropEventNotificationStatement node);
    public virtual void ExplicitVisit(DropFederationStatement node);
    public virtual void ExplicitVisit(DropFullTextCatalogStatement node);
    public virtual void ExplicitVisit(DropFullTextIndexStatement node);
    public virtual void ExplicitVisit(DropFullTextStopListStatement node);
    public virtual void ExplicitVisit(DropFunctionStatement node);
    public virtual void ExplicitVisit(DropIndexClause node);
    public virtual void ExplicitVisit(MoveToDropIndexOption node);
    public virtual void ExplicitVisit(FileStreamOnDropIndexOption node);
    public virtual void ExplicitVisit(DropIndexStatement node);
    public virtual void ExplicitVisit(DropLoginStatement node);
    public virtual void ExplicitVisit(DropMasterKeyStatement node);
    public virtual void ExplicitVisit(DropMessageTypeStatement node);
    public virtual void ExplicitVisit(DropPartitionFunctionStatement node);
    public virtual void ExplicitVisit(DropPartitionSchemeStatement node);
    public virtual void ExplicitVisit(DropProcedureStatement node);
    public virtual void ExplicitVisit(DropQueueStatement node);
    public virtual void ExplicitVisit(DropRemoteServiceBindingStatement node);
    public virtual void ExplicitVisit(DropResourcePoolStatement node);
    public virtual void ExplicitVisit(DropRoleStatement node);
    public virtual void ExplicitVisit(DropRouteStatement node);
    public virtual void ExplicitVisit(DropRuleStatement node);
    public virtual void ExplicitVisit(DropSchemaStatement node);
    public virtual void ExplicitVisit(DropSearchPropertyListStatement node);
    public virtual void ExplicitVisit(DropSecurityPolicyStatement node);
    public virtual void ExplicitVisit(DropSensitivityClassificationStatement node);
    public virtual void ExplicitVisit(DropSequenceStatement node);
    public virtual void ExplicitVisit(DropServerRoleStatement node);
    public virtual void ExplicitVisit(DropServiceStatement node);
    public virtual void ExplicitVisit(DropSignatureStatement node);
    public virtual void ExplicitVisit(DropStatisticsStatement node);
    public virtual void ExplicitVisit(DropSynonymStatement node);
    public virtual void ExplicitVisit(DropTableStatement node);
    public virtual void ExplicitVisit(DropTriggerStatement node);
    public virtual void ExplicitVisit(DropTypeStatement node);
    public virtual void ExplicitVisit(DropUserStatement node);
    public virtual void ExplicitVisit(DropViewStatement node);
    public virtual void ExplicitVisit(DropWorkloadGroupStatement node);
    public virtual void ExplicitVisit(DropXmlSchemaCollectionStatement node);
    public virtual void ExplicitVisit(DurabilityTableOption node);
    public virtual void ExplicitVisit(EnabledDisabledPayloadOption node);
    public virtual void ExplicitVisit(EnableDisableTriggerStatement node);
    public virtual void ExplicitVisit(EncryptedValueParameter node);
    public virtual void ExplicitVisit(EncryptionPayloadOption node);
    private void GenerateSpaceAndAlgorithm(EncryptionAlgorithmPreference alg);
    public virtual void ExplicitVisit(AssemblyEncryptionSource node);
    public virtual void ExplicitVisit(FileEncryptionSource node);
    public virtual void ExplicitVisit(ProviderEncryptionSource node);
    public virtual void ExplicitVisit(EndConversationStatement node);
    public virtual void ExplicitVisit(EndpointAffinity node);
    public virtual void ExplicitVisit(EventGroupContainer node);
    public virtual void ExplicitVisit(EventNotificationObjectScope node);
    public virtual void ExplicitVisit(CreateEventSessionStatement node);
    public void GenerateEventSessionParameters(EventSessionStatement node);
    public void GenerateEventDeclarations(EventSessionStatement node);
    public void GenerateTargetDeclarations(EventSessionStatement node);
    public void GenerateEventSessionOptions(EventSessionStatement node);
    public virtual void ExplicitVisit(EventDeclaration node);
    public virtual void ExplicitVisit(EventDeclarationSetParameter node);
    public virtual void ExplicitVisit(EventSessionObjectName node);
    public virtual void ExplicitVisit(EventDeclarationCompareFunctionParameter node);
    public virtual void ExplicitVisit(TargetDeclaration node);
    public virtual void ExplicitVisit(LiteralSessionOption node);
    public virtual void ExplicitVisit(MaxDispatchLatencySessionOption node);
    public void GenerateIntegerValueSessionOption(LiteralSessionOption node);
    public virtual void ExplicitVisit(OnOffSessionOption node);
    public virtual void ExplicitVisit(EventRetentionSessionOption node);
    public virtual void ExplicitVisit(MemoryPartitionSessionOption node);
    public virtual void ExplicitVisit(AlterEventSessionStatement node);
    public virtual void ExplicitVisit(DropEventSessionStatement node);
    public void GenerateCommaSeparatedDropDeclarations(IList`1<T> list, string declaration);
    public virtual void ExplicitVisit(EventTypeContainer node);
    protected void GenerateParameters(ExecutableEntity node);
    public virtual void ExplicitVisit(ExecutableProcedureReference node);
    public virtual void ExplicitVisit(ExecutableStringList node);
    public virtual void ExplicitVisit(ExecuteAsClause node);
    public virtual void ExplicitVisit(ExecuteAsStatement node);
    public virtual void ExplicitVisit(ExecuteContext node);
    public virtual void ExplicitVisit(ExecuteParameter node);
    public virtual void ExplicitVisit(ExecuteStatement node);
    public virtual void ExplicitVisit(ExecuteSpecification node);
    private void GenerateExecuteSpecificationBody(ExecuteSpecification node);
    public virtual void ExplicitVisit(ExecuteOption node);
    public virtual void ExplicitVisit(ExistsPredicate node);
    public virtual void ExplicitVisit(ExpressionWithSortOrder node);
    public virtual void ExplicitVisit(ExternalCreateLoginSource node);
    public virtual void ExplicitVisit(ExternalDataSourceLiteralOrIdentifierOption node);
    public virtual void ExplicitVisit(ExternalFileFormatContainerOption node);
    public virtual void ExplicitVisit(ExternalFileFormatLiteralOption node);
    public virtual void ExplicitVisit(ExternalFileFormatUseDefaultTypeOption node);
    public virtual void ExplicitVisit(ExternalTableColumnDefinition node);
    public virtual void ExplicitVisit(ExternalResourcePoolParameter node);
    public virtual void ExplicitVisit(ExternalResourcePoolAffinitySpecification node);
    protected void GenerateExternalResourcePoolStatementBody(ExternalResourcePoolStatement node);
    public virtual void ExplicitVisit(ExternalTableDistributionOption node);
    public virtual void ExplicitVisit(TableDistributionOption node);
    public virtual void ExplicitVisit(TableIndexOption node);
    public virtual void ExplicitVisit(TablePartitionOption node);
    public virtual void ExplicitVisit(TablePartitionOptionSpecifications node);
    public virtual void ExplicitVisit(ExternalTableLiteralOrIdentifierOption node);
    public virtual void ExplicitVisit(ExternalTableRejectTypeOption node);
    public virtual void ExplicitVisit(ExternalTableReplicatedDistributionPolicy node);
    public virtual void ExplicitVisit(TableReplicateDistributionPolicy node);
    public virtual void ExplicitVisit(TableClusteredIndexType node);
    public virtual void ExplicitVisit(ExternalTableRoundRobinDistributionPolicy node);
    public virtual void ExplicitVisit(TableRoundRobinDistributionPolicy node);
    public virtual void ExplicitVisit(TableNonClusteredIndexType node);
    public virtual void ExplicitVisit(ExternalTableShardedDistributionPolicy node);
    public virtual void ExplicitVisit(TableHashDistributionPolicy node);
    public virtual void ExplicitVisit(ExtractFromExpression node);
    public virtual void ExplicitVisit(FetchCursorStatement node);
    public virtual void ExplicitVisit(FetchType node);
    public virtual void ExplicitVisit(FileDeclaration node);
    public virtual void ExplicitVisit(NameFileDeclarationOption node);
    public virtual void ExplicitVisit(FileNameFileDeclarationOption node);
    public virtual void ExplicitVisit(SizeFileDeclarationOption node);
    public virtual void ExplicitVisit(MaxSizeFileDeclarationOption node);
    public virtual void ExplicitVisit(FileGrowthFileDeclarationOption node);
    public virtual void ExplicitVisit(FileDeclarationOption node);
    public virtual void ExplicitVisit(FileGroupDefinition node);
    public virtual void ExplicitVisit(FileGroupOrPartitionScheme node);
    public virtual void ExplicitVisit(FileStreamDatabaseOption node);
    public virtual void ExplicitVisit(FileStreamOnTableOption node);
    public virtual void ExplicitVisit(FileTableCollateFileNameTableOption node);
    public virtual void ExplicitVisit(FileTableConstraintNameTableOption node);
    public virtual void ExplicitVisit(FileTableDirectoryTableOption node);
    public virtual void ExplicitVisit(ForeignKeyConstraintDefinition node);
    public virtual void ExplicitVisit(FromClause node);
    protected void GenerateFromClause(FromClause fromClause, AlignmentPoint clauseBody);
    public virtual void ExplicitVisit(FullTextIndexColumn node);
    public virtual void ExplicitVisit(FullTextPredicate node);
    public virtual void ExplicitVisit(FullTextStopListAction node);
    public virtual void ExplicitVisit(FullTextTableReference node);
    public virtual void ExplicitVisit(LeftFunctionCall node);
    public virtual void ExplicitVisit(RightFunctionCall node);
    public virtual void ExplicitVisit(FunctionCall node);
    protected void GenerateFunctionStatementBody(FunctionStatementBody node);
    public virtual void ExplicitVisit(FunctionOption node);
    public virtual void ExplicitVisit(ExecuteAsFunctionOption node);
    public virtual void ExplicitVisit(GeneralSetCommand node);
    public virtual void ExplicitVisit(GetConversationGroupStatement node);
    public virtual void ExplicitVisit(GoToStatement node);
    public virtual void ExplicitVisit(GrantStatement node);
    public virtual void ExplicitVisit(GrantStatement80 node);
    public virtual void ExplicitVisit(GraphConnectionConstraintDefinition node);
    public virtual void ExplicitVisit(GraphConnectionBetweenNodes node);
    public virtual void ExplicitVisit(GraphMatchPredicate node);
    public virtual void ExplicitVisit(GraphMatchExpression node);
    public virtual void ExplicitVisit(GraphMatchLastNodePredicate node);
    public virtual void ExplicitVisit(GraphMatchNodeExpression node);
    public virtual void ExplicitVisit(GraphMatchCompositeExpression node);
    public virtual void ExplicitVisit(GraphMatchRecursivePredicate node);
    public virtual void ExplicitVisit(GraphRecursiveMatchQuantifier node);
    public virtual void ExplicitVisit(GroupByClause node);
    public virtual void ExplicitVisit(ExpressionGroupingSpecification node);
    public virtual void ExplicitVisit(CompositeGroupingSpecification node);
    public virtual void ExplicitVisit(CubeGroupingSpecification node);
    public virtual void ExplicitVisit(RollupGroupingSpecification node);
    public virtual void ExplicitVisit(GrandTotalGroupingSpecification node);
    public virtual void ExplicitVisit(GroupingSetsGroupingSpecification node);
    public virtual void ExplicitVisit(HadrDatabaseOption node);
    public virtual void ExplicitVisit(HadrAvailabilityGroupDatabaseOption node);
    public virtual void ExplicitVisit(HavingClause node);
    public virtual void ExplicitVisit(Identifier node);
    private void GenerateQuotedIdentifier(string identifier, QuoteType quoteType);
    public virtual void ExplicitVisit(IdentifierDatabaseOption node);
    public virtual void ExplicitVisit(PrincipalOption node);
    public virtual void ExplicitVisit(IdentifierPrincipalOption node);
    public virtual void ExplicitVisit(IdentityFunctionCall node);
    public virtual void ExplicitVisit(IfStatement node);
    public virtual void ExplicitVisit(IgnoreDupKeyIndexOption node);
    public virtual void ExplicitVisit(IIfCall node);
    public virtual void ExplicitVisit(IndexDefinition node);
    public virtual void ExplicitVisit(IndexExpressionOption node);
    public virtual void ExplicitVisit(IndexStateOption node);
    public virtual void ExplicitVisit(InPredicate node);
    public virtual void ExplicitVisit(InsertBulkColumnDefinition node);
    public virtual void ExplicitVisit(InsertBulkStatement node);
    public virtual void ExplicitVisit(InsertStatement node);
    public virtual void ExplicitVisit(InsertSpecification node);
    private void GenerateSpaceAndInsertOption(InsertOption insertOption);
    public virtual void ExplicitVisit(InternalOpenRowset node);
    public virtual void ExplicitVisit(ScalarExpressionSnippet node);
    public virtual void ExplicitVisit(BooleanExpressionSnippet node);
    public virtual void ExplicitVisit(IdentifierSnippet node);
    public virtual void ExplicitVisit(SchemaObjectNameSnippet node);
    public virtual void ExplicitVisit(SelectStatementSnippet node);
    public virtual void ExplicitVisit(StatementListSnippet node);
    public virtual void ExplicitVisit(TSqlFragmentSnippet node);
    public virtual void ExplicitVisit(TSqlStatementSnippet node);
    public virtual void ExplicitVisit(IPv4 node);
    public virtual void ExplicitVisit(JoinParenthesisTableReference node);
    public virtual void ExplicitVisit(JsonForClause node);
    public virtual void ExplicitVisit(JsonForClauseOption node);
    public virtual void ExplicitVisit(KillQueryNotificationSubscriptionStatement node);
    public virtual void ExplicitVisit(KillStatement node);
    public virtual void ExplicitVisit(KillStatsJobStatement node);
    public virtual void ExplicitVisit(LabelStatement node);
    public virtual void ExplicitVisit(LikePredicate node);
    public virtual void ExplicitVisit(LineNoStatement node);
    public virtual void ExplicitVisit(ListenerIPEndpointProtocolOption node);
    public virtual void ExplicitVisit(IntegerLiteral node);
    public virtual void ExplicitVisit(NumericLiteral node);
    public virtual void ExplicitVisit(StringLiteral node);
    public virtual void ExplicitVisit(BinaryLiteral node);
    public virtual void ExplicitVisit(DefaultLiteral node);
    public virtual void ExplicitVisit(MaxLiteral node);
    public virtual void ExplicitVisit(MoneyLiteral node);
    public virtual void ExplicitVisit(NullLiteral node);
    public virtual void ExplicitVisit(RealLiteral node);
    public virtual void ExplicitVisit(IdentifierLiteral node);
    public virtual void ExplicitVisit(VariableReference node);
    public virtual void ExplicitVisit(GlobalVariableExpression node);
    public virtual void ExplicitVisit(OdbcLiteral node);
    private void GenerateOdbcLiteralPrefix(OdbcLiteral node);
    public virtual void ExplicitVisit(LiteralEndpointProtocolOption node);
    public virtual void ExplicitVisit(LiteralPayloadOption node);
    public virtual void ExplicitVisit(LockEscalationTableOption node);
    public virtual void ExplicitVisit(LoginTypePayloadOption node);
    internal void GenerateLowPriorityWaitOptions(IList`1<LowPriorityLockWaitOption> options);
    public virtual void ExplicitVisit(LowPriorityLockWaitMaxDurationOption node);
    public virtual void ExplicitVisit(LowPriorityLockWaitAbortAfterWaitOption node);
    public virtual void ExplicitVisit(LowPriorityLockWaitTableSwitchOption node);
    public virtual void ExplicitVisit(MaxDopConfigurationOption node);
    public virtual void ExplicitVisit(MaxDurationOption node);
    public virtual void ExplicitVisit(MaxSizeDatabaseOption node);
    public virtual void ExplicitVisit(MemoryOptimizedTableOption node);
    public virtual void ExplicitVisit(MergeActionClause node);
    public virtual void ExplicitVisit(MergeStatement node);
    public virtual void ExplicitVisit(MergeSpecification node);
    public virtual void ExplicitVisit(UpdateMergeAction node);
    public virtual void ExplicitVisit(DeleteMergeAction node);
    public virtual void ExplicitVisit(InsertMergeAction node);
    protected void GenerateValidationMethod(MessageTypeStatementBase node);
    public virtual void ExplicitVisit(MethodSpecifier node);
    protected void GenerateBulkColumnTimestamp(TextModificationStatement node);
    public virtual void ExplicitVisit(MoveConversationStatement node);
    public virtual void ExplicitVisit(MoveRestoreOption node);
    public virtual void ExplicitVisit(MultiPartIdentifier node);
    public virtual void ExplicitVisit(NamedTableReference node);
    public virtual void ExplicitVisit(SchemaObjectFunctionTableReference node);
    public virtual void ExplicitVisit(NextValueForExpression node);
    public virtual void ExplicitVisit(NullableConstraintDefinition node);
    public virtual void ExplicitVisit(NullIfExpression node);
    public virtual void ExplicitVisit(OdbcConvertSpecification node);
    public virtual void ExplicitVisit(OdbcFunctionCall node);
    public virtual void ExplicitVisit(OdbcQualifiedJoinTableReference node);
    public virtual void ExplicitVisit(OffsetClause node);
    public virtual void ExplicitVisit(OnlineIndexLowPriorityLockWaitOption node);
    public virtual void ExplicitVisit(OnlineIndexOption node);
    public virtual void ExplicitVisit(OrderIndexOption node);
    public virtual void ExplicitVisit(OnOffDatabaseOption node);
    public virtual void ExplicitVisit(OpenCursorStatement node);
    public virtual void ExplicitVisit(OpenJsonTableReference node);
    public virtual void ExplicitVisit(OpenMasterKeyStatement node);
    public virtual void ExplicitVisit(OnOffPrimaryConfigurationOption node);
    public virtual void ExplicitVisit(OpenQueryTableReference node);
    public virtual void ExplicitVisit(OpenRowsetTableReference node);
    public virtual void ExplicitVisit(OpenSymmetricKeyStatement node);
    public virtual void ExplicitVisit(OpenXmlTableReference node);
    public virtual void ExplicitVisit(LiteralOptimizerHint node);
    public virtual void ExplicitVisit(OptimizerHint node);
    protected void GenerateOptimizerHints(IList`1<OptimizerHint> hints);
    public virtual void ExplicitVisit(OptimizeForOptimizerHint node);
    public virtual void ExplicitVisit(TableHintsOptimizerHint node);
    public virtual void ExplicitVisit(VariableValuePair node);
    public virtual void ExplicitVisit(OnOffOptionValue node);
    public virtual void ExplicitVisit(LiteralOptionValue node);
    public virtual void ExplicitVisit(OrderByClause node);
    public virtual void ExplicitVisit(OutputClause node);
    public virtual void ExplicitVisit(OutputIntoClause node);
    public virtual void ExplicitVisit(OverClause node);
    public virtual void ExplicitVisit(PageVerifyDatabaseOption node);
    public virtual void ExplicitVisit(ParameterizationDatabaseOption node);
    public virtual void ExplicitVisit(ParameterlessCall node);
    public virtual void ExplicitVisit(ParenthesisExpression node);
    public virtual void ExplicitVisit(ParseCall node);
    public virtual void ExplicitVisit(PartitionFunctionCall node);
    public virtual void ExplicitVisit(PartitionSpecifier node);
    public virtual void ExplicitVisit(PartnerDatabaseOption node);
    public virtual void ExplicitVisit(PasswordAlterPrincipalOption node);
    public virtual void ExplicitVisit(PasswordCreateLoginSource node);
    public virtual void ExplicitVisit(Permission node);
    public virtual void ExplicitVisit(PivotedTableReference node);
    public virtual void ExplicitVisit(PortsEndpointProtocolOption node);
    public virtual void ExplicitVisit(PredicateSetStatement node);
    public virtual void ExplicitVisit(PrintStatement node);
    public virtual void ExplicitVisit(Privilege80 node);
    public virtual void ExplicitVisit(PrivilegeSecurityElement80 node);
    public virtual void ExplicitVisit(ProcedureParameter node);
    public virtual void ExplicitVisit(ProcedureReference node);
    protected void GenerateProcedureStatementBody(ProcedureStatementBody node);
    public virtual void ExplicitVisit(ProcedureOption node);
    public virtual void ExplicitVisit(ExecuteAsProcedureOption node);
    public virtual void ExplicitVisit(QualifiedJoin node);
    private void GenerateQualifiedJoinType(QualifiedJoinType qualifiedJoinType);
    public virtual void ExplicitVisit(QueryParenthesisExpression node);
    public void GenerateQueryParenthesisExpression(QueryParenthesisExpression node, AlignmentPoint clauseBody, SchemaObjectName intoClause, Identifier filegroupClause);
    public virtual void ExplicitVisit(QuerySpecification node);
    protected void GenerateQuerySpecification(QuerySpecification node, AlignmentPoint clauseBody, SchemaObjectName intoClause, Identifier filegroupClause);
    public virtual void ExplicitVisit(QueryStoreCapturePolicyOption node);
    public virtual void ExplicitVisit(QueryStoreDatabaseOption node);
    public virtual void ExplicitVisit(QueryStoreDataFlushIntervalOption node);
    public virtual void ExplicitVisit(QueryStoreIntervalLengthOption node);
    public virtual void ExplicitVisit(QueryStoreMaxStorageSizeOption node);
    public virtual void ExplicitVisit(QueryStoreMaxPlansPerQueryOption node);
    public virtual void ExplicitVisit(QueryStoreTimeCleanupPolicyOption node);
    public virtual void ExplicitVisit(QueryStoreDesiredStateOption node);
    public virtual void ExplicitVisit(QueryStoreSizeCleanupPolicyOption node);
    public virtual void ExplicitVisit(QueueStateOption node);
    protected void GenerateQueueOptions(IList`1<QueueOption> queueOptions);
    public virtual void ExplicitVisit(QueueOption node);
    public virtual void ExplicitVisit(QueueProcedureOption node);
    public virtual void ExplicitVisit(QueueValueOption node);
    public virtual void ExplicitVisit(QueueExecuteAsOption node);
    public virtual void ExplicitVisit(RaiseErrorLegacyStatement node);
    public virtual void ExplicitVisit(RaiseErrorStatement node);
    public virtual void ExplicitVisit(ReadOnlyForClause node);
    public virtual void ExplicitVisit(ReadTextStatement node);
    public virtual void ExplicitVisit(ReceiveStatement node);
    public virtual void ExplicitVisit(ReconfigureStatement node);
    public virtual void ExplicitVisit(RecoveryDatabaseOption node);
    public virtual void ExplicitVisit(RemoteDataArchiveDatabaseOption node);
    public virtual void ExplicitVisit(RemoteDataArchiveTableOption node);
    public virtual void ExplicitVisit(RemoteDataArchiveAlterTableOption node);
    protected void GenerateBindingOptions(IList`1<RemoteServiceBindingOption> options);
    public virtual void ExplicitVisit(UserRemoteServiceBindingOption node);
    public virtual void ExplicitVisit(OnOffRemoteServiceBindingOption node);
    public virtual void ExplicitVisit(RenameEntityStatement node);
    public virtual void ExplicitVisit(ResourcePoolParameter node);
    public virtual void ExplicitVisit(ResourcePoolAffinitySpecification node);
    public virtual void ExplicitVisit(LiteralRange node);
    protected void GenerateResourcePoolStatementBody(ResourcePoolStatement node);
    public virtual void ExplicitVisit(RestoreMasterKeyStatement node);
    public virtual void ExplicitVisit(RestoreOption node);
    public virtual void ExplicitVisit(ScalarExpressionRestoreOption node);
    public virtual void ExplicitVisit(RestoreServiceMasterKeyStatement node);
    public virtual void ExplicitVisit(RestoreStatement node);
    public virtual void ExplicitVisit(ResultSetsExecuteOption node);
    public virtual void ExplicitVisit(ResultSetDefinition node);
    public virtual void ExplicitVisit(SchemaObjectResultSetDefinition node);
    public virtual void ExplicitVisit(InlineResultSetDefinition node);
    public virtual void ExplicitVisit(ResultColumnDefinition node);
    public virtual void ExplicitVisit(ReturnStatement node);
    public virtual void ExplicitVisit(RevertStatement node);
    public virtual void ExplicitVisit(RevokeStatement node);
    public virtual void ExplicitVisit(RevokeStatement80 node);
    public virtual void ExplicitVisit(RolePayloadOption node);
    public virtual void ExplicitVisit(RollbackTransactionStatement node);
    public virtual void ExplicitVisit(RouteOption node);
    protected void GenerateRouteOptions(RouteStatement node);
    public virtual void ExplicitVisit(SaveTransactionStatement node);
    public virtual void ExplicitVisit(ScalarFunctionReturnType node);
    public virtual void ExplicitVisit(ScalarSubquery node);
    public virtual void ExplicitVisit(InlineFunctionOption node);
    public virtual void ExplicitVisit(SchemaDeclarationItem node);
    public virtual void ExplicitVisit(SchemaDeclarationItemOpenjson node);
    public virtual void ExplicitVisit(SchemaObjectName node);
    public virtual void ExplicitVisit(SchemaPayloadOption node);
    public virtual void ExplicitVisit(AddSearchPropertyListAction node);
    public virtual void ExplicitVisit(DropSearchPropertyListAction node);
    public virtual void ExplicitVisit(OnOffPrincipalOption node);
    public void GenerateSecurityPolicyStatementBody(SecurityPolicyStatement node);
    public virtual void ExplicitVisit(SecurityPredicateAction node);
    public virtual void ExplicitVisit(SecurityPolicyOption node);
    public virtual void ExplicitVisit(SecurityPrincipal node);
    protected void GeneratePermissionOnToClauses(SecurityStatement node);
    protected void GenerateAsClause(SecurityStatement node);
    public virtual void ExplicitVisit(SecurityTargetObject node);
    protected void GenerateSourceForSecurityObjectKind(SecurityObjectKind type);
    public virtual void ExplicitVisit(SecurityTargetObjectName node);
    public virtual void ExplicitVisit(SecurityUserClause80 node);
    public virtual void ExplicitVisit(SelectFunctionReturnType node);
    public virtual void ExplicitVisit(SelectInsertSource node);
    public virtual void ExplicitVisit(SelectiveXmlIndexPromotedPath node);
    public virtual void ExplicitVisit(SelectScalarExpression node);
    public virtual void ExplicitVisit(SelectSetVariable node);
    public virtual void ExplicitVisit(SelectStarExpression node);
    public virtual void ExplicitVisit(SelectStatement node);
    private void GenerateQueryExpression(QueryExpression queryExpression, AlignmentPoint clauseBody, SchemaObjectName intoClause, Identifier filegroupClause);
    public virtual void ExplicitVisit(SemanticTableReference node);
    public virtual void ExplicitVisit(SendStatement node);
    public void GenerateSequenceStatementBody(SequenceStatement node);
    public virtual void ExplicitVisit(DataTypeSequenceOption node);
    public virtual void ExplicitVisit(SequenceOption node);
    public virtual void ExplicitVisit(ScalarExpressionSequenceOption node);
    public virtual void ExplicitVisit(AlterServerAuditSpecificationStatement node);
    public virtual void ExplicitVisit(CreateServerAuditSpecificationStatement node);
    public virtual void ExplicitVisit(DropServerAuditSpecificationStatement node);
    public virtual void ExplicitVisit(QueueDelayAuditOption node);
    public virtual void ExplicitVisit(AuditGuidAuditOption node);
    public virtual void ExplicitVisit(OnFailureAuditOption node);
    public virtual void ExplicitVisit(StateAuditOption node);
    public virtual void ExplicitVisit(CreateServerAuditStatement node);
    public virtual void ExplicitVisit(AlterServerAuditStatement node);
    public virtual void ExplicitVisit(DropServerAuditStatement node);
    private void GenerateServerAuditName(Identifier name);
    private void GenerateServerAuditOptions(ServerAuditStatement node);
    public virtual void ExplicitVisit(ServiceContract node);
    public virtual void ExplicitVisit(SessionTimeoutPayloadOption node);
    protected void GenerateSetClauses(IList`1<SetClause> setClauses, AlignmentPoint alignmentPoint);
    public virtual void ExplicitVisit(FunctionCallSetClause node);
    public virtual void ExplicitVisit(AssignmentSetClause node);
    private void AlignWhenNecessary(string apName);
    public virtual void ExplicitVisit(SetCommandStatement node);
    public virtual void ExplicitVisit(SetErrorLevelStatement node);
    public virtual void ExplicitVisit(SetFipsFlaggerCommand node);
    public virtual void ExplicitVisit(SetIdentityInsertStatement node);
    public virtual void ExplicitVisit(SetOffsetsStatement node);
    public virtual void ExplicitVisit(SetRowCountStatement node);
    public virtual void ExplicitVisit(SetStatisticsStatement node);
    public virtual void ExplicitVisit(SetTextSizeStatement node);
    public virtual void ExplicitVisit(SetTransactionIsolationLevelStatement node);
    public virtual void ExplicitVisit(SetUserStatement node);
    public virtual void ExplicitVisit(SetVariableStatement node);
    public virtual void ExplicitVisit(ShutdownStatement node);
    public virtual void ExplicitVisit(LiteralPrincipalOption node);
    protected void GenerateCounterSignature(SignatureStatementBase node);
    protected void GenerateModule(SignatureStatementBase node);
    protected void GenerateCryptos(SignatureStatementBase node);
    protected void GenerateSpaceAndAlias(Identifier alias);
    protected void GenerateTableAndColumnAliases(TableReferenceWithAliasAndColumns node);
    public virtual void ExplicitVisit(SoapMethod node);
    public virtual void ExplicitVisit(SqlDataTypeReference node);
    public virtual void ExplicitVisit(StatementList node);
    public virtual void ExplicitVisit(StatisticsOption node);
    public virtual void ExplicitVisit(LiteralStatisticsOption node);
    public virtual void ExplicitVisit(OnOffStatisticsOption node);
    public virtual void ExplicitVisit(ResampleStatisticsOption node);
    public virtual void ExplicitVisit(StatisticsPartitionRange node);
    public virtual void ExplicitVisit(StopRestoreOption node);
    public virtual void ExplicitVisit(SubqueryComparisonPredicate node);
    public virtual void ExplicitVisit(CreateSymmetricKeyStatement node);
    public virtual void ExplicitVisit(AlterSymmetricKeyStatement node);
    public virtual void ExplicitVisit(DropSymmetricKeyStatement node);
    public virtual void ExplicitVisit(AlgorithmKeyOption node);
    public virtual void ExplicitVisit(IdentityValueKeyOption node);
    public virtual void ExplicitVisit(KeySourceKeyOption node);
    public virtual void ExplicitVisit(ProviderKeyNameKeyOption node);
    public virtual void ExplicitVisit(CreationDispositionKeyOption node);
    private void GenerateSymmetricKeyName(Identifier name);
    public virtual void ExplicitVisit(SystemTimePeriodDefinition node);
    public virtual void ExplicitVisit(SystemVersioningTableOption node);
    protected void GenerateWithTableHints(IList`1<TableHint> tableHints);
    public virtual void ExplicitVisit(TableHint node);
    public virtual void ExplicitVisit(IndexTableHint node);
    public virtual void ExplicitVisit(LiteralTableHint node);
    public virtual void ExplicitVisit(ForceSeekTableHint node);
    public virtual void ExplicitVisit(TableSampleClause node);
    public virtual void ExplicitVisit(TableValuedFunctionReturnType node);
    public virtual void ExplicitVisit(TargetRecoveryTimeDatabaseOption node);
    public virtual void ExplicitVisit(ThrowStatement node);
    public virtual void ExplicitVisit(TopRowFilter node);
    public virtual void ExplicitVisit(TemporalClause node);
    protected void GenerateTransactionName(object node);
    public virtual void ExplicitVisit(TriggerAction node);
    public virtual void ExplicitVisit(TriggerObject node);
    public virtual void ExplicitVisit(TriggerOption node);
    public virtual void ExplicitVisit(ExecuteAsTriggerOption node);
    protected void GenerateTriggerStatementBody(TriggerStatementBody node);
    public virtual void ExplicitVisit(TruncateTableStatement node);
    public virtual void ExplicitVisit(TryCastCall node);
    public virtual void ExplicitVisit(TryCatchStatement node);
    public virtual void ExplicitVisit(TryConvertCall node);
    public virtual void ExplicitVisit(TryParseCall node);
    public virtual void ExplicitVisit(TSEqualCall node);
    public virtual void ExplicitVisit(TSqlBatch node);
    public virtual void ExplicitVisit(TSqlScript node);
    public virtual void ExplicitVisit(UnaryExpression node);
    public virtual void ExplicitVisit(UniqueConstraintDefinition node);
    public virtual void ExplicitVisit(UnpivotedTableReference node);
    public virtual void ExplicitVisit(UnqualifiedJoin node);
    public virtual void ExplicitVisit(UpdateCall node);
    public virtual void ExplicitVisit(UpdateForClause node);
    public virtual void ExplicitVisit(UpdateStatement node);
    public virtual void ExplicitVisit(UpdateSpecification node);
    public virtual void ExplicitVisit(UpdateStatisticsStatement node);
    public virtual void ExplicitVisit(UpdateTextStatement node);
    public virtual void ExplicitVisit(UseFederationStatement node);
    public virtual void ExplicitVisit(UseHintList node);
    public virtual void ExplicitVisit(UserDataTypeReference node);
    public virtual void ExplicitVisit(UserDefinedTypePropertyAccess node);
    public virtual void ExplicitVisit(UserLoginOption node);
    public virtual void ExplicitVisit(UseStatement node);
    public static TValue GetValueForEnumKey(Dictionary`2<TKey, TValue> dict, TKey key);
    protected void GenerateFragmentList(IList`1<T> fragmentList);
    protected void GenerateOptionStateWithEqualSign(string optionName, OptionState optionState);
    protected void GenerateOptionState(string optionName, OptionState optionState);
    protected void GenerateOptionState(string optionName, OptionState optionState, bool generateEqualSign);
    protected void GenerateDatabaseConfigurationOptionStateOnOff(DatabaseConfigurationOptionState optionState);
    protected void GenerateOptionStateOnOff(OptionState optionState);
    protected void GenerateOptionStateInSql80Style(string optionName, OptionState optionState);
    protected void GenerateNameEqualsValue(string name, TSqlFragment value);
    protected void GenerateNameEqualsValue(string name, string value);
    protected void GenerateNameEqualsValue(TSqlTokenType keywordId, TSqlFragment value);
    protected void GenerateNameEqualsValue(TSqlTokenType keywordId, string value);
    protected void GenerateNameEqualsValue(TokenGenerator generator, TSqlFragment value);
    protected void GenerateNameEqualsValue(TokenGenerator generator, string value);
    protected void GenerateTokenAndEqualSign(string idText);
    protected void GenerateTokenAndEqualSign(TSqlTokenType keywordId);
    protected void GenerateFragmentIfNotNull(TSqlFragment fragment);
    protected void GenerateSpaceAndFragmentIfNotNull(TSqlFragment fragment);
    protected void GenerateParenthesisedFragmentIfNotNull(TSqlFragment fragment);
    protected void GenerateCommaSeparatedList(IList`1<T> list);
    protected void GenerateCommaSeparatedList(IList`1<T> list, bool insertNewLine);
    protected void GenerateCommaSeparatedList(IList`1<T> list, bool insertNewLine, bool indent);
    protected void GenerateDotSeparatedList(IList`1<T> list);
    protected void GenerateSpaceSeparatedList(IList`1<T> list);
    private void GenerateList(IList`1<T> list, Action gen);
    protected void GenerateParenthesisedCommaSeparatedList(IList`1<T> list);
    protected void GenerateParenthesisedCommaSeparatedList(IList`1<T> list, bool alwaysGenerateParenthses);
    protected void GenerateFragmentList(IList`1<T> list, ListGenerationOption option);
    protected void GenerateAlignedParenthesizedOptionsWithMultipleIndent(IList`1<T> list, int indentValue);
    protected void GenerateAlignedParenthesizedOptions(IList`1<T> list);
    private void GenerateSeparator(ListGenerationOption option);
    protected void GenerateSpace();
    protected void GenerateKeyword(TSqlTokenType keywordId);
    protected void GenerateKeywordAndSpace(TSqlTokenType keywordId);
    protected void GenerateSpaceAndKeyword(TSqlTokenType keywordId);
    protected void GenerateSymbol(TSqlTokenType symbolId);
    protected void GenerateToken(TSqlTokenType tokenType, string text);
    protected void GenerateSpaceAndSymbol(TSqlTokenType symbolId);
    protected void GenerateSymbolAndSpace(TSqlTokenType symbolId);
    protected void GenerateIdentifier(string text);
    protected void GenerateIdentifierWithoutCheck(string text);
    protected void GenerateIdentifierWithoutCasing(string text);
    protected void GenerateSpaceAndIdentifier(string idText);
    protected void GenerateToken(TSqlTokenType tokenType, string text, bool applyCasing);
    protected void GenerateCommaSeparatedFlagOpitons(Dictionary`2<TKey, TokenGenerator> optionsGenerators, TKey options);
    protected void GenerateToken(TokenGenerator generator);
    protected void GenerateTokenList(List`1<TokenGenerator> generatorList);
    protected void GenerateSpaceSeparatedTokens(TSqlTokenType keywordId, String[] identifiers);
    protected void GenerateSpaceSeparatedTokens(TSqlTokenType[] keywords);
    protected void GenerateSpaceSeparatedTokens(String[] identifiers);
    protected void GenerateFragmentWithAlignmentPointIfNotNull(TSqlFragment node, AlignmentPoint ap);
    public virtual void ExplicitVisit(LiteralDatabaseOption node);
    public virtual void ExplicitVisit(ValuesInsertSource node);
    public virtual void ExplicitVisit(RowValue node);
    public virtual void ExplicitVisit(VariableTableReference node);
    public virtual void ExplicitVisit(VariableMethodCallTableReference node);
    public virtual void ExplicitVisit(ViewOption node);
    protected void GenerateViewStatementBody(ViewStatementBody node);
    public virtual void ExplicitVisit(WaitAtLowPriorityOption node);
    public virtual void ExplicitVisit(WaitForStatement node);
    public virtual void ExplicitVisit(SimpleWhenClause node);
    public virtual void ExplicitVisit(SearchedWhenClause node);
    public virtual void ExplicitVisit(WhereClause node);
    public virtual void ExplicitVisit(WhileStatement node);
    public virtual void ExplicitVisit(WindowFrameClause node);
    public virtual void ExplicitVisit(WindowDelimiter node);
    public virtual void ExplicitVisit(WindowsCreateLoginSource node);
    public virtual void ExplicitVisit(WithCtesAndXmlNamespaces node);
    public virtual void ExplicitVisit(WithinGroupClause node);
    public virtual void ExplicitVisit(WitnessDatabaseOption node);
    protected void GenerateWorkloadGroupStatementBody(WorkloadGroupStatement node);
    public virtual void ExplicitVisit(WorkloadGroupResourceParameter node);
    public virtual void ExplicitVisit(WorkloadGroupImportanceParameter node);
    public virtual void ExplicitVisit(WriteTextStatement node);
    public virtual void ExplicitVisit(WsdlPayloadOption node);
    public virtual void ExplicitVisit(XmlDataTypeReference node);
    public virtual void ExplicitVisit(XmlForClause node);
    public virtual void ExplicitVisit(XmlForClauseOption node);
    public virtual void ExplicitVisit(XmlNamespaces node);
    public virtual void ExplicitVisit(XmlNamespacesAliasElement node);
    public virtual void ExplicitVisit(XmlNamespacesDefaultElement node);
    public virtual void ExplicitVisit(CatalogCollationOption node);
    public virtual void ExplicitVisit(DropWorkloadClassifierStatement node);
    [CompilerGeneratedAttribute]
private void <GenerateAuditSpecificationStatement>b__0();
    [CompilerGeneratedAttribute]
private static bool <ExplicitVisit>b__1(DatabaseOption o);
    [CompilerGeneratedAttribute]
private static bool <ExplicitVisit>b__2(DatabaseOption o);
    [CompilerGeneratedAttribute]
private void <GenerateJoinSeparatedList>b__5();
    [CompilerGeneratedAttribute]
private void <ExplicitVisit>b__6();
    [CompilerGeneratedAttribute]
private void <GenerateDotSeparatedList>b__d();
    [CompilerGeneratedAttribute]
private void <GenerateSpaceSeparatedList>b__e();
}
internal abstract class Microsoft.SqlServer.TransactSql.ScriptDom.ScriptGenerator.TokenGenerator : object {
    private bool _appendSpace;
    public TokenGenerator(bool appendSpace);
    protected void AppendSpaceIfRequired(ScriptWriter writer);
    public abstract virtual void Generate(ScriptWriter writer);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.SearchedCaseExpression : CaseExpression {
    private List`1<SearchedWhenClause> _whenClauses;
    public IList`1<SearchedWhenClause> WhenClauses { get; }
    public IList`1<SearchedWhenClause> get_WhenClauses();
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.SearchedWhenClause : WhenClause {
    private BooleanExpression _whenExpression;
    public BooleanExpression WhenExpression { get; public set; }
    public BooleanExpression get_WhenExpression();
    public void set_WhenExpression(BooleanExpression value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public abstract class Microsoft.SqlServer.TransactSql.ScriptDom.SearchPropertyListAction : TSqlFragment {
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.SearchPropertyListFullTextIndexOption : FullTextIndexOption {
    private bool _isOff;
    private Identifier _propertyListName;
    public bool IsOff { get; public set; }
    public Identifier PropertyListName { get; public set; }
    public bool get_IsOff();
    public void set_IsOff(bool value);
    public Identifier get_PropertyListName();
    public void set_PropertyListName(Identifier value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.SecondaryRoleReplicaOption : AvailabilityReplicaOption {
    private AllowConnectionsOptionKind _allowConnections;
    public AllowConnectionsOptionKind AllowConnections { get; public set; }
    public AllowConnectionsOptionKind get_AllowConnections();
    public void set_AllowConnections(AllowConnectionsOptionKind value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public enum Microsoft.SqlServer.TransactSql.ScriptDom.SecondaryXmlIndexType : Enum {
    public int value__;
    public static SecondaryXmlIndexType NotSpecified;
    public static SecondaryXmlIndexType Path;
    public static SecondaryXmlIndexType Property;
    public static SecondaryXmlIndexType Value;
}
internal class Microsoft.SqlServer.TransactSql.ScriptDom.SecondaryXmlIndexTypeHelper : OptionsHelper`1<SecondaryXmlIndexType> {
    internal static SecondaryXmlIndexTypeHelper Instance;
    private static SecondaryXmlIndexTypeHelper();
}
public abstract class Microsoft.SqlServer.TransactSql.ScriptDom.SecurityElement80 : TSqlFragment {
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
internal class Microsoft.SqlServer.TransactSql.ScriptDom.SecurityLoginOptionsHelper : OptionsHelper`1<PrincipalOptionKind> {
    internal static SecurityLoginOptionsHelper Instance;
    private static SecurityLoginOptionsHelper();
}
public enum Microsoft.SqlServer.TransactSql.ScriptDom.SecurityObjectKind : Enum {
    public int value__;
    public static SecurityObjectKind NotSpecified;
    public static SecurityObjectKind ApplicationRole;
    public static SecurityObjectKind Assembly;
    public static SecurityObjectKind AsymmetricKey;
    public static SecurityObjectKind Certificate;
    public static SecurityObjectKind Contract;
    public static SecurityObjectKind Database;
    public static SecurityObjectKind Endpoint;
    public static SecurityObjectKind FullTextCatalog;
    public static SecurityObjectKind Login;
    public static SecurityObjectKind MessageType;
    public static SecurityObjectKind Object;
    public static SecurityObjectKind RemoteServiceBinding;
    public static SecurityObjectKind Role;
    public static SecurityObjectKind Route;
    public static SecurityObjectKind Schema;
    public static SecurityObjectKind Server;
    public static SecurityObjectKind Service;
    public static SecurityObjectKind SymmetricKey;
    public static SecurityObjectKind Type;
    public static SecurityObjectKind User;
    public static SecurityObjectKind XmlSchemaCollection;
    public static SecurityObjectKind FullTextStopList;
    public static SecurityObjectKind SearchPropertyList;
    public static SecurityObjectKind ServerRole;
    public static SecurityObjectKind AvailabilityGroup;
}
public enum Microsoft.SqlServer.TransactSql.ScriptDom.SecurityPolicyActionType : Enum {
    public int value__;
    public static SecurityPolicyActionType Create;
    public static SecurityPolicyActionType AlterPredicates;
    public static SecurityPolicyActionType AlterState;
    public static SecurityPolicyActionType AlterReplication;
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.SecurityPolicyOption : TSqlFragment {
    private SecurityPolicyOptionKind _optionKind;
    private OptionState _optionState;
    public SecurityPolicyOptionKind OptionKind { get; public set; }
    public OptionState OptionState { get; public set; }
    public SecurityPolicyOptionKind get_OptionKind();
    public void set_OptionKind(SecurityPolicyOptionKind value);
    public OptionState get_OptionState();
    public void set_OptionState(OptionState value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public enum Microsoft.SqlServer.TransactSql.ScriptDom.SecurityPolicyOptionKind : Enum {
    public int value__;
    public static SecurityPolicyOptionKind State;
    public static SecurityPolicyOptionKind SchemaBinding;
}
public abstract class Microsoft.SqlServer.TransactSql.ScriptDom.SecurityPolicyStatement : TSqlStatement {
    private SchemaObjectName _name;
    private bool _notForReplication;
    private List`1<SecurityPolicyOption> _securityPolicyOptions;
    private List`1<SecurityPredicateAction> _securityPredicateActions;
    private SecurityPolicyActionType _actionType;
    public SchemaObjectName Name { get; public set; }
    public bool NotForReplication { get; public set; }
    public IList`1<SecurityPolicyOption> SecurityPolicyOptions { get; }
    public IList`1<SecurityPredicateAction> SecurityPredicateActions { get; }
    public SecurityPolicyActionType ActionType { get; public set; }
    public SchemaObjectName get_Name();
    public void set_Name(SchemaObjectName value);
    public bool get_NotForReplication();
    public void set_NotForReplication(bool value);
    public IList`1<SecurityPolicyOption> get_SecurityPolicyOptions();
    public IList`1<SecurityPredicateAction> get_SecurityPredicateActions();
    public SecurityPolicyActionType get_ActionType();
    public void set_ActionType(SecurityPolicyActionType value);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.SecurityPredicateAction : TSqlFragment {
    private SecurityPredicateActionType _actionType;
    private SecurityPredicateType _securityPredicateType;
    private FunctionCall _functionCall;
    private SchemaObjectName _targetObjectName;
    private SecurityPredicateOperation _securityPredicateOperation;
    public SecurityPredicateActionType ActionType { get; public set; }
    public SecurityPredicateType SecurityPredicateType { get; public set; }
    public FunctionCall FunctionCall { get; public set; }
    public SchemaObjectName TargetObjectName { get; public set; }
    public SecurityPredicateOperation SecurityPredicateOperation { get; public set; }
    public SecurityPredicateActionType get_ActionType();
    public void set_ActionType(SecurityPredicateActionType value);
    public SecurityPredicateType get_SecurityPredicateType();
    public void set_SecurityPredicateType(SecurityPredicateType value);
    public FunctionCall get_FunctionCall();
    public void set_FunctionCall(FunctionCall value);
    public SchemaObjectName get_TargetObjectName();
    public void set_TargetObjectName(SchemaObjectName value);
    public SecurityPredicateOperation get_SecurityPredicateOperation();
    public void set_SecurityPredicateOperation(SecurityPredicateOperation value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public enum Microsoft.SqlServer.TransactSql.ScriptDom.SecurityPredicateActionType : Enum {
    public int value__;
    public static SecurityPredicateActionType Create;
    public static SecurityPredicateActionType Alter;
    public static SecurityPredicateActionType Drop;
}
public enum Microsoft.SqlServer.TransactSql.ScriptDom.SecurityPredicateOperation : Enum {
    public int value__;
    public static SecurityPredicateOperation All;
    public static SecurityPredicateOperation AfterInsert;
    public static SecurityPredicateOperation AfterUpdate;
    public static SecurityPredicateOperation BeforeUpdate;
    public static SecurityPredicateOperation BeforeDelete;
}
public enum Microsoft.SqlServer.TransactSql.ScriptDom.SecurityPredicateType : Enum {
    public int value__;
    public static SecurityPredicateType Filter;
    public static SecurityPredicateType Block;
}
internal class Microsoft.SqlServer.TransactSql.ScriptDom.SecurityPredicateTypeHelper : OptionsHelper`1<SecurityPredicateType> {
    internal static SecurityPredicateTypeHelper Instance;
    private static SecurityPredicateTypeHelper();
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.SecurityPrincipal : TSqlFragment {
    private PrincipalType _principalType;
    private Identifier _identifier;
    public PrincipalType PrincipalType { get; public set; }
    public Identifier Identifier { get; public set; }
    public PrincipalType get_PrincipalType();
    public void set_PrincipalType(PrincipalType value);
    public Identifier get_Identifier();
    public void set_Identifier(Identifier value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public abstract class Microsoft.SqlServer.TransactSql.ScriptDom.SecurityStatement : TSqlStatement {
    private List`1<Permission> _permissions;
    private SecurityTargetObject _securityTargetObject;
    private List`1<SecurityPrincipal> _principals;
    private Identifier _asClause;
    public IList`1<Permission> Permissions { get; }
    public SecurityTargetObject SecurityTargetObject { get; public set; }
    public IList`1<SecurityPrincipal> Principals { get; }
    public Identifier AsClause { get; public set; }
    public IList`1<Permission> get_Permissions();
    public SecurityTargetObject get_SecurityTargetObject();
    public void set_SecurityTargetObject(SecurityTargetObject value);
    public IList`1<SecurityPrincipal> get_Principals();
    public Identifier get_AsClause();
    public void set_AsClause(Identifier value);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public abstract class Microsoft.SqlServer.TransactSql.ScriptDom.SecurityStatementBody80 : TSqlStatement {
    private SecurityElement80 _securityElement80;
    private SecurityUserClause80 _securityUserClause80;
    public SecurityElement80 SecurityElement80 { get; public set; }
    public SecurityUserClause80 SecurityUserClause80 { get; public set; }
    public SecurityElement80 get_SecurityElement80();
    public void set_SecurityElement80(SecurityElement80 value);
    public SecurityUserClause80 get_SecurityUserClause80();
    public void set_SecurityUserClause80(SecurityUserClause80 value);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.SecurityTargetObject : TSqlFragment {
    private SecurityObjectKind _objectKind;
    private SecurityTargetObjectName _objectName;
    private List`1<Identifier> _columns;
    public SecurityObjectKind ObjectKind { get; public set; }
    public SecurityTargetObjectName ObjectName { get; public set; }
    public IList`1<Identifier> Columns { get; }
    public SecurityObjectKind get_ObjectKind();
    public void set_ObjectKind(SecurityObjectKind value);
    public SecurityTargetObjectName get_ObjectName();
    public void set_ObjectName(SecurityTargetObjectName value);
    public IList`1<Identifier> get_Columns();
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.SecurityTargetObjectName : TSqlFragment {
    private MultiPartIdentifier _multiPartIdentifier;
    public MultiPartIdentifier MultiPartIdentifier { get; public set; }
    public MultiPartIdentifier get_MultiPartIdentifier();
    public void set_MultiPartIdentifier(MultiPartIdentifier value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.SecurityUserClause80 : TSqlFragment {
    private List`1<Identifier> _users;
    private UserType80 _userType80;
    public IList`1<Identifier> Users { get; }
    public UserType80 UserType80 { get; public set; }
    public IList`1<Identifier> get_Users();
    public UserType80 get_UserType80();
    public void set_UserType80(UserType80 value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public abstract class Microsoft.SqlServer.TransactSql.ScriptDom.SelectElement : TSqlFragment {
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.SelectFunctionReturnType : FunctionReturnType {
    private SelectStatement _selectStatement;
    public SelectStatement SelectStatement { get; public set; }
    public SelectStatement get_SelectStatement();
    public void set_SelectStatement(SelectStatement value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.SelectInsertSource : InsertSource {
    private QueryExpression _select;
    public QueryExpression Select { get; public set; }
    public QueryExpression get_Select();
    public void set_Select(QueryExpression value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.SelectiveXmlIndexPromotedPath : TSqlFragment {
    private Identifier _name;
    private Literal _path;
    private DataTypeReference _sQLDataType;
    private Literal _xQueryDataType;
    private IntegerLiteral _maxLength;
    private bool _isSingleton;
    public Identifier Name { get; public set; }
    public Literal Path { get; public set; }
    public DataTypeReference SQLDataType { get; public set; }
    public Literal XQueryDataType { get; public set; }
    public IntegerLiteral MaxLength { get; public set; }
    public bool IsSingleton { get; public set; }
    public Identifier get_Name();
    public void set_Name(Identifier value);
    public Literal get_Path();
    public void set_Path(Literal value);
    public DataTypeReference get_SQLDataType();
    public void set_SQLDataType(DataTypeReference value);
    public Literal get_XQueryDataType();
    public void set_XQueryDataType(Literal value);
    public IntegerLiteral get_MaxLength();
    public void set_MaxLength(IntegerLiteral value);
    public bool get_IsSingleton();
    public void set_IsSingleton(bool value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.SelectScalarExpression : SelectElement {
    private ScalarExpression _expression;
    private IdentifierOrValueExpression _columnName;
    public ScalarExpression Expression { get; public set; }
    public IdentifierOrValueExpression ColumnName { get; public set; }
    public ScalarExpression get_Expression();
    public void set_Expression(ScalarExpression value);
    public IdentifierOrValueExpression get_ColumnName();
    public void set_ColumnName(IdentifierOrValueExpression value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.SelectSetVariable : SelectElement {
    private VariableReference _variable;
    private ScalarExpression _expression;
    private AssignmentKind _assignmentKind;
    public VariableReference Variable { get; public set; }
    public ScalarExpression Expression { get; public set; }
    public AssignmentKind AssignmentKind { get; public set; }
    public VariableReference get_Variable();
    public void set_Variable(VariableReference value);
    public ScalarExpression get_Expression();
    public void set_Expression(ScalarExpression value);
    public AssignmentKind get_AssignmentKind();
    public void set_AssignmentKind(AssignmentKind value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.SelectStarExpression : SelectElement {
    private MultiPartIdentifier _qualifier;
    public MultiPartIdentifier Qualifier { get; public set; }
    public MultiPartIdentifier get_Qualifier();
    public void set_Qualifier(MultiPartIdentifier value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.SelectStatement : StatementWithCtesAndXmlNamespaces {
    private QueryExpression _queryExpression;
    private SchemaObjectName _into;
    private Identifier _on;
    private List`1<ComputeClause> _computeClauses;
    public QueryExpression QueryExpression { get; public set; }
    public SchemaObjectName Into { get; public set; }
    public Identifier On { get; public set; }
    public IList`1<ComputeClause> ComputeClauses { get; }
    public QueryExpression get_QueryExpression();
    public void set_QueryExpression(QueryExpression value);
    public SchemaObjectName get_Into();
    public void set_Into(SchemaObjectName value);
    public Identifier get_On();
    public void set_On(Identifier value);
    public IList`1<ComputeClause> get_ComputeClauses();
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.SelectStatementSnippet : SelectStatement {
    private string _script;
    public string Script { get; public set; }
    public string get_Script();
    public void set_Script(string value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public enum Microsoft.SqlServer.TransactSql.ScriptDom.SemanticFunctionType : Enum {
    public int value__;
    public static SemanticFunctionType None;
    public static SemanticFunctionType SemanticKeyPhraseTable;
    public static SemanticFunctionType SemanticSimilarityTable;
    public static SemanticFunctionType SemanticSimilarityDetailsTable;
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.SemanticTableReference : TableReferenceWithAlias {
    private SemanticFunctionType _semanticFunctionType;
    private SchemaObjectName _tableName;
    private List`1<ColumnReferenceExpression> _columns;
    private ScalarExpression _sourceKey;
    private ColumnReferenceExpression _matchedColumn;
    private ScalarExpression _matchedKey;
    public SemanticFunctionType SemanticFunctionType { get; public set; }
    public SchemaObjectName TableName { get; public set; }
    public IList`1<ColumnReferenceExpression> Columns { get; }
    public ScalarExpression SourceKey { get; public set; }
    public ColumnReferenceExpression MatchedColumn { get; public set; }
    public ScalarExpression MatchedKey { get; public set; }
    public SemanticFunctionType get_SemanticFunctionType();
    public void set_SemanticFunctionType(SemanticFunctionType value);
    public SchemaObjectName get_TableName();
    public void set_TableName(SchemaObjectName value);
    public IList`1<ColumnReferenceExpression> get_Columns();
    public ScalarExpression get_SourceKey();
    public void set_SourceKey(ScalarExpression value);
    public ColumnReferenceExpression get_MatchedColumn();
    public void set_MatchedColumn(ColumnReferenceExpression value);
    public ScalarExpression get_MatchedKey();
    public void set_MatchedKey(ScalarExpression value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.SendStatement : TSqlStatement {
    private List`1<ScalarExpression> _conversationHandles;
    private IdentifierOrValueExpression _messageTypeName;
    private ScalarExpression _messageBody;
    public IList`1<ScalarExpression> ConversationHandles { get; }
    public IdentifierOrValueExpression MessageTypeName { get; public set; }
    public ScalarExpression MessageBody { get; public set; }
    public IList`1<ScalarExpression> get_ConversationHandles();
    public IdentifierOrValueExpression get_MessageTypeName();
    public void set_MessageTypeName(IdentifierOrValueExpression value);
    public ScalarExpression get_MessageBody();
    public void set_MessageBody(ScalarExpression value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.SensitivityClassification : object {
    private static Dictionary`2<string, OptionType> optionTypes;
    private static SensitivityClassification();
    public static OptionType GetOptionTypeByName(string option);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.SensitivityClassificationOption : TSqlFragment {
    private OptionType _type;
    private Literal _value;
    public OptionType Type { get; public set; }
    public Literal Value { get; public set; }
    public OptionType get_Type();
    public void set_Type(OptionType value);
    public Literal get_Value();
    public void set_Value(Literal value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public abstract class Microsoft.SqlServer.TransactSql.ScriptDom.SensitivityClassificationStatement : TSqlStatement {
    private List`1<ColumnReferenceExpression> _columns;
    public IList`1<ColumnReferenceExpression> Columns { get; }
    public IList`1<ColumnReferenceExpression> get_Columns();
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public enum Microsoft.SqlServer.TransactSql.ScriptDom.SeparatorType : Enum {
    public int value__;
    public static SeparatorType NotSpecified;
    public static SeparatorType Dot;
    public static SeparatorType DoubleColon;
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.SequenceOption : TSqlFragment {
    private SequenceOptionKind _optionKind;
    private bool _noValue;
    public SequenceOptionKind OptionKind { get; public set; }
    public bool NoValue { get; public set; }
    public SequenceOptionKind get_OptionKind();
    public void set_OptionKind(SequenceOptionKind value);
    public bool get_NoValue();
    public void set_NoValue(bool value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public enum Microsoft.SqlServer.TransactSql.ScriptDom.SequenceOptionKind : Enum {
    public int value__;
    public static SequenceOptionKind As;
    public static SequenceOptionKind MinValue;
    public static SequenceOptionKind MaxValue;
    public static SequenceOptionKind Cache;
    public static SequenceOptionKind Cycle;
    public static SequenceOptionKind Start;
    public static SequenceOptionKind Increment;
    public static SequenceOptionKind Restart;
}
public abstract class Microsoft.SqlServer.TransactSql.ScriptDom.SequenceStatement : TSqlStatement {
    private SchemaObjectName _name;
    private List`1<SequenceOption> _sequenceOptions;
    public SchemaObjectName Name { get; public set; }
    public IList`1<SequenceOption> SequenceOptions { get; }
    public SchemaObjectName get_Name();
    public void set_Name(SchemaObjectName value);
    public IList`1<SequenceOption> get_SequenceOptions();
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
internal class Microsoft.SqlServer.TransactSql.ScriptDom.ServerAuditActionGroupHelper : OptionsHelper`1<AuditActionGroup> {
    internal static ServerAuditActionGroupHelper Instance;
    private static ServerAuditActionGroupHelper();
}
public abstract class Microsoft.SqlServer.TransactSql.ScriptDom.ServerAuditStatement : TSqlStatement {
    private Identifier _auditName;
    private AuditTarget _auditTarget;
    private List`1<AuditOption> _options;
    private BooleanExpression _predicateExpression;
    public Identifier AuditName { get; public set; }
    public AuditTarget AuditTarget { get; public set; }
    public IList`1<AuditOption> Options { get; }
    public BooleanExpression PredicateExpression { get; public set; }
    public Identifier get_AuditName();
    public void set_AuditName(Identifier value);
    public AuditTarget get_AuditTarget();
    public void set_AuditTarget(AuditTarget value);
    public IList`1<AuditOption> get_Options();
    public BooleanExpression get_PredicateExpression();
    public void set_PredicateExpression(BooleanExpression value);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public enum Microsoft.SqlServer.TransactSql.ScriptDom.ServiceBrokerOption : Enum {
    public int value__;
    public static ServiceBrokerOption None;
    public static ServiceBrokerOption EnableBroker;
    public static ServiceBrokerOption NewBroker;
    public static ServiceBrokerOption ErrorBrokerConversations;
}
internal class Microsoft.SqlServer.TransactSql.ScriptDom.ServiceBrokerOptionsHelper : OptionsHelper`1<ServiceBrokerOption> {
    internal static ServiceBrokerOptionsHelper Instance;
    private static ServiceBrokerOptionsHelper();
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.ServiceContract : TSqlFragment {
    private Identifier _name;
    private AlterAction _action;
    public Identifier Name { get; public set; }
    public AlterAction Action { get; public set; }
    public Identifier get_Name();
    public void set_Name(Identifier value);
    public AlterAction get_Action();
    public void set_Action(AlterAction value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public abstract class Microsoft.SqlServer.TransactSql.ScriptDom.SessionOption : TSqlFragment {
    private SessionOptionKind _optionKind;
    public SessionOptionKind OptionKind { get; public set; }
    public SessionOptionKind get_OptionKind();
    public void set_OptionKind(SessionOptionKind value);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public enum Microsoft.SqlServer.TransactSql.ScriptDom.SessionOptionKind : Enum {
    public int value__;
    public static SessionOptionKind EventRetention;
    public static SessionOptionKind MemoryPartition;
    public static SessionOptionKind MaxMemory;
    public static SessionOptionKind MaxEventSize;
    public static SessionOptionKind MaxDispatchLatency;
    public static SessionOptionKind TrackCausality;
    public static SessionOptionKind StartUpState;
}
internal class Microsoft.SqlServer.TransactSql.ScriptDom.SessionOptionUnitHelper : OptionsHelper`1<MemoryUnit> {
    internal static SessionOptionUnitHelper Instance;
    private static SessionOptionUnitHelper();
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.SessionTimeoutPayloadOption : PayloadOption {
    private bool _isNever;
    private Literal _timeout;
    public bool IsNever { get; public set; }
    public Literal Timeout { get; public set; }
    public bool get_IsNever();
    public void set_IsNever(bool value);
    public Literal get_Timeout();
    public void set_Timeout(Literal value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public abstract class Microsoft.SqlServer.TransactSql.ScriptDom.SetClause : TSqlFragment {
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public abstract class Microsoft.SqlServer.TransactSql.ScriptDom.SetCommand : TSqlFragment {
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.SetCommandStatement : TSqlStatement {
    private List`1<SetCommand> _commands;
    public IList`1<SetCommand> Commands { get; }
    public IList`1<SetCommand> get_Commands();
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.SetErrorLevelStatement : TSqlStatement {
    private ScalarExpression _level;
    public ScalarExpression Level { get; public set; }
    public ScalarExpression get_Level();
    public void set_Level(ScalarExpression value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.SetFipsFlaggerCommand : SetCommand {
    private FipsComplianceLevel _complianceLevel;
    public FipsComplianceLevel ComplianceLevel { get; public set; }
    public FipsComplianceLevel get_ComplianceLevel();
    public void set_ComplianceLevel(FipsComplianceLevel value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.SetIdentityInsertStatement : SetOnOffStatement {
    private SchemaObjectName _table;
    public SchemaObjectName Table { get; public set; }
    public SchemaObjectName get_Table();
    public void set_Table(SchemaObjectName value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
[FlagsAttribute]
public enum Microsoft.SqlServer.TransactSql.ScriptDom.SetOffsets : Enum {
    public int value__;
    public static SetOffsets None;
    public static SetOffsets Select;
    public static SetOffsets From;
    public static SetOffsets Order;
    public static SetOffsets Compute;
    public static SetOffsets Table;
    public static SetOffsets Procedure;
    public static SetOffsets Execute;
    public static SetOffsets Statement;
    public static SetOffsets Param;
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.SetOffsetsStatement : SetOnOffStatement {
    private SetOffsets _options;
    public SetOffsets Options { get; public set; }
    public SetOffsets get_Options();
    public void set_Options(SetOffsets value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public abstract class Microsoft.SqlServer.TransactSql.ScriptDom.SetOnOffStatement : TSqlStatement {
    private bool _isOn;
    public bool IsOn { get; public set; }
    public bool get_IsOn();
    public void set_IsOn(bool value);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
[FlagsAttribute]
public enum Microsoft.SqlServer.TransactSql.ScriptDom.SetOptions : Enum {
    public int value__;
    public static SetOptions None;
    public static SetOptions QuotedIdentifier;
    public static SetOptions ConcatNullYieldsNull;
    public static SetOptions CursorCloseOnCommit;
    public static SetOptions ArithAbort;
    public static SetOptions ArithIgnore;
    public static SetOptions FmtOnly;
    public static SetOptions NoCount;
    public static SetOptions NoExec;
    public static SetOptions NumericRoundAbort;
    public static SetOptions ParseOnly;
    public static SetOptions AnsiDefaults;
    public static SetOptions AnsiNullDfltOff;
    public static SetOptions AnsiNullDfltOn;
    public static SetOptions AnsiNulls;
    public static SetOptions AnsiPadding;
    public static SetOptions AnsiWarnings;
    public static SetOptions ForcePlan;
    public static SetOptions ShowPlanAll;
    public static SetOptions ShowPlanText;
    public static SetOptions ImplicitTransactions;
    public static SetOptions RemoteProcTransactions;
    public static SetOptions XactAbort;
    public static SetOptions DisableDefCnstChk;
    public static SetOptions ShowPlanXml;
    public static SetOptions NoBrowsetable;
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.SetRowCountStatement : TSqlStatement {
    private ValueExpression _numberRows;
    public ValueExpression NumberRows { get; public set; }
    public ValueExpression get_NumberRows();
    public void set_NumberRows(ValueExpression value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.SetSearchPropertyListAlterFullTextIndexAction : AlterFullTextIndexAction {
    private SearchPropertyListFullTextIndexOption _searchPropertyListOption;
    private bool _withNoPopulation;
    public SearchPropertyListFullTextIndexOption SearchPropertyListOption { get; public set; }
    public bool WithNoPopulation { get; public set; }
    public SearchPropertyListFullTextIndexOption get_SearchPropertyListOption();
    public void set_SearchPropertyListOption(SearchPropertyListFullTextIndexOption value);
    public bool get_WithNoPopulation();
    public void set_WithNoPopulation(bool value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
[FlagsAttribute]
public enum Microsoft.SqlServer.TransactSql.ScriptDom.SetStatisticsOptions : Enum {
    public int value__;
    public static SetStatisticsOptions None;
    public static SetStatisticsOptions IO;
    public static SetStatisticsOptions Profile;
    public static SetStatisticsOptions Time;
    public static SetStatisticsOptions Xml;
}
internal class Microsoft.SqlServer.TransactSql.ScriptDom.SetStatisticsOptionsHelper : OptionsHelper`1<SetStatisticsOptions> {
    internal static SetStatisticsOptionsHelper Instance;
    private static SetStatisticsOptionsHelper();
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.SetStatisticsStatement : SetOnOffStatement {
    private SetStatisticsOptions _options;
    public SetStatisticsOptions Options { get; public set; }
    public SetStatisticsOptions get_Options();
    public void set_Options(SetStatisticsOptions value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.SetStopListAlterFullTextIndexAction : AlterFullTextIndexAction {
    private StopListFullTextIndexOption _stopListOption;
    private bool _withNoPopulation;
    public StopListFullTextIndexOption StopListOption { get; public set; }
    public bool WithNoPopulation { get; public set; }
    public StopListFullTextIndexOption get_StopListOption();
    public void set_StopListOption(StopListFullTextIndexOption value);
    public bool get_WithNoPopulation();
    public void set_WithNoPopulation(bool value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.SetTextSizeStatement : TSqlStatement {
    private ScalarExpression _textSize;
    public ScalarExpression TextSize { get; public set; }
    public ScalarExpression get_TextSize();
    public void set_TextSize(ScalarExpression value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.SetTransactionIsolationLevelStatement : TSqlStatement {
    private IsolationLevel _level;
    public IsolationLevel Level { get; public set; }
    public IsolationLevel get_Level();
    public void set_Level(IsolationLevel value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.SetUserStatement : TSqlStatement {
    private ValueExpression _userName;
    private bool _withNoReset;
    public ValueExpression UserName { get; public set; }
    public bool WithNoReset { get; public set; }
    public ValueExpression get_UserName();
    public void set_UserName(ValueExpression value);
    public bool get_WithNoReset();
    public void set_WithNoReset(bool value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.SetVariableStatement : TSqlStatement {
    private VariableReference _variable;
    private SeparatorType _separatorType;
    private Identifier _identifier;
    private bool _functionCallExists;
    private List`1<ScalarExpression> _parameters;
    private ScalarExpression _expression;
    private CursorDefinition _cursorDefinition;
    private AssignmentKind _assignmentKind;
    public VariableReference Variable { get; public set; }
    public SeparatorType SeparatorType { get; public set; }
    public Identifier Identifier { get; public set; }
    public bool FunctionCallExists { get; public set; }
    public IList`1<ScalarExpression> Parameters { get; }
    public ScalarExpression Expression { get; public set; }
    public CursorDefinition CursorDefinition { get; public set; }
    public AssignmentKind AssignmentKind { get; public set; }
    public VariableReference get_Variable();
    public void set_Variable(VariableReference value);
    public SeparatorType get_SeparatorType();
    public void set_SeparatorType(SeparatorType value);
    public Identifier get_Identifier();
    public void set_Identifier(Identifier value);
    public bool get_FunctionCallExists();
    public void set_FunctionCallExists(bool value);
    public IList`1<ScalarExpression> get_Parameters();
    public ScalarExpression get_Expression();
    public void set_Expression(ScalarExpression value);
    public CursorDefinition get_CursorDefinition();
    public void set_CursorDefinition(CursorDefinition value);
    public AssignmentKind get_AssignmentKind();
    public void set_AssignmentKind(AssignmentKind value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.ShutdownStatement : TSqlStatement {
    private bool _withNoWait;
    public bool WithNoWait { get; public set; }
    public bool get_WithNoWait();
    public void set_WithNoWait(bool value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public enum Microsoft.SqlServer.TransactSql.ScriptDom.SignableElementKind : Enum {
    public int value__;
    public static SignableElementKind NotSpecified;
    public static SignableElementKind Object;
    public static SignableElementKind Assembly;
    public static SignableElementKind Database;
}
public abstract class Microsoft.SqlServer.TransactSql.ScriptDom.SignatureStatementBase : TSqlStatement {
    private bool _isCounter;
    private SignableElementKind _elementKind;
    private SchemaObjectName _element;
    private List`1<CryptoMechanism> _cryptos;
    public bool IsCounter { get; public set; }
    public SignableElementKind ElementKind { get; public set; }
    public SchemaObjectName Element { get; public set; }
    public IList`1<CryptoMechanism> Cryptos { get; }
    public bool get_IsCounter();
    public void set_IsCounter(bool value);
    public SignableElementKind get_ElementKind();
    public void set_ElementKind(SignableElementKind value);
    public SchemaObjectName get_Element();
    public void set_Element(SchemaObjectName value);
    public IList`1<CryptoMechanism> get_Cryptos();
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.SimpleAlterFullTextIndexAction : AlterFullTextIndexAction {
    private SimpleAlterFullTextIndexActionKind _actionKind;
    public SimpleAlterFullTextIndexActionKind ActionKind { get; public set; }
    public SimpleAlterFullTextIndexActionKind get_ActionKind();
    public void set_ActionKind(SimpleAlterFullTextIndexActionKind value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public enum Microsoft.SqlServer.TransactSql.ScriptDom.SimpleAlterFullTextIndexActionKind : Enum {
    public int value__;
    public static SimpleAlterFullTextIndexActionKind None;
    public static SimpleAlterFullTextIndexActionKind Enable;
    public static SimpleAlterFullTextIndexActionKind Disable;
    public static SimpleAlterFullTextIndexActionKind SetChangeTrackingManual;
    public static SimpleAlterFullTextIndexActionKind SetChangeTrackingAuto;
    public static SimpleAlterFullTextIndexActionKind SetChangeTrackingOff;
    public static SimpleAlterFullTextIndexActionKind StartFullPopulation;
    public static SimpleAlterFullTextIndexActionKind StartIncrementalPopulation;
    public static SimpleAlterFullTextIndexActionKind StartUpdatePopulation;
    public static SimpleAlterFullTextIndexActionKind StopPopulation;
    public static SimpleAlterFullTextIndexActionKind PausePopulation;
    public static SimpleAlterFullTextIndexActionKind ResumePopulation;
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.SimpleCaseExpression : CaseExpression {
    private ScalarExpression _inputExpression;
    private List`1<SimpleWhenClause> _whenClauses;
    public ScalarExpression InputExpression { get; public set; }
    public IList`1<SimpleWhenClause> WhenClauses { get; }
    public ScalarExpression get_InputExpression();
    public void set_InputExpression(ScalarExpression value);
    public IList`1<SimpleWhenClause> get_WhenClauses();
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
internal class Microsoft.SqlServer.TransactSql.ScriptDom.SimpleDbOptionsHelper : OptionsHelper`1<DatabaseOptionKind> {
    internal static SimpleDbOptionsHelper Instance;
    private static SimpleDbOptionsHelper();
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.SimpleWhenClause : WhenClause {
    private ScalarExpression _whenExpression;
    public ScalarExpression WhenExpression { get; public set; }
    public ScalarExpression get_WhenExpression();
    public void set_WhenExpression(ScalarExpression value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.SingleValueTypeCopyOption : CopyStatementOptionBase {
    private IdentifierOrValueExpression _singleValue;
    public IdentifierOrValueExpression SingleValue { get; public set; }
    public IdentifierOrValueExpression get_SingleValue();
    public void set_SingleValue(IdentifierOrValueExpression value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.SizeFileDeclarationOption : FileDeclarationOption {
    private Literal _size;
    private MemoryUnit _units;
    public Literal Size { get; public set; }
    public MemoryUnit Units { get; public set; }
    public Literal get_Size();
    public void set_Size(Literal value);
    public MemoryUnit get_Units();
    public void set_Units(MemoryUnit value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.SoapMethod : PayloadOption {
    private Literal _alias;
    private Literal _namespace;
    private SoapMethodAction _action;
    private Literal _name;
    private SoapMethodFormat _format;
    private SoapMethodSchemas _schema;
    public Literal Alias { get; public set; }
    public Literal Namespace { get; public set; }
    public SoapMethodAction Action { get; public set; }
    public Literal Name { get; public set; }
    public SoapMethodFormat Format { get; public set; }
    public SoapMethodSchemas Schema { get; public set; }
    public Literal get_Alias();
    public void set_Alias(Literal value);
    public Literal get_Namespace();
    public void set_Namespace(Literal value);
    public SoapMethodAction get_Action();
    public void set_Action(SoapMethodAction value);
    public Literal get_Name();
    public void set_Name(Literal value);
    public SoapMethodFormat get_Format();
    public void set_Format(SoapMethodFormat value);
    public SoapMethodSchemas get_Schema();
    public void set_Schema(SoapMethodSchemas value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public enum Microsoft.SqlServer.TransactSql.ScriptDom.SoapMethodAction : Enum {
    public int value__;
    public static SoapMethodAction None;
    public static SoapMethodAction Add;
    public static SoapMethodAction Alter;
    public static SoapMethodAction Drop;
}
public enum Microsoft.SqlServer.TransactSql.ScriptDom.SoapMethodFormat : Enum {
    public int value__;
    public static SoapMethodFormat NotSpecified;
    public static SoapMethodFormat AllResults;
    public static SoapMethodFormat RowsetsOnly;
    public static SoapMethodFormat None;
}
internal class Microsoft.SqlServer.TransactSql.ScriptDom.SoapMethodFormatsHelper : OptionsHelper`1<SoapMethodFormat> {
    internal static SoapMethodFormatsHelper Instance;
    private static SoapMethodFormatsHelper();
}
public enum Microsoft.SqlServer.TransactSql.ScriptDom.SoapMethodSchemas : Enum {
    public int value__;
    public static SoapMethodSchemas NotSpecified;
    public static SoapMethodSchemas None;
    public static SoapMethodSchemas Standard;
    public static SoapMethodSchemas Default;
}
public enum Microsoft.SqlServer.TransactSql.ScriptDom.SortOrder : Enum {
    public int value__;
    public static SortOrder NotSpecified;
    public static SortOrder Ascending;
    public static SortOrder Descending;
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.SourceDeclaration : ScalarExpression {
    private EventSessionObjectName _value;
    public EventSessionObjectName Value { get; public set; }
    public EventSessionObjectName get_Value();
    public void set_Value(EventSessionObjectName value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public enum Microsoft.SqlServer.TransactSql.ScriptDom.SparseColumnOption : Enum {
    public int value__;
    public static SparseColumnOption None;
    public static SparseColumnOption Sparse;
    public static SparseColumnOption ColumnSetForAllSparseColumns;
}
public enum Microsoft.SqlServer.TransactSql.ScriptDom.SpatialIndexingSchemeType : Enum {
    public int value__;
    public static SpatialIndexingSchemeType None;
    public static SpatialIndexingSchemeType GeometryGrid;
    public static SpatialIndexingSchemeType GeographyGrid;
    public static SpatialIndexingSchemeType GeometryAutoGrid;
    public static SpatialIndexingSchemeType GeographyAutoGrid;
}
internal class Microsoft.SqlServer.TransactSql.ScriptDom.SpatialIndexingSchemeTypeHelper : OptionsHelper`1<SpatialIndexingSchemeType> {
    internal static SpatialIndexingSchemeTypeHelper Instance;
    private static SpatialIndexingSchemeTypeHelper();
}
public abstract class Microsoft.SqlServer.TransactSql.ScriptDom.SpatialIndexOption : TSqlFragment {
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.SpatialIndexRegularOption : SpatialIndexOption {
    private IndexOption _option;
    public IndexOption Option { get; public set; }
    public IndexOption get_Option();
    public void set_Option(IndexOption value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.Sql100ScriptGenerator : SqlScriptGenerator {
    public Sql100ScriptGenerator(SqlScriptGeneratorOptions options);
    internal virtual SqlScriptGeneratorVisitor CreateSqlScriptGeneratorVisitor(SqlScriptGeneratorOptions options, ScriptWriter scriptWriter);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.Sql110ScriptGenerator : SqlScriptGenerator {
    public Sql110ScriptGenerator(SqlScriptGeneratorOptions options);
    internal virtual SqlScriptGeneratorVisitor CreateSqlScriptGeneratorVisitor(SqlScriptGeneratorOptions options, ScriptWriter scriptWriter);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.Sql120ScriptGenerator : SqlScriptGenerator {
    public Sql120ScriptGenerator(SqlScriptGeneratorOptions options);
    internal virtual SqlScriptGeneratorVisitor CreateSqlScriptGeneratorVisitor(SqlScriptGeneratorOptions options, ScriptWriter scriptWriter);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.Sql130ScriptGenerator : SqlScriptGenerator {
    public Sql130ScriptGenerator(SqlScriptGeneratorOptions options);
    internal virtual SqlScriptGeneratorVisitor CreateSqlScriptGeneratorVisitor(SqlScriptGeneratorOptions options, ScriptWriter scriptWriter);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.Sql140ScriptGenerator : SqlScriptGenerator {
    public Sql140ScriptGenerator(SqlScriptGeneratorOptions options);
    internal virtual SqlScriptGeneratorVisitor CreateSqlScriptGeneratorVisitor(SqlScriptGeneratorOptions options, ScriptWriter scriptWriter);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.Sql150ScriptGenerator : SqlScriptGenerator {
    public Sql150ScriptGenerator(SqlScriptGeneratorOptions options);
    internal virtual SqlScriptGeneratorVisitor CreateSqlScriptGeneratorVisitor(SqlScriptGeneratorOptions options, ScriptWriter scriptWriter);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.Sql80ScriptGenerator : SqlScriptGenerator {
    public Sql80ScriptGenerator(SqlScriptGeneratorOptions options);
    internal virtual SqlScriptGeneratorVisitor CreateSqlScriptGeneratorVisitor(SqlScriptGeneratorOptions options, ScriptWriter scriptWriter);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.Sql90ScriptGenerator : SqlScriptGenerator {
    public Sql90ScriptGenerator(SqlScriptGeneratorOptions options);
    internal virtual SqlScriptGeneratorVisitor CreateSqlScriptGeneratorVisitor(SqlScriptGeneratorOptions options, ScriptWriter scriptWriter);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.SqlCommandIdentifier : Identifier {
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public enum Microsoft.SqlServer.TransactSql.ScriptDom.SqlDataTypeOption : Enum {
    public int value__;
    public static SqlDataTypeOption None;
    public static SqlDataTypeOption BigInt;
    public static SqlDataTypeOption Int;
    public static SqlDataTypeOption SmallInt;
    public static SqlDataTypeOption TinyInt;
    public static SqlDataTypeOption Bit;
    public static SqlDataTypeOption Decimal;
    public static SqlDataTypeOption Numeric;
    public static SqlDataTypeOption Money;
    public static SqlDataTypeOption SmallMoney;
    public static SqlDataTypeOption Float;
    public static SqlDataTypeOption Real;
    public static SqlDataTypeOption DateTime;
    public static SqlDataTypeOption SmallDateTime;
    public static SqlDataTypeOption Char;
    public static SqlDataTypeOption VarChar;
    public static SqlDataTypeOption Text;
    public static SqlDataTypeOption NChar;
    public static SqlDataTypeOption NVarChar;
    public static SqlDataTypeOption NText;
    public static SqlDataTypeOption Binary;
    public static SqlDataTypeOption VarBinary;
    public static SqlDataTypeOption Image;
    public static SqlDataTypeOption Cursor;
    public static SqlDataTypeOption Sql_Variant;
    public static SqlDataTypeOption Table;
    public static SqlDataTypeOption Timestamp;
    public static SqlDataTypeOption UniqueIdentifier;
    public static SqlDataTypeOption Date;
    public static SqlDataTypeOption Time;
    public static SqlDataTypeOption DateTime2;
    public static SqlDataTypeOption DateTimeOffset;
    public static SqlDataTypeOption Rowversion;
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.SqlDataTypeReference : ParameterizedDataTypeReference {
    private SqlDataTypeOption _sqlDataTypeOption;
    public SqlDataTypeOption SqlDataTypeOption { get; public set; }
    public SqlDataTypeOption get_SqlDataTypeOption();
    public void set_SqlDataTypeOption(SqlDataTypeOption value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public enum Microsoft.SqlServer.TransactSql.ScriptDom.SqlEngineType : Enum {
    public int value__;
    public static SqlEngineType All;
    public static SqlEngineType Standalone;
    public static SqlEngineType SqlAzure;
}
public abstract class Microsoft.SqlServer.TransactSql.ScriptDom.SqlScriptGenerator : object {
    private SqlScriptGeneratorOptions _options;
    public SqlScriptGeneratorOptions Options { get; }
    protected SqlScriptGenerator(SqlScriptGeneratorOptions options);
    public SqlScriptGeneratorOptions get_Options();
    public void GenerateScript(TSqlFragment scriptFragment, String& script);
    public void GenerateScript(TSqlFragment scriptFragment, String& script, IList`1& versioningErrors);
    public void GenerateScript(TSqlFragment scriptFragment, TextWriter writer);
    public IList`1<TSqlParserToken> GenerateTokens(TSqlFragment scriptFragment);
    internal abstract virtual SqlScriptGeneratorVisitor CreateSqlScriptGeneratorVisitor(SqlScriptGeneratorOptions options, ScriptWriter scriptWriter);
    private ScriptWriter WriteScript(TSqlFragment scriptFragment);
    private void VersionCheck(TSqlFragment scriptFragment, VersioningVisitor versioningVisitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.SqlScriptGeneratorOptions : object {
    private static KeywordCasing DefaultKeywordCasing;
    private static SqlVersion DefaultSqlVersion;
    private static SqlEngineType DefaultSqlEngineType;
    private static int DefaultIndentationSize;
    private static bool DefaultIncludeSemicolons;
    private static bool DefaultAlignColumnDefinitionFields;
    private static bool DefaultNewLineBeforeFromClause;
    private static bool DefaultNewLineBeforeWhereClause;
    private static bool DefaultNewLineBeforeGroupByClause;
    private static bool DefaultNewLineBeforeOrderByClause;
    private static bool DefaultNewLineBeforeHavingClause;
    private static bool DefaultNewLineBeforeJoinClause;
    private static bool DefaultNewLineBeforeOffsetClause;
    private static bool DefaultNewLineBeforeOutputClause;
    private static bool DefaultAlignClauseBodies;
    private static bool DefaultMultilineSelectElementsList;
    private static bool DefaultMultilineWherePredicatesList;
    private static bool DefaultIndentViewBody;
    private static bool DefaultMultilineViewColumnsList;
    private static bool DefaultAsKeywordOnOwnLine;
    private static bool DefaultIndentSetClause;
    private static bool DefaultAlignSetClauseItem;
    private static bool DefaultMultilineSetClauseItems;
    private static bool DefaultMultilineInsertTargetsList;
    private static bool DefaultMultilineInsertSourcesList;
    private static bool DefaultNewLineBeforeOpenParenthesisInMultilineList;
    private static bool DefaultNewLineBeforeCloseParenthesisInMultilineList;
    private static bool DefaultAllowExternalLibraryPaths;
    private static bool DefaultAllowExternalLanguagePaths;
    private static int MinIndentationSize;
    private KeywordCasing keywordCasing;
    private SqlVersion sqlVersion;
    private SqlEngineType sqlEngineType;
    private int indentationSize;
    private bool includeSemicolons;
    private bool alignColumnDefinitionFields;
    private bool newLineBeforeFromClause;
    private bool newLineBeforeWhereClause;
    private bool newLineBeforeGroupByClause;
    private bool newLineBeforeOrderByClause;
    private bool newLineBeforeHavingClause;
    private bool newLineBeforeJoinClause;
    private bool newLineBeforeOffsetClause;
    private bool newLineBeforeOutputClause;
    private bool alignClauseBodies;
    private bool multilineSelectElementsList;
    private bool multilineWherePredicatesList;
    private bool indentViewBody;
    private bool multilineViewColumnsList;
    private bool asKeywordOnOwnLine;
    private bool indentSetClause;
    private bool alignSetClauseItem;
    private bool multilineSetClauseItems;
    private bool multilineInsertTargetsList;
    private bool multilineInsertSourcesList;
    private bool newLineBeforeOpenParenthesisInMultilineList;
    private bool newLineBeforeCloseParenthesisInMultilineList;
    private bool allowExternalLibraryPaths;
    private bool allowExternalLanguagePaths;
    public KeywordCasing KeywordCasing { get; public set; }
    public SqlVersion SqlVersion { get; public set; }
    public SqlEngineType SqlEngineType { get; public set; }
    public int IndentationSize { get; public set; }
    public bool IncludeSemicolons { get; public set; }
    public bool AlignColumnDefinitionFields { get; public set; }
    public bool NewLineBeforeFromClause { get; public set; }
    public bool NewLineBeforeWhereClause { get; public set; }
    public bool NewLineBeforeGroupByClause { get; public set; }
    public bool NewLineBeforeOrderByClause { get; public set; }
    public bool NewLineBeforeHavingClause { get; public set; }
    public bool NewLineBeforeJoinClause { get; public set; }
    public bool NewLineBeforeOffsetClause { get; public set; }
    public bool NewLineBeforeOutputClause { get; public set; }
    public bool AlignClauseBodies { get; public set; }
    public bool MultilineSelectElementsList { get; public set; }
    public bool MultilineWherePredicatesList { get; public set; }
    public bool IndentViewBody { get; public set; }
    public bool MultilineViewColumnsList { get; public set; }
    public bool AsKeywordOnOwnLine { get; public set; }
    public bool IndentSetClause { get; public set; }
    public bool AlignSetClauseItem { get; public set; }
    public bool MultilineSetClauseItems { get; public set; }
    public bool MultilineInsertTargetsList { get; public set; }
    public bool MultilineInsertSourcesList { get; public set; }
    public bool NewLineBeforeOpenParenthesisInMultilineList { get; public set; }
    public bool NewLineBeforeCloseParenthesisInMultilineList { get; public set; }
    public bool AllowExternalLibraryPaths { get; public set; }
    public bool AllowExternalLanguagePaths { get; public set; }
    public KeywordCasing get_KeywordCasing();
    public void set_KeywordCasing(KeywordCasing value);
    public SqlVersion get_SqlVersion();
    public void set_SqlVersion(SqlVersion value);
    public SqlEngineType get_SqlEngineType();
    public void set_SqlEngineType(SqlEngineType value);
    public int get_IndentationSize();
    public void set_IndentationSize(int value);
    public bool get_IncludeSemicolons();
    public void set_IncludeSemicolons(bool value);
    public bool get_AlignColumnDefinitionFields();
    public void set_AlignColumnDefinitionFields(bool value);
    public bool get_NewLineBeforeFromClause();
    public void set_NewLineBeforeFromClause(bool value);
    public bool get_NewLineBeforeWhereClause();
    public void set_NewLineBeforeWhereClause(bool value);
    public bool get_NewLineBeforeGroupByClause();
    public void set_NewLineBeforeGroupByClause(bool value);
    public bool get_NewLineBeforeOrderByClause();
    public void set_NewLineBeforeOrderByClause(bool value);
    public bool get_NewLineBeforeHavingClause();
    public void set_NewLineBeforeHavingClause(bool value);
    public bool get_NewLineBeforeJoinClause();
    public void set_NewLineBeforeJoinClause(bool value);
    public bool get_NewLineBeforeOffsetClause();
    public void set_NewLineBeforeOffsetClause(bool value);
    public bool get_NewLineBeforeOutputClause();
    public void set_NewLineBeforeOutputClause(bool value);
    public bool get_AlignClauseBodies();
    public void set_AlignClauseBodies(bool value);
    public bool get_MultilineSelectElementsList();
    public void set_MultilineSelectElementsList(bool value);
    public bool get_MultilineWherePredicatesList();
    public void set_MultilineWherePredicatesList(bool value);
    public bool get_IndentViewBody();
    public void set_IndentViewBody(bool value);
    public bool get_MultilineViewColumnsList();
    public void set_MultilineViewColumnsList(bool value);
    public bool get_AsKeywordOnOwnLine();
    public void set_AsKeywordOnOwnLine(bool value);
    public bool get_IndentSetClause();
    public void set_IndentSetClause(bool value);
    public bool get_AlignSetClauseItem();
    public void set_AlignSetClauseItem(bool value);
    public bool get_MultilineSetClauseItems();
    public void set_MultilineSetClauseItems(bool value);
    public bool get_MultilineInsertTargetsList();
    public void set_MultilineInsertTargetsList(bool value);
    public bool get_MultilineInsertSourcesList();
    public void set_MultilineInsertSourcesList(bool value);
    public bool get_NewLineBeforeOpenParenthesisInMultilineList();
    public void set_NewLineBeforeOpenParenthesisInMultilineList(bool value);
    public bool get_NewLineBeforeCloseParenthesisInMultilineList();
    public void set_NewLineBeforeCloseParenthesisInMultilineList(bool value);
    public bool get_AllowExternalLibraryPaths();
    public void set_AllowExternalLibraryPaths(bool value);
    public bool get_AllowExternalLanguagePaths();
    public void set_AllowExternalLanguagePaths(bool value);
    public void Reset();
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Microsoft.SqlServer.TransactSql.ScriptDom.SqlScriptGeneratorResource : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string CircularAlignmentPoints { get; }
    internal static string InvalidAlignmentOperation { get; }
    internal static string ScriptDomTreeTypeNotSupported { get; }
    internal static string TokenizationFailed { get; }
    internal static string TokenTypeDoesNotHaveStringRepresentation { get; }
    internal static string UnhandledOption { get; }
    internal static string UnknownEnumValue { get; }
    internal static string UnknownLiteralType { get; }
    internal static string UnknownQuoteType { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_CircularAlignmentPoints();
    internal static string get_InvalidAlignmentOperation();
    internal static string get_ScriptDomTreeTypeNotSupported();
    internal static string get_TokenizationFailed();
    internal static string get_TokenTypeDoesNotHaveStringRepresentation();
    internal static string get_UnhandledOption();
    internal static string get_UnknownEnumValue();
    internal static string get_UnknownLiteralType();
    internal static string get_UnknownQuoteType();
}
public enum Microsoft.SqlServer.TransactSql.ScriptDom.SqlVersion : Enum {
    public int value__;
    public static SqlVersion Sql90;
    public static SqlVersion Sql80;
    public static SqlVersion Sql100;
    public static SqlVersion Sql110;
    public static SqlVersion Sql120;
    public static SqlVersion Sql130;
    public static SqlVersion Sql140;
    public static SqlVersion Sql150;
}
[FlagsAttribute]
internal enum Microsoft.SqlServer.TransactSql.ScriptDom.SqlVersionFlags : Enum {
    public int value__;
    public static SqlVersionFlags None;
    public static SqlVersionFlags TSql80;
    public static SqlVersionFlags TSql90;
    public static SqlVersionFlags TSql100;
    public static SqlVersionFlags TSql110;
    public static SqlVersionFlags TSql120;
    public static SqlVersionFlags TSql130;
    public static SqlVersionFlags TSql140;
    public static SqlVersionFlags TSql150;
    public static SqlVersionFlags TSqlAll;
    public static SqlVersionFlags TSql90AndAbove;
    public static SqlVersionFlags TSql100AndAbove;
    public static SqlVersionFlags TSql110AndAbove;
    public static SqlVersionFlags TSql120AndAbove;
    public static SqlVersionFlags TSql130AndAbove;
    public static SqlVersionFlags TSql140AndAbove;
    public static SqlVersionFlags TSql150AndAbove;
    public static SqlVersionFlags TSqlUnder110;
    public static SqlVersionFlags TSqlUnder120;
    public static SqlVersionFlags TSqlUnder130;
    public static SqlVersionFlags TSqlUnder140;
    public static SqlVersionFlags TSqlUnder150;
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.StateAuditOption : AuditOption {
    private OptionState _value;
    public OptionState Value { get; public set; }
    public OptionState get_Value();
    public void set_Value(OptionState value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.StatementList : TSqlFragment {
    private List`1<TSqlStatement> _statements;
    public IList`1<TSqlStatement> Statements { get; }
    public IList`1<TSqlStatement> get_Statements();
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.StatementListSnippet : StatementList {
    private string _script;
    public string Script { get; public set; }
    public string get_Script();
    public void set_Script(string value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public abstract class Microsoft.SqlServer.TransactSql.ScriptDom.StatementWithCtesAndXmlNamespaces : TSqlStatement {
    private WithCtesAndXmlNamespaces _withCtesAndXmlNamespaces;
    private List`1<OptimizerHint> _optimizerHints;
    public WithCtesAndXmlNamespaces WithCtesAndXmlNamespaces { get; public set; }
    public IList`1<OptimizerHint> OptimizerHints { get; }
    public WithCtesAndXmlNamespaces get_WithCtesAndXmlNamespaces();
    public void set_WithCtesAndXmlNamespaces(WithCtesAndXmlNamespaces value);
    public IList`1<OptimizerHint> get_OptimizerHints();
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.StatisticsOption : TSqlFragment {
    private StatisticsOptionKind _optionKind;
    public StatisticsOptionKind OptionKind { get; public set; }
    public StatisticsOptionKind get_OptionKind();
    public void set_OptionKind(StatisticsOptionKind value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
internal class Microsoft.SqlServer.TransactSql.ScriptDom.StatisticsOptionHelper : OptionsHelper`1<StatisticsOptionKind> {
    internal static StatisticsOptionHelper Instance;
    private static StatisticsOptionHelper();
    protected virtual TSqlParseErrorException GetMatchingException(IToken token);
}
public enum Microsoft.SqlServer.TransactSql.ScriptDom.StatisticsOptionKind : Enum {
    public int value__;
    public static StatisticsOptionKind FullScan;
    public static StatisticsOptionKind SamplePercent;
    public static StatisticsOptionKind SampleRows;
    public static StatisticsOptionKind StatsStream;
    public static StatisticsOptionKind NoRecompute;
    public static StatisticsOptionKind Resample;
    public static StatisticsOptionKind RowCount;
    public static StatisticsOptionKind PageCount;
    public static StatisticsOptionKind All;
    public static StatisticsOptionKind Columns;
    public static StatisticsOptionKind Index;
    public static StatisticsOptionKind Rows;
    public static StatisticsOptionKind Incremental;
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.StatisticsPartitionRange : TSqlFragment {
    private IntegerLiteral _from;
    private IntegerLiteral _to;
    public IntegerLiteral From { get; public set; }
    public IntegerLiteral To { get; public set; }
    public IntegerLiteral get_From();
    public void set_From(IntegerLiteral value);
    public IntegerLiteral get_To();
    public void set_To(IntegerLiteral value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.StopListFullTextIndexOption : FullTextIndexOption {
    private bool _isOff;
    private Identifier _stopListName;
    public bool IsOff { get; public set; }
    public Identifier StopListName { get; public set; }
    public bool get_IsOff();
    public void set_IsOff(bool value);
    public Identifier get_StopListName();
    public void set_StopListName(Identifier value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.StopRestoreOption : RestoreOption {
    private ValueExpression _mark;
    private ValueExpression _after;
    private bool _isStopAt;
    public ValueExpression Mark { get; public set; }
    public ValueExpression After { get; public set; }
    public bool IsStopAt { get; public set; }
    public ValueExpression get_Mark();
    public void set_Mark(ValueExpression value);
    public ValueExpression get_After();
    public void set_After(ValueExpression value);
    public bool get_IsStopAt();
    public void set_IsStopAt(bool value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.StringLiteral : Literal {
    private bool _isNational;
    private bool _isLargeObject;
    public LiteralType LiteralType { get; }
    public bool IsNational { get; public set; }
    public bool IsLargeObject { get; public set; }
    public virtual LiteralType get_LiteralType();
    public bool get_IsNational();
    public void set_IsNational(bool value);
    public bool get_IsLargeObject();
    public void set_IsLargeObject(bool value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
internal class Microsoft.SqlServer.TransactSql.ScriptDom.StringOptimizerHintHelper : OptionsHelper`1<OptimizerHintKind> {
    internal static StringOptimizerHintHelper Instance;
    private static StringOptimizerHintHelper();
}
[FlagsAttribute]
internal enum Microsoft.SqlServer.TransactSql.ScriptDom.SubDmlFlags : Enum {
    public int value__;
    public static SubDmlFlags None;
    public static SubDmlFlags InsideSubDml;
    public static SubDmlFlags SelectNotForInsert;
    public static SubDmlFlags MergeUsing;
    public static SubDmlFlags UpdateDeleteFrom;
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.SubqueryComparisonPredicate : BooleanExpression {
    private ScalarExpression _expression;
    private BooleanComparisonType _comparisonType;
    private ScalarSubquery _subquery;
    private SubqueryComparisonPredicateType _subqueryComparisonPredicateType;
    public ScalarExpression Expression { get; public set; }
    public BooleanComparisonType ComparisonType { get; public set; }
    public ScalarSubquery Subquery { get; public set; }
    public SubqueryComparisonPredicateType SubqueryComparisonPredicateType { get; public set; }
    public ScalarExpression get_Expression();
    public void set_Expression(ScalarExpression value);
    public BooleanComparisonType get_ComparisonType();
    public void set_ComparisonType(BooleanComparisonType value);
    public ScalarSubquery get_Subquery();
    public void set_Subquery(ScalarSubquery value);
    public SubqueryComparisonPredicateType get_SubqueryComparisonPredicateType();
    public void set_SubqueryComparisonPredicateType(SubqueryComparisonPredicateType value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public enum Microsoft.SqlServer.TransactSql.ScriptDom.SubqueryComparisonPredicateType : Enum {
    public int value__;
    public static SubqueryComparisonPredicateType None;
    public static SubqueryComparisonPredicateType All;
    public static SubqueryComparisonPredicateType Any;
}
public abstract class Microsoft.SqlServer.TransactSql.ScriptDom.SymmetricKeyStatement : TSqlStatement {
    private Identifier _name;
    private List`1<CryptoMechanism> _encryptingMechanisms;
    public Identifier Name { get; public set; }
    public IList`1<CryptoMechanism> EncryptingMechanisms { get; }
    public Identifier get_Name();
    public void set_Name(Identifier value);
    public IList`1<CryptoMechanism> get_EncryptingMechanisms();
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.SystemTimePeriodDefinition : TSqlFragment {
    private Identifier _startTimeColumn;
    private Identifier _endTimeColumn;
    public Identifier StartTimeColumn { get; public set; }
    public Identifier EndTimeColumn { get; public set; }
    public Identifier get_StartTimeColumn();
    public void set_StartTimeColumn(Identifier value);
    public Identifier get_EndTimeColumn();
    public void set_EndTimeColumn(Identifier value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.SystemVersioningTableOption : TableOption {
    private OptionState _optionState;
    private OptionState _consistencyCheckEnabled;
    private SchemaObjectName _historyTable;
    private RetentionPeriodDefinition _retentionPeriod;
    public OptionState OptionState { get; public set; }
    public OptionState ConsistencyCheckEnabled { get; public set; }
    public SchemaObjectName HistoryTable { get; public set; }
    public RetentionPeriodDefinition RetentionPeriod { get; public set; }
    public OptionState get_OptionState();
    public void set_OptionState(OptionState value);
    public OptionState get_ConsistencyCheckEnabled();
    public void set_ConsistencyCheckEnabled(OptionState value);
    public SchemaObjectName get_HistoryTable();
    public void set_HistoryTable(SchemaObjectName value);
    public RetentionPeriodDefinition get_RetentionPeriod();
    public void set_RetentionPeriod(RetentionPeriodDefinition value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.TableClusteredIndexType : TableIndexType {
    private List`1<ColumnWithSortOrder> _columns;
    private bool _columnStore;
    private List`1<ColumnReferenceExpression> _orderedColumns;
    public IList`1<ColumnWithSortOrder> Columns { get; }
    public bool ColumnStore { get; public set; }
    public IList`1<ColumnReferenceExpression> OrderedColumns { get; }
    public IList`1<ColumnWithSortOrder> get_Columns();
    public bool get_ColumnStore();
    public void set_ColumnStore(bool value);
    public IList`1<ColumnReferenceExpression> get_OrderedColumns();
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.TableDataCompressionOption : TableOption {
    private DataCompressionOption _dataCompressionOption;
    public DataCompressionOption DataCompressionOption { get; public set; }
    public DataCompressionOption get_DataCompressionOption();
    public void set_DataCompressionOption(DataCompressionOption value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.TableDefinition : TSqlFragment {
    private List`1<ColumnDefinition> _columnDefinitions;
    private List`1<ConstraintDefinition> _tableConstraints;
    private List`1<IndexDefinition> _indexes;
    private SystemTimePeriodDefinition _systemTimePeriod;
    public IList`1<ColumnDefinition> ColumnDefinitions { get; }
    public IList`1<ConstraintDefinition> TableConstraints { get; }
    public IList`1<IndexDefinition> Indexes { get; }
    public SystemTimePeriodDefinition SystemTimePeriod { get; public set; }
    public IList`1<ColumnDefinition> get_ColumnDefinitions();
    public IList`1<ConstraintDefinition> get_TableConstraints();
    public IList`1<IndexDefinition> get_Indexes();
    public SystemTimePeriodDefinition get_SystemTimePeriod();
    public void set_SystemTimePeriod(SystemTimePeriodDefinition value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.TableDistributionOption : TableOption {
    private TableDistributionPolicy _value;
    public TableDistributionPolicy Value { get; public set; }
    public TableDistributionPolicy get_Value();
    public void set_Value(TableDistributionPolicy value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public abstract class Microsoft.SqlServer.TransactSql.ScriptDom.TableDistributionPolicy : TSqlFragment {
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public enum Microsoft.SqlServer.TransactSql.ScriptDom.TableElementType : Enum {
    public int value__;
    public static TableElementType NotSpecified;
    public static TableElementType Constraint;
    public static TableElementType Column;
    public static TableElementType Index;
    public static TableElementType Period;
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.TableHashDistributionPolicy : TableDistributionPolicy {
    private Identifier _distributionColumn;
    public Identifier DistributionColumn { get; public set; }
    public Identifier get_DistributionColumn();
    public void set_DistributionColumn(Identifier value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.TableHint : TSqlFragment {
    private TableHintKind _hintKind;
    public TableHintKind HintKind { get; public set; }
    public TableHintKind get_HintKind();
    public void set_HintKind(TableHintKind value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public enum Microsoft.SqlServer.TransactSql.ScriptDom.TableHintKind : Enum {
    public int value__;
    public static TableHintKind None;
    public static TableHintKind FastFirstRow;
    public static TableHintKind HoldLock;
    public static TableHintKind NoLock;
    public static TableHintKind PagLock;
    public static TableHintKind ReadCommitted;
    public static TableHintKind ReadPast;
    public static TableHintKind ReadUncommitted;
    public static TableHintKind RepeatableRead;
    public static TableHintKind Rowlock;
    public static TableHintKind Serializable;
    public static TableHintKind TabLock;
    public static TableHintKind TabLockX;
    public static TableHintKind UpdLock;
    public static TableHintKind XLock;
    public static TableHintKind NoExpand;
    public static TableHintKind NoWait;
    public static TableHintKind ReadCommittedLock;
    public static TableHintKind KeepIdentity;
    public static TableHintKind KeepDefaults;
    public static TableHintKind IgnoreConstraints;
    public static TableHintKind IgnoreTriggers;
    public static TableHintKind ForceSeek;
    public static TableHintKind Index;
    public static TableHintKind SpatialWindowMaxCells;
    public static TableHintKind ForceScan;
    public static TableHintKind Snapshot;
}
internal class Microsoft.SqlServer.TransactSql.ScriptDom.TableHintOptionsHelper : OptionsHelper`1<TableHintKind> {
    internal static TableHintOptionsHelper Instance;
    private static TableHintOptionsHelper();
    protected virtual TSqlParseErrorException GetMatchingException(IToken token);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.TableHintsOptimizerHint : OptimizerHint {
    private SchemaObjectName _objectName;
    private List`1<TableHint> _tableHints;
    public SchemaObjectName ObjectName { get; public set; }
    public IList`1<TableHint> TableHints { get; }
    public SchemaObjectName get_ObjectName();
    public void set_ObjectName(SchemaObjectName value);
    public IList`1<TableHint> get_TableHints();
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.TableIndexOption : TableOption {
    private TableIndexType _value;
    public TableIndexType Value { get; public set; }
    public TableIndexType get_Value();
    public void set_Value(TableIndexType value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public abstract class Microsoft.SqlServer.TransactSql.ScriptDom.TableIndexType : TSqlFragment {
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.TableNonClusteredIndexType : TableIndexType {
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public abstract class Microsoft.SqlServer.TransactSql.ScriptDom.TableOption : TSqlFragment {
    private TableOptionKind _optionKind;
    public TableOptionKind OptionKind { get; public set; }
    public TableOptionKind get_OptionKind();
    public void set_OptionKind(TableOptionKind value);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
internal class Microsoft.SqlServer.TransactSql.ScriptDom.TableOptionHelper : OptionsHelper`1<TableOptionKind> {
    internal static TableOptionHelper Instance;
    private static TableOptionHelper();
}
public enum Microsoft.SqlServer.TransactSql.ScriptDom.TableOptionKind : Enum {
    public int value__;
    public static TableOptionKind LockEscalation;
    public static TableOptionKind FileStreamOn;
    public static TableOptionKind DataCompression;
    public static TableOptionKind FileTableDirectory;
    public static TableOptionKind FileTableCollateFileName;
    public static TableOptionKind FileTablePrimaryKeyConstraintName;
    public static TableOptionKind FileTableStreamIdUniqueConstraintName;
    public static TableOptionKind FileTableFullPathUniqueConstraintName;
    public static TableOptionKind MemoryOptimized;
    public static TableOptionKind Durability;
    public static TableOptionKind RemoteDataArchive;
    public static TableOptionKind Distribution;
    public static TableOptionKind Partition;
    public static TableOptionKind Location;
    public static TableOptionKind DataRetention;
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.TablePartitionOption : TableOption {
    private Identifier _partitionColumn;
    private TablePartitionOptionSpecifications _partitionOptionSpecs;
    public Identifier PartitionColumn { get; public set; }
    public TablePartitionOptionSpecifications PartitionOptionSpecs { get; public set; }
    public Identifier get_PartitionColumn();
    public void set_PartitionColumn(Identifier value);
    public TablePartitionOptionSpecifications get_PartitionOptionSpecs();
    public void set_PartitionOptionSpecs(TablePartitionOptionSpecifications value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.TablePartitionOptionSpecifications : PartitionSpecifications {
    private PartitionTableOptionRange _range;
    private List`1<ScalarExpression> _boundaryValues;
    public PartitionTableOptionRange Range { get; public set; }
    public IList`1<ScalarExpression> BoundaryValues { get; }
    public PartitionTableOptionRange get_Range();
    public void set_Range(PartitionTableOptionRange value);
    public IList`1<ScalarExpression> get_BoundaryValues();
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public abstract class Microsoft.SqlServer.TransactSql.ScriptDom.TableReference : TSqlFragment {
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public abstract class Microsoft.SqlServer.TransactSql.ScriptDom.TableReferenceWithAlias : TableReference {
    private Identifier _alias;
    private bool _forPath;
    public Identifier Alias { get; public set; }
    public bool ForPath { get; public set; }
    public Identifier get_Alias();
    public void set_Alias(Identifier value);
    public bool get_ForPath();
    public void set_ForPath(bool value);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public abstract class Microsoft.SqlServer.TransactSql.ScriptDom.TableReferenceWithAliasAndColumns : TableReferenceWithAlias {
    private List`1<Identifier> _columns;
    public IList`1<Identifier> Columns { get; }
    public IList`1<Identifier> get_Columns();
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.TableReplicateDistributionPolicy : TableDistributionPolicy {
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.TableRoundRobinDistributionPolicy : TableDistributionPolicy {
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.TableSampleClause : TSqlFragment {
    private bool _system;
    private ScalarExpression _sampleNumber;
    private TableSampleClauseOption _tableSampleClauseOption;
    private ScalarExpression _repeatSeed;
    public bool System { get; public set; }
    public ScalarExpression SampleNumber { get; public set; }
    public TableSampleClauseOption TableSampleClauseOption { get; public set; }
    public ScalarExpression RepeatSeed { get; public set; }
    public bool get_System();
    public void set_System(bool value);
    public ScalarExpression get_SampleNumber();
    public void set_SampleNumber(ScalarExpression value);
    public TableSampleClauseOption get_TableSampleClauseOption();
    public void set_TableSampleClauseOption(TableSampleClauseOption value);
    public ScalarExpression get_RepeatSeed();
    public void set_RepeatSeed(ScalarExpression value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public enum Microsoft.SqlServer.TransactSql.ScriptDom.TableSampleClauseOption : Enum {
    public int value__;
    public static TableSampleClauseOption NotSpecified;
    public static TableSampleClauseOption Percent;
    public static TableSampleClauseOption Rows;
}
public abstract class Microsoft.SqlServer.TransactSql.ScriptDom.TableSwitchOption : TSqlFragment {
    private TableSwitchOptionKind _optionKind;
    public TableSwitchOptionKind OptionKind { get; public set; }
    public TableSwitchOptionKind get_OptionKind();
    public void set_OptionKind(TableSwitchOptionKind value);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public enum Microsoft.SqlServer.TransactSql.ScriptDom.TableSwitchOptionKind : Enum {
    public int value__;
    public static TableSwitchOptionKind LowPriorityLockWait;
    public static TableSwitchOptionKind TruncateTarget;
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.TableValuedFunctionReturnType : FunctionReturnType {
    private DeclareTableVariableBody _declareTableVariableBody;
    public DeclareTableVariableBody DeclareTableVariableBody { get; public set; }
    public DeclareTableVariableBody get_DeclareTableVariableBody();
    public void set_DeclareTableVariableBody(DeclareTableVariableBody value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.TargetDeclaration : TSqlFragment {
    private EventSessionObjectName _objectName;
    private List`1<EventDeclarationSetParameter> _targetDeclarationParameters;
    public EventSessionObjectName ObjectName { get; public set; }
    public IList`1<EventDeclarationSetParameter> TargetDeclarationParameters { get; }
    public EventSessionObjectName get_ObjectName();
    public void set_ObjectName(EventSessionObjectName value);
    public IList`1<EventDeclarationSetParameter> get_TargetDeclarationParameters();
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.TargetRecoveryTimeDatabaseOption : DatabaseOption {
    private Literal _recoveryTime;
    private TimeUnit _unit;
    public Literal RecoveryTime { get; public set; }
    public TimeUnit Unit { get; public set; }
    public Literal get_RecoveryTime();
    public void set_RecoveryTime(Literal value);
    public TimeUnit get_Unit();
    public void set_Unit(TimeUnit value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
internal class Microsoft.SqlServer.TransactSql.ScriptDom.TargetRecoveryTimeUnitHelper : OptionsHelper`1<TimeUnit> {
    internal static TargetRecoveryTimeUnitHelper Instance;
    private static TargetRecoveryTimeUnitHelper();
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.TemporalClause : TSqlFragment {
    private TemporalClauseType _temporalClauseType;
    private ScalarExpression _startTime;
    private ScalarExpression _endTime;
    public TemporalClauseType TemporalClauseType { get; public set; }
    public ScalarExpression StartTime { get; public set; }
    public ScalarExpression EndTime { get; public set; }
    public TemporalClauseType get_TemporalClauseType();
    public void set_TemporalClauseType(TemporalClauseType value);
    public ScalarExpression get_StartTime();
    public void set_StartTime(ScalarExpression value);
    public ScalarExpression get_EndTime();
    public void set_EndTime(ScalarExpression value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public enum Microsoft.SqlServer.TransactSql.ScriptDom.TemporalClauseType : Enum {
    public int value__;
    public static TemporalClauseType AsOf;
    public static TemporalClauseType FromTo;
    public static TemporalClauseType Between;
    public static TemporalClauseType ContainedIn;
    public static TemporalClauseType TemporalAll;
}
public enum Microsoft.SqlServer.TransactSql.ScriptDom.TemporalRetentionPeriodUnit : Enum {
    public int value__;
    public static TemporalRetentionPeriodUnit Day;
    public static TemporalRetentionPeriodUnit Days;
    public static TemporalRetentionPeriodUnit Week;
    public static TemporalRetentionPeriodUnit Weeks;
    public static TemporalRetentionPeriodUnit Month;
    public static TemporalRetentionPeriodUnit Months;
    public static TemporalRetentionPeriodUnit Year;
    public static TemporalRetentionPeriodUnit Years;
}
internal class Microsoft.SqlServer.TransactSql.ScriptDom.TemporalRetentionPeriodUnitHelper : OptionsHelper`1<TemporalRetentionPeriodUnit> {
    internal static TemporalRetentionPeriodUnitHelper Instance;
    private static TemporalRetentionPeriodUnitHelper();
}
public abstract class Microsoft.SqlServer.TransactSql.ScriptDom.TextModificationStatement : TSqlStatement {
    private bool _bulk;
    private ColumnReferenceExpression _column;
    private ValueExpression _textId;
    private Literal _timestamp;
    private bool _withLog;
    public bool Bulk { get; public set; }
    public ColumnReferenceExpression Column { get; public set; }
    public ValueExpression TextId { get; public set; }
    public Literal Timestamp { get; public set; }
    public bool WithLog { get; public set; }
    public bool get_Bulk();
    public void set_Bulk(bool value);
    public ColumnReferenceExpression get_Column();
    public void set_Column(ColumnReferenceExpression value);
    public ValueExpression get_TextId();
    public void set_TextId(ValueExpression value);
    public Literal get_Timestamp();
    public void set_Timestamp(Literal value);
    public bool get_WithLog();
    public void set_WithLog(bool value);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.ThrowStatement : TSqlStatement {
    private ValueExpression _errorNumber;
    private ValueExpression _message;
    private ValueExpression _state;
    public ValueExpression ErrorNumber { get; public set; }
    public ValueExpression Message { get; public set; }
    public ValueExpression State { get; public set; }
    public ValueExpression get_ErrorNumber();
    public void set_ErrorNumber(ValueExpression value);
    public ValueExpression get_Message();
    public void set_Message(ValueExpression value);
    public ValueExpression get_State();
    public void set_State(ValueExpression value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public enum Microsoft.SqlServer.TransactSql.ScriptDom.TimeUnit : Enum {
    public int value__;
    public static TimeUnit Seconds;
    public static TimeUnit Minutes;
    public static TimeUnit Hours;
    public static TimeUnit Days;
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.TopRowFilter : TSqlFragment {
    private ScalarExpression _expression;
    private bool _percent;
    private bool _withTies;
    public ScalarExpression Expression { get; public set; }
    public bool Percent { get; public set; }
    public bool WithTies { get; public set; }
    public ScalarExpression get_Expression();
    public void set_Expression(ScalarExpression value);
    public bool get_Percent();
    public void set_Percent(bool value);
    public bool get_WithTies();
    public void set_WithTies(bool value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public abstract class Microsoft.SqlServer.TransactSql.ScriptDom.TransactionStatement : TSqlStatement {
    private IdentifierOrValueExpression _name;
    public IdentifierOrValueExpression Name { get; public set; }
    public IdentifierOrValueExpression get_Name();
    public void set_Name(IdentifierOrValueExpression value);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.TriggerAction : TSqlFragment {
    private TriggerActionType _triggerActionType;
    private EventTypeGroupContainer _eventTypeGroup;
    public TriggerActionType TriggerActionType { get; public set; }
    public EventTypeGroupContainer EventTypeGroup { get; public set; }
    public TriggerActionType get_TriggerActionType();
    public void set_TriggerActionType(TriggerActionType value);
    public EventTypeGroupContainer get_EventTypeGroup();
    public void set_EventTypeGroup(EventTypeGroupContainer value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public enum Microsoft.SqlServer.TransactSql.ScriptDom.TriggerActionType : Enum {
    public int value__;
    public static TriggerActionType Delete;
    public static TriggerActionType Insert;
    public static TriggerActionType Update;
    public static TriggerActionType Event;
    public static TriggerActionType LogOn;
}
public enum Microsoft.SqlServer.TransactSql.ScriptDom.TriggerEnforcement : Enum {
    public int value__;
    public static TriggerEnforcement Disable;
    public static TriggerEnforcement Enable;
}
internal class Microsoft.SqlServer.TransactSql.ScriptDom.TriggerEventGroupHelper : OptionsHelper`1<EventNotificationEventGroup> {
    internal static TriggerEventGroupHelper Instance;
    private static TriggerEventGroupHelper();
}
internal class Microsoft.SqlServer.TransactSql.ScriptDom.TriggerEventTypeHelper : OptionsHelper`1<EventNotificationEventType> {
    internal static TriggerEventTypeHelper Instance;
    private static TriggerEventTypeHelper();
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.TriggerObject : TSqlFragment {
    private SchemaObjectName _name;
    private TriggerScope _triggerScope;
    public SchemaObjectName Name { get; public set; }
    public TriggerScope TriggerScope { get; public set; }
    public SchemaObjectName get_Name();
    public void set_Name(SchemaObjectName value);
    public TriggerScope get_TriggerScope();
    public void set_TriggerScope(TriggerScope value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.TriggerOption : TSqlFragment {
    private TriggerOptionKind _optionKind;
    public TriggerOptionKind OptionKind { get; public set; }
    public TriggerOptionKind get_OptionKind();
    public void set_OptionKind(TriggerOptionKind value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
internal class Microsoft.SqlServer.TransactSql.ScriptDom.TriggerOptionHelper : OptionsHelper`1<TriggerOptionKind> {
    internal static TriggerOptionHelper Instance;
    private static TriggerOptionHelper();
    protected virtual TSqlParseErrorException GetMatchingException(IToken token);
}
public enum Microsoft.SqlServer.TransactSql.ScriptDom.TriggerOptionKind : Enum {
    public int value__;
    public static TriggerOptionKind Encryption;
    public static TriggerOptionKind ExecuteAsClause;
    public static TriggerOptionKind NativeCompile;
    public static TriggerOptionKind SchemaBinding;
}
public enum Microsoft.SqlServer.TransactSql.ScriptDom.TriggerScope : Enum {
    public int value__;
    public static TriggerScope Normal;
    public static TriggerScope Database;
    public static TriggerScope AllServer;
}
public abstract class Microsoft.SqlServer.TransactSql.ScriptDom.TriggerStatementBody : TSqlStatement {
    private SchemaObjectName _name;
    private TriggerObject _triggerObject;
    private List`1<TriggerOption> _options;
    private TriggerType _triggerType;
    private List`1<TriggerAction> _triggerActions;
    private bool _withAppend;
    private bool _isNotForReplication;
    private StatementList _statementList;
    private MethodSpecifier _methodSpecifier;
    public SchemaObjectName Name { get; public set; }
    public TriggerObject TriggerObject { get; public set; }
    public IList`1<TriggerOption> Options { get; }
    public TriggerType TriggerType { get; public set; }
    public IList`1<TriggerAction> TriggerActions { get; }
    public bool WithAppend { get; public set; }
    public bool IsNotForReplication { get; public set; }
    public StatementList StatementList { get; public set; }
    public MethodSpecifier MethodSpecifier { get; public set; }
    public SchemaObjectName get_Name();
    public void set_Name(SchemaObjectName value);
    public TriggerObject get_TriggerObject();
    public void set_TriggerObject(TriggerObject value);
    public IList`1<TriggerOption> get_Options();
    public TriggerType get_TriggerType();
    public void set_TriggerType(TriggerType value);
    public IList`1<TriggerAction> get_TriggerActions();
    public bool get_WithAppend();
    public void set_WithAppend(bool value);
    public bool get_IsNotForReplication();
    public void set_IsNotForReplication(bool value);
    public StatementList get_StatementList();
    public void set_StatementList(StatementList value);
    public MethodSpecifier get_MethodSpecifier();
    public void set_MethodSpecifier(MethodSpecifier value);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public enum Microsoft.SqlServer.TransactSql.ScriptDom.TriggerType : Enum {
    public int value__;
    public static TriggerType Unknown;
    public static TriggerType For;
    public static TriggerType After;
    public static TriggerType InsteadOf;
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.TruncateTableStatement : TSqlStatement {
    private SchemaObjectName _tableName;
    private List`1<CompressionPartitionRange> _partitionRanges;
    public SchemaObjectName TableName { get; public set; }
    public IList`1<CompressionPartitionRange> PartitionRanges { get; }
    public SchemaObjectName get_TableName();
    public void set_TableName(SchemaObjectName value);
    public IList`1<CompressionPartitionRange> get_PartitionRanges();
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.TruncateTargetTableSwitchOption : TableSwitchOption {
    private bool _truncateTarget;
    public bool TruncateTarget { get; public set; }
    public bool get_TruncateTarget();
    public void set_TruncateTarget(bool value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.TryCastCall : PrimaryExpression {
    private DataTypeReference _dataType;
    private ScalarExpression _parameter;
    public DataTypeReference DataType { get; public set; }
    public ScalarExpression Parameter { get; public set; }
    public DataTypeReference get_DataType();
    public void set_DataType(DataTypeReference value);
    public ScalarExpression get_Parameter();
    public void set_Parameter(ScalarExpression value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.TryCatchStatement : TSqlStatement {
    private StatementList _tryStatements;
    private StatementList _catchStatements;
    public StatementList TryStatements { get; public set; }
    public StatementList CatchStatements { get; public set; }
    public StatementList get_TryStatements();
    public void set_TryStatements(StatementList value);
    public StatementList get_CatchStatements();
    public void set_CatchStatements(StatementList value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.TryConvertCall : PrimaryExpression {
    private DataTypeReference _dataType;
    private ScalarExpression _parameter;
    private ScalarExpression _style;
    public DataTypeReference DataType { get; public set; }
    public ScalarExpression Parameter { get; public set; }
    public ScalarExpression Style { get; public set; }
    public DataTypeReference get_DataType();
    public void set_DataType(DataTypeReference value);
    public ScalarExpression get_Parameter();
    public void set_Parameter(ScalarExpression value);
    public ScalarExpression get_Style();
    public void set_Style(ScalarExpression value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.TryParseCall : PrimaryExpression {
    private ScalarExpression _stringValue;
    private DataTypeReference _dataType;
    private ScalarExpression _culture;
    public ScalarExpression StringValue { get; public set; }
    public DataTypeReference DataType { get; public set; }
    public ScalarExpression Culture { get; public set; }
    public ScalarExpression get_StringValue();
    public void set_StringValue(ScalarExpression value);
    public DataTypeReference get_DataType();
    public void set_DataType(DataTypeReference value);
    public ScalarExpression get_Culture();
    public void set_Culture(ScalarExpression value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.TSEqualCall : BooleanExpression {
    private ScalarExpression _firstExpression;
    private ScalarExpression _secondExpression;
    public ScalarExpression FirstExpression { get; public set; }
    public ScalarExpression SecondExpression { get; public set; }
    public ScalarExpression get_FirstExpression();
    public void set_FirstExpression(ScalarExpression value);
    public ScalarExpression get_SecondExpression();
    public void set_SecondExpression(ScalarExpression value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
internal class Microsoft.SqlServer.TransactSql.ScriptDom.TSql100LexerInternal : TSqlLexerBaseInternal {
    public static int EOF;
    public static int NULL_TREE_LOOKAHEAD;
    public static int Add;
    public static int All;
    public static int Alter;
    public static int And;
    public static int Any;
    public static int As;
    public static int Asc;
    public static int Authorization;
    public static int Backup;
    public static int Begin;
    public static int Between;
    public static int Break;
    public static int Browse;
    public static int Bulk;
    public static int By;
    public static int Cascade;
    public static int Case;
    public static int Check;
    public static int Checkpoint;
    public static int Close;
    public static int Clustered;
    public static int Coalesce;
    public static int Collate;
    public static int Column;
    public static int Commit;
    public static int Compute;
    public static int Constraint;
    public static int Contains;
    public static int ContainsTable;
    public static int Continue;
    public static int Convert;
    public static int Create;
    public static int Cross;
    public static int Current;
    public static int CurrentDate;
    public static int CurrentTime;
    public static int CurrentTimestamp;
    public static int CurrentUser;
    public static int Cursor;
    public static int Database;
    public static int Dbcc;
    public static int Deallocate;
    public static int Declare;
    public static int Default;
    public static int Delete;
    public static int Deny;
    public static int Desc;
    public static int Distinct;
    public static int Distributed;
    public static int Double;
    public static int Drop;
    public static int Else;
    public static int End;
    public static int Errlvl;
    public static int Escape;
    public static int Except;
    public static int Exec;
    public static int Execute;
    public static int Exists;
    public static int Exit;
    public static int Fetch;
    public static int File;
    public static int FillFactor;
    public static int For;
    public static int Foreign;
    public static int FreeText;
    public static int FreeTextTable;
    public static int From;
    public static int Full;
    public static int Function;
    public static int GoTo;
    public static int Grant;
    public static int Group;
    public static int Having;
    public static int HoldLock;
    public static int Identity;
    public static int IdentityInsert;
    public static int IdentityColumn;
    public static int If;
    public static int In;
    public static int Index;
    public static int Inner;
    public static int Insert;
    public static int Intersect;
    public static int Into;
    public static int Is;
    public static int Join;
    public static int Key;
    public static int Kill;
    public static int Left;
    public static int Like;
    public static int LineNo;
    public static int National;
    public static int NoCheck;
    public static int NonClustered;
    public static int Not;
    public static int Null;
    public static int NullIf;
    public static int Of;
    public static int Off;
    public static int Offsets;
    public static int On;
    public static int Open;
    public static int OpenDataSource;
    public static int OpenQuery;
    public static int OpenRowSet;
    public static int OpenXml;
    public static int Option;
    public static int Or;
    public static int Order;
    public static int Outer;
    public static int Over;
    public static int Percent;
    public static int Plan;
    public static int Primary;
    public static int Print;
    public static int Proc;
    public static int Procedure;
    public static int Public;
    public static int Raiserror;
    public static int Read;
    public static int ReadText;
    public static int Reconfigure;
    public static int References;
    public static int Replication;
    public static int Restore;
    public static int Restrict;
    public static int Return;
    public static int Revoke;
    public static int Right;
    public static int Rollback;
    public static int RowCount;
    public static int RowGuidColumn;
    public static int Rule;
    public static int Save;
    public static int Schema;
    public static int Select;
    public static int SessionUser;
    public static int Set;
    public static int SetUser;
    public static int Shutdown;
    public static int Some;
    public static int Statistics;
    public static int SystemUser;
    public static int Table;
    public static int TextSize;
    public static int Then;
    public static int To;
    public static int Top;
    public static int Tran;
    public static int Transaction;
    public static int Trigger;
    public static int Truncate;
    public static int TSEqual;
    public static int Union;
    public static int Unique;
    public static int Update;
    public static int UpdateText;
    public static int Use;
    public static int User;
    public static int Values;
    public static int Varying;
    public static int View;
    public static int WaitFor;
    public static int When;
    public static int Where;
    public static int While;
    public static int With;
    public static int WriteText;
    public static int Disk;
    public static int Precision;
    public static int External;
    public static int Revert;
    public static int Pivot;
    public static int Unpivot;
    public static int TableSample;
    public static int Dump;
    public static int Load;
    public static int Merge;
    public static int StopList;
    public static int SemanticKeyPhraseTable;
    public static int SemanticSimilarityTable;
    public static int SemanticSimilarityDetailsTable;
    public static int TryConvert;
    public static int Bang;
    public static int PercentSign;
    public static int Ampersand;
    public static int LeftParenthesis;
    public static int RightParenthesis;
    public static int LeftCurly;
    public static int RightCurly;
    public static int Star;
    public static int MultiplyEquals;
    public static int Plus;
    public static int Comma;
    public static int Minus;
    public static int Dot;
    public static int Divide;
    public static int Colon;
    public static int DoubleColon;
    public static int Semicolon;
    public static int LessThan;
    public static int EqualsSign;
    public static int RightOuterJoin;
    public static int GreaterThan;
    public static int Circumflex;
    public static int VerticalLine;
    public static int Tilde;
    public static int AddEquals;
    public static int SubtractEquals;
    public static int DivideEquals;
    public static int ModEquals;
    public static int BitwiseAndEquals;
    public static int BitwiseOrEquals;
    public static int BitwiseXorEquals;
    public static int Go;
    public static int Label;
    public static int Integer;
    public static int Numeric;
    public static int Real;
    public static int HexLiteral;
    public static int Money;
    public static int SqlCommandIdentifier;
    public static int PseudoColumn;
    public static int DollarPartition;
    public static int AsciiStringOrQuotedIdentifier;
    public static int AsciiStringLiteral;
    public static int UnicodeStringLiteral;
    public static int Identifier;
    public static int QuotedIdentifier;
    public static int Variable;
    public static int OdbcInitiator;
    public static int ProcNameSemicolon;
    public static int SingleLineComment;
    public static int MultilineComment;
    public static int WhiteSpace;
    public static int Digit;
    public static int FirstLetter;
    public static int Letter;
    public static int MoneySign;
    public static int WS_CHAR_WO_NEWLINE;
    public static int Number;
    public static int Exponent;
    public static int EndOfLine;
    public static BitSet tokenSet_0_;
    public static BitSet tokenSet_1_;
    public static BitSet tokenSet_2_;
    public static BitSet tokenSet_3_;
    public static BitSet tokenSet_4_;
    public static BitSet tokenSet_5_;
    public static BitSet tokenSet_6_;
    public static BitSet tokenSet_7_;
    public static BitSet tokenSet_8_;
    public static BitSet tokenSet_9_;
    public static BitSet tokenSet_10_;
    public static BitSet tokenSet_11_;
    public static BitSet tokenSet_12_;
    public TSql100LexerInternal(Stream ins);
    public TSql100LexerInternal(TextReader r);
    public TSql100LexerInternal(InputBuffer ib);
    public TSql100LexerInternal(LexerSharedInputState state);
    private static TSql100LexerInternal();
    private void initialize();
    public virtual IToken nextToken();
    public void mBang(bool _createToken);
    public void mPercentSign(bool _createToken);
    public void mAmpersand(bool _createToken);
    public void mLeftParenthesis(bool _createToken);
    public void mRightParenthesis(bool _createToken);
    public void mLeftCurly(bool _createToken);
    public void mRightCurly(bool _createToken);
    public void mStar(bool _createToken);
    public void mMultiplyEquals(bool _createToken);
    public void mPlus(bool _createToken);
    public void mComma(bool _createToken);
    public void mMinus(bool _createToken);
    protected void mDot(bool _createToken);
    public void mDivide(bool _createToken);
    public void mColon(bool _createToken);
    public void mDoubleColon(bool _createToken);
    public void mLessThan(bool _createToken);
    public void mEqualsSign(bool _createToken);
    public void mRightOuterJoin(bool _createToken);
    public void mGreaterThan(bool _createToken);
    public void mCircumflex(bool _createToken);
    public void mVerticalLine(bool _createToken);
    public void mTilde(bool _createToken);
    public void mAddEquals(bool _createToken);
    public void mSubtractEquals(bool _createToken);
    public void mDivideEquals(bool _createToken);
    public void mModEquals(bool _createToken);
    public void mBitwiseAndEquals(bool _createToken);
    public void mBitwiseOrEquals(bool _createToken);
    public void mBitwiseXorEquals(bool _createToken);
    protected void mSemicolon(bool _createToken);
    protected void mDigit(bool _createToken);
    protected void mFirstLetter(bool _createToken);
    protected void mLetter(bool _createToken);
    protected void mMoneySign(bool _createToken);
    public void mProcNameSemicolon(bool _createToken);
    protected void mWS_CHAR_WO_NEWLINE(bool _createToken);
    public void mNumber(bool _createToken);
    public void mWhiteSpace(bool _createToken);
    protected void mEndOfLine(bool _createToken);
    public void mGo(bool _createToken);
    protected void mLabel(bool _createToken);
    protected void mInteger(bool _createToken);
    protected void mReal(bool _createToken);
    protected void mNumeric(bool _createToken);
    protected void mHexLiteral(bool _createToken);
    protected void mExponent(bool _createToken);
    protected void mMoney(bool _createToken);
    protected void mSqlCommandIdentifier(bool _createToken);
    protected void mPseudoColumn(bool _createToken);
    protected void mDollarPartition(bool _createToken);
    protected void mAsciiStringOrQuotedIdentifier(bool _createToken);
    public void mAsciiStringLiteral(bool _createToken);
    public void mUnicodeStringLiteral(bool _createToken);
    public void mIdentifier(bool _createToken);
    public void mQuotedIdentifier(bool _createToken);
    public void mVariable(bool _createToken);
    protected void mOdbcInitiator(bool _createToken);
    public void mSingleLineComment(bool _createToken);
    public void mMultilineComment(bool _createToken);
    private static Int64[] mk_tokenSet_0_();
    private static Int64[] mk_tokenSet_1_();
    private static Int64[] mk_tokenSet_2_();
    private static Int64[] mk_tokenSet_3_();
    private static Int64[] mk_tokenSet_4_();
    private static Int64[] mk_tokenSet_5_();
    private static Int64[] mk_tokenSet_6_();
    private static Int64[] mk_tokenSet_7_();
    private static Int64[] mk_tokenSet_8_();
    private static Int64[] mk_tokenSet_9_();
    private static Int64[] mk_tokenSet_10_();
    private static Int64[] mk_tokenSet_11_();
    private static Int64[] mk_tokenSet_12_();
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.TSql100Parser : TSqlParser {
    public TSql100Parser(bool initialQuotedIdentifiers);
    internal virtual TSqlLexerBaseInternal GetNewInternalLexer();
    private TSql100ParserInternal GetNewInternalParser();
    private TSql100ParserInternal GetNewInternalParserForInput(TextReader input, IList`1& errors, int startOffset, int startLine, int startColumn);
    public virtual TSqlFragment Parse(IList`1<TSqlParserToken> tokens, IList`1& errors);
    public virtual ChildObjectName ParseChildObjectName(TextReader input, IList`1& errors, int startOffset, int startLine, int startColumn);
    public virtual SchemaObjectName ParseSchemaObjectName(TextReader input, IList`1& errors, int startOffset, int startLine, int startColumn);
    public virtual DataTypeReference ParseScalarDataType(TextReader input, IList`1& errors, int startOffset, int startLine, int startColumn);
    public virtual ScalarExpression ParseExpression(TextReader input, IList`1& errors, int startOffset, int startLine, int startColumn);
    public virtual BooleanExpression ParseBooleanExpression(TextReader input, IList`1& errors, int startOffset, int startLine, int startColumn);
    public virtual StatementList ParseStatementList(TextReader input, IList`1& errors, int startOffset, int startLine, int startColumn);
    public virtual SelectStatement ParseSubQueryExpressionWithOptionalCTE(TextReader input, IList`1& errors, int startOffset, int startLine, int startColumn);
    internal IPv4 ParseIPv4(TextReader input, IList`1& errors, int startOffset, int startLine, int startColumn);
    public virtual TSqlFragment ParseConstantOrIdentifier(TextReader input, IList`1& errors, int startOffset, int startLine, int startColumn);
    public virtual TSqlFragment ParseConstantOrIdentifierWithDefault(TextReader input, IList`1& errors, int startOffset, int startLine, int startColumn);
    internal virtual TSqlStatement PhaseOneParse(TextReader input);
}
internal abstract class Microsoft.SqlServer.TransactSql.ScriptDom.TSql100ParserBaseInternal : TSql90ParserBaseInternal {
    protected TSql100ParserBaseInternal(TokenBuffer tokenBuf, int k);
    protected TSql100ParserBaseInternal(ParserSharedInputState state, int k);
    protected TSql100ParserBaseInternal(TokenStream lexer, int k);
    public TSql100ParserBaseInternal(bool initialQuotedIdentifiersOn);
    protected AutoCleanupChangeTrackingOptionDetail CreateAutoCleanupDetail(IToken firstToken, IToken lastToken, Boolean& autoCleanupEncountered);
    protected static SqlDataTypeOption ParseDataType100(string token);
    protected static void CheckBrokerPriorityParameterDuplication(int current, BrokerPriorityParameterType newOption, IToken token);
    protected static void UpdateBrokerPriorityEncounteredOptions(Int32& encountered, BrokerPriorityParameter vBrokerPriorityParameter);
    protected static void CheckBoundingBoxParameterDuplication(int current, BoundingBoxParameterType newOption, IToken token);
    protected static void UpdateBoundingBoxParameterEncounteredOptions(Int32& encountered, BoundingBoxParameter vBoundingBoxParameter);
    protected static void CheckIfValidSpatialIndexOptionValue(IndexAffectingStatement statement, IndexOption option);
    protected static void SetFileStreamStorageOption(ColumnStorageOptions storageOptions, IToken fileStreamToken, DataTypeReference columnType, IndexAffectingStatement statementType);
    protected static void SetSparseStorageOption(ColumnStorageOptions columnStorage, SparseColumnOption option, IToken token, IndexAffectingStatement statementType);
    protected static void CheckComparisonOperandForIndexFilter(ScalarExpression rightOperand, bool convertAllowed);
    protected static void CheckPartitionAllSpecifiedForIndexRebuild(PartitionSpecifier partitionSpecifier, IList`1<IndexOption> indexOptions);
    protected static void ThrowIfWrongGuidFormat(Literal literal);
    protected static void ThrowIfTooLargeAuditFileSize(Literal size, int shift);
    protected static void CheckForCellsPerObjectValueRange(Literal value);
}
internal class Microsoft.SqlServer.TransactSql.ScriptDom.TSql100ParserInternal : TSql100ParserBaseInternal {
    public static int EOF;
    public static int NULL_TREE_LOOKAHEAD;
    public static int Add;
    public static int All;
    public static int Alter;
    public static int And;
    public static int Any;
    public static int As;
    public static int Asc;
    public static int Authorization;
    public static int Backup;
    public static int Begin;
    public static int Between;
    public static int Break;
    public static int Browse;
    public static int Bulk;
    public static int By;
    public static int Cascade;
    public static int Case;
    public static int Check;
    public static int Checkpoint;
    public static int Close;
    public static int Clustered;
    public static int Coalesce;
    public static int Collate;
    public static int Column;
    public static int Commit;
    public static int Compute;
    public static int Constraint;
    public static int Contains;
    public static int ContainsTable;
    public static int Continue;
    public static int Convert;
    public static int Create;
    public static int Cross;
    public static int Current;
    public static int CurrentDate;
    public static int CurrentTime;
    public static int CurrentTimestamp;
    public static int CurrentUser;
    public static int Cursor;
    public static int Database;
    public static int Dbcc;
    public static int Deallocate;
    public static int Declare;
    public static int Default;
    public static int Delete;
    public static int Deny;
    public static int Desc;
    public static int Distinct;
    public static int Distributed;
    public static int Double;
    public static int Drop;
    public static int Else;
    public static int End;
    public static int Errlvl;
    public static int Escape;
    public static int Except;
    public static int Exec;
    public static int Execute;
    public static int Exists;
    public static int Exit;
    public static int Fetch;
    public static int File;
    public static int FillFactor;
    public static int For;
    public static int Foreign;
    public static int FreeText;
    public static int FreeTextTable;
    public static int From;
    public static int Full;
    public static int Function;
    public static int GoTo;
    public static int Grant;
    public static int Group;
    public static int Having;
    public static int HoldLock;
    public static int Identity;
    public static int IdentityInsert;
    public static int IdentityColumn;
    public static int If;
    public static int In;
    public static int Index;
    public static int Inner;
    public static int Insert;
    public static int Intersect;
    public static int Into;
    public static int Is;
    public static int Join;
    public static int Key;
    public static int Kill;
    public static int Left;
    public static int Like;
    public static int LineNo;
    public static int National;
    public static int NoCheck;
    public static int NonClustered;
    public static int Not;
    public static int Null;
    public static int NullIf;
    public static int Of;
    public static int Off;
    public static int Offsets;
    public static int On;
    public static int Open;
    public static int OpenDataSource;
    public static int OpenQuery;
    public static int OpenRowSet;
    public static int OpenXml;
    public static int Option;
    public static int Or;
    public static int Order;
    public static int Outer;
    public static int Over;
    public static int Percent;
    public static int Plan;
    public static int Primary;
    public static int Print;
    public static int Proc;
    public static int Procedure;
    public static int Public;
    public static int Raiserror;
    public static int Read;
    public static int ReadText;
    public static int Reconfigure;
    public static int References;
    public static int Replication;
    public static int Restore;
    public static int Restrict;
    public static int Return;
    public static int Revoke;
    public static int Right;
    public static int Rollback;
    public static int RowCount;
    public static int RowGuidColumn;
    public static int Rule;
    public static int Save;
    public static int Schema;
    public static int Select;
    public static int SessionUser;
    public static int Set;
    public static int SetUser;
    public static int Shutdown;
    public static int Some;
    public static int Statistics;
    public static int SystemUser;
    public static int Table;
    public static int TextSize;
    public static int Then;
    public static int To;
    public static int Top;
    public static int Tran;
    public static int Transaction;
    public static int Trigger;
    public static int Truncate;
    public static int TSEqual;
    public static int Union;
    public static int Unique;
    public static int Update;
    public static int UpdateText;
    public static int Use;
    public static int User;
    public static int Values;
    public static int Varying;
    public static int View;
    public static int WaitFor;
    public static int When;
    public static int Where;
    public static int While;
    public static int With;
    public static int WriteText;
    public static int Disk;
    public static int Precision;
    public static int External;
    public static int Revert;
    public static int Pivot;
    public static int Unpivot;
    public static int TableSample;
    public static int Dump;
    public static int Load;
    public static int Merge;
    public static int StopList;
    public static int SemanticKeyPhraseTable;
    public static int SemanticSimilarityTable;
    public static int SemanticSimilarityDetailsTable;
    public static int TryConvert;
    public static int Bang;
    public static int PercentSign;
    public static int Ampersand;
    public static int LeftParenthesis;
    public static int RightParenthesis;
    public static int LeftCurly;
    public static int RightCurly;
    public static int Star;
    public static int MultiplyEquals;
    public static int Plus;
    public static int Comma;
    public static int Minus;
    public static int Dot;
    public static int Divide;
    public static int Colon;
    public static int DoubleColon;
    public static int Semicolon;
    public static int LessThan;
    public static int EqualsSign;
    public static int RightOuterJoin;
    public static int GreaterThan;
    public static int Circumflex;
    public static int VerticalLine;
    public static int Tilde;
    public static int AddEquals;
    public static int SubtractEquals;
    public static int DivideEquals;
    public static int ModEquals;
    public static int BitwiseAndEquals;
    public static int BitwiseOrEquals;
    public static int BitwiseXorEquals;
    public static int Go;
    public static int Label;
    public static int Integer;
    public static int Numeric;
    public static int Real;
    public static int HexLiteral;
    public static int Money;
    public static int SqlCommandIdentifier;
    public static int PseudoColumn;
    public static int DollarPartition;
    public static int AsciiStringOrQuotedIdentifier;
    public static int AsciiStringLiteral;
    public static int UnicodeStringLiteral;
    public static int Identifier;
    public static int QuotedIdentifier;
    public static int Variable;
    public static int OdbcInitiator;
    public static int ProcNameSemicolon;
    public static int SingleLineComment;
    public static int MultilineComment;
    public static int WhiteSpace;
    public static String[] tokenNames_;
    public static BitSet tokenSet_0_;
    public static BitSet tokenSet_1_;
    public static BitSet tokenSet_2_;
    public static BitSet tokenSet_3_;
    public static BitSet tokenSet_4_;
    public static BitSet tokenSet_5_;
    public static BitSet tokenSet_6_;
    public static BitSet tokenSet_7_;
    public static BitSet tokenSet_8_;
    public static BitSet tokenSet_9_;
    public static BitSet tokenSet_10_;
    public static BitSet tokenSet_11_;
    public static BitSet tokenSet_12_;
    public static BitSet tokenSet_13_;
    public static BitSet tokenSet_14_;
    public static BitSet tokenSet_15_;
    public static BitSet tokenSet_16_;
    public static BitSet tokenSet_17_;
    public static BitSet tokenSet_18_;
    public static BitSet tokenSet_19_;
    public static BitSet tokenSet_20_;
    public static BitSet tokenSet_21_;
    public static BitSet tokenSet_22_;
    public static BitSet tokenSet_23_;
    public static BitSet tokenSet_24_;
    public static BitSet tokenSet_25_;
    public static BitSet tokenSet_26_;
    public static BitSet tokenSet_27_;
    public static BitSet tokenSet_28_;
    public static BitSet tokenSet_29_;
    public static BitSet tokenSet_30_;
    public static BitSet tokenSet_31_;
    public static BitSet tokenSet_32_;
    public static BitSet tokenSet_33_;
    public static BitSet tokenSet_34_;
    public static BitSet tokenSet_35_;
    public static BitSet tokenSet_36_;
    public static BitSet tokenSet_37_;
    public static BitSet tokenSet_38_;
    public static BitSet tokenSet_39_;
    public static BitSet tokenSet_40_;
    public static BitSet tokenSet_41_;
    public static BitSet tokenSet_42_;
    public static BitSet tokenSet_43_;
    public static BitSet tokenSet_44_;
    public static BitSet tokenSet_45_;
    public static BitSet tokenSet_46_;
    public static BitSet tokenSet_47_;
    public static BitSet tokenSet_48_;
    public static BitSet tokenSet_49_;
    public static BitSet tokenSet_50_;
    public static BitSet tokenSet_51_;
    public static BitSet tokenSet_52_;
    public static BitSet tokenSet_53_;
    public static BitSet tokenSet_54_;
    public static BitSet tokenSet_55_;
    public static BitSet tokenSet_56_;
    public static BitSet tokenSet_57_;
    public static BitSet tokenSet_58_;
    public static BitSet tokenSet_59_;
    public static BitSet tokenSet_60_;
    public static BitSet tokenSet_61_;
    public static BitSet tokenSet_62_;
    public static BitSet tokenSet_63_;
    public static BitSet tokenSet_64_;
    public static BitSet tokenSet_65_;
    public static BitSet tokenSet_66_;
    public static BitSet tokenSet_67_;
    public static BitSet tokenSet_68_;
    public static BitSet tokenSet_69_;
    public static BitSet tokenSet_70_;
    public static BitSet tokenSet_71_;
    public static BitSet tokenSet_72_;
    public static BitSet tokenSet_73_;
    public static BitSet tokenSet_74_;
    public static BitSet tokenSet_75_;
    public static BitSet tokenSet_76_;
    public static BitSet tokenSet_77_;
    public static BitSet tokenSet_78_;
    public static BitSet tokenSet_79_;
    public static BitSet tokenSet_80_;
    public static BitSet tokenSet_81_;
    public static BitSet tokenSet_82_;
    public static BitSet tokenSet_83_;
    public static BitSet tokenSet_84_;
    public static BitSet tokenSet_85_;
    public static BitSet tokenSet_86_;
    public static BitSet tokenSet_87_;
    public static BitSet tokenSet_88_;
    public static BitSet tokenSet_89_;
    public static BitSet tokenSet_90_;
    public static BitSet tokenSet_91_;
    public static BitSet tokenSet_92_;
    public static BitSet tokenSet_93_;
    public static BitSet tokenSet_94_;
    public static BitSet tokenSet_95_;
    public static BitSet tokenSet_96_;
    public static BitSet tokenSet_97_;
    public static BitSet tokenSet_98_;
    public static BitSet tokenSet_99_;
    public static BitSet tokenSet_100_;
    public static BitSet tokenSet_101_;
    public static BitSet tokenSet_102_;
    public static BitSet tokenSet_103_;
    public static BitSet tokenSet_104_;
    public static BitSet tokenSet_105_;
    public static BitSet tokenSet_106_;
    public static BitSet tokenSet_107_;
    public static BitSet tokenSet_108_;
    public static BitSet tokenSet_109_;
    public static BitSet tokenSet_110_;
    public static BitSet tokenSet_111_;
    public static BitSet tokenSet_112_;
    public static BitSet tokenSet_113_;
    public static BitSet tokenSet_114_;
    public static BitSet tokenSet_115_;
    public static BitSet tokenSet_116_;
    public static BitSet tokenSet_117_;
    public static BitSet tokenSet_118_;
    public static BitSet tokenSet_119_;
    public static BitSet tokenSet_120_;
    public static BitSet tokenSet_121_;
    public static BitSet tokenSet_122_;
    public static BitSet tokenSet_123_;
    public static BitSet tokenSet_124_;
    public static BitSet tokenSet_125_;
    public static BitSet tokenSet_126_;
    public static BitSet tokenSet_127_;
    public static BitSet tokenSet_128_;
    public static BitSet tokenSet_129_;
    public static BitSet tokenSet_130_;
    public static BitSet tokenSet_131_;
    public static BitSet tokenSet_132_;
    public static BitSet tokenSet_133_;
    public static BitSet tokenSet_134_;
    public static BitSet tokenSet_135_;
    public static BitSet tokenSet_136_;
    public static BitSet tokenSet_137_;
    public static BitSet tokenSet_138_;
    public static BitSet tokenSet_139_;
    public static BitSet tokenSet_140_;
    public static BitSet tokenSet_141_;
    public static BitSet tokenSet_142_;
    public static BitSet tokenSet_143_;
    public static BitSet tokenSet_144_;
    public static BitSet tokenSet_145_;
    public static BitSet tokenSet_146_;
    public static BitSet tokenSet_147_;
    public static BitSet tokenSet_148_;
    public static BitSet tokenSet_149_;
    public static BitSet tokenSet_150_;
    public static BitSet tokenSet_151_;
    public static BitSet tokenSet_152_;
    public static BitSet tokenSet_153_;
    public static BitSet tokenSet_154_;
    public static BitSet tokenSet_155_;
    public static BitSet tokenSet_156_;
    public static BitSet tokenSet_157_;
    public static BitSet tokenSet_158_;
    public static BitSet tokenSet_159_;
    public static BitSet tokenSet_160_;
    public TSql100ParserInternal(bool initialQuotedIdentifiersOn);
    protected TSql100ParserInternal(TokenBuffer tokenBuf, int k);
    public TSql100ParserInternal(TokenBuffer tokenBuf);
    protected TSql100ParserInternal(TokenStream lexer, int k);
    public TSql100ParserInternal(TokenStream lexer);
    public TSql100ParserInternal(ParserSharedInputState state);
    private static TSql100ParserInternal();
    protected void initialize();
    public ChildObjectName entryPointChildObjectName();
    public ChildObjectName childObjectNameWithThreePrefixes();
    public SchemaObjectName entryPointSchemaObjectName();
    public SchemaObjectName schemaObjectFourPartName();
    public DataTypeReference entryPointScalarDataType();
    public DataTypeReference scalarDataType();
    public ScalarExpression entryPointExpression();
    public ScalarExpression expression();
    public BooleanExpression entryPointBooleanExpression();
    public BooleanExpression booleanExpression();
    public StatementList entryPointStatementList();
    public StatementList statementList(Boolean& vParseErrorOccurred);
    public SelectStatement entryPointSubqueryExpressionWithOptionalCTE();
    public SelectFunctionReturnType functionReturnClauseRelational();
    public IPv4 entryPointIPv4Address();
    public IPv4 ipAddressV4();
    public TSqlFragment entryPointConstantOrIdentifier();
    public ScalarExpression possibleNegativeConstantOrIdentifier();
    public TSqlFragment entryPointConstantOrIdentifierWithDefault();
    public ScalarExpression possibleNegativeConstantOrIdentifierWithDefault();
    public TSqlScript script();
    public TSqlBatch batch();
    public TSqlStatement lastStatementOptSemi();
    public ExecuteStatement optSimpleExecute();
    public TSqlStatement statementOptSemi();
    public TSqlStatement statement();
    public void optSemicolons(TSqlStatement vParent);
    public TSqlStatement lastStatement();
    public ExecutableProcedureReference execProc();
    public CreateTableStatement createTableStatement();
    public AlterTableStatement alterTableStatement();
    public CreateIndexStatement createIndexStatement();
    public TSqlStatement declareStatements();
    public TSqlStatement setStatements();
    public TSqlStatement beginStatements();
    public BreakStatement breakStatement();
    public ContinueStatement continueStatement();
    public IfStatement ifStatement();
    public WhileStatement whileStatement();
    public LabelStatement labelStatement();
    public TSqlStatement backupStatements();
    public TSqlStatement restoreStatements();
    public GoToStatement gotoStatement();
    public SaveTransactionStatement saveTransactionStatement();
    public RollbackTransactionStatement rollbackTransactionStatement();
    public CommitTransactionStatement commitTransactionStatement();
    public CreateStatisticsStatement createStatisticsStatement();
    public UpdateStatisticsStatement updateStatisticsStatement();
    public TSqlStatement alterDatabaseStatements();
    public ExecuteStatement executeStatement();
    public StatementWithCtesAndXmlNamespaces withCommonTableExpressionsAndXmlNamespacesStatements();
    public TSqlStatement raiseErrorStatements();
    public TSqlStatement alter2005Statements();
    public TSqlStatement create2005Statements();
    public TSqlStatement createDatabaseStatements();
    public AddSignatureStatement addSignatureStatement();
    public TSqlStatement identifierStatements();
    public PrintStatement printStatement();
    public WaitForStatement waitForStatement();
    public ReadTextStatement readTextStatement();
    public UpdateTextStatement updateTextStatement();
    public WriteTextStatement writeTextStatement();
    public LineNoStatement lineNoStatement();
    public UseStatement useStatement();
    public TSqlStatement killStatements();
    public BulkInsertStatement bulkInsertStatement();
    public InsertBulkStatement insertBulkStatement();
    public CheckpointStatement checkpointStatement();
    public ReconfigureStatement reconfigureStatement();
    public ShutdownStatement shutdownStatement();
    public SetUserStatement setUserStatement();
    public TruncateTableStatement truncateTableStatement();
    public GrantStatement grantStatement90();
    public DenyStatement denyStatement90();
    public RevokeStatement revokeStatement90();
    public ReturnStatement returnStatement();
    public TSqlStatement openStatements();
    public TSqlStatement closeStatements();
    public DeallocateCursorStatement deallocateCursorStatement();
    public FetchCursorStatement fetchCursorStatement();
    public TSqlStatement dropStatements();
    public DbccStatement dbccStatement();
    public RevertStatement revertStatement();
    public ExecuteAsStatement executeAsStatement();
    public EndConversationStatement endConversationStatement();
    public WithCtesAndXmlNamespaces withCommonTableExpressionsAndXmlNamespaces();
    public SelectStatement select(SubDmlFlags subDmlFlags);
    public DeleteStatement deleteStatement(SubDmlFlags subDmlFlags);
    public InsertStatement insertStatement(SubDmlFlags subDmlFlags);
    public UpdateStatement updateStatement(SubDmlFlags subDmlFlags);
    public MergeStatement mergeStatement(SubDmlFlags subDmlFlags);
    public CreateProcedureStatement createProcedureStatement();
    public AlterProcedureStatement alterProcedureStatement();
    public CreateTriggerStatement createTriggerStatement();
    public AlterTriggerStatement alterTriggerStatement();
    public CreateDefaultStatement createDefaultStatement();
    public CreateRuleStatement createRuleStatement();
    public CreateViewStatement createViewStatement();
    public AlterViewStatement alterViewStatement();
    public CreateFunctionStatement createFunctionStatement();
    public AlterFunctionStatement alterFunctionStatement();
    public CreateSchemaStatement createSchemaStatement();
    public EnableDisableTriggerStatement disableTriggerStatement();
    public EnableDisableTriggerStatement enableTriggerStatement();
    public MoveConversationStatement moveConversationStatement();
    public GetConversationGroupStatement getConversationGroupStatement();
    public ReceiveStatement receiveStatement();
    public SendStatement sendStatement();
    public void enableDisableTriggerBody(EnableDisableTriggerStatement vParent);
    public SchemaObjectName schemaObjectThreePartName();
    public TriggerObject triggerObject();
    public CreateAggregateStatement createAggregateStatement();
    public CreateApplicationRoleStatement createApplicationRoleStatement();
    public CreateAssemblyStatement createAssemblyStatement();
    public CreateAsymmetricKeyStatement createAsymmetricKeyStatement();
    public CreateBrokerPriorityStatement createBrokerPriorityStatement();
    public CreateCertificateStatement createCertificateStatement();
    public CreateContractStatement createContractStatement();
    public CreateCredentialStatement createCredentialStatement();
    public CreateCryptographicProviderStatement createCryptographicProviderStatement();
    public CreateEndpointStatement createEndpointStatement();
    public TSqlStatement createEventStatement();
    public TSqlStatement createFulltextStatement();
    public CreateXmlIndexStatement createPrimaryXmlIndexStatement();
    public TSqlStatement createXmlStatements();
    public CreateLoginStatement createLoginStatement();
    public CreateMessageTypeStatement createMessageTypeStatement();
    public CreateMasterKeyStatement createMasterKeyStatement();
    public TSqlStatement createPartitionStatement();
    public CreateQueueStatement createQueueStatement();
    public CreateRemoteServiceBindingStatement createRemoteServiceBindingStatement();
    public CreateResourcePoolStatement createResourcePoolStatement();
    public CreateRoleStatement createRoleStatement();
    public CreateRouteStatement createRouteStatement();
    public CreateServiceStatement createServiceStatement();
    public CreateSpatialIndexStatement createSpatialIndexStatement();
    public CreateSymmetricKeyStatement createSymmetricKeyStatement();
    public CreateSynonymStatement createSynonymStatement();
    public CreateTypeStatement createTypeStatement();
    public TSqlStatement createServerAuditStatements();
    public CreateWorkloadGroupStatement createWorkloadGroupStatement();
    public CreateUserStatement createUserStatement();
    public ProcedureParameter aggregateParameter();
    public AssemblyName assemblyName();
    public Identifier identifierVariable();
    public void applicationRoleStatement(ApplicationRoleStatement vParent, bool defaultSchemaAndPasswordOnly);
    public Identifier identifier();
    public void authorizationOpt(IAuthorization vParent);
    public void expressionList(TSqlFragment vParent, IList`1<ScalarExpression> expressions);
    public PermissionSetAssemblyOption assemblyPermissionSetOption(IToken tPermissionSetVisibility);
    public void createAsymmetricKeyParams(CreateAsymmetricKeyStatement vParent);
    public Literal encryptClause();
    public EncryptionSource asymKeySource();
    public void asymKeySpec(CreateAsymmetricKeyStatement vParent);
    public FileEncryptionSource fileEncryptionSource();
    public AssemblyEncryptionSource assemblyEncryptionSource();
    public ProviderEncryptionSource providerEncryptionSource();
    public void providerKeySourceOptions(IList`1<KeyOption> optionsList, TSqlFragment vParent);
    public StringLiteral stringLiteral();
    public void createCertificateParams(CreateCertificateStatement vParent);
    public void createCertificateActivityFlag(CertificateStatementBase vParent);
    public void certificateSource(CreateCertificateStatement vParent);
    public CertificateOption certificateOption(CertificateOptionKinds encountered);
    public OptionState optionOnOff(TSqlFragment vParent);
    public void privateKeySpec(CertificateStatementBase vParent);
    public void certificatePrivateKeySpec(CertificateStatementBase vParent);
    public void passwordChangeOption(IPasswordChangeOption vParent);
    public ContractMessage contractMessage();
    public void credentialStatementBody(CredentialStatement vParent);
    public CreateServerAuditSpecificationStatement createServerAuditSpecificationStatement();
    public CreateServerAuditStatement createServerAuditStatement();
    public AuditTarget auditTargetClause(bool filePathRequired);
    public void auditCreateWithClause(ServerAuditStatement vParent);
    public AuditTargetOption auditFileOption();
    public MaxSizeAuditTargetOption maxSizeAuditFileOption();
    public MaxRolloverFilesAuditTargetOption maxRolloverFilesAuditFileOption();
    public OnOffAuditTargetOption reserveDiskSpaceAuditFileOption();
    public LiteralAuditTargetOption filePathAuditFileOption();
    public IntegerLiteral integer();
    public AuditOption auditCreateOption();
    public void auditWithClause(ServerAuditStatement vParent);
    public AuditOption auditOption();
    public QueueDelayAuditOption queueDelayAuditOption(IToken tOption);
    public OnFailureAuditOption onFailureAuditOption(IToken tOption);
    public AuditGuidAuditOption auditGuidAuditOption(IToken tOption);
    public StateAuditOption stateAuditOption(IToken tOption);
    public void auditSpecificationForClause(AuditSpecificationStatement vParent);
    public AuditSpecificationPart createAuditSpecificationDetail();
    public void auditSpecificationStateOpt(AuditSpecificationStatement vParent);
    public TSqlStatement alterServerStatements();
    public TSqlStatement alterServerAuditStatements();
    public AlterServerConfigurationStatement alterServerConfigurationStatement();
    public AlterServerAuditSpecificationStatement alterServerAuditSpecificationStatement();
    public AlterServerAuditStatement alterServerAuditStatement();
    public AuditSpecificationPart auditSpecificationDetail();
    public void affinityRangeList(AlterServerConfigurationStatement vParent);
    public ProcessAffinityRange affinityRange();
    public AlterDatabaseAuditSpecificationStatement alterDatabaseAuditSpecification(IToken tAlter);
    public AlterDatabaseStatement alterDatabase(IToken tAlter);
    public AlterDatabaseEncryptionKeyStatement alterDatabaseEncryptionKey(IToken tAlter);
    public SqlCommandIdentifier sqlCommandIdentifier();
    public AlterDatabaseStatement alterDbAdd();
    public AlterDatabaseStatement alterDbRemove();
    public AlterDatabaseStatement alterDbModify();
    public AlterDatabaseSetStatement alterDbSet();
    public AlterDatabaseCollateStatement alterDbCollate();
    public AlterDatabaseRebuildLogStatement alterDbRebuild();
    public void collation(ICollationSetter vParent);
    public FileDeclaration fileDecl(bool isAlterDbModifyFileStatement);
    public AlterDatabaseAddFileStatement alterDbAddFile();
    public AlterDatabaseAddFileGroupStatement alterDbAddFilegroup();
    public void fileDeclBodyList(TSqlFragment vParent, IList`1<FileDeclaration> fileDeclarations);
    public Identifier toFilegroup();
    public AlterDatabaseModifyFileGroupStatement alterDbModifyFilegroup();
    public AlterDatabaseModifyFileStatement alterDbModifyFile();
    public AlterDatabaseTermination xactTermination();
    public AlterDatabaseSetStatement dbOptionStateList();
    public DatabaseOption dbOptionStateItem();
    public CursorDefaultDatabaseOption cursorDefaultDbOption();
    public RecoveryDatabaseOption recoveryDbOption();
    public PageVerifyDatabaseOption pageVerifyDbOption();
    public PartnerDatabaseOption partnerOption();
    public WitnessDatabaseOption witnessOption();
    public ParameterizationDatabaseOption parameterizationOption();
    public LiteralDatabaseOption compatibilityLevelDbOption();
    public ChangeTrackingDatabaseOption changeTrackingDbOption();
    public DatabaseOption dbSingleIdentOption();
    public OnOffDatabaseOption alterDbOnOffOption();
    public void changeTrackingOnOptions(ChangeTrackingDatabaseOption vParent);
    public ChangeTrackingOptionDetail changeTrackingOneOption(Boolean& autoCleanupEncountered, Boolean& changeRetentionEncountered);
    public AuditSpecificationPart auditSpecificationDetailDb();
    public CryptoMechanism dekEncryptor();
    public CreateDatabaseAuditSpecificationStatement createDatabaseAuditSpecification();
    public CreateDatabaseStatement createDatabase();
    public CreateDatabaseEncryptionKeyStatement createDatabaseEncryptionKey();
    public void recoveryUnitList(CreateDatabaseStatement vParent);
    public void collationOpt(ICollationSetter vParent);
    public void dbAddendums(CreateDatabaseStatement vParent);
    public void withTrustOptionsOnOff(CreateDatabaseStatement vParent);
    public void onDisk(CreateDatabaseStatement vParent);
    public FileGroupDefinition fileGroupDecl();
    public FileDeclaration fileDeclBody(bool isAlterDbModifyFileStatement);
    public FileDeclarationOption fileOption(bool newNameAllowed);
    public NameFileDeclarationOption nameFileOption();
    public FileNameFileDeclarationOption fileNameFileOption();
    public SizeFileDeclarationOption sizeFileOption();
    public MaxSizeFileDeclarationOption maxSizeFileOption();
    public FileGrowthFileDeclarationOption fileGrowthFileOption();
    public NameFileDeclarationOption newNameFileOption();
    public FileDeclarationOption offlineFileOption();
    public IdentifierOrValueExpression nonEmptyStringOrIdentifier();
    public StringLiteral nonEmptyString();
    public MemoryUnit memUnit();
    public DatabaseOption createDbOption();
    public DatabaseOption createDbServiceBrokerOption();
    public OnOffDatabaseOption createDbOnOffOption();
    public AuditSpecificationPart createAuditSpecificationDetailDb();
    public AuditActionSpecification auditActionSpecification();
    public AuditActionGroupReference databaseAuditActionGroup();
    public AuditActionGroupReference serverAuditActionGroup();
    public DatabaseAuditAction actionWithQual();
    public SecurityTargetObject securityTargetObject(bool vColumnsDisallowed);
    public SecurityPrincipal principal();
    public BackupCertificateStatement backupCertificateStatement();
    public BackupServiceMasterKeyStatement backupServiceMasterKeyStatement();
    public BackupMasterKeyStatement backupMasterKeyStatement();
    public BackupStatement backupStatement();
    public BackupStatement backupMain();
    public void backupDevices(BackupStatement vParent);
    public void backupOptions(BackupStatement vParent);
    public RestoreServiceMasterKeyStatement restoreServiceMasterKeyStatement();
    public RestoreMasterKeyStatement restoreMasterKeyStatement();
    public RestoreStatement restoreStatement();
    public void restoreMain(RestoreStatement vParent);
    public void devList(TSqlFragment vParent, IList`1<DeviceInfo> deviceInfos);
    public void restoreOptions(RestoreStatement vParent);
    public BackupDatabaseStatement backupDatabase();
    public BackupTransactionLogStatement backupTransactionLog();
    public IdentifierOrValueExpression identifierOrVariable();
    public void backupFileListOpt(BackupDatabaseStatement vParent);
    public BackupRestoreFileInfo backupRestoreFile();
    public void restoreFileListOpt(RestoreStatement vParent);
    public ValueExpression stringOrVariable();
    public void backupRestoreFileNameList(BackupRestoreFileInfo vParent);
    public MirrorToClause mirrorTo();
    public DeviceInfo deviceInfo();
    public BackupOption backupOption();
    public ScalarExpression signedIntegerOrVariable();
    public void restoreOptionsList(RestoreStatement vParent);
    public RestoreOption restoreOption();
    public RestoreOption simpleRestoreOption();
    public ValueExpression afterClause();
    public ScalarExpression signedInteger();
    public MoveRestoreOption moveRestoreOption();
    public ScalarExpressionRestoreOption fileRestoreOption();
    public void backupMasterKeyBody(BackupRestoreMasterKeyStatementBase vParent);
    public void restoreMasterKeyBody(BackupRestoreMasterKeyStatementBase vParent);
    public IdentifierOrValueExpression bulkInsertFrom();
    public void bulkInsertOptions(BulkInsertStatement vParent);
    public IdentifierOrValueExpression stringOrIdentifier();
    public BulkInsertOption bulkInsertOption();
    public OrderBulkInsertOption bulkInsertSortOrderOption();
    public LiteralBulkInsertOption simpleBulkInsertOptionWithValue();
    public BulkInsertOption simpleBulkInsertOptionNoValue();
    public BulkInsertOption insertBulkOption();
    public BulkInsertOption simpleInsertBulkOption();
    public Literal integerOrNumeric();
    public void coldefList(InsertBulkStatement vParent);
    public void insertBulkOptions(InsertBulkStatement vParent);
    public InsertBulkColumnDefinition coldefItem();
    public ColumnDefinitionBase columnDefinitionEx();
    public bool nullNotNull(TSqlFragment vParent);
    public ColumnWithSortOrder columnWithSortOrder();
    public OrderBulkInsertOption openRowsetBulkOrderHint();
    public void dbccNamedLiteralList(DbccStatement vParent);
    public void dbccOptions(DbccStatement vParent);
    public void dbccOptionsList(DbccStatement vParent);
    public void dbccOptionsListItems(DbccStatement vParent);
    public void dbccOptionsJoin(DbccStatement vParent);
    public DbccOption dbccOption();
    public DbccOption dbccJoinOption();
    public DbccNamedLiteral dbccNamedLiteral();
    public void endpointOptions(AlterCreateEndpointStatementBase vParent);
    public void protocolInfo(AlterCreateEndpointStatementBase vParent);
    public void payloadInfo(AlterCreateEndpointStatementBase vParent);
    public void endpointOption(AlterCreateEndpointStatementBase vParent);
    public void endpointState(AlterCreateEndpointStatementBase vParent);
    public void endpointAffinity(AlterCreateEndpointStatementBase vParent);
    public EndpointProtocolOption protocolOptionsItem(EndpointProtocol protocol, EndpointProtocolOptions encountered);
    public ListenerIPEndpointProtocolOption listenerIpProtocolOption(EndpointProtocol protocol, EndpointProtocolOptions encountered);
    public LiteralEndpointProtocolOption listenerPortProtocolOption(EndpointProtocol protocol, EndpointProtocolOptions encountered);
    public LiteralEndpointProtocolOption pathProtocolOption(EndpointProtocol protocol, EndpointProtocolOptions encountered);
    public LiteralEndpointProtocolOption siteProtocolOption(EndpointProtocol protocol, EndpointProtocolOptions encountered);
    public LiteralEndpointProtocolOption clearPortProtocolOption(EndpointProtocol protocol, EndpointProtocolOptions encountered);
    public LiteralEndpointProtocolOption sslPortProtocolOption(EndpointProtocol protocol, EndpointProtocolOptions encountered);
    public AuthenticationEndpointProtocolOption authenticationProtocolOption(EndpointProtocol protocol, EndpointProtocolOptions encountered);
    public PortsEndpointProtocolOption portsProtocolOption(EndpointProtocol protocol, EndpointProtocolOptions encountered);
    public LiteralEndpointProtocolOption authenticationRealmProtocolOption(EndpointProtocol protocol, EndpointProtocolOptions encountered);
    public LiteralEndpointProtocolOption defaultLogonDomainProtocolOption(EndpointProtocol protocol, EndpointProtocolOptions encountered);
    public CompressionEndpointProtocolOption compressionProtocolOption(EndpointProtocol protocol, EndpointProtocolOptions encountered);
    public void ipV4DotNumberTail(IPv4 vParent);
    public void ipV4DotLastTwoPartsTail(IPv4 vParent);
    public void ipV4NumericOrNumericIntegerTail(IPv4 vParent);
    public PayloadOption payloadOption(EndpointType type, PayloadOptionKinds encountered);
    public SoapMethod soapMethod(EndpointType type, PayloadOptionKinds encountered);
    public EnabledDisabledPayloadOption batchesPayloadOption(EndpointType type, PayloadOptionKinds encountered);
    public WsdlPayloadOption wsdlPayloadOption(EndpointType type, PayloadOptionKinds encountered);
    public EnabledDisabledPayloadOption sessionsPayloadOption(EndpointType type, PayloadOptionKinds encountered);
    public LoginTypePayloadOption loginTypePayloadOption(EndpointType type, PayloadOptionKinds encountered);
    public SessionTimeoutPayloadOption sessionTimeoutPayloadOption(EndpointType type, PayloadOptionKinds encountered);
    public LiteralPayloadOption databasePayloadOption(EndpointType type, PayloadOptionKinds encountered);
    public LiteralPayloadOption namespacePayloadOption(EndpointType type, PayloadOptionKinds encountered);
    public SchemaPayloadOption schemaPayloadOption(EndpointType type, PayloadOptionKinds encountered);
    public CharacterSetPayloadOption characterSetPayloadOption(EndpointType type, PayloadOptionKinds encountered);
    public LiteralPayloadOption headerLimitPayloadOption(EndpointType type, PayloadOptionKinds encountered);
    public AuthenticationPayloadOption authenticationPayloadOption(EndpointType type, PayloadOptionKinds encountered);
    public EncryptionPayloadOption encryptionPayloadOption(EndpointType type, PayloadOptionKinds encountered);
    public EnabledDisabledPayloadOption messageForwardingPayloadOption(EndpointType type, PayloadOptionKinds encountered);
    public LiteralPayloadOption messageForwardSizePayloadOption(EndpointType type, PayloadOptionKinds encountered);
    public RolePayloadOption rolePayloadOption(EndpointType type, PayloadOptionKinds encountered);
    public void enabledDisabled(EnabledDisabledPayloadOption vParent);
    public DefaultLiteral defaultLiteral();
    public void soapMethodAlias(SoapMethod vParent);
    public void soapMethodOption(SoapMethod vParent);
    public CreateEventNotificationStatement createEventNotificationStatement();
    public CreateEventSessionStatement createEventSessionStatement();
    public EventNotificationObjectScope eventNotificationObjectScope();
    public EventTypeGroupContainer eventTypeGroupContainer();
    public void eventDeclarationList(EventSessionStatement vParent);
    public void targetDeclarationList(EventSessionStatement vParent);
    public void optSessionOptionList(EventSessionStatement vParent);
    public AlterEventSessionStatement alterEventSessionStatement();
    public void dropEventDeclarationList(AlterEventSessionStatement vParent);
    public void dropTargetDeclarationList(AlterEventSessionStatement vParent);
    public void sessionOptionList(EventSessionStatement vParent);
    public EventDeclaration eventDeclaration();
    public TargetDeclaration targetDeclaration();
    public SessionOption sessionOption();
    public EventSessionObjectName eventSessionNonEmptyThreePartObjectName();
    public void eventDeclarationSetParameters(EventDeclaration vParent);
    public void eventDeclarationActionParameters(EventDeclaration vParent);
    public BooleanExpression eventBooleanExpression();
    public EventDeclarationSetParameter eventDeclarationSetParameter();
    public LiteralSessionOption maxMemorySessionOption();
    public LiteralSessionOption maxEventSizeSessionOption();
    public OnOffSessionOption trackCausalitySessionOption();
    public OnOffSessionOption startupStateSessionOption();
    public EventRetentionSessionOption eventRetentionSessionOption();
    public MemoryPartitionSessionOption memoryPartitionSessionOption();
    public MaxDispatchLatencySessionOption maxDispatchLatencySessionOption();
    public void integerSessionOptionValue(LiteralSessionOption vParent);
    public void onOffSessionOption(OnOffSessionOption vParent);
    public ScalarExpression eventDeclarationValue();
    public Literal integerOrRealOrNumeric();
    public ParenthesisExpression eventSessionExpressionParenthesis();
    public Literal eventSessionLiteral();
    public NumericLiteral numeric();
    public RealLiteral real();
    public BooleanExpression eventBooleanExpressionOr();
    public BooleanExpression eventBooleanExpressionAnd();
    public BooleanExpression eventBooleanExpressionUnary();
    public BooleanParenthesisExpression eventBooleanExpressionParenthesis();
    public BooleanExpression eventDeclarationPredicateParameter();
    public EventSessionObjectName eventSessionOneOrTwoOrThreePartObjectName();
    public void eventDeclarationCompareFunction(EventDeclarationCompareFunctionParameter vParent);
    public void eventDeclarationComparisonPredicate(BooleanComparisonExpression vParent, EventSessionObjectName vSource);
    public BooleanComparisonType comparisonOperator();
    public CreateFullTextCatalogStatement createFulltextCatalogStatement();
    public CreateFullTextIndexStatement createFulltextIndexStatement();
    public CreateFullTextStopListStatement createFulltextStoplistStatement();
    public OnOffFullTextCatalogOption accentSensitivity();
    public FullTextIndexColumn fulltextIndexColumn();
    public IdentifierOrValueExpression languageTerm();
    public FullTextCatalogAndFileGroup fullTextCatalogAndFileGroup();
    public void createFulltextOptions(CreateFullTextIndexStatement vParent);
    public void createFulltextOptionsList(CreateFullTextIndexStatement vParent);
    public ChangeTrackingFullTextIndexOption changeTrackingFulltextIndexOption();
    public StopListFullTextIndexOption stoplistFulltextIndexOption();
    public void requiredSemicolon(TSqlFragment vParent, string vStatement);
    public AlterFullTextStopListStatement alterFulltextStoplistStatement();
    public FullTextStopListAction fulltextStoplistAction();
    public FullTextStopListAction addFulltextStoplistAction();
    public FullTextStopListAction dropFulltextStoplistAction();
    public BinaryLiteral binary();
    public DropFullTextStopListStatement dropFulltextStoplistStatement();
    public CreateXmlIndexStatement createXmlIndexStatement(bool vPrimary);
    public CreateXmlSchemaCollectionStatement createXmlSchemaCollectionStatement();
    public SchemaObjectName schemaObjectNonEmptyTwoPartName();
    public void indexOptionList(IndexAffectingStatement statement, IList`1<IndexOption> optionsList, TSqlFragment vParent);
    public PasswordCreateLoginSource passwordLoginSource();
    public WindowsCreateLoginSource windowsLoginSource();
    public CertificateCreateLoginSource certificateLoginSource();
    public AsymmetricKeyCreateLoginSource asymmetricKeyLoginSource();
    public Literal loginPassword();
    public void createLoginPasswordOption(PasswordCreateLoginSource vParent);
    public PrincipalOption createLoginParam();
    public OnOffPrincipalOption onOffPrincipalOption(IToken tOption);
    public IdentifierPrincipalOption createLoginParamWin();
    public Identifier createLoginParamCertOpt();
    public void messageTypeValidation(MessageTypeStatementBase vParent);
    public CreatePartitionFunctionStatement createPartitionFunction();
    public CreatePartitionSchemeStatement createPartitionScheme();
    public PartitionParameterType partitionParameterType();
    public void partitionFunctionTypes(CreatePartitionFunctionStatement vParent);
    public void partitionFunctionRange(CreatePartitionFunctionStatement vParent);
    public void queueOptionList(QueueStatement vParent, bool vDropAccepted);
    public UserRemoteServiceBindingOption bindingUserOption();
    public OnOffRemoteServiceBindingOption bindingAnonymousOption();
    public void routeOptionList(RouteStatement vParent);
    public void onQueueClause(AlterCreateServiceStatementBase vParent);
    public ServiceContract serviceContract();
    public AlterServiceStatement alterServiceStatement();
    public void addDropServiceContractList(AlterServiceStatement vParent);
    public ServiceContract addDropServiceContract();
    public void keySpecList(CreateSymmetricKeyStatement vParent);
    public void encryptorListWithNoPassword(SymmetricKeyStatement vParent);
    public void providerKeySourceOptionsOpt(IList`1<KeyOption> optionsList, TSqlFragment vParent);
    public KeyOption keySpec(Boolean& keySourceSpecified, Boolean& algorithmSpecified, Boolean& identityValueSpecified);
    public KeySourceKeyOption keySourceKeySpec(Boolean& keySourceSpecified);
    public AlgorithmKeyOption algorithmKeySpec(Boolean& algorithmSpecified);
    public IdentityValueKeyOption identityValueKeySpec(Boolean& identityValueSpecified);
    public ProviderKeyNameKeyOption providerKeyNameSourceOption(Boolean& providerKeyNameSpecified);
    public CreationDispositionKeyOption creationDispositionSourceOption(Boolean& creationDispositionSpecified);
    public CryptoMechanism cryptoWithNoPasswordOrJustPassword();
    public CryptoMechanism certificateCrypto();
    public CryptoMechanism keyCrypto();
    public CryptoMechanism passwordCrypto();
    public KeyOption providerKeySourceOption(Boolean& algorithmSpecified, Boolean& providerKeyNameSpecified, Boolean& creationDispositionSpecified);
    public AlterSymmetricKeyStatement alterSymmetricKeyStatement();
    public CreateTypeUddtStatement createTypeUddtStatement();
    public CreateTypeUdtStatement createTypeUdtStatement();
    public CreateTypeTableStatement createTypeTableStatement();
    public NullableConstraintDefinition nullableConstraint();
    public TableDefinition tableDefinition(IndexAffectingStatement statementType, AlterTableAddTableElementStatement vStatement);
    public UserLoginOption userLoginOption();
    public void createUserDefaultSchemaOpt(CreateUserStatement vParent);
    public AlterApplicationRoleStatement alterApplicationRoleStatement();
    public AlterAssemblyStatement alterAssemblyStatement();
    public AlterAsymmetricKeyStatement alterAsymmetricKeyStatement();
    public AlterAuthorizationStatement alterAuthorizationStatement();
    public AlterBrokerPriorityStatement alterBrokerPriorityStatement();
    public AlterCryptographicProviderStatement alterCryptographicProviderStatement();
    public AlterRemoteServiceBindingStatement alterRemoteServiceBindingStatement();
    public TSqlStatement alterResourceStatement();
    public AlterWorkloadGroupStatement alterWorkloadGroupStatement();
    public AlterCertificateStatement alterCertificateStatement();
    public AlterCredentialStatement alterCredentialStatement();
    public AlterEndpointStatement alterEndpointStatement();
    public TSqlStatement alterFulltextStatement();
    public AlterIndexStatement alterIndexStatement();
    public AlterLoginStatement alterLoginStatement();
    public AlterMasterKeyStatement alterMasterKeyStatement();
    public AlterMessageTypeStatement alterMessageTypeStatement();
    public TSqlStatement alterPartitionStatement();
    public AlterQueueStatement alterQueueStatement();
    public AlterRoleStatement alterRoleStatement();
    public AlterRouteStatement alterRouteStatement();
    public AlterSchemaStatement alterSchemaStatement();
    public TSqlStatement alterServiceStatements();
    public AlterUserStatement alterUserStatement();
    public AlterXmlSchemaCollectionStatement alterXmlSchemaCollectionStatement();
    public ApplicationRoleOption applicationRoleOption(bool defaultSchemaAndPasswordOnly);
    public ScalarExpression alterAssemblyFromClause();
    public void alterAssemblyWith(AlterAssemblyStatement vParent);
    public void alterAssemblyDropFile(AlterAssemblyStatement vParent);
    public void alterAssemblyAddFile(AlterAssemblyStatement vParent);
    public AssemblyOption alterAssemblyWithItem();
    public AssemblyOption assemblyPermissionSetOrVisibilityOption();
    public AssemblyOption assemblyUncheckedDataOption();
    public OnOffAssemblyOption assemblyVisibilityOption(IToken tPermissionSetVisibility);
    public AddFileSpec alterAssemblyAddFileSpec();
    public AlterFullTextCatalogStatement alterFulltextCatalogStatement();
    public AlterFullTextIndexStatement alterFulltextIndexStatement();
    public AlterFullTextIndexAction alterFulltextIndexAction();
    public SimpleAlterFullTextIndexAction enableDisableAlterFulltextIndexAction();
    public SimpleAlterFullTextIndexAction setChangeTrackingAlterFulltextIndexAction();
    public AddAlterFullTextIndexAction addAlterFulltextIndexAction();
    public DropAlterFullTextIndexAction dropAlterFulltextIndexAction();
    public SimpleAlterFullTextIndexAction startPopulationAlterFulltextIndexAction();
    public SimpleAlterFullTextIndexAction otherPopulationAlterFulltextIndexAction();
    public SetStopListAlterFullTextIndexAction setStoplistAlterFulltextIndexAction();
    public bool populationOption(TSqlFragment vParent);
    public PartitionSpecifier partitionSpecifier();
    public AlterLoginEnableDisableStatement alterLoginEnableDisable(Identifier vName);
    public AlterLoginOptionsStatement alterLoginOptions(Identifier vName);
    public AlterLoginAddDropCredentialStatement alterLoginAddDropCredential(Identifier vName);
    public PrincipalOption alterLoginParam();
    public PasswordAlterPrincipalOption passwordAlterLoginOption();
    public AlterPartitionFunctionStatement alterPartitionFunctionStatement();
    public AlterPartitionSchemeStatement alterPartitionSchemeStatement();
    public ExecuteAsClause executeAsClause(bool vCallerProhibited, bool vOwnerProhibited);
    public void queueOption(QueueStatement vParent, bool vDropAccepted);
    public QueueStateOption stateQueueOption();
    public void queueActivationOption(QueueStatement vParent, bool vDropAccepted);
    public QueueStateOption queuePoisonMessageHandlingOption();
    public QueueOption activationQueueOptionArgument(bool vDropAccepted, Boolean& procedureName, Boolean& maxQueueReaders, Boolean& executeAs);
    public QueueStateOption statusQueueOptionArgument(IToken vStartToken);
    public QueueProcedureOption procedureNameQueueOptionArgument(IToken vStartToken);
    public QueueValueOption maxQueueReadersQueueOptionArgument(IToken vStartToken);
    public QueueOption dropQueueOptionArgument(bool vDropAccepted);
    public QueueExecuteAsOption executeAsQueueOptionArgument();
    public RenameAlterRoleAction renameAlterRoleAction();
    public RouteOption routeOption();
    public SchemaObjectName schemaObjectTwoPartName();
    public AlterServiceMasterKeyStatement alterServiceMasterKeyStatement();
    public IdentifierPrincipalOption userOption();
    public void authorization(IAuthorization vParent);
    public StatementList createSchemaElementList();
    public TSqlStatement createSchemaElement();
    public void functionStatementBody(FunctionStatementBody vResult, Boolean& vParseErrorOccurred);
    public void functionParameterList(FunctionStatementBody vResult);
    public void functionReturnTypeAndBody(FunctionStatementBody vParent, Boolean& vParseErrorOccurred);
    public ProcedureParameter functionParameter();
    public void scalarProcedureParameter(ProcedureParameter vParent, bool outputAllowed);
    public void functionAttributes(FunctionStatementBody vParent);
    public BeginEndBlockStatement beginEndBlockStatement();
    public MethodSpecifier methodSpecifier();
    public void functionAttributesNoExecuteAs(FunctionStatementBody vParent);
    public DeclareTableVariableBody declareTableBody(IndexAffectingStatement statementType);
    public DeclareTableVariableBody declareTableBodyMain(IndexAffectingStatement statementType);
    public void clrTableValuedFunctionOrderHint(FunctionStatementBody vParent);
    public SelectStatement subqueryExpressionWithOptionalCTE();
    public QueryExpression subqueryExpression(SubDmlFlags subDmlFlags);
    public FunctionOption functionAttribute();
    public FunctionOption functionAttributeNoExecuteAs();
    public ExecuteAsFunctionOption functionExecuteAsOption();
    public void identifierColumnList(TSqlFragment vParent, IList`1<ColumnReferenceExpression> columns);
    public BooleanExpression filterClause(bool filterProhibited);
    public StatisticsOption createStatisticsStatementWithOption(Boolean& isConflictingOption);
    public LiteralStatisticsOption sampleStatisticsOption(Boolean& isConflictingOption);
    public LiteralStatisticsOption statsStreamStatisticsOption();
    public StatisticsOption simpleStatisticsOption(Boolean& isConflictingOption);
    public void columnNameList(TSqlFragment vParent, IList`1<Identifier> columnNames);
    public StatisticsOption updateStatisticsStatementWithOption(Boolean& isConflictingOption);
    public LiteralStatisticsOption updateStatisticsLiteralOption();
    public StatisticsOption updateStatisticsSimpleOption(Boolean& isConflictingOption);
    public KillStatement killStatement();
    public KillQueryNotificationSubscriptionStatement killQueryNotificationSubscriptionStatement();
    public KillStatsJobStatement killStatsJobStatement();
    public Permission permission();
    public Identifier securityStatementPermission();
    public void securityTargetObjectCommon(SecurityTargetObject vParent);
    public MultiPartIdentifier multiPartIdentifier(int vMaxNumber);
    public SecurityTargetObject authorizationTargetObject();
    public void permissionsList(SecurityStatement vParent, Boolean& vContainsColumnList);
    public void securityStatementTargetObjectOpt(SecurityStatement vParent, bool vColumnsDisallowed);
    public void securityStatementPrincipalList(SecurityStatement vParent);
    public void securityStatementAsClauseOpt(SecurityStatement vParent);
    public WaitForSupportedStatement waitforInnerStatement();
    public ColumnReferenceExpression column();
    public ValueExpression binaryOrVariable();
    public ValueExpression integerOrVariable();
    public void modificationTextStatement(TextModificationStatement vParent);
    public ScalarExpression signedIntegerOrVariableOrNull();
    public void modificationTextStatementWithLog(TextModificationStatement vParent);
    public ValueExpression writeString();
    public NullLiteral nullLiteral();
    public VariableReference variable();
    public OpenMasterKeyStatement openMasterKeyStatement();
    public OpenSymmetricKeyStatement openSymmetricKeyStatement();
    public OpenCursorStatement openCursorStatement();
    public CryptoMechanism decryptionMechanism();
    public void decryptionMechanismPassword(CryptoMechanism vParent);
    public CursorId cursorId();
    public CloseMasterKeyStatement closeMasterKeyStatement();
    public CloseSymmetricKeyStatement closeSymmetricKeyStatement();
    public CloseCursorStatement closeCursorStatement();
    public FetchCursorStatement rowSelector();
    public FetchType fetchType();
    public TSqlStatement dropDatabaseStatements();
    public DropIndexStatement dropIndexStatement();
    public DropStatisticsStatement dropStatisticsStatement();
    public DropTableStatement dropTableStatement();
    public DropProcedureStatement dropProcedureStatement();
    public DropFunctionStatement dropFunctionStatement();
    public DropViewStatement dropViewStatement();
    public DropDefaultStatement dropDefaultStatement();
    public DropRuleStatement dropRuleStatement();
    public DropTriggerStatement dropTriggerStatement();
    public DropSchemaStatement dropSchemaStatement();
    public DropAggregateStatement dropAggregateStatement();
    public DropAssemblyStatement dropAssemblyStatement();
    public TSqlStatement dropPartitionStatements();
    public DropSynonymStatement dropSynonymStatement();
    public DropApplicationRoleStatement dropApplicationRoleStatement();
    public DropBrokerPriorityStatement dropBrokerPriorityStatement();
    public DropCryptographicProviderStatement dropCryptographicProviderStatement();
    public TSqlStatement dropFulltextStatements();
    public DropLoginStatement dropLoginStatement();
    public DropResourcePoolStatement dropResourcePoolStatement();
    public DropWorkloadGroupStatement dropWorkloadGroupStatement();
    public DropRoleStatement dropRoleStatement();
    public DropMasterKeyStatement dropMasterKeyStatement();
    public DropSymmetricKeyStatement dropSymmetricKeyStatement();
    public DropAsymmetricKeyStatement dropAsymmetricKeyStatement();
    public DropCertificateStatement dropCertificateStatement();
    public DropCredentialStatement dropCredentialStatement();
    public DropTypeStatement dropTypeStatement();
    public DropXmlSchemaCollectionStatement dropXmlSchemaCollectionStatement();
    public DropContractStatement dropContractStatement();
    public DropQueueStatement dropQueueStatement();
    public DropServiceStatement dropServiceStatement();
    public DropRouteStatement dropRouteStatement();
    public DropMessageTypeStatement dropMessageTypeStatement();
    public DropRemoteServiceBindingStatement dropRemoteServiceBindingStatement();
    public DropEndpointStatement dropEndpointStatement();
    public DropSignatureStatement dropSignatureStatement();
    public TSqlStatement dropEventStatement();
    public TSqlStatement dropServerStatements();
    public DropUserStatement dropUserStatement();
    public DropServerAuditSpecificationStatement dropServerAuditSpecificationStatement();
    public DropServerAuditStatement dropServerAuditStatement();
    public DropDatabaseAuditSpecificationStatement dropDatabaseAuditSpecificationStatement();
    public DropDatabaseEncryptionKeyStatement dropDatabaseEncryptionKeyStatement();
    public DropDatabaseStatement dropDatabaseStatement();
    public DropIndexClauseBase dropIndexClause();
    public BackwardsCompatibleDropIndexClause indexDropObject();
    public DropIndexClause indexDropObjectNewNameFormat();
    public void dropClusteredIndexOptions(DropIndexClause vParent);
    public void dropClusteredIndexOption(DropIndexClause vParent, Int32& encounteredOptions);
    public IndexExpressionOption maxDopOption();
    public IndexStateOption onlineIndexOption();
    public MoveToDropIndexOption dropIndexMoveToOption();
    public FileStreamOnDropIndexOption dropIndexFileStreamOnOption();
    public DataCompressionOption dataCompressionOption();
    public FileGroupOrPartitionScheme filegroupOrPartitionScheme();
    public void fileStreamOn(IFileStreamSpecifier vParent);
    public ChildObjectName statisticsDropObject();
    public List`1<Identifier> identifierList(int vMaxNumber);
    public void dropObjectList(DropObjectsStatement vParent, bool onlyTwoPartNames);
    public TriggerScope triggerScope(TSqlFragment vParent);
    public SchemaObjectName dropObject(bool onlyTwoPartNames);
    public DropPartitionFunctionStatement dropPartitionFunctionStatement();
    public DropPartitionSchemeStatement dropPartitionSchemeStatement();
    public DropFullTextCatalogStatement dropFulltextCatalogStatement();
    public DropFullTextIndexStatement dropFulltextIndexStatement();
    public bool removeProviderKeyOpt(TSqlFragment vParent);
    public DropEventNotificationStatement dropEventNotificationStatement();
    public DropEventSessionStatement dropEventSessionStatement();
    public void signatureType(SignatureStatementBase vParent);
    public void signableElement(SignatureStatementBase vParent);
    public void cryptoListWithOptionalPasswordSignature(SignatureStatementBase vParent);
    public CryptoMechanism cryptoWithOptionalPasswordSignature();
    public Literal withSignatureOrPasswordOpt();
    public Identifier nonQuotedIdentifier();
    public BeginTransactionStatement beginTransactionStatement();
    public TryCatchStatement tryCatchStatement();
    public BeginConversationTimerStatement beginConversationTimerStatement();
    public BeginDialogStatement beginDialogStatement();
    public void transactionName(TransactionStatement vParent);
    public Identifier weirdTransactionName();
    public void tranIdentifier(StringBuilder vStringBuilder, TSqlFragment vParent);
    public StatementList tryStatementList(Boolean& vParseErrorOccurred);
    public StatementList catchStatementList(Boolean& vParseErrorOccurred);
    public DeclareVariableElement declareVariableElement();
    public SqlDataTypeReference cursorDataType();
    public DeclareVariableStatement declareVariableStatement();
    public DeclareCursorStatement declareCursorStatement();
    public PredicateSetStatement predicateSetStatement();
    public SetVariableStatement setVariableStatement();
    public SetStatisticsStatement setStatisticsStatement();
    public SetRowCountStatement setRowcountStatement();
    public SetOffsetsStatement setOffsetsStatement();
    public SetCommandStatement setCommandStatement();
    public SetTransactionIsolationLevelStatement setTransactionIsolationLevelStatement();
    public SetTextSizeStatement setTextSizeStatement();
    public SetIdentityInsertStatement setIdentityInsertStatement();
    public SetErrorLevelStatement setErrorLevelStatement();
    public void parenthesizedOptExpressionWithDefaultList(TSqlFragment vParent, IList`1<ScalarExpression> expressions);
    public AssignmentKind assignmentWithOptOp();
    public CursorDefinition cursorDefinition();
    public void setOnOff(SetOnOffStatement vParent);
    public SetOffsets offsetItem();
    public SetCommand setCommand();
    public SetFipsFlaggerCommand fipsFlaggerLevel();
    public void tableElement(IndexAffectingStatement statementType, TableDefinition vParent, AlterTableAddTableElementStatement vStatement);
    public void cursorOpts(bool oldSyntax, IList`1<CursorOption> vOptions);
    public CursorDefinition cursorDefinitionOptions(IList`1<CursorOption> vOptions);
    public SelectStatement selectStatement(SubDmlFlags subDmlFlags);
    public CursorOption cursorOption();
    public void indexLegacyOptionList(CreateIndexStatement vParent);
    public void fileStreamOnOpt(IFileStreamSpecifier vParent);
    public BooleanExpression filterExpression();
    public BooleanExpression filterExpressionPrimary();
    public ColumnReferenceExpression filterColumn();
    public BooleanIsNullExpression filterNullPredicate(ScalarExpression vColumn);
    public BooleanComparisonExpression filterComparisonPredicate(ScalarExpression vColumn);
    public InPredicate filterInPredicate(ScalarExpression vColumn);
    public BooleanParenthesisExpression filterParenthesisExpression();
    public void specialColumn(ColumnReferenceExpression vParent);
    public BooleanIsNullExpression nullPredicate(ScalarExpression vExpressionFirst);
    public IndexOption indexLegacyOption();
    public IndexExpressionOption fillFactorOption();
    public IndexOption indexOption();
    public IndexStateOption indexStateOption();
    public XmlNamespaces xmlNamespaces();
    public void ctContext(WithCtesAndXmlNamespaces vParent);
    public CommonTableExpression commonTableExpression();
    public XmlNamespacesElement xmlNamespacesElement();
    public XmlNamespacesDefaultElement xmlNamespacesDefaultElement();
    public XmlNamespacesAliasElement xmlNamespacesAliasElement();
    public QueryExpression queryExpression(SubDmlFlags subDmlFlags, SelectStatement vSelectStatement);
    public OrderByClause orderByClause();
    public ComputeClause computeClause();
    public ForClause forClause();
    public void optimizerHints(TSqlFragment vParent, IList`1<OptimizerHint> hintsCollection);
    public TableReferenceWithAliasAndColumns derivedTable(SubDmlFlags subDmlFlags);
    public QueryDerivedTable queryDerivedTable(SubDmlFlags subDmlFlags);
    public InlineDerivedTable inlinedDerivedTable();
    public void simpleTableReferenceAlias(TableReferenceWithAlias vParent);
    public RowValue rowValueExpression();
    public ScalarSubquery subquery(SubDmlFlags subDmlFlags, ExpressionFlags expressionFlags);
    public QueryExpression subqueryExpressionUnit(SubDmlFlags subDmlFlags);
    public QuerySpecification subquerySpecification(SubDmlFlags subDmlFlags);
    public QueryParenthesisExpression subqueryParenthesis(SubDmlFlags subDmlFlags);
    public QueryExpression queryExpressionUnit(SubDmlFlags subDmlFlags, SelectStatement vSelectStatement);
    public QuerySpecification querySpecification(SubDmlFlags subDmlFlags, SelectStatement vSelectStatement);
    public QueryParenthesisExpression queryParenthesis(SubDmlFlags subDmlFlags, SelectStatement vSelectStatement);
    public void uniqueRowFilterOpt(QuerySpecification vParent);
    public TopRowFilter topRowFilter();
    public SelectElement selectColumnOrStarExpression();
    public FromClause fromClauseOpt(SubDmlFlags subDmlFlags);
    public WhereClause whereClause();
    public GroupByClause groupByClause();
    public HavingClause havingClause();
    public BrowseForClause browseForClause();
    public XmlForClause xmlForClause();
    public void selectExpression(QuerySpecification vParent);
    public UniqueRowFilter uniqueRowFilter(IToken& token);
    public PrimaryExpression parenthesisDisambiguatorForExpressions(ExpressionFlags expressionFlags);
    public TopRowFilter dmlTopRowFilter();
    public void dmlTopRowFilterOpt(DataModificationSpecification vParent);
    public SelectSetVariable selectSetVariable();
    public SelectStarExpression selectStarExpression();
    public SelectScalarExpression selectColumn();
    public SelectElement outputClauseSelectElement();
    public SelectScalarExpression outputClauseSelectColumn();
    public ScalarExpression selectColumnExpression();
    public IdentityFunctionCall identityFunction();
    public ScalarExpression seedIncrement();
    public TableSampleClause tableSampleClause();
    public FromClause fromClause(SubDmlFlags subDmlFlags);
    public TableReference selectTableReferenceWithOdbc(SubDmlFlags subDmlFlags);
    public TableReference selectTableReference(SubDmlFlags subDmlFlags);
    public OdbcQualifiedJoinTableReference odbcQualifiedJoin(SubDmlFlags subDmlFlags);
    public TableReference selectTableReferenceElement(SubDmlFlags subDmlFlags);
    public void selectTableReferenceAdditionalElement(SubDmlFlags subDmlFlags, TableReference& vResult);
    public void odbcInitiator();
    public OdbcConvertSpecification odbcConvertSpecification();
    public ExtractFromExpression extractFromExpression();
    public OdbcFunctionCall odbcFunctionCall();
    public TableReference joinTableReference(SubDmlFlags subDmlFlags);
    public JoinParenthesisTableReference joinParenthesis(SubDmlFlags subDmlFlags);
    public void joinElement(SubDmlFlags subDmlFlags, TableReference& vResult);
    public TableReference selectTableReferenceElementWithoutJoinParenthesis(SubDmlFlags subDmlFlags);
    public void pivotedTableReference(TableReference& vResult);
    public void unpivotedTableReference(TableReference& vResult);
    public ColumnReferenceExpression fixedColumn();
    public void columnListWithParenthesis(TSqlFragment vParent, IList`1<ColumnReferenceExpression> columns);
    public ColumnReferenceExpression identifierColumnReferenceExpression();
    public void unqualifiedJoin(SubDmlFlags subDmlFlags, TableReference& vResult);
    public void qualifiedJoin(SubDmlFlags subDmlFlags, TableReference& vResult);
    public TableReferenceWithAliasAndColumns changeTableTableReference();
    public BuiltInFunctionTableReference builtInFunctionTableReference();
    public VariableTableReference variableTableReference();
    public VariableMethodCallTableReference variableMethodCallTableReference();
    public TableReferenceWithAlias openRowset();
    public FullTextTableReference fulltextTableReference();
    public OpenXmlTableReference openXmlTableReference();
    public DataModificationTableReference subDmlTableReference(SubDmlFlags subDmlFlags);
    public TableReference schemaObjectOrFunctionTableReference();
    public ChangeTableChangesTableReference changesChangeTableParams(SchemaObjectName vTarget);
    public ChangeTableVersionTableReference versionChangeTableParams(SchemaObjectName vTarget);
    public DataModificationSpecification innerDmlStatement();
    public InsertSpecification insertSpecification(SubDmlFlags subDmlFlags);
    public UpdateSpecification updateSpecification(SubDmlFlags subDmlFlags);
    public DeleteSpecification deleteSpecification(SubDmlFlags subDmlFlags);
    public MergeSpecification mergeSpecification(SubDmlFlags subDmlFlags);
    public void joinHint(QualifiedJoin vParent);
    public ScalarExpression expressionWithDefault();
    public void simpleTableReferenceAliasOpt(TableReferenceWithAlias vParent);
    public RaiseErrorStatement raiseErrorStatement();
    public RaiseErrorLegacyStatement raiseErrorLegacyStatement();
    public ScalarExpression signedIntegerOrStringOrVariable();
    public ScalarExpression possibleNegativeConstant();
    public void outputIntoOutputClause(DataModificationSpecification vParent);
    public OutputIntoClause outputIntoClause(IToken tOutput, IList`1<SelectElement> vSelectElements);
    public OutputClause outputClause();
    public VariableTableReference variableDmlTarget();
    public NamedTableReference intoSchemaObjectTable();
    public void outputClauseOpt(SubDmlFlags subDmlFlags, DataModificationSpecification vParent);
    public TableReference dmlTarget(bool indexHintAllowed);
    public WhereClause dmlWhereClause(SubDmlFlags subDmlFlags);
    public ColumnReferenceExpression insertColumn();
    public ValuesInsertSource valuesInsertSource();
    public ExecuteInsertSource executeInsertSource();
    public SelectInsertSource selectInsertSource(SubDmlFlags subDmlFlags);
    public void setClausesList(TSqlFragment vParent, IList`1<SetClause> setClauses);
    public SetClause setClause();
    public AssignmentSetClause setClauseStartingWithVariable();
    public AssignmentSetClause setClauseColumnAssignment(MultiPartIdentifier vMultiPartIdentifier);
    public FunctionCallSetClause setClauseFunctionCall(MultiPartIdentifier vMultiPartIdentifier);
    public AssignmentSetClause setClauseSubItemSystemColumn();
    public AssignmentKind assignmentWithOp();
    public void systemColumn(ColumnReferenceExpression vParent);
    public ExecuteSpecification executeSpecification();
    public void defaultValuesInsertSource(ValuesInsertSource vParent);
    public RowValue rowValueExpressionWithDefault();
    public void expressionWithDefaultList(TSqlFragment vParent, IList`1<ScalarExpression> expressions);
    public TableReferenceWithAlias schemaObjectDmlTarget(bool indexHintAllowed);
    public void mergeInsertDmlColumnListOpt(InsertMergeAction vParent);
    public ColumnReferenceExpression mergeInsertDmlColumn();
    public ScalarExpression possibleNegativeConstantWithDefault();
    public SchemaObjectFunctionTableReference schemaObjectFunctionDmlTarget();
    public NamedTableReference schemaObjectTableDmlTarget(bool indexHintAllowed);
    public void tableHints(TSqlFragment vParent, IList`1<TableHint> hints, bool tableHintAllowed);
    public NamedTableReference schemaObjectTableReference(SchemaObjectName vSchemaObjectName);
    public SchemaObjectFunctionTableReference schemaObjectFunctionTableReference(SchemaObjectName vSchemaObjectName);
    public void singleOldStyleTableHint(TSqlFragment vParent, IList`1<TableHint> hints);
    public void nonParameterTableHints(TSqlFragment vParent, IList`1<TableHint> hints);
    public IndexTableHint oldForceIndex();
    public void fullTextTable(FullTextTableReference vParent);
    public void fulltextTableColumnList(FullTextTableReference vParent);
    public void fulltextTableOptions(FullTextTableReference vParent);
    public ColumnReferenceExpression starColumnReferenceExpression();
    public ValueExpression languageExpression();
    public ValueExpression binaryOrIntegerOrStringOrVariable();
    public OpenXmlTableReference openXmlParams();
    public void openXmlWithClauseOpt(OpenXmlTableReference vParent);
    public void openXmlSchemaItemList(OpenXmlTableReference vParent);
    public SchemaDeclarationItem openXmlSchemaItem();
    public ColumnDefinitionBase columnDefinitionBasic();
    public TableReferenceWithAlias openRowsetRowset();
    public OpenQueryTableReference openQueryRowset();
    public AdHocTableReference adhocRowset();
    public OpenRowsetTableReference openRowsetParams();
    public InternalOpenRowset internalOpenRowsetArgs();
    public BulkOpenRowset openRowsetBulk();
    public BulkInsertOption openRowsetBulkHint();
    public BulkInsertOption openRowsetBulkHintNoValue();
    public AdHocDataSource adhocDataSource();
    public SchemaObjectNameOrValueExpression objectOrString();
    public void simpleTableHints(TSqlFragment vParent, IList`1<TableHint> hints);
    public void tableHintsBody(TSqlFragment vParent, IList`1<TableHint> hints, bool tableHintAllowed);
    public TableHint tableHint(bool indexHintAllowed);
    public ForceSeekTableHint forceSeekTableHint(bool indexHintAllowed);
    public TableHint simpleTableHint();
    public IndexTableHint indexTableHint(bool indexHintAllowed);
    public IdentifierOrValueExpression identifierOrInteger();
    public WhereClause whereCurrentOfCursorClause(SubDmlFlags subDmlFlags);
    public GroupingSpecification groupByItem(bool isAll, Boolean& encounteredCubeRollupGroupingSets);
    public CubeGroupingSpecification cubeSpec(bool isAll);
    public RollupGroupingSpecification rollupSpec(bool isAll);
    public GroupingSetsGroupingSpecification groupingSetsSpec(bool isAll);
    public GrandTotalGroupingSpecification grandTotal();
    public ExpressionGroupingSpecification simpleGroupByItem();
    public GroupingSpecification groupingSet();
    public CompositeGroupingSpecification composingGroupingSet();
    public GroupingSpecification groupingSetItem();
    public void cubeOrRollupArgumentList(TSqlFragment vParent, IList`1<GroupingSpecification> specs);
    public GroupingSpecification cubeOrRollupArgument();
    public CompositeGroupingSpecification compositeGroupByItem();
    public ExpressionWithSortOrder expressionWithSortOrder();
    public ComputeFunction computeFunction();
    public SortOrder orderByOption(TSqlFragment vParent);
    public UpdateForClause updateForClause();
    public XmlForClauseOption xmlForClauseMode();
    public XmlForClauseOption xmlParam(XmlForClauseOptions encountered);
    public OptimizerHint hint();
    public LiteralOptimizerHint literalOptimizerHint();
    public OptimizerHint simpleOptimizerHint();
    public LiteralOptimizerHint usePlanOptimizerHint();
    public OptimizeForOptimizerHint optimizeForOptimizerHint();
    public TableHintsOptimizerHint tableHintsOptimizerHint();
    public VariableValuePair variableValuePair();
    public Literal cryptographicProviderFile();
    public AlterResourcePoolStatement alterResourcePoolStatement();
    public AlterResourceGovernorStatement alterResourceGovernorStatement();
    public void resourcePoolStatementBody(ResourcePoolStatement vParent);
    public ResourcePoolParameter resourcePoolParameter();
    public void workloadGroupStatementBody(WorkloadGroupStatement vParent);
    public WorkloadGroupParameter workloadGroupParameter();
    public void brokerPriorityStatementBody(BrokerPriorityStatement vParent);
    public BrokerPriorityParameter brokerPriorityParameter(int encountered);
    public void spatialIndexingScheme(CreateSpatialIndexStatement vParent);
    public void spatialIndexOptionsList(CreateSpatialIndexStatement vParent);
    public SpatialIndexOption spatialIndexOption(SpatialIndexingSchemeType indexingScheme, Boolean& isRegularIndexOption);
    public BoundingBoxSpatialIndexOption boundingBoxSpatialIndexOption(bool isRegularIndexOption, SpatialIndexingSchemeType indexingScheme);
    public GridsSpatialIndexOption gridsSpatialIndexOption(bool isRegularIndexOption);
    public CellsPerObjectSpatialIndexOption cellsPerObjectSpatialIndexOption(bool isRegularIndexOption);
    public SpatialIndexRegularOption spatialIndexRegularOption(IndexAffectingStatement statement);
    public void boundingBoxParameter(BoundingBoxSpatialIndexOption vParent);
    public void boundingBoxParameterListByname(BoundingBoxSpatialIndexOption vParent);
    public void boundingBoxParameterListByord(BoundingBoxSpatialIndexOption vParent);
    public BoundingBoxParameter boundingBoxParameterByName(int encountered);
    public ScalarExpression signedIntegerOrReal();
    public BoundingBoxParameter boundingBoxParameterByOrd();
    public void gridParameter(GridsSpatialIndexOption vParent);
    public void gridParameterListByName(GridsSpatialIndexOption vParent);
    public void gridParameterListByOrd(GridsSpatialIndexOption vParent);
    public GridParameter gridParameterByName();
    public GridParameter gridParameterByOrd();
    public void viewStatementBody(ViewStatementBody vResult);
    public ViewOption viewOption();
    public TriggerOption triggerOption(bool vOwnerProhibited);
    public void procedureOptions(ProcedureStatementBody vParent);
    public ProcedureOption procedureOption();
    public void procedureStatementBody(ProcedureStatementBody vResult, Boolean& vParseErrorOccurred);
    public ProcedureReference procedureReference();
    public void procedureParameterList(ProcedureStatementBodyBase vResult);
    public ProcedureParameter procedureParameter();
    public void cursorProcedureParameter(ProcedureParameter vParent);
    public IdentifierLiteral identifierLiteral();
    public ValueExpression literal();
    public UnaryExpression negativeConstant();
    public Literal subroutineParameterLiteral();
    public void triggerStatementBody(TriggerStatementBody vResult, Boolean& vParseErrorOccurred);
    public void ddlTriggerMidSection(TriggerStatementBody vParent);
    public void dmlTriggerMidSection(TriggerStatementBody vParent);
    public TriggerAction dmlTriggerAction();
    public TriggerAction ddlTriggerAction();
    public void endConversationArgumentsOpt(EndConversationStatement vParent);
    public SelectElement receiveSelectExpression();
    public SelectScalarExpression receiveColumnSelectExpression();
    public DialogOption beginConversationArgument(Int32& encounteredOptions);
    public ScalarExpressionDialogOption scalarExpressionBeginDialogConversationArgument(IToken tOption, Int32& encounteredOptions);
    public OnOffDialogOption onOffBeginDialogConversationArgument(IToken tOption, Int32& encounteredOptions);
    public MergeStatement mergeStatementWithoutSemicolon(SubDmlFlags subDmlFlags);
    public MergeActionClause mergeActionClause();
    public MergeCondition mergeCondition();
    public MergeAction mergeAction(MergeCondition condition);
    public UpdateMergeAction updateMergeAction(MergeCondition condition);
    public InsertMergeAction insertMergeAction(MergeCondition condition);
    public DeleteMergeAction deleteMergeAction(MergeCondition condition);
    public ValuesInsertSource mergeInsertSource();
    public void execStart(TSqlFragment vParent);
    public ExecuteContext executeAsStatementContext();
    public void executeContextStatementOptionsOpt(ExecuteAsStatement vParent);
    public ExecuteOption executeOption();
    public void execTypes(ExecuteSpecification vParent);
    public ExecutableEntity execStrTypes();
    public ExecuteContext execStrExecCtxt();
    public Identifier linkedServer();
    public ExecutableProcedureReference execProcEx();
    public ExecuteContext execCtxtStmt();
    public void execCtxtStmtType(ExecuteContext vParent);
    public Literal execCtxtStmtPrincipal();
    public ExecutableStringList execSqlList();
    public void setParamList(ExecutableEntity vParent);
    public ExecutableProcedureReference adhocDataSourceExecproc();
    public ProcedureReferenceName procObjectReference();
    public ProcedureReferenceName varObjectReference();
    public Literal procNumOpt();
    public ValueExpression stringOrGlobalVariableOrVariable();
    public ExecuteParameter setParam(Boolean& nameEqualsValueWasUsed, Int32& parameterNumber);
    public TableDefinition tableDefinitionCreateTable();
    public void largeDataOnOpt(CreateTableStatement vParent);
    public void withDataCompression(CreateTableStatement vParent);
    public void largeDataOn(CreateTableStatement vParent);
    public TableDataCompressionOption tableDataCompressionOption();
    public CompressionPartitionRange compressionPartitionRange();
    public AlterTableAlterColumnStatement alterTableAlterColumnStatement();
    public AlterTableTriggerModificationStatement alterTableTriggerModificationStatement();
    public AlterTableDropTableElementStatement alterTableDropTableElementStatement();
    public AlterTableSwitchStatement alterTableSwitchStatement();
    public ConstraintEnforcement constraintEnforcement();
    public AlterTableAddTableElementStatement alterTableAddTableElementStatement(ConstraintEnforcement vExistingRowsCheck);
    public AlterTableConstraintModificationStatement alterTableConstraintModificationStatement(ConstraintEnforcement vExistingRowsCheck);
    public AlterTableRebuildStatement alterTableRebuildStatement();
    public AlterTableChangeTrackingModificationStatement alterTableChangeTrackingModificationStatement();
    public AlterTableSetStatement alterTableSetStatement();
    public TableOption tableOption();
    public LockEscalationTableOption lockEscalationTableOption();
    public FileStreamOnTableOption fileStreamOnTableOption();
    public ColumnStorageOptions columnStorage(IndexAffectingStatement statementType, DataTypeReference columnType);
    public AlterTableDropTableElement alterTableDropTableElement();
    public void alterTableDropTableElementWithOptions(AlterTableDropTableElement vParent);
    public DropClusteredConstraintOption dropClusteredConstraintOption();
    public ColumnDefinition columnDefinition(IndexAffectingStatement statementType, AlterTableAddTableElementStatement vStatement);
    public ConstraintDefinition tableConstraint(IndexAffectingStatement statementType, AlterTableAddTableElementStatement vStatement);
    public void computedColumnBody(ColumnDefinition vParent);
    public void computedColumnConstraintListOpt(IndexAffectingStatement statementType, ColumnDefinition vResult);
    public void regularColumnBody(IndexAffectingStatement statementType, ColumnDefinition vParent);
    public void columnConstraintListOpt(IndexAffectingStatement statementType, ColumnDefinition vResult);
    public ScalarExpression expressionWithFlags(ExpressionFlags expressionFlags);
    public ConstraintDefinition columnConstraint(IndexAffectingStatement statementType);
    public void rowguidcolConstraint(ColumnDefinition vParent);
    public IdentityOptions identityConstraint(IndexAffectingStatement statementType);
    public bool replicationClauseOpt(IndexAffectingStatement statementType, TSqlFragment vParent);
    public DefaultConstraintDefinition defaultColumnConstraint(IndexAffectingStatement statementType);
    public UniqueConstraintDefinition uniqueColumnConstraint(IndexAffectingStatement statementType);
    public ForeignKeyConstraintDefinition foreignKeyColumnConstraint(IndexAffectingStatement statementType);
    public CheckConstraintDefinition checkConstraint(IndexAffectingStatement statementType);
    public UniqueConstraintDefinition uniqueTableConstraint(IndexAffectingStatement statementType);
    public DefaultConstraintDefinition defaultTableConstraint(IndexAffectingStatement statementType);
    public ForeignKeyConstraintDefinition foreignKeyTableConstraint(IndexAffectingStatement statementType);
    public void uniqueConstraintHeader(UniqueConstraintDefinition vParent, bool throwInPhaseOne);
    public void uniqueConstraintTailOpt(IndexAffectingStatement statementType, UniqueConstraintDefinition vParent);
    public void uniqueConstraintIndexOptionsOpt(IndexAffectingStatement statement, UniqueConstraintDefinition vParent);
    public void sortedDataOptions();
    public DeleteUpdateAction deleteUpdateAction(TSqlFragment vParent);
    public void foreignKeyConstraintCommonEnd(IndexAffectingStatement statementType, ForeignKeyConstraintDefinition vParent);
    public void foreignConstraintColumnsOpt(ForeignKeyConstraintDefinition vParent);
    public BooleanExpression booleanExpressionWithFlags(ExpressionFlags expressionFlags);
    public XmlDataTypeReference xmlDataType(SchemaObjectName vName);
    public SchemaObjectName dataTypeSchemaObjectName();
    public SqlDataTypeReference sqlDataTypeWithoutNational(SchemaObjectName vName, SqlDataTypeOption vType);
    public UserDataTypeReference userDataType(SchemaObjectName vName);
    public SqlDataTypeReference doubleDataType();
    public SqlDataTypeReference sqlDataTypeWithNational();
    public void dataTypeParametersOpt(ParameterizedDataTypeReference vParent);
    public MaxLiteral max();
    public void identifierListElement(List`1<Identifier> vParent, int vMaxNumber, bool first);
    public MultiPartIdentifier nonEmptyThreePartObjectName();
    public MultiPartIdentifier oneOrTwoOrThreePartObjectName();
    public BooleanExpression booleanExpressionOr(ExpressionFlags expressionFlags);
    public BooleanExpression booleanExpressionAnd(ExpressionFlags expressionFlags);
    public BooleanExpression booleanExpressionUnary(ExpressionFlags expressionFlags);
    public BooleanExpression booleanExpressionPrimary(ExpressionFlags expressionFlags);
    public BooleanParenthesisExpression booleanExpressionParenthesis();
    public BooleanComparisonExpression comparisonPredicate(ScalarExpression vExpressionFirst, BooleanComparisonType vType, ExpressionFlags expressionFlags);
    public SubqueryComparisonPredicate subqueryComparisonPredicate(ScalarExpression vExpressionFirst, BooleanComparisonType vType, ExpressionFlags expressionFlags);
    public BooleanComparisonExpression joinPredicate(ScalarExpression vExpressionFirst, BooleanComparisonType vType, ExpressionFlags expressionFlags);
    public InPredicate inPredicate(ScalarExpression vExpressionFirst, bool vNotDefined, ExpressionFlags expressionFlags);
    public BooleanTernaryExpression betweenPredicate(ScalarExpression vExpressionFirst, bool vNotDefined, ExpressionFlags expressionFlags);
    public LikePredicate likePredicate(ScalarExpression vExpressionFirst, bool vNotDefined, ExpressionFlags expressionFlags);
    public FullTextPredicate fulltextPredicate();
    public ExistsPredicate existsPredicate(ExpressionFlags expressionFlags);
    public TSEqualCall tsEqualCall();
    public UpdateCall updateCall();
    public ColumnReferenceExpression fulltextColumn();
    public ColumnReferenceExpression starColumn();
    public BooleanComparisonType joinOperator();
    public SubqueryComparisonPredicateType subqueryComparisonPredicateType();
    public void escapeExpression(LikePredicate vParent, ExpressionFlags expressionFlags);
    public ScalarExpression expressionBinaryPri2(ExpressionFlags expressionFlags);
    public ScalarExpression expressionBinaryPri1(ExpressionFlags expressionFlags);
    public ScalarExpression expressionUnary(ExpressionFlags expressionFlags);
    public PrimaryExpression expressionWithClrElements(ExpressionFlags expressionFlags);
    public PrimaryExpression udtExpression();
    public PrimaryExpression expressionPrimary(ExpressionFlags expressionFlags);
    public FunctionCall expressionWithClrElementsFunctionCallPart();
    public CastCall castCall();
    public FunctionCall builtInFunctionCall();
    public LeftFunctionCall leftFunctionCall();
    public RightFunctionCall rightFunctionCall();
    public PartitionFunctionCall partitionFunctionCall();
    public PrimaryExpression columnOrFunctionCall();
    public NullIfExpression nullIfExpression(ExpressionFlags expressionFlags);
    public CoalesceExpression coalesceExpression(ExpressionFlags expressionFlags);
    public CaseExpression caseExpression(ExpressionFlags expressionFlags);
    public ConvertCall convertCall();
    public ParameterlessCall parameterlessCall();
    public ParenthesisExpression expressionParenthesis(ExpressionFlags expressionFlags);
    public UserDefinedTypeCallTarget userDefinedTypeCallTarget();
    public FunctionCall udtFunctionExpression(UserDefinedTypeCallTarget vCallTarget);
    public UserDefinedTypePropertyAccess udtPropertyExpression(UserDefinedTypeCallTarget vCallTarget);
    public FunctionCall basicFunctionCall();
    public OverClause overClause();
    public OverClause overClauseBeginning();
    public OverClause overClauseNoOrderBy();
    public void regularBuiltInFunctionCall(FunctionCall vParent);
    public void aggregateBuiltInFunctionCall(FunctionCall vParent);
    public void reservedBuiltInFunctionCallParameters(TSqlFragment vParent, IList`1<ScalarExpression> parameters);
    public SimpleWhenClause simpleWhenClause(ExpressionFlags expressionFlags);
    public SearchedWhenClause searchedWhenClause(ExpressionFlags expressionFlags);
    public SimpleCaseExpression simpleCaseExpression(ScalarExpression inputExpression, ExpressionFlags expressionFlags);
    public SearchedCaseExpression searchedCaseExpression(ExpressionFlags expressionFlags);
    public FunctionCall userFunctionCall(MultiPartIdentifier vIdentifiers);
    public ValueExpression globalVariableOrVariableReference();
    public SchemaObjectNameOrValueExpression objectOrVariable();
    public MoneyLiteral moneyLiteral();
    public OdbcLiteral odbcLiteral();
    private void initializeFactory();
    private static Int64[] mk_tokenSet_0_();
    private static Int64[] mk_tokenSet_1_();
    private static Int64[] mk_tokenSet_2_();
    private static Int64[] mk_tokenSet_3_();
    private static Int64[] mk_tokenSet_4_();
    private static Int64[] mk_tokenSet_5_();
    private static Int64[] mk_tokenSet_6_();
    private static Int64[] mk_tokenSet_7_();
    private static Int64[] mk_tokenSet_8_();
    private static Int64[] mk_tokenSet_9_();
    private static Int64[] mk_tokenSet_10_();
    private static Int64[] mk_tokenSet_11_();
    private static Int64[] mk_tokenSet_12_();
    private static Int64[] mk_tokenSet_13_();
    private static Int64[] mk_tokenSet_14_();
    private static Int64[] mk_tokenSet_15_();
    private static Int64[] mk_tokenSet_16_();
    private static Int64[] mk_tokenSet_17_();
    private static Int64[] mk_tokenSet_18_();
    private static Int64[] mk_tokenSet_19_();
    private static Int64[] mk_tokenSet_20_();
    private static Int64[] mk_tokenSet_21_();
    private static Int64[] mk_tokenSet_22_();
    private static Int64[] mk_tokenSet_23_();
    private static Int64[] mk_tokenSet_24_();
    private static Int64[] mk_tokenSet_25_();
    private static Int64[] mk_tokenSet_26_();
    private static Int64[] mk_tokenSet_27_();
    private static Int64[] mk_tokenSet_28_();
    private static Int64[] mk_tokenSet_29_();
    private static Int64[] mk_tokenSet_30_();
    private static Int64[] mk_tokenSet_31_();
    private static Int64[] mk_tokenSet_32_();
    private static Int64[] mk_tokenSet_33_();
    private static Int64[] mk_tokenSet_34_();
    private static Int64[] mk_tokenSet_35_();
    private static Int64[] mk_tokenSet_36_();
    private static Int64[] mk_tokenSet_37_();
    private static Int64[] mk_tokenSet_38_();
    private static Int64[] mk_tokenSet_39_();
    private static Int64[] mk_tokenSet_40_();
    private static Int64[] mk_tokenSet_41_();
    private static Int64[] mk_tokenSet_42_();
    private static Int64[] mk_tokenSet_43_();
    private static Int64[] mk_tokenSet_44_();
    private static Int64[] mk_tokenSet_45_();
    private static Int64[] mk_tokenSet_46_();
    private static Int64[] mk_tokenSet_47_();
    private static Int64[] mk_tokenSet_48_();
    private static Int64[] mk_tokenSet_49_();
    private static Int64[] mk_tokenSet_50_();
    private static Int64[] mk_tokenSet_51_();
    private static Int64[] mk_tokenSet_52_();
    private static Int64[] mk_tokenSet_53_();
    private static Int64[] mk_tokenSet_54_();
    private static Int64[] mk_tokenSet_55_();
    private static Int64[] mk_tokenSet_56_();
    private static Int64[] mk_tokenSet_57_();
    private static Int64[] mk_tokenSet_58_();
    private static Int64[] mk_tokenSet_59_();
    private static Int64[] mk_tokenSet_60_();
    private static Int64[] mk_tokenSet_61_();
    private static Int64[] mk_tokenSet_62_();
    private static Int64[] mk_tokenSet_63_();
    private static Int64[] mk_tokenSet_64_();
    private static Int64[] mk_tokenSet_65_();
    private static Int64[] mk_tokenSet_66_();
    private static Int64[] mk_tokenSet_67_();
    private static Int64[] mk_tokenSet_68_();
    private static Int64[] mk_tokenSet_69_();
    private static Int64[] mk_tokenSet_70_();
    private static Int64[] mk_tokenSet_71_();
    private static Int64[] mk_tokenSet_72_();
    private static Int64[] mk_tokenSet_73_();
    private static Int64[] mk_tokenSet_74_();
    private static Int64[] mk_tokenSet_75_();
    private static Int64[] mk_tokenSet_76_();
    private static Int64[] mk_tokenSet_77_();
    private static Int64[] mk_tokenSet_78_();
    private static Int64[] mk_tokenSet_79_();
    private static Int64[] mk_tokenSet_80_();
    private static Int64[] mk_tokenSet_81_();
    private static Int64[] mk_tokenSet_82_();
    private static Int64[] mk_tokenSet_83_();
    private static Int64[] mk_tokenSet_84_();
    private static Int64[] mk_tokenSet_85_();
    private static Int64[] mk_tokenSet_86_();
    private static Int64[] mk_tokenSet_87_();
    private static Int64[] mk_tokenSet_88_();
    private static Int64[] mk_tokenSet_89_();
    private static Int64[] mk_tokenSet_90_();
    private static Int64[] mk_tokenSet_91_();
    private static Int64[] mk_tokenSet_92_();
    private static Int64[] mk_tokenSet_93_();
    private static Int64[] mk_tokenSet_94_();
    private static Int64[] mk_tokenSet_95_();
    private static Int64[] mk_tokenSet_96_();
    private static Int64[] mk_tokenSet_97_();
    private static Int64[] mk_tokenSet_98_();
    private static Int64[] mk_tokenSet_99_();
    private static Int64[] mk_tokenSet_100_();
    private static Int64[] mk_tokenSet_101_();
    private static Int64[] mk_tokenSet_102_();
    private static Int64[] mk_tokenSet_103_();
    private static Int64[] mk_tokenSet_104_();
    private static Int64[] mk_tokenSet_105_();
    private static Int64[] mk_tokenSet_106_();
    private static Int64[] mk_tokenSet_107_();
    private static Int64[] mk_tokenSet_108_();
    private static Int64[] mk_tokenSet_109_();
    private static Int64[] mk_tokenSet_110_();
    private static Int64[] mk_tokenSet_111_();
    private static Int64[] mk_tokenSet_112_();
    private static Int64[] mk_tokenSet_113_();
    private static Int64[] mk_tokenSet_114_();
    private static Int64[] mk_tokenSet_115_();
    private static Int64[] mk_tokenSet_116_();
    private static Int64[] mk_tokenSet_117_();
    private static Int64[] mk_tokenSet_118_();
    private static Int64[] mk_tokenSet_119_();
    private static Int64[] mk_tokenSet_120_();
    private static Int64[] mk_tokenSet_121_();
    private static Int64[] mk_tokenSet_122_();
    private static Int64[] mk_tokenSet_123_();
    private static Int64[] mk_tokenSet_124_();
    private static Int64[] mk_tokenSet_125_();
    private static Int64[] mk_tokenSet_126_();
    private static Int64[] mk_tokenSet_127_();
    private static Int64[] mk_tokenSet_128_();
    private static Int64[] mk_tokenSet_129_();
    private static Int64[] mk_tokenSet_130_();
    private static Int64[] mk_tokenSet_131_();
    private static Int64[] mk_tokenSet_132_();
    private static Int64[] mk_tokenSet_133_();
    private static Int64[] mk_tokenSet_134_();
    private static Int64[] mk_tokenSet_135_();
    private static Int64[] mk_tokenSet_136_();
    private static Int64[] mk_tokenSet_137_();
    private static Int64[] mk_tokenSet_138_();
    private static Int64[] mk_tokenSet_139_();
    private static Int64[] mk_tokenSet_140_();
    private static Int64[] mk_tokenSet_141_();
    private static Int64[] mk_tokenSet_142_();
    private static Int64[] mk_tokenSet_143_();
    private static Int64[] mk_tokenSet_144_();
    private static Int64[] mk_tokenSet_145_();
    private static Int64[] mk_tokenSet_146_();
    private static Int64[] mk_tokenSet_147_();
    private static Int64[] mk_tokenSet_148_();
    private static Int64[] mk_tokenSet_149_();
    private static Int64[] mk_tokenSet_150_();
    private static Int64[] mk_tokenSet_151_();
    private static Int64[] mk_tokenSet_152_();
    private static Int64[] mk_tokenSet_153_();
    private static Int64[] mk_tokenSet_154_();
    private static Int64[] mk_tokenSet_155_();
    private static Int64[] mk_tokenSet_156_();
    private static Int64[] mk_tokenSet_157_();
    private static Int64[] mk_tokenSet_158_();
    private static Int64[] mk_tokenSet_159_();
    private static Int64[] mk_tokenSet_160_();
}
internal class Microsoft.SqlServer.TransactSql.ScriptDom.TSql110LexerInternal : TSqlLexerBaseInternal {
    public static int EOF;
    public static int NULL_TREE_LOOKAHEAD;
    public static int Add;
    public static int All;
    public static int Alter;
    public static int And;
    public static int Any;
    public static int As;
    public static int Asc;
    public static int Authorization;
    public static int Backup;
    public static int Begin;
    public static int Between;
    public static int Break;
    public static int Browse;
    public static int Bulk;
    public static int By;
    public static int Cascade;
    public static int Case;
    public static int Check;
    public static int Checkpoint;
    public static int Close;
    public static int Clustered;
    public static int Coalesce;
    public static int Collate;
    public static int Column;
    public static int Commit;
    public static int Compute;
    public static int Constraint;
    public static int Contains;
    public static int ContainsTable;
    public static int Continue;
    public static int Convert;
    public static int Create;
    public static int Cross;
    public static int Current;
    public static int CurrentDate;
    public static int CurrentTime;
    public static int CurrentTimestamp;
    public static int CurrentUser;
    public static int Cursor;
    public static int Database;
    public static int Dbcc;
    public static int Deallocate;
    public static int Declare;
    public static int Default;
    public static int Delete;
    public static int Deny;
    public static int Desc;
    public static int Distinct;
    public static int Distributed;
    public static int Double;
    public static int Drop;
    public static int Else;
    public static int End;
    public static int Errlvl;
    public static int Escape;
    public static int Except;
    public static int Exec;
    public static int Execute;
    public static int Exists;
    public static int Exit;
    public static int Fetch;
    public static int File;
    public static int FillFactor;
    public static int For;
    public static int Foreign;
    public static int FreeText;
    public static int FreeTextTable;
    public static int From;
    public static int Full;
    public static int Function;
    public static int GoTo;
    public static int Grant;
    public static int Group;
    public static int Having;
    public static int HoldLock;
    public static int Identity;
    public static int IdentityInsert;
    public static int IdentityColumn;
    public static int If;
    public static int In;
    public static int Index;
    public static int Inner;
    public static int Insert;
    public static int Intersect;
    public static int Into;
    public static int Is;
    public static int Join;
    public static int Key;
    public static int Kill;
    public static int Left;
    public static int Like;
    public static int LineNo;
    public static int National;
    public static int NoCheck;
    public static int NonClustered;
    public static int Not;
    public static int Null;
    public static int NullIf;
    public static int Of;
    public static int Off;
    public static int Offsets;
    public static int On;
    public static int Open;
    public static int OpenDataSource;
    public static int OpenQuery;
    public static int OpenRowSet;
    public static int OpenXml;
    public static int Option;
    public static int Or;
    public static int Order;
    public static int Outer;
    public static int Over;
    public static int Percent;
    public static int Plan;
    public static int Primary;
    public static int Print;
    public static int Proc;
    public static int Procedure;
    public static int Public;
    public static int Raiserror;
    public static int Read;
    public static int ReadText;
    public static int Reconfigure;
    public static int References;
    public static int Replication;
    public static int Restore;
    public static int Restrict;
    public static int Return;
    public static int Revoke;
    public static int Right;
    public static int Rollback;
    public static int RowCount;
    public static int RowGuidColumn;
    public static int Rule;
    public static int Save;
    public static int Schema;
    public static int Select;
    public static int SessionUser;
    public static int Set;
    public static int SetUser;
    public static int Shutdown;
    public static int Some;
    public static int Statistics;
    public static int SystemUser;
    public static int Table;
    public static int TextSize;
    public static int Then;
    public static int To;
    public static int Top;
    public static int Tran;
    public static int Transaction;
    public static int Trigger;
    public static int Truncate;
    public static int TSEqual;
    public static int Union;
    public static int Unique;
    public static int Update;
    public static int UpdateText;
    public static int Use;
    public static int User;
    public static int Values;
    public static int Varying;
    public static int View;
    public static int WaitFor;
    public static int When;
    public static int Where;
    public static int While;
    public static int With;
    public static int WriteText;
    public static int Disk;
    public static int Precision;
    public static int External;
    public static int Revert;
    public static int Pivot;
    public static int Unpivot;
    public static int TableSample;
    public static int Dump;
    public static int Load;
    public static int Merge;
    public static int StopList;
    public static int SemanticKeyPhraseTable;
    public static int SemanticSimilarityTable;
    public static int SemanticSimilarityDetailsTable;
    public static int TryConvert;
    public static int Bang;
    public static int PercentSign;
    public static int Ampersand;
    public static int LeftParenthesis;
    public static int RightParenthesis;
    public static int LeftCurly;
    public static int RightCurly;
    public static int Star;
    public static int MultiplyEquals;
    public static int Plus;
    public static int Comma;
    public static int Minus;
    public static int Dot;
    public static int Divide;
    public static int Colon;
    public static int DoubleColon;
    public static int Semicolon;
    public static int LessThan;
    public static int EqualsSign;
    public static int RightOuterJoin;
    public static int GreaterThan;
    public static int Circumflex;
    public static int VerticalLine;
    public static int Tilde;
    public static int AddEquals;
    public static int SubtractEquals;
    public static int DivideEquals;
    public static int ModEquals;
    public static int BitwiseAndEquals;
    public static int BitwiseOrEquals;
    public static int BitwiseXorEquals;
    public static int Go;
    public static int Label;
    public static int Integer;
    public static int Numeric;
    public static int Real;
    public static int HexLiteral;
    public static int Money;
    public static int SqlCommandIdentifier;
    public static int PseudoColumn;
    public static int DollarPartition;
    public static int AsciiStringOrQuotedIdentifier;
    public static int AsciiStringLiteral;
    public static int UnicodeStringLiteral;
    public static int Identifier;
    public static int QuotedIdentifier;
    public static int Variable;
    public static int OdbcInitiator;
    public static int ProcNameSemicolon;
    public static int SingleLineComment;
    public static int MultilineComment;
    public static int WhiteSpace;
    public static int Digit;
    public static int FirstLetter;
    public static int Letter;
    public static int CharHighNotWhitespace;
    public static int MoneySign;
    public static int WS_CHAR_WO_NEWLINE;
    public static int Number;
    public static int Exponent;
    public static int EndOfLine;
    public static BitSet tokenSet_0_;
    public static BitSet tokenSet_1_;
    public static BitSet tokenSet_2_;
    public static BitSet tokenSet_3_;
    public static BitSet tokenSet_4_;
    public static BitSet tokenSet_5_;
    public static BitSet tokenSet_6_;
    public static BitSet tokenSet_7_;
    public static BitSet tokenSet_8_;
    public static BitSet tokenSet_9_;
    public static BitSet tokenSet_10_;
    public static BitSet tokenSet_11_;
    public static BitSet tokenSet_12_;
    public static BitSet tokenSet_13_;
    public TSql110LexerInternal(Stream ins);
    public TSql110LexerInternal(TextReader r);
    public TSql110LexerInternal(InputBuffer ib);
    public TSql110LexerInternal(LexerSharedInputState state);
    private static TSql110LexerInternal();
    private void initialize();
    public virtual IToken nextToken();
    public void mBang(bool _createToken);
    public void mPercentSign(bool _createToken);
    public void mAmpersand(bool _createToken);
    public void mLeftParenthesis(bool _createToken);
    public void mRightParenthesis(bool _createToken);
    public void mLeftCurly(bool _createToken);
    public void mRightCurly(bool _createToken);
    public void mStar(bool _createToken);
    public void mMultiplyEquals(bool _createToken);
    public void mPlus(bool _createToken);
    public void mComma(bool _createToken);
    public void mMinus(bool _createToken);
    protected void mDot(bool _createToken);
    public void mDivide(bool _createToken);
    public void mColon(bool _createToken);
    public void mDoubleColon(bool _createToken);
    public void mLessThan(bool _createToken);
    public void mEqualsSign(bool _createToken);
    public void mRightOuterJoin(bool _createToken);
    public void mGreaterThan(bool _createToken);
    public void mCircumflex(bool _createToken);
    public void mVerticalLine(bool _createToken);
    public void mTilde(bool _createToken);
    public void mAddEquals(bool _createToken);
    public void mSubtractEquals(bool _createToken);
    public void mDivideEquals(bool _createToken);
    public void mModEquals(bool _createToken);
    public void mBitwiseAndEquals(bool _createToken);
    public void mBitwiseOrEquals(bool _createToken);
    public void mBitwiseXorEquals(bool _createToken);
    protected void mSemicolon(bool _createToken);
    protected void mDigit(bool _createToken);
    protected void mFirstLetter(bool _createToken);
    protected void mCharHighNotWhitespace(bool _createToken);
    protected void mLetter(bool _createToken);
    protected void mMoneySign(bool _createToken);
    public void mProcNameSemicolon(bool _createToken);
    protected void mWS_CHAR_WO_NEWLINE(bool _createToken);
    public void mNumber(bool _createToken);
    public void mWhiteSpace(bool _createToken);
    protected void mEndOfLine(bool _createToken);
    public void mGo(bool _createToken);
    protected void mLabel(bool _createToken);
    protected void mInteger(bool _createToken);
    protected void mReal(bool _createToken);
    protected void mNumeric(bool _createToken);
    protected void mHexLiteral(bool _createToken);
    protected void mExponent(bool _createToken);
    protected void mMoney(bool _createToken);
    protected void mSqlCommandIdentifier(bool _createToken);
    protected void mPseudoColumn(bool _createToken);
    protected void mDollarPartition(bool _createToken);
    protected void mAsciiStringOrQuotedIdentifier(bool _createToken);
    public void mAsciiStringLiteral(bool _createToken);
    public void mUnicodeStringLiteral(bool _createToken);
    public void mIdentifier(bool _createToken);
    public void mQuotedIdentifier(bool _createToken);
    public void mVariable(bool _createToken);
    protected void mOdbcInitiator(bool _createToken);
    public void mSingleLineComment(bool _createToken);
    public void mMultilineComment(bool _createToken);
    private static Int64[] mk_tokenSet_0_();
    private static Int64[] mk_tokenSet_1_();
    private static Int64[] mk_tokenSet_2_();
    private static Int64[] mk_tokenSet_3_();
    private static Int64[] mk_tokenSet_4_();
    private static Int64[] mk_tokenSet_5_();
    private static Int64[] mk_tokenSet_6_();
    private static Int64[] mk_tokenSet_7_();
    private static Int64[] mk_tokenSet_8_();
    private static Int64[] mk_tokenSet_9_();
    private static Int64[] mk_tokenSet_10_();
    private static Int64[] mk_tokenSet_11_();
    private static Int64[] mk_tokenSet_12_();
    private static Int64[] mk_tokenSet_13_();
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.TSql110Parser : TSqlParser {
    public TSql110Parser(bool initialQuotedIdentifiers);
    internal virtual TSqlLexerBaseInternal GetNewInternalLexer();
    private TSql110ParserInternal GetNewInternalParser();
    private TSql110ParserInternal GetNewInternalParserForInput(TextReader input, IList`1& errors, int startOffset, int startLine, int startColumn);
    public virtual TSqlFragment Parse(IList`1<TSqlParserToken> tokens, IList`1& errors);
    public virtual ChildObjectName ParseChildObjectName(TextReader input, IList`1& errors, int startOffset, int startLine, int startColumn);
    public virtual SchemaObjectName ParseSchemaObjectName(TextReader input, IList`1& errors, int startOffset, int startLine, int startColumn);
    public virtual DataTypeReference ParseScalarDataType(TextReader input, IList`1& errors, int startOffset, int startLine, int startColumn);
    public virtual ScalarExpression ParseExpression(TextReader input, IList`1& errors, int startOffset, int startLine, int startColumn);
    public virtual BooleanExpression ParseBooleanExpression(TextReader input, IList`1& errors, int startOffset, int startLine, int startColumn);
    public virtual StatementList ParseStatementList(TextReader input, IList`1& errors, int startOffset, int startLine, int startColumn);
    public virtual SelectStatement ParseSubQueryExpressionWithOptionalCTE(TextReader input, IList`1& errors, int startOffset, int startLine, int startColumn);
    internal IPv4 ParseIPv4(TextReader input, IList`1& errors, int startOffset, int startLine, int startColumn);
    public virtual TSqlFragment ParseConstantOrIdentifier(TextReader input, IList`1& errors, int startOffset, int startLine, int startColumn);
    public virtual TSqlFragment ParseConstantOrIdentifierWithDefault(TextReader input, IList`1& errors, int startOffset, int startLine, int startColumn);
    internal virtual TSqlStatement PhaseOneParse(TextReader input);
}
internal abstract class Microsoft.SqlServer.TransactSql.ScriptDom.TSql110ParserBaseInternal : TSql100ParserBaseInternal {
    private static String[] _optionsValidForCreateDatabase;
    protected TSql110ParserBaseInternal(TokenBuffer tokenBuf, int k);
    protected TSql110ParserBaseInternal(ParserSharedInputState state, int k);
    protected TSql110ParserBaseInternal(TokenStream lexer, int k);
    public TSql110ParserBaseInternal(bool initialQuotedIdentifiersOn);
    private static TSql110ParserBaseInternal();
    private static bool isFollowingDelimiter(WindowDelimiter delimiter);
    private static bool isPrecedingDelimiter(WindowDelimiter delimiter);
    protected static void CheckWindowFrame(WindowFrameClause windowFrameClause);
    protected String[] OptionValidForCreateDatabase();
}
internal class Microsoft.SqlServer.TransactSql.ScriptDom.TSql110ParserInternal : TSql110ParserBaseInternal {
    public static int EOF;
    public static int NULL_TREE_LOOKAHEAD;
    public static int Add;
    public static int All;
    public static int Alter;
    public static int And;
    public static int Any;
    public static int As;
    public static int Asc;
    public static int Authorization;
    public static int Backup;
    public static int Begin;
    public static int Between;
    public static int Break;
    public static int Browse;
    public static int Bulk;
    public static int By;
    public static int Cascade;
    public static int Case;
    public static int Check;
    public static int Checkpoint;
    public static int Close;
    public static int Clustered;
    public static int Coalesce;
    public static int Collate;
    public static int Column;
    public static int Commit;
    public static int Compute;
    public static int Constraint;
    public static int Contains;
    public static int ContainsTable;
    public static int Continue;
    public static int Convert;
    public static int Create;
    public static int Cross;
    public static int Current;
    public static int CurrentDate;
    public static int CurrentTime;
    public static int CurrentTimestamp;
    public static int CurrentUser;
    public static int Cursor;
    public static int Database;
    public static int Dbcc;
    public static int Deallocate;
    public static int Declare;
    public static int Default;
    public static int Delete;
    public static int Deny;
    public static int Desc;
    public static int Distinct;
    public static int Distributed;
    public static int Double;
    public static int Drop;
    public static int Else;
    public static int End;
    public static int Errlvl;
    public static int Escape;
    public static int Except;
    public static int Exec;
    public static int Execute;
    public static int Exists;
    public static int Exit;
    public static int Fetch;
    public static int File;
    public static int FillFactor;
    public static int For;
    public static int Foreign;
    public static int FreeText;
    public static int FreeTextTable;
    public static int From;
    public static int Full;
    public static int Function;
    public static int GoTo;
    public static int Grant;
    public static int Group;
    public static int Having;
    public static int HoldLock;
    public static int Identity;
    public static int IdentityInsert;
    public static int IdentityColumn;
    public static int If;
    public static int In;
    public static int Index;
    public static int Inner;
    public static int Insert;
    public static int Intersect;
    public static int Into;
    public static int Is;
    public static int Join;
    public static int Key;
    public static int Kill;
    public static int Left;
    public static int Like;
    public static int LineNo;
    public static int National;
    public static int NoCheck;
    public static int NonClustered;
    public static int Not;
    public static int Null;
    public static int NullIf;
    public static int Of;
    public static int Off;
    public static int Offsets;
    public static int On;
    public static int Open;
    public static int OpenDataSource;
    public static int OpenQuery;
    public static int OpenRowSet;
    public static int OpenXml;
    public static int Option;
    public static int Or;
    public static int Order;
    public static int Outer;
    public static int Over;
    public static int Percent;
    public static int Plan;
    public static int Primary;
    public static int Print;
    public static int Proc;
    public static int Procedure;
    public static int Public;
    public static int Raiserror;
    public static int Read;
    public static int ReadText;
    public static int Reconfigure;
    public static int References;
    public static int Replication;
    public static int Restore;
    public static int Restrict;
    public static int Return;
    public static int Revoke;
    public static int Right;
    public static int Rollback;
    public static int RowCount;
    public static int RowGuidColumn;
    public static int Rule;
    public static int Save;
    public static int Schema;
    public static int Select;
    public static int SessionUser;
    public static int Set;
    public static int SetUser;
    public static int Shutdown;
    public static int Some;
    public static int Statistics;
    public static int SystemUser;
    public static int Table;
    public static int TextSize;
    public static int Then;
    public static int To;
    public static int Top;
    public static int Tran;
    public static int Transaction;
    public static int Trigger;
    public static int Truncate;
    public static int TSEqual;
    public static int Union;
    public static int Unique;
    public static int Update;
    public static int UpdateText;
    public static int Use;
    public static int User;
    public static int Values;
    public static int Varying;
    public static int View;
    public static int WaitFor;
    public static int When;
    public static int Where;
    public static int While;
    public static int With;
    public static int WriteText;
    public static int Disk;
    public static int Precision;
    public static int External;
    public static int Revert;
    public static int Pivot;
    public static int Unpivot;
    public static int TableSample;
    public static int Dump;
    public static int Load;
    public static int Merge;
    public static int StopList;
    public static int SemanticKeyPhraseTable;
    public static int SemanticSimilarityTable;
    public static int SemanticSimilarityDetailsTable;
    public static int TryConvert;
    public static int Bang;
    public static int PercentSign;
    public static int Ampersand;
    public static int LeftParenthesis;
    public static int RightParenthesis;
    public static int LeftCurly;
    public static int RightCurly;
    public static int Star;
    public static int MultiplyEquals;
    public static int Plus;
    public static int Comma;
    public static int Minus;
    public static int Dot;
    public static int Divide;
    public static int Colon;
    public static int DoubleColon;
    public static int Semicolon;
    public static int LessThan;
    public static int EqualsSign;
    public static int RightOuterJoin;
    public static int GreaterThan;
    public static int Circumflex;
    public static int VerticalLine;
    public static int Tilde;
    public static int AddEquals;
    public static int SubtractEquals;
    public static int DivideEquals;
    public static int ModEquals;
    public static int BitwiseAndEquals;
    public static int BitwiseOrEquals;
    public static int BitwiseXorEquals;
    public static int Go;
    public static int Label;
    public static int Integer;
    public static int Numeric;
    public static int Real;
    public static int HexLiteral;
    public static int Money;
    public static int SqlCommandIdentifier;
    public static int PseudoColumn;
    public static int DollarPartition;
    public static int AsciiStringOrQuotedIdentifier;
    public static int AsciiStringLiteral;
    public static int UnicodeStringLiteral;
    public static int Identifier;
    public static int QuotedIdentifier;
    public static int Variable;
    public static int OdbcInitiator;
    public static int ProcNameSemicolon;
    public static int SingleLineComment;
    public static int MultilineComment;
    public static int WhiteSpace;
    public static String[] tokenNames_;
    public static BitSet tokenSet_0_;
    public static BitSet tokenSet_1_;
    public static BitSet tokenSet_2_;
    public static BitSet tokenSet_3_;
    public static BitSet tokenSet_4_;
    public static BitSet tokenSet_5_;
    public static BitSet tokenSet_6_;
    public static BitSet tokenSet_7_;
    public static BitSet tokenSet_8_;
    public static BitSet tokenSet_9_;
    public static BitSet tokenSet_10_;
    public static BitSet tokenSet_11_;
    public static BitSet tokenSet_12_;
    public static BitSet tokenSet_13_;
    public static BitSet tokenSet_14_;
    public static BitSet tokenSet_15_;
    public static BitSet tokenSet_16_;
    public static BitSet tokenSet_17_;
    public static BitSet tokenSet_18_;
    public static BitSet tokenSet_19_;
    public static BitSet tokenSet_20_;
    public static BitSet tokenSet_21_;
    public static BitSet tokenSet_22_;
    public static BitSet tokenSet_23_;
    public static BitSet tokenSet_24_;
    public static BitSet tokenSet_25_;
    public static BitSet tokenSet_26_;
    public static BitSet tokenSet_27_;
    public static BitSet tokenSet_28_;
    public static BitSet tokenSet_29_;
    public static BitSet tokenSet_30_;
    public static BitSet tokenSet_31_;
    public static BitSet tokenSet_32_;
    public static BitSet tokenSet_33_;
    public static BitSet tokenSet_34_;
    public static BitSet tokenSet_35_;
    public static BitSet tokenSet_36_;
    public static BitSet tokenSet_37_;
    public static BitSet tokenSet_38_;
    public static BitSet tokenSet_39_;
    public static BitSet tokenSet_40_;
    public static BitSet tokenSet_41_;
    public static BitSet tokenSet_42_;
    public static BitSet tokenSet_43_;
    public static BitSet tokenSet_44_;
    public static BitSet tokenSet_45_;
    public static BitSet tokenSet_46_;
    public static BitSet tokenSet_47_;
    public static BitSet tokenSet_48_;
    public static BitSet tokenSet_49_;
    public static BitSet tokenSet_50_;
    public static BitSet tokenSet_51_;
    public static BitSet tokenSet_52_;
    public static BitSet tokenSet_53_;
    public static BitSet tokenSet_54_;
    public static BitSet tokenSet_55_;
    public static BitSet tokenSet_56_;
    public static BitSet tokenSet_57_;
    public static BitSet tokenSet_58_;
    public static BitSet tokenSet_59_;
    public static BitSet tokenSet_60_;
    public static BitSet tokenSet_61_;
    public static BitSet tokenSet_62_;
    public static BitSet tokenSet_63_;
    public static BitSet tokenSet_64_;
    public static BitSet tokenSet_65_;
    public static BitSet tokenSet_66_;
    public static BitSet tokenSet_67_;
    public static BitSet tokenSet_68_;
    public static BitSet tokenSet_69_;
    public static BitSet tokenSet_70_;
    public static BitSet tokenSet_71_;
    public static BitSet tokenSet_72_;
    public static BitSet tokenSet_73_;
    public static BitSet tokenSet_74_;
    public static BitSet tokenSet_75_;
    public static BitSet tokenSet_76_;
    public static BitSet tokenSet_77_;
    public static BitSet tokenSet_78_;
    public static BitSet tokenSet_79_;
    public static BitSet tokenSet_80_;
    public static BitSet tokenSet_81_;
    public static BitSet tokenSet_82_;
    public static BitSet tokenSet_83_;
    public static BitSet tokenSet_84_;
    public static BitSet tokenSet_85_;
    public static BitSet tokenSet_86_;
    public static BitSet tokenSet_87_;
    public static BitSet tokenSet_88_;
    public static BitSet tokenSet_89_;
    public static BitSet tokenSet_90_;
    public static BitSet tokenSet_91_;
    public static BitSet tokenSet_92_;
    public static BitSet tokenSet_93_;
    public static BitSet tokenSet_94_;
    public static BitSet tokenSet_95_;
    public static BitSet tokenSet_96_;
    public static BitSet tokenSet_97_;
    public static BitSet tokenSet_98_;
    public static BitSet tokenSet_99_;
    public static BitSet tokenSet_100_;
    public static BitSet tokenSet_101_;
    public static BitSet tokenSet_102_;
    public static BitSet tokenSet_103_;
    public static BitSet tokenSet_104_;
    public static BitSet tokenSet_105_;
    public static BitSet tokenSet_106_;
    public static BitSet tokenSet_107_;
    public static BitSet tokenSet_108_;
    public static BitSet tokenSet_109_;
    public static BitSet tokenSet_110_;
    public static BitSet tokenSet_111_;
    public static BitSet tokenSet_112_;
    public static BitSet tokenSet_113_;
    public static BitSet tokenSet_114_;
    public static BitSet tokenSet_115_;
    public static BitSet tokenSet_116_;
    public static BitSet tokenSet_117_;
    public static BitSet tokenSet_118_;
    public static BitSet tokenSet_119_;
    public static BitSet tokenSet_120_;
    public static BitSet tokenSet_121_;
    public static BitSet tokenSet_122_;
    public static BitSet tokenSet_123_;
    public static BitSet tokenSet_124_;
    public static BitSet tokenSet_125_;
    public static BitSet tokenSet_126_;
    public static BitSet tokenSet_127_;
    public static BitSet tokenSet_128_;
    public static BitSet tokenSet_129_;
    public static BitSet tokenSet_130_;
    public static BitSet tokenSet_131_;
    public static BitSet tokenSet_132_;
    public static BitSet tokenSet_133_;
    public static BitSet tokenSet_134_;
    public static BitSet tokenSet_135_;
    public static BitSet tokenSet_136_;
    public static BitSet tokenSet_137_;
    public static BitSet tokenSet_138_;
    public static BitSet tokenSet_139_;
    public static BitSet tokenSet_140_;
    public static BitSet tokenSet_141_;
    public static BitSet tokenSet_142_;
    public static BitSet tokenSet_143_;
    public static BitSet tokenSet_144_;
    public static BitSet tokenSet_145_;
    public static BitSet tokenSet_146_;
    public static BitSet tokenSet_147_;
    public static BitSet tokenSet_148_;
    public static BitSet tokenSet_149_;
    public static BitSet tokenSet_150_;
    public static BitSet tokenSet_151_;
    public static BitSet tokenSet_152_;
    public static BitSet tokenSet_153_;
    public static BitSet tokenSet_154_;
    public static BitSet tokenSet_155_;
    public static BitSet tokenSet_156_;
    public static BitSet tokenSet_157_;
    public static BitSet tokenSet_158_;
    public static BitSet tokenSet_159_;
    public static BitSet tokenSet_160_;
    public static BitSet tokenSet_161_;
    public static BitSet tokenSet_162_;
    public static BitSet tokenSet_163_;
    public static BitSet tokenSet_164_;
    public static BitSet tokenSet_165_;
    public static BitSet tokenSet_166_;
    public static BitSet tokenSet_167_;
    public static BitSet tokenSet_168_;
    public static BitSet tokenSet_169_;
    public static BitSet tokenSet_170_;
    public static BitSet tokenSet_171_;
    public static BitSet tokenSet_172_;
    public static BitSet tokenSet_173_;
    public static BitSet tokenSet_174_;
    public static BitSet tokenSet_175_;
    public static BitSet tokenSet_176_;
    public static BitSet tokenSet_177_;
    public static BitSet tokenSet_178_;
    public static BitSet tokenSet_179_;
    public TSql110ParserInternal(bool initialQuotedIdentifiersOn);
    protected TSql110ParserInternal(TokenBuffer tokenBuf, int k);
    public TSql110ParserInternal(TokenBuffer tokenBuf);
    protected TSql110ParserInternal(TokenStream lexer, int k);
    public TSql110ParserInternal(TokenStream lexer);
    public TSql110ParserInternal(ParserSharedInputState state);
    private static TSql110ParserInternal();
    protected void initialize();
    public ChildObjectName entryPointChildObjectName();
    public ChildObjectName childObjectNameWithThreePrefixes();
    public SchemaObjectName entryPointSchemaObjectName();
    public SchemaObjectName schemaObjectFourPartName();
    public DataTypeReference entryPointScalarDataType();
    public DataTypeReference scalarDataType();
    public ScalarExpression entryPointExpression();
    public ScalarExpression expression();
    public BooleanExpression entryPointBooleanExpression();
    public BooleanExpression booleanExpression();
    public StatementList entryPointStatementList();
    public StatementList statementList(Boolean& vParseErrorOccurred);
    public SelectStatement entryPointSubqueryExpressionWithOptionalCTE();
    public SelectFunctionReturnType functionReturnClauseRelational();
    public IPv4 entryPointIPv4Address();
    public IPv4 ipAddressV4();
    public TSqlFragment entryPointConstantOrIdentifier();
    public ScalarExpression possibleNegativeConstantOrIdentifier();
    public TSqlFragment entryPointConstantOrIdentifierWithDefault();
    public ScalarExpression possibleNegativeConstantOrIdentifierWithDefault();
    public TSqlScript script();
    public TSqlBatch batch();
    public TSqlStatement lastStatementOptSemi();
    public ExecuteStatement optSimpleExecute();
    public TSqlStatement statementOptSemi();
    public TSqlStatement statement();
    public void optSemicolons(TSqlStatement vParent);
    public TSqlStatement lastStatement();
    public ExecutableProcedureReference execProc();
    public CreateTableStatement createTableStatement();
    public AlterTableStatement alterTableStatement();
    public TSqlStatement createIndexStatement();
    public TSqlStatement declareStatements();
    public TSqlStatement setStatements();
    public TSqlStatement beginStatements();
    public BreakStatement breakStatement();
    public ContinueStatement continueStatement();
    public IfStatement ifStatement();
    public WhileStatement whileStatement();
    public LabelStatement labelStatement();
    public TSqlStatement backupStatements();
    public TSqlStatement restoreStatements();
    public GoToStatement gotoStatement();
    public SaveTransactionStatement saveTransactionStatement();
    public RollbackTransactionStatement rollbackTransactionStatement();
    public CommitTransactionStatement commitTransactionStatement();
    public CreateStatisticsStatement createStatisticsStatement();
    public UpdateStatisticsStatement updateStatisticsStatement();
    public TSqlStatement alterDatabaseStatements();
    public ExecuteStatement executeStatement();
    public StatementWithCtesAndXmlNamespaces withCommonTableExpressionsAndXmlNamespacesStatements();
    public RaiseErrorStatement raiseErrorStatement();
    public TSqlStatement alter2005Statements();
    public TSqlStatement create2005Statements();
    public TSqlStatement createDatabaseStatements();
    public AddSignatureStatement addSignatureStatement();
    public TSqlStatement identifierStatements();
    public PrintStatement printStatement();
    public WaitForStatement waitForStatement();
    public ReadTextStatement readTextStatement();
    public UpdateTextStatement updateTextStatement();
    public WriteTextStatement writeTextStatement();
    public LineNoStatement lineNoStatement();
    public UseStatement useStatement();
    public TSqlStatement killStatements();
    public BulkInsertStatement bulkInsertStatement();
    public InsertBulkStatement insertBulkStatement();
    public CheckpointStatement checkpointStatement();
    public ReconfigureStatement reconfigureStatement();
    public ShutdownStatement shutdownStatement();
    public SetUserStatement setUserStatement();
    public TruncateTableStatement truncateTableStatement();
    public GrantStatement grantStatement90();
    public DenyStatement denyStatement90();
    public RevokeStatement revokeStatement90();
    public ReturnStatement returnStatement();
    public TSqlStatement openStatements();
    public TSqlStatement closeStatements();
    public DeallocateCursorStatement deallocateCursorStatement();
    public FetchCursorStatement fetchCursorStatement();
    public TSqlStatement dropStatements();
    public DbccStatement dbccStatement();
    public RevertStatement revertStatement();
    public ExecuteAsStatement executeAsStatement();
    public EndConversationStatement endConversationStatement();
    public WithCtesAndXmlNamespaces withCommonTableExpressionsAndXmlNamespaces();
    public SelectStatement select(SubDmlFlags subDmlFlags);
    public DeleteStatement deleteStatement(SubDmlFlags subDmlFlags);
    public InsertStatement insertStatement(SubDmlFlags subDmlFlags);
    public UpdateStatement updateStatement(SubDmlFlags subDmlFlags);
    public MergeStatement mergeStatement(SubDmlFlags subDmlFlags);
    public CreateProcedureStatement createProcedureStatement();
    public AlterProcedureStatement alterProcedureStatement();
    public CreateTriggerStatement createTriggerStatement();
    public AlterTriggerStatement alterTriggerStatement();
    public CreateDefaultStatement createDefaultStatement();
    public CreateRuleStatement createRuleStatement();
    public CreateViewStatement createViewStatement();
    public AlterViewStatement alterViewStatement();
    public CreateFunctionStatement createFunctionStatement();
    public AlterFunctionStatement alterFunctionStatement();
    public CreateSchemaStatement createSchemaStatement();
    public CreateFederationStatement createFederationStatement();
    public AlterFederationStatement alterFederationStatement();
    public UseFederationStatement useFederationStatement();
    public EnableDisableTriggerStatement disableTriggerStatement();
    public EnableDisableTriggerStatement enableTriggerStatement();
    public MoveConversationStatement moveConversationStatement();
    public GetConversationGroupStatement getConversationGroupStatement();
    public ReceiveStatement receiveStatement();
    public SendStatement sendStatement();
    public ThrowStatement throwStatement();
    public void enableDisableTriggerBody(EnableDisableTriggerStatement vParent);
    public SchemaObjectName schemaObjectThreePartName();
    public TriggerObject triggerObject();
    public CreateAggregateStatement createAggregateStatement();
    public CreateApplicationRoleStatement createApplicationRoleStatement();
    public CreateAssemblyStatement createAssemblyStatement();
    public CreateAsymmetricKeyStatement createAsymmetricKeyStatement();
    public CreateAvailabilityGroupStatement createAvailabilityGroupStatement();
    public CreateBrokerPriorityStatement createBrokerPriorityStatement();
    public CreateCertificateStatement createCertificateStatement();
    public CreateColumnStoreIndexStatement createColumnStoreIndexStatement(IToken tUnique, Nullable`1<bool> isClustered);
    public CreateContractStatement createContractStatement();
    public CreateCredentialStatement createCredentialStatement();
    public CreateCryptographicProviderStatement createCryptographicProviderStatement();
    public CreateEndpointStatement createEndpointStatement();
    public TSqlStatement createEventStatement();
    public TSqlStatement createFulltextStatement();
    public IndexStatement createPrimaryXmlIndexStatement();
    public CreateSelectiveXmlIndexStatement createSelectiveXmlIndexStatement();
    public TSqlStatement createXmlStatements();
    public CreateLoginStatement createLoginStatement();
    public CreateMessageTypeStatement createMessageTypeStatement();
    public CreateMasterKeyStatement createMasterKeyStatement();
    public TSqlStatement createPartitionStatement();
    public CreateQueueStatement createQueueStatement();
    public CreateRemoteServiceBindingStatement createRemoteServiceBindingStatement();
    public CreateResourcePoolStatement createResourcePoolStatement();
    public CreateRoleStatement createRoleStatement();
    public CreateRouteStatement createRouteStatement();
    public CreateSearchPropertyListStatement createSearchPropertyListStatement();
    public CreateServiceStatement createServiceStatement();
    public CreateSpatialIndexStatement createSpatialIndexStatement();
    public CreateSymmetricKeyStatement createSymmetricKeyStatement();
    public CreateSynonymStatement createSynonymStatement();
    public CreateTypeStatement createTypeStatement();
    public TSqlStatement createServerStatements();
    public CreateWorkloadGroupStatement createWorkloadGroupStatement();
    public CreateSequenceStatement createSequenceStatement();
    public CreateUserStatement createUserStatement();
    public ProcedureParameter aggregateParameter();
    public AssemblyName assemblyName();
    public Identifier identifierVariable();
    public void applicationRoleStatement(ApplicationRoleStatement vParent, bool defaultSchemaAndPasswordOnly);
    public Identifier identifier();
    public void authorizationOpt(IAuthorization vParent);
    public void expressionList(TSqlFragment vParent, IList`1<ScalarExpression> expressions);
    public PermissionSetAssemblyOption assemblyPermissionSetOption(IToken tPermissionSetVisibility);
    public void createAsymmetricKeyParams(CreateAsymmetricKeyStatement vParent);
    public Literal encryptClause();
    public EncryptionSource asymKeySource();
    public void asymKeySpec(CreateAsymmetricKeyStatement vParent);
    public FileEncryptionSource fileEncryptionSource();
    public AssemblyEncryptionSource assemblyEncryptionSource();
    public ProviderEncryptionSource providerEncryptionSource();
    public void providerKeySourceOptions(IList`1<KeyOption> optionsList, TSqlFragment vParent);
    public StringLiteral stringLiteral();
    public void createCertificateParams(CreateCertificateStatement vParent);
    public void createCertificateActivityFlag(CertificateStatementBase vParent);
    public void certificateSource(CreateCertificateStatement vParent);
    public CertificateOption certificateOption(CertificateOptionKinds encountered);
    public OptionState optionOnOff(TSqlFragment vParent);
    public void privateKeySpec(CertificateStatementBase vParent);
    public void certificatePrivateKeySpec(CertificateStatementBase vParent);
    public void passwordChangeOption(IPasswordChangeOption vParent);
    public ContractMessage contractMessage();
    public void credentialStatementBody(CredentialStatement vParent);
    public TSqlStatement createServerAuditStatements();
    public CreateServerRoleStatement createServerRoleStatement();
    public CreateServerAuditSpecificationStatement createServerAuditSpecificationStatement();
    public CreateServerAuditStatement createServerAuditStatement();
    public AuditTarget auditTargetClause(bool filePathRequired);
    public void auditCreateWithClause(ServerAuditStatement vParent);
    public BooleanExpression eventBooleanExpression();
    public AuditTargetOption auditFileOption();
    public MaxSizeAuditTargetOption maxSizeAuditFileOption();
    public MaxRolloverFilesAuditTargetOption maxRolloverFilesAuditFileOption();
    public OnOffAuditTargetOption reserveDiskSpaceAuditFileOption();
    public LiteralAuditTargetOption maxFilesAuditFileOption();
    public LiteralAuditTargetOption filePathAuditFileOption();
    public IntegerLiteral integer();
    public AuditOption auditCreateOption();
    public void auditWithClause(ServerAuditStatement vParent);
    public AuditOption auditOption();
    public QueueDelayAuditOption queueDelayAuditOption(IToken tOption);
    public OnFailureAuditOption onFailureAuditOption(IToken tOption);
    public AuditGuidAuditOption auditGuidAuditOption(IToken tOption);
    public StateAuditOption stateAuditOption(IToken tOption);
    public void auditSpecificationForClause(AuditSpecificationStatement vParent);
    public AuditSpecificationPart createAuditSpecificationDetail();
    public void auditSpecificationStateOpt(AuditSpecificationStatement vParent);
    public TSqlStatement alterServerStatements();
    public TSqlStatement alterServerAuditStatements();
    public TSqlStatement alterServerConfigurationStatement();
    public AlterServerRoleStatement alterServerRoleStatement();
    public AlterServerAuditSpecificationStatement alterServerAuditSpecificationStatement();
    public AlterServerAuditStatement alterServerAuditStatement();
    public AuditSpecificationPart auditSpecificationDetail();
    public AlterServerConfigurationStatement alterServerConfigurationSetProcessAffinityStatement();
    public AlterServerConfigurationSetBufferPoolExtensionStatement alterServerConfigurationSetBufferPoolExtensionStatement();
    public AlterServerConfigurationSetDiagnosticsLogStatement alterServerConfigurationSetDiagnosticsLogStatement();
    public AlterServerConfigurationSetFailoverClusterPropertyStatement alterServerConfigurationSetFailoverClusterPropertyStatement();
    public AlterServerConfigurationSetHadrClusterStatement alterServerConfigurationSetHadrClusterStatement();
    public AlterServerConfigurationBufferPoolExtensionContainerOption alterServerConfigurationBufferPoolExtensionContainerOption();
    public OnOffOptionValue onOffOptionValue();
    public AlterServerConfigurationBufferPoolExtensionOption alterServerConfigurationBufferPoolExtensionFileNameOption();
    public AlterServerConfigurationBufferPoolExtensionSizeOption alterServerConfigurationBufferPoolExtensionSizeOption();
    public LiteralOptionValue stringLiteralOptionValue();
    public LiteralOptionValue integerLiteralOptionValue();
    public MemoryUnit memUnit(TSqlFragment vParent);
    public AlterServerConfigurationDiagnosticsLogOption alterServerConfigurationDiagnosticsLogOption();
    public AlterServerConfigurationDiagnosticsLogMaxSizeOption alterServerConfigurationDiagnosticsLogMaxSizeOption();
    public LiteralOptionValue stringOrDefaultLiteralOptionValue();
    public LiteralOptionValue integerOrDefaultLiteralOptionValue();
    public LiteralOptionValue defaultLiteralOptionValue();
    public AlterServerConfigurationFailoverClusterPropertyOption alterServerConfigurationFailoverClusterPropertyOption();
    public LiteralOptionValue binaryOrDefaultLiteralOptionValue();
    public AlterServerConfigurationHadrClusterOption alterServerConfigurationHadrClusterOption();
    public void affinityRangeList(AlterServerConfigurationStatement vParent);
    public ProcessAffinityRange affinityRange();
    public AlterDatabaseAuditSpecificationStatement alterDatabaseAuditSpecification(IToken tAlter);
    public AlterDatabaseStatement alterDatabase(IToken tAlter);
    public AlterDatabaseEncryptionKeyStatement alterDatabaseEncryptionKey(IToken tAlter);
    public SqlCommandIdentifier sqlCommandIdentifier();
    public AlterDatabaseStatement alterDbAdd();
    public AlterDatabaseStatement alterDbRemove();
    public AlterDatabaseStatement alterDbModify();
    public AlterDatabaseSetStatement alterDbSet();
    public AlterDatabaseCollateStatement alterDbCollate();
    public AlterDatabaseRebuildLogStatement alterDbRebuild();
    public void collation(ICollationSetter vParent);
    public FileDeclaration fileDecl(bool isAlterDbModifyFileStatement);
    public AlterDatabaseAddFileStatement alterDbAddFile();
    public AlterDatabaseAddFileGroupStatement alterDbAddFilegroup();
    public void fileDeclBodyList(TSqlFragment vParent, IList`1<FileDeclaration> fileDeclarations);
    public Identifier toFilegroup();
    public AlterDatabaseModifyFileGroupStatement alterDbModifyFilegroup();
    public AlterDatabaseModifyFileStatement alterDbModifyFile();
    public AlterDatabaseSetStatement alterDbModifyAzureOptions();
    public void azureOptions(TSqlFragment vParent, IList`1<DatabaseOption> vOptions);
    public AlterDatabaseTermination xactTermination();
    public AlterDatabaseSetStatement dbOptionStateList();
    public DatabaseOption dbOptionStateItem(UInt64& encounteredOptions);
    public CursorDefaultDatabaseOption cursorDefaultDbOption();
    public RecoveryDatabaseOption recoveryDbOption();
    public TargetRecoveryTimeDatabaseOption targetRecoveryTimeDbOption();
    public PageVerifyDatabaseOption pageVerifyDbOption();
    public PartnerDatabaseOption partnerOption();
    public WitnessDatabaseOption witnessOption();
    public ParameterizationDatabaseOption parameterizationOption();
    public LiteralDatabaseOption compatibilityLevelDbOption();
    public ChangeTrackingDatabaseOption changeTrackingDbOption();
    public ContainmentDatabaseOption dbContainmentOption();
    public DatabaseOption hadrDbOption();
    public DatabaseOption createAlterDbOption(UInt64& encounteredOptions);
    public DatabaseOption dbSingleIdentOption();
    public OnOffDatabaseOption alterDbOnOffOption();
    public void changeTrackingOnOptions(ChangeTrackingDatabaseOption vParent);
    public ChangeTrackingOptionDetail changeTrackingOneOption(Boolean& autoCleanupEncountered, Boolean& changeRetentionEncountered);
    public HadrAvailabilityGroupDatabaseOption hadrAvailabilityDbOption();
    public HadrDatabaseOption simpleHadrDbOption();
    public AuditSpecificationPart auditSpecificationDetailDb();
    public CryptoMechanism dekEncryptor();
    public CreateDatabaseAuditSpecificationStatement createDatabaseAuditSpecification();
    public CreateDatabaseStatement createDatabase();
    public CreateDatabaseEncryptionKeyStatement createDatabaseEncryptionKey();
    public void azureAsCopyOf(CreateDatabaseStatement vParent);
    public void recoveryUnitList(CreateDatabaseStatement vParent);
    public void collationOpt(ICollationSetter vParent);
    public void dbAddendums(CreateDatabaseStatement vParent);
    public void withCreateDbOptions(CreateDatabaseStatement vParent);
    public DatabaseOption azureOption();
    public MaxSizeDatabaseOption azureMaxSizeDatabaseOption();
    public LiteralDatabaseOption azureEditionDatabaseOption();
    public MultiPartIdentifier multiPartIdentifier(int vMaxNumber);
    public void onDisk(CreateDatabaseStatement vParent);
    public FileGroupDefinition fileGroupDecl();
    public FileDeclaration fileDeclBody(bool isAlterDbModifyFileStatement);
    public FileDeclarationOption fileOption(bool newNameAllowed);
    public NameFileDeclarationOption nameFileOption();
    public FileNameFileDeclarationOption fileNameFileOption();
    public SizeFileDeclarationOption sizeFileOption();
    public MaxSizeFileDeclarationOption maxSizeFileOption();
    public FileGrowthFileDeclarationOption fileGrowthFileOption();
    public NameFileDeclarationOption newNameFileOption();
    public FileDeclarationOption offlineFileOption();
    public IdentifierOrValueExpression nonEmptyStringOrIdentifier();
    public StringLiteral nonEmptyString();
    public DatabaseOption createDbServiceBrokerOption();
    public DatabaseOption restrictedUserCreateDbOption();
    public OnOffDatabaseOption createDbOnOffOption();
    public FileStreamDatabaseOption fileStreamCreateAlterDbOption();
    public DatabaseOption createAlterDbEqualsSignOption();
    public LiteralDatabaseOption createAlterDbLiteralOption(IToken tOption);
    public IdentifierDatabaseOption createAlterDbIdentifierOption(IToken tOption);
    public OnOffDatabaseOption createAlterDbOnOffOption(IToken tOption);
    public void fileStreamOption(FileStreamDatabaseOption vParent);
    public Literal stringLiteralOrNull();
    public AuditSpecificationPart createAuditSpecificationDetailDb();
    public AuditActionSpecification auditActionSpecification();
    public AuditActionGroupReference databaseAuditActionGroup();
    public AuditActionGroupReference serverAuditActionGroup();
    public DatabaseAuditAction actionWithQual();
    public SecurityTargetObject securityTargetObject(bool vColumnsDisallowed);
    public SecurityPrincipal principal();
    public BackupCertificateStatement backupCertificateStatement();
    public BackupServiceMasterKeyStatement backupServiceMasterKeyStatement();
    public BackupMasterKeyStatement backupMasterKeyStatement();
    public BackupStatement backupStatement();
    public BackupStatement backupMain();
    public void backupDevices(BackupStatement vParent);
    public void backupOptions(BackupStatement vParent);
    public RestoreServiceMasterKeyStatement restoreServiceMasterKeyStatement();
    public RestoreMasterKeyStatement restoreMasterKeyStatement();
    public RestoreStatement restoreStatement();
    public void restoreMain(RestoreStatement vParent);
    public void devList(TSqlFragment vParent, IList`1<DeviceInfo> deviceInfos);
    public void restoreOptions(RestoreStatement vParent);
    public BackupDatabaseStatement backupDatabase();
    public BackupTransactionLogStatement backupTransactionLog();
    public IdentifierOrValueExpression identifierOrVariable();
    public void backupFileListOpt(BackupDatabaseStatement vParent);
    public BackupRestoreFileInfo backupRestoreFile();
    public void restoreFileListOpt(RestoreStatement vParent);
    public ValueExpression stringOrVariable();
    public void backupRestoreFileNameList(BackupRestoreFileInfo vParent);
    public MirrorToClause mirrorTo();
    public DeviceInfo deviceInfo();
    public BackupOption backupOption();
    public ScalarExpression signedIntegerOrVariable();
    public void restoreOptionsList(RestoreStatement vParent);
    public RestoreOption restoreOption();
    public FileStreamRestoreOption fileStreamRestoreOption();
    public RestoreOption simpleRestoreOption();
    public ValueExpression afterClause();
    public ScalarExpression signedInteger();
    public MoveRestoreOption moveRestoreOption();
    public ScalarExpressionRestoreOption fileRestoreOption();
    public void backupMasterKeyBody(BackupRestoreMasterKeyStatementBase vParent);
    public void restoreMasterKeyBody(BackupRestoreMasterKeyStatementBase vParent);
    public IdentifierOrValueExpression bulkInsertFrom();
    public void bulkInsertOptions(BulkInsertStatement vParent);
    public IdentifierOrValueExpression stringOrIdentifier();
    public BulkInsertOption bulkInsertOption();
    public OrderBulkInsertOption bulkInsertSortOrderOption();
    public LiteralBulkInsertOption simpleBulkInsertOptionWithValue();
    public BulkInsertOption simpleBulkInsertOptionNoValue();
    public BulkInsertOption insertBulkOption();
    public BulkInsertOption simpleInsertBulkOption();
    public Literal integerOrNumeric();
    public void coldefList(InsertBulkStatement vParent);
    public void insertBulkOptions(InsertBulkStatement vParent);
    public InsertBulkColumnDefinition coldefItem();
    public ColumnDefinitionBase columnDefinitionEx();
    public bool nullNotNull(TSqlFragment vParent);
    public ColumnWithSortOrder columnWithSortOrder();
    public OrderBulkInsertOption openRowsetBulkOrderHint();
    public void dbccNamedLiteralList(DbccStatement vParent);
    public void dbccOptions(DbccStatement vParent);
    public void dbccOptionsList(DbccStatement vParent);
    public void dbccOptionsListItems(DbccStatement vParent);
    public void dbccOptionsJoin(DbccStatement vParent);
    public DbccOption dbccOption();
    public DbccOption dbccJoinOption();
    public DbccNamedLiteral dbccNamedLiteral();
    public void endpointOptions(AlterCreateEndpointStatementBase vParent);
    public void protocolInfo(AlterCreateEndpointStatementBase vParent);
    public void payloadInfo(AlterCreateEndpointStatementBase vParent);
    public void endpointOption(AlterCreateEndpointStatementBase vParent);
    public void endpointState(AlterCreateEndpointStatementBase vParent);
    public void endpointAffinity(AlterCreateEndpointStatementBase vParent);
    public EndpointProtocolOption protocolOptionsItem(EndpointProtocol protocol, EndpointProtocolOptions encountered);
    public ListenerIPEndpointProtocolOption listenerIpProtocolOption(EndpointProtocol protocol, EndpointProtocolOptions encountered);
    public LiteralEndpointProtocolOption listenerPortProtocolOption(EndpointProtocol protocol, EndpointProtocolOptions encountered);
    public LiteralEndpointProtocolOption pathProtocolOption(EndpointProtocol protocol, EndpointProtocolOptions encountered);
    public LiteralEndpointProtocolOption siteProtocolOption(EndpointProtocol protocol, EndpointProtocolOptions encountered);
    public LiteralEndpointProtocolOption clearPortProtocolOption(EndpointProtocol protocol, EndpointProtocolOptions encountered);
    public LiteralEndpointProtocolOption sslPortProtocolOption(EndpointProtocol protocol, EndpointProtocolOptions encountered);
    public AuthenticationEndpointProtocolOption authenticationProtocolOption(EndpointProtocol protocol, EndpointProtocolOptions encountered);
    public PortsEndpointProtocolOption portsProtocolOption(EndpointProtocol protocol, EndpointProtocolOptions encountered);
    public LiteralEndpointProtocolOption authenticationRealmProtocolOption(EndpointProtocol protocol, EndpointProtocolOptions encountered);
    public LiteralEndpointProtocolOption defaultLogonDomainProtocolOption(EndpointProtocol protocol, EndpointProtocolOptions encountered);
    public CompressionEndpointProtocolOption compressionProtocolOption(EndpointProtocol protocol, EndpointProtocolOptions encountered);
    public void ipV4DotNumberTail(IPv4 vParent);
    public void ipV4DotLastTwoPartsTail(IPv4 vParent);
    public void ipV4NumericOrNumericIntegerTail(IPv4 vParent);
    public PayloadOption payloadOption(EndpointType type, PayloadOptionKinds encountered);
    public SoapMethod soapMethod(EndpointType type, PayloadOptionKinds encountered);
    public EnabledDisabledPayloadOption batchesPayloadOption(EndpointType type, PayloadOptionKinds encountered);
    public WsdlPayloadOption wsdlPayloadOption(EndpointType type, PayloadOptionKinds encountered);
    public EnabledDisabledPayloadOption sessionsPayloadOption(EndpointType type, PayloadOptionKinds encountered);
    public LoginTypePayloadOption loginTypePayloadOption(EndpointType type, PayloadOptionKinds encountered);
    public SessionTimeoutPayloadOption sessionTimeoutPayloadOption(EndpointType type, PayloadOptionKinds encountered);
    public LiteralPayloadOption databasePayloadOption(EndpointType type, PayloadOptionKinds encountered);
    public LiteralPayloadOption namespacePayloadOption(EndpointType type, PayloadOptionKinds encountered);
    public SchemaPayloadOption schemaPayloadOption(EndpointType type, PayloadOptionKinds encountered);
    public CharacterSetPayloadOption characterSetPayloadOption(EndpointType type, PayloadOptionKinds encountered);
    public LiteralPayloadOption headerLimitPayloadOption(EndpointType type, PayloadOptionKinds encountered);
    public AuthenticationPayloadOption authenticationPayloadOption(EndpointType type, PayloadOptionKinds encountered);
    public EncryptionPayloadOption encryptionPayloadOption(EndpointType type, PayloadOptionKinds encountered);
    public EnabledDisabledPayloadOption messageForwardingPayloadOption(EndpointType type, PayloadOptionKinds encountered);
    public LiteralPayloadOption messageForwardSizePayloadOption(EndpointType type, PayloadOptionKinds encountered);
    public RolePayloadOption rolePayloadOption(EndpointType type, PayloadOptionKinds encountered);
    public void enabledDisabled(EnabledDisabledPayloadOption vParent);
    public DefaultLiteral defaultLiteral();
    public void soapMethodAlias(SoapMethod vParent);
    public void soapMethodOption(SoapMethod vParent);
    public CreateEventNotificationStatement createEventNotificationStatement();
    public CreateEventSessionStatement createEventSessionStatement();
    public EventNotificationObjectScope eventNotificationObjectScope();
    public EventTypeGroupContainer eventTypeGroupContainer();
    public void eventDeclarationList(EventSessionStatement vParent);
    public void targetDeclarationList(EventSessionStatement vParent);
    public void optSessionOptionList(EventSessionStatement vParent);
    public AlterEventSessionStatement alterEventSessionStatement();
    public void dropEventDeclarationList(AlterEventSessionStatement vParent);
    public void dropTargetDeclarationList(AlterEventSessionStatement vParent);
    public void sessionOptionList(EventSessionStatement vParent);
    public EventDeclaration eventDeclaration();
    public TargetDeclaration targetDeclaration();
    public SessionOption sessionOption();
    public EventSessionObjectName eventSessionNonEmptyThreePartObjectName();
    public void eventDeclarationSetParameters(EventDeclaration vParent);
    public void eventDeclarationActionParameters(EventDeclaration vParent);
    public EventDeclarationSetParameter eventDeclarationSetParameter();
    public LiteralSessionOption maxMemorySessionOption();
    public LiteralSessionOption maxEventSizeSessionOption();
    public OnOffSessionOption trackCausalitySessionOption();
    public OnOffSessionOption startupStateSessionOption();
    public EventRetentionSessionOption eventRetentionSessionOption();
    public MemoryPartitionSessionOption memoryPartitionSessionOption();
    public MaxDispatchLatencySessionOption maxDispatchLatencySessionOption();
    public void integerSessionOptionValue(LiteralSessionOption vParent);
    public void onOffSessionOption(OnOffSessionOption vParent);
    public ScalarExpression eventDeclarationValue();
    public Literal integerOrRealOrNumeric();
    public ParenthesisExpression eventSessionExpressionParenthesis();
    public Literal eventSessionLiteral();
    public NumericLiteral numeric();
    public RealLiteral real();
    public BooleanExpression eventBooleanExpressionOr();
    public BooleanExpression eventBooleanExpressionAnd();
    public BooleanExpression eventBooleanExpressionUnary();
    public BooleanParenthesisExpression eventBooleanExpressionParenthesis();
    public BooleanExpression eventDeclarationPredicateParameter();
    public EventSessionObjectName eventSessionOneOrTwoOrThreePartObjectName();
    public void eventDeclarationCompareFunction(EventDeclarationCompareFunctionParameter vParent);
    public void eventDeclarationComparisonPredicate(BooleanComparisonExpression vParent, EventSessionObjectName vSource);
    public BooleanComparisonType comparisonOperator();
    public CreateFullTextCatalogStatement createFulltextCatalogStatement();
    public CreateFullTextIndexStatement createFulltextIndexStatement();
    public CreateFullTextStopListStatement createFulltextStoplistStatement();
    public OnOffFullTextCatalogOption accentSensitivity();
    public FullTextIndexColumn fulltextIndexColumn();
    public IdentifierOrValueExpression languageTerm();
    public FullTextCatalogAndFileGroup fullTextCatalogAndFileGroup();
    public void createFulltextOptions(CreateFullTextIndexStatement vParent);
    public void createFulltextOptionsList(CreateFullTextIndexStatement vParent);
    public FullTextIndexOption fullTextIndexOption();
    public ChangeTrackingFullTextIndexOption changeTrackingFulltextIndexOption();
    public StopListFullTextIndexOption stoplistFulltextIndexOption();
    public SearchPropertyListFullTextIndexOption searchPropertyListFullTextIndexOption();
    public void requiredSemicolon(TSqlFragment vParent, string vStatement);
    public AlterFullTextStopListStatement alterFulltextStoplistStatement();
    public FullTextStopListAction fulltextStoplistAction();
    public FullTextStopListAction addFulltextStoplistAction();
    public FullTextStopListAction dropFulltextStoplistAction();
    public BinaryLiteral binary();
    public DropFullTextStopListStatement dropFulltextStoplistStatement();
    public AlterSearchPropertyListStatement alterSearchPropertyListStatement();
    public SearchPropertyListAction searchPropertyListAction();
    public AddSearchPropertyListAction addSearchPropertyListAction();
    public DropSearchPropertyListAction dropSearchPropertyListAction();
    public DropSearchPropertyListStatement dropSearchPropertyListStatement();
    public IndexStatement createXmlIndexStatement(bool vPrimary);
    public XmlNamespaces xmlNamespaces();
    public SelectiveXmlIndexPromotedPath promotedSelectiveXmlIndexPath();
    public void indexOptionList(IndexAffectingStatement statement, IList`1<IndexOption> optionsList, TSqlFragment vParent);
    public CreateXmlSchemaCollectionStatement createXmlSchemaCollectionStatement();
    public SchemaObjectName schemaObjectNonEmptyTwoPartName();
    public CreateXmlIndexStatement secondaryXmlIndexStatementBody(Identifier vName, SchemaObjectName vSchemaObjectName, Identifier vXmlColumn, IToken tRParen, Identifier vSecondaryXmlIndexName);
    public CreateSelectiveXmlIndexStatement secondarySelectiveXmlIndex(Identifier vName, SchemaObjectName vSchemaObjectName, Identifier vXmlColumn, IToken tRParen, Identifier vSecondaryXmlIndexName);
    public IntegerLiteral maxlengthOption(TSqlFragment vParent);
    public bool singletonOption();
    public SelectiveXmlIndexPromotedPath promotedSelectiveXmlIndexPathInAlter();
    public PasswordCreateLoginSource passwordLoginSource();
    public WindowsCreateLoginSource windowsLoginSource();
    public CertificateCreateLoginSource certificateLoginSource();
    public AsymmetricKeyCreateLoginSource asymmetricKeyLoginSource();
    public Literal loginPassword();
    public void createLoginPasswordOption(PasswordCreateLoginSource vParent);
    public PrincipalOption createLoginParam();
    public OnOffPrincipalOption onOffPrincipalOption(IToken tOption);
    public IdentifierPrincipalOption createLoginParamWin();
    public Identifier createLoginParamCertOpt();
    public void messageTypeValidation(MessageTypeStatementBase vParent);
    public LiteralAvailabilityGroupOption availabilityGroupOption();
    public AvailabilityReplica availabilityReplica();
    public AlterAvailabilityGroupStatement alterAvailabilityGroupStatement();
    public void alterAvailabilityGroupAddDatabase(AlterAvailabilityGroupStatement vResult);
    public void alterAvailabilityGroupRemoveDatabase(AlterAvailabilityGroupStatement vResult);
    public void alterAvailabilityGroupAddReplica(AlterAvailabilityGroupStatement vResult);
    public void alterAvailabilityGroupModifyReplica(AlterAvailabilityGroupStatement vResult);
    public void alterAvailabilityGroupRemoveReplica(AlterAvailabilityGroupStatement vResult);
    public void alterAvailabilityGroupSetOption(AlterAvailabilityGroupStatement vResult);
    public void alterAvailabilityGroupTakeAction(AlterAvailabilityGroupStatement vResult);
    public AvailabilityReplica availabilityReplicaName();
    public AlterAvailabilityGroupFailoverAction alterAvailabilityGroupFailoverAction();
    public AlterAvailabilityGroupAction alterAvailabilityGroupAction();
    public AlterAvailabilityGroupFailoverOption alterAvailabilityGroupFailoverOption();
    public AvailabilityReplicaOption availabilityReplicaOption();
    public AvailabilityModeReplicaOption availabilityModeReplicaOption();
    public FailoverModeReplicaOption failoverModeReplicaOption();
    public SecondaryRoleReplicaOption secondaryRoleReplicaOption();
    public PrimaryRoleReplicaOption primaryRoleReplicaOption();
    public LiteralReplicaOption literalReplicaOption();
    public CreatePartitionFunctionStatement createPartitionFunction();
    public CreatePartitionSchemeStatement createPartitionScheme();
    public PartitionParameterType partitionParameterType();
    public void partitionFunctionTypes(CreatePartitionFunctionStatement vParent);
    public void partitionFunctionRange(CreatePartitionFunctionStatement vParent);
    public void queueOptionList(QueueStatement vParent, bool vDropAccepted);
    public UserRemoteServiceBindingOption bindingUserOption();
    public OnOffRemoteServiceBindingOption bindingAnonymousOption();
    public void routeOptionList(RouteStatement vParent);
    public void onQueueClause(AlterCreateServiceStatementBase vParent);
    public ServiceContract serviceContract();
    public AlterServiceStatement alterServiceStatement();
    public void addDropServiceContractList(AlterServiceStatement vParent);
    public ServiceContract addDropServiceContract();
    public void keySpecList(CreateSymmetricKeyStatement vParent);
    public void encryptorListWithNoPassword(SymmetricKeyStatement vParent);
    public void providerKeySourceOptionsOpt(IList`1<KeyOption> optionsList, TSqlFragment vParent);
    public KeyOption keySpec(Boolean& keySourceSpecified, Boolean& algorithmSpecified, Boolean& identityValueSpecified);
    public KeySourceKeyOption keySourceKeySpec(Boolean& keySourceSpecified);
    public AlgorithmKeyOption algorithmKeySpec(Boolean& algorithmSpecified);
    public IdentityValueKeyOption identityValueKeySpec(Boolean& identityValueSpecified);
    public ProviderKeyNameKeyOption providerKeyNameSourceOption(Boolean& providerKeyNameSpecified);
    public CreationDispositionKeyOption creationDispositionSourceOption(Boolean& creationDispositionSpecified);
    public CryptoMechanism cryptoWithNoPasswordOrJustPassword();
    public CryptoMechanism certificateCrypto();
    public CryptoMechanism keyCrypto();
    public CryptoMechanism passwordCrypto();
    public KeyOption providerKeySourceOption(Boolean& algorithmSpecified, Boolean& providerKeyNameSpecified, Boolean& creationDispositionSpecified);
    public AlterSymmetricKeyStatement alterSymmetricKeyStatement();
    public CreateTypeUddtStatement createTypeUddtStatement();
    public CreateTypeUdtStatement createTypeUdtStatement();
    public CreateTypeTableStatement createTypeTableStatement();
    public NullableConstraintDefinition nullableConstraint();
    public TableDefinition tableDefinition(IndexAffectingStatement statementType, AlterTableAddTableElementStatement vStatement);
    public UserLoginOption userLoginOption();
    public PrincipalOption createUserOption(bool vHasUserLoginOption);
    public IdentifierPrincipalOption identifierCreateUserOption(IToken tOption, bool vHasUserLoginOption);
    public LiteralPrincipalOption literalCreateUserOption(IToken tOption, bool vHasUserLoginOption);
    public NullLiteral nullLiteral();
    public AlterApplicationRoleStatement alterApplicationRoleStatement();
    public AlterAssemblyStatement alterAssemblyStatement();
    public AlterAsymmetricKeyStatement alterAsymmetricKeyStatement();
    public AlterAuthorizationStatement alterAuthorizationStatement();
    public AlterBrokerPriorityStatement alterBrokerPriorityStatement();
    public AlterCryptographicProviderStatement alterCryptographicProviderStatement();
    public AlterRemoteServiceBindingStatement alterRemoteServiceBindingStatement();
    public TSqlStatement alterResourceStatement();
    public AlterWorkloadGroupStatement alterWorkloadGroupStatement();
    public AlterCertificateStatement alterCertificateStatement();
    public AlterCredentialStatement alterCredentialStatement();
    public AlterEndpointStatement alterEndpointStatement();
    public TSqlStatement alterFulltextStatement();
    public AlterIndexStatement alterIndexStatement();
    public AlterLoginStatement alterLoginStatement();
    public AlterMasterKeyStatement alterMasterKeyStatement();
    public AlterMessageTypeStatement alterMessageTypeStatement();
    public TSqlStatement alterPartitionStatement();
    public AlterQueueStatement alterQueueStatement();
    public AlterRoleStatement alterRoleStatement();
    public AlterRouteStatement alterRouteStatement();
    public AlterSchemaStatement alterSchemaStatement();
    public AlterSequenceStatement alterSequenceStatement();
    public TSqlStatement alterServiceStatements();
    public AlterUserStatement alterUserStatement();
    public AlterXmlSchemaCollectionStatement alterXmlSchemaCollectionStatement();
    public ApplicationRoleOption applicationRoleOption(bool defaultSchemaAndPasswordOnly);
    public ScalarExpression alterAssemblyFromClause();
    public void alterAssemblyWith(AlterAssemblyStatement vParent);
    public void alterAssemblyDropFile(AlterAssemblyStatement vParent);
    public void alterAssemblyAddFile(AlterAssemblyStatement vParent);
    public AssemblyOption alterAssemblyWithItem();
    public AssemblyOption assemblyPermissionSetOrVisibilityOption();
    public AssemblyOption assemblyUncheckedDataOption();
    public OnOffAssemblyOption assemblyVisibilityOption(IToken tPermissionSetVisibility);
    public AddFileSpec alterAssemblyAddFileSpec();
    public AlterFullTextCatalogStatement alterFulltextCatalogStatement();
    public AlterFullTextIndexStatement alterFulltextIndexStatement();
    public AlterFullTextIndexAction alterFulltextIndexAction();
    public SimpleAlterFullTextIndexAction enableDisableAlterFulltextIndexAction();
    public AddAlterFullTextIndexAction addAlterFulltextIndexAction();
    public DropAlterFullTextIndexAction dropAlterFulltextIndexAction();
    public SimpleAlterFullTextIndexAction startPopulationAlterFulltextIndexAction();
    public SimpleAlterFullTextIndexAction otherPopulationAlterFulltextIndexAction();
    public AlterFullTextIndexAction setAlterFullTextIndexAction();
    public AlterColumnAlterFullTextIndexAction alterColumnAlterFullTextIndexAction();
    public SetStopListAlterFullTextIndexAction setStoplistAlterFulltextIndexAction();
    public SimpleAlterFullTextIndexAction setChangeTrackingAlterFulltextIndexAction();
    public SetSearchPropertyListAlterFullTextIndexAction setSearchPropertyListAlterFullTextIndexAction();
    public bool populationOption(TSqlFragment vParent);
    public FullTextIndexColumn alterFullTextIndexColumn();
    public PartitionSpecifier partitionSpecifier();
    public AlterLoginEnableDisableStatement alterLoginEnableDisable(Identifier vName);
    public AlterLoginOptionsStatement alterLoginOptions(Identifier vName);
    public AlterLoginAddDropCredentialStatement alterLoginAddDropCredential(Identifier vName);
    public PrincipalOption alterLoginParam();
    public PasswordAlterPrincipalOption passwordAlterLoginOption();
    public AlterPartitionFunctionStatement alterPartitionFunctionStatement();
    public AlterPartitionSchemeStatement alterPartitionSchemeStatement();
    public ExecuteAsClause executeAsClause(bool vCallerProhibited, bool vOwnerProhibited);
    public void queueOption(QueueStatement vParent, bool vDropAccepted);
    public QueueStateOption stateQueueOption();
    public void queueActivationOption(QueueStatement vParent, bool vDropAccepted);
    public QueueStateOption queuePoisonMessageHandlingOption();
    public QueueOption activationQueueOptionArgument(bool vDropAccepted, Boolean& procedureName, Boolean& maxQueueReaders, Boolean& executeAs);
    public QueueStateOption statusQueueOptionArgument(IToken vStartToken);
    public QueueProcedureOption procedureNameQueueOptionArgument(IToken vStartToken);
    public QueueValueOption maxQueueReadersQueueOptionArgument(IToken vStartToken);
    public QueueOption dropQueueOptionArgument(bool vDropAccepted);
    public QueueExecuteAsOption executeAsQueueOptionArgument();
    public AlterRoleAction alterRoleAction();
    public AddMemberAlterRoleAction addMemberAlterRoleAction();
    public DropMemberAlterRoleAction dropMemberAlterRoleAction();
    public RenameAlterRoleAction renameAlterRoleAction();
    public RouteOption routeOption();
    public SchemaObjectName schemaObjectTwoPartName();
    public void alterSequenceOptionList(AlterSequenceStatement vParent);
    public SequenceOption alterSequenceOptionListElement();
    public AlterServiceMasterKeyStatement alterServiceMasterKeyStatement();
    public PrincipalOption alterUserOption();
    public PasswordAlterPrincipalOption passwordAlterUserOption(IToken tOption);
    public IdentifierPrincipalOption identifierAlterUserOption(IToken tOption);
    public LiteralPrincipalOption literalAlterUserOption(IToken tOption);
    public void authorization(IAuthorization vParent);
    public StatementList createSchemaElementList();
    public TSqlStatement createSchemaElement();
    public void functionStatementBody(FunctionStatementBody vResult, Boolean& vParseErrorOccurred);
    public void functionParameterList(FunctionStatementBody vResult);
    public void functionReturnTypeAndBody(FunctionStatementBody vParent, Boolean& vParseErrorOccurred);
    public ProcedureParameter functionParameter();
    public void scalarProcedureParameter(ProcedureParameter vParent, bool outputAllowed);
    public void functionAttributes(FunctionStatementBody vParent);
    public BeginEndBlockStatement beginEndBlockStatement();
    public MethodSpecifier methodSpecifier();
    public void functionAttributesNoExecuteAs(FunctionStatementBody vParent);
    public DeclareTableVariableBody declareTableBody(IndexAffectingStatement statementType);
    public DeclareTableVariableBody declareTableBodyMain(IndexAffectingStatement statementType);
    public void clrTableValuedFunctionOrderHint(FunctionStatementBody vParent);
    public SelectStatement subqueryExpressionWithOptionalCTE();
    public QueryExpression subqueryExpression(SubDmlFlags subDmlFlags);
    public FunctionOption functionAttribute();
    public FunctionOption functionAttributeNoExecuteAs();
    public ExecuteAsFunctionOption functionExecuteAsOption();
    public void identifierColumnList(TSqlFragment vParent, IList`1<ColumnReferenceExpression> columns);
    public BooleanExpression filterClause(bool filterProhibited);
    public StatisticsOption createStatisticsStatementWithOption(Boolean& isConflictingOption);
    public LiteralStatisticsOption sampleStatisticsOption(Boolean& isConflictingOption);
    public LiteralStatisticsOption statsStreamStatisticsOption();
    public StatisticsOption simpleStatisticsOption(Boolean& isConflictingOption);
    public void columnNameList(TSqlFragment vParent, IList`1<Identifier> columnNames);
    public StatisticsOption updateStatisticsStatementWithOption(Boolean& isConflictingOption);
    public LiteralStatisticsOption updateStatisticsLiteralOption();
    public StatisticsOption updateStatisticsSimpleOption(Boolean& isConflictingOption);
    public KillStatement killStatement();
    public KillQueryNotificationSubscriptionStatement killQueryNotificationSubscriptionStatement();
    public KillStatsJobStatement killStatsJobStatement();
    public Permission permission();
    public Identifier securityStatementPermission();
    public void securityTargetObjectCommon(SecurityTargetObject vParent);
    public SecurityTargetObject authorizationTargetObject();
    public void permissionsList(SecurityStatement vParent, Boolean& vContainsColumnList);
    public void securityStatementTargetObjectOpt(SecurityStatement vParent, bool vColumnsDisallowed);
    public void securityStatementPrincipalList(SecurityStatement vParent);
    public void securityStatementAsClauseOpt(SecurityStatement vParent);
    public WaitForSupportedStatement waitforInnerStatement();
    public ColumnReferenceExpression column();
    public ValueExpression binaryOrVariable();
    public ValueExpression integerOrVariable();
    public void modificationTextStatement(TextModificationStatement vParent);
    public ScalarExpression signedIntegerOrVariableOrNull();
    public void modificationTextStatementWithLog(TextModificationStatement vParent);
    public ValueExpression writeString();
    public VariableReference variable();
    public OpenMasterKeyStatement openMasterKeyStatement();
    public OpenSymmetricKeyStatement openSymmetricKeyStatement();
    public OpenCursorStatement openCursorStatement();
    public CryptoMechanism decryptionMechanism();
    public void decryptionMechanismPassword(CryptoMechanism vParent);
    public CursorId cursorId();
    public CloseMasterKeyStatement closeMasterKeyStatement();
    public CloseSymmetricKeyStatement closeSymmetricKeyStatement();
    public CloseCursorStatement closeCursorStatement();
    public FetchCursorStatement rowSelector();
    public FetchType fetchType();
    public TSqlStatement dropDatabaseStatements();
    public DropIndexStatement dropIndexStatement();
    public DropStatisticsStatement dropStatisticsStatement();
    public DropTableStatement dropTableStatement();
    public DropProcedureStatement dropProcedureStatement();
    public DropFunctionStatement dropFunctionStatement();
    public DropViewStatement dropViewStatement();
    public DropDefaultStatement dropDefaultStatement();
    public DropRuleStatement dropRuleStatement();
    public DropTriggerStatement dropTriggerStatement();
    public DropSchemaStatement dropSchemaStatement();
    public DropAggregateStatement dropAggregateStatement();
    public DropAssemblyStatement dropAssemblyStatement();
    public DropAvailabilityGroupStatement dropAvailabilityGroupStatement();
    public TSqlStatement dropPartitionStatements();
    public DropSynonymStatement dropSynonymStatement();
    public DropApplicationRoleStatement dropApplicationRoleStatement();
    public DropBrokerPriorityStatement dropBrokerPriorityStatement();
    public DropCryptographicProviderStatement dropCryptographicProviderStatement();
    public TSqlStatement dropFulltextStatements();
    public DropLoginStatement dropLoginStatement();
    public DropResourcePoolStatement dropResourcePoolStatement();
    public DropWorkloadGroupStatement dropWorkloadGroupStatement();
    public DropRoleStatement dropRoleStatement();
    public DropMasterKeyStatement dropMasterKeyStatement();
    public DropSymmetricKeyStatement dropSymmetricKeyStatement();
    public DropAsymmetricKeyStatement dropAsymmetricKeyStatement();
    public DropCertificateStatement dropCertificateStatement();
    public DropCredentialStatement dropCredentialStatement();
    public DropTypeStatement dropTypeStatement();
    public DropXmlSchemaCollectionStatement dropXmlSchemaCollectionStatement();
    public DropContractStatement dropContractStatement();
    public DropQueueStatement dropQueueStatement();
    public DropServiceStatement dropServiceStatement();
    public DropRouteStatement dropRouteStatement();
    public DropMessageTypeStatement dropMessageTypeStatement();
    public DropRemoteServiceBindingStatement dropRemoteServiceBindingStatement();
    public DropEndpointStatement dropEndpointStatement();
    public DropSignatureStatement dropSignatureStatement();
    public TSqlStatement dropEventStatement();
    public DropSequenceStatement dropSequenceStatement();
    public DropFederationStatement dropFederationStatement();
    public TSqlStatement dropServerStatements();
    public DropUserStatement dropUserStatement();
    public DropServerAuditSpecificationStatement dropServerAuditSpecificationStatement();
    public DropServerAuditStatement dropServerAuditStatement();
    public DropServerRoleStatement dropServerRoleStatement();
    public DropDatabaseAuditSpecificationStatement dropDatabaseAuditSpecificationStatement();
    public DropDatabaseEncryptionKeyStatement dropDatabaseEncryptionKeyStatement();
    public DropDatabaseStatement dropDatabaseStatement();
    public DropIndexClauseBase dropIndexClause();
    public BackwardsCompatibleDropIndexClause indexDropObject();
    public DropIndexClause indexDropObjectNewNameFormat();
    public void dropClusteredIndexOptions(DropIndexClause vParent);
    public void dropClusteredIndexOption(DropIndexClause vParent, Int32& encounteredOptions);
    public IndexExpressionOption maxDopOption();
    public IndexStateOption onlineIndexOption();
    public MoveToDropIndexOption dropIndexMoveToOption();
    public FileStreamOnDropIndexOption dropIndexFileStreamOnOption();
    public DataCompressionOption dataCompressionOption();
    public FileGroupOrPartitionScheme filegroupOrPartitionScheme();
    public void fileStreamOn(IFileStreamSpecifier vParent);
    public ChildObjectName statisticsDropObject();
    public List`1<Identifier> identifierList(int vMaxNumber);
    public void dropObjectList(DropObjectsStatement vParent, bool onlyTwoPartNames);
    public TriggerScope triggerScope(TSqlFragment vParent);
    public SchemaObjectName dropObject(bool onlyTwoPartNames);
    public DropPartitionFunctionStatement dropPartitionFunctionStatement();
    public DropPartitionSchemeStatement dropPartitionSchemeStatement();
    public DropFullTextCatalogStatement dropFulltextCatalogStatement();
    public DropFullTextIndexStatement dropFulltextIndexStatement();
    public bool removeProviderKeyOpt(TSqlFragment vParent);
    public DropEventNotificationStatement dropEventNotificationStatement();
    public DropEventSessionStatement dropEventSessionStatement();
    public void signatureType(SignatureStatementBase vParent);
    public void signableElement(SignatureStatementBase vParent);
    public void cryptoListWithOptionalPasswordSignature(SignatureStatementBase vParent);
    public CryptoMechanism cryptoWithOptionalPasswordSignature();
    public Literal withSignatureOrPasswordOpt();
    public Identifier nonQuotedIdentifier();
    public BeginTransactionStatement beginTransactionStatement();
    public TryCatchStatement tryCatchStatement();
    public BeginConversationTimerStatement beginConversationTimerStatement();
    public BeginDialogStatement beginDialogStatement();
    public void transactionName(TransactionStatement vParent);
    public Identifier weirdTransactionName();
    public void tranIdentifier(StringBuilder vStringBuilder, TSqlFragment vParent);
    public StatementList tryStatementList(Boolean& vParseErrorOccurred);
    public StatementList catchStatementList(Boolean& vParseErrorOccurred);
    public DeclareVariableElement declareVariableElement();
    public SqlDataTypeReference cursorDataType();
    public DeclareVariableStatement declareVariableStatement();
    public DeclareCursorStatement declareCursorStatement();
    public PredicateSetStatement predicateSetStatement();
    public SetVariableStatement setVariableStatement();
    public SetStatisticsStatement setStatisticsStatement();
    public SetRowCountStatement setRowcountStatement();
    public SetOffsetsStatement setOffsetsStatement();
    public SetCommandStatement setCommandStatement();
    public SetTransactionIsolationLevelStatement setTransactionIsolationLevelStatement();
    public SetTextSizeStatement setTextSizeStatement();
    public SetIdentityInsertStatement setIdentityInsertStatement();
    public SetErrorLevelStatement setErrorLevelStatement();
    public void parenthesizedOptExpressionWithDefaultList(TSqlFragment vParent, IList`1<ScalarExpression> expressions);
    public AssignmentKind assignmentWithOptOp();
    public CursorDefinition cursorDefinition();
    public void setOnOff(SetOnOffStatement vParent);
    public SetOffsets offsetItem();
    public SetCommand setCommand();
    public SetFipsFlaggerCommand fipsFlaggerLevel();
    public void tableElement(IndexAffectingStatement statementType, TableDefinition vParent, AlterTableAddTableElementStatement vStatement);
    public void cursorOpts(bool oldSyntax, IList`1<CursorOption> vOptions);
    public CursorDefinition cursorDefinitionOptions(IList`1<CursorOption> vOptions);
    public SelectStatement selectStatement(SubDmlFlags subDmlFlags);
    public CursorOption cursorOption();
    public CreateIndexStatement createRelationalIndexStatement(IToken tUnique, Nullable`1<bool> isClustered);
    public void indexLegacyOptionList(CreateIndexStatement vParent);
    public void fileStreamOnOpt(IFileStreamSpecifier vParent);
    public BooleanExpression filterExpression();
    public BooleanExpression filterExpressionPrimary();
    public ColumnReferenceExpression filterColumn();
    public BooleanIsNullExpression filterNullPredicate(ScalarExpression vColumn);
    public BooleanComparisonExpression filterComparisonPredicate(ScalarExpression vColumn);
    public InPredicate filterInPredicate(ScalarExpression vColumn);
    public BooleanParenthesisExpression filterParenthesisExpression();
    public void specialColumn(ColumnReferenceExpression vParent);
    public BooleanIsNullExpression nullPredicate(ScalarExpression vExpressionFirst);
    public IndexOption indexLegacyOption();
    public IndexExpressionOption fillFactorOption();
    public IndexOption indexOption();
    public IndexStateOption indexStateOption();
    public void ctContext(WithCtesAndXmlNamespaces vParent);
    public CommonTableExpression commonTableExpression();
    public XmlNamespacesElement xmlNamespacesElement();
    public XmlNamespacesDefaultElement xmlNamespacesDefaultElement();
    public XmlNamespacesAliasElement xmlNamespacesAliasElement();
    public QueryExpression queryExpression(SubDmlFlags subDmlFlags, SelectStatement vSelectStatement);
    public OrderByClause orderByClause();
    public OffsetClause offsetClause();
    public ForClause forClause();
    public void optimizerHints(TSqlFragment vParent, IList`1<OptimizerHint> hintsCollection);
    public TableReferenceWithAliasAndColumns derivedTable(SubDmlFlags subDmlFlags);
    public QueryDerivedTable queryDerivedTable(SubDmlFlags subDmlFlags);
    public InlineDerivedTable inlinedDerivedTable();
    public void simpleTableReferenceAlias(TableReferenceWithAlias vParent);
    public RowValue rowValueExpression();
    public ScalarSubquery subquery(SubDmlFlags subDmlFlags, ExpressionFlags expressionFlags);
    public QueryExpression subqueryExpressionUnit(SubDmlFlags subDmlFlags);
    public QuerySpecification subquerySpecification(SubDmlFlags subDmlFlags);
    public QueryParenthesisExpression subqueryParenthesis(SubDmlFlags subDmlFlags);
    public QueryExpression queryExpressionUnit(SubDmlFlags subDmlFlags, SelectStatement vSelectStatement);
    public QuerySpecification querySpecification(SubDmlFlags subDmlFlags, SelectStatement vSelectStatement);
    public QueryParenthesisExpression queryParenthesis(SubDmlFlags subDmlFlags, SelectStatement vSelectStatement);
    public void uniqueRowFilterOpt(QuerySpecification vParent);
    public TopRowFilter topRowFilter();
    public SelectElement selectColumnOrStarExpression();
    public FromClause fromClauseOpt(SubDmlFlags subDmlFlags);
    public WhereClause whereClause();
    public GroupByClause groupByClause();
    public HavingClause havingClause();
    public BrowseForClause browseForClause();
    public XmlForClause xmlForClause();
    public void selectExpression(QuerySpecification vParent);
    public UniqueRowFilter uniqueRowFilter(IToken& token);
    public PrimaryExpression parenthesisDisambiguatorForExpressions(ExpressionFlags expressionFlags);
    public TopRowFilter dmlTopRowFilter();
    public void dmlTopRowFilterOpt(DataModificationSpecification vParent);
    public SelectSetVariable selectSetVariable();
    public SelectStarExpression selectStarExpression();
    public SelectScalarExpression selectColumn();
    public SelectElement outputClauseSelectElement();
    public SelectScalarExpression outputClauseSelectColumn();
    public ScalarExpression selectColumnExpression();
    public IdentityFunctionCall identityFunction();
    public ScalarExpression seedIncrement();
    public TableSampleClause tableSampleClause();
    public FromClause fromClause(SubDmlFlags subDmlFlags);
    public TableReference selectTableReferenceWithOdbc(SubDmlFlags subDmlFlags);
    public TableReference selectTableReference(SubDmlFlags subDmlFlags);
    public OdbcQualifiedJoinTableReference odbcQualifiedJoin(SubDmlFlags subDmlFlags);
    public TableReference selectTableReferenceElement(SubDmlFlags subDmlFlags);
    public void selectTableReferenceAdditionalElement(SubDmlFlags subDmlFlags, TableReference& vResult);
    public void odbcInitiator();
    public OdbcConvertSpecification odbcConvertSpecification();
    public ExtractFromExpression extractFromExpression();
    public OdbcFunctionCall odbcFunctionCall();
    public TableReference joinTableReference(SubDmlFlags subDmlFlags);
    public JoinParenthesisTableReference joinParenthesis(SubDmlFlags subDmlFlags);
    public void joinElement(SubDmlFlags subDmlFlags, TableReference& vResult);
    public TableReference selectTableReferenceElementWithoutJoinParenthesis(SubDmlFlags subDmlFlags);
    public void pivotedTableReference(TableReference& vResult);
    public void unpivotedTableReference(TableReference& vResult);
    public ColumnReferenceExpression fixedColumn();
    public void columnListWithParenthesis(TSqlFragment vParent, IList`1<ColumnReferenceExpression> columns);
    public ColumnReferenceExpression identifierColumnReferenceExpression();
    public void unqualifiedJoin(SubDmlFlags subDmlFlags, TableReference& vResult);
    public void qualifiedJoin(SubDmlFlags subDmlFlags, TableReference& vResult);
    public TableReferenceWithAliasAndColumns changeTableTableReference();
    public BuiltInFunctionTableReference builtInFunctionTableReference();
    public VariableTableReference variableTableReference();
    public VariableMethodCallTableReference variableMethodCallTableReference();
    public TableReferenceWithAlias openRowset();
    public FullTextTableReference fulltextTableReference();
    public SemanticTableReference semanticTableReference();
    public OpenXmlTableReference openXmlTableReference();
    public DataModificationTableReference subDmlTableReference(SubDmlFlags subDmlFlags);
    public TableReference schemaObjectOrFunctionTableReference();
    public ChangeTableChangesTableReference changesChangeTableParams(SchemaObjectName vTarget);
    public ChangeTableVersionTableReference versionChangeTableParams(SchemaObjectName vTarget);
    public DataModificationSpecification innerDmlStatement();
    public InsertSpecification insertSpecification(SubDmlFlags subDmlFlags);
    public UpdateSpecification updateSpecification(SubDmlFlags subDmlFlags);
    public DeleteSpecification deleteSpecification(SubDmlFlags subDmlFlags);
    public MergeSpecification mergeSpecification(SubDmlFlags subDmlFlags);
    public void joinHint(QualifiedJoin vParent);
    public ScalarExpression expressionWithDefault();
    public void simpleTableReferenceAliasOpt(TableReferenceWithAlias vParent);
    public ScalarExpression signedIntegerOrStringOrVariable();
    public ScalarExpression possibleNegativeConstant();
    public void outputIntoOutputClause(DataModificationSpecification vParent);
    public OutputIntoClause outputIntoClause(IToken tOutput, IList`1<SelectElement> vSelectElements);
    public OutputClause outputClause();
    public VariableTableReference variableDmlTarget();
    public NamedTableReference intoSchemaObjectTable();
    public void outputClauseOpt(SubDmlFlags subDmlFlags, DataModificationSpecification vParent);
    public TableReference dmlTarget(bool indexHintAllowed);
    public WhereClause dmlWhereClause(SubDmlFlags subDmlFlags);
    public ColumnReferenceExpression insertColumn();
    public ValuesInsertSource valuesInsertSource();
    public ExecuteInsertSource executeInsertSource();
    public SelectInsertSource selectInsertSource(SubDmlFlags subDmlFlags);
    public void setClausesList(TSqlFragment vParent, IList`1<SetClause> setClauses);
    public SetClause setClause();
    public AssignmentSetClause setClauseStartingWithVariable();
    public AssignmentSetClause setClauseColumnAssignment(MultiPartIdentifier vMultiPartIdentifier);
    public FunctionCallSetClause setClauseFunctionCall(MultiPartIdentifier vMultiPartIdentifier);
    public AssignmentSetClause setClauseSubItemSystemColumn();
    public AssignmentKind assignmentWithOp();
    public void systemColumn(ColumnReferenceExpression vParent);
    public ExecuteSpecification executeSpecification();
    public void defaultValuesInsertSource(ValuesInsertSource vParent);
    public RowValue rowValueExpressionWithDefault();
    public void expressionWithDefaultList(TSqlFragment vParent, IList`1<ScalarExpression> expressions);
    public TableReferenceWithAlias schemaObjectDmlTarget(bool indexHintAllowed);
    public void mergeInsertDmlColumnListOpt(InsertMergeAction vParent);
    public ColumnReferenceExpression mergeInsertDmlColumn();
    public ScalarExpression possibleNegativeConstantWithDefault();
    public SchemaObjectFunctionTableReference schemaObjectFunctionDmlTarget();
    public NamedTableReference schemaObjectTableDmlTarget(bool indexHintAllowed);
    public void tableHints(TSqlFragment vParent, IList`1<TableHint> hints, bool tableHintAllowed);
    public NamedTableReference schemaObjectTableReference(SchemaObjectName vSchemaObjectName);
    public SchemaObjectFunctionTableReference schemaObjectFunctionTableReference(SchemaObjectName vSchemaObjectName);
    public void singleOldStyleTableHint(TSqlFragment vParent, IList`1<TableHint> hints);
    public void nonParameterTableHints(TSqlFragment vParent, IList`1<TableHint> hints);
    public IndexTableHint oldForceIndex();
    public void fullTextTable(FullTextTableReference vParent);
    public void fulltextTableColumnList(FullTextTableReference vParent);
    public void fulltextTableOptions(FullTextTableReference vParent);
    public void fulltextSemanticTableColumnList(TSqlFragment vParent, IList`1<ColumnReferenceExpression> vColumns);
    public ColumnReferenceExpression starColumnReferenceExpression();
    public ValueExpression languageExpression();
    public ValueExpression binaryOrIntegerOrStringOrVariable();
    public void semanticKeyPhraseTableReference(SemanticTableReference vParent);
    public void semanticSimilarityTableReference(SemanticTableReference vParent);
    public void semanticSimilarityDetailsTableReference(SemanticTableReference vParent);
    public OpenXmlTableReference openXmlParams();
    public void openXmlWithClauseOpt(OpenXmlTableReference vParent);
    public void openXmlSchemaItemList(OpenXmlTableReference vParent);
    public SchemaDeclarationItem openXmlSchemaItem();
    public ColumnDefinitionBase columnDefinitionBasic();
    public TableReferenceWithAlias openRowsetRowset();
    public OpenQueryTableReference openQueryRowset();
    public AdHocTableReference adhocRowset();
    public OpenRowsetTableReference openRowsetParams();
    public InternalOpenRowset internalOpenRowsetArgs();
    public BulkOpenRowset openRowsetBulk();
    public BulkInsertOption openRowsetBulkHint();
    public BulkInsertOption openRowsetBulkHintNoValue();
    public AdHocDataSource adhocDataSource();
    public SchemaObjectNameOrValueExpression objectOrString();
    public void simpleTableHints(TSqlFragment vParent, IList`1<TableHint> hints);
    public void tableHintsBody(TSqlFragment vParent, IList`1<TableHint> hints, bool tableHintAllowed);
    public TableHint tableHint(bool indexHintAllowed);
    public ForceSeekTableHint forceSeekTableHint(bool indexHintAllowed);
    public TableHint simpleTableHint();
    public IndexTableHint indexTableHint(bool indexHintAllowed);
    public LiteralTableHint literalTableHint();
    public IdentifierOrValueExpression identifierOrInteger();
    public WhereClause whereCurrentOfCursorClause(SubDmlFlags subDmlFlags);
    public GroupingSpecification groupByItem(bool isAll, Boolean& encounteredCubeRollupGroupingSets);
    public CubeGroupingSpecification cubeSpec(bool isAll);
    public RollupGroupingSpecification rollupSpec(bool isAll);
    public GroupingSetsGroupingSpecification groupingSetsSpec(bool isAll);
    public GrandTotalGroupingSpecification grandTotal();
    public ExpressionGroupingSpecification simpleGroupByItem();
    public GroupingSpecification groupingSet();
    public CompositeGroupingSpecification composingGroupingSet();
    public GroupingSpecification groupingSetItem();
    public void cubeOrRollupArgumentList(TSqlFragment vParent, IList`1<GroupingSpecification> specs);
    public GroupingSpecification cubeOrRollupArgument();
    public CompositeGroupingSpecification compositeGroupByItem();
    public ExpressionWithSortOrder expressionWithSortOrder();
    public SortOrder orderByOption(TSqlFragment vParent);
    public UpdateForClause updateForClause();
    public XmlForClauseOption xmlForClauseMode();
    public XmlForClauseOption xmlParam(XmlForClauseOptions encountered);
    public OptimizerHint hint();
    public LiteralOptimizerHint literalOptimizerHint();
    public OptimizerHint simpleOptimizerHint();
    public LiteralOptimizerHint usePlanOptimizerHint();
    public OptimizeForOptimizerHint optimizeForOptimizerHint();
    public TableHintsOptimizerHint tableHintsOptimizerHint();
    public VariableValuePair variableValuePair();
    public Literal cryptographicProviderFile();
    public AlterResourcePoolStatement alterResourcePoolStatement();
    public AlterResourceGovernorStatement alterResourceGovernorStatement();
    public void resourcePoolStatementBody(ResourcePoolStatement vParent);
    public ResourcePoolParameter resourcePoolParameter();
    public ResourcePoolAffinitySpecification resourcePoolAffinitySpecification();
    public LiteralRange poolAffinityRange();
    public void workloadGroupStatementBody(WorkloadGroupStatement vParent);
    public WorkloadGroupParameter workloadGroupParameter();
    public void brokerPriorityStatementBody(BrokerPriorityStatement vParent);
    public BrokerPriorityParameter brokerPriorityParameter(int encountered);
    public void createSequenceOptionList(CreateSequenceStatement vParent);
    public SequenceOption createSequenceOptionListElement();
    public ScalarExpressionSequenceOption sequenceRestartOptionListElement();
    public SequenceOption commonSequenceOptionListElement();
    public DataTypeSequenceOption sequenceDatatypeOptionListElement();
    public ScalarExpressionSequenceOption sequenceStartOptionListElement();
    public ScalarExpressionSequenceOption sequenceCacheOptionListElement();
    public SequenceOption sequenceCycleOptionListElement();
    public ScalarExpressionSequenceOption sequenceIncrementOptionListElement();
    public SequenceOption sequenceNoOptionListElement();
    public ScalarExpressionSequenceOption sequenceMinMaxOptionListElement();
    public void spatialIndexingScheme(CreateSpatialIndexStatement vParent);
    public void spatialIndexOptionsList(CreateSpatialIndexStatement vParent);
    public SpatialIndexOption spatialIndexOption(SpatialIndexingSchemeType indexingScheme, Boolean& isRegularIndexOption);
    public BoundingBoxSpatialIndexOption boundingBoxSpatialIndexOption(bool isRegularIndexOption, SpatialIndexingSchemeType indexingScheme);
    public GridsSpatialIndexOption gridsSpatialIndexOption(bool isRegularIndexOption);
    public CellsPerObjectSpatialIndexOption cellsPerObjectSpatialIndexOption(bool isRegularIndexOption);
    public SpatialIndexRegularOption spatialIndexRegularOption(IndexAffectingStatement statement);
    public void boundingBoxParameter(BoundingBoxSpatialIndexOption vParent);
    public void boundingBoxParameterListByname(BoundingBoxSpatialIndexOption vParent);
    public void boundingBoxParameterListByord(BoundingBoxSpatialIndexOption vParent);
    public BoundingBoxParameter boundingBoxParameterByName(int encountered);
    public ScalarExpression signedIntegerOrReal();
    public BoundingBoxParameter boundingBoxParameterByOrd();
    public void gridParameter(GridsSpatialIndexOption vParent);
    public void gridParameterListByName(GridsSpatialIndexOption vParent);
    public void gridParameterListByOrd(GridsSpatialIndexOption vParent);
    public GridParameter gridParameterByName();
    public GridParameter gridParameterByOrd();
    public void viewStatementBody(ViewStatementBody vResult);
    public ViewOption viewOption();
    public TriggerOption triggerOption(bool vOwnerProhibited);
    public void procedureOptions(ProcedureStatementBody vParent);
    public ProcedureOption procedureOption();
    public void procedureStatementBody(ProcedureStatementBody vResult, Boolean& vParseErrorOccurred);
    public ProcedureReference procedureReference();
    public void procedureParameterList(ProcedureStatementBodyBase vResult);
    public ProcedureParameter procedureParameter();
    public void cursorProcedureParameter(ProcedureParameter vParent);
    public IdentifierLiteral identifierLiteral();
    public ValueExpression literal();
    public UnaryExpression negativeConstant();
    public Literal subroutineParameterLiteral();
    public void triggerStatementBody(TriggerStatementBody vResult, Boolean& vParseErrorOccurred);
    public void ddlTriggerMidSection(TriggerStatementBody vParent);
    public void dmlTriggerMidSection(TriggerStatementBody vParent);
    public TriggerAction dmlTriggerAction();
    public TriggerAction ddlTriggerAction();
    public void endConversationArgumentsOpt(EndConversationStatement vParent);
    public SelectElement receiveSelectExpression();
    public SelectScalarExpression receiveColumnSelectExpression();
    public DialogOption beginConversationArgument(Int32& encounteredOptions);
    public ScalarExpressionDialogOption scalarExpressionBeginDialogConversationArgument(IToken tOption, Int32& encounteredOptions);
    public OnOffDialogOption onOffBeginDialogConversationArgument(IToken tOption, Int32& encounteredOptions);
    public MergeStatement mergeStatementWithoutSemicolon(SubDmlFlags subDmlFlags);
    public MergeActionClause mergeActionClause();
    public MergeCondition mergeCondition();
    public MergeAction mergeAction(MergeCondition condition);
    public UpdateMergeAction updateMergeAction(MergeCondition condition);
    public InsertMergeAction insertMergeAction(MergeCondition condition);
    public DeleteMergeAction deleteMergeAction(MergeCondition condition);
    public ValuesInsertSource mergeInsertSource();
    public void execStart(TSqlFragment vParent);
    public ExecuteContext executeAsStatementContext();
    public void executeContextStatementOptionsOpt(ExecuteAsStatement vParent);
    public ExecuteOption executeOption();
    public ExecuteOption executeOptionRecompile();
    public ResultSetsExecuteOption executeOptionResultSets();
    public ResultSetDefinition resultSetDefinition();
    public InlineResultSetDefinition inlineResultSetDefinition();
    public ResultSetDefinition asForXmlResultSetDefinition();
    public SchemaObjectResultSetDefinition asSchemaObjectResultSetDefinition();
    public ResultColumnDefinition resultColumnDefinition();
    public void execTypes(ExecuteSpecification vParent);
    public ExecutableEntity execStrTypes();
    public ExecuteContext execStrExecCtxt();
    public Identifier linkedServer();
    public ExecutableProcedureReference execProcEx();
    public ExecuteContext execCtxtStmt();
    public void execCtxtStmtType(ExecuteContext vParent);
    public Literal execCtxtStmtPrincipal();
    public ExecutableStringList execSqlList();
    public void setParamList(ExecutableEntity vParent);
    public ExecutableProcedureReference adhocDataSourceExecproc();
    public ProcedureReferenceName procObjectReference();
    public ProcedureReferenceName varObjectReference();
    public Literal procNumOpt();
    public ValueExpression stringOrGlobalVariableOrVariable();
    public ExecuteParameter setParam(Boolean& nameEqualsValueWasUsed, Int32& parameterNumber);
    public TableDefinition tableDefinitionCreateTable();
    public FederationScheme federatedOn(CreateTableStatement vParent);
    public void largeDataOnOpt(CreateTableStatement vParent);
    public void withTableOptions(CreateTableStatement vParent);
    public void largeDataOn(CreateTableStatement vParent);
    public TableOption createTableOption();
    public TableDataCompressionOption tableDataCompressionOption();
    public FileTableDirectoryTableOption fileTableDirectoryTableOption();
    public FileTableCollateFileNameTableOption fileTableCollateFileNameTableOption();
    public FileTableConstraintNameTableOption fileTableConstraintNameTableOption();
    public CompressionPartitionRange compressionPartitionRange();
    public AlterTableAlterColumnStatement alterTableAlterColumnStatement();
    public AlterTableTriggerModificationStatement alterTableTriggerModificationStatement();
    public AlterTableDropTableElementStatement alterTableDropTableElementStatement();
    public AlterTableSwitchStatement alterTableSwitchStatement();
    public ConstraintEnforcement constraintEnforcement();
    public AlterTableAddTableElementStatement alterTableAddTableElementStatement(ConstraintEnforcement vExistingRowsCheck);
    public AlterTableConstraintModificationStatement alterTableConstraintModificationStatement(ConstraintEnforcement vExistingRowsCheck);
    public AlterTableRebuildStatement alterTableRebuildStatement();
    public AlterTableChangeTrackingModificationStatement alterTableChangeTrackingModificationStatement();
    public AlterTableFileTableNamespaceStatement alterTableFileTableNamespaceStatement();
    public AlterTableSetStatement alterTableSetStatement();
    public TableOption tableOption();
    public LockEscalationTableOption lockEscalationTableOption();
    public FileStreamOnTableOption fileStreamOnTableOption();
    public ColumnStorageOptions columnStorage(IndexAffectingStatement statementType, DataTypeReference columnType);
    public AlterTableDropTableElement alterTableDropTableElement();
    public void alterTableDropTableElementWithOptions(AlterTableDropTableElement vParent);
    public DropClusteredConstraintOption dropClusteredConstraintOption();
    public ColumnDefinition columnDefinition(IndexAffectingStatement statementType, AlterTableAddTableElementStatement vStatement);
    public ConstraintDefinition tableConstraint(IndexAffectingStatement statementType, AlterTableAddTableElementStatement vStatement);
    public void computedColumnBody(ColumnDefinition vParent);
    public void computedColumnConstraintListOpt(IndexAffectingStatement statementType, ColumnDefinition vResult);
    public void regularColumnBody(IndexAffectingStatement statementType, ColumnDefinition vParent);
    public void columnConstraintListOpt(IndexAffectingStatement statementType, ColumnDefinition vResult);
    public ScalarExpression expressionWithFlags(ExpressionFlags expressionFlags);
    public ConstraintDefinition columnConstraint(IndexAffectingStatement statementType);
    public void rowguidcolConstraint(ColumnDefinition vParent);
    public IdentityOptions identityConstraint(IndexAffectingStatement statementType);
    public bool replicationClauseOpt(IndexAffectingStatement statementType, TSqlFragment vParent);
    public DefaultConstraintDefinition defaultColumnConstraint(IndexAffectingStatement statementType);
    public UniqueConstraintDefinition uniqueColumnConstraint(IndexAffectingStatement statementType);
    public ForeignKeyConstraintDefinition foreignKeyColumnConstraint(IndexAffectingStatement statementType);
    public CheckConstraintDefinition checkConstraint(IndexAffectingStatement statementType);
    public UniqueConstraintDefinition uniqueTableConstraint(IndexAffectingStatement statementType);
    public DefaultConstraintDefinition defaultTableConstraint(IndexAffectingStatement statementType);
    public ForeignKeyConstraintDefinition foreignKeyTableConstraint(IndexAffectingStatement statementType);
    public void uniqueConstraintHeader(UniqueConstraintDefinition vParent, bool throwInPhaseOne);
    public void uniqueConstraintTailOpt(IndexAffectingStatement statementType, UniqueConstraintDefinition vParent);
    public void uniqueConstraintIndexOptionsOpt(IndexAffectingStatement statement, UniqueConstraintDefinition vParent);
    public void sortedDataOptions();
    public DeleteUpdateAction deleteUpdateAction(TSqlFragment vParent);
    public void foreignKeyConstraintCommonEnd(IndexAffectingStatement statementType, ForeignKeyConstraintDefinition vParent);
    public void foreignConstraintColumnsOpt(ForeignKeyConstraintDefinition vParent);
    public BooleanExpression booleanExpressionWithFlags(ExpressionFlags expressionFlags);
    public XmlDataTypeReference xmlDataType(SchemaObjectName vName);
    public SchemaObjectName dataTypeSchemaObjectName();
    public SqlDataTypeReference sqlDataTypeWithoutNational(SchemaObjectName vName, SqlDataTypeOption vType);
    public UserDataTypeReference userDataType(SchemaObjectName vName);
    public SqlDataTypeReference doubleDataType();
    public SqlDataTypeReference sqlDataTypeWithNational();
    public void dataTypeParametersOpt(ParameterizedDataTypeReference vParent);
    public MaxLiteral max();
    public void identifierListElement(List`1<Identifier> vParent, int vMaxNumber, bool first);
    public MultiPartIdentifier nonEmptyThreePartObjectName();
    public MultiPartIdentifier oneOrTwoOrThreePartObjectName();
    public BooleanExpression booleanExpressionOr(ExpressionFlags expressionFlags);
    public BooleanExpression booleanExpressionAnd(ExpressionFlags expressionFlags);
    public BooleanExpression booleanExpressionUnary(ExpressionFlags expressionFlags);
    public BooleanExpression booleanExpressionPrimary(ExpressionFlags expressionFlags);
    public BooleanParenthesisExpression booleanExpressionParenthesis();
    public BooleanComparisonExpression comparisonPredicate(ScalarExpression vExpressionFirst, BooleanComparisonType vType, ExpressionFlags expressionFlags);
    public SubqueryComparisonPredicate subqueryComparisonPredicate(ScalarExpression vExpressionFirst, BooleanComparisonType vType, ExpressionFlags expressionFlags);
    public InPredicate inPredicate(ScalarExpression vExpressionFirst, bool vNotDefined, ExpressionFlags expressionFlags);
    public BooleanTernaryExpression betweenPredicate(ScalarExpression vExpressionFirst, bool vNotDefined, ExpressionFlags expressionFlags);
    public LikePredicate likePredicate(ScalarExpression vExpressionFirst, bool vNotDefined, ExpressionFlags expressionFlags);
    public FullTextPredicate fulltextPredicate();
    public ExistsPredicate existsPredicate(ExpressionFlags expressionFlags);
    public TSEqualCall tsEqualCall();
    public UpdateCall updateCall();
    public ColumnReferenceExpression fulltextColumn();
    public ColumnReferenceExpression starColumn();
    public SubqueryComparisonPredicateType subqueryComparisonPredicateType();
    public void escapeExpression(LikePredicate vParent, ExpressionFlags expressionFlags);
    public ScalarExpression expressionBinaryPri2(ExpressionFlags expressionFlags);
    public ScalarExpression expressionBinaryPri1(ExpressionFlags expressionFlags);
    public ScalarExpression expressionUnary(ExpressionFlags expressionFlags);
    public PrimaryExpression expressionWithClrElements(ExpressionFlags expressionFlags);
    public PrimaryExpression udtExpression();
    public PrimaryExpression expressionPrimary(ExpressionFlags expressionFlags);
    public FunctionCall expressionWithClrElementsFunctionCallPart();
    public CastCall castCall();
    public TryCastCall tryCastCall();
    public ParseCall parseCall();
    public TryParseCall tryParseCall();
    public IIfCall iIfCall();
    public FunctionCall builtInFunctionCall();
    public LeftFunctionCall leftFunctionCall();
    public RightFunctionCall rightFunctionCall();
    public PartitionFunctionCall partitionFunctionCall();
    public NextValueForExpression nextValueForCall();
    public PrimaryExpression columnOrFunctionCall();
    public NullIfExpression nullIfExpression(ExpressionFlags expressionFlags);
    public CoalesceExpression coalesceExpression(ExpressionFlags expressionFlags);
    public CaseExpression caseExpression(ExpressionFlags expressionFlags);
    public ConvertCall convertCall();
    public TryConvertCall tryConvertCall();
    public ParameterlessCall parameterlessCall();
    public ParenthesisExpression expressionParenthesis(ExpressionFlags expressionFlags);
    public UserDefinedTypeCallTarget userDefinedTypeCallTarget();
    public FunctionCall udtFunctionExpression(UserDefinedTypeCallTarget vCallTarget);
    public UserDefinedTypePropertyAccess udtPropertyExpression(UserDefinedTypeCallTarget vCallTarget);
    public FunctionCall basicFunctionCall();
    public OverClause overClause();
    public OverClause overClauseBeginning();
    public WindowFrameClause windowFrameClause();
    public OverClause overClauseNoOrderBy();
    public void windowFrameExtent(WindowFrameClause vParent);
    public WindowDelimiter windowFrameDelimiter();
    public WithinGroupClause withinGroupClause();
    public void regularBuiltInFunctionCall(FunctionCall vParent);
    public void aggregateBuiltInFunctionCall(FunctionCall vParent);
    public void withinGroupOrOverClause(FunctionCall vParent);
    public void reservedBuiltInFunctionCallParameters(TSqlFragment vParent, IList`1<ScalarExpression> parameters);
    public SimpleWhenClause simpleWhenClause(ExpressionFlags expressionFlags);
    public SearchedWhenClause searchedWhenClause(ExpressionFlags expressionFlags);
    public SimpleCaseExpression simpleCaseExpression(ScalarExpression inputExpression, ExpressionFlags expressionFlags);
    public SearchedCaseExpression searchedCaseExpression(ExpressionFlags expressionFlags);
    public FunctionCall userFunctionCall(MultiPartIdentifier vIdentifiers);
    public ValueExpression globalVariableOrVariableReference();
    public SchemaObjectNameOrValueExpression objectOrVariable();
    public MoneyLiteral moneyLiteral();
    public OdbcLiteral odbcLiteral();
    private void initializeFactory();
    private static Int64[] mk_tokenSet_0_();
    private static Int64[] mk_tokenSet_1_();
    private static Int64[] mk_tokenSet_2_();
    private static Int64[] mk_tokenSet_3_();
    private static Int64[] mk_tokenSet_4_();
    private static Int64[] mk_tokenSet_5_();
    private static Int64[] mk_tokenSet_6_();
    private static Int64[] mk_tokenSet_7_();
    private static Int64[] mk_tokenSet_8_();
    private static Int64[] mk_tokenSet_9_();
    private static Int64[] mk_tokenSet_10_();
    private static Int64[] mk_tokenSet_11_();
    private static Int64[] mk_tokenSet_12_();
    private static Int64[] mk_tokenSet_13_();
    private static Int64[] mk_tokenSet_14_();
    private static Int64[] mk_tokenSet_15_();
    private static Int64[] mk_tokenSet_16_();
    private static Int64[] mk_tokenSet_17_();
    private static Int64[] mk_tokenSet_18_();
    private static Int64[] mk_tokenSet_19_();
    private static Int64[] mk_tokenSet_20_();
    private static Int64[] mk_tokenSet_21_();
    private static Int64[] mk_tokenSet_22_();
    private static Int64[] mk_tokenSet_23_();
    private static Int64[] mk_tokenSet_24_();
    private static Int64[] mk_tokenSet_25_();
    private static Int64[] mk_tokenSet_26_();
    private static Int64[] mk_tokenSet_27_();
    private static Int64[] mk_tokenSet_28_();
    private static Int64[] mk_tokenSet_29_();
    private static Int64[] mk_tokenSet_30_();
    private static Int64[] mk_tokenSet_31_();
    private static Int64[] mk_tokenSet_32_();
    private static Int64[] mk_tokenSet_33_();
    private static Int64[] mk_tokenSet_34_();
    private static Int64[] mk_tokenSet_35_();
    private static Int64[] mk_tokenSet_36_();
    private static Int64[] mk_tokenSet_37_();
    private static Int64[] mk_tokenSet_38_();
    private static Int64[] mk_tokenSet_39_();
    private static Int64[] mk_tokenSet_40_();
    private static Int64[] mk_tokenSet_41_();
    private static Int64[] mk_tokenSet_42_();
    private static Int64[] mk_tokenSet_43_();
    private static Int64[] mk_tokenSet_44_();
    private static Int64[] mk_tokenSet_45_();
    private static Int64[] mk_tokenSet_46_();
    private static Int64[] mk_tokenSet_47_();
    private static Int64[] mk_tokenSet_48_();
    private static Int64[] mk_tokenSet_49_();
    private static Int64[] mk_tokenSet_50_();
    private static Int64[] mk_tokenSet_51_();
    private static Int64[] mk_tokenSet_52_();
    private static Int64[] mk_tokenSet_53_();
    private static Int64[] mk_tokenSet_54_();
    private static Int64[] mk_tokenSet_55_();
    private static Int64[] mk_tokenSet_56_();
    private static Int64[] mk_tokenSet_57_();
    private static Int64[] mk_tokenSet_58_();
    private static Int64[] mk_tokenSet_59_();
    private static Int64[] mk_tokenSet_60_();
    private static Int64[] mk_tokenSet_61_();
    private static Int64[] mk_tokenSet_62_();
    private static Int64[] mk_tokenSet_63_();
    private static Int64[] mk_tokenSet_64_();
    private static Int64[] mk_tokenSet_65_();
    private static Int64[] mk_tokenSet_66_();
    private static Int64[] mk_tokenSet_67_();
    private static Int64[] mk_tokenSet_68_();
    private static Int64[] mk_tokenSet_69_();
    private static Int64[] mk_tokenSet_70_();
    private static Int64[] mk_tokenSet_71_();
    private static Int64[] mk_tokenSet_72_();
    private static Int64[] mk_tokenSet_73_();
    private static Int64[] mk_tokenSet_74_();
    private static Int64[] mk_tokenSet_75_();
    private static Int64[] mk_tokenSet_76_();
    private static Int64[] mk_tokenSet_77_();
    private static Int64[] mk_tokenSet_78_();
    private static Int64[] mk_tokenSet_79_();
    private static Int64[] mk_tokenSet_80_();
    private static Int64[] mk_tokenSet_81_();
    private static Int64[] mk_tokenSet_82_();
    private static Int64[] mk_tokenSet_83_();
    private static Int64[] mk_tokenSet_84_();
    private static Int64[] mk_tokenSet_85_();
    private static Int64[] mk_tokenSet_86_();
    private static Int64[] mk_tokenSet_87_();
    private static Int64[] mk_tokenSet_88_();
    private static Int64[] mk_tokenSet_89_();
    private static Int64[] mk_tokenSet_90_();
    private static Int64[] mk_tokenSet_91_();
    private static Int64[] mk_tokenSet_92_();
    private static Int64[] mk_tokenSet_93_();
    private static Int64[] mk_tokenSet_94_();
    private static Int64[] mk_tokenSet_95_();
    private static Int64[] mk_tokenSet_96_();
    private static Int64[] mk_tokenSet_97_();
    private static Int64[] mk_tokenSet_98_();
    private static Int64[] mk_tokenSet_99_();
    private static Int64[] mk_tokenSet_100_();
    private static Int64[] mk_tokenSet_101_();
    private static Int64[] mk_tokenSet_102_();
    private static Int64[] mk_tokenSet_103_();
    private static Int64[] mk_tokenSet_104_();
    private static Int64[] mk_tokenSet_105_();
    private static Int64[] mk_tokenSet_106_();
    private static Int64[] mk_tokenSet_107_();
    private static Int64[] mk_tokenSet_108_();
    private static Int64[] mk_tokenSet_109_();
    private static Int64[] mk_tokenSet_110_();
    private static Int64[] mk_tokenSet_111_();
    private static Int64[] mk_tokenSet_112_();
    private static Int64[] mk_tokenSet_113_();
    private static Int64[] mk_tokenSet_114_();
    private static Int64[] mk_tokenSet_115_();
    private static Int64[] mk_tokenSet_116_();
    private static Int64[] mk_tokenSet_117_();
    private static Int64[] mk_tokenSet_118_();
    private static Int64[] mk_tokenSet_119_();
    private static Int64[] mk_tokenSet_120_();
    private static Int64[] mk_tokenSet_121_();
    private static Int64[] mk_tokenSet_122_();
    private static Int64[] mk_tokenSet_123_();
    private static Int64[] mk_tokenSet_124_();
    private static Int64[] mk_tokenSet_125_();
    private static Int64[] mk_tokenSet_126_();
    private static Int64[] mk_tokenSet_127_();
    private static Int64[] mk_tokenSet_128_();
    private static Int64[] mk_tokenSet_129_();
    private static Int64[] mk_tokenSet_130_();
    private static Int64[] mk_tokenSet_131_();
    private static Int64[] mk_tokenSet_132_();
    private static Int64[] mk_tokenSet_133_();
    private static Int64[] mk_tokenSet_134_();
    private static Int64[] mk_tokenSet_135_();
    private static Int64[] mk_tokenSet_136_();
    private static Int64[] mk_tokenSet_137_();
    private static Int64[] mk_tokenSet_138_();
    private static Int64[] mk_tokenSet_139_();
    private static Int64[] mk_tokenSet_140_();
    private static Int64[] mk_tokenSet_141_();
    private static Int64[] mk_tokenSet_142_();
    private static Int64[] mk_tokenSet_143_();
    private static Int64[] mk_tokenSet_144_();
    private static Int64[] mk_tokenSet_145_();
    private static Int64[] mk_tokenSet_146_();
    private static Int64[] mk_tokenSet_147_();
    private static Int64[] mk_tokenSet_148_();
    private static Int64[] mk_tokenSet_149_();
    private static Int64[] mk_tokenSet_150_();
    private static Int64[] mk_tokenSet_151_();
    private static Int64[] mk_tokenSet_152_();
    private static Int64[] mk_tokenSet_153_();
    private static Int64[] mk_tokenSet_154_();
    private static Int64[] mk_tokenSet_155_();
    private static Int64[] mk_tokenSet_156_();
    private static Int64[] mk_tokenSet_157_();
    private static Int64[] mk_tokenSet_158_();
    private static Int64[] mk_tokenSet_159_();
    private static Int64[] mk_tokenSet_160_();
    private static Int64[] mk_tokenSet_161_();
    private static Int64[] mk_tokenSet_162_();
    private static Int64[] mk_tokenSet_163_();
    private static Int64[] mk_tokenSet_164_();
    private static Int64[] mk_tokenSet_165_();
    private static Int64[] mk_tokenSet_166_();
    private static Int64[] mk_tokenSet_167_();
    private static Int64[] mk_tokenSet_168_();
    private static Int64[] mk_tokenSet_169_();
    private static Int64[] mk_tokenSet_170_();
    private static Int64[] mk_tokenSet_171_();
    private static Int64[] mk_tokenSet_172_();
    private static Int64[] mk_tokenSet_173_();
    private static Int64[] mk_tokenSet_174_();
    private static Int64[] mk_tokenSet_175_();
    private static Int64[] mk_tokenSet_176_();
    private static Int64[] mk_tokenSet_177_();
    private static Int64[] mk_tokenSet_178_();
    private static Int64[] mk_tokenSet_179_();
}
internal class Microsoft.SqlServer.TransactSql.ScriptDom.TSql120LexerInternal : TSqlLexerBaseInternal {
    public static int EOF;
    public static int NULL_TREE_LOOKAHEAD;
    public static int Add;
    public static int All;
    public static int Alter;
    public static int And;
    public static int Any;
    public static int As;
    public static int Asc;
    public static int Authorization;
    public static int Backup;
    public static int Begin;
    public static int Between;
    public static int Break;
    public static int Browse;
    public static int Bulk;
    public static int By;
    public static int Cascade;
    public static int Case;
    public static int Check;
    public static int Checkpoint;
    public static int Close;
    public static int Clustered;
    public static int Coalesce;
    public static int Collate;
    public static int Column;
    public static int Commit;
    public static int Compute;
    public static int Constraint;
    public static int Contains;
    public static int ContainsTable;
    public static int Continue;
    public static int Convert;
    public static int Create;
    public static int Cross;
    public static int Current;
    public static int CurrentDate;
    public static int CurrentTime;
    public static int CurrentTimestamp;
    public static int CurrentUser;
    public static int Cursor;
    public static int Database;
    public static int Dbcc;
    public static int Deallocate;
    public static int Declare;
    public static int Default;
    public static int Delete;
    public static int Deny;
    public static int Desc;
    public static int Distinct;
    public static int Distributed;
    public static int Double;
    public static int Drop;
    public static int Else;
    public static int End;
    public static int Errlvl;
    public static int Escape;
    public static int Except;
    public static int Exec;
    public static int Execute;
    public static int Exists;
    public static int Exit;
    public static int Fetch;
    public static int File;
    public static int FillFactor;
    public static int For;
    public static int Foreign;
    public static int FreeText;
    public static int FreeTextTable;
    public static int From;
    public static int Full;
    public static int Function;
    public static int GoTo;
    public static int Grant;
    public static int Group;
    public static int Having;
    public static int HoldLock;
    public static int Identity;
    public static int IdentityInsert;
    public static int IdentityColumn;
    public static int If;
    public static int In;
    public static int Index;
    public static int Inner;
    public static int Insert;
    public static int Intersect;
    public static int Into;
    public static int Is;
    public static int Join;
    public static int Key;
    public static int Kill;
    public static int Left;
    public static int Like;
    public static int LineNo;
    public static int National;
    public static int NoCheck;
    public static int NonClustered;
    public static int Not;
    public static int Null;
    public static int NullIf;
    public static int Of;
    public static int Off;
    public static int Offsets;
    public static int On;
    public static int Open;
    public static int OpenDataSource;
    public static int OpenQuery;
    public static int OpenRowSet;
    public static int OpenXml;
    public static int Option;
    public static int Or;
    public static int Order;
    public static int Outer;
    public static int Over;
    public static int Percent;
    public static int Plan;
    public static int Primary;
    public static int Print;
    public static int Proc;
    public static int Procedure;
    public static int Public;
    public static int Raiserror;
    public static int Read;
    public static int ReadText;
    public static int Reconfigure;
    public static int References;
    public static int Replication;
    public static int Restore;
    public static int Restrict;
    public static int Return;
    public static int Revoke;
    public static int Right;
    public static int Rollback;
    public static int RowCount;
    public static int RowGuidColumn;
    public static int Rule;
    public static int Save;
    public static int Schema;
    public static int Select;
    public static int SessionUser;
    public static int Set;
    public static int SetUser;
    public static int Shutdown;
    public static int Some;
    public static int Statistics;
    public static int SystemUser;
    public static int Table;
    public static int TextSize;
    public static int Then;
    public static int To;
    public static int Top;
    public static int Tran;
    public static int Transaction;
    public static int Trigger;
    public static int Truncate;
    public static int TSEqual;
    public static int Union;
    public static int Unique;
    public static int Update;
    public static int UpdateText;
    public static int Use;
    public static int User;
    public static int Values;
    public static int Varying;
    public static int View;
    public static int WaitFor;
    public static int When;
    public static int Where;
    public static int While;
    public static int With;
    public static int WriteText;
    public static int Disk;
    public static int Precision;
    public static int External;
    public static int Revert;
    public static int Pivot;
    public static int Unpivot;
    public static int TableSample;
    public static int Dump;
    public static int Load;
    public static int Merge;
    public static int StopList;
    public static int SemanticKeyPhraseTable;
    public static int SemanticSimilarityTable;
    public static int SemanticSimilarityDetailsTable;
    public static int TryConvert;
    public static int Bang;
    public static int PercentSign;
    public static int Ampersand;
    public static int LeftParenthesis;
    public static int RightParenthesis;
    public static int LeftCurly;
    public static int RightCurly;
    public static int Star;
    public static int MultiplyEquals;
    public static int Plus;
    public static int Comma;
    public static int Minus;
    public static int Dot;
    public static int Divide;
    public static int Colon;
    public static int DoubleColon;
    public static int Semicolon;
    public static int LessThan;
    public static int EqualsSign;
    public static int RightOuterJoin;
    public static int GreaterThan;
    public static int Circumflex;
    public static int VerticalLine;
    public static int Tilde;
    public static int AddEquals;
    public static int SubtractEquals;
    public static int DivideEquals;
    public static int ModEquals;
    public static int BitwiseAndEquals;
    public static int BitwiseOrEquals;
    public static int BitwiseXorEquals;
    public static int Go;
    public static int Label;
    public static int Integer;
    public static int Numeric;
    public static int Real;
    public static int HexLiteral;
    public static int Money;
    public static int SqlCommandIdentifier;
    public static int PseudoColumn;
    public static int DollarPartition;
    public static int AsciiStringOrQuotedIdentifier;
    public static int AsciiStringLiteral;
    public static int UnicodeStringLiteral;
    public static int Identifier;
    public static int QuotedIdentifier;
    public static int Variable;
    public static int OdbcInitiator;
    public static int ProcNameSemicolon;
    public static int SingleLineComment;
    public static int MultilineComment;
    public static int WhiteSpace;
    public static int Digit;
    public static int FirstLetter;
    public static int Letter;
    public static int CharHighNotWhitespace;
    public static int MoneySign;
    public static int WS_CHAR_WO_NEWLINE;
    public static int Number;
    public static int Exponent;
    public static int EndOfLine;
    public static BitSet tokenSet_0_;
    public static BitSet tokenSet_1_;
    public static BitSet tokenSet_2_;
    public static BitSet tokenSet_3_;
    public static BitSet tokenSet_4_;
    public static BitSet tokenSet_5_;
    public static BitSet tokenSet_6_;
    public static BitSet tokenSet_7_;
    public static BitSet tokenSet_8_;
    public static BitSet tokenSet_9_;
    public static BitSet tokenSet_10_;
    public static BitSet tokenSet_11_;
    public static BitSet tokenSet_12_;
    public static BitSet tokenSet_13_;
    public TSql120LexerInternal(Stream ins);
    public TSql120LexerInternal(TextReader r);
    public TSql120LexerInternal(InputBuffer ib);
    public TSql120LexerInternal(LexerSharedInputState state);
    private static TSql120LexerInternal();
    private void initialize();
    public virtual IToken nextToken();
    public void mBang(bool _createToken);
    public void mPercentSign(bool _createToken);
    public void mAmpersand(bool _createToken);
    public void mLeftParenthesis(bool _createToken);
    public void mRightParenthesis(bool _createToken);
    public void mLeftCurly(bool _createToken);
    public void mRightCurly(bool _createToken);
    public void mStar(bool _createToken);
    public void mMultiplyEquals(bool _createToken);
    public void mPlus(bool _createToken);
    public void mComma(bool _createToken);
    public void mMinus(bool _createToken);
    protected void mDot(bool _createToken);
    public void mDivide(bool _createToken);
    public void mColon(bool _createToken);
    public void mDoubleColon(bool _createToken);
    public void mLessThan(bool _createToken);
    public void mEqualsSign(bool _createToken);
    public void mRightOuterJoin(bool _createToken);
    public void mGreaterThan(bool _createToken);
    public void mCircumflex(bool _createToken);
    public void mVerticalLine(bool _createToken);
    public void mTilde(bool _createToken);
    public void mAddEquals(bool _createToken);
    public void mSubtractEquals(bool _createToken);
    public void mDivideEquals(bool _createToken);
    public void mModEquals(bool _createToken);
    public void mBitwiseAndEquals(bool _createToken);
    public void mBitwiseOrEquals(bool _createToken);
    public void mBitwiseXorEquals(bool _createToken);
    protected void mSemicolon(bool _createToken);
    protected void mDigit(bool _createToken);
    protected void mFirstLetter(bool _createToken);
    protected void mCharHighNotWhitespace(bool _createToken);
    protected void mLetter(bool _createToken);
    protected void mMoneySign(bool _createToken);
    public void mProcNameSemicolon(bool _createToken);
    protected void mWS_CHAR_WO_NEWLINE(bool _createToken);
    public void mNumber(bool _createToken);
    public void mWhiteSpace(bool _createToken);
    protected void mEndOfLine(bool _createToken);
    public void mGo(bool _createToken);
    protected void mLabel(bool _createToken);
    protected void mInteger(bool _createToken);
    protected void mReal(bool _createToken);
    protected void mNumeric(bool _createToken);
    protected void mHexLiteral(bool _createToken);
    protected void mExponent(bool _createToken);
    protected void mMoney(bool _createToken);
    protected void mSqlCommandIdentifier(bool _createToken);
    protected void mPseudoColumn(bool _createToken);
    protected void mDollarPartition(bool _createToken);
    protected void mAsciiStringOrQuotedIdentifier(bool _createToken);
    public void mAsciiStringLiteral(bool _createToken);
    public void mUnicodeStringLiteral(bool _createToken);
    public void mIdentifier(bool _createToken);
    public void mQuotedIdentifier(bool _createToken);
    public void mVariable(bool _createToken);
    protected void mOdbcInitiator(bool _createToken);
    public void mSingleLineComment(bool _createToken);
    public void mMultilineComment(bool _createToken);
    private static Int64[] mk_tokenSet_0_();
    private static Int64[] mk_tokenSet_1_();
    private static Int64[] mk_tokenSet_2_();
    private static Int64[] mk_tokenSet_3_();
    private static Int64[] mk_tokenSet_4_();
    private static Int64[] mk_tokenSet_5_();
    private static Int64[] mk_tokenSet_6_();
    private static Int64[] mk_tokenSet_7_();
    private static Int64[] mk_tokenSet_8_();
    private static Int64[] mk_tokenSet_9_();
    private static Int64[] mk_tokenSet_10_();
    private static Int64[] mk_tokenSet_11_();
    private static Int64[] mk_tokenSet_12_();
    private static Int64[] mk_tokenSet_13_();
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.TSql120Parser : TSqlParser {
    public TSql120Parser(bool initialQuotedIdentifiers);
    internal virtual TSqlLexerBaseInternal GetNewInternalLexer();
    private TSql120ParserInternal GetNewInternalParser();
    private TSql120ParserInternal GetNewInternalParserForInput(TextReader input, IList`1& errors, int startOffset, int startLine, int startColumn);
    public virtual TSqlFragment Parse(IList`1<TSqlParserToken> tokens, IList`1& errors);
    public virtual ChildObjectName ParseChildObjectName(TextReader input, IList`1& errors, int startOffset, int startLine, int startColumn);
    public virtual SchemaObjectName ParseSchemaObjectName(TextReader input, IList`1& errors, int startOffset, int startLine, int startColumn);
    public virtual DataTypeReference ParseScalarDataType(TextReader input, IList`1& errors, int startOffset, int startLine, int startColumn);
    public virtual ScalarExpression ParseExpression(TextReader input, IList`1& errors, int startOffset, int startLine, int startColumn);
    public virtual BooleanExpression ParseBooleanExpression(TextReader input, IList`1& errors, int startOffset, int startLine, int startColumn);
    public virtual StatementList ParseStatementList(TextReader input, IList`1& errors, int startOffset, int startLine, int startColumn);
    public virtual SelectStatement ParseSubQueryExpressionWithOptionalCTE(TextReader input, IList`1& errors, int startOffset, int startLine, int startColumn);
    internal IPv4 ParseIPv4(TextReader input, IList`1& errors, int startOffset, int startLine, int startColumn);
    public virtual TSqlFragment ParseConstantOrIdentifier(TextReader input, IList`1& errors, int startOffset, int startLine, int startColumn);
    public virtual TSqlFragment ParseConstantOrIdentifierWithDefault(TextReader input, IList`1& errors, int startOffset, int startLine, int startColumn);
    internal virtual TSqlStatement PhaseOneParse(TextReader input);
}
internal abstract class Microsoft.SqlServer.TransactSql.ScriptDom.TSql120ParserBaseInternal : TSql110ParserBaseInternal {
    protected TSql120ParserBaseInternal(TokenBuffer tokenBuf, int k);
    protected TSql120ParserBaseInternal(ParserSharedInputState state, int k);
    protected TSql120ParserBaseInternal(TokenStream lexer, int k);
    public TSql120ParserBaseInternal(bool initialQuotedIdentifiersOn);
    protected static void CheckLowPriorityLockWaitValue(IntegerLiteral maxDuration, AbortAfterWaitType abortAfterWait);
    protected static void VerifyAllowedIndexOption120(IndexAffectingStatement statement, IndexOption option);
}
internal class Microsoft.SqlServer.TransactSql.ScriptDom.TSql120ParserInternal : TSql120ParserBaseInternal {
    public static int EOF;
    public static int NULL_TREE_LOOKAHEAD;
    public static int Add;
    public static int All;
    public static int Alter;
    public static int And;
    public static int Any;
    public static int As;
    public static int Asc;
    public static int Authorization;
    public static int Backup;
    public static int Begin;
    public static int Between;
    public static int Break;
    public static int Browse;
    public static int Bulk;
    public static int By;
    public static int Cascade;
    public static int Case;
    public static int Check;
    public static int Checkpoint;
    public static int Close;
    public static int Clustered;
    public static int Coalesce;
    public static int Collate;
    public static int Column;
    public static int Commit;
    public static int Compute;
    public static int Constraint;
    public static int Contains;
    public static int ContainsTable;
    public static int Continue;
    public static int Convert;
    public static int Create;
    public static int Cross;
    public static int Current;
    public static int CurrentDate;
    public static int CurrentTime;
    public static int CurrentTimestamp;
    public static int CurrentUser;
    public static int Cursor;
    public static int Database;
    public static int Dbcc;
    public static int Deallocate;
    public static int Declare;
    public static int Default;
    public static int Delete;
    public static int Deny;
    public static int Desc;
    public static int Distinct;
    public static int Distributed;
    public static int Double;
    public static int Drop;
    public static int Else;
    public static int End;
    public static int Errlvl;
    public static int Escape;
    public static int Except;
    public static int Exec;
    public static int Execute;
    public static int Exists;
    public static int Exit;
    public static int Fetch;
    public static int File;
    public static int FillFactor;
    public static int For;
    public static int Foreign;
    public static int FreeText;
    public static int FreeTextTable;
    public static int From;
    public static int Full;
    public static int Function;
    public static int GoTo;
    public static int Grant;
    public static int Group;
    public static int Having;
    public static int HoldLock;
    public static int Identity;
    public static int IdentityInsert;
    public static int IdentityColumn;
    public static int If;
    public static int In;
    public static int Index;
    public static int Inner;
    public static int Insert;
    public static int Intersect;
    public static int Into;
    public static int Is;
    public static int Join;
    public static int Key;
    public static int Kill;
    public static int Left;
    public static int Like;
    public static int LineNo;
    public static int National;
    public static int NoCheck;
    public static int NonClustered;
    public static int Not;
    public static int Null;
    public static int NullIf;
    public static int Of;
    public static int Off;
    public static int Offsets;
    public static int On;
    public static int Open;
    public static int OpenDataSource;
    public static int OpenQuery;
    public static int OpenRowSet;
    public static int OpenXml;
    public static int Option;
    public static int Or;
    public static int Order;
    public static int Outer;
    public static int Over;
    public static int Percent;
    public static int Plan;
    public static int Primary;
    public static int Print;
    public static int Proc;
    public static int Procedure;
    public static int Public;
    public static int Raiserror;
    public static int Read;
    public static int ReadText;
    public static int Reconfigure;
    public static int References;
    public static int Replication;
    public static int Restore;
    public static int Restrict;
    public static int Return;
    public static int Revoke;
    public static int Right;
    public static int Rollback;
    public static int RowCount;
    public static int RowGuidColumn;
    public static int Rule;
    public static int Save;
    public static int Schema;
    public static int Select;
    public static int SessionUser;
    public static int Set;
    public static int SetUser;
    public static int Shutdown;
    public static int Some;
    public static int Statistics;
    public static int SystemUser;
    public static int Table;
    public static int TextSize;
    public static int Then;
    public static int To;
    public static int Top;
    public static int Tran;
    public static int Transaction;
    public static int Trigger;
    public static int Truncate;
    public static int TSEqual;
    public static int Union;
    public static int Unique;
    public static int Update;
    public static int UpdateText;
    public static int Use;
    public static int User;
    public static int Values;
    public static int Varying;
    public static int View;
    public static int WaitFor;
    public static int When;
    public static int Where;
    public static int While;
    public static int With;
    public static int WriteText;
    public static int Disk;
    public static int Precision;
    public static int External;
    public static int Revert;
    public static int Pivot;
    public static int Unpivot;
    public static int TableSample;
    public static int Dump;
    public static int Load;
    public static int Merge;
    public static int StopList;
    public static int SemanticKeyPhraseTable;
    public static int SemanticSimilarityTable;
    public static int SemanticSimilarityDetailsTable;
    public static int TryConvert;
    public static int Bang;
    public static int PercentSign;
    public static int Ampersand;
    public static int LeftParenthesis;
    public static int RightParenthesis;
    public static int LeftCurly;
    public static int RightCurly;
    public static int Star;
    public static int MultiplyEquals;
    public static int Plus;
    public static int Comma;
    public static int Minus;
    public static int Dot;
    public static int Divide;
    public static int Colon;
    public static int DoubleColon;
    public static int Semicolon;
    public static int LessThan;
    public static int EqualsSign;
    public static int RightOuterJoin;
    public static int GreaterThan;
    public static int Circumflex;
    public static int VerticalLine;
    public static int Tilde;
    public static int AddEquals;
    public static int SubtractEquals;
    public static int DivideEquals;
    public static int ModEquals;
    public static int BitwiseAndEquals;
    public static int BitwiseOrEquals;
    public static int BitwiseXorEquals;
    public static int Go;
    public static int Label;
    public static int Integer;
    public static int Numeric;
    public static int Real;
    public static int HexLiteral;
    public static int Money;
    public static int SqlCommandIdentifier;
    public static int PseudoColumn;
    public static int DollarPartition;
    public static int AsciiStringOrQuotedIdentifier;
    public static int AsciiStringLiteral;
    public static int UnicodeStringLiteral;
    public static int Identifier;
    public static int QuotedIdentifier;
    public static int Variable;
    public static int OdbcInitiator;
    public static int ProcNameSemicolon;
    public static int SingleLineComment;
    public static int MultilineComment;
    public static int WhiteSpace;
    public static String[] tokenNames_;
    public static BitSet tokenSet_0_;
    public static BitSet tokenSet_1_;
    public static BitSet tokenSet_2_;
    public static BitSet tokenSet_3_;
    public static BitSet tokenSet_4_;
    public static BitSet tokenSet_5_;
    public static BitSet tokenSet_6_;
    public static BitSet tokenSet_7_;
    public static BitSet tokenSet_8_;
    public static BitSet tokenSet_9_;
    public static BitSet tokenSet_10_;
    public static BitSet tokenSet_11_;
    public static BitSet tokenSet_12_;
    public static BitSet tokenSet_13_;
    public static BitSet tokenSet_14_;
    public static BitSet tokenSet_15_;
    public static BitSet tokenSet_16_;
    public static BitSet tokenSet_17_;
    public static BitSet tokenSet_18_;
    public static BitSet tokenSet_19_;
    public static BitSet tokenSet_20_;
    public static BitSet tokenSet_21_;
    public static BitSet tokenSet_22_;
    public static BitSet tokenSet_23_;
    public static BitSet tokenSet_24_;
    public static BitSet tokenSet_25_;
    public static BitSet tokenSet_26_;
    public static BitSet tokenSet_27_;
    public static BitSet tokenSet_28_;
    public static BitSet tokenSet_29_;
    public static BitSet tokenSet_30_;
    public static BitSet tokenSet_31_;
    public static BitSet tokenSet_32_;
    public static BitSet tokenSet_33_;
    public static BitSet tokenSet_34_;
    public static BitSet tokenSet_35_;
    public static BitSet tokenSet_36_;
    public static BitSet tokenSet_37_;
    public static BitSet tokenSet_38_;
    public static BitSet tokenSet_39_;
    public static BitSet tokenSet_40_;
    public static BitSet tokenSet_41_;
    public static BitSet tokenSet_42_;
    public static BitSet tokenSet_43_;
    public static BitSet tokenSet_44_;
    public static BitSet tokenSet_45_;
    public static BitSet tokenSet_46_;
    public static BitSet tokenSet_47_;
    public static BitSet tokenSet_48_;
    public static BitSet tokenSet_49_;
    public static BitSet tokenSet_50_;
    public static BitSet tokenSet_51_;
    public static BitSet tokenSet_52_;
    public static BitSet tokenSet_53_;
    public static BitSet tokenSet_54_;
    public static BitSet tokenSet_55_;
    public static BitSet tokenSet_56_;
    public static BitSet tokenSet_57_;
    public static BitSet tokenSet_58_;
    public static BitSet tokenSet_59_;
    public static BitSet tokenSet_60_;
    public static BitSet tokenSet_61_;
    public static BitSet tokenSet_62_;
    public static BitSet tokenSet_63_;
    public static BitSet tokenSet_64_;
    public static BitSet tokenSet_65_;
    public static BitSet tokenSet_66_;
    public static BitSet tokenSet_67_;
    public static BitSet tokenSet_68_;
    public static BitSet tokenSet_69_;
    public static BitSet tokenSet_70_;
    public static BitSet tokenSet_71_;
    public static BitSet tokenSet_72_;
    public static BitSet tokenSet_73_;
    public static BitSet tokenSet_74_;
    public static BitSet tokenSet_75_;
    public static BitSet tokenSet_76_;
    public static BitSet tokenSet_77_;
    public static BitSet tokenSet_78_;
    public static BitSet tokenSet_79_;
    public static BitSet tokenSet_80_;
    public static BitSet tokenSet_81_;
    public static BitSet tokenSet_82_;
    public static BitSet tokenSet_83_;
    public static BitSet tokenSet_84_;
    public static BitSet tokenSet_85_;
    public static BitSet tokenSet_86_;
    public static BitSet tokenSet_87_;
    public static BitSet tokenSet_88_;
    public static BitSet tokenSet_89_;
    public static BitSet tokenSet_90_;
    public static BitSet tokenSet_91_;
    public static BitSet tokenSet_92_;
    public static BitSet tokenSet_93_;
    public static BitSet tokenSet_94_;
    public static BitSet tokenSet_95_;
    public static BitSet tokenSet_96_;
    public static BitSet tokenSet_97_;
    public static BitSet tokenSet_98_;
    public static BitSet tokenSet_99_;
    public static BitSet tokenSet_100_;
    public static BitSet tokenSet_101_;
    public static BitSet tokenSet_102_;
    public static BitSet tokenSet_103_;
    public static BitSet tokenSet_104_;
    public static BitSet tokenSet_105_;
    public static BitSet tokenSet_106_;
    public static BitSet tokenSet_107_;
    public static BitSet tokenSet_108_;
    public static BitSet tokenSet_109_;
    public static BitSet tokenSet_110_;
    public static BitSet tokenSet_111_;
    public static BitSet tokenSet_112_;
    public static BitSet tokenSet_113_;
    public static BitSet tokenSet_114_;
    public static BitSet tokenSet_115_;
    public static BitSet tokenSet_116_;
    public static BitSet tokenSet_117_;
    public static BitSet tokenSet_118_;
    public static BitSet tokenSet_119_;
    public static BitSet tokenSet_120_;
    public static BitSet tokenSet_121_;
    public static BitSet tokenSet_122_;
    public static BitSet tokenSet_123_;
    public static BitSet tokenSet_124_;
    public static BitSet tokenSet_125_;
    public static BitSet tokenSet_126_;
    public static BitSet tokenSet_127_;
    public static BitSet tokenSet_128_;
    public static BitSet tokenSet_129_;
    public static BitSet tokenSet_130_;
    public static BitSet tokenSet_131_;
    public static BitSet tokenSet_132_;
    public static BitSet tokenSet_133_;
    public static BitSet tokenSet_134_;
    public static BitSet tokenSet_135_;
    public static BitSet tokenSet_136_;
    public static BitSet tokenSet_137_;
    public static BitSet tokenSet_138_;
    public static BitSet tokenSet_139_;
    public static BitSet tokenSet_140_;
    public static BitSet tokenSet_141_;
    public static BitSet tokenSet_142_;
    public static BitSet tokenSet_143_;
    public static BitSet tokenSet_144_;
    public static BitSet tokenSet_145_;
    public static BitSet tokenSet_146_;
    public static BitSet tokenSet_147_;
    public static BitSet tokenSet_148_;
    public static BitSet tokenSet_149_;
    public static BitSet tokenSet_150_;
    public static BitSet tokenSet_151_;
    public static BitSet tokenSet_152_;
    public static BitSet tokenSet_153_;
    public static BitSet tokenSet_154_;
    public static BitSet tokenSet_155_;
    public static BitSet tokenSet_156_;
    public static BitSet tokenSet_157_;
    public static BitSet tokenSet_158_;
    public static BitSet tokenSet_159_;
    public static BitSet tokenSet_160_;
    public static BitSet tokenSet_161_;
    public static BitSet tokenSet_162_;
    public static BitSet tokenSet_163_;
    public static BitSet tokenSet_164_;
    public static BitSet tokenSet_165_;
    public static BitSet tokenSet_166_;
    public static BitSet tokenSet_167_;
    public static BitSet tokenSet_168_;
    public static BitSet tokenSet_169_;
    public static BitSet tokenSet_170_;
    public static BitSet tokenSet_171_;
    public static BitSet tokenSet_172_;
    public static BitSet tokenSet_173_;
    public static BitSet tokenSet_174_;
    public static BitSet tokenSet_175_;
    public static BitSet tokenSet_176_;
    public static BitSet tokenSet_177_;
    public static BitSet tokenSet_178_;
    public static BitSet tokenSet_179_;
    public static BitSet tokenSet_180_;
    public static BitSet tokenSet_181_;
    public TSql120ParserInternal(bool initialQuotedIdentifiersOn);
    protected TSql120ParserInternal(TokenBuffer tokenBuf, int k);
    public TSql120ParserInternal(TokenBuffer tokenBuf);
    protected TSql120ParserInternal(TokenStream lexer, int k);
    public TSql120ParserInternal(TokenStream lexer);
    public TSql120ParserInternal(ParserSharedInputState state);
    private static TSql120ParserInternal();
    protected void initialize();
    public ChildObjectName entryPointChildObjectName();
    public ChildObjectName childObjectNameWithThreePrefixes();
    public SchemaObjectName entryPointSchemaObjectName();
    public SchemaObjectName schemaObjectFourPartName();
    public DataTypeReference entryPointScalarDataType();
    public DataTypeReference scalarDataType();
    public ScalarExpression entryPointExpression();
    public ScalarExpression expression();
    public BooleanExpression entryPointBooleanExpression();
    public BooleanExpression booleanExpression();
    public StatementList entryPointStatementList();
    public StatementList statementList(Boolean& vParseErrorOccurred);
    public SelectStatement entryPointSubqueryExpressionWithOptionalCTE();
    public SelectFunctionReturnType functionReturnClauseRelational();
    public IPv4 entryPointIPv4Address();
    public IPv4 ipAddressV4();
    public TSqlFragment entryPointConstantOrIdentifier();
    public ScalarExpression possibleNegativeConstantOrIdentifier();
    public TSqlFragment entryPointConstantOrIdentifierWithDefault();
    public ScalarExpression possibleNegativeConstantOrIdentifierWithDefault();
    public TSqlScript script();
    public TSqlBatch batch();
    public TSqlStatement lastStatementOptSemi();
    public ExecuteStatement optSimpleExecute();
    public TSqlStatement statementOptSemi();
    public TSqlStatement statement();
    public void optSemicolons(TSqlStatement vParent);
    public TSqlStatement lastStatement();
    public ExecutableProcedureReference execProc();
    public CreateTableStatement createTableStatement();
    public AlterTableStatement alterTableStatement();
    public TSqlStatement createIndexStatement();
    public TSqlStatement declareStatements();
    public TSqlStatement setStatements();
    public TSqlStatement beginStatements();
    public BreakStatement breakStatement();
    public ContinueStatement continueStatement();
    public IfStatement ifStatement();
    public WhileStatement whileStatement();
    public LabelStatement labelStatement();
    public TSqlStatement backupStatements();
    public TSqlStatement restoreStatements();
    public GoToStatement gotoStatement();
    public SaveTransactionStatement saveTransactionStatement();
    public RollbackTransactionStatement rollbackTransactionStatement();
    public CommitTransactionStatement commitTransactionStatement();
    public CreateStatisticsStatement createStatisticsStatement();
    public UpdateStatisticsStatement updateStatisticsStatement();
    public TSqlStatement alterDatabaseStatements();
    public ExecuteStatement executeStatement();
    public StatementWithCtesAndXmlNamespaces withCommonTableExpressionsAndXmlNamespacesStatements();
    public RaiseErrorStatement raiseErrorStatement();
    public TSqlStatement alter2005Statements();
    public TSqlStatement create2005Statements();
    public TSqlStatement createDatabaseStatements();
    public AddSignatureStatement addSignatureStatement();
    public TSqlStatement identifierStatements();
    public PrintStatement printStatement();
    public WaitForStatement waitForStatement();
    public ReadTextStatement readTextStatement();
    public UpdateTextStatement updateTextStatement();
    public WriteTextStatement writeTextStatement();
    public LineNoStatement lineNoStatement();
    public UseStatement useStatement();
    public TSqlStatement killStatements();
    public BulkInsertStatement bulkInsertStatement();
    public InsertBulkStatement insertBulkStatement();
    public CheckpointStatement checkpointStatement();
    public ReconfigureStatement reconfigureStatement();
    public ShutdownStatement shutdownStatement();
    public SetUserStatement setUserStatement();
    public TruncateTableStatement truncateTableStatement();
    public GrantStatement grantStatement90();
    public DenyStatement denyStatement90();
    public RevokeStatement revokeStatement90();
    public ReturnStatement returnStatement();
    public TSqlStatement openStatements();
    public TSqlStatement closeStatements();
    public DeallocateCursorStatement deallocateCursorStatement();
    public FetchCursorStatement fetchCursorStatement();
    public TSqlStatement dropStatements();
    public DbccStatement dbccStatement();
    public RevertStatement revertStatement();
    public ExecuteAsStatement executeAsStatement();
    public EndConversationStatement endConversationStatement();
    public WithCtesAndXmlNamespaces withCommonTableExpressionsAndXmlNamespaces();
    public SelectStatement select(SubDmlFlags subDmlFlags);
    public DeleteStatement deleteStatement(SubDmlFlags subDmlFlags);
    public InsertStatement insertStatement(SubDmlFlags subDmlFlags);
    public UpdateStatement updateStatement(SubDmlFlags subDmlFlags);
    public MergeStatement mergeStatement(SubDmlFlags subDmlFlags);
    public CreateProcedureStatement createProcedureStatement();
    public AlterProcedureStatement alterProcedureStatement();
    public CreateTriggerStatement createTriggerStatement();
    public AlterTriggerStatement alterTriggerStatement();
    public CreateDefaultStatement createDefaultStatement();
    public CreateRuleStatement createRuleStatement();
    public CreateViewStatement createViewStatement();
    public AlterViewStatement alterViewStatement();
    public CreateFunctionStatement createFunctionStatement();
    public AlterFunctionStatement alterFunctionStatement();
    public CreateSchemaStatement createSchemaStatement();
    public CreateFederationStatement createFederationStatement();
    public AlterFederationStatement alterFederationStatement();
    public UseFederationStatement useFederationStatement();
    public EnableDisableTriggerStatement disableTriggerStatement();
    public EnableDisableTriggerStatement enableTriggerStatement();
    public MoveConversationStatement moveConversationStatement();
    public GetConversationGroupStatement getConversationGroupStatement();
    public ReceiveStatement receiveStatement();
    public SendStatement sendStatement();
    public ThrowStatement throwStatement();
    public void enableDisableTriggerBody(EnableDisableTriggerStatement vParent);
    public SchemaObjectName schemaObjectThreePartName();
    public TriggerObject triggerObject();
    public CreateAggregateStatement createAggregateStatement();
    public CreateApplicationRoleStatement createApplicationRoleStatement();
    public CreateAssemblyStatement createAssemblyStatement();
    public CreateAsymmetricKeyStatement createAsymmetricKeyStatement();
    public CreateAvailabilityGroupStatement createAvailabilityGroupStatement();
    public CreateBrokerPriorityStatement createBrokerPriorityStatement();
    public CreateCertificateStatement createCertificateStatement();
    public CreateColumnStoreIndexStatement createColumnStoreIndexStatement(IToken tUnique, Nullable`1<bool> isClustered);
    public CreateContractStatement createContractStatement();
    public CreateCredentialStatement createCredentialStatement();
    public CreateCryptographicProviderStatement createCryptographicProviderStatement();
    public CreateEndpointStatement createEndpointStatement();
    public TSqlStatement createEventStatement();
    public TSqlStatement createFulltextStatement();
    public IndexStatement createPrimaryXmlIndexStatement();
    public CreateSelectiveXmlIndexStatement createSelectiveXmlIndexStatement();
    public TSqlStatement createXmlStatements();
    public CreateLoginStatement createLoginStatement();
    public CreateMessageTypeStatement createMessageTypeStatement();
    public CreateMasterKeyStatement createMasterKeyStatement();
    public TSqlStatement createPartitionStatement();
    public CreateQueueStatement createQueueStatement();
    public CreateRemoteServiceBindingStatement createRemoteServiceBindingStatement();
    public CreateResourcePoolStatement createResourcePoolStatement();
    public CreateRoleStatement createRoleStatement();
    public CreateRouteStatement createRouteStatement();
    public CreateSearchPropertyListStatement createSearchPropertyListStatement();
    public CreateServiceStatement createServiceStatement();
    public CreateSpatialIndexStatement createSpatialIndexStatement();
    public CreateSymmetricKeyStatement createSymmetricKeyStatement();
    public CreateSynonymStatement createSynonymStatement();
    public CreateTypeStatement createTypeStatement();
    public TSqlStatement createServerStatements();
    public CreateWorkloadGroupStatement createWorkloadGroupStatement();
    public CreateSequenceStatement createSequenceStatement();
    public CreateUserStatement createUserStatement();
    public ProcedureParameter aggregateParameter();
    public AssemblyName assemblyName();
    public Identifier identifierVariable();
    public NullableConstraintDefinition nullableConstraint();
    public void applicationRoleStatement(ApplicationRoleStatement vParent, bool defaultSchemaAndPasswordOnly);
    public Identifier identifier();
    public void authorizationOpt(IAuthorization vParent);
    public void expressionList(TSqlFragment vParent, IList`1<ScalarExpression> expressions);
    public PermissionSetAssemblyOption assemblyPermissionSetOption(IToken tPermissionSetVisibility);
    public void createAsymmetricKeyParams(CreateAsymmetricKeyStatement vParent);
    public Literal encryptClause();
    public EncryptionSource asymKeySource();
    public void asymKeySpec(CreateAsymmetricKeyStatement vParent);
    public FileEncryptionSource fileEncryptionSource();
    public AssemblyEncryptionSource assemblyEncryptionSource();
    public ProviderEncryptionSource providerEncryptionSource();
    public void providerKeySourceOptions(IList`1<KeyOption> optionsList, TSqlFragment vParent);
    public StringLiteral stringLiteral();
    public void createCertificateParams(CreateCertificateStatement vParent);
    public void createCertificateActivityFlag(CertificateStatementBase vParent);
    public void certificateSource(CreateCertificateStatement vParent);
    public CertificateOption certificateOption(CertificateOptionKinds encountered);
    public OptionState optionOnOff(TSqlFragment vParent);
    public void privateKeySpec(CertificateStatementBase vParent);
    public void certificatePrivateKeySpec(CertificateStatementBase vParent);
    public void passwordChangeOption(IPasswordChangeOption vParent);
    public ContractMessage contractMessage();
    public void credentialStatementBody(CredentialStatement vParent);
    public TSqlStatement createServerAuditStatements();
    public CreateServerRoleStatement createServerRoleStatement();
    public CreateServerAuditSpecificationStatement createServerAuditSpecificationStatement();
    public CreateServerAuditStatement createServerAuditStatement();
    public AuditTarget auditTargetClause(bool filePathRequired);
    public void auditCreateWithClause(ServerAuditStatement vParent);
    public BooleanExpression eventBooleanExpression();
    public AuditTargetOption auditFileOption();
    public MaxSizeAuditTargetOption maxSizeAuditFileOption();
    public MaxRolloverFilesAuditTargetOption maxRolloverFilesAuditFileOption();
    public OnOffAuditTargetOption reserveDiskSpaceAuditFileOption();
    public LiteralAuditTargetOption maxFilesAuditFileOption();
    public LiteralAuditTargetOption filePathAuditFileOption();
    public IntegerLiteral integer();
    public AuditOption auditCreateOption();
    public void auditWithClause(ServerAuditStatement vParent);
    public AuditOption auditOption();
    public QueueDelayAuditOption queueDelayAuditOption(IToken tOption);
    public OnFailureAuditOption onFailureAuditOption(IToken tOption);
    public AuditGuidAuditOption auditGuidAuditOption(IToken tOption);
    public StateAuditOption stateAuditOption(IToken tOption);
    public void auditSpecificationForClause(AuditSpecificationStatement vParent);
    public AuditSpecificationPart createAuditSpecificationDetail();
    public void auditSpecificationStateOpt(AuditSpecificationStatement vParent);
    public TSqlStatement alterServerStatements();
    public TSqlStatement alterServerAuditStatements();
    public TSqlStatement alterServerConfigurationStatement();
    public AlterServerRoleStatement alterServerRoleStatement();
    public AlterServerAuditSpecificationStatement alterServerAuditSpecificationStatement();
    public AlterServerAuditStatement alterServerAuditStatement();
    public AuditSpecificationPart auditSpecificationDetail();
    public AlterServerConfigurationStatement alterServerConfigurationSetProcessAffinityStatement();
    public AlterServerConfigurationSetBufferPoolExtensionStatement alterServerConfigurationSetBufferPoolExtensionStatement();
    public AlterServerConfigurationSetDiagnosticsLogStatement alterServerConfigurationSetDiagnosticsLogStatement();
    public AlterServerConfigurationSetFailoverClusterPropertyStatement alterServerConfigurationSetFailoverClusterPropertyStatement();
    public AlterServerConfigurationSetHadrClusterStatement alterServerConfigurationSetHadrClusterStatement();
    public AlterServerConfigurationBufferPoolExtensionContainerOption alterServerConfigurationBufferPoolExtensionContainerOption();
    public OnOffOptionValue onOffOptionValue();
    public AlterServerConfigurationBufferPoolExtensionOption alterServerConfigurationBufferPoolExtensionFileNameOption();
    public AlterServerConfigurationBufferPoolExtensionSizeOption alterServerConfigurationBufferPoolExtensionSizeOption();
    public LiteralOptionValue stringLiteralOptionValue();
    public LiteralOptionValue integerLiteralOptionValue();
    public MemoryUnit memUnit(TSqlFragment vParent);
    public AlterServerConfigurationDiagnosticsLogOption alterServerConfigurationDiagnosticsLogOption();
    public AlterServerConfigurationDiagnosticsLogMaxSizeOption alterServerConfigurationDiagnosticsLogMaxSizeOption();
    public LiteralOptionValue stringOrDefaultLiteralOptionValue();
    public LiteralOptionValue integerOrDefaultLiteralOptionValue();
    public LiteralOptionValue defaultLiteralOptionValue();
    public AlterServerConfigurationFailoverClusterPropertyOption alterServerConfigurationFailoverClusterPropertyOption();
    public LiteralOptionValue binaryOrDefaultLiteralOptionValue();
    public AlterServerConfigurationHadrClusterOption alterServerConfigurationHadrClusterOption();
    public void affinityRangeList(AlterServerConfigurationStatement vParent);
    public ProcessAffinityRange affinityRange();
    public AlterDatabaseAuditSpecificationStatement alterDatabaseAuditSpecification(IToken tAlter);
    public AlterDatabaseStatement alterDatabase(IToken tAlter);
    public AlterDatabaseEncryptionKeyStatement alterDatabaseEncryptionKey(IToken tAlter);
    public SqlCommandIdentifier sqlCommandIdentifier();
    public AlterDatabaseStatement alterDbAdd();
    public AlterDatabaseStatement alterDbRemove();
    public AlterDatabaseStatement alterDbModify();
    public AlterDatabaseSetStatement alterDbSet();
    public AlterDatabaseCollateStatement alterDbCollate();
    public AlterDatabaseRebuildLogStatement alterDbRebuild();
    public void collation(ICollationSetter vParent);
    public FileDeclaration fileDecl(bool isAlterDbModifyFileStatement);
    public AlterDatabaseAddFileStatement alterDbAddFile();
    public AlterDatabaseAddFileGroupStatement alterDbAddFilegroup();
    public void fileDeclBodyList(TSqlFragment vParent, IList`1<FileDeclaration> fileDeclarations);
    public Identifier toFilegroup();
    public AlterDatabaseModifyFileGroupStatement alterDbModifyFilegroup();
    public AlterDatabaseModifyFileStatement alterDbModifyFile();
    public AlterDatabaseSetStatement alterDbModifyAzureOptions();
    public void azureOptions(TSqlFragment vParent, IList`1<DatabaseOption> vOptions);
    public AlterDatabaseTermination xactTermination();
    public AlterDatabaseSetStatement dbOptionStateList();
    public DatabaseOption dbOptionStateItem(UInt64& encounteredOptions);
    public CursorDefaultDatabaseOption cursorDefaultDbOption();
    public RecoveryDatabaseOption recoveryDbOption();
    public TargetRecoveryTimeDatabaseOption targetRecoveryTimeDbOption();
    public PageVerifyDatabaseOption pageVerifyDbOption();
    public PartnerDatabaseOption partnerOption();
    public WitnessDatabaseOption witnessOption();
    public ParameterizationDatabaseOption parameterizationOption();
    public LiteralDatabaseOption compatibilityLevelDbOption();
    public ChangeTrackingDatabaseOption changeTrackingDbOption();
    public ContainmentDatabaseOption dbContainmentOption();
    public DatabaseOption hadrDbOption();
    public DelayedDurabilityDatabaseOption dbDelayedDurabilityOption();
    public AutoCreateStatisticsDatabaseOption autoCreateStatisticsDbOption();
    public DatabaseOption createAlterDbOption(UInt64& encounteredOptions);
    public DatabaseOption dbSingleIdentOption();
    public OnOffDatabaseOption alterDbOnOffOption();
    public void changeTrackingOnOptions(ChangeTrackingDatabaseOption vParent);
    public ChangeTrackingOptionDetail changeTrackingOneOption(Boolean& autoCleanupEncountered, Boolean& changeRetentionEncountered);
    public HadrAvailabilityGroupDatabaseOption hadrAvailabilityDbOption();
    public HadrDatabaseOption simpleHadrDbOption();
    public AuditSpecificationPart auditSpecificationDetailDb();
    public CryptoMechanism dekEncryptor();
    public CreateDatabaseAuditSpecificationStatement createDatabaseAuditSpecification();
    public CreateDatabaseStatement createDatabase();
    public CreateDatabaseEncryptionKeyStatement createDatabaseEncryptionKey();
    public void azureAsCopyOf(CreateDatabaseStatement vParent);
    public void recoveryUnitList(CreateDatabaseStatement vParent);
    public void collationOpt(ICollationSetter vParent);
    public void dbAddendums(CreateDatabaseStatement vParent);
    public void withCreateDbOptions(CreateDatabaseStatement vParent);
    public DatabaseOption azureOption();
    public MaxSizeDatabaseOption azureMaxSizeDatabaseOption();
    public LiteralDatabaseOption azureEditionDatabaseOption();
    public LiteralDatabaseOption azureServiceObjectiveDatabaseOption();
    public MultiPartIdentifier multiPartIdentifier(int vMaxNumber);
    public void onDisk(CreateDatabaseStatement vParent);
    public FileGroupDefinition fileGroupDecl();
    public FileDeclaration fileDeclBody(bool isAlterDbModifyFileStatement);
    public FileDeclarationOption fileOption(bool newNameAllowed);
    public NameFileDeclarationOption nameFileOption();
    public FileNameFileDeclarationOption fileNameFileOption();
    public SizeFileDeclarationOption sizeFileOption();
    public MaxSizeFileDeclarationOption maxSizeFileOption();
    public FileGrowthFileDeclarationOption fileGrowthFileOption();
    public NameFileDeclarationOption newNameFileOption();
    public FileDeclarationOption offlineFileOption();
    public IdentifierOrValueExpression nonEmptyStringOrIdentifier();
    public StringLiteral nonEmptyString();
    public DatabaseOption createDbServiceBrokerOption();
    public DatabaseOption restrictedUserCreateDbOption();
    public OnOffDatabaseOption createDbOnOffOption();
    public FileStreamDatabaseOption fileStreamCreateAlterDbOption();
    public DatabaseOption createAlterDbEqualsSignOption();
    public LiteralDatabaseOption createAlterDbLiteralOption(IToken tOption);
    public IdentifierDatabaseOption createAlterDbIdentifierOption(IToken tOption);
    public OnOffDatabaseOption createAlterDbOnOffOption(IToken tOption);
    public void fileStreamOption(FileStreamDatabaseOption vParent);
    public Literal stringLiteralOrNull();
    public AuditSpecificationPart createAuditSpecificationDetailDb();
    public AuditActionSpecification auditActionSpecification();
    public AuditActionGroupReference databaseAuditActionGroup();
    public AuditActionGroupReference serverAuditActionGroup();
    public DatabaseAuditAction actionWithQual();
    public SecurityTargetObject securityTargetObject(bool vColumnsDisallowed);
    public SecurityPrincipal principal();
    public void dekEncryptorType(CryptoMechanism vParent);
    public BackupCertificateStatement backupCertificateStatement();
    public BackupServiceMasterKeyStatement backupServiceMasterKeyStatement();
    public BackupMasterKeyStatement backupMasterKeyStatement();
    public BackupStatement backupStatement();
    public BackupStatement backupMain();
    public void backupDevices(BackupStatement vParent);
    public void backupOptions(BackupStatement vParent);
    public RestoreServiceMasterKeyStatement restoreServiceMasterKeyStatement();
    public RestoreMasterKeyStatement restoreMasterKeyStatement();
    public RestoreStatement restoreStatement();
    public void restoreMain(RestoreStatement vParent);
    public void devList(TSqlFragment vParent, IList`1<DeviceInfo> deviceInfos);
    public void restoreOptions(RestoreStatement vParent);
    public BackupDatabaseStatement backupDatabase();
    public BackupTransactionLogStatement backupTransactionLog();
    public IdentifierOrValueExpression identifierOrVariable();
    public void backupFileListOpt(BackupDatabaseStatement vParent);
    public BackupRestoreFileInfo backupRestoreFile();
    public void restoreFileListOpt(RestoreStatement vParent);
    public ValueExpression stringOrVariable();
    public void backupRestoreFileNameList(BackupRestoreFileInfo vParent);
    public MirrorToClause mirrorTo();
    public DeviceInfo deviceInfo();
    public BackupOption backupOption();
    public BackupEncryptionOption backupEncryptionOption();
    public ScalarExpression signedIntegerOrVariable();
    public CryptoMechanism backupEncrytor();
    public void restoreOptionsList(RestoreStatement vParent);
    public RestoreOption restoreOption();
    public FileStreamRestoreOption fileStreamRestoreOption();
    public RestoreOption simpleRestoreOption();
    public ValueExpression afterClause();
    public ScalarExpression signedInteger();
    public MoveRestoreOption moveRestoreOption();
    public ScalarExpressionRestoreOption fileRestoreOption();
    public void backupMasterKeyBody(BackupRestoreMasterKeyStatementBase vParent);
    public void restoreMasterKeyBody(BackupRestoreMasterKeyStatementBase vParent);
    public IdentifierOrValueExpression bulkInsertFrom();
    public void bulkInsertOptions(BulkInsertStatement vParent);
    public IdentifierOrValueExpression stringOrIdentifier();
    public BulkInsertOption bulkInsertOption();
    public OrderBulkInsertOption bulkInsertSortOrderOption();
    public LiteralBulkInsertOption simpleBulkInsertOptionWithValue();
    public BulkInsertOption simpleBulkInsertOptionNoValue();
    public BulkInsertOption insertBulkOption();
    public BulkInsertOption simpleInsertBulkOption();
    public Literal integerOrNumeric();
    public void coldefList(InsertBulkStatement vParent);
    public void insertBulkOptions(InsertBulkStatement vParent);
    public InsertBulkColumnDefinition coldefItem();
    public ColumnDefinitionBase columnDefinitionEx();
    public bool nullNotNull(TSqlFragment vParent);
    public ColumnWithSortOrder columnWithSortOrder();
    public OrderBulkInsertOption openRowsetBulkOrderHint();
    public void dbccNamedLiteralList(DbccStatement vParent);
    public void dbccOptions(DbccStatement vParent);
    public void dbccOptionsList(DbccStatement vParent);
    public void dbccOptionsListItems(DbccStatement vParent);
    public void dbccOptionsJoin(DbccStatement vParent);
    public DbccOption dbccOption();
    public DbccOption dbccJoinOption();
    public DbccNamedLiteral dbccNamedLiteral();
    public void endpointOptions(AlterCreateEndpointStatementBase vParent);
    public void protocolInfo(AlterCreateEndpointStatementBase vParent);
    public void payloadInfo(AlterCreateEndpointStatementBase vParent);
    public void endpointOption(AlterCreateEndpointStatementBase vParent);
    public void endpointState(AlterCreateEndpointStatementBase vParent);
    public void endpointAffinity(AlterCreateEndpointStatementBase vParent);
    public EndpointProtocolOption protocolOptionsItem(EndpointProtocol protocol, EndpointProtocolOptions encountered);
    public ListenerIPEndpointProtocolOption listenerIpProtocolOption(EndpointProtocol protocol, EndpointProtocolOptions encountered);
    public LiteralEndpointProtocolOption listenerPortProtocolOption(EndpointProtocol protocol, EndpointProtocolOptions encountered);
    public LiteralEndpointProtocolOption pathProtocolOption(EndpointProtocol protocol, EndpointProtocolOptions encountered);
    public LiteralEndpointProtocolOption siteProtocolOption(EndpointProtocol protocol, EndpointProtocolOptions encountered);
    public LiteralEndpointProtocolOption clearPortProtocolOption(EndpointProtocol protocol, EndpointProtocolOptions encountered);
    public LiteralEndpointProtocolOption sslPortProtocolOption(EndpointProtocol protocol, EndpointProtocolOptions encountered);
    public AuthenticationEndpointProtocolOption authenticationProtocolOption(EndpointProtocol protocol, EndpointProtocolOptions encountered);
    public PortsEndpointProtocolOption portsProtocolOption(EndpointProtocol protocol, EndpointProtocolOptions encountered);
    public LiteralEndpointProtocolOption authenticationRealmProtocolOption(EndpointProtocol protocol, EndpointProtocolOptions encountered);
    public LiteralEndpointProtocolOption defaultLogonDomainProtocolOption(EndpointProtocol protocol, EndpointProtocolOptions encountered);
    public CompressionEndpointProtocolOption compressionProtocolOption(EndpointProtocol protocol, EndpointProtocolOptions encountered);
    public void ipV4DotNumberTail(IPv4 vParent);
    public void ipV4DotLastTwoPartsTail(IPv4 vParent);
    public void ipV4NumericOrNumericIntegerTail(IPv4 vParent);
    public PayloadOption payloadOption(EndpointType type, PayloadOptionKinds encountered);
    public SoapMethod soapMethod(EndpointType type, PayloadOptionKinds encountered);
    public EnabledDisabledPayloadOption batchesPayloadOption(EndpointType type, PayloadOptionKinds encountered);
    public WsdlPayloadOption wsdlPayloadOption(EndpointType type, PayloadOptionKinds encountered);
    public EnabledDisabledPayloadOption sessionsPayloadOption(EndpointType type, PayloadOptionKinds encountered);
    public LoginTypePayloadOption loginTypePayloadOption(EndpointType type, PayloadOptionKinds encountered);
    public SessionTimeoutPayloadOption sessionTimeoutPayloadOption(EndpointType type, PayloadOptionKinds encountered);
    public LiteralPayloadOption databasePayloadOption(EndpointType type, PayloadOptionKinds encountered);
    public LiteralPayloadOption namespacePayloadOption(EndpointType type, PayloadOptionKinds encountered);
    public SchemaPayloadOption schemaPayloadOption(EndpointType type, PayloadOptionKinds encountered);
    public CharacterSetPayloadOption characterSetPayloadOption(EndpointType type, PayloadOptionKinds encountered);
    public LiteralPayloadOption headerLimitPayloadOption(EndpointType type, PayloadOptionKinds encountered);
    public AuthenticationPayloadOption authenticationPayloadOption(EndpointType type, PayloadOptionKinds encountered);
    public EncryptionPayloadOption encryptionPayloadOption(EndpointType type, PayloadOptionKinds encountered);
    public EnabledDisabledPayloadOption messageForwardingPayloadOption(EndpointType type, PayloadOptionKinds encountered);
    public LiteralPayloadOption messageForwardSizePayloadOption(EndpointType type, PayloadOptionKinds encountered);
    public RolePayloadOption rolePayloadOption(EndpointType type, PayloadOptionKinds encountered);
    public void enabledDisabled(EnabledDisabledPayloadOption vParent);
    public DefaultLiteral defaultLiteral();
    public void soapMethodAlias(SoapMethod vParent);
    public void soapMethodOption(SoapMethod vParent);
    public CreateEventNotificationStatement createEventNotificationStatement();
    public CreateEventSessionStatement createEventSessionStatement();
    public EventNotificationObjectScope eventNotificationObjectScope();
    public EventTypeGroupContainer eventTypeGroupContainer();
    public void eventDeclarationList(EventSessionStatement vParent);
    public void targetDeclarationList(EventSessionStatement vParent);
    public void optSessionOptionList(EventSessionStatement vParent);
    public AlterEventSessionStatement alterEventSessionStatement();
    public void dropEventDeclarationList(AlterEventSessionStatement vParent);
    public void dropTargetDeclarationList(AlterEventSessionStatement vParent);
    public void sessionOptionList(EventSessionStatement vParent);
    public EventDeclaration eventDeclaration();
    public TargetDeclaration targetDeclaration();
    public SessionOption sessionOption();
    public EventSessionObjectName eventSessionNonEmptyThreePartObjectName();
    public void eventDeclarationSetParameters(EventDeclaration vParent);
    public void eventDeclarationActionParameters(EventDeclaration vParent);
    public EventDeclarationSetParameter eventDeclarationSetParameter();
    public LiteralSessionOption maxMemorySessionOption();
    public LiteralSessionOption maxEventSizeSessionOption();
    public OnOffSessionOption trackCausalitySessionOption();
    public OnOffSessionOption startupStateSessionOption();
    public EventRetentionSessionOption eventRetentionSessionOption();
    public MemoryPartitionSessionOption memoryPartitionSessionOption();
    public MaxDispatchLatencySessionOption maxDispatchLatencySessionOption();
    public void integerSessionOptionValue(LiteralSessionOption vParent);
    public void onOffSessionOption(OnOffSessionOption vParent);
    public ScalarExpression eventDeclarationValue();
    public Literal integerOrRealOrNumeric();
    public ParenthesisExpression eventSessionExpressionParenthesis();
    public Literal eventSessionLiteral();
    public NumericLiteral numeric();
    public RealLiteral real();
    public BooleanExpression eventBooleanExpressionOr();
    public BooleanExpression eventBooleanExpressionAnd();
    public BooleanExpression eventBooleanExpressionUnary();
    public BooleanParenthesisExpression eventBooleanExpressionParenthesis();
    public BooleanExpression eventDeclarationPredicateParameter();
    public EventSessionObjectName eventSessionOneOrTwoOrThreePartObjectName();
    public void eventDeclarationCompareFunction(EventDeclarationCompareFunctionParameter vParent);
    public void eventDeclarationComparisonPredicate(BooleanComparisonExpression vParent, EventSessionObjectName vSource);
    public BooleanComparisonType comparisonOperator();
    public CreateFullTextCatalogStatement createFulltextCatalogStatement();
    public CreateFullTextIndexStatement createFulltextIndexStatement();
    public CreateFullTextStopListStatement createFulltextStoplistStatement();
    public OnOffFullTextCatalogOption accentSensitivity();
    public FullTextIndexColumn fulltextIndexColumn();
    public IdentifierOrValueExpression languageTerm();
    public FullTextCatalogAndFileGroup fullTextCatalogAndFileGroup();
    public void createFulltextOptions(CreateFullTextIndexStatement vParent);
    public void createFulltextOptionsList(CreateFullTextIndexStatement vParent);
    public FullTextIndexOption fullTextIndexOption();
    public ChangeTrackingFullTextIndexOption changeTrackingFulltextIndexOption();
    public StopListFullTextIndexOption stoplistFulltextIndexOption();
    public SearchPropertyListFullTextIndexOption searchPropertyListFullTextIndexOption();
    public void requiredSemicolon(TSqlFragment vParent, string vStatement);
    public AlterFullTextStopListStatement alterFulltextStoplistStatement();
    public FullTextStopListAction fulltextStoplistAction();
    public FullTextStopListAction addFulltextStoplistAction();
    public FullTextStopListAction dropFulltextStoplistAction();
    public BinaryLiteral binary();
    public DropFullTextStopListStatement dropFulltextStoplistStatement();
    public AlterSearchPropertyListStatement alterSearchPropertyListStatement();
    public SearchPropertyListAction searchPropertyListAction();
    public AddSearchPropertyListAction addSearchPropertyListAction();
    public DropSearchPropertyListAction dropSearchPropertyListAction();
    public DropSearchPropertyListStatement dropSearchPropertyListStatement();
    public IndexStatement createXmlIndexStatement(bool vPrimary);
    public XmlNamespaces xmlNamespaces();
    public SelectiveXmlIndexPromotedPath promotedSelectiveXmlIndexPath();
    public void indexOptionList(IndexAffectingStatement statement, IList`1<IndexOption> optionsList, TSqlFragment vParent);
    public CreateXmlSchemaCollectionStatement createXmlSchemaCollectionStatement();
    public SchemaObjectName schemaObjectNonEmptyTwoPartName();
    public CreateXmlIndexStatement secondaryXmlIndexStatementBody(Identifier vName, SchemaObjectName vSchemaObjectName, Identifier vXmlColumn, IToken tRParen, Identifier vSecondaryXmlIndexName);
    public CreateSelectiveXmlIndexStatement secondarySelectiveXmlIndex(Identifier vName, SchemaObjectName vSchemaObjectName, Identifier vXmlColumn, IToken tRParen, Identifier vSecondaryXmlIndexName);
    public IntegerLiteral maxlengthOption(TSqlFragment vParent);
    public bool singletonOption();
    public SelectiveXmlIndexPromotedPath promotedSelectiveXmlIndexPathInAlter();
    public PasswordCreateLoginSource passwordLoginSource();
    public WindowsCreateLoginSource windowsLoginSource();
    public CertificateCreateLoginSource certificateLoginSource();
    public AsymmetricKeyCreateLoginSource asymmetricKeyLoginSource();
    public Literal loginPassword();
    public void createLoginPasswordOption(PasswordCreateLoginSource vParent);
    public PrincipalOption createLoginParam();
    public OnOffPrincipalOption onOffPrincipalOption(IToken tOption);
    public IdentifierPrincipalOption createLoginParamWin();
    public Identifier createLoginParamCertOpt();
    public void messageTypeValidation(MessageTypeStatementBase vParent);
    public LiteralAvailabilityGroupOption availabilityGroupOption();
    public AvailabilityReplica availabilityReplica();
    public AlterAvailabilityGroupStatement alterAvailabilityGroupStatement();
    public void alterAvailabilityGroupAddDatabase(AlterAvailabilityGroupStatement vResult);
    public void alterAvailabilityGroupRemoveDatabase(AlterAvailabilityGroupStatement vResult);
    public void alterAvailabilityGroupAddReplica(AlterAvailabilityGroupStatement vResult);
    public void alterAvailabilityGroupModifyReplica(AlterAvailabilityGroupStatement vResult);
    public void alterAvailabilityGroupRemoveReplica(AlterAvailabilityGroupStatement vResult);
    public void alterAvailabilityGroupSetOption(AlterAvailabilityGroupStatement vResult);
    public void alterAvailabilityGroupTakeAction(AlterAvailabilityGroupStatement vResult);
    public AvailabilityReplica availabilityReplicaName();
    public AlterAvailabilityGroupFailoverAction alterAvailabilityGroupFailoverAction();
    public AlterAvailabilityGroupAction alterAvailabilityGroupAction();
    public AlterAvailabilityGroupFailoverOption alterAvailabilityGroupFailoverOption();
    public AvailabilityReplicaOption availabilityReplicaOption();
    public AvailabilityModeReplicaOption availabilityModeReplicaOption();
    public FailoverModeReplicaOption failoverModeReplicaOption();
    public SecondaryRoleReplicaOption secondaryRoleReplicaOption();
    public PrimaryRoleReplicaOption primaryRoleReplicaOption();
    public LiteralReplicaOption literalReplicaOption();
    public CreatePartitionFunctionStatement createPartitionFunction();
    public CreatePartitionSchemeStatement createPartitionScheme();
    public PartitionParameterType partitionParameterType();
    public void partitionFunctionTypes(CreatePartitionFunctionStatement vParent);
    public void partitionFunctionRange(CreatePartitionFunctionStatement vParent);
    public void queueOptionList(QueueStatement vParent, bool vDropAccepted);
    public UserRemoteServiceBindingOption bindingUserOption();
    public OnOffRemoteServiceBindingOption bindingAnonymousOption();
    public void routeOptionList(RouteStatement vParent);
    public void onQueueClause(AlterCreateServiceStatementBase vParent);
    public ServiceContract serviceContract();
    public AlterServiceStatement alterServiceStatement();
    public void addDropServiceContractList(AlterServiceStatement vParent);
    public ServiceContract addDropServiceContract();
    public void keySpecList(CreateSymmetricKeyStatement vParent);
    public void encryptorListWithNoPassword(SymmetricKeyStatement vParent);
    public void providerKeySourceOptionsOpt(IList`1<KeyOption> optionsList, TSqlFragment vParent);
    public KeyOption keySpec(Boolean& keySourceSpecified, Boolean& algorithmSpecified, Boolean& identityValueSpecified);
    public KeySourceKeyOption keySourceKeySpec(Boolean& keySourceSpecified);
    public AlgorithmKeyOption algorithmKeySpec(Boolean& algorithmSpecified);
    public IdentityValueKeyOption identityValueKeySpec(Boolean& identityValueSpecified);
    public ProviderKeyNameKeyOption providerKeyNameSourceOption(Boolean& providerKeyNameSpecified);
    public CreationDispositionKeyOption creationDispositionSourceOption(Boolean& creationDispositionSpecified);
    public CryptoMechanism cryptoWithNoPasswordOrJustPassword();
    public CryptoMechanism certificateCrypto();
    public CryptoMechanism keyCrypto();
    public CryptoMechanism passwordCrypto();
    public KeyOption providerKeySourceOption(Boolean& algorithmSpecified, Boolean& providerKeyNameSpecified, Boolean& creationDispositionSpecified);
    public AlterSymmetricKeyStatement alterSymmetricKeyStatement();
    public CreateTypeUddtStatement createTypeUddtStatement();
    public CreateTypeUdtStatement createTypeUdtStatement();
    public CreateTypeTableStatement createTypeTableStatement();
    public TableDefinition tableDefinition(IndexAffectingStatement statementType, AlterTableAddTableElementStatement vStatement);
    public void withTypeTableOptions(CreateTypeTableStatement vParent);
    public MemoryOptimizedTableOption memoryOptimizedTableOption();
    public UserLoginOption userLoginOption();
    public PrincipalOption createUserOption(bool vHasUserLoginOption);
    public IdentifierPrincipalOption identifierCreateUserOption(IToken tOption, bool vHasUserLoginOption);
    public LiteralPrincipalOption literalCreateUserOption(IToken tOption, bool vHasUserLoginOption);
    public NullLiteral nullLiteral();
    public AlterApplicationRoleStatement alterApplicationRoleStatement();
    public AlterAssemblyStatement alterAssemblyStatement();
    public AlterAsymmetricKeyStatement alterAsymmetricKeyStatement();
    public AlterAuthorizationStatement alterAuthorizationStatement();
    public AlterBrokerPriorityStatement alterBrokerPriorityStatement();
    public AlterCryptographicProviderStatement alterCryptographicProviderStatement();
    public AlterRemoteServiceBindingStatement alterRemoteServiceBindingStatement();
    public TSqlStatement alterResourceStatement();
    public AlterWorkloadGroupStatement alterWorkloadGroupStatement();
    public AlterCertificateStatement alterCertificateStatement();
    public AlterCredentialStatement alterCredentialStatement();
    public AlterEndpointStatement alterEndpointStatement();
    public TSqlStatement alterFulltextStatement();
    public AlterIndexStatement alterIndexStatement();
    public AlterLoginStatement alterLoginStatement();
    public AlterMasterKeyStatement alterMasterKeyStatement();
    public AlterMessageTypeStatement alterMessageTypeStatement();
    public TSqlStatement alterPartitionStatement();
    public AlterQueueStatement alterQueueStatement();
    public AlterRoleStatement alterRoleStatement();
    public AlterRouteStatement alterRouteStatement();
    public AlterSchemaStatement alterSchemaStatement();
    public AlterSequenceStatement alterSequenceStatement();
    public TSqlStatement alterServiceStatements();
    public AlterUserStatement alterUserStatement();
    public AlterXmlSchemaCollectionStatement alterXmlSchemaCollectionStatement();
    public ApplicationRoleOption applicationRoleOption(bool defaultSchemaAndPasswordOnly);
    public ScalarExpression alterAssemblyFromClause();
    public void alterAssemblyWith(AlterAssemblyStatement vParent);
    public void alterAssemblyDropFile(AlterAssemblyStatement vParent);
    public void alterAssemblyAddFile(AlterAssemblyStatement vParent);
    public AssemblyOption alterAssemblyWithItem();
    public AssemblyOption assemblyPermissionSetOrVisibilityOption();
    public AssemblyOption assemblyUncheckedDataOption();
    public OnOffAssemblyOption assemblyVisibilityOption(IToken tPermissionSetVisibility);
    public AddFileSpec alterAssemblyAddFileSpec();
    public AlterFullTextCatalogStatement alterFulltextCatalogStatement();
    public AlterFullTextIndexStatement alterFulltextIndexStatement();
    public AlterFullTextIndexAction alterFulltextIndexAction();
    public SimpleAlterFullTextIndexAction enableDisableAlterFulltextIndexAction();
    public AddAlterFullTextIndexAction addAlterFulltextIndexAction();
    public DropAlterFullTextIndexAction dropAlterFulltextIndexAction();
    public SimpleAlterFullTextIndexAction startPopulationAlterFulltextIndexAction();
    public SimpleAlterFullTextIndexAction otherPopulationAlterFulltextIndexAction();
    public AlterFullTextIndexAction setAlterFullTextIndexAction();
    public AlterColumnAlterFullTextIndexAction alterColumnAlterFullTextIndexAction();
    public SetStopListAlterFullTextIndexAction setStoplistAlterFulltextIndexAction();
    public SimpleAlterFullTextIndexAction setChangeTrackingAlterFulltextIndexAction();
    public SetSearchPropertyListAlterFullTextIndexAction setSearchPropertyListAlterFullTextIndexAction();
    public bool populationOption(TSqlFragment vParent);
    public FullTextIndexColumn alterFullTextIndexColumn();
    public PartitionSpecifier partitionSpecifier();
    public AlterLoginEnableDisableStatement alterLoginEnableDisable(Identifier vName);
    public AlterLoginOptionsStatement alterLoginOptions(Identifier vName);
    public AlterLoginAddDropCredentialStatement alterLoginAddDropCredential(Identifier vName);
    public PrincipalOption alterLoginParam();
    public PasswordAlterPrincipalOption passwordAlterLoginOption();
    public AlterPartitionFunctionStatement alterPartitionFunctionStatement();
    public AlterPartitionSchemeStatement alterPartitionSchemeStatement();
    public ExecuteAsClause executeAsClause(bool vCallerProhibited, bool vOwnerProhibited);
    public void queueOption(QueueStatement vParent, bool vDropAccepted);
    public QueueStateOption stateQueueOption();
    public void queueActivationOption(QueueStatement vParent, bool vDropAccepted);
    public QueueStateOption queuePoisonMessageHandlingOption();
    public QueueOption activationQueueOptionArgument(bool vDropAccepted, Boolean& procedureName, Boolean& maxQueueReaders, Boolean& executeAs);
    public QueueStateOption statusQueueOptionArgument(IToken vStartToken);
    public QueueProcedureOption procedureNameQueueOptionArgument(IToken vStartToken);
    public QueueValueOption maxQueueReadersQueueOptionArgument(IToken vStartToken);
    public QueueOption dropQueueOptionArgument(bool vDropAccepted);
    public QueueExecuteAsOption executeAsQueueOptionArgument();
    public AlterRoleAction alterRoleAction();
    public AddMemberAlterRoleAction addMemberAlterRoleAction();
    public DropMemberAlterRoleAction dropMemberAlterRoleAction();
    public RenameAlterRoleAction renameAlterRoleAction();
    public RouteOption routeOption();
    public SchemaObjectName schemaObjectTwoPartName();
    public void alterSequenceOptionList(AlterSequenceStatement vParent);
    public SequenceOption alterSequenceOptionListElement();
    public AlterServiceMasterKeyStatement alterServiceMasterKeyStatement();
    public PrincipalOption alterUserOption();
    public PasswordAlterPrincipalOption passwordAlterUserOption(IToken tOption);
    public IdentifierPrincipalOption identifierAlterUserOption(IToken tOption);
    public LiteralPrincipalOption literalAlterUserOption(IToken tOption);
    public void authorization(IAuthorization vParent);
    public StatementList createSchemaElementList();
    public TSqlStatement createSchemaElement();
    public void functionStatementBody(FunctionStatementBody vResult, Boolean& vParseErrorOccurred);
    public void functionParameterList(FunctionStatementBody vResult);
    public void functionReturnTypeAndBody(FunctionStatementBody vParent, Boolean& vParseErrorOccurred);
    public ProcedureParameter functionParameter();
    public void scalarProcedureParameter(ProcedureParameter vParent, bool outputAllowed, bool nullableAllowed);
    public void functionAttributes(FunctionStatementBody vParent);
    public BeginEndBlockStatement beginEndBlockStatement();
    public MethodSpecifier methodSpecifier();
    public void functionAttributesNoExecuteAs(FunctionStatementBody vParent);
    public DeclareTableVariableBody declareTableBody(IndexAffectingStatement statementType);
    public DeclareTableVariableBody declareTableBodyMain(IndexAffectingStatement statementType);
    public void clrTableValuedFunctionOrderHint(FunctionStatementBody vParent);
    public SelectStatement subqueryExpressionWithOptionalCTE();
    public QueryExpression subqueryExpression(SubDmlFlags subDmlFlags);
    public FunctionOption functionAttribute();
    public FunctionOption functionAttributeNoExecuteAs();
    public ExecuteAsFunctionOption functionExecuteAsOption();
    public void identifierColumnList(TSqlFragment vParent, IList`1<ColumnReferenceExpression> columns);
    public BooleanExpression filterClause(bool filterProhibited);
    public StatisticsOption createStatisticsStatementWithOption(Boolean& isConflictingOption);
    public LiteralStatisticsOption sampleStatisticsOption(Boolean& isConflictingOption);
    public LiteralStatisticsOption statsStreamStatisticsOption();
    public StatisticsOption simpleStatisticsOption(Boolean& isConflictingOption);
    public StatisticsPartitionRange statisticsPartitionRange();
    public ResampleStatisticsOption resampleStatisticsOption();
    public OnOffStatisticsOption incrementalStatisticsOption();
    public void columnNameList(TSqlFragment vParent, IList`1<Identifier> columnNames);
    public StatisticsOption updateStatisticsStatementWithOption(Boolean& isConflictingOption);
    public LiteralStatisticsOption updateStatisticsLiteralOption();
    public StatisticsOption updateStatisticsSimpleOption(Boolean& isConflictingOption);
    public KillStatement killStatement();
    public KillQueryNotificationSubscriptionStatement killQueryNotificationSubscriptionStatement();
    public KillStatsJobStatement killStatsJobStatement();
    public CompressionPartitionRange compressionPartitionRange();
    public Permission permission();
    public Identifier securityStatementPermission();
    public void securityTargetObjectCommon(SecurityTargetObject vParent);
    public SecurityTargetObject authorizationTargetObject();
    public void permissionsList(SecurityStatement vParent, Boolean& vContainsColumnList);
    public void securityStatementTargetObjectOpt(SecurityStatement vParent, bool vColumnsDisallowed);
    public void securityStatementPrincipalList(SecurityStatement vParent);
    public void securityStatementAsClauseOpt(SecurityStatement vParent);
    public WaitForSupportedStatement waitforInnerStatement();
    public ColumnReferenceExpression column();
    public ValueExpression binaryOrVariable();
    public ValueExpression integerOrVariable();
    public void modificationTextStatement(TextModificationStatement vParent);
    public ScalarExpression signedIntegerOrVariableOrNull();
    public void modificationTextStatementWithLog(TextModificationStatement vParent);
    public ValueExpression writeString();
    public VariableReference variable();
    public OpenMasterKeyStatement openMasterKeyStatement();
    public OpenSymmetricKeyStatement openSymmetricKeyStatement();
    public OpenCursorStatement openCursorStatement();
    public CryptoMechanism decryptionMechanism();
    public void decryptionMechanismPassword(CryptoMechanism vParent);
    public CursorId cursorId();
    public CloseMasterKeyStatement closeMasterKeyStatement();
    public CloseSymmetricKeyStatement closeSymmetricKeyStatement();
    public CloseCursorStatement closeCursorStatement();
    public FetchCursorStatement rowSelector();
    public FetchType fetchType();
    public TSqlStatement dropDatabaseStatements();
    public DropIndexStatement dropIndexStatement();
    public DropStatisticsStatement dropStatisticsStatement();
    public DropTableStatement dropTableStatement();
    public DropProcedureStatement dropProcedureStatement();
    public DropFunctionStatement dropFunctionStatement();
    public DropViewStatement dropViewStatement();
    public DropDefaultStatement dropDefaultStatement();
    public DropRuleStatement dropRuleStatement();
    public DropTriggerStatement dropTriggerStatement();
    public DropSchemaStatement dropSchemaStatement();
    public DropAggregateStatement dropAggregateStatement();
    public DropAssemblyStatement dropAssemblyStatement();
    public DropAvailabilityGroupStatement dropAvailabilityGroupStatement();
    public TSqlStatement dropPartitionStatements();
    public DropSynonymStatement dropSynonymStatement();
    public DropApplicationRoleStatement dropApplicationRoleStatement();
    public DropBrokerPriorityStatement dropBrokerPriorityStatement();
    public DropCryptographicProviderStatement dropCryptographicProviderStatement();
    public TSqlStatement dropFulltextStatements();
    public DropLoginStatement dropLoginStatement();
    public DropResourcePoolStatement dropResourcePoolStatement();
    public DropWorkloadGroupStatement dropWorkloadGroupStatement();
    public DropRoleStatement dropRoleStatement();
    public DropMasterKeyStatement dropMasterKeyStatement();
    public DropSymmetricKeyStatement dropSymmetricKeyStatement();
    public DropAsymmetricKeyStatement dropAsymmetricKeyStatement();
    public DropCertificateStatement dropCertificateStatement();
    public DropCredentialStatement dropCredentialStatement();
    public DropTypeStatement dropTypeStatement();
    public DropXmlSchemaCollectionStatement dropXmlSchemaCollectionStatement();
    public DropContractStatement dropContractStatement();
    public DropQueueStatement dropQueueStatement();
    public DropServiceStatement dropServiceStatement();
    public DropRouteStatement dropRouteStatement();
    public DropMessageTypeStatement dropMessageTypeStatement();
    public DropRemoteServiceBindingStatement dropRemoteServiceBindingStatement();
    public DropEndpointStatement dropEndpointStatement();
    public DropSignatureStatement dropSignatureStatement();
    public TSqlStatement dropEventStatement();
    public DropSequenceStatement dropSequenceStatement();
    public DropFederationStatement dropFederationStatement();
    public TSqlStatement dropServerStatements();
    public DropUserStatement dropUserStatement();
    public DropServerAuditSpecificationStatement dropServerAuditSpecificationStatement();
    public DropServerAuditStatement dropServerAuditStatement();
    public DropServerRoleStatement dropServerRoleStatement();
    public DropDatabaseAuditSpecificationStatement dropDatabaseAuditSpecificationStatement();
    public DropDatabaseEncryptionKeyStatement dropDatabaseEncryptionKeyStatement();
    public DropDatabaseStatement dropDatabaseStatement();
    public DropIndexClauseBase dropIndexClause();
    public BackwardsCompatibleDropIndexClause indexDropObject();
    public DropIndexClause indexDropObjectNewNameFormat();
    public void dropClusteredIndexOptions(DropIndexClause vParent);
    public void dropClusteredIndexOption(DropIndexClause vParent, Int32& encounteredOptions);
    public IndexExpressionOption maxDopOption();
    public OnlineIndexOption onlineIndexOption();
    public MoveToDropIndexOption dropIndexMoveToOption();
    public FileStreamOnDropIndexOption dropIndexFileStreamOnOption();
    public DataCompressionOption dataCompressionOption();
    public FileGroupOrPartitionScheme filegroupOrPartitionScheme();
    public void fileStreamOn(IFileStreamSpecifier vParent);
    public ChildObjectName statisticsDropObject();
    public List`1<Identifier> identifierList(int vMaxNumber);
    public void dropObjectList(DropObjectsStatement vParent, bool onlyTwoPartNames);
    public TriggerScope triggerScope(TSqlFragment vParent);
    public SchemaObjectName dropObject(bool onlyTwoPartNames);
    public DropPartitionFunctionStatement dropPartitionFunctionStatement();
    public DropPartitionSchemeStatement dropPartitionSchemeStatement();
    public DropFullTextCatalogStatement dropFulltextCatalogStatement();
    public DropFullTextIndexStatement dropFulltextIndexStatement();
    public bool removeProviderKeyOpt(TSqlFragment vParent);
    public DropEventNotificationStatement dropEventNotificationStatement();
    public DropEventSessionStatement dropEventSessionStatement();
    public void signatureType(SignatureStatementBase vParent);
    public void signableElement(SignatureStatementBase vParent);
    public void cryptoListWithOptionalPasswordSignature(SignatureStatementBase vParent);
    public CryptoMechanism cryptoWithOptionalPasswordSignature();
    public Literal withSignatureOrPasswordOpt();
    public Identifier nonQuotedIdentifier();
    public BeginTransactionStatement beginTransactionStatement();
    public TryCatchStatement tryCatchStatement();
    public BeginConversationTimerStatement beginConversationTimerStatement();
    public BeginDialogStatement beginDialogStatement();
    public void transactionName(TransactionStatement vParent);
    public Identifier weirdTransactionName();
    public void tranIdentifier(StringBuilder vStringBuilder, TSqlFragment vParent);
    public StatementList tryStatementList(Boolean& vParseErrorOccurred);
    public StatementList catchStatementList(Boolean& vParseErrorOccurred);
    public BeginEndAtomicBlockStatement beginEndAtomicBlock();
    public void atomicBlockOptions(BeginEndAtomicBlockStatement vParent);
    public AtomicBlockOption atomicBlockOption();
    public LiteralAtomicBlockOption dateFirstOption();
    public LiteralAtomicBlockOption dateFormatOption();
    public OnOffAtomicBlockOption delayedDurabilityOption();
    public LiteralAtomicBlockOption languageOption();
    public IdentifierAtomicBlockOption isolationLevelIdentifierAtomicBlockOption();
    public IsolationLevel isolationLevel(TSqlFragment vParent);
    public DeclareVariableElement declareVariableElement();
    public SqlDataTypeReference cursorDataType();
    public DeclareVariableStatement declareVariableStatement();
    public DeclareCursorStatement declareCursorStatement();
    public PredicateSetStatement predicateSetStatement();
    public SetVariableStatement setVariableStatement();
    public SetStatisticsStatement setStatisticsStatement();
    public SetRowCountStatement setRowcountStatement();
    public SetOffsetsStatement setOffsetsStatement();
    public SetCommandStatement setCommandStatement();
    public SetTransactionIsolationLevelStatement setTransactionIsolationLevelStatement();
    public SetTextSizeStatement setTextSizeStatement();
    public SetIdentityInsertStatement setIdentityInsertStatement();
    public SetErrorLevelStatement setErrorLevelStatement();
    public void parenthesizedOptExpressionWithDefaultList(TSqlFragment vParent, IList`1<ScalarExpression> expressions);
    public AssignmentKind assignmentWithOptOp();
    public CursorDefinition cursorDefinition();
    public void setOnOff(SetOnOffStatement vParent);
    public SetOffsets offsetItem();
    public SetCommand setCommand();
    public SetFipsFlaggerCommand fipsFlaggerLevel();
    public void tableElement(IndexAffectingStatement statementType, TableDefinition vParent, AlterTableAddTableElementStatement vStatement);
    public void cursorOpts(bool oldSyntax, IList`1<CursorOption> vOptions);
    public CursorDefinition cursorDefinitionOptions(IList`1<CursorOption> vOptions);
    public SelectStatement selectStatement(SubDmlFlags subDmlFlags);
    public CursorOption cursorOption();
    public CreateIndexStatement createRelationalIndexStatement(IToken tUnique, Nullable`1<bool> isClustered);
    public void indexLegacyOptionList(CreateIndexStatement vParent);
    public void fileStreamOnOpt(IFileStreamSpecifier vParent);
    public BooleanExpression filterExpression();
    public BooleanExpression filterExpressionPrimary();
    public ColumnReferenceExpression filterColumn();
    public BooleanIsNullExpression filterNullPredicate(ScalarExpression vColumn);
    public BooleanComparisonExpression filterComparisonPredicate(ScalarExpression vColumn);
    public InPredicate filterInPredicate(ScalarExpression vColumn);
    public BooleanParenthesisExpression filterParenthesisExpression();
    public void specialColumn(ColumnReferenceExpression vParent);
    public BooleanIsNullExpression nullPredicate(ScalarExpression vExpressionFirst);
    public IndexOption indexLegacyOption();
    public IndexExpressionOption fillFactorOption();
    public IndexOption indexOption();
    public void lowPriorityLockWaitOption(IList`1<LowPriorityLockWaitOption> optionsList, TSqlFragment vParent);
    public IndexStateOption indexStateOption();
    public IndexExpressionOption bucketCountOption();
    public void ctContext(WithCtesAndXmlNamespaces vParent);
    public CommonTableExpression commonTableExpression();
    public XmlNamespacesElement xmlNamespacesElement();
    public XmlNamespacesDefaultElement xmlNamespacesDefaultElement();
    public XmlNamespacesAliasElement xmlNamespacesAliasElement();
    public QueryExpression queryExpression(SubDmlFlags subDmlFlags, SelectStatement vSelectStatement);
    public OrderByClause orderByClause();
    public OffsetClause offsetClause();
    public ForClause forClause();
    public void optimizerHints(TSqlFragment vParent, IList`1<OptimizerHint> hintsCollection);
    public TableReferenceWithAliasAndColumns derivedTable(SubDmlFlags subDmlFlags);
    public QueryDerivedTable queryDerivedTable(SubDmlFlags subDmlFlags);
    public InlineDerivedTable inlinedDerivedTable();
    public void simpleTableReferenceAlias(TableReferenceWithAlias vParent);
    public RowValue rowValueExpression();
    public ScalarSubquery subquery(SubDmlFlags subDmlFlags, ExpressionFlags expressionFlags);
    public QueryExpression subqueryExpressionUnit(SubDmlFlags subDmlFlags);
    public QuerySpecification subquerySpecification(SubDmlFlags subDmlFlags);
    public QueryParenthesisExpression subqueryParenthesis(SubDmlFlags subDmlFlags);
    public QueryExpression queryExpressionUnit(SubDmlFlags subDmlFlags, SelectStatement vSelectStatement);
    public QuerySpecification querySpecification(SubDmlFlags subDmlFlags, SelectStatement vSelectStatement);
    public QueryParenthesisExpression queryParenthesis(SubDmlFlags subDmlFlags, SelectStatement vSelectStatement);
    public void uniqueRowFilterOpt(QuerySpecification vParent);
    public TopRowFilter topRowFilter();
    public SelectElement selectColumnOrStarExpression();
    public FromClause fromClauseOpt(SubDmlFlags subDmlFlags);
    public WhereClause whereClause();
    public GroupByClause groupByClause();
    public HavingClause havingClause();
    public BrowseForClause browseForClause();
    public XmlForClause xmlForClause();
    public void selectExpression(QuerySpecification vParent);
    public UniqueRowFilter uniqueRowFilter(IToken& token);
    public PrimaryExpression parenthesisDisambiguatorForExpressions(ExpressionFlags expressionFlags);
    public TopRowFilter dmlTopRowFilter();
    public void dmlTopRowFilterOpt(DataModificationSpecification vParent);
    public SelectSetVariable selectSetVariable();
    public SelectStarExpression selectStarExpression();
    public SelectScalarExpression selectColumn();
    public SelectElement outputClauseSelectElement();
    public SelectScalarExpression outputClauseSelectColumn();
    public ScalarExpression selectColumnExpression();
    public IdentityFunctionCall identityFunction();
    public ScalarExpression seedIncrement();
    public TableSampleClause tableSampleClause();
    public FromClause fromClause(SubDmlFlags subDmlFlags);
    public TableReference selectTableReferenceWithOdbc(SubDmlFlags subDmlFlags);
    public TableReference selectTableReference(SubDmlFlags subDmlFlags);
    public OdbcQualifiedJoinTableReference odbcQualifiedJoin(SubDmlFlags subDmlFlags);
    public TableReference selectTableReferenceElement(SubDmlFlags subDmlFlags);
    public void selectTableReferenceAdditionalElement(SubDmlFlags subDmlFlags, TableReference& vResult);
    public void odbcInitiator();
    public OdbcConvertSpecification odbcConvertSpecification();
    public ExtractFromExpression extractFromExpression();
    public OdbcFunctionCall odbcFunctionCall();
    public TableReference joinTableReference(SubDmlFlags subDmlFlags);
    public JoinParenthesisTableReference joinParenthesis(SubDmlFlags subDmlFlags);
    public void joinElement(SubDmlFlags subDmlFlags, TableReference& vResult);
    public TableReference selectTableReferenceElementWithoutJoinParenthesis(SubDmlFlags subDmlFlags);
    public void pivotedTableReference(TableReference& vResult);
    public void unpivotedTableReference(TableReference& vResult);
    public ColumnReferenceExpression fixedColumn();
    public void columnListWithParenthesis(TSqlFragment vParent, IList`1<ColumnReferenceExpression> columns);
    public ColumnReferenceExpression identifierColumnReferenceExpression();
    public void unqualifiedJoin(SubDmlFlags subDmlFlags, TableReference& vResult);
    public void qualifiedJoin(SubDmlFlags subDmlFlags, TableReference& vResult);
    public TableReferenceWithAliasAndColumns changeTableTableReference();
    public BuiltInFunctionTableReference builtInFunctionTableReference();
    public VariableTableReference variableTableReference();
    public VariableMethodCallTableReference variableMethodCallTableReference();
    public TableReferenceWithAlias openRowset();
    public FullTextTableReference fulltextTableReference();
    public SemanticTableReference semanticTableReference();
    public OpenXmlTableReference openXmlTableReference();
    public DataModificationTableReference subDmlTableReference(SubDmlFlags subDmlFlags);
    public TableReference schemaObjectOrFunctionTableReference();
    public ChangeTableChangesTableReference changesChangeTableParams(SchemaObjectName vTarget);
    public ChangeTableVersionTableReference versionChangeTableParams(SchemaObjectName vTarget);
    public DataModificationSpecification innerDmlStatement();
    public InsertSpecification insertSpecification(SubDmlFlags subDmlFlags);
    public UpdateSpecification updateSpecification(SubDmlFlags subDmlFlags);
    public DeleteSpecification deleteSpecification(SubDmlFlags subDmlFlags);
    public MergeSpecification mergeSpecification(SubDmlFlags subDmlFlags);
    public void joinHint(QualifiedJoin vParent);
    public ScalarExpression expressionWithDefault();
    public void simpleTableReferenceAliasOpt(TableReferenceWithAlias vParent);
    public ScalarExpression signedIntegerOrStringOrVariable();
    public ScalarExpression possibleNegativeConstant();
    public void outputIntoOutputClause(DataModificationSpecification vParent);
    public OutputIntoClause outputIntoClause(IToken tOutput, IList`1<SelectElement> vSelectElements);
    public OutputClause outputClause();
    public VariableTableReference variableDmlTarget();
    public NamedTableReference intoSchemaObjectTable();
    public void outputClauseOpt(SubDmlFlags subDmlFlags, DataModificationSpecification vParent);
    public TableReference dmlTarget(bool indexHintAllowed);
    public WhereClause dmlWhereClause(SubDmlFlags subDmlFlags);
    public ColumnReferenceExpression insertColumn();
    public ValuesInsertSource valuesInsertSource();
    public ExecuteInsertSource executeInsertSource();
    public SelectInsertSource selectInsertSource(SubDmlFlags subDmlFlags);
    public void setClausesList(TSqlFragment vParent, IList`1<SetClause> setClauses);
    public SetClause setClause();
    public AssignmentSetClause setClauseStartingWithVariable();
    public AssignmentSetClause setClauseColumnAssignment(MultiPartIdentifier vMultiPartIdentifier);
    public FunctionCallSetClause setClauseFunctionCall(MultiPartIdentifier vMultiPartIdentifier);
    public AssignmentSetClause setClauseSubItemSystemColumn();
    public AssignmentKind assignmentWithOp();
    public void systemColumn(ColumnReferenceExpression vParent);
    public ExecuteSpecification executeSpecification();
    public void defaultValuesInsertSource(ValuesInsertSource vParent);
    public RowValue rowValueExpressionWithDefault();
    public void expressionWithDefaultList(TSqlFragment vParent, IList`1<ScalarExpression> expressions);
    public TableReferenceWithAlias schemaObjectDmlTarget(bool indexHintAllowed);
    public void mergeInsertDmlColumnListOpt(InsertMergeAction vParent);
    public ColumnReferenceExpression mergeInsertDmlColumn();
    public ScalarExpression possibleNegativeConstantWithDefault();
    public SchemaObjectFunctionTableReference schemaObjectFunctionDmlTarget();
    public NamedTableReference schemaObjectTableDmlTarget(bool indexHintAllowed);
    public void tableHints(TSqlFragment vParent, IList`1<TableHint> hints, bool tableHintAllowed);
    public NamedTableReference schemaObjectTableReference(SchemaObjectName vSchemaObjectName);
    public SchemaObjectFunctionTableReference schemaObjectFunctionTableReference(SchemaObjectName vSchemaObjectName);
    public void singleOldStyleTableHint(TSqlFragment vParent, IList`1<TableHint> hints);
    public void nonParameterTableHints(TSqlFragment vParent, IList`1<TableHint> hints);
    public IndexTableHint oldForceIndex();
    public void fullTextTable(FullTextTableReference vParent);
    public void fulltextTableColumnList(FullTextTableReference vParent);
    public void fulltextTableOptions(FullTextTableReference vParent);
    public void fulltextSemanticTableColumnList(TSqlFragment vParent, IList`1<ColumnReferenceExpression> vColumns);
    public ColumnReferenceExpression starColumnReferenceExpression();
    public ValueExpression languageExpression();
    public ValueExpression binaryOrIntegerOrStringOrVariable();
    public void semanticKeyPhraseTableReference(SemanticTableReference vParent);
    public void semanticSimilarityTableReference(SemanticTableReference vParent);
    public void semanticSimilarityDetailsTableReference(SemanticTableReference vParent);
    public OpenXmlTableReference openXmlParams();
    public void openXmlWithClauseOpt(OpenXmlTableReference vParent);
    public void openXmlSchemaItemList(OpenXmlTableReference vParent);
    public SchemaDeclarationItem openXmlSchemaItem();
    public ColumnDefinitionBase columnDefinitionBasic();
    public TableReferenceWithAlias openRowsetRowset();
    public OpenQueryTableReference openQueryRowset();
    public AdHocTableReference adhocRowset();
    public OpenRowsetTableReference openRowsetParams();
    public InternalOpenRowset internalOpenRowsetArgs();
    public BulkOpenRowset openRowsetBulk();
    public BulkInsertOption openRowsetBulkHint();
    public BulkInsertOption openRowsetBulkHintNoValue();
    public AdHocDataSource adhocDataSource();
    public SchemaObjectNameOrValueExpression objectOrString();
    public void simpleTableHints(TSqlFragment vParent, IList`1<TableHint> hints);
    public void tableHintsBody(TSqlFragment vParent, IList`1<TableHint> hints, bool tableHintAllowed);
    public TableHint tableHint(bool indexHintAllowed);
    public ForceSeekTableHint forceSeekTableHint(bool indexHintAllowed);
    public TableHint simpleTableHint();
    public IndexTableHint indexTableHint(bool indexHintAllowed);
    public LiteralTableHint literalTableHint();
    public IdentifierOrValueExpression identifierOrInteger();
    public WhereClause whereCurrentOfCursorClause(SubDmlFlags subDmlFlags);
    public GroupingSpecification groupByItem(bool isAll, Boolean& encounteredCubeRollupGroupingSets);
    public CubeGroupingSpecification cubeSpec(bool isAll);
    public RollupGroupingSpecification rollupSpec(bool isAll);
    public GroupingSetsGroupingSpecification groupingSetsSpec(bool isAll);
    public GrandTotalGroupingSpecification grandTotal();
    public ExpressionGroupingSpecification simpleGroupByItem();
    public GroupingSpecification groupingSet();
    public CompositeGroupingSpecification composingGroupingSet();
    public GroupingSpecification groupingSetItem();
    public void cubeOrRollupArgumentList(TSqlFragment vParent, IList`1<GroupingSpecification> specs);
    public GroupingSpecification cubeOrRollupArgument();
    public CompositeGroupingSpecification compositeGroupByItem();
    public ExpressionWithSortOrder expressionWithSortOrder();
    public SortOrder orderByOption(TSqlFragment vParent);
    public UpdateForClause updateForClause();
    public XmlForClauseOption xmlForClauseMode();
    public XmlForClauseOption xmlParam(XmlForClauseOptions encountered);
    public OptimizerHint hint();
    public LiteralOptimizerHint literalOptimizerHint();
    public OptimizerHint simpleOptimizerHint();
    public LiteralOptimizerHint usePlanOptimizerHint();
    public OptimizeForOptimizerHint optimizeForOptimizerHint();
    public TableHintsOptimizerHint tableHintsOptimizerHint();
    public VariableValuePair variableValuePair();
    public Literal cryptographicProviderFile();
    public AlterResourcePoolStatement alterResourcePoolStatement();
    public AlterResourceGovernorStatement alterResourceGovernorStatement();
    public void resourcePoolStatementBody(ResourcePoolStatement vParent);
    public ResourcePoolParameter resourcePoolParameter();
    public ResourcePoolAffinitySpecification resourcePoolAffinitySpecification();
    public LiteralRange poolAffinityRange();
    public void workloadGroupStatementBody(WorkloadGroupStatement vParent);
    public WorkloadGroupParameter workloadGroupParameter();
    public void brokerPriorityStatementBody(BrokerPriorityStatement vParent);
    public BrokerPriorityParameter brokerPriorityParameter(int encountered);
    public void createSequenceOptionList(CreateSequenceStatement vParent);
    public SequenceOption createSequenceOptionListElement();
    public ScalarExpressionSequenceOption sequenceRestartOptionListElement();
    public SequenceOption commonSequenceOptionListElement();
    public DataTypeSequenceOption sequenceDatatypeOptionListElement();
    public ScalarExpressionSequenceOption sequenceStartOptionListElement();
    public ScalarExpressionSequenceOption sequenceCacheOptionListElement();
    public SequenceOption sequenceCycleOptionListElement();
    public ScalarExpressionSequenceOption sequenceIncrementOptionListElement();
    public SequenceOption sequenceNoOptionListElement();
    public ScalarExpressionSequenceOption sequenceMinMaxOptionListElement();
    public void spatialIndexingScheme(CreateSpatialIndexStatement vParent);
    public void spatialIndexOptionsList(CreateSpatialIndexStatement vParent);
    public SpatialIndexOption spatialIndexOption(SpatialIndexingSchemeType indexingScheme, Boolean& isRegularIndexOption);
    public BoundingBoxSpatialIndexOption boundingBoxSpatialIndexOption(bool isRegularIndexOption, SpatialIndexingSchemeType indexingScheme);
    public GridsSpatialIndexOption gridsSpatialIndexOption(bool isRegularIndexOption);
    public CellsPerObjectSpatialIndexOption cellsPerObjectSpatialIndexOption(bool isRegularIndexOption);
    public SpatialIndexRegularOption spatialIndexRegularOption(IndexAffectingStatement statement);
    public void boundingBoxParameter(BoundingBoxSpatialIndexOption vParent);
    public void boundingBoxParameterListByname(BoundingBoxSpatialIndexOption vParent);
    public void boundingBoxParameterListByord(BoundingBoxSpatialIndexOption vParent);
    public BoundingBoxParameter boundingBoxParameterByName(int encountered);
    public ScalarExpression signedIntegerOrReal();
    public BoundingBoxParameter boundingBoxParameterByOrd();
    public void gridParameter(GridsSpatialIndexOption vParent);
    public void gridParameterListByName(GridsSpatialIndexOption vParent);
    public void gridParameterListByOrd(GridsSpatialIndexOption vParent);
    public GridParameter gridParameterByName();
    public GridParameter gridParameterByOrd();
    public void viewStatementBody(ViewStatementBody vResult);
    public ViewOption viewOption();
    public TriggerOption triggerOption(bool vOwnerProhibited);
    public void procedureOptions(ProcedureStatementBody vParent);
    public ProcedureOption procedureOption();
    public void procedureStatementBody(ProcedureStatementBody vResult, Boolean& vParseErrorOccurred);
    public ProcedureReference procedureReference();
    public void procedureParameterList(ProcedureStatementBodyBase vResult);
    public ProcedureParameter procedureParameter();
    public void cursorProcedureParameter(ProcedureParameter vParent);
    public IdentifierLiteral identifierLiteral();
    public ValueExpression literal();
    public UnaryExpression negativeConstant();
    public Literal subroutineParameterLiteral();
    public void triggerStatementBody(TriggerStatementBody vResult, Boolean& vParseErrorOccurred);
    public void ddlTriggerMidSection(TriggerStatementBody vParent);
    public void dmlTriggerMidSection(TriggerStatementBody vParent);
    public TriggerAction dmlTriggerAction();
    public TriggerAction ddlTriggerAction();
    public void endConversationArgumentsOpt(EndConversationStatement vParent);
    public SelectElement receiveSelectExpression();
    public SelectScalarExpression receiveColumnSelectExpression();
    public DialogOption beginConversationArgument(Int32& encounteredOptions);
    public ScalarExpressionDialogOption scalarExpressionBeginDialogConversationArgument(IToken tOption, Int32& encounteredOptions);
    public OnOffDialogOption onOffBeginDialogConversationArgument(IToken tOption, Int32& encounteredOptions);
    public MergeStatement mergeStatementWithoutSemicolon(SubDmlFlags subDmlFlags);
    public MergeActionClause mergeActionClause();
    public MergeCondition mergeCondition();
    public MergeAction mergeAction(MergeCondition condition);
    public UpdateMergeAction updateMergeAction(MergeCondition condition);
    public InsertMergeAction insertMergeAction(MergeCondition condition);
    public DeleteMergeAction deleteMergeAction(MergeCondition condition);
    public ValuesInsertSource mergeInsertSource();
    public void execStart(TSqlFragment vParent);
    public ExecuteContext executeAsStatementContext();
    public void executeContextStatementOptionsOpt(ExecuteAsStatement vParent);
    public ExecuteOption executeOption();
    public ExecuteOption executeOptionRecompile();
    public ResultSetsExecuteOption executeOptionResultSets();
    public ResultSetDefinition resultSetDefinition();
    public InlineResultSetDefinition inlineResultSetDefinition();
    public ResultSetDefinition asForXmlResultSetDefinition();
    public SchemaObjectResultSetDefinition asSchemaObjectResultSetDefinition();
    public ResultColumnDefinition resultColumnDefinition();
    public void execTypes(ExecuteSpecification vParent);
    public ExecutableEntity execStrTypes();
    public ExecuteContext execStrExecCtxt();
    public Identifier linkedServer();
    public ExecutableProcedureReference execProcEx();
    public ExecuteContext execCtxtStmt();
    public void execCtxtStmtType(ExecuteContext vParent);
    public Literal execCtxtStmtPrincipal();
    public ExecutableStringList execSqlList();
    public void setParamList(ExecutableEntity vParent);
    public ExecutableProcedureReference adhocDataSourceExecproc();
    public ProcedureReferenceName procObjectReference();
    public ProcedureReferenceName varObjectReference();
    public Literal procNumOpt();
    public ValueExpression stringOrGlobalVariableOrVariable();
    public ExecuteParameter setParam(Boolean& nameEqualsValueWasUsed, Int32& parameterNumber);
    public TableDefinition tableDefinitionCreateTable();
    public FederationScheme federatedOn(CreateTableStatement vParent);
    public void largeDataOnOpt(CreateTableStatement vParent);
    public void withTableOptions(CreateTableStatement vParent);
    public void largeDataOn(CreateTableStatement vParent);
    public TableOption createTableOption();
    public TableDataCompressionOption tableDataCompressionOption();
    public FileTableDirectoryTableOption fileTableDirectoryTableOption();
    public FileTableCollateFileNameTableOption fileTableCollateFileNameTableOption();
    public FileTableConstraintNameTableOption fileTableConstraintNameTableOption();
    public DurabilityTableOption durabilityTableOption();
    public AlterTableAlterColumnStatement alterTableAlterColumnStatement();
    public AlterTableTriggerModificationStatement alterTableTriggerModificationStatement();
    public AlterTableDropTableElementStatement alterTableDropTableElementStatement();
    public AlterTableSwitchStatement alterTableSwitchStatement();
    public ConstraintEnforcement constraintEnforcement();
    public AlterTableAddTableElementStatement alterTableAddTableElementStatement(ConstraintEnforcement vExistingRowsCheck);
    public AlterTableConstraintModificationStatement alterTableConstraintModificationStatement(ConstraintEnforcement vExistingRowsCheck);
    public AlterTableRebuildStatement alterTableRebuildStatement();
    public AlterTableChangeTrackingModificationStatement alterTableChangeTrackingModificationStatement();
    public AlterTableFileTableNamespaceStatement alterTableFileTableNamespaceStatement();
    public AlterTableSetStatement alterTableSetStatement();
    public TableOption tableOption();
    public LockEscalationTableOption lockEscalationTableOption();
    public FileStreamOnTableOption fileStreamOnTableOption();
    public ColumnStorageOptions columnStorage(IndexAffectingStatement statementType, DataTypeReference columnType);
    public AlterTableDropTableElement alterTableDropTableElement();
    public void alterTableDropTableElementWithOptions(AlterTableDropTableElement vParent);
    public DropClusteredConstraintOption dropClusteredConstraintOption();
    public void tableSwitchOptionList(IList`1<TableSwitchOption> optionList, TSqlFragment vParent);
    public IndexType inlineIndexType();
    public IndexDefinition inlineIndexTableDefinition(IndexAffectingStatement statement);
    public IndexDefinition inlineIndexColumnDefinition();
    public ColumnDefinition columnDefinition(IndexAffectingStatement statementType, AlterTableAddTableElementStatement vStatement);
    public ConstraintDefinition tableConstraint(IndexAffectingStatement statementType, AlterTableAddTableElementStatement vStatement);
    public void computedColumnBody(ColumnDefinition vParent);
    public void computedColumnConstraintListOpt(IndexAffectingStatement statementType, ColumnDefinition vResult);
    public void regularColumnBody(IndexAffectingStatement statementType, ColumnDefinition vParent);
    public void columnConstraintListOpt(IndexAffectingStatement statementType, ColumnDefinition vResult);
    public ScalarExpression expressionWithFlags(ExpressionFlags expressionFlags);
    public ConstraintDefinition columnConstraint(IndexAffectingStatement statementType);
    public void rowguidcolConstraint(ColumnDefinition vParent);
    public IdentityOptions identityConstraint(IndexAffectingStatement statementType);
    public bool replicationClauseOpt(IndexAffectingStatement statementType, TSqlFragment vParent);
    public DefaultConstraintDefinition defaultColumnConstraint(IndexAffectingStatement statementType);
    public UniqueConstraintDefinition uniqueColumnConstraint(IndexAffectingStatement statementType);
    public ForeignKeyConstraintDefinition foreignKeyColumnConstraint(IndexAffectingStatement statementType);
    public CheckConstraintDefinition checkConstraint(IndexAffectingStatement statementType);
    public UniqueConstraintDefinition uniqueTableConstraint(IndexAffectingStatement statementType);
    public DefaultConstraintDefinition defaultTableConstraint(IndexAffectingStatement statementType);
    public ForeignKeyConstraintDefinition foreignKeyTableConstraint(IndexAffectingStatement statementType);
    public void uniqueConstraintHeader(UniqueConstraintDefinition vParent, bool throwInPhaseOne);
    public void uniqueConstraintTailOpt(IndexAffectingStatement statementType, UniqueConstraintDefinition vParent);
    public void uniqueConstraintIndexOptionsOpt(IndexAffectingStatement statement, UniqueConstraintDefinition vParent);
    public void sortedDataOptions();
    public DeleteUpdateAction deleteUpdateAction(TSqlFragment vParent);
    public void foreignKeyConstraintCommonEnd(IndexAffectingStatement statementType, ForeignKeyConstraintDefinition vParent);
    public void foreignConstraintColumnsOpt(ForeignKeyConstraintDefinition vParent);
    public BooleanExpression booleanExpressionWithFlags(ExpressionFlags expressionFlags);
    public XmlDataTypeReference xmlDataType(SchemaObjectName vName);
    public SchemaObjectName dataTypeSchemaObjectName();
    public SqlDataTypeReference sqlDataTypeWithoutNational(SchemaObjectName vName, SqlDataTypeOption vType);
    public UserDataTypeReference userDataType(SchemaObjectName vName);
    public SqlDataTypeReference doubleDataType();
    public SqlDataTypeReference sqlDataTypeWithNational();
    public void dataTypeParametersOpt(ParameterizedDataTypeReference vParent);
    public MaxLiteral max();
    public void identifierListElement(List`1<Identifier> vParent, int vMaxNumber, bool first);
    public MultiPartIdentifier nonEmptyThreePartObjectName();
    public MultiPartIdentifier oneOrTwoOrThreePartObjectName();
    public BooleanExpression booleanExpressionOr(ExpressionFlags expressionFlags);
    public BooleanExpression booleanExpressionAnd(ExpressionFlags expressionFlags);
    public BooleanExpression booleanExpressionUnary(ExpressionFlags expressionFlags);
    public BooleanExpression booleanExpressionPrimary(ExpressionFlags expressionFlags);
    public BooleanParenthesisExpression booleanExpressionParenthesis();
    public BooleanComparisonExpression comparisonPredicate(ScalarExpression vExpressionFirst, BooleanComparisonType vType, ExpressionFlags expressionFlags);
    public SubqueryComparisonPredicate subqueryComparisonPredicate(ScalarExpression vExpressionFirst, BooleanComparisonType vType, ExpressionFlags expressionFlags);
    public InPredicate inPredicate(ScalarExpression vExpressionFirst, bool vNotDefined, ExpressionFlags expressionFlags);
    public BooleanTernaryExpression betweenPredicate(ScalarExpression vExpressionFirst, bool vNotDefined, ExpressionFlags expressionFlags);
    public LikePredicate likePredicate(ScalarExpression vExpressionFirst, bool vNotDefined, ExpressionFlags expressionFlags);
    public FullTextPredicate fulltextPredicate();
    public ExistsPredicate existsPredicate(ExpressionFlags expressionFlags);
    public TSEqualCall tsEqualCall();
    public UpdateCall updateCall();
    public ColumnReferenceExpression fulltextColumn();
    public ColumnReferenceExpression starColumn();
    public SubqueryComparisonPredicateType subqueryComparisonPredicateType();
    public void escapeExpression(LikePredicate vParent, ExpressionFlags expressionFlags);
    public ScalarExpression expressionBinaryPri2(ExpressionFlags expressionFlags);
    public ScalarExpression expressionBinaryPri1(ExpressionFlags expressionFlags);
    public ScalarExpression expressionUnary(ExpressionFlags expressionFlags);
    public PrimaryExpression expressionWithClrElements(ExpressionFlags expressionFlags);
    public PrimaryExpression udtExpression();
    public PrimaryExpression expressionPrimary(ExpressionFlags expressionFlags);
    public FunctionCall expressionWithClrElementsFunctionCallPart();
    public CastCall castCall();
    public TryCastCall tryCastCall();
    public ParseCall parseCall();
    public TryParseCall tryParseCall();
    public IIfCall iIfCall();
    public FunctionCall builtInFunctionCall();
    public LeftFunctionCall leftFunctionCall();
    public RightFunctionCall rightFunctionCall();
    public PartitionFunctionCall partitionFunctionCall();
    public NextValueForExpression nextValueForCall();
    public PrimaryExpression columnOrFunctionCall();
    public NullIfExpression nullIfExpression(ExpressionFlags expressionFlags);
    public CoalesceExpression coalesceExpression(ExpressionFlags expressionFlags);
    public CaseExpression caseExpression(ExpressionFlags expressionFlags);
    public ConvertCall convertCall();
    public TryConvertCall tryConvertCall();
    public ParameterlessCall parameterlessCall();
    public ParenthesisExpression expressionParenthesis(ExpressionFlags expressionFlags);
    public UserDefinedTypeCallTarget userDefinedTypeCallTarget();
    public FunctionCall udtFunctionExpression(UserDefinedTypeCallTarget vCallTarget);
    public UserDefinedTypePropertyAccess udtPropertyExpression(UserDefinedTypeCallTarget vCallTarget);
    public FunctionCall basicFunctionCall();
    public OverClause overClause();
    public OverClause overClauseBeginning();
    public WindowFrameClause windowFrameClause();
    public OverClause overClauseNoOrderBy();
    public void windowFrameExtent(WindowFrameClause vParent);
    public WindowDelimiter windowFrameDelimiter();
    public WithinGroupClause withinGroupClause();
    public void regularBuiltInFunctionCall(FunctionCall vParent);
    public void aggregateBuiltInFunctionCall(FunctionCall vParent);
    public void withinGroupOrOverClause(FunctionCall vParent);
    public void reservedBuiltInFunctionCallParameters(TSqlFragment vParent, IList`1<ScalarExpression> parameters);
    public SimpleWhenClause simpleWhenClause(ExpressionFlags expressionFlags);
    public SearchedWhenClause searchedWhenClause(ExpressionFlags expressionFlags);
    public SimpleCaseExpression simpleCaseExpression(ScalarExpression inputExpression, ExpressionFlags expressionFlags);
    public SearchedCaseExpression searchedCaseExpression(ExpressionFlags expressionFlags);
    public FunctionCall userFunctionCall(MultiPartIdentifier vIdentifiers);
    public ValueExpression globalVariableOrVariableReference();
    public SchemaObjectNameOrValueExpression objectOrVariable();
    public MoneyLiteral moneyLiteral();
    public OdbcLiteral odbcLiteral();
    private void initializeFactory();
    private static Int64[] mk_tokenSet_0_();
    private static Int64[] mk_tokenSet_1_();
    private static Int64[] mk_tokenSet_2_();
    private static Int64[] mk_tokenSet_3_();
    private static Int64[] mk_tokenSet_4_();
    private static Int64[] mk_tokenSet_5_();
    private static Int64[] mk_tokenSet_6_();
    private static Int64[] mk_tokenSet_7_();
    private static Int64[] mk_tokenSet_8_();
    private static Int64[] mk_tokenSet_9_();
    private static Int64[] mk_tokenSet_10_();
    private static Int64[] mk_tokenSet_11_();
    private static Int64[] mk_tokenSet_12_();
    private static Int64[] mk_tokenSet_13_();
    private static Int64[] mk_tokenSet_14_();
    private static Int64[] mk_tokenSet_15_();
    private static Int64[] mk_tokenSet_16_();
    private static Int64[] mk_tokenSet_17_();
    private static Int64[] mk_tokenSet_18_();
    private static Int64[] mk_tokenSet_19_();
    private static Int64[] mk_tokenSet_20_();
    private static Int64[] mk_tokenSet_21_();
    private static Int64[] mk_tokenSet_22_();
    private static Int64[] mk_tokenSet_23_();
    private static Int64[] mk_tokenSet_24_();
    private static Int64[] mk_tokenSet_25_();
    private static Int64[] mk_tokenSet_26_();
    private static Int64[] mk_tokenSet_27_();
    private static Int64[] mk_tokenSet_28_();
    private static Int64[] mk_tokenSet_29_();
    private static Int64[] mk_tokenSet_30_();
    private static Int64[] mk_tokenSet_31_();
    private static Int64[] mk_tokenSet_32_();
    private static Int64[] mk_tokenSet_33_();
    private static Int64[] mk_tokenSet_34_();
    private static Int64[] mk_tokenSet_35_();
    private static Int64[] mk_tokenSet_36_();
    private static Int64[] mk_tokenSet_37_();
    private static Int64[] mk_tokenSet_38_();
    private static Int64[] mk_tokenSet_39_();
    private static Int64[] mk_tokenSet_40_();
    private static Int64[] mk_tokenSet_41_();
    private static Int64[] mk_tokenSet_42_();
    private static Int64[] mk_tokenSet_43_();
    private static Int64[] mk_tokenSet_44_();
    private static Int64[] mk_tokenSet_45_();
    private static Int64[] mk_tokenSet_46_();
    private static Int64[] mk_tokenSet_47_();
    private static Int64[] mk_tokenSet_48_();
    private static Int64[] mk_tokenSet_49_();
    private static Int64[] mk_tokenSet_50_();
    private static Int64[] mk_tokenSet_51_();
    private static Int64[] mk_tokenSet_52_();
    private static Int64[] mk_tokenSet_53_();
    private static Int64[] mk_tokenSet_54_();
    private static Int64[] mk_tokenSet_55_();
    private static Int64[] mk_tokenSet_56_();
    private static Int64[] mk_tokenSet_57_();
    private static Int64[] mk_tokenSet_58_();
    private static Int64[] mk_tokenSet_59_();
    private static Int64[] mk_tokenSet_60_();
    private static Int64[] mk_tokenSet_61_();
    private static Int64[] mk_tokenSet_62_();
    private static Int64[] mk_tokenSet_63_();
    private static Int64[] mk_tokenSet_64_();
    private static Int64[] mk_tokenSet_65_();
    private static Int64[] mk_tokenSet_66_();
    private static Int64[] mk_tokenSet_67_();
    private static Int64[] mk_tokenSet_68_();
    private static Int64[] mk_tokenSet_69_();
    private static Int64[] mk_tokenSet_70_();
    private static Int64[] mk_tokenSet_71_();
    private static Int64[] mk_tokenSet_72_();
    private static Int64[] mk_tokenSet_73_();
    private static Int64[] mk_tokenSet_74_();
    private static Int64[] mk_tokenSet_75_();
    private static Int64[] mk_tokenSet_76_();
    private static Int64[] mk_tokenSet_77_();
    private static Int64[] mk_tokenSet_78_();
    private static Int64[] mk_tokenSet_79_();
    private static Int64[] mk_tokenSet_80_();
    private static Int64[] mk_tokenSet_81_();
    private static Int64[] mk_tokenSet_82_();
    private static Int64[] mk_tokenSet_83_();
    private static Int64[] mk_tokenSet_84_();
    private static Int64[] mk_tokenSet_85_();
    private static Int64[] mk_tokenSet_86_();
    private static Int64[] mk_tokenSet_87_();
    private static Int64[] mk_tokenSet_88_();
    private static Int64[] mk_tokenSet_89_();
    private static Int64[] mk_tokenSet_90_();
    private static Int64[] mk_tokenSet_91_();
    private static Int64[] mk_tokenSet_92_();
    private static Int64[] mk_tokenSet_93_();
    private static Int64[] mk_tokenSet_94_();
    private static Int64[] mk_tokenSet_95_();
    private static Int64[] mk_tokenSet_96_();
    private static Int64[] mk_tokenSet_97_();
    private static Int64[] mk_tokenSet_98_();
    private static Int64[] mk_tokenSet_99_();
    private static Int64[] mk_tokenSet_100_();
    private static Int64[] mk_tokenSet_101_();
    private static Int64[] mk_tokenSet_102_();
    private static Int64[] mk_tokenSet_103_();
    private static Int64[] mk_tokenSet_104_();
    private static Int64[] mk_tokenSet_105_();
    private static Int64[] mk_tokenSet_106_();
    private static Int64[] mk_tokenSet_107_();
    private static Int64[] mk_tokenSet_108_();
    private static Int64[] mk_tokenSet_109_();
    private static Int64[] mk_tokenSet_110_();
    private static Int64[] mk_tokenSet_111_();
    private static Int64[] mk_tokenSet_112_();
    private static Int64[] mk_tokenSet_113_();
    private static Int64[] mk_tokenSet_114_();
    private static Int64[] mk_tokenSet_115_();
    private static Int64[] mk_tokenSet_116_();
    private static Int64[] mk_tokenSet_117_();
    private static Int64[] mk_tokenSet_118_();
    private static Int64[] mk_tokenSet_119_();
    private static Int64[] mk_tokenSet_120_();
    private static Int64[] mk_tokenSet_121_();
    private static Int64[] mk_tokenSet_122_();
    private static Int64[] mk_tokenSet_123_();
    private static Int64[] mk_tokenSet_124_();
    private static Int64[] mk_tokenSet_125_();
    private static Int64[] mk_tokenSet_126_();
    private static Int64[] mk_tokenSet_127_();
    private static Int64[] mk_tokenSet_128_();
    private static Int64[] mk_tokenSet_129_();
    private static Int64[] mk_tokenSet_130_();
    private static Int64[] mk_tokenSet_131_();
    private static Int64[] mk_tokenSet_132_();
    private static Int64[] mk_tokenSet_133_();
    private static Int64[] mk_tokenSet_134_();
    private static Int64[] mk_tokenSet_135_();
    private static Int64[] mk_tokenSet_136_();
    private static Int64[] mk_tokenSet_137_();
    private static Int64[] mk_tokenSet_138_();
    private static Int64[] mk_tokenSet_139_();
    private static Int64[] mk_tokenSet_140_();
    private static Int64[] mk_tokenSet_141_();
    private static Int64[] mk_tokenSet_142_();
    private static Int64[] mk_tokenSet_143_();
    private static Int64[] mk_tokenSet_144_();
    private static Int64[] mk_tokenSet_145_();
    private static Int64[] mk_tokenSet_146_();
    private static Int64[] mk_tokenSet_147_();
    private static Int64[] mk_tokenSet_148_();
    private static Int64[] mk_tokenSet_149_();
    private static Int64[] mk_tokenSet_150_();
    private static Int64[] mk_tokenSet_151_();
    private static Int64[] mk_tokenSet_152_();
    private static Int64[] mk_tokenSet_153_();
    private static Int64[] mk_tokenSet_154_();
    private static Int64[] mk_tokenSet_155_();
    private static Int64[] mk_tokenSet_156_();
    private static Int64[] mk_tokenSet_157_();
    private static Int64[] mk_tokenSet_158_();
    private static Int64[] mk_tokenSet_159_();
    private static Int64[] mk_tokenSet_160_();
    private static Int64[] mk_tokenSet_161_();
    private static Int64[] mk_tokenSet_162_();
    private static Int64[] mk_tokenSet_163_();
    private static Int64[] mk_tokenSet_164_();
    private static Int64[] mk_tokenSet_165_();
    private static Int64[] mk_tokenSet_166_();
    private static Int64[] mk_tokenSet_167_();
    private static Int64[] mk_tokenSet_168_();
    private static Int64[] mk_tokenSet_169_();
    private static Int64[] mk_tokenSet_170_();
    private static Int64[] mk_tokenSet_171_();
    private static Int64[] mk_tokenSet_172_();
    private static Int64[] mk_tokenSet_173_();
    private static Int64[] mk_tokenSet_174_();
    private static Int64[] mk_tokenSet_175_();
    private static Int64[] mk_tokenSet_176_();
    private static Int64[] mk_tokenSet_177_();
    private static Int64[] mk_tokenSet_178_();
    private static Int64[] mk_tokenSet_179_();
    private static Int64[] mk_tokenSet_180_();
    private static Int64[] mk_tokenSet_181_();
}
internal class Microsoft.SqlServer.TransactSql.ScriptDom.TSql130LexerInternal : TSqlLexerBaseInternal {
    public static int EOF;
    public static int NULL_TREE_LOOKAHEAD;
    public static int Add;
    public static int All;
    public static int Alter;
    public static int And;
    public static int Any;
    public static int As;
    public static int Asc;
    public static int Authorization;
    public static int Backup;
    public static int Begin;
    public static int Between;
    public static int Break;
    public static int Browse;
    public static int Bulk;
    public static int By;
    public static int Cascade;
    public static int Case;
    public static int Check;
    public static int Checkpoint;
    public static int Close;
    public static int Clustered;
    public static int Coalesce;
    public static int Collate;
    public static int Column;
    public static int Commit;
    public static int Compute;
    public static int Constraint;
    public static int Contains;
    public static int ContainsTable;
    public static int Continue;
    public static int Convert;
    public static int Create;
    public static int Cross;
    public static int Current;
    public static int CurrentDate;
    public static int CurrentTime;
    public static int CurrentTimestamp;
    public static int CurrentUser;
    public static int Cursor;
    public static int Database;
    public static int Dbcc;
    public static int Deallocate;
    public static int Declare;
    public static int Default;
    public static int Delete;
    public static int Deny;
    public static int Desc;
    public static int Distinct;
    public static int Distributed;
    public static int Double;
    public static int Drop;
    public static int Else;
    public static int End;
    public static int Errlvl;
    public static int Escape;
    public static int Except;
    public static int Exec;
    public static int Execute;
    public static int Exists;
    public static int Exit;
    public static int Fetch;
    public static int File;
    public static int FillFactor;
    public static int For;
    public static int Foreign;
    public static int FreeText;
    public static int FreeTextTable;
    public static int From;
    public static int Full;
    public static int Function;
    public static int GoTo;
    public static int Grant;
    public static int Group;
    public static int Having;
    public static int HoldLock;
    public static int Identity;
    public static int IdentityInsert;
    public static int IdentityColumn;
    public static int If;
    public static int In;
    public static int Index;
    public static int Inner;
    public static int Insert;
    public static int Intersect;
    public static int Into;
    public static int Is;
    public static int Join;
    public static int Key;
    public static int Kill;
    public static int Left;
    public static int Like;
    public static int LineNo;
    public static int National;
    public static int NoCheck;
    public static int NonClustered;
    public static int Not;
    public static int Null;
    public static int NullIf;
    public static int Of;
    public static int Off;
    public static int Offsets;
    public static int On;
    public static int Open;
    public static int OpenDataSource;
    public static int OpenQuery;
    public static int OpenRowSet;
    public static int OpenXml;
    public static int Option;
    public static int Or;
    public static int Order;
    public static int Outer;
    public static int Over;
    public static int Percent;
    public static int Plan;
    public static int Primary;
    public static int Print;
    public static int Proc;
    public static int Procedure;
    public static int Public;
    public static int Raiserror;
    public static int Read;
    public static int ReadText;
    public static int Reconfigure;
    public static int References;
    public static int Replication;
    public static int Restore;
    public static int Restrict;
    public static int Return;
    public static int Revoke;
    public static int Right;
    public static int Rollback;
    public static int RowCount;
    public static int RowGuidColumn;
    public static int Rule;
    public static int Save;
    public static int Schema;
    public static int Select;
    public static int SessionUser;
    public static int Set;
    public static int SetUser;
    public static int Shutdown;
    public static int Some;
    public static int Statistics;
    public static int SystemUser;
    public static int Table;
    public static int TextSize;
    public static int Then;
    public static int To;
    public static int Top;
    public static int Tran;
    public static int Transaction;
    public static int Trigger;
    public static int Truncate;
    public static int TSEqual;
    public static int Union;
    public static int Unique;
    public static int Update;
    public static int UpdateText;
    public static int Use;
    public static int User;
    public static int Values;
    public static int Varying;
    public static int View;
    public static int WaitFor;
    public static int When;
    public static int Where;
    public static int While;
    public static int With;
    public static int WriteText;
    public static int Disk;
    public static int Precision;
    public static int External;
    public static int Revert;
    public static int Pivot;
    public static int Unpivot;
    public static int TableSample;
    public static int Dump;
    public static int Load;
    public static int Merge;
    public static int StopList;
    public static int SemanticKeyPhraseTable;
    public static int SemanticSimilarityTable;
    public static int SemanticSimilarityDetailsTable;
    public static int TryConvert;
    public static int Bang;
    public static int PercentSign;
    public static int Ampersand;
    public static int LeftParenthesis;
    public static int RightParenthesis;
    public static int LeftCurly;
    public static int RightCurly;
    public static int Star;
    public static int MultiplyEquals;
    public static int Plus;
    public static int Comma;
    public static int Minus;
    public static int Dot;
    public static int Divide;
    public static int Colon;
    public static int DoubleColon;
    public static int Semicolon;
    public static int LessThan;
    public static int EqualsSign;
    public static int RightOuterJoin;
    public static int GreaterThan;
    public static int Circumflex;
    public static int VerticalLine;
    public static int Tilde;
    public static int AddEquals;
    public static int SubtractEquals;
    public static int DivideEquals;
    public static int ModEquals;
    public static int BitwiseAndEquals;
    public static int BitwiseOrEquals;
    public static int BitwiseXorEquals;
    public static int Go;
    public static int Label;
    public static int Integer;
    public static int Numeric;
    public static int Real;
    public static int HexLiteral;
    public static int Money;
    public static int SqlCommandIdentifier;
    public static int PseudoColumn;
    public static int DollarPartition;
    public static int AsciiStringOrQuotedIdentifier;
    public static int AsciiStringLiteral;
    public static int UnicodeStringLiteral;
    public static int Identifier;
    public static int QuotedIdentifier;
    public static int Variable;
    public static int OdbcInitiator;
    public static int ProcNameSemicolon;
    public static int SingleLineComment;
    public static int MultilineComment;
    public static int WhiteSpace;
    public static int Digit;
    public static int FirstLetter;
    public static int Letter;
    public static int CharHighNotWhitespace;
    public static int MoneySign;
    public static int WS_CHAR_WO_NEWLINE;
    public static int Number;
    public static int Exponent;
    public static int EndOfLine;
    public static BitSet tokenSet_0_;
    public static BitSet tokenSet_1_;
    public static BitSet tokenSet_2_;
    public static BitSet tokenSet_3_;
    public static BitSet tokenSet_4_;
    public static BitSet tokenSet_5_;
    public static BitSet tokenSet_6_;
    public static BitSet tokenSet_7_;
    public static BitSet tokenSet_8_;
    public static BitSet tokenSet_9_;
    public static BitSet tokenSet_10_;
    public static BitSet tokenSet_11_;
    public static BitSet tokenSet_12_;
    public static BitSet tokenSet_13_;
    public TSql130LexerInternal(Stream ins);
    public TSql130LexerInternal(TextReader r);
    public TSql130LexerInternal(InputBuffer ib);
    public TSql130LexerInternal(LexerSharedInputState state);
    private static TSql130LexerInternal();
    private void initialize();
    public virtual IToken nextToken();
    public void mBang(bool _createToken);
    public void mPercentSign(bool _createToken);
    public void mAmpersand(bool _createToken);
    public void mLeftParenthesis(bool _createToken);
    public void mRightParenthesis(bool _createToken);
    public void mLeftCurly(bool _createToken);
    public void mRightCurly(bool _createToken);
    public void mStar(bool _createToken);
    public void mMultiplyEquals(bool _createToken);
    public void mPlus(bool _createToken);
    public void mComma(bool _createToken);
    public void mMinus(bool _createToken);
    protected void mDot(bool _createToken);
    public void mDivide(bool _createToken);
    public void mColon(bool _createToken);
    public void mDoubleColon(bool _createToken);
    public void mLessThan(bool _createToken);
    public void mEqualsSign(bool _createToken);
    public void mRightOuterJoin(bool _createToken);
    public void mGreaterThan(bool _createToken);
    public void mCircumflex(bool _createToken);
    public void mVerticalLine(bool _createToken);
    public void mTilde(bool _createToken);
    public void mAddEquals(bool _createToken);
    public void mSubtractEquals(bool _createToken);
    public void mDivideEquals(bool _createToken);
    public void mModEquals(bool _createToken);
    public void mBitwiseAndEquals(bool _createToken);
    public void mBitwiseOrEquals(bool _createToken);
    public void mBitwiseXorEquals(bool _createToken);
    protected void mSemicolon(bool _createToken);
    protected void mDigit(bool _createToken);
    protected void mFirstLetter(bool _createToken);
    protected void mCharHighNotWhitespace(bool _createToken);
    protected void mLetter(bool _createToken);
    protected void mMoneySign(bool _createToken);
    public void mProcNameSemicolon(bool _createToken);
    protected void mWS_CHAR_WO_NEWLINE(bool _createToken);
    public void mNumber(bool _createToken);
    public void mWhiteSpace(bool _createToken);
    protected void mEndOfLine(bool _createToken);
    public void mGo(bool _createToken);
    protected void mLabel(bool _createToken);
    protected void mInteger(bool _createToken);
    protected void mReal(bool _createToken);
    protected void mNumeric(bool _createToken);
    protected void mHexLiteral(bool _createToken);
    protected void mExponent(bool _createToken);
    protected void mMoney(bool _createToken);
    protected void mSqlCommandIdentifier(bool _createToken);
    protected void mPseudoColumn(bool _createToken);
    protected void mDollarPartition(bool _createToken);
    protected void mAsciiStringOrQuotedIdentifier(bool _createToken);
    public void mAsciiStringLiteral(bool _createToken);
    public void mUnicodeStringLiteral(bool _createToken);
    public void mIdentifier(bool _createToken);
    public void mQuotedIdentifier(bool _createToken);
    public void mVariable(bool _createToken);
    protected void mOdbcInitiator(bool _createToken);
    public void mSingleLineComment(bool _createToken);
    public void mMultilineComment(bool _createToken);
    private static Int64[] mk_tokenSet_0_();
    private static Int64[] mk_tokenSet_1_();
    private static Int64[] mk_tokenSet_2_();
    private static Int64[] mk_tokenSet_3_();
    private static Int64[] mk_tokenSet_4_();
    private static Int64[] mk_tokenSet_5_();
    private static Int64[] mk_tokenSet_6_();
    private static Int64[] mk_tokenSet_7_();
    private static Int64[] mk_tokenSet_8_();
    private static Int64[] mk_tokenSet_9_();
    private static Int64[] mk_tokenSet_10_();
    private static Int64[] mk_tokenSet_11_();
    private static Int64[] mk_tokenSet_12_();
    private static Int64[] mk_tokenSet_13_();
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.TSql130Parser : TSqlParser {
    protected SqlEngineType engineType;
    public TSql130Parser(bool initialQuotedIdentifiers);
    public TSql130Parser(bool initialQuotedIdentifiers, SqlEngineType engineType);
    internal virtual TSqlLexerBaseInternal GetNewInternalLexer();
    private TSql130ParserInternal GetNewInternalParser();
    private TSql130ParserInternal GetNewInternalParserForInput(TextReader input, IList`1& errors, int startOffset, int startLine, int startColumn);
    public virtual TSqlFragment Parse(IList`1<TSqlParserToken> tokens, IList`1& errors);
    public virtual ChildObjectName ParseChildObjectName(TextReader input, IList`1& errors, int startOffset, int startLine, int startColumn);
    public virtual SchemaObjectName ParseSchemaObjectName(TextReader input, IList`1& errors, int startOffset, int startLine, int startColumn);
    public virtual DataTypeReference ParseScalarDataType(TextReader input, IList`1& errors, int startOffset, int startLine, int startColumn);
    public virtual ScalarExpression ParseExpression(TextReader input, IList`1& errors, int startOffset, int startLine, int startColumn);
    public virtual BooleanExpression ParseBooleanExpression(TextReader input, IList`1& errors, int startOffset, int startLine, int startColumn);
    public virtual StatementList ParseStatementList(TextReader input, IList`1& errors, int startOffset, int startLine, int startColumn);
    public virtual SelectStatement ParseSubQueryExpressionWithOptionalCTE(TextReader input, IList`1& errors, int startOffset, int startLine, int startColumn);
    internal IPv4 ParseIPv4(TextReader input, IList`1& errors, int startOffset, int startLine, int startColumn);
    public virtual TSqlFragment ParseConstantOrIdentifier(TextReader input, IList`1& errors, int startOffset, int startLine, int startColumn);
    public virtual TSqlFragment ParseConstantOrIdentifierWithDefault(TextReader input, IList`1& errors, int startOffset, int startLine, int startColumn);
    internal virtual TSqlStatement PhaseOneParse(TextReader input);
}
internal abstract class Microsoft.SqlServer.TransactSql.ScriptDom.TSql130ParserBaseInternal : TSql120ParserBaseInternal {
    internal static string EncryptionWithAsterisks;
    [CompilerGeneratedAttribute]
private static Func`2<TableOption, bool> CS$<>9__CachedAnonymousMethodDelegate1;
    [CompilerGeneratedAttribute]
private static Func`2<ExternalTableOption, bool> CS$<>9__CachedAnonymousMethodDelegate3;
    protected TSql130ParserBaseInternal(TokenBuffer tokenBuf, int k);
    protected TSql130ParserBaseInternal(ParserSharedInputState state, int k);
    protected TSql130ParserBaseInternal(TokenStream lexer, int k);
    public TSql130ParserBaseInternal(bool initialQuotedIdentifiersOn);
    protected static void VerifyAllowedIndexOption130(IndexAffectingStatement statement, IndexOption option);
    protected static void CheckTemporalPeriodInTableDefinition(TableDefinition definition, bool isInAlterStatement, bool isLedgerSupported);
    protected static void CheckTemporalGeneratedAlwaysColumns(TableDefinition definition, bool isInAlterStatement, bool isLedgerSupported);
    protected static void CheckRetentionPeriodDuration(ScalarExpression duration);
    protected static void CheckHekatonTableForInlineFilteredIndexes(CreateTableStatement statement);
    protected static void CheckHekatonTableForNonClusteredColumnStoreIndexes(CreateTableStatement statement);
    private static bool IsMemoryOptimized(CreateTableStatement statement);
    protected static void ThrowIfCompressionDelayValueOutOfRange(Literal value);
    protected static void CheckCtasStatementHasDistributionOption(CreateTableStatement statement);
    protected static void CheckExternalTableCtasStatementHasNotRejectedRowLocationOption(CreateExternalTableStatement statement);
    protected static FunctionOptionKind ParseAlterCreateFunctionWithOption(IToken token);
    protected bool NextIdentifierMatchesOneOf(String[] keywords);
    protected static void CheckAndIncrementColumnCount(Int32& columnCount, IToken token);
    protected static void CheckCopyOptionDuplication(Int32& encountered, CopyOptionKind newOption, IToken token);
    protected static void CheckValidWlmTimeLiteral(StringLiteral timeStringToken);
    [CompilerGeneratedAttribute]
private static bool <CheckCtasStatementHasDistributionOption>b__0(TableOption o);
    [CompilerGeneratedAttribute]
private static bool <CheckExternalTableCtasStatementHasNotRejectedRowLocationOption>b__2(ExternalTableOption o);
}
internal class Microsoft.SqlServer.TransactSql.ScriptDom.TSql130ParserInternal : TSql130ParserBaseInternal {
    public static int EOF;
    public static int NULL_TREE_LOOKAHEAD;
    public static int Add;
    public static int All;
    public static int Alter;
    public static int And;
    public static int Any;
    public static int As;
    public static int Asc;
    public static int Authorization;
    public static int Backup;
    public static int Begin;
    public static int Between;
    public static int Break;
    public static int Browse;
    public static int Bulk;
    public static int By;
    public static int Cascade;
    public static int Case;
    public static int Check;
    public static int Checkpoint;
    public static int Close;
    public static int Clustered;
    public static int Coalesce;
    public static int Collate;
    public static int Column;
    public static int Commit;
    public static int Compute;
    public static int Constraint;
    public static int Contains;
    public static int ContainsTable;
    public static int Continue;
    public static int Convert;
    public static int Create;
    public static int Cross;
    public static int Current;
    public static int CurrentDate;
    public static int CurrentTime;
    public static int CurrentTimestamp;
    public static int CurrentUser;
    public static int Cursor;
    public static int Database;
    public static int Dbcc;
    public static int Deallocate;
    public static int Declare;
    public static int Default;
    public static int Delete;
    public static int Deny;
    public static int Desc;
    public static int Distinct;
    public static int Distributed;
    public static int Double;
    public static int Drop;
    public static int Else;
    public static int End;
    public static int Errlvl;
    public static int Escape;
    public static int Except;
    public static int Exec;
    public static int Execute;
    public static int Exists;
    public static int Exit;
    public static int Fetch;
    public static int File;
    public static int FillFactor;
    public static int For;
    public static int Foreign;
    public static int FreeText;
    public static int FreeTextTable;
    public static int From;
    public static int Full;
    public static int Function;
    public static int GoTo;
    public static int Grant;
    public static int Group;
    public static int Having;
    public static int HoldLock;
    public static int Identity;
    public static int IdentityInsert;
    public static int IdentityColumn;
    public static int If;
    public static int In;
    public static int Index;
    public static int Inner;
    public static int Insert;
    public static int Intersect;
    public static int Into;
    public static int Is;
    public static int Join;
    public static int Key;
    public static int Kill;
    public static int Left;
    public static int Like;
    public static int LineNo;
    public static int National;
    public static int NoCheck;
    public static int NonClustered;
    public static int Not;
    public static int Null;
    public static int NullIf;
    public static int Of;
    public static int Off;
    public static int Offsets;
    public static int On;
    public static int Open;
    public static int OpenDataSource;
    public static int OpenQuery;
    public static int OpenRowSet;
    public static int OpenXml;
    public static int Option;
    public static int Or;
    public static int Order;
    public static int Outer;
    public static int Over;
    public static int Percent;
    public static int Plan;
    public static int Primary;
    public static int Print;
    public static int Proc;
    public static int Procedure;
    public static int Public;
    public static int Raiserror;
    public static int Read;
    public static int ReadText;
    public static int Reconfigure;
    public static int References;
    public static int Replication;
    public static int Restore;
    public static int Restrict;
    public static int Return;
    public static int Revoke;
    public static int Right;
    public static int Rollback;
    public static int RowCount;
    public static int RowGuidColumn;
    public static int Rule;
    public static int Save;
    public static int Schema;
    public static int Select;
    public static int SessionUser;
    public static int Set;
    public static int SetUser;
    public static int Shutdown;
    public static int Some;
    public static int Statistics;
    public static int SystemUser;
    public static int Table;
    public static int TextSize;
    public static int Then;
    public static int To;
    public static int Top;
    public static int Tran;
    public static int Transaction;
    public static int Trigger;
    public static int Truncate;
    public static int TSEqual;
    public static int Union;
    public static int Unique;
    public static int Update;
    public static int UpdateText;
    public static int Use;
    public static int User;
    public static int Values;
    public static int Varying;
    public static int View;
    public static int WaitFor;
    public static int When;
    public static int Where;
    public static int While;
    public static int With;
    public static int WriteText;
    public static int Disk;
    public static int Precision;
    public static int External;
    public static int Revert;
    public static int Pivot;
    public static int Unpivot;
    public static int TableSample;
    public static int Dump;
    public static int Load;
    public static int Merge;
    public static int StopList;
    public static int SemanticKeyPhraseTable;
    public static int SemanticSimilarityTable;
    public static int SemanticSimilarityDetailsTable;
    public static int TryConvert;
    public static int Bang;
    public static int PercentSign;
    public static int Ampersand;
    public static int LeftParenthesis;
    public static int RightParenthesis;
    public static int LeftCurly;
    public static int RightCurly;
    public static int Star;
    public static int MultiplyEquals;
    public static int Plus;
    public static int Comma;
    public static int Minus;
    public static int Dot;
    public static int Divide;
    public static int Colon;
    public static int DoubleColon;
    public static int Semicolon;
    public static int LessThan;
    public static int EqualsSign;
    public static int RightOuterJoin;
    public static int GreaterThan;
    public static int Circumflex;
    public static int VerticalLine;
    public static int Tilde;
    public static int AddEquals;
    public static int SubtractEquals;
    public static int DivideEquals;
    public static int ModEquals;
    public static int BitwiseAndEquals;
    public static int BitwiseOrEquals;
    public static int BitwiseXorEquals;
    public static int Go;
    public static int Label;
    public static int Integer;
    public static int Numeric;
    public static int Real;
    public static int HexLiteral;
    public static int Money;
    public static int SqlCommandIdentifier;
    public static int PseudoColumn;
    public static int DollarPartition;
    public static int AsciiStringOrQuotedIdentifier;
    public static int AsciiStringLiteral;
    public static int UnicodeStringLiteral;
    public static int Identifier;
    public static int QuotedIdentifier;
    public static int Variable;
    public static int OdbcInitiator;
    public static int ProcNameSemicolon;
    public static int SingleLineComment;
    public static int MultilineComment;
    public static int WhiteSpace;
    public static int Credential;
    public static int Object;
    public static String[] tokenNames_;
    public static BitSet tokenSet_0_;
    public static BitSet tokenSet_1_;
    public static BitSet tokenSet_2_;
    public static BitSet tokenSet_3_;
    public static BitSet tokenSet_4_;
    public static BitSet tokenSet_5_;
    public static BitSet tokenSet_6_;
    public static BitSet tokenSet_7_;
    public static BitSet tokenSet_8_;
    public static BitSet tokenSet_9_;
    public static BitSet tokenSet_10_;
    public static BitSet tokenSet_11_;
    public static BitSet tokenSet_12_;
    public static BitSet tokenSet_13_;
    public static BitSet tokenSet_14_;
    public static BitSet tokenSet_15_;
    public static BitSet tokenSet_16_;
    public static BitSet tokenSet_17_;
    public static BitSet tokenSet_18_;
    public static BitSet tokenSet_19_;
    public static BitSet tokenSet_20_;
    public static BitSet tokenSet_21_;
    public static BitSet tokenSet_22_;
    public static BitSet tokenSet_23_;
    public static BitSet tokenSet_24_;
    public static BitSet tokenSet_25_;
    public static BitSet tokenSet_26_;
    public static BitSet tokenSet_27_;
    public static BitSet tokenSet_28_;
    public static BitSet tokenSet_29_;
    public static BitSet tokenSet_30_;
    public static BitSet tokenSet_31_;
    public static BitSet tokenSet_32_;
    public static BitSet tokenSet_33_;
    public static BitSet tokenSet_34_;
    public static BitSet tokenSet_35_;
    public static BitSet tokenSet_36_;
    public static BitSet tokenSet_37_;
    public static BitSet tokenSet_38_;
    public static BitSet tokenSet_39_;
    public static BitSet tokenSet_40_;
    public static BitSet tokenSet_41_;
    public static BitSet tokenSet_42_;
    public static BitSet tokenSet_43_;
    public static BitSet tokenSet_44_;
    public static BitSet tokenSet_45_;
    public static BitSet tokenSet_46_;
    public static BitSet tokenSet_47_;
    public static BitSet tokenSet_48_;
    public static BitSet tokenSet_49_;
    public static BitSet tokenSet_50_;
    public static BitSet tokenSet_51_;
    public static BitSet tokenSet_52_;
    public static BitSet tokenSet_53_;
    public static BitSet tokenSet_54_;
    public static BitSet tokenSet_55_;
    public static BitSet tokenSet_56_;
    public static BitSet tokenSet_57_;
    public static BitSet tokenSet_58_;
    public static BitSet tokenSet_59_;
    public static BitSet tokenSet_60_;
    public static BitSet tokenSet_61_;
    public static BitSet tokenSet_62_;
    public static BitSet tokenSet_63_;
    public static BitSet tokenSet_64_;
    public static BitSet tokenSet_65_;
    public static BitSet tokenSet_66_;
    public static BitSet tokenSet_67_;
    public static BitSet tokenSet_68_;
    public static BitSet tokenSet_69_;
    public static BitSet tokenSet_70_;
    public static BitSet tokenSet_71_;
    public static BitSet tokenSet_72_;
    public static BitSet tokenSet_73_;
    public static BitSet tokenSet_74_;
    public static BitSet tokenSet_75_;
    public static BitSet tokenSet_76_;
    public static BitSet tokenSet_77_;
    public static BitSet tokenSet_78_;
    public static BitSet tokenSet_79_;
    public static BitSet tokenSet_80_;
    public static BitSet tokenSet_81_;
    public static BitSet tokenSet_82_;
    public static BitSet tokenSet_83_;
    public static BitSet tokenSet_84_;
    public static BitSet tokenSet_85_;
    public static BitSet tokenSet_86_;
    public static BitSet tokenSet_87_;
    public static BitSet tokenSet_88_;
    public static BitSet tokenSet_89_;
    public static BitSet tokenSet_90_;
    public static BitSet tokenSet_91_;
    public static BitSet tokenSet_92_;
    public static BitSet tokenSet_93_;
    public static BitSet tokenSet_94_;
    public static BitSet tokenSet_95_;
    public static BitSet tokenSet_96_;
    public static BitSet tokenSet_97_;
    public static BitSet tokenSet_98_;
    public static BitSet tokenSet_99_;
    public static BitSet tokenSet_100_;
    public static BitSet tokenSet_101_;
    public static BitSet tokenSet_102_;
    public static BitSet tokenSet_103_;
    public static BitSet tokenSet_104_;
    public static BitSet tokenSet_105_;
    public static BitSet tokenSet_106_;
    public static BitSet tokenSet_107_;
    public static BitSet tokenSet_108_;
    public static BitSet tokenSet_109_;
    public static BitSet tokenSet_110_;
    public static BitSet tokenSet_111_;
    public static BitSet tokenSet_112_;
    public static BitSet tokenSet_113_;
    public static BitSet tokenSet_114_;
    public static BitSet tokenSet_115_;
    public static BitSet tokenSet_116_;
    public static BitSet tokenSet_117_;
    public static BitSet tokenSet_118_;
    public static BitSet tokenSet_119_;
    public static BitSet tokenSet_120_;
    public static BitSet tokenSet_121_;
    public static BitSet tokenSet_122_;
    public static BitSet tokenSet_123_;
    public static BitSet tokenSet_124_;
    public static BitSet tokenSet_125_;
    public static BitSet tokenSet_126_;
    public static BitSet tokenSet_127_;
    public static BitSet tokenSet_128_;
    public static BitSet tokenSet_129_;
    public static BitSet tokenSet_130_;
    public static BitSet tokenSet_131_;
    public static BitSet tokenSet_132_;
    public static BitSet tokenSet_133_;
    public static BitSet tokenSet_134_;
    public static BitSet tokenSet_135_;
    public static BitSet tokenSet_136_;
    public static BitSet tokenSet_137_;
    public static BitSet tokenSet_138_;
    public static BitSet tokenSet_139_;
    public static BitSet tokenSet_140_;
    public static BitSet tokenSet_141_;
    public static BitSet tokenSet_142_;
    public static BitSet tokenSet_143_;
    public static BitSet tokenSet_144_;
    public static BitSet tokenSet_145_;
    public static BitSet tokenSet_146_;
    public static BitSet tokenSet_147_;
    public static BitSet tokenSet_148_;
    public static BitSet tokenSet_149_;
    public static BitSet tokenSet_150_;
    public static BitSet tokenSet_151_;
    public static BitSet tokenSet_152_;
    public static BitSet tokenSet_153_;
    public static BitSet tokenSet_154_;
    public static BitSet tokenSet_155_;
    public static BitSet tokenSet_156_;
    public static BitSet tokenSet_157_;
    public static BitSet tokenSet_158_;
    public static BitSet tokenSet_159_;
    public static BitSet tokenSet_160_;
    public static BitSet tokenSet_161_;
    public static BitSet tokenSet_162_;
    public static BitSet tokenSet_163_;
    public static BitSet tokenSet_164_;
    public static BitSet tokenSet_165_;
    public static BitSet tokenSet_166_;
    public static BitSet tokenSet_167_;
    public static BitSet tokenSet_168_;
    public static BitSet tokenSet_169_;
    public static BitSet tokenSet_170_;
    public static BitSet tokenSet_171_;
    public static BitSet tokenSet_172_;
    public static BitSet tokenSet_173_;
    public static BitSet tokenSet_174_;
    public static BitSet tokenSet_175_;
    public static BitSet tokenSet_176_;
    public static BitSet tokenSet_177_;
    public static BitSet tokenSet_178_;
    public static BitSet tokenSet_179_;
    public static BitSet tokenSet_180_;
    public static BitSet tokenSet_181_;
    public static BitSet tokenSet_182_;
    public static BitSet tokenSet_183_;
    public static BitSet tokenSet_184_;
    public static BitSet tokenSet_185_;
    public static BitSet tokenSet_186_;
    public static BitSet tokenSet_187_;
    public static BitSet tokenSet_188_;
    public static BitSet tokenSet_189_;
    public static BitSet tokenSet_190_;
    public static BitSet tokenSet_191_;
    public static BitSet tokenSet_192_;
    public static BitSet tokenSet_193_;
    public static BitSet tokenSet_194_;
    public static BitSet tokenSet_195_;
    public static BitSet tokenSet_196_;
    public static BitSet tokenSet_197_;
    public static BitSet tokenSet_198_;
    public static BitSet tokenSet_199_;
    public static BitSet tokenSet_200_;
    public TSql130ParserInternal(bool initialQuotedIdentifiersOn);
    protected TSql130ParserInternal(TokenBuffer tokenBuf, int k);
    public TSql130ParserInternal(TokenBuffer tokenBuf);
    protected TSql130ParserInternal(TokenStream lexer, int k);
    public TSql130ParserInternal(TokenStream lexer);
    public TSql130ParserInternal(ParserSharedInputState state);
    private static TSql130ParserInternal();
    protected void initialize();
    public ChildObjectName entryPointChildObjectName();
    public ChildObjectName childObjectNameWithThreePrefixes();
    public SchemaObjectName entryPointSchemaObjectName();
    public SchemaObjectName schemaObjectFourPartName();
    public DataTypeReference entryPointScalarDataType();
    public DataTypeReference scalarDataType();
    public ScalarExpression entryPointExpression();
    public ScalarExpression expression();
    public BooleanExpression entryPointBooleanExpression();
    public BooleanExpression booleanExpression();
    public StatementList entryPointStatementList();
    public StatementList statementList(Boolean& vParseErrorOccurred);
    public SelectStatement entryPointSubqueryExpressionWithOptionalCTE();
    public SelectFunctionReturnType functionReturnClauseRelational();
    public IPv4 entryPointIPv4Address();
    public IPv4 ipAddressV4();
    public TSqlFragment entryPointConstantOrIdentifier();
    public ScalarExpression possibleNegativeConstantOrIdentifier();
    public TSqlFragment entryPointConstantOrIdentifierWithDefault();
    public ScalarExpression possibleNegativeConstantOrIdentifierWithDefault();
    public TSqlScript script();
    public TSqlBatch batch();
    public TSqlStatement lastStatementOptSemi();
    public ExecuteStatement optSimpleExecute();
    public TSqlStatement statementOptSemi();
    public TSqlStatement statement();
    public void optSemicolons(TSqlStatement vParent);
    public TSqlStatement lastStatement();
    public RenameEntityStatement renameEntityStatement();
    public Identifier securityStatementPermission();
    public SchemaObjectName schemaObjectThreePartName();
    public Identifier identifier();
    public void ctasCreateTableStatement(CreateTableStatement vParent);
    public void columnNameList(TSqlFragment vParent, IList`1<Identifier> columnNames);
    public void withTableOptions(CreateTableStatement vParent);
    public SelectStatement selectStatement(SubDmlFlags subDmlFlags);
    public void ctasCreateExternalTableStatement(CreateExternalTableStatement vParent);
    public void withExternalTableOptions(CreateExternalTableStatement vParent);
    public ExecutableProcedureReference execProc();
    public CreateTableStatement createTableStatement();
    public AlterTableStatement alterTableStatement();
    public TSqlStatement createIndexStatement();
    public CopyStatement copyStatement();
    public TSqlStatement declareStatements();
    public TSqlStatement setStatements();
    public TSqlStatement beginStatements();
    public BreakStatement breakStatement();
    public ContinueStatement continueStatement();
    public IfStatement ifStatement();
    public WhileStatement whileStatement();
    public LabelStatement labelStatement();
    public TSqlStatement backupStatements();
    public TSqlStatement restoreStatements();
    public GoToStatement gotoStatement();
    public SaveTransactionStatement saveTransactionStatement();
    public RollbackTransactionStatement rollbackTransactionStatement();
    public CommitTransactionStatement commitTransactionStatement();
    public CreateStatisticsStatement createStatisticsStatement();
    public UpdateStatisticsStatement updateStatisticsStatement();
    public TSqlStatement alterDatabaseStatements();
    public ExecuteStatement executeStatement();
    public StatementWithCtesAndXmlNamespaces withCommonTableExpressionsAndXmlNamespacesStatements();
    public RaiseErrorStatement raiseErrorStatement();
    public TSqlStatement alter2005Statements();
    public TSqlStatement create2005Statements();
    public TSqlStatement createDatabaseStatements();
    public TSqlStatement addStatements();
    public TSqlStatement identifierStatements();
    public PrintStatement printStatement();
    public WaitForStatement waitForStatement();
    public ReadTextStatement readTextStatement();
    public UpdateTextStatement updateTextStatement();
    public WriteTextStatement writeTextStatement();
    public LineNoStatement lineNoStatement();
    public UseStatement useStatement();
    public TSqlStatement killStatements();
    public BulkInsertStatement bulkInsertStatement();
    public InsertBulkStatement insertBulkStatement();
    public CheckpointStatement checkpointStatement();
    public ReconfigureStatement reconfigureStatement();
    public ShutdownStatement shutdownStatement();
    public SetUserStatement setUserStatement();
    public TruncateTableStatement truncateTableStatement();
    public GrantStatement grantStatement90();
    public DenyStatement denyStatement90();
    public RevokeStatement revokeStatement90();
    public ReturnStatement returnStatement();
    public TSqlStatement openStatements();
    public TSqlStatement closeStatements();
    public DeallocateCursorStatement deallocateCursorStatement();
    public FetchCursorStatement fetchCursorStatement();
    public TSqlStatement dropStatements();
    public DbccStatement dbccStatement();
    public RevertStatement revertStatement();
    public ExecuteAsStatement executeAsStatement();
    public EndConversationStatement endConversationStatement();
    public WithCtesAndXmlNamespaces withCommonTableExpressionsAndXmlNamespaces();
    public SelectStatement select(SubDmlFlags subDmlFlags);
    public DeleteStatement deleteStatement(SubDmlFlags subDmlFlags);
    public InsertStatement insertStatement(SubDmlFlags subDmlFlags);
    public UpdateStatement updateStatement(SubDmlFlags subDmlFlags);
    public MergeStatement mergeStatement(SubDmlFlags subDmlFlags);
    public CreateProcedureStatement createProcedureStatement();
    public AlterProcedureStatement alterProcedureStatement();
    public CreateTriggerStatement createTriggerStatement();
    public AlterTriggerStatement alterTriggerStatement();
    public CreateDefaultStatement createDefaultStatement();
    public CreateRuleStatement createRuleStatement();
    public CreateViewStatement createViewStatement();
    public AlterViewStatement alterViewStatement();
    public CreateFunctionStatement createFunctionStatement();
    public AlterFunctionStatement alterFunctionStatement();
    public CreateSchemaStatement createSchemaStatement();
    public TSqlStatement createIdentifierStatement();
    public TSqlStatement alterIdentifierStatement();
    public UseFederationStatement useFederationStatement();
    public TSqlStatement createOrAlterStatements();
    public CreateViewStatement createMaterializedViewStatement();
    public CreateFederationStatement createFederationStatement();
    public AlterViewStatement alterMaterializedViewStatement();
    public AlterFederationStatement alterFederationStatement();
    public CreateOrAlterFunctionStatement createOrAlterFunctionStatement();
    public CreateOrAlterProcedureStatement createOrAlterProcedureStatement();
    public CreateOrAlterTriggerStatement createOrAlterTriggerStatement();
    public CreateOrAlterViewStatement createOrAlterViewStatement();
    public EnableDisableTriggerStatement disableTriggerStatement();
    public EnableDisableTriggerStatement enableTriggerStatement();
    public MoveConversationStatement moveConversationStatement();
    public GetConversationGroupStatement getConversationGroupStatement();
    public ReceiveStatement receiveStatement();
    public SendStatement sendStatement();
    public ThrowStatement throwStatement();
    public void enableDisableTriggerBody(EnableDisableTriggerStatement vParent);
    public TriggerObject triggerObject();
    public CreateAggregateStatement createAggregateStatement();
    public CreateApplicationRoleStatement createApplicationRoleStatement();
    public CreateAssemblyStatement createAssemblyStatement();
    public CreateAsymmetricKeyStatement createAsymmetricKeyStatement();
    public CreateAvailabilityGroupStatement createAvailabilityGroupStatement();
    public CreateBrokerPriorityStatement createBrokerPriorityStatement();
    public CreateCertificateStatement createCertificateStatement();
    public TSqlStatement createColumnStatements();
    public CreateColumnStoreIndexStatement createColumnStoreIndexStatement(IToken tUnique, Nullable`1<bool> isClustered);
    public CreateContractStatement createContractStatement();
    public CreateCredentialStatement createCredentialStatement();
    public CreateCryptographicProviderStatement createCryptographicProviderStatement();
    public CreateEndpointStatement createEndpointStatement();
    public TSqlStatement createEventStatement();
    public TSqlStatement createExternalStatements();
    public TSqlStatement createFulltextStatement();
    public IndexStatement createPrimaryXmlIndexStatement();
    public CreateSelectiveXmlIndexStatement createSelectiveXmlIndexStatement();
    public TSqlStatement createXmlStatements();
    public CreateLoginStatement createLoginStatement();
    public CreateMessageTypeStatement createMessageTypeStatement();
    public CreateMasterKeyStatement createMasterKeyStatement();
    public TSqlStatement createPartitionStatement();
    public CreateQueueStatement createQueueStatement();
    public CreateRemoteServiceBindingStatement createRemoteServiceBindingStatement();
    public CreateResourcePoolStatement createResourcePoolStatement();
    public CreateRoleStatement createRoleStatement();
    public CreateRouteStatement createRouteStatement();
    public CreateSearchPropertyListStatement createSearchPropertyListStatement();
    public CreateServiceStatement createServiceStatement();
    public CreateSpatialIndexStatement createSpatialIndexStatement();
    public CreateSymmetricKeyStatement createSymmetricKeyStatement();
    public CreateSynonymStatement createSynonymStatement();
    public CreateTypeStatement createTypeStatement();
    public TSqlStatement createServerStatements();
    public TSqlStatement createWorkloadStatements();
    public CreateSequenceStatement createSequenceStatement();
    public CreateSecurityPolicyStatement createSecurityPolicyStatement();
    public CreateUserStatement createUserStatement();
    public ProcedureParameter aggregateParameter();
    public AssemblyName assemblyName();
    public Identifier identifierVariable();
    public NullableConstraintDefinition nullableConstraint();
    public void applicationRoleStatement(ApplicationRoleStatement vParent, bool defaultSchemaAndPasswordOnly);
    public void authorizationOpt(IAuthorization vParent);
    public void expressionList(TSqlFragment vParent, IList`1<ScalarExpression> expressions);
    public PermissionSetAssemblyOption assemblyPermissionSetOption(IToken tPermissionSetVisibility);
    public void createAsymmetricKeyParams(CreateAsymmetricKeyStatement vParent);
    public Literal encryptClause();
    public EncryptionSource asymKeySource();
    public void asymKeySpec(CreateAsymmetricKeyStatement vParent);
    public FileEncryptionSource fileEncryptionSource();
    public AssemblyEncryptionSource assemblyEncryptionSource();
    public ProviderEncryptionSource providerEncryptionSource();
    public void providerKeySourceOptions(IList`1<KeyOption> optionsList, TSqlFragment vParent);
    public StringLiteral stringLiteral();
    public void createCertificateParams(CreateCertificateStatement vParent);
    public void createCertificateActivityFlag(CertificateStatementBase vParent);
    public void certificateSource(CreateCertificateStatement vParent);
    public CertificateOption certificateOption(CertificateOptionKinds encountered);
    public OptionState optionOnOff(TSqlFragment vParent);
    public void privateKeySpec(CertificateStatementBase vParent);
    public void certificatePrivateKeySpec(CertificateStatementBase vParent);
    public void passwordChangeOption(IPasswordChangeOption vParent);
    public ContractMessage contractMessage();
    public CreateCredentialStatement createDatabaseScopedCredentialStatement();
    public void credentialStatementBody(CredentialStatement vParent);
    public TSqlStatement createServerAuditStatements();
    public CreateServerRoleStatement createServerRoleStatement();
    public CreateServerAuditSpecificationStatement createServerAuditSpecificationStatement();
    public CreateServerAuditStatement createServerAuditStatement();
    public AuditTarget auditTargetClause(bool filePathRequired);
    public void auditCreateWithClause(ServerAuditStatement vParent);
    public BooleanExpression eventBooleanExpression();
    public AuditTargetOption auditFileOption();
    public MaxSizeAuditTargetOption maxSizeAuditFileOption();
    public MaxRolloverFilesAuditTargetOption maxRolloverFilesAuditFileOption();
    public OnOffAuditTargetOption reserveDiskSpaceAuditFileOption();
    public LiteralAuditTargetOption maxFilesAuditFileOption();
    public LiteralAuditTargetOption filePathAuditFileOption();
    public IntegerLiteral integer();
    public AuditOption auditCreateOption();
    public void auditWithClause(ServerAuditStatement vParent);
    public AuditOption auditOption();
    public QueueDelayAuditOption queueDelayAuditOption(IToken tOption);
    public OnFailureAuditOption onFailureAuditOption(IToken tOption);
    public AuditGuidAuditOption auditGuidAuditOption(IToken tOption);
    public StateAuditOption stateAuditOption(IToken tOption);
    public void auditSpecificationForClause(AuditSpecificationStatement vParent);
    public AuditSpecificationPart createAuditSpecificationDetail();
    public void auditSpecificationStateOpt(AuditSpecificationStatement vParent);
    public TSqlStatement alterServerStatements();
    public TSqlStatement alterServerAuditStatements();
    public TSqlStatement alterServerConfigurationStatement();
    public AlterServerRoleStatement alterServerRoleStatement();
    public AlterServerAuditSpecificationStatement alterServerAuditSpecificationStatement();
    public AlterServerAuditStatement alterServerAuditStatement();
    public AuditSpecificationPart auditSpecificationDetail();
    public AlterServerConfigurationStatement alterServerConfigurationSetProcessAffinityStatement();
    public AlterServerConfigurationSetBufferPoolExtensionStatement alterServerConfigurationSetBufferPoolExtensionStatement();
    public AlterServerConfigurationSetDiagnosticsLogStatement alterServerConfigurationSetDiagnosticsLogStatement();
    public AlterServerConfigurationSetFailoverClusterPropertyStatement alterServerConfigurationSetFailoverClusterPropertyStatement();
    public AlterServerConfigurationSetHadrClusterStatement alterServerConfigurationSetHadrClusterStatement();
    public AlterServerConfigurationSetSoftNumaStatement alterServerConfigurationSetSoftNumaStatement();
    public AlterServerConfigurationSoftNumaOption alterServerConfigurationSoftNumaOption();
    public OnOffOptionValue onOffOptionValue();
    public AlterServerConfigurationBufferPoolExtensionContainerOption alterServerConfigurationBufferPoolExtensionContainerOption();
    public AlterServerConfigurationBufferPoolExtensionOption alterServerConfigurationBufferPoolExtensionFileNameOption();
    public AlterServerConfigurationBufferPoolExtensionSizeOption alterServerConfigurationBufferPoolExtensionSizeOption();
    public LiteralOptionValue stringLiteralOptionValue();
    public LiteralOptionValue integerLiteralOptionValue();
    public MemoryUnit memUnit(TSqlFragment vParent);
    public AlterServerConfigurationDiagnosticsLogOption alterServerConfigurationDiagnosticsLogOption();
    public AlterServerConfigurationDiagnosticsLogMaxSizeOption alterServerConfigurationDiagnosticsLogMaxSizeOption();
    public LiteralOptionValue stringOrDefaultLiteralOptionValue();
    public LiteralOptionValue integerOrDefaultLiteralOptionValue();
    public LiteralOptionValue defaultLiteralOptionValue();
    public AlterServerConfigurationFailoverClusterPropertyOption alterServerConfigurationFailoverClusterPropertyOption();
    public LiteralOptionValue binaryOrDefaultLiteralOptionValue();
    public AlterServerConfigurationHadrClusterOption alterServerConfigurationHadrClusterOption();
    public void affinityRangeList(AlterServerConfigurationStatement vParent);
    public ProcessAffinityRange affinityRange();
    public AlterDatabaseAuditSpecificationStatement alterDatabaseAuditSpecification(IToken tAlter);
    public AlterCredentialStatement alterDatabaseScopedCredentialStatement(IToken tAlter);
    public AlterDatabaseScopedConfigurationStatement alterDatabaseScopedConfigurationStatement(IToken tAlter);
    public AlterDatabaseStatement alterDatabase(IToken tAlter);
    public AlterDatabaseEncryptionKeyStatement alterDatabaseEncryptionKey(IToken tAlter);
    public AlterDatabaseScopedConfigurationSetStatement alterDatabaseScopedConfigSet(bool forSecondary);
    public AlterDatabaseScopedConfigurationClearStatement alterDatabaseScopedConfigClear();
    public DatabaseConfigurationClearOption databaseConfigurationClearOption();
    public MaxDopConfigurationOption alterDatabaseScopedMaxDopOption(bool forSecondary);
    public OnOffPrimaryConfigurationOption alterDatabaseScopedOnOffPrimaryOption(bool forSecondary);
    public DatabaseConfigurationOptionState databaseConfigurationOptionOnOffPrimary(TSqlFragment vParent);
    public SqlCommandIdentifier sqlCommandIdentifier();
    public AlterDatabaseStatement alterDbAdd();
    public AlterDatabaseStatement alterDbRemove();
    public AlterDatabaseStatement alterDbModify();
    public AlterDatabaseSetStatement alterDbSet();
    public AlterDatabaseCollateStatement alterDbCollate();
    public AlterDatabaseRebuildLogStatement alterDbRebuild();
    public void collation(ICollationSetter vParent);
    public FileDeclaration fileDecl(bool isAlterDbModifyFileStatement);
    public AlterDatabaseAddFileStatement alterDbAddFile();
    public AlterDatabaseAddFileGroupStatement alterDbAddFilegroup();
    public void fileDeclBodyList(TSqlFragment vParent, IList`1<FileDeclaration> fileDeclarations);
    public Identifier toFilegroup();
    public AlterDatabaseModifyFileGroupStatement alterDbModifyFilegroup();
    public AlterDatabaseModifyFileStatement alterDbModifyFile();
    public AlterDatabaseSetStatement alterDbModifyAzureOptions();
    public void azureOptions(TSqlFragment vParent, IList`1<DatabaseOption> vOptions);
    public AlterDatabaseTermination xactTermination();
    public AlterDatabaseSetStatement dbOptionStateList();
    public DatabaseOption dbOptionStateItem(UInt64& encounteredOptions);
    public CursorDefaultDatabaseOption cursorDefaultDbOption();
    public RecoveryDatabaseOption recoveryDbOption();
    public TargetRecoveryTimeDatabaseOption targetRecoveryTimeDbOption();
    public PageVerifyDatabaseOption pageVerifyDbOption();
    public PartnerDatabaseOption partnerOption();
    public WitnessDatabaseOption witnessOption();
    public ParameterizationDatabaseOption parameterizationOption();
    public LiteralDatabaseOption compatibilityLevelDbOption();
    public ChangeTrackingDatabaseOption changeTrackingDbOption();
    public ContainmentDatabaseOption dbContainmentOption();
    public DatabaseOption hadrDbOption();
    public DelayedDurabilityDatabaseOption dbDelayedDurabilityOption();
    public AutoCreateStatisticsDatabaseOption autoCreateStatisticsDbOption();
    public RemoteDataArchiveDatabaseOption remoteDataArchiveDbOption();
    public DatabaseOption createAlterDbOption(UInt64& encounteredOptions);
    public QueryStoreDatabaseOption queryStoreDbOption();
    public DatabaseOption dbSingleIdentOption();
    public OnOffDatabaseOption alterDbOnOffOption();
    public void changeTrackingOnOptions(ChangeTrackingDatabaseOption vParent);
    public ChangeTrackingOptionDetail changeTrackingOneOption(Boolean& autoCleanupEncountered, Boolean& changeRetentionEncountered);
    public void queryStoreOnOptions(QueryStoreDatabaseOption vParent);
    public QueryStoreOption queryStoreOneOption();
    public QueryStoreDesiredStateOption queryStoreDesiredStateOption();
    public QueryStoreCapturePolicyOption queryStoreCaptureModeOption();
    public QueryStoreSizeCleanupPolicyOption queryStoreSizeCleanupModeOption();
    public QueryStoreDataFlushIntervalOption queryStoreDataFlushIntervalOption();
    public QueryStoreIntervalLengthOption queryStoreIntervalLengthOption();
    public QueryStoreMaxStorageSizeOption queryStoreMaxQdsSizeOption();
    public QueryStoreMaxPlansPerQueryOption queryStoreMaxPlansPerQueryOption();
    public QueryStoreTimeCleanupPolicyOption queryStoreTimeCleanupPolicy();
    public HadrAvailabilityGroupDatabaseOption hadrAvailabilityDbOption();
    public HadrDatabaseOption simpleHadrDbOption();
    public AuditSpecificationPart auditSpecificationDetailDb();
    public CryptoMechanism dekEncryptor();
    public AddSensitivityClassificationStatement addSensitivityClassificationStatement();
    public ColumnReferenceExpression column();
    public SensitivityClassificationOption sensitivityClassificationOption();
    public StringLiteral nonEmptyString();
    public DropSensitivityClassificationStatement dropSensitivityClassificationStatement();
    public CreateDatabaseAuditSpecificationStatement createDatabaseAuditSpecification();
    public CreateDatabaseStatement createDatabase();
    public CreateDatabaseEncryptionKeyStatement createDatabaseEncryptionKey();
    public void azureAsCopyOf(CreateDatabaseStatement vParent);
    public void recoveryUnitList(CreateDatabaseStatement vParent);
    public void collationOpt(ICollationSetter vParent);
    public void dbAddendums(CreateDatabaseStatement vParent);
    public void withCreateDbOptions(CreateDatabaseStatement vParent);
    public DatabaseOption azureOption();
    public MaxSizeDatabaseOption azureMaxSizeDatabaseOption();
    public LiteralDatabaseOption azureEditionDatabaseOption();
    public LiteralDatabaseOption azureServiceObjectiveDatabaseOption();
    public MultiPartIdentifier multiPartIdentifier(int vMaxNumber);
    public void onDisk(CreateDatabaseStatement vParent);
    public FileGroupDefinition fileGroupDecl();
    public FileDeclaration fileDeclBody(bool isAlterDbModifyFileStatement);
    public FileDeclarationOption fileOption(bool newNameAllowed);
    public NameFileDeclarationOption nameFileOption();
    public FileNameFileDeclarationOption fileNameFileOption();
    public SizeFileDeclarationOption sizeFileOption();
    public MaxSizeFileDeclarationOption maxSizeFileOption();
    public FileGrowthFileDeclarationOption fileGrowthFileOption();
    public NameFileDeclarationOption newNameFileOption();
    public FileDeclarationOption offlineFileOption();
    public IdentifierOrValueExpression nonEmptyStringOrIdentifier();
    public DatabaseOption createDbServiceBrokerOption();
    public DatabaseOption restrictedUserCreateDbOption();
    public OnOffDatabaseOption createDbOnOffOption();
    public FileStreamDatabaseOption fileStreamCreateAlterDbOption();
    public DatabaseOption createAlterDbEqualsSignOption();
    public LiteralDatabaseOption createAlterDbLiteralOption(IToken tOption);
    public IdentifierDatabaseOption createAlterDbIdentifierOption(IToken tOption);
    public OnOffDatabaseOption createAlterDbOnOffOption(IToken tOption);
    public void fileStreamOption(FileStreamDatabaseOption vParent);
    public Literal stringLiteralOrNull();
    public void remoteDataArchiveDbSettingsList(RemoteDataArchiveDatabaseOption vParent);
    public RemoteDataArchiveDatabaseSetting remoteDataArchiveDbSetting(Identifier& rdaOptionIdentifier);
    public AuditSpecificationPart createAuditSpecificationDetailDb();
    public AuditActionSpecification auditActionSpecification();
    public AuditActionGroupReference databaseAuditActionGroup();
    public AuditActionGroupReference serverAuditActionGroup();
    public DatabaseAuditAction actionWithQual();
    public SecurityTargetObject securityTargetObject(bool vColumnsDisallowed);
    public SecurityPrincipal principal();
    public void dekEncryptorType(CryptoMechanism vParent);
    public BackupCertificateStatement backupCertificateStatement();
    public BackupServiceMasterKeyStatement backupServiceMasterKeyStatement();
    public BackupMasterKeyStatement backupMasterKeyStatement();
    public BackupStatement backupStatement();
    public BackupStatement backupMain();
    public void backupDevices(BackupStatement vParent);
    public void backupOptions(BackupStatement vParent);
    public RestoreServiceMasterKeyStatement restoreServiceMasterKeyStatement();
    public RestoreMasterKeyStatement restoreMasterKeyStatement();
    public RestoreStatement restoreStatement();
    public void restoreMain(RestoreStatement vParent);
    public void devList(TSqlFragment vParent, IList`1<DeviceInfo> deviceInfos);
    public void restoreOptions(RestoreStatement vParent);
    public BackupDatabaseStatement backupDatabase();
    public BackupTransactionLogStatement backupTransactionLog();
    public IdentifierOrValueExpression identifierOrVariable();
    public void backupFileListOpt(BackupDatabaseStatement vParent);
    public BackupRestoreFileInfo backupRestoreFile();
    public void restoreFileListOpt(RestoreStatement vParent);
    public ValueExpression stringOrVariable();
    public void backupRestoreFileNameList(BackupRestoreFileInfo vParent);
    public MirrorToClause mirrorTo();
    public DeviceInfo deviceInfo();
    public BackupOption backupOption();
    public BackupEncryptionOption backupEncryptionOption();
    public ScalarExpression signedIntegerOrVariable();
    public CryptoMechanism backupEncrytor();
    public void restoreOptionsList(RestoreStatement vParent);
    public RestoreOption restoreOption();
    public FileStreamRestoreOption fileStreamRestoreOption();
    public RestoreOption simpleRestoreOption();
    public ValueExpression afterClause();
    public ScalarExpression signedInteger();
    public MoveRestoreOption moveRestoreOption();
    public ScalarExpressionRestoreOption fileRestoreOption();
    public void backupMasterKeyBody(BackupRestoreMasterKeyStatementBase vParent);
    public void restoreMasterKeyBody(BackupRestoreMasterKeyStatementBase vParent);
    public IdentifierOrValueExpression bulkInsertFrom();
    public void bulkInsertOptions(BulkInsertStatement vParent);
    public IdentifierOrValueExpression stringOrIdentifier();
    public BulkInsertOption bulkInsertOption();
    public OrderBulkInsertOption bulkInsertSortOrderOption();
    public LiteralBulkInsertOption simpleBulkInsertOptionWithValue();
    public BulkInsertOption simpleBulkInsertOptionNoValue();
    public BulkInsertOption insertBulkOption();
    public BulkInsertOption simpleInsertBulkOption();
    public Literal integerOrNumeric();
    public void coldefList(InsertBulkStatement vParent);
    public void insertBulkOptions(InsertBulkStatement vParent);
    public InsertBulkColumnDefinition coldefItem();
    public ColumnDefinitionBase columnDefinitionEx();
    public bool nullNotNull(TSqlFragment vParent);
    public ColumnWithSortOrder columnWithSortOrder();
    public OrderBulkInsertOption openRowsetBulkOrderHint();
    public void dbccNamedLiteralList(DbccStatement vParent);
    public void dbccOptions(DbccStatement vParent);
    public void dbccOptionsList(DbccStatement vParent);
    public void dbccOptionsListItems(DbccStatement vParent);
    public void dbccOptionsJoin(DbccStatement vParent);
    public DbccOption dbccOption();
    public DbccOption dbccJoinOption();
    public DbccNamedLiteral dbccNamedLiteral();
    public void endpointOptions(AlterCreateEndpointStatementBase vParent);
    public void protocolInfo(AlterCreateEndpointStatementBase vParent);
    public void payloadInfo(AlterCreateEndpointStatementBase vParent);
    public void endpointOption(AlterCreateEndpointStatementBase vParent);
    public void endpointState(AlterCreateEndpointStatementBase vParent);
    public void endpointAffinity(AlterCreateEndpointStatementBase vParent);
    public EndpointProtocolOption protocolOptionsItem(EndpointProtocol protocol, EndpointProtocolOptions encountered);
    public ListenerIPEndpointProtocolOption listenerIpProtocolOption(EndpointProtocol protocol, EndpointProtocolOptions encountered);
    public LiteralEndpointProtocolOption listenerPortProtocolOption(EndpointProtocol protocol, EndpointProtocolOptions encountered);
    public LiteralEndpointProtocolOption pathProtocolOption(EndpointProtocol protocol, EndpointProtocolOptions encountered);
    public LiteralEndpointProtocolOption siteProtocolOption(EndpointProtocol protocol, EndpointProtocolOptions encountered);
    public LiteralEndpointProtocolOption clearPortProtocolOption(EndpointProtocol protocol, EndpointProtocolOptions encountered);
    public LiteralEndpointProtocolOption sslPortProtocolOption(EndpointProtocol protocol, EndpointProtocolOptions encountered);
    public AuthenticationEndpointProtocolOption authenticationProtocolOption(EndpointProtocol protocol, EndpointProtocolOptions encountered);
    public PortsEndpointProtocolOption portsProtocolOption(EndpointProtocol protocol, EndpointProtocolOptions encountered);
    public LiteralEndpointProtocolOption authenticationRealmProtocolOption(EndpointProtocol protocol, EndpointProtocolOptions encountered);
    public LiteralEndpointProtocolOption defaultLogonDomainProtocolOption(EndpointProtocol protocol, EndpointProtocolOptions encountered);
    public CompressionEndpointProtocolOption compressionProtocolOption(EndpointProtocol protocol, EndpointProtocolOptions encountered);
    public void ipV4DotNumberTail(IPv4 vParent);
    public void ipV4DotLastTwoPartsTail(IPv4 vParent);
    public void ipV4NumericOrNumericIntegerTail(IPv4 vParent);
    public PayloadOption payloadOption(EndpointType type, PayloadOptionKinds encountered);
    public SoapMethod soapMethod(EndpointType type, PayloadOptionKinds encountered);
    public EnabledDisabledPayloadOption batchesPayloadOption(EndpointType type, PayloadOptionKinds encountered);
    public WsdlPayloadOption wsdlPayloadOption(EndpointType type, PayloadOptionKinds encountered);
    public EnabledDisabledPayloadOption sessionsPayloadOption(EndpointType type, PayloadOptionKinds encountered);
    public LoginTypePayloadOption loginTypePayloadOption(EndpointType type, PayloadOptionKinds encountered);
    public SessionTimeoutPayloadOption sessionTimeoutPayloadOption(EndpointType type, PayloadOptionKinds encountered);
    public LiteralPayloadOption databasePayloadOption(EndpointType type, PayloadOptionKinds encountered);
    public LiteralPayloadOption namespacePayloadOption(EndpointType type, PayloadOptionKinds encountered);
    public SchemaPayloadOption schemaPayloadOption(EndpointType type, PayloadOptionKinds encountered);
    public CharacterSetPayloadOption characterSetPayloadOption(EndpointType type, PayloadOptionKinds encountered);
    public LiteralPayloadOption headerLimitPayloadOption(EndpointType type, PayloadOptionKinds encountered);
    public AuthenticationPayloadOption authenticationPayloadOption(EndpointType type, PayloadOptionKinds encountered);
    public EncryptionPayloadOption encryptionPayloadOption(EndpointType type, PayloadOptionKinds encountered);
    public EnabledDisabledPayloadOption messageForwardingPayloadOption(EndpointType type, PayloadOptionKinds encountered);
    public LiteralPayloadOption messageForwardSizePayloadOption(EndpointType type, PayloadOptionKinds encountered);
    public RolePayloadOption rolePayloadOption(EndpointType type, PayloadOptionKinds encountered);
    public void enabledDisabled(EnabledDisabledPayloadOption vParent);
    public DefaultLiteral defaultLiteral();
    public void soapMethodAlias(SoapMethod vParent);
    public void soapMethodOption(SoapMethod vParent);
    public CreateEventNotificationStatement createEventNotificationStatement();
    public CreateEventSessionStatement createEventSessionStatement();
    public EventNotificationObjectScope eventNotificationObjectScope();
    public EventTypeGroupContainer eventTypeGroupContainer();
    public void eventSessionScope(EventSessionStatement vParent);
    public void eventDeclarationList(EventSessionStatement vParent);
    public void targetDeclarationList(EventSessionStatement vParent);
    public void optSessionOptionList(EventSessionStatement vParent);
    public AlterEventSessionStatement alterEventSessionStatement();
    public void dropEventDeclarationList(AlterEventSessionStatement vParent);
    public void dropTargetDeclarationList(AlterEventSessionStatement vParent);
    public void sessionOptionList(EventSessionStatement vParent);
    public EventDeclaration eventDeclaration();
    public TargetDeclaration targetDeclaration();
    public SessionOption sessionOption();
    public EventSessionObjectName eventSessionNonEmptyThreePartObjectName();
    public void eventDeclarationSetParameters(EventDeclaration vParent);
    public void eventDeclarationActionParameters(EventDeclaration vParent);
    public EventDeclarationSetParameter eventDeclarationSetParameter();
    public LiteralSessionOption maxMemorySessionOption();
    public LiteralSessionOption maxEventSizeSessionOption();
    public OnOffSessionOption trackCausalitySessionOption();
    public OnOffSessionOption startupStateSessionOption();
    public EventRetentionSessionOption eventRetentionSessionOption();
    public MemoryPartitionSessionOption memoryPartitionSessionOption();
    public MaxDispatchLatencySessionOption maxDispatchLatencySessionOption();
    public void integerSessionOptionValue(LiteralSessionOption vParent);
    public void onOffSessionOption(OnOffSessionOption vParent);
    public ScalarExpression eventDeclarationValue();
    public Literal integerOrRealOrNumeric();
    public ParenthesisExpression eventSessionExpressionParenthesis();
    public Literal eventSessionLiteral();
    public NumericLiteral numeric();
    public RealLiteral real();
    public BooleanExpression eventBooleanExpressionOr();
    public BooleanExpression eventBooleanExpressionAnd();
    public BooleanExpression eventBooleanExpressionUnary();
    public BooleanParenthesisExpression eventBooleanExpressionParenthesis();
    public BooleanExpression eventDeclarationPredicateParameter();
    public EventSessionObjectName eventSessionOneOrTwoOrThreePartObjectName();
    public void eventDeclarationCompareFunction(EventDeclarationCompareFunctionParameter vParent);
    public void eventDeclarationComparisonPredicate(BooleanComparisonExpression vParent, EventSessionObjectName vSource);
    public BooleanComparisonType comparisonOperator();
    public CreateFullTextCatalogStatement createFulltextCatalogStatement();
    public CreateFullTextIndexStatement createFulltextIndexStatement();
    public CreateFullTextStopListStatement createFulltextStoplistStatement();
    public OnOffFullTextCatalogOption accentSensitivity();
    public FullTextIndexColumn fulltextIndexColumn();
    public IdentifierOrValueExpression languageTerm();
    public FullTextCatalogAndFileGroup fullTextCatalogAndFileGroup();
    public void createFulltextOptions(CreateFullTextIndexStatement vParent);
    public void createFulltextOptionsList(CreateFullTextIndexStatement vParent);
    public FullTextIndexOption fullTextIndexOption();
    public ChangeTrackingFullTextIndexOption changeTrackingFulltextIndexOption();
    public StopListFullTextIndexOption stoplistFulltextIndexOption();
    public SearchPropertyListFullTextIndexOption searchPropertyListFullTextIndexOption();
    public void requiredSemicolon(TSqlFragment vParent, string vStatement);
    public AlterFullTextStopListStatement alterFulltextStoplistStatement();
    public FullTextStopListAction fulltextStoplistAction();
    public FullTextStopListAction addFulltextStoplistAction();
    public FullTextStopListAction dropFulltextStoplistAction();
    public BinaryLiteral binary();
    public DropFullTextStopListStatement dropFulltextStoplistStatement();
    public AlterSearchPropertyListStatement alterSearchPropertyListStatement();
    public SearchPropertyListAction searchPropertyListAction();
    public AddSearchPropertyListAction addSearchPropertyListAction();
    public DropSearchPropertyListAction dropSearchPropertyListAction();
    public DropSearchPropertyListStatement dropSearchPropertyListStatement();
    public CreateExternalTableStatement createExternalTableStatement();
    public CreateExternalDataSourceStatement createExternalDataSourceStatement();
    public CreateExternalFileFormatStatement createExternalFileFormatStatement();
    public CreateExternalResourcePoolStatement createExternalResourcePoolStatement();
    public TSqlStatement alterExternalStatements();
    public AlterExternalDataSourceStatement alterExternalDataSourceStatement();
    public AlterExternalResourcePoolStatement alterExternalResourcePoolStatement();
    public IndexStatement createXmlIndexStatement(bool vPrimary);
    public XmlNamespaces xmlNamespaces();
    public SelectiveXmlIndexPromotedPath promotedSelectiveXmlIndexPath();
    public void indexOptionList(IndexAffectingStatement statementType, IList`1<IndexOption> optionsList, TSqlFragment vParent);
    public CreateXmlSchemaCollectionStatement createXmlSchemaCollectionStatement();
    public SchemaObjectName schemaObjectNonEmptyTwoPartName();
    public CreateXmlIndexStatement secondaryXmlIndexStatementBody(Identifier vName, SchemaObjectName vSchemaObjectName, Identifier vXmlColumn, IToken tRParen, Identifier vSecondaryXmlIndexName);
    public CreateSelectiveXmlIndexStatement secondarySelectiveXmlIndex(Identifier vName, SchemaObjectName vSchemaObjectName, Identifier vXmlColumn, IToken tRParen, Identifier vSecondaryXmlIndexName);
    public IntegerLiteral maxlengthOption(TSqlFragment vParent);
    public bool singletonOption();
    public SelectiveXmlIndexPromotedPath promotedSelectiveXmlIndexPathInAlter();
    public PasswordCreateLoginSource passwordLoginSource();
    public WindowsCreateLoginSource windowsLoginSource();
    public CertificateCreateLoginSource certificateLoginSource();
    public AsymmetricKeyCreateLoginSource asymmetricKeyLoginSource();
    public Literal loginPassword();
    public void createLoginPasswordOption(PasswordCreateLoginSource vParent);
    public PrincipalOption createLoginParam();
    public OnOffPrincipalOption onOffPrincipalOption(IToken tOption);
    public IdentifierPrincipalOption createLoginParamWin();
    public Identifier createLoginParamCertOpt();
    public void messageTypeValidation(MessageTypeStatementBase vParent);
    public LiteralAvailabilityGroupOption availabilityGroupOption();
    public AvailabilityReplica availabilityReplica();
    public AlterAvailabilityGroupStatement alterAvailabilityGroupStatement();
    public void alterAvailabilityGroupAddDatabase(AlterAvailabilityGroupStatement vResult);
    public void alterAvailabilityGroupRemoveDatabase(AlterAvailabilityGroupStatement vResult);
    public void alterAvailabilityGroupAddReplica(AlterAvailabilityGroupStatement vResult);
    public void alterAvailabilityGroupModifyReplica(AlterAvailabilityGroupStatement vResult);
    public void alterAvailabilityGroupRemoveReplica(AlterAvailabilityGroupStatement vResult);
    public void alterAvailabilityGroupSetOption(AlterAvailabilityGroupStatement vResult);
    public void alterAvailabilityGroupTakeAction(AlterAvailabilityGroupStatement vResult);
    public AvailabilityReplica availabilityReplicaName();
    public AlterAvailabilityGroupFailoverAction alterAvailabilityGroupFailoverAction();
    public AlterAvailabilityGroupAction alterAvailabilityGroupAction();
    public AlterAvailabilityGroupFailoverOption alterAvailabilityGroupFailoverOption();
    public AvailabilityReplicaOption availabilityReplicaOption();
    public AvailabilityModeReplicaOption availabilityModeReplicaOption();
    public FailoverModeReplicaOption failoverModeReplicaOption();
    public SecondaryRoleReplicaOption secondaryRoleReplicaOption();
    public PrimaryRoleReplicaOption primaryRoleReplicaOption();
    public LiteralReplicaOption literalReplicaOption();
    public CreatePartitionFunctionStatement createPartitionFunction();
    public CreatePartitionSchemeStatement createPartitionScheme();
    public PartitionParameterType partitionParameterType();
    public void partitionFunctionTypes(CreatePartitionFunctionStatement vParent);
    public void partitionFunctionRange(CreatePartitionFunctionStatement vParent);
    public void partitionOptionTypes(TablePartitionOptionSpecifications vParent);
    public void partitionTableOptionRange(TablePartitionOptionSpecifications vParent);
    public void queueOptionList(QueueStatement vParent, bool vDropAccepted);
    public UserRemoteServiceBindingOption bindingUserOption();
    public OnOffRemoteServiceBindingOption bindingAnonymousOption();
    public void routeOptionList(RouteStatement vParent);
    public void onQueueClause(AlterCreateServiceStatementBase vParent);
    public ServiceContract serviceContract();
    public AlterServiceStatement alterServiceStatement();
    public void addDropServiceContractList(AlterServiceStatement vParent);
    public ServiceContract addDropServiceContract();
    public void keySpecList(CreateSymmetricKeyStatement vParent);
    public void encryptorListWithNoPassword(SymmetricKeyStatement vParent);
    public void providerKeySourceOptionsOpt(IList`1<KeyOption> optionsList, TSqlFragment vParent);
    public KeyOption keySpec(Boolean& keySourceSpecified, Boolean& algorithmSpecified, Boolean& identityValueSpecified);
    public KeySourceKeyOption keySourceKeySpec(Boolean& keySourceSpecified);
    public AlgorithmKeyOption algorithmKeySpec(Boolean& algorithmSpecified);
    public IdentityValueKeyOption identityValueKeySpec(Boolean& identityValueSpecified);
    public ProviderKeyNameKeyOption providerKeyNameSourceOption(Boolean& providerKeyNameSpecified);
    public CreationDispositionKeyOption creationDispositionSourceOption(Boolean& creationDispositionSpecified);
    public CryptoMechanism cryptoWithNoPasswordOrJustPassword();
    public CryptoMechanism certificateCrypto();
    public CryptoMechanism keyCrypto();
    public CryptoMechanism passwordCrypto();
    public KeyOption providerKeySourceOption(Boolean& algorithmSpecified, Boolean& providerKeyNameSpecified, Boolean& creationDispositionSpecified);
    public AlterSymmetricKeyStatement alterSymmetricKeyStatement();
    public CreateTypeUddtStatement createTypeUddtStatement();
    public CreateTypeUdtStatement createTypeUdtStatement();
    public CreateTypeTableStatement createTypeTableStatement();
    public TableDefinition tableDefinition(IndexAffectingStatement statementType, AlterTableAddTableElementStatement vStatement);
    public void withTypeTableOptions(CreateTypeTableStatement vParent);
    public MemoryOptimizedTableOption memoryOptimizedTableOption();
    public UserLoginOption userLoginOption();
    public PrincipalOption createUserOption(bool vHasUserLoginOption);
    public IdentifierPrincipalOption identifierCreateUserOption(IToken tOption, bool vHasUserLoginOption);
    public LiteralPrincipalOption literalCreateUserOption(IToken tOption, bool vHasUserLoginOption);
    public NullLiteral nullLiteral();
    public AlterApplicationRoleStatement alterApplicationRoleStatement();
    public AlterAssemblyStatement alterAssemblyStatement();
    public AlterAsymmetricKeyStatement alterAsymmetricKeyStatement();
    public AlterAuthorizationStatement alterAuthorizationStatement();
    public AlterBrokerPriorityStatement alterBrokerPriorityStatement();
    public AlterCryptographicProviderStatement alterCryptographicProviderStatement();
    public AlterRemoteServiceBindingStatement alterRemoteServiceBindingStatement();
    public TSqlStatement alterResourceStatement();
    public AlterWorkloadGroupStatement alterWorkloadGroupStatement();
    public AlterCertificateStatement alterCertificateStatement();
    public AlterCredentialStatement alterCredentialStatement();
    public AlterEndpointStatement alterEndpointStatement();
    public TSqlStatement alterFulltextStatement();
    public AlterIndexStatement alterIndexStatement();
    public AlterLoginStatement alterLoginStatement();
    public AlterMasterKeyStatement alterMasterKeyStatement();
    public AlterMessageTypeStatement alterMessageTypeStatement();
    public TSqlStatement alterPartitionStatement();
    public AlterQueueStatement alterQueueStatement();
    public AlterRoleStatement alterRoleStatement();
    public AlterRouteStatement alterRouteStatement();
    public AlterSchemaStatement alterSchemaStatement();
    public AlterSequenceStatement alterSequenceStatement();
    public TSqlStatement alterServiceStatements();
    public AlterUserStatement alterUserStatement();
    public AlterXmlSchemaCollectionStatement alterXmlSchemaCollectionStatement();
    public AlterSecurityPolicyStatement alterSecurityPolicyStatement();
    public AlterColumnEncryptionKeyStatement alterColumnEncryptionKeyStatement();
    public ApplicationRoleOption applicationRoleOption(bool defaultSchemaAndPasswordOnly);
    public ScalarExpression alterAssemblyFromClause();
    public void alterAssemblyWith(AlterAssemblyStatement vParent);
    public void alterAssemblyDropFile(AlterAssemblyStatement vParent);
    public void alterAssemblyAddFile(AlterAssemblyStatement vParent);
    public AssemblyOption alterAssemblyWithItem();
    public AssemblyOption assemblyPermissionSetOrVisibilityOption();
    public AssemblyOption assemblyUncheckedDataOption();
    public OnOffAssemblyOption assemblyVisibilityOption(IToken tPermissionSetVisibility);
    public AddFileSpec alterAssemblyAddFileSpec();
    public AlterFullTextCatalogStatement alterFulltextCatalogStatement();
    public AlterFullTextIndexStatement alterFulltextIndexStatement();
    public AlterFullTextIndexAction alterFulltextIndexAction();
    public SimpleAlterFullTextIndexAction enableDisableAlterFulltextIndexAction();
    public AddAlterFullTextIndexAction addAlterFulltextIndexAction();
    public DropAlterFullTextIndexAction dropAlterFulltextIndexAction();
    public SimpleAlterFullTextIndexAction startPopulationAlterFulltextIndexAction();
    public SimpleAlterFullTextIndexAction otherPopulationAlterFulltextIndexAction();
    public AlterFullTextIndexAction setAlterFullTextIndexAction();
    public AlterColumnAlterFullTextIndexAction alterColumnAlterFullTextIndexAction();
    public SetStopListAlterFullTextIndexAction setStoplistAlterFulltextIndexAction();
    public SimpleAlterFullTextIndexAction setChangeTrackingAlterFulltextIndexAction();
    public SetSearchPropertyListAlterFullTextIndexAction setSearchPropertyListAlterFullTextIndexAction();
    public bool populationOption(TSqlFragment vParent);
    public FullTextIndexColumn alterFullTextIndexColumn();
    public PartitionSpecifier partitionSpecifier();
    public AlterLoginEnableDisableStatement alterLoginEnableDisable(Identifier vName);
    public AlterLoginOptionsStatement alterLoginOptions(Identifier vName);
    public AlterLoginAddDropCredentialStatement alterLoginAddDropCredential(Identifier vName);
    public PrincipalOption alterLoginParam();
    public PasswordAlterPrincipalOption passwordAlterLoginOption();
    public AlterPartitionFunctionStatement alterPartitionFunctionStatement();
    public AlterPartitionSchemeStatement alterPartitionSchemeStatement();
    public ExecuteAsClause executeAsClause(bool vCallerProhibited, bool vOwnerProhibited);
    public void queueOption(QueueStatement vParent, bool vDropAccepted);
    public QueueStateOption stateQueueOption();
    public void queueActivationOption(QueueStatement vParent, bool vDropAccepted);
    public QueueStateOption queuePoisonMessageHandlingOption();
    public QueueOption activationQueueOptionArgument(bool vDropAccepted, Boolean& procedureName, Boolean& maxQueueReaders, Boolean& executeAs);
    public QueueStateOption statusQueueOptionArgument(IToken vStartToken);
    public QueueProcedureOption procedureNameQueueOptionArgument(IToken vStartToken);
    public QueueValueOption maxQueueReadersQueueOptionArgument(IToken vStartToken);
    public QueueOption dropQueueOptionArgument(bool vDropAccepted);
    public QueueExecuteAsOption executeAsQueueOptionArgument();
    public AlterRoleAction alterRoleAction();
    public AddMemberAlterRoleAction addMemberAlterRoleAction();
    public DropMemberAlterRoleAction dropMemberAlterRoleAction();
    public RenameAlterRoleAction renameAlterRoleAction();
    public RouteOption routeOption();
    public SchemaObjectName schemaObjectTwoPartName();
    public void alterSequenceOptionList(AlterSequenceStatement vParent);
    public SequenceOption alterSequenceOptionListElement();
    public AlterServiceMasterKeyStatement alterServiceMasterKeyStatement();
    public PrincipalOption alterUserOption();
    public PasswordAlterPrincipalOption passwordAlterUserOption(IToken tOption);
    public IdentifierPrincipalOption identifierAlterUserOption(IToken tOption);
    public LiteralPrincipalOption literalAlterUserOption(IToken tOption);
    public void authorization(IAuthorization vParent);
    public StatementList createSchemaElementList();
    public TSqlStatement createSchemaElement();
    public void functionStatementBody(FunctionStatementBody vResult, Boolean& vParseErrorOccurred);
    public void functionParameterList(FunctionStatementBody vResult);
    public void functionReturnTypeAndBody(FunctionStatementBody vParent, Boolean& vParseErrorOccurred);
    public ProcedureParameter functionParameter();
    public void scalarProcedureParameter(ProcedureParameter vParent, bool outputAllowed, bool nullableAllowed);
    public void functionAttributes(FunctionStatementBody vParent);
    public BeginEndBlockStatement beginEndBlockStatement();
    public MethodSpecifier methodSpecifier();
    public void functionAttributesNoExecuteAs(FunctionStatementBody vParent);
    public DeclareTableVariableBody declareTableBody(IndexAffectingStatement statementType);
    public DeclareTableVariableBody declareTableBodyMain(IndexAffectingStatement statementType);
    public void clrTableValuedFunctionOrderHint(FunctionStatementBody vParent);
    public SelectStatement subqueryExpressionWithOptionalCTE();
    public QueryExpression subqueryExpression(SubDmlFlags subDmlFlags);
    public FunctionOption functionAttribute();
    public FunctionOption functionAttributeNoExecuteAs();
    public ExecuteAsFunctionOption functionExecuteAsOption();
    public void identifierColumnList(TSqlFragment vParent, IList`1<ColumnReferenceExpression> columns);
    public BooleanExpression filterClause(bool filterProhibited);
    public StatisticsOption createStatisticsStatementWithOption(Boolean& isConflictingOption);
    public LiteralStatisticsOption sampleStatisticsOption(Boolean& isConflictingOption);
    public LiteralStatisticsOption statsStreamStatisticsOption();
    public StatisticsOption simpleStatisticsOption(Boolean& isConflictingOption);
    public StatisticsPartitionRange statisticsPartitionRange();
    public ResampleStatisticsOption resampleStatisticsOption();
    public OnOffStatisticsOption incrementalStatisticsOption();
    public StatisticsOption updateStatisticsStatementWithOption(Boolean& isConflictingOption);
    public LiteralStatisticsOption updateStatisticsLiteralOption();
    public StatisticsOption updateStatisticsSimpleOption(Boolean& isConflictingOption);
    public KillStatement killStatement();
    public KillQueryNotificationSubscriptionStatement killQueryNotificationSubscriptionStatement();
    public KillStatsJobStatement killStatsJobStatement();
    public CompressionPartitionRange compressionPartitionRange();
    public Permission permission();
    public void securityTargetObjectCommon(SecurityTargetObject vParent);
    public SecurityTargetObject authorizationTargetObject();
    public void permissionsList(SecurityStatement vParent, Boolean& vContainsColumnList);
    public void securityStatementTargetObjectOpt(SecurityStatement vParent, bool vColumnsDisallowed);
    public void securityStatementPrincipalList(SecurityStatement vParent);
    public void securityStatementAsClauseOpt(SecurityStatement vParent);
    public WaitForSupportedStatement waitforInnerStatement();
    public ValueExpression binaryOrVariable();
    public ValueExpression integerOrVariable();
    public void modificationTextStatement(TextModificationStatement vParent);
    public ScalarExpression signedIntegerOrVariableOrNull();
    public void modificationTextStatementWithLog(TextModificationStatement vParent);
    public ValueExpression writeString();
    public VariableReference variable();
    public OpenMasterKeyStatement openMasterKeyStatement();
    public OpenSymmetricKeyStatement openSymmetricKeyStatement();
    public OpenCursorStatement openCursorStatement();
    public CryptoMechanism decryptionMechanism();
    public void decryptionMechanismPassword(CryptoMechanism vParent);
    public CursorId cursorId();
    public CloseMasterKeyStatement closeMasterKeyStatement();
    public CloseSymmetricKeyStatement closeSymmetricKeyStatement();
    public CloseCursorStatement closeCursorStatement();
    public FetchCursorStatement rowSelector();
    public FetchType fetchType();
    public AddSignatureStatement addSignatureStatement();
    public TSqlStatement dropDatabaseStatements();
    public DropIndexStatement dropIndexStatement();
    public DropStatisticsStatement dropStatisticsStatement();
    public DropTableStatement dropTableStatement();
    public DropProcedureStatement dropProcedureStatement();
    public DropFunctionStatement dropFunctionStatement();
    public DropViewStatement dropViewStatement();
    public DropDefaultStatement dropDefaultStatement();
    public DropRuleStatement dropRuleStatement();
    public DropTriggerStatement dropTriggerStatement();
    public DropSchemaStatement dropSchemaStatement();
    public DropAggregateStatement dropAggregateStatement();
    public DropAssemblyStatement dropAssemblyStatement();
    public DropAvailabilityGroupStatement dropAvailabilityGroupStatement();
    public TSqlStatement dropPartitionStatements();
    public DropSynonymStatement dropSynonymStatement();
    public DropApplicationRoleStatement dropApplicationRoleStatement();
    public DropBrokerPriorityStatement dropBrokerPriorityStatement();
    public DropCryptographicProviderStatement dropCryptographicProviderStatement();
    public TSqlStatement dropFulltextStatements();
    public DropLoginStatement dropLoginStatement();
    public DropResourcePoolStatement dropResourcePoolStatement();
    public TSqlStatement dropWorkloadStatements();
    public DropRoleStatement dropRoleStatement();
    public DropMasterKeyStatement dropMasterKeyStatement();
    public DropSymmetricKeyStatement dropSymmetricKeyStatement();
    public DropAsymmetricKeyStatement dropAsymmetricKeyStatement();
    public DropCertificateStatement dropCertificateStatement();
    public DropCredentialStatement dropCredentialStatement();
    public DropTypeStatement dropTypeStatement();
    public DropXmlSchemaCollectionStatement dropXmlSchemaCollectionStatement();
    public DropContractStatement dropContractStatement();
    public DropQueueStatement dropQueueStatement();
    public DropServiceStatement dropServiceStatement();
    public DropRouteStatement dropRouteStatement();
    public DropMessageTypeStatement dropMessageTypeStatement();
    public DropRemoteServiceBindingStatement dropRemoteServiceBindingStatement();
    public DropEndpointStatement dropEndpointStatement();
    public DropSignatureStatement dropSignatureStatement();
    public TSqlStatement dropEventStatement();
    public DropSequenceStatement dropSequenceStatement();
    public DropFederationStatement dropFederationStatement();
    public DropSecurityPolicyStatement dropSecurityPolicyStatement();
    public TSqlStatement dropColumnStatements();
    public TSqlStatement dropExternalStatement();
    public TSqlStatement dropServerStatements();
    public DropUserStatement dropUserStatement();
    public DropServerAuditSpecificationStatement dropServerAuditSpecificationStatement();
    public DropServerAuditStatement dropServerAuditStatement();
    public DropServerRoleStatement dropServerRoleStatement();
    public DropDatabaseAuditSpecificationStatement dropDatabaseAuditSpecificationStatement();
    public DropCredentialStatement dropDatabaseScopedCredentialStatement();
    public DropDatabaseEncryptionKeyStatement dropDatabaseEncryptionKeyStatement();
    public DropDatabaseStatement dropDatabaseStatement();
    public DropIndexClauseBase dropIndexClause();
    public BackwardsCompatibleDropIndexClause indexDropObject();
    public DropIndexClause indexDropObjectNewNameFormat();
    public void dropClusteredIndexOptions(DropIndexClause vParent);
    public void dropClusteredIndexOption(DropIndexClause vParent, Int32& encounteredOptions);
    public IndexExpressionOption maxDopOption();
    public OnlineIndexOption onlineIndexOption();
    public MoveToDropIndexOption dropIndexMoveToOption();
    public FileStreamOnDropIndexOption dropIndexFileStreamOnOption();
    public DataCompressionOption dataCompressionOption();
    public FileGroupOrPartitionScheme filegroupOrPartitionScheme();
    public void fileStreamOn(IFileStreamSpecifier vParent);
    public ChildObjectName statisticsDropObject();
    public List`1<Identifier> identifierList(int vMaxNumber);
    public void dropObjectList(DropObjectsStatement vParent, bool onlyTwoPartNames);
    public TriggerScope triggerScope(TSqlFragment vParent);
    public DropExternalTableStatement dropExternalTableStatement();
    public SchemaObjectName dropObject(bool onlyTwoPartNames);
    public DropPartitionFunctionStatement dropPartitionFunctionStatement();
    public DropPartitionSchemeStatement dropPartitionSchemeStatement();
    public DropFullTextCatalogStatement dropFulltextCatalogStatement();
    public DropFullTextIndexStatement dropFulltextIndexStatement();
    public bool removeProviderKeyOpt(TSqlFragment vParent);
    public DropEventNotificationStatement dropEventNotificationStatement();
    public DropEventSessionStatement dropEventSessionStatement();
    public void eventSessionDropScope(DropEventSessionStatement vParent);
    public DropExternalDataSourceStatement dropExternalDataSourceStatement();
    public DropExternalFileFormatStatement dropExternalFileFormatStatement();
    public DropExternalResourcePoolStatement dropExternalResourcePoolStatement();
    public DropColumnMasterKeyStatement dropColumnMasterKeyStatement();
    public DropColumnEncryptionKeyStatement dropColumnEncryptionKeyStatement();
    public DropWorkloadGroupStatement dropWorkloadGroupStatement();
    public DropWorkloadClassifierStatement dropWorkloadClassifierStatement();
    public void signatureType(SignatureStatementBase vParent);
    public void signableElement(SignatureStatementBase vParent);
    public void cryptoListWithOptionalPasswordSignature(SignatureStatementBase vParent);
    public CryptoMechanism cryptoWithOptionalPasswordSignature();
    public Literal withSignatureOrPasswordOpt();
    public Identifier nonQuotedIdentifier();
    public BeginTransactionStatement beginTransactionStatement();
    public TryCatchStatement tryCatchStatement();
    public BeginConversationTimerStatement beginConversationTimerStatement();
    public BeginDialogStatement beginDialogStatement();
    public void transactionName(TransactionStatement vParent);
    public Identifier weirdTransactionName();
    public void tranIdentifier(StringBuilder vStringBuilder, TSqlFragment vParent);
    public StatementList tryStatementList(Boolean& vParseErrorOccurred);
    public StatementList catchStatementList(Boolean& vParseErrorOccurred);
    public BeginEndAtomicBlockStatement beginEndAtomicBlock();
    public void atomicBlockOptions(BeginEndAtomicBlockStatement vParent);
    public AtomicBlockOption atomicBlockOption();
    public LiteralAtomicBlockOption dateFirstOption();
    public LiteralAtomicBlockOption dateFormatOption();
    public OnOffAtomicBlockOption delayedDurabilityOption();
    public LiteralAtomicBlockOption languageOption();
    public IdentifierAtomicBlockOption isolationLevelIdentifierAtomicBlockOption();
    public IsolationLevel isolationLevel(TSqlFragment vParent);
    public DeclareVariableElement declareVariableElement();
    public SqlDataTypeReference cursorDataType();
    public DeclareVariableStatement declareVariableStatement();
    public DeclareCursorStatement declareCursorStatement();
    public PredicateSetStatement predicateSetStatement();
    public SetVariableStatement setVariableStatement();
    public SetStatisticsStatement setStatisticsStatement();
    public SetRowCountStatement setRowcountStatement();
    public SetOffsetsStatement setOffsetsStatement();
    public SetCommandStatement setCommandStatement();
    public SetTransactionIsolationLevelStatement setTransactionIsolationLevelStatement();
    public SetTextSizeStatement setTextSizeStatement();
    public SetIdentityInsertStatement setIdentityInsertStatement();
    public SetErrorLevelStatement setErrorLevelStatement();
    public void parenthesizedOptExpressionWithDefaultList(TSqlFragment vParent, IList`1<ScalarExpression> expressions);
    public AssignmentKind assignmentWithOptOp();
    public CursorDefinition cursorDefinition();
    public void setOnOff(SetOnOffStatement vParent);
    public SetOffsets offsetItem();
    public SetCommand setCommand();
    public SetFipsFlaggerCommand fipsFlaggerLevel();
    public void tableElement(IndexAffectingStatement statementType, TableDefinition vParent, AlterTableAddTableElementStatement vStatement);
    public void cursorOpts(bool oldSyntax, IList`1<CursorOption> vOptions);
    public CursorDefinition cursorDefinitionOptions(IList`1<CursorOption> vOptions);
    public CursorOption cursorOption();
    public CreateIndexStatement createRelationalIndexStatement(IToken tUnique, Nullable`1<bool> isClustered);
    public void indexLegacyOptionList(CreateIndexStatement vParent);
    public void fileStreamOnOpt(IFileStreamSpecifier vParent);
    public BooleanExpression filterExpression();
    public BooleanExpression filterExpressionPrimary();
    public ColumnReferenceExpression filterColumn();
    public BooleanIsNullExpression filterNullPredicate(ScalarExpression vColumn);
    public BooleanComparisonExpression filterComparisonPredicate(ScalarExpression vColumn);
    public InPredicate filterInPredicate(ScalarExpression vColumn);
    public BooleanParenthesisExpression filterParenthesisExpression();
    public void specialColumn(ColumnReferenceExpression vParent);
    public BooleanIsNullExpression nullPredicate(ScalarExpression vExpressionFirst);
    public IndexOption indexLegacyOption();
    public IndexExpressionOption fillFactorOption();
    public IndexOption indexOption();
    public void alterTableAlterIndexOptionList(IndexAffectingStatement statement, IList`1<IndexOption> optionsList, TSqlFragment vParent);
    public void lowPriorityLockWaitOption(IList`1<LowPriorityLockWaitOption> optionsList, TSqlFragment vParent);
    public void truncateTargetOption(TruncateTargetTableSwitchOption tOption);
    public IndexStateOption indexStateOption();
    public IndexExpressionOption bucketCountOption();
    public OrderIndexOption orderIndexOption();
    public CompressionDelayIndexOption compressionDelayOption();
    public void ctContext(WithCtesAndXmlNamespaces vParent);
    public CommonTableExpression commonTableExpression();
    public XmlNamespacesElement xmlNamespacesElement();
    public XmlNamespacesDefaultElement xmlNamespacesDefaultElement();
    public XmlNamespacesAliasElement xmlNamespacesAliasElement();
    public QueryExpression queryExpression(SubDmlFlags subDmlFlags, SelectStatement vSelectStatement);
    public OrderByClause orderByClause();
    public OffsetClause offsetClause();
    public ForClause forClause();
    public void optimizerHints(TSqlFragment vParent, IList`1<OptimizerHint> hintsCollection);
    public TableReferenceWithAliasAndColumns derivedTable(SubDmlFlags subDmlFlags);
    public QueryDerivedTable queryDerivedTable(SubDmlFlags subDmlFlags);
    public InlineDerivedTable inlinedDerivedTable();
    public void simpleTableReferenceAlias(TableReferenceWithAlias vParent);
    public RowValue rowValueExpression();
    public ScalarSubquery subquery(SubDmlFlags subDmlFlags, ExpressionFlags expressionFlags);
    public QueryExpression subqueryExpressionUnit(SubDmlFlags subDmlFlags);
    public QuerySpecification subquerySpecification(SubDmlFlags subDmlFlags);
    public QueryParenthesisExpression subqueryParenthesis(SubDmlFlags subDmlFlags);
    public QueryExpression queryExpressionUnit(SubDmlFlags subDmlFlags, SelectStatement vSelectStatement);
    public QuerySpecification querySpecification(SubDmlFlags subDmlFlags, SelectStatement vSelectStatement);
    public QueryParenthesisExpression queryParenthesis(SubDmlFlags subDmlFlags, SelectStatement vSelectStatement);
    public void uniqueRowFilterOpt(QuerySpecification vParent);
    public TopRowFilter topRowFilter();
    public SelectElement selectColumnOrStarExpression();
    public FromClause fromClauseOpt(SubDmlFlags subDmlFlags);
    public WhereClause whereClause();
    public GroupByClause groupByClause();
    public HavingClause havingClause();
    public BrowseForClause browseForClause();
    public XmlForClause xmlForClause();
    public JsonForClause jsonForClause();
    public void selectExpression(QuerySpecification vParent);
    public UniqueRowFilter uniqueRowFilter(IToken& token);
    public PrimaryExpression parenthesisDisambiguatorForExpressions(ExpressionFlags expressionFlags);
    public TopRowFilter dmlTopRowFilter();
    public void dmlTopRowFilterOpt(DataModificationSpecification vParent);
    public SelectSetVariable selectSetVariable();
    public SelectStarExpression selectStarExpression();
    public SelectScalarExpression selectColumn();
    public SelectElement outputClauseSelectElement();
    public SelectScalarExpression outputClauseSelectColumn();
    public ScalarExpression selectColumnExpression();
    public IdentityFunctionCall identityFunction();
    public ScalarExpression seedIncrement();
    public TableSampleClause tableSampleClause();
    public FromClause fromClause(SubDmlFlags subDmlFlags);
    public TableReference selectTableReferenceWithOdbc(SubDmlFlags subDmlFlags);
    public TemporalClause temporalClause();
    public ValueExpression stringLiteralOrVariable();
    public TableReference selectTableReference(SubDmlFlags subDmlFlags);
    public OdbcQualifiedJoinTableReference odbcQualifiedJoin(SubDmlFlags subDmlFlags);
    public TableReference selectTableReferenceElement(SubDmlFlags subDmlFlags);
    public void selectTableReferenceAdditionalElement(SubDmlFlags subDmlFlags, TableReference& vResult);
    public void odbcInitiator();
    public OdbcConvertSpecification odbcConvertSpecification();
    public ExtractFromExpression extractFromExpression();
    public OdbcFunctionCall odbcFunctionCall();
    public TableReference joinTableReference(SubDmlFlags subDmlFlags);
    public JoinParenthesisTableReference joinParenthesis(SubDmlFlags subDmlFlags);
    public void joinElement(SubDmlFlags subDmlFlags, TableReference& vResult);
    public TableReference selectTableReferenceElementWithoutJoinParenthesis(SubDmlFlags subDmlFlags);
    public void pivotedTableReference(TableReference& vResult);
    public void unpivotedTableReference(TableReference& vResult);
    public ColumnReferenceExpression fixedColumn();
    public void columnListWithParenthesis(TSqlFragment vParent, IList`1<ColumnReferenceExpression> columns);
    public ColumnReferenceExpression identifierColumnReferenceExpression();
    public void unqualifiedJoin(SubDmlFlags subDmlFlags, TableReference& vResult);
    public void qualifiedJoin(SubDmlFlags subDmlFlags, TableReference& vResult);
    public TableReferenceWithAliasAndColumns changeTableTableReference();
    public BuiltInFunctionTableReference builtInFunctionTableReference();
    public GlobalFunctionTableReference globalFunctionTableReference();
    public VariableTableReference variableTableReference();
    public VariableMethodCallTableReference variableMethodCallTableReference();
    public TableReferenceWithAlias openRowset();
    public FullTextTableReference fulltextTableReference();
    public SemanticTableReference semanticTableReference();
    public OpenXmlTableReference openXmlTableReference();
    public OpenJsonTableReference openJsonTableReference();
    public DataModificationTableReference subDmlTableReference(SubDmlFlags subDmlFlags);
    public PredictTableReference predictTableReference(SubDmlFlags subDmlFlags);
    public TableReference schemaObjectOrFunctionTableReference();
    public ChangeTableChangesTableReference changesChangeTableParams(SchemaObjectName vTarget);
    public ChangeTableVersionTableReference versionChangeTableParams(SchemaObjectName vTarget);
    public DataModificationSpecification innerDmlStatement();
    public PredictTableReference predictParams(SubDmlFlags subDmlFlags, ExpressionFlags expressionFlags);
    public void predictWithClauseOpt(PredictTableReference vParent);
    public void simpleTableReferenceAliasOpt(TableReferenceWithAlias vParent);
    public TableReferenceWithAlias mergeTarget(bool indexHintAllowed);
    public void predictSchemaItemList(PredictTableReference vParent);
    public SchemaDeclarationItem predictSchemaItem();
    public ColumnDefinitionBase columnDefinitionBasic();
    public TableReferenceWithAlias dmlTarget(bool indexHintAllowed);
    public InsertSpecification insertSpecification(SubDmlFlags subDmlFlags);
    public UpdateSpecification updateSpecification(SubDmlFlags subDmlFlags);
    public DeleteSpecification deleteSpecification(SubDmlFlags subDmlFlags);
    public MergeSpecification mergeSpecification(SubDmlFlags subDmlFlags);
    public void joinHint(QualifiedJoin vParent);
    public ScalarExpression expressionWithDefault();
    public ScalarExpression signedIntegerOrStringOrVariable();
    public ScalarExpression possibleNegativeConstant();
    public void outputIntoOutputClause(DataModificationSpecification vParent);
    public OutputIntoClause outputIntoClause(IToken tOutput, IList`1<SelectElement> vSelectElements);
    public OutputClause outputClause();
    public VariableTableReference variableDmlTarget();
    public NamedTableReference intoSchemaObjectTable();
    public void outputClauseOpt(SubDmlFlags subDmlFlags, DataModificationSpecification vParent);
    public WhereClause dmlWhereClause(SubDmlFlags subDmlFlags);
    public ColumnReferenceExpression insertColumn();
    public ValuesInsertSource valuesInsertSource();
    public ExecuteInsertSource executeInsertSource();
    public SelectInsertSource selectInsertSource(SubDmlFlags subDmlFlags);
    public void setClausesList(TSqlFragment vParent, IList`1<SetClause> setClauses);
    public SetClause setClause();
    public AssignmentSetClause setClauseStartingWithVariable();
    public AssignmentSetClause setClauseColumnAssignment(MultiPartIdentifier vMultiPartIdentifier);
    public FunctionCallSetClause setClauseFunctionCall(MultiPartIdentifier vMultiPartIdentifier);
    public AssignmentSetClause setClauseSubItemSystemColumn();
    public AssignmentKind assignmentWithOp();
    public void systemColumn(ColumnReferenceExpression vParent);
    public ExecuteSpecification executeSpecification();
    public void defaultValuesInsertSource(ValuesInsertSource vParent);
    public RowValue rowValueExpressionWithDefault();
    public void expressionWithDefaultList(TSqlFragment vParent, IList`1<ScalarExpression> expressions);
    public TableReferenceWithAlias schemaObjectDmlTarget(bool indexHintAllowed);
    public void mergeInsertDmlColumnListOpt(InsertMergeAction vParent);
    public ColumnReferenceExpression mergeInsertDmlColumn();
    public ScalarExpression possibleNegativeConstantWithDefault();
    public SchemaObjectFunctionTableReference schemaObjectFunctionDmlTarget();
    public NamedTableReference schemaObjectTableDmlTarget(bool indexHintAllowed);
    public void tableHints(TSqlFragment vParent, IList`1<TableHint> hints, bool tableHintAllowed);
    public NamedTableReference schemaObjectTableReference(SchemaObjectName vSchemaObjectName);
    public SchemaObjectFunctionTableReference schemaObjectFunctionTableReference(SchemaObjectName vSchemaObjectName);
    public void singleOldStyleTableHint(TSqlFragment vParent, IList`1<TableHint> hints);
    public void nonParameterTableHints(TSqlFragment vParent, IList`1<TableHint> hints);
    public IndexTableHint oldForceIndex();
    public void fullTextTable(FullTextTableReference vParent);
    public void fulltextTableColumnList(FullTextTableReference vParent);
    public void fulltextTableOptions(FullTextTableReference vParent);
    public void fulltextSemanticTableColumnList(TSqlFragment vParent, IList`1<ColumnReferenceExpression> vColumns);
    public ColumnReferenceExpression starColumnReferenceExpression();
    public ValueExpression languageExpression();
    public ValueExpression binaryOrIntegerOrStringOrVariable();
    public void semanticKeyPhraseTableReference(SemanticTableReference vParent);
    public void semanticSimilarityTableReference(SemanticTableReference vParent);
    public void semanticSimilarityDetailsTableReference(SemanticTableReference vParent);
    public OpenXmlTableReference openXmlParams();
    public void openXmlWithClauseOpt(OpenXmlTableReference vParent);
    public void openXmlSchemaItemList(OpenXmlTableReference vParent);
    public SchemaDeclarationItem openXmlSchemaItem();
    public OpenJsonTableReference openJsonParams();
    public void openJsonWithClauseOpt(OpenJsonTableReference vParent);
    public void openJsonSchemaItemList(OpenJsonTableReference vParent);
    public SchemaDeclarationItemOpenjson openJsonSchemaItem();
    public TableReferenceWithAlias openRowsetRowset();
    public OpenQueryTableReference openQueryRowset();
    public AdHocTableReference adhocRowset();
    public OpenRowsetTableReference openRowsetParams();
    public InternalOpenRowset internalOpenRowsetArgs();
    public BulkOpenRowset openRowsetBulk();
    public BulkInsertOption openRowsetBulkHint();
    public BulkInsertOption openRowsetBulkHintNoValue();
    public AdHocDataSource adhocDataSource();
    public SchemaObjectNameOrValueExpression objectOrString();
    public void simpleTableHints(TSqlFragment vParent, IList`1<TableHint> hints);
    public void tableHintsBody(TSqlFragment vParent, IList`1<TableHint> hints, bool tableHintAllowed);
    public TableHint tableHint(bool indexHintAllowed);
    public ForceSeekTableHint forceSeekTableHint(bool indexHintAllowed);
    public TableHint simpleTableHint();
    public IndexTableHint indexTableHint(bool indexHintAllowed);
    public LiteralTableHint literalTableHint();
    public IdentifierOrValueExpression identifierOrInteger();
    public WhereClause whereCurrentOfCursorClause(SubDmlFlags subDmlFlags);
    public GroupingSpecification groupByItem(bool isAll, Boolean& encounteredCubeRollupGroupingSets, Boolean& alreadyEncounteredDistributedAggHint);
    public CubeGroupingSpecification cubeSpec(bool isAll);
    public RollupGroupingSpecification rollupSpec(bool isAll);
    public GroupingSetsGroupingSpecification groupingSetsSpec(bool isAll);
    public GrandTotalGroupingSpecification grandTotal();
    public ExpressionGroupingSpecification simpleGroupByItem(Boolean& alreadyEncounteredDistributedAggHint);
    public GroupingSpecification groupingSet();
    public CompositeGroupingSpecification composingGroupingSet();
    public GroupingSpecification groupingSetItem();
    public void cubeOrRollupArgumentList(TSqlFragment vParent, IList`1<GroupingSpecification> specs);
    public GroupingSpecification cubeOrRollupArgument();
    public CompositeGroupingSpecification compositeGroupByItem();
    public ExpressionWithSortOrder expressionWithSortOrder();
    public SortOrder orderByOption(TSqlFragment vParent);
    public UpdateForClause updateForClause();
    public XmlForClauseOption xmlForClauseMode();
    public XmlForClauseOption xmlParam(XmlForClauseOptions encountered);
    public JsonForClauseOption jsonForClauseMode();
    public JsonForClauseOption jsonParam(JsonForClauseOptions encountered);
    public OptimizerHint hint();
    public LiteralOptimizerHint literalOptimizerHint();
    public OptimizerHint simpleOptimizerHint();
    public LiteralOptimizerHint usePlanOptimizerHint();
    public OptimizeForOptimizerHint optimizeForOptimizerHint();
    public TableHintsOptimizerHint tableHintsOptimizerHint();
    public UseHintList useHintClause();
    public VariableValuePair variableValuePair();
    public Literal cryptographicProviderFile();
    public AlterResourcePoolStatement alterResourcePoolStatement();
    public AlterResourceGovernorStatement alterResourceGovernorStatement();
    public void resourcePoolStatementBody(ResourcePoolStatement vParent);
    public ResourcePoolParameter resourcePoolParameter();
    public ResourcePoolAffinitySpecification resourcePoolAffinitySpecification();
    public LiteralRange poolAffinityRange();
    public void externalResourcePoolStatementBody(ExternalResourcePoolStatement vParent);
    public ExternalResourcePoolParameter externalResourcePoolParameter();
    public ExternalResourcePoolAffinitySpecification externalResourcePoolAffinitySpecification();
    public LiteralRange externalPoolAffinityRange();
    public CreateWorkloadGroupStatement createWorkloadGroupStatement();
    public CreateWorkloadClassifierStatement createWorkloadClassifierStatement();
    public void workloadGroupStatementBody(WorkloadGroupStatement vParent);
    public WorkloadGroupParameter workloadGroupParameter();
    public void workloadGroupUsingOption(WorkloadGroupStatement vParent);
    public void workloadClassifierStatementBody(CreateWorkloadClassifierStatement vParent);
    public void withClassifierOptions(CreateWorkloadClassifierStatement vParent);
    public WorkloadClassifierOption workloadClassifierOption();
    public ClassifierWorkloadGroupOption classifierWorkloadGroupOption();
    public ClassifierMemberNameOption classifierMemberNameOption();
    public ClassifierWlmLabelOption classifierWlmLabelOption();
    public ClassifierWlmContextOption classifierWlmContextOption();
    public ClassifierImportanceOption classifierImportanceOption();
    public ClassifierStartTimeOption classifierStartTimeOption();
    public ClassifierEndTimeOption classifierEndTimeOption();
    public WlmTimeLiteral wlmTimeLiteral();
    public void brokerPriorityStatementBody(BrokerPriorityStatement vParent);
    public BrokerPriorityParameter brokerPriorityParameter(int encountered);
    public void createSequenceOptionList(CreateSequenceStatement vParent);
    public SequenceOption createSequenceOptionListElement();
    public ScalarExpressionSequenceOption sequenceRestartOptionListElement();
    public SequenceOption commonSequenceOptionListElement();
    public DataTypeSequenceOption sequenceDatatypeOptionListElement();
    public ScalarExpressionSequenceOption sequenceStartOptionListElement();
    public ScalarExpressionSequenceOption sequenceCacheOptionListElement();
    public SequenceOption sequenceCycleOptionListElement();
    public ScalarExpressionSequenceOption sequenceIncrementOptionListElement();
    public SequenceOption sequenceNoOptionListElement();
    public ScalarExpressionSequenceOption sequenceMinMaxOptionListElement();
    public CreateColumnMasterKeyStatement createColumnMasterKeyStatement();
    public CreateColumnEncryptionKeyStatement createColumnEncryptionKeyStatement();
    public ColumnMasterKeyParameter columnMasterkeyParameter();
    public ColumnMasterKeyStoreProviderNameParameter columnMasterKeyStoreProviderNameParameter();
    public ColumnMasterKeyPathParameter columnMasterKeyPathParameter();
    public ColumnEncryptionKeyValue createColumnEncryptionKeyValue();
    public ColumnEncryptionKeyValueParameter columnEncryptionKeyValueParameter();
    public ColumnMasterKeyNameParameter columnMasterKeyNameParameter();
    public ColumnEncryptionAlgorithmNameParameter columnEncryptionAlgorithmNameParameter();
    public EncryptedValueParameter encryptedValueParameter();
    public void alterColumnEncryptionKeyAddStatement(AlterColumnEncryptionKeyStatement vResult);
    public void alterColumnEncryptionKeyDropStatement(AlterColumnEncryptionKeyStatement vResult);
    public void createSecurityPredicateListElement(CreateSecurityPolicyStatement vParent);
    public void securityPolicyOptionsList(SecurityPolicyStatement vParent);
    public SecurityPredicateAction createOrAltersecurityPredicateListElement();
    public void alterSecurityPredicateListElement(AlterSecurityPolicyStatement vParent);
    public SecurityPredicateAction dropSecurityPredicateListElement();
    public SecurityPolicyOption securityPolicyOptionListElement(SecurityPolicyStatement vParent);
    public FunctionCall userFunctionCall(MultiPartIdentifier vIdentifiers);
    public void securityPredicateOperation(SecurityPredicateAction vResult);
    public void externalDataSourceType(CreateExternalDataSourceStatement vParent);
    public void externalDataSourceLocation(ExternalDataSourceStatement vParent);
    public ExternalDataSourceLiteralOrIdentifierOption externalDataSourceLiteralOrIdentifierOption();
    public void externalFileFormatOptions(CreateExternalFileFormatStatement vResult);
    public void externalFormatingOption(TSqlFragment vParent, IList`1<ExternalFileFormatOption> vOptions);
    public void externalFileFormatLiteralOptions(TSqlFragment vParent, IList`1<ExternalFileFormatOption> vOptions);
    public ExternalFileFormatLiteralOption externalFileFormatLiteralOption();
    public ExternalFileFormatContainerOption externalFormatingContainerOption();
    public ExternalFileFormatOption externalDataFormatOption();
    public ExternalFileFormatUseDefaultTypeOption externalDataFormatUseTypeDefaultOption();
    public ExternalFileFormatLiteralOption externalDataFormatLiteralOption();
    public void copyColumnList(CopyStatement vParent);
    public void copyWithClause(CopyStatement vParent);
    public CopyColumnOption copyColumnOption(Int32& columnCount, IToken tToken);
    public ScalarExpression defaultValueLiteral();
    public CopyOption copyOption(Int32& encountered);
    public SingleValueTypeCopyOption singleValueTypeCopyOption();
    public CopyCredentialOption copyCredentialOption();
    public void spatialIndexingScheme(CreateSpatialIndexStatement vParent);
    public void spatialIndexOptionsList(CreateSpatialIndexStatement vParent);
    public SpatialIndexOption spatialIndexOption(SpatialIndexingSchemeType indexingScheme, Boolean& isRegularIndexOption);
    public BoundingBoxSpatialIndexOption boundingBoxSpatialIndexOption(bool isRegularIndexOption, SpatialIndexingSchemeType indexingScheme);
    public GridsSpatialIndexOption gridsSpatialIndexOption(bool isRegularIndexOption);
    public CellsPerObjectSpatialIndexOption cellsPerObjectSpatialIndexOption(bool isRegularIndexOption);
    public SpatialIndexRegularOption spatialIndexRegularOption(IndexAffectingStatement statement);
    public void boundingBoxParameter(BoundingBoxSpatialIndexOption vParent);
    public void boundingBoxParameterListByname(BoundingBoxSpatialIndexOption vParent);
    public void boundingBoxParameterListByord(BoundingBoxSpatialIndexOption vParent);
    public BoundingBoxParameter boundingBoxParameterByName(int encountered);
    public ScalarExpression signedIntegerOrReal();
    public BoundingBoxParameter boundingBoxParameterByOrd();
    public void gridParameter(GridsSpatialIndexOption vParent);
    public void gridParameterListByName(GridsSpatialIndexOption vParent);
    public void gridParameterListByOrd(GridsSpatialIndexOption vParent);
    public GridParameter gridParameterByName();
    public GridParameter gridParameterByOrd();
    public void viewStatementBody(ViewStatementBody vResult);
    public ViewOption viewOption();
    public ViewOption createMaterializedViewOption();
    public ViewDistributionOption viewDistributionOption();
    public ViewForAppendOption viewForAppendOption();
    public ViewDistributionPolicy viewDistributionPolicy();
    public ViewRoundRobinDistributionPolicy viewRoundRobinDistributionPolicy();
    public ViewHashDistributionPolicy viewHashDistributionPolicy();
    public TriggerOption triggerOption(bool vOwnerProhibited);
    public void procedureOptions(ProcedureStatementBody vParent);
    public ProcedureOption procedureOption();
    public void procedureStatementBody(ProcedureStatementBody vResult, Boolean& vParseErrorOccurred);
    public ProcedureReference procedureReference();
    public void procedureParameterList(ProcedureStatementBodyBase vResult);
    public ProcedureParameter procedureParameter();
    public void cursorProcedureParameter(ProcedureParameter vParent);
    public IdentifierLiteral identifierLiteral();
    public ValueExpression literal();
    public UnaryExpression negativeConstant();
    public Literal subroutineParameterLiteral();
    public void triggerStatementBody(TriggerStatementBody vResult, Boolean& vParseErrorOccurred);
    public void ddlTriggerMidSection(TriggerStatementBody vParent);
    public void dmlTriggerMidSection(TriggerStatementBody vParent);
    public TriggerAction dmlTriggerAction();
    public TriggerAction ddlTriggerAction();
    public void endConversationArgumentsOpt(EndConversationStatement vParent);
    public SelectElement receiveSelectExpression();
    public SelectScalarExpression receiveColumnSelectExpression();
    public DialogOption beginConversationArgument(Int32& encounteredOptions);
    public ScalarExpressionDialogOption scalarExpressionBeginDialogConversationArgument(IToken tOption, Int32& encounteredOptions);
    public OnOffDialogOption onOffBeginDialogConversationArgument(IToken tOption, Int32& encounteredOptions);
    public MergeStatement mergeStatementWithoutSemicolon(SubDmlFlags subDmlFlags);
    public MergeActionClause mergeActionClause();
    public MergeCondition mergeCondition();
    public MergeAction mergeAction(MergeCondition condition);
    public UpdateMergeAction updateMergeAction(MergeCondition condition);
    public InsertMergeAction insertMergeAction(MergeCondition condition);
    public DeleteMergeAction deleteMergeAction(MergeCondition condition);
    public ValuesInsertSource mergeInsertSource();
    public void execStart(TSqlFragment vParent);
    public ExecuteContext executeAsStatementContext();
    public void executeContextStatementOptionsOpt(ExecuteAsStatement vParent);
    public ExecuteOption executeOption();
    public ExecuteOption executeOptionRecompile();
    public ResultSetsExecuteOption executeOptionResultSets();
    public ResultSetDefinition resultSetDefinition();
    public InlineResultSetDefinition inlineResultSetDefinition();
    public ResultSetDefinition asForXmlResultSetDefinition();
    public SchemaObjectResultSetDefinition asSchemaObjectResultSetDefinition();
    public ResultColumnDefinition resultColumnDefinition();
    public void execTypes(ExecuteSpecification vParent);
    public ExecutableEntity execStrTypes();
    public ExecuteContext execStrExecCtxt();
    public Identifier linkedServer();
    public ExecutableProcedureReference execProcEx();
    public ExecuteContext execCtxtStmt();
    public void execCtxtStmtType(ExecuteContext vParent);
    public Literal execCtxtStmtPrincipal();
    public ExecutableStringList execSqlList();
    public void setParamList(ExecutableEntity vParent);
    public ExecutableProcedureReference adhocDataSourceExecproc();
    public ProcedureReferenceName procObjectReference();
    public ProcedureReferenceName varObjectReference();
    public Literal procNumOpt();
    public ValueExpression stringOrGlobalVariableOrVariable();
    public ExecuteParameter setParam(Boolean& nameEqualsValueWasUsed, Int32& parameterNumber);
    public TableDefinition tableDefinitionCreateTable();
    public FederationScheme federatedOn(CreateTableStatement vParent);
    public void largeDataOnOpt(CreateTableStatement vParent);
    public void largeDataOn(CreateTableStatement vParent);
    public TableOption createTableOption();
    public TableDataCompressionOption tableDataCompressionOption();
    public FileTableDirectoryTableOption fileTableDirectoryTableOption();
    public FileTableCollateFileNameTableOption fileTableCollateFileNameTableOption();
    public FileTableConstraintNameTableOption fileTableConstraintNameTableOption();
    public DurabilityTableOption durabilityTableOption();
    public RemoteDataArchiveTableOption remoteDataArchiveTableOption();
    public SystemVersioningTableOption systemVersioningTableOnOffOption();
    public TableDistributionOption tableDistributionOption();
    public TableIndexOption tableIndexOption();
    public TablePartitionOption tablePartitionOption();
    public LocationOption locationOption();
    public void remoteDataArchiveTableSettings(TSqlFragment vParent, MigrationState& vMigrationState, Boolean& vIsMigrationStateSpecified, Boolean& vIsFilterPredicateSpecified, FunctionCall& vFilterPredicate);
    public TableDistributionPolicy tableDistributionPolicy();
    public TableReplicateDistributionPolicy tableReplicateDistributionPolicy();
    public TableRoundRobinDistributionPolicy tableRoundRobinDistributionPolicy();
    public TableHashDistributionPolicy tableHashDistributionPolicy();
    public TableIndexType tableIndexType();
    public TableNonClusteredIndexType tableNonClusteredIndexType();
    public TableClusteredIndexType tableClusteredIndexType();
    public void externalTableColumnElement(CreateExternalTableStatement vResult);
    public ExternalTableColumnDefinition columnDefinitionCreateExternalTable();
    public void externalTableDataSource(CreateExternalTableStatement vParent);
    public ExternalTableOption createExternalTableOption();
    public ExternalTableRejectTypeOption externalTableRejectTypeOption();
    public ExternalTableDistributionOption externalTableDistributionOption();
    public ExternalTableLiteralOrIdentifierOption externalTableNumericLiteralOption();
    public ExternalTableLiteralOrIdentifierOption externalTableLiteralOrIdentifierOption();
    public ExternalTableDistributionPolicy externalTableDistributionPolicy();
    public ExternalTableReplicatedDistributionPolicy externalTableReplicatedDistributionPolicy();
    public ExternalTableRoundRobinDistributionPolicy externalTableRoundRobinDistributionPolicy();
    public ExternalTableShardedDistributionPolicy externalTableShardedDistributionPolicy();
    public AlterTableAlterColumnStatement alterTableAlterColumnStatement();
    public AlterTableAlterIndexStatement alterTableAlterIndexStatement();
    public AlterTableTriggerModificationStatement alterTableTriggerModificationStatement();
    public AlterTableDropTableElementStatement alterTableDropTableElementStatement();
    public AlterTableSwitchStatement alterTableSwitchStatement();
    public ConstraintEnforcement constraintEnforcement();
    public AlterTableAddTableElementStatement alterTableAddTableElementStatement(ConstraintEnforcement vExistingRowsCheck);
    public AlterTableConstraintModificationStatement alterTableConstraintModificationStatement(ConstraintEnforcement vExistingRowsCheck);
    public AlterTableRebuildStatement alterTableRebuildStatement();
    public AlterTableAlterPartitionStatement alterTableAlterPartitionStatement();
    public AlterTableChangeTrackingModificationStatement alterTableChangeTrackingModificationStatement();
    public AlterTableFileTableNamespaceStatement alterTableFileTableNamespaceStatement();
    public AlterTableSetStatement alterTableSetStatement();
    public TableOption tableOption();
    public LockEscalationTableOption lockEscalationTableOption();
    public FileStreamOnTableOption fileStreamOnTableOption();
    public RemoteDataArchiveAlterTableOption remoteDataArchiveAlterTableOption();
    public RdaTableOption remoteDtatArchiveTableOnOffOption(TSqlFragment vParent);
    public void generatedAlwaysClauseInAlter(AlterTableAlterColumnStatement vResult);
    public void maskedClause(IDataMaskingSetter vResult);
    public ColumnEncryptionDefinition columnEncryptionClause();
    public ColumnStorageOptions columnStorage(IndexAffectingStatement statementType, DataTypeReference columnType);
    public AlterTableDropTableElement alterTableDropTableElement();
    public void alterTableDropTableElementWithOptions(AlterTableDropTableElement vParent);
    public DropClusteredConstraintOption dropClusteredConstraintOption();
    public void tableSwitchOptionList(IList`1<TableSwitchOption> optionList, TSqlFragment vParent);
    public IndexType inlineIndexType();
    public IndexDefinition inlineIndexTableDefinition();
    public SystemTimePeriodDefinition tablePeriodDefinition();
    public IndexDefinition inlineIndexColumnDefinition();
    public ColumnDefinition columnDefinition(IndexAffectingStatement statementType, AlterTableAddTableElementStatement vStatement);
    public ConstraintDefinition tableConstraint(IndexAffectingStatement statementType, AlterTableAddTableElementStatement vStatement);
    public void computedColumnBody(ColumnDefinition vParent);
    public void computedColumnConstraintListOpt(IndexAffectingStatement statementType, ColumnDefinition vResult);
    public void regularColumnBody(IndexAffectingStatement statementType, ColumnDefinition vParent);
    public void columnConstraintListOpt(IndexAffectingStatement statementType, ColumnDefinition vResult);
    public ScalarExpression expressionWithFlags(ExpressionFlags expressionFlags);
    public void generatedAlwaysClause(ColumnDefinition vResult);
    public ColumnStorageOptions sparseAndFilestreamStorage(IndexAffectingStatement statementType, DataTypeReference columnType);
    public ColumnStorageOptions sparseStorage(IndexAffectingStatement statementType, DataTypeReference columnType);
    public ColumnStorageOptions allSparseStorage(IndexAffectingStatement statementType, DataTypeReference columnType);
    public ColumnStorageOptions filestreamStorage(IndexAffectingStatement statementType, DataTypeReference columnType);
    public ConstraintDefinition columnConstraint(IndexAffectingStatement statementType);
    public void rowguidcolConstraint(ColumnDefinition vParent);
    public IdentityOptions identityConstraint(IndexAffectingStatement statementType);
    public ColumnEncryptionDefinitionParameter columnEncryptionDefinitionParameter();
    public ColumnEncryptionKeyNameParameter columnEncryptionKeyNameParameter();
    public ColumnEncryptionTypeParameter columnEncryptionTypeParameter();
    public ColumnEncryptionAlgorithmParameter columnEncryptionAlgorithmParameter();
    public bool replicationClauseOpt(IndexAffectingStatement statementType, TSqlFragment vParent);
    public DefaultConstraintDefinition defaultColumnConstraint(IndexAffectingStatement statementType);
    public UniqueConstraintDefinition uniqueColumnConstraint(IndexAffectingStatement statementType);
    public ForeignKeyConstraintDefinition foreignKeyColumnConstraint(IndexAffectingStatement statementType);
    public CheckConstraintDefinition checkConstraint(IndexAffectingStatement statementType);
    public UniqueConstraintDefinition uniqueTableConstraint(IndexAffectingStatement statementType);
    public DefaultConstraintDefinition defaultTableConstraint(IndexAffectingStatement statementType);
    public ForeignKeyConstraintDefinition foreignKeyTableConstraint(IndexAffectingStatement statementType);
    public void uniqueConstraintHeader(UniqueConstraintDefinition vParent, bool throwInPhaseOne);
    public void uniqueConstraintEnforcement(UniqueConstraintDefinition vParent);
    public void uniqueConstraintTailOpt(IndexAffectingStatement statementType, UniqueConstraintDefinition vParent);
    public void uniqueConstraintIndexOptionsOpt(IndexAffectingStatement statement, UniqueConstraintDefinition vParent);
    public void sortedDataOptions();
    public DeleteUpdateAction deleteUpdateAction(TSqlFragment vParent);
    public void foreignKeyConstraintCommonEnd(IndexAffectingStatement statementType, ForeignKeyConstraintDefinition vParent);
    public void foreignConstraintColumnsOpt(ForeignKeyConstraintDefinition vParent);
    public BooleanExpression booleanExpressionWithFlags(ExpressionFlags expressionFlags);
    public XmlDataTypeReference xmlDataType(SchemaObjectName vName);
    public SchemaObjectName dataTypeSchemaObjectName();
    public SqlDataTypeReference sqlDataTypeWithoutNational(SchemaObjectName vName, SqlDataTypeOption vType);
    public UserDataTypeReference userDataType(SchemaObjectName vName);
    public SqlDataTypeReference doubleDataType();
    public SqlDataTypeReference sqlDataTypeWithNational();
    public void dataTypeParametersOpt(ParameterizedDataTypeReference vParent);
    public MaxLiteral max();
    public void identifierListElement(List`1<Identifier> vParent, int vMaxNumber, bool first);
    public MultiPartIdentifier nonEmptyThreePartObjectName();
    public MultiPartIdentifier oneOrTwoOrThreePartObjectName();
    public BooleanExpression booleanExpressionOr(ExpressionFlags expressionFlags);
    public BooleanExpression booleanExpressionAnd(ExpressionFlags expressionFlags);
    public BooleanExpression booleanExpressionUnary(ExpressionFlags expressionFlags);
    public BooleanExpression booleanExpressionPrimary(ExpressionFlags expressionFlags);
    public BooleanParenthesisExpression booleanExpressionParenthesis();
    public BooleanComparisonExpression comparisonPredicate(ScalarExpression vExpressionFirst, BooleanComparisonType vType, ExpressionFlags expressionFlags);
    public SubqueryComparisonPredicate subqueryComparisonPredicate(ScalarExpression vExpressionFirst, BooleanComparisonType vType, ExpressionFlags expressionFlags);
    public InPredicate inPredicate(ScalarExpression vExpressionFirst, bool vNotDefined, ExpressionFlags expressionFlags);
    public BooleanTernaryExpression betweenPredicate(ScalarExpression vExpressionFirst, bool vNotDefined, ExpressionFlags expressionFlags);
    public LikePredicate likePredicate(ScalarExpression vExpressionFirst, bool vNotDefined, ExpressionFlags expressionFlags);
    public FullTextPredicate fulltextPredicate();
    public ExistsPredicate existsPredicate(ExpressionFlags expressionFlags);
    public TSEqualCall tsEqualCall();
    public UpdateCall updateCall();
    public ColumnReferenceExpression fulltextColumn();
    public ColumnReferenceExpression starColumn();
    public SubqueryComparisonPredicateType subqueryComparisonPredicateType();
    public void escapeExpression(LikePredicate vParent, ExpressionFlags expressionFlags);
    public ScalarExpression expressionBinaryPri2(ExpressionFlags expressionFlags);
    public ScalarExpression expressionBinaryPri1(ExpressionFlags expressionFlags);
    public ScalarExpression expressionUnary(ExpressionFlags expressionFlags);
    public PrimaryExpression expressionWithClrElements(ExpressionFlags expressionFlags);
    public PrimaryExpression udtExpression();
    public PrimaryExpression expressionPrimary(ExpressionFlags expressionFlags);
    public FunctionCall expressionWithClrElementsFunctionCallPart();
    public CastCall castCall();
    public TryCastCall tryCastCall();
    public ParseCall parseCall();
    public TryParseCall tryParseCall();
    public IIfCall iIfCall();
    public FunctionCall builtInFunctionCall();
    public LeftFunctionCall leftFunctionCall();
    public RightFunctionCall rightFunctionCall();
    public PartitionFunctionCall partitionFunctionCall();
    public NextValueForExpression nextValueForCall();
    public PrimaryExpression columnOrFunctionCall();
    public NullIfExpression nullIfExpression(ExpressionFlags expressionFlags);
    public CoalesceExpression coalesceExpression(ExpressionFlags expressionFlags);
    public CaseExpression caseExpression(ExpressionFlags expressionFlags);
    public ConvertCall convertCall();
    public TryConvertCall tryConvertCall();
    public ParameterlessCall parameterlessCall();
    public ParenthesisExpression expressionParenthesis(ExpressionFlags expressionFlags);
    public UserDefinedTypeCallTarget userDefinedTypeCallTarget();
    public FunctionCall udtFunctionExpression(UserDefinedTypeCallTarget vCallTarget);
    public UserDefinedTypePropertyAccess udtPropertyExpression(UserDefinedTypeCallTarget vCallTarget);
    public FunctionCall basicFunctionCall();
    public OverClause overClause();
    public OverClause overClauseBeginning();
    public WindowFrameClause windowFrameClause();
    public OverClause overClauseNoOrderBy();
    public void windowFrameExtent(WindowFrameClause vParent);
    public WindowDelimiter windowFrameDelimiter();
    public WithinGroupClause withinGroupClause();
    public void regularBuiltInFunctionCall(FunctionCall vParent);
    public void aggregateBuiltInFunctionCall(FunctionCall vParent);
    public void withinGroupOrOverClause(FunctionCall vParent);
    public void reservedBuiltInFunctionCallParameters(TSqlFragment vParent, IList`1<ScalarExpression> parameters);
    public SimpleWhenClause simpleWhenClause(ExpressionFlags expressionFlags);
    public SearchedWhenClause searchedWhenClause(ExpressionFlags expressionFlags);
    public SimpleCaseExpression simpleCaseExpression(ScalarExpression inputExpression, ExpressionFlags expressionFlags);
    public SearchedCaseExpression searchedCaseExpression(ExpressionFlags expressionFlags);
    public ValueExpression globalVariableOrVariableReference();
    public SchemaObjectNameOrValueExpression objectOrVariable();
    public MoneyLiteral moneyLiteral();
    public OdbcLiteral odbcLiteral();
    private void initializeFactory();
    private static Int64[] mk_tokenSet_0_();
    private static Int64[] mk_tokenSet_1_();
    private static Int64[] mk_tokenSet_2_();
    private static Int64[] mk_tokenSet_3_();
    private static Int64[] mk_tokenSet_4_();
    private static Int64[] mk_tokenSet_5_();
    private static Int64[] mk_tokenSet_6_();
    private static Int64[] mk_tokenSet_7_();
    private static Int64[] mk_tokenSet_8_();
    private static Int64[] mk_tokenSet_9_();
    private static Int64[] mk_tokenSet_10_();
    private static Int64[] mk_tokenSet_11_();
    private static Int64[] mk_tokenSet_12_();
    private static Int64[] mk_tokenSet_13_();
    private static Int64[] mk_tokenSet_14_();
    private static Int64[] mk_tokenSet_15_();
    private static Int64[] mk_tokenSet_16_();
    private static Int64[] mk_tokenSet_17_();
    private static Int64[] mk_tokenSet_18_();
    private static Int64[] mk_tokenSet_19_();
    private static Int64[] mk_tokenSet_20_();
    private static Int64[] mk_tokenSet_21_();
    private static Int64[] mk_tokenSet_22_();
    private static Int64[] mk_tokenSet_23_();
    private static Int64[] mk_tokenSet_24_();
    private static Int64[] mk_tokenSet_25_();
    private static Int64[] mk_tokenSet_26_();
    private static Int64[] mk_tokenSet_27_();
    private static Int64[] mk_tokenSet_28_();
    private static Int64[] mk_tokenSet_29_();
    private static Int64[] mk_tokenSet_30_();
    private static Int64[] mk_tokenSet_31_();
    private static Int64[] mk_tokenSet_32_();
    private static Int64[] mk_tokenSet_33_();
    private static Int64[] mk_tokenSet_34_();
    private static Int64[] mk_tokenSet_35_();
    private static Int64[] mk_tokenSet_36_();
    private static Int64[] mk_tokenSet_37_();
    private static Int64[] mk_tokenSet_38_();
    private static Int64[] mk_tokenSet_39_();
    private static Int64[] mk_tokenSet_40_();
    private static Int64[] mk_tokenSet_41_();
    private static Int64[] mk_tokenSet_42_();
    private static Int64[] mk_tokenSet_43_();
    private static Int64[] mk_tokenSet_44_();
    private static Int64[] mk_tokenSet_45_();
    private static Int64[] mk_tokenSet_46_();
    private static Int64[] mk_tokenSet_47_();
    private static Int64[] mk_tokenSet_48_();
    private static Int64[] mk_tokenSet_49_();
    private static Int64[] mk_tokenSet_50_();
    private static Int64[] mk_tokenSet_51_();
    private static Int64[] mk_tokenSet_52_();
    private static Int64[] mk_tokenSet_53_();
    private static Int64[] mk_tokenSet_54_();
    private static Int64[] mk_tokenSet_55_();
    private static Int64[] mk_tokenSet_56_();
    private static Int64[] mk_tokenSet_57_();
    private static Int64[] mk_tokenSet_58_();
    private static Int64[] mk_tokenSet_59_();
    private static Int64[] mk_tokenSet_60_();
    private static Int64[] mk_tokenSet_61_();
    private static Int64[] mk_tokenSet_62_();
    private static Int64[] mk_tokenSet_63_();
    private static Int64[] mk_tokenSet_64_();
    private static Int64[] mk_tokenSet_65_();
    private static Int64[] mk_tokenSet_66_();
    private static Int64[] mk_tokenSet_67_();
    private static Int64[] mk_tokenSet_68_();
    private static Int64[] mk_tokenSet_69_();
    private static Int64[] mk_tokenSet_70_();
    private static Int64[] mk_tokenSet_71_();
    private static Int64[] mk_tokenSet_72_();
    private static Int64[] mk_tokenSet_73_();
    private static Int64[] mk_tokenSet_74_();
    private static Int64[] mk_tokenSet_75_();
    private static Int64[] mk_tokenSet_76_();
    private static Int64[] mk_tokenSet_77_();
    private static Int64[] mk_tokenSet_78_();
    private static Int64[] mk_tokenSet_79_();
    private static Int64[] mk_tokenSet_80_();
    private static Int64[] mk_tokenSet_81_();
    private static Int64[] mk_tokenSet_82_();
    private static Int64[] mk_tokenSet_83_();
    private static Int64[] mk_tokenSet_84_();
    private static Int64[] mk_tokenSet_85_();
    private static Int64[] mk_tokenSet_86_();
    private static Int64[] mk_tokenSet_87_();
    private static Int64[] mk_tokenSet_88_();
    private static Int64[] mk_tokenSet_89_();
    private static Int64[] mk_tokenSet_90_();
    private static Int64[] mk_tokenSet_91_();
    private static Int64[] mk_tokenSet_92_();
    private static Int64[] mk_tokenSet_93_();
    private static Int64[] mk_tokenSet_94_();
    private static Int64[] mk_tokenSet_95_();
    private static Int64[] mk_tokenSet_96_();
    private static Int64[] mk_tokenSet_97_();
    private static Int64[] mk_tokenSet_98_();
    private static Int64[] mk_tokenSet_99_();
    private static Int64[] mk_tokenSet_100_();
    private static Int64[] mk_tokenSet_101_();
    private static Int64[] mk_tokenSet_102_();
    private static Int64[] mk_tokenSet_103_();
    private static Int64[] mk_tokenSet_104_();
    private static Int64[] mk_tokenSet_105_();
    private static Int64[] mk_tokenSet_106_();
    private static Int64[] mk_tokenSet_107_();
    private static Int64[] mk_tokenSet_108_();
    private static Int64[] mk_tokenSet_109_();
    private static Int64[] mk_tokenSet_110_();
    private static Int64[] mk_tokenSet_111_();
    private static Int64[] mk_tokenSet_112_();
    private static Int64[] mk_tokenSet_113_();
    private static Int64[] mk_tokenSet_114_();
    private static Int64[] mk_tokenSet_115_();
    private static Int64[] mk_tokenSet_116_();
    private static Int64[] mk_tokenSet_117_();
    private static Int64[] mk_tokenSet_118_();
    private static Int64[] mk_tokenSet_119_();
    private static Int64[] mk_tokenSet_120_();
    private static Int64[] mk_tokenSet_121_();
    private static Int64[] mk_tokenSet_122_();
    private static Int64[] mk_tokenSet_123_();
    private static Int64[] mk_tokenSet_124_();
    private static Int64[] mk_tokenSet_125_();
    private static Int64[] mk_tokenSet_126_();
    private static Int64[] mk_tokenSet_127_();
    private static Int64[] mk_tokenSet_128_();
    private static Int64[] mk_tokenSet_129_();
    private static Int64[] mk_tokenSet_130_();
    private static Int64[] mk_tokenSet_131_();
    private static Int64[] mk_tokenSet_132_();
    private static Int64[] mk_tokenSet_133_();
    private static Int64[] mk_tokenSet_134_();
    private static Int64[] mk_tokenSet_135_();
    private static Int64[] mk_tokenSet_136_();
    private static Int64[] mk_tokenSet_137_();
    private static Int64[] mk_tokenSet_138_();
    private static Int64[] mk_tokenSet_139_();
    private static Int64[] mk_tokenSet_140_();
    private static Int64[] mk_tokenSet_141_();
    private static Int64[] mk_tokenSet_142_();
    private static Int64[] mk_tokenSet_143_();
    private static Int64[] mk_tokenSet_144_();
    private static Int64[] mk_tokenSet_145_();
    private static Int64[] mk_tokenSet_146_();
    private static Int64[] mk_tokenSet_147_();
    private static Int64[] mk_tokenSet_148_();
    private static Int64[] mk_tokenSet_149_();
    private static Int64[] mk_tokenSet_150_();
    private static Int64[] mk_tokenSet_151_();
    private static Int64[] mk_tokenSet_152_();
    private static Int64[] mk_tokenSet_153_();
    private static Int64[] mk_tokenSet_154_();
    private static Int64[] mk_tokenSet_155_();
    private static Int64[] mk_tokenSet_156_();
    private static Int64[] mk_tokenSet_157_();
    private static Int64[] mk_tokenSet_158_();
    private static Int64[] mk_tokenSet_159_();
    private static Int64[] mk_tokenSet_160_();
    private static Int64[] mk_tokenSet_161_();
    private static Int64[] mk_tokenSet_162_();
    private static Int64[] mk_tokenSet_163_();
    private static Int64[] mk_tokenSet_164_();
    private static Int64[] mk_tokenSet_165_();
    private static Int64[] mk_tokenSet_166_();
    private static Int64[] mk_tokenSet_167_();
    private static Int64[] mk_tokenSet_168_();
    private static Int64[] mk_tokenSet_169_();
    private static Int64[] mk_tokenSet_170_();
    private static Int64[] mk_tokenSet_171_();
    private static Int64[] mk_tokenSet_172_();
    private static Int64[] mk_tokenSet_173_();
    private static Int64[] mk_tokenSet_174_();
    private static Int64[] mk_tokenSet_175_();
    private static Int64[] mk_tokenSet_176_();
    private static Int64[] mk_tokenSet_177_();
    private static Int64[] mk_tokenSet_178_();
    private static Int64[] mk_tokenSet_179_();
    private static Int64[] mk_tokenSet_180_();
    private static Int64[] mk_tokenSet_181_();
    private static Int64[] mk_tokenSet_182_();
    private static Int64[] mk_tokenSet_183_();
    private static Int64[] mk_tokenSet_184_();
    private static Int64[] mk_tokenSet_185_();
    private static Int64[] mk_tokenSet_186_();
    private static Int64[] mk_tokenSet_187_();
    private static Int64[] mk_tokenSet_188_();
    private static Int64[] mk_tokenSet_189_();
    private static Int64[] mk_tokenSet_190_();
    private static Int64[] mk_tokenSet_191_();
    private static Int64[] mk_tokenSet_192_();
    private static Int64[] mk_tokenSet_193_();
    private static Int64[] mk_tokenSet_194_();
    private static Int64[] mk_tokenSet_195_();
    private static Int64[] mk_tokenSet_196_();
    private static Int64[] mk_tokenSet_197_();
    private static Int64[] mk_tokenSet_198_();
    private static Int64[] mk_tokenSet_199_();
    private static Int64[] mk_tokenSet_200_();
}
internal class Microsoft.SqlServer.TransactSql.ScriptDom.TSql140LexerInternal : TSqlLexerBaseInternal {
    public static int EOF;
    public static int NULL_TREE_LOOKAHEAD;
    public static int Add;
    public static int All;
    public static int Alter;
    public static int And;
    public static int Any;
    public static int As;
    public static int Asc;
    public static int Authorization;
    public static int Backup;
    public static int Begin;
    public static int Between;
    public static int Break;
    public static int Browse;
    public static int Bulk;
    public static int By;
    public static int Cascade;
    public static int Case;
    public static int Check;
    public static int Checkpoint;
    public static int Close;
    public static int Clustered;
    public static int Coalesce;
    public static int Collate;
    public static int Column;
    public static int Commit;
    public static int Compute;
    public static int Constraint;
    public static int Contains;
    public static int ContainsTable;
    public static int Continue;
    public static int Convert;
    public static int Create;
    public static int Cross;
    public static int Current;
    public static int CurrentDate;
    public static int CurrentTime;
    public static int CurrentTimestamp;
    public static int CurrentUser;
    public static int Cursor;
    public static int Database;
    public static int Dbcc;
    public static int Deallocate;
    public static int Declare;
    public static int Default;
    public static int Delete;
    public static int Deny;
    public static int Desc;
    public static int Distinct;
    public static int Distributed;
    public static int Double;
    public static int Drop;
    public static int Else;
    public static int End;
    public static int Errlvl;
    public static int Escape;
    public static int Except;
    public static int Exec;
    public static int Execute;
    public static int Exists;
    public static int Exit;
    public static int Fetch;
    public static int File;
    public static int FillFactor;
    public static int For;
    public static int Foreign;
    public static int FreeText;
    public static int FreeTextTable;
    public static int From;
    public static int Full;
    public static int Function;
    public static int GoTo;
    public static int Grant;
    public static int Group;
    public static int Having;
    public static int HoldLock;
    public static int Identity;
    public static int IdentityInsert;
    public static int IdentityColumn;
    public static int If;
    public static int In;
    public static int Index;
    public static int Inner;
    public static int Insert;
    public static int Intersect;
    public static int Into;
    public static int Is;
    public static int Join;
    public static int Key;
    public static int Kill;
    public static int Left;
    public static int Like;
    public static int LineNo;
    public static int National;
    public static int NoCheck;
    public static int NonClustered;
    public static int Not;
    public static int Null;
    public static int NullIf;
    public static int Of;
    public static int Off;
    public static int Offsets;
    public static int On;
    public static int Open;
    public static int OpenDataSource;
    public static int OpenQuery;
    public static int OpenRowSet;
    public static int OpenXml;
    public static int Option;
    public static int Or;
    public static int Order;
    public static int Outer;
    public static int Over;
    public static int Percent;
    public static int Plan;
    public static int Primary;
    public static int Print;
    public static int Proc;
    public static int Procedure;
    public static int Public;
    public static int Raiserror;
    public static int Read;
    public static int ReadText;
    public static int Reconfigure;
    public static int References;
    public static int Replication;
    public static int Restore;
    public static int Restrict;
    public static int Return;
    public static int Revoke;
    public static int Right;
    public static int Rollback;
    public static int RowCount;
    public static int RowGuidColumn;
    public static int Rule;
    public static int Save;
    public static int Schema;
    public static int Select;
    public static int SessionUser;
    public static int Set;
    public static int SetUser;
    public static int Shutdown;
    public static int Some;
    public static int Statistics;
    public static int SystemUser;
    public static int Table;
    public static int TextSize;
    public static int Then;
    public static int To;
    public static int Top;
    public static int Tran;
    public static int Transaction;
    public static int Trigger;
    public static int Truncate;
    public static int TSEqual;
    public static int Union;
    public static int Unique;
    public static int Update;
    public static int UpdateText;
    public static int Use;
    public static int User;
    public static int Values;
    public static int Varying;
    public static int View;
    public static int WaitFor;
    public static int When;
    public static int Where;
    public static int While;
    public static int With;
    public static int WriteText;
    public static int Disk;
    public static int Precision;
    public static int External;
    public static int Revert;
    public static int Pivot;
    public static int Unpivot;
    public static int TableSample;
    public static int Dump;
    public static int Load;
    public static int Merge;
    public static int StopList;
    public static int SemanticKeyPhraseTable;
    public static int SemanticSimilarityTable;
    public static int SemanticSimilarityDetailsTable;
    public static int TryConvert;
    public static int Bang;
    public static int PercentSign;
    public static int Ampersand;
    public static int LeftParenthesis;
    public static int RightParenthesis;
    public static int LeftCurly;
    public static int RightCurly;
    public static int Star;
    public static int MultiplyEquals;
    public static int Plus;
    public static int Comma;
    public static int Minus;
    public static int Dot;
    public static int Divide;
    public static int Colon;
    public static int DoubleColon;
    public static int Semicolon;
    public static int LessThan;
    public static int EqualsSign;
    public static int RightOuterJoin;
    public static int GreaterThan;
    public static int Circumflex;
    public static int VerticalLine;
    public static int Tilde;
    public static int AddEquals;
    public static int SubtractEquals;
    public static int DivideEquals;
    public static int ModEquals;
    public static int BitwiseAndEquals;
    public static int BitwiseOrEquals;
    public static int BitwiseXorEquals;
    public static int Go;
    public static int Label;
    public static int Integer;
    public static int Numeric;
    public static int Real;
    public static int HexLiteral;
    public static int Money;
    public static int SqlCommandIdentifier;
    public static int PseudoColumn;
    public static int DollarPartition;
    public static int AsciiStringOrQuotedIdentifier;
    public static int AsciiStringLiteral;
    public static int UnicodeStringLiteral;
    public static int Identifier;
    public static int QuotedIdentifier;
    public static int Variable;
    public static int OdbcInitiator;
    public static int ProcNameSemicolon;
    public static int SingleLineComment;
    public static int MultilineComment;
    public static int WhiteSpace;
    public static int Digit;
    public static int FirstLetter;
    public static int Letter;
    public static int CharHighNotWhitespace;
    public static int MoneySign;
    public static int WS_CHAR_WO_NEWLINE;
    public static int Number;
    public static int Exponent;
    public static int EndOfLine;
    public static BitSet tokenSet_0_;
    public static BitSet tokenSet_1_;
    public static BitSet tokenSet_2_;
    public static BitSet tokenSet_3_;
    public static BitSet tokenSet_4_;
    public static BitSet tokenSet_5_;
    public static BitSet tokenSet_6_;
    public static BitSet tokenSet_7_;
    public static BitSet tokenSet_8_;
    public static BitSet tokenSet_9_;
    public static BitSet tokenSet_10_;
    public static BitSet tokenSet_11_;
    public static BitSet tokenSet_12_;
    public static BitSet tokenSet_13_;
    public TSql140LexerInternal(Stream ins);
    public TSql140LexerInternal(TextReader r);
    public TSql140LexerInternal(InputBuffer ib);
    public TSql140LexerInternal(LexerSharedInputState state);
    private static TSql140LexerInternal();
    private void initialize();
    public virtual IToken nextToken();
    public void mBang(bool _createToken);
    public void mPercentSign(bool _createToken);
    public void mAmpersand(bool _createToken);
    public void mLeftParenthesis(bool _createToken);
    public void mRightParenthesis(bool _createToken);
    public void mLeftCurly(bool _createToken);
    public void mRightCurly(bool _createToken);
    public void mStar(bool _createToken);
    public void mMultiplyEquals(bool _createToken);
    public void mPlus(bool _createToken);
    public void mComma(bool _createToken);
    public void mMinus(bool _createToken);
    protected void mDot(bool _createToken);
    public void mDivide(bool _createToken);
    public void mColon(bool _createToken);
    public void mDoubleColon(bool _createToken);
    public void mLessThan(bool _createToken);
    public void mEqualsSign(bool _createToken);
    public void mRightOuterJoin(bool _createToken);
    public void mGreaterThan(bool _createToken);
    public void mCircumflex(bool _createToken);
    public void mVerticalLine(bool _createToken);
    public void mTilde(bool _createToken);
    public void mAddEquals(bool _createToken);
    public void mSubtractEquals(bool _createToken);
    public void mDivideEquals(bool _createToken);
    public void mModEquals(bool _createToken);
    public void mBitwiseAndEquals(bool _createToken);
    public void mBitwiseOrEquals(bool _createToken);
    public void mBitwiseXorEquals(bool _createToken);
    protected void mSemicolon(bool _createToken);
    protected void mDigit(bool _createToken);
    protected void mFirstLetter(bool _createToken);
    protected void mCharHighNotWhitespace(bool _createToken);
    protected void mLetter(bool _createToken);
    protected void mMoneySign(bool _createToken);
    public void mProcNameSemicolon(bool _createToken);
    protected void mWS_CHAR_WO_NEWLINE(bool _createToken);
    public void mNumber(bool _createToken);
    public void mWhiteSpace(bool _createToken);
    protected void mEndOfLine(bool _createToken);
    public void mGo(bool _createToken);
    protected void mLabel(bool _createToken);
    protected void mInteger(bool _createToken);
    protected void mReal(bool _createToken);
    protected void mNumeric(bool _createToken);
    protected void mHexLiteral(bool _createToken);
    protected void mExponent(bool _createToken);
    protected void mMoney(bool _createToken);
    protected void mSqlCommandIdentifier(bool _createToken);
    protected void mPseudoColumn(bool _createToken);
    protected void mDollarPartition(bool _createToken);
    protected void mAsciiStringOrQuotedIdentifier(bool _createToken);
    public void mAsciiStringLiteral(bool _createToken);
    public void mUnicodeStringLiteral(bool _createToken);
    public void mIdentifier(bool _createToken);
    public void mQuotedIdentifier(bool _createToken);
    public void mVariable(bool _createToken);
    protected void mOdbcInitiator(bool _createToken);
    public void mSingleLineComment(bool _createToken);
    public void mMultilineComment(bool _createToken);
    private static Int64[] mk_tokenSet_0_();
    private static Int64[] mk_tokenSet_1_();
    private static Int64[] mk_tokenSet_2_();
    private static Int64[] mk_tokenSet_3_();
    private static Int64[] mk_tokenSet_4_();
    private static Int64[] mk_tokenSet_5_();
    private static Int64[] mk_tokenSet_6_();
    private static Int64[] mk_tokenSet_7_();
    private static Int64[] mk_tokenSet_8_();
    private static Int64[] mk_tokenSet_9_();
    private static Int64[] mk_tokenSet_10_();
    private static Int64[] mk_tokenSet_11_();
    private static Int64[] mk_tokenSet_12_();
    private static Int64[] mk_tokenSet_13_();
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.TSql140Parser : TSqlParser {
    protected SqlEngineType engineType;
    public TSql140Parser(bool initialQuotedIdentifiers);
    public TSql140Parser(bool initialQuotedIdentifiers, SqlEngineType engineType);
    internal virtual TSqlLexerBaseInternal GetNewInternalLexer();
    private TSql140ParserInternal GetNewInternalParser();
    private TSql140ParserInternal GetNewInternalParserForInput(TextReader input, IList`1& errors, int startOffset, int startLine, int startColumn);
    public virtual TSqlFragment Parse(IList`1<TSqlParserToken> tokens, IList`1& errors);
    public virtual ChildObjectName ParseChildObjectName(TextReader input, IList`1& errors, int startOffset, int startLine, int startColumn);
    public virtual SchemaObjectName ParseSchemaObjectName(TextReader input, IList`1& errors, int startOffset, int startLine, int startColumn);
    public virtual DataTypeReference ParseScalarDataType(TextReader input, IList`1& errors, int startOffset, int startLine, int startColumn);
    public virtual ScalarExpression ParseExpression(TextReader input, IList`1& errors, int startOffset, int startLine, int startColumn);
    public virtual BooleanExpression ParseBooleanExpression(TextReader input, IList`1& errors, int startOffset, int startLine, int startColumn);
    public virtual StatementList ParseStatementList(TextReader input, IList`1& errors, int startOffset, int startLine, int startColumn);
    public virtual SelectStatement ParseSubQueryExpressionWithOptionalCTE(TextReader input, IList`1& errors, int startOffset, int startLine, int startColumn);
    internal IPv4 ParseIPv4(TextReader input, IList`1& errors, int startOffset, int startLine, int startColumn);
    public virtual TSqlFragment ParseConstantOrIdentifier(TextReader input, IList`1& errors, int startOffset, int startLine, int startColumn);
    public virtual TSqlFragment ParseConstantOrIdentifierWithDefault(TextReader input, IList`1& errors, int startOffset, int startLine, int startColumn);
    internal virtual TSqlStatement PhaseOneParse(TextReader input);
}
internal abstract class Microsoft.SqlServer.TransactSql.ScriptDom.TSql140ParserBaseInternal : TSql130ParserBaseInternal {
    protected TSql140ParserBaseInternal(TokenBuffer tokenBuf, int k);
    protected TSql140ParserBaseInternal(ParserSharedInputState state, int k);
    protected TSql140ParserBaseInternal(TokenStream lexer, int k);
    public TSql140ParserBaseInternal(bool initialQuotedIdentifiersOn);
    protected static bool TryMatch(Literal literal, string keyword);
    protected static void VerifyAllowedIndexOption140(IndexAffectingStatement statement, IndexOption option);
    protected static void CheckForDataFileFormatProhibitedOptionsBulkInsert(int encounteredOptions, BulkInsertStatement statement);
    protected static void CheckForDataFileFormatProhibitedOptionsInOpenRowsetBulk(int encounteredOptions, TSqlFragment relatedFragment);
    protected Identifier CreateIdentifierFromToken(IToken token);
    protected IdentifierOrScalarExpression CreateIdentifierOrScalarExpressionFromIdentifier(Identifier identifier);
}
internal class Microsoft.SqlServer.TransactSql.ScriptDom.TSql140ParserInternal : TSql140ParserBaseInternal {
    public static int EOF;
    public static int NULL_TREE_LOOKAHEAD;
    public static int Add;
    public static int All;
    public static int Alter;
    public static int And;
    public static int Any;
    public static int As;
    public static int Asc;
    public static int Authorization;
    public static int Backup;
    public static int Begin;
    public static int Between;
    public static int Break;
    public static int Browse;
    public static int Bulk;
    public static int By;
    public static int Cascade;
    public static int Case;
    public static int Check;
    public static int Checkpoint;
    public static int Close;
    public static int Clustered;
    public static int Coalesce;
    public static int Collate;
    public static int Column;
    public static int Commit;
    public static int Compute;
    public static int Constraint;
    public static int Contains;
    public static int ContainsTable;
    public static int Continue;
    public static int Convert;
    public static int Create;
    public static int Cross;
    public static int Current;
    public static int CurrentDate;
    public static int CurrentTime;
    public static int CurrentTimestamp;
    public static int CurrentUser;
    public static int Cursor;
    public static int Database;
    public static int Dbcc;
    public static int Deallocate;
    public static int Declare;
    public static int Default;
    public static int Delete;
    public static int Deny;
    public static int Desc;
    public static int Distinct;
    public static int Distributed;
    public static int Double;
    public static int Drop;
    public static int Else;
    public static int End;
    public static int Errlvl;
    public static int Escape;
    public static int Except;
    public static int Exec;
    public static int Execute;
    public static int Exists;
    public static int Exit;
    public static int Fetch;
    public static int File;
    public static int FillFactor;
    public static int For;
    public static int Foreign;
    public static int FreeText;
    public static int FreeTextTable;
    public static int From;
    public static int Full;
    public static int Function;
    public static int GoTo;
    public static int Grant;
    public static int Group;
    public static int Having;
    public static int HoldLock;
    public static int Identity;
    public static int IdentityInsert;
    public static int IdentityColumn;
    public static int If;
    public static int In;
    public static int Index;
    public static int Inner;
    public static int Insert;
    public static int Intersect;
    public static int Into;
    public static int Is;
    public static int Join;
    public static int Key;
    public static int Kill;
    public static int Left;
    public static int Like;
    public static int LineNo;
    public static int National;
    public static int NoCheck;
    public static int NonClustered;
    public static int Not;
    public static int Null;
    public static int NullIf;
    public static int Of;
    public static int Off;
    public static int Offsets;
    public static int On;
    public static int Open;
    public static int OpenDataSource;
    public static int OpenQuery;
    public static int OpenRowSet;
    public static int OpenXml;
    public static int Option;
    public static int Or;
    public static int Order;
    public static int Outer;
    public static int Over;
    public static int Percent;
    public static int Plan;
    public static int Primary;
    public static int Print;
    public static int Proc;
    public static int Procedure;
    public static int Public;
    public static int Raiserror;
    public static int Read;
    public static int ReadText;
    public static int Reconfigure;
    public static int References;
    public static int Replication;
    public static int Restore;
    public static int Restrict;
    public static int Return;
    public static int Revoke;
    public static int Right;
    public static int Rollback;
    public static int RowCount;
    public static int RowGuidColumn;
    public static int Rule;
    public static int Save;
    public static int Schema;
    public static int Select;
    public static int SessionUser;
    public static int Set;
    public static int SetUser;
    public static int Shutdown;
    public static int Some;
    public static int Statistics;
    public static int SystemUser;
    public static int Table;
    public static int TextSize;
    public static int Then;
    public static int To;
    public static int Top;
    public static int Tran;
    public static int Transaction;
    public static int Trigger;
    public static int Truncate;
    public static int TSEqual;
    public static int Union;
    public static int Unique;
    public static int Update;
    public static int UpdateText;
    public static int Use;
    public static int User;
    public static int Values;
    public static int Varying;
    public static int View;
    public static int WaitFor;
    public static int When;
    public static int Where;
    public static int While;
    public static int With;
    public static int WriteText;
    public static int Disk;
    public static int Precision;
    public static int External;
    public static int Revert;
    public static int Pivot;
    public static int Unpivot;
    public static int TableSample;
    public static int Dump;
    public static int Load;
    public static int Merge;
    public static int StopList;
    public static int SemanticKeyPhraseTable;
    public static int SemanticSimilarityTable;
    public static int SemanticSimilarityDetailsTable;
    public static int TryConvert;
    public static int Bang;
    public static int PercentSign;
    public static int Ampersand;
    public static int LeftParenthesis;
    public static int RightParenthesis;
    public static int LeftCurly;
    public static int RightCurly;
    public static int Star;
    public static int MultiplyEquals;
    public static int Plus;
    public static int Comma;
    public static int Minus;
    public static int Dot;
    public static int Divide;
    public static int Colon;
    public static int DoubleColon;
    public static int Semicolon;
    public static int LessThan;
    public static int EqualsSign;
    public static int RightOuterJoin;
    public static int GreaterThan;
    public static int Circumflex;
    public static int VerticalLine;
    public static int Tilde;
    public static int AddEquals;
    public static int SubtractEquals;
    public static int DivideEquals;
    public static int ModEquals;
    public static int BitwiseAndEquals;
    public static int BitwiseOrEquals;
    public static int BitwiseXorEquals;
    public static int Go;
    public static int Label;
    public static int Integer;
    public static int Numeric;
    public static int Real;
    public static int HexLiteral;
    public static int Money;
    public static int SqlCommandIdentifier;
    public static int PseudoColumn;
    public static int DollarPartition;
    public static int AsciiStringOrQuotedIdentifier;
    public static int AsciiStringLiteral;
    public static int UnicodeStringLiteral;
    public static int Identifier;
    public static int QuotedIdentifier;
    public static int Variable;
    public static int OdbcInitiator;
    public static int ProcNameSemicolon;
    public static int SingleLineComment;
    public static int MultilineComment;
    public static int WhiteSpace;
    public static int Credential;
    public static int Object;
    public static String[] tokenNames_;
    public static BitSet tokenSet_0_;
    public static BitSet tokenSet_1_;
    public static BitSet tokenSet_2_;
    public static BitSet tokenSet_3_;
    public static BitSet tokenSet_4_;
    public static BitSet tokenSet_5_;
    public static BitSet tokenSet_6_;
    public static BitSet tokenSet_7_;
    public static BitSet tokenSet_8_;
    public static BitSet tokenSet_9_;
    public static BitSet tokenSet_10_;
    public static BitSet tokenSet_11_;
    public static BitSet tokenSet_12_;
    public static BitSet tokenSet_13_;
    public static BitSet tokenSet_14_;
    public static BitSet tokenSet_15_;
    public static BitSet tokenSet_16_;
    public static BitSet tokenSet_17_;
    public static BitSet tokenSet_18_;
    public static BitSet tokenSet_19_;
    public static BitSet tokenSet_20_;
    public static BitSet tokenSet_21_;
    public static BitSet tokenSet_22_;
    public static BitSet tokenSet_23_;
    public static BitSet tokenSet_24_;
    public static BitSet tokenSet_25_;
    public static BitSet tokenSet_26_;
    public static BitSet tokenSet_27_;
    public static BitSet tokenSet_28_;
    public static BitSet tokenSet_29_;
    public static BitSet tokenSet_30_;
    public static BitSet tokenSet_31_;
    public static BitSet tokenSet_32_;
    public static BitSet tokenSet_33_;
    public static BitSet tokenSet_34_;
    public static BitSet tokenSet_35_;
    public static BitSet tokenSet_36_;
    public static BitSet tokenSet_37_;
    public static BitSet tokenSet_38_;
    public static BitSet tokenSet_39_;
    public static BitSet tokenSet_40_;
    public static BitSet tokenSet_41_;
    public static BitSet tokenSet_42_;
    public static BitSet tokenSet_43_;
    public static BitSet tokenSet_44_;
    public static BitSet tokenSet_45_;
    public static BitSet tokenSet_46_;
    public static BitSet tokenSet_47_;
    public static BitSet tokenSet_48_;
    public static BitSet tokenSet_49_;
    public static BitSet tokenSet_50_;
    public static BitSet tokenSet_51_;
    public static BitSet tokenSet_52_;
    public static BitSet tokenSet_53_;
    public static BitSet tokenSet_54_;
    public static BitSet tokenSet_55_;
    public static BitSet tokenSet_56_;
    public static BitSet tokenSet_57_;
    public static BitSet tokenSet_58_;
    public static BitSet tokenSet_59_;
    public static BitSet tokenSet_60_;
    public static BitSet tokenSet_61_;
    public static BitSet tokenSet_62_;
    public static BitSet tokenSet_63_;
    public static BitSet tokenSet_64_;
    public static BitSet tokenSet_65_;
    public static BitSet tokenSet_66_;
    public static BitSet tokenSet_67_;
    public static BitSet tokenSet_68_;
    public static BitSet tokenSet_69_;
    public static BitSet tokenSet_70_;
    public static BitSet tokenSet_71_;
    public static BitSet tokenSet_72_;
    public static BitSet tokenSet_73_;
    public static BitSet tokenSet_74_;
    public static BitSet tokenSet_75_;
    public static BitSet tokenSet_76_;
    public static BitSet tokenSet_77_;
    public static BitSet tokenSet_78_;
    public static BitSet tokenSet_79_;
    public static BitSet tokenSet_80_;
    public static BitSet tokenSet_81_;
    public static BitSet tokenSet_82_;
    public static BitSet tokenSet_83_;
    public static BitSet tokenSet_84_;
    public static BitSet tokenSet_85_;
    public static BitSet tokenSet_86_;
    public static BitSet tokenSet_87_;
    public static BitSet tokenSet_88_;
    public static BitSet tokenSet_89_;
    public static BitSet tokenSet_90_;
    public static BitSet tokenSet_91_;
    public static BitSet tokenSet_92_;
    public static BitSet tokenSet_93_;
    public static BitSet tokenSet_94_;
    public static BitSet tokenSet_95_;
    public static BitSet tokenSet_96_;
    public static BitSet tokenSet_97_;
    public static BitSet tokenSet_98_;
    public static BitSet tokenSet_99_;
    public static BitSet tokenSet_100_;
    public static BitSet tokenSet_101_;
    public static BitSet tokenSet_102_;
    public static BitSet tokenSet_103_;
    public static BitSet tokenSet_104_;
    public static BitSet tokenSet_105_;
    public static BitSet tokenSet_106_;
    public static BitSet tokenSet_107_;
    public static BitSet tokenSet_108_;
    public static BitSet tokenSet_109_;
    public static BitSet tokenSet_110_;
    public static BitSet tokenSet_111_;
    public static BitSet tokenSet_112_;
    public static BitSet tokenSet_113_;
    public static BitSet tokenSet_114_;
    public static BitSet tokenSet_115_;
    public static BitSet tokenSet_116_;
    public static BitSet tokenSet_117_;
    public static BitSet tokenSet_118_;
    public static BitSet tokenSet_119_;
    public static BitSet tokenSet_120_;
    public static BitSet tokenSet_121_;
    public static BitSet tokenSet_122_;
    public static BitSet tokenSet_123_;
    public static BitSet tokenSet_124_;
    public static BitSet tokenSet_125_;
    public static BitSet tokenSet_126_;
    public static BitSet tokenSet_127_;
    public static BitSet tokenSet_128_;
    public static BitSet tokenSet_129_;
    public static BitSet tokenSet_130_;
    public static BitSet tokenSet_131_;
    public static BitSet tokenSet_132_;
    public static BitSet tokenSet_133_;
    public static BitSet tokenSet_134_;
    public static BitSet tokenSet_135_;
    public static BitSet tokenSet_136_;
    public static BitSet tokenSet_137_;
    public static BitSet tokenSet_138_;
    public static BitSet tokenSet_139_;
    public static BitSet tokenSet_140_;
    public static BitSet tokenSet_141_;
    public static BitSet tokenSet_142_;
    public static BitSet tokenSet_143_;
    public static BitSet tokenSet_144_;
    public static BitSet tokenSet_145_;
    public static BitSet tokenSet_146_;
    public static BitSet tokenSet_147_;
    public static BitSet tokenSet_148_;
    public static BitSet tokenSet_149_;
    public static BitSet tokenSet_150_;
    public static BitSet tokenSet_151_;
    public static BitSet tokenSet_152_;
    public static BitSet tokenSet_153_;
    public static BitSet tokenSet_154_;
    public static BitSet tokenSet_155_;
    public static BitSet tokenSet_156_;
    public static BitSet tokenSet_157_;
    public static BitSet tokenSet_158_;
    public static BitSet tokenSet_159_;
    public static BitSet tokenSet_160_;
    public static BitSet tokenSet_161_;
    public static BitSet tokenSet_162_;
    public static BitSet tokenSet_163_;
    public static BitSet tokenSet_164_;
    public static BitSet tokenSet_165_;
    public static BitSet tokenSet_166_;
    public static BitSet tokenSet_167_;
    public static BitSet tokenSet_168_;
    public static BitSet tokenSet_169_;
    public static BitSet tokenSet_170_;
    public static BitSet tokenSet_171_;
    public static BitSet tokenSet_172_;
    public static BitSet tokenSet_173_;
    public static BitSet tokenSet_174_;
    public static BitSet tokenSet_175_;
    public static BitSet tokenSet_176_;
    public static BitSet tokenSet_177_;
    public static BitSet tokenSet_178_;
    public static BitSet tokenSet_179_;
    public static BitSet tokenSet_180_;
    public static BitSet tokenSet_181_;
    public static BitSet tokenSet_182_;
    public static BitSet tokenSet_183_;
    public static BitSet tokenSet_184_;
    public static BitSet tokenSet_185_;
    public static BitSet tokenSet_186_;
    public static BitSet tokenSet_187_;
    public static BitSet tokenSet_188_;
    public static BitSet tokenSet_189_;
    public static BitSet tokenSet_190_;
    public static BitSet tokenSet_191_;
    public static BitSet tokenSet_192_;
    public static BitSet tokenSet_193_;
    public static BitSet tokenSet_194_;
    public static BitSet tokenSet_195_;
    public static BitSet tokenSet_196_;
    public static BitSet tokenSet_197_;
    public static BitSet tokenSet_198_;
    public static BitSet tokenSet_199_;
    public static BitSet tokenSet_200_;
    public static BitSet tokenSet_201_;
    public static BitSet tokenSet_202_;
    public static BitSet tokenSet_203_;
    public static BitSet tokenSet_204_;
    public static BitSet tokenSet_205_;
    public TSql140ParserInternal(bool initialQuotedIdentifiersOn);
    protected TSql140ParserInternal(TokenBuffer tokenBuf, int k);
    public TSql140ParserInternal(TokenBuffer tokenBuf);
    protected TSql140ParserInternal(TokenStream lexer, int k);
    public TSql140ParserInternal(TokenStream lexer);
    public TSql140ParserInternal(ParserSharedInputState state);
    private static TSql140ParserInternal();
    protected void initialize();
    public ChildObjectName entryPointChildObjectName();
    public ChildObjectName childObjectNameWithThreePrefixes();
    public SchemaObjectName entryPointSchemaObjectName();
    public SchemaObjectName schemaObjectFourPartName();
    public DataTypeReference entryPointScalarDataType();
    public DataTypeReference scalarDataType();
    public ScalarExpression entryPointExpression();
    public ScalarExpression expression();
    public BooleanExpression entryPointBooleanExpression();
    public BooleanExpression booleanExpression();
    public StatementList entryPointStatementList();
    public StatementList statementList(Boolean& vParseErrorOccurred);
    public SelectStatement entryPointSubqueryExpressionWithOptionalCTE();
    public SelectFunctionReturnType functionReturnClauseRelational();
    public IPv4 entryPointIPv4Address();
    public IPv4 ipAddressV4();
    public TSqlFragment entryPointConstantOrIdentifier();
    public ScalarExpression possibleNegativeConstantOrIdentifier();
    public TSqlFragment entryPointConstantOrIdentifierWithDefault();
    public ScalarExpression possibleNegativeConstantOrIdentifierWithDefault();
    public TSqlScript script();
    public TSqlBatch batch();
    public TSqlStatement lastStatementOptSemi();
    public ExecuteStatement optSimpleExecute();
    public TSqlStatement statementOptSemi();
    public TSqlStatement statement();
    public void optSemicolons(TSqlStatement vParent);
    public TSqlStatement lastStatement();
    public RenameEntityStatement renameEntityStatement();
    public Identifier securityStatementPermission();
    public SchemaObjectName schemaObjectThreePartName();
    public Identifier identifier();
    public void ctasCreateTableStatement(CreateTableStatement vParent);
    public void columnNameList(TSqlFragment vParent, IList`1<Identifier> columnNames);
    public void withTableOptions(CreateTableStatement vParent);
    public SelectStatement selectStatement(SubDmlFlags subDmlFlags);
    public void ctasCreateExternalTableStatement(CreateExternalTableStatement vParent);
    public void withExternalTableOptions(CreateExternalTableStatement vParent);
    public ExecutableProcedureReference execProc();
    public CreateTableStatement createTableStatement();
    public AlterTableStatement alterTableStatement();
    public TSqlStatement createIndexStatement();
    public CopyStatement copyStatement();
    public TSqlStatement declareStatements();
    public TSqlStatement setStatements();
    public TSqlStatement beginStatements();
    public BreakStatement breakStatement();
    public ContinueStatement continueStatement();
    public IfStatement ifStatement();
    public WhileStatement whileStatement();
    public LabelStatement labelStatement();
    public TSqlStatement backupStatements();
    public TSqlStatement restoreStatements();
    public GoToStatement gotoStatement();
    public SaveTransactionStatement saveTransactionStatement();
    public RollbackTransactionStatement rollbackTransactionStatement();
    public CommitTransactionStatement commitTransactionStatement();
    public CreateStatisticsStatement createStatisticsStatement();
    public UpdateStatisticsStatement updateStatisticsStatement();
    public TSqlStatement alterDatabaseStatements();
    public ExecuteStatement executeStatement();
    public StatementWithCtesAndXmlNamespaces withCommonTableExpressionsAndXmlNamespacesStatements();
    public RaiseErrorStatement raiseErrorStatement();
    public TSqlStatement alter2005Statements();
    public TSqlStatement create2005Statements();
    public TSqlStatement createDatabaseStatements();
    public TSqlStatement addStatements();
    public TSqlStatement identifierStatements();
    public PrintStatement printStatement();
    public WaitForStatement waitForStatement();
    public ReadTextStatement readTextStatement();
    public UpdateTextStatement updateTextStatement();
    public WriteTextStatement writeTextStatement();
    public LineNoStatement lineNoStatement();
    public UseStatement useStatement();
    public TSqlStatement killStatements();
    public BulkInsertStatement bulkInsertStatement();
    public InsertBulkStatement insertBulkStatement();
    public CheckpointStatement checkpointStatement();
    public ReconfigureStatement reconfigureStatement();
    public ShutdownStatement shutdownStatement();
    public SetUserStatement setUserStatement();
    public TruncateTableStatement truncateTableStatement();
    public GrantStatement grantStatement90();
    public DenyStatement denyStatement90();
    public RevokeStatement revokeStatement90();
    public ReturnStatement returnStatement();
    public TSqlStatement openStatements();
    public TSqlStatement closeStatements();
    public DeallocateCursorStatement deallocateCursorStatement();
    public FetchCursorStatement fetchCursorStatement();
    public TSqlStatement dropStatements();
    public DbccStatement dbccStatement();
    public RevertStatement revertStatement();
    public ExecuteAsStatement executeAsStatement();
    public EndConversationStatement endConversationStatement();
    public WithCtesAndXmlNamespaces withCommonTableExpressionsAndXmlNamespaces();
    public SelectStatement select(SubDmlFlags subDmlFlags);
    public DeleteStatement deleteStatement(SubDmlFlags subDmlFlags);
    public InsertStatement insertStatement(SubDmlFlags subDmlFlags);
    public UpdateStatement updateStatement(SubDmlFlags subDmlFlags);
    public MergeStatement mergeStatement(SubDmlFlags subDmlFlags);
    public CreateProcedureStatement createProcedureStatement();
    public AlterProcedureStatement alterProcedureStatement();
    public CreateTriggerStatement createTriggerStatement();
    public AlterTriggerStatement alterTriggerStatement();
    public CreateDefaultStatement createDefaultStatement();
    public CreateRuleStatement createRuleStatement();
    public CreateViewStatement createViewStatement();
    public AlterViewStatement alterViewStatement();
    public CreateFunctionStatement createFunctionStatement();
    public AlterFunctionStatement alterFunctionStatement();
    public CreateSchemaStatement createSchemaStatement();
    public TSqlStatement createIdentifierStatement();
    public TSqlStatement alterIdentifierStatement();
    public UseFederationStatement useFederationStatement();
    public TSqlStatement createOrAlterStatements();
    public CreateViewStatement createMaterializedViewStatement();
    public CreateFederationStatement createFederationStatement();
    public AlterViewStatement alterMaterializedViewStatement();
    public AlterFederationStatement alterFederationStatement();
    public CreateOrAlterFunctionStatement createOrAlterFunctionStatement();
    public CreateOrAlterProcedureStatement createOrAlterProcedureStatement();
    public CreateOrAlterTriggerStatement createOrAlterTriggerStatement();
    public CreateOrAlterViewStatement createOrAlterViewStatement();
    public EnableDisableTriggerStatement disableTriggerStatement();
    public EnableDisableTriggerStatement enableTriggerStatement();
    public MoveConversationStatement moveConversationStatement();
    public GetConversationGroupStatement getConversationGroupStatement();
    public ReceiveStatement receiveStatement();
    public SendStatement sendStatement();
    public ThrowStatement throwStatement();
    public void enableDisableTriggerBody(EnableDisableTriggerStatement vParent);
    public TriggerObject triggerObject();
    public CreateAggregateStatement createAggregateStatement();
    public CreateApplicationRoleStatement createApplicationRoleStatement();
    public CreateAssemblyStatement createAssemblyStatement();
    public CreateAsymmetricKeyStatement createAsymmetricKeyStatement();
    public CreateAvailabilityGroupStatement createAvailabilityGroupStatement();
    public CreateBrokerPriorityStatement createBrokerPriorityStatement();
    public CreateCertificateStatement createCertificateStatement();
    public TSqlStatement createColumnStatements();
    public CreateColumnStoreIndexStatement createColumnStoreIndexStatement(IToken tUnique, Nullable`1<bool> isClustered);
    public CreateContractStatement createContractStatement();
    public CreateCredentialStatement createCredentialStatement();
    public CreateCryptographicProviderStatement createCryptographicProviderStatement();
    public CreateEndpointStatement createEndpointStatement();
    public TSqlStatement createEventStatement();
    public TSqlStatement createExternalStatements();
    public TSqlStatement createFulltextStatement();
    public IndexStatement createPrimaryXmlIndexStatement();
    public CreateSelectiveXmlIndexStatement createSelectiveXmlIndexStatement();
    public TSqlStatement createXmlStatements();
    public CreateLoginStatement createLoginStatement();
    public CreateMessageTypeStatement createMessageTypeStatement();
    public CreateMasterKeyStatement createMasterKeyStatement();
    public TSqlStatement createPartitionStatement();
    public CreateQueueStatement createQueueStatement();
    public CreateRemoteServiceBindingStatement createRemoteServiceBindingStatement();
    public CreateResourcePoolStatement createResourcePoolStatement();
    public CreateRoleStatement createRoleStatement();
    public CreateRouteStatement createRouteStatement();
    public CreateSearchPropertyListStatement createSearchPropertyListStatement();
    public CreateServiceStatement createServiceStatement();
    public CreateSpatialIndexStatement createSpatialIndexStatement();
    public CreateSymmetricKeyStatement createSymmetricKeyStatement();
    public CreateSynonymStatement createSynonymStatement();
    public CreateTypeStatement createTypeStatement();
    public TSqlStatement createServerStatements();
    public TSqlStatement createWorkloadStatements();
    public CreateSequenceStatement createSequenceStatement();
    public CreateSecurityPolicyStatement createSecurityPolicyStatement();
    public CreateUserStatement createUserStatement();
    public ProcedureParameter aggregateParameter();
    public AssemblyName assemblyName();
    public Identifier identifierVariable();
    public NullableConstraintDefinition nullableConstraint();
    public void applicationRoleStatement(ApplicationRoleStatement vParent, bool defaultSchemaAndPasswordOnly);
    public void authorizationOpt(IAuthorization vParent);
    public void expressionList(TSqlFragment vParent, IList`1<ScalarExpression> expressions);
    public PermissionSetAssemblyOption assemblyPermissionSetOption(IToken tPermissionSetVisibility);
    public CreateExternalLibraryStatement createExternalLibraryStatement();
    public ExternalLibraryFileOption createExternalLibraryFileOption();
    public StringLiteral nonEmptyString();
    public AlterExternalLibraryStatement alterExternalLibraryStatement();
    public ExternalLibraryFileOption alterExternalLibraryFileOption();
    public DropExternalLibraryStatement dropExternalLibraryStatement();
    public ValueExpression binaryOrString();
    public BinaryLiteral binary();
    public StringLiteral stringLiteral();
    public void createAsymmetricKeyParams(CreateAsymmetricKeyStatement vParent);
    public Literal encryptClause();
    public EncryptionSource asymKeySource();
    public void asymKeySpec(CreateAsymmetricKeyStatement vParent);
    public FileEncryptionSource fileEncryptionSource();
    public AssemblyEncryptionSource assemblyEncryptionSource();
    public ProviderEncryptionSource providerEncryptionSource();
    public void providerKeySourceOptions(IList`1<KeyOption> optionsList, TSqlFragment vParent);
    public void createCertificateParams(CreateCertificateStatement vParent);
    public void createCertificateActivityFlag(CertificateStatementBase vParent);
    public void certificateSource(CreateCertificateStatement vParent);
    public CertificateOption certificateOption(CertificateOptionKinds encountered);
    public OptionState optionOnOff(TSqlFragment vParent);
    public void privateKeySpec(CertificateStatementBase vParent);
    public void certificatePrivateKeySpec(CertificateStatementBase vParent);
    public void passwordChangeOption(IPasswordChangeOption vParent);
    public ContractMessage contractMessage();
    public CreateCredentialStatement createDatabaseScopedCredentialStatement();
    public void credentialStatementBody(CredentialStatement vParent);
    public TSqlStatement createServerAuditStatements();
    public CreateServerRoleStatement createServerRoleStatement();
    public CreateServerAuditSpecificationStatement createServerAuditSpecificationStatement();
    public CreateServerAuditStatement createServerAuditStatement();
    public AuditTarget auditTargetClause(bool filePathRequired);
    public void auditCreateWithClause(ServerAuditStatement vParent);
    public BooleanExpression eventBooleanExpression();
    public AuditTargetOption auditFileOption();
    public MaxSizeAuditTargetOption maxSizeAuditFileOption();
    public MaxRolloverFilesAuditTargetOption maxRolloverFilesAuditFileOption();
    public OnOffAuditTargetOption reserveDiskSpaceAuditFileOption();
    public LiteralAuditTargetOption maxFilesAuditFileOption();
    public LiteralAuditTargetOption filePathAuditFileOption();
    public IntegerLiteral integer();
    public AuditOption auditCreateOption();
    public void auditWithClause(ServerAuditStatement vParent);
    public AuditOption auditOption();
    public QueueDelayAuditOption queueDelayAuditOption(IToken tOption);
    public OnFailureAuditOption onFailureAuditOption(IToken tOption);
    public AuditGuidAuditOption auditGuidAuditOption(IToken tOption);
    public StateAuditOption stateAuditOption(IToken tOption);
    public void auditSpecificationForClause(AuditSpecificationStatement vParent);
    public AuditSpecificationPart createAuditSpecificationDetail();
    public void auditSpecificationStateOpt(AuditSpecificationStatement vParent);
    public TSqlStatement alterServerStatements();
    public TSqlStatement alterServerAuditStatements();
    public TSqlStatement alterServerConfigurationStatement();
    public AlterServerRoleStatement alterServerRoleStatement();
    public AlterServerAuditSpecificationStatement alterServerAuditSpecificationStatement();
    public AlterServerAuditStatement alterServerAuditStatement();
    public AuditSpecificationPart auditSpecificationDetail();
    public AlterServerConfigurationStatement alterServerConfigurationSetProcessAffinityStatement();
    public AlterServerConfigurationSetBufferPoolExtensionStatement alterServerConfigurationSetBufferPoolExtensionStatement();
    public AlterServerConfigurationSetDiagnosticsLogStatement alterServerConfigurationSetDiagnosticsLogStatement();
    public AlterServerConfigurationSetFailoverClusterPropertyStatement alterServerConfigurationSetFailoverClusterPropertyStatement();
    public AlterServerConfigurationSetHadrClusterStatement alterServerConfigurationSetHadrClusterStatement();
    public AlterServerConfigurationSetSoftNumaStatement alterServerConfigurationSetSoftNumaStatement();
    public AlterServerConfigurationSoftNumaOption alterServerConfigurationSoftNumaOption();
    public OnOffOptionValue onOffOptionValue();
    public AlterServerConfigurationBufferPoolExtensionContainerOption alterServerConfigurationBufferPoolExtensionContainerOption();
    public AlterServerConfigurationBufferPoolExtensionOption alterServerConfigurationBufferPoolExtensionFileNameOption();
    public AlterServerConfigurationBufferPoolExtensionSizeOption alterServerConfigurationBufferPoolExtensionSizeOption();
    public LiteralOptionValue stringLiteralOptionValue();
    public LiteralOptionValue integerLiteralOptionValue();
    public MemoryUnit memUnit(TSqlFragment vParent);
    public AlterServerConfigurationDiagnosticsLogOption alterServerConfigurationDiagnosticsLogOption();
    public AlterServerConfigurationDiagnosticsLogMaxSizeOption alterServerConfigurationDiagnosticsLogMaxSizeOption();
    public LiteralOptionValue stringOrDefaultLiteralOptionValue();
    public LiteralOptionValue integerOrDefaultLiteralOptionValue();
    public LiteralOptionValue defaultLiteralOptionValue();
    public AlterServerConfigurationFailoverClusterPropertyOption alterServerConfigurationFailoverClusterPropertyOption();
    public LiteralOptionValue binaryOrDefaultLiteralOptionValue();
    public AlterServerConfigurationHadrClusterOption alterServerConfigurationHadrClusterOption();
    public void affinityRangeList(AlterServerConfigurationStatement vParent);
    public ProcessAffinityRange affinityRange();
    public AlterDatabaseAuditSpecificationStatement alterDatabaseAuditSpecification(IToken tAlter);
    public AlterCredentialStatement alterDatabaseScopedCredentialStatement(IToken tAlter);
    public AlterDatabaseScopedConfigurationStatement alterDatabaseScopedConfigurationStatement(IToken tAlter);
    public AlterDatabaseStatement alterDatabase(IToken tAlter);
    public AlterDatabaseEncryptionKeyStatement alterDatabaseEncryptionKey(IToken tAlter);
    public AlterDatabaseScopedConfigurationSetStatement alterDatabaseScopedConfigSet(bool forSecondary);
    public AlterDatabaseScopedConfigurationClearStatement alterDatabaseScopedConfigClear();
    public DatabaseConfigurationClearOption databaseConfigurationClearOption();
    public MaxDopConfigurationOption alterDatabaseScopedMaxDopOption(bool forSecondary);
    public OnOffPrimaryConfigurationOption alterDatabaseScopedOnOffPrimaryOption(bool forSecondary);
    public GenericConfigurationOption alterDatabaseScopedGenericOption(bool forSecondary);
    public DatabaseConfigurationOptionState databaseConfigurationOptionOnOffPrimary(TSqlFragment vParent);
    public IdentifierOrScalarExpression stringOrSignedIntegerOrIdentifier();
    public Identifier onOff();
    public SqlCommandIdentifier sqlCommandIdentifier();
    public AlterDatabaseStatement alterDbAdd();
    public AlterDatabaseStatement alterDbRemove();
    public AlterDatabaseStatement alterDbModify();
    public AlterDatabaseSetStatement alterDbSet();
    public AlterDatabaseCollateStatement alterDbCollate();
    public AlterDatabaseRebuildLogStatement alterDbRebuild();
    public void collation(ICollationSetter vParent);
    public FileDeclaration fileDecl(bool isAlterDbModifyFileStatement);
    public AlterDatabaseAddFileStatement alterDbAddFile();
    public AlterDatabaseAddFileGroupStatement alterDbAddFilegroup();
    public void fileDeclBodyList(TSqlFragment vParent, IList`1<FileDeclaration> fileDeclarations);
    public Identifier toFilegroup();
    public AlterDatabaseModifyFileGroupStatement alterDbModifyFilegroup();
    public AlterDatabaseModifyFileStatement alterDbModifyFile();
    public AlterDatabaseSetStatement alterDbModifyAzureOptions();
    public void azureOptions(TSqlFragment vParent, IList`1<DatabaseOption> vOptions);
    public AlterDatabaseTermination xactTermination();
    public AlterDatabaseSetStatement dbOptionStateList();
    public DatabaseOption dbOptionStateItem(UInt64& encounteredOptions);
    public CursorDefaultDatabaseOption cursorDefaultDbOption();
    public RecoveryDatabaseOption recoveryDbOption();
    public TargetRecoveryTimeDatabaseOption targetRecoveryTimeDbOption();
    public PageVerifyDatabaseOption pageVerifyDbOption();
    public PartnerDatabaseOption partnerOption();
    public WitnessDatabaseOption witnessOption();
    public ParameterizationDatabaseOption parameterizationOption();
    public LiteralDatabaseOption compatibilityLevelDbOption();
    public ChangeTrackingDatabaseOption changeTrackingDbOption();
    public ContainmentDatabaseOption dbContainmentOption();
    public DatabaseOption hadrDbOption();
    public DelayedDurabilityDatabaseOption dbDelayedDurabilityOption();
    public AutoCreateStatisticsDatabaseOption autoCreateStatisticsDbOption();
    public RemoteDataArchiveDatabaseOption remoteDataArchiveDbOption();
    public DatabaseOption createAlterDbOption(UInt64& encounteredOptions);
    public QueryStoreDatabaseOption queryStoreDbOption();
    public AutomaticTuningDatabaseOption automaticTuningDbOption();
    public DatabaseOption dbSingleIdentOption();
    public OnOffDatabaseOption alterDbOnOffOption();
    public void changeTrackingOnOptions(ChangeTrackingDatabaseOption vParent);
    public ChangeTrackingOptionDetail changeTrackingOneOption(Boolean& autoCleanupEncountered, Boolean& changeRetentionEncountered);
    public void queryStoreOnOptions(QueryStoreDatabaseOption vParent);
    public QueryStoreOption queryStoreOneOption();
    public QueryStoreDesiredStateOption queryStoreDesiredStateOption();
    public QueryStoreCapturePolicyOption queryStoreCaptureModeOption();
    public QueryStoreSizeCleanupPolicyOption queryStoreSizeCleanupModeOption();
    public QueryStoreDataFlushIntervalOption queryStoreDataFlushIntervalOption();
    public QueryStoreIntervalLengthOption queryStoreIntervalLengthOption();
    public QueryStoreMaxStorageSizeOption queryStoreMaxQdsSizeOption();
    public QueryStoreMaxPlansPerQueryOption queryStoreMaxPlansPerQueryOption();
    public QueryStoreTimeCleanupPolicyOption queryStoreTimeCleanupPolicy();
    public void automaticTuningOptions(AutomaticTuningDatabaseOption vParent);
    public AutomaticTuningOption automaticTuningOneOption();
    public AutomaticTuningForceLastGoodPlanOption automaticTuningForceLastGoodPlanOption();
    public AutomaticTuningCreateIndexOption automaticTuningCreateIndexOption();
    public AutomaticTuningDropIndexOption automaticTuningDropIndexOption();
    public AutomaticTuningMaintainIndexOption automaticTuningMaintainIndexOption();
    public HadrAvailabilityGroupDatabaseOption hadrAvailabilityDbOption();
    public HadrDatabaseOption simpleHadrDbOption();
    public AuditSpecificationPart auditSpecificationDetailDb();
    public CryptoMechanism dekEncryptor();
    public AddSensitivityClassificationStatement addSensitivityClassificationStatement();
    public ColumnReferenceExpression column();
    public SensitivityClassificationOption sensitivityClassificationOption();
    public DropSensitivityClassificationStatement dropSensitivityClassificationStatement();
    public CreateDatabaseAuditSpecificationStatement createDatabaseAuditSpecification();
    public CreateDatabaseStatement createDatabase();
    public CreateDatabaseEncryptionKeyStatement createDatabaseEncryptionKey();
    public void azureAsCopyOf(CreateDatabaseStatement vParent);
    public void recoveryUnitList(CreateDatabaseStatement vParent);
    public void collationOpt(ICollationSetter vParent);
    public void dbAddendums(CreateDatabaseStatement vParent);
    public void withCreateDbOptions(CreateDatabaseStatement vParent);
    public DatabaseOption azureOption();
    public MaxSizeDatabaseOption azureMaxSizeDatabaseOption();
    public LiteralDatabaseOption azureEditionDatabaseOption();
    public LiteralDatabaseOption azureServiceObjectiveDatabaseOption();
    public MultiPartIdentifier multiPartIdentifier(int vMaxNumber);
    public void onDisk(CreateDatabaseStatement vParent);
    public FileGroupDefinition fileGroupDecl();
    public FileDeclaration fileDeclBody(bool isAlterDbModifyFileStatement);
    public FileDeclarationOption fileOption(bool newNameAllowed);
    public NameFileDeclarationOption nameFileOption();
    public FileNameFileDeclarationOption fileNameFileOption();
    public SizeFileDeclarationOption sizeFileOption();
    public MaxSizeFileDeclarationOption maxSizeFileOption();
    public FileGrowthFileDeclarationOption fileGrowthFileOption();
    public NameFileDeclarationOption newNameFileOption();
    public FileDeclarationOption offlineFileOption();
    public IdentifierOrValueExpression nonEmptyStringOrIdentifier();
    public DatabaseOption createDbServiceBrokerOption();
    public DatabaseOption restrictedUserCreateDbOption();
    public OnOffDatabaseOption createDbOnOffOption();
    public FileStreamDatabaseOption fileStreamCreateAlterDbOption();
    public DatabaseOption createAlterDbEqualsSignOption();
    public LiteralDatabaseOption createAlterDbLiteralOption(IToken tOption);
    public IdentifierDatabaseOption createAlterDbIdentifierOption(IToken tOption);
    public OnOffDatabaseOption createAlterDbOnOffOption(IToken tOption);
    public void fileStreamOption(FileStreamDatabaseOption vParent);
    public Literal stringLiteralOrNull();
    public void remoteDataArchiveDbSettingsList(RemoteDataArchiveDatabaseOption vParent);
    public RemoteDataArchiveDatabaseSetting remoteDataArchiveDbSetting(Identifier& rdaOptionIdentifier);
    public AuditSpecificationPart createAuditSpecificationDetailDb();
    public AuditActionSpecification auditActionSpecification();
    public AuditActionGroupReference databaseAuditActionGroup();
    public AuditActionGroupReference serverAuditActionGroup();
    public DatabaseAuditAction actionWithQual();
    public SecurityTargetObject securityTargetObject(bool vColumnsDisallowed);
    public SecurityPrincipal principal();
    public void dekEncryptorType(CryptoMechanism vParent);
    public BackupCertificateStatement backupCertificateStatement();
    public BackupServiceMasterKeyStatement backupServiceMasterKeyStatement();
    public BackupMasterKeyStatement backupMasterKeyStatement();
    public BackupStatement backupStatement();
    public BackupStatement backupMain();
    public void backupDevices(BackupStatement vParent);
    public void backupOptions(BackupStatement vParent);
    public RestoreServiceMasterKeyStatement restoreServiceMasterKeyStatement();
    public RestoreMasterKeyStatement restoreMasterKeyStatement();
    public RestoreStatement restoreStatement();
    public void restoreMain(RestoreStatement vParent);
    public void devList(TSqlFragment vParent, IList`1<DeviceInfo> deviceInfos);
    public void restoreOptions(RestoreStatement vParent);
    public BackupDatabaseStatement backupDatabase();
    public BackupTransactionLogStatement backupTransactionLog();
    public IdentifierOrValueExpression identifierOrVariable();
    public void backupFileListOpt(BackupDatabaseStatement vParent);
    public BackupRestoreFileInfo backupRestoreFile();
    public void restoreFileListOpt(RestoreStatement vParent);
    public ValueExpression stringOrVariable();
    public void backupRestoreFileNameList(BackupRestoreFileInfo vParent);
    public MirrorToClause mirrorTo();
    public DeviceInfo deviceInfo();
    public BackupOption backupOption();
    public BackupEncryptionOption backupEncryptionOption();
    public ScalarExpression signedIntegerOrVariable();
    public CryptoMechanism backupEncrytor();
    public void restoreOptionsList(RestoreStatement vParent);
    public RestoreOption restoreOption();
    public FileStreamRestoreOption fileStreamRestoreOption();
    public RestoreOption simpleRestoreOption();
    public ValueExpression afterClause();
    public ScalarExpression signedInteger();
    public MoveRestoreOption moveRestoreOption();
    public ScalarExpressionRestoreOption fileRestoreOption();
    public void backupMasterKeyBody(BackupRestoreMasterKeyStatementBase vParent);
    public void restoreMasterKeyBody(BackupRestoreMasterKeyStatementBase vParent);
    public IdentifierOrValueExpression bulkInsertFrom();
    public void bulkInsertOptions(BulkInsertStatement vParent);
    public IdentifierOrValueExpression stringOrIdentifier();
    public BulkInsertOption bulkInsertOption();
    public OrderBulkInsertOption bulkInsertSortOrderOption();
    public LiteralBulkInsertOption simpleBulkInsertOptionWithValue();
    public BulkInsertOption simpleBulkInsertOptionNoValue();
    public BulkInsertOption insertBulkOption();
    public BulkInsertOption simpleInsertBulkOption();
    public Literal integerOrNumeric();
    public void coldefList(InsertBulkStatement vParent);
    public void insertBulkOptions(InsertBulkStatement vParent);
    public InsertBulkColumnDefinition coldefItem();
    public ColumnDefinitionBase columnDefinitionEx();
    public bool nullNotNull(TSqlFragment vParent);
    public ColumnWithSortOrder columnWithSortOrder();
    public OrderBulkInsertOption openRowsetBulkOrderHint();
    public void dbccNamedLiteralList(DbccStatement vParent);
    public void dbccOptions(DbccStatement vParent);
    public void dbccOptionsList(DbccStatement vParent);
    public void dbccOptionsListItems(DbccStatement vParent);
    public void dbccOptionsJoin(DbccStatement vParent);
    public DbccOption dbccOption();
    public DbccOption dbccJoinOption();
    public DbccNamedLiteral dbccNamedLiteral();
    public void endpointOptions(AlterCreateEndpointStatementBase vParent);
    public void protocolInfo(AlterCreateEndpointStatementBase vParent);
    public void payloadInfo(AlterCreateEndpointStatementBase vParent);
    public void endpointOption(AlterCreateEndpointStatementBase vParent);
    public void endpointState(AlterCreateEndpointStatementBase vParent);
    public void endpointAffinity(AlterCreateEndpointStatementBase vParent);
    public EndpointProtocolOption protocolOptionsItem(EndpointProtocol protocol, EndpointProtocolOptions encountered);
    public ListenerIPEndpointProtocolOption listenerIpProtocolOption(EndpointProtocol protocol, EndpointProtocolOptions encountered);
    public LiteralEndpointProtocolOption listenerPortProtocolOption(EndpointProtocol protocol, EndpointProtocolOptions encountered);
    public LiteralEndpointProtocolOption pathProtocolOption(EndpointProtocol protocol, EndpointProtocolOptions encountered);
    public LiteralEndpointProtocolOption siteProtocolOption(EndpointProtocol protocol, EndpointProtocolOptions encountered);
    public LiteralEndpointProtocolOption clearPortProtocolOption(EndpointProtocol protocol, EndpointProtocolOptions encountered);
    public LiteralEndpointProtocolOption sslPortProtocolOption(EndpointProtocol protocol, EndpointProtocolOptions encountered);
    public AuthenticationEndpointProtocolOption authenticationProtocolOption(EndpointProtocol protocol, EndpointProtocolOptions encountered);
    public PortsEndpointProtocolOption portsProtocolOption(EndpointProtocol protocol, EndpointProtocolOptions encountered);
    public LiteralEndpointProtocolOption authenticationRealmProtocolOption(EndpointProtocol protocol, EndpointProtocolOptions encountered);
    public LiteralEndpointProtocolOption defaultLogonDomainProtocolOption(EndpointProtocol protocol, EndpointProtocolOptions encountered);
    public CompressionEndpointProtocolOption compressionProtocolOption(EndpointProtocol protocol, EndpointProtocolOptions encountered);
    public void ipV4DotNumberTail(IPv4 vParent);
    public void ipV4DotLastTwoPartsTail(IPv4 vParent);
    public void ipV4NumericOrNumericIntegerTail(IPv4 vParent);
    public PayloadOption payloadOption(EndpointType type, PayloadOptionKinds encountered);
    public SoapMethod soapMethod(EndpointType type, PayloadOptionKinds encountered);
    public EnabledDisabledPayloadOption batchesPayloadOption(EndpointType type, PayloadOptionKinds encountered);
    public WsdlPayloadOption wsdlPayloadOption(EndpointType type, PayloadOptionKinds encountered);
    public EnabledDisabledPayloadOption sessionsPayloadOption(EndpointType type, PayloadOptionKinds encountered);
    public LoginTypePayloadOption loginTypePayloadOption(EndpointType type, PayloadOptionKinds encountered);
    public SessionTimeoutPayloadOption sessionTimeoutPayloadOption(EndpointType type, PayloadOptionKinds encountered);
    public LiteralPayloadOption databasePayloadOption(EndpointType type, PayloadOptionKinds encountered);
    public LiteralPayloadOption namespacePayloadOption(EndpointType type, PayloadOptionKinds encountered);
    public SchemaPayloadOption schemaPayloadOption(EndpointType type, PayloadOptionKinds encountered);
    public CharacterSetPayloadOption characterSetPayloadOption(EndpointType type, PayloadOptionKinds encountered);
    public LiteralPayloadOption headerLimitPayloadOption(EndpointType type, PayloadOptionKinds encountered);
    public AuthenticationPayloadOption authenticationPayloadOption(EndpointType type, PayloadOptionKinds encountered);
    public EncryptionPayloadOption encryptionPayloadOption(EndpointType type, PayloadOptionKinds encountered);
    public EnabledDisabledPayloadOption messageForwardingPayloadOption(EndpointType type, PayloadOptionKinds encountered);
    public LiteralPayloadOption messageForwardSizePayloadOption(EndpointType type, PayloadOptionKinds encountered);
    public RolePayloadOption rolePayloadOption(EndpointType type, PayloadOptionKinds encountered);
    public void enabledDisabled(EnabledDisabledPayloadOption vParent);
    public DefaultLiteral defaultLiteral();
    public void soapMethodAlias(SoapMethod vParent);
    public void soapMethodOption(SoapMethod vParent);
    public CreateEventNotificationStatement createEventNotificationStatement();
    public CreateEventSessionStatement createEventSessionStatement();
    public EventNotificationObjectScope eventNotificationObjectScope();
    public EventTypeGroupContainer eventTypeGroupContainer();
    public void eventSessionScope(EventSessionStatement vParent);
    public void eventDeclarationList(EventSessionStatement vParent);
    public void targetDeclarationList(EventSessionStatement vParent);
    public void optSessionOptionList(EventSessionStatement vParent);
    public AlterEventSessionStatement alterEventSessionStatement();
    public void dropEventDeclarationList(AlterEventSessionStatement vParent);
    public void dropTargetDeclarationList(AlterEventSessionStatement vParent);
    public void sessionOptionList(EventSessionStatement vParent);
    public EventDeclaration eventDeclaration();
    public TargetDeclaration targetDeclaration();
    public SessionOption sessionOption();
    public EventSessionObjectName eventSessionNonEmptyThreePartObjectName();
    public void eventDeclarationSetParameters(EventDeclaration vParent);
    public void eventDeclarationActionParameters(EventDeclaration vParent);
    public EventDeclarationSetParameter eventDeclarationSetParameter();
    public LiteralSessionOption maxMemorySessionOption();
    public LiteralSessionOption maxEventSizeSessionOption();
    public OnOffSessionOption trackCausalitySessionOption();
    public OnOffSessionOption startupStateSessionOption();
    public EventRetentionSessionOption eventRetentionSessionOption();
    public MemoryPartitionSessionOption memoryPartitionSessionOption();
    public MaxDispatchLatencySessionOption maxDispatchLatencySessionOption();
    public void integerSessionOptionValue(LiteralSessionOption vParent);
    public void onOffSessionOption(OnOffSessionOption vParent);
    public ScalarExpression eventDeclarationValue();
    public Literal integerOrRealOrNumeric();
    public ParenthesisExpression eventSessionExpressionParenthesis();
    public Literal eventSessionLiteral();
    public NumericLiteral numeric();
    public RealLiteral real();
    public BooleanExpression eventBooleanExpressionOr();
    public BooleanExpression eventBooleanExpressionAnd();
    public BooleanExpression eventBooleanExpressionUnary();
    public BooleanParenthesisExpression eventBooleanExpressionParenthesis();
    public BooleanExpression eventDeclarationPredicateParameter();
    public EventSessionObjectName eventSessionOneOrTwoOrThreePartObjectName();
    public void eventDeclarationCompareFunction(EventDeclarationCompareFunctionParameter vParent);
    public void eventDeclarationComparisonPredicate(BooleanComparisonExpression vParent, EventSessionObjectName vSource);
    public BooleanComparisonType comparisonOperator();
    public CreateFullTextCatalogStatement createFulltextCatalogStatement();
    public CreateFullTextIndexStatement createFulltextIndexStatement();
    public CreateFullTextStopListStatement createFulltextStoplistStatement();
    public OnOffFullTextCatalogOption accentSensitivity();
    public FullTextIndexColumn fulltextIndexColumn();
    public IdentifierOrValueExpression languageTerm();
    public FullTextCatalogAndFileGroup fullTextCatalogAndFileGroup();
    public void createFulltextOptions(CreateFullTextIndexStatement vParent);
    public void createFulltextOptionsList(CreateFullTextIndexStatement vParent);
    public FullTextIndexOption fullTextIndexOption();
    public ChangeTrackingFullTextIndexOption changeTrackingFulltextIndexOption();
    public StopListFullTextIndexOption stoplistFulltextIndexOption();
    public SearchPropertyListFullTextIndexOption searchPropertyListFullTextIndexOption();
    public void requiredSemicolon(TSqlFragment vParent, string vStatement);
    public AlterFullTextStopListStatement alterFulltextStoplistStatement();
    public FullTextStopListAction fulltextStoplistAction();
    public FullTextStopListAction addFulltextStoplistAction();
    public FullTextStopListAction dropFulltextStoplistAction();
    public DropFullTextStopListStatement dropFulltextStoplistStatement();
    public AlterSearchPropertyListStatement alterSearchPropertyListStatement();
    public SearchPropertyListAction searchPropertyListAction();
    public AddSearchPropertyListAction addSearchPropertyListAction();
    public DropSearchPropertyListAction dropSearchPropertyListAction();
    public DropSearchPropertyListStatement dropSearchPropertyListStatement();
    public CreateExternalTableStatement createExternalTableStatement();
    public CreateExternalDataSourceStatement createExternalDataSourceStatement();
    public CreateExternalFileFormatStatement createExternalFileFormatStatement();
    public CreateExternalResourcePoolStatement createExternalResourcePoolStatement();
    public TSqlStatement alterExternalStatements();
    public AlterExternalDataSourceStatement alterExternalDataSourceStatement();
    public AlterExternalResourcePoolStatement alterExternalResourcePoolStatement();
    public IndexStatement createXmlIndexStatement(bool vPrimary);
    public XmlNamespaces xmlNamespaces();
    public SelectiveXmlIndexPromotedPath promotedSelectiveXmlIndexPath();
    public void indexOptionList(IndexAffectingStatement statementType, IList`1<IndexOption> optionsList, TSqlFragment vParent);
    public CreateXmlSchemaCollectionStatement createXmlSchemaCollectionStatement();
    public SchemaObjectName schemaObjectNonEmptyTwoPartName();
    public CreateXmlIndexStatement secondaryXmlIndexStatementBody(Identifier vName, SchemaObjectName vSchemaObjectName, Identifier vXmlColumn, IToken tRParen, Identifier vSecondaryXmlIndexName);
    public CreateSelectiveXmlIndexStatement secondarySelectiveXmlIndex(Identifier vName, SchemaObjectName vSchemaObjectName, Identifier vXmlColumn, IToken tRParen, Identifier vSecondaryXmlIndexName);
    public IntegerLiteral maxlengthOption(TSqlFragment vParent);
    public bool singletonOption();
    public SelectiveXmlIndexPromotedPath promotedSelectiveXmlIndexPathInAlter();
    public PasswordCreateLoginSource passwordLoginSource();
    public WindowsCreateLoginSource windowsLoginSource();
    public CertificateCreateLoginSource certificateLoginSource();
    public AsymmetricKeyCreateLoginSource asymmetricKeyLoginSource();
    public Literal loginPassword();
    public void createLoginPasswordOption(PasswordCreateLoginSource vParent);
    public PrincipalOption createLoginParam();
    public OnOffPrincipalOption onOffPrincipalOption(IToken tOption);
    public IdentifierPrincipalOption createLoginParamWin();
    public Identifier createLoginParamCertOpt();
    public void messageTypeValidation(MessageTypeStatementBase vParent);
    public LiteralAvailabilityGroupOption availabilityGroupOption();
    public AvailabilityReplica availabilityReplica();
    public AlterAvailabilityGroupStatement alterAvailabilityGroupStatement();
    public void alterAvailabilityGroupAddDatabase(AlterAvailabilityGroupStatement vResult);
    public void alterAvailabilityGroupRemoveDatabase(AlterAvailabilityGroupStatement vResult);
    public void alterAvailabilityGroupAddReplica(AlterAvailabilityGroupStatement vResult);
    public void alterAvailabilityGroupModifyReplica(AlterAvailabilityGroupStatement vResult);
    public void alterAvailabilityGroupRemoveReplica(AlterAvailabilityGroupStatement vResult);
    public void alterAvailabilityGroupSetOption(AlterAvailabilityGroupStatement vResult);
    public void alterAvailabilityGroupTakeAction(AlterAvailabilityGroupStatement vResult);
    public AvailabilityReplica availabilityReplicaName();
    public AlterAvailabilityGroupFailoverAction alterAvailabilityGroupFailoverAction();
    public AlterAvailabilityGroupAction alterAvailabilityGroupAction();
    public AlterAvailabilityGroupFailoverOption alterAvailabilityGroupFailoverOption();
    public AvailabilityReplicaOption availabilityReplicaOption();
    public AvailabilityModeReplicaOption availabilityModeReplicaOption();
    public FailoverModeReplicaOption failoverModeReplicaOption();
    public SecondaryRoleReplicaOption secondaryRoleReplicaOption();
    public PrimaryRoleReplicaOption primaryRoleReplicaOption();
    public LiteralReplicaOption literalReplicaOption();
    public CreatePartitionFunctionStatement createPartitionFunction();
    public CreatePartitionSchemeStatement createPartitionScheme();
    public PartitionParameterType partitionParameterType();
    public void partitionFunctionTypes(CreatePartitionFunctionStatement vParent);
    public void partitionFunctionRange(CreatePartitionFunctionStatement vParent);
    public void partitionOptionTypes(TablePartitionOptionSpecifications vParent);
    public void partitionTableOptionRange(TablePartitionOptionSpecifications vParent);
    public void queueOptionList(QueueStatement vParent, bool vDropAccepted);
    public UserRemoteServiceBindingOption bindingUserOption();
    public OnOffRemoteServiceBindingOption bindingAnonymousOption();
    public void routeOptionList(RouteStatement vParent);
    public void onQueueClause(AlterCreateServiceStatementBase vParent);
    public ServiceContract serviceContract();
    public AlterServiceStatement alterServiceStatement();
    public void addDropServiceContractList(AlterServiceStatement vParent);
    public ServiceContract addDropServiceContract();
    public void keySpecList(CreateSymmetricKeyStatement vParent);
    public void encryptorListWithNoPassword(SymmetricKeyStatement vParent);
    public void providerKeySourceOptionsOpt(IList`1<KeyOption> optionsList, TSqlFragment vParent);
    public KeyOption keySpec(Boolean& keySourceSpecified, Boolean& algorithmSpecified, Boolean& identityValueSpecified);
    public KeySourceKeyOption keySourceKeySpec(Boolean& keySourceSpecified);
    public AlgorithmKeyOption algorithmKeySpec(Boolean& algorithmSpecified);
    public IdentityValueKeyOption identityValueKeySpec(Boolean& identityValueSpecified);
    public ProviderKeyNameKeyOption providerKeyNameSourceOption(Boolean& providerKeyNameSpecified);
    public CreationDispositionKeyOption creationDispositionSourceOption(Boolean& creationDispositionSpecified);
    public CryptoMechanism cryptoWithNoPasswordOrJustPassword();
    public CryptoMechanism certificateCrypto();
    public CryptoMechanism keyCrypto();
    public CryptoMechanism passwordCrypto();
    public KeyOption providerKeySourceOption(Boolean& algorithmSpecified, Boolean& providerKeyNameSpecified, Boolean& creationDispositionSpecified);
    public AlterSymmetricKeyStatement alterSymmetricKeyStatement();
    public CreateTypeUddtStatement createTypeUddtStatement();
    public CreateTypeUdtStatement createTypeUdtStatement();
    public CreateTypeTableStatement createTypeTableStatement();
    public TableDefinition tableDefinition(IndexAffectingStatement statementType, AlterTableAddTableElementStatement vStatement);
    public void withTypeTableOptions(CreateTypeTableStatement vParent);
    public MemoryOptimizedTableOption memoryOptimizedTableOption();
    public UserLoginOption userLoginOption();
    public PrincipalOption createUserOption(bool vHasUserLoginOption);
    public IdentifierPrincipalOption identifierCreateUserOption(IToken tOption, bool vHasUserLoginOption);
    public LiteralPrincipalOption literalCreateUserOption(IToken tOption, bool vHasUserLoginOption);
    public NullLiteral nullLiteral();
    public AlterApplicationRoleStatement alterApplicationRoleStatement();
    public AlterAssemblyStatement alterAssemblyStatement();
    public AlterAsymmetricKeyStatement alterAsymmetricKeyStatement();
    public AlterAuthorizationStatement alterAuthorizationStatement();
    public AlterBrokerPriorityStatement alterBrokerPriorityStatement();
    public AlterCryptographicProviderStatement alterCryptographicProviderStatement();
    public AlterRemoteServiceBindingStatement alterRemoteServiceBindingStatement();
    public TSqlStatement alterResourceStatement();
    public AlterWorkloadGroupStatement alterWorkloadGroupStatement();
    public AlterCertificateStatement alterCertificateStatement();
    public AlterCredentialStatement alterCredentialStatement();
    public AlterEndpointStatement alterEndpointStatement();
    public TSqlStatement alterFulltextStatement();
    public AlterIndexStatement alterIndexStatement();
    public AlterLoginStatement alterLoginStatement();
    public AlterMasterKeyStatement alterMasterKeyStatement();
    public AlterMessageTypeStatement alterMessageTypeStatement();
    public TSqlStatement alterPartitionStatement();
    public AlterQueueStatement alterQueueStatement();
    public AlterRoleStatement alterRoleStatement();
    public AlterRouteStatement alterRouteStatement();
    public AlterSchemaStatement alterSchemaStatement();
    public AlterSequenceStatement alterSequenceStatement();
    public TSqlStatement alterServiceStatements();
    public AlterUserStatement alterUserStatement();
    public AlterXmlSchemaCollectionStatement alterXmlSchemaCollectionStatement();
    public AlterSecurityPolicyStatement alterSecurityPolicyStatement();
    public AlterColumnEncryptionKeyStatement alterColumnEncryptionKeyStatement();
    public ApplicationRoleOption applicationRoleOption(bool defaultSchemaAndPasswordOnly);
    public ScalarExpression alterAssemblyFromClause();
    public void alterAssemblyWith(AlterAssemblyStatement vParent);
    public void alterAssemblyDropFile(AlterAssemblyStatement vParent);
    public void alterAssemblyAddFile(AlterAssemblyStatement vParent);
    public AssemblyOption alterAssemblyWithItem();
    public AssemblyOption assemblyPermissionSetOrVisibilityOption();
    public AssemblyOption assemblyUncheckedDataOption();
    public OnOffAssemblyOption assemblyVisibilityOption(IToken tPermissionSetVisibility);
    public AddFileSpec alterAssemblyAddFileSpec();
    public AlterFullTextCatalogStatement alterFulltextCatalogStatement();
    public AlterFullTextIndexStatement alterFulltextIndexStatement();
    public AlterFullTextIndexAction alterFulltextIndexAction();
    public SimpleAlterFullTextIndexAction enableDisableAlterFulltextIndexAction();
    public AddAlterFullTextIndexAction addAlterFulltextIndexAction();
    public DropAlterFullTextIndexAction dropAlterFulltextIndexAction();
    public SimpleAlterFullTextIndexAction startPopulationAlterFulltextIndexAction();
    public SimpleAlterFullTextIndexAction otherPopulationAlterFulltextIndexAction();
    public AlterFullTextIndexAction setAlterFullTextIndexAction();
    public AlterColumnAlterFullTextIndexAction alterColumnAlterFullTextIndexAction();
    public SetStopListAlterFullTextIndexAction setStoplistAlterFulltextIndexAction();
    public SimpleAlterFullTextIndexAction setChangeTrackingAlterFulltextIndexAction();
    public SetSearchPropertyListAlterFullTextIndexAction setSearchPropertyListAlterFullTextIndexAction();
    public bool populationOption(TSqlFragment vParent);
    public FullTextIndexColumn alterFullTextIndexColumn();
    public PartitionSpecifier partitionSpecifier();
    public AlterLoginEnableDisableStatement alterLoginEnableDisable(Identifier vName);
    public AlterLoginOptionsStatement alterLoginOptions(Identifier vName);
    public AlterLoginAddDropCredentialStatement alterLoginAddDropCredential(Identifier vName);
    public PrincipalOption alterLoginParam();
    public PasswordAlterPrincipalOption passwordAlterLoginOption();
    public AlterPartitionFunctionStatement alterPartitionFunctionStatement();
    public AlterPartitionSchemeStatement alterPartitionSchemeStatement();
    public ExecuteAsClause executeAsClause(bool vCallerProhibited, bool vOwnerProhibited);
    public void queueOption(QueueStatement vParent, bool vDropAccepted);
    public QueueStateOption stateQueueOption();
    public void queueActivationOption(QueueStatement vParent, bool vDropAccepted);
    public QueueStateOption queuePoisonMessageHandlingOption();
    public QueueOption activationQueueOptionArgument(bool vDropAccepted, Boolean& procedureName, Boolean& maxQueueReaders, Boolean& executeAs);
    public QueueStateOption statusQueueOptionArgument(IToken vStartToken);
    public QueueProcedureOption procedureNameQueueOptionArgument(IToken vStartToken);
    public QueueValueOption maxQueueReadersQueueOptionArgument(IToken vStartToken);
    public QueueOption dropQueueOptionArgument(bool vDropAccepted);
    public QueueExecuteAsOption executeAsQueueOptionArgument();
    public AlterRoleAction alterRoleAction();
    public AddMemberAlterRoleAction addMemberAlterRoleAction();
    public DropMemberAlterRoleAction dropMemberAlterRoleAction();
    public RenameAlterRoleAction renameAlterRoleAction();
    public RouteOption routeOption();
    public SchemaObjectName schemaObjectTwoPartName();
    public void alterSequenceOptionList(AlterSequenceStatement vParent);
    public SequenceOption alterSequenceOptionListElement();
    public AlterServiceMasterKeyStatement alterServiceMasterKeyStatement();
    public PrincipalOption alterUserOption();
    public PasswordAlterPrincipalOption passwordAlterUserOption(IToken tOption);
    public IdentifierPrincipalOption identifierAlterUserOption(IToken tOption);
    public LiteralPrincipalOption literalAlterUserOption(IToken tOption);
    public void authorization(IAuthorization vParent);
    public StatementList createSchemaElementList();
    public TSqlStatement createSchemaElement();
    public void functionStatementBody(FunctionStatementBody vResult, Boolean& vParseErrorOccurred);
    public void functionParameterList(FunctionStatementBody vResult);
    public void functionReturnTypeAndBody(FunctionStatementBody vParent, Boolean& vParseErrorOccurred);
    public ProcedureParameter functionParameter();
    public void scalarProcedureParameter(ProcedureParameter vParent, bool outputAllowed, bool nullableAllowed);
    public void functionAttributes(FunctionStatementBody vParent);
    public BeginEndBlockStatement beginEndBlockStatement();
    public MethodSpecifier methodSpecifier();
    public void functionAttributesNoExecuteAs(FunctionStatementBody vParent);
    public DeclareTableVariableBody declareTableBody(IndexAffectingStatement statementType);
    public DeclareTableVariableBody declareTableBodyMain(IndexAffectingStatement statementType);
    public void clrTableValuedFunctionOrderHint(FunctionStatementBody vParent);
    public SelectStatement subqueryExpressionWithOptionalCTE();
    public QueryExpression subqueryExpression(SubDmlFlags subDmlFlags);
    public FunctionOption functionAttribute();
    public FunctionOption functionAttributeNoExecuteAs();
    public ExecuteAsFunctionOption functionExecuteAsOption();
    public void identifierColumnList(TSqlFragment vParent, IList`1<ColumnReferenceExpression> columns);
    public BooleanExpression filterClause(bool filterProhibited);
    public StatisticsOption createStatisticsStatementWithOption(Boolean& isConflictingOption);
    public LiteralStatisticsOption sampleStatisticsOption(Boolean& isConflictingOption);
    public LiteralStatisticsOption statsStreamStatisticsOption();
    public StatisticsOption simpleStatisticsOption(Boolean& isConflictingOption);
    public StatisticsPartitionRange statisticsPartitionRange();
    public ResampleStatisticsOption resampleStatisticsOption();
    public OnOffStatisticsOption incrementalStatisticsOption();
    public StatisticsOption updateStatisticsStatementWithOption(Boolean& isConflictingOption);
    public LiteralStatisticsOption updateStatisticsLiteralOption();
    public StatisticsOption updateStatisticsSimpleOption(Boolean& isConflictingOption);
    public KillStatement killStatement();
    public KillQueryNotificationSubscriptionStatement killQueryNotificationSubscriptionStatement();
    public KillStatsJobStatement killStatsJobStatement();
    public CompressionPartitionRange compressionPartitionRange();
    public Permission permission();
    public void securityTargetObjectCommon(SecurityTargetObject vParent);
    public SecurityTargetObject authorizationTargetObject();
    public void permissionsList(SecurityStatement vParent, Boolean& vContainsColumnList);
    public void securityStatementTargetObjectOpt(SecurityStatement vParent, bool vColumnsDisallowed);
    public void securityStatementPrincipalList(SecurityStatement vParent);
    public void securityStatementAsClauseOpt(SecurityStatement vParent);
    public WaitForSupportedStatement waitforInnerStatement();
    public ValueExpression binaryOrVariable();
    public ValueExpression integerOrVariable();
    public void modificationTextStatement(TextModificationStatement vParent);
    public ScalarExpression signedIntegerOrVariableOrNull();
    public void modificationTextStatementWithLog(TextModificationStatement vParent);
    public ValueExpression writeString();
    public VariableReference variable();
    public OpenMasterKeyStatement openMasterKeyStatement();
    public OpenSymmetricKeyStatement openSymmetricKeyStatement();
    public OpenCursorStatement openCursorStatement();
    public CryptoMechanism decryptionMechanism();
    public void decryptionMechanismPassword(CryptoMechanism vParent);
    public CursorId cursorId();
    public CloseMasterKeyStatement closeMasterKeyStatement();
    public CloseSymmetricKeyStatement closeSymmetricKeyStatement();
    public CloseCursorStatement closeCursorStatement();
    public FetchCursorStatement rowSelector();
    public FetchType fetchType();
    public AddSignatureStatement addSignatureStatement();
    public TSqlStatement dropDatabaseStatements();
    public DropIndexStatement dropIndexStatement();
    public DropStatisticsStatement dropStatisticsStatement();
    public DropTableStatement dropTableStatement();
    public DropProcedureStatement dropProcedureStatement();
    public DropFunctionStatement dropFunctionStatement();
    public DropViewStatement dropViewStatement();
    public DropDefaultStatement dropDefaultStatement();
    public DropRuleStatement dropRuleStatement();
    public DropTriggerStatement dropTriggerStatement();
    public DropSchemaStatement dropSchemaStatement();
    public DropAggregateStatement dropAggregateStatement();
    public DropAssemblyStatement dropAssemblyStatement();
    public DropAvailabilityGroupStatement dropAvailabilityGroupStatement();
    public TSqlStatement dropPartitionStatements();
    public DropSynonymStatement dropSynonymStatement();
    public DropApplicationRoleStatement dropApplicationRoleStatement();
    public DropBrokerPriorityStatement dropBrokerPriorityStatement();
    public DropCryptographicProviderStatement dropCryptographicProviderStatement();
    public TSqlStatement dropFulltextStatements();
    public DropLoginStatement dropLoginStatement();
    public DropResourcePoolStatement dropResourcePoolStatement();
    public TSqlStatement dropWorkloadStatements();
    public DropRoleStatement dropRoleStatement();
    public DropMasterKeyStatement dropMasterKeyStatement();
    public DropSymmetricKeyStatement dropSymmetricKeyStatement();
    public DropAsymmetricKeyStatement dropAsymmetricKeyStatement();
    public DropCertificateStatement dropCertificateStatement();
    public DropCredentialStatement dropCredentialStatement();
    public DropTypeStatement dropTypeStatement();
    public DropXmlSchemaCollectionStatement dropXmlSchemaCollectionStatement();
    public DropContractStatement dropContractStatement();
    public DropQueueStatement dropQueueStatement();
    public DropServiceStatement dropServiceStatement();
    public DropRouteStatement dropRouteStatement();
    public DropMessageTypeStatement dropMessageTypeStatement();
    public DropRemoteServiceBindingStatement dropRemoteServiceBindingStatement();
    public DropEndpointStatement dropEndpointStatement();
    public DropSignatureStatement dropSignatureStatement();
    public TSqlStatement dropEventStatement();
    public DropSequenceStatement dropSequenceStatement();
    public DropFederationStatement dropFederationStatement();
    public DropSecurityPolicyStatement dropSecurityPolicyStatement();
    public TSqlStatement dropColumnStatements();
    public TSqlStatement dropExternalStatement();
    public TSqlStatement dropServerStatements();
    public DropUserStatement dropUserStatement();
    public DropServerAuditSpecificationStatement dropServerAuditSpecificationStatement();
    public DropServerAuditStatement dropServerAuditStatement();
    public DropServerRoleStatement dropServerRoleStatement();
    public DropDatabaseAuditSpecificationStatement dropDatabaseAuditSpecificationStatement();
    public DropCredentialStatement dropDatabaseScopedCredentialStatement();
    public DropDatabaseEncryptionKeyStatement dropDatabaseEncryptionKeyStatement();
    public DropDatabaseStatement dropDatabaseStatement();
    public DropIndexClauseBase dropIndexClause();
    public BackwardsCompatibleDropIndexClause indexDropObject();
    public DropIndexClause indexDropObjectNewNameFormat();
    public void dropClusteredIndexOptions(DropIndexClause vParent);
    public void dropClusteredIndexOption(DropIndexClause vParent, Int32& encounteredOptions);
    public IndexExpressionOption maxDopOption();
    public OnlineIndexOption onlineIndexOption();
    public MoveToDropIndexOption dropIndexMoveToOption();
    public FileStreamOnDropIndexOption dropIndexFileStreamOnOption();
    public DataCompressionOption dataCompressionOption();
    public WaitAtLowPriorityOption waitAtLowPriorityOption();
    public FileGroupOrPartitionScheme filegroupOrPartitionScheme();
    public void fileStreamOn(IFileStreamSpecifier vParent);
    public ChildObjectName statisticsDropObject();
    public List`1<Identifier> identifierList(int vMaxNumber);
    public void dropObjectList(DropObjectsStatement vParent, bool onlyTwoPartNames);
    public TriggerScope triggerScope(TSqlFragment vParent);
    public DropExternalTableStatement dropExternalTableStatement();
    public SchemaObjectName dropObject(bool onlyTwoPartNames);
    public DropPartitionFunctionStatement dropPartitionFunctionStatement();
    public DropPartitionSchemeStatement dropPartitionSchemeStatement();
    public DropFullTextCatalogStatement dropFulltextCatalogStatement();
    public DropFullTextIndexStatement dropFulltextIndexStatement();
    public bool removeProviderKeyOpt(TSqlFragment vParent);
    public DropEventNotificationStatement dropEventNotificationStatement();
    public DropEventSessionStatement dropEventSessionStatement();
    public void eventSessionDropScope(DropEventSessionStatement vParent);
    public DropExternalDataSourceStatement dropExternalDataSourceStatement();
    public DropExternalFileFormatStatement dropExternalFileFormatStatement();
    public DropExternalResourcePoolStatement dropExternalResourcePoolStatement();
    public DropColumnMasterKeyStatement dropColumnMasterKeyStatement();
    public DropColumnEncryptionKeyStatement dropColumnEncryptionKeyStatement();
    public DropWorkloadGroupStatement dropWorkloadGroupStatement();
    public DropWorkloadClassifierStatement dropWorkloadClassifierStatement();
    public void signatureType(SignatureStatementBase vParent);
    public void signableElement(SignatureStatementBase vParent);
    public void cryptoListWithOptionalPasswordSignature(SignatureStatementBase vParent);
    public CryptoMechanism cryptoWithOptionalPasswordSignature();
    public Literal withSignatureOrPasswordOpt();
    public Identifier nonQuotedIdentifier();
    public BeginTransactionStatement beginTransactionStatement();
    public TryCatchStatement tryCatchStatement();
    public BeginConversationTimerStatement beginConversationTimerStatement();
    public BeginDialogStatement beginDialogStatement();
    public void transactionName(TransactionStatement vParent);
    public Identifier weirdTransactionName();
    public void tranIdentifier(StringBuilder vStringBuilder, TSqlFragment vParent);
    public StatementList tryStatementList(Boolean& vParseErrorOccurred);
    public StatementList catchStatementList(Boolean& vParseErrorOccurred);
    public BeginEndAtomicBlockStatement beginEndAtomicBlock();
    public void atomicBlockOptions(BeginEndAtomicBlockStatement vParent);
    public AtomicBlockOption atomicBlockOption();
    public LiteralAtomicBlockOption dateFirstOption();
    public LiteralAtomicBlockOption dateFormatOption();
    public OnOffAtomicBlockOption delayedDurabilityOption();
    public LiteralAtomicBlockOption languageOption();
    public IdentifierAtomicBlockOption isolationLevelIdentifierAtomicBlockOption();
    public IsolationLevel isolationLevel(TSqlFragment vParent);
    public DeclareVariableElement declareVariableElement();
    public SqlDataTypeReference cursorDataType();
    public DeclareVariableStatement declareVariableStatement();
    public DeclareCursorStatement declareCursorStatement();
    public PredicateSetStatement predicateSetStatement();
    public SetVariableStatement setVariableStatement();
    public SetStatisticsStatement setStatisticsStatement();
    public SetRowCountStatement setRowcountStatement();
    public SetOffsetsStatement setOffsetsStatement();
    public SetCommandStatement setCommandStatement();
    public SetTransactionIsolationLevelStatement setTransactionIsolationLevelStatement();
    public SetTextSizeStatement setTextSizeStatement();
    public SetIdentityInsertStatement setIdentityInsertStatement();
    public SetErrorLevelStatement setErrorLevelStatement();
    public void parenthesizedOptExpressionWithDefaultList(TSqlFragment vParent, IList`1<ScalarExpression> expressions);
    public AssignmentKind assignmentWithOptOp();
    public CursorDefinition cursorDefinition();
    public void setOnOff(SetOnOffStatement vParent);
    public SetOffsets offsetItem();
    public SetCommand setCommand();
    public SetFipsFlaggerCommand fipsFlaggerLevel();
    public void tableElement(IndexAffectingStatement statementType, TableDefinition vParent, AlterTableAddTableElementStatement vStatement);
    public void cursorOpts(bool oldSyntax, IList`1<CursorOption> vOptions);
    public CursorDefinition cursorDefinitionOptions(IList`1<CursorOption> vOptions);
    public CursorOption cursorOption();
    public CreateIndexStatement createRelationalIndexStatement(IToken tUnique, Nullable`1<bool> isClustered);
    public void indexKeyColumnList(CreateIndexStatement vParent);
    public void indexLegacyOptionList(CreateIndexStatement vParent);
    public void fileStreamOnOpt(IFileStreamSpecifier vParent);
    public void columnstoreIndexKeyColumnList(CreateColumnStoreIndexStatement vParent);
    public ColumnWithSortOrder indexKeyColumn();
    public void graphPseudoColumn(ColumnReferenceExpression vResult);
    public SortOrder orderByOption(TSqlFragment vParent);
    public ColumnReferenceExpression columnstoreIndexKeyColumn();
    public ColumnReferenceExpression identifierColumnReferenceExpression();
    public void systemColumn(ColumnReferenceExpression vParent);
    public BooleanExpression filterExpression();
    public BooleanExpression filterExpressionPrimary();
    public ColumnReferenceExpression filterColumn();
    public BooleanIsNullExpression filterNullPredicate(ScalarExpression vColumn);
    public BooleanComparisonExpression filterComparisonPredicate(ScalarExpression vColumn);
    public InPredicate filterInPredicate(ScalarExpression vColumn);
    public BooleanParenthesisExpression filterParenthesisExpression();
    public void specialColumn(ColumnReferenceExpression vParent);
    public BooleanIsNullExpression nullPredicate(ScalarExpression vExpressionFirst);
    public IndexOption indexLegacyOption();
    public IndexExpressionOption fillFactorOption();
    public IndexOption indexOption();
    public void alterTableAlterIndexOptionList(IndexAffectingStatement statement, IList`1<IndexOption> optionsList, TSqlFragment vParent);
    public void lowPriorityLockWaitOption(IList`1<LowPriorityLockWaitOption> optionsList, TSqlFragment vParent);
    public IgnoreDupKeyIndexOption ignoreDupKeyIndexOption();
    public Nullable`1<bool> suppressMessagesOption();
    public void truncateTargetOption(TruncateTargetTableSwitchOption tOption);
    public IndexStateOption indexStateOption();
    public IndexExpressionOption bucketCountOption();
    public OrderIndexOption orderIndexOption();
    public CompressionDelayIndexOption compressionDelayOption();
    public MaxDurationOption maxDurationOption();
    public void ctContext(WithCtesAndXmlNamespaces vParent);
    public CommonTableExpression commonTableExpression();
    public XmlNamespacesElement xmlNamespacesElement();
    public XmlNamespacesDefaultElement xmlNamespacesDefaultElement();
    public XmlNamespacesAliasElement xmlNamespacesAliasElement();
    public QueryExpression queryExpression(SubDmlFlags subDmlFlags, SelectStatement vSelectStatement);
    public OrderByClause orderByClause();
    public OffsetClause offsetClause();
    public ForClause forClause();
    public void optimizerHints(TSqlFragment vParent, IList`1<OptimizerHint> hintsCollection);
    public TableReferenceWithAliasAndColumns derivedTable(SubDmlFlags subDmlFlags);
    public QueryDerivedTable queryDerivedTable(SubDmlFlags subDmlFlags);
    public InlineDerivedTable inlinedDerivedTable();
    public void simpleTableReferenceAlias(TableReferenceWithAlias vParent);
    public RowValue rowValueExpression();
    public ScalarSubquery subquery(SubDmlFlags subDmlFlags, ExpressionFlags expressionFlags);
    public QueryExpression subqueryExpressionUnit(SubDmlFlags subDmlFlags);
    public QuerySpecification subquerySpecification(SubDmlFlags subDmlFlags);
    public QueryParenthesisExpression subqueryParenthesis(SubDmlFlags subDmlFlags);
    public QueryExpression queryExpressionUnit(SubDmlFlags subDmlFlags, SelectStatement vSelectStatement);
    public QuerySpecification querySpecification(SubDmlFlags subDmlFlags, SelectStatement vSelectStatement);
    public QueryParenthesisExpression queryParenthesis(SubDmlFlags subDmlFlags, SelectStatement vSelectStatement);
    public void uniqueRowFilterOpt(QuerySpecification vParent);
    public TopRowFilter topRowFilter();
    public SelectElement selectColumnOrStarExpression();
    public FromClause fromClauseOpt(SubDmlFlags subDmlFlags);
    public WhereClause whereClause();
    public GroupByClause groupByClause();
    public HavingClause havingClause();
    public BrowseForClause browseForClause();
    public XmlForClause xmlForClause();
    public JsonForClause jsonForClause();
    public void selectExpression(QuerySpecification vParent);
    public UniqueRowFilter uniqueRowFilter(IToken& token);
    public PrimaryExpression parenthesisDisambiguatorForExpressions(ExpressionFlags expressionFlags);
    public TopRowFilter dmlTopRowFilter();
    public void dmlTopRowFilterOpt(DataModificationSpecification vParent);
    public SelectSetVariable selectSetVariable();
    public SelectStarExpression selectStarExpression();
    public SelectScalarExpression selectColumn();
    public SelectElement outputClauseSelectElement();
    public SelectScalarExpression outputClauseSelectColumn();
    public ScalarExpression selectColumnExpression();
    public IdentityFunctionCall identityFunction();
    public ScalarExpression seedIncrement();
    public TableSampleClause tableSampleClause();
    public FromClause fromClause(SubDmlFlags subDmlFlags);
    public TableReference selectTableReferenceWithOdbc(SubDmlFlags subDmlFlags);
    public TemporalClause temporalClause();
    public ValueExpression stringLiteralOrVariable();
    public TableReference selectTableReference(SubDmlFlags subDmlFlags);
    public OdbcQualifiedJoinTableReference odbcQualifiedJoin(SubDmlFlags subDmlFlags);
    public TableReference selectTableReferenceElement(SubDmlFlags subDmlFlags);
    public void selectTableReferenceAdditionalElement(SubDmlFlags subDmlFlags, TableReference& vResult);
    public void odbcInitiator();
    public OdbcConvertSpecification odbcConvertSpecification();
    public ExtractFromExpression extractFromExpression();
    public OdbcFunctionCall odbcFunctionCall();
    public TableReference joinTableReference(SubDmlFlags subDmlFlags);
    public JoinParenthesisTableReference joinParenthesis(SubDmlFlags subDmlFlags);
    public void joinElement(SubDmlFlags subDmlFlags, TableReference& vResult);
    public TableReference selectTableReferenceElementWithoutJoinParenthesis(SubDmlFlags subDmlFlags);
    public void pivotedTableReference(TableReference& vResult);
    public void unpivotedTableReference(TableReference& vResult);
    public ColumnReferenceExpression fixedColumn();
    public void columnListWithParenthesis(TSqlFragment vParent, IList`1<ColumnReferenceExpression> columns);
    public void unqualifiedJoin(SubDmlFlags subDmlFlags, TableReference& vResult);
    public void qualifiedJoin(SubDmlFlags subDmlFlags, TableReference& vResult);
    public TableReferenceWithAliasAndColumns changeTableTableReference();
    public BuiltInFunctionTableReference builtInFunctionTableReference();
    public GlobalFunctionTableReference globalFunctionTableReference();
    public VariableTableReference variableTableReference();
    public VariableMethodCallTableReference variableMethodCallTableReference();
    public TableReferenceWithAlias openRowset();
    public FullTextTableReference fulltextTableReference();
    public SemanticTableReference semanticTableReference();
    public OpenXmlTableReference openXmlTableReference();
    public OpenJsonTableReference openJsonTableReference();
    public DataModificationTableReference subDmlTableReference(SubDmlFlags subDmlFlags);
    public PredictTableReference predictTableReference(SubDmlFlags subDmlFlags);
    public TableReference schemaObjectOrFunctionTableReference();
    public PredictTableReference predictParams(SubDmlFlags subDmlFlags, ExpressionFlags expressionFlags);
    public void predictWithClauseOpt(PredictTableReference vParent);
    public void simpleTableReferenceAliasOpt(TableReferenceWithAlias vParent);
    public TableReferenceWithAlias mergeTarget(bool indexHintAllowed);
    public void predictSchemaItemList(PredictTableReference vParent);
    public SchemaDeclarationItem predictSchemaItem();
    public ColumnDefinitionBase columnDefinitionBasic();
    public TableReferenceWithAlias dmlTarget(bool indexHintAllowed);
    public ChangeTableChangesTableReference changesChangeTableParams(SchemaObjectName vTarget);
    public ChangeTableVersionTableReference versionChangeTableParams(SchemaObjectName vTarget);
    public DataModificationSpecification innerDmlStatement();
    public InsertSpecification insertSpecification(SubDmlFlags subDmlFlags);
    public UpdateSpecification updateSpecification(SubDmlFlags subDmlFlags);
    public DeleteSpecification deleteSpecification(SubDmlFlags subDmlFlags);
    public MergeSpecification mergeSpecification(SubDmlFlags subDmlFlags);
    public void joinHint(QualifiedJoin vParent);
    public ScalarExpression expressionWithDefault();
    public ScalarExpression signedIntegerOrStringOrVariable();
    public ScalarExpression possibleNegativeConstant();
    public void outputIntoOutputClause(DataModificationSpecification vParent);
    public OutputIntoClause outputIntoClause(IToken tOutput, IList`1<SelectElement> vSelectElements);
    public OutputClause outputClause();
    public VariableTableReference variableDmlTarget();
    public NamedTableReference intoSchemaObjectTable();
    public void outputClauseOpt(SubDmlFlags subDmlFlags, DataModificationSpecification vParent);
    public WhereClause dmlWhereClause(SubDmlFlags subDmlFlags);
    public ColumnReferenceExpression insertColumn();
    public ValuesInsertSource valuesInsertSource();
    public ExecuteInsertSource executeInsertSource();
    public SelectInsertSource selectInsertSource(SubDmlFlags subDmlFlags);
    public void setClausesList(TSqlFragment vParent, IList`1<SetClause> setClauses);
    public SetClause setClause();
    public AssignmentSetClause setClauseStartingWithVariable();
    public AssignmentSetClause setClauseColumnAssignment(MultiPartIdentifier vMultiPartIdentifier);
    public FunctionCallSetClause setClauseFunctionCall(MultiPartIdentifier vMultiPartIdentifier);
    public AssignmentSetClause setClauseSubItemSystemColumn();
    public AssignmentKind assignmentWithOp();
    public ExecuteSpecification executeSpecification();
    public void defaultValuesInsertSource(ValuesInsertSource vParent);
    public RowValue rowValueExpressionWithDefault();
    public void expressionWithDefaultList(TSqlFragment vParent, IList`1<ScalarExpression> expressions);
    public TableReferenceWithAlias schemaObjectDmlTarget(bool indexHintAllowed);
    public void mergeInsertDmlColumnListOpt(InsertMergeAction vParent);
    public ColumnReferenceExpression mergeInsertDmlColumn();
    public ScalarExpression possibleNegativeConstantWithDefault();
    public SchemaObjectFunctionTableReference schemaObjectFunctionDmlTarget();
    public NamedTableReference schemaObjectTableDmlTarget(bool indexHintAllowed);
    public void tableHints(TSqlFragment vParent, IList`1<TableHint> hints, bool tableHintAllowed);
    public NamedTableReference schemaObjectTableReference(SchemaObjectName vSchemaObjectName);
    public SchemaObjectFunctionTableReference schemaObjectFunctionTableReference(SchemaObjectName vSchemaObjectName);
    public void singleOldStyleTableHint(TSqlFragment vParent, IList`1<TableHint> hints);
    public void nonParameterTableHints(TSqlFragment vParent, IList`1<TableHint> hints);
    public IndexTableHint oldForceIndex();
    public void fullTextTable(FullTextTableReference vParent);
    public void fulltextTableColumnList(FullTextTableReference vParent);
    public void fulltextTableOptions(FullTextTableReference vParent);
    public void fulltextSemanticTableColumnList(TSqlFragment vParent, IList`1<ColumnReferenceExpression> vColumns);
    public ColumnReferenceExpression starColumnReferenceExpression();
    public ValueExpression languageExpression();
    public ValueExpression binaryOrIntegerOrStringOrVariable();
    public void semanticKeyPhraseTableReference(SemanticTableReference vParent);
    public void semanticSimilarityTableReference(SemanticTableReference vParent);
    public void semanticSimilarityDetailsTableReference(SemanticTableReference vParent);
    public OpenXmlTableReference openXmlParams();
    public void openXmlWithClauseOpt(OpenXmlTableReference vParent);
    public void openXmlSchemaItemList(OpenXmlTableReference vParent);
    public SchemaDeclarationItem openXmlSchemaItem();
    public OpenJsonTableReference openJsonParams();
    public void openJsonWithClauseOpt(OpenJsonTableReference vParent);
    public void openJsonSchemaItemList(OpenJsonTableReference vParent);
    public SchemaDeclarationItemOpenjson openJsonSchemaItem();
    public TableReferenceWithAlias openRowsetRowset();
    public OpenQueryTableReference openQueryRowset();
    public AdHocTableReference adhocRowset();
    public OpenRowsetTableReference openRowsetParams();
    public InternalOpenRowset internalOpenRowsetArgs();
    public BulkOpenRowset openRowsetBulk();
    public BulkInsertOption openRowsetBulkHint();
    public BulkInsertOption openRowsetBulkHintNoValue();
    public AdHocDataSource adhocDataSource();
    public SchemaObjectNameOrValueExpression objectOrString();
    public void simpleTableHints(TSqlFragment vParent, IList`1<TableHint> hints);
    public void tableHintsBody(TSqlFragment vParent, IList`1<TableHint> hints, bool tableHintAllowed);
    public TableHint tableHint(bool indexHintAllowed);
    public ForceSeekTableHint forceSeekTableHint(bool indexHintAllowed);
    public TableHint simpleTableHint();
    public IndexTableHint indexTableHint(bool indexHintAllowed);
    public LiteralTableHint literalTableHint();
    public IdentifierOrValueExpression identifierOrInteger();
    public BooleanExpression booleanExpressionWithFlags(ExpressionFlags expressionFlags);
    public WhereClause whereCurrentOfCursorClause(SubDmlFlags subDmlFlags);
    public GroupingSpecification groupByItem(bool isAll, Boolean& encounteredCubeRollupGroupingSets, Boolean& alreadyEncounteredDistributedAggHint);
    public CubeGroupingSpecification cubeSpec(bool isAll);
    public RollupGroupingSpecification rollupSpec(bool isAll);
    public GroupingSetsGroupingSpecification groupingSetsSpec(bool isAll);
    public GrandTotalGroupingSpecification grandTotal();
    public ExpressionGroupingSpecification simpleGroupByItem(Boolean& alreadyEncounteredDistributedAggHint);
    public GroupingSpecification groupingSet();
    public CompositeGroupingSpecification composingGroupingSet();
    public GroupingSpecification groupingSetItem();
    public void cubeOrRollupArgumentList(TSqlFragment vParent, IList`1<GroupingSpecification> specs);
    public GroupingSpecification cubeOrRollupArgument();
    public CompositeGroupingSpecification compositeGroupByItem();
    public ExpressionWithSortOrder expressionWithSortOrder();
    public UpdateForClause updateForClause();
    public XmlForClauseOption xmlForClauseMode();
    public XmlForClauseOption xmlParam(XmlForClauseOptions encountered);
    public JsonForClauseOption jsonForClauseMode();
    public JsonForClauseOption jsonParam(JsonForClauseOptions encountered);
    public OptimizerHint hint();
    public LiteralOptimizerHint literalOptimizerHint();
    public OptimizerHint simpleOptimizerHint();
    public LiteralOptimizerHint usePlanOptimizerHint();
    public OptimizeForOptimizerHint optimizeForOptimizerHint();
    public TableHintsOptimizerHint tableHintsOptimizerHint();
    public UseHintList useHintClause();
    public VariableValuePair variableValuePair();
    public Literal cryptographicProviderFile();
    public AlterResourcePoolStatement alterResourcePoolStatement();
    public AlterResourceGovernorStatement alterResourceGovernorStatement();
    public void resourcePoolStatementBody(ResourcePoolStatement vParent);
    public ResourcePoolParameter resourcePoolParameter();
    public ResourcePoolAffinitySpecification resourcePoolAffinitySpecification();
    public LiteralRange poolAffinityRange();
    public void externalResourcePoolStatementBody(ExternalResourcePoolStatement vParent);
    public ExternalResourcePoolParameter externalResourcePoolParameter();
    public ExternalResourcePoolAffinitySpecification externalResourcePoolAffinitySpecification();
    public LiteralRange externalPoolAffinityRange();
    public CreateWorkloadGroupStatement createWorkloadGroupStatement();
    public CreateWorkloadClassifierStatement createWorkloadClassifierStatement();
    public void workloadGroupStatementBody(WorkloadGroupStatement vParent);
    public WorkloadGroupParameter workloadGroupParameter();
    public void workloadGroupUsingOption(WorkloadGroupStatement vParent);
    public void workloadClassifierStatementBody(CreateWorkloadClassifierStatement vParent);
    public void withClassifierOptions(CreateWorkloadClassifierStatement vParent);
    public WorkloadClassifierOption workloadClassifierOption();
    public ClassifierWorkloadGroupOption classifierWorkloadGroupOption();
    public ClassifierMemberNameOption classifierMemberNameOption();
    public ClassifierWlmLabelOption classifierWlmLabelOption();
    public ClassifierWlmContextOption classifierWlmContextOption();
    public ClassifierImportanceOption classifierImportanceOption();
    public ClassifierStartTimeOption classifierStartTimeOption();
    public ClassifierEndTimeOption classifierEndTimeOption();
    public WlmTimeLiteral wlmTimeLiteral();
    public void brokerPriorityStatementBody(BrokerPriorityStatement vParent);
    public BrokerPriorityParameter brokerPriorityParameter(int encountered);
    public void createSequenceOptionList(CreateSequenceStatement vParent);
    public SequenceOption createSequenceOptionListElement();
    public ScalarExpressionSequenceOption sequenceRestartOptionListElement();
    public SequenceOption commonSequenceOptionListElement();
    public DataTypeSequenceOption sequenceDatatypeOptionListElement();
    public ScalarExpressionSequenceOption sequenceStartOptionListElement();
    public ScalarExpressionSequenceOption sequenceCacheOptionListElement();
    public SequenceOption sequenceCycleOptionListElement();
    public ScalarExpressionSequenceOption sequenceIncrementOptionListElement();
    public SequenceOption sequenceNoOptionListElement();
    public ScalarExpressionSequenceOption sequenceMinMaxOptionListElement();
    public CreateColumnMasterKeyStatement createColumnMasterKeyStatement();
    public CreateColumnEncryptionKeyStatement createColumnEncryptionKeyStatement();
    public ColumnMasterKeyParameter columnMasterkeyParameter();
    public ColumnMasterKeyStoreProviderNameParameter columnMasterKeyStoreProviderNameParameter();
    public ColumnMasterKeyPathParameter columnMasterKeyPathParameter();
    public ColumnEncryptionKeyValue createColumnEncryptionKeyValue();
    public ColumnEncryptionKeyValueParameter columnEncryptionKeyValueParameter();
    public ColumnMasterKeyNameParameter columnMasterKeyNameParameter();
    public ColumnEncryptionAlgorithmNameParameter columnEncryptionAlgorithmNameParameter();
    public EncryptedValueParameter encryptedValueParameter();
    public void alterColumnEncryptionKeyAddStatement(AlterColumnEncryptionKeyStatement vResult);
    public void alterColumnEncryptionKeyDropStatement(AlterColumnEncryptionKeyStatement vResult);
    public void createSecurityPredicateListElement(CreateSecurityPolicyStatement vParent);
    public void securityPolicyOptionsList(SecurityPolicyStatement vParent);
    public SecurityPredicateAction createOrAltersecurityPredicateListElement();
    public void alterSecurityPredicateListElement(AlterSecurityPolicyStatement vParent);
    public SecurityPredicateAction dropSecurityPredicateListElement();
    public SecurityPolicyOption securityPolicyOptionListElement(SecurityPolicyStatement vParent);
    public FunctionCall userFunctionCall(MultiPartIdentifier vIdentifiers);
    public void securityPredicateOperation(SecurityPredicateAction vResult);
    public void externalDataSourceType(CreateExternalDataSourceStatement vParent);
    public void externalDataSourceLocation(ExternalDataSourceStatement vParent);
    public ExternalDataSourceLiteralOrIdentifierOption externalDataSourceLiteralOrIdentifierOption();
    public void externalFileFormatOptions(CreateExternalFileFormatStatement vResult);
    public void externalFormatingOption(TSqlFragment vParent, IList`1<ExternalFileFormatOption> vOptions);
    public void externalFileFormatLiteralOptions(TSqlFragment vParent, IList`1<ExternalFileFormatOption> vOptions);
    public ExternalFileFormatLiteralOption externalFileFormatLiteralOption();
    public ExternalFileFormatContainerOption externalFormatingContainerOption();
    public ExternalFileFormatOption externalDataFormatOption();
    public ExternalFileFormatUseDefaultTypeOption externalDataFormatUseTypeDefaultOption();
    public ExternalFileFormatLiteralOption externalDataFormatLiteralOption();
    public void copyColumnList(CopyStatement vParent);
    public void copyWithClause(CopyStatement vParent);
    public CopyColumnOption copyColumnOption(Int32& columnCount, IToken tToken);
    public ScalarExpression defaultValueLiteral();
    public CopyOption copyOption(Int32& encountered);
    public SingleValueTypeCopyOption singleValueTypeCopyOption();
    public CopyCredentialOption copyCredentialOption();
    public void spatialIndexingScheme(CreateSpatialIndexStatement vParent);
    public void spatialIndexOptionsList(CreateSpatialIndexStatement vParent);
    public SpatialIndexOption spatialIndexOption(SpatialIndexingSchemeType indexingScheme, Boolean& isRegularIndexOption);
    public BoundingBoxSpatialIndexOption boundingBoxSpatialIndexOption(bool isRegularIndexOption, SpatialIndexingSchemeType indexingScheme);
    public GridsSpatialIndexOption gridsSpatialIndexOption(bool isRegularIndexOption);
    public CellsPerObjectSpatialIndexOption cellsPerObjectSpatialIndexOption(bool isRegularIndexOption);
    public SpatialIndexRegularOption spatialIndexRegularOption(IndexAffectingStatement statement);
    public void boundingBoxParameter(BoundingBoxSpatialIndexOption vParent);
    public void boundingBoxParameterListByname(BoundingBoxSpatialIndexOption vParent);
    public void boundingBoxParameterListByord(BoundingBoxSpatialIndexOption vParent);
    public BoundingBoxParameter boundingBoxParameterByName(int encountered);
    public ScalarExpression signedIntegerOrReal();
    public BoundingBoxParameter boundingBoxParameterByOrd();
    public void gridParameter(GridsSpatialIndexOption vParent);
    public void gridParameterListByName(GridsSpatialIndexOption vParent);
    public void gridParameterListByOrd(GridsSpatialIndexOption vParent);
    public GridParameter gridParameterByName();
    public GridParameter gridParameterByOrd();
    public void viewStatementBody(ViewStatementBody vResult);
    public ViewOption viewOption();
    public ViewOption createMaterializedViewOption();
    public ViewDistributionOption viewDistributionOption();
    public ViewForAppendOption viewForAppendOption();
    public ViewDistributionPolicy viewDistributionPolicy();
    public ViewRoundRobinDistributionPolicy viewRoundRobinDistributionPolicy();
    public ViewHashDistributionPolicy viewHashDistributionPolicy();
    public TriggerOption triggerOption(bool vOwnerProhibited);
    public void procedureOptions(ProcedureStatementBody vParent);
    public ProcedureOption procedureOption();
    public void procedureStatementBody(ProcedureStatementBody vResult, Boolean& vParseErrorOccurred);
    public ProcedureReference procedureReference();
    public void procedureParameterList(ProcedureStatementBodyBase vResult);
    public ProcedureParameter procedureParameter();
    public void cursorProcedureParameter(ProcedureParameter vParent);
    public IdentifierLiteral identifierLiteral();
    public ValueExpression literal();
    public UnaryExpression negativeConstant();
    public Literal subroutineParameterLiteral();
    public void triggerStatementBody(TriggerStatementBody vResult, Boolean& vParseErrorOccurred);
    public void ddlTriggerMidSection(TriggerStatementBody vParent);
    public void dmlTriggerMidSection(TriggerStatementBody vParent);
    public TriggerAction dmlTriggerAction();
    public TriggerAction ddlTriggerAction();
    public void endConversationArgumentsOpt(EndConversationStatement vParent);
    public SelectElement receiveSelectExpression();
    public SelectScalarExpression receiveColumnSelectExpression();
    public DialogOption beginConversationArgument(Int32& encounteredOptions);
    public ScalarExpressionDialogOption scalarExpressionBeginDialogConversationArgument(IToken tOption, Int32& encounteredOptions);
    public OnOffDialogOption onOffBeginDialogConversationArgument(IToken tOption, Int32& encounteredOptions);
    public MergeStatement mergeStatementWithoutSemicolon(SubDmlFlags subDmlFlags);
    public MergeActionClause mergeActionClause();
    public MergeCondition mergeCondition();
    public MergeAction mergeAction(MergeCondition condition);
    public UpdateMergeAction updateMergeAction(MergeCondition condition);
    public InsertMergeAction insertMergeAction(MergeCondition condition);
    public DeleteMergeAction deleteMergeAction(MergeCondition condition);
    public ValuesInsertSource mergeInsertSource();
    public void execStart(TSqlFragment vParent);
    public ExecuteContext executeAsStatementContext();
    public void executeContextStatementOptionsOpt(ExecuteAsStatement vParent);
    public ExecuteOption executeOption();
    public ExecuteOption executeOptionRecompile();
    public ResultSetsExecuteOption executeOptionResultSets();
    public ResultSetDefinition resultSetDefinition();
    public InlineResultSetDefinition inlineResultSetDefinition();
    public ResultSetDefinition asForXmlResultSetDefinition();
    public SchemaObjectResultSetDefinition asSchemaObjectResultSetDefinition();
    public ResultColumnDefinition resultColumnDefinition();
    public void execTypes(ExecuteSpecification vParent);
    public ExecutableEntity execStrTypes();
    public ExecuteContext execStrExecCtxt();
    public Identifier linkedServer();
    public ExecutableProcedureReference execProcEx();
    public ExecuteContext execCtxtStmt();
    public void execCtxtStmtType(ExecuteContext vParent);
    public Literal execCtxtStmtPrincipal();
    public ExecutableStringList execSqlList();
    public void setParamList(ExecutableEntity vParent);
    public ExecutableProcedureReference adhocDataSourceExecproc();
    public ProcedureReferenceName procObjectReference();
    public ProcedureReferenceName varObjectReference();
    public Literal procNumOpt();
    public ValueExpression stringOrGlobalVariableOrVariable();
    public ExecuteParameter setParam(Boolean& nameEqualsValueWasUsed, Int32& parameterNumber);
    public TableDefinition tableDefinitionCreateTable();
    public void graphAsNodeOrEdge(CreateTableStatement vParent);
    public FederationScheme federatedOn(CreateTableStatement vParent);
    public void largeDataOnOpt(CreateTableStatement vParent);
    public void largeDataOn(CreateTableStatement vParent);
    public TableOption createTableOption();
    public TableDataCompressionOption tableDataCompressionOption();
    public FileTableDirectoryTableOption fileTableDirectoryTableOption();
    public FileTableCollateFileNameTableOption fileTableCollateFileNameTableOption();
    public FileTableConstraintNameTableOption fileTableConstraintNameTableOption();
    public DurabilityTableOption durabilityTableOption();
    public RemoteDataArchiveTableOption remoteDataArchiveTableOption();
    public SystemVersioningTableOption systemVersioningTableOnOffOption();
    public TableDistributionOption tableDistributionOption();
    public TableIndexOption tableIndexOption();
    public TablePartitionOption tablePartitionOption();
    public LocationOption locationOption();
    public void remoteDataArchiveTableSettings(TSqlFragment vParent, MigrationState& vMigrationState, Boolean& vIsMigrationStateSpecified, Boolean& vIsFilterPredicateSpecified, FunctionCall& vFilterPredicate);
    public TableDistributionPolicy tableDistributionPolicy();
    public TableReplicateDistributionPolicy tableReplicateDistributionPolicy();
    public TableRoundRobinDistributionPolicy tableRoundRobinDistributionPolicy();
    public TableHashDistributionPolicy tableHashDistributionPolicy();
    public TableIndexType tableIndexType();
    public TableNonClusteredIndexType tableNonClusteredIndexType();
    public TableClusteredIndexType tableClusteredIndexType();
    public void systemVersioningTableSuboption(SystemVersioningTableOption vParent, Boolean& historyTableSpecified, Boolean& dataConsistencyCheckSpecified, Boolean& retentionPeriodSpecified);
    public void externalTableColumnElement(CreateExternalTableStatement vResult);
    public ExternalTableColumnDefinition columnDefinitionCreateExternalTable();
    public void externalTableDataSource(CreateExternalTableStatement vParent);
    public ExternalTableOption createExternalTableOption();
    public ExternalTableRejectTypeOption externalTableRejectTypeOption();
    public ExternalTableDistributionOption externalTableDistributionOption();
    public ExternalTableLiteralOrIdentifierOption externalTableNumericLiteralOption();
    public ExternalTableLiteralOrIdentifierOption externalTableLiteralOrIdentifierOption();
    public ExternalTableDistributionPolicy externalTableDistributionPolicy();
    public ExternalTableReplicatedDistributionPolicy externalTableReplicatedDistributionPolicy();
    public ExternalTableRoundRobinDistributionPolicy externalTableRoundRobinDistributionPolicy();
    public ExternalTableShardedDistributionPolicy externalTableShardedDistributionPolicy();
    public AlterTableAlterColumnStatement alterTableAlterColumnStatement();
    public AlterTableAlterIndexStatement alterTableAlterIndexStatement();
    public AlterTableTriggerModificationStatement alterTableTriggerModificationStatement();
    public AlterTableDropTableElementStatement alterTableDropTableElementStatement();
    public AlterTableSwitchStatement alterTableSwitchStatement();
    public ConstraintEnforcement constraintEnforcement();
    public AlterTableAddTableElementStatement alterTableAddTableElementStatement(ConstraintEnforcement vExistingRowsCheck);
    public AlterTableConstraintModificationStatement alterTableConstraintModificationStatement(ConstraintEnforcement vExistingRowsCheck);
    public AlterTableRebuildStatement alterTableRebuildStatement();
    public AlterTableAlterPartitionStatement alterTableAlterPartitionStatement();
    public AlterTableChangeTrackingModificationStatement alterTableChangeTrackingModificationStatement();
    public AlterTableFileTableNamespaceStatement alterTableFileTableNamespaceStatement();
    public AlterTableSetStatement alterTableSetStatement();
    public TableOption tableOption();
    public LockEscalationTableOption lockEscalationTableOption();
    public FileStreamOnTableOption fileStreamOnTableOption();
    public RemoteDataArchiveAlterTableOption remoteDataArchiveAlterTableOption();
    public RdaTableOption remoteDtatArchiveTableOnOffOption(TSqlFragment vParent);
    public void generatedAlwaysClauseInAlter(AlterTableAlterColumnStatement vResult);
    public void maskedClause(IDataMaskingSetter vResult);
    public ColumnEncryptionDefinition columnEncryptionClause();
    public ColumnStorageOptions columnStorage(IndexAffectingStatement statementType, DataTypeReference columnType);
    public AlterTableDropTableElement alterTableDropTableElement();
    public void alterTableDropTableElementWithOptions(AlterTableDropTableElement vParent);
    public DropClusteredConstraintOption dropClusteredConstraintOption();
    public void tableSwitchOptionList(IList`1<TableSwitchOption> optionList, TSqlFragment vParent);
    public IndexType inlineIndexType();
    public IndexDefinition inlineIndexTableDefinition();
    public SystemTimePeriodDefinition tablePeriodDefinition();
    public IndexDefinition inlineIndexColumnDefinition();
    public ColumnDefinition columnDefinition(IndexAffectingStatement statementType, AlterTableAddTableElementStatement vStatement);
    public ConstraintDefinition tableConstraint(IndexAffectingStatement statementType, AlterTableAddTableElementStatement vStatement);
    public void computedColumnBody(ColumnDefinition vParent);
    public void computedColumnConstraintListOpt(IndexAffectingStatement statementType, ColumnDefinition vResult);
    public void regularColumnBody(IndexAffectingStatement statementType, ColumnDefinition vParent);
    public void columnConstraintListOpt(IndexAffectingStatement statementType, ColumnDefinition vResult);
    public ScalarExpression expressionWithFlags(ExpressionFlags expressionFlags);
    public void generatedAlwaysClause(ColumnDefinition vResult);
    public ColumnStorageOptions sparseAndFilestreamStorage(IndexAffectingStatement statementType, DataTypeReference columnType);
    public ColumnStorageOptions sparseStorage(IndexAffectingStatement statementType, DataTypeReference columnType);
    public ColumnStorageOptions allSparseStorage(IndexAffectingStatement statementType, DataTypeReference columnType);
    public ColumnStorageOptions filestreamStorage(IndexAffectingStatement statementType, DataTypeReference columnType);
    public ConstraintDefinition columnConstraint(IndexAffectingStatement statementType);
    public void rowguidcolConstraint(ColumnDefinition vParent);
    public IdentityOptions identityConstraint(IndexAffectingStatement statementType);
    public ColumnEncryptionDefinitionParameter columnEncryptionDefinitionParameter();
    public ColumnEncryptionKeyNameParameter columnEncryptionKeyNameParameter();
    public ColumnEncryptionTypeParameter columnEncryptionTypeParameter();
    public ColumnEncryptionAlgorithmParameter columnEncryptionAlgorithmParameter();
    public bool replicationClauseOpt(IndexAffectingStatement statementType, TSqlFragment vParent);
    public DefaultConstraintDefinition defaultColumnConstraint(IndexAffectingStatement statementType);
    public UniqueConstraintDefinition uniqueColumnConstraint(IndexAffectingStatement statementType);
    public ForeignKeyConstraintDefinition foreignKeyColumnConstraint(IndexAffectingStatement statementType);
    public CheckConstraintDefinition checkConstraint(IndexAffectingStatement statementType);
    public UniqueConstraintDefinition uniqueTableConstraint(IndexAffectingStatement statementType);
    public DefaultConstraintDefinition defaultTableConstraint(IndexAffectingStatement statementType);
    public ForeignKeyConstraintDefinition foreignKeyTableConstraint(IndexAffectingStatement statementType);
    public void uniqueConstraintHeader(UniqueConstraintDefinition vParent, bool throwInPhaseOne);
    public void uniqueConstraintEnforcement(UniqueConstraintDefinition vParent);
    public void uniqueConstraintTailOpt(IndexAffectingStatement statementType, UniqueConstraintDefinition vParent);
    public void uniqueConstraintIndexOptionsOpt(IndexAffectingStatement statement, UniqueConstraintDefinition vParent);
    public void sortedDataOptions();
    public DeleteUpdateAction deleteUpdateAction(TSqlFragment vParent);
    public void foreignKeyConstraintCommonEnd(IndexAffectingStatement statementType, ForeignKeyConstraintDefinition vParent);
    public void foreignConstraintColumnsOpt(ForeignKeyConstraintDefinition vParent);
    public XmlDataTypeReference xmlDataType(SchemaObjectName vName);
    public SchemaObjectName dataTypeSchemaObjectName();
    public SqlDataTypeReference sqlDataTypeWithoutNational(SchemaObjectName vName, SqlDataTypeOption vType);
    public UserDataTypeReference userDataType(SchemaObjectName vName);
    public SqlDataTypeReference doubleDataType();
    public SqlDataTypeReference sqlDataTypeWithNational();
    public void dataTypeParametersOpt(ParameterizedDataTypeReference vParent);
    public MaxLiteral max();
    public void identifierListElement(List`1<Identifier> vParent, int vMaxNumber, bool first);
    public MultiPartIdentifier nonEmptyThreePartObjectName();
    public MultiPartIdentifier oneOrTwoOrThreePartObjectName();
    public BooleanExpression booleanExpressionOr(ExpressionFlags expressionFlags);
    public BooleanExpression booleanExpressionAnd(ExpressionFlags expressionFlags);
    public BooleanExpression booleanExpressionUnary(ExpressionFlags expressionFlags);
    public BooleanExpression booleanExpressionPrimary(ExpressionFlags expressionFlags);
    public BooleanParenthesisExpression booleanExpressionParenthesis(ExpressionFlags expressionFlags);
    public BooleanExpression graphMatchPattern();
    public BooleanComparisonExpression comparisonPredicate(ScalarExpression vExpressionFirst, BooleanComparisonType vType, ExpressionFlags expressionFlags);
    public SubqueryComparisonPredicate subqueryComparisonPredicate(ScalarExpression vExpressionFirst, BooleanComparisonType vType, ExpressionFlags expressionFlags);
    public InPredicate inPredicate(ScalarExpression vExpressionFirst, bool vNotDefined, ExpressionFlags expressionFlags);
    public BooleanTernaryExpression betweenPredicate(ScalarExpression vExpressionFirst, bool vNotDefined, ExpressionFlags expressionFlags);
    public LikePredicate likePredicate(ScalarExpression vExpressionFirst, bool vNotDefined, ExpressionFlags expressionFlags);
    public FullTextPredicate fulltextPredicate();
    public ExistsPredicate existsPredicate(ExpressionFlags expressionFlags);
    public TSEqualCall tsEqualCall();
    public UpdateCall updateCall();
    public void graphCompositeMatchPattern(BooleanExpression& vResult);
    public GraphMatchExpression graphSingleMatchPattern(Identifier vLeftNode);
    public ColumnReferenceExpression fulltextColumn();
    public ColumnReferenceExpression starColumn();
    public SubqueryComparisonPredicateType subqueryComparisonPredicateType();
    public void escapeExpression(LikePredicate vParent, ExpressionFlags expressionFlags);
    public ScalarExpression expressionBinaryPri2(ExpressionFlags expressionFlags);
    public ScalarExpression expressionBinaryPri1(ExpressionFlags expressionFlags);
    public ScalarExpression expressionUnary(ExpressionFlags expressionFlags);
    public PrimaryExpression expressionWithClrElements(ExpressionFlags expressionFlags);
    public PrimaryExpression udtExpression();
    public PrimaryExpression expressionPrimary(ExpressionFlags expressionFlags);
    public FunctionCall expressionWithClrElementsFunctionCallPart();
    public CastCall castCall();
    public TryCastCall tryCastCall();
    public ParseCall parseCall();
    public TryParseCall tryParseCall();
    public IIfCall iIfCall();
    public FunctionCall builtInFunctionCall();
    public LeftFunctionCall leftFunctionCall();
    public RightFunctionCall rightFunctionCall();
    public PartitionFunctionCall partitionFunctionCall();
    public NextValueForExpression nextValueForCall();
    public PrimaryExpression columnOrFunctionCall();
    public NullIfExpression nullIfExpression(ExpressionFlags expressionFlags);
    public CoalesceExpression coalesceExpression(ExpressionFlags expressionFlags);
    public CaseExpression caseExpression(ExpressionFlags expressionFlags);
    public ConvertCall convertCall();
    public TryConvertCall tryConvertCall();
    public ParameterlessCall parameterlessCall();
    public ParenthesisExpression expressionParenthesis(ExpressionFlags expressionFlags);
    public UserDefinedTypeCallTarget userDefinedTypeCallTarget();
    public FunctionCall udtFunctionExpression(UserDefinedTypeCallTarget vCallTarget);
    public UserDefinedTypePropertyAccess udtPropertyExpression(UserDefinedTypeCallTarget vCallTarget);
    public FunctionCall basicFunctionCall();
    public OverClause overClause();
    public OverClause overClauseBeginning();
    public WindowFrameClause windowFrameClause();
    public OverClause overClauseNoOrderBy();
    public void windowFrameExtent(WindowFrameClause vParent);
    public WindowDelimiter windowFrameDelimiter();
    public WithinGroupClause withinGroupClause();
    public void trimBuiltInFunctionCall(FunctionCall vParent);
    public void regularBuiltInFunctionCall(FunctionCall vParent);
    public void aggregateBuiltInFunctionCall(FunctionCall vParent);
    public void withinGroupOrOverClause(FunctionCall vParent);
    public void reservedBuiltInFunctionCallParameters(TSqlFragment vParent, IList`1<ScalarExpression> parameters);
    public SimpleWhenClause simpleWhenClause(ExpressionFlags expressionFlags);
    public SearchedWhenClause searchedWhenClause(ExpressionFlags expressionFlags);
    public SimpleCaseExpression simpleCaseExpression(ScalarExpression inputExpression, ExpressionFlags expressionFlags);
    public SearchedCaseExpression searchedCaseExpression(ExpressionFlags expressionFlags);
    public ValueExpression globalVariableOrVariableReference();
    public SchemaObjectNameOrValueExpression objectOrVariable();
    public MoneyLiteral moneyLiteral();
    public OdbcLiteral odbcLiteral();
    private void initializeFactory();
    private static Int64[] mk_tokenSet_0_();
    private static Int64[] mk_tokenSet_1_();
    private static Int64[] mk_tokenSet_2_();
    private static Int64[] mk_tokenSet_3_();
    private static Int64[] mk_tokenSet_4_();
    private static Int64[] mk_tokenSet_5_();
    private static Int64[] mk_tokenSet_6_();
    private static Int64[] mk_tokenSet_7_();
    private static Int64[] mk_tokenSet_8_();
    private static Int64[] mk_tokenSet_9_();
    private static Int64[] mk_tokenSet_10_();
    private static Int64[] mk_tokenSet_11_();
    private static Int64[] mk_tokenSet_12_();
    private static Int64[] mk_tokenSet_13_();
    private static Int64[] mk_tokenSet_14_();
    private static Int64[] mk_tokenSet_15_();
    private static Int64[] mk_tokenSet_16_();
    private static Int64[] mk_tokenSet_17_();
    private static Int64[] mk_tokenSet_18_();
    private static Int64[] mk_tokenSet_19_();
    private static Int64[] mk_tokenSet_20_();
    private static Int64[] mk_tokenSet_21_();
    private static Int64[] mk_tokenSet_22_();
    private static Int64[] mk_tokenSet_23_();
    private static Int64[] mk_tokenSet_24_();
    private static Int64[] mk_tokenSet_25_();
    private static Int64[] mk_tokenSet_26_();
    private static Int64[] mk_tokenSet_27_();
    private static Int64[] mk_tokenSet_28_();
    private static Int64[] mk_tokenSet_29_();
    private static Int64[] mk_tokenSet_30_();
    private static Int64[] mk_tokenSet_31_();
    private static Int64[] mk_tokenSet_32_();
    private static Int64[] mk_tokenSet_33_();
    private static Int64[] mk_tokenSet_34_();
    private static Int64[] mk_tokenSet_35_();
    private static Int64[] mk_tokenSet_36_();
    private static Int64[] mk_tokenSet_37_();
    private static Int64[] mk_tokenSet_38_();
    private static Int64[] mk_tokenSet_39_();
    private static Int64[] mk_tokenSet_40_();
    private static Int64[] mk_tokenSet_41_();
    private static Int64[] mk_tokenSet_42_();
    private static Int64[] mk_tokenSet_43_();
    private static Int64[] mk_tokenSet_44_();
    private static Int64[] mk_tokenSet_45_();
    private static Int64[] mk_tokenSet_46_();
    private static Int64[] mk_tokenSet_47_();
    private static Int64[] mk_tokenSet_48_();
    private static Int64[] mk_tokenSet_49_();
    private static Int64[] mk_tokenSet_50_();
    private static Int64[] mk_tokenSet_51_();
    private static Int64[] mk_tokenSet_52_();
    private static Int64[] mk_tokenSet_53_();
    private static Int64[] mk_tokenSet_54_();
    private static Int64[] mk_tokenSet_55_();
    private static Int64[] mk_tokenSet_56_();
    private static Int64[] mk_tokenSet_57_();
    private static Int64[] mk_tokenSet_58_();
    private static Int64[] mk_tokenSet_59_();
    private static Int64[] mk_tokenSet_60_();
    private static Int64[] mk_tokenSet_61_();
    private static Int64[] mk_tokenSet_62_();
    private static Int64[] mk_tokenSet_63_();
    private static Int64[] mk_tokenSet_64_();
    private static Int64[] mk_tokenSet_65_();
    private static Int64[] mk_tokenSet_66_();
    private static Int64[] mk_tokenSet_67_();
    private static Int64[] mk_tokenSet_68_();
    private static Int64[] mk_tokenSet_69_();
    private static Int64[] mk_tokenSet_70_();
    private static Int64[] mk_tokenSet_71_();
    private static Int64[] mk_tokenSet_72_();
    private static Int64[] mk_tokenSet_73_();
    private static Int64[] mk_tokenSet_74_();
    private static Int64[] mk_tokenSet_75_();
    private static Int64[] mk_tokenSet_76_();
    private static Int64[] mk_tokenSet_77_();
    private static Int64[] mk_tokenSet_78_();
    private static Int64[] mk_tokenSet_79_();
    private static Int64[] mk_tokenSet_80_();
    private static Int64[] mk_tokenSet_81_();
    private static Int64[] mk_tokenSet_82_();
    private static Int64[] mk_tokenSet_83_();
    private static Int64[] mk_tokenSet_84_();
    private static Int64[] mk_tokenSet_85_();
    private static Int64[] mk_tokenSet_86_();
    private static Int64[] mk_tokenSet_87_();
    private static Int64[] mk_tokenSet_88_();
    private static Int64[] mk_tokenSet_89_();
    private static Int64[] mk_tokenSet_90_();
    private static Int64[] mk_tokenSet_91_();
    private static Int64[] mk_tokenSet_92_();
    private static Int64[] mk_tokenSet_93_();
    private static Int64[] mk_tokenSet_94_();
    private static Int64[] mk_tokenSet_95_();
    private static Int64[] mk_tokenSet_96_();
    private static Int64[] mk_tokenSet_97_();
    private static Int64[] mk_tokenSet_98_();
    private static Int64[] mk_tokenSet_99_();
    private static Int64[] mk_tokenSet_100_();
    private static Int64[] mk_tokenSet_101_();
    private static Int64[] mk_tokenSet_102_();
    private static Int64[] mk_tokenSet_103_();
    private static Int64[] mk_tokenSet_104_();
    private static Int64[] mk_tokenSet_105_();
    private static Int64[] mk_tokenSet_106_();
    private static Int64[] mk_tokenSet_107_();
    private static Int64[] mk_tokenSet_108_();
    private static Int64[] mk_tokenSet_109_();
    private static Int64[] mk_tokenSet_110_();
    private static Int64[] mk_tokenSet_111_();
    private static Int64[] mk_tokenSet_112_();
    private static Int64[] mk_tokenSet_113_();
    private static Int64[] mk_tokenSet_114_();
    private static Int64[] mk_tokenSet_115_();
    private static Int64[] mk_tokenSet_116_();
    private static Int64[] mk_tokenSet_117_();
    private static Int64[] mk_tokenSet_118_();
    private static Int64[] mk_tokenSet_119_();
    private static Int64[] mk_tokenSet_120_();
    private static Int64[] mk_tokenSet_121_();
    private static Int64[] mk_tokenSet_122_();
    private static Int64[] mk_tokenSet_123_();
    private static Int64[] mk_tokenSet_124_();
    private static Int64[] mk_tokenSet_125_();
    private static Int64[] mk_tokenSet_126_();
    private static Int64[] mk_tokenSet_127_();
    private static Int64[] mk_tokenSet_128_();
    private static Int64[] mk_tokenSet_129_();
    private static Int64[] mk_tokenSet_130_();
    private static Int64[] mk_tokenSet_131_();
    private static Int64[] mk_tokenSet_132_();
    private static Int64[] mk_tokenSet_133_();
    private static Int64[] mk_tokenSet_134_();
    private static Int64[] mk_tokenSet_135_();
    private static Int64[] mk_tokenSet_136_();
    private static Int64[] mk_tokenSet_137_();
    private static Int64[] mk_tokenSet_138_();
    private static Int64[] mk_tokenSet_139_();
    private static Int64[] mk_tokenSet_140_();
    private static Int64[] mk_tokenSet_141_();
    private static Int64[] mk_tokenSet_142_();
    private static Int64[] mk_tokenSet_143_();
    private static Int64[] mk_tokenSet_144_();
    private static Int64[] mk_tokenSet_145_();
    private static Int64[] mk_tokenSet_146_();
    private static Int64[] mk_tokenSet_147_();
    private static Int64[] mk_tokenSet_148_();
    private static Int64[] mk_tokenSet_149_();
    private static Int64[] mk_tokenSet_150_();
    private static Int64[] mk_tokenSet_151_();
    private static Int64[] mk_tokenSet_152_();
    private static Int64[] mk_tokenSet_153_();
    private static Int64[] mk_tokenSet_154_();
    private static Int64[] mk_tokenSet_155_();
    private static Int64[] mk_tokenSet_156_();
    private static Int64[] mk_tokenSet_157_();
    private static Int64[] mk_tokenSet_158_();
    private static Int64[] mk_tokenSet_159_();
    private static Int64[] mk_tokenSet_160_();
    private static Int64[] mk_tokenSet_161_();
    private static Int64[] mk_tokenSet_162_();
    private static Int64[] mk_tokenSet_163_();
    private static Int64[] mk_tokenSet_164_();
    private static Int64[] mk_tokenSet_165_();
    private static Int64[] mk_tokenSet_166_();
    private static Int64[] mk_tokenSet_167_();
    private static Int64[] mk_tokenSet_168_();
    private static Int64[] mk_tokenSet_169_();
    private static Int64[] mk_tokenSet_170_();
    private static Int64[] mk_tokenSet_171_();
    private static Int64[] mk_tokenSet_172_();
    private static Int64[] mk_tokenSet_173_();
    private static Int64[] mk_tokenSet_174_();
    private static Int64[] mk_tokenSet_175_();
    private static Int64[] mk_tokenSet_176_();
    private static Int64[] mk_tokenSet_177_();
    private static Int64[] mk_tokenSet_178_();
    private static Int64[] mk_tokenSet_179_();
    private static Int64[] mk_tokenSet_180_();
    private static Int64[] mk_tokenSet_181_();
    private static Int64[] mk_tokenSet_182_();
    private static Int64[] mk_tokenSet_183_();
    private static Int64[] mk_tokenSet_184_();
    private static Int64[] mk_tokenSet_185_();
    private static Int64[] mk_tokenSet_186_();
    private static Int64[] mk_tokenSet_187_();
    private static Int64[] mk_tokenSet_188_();
    private static Int64[] mk_tokenSet_189_();
    private static Int64[] mk_tokenSet_190_();
    private static Int64[] mk_tokenSet_191_();
    private static Int64[] mk_tokenSet_192_();
    private static Int64[] mk_tokenSet_193_();
    private static Int64[] mk_tokenSet_194_();
    private static Int64[] mk_tokenSet_195_();
    private static Int64[] mk_tokenSet_196_();
    private static Int64[] mk_tokenSet_197_();
    private static Int64[] mk_tokenSet_198_();
    private static Int64[] mk_tokenSet_199_();
    private static Int64[] mk_tokenSet_200_();
    private static Int64[] mk_tokenSet_201_();
    private static Int64[] mk_tokenSet_202_();
    private static Int64[] mk_tokenSet_203_();
    private static Int64[] mk_tokenSet_204_();
    private static Int64[] mk_tokenSet_205_();
}
internal class Microsoft.SqlServer.TransactSql.ScriptDom.TSql150LexerInternal : TSqlLexerBaseInternal {
    public static int EOF;
    public static int NULL_TREE_LOOKAHEAD;
    public static int Add;
    public static int All;
    public static int Alter;
    public static int And;
    public static int Any;
    public static int As;
    public static int Asc;
    public static int Authorization;
    public static int Backup;
    public static int Begin;
    public static int Between;
    public static int Break;
    public static int Browse;
    public static int Bulk;
    public static int By;
    public static int Cascade;
    public static int Case;
    public static int Check;
    public static int Checkpoint;
    public static int Close;
    public static int Clustered;
    public static int Coalesce;
    public static int Collate;
    public static int Column;
    public static int Commit;
    public static int Compute;
    public static int Constraint;
    public static int Contains;
    public static int ContainsTable;
    public static int Continue;
    public static int Convert;
    public static int Create;
    public static int Cross;
    public static int Current;
    public static int CurrentDate;
    public static int CurrentTime;
    public static int CurrentTimestamp;
    public static int CurrentUser;
    public static int Cursor;
    public static int Database;
    public static int Dbcc;
    public static int Deallocate;
    public static int Declare;
    public static int Default;
    public static int Delete;
    public static int Deny;
    public static int Desc;
    public static int Distinct;
    public static int Distributed;
    public static int Double;
    public static int Drop;
    public static int Else;
    public static int End;
    public static int Errlvl;
    public static int Escape;
    public static int Except;
    public static int Exec;
    public static int Execute;
    public static int Exists;
    public static int Exit;
    public static int Fetch;
    public static int File;
    public static int FillFactor;
    public static int For;
    public static int Foreign;
    public static int FreeText;
    public static int FreeTextTable;
    public static int From;
    public static int Full;
    public static int Function;
    public static int GoTo;
    public static int Grant;
    public static int Group;
    public static int Having;
    public static int HoldLock;
    public static int Identity;
    public static int IdentityInsert;
    public static int IdentityColumn;
    public static int If;
    public static int In;
    public static int Index;
    public static int Inner;
    public static int Insert;
    public static int Intersect;
    public static int Into;
    public static int Is;
    public static int Join;
    public static int Key;
    public static int Kill;
    public static int Left;
    public static int Like;
    public static int LineNo;
    public static int National;
    public static int NoCheck;
    public static int NonClustered;
    public static int Not;
    public static int Null;
    public static int NullIf;
    public static int Of;
    public static int Off;
    public static int Offsets;
    public static int On;
    public static int Open;
    public static int OpenDataSource;
    public static int OpenQuery;
    public static int OpenRowSet;
    public static int OpenXml;
    public static int Option;
    public static int Or;
    public static int Order;
    public static int Outer;
    public static int Over;
    public static int Percent;
    public static int Plan;
    public static int Primary;
    public static int Print;
    public static int Proc;
    public static int Procedure;
    public static int Public;
    public static int Raiserror;
    public static int Read;
    public static int ReadText;
    public static int Reconfigure;
    public static int References;
    public static int Replication;
    public static int Restore;
    public static int Restrict;
    public static int Return;
    public static int Revoke;
    public static int Right;
    public static int Rollback;
    public static int RowCount;
    public static int RowGuidColumn;
    public static int Rule;
    public static int Save;
    public static int Schema;
    public static int Select;
    public static int SessionUser;
    public static int Set;
    public static int SetUser;
    public static int Shutdown;
    public static int Some;
    public static int Statistics;
    public static int SystemUser;
    public static int Table;
    public static int TextSize;
    public static int Then;
    public static int To;
    public static int Top;
    public static int Tran;
    public static int Transaction;
    public static int Trigger;
    public static int Truncate;
    public static int TSEqual;
    public static int Union;
    public static int Unique;
    public static int Update;
    public static int UpdateText;
    public static int Use;
    public static int User;
    public static int Values;
    public static int Varying;
    public static int View;
    public static int WaitFor;
    public static int When;
    public static int Where;
    public static int While;
    public static int With;
    public static int WriteText;
    public static int Disk;
    public static int Precision;
    public static int External;
    public static int Revert;
    public static int Pivot;
    public static int Unpivot;
    public static int TableSample;
    public static int Dump;
    public static int Load;
    public static int Merge;
    public static int StopList;
    public static int SemanticKeyPhraseTable;
    public static int SemanticSimilarityTable;
    public static int SemanticSimilarityDetailsTable;
    public static int TryConvert;
    public static int Bang;
    public static int PercentSign;
    public static int Ampersand;
    public static int LeftParenthesis;
    public static int RightParenthesis;
    public static int LeftCurly;
    public static int RightCurly;
    public static int Star;
    public static int MultiplyEquals;
    public static int Plus;
    public static int Comma;
    public static int Minus;
    public static int Dot;
    public static int Divide;
    public static int Colon;
    public static int DoubleColon;
    public static int Semicolon;
    public static int LessThan;
    public static int EqualsSign;
    public static int RightOuterJoin;
    public static int GreaterThan;
    public static int Circumflex;
    public static int VerticalLine;
    public static int Tilde;
    public static int AddEquals;
    public static int SubtractEquals;
    public static int DivideEquals;
    public static int ModEquals;
    public static int BitwiseAndEquals;
    public static int BitwiseOrEquals;
    public static int BitwiseXorEquals;
    public static int Go;
    public static int Label;
    public static int Integer;
    public static int Numeric;
    public static int Real;
    public static int HexLiteral;
    public static int Money;
    public static int SqlCommandIdentifier;
    public static int PseudoColumn;
    public static int DollarPartition;
    public static int AsciiStringOrQuotedIdentifier;
    public static int AsciiStringLiteral;
    public static int UnicodeStringLiteral;
    public static int Identifier;
    public static int QuotedIdentifier;
    public static int Variable;
    public static int OdbcInitiator;
    public static int ProcNameSemicolon;
    public static int SingleLineComment;
    public static int MultilineComment;
    public static int WhiteSpace;
    public static int Digit;
    public static int FirstLetter;
    public static int Letter;
    public static int CharHighNotWhitespace;
    public static int MoneySign;
    public static int WS_CHAR_WO_NEWLINE;
    public static int Number;
    public static int Exponent;
    public static int EndOfLine;
    public static BitSet tokenSet_0_;
    public static BitSet tokenSet_1_;
    public static BitSet tokenSet_2_;
    public static BitSet tokenSet_3_;
    public static BitSet tokenSet_4_;
    public static BitSet tokenSet_5_;
    public static BitSet tokenSet_6_;
    public static BitSet tokenSet_7_;
    public static BitSet tokenSet_8_;
    public static BitSet tokenSet_9_;
    public static BitSet tokenSet_10_;
    public static BitSet tokenSet_11_;
    public static BitSet tokenSet_12_;
    public static BitSet tokenSet_13_;
    public TSql150LexerInternal(Stream ins);
    public TSql150LexerInternal(TextReader r);
    public TSql150LexerInternal(InputBuffer ib);
    public TSql150LexerInternal(LexerSharedInputState state);
    private static TSql150LexerInternal();
    private void initialize();
    public virtual IToken nextToken();
    public void mBang(bool _createToken);
    public void mPercentSign(bool _createToken);
    public void mAmpersand(bool _createToken);
    public void mLeftParenthesis(bool _createToken);
    public void mRightParenthesis(bool _createToken);
    public void mLeftCurly(bool _createToken);
    public void mRightCurly(bool _createToken);
    public void mStar(bool _createToken);
    public void mMultiplyEquals(bool _createToken);
    public void mPlus(bool _createToken);
    public void mComma(bool _createToken);
    public void mMinus(bool _createToken);
    protected void mDot(bool _createToken);
    public void mDivide(bool _createToken);
    public void mColon(bool _createToken);
    public void mDoubleColon(bool _createToken);
    public void mLessThan(bool _createToken);
    public void mEqualsSign(bool _createToken);
    public void mRightOuterJoin(bool _createToken);
    public void mGreaterThan(bool _createToken);
    public void mCircumflex(bool _createToken);
    public void mVerticalLine(bool _createToken);
    public void mTilde(bool _createToken);
    public void mAddEquals(bool _createToken);
    public void mSubtractEquals(bool _createToken);
    public void mDivideEquals(bool _createToken);
    public void mModEquals(bool _createToken);
    public void mBitwiseAndEquals(bool _createToken);
    public void mBitwiseOrEquals(bool _createToken);
    public void mBitwiseXorEquals(bool _createToken);
    protected void mSemicolon(bool _createToken);
    protected void mDigit(bool _createToken);
    protected void mFirstLetter(bool _createToken);
    protected void mCharHighNotWhitespace(bool _createToken);
    protected void mLetter(bool _createToken);
    protected void mMoneySign(bool _createToken);
    public void mProcNameSemicolon(bool _createToken);
    protected void mWS_CHAR_WO_NEWLINE(bool _createToken);
    public void mNumber(bool _createToken);
    public void mWhiteSpace(bool _createToken);
    protected void mEndOfLine(bool _createToken);
    public void mGo(bool _createToken);
    protected void mLabel(bool _createToken);
    protected void mInteger(bool _createToken);
    protected void mReal(bool _createToken);
    protected void mNumeric(bool _createToken);
    protected void mHexLiteral(bool _createToken);
    protected void mExponent(bool _createToken);
    protected void mMoney(bool _createToken);
    protected void mSqlCommandIdentifier(bool _createToken);
    protected void mPseudoColumn(bool _createToken);
    protected void mDollarPartition(bool _createToken);
    protected void mAsciiStringOrQuotedIdentifier(bool _createToken);
    public void mAsciiStringLiteral(bool _createToken);
    public void mUnicodeStringLiteral(bool _createToken);
    public void mIdentifier(bool _createToken);
    public void mQuotedIdentifier(bool _createToken);
    public void mVariable(bool _createToken);
    protected void mOdbcInitiator(bool _createToken);
    public void mSingleLineComment(bool _createToken);
    public void mMultilineComment(bool _createToken);
    private static Int64[] mk_tokenSet_0_();
    private static Int64[] mk_tokenSet_1_();
    private static Int64[] mk_tokenSet_2_();
    private static Int64[] mk_tokenSet_3_();
    private static Int64[] mk_tokenSet_4_();
    private static Int64[] mk_tokenSet_5_();
    private static Int64[] mk_tokenSet_6_();
    private static Int64[] mk_tokenSet_7_();
    private static Int64[] mk_tokenSet_8_();
    private static Int64[] mk_tokenSet_9_();
    private static Int64[] mk_tokenSet_10_();
    private static Int64[] mk_tokenSet_11_();
    private static Int64[] mk_tokenSet_12_();
    private static Int64[] mk_tokenSet_13_();
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.TSql150Parser : TSqlParser {
    protected SqlEngineType engineType;
    public TSql150Parser(bool initialQuotedIdentifiers);
    public TSql150Parser(bool initialQuotedIdentifiers, SqlEngineType engineType);
    internal virtual TSqlLexerBaseInternal GetNewInternalLexer();
    private TSql150ParserInternal GetNewInternalParser();
    private TSql150ParserInternal GetNewInternalParserForInput(TextReader input, IList`1& errors, int startOffset, int startLine, int startColumn);
    public virtual TSqlFragment Parse(IList`1<TSqlParserToken> tokens, IList`1& errors);
    private void HotswapCreateExternalStreamingJobStatements(TSqlFragment fragment);
    private ExecutableProcedureReference ConvertToExecutableProcedureReference(ExecuteStatement statement);
    public virtual ChildObjectName ParseChildObjectName(TextReader input, IList`1& errors, int startOffset, int startLine, int startColumn);
    public virtual SchemaObjectName ParseSchemaObjectName(TextReader input, IList`1& errors, int startOffset, int startLine, int startColumn);
    public virtual DataTypeReference ParseScalarDataType(TextReader input, IList`1& errors, int startOffset, int startLine, int startColumn);
    public virtual ScalarExpression ParseExpression(TextReader input, IList`1& errors, int startOffset, int startLine, int startColumn);
    public virtual BooleanExpression ParseBooleanExpression(TextReader input, IList`1& errors, int startOffset, int startLine, int startColumn);
    public virtual StatementList ParseStatementList(TextReader input, IList`1& errors, int startOffset, int startLine, int startColumn);
    public virtual SelectStatement ParseSubQueryExpressionWithOptionalCTE(TextReader input, IList`1& errors, int startOffset, int startLine, int startColumn);
    internal IPv4 ParseIPv4(TextReader input, IList`1& errors, int startOffset, int startLine, int startColumn);
    public virtual TSqlFragment ParseConstantOrIdentifier(TextReader input, IList`1& errors, int startOffset, int startLine, int startColumn);
    public virtual TSqlFragment ParseConstantOrIdentifierWithDefault(TextReader input, IList`1& errors, int startOffset, int startLine, int startColumn);
    internal virtual TSqlStatement PhaseOneParse(TextReader input);
}
internal abstract class Microsoft.SqlServer.TransactSql.ScriptDom.TSql150ParserBaseInternal : TSql140ParserBaseInternal {
    protected TSql150ParserBaseInternal(TokenBuffer tokenBuf, int k);
    protected TSql150ParserBaseInternal(ParserSharedInputState state, int k);
    protected TSql150ParserBaseInternal(TokenStream lexer, int k);
    public TSql150ParserBaseInternal(bool initialQuotedIdentifiersOn);
    protected static void VerifyAllowedIndexOption150(IndexAffectingStatement statement, IndexOption option);
}
internal class Microsoft.SqlServer.TransactSql.ScriptDom.TSql150ParserInternal : TSql150ParserBaseInternal {
    public static int EOF;
    public static int NULL_TREE_LOOKAHEAD;
    public static int Add;
    public static int All;
    public static int Alter;
    public static int And;
    public static int Any;
    public static int As;
    public static int Asc;
    public static int Authorization;
    public static int Backup;
    public static int Begin;
    public static int Between;
    public static int Break;
    public static int Browse;
    public static int Bulk;
    public static int By;
    public static int Cascade;
    public static int Case;
    public static int Check;
    public static int Checkpoint;
    public static int Close;
    public static int Clustered;
    public static int Coalesce;
    public static int Collate;
    public static int Column;
    public static int Commit;
    public static int Compute;
    public static int Constraint;
    public static int Contains;
    public static int ContainsTable;
    public static int Continue;
    public static int Convert;
    public static int Create;
    public static int Cross;
    public static int Current;
    public static int CurrentDate;
    public static int CurrentTime;
    public static int CurrentTimestamp;
    public static int CurrentUser;
    public static int Cursor;
    public static int Database;
    public static int Dbcc;
    public static int Deallocate;
    public static int Declare;
    public static int Default;
    public static int Delete;
    public static int Deny;
    public static int Desc;
    public static int Distinct;
    public static int Distributed;
    public static int Double;
    public static int Drop;
    public static int Else;
    public static int End;
    public static int Errlvl;
    public static int Escape;
    public static int Except;
    public static int Exec;
    public static int Execute;
    public static int Exists;
    public static int Exit;
    public static int Fetch;
    public static int File;
    public static int FillFactor;
    public static int For;
    public static int Foreign;
    public static int FreeText;
    public static int FreeTextTable;
    public static int From;
    public static int Full;
    public static int Function;
    public static int GoTo;
    public static int Grant;
    public static int Group;
    public static int Having;
    public static int HoldLock;
    public static int Identity;
    public static int IdentityInsert;
    public static int IdentityColumn;
    public static int If;
    public static int In;
    public static int Index;
    public static int Inner;
    public static int Insert;
    public static int Intersect;
    public static int Into;
    public static int Is;
    public static int Join;
    public static int Key;
    public static int Kill;
    public static int Left;
    public static int Like;
    public static int LineNo;
    public static int National;
    public static int NoCheck;
    public static int NonClustered;
    public static int Not;
    public static int Null;
    public static int NullIf;
    public static int Of;
    public static int Off;
    public static int Offsets;
    public static int On;
    public static int Open;
    public static int OpenDataSource;
    public static int OpenQuery;
    public static int OpenRowSet;
    public static int OpenXml;
    public static int Option;
    public static int Or;
    public static int Order;
    public static int Outer;
    public static int Over;
    public static int Percent;
    public static int Plan;
    public static int Primary;
    public static int Print;
    public static int Proc;
    public static int Procedure;
    public static int Public;
    public static int Raiserror;
    public static int Read;
    public static int ReadText;
    public static int Reconfigure;
    public static int References;
    public static int Replication;
    public static int Restore;
    public static int Restrict;
    public static int Return;
    public static int Revoke;
    public static int Right;
    public static int Rollback;
    public static int RowCount;
    public static int RowGuidColumn;
    public static int Rule;
    public static int Save;
    public static int Schema;
    public static int Select;
    public static int SessionUser;
    public static int Set;
    public static int SetUser;
    public static int Shutdown;
    public static int Some;
    public static int Statistics;
    public static int SystemUser;
    public static int Table;
    public static int TextSize;
    public static int Then;
    public static int To;
    public static int Top;
    public static int Tran;
    public static int Transaction;
    public static int Trigger;
    public static int Truncate;
    public static int TSEqual;
    public static int Union;
    public static int Unique;
    public static int Update;
    public static int UpdateText;
    public static int Use;
    public static int User;
    public static int Values;
    public static int Varying;
    public static int View;
    public static int WaitFor;
    public static int When;
    public static int Where;
    public static int While;
    public static int With;
    public static int WriteText;
    public static int Disk;
    public static int Precision;
    public static int External;
    public static int Revert;
    public static int Pivot;
    public static int Unpivot;
    public static int TableSample;
    public static int Dump;
    public static int Load;
    public static int Merge;
    public static int StopList;
    public static int SemanticKeyPhraseTable;
    public static int SemanticSimilarityTable;
    public static int SemanticSimilarityDetailsTable;
    public static int TryConvert;
    public static int Bang;
    public static int PercentSign;
    public static int Ampersand;
    public static int LeftParenthesis;
    public static int RightParenthesis;
    public static int LeftCurly;
    public static int RightCurly;
    public static int Star;
    public static int MultiplyEquals;
    public static int Plus;
    public static int Comma;
    public static int Minus;
    public static int Dot;
    public static int Divide;
    public static int Colon;
    public static int DoubleColon;
    public static int Semicolon;
    public static int LessThan;
    public static int EqualsSign;
    public static int RightOuterJoin;
    public static int GreaterThan;
    public static int Circumflex;
    public static int VerticalLine;
    public static int Tilde;
    public static int AddEquals;
    public static int SubtractEquals;
    public static int DivideEquals;
    public static int ModEquals;
    public static int BitwiseAndEquals;
    public static int BitwiseOrEquals;
    public static int BitwiseXorEquals;
    public static int Go;
    public static int Label;
    public static int Integer;
    public static int Numeric;
    public static int Real;
    public static int HexLiteral;
    public static int Money;
    public static int SqlCommandIdentifier;
    public static int PseudoColumn;
    public static int DollarPartition;
    public static int AsciiStringOrQuotedIdentifier;
    public static int AsciiStringLiteral;
    public static int UnicodeStringLiteral;
    public static int Identifier;
    public static int QuotedIdentifier;
    public static int Variable;
    public static int OdbcInitiator;
    public static int ProcNameSemicolon;
    public static int SingleLineComment;
    public static int MultilineComment;
    public static int WhiteSpace;
    public static int Credential;
    public static int Connection;
    public static int Object;
    public static String[] tokenNames_;
    public static BitSet tokenSet_0_;
    public static BitSet tokenSet_1_;
    public static BitSet tokenSet_2_;
    public static BitSet tokenSet_3_;
    public static BitSet tokenSet_4_;
    public static BitSet tokenSet_5_;
    public static BitSet tokenSet_6_;
    public static BitSet tokenSet_7_;
    public static BitSet tokenSet_8_;
    public static BitSet tokenSet_9_;
    public static BitSet tokenSet_10_;
    public static BitSet tokenSet_11_;
    public static BitSet tokenSet_12_;
    public static BitSet tokenSet_13_;
    public static BitSet tokenSet_14_;
    public static BitSet tokenSet_15_;
    public static BitSet tokenSet_16_;
    public static BitSet tokenSet_17_;
    public static BitSet tokenSet_18_;
    public static BitSet tokenSet_19_;
    public static BitSet tokenSet_20_;
    public static BitSet tokenSet_21_;
    public static BitSet tokenSet_22_;
    public static BitSet tokenSet_23_;
    public static BitSet tokenSet_24_;
    public static BitSet tokenSet_25_;
    public static BitSet tokenSet_26_;
    public static BitSet tokenSet_27_;
    public static BitSet tokenSet_28_;
    public static BitSet tokenSet_29_;
    public static BitSet tokenSet_30_;
    public static BitSet tokenSet_31_;
    public static BitSet tokenSet_32_;
    public static BitSet tokenSet_33_;
    public static BitSet tokenSet_34_;
    public static BitSet tokenSet_35_;
    public static BitSet tokenSet_36_;
    public static BitSet tokenSet_37_;
    public static BitSet tokenSet_38_;
    public static BitSet tokenSet_39_;
    public static BitSet tokenSet_40_;
    public static BitSet tokenSet_41_;
    public static BitSet tokenSet_42_;
    public static BitSet tokenSet_43_;
    public static BitSet tokenSet_44_;
    public static BitSet tokenSet_45_;
    public static BitSet tokenSet_46_;
    public static BitSet tokenSet_47_;
    public static BitSet tokenSet_48_;
    public static BitSet tokenSet_49_;
    public static BitSet tokenSet_50_;
    public static BitSet tokenSet_51_;
    public static BitSet tokenSet_52_;
    public static BitSet tokenSet_53_;
    public static BitSet tokenSet_54_;
    public static BitSet tokenSet_55_;
    public static BitSet tokenSet_56_;
    public static BitSet tokenSet_57_;
    public static BitSet tokenSet_58_;
    public static BitSet tokenSet_59_;
    public static BitSet tokenSet_60_;
    public static BitSet tokenSet_61_;
    public static BitSet tokenSet_62_;
    public static BitSet tokenSet_63_;
    public static BitSet tokenSet_64_;
    public static BitSet tokenSet_65_;
    public static BitSet tokenSet_66_;
    public static BitSet tokenSet_67_;
    public static BitSet tokenSet_68_;
    public static BitSet tokenSet_69_;
    public static BitSet tokenSet_70_;
    public static BitSet tokenSet_71_;
    public static BitSet tokenSet_72_;
    public static BitSet tokenSet_73_;
    public static BitSet tokenSet_74_;
    public static BitSet tokenSet_75_;
    public static BitSet tokenSet_76_;
    public static BitSet tokenSet_77_;
    public static BitSet tokenSet_78_;
    public static BitSet tokenSet_79_;
    public static BitSet tokenSet_80_;
    public static BitSet tokenSet_81_;
    public static BitSet tokenSet_82_;
    public static BitSet tokenSet_83_;
    public static BitSet tokenSet_84_;
    public static BitSet tokenSet_85_;
    public static BitSet tokenSet_86_;
    public static BitSet tokenSet_87_;
    public static BitSet tokenSet_88_;
    public static BitSet tokenSet_89_;
    public static BitSet tokenSet_90_;
    public static BitSet tokenSet_91_;
    public static BitSet tokenSet_92_;
    public static BitSet tokenSet_93_;
    public static BitSet tokenSet_94_;
    public static BitSet tokenSet_95_;
    public static BitSet tokenSet_96_;
    public static BitSet tokenSet_97_;
    public static BitSet tokenSet_98_;
    public static BitSet tokenSet_99_;
    public static BitSet tokenSet_100_;
    public static BitSet tokenSet_101_;
    public static BitSet tokenSet_102_;
    public static BitSet tokenSet_103_;
    public static BitSet tokenSet_104_;
    public static BitSet tokenSet_105_;
    public static BitSet tokenSet_106_;
    public static BitSet tokenSet_107_;
    public static BitSet tokenSet_108_;
    public static BitSet tokenSet_109_;
    public static BitSet tokenSet_110_;
    public static BitSet tokenSet_111_;
    public static BitSet tokenSet_112_;
    public static BitSet tokenSet_113_;
    public static BitSet tokenSet_114_;
    public static BitSet tokenSet_115_;
    public static BitSet tokenSet_116_;
    public static BitSet tokenSet_117_;
    public static BitSet tokenSet_118_;
    public static BitSet tokenSet_119_;
    public static BitSet tokenSet_120_;
    public static BitSet tokenSet_121_;
    public static BitSet tokenSet_122_;
    public static BitSet tokenSet_123_;
    public static BitSet tokenSet_124_;
    public static BitSet tokenSet_125_;
    public static BitSet tokenSet_126_;
    public static BitSet tokenSet_127_;
    public static BitSet tokenSet_128_;
    public static BitSet tokenSet_129_;
    public static BitSet tokenSet_130_;
    public static BitSet tokenSet_131_;
    public static BitSet tokenSet_132_;
    public static BitSet tokenSet_133_;
    public static BitSet tokenSet_134_;
    public static BitSet tokenSet_135_;
    public static BitSet tokenSet_136_;
    public static BitSet tokenSet_137_;
    public static BitSet tokenSet_138_;
    public static BitSet tokenSet_139_;
    public static BitSet tokenSet_140_;
    public static BitSet tokenSet_141_;
    public static BitSet tokenSet_142_;
    public static BitSet tokenSet_143_;
    public static BitSet tokenSet_144_;
    public static BitSet tokenSet_145_;
    public static BitSet tokenSet_146_;
    public static BitSet tokenSet_147_;
    public static BitSet tokenSet_148_;
    public static BitSet tokenSet_149_;
    public static BitSet tokenSet_150_;
    public static BitSet tokenSet_151_;
    public static BitSet tokenSet_152_;
    public static BitSet tokenSet_153_;
    public static BitSet tokenSet_154_;
    public static BitSet tokenSet_155_;
    public static BitSet tokenSet_156_;
    public static BitSet tokenSet_157_;
    public static BitSet tokenSet_158_;
    public static BitSet tokenSet_159_;
    public static BitSet tokenSet_160_;
    public static BitSet tokenSet_161_;
    public static BitSet tokenSet_162_;
    public static BitSet tokenSet_163_;
    public static BitSet tokenSet_164_;
    public static BitSet tokenSet_165_;
    public static BitSet tokenSet_166_;
    public static BitSet tokenSet_167_;
    public static BitSet tokenSet_168_;
    public static BitSet tokenSet_169_;
    public static BitSet tokenSet_170_;
    public static BitSet tokenSet_171_;
    public static BitSet tokenSet_172_;
    public static BitSet tokenSet_173_;
    public static BitSet tokenSet_174_;
    public static BitSet tokenSet_175_;
    public static BitSet tokenSet_176_;
    public static BitSet tokenSet_177_;
    public static BitSet tokenSet_178_;
    public static BitSet tokenSet_179_;
    public static BitSet tokenSet_180_;
    public static BitSet tokenSet_181_;
    public static BitSet tokenSet_182_;
    public static BitSet tokenSet_183_;
    public static BitSet tokenSet_184_;
    public static BitSet tokenSet_185_;
    public static BitSet tokenSet_186_;
    public static BitSet tokenSet_187_;
    public static BitSet tokenSet_188_;
    public static BitSet tokenSet_189_;
    public static BitSet tokenSet_190_;
    public static BitSet tokenSet_191_;
    public static BitSet tokenSet_192_;
    public static BitSet tokenSet_193_;
    public static BitSet tokenSet_194_;
    public static BitSet tokenSet_195_;
    public static BitSet tokenSet_196_;
    public static BitSet tokenSet_197_;
    public static BitSet tokenSet_198_;
    public static BitSet tokenSet_199_;
    public static BitSet tokenSet_200_;
    public static BitSet tokenSet_201_;
    public static BitSet tokenSet_202_;
    public static BitSet tokenSet_203_;
    public static BitSet tokenSet_204_;
    public static BitSet tokenSet_205_;
    public static BitSet tokenSet_206_;
    public static BitSet tokenSet_207_;
    public static BitSet tokenSet_208_;
    public static BitSet tokenSet_209_;
    public TSql150ParserInternal(bool initialQuotedIdentifiersOn);
    protected TSql150ParserInternal(TokenBuffer tokenBuf, int k);
    public TSql150ParserInternal(TokenBuffer tokenBuf);
    protected TSql150ParserInternal(TokenStream lexer, int k);
    public TSql150ParserInternal(TokenStream lexer);
    public TSql150ParserInternal(ParserSharedInputState state);
    private static TSql150ParserInternal();
    protected void initialize();
    public ChildObjectName entryPointChildObjectName();
    public ChildObjectName childObjectNameWithThreePrefixes();
    public SchemaObjectName entryPointSchemaObjectName();
    public SchemaObjectName schemaObjectFourPartName();
    public DataTypeReference entryPointScalarDataType();
    public DataTypeReference scalarDataType();
    public ScalarExpression entryPointExpression();
    public ScalarExpression expression();
    public BooleanExpression entryPointBooleanExpression();
    public BooleanExpression booleanExpression();
    public StatementList entryPointStatementList();
    public StatementList statementList(Boolean& vParseErrorOccurred);
    public SelectStatement entryPointSubqueryExpressionWithOptionalCTE();
    public SelectFunctionReturnType functionReturnClauseRelational();
    public IPv4 entryPointIPv4Address();
    public IPv4 ipAddressV4();
    public TSqlFragment entryPointConstantOrIdentifier();
    public ScalarExpression possibleNegativeConstantOrIdentifier();
    public TSqlFragment entryPointConstantOrIdentifierWithDefault();
    public ScalarExpression possibleNegativeConstantOrIdentifierWithDefault();
    public TSqlScript script();
    public TSqlBatch batch();
    public TSqlStatement lastStatementOptSemi();
    public ExecuteStatement optSimpleExecute();
    public TSqlStatement statementOptSemi();
    public TSqlStatement statement();
    public void optSemicolons(TSqlStatement vParent);
    public TSqlStatement lastStatement();
    public CopyStatement copyStatement();
    public SchemaObjectName schemaObjectThreePartName();
    public void copyColumnList(CopyStatement vParent);
    public StringLiteral nonEmptyString();
    public void copyWithClause(CopyStatement vParent);
    public void optimizerHints(TSqlFragment vParent, IList`1<OptimizerHint> hintsCollection);
    public CopyColumnOption copyColumnOption(Int32& columnCount, IToken tToken);
    public Identifier identifier();
    public ScalarExpression defaultValueLiteral();
    public IntegerLiteral integer();
    public CopyOption copyOption(Int32& encountered);
    public SingleValueTypeCopyOption singleValueTypeCopyOption();
    public CopyCredentialOption copyCredentialOption();
    public StringLiteral stringLiteral();
    public RenameEntityStatement renameEntityStatement();
    public Identifier securityStatementPermission();
    public void ctasCreateTableStatement(CreateTableStatement vParent);
    public void columnNameList(TSqlFragment vParent, IList`1<Identifier> columnNames);
    public void withTableOptions(CreateTableStatement vParent);
    public SelectStatement selectStatement(SubDmlFlags subDmlFlags);
    public void ctasCreateExternalTableStatement(CreateExternalTableStatement vParent);
    public void withExternalTableOptions(CreateExternalTableStatement vParent);
    public ExecutableProcedureReference execProc();
    public CreateTableStatement createTableStatement();
    public AlterTableStatement alterTableStatement();
    public TSqlStatement createIndexStatement();
    public TSqlStatement declareStatements();
    public TSqlStatement setStatements();
    public TSqlStatement beginStatements();
    public BreakStatement breakStatement();
    public ContinueStatement continueStatement();
    public IfStatement ifStatement();
    public WhileStatement whileStatement();
    public LabelStatement labelStatement();
    public TSqlStatement backupStatements();
    public TSqlStatement restoreStatements();
    public GoToStatement gotoStatement();
    public SaveTransactionStatement saveTransactionStatement();
    public RollbackTransactionStatement rollbackTransactionStatement();
    public CommitTransactionStatement commitTransactionStatement();
    public CreateStatisticsStatement createStatisticsStatement();
    public UpdateStatisticsStatement updateStatisticsStatement();
    public TSqlStatement alterDatabaseStatements();
    public ExecuteStatement executeStatement();
    public StatementWithCtesAndXmlNamespaces withCommonTableExpressionsAndXmlNamespacesStatements();
    public RaiseErrorStatement raiseErrorStatement();
    public TSqlStatement alter2005Statements();
    public TSqlStatement create2005Statements();
    public TSqlStatement createDatabaseStatements();
    public TSqlStatement addStatements();
    public TSqlStatement identifierStatements();
    public PrintStatement printStatement();
    public WaitForStatement waitForStatement();
    public ReadTextStatement readTextStatement();
    public UpdateTextStatement updateTextStatement();
    public WriteTextStatement writeTextStatement();
    public LineNoStatement lineNoStatement();
    public UseStatement useStatement();
    public TSqlStatement killStatements();
    public BulkInsertStatement bulkInsertStatement();
    public InsertBulkStatement insertBulkStatement();
    public CheckpointStatement checkpointStatement();
    public ReconfigureStatement reconfigureStatement();
    public ShutdownStatement shutdownStatement();
    public SetUserStatement setUserStatement();
    public TruncateTableStatement truncateTableStatement();
    public GrantStatement grantStatement90();
    public DenyStatement denyStatement90();
    public RevokeStatement revokeStatement90();
    public ReturnStatement returnStatement();
    public TSqlStatement openStatements();
    public TSqlStatement closeStatements();
    public DeallocateCursorStatement deallocateCursorStatement();
    public FetchCursorStatement fetchCursorStatement();
    public TSqlStatement dropStatements();
    public DbccStatement dbccStatement();
    public RevertStatement revertStatement();
    public ExecuteAsStatement executeAsStatement();
    public EndConversationStatement endConversationStatement();
    public WithCtesAndXmlNamespaces withCommonTableExpressionsAndXmlNamespaces();
    public SelectStatement select(SubDmlFlags subDmlFlags);
    public DeleteStatement deleteStatement(SubDmlFlags subDmlFlags);
    public InsertStatement insertStatement(SubDmlFlags subDmlFlags);
    public UpdateStatement updateStatement(SubDmlFlags subDmlFlags);
    public MergeStatement mergeStatement(SubDmlFlags subDmlFlags);
    public CreateProcedureStatement createProcedureStatement();
    public AlterProcedureStatement alterProcedureStatement();
    public CreateTriggerStatement createTriggerStatement();
    public AlterTriggerStatement alterTriggerStatement();
    public CreateDefaultStatement createDefaultStatement();
    public CreateRuleStatement createRuleStatement();
    public CreateViewStatement createViewStatement();
    public AlterViewStatement alterViewStatement();
    public CreateFunctionStatement createFunctionStatement();
    public AlterFunctionStatement alterFunctionStatement();
    public CreateSchemaStatement createSchemaStatement();
    public TSqlStatement createIdentifierStatement();
    public TSqlStatement alterIdentifierStatement();
    public UseFederationStatement useFederationStatement();
    public TSqlStatement createOrAlterStatements();
    public CreateViewStatement createMaterializedViewStatement();
    public CreateFederationStatement createFederationStatement();
    public AlterViewStatement alterMaterializedViewStatement();
    public AlterFederationStatement alterFederationStatement();
    public CreateOrAlterFunctionStatement createOrAlterFunctionStatement();
    public CreateOrAlterProcedureStatement createOrAlterProcedureStatement();
    public CreateOrAlterTriggerStatement createOrAlterTriggerStatement();
    public CreateOrAlterViewStatement createOrAlterViewStatement();
    public EnableDisableTriggerStatement disableTriggerStatement();
    public EnableDisableTriggerStatement enableTriggerStatement();
    public MoveConversationStatement moveConversationStatement();
    public GetConversationGroupStatement getConversationGroupStatement();
    public ReceiveStatement receiveStatement();
    public SendStatement sendStatement();
    public ThrowStatement throwStatement();
    public void enableDisableTriggerBody(EnableDisableTriggerStatement vParent);
    public TriggerObject triggerObject();
    public CreateAggregateStatement createAggregateStatement();
    public CreateApplicationRoleStatement createApplicationRoleStatement();
    public CreateAssemblyStatement createAssemblyStatement();
    public CreateAsymmetricKeyStatement createAsymmetricKeyStatement();
    public CreateAvailabilityGroupStatement createAvailabilityGroupStatement();
    public CreateBrokerPriorityStatement createBrokerPriorityStatement();
    public CreateCertificateStatement createCertificateStatement();
    public TSqlStatement createColumnStatements();
    public CreateColumnStoreIndexStatement createColumnStoreIndexStatement(IToken tUnique, Nullable`1<bool> isClustered);
    public CreateContractStatement createContractStatement();
    public CreateCredentialStatement createCredentialStatement();
    public CreateCryptographicProviderStatement createCryptographicProviderStatement();
    public CreateEndpointStatement createEndpointStatement();
    public TSqlStatement createEventStatement();
    public TSqlStatement createExternalStatements();
    public TSqlStatement createFulltextStatement();
    public IndexStatement createPrimaryXmlIndexStatement();
    public CreateSelectiveXmlIndexStatement createSelectiveXmlIndexStatement();
    public TSqlStatement createXmlStatements();
    public CreateLoginStatement createLoginStatement();
    public CreateMessageTypeStatement createMessageTypeStatement();
    public CreateMasterKeyStatement createMasterKeyStatement();
    public TSqlStatement createPartitionStatement();
    public CreateQueueStatement createQueueStatement();
    public CreateRemoteServiceBindingStatement createRemoteServiceBindingStatement();
    public CreateResourcePoolStatement createResourcePoolStatement();
    public CreateRoleStatement createRoleStatement();
    public CreateRouteStatement createRouteStatement();
    public CreateSearchPropertyListStatement createSearchPropertyListStatement();
    public CreateServiceStatement createServiceStatement();
    public CreateSpatialIndexStatement createSpatialIndexStatement();
    public CreateSymmetricKeyStatement createSymmetricKeyStatement();
    public CreateSynonymStatement createSynonymStatement();
    public CreateTypeStatement createTypeStatement();
    public TSqlStatement createServerStatements();
    public TSqlStatement createWorkloadStatements();
    public CreateSequenceStatement createSequenceStatement();
    public CreateSecurityPolicyStatement createSecurityPolicyStatement();
    public CreateUserStatement createUserStatement();
    public ProcedureParameter aggregateParameter();
    public AssemblyName assemblyName();
    public Identifier identifierVariable();
    public NullableConstraintDefinition nullableConstraint();
    public void applicationRoleStatement(ApplicationRoleStatement vParent, bool defaultSchemaAndPasswordOnly);
    public void authorizationOpt(IAuthorization vParent);
    public void expressionList(TSqlFragment vParent, IList`1<ScalarExpression> expressions);
    public PermissionSetAssemblyOption assemblyPermissionSetOption(IToken tPermissionSetVisibility);
    public CreateExternalLibraryStatement createExternalLibraryStatement();
    public ExternalLibraryFileOption createExternalLibraryFileOption();
    public AlterExternalLibraryStatement alterExternalLibraryStatement();
    public ExternalLibraryFileOption alterExternalLibraryFileOption();
    public DropExternalLibraryStatement dropExternalLibraryStatement();
    public ValueExpression binaryOrString();
    public BinaryLiteral binary();
    public CreateExternalLanguageStatement createExternalLanguageStatement();
    public ExternalLanguageFileOption externalLanguageFileOption();
    public AlterExternalLanguageStatement alterExternalLanguageStatement();
    public DropExternalLanguageStatement dropExternalLanguageStatement();
    public void createAsymmetricKeyParams(CreateAsymmetricKeyStatement vParent);
    public Literal encryptClause();
    public EncryptionSource asymKeySource();
    public void asymKeySpec(CreateAsymmetricKeyStatement vParent);
    public FileEncryptionSource fileEncryptionSource();
    public AssemblyEncryptionSource assemblyEncryptionSource();
    public ProviderEncryptionSource providerEncryptionSource();
    public void providerKeySourceOptions(IList`1<KeyOption> optionsList, TSqlFragment vParent);
    public void createCertificateParams(CreateCertificateStatement vParent);
    public void createCertificateActivityFlag(CertificateStatementBase vParent);
    public void certificateSource(CreateCertificateStatement vParent);
    public CertificateOption certificateOption(CertificateOptionKinds encountered);
    public OptionState optionOnOff(TSqlFragment vParent);
    public void privateKeySpec(CertificateStatementBase vParent);
    public void certificatePrivateKeySpec(CertificateStatementBase vParent);
    public void passwordChangeOption(IPasswordChangeOption vParent);
    public ContractMessage contractMessage();
    public CreateCredentialStatement createDatabaseScopedCredentialStatement();
    public void credentialStatementBody(CredentialStatement vParent);
    public TSqlStatement createServerAuditStatements();
    public CreateServerRoleStatement createServerRoleStatement();
    public CreateServerAuditSpecificationStatement createServerAuditSpecificationStatement();
    public CreateServerAuditStatement createServerAuditStatement();
    public AuditTarget auditTargetClause(bool pathRequired);
    public void auditCreateWithClause(ServerAuditStatement vParent);
    public BooleanExpression eventBooleanExpression();
    public AuditTargetOption auditFileOption();
    public AuditTargetOption auditUrlOption();
    public MaxSizeAuditTargetOption maxSizeAuditFileOption();
    public MaxRolloverFilesAuditTargetOption maxRolloverFilesAuditFileOption();
    public OnOffAuditTargetOption reserveDiskSpaceAuditFileOption();
    public LiteralAuditTargetOption maxFilesAuditFileOption();
    public LiteralAuditTargetOption pathAuditFileOption();
    public RetentionDaysAuditTargetOption retentionDaysAuditUrlOption();
    public AuditOption auditCreateOption();
    public void auditWithClause(ServerAuditStatement vParent);
    public AuditOption auditOption();
    public QueueDelayAuditOption queueDelayAuditOption(IToken tOption);
    public OnFailureAuditOption onFailureAuditOption(IToken tOption);
    public AuditGuidAuditOption auditGuidAuditOption(IToken tOption);
    public StateAuditOption stateAuditOption(IToken tOption);
    public void auditSpecificationForClause(AuditSpecificationStatement vParent);
    public AuditSpecificationPart createAuditSpecificationDetail();
    public void auditSpecificationStateOpt(AuditSpecificationStatement vParent);
    public TSqlStatement alterServerStatements();
    public TSqlStatement alterServerAuditStatements();
    public TSqlStatement alterServerConfigurationStatement();
    public AlterServerRoleStatement alterServerRoleStatement();
    public AlterServerAuditSpecificationStatement alterServerAuditSpecificationStatement();
    public AlterServerAuditStatement alterServerAuditStatement();
    public AuditSpecificationPart auditSpecificationDetail();
    public AlterServerConfigurationStatement alterServerConfigurationSetProcessAffinityStatement();
    public AlterServerConfigurationSetBufferPoolExtensionStatement alterServerConfigurationSetBufferPoolExtensionStatement();
    public AlterServerConfigurationSetDiagnosticsLogStatement alterServerConfigurationSetDiagnosticsLogStatement();
    public AlterServerConfigurationSetFailoverClusterPropertyStatement alterServerConfigurationSetFailoverClusterPropertyStatement();
    public AlterServerConfigurationSetHadrClusterStatement alterServerConfigurationSetHadrClusterStatement();
    public AlterServerConfigurationSetSoftNumaStatement alterServerConfigurationSetSoftNumaStatement();
    public AlterServerConfigurationSetExternalAuthenticationStatement alterServerConfigurationSetExternalAuthenticationStatement();
    public AlterServerConfigurationExternalAuthenticationContainerOption alterServerConfigurationExternalAuthenticationContainerOption();
    public OnOffOptionValue onOffOptionValue();
    public AlterServerConfigurationExternalAuthenticationOption alterServerConfigurationExternalAuthenticationOption();
    public AlterServerConfigurationExternalAuthenticationOption alterServerConfigurationExternalAuthenticationUseIdentityOption();
    public AlterServerConfigurationExternalAuthenticationOption alterServerConfigurationExternalAuthenticationCredentialNameOption();
    public LiteralOptionValue stringLiteralOptionValue();
    public AlterServerConfigurationSoftNumaOption alterServerConfigurationSoftNumaOption();
    public AlterServerConfigurationBufferPoolExtensionContainerOption alterServerConfigurationBufferPoolExtensionContainerOption();
    public AlterServerConfigurationBufferPoolExtensionOption alterServerConfigurationBufferPoolExtensionFileNameOption();
    public AlterServerConfigurationBufferPoolExtensionSizeOption alterServerConfigurationBufferPoolExtensionSizeOption();
    public LiteralOptionValue integerLiteralOptionValue();
    public MemoryUnit memUnit(TSqlFragment vParent);
    public AlterServerConfigurationDiagnosticsLogOption alterServerConfigurationDiagnosticsLogOption();
    public AlterServerConfigurationDiagnosticsLogMaxSizeOption alterServerConfigurationDiagnosticsLogMaxSizeOption();
    public LiteralOptionValue stringOrDefaultLiteralOptionValue();
    public LiteralOptionValue integerOrDefaultLiteralOptionValue();
    public LiteralOptionValue defaultLiteralOptionValue();
    public AlterServerConfigurationFailoverClusterPropertyOption alterServerConfigurationFailoverClusterPropertyOption();
    public LiteralOptionValue binaryOrDefaultLiteralOptionValue();
    public AlterServerConfigurationHadrClusterOption alterServerConfigurationHadrClusterOption();
    public void affinityRangeList(AlterServerConfigurationStatement vParent);
    public ProcessAffinityRange affinityRange();
    public AlterDatabaseAuditSpecificationStatement alterDatabaseAuditSpecification(IToken tAlter);
    public AlterCredentialStatement alterDatabaseScopedCredentialStatement(IToken tAlter);
    public AlterDatabaseScopedConfigurationStatement alterDatabaseScopedConfigurationStatement(IToken tAlter);
    public AlterDatabaseStatement alterDatabase(IToken tAlter);
    public AlterDatabaseEncryptionKeyStatement alterDatabaseEncryptionKey(IToken tAlter);
    public AlterDatabaseScopedConfigurationSetStatement alterDatabaseScopedConfigSet(bool forSecondary);
    public AlterDatabaseScopedConfigurationClearStatement alterDatabaseScopedConfigClear();
    public DatabaseConfigurationClearOption databaseConfigurationClearOption();
    public MaxDopConfigurationOption alterDatabaseScopedMaxDopOption(bool forSecondary);
    public OnOffPrimaryConfigurationOption alterDatabaseScopedOnOffPrimaryOption(bool forSecondary);
    public GenericConfigurationOption alterDatabaseScopedGenericOption(bool forSecondary);
    public DatabaseConfigurationOptionState databaseConfigurationOptionOnOffPrimary(TSqlFragment vParent);
    public IdentifierOrScalarExpression stringOrSignedIntegerOrIdentifier();
    public Identifier onOff();
    public SqlCommandIdentifier sqlCommandIdentifier();
    public AlterDatabaseStatement alterDbAdd();
    public AlterDatabaseStatement alterDbRemove();
    public AlterDatabaseStatement alterDbModify();
    public AlterDatabaseSetStatement alterDbSet();
    public AlterDatabaseCollateStatement alterDbCollate();
    public AlterDatabaseRebuildLogStatement alterDbRebuild();
    public void collation(ICollationSetter vParent);
    public FileDeclaration fileDecl(bool isAlterDbModifyFileStatement);
    public AlterDatabaseAddFileStatement alterDbAddFile();
    public AlterDatabaseAddFileGroupStatement alterDbAddFilegroup();
    public void fileDeclBodyList(TSqlFragment vParent, IList`1<FileDeclaration> fileDeclarations);
    public Identifier toFilegroup();
    public AlterDatabaseModifyFileGroupStatement alterDbModifyFilegroup();
    public AlterDatabaseModifyFileStatement alterDbModifyFile();
    public AlterDatabaseSetStatement alterDbModifyAzureOptions();
    public void azureOptions(TSqlFragment vParent, IList`1<DatabaseOption> vOptions);
    public AlterDatabaseTermination xactTermination();
    public AlterDatabaseSetStatement dbOptionStateList();
    public DatabaseOption dbOptionStateItem(UInt64& encounteredOptions);
    public CursorDefaultDatabaseOption cursorDefaultDbOption();
    public RecoveryDatabaseOption recoveryDbOption();
    public TargetRecoveryTimeDatabaseOption targetRecoveryTimeDbOption();
    public PageVerifyDatabaseOption pageVerifyDbOption();
    public PartnerDatabaseOption partnerOption();
    public WitnessDatabaseOption witnessOption();
    public ParameterizationDatabaseOption parameterizationOption();
    public LiteralDatabaseOption compatibilityLevelDbOption();
    public ChangeTrackingDatabaseOption changeTrackingDbOption();
    public AcceleratedDatabaseRecoveryDatabaseOption acceleratedDatabaseRecoveryOption();
    public ContainmentDatabaseOption dbContainmentOption();
    public DatabaseOption hadrDbOption();
    public DelayedDurabilityDatabaseOption dbDelayedDurabilityOption();
    public AutoCreateStatisticsDatabaseOption autoCreateStatisticsDbOption();
    public RemoteDataArchiveDatabaseOption remoteDataArchiveDbOption();
    public DatabaseOption createAlterDbOption(UInt64& encounteredOptions);
    public QueryStoreDatabaseOption queryStoreDbOption();
    public AutomaticTuningDatabaseOption automaticTuningDbOption();
    public DatabaseOption dbSingleIdentOption();
    public OnOffDatabaseOption alterDbOnOffOption();
    public void changeTrackingOnOptions(ChangeTrackingDatabaseOption vParent);
    public ChangeTrackingOptionDetail changeTrackingOneOption(Boolean& autoCleanupEncountered, Boolean& changeRetentionEncountered);
    public void queryStoreOnOptions(QueryStoreDatabaseOption vParent);
    public QueryStoreOption queryStoreOneOption();
    public QueryStoreDesiredStateOption queryStoreDesiredStateOption();
    public QueryStoreCapturePolicyOption queryStoreCaptureModeOption();
    public QueryStoreSizeCleanupPolicyOption queryStoreSizeCleanupModeOption();
    public QueryStoreDataFlushIntervalOption queryStoreDataFlushIntervalOption();
    public QueryStoreIntervalLengthOption queryStoreIntervalLengthOption();
    public QueryStoreMaxStorageSizeOption queryStoreMaxQdsSizeOption();
    public QueryStoreMaxPlansPerQueryOption queryStoreMaxPlansPerQueryOption();
    public QueryStoreTimeCleanupPolicyOption queryStoreTimeCleanupPolicy();
    public void automaticTuningOptions(AutomaticTuningDatabaseOption vParent);
    public AutomaticTuningOption automaticTuningOneOption();
    public AutomaticTuningForceLastGoodPlanOption automaticTuningForceLastGoodPlanOption();
    public AutomaticTuningCreateIndexOption automaticTuningCreateIndexOption();
    public AutomaticTuningDropIndexOption automaticTuningDropIndexOption();
    public AutomaticTuningMaintainIndexOption automaticTuningMaintainIndexOption();
    public HadrAvailabilityGroupDatabaseOption hadrAvailabilityDbOption();
    public HadrDatabaseOption simpleHadrDbOption();
    public AuditSpecificationPart auditSpecificationDetailDb();
    public CryptoMechanism dekEncryptor();
    public AddSensitivityClassificationStatement addSensitivityClassificationStatement();
    public ColumnReferenceExpression column();
    public SensitivityClassificationOption sensitivityClassificationOption();
    public DropSensitivityClassificationStatement dropSensitivityClassificationStatement();
    public CreateDatabaseAuditSpecificationStatement createDatabaseAuditSpecification();
    public CreateDatabaseStatement createDatabase();
    public CreateDatabaseEncryptionKeyStatement createDatabaseEncryptionKey();
    public void azureAsCopyOf(CreateDatabaseStatement vParent);
    public void recoveryUnitList(CreateDatabaseStatement vParent);
    public void collationOpt(ICollationSetter vParent);
    public void dbAddendums(CreateDatabaseStatement vParent);
    public void withCreateDbOptions(CreateDatabaseStatement vParent);
    public DatabaseOption azureOption();
    public MaxSizeDatabaseOption azureMaxSizeDatabaseOption();
    public LiteralDatabaseOption azureEditionDatabaseOption();
    public LiteralDatabaseOption azureServiceObjectiveDatabaseOption();
    public MultiPartIdentifier multiPartIdentifier(int vMaxNumber);
    public void onDisk(CreateDatabaseStatement vParent);
    public FileGroupDefinition fileGroupDecl();
    public FileDeclaration fileDeclBody(bool isAlterDbModifyFileStatement);
    public FileDeclarationOption fileOption(bool newNameAllowed);
    public NameFileDeclarationOption nameFileOption();
    public FileNameFileDeclarationOption fileNameFileOption();
    public SizeFileDeclarationOption sizeFileOption();
    public MaxSizeFileDeclarationOption maxSizeFileOption();
    public FileGrowthFileDeclarationOption fileGrowthFileOption();
    public NameFileDeclarationOption newNameFileOption();
    public FileDeclarationOption offlineFileOption();
    public IdentifierOrValueExpression nonEmptyStringOrIdentifier();
    public DatabaseOption createDbServiceBrokerOption();
    public DatabaseOption restrictedUserCreateDbOption();
    public OnOffDatabaseOption createDbOnOffOption();
    public FileStreamDatabaseOption fileStreamCreateAlterDbOption();
    public DatabaseOption createAlterDbEqualsSignOption();
    public LiteralDatabaseOption createAlterDbLiteralOption(IToken tOption);
    public IdentifierDatabaseOption createAlterDbIdentifierOption(IToken tOption);
    public OnOffDatabaseOption createAlterDbOnOffOption(IToken tOption);
    public void fileStreamOption(FileStreamDatabaseOption vParent);
    public Literal stringLiteralOrNull();
    public void remoteDataArchiveDbSettingsList(RemoteDataArchiveDatabaseOption vParent);
    public RemoteDataArchiveDatabaseSetting remoteDataArchiveDbSetting(Identifier& rdaOptionIdentifier);
    public AuditSpecificationPart createAuditSpecificationDetailDb();
    public AuditActionSpecification auditActionSpecification();
    public AuditActionGroupReference databaseAuditActionGroup();
    public AuditActionGroupReference serverAuditActionGroup();
    public DatabaseAuditAction actionWithQual();
    public SecurityTargetObject securityTargetObject(bool vColumnsDisallowed);
    public SecurityPrincipal principal();
    public void dekEncryptorType(CryptoMechanism vParent);
    public BackupCertificateStatement backupCertificateStatement();
    public BackupServiceMasterKeyStatement backupServiceMasterKeyStatement();
    public BackupMasterKeyStatement backupMasterKeyStatement();
    public BackupStatement backupStatement();
    public BackupStatement backupMain();
    public void backupDevices(BackupStatement vParent);
    public void backupOptions(BackupStatement vParent);
    public RestoreServiceMasterKeyStatement restoreServiceMasterKeyStatement();
    public RestoreMasterKeyStatement restoreMasterKeyStatement();
    public RestoreStatement restoreStatement();
    public void restoreMain(RestoreStatement vParent);
    public void devList(TSqlFragment vParent, IList`1<DeviceInfo> deviceInfos);
    public void restoreOptions(RestoreStatement vParent);
    public BackupDatabaseStatement backupDatabase();
    public BackupTransactionLogStatement backupTransactionLog();
    public IdentifierOrValueExpression identifierOrVariable();
    public void backupFileListOpt(BackupDatabaseStatement vParent);
    public BackupRestoreFileInfo backupRestoreFile();
    public void restoreFileListOpt(RestoreStatement vParent);
    public ValueExpression stringOrVariable();
    public void backupRestoreFileNameList(BackupRestoreFileInfo vParent);
    public MirrorToClause mirrorTo();
    public DeviceInfo deviceInfo();
    public BackupOption backupOption();
    public BackupEncryptionOption backupEncryptionOption();
    public ScalarExpression signedIntegerOrVariable();
    public CryptoMechanism backupEncrytor();
    public void restoreOptionsList(RestoreStatement vParent);
    public RestoreOption restoreOption();
    public FileStreamRestoreOption fileStreamRestoreOption();
    public RestoreOption simpleRestoreOption();
    public ValueExpression afterClause();
    public ScalarExpression signedInteger();
    public MoveRestoreOption moveRestoreOption();
    public ScalarExpressionRestoreOption fileRestoreOption();
    public void backupMasterKeyBody(BackupRestoreMasterKeyStatementBase vParent);
    public void restoreMasterKeyBody(BackupRestoreMasterKeyStatementBase vParent);
    public IdentifierOrValueExpression bulkInsertFrom();
    public void bulkInsertOptions(BulkInsertStatement vParent);
    public IdentifierOrValueExpression stringOrIdentifier();
    public BulkInsertOption bulkInsertOption();
    public OrderBulkInsertOption bulkInsertSortOrderOption();
    public LiteralBulkInsertOption simpleBulkInsertOptionWithValue();
    public BulkInsertOption simpleBulkInsertOptionNoValue();
    public BulkInsertOption insertBulkOption();
    public BulkInsertOption simpleInsertBulkOption();
    public Literal integerOrNumeric();
    public void coldefList(InsertBulkStatement vParent);
    public void insertBulkOptions(InsertBulkStatement vParent);
    public InsertBulkColumnDefinition coldefItem();
    public ColumnDefinitionBase columnDefinitionEx();
    public bool nullNotNull(TSqlFragment vParent);
    public ColumnWithSortOrder columnWithSortOrder();
    public OrderBulkInsertOption openRowsetBulkOrderHint();
    public void dbccNamedLiteralList(DbccStatement vParent);
    public void dbccOptions(DbccStatement vParent);
    public void dbccOptionsList(DbccStatement vParent);
    public void dbccOptionsListItems(DbccStatement vParent);
    public void dbccOptionsJoin(DbccStatement vParent);
    public DbccOption dbccOption();
    public DbccOption dbccJoinOption();
    public DbccNamedLiteral dbccNamedLiteral();
    public void endpointOptions(AlterCreateEndpointStatementBase vParent);
    public void protocolInfo(AlterCreateEndpointStatementBase vParent);
    public void payloadInfo(AlterCreateEndpointStatementBase vParent);
    public void endpointOption(AlterCreateEndpointStatementBase vParent);
    public void endpointState(AlterCreateEndpointStatementBase vParent);
    public void endpointAffinity(AlterCreateEndpointStatementBase vParent);
    public EndpointProtocolOption protocolOptionsItem(EndpointProtocol protocol, EndpointProtocolOptions encountered);
    public ListenerIPEndpointProtocolOption listenerIpProtocolOption(EndpointProtocol protocol, EndpointProtocolOptions encountered);
    public LiteralEndpointProtocolOption listenerPortProtocolOption(EndpointProtocol protocol, EndpointProtocolOptions encountered);
    public LiteralEndpointProtocolOption pathProtocolOption(EndpointProtocol protocol, EndpointProtocolOptions encountered);
    public LiteralEndpointProtocolOption siteProtocolOption(EndpointProtocol protocol, EndpointProtocolOptions encountered);
    public LiteralEndpointProtocolOption clearPortProtocolOption(EndpointProtocol protocol, EndpointProtocolOptions encountered);
    public LiteralEndpointProtocolOption sslPortProtocolOption(EndpointProtocol protocol, EndpointProtocolOptions encountered);
    public AuthenticationEndpointProtocolOption authenticationProtocolOption(EndpointProtocol protocol, EndpointProtocolOptions encountered);
    public PortsEndpointProtocolOption portsProtocolOption(EndpointProtocol protocol, EndpointProtocolOptions encountered);
    public LiteralEndpointProtocolOption authenticationRealmProtocolOption(EndpointProtocol protocol, EndpointProtocolOptions encountered);
    public LiteralEndpointProtocolOption defaultLogonDomainProtocolOption(EndpointProtocol protocol, EndpointProtocolOptions encountered);
    public CompressionEndpointProtocolOption compressionProtocolOption(EndpointProtocol protocol, EndpointProtocolOptions encountered);
    public void ipV4DotNumberTail(IPv4 vParent);
    public void ipV4DotLastTwoPartsTail(IPv4 vParent);
    public void ipV4NumericOrNumericIntegerTail(IPv4 vParent);
    public PayloadOption payloadOption(EndpointType type, PayloadOptionKinds encountered);
    public SoapMethod soapMethod(EndpointType type, PayloadOptionKinds encountered);
    public EnabledDisabledPayloadOption batchesPayloadOption(EndpointType type, PayloadOptionKinds encountered);
    public WsdlPayloadOption wsdlPayloadOption(EndpointType type, PayloadOptionKinds encountered);
    public EnabledDisabledPayloadOption sessionsPayloadOption(EndpointType type, PayloadOptionKinds encountered);
    public LoginTypePayloadOption loginTypePayloadOption(EndpointType type, PayloadOptionKinds encountered);
    public SessionTimeoutPayloadOption sessionTimeoutPayloadOption(EndpointType type, PayloadOptionKinds encountered);
    public LiteralPayloadOption databasePayloadOption(EndpointType type, PayloadOptionKinds encountered);
    public LiteralPayloadOption namespacePayloadOption(EndpointType type, PayloadOptionKinds encountered);
    public SchemaPayloadOption schemaPayloadOption(EndpointType type, PayloadOptionKinds encountered);
    public CharacterSetPayloadOption characterSetPayloadOption(EndpointType type, PayloadOptionKinds encountered);
    public LiteralPayloadOption headerLimitPayloadOption(EndpointType type, PayloadOptionKinds encountered);
    public AuthenticationPayloadOption authenticationPayloadOption(EndpointType type, PayloadOptionKinds encountered);
    public EncryptionPayloadOption encryptionPayloadOption(EndpointType type, PayloadOptionKinds encountered);
    public EnabledDisabledPayloadOption messageForwardingPayloadOption(EndpointType type, PayloadOptionKinds encountered);
    public LiteralPayloadOption messageForwardSizePayloadOption(EndpointType type, PayloadOptionKinds encountered);
    public RolePayloadOption rolePayloadOption(EndpointType type, PayloadOptionKinds encountered);
    public void enabledDisabled(EnabledDisabledPayloadOption vParent);
    public DefaultLiteral defaultLiteral();
    public void soapMethodAlias(SoapMethod vParent);
    public void soapMethodOption(SoapMethod vParent);
    public CreateEventNotificationStatement createEventNotificationStatement();
    public CreateEventSessionStatement createEventSessionStatement();
    public EventNotificationObjectScope eventNotificationObjectScope();
    public EventTypeGroupContainer eventTypeGroupContainer();
    public void eventSessionScope(EventSessionStatement vParent);
    public void eventDeclarationList(EventSessionStatement vParent);
    public void targetDeclarationList(EventSessionStatement vParent);
    public void optSessionOptionList(EventSessionStatement vParent);
    public AlterEventSessionStatement alterEventSessionStatement();
    public void dropEventDeclarationList(AlterEventSessionStatement vParent);
    public void dropTargetDeclarationList(AlterEventSessionStatement vParent);
    public void sessionOptionList(EventSessionStatement vParent);
    public EventDeclaration eventDeclaration();
    public TargetDeclaration targetDeclaration();
    public SessionOption sessionOption();
    public EventSessionObjectName eventSessionNonEmptyThreePartObjectName();
    public void eventDeclarationSetParameters(EventDeclaration vParent);
    public void eventDeclarationActionParameters(EventDeclaration vParent);
    public EventDeclarationSetParameter eventDeclarationSetParameter();
    public LiteralSessionOption maxMemorySessionOption();
    public LiteralSessionOption maxEventSizeSessionOption();
    public OnOffSessionOption trackCausalitySessionOption();
    public OnOffSessionOption startupStateSessionOption();
    public EventRetentionSessionOption eventRetentionSessionOption();
    public MemoryPartitionSessionOption memoryPartitionSessionOption();
    public MaxDispatchLatencySessionOption maxDispatchLatencySessionOption();
    public void integerSessionOptionValue(LiteralSessionOption vParent);
    public void onOffSessionOption(OnOffSessionOption vParent);
    public ScalarExpression eventDeclarationValue();
    public Literal integerOrRealOrNumeric();
    public ParenthesisExpression eventSessionExpressionParenthesis();
    public Literal eventSessionLiteral();
    public NumericLiteral numeric();
    public RealLiteral real();
    public BooleanExpression eventBooleanExpressionOr();
    public BooleanExpression eventBooleanExpressionAnd();
    public BooleanExpression eventBooleanExpressionUnary();
    public BooleanParenthesisExpression eventBooleanExpressionParenthesis();
    public BooleanExpression eventDeclarationPredicateParameter();
    public EventSessionObjectName eventSessionOneOrTwoOrThreePartObjectName();
    public void eventDeclarationCompareFunction(EventDeclarationCompareFunctionParameter vParent);
    public void eventDeclarationComparisonPredicate(BooleanComparisonExpression vParent, EventSessionObjectName vSource);
    public BooleanComparisonType comparisonOperator();
    public CreateFullTextCatalogStatement createFulltextCatalogStatement();
    public CreateFullTextIndexStatement createFulltextIndexStatement();
    public CreateFullTextStopListStatement createFulltextStoplistStatement();
    public OnOffFullTextCatalogOption accentSensitivity();
    public FullTextIndexColumn fulltextIndexColumn();
    public IdentifierOrValueExpression languageTerm();
    public FullTextCatalogAndFileGroup fullTextCatalogAndFileGroup();
    public void createFulltextOptions(CreateFullTextIndexStatement vParent);
    public void createFulltextOptionsList(CreateFullTextIndexStatement vParent);
    public FullTextIndexOption fullTextIndexOption();
    public ChangeTrackingFullTextIndexOption changeTrackingFulltextIndexOption();
    public StopListFullTextIndexOption stoplistFulltextIndexOption();
    public SearchPropertyListFullTextIndexOption searchPropertyListFullTextIndexOption();
    public void requiredSemicolon(TSqlFragment vParent, string vStatement);
    public AlterFullTextStopListStatement alterFulltextStoplistStatement();
    public FullTextStopListAction fulltextStoplistAction();
    public FullTextStopListAction addFulltextStoplistAction();
    public FullTextStopListAction dropFulltextStoplistAction();
    public DropFullTextStopListStatement dropFulltextStoplistStatement();
    public AlterSearchPropertyListStatement alterSearchPropertyListStatement();
    public SearchPropertyListAction searchPropertyListAction();
    public AddSearchPropertyListAction addSearchPropertyListAction();
    public DropSearchPropertyListAction dropSearchPropertyListAction();
    public DropSearchPropertyListStatement dropSearchPropertyListStatement();
    public CreateExternalTableStatement createExternalTableStatement();
    public CreateExternalDataSourceStatement createExternalDataSourceStatement();
    public CreateExternalFileFormatStatement createExternalFileFormatStatement();
    public CreateExternalResourcePoolStatement createExternalResourcePoolStatement();
    public CreateExternalStreamStatement createExternalStreamStatement();
    public TSqlStatement alterExternalStatements();
    public AlterExternalDataSourceStatement alterExternalDataSourceStatement();
    public AlterExternalResourcePoolStatement alterExternalResourcePoolStatement();
    public IndexStatement createXmlIndexStatement(bool vPrimary);
    public XmlNamespaces xmlNamespaces();
    public SelectiveXmlIndexPromotedPath promotedSelectiveXmlIndexPath();
    public void indexOptionList(IndexAffectingStatement statementType, IList`1<IndexOption> optionsList, TSqlFragment vParent);
    public CreateXmlSchemaCollectionStatement createXmlSchemaCollectionStatement();
    public SchemaObjectName schemaObjectNonEmptyTwoPartName();
    public CreateXmlIndexStatement secondaryXmlIndexStatementBody(Identifier vName, SchemaObjectName vSchemaObjectName, Identifier vXmlColumn, IToken tRParen, Identifier vSecondaryXmlIndexName);
    public CreateSelectiveXmlIndexStatement secondarySelectiveXmlIndex(Identifier vName, SchemaObjectName vSchemaObjectName, Identifier vXmlColumn, IToken tRParen, Identifier vSecondaryXmlIndexName);
    public IntegerLiteral maxlengthOption(TSqlFragment vParent);
    public bool singletonOption();
    public SelectiveXmlIndexPromotedPath promotedSelectiveXmlIndexPathInAlter();
    public PasswordCreateLoginSource passwordLoginSource();
    public WindowsCreateLoginSource windowsLoginSource();
    public ExternalCreateLoginSource externalLoginSource();
    public CertificateCreateLoginSource certificateLoginSource();
    public AsymmetricKeyCreateLoginSource asymmetricKeyLoginSource();
    public Literal loginPassword();
    public void createLoginPasswordOption(PasswordCreateLoginSource vParent);
    public PrincipalOption createLoginParam();
    public OnOffPrincipalOption onOffPrincipalOption(IToken tOption);
    public IdentifierPrincipalOption createLoginParamWin();
    public PrincipalOption createLoginParamExt();
    public Identifier createLoginParamCertOpt();
    public void messageTypeValidation(MessageTypeStatementBase vParent);
    public LiteralAvailabilityGroupOption availabilityGroupOption();
    public AvailabilityReplica availabilityReplica();
    public AlterAvailabilityGroupStatement alterAvailabilityGroupStatement();
    public void alterAvailabilityGroupAddDatabase(AlterAvailabilityGroupStatement vResult);
    public void alterAvailabilityGroupRemoveDatabase(AlterAvailabilityGroupStatement vResult);
    public void alterAvailabilityGroupAddReplica(AlterAvailabilityGroupStatement vResult);
    public void alterAvailabilityGroupModifyReplica(AlterAvailabilityGroupStatement vResult);
    public void alterAvailabilityGroupRemoveReplica(AlterAvailabilityGroupStatement vResult);
    public void alterAvailabilityGroupSetOption(AlterAvailabilityGroupStatement vResult);
    public void alterAvailabilityGroupTakeAction(AlterAvailabilityGroupStatement vResult);
    public AvailabilityReplica availabilityReplicaName();
    public AlterAvailabilityGroupFailoverAction alterAvailabilityGroupFailoverAction();
    public AlterAvailabilityGroupAction alterAvailabilityGroupAction();
    public AlterAvailabilityGroupFailoverOption alterAvailabilityGroupFailoverOption();
    public AvailabilityReplicaOption availabilityReplicaOption();
    public AvailabilityModeReplicaOption availabilityModeReplicaOption();
    public FailoverModeReplicaOption failoverModeReplicaOption();
    public SecondaryRoleReplicaOption secondaryRoleReplicaOption();
    public PrimaryRoleReplicaOption primaryRoleReplicaOption();
    public LiteralReplicaOption literalReplicaOption();
    public CreatePartitionFunctionStatement createPartitionFunction();
    public CreatePartitionSchemeStatement createPartitionScheme();
    public PartitionParameterType partitionParameterType();
    public void partitionFunctionTypes(CreatePartitionFunctionStatement vParent);
    public void partitionFunctionRange(CreatePartitionFunctionStatement vParent);
    public void partitionOptionTypes(TablePartitionOptionSpecifications vParent);
    public void partitionTableOptionRange(TablePartitionOptionSpecifications vParent);
    public void queueOptionList(QueueStatement vParent, bool vDropAccepted);
    public UserRemoteServiceBindingOption bindingUserOption();
    public OnOffRemoteServiceBindingOption bindingAnonymousOption();
    public void routeOptionList(RouteStatement vParent);
    public void onQueueClause(AlterCreateServiceStatementBase vParent);
    public ServiceContract serviceContract();
    public AlterServiceStatement alterServiceStatement();
    public void addDropServiceContractList(AlterServiceStatement vParent);
    public ServiceContract addDropServiceContract();
    public void keySpecList(CreateSymmetricKeyStatement vParent);
    public void encryptorListWithNoPassword(SymmetricKeyStatement vParent);
    public void providerKeySourceOptionsOpt(IList`1<KeyOption> optionsList, TSqlFragment vParent);
    public KeyOption keySpec(Boolean& keySourceSpecified, Boolean& algorithmSpecified, Boolean& identityValueSpecified);
    public KeySourceKeyOption keySourceKeySpec(Boolean& keySourceSpecified);
    public AlgorithmKeyOption algorithmKeySpec(Boolean& algorithmSpecified);
    public IdentityValueKeyOption identityValueKeySpec(Boolean& identityValueSpecified);
    public ProviderKeyNameKeyOption providerKeyNameSourceOption(Boolean& providerKeyNameSpecified);
    public CreationDispositionKeyOption creationDispositionSourceOption(Boolean& creationDispositionSpecified);
    public CryptoMechanism cryptoWithNoPasswordOrJustPassword();
    public CryptoMechanism certificateCrypto();
    public CryptoMechanism keyCrypto();
    public CryptoMechanism passwordCrypto();
    public KeyOption providerKeySourceOption(Boolean& algorithmSpecified, Boolean& providerKeyNameSpecified, Boolean& creationDispositionSpecified);
    public AlterSymmetricKeyStatement alterSymmetricKeyStatement();
    public CreateTypeUddtStatement createTypeUddtStatement();
    public CreateTypeUdtStatement createTypeUdtStatement();
    public CreateTypeTableStatement createTypeTableStatement();
    public TableDefinition tableDefinition(IndexAffectingStatement statementType, AlterTableAddTableElementStatement vStatement);
    public void withTypeTableOptions(CreateTypeTableStatement vParent);
    public MemoryOptimizedTableOption memoryOptimizedTableOption();
    public UserLoginOption userLoginOption();
    public PrincipalOption createUserOption(bool vHasUserLoginOption);
    public IdentifierPrincipalOption identifierCreateUserOption(IToken tOption, bool vHasUserLoginOption);
    public LiteralPrincipalOption literalCreateUserOption(IToken tOption, bool vHasUserLoginOption);
    public NullLiteral nullLiteral();
    public AlterApplicationRoleStatement alterApplicationRoleStatement();
    public AlterAssemblyStatement alterAssemblyStatement();
    public AlterAsymmetricKeyStatement alterAsymmetricKeyStatement();
    public AlterAuthorizationStatement alterAuthorizationStatement();
    public AlterBrokerPriorityStatement alterBrokerPriorityStatement();
    public AlterCryptographicProviderStatement alterCryptographicProviderStatement();
    public AlterRemoteServiceBindingStatement alterRemoteServiceBindingStatement();
    public TSqlStatement alterResourceStatement();
    public AlterWorkloadGroupStatement alterWorkloadGroupStatement();
    public AlterCertificateStatement alterCertificateStatement();
    public AlterCredentialStatement alterCredentialStatement();
    public AlterEndpointStatement alterEndpointStatement();
    public TSqlStatement alterFulltextStatement();
    public AlterIndexStatement alterIndexStatement();
    public AlterLoginStatement alterLoginStatement();
    public AlterMasterKeyStatement alterMasterKeyStatement();
    public AlterMessageTypeStatement alterMessageTypeStatement();
    public TSqlStatement alterPartitionStatement();
    public AlterQueueStatement alterQueueStatement();
    public AlterRoleStatement alterRoleStatement();
    public AlterRouteStatement alterRouteStatement();
    public AlterSchemaStatement alterSchemaStatement();
    public AlterSequenceStatement alterSequenceStatement();
    public TSqlStatement alterServiceStatements();
    public AlterUserStatement alterUserStatement();
    public AlterXmlSchemaCollectionStatement alterXmlSchemaCollectionStatement();
    public AlterSecurityPolicyStatement alterSecurityPolicyStatement();
    public AlterColumnEncryptionKeyStatement alterColumnEncryptionKeyStatement();
    public ApplicationRoleOption applicationRoleOption(bool defaultSchemaAndPasswordOnly);
    public ScalarExpression alterAssemblyFromClause();
    public void alterAssemblyWith(AlterAssemblyStatement vParent);
    public void alterAssemblyDropFile(AlterAssemblyStatement vParent);
    public void alterAssemblyAddFile(AlterAssemblyStatement vParent);
    public AssemblyOption alterAssemblyWithItem();
    public AssemblyOption assemblyPermissionSetOrVisibilityOption();
    public AssemblyOption assemblyUncheckedDataOption();
    public OnOffAssemblyOption assemblyVisibilityOption(IToken tPermissionSetVisibility);
    public AddFileSpec alterAssemblyAddFileSpec();
    public AlterFullTextCatalogStatement alterFulltextCatalogStatement();
    public AlterFullTextIndexStatement alterFulltextIndexStatement();
    public AlterFullTextIndexAction alterFulltextIndexAction();
    public SimpleAlterFullTextIndexAction enableDisableAlterFulltextIndexAction();
    public AddAlterFullTextIndexAction addAlterFulltextIndexAction();
    public DropAlterFullTextIndexAction dropAlterFulltextIndexAction();
    public SimpleAlterFullTextIndexAction startPopulationAlterFulltextIndexAction();
    public SimpleAlterFullTextIndexAction otherPopulationAlterFulltextIndexAction();
    public AlterFullTextIndexAction setAlterFullTextIndexAction();
    public AlterColumnAlterFullTextIndexAction alterColumnAlterFullTextIndexAction();
    public SetStopListAlterFullTextIndexAction setStoplistAlterFulltextIndexAction();
    public SimpleAlterFullTextIndexAction setChangeTrackingAlterFulltextIndexAction();
    public SetSearchPropertyListAlterFullTextIndexAction setSearchPropertyListAlterFullTextIndexAction();
    public bool populationOption(TSqlFragment vParent);
    public FullTextIndexColumn alterFullTextIndexColumn();
    public PartitionSpecifier partitionSpecifier();
    public AlterLoginEnableDisableStatement alterLoginEnableDisable(Identifier vName);
    public AlterLoginOptionsStatement alterLoginOptions(Identifier vName);
    public AlterLoginAddDropCredentialStatement alterLoginAddDropCredential(Identifier vName);
    public PrincipalOption alterLoginParam();
    public PasswordAlterPrincipalOption passwordAlterLoginOption();
    public AlterPartitionFunctionStatement alterPartitionFunctionStatement();
    public AlterPartitionSchemeStatement alterPartitionSchemeStatement();
    public ExecuteAsClause executeAsClause(bool vCallerProhibited, bool vOwnerProhibited);
    public void queueOption(QueueStatement vParent, bool vDropAccepted);
    public QueueStateOption stateQueueOption();
    public void queueActivationOption(QueueStatement vParent, bool vDropAccepted);
    public QueueStateOption queuePoisonMessageHandlingOption();
    public QueueOption activationQueueOptionArgument(bool vDropAccepted, Boolean& procedureName, Boolean& maxQueueReaders, Boolean& executeAs);
    public QueueStateOption statusQueueOptionArgument(IToken vStartToken);
    public QueueProcedureOption procedureNameQueueOptionArgument(IToken vStartToken);
    public QueueValueOption maxQueueReadersQueueOptionArgument(IToken vStartToken);
    public QueueOption dropQueueOptionArgument(bool vDropAccepted);
    public QueueExecuteAsOption executeAsQueueOptionArgument();
    public AlterRoleAction alterRoleAction();
    public AddMemberAlterRoleAction addMemberAlterRoleAction();
    public DropMemberAlterRoleAction dropMemberAlterRoleAction();
    public RenameAlterRoleAction renameAlterRoleAction();
    public RouteOption routeOption();
    public SchemaObjectName schemaObjectTwoPartName();
    public void alterSequenceOptionList(AlterSequenceStatement vParent);
    public SequenceOption alterSequenceOptionListElement();
    public AlterServiceMasterKeyStatement alterServiceMasterKeyStatement();
    public PrincipalOption alterUserOption();
    public PasswordAlterPrincipalOption passwordAlterUserOption(IToken tOption);
    public IdentifierPrincipalOption identifierAlterUserOption(IToken tOption);
    public LiteralPrincipalOption literalAlterUserOption(IToken tOption);
    public void authorization(IAuthorization vParent);
    public StatementList createSchemaElementList();
    public TSqlStatement createSchemaElement();
    public void functionStatementBody(FunctionStatementBody vResult, Boolean& vParseErrorOccurred);
    public void functionParameterList(FunctionStatementBody vResult);
    public void functionReturnTypeAndBody(FunctionStatementBody vParent, Boolean& vParseErrorOccurred);
    public ProcedureParameter functionParameter();
    public void scalarProcedureParameter(ProcedureParameter vParent, bool outputAllowed, bool nullableAllowed);
    public void functionAttributes(FunctionStatementBody vParent);
    public BeginEndBlockStatement beginEndBlockStatement();
    public MethodSpecifier methodSpecifier();
    public void functionAttributesNoExecuteAs(FunctionStatementBody vParent);
    public DeclareTableVariableBody declareTableBody(IndexAffectingStatement statementType);
    public DeclareTableVariableBody declareTableBodyMain(IndexAffectingStatement statementType);
    public void clrTableValuedFunctionOrderHint(FunctionStatementBody vParent);
    public SelectStatement subqueryExpressionWithOptionalCTE();
    public QueryExpression subqueryExpression(SubDmlFlags subDmlFlags);
    public FunctionOption functionAttribute();
    public FunctionOption functionAttributeNoExecuteAs();
    public InlineFunctionOption inlineFunctionOption();
    public ExecuteAsFunctionOption functionExecuteAsOption();
    public void identifierColumnList(TSqlFragment vParent, IList`1<ColumnReferenceExpression> columns);
    public BooleanExpression filterClause(bool filterProhibited);
    public StatisticsOption createStatisticsStatementWithOption(Boolean& isConflictingOption);
    public LiteralStatisticsOption sampleStatisticsOption(Boolean& isConflictingOption);
    public LiteralStatisticsOption statsStreamStatisticsOption();
    public StatisticsOption simpleStatisticsOption(Boolean& isConflictingOption);
    public StatisticsPartitionRange statisticsPartitionRange();
    public ResampleStatisticsOption resampleStatisticsOption();
    public OnOffStatisticsOption incrementalStatisticsOption();
    public StatisticsOption updateStatisticsStatementWithOption(Boolean& isConflictingOption);
    public LiteralStatisticsOption updateStatisticsLiteralOption();
    public StatisticsOption updateStatisticsSimpleOption(Boolean& isConflictingOption);
    public KillStatement killStatement();
    public KillQueryNotificationSubscriptionStatement killQueryNotificationSubscriptionStatement();
    public KillStatsJobStatement killStatsJobStatement();
    public CompressionPartitionRange compressionPartitionRange();
    public Permission permission();
    public void securityTargetObjectCommon(SecurityTargetObject vParent);
    public SecurityTargetObject authorizationTargetObject();
    public void permissionsList(SecurityStatement vParent, Boolean& vContainsColumnList);
    public void securityStatementTargetObjectOpt(SecurityStatement vParent, bool vColumnsDisallowed);
    public void securityStatementPrincipalList(SecurityStatement vParent);
    public void securityStatementAsClauseOpt(SecurityStatement vParent);
    public WaitForSupportedStatement waitforInnerStatement();
    public ValueExpression binaryOrVariable();
    public ValueExpression integerOrVariable();
    public void modificationTextStatement(TextModificationStatement vParent);
    public ScalarExpression signedIntegerOrVariableOrNull();
    public void modificationTextStatementWithLog(TextModificationStatement vParent);
    public ValueExpression writeString();
    public VariableReference variable();
    public OpenMasterKeyStatement openMasterKeyStatement();
    public OpenSymmetricKeyStatement openSymmetricKeyStatement();
    public OpenCursorStatement openCursorStatement();
    public CryptoMechanism decryptionMechanism();
    public void decryptionMechanismPassword(CryptoMechanism vParent);
    public CursorId cursorId();
    public CloseMasterKeyStatement closeMasterKeyStatement();
    public CloseSymmetricKeyStatement closeSymmetricKeyStatement();
    public CloseCursorStatement closeCursorStatement();
    public FetchCursorStatement rowSelector();
    public FetchType fetchType();
    public AddSignatureStatement addSignatureStatement();
    public TSqlStatement dropDatabaseStatements();
    public DropIndexStatement dropIndexStatement();
    public DropStatisticsStatement dropStatisticsStatement();
    public DropTableStatement dropTableStatement();
    public DropProcedureStatement dropProcedureStatement();
    public DropFunctionStatement dropFunctionStatement();
    public DropViewStatement dropViewStatement();
    public DropDefaultStatement dropDefaultStatement();
    public DropRuleStatement dropRuleStatement();
    public DropTriggerStatement dropTriggerStatement();
    public DropSchemaStatement dropSchemaStatement();
    public DropAggregateStatement dropAggregateStatement();
    public DropAssemblyStatement dropAssemblyStatement();
    public DropAvailabilityGroupStatement dropAvailabilityGroupStatement();
    public TSqlStatement dropPartitionStatements();
    public DropSynonymStatement dropSynonymStatement();
    public DropApplicationRoleStatement dropApplicationRoleStatement();
    public DropBrokerPriorityStatement dropBrokerPriorityStatement();
    public DropCryptographicProviderStatement dropCryptographicProviderStatement();
    public TSqlStatement dropFulltextStatements();
    public DropLoginStatement dropLoginStatement();
    public DropResourcePoolStatement dropResourcePoolStatement();
    public TSqlStatement dropWorkloadStatements();
    public DropRoleStatement dropRoleStatement();
    public DropMasterKeyStatement dropMasterKeyStatement();
    public DropSymmetricKeyStatement dropSymmetricKeyStatement();
    public DropAsymmetricKeyStatement dropAsymmetricKeyStatement();
    public DropCertificateStatement dropCertificateStatement();
    public DropCredentialStatement dropCredentialStatement();
    public DropTypeStatement dropTypeStatement();
    public DropXmlSchemaCollectionStatement dropXmlSchemaCollectionStatement();
    public DropContractStatement dropContractStatement();
    public DropQueueStatement dropQueueStatement();
    public DropServiceStatement dropServiceStatement();
    public DropRouteStatement dropRouteStatement();
    public DropMessageTypeStatement dropMessageTypeStatement();
    public DropRemoteServiceBindingStatement dropRemoteServiceBindingStatement();
    public DropEndpointStatement dropEndpointStatement();
    public DropSignatureStatement dropSignatureStatement();
    public TSqlStatement dropEventStatement();
    public DropSequenceStatement dropSequenceStatement();
    public DropFederationStatement dropFederationStatement();
    public DropSecurityPolicyStatement dropSecurityPolicyStatement();
    public TSqlStatement dropColumnStatements();
    public TSqlStatement dropExternalStatement();
    public TSqlStatement dropServerStatements();
    public DropUserStatement dropUserStatement();
    public DropServerAuditSpecificationStatement dropServerAuditSpecificationStatement();
    public DropServerAuditStatement dropServerAuditStatement();
    public DropServerRoleStatement dropServerRoleStatement();
    public DropDatabaseAuditSpecificationStatement dropDatabaseAuditSpecificationStatement();
    public DropCredentialStatement dropDatabaseScopedCredentialStatement();
    public DropDatabaseEncryptionKeyStatement dropDatabaseEncryptionKeyStatement();
    public DropDatabaseStatement dropDatabaseStatement();
    public DropIndexClauseBase dropIndexClause();
    public BackwardsCompatibleDropIndexClause indexDropObject();
    public DropIndexClause indexDropObjectNewNameFormat();
    public void dropClusteredIndexOptions(DropIndexClause vParent);
    public void dropClusteredIndexOption(DropIndexClause vParent, Int32& encounteredOptions);
    public IndexExpressionOption maxDopOption();
    public OnlineIndexOption onlineIndexOption();
    public MoveToDropIndexOption dropIndexMoveToOption();
    public FileStreamOnDropIndexOption dropIndexFileStreamOnOption();
    public DataCompressionOption dataCompressionOption();
    public WaitAtLowPriorityOption waitAtLowPriorityOption();
    public FileGroupOrPartitionScheme filegroupOrPartitionScheme();
    public void fileStreamOn(IFileStreamSpecifier vParent);
    public ChildObjectName statisticsDropObject();
    public List`1<Identifier> identifierList(int vMaxNumber);
    public void dropObjectList(DropObjectsStatement vParent, bool onlyTwoPartNames);
    public TriggerScope triggerScope(TSqlFragment vParent);
    public DropExternalTableStatement dropExternalTableStatement();
    public SchemaObjectName dropObject(bool onlyTwoPartNames);
    public DropPartitionFunctionStatement dropPartitionFunctionStatement();
    public DropPartitionSchemeStatement dropPartitionSchemeStatement();
    public DropFullTextCatalogStatement dropFulltextCatalogStatement();
    public DropFullTextIndexStatement dropFulltextIndexStatement();
    public bool removeProviderKeyOpt(TSqlFragment vParent);
    public DropEventNotificationStatement dropEventNotificationStatement();
    public DropEventSessionStatement dropEventSessionStatement();
    public void eventSessionDropScope(DropEventSessionStatement vParent);
    public DropExternalDataSourceStatement dropExternalDataSourceStatement();
    public DropExternalFileFormatStatement dropExternalFileFormatStatement();
    public DropExternalResourcePoolStatement dropExternalResourcePoolStatement();
    public DropColumnMasterKeyStatement dropColumnMasterKeyStatement();
    public DropColumnEncryptionKeyStatement dropColumnEncryptionKeyStatement();
    public DropWorkloadGroupStatement dropWorkloadGroupStatement();
    public DropWorkloadClassifierStatement dropWorkloadClassifierStatement();
    public void signatureType(SignatureStatementBase vParent);
    public void signableElement(SignatureStatementBase vParent);
    public void cryptoListWithOptionalPasswordSignature(SignatureStatementBase vParent);
    public CryptoMechanism cryptoWithOptionalPasswordSignature();
    public Literal withSignatureOrPasswordOpt();
    public Identifier nonQuotedIdentifier();
    public BeginTransactionStatement beginTransactionStatement();
    public TryCatchStatement tryCatchStatement();
    public BeginConversationTimerStatement beginConversationTimerStatement();
    public BeginDialogStatement beginDialogStatement();
    public void transactionName(TransactionStatement vParent);
    public Identifier weirdTransactionName();
    public void tranIdentifier(StringBuilder vStringBuilder, TSqlFragment vParent);
    public StatementList tryStatementList(Boolean& vParseErrorOccurred);
    public StatementList catchStatementList(Boolean& vParseErrorOccurred);
    public BeginEndAtomicBlockStatement beginEndAtomicBlock();
    public void atomicBlockOptions(BeginEndAtomicBlockStatement vParent);
    public AtomicBlockOption atomicBlockOption();
    public LiteralAtomicBlockOption dateFirstOption();
    public LiteralAtomicBlockOption dateFormatOption();
    public OnOffAtomicBlockOption delayedDurabilityOption();
    public LiteralAtomicBlockOption languageOption();
    public IdentifierAtomicBlockOption isolationLevelIdentifierAtomicBlockOption();
    public IsolationLevel isolationLevel(TSqlFragment vParent);
    public DeclareVariableElement declareVariableElement();
    public SqlDataTypeReference cursorDataType();
    public DeclareVariableStatement declareVariableStatement();
    public DeclareCursorStatement declareCursorStatement();
    public PredicateSetStatement predicateSetStatement();
    public SetVariableStatement setVariableStatement();
    public SetStatisticsStatement setStatisticsStatement();
    public SetRowCountStatement setRowcountStatement();
    public SetOffsetsStatement setOffsetsStatement();
    public SetCommandStatement setCommandStatement();
    public SetTransactionIsolationLevelStatement setTransactionIsolationLevelStatement();
    public SetTextSizeStatement setTextSizeStatement();
    public SetIdentityInsertStatement setIdentityInsertStatement();
    public SetErrorLevelStatement setErrorLevelStatement();
    public void parenthesizedOptExpressionWithDefaultList(TSqlFragment vParent, IList`1<ScalarExpression> expressions);
    public AssignmentKind assignmentWithOptOp();
    public CursorDefinition cursorDefinition();
    public void setOnOff(SetOnOffStatement vParent);
    public SetOffsets offsetItem();
    public SetCommand setCommand();
    public SetFipsFlaggerCommand fipsFlaggerLevel();
    public void tableElement(IndexAffectingStatement statementType, TableDefinition vParent, AlterTableAddTableElementStatement vStatement);
    public void cursorOpts(bool oldSyntax, IList`1<CursorOption> vOptions);
    public CursorDefinition cursorDefinitionOptions(IList`1<CursorOption> vOptions);
    public CursorOption cursorOption();
    public CreateIndexStatement createRelationalIndexStatement(IToken tUnique, Nullable`1<bool> isClustered);
    public void indexKeyColumnList(CreateIndexStatement vParent);
    public void indexLegacyOptionList(CreateIndexStatement vParent);
    public void fileStreamOnOpt(IFileStreamSpecifier vParent);
    public void columnstoreIndexKeyColumnList(CreateColumnStoreIndexStatement vParent);
    public ColumnWithSortOrder indexKeyColumn();
    public void graphPseudoColumn(ColumnReferenceExpression vResult);
    public SortOrder orderByOption(TSqlFragment vParent);
    public ColumnReferenceExpression columnstoreIndexKeyColumn();
    public ColumnReferenceExpression identifierColumnReferenceExpression();
    public void systemColumn(ColumnReferenceExpression vParent);
    public BooleanExpression filterExpression();
    public BooleanExpression filterExpressionPrimary();
    public ColumnReferenceExpression filterColumn();
    public BooleanIsNullExpression filterNullPredicate(ScalarExpression vColumn);
    public BooleanComparisonExpression filterComparisonPredicate(ScalarExpression vColumn);
    public InPredicate filterInPredicate(ScalarExpression vColumn);
    public BooleanParenthesisExpression filterParenthesisExpression();
    public void specialColumn(ColumnReferenceExpression vParent);
    public BooleanIsNullExpression nullPredicate(ScalarExpression vExpressionFirst);
    public IndexOption indexLegacyOption();
    public IndexExpressionOption fillFactorOption();
    public IndexOption indexOption();
    public void alterTableAlterIndexOptionList(IndexAffectingStatement statement, IList`1<IndexOption> optionsList, TSqlFragment vParent);
    public void lowPriorityLockWaitOption(IList`1<LowPriorityLockWaitOption> optionsList, TSqlFragment vParent);
    public IgnoreDupKeyIndexOption ignoreDupKeyIndexOption();
    public Nullable`1<bool> suppressMessagesOption();
    public void truncateTargetOption(TruncateTargetTableSwitchOption tOption);
    public IndexStateOption indexStateOption();
    public IndexExpressionOption bucketCountOption();
    public OrderIndexOption orderIndexOption();
    public CompressionDelayIndexOption compressionDelayOption();
    public MaxDurationOption maxDurationOption();
    public void ctContext(WithCtesAndXmlNamespaces vParent);
    public CommonTableExpression commonTableExpression();
    public XmlNamespacesElement xmlNamespacesElement();
    public XmlNamespacesDefaultElement xmlNamespacesDefaultElement();
    public XmlNamespacesAliasElement xmlNamespacesAliasElement();
    public QueryExpression queryExpression(SubDmlFlags subDmlFlags, SelectStatement vSelectStatement);
    public OrderByClause orderByClause();
    public OffsetClause offsetClause();
    public ForClause forClause();
    public TableReferenceWithAliasAndColumns derivedTable(SubDmlFlags subDmlFlags);
    public QueryDerivedTable queryDerivedTable(SubDmlFlags subDmlFlags);
    public InlineDerivedTable inlinedDerivedTable();
    public void forPathClause(TableReferenceWithAlias vResult);
    public void simpleTableReferenceAlias(TableReferenceWithAlias vParent);
    public RowValue rowValueExpression();
    public ScalarSubquery subquery(SubDmlFlags subDmlFlags, ExpressionFlags expressionFlags);
    public QueryExpression subqueryExpressionUnit(SubDmlFlags subDmlFlags);
    public QuerySpecification subquerySpecification(SubDmlFlags subDmlFlags);
    public QueryParenthesisExpression subqueryParenthesis(SubDmlFlags subDmlFlags);
    public QueryExpression queryExpressionUnit(SubDmlFlags subDmlFlags, SelectStatement vSelectStatement);
    public QuerySpecification querySpecification(SubDmlFlags subDmlFlags, SelectStatement vSelectStatement);
    public QueryParenthesisExpression queryParenthesis(SubDmlFlags subDmlFlags, SelectStatement vSelectStatement);
    public void uniqueRowFilterOpt(QuerySpecification vParent);
    public TopRowFilter topRowFilter();
    public SelectElement selectColumnOrStarExpression();
    public FromClause fromClauseOpt(SubDmlFlags subDmlFlags);
    public WhereClause whereClause();
    public GroupByClause groupByClause();
    public HavingClause havingClause();
    public BrowseForClause browseForClause();
    public XmlForClause xmlForClause();
    public JsonForClause jsonForClause();
    public void selectExpression(QuerySpecification vParent);
    public UniqueRowFilter uniqueRowFilter(IToken& token);
    public PrimaryExpression parenthesisDisambiguatorForExpressions(ExpressionFlags expressionFlags);
    public TopRowFilter dmlTopRowFilter();
    public void dmlTopRowFilterOpt(DataModificationSpecification vParent);
    public SelectSetVariable selectSetVariable();
    public SelectStarExpression selectStarExpression();
    public SelectScalarExpression selectColumn();
    public SelectElement outputClauseSelectElement();
    public SelectScalarExpression outputClauseSelectColumn();
    public ScalarExpression selectColumnExpression();
    public IdentityFunctionCall identityFunction();
    public ScalarExpression seedIncrement();
    public TableSampleClause tableSampleClause();
    public FromClause fromClause(SubDmlFlags subDmlFlags);
    public TableReference selectTableReferenceWithOdbc(SubDmlFlags subDmlFlags);
    public void graphPathClause(WithinGroupClause vResult);
    public TemporalClause temporalClause();
    public ValueExpression stringLiteralOrVariable();
    public TableReference selectTableReference(SubDmlFlags subDmlFlags);
    public OdbcQualifiedJoinTableReference odbcQualifiedJoin(SubDmlFlags subDmlFlags);
    public TableReference selectTableReferenceElement(SubDmlFlags subDmlFlags);
    public void selectTableReferenceAdditionalElement(SubDmlFlags subDmlFlags, TableReference& vResult);
    public void odbcInitiator();
    public OdbcConvertSpecification odbcConvertSpecification();
    public ExtractFromExpression extractFromExpression();
    public OdbcFunctionCall odbcFunctionCall();
    public TableReference joinTableReference(SubDmlFlags subDmlFlags);
    public JoinParenthesisTableReference joinParenthesis(SubDmlFlags subDmlFlags);
    public void joinElement(SubDmlFlags subDmlFlags, TableReference& vResult);
    public TableReference selectTableReferenceElementWithoutJoinParenthesis(SubDmlFlags subDmlFlags);
    public void pivotedTableReference(TableReference& vResult);
    public void unpivotedTableReference(TableReference& vResult);
    public ColumnReferenceExpression fixedColumn();
    public void columnListWithParenthesis(TSqlFragment vParent, IList`1<ColumnReferenceExpression> columns);
    public void unqualifiedJoin(SubDmlFlags subDmlFlags, TableReference& vResult);
    public void qualifiedJoin(SubDmlFlags subDmlFlags, TableReference& vResult);
    public TableReferenceWithAliasAndColumns changeTableTableReference();
    public BuiltInFunctionTableReference builtInFunctionTableReference();
    public GlobalFunctionTableReference globalFunctionTableReference();
    public VariableTableReference variableTableReference();
    public VariableMethodCallTableReference variableMethodCallTableReference();
    public TableReferenceWithAlias openRowset();
    public FullTextTableReference fulltextTableReference();
    public SemanticTableReference semanticTableReference();
    public OpenXmlTableReference openXmlTableReference();
    public OpenJsonTableReference openJsonTableReference();
    public DataModificationTableReference subDmlTableReference(SubDmlFlags subDmlFlags);
    public PredictTableReference predictTableReference(SubDmlFlags subDmlFlags);
    public TableReference schemaObjectOrFunctionTableReference();
    public PredictTableReference predictParams(SubDmlFlags subDmlFlags, ExpressionFlags expressionFlags);
    public void predictWithClauseOpt(PredictTableReference vParent);
    public void simpleTableReferenceAliasOpt(TableReferenceWithAlias vParent);
    public TableReferenceWithAlias mergeTarget(bool indexHintAllowed);
    public void predictSchemaItemList(PredictTableReference vParent);
    public SchemaDeclarationItem predictSchemaItem();
    public ColumnDefinitionBase columnDefinitionBasic();
    public TableReferenceWithAlias dmlTarget(bool indexHintAllowed);
    public ChangeTableChangesTableReference changesChangeTableParams(SchemaObjectName vTarget);
    public ChangeTableVersionTableReference versionChangeTableParams(SchemaObjectName vTarget);
    public DataModificationSpecification innerDmlStatement();
    public InsertSpecification insertSpecification(SubDmlFlags subDmlFlags);
    public UpdateSpecification updateSpecification(SubDmlFlags subDmlFlags);
    public DeleteSpecification deleteSpecification(SubDmlFlags subDmlFlags);
    public MergeSpecification mergeSpecification(SubDmlFlags subDmlFlags);
    public void joinHint(QualifiedJoin vParent);
    public ScalarExpression expressionWithDefault();
    public ScalarExpression signedIntegerOrStringOrVariable();
    public ScalarExpression possibleNegativeConstant();
    public void outputIntoOutputClause(DataModificationSpecification vParent);
    public OutputIntoClause outputIntoClause(IToken tOutput, IList`1<SelectElement> vSelectElements);
    public OutputClause outputClause();
    public VariableTableReference variableDmlTarget();
    public NamedTableReference intoSchemaObjectTable();
    public void outputClauseOpt(SubDmlFlags subDmlFlags, DataModificationSpecification vParent);
    public WhereClause dmlWhereClause(SubDmlFlags subDmlFlags);
    public ColumnReferenceExpression insertColumn();
    public ValuesInsertSource valuesInsertSource();
    public ExecuteInsertSource executeInsertSource();
    public SelectInsertSource selectInsertSource(SubDmlFlags subDmlFlags);
    public void setClausesList(TSqlFragment vParent, IList`1<SetClause> setClauses);
    public SetClause setClause();
    public AssignmentSetClause setClauseStartingWithVariable();
    public AssignmentSetClause setClauseColumnAssignment(MultiPartIdentifier vMultiPartIdentifier);
    public FunctionCallSetClause setClauseFunctionCall(MultiPartIdentifier vMultiPartIdentifier);
    public AssignmentSetClause setClauseSubItemSystemColumn();
    public AssignmentKind assignmentWithOp();
    public ExecuteSpecification executeSpecification();
    public void defaultValuesInsertSource(ValuesInsertSource vParent);
    public RowValue rowValueExpressionWithDefault();
    public void expressionWithDefaultList(TSqlFragment vParent, IList`1<ScalarExpression> expressions);
    public TableReferenceWithAlias schemaObjectDmlTarget(bool indexHintAllowed);
    public void mergeInsertDmlColumnListOpt(InsertMergeAction vParent);
    public ColumnReferenceExpression mergeInsertDmlColumn();
    public ScalarExpression possibleNegativeConstantWithDefault();
    public SchemaObjectFunctionTableReference schemaObjectFunctionDmlTarget();
    public NamedTableReference schemaObjectTableDmlTarget(bool indexHintAllowed);
    public void tableHints(TSqlFragment vParent, IList`1<TableHint> hints, bool tableHintAllowed);
    public NamedTableReference schemaObjectTableReference(SchemaObjectName vSchemaObjectName);
    public SchemaObjectFunctionTableReference schemaObjectFunctionTableReference(SchemaObjectName vSchemaObjectName);
    public void singleOldStyleTableHint(TSqlFragment vParent, IList`1<TableHint> hints);
    public void nonParameterTableHints(TSqlFragment vParent, IList`1<TableHint> hints);
    public IndexTableHint oldForceIndex();
    public void fullTextTable(FullTextTableReference vParent);
    public void fulltextTableColumnList(FullTextTableReference vParent);
    public void fulltextTableOptions(FullTextTableReference vParent);
    public void fulltextSemanticTableColumnList(TSqlFragment vParent, IList`1<ColumnReferenceExpression> vColumns);
    public ColumnReferenceExpression starColumnReferenceExpression();
    public ValueExpression languageExpression();
    public ValueExpression binaryOrIntegerOrStringOrVariable();
    public void semanticKeyPhraseTableReference(SemanticTableReference vParent);
    public void semanticSimilarityTableReference(SemanticTableReference vParent);
    public void semanticSimilarityDetailsTableReference(SemanticTableReference vParent);
    public OpenXmlTableReference openXmlParams();
    public void openXmlWithClauseOpt(OpenXmlTableReference vParent);
    public void openXmlSchemaItemList(OpenXmlTableReference vParent);
    public SchemaDeclarationItem openXmlSchemaItem();
    public OpenJsonTableReference openJsonParams();
    public void openJsonWithClauseOpt(OpenJsonTableReference vParent);
    public void openJsonSchemaItemList(OpenJsonTableReference vParent);
    public SchemaDeclarationItemOpenjson openJsonSchemaItem();
    public TableReferenceWithAlias openRowsetRowset();
    public OpenQueryTableReference openQueryRowset();
    public AdHocTableReference adhocRowset();
    public OpenRowsetTableReference openRowsetParams();
    public InternalOpenRowset internalOpenRowsetArgs();
    public BulkOpenRowset openRowsetBulk();
    public BulkInsertOption openRowsetBulkHint();
    public BulkInsertOption openRowsetBulkHintNoValue();
    public AdHocDataSource adhocDataSource();
    public SchemaObjectNameOrValueExpression objectOrString();
    public void simpleTableHints(TSqlFragment vParent, IList`1<TableHint> hints);
    public void tableHintsBody(TSqlFragment vParent, IList`1<TableHint> hints, bool tableHintAllowed);
    public TableHint tableHint(bool indexHintAllowed);
    public ForceSeekTableHint forceSeekTableHint(bool indexHintAllowed);
    public TableHint simpleTableHint();
    public IndexTableHint indexTableHint(bool indexHintAllowed);
    public LiteralTableHint literalTableHint();
    public IdentifierOrValueExpression identifierOrInteger();
    public BooleanExpression booleanExpressionWithFlags(ExpressionFlags expressionFlags);
    public WhereClause whereCurrentOfCursorClause(SubDmlFlags subDmlFlags);
    public GroupingSpecification groupByItem(bool isAll, Boolean& encounteredCubeRollupGroupingSets, Boolean& alreadyEncounteredDistributedAggHint);
    public CubeGroupingSpecification cubeSpec(bool isAll);
    public RollupGroupingSpecification rollupSpec(bool isAll);
    public GroupingSetsGroupingSpecification groupingSetsSpec(bool isAll);
    public GrandTotalGroupingSpecification grandTotal();
    public ExpressionGroupingSpecification simpleGroupByItem(Boolean& alreadyEncounteredDistributedAggHint);
    public GroupingSpecification groupingSet();
    public CompositeGroupingSpecification composingGroupingSet();
    public GroupingSpecification groupingSetItem();
    public void cubeOrRollupArgumentList(TSqlFragment vParent, IList`1<GroupingSpecification> specs);
    public GroupingSpecification cubeOrRollupArgument();
    public CompositeGroupingSpecification compositeGroupByItem();
    public ExpressionWithSortOrder expressionWithSortOrder();
    public UpdateForClause updateForClause();
    public XmlForClauseOption xmlForClauseMode();
    public XmlForClauseOption xmlParam(XmlForClauseOptions encountered);
    public JsonForClauseOption jsonForClauseMode();
    public JsonForClauseOption jsonParam(JsonForClauseOptions encountered);
    public OptimizerHint hint();
    public LiteralOptimizerHint literalOptimizerHint();
    public OptimizerHint simpleOptimizerHint();
    public LiteralOptimizerHint usePlanOptimizerHint();
    public OptimizeForOptimizerHint optimizeForOptimizerHint();
    public TableHintsOptimizerHint tableHintsOptimizerHint();
    public UseHintList useHintClause();
    public VariableValuePair variableValuePair();
    public Literal cryptographicProviderFile();
    public AlterResourcePoolStatement alterResourcePoolStatement();
    public AlterResourceGovernorStatement alterResourceGovernorStatement();
    public void resourcePoolStatementBody(ResourcePoolStatement vParent);
    public ResourcePoolParameter resourcePoolParameter();
    public ResourcePoolAffinitySpecification resourcePoolAffinitySpecification();
    public LiteralRange poolAffinityRange();
    public void externalResourcePoolStatementBody(ExternalResourcePoolStatement vParent);
    public ExternalResourcePoolParameter externalResourcePoolParameter();
    public ExternalResourcePoolAffinitySpecification externalResourcePoolAffinitySpecification();
    public LiteralRange externalPoolAffinityRange();
    public CreateWorkloadGroupStatement createWorkloadGroupStatement();
    public CreateWorkloadClassifierStatement createWorkloadClassifierStatement();
    public void workloadGroupStatementBody(WorkloadGroupStatement vParent);
    public WorkloadGroupParameter workloadGroupParameter();
    public void workloadGroupUsingOption(WorkloadGroupStatement vParent);
    public void workloadClassifierStatementBody(CreateWorkloadClassifierStatement vParent);
    public void withClassifierOptions(CreateWorkloadClassifierStatement vParent);
    public WorkloadClassifierOption workloadClassifierOption();
    public ClassifierWorkloadGroupOption classifierWorkloadGroupOption();
    public ClassifierMemberNameOption classifierMemberNameOption();
    public ClassifierWlmLabelOption classifierWlmLabelOption();
    public ClassifierWlmContextOption classifierWlmContextOption();
    public ClassifierImportanceOption classifierImportanceOption();
    public ClassifierStartTimeOption classifierStartTimeOption();
    public ClassifierEndTimeOption classifierEndTimeOption();
    public WlmTimeLiteral wlmTimeLiteral();
    public void brokerPriorityStatementBody(BrokerPriorityStatement vParent);
    public BrokerPriorityParameter brokerPriorityParameter(int encountered);
    public void createSequenceOptionList(CreateSequenceStatement vParent);
    public SequenceOption createSequenceOptionListElement();
    public ScalarExpressionSequenceOption sequenceRestartOptionListElement();
    public SequenceOption commonSequenceOptionListElement();
    public DataTypeSequenceOption sequenceDatatypeOptionListElement();
    public ScalarExpressionSequenceOption sequenceStartOptionListElement();
    public ScalarExpressionSequenceOption sequenceCacheOptionListElement();
    public SequenceOption sequenceCycleOptionListElement();
    public ScalarExpressionSequenceOption sequenceIncrementOptionListElement();
    public SequenceOption sequenceNoOptionListElement();
    public ScalarExpressionSequenceOption sequenceMinMaxOptionListElement();
    public CreateColumnMasterKeyStatement createColumnMasterKeyStatement();
    public CreateColumnEncryptionKeyStatement createColumnEncryptionKeyStatement();
    public ColumnMasterKeyParameter columnMasterkeyParameter();
    public ColumnMasterKeyStoreProviderNameParameter columnMasterKeyStoreProviderNameParameter();
    public ColumnMasterKeyPathParameter columnMasterKeyPathParameter();
    public ColumnMasterKeyEnclaveComputationsParameter columnMasterKeyEnclaveComputationsParameter();
    public ColumnEncryptionKeyValue createColumnEncryptionKeyValue();
    public ColumnEncryptionKeyValueParameter columnEncryptionKeyValueParameter();
    public ColumnMasterKeyNameParameter columnMasterKeyNameParameter();
    public ColumnEncryptionAlgorithmNameParameter columnEncryptionAlgorithmNameParameter();
    public EncryptedValueParameter encryptedValueParameter();
    public void alterColumnEncryptionKeyAddStatement(AlterColumnEncryptionKeyStatement vResult);
    public void alterColumnEncryptionKeyDropStatement(AlterColumnEncryptionKeyStatement vResult);
    public void createSecurityPredicateListElement(CreateSecurityPolicyStatement vParent);
    public void securityPolicyOptionsList(SecurityPolicyStatement vParent);
    public SecurityPredicateAction createOrAltersecurityPredicateListElement();
    public void alterSecurityPredicateListElement(AlterSecurityPolicyStatement vParent);
    public SecurityPredicateAction dropSecurityPredicateListElement();
    public SecurityPolicyOption securityPolicyOptionListElement(SecurityPolicyStatement vParent);
    public FunctionCall userFunctionCall(MultiPartIdentifier vIdentifiers);
    public void securityPredicateOperation(SecurityPredicateAction vResult);
    public void externalDataSourceType(CreateExternalDataSourceStatement vParent);
    public void externalDataSourceLocation(ExternalDataSourceStatement vParent);
    public void externalDataSourcePushdownOption(ExternalDataSourceStatement vParent);
    public ExternalDataSourceLiteralOrIdentifierOption externalDataSourceLiteralOrIdentifierOption();
    public void externalStreamLocation(ExternalStreamStatement vParent);
    public void externalStreamInputOptions(ExternalStreamStatement vParent);
    public void externalStreamOutputOptions(ExternalStreamStatement vParent);
    public ExternalStreamLiteralOrIdentifierOption externalStreamLiteralOrIdentifierOption();
    public void externalFileFormatOptions(CreateExternalFileFormatStatement vResult);
    public void externalFormatingOption(TSqlFragment vParent, IList`1<ExternalFileFormatOption> vOptions);
    public void externalFileFormatLiteralOptions(TSqlFragment vParent, IList`1<ExternalFileFormatOption> vOptions);
    public ExternalFileFormatLiteralOption externalFileFormatLiteralOption();
    public ExternalFileFormatContainerOption externalFormatingContainerOption();
    public ExternalFileFormatOption externalDataFormatOption();
    public ExternalFileFormatUseDefaultTypeOption externalDataFormatUseTypeDefaultOption();
    public ExternalFileFormatLiteralOption externalDataFormatLiteralOption();
    public void spatialIndexingScheme(CreateSpatialIndexStatement vParent);
    public void spatialIndexOptionsList(CreateSpatialIndexStatement vParent);
    public SpatialIndexOption spatialIndexOption(SpatialIndexingSchemeType indexingScheme, Boolean& isRegularIndexOption);
    public BoundingBoxSpatialIndexOption boundingBoxSpatialIndexOption(bool isRegularIndexOption, SpatialIndexingSchemeType indexingScheme);
    public GridsSpatialIndexOption gridsSpatialIndexOption(bool isRegularIndexOption);
    public CellsPerObjectSpatialIndexOption cellsPerObjectSpatialIndexOption(bool isRegularIndexOption);
    public SpatialIndexRegularOption spatialIndexRegularOption(IndexAffectingStatement statement);
    public void boundingBoxParameter(BoundingBoxSpatialIndexOption vParent);
    public void boundingBoxParameterListByname(BoundingBoxSpatialIndexOption vParent);
    public void boundingBoxParameterListByord(BoundingBoxSpatialIndexOption vParent);
    public BoundingBoxParameter boundingBoxParameterByName(int encountered);
    public ScalarExpression signedIntegerOrReal();
    public BoundingBoxParameter boundingBoxParameterByOrd();
    public void gridParameter(GridsSpatialIndexOption vParent);
    public void gridParameterListByName(GridsSpatialIndexOption vParent);
    public void gridParameterListByOrd(GridsSpatialIndexOption vParent);
    public GridParameter gridParameterByName();
    public GridParameter gridParameterByOrd();
    public void viewStatementBody(ViewStatementBody vResult);
    public ViewOption viewOption();
    public ViewOption createMaterializedViewOption();
    public ViewDistributionOption viewDistributionOption();
    public ViewForAppendOption viewForAppendOption();
    public ViewDistributionPolicy viewDistributionPolicy();
    public ViewRoundRobinDistributionPolicy viewRoundRobinDistributionPolicy();
    public ViewHashDistributionPolicy viewHashDistributionPolicy();
    public TriggerOption triggerOption(bool vOwnerProhibited);
    public void procedureOptions(ProcedureStatementBody vParent);
    public ProcedureOption procedureOption();
    public void procedureStatementBody(ProcedureStatementBody vResult, Boolean& vParseErrorOccurred);
    public ProcedureReference procedureReference();
    public void procedureParameterList(ProcedureStatementBodyBase vResult);
    public ProcedureParameter procedureParameter();
    public void cursorProcedureParameter(ProcedureParameter vParent);
    public IdentifierLiteral identifierLiteral();
    public ValueExpression literal();
    public UnaryExpression negativeConstant();
    public Literal subroutineParameterLiteral();
    public void triggerStatementBody(TriggerStatementBody vResult, Boolean& vParseErrorOccurred);
    public void ddlTriggerMidSection(TriggerStatementBody vParent);
    public void dmlTriggerMidSection(TriggerStatementBody vParent);
    public TriggerAction dmlTriggerAction();
    public TriggerAction ddlTriggerAction();
    public void endConversationArgumentsOpt(EndConversationStatement vParent);
    public SelectElement receiveSelectExpression();
    public SelectScalarExpression receiveColumnSelectExpression();
    public DialogOption beginConversationArgument(Int32& encounteredOptions);
    public ScalarExpressionDialogOption scalarExpressionBeginDialogConversationArgument(IToken tOption, Int32& encounteredOptions);
    public OnOffDialogOption onOffBeginDialogConversationArgument(IToken tOption, Int32& encounteredOptions);
    public MergeStatement mergeStatementWithoutSemicolon(SubDmlFlags subDmlFlags);
    public MergeActionClause mergeActionClause();
    public MergeCondition mergeCondition();
    public MergeAction mergeAction(MergeCondition condition);
    public UpdateMergeAction updateMergeAction(MergeCondition condition);
    public InsertMergeAction insertMergeAction(MergeCondition condition);
    public DeleteMergeAction deleteMergeAction(MergeCondition condition);
    public ValuesInsertSource mergeInsertSource();
    public void execStart(TSqlFragment vParent);
    public ExecuteContext executeAsStatementContext();
    public void executeContextStatementOptionsOpt(ExecuteAsStatement vParent);
    public ExecuteOption executeOption();
    public ExecuteOption executeOptionRecompile();
    public ResultSetsExecuteOption executeOptionResultSets();
    public ResultSetDefinition resultSetDefinition();
    public InlineResultSetDefinition inlineResultSetDefinition();
    public ResultSetDefinition asForXmlResultSetDefinition();
    public SchemaObjectResultSetDefinition asSchemaObjectResultSetDefinition();
    public ResultColumnDefinition resultColumnDefinition();
    public void execTypes(ExecuteSpecification vParent);
    public ExecutableEntity execStrTypes();
    public ExecuteContext execStrExecCtxt();
    public Identifier linkedServer();
    public ExecutableProcedureReference execProcEx();
    public ExecuteContext execCtxtStmt();
    public void execCtxtStmtType(ExecuteContext vParent);
    public Literal execCtxtStmtPrincipal();
    public ExecutableStringList execSqlList();
    public void setParamList(ExecutableEntity vParent);
    public ExecutableProcedureReference adhocDataSourceExecproc();
    public ProcedureReferenceName procObjectReference();
    public ProcedureReferenceName varObjectReference();
    public Literal procNumOpt();
    public ValueExpression stringOrGlobalVariableOrVariable();
    public ExecuteParameter setParam(Boolean& nameEqualsValueWasUsed, Int32& parameterNumber);
    public TableDefinition tableDefinitionCreateTable();
    public void graphAsNodeOrEdge(CreateTableStatement vParent);
    public FederationScheme federatedOn(CreateTableStatement vParent);
    public void largeDataOnOpt(CreateTableStatement vParent);
    public void largeDataOn(CreateTableStatement vParent);
    public TableOption createTableOption();
    public TableDataCompressionOption tableDataCompressionOption();
    public FileTableDirectoryTableOption fileTableDirectoryTableOption();
    public FileTableCollateFileNameTableOption fileTableCollateFileNameTableOption();
    public FileTableConstraintNameTableOption fileTableConstraintNameTableOption();
    public DurabilityTableOption durabilityTableOption();
    public RemoteDataArchiveTableOption remoteDataArchiveTableOption();
    public SystemVersioningTableOption systemVersioningTableOnOffOption();
    public LedgerTableOption ledgerTableOption();
    public TableDistributionOption tableDistributionOption();
    public TableIndexOption tableIndexOption();
    public TablePartitionOption tablePartitionOption();
    public LocationOption locationOption();
    public DataRetentionTableOption dataRetentionOption();
    public void dataRetentionSubOption(DataRetentionTableOption vResult);
    public void remoteDataArchiveTableSettings(TSqlFragment vParent, MigrationState& vMigrationState, Boolean& vIsMigrationStateSpecified, Boolean& vIsFilterPredicateSpecified, FunctionCall& vFilterPredicate);
    public TableDistributionPolicy tableDistributionPolicy();
    public TableReplicateDistributionPolicy tableReplicateDistributionPolicy();
    public TableRoundRobinDistributionPolicy tableRoundRobinDistributionPolicy();
    public TableHashDistributionPolicy tableHashDistributionPolicy();
    public TableIndexType tableIndexType();
    public TableNonClusteredIndexType tableNonClusteredIndexType();
    public TableClusteredIndexType tableClusteredIndexType();
    public void systemVersioningTableSuboption(SystemVersioningTableOption vParent, Boolean& historyTableSpecified, Boolean& dataConsistencyCheckSpecified, Boolean& retentionPeriodSpecified);
    public void ledgerTableSuboption(LedgerTableOption vParent, Boolean& ledgerViewSpecified, Boolean& appendOnlySpecified, Boolean& transactionIdSpecified, Boolean& sequenceNumberSpecified, Boolean& operationTypeSpecified, Boolean& operationTypeIdDescSpecified);
    public void ledgerViewSuboption(LedgerTableOption vParent, Boolean& transactionIdSpecified, Boolean& sequenceNumberSpecified, Boolean& operationTypeSpecified, Boolean& operationTypeIdDescSpecified);
    public void externalTableColumnElement(CreateExternalTableStatement vResult);
    public ExternalTableColumnDefinition columnDefinitionCreateExternalTable();
    public void externalTableDataSource(CreateExternalTableStatement vParent);
    public ExternalTableOption createExternalTableOption();
    public ExternalTableRejectTypeOption externalTableRejectTypeOption();
    public ExternalTableDistributionOption externalTableDistributionOption();
    public ExternalTableLiteralOrIdentifierOption externalTableNumericLiteralOption();
    public ExternalTableLiteralOrIdentifierOption externalTableLiteralOrIdentifierOption();
    public ExternalTableDistributionPolicy externalTableDistributionPolicy();
    public ExternalTableReplicatedDistributionPolicy externalTableReplicatedDistributionPolicy();
    public ExternalTableRoundRobinDistributionPolicy externalTableRoundRobinDistributionPolicy();
    public ExternalTableShardedDistributionPolicy externalTableShardedDistributionPolicy();
    public AlterTableAlterColumnStatement alterTableAlterColumnStatement();
    public AlterTableAlterIndexStatement alterTableAlterIndexStatement();
    public AlterTableTriggerModificationStatement alterTableTriggerModificationStatement();
    public AlterTableDropTableElementStatement alterTableDropTableElementStatement();
    public AlterTableSwitchStatement alterTableSwitchStatement();
    public ConstraintEnforcement constraintEnforcement();
    public AlterTableAddTableElementStatement alterTableAddTableElementStatement(ConstraintEnforcement vExistingRowsCheck);
    public AlterTableConstraintModificationStatement alterTableConstraintModificationStatement(ConstraintEnforcement vExistingRowsCheck);
    public AlterTableRebuildStatement alterTableRebuildStatement();
    public AlterTableAlterPartitionStatement alterTableAlterPartitionStatement();
    public AlterTableChangeTrackingModificationStatement alterTableChangeTrackingModificationStatement();
    public AlterTableFileTableNamespaceStatement alterTableFileTableNamespaceStatement();
    public AlterTableSetStatement alterTableSetStatement();
    public TableOption tableOption();
    public LockEscalationTableOption lockEscalationTableOption();
    public FileStreamOnTableOption fileStreamOnTableOption();
    public RemoteDataArchiveAlterTableOption remoteDataArchiveAlterTableOption();
    public RdaTableOption remoteDtatArchiveTableOnOffOption(TSqlFragment vParent);
    public void generatedAlwaysClauseInAlter(AlterTableAlterColumnStatement vResult);
    public void maskedClause(IDataMaskingSetter vResult);
    public ColumnEncryptionDefinition columnEncryptionClause();
    public ColumnStorageOptions columnStorage(IndexAffectingStatement statementType, DataTypeReference columnType);
    public AlterTableDropTableElement alterTableDropTableElement();
    public void alterTableDropTableElementWithOptions(AlterTableDropTableElement vParent);
    public DropClusteredConstraintOption dropClusteredConstraintOption();
    public void tableSwitchOptionList(IList`1<TableSwitchOption> optionList, TSqlFragment vParent);
    public IndexType inlineIndexType();
    public IndexDefinition inlineIndexTableDefinition();
    public SystemTimePeriodDefinition tablePeriodDefinition();
    public IndexDefinition inlineIndexColumnDefinition();
    public ConstraintDefinition tableConstraint(IndexAffectingStatement statementType, AlterTableAddTableElementStatement vStatement);
    public ColumnDefinition columnDefinition(IndexAffectingStatement statementType, AlterTableAddTableElementStatement vStatement);
    public void computedColumnBody(ColumnDefinition vParent);
    public void computedColumnConstraintListOpt(IndexAffectingStatement statementType, ColumnDefinition vResult);
    public void regularColumnBody(IndexAffectingStatement statementType, ColumnDefinition vParent);
    public void columnConstraintListOpt(IndexAffectingStatement statementType, ColumnDefinition vResult);
    public ScalarExpression expressionWithFlags(ExpressionFlags expressionFlags);
    public void generatedAlwaysClause(ColumnDefinition vResult);
    public ColumnStorageOptions sparseAndFilestreamStorage(IndexAffectingStatement statementType, DataTypeReference columnType);
    public ColumnStorageOptions sparseStorage(IndexAffectingStatement statementType, DataTypeReference columnType);
    public ColumnStorageOptions allSparseStorage(IndexAffectingStatement statementType, DataTypeReference columnType);
    public ColumnStorageOptions filestreamStorage(IndexAffectingStatement statementType, DataTypeReference columnType);
    public ConstraintDefinition columnConstraint(IndexAffectingStatement statementType);
    public void rowguidcolConstraint(ColumnDefinition vParent);
    public IdentityOptions identityConstraint(IndexAffectingStatement statementType);
    public ColumnEncryptionDefinitionParameter columnEncryptionDefinitionParameter();
    public ColumnEncryptionKeyNameParameter columnEncryptionKeyNameParameter();
    public ColumnEncryptionTypeParameter columnEncryptionTypeParameter();
    public ColumnEncryptionAlgorithmParameter columnEncryptionAlgorithmParameter();
    public bool replicationClauseOpt(IndexAffectingStatement statementType, TSqlFragment vParent);
    public DefaultConstraintDefinition defaultColumnConstraint(IndexAffectingStatement statementType);
    public UniqueConstraintDefinition uniqueColumnConstraint(IndexAffectingStatement statementType);
    public ForeignKeyConstraintDefinition foreignKeyColumnConstraint(IndexAffectingStatement statementType);
    public CheckConstraintDefinition checkConstraint(IndexAffectingStatement statementType);
    public UniqueConstraintDefinition uniqueTableConstraint(IndexAffectingStatement statementType);
    public DefaultConstraintDefinition defaultTableConstraint(IndexAffectingStatement statementType);
    public ForeignKeyConstraintDefinition foreignKeyTableConstraint(IndexAffectingStatement statementType);
    public GraphConnectionConstraintDefinition graphConnectionConstraint(IndexAffectingStatement statementType);
    public void uniqueConstraintHeader(UniqueConstraintDefinition vParent, bool throwInPhaseOne);
    public void uniqueConstraintEnforcement(UniqueConstraintDefinition vParent);
    public void uniqueConstraintTailOpt(IndexAffectingStatement statementType, UniqueConstraintDefinition vParent);
    public void uniqueConstraintIndexOptionsOpt(IndexAffectingStatement statement, UniqueConstraintDefinition vParent);
    public void sortedDataOptions();
    public DeleteUpdateAction deleteUpdateAction(TSqlFragment vParent);
    public void foreignKeyConstraintCommonEnd(IndexAffectingStatement statementType, ForeignKeyConstraintDefinition vParent);
    public void foreignConstraintColumnsOpt(ForeignKeyConstraintDefinition vParent);
    public void graphConnectionFromNodeToNodeList(IndexAffectingStatement statementType, TSqlFragment vParent, IList`1<GraphConnectionBetweenNodes> FromNodeToNodeList);
    public GraphConnectionBetweenNodes graphConnectionFromToNodeItem(IndexAffectingStatement statementType);
    public XmlDataTypeReference xmlDataType(SchemaObjectName vName);
    public SchemaObjectName dataTypeSchemaObjectName();
    public SqlDataTypeReference sqlDataTypeWithoutNational(SchemaObjectName vName, SqlDataTypeOption vType);
    public UserDataTypeReference userDataType(SchemaObjectName vName);
    public SqlDataTypeReference doubleDataType();
    public SqlDataTypeReference sqlDataTypeWithNational();
    public void dataTypeParametersOpt(ParameterizedDataTypeReference vParent);
    public MaxLiteral max();
    public void identifierListElement(List`1<Identifier> vParent, int vMaxNumber, bool first);
    public MultiPartIdentifier nonEmptyThreePartObjectName();
    public MultiPartIdentifier oneOrTwoOrThreePartObjectName();
    public BooleanExpression booleanExpressionOr(ExpressionFlags expressionFlags);
    public BooleanExpression booleanExpressionAnd(ExpressionFlags expressionFlags);
    public BooleanExpression booleanExpressionUnary(ExpressionFlags expressionFlags);
    public BooleanExpression booleanExpressionPrimary(ExpressionFlags expressionFlags);
    public BooleanParenthesisExpression booleanExpressionParenthesis(ExpressionFlags expressionFlags);
    public BooleanExpression graphMatchPattern();
    public BooleanComparisonExpression comparisonPredicate(ScalarExpression vExpressionFirst, BooleanComparisonType vType, ExpressionFlags expressionFlags);
    public SubqueryComparisonPredicate subqueryComparisonPredicate(ScalarExpression vExpressionFirst, BooleanComparisonType vType, ExpressionFlags expressionFlags);
    public InPredicate inPredicate(ScalarExpression vExpressionFirst, bool vNotDefined, ExpressionFlags expressionFlags);
    public BooleanTernaryExpression betweenPredicate(ScalarExpression vExpressionFirst, bool vNotDefined, ExpressionFlags expressionFlags);
    public LikePredicate likePredicate(ScalarExpression vExpressionFirst, bool vNotDefined, ExpressionFlags expressionFlags);
    public FullTextPredicate fulltextPredicate();
    public ExistsPredicate existsPredicate(ExpressionFlags expressionFlags);
    public TSEqualCall tsEqualCall();
    public UpdateCall updateCall();
    public void graphMatchExpressionPattern(BooleanExpression& vResult);
    public void graphMatchRecursivePattern(BooleanExpression& vResult);
    public void graphMatchLastNodePattern(BooleanExpression& vResult);
    public void graphCompositeMatchPattern(BooleanExpression& vResult);
    public GraphMatchNodeExpression graphMatchNodeExpression(bool vCanUseLastNode);
    public void graphMatchSPRightRecursivePattern(TSqlFragment vParent, IList`1<BooleanExpression> vResult);
    public GraphRecursiveMatchQuantifier graphRecursiveMatchQuantifier();
    public void graphMatchSPLeftRecursivePattern(TSqlFragment vParent, IList`1<BooleanExpression> vResult);
    public GraphMatchCompositeExpression graphSingleMatchPattern(GraphMatchNodeExpression vLeftNode, bool vCanUseLastNode);
    public GraphMatchCompositeExpression graphSingleLeftMatchPattern(bool vCanUseLastNode);
    public ColumnReferenceExpression fulltextColumn();
    public ColumnReferenceExpression starColumn();
    public SubqueryComparisonPredicateType subqueryComparisonPredicateType();
    public void escapeExpression(LikePredicate vParent, ExpressionFlags expressionFlags);
    public ScalarExpression expressionBinaryPri2(ExpressionFlags expressionFlags);
    public ScalarExpression expressionBinaryPri1(ExpressionFlags expressionFlags);
    public ScalarExpression expressionUnary(ExpressionFlags expressionFlags);
    public PrimaryExpression expressionWithClrElements(ExpressionFlags expressionFlags);
    public PrimaryExpression udtExpression();
    public PrimaryExpression expressionPrimary(ExpressionFlags expressionFlags);
    public FunctionCall expressionWithClrElementsFunctionCallPart();
    public CastCall castCall();
    public TryCastCall tryCastCall();
    public ParseCall parseCall();
    public TryParseCall tryParseCall();
    public IIfCall iIfCall();
    public FunctionCall builtInFunctionCall();
    public LeftFunctionCall leftFunctionCall();
    public RightFunctionCall rightFunctionCall();
    public PartitionFunctionCall partitionFunctionCall();
    public NextValueForExpression nextValueForCall();
    public PrimaryExpression columnOrFunctionCall();
    public NullIfExpression nullIfExpression(ExpressionFlags expressionFlags);
    public CoalesceExpression coalesceExpression(ExpressionFlags expressionFlags);
    public CaseExpression caseExpression(ExpressionFlags expressionFlags);
    public ConvertCall convertCall();
    public TryConvertCall tryConvertCall();
    public ParameterlessCall parameterlessCall();
    public ParenthesisExpression expressionParenthesis(ExpressionFlags expressionFlags);
    public UserDefinedTypeCallTarget userDefinedTypeCallTarget();
    public FunctionCall udtFunctionExpression(UserDefinedTypeCallTarget vCallTarget);
    public UserDefinedTypePropertyAccess udtPropertyExpression(UserDefinedTypeCallTarget vCallTarget);
    public FunctionCall basicFunctionCall();
    public OverClause overClause();
    public OverClause overClauseBeginning();
    public WindowFrameClause windowFrameClause();
    public OverClause overClauseNoOrderBy();
    public void windowFrameExtent(WindowFrameClause vParent);
    public WindowDelimiter windowFrameDelimiter();
    public WithinGroupClause withinGroupClause();
    public void trimBuiltInFunctionCall(FunctionCall vParent);
    public void regularBuiltInFunctionCall(FunctionCall vParent);
    public void aggregateBuiltInFunctionCall(FunctionCall vParent);
    public void withinGroupOrOverClause(FunctionCall vParent);
    public void reservedBuiltInFunctionCallParameters(TSqlFragment vParent, IList`1<ScalarExpression> parameters);
    public SimpleWhenClause simpleWhenClause(ExpressionFlags expressionFlags);
    public SearchedWhenClause searchedWhenClause(ExpressionFlags expressionFlags);
    public SimpleCaseExpression simpleCaseExpression(ScalarExpression inputExpression, ExpressionFlags expressionFlags);
    public SearchedCaseExpression searchedCaseExpression(ExpressionFlags expressionFlags);
    public ValueExpression globalVariableOrVariableReference();
    public SchemaObjectNameOrValueExpression objectOrVariable();
    public MoneyLiteral moneyLiteral();
    public OdbcLiteral odbcLiteral();
    private void initializeFactory();
    private static Int64[] mk_tokenSet_0_();
    private static Int64[] mk_tokenSet_1_();
    private static Int64[] mk_tokenSet_2_();
    private static Int64[] mk_tokenSet_3_();
    private static Int64[] mk_tokenSet_4_();
    private static Int64[] mk_tokenSet_5_();
    private static Int64[] mk_tokenSet_6_();
    private static Int64[] mk_tokenSet_7_();
    private static Int64[] mk_tokenSet_8_();
    private static Int64[] mk_tokenSet_9_();
    private static Int64[] mk_tokenSet_10_();
    private static Int64[] mk_tokenSet_11_();
    private static Int64[] mk_tokenSet_12_();
    private static Int64[] mk_tokenSet_13_();
    private static Int64[] mk_tokenSet_14_();
    private static Int64[] mk_tokenSet_15_();
    private static Int64[] mk_tokenSet_16_();
    private static Int64[] mk_tokenSet_17_();
    private static Int64[] mk_tokenSet_18_();
    private static Int64[] mk_tokenSet_19_();
    private static Int64[] mk_tokenSet_20_();
    private static Int64[] mk_tokenSet_21_();
    private static Int64[] mk_tokenSet_22_();
    private static Int64[] mk_tokenSet_23_();
    private static Int64[] mk_tokenSet_24_();
    private static Int64[] mk_tokenSet_25_();
    private static Int64[] mk_tokenSet_26_();
    private static Int64[] mk_tokenSet_27_();
    private static Int64[] mk_tokenSet_28_();
    private static Int64[] mk_tokenSet_29_();
    private static Int64[] mk_tokenSet_30_();
    private static Int64[] mk_tokenSet_31_();
    private static Int64[] mk_tokenSet_32_();
    private static Int64[] mk_tokenSet_33_();
    private static Int64[] mk_tokenSet_34_();
    private static Int64[] mk_tokenSet_35_();
    private static Int64[] mk_tokenSet_36_();
    private static Int64[] mk_tokenSet_37_();
    private static Int64[] mk_tokenSet_38_();
    private static Int64[] mk_tokenSet_39_();
    private static Int64[] mk_tokenSet_40_();
    private static Int64[] mk_tokenSet_41_();
    private static Int64[] mk_tokenSet_42_();
    private static Int64[] mk_tokenSet_43_();
    private static Int64[] mk_tokenSet_44_();
    private static Int64[] mk_tokenSet_45_();
    private static Int64[] mk_tokenSet_46_();
    private static Int64[] mk_tokenSet_47_();
    private static Int64[] mk_tokenSet_48_();
    private static Int64[] mk_tokenSet_49_();
    private static Int64[] mk_tokenSet_50_();
    private static Int64[] mk_tokenSet_51_();
    private static Int64[] mk_tokenSet_52_();
    private static Int64[] mk_tokenSet_53_();
    private static Int64[] mk_tokenSet_54_();
    private static Int64[] mk_tokenSet_55_();
    private static Int64[] mk_tokenSet_56_();
    private static Int64[] mk_tokenSet_57_();
    private static Int64[] mk_tokenSet_58_();
    private static Int64[] mk_tokenSet_59_();
    private static Int64[] mk_tokenSet_60_();
    private static Int64[] mk_tokenSet_61_();
    private static Int64[] mk_tokenSet_62_();
    private static Int64[] mk_tokenSet_63_();
    private static Int64[] mk_tokenSet_64_();
    private static Int64[] mk_tokenSet_65_();
    private static Int64[] mk_tokenSet_66_();
    private static Int64[] mk_tokenSet_67_();
    private static Int64[] mk_tokenSet_68_();
    private static Int64[] mk_tokenSet_69_();
    private static Int64[] mk_tokenSet_70_();
    private static Int64[] mk_tokenSet_71_();
    private static Int64[] mk_tokenSet_72_();
    private static Int64[] mk_tokenSet_73_();
    private static Int64[] mk_tokenSet_74_();
    private static Int64[] mk_tokenSet_75_();
    private static Int64[] mk_tokenSet_76_();
    private static Int64[] mk_tokenSet_77_();
    private static Int64[] mk_tokenSet_78_();
    private static Int64[] mk_tokenSet_79_();
    private static Int64[] mk_tokenSet_80_();
    private static Int64[] mk_tokenSet_81_();
    private static Int64[] mk_tokenSet_82_();
    private static Int64[] mk_tokenSet_83_();
    private static Int64[] mk_tokenSet_84_();
    private static Int64[] mk_tokenSet_85_();
    private static Int64[] mk_tokenSet_86_();
    private static Int64[] mk_tokenSet_87_();
    private static Int64[] mk_tokenSet_88_();
    private static Int64[] mk_tokenSet_89_();
    private static Int64[] mk_tokenSet_90_();
    private static Int64[] mk_tokenSet_91_();
    private static Int64[] mk_tokenSet_92_();
    private static Int64[] mk_tokenSet_93_();
    private static Int64[] mk_tokenSet_94_();
    private static Int64[] mk_tokenSet_95_();
    private static Int64[] mk_tokenSet_96_();
    private static Int64[] mk_tokenSet_97_();
    private static Int64[] mk_tokenSet_98_();
    private static Int64[] mk_tokenSet_99_();
    private static Int64[] mk_tokenSet_100_();
    private static Int64[] mk_tokenSet_101_();
    private static Int64[] mk_tokenSet_102_();
    private static Int64[] mk_tokenSet_103_();
    private static Int64[] mk_tokenSet_104_();
    private static Int64[] mk_tokenSet_105_();
    private static Int64[] mk_tokenSet_106_();
    private static Int64[] mk_tokenSet_107_();
    private static Int64[] mk_tokenSet_108_();
    private static Int64[] mk_tokenSet_109_();
    private static Int64[] mk_tokenSet_110_();
    private static Int64[] mk_tokenSet_111_();
    private static Int64[] mk_tokenSet_112_();
    private static Int64[] mk_tokenSet_113_();
    private static Int64[] mk_tokenSet_114_();
    private static Int64[] mk_tokenSet_115_();
    private static Int64[] mk_tokenSet_116_();
    private static Int64[] mk_tokenSet_117_();
    private static Int64[] mk_tokenSet_118_();
    private static Int64[] mk_tokenSet_119_();
    private static Int64[] mk_tokenSet_120_();
    private static Int64[] mk_tokenSet_121_();
    private static Int64[] mk_tokenSet_122_();
    private static Int64[] mk_tokenSet_123_();
    private static Int64[] mk_tokenSet_124_();
    private static Int64[] mk_tokenSet_125_();
    private static Int64[] mk_tokenSet_126_();
    private static Int64[] mk_tokenSet_127_();
    private static Int64[] mk_tokenSet_128_();
    private static Int64[] mk_tokenSet_129_();
    private static Int64[] mk_tokenSet_130_();
    private static Int64[] mk_tokenSet_131_();
    private static Int64[] mk_tokenSet_132_();
    private static Int64[] mk_tokenSet_133_();
    private static Int64[] mk_tokenSet_134_();
    private static Int64[] mk_tokenSet_135_();
    private static Int64[] mk_tokenSet_136_();
    private static Int64[] mk_tokenSet_137_();
    private static Int64[] mk_tokenSet_138_();
    private static Int64[] mk_tokenSet_139_();
    private static Int64[] mk_tokenSet_140_();
    private static Int64[] mk_tokenSet_141_();
    private static Int64[] mk_tokenSet_142_();
    private static Int64[] mk_tokenSet_143_();
    private static Int64[] mk_tokenSet_144_();
    private static Int64[] mk_tokenSet_145_();
    private static Int64[] mk_tokenSet_146_();
    private static Int64[] mk_tokenSet_147_();
    private static Int64[] mk_tokenSet_148_();
    private static Int64[] mk_tokenSet_149_();
    private static Int64[] mk_tokenSet_150_();
    private static Int64[] mk_tokenSet_151_();
    private static Int64[] mk_tokenSet_152_();
    private static Int64[] mk_tokenSet_153_();
    private static Int64[] mk_tokenSet_154_();
    private static Int64[] mk_tokenSet_155_();
    private static Int64[] mk_tokenSet_156_();
    private static Int64[] mk_tokenSet_157_();
    private static Int64[] mk_tokenSet_158_();
    private static Int64[] mk_tokenSet_159_();
    private static Int64[] mk_tokenSet_160_();
    private static Int64[] mk_tokenSet_161_();
    private static Int64[] mk_tokenSet_162_();
    private static Int64[] mk_tokenSet_163_();
    private static Int64[] mk_tokenSet_164_();
    private static Int64[] mk_tokenSet_165_();
    private static Int64[] mk_tokenSet_166_();
    private static Int64[] mk_tokenSet_167_();
    private static Int64[] mk_tokenSet_168_();
    private static Int64[] mk_tokenSet_169_();
    private static Int64[] mk_tokenSet_170_();
    private static Int64[] mk_tokenSet_171_();
    private static Int64[] mk_tokenSet_172_();
    private static Int64[] mk_tokenSet_173_();
    private static Int64[] mk_tokenSet_174_();
    private static Int64[] mk_tokenSet_175_();
    private static Int64[] mk_tokenSet_176_();
    private static Int64[] mk_tokenSet_177_();
    private static Int64[] mk_tokenSet_178_();
    private static Int64[] mk_tokenSet_179_();
    private static Int64[] mk_tokenSet_180_();
    private static Int64[] mk_tokenSet_181_();
    private static Int64[] mk_tokenSet_182_();
    private static Int64[] mk_tokenSet_183_();
    private static Int64[] mk_tokenSet_184_();
    private static Int64[] mk_tokenSet_185_();
    private static Int64[] mk_tokenSet_186_();
    private static Int64[] mk_tokenSet_187_();
    private static Int64[] mk_tokenSet_188_();
    private static Int64[] mk_tokenSet_189_();
    private static Int64[] mk_tokenSet_190_();
    private static Int64[] mk_tokenSet_191_();
    private static Int64[] mk_tokenSet_192_();
    private static Int64[] mk_tokenSet_193_();
    private static Int64[] mk_tokenSet_194_();
    private static Int64[] mk_tokenSet_195_();
    private static Int64[] mk_tokenSet_196_();
    private static Int64[] mk_tokenSet_197_();
    private static Int64[] mk_tokenSet_198_();
    private static Int64[] mk_tokenSet_199_();
    private static Int64[] mk_tokenSet_200_();
    private static Int64[] mk_tokenSet_201_();
    private static Int64[] mk_tokenSet_202_();
    private static Int64[] mk_tokenSet_203_();
    private static Int64[] mk_tokenSet_204_();
    private static Int64[] mk_tokenSet_205_();
    private static Int64[] mk_tokenSet_206_();
    private static Int64[] mk_tokenSet_207_();
    private static Int64[] mk_tokenSet_208_();
    private static Int64[] mk_tokenSet_209_();
}
internal class Microsoft.SqlServer.TransactSql.ScriptDom.TSql80LexerInternal : TSqlLexerBaseInternal {
    public static int EOF;
    public static int NULL_TREE_LOOKAHEAD;
    public static int Add;
    public static int All;
    public static int Alter;
    public static int And;
    public static int Any;
    public static int As;
    public static int Asc;
    public static int Authorization;
    public static int Backup;
    public static int Begin;
    public static int Between;
    public static int Break;
    public static int Browse;
    public static int Bulk;
    public static int By;
    public static int Cascade;
    public static int Case;
    public static int Check;
    public static int Checkpoint;
    public static int Close;
    public static int Clustered;
    public static int Coalesce;
    public static int Collate;
    public static int Column;
    public static int Commit;
    public static int Compute;
    public static int Constraint;
    public static int Contains;
    public static int ContainsTable;
    public static int Continue;
    public static int Convert;
    public static int Create;
    public static int Cross;
    public static int Current;
    public static int CurrentDate;
    public static int CurrentTime;
    public static int CurrentTimestamp;
    public static int CurrentUser;
    public static int Cursor;
    public static int Database;
    public static int Dbcc;
    public static int Deallocate;
    public static int Declare;
    public static int Default;
    public static int Delete;
    public static int Deny;
    public static int Desc;
    public static int Distinct;
    public static int Distributed;
    public static int Double;
    public static int Drop;
    public static int Else;
    public static int End;
    public static int Errlvl;
    public static int Escape;
    public static int Except;
    public static int Exec;
    public static int Execute;
    public static int Exists;
    public static int Exit;
    public static int Fetch;
    public static int File;
    public static int FillFactor;
    public static int For;
    public static int Foreign;
    public static int FreeText;
    public static int FreeTextTable;
    public static int From;
    public static int Full;
    public static int Function;
    public static int GoTo;
    public static int Grant;
    public static int Group;
    public static int Having;
    public static int HoldLock;
    public static int Identity;
    public static int IdentityInsert;
    public static int IdentityColumn;
    public static int If;
    public static int In;
    public static int Index;
    public static int Inner;
    public static int Insert;
    public static int Intersect;
    public static int Into;
    public static int Is;
    public static int Join;
    public static int Key;
    public static int Kill;
    public static int Left;
    public static int Like;
    public static int LineNo;
    public static int National;
    public static int NoCheck;
    public static int NonClustered;
    public static int Not;
    public static int Null;
    public static int NullIf;
    public static int Of;
    public static int Off;
    public static int Offsets;
    public static int On;
    public static int Open;
    public static int OpenDataSource;
    public static int OpenQuery;
    public static int OpenRowSet;
    public static int OpenXml;
    public static int Option;
    public static int Or;
    public static int Order;
    public static int Outer;
    public static int Over;
    public static int Percent;
    public static int Plan;
    public static int Primary;
    public static int Print;
    public static int Proc;
    public static int Procedure;
    public static int Public;
    public static int Raiserror;
    public static int Read;
    public static int ReadText;
    public static int Reconfigure;
    public static int References;
    public static int Replication;
    public static int Restore;
    public static int Restrict;
    public static int Return;
    public static int Revoke;
    public static int Right;
    public static int Rollback;
    public static int RowCount;
    public static int RowGuidColumn;
    public static int Rule;
    public static int Save;
    public static int Schema;
    public static int Select;
    public static int SessionUser;
    public static int Set;
    public static int SetUser;
    public static int Shutdown;
    public static int Some;
    public static int Statistics;
    public static int SystemUser;
    public static int Table;
    public static int TextSize;
    public static int Then;
    public static int To;
    public static int Top;
    public static int Tran;
    public static int Transaction;
    public static int Trigger;
    public static int Truncate;
    public static int TSEqual;
    public static int Union;
    public static int Unique;
    public static int Update;
    public static int UpdateText;
    public static int Use;
    public static int User;
    public static int Values;
    public static int Varying;
    public static int View;
    public static int WaitFor;
    public static int When;
    public static int Where;
    public static int While;
    public static int With;
    public static int WriteText;
    public static int Disk;
    public static int Precision;
    public static int External;
    public static int Revert;
    public static int Pivot;
    public static int Unpivot;
    public static int TableSample;
    public static int Dump;
    public static int Load;
    public static int Merge;
    public static int StopList;
    public static int SemanticKeyPhraseTable;
    public static int SemanticSimilarityTable;
    public static int SemanticSimilarityDetailsTable;
    public static int TryConvert;
    public static int Bang;
    public static int PercentSign;
    public static int Ampersand;
    public static int LeftParenthesis;
    public static int RightParenthesis;
    public static int LeftCurly;
    public static int RightCurly;
    public static int Star;
    public static int MultiplyEquals;
    public static int Plus;
    public static int Comma;
    public static int Minus;
    public static int Dot;
    public static int Divide;
    public static int Colon;
    public static int DoubleColon;
    public static int Semicolon;
    public static int LessThan;
    public static int EqualsSign;
    public static int RightOuterJoin;
    public static int GreaterThan;
    public static int Circumflex;
    public static int VerticalLine;
    public static int Tilde;
    public static int AddEquals;
    public static int SubtractEquals;
    public static int DivideEquals;
    public static int ModEquals;
    public static int BitwiseAndEquals;
    public static int BitwiseOrEquals;
    public static int BitwiseXorEquals;
    public static int Go;
    public static int Label;
    public static int Integer;
    public static int Numeric;
    public static int Real;
    public static int HexLiteral;
    public static int Money;
    public static int SqlCommandIdentifier;
    public static int PseudoColumn;
    public static int DollarPartition;
    public static int AsciiStringOrQuotedIdentifier;
    public static int AsciiStringLiteral;
    public static int UnicodeStringLiteral;
    public static int Identifier;
    public static int QuotedIdentifier;
    public static int Variable;
    public static int OdbcInitiator;
    public static int ProcNameSemicolon;
    public static int SingleLineComment;
    public static int MultilineComment;
    public static int WhiteSpace;
    public static int Digit;
    public static int FirstLetter;
    public static int Letter;
    public static int MoneySign;
    public static int WS_CHAR_WO_NEWLINE;
    public static int Number;
    public static int Exponent;
    public static int EndOfLine;
    public static BitSet tokenSet_0_;
    public static BitSet tokenSet_1_;
    public static BitSet tokenSet_2_;
    public static BitSet tokenSet_3_;
    public static BitSet tokenSet_4_;
    public static BitSet tokenSet_5_;
    public static BitSet tokenSet_6_;
    public static BitSet tokenSet_7_;
    public static BitSet tokenSet_8_;
    public static BitSet tokenSet_9_;
    public static BitSet tokenSet_10_;
    public static BitSet tokenSet_11_;
    public static BitSet tokenSet_12_;
    public TSql80LexerInternal(Stream ins);
    public TSql80LexerInternal(TextReader r);
    public TSql80LexerInternal(InputBuffer ib);
    public TSql80LexerInternal(LexerSharedInputState state);
    private static TSql80LexerInternal();
    public virtual int testLiteralsTable(int ttype);
    private void initialize();
    public virtual IToken nextToken();
    public void mBang(bool _createToken);
    public void mPercentSign(bool _createToken);
    public void mAmpersand(bool _createToken);
    public void mLeftParenthesis(bool _createToken);
    public void mRightParenthesis(bool _createToken);
    public void mLeftCurly(bool _createToken);
    public void mRightCurly(bool _createToken);
    public void mStar(bool _createToken);
    public void mMultiplyEquals(bool _createToken);
    public void mPlus(bool _createToken);
    public void mComma(bool _createToken);
    public void mMinus(bool _createToken);
    protected void mDot(bool _createToken);
    public void mDivide(bool _createToken);
    public void mColon(bool _createToken);
    public void mDoubleColon(bool _createToken);
    public void mLessThan(bool _createToken);
    public void mEqualsSign(bool _createToken);
    public void mRightOuterJoin(bool _createToken);
    public void mGreaterThan(bool _createToken);
    public void mCircumflex(bool _createToken);
    public void mVerticalLine(bool _createToken);
    public void mTilde(bool _createToken);
    protected void mSemicolon(bool _createToken);
    protected void mDigit(bool _createToken);
    protected void mFirstLetter(bool _createToken);
    protected void mLetter(bool _createToken);
    protected void mMoneySign(bool _createToken);
    public void mProcNameSemicolon(bool _createToken);
    protected void mWS_CHAR_WO_NEWLINE(bool _createToken);
    public void mNumber(bool _createToken);
    public void mWhiteSpace(bool _createToken);
    protected void mEndOfLine(bool _createToken);
    public void mGo(bool _createToken);
    protected void mLabel(bool _createToken);
    protected void mInteger(bool _createToken);
    protected void mNumeric(bool _createToken);
    protected void mReal(bool _createToken);
    protected void mHexLiteral(bool _createToken);
    protected void mExponent(bool _createToken);
    protected void mMoney(bool _createToken);
    protected void mSqlCommandIdentifier(bool _createToken);
    protected void mPseudoColumn(bool _createToken);
    protected void mDollarPartition(bool _createToken);
    protected void mAsciiStringOrQuotedIdentifier(bool _createToken);
    public void mAsciiStringLiteral(bool _createToken);
    public void mUnicodeStringLiteral(bool _createToken);
    public void mIdentifier(bool _createToken);
    public void mQuotedIdentifier(bool _createToken);
    public void mVariable(bool _createToken);
    protected void mOdbcInitiator(bool _createToken);
    public void mSingleLineComment(bool _createToken);
    public void mMultilineComment(bool _createToken);
    private static Int64[] mk_tokenSet_0_();
    private static Int64[] mk_tokenSet_1_();
    private static Int64[] mk_tokenSet_2_();
    private static Int64[] mk_tokenSet_3_();
    private static Int64[] mk_tokenSet_4_();
    private static Int64[] mk_tokenSet_5_();
    private static Int64[] mk_tokenSet_6_();
    private static Int64[] mk_tokenSet_7_();
    private static Int64[] mk_tokenSet_8_();
    private static Int64[] mk_tokenSet_9_();
    private static Int64[] mk_tokenSet_10_();
    private static Int64[] mk_tokenSet_11_();
    private static Int64[] mk_tokenSet_12_();
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.TSql80Parser : TSqlParser {
    public TSql80Parser(bool initialQuotedIdentifiers);
    internal virtual TSqlLexerBaseInternal GetNewInternalLexer();
    private TSql80ParserInternal GetNewInternalParser();
    private TSql80ParserInternal GetNewInternalParserForInput(TextReader input, IList`1& errors, int startOffset, int startLine, int startColumn);
    public virtual TSqlFragment Parse(IList`1<TSqlParserToken> tokens, IList`1& errors);
    public virtual ChildObjectName ParseChildObjectName(TextReader input, IList`1& errors, int startOffset, int startLine, int startColumn);
    public virtual SchemaObjectName ParseSchemaObjectName(TextReader input, IList`1& errors, int startOffset, int startLine, int startColumn);
    public virtual DataTypeReference ParseScalarDataType(TextReader input, IList`1& errors, int startOffset, int startLine, int startColumn);
    public virtual ScalarExpression ParseExpression(TextReader input, IList`1& errors, int startOffset, int startLine, int startColumn);
    public virtual BooleanExpression ParseBooleanExpression(TextReader input, IList`1& errors, int startOffset, int startLine, int startColumn);
    public virtual StatementList ParseStatementList(TextReader input, IList`1& errors, int startOffset, int startLine, int startColumn);
    public virtual SelectStatement ParseSubQueryExpressionWithOptionalCTE(TextReader input, IList`1& errors, int startOffset, int startLine, int startColumn);
    public virtual TSqlFragment ParseConstantOrIdentifier(TextReader input, IList`1& errors, int startOffset, int startLine, int startColumn);
    public virtual TSqlFragment ParseConstantOrIdentifierWithDefault(TextReader input, IList`1& errors, int startOffset, int startLine, int startColumn);
    internal virtual TSqlStatement PhaseOneParse(TextReader input);
}
internal abstract class Microsoft.SqlServer.TransactSql.ScriptDom.TSql80ParserBaseInternal : LLkParser {
    private static int LookAhead;
    private TSqlFragmentFactory _fragmentFactory;
    private IList`1<ParseError> _parseErrors;
    private bool _phaseOne;
    protected TSqlWhitespaceTokenFilter _tokenSource;
    private bool _initialQuotedIdentifiersOn;
    private int _phaseOnePreviousStatementLevelErrorLine;
    private int _phaseOnePreviousStatementLevelErrorColumn;
    private static BitSet _statementLevelRecoveryTokens;
    private static BitSet _phaseOneBatchLevelRecoveryTokens;
    private static BitSet _ddlStatementBeginnerTokens;
    private static HashSet`1<SqlDataTypeOption> _possibleSingleParameterDataTypes;
    private static Dictionary`2<IndexAffectingStatement, string> _indexOptionContainerStatementNames;
    private static List`1<IndexAffectingStatement> StatementsWithBucketCount;
    public TSqlFragmentFactory FragmentFactory { get; }
    public bool PhaseOne { get; public set; }
    protected TSql80ParserBaseInternal(TokenBuffer tokenBuf, int k);
    protected TSql80ParserBaseInternal(ParserSharedInputState state, int k);
    protected TSql80ParserBaseInternal(TokenStream lexer, int k);
    public TSql80ParserBaseInternal(bool initialQuotedIdentifiersOn);
    private static TSql80ParserBaseInternal();
    public void InitializeForNewInput(IList`1<TSqlParserToken> tokens, IList`1<ParseError> errors, bool phaseOne);
    protected void ResetQuotedIdentifiersSettingToInitial();
    internal static void UpdateTokenInfo(TSqlFragment fragment, IToken token);
    protected static void AddAndUpdateTokenInfo(TSqlFragment node, IList`1<TFragmentType> collection, TFragmentType item);
    protected static void AddAndUpdateTokenInfo(TSqlFragment node, IList`1<TFragmentType> collection, IList`1<TFragmentType> otherCollection);
    protected static string DecodeAsciiStringLiteral(string encodedValue);
    protected static string DecodeUnicodeStringLiteral(string encodedValue);
    protected static bool IsAsciiStringLob(string asciiValue);
    protected static bool IsUnicodeStringLob(string unicodeValue);
    protected static bool IsBinaryLiteralLob(string binaryValue);
    public TSqlFragmentFactory get_FragmentFactory();
    public bool get_PhaseOne();
    public void set_PhaseOne(bool value);
    protected void AddParseError(ParseError parseError);
    protected void RecoverAtStatementLevel(int statementStartLine, int statementStartColumn);
    protected void SkipInitialDdlTokens();
    protected void RecoverAtBatchLevel();
    protected void ThrowPartialAstIfPhaseOne(TSqlStatement statement);
    protected void ThrowConstraintIfPhaseOne(ConstraintDefinition constraint);
    protected bool NextTokenMatches(string keyword);
    protected bool NextTokenMatches(string keyword, int which);
    protected bool NextTokenMatchesOneOf(String[] keywords);
    protected void ThrowIfEndOfFileOrBatch();
    protected void AddBinaryExpression(ScalarExpression& result, ScalarExpression expression, BinaryExpressionType type);
    protected void AddBinaryExpression(BooleanExpression& result, BooleanExpression expression, BooleanBinaryExpressionType type);
    protected Identifier GetEmptyIdentifier(IToken token);
    protected static void CheckXmlForClauseOptionDuplication(XmlForClauseOptions current, XmlForClauseOptions newOption, IToken token);
    protected static void AddIdentifierToListWithCheck(List`1<Identifier> list, Identifier item, int max);
    protected static void CheckOptionDuplication(Int32& encountered, int newOption, TSqlFragment vOption);
    protected static void CheckOptionDuplication(Int32& encountered, int newOption, IToken token);
    protected static void CheckOptionDuplication(UInt64& encountered, int newOption, TSqlFragment vOption);
    protected static void CheckOptionDuplication(UInt64& encountered, int newOption, IToken token);
    protected IdentifierOrValueExpression IdentifierOrValueExpression(Identifier identifier);
    protected IdentifierOrValueExpression IdentifierOrValueExpression(ValueExpression valueExpression);
    protected static OdbcLiteralType ParseOdbcLiteralType(IToken token);
    protected static OptimizerHintKind ParseJoinOptimizerHint(IToken token);
    protected static OptimizerHintKind ParseUnionOptimizerHint(IToken token);
    protected bool IsNextRuleSelectParenthesis();
    protected bool IsNextRuleBooleanParenthesis();
    protected bool SaveGuessing(IToken& marker);
    protected bool SkipGuessing(IToken marker);
    protected static void Match(IToken token, string keyword);
    protected static void Match(Identifier id, string constant);
    protected static void Match(Identifier id, string constant, IToken tokenForError);
    protected static void Match(IToken token, string keyword, string alternate);
    protected static bool TryMatch(IToken token, string keyword);
    protected static bool TryMatch(Identifier identifier, string keyword);
    protected static void MatchString(Literal literal, String[] keywords);
    protected static SqlDataTypeOption ParseDataType(string token);
    protected static IndexOptionKind ParseIndexLegacyWithOption(IToken token);
    protected static void ThrowWrongIndexOptionError(IndexAffectingStatement statement, TSqlFragment option);
    protected static void CheckFillFactorRange(Literal value);
    protected static void CheckIdentifierLength(Identifier value);
    protected static void CheckIdentifierLiteralLength(IdentifierLiteral value);
    protected static void ThrowIfPercentValueOutOfRange(ScalarExpression expr);
    protected static void VerifyAllowedIndexOption(IndexAffectingStatement statement, IndexOption option);
    protected static void VerifyAllowedIndexOption(IndexAffectingStatement statement, IndexOption option, SqlVersionFlags versionFlags);
    protected static void ThrowSyntaxErrorIfNotCreateAlterTable(IndexAffectingStatement statement, IToken atToken);
    protected static FunctionOptionKind ParseAlterCreateFunctionWithOption(IToken token);
    protected static StatisticsOptionKind ParseCreateStatisticsWithOption(IToken token);
    protected static StatisticsOptionKind ParseSampleOptionsWithOption(IToken token);
    protected static TriggerEnforcement ParseTriggerEnforcement(IToken token);
    protected static void CheckSpecialColumn(ColumnReferenceExpression column);
    protected static void CheckStarQualifier(SelectStarExpression column);
    protected static void CheckTableNameExistsForColumn(ColumnReferenceExpression column, bool multiPartRequisite);
    protected static void CheckTwoPartNameForSchemaObjectName(SchemaObjectName name, string statementType);
    [SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
protected static void CheckIfValidLanguageString(Literal inputString);
    [SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
protected static void CheckIfValidLanguageIdentifier(Identifier inputString);
    [SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
protected static void CheckIfValidLanguageInteger(Literal inputValue);
    [SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
protected static void CheckIfValidLanguageHex(Literal inputValue);
    protected static bool IsStopAtBeforeMarkRestoreOption(IToken token);
    protected StopRestoreOption CreateStopRestoreOption(IToken optionBeginning, ValueExpression mark, ValueExpression afterClause);
    protected ScalarExpressionRestoreOption CreateSimpleRestoreOptionWithValue(IToken optionBeginning, ScalarExpression optionValue);
    [SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
[SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
protected void CreateInternalError(string entryPoint, Exception exception);
    protected void SetFunctionBodyStatement(FunctionStatementBody parent, BeginEndBlockStatement compoundStatement);
    protected static void AddConstraintToColumn(ConstraintDefinition constraint, ColumnDefinition column);
    protected void PutIdentifiersIntoFunctionCall(FunctionCall functionCall, MultiPartIdentifier identifiers);
    protected void VerifyColumnDataType(ColumnDefinition column);
    protected void CreateSetClauseColumn(AssignmentSetClause setClause, MultiPartIdentifier multiPartIdentifier);
    protected static void ProcessNationalAndVarying(SqlDataTypeReference type, IToken nationalToken, bool isVarying);
    protected static string GetSqlDataTypeName(SqlDataTypeOption type);
    protected static void CheckSqlDataTypeParameters(SqlDataTypeReference dataType);
    protected bool IsTableReference(bool allowMultipleTableHints);
    internal T ParseRuleWithStandardExceptionHandling(ParserEntryPoint`1<T> entryPoint, string entryPointName);
    protected void SetNameForDoublePrecisionType(DataTypeReference dataType, IToken doubleToken, IToken precisionToken);
    protected static void CheckForTemporaryFunction(SchemaObjectName name);
    protected static void CheckForTemporaryView(SchemaObjectName name);
    protected static IToken GetFirstToken(TSqlFragment fragment);
    public static void ThrowParseErrorException(string identifier, TSqlFragment fragment, string messageTemplate, String[] args);
    public static void ThrowParseErrorException(string identifier, IToken token, string messageTemplate, String[] args);
    public static ParseError CreateParseError(string identifier, IToken token, string messageTemplate, String[] args);
    public static ParseError CreateParseError(string identifier, int offset, int line, int column, string messageTemplate, String[] args);
    internal static ParseError ProcessTokenStreamRecognitionException(TokenStreamRecognitionException exception, int lastOffset);
    internal static ParseError GetFaultTolerantUnexpectedTokenError(IToken token, RecognitionException exception, int lastOffset);
    public static ParseError GetIncorrectSyntaxError(IToken token);
    public static void ThrowIncorrectSyntaxErrorException(TSqlFragment fragment);
    public static void ThrowIncorrectSyntaxErrorException(IToken token);
    protected TSqlParseErrorException GetUnexpectedTokenErrorException();
    protected ParseError GetUnexpectedTokenError();
    internal static ParseError GetUnexpectedTokenError(IToken token);
    internal static TSqlParseErrorException GetUnexpectedTokenErrorException(IToken token);
    protected static TSqlParseErrorException GetUnexpectedTokenErrorException(Identifier identifier);
}
internal class Microsoft.SqlServer.TransactSql.ScriptDom.TSql80ParserInternal : TSql80ParserBaseInternal {
    public static int EOF;
    public static int NULL_TREE_LOOKAHEAD;
    public static int Add;
    public static int All;
    public static int Alter;
    public static int And;
    public static int Any;
    public static int As;
    public static int Asc;
    public static int Authorization;
    public static int Backup;
    public static int Begin;
    public static int Between;
    public static int Break;
    public static int Browse;
    public static int Bulk;
    public static int By;
    public static int Cascade;
    public static int Case;
    public static int Check;
    public static int Checkpoint;
    public static int Close;
    public static int Clustered;
    public static int Coalesce;
    public static int Collate;
    public static int Column;
    public static int Commit;
    public static int Compute;
    public static int Constraint;
    public static int Contains;
    public static int ContainsTable;
    public static int Continue;
    public static int Convert;
    public static int Create;
    public static int Cross;
    public static int Current;
    public static int CurrentDate;
    public static int CurrentTime;
    public static int CurrentTimestamp;
    public static int CurrentUser;
    public static int Cursor;
    public static int Database;
    public static int Dbcc;
    public static int Deallocate;
    public static int Declare;
    public static int Default;
    public static int Delete;
    public static int Deny;
    public static int Desc;
    public static int Distinct;
    public static int Distributed;
    public static int Double;
    public static int Drop;
    public static int Else;
    public static int End;
    public static int Errlvl;
    public static int Escape;
    public static int Except;
    public static int Exec;
    public static int Execute;
    public static int Exists;
    public static int Exit;
    public static int Fetch;
    public static int File;
    public static int FillFactor;
    public static int For;
    public static int Foreign;
    public static int FreeText;
    public static int FreeTextTable;
    public static int From;
    public static int Full;
    public static int Function;
    public static int GoTo;
    public static int Grant;
    public static int Group;
    public static int Having;
    public static int HoldLock;
    public static int Identity;
    public static int IdentityInsert;
    public static int IdentityColumn;
    public static int If;
    public static int In;
    public static int Index;
    public static int Inner;
    public static int Insert;
    public static int Intersect;
    public static int Into;
    public static int Is;
    public static int Join;
    public static int Key;
    public static int Kill;
    public static int Left;
    public static int Like;
    public static int LineNo;
    public static int National;
    public static int NoCheck;
    public static int NonClustered;
    public static int Not;
    public static int Null;
    public static int NullIf;
    public static int Of;
    public static int Off;
    public static int Offsets;
    public static int On;
    public static int Open;
    public static int OpenDataSource;
    public static int OpenQuery;
    public static int OpenRowSet;
    public static int OpenXml;
    public static int Option;
    public static int Or;
    public static int Order;
    public static int Outer;
    public static int Over;
    public static int Percent;
    public static int Plan;
    public static int Primary;
    public static int Print;
    public static int Proc;
    public static int Procedure;
    public static int Public;
    public static int Raiserror;
    public static int Read;
    public static int ReadText;
    public static int Reconfigure;
    public static int References;
    public static int Replication;
    public static int Restore;
    public static int Restrict;
    public static int Return;
    public static int Revoke;
    public static int Right;
    public static int Rollback;
    public static int RowCount;
    public static int RowGuidColumn;
    public static int Rule;
    public static int Save;
    public static int Schema;
    public static int Select;
    public static int SessionUser;
    public static int Set;
    public static int SetUser;
    public static int Shutdown;
    public static int Some;
    public static int Statistics;
    public static int SystemUser;
    public static int Table;
    public static int TextSize;
    public static int Then;
    public static int To;
    public static int Top;
    public static int Tran;
    public static int Transaction;
    public static int Trigger;
    public static int Truncate;
    public static int TSEqual;
    public static int Union;
    public static int Unique;
    public static int Update;
    public static int UpdateText;
    public static int Use;
    public static int User;
    public static int Values;
    public static int Varying;
    public static int View;
    public static int WaitFor;
    public static int When;
    public static int Where;
    public static int While;
    public static int With;
    public static int WriteText;
    public static int Disk;
    public static int Precision;
    public static int External;
    public static int Revert;
    public static int Pivot;
    public static int Unpivot;
    public static int TableSample;
    public static int Dump;
    public static int Load;
    public static int Merge;
    public static int StopList;
    public static int SemanticKeyPhraseTable;
    public static int SemanticSimilarityTable;
    public static int SemanticSimilarityDetailsTable;
    public static int TryConvert;
    public static int Bang;
    public static int PercentSign;
    public static int Ampersand;
    public static int LeftParenthesis;
    public static int RightParenthesis;
    public static int LeftCurly;
    public static int RightCurly;
    public static int Star;
    public static int MultiplyEquals;
    public static int Plus;
    public static int Comma;
    public static int Minus;
    public static int Dot;
    public static int Divide;
    public static int Colon;
    public static int DoubleColon;
    public static int Semicolon;
    public static int LessThan;
    public static int EqualsSign;
    public static int RightOuterJoin;
    public static int GreaterThan;
    public static int Circumflex;
    public static int VerticalLine;
    public static int Tilde;
    public static int AddEquals;
    public static int SubtractEquals;
    public static int DivideEquals;
    public static int ModEquals;
    public static int BitwiseAndEquals;
    public static int BitwiseOrEquals;
    public static int BitwiseXorEquals;
    public static int Go;
    public static int Label;
    public static int Integer;
    public static int Numeric;
    public static int Real;
    public static int HexLiteral;
    public static int Money;
    public static int SqlCommandIdentifier;
    public static int PseudoColumn;
    public static int DollarPartition;
    public static int AsciiStringOrQuotedIdentifier;
    public static int AsciiStringLiteral;
    public static int UnicodeStringLiteral;
    public static int Identifier;
    public static int QuotedIdentifier;
    public static int Variable;
    public static int OdbcInitiator;
    public static int ProcNameSemicolon;
    public static int SingleLineComment;
    public static int MultilineComment;
    public static int WhiteSpace;
    public static String[] tokenNames_;
    public static BitSet tokenSet_0_;
    public static BitSet tokenSet_1_;
    public static BitSet tokenSet_2_;
    public static BitSet tokenSet_3_;
    public static BitSet tokenSet_4_;
    public static BitSet tokenSet_5_;
    public static BitSet tokenSet_6_;
    public static BitSet tokenSet_7_;
    public static BitSet tokenSet_8_;
    public static BitSet tokenSet_9_;
    public static BitSet tokenSet_10_;
    public static BitSet tokenSet_11_;
    public static BitSet tokenSet_12_;
    public static BitSet tokenSet_13_;
    public static BitSet tokenSet_14_;
    public static BitSet tokenSet_15_;
    public static BitSet tokenSet_16_;
    public static BitSet tokenSet_17_;
    public static BitSet tokenSet_18_;
    public static BitSet tokenSet_19_;
    public static BitSet tokenSet_20_;
    public static BitSet tokenSet_21_;
    public static BitSet tokenSet_22_;
    public static BitSet tokenSet_23_;
    public static BitSet tokenSet_24_;
    public static BitSet tokenSet_25_;
    public static BitSet tokenSet_26_;
    public static BitSet tokenSet_27_;
    public static BitSet tokenSet_28_;
    public static BitSet tokenSet_29_;
    public static BitSet tokenSet_30_;
    public static BitSet tokenSet_31_;
    public static BitSet tokenSet_32_;
    public static BitSet tokenSet_33_;
    public static BitSet tokenSet_34_;
    public static BitSet tokenSet_35_;
    public static BitSet tokenSet_36_;
    public static BitSet tokenSet_37_;
    public static BitSet tokenSet_38_;
    public static BitSet tokenSet_39_;
    public static BitSet tokenSet_40_;
    public static BitSet tokenSet_41_;
    public static BitSet tokenSet_42_;
    public static BitSet tokenSet_43_;
    public static BitSet tokenSet_44_;
    public static BitSet tokenSet_45_;
    public static BitSet tokenSet_46_;
    public static BitSet tokenSet_47_;
    public static BitSet tokenSet_48_;
    public static BitSet tokenSet_49_;
    public static BitSet tokenSet_50_;
    public static BitSet tokenSet_51_;
    public static BitSet tokenSet_52_;
    public static BitSet tokenSet_53_;
    public static BitSet tokenSet_54_;
    public static BitSet tokenSet_55_;
    public static BitSet tokenSet_56_;
    public static BitSet tokenSet_57_;
    public static BitSet tokenSet_58_;
    public static BitSet tokenSet_59_;
    public static BitSet tokenSet_60_;
    public static BitSet tokenSet_61_;
    public static BitSet tokenSet_62_;
    public static BitSet tokenSet_63_;
    public static BitSet tokenSet_64_;
    public static BitSet tokenSet_65_;
    public static BitSet tokenSet_66_;
    public static BitSet tokenSet_67_;
    public static BitSet tokenSet_68_;
    public static BitSet tokenSet_69_;
    public static BitSet tokenSet_70_;
    public static BitSet tokenSet_71_;
    public static BitSet tokenSet_72_;
    public static BitSet tokenSet_73_;
    public static BitSet tokenSet_74_;
    public static BitSet tokenSet_75_;
    public static BitSet tokenSet_76_;
    public static BitSet tokenSet_77_;
    public static BitSet tokenSet_78_;
    public static BitSet tokenSet_79_;
    public static BitSet tokenSet_80_;
    public static BitSet tokenSet_81_;
    public static BitSet tokenSet_82_;
    public static BitSet tokenSet_83_;
    public static BitSet tokenSet_84_;
    public static BitSet tokenSet_85_;
    public static BitSet tokenSet_86_;
    public static BitSet tokenSet_87_;
    public TSql80ParserInternal(bool initialQuotedIdentifiersOn);
    protected TSql80ParserInternal(TokenBuffer tokenBuf, int k);
    public TSql80ParserInternal(TokenBuffer tokenBuf);
    protected TSql80ParserInternal(TokenStream lexer, int k);
    public TSql80ParserInternal(TokenStream lexer);
    public TSql80ParserInternal(ParserSharedInputState state);
    private static TSql80ParserInternal();
    protected void initialize();
    public ChildObjectName entryPointChildObjectName();
    public ChildObjectName childObjectNameWithThreePrefixes();
    public SchemaObjectName entryPointSchemaObjectName();
    public SchemaObjectName schemaObjectFourPartName();
    public DataTypeReference entryPointScalarDataType();
    public DataTypeReference scalarDataType();
    public ScalarExpression entryPointExpression();
    public ScalarExpression expression();
    public BooleanExpression entryPointBooleanExpression();
    public BooleanExpression booleanExpression();
    public StatementList entryPointStatementList();
    public StatementList statementList(Boolean& vParseErrorOccurred);
    public SelectStatement entryPointSubqueryExpressionWithOptionalCTE();
    public SelectStatement subqueryExpressionAsStatement();
    public TSqlFragment entryPointConstantOrIdentifier();
    public ScalarExpression possibleNegativeConstantOrIdentifier();
    public TSqlFragment entryPointConstantOrIdentifierWithDefault();
    public ScalarExpression possibleNegativeConstantOrIdentifierWithDefault();
    public TSqlScript script();
    public TSqlBatch batch();
    public TSqlStatement lastStatement();
    public ExecuteStatement optSimpleExecute();
    public TSqlStatement statementOptSemi();
    public TSqlStatement statement();
    public void optSingleSemicolon(TSqlStatement vParent);
    public ExecutableProcedureReference execProc();
    public CreateTableStatement createTableStatement();
    public AlterTableStatement alterTableStatement();
    public CreateIndexStatement createIndexStatement();
    public TSqlStatement declareStatements();
    public TSqlStatement setStatements();
    public TSqlStatement beginStatements();
    public BreakStatement breakStatement();
    public ContinueStatement continueStatement();
    public IfStatement ifStatement();
    public WhileStatement whileStatement();
    public LabelStatement labelStatement();
    public BackupStatement backupStatement();
    public RestoreStatement restoreStatement();
    public GoToStatement gotoStatement();
    public SaveTransactionStatement saveTransactionStatement();
    public RollbackTransactionStatement rollbackTransactionStatement();
    public CommitTransactionStatement commitTransactionStatement();
    public CreateStatisticsStatement createStatisticsStatement();
    public UpdateStatisticsStatement updateStatisticsStatement();
    public AlterDatabaseStatement alterDatabaseStatements();
    public ExecuteStatement executeStatement();
    public SelectStatement select();
    public DeleteStatement deleteStatement();
    public InsertStatement insertStatement();
    public UpdateStatement updateStatement();
    public TSqlStatement raiseErrorStatements();
    public CreateDatabaseStatement createDatabaseStatement();
    public PrintStatement printStatement();
    public WaitForStatement waitForStatement();
    public ReadTextStatement readTextStatement();
    public UpdateTextStatement updateTextStatement();
    public WriteTextStatement writeTextStatement();
    public LineNoStatement lineNoStatement();
    public UseStatement useStatement();
    public KillStatement killStatement();
    public BulkInsertStatement bulkInsertStatement();
    public InsertBulkStatement insertBulkStatement();
    public CheckpointStatement checkpointStatement();
    public ReconfigureStatement reconfigureStatement();
    public ShutdownStatement shutdownStatement();
    public SetUserStatement setUserStatement();
    public TruncateTableStatement truncateTableStatement();
    public GrantStatement80 grantStatement80();
    public DenyStatement80 denyStatement80();
    public RevokeStatement80 revokeStatement80();
    public ReturnStatement returnStatement();
    public OpenCursorStatement openCursorStatement();
    public CloseCursorStatement closeCursorStatement();
    public DeallocateCursorStatement deallocateCursorStatement();
    public FetchCursorStatement fetchCursorStatement();
    public TSqlStatement dropStatements();
    public DbccStatement dbccStatement();
    public RevertStatement revertStatement();
    public DiskStatement diskStatement();
    public CreateProcedureStatement createProcedureStatement();
    public AlterProcedureStatement alterProcedureStatement();
    public CreateTriggerStatement createTriggerStatement();
    public AlterTriggerStatement alterTriggerStatement();
    public CreateDefaultStatement createDefaultStatement();
    public CreateRuleStatement createRuleStatement();
    public CreateViewStatement createViewStatement();
    public AlterViewStatement alterViewStatement();
    public CreateFunctionStatement createFunctionStatement();
    public AlterFunctionStatement alterFunctionStatement();
    public CreateSchemaStatement createSchemaStatement();
    public Identifier identifier();
    public SqlCommandIdentifier sqlCommandIdentifier();
    public AlterDatabaseStatement alterDbAdd();
    public AlterDatabaseStatement alterDbRemove();
    public AlterDatabaseStatement alterDbModify();
    public AlterDatabaseSetStatement alterDbSet();
    public AlterDatabaseCollateStatement alterDbCollate();
    public void collation(ICollationSetter vParent);
    public AlterDatabaseAddFileStatement alterDbAddFile();
    public AlterDatabaseAddFileGroupStatement alterDbAddFilegroup();
    public void fileDeclBodyList(TSqlFragment vParent, IList`1<FileDeclaration> fileDeclarations);
    public Identifier toFilegroup();
    public AlterDatabaseModifyFileGroupStatement alterDbModifyFilegroup();
    public AlterDatabaseModifyFileStatement alterDbModifyFile();
    public FileDeclaration fileDecl(bool isAlterDbModifyFileStatement);
    public AlterDatabaseSetStatement dbOptionStateList();
    public AlterDatabaseTermination xactTermination();
    public IntegerLiteral integer();
    public DatabaseOption dbOptionStateItem();
    public CursorDefaultDatabaseOption cursorDefaultDbOption();
    public RecoveryDatabaseOption recoveryDbOption();
    public DatabaseOption dbSingleIdentOption();
    public OnOffDatabaseOption alterDbOnOffOption();
    public OptionState optionOnOff(TSqlFragment vParent);
    public void recoveryUnitList(CreateDatabaseStatement vParent);
    public void collationOpt(ICollationSetter vParent);
    public void dbAddendums(CreateDatabaseStatement vParent);
    public void onDisk(CreateDatabaseStatement vParent);
    public FileGroupDefinition fileGroupDecl();
    public FileDeclaration fileDeclBody(bool isAlterDbModifyFileStatement);
    public FileDeclarationOption fileOption(bool newNameAllowed);
    public NameFileDeclarationOption nameFileOption();
    public FileNameFileDeclarationOption fileNameFileOption();
    public SizeFileDeclarationOption sizeFileOption();
    public MaxSizeFileDeclarationOption maxSizeFileOption();
    public FileGrowthFileDeclarationOption fileGrowthFileOption();
    public NameFileDeclarationOption newNameFileOption();
    public IdentifierOrValueExpression nonEmptyStringOrIdentifier();
    public StringLiteral nonEmptyString();
    public MemoryUnit memUnit();
    public IToken backupStart();
    public BackupStatement backupMain();
    public void devList(TSqlFragment vParent, IList`1<DeviceInfo> deviceInfos);
    public void backupOptions(BackupStatement vParent);
    public IToken restoreStart();
    public void restoreMain(RestoreStatement vParent);
    public void restoreOptions(RestoreStatement vParent);
    public BackupDatabaseStatement backupDatabase();
    public BackupTransactionLogStatement backupTransactionLog();
    public IdentifierOrValueExpression identifierOrVariable();
    public void backupFileListOpt(BackupDatabaseStatement vParent);
    public BackupRestoreFileInfo backupRestoreFile();
    public void restoreFileListOpt(RestoreStatement vParent);
    public ValueExpression stringOrVariable();
    public void backupRestoreFileNameList(BackupRestoreFileInfo vParent);
    public DeviceInfo deviceInfo();
    public BackupOption backupOption();
    public ScalarExpression signedIntegerOrVariable();
    public StringLiteral stringLiteral();
    public void restoreOptionsList(RestoreStatement vParent);
    public RestoreOption restoreOption();
    public RestoreOption simpleRestoreOption();
    public ValueExpression afterClause();
    public ScalarExpression signedInteger();
    public MoveRestoreOption moveRestoreOption();
    public ScalarExpressionRestoreOption fileRestoreOption();
    public SchemaObjectName schemaObjectThreePartName();
    public IdentifierOrValueExpression bulkInsertFrom();
    public void bulkInsertOptions(BulkInsertStatement vParent);
    public IdentifierOrValueExpression stringOrIdentifier();
    public BulkInsertOption bulkInsertOption();
    public OrderBulkInsertOption bulkInsertSortOrderOption();
    public LiteralBulkInsertOption simpleBulkInsertOptionWithValue();
    public BulkInsertOption simpleBulkInsertOptionNoValue();
    public BulkInsertOption insertBulkOption();
    public BulkInsertOption simpleInsertBulkOption();
    public Literal integerOrNumeric();
    public void coldefList(InsertBulkStatement vParent);
    public void insertBulkOptions(InsertBulkStatement vParent);
    public InsertBulkColumnDefinition coldefItem();
    public ColumnDefinitionBase columnDefinitionEx();
    public bool nullNotNull(TSqlFragment vParent);
    public ColumnWithSortOrder columnWithSortOrder();
    public void dbccNamedLiteralList(DbccStatement vParent);
    public void dbccOptions(DbccStatement vParent);
    public void dbccOptionsList(DbccStatement vParent);
    public void dbccOptionsListItems(DbccStatement vParent);
    public void dbccOptionsJoin(DbccStatement vParent);
    public DbccOption dbccOption();
    public DbccOption dbccJoinOption();
    public DbccNamedLiteral dbccNamedLiteral();
    public void authorizationOpt(IAuthorization vParent);
    public void authorization(IAuthorization vParent);
    public StatementList createSchemaElementList();
    public TSqlStatement createSchemaElement();
    public void functionStatementBody(FunctionStatementBody vResult, Boolean& vParseErrorOccurred);
    public void functionParameterList(FunctionStatementBody vResult);
    public void functionReturnTypeAndBody(FunctionStatementBody vParent, Boolean& vParseErrorOccurred);
    public ProcedureParameter functionParameter();
    public Identifier identifierVariable();
    public void scalarProcedureParameter(ProcedureParameter vParent, bool outputAllowed);
    public void functionAttributes(FunctionStatementBody vParent);
    public BeginEndBlockStatement beginEndBlockStatement();
    public SelectFunctionReturnType functionReturnClauseRelational();
    public DeclareTableVariableBody declareTableBody(IndexAffectingStatement statementType);
    public FunctionOption functionAttribute();
    public void identifierColumnList(TSqlFragment vParent, IList`1<ColumnReferenceExpression> columns);
    public StatisticsOption createStatisticsStatementWithOption(Boolean& isConflictingOption);
    public LiteralStatisticsOption sampleStatisticsOption(Boolean& isConflictingOption);
    public StatisticsOption simpleStatisticsOption(Boolean& isConflictingOption);
    public void columnNameList(TSqlFragment vParent, IList`1<Identifier> columnNames);
    public StatisticsOption updateStatisticsStatementWithOption(Boolean& isConflictingOption);
    public LiteralStatisticsOption updateStatisticsLiteralOption();
    public StatisticsOption updateStatisticsSimpleOption(Boolean& isConflictingOption);
    public SecurityElement80 securityElement80();
    public SecurityUserClause80 securityUserClause80();
    public CommandSecurityElement80 commandSecurityElementAll80();
    public CommandSecurityElement80 commandSecurityElement80();
    public PrivilegeSecurityElement80 privilegeSecurityElement80();
    public void command80(CommandSecurityElement80 vParent);
    public Privilege80 privilege80();
    public ColumnReferenceExpression column();
    public ValueExpression binaryOrVariable();
    public ValueExpression integerOrVariable();
    public void modificationTextStatement(TextModificationStatement vParent);
    public ScalarExpression signedIntegerOrVariableOrNull();
    public void modificationTextStatementWithLog(TextModificationStatement vParent);
    public ValueExpression writeString();
    public BinaryLiteral binary();
    public NullLiteral nullLiteral();
    public VariableReference variable();
    public CursorId cursorId();
    public FetchCursorStatement rowSelector();
    public FetchType fetchType();
    public DropDatabaseStatement dropDatabaseStatement();
    public DropIndexStatement dropIndexStatement();
    public DropStatisticsStatement dropStatisticsStatement();
    public DropTableStatement dropTableStatement();
    public DropProcedureStatement dropProcedureStatement();
    public DropFunctionStatement dropFunctionStatement();
    public DropViewStatement dropViewStatement();
    public DropDefaultStatement dropDefaultStatement();
    public DropRuleStatement dropRuleStatement();
    public DropTriggerStatement dropTriggerStatement();
    public BackwardsCompatibleDropIndexClause indexDropObject();
    public ChildObjectName statisticsDropObject();
    public List`1<Identifier> identifierList(int vMaxNumber);
    public void dropObjectList(DropObjectsStatement vParent, bool onlyTwoPartNames);
    public SchemaObjectName dropObject(bool onlyTwoPartNames);
    public Identifier nonQuotedIdentifier();
    public BeginTransactionStatement beginTransactionStatement();
    public void transactionName(TransactionStatement vParent);
    public Identifier weirdTransactionName();
    public void tranIdentifier(StringBuilder vStringBuilder, TSqlFragment vParent);
    public DeclareVariableElement declareVariableElement();
    public SqlDataTypeReference cursorDataType();
    public DeclareVariableStatement declareVariableStatement();
    public DeclareCursorStatement declareCursorStatement();
    public PredicateSetStatement predicateSetStatement();
    public SetVariableStatement setVariableStatement();
    public SetStatisticsStatement setStatisticsStatement();
    public SetRowCountStatement setRowcountStatement();
    public SetOffsetsStatement setOffsetsStatement();
    public SetCommandStatement setCommandStatement();
    public SetTransactionIsolationLevelStatement setTransactionIsolationLevelStatement();
    public SetTextSizeStatement setTextSizeStatement();
    public SetIdentityInsertStatement setIdentityInsertStatement();
    public SetErrorLevelStatement setErrorLevelStatement();
    public CursorDefinition cursorDefinition();
    public void setOnOff(SetOnOffStatement vParent);
    public SetOffsets offsetItem();
    public SetCommand setCommand();
    public SetFipsFlaggerCommand fipsFlaggerLevel();
    public DeclareTableVariableBody declareTableBodyMain(IndexAffectingStatement statementType);
    public TableDefinition tableDefinition(IndexAffectingStatement statementType, AlterTableAddTableElementStatement vStatement);
    public void tableElement(IndexAffectingStatement statementType, TableDefinition vParent, AlterTableAddTableElementStatement vStatement);
    public void cursorOpts(bool oldSyntax, IList`1<CursorOption> vOptions);
    public CursorDefinition cursorDefinitionOptions(IList`1<CursorOption> vOptions);
    public SelectStatement selectStatement();
    public CursorOption cursorOption();
    public void indexLegacyOptionList(CreateIndexStatement vParent);
    public FileGroupOrPartitionScheme filegroupOrPartitionScheme();
    public IndexOption indexLegacyOption();
    public IndexExpressionOption fillFactorOption();
    public QueryExpression subqueryExpression();
    public QueryExpression queryExpression(SelectStatement vSelectStatement);
    public OrderByClause orderByClause();
    public ComputeClause computeClause();
    public ForClause forClause();
    public void optimizerHints(TSqlFragment vParent, IList`1<OptimizerHint> hintsCollection);
    public QueryDerivedTable derivedTable();
    public void simpleTableReferenceAlias(TableReferenceWithAlias vParent);
    public ScalarSubquery subquery(ExpressionFlags expressionFlags);
    public QueryExpression subqueryExpressionUnit();
    public QuerySpecification subquerySpecification();
    public QueryParenthesisExpression subqueryParenthesis();
    public QueryExpression queryExpressionUnit(SelectStatement vSelectStatement);
    public QuerySpecification querySpecification(SelectStatement vSelectStatement);
    public QueryParenthesisExpression queryParenthesis(SelectStatement vSelectStatement);
    public UniqueRowFilter uniqueRowFilter();
    public TopRowFilter topRowFilter();
    public SelectElement selectColumnOrStarExpression();
    public FromClause fromClauseOpt();
    public WhereClause whereClause();
    public GroupByClause groupByClause();
    public HavingClause havingClause();
    public BrowseForClause browseForClause();
    public void selectExpression(QuerySpecification vParent);
    public Literal integerOrRealOrNumeric();
    public SelectSetVariable selectSetVariable();
    public SelectStarExpression selectStarExpression();
    public SelectScalarExpression selectColumn();
    public ScalarExpression selectColumnExpression();
    public MultiPartIdentifier multiPartIdentifier(int vMaxNumber);
    public IdentityFunctionCall identityFunction();
    public ScalarExpression seedIncrement();
    public FromClause fromClause();
    public TableReference selectTableReferenceWithOdbc();
    public TableReference selectTableReference();
    public OdbcQualifiedJoinTableReference odbcQualifiedJoin();
    public TableReference selectTableReferenceElement();
    public void joinElement(TableReference& vResult);
    public void odbcInitiator();
    public OdbcConvertSpecification odbcConvertSpecification();
    public ExtractFromExpression extractFromExpression();
    public OdbcFunctionCall odbcFunctionCall();
    public void expressionList(TSqlFragment vParent, IList`1<ScalarExpression> expressions);
    public TableReference joinTableReference();
    public JoinParenthesisTableReference joinParenthesis();
    public TableReference selectTableReferenceElementWithOutJoinParenthesis();
    public void unqualifiedJoin(TableReference& vResult);
    public void qualifiedJoin(TableReference& vResult);
    public TableReference schemaObjectOrFunctionTableReference();
    public BuiltInFunctionTableReference builtInFunctionTableReference();
    public VariableTableReference variableTableReference();
    public TableReferenceWithAlias openRowset();
    public FullTextTableReference fulltextTableReference();
    public OpenXmlTableReference openXmlTableReference();
    public void joinHint(QualifiedJoin vParent);
    public ScalarExpression possibleNegativeConstantWithDefault();
    public void simpleTableReferenceAliasOpt(TableReferenceWithAlias vParent);
    public RaiseErrorStatement raiseErrorStatement();
    public RaiseErrorLegacyStatement raiseErrorLegacyStatement();
    public ScalarExpression signedIntegerOrStringOrVariable();
    public ScalarExpression possibleNegativeConstant();
    public DeleteSpecification deleteSpecification();
    public TableReference dmlTarget();
    public WhereClause dmlWhereClause();
    public InsertSpecification insertSpecification();
    public ColumnReferenceExpression insertColumn();
    public ValuesInsertSource valuesInsertSource();
    public ExecuteInsertSource executeInsertSource();
    public SelectInsertSource selectInsertSource();
    public UpdateSpecification updateSpecification();
    public void setClausesList(TSqlFragment vParent, IList`1<SetClause> setClauses);
    public AssignmentSetClause setClause();
    public void setClauseSubItem(AssignmentSetClause vParent);
    public ScalarExpression expressionWithDefault();
    public ExecuteSpecification executeSpecification();
    public RowValue rowValueExpressionWithDefault();
    public void expressionWithDefaultList(TSqlFragment vParent, IList`1<ScalarExpression> expressions);
    public TableReferenceWithAlias schemaObjectDmlTarget();
    public VariableTableReference variableDmlTarget();
    public SchemaObjectFunctionTableReference schemaObjectFunctionDmlTarget();
    public NamedTableReference schemaObjectTableDmlTarget();
    public void parenthesizedOptExpressionWithDefaultList(TSqlFragment vParent, IList`1<ScalarExpression> expressions);
    public void tableHints(TSqlFragment vParent, IList`1<TableHint> hints, bool indexHintAllowed);
    public NamedTableReference schemaObjectTableReference(SchemaObjectName vSchemaObjectName);
    public SchemaObjectFunctionTableReference schemaObjectFunctionTableReference(SchemaObjectName vSchemaObjectName);
    public void nonParameterTableHints(TSqlFragment vParent, IList`1<TableHint> hints, Boolean& withSpecified);
    public IndexTableHint oldForceIndex();
    public void fullTextTable(FullTextTableReference vParent);
    public void fulltextTableColumnList(FullTextTableReference vParent);
    public void fulltextTableOptions(FullTextTableReference vParent);
    public ColumnReferenceExpression identifierColumnReferenceExpression();
    public ColumnReferenceExpression starColumnReferenceExpression();
    public ValueExpression languageExpression();
    public ValueExpression unsignedInteger();
    public ValueExpression binaryOrIntegerOrStringOrVariable();
    public OpenXmlTableReference openXmlParams();
    public void openXmlWithClauseOpt(OpenXmlTableReference vParent);
    public void openXmlSchemaItemList(OpenXmlTableReference vParent);
    public SchemaDeclarationItem openXmlSchemaItem();
    public ColumnDefinitionBase columnDefinitionBasic();
    public TableReferenceWithAlias openRowsetRowset();
    public OpenQueryTableReference openQueryRowset();
    public AdHocTableReference adhocRowset();
    public OpenRowsetTableReference openRowsetParams();
    public InternalOpenRowset internalOpenRowsetArgs();
    public AdHocDataSource adhocDataSource();
    public SchemaObjectNameOrValueExpression objectOrString();
    public void simpleTableHints(TSqlFragment vParent, IList`1<TableHint> hints, Boolean& withSpecified);
    public TableHint tableHint(bool indexHintAllowed);
    public TableHint simpleTableHint();
    public IndexTableHint indexTableHint(bool indexHintAllowed);
    public IdentifierOrValueExpression identifierOrInteger();
    public void singleOldStyleTableHint(TSqlFragment vParent, IList`1<TableHint> hints);
    public WhereClause whereCurrentOfCursorClause();
    public ExpressionGroupingSpecification simpleGroupByItem();
    public ExpressionWithSortOrder expressionWithSortOrder();
    public ComputeFunction computeFunction();
    public SortOrder orderByOption(TSqlFragment vParent);
    public XmlForClause xmlForClause();
    public UpdateForClause updateForClause();
    public XmlForClauseOption xmlForClauseMode();
    public XmlForClauseOption xmlParam(XmlForClauseOptions encountered);
    public OptimizerHint hint();
    public OptimizerHint simpleOptimizerHint();
    public LiteralOptimizerHint literalOptimizerHint();
    public void viewStatementBody(ViewStatementBody vResult);
    public SchemaObjectName schemaObjectTwoPartName();
    public ViewOption viewOption();
    public TriggerOption triggerOption();
    public void procedureOptions(ProcedureStatementBody vParent);
    public ProcedureOption procedureOption();
    public void procedureStatementBody(ProcedureStatementBody vResult, Boolean& vParseErrorOccurred);
    public ProcedureReference procedureReference();
    public void procedureParameterListOptionalParen(ProcedureStatementBodyBase vResult);
    public void procedureParameterList(ProcedureStatementBodyBase vResult);
    public ProcedureParameter procedureParameter();
    public void cursorProcedureParameter(ProcedureParameter vParent);
    public IdentifierLiteral identifierLiteral();
    public DefaultLiteral defaultLiteral();
    public ValueExpression literal();
    public UnaryExpression negativeConstant();
    public Literal subroutineParameterLiteral();
    public void triggerStatementBody(TriggerStatementBody vResult, Boolean& vParseErrorOccurred);
    public TriggerObject triggerObject();
    public void dmlTriggerMidSection(TriggerStatementBody vParent);
    public TriggerAction dmlTriggerAction();
    public ExecuteOption executeOption();
    public void execStart(TSqlFragment vParent);
    public void execTypes(ExecuteSpecification vParent);
    public ExecutableEntity execStrTypes();
    public ExecutableProcedureReference execProcEx();
    public ExecutableStringList execSqlList();
    public void setParamList(ExecutableEntity vParent);
    public ExecutableProcedureReference adhocDataSourceExecproc();
    public ProcedureReferenceName procObjectReference();
    public ProcedureReferenceName varObjectReference();
    public Literal procNumOpt();
    public ValueExpression stringOrGlobalVariableOrVariable();
    public RealLiteral real();
    public NumericLiteral numeric();
    public ExecuteParameter setParam(Boolean& nameEqualsValueWasUsed, Int32& parameterNumber);
    public TableDefinition tableDefinitionCreateTable();
    public AlterTableAlterColumnStatement alterTableAlterColumnStatement();
    public AlterTableTriggerModificationStatement alterTableTriggerModificationStatement();
    public AlterTableDropTableElementStatement alterTableDropTableElementStatement();
    public ConstraintEnforcement constraintEnforcement();
    public AlterTableAddTableElementStatement alterTableAddTableElementStatement(ConstraintEnforcement vExistingRowsCheck);
    public AlterTableConstraintModificationStatement alterTableConstraintModificationStatement(ConstraintEnforcement vExistingRowsCheck);
    public AlterTableDropTableElement alterTableDropTableElement();
    public ColumnDefinition columnDefinition(IndexAffectingStatement statementType, AlterTableAddTableElementStatement vStatement);
    public ConstraintDefinition tableConstraint(IndexAffectingStatement statementType, AlterTableAddTableElementStatement vStatement);
    public ScalarExpression expressionWithFlags(ExpressionFlags expressionFlags);
    public UniqueConstraintDefinition uniqueColumnConstraint();
    public void regularColumnBody(ColumnDefinition vParent);
    public void columnConstraintListOpt(IndexAffectingStatement statementType, ColumnDefinition vResult);
    public void rowguidcolConstraint(ColumnDefinition vParent);
    public IdentityOptions identityConstraint(IndexAffectingStatement statementType);
    public ConstraintDefinition columnConstraint(IndexAffectingStatement statementType);
    public bool replicationClauseOpt(IndexAffectingStatement statementType, TSqlFragment vParent);
    public NullableConstraintDefinition nullableConstraint();
    public DefaultConstraintDefinition defaultColumnConstraint(IndexAffectingStatement statementType);
    public ForeignKeyConstraintDefinition foreignKeyColumnConstraint(IndexAffectingStatement statementType);
    public CheckConstraintDefinition checkConstraint(IndexAffectingStatement statementType);
    public UniqueConstraintDefinition uniqueTableConstraint();
    public DefaultConstraintDefinition defaultTableConstraint(IndexAffectingStatement statementType);
    public ForeignKeyConstraintDefinition foreignKeyTableConstraint(IndexAffectingStatement statementType);
    public void uniqueConstraintHeader(UniqueConstraintDefinition vParent, bool throwInPhaseOne);
    public void uniqueConstraintTailOpt(UniqueConstraintDefinition vParent);
    public void uniqueConstraintIndexOptionsOpt(UniqueConstraintDefinition vParent);
    public void sortedDataOptions();
    public DeleteUpdateAction deleteUpdateAction(TSqlFragment vParent);
    public void foreignKeyConstraintCommonEnd(IndexAffectingStatement statementType, ForeignKeyConstraintDefinition vParent);
    public void foreignConstraintColumnsOpt(ForeignKeyConstraintDefinition vParent);
    public BooleanExpression booleanExpressionWithFlags(ExpressionFlags expressionFlags);
    public SqlDataTypeReference sqlDataTypeWithoutNational(SchemaObjectName vName, SqlDataTypeOption vType);
    public UserDataTypeReference userDataType(SchemaObjectName vName);
    public SqlDataTypeReference doubleDataType();
    public SqlDataTypeReference sqlDataTypeWithNational();
    public void dataTypeParametersOpt(ParameterizedDataTypeReference vParent);
    public void identifierListElement(List`1<Identifier> vParent, int vMaxNumber, bool first);
    public BooleanExpression booleanExpressionOr(ExpressionFlags expressionFlags);
    public BooleanExpression booleanExpressionAnd(ExpressionFlags expressionFlags);
    public BooleanExpression booleanExpressionUnary(ExpressionFlags expressionFlags);
    public BooleanExpression booleanExpressionPrimary(ExpressionFlags expressionFlags);
    public BooleanParenthesisExpression booleanExpressionParenthesis();
    public BooleanComparisonType comparisonOperator();
    public BooleanComparisonExpression comparisonPredicate(ScalarExpression vExpressionFirst, BooleanComparisonType vType, ExpressionFlags expressionFlags);
    public SubqueryComparisonPredicate subqueryComparisonPredicate(ScalarExpression vExpressionFirst, BooleanComparisonType vType, ExpressionFlags expressionFlags);
    public BooleanComparisonExpression joinPredicate(ScalarExpression vExpressionFirst, BooleanComparisonType vType, ExpressionFlags expressionFlags);
    public BooleanIsNullExpression isPredicate(ScalarExpression vExpressionFirst);
    public InPredicate inPredicate(ScalarExpression vExpressionFirst, bool vNotDefined, ExpressionFlags expressionFlags);
    public BooleanTernaryExpression betweenPredicate(ScalarExpression vExpressionFirst, bool vNotDefined, ExpressionFlags expressionFlags);
    public LikePredicate likePredicate(ScalarExpression vExpressionFirst, bool vNotDefined, ExpressionFlags expressionFlags);
    public FullTextPredicate fulltextPredicate();
    public ExistsPredicate existsPredicate(ExpressionFlags expressionFlags);
    public TSEqualCall tsEqualCall();
    public UpdateCall updateCall();
    public ColumnReferenceExpression fulltextColumn();
    public ColumnReferenceExpression starColumn();
    public BooleanComparisonType joinOperator();
    public SubqueryComparisonPredicateType subqueryComparisonPredicateType();
    public void escapeExpression(LikePredicate vParent, ExpressionFlags expressionFlags);
    public ScalarExpression expressionBinaryPri2(ExpressionFlags expressionFlags);
    public ScalarExpression expressionBinaryPri1(ExpressionFlags expressionFlags);
    public ScalarExpression expressionUnary(ExpressionFlags expressionFlags);
    public PrimaryExpression expressionPrimary(ExpressionFlags expressionFlags);
    public CastCall castCall();
    public FunctionCall identifierBuiltInFunctionCall();
    public LeftFunctionCall leftFunctionCall();
    public RightFunctionCall rightFunctionCall();
    public PartitionFunctionCall partitionFunctionCall();
    public PrimaryExpression columnOrFunctionCall();
    public NullIfExpression nullIfExpression(ExpressionFlags expressionFlags);
    public CoalesceExpression coalesceExpression(ExpressionFlags expressionFlags);
    public CaseExpression caseExpression(ExpressionFlags expressionFlags);
    public ConvertCall convertCall();
    public ParameterlessCall parameterlessCall();
    public PrimaryExpression paranthesisDisambiguatorForExpressions(ExpressionFlags expressionFlags);
    public ParenthesisExpression expressionParenthesis(ExpressionFlags expressionFlags);
    public FunctionCall basicFunctionCall();
    public void identifierBuiltInFunctionCallDefaultParams(FunctionCall vParent);
    public void identifierBuiltInFunctionCallUniqueRowFilter(FunctionCall vParent);
    public void reservedBuiltInFunctionCallParameters(TSqlFragment vParent, IList`1<ScalarExpression> parameters);
    public SimpleWhenClause simpleWhenClause(ExpressionFlags expressionFlags);
    public SearchedWhenClause searchedWhenClause(ExpressionFlags expressionFlags);
    public SimpleCaseExpression simpleCaseExpression(ScalarExpression inputExpression, ExpressionFlags expressionFlags);
    public SearchedCaseExpression searchedCaseExpression(ExpressionFlags expressionFlags);
    public void specialColumn(ColumnReferenceExpression vResult);
    public FunctionCall userFunctionCall(MultiPartIdentifier vIdentifiers);
    public DiskStatementOption diskStatementOption();
    public IdentifierOrValueExpression identifierOrValueExpression();
    public ValueExpression globalVariableOrVariableReference();
    public MoneyLiteral moneyLiteral();
    public OdbcLiteral odbcLiteral();
    private void initializeFactory();
    private static Int64[] mk_tokenSet_0_();
    private static Int64[] mk_tokenSet_1_();
    private static Int64[] mk_tokenSet_2_();
    private static Int64[] mk_tokenSet_3_();
    private static Int64[] mk_tokenSet_4_();
    private static Int64[] mk_tokenSet_5_();
    private static Int64[] mk_tokenSet_6_();
    private static Int64[] mk_tokenSet_7_();
    private static Int64[] mk_tokenSet_8_();
    private static Int64[] mk_tokenSet_9_();
    private static Int64[] mk_tokenSet_10_();
    private static Int64[] mk_tokenSet_11_();
    private static Int64[] mk_tokenSet_12_();
    private static Int64[] mk_tokenSet_13_();
    private static Int64[] mk_tokenSet_14_();
    private static Int64[] mk_tokenSet_15_();
    private static Int64[] mk_tokenSet_16_();
    private static Int64[] mk_tokenSet_17_();
    private static Int64[] mk_tokenSet_18_();
    private static Int64[] mk_tokenSet_19_();
    private static Int64[] mk_tokenSet_20_();
    private static Int64[] mk_tokenSet_21_();
    private static Int64[] mk_tokenSet_22_();
    private static Int64[] mk_tokenSet_23_();
    private static Int64[] mk_tokenSet_24_();
    private static Int64[] mk_tokenSet_25_();
    private static Int64[] mk_tokenSet_26_();
    private static Int64[] mk_tokenSet_27_();
    private static Int64[] mk_tokenSet_28_();
    private static Int64[] mk_tokenSet_29_();
    private static Int64[] mk_tokenSet_30_();
    private static Int64[] mk_tokenSet_31_();
    private static Int64[] mk_tokenSet_32_();
    private static Int64[] mk_tokenSet_33_();
    private static Int64[] mk_tokenSet_34_();
    private static Int64[] mk_tokenSet_35_();
    private static Int64[] mk_tokenSet_36_();
    private static Int64[] mk_tokenSet_37_();
    private static Int64[] mk_tokenSet_38_();
    private static Int64[] mk_tokenSet_39_();
    private static Int64[] mk_tokenSet_40_();
    private static Int64[] mk_tokenSet_41_();
    private static Int64[] mk_tokenSet_42_();
    private static Int64[] mk_tokenSet_43_();
    private static Int64[] mk_tokenSet_44_();
    private static Int64[] mk_tokenSet_45_();
    private static Int64[] mk_tokenSet_46_();
    private static Int64[] mk_tokenSet_47_();
    private static Int64[] mk_tokenSet_48_();
    private static Int64[] mk_tokenSet_49_();
    private static Int64[] mk_tokenSet_50_();
    private static Int64[] mk_tokenSet_51_();
    private static Int64[] mk_tokenSet_52_();
    private static Int64[] mk_tokenSet_53_();
    private static Int64[] mk_tokenSet_54_();
    private static Int64[] mk_tokenSet_55_();
    private static Int64[] mk_tokenSet_56_();
    private static Int64[] mk_tokenSet_57_();
    private static Int64[] mk_tokenSet_58_();
    private static Int64[] mk_tokenSet_59_();
    private static Int64[] mk_tokenSet_60_();
    private static Int64[] mk_tokenSet_61_();
    private static Int64[] mk_tokenSet_62_();
    private static Int64[] mk_tokenSet_63_();
    private static Int64[] mk_tokenSet_64_();
    private static Int64[] mk_tokenSet_65_();
    private static Int64[] mk_tokenSet_66_();
    private static Int64[] mk_tokenSet_67_();
    private static Int64[] mk_tokenSet_68_();
    private static Int64[] mk_tokenSet_69_();
    private static Int64[] mk_tokenSet_70_();
    private static Int64[] mk_tokenSet_71_();
    private static Int64[] mk_tokenSet_72_();
    private static Int64[] mk_tokenSet_73_();
    private static Int64[] mk_tokenSet_74_();
    private static Int64[] mk_tokenSet_75_();
    private static Int64[] mk_tokenSet_76_();
    private static Int64[] mk_tokenSet_77_();
    private static Int64[] mk_tokenSet_78_();
    private static Int64[] mk_tokenSet_79_();
    private static Int64[] mk_tokenSet_80_();
    private static Int64[] mk_tokenSet_81_();
    private static Int64[] mk_tokenSet_82_();
    private static Int64[] mk_tokenSet_83_();
    private static Int64[] mk_tokenSet_84_();
    private static Int64[] mk_tokenSet_85_();
    private static Int64[] mk_tokenSet_86_();
    private static Int64[] mk_tokenSet_87_();
}
internal class Microsoft.SqlServer.TransactSql.ScriptDom.TSql90LexerInternal : TSqlLexerBaseInternal {
    public static int EOF;
    public static int NULL_TREE_LOOKAHEAD;
    public static int Add;
    public static int All;
    public static int Alter;
    public static int And;
    public static int Any;
    public static int As;
    public static int Asc;
    public static int Authorization;
    public static int Backup;
    public static int Begin;
    public static int Between;
    public static int Break;
    public static int Browse;
    public static int Bulk;
    public static int By;
    public static int Cascade;
    public static int Case;
    public static int Check;
    public static int Checkpoint;
    public static int Close;
    public static int Clustered;
    public static int Coalesce;
    public static int Collate;
    public static int Column;
    public static int Commit;
    public static int Compute;
    public static int Constraint;
    public static int Contains;
    public static int ContainsTable;
    public static int Continue;
    public static int Convert;
    public static int Create;
    public static int Cross;
    public static int Current;
    public static int CurrentDate;
    public static int CurrentTime;
    public static int CurrentTimestamp;
    public static int CurrentUser;
    public static int Cursor;
    public static int Database;
    public static int Dbcc;
    public static int Deallocate;
    public static int Declare;
    public static int Default;
    public static int Delete;
    public static int Deny;
    public static int Desc;
    public static int Distinct;
    public static int Distributed;
    public static int Double;
    public static int Drop;
    public static int Else;
    public static int End;
    public static int Errlvl;
    public static int Escape;
    public static int Except;
    public static int Exec;
    public static int Execute;
    public static int Exists;
    public static int Exit;
    public static int Fetch;
    public static int File;
    public static int FillFactor;
    public static int For;
    public static int Foreign;
    public static int FreeText;
    public static int FreeTextTable;
    public static int From;
    public static int Full;
    public static int Function;
    public static int GoTo;
    public static int Grant;
    public static int Group;
    public static int Having;
    public static int HoldLock;
    public static int Identity;
    public static int IdentityInsert;
    public static int IdentityColumn;
    public static int If;
    public static int In;
    public static int Index;
    public static int Inner;
    public static int Insert;
    public static int Intersect;
    public static int Into;
    public static int Is;
    public static int Join;
    public static int Key;
    public static int Kill;
    public static int Left;
    public static int Like;
    public static int LineNo;
    public static int National;
    public static int NoCheck;
    public static int NonClustered;
    public static int Not;
    public static int Null;
    public static int NullIf;
    public static int Of;
    public static int Off;
    public static int Offsets;
    public static int On;
    public static int Open;
    public static int OpenDataSource;
    public static int OpenQuery;
    public static int OpenRowSet;
    public static int OpenXml;
    public static int Option;
    public static int Or;
    public static int Order;
    public static int Outer;
    public static int Over;
    public static int Percent;
    public static int Plan;
    public static int Primary;
    public static int Print;
    public static int Proc;
    public static int Procedure;
    public static int Public;
    public static int Raiserror;
    public static int Read;
    public static int ReadText;
    public static int Reconfigure;
    public static int References;
    public static int Replication;
    public static int Restore;
    public static int Restrict;
    public static int Return;
    public static int Revoke;
    public static int Right;
    public static int Rollback;
    public static int RowCount;
    public static int RowGuidColumn;
    public static int Rule;
    public static int Save;
    public static int Schema;
    public static int Select;
    public static int SessionUser;
    public static int Set;
    public static int SetUser;
    public static int Shutdown;
    public static int Some;
    public static int Statistics;
    public static int SystemUser;
    public static int Table;
    public static int TextSize;
    public static int Then;
    public static int To;
    public static int Top;
    public static int Tran;
    public static int Transaction;
    public static int Trigger;
    public static int Truncate;
    public static int TSEqual;
    public static int Union;
    public static int Unique;
    public static int Update;
    public static int UpdateText;
    public static int Use;
    public static int User;
    public static int Values;
    public static int Varying;
    public static int View;
    public static int WaitFor;
    public static int When;
    public static int Where;
    public static int While;
    public static int With;
    public static int WriteText;
    public static int Disk;
    public static int Precision;
    public static int External;
    public static int Revert;
    public static int Pivot;
    public static int Unpivot;
    public static int TableSample;
    public static int Dump;
    public static int Load;
    public static int Merge;
    public static int StopList;
    public static int SemanticKeyPhraseTable;
    public static int SemanticSimilarityTable;
    public static int SemanticSimilarityDetailsTable;
    public static int TryConvert;
    public static int Bang;
    public static int PercentSign;
    public static int Ampersand;
    public static int LeftParenthesis;
    public static int RightParenthesis;
    public static int LeftCurly;
    public static int RightCurly;
    public static int Star;
    public static int MultiplyEquals;
    public static int Plus;
    public static int Comma;
    public static int Minus;
    public static int Dot;
    public static int Divide;
    public static int Colon;
    public static int DoubleColon;
    public static int Semicolon;
    public static int LessThan;
    public static int EqualsSign;
    public static int RightOuterJoin;
    public static int GreaterThan;
    public static int Circumflex;
    public static int VerticalLine;
    public static int Tilde;
    public static int AddEquals;
    public static int SubtractEquals;
    public static int DivideEquals;
    public static int ModEquals;
    public static int BitwiseAndEquals;
    public static int BitwiseOrEquals;
    public static int BitwiseXorEquals;
    public static int Go;
    public static int Label;
    public static int Integer;
    public static int Numeric;
    public static int Real;
    public static int HexLiteral;
    public static int Money;
    public static int SqlCommandIdentifier;
    public static int PseudoColumn;
    public static int DollarPartition;
    public static int AsciiStringOrQuotedIdentifier;
    public static int AsciiStringLiteral;
    public static int UnicodeStringLiteral;
    public static int Identifier;
    public static int QuotedIdentifier;
    public static int Variable;
    public static int OdbcInitiator;
    public static int ProcNameSemicolon;
    public static int SingleLineComment;
    public static int MultilineComment;
    public static int WhiteSpace;
    public static int Digit;
    public static int FirstLetter;
    public static int Letter;
    public static int MoneySign;
    public static int WS_CHAR_WO_NEWLINE;
    public static int Number;
    public static int Exponent;
    public static int EndOfLine;
    public static BitSet tokenSet_0_;
    public static BitSet tokenSet_1_;
    public static BitSet tokenSet_2_;
    public static BitSet tokenSet_3_;
    public static BitSet tokenSet_4_;
    public static BitSet tokenSet_5_;
    public static BitSet tokenSet_6_;
    public static BitSet tokenSet_7_;
    public static BitSet tokenSet_8_;
    public static BitSet tokenSet_9_;
    public static BitSet tokenSet_10_;
    public static BitSet tokenSet_11_;
    public static BitSet tokenSet_12_;
    public TSql90LexerInternal(Stream ins);
    public TSql90LexerInternal(TextReader r);
    public TSql90LexerInternal(InputBuffer ib);
    public TSql90LexerInternal(LexerSharedInputState state);
    private static TSql90LexerInternal();
    private void initialize();
    public virtual IToken nextToken();
    public void mBang(bool _createToken);
    public void mPercentSign(bool _createToken);
    public void mAmpersand(bool _createToken);
    public void mLeftParenthesis(bool _createToken);
    public void mRightParenthesis(bool _createToken);
    public void mLeftCurly(bool _createToken);
    public void mRightCurly(bool _createToken);
    public void mStar(bool _createToken);
    public void mMultiplyEquals(bool _createToken);
    public void mPlus(bool _createToken);
    public void mComma(bool _createToken);
    public void mMinus(bool _createToken);
    protected void mDot(bool _createToken);
    public void mDivide(bool _createToken);
    public void mColon(bool _createToken);
    public void mDoubleColon(bool _createToken);
    public void mLessThan(bool _createToken);
    public void mEqualsSign(bool _createToken);
    public void mRightOuterJoin(bool _createToken);
    public void mGreaterThan(bool _createToken);
    public void mCircumflex(bool _createToken);
    public void mVerticalLine(bool _createToken);
    public void mTilde(bool _createToken);
    protected void mSemicolon(bool _createToken);
    protected void mDigit(bool _createToken);
    protected void mFirstLetter(bool _createToken);
    protected void mLetter(bool _createToken);
    protected void mMoneySign(bool _createToken);
    public void mProcNameSemicolon(bool _createToken);
    protected void mWS_CHAR_WO_NEWLINE(bool _createToken);
    public void mNumber(bool _createToken);
    public void mWhiteSpace(bool _createToken);
    protected void mEndOfLine(bool _createToken);
    public void mGo(bool _createToken);
    protected void mLabel(bool _createToken);
    protected void mInteger(bool _createToken);
    protected void mNumeric(bool _createToken);
    protected void mReal(bool _createToken);
    protected void mHexLiteral(bool _createToken);
    protected void mExponent(bool _createToken);
    protected void mMoney(bool _createToken);
    protected void mSqlCommandIdentifier(bool _createToken);
    protected void mPseudoColumn(bool _createToken);
    protected void mDollarPartition(bool _createToken);
    protected void mAsciiStringOrQuotedIdentifier(bool _createToken);
    public void mAsciiStringLiteral(bool _createToken);
    public void mUnicodeStringLiteral(bool _createToken);
    public void mIdentifier(bool _createToken);
    public void mQuotedIdentifier(bool _createToken);
    public void mVariable(bool _createToken);
    protected void mOdbcInitiator(bool _createToken);
    public void mSingleLineComment(bool _createToken);
    public void mMultilineComment(bool _createToken);
    private static Int64[] mk_tokenSet_0_();
    private static Int64[] mk_tokenSet_1_();
    private static Int64[] mk_tokenSet_2_();
    private static Int64[] mk_tokenSet_3_();
    private static Int64[] mk_tokenSet_4_();
    private static Int64[] mk_tokenSet_5_();
    private static Int64[] mk_tokenSet_6_();
    private static Int64[] mk_tokenSet_7_();
    private static Int64[] mk_tokenSet_8_();
    private static Int64[] mk_tokenSet_9_();
    private static Int64[] mk_tokenSet_10_();
    private static Int64[] mk_tokenSet_11_();
    private static Int64[] mk_tokenSet_12_();
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.TSql90Parser : TSqlParser {
    public TSql90Parser(bool initialQuotedIdentifiers);
    internal virtual TSqlLexerBaseInternal GetNewInternalLexer();
    private TSql90ParserInternal GetNewInternalParser();
    private TSql90ParserInternal GetNewInternalParserForInput(TextReader input, IList`1& errors, int startOffset, int startLine, int startColumn);
    public virtual TSqlFragment Parse(IList`1<TSqlParserToken> tokens, IList`1& errors);
    public virtual ChildObjectName ParseChildObjectName(TextReader input, IList`1& errors, int startOffset, int startLine, int startColumn);
    public virtual SchemaObjectName ParseSchemaObjectName(TextReader input, IList`1& errors, int startOffset, int startLine, int startColumn);
    public virtual DataTypeReference ParseScalarDataType(TextReader input, IList`1& errors, int startOffset, int startLine, int startColumn);
    public virtual ScalarExpression ParseExpression(TextReader input, IList`1& errors, int startOffset, int startLine, int startColumn);
    public virtual BooleanExpression ParseBooleanExpression(TextReader input, IList`1& errors, int startOffset, int startLine, int startColumn);
    public virtual StatementList ParseStatementList(TextReader input, IList`1& errors, int startOffset, int startLine, int startColumn);
    public virtual SelectStatement ParseSubQueryExpressionWithOptionalCTE(TextReader input, IList`1& errors, int startOffset, int startLine, int startColumn);
    internal IPv4 ParseIPv4(TextReader input, IList`1& errors, int startOffset, int startLine, int startColumn);
    public virtual TSqlFragment ParseConstantOrIdentifier(TextReader input, IList`1& errors, int startOffset, int startLine, int startColumn);
    public virtual TSqlFragment ParseConstantOrIdentifierWithDefault(TextReader input, IList`1& errors, int startOffset, int startLine, int startColumn);
    internal virtual TSqlStatement PhaseOneParse(TextReader input);
}
internal abstract class Microsoft.SqlServer.TransactSql.ScriptDom.TSql90ParserBaseInternal : TSql80ParserBaseInternal {
    protected static int BulkInsertOptionsProhibitedInOpenRowset;
    private static int CheckForFormatFileOptionInOpenRowsetBulkMask;
    protected TSql90ParserBaseInternal(TokenBuffer tokenBuf, int k);
    protected TSql90ParserBaseInternal(ParserSharedInputState state, int k);
    protected TSql90ParserBaseInternal(TokenStream lexer, int k);
    public TSql90ParserBaseInternal(bool initialQuotedIdentifiersOn);
    protected static AuthenticationTypes AggregateAuthenticationType(AuthenticationTypes current, AuthenticationTypes newOption, IToken token);
    protected static void CheckForFormatFileOptionInOpenRowsetBulk(int encounteredOptions, TSqlFragment relatedFragment);
    protected static PortTypes AggregatePortType(PortTypes current, PortTypes newOption, IToken token);
    protected static void CheckCertificateOptionDupication(CertificateOptionKinds current, CertificateOptionKinds newOption, IToken token);
    protected static void CheckIfEndpointOptionAllowed(EndpointProtocolOptions current, EndpointProtocolOptions newOption, EndpointProtocol protocol, IToken token);
    protected static void CheckIfPayloadOptionAllowed(PayloadOptionKinds current, PayloadOptionKinds newOption, EndpointType endpointType, IToken token);
    protected static SecurityObjectKind ParseSecurityObjectKind(Identifier identifier);
    protected static SecurityObjectKind ParseSecurityObjectKind(Identifier identifier1, Identifier identifier2);
    protected static SecurityObjectKind ParseSecurityObjectKind(Identifier identifier1, Identifier identifier2, Identifier identifier3);
    protected static bool IsXml(Identifier identifier);
    protected static bool IsSys(Identifier identifier);
    protected bool IsStatementIsNext();
    public static string Unquote(string value);
    protected static EncryptionAlgorithmPreference RecognizeAesOrRc4(Identifier id, IToken tokenForError);
    protected static AuthenticationProtocol RecognizeAuthenticationProtocol(Identifier id, IToken tokenForError);
    protected static void RecognizeAlterLoginSecAdminPasswordOption(IToken token, PasswordAlterPrincipalOption astNode);
    protected static TValue EnableDisableMatcher(IToken token, TValue enableValue, TValue disableValue);
    protected static void AddConstraintToComputedColumn(ConstraintDefinition constraint, ColumnDefinition column);
    protected static IndexAffectingStatement GetAlterIndexStatementKind(AlterIndexStatement alterIndex);
    protected static void CheckForDistinctInWindowedAggregate(FunctionCall functionCall, IToken distinctToken);
    protected Literal CreateIntLiteralFromNumericToken(IToken token, int textOffset, int textLength);
    protected bool SplitNumericIntoIpParts(IToken token, Literal& frag1, Literal& frag2);
    protected Literal GetIPv4FragmentFromDotNumberNumeric(IToken token);
    protected Literal GetIPv4FragmentFromNumberDotNumeric(IToken token);
    protected void GetIPv4FragmentsFromNumberDotNumberNumeric(IToken token, Literal& frag1, Literal& frag2);
    protected static void CheckDmlTriggerActionDuplication(int current, TriggerAction vTriggerAction);
    protected static void UpdateDmlTriggerActionEncounteredOptions(Int32& encountered, TriggerAction vTriggerAction);
    protected static void ThrowIfInvalidListenerPortValue(Literal value);
    protected static void ThrowIfMaxdopValueOutOfRange(Literal value);
    protected EventTypeContainer CreateEventTypeContainer(EventNotificationEventType eventTypeValue, IToken token);
    protected EventGroupContainer CreateEventGroupContainer(EventNotificationEventGroup eventGroupValue, IToken token);
}
internal class Microsoft.SqlServer.TransactSql.ScriptDom.TSql90ParserInternal : TSql90ParserBaseInternal {
    public static int EOF;
    public static int NULL_TREE_LOOKAHEAD;
    public static int Add;
    public static int All;
    public static int Alter;
    public static int And;
    public static int Any;
    public static int As;
    public static int Asc;
    public static int Authorization;
    public static int Backup;
    public static int Begin;
    public static int Between;
    public static int Break;
    public static int Browse;
    public static int Bulk;
    public static int By;
    public static int Cascade;
    public static int Case;
    public static int Check;
    public static int Checkpoint;
    public static int Close;
    public static int Clustered;
    public static int Coalesce;
    public static int Collate;
    public static int Column;
    public static int Commit;
    public static int Compute;
    public static int Constraint;
    public static int Contains;
    public static int ContainsTable;
    public static int Continue;
    public static int Convert;
    public static int Create;
    public static int Cross;
    public static int Current;
    public static int CurrentDate;
    public static int CurrentTime;
    public static int CurrentTimestamp;
    public static int CurrentUser;
    public static int Cursor;
    public static int Database;
    public static int Dbcc;
    public static int Deallocate;
    public static int Declare;
    public static int Default;
    public static int Delete;
    public static int Deny;
    public static int Desc;
    public static int Distinct;
    public static int Distributed;
    public static int Double;
    public static int Drop;
    public static int Else;
    public static int End;
    public static int Errlvl;
    public static int Escape;
    public static int Except;
    public static int Exec;
    public static int Execute;
    public static int Exists;
    public static int Exit;
    public static int Fetch;
    public static int File;
    public static int FillFactor;
    public static int For;
    public static int Foreign;
    public static int FreeText;
    public static int FreeTextTable;
    public static int From;
    public static int Full;
    public static int Function;
    public static int GoTo;
    public static int Grant;
    public static int Group;
    public static int Having;
    public static int HoldLock;
    public static int Identity;
    public static int IdentityInsert;
    public static int IdentityColumn;
    public static int If;
    public static int In;
    public static int Index;
    public static int Inner;
    public static int Insert;
    public static int Intersect;
    public static int Into;
    public static int Is;
    public static int Join;
    public static int Key;
    public static int Kill;
    public static int Left;
    public static int Like;
    public static int LineNo;
    public static int National;
    public static int NoCheck;
    public static int NonClustered;
    public static int Not;
    public static int Null;
    public static int NullIf;
    public static int Of;
    public static int Off;
    public static int Offsets;
    public static int On;
    public static int Open;
    public static int OpenDataSource;
    public static int OpenQuery;
    public static int OpenRowSet;
    public static int OpenXml;
    public static int Option;
    public static int Or;
    public static int Order;
    public static int Outer;
    public static int Over;
    public static int Percent;
    public static int Plan;
    public static int Primary;
    public static int Print;
    public static int Proc;
    public static int Procedure;
    public static int Public;
    public static int Raiserror;
    public static int Read;
    public static int ReadText;
    public static int Reconfigure;
    public static int References;
    public static int Replication;
    public static int Restore;
    public static int Restrict;
    public static int Return;
    public static int Revoke;
    public static int Right;
    public static int Rollback;
    public static int RowCount;
    public static int RowGuidColumn;
    public static int Rule;
    public static int Save;
    public static int Schema;
    public static int Select;
    public static int SessionUser;
    public static int Set;
    public static int SetUser;
    public static int Shutdown;
    public static int Some;
    public static int Statistics;
    public static int SystemUser;
    public static int Table;
    public static int TextSize;
    public static int Then;
    public static int To;
    public static int Top;
    public static int Tran;
    public static int Transaction;
    public static int Trigger;
    public static int Truncate;
    public static int TSEqual;
    public static int Union;
    public static int Unique;
    public static int Update;
    public static int UpdateText;
    public static int Use;
    public static int User;
    public static int Values;
    public static int Varying;
    public static int View;
    public static int WaitFor;
    public static int When;
    public static int Where;
    public static int While;
    public static int With;
    public static int WriteText;
    public static int Disk;
    public static int Precision;
    public static int External;
    public static int Revert;
    public static int Pivot;
    public static int Unpivot;
    public static int TableSample;
    public static int Dump;
    public static int Load;
    public static int Merge;
    public static int StopList;
    public static int SemanticKeyPhraseTable;
    public static int SemanticSimilarityTable;
    public static int SemanticSimilarityDetailsTable;
    public static int TryConvert;
    public static int Bang;
    public static int PercentSign;
    public static int Ampersand;
    public static int LeftParenthesis;
    public static int RightParenthesis;
    public static int LeftCurly;
    public static int RightCurly;
    public static int Star;
    public static int MultiplyEquals;
    public static int Plus;
    public static int Comma;
    public static int Minus;
    public static int Dot;
    public static int Divide;
    public static int Colon;
    public static int DoubleColon;
    public static int Semicolon;
    public static int LessThan;
    public static int EqualsSign;
    public static int RightOuterJoin;
    public static int GreaterThan;
    public static int Circumflex;
    public static int VerticalLine;
    public static int Tilde;
    public static int AddEquals;
    public static int SubtractEquals;
    public static int DivideEquals;
    public static int ModEquals;
    public static int BitwiseAndEquals;
    public static int BitwiseOrEquals;
    public static int BitwiseXorEquals;
    public static int Go;
    public static int Label;
    public static int Integer;
    public static int Numeric;
    public static int Real;
    public static int HexLiteral;
    public static int Money;
    public static int SqlCommandIdentifier;
    public static int PseudoColumn;
    public static int DollarPartition;
    public static int AsciiStringOrQuotedIdentifier;
    public static int AsciiStringLiteral;
    public static int UnicodeStringLiteral;
    public static int Identifier;
    public static int QuotedIdentifier;
    public static int Variable;
    public static int OdbcInitiator;
    public static int ProcNameSemicolon;
    public static int SingleLineComment;
    public static int MultilineComment;
    public static int WhiteSpace;
    public static String[] tokenNames_;
    public static BitSet tokenSet_0_;
    public static BitSet tokenSet_1_;
    public static BitSet tokenSet_2_;
    public static BitSet tokenSet_3_;
    public static BitSet tokenSet_4_;
    public static BitSet tokenSet_5_;
    public static BitSet tokenSet_6_;
    public static BitSet tokenSet_7_;
    public static BitSet tokenSet_8_;
    public static BitSet tokenSet_9_;
    public static BitSet tokenSet_10_;
    public static BitSet tokenSet_11_;
    public static BitSet tokenSet_12_;
    public static BitSet tokenSet_13_;
    public static BitSet tokenSet_14_;
    public static BitSet tokenSet_15_;
    public static BitSet tokenSet_16_;
    public static BitSet tokenSet_17_;
    public static BitSet tokenSet_18_;
    public static BitSet tokenSet_19_;
    public static BitSet tokenSet_20_;
    public static BitSet tokenSet_21_;
    public static BitSet tokenSet_22_;
    public static BitSet tokenSet_23_;
    public static BitSet tokenSet_24_;
    public static BitSet tokenSet_25_;
    public static BitSet tokenSet_26_;
    public static BitSet tokenSet_27_;
    public static BitSet tokenSet_28_;
    public static BitSet tokenSet_29_;
    public static BitSet tokenSet_30_;
    public static BitSet tokenSet_31_;
    public static BitSet tokenSet_32_;
    public static BitSet tokenSet_33_;
    public static BitSet tokenSet_34_;
    public static BitSet tokenSet_35_;
    public static BitSet tokenSet_36_;
    public static BitSet tokenSet_37_;
    public static BitSet tokenSet_38_;
    public static BitSet tokenSet_39_;
    public static BitSet tokenSet_40_;
    public static BitSet tokenSet_41_;
    public static BitSet tokenSet_42_;
    public static BitSet tokenSet_43_;
    public static BitSet tokenSet_44_;
    public static BitSet tokenSet_45_;
    public static BitSet tokenSet_46_;
    public static BitSet tokenSet_47_;
    public static BitSet tokenSet_48_;
    public static BitSet tokenSet_49_;
    public static BitSet tokenSet_50_;
    public static BitSet tokenSet_51_;
    public static BitSet tokenSet_52_;
    public static BitSet tokenSet_53_;
    public static BitSet tokenSet_54_;
    public static BitSet tokenSet_55_;
    public static BitSet tokenSet_56_;
    public static BitSet tokenSet_57_;
    public static BitSet tokenSet_58_;
    public static BitSet tokenSet_59_;
    public static BitSet tokenSet_60_;
    public static BitSet tokenSet_61_;
    public static BitSet tokenSet_62_;
    public static BitSet tokenSet_63_;
    public static BitSet tokenSet_64_;
    public static BitSet tokenSet_65_;
    public static BitSet tokenSet_66_;
    public static BitSet tokenSet_67_;
    public static BitSet tokenSet_68_;
    public static BitSet tokenSet_69_;
    public static BitSet tokenSet_70_;
    public static BitSet tokenSet_71_;
    public static BitSet tokenSet_72_;
    public static BitSet tokenSet_73_;
    public static BitSet tokenSet_74_;
    public static BitSet tokenSet_75_;
    public static BitSet tokenSet_76_;
    public static BitSet tokenSet_77_;
    public static BitSet tokenSet_78_;
    public static BitSet tokenSet_79_;
    public static BitSet tokenSet_80_;
    public static BitSet tokenSet_81_;
    public static BitSet tokenSet_82_;
    public static BitSet tokenSet_83_;
    public static BitSet tokenSet_84_;
    public static BitSet tokenSet_85_;
    public static BitSet tokenSet_86_;
    public static BitSet tokenSet_87_;
    public static BitSet tokenSet_88_;
    public static BitSet tokenSet_89_;
    public static BitSet tokenSet_90_;
    public static BitSet tokenSet_91_;
    public static BitSet tokenSet_92_;
    public static BitSet tokenSet_93_;
    public static BitSet tokenSet_94_;
    public static BitSet tokenSet_95_;
    public static BitSet tokenSet_96_;
    public static BitSet tokenSet_97_;
    public static BitSet tokenSet_98_;
    public static BitSet tokenSet_99_;
    public static BitSet tokenSet_100_;
    public static BitSet tokenSet_101_;
    public static BitSet tokenSet_102_;
    public static BitSet tokenSet_103_;
    public static BitSet tokenSet_104_;
    public static BitSet tokenSet_105_;
    public static BitSet tokenSet_106_;
    public static BitSet tokenSet_107_;
    public static BitSet tokenSet_108_;
    public static BitSet tokenSet_109_;
    public static BitSet tokenSet_110_;
    public static BitSet tokenSet_111_;
    public static BitSet tokenSet_112_;
    public static BitSet tokenSet_113_;
    public static BitSet tokenSet_114_;
    public static BitSet tokenSet_115_;
    public static BitSet tokenSet_116_;
    public static BitSet tokenSet_117_;
    public static BitSet tokenSet_118_;
    public static BitSet tokenSet_119_;
    public static BitSet tokenSet_120_;
    public static BitSet tokenSet_121_;
    public static BitSet tokenSet_122_;
    public static BitSet tokenSet_123_;
    public static BitSet tokenSet_124_;
    public static BitSet tokenSet_125_;
    public static BitSet tokenSet_126_;
    public static BitSet tokenSet_127_;
    public static BitSet tokenSet_128_;
    public static BitSet tokenSet_129_;
    public static BitSet tokenSet_130_;
    public static BitSet tokenSet_131_;
    public static BitSet tokenSet_132_;
    public static BitSet tokenSet_133_;
    public static BitSet tokenSet_134_;
    public static BitSet tokenSet_135_;
    public static BitSet tokenSet_136_;
    public static BitSet tokenSet_137_;
    public static BitSet tokenSet_138_;
    public static BitSet tokenSet_139_;
    public static BitSet tokenSet_140_;
    public static BitSet tokenSet_141_;
    public static BitSet tokenSet_142_;
    public static BitSet tokenSet_143_;
    public static BitSet tokenSet_144_;
    public static BitSet tokenSet_145_;
    public TSql90ParserInternal(bool initialQuotedIdentifiersOn);
    protected TSql90ParserInternal(TokenBuffer tokenBuf, int k);
    public TSql90ParserInternal(TokenBuffer tokenBuf);
    protected TSql90ParserInternal(TokenStream lexer, int k);
    public TSql90ParserInternal(TokenStream lexer);
    public TSql90ParserInternal(ParserSharedInputState state);
    private static TSql90ParserInternal();
    protected void initialize();
    public ChildObjectName entryPointChildObjectName();
    public ChildObjectName childObjectNameWithThreePrefixes();
    public SchemaObjectName entryPointSchemaObjectName();
    public SchemaObjectName schemaObjectFourPartName();
    public DataTypeReference entryPointScalarDataType();
    public DataTypeReference scalarDataType();
    public ScalarExpression entryPointExpression();
    public ScalarExpression expression();
    public BooleanExpression entryPointBooleanExpression();
    public BooleanExpression booleanExpression();
    public StatementList entryPointStatementList();
    public StatementList statementList(Boolean& vParseErrorOccurred);
    public SelectStatement entryPointSubqueryExpressionWithOptionalCTE();
    public SelectFunctionReturnType functionReturnClauseRelational();
    public IPv4 entryPointIPv4Address();
    public IPv4 ipAddressV4();
    public TSqlFragment entryPointConstantOrIdentifier();
    public ScalarExpression possibleNegativeConstantOrIdentifier();
    public TSqlFragment entryPointConstantOrIdentifierWithDefault();
    public ScalarExpression possibleNegativeConstantOrIdentifierWithDefault();
    public TSqlScript script();
    public TSqlBatch batch();
    public TSqlStatement lastStatementOptSemi();
    public ExecuteStatement optSimpleExecute();
    public TSqlStatement statementOptSemi();
    public TSqlStatement statement();
    public void optSemicolons(TSqlStatement vParent);
    public TSqlStatement lastStatement();
    public ExecutableProcedureReference execProc();
    public CreateTableStatement createTableStatement();
    public AlterTableStatement alterTableStatement();
    public CreateIndexStatement createIndexStatement();
    public TSqlStatement declareStatements();
    public TSqlStatement setStatements();
    public TSqlStatement beginStatements();
    public BreakStatement breakStatement();
    public ContinueStatement continueStatement();
    public IfStatement ifStatement();
    public WhileStatement whileStatement();
    public LabelStatement labelStatement();
    public TSqlStatement backupStatements();
    public TSqlStatement restoreStatements();
    public GoToStatement gotoStatement();
    public SaveTransactionStatement saveTransactionStatement();
    public RollbackTransactionStatement rollbackTransactionStatement();
    public CommitTransactionStatement commitTransactionStatement();
    public CreateStatisticsStatement createStatisticsStatement();
    public UpdateStatisticsStatement updateStatisticsStatement();
    public AlterDatabaseStatement alterDatabaseStatements();
    public ExecuteStatement executeStatement();
    public StatementWithCtesAndXmlNamespaces withCommonTableExpressionsAndXmlNamespacesStatements();
    public TSqlStatement raiseErrorStatements();
    public TSqlStatement alter2005Statements();
    public TSqlStatement create2005Statements();
    public CreateDatabaseStatement createDatabaseStatement();
    public AddSignatureStatement addSignatureStatement();
    public TSqlStatement identifierStatements();
    public PrintStatement printStatement();
    public WaitForStatement waitForStatement();
    public ReadTextStatement readTextStatement();
    public UpdateTextStatement updateTextStatement();
    public WriteTextStatement writeTextStatement();
    public LineNoStatement lineNoStatement();
    public UseStatement useStatement();
    public TSqlStatement killStatements();
    public BulkInsertStatement bulkInsertStatement();
    public InsertBulkStatement insertBulkStatement();
    public CheckpointStatement checkpointStatement();
    public ReconfigureStatement reconfigureStatement();
    public ShutdownStatement shutdownStatement();
    public SetUserStatement setUserStatement();
    public TruncateTableStatement truncateTableStatement();
    public GrantStatement grantStatement90();
    public DenyStatement denyStatement90();
    public RevokeStatement revokeStatement90();
    public ReturnStatement returnStatement();
    public TSqlStatement openStatements();
    public TSqlStatement closeStatements();
    public DeallocateCursorStatement deallocateCursorStatement();
    public FetchCursorStatement fetchCursorStatement();
    public TSqlStatement dropStatements();
    public DbccStatement dbccStatement();
    public RevertStatement revertStatement();
    public ExecuteAsStatement executeAsStatement();
    public EndConversationStatement endConversationStatement();
    public WithCtesAndXmlNamespaces withCommonTableExpressionsAndXmlNamespaces();
    public SelectStatement select();
    public DeleteStatement deleteStatement();
    public InsertStatement insertStatement();
    public UpdateStatement updateStatement();
    public CreateProcedureStatement createProcedureStatement();
    public AlterProcedureStatement alterProcedureStatement();
    public CreateTriggerStatement createTriggerStatement();
    public AlterTriggerStatement alterTriggerStatement();
    public CreateDefaultStatement createDefaultStatement();
    public CreateRuleStatement createRuleStatement();
    public CreateViewStatement createViewStatement();
    public AlterViewStatement alterViewStatement();
    public CreateFunctionStatement createFunctionStatement();
    public AlterFunctionStatement alterFunctionStatement();
    public CreateSchemaStatement createSchemaStatement();
    public EnableDisableTriggerStatement disableTriggerStatement();
    public EnableDisableTriggerStatement enableTriggerStatement();
    public MoveConversationStatement moveConversationStatement();
    public GetConversationGroupStatement getConversationGroupStatement();
    public ReceiveStatement receiveStatement();
    public SendStatement sendStatement();
    public void enableDisableTriggerBody(EnableDisableTriggerStatement vParent);
    public SchemaObjectName schemaObjectThreePartName();
    public TriggerObject triggerObject();
    public CreateAggregateStatement createAggregateStatement();
    public CreateApplicationRoleStatement createApplicationRoleStatement();
    public CreateAssemblyStatement createAssemblyStatement();
    public CreateAsymmetricKeyStatement createAsymmetricKeyStatement();
    public CreateCertificateStatement createCertificateStatement();
    public CreateContractStatement createContractStatement();
    public CreateCredentialStatement createCredentialStatement();
    public CreateEndpointStatement createEndpointStatement();
    public CreateEventNotificationStatement createEventNotificationStatement();
    public TSqlStatement createFulltextStatement();
    public CreateXmlIndexStatement createPrimaryXmlIndexStatement();
    public TSqlStatement createXmlStatements();
    public CreateLoginStatement createLoginStatement();
    public CreateMessageTypeStatement createMessageTypeStatement();
    public CreateMasterKeyStatement createMasterKeyStatement();
    public TSqlStatement createPartitionStatement();
    public CreateQueueStatement createQueueStatement();
    public CreateRemoteServiceBindingStatement createRemoteServiceBindingStatement();
    public CreateRoleStatement createRoleStatement();
    public CreateRouteStatement createRouteStatement();
    public CreateServiceStatement createServiceStatement();
    public CreateSymmetricKeyStatement createSymmetricKeyStatement();
    public CreateSynonymStatement createSynonymStatement();
    public CreateTypeStatement createTypeStatement();
    public CreateUserStatement createUserStatement();
    public ProcedureParameter aggregateParameter();
    public AssemblyName assemblyName();
    public Identifier identifierVariable();
    public void applicationRoleStatement(ApplicationRoleStatement vParent, bool defaultSchemaAndPasswordOnly);
    public Identifier identifier();
    public void authorizationOpt(IAuthorization vParent);
    public void expressionList(TSqlFragment vParent, IList`1<ScalarExpression> expressions);
    public PermissionSetAssemblyOption assemblyPermissionSetOption(IToken tPermissionSetVisibility);
    public void createAsymmetricKeyParams(CreateAsymmetricKeyStatement vParent);
    public Literal encryptClause();
    public EncryptionSource asymKeySource();
    public void asymKeySpec(CreateAsymmetricKeyStatement vParent);
    public FileEncryptionSource fileEncryptionSource();
    public AssemblyEncryptionSource assemblyEncryptionSource();
    public StringLiteral stringLiteral();
    public void createCertificateParams(CreateCertificateStatement vParent);
    public void createCertificateActivityFlag(CertificateStatementBase vParent);
    public void certificateSource(CreateCertificateStatement vParent);
    public CertificateOption certificateOption(CertificateOptionKinds encountered);
    public OptionState optionOnOff(TSqlFragment vParent);
    public void privateKeySpec(CertificateStatementBase vParent);
    public void certificatePrivateKeySpec(CertificateStatementBase vParent);
    public void passwordChangeOption(IPasswordChangeOption vParent);
    public ContractMessage contractMessage();
    public void credentialStatementBody(CredentialStatement vParent);
    public SqlCommandIdentifier sqlCommandIdentifier();
    public AlterDatabaseStatement alterDbAdd();
    public AlterDatabaseStatement alterDbRemove();
    public AlterDatabaseStatement alterDbModify();
    public AlterDatabaseSetStatement alterDbSet();
    public AlterDatabaseCollateStatement alterDbCollate();
    public AlterDatabaseRebuildLogStatement alterDbRebuild();
    public void collation(ICollationSetter vParent);
    public FileDeclaration fileDecl(bool isAlterDbModifyFileStatement);
    public AlterDatabaseAddFileStatement alterDbAddFile();
    public AlterDatabaseAddFileGroupStatement alterDbAddFilegroup();
    public void fileDeclBodyList(TSqlFragment vParent, IList`1<FileDeclaration> fileDeclarations);
    public Identifier toFilegroup();
    public AlterDatabaseModifyFileGroupStatement alterDbModifyFilegroup();
    public AlterDatabaseModifyFileStatement alterDbModifyFile();
    public AlterDatabaseTermination xactTermination();
    public AlterDatabaseSetStatement dbOptionStateList();
    public IntegerLiteral integer();
    public DatabaseOption dbOptionStateItem();
    public CursorDefaultDatabaseOption cursorDefaultDbOption();
    public RecoveryDatabaseOption recoveryDbOption();
    public PageVerifyDatabaseOption pageVerifyDbOption();
    public PartnerDatabaseOption partnerOption();
    public WitnessDatabaseOption witnessOption();
    public ParameterizationDatabaseOption parameterizationOption();
    public DatabaseOption dbSingleIdentOption();
    public OnOffDatabaseOption alterDbOnOffOption();
    public void recoveryUnitList(CreateDatabaseStatement vParent);
    public void collationOpt(ICollationSetter vParent);
    public void dbAddendums(CreateDatabaseStatement vParent);
    public void withTrustOptionsOnOff(CreateDatabaseStatement vParent);
    public void onDisk(CreateDatabaseStatement vParent);
    public FileGroupDefinition fileGroupDecl();
    public FileDeclaration fileDeclBody(bool isAlterDbModifyFileStatement);
    public FileDeclarationOption fileOption(bool newNameAllowed);
    public NameFileDeclarationOption nameFileOption();
    public FileNameFileDeclarationOption fileNameFileOption();
    public SizeFileDeclarationOption sizeFileOption();
    public MaxSizeFileDeclarationOption maxSizeFileOption();
    public FileGrowthFileDeclarationOption fileGrowthFileOption();
    public NameFileDeclarationOption newNameFileOption();
    public FileDeclarationOption offlineFileOption();
    public IdentifierOrValueExpression nonEmptyStringOrIdentifier();
    public StringLiteral nonEmptyString();
    public MemoryUnit memUnit();
    public DatabaseOption createDbOption();
    public DatabaseOption createDbServiceBrokerOption();
    public OnOffDatabaseOption createDbOnOffOption();
    public IToken backupStart();
    public BackupCertificateStatement backupCertificateStatement();
    public BackupServiceMasterKeyStatement backupServiceMasterKeyStatement();
    public BackupMasterKeyStatement backupMasterKeyStatement();
    public BackupStatement backupStatement();
    public BackupStatement backupMain();
    public void backupDevices(BackupStatement vParent);
    public void backupOptions(BackupStatement vParent);
    public IToken restoreStart();
    public RestoreServiceMasterKeyStatement restoreServiceMasterKeyStatement();
    public RestoreMasterKeyStatement restoreMasterKeyStatement();
    public RestoreStatement restoreStatement();
    public void restoreMain(RestoreStatement vParent);
    public void devList(TSqlFragment vParent, IList`1<DeviceInfo> deviceInfos);
    public void restoreOptions(RestoreStatement vParent);
    public BackupDatabaseStatement backupDatabase();
    public BackupTransactionLogStatement backupTransactionLog();
    public IdentifierOrValueExpression identifierOrVariable();
    public void backupFileListOpt(BackupDatabaseStatement vParent);
    public BackupRestoreFileInfo backupRestoreFile();
    public void restoreFileListOpt(RestoreStatement vParent);
    public ValueExpression stringOrVariable();
    public void backupRestoreFileNameList(BackupRestoreFileInfo vParent);
    public MirrorToClause mirrorTo();
    public DeviceInfo deviceInfo();
    public BackupOption backupOption();
    public ScalarExpression signedIntegerOrVariable();
    public void restoreOptionsList(RestoreStatement vParent);
    public RestoreOption restoreOption();
    public RestoreOption simpleRestoreOption();
    public ValueExpression afterClause();
    public ScalarExpression signedInteger();
    public MoveRestoreOption moveRestoreOption();
    public ScalarExpressionRestoreOption fileRestoreOption();
    public void backupMasterKeyBody(BackupRestoreMasterKeyStatementBase vParent);
    public void restoreMasterKeyBody(BackupRestoreMasterKeyStatementBase vParent);
    public IdentifierOrValueExpression bulkInsertFrom();
    public void bulkInsertOptions(BulkInsertStatement vParent);
    public IdentifierOrValueExpression stringOrIdentifier();
    public BulkInsertOption bulkInsertOption();
    public OrderBulkInsertOption bulkInsertSortOrderOption();
    public LiteralBulkInsertOption simpleBulkInsertOptionWithValue();
    public BulkInsertOption simpleBulkInsertOptionNoValue();
    public BulkInsertOption insertBulkOption();
    public BulkInsertOption simpleInsertBulkOption();
    public Literal integerOrNumeric();
    public void coldefList(InsertBulkStatement vParent);
    public void insertBulkOptions(InsertBulkStatement vParent);
    public InsertBulkColumnDefinition coldefItem();
    public ColumnDefinitionBase columnDefinitionEx();
    public bool nullNotNull(TSqlFragment vParent);
    public ColumnWithSortOrder columnWithSortOrder();
    public void dbccNamedLiteralList(DbccStatement vParent);
    public void dbccOptions(DbccStatement vParent);
    public void dbccOptionsList(DbccStatement vParent);
    public void dbccOptionsListItems(DbccStatement vParent);
    public void dbccOptionsJoin(DbccStatement vParent);
    public DbccOption dbccOption();
    public DbccOption dbccJoinOption();
    public DbccNamedLiteral dbccNamedLiteral();
    public void endpointOptions(AlterCreateEndpointStatementBase vParent);
    public void protocolInfo(AlterCreateEndpointStatementBase vParent);
    public void payloadInfo(AlterCreateEndpointStatementBase vParent);
    public void endpointOption(AlterCreateEndpointStatementBase vParent);
    public void endpointState(AlterCreateEndpointStatementBase vParent);
    public void endpointAffinity(AlterCreateEndpointStatementBase vParent);
    public EndpointProtocolOption protocolOptionsItem(EndpointProtocol protocol, EndpointProtocolOptions encountered);
    public ListenerIPEndpointProtocolOption listenerIpProtocolOption(EndpointProtocol protocol, EndpointProtocolOptions encountered);
    public LiteralEndpointProtocolOption listenerPortProtocolOption(EndpointProtocol protocol, EndpointProtocolOptions encountered);
    public LiteralEndpointProtocolOption pathProtocolOption(EndpointProtocol protocol, EndpointProtocolOptions encountered);
    public LiteralEndpointProtocolOption siteProtocolOption(EndpointProtocol protocol, EndpointProtocolOptions encountered);
    public LiteralEndpointProtocolOption clearPortProtocolOption(EndpointProtocol protocol, EndpointProtocolOptions encountered);
    public LiteralEndpointProtocolOption sslPortProtocolOption(EndpointProtocol protocol, EndpointProtocolOptions encountered);
    public AuthenticationEndpointProtocolOption authenticationProtocolOption(EndpointProtocol protocol, EndpointProtocolOptions encountered);
    public PortsEndpointProtocolOption portsProtocolOption(EndpointProtocol protocol, EndpointProtocolOptions encountered);
    public LiteralEndpointProtocolOption authenticationRealmProtocolOption(EndpointProtocol protocol, EndpointProtocolOptions encountered);
    public LiteralEndpointProtocolOption defaultLogonDomainProtocolOption(EndpointProtocol protocol, EndpointProtocolOptions encountered);
    public CompressionEndpointProtocolOption compressionProtocolOption(EndpointProtocol protocol, EndpointProtocolOptions encountered);
    public void ipV4DotNumberTail(IPv4 vParent);
    public void ipV4DotLastTwoPartsTail(IPv4 vParent);
    public void ipV4NumericOrNumericIntegerTail(IPv4 vParent);
    public PayloadOption payloadOption(EndpointType type, PayloadOptionKinds encountered);
    public SoapMethod soapMethod(EndpointType type, PayloadOptionKinds encountered);
    public EnabledDisabledPayloadOption batchesPayloadOption(EndpointType type, PayloadOptionKinds encountered);
    public WsdlPayloadOption wsdlPayloadOption(EndpointType type, PayloadOptionKinds encountered);
    public EnabledDisabledPayloadOption sessionsPayloadOption(EndpointType type, PayloadOptionKinds encountered);
    public LoginTypePayloadOption loginTypePayloadOption(EndpointType type, PayloadOptionKinds encountered);
    public SessionTimeoutPayloadOption sessionTimeoutPayloadOption(EndpointType type, PayloadOptionKinds encountered);
    public LiteralPayloadOption databasePayloadOption(EndpointType type, PayloadOptionKinds encountered);
    public LiteralPayloadOption namespacePayloadOption(EndpointType type, PayloadOptionKinds encountered);
    public SchemaPayloadOption schemaPayloadOption(EndpointType type, PayloadOptionKinds encountered);
    public CharacterSetPayloadOption characterSetPayloadOption(EndpointType type, PayloadOptionKinds encountered);
    public LiteralPayloadOption headerLimitPayloadOption(EndpointType type, PayloadOptionKinds encountered);
    public AuthenticationPayloadOption authenticationPayloadOption(EndpointType type, PayloadOptionKinds encountered);
    public EncryptionPayloadOption encryptionPayloadOption(EndpointType type, PayloadOptionKinds encountered);
    public EnabledDisabledPayloadOption messageForwardingPayloadOption(EndpointType type, PayloadOptionKinds encountered);
    public LiteralPayloadOption messageForwardSizePayloadOption(EndpointType type, PayloadOptionKinds encountered);
    public RolePayloadOption rolePayloadOption(EndpointType type, PayloadOptionKinds encountered);
    public void enabledDisabled(EnabledDisabledPayloadOption vParent);
    public DefaultLiteral defaultLiteral();
    public void soapMethodAlias(SoapMethod vParent);
    public void soapMethodOption(SoapMethod vParent);
    public EventNotificationObjectScope eventNotificationObjectScope();
    public EventTypeGroupContainer eventTypeGroupContainer();
    public CreateFullTextCatalogStatement createFulltextCatalogStatement();
    public CreateFullTextIndexStatement createFulltextIndexStatement();
    public OnOffFullTextCatalogOption accentSensitivity();
    public FullTextIndexColumn fulltextIndexColumn();
    public IdentifierOrValueExpression languageTerm();
    public FullTextCatalogAndFileGroup fullTextCatalogAndFileGroup();
    public ChangeTrackingFullTextIndexOption fulltextChangeTrackingOption();
    public CreateXmlIndexStatement createXmlIndexStatement(bool vPrimary);
    public CreateXmlSchemaCollectionStatement createXmlSchemaCollectionStatement();
    public SchemaObjectName schemaObjectNonEmptyTwoPartName();
    public void indexOptionList(IndexAffectingStatement statement, IList`1<IndexOption> optionsList, TSqlFragment vParent);
    public PasswordCreateLoginSource passwordLoginSource();
    public WindowsCreateLoginSource windowsLoginSource();
    public CertificateCreateLoginSource certificateLoginSource();
    public AsymmetricKeyCreateLoginSource asymmetricKeyLoginSource();
    public Literal loginPassword();
    public void createLoginPasswordOption(PasswordCreateLoginSource vParent);
    public PrincipalOption createLoginParam();
    public BinaryLiteral binary();
    public OnOffPrincipalOption onOffPrincipalOption(IToken tOption);
    public IdentifierPrincipalOption createLoginParamWin();
    public Identifier createLoginParamCertOpt();
    public void messageTypeValidation(MessageTypeStatementBase vParent);
    public CreatePartitionFunctionStatement createPartitionFunction();
    public CreatePartitionSchemeStatement createPartitionScheme();
    public PartitionParameterType partitionParameterType();
    public void partitionFunctionTypes(CreatePartitionFunctionStatement vParent);
    public void partitionFunctionRange(CreatePartitionFunctionStatement vParent);
    public void queueOptionList(QueueStatement vParent, bool vDropAccepted);
    public UserRemoteServiceBindingOption bindingUserOption();
    public OnOffRemoteServiceBindingOption bindingAnonymousOption();
    public void routeOptionList(RouteStatement vParent);
    public void onQueueClause(AlterCreateServiceStatementBase vParent);
    public ServiceContract serviceContract();
    public AlterServiceStatement alterServiceStatement();
    public void addDropServiceContractList(AlterServiceStatement vParent);
    public ServiceContract addDropServiceContract();
    public void keySpecList(CreateSymmetricKeyStatement vParent);
    public void encryptorListWithNoPassword(SymmetricKeyStatement vParent);
    public KeyOption keySpec(Boolean& keySourceSpecified, Boolean& algorithmSpecified, Boolean& identityValueSpecified);
    public KeySourceKeyOption keySourceKeySpec(Boolean& keySourceSpecified);
    public AlgorithmKeyOption algorithmKeySpec(Boolean& algorithmSpecified);
    public IdentityValueKeyOption identityValueKeySpec(Boolean& identityValueSpecified);
    public CryptoMechanism cryptoWithNoPasswordOrJustPassword();
    public CryptoMechanism certificateCrypto();
    public CryptoMechanism keyCrypto();
    public CryptoMechanism passwordCrypto();
    public AlterSymmetricKeyStatement alterSymmetricKeyStatement();
    public CreateTypeUddtStatement createTypeUddtStatement();
    public CreateTypeUdtStatement createTypeUdtStatement();
    public NullableConstraintDefinition nullableConstraint();
    public UserLoginOption userLoginOption();
    public void createUserDefaultSchemaOpt(CreateUserStatement vParent);
    public AlterApplicationRoleStatement alterApplicationRoleStatement();
    public AlterAssemblyStatement alterAssemblyStatement();
    public AlterAsymmetricKeyStatement alterAsymmetricKeyStatement();
    public AlterAuthorizationStatement alterAuthorizationStatement();
    public AlterRemoteServiceBindingStatement alterRemoteServiceBindingStatement();
    public AlterCertificateStatement alterCertificateStatement();
    public AlterCredentialStatement alterCredentialStatement();
    public AlterEndpointStatement alterEndpointStatement();
    public TSqlStatement alterFulltextStatement();
    public AlterIndexStatement alterIndexStatement();
    public AlterLoginStatement alterLoginStatement();
    public AlterMasterKeyStatement alterMasterKeyStatement();
    public AlterMessageTypeStatement alterMessageTypeStatement();
    public TSqlStatement alterPartitionStatement();
    public AlterQueueStatement alterQueueStatement();
    public AlterRoleStatement alterRoleStatement();
    public AlterRouteStatement alterRouteStatement();
    public AlterSchemaStatement alterSchemaStatement();
    public TSqlStatement alterServiceStatements();
    public AlterUserStatement alterUserStatement();
    public AlterXmlSchemaCollectionStatement alterXmlSchemaCollectionStatement();
    public ApplicationRoleOption applicationRoleOption(bool defaultSchemaAndPasswordOnly);
    public ScalarExpression alterAssemblyFromClause();
    public void alterAssemblyWith(AlterAssemblyStatement vParent);
    public void alterAssemblyDropFile(AlterAssemblyStatement vParent);
    public void alterAssemblyAddFile(AlterAssemblyStatement vParent);
    public AssemblyOption alterAssemblyWithItem();
    public AssemblyOption assemblyPermissionSetOrVisibilityOption();
    public AssemblyOption assemblyUncheckedDataOption();
    public OnOffAssemblyOption assemblyVisibilityOption(IToken tPermissionSetVisibility);
    public AddFileSpec alterAssemblyAddFileSpec();
    public AlterFullTextCatalogStatement alterFulltextCatalogStatement();
    public AlterFullTextIndexStatement alterFulltextIndexStatement();
    public AlterFullTextIndexAction alterFulltextIndexAction();
    public SimpleAlterFullTextIndexAction enableDisableAlterFulltextIndexAction();
    public SimpleAlterFullTextIndexAction setChangeTrackingAlterFulltextIndexAction();
    public AddAlterFullTextIndexAction addAlterFulltextIndexAction();
    public DropAlterFullTextIndexAction dropAlterFulltextIndexAction();
    public SimpleAlterFullTextIndexAction startPopulationAlterFulltextIndexAction();
    public SimpleAlterFullTextIndexAction otherPopulationAlterFulltextIndexAction();
    public bool populationOption(TSqlFragment vParent);
    public PartitionSpecifier partitionSpecifier();
    public AlterLoginEnableDisableStatement alterLoginEnableDisable(Identifier vName);
    public AlterLoginOptionsStatement alterLoginOptions(Identifier vName);
    public PrincipalOption alterLoginParam();
    public PasswordAlterPrincipalOption passwordAlterLoginOption();
    public AlterPartitionFunctionStatement alterPartitionFunctionStatement();
    public AlterPartitionSchemeStatement alterPartitionSchemeStatement();
    public ExecuteAsClause executeAsClause(bool vCallerProhibited, bool vOwnerProhibited);
    public void queueOption(QueueStatement vParent, bool vDropAccepted);
    public QueueStateOption stateQueueOption();
    public void queueActivationOption(QueueStatement vParent, bool vDropAccepted);
    public QueueOption activationQueueOptionArgument(bool vDropAccepted, Boolean& procedureName, Boolean& maxQueueReaders, Boolean& executeAs);
    public QueueStateOption statusQueueOptionArgument(IToken vStartToken);
    public QueueProcedureOption procedureNameQueueOptionArgument(IToken vStartToken);
    public QueueValueOption maxQueueReadersQueueOptionArgument(IToken vStartToken);
    public QueueOption dropQueueOptionArgument(bool vDropAccepted);
    public QueueExecuteAsOption executeAsQueueOptionArgument();
    public RenameAlterRoleAction renameAlterRoleAction();
    public RouteOption routeOption();
    public SchemaObjectName schemaObjectTwoPartName();
    public AlterServiceMasterKeyStatement alterServiceMasterKeyStatement();
    public IdentifierPrincipalOption userOption();
    public void authorization(IAuthorization vParent);
    public StatementList createSchemaElementList();
    public TSqlStatement createSchemaElement();
    public void functionStatementBody(FunctionStatementBody vResult, Boolean& vParseErrorOccurred);
    public void functionParameterList(FunctionStatementBody vResult);
    public void functionReturnTypeAndBody(FunctionStatementBody vParent, Boolean& vParseErrorOccurred);
    public ProcedureParameter functionParameter();
    public void scalarProcedureParameter(ProcedureParameter vParent, bool outputAllowed);
    public void functionAttributes(FunctionStatementBody vParent);
    public BeginEndBlockStatement beginEndBlockStatement();
    public MethodSpecifier methodSpecifier();
    public void functionAttributesNoExecuteAs(FunctionStatementBody vParent);
    public DeclareTableVariableBody declareTableBody(IndexAffectingStatement statementType);
    public DeclareTableVariableBody declareTableBodyMain(IndexAffectingStatement statementType);
    public SelectStatement subqueryExpressionWithOptionalCTE();
    public QueryExpression subqueryExpression();
    public FunctionOption functionAttribute();
    public FunctionOption functionAttributeNoExecuteAs();
    public ExecuteAsFunctionOption functionExecuteAsOption();
    public void identifierColumnList(TSqlFragment vParent, IList`1<ColumnReferenceExpression> columns);
    public StatisticsOption createStatisticsStatementWithOption(Boolean& isConflictingOption);
    public LiteralStatisticsOption sampleStatisticsOption(Boolean& isConflictingOption);
    public LiteralStatisticsOption statsStreamStatisticsOption();
    public StatisticsOption simpleStatisticsOption(Boolean& isConflictingOption);
    public void columnNameList(TSqlFragment vParent, IList`1<Identifier> columnNames);
    public StatisticsOption updateStatisticsStatementWithOption(Boolean& isConflictingOption);
    public LiteralStatisticsOption updateStatisticsLiteralOption();
    public StatisticsOption updateStatisticsSimpleOption(Boolean& isConflictingOption);
    public KillStatement killStatement();
    public KillQueryNotificationSubscriptionStatement killQueryNotificationSubscriptionStatement();
    public KillStatsJobStatement killStatsJobStatement();
    public Permission permission();
    public Identifier securityStatementPermission();
    public void securityTargetObjectCommon(SecurityTargetObject vParent);
    public MultiPartIdentifier multiPartIdentifier(int vMaxNumber);
    public SecurityTargetObject securityTargetObject(bool vColumnsDisallowed);
    public SecurityTargetObject authorizationTargetObject();
    public SecurityPrincipal principal();
    public void permissionsList(SecurityStatement vParent, Boolean& vContainsColumnList);
    public void securityStatementTargetObjectOpt(SecurityStatement vParent, bool vPermissionContainsColumns);
    public void securityStatementPrincipalList(SecurityStatement vParent);
    public void securityStatementAsClauseOpt(SecurityStatement vParent);
    public WaitForSupportedStatement waitforInnerStatement();
    public ColumnReferenceExpression column();
    public ValueExpression binaryOrVariable();
    public ValueExpression integerOrVariable();
    public void modificationTextStatement(TextModificationStatement vParent);
    public ScalarExpression signedIntegerOrVariableOrNull();
    public void modificationTextStatementWithLog(TextModificationStatement vParent);
    public ValueExpression writeString();
    public NullLiteral nullLiteral();
    public VariableReference variable();
    public OpenMasterKeyStatement openMasterKeyStatement();
    public OpenSymmetricKeyStatement openSymmetricKeyStatement();
    public OpenCursorStatement openCursorStatement();
    public CryptoMechanism decryptionMechanism();
    public void decryptionMechanismPassword(CryptoMechanism vParent);
    public CursorId cursorId();
    public CloseMasterKeyStatement closeMasterKeyStatement();
    public CloseSymmetricKeyStatement closeSymmetricKeyStatement();
    public CloseCursorStatement closeCursorStatement();
    public FetchCursorStatement rowSelector();
    public FetchType fetchType();
    public DropDatabaseStatement dropDatabaseStatement();
    public DropIndexStatement dropIndexStatement();
    public DropStatisticsStatement dropStatisticsStatement();
    public DropTableStatement dropTableStatement();
    public DropProcedureStatement dropProcedureStatement();
    public DropFunctionStatement dropFunctionStatement();
    public DropViewStatement dropViewStatement();
    public DropDefaultStatement dropDefaultStatement();
    public DropRuleStatement dropRuleStatement();
    public DropTriggerStatement dropTriggerStatement();
    public DropSchemaStatement dropSchemaStatement();
    public DropAggregateStatement dropAggregateStatement();
    public DropAssemblyStatement dropAssemblyStatement();
    public TSqlStatement dropPartitionStatements();
    public DropSynonymStatement dropSynonymStatement();
    public DropApplicationRoleStatement dropApplicationRoleStatement();
    public TSqlStatement dropFulltextStatements();
    public DropLoginStatement dropLoginStatement();
    public DropRoleStatement dropRoleStatement();
    public DropMasterKeyStatement dropMasterKeyStatement();
    public DropSymmetricKeyStatement dropSymmetricKeyStatement();
    public DropAsymmetricKeyStatement dropAsymmetricKeyStatement();
    public DropCertificateStatement dropCertificateStatement();
    public DropCredentialStatement dropCredentialStatement();
    public DropTypeStatement dropTypeStatement();
    public DropXmlSchemaCollectionStatement dropXmlSchemaCollectionStatement();
    public DropContractStatement dropContractStatement();
    public DropQueueStatement dropQueueStatement();
    public DropServiceStatement dropServiceStatement();
    public DropRouteStatement dropRouteStatement();
    public DropMessageTypeStatement dropMessageTypeStatement();
    public DropRemoteServiceBindingStatement dropRemoteServiceBindingStatement();
    public DropEndpointStatement dropEndpointStatement();
    public DropSignatureStatement dropSignatureStatement();
    public DropEventNotificationStatement dropEventNotificationStatement();
    public DropUserStatement dropUserStatement();
    public DropIndexClauseBase dropIndexClause();
    public BackwardsCompatibleDropIndexClause indexDropObject();
    public DropIndexClause indexDropObjectNewNameFormat();
    public void dropClusteredIndexOptions(DropIndexClause vParent);
    public void dropClusteredIndexOption(DropIndexClause vParent, Int32& encounteredOptions);
    public IndexExpressionOption maxDopOption();
    public IndexStateOption onlineIndexOption();
    public MoveToDropIndexOption dropIndexMoveToOption();
    public FileGroupOrPartitionScheme filegroupOrPartitionScheme();
    public ChildObjectName statisticsDropObject();
    public List`1<Identifier> identifierList(int vMaxNumber);
    public void dropObjectList(DropObjectsStatement vParent, bool onlyTwoPartNames);
    public TriggerScope triggerScope(TSqlFragment vParent);
    public SchemaObjectName dropObject(bool onlyTwoPartNames);
    public DropPartitionFunctionStatement dropPartitionFunctionStatement();
    public DropPartitionSchemeStatement dropPartitionSchemeStatement();
    public DropFullTextCatalogStatement dropFulltextCatalogStatement();
    public DropFullTextIndexStatement dropFulltextIndexStatement();
    public void signatureType(SignatureStatementBase vParent);
    public void signableElement(SignatureStatementBase vParent);
    public void cryptoListWithOptionalPasswordSignature(SignatureStatementBase vParent);
    public CryptoMechanism cryptoWithOptionalPasswordSignature();
    public Literal withSignatureOrPasswordOpt();
    public Identifier nonQuotedIdentifier();
    public BeginTransactionStatement beginTransactionStatement();
    public TryCatchStatement tryCatchStatement();
    public BeginConversationTimerStatement beginConversationTimerStatement();
    public BeginDialogStatement beginDialogStatement();
    public void transactionName(TransactionStatement vParent);
    public Identifier weirdTransactionName();
    public void tranIdentifier(StringBuilder vStringBuilder, TSqlFragment vParent);
    public StatementList tryStatementList(Boolean& vParseErrorOccurred);
    public StatementList catchStatementList(Boolean& vParseErrorOccurred);
    public DeclareVariableElement declareVariableElement();
    public SqlDataTypeReference cursorDataType();
    public DeclareVariableStatement declareVariableStatement();
    public DeclareCursorStatement declareCursorStatement();
    public PredicateSetStatement predicateSetStatement();
    public SetVariableStatement setVariableStatement();
    public SetStatisticsStatement setStatisticsStatement();
    public SetRowCountStatement setRowcountStatement();
    public SetOffsetsStatement setOffsetsStatement();
    public SetCommandStatement setCommandStatement();
    public SetTransactionIsolationLevelStatement setTransactionIsolationLevelStatement();
    public SetTextSizeStatement setTextSizeStatement();
    public SetIdentityInsertStatement setIdentityInsertStatement();
    public SetErrorLevelStatement setErrorLevelStatement();
    public void parenthesizedOptExpressionWithDefaultList(TSqlFragment vParent, IList`1<ScalarExpression> expressions);
    public CursorDefinition cursorDefinition();
    public void setOnOff(SetOnOffStatement vParent);
    public SetOffsets offsetItem();
    public SetCommand setCommand();
    public SetFipsFlaggerCommand fipsFlaggerLevel();
    public TableDefinition tableDefinition(IndexAffectingStatement statementType, AlterTableAddTableElementStatement vStatement);
    public void tableElement(IndexAffectingStatement statementType, TableDefinition vParent, AlterTableAddTableElementStatement vStatement);
    public void cursorOpts(bool oldSyntax, IList`1<CursorOption> vOptions);
    public CursorDefinition cursorDefinitionOptions(IList`1<CursorOption> vOptions);
    public SelectStatement selectStatement();
    public CursorOption cursorOption();
    public void indexLegacyOptionList(CreateIndexStatement vParent);
    public IndexOption indexLegacyOption();
    public IndexExpressionOption fillFactorOption();
    public IndexOption indexOption();
    public IndexStateOption indexStateOption();
    public XmlNamespaces xmlNamespaces();
    public CommonTableExpression commonTableExpression();
    public XmlNamespacesElement xmlNamespacesElement();
    public XmlNamespacesDefaultElement xmlNamespacesDefaultElement();
    public XmlNamespacesAliasElement xmlNamespacesAliasElement();
    public QueryExpression queryExpression(SelectStatement vSelectStatement);
    public OrderByClause orderByClause();
    public ComputeClause computeClause();
    public ForClause forClause();
    public void optimizerHints(TSqlFragment vParent, IList`1<OptimizerHint> hintsCollection);
    public QueryDerivedTable derivedTable();
    public void simpleTableReferenceAlias(TableReferenceWithAlias vParent);
    public ScalarSubquery subquery(ExpressionFlags expressionFlags);
    public QueryExpression subqueryExpressionUnit();
    public QuerySpecification subquerySpecification();
    public QueryParenthesisExpression subqueryParenthesis();
    public QueryExpression queryExpressionUnit(SelectStatement vSelectStatement);
    public QuerySpecification querySpecification(SelectStatement vSelectStatement);
    public QueryParenthesisExpression queryParenthesis(SelectStatement vSelectStatement);
    public void uniqueRowFilterOpt(QuerySpecification vParent);
    public TopRowFilter topRowFilter();
    public SelectElement selectColumnOrStarExpression();
    public FromClause fromClauseOpt();
    public WhereClause whereClause();
    public GroupByClause groupByClause();
    public HavingClause havingClause();
    public BrowseForClause browseForClause();
    public XmlForClause xmlForClause();
    public void selectExpression(QuerySpecification vParent);
    public UniqueRowFilter uniqueRowFilter(IToken& token);
    public Literal integerOrRealOrNumeric();
    public PrimaryExpression paranthesisDisambiguatorForExpressions(ExpressionFlags expressionFlags);
    public TopRowFilter topRowFilterForInsertUpdateDelete();
    public SelectSetVariable selectSetVariable();
    public SelectStarExpression selectStarExpression();
    public SelectScalarExpression selectColumn();
    public SelectElement outputClauseSelectElement();
    public SelectScalarExpression outputClauseSelectColumn();
    public ColumnReferenceExpression starColumn();
    public ScalarExpression selectColumnExpression();
    public IdentityFunctionCall identityFunction();
    public ScalarExpression seedIncrement();
    public TableSampleClause tableSampleClause();
    public FromClause fromClause();
    public TableReference selectTableReferenceWithOdbc();
    public TableReference selectTableReference();
    public OdbcQualifiedJoinTableReference odbcQualifiedJoin();
    public TableReference selectTableReferenceElement();
    public void selectTableReferenceAdditionalElement(TableReference& vResult);
    public void odbcInitiator();
    public OdbcConvertSpecification odbcConvertSpecification();
    public ExtractFromExpression extractFromExpression();
    public OdbcFunctionCall odbcFunctionCall();
    public TableReference joinTableReference();
    public JoinParenthesisTableReference joinParenthesis();
    public void joinElement(TableReference& vResult);
    public TableReference selectTableReferenceElementWithOutJoinParenthesis();
    public void pivotedTableReference(TableReference& vResult);
    public void unpivotedTableReference(TableReference& vResult);
    public ColumnReferenceExpression fixedColumn();
    public void columnListWithParenthesis(TSqlFragment vParent, IList`1<ColumnReferenceExpression> columns);
    public void unqualifiedJoin(TableReference& vResult);
    public void qualifiedJoin(TableReference& vResult);
    public TableReference schemaObjectOrFunctionTableReference();
    public BuiltInFunctionTableReference builtInFunctionTableReference();
    public VariableTableReference variableTableReference();
    public VariableMethodCallTableReference variableMethodCallTableReference();
    public TableReferenceWithAlias openRowset();
    public FullTextTableReference fulltextTableReference();
    public OpenXmlTableReference openXmlTableReference();
    public void joinHint(QualifiedJoin vParent);
    public ScalarExpression expressionWithDefault();
    public void simpleTableReferenceAliasOpt(TableReferenceWithAlias vParent);
    public RaiseErrorStatement raiseErrorStatement();
    public RaiseErrorLegacyStatement raiseErrorLegacyStatement();
    public ScalarExpression signedIntegerOrStringOrVariable();
    public ScalarExpression possibleNegativeConstant();
    public void outputIntoOutputClause(DataModificationSpecification vParent);
    public OutputIntoClause outputIntoClause(IToken tOutput, IList`1<SelectElement> vSelectElements);
    public OutputClause outputClause();
    public VariableTableReference variableDmlTarget();
    public NamedTableReference intoSchemaObjectTable();
    public DeleteSpecification deleteSpecification();
    public TableReference dmlTarget();
    public WhereClause dmlWhereClause();
    public InsertSpecification insertSpecification();
    public ColumnReferenceExpression insertColumn();
    public ValuesInsertSource valuesInsertSource();
    public ExecuteInsertSource executeInsertSource();
    public SelectInsertSource selectInsertSource();
    public UpdateSpecification updateSpecification();
    public void setClausesList(TSqlFragment vParent, IList`1<SetClause> setClauses);
    public SetClause setClause();
    public AssignmentSetClause setClauseStartingWithVariable();
    public AssignmentSetClause setClauseColumnAssignment(MultiPartIdentifier vMultiPartIdentifier);
    public FunctionCallSetClause setClauseFunctionCall(MultiPartIdentifier vMultiPartIdentifier);
    public ExecuteSpecification executeSpecification();
    public RowValue rowValueExpressionWithDefault();
    public void expressionWithDefaultList(TSqlFragment vParent, IList`1<ScalarExpression> expressions);
    public TableReferenceWithAlias schemaObjectDmlTarget();
    public ScalarExpression possibleNegativeConstantWithDefault();
    public SchemaObjectFunctionTableReference schemaObjectFunctionDmlTarget();
    public NamedTableReference schemaObjectTableDmlTarget();
    public void tableHints(TSqlFragment vParent, IList`1<TableHint> hints, bool indexHintAllowed);
    public NamedTableReference schemaObjectTableReference(SchemaObjectName vSchemaObjectName);
    public SchemaObjectFunctionTableReference schemaObjectFunctionTableReference(SchemaObjectName vSchemaObjectName);
    public void singleOldStyleTableHint(TSqlFragment vParent, IList`1<TableHint> hints);
    public void nonParameterTableHints(TSqlFragment vParent, IList`1<TableHint> hints);
    public IndexTableHint oldForceIndex();
    public void fullTextTable(FullTextTableReference vParent);
    public void fulltextTableColumnList(FullTextTableReference vParent);
    public void fulltextTableOptions(FullTextTableReference vParent);
    public ColumnReferenceExpression identifierColumnReferenceExpression();
    public ColumnReferenceExpression starColumnReferenceExpression();
    public ValueExpression languageExpression();
    public ValueExpression unsignedInteger();
    public ValueExpression binaryOrIntegerOrStringOrVariable();
    public OpenXmlTableReference openXmlParams();
    public void openXmlWithClauseOpt(OpenXmlTableReference vParent);
    public void openXmlSchemaItemList(OpenXmlTableReference vParent);
    public SchemaDeclarationItem openXmlSchemaItem();
    public ColumnDefinitionBase columnDefinitionBasic();
    public TableReferenceWithAlias openRowsetRowset();
    public OpenQueryTableReference openQueryRowset();
    public AdHocTableReference adhocRowset();
    public OpenRowsetTableReference openRowsetParams();
    public InternalOpenRowset internalOpenRowsetArgs();
    public BulkOpenRowset openRowsetBulk();
    public BulkInsertOption openRowsetBulkHint();
    public BulkInsertOption openRowsetBulkHintNoValue();
    public AdHocDataSource adhocDataSource();
    public SchemaObjectNameOrValueExpression objectOrString();
    public void simpleTableHints(TSqlFragment vParent, IList`1<TableHint> hints);
    public TableHint tableHint(bool indexHintAllowed);
    public TableHint simpleTableHint();
    public IndexTableHint indexTableHint(bool indexHintAllowed);
    public IdentifierOrValueExpression identifierOrInteger();
    public WhereClause whereCurrentOfCursorClause();
    public ExpressionGroupingSpecification simpleGroupByItem();
    public ExpressionWithSortOrder expressionWithSortOrder();
    public ComputeFunction computeFunction();
    public SortOrder orderByOption(TSqlFragment vParent);
    public UpdateForClause updateForClause();
    public XmlForClauseOption xmlForClauseMode();
    public XmlForClauseOption xmlParam(XmlForClauseOptions encountered);
    public OptimizerHint hint();
    public LiteralOptimizerHint literalOptimizerHint();
    public OptimizerHint simpleOptimizerHint();
    public LiteralOptimizerHint usePlanOptimizerHint();
    public OptimizeForOptimizerHint optimizeForOptimizerHint();
    public VariableValuePair variableValuePair();
    public ValueExpression literal();
    public void viewStatementBody(ViewStatementBody vResult);
    public ViewOption viewOption();
    public TriggerOption triggerOption(bool vOwnerProhibited);
    public void procedureOptions(ProcedureStatementBody vParent);
    public ProcedureOption procedureOption();
    public void procedureStatementBody(ProcedureStatementBody vResult, Boolean& vParseErrorOccurred);
    public ProcedureReference procedureReference();
    public void procedureParameterListOptionalParen(ProcedureStatementBodyBase vResult);
    public void procedureParameterList(ProcedureStatementBodyBase vResult);
    public ProcedureParameter procedureParameter();
    public void cursorProcedureParameter(ProcedureParameter vParent);
    public IdentifierLiteral identifierLiteral();
    public UnaryExpression negativeConstant();
    public Literal subroutineParameterLiteral();
    public void triggerStatementBody(TriggerStatementBody vResult, Boolean& vParseErrorOccurred);
    public void ddlTriggerMidSection(TriggerStatementBody vParent);
    public void dmlTriggerMidSection(TriggerStatementBody vParent);
    public TriggerAction dmlTriggerAction();
    public TriggerAction ddlTriggerAction();
    public void endConversationArgumentsOpt(EndConversationStatement vParent);
    public SelectElement receiveSelectExpression();
    public SelectScalarExpression receiveColumnSelectExpression();
    public DialogOption beginConversationArgument(Int32& encounteredOptions);
    public ScalarExpressionDialogOption scalarExpressionBeginDialogConversationArgument(IToken tOption, Int32& encounteredOptions);
    public OnOffDialogOption onOffBeginDialogConversationArgument(IToken tOption, Int32& encounteredOptions);
    public void execStart(TSqlFragment vParent);
    public ExecuteContext executeAsStatementContext();
    public void executeContextStatementOptionsOpt(ExecuteAsStatement vParent);
    public ExecuteOption executeOption();
    public void execTypes(ExecuteSpecification vParent);
    public ExecutableEntity execStrTypes();
    public ExecuteContext execStrExecCtxt();
    public Identifier linkedServer();
    public ExecutableProcedureReference execProcEx();
    public ExecuteContext execCtxtStmt();
    public void execCtxtStmtType(ExecuteContext vParent);
    public Literal execCtxtStmtPrincipal();
    public ExecutableStringList execSqlList();
    public void setParamList(ExecutableEntity vParent);
    public ExecutableProcedureReference adhocDataSourceExecproc();
    public ProcedureReferenceName procObjectReference();
    public ProcedureReferenceName varObjectReference();
    public Literal procNumOpt();
    public ValueExpression stringOrGlobalVariableOrVariable();
    public RealLiteral real();
    public NumericLiteral numeric();
    public ExecuteParameter setParam(Boolean& nameEqualsValueWasUsed, Int32& parameterNumber);
    public TableDefinition tableDefinitionCreateTable();
    public AlterTableAlterColumnStatement alterTableAlterColumnStatement();
    public AlterTableTriggerModificationStatement alterTableTriggerModificationStatement();
    public AlterTableDropTableElementStatement alterTableDropTableElementStatement();
    public AlterTableSwitchStatement alterTableSwitchStatement();
    public ConstraintEnforcement constraintEnforcement();
    public AlterTableAddTableElementStatement alterTableAddTableElementStatement(ConstraintEnforcement vExistingRowsCheck);
    public AlterTableConstraintModificationStatement alterTableConstraintModificationStatement(ConstraintEnforcement vExistingRowsCheck);
    public AlterTableDropTableElement alterTableDropTableElement();
    public void alterTableDropTableElementWithOptions(AlterTableDropTableElement vParent);
    public DropClusteredConstraintOption dropClusteredConstraintOption();
    public ColumnDefinition columnDefinition(IndexAffectingStatement statementType, AlterTableAddTableElementStatement vStatement);
    public ConstraintDefinition tableConstraint(IndexAffectingStatement statementType, AlterTableAddTableElementStatement vStatement);
    public void computedColumnBody(ColumnDefinition vParent);
    public void computedColumnConstraintListOpt(IndexAffectingStatement statementType, ColumnDefinition vResult);
    public void regularColumnBody(ColumnDefinition vParent);
    public void columnConstraintListOpt(IndexAffectingStatement statementType, ColumnDefinition vResult);
    public ScalarExpression expressionWithFlags(ExpressionFlags expressionFlags);
    public ConstraintDefinition columnConstraint(IndexAffectingStatement statementType);
    public void rowguidcolConstraint(ColumnDefinition vParent);
    public IdentityOptions identityConstraint(IndexAffectingStatement statementType);
    public bool replicationClauseOpt(IndexAffectingStatement statementType, TSqlFragment vParent);
    public DefaultConstraintDefinition defaultColumnConstraint(IndexAffectingStatement statementType);
    public UniqueConstraintDefinition uniqueColumnConstraint(IndexAffectingStatement statementType);
    public ForeignKeyConstraintDefinition foreignKeyColumnConstraint(IndexAffectingStatement statementType);
    public CheckConstraintDefinition checkConstraint(IndexAffectingStatement statementType);
    public UniqueConstraintDefinition uniqueTableConstraint(IndexAffectingStatement statementType);
    public DefaultConstraintDefinition defaultTableConstraint(IndexAffectingStatement statementType);
    public ForeignKeyConstraintDefinition foreignKeyTableConstraint(IndexAffectingStatement statementType);
    public void uniqueConstraintHeader(UniqueConstraintDefinition vParent, bool throwInPhaseOne);
    public void uniqueConstraintTailOpt(IndexAffectingStatement statementType, UniqueConstraintDefinition vParent);
    public void uniqueConstraintIndexOptionsOpt(IndexAffectingStatement statement, UniqueConstraintDefinition vParent);
    public void sortedDataOptions();
    public DeleteUpdateAction deleteUpdateAction(TSqlFragment vParent);
    public void foreignKeyConstraintCommonEnd(IndexAffectingStatement statementType, ForeignKeyConstraintDefinition vParent);
    public void foreignConstraintColumnsOpt(ForeignKeyConstraintDefinition vParent);
    public BooleanExpression booleanExpressionWithFlags(ExpressionFlags expressionFlags);
    public XmlDataTypeReference xmlDataType(SchemaObjectName vName);
    public SchemaObjectName dataTypeSchemaObjectName();
    public SqlDataTypeReference sqlDataTypeWithoutNational(SchemaObjectName vName, SqlDataTypeOption vType);
    public UserDataTypeReference userDataType(SchemaObjectName vName);
    public SqlDataTypeReference doubleDataType();
    public SqlDataTypeReference sqlDataTypeWithNational();
    public void dataTypeParametersOpt(ParameterizedDataTypeReference vParent);
    public MaxLiteral max();
    public void identifierListElement(List`1<Identifier> vParent, int vMaxNumber, bool first);
    public BooleanExpression booleanExpressionOr(ExpressionFlags expressionFlags);
    public BooleanExpression booleanExpressionAnd(ExpressionFlags expressionFlags);
    public BooleanExpression booleanExpressionUnary(ExpressionFlags expressionFlags);
    public BooleanExpression booleanExpressionPrimary(ExpressionFlags expressionFlags);
    public BooleanParenthesisExpression booleanExpressionParenthesis();
    public BooleanComparisonType comparisonOperator();
    public BooleanComparisonExpression comparisonPredicate(ScalarExpression vExpressionFirst, BooleanComparisonType vType, ExpressionFlags expressionFlags);
    public SubqueryComparisonPredicate subqueryComparisonPredicate(ScalarExpression vExpressionFirst, BooleanComparisonType vType, ExpressionFlags expressionFlags);
    public BooleanComparisonExpression joinPredicate(ScalarExpression vExpressionFirst, BooleanComparisonType vType, ExpressionFlags expressionFlags);
    public BooleanIsNullExpression isPredicate(ScalarExpression vExpressionFirst);
    public InPredicate inPredicate(ScalarExpression vExpressionFirst, bool vNotDefined, ExpressionFlags expressionFlags);
    public BooleanTernaryExpression betweenPredicate(ScalarExpression vExpressionFirst, bool vNotDefined, ExpressionFlags expressionFlags);
    public LikePredicate likePredicate(ScalarExpression vExpressionFirst, bool vNotDefined, ExpressionFlags expressionFlags);
    public FullTextPredicate fulltextPredicate();
    public ExistsPredicate existsPredicate(ExpressionFlags expressionFlags);
    public TSEqualCall tsEqualCall();
    public UpdateCall updateCall();
    public ColumnReferenceExpression fulltextColumn();
    public BooleanComparisonType joinOperator();
    public SubqueryComparisonPredicateType subqueryComparisonPredicateType();
    public void escapeExpression(LikePredicate vParent, ExpressionFlags expressionFlags);
    public ScalarExpression expressionBinaryPri2(ExpressionFlags expressionFlags);
    public ScalarExpression expressionBinaryPri1(ExpressionFlags expressionFlags);
    public ScalarExpression expressionUnary(ExpressionFlags expressionFlags);
    public PrimaryExpression expressionWithClrElements(ExpressionFlags expressionFlags);
    public PrimaryExpression udtExpression();
    public PrimaryExpression expressionPrimary(ExpressionFlags expressionFlags);
    public FunctionCall expressionWithClrElementsFunctionCallPart();
    public CastCall castCall();
    public FunctionCall builtInFunctionCall();
    public LeftFunctionCall leftFunctionCall();
    public RightFunctionCall rightFunctionCall();
    public PartitionFunctionCall partitionFunctionCall();
    public PrimaryExpression columnOrFunctionCall();
    public NullIfExpression nullIfExpression(ExpressionFlags expressionFlags);
    public CoalesceExpression coalesceExpression(ExpressionFlags expressionFlags);
    public CaseExpression caseExpression(ExpressionFlags expressionFlags);
    public ConvertCall convertCall();
    public ParameterlessCall parameterlessCall();
    public ParenthesisExpression expressionParenthesis(ExpressionFlags expressionFlags);
    public UserDefinedTypeCallTarget userDefinedTypeCallTarget();
    public FunctionCall udtFunctionExpression(UserDefinedTypeCallTarget vCallTarget);
    public UserDefinedTypePropertyAccess udtPropertyExpression(UserDefinedTypeCallTarget vCallTarget);
    public FunctionCall basicFunctionCall();
    public OverClause overClause();
    public OverClause overClauseBeginning();
    public OverClause overClauseNoOrderBy();
    public void regularBuiltInFunctionCall(FunctionCall vParent);
    public void aggregateBuiltInFunctionCall(FunctionCall vParent);
    public void reservedBuiltInFunctionCallParameters(TSqlFragment vParent, IList`1<ScalarExpression> parameters);
    public SimpleWhenClause simpleWhenClause(ExpressionFlags expressionFlags);
    public SearchedWhenClause searchedWhenClause(ExpressionFlags expressionFlags);
    public SimpleCaseExpression simpleCaseExpression(ScalarExpression inputExpression, ExpressionFlags expressionFlags);
    public SearchedCaseExpression searchedCaseExpression(ExpressionFlags expressionFlags);
    public void specialColumn(ColumnReferenceExpression vResult);
    public FunctionCall userFunctionCall(MultiPartIdentifier vIdentifiers);
    public ValueExpression globalVariableOrVariableReference();
    public SchemaObjectNameOrValueExpression objectOrVariable();
    public MoneyLiteral moneyLiteral();
    public OdbcLiteral odbcLiteral();
    private void initializeFactory();
    private static Int64[] mk_tokenSet_0_();
    private static Int64[] mk_tokenSet_1_();
    private static Int64[] mk_tokenSet_2_();
    private static Int64[] mk_tokenSet_3_();
    private static Int64[] mk_tokenSet_4_();
    private static Int64[] mk_tokenSet_5_();
    private static Int64[] mk_tokenSet_6_();
    private static Int64[] mk_tokenSet_7_();
    private static Int64[] mk_tokenSet_8_();
    private static Int64[] mk_tokenSet_9_();
    private static Int64[] mk_tokenSet_10_();
    private static Int64[] mk_tokenSet_11_();
    private static Int64[] mk_tokenSet_12_();
    private static Int64[] mk_tokenSet_13_();
    private static Int64[] mk_tokenSet_14_();
    private static Int64[] mk_tokenSet_15_();
    private static Int64[] mk_tokenSet_16_();
    private static Int64[] mk_tokenSet_17_();
    private static Int64[] mk_tokenSet_18_();
    private static Int64[] mk_tokenSet_19_();
    private static Int64[] mk_tokenSet_20_();
    private static Int64[] mk_tokenSet_21_();
    private static Int64[] mk_tokenSet_22_();
    private static Int64[] mk_tokenSet_23_();
    private static Int64[] mk_tokenSet_24_();
    private static Int64[] mk_tokenSet_25_();
    private static Int64[] mk_tokenSet_26_();
    private static Int64[] mk_tokenSet_27_();
    private static Int64[] mk_tokenSet_28_();
    private static Int64[] mk_tokenSet_29_();
    private static Int64[] mk_tokenSet_30_();
    private static Int64[] mk_tokenSet_31_();
    private static Int64[] mk_tokenSet_32_();
    private static Int64[] mk_tokenSet_33_();
    private static Int64[] mk_tokenSet_34_();
    private static Int64[] mk_tokenSet_35_();
    private static Int64[] mk_tokenSet_36_();
    private static Int64[] mk_tokenSet_37_();
    private static Int64[] mk_tokenSet_38_();
    private static Int64[] mk_tokenSet_39_();
    private static Int64[] mk_tokenSet_40_();
    private static Int64[] mk_tokenSet_41_();
    private static Int64[] mk_tokenSet_42_();
    private static Int64[] mk_tokenSet_43_();
    private static Int64[] mk_tokenSet_44_();
    private static Int64[] mk_tokenSet_45_();
    private static Int64[] mk_tokenSet_46_();
    private static Int64[] mk_tokenSet_47_();
    private static Int64[] mk_tokenSet_48_();
    private static Int64[] mk_tokenSet_49_();
    private static Int64[] mk_tokenSet_50_();
    private static Int64[] mk_tokenSet_51_();
    private static Int64[] mk_tokenSet_52_();
    private static Int64[] mk_tokenSet_53_();
    private static Int64[] mk_tokenSet_54_();
    private static Int64[] mk_tokenSet_55_();
    private static Int64[] mk_tokenSet_56_();
    private static Int64[] mk_tokenSet_57_();
    private static Int64[] mk_tokenSet_58_();
    private static Int64[] mk_tokenSet_59_();
    private static Int64[] mk_tokenSet_60_();
    private static Int64[] mk_tokenSet_61_();
    private static Int64[] mk_tokenSet_62_();
    private static Int64[] mk_tokenSet_63_();
    private static Int64[] mk_tokenSet_64_();
    private static Int64[] mk_tokenSet_65_();
    private static Int64[] mk_tokenSet_66_();
    private static Int64[] mk_tokenSet_67_();
    private static Int64[] mk_tokenSet_68_();
    private static Int64[] mk_tokenSet_69_();
    private static Int64[] mk_tokenSet_70_();
    private static Int64[] mk_tokenSet_71_();
    private static Int64[] mk_tokenSet_72_();
    private static Int64[] mk_tokenSet_73_();
    private static Int64[] mk_tokenSet_74_();
    private static Int64[] mk_tokenSet_75_();
    private static Int64[] mk_tokenSet_76_();
    private static Int64[] mk_tokenSet_77_();
    private static Int64[] mk_tokenSet_78_();
    private static Int64[] mk_tokenSet_79_();
    private static Int64[] mk_tokenSet_80_();
    private static Int64[] mk_tokenSet_81_();
    private static Int64[] mk_tokenSet_82_();
    private static Int64[] mk_tokenSet_83_();
    private static Int64[] mk_tokenSet_84_();
    private static Int64[] mk_tokenSet_85_();
    private static Int64[] mk_tokenSet_86_();
    private static Int64[] mk_tokenSet_87_();
    private static Int64[] mk_tokenSet_88_();
    private static Int64[] mk_tokenSet_89_();
    private static Int64[] mk_tokenSet_90_();
    private static Int64[] mk_tokenSet_91_();
    private static Int64[] mk_tokenSet_92_();
    private static Int64[] mk_tokenSet_93_();
    private static Int64[] mk_tokenSet_94_();
    private static Int64[] mk_tokenSet_95_();
    private static Int64[] mk_tokenSet_96_();
    private static Int64[] mk_tokenSet_97_();
    private static Int64[] mk_tokenSet_98_();
    private static Int64[] mk_tokenSet_99_();
    private static Int64[] mk_tokenSet_100_();
    private static Int64[] mk_tokenSet_101_();
    private static Int64[] mk_tokenSet_102_();
    private static Int64[] mk_tokenSet_103_();
    private static Int64[] mk_tokenSet_104_();
    private static Int64[] mk_tokenSet_105_();
    private static Int64[] mk_tokenSet_106_();
    private static Int64[] mk_tokenSet_107_();
    private static Int64[] mk_tokenSet_108_();
    private static Int64[] mk_tokenSet_109_();
    private static Int64[] mk_tokenSet_110_();
    private static Int64[] mk_tokenSet_111_();
    private static Int64[] mk_tokenSet_112_();
    private static Int64[] mk_tokenSet_113_();
    private static Int64[] mk_tokenSet_114_();
    private static Int64[] mk_tokenSet_115_();
    private static Int64[] mk_tokenSet_116_();
    private static Int64[] mk_tokenSet_117_();
    private static Int64[] mk_tokenSet_118_();
    private static Int64[] mk_tokenSet_119_();
    private static Int64[] mk_tokenSet_120_();
    private static Int64[] mk_tokenSet_121_();
    private static Int64[] mk_tokenSet_122_();
    private static Int64[] mk_tokenSet_123_();
    private static Int64[] mk_tokenSet_124_();
    private static Int64[] mk_tokenSet_125_();
    private static Int64[] mk_tokenSet_126_();
    private static Int64[] mk_tokenSet_127_();
    private static Int64[] mk_tokenSet_128_();
    private static Int64[] mk_tokenSet_129_();
    private static Int64[] mk_tokenSet_130_();
    private static Int64[] mk_tokenSet_131_();
    private static Int64[] mk_tokenSet_132_();
    private static Int64[] mk_tokenSet_133_();
    private static Int64[] mk_tokenSet_134_();
    private static Int64[] mk_tokenSet_135_();
    private static Int64[] mk_tokenSet_136_();
    private static Int64[] mk_tokenSet_137_();
    private static Int64[] mk_tokenSet_138_();
    private static Int64[] mk_tokenSet_139_();
    private static Int64[] mk_tokenSet_140_();
    private static Int64[] mk_tokenSet_141_();
    private static Int64[] mk_tokenSet_142_();
    private static Int64[] mk_tokenSet_143_();
    private static Int64[] mk_tokenSet_144_();
    private static Int64[] mk_tokenSet_145_();
}
public static class Microsoft.SqlServer.TransactSql.ScriptDom.TSqlAuditEventGroupHelper : object {
    private static AuditEventGroupHelper HelperInstance;
    private static TSqlAuditEventGroupHelper();
    public static bool TryParseOption(string input, SqlVersion version, EventNotificationEventGroup& returnValue);
}
public static class Microsoft.SqlServer.TransactSql.ScriptDom.TSqlAuditEventTypeHelper : object {
    private static AuditEventTypeHelper HelperInstance;
    private static TSqlAuditEventTypeHelper();
    public static bool TryParseOption(string input, SqlVersion version, EventNotificationEventType& returnValue);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.TSqlBatch : TSqlFragment {
    private List`1<TSqlStatement> _statements;
    public IList`1<TSqlStatement> Statements { get; }
    public IList`1<TSqlStatement> get_Statements();
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public abstract class Microsoft.SqlServer.TransactSql.ScriptDom.TSqlConcreteFragmentVisitor : TSqlFragmentVisitor {
    public sealed virtual void Visit(ExecutableEntity node);
    public sealed virtual void ExplicitVisit(ExecutableEntity node);
    public sealed virtual void Visit(ViewStatementBody node);
    public sealed virtual void ExplicitVisit(ViewStatementBody node);
    public sealed virtual void Visit(ViewDistributionPolicy node);
    public sealed virtual void ExplicitVisit(ViewDistributionPolicy node);
    public sealed virtual void Visit(TriggerStatementBody node);
    public sealed virtual void ExplicitVisit(TriggerStatementBody node);
    public sealed virtual void Visit(ProcedureStatementBody node);
    public sealed virtual void ExplicitVisit(ProcedureStatementBody node);
    public sealed virtual void Visit(ProcedureStatementBodyBase node);
    public sealed virtual void ExplicitVisit(ProcedureStatementBodyBase node);
    public sealed virtual void Visit(FunctionStatementBody node);
    public sealed virtual void ExplicitVisit(FunctionStatementBody node);
    public sealed virtual void Visit(XmlNamespacesElement node);
    public sealed virtual void ExplicitVisit(XmlNamespacesElement node);
    public sealed virtual void Visit(FunctionReturnType node);
    public sealed virtual void ExplicitVisit(FunctionReturnType node);
    public sealed virtual void Visit(DataTypeReference node);
    public sealed virtual void ExplicitVisit(DataTypeReference node);
    public sealed virtual void Visit(ParameterizedDataTypeReference node);
    public sealed virtual void ExplicitVisit(ParameterizedDataTypeReference node);
    public sealed virtual void Visit(StatementWithCtesAndXmlNamespaces node);
    public sealed virtual void ExplicitVisit(StatementWithCtesAndXmlNamespaces node);
    public sealed virtual void Visit(ForClause node);
    public sealed virtual void ExplicitVisit(ForClause node);
    public sealed virtual void Visit(WhenClause node);
    public sealed virtual void ExplicitVisit(WhenClause node);
    public sealed virtual void Visit(CaseExpression node);
    public sealed virtual void ExplicitVisit(CaseExpression node);
    public sealed virtual void Visit(CallTarget node);
    public sealed virtual void ExplicitVisit(CallTarget node);
    public sealed virtual void Visit(AtomicBlockOption node);
    public sealed virtual void ExplicitVisit(AtomicBlockOption node);
    public sealed virtual void Visit(TransactionStatement node);
    public sealed virtual void ExplicitVisit(TransactionStatement node);
    public sealed virtual void Visit(UpdateDeleteSpecificationBase node);
    public sealed virtual void ExplicitVisit(UpdateDeleteSpecificationBase node);
    public sealed virtual void Visit(TextModificationStatement node);
    public sealed virtual void ExplicitVisit(TextModificationStatement node);
    public sealed virtual void Visit(SecurityStatement node);
    public sealed virtual void ExplicitVisit(SecurityStatement node);
    public sealed virtual void Visit(SecurityStatementBody80 node);
    public sealed virtual void ExplicitVisit(SecurityStatementBody80 node);
    public sealed virtual void Visit(SecurityElement80 node);
    public sealed virtual void ExplicitVisit(SecurityElement80 node);
    public sealed virtual void Visit(SetClause node);
    public sealed virtual void ExplicitVisit(SetClause node);
    public sealed virtual void Visit(InsertSource node);
    public sealed virtual void ExplicitVisit(InsertSource node);
    public sealed virtual void Visit(PrimaryExpression node);
    public sealed virtual void ExplicitVisit(PrimaryExpression node);
    public sealed virtual void Visit(Literal node);
    public sealed virtual void ExplicitVisit(Literal node);
    public sealed virtual void Visit(ValueExpression node);
    public sealed virtual void ExplicitVisit(ValueExpression node);
    public sealed virtual void Visit(OptionValue node);
    public sealed virtual void ExplicitVisit(OptionValue node);
    public sealed virtual void Visit(SequenceStatement node);
    public sealed virtual void ExplicitVisit(SequenceStatement node);
    public sealed virtual void Visit(SecurityPolicyStatement node);
    public sealed virtual void ExplicitVisit(SecurityPolicyStatement node);
    public sealed virtual void Visit(ColumnMasterKeyParameter node);
    public sealed virtual void ExplicitVisit(ColumnMasterKeyParameter node);
    public sealed virtual void Visit(ColumnEncryptionKeyStatement node);
    public sealed virtual void ExplicitVisit(ColumnEncryptionKeyStatement node);
    public sealed virtual void Visit(ColumnEncryptionKeyValueParameter node);
    public sealed virtual void ExplicitVisit(ColumnEncryptionKeyValueParameter node);
    public sealed virtual void Visit(ExternalTableStatement node);
    public sealed virtual void ExplicitVisit(ExternalTableStatement node);
    public sealed virtual void Visit(ExternalTableOption node);
    public sealed virtual void ExplicitVisit(ExternalTableOption node);
    public sealed virtual void Visit(ExternalTableDistributionPolicy node);
    public sealed virtual void ExplicitVisit(ExternalTableDistributionPolicy node);
    public sealed virtual void Visit(ExternalDataSourceStatement node);
    public sealed virtual void ExplicitVisit(ExternalDataSourceStatement node);
    public sealed virtual void Visit(ExternalDataSourceOption node);
    public sealed virtual void ExplicitVisit(ExternalDataSourceOption node);
    public sealed virtual void Visit(ExternalStreamStatement node);
    public sealed virtual void ExplicitVisit(ExternalStreamStatement node);
    public sealed virtual void Visit(ExternalStreamOption node);
    public sealed virtual void ExplicitVisit(ExternalStreamOption node);
    public sealed virtual void Visit(ExternalFileFormatStatement node);
    public sealed virtual void ExplicitVisit(ExternalFileFormatStatement node);
    public sealed virtual void Visit(ExternalFileFormatOption node);
    public sealed virtual void ExplicitVisit(ExternalFileFormatOption node);
    public sealed virtual void Visit(ExternalStreamingJobStatement node);
    public sealed virtual void ExplicitVisit(ExternalStreamingJobStatement node);
    public sealed virtual void Visit(AssemblyStatement node);
    public sealed virtual void ExplicitVisit(AssemblyStatement node);
    public sealed virtual void Visit(AlterTableStatement node);
    public sealed virtual void ExplicitVisit(AlterTableStatement node);
    public sealed virtual void Visit(TableOption node);
    public sealed virtual void ExplicitVisit(TableOption node);
    public sealed virtual void Visit(RemoteDataArchiveDatabaseSetting node);
    public sealed virtual void ExplicitVisit(RemoteDataArchiveDatabaseSetting node);
    public sealed virtual void Visit(TableSwitchOption node);
    public sealed virtual void ExplicitVisit(TableSwitchOption node);
    public sealed virtual void Visit(DropClusteredConstraintOption node);
    public sealed virtual void ExplicitVisit(DropClusteredConstraintOption node);
    public sealed virtual void Visit(CreateTypeStatement node);
    public sealed virtual void ExplicitVisit(CreateTypeStatement node);
    public sealed virtual void Visit(RouteStatement node);
    public sealed virtual void ExplicitVisit(RouteStatement node);
    public sealed virtual void Visit(QueueStatement node);
    public sealed virtual void ExplicitVisit(QueueStatement node);
    public sealed virtual void Visit(IndexStatement node);
    public sealed virtual void ExplicitVisit(IndexStatement node);
    public sealed virtual void Visit(IndexOption node);
    public sealed virtual void ExplicitVisit(IndexOption node);
    public sealed virtual void Visit(LowPriorityLockWaitOption node);
    public sealed virtual void ExplicitVisit(LowPriorityLockWaitOption node);
    public sealed virtual void Visit(FullTextIndexOption node);
    public sealed virtual void ExplicitVisit(FullTextIndexOption node);
    public sealed virtual void Visit(EventTypeGroupContainer node);
    public sealed virtual void ExplicitVisit(EventTypeGroupContainer node);
    public sealed virtual void Visit(MasterKeyStatement node);
    public sealed virtual void ExplicitVisit(MasterKeyStatement node);
    public sealed virtual void Visit(ApplicationRoleStatement node);
    public sealed virtual void ExplicitVisit(ApplicationRoleStatement node);
    public sealed virtual void Visit(RoleStatement node);
    public sealed virtual void ExplicitVisit(RoleStatement node);
    public sealed virtual void Visit(AlterRoleAction node);
    public sealed virtual void ExplicitVisit(AlterRoleAction node);
    public sealed virtual void Visit(UserStatement node);
    public sealed virtual void ExplicitVisit(UserStatement node);
    public sealed virtual void Visit(CursorStatement node);
    public sealed virtual void ExplicitVisit(CursorStatement node);
    public sealed virtual void Visit(DropUnownedObjectStatement node);
    public sealed virtual void ExplicitVisit(DropUnownedObjectStatement node);
    public sealed virtual void Visit(DropObjectsStatement node);
    public sealed virtual void ExplicitVisit(DropObjectsStatement node);
    public sealed virtual void Visit(DropChildObjectsStatement node);
    public sealed virtual void ExplicitVisit(DropChildObjectsStatement node);
    public sealed virtual void Visit(DropIndexClauseBase node);
    public sealed virtual void ExplicitVisit(DropIndexClauseBase node);
    public sealed virtual void Visit(SetOnOffStatement node);
    public sealed virtual void ExplicitVisit(SetOnOffStatement node);
    public sealed virtual void Visit(SetCommand node);
    public sealed virtual void ExplicitVisit(SetCommand node);
    public sealed virtual void Visit(AlterDatabaseStatement node);
    public sealed virtual void ExplicitVisit(AlterDatabaseStatement node);
    public sealed virtual void Visit(AlterDatabaseScopedConfigurationStatement node);
    public sealed virtual void ExplicitVisit(AlterDatabaseScopedConfigurationStatement node);
    public sealed virtual void Visit(ChangeTrackingOptionDetail node);
    public sealed virtual void ExplicitVisit(ChangeTrackingOptionDetail node);
    public sealed virtual void Visit(QueryStoreOption node);
    public sealed virtual void ExplicitVisit(QueryStoreOption node);
    public sealed virtual void Visit(ColumnEncryptionDefinitionParameter node);
    public sealed virtual void ExplicitVisit(ColumnEncryptionDefinitionParameter node);
    public sealed virtual void Visit(ConstraintDefinition node);
    public sealed virtual void ExplicitVisit(ConstraintDefinition node);
    public sealed virtual void Visit(TableDistributionPolicy node);
    public sealed virtual void ExplicitVisit(TableDistributionPolicy node);
    public sealed virtual void Visit(TableIndexType node);
    public sealed virtual void ExplicitVisit(TableIndexType node);
    public sealed virtual void Visit(PartitionSpecifications node);
    public sealed virtual void ExplicitVisit(PartitionSpecifications node);
    public sealed virtual void Visit(CopyStatementOptionBase node);
    public sealed virtual void ExplicitVisit(CopyStatementOptionBase node);
    public sealed virtual void Visit(BackupStatement node);
    public sealed virtual void ExplicitVisit(BackupStatement node);
    public sealed virtual void Visit(BulkInsertBase node);
    public sealed virtual void ExplicitVisit(BulkInsertBase node);
    public sealed virtual void Visit(RemoteServiceBindingStatementBase node);
    public sealed virtual void ExplicitVisit(RemoteServiceBindingStatementBase node);
    public sealed virtual void Visit(RemoteServiceBindingOption node);
    public sealed virtual void ExplicitVisit(RemoteServiceBindingOption node);
    public sealed virtual void Visit(EncryptionSource node);
    public sealed virtual void ExplicitVisit(EncryptionSource node);
    public sealed virtual void Visit(CertificateStatementBase node);
    public sealed virtual void ExplicitVisit(CertificateStatementBase node);
    public sealed virtual void Visit(CredentialStatement node);
    public sealed virtual void ExplicitVisit(CredentialStatement node);
    public sealed virtual void Visit(MessageTypeStatementBase node);
    public sealed virtual void ExplicitVisit(MessageTypeStatementBase node);
    public sealed virtual void Visit(AlterCreateEndpointStatementBase node);
    public sealed virtual void ExplicitVisit(AlterCreateEndpointStatementBase node);
    public sealed virtual void Visit(EndpointProtocolOption node);
    public sealed virtual void ExplicitVisit(EndpointProtocolOption node);
    public sealed virtual void Visit(PayloadOption node);
    public sealed virtual void ExplicitVisit(PayloadOption node);
    public sealed virtual void Visit(SymmetricKeyStatement node);
    public sealed virtual void ExplicitVisit(SymmetricKeyStatement node);
    public sealed virtual void Visit(KeyOption node);
    public sealed virtual void ExplicitVisit(KeyOption node);
    public sealed virtual void Visit(FullTextCatalogStatement node);
    public sealed virtual void ExplicitVisit(FullTextCatalogStatement node);
    public sealed virtual void Visit(FullTextCatalogOption node);
    public sealed virtual void ExplicitVisit(FullTextCatalogOption node);
    public sealed virtual void Visit(AlterCreateServiceStatementBase node);
    public sealed virtual void ExplicitVisit(AlterCreateServiceStatementBase node);
    public sealed virtual void Visit(ScalarExpression node);
    public sealed virtual void ExplicitVisit(ScalarExpression node);
    public sealed virtual void Visit(BooleanExpression node);
    public sealed virtual void ExplicitVisit(BooleanExpression node);
    public sealed virtual void Visit(GroupingSpecification node);
    public sealed virtual void ExplicitVisit(GroupingSpecification node);
    public sealed virtual void Visit(JoinTableReference node);
    public sealed virtual void ExplicitVisit(JoinTableReference node);
    public sealed virtual void Visit(QueryExpression node);
    public sealed virtual void ExplicitVisit(QueryExpression node);
    public sealed virtual void Visit(SelectElement node);
    public sealed virtual void ExplicitVisit(SelectElement node);
    public sealed virtual void Visit(TableReference node);
    public sealed virtual void ExplicitVisit(TableReference node);
    public sealed virtual void Visit(TableReferenceWithAlias node);
    public sealed virtual void ExplicitVisit(TableReferenceWithAlias node);
    public sealed virtual void Visit(TableReferenceWithAliasAndColumns node);
    public sealed virtual void ExplicitVisit(TableReferenceWithAliasAndColumns node);
    public sealed virtual void Visit(AlterFullTextIndexAction node);
    public sealed virtual void ExplicitVisit(AlterFullTextIndexAction node);
    public sealed virtual void Visit(SearchPropertyListAction node);
    public sealed virtual void ExplicitVisit(SearchPropertyListAction node);
    public sealed virtual void Visit(CreateLoginSource node);
    public sealed virtual void ExplicitVisit(CreateLoginSource node);
    public sealed virtual void Visit(AlterLoginStatement node);
    public sealed virtual void ExplicitVisit(AlterLoginStatement node);
    public sealed virtual void Visit(SignatureStatementBase node);
    public sealed virtual void ExplicitVisit(SignatureStatementBase node);
    public sealed virtual void Visit(WaitForSupportedStatement node);
    public sealed virtual void ExplicitVisit(WaitForSupportedStatement node);
    public sealed virtual void Visit(DialogOption node);
    public sealed virtual void ExplicitVisit(DialogOption node);
    public sealed virtual void Visit(BackupRestoreMasterKeyStatementBase node);
    public sealed virtual void ExplicitVisit(BackupRestoreMasterKeyStatementBase node);
    public sealed virtual void Visit(TSqlStatement node);
    public sealed virtual void ExplicitVisit(TSqlStatement node);
    public sealed virtual void Visit(DataModificationStatement node);
    public sealed virtual void ExplicitVisit(DataModificationStatement node);
    public sealed virtual void Visit(DataModificationSpecification node);
    public sealed virtual void ExplicitVisit(DataModificationSpecification node);
    public sealed virtual void Visit(MergeAction node);
    public sealed virtual void ExplicitVisit(MergeAction node);
    public sealed virtual void Visit(SensitivityClassificationStatement node);
    public sealed virtual void ExplicitVisit(SensitivityClassificationStatement node);
    public sealed virtual void Visit(AuditSpecificationStatement node);
    public sealed virtual void ExplicitVisit(AuditSpecificationStatement node);
    public sealed virtual void Visit(AuditSpecificationDetail node);
    public sealed virtual void ExplicitVisit(AuditSpecificationDetail node);
    public sealed virtual void Visit(ServerAuditStatement node);
    public sealed virtual void ExplicitVisit(ServerAuditStatement node);
    public sealed virtual void Visit(AuditOption node);
    public sealed virtual void ExplicitVisit(AuditOption node);
    public sealed virtual void Visit(AuditTargetOption node);
    public sealed virtual void ExplicitVisit(AuditTargetOption node);
    public sealed virtual void Visit(DatabaseEncryptionKeyStatement node);
    public sealed virtual void ExplicitVisit(DatabaseEncryptionKeyStatement node);
    public sealed virtual void Visit(WorkloadGroupStatement node);
    public sealed virtual void ExplicitVisit(WorkloadGroupStatement node);
    public sealed virtual void Visit(WorkloadGroupParameter node);
    public sealed virtual void ExplicitVisit(WorkloadGroupParameter node);
    public sealed virtual void Visit(WorkloadClassifierStatement node);
    public sealed virtual void ExplicitVisit(WorkloadClassifierStatement node);
    public sealed virtual void Visit(WorkloadClassifierOption node);
    public sealed virtual void ExplicitVisit(WorkloadClassifierOption node);
    public sealed virtual void Visit(BrokerPriorityStatement node);
    public sealed virtual void ExplicitVisit(BrokerPriorityStatement node);
    public sealed virtual void Visit(SessionOption node);
    public sealed virtual void ExplicitVisit(SessionOption node);
    public sealed virtual void Visit(SpatialIndexOption node);
    public sealed virtual void ExplicitVisit(SpatialIndexOption node);
    public sealed virtual void Visit(AvailabilityGroupStatement node);
    public sealed virtual void ExplicitVisit(AvailabilityGroupStatement node);
    public sealed virtual void Visit(AvailabilityReplicaOption node);
    public sealed virtual void ExplicitVisit(AvailabilityReplicaOption node);
    public sealed virtual void Visit(AvailabilityGroupOption node);
    public sealed virtual void ExplicitVisit(AvailabilityGroupOption node);
    public sealed virtual void Visit(ExternalLibraryStatement node);
    public sealed virtual void ExplicitVisit(ExternalLibraryStatement node);
    public sealed virtual void Visit(ExternalLanguageStatement node);
    public sealed virtual void ExplicitVisit(ExternalLanguageStatement node);
}
public abstract class Microsoft.SqlServer.TransactSql.ScriptDom.TSqlFragment : object {
    public static int Uninitialized;
    private int _firstTokenIndex;
    private int _lastTokenIndex;
    private IList`1<TSqlParserToken> _scriptTokenStream;
    public int StartOffset { get; }
    public int FragmentLength { get; }
    public int StartLine { get; }
    public int StartColumn { get; }
    public int FirstTokenIndex { get; public set; }
    public int LastTokenIndex { get; public set; }
    public IList`1<TSqlParserToken> ScriptTokenStream { get; public set; }
    internal void UpdateTokenInfo(TSqlFragment fragment);
    internal void UpdateTokenInfo(int firstIndex, int lastIndex);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
    public int get_StartOffset();
    public int get_FragmentLength();
    public int get_StartLine();
    public int get_StartColumn();
    public int get_FirstTokenIndex();
    public void set_FirstTokenIndex(int value);
    public int get_LastTokenIndex();
    public void set_LastTokenIndex(int value);
    public IList`1<TSqlParserToken> get_ScriptTokenStream();
    public void set_ScriptTokenStream(IList`1<TSqlParserToken> value);
}
internal class Microsoft.SqlServer.TransactSql.ScriptDom.TSqlFragmentFactory : object {
    private IList`1<TSqlParserToken> _tokenStream;
    public void SetTokenStream(IList`1<TSqlParserToken> tokenStream);
    public virtual FragmentType CreateFragment();
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.TSqlFragmentSnippet : TSqlFragment {
    private string _script;
    public string Script { get; public set; }
    public string get_Script();
    public void set_Script(string value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public abstract class Microsoft.SqlServer.TransactSql.ScriptDom.TSqlFragmentVisitor : object {
    private bool _visitBaseType;
    internal bool VisitBaseType { get; }
    internal TSqlFragmentVisitor(bool visitBaseType);
    internal bool get_VisitBaseType();
    public virtual void Visit(TSqlFragment fragment);
    public virtual void Visit(StatementList node);
    public virtual void ExplicitVisit(StatementList node);
    public virtual void Visit(ExecuteStatement node);
    public virtual void ExplicitVisit(ExecuteStatement node);
    public virtual void Visit(ExecuteOption node);
    public virtual void ExplicitVisit(ExecuteOption node);
    public virtual void Visit(ResultSetsExecuteOption node);
    public virtual void ExplicitVisit(ResultSetsExecuteOption node);
    public virtual void Visit(ResultSetDefinition node);
    public virtual void ExplicitVisit(ResultSetDefinition node);
    public virtual void Visit(InlineResultSetDefinition node);
    public virtual void ExplicitVisit(InlineResultSetDefinition node);
    public virtual void Visit(ResultColumnDefinition node);
    public virtual void ExplicitVisit(ResultColumnDefinition node);
    public virtual void Visit(SchemaObjectResultSetDefinition node);
    public virtual void ExplicitVisit(SchemaObjectResultSetDefinition node);
    public virtual void Visit(ExecuteSpecification node);
    public virtual void ExplicitVisit(ExecuteSpecification node);
    public virtual void Visit(ExecuteContext node);
    public virtual void ExplicitVisit(ExecuteContext node);
    public virtual void Visit(ExecuteParameter node);
    public virtual void ExplicitVisit(ExecuteParameter node);
    public virtual void Visit(ExecutableEntity node);
    public virtual void ExplicitVisit(ExecutableEntity node);
    public virtual void Visit(ProcedureReferenceName node);
    public virtual void ExplicitVisit(ProcedureReferenceName node);
    public virtual void Visit(ExecutableProcedureReference node);
    public virtual void ExplicitVisit(ExecutableProcedureReference node);
    public virtual void Visit(ExecutableStringList node);
    public virtual void ExplicitVisit(ExecutableStringList node);
    public virtual void Visit(AdHocDataSource node);
    public virtual void ExplicitVisit(AdHocDataSource node);
    public virtual void Visit(ViewOption node);
    public virtual void ExplicitVisit(ViewOption node);
    public virtual void Visit(AlterViewStatement node);
    public virtual void ExplicitVisit(AlterViewStatement node);
    public virtual void Visit(CreateViewStatement node);
    public virtual void ExplicitVisit(CreateViewStatement node);
    public virtual void Visit(CreateOrAlterViewStatement node);
    public virtual void ExplicitVisit(CreateOrAlterViewStatement node);
    public virtual void Visit(ViewStatementBody node);
    public virtual void ExplicitVisit(ViewStatementBody node);
    public virtual void Visit(ViewForAppendOption node);
    public virtual void ExplicitVisit(ViewForAppendOption node);
    public virtual void Visit(ViewDistributionOption node);
    public virtual void ExplicitVisit(ViewDistributionOption node);
    public virtual void Visit(ViewDistributionPolicy node);
    public virtual void ExplicitVisit(ViewDistributionPolicy node);
    public virtual void Visit(ViewRoundRobinDistributionPolicy node);
    public virtual void ExplicitVisit(ViewRoundRobinDistributionPolicy node);
    public virtual void Visit(ViewHashDistributionPolicy node);
    public virtual void ExplicitVisit(ViewHashDistributionPolicy node);
    public virtual void Visit(TriggerObject node);
    public virtual void ExplicitVisit(TriggerObject node);
    public virtual void Visit(TriggerOption node);
    public virtual void ExplicitVisit(TriggerOption node);
    public virtual void Visit(ExecuteAsTriggerOption node);
    public virtual void ExplicitVisit(ExecuteAsTriggerOption node);
    public virtual void Visit(TriggerAction node);
    public virtual void ExplicitVisit(TriggerAction node);
    public virtual void Visit(AlterTriggerStatement node);
    public virtual void ExplicitVisit(AlterTriggerStatement node);
    public virtual void Visit(CreateTriggerStatement node);
    public virtual void ExplicitVisit(CreateTriggerStatement node);
    public virtual void Visit(CreateOrAlterTriggerStatement node);
    public virtual void ExplicitVisit(CreateOrAlterTriggerStatement node);
    public virtual void Visit(TriggerStatementBody node);
    public virtual void ExplicitVisit(TriggerStatementBody node);
    public virtual void Visit(Identifier node);
    public virtual void ExplicitVisit(Identifier node);
    public virtual void Visit(AlterProcedureStatement node);
    public virtual void ExplicitVisit(AlterProcedureStatement node);
    public virtual void Visit(CreateProcedureStatement node);
    public virtual void ExplicitVisit(CreateProcedureStatement node);
    public virtual void Visit(CreateOrAlterProcedureStatement node);
    public virtual void ExplicitVisit(CreateOrAlterProcedureStatement node);
    public virtual void Visit(ProcedureReference node);
    public virtual void ExplicitVisit(ProcedureReference node);
    public virtual void Visit(MethodSpecifier node);
    public virtual void ExplicitVisit(MethodSpecifier node);
    public virtual void Visit(ProcedureStatementBody node);
    public virtual void ExplicitVisit(ProcedureStatementBody node);
    public virtual void Visit(ProcedureStatementBodyBase node);
    public virtual void ExplicitVisit(ProcedureStatementBodyBase node);
    public virtual void Visit(FunctionStatementBody node);
    public virtual void ExplicitVisit(FunctionStatementBody node);
    public virtual void Visit(ProcedureOption node);
    public virtual void ExplicitVisit(ProcedureOption node);
    public virtual void Visit(ExecuteAsProcedureOption node);
    public virtual void ExplicitVisit(ExecuteAsProcedureOption node);
    public virtual void Visit(FunctionOption node);
    public virtual void ExplicitVisit(FunctionOption node);
    public virtual void Visit(InlineFunctionOption node);
    public virtual void ExplicitVisit(InlineFunctionOption node);
    public virtual void Visit(ExecuteAsFunctionOption node);
    public virtual void ExplicitVisit(ExecuteAsFunctionOption node);
    public virtual void Visit(XmlNamespaces node);
    public virtual void ExplicitVisit(XmlNamespaces node);
    public virtual void Visit(XmlNamespacesElement node);
    public virtual void ExplicitVisit(XmlNamespacesElement node);
    public virtual void Visit(XmlNamespacesDefaultElement node);
    public virtual void ExplicitVisit(XmlNamespacesDefaultElement node);
    public virtual void Visit(XmlNamespacesAliasElement node);
    public virtual void ExplicitVisit(XmlNamespacesAliasElement node);
    public virtual void Visit(CommonTableExpression node);
    public virtual void ExplicitVisit(CommonTableExpression node);
    public virtual void Visit(WithCtesAndXmlNamespaces node);
    public virtual void ExplicitVisit(WithCtesAndXmlNamespaces node);
    public virtual void Visit(FunctionReturnType node);
    public virtual void ExplicitVisit(FunctionReturnType node);
    public virtual void Visit(TableValuedFunctionReturnType node);
    public virtual void ExplicitVisit(TableValuedFunctionReturnType node);
    public virtual void Visit(DataTypeReference node);
    public virtual void ExplicitVisit(DataTypeReference node);
    public virtual void Visit(ParameterizedDataTypeReference node);
    public virtual void ExplicitVisit(ParameterizedDataTypeReference node);
    public virtual void Visit(SqlDataTypeReference node);
    public virtual void ExplicitVisit(SqlDataTypeReference node);
    public virtual void Visit(UserDataTypeReference node);
    public virtual void ExplicitVisit(UserDataTypeReference node);
    public virtual void Visit(XmlDataTypeReference node);
    public virtual void ExplicitVisit(XmlDataTypeReference node);
    public virtual void Visit(ScalarFunctionReturnType node);
    public virtual void ExplicitVisit(ScalarFunctionReturnType node);
    public virtual void Visit(SelectFunctionReturnType node);
    public virtual void ExplicitVisit(SelectFunctionReturnType node);
    public virtual void Visit(TableDefinition node);
    public virtual void ExplicitVisit(TableDefinition node);
    public virtual void Visit(DeclareTableVariableBody node);
    public virtual void ExplicitVisit(DeclareTableVariableBody node);
    public virtual void Visit(DeclareTableVariableStatement node);
    public virtual void ExplicitVisit(DeclareTableVariableStatement node);
    public virtual void Visit(NamedTableReference node);
    public virtual void ExplicitVisit(NamedTableReference node);
    public virtual void Visit(SchemaObjectFunctionTableReference node);
    public virtual void ExplicitVisit(SchemaObjectFunctionTableReference node);
    public virtual void Visit(TableHint node);
    public virtual void ExplicitVisit(TableHint node);
    public virtual void Visit(IndexTableHint node);
    public virtual void ExplicitVisit(IndexTableHint node);
    public virtual void Visit(LiteralTableHint node);
    public virtual void ExplicitVisit(LiteralTableHint node);
    public virtual void Visit(QueryDerivedTable node);
    public virtual void ExplicitVisit(QueryDerivedTable node);
    public virtual void Visit(InlineDerivedTable node);
    public virtual void ExplicitVisit(InlineDerivedTable node);
    public virtual void Visit(SubqueryComparisonPredicate node);
    public virtual void ExplicitVisit(SubqueryComparisonPredicate node);
    public virtual void Visit(ExistsPredicate node);
    public virtual void ExplicitVisit(ExistsPredicate node);
    public virtual void Visit(LikePredicate node);
    public virtual void ExplicitVisit(LikePredicate node);
    public virtual void Visit(InPredicate node);
    public virtual void ExplicitVisit(InPredicate node);
    public virtual void Visit(FullTextPredicate node);
    public virtual void ExplicitVisit(FullTextPredicate node);
    public virtual void Visit(UserDefinedTypePropertyAccess node);
    public virtual void ExplicitVisit(UserDefinedTypePropertyAccess node);
    public virtual void Visit(StatementWithCtesAndXmlNamespaces node);
    public virtual void ExplicitVisit(StatementWithCtesAndXmlNamespaces node);
    public virtual void Visit(SelectStatement node);
    public virtual void ExplicitVisit(SelectStatement node);
    public virtual void Visit(ForClause node);
    public virtual void ExplicitVisit(ForClause node);
    public virtual void Visit(BrowseForClause node);
    public virtual void ExplicitVisit(BrowseForClause node);
    public virtual void Visit(ReadOnlyForClause node);
    public virtual void ExplicitVisit(ReadOnlyForClause node);
    public virtual void Visit(XmlForClause node);
    public virtual void ExplicitVisit(XmlForClause node);
    public virtual void Visit(XmlForClauseOption node);
    public virtual void ExplicitVisit(XmlForClauseOption node);
    public virtual void Visit(JsonForClause node);
    public virtual void ExplicitVisit(JsonForClause node);
    public virtual void Visit(JsonForClauseOption node);
    public virtual void ExplicitVisit(JsonForClauseOption node);
    public virtual void Visit(UpdateForClause node);
    public virtual void ExplicitVisit(UpdateForClause node);
    public virtual void Visit(OptimizerHint node);
    public virtual void ExplicitVisit(OptimizerHint node);
    public virtual void Visit(LiteralOptimizerHint node);
    public virtual void ExplicitVisit(LiteralOptimizerHint node);
    public virtual void Visit(TableHintsOptimizerHint node);
    public virtual void ExplicitVisit(TableHintsOptimizerHint node);
    public virtual void Visit(ForceSeekTableHint node);
    public virtual void ExplicitVisit(ForceSeekTableHint node);
    public virtual void Visit(OptimizeForOptimizerHint node);
    public virtual void ExplicitVisit(OptimizeForOptimizerHint node);
    public virtual void Visit(UseHintList node);
    public virtual void ExplicitVisit(UseHintList node);
    public virtual void Visit(VariableValuePair node);
    public virtual void ExplicitVisit(VariableValuePair node);
    public virtual void Visit(WhenClause node);
    public virtual void ExplicitVisit(WhenClause node);
    public virtual void Visit(SimpleWhenClause node);
    public virtual void ExplicitVisit(SimpleWhenClause node);
    public virtual void Visit(SearchedWhenClause node);
    public virtual void ExplicitVisit(SearchedWhenClause node);
    public virtual void Visit(CaseExpression node);
    public virtual void ExplicitVisit(CaseExpression node);
    public virtual void Visit(SimpleCaseExpression node);
    public virtual void ExplicitVisit(SimpleCaseExpression node);
    public virtual void Visit(SearchedCaseExpression node);
    public virtual void ExplicitVisit(SearchedCaseExpression node);
    public virtual void Visit(NullIfExpression node);
    public virtual void ExplicitVisit(NullIfExpression node);
    public virtual void Visit(CoalesceExpression node);
    public virtual void ExplicitVisit(CoalesceExpression node);
    public virtual void Visit(IIfCall node);
    public virtual void ExplicitVisit(IIfCall node);
    public virtual void Visit(FullTextTableReference node);
    public virtual void ExplicitVisit(FullTextTableReference node);
    public virtual void Visit(SemanticTableReference node);
    public virtual void ExplicitVisit(SemanticTableReference node);
    public virtual void Visit(OpenXmlTableReference node);
    public virtual void ExplicitVisit(OpenXmlTableReference node);
    public virtual void Visit(OpenJsonTableReference node);
    public virtual void ExplicitVisit(OpenJsonTableReference node);
    public virtual void Visit(OpenRowsetTableReference node);
    public virtual void ExplicitVisit(OpenRowsetTableReference node);
    public virtual void Visit(InternalOpenRowset node);
    public virtual void ExplicitVisit(InternalOpenRowset node);
    public virtual void Visit(BulkOpenRowset node);
    public virtual void ExplicitVisit(BulkOpenRowset node);
    public virtual void Visit(OpenQueryTableReference node);
    public virtual void ExplicitVisit(OpenQueryTableReference node);
    public virtual void Visit(AdHocTableReference node);
    public virtual void ExplicitVisit(AdHocTableReference node);
    public virtual void Visit(SchemaDeclarationItem node);
    public virtual void ExplicitVisit(SchemaDeclarationItem node);
    public virtual void Visit(SchemaDeclarationItemOpenjson node);
    public virtual void ExplicitVisit(SchemaDeclarationItemOpenjson node);
    public virtual void Visit(ConvertCall node);
    public virtual void ExplicitVisit(ConvertCall node);
    public virtual void Visit(TryConvertCall node);
    public virtual void ExplicitVisit(TryConvertCall node);
    public virtual void Visit(ParseCall node);
    public virtual void ExplicitVisit(ParseCall node);
    public virtual void Visit(TryParseCall node);
    public virtual void ExplicitVisit(TryParseCall node);
    public virtual void Visit(CastCall node);
    public virtual void ExplicitVisit(CastCall node);
    public virtual void Visit(TryCastCall node);
    public virtual void ExplicitVisit(TryCastCall node);
    public virtual void Visit(AtTimeZoneCall node);
    public virtual void ExplicitVisit(AtTimeZoneCall node);
    public virtual void Visit(FunctionCall node);
    public virtual void ExplicitVisit(FunctionCall node);
    public virtual void Visit(CallTarget node);
    public virtual void ExplicitVisit(CallTarget node);
    public virtual void Visit(ExpressionCallTarget node);
    public virtual void ExplicitVisit(ExpressionCallTarget node);
    public virtual void Visit(MultiPartIdentifierCallTarget node);
    public virtual void ExplicitVisit(MultiPartIdentifierCallTarget node);
    public virtual void Visit(UserDefinedTypeCallTarget node);
    public virtual void ExplicitVisit(UserDefinedTypeCallTarget node);
    public virtual void Visit(LeftFunctionCall node);
    public virtual void ExplicitVisit(LeftFunctionCall node);
    public virtual void Visit(RightFunctionCall node);
    public virtual void ExplicitVisit(RightFunctionCall node);
    public virtual void Visit(PartitionFunctionCall node);
    public virtual void ExplicitVisit(PartitionFunctionCall node);
    public virtual void Visit(OverClause node);
    public virtual void ExplicitVisit(OverClause node);
    public virtual void Visit(ParameterlessCall node);
    public virtual void ExplicitVisit(ParameterlessCall node);
    public virtual void Visit(ScalarSubquery node);
    public virtual void ExplicitVisit(ScalarSubquery node);
    public virtual void Visit(OdbcFunctionCall node);
    public virtual void ExplicitVisit(OdbcFunctionCall node);
    public virtual void Visit(ExtractFromExpression node);
    public virtual void ExplicitVisit(ExtractFromExpression node);
    public virtual void Visit(OdbcConvertSpecification node);
    public virtual void ExplicitVisit(OdbcConvertSpecification node);
    public virtual void Visit(AlterFunctionStatement node);
    public virtual void ExplicitVisit(AlterFunctionStatement node);
    public virtual void Visit(BeginEndBlockStatement node);
    public virtual void ExplicitVisit(BeginEndBlockStatement node);
    public virtual void Visit(BeginEndAtomicBlockStatement node);
    public virtual void ExplicitVisit(BeginEndAtomicBlockStatement node);
    public virtual void Visit(AtomicBlockOption node);
    public virtual void ExplicitVisit(AtomicBlockOption node);
    public virtual void Visit(LiteralAtomicBlockOption node);
    public virtual void ExplicitVisit(LiteralAtomicBlockOption node);
    public virtual void Visit(IdentifierAtomicBlockOption node);
    public virtual void ExplicitVisit(IdentifierAtomicBlockOption node);
    public virtual void Visit(OnOffAtomicBlockOption node);
    public virtual void ExplicitVisit(OnOffAtomicBlockOption node);
    public virtual void Visit(BeginTransactionStatement node);
    public virtual void ExplicitVisit(BeginTransactionStatement node);
    public virtual void Visit(BreakStatement node);
    public virtual void ExplicitVisit(BreakStatement node);
    public virtual void Visit(ColumnWithSortOrder node);
    public virtual void ExplicitVisit(ColumnWithSortOrder node);
    public virtual void Visit(CommitTransactionStatement node);
    public virtual void ExplicitVisit(CommitTransactionStatement node);
    public virtual void Visit(RollbackTransactionStatement node);
    public virtual void ExplicitVisit(RollbackTransactionStatement node);
    public virtual void Visit(SaveTransactionStatement node);
    public virtual void ExplicitVisit(SaveTransactionStatement node);
    public virtual void Visit(ContinueStatement node);
    public virtual void ExplicitVisit(ContinueStatement node);
    public virtual void Visit(CreateDefaultStatement node);
    public virtual void ExplicitVisit(CreateDefaultStatement node);
    public virtual void Visit(CreateFunctionStatement node);
    public virtual void ExplicitVisit(CreateFunctionStatement node);
    public virtual void Visit(CreateOrAlterFunctionStatement node);
    public virtual void ExplicitVisit(CreateOrAlterFunctionStatement node);
    public virtual void Visit(CreateRuleStatement node);
    public virtual void ExplicitVisit(CreateRuleStatement node);
    public virtual void Visit(DeclareVariableElement node);
    public virtual void ExplicitVisit(DeclareVariableElement node);
    public virtual void Visit(DeclareVariableStatement node);
    public virtual void ExplicitVisit(DeclareVariableStatement node);
    public virtual void Visit(GoToStatement node);
    public virtual void ExplicitVisit(GoToStatement node);
    public virtual void Visit(IfStatement node);
    public virtual void ExplicitVisit(IfStatement node);
    public virtual void Visit(LabelStatement node);
    public virtual void ExplicitVisit(LabelStatement node);
    public virtual void Visit(MultiPartIdentifier node);
    public virtual void ExplicitVisit(MultiPartIdentifier node);
    public virtual void Visit(SchemaObjectName node);
    public virtual void ExplicitVisit(SchemaObjectName node);
    public virtual void Visit(ChildObjectName node);
    public virtual void ExplicitVisit(ChildObjectName node);
    public virtual void Visit(ProcedureParameter node);
    public virtual void ExplicitVisit(ProcedureParameter node);
    public virtual void Visit(TransactionStatement node);
    public virtual void ExplicitVisit(TransactionStatement node);
    public virtual void Visit(WhileStatement node);
    public virtual void ExplicitVisit(WhileStatement node);
    public virtual void Visit(DeleteStatement node);
    public virtual void ExplicitVisit(DeleteStatement node);
    public virtual void Visit(UpdateDeleteSpecificationBase node);
    public virtual void ExplicitVisit(UpdateDeleteSpecificationBase node);
    public virtual void Visit(DeleteSpecification node);
    public virtual void ExplicitVisit(DeleteSpecification node);
    public virtual void Visit(InsertStatement node);
    public virtual void ExplicitVisit(InsertStatement node);
    public virtual void Visit(InsertSpecification node);
    public virtual void ExplicitVisit(InsertSpecification node);
    public virtual void Visit(UpdateStatement node);
    public virtual void ExplicitVisit(UpdateStatement node);
    public virtual void Visit(UpdateSpecification node);
    public virtual void ExplicitVisit(UpdateSpecification node);
    public virtual void Visit(CreateSchemaStatement node);
    public virtual void ExplicitVisit(CreateSchemaStatement node);
    public virtual void Visit(WaitForStatement node);
    public virtual void ExplicitVisit(WaitForStatement node);
    public virtual void Visit(ReadTextStatement node);
    public virtual void ExplicitVisit(ReadTextStatement node);
    public virtual void Visit(UpdateTextStatement node);
    public virtual void ExplicitVisit(UpdateTextStatement node);
    public virtual void Visit(WriteTextStatement node);
    public virtual void ExplicitVisit(WriteTextStatement node);
    public virtual void Visit(TextModificationStatement node);
    public virtual void ExplicitVisit(TextModificationStatement node);
    public virtual void Visit(LineNoStatement node);
    public virtual void ExplicitVisit(LineNoStatement node);
    public virtual void Visit(SecurityStatement node);
    public virtual void ExplicitVisit(SecurityStatement node);
    public virtual void Visit(GrantStatement node);
    public virtual void ExplicitVisit(GrantStatement node);
    public virtual void Visit(DenyStatement node);
    public virtual void ExplicitVisit(DenyStatement node);
    public virtual void Visit(RevokeStatement node);
    public virtual void ExplicitVisit(RevokeStatement node);
    public virtual void Visit(AlterAuthorizationStatement node);
    public virtual void ExplicitVisit(AlterAuthorizationStatement node);
    public virtual void Visit(Permission node);
    public virtual void ExplicitVisit(Permission node);
    public virtual void Visit(SecurityTargetObject node);
    public virtual void ExplicitVisit(SecurityTargetObject node);
    public virtual void Visit(SecurityTargetObjectName node);
    public virtual void ExplicitVisit(SecurityTargetObjectName node);
    public virtual void Visit(SecurityPrincipal node);
    public virtual void ExplicitVisit(SecurityPrincipal node);
    public virtual void Visit(SecurityStatementBody80 node);
    public virtual void ExplicitVisit(SecurityStatementBody80 node);
    public virtual void Visit(GrantStatement80 node);
    public virtual void ExplicitVisit(GrantStatement80 node);
    public virtual void Visit(DenyStatement80 node);
    public virtual void ExplicitVisit(DenyStatement80 node);
    public virtual void Visit(RevokeStatement80 node);
    public virtual void ExplicitVisit(RevokeStatement80 node);
    public virtual void Visit(SecurityElement80 node);
    public virtual void ExplicitVisit(SecurityElement80 node);
    public virtual void Visit(CommandSecurityElement80 node);
    public virtual void ExplicitVisit(CommandSecurityElement80 node);
    public virtual void Visit(PrivilegeSecurityElement80 node);
    public virtual void ExplicitVisit(PrivilegeSecurityElement80 node);
    public virtual void Visit(Privilege80 node);
    public virtual void ExplicitVisit(Privilege80 node);
    public virtual void Visit(SecurityUserClause80 node);
    public virtual void ExplicitVisit(SecurityUserClause80 node);
    public virtual void Visit(SqlCommandIdentifier node);
    public virtual void ExplicitVisit(SqlCommandIdentifier node);
    public virtual void Visit(SetClause node);
    public virtual void ExplicitVisit(SetClause node);
    public virtual void Visit(AssignmentSetClause node);
    public virtual void ExplicitVisit(AssignmentSetClause node);
    public virtual void Visit(FunctionCallSetClause node);
    public virtual void ExplicitVisit(FunctionCallSetClause node);
    public virtual void Visit(InsertSource node);
    public virtual void ExplicitVisit(InsertSource node);
    public virtual void Visit(ValuesInsertSource node);
    public virtual void ExplicitVisit(ValuesInsertSource node);
    public virtual void Visit(SelectInsertSource node);
    public virtual void ExplicitVisit(SelectInsertSource node);
    public virtual void Visit(ExecuteInsertSource node);
    public virtual void ExplicitVisit(ExecuteInsertSource node);
    public virtual void Visit(RowValue node);
    public virtual void ExplicitVisit(RowValue node);
    public virtual void Visit(PrintStatement node);
    public virtual void ExplicitVisit(PrintStatement node);
    public virtual void Visit(UpdateCall node);
    public virtual void ExplicitVisit(UpdateCall node);
    public virtual void Visit(TSEqualCall node);
    public virtual void ExplicitVisit(TSEqualCall node);
    public virtual void Visit(PrimaryExpression node);
    public virtual void ExplicitVisit(PrimaryExpression node);
    public virtual void Visit(Literal node);
    public virtual void ExplicitVisit(Literal node);
    public virtual void Visit(IntegerLiteral node);
    public virtual void ExplicitVisit(IntegerLiteral node);
    public virtual void Visit(NumericLiteral node);
    public virtual void ExplicitVisit(NumericLiteral node);
    public virtual void Visit(RealLiteral node);
    public virtual void ExplicitVisit(RealLiteral node);
    public virtual void Visit(MoneyLiteral node);
    public virtual void ExplicitVisit(MoneyLiteral node);
    public virtual void Visit(BinaryLiteral node);
    public virtual void ExplicitVisit(BinaryLiteral node);
    public virtual void Visit(StringLiteral node);
    public virtual void ExplicitVisit(StringLiteral node);
    public virtual void Visit(NullLiteral node);
    public virtual void ExplicitVisit(NullLiteral node);
    public virtual void Visit(IdentifierLiteral node);
    public virtual void ExplicitVisit(IdentifierLiteral node);
    public virtual void Visit(DefaultLiteral node);
    public virtual void ExplicitVisit(DefaultLiteral node);
    public virtual void Visit(MaxLiteral node);
    public virtual void ExplicitVisit(MaxLiteral node);
    public virtual void Visit(OdbcLiteral node);
    public virtual void ExplicitVisit(OdbcLiteral node);
    public virtual void Visit(LiteralRange node);
    public virtual void ExplicitVisit(LiteralRange node);
    public virtual void Visit(ValueExpression node);
    public virtual void ExplicitVisit(ValueExpression node);
    public virtual void Visit(VariableReference node);
    public virtual void ExplicitVisit(VariableReference node);
    public virtual void Visit(OptionValue node);
    public virtual void ExplicitVisit(OptionValue node);
    public virtual void Visit(OnOffOptionValue node);
    public virtual void ExplicitVisit(OnOffOptionValue node);
    public virtual void Visit(LiteralOptionValue node);
    public virtual void ExplicitVisit(LiteralOptionValue node);
    public virtual void Visit(GlobalVariableExpression node);
    public virtual void ExplicitVisit(GlobalVariableExpression node);
    public virtual void Visit(IdentifierOrValueExpression node);
    public virtual void ExplicitVisit(IdentifierOrValueExpression node);
    public virtual void Visit(IdentifierOrScalarExpression node);
    public virtual void ExplicitVisit(IdentifierOrScalarExpression node);
    public virtual void Visit(SchemaObjectNameOrValueExpression node);
    public virtual void ExplicitVisit(SchemaObjectNameOrValueExpression node);
    public virtual void Visit(ParenthesisExpression node);
    public virtual void ExplicitVisit(ParenthesisExpression node);
    public virtual void Visit(ColumnReferenceExpression node);
    public virtual void ExplicitVisit(ColumnReferenceExpression node);
    public virtual void Visit(NextValueForExpression node);
    public virtual void ExplicitVisit(NextValueForExpression node);
    public virtual void Visit(SequenceStatement node);
    public virtual void ExplicitVisit(SequenceStatement node);
    public virtual void Visit(SequenceOption node);
    public virtual void ExplicitVisit(SequenceOption node);
    public virtual void Visit(DataTypeSequenceOption node);
    public virtual void ExplicitVisit(DataTypeSequenceOption node);
    public virtual void Visit(ScalarExpressionSequenceOption node);
    public virtual void ExplicitVisit(ScalarExpressionSequenceOption node);
    public virtual void Visit(CreateSequenceStatement node);
    public virtual void ExplicitVisit(CreateSequenceStatement node);
    public virtual void Visit(AlterSequenceStatement node);
    public virtual void ExplicitVisit(AlterSequenceStatement node);
    public virtual void Visit(DropSequenceStatement node);
    public virtual void ExplicitVisit(DropSequenceStatement node);
    public virtual void Visit(SecurityPolicyStatement node);
    public virtual void ExplicitVisit(SecurityPolicyStatement node);
    public virtual void Visit(SecurityPredicateAction node);
    public virtual void ExplicitVisit(SecurityPredicateAction node);
    public virtual void Visit(SecurityPolicyOption node);
    public virtual void ExplicitVisit(SecurityPolicyOption node);
    public virtual void Visit(CreateSecurityPolicyStatement node);
    public virtual void ExplicitVisit(CreateSecurityPolicyStatement node);
    public virtual void Visit(AlterSecurityPolicyStatement node);
    public virtual void ExplicitVisit(AlterSecurityPolicyStatement node);
    public virtual void Visit(DropSecurityPolicyStatement node);
    public virtual void ExplicitVisit(DropSecurityPolicyStatement node);
    public virtual void Visit(CreateColumnMasterKeyStatement node);
    public virtual void ExplicitVisit(CreateColumnMasterKeyStatement node);
    public virtual void Visit(ColumnMasterKeyParameter node);
    public virtual void ExplicitVisit(ColumnMasterKeyParameter node);
    public virtual void Visit(ColumnMasterKeyStoreProviderNameParameter node);
    public virtual void ExplicitVisit(ColumnMasterKeyStoreProviderNameParameter node);
    public virtual void Visit(ColumnMasterKeyPathParameter node);
    public virtual void ExplicitVisit(ColumnMasterKeyPathParameter node);
    public virtual void Visit(ColumnMasterKeyEnclaveComputationsParameter node);
    public virtual void ExplicitVisit(ColumnMasterKeyEnclaveComputationsParameter node);
    public virtual void Visit(DropColumnMasterKeyStatement node);
    public virtual void ExplicitVisit(DropColumnMasterKeyStatement node);
    public virtual void Visit(ColumnEncryptionKeyStatement node);
    public virtual void ExplicitVisit(ColumnEncryptionKeyStatement node);
    public virtual void Visit(CreateColumnEncryptionKeyStatement node);
    public virtual void ExplicitVisit(CreateColumnEncryptionKeyStatement node);
    public virtual void Visit(AlterColumnEncryptionKeyStatement node);
    public virtual void ExplicitVisit(AlterColumnEncryptionKeyStatement node);
    public virtual void Visit(DropColumnEncryptionKeyStatement node);
    public virtual void ExplicitVisit(DropColumnEncryptionKeyStatement node);
    public virtual void Visit(ColumnEncryptionKeyValue node);
    public virtual void ExplicitVisit(ColumnEncryptionKeyValue node);
    public virtual void Visit(ColumnEncryptionKeyValueParameter node);
    public virtual void ExplicitVisit(ColumnEncryptionKeyValueParameter node);
    public virtual void Visit(ColumnMasterKeyNameParameter node);
    public virtual void ExplicitVisit(ColumnMasterKeyNameParameter node);
    public virtual void Visit(ColumnEncryptionAlgorithmNameParameter node);
    public virtual void ExplicitVisit(ColumnEncryptionAlgorithmNameParameter node);
    public virtual void Visit(EncryptedValueParameter node);
    public virtual void ExplicitVisit(EncryptedValueParameter node);
    public virtual void Visit(ExternalTableStatement node);
    public virtual void ExplicitVisit(ExternalTableStatement node);
    public virtual void Visit(ExternalTableOption node);
    public virtual void ExplicitVisit(ExternalTableOption node);
    public virtual void Visit(ExternalTableLiteralOrIdentifierOption node);
    public virtual void ExplicitVisit(ExternalTableLiteralOrIdentifierOption node);
    public virtual void Visit(ExternalTableDistributionOption node);
    public virtual void ExplicitVisit(ExternalTableDistributionOption node);
    public virtual void Visit(ExternalTableRejectTypeOption node);
    public virtual void ExplicitVisit(ExternalTableRejectTypeOption node);
    public virtual void Visit(ExternalTableDistributionPolicy node);
    public virtual void ExplicitVisit(ExternalTableDistributionPolicy node);
    public virtual void Visit(ExternalTableReplicatedDistributionPolicy node);
    public virtual void ExplicitVisit(ExternalTableReplicatedDistributionPolicy node);
    public virtual void Visit(ExternalTableRoundRobinDistributionPolicy node);
    public virtual void ExplicitVisit(ExternalTableRoundRobinDistributionPolicy node);
    public virtual void Visit(ExternalTableShardedDistributionPolicy node);
    public virtual void ExplicitVisit(ExternalTableShardedDistributionPolicy node);
    public virtual void Visit(CreateExternalTableStatement node);
    public virtual void ExplicitVisit(CreateExternalTableStatement node);
    public virtual void Visit(DropExternalTableStatement node);
    public virtual void ExplicitVisit(DropExternalTableStatement node);
    public virtual void Visit(ExternalDataSourceStatement node);
    public virtual void ExplicitVisit(ExternalDataSourceStatement node);
    public virtual void Visit(ExternalDataSourceOption node);
    public virtual void ExplicitVisit(ExternalDataSourceOption node);
    public virtual void Visit(ExternalDataSourceLiteralOrIdentifierOption node);
    public virtual void ExplicitVisit(ExternalDataSourceLiteralOrIdentifierOption node);
    public virtual void Visit(CreateExternalDataSourceStatement node);
    public virtual void ExplicitVisit(CreateExternalDataSourceStatement node);
    public virtual void Visit(AlterExternalDataSourceStatement node);
    public virtual void ExplicitVisit(AlterExternalDataSourceStatement node);
    public virtual void Visit(DropExternalDataSourceStatement node);
    public virtual void ExplicitVisit(DropExternalDataSourceStatement node);
    public virtual void Visit(ExternalStreamStatement node);
    public virtual void ExplicitVisit(ExternalStreamStatement node);
    public virtual void Visit(ExternalStreamOption node);
    public virtual void ExplicitVisit(ExternalStreamOption node);
    public virtual void Visit(ExternalStreamLiteralOrIdentifierOption node);
    public virtual void ExplicitVisit(ExternalStreamLiteralOrIdentifierOption node);
    public virtual void Visit(CreateExternalStreamStatement node);
    public virtual void ExplicitVisit(CreateExternalStreamStatement node);
    public virtual void Visit(DropExternalStreamStatement node);
    public virtual void ExplicitVisit(DropExternalStreamStatement node);
    public virtual void Visit(ExternalFileFormatStatement node);
    public virtual void ExplicitVisit(ExternalFileFormatStatement node);
    public virtual void Visit(ExternalFileFormatOption node);
    public virtual void ExplicitVisit(ExternalFileFormatOption node);
    public virtual void Visit(ExternalFileFormatLiteralOption node);
    public virtual void ExplicitVisit(ExternalFileFormatLiteralOption node);
    public virtual void Visit(ExternalFileFormatUseDefaultTypeOption node);
    public virtual void ExplicitVisit(ExternalFileFormatUseDefaultTypeOption node);
    public virtual void Visit(ExternalFileFormatContainerOption node);
    public virtual void ExplicitVisit(ExternalFileFormatContainerOption node);
    public virtual void Visit(CreateExternalFileFormatStatement node);
    public virtual void ExplicitVisit(CreateExternalFileFormatStatement node);
    public virtual void Visit(DropExternalFileFormatStatement node);
    public virtual void ExplicitVisit(DropExternalFileFormatStatement node);
    public virtual void Visit(ExternalStreamingJobStatement node);
    public virtual void ExplicitVisit(ExternalStreamingJobStatement node);
    public virtual void Visit(CreateExternalStreamingJobStatement node);
    public virtual void ExplicitVisit(CreateExternalStreamingJobStatement node);
    public virtual void Visit(DropExternalStreamingJobStatement node);
    public virtual void ExplicitVisit(DropExternalStreamingJobStatement node);
    public virtual void Visit(AssemblyStatement node);
    public virtual void ExplicitVisit(AssemblyStatement node);
    public virtual void Visit(CreateAssemblyStatement node);
    public virtual void ExplicitVisit(CreateAssemblyStatement node);
    public virtual void Visit(AlterAssemblyStatement node);
    public virtual void ExplicitVisit(AlterAssemblyStatement node);
    public virtual void Visit(AssemblyOption node);
    public virtual void ExplicitVisit(AssemblyOption node);
    public virtual void Visit(OnOffAssemblyOption node);
    public virtual void ExplicitVisit(OnOffAssemblyOption node);
    public virtual void Visit(PermissionSetAssemblyOption node);
    public virtual void ExplicitVisit(PermissionSetAssemblyOption node);
    public virtual void Visit(AddFileSpec node);
    public virtual void ExplicitVisit(AddFileSpec node);
    public virtual void Visit(CreateXmlSchemaCollectionStatement node);
    public virtual void ExplicitVisit(CreateXmlSchemaCollectionStatement node);
    public virtual void Visit(AlterXmlSchemaCollectionStatement node);
    public virtual void ExplicitVisit(AlterXmlSchemaCollectionStatement node);
    public virtual void Visit(DropXmlSchemaCollectionStatement node);
    public virtual void ExplicitVisit(DropXmlSchemaCollectionStatement node);
    public virtual void Visit(AssemblyName node);
    public virtual void ExplicitVisit(AssemblyName node);
    public virtual void Visit(AlterTableStatement node);
    public virtual void ExplicitVisit(AlterTableStatement node);
    public virtual void Visit(AlterTableAlterPartitionStatement node);
    public virtual void ExplicitVisit(AlterTableAlterPartitionStatement node);
    public virtual void Visit(AlterTableRebuildStatement node);
    public virtual void ExplicitVisit(AlterTableRebuildStatement node);
    public virtual void Visit(AlterTableChangeTrackingModificationStatement node);
    public virtual void ExplicitVisit(AlterTableChangeTrackingModificationStatement node);
    public virtual void Visit(AlterTableFileTableNamespaceStatement node);
    public virtual void ExplicitVisit(AlterTableFileTableNamespaceStatement node);
    public virtual void Visit(AlterTableSetStatement node);
    public virtual void ExplicitVisit(AlterTableSetStatement node);
    public virtual void Visit(TableOption node);
    public virtual void ExplicitVisit(TableOption node);
    public virtual void Visit(LockEscalationTableOption node);
    public virtual void ExplicitVisit(LockEscalationTableOption node);
    public virtual void Visit(FileStreamOnTableOption node);
    public virtual void ExplicitVisit(FileStreamOnTableOption node);
    public virtual void Visit(FileTableDirectoryTableOption node);
    public virtual void ExplicitVisit(FileTableDirectoryTableOption node);
    public virtual void Visit(FileTableCollateFileNameTableOption node);
    public virtual void ExplicitVisit(FileTableCollateFileNameTableOption node);
    public virtual void Visit(FileTableConstraintNameTableOption node);
    public virtual void ExplicitVisit(FileTableConstraintNameTableOption node);
    public virtual void Visit(MemoryOptimizedTableOption node);
    public virtual void ExplicitVisit(MemoryOptimizedTableOption node);
    public virtual void Visit(DurabilityTableOption node);
    public virtual void ExplicitVisit(DurabilityTableOption node);
    public virtual void Visit(RemoteDataArchiveTableOption node);
    public virtual void ExplicitVisit(RemoteDataArchiveTableOption node);
    public virtual void Visit(RemoteDataArchiveAlterTableOption node);
    public virtual void ExplicitVisit(RemoteDataArchiveAlterTableOption node);
    public virtual void Visit(RemoteDataArchiveDatabaseOption node);
    public virtual void ExplicitVisit(RemoteDataArchiveDatabaseOption node);
    public virtual void Visit(RemoteDataArchiveDatabaseSetting node);
    public virtual void ExplicitVisit(RemoteDataArchiveDatabaseSetting node);
    public virtual void Visit(RemoteDataArchiveDbServerSetting node);
    public virtual void ExplicitVisit(RemoteDataArchiveDbServerSetting node);
    public virtual void Visit(RemoteDataArchiveDbCredentialSetting node);
    public virtual void ExplicitVisit(RemoteDataArchiveDbCredentialSetting node);
    public virtual void Visit(RemoteDataArchiveDbFederatedServiceAccountSetting node);
    public virtual void ExplicitVisit(RemoteDataArchiveDbFederatedServiceAccountSetting node);
    public virtual void Visit(RetentionPeriodDefinition node);
    public virtual void ExplicitVisit(RetentionPeriodDefinition node);
    public virtual void Visit(SystemVersioningTableOption node);
    public virtual void ExplicitVisit(SystemVersioningTableOption node);
    public virtual void Visit(LedgerTableOption node);
    public virtual void ExplicitVisit(LedgerTableOption node);
    public virtual void Visit(LedgerViewOption node);
    public virtual void ExplicitVisit(LedgerViewOption node);
    public virtual void Visit(DataRetentionTableOption node);
    public virtual void ExplicitVisit(DataRetentionTableOption node);
    public virtual void Visit(AlterTableAddTableElementStatement node);
    public virtual void ExplicitVisit(AlterTableAddTableElementStatement node);
    public virtual void Visit(AlterTableConstraintModificationStatement node);
    public virtual void ExplicitVisit(AlterTableConstraintModificationStatement node);
    public virtual void Visit(AlterTableSwitchStatement node);
    public virtual void ExplicitVisit(AlterTableSwitchStatement node);
    public virtual void Visit(TableSwitchOption node);
    public virtual void ExplicitVisit(TableSwitchOption node);
    public virtual void Visit(LowPriorityLockWaitTableSwitchOption node);
    public virtual void ExplicitVisit(LowPriorityLockWaitTableSwitchOption node);
    public virtual void Visit(TruncateTargetTableSwitchOption node);
    public virtual void ExplicitVisit(TruncateTargetTableSwitchOption node);
    public virtual void Visit(DropClusteredConstraintOption node);
    public virtual void ExplicitVisit(DropClusteredConstraintOption node);
    public virtual void Visit(DropClusteredConstraintStateOption node);
    public virtual void ExplicitVisit(DropClusteredConstraintStateOption node);
    public virtual void Visit(DropClusteredConstraintValueOption node);
    public virtual void ExplicitVisit(DropClusteredConstraintValueOption node);
    public virtual void Visit(DropClusteredConstraintMoveOption node);
    public virtual void ExplicitVisit(DropClusteredConstraintMoveOption node);
    public virtual void Visit(DropClusteredConstraintWaitAtLowPriorityLockOption node);
    public virtual void ExplicitVisit(DropClusteredConstraintWaitAtLowPriorityLockOption node);
    public virtual void Visit(AlterTableDropTableElement node);
    public virtual void ExplicitVisit(AlterTableDropTableElement node);
    public virtual void Visit(AlterTableDropTableElementStatement node);
    public virtual void ExplicitVisit(AlterTableDropTableElementStatement node);
    public virtual void Visit(AlterTableTriggerModificationStatement node);
    public virtual void ExplicitVisit(AlterTableTriggerModificationStatement node);
    public virtual void Visit(EnableDisableTriggerStatement node);
    public virtual void ExplicitVisit(EnableDisableTriggerStatement node);
    public virtual void Visit(TryCatchStatement node);
    public virtual void ExplicitVisit(TryCatchStatement node);
    public virtual void Visit(CreateTypeStatement node);
    public virtual void ExplicitVisit(CreateTypeStatement node);
    public virtual void Visit(CreateTypeUdtStatement node);
    public virtual void ExplicitVisit(CreateTypeUdtStatement node);
    public virtual void Visit(CreateTypeUddtStatement node);
    public virtual void ExplicitVisit(CreateTypeUddtStatement node);
    public virtual void Visit(CreateSynonymStatement node);
    public virtual void ExplicitVisit(CreateSynonymStatement node);
    public virtual void Visit(ExecuteAsClause node);
    public virtual void ExplicitVisit(ExecuteAsClause node);
    public virtual void Visit(QueueOption node);
    public virtual void ExplicitVisit(QueueOption node);
    public virtual void Visit(QueueStateOption node);
    public virtual void ExplicitVisit(QueueStateOption node);
    public virtual void Visit(QueueProcedureOption node);
    public virtual void ExplicitVisit(QueueProcedureOption node);
    public virtual void Visit(QueueValueOption node);
    public virtual void ExplicitVisit(QueueValueOption node);
    public virtual void Visit(QueueExecuteAsOption node);
    public virtual void ExplicitVisit(QueueExecuteAsOption node);
    public virtual void Visit(RouteOption node);
    public virtual void ExplicitVisit(RouteOption node);
    public virtual void Visit(RouteStatement node);
    public virtual void ExplicitVisit(RouteStatement node);
    public virtual void Visit(AlterRouteStatement node);
    public virtual void ExplicitVisit(AlterRouteStatement node);
    public virtual void Visit(CreateRouteStatement node);
    public virtual void ExplicitVisit(CreateRouteStatement node);
    public virtual void Visit(QueueStatement node);
    public virtual void ExplicitVisit(QueueStatement node);
    public virtual void Visit(AlterQueueStatement node);
    public virtual void ExplicitVisit(AlterQueueStatement node);
    public virtual void Visit(CreateQueueStatement node);
    public virtual void ExplicitVisit(CreateQueueStatement node);
    public virtual void Visit(IndexDefinition node);
    public virtual void ExplicitVisit(IndexDefinition node);
    public virtual void Visit(SystemTimePeriodDefinition node);
    public virtual void ExplicitVisit(SystemTimePeriodDefinition node);
    public virtual void Visit(IndexStatement node);
    public virtual void ExplicitVisit(IndexStatement node);
    public virtual void Visit(IndexType node);
    public virtual void ExplicitVisit(IndexType node);
    public virtual void Visit(PartitionSpecifier node);
    public virtual void ExplicitVisit(PartitionSpecifier node);
    public virtual void Visit(AlterIndexStatement node);
    public virtual void ExplicitVisit(AlterIndexStatement node);
    public virtual void Visit(CreateXmlIndexStatement node);
    public virtual void ExplicitVisit(CreateXmlIndexStatement node);
    public virtual void Visit(CreateSelectiveXmlIndexStatement node);
    public virtual void ExplicitVisit(CreateSelectiveXmlIndexStatement node);
    public virtual void Visit(FileGroupOrPartitionScheme node);
    public virtual void ExplicitVisit(FileGroupOrPartitionScheme node);
    public virtual void Visit(CreateIndexStatement node);
    public virtual void ExplicitVisit(CreateIndexStatement node);
    public virtual void Visit(IndexOption node);
    public virtual void ExplicitVisit(IndexOption node);
    public virtual void Visit(IndexStateOption node);
    public virtual void ExplicitVisit(IndexStateOption node);
    public virtual void Visit(IndexExpressionOption node);
    public virtual void ExplicitVisit(IndexExpressionOption node);
    public virtual void Visit(MaxDurationOption node);
    public virtual void ExplicitVisit(MaxDurationOption node);
    public virtual void Visit(WaitAtLowPriorityOption node);
    public virtual void ExplicitVisit(WaitAtLowPriorityOption node);
    public virtual void Visit(OnlineIndexOption node);
    public virtual void ExplicitVisit(OnlineIndexOption node);
    public virtual void Visit(IgnoreDupKeyIndexOption node);
    public virtual void ExplicitVisit(IgnoreDupKeyIndexOption node);
    public virtual void Visit(OrderIndexOption node);
    public virtual void ExplicitVisit(OrderIndexOption node);
    public virtual void Visit(OnlineIndexLowPriorityLockWaitOption node);
    public virtual void ExplicitVisit(OnlineIndexLowPriorityLockWaitOption node);
    public virtual void Visit(LowPriorityLockWaitOption node);
    public virtual void ExplicitVisit(LowPriorityLockWaitOption node);
    public virtual void Visit(LowPriorityLockWaitMaxDurationOption node);
    public virtual void ExplicitVisit(LowPriorityLockWaitMaxDurationOption node);
    public virtual void Visit(LowPriorityLockWaitAbortAfterWaitOption node);
    public virtual void ExplicitVisit(LowPriorityLockWaitAbortAfterWaitOption node);
    public virtual void Visit(FullTextIndexColumn node);
    public virtual void ExplicitVisit(FullTextIndexColumn node);
    public virtual void Visit(CreateFullTextIndexStatement node);
    public virtual void ExplicitVisit(CreateFullTextIndexStatement node);
    public virtual void Visit(FullTextIndexOption node);
    public virtual void ExplicitVisit(FullTextIndexOption node);
    public virtual void Visit(ChangeTrackingFullTextIndexOption node);
    public virtual void ExplicitVisit(ChangeTrackingFullTextIndexOption node);
    public virtual void Visit(StopListFullTextIndexOption node);
    public virtual void ExplicitVisit(StopListFullTextIndexOption node);
    public virtual void Visit(SearchPropertyListFullTextIndexOption node);
    public virtual void ExplicitVisit(SearchPropertyListFullTextIndexOption node);
    public virtual void Visit(FullTextCatalogAndFileGroup node);
    public virtual void ExplicitVisit(FullTextCatalogAndFileGroup node);
    public virtual void Visit(EventTypeGroupContainer node);
    public virtual void ExplicitVisit(EventTypeGroupContainer node);
    public virtual void Visit(EventTypeContainer node);
    public virtual void ExplicitVisit(EventTypeContainer node);
    public virtual void Visit(EventGroupContainer node);
    public virtual void ExplicitVisit(EventGroupContainer node);
    public virtual void Visit(CreateEventNotificationStatement node);
    public virtual void ExplicitVisit(CreateEventNotificationStatement node);
    public virtual void Visit(EventNotificationObjectScope node);
    public virtual void ExplicitVisit(EventNotificationObjectScope node);
    public virtual void Visit(MasterKeyStatement node);
    public virtual void ExplicitVisit(MasterKeyStatement node);
    public virtual void Visit(CreateMasterKeyStatement node);
    public virtual void ExplicitVisit(CreateMasterKeyStatement node);
    public virtual void Visit(AlterMasterKeyStatement node);
    public virtual void ExplicitVisit(AlterMasterKeyStatement node);
    public virtual void Visit(ApplicationRoleOption node);
    public virtual void ExplicitVisit(ApplicationRoleOption node);
    public virtual void Visit(ApplicationRoleStatement node);
    public virtual void ExplicitVisit(ApplicationRoleStatement node);
    public virtual void Visit(CreateApplicationRoleStatement node);
    public virtual void ExplicitVisit(CreateApplicationRoleStatement node);
    public virtual void Visit(AlterApplicationRoleStatement node);
    public virtual void ExplicitVisit(AlterApplicationRoleStatement node);
    public virtual void Visit(RoleStatement node);
    public virtual void ExplicitVisit(RoleStatement node);
    public virtual void Visit(CreateRoleStatement node);
    public virtual void ExplicitVisit(CreateRoleStatement node);
    public virtual void Visit(AlterRoleStatement node);
    public virtual void ExplicitVisit(AlterRoleStatement node);
    public virtual void Visit(AlterRoleAction node);
    public virtual void ExplicitVisit(AlterRoleAction node);
    public virtual void Visit(RenameAlterRoleAction node);
    public virtual void ExplicitVisit(RenameAlterRoleAction node);
    public virtual void Visit(AddMemberAlterRoleAction node);
    public virtual void ExplicitVisit(AddMemberAlterRoleAction node);
    public virtual void Visit(DropMemberAlterRoleAction node);
    public virtual void ExplicitVisit(DropMemberAlterRoleAction node);
    public virtual void Visit(CreateServerRoleStatement node);
    public virtual void ExplicitVisit(CreateServerRoleStatement node);
    public virtual void Visit(AlterServerRoleStatement node);
    public virtual void ExplicitVisit(AlterServerRoleStatement node);
    public virtual void Visit(DropServerRoleStatement node);
    public virtual void ExplicitVisit(DropServerRoleStatement node);
    public virtual void Visit(UserLoginOption node);
    public virtual void ExplicitVisit(UserLoginOption node);
    public virtual void Visit(UserStatement node);
    public virtual void ExplicitVisit(UserStatement node);
    public virtual void Visit(CreateUserStatement node);
    public virtual void ExplicitVisit(CreateUserStatement node);
    public virtual void Visit(AlterUserStatement node);
    public virtual void ExplicitVisit(AlterUserStatement node);
    public virtual void Visit(StatisticsOption node);
    public virtual void ExplicitVisit(StatisticsOption node);
    public virtual void Visit(ResampleStatisticsOption node);
    public virtual void ExplicitVisit(ResampleStatisticsOption node);
    public virtual void Visit(StatisticsPartitionRange node);
    public virtual void ExplicitVisit(StatisticsPartitionRange node);
    public virtual void Visit(OnOffStatisticsOption node);
    public virtual void ExplicitVisit(OnOffStatisticsOption node);
    public virtual void Visit(LiteralStatisticsOption node);
    public virtual void ExplicitVisit(LiteralStatisticsOption node);
    public virtual void Visit(CreateStatisticsStatement node);
    public virtual void ExplicitVisit(CreateStatisticsStatement node);
    public virtual void Visit(UpdateStatisticsStatement node);
    public virtual void ExplicitVisit(UpdateStatisticsStatement node);
    public virtual void Visit(ReturnStatement node);
    public virtual void ExplicitVisit(ReturnStatement node);
    public virtual void Visit(DeclareCursorStatement node);
    public virtual void ExplicitVisit(DeclareCursorStatement node);
    public virtual void Visit(CursorDefinition node);
    public virtual void ExplicitVisit(CursorDefinition node);
    public virtual void Visit(CursorOption node);
    public virtual void ExplicitVisit(CursorOption node);
    public virtual void Visit(SetVariableStatement node);
    public virtual void ExplicitVisit(SetVariableStatement node);
    public virtual void Visit(CursorId node);
    public virtual void ExplicitVisit(CursorId node);
    public virtual void Visit(CursorStatement node);
    public virtual void ExplicitVisit(CursorStatement node);
    public virtual void Visit(OpenCursorStatement node);
    public virtual void ExplicitVisit(OpenCursorStatement node);
    public virtual void Visit(CloseCursorStatement node);
    public virtual void ExplicitVisit(CloseCursorStatement node);
    public virtual void Visit(CryptoMechanism node);
    public virtual void ExplicitVisit(CryptoMechanism node);
    public virtual void Visit(OpenSymmetricKeyStatement node);
    public virtual void ExplicitVisit(OpenSymmetricKeyStatement node);
    public virtual void Visit(CloseSymmetricKeyStatement node);
    public virtual void ExplicitVisit(CloseSymmetricKeyStatement node);
    public virtual void Visit(OpenMasterKeyStatement node);
    public virtual void ExplicitVisit(OpenMasterKeyStatement node);
    public virtual void Visit(CloseMasterKeyStatement node);
    public virtual void ExplicitVisit(CloseMasterKeyStatement node);
    public virtual void Visit(DeallocateCursorStatement node);
    public virtual void ExplicitVisit(DeallocateCursorStatement node);
    public virtual void Visit(FetchType node);
    public virtual void ExplicitVisit(FetchType node);
    public virtual void Visit(FetchCursorStatement node);
    public virtual void ExplicitVisit(FetchCursorStatement node);
    public virtual void Visit(WhereClause node);
    public virtual void ExplicitVisit(WhereClause node);
    public virtual void Visit(DropUnownedObjectStatement node);
    public virtual void ExplicitVisit(DropUnownedObjectStatement node);
    public virtual void Visit(DropObjectsStatement node);
    public virtual void ExplicitVisit(DropObjectsStatement node);
    public virtual void Visit(DropDatabaseStatement node);
    public virtual void ExplicitVisit(DropDatabaseStatement node);
    public virtual void Visit(DropChildObjectsStatement node);
    public virtual void ExplicitVisit(DropChildObjectsStatement node);
    public virtual void Visit(DropIndexStatement node);
    public virtual void ExplicitVisit(DropIndexStatement node);
    public virtual void Visit(DropIndexClauseBase node);
    public virtual void ExplicitVisit(DropIndexClauseBase node);
    public virtual void Visit(BackwardsCompatibleDropIndexClause node);
    public virtual void ExplicitVisit(BackwardsCompatibleDropIndexClause node);
    public virtual void Visit(DropIndexClause node);
    public virtual void ExplicitVisit(DropIndexClause node);
    public virtual void Visit(MoveToDropIndexOption node);
    public virtual void ExplicitVisit(MoveToDropIndexOption node);
    public virtual void Visit(FileStreamOnDropIndexOption node);
    public virtual void ExplicitVisit(FileStreamOnDropIndexOption node);
    public virtual void Visit(DropStatisticsStatement node);
    public virtual void ExplicitVisit(DropStatisticsStatement node);
    public virtual void Visit(DropTableStatement node);
    public virtual void ExplicitVisit(DropTableStatement node);
    public virtual void Visit(DropProcedureStatement node);
    public virtual void ExplicitVisit(DropProcedureStatement node);
    public virtual void Visit(DropFunctionStatement node);
    public virtual void ExplicitVisit(DropFunctionStatement node);
    public virtual void Visit(DropViewStatement node);
    public virtual void ExplicitVisit(DropViewStatement node);
    public virtual void Visit(DropDefaultStatement node);
    public virtual void ExplicitVisit(DropDefaultStatement node);
    public virtual void Visit(DropRuleStatement node);
    public virtual void ExplicitVisit(DropRuleStatement node);
    public virtual void Visit(DropTriggerStatement node);
    public virtual void ExplicitVisit(DropTriggerStatement node);
    public virtual void Visit(DropSchemaStatement node);
    public virtual void ExplicitVisit(DropSchemaStatement node);
    public virtual void Visit(RaiseErrorLegacyStatement node);
    public virtual void ExplicitVisit(RaiseErrorLegacyStatement node);
    public virtual void Visit(RaiseErrorStatement node);
    public virtual void ExplicitVisit(RaiseErrorStatement node);
    public virtual void Visit(ThrowStatement node);
    public virtual void ExplicitVisit(ThrowStatement node);
    public virtual void Visit(UseStatement node);
    public virtual void ExplicitVisit(UseStatement node);
    public virtual void Visit(KillStatement node);
    public virtual void ExplicitVisit(KillStatement node);
    public virtual void Visit(KillQueryNotificationSubscriptionStatement node);
    public virtual void ExplicitVisit(KillQueryNotificationSubscriptionStatement node);
    public virtual void Visit(KillStatsJobStatement node);
    public virtual void ExplicitVisit(KillStatsJobStatement node);
    public virtual void Visit(CheckpointStatement node);
    public virtual void ExplicitVisit(CheckpointStatement node);
    public virtual void Visit(ReconfigureStatement node);
    public virtual void ExplicitVisit(ReconfigureStatement node);
    public virtual void Visit(ShutdownStatement node);
    public virtual void ExplicitVisit(ShutdownStatement node);
    public virtual void Visit(SetUserStatement node);
    public virtual void ExplicitVisit(SetUserStatement node);
    public virtual void Visit(TruncateTableStatement node);
    public virtual void ExplicitVisit(TruncateTableStatement node);
    public virtual void Visit(SetOnOffStatement node);
    public virtual void ExplicitVisit(SetOnOffStatement node);
    public virtual void Visit(PredicateSetStatement node);
    public virtual void ExplicitVisit(PredicateSetStatement node);
    public virtual void Visit(SetStatisticsStatement node);
    public virtual void ExplicitVisit(SetStatisticsStatement node);
    public virtual void Visit(SetRowCountStatement node);
    public virtual void ExplicitVisit(SetRowCountStatement node);
    public virtual void Visit(SetOffsetsStatement node);
    public virtual void ExplicitVisit(SetOffsetsStatement node);
    public virtual void Visit(SetCommand node);
    public virtual void ExplicitVisit(SetCommand node);
    public virtual void Visit(GeneralSetCommand node);
    public virtual void ExplicitVisit(GeneralSetCommand node);
    public virtual void Visit(SetFipsFlaggerCommand node);
    public virtual void ExplicitVisit(SetFipsFlaggerCommand node);
    public virtual void Visit(SetCommandStatement node);
    public virtual void ExplicitVisit(SetCommandStatement node);
    public virtual void Visit(SetTransactionIsolationLevelStatement node);
    public virtual void ExplicitVisit(SetTransactionIsolationLevelStatement node);
    public virtual void Visit(SetTextSizeStatement node);
    public virtual void ExplicitVisit(SetTextSizeStatement node);
    public virtual void Visit(SetIdentityInsertStatement node);
    public virtual void ExplicitVisit(SetIdentityInsertStatement node);
    public virtual void Visit(SetErrorLevelStatement node);
    public virtual void ExplicitVisit(SetErrorLevelStatement node);
    public virtual void Visit(CreateDatabaseStatement node);
    public virtual void ExplicitVisit(CreateDatabaseStatement node);
    public virtual void Visit(FileDeclaration node);
    public virtual void ExplicitVisit(FileDeclaration node);
    public virtual void Visit(FileDeclarationOption node);
    public virtual void ExplicitVisit(FileDeclarationOption node);
    public virtual void Visit(NameFileDeclarationOption node);
    public virtual void ExplicitVisit(NameFileDeclarationOption node);
    public virtual void Visit(FileNameFileDeclarationOption node);
    public virtual void ExplicitVisit(FileNameFileDeclarationOption node);
    public virtual void Visit(SizeFileDeclarationOption node);
    public virtual void ExplicitVisit(SizeFileDeclarationOption node);
    public virtual void Visit(MaxSizeFileDeclarationOption node);
    public virtual void ExplicitVisit(MaxSizeFileDeclarationOption node);
    public virtual void Visit(FileGrowthFileDeclarationOption node);
    public virtual void ExplicitVisit(FileGrowthFileDeclarationOption node);
    public virtual void Visit(FileGroupDefinition node);
    public virtual void ExplicitVisit(FileGroupDefinition node);
    public virtual void Visit(AlterDatabaseStatement node);
    public virtual void ExplicitVisit(AlterDatabaseStatement node);
    public virtual void Visit(AlterDatabaseScopedConfigurationStatement node);
    public virtual void ExplicitVisit(AlterDatabaseScopedConfigurationStatement node);
    public virtual void Visit(AlterDatabaseScopedConfigurationSetStatement node);
    public virtual void ExplicitVisit(AlterDatabaseScopedConfigurationSetStatement node);
    public virtual void Visit(AlterDatabaseScopedConfigurationClearStatement node);
    public virtual void ExplicitVisit(AlterDatabaseScopedConfigurationClearStatement node);
    public virtual void Visit(DatabaseConfigurationClearOption node);
    public virtual void ExplicitVisit(DatabaseConfigurationClearOption node);
    public virtual void Visit(DatabaseConfigurationSetOption node);
    public virtual void ExplicitVisit(DatabaseConfigurationSetOption node);
    public virtual void Visit(OnOffPrimaryConfigurationOption node);
    public virtual void ExplicitVisit(OnOffPrimaryConfigurationOption node);
    public virtual void Visit(MaxDopConfigurationOption node);
    public virtual void ExplicitVisit(MaxDopConfigurationOption node);
    public virtual void Visit(GenericConfigurationOption node);
    public virtual void ExplicitVisit(GenericConfigurationOption node);
    public virtual void Visit(AlterDatabaseCollateStatement node);
    public virtual void ExplicitVisit(AlterDatabaseCollateStatement node);
    public virtual void Visit(AlterDatabaseRebuildLogStatement node);
    public virtual void ExplicitVisit(AlterDatabaseRebuildLogStatement node);
    public virtual void Visit(AlterDatabaseAddFileStatement node);
    public virtual void ExplicitVisit(AlterDatabaseAddFileStatement node);
    public virtual void Visit(AlterDatabaseAddFileGroupStatement node);
    public virtual void ExplicitVisit(AlterDatabaseAddFileGroupStatement node);
    public virtual void Visit(AlterDatabaseRemoveFileGroupStatement node);
    public virtual void ExplicitVisit(AlterDatabaseRemoveFileGroupStatement node);
    public virtual void Visit(AlterDatabaseRemoveFileStatement node);
    public virtual void ExplicitVisit(AlterDatabaseRemoveFileStatement node);
    public virtual void Visit(AlterDatabaseModifyNameStatement node);
    public virtual void ExplicitVisit(AlterDatabaseModifyNameStatement node);
    public virtual void Visit(AlterDatabaseModifyFileStatement node);
    public virtual void ExplicitVisit(AlterDatabaseModifyFileStatement node);
    public virtual void Visit(AlterDatabaseModifyFileGroupStatement node);
    public virtual void ExplicitVisit(AlterDatabaseModifyFileGroupStatement node);
    public virtual void Visit(AlterDatabaseTermination node);
    public virtual void ExplicitVisit(AlterDatabaseTermination node);
    public virtual void Visit(AlterDatabaseSetStatement node);
    public virtual void ExplicitVisit(AlterDatabaseSetStatement node);
    public virtual void Visit(DatabaseOption node);
    public virtual void ExplicitVisit(DatabaseOption node);
    public virtual void Visit(OnOffDatabaseOption node);
    public virtual void ExplicitVisit(OnOffDatabaseOption node);
    public virtual void Visit(AutoCreateStatisticsDatabaseOption node);
    public virtual void ExplicitVisit(AutoCreateStatisticsDatabaseOption node);
    public virtual void Visit(ContainmentDatabaseOption node);
    public virtual void ExplicitVisit(ContainmentDatabaseOption node);
    public virtual void Visit(HadrDatabaseOption node);
    public virtual void ExplicitVisit(HadrDatabaseOption node);
    public virtual void Visit(HadrAvailabilityGroupDatabaseOption node);
    public virtual void ExplicitVisit(HadrAvailabilityGroupDatabaseOption node);
    public virtual void Visit(DelayedDurabilityDatabaseOption node);
    public virtual void ExplicitVisit(DelayedDurabilityDatabaseOption node);
    public virtual void Visit(CursorDefaultDatabaseOption node);
    public virtual void ExplicitVisit(CursorDefaultDatabaseOption node);
    public virtual void Visit(RecoveryDatabaseOption node);
    public virtual void ExplicitVisit(RecoveryDatabaseOption node);
    public virtual void Visit(TargetRecoveryTimeDatabaseOption node);
    public virtual void ExplicitVisit(TargetRecoveryTimeDatabaseOption node);
    public virtual void Visit(PageVerifyDatabaseOption node);
    public virtual void ExplicitVisit(PageVerifyDatabaseOption node);
    public virtual void Visit(PartnerDatabaseOption node);
    public virtual void ExplicitVisit(PartnerDatabaseOption node);
    public virtual void Visit(WitnessDatabaseOption node);
    public virtual void ExplicitVisit(WitnessDatabaseOption node);
    public virtual void Visit(ParameterizationDatabaseOption node);
    public virtual void ExplicitVisit(ParameterizationDatabaseOption node);
    public virtual void Visit(LiteralDatabaseOption node);
    public virtual void ExplicitVisit(LiteralDatabaseOption node);
    public virtual void Visit(IdentifierDatabaseOption node);
    public virtual void ExplicitVisit(IdentifierDatabaseOption node);
    public virtual void Visit(ChangeTrackingDatabaseOption node);
    public virtual void ExplicitVisit(ChangeTrackingDatabaseOption node);
    public virtual void Visit(ChangeTrackingOptionDetail node);
    public virtual void ExplicitVisit(ChangeTrackingOptionDetail node);
    public virtual void Visit(AutoCleanupChangeTrackingOptionDetail node);
    public virtual void ExplicitVisit(AutoCleanupChangeTrackingOptionDetail node);
    public virtual void Visit(ChangeRetentionChangeTrackingOptionDetail node);
    public virtual void ExplicitVisit(ChangeRetentionChangeTrackingOptionDetail node);
    public virtual void Visit(AcceleratedDatabaseRecoveryDatabaseOption node);
    public virtual void ExplicitVisit(AcceleratedDatabaseRecoveryDatabaseOption node);
    public virtual void Visit(QueryStoreDatabaseOption node);
    public virtual void ExplicitVisit(QueryStoreDatabaseOption node);
    public virtual void Visit(QueryStoreOption node);
    public virtual void ExplicitVisit(QueryStoreOption node);
    public virtual void Visit(QueryStoreDesiredStateOption node);
    public virtual void ExplicitVisit(QueryStoreDesiredStateOption node);
    public virtual void Visit(QueryStoreCapturePolicyOption node);
    public virtual void ExplicitVisit(QueryStoreCapturePolicyOption node);
    public virtual void Visit(QueryStoreSizeCleanupPolicyOption node);
    public virtual void ExplicitVisit(QueryStoreSizeCleanupPolicyOption node);
    public virtual void Visit(QueryStoreDataFlushIntervalOption node);
    public virtual void ExplicitVisit(QueryStoreDataFlushIntervalOption node);
    public virtual void Visit(QueryStoreIntervalLengthOption node);
    public virtual void ExplicitVisit(QueryStoreIntervalLengthOption node);
    public virtual void Visit(QueryStoreMaxStorageSizeOption node);
    public virtual void ExplicitVisit(QueryStoreMaxStorageSizeOption node);
    public virtual void Visit(QueryStoreMaxPlansPerQueryOption node);
    public virtual void ExplicitVisit(QueryStoreMaxPlansPerQueryOption node);
    public virtual void Visit(QueryStoreTimeCleanupPolicyOption node);
    public virtual void ExplicitVisit(QueryStoreTimeCleanupPolicyOption node);
    public virtual void Visit(AutomaticTuningDatabaseOption node);
    public virtual void ExplicitVisit(AutomaticTuningDatabaseOption node);
    public virtual void Visit(AutomaticTuningOption node);
    public virtual void ExplicitVisit(AutomaticTuningOption node);
    public virtual void Visit(AutomaticTuningForceLastGoodPlanOption node);
    public virtual void ExplicitVisit(AutomaticTuningForceLastGoodPlanOption node);
    public virtual void Visit(AutomaticTuningCreateIndexOption node);
    public virtual void ExplicitVisit(AutomaticTuningCreateIndexOption node);
    public virtual void Visit(AutomaticTuningDropIndexOption node);
    public virtual void ExplicitVisit(AutomaticTuningDropIndexOption node);
    public virtual void Visit(AutomaticTuningMaintainIndexOption node);
    public virtual void ExplicitVisit(AutomaticTuningMaintainIndexOption node);
    public virtual void Visit(FileStreamDatabaseOption node);
    public virtual void ExplicitVisit(FileStreamDatabaseOption node);
    public virtual void Visit(CatalogCollationOption node);
    public virtual void ExplicitVisit(CatalogCollationOption node);
    public virtual void Visit(LedgerOption node);
    public virtual void ExplicitVisit(LedgerOption node);
    public virtual void Visit(MaxSizeDatabaseOption node);
    public virtual void ExplicitVisit(MaxSizeDatabaseOption node);
    public virtual void Visit(AlterTableAlterIndexStatement node);
    public virtual void ExplicitVisit(AlterTableAlterIndexStatement node);
    public virtual void Visit(AlterTableAlterColumnStatement node);
    public virtual void ExplicitVisit(AlterTableAlterColumnStatement node);
    public virtual void Visit(ColumnDefinition node);
    public virtual void ExplicitVisit(ColumnDefinition node);
    public virtual void Visit(ColumnEncryptionDefinition node);
    public virtual void ExplicitVisit(ColumnEncryptionDefinition node);
    public virtual void Visit(ColumnEncryptionDefinitionParameter node);
    public virtual void ExplicitVisit(ColumnEncryptionDefinitionParameter node);
    public virtual void Visit(ColumnEncryptionKeyNameParameter node);
    public virtual void ExplicitVisit(ColumnEncryptionKeyNameParameter node);
    public virtual void Visit(ColumnEncryptionTypeParameter node);
    public virtual void ExplicitVisit(ColumnEncryptionTypeParameter node);
    public virtual void Visit(ColumnEncryptionAlgorithmParameter node);
    public virtual void ExplicitVisit(ColumnEncryptionAlgorithmParameter node);
    public virtual void Visit(IdentityOptions node);
    public virtual void ExplicitVisit(IdentityOptions node);
    public virtual void Visit(ColumnStorageOptions node);
    public virtual void ExplicitVisit(ColumnStorageOptions node);
    public virtual void Visit(ConstraintDefinition node);
    public virtual void ExplicitVisit(ConstraintDefinition node);
    public virtual void Visit(CreateTableStatement node);
    public virtual void ExplicitVisit(CreateTableStatement node);
    public virtual void Visit(FederationScheme node);
    public virtual void ExplicitVisit(FederationScheme node);
    public virtual void Visit(TableDataCompressionOption node);
    public virtual void ExplicitVisit(TableDataCompressionOption node);
    public virtual void Visit(TableDistributionOption node);
    public virtual void ExplicitVisit(TableDistributionOption node);
    public virtual void Visit(TableDistributionPolicy node);
    public virtual void ExplicitVisit(TableDistributionPolicy node);
    public virtual void Visit(TableReplicateDistributionPolicy node);
    public virtual void ExplicitVisit(TableReplicateDistributionPolicy node);
    public virtual void Visit(TableRoundRobinDistributionPolicy node);
    public virtual void ExplicitVisit(TableRoundRobinDistributionPolicy node);
    public virtual void Visit(TableHashDistributionPolicy node);
    public virtual void ExplicitVisit(TableHashDistributionPolicy node);
    public virtual void Visit(TableIndexOption node);
    public virtual void ExplicitVisit(TableIndexOption node);
    public virtual void Visit(TableIndexType node);
    public virtual void ExplicitVisit(TableIndexType node);
    public virtual void Visit(TableClusteredIndexType node);
    public virtual void ExplicitVisit(TableClusteredIndexType node);
    public virtual void Visit(TableNonClusteredIndexType node);
    public virtual void ExplicitVisit(TableNonClusteredIndexType node);
    public virtual void Visit(TablePartitionOption node);
    public virtual void ExplicitVisit(TablePartitionOption node);
    public virtual void Visit(PartitionSpecifications node);
    public virtual void ExplicitVisit(PartitionSpecifications node);
    public virtual void Visit(TablePartitionOptionSpecifications node);
    public virtual void ExplicitVisit(TablePartitionOptionSpecifications node);
    public virtual void Visit(LocationOption node);
    public virtual void ExplicitVisit(LocationOption node);
    public virtual void Visit(RenameEntityStatement node);
    public virtual void ExplicitVisit(RenameEntityStatement node);
    public virtual void Visit(CopyStatement node);
    public virtual void ExplicitVisit(CopyStatement node);
    public virtual void Visit(CopyStatementOptionBase node);
    public virtual void ExplicitVisit(CopyStatementOptionBase node);
    public virtual void Visit(CopyOption node);
    public virtual void ExplicitVisit(CopyOption node);
    public virtual void Visit(CopyCredentialOption node);
    public virtual void ExplicitVisit(CopyCredentialOption node);
    public virtual void Visit(SingleValueTypeCopyOption node);
    public virtual void ExplicitVisit(SingleValueTypeCopyOption node);
    public virtual void Visit(ListTypeCopyOption node);
    public virtual void ExplicitVisit(ListTypeCopyOption node);
    public virtual void Visit(CopyColumnOption node);
    public virtual void ExplicitVisit(CopyColumnOption node);
    public virtual void Visit(DataCompressionOption node);
    public virtual void ExplicitVisit(DataCompressionOption node);
    public virtual void Visit(CompressionPartitionRange node);
    public virtual void ExplicitVisit(CompressionPartitionRange node);
    public virtual void Visit(CheckConstraintDefinition node);
    public virtual void ExplicitVisit(CheckConstraintDefinition node);
    public virtual void Visit(DefaultConstraintDefinition node);
    public virtual void ExplicitVisit(DefaultConstraintDefinition node);
    public virtual void Visit(ForeignKeyConstraintDefinition node);
    public virtual void ExplicitVisit(ForeignKeyConstraintDefinition node);
    public virtual void Visit(NullableConstraintDefinition node);
    public virtual void ExplicitVisit(NullableConstraintDefinition node);
    public virtual void Visit(GraphConnectionBetweenNodes node);
    public virtual void ExplicitVisit(GraphConnectionBetweenNodes node);
    public virtual void Visit(GraphConnectionConstraintDefinition node);
    public virtual void ExplicitVisit(GraphConnectionConstraintDefinition node);
    public virtual void Visit(UniqueConstraintDefinition node);
    public virtual void ExplicitVisit(UniqueConstraintDefinition node);
    public virtual void Visit(BackupStatement node);
    public virtual void ExplicitVisit(BackupStatement node);
    public virtual void Visit(BackupDatabaseStatement node);
    public virtual void ExplicitVisit(BackupDatabaseStatement node);
    public virtual void Visit(BackupTransactionLogStatement node);
    public virtual void ExplicitVisit(BackupTransactionLogStatement node);
    public virtual void Visit(RestoreStatement node);
    public virtual void ExplicitVisit(RestoreStatement node);
    public virtual void Visit(RestoreOption node);
    public virtual void ExplicitVisit(RestoreOption node);
    public virtual void Visit(ScalarExpressionRestoreOption node);
    public virtual void ExplicitVisit(ScalarExpressionRestoreOption node);
    public virtual void Visit(MoveRestoreOption node);
    public virtual void ExplicitVisit(MoveRestoreOption node);
    public virtual void Visit(StopRestoreOption node);
    public virtual void ExplicitVisit(StopRestoreOption node);
    public virtual void Visit(FileStreamRestoreOption node);
    public virtual void ExplicitVisit(FileStreamRestoreOption node);
    public virtual void Visit(BackupOption node);
    public virtual void ExplicitVisit(BackupOption node);
    public virtual void Visit(BackupEncryptionOption node);
    public virtual void ExplicitVisit(BackupEncryptionOption node);
    public virtual void Visit(DeviceInfo node);
    public virtual void ExplicitVisit(DeviceInfo node);
    public virtual void Visit(MirrorToClause node);
    public virtual void ExplicitVisit(MirrorToClause node);
    public virtual void Visit(BackupRestoreFileInfo node);
    public virtual void ExplicitVisit(BackupRestoreFileInfo node);
    public virtual void Visit(BulkInsertBase node);
    public virtual void ExplicitVisit(BulkInsertBase node);
    public virtual void Visit(BulkInsertStatement node);
    public virtual void ExplicitVisit(BulkInsertStatement node);
    public virtual void Visit(InsertBulkStatement node);
    public virtual void ExplicitVisit(InsertBulkStatement node);
    public virtual void Visit(BulkInsertOption node);
    public virtual void ExplicitVisit(BulkInsertOption node);
    public virtual void Visit(LiteralBulkInsertOption node);
    public virtual void ExplicitVisit(LiteralBulkInsertOption node);
    public virtual void Visit(OrderBulkInsertOption node);
    public virtual void ExplicitVisit(OrderBulkInsertOption node);
    public virtual void Visit(ColumnDefinitionBase node);
    public virtual void ExplicitVisit(ColumnDefinitionBase node);
    public virtual void Visit(ExternalTableColumnDefinition node);
    public virtual void ExplicitVisit(ExternalTableColumnDefinition node);
    public virtual void Visit(InsertBulkColumnDefinition node);
    public virtual void ExplicitVisit(InsertBulkColumnDefinition node);
    public virtual void Visit(DbccStatement node);
    public virtual void ExplicitVisit(DbccStatement node);
    public virtual void Visit(DbccOption node);
    public virtual void ExplicitVisit(DbccOption node);
    public virtual void Visit(DbccNamedLiteral node);
    public virtual void ExplicitVisit(DbccNamedLiteral node);
    public virtual void Visit(CreateAsymmetricKeyStatement node);
    public virtual void ExplicitVisit(CreateAsymmetricKeyStatement node);
    public virtual void Visit(CreatePartitionFunctionStatement node);
    public virtual void ExplicitVisit(CreatePartitionFunctionStatement node);
    public virtual void Visit(PartitionParameterType node);
    public virtual void ExplicitVisit(PartitionParameterType node);
    public virtual void Visit(CreatePartitionSchemeStatement node);
    public virtual void ExplicitVisit(CreatePartitionSchemeStatement node);
    public virtual void Visit(RemoteServiceBindingStatementBase node);
    public virtual void ExplicitVisit(RemoteServiceBindingStatementBase node);
    public virtual void Visit(RemoteServiceBindingOption node);
    public virtual void ExplicitVisit(RemoteServiceBindingOption node);
    public virtual void Visit(OnOffRemoteServiceBindingOption node);
    public virtual void ExplicitVisit(OnOffRemoteServiceBindingOption node);
    public virtual void Visit(UserRemoteServiceBindingOption node);
    public virtual void ExplicitVisit(UserRemoteServiceBindingOption node);
    public virtual void Visit(CreateRemoteServiceBindingStatement node);
    public virtual void ExplicitVisit(CreateRemoteServiceBindingStatement node);
    public virtual void Visit(AlterRemoteServiceBindingStatement node);
    public virtual void ExplicitVisit(AlterRemoteServiceBindingStatement node);
    public virtual void Visit(EncryptionSource node);
    public virtual void ExplicitVisit(EncryptionSource node);
    public virtual void Visit(AssemblyEncryptionSource node);
    public virtual void ExplicitVisit(AssemblyEncryptionSource node);
    public virtual void Visit(FileEncryptionSource node);
    public virtual void ExplicitVisit(FileEncryptionSource node);
    public virtual void Visit(ProviderEncryptionSource node);
    public virtual void ExplicitVisit(ProviderEncryptionSource node);
    public virtual void Visit(CertificateStatementBase node);
    public virtual void ExplicitVisit(CertificateStatementBase node);
    public virtual void Visit(AlterCertificateStatement node);
    public virtual void ExplicitVisit(AlterCertificateStatement node);
    public virtual void Visit(CreateCertificateStatement node);
    public virtual void ExplicitVisit(CreateCertificateStatement node);
    public virtual void Visit(CertificateOption node);
    public virtual void ExplicitVisit(CertificateOption node);
    public virtual void Visit(CreateContractStatement node);
    public virtual void ExplicitVisit(CreateContractStatement node);
    public virtual void Visit(ContractMessage node);
    public virtual void ExplicitVisit(ContractMessage node);
    public virtual void Visit(CredentialStatement node);
    public virtual void ExplicitVisit(CredentialStatement node);
    public virtual void Visit(CreateCredentialStatement node);
    public virtual void ExplicitVisit(CreateCredentialStatement node);
    public virtual void Visit(AlterCredentialStatement node);
    public virtual void ExplicitVisit(AlterCredentialStatement node);
    public virtual void Visit(MessageTypeStatementBase node);
    public virtual void ExplicitVisit(MessageTypeStatementBase node);
    public virtual void Visit(CreateMessageTypeStatement node);
    public virtual void ExplicitVisit(CreateMessageTypeStatement node);
    public virtual void Visit(AlterMessageTypeStatement node);
    public virtual void ExplicitVisit(AlterMessageTypeStatement node);
    public virtual void Visit(CreateAggregateStatement node);
    public virtual void ExplicitVisit(CreateAggregateStatement node);
    public virtual void Visit(CreateEndpointStatement node);
    public virtual void ExplicitVisit(CreateEndpointStatement node);
    public virtual void Visit(AlterEndpointStatement node);
    public virtual void ExplicitVisit(AlterEndpointStatement node);
    public virtual void Visit(AlterCreateEndpointStatementBase node);
    public virtual void ExplicitVisit(AlterCreateEndpointStatementBase node);
    public virtual void Visit(EndpointAffinity node);
    public virtual void ExplicitVisit(EndpointAffinity node);
    public virtual void Visit(EndpointProtocolOption node);
    public virtual void ExplicitVisit(EndpointProtocolOption node);
    public virtual void Visit(LiteralEndpointProtocolOption node);
    public virtual void ExplicitVisit(LiteralEndpointProtocolOption node);
    public virtual void Visit(AuthenticationEndpointProtocolOption node);
    public virtual void ExplicitVisit(AuthenticationEndpointProtocolOption node);
    public virtual void Visit(PortsEndpointProtocolOption node);
    public virtual void ExplicitVisit(PortsEndpointProtocolOption node);
    public virtual void Visit(CompressionEndpointProtocolOption node);
    public virtual void ExplicitVisit(CompressionEndpointProtocolOption node);
    public virtual void Visit(ListenerIPEndpointProtocolOption node);
    public virtual void ExplicitVisit(ListenerIPEndpointProtocolOption node);
    public virtual void Visit(IPv4 node);
    public virtual void ExplicitVisit(IPv4 node);
    public virtual void Visit(SoapMethod node);
    public virtual void ExplicitVisit(SoapMethod node);
    public virtual void Visit(PayloadOption node);
    public virtual void ExplicitVisit(PayloadOption node);
    public virtual void Visit(EnabledDisabledPayloadOption node);
    public virtual void ExplicitVisit(EnabledDisabledPayloadOption node);
    public virtual void Visit(WsdlPayloadOption node);
    public virtual void ExplicitVisit(WsdlPayloadOption node);
    public virtual void Visit(LoginTypePayloadOption node);
    public virtual void ExplicitVisit(LoginTypePayloadOption node);
    public virtual void Visit(LiteralPayloadOption node);
    public virtual void ExplicitVisit(LiteralPayloadOption node);
    public virtual void Visit(SessionTimeoutPayloadOption node);
    public virtual void ExplicitVisit(SessionTimeoutPayloadOption node);
    public virtual void Visit(SchemaPayloadOption node);
    public virtual void ExplicitVisit(SchemaPayloadOption node);
    public virtual void Visit(CharacterSetPayloadOption node);
    public virtual void ExplicitVisit(CharacterSetPayloadOption node);
    public virtual void Visit(RolePayloadOption node);
    public virtual void ExplicitVisit(RolePayloadOption node);
    public virtual void Visit(AuthenticationPayloadOption node);
    public virtual void ExplicitVisit(AuthenticationPayloadOption node);
    public virtual void Visit(EncryptionPayloadOption node);
    public virtual void ExplicitVisit(EncryptionPayloadOption node);
    public virtual void Visit(SymmetricKeyStatement node);
    public virtual void ExplicitVisit(SymmetricKeyStatement node);
    public virtual void Visit(CreateSymmetricKeyStatement node);
    public virtual void ExplicitVisit(CreateSymmetricKeyStatement node);
    public virtual void Visit(KeyOption node);
    public virtual void ExplicitVisit(KeyOption node);
    public virtual void Visit(KeySourceKeyOption node);
    public virtual void ExplicitVisit(KeySourceKeyOption node);
    public virtual void Visit(AlgorithmKeyOption node);
    public virtual void ExplicitVisit(AlgorithmKeyOption node);
    public virtual void Visit(IdentityValueKeyOption node);
    public virtual void ExplicitVisit(IdentityValueKeyOption node);
    public virtual void Visit(ProviderKeyNameKeyOption node);
    public virtual void ExplicitVisit(ProviderKeyNameKeyOption node);
    public virtual void Visit(CreationDispositionKeyOption node);
    public virtual void ExplicitVisit(CreationDispositionKeyOption node);
    public virtual void Visit(AlterSymmetricKeyStatement node);
    public virtual void ExplicitVisit(AlterSymmetricKeyStatement node);
    public virtual void Visit(FullTextCatalogStatement node);
    public virtual void ExplicitVisit(FullTextCatalogStatement node);
    public virtual void Visit(FullTextCatalogOption node);
    public virtual void ExplicitVisit(FullTextCatalogOption node);
    public virtual void Visit(OnOffFullTextCatalogOption node);
    public virtual void ExplicitVisit(OnOffFullTextCatalogOption node);
    public virtual void Visit(CreateFullTextCatalogStatement node);
    public virtual void ExplicitVisit(CreateFullTextCatalogStatement node);
    public virtual void Visit(AlterFullTextCatalogStatement node);
    public virtual void ExplicitVisit(AlterFullTextCatalogStatement node);
    public virtual void Visit(AlterCreateServiceStatementBase node);
    public virtual void ExplicitVisit(AlterCreateServiceStatementBase node);
    public virtual void Visit(CreateServiceStatement node);
    public virtual void ExplicitVisit(CreateServiceStatement node);
    public virtual void Visit(AlterServiceStatement node);
    public virtual void ExplicitVisit(AlterServiceStatement node);
    public virtual void Visit(ServiceContract node);
    public virtual void ExplicitVisit(ServiceContract node);
    public virtual void Visit(BinaryExpression node);
    public virtual void ExplicitVisit(BinaryExpression node);
    public virtual void Visit(BuiltInFunctionTableReference node);
    public virtual void ExplicitVisit(BuiltInFunctionTableReference node);
    public virtual void Visit(GlobalFunctionTableReference node);
    public virtual void ExplicitVisit(GlobalFunctionTableReference node);
    public virtual void Visit(ComputeClause node);
    public virtual void ExplicitVisit(ComputeClause node);
    public virtual void Visit(ComputeFunction node);
    public virtual void ExplicitVisit(ComputeFunction node);
    public virtual void Visit(PivotedTableReference node);
    public virtual void ExplicitVisit(PivotedTableReference node);
    public virtual void Visit(UnpivotedTableReference node);
    public virtual void ExplicitVisit(UnpivotedTableReference node);
    public virtual void Visit(UnqualifiedJoin node);
    public virtual void ExplicitVisit(UnqualifiedJoin node);
    public virtual void Visit(TableSampleClause node);
    public virtual void ExplicitVisit(TableSampleClause node);
    public virtual void Visit(ScalarExpression node);
    public virtual void ExplicitVisit(ScalarExpression node);
    public virtual void Visit(BooleanExpression node);
    public virtual void ExplicitVisit(BooleanExpression node);
    public virtual void Visit(BooleanNotExpression node);
    public virtual void ExplicitVisit(BooleanNotExpression node);
    public virtual void Visit(BooleanParenthesisExpression node);
    public virtual void ExplicitVisit(BooleanParenthesisExpression node);
    public virtual void Visit(BooleanComparisonExpression node);
    public virtual void ExplicitVisit(BooleanComparisonExpression node);
    public virtual void Visit(BooleanBinaryExpression node);
    public virtual void ExplicitVisit(BooleanBinaryExpression node);
    public virtual void Visit(BooleanIsNullExpression node);
    public virtual void ExplicitVisit(BooleanIsNullExpression node);
    public virtual void Visit(GraphMatchPredicate node);
    public virtual void ExplicitVisit(GraphMatchPredicate node);
    public virtual void Visit(GraphMatchLastNodePredicate node);
    public virtual void ExplicitVisit(GraphMatchLastNodePredicate node);
    public virtual void Visit(GraphMatchNodeExpression node);
    public virtual void ExplicitVisit(GraphMatchNodeExpression node);
    public virtual void Visit(GraphMatchRecursivePredicate node);
    public virtual void ExplicitVisit(GraphMatchRecursivePredicate node);
    public virtual void Visit(GraphMatchExpression node);
    public virtual void ExplicitVisit(GraphMatchExpression node);
    public virtual void Visit(GraphMatchCompositeExpression node);
    public virtual void ExplicitVisit(GraphMatchCompositeExpression node);
    public virtual void Visit(GraphRecursiveMatchQuantifier node);
    public virtual void ExplicitVisit(GraphRecursiveMatchQuantifier node);
    public virtual void Visit(ExpressionWithSortOrder node);
    public virtual void ExplicitVisit(ExpressionWithSortOrder node);
    public virtual void Visit(GroupByClause node);
    public virtual void ExplicitVisit(GroupByClause node);
    public virtual void Visit(GroupingSpecification node);
    public virtual void ExplicitVisit(GroupingSpecification node);
    public virtual void Visit(ExpressionGroupingSpecification node);
    public virtual void ExplicitVisit(ExpressionGroupingSpecification node);
    public virtual void Visit(CompositeGroupingSpecification node);
    public virtual void ExplicitVisit(CompositeGroupingSpecification node);
    public virtual void Visit(CubeGroupingSpecification node);
    public virtual void ExplicitVisit(CubeGroupingSpecification node);
    public virtual void Visit(RollupGroupingSpecification node);
    public virtual void ExplicitVisit(RollupGroupingSpecification node);
    public virtual void Visit(GrandTotalGroupingSpecification node);
    public virtual void ExplicitVisit(GrandTotalGroupingSpecification node);
    public virtual void Visit(GroupingSetsGroupingSpecification node);
    public virtual void ExplicitVisit(GroupingSetsGroupingSpecification node);
    public virtual void Visit(OutputClause node);
    public virtual void ExplicitVisit(OutputClause node);
    public virtual void Visit(OutputIntoClause node);
    public virtual void ExplicitVisit(OutputIntoClause node);
    public virtual void Visit(HavingClause node);
    public virtual void ExplicitVisit(HavingClause node);
    public virtual void Visit(IdentityFunctionCall node);
    public virtual void ExplicitVisit(IdentityFunctionCall node);
    public virtual void Visit(JoinParenthesisTableReference node);
    public virtual void ExplicitVisit(JoinParenthesisTableReference node);
    public virtual void Visit(OrderByClause node);
    public virtual void ExplicitVisit(OrderByClause node);
    public virtual void Visit(JoinTableReference node);
    public virtual void ExplicitVisit(JoinTableReference node);
    public virtual void Visit(QualifiedJoin node);
    public virtual void ExplicitVisit(QualifiedJoin node);
    public virtual void Visit(OdbcQualifiedJoinTableReference node);
    public virtual void ExplicitVisit(OdbcQualifiedJoinTableReference node);
    public virtual void Visit(QueryExpression node);
    public virtual void ExplicitVisit(QueryExpression node);
    public virtual void Visit(QueryParenthesisExpression node);
    public virtual void ExplicitVisit(QueryParenthesisExpression node);
    public virtual void Visit(QuerySpecification node);
    public virtual void ExplicitVisit(QuerySpecification node);
    public virtual void Visit(FromClause node);
    public virtual void ExplicitVisit(FromClause node);
    public virtual void Visit(PredictTableReference node);
    public virtual void ExplicitVisit(PredictTableReference node);
    public virtual void Visit(SelectElement node);
    public virtual void ExplicitVisit(SelectElement node);
    public virtual void Visit(SelectScalarExpression node);
    public virtual void ExplicitVisit(SelectScalarExpression node);
    public virtual void Visit(SelectStarExpression node);
    public virtual void ExplicitVisit(SelectStarExpression node);
    public virtual void Visit(SelectSetVariable node);
    public virtual void ExplicitVisit(SelectSetVariable node);
    public virtual void Visit(TableReference node);
    public virtual void ExplicitVisit(TableReference node);
    public virtual void Visit(TableReferenceWithAlias node);
    public virtual void ExplicitVisit(TableReferenceWithAlias node);
    public virtual void Visit(TableReferenceWithAliasAndColumns node);
    public virtual void ExplicitVisit(TableReferenceWithAliasAndColumns node);
    public virtual void Visit(DataModificationTableReference node);
    public virtual void ExplicitVisit(DataModificationTableReference node);
    public virtual void Visit(ChangeTableChangesTableReference node);
    public virtual void ExplicitVisit(ChangeTableChangesTableReference node);
    public virtual void Visit(ChangeTableVersionTableReference node);
    public virtual void ExplicitVisit(ChangeTableVersionTableReference node);
    public virtual void Visit(BooleanTernaryExpression node);
    public virtual void ExplicitVisit(BooleanTernaryExpression node);
    public virtual void Visit(TopRowFilter node);
    public virtual void ExplicitVisit(TopRowFilter node);
    public virtual void Visit(OffsetClause node);
    public virtual void ExplicitVisit(OffsetClause node);
    public virtual void Visit(UnaryExpression node);
    public virtual void ExplicitVisit(UnaryExpression node);
    public virtual void Visit(BinaryQueryExpression node);
    public virtual void ExplicitVisit(BinaryQueryExpression node);
    public virtual void Visit(VariableTableReference node);
    public virtual void ExplicitVisit(VariableTableReference node);
    public virtual void Visit(VariableMethodCallTableReference node);
    public virtual void ExplicitVisit(VariableMethodCallTableReference node);
    public virtual void Visit(DropPartitionFunctionStatement node);
    public virtual void ExplicitVisit(DropPartitionFunctionStatement node);
    public virtual void Visit(DropPartitionSchemeStatement node);
    public virtual void ExplicitVisit(DropPartitionSchemeStatement node);
    public virtual void Visit(DropSynonymStatement node);
    public virtual void ExplicitVisit(DropSynonymStatement node);
    public virtual void Visit(DropAggregateStatement node);
    public virtual void ExplicitVisit(DropAggregateStatement node);
    public virtual void Visit(DropAssemblyStatement node);
    public virtual void ExplicitVisit(DropAssemblyStatement node);
    public virtual void Visit(DropApplicationRoleStatement node);
    public virtual void ExplicitVisit(DropApplicationRoleStatement node);
    public virtual void Visit(DropFullTextCatalogStatement node);
    public virtual void ExplicitVisit(DropFullTextCatalogStatement node);
    public virtual void Visit(DropFullTextIndexStatement node);
    public virtual void ExplicitVisit(DropFullTextIndexStatement node);
    public virtual void Visit(DropLoginStatement node);
    public virtual void ExplicitVisit(DropLoginStatement node);
    public virtual void Visit(DropRoleStatement node);
    public virtual void ExplicitVisit(DropRoleStatement node);
    public virtual void Visit(DropTypeStatement node);
    public virtual void ExplicitVisit(DropTypeStatement node);
    public virtual void Visit(DropUserStatement node);
    public virtual void ExplicitVisit(DropUserStatement node);
    public virtual void Visit(DropMasterKeyStatement node);
    public virtual void ExplicitVisit(DropMasterKeyStatement node);
    public virtual void Visit(DropSymmetricKeyStatement node);
    public virtual void ExplicitVisit(DropSymmetricKeyStatement node);
    public virtual void Visit(DropAsymmetricKeyStatement node);
    public virtual void ExplicitVisit(DropAsymmetricKeyStatement node);
    public virtual void Visit(DropCertificateStatement node);
    public virtual void ExplicitVisit(DropCertificateStatement node);
    public virtual void Visit(DropCredentialStatement node);
    public virtual void ExplicitVisit(DropCredentialStatement node);
    public virtual void Visit(AlterPartitionFunctionStatement node);
    public virtual void ExplicitVisit(AlterPartitionFunctionStatement node);
    public virtual void Visit(AlterPartitionSchemeStatement node);
    public virtual void ExplicitVisit(AlterPartitionSchemeStatement node);
    public virtual void Visit(AlterFullTextIndexStatement node);
    public virtual void ExplicitVisit(AlterFullTextIndexStatement node);
    public virtual void Visit(AlterFullTextIndexAction node);
    public virtual void ExplicitVisit(AlterFullTextIndexAction node);
    public virtual void Visit(SimpleAlterFullTextIndexAction node);
    public virtual void ExplicitVisit(SimpleAlterFullTextIndexAction node);
    public virtual void Visit(SetStopListAlterFullTextIndexAction node);
    public virtual void ExplicitVisit(SetStopListAlterFullTextIndexAction node);
    public virtual void Visit(SetSearchPropertyListAlterFullTextIndexAction node);
    public virtual void ExplicitVisit(SetSearchPropertyListAlterFullTextIndexAction node);
    public virtual void Visit(DropAlterFullTextIndexAction node);
    public virtual void ExplicitVisit(DropAlterFullTextIndexAction node);
    public virtual void Visit(AddAlterFullTextIndexAction node);
    public virtual void ExplicitVisit(AddAlterFullTextIndexAction node);
    public virtual void Visit(AlterColumnAlterFullTextIndexAction node);
    public virtual void ExplicitVisit(AlterColumnAlterFullTextIndexAction node);
    public virtual void Visit(CreateSearchPropertyListStatement node);
    public virtual void ExplicitVisit(CreateSearchPropertyListStatement node);
    public virtual void Visit(AlterSearchPropertyListStatement node);
    public virtual void ExplicitVisit(AlterSearchPropertyListStatement node);
    public virtual void Visit(SearchPropertyListAction node);
    public virtual void ExplicitVisit(SearchPropertyListAction node);
    public virtual void Visit(AddSearchPropertyListAction node);
    public virtual void ExplicitVisit(AddSearchPropertyListAction node);
    public virtual void Visit(DropSearchPropertyListAction node);
    public virtual void ExplicitVisit(DropSearchPropertyListAction node);
    public virtual void Visit(DropSearchPropertyListStatement node);
    public virtual void ExplicitVisit(DropSearchPropertyListStatement node);
    public virtual void Visit(CreateLoginStatement node);
    public virtual void ExplicitVisit(CreateLoginStatement node);
    public virtual void Visit(CreateLoginSource node);
    public virtual void ExplicitVisit(CreateLoginSource node);
    public virtual void Visit(PasswordCreateLoginSource node);
    public virtual void ExplicitVisit(PasswordCreateLoginSource node);
    public virtual void Visit(PrincipalOption node);
    public virtual void ExplicitVisit(PrincipalOption node);
    public virtual void Visit(OnOffPrincipalOption node);
    public virtual void ExplicitVisit(OnOffPrincipalOption node);
    public virtual void Visit(LiteralPrincipalOption node);
    public virtual void ExplicitVisit(LiteralPrincipalOption node);
    public virtual void Visit(IdentifierPrincipalOption node);
    public virtual void ExplicitVisit(IdentifierPrincipalOption node);
    public virtual void Visit(WindowsCreateLoginSource node);
    public virtual void ExplicitVisit(WindowsCreateLoginSource node);
    public virtual void Visit(ExternalCreateLoginSource node);
    public virtual void ExplicitVisit(ExternalCreateLoginSource node);
    public virtual void Visit(CertificateCreateLoginSource node);
    public virtual void ExplicitVisit(CertificateCreateLoginSource node);
    public virtual void Visit(AsymmetricKeyCreateLoginSource node);
    public virtual void ExplicitVisit(AsymmetricKeyCreateLoginSource node);
    public virtual void Visit(PasswordAlterPrincipalOption node);
    public virtual void ExplicitVisit(PasswordAlterPrincipalOption node);
    public virtual void Visit(AlterLoginStatement node);
    public virtual void ExplicitVisit(AlterLoginStatement node);
    public virtual void Visit(AlterLoginOptionsStatement node);
    public virtual void ExplicitVisit(AlterLoginOptionsStatement node);
    public virtual void Visit(AlterLoginEnableDisableStatement node);
    public virtual void ExplicitVisit(AlterLoginEnableDisableStatement node);
    public virtual void Visit(AlterLoginAddDropCredentialStatement node);
    public virtual void ExplicitVisit(AlterLoginAddDropCredentialStatement node);
    public virtual void Visit(RevertStatement node);
    public virtual void ExplicitVisit(RevertStatement node);
    public virtual void Visit(DropContractStatement node);
    public virtual void ExplicitVisit(DropContractStatement node);
    public virtual void Visit(DropEndpointStatement node);
    public virtual void ExplicitVisit(DropEndpointStatement node);
    public virtual void Visit(DropMessageTypeStatement node);
    public virtual void ExplicitVisit(DropMessageTypeStatement node);
    public virtual void Visit(DropQueueStatement node);
    public virtual void ExplicitVisit(DropQueueStatement node);
    public virtual void Visit(DropRemoteServiceBindingStatement node);
    public virtual void ExplicitVisit(DropRemoteServiceBindingStatement node);
    public virtual void Visit(DropRouteStatement node);
    public virtual void ExplicitVisit(DropRouteStatement node);
    public virtual void Visit(DropServiceStatement node);
    public virtual void ExplicitVisit(DropServiceStatement node);
    public virtual void Visit(SignatureStatementBase node);
    public virtual void ExplicitVisit(SignatureStatementBase node);
    public virtual void Visit(AddSignatureStatement node);
    public virtual void ExplicitVisit(AddSignatureStatement node);
    public virtual void Visit(DropSignatureStatement node);
    public virtual void ExplicitVisit(DropSignatureStatement node);
    public virtual void Visit(DropEventNotificationStatement node);
    public virtual void ExplicitVisit(DropEventNotificationStatement node);
    public virtual void Visit(ExecuteAsStatement node);
    public virtual void ExplicitVisit(ExecuteAsStatement node);
    public virtual void Visit(EndConversationStatement node);
    public virtual void ExplicitVisit(EndConversationStatement node);
    public virtual void Visit(MoveConversationStatement node);
    public virtual void ExplicitVisit(MoveConversationStatement node);
    public virtual void Visit(GetConversationGroupStatement node);
    public virtual void ExplicitVisit(GetConversationGroupStatement node);
    public virtual void Visit(ReceiveStatement node);
    public virtual void ExplicitVisit(ReceiveStatement node);
    public virtual void Visit(SendStatement node);
    public virtual void ExplicitVisit(SendStatement node);
    public virtual void Visit(WaitForSupportedStatement node);
    public virtual void ExplicitVisit(WaitForSupportedStatement node);
    public virtual void Visit(AlterSchemaStatement node);
    public virtual void ExplicitVisit(AlterSchemaStatement node);
    public virtual void Visit(AlterAsymmetricKeyStatement node);
    public virtual void ExplicitVisit(AlterAsymmetricKeyStatement node);
    public virtual void Visit(AlterServiceMasterKeyStatement node);
    public virtual void ExplicitVisit(AlterServiceMasterKeyStatement node);
    public virtual void Visit(BeginConversationTimerStatement node);
    public virtual void ExplicitVisit(BeginConversationTimerStatement node);
    public virtual void Visit(BeginDialogStatement node);
    public virtual void ExplicitVisit(BeginDialogStatement node);
    public virtual void Visit(DialogOption node);
    public virtual void ExplicitVisit(DialogOption node);
    public virtual void Visit(ScalarExpressionDialogOption node);
    public virtual void ExplicitVisit(ScalarExpressionDialogOption node);
    public virtual void Visit(OnOffDialogOption node);
    public virtual void ExplicitVisit(OnOffDialogOption node);
    public virtual void Visit(BackupCertificateStatement node);
    public virtual void ExplicitVisit(BackupCertificateStatement node);
    public virtual void Visit(BackupRestoreMasterKeyStatementBase node);
    public virtual void ExplicitVisit(BackupRestoreMasterKeyStatementBase node);
    public virtual void Visit(BackupServiceMasterKeyStatement node);
    public virtual void ExplicitVisit(BackupServiceMasterKeyStatement node);
    public virtual void Visit(RestoreServiceMasterKeyStatement node);
    public virtual void ExplicitVisit(RestoreServiceMasterKeyStatement node);
    public virtual void Visit(BackupMasterKeyStatement node);
    public virtual void ExplicitVisit(BackupMasterKeyStatement node);
    public virtual void Visit(RestoreMasterKeyStatement node);
    public virtual void ExplicitVisit(RestoreMasterKeyStatement node);
    public virtual void Visit(ScalarExpressionSnippet node);
    public virtual void ExplicitVisit(ScalarExpressionSnippet node);
    public virtual void Visit(BooleanExpressionSnippet node);
    public virtual void ExplicitVisit(BooleanExpressionSnippet node);
    public virtual void Visit(StatementListSnippet node);
    public virtual void ExplicitVisit(StatementListSnippet node);
    public virtual void Visit(SelectStatementSnippet node);
    public virtual void ExplicitVisit(SelectStatementSnippet node);
    public virtual void Visit(SchemaObjectNameSnippet node);
    public virtual void ExplicitVisit(SchemaObjectNameSnippet node);
    public virtual void Visit(TSqlFragmentSnippet node);
    public virtual void ExplicitVisit(TSqlFragmentSnippet node);
    public virtual void Visit(TSqlStatementSnippet node);
    public virtual void ExplicitVisit(TSqlStatementSnippet node);
    public virtual void Visit(IdentifierSnippet node);
    public virtual void ExplicitVisit(IdentifierSnippet node);
    public virtual void Visit(TSqlScript node);
    public virtual void ExplicitVisit(TSqlScript node);
    public virtual void Visit(TSqlBatch node);
    public virtual void ExplicitVisit(TSqlBatch node);
    public virtual void Visit(TSqlStatement node);
    public virtual void ExplicitVisit(TSqlStatement node);
    public virtual void Visit(DataModificationStatement node);
    public virtual void ExplicitVisit(DataModificationStatement node);
    public virtual void Visit(DataModificationSpecification node);
    public virtual void ExplicitVisit(DataModificationSpecification node);
    public virtual void Visit(MergeStatement node);
    public virtual void ExplicitVisit(MergeStatement node);
    public virtual void Visit(MergeSpecification node);
    public virtual void ExplicitVisit(MergeSpecification node);
    public virtual void Visit(MergeActionClause node);
    public virtual void ExplicitVisit(MergeActionClause node);
    public virtual void Visit(MergeAction node);
    public virtual void ExplicitVisit(MergeAction node);
    public virtual void Visit(UpdateMergeAction node);
    public virtual void ExplicitVisit(UpdateMergeAction node);
    public virtual void Visit(DeleteMergeAction node);
    public virtual void ExplicitVisit(DeleteMergeAction node);
    public virtual void Visit(InsertMergeAction node);
    public virtual void ExplicitVisit(InsertMergeAction node);
    public virtual void Visit(CreateTypeTableStatement node);
    public virtual void ExplicitVisit(CreateTypeTableStatement node);
    public virtual void Visit(SensitivityClassificationStatement node);
    public virtual void ExplicitVisit(SensitivityClassificationStatement node);
    public virtual void Visit(SensitivityClassificationOption node);
    public virtual void ExplicitVisit(SensitivityClassificationOption node);
    public virtual void Visit(AddSensitivityClassificationStatement node);
    public virtual void ExplicitVisit(AddSensitivityClassificationStatement node);
    public virtual void Visit(DropSensitivityClassificationStatement node);
    public virtual void ExplicitVisit(DropSensitivityClassificationStatement node);
    public virtual void Visit(AuditSpecificationStatement node);
    public virtual void ExplicitVisit(AuditSpecificationStatement node);
    public virtual void Visit(AuditSpecificationPart node);
    public virtual void ExplicitVisit(AuditSpecificationPart node);
    public virtual void Visit(AuditSpecificationDetail node);
    public virtual void ExplicitVisit(AuditSpecificationDetail node);
    public virtual void Visit(AuditActionSpecification node);
    public virtual void ExplicitVisit(AuditActionSpecification node);
    public virtual void Visit(DatabaseAuditAction node);
    public virtual void ExplicitVisit(DatabaseAuditAction node);
    public virtual void Visit(AuditActionGroupReference node);
    public virtual void ExplicitVisit(AuditActionGroupReference node);
    public virtual void Visit(CreateDatabaseAuditSpecificationStatement node);
    public virtual void ExplicitVisit(CreateDatabaseAuditSpecificationStatement node);
    public virtual void Visit(AlterDatabaseAuditSpecificationStatement node);
    public virtual void ExplicitVisit(AlterDatabaseAuditSpecificationStatement node);
    public virtual void Visit(DropDatabaseAuditSpecificationStatement node);
    public virtual void ExplicitVisit(DropDatabaseAuditSpecificationStatement node);
    public virtual void Visit(CreateServerAuditSpecificationStatement node);
    public virtual void ExplicitVisit(CreateServerAuditSpecificationStatement node);
    public virtual void Visit(AlterServerAuditSpecificationStatement node);
    public virtual void ExplicitVisit(AlterServerAuditSpecificationStatement node);
    public virtual void Visit(DropServerAuditSpecificationStatement node);
    public virtual void ExplicitVisit(DropServerAuditSpecificationStatement node);
    public virtual void Visit(ServerAuditStatement node);
    public virtual void ExplicitVisit(ServerAuditStatement node);
    public virtual void Visit(CreateServerAuditStatement node);
    public virtual void ExplicitVisit(CreateServerAuditStatement node);
    public virtual void Visit(AlterServerAuditStatement node);
    public virtual void ExplicitVisit(AlterServerAuditStatement node);
    public virtual void Visit(DropServerAuditStatement node);
    public virtual void ExplicitVisit(DropServerAuditStatement node);
    public virtual void Visit(AuditTarget node);
    public virtual void ExplicitVisit(AuditTarget node);
    public virtual void Visit(AuditOption node);
    public virtual void ExplicitVisit(AuditOption node);
    public virtual void Visit(QueueDelayAuditOption node);
    public virtual void ExplicitVisit(QueueDelayAuditOption node);
    public virtual void Visit(AuditGuidAuditOption node);
    public virtual void ExplicitVisit(AuditGuidAuditOption node);
    public virtual void Visit(OnFailureAuditOption node);
    public virtual void ExplicitVisit(OnFailureAuditOption node);
    public virtual void Visit(StateAuditOption node);
    public virtual void ExplicitVisit(StateAuditOption node);
    public virtual void Visit(AuditTargetOption node);
    public virtual void ExplicitVisit(AuditTargetOption node);
    public virtual void Visit(MaxSizeAuditTargetOption node);
    public virtual void ExplicitVisit(MaxSizeAuditTargetOption node);
    public virtual void Visit(RetentionDaysAuditTargetOption node);
    public virtual void ExplicitVisit(RetentionDaysAuditTargetOption node);
    public virtual void Visit(MaxRolloverFilesAuditTargetOption node);
    public virtual void ExplicitVisit(MaxRolloverFilesAuditTargetOption node);
    public virtual void Visit(LiteralAuditTargetOption node);
    public virtual void ExplicitVisit(LiteralAuditTargetOption node);
    public virtual void Visit(OnOffAuditTargetOption node);
    public virtual void ExplicitVisit(OnOffAuditTargetOption node);
    public virtual void Visit(DatabaseEncryptionKeyStatement node);
    public virtual void ExplicitVisit(DatabaseEncryptionKeyStatement node);
    public virtual void Visit(CreateDatabaseEncryptionKeyStatement node);
    public virtual void ExplicitVisit(CreateDatabaseEncryptionKeyStatement node);
    public virtual void Visit(AlterDatabaseEncryptionKeyStatement node);
    public virtual void ExplicitVisit(AlterDatabaseEncryptionKeyStatement node);
    public virtual void Visit(DropDatabaseEncryptionKeyStatement node);
    public virtual void ExplicitVisit(DropDatabaseEncryptionKeyStatement node);
    public virtual void Visit(ResourcePoolStatement node);
    public virtual void ExplicitVisit(ResourcePoolStatement node);
    public virtual void Visit(ResourcePoolParameter node);
    public virtual void ExplicitVisit(ResourcePoolParameter node);
    public virtual void Visit(ResourcePoolAffinitySpecification node);
    public virtual void ExplicitVisit(ResourcePoolAffinitySpecification node);
    public virtual void Visit(CreateResourcePoolStatement node);
    public virtual void ExplicitVisit(CreateResourcePoolStatement node);
    public virtual void Visit(AlterResourcePoolStatement node);
    public virtual void ExplicitVisit(AlterResourcePoolStatement node);
    public virtual void Visit(DropResourcePoolStatement node);
    public virtual void ExplicitVisit(DropResourcePoolStatement node);
    public virtual void Visit(ExternalResourcePoolStatement node);
    public virtual void ExplicitVisit(ExternalResourcePoolStatement node);
    public virtual void Visit(ExternalResourcePoolParameter node);
    public virtual void ExplicitVisit(ExternalResourcePoolParameter node);
    public virtual void Visit(ExternalResourcePoolAffinitySpecification node);
    public virtual void ExplicitVisit(ExternalResourcePoolAffinitySpecification node);
    public virtual void Visit(CreateExternalResourcePoolStatement node);
    public virtual void ExplicitVisit(CreateExternalResourcePoolStatement node);
    public virtual void Visit(AlterExternalResourcePoolStatement node);
    public virtual void ExplicitVisit(AlterExternalResourcePoolStatement node);
    public virtual void Visit(DropExternalResourcePoolStatement node);
    public virtual void ExplicitVisit(DropExternalResourcePoolStatement node);
    public virtual void Visit(WorkloadGroupStatement node);
    public virtual void ExplicitVisit(WorkloadGroupStatement node);
    public virtual void Visit(WorkloadGroupResourceParameter node);
    public virtual void ExplicitVisit(WorkloadGroupResourceParameter node);
    public virtual void Visit(WorkloadGroupImportanceParameter node);
    public virtual void ExplicitVisit(WorkloadGroupImportanceParameter node);
    public virtual void Visit(WorkloadGroupParameter node);
    public virtual void ExplicitVisit(WorkloadGroupParameter node);
    public virtual void Visit(CreateWorkloadGroupStatement node);
    public virtual void ExplicitVisit(CreateWorkloadGroupStatement node);
    public virtual void Visit(AlterWorkloadGroupStatement node);
    public virtual void ExplicitVisit(AlterWorkloadGroupStatement node);
    public virtual void Visit(DropWorkloadGroupStatement node);
    public virtual void ExplicitVisit(DropWorkloadGroupStatement node);
    public virtual void Visit(WorkloadClassifierStatement node);
    public virtual void ExplicitVisit(WorkloadClassifierStatement node);
    public virtual void Visit(WorkloadClassifierOption node);
    public virtual void ExplicitVisit(WorkloadClassifierOption node);
    public virtual void Visit(ClassifierWorkloadGroupOption node);
    public virtual void ExplicitVisit(ClassifierWorkloadGroupOption node);
    public virtual void Visit(ClassifierMemberNameOption node);
    public virtual void ExplicitVisit(ClassifierMemberNameOption node);
    public virtual void Visit(ClassifierWlmLabelOption node);
    public virtual void ExplicitVisit(ClassifierWlmLabelOption node);
    public virtual void Visit(ClassifierImportanceOption node);
    public virtual void ExplicitVisit(ClassifierImportanceOption node);
    public virtual void Visit(ClassifierWlmContextOption node);
    public virtual void ExplicitVisit(ClassifierWlmContextOption node);
    public virtual void Visit(ClassifierStartTimeOption node);
    public virtual void ExplicitVisit(ClassifierStartTimeOption node);
    public virtual void Visit(ClassifierEndTimeOption node);
    public virtual void ExplicitVisit(ClassifierEndTimeOption node);
    public virtual void Visit(WlmTimeLiteral node);
    public virtual void ExplicitVisit(WlmTimeLiteral node);
    public virtual void Visit(CreateWorkloadClassifierStatement node);
    public virtual void ExplicitVisit(CreateWorkloadClassifierStatement node);
    public virtual void Visit(DropWorkloadClassifierStatement node);
    public virtual void ExplicitVisit(DropWorkloadClassifierStatement node);
    public virtual void Visit(BrokerPriorityStatement node);
    public virtual void ExplicitVisit(BrokerPriorityStatement node);
    public virtual void Visit(BrokerPriorityParameter node);
    public virtual void ExplicitVisit(BrokerPriorityParameter node);
    public virtual void Visit(CreateBrokerPriorityStatement node);
    public virtual void ExplicitVisit(CreateBrokerPriorityStatement node);
    public virtual void Visit(AlterBrokerPriorityStatement node);
    public virtual void ExplicitVisit(AlterBrokerPriorityStatement node);
    public virtual void Visit(DropBrokerPriorityStatement node);
    public virtual void ExplicitVisit(DropBrokerPriorityStatement node);
    public virtual void Visit(CreateFullTextStopListStatement node);
    public virtual void ExplicitVisit(CreateFullTextStopListStatement node);
    public virtual void Visit(AlterFullTextStopListStatement node);
    public virtual void ExplicitVisit(AlterFullTextStopListStatement node);
    public virtual void Visit(FullTextStopListAction node);
    public virtual void ExplicitVisit(FullTextStopListAction node);
    public virtual void Visit(DropFullTextStopListStatement node);
    public virtual void ExplicitVisit(DropFullTextStopListStatement node);
    public virtual void Visit(CreateCryptographicProviderStatement node);
    public virtual void ExplicitVisit(CreateCryptographicProviderStatement node);
    public virtual void Visit(AlterCryptographicProviderStatement node);
    public virtual void ExplicitVisit(AlterCryptographicProviderStatement node);
    public virtual void Visit(DropCryptographicProviderStatement node);
    public virtual void ExplicitVisit(DropCryptographicProviderStatement node);
    public virtual void Visit(EventSessionObjectName node);
    public virtual void ExplicitVisit(EventSessionObjectName node);
    public virtual void Visit(EventSessionStatement node);
    public virtual void ExplicitVisit(EventSessionStatement node);
    public virtual void Visit(CreateEventSessionStatement node);
    public virtual void ExplicitVisit(CreateEventSessionStatement node);
    public virtual void Visit(EventDeclaration node);
    public virtual void ExplicitVisit(EventDeclaration node);
    public virtual void Visit(EventDeclarationSetParameter node);
    public virtual void ExplicitVisit(EventDeclarationSetParameter node);
    public virtual void Visit(SourceDeclaration node);
    public virtual void ExplicitVisit(SourceDeclaration node);
    public virtual void Visit(EventDeclarationCompareFunctionParameter node);
    public virtual void ExplicitVisit(EventDeclarationCompareFunctionParameter node);
    public virtual void Visit(TargetDeclaration node);
    public virtual void ExplicitVisit(TargetDeclaration node);
    public virtual void Visit(SessionOption node);
    public virtual void ExplicitVisit(SessionOption node);
    public virtual void Visit(EventRetentionSessionOption node);
    public virtual void ExplicitVisit(EventRetentionSessionOption node);
    public virtual void Visit(MemoryPartitionSessionOption node);
    public virtual void ExplicitVisit(MemoryPartitionSessionOption node);
    public virtual void Visit(LiteralSessionOption node);
    public virtual void ExplicitVisit(LiteralSessionOption node);
    public virtual void Visit(MaxDispatchLatencySessionOption node);
    public virtual void ExplicitVisit(MaxDispatchLatencySessionOption node);
    public virtual void Visit(OnOffSessionOption node);
    public virtual void ExplicitVisit(OnOffSessionOption node);
    public virtual void Visit(AlterEventSessionStatement node);
    public virtual void ExplicitVisit(AlterEventSessionStatement node);
    public virtual void Visit(DropEventSessionStatement node);
    public virtual void ExplicitVisit(DropEventSessionStatement node);
    public virtual void Visit(AlterResourceGovernorStatement node);
    public virtual void ExplicitVisit(AlterResourceGovernorStatement node);
    public virtual void Visit(CreateSpatialIndexStatement node);
    public virtual void ExplicitVisit(CreateSpatialIndexStatement node);
    public virtual void Visit(SpatialIndexOption node);
    public virtual void ExplicitVisit(SpatialIndexOption node);
    public virtual void Visit(SpatialIndexRegularOption node);
    public virtual void ExplicitVisit(SpatialIndexRegularOption node);
    public virtual void Visit(BoundingBoxSpatialIndexOption node);
    public virtual void ExplicitVisit(BoundingBoxSpatialIndexOption node);
    public virtual void Visit(BoundingBoxParameter node);
    public virtual void ExplicitVisit(BoundingBoxParameter node);
    public virtual void Visit(GridsSpatialIndexOption node);
    public virtual void ExplicitVisit(GridsSpatialIndexOption node);
    public virtual void Visit(GridParameter node);
    public virtual void ExplicitVisit(GridParameter node);
    public virtual void Visit(CellsPerObjectSpatialIndexOption node);
    public virtual void ExplicitVisit(CellsPerObjectSpatialIndexOption node);
    public virtual void Visit(AlterServerConfigurationStatement node);
    public virtual void ExplicitVisit(AlterServerConfigurationStatement node);
    public virtual void Visit(ProcessAffinityRange node);
    public virtual void ExplicitVisit(ProcessAffinityRange node);
    public virtual void Visit(AlterServerConfigurationSetExternalAuthenticationStatement node);
    public virtual void ExplicitVisit(AlterServerConfigurationSetExternalAuthenticationStatement node);
    public virtual void Visit(AlterServerConfigurationExternalAuthenticationOption node);
    public virtual void ExplicitVisit(AlterServerConfigurationExternalAuthenticationOption node);
    public virtual void Visit(AlterServerConfigurationExternalAuthenticationContainerOption node);
    public virtual void ExplicitVisit(AlterServerConfigurationExternalAuthenticationContainerOption node);
    public virtual void Visit(AlterServerConfigurationSetBufferPoolExtensionStatement node);
    public virtual void ExplicitVisit(AlterServerConfigurationSetBufferPoolExtensionStatement node);
    public virtual void Visit(AlterServerConfigurationBufferPoolExtensionOption node);
    public virtual void ExplicitVisit(AlterServerConfigurationBufferPoolExtensionOption node);
    public virtual void Visit(AlterServerConfigurationBufferPoolExtensionContainerOption node);
    public virtual void ExplicitVisit(AlterServerConfigurationBufferPoolExtensionContainerOption node);
    public virtual void Visit(AlterServerConfigurationBufferPoolExtensionSizeOption node);
    public virtual void ExplicitVisit(AlterServerConfigurationBufferPoolExtensionSizeOption node);
    public virtual void Visit(AlterServerConfigurationSetDiagnosticsLogStatement node);
    public virtual void ExplicitVisit(AlterServerConfigurationSetDiagnosticsLogStatement node);
    public virtual void Visit(AlterServerConfigurationDiagnosticsLogOption node);
    public virtual void ExplicitVisit(AlterServerConfigurationDiagnosticsLogOption node);
    public virtual void Visit(AlterServerConfigurationDiagnosticsLogMaxSizeOption node);
    public virtual void ExplicitVisit(AlterServerConfigurationDiagnosticsLogMaxSizeOption node);
    public virtual void Visit(AlterServerConfigurationSetFailoverClusterPropertyStatement node);
    public virtual void ExplicitVisit(AlterServerConfigurationSetFailoverClusterPropertyStatement node);
    public virtual void Visit(AlterServerConfigurationFailoverClusterPropertyOption node);
    public virtual void ExplicitVisit(AlterServerConfigurationFailoverClusterPropertyOption node);
    public virtual void Visit(AlterServerConfigurationSetHadrClusterStatement node);
    public virtual void ExplicitVisit(AlterServerConfigurationSetHadrClusterStatement node);
    public virtual void Visit(AlterServerConfigurationHadrClusterOption node);
    public virtual void ExplicitVisit(AlterServerConfigurationHadrClusterOption node);
    public virtual void Visit(AlterServerConfigurationSetSoftNumaStatement node);
    public virtual void ExplicitVisit(AlterServerConfigurationSetSoftNumaStatement node);
    public virtual void Visit(AlterServerConfigurationSoftNumaOption node);
    public virtual void ExplicitVisit(AlterServerConfigurationSoftNumaOption node);
    public virtual void Visit(AvailabilityGroupStatement node);
    public virtual void ExplicitVisit(AvailabilityGroupStatement node);
    public virtual void Visit(CreateAvailabilityGroupStatement node);
    public virtual void ExplicitVisit(CreateAvailabilityGroupStatement node);
    public virtual void Visit(AlterAvailabilityGroupStatement node);
    public virtual void ExplicitVisit(AlterAvailabilityGroupStatement node);
    public virtual void Visit(AvailabilityReplica node);
    public virtual void ExplicitVisit(AvailabilityReplica node);
    public virtual void Visit(AvailabilityReplicaOption node);
    public virtual void ExplicitVisit(AvailabilityReplicaOption node);
    public virtual void Visit(LiteralReplicaOption node);
    public virtual void ExplicitVisit(LiteralReplicaOption node);
    public virtual void Visit(AvailabilityModeReplicaOption node);
    public virtual void ExplicitVisit(AvailabilityModeReplicaOption node);
    public virtual void Visit(FailoverModeReplicaOption node);
    public virtual void ExplicitVisit(FailoverModeReplicaOption node);
    public virtual void Visit(PrimaryRoleReplicaOption node);
    public virtual void ExplicitVisit(PrimaryRoleReplicaOption node);
    public virtual void Visit(SecondaryRoleReplicaOption node);
    public virtual void ExplicitVisit(SecondaryRoleReplicaOption node);
    public virtual void Visit(AvailabilityGroupOption node);
    public virtual void ExplicitVisit(AvailabilityGroupOption node);
    public virtual void Visit(LiteralAvailabilityGroupOption node);
    public virtual void ExplicitVisit(LiteralAvailabilityGroupOption node);
    public virtual void Visit(AlterAvailabilityGroupAction node);
    public virtual void ExplicitVisit(AlterAvailabilityGroupAction node);
    public virtual void Visit(AlterAvailabilityGroupFailoverAction node);
    public virtual void ExplicitVisit(AlterAvailabilityGroupFailoverAction node);
    public virtual void Visit(AlterAvailabilityGroupFailoverOption node);
    public virtual void ExplicitVisit(AlterAvailabilityGroupFailoverOption node);
    public virtual void Visit(DropAvailabilityGroupStatement node);
    public virtual void ExplicitVisit(DropAvailabilityGroupStatement node);
    public virtual void Visit(CreateFederationStatement node);
    public virtual void ExplicitVisit(CreateFederationStatement node);
    public virtual void Visit(AlterFederationStatement node);
    public virtual void ExplicitVisit(AlterFederationStatement node);
    public virtual void Visit(DropFederationStatement node);
    public virtual void ExplicitVisit(DropFederationStatement node);
    public virtual void Visit(UseFederationStatement node);
    public virtual void ExplicitVisit(UseFederationStatement node);
    public virtual void Visit(DiskStatement node);
    public virtual void ExplicitVisit(DiskStatement node);
    public virtual void Visit(DiskStatementOption node);
    public virtual void ExplicitVisit(DiskStatementOption node);
    public virtual void Visit(CreateColumnStoreIndexStatement node);
    public virtual void ExplicitVisit(CreateColumnStoreIndexStatement node);
    public virtual void Visit(WindowFrameClause node);
    public virtual void ExplicitVisit(WindowFrameClause node);
    public virtual void Visit(WindowDelimiter node);
    public virtual void ExplicitVisit(WindowDelimiter node);
    public virtual void Visit(WithinGroupClause node);
    public virtual void ExplicitVisit(WithinGroupClause node);
    public virtual void Visit(SelectiveXmlIndexPromotedPath node);
    public virtual void ExplicitVisit(SelectiveXmlIndexPromotedPath node);
    public virtual void Visit(TemporalClause node);
    public virtual void ExplicitVisit(TemporalClause node);
    public virtual void Visit(CompressionDelayIndexOption node);
    public virtual void ExplicitVisit(CompressionDelayIndexOption node);
    public virtual void Visit(ExternalLibraryStatement node);
    public virtual void ExplicitVisit(ExternalLibraryStatement node);
    public virtual void Visit(CreateExternalLibraryStatement node);
    public virtual void ExplicitVisit(CreateExternalLibraryStatement node);
    public virtual void Visit(AlterExternalLibraryStatement node);
    public virtual void ExplicitVisit(AlterExternalLibraryStatement node);
    public virtual void Visit(ExternalLibraryFileOption node);
    public virtual void ExplicitVisit(ExternalLibraryFileOption node);
    public virtual void Visit(DropExternalLibraryStatement node);
    public virtual void ExplicitVisit(DropExternalLibraryStatement node);
    public virtual void Visit(ExternalLanguageStatement node);
    public virtual void ExplicitVisit(ExternalLanguageStatement node);
    public virtual void Visit(CreateExternalLanguageStatement node);
    public virtual void ExplicitVisit(CreateExternalLanguageStatement node);
    public virtual void Visit(AlterExternalLanguageStatement node);
    public virtual void ExplicitVisit(AlterExternalLanguageStatement node);
    public virtual void Visit(ExternalLanguageFileOption node);
    public virtual void ExplicitVisit(ExternalLanguageFileOption node);
    public virtual void Visit(DropExternalLanguageStatement node);
    public virtual void ExplicitVisit(DropExternalLanguageStatement node);
}
internal abstract class Microsoft.SqlServer.TransactSql.ScriptDom.TSqlLexerBaseInternal : CharScanner {
    private int _complexTokenStartOffset;
    protected int _currentLineStartOffset;
    protected int _acceptableGoOffset;
    public int CurrentOffset { get; }
    protected TSqlLexerBaseInternal(LexerSharedInputState state);
    public void InitializeForNewInput(int startOffset, int startLine, int startColumn, TextReader input);
    public int get_CurrentOffset();
    public virtual void newline();
    protected internal virtual IToken makeToken(int t);
    protected void checkEOF(TokenKind currentToken);
    protected void beginComplexToken();
    internal static bool IsValueTooLargeForTokenInteger(string source);
}
internal class Microsoft.SqlServer.TransactSql.ScriptDom.TSqlParseErrorException : Exception {
    private ParseError _parseError;
    private bool _doNotLog;
    public bool DoNotLog { get; }
    public ParseError ParseError { get; }
    public TSqlParseErrorException(ParseError error, bool doNotLog);
    public TSqlParseErrorException(ParseError error);
    private TSqlParseErrorException(SerializationInfo info, StreamingContext context);
    public bool get_DoNotLog();
    public ParseError get_ParseError();
}
public abstract class Microsoft.SqlServer.TransactSql.ScriptDom.TSqlParser : object {
    internal static string ScriptEntryMethod;
    private bool _quotedIdentifier;
    public bool QuotedIdentifier { get; }
    internal TSqlParser(bool quotedIdentifiersOn);
    public TSqlParser Create(SqlVersion tsqlParserVersion, bool initialQuotedIdentifiers);
    public TSqlFragment Parse(TextReader input, IList`1& errors);
    public TSqlFragment Parse(TextReader input, IList`1& errors, int startOffset, int startLine, int startColumn);
    public abstract virtual TSqlFragment Parse(IList`1<TSqlParserToken> tokens, IList`1& errors);
    public abstract virtual ChildObjectName ParseChildObjectName(TextReader input, IList`1& errors, int startOffset, int startLine, int startColumn);
    public ChildObjectName ParseChildObjectName(TextReader input, IList`1& errors);
    public abstract virtual SchemaObjectName ParseSchemaObjectName(TextReader input, IList`1& errors, int startOffset, int startLine, int startColumn);
    public SchemaObjectName ParseSchemaObjectName(TextReader input, IList`1& errors);
    public abstract virtual DataTypeReference ParseScalarDataType(TextReader input, IList`1& errors, int startOffset, int startLine, int startColumn);
    public DataTypeReference ParseScalarDataType(TextReader input, IList`1& errors);
    public abstract virtual TSqlFragment ParseConstantOrIdentifier(TextReader input, IList`1& errors, int startOffset, int startLine, int startColumn);
    public TSqlFragment ParseConstantOrIdentifier(TextReader input, IList`1& errors);
    public abstract virtual TSqlFragment ParseConstantOrIdentifierWithDefault(TextReader input, IList`1& errors, int startOffset, int startLine, int startColumn);
    public TSqlFragment ParseConstantOrIdentifierWithDefault(TextReader input, IList`1& errors);
    public abstract virtual ScalarExpression ParseExpression(TextReader input, IList`1& errors, int startOffset, int startLine, int startColumn);
    public ScalarExpression ParseExpression(TextReader input, IList`1& errors);
    public abstract virtual BooleanExpression ParseBooleanExpression(TextReader input, IList`1& errors, int startOffset, int startLine, int startColumn);
    public BooleanExpression ParseBooleanExpression(TextReader input, IList`1& errors);
    public abstract virtual StatementList ParseStatementList(TextReader input, IList`1& errors, int startOffset, int startLine, int startColumn);
    public StatementList ParseStatementList(TextReader input, IList`1& errors);
    public abstract virtual SelectStatement ParseSubQueryExpressionWithOptionalCTE(TextReader input, IList`1& errors, int startOffset, int startLine, int startColumn);
    public SelectStatement ParseSubQueryExpressionWithOptionalCTE(TextReader input, IList`1& errors);
    public bool TryParseSqlModuleObjectName(TextReader input, SchemaObjectName& result);
    public bool TryParseTriggerModule(TextReader input, SchemaObjectName& triggerName, SchemaObjectName& targetName);
    internal abstract virtual TSqlStatement PhaseOneParse(TextReader input);
    public IList`1<TSqlParserToken> GetTokenStream(TextReader input, IList`1& errors);
    public IList`1<TSqlParserToken> GetTokenStream(TextReader input, IList`1& errors, int startOffset, int startLine, int startColumn);
    public bool ValidateIdentifier(string name);
    public bool get_QuotedIdentifier();
    internal abstract virtual TSqlLexerBaseInternal GetNewInternalLexer();
    internal void InitializeInternalParserInput(TSql80ParserBaseInternal parser, TextReader input, IList`1& errors, int startOffset, int startLine, int startColumn);
    internal TSqlStatement PhaseOneParseImpl(TSql80ParserBaseInternal parser, ParserEntryPoint`1<TSqlScript> entryPoint, string entryPointName, TextReader input);
}
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "15.0.0.0")]
internal class Microsoft.SqlServer.TransactSql.ScriptDom.TSqlParserResource : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string SQL46001Message { get; }
    internal static string SQL46002Message { get; }
    internal static string SQL46003Message { get; }
    internal static string SQL46004Message { get; }
    internal static string SQL46005Message { get; }
    internal static string SQL46006Message { get; }
    internal static string SQL46007Message { get; }
    internal static string SQL46008Message { get; }
    internal static string SQL46009Message { get; }
    internal static string SQL46010Message { get; }
    internal static string SQL46011Message { get; }
    internal static string SQL46012Message { get; }
    internal static string SQL46013Message { get; }
    internal static string SQL46014Message { get; }
    internal static string SQL46015Message { get; }
    internal static string SQL46016Message { get; }
    internal static string SQL46017Message { get; }
    internal static string SQL46018Message { get; }
    internal static string SQL46019Message { get; }
    internal static string SQL46020Message { get; }
    internal static string SQL46021Message { get; }
    internal static string SQL46022Message { get; }
    internal static string SQL46023Message { get; }
    internal static string SQL46024Message { get; }
    internal static string SQL46025Message { get; }
    internal static string SQL46026Message { get; }
    internal static string SQL46027Message { get; }
    internal static string SQL46028Message { get; }
    internal static string SQL46029Message { get; }
    internal static string SQL46030Message { get; }
    internal static string SQL46031Message { get; }
    internal static string SQL46032Message { get; }
    internal static string SQL46033Message { get; }
    internal static string SQL46034Message { get; }
    internal static string SQL46035Message { get; }
    internal static string SQL46036Message { get; }
    internal static string SQL46037Message { get; }
    internal static string SQL46038Message { get; }
    internal static string SQL46039Message { get; }
    internal static string SQL46040Message { get; }
    internal static string SQL46041Message { get; }
    internal static string SQL46042Message { get; }
    internal static string SQL46043Message { get; }
    internal static string SQL46044Message { get; }
    internal static string SQL46045Message { get; }
    internal static string SQL46047Message { get; }
    internal static string SQL46048Message { get; }
    internal static string SQL46049Message { get; }
    internal static string SQL46050Message { get; }
    internal static string SQL46051Message { get; }
    internal static string SQL46052Message { get; }
    internal static string SQL46053Message { get; }
    internal static string SQL46054Message { get; }
    internal static string SQL46055Message { get; }
    internal static string SQL46056Message { get; }
    internal static string SQL46057Message { get; }
    internal static string SQL46058Message { get; }
    internal static string SQL46059Message { get; }
    internal static string SQL46060Message { get; }
    internal static string SQL46061Message { get; }
    internal static string SQL46062Message { get; }
    internal static string SQL46063Message { get; }
    internal static string SQL46065Message { get; }
    internal static string SQL46066Message { get; }
    internal static string SQL46067Message { get; }
    internal static string SQL46069Message { get; }
    internal static string SQL46070Message { get; }
    internal static string SQL46071Message { get; }
    internal static string SQL46072Message { get; }
    internal static string SQL46073Message { get; }
    internal static string SQL46074Message { get; }
    internal static string SQL46075Message { get; }
    internal static string SQL46076Message { get; }
    internal static string SQL46077Message { get; }
    internal static string SQL46078Message { get; }
    internal static string SQL46079Message { get; }
    internal static string SQL46080Message { get; }
    internal static string SQL46081Message { get; }
    internal static string SQL46082Message { get; }
    internal static string SQL46083Message { get; }
    internal static string SQL46084Message { get; }
    internal static string SQL46085Message { get; }
    internal static string SQL46086Message { get; }
    internal static string SQL46087Message { get; }
    internal static string SQL46088Message { get; }
    internal static string SQL46089Message { get; }
    internal static string SQL46090Message { get; }
    internal static string SQL46091Message { get; }
    internal static string SQL46092Message { get; }
    internal static string SQL46093Message { get; }
    internal static string SQL46094Message { get; }
    internal static string SQL46095Message { get; }
    internal static string SQL46096Message { get; }
    internal static string SQL46097Message { get; }
    internal static string SQL46098Message { get; }
    internal static string SQL46099Message { get; }
    internal static string SQL46100Message { get; }
    internal static string SQL46101Message { get; }
    internal static string SQL46102Message { get; }
    internal static string SQL46103Message { get; }
    internal static string SQL46104Message { get; }
    internal static string SQL46105Message { get; }
    internal static string SQL46106Message { get; }
    internal static string SQL46107Message { get; }
    internal static string SQL46108Message { get; }
    internal static string SQL46109Message { get; }
    internal static string SQL46110Message { get; }
    internal static string SQL46111Message { get; }
    internal static string SQL46112Message { get; }
    internal static string SQL46113Message { get; }
    internal static string SQL46114Message { get; }
    internal static string SQL46115Message { get; }
    internal static string SQL46116Message { get; }
    internal static string SQL46117Message { get; }
    internal static string SQL46118Message { get; }
    internal static string SQL46119Message { get; }
    internal static string SQL46120Message { get; }
    internal static string SQL46121Message { get; }
    internal static string SQL46122Message { get; }
    internal static string SQL46123Message { get; }
    internal static string SQL46124Message { get; }
    internal static string SQL46125Message { get; }
    internal static string SQL46126Message { get; }
    internal static string SQL46127Message { get; }
    internal static string SQL46128Message { get; }
    internal static string SQL46129Message { get; }
    internal static string SQL46130Message { get; }
    internal static string SQL46131Message { get; }
    internal static string SQL46132Message { get; }
    internal static string SQL46133Message { get; }
    internal static string SQL46134Message { get; }
    internal static string SQL46135Message { get; }
    internal static string SQL46136Message { get; }
    internal static string SQL46137Message { get; }
    internal static string SQL46138Message { get; }
    internal static string SQL46139Message { get; }
    internal static string SQL46140Message { get; }
    internal static string SQL46141Message { get; }
    internal static string UserDefined { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_SQL46001Message();
    internal static string get_SQL46002Message();
    internal static string get_SQL46003Message();
    internal static string get_SQL46004Message();
    internal static string get_SQL46005Message();
    internal static string get_SQL46006Message();
    internal static string get_SQL46007Message();
    internal static string get_SQL46008Message();
    internal static string get_SQL46009Message();
    internal static string get_SQL46010Message();
    internal static string get_SQL46011Message();
    internal static string get_SQL46012Message();
    internal static string get_SQL46013Message();
    internal static string get_SQL46014Message();
    internal static string get_SQL46015Message();
    internal static string get_SQL46016Message();
    internal static string get_SQL46017Message();
    internal static string get_SQL46018Message();
    internal static string get_SQL46019Message();
    internal static string get_SQL46020Message();
    internal static string get_SQL46021Message();
    internal static string get_SQL46022Message();
    internal static string get_SQL46023Message();
    internal static string get_SQL46024Message();
    internal static string get_SQL46025Message();
    internal static string get_SQL46026Message();
    internal static string get_SQL46027Message();
    internal static string get_SQL46028Message();
    internal static string get_SQL46029Message();
    internal static string get_SQL46030Message();
    internal static string get_SQL46031Message();
    internal static string get_SQL46032Message();
    internal static string get_SQL46033Message();
    internal static string get_SQL46034Message();
    internal static string get_SQL46035Message();
    internal static string get_SQL46036Message();
    internal static string get_SQL46037Message();
    internal static string get_SQL46038Message();
    internal static string get_SQL46039Message();
    internal static string get_SQL46040Message();
    internal static string get_SQL46041Message();
    internal static string get_SQL46042Message();
    internal static string get_SQL46043Message();
    internal static string get_SQL46044Message();
    internal static string get_SQL46045Message();
    internal static string get_SQL46047Message();
    internal static string get_SQL46048Message();
    internal static string get_SQL46049Message();
    internal static string get_SQL46050Message();
    internal static string get_SQL46051Message();
    internal static string get_SQL46052Message();
    internal static string get_SQL46053Message();
    internal static string get_SQL46054Message();
    internal static string get_SQL46055Message();
    internal static string get_SQL46056Message();
    internal static string get_SQL46057Message();
    internal static string get_SQL46058Message();
    internal static string get_SQL46059Message();
    internal static string get_SQL46060Message();
    internal static string get_SQL46061Message();
    internal static string get_SQL46062Message();
    internal static string get_SQL46063Message();
    internal static string get_SQL46065Message();
    internal static string get_SQL46066Message();
    internal static string get_SQL46067Message();
    internal static string get_SQL46069Message();
    internal static string get_SQL46070Message();
    internal static string get_SQL46071Message();
    internal static string get_SQL46072Message();
    internal static string get_SQL46073Message();
    internal static string get_SQL46074Message();
    internal static string get_SQL46075Message();
    internal static string get_SQL46076Message();
    internal static string get_SQL46077Message();
    internal static string get_SQL46078Message();
    internal static string get_SQL46079Message();
    internal static string get_SQL46080Message();
    internal static string get_SQL46081Message();
    internal static string get_SQL46082Message();
    internal static string get_SQL46083Message();
    internal static string get_SQL46084Message();
    internal static string get_SQL46085Message();
    internal static string get_SQL46086Message();
    internal static string get_SQL46087Message();
    internal static string get_SQL46088Message();
    internal static string get_SQL46089Message();
    internal static string get_SQL46090Message();
    internal static string get_SQL46091Message();
    internal static string get_SQL46092Message();
    internal static string get_SQL46093Message();
    internal static string get_SQL46094Message();
    internal static string get_SQL46095Message();
    internal static string get_SQL46096Message();
    internal static string get_SQL46097Message();
    internal static string get_SQL46098Message();
    internal static string get_SQL46099Message();
    internal static string get_SQL46100Message();
    internal static string get_SQL46101Message();
    internal static string get_SQL46102Message();
    internal static string get_SQL46103Message();
    internal static string get_SQL46104Message();
    internal static string get_SQL46105Message();
    internal static string get_SQL46106Message();
    internal static string get_SQL46107Message();
    internal static string get_SQL46108Message();
    internal static string get_SQL46109Message();
    internal static string get_SQL46110Message();
    internal static string get_SQL46111Message();
    internal static string get_SQL46112Message();
    internal static string get_SQL46113Message();
    internal static string get_SQL46114Message();
    internal static string get_SQL46115Message();
    internal static string get_SQL46116Message();
    internal static string get_SQL46117Message();
    internal static string get_SQL46118Message();
    internal static string get_SQL46119Message();
    internal static string get_SQL46120Message();
    internal static string get_SQL46121Message();
    internal static string get_SQL46122Message();
    internal static string get_SQL46123Message();
    internal static string get_SQL46124Message();
    internal static string get_SQL46125Message();
    internal static string get_SQL46126Message();
    internal static string get_SQL46127Message();
    internal static string get_SQL46128Message();
    internal static string get_SQL46129Message();
    internal static string get_SQL46130Message();
    internal static string get_SQL46131Message();
    internal static string get_SQL46132Message();
    internal static string get_SQL46133Message();
    internal static string get_SQL46134Message();
    internal static string get_SQL46135Message();
    internal static string get_SQL46136Message();
    internal static string get_SQL46137Message();
    internal static string get_SQL46138Message();
    internal static string get_SQL46139Message();
    internal static string get_SQL46140Message();
    internal static string get_SQL46141Message();
    internal static string get_UserDefined();
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.TSqlParserToken : object {
    private string _text;
    private int _offset;
    private int _line;
    private int _column;
    private TSqlTokenType _tokenType;
    private bool _convertStringToIdentifier;
    public TSqlTokenType TokenType { get; public set; }
    internal bool ConvertStringToIdentifier { get; internal set; }
    public int Offset { get; public set; }
    public int Line { get; public set; }
    public int Column { get; public set; }
    public string Text { get; public set; }
    private int antlr.IToken.Type { get; private set; }
    public TSqlParserToken(TSqlTokenType type, string text);
    public TSqlParserToken(TSqlTokenType type, int offset, string text, int line, int column);
    public TSqlTokenType get_TokenType();
    public void set_TokenType(TSqlTokenType value);
    internal bool get_ConvertStringToIdentifier();
    internal void set_ConvertStringToIdentifier(bool value);
    public int get_Offset();
    public void set_Offset(int value);
    public int get_Line();
    public void set_Line(int value);
    public int get_Column();
    public void set_Column(int value);
    public string get_Text();
    public void set_Text(string value);
    public bool IsKeyword();
    private sealed virtual override int antlr.IToken.get_Type();
    private sealed virtual override void antlr.IToken.set_Type(int value);
    private sealed virtual override int antlr.IToken.getColumn();
    private sealed virtual override void antlr.IToken.setColumn(int c);
    private sealed virtual override int antlr.IToken.getLine();
    private sealed virtual override void antlr.IToken.setLine(int l);
    private sealed virtual override string antlr.IToken.getFilename();
    private sealed virtual override void antlr.IToken.setFilename(string name);
    private sealed virtual override string antlr.IToken.getText();
    private sealed virtual override void antlr.IToken.setText(string t);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.TSqlScript : TSqlFragment {
    private List`1<TSqlBatch> _batches;
    public IList`1<TSqlBatch> Batches { get; }
    public IList`1<TSqlBatch> get_Batches();
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public abstract class Microsoft.SqlServer.TransactSql.ScriptDom.TSqlStatement : TSqlFragment {
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.TSqlStatementSnippet : TSqlStatement {
    private string _script;
    public string Script { get; public set; }
    public string get_Script();
    public void set_Script(string value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public enum Microsoft.SqlServer.TransactSql.ScriptDom.TSqlTokenType : Enum {
    public int value__;
    public static TSqlTokenType EndOfFile;
    public static TSqlTokenType None;
    public static TSqlTokenType Add;
    public static TSqlTokenType All;
    public static TSqlTokenType Alter;
    public static TSqlTokenType And;
    public static TSqlTokenType Any;
    public static TSqlTokenType As;
    public static TSqlTokenType Asc;
    public static TSqlTokenType Authorization;
    public static TSqlTokenType Backup;
    public static TSqlTokenType Begin;
    public static TSqlTokenType Between;
    public static TSqlTokenType Break;
    public static TSqlTokenType Browse;
    public static TSqlTokenType Bulk;
    public static TSqlTokenType By;
    public static TSqlTokenType Cascade;
    public static TSqlTokenType Case;
    public static TSqlTokenType Check;
    public static TSqlTokenType Checkpoint;
    public static TSqlTokenType Close;
    public static TSqlTokenType Clustered;
    public static TSqlTokenType Coalesce;
    public static TSqlTokenType Collate;
    public static TSqlTokenType Column;
    public static TSqlTokenType Commit;
    public static TSqlTokenType Compute;
    public static TSqlTokenType Constraint;
    public static TSqlTokenType Contains;
    public static TSqlTokenType ContainsTable;
    public static TSqlTokenType Continue;
    public static TSqlTokenType Convert;
    public static TSqlTokenType Create;
    public static TSqlTokenType Cross;
    public static TSqlTokenType Current;
    public static TSqlTokenType CurrentDate;
    public static TSqlTokenType CurrentTime;
    public static TSqlTokenType CurrentTimestamp;
    public static TSqlTokenType CurrentUser;
    public static TSqlTokenType Cursor;
    public static TSqlTokenType Database;
    public static TSqlTokenType Dbcc;
    public static TSqlTokenType Deallocate;
    public static TSqlTokenType Declare;
    public static TSqlTokenType Default;
    public static TSqlTokenType Delete;
    public static TSqlTokenType Deny;
    public static TSqlTokenType Desc;
    public static TSqlTokenType Distinct;
    public static TSqlTokenType Distributed;
    public static TSqlTokenType Double;
    public static TSqlTokenType Drop;
    public static TSqlTokenType Else;
    public static TSqlTokenType End;
    public static TSqlTokenType Errlvl;
    public static TSqlTokenType Escape;
    public static TSqlTokenType Except;
    public static TSqlTokenType Exec;
    public static TSqlTokenType Execute;
    public static TSqlTokenType Exists;
    public static TSqlTokenType Exit;
    public static TSqlTokenType Fetch;
    public static TSqlTokenType File;
    public static TSqlTokenType FillFactor;
    public static TSqlTokenType For;
    public static TSqlTokenType Foreign;
    public static TSqlTokenType FreeText;
    public static TSqlTokenType FreeTextTable;
    public static TSqlTokenType From;
    public static TSqlTokenType Full;
    public static TSqlTokenType Function;
    public static TSqlTokenType GoTo;
    public static TSqlTokenType Grant;
    public static TSqlTokenType Group;
    public static TSqlTokenType Having;
    public static TSqlTokenType HoldLock;
    public static TSqlTokenType Identity;
    public static TSqlTokenType IdentityInsert;
    public static TSqlTokenType IdentityColumn;
    public static TSqlTokenType If;
    public static TSqlTokenType In;
    public static TSqlTokenType Index;
    public static TSqlTokenType Inner;
    public static TSqlTokenType Insert;
    public static TSqlTokenType Intersect;
    public static TSqlTokenType Into;
    public static TSqlTokenType Is;
    public static TSqlTokenType Join;
    public static TSqlTokenType Key;
    public static TSqlTokenType Kill;
    public static TSqlTokenType Left;
    public static TSqlTokenType Like;
    public static TSqlTokenType LineNo;
    public static TSqlTokenType National;
    public static TSqlTokenType NoCheck;
    public static TSqlTokenType NonClustered;
    public static TSqlTokenType Not;
    public static TSqlTokenType Null;
    public static TSqlTokenType NullIf;
    public static TSqlTokenType Of;
    public static TSqlTokenType Off;
    public static TSqlTokenType Offsets;
    public static TSqlTokenType On;
    public static TSqlTokenType Open;
    public static TSqlTokenType OpenDataSource;
    public static TSqlTokenType OpenQuery;
    public static TSqlTokenType OpenRowSet;
    public static TSqlTokenType OpenXml;
    public static TSqlTokenType Option;
    public static TSqlTokenType Or;
    public static TSqlTokenType Order;
    public static TSqlTokenType Outer;
    public static TSqlTokenType Over;
    public static TSqlTokenType Percent;
    public static TSqlTokenType Plan;
    public static TSqlTokenType Primary;
    public static TSqlTokenType Print;
    public static TSqlTokenType Proc;
    public static TSqlTokenType Procedure;
    public static TSqlTokenType Public;
    public static TSqlTokenType Raiserror;
    public static TSqlTokenType Read;
    public static TSqlTokenType ReadText;
    public static TSqlTokenType Reconfigure;
    public static TSqlTokenType References;
    public static TSqlTokenType Replication;
    public static TSqlTokenType Restore;
    public static TSqlTokenType Restrict;
    public static TSqlTokenType Return;
    public static TSqlTokenType Revoke;
    public static TSqlTokenType Right;
    public static TSqlTokenType Rollback;
    public static TSqlTokenType RowCount;
    public static TSqlTokenType RowGuidColumn;
    public static TSqlTokenType Rule;
    public static TSqlTokenType Save;
    public static TSqlTokenType Schema;
    public static TSqlTokenType Select;
    public static TSqlTokenType SessionUser;
    public static TSqlTokenType Set;
    public static TSqlTokenType SetUser;
    public static TSqlTokenType Shutdown;
    public static TSqlTokenType Some;
    public static TSqlTokenType Statistics;
    public static TSqlTokenType SystemUser;
    public static TSqlTokenType Table;
    public static TSqlTokenType TextSize;
    public static TSqlTokenType Then;
    public static TSqlTokenType To;
    public static TSqlTokenType Top;
    public static TSqlTokenType Tran;
    public static TSqlTokenType Transaction;
    public static TSqlTokenType Trigger;
    public static TSqlTokenType Truncate;
    public static TSqlTokenType TSEqual;
    public static TSqlTokenType Union;
    public static TSqlTokenType Unique;
    public static TSqlTokenType Update;
    public static TSqlTokenType UpdateText;
    public static TSqlTokenType Use;
    public static TSqlTokenType User;
    public static TSqlTokenType Values;
    public static TSqlTokenType Varying;
    public static TSqlTokenType View;
    public static TSqlTokenType WaitFor;
    public static TSqlTokenType When;
    public static TSqlTokenType Where;
    public static TSqlTokenType While;
    public static TSqlTokenType With;
    public static TSqlTokenType WriteText;
    public static TSqlTokenType Disk;
    public static TSqlTokenType Precision;
    public static TSqlTokenType External;
    public static TSqlTokenType Revert;
    public static TSqlTokenType Pivot;
    public static TSqlTokenType Unpivot;
    public static TSqlTokenType TableSample;
    public static TSqlTokenType Dump;
    public static TSqlTokenType Load;
    public static TSqlTokenType Merge;
    public static TSqlTokenType StopList;
    public static TSqlTokenType SemanticKeyPhraseTable;
    public static TSqlTokenType SemanticSimilarityTable;
    public static TSqlTokenType SemanticSimilarityDetailsTable;
    public static TSqlTokenType TryConvert;
    public static TSqlTokenType Bang;
    public static TSqlTokenType PercentSign;
    public static TSqlTokenType Ampersand;
    public static TSqlTokenType LeftParenthesis;
    public static TSqlTokenType RightParenthesis;
    public static TSqlTokenType LeftCurly;
    public static TSqlTokenType RightCurly;
    public static TSqlTokenType Star;
    public static TSqlTokenType MultiplyEquals;
    public static TSqlTokenType Plus;
    public static TSqlTokenType Comma;
    public static TSqlTokenType Minus;
    public static TSqlTokenType Dot;
    public static TSqlTokenType Divide;
    public static TSqlTokenType Colon;
    public static TSqlTokenType DoubleColon;
    public static TSqlTokenType Semicolon;
    public static TSqlTokenType LessThan;
    public static TSqlTokenType EqualsSign;
    public static TSqlTokenType RightOuterJoin;
    public static TSqlTokenType GreaterThan;
    public static TSqlTokenType Circumflex;
    public static TSqlTokenType VerticalLine;
    public static TSqlTokenType Tilde;
    public static TSqlTokenType AddEquals;
    public static TSqlTokenType SubtractEquals;
    public static TSqlTokenType DivideEquals;
    public static TSqlTokenType ModEquals;
    public static TSqlTokenType BitwiseAndEquals;
    public static TSqlTokenType BitwiseOrEquals;
    public static TSqlTokenType BitwiseXorEquals;
    public static TSqlTokenType Go;
    public static TSqlTokenType Label;
    public static TSqlTokenType Integer;
    public static TSqlTokenType Numeric;
    public static TSqlTokenType Real;
    public static TSqlTokenType HexLiteral;
    public static TSqlTokenType Money;
    public static TSqlTokenType SqlCommandIdentifier;
    public static TSqlTokenType PseudoColumn;
    public static TSqlTokenType DollarPartition;
    public static TSqlTokenType AsciiStringOrQuotedIdentifier;
    public static TSqlTokenType AsciiStringLiteral;
    public static TSqlTokenType UnicodeStringLiteral;
    public static TSqlTokenType Identifier;
    public static TSqlTokenType QuotedIdentifier;
    public static TSqlTokenType Variable;
    public static TSqlTokenType OdbcInitiator;
    public static TSqlTokenType ProcNameSemicolon;
    public static TSqlTokenType SingleLineComment;
    public static TSqlTokenType MultilineComment;
    public static TSqlTokenType WhiteSpace;
}
public static class Microsoft.SqlServer.TransactSql.ScriptDom.TSqlTriggerEventGroupHelper : object {
    private static TriggerEventGroupHelper HelperInstance;
    private static TSqlTriggerEventGroupHelper();
    public static bool TryParseOption(string input, SqlVersion version, EventNotificationEventGroup& returnValue);
}
public static class Microsoft.SqlServer.TransactSql.ScriptDom.TSqlTriggerEventTypeHelper : object {
    private static TriggerEventTypeHelper HelperInstance;
    private static TSqlTriggerEventTypeHelper();
    public static bool TryParseOption(string input, SqlVersion version, EventNotificationEventType& returnValue);
}
internal class Microsoft.SqlServer.TransactSql.ScriptDom.TSqlWhitespaceTokenFilter : object {
    private bool _quotedIdentifier;
    private IList`1<TSqlParserToken> _streamToFilter;
    private int _currentTokenIndex;
    private int _streamLength;
    private TSqlParserToken _lastToken;
    public TSqlParserToken LastToken { get; }
    public bool QuotedIdentifier { get; public set; }
    public TSqlWhitespaceTokenFilter(bool quotedIdentifier, IList`1<TSqlParserToken> streamToFilter);
    public sealed virtual IToken nextToken();
    public TSqlParserToken get_LastToken();
    public bool get_QuotedIdentifier();
    public void set_QuotedIdentifier(bool value);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.UnaryExpression : ScalarExpression {
    private UnaryExpressionType _unaryExpressionType;
    private ScalarExpression _expression;
    public UnaryExpressionType UnaryExpressionType { get; public set; }
    public ScalarExpression Expression { get; public set; }
    public UnaryExpressionType get_UnaryExpressionType();
    public void set_UnaryExpressionType(UnaryExpressionType value);
    public ScalarExpression get_Expression();
    public void set_Expression(ScalarExpression value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public enum Microsoft.SqlServer.TransactSql.ScriptDom.UnaryExpressionType : Enum {
    public int value__;
    public static UnaryExpressionType Positive;
    public static UnaryExpressionType Negative;
    public static UnaryExpressionType BitwiseNot;
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.UniqueConstraintDefinition : ConstraintDefinition {
    private Nullable`1<bool> _clustered;
    private bool _isPrimaryKey;
    private Nullable`1<bool> _isEnforced;
    private List`1<ColumnWithSortOrder> _columns;
    private List`1<IndexOption> _indexOptions;
    private FileGroupOrPartitionScheme _onFileGroupOrPartitionScheme;
    private IndexType _indexType;
    private IdentifierOrValueExpression _fileStreamOn;
    public Nullable`1<bool> Clustered { get; public set; }
    public bool IsPrimaryKey { get; public set; }
    public Nullable`1<bool> IsEnforced { get; public set; }
    public IList`1<ColumnWithSortOrder> Columns { get; }
    public IList`1<IndexOption> IndexOptions { get; }
    public FileGroupOrPartitionScheme OnFileGroupOrPartitionScheme { get; public set; }
    public IndexType IndexType { get; public set; }
    public IdentifierOrValueExpression FileStreamOn { get; public set; }
    public Nullable`1<bool> get_Clustered();
    public void set_Clustered(Nullable`1<bool> value);
    public bool get_IsPrimaryKey();
    public void set_IsPrimaryKey(bool value);
    public Nullable`1<bool> get_IsEnforced();
    public void set_IsEnforced(Nullable`1<bool> value);
    public IList`1<ColumnWithSortOrder> get_Columns();
    public IList`1<IndexOption> get_IndexOptions();
    public FileGroupOrPartitionScheme get_OnFileGroupOrPartitionScheme();
    public void set_OnFileGroupOrPartitionScheme(FileGroupOrPartitionScheme value);
    public IndexType get_IndexType();
    public void set_IndexType(IndexType value);
    public sealed virtual IdentifierOrValueExpression get_FileStreamOn();
    public sealed virtual void set_FileStreamOn(IdentifierOrValueExpression value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public enum Microsoft.SqlServer.TransactSql.ScriptDom.UniqueRowFilter : Enum {
    public int value__;
    public static UniqueRowFilter NotSpecified;
    public static UniqueRowFilter All;
    public static UniqueRowFilter Distinct;
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.UnpivotedTableReference : TableReferenceWithAlias {
    private TableReference _tableReference;
    private List`1<ColumnReferenceExpression> _inColumns;
    private Identifier _pivotColumn;
    private Identifier _valueColumn;
    public TableReference TableReference { get; public set; }
    public IList`1<ColumnReferenceExpression> InColumns { get; }
    public Identifier PivotColumn { get; public set; }
    public Identifier ValueColumn { get; public set; }
    public TableReference get_TableReference();
    public void set_TableReference(TableReference value);
    public IList`1<ColumnReferenceExpression> get_InColumns();
    public Identifier get_PivotColumn();
    public void set_PivotColumn(Identifier value);
    public Identifier get_ValueColumn();
    public void set_ValueColumn(Identifier value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.UnqualifiedJoin : JoinTableReference {
    private UnqualifiedJoinType _unqualifiedJoinType;
    public UnqualifiedJoinType UnqualifiedJoinType { get; public set; }
    public UnqualifiedJoinType get_UnqualifiedJoinType();
    public void set_UnqualifiedJoinType(UnqualifiedJoinType value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public enum Microsoft.SqlServer.TransactSql.ScriptDom.UnqualifiedJoinType : Enum {
    public int value__;
    public static UnqualifiedJoinType CrossJoin;
    public static UnqualifiedJoinType CrossApply;
    public static UnqualifiedJoinType OuterApply;
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.UpdateCall : BooleanExpression {
    private Identifier _identifier;
    public Identifier Identifier { get; public set; }
    public Identifier get_Identifier();
    public void set_Identifier(Identifier value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public abstract class Microsoft.SqlServer.TransactSql.ScriptDom.UpdateDeleteSpecificationBase : DataModificationSpecification {
    private FromClause _fromClause;
    private WhereClause _whereClause;
    public FromClause FromClause { get; public set; }
    public WhereClause WhereClause { get; public set; }
    public FromClause get_FromClause();
    public void set_FromClause(FromClause value);
    public WhereClause get_WhereClause();
    public void set_WhereClause(WhereClause value);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.UpdateForClause : ForClause {
    private List`1<ColumnReferenceExpression> _columns;
    public IList`1<ColumnReferenceExpression> Columns { get; }
    public IList`1<ColumnReferenceExpression> get_Columns();
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.UpdateMergeAction : MergeAction {
    private List`1<SetClause> _setClauses;
    public IList`1<SetClause> SetClauses { get; }
    public IList`1<SetClause> get_SetClauses();
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.UpdateSpecification : UpdateDeleteSpecificationBase {
    private List`1<SetClause> _setClauses;
    public IList`1<SetClause> SetClauses { get; }
    public IList`1<SetClause> get_SetClauses();
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.UpdateStatement : DataModificationStatement {
    private UpdateSpecification _updateSpecification;
    public UpdateSpecification UpdateSpecification { get; public set; }
    public UpdateSpecification get_UpdateSpecification();
    public void set_UpdateSpecification(UpdateSpecification value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.UpdateStatisticsStatement : TSqlStatement {
    private SchemaObjectName _schemaObjectName;
    private List`1<Identifier> _subElements;
    private List`1<StatisticsOption> _statisticsOptions;
    public SchemaObjectName SchemaObjectName { get; public set; }
    public IList`1<Identifier> SubElements { get; }
    public IList`1<StatisticsOption> StatisticsOptions { get; }
    public SchemaObjectName get_SchemaObjectName();
    public void set_SchemaObjectName(SchemaObjectName value);
    public IList`1<Identifier> get_SubElements();
    public IList`1<StatisticsOption> get_StatisticsOptions();
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.UpdateTextStatement : TextModificationStatement {
    private ScalarExpression _insertOffset;
    private ScalarExpression _deleteLength;
    private ColumnReferenceExpression _sourceColumn;
    private ValueExpression _sourceParameter;
    public ScalarExpression InsertOffset { get; public set; }
    public ScalarExpression DeleteLength { get; public set; }
    public ColumnReferenceExpression SourceColumn { get; public set; }
    public ValueExpression SourceParameter { get; public set; }
    public ScalarExpression get_InsertOffset();
    public void set_InsertOffset(ScalarExpression value);
    public ScalarExpression get_DeleteLength();
    public void set_DeleteLength(ScalarExpression value);
    public ColumnReferenceExpression get_SourceColumn();
    public void set_SourceColumn(ColumnReferenceExpression value);
    public ValueExpression get_SourceParameter();
    public void set_SourceParameter(ValueExpression value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.UseFederationStatement : TSqlStatement {
    private Identifier _federationName;
    private Identifier _distributionName;
    private ScalarExpression _value;
    private bool _filtering;
    public Identifier FederationName { get; public set; }
    public Identifier DistributionName { get; public set; }
    public ScalarExpression Value { get; public set; }
    public bool Filtering { get; public set; }
    public Identifier get_FederationName();
    public void set_FederationName(Identifier value);
    public Identifier get_DistributionName();
    public void set_DistributionName(Identifier value);
    public ScalarExpression get_Value();
    public void set_Value(ScalarExpression value);
    public bool get_Filtering();
    public void set_Filtering(bool value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.UseHintList : OptimizerHint {
    private List`1<StringLiteral> _hints;
    public IList`1<StringLiteral> Hints { get; }
    public IList`1<StringLiteral> get_Hints();
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.UserDataTypeReference : ParameterizedDataTypeReference {
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.UserDefinedTypeCallTarget : CallTarget {
    private SchemaObjectName _schemaObjectName;
    public SchemaObjectName SchemaObjectName { get; public set; }
    public SchemaObjectName get_SchemaObjectName();
    public void set_SchemaObjectName(SchemaObjectName value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.UserDefinedTypePropertyAccess : PrimaryExpression {
    private CallTarget _callTarget;
    private Identifier _propertyName;
    public CallTarget CallTarget { get; public set; }
    public Identifier PropertyName { get; public set; }
    public CallTarget get_CallTarget();
    public void set_CallTarget(CallTarget value);
    public Identifier get_PropertyName();
    public void set_PropertyName(Identifier value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.UserLoginOption : TSqlFragment {
    private UserLoginOptionType _userLoginOptionType;
    private Identifier _identifier;
    public UserLoginOptionType UserLoginOptionType { get; public set; }
    public Identifier Identifier { get; public set; }
    public UserLoginOptionType get_UserLoginOptionType();
    public void set_UserLoginOptionType(UserLoginOptionType value);
    public Identifier get_Identifier();
    public void set_Identifier(Identifier value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
internal class Microsoft.SqlServer.TransactSql.ScriptDom.UserLoginOptionHelper : OptionsHelper`1<UserLoginOptionType> {
    internal static UserLoginOptionHelper Instance;
    private static UserLoginOptionHelper();
}
public enum Microsoft.SqlServer.TransactSql.ScriptDom.UserLoginOptionType : Enum {
    public int value__;
    public static UserLoginOptionType Login;
    public static UserLoginOptionType Certificate;
    public static UserLoginOptionType AsymmetricKey;
    public static UserLoginOptionType WithoutLogin;
    public static UserLoginOptionType External;
}
internal class Microsoft.SqlServer.TransactSql.ScriptDom.UserOptionHelper : OptionsHelper`1<PrincipalOptionKind> {
    internal static UserOptionHelper Instance;
    private static UserOptionHelper();
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.UserRemoteServiceBindingOption : RemoteServiceBindingOption {
    private Identifier _user;
    public Identifier User { get; public set; }
    public Identifier get_User();
    public void set_User(Identifier value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public abstract class Microsoft.SqlServer.TransactSql.ScriptDom.UserStatement : TSqlStatement {
    private Identifier _name;
    private List`1<PrincipalOption> _userOptions;
    public Identifier Name { get; public set; }
    public IList`1<PrincipalOption> UserOptions { get; }
    public Identifier get_Name();
    public void set_Name(Identifier value);
    public IList`1<PrincipalOption> get_UserOptions();
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public enum Microsoft.SqlServer.TransactSql.ScriptDom.UserType80 : Enum {
    public int value__;
    public static UserType80 Null;
    public static UserType80 Public;
    public static UserType80 Users;
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.UseStatement : TSqlStatement {
    private Identifier _databaseName;
    public Identifier DatabaseName { get; public set; }
    public Identifier get_DatabaseName();
    public void set_DatabaseName(Identifier value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public abstract class Microsoft.SqlServer.TransactSql.ScriptDom.ValueExpression : PrimaryExpression {
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.ValuesInsertSource : InsertSource {
    private bool _isDefaultValues;
    private List`1<RowValue> _rowValues;
    public bool IsDefaultValues { get; public set; }
    public IList`1<RowValue> RowValues { get; }
    public bool get_IsDefaultValues();
    public void set_IsDefaultValues(bool value);
    public IList`1<RowValue> get_RowValues();
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.VariableMethodCallTableReference : TableReferenceWithAliasAndColumns {
    private VariableReference _variable;
    private Identifier _methodName;
    private List`1<ScalarExpression> _parameters;
    public VariableReference Variable { get; public set; }
    public Identifier MethodName { get; public set; }
    public IList`1<ScalarExpression> Parameters { get; }
    public VariableReference get_Variable();
    public void set_Variable(VariableReference value);
    public Identifier get_MethodName();
    public void set_MethodName(Identifier value);
    public IList`1<ScalarExpression> get_Parameters();
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.VariableReference : ValueExpression {
    private string _name;
    public string Name { get; public set; }
    public string get_Name();
    public void set_Name(string value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.VariableTableReference : TableReferenceWithAlias {
    private VariableReference _variable;
    public VariableReference Variable { get; public set; }
    public VariableReference get_Variable();
    public void set_Variable(VariableReference value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.VariableValuePair : TSqlFragment {
    private VariableReference _variable;
    private ScalarExpression _value;
    private bool _isForUnknown;
    public VariableReference Variable { get; public set; }
    public ScalarExpression Value { get; public set; }
    public bool IsForUnknown { get; public set; }
    public VariableReference get_Variable();
    public void set_Variable(VariableReference value);
    public ScalarExpression get_Value();
    public void set_Value(ScalarExpression value);
    public bool get_IsForUnknown();
    public void set_IsForUnknown(bool value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.Versioning.VersioningVisitor : TSqlConcreteFragmentVisitor {
    private SqlEngineType _targetEngineType;
    private SqlVersion _targetVersion;
    private List`1<ParseError> _errors;
    public VersioningVisitor(SqlScriptGeneratorOptions options);
    public VersioningVisitor(SqlEngineType engineType, SqlVersion version);
    internal IList`1<ParseError> GetErrors();
    private void AddVersioningError(int offset, int line, int column, string unsupportedStatement);
    public virtual void ExplicitVisit(LedgerTableOption node);
    public virtual void ExplicitVisit(SystemVersioningTableOption node);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.ViewDistributionOption : ViewOption {
    private ViewDistributionPolicy _value;
    public ViewDistributionPolicy Value { get; public set; }
    public ViewDistributionPolicy get_Value();
    public void set_Value(ViewDistributionPolicy value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public abstract class Microsoft.SqlServer.TransactSql.ScriptDom.ViewDistributionPolicy : TSqlFragment {
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.ViewForAppendOption : ViewOption {
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.ViewHashDistributionPolicy : ViewDistributionPolicy {
    private Identifier _distributionColumn;
    public Identifier DistributionColumn { get; public set; }
    public Identifier get_DistributionColumn();
    public void set_DistributionColumn(Identifier value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.ViewOption : TSqlFragment {
    private ViewOptionKind _optionKind;
    public ViewOptionKind OptionKind { get; public set; }
    public ViewOptionKind get_OptionKind();
    public void set_OptionKind(ViewOptionKind value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
internal class Microsoft.SqlServer.TransactSql.ScriptDom.ViewOptionHelper : OptionsHelper`1<ViewOptionKind> {
    internal static ViewOptionHelper Instance;
    private static ViewOptionHelper();
    protected virtual TSqlParseErrorException GetMatchingException(IToken token);
}
public enum Microsoft.SqlServer.TransactSql.ScriptDom.ViewOptionKind : Enum {
    public int value__;
    public static ViewOptionKind Encryption;
    public static ViewOptionKind SchemaBinding;
    public static ViewOptionKind ViewMetadata;
    public static ViewOptionKind Distribution;
    public static ViewOptionKind ForAppend;
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.ViewRoundRobinDistributionPolicy : ViewDistributionPolicy {
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public abstract class Microsoft.SqlServer.TransactSql.ScriptDom.ViewStatementBody : TSqlStatement {
    private SchemaObjectName _schemaObjectName;
    private List`1<Identifier> _columns;
    private List`1<ViewOption> _viewOptions;
    private SelectStatement _selectStatement;
    private bool _withCheckOption;
    private bool _isMaterialized;
    public SchemaObjectName SchemaObjectName { get; public set; }
    public IList`1<Identifier> Columns { get; }
    public IList`1<ViewOption> ViewOptions { get; }
    public SelectStatement SelectStatement { get; public set; }
    public bool WithCheckOption { get; public set; }
    public bool IsMaterialized { get; public set; }
    public SchemaObjectName get_SchemaObjectName();
    public void set_SchemaObjectName(SchemaObjectName value);
    public IList`1<Identifier> get_Columns();
    public IList`1<ViewOption> get_ViewOptions();
    public SelectStatement get_SelectStatement();
    public void set_SelectStatement(SelectStatement value);
    public bool get_WithCheckOption();
    public void set_WithCheckOption(bool value);
    public bool get_IsMaterialized();
    public void set_IsMaterialized(bool value);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.WaitAtLowPriorityOption : IndexOption {
    private List`1<LowPriorityLockWaitOption> _options;
    public IList`1<LowPriorityLockWaitOption> Options { get; }
    public IList`1<LowPriorityLockWaitOption> get_Options();
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public enum Microsoft.SqlServer.TransactSql.ScriptDom.WaitForOption : Enum {
    public int value__;
    public static WaitForOption Delay;
    public static WaitForOption Time;
    public static WaitForOption Statement;
}
internal class Microsoft.SqlServer.TransactSql.ScriptDom.WaitForOptionHelper : OptionsHelper`1<WaitForOption> {
    internal static WaitForOptionHelper Instance;
    private static WaitForOptionHelper();
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.WaitForStatement : TSqlStatement {
    private WaitForOption _waitForOption;
    private ValueExpression _parameter;
    private ScalarExpression _timeout;
    private WaitForSupportedStatement _statement;
    public WaitForOption WaitForOption { get; public set; }
    public ValueExpression Parameter { get; public set; }
    public ScalarExpression Timeout { get; public set; }
    public WaitForSupportedStatement Statement { get; public set; }
    public WaitForOption get_WaitForOption();
    public void set_WaitForOption(WaitForOption value);
    public ValueExpression get_Parameter();
    public void set_Parameter(ValueExpression value);
    public ScalarExpression get_Timeout();
    public void set_Timeout(ScalarExpression value);
    public WaitForSupportedStatement get_Statement();
    public void set_Statement(WaitForSupportedStatement value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public abstract class Microsoft.SqlServer.TransactSql.ScriptDom.WaitForSupportedStatement : TSqlStatement {
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public abstract class Microsoft.SqlServer.TransactSql.ScriptDom.WhenClause : TSqlFragment {
    private ScalarExpression _thenExpression;
    public ScalarExpression ThenExpression { get; public set; }
    public ScalarExpression get_ThenExpression();
    public void set_ThenExpression(ScalarExpression value);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.WhereClause : TSqlFragment {
    private BooleanExpression _searchCondition;
    private CursorId _cursor;
    public BooleanExpression SearchCondition { get; public set; }
    public CursorId Cursor { get; public set; }
    public BooleanExpression get_SearchCondition();
    public void set_SearchCondition(BooleanExpression value);
    public CursorId get_Cursor();
    public void set_Cursor(CursorId value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.WhileStatement : TSqlStatement {
    private BooleanExpression _predicate;
    private TSqlStatement _statement;
    public BooleanExpression Predicate { get; public set; }
    public TSqlStatement Statement { get; public set; }
    public BooleanExpression get_Predicate();
    public void set_Predicate(BooleanExpression value);
    public TSqlStatement get_Statement();
    public void set_Statement(TSqlStatement value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.WindowDelimiter : TSqlFragment {
    private WindowDelimiterType _windowDelimiterType;
    private ScalarExpression _offsetValue;
    public WindowDelimiterType WindowDelimiterType { get; public set; }
    public ScalarExpression OffsetValue { get; public set; }
    public WindowDelimiterType get_WindowDelimiterType();
    public void set_WindowDelimiterType(WindowDelimiterType value);
    public ScalarExpression get_OffsetValue();
    public void set_OffsetValue(ScalarExpression value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public enum Microsoft.SqlServer.TransactSql.ScriptDom.WindowDelimiterType : Enum {
    public int value__;
    public static WindowDelimiterType UnboundedPreceding;
    public static WindowDelimiterType ValuePreceding;
    public static WindowDelimiterType CurrentRow;
    public static WindowDelimiterType ValueFollowing;
    public static WindowDelimiterType UnboundedFollowing;
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.WindowFrameClause : TSqlFragment {
    private WindowDelimiter _top;
    private WindowDelimiter _bottom;
    private WindowFrameType _windowFrameType;
    public WindowDelimiter Top { get; public set; }
    public WindowDelimiter Bottom { get; public set; }
    public WindowFrameType WindowFrameType { get; public set; }
    public WindowDelimiter get_Top();
    public void set_Top(WindowDelimiter value);
    public WindowDelimiter get_Bottom();
    public void set_Bottom(WindowDelimiter value);
    public WindowFrameType get_WindowFrameType();
    public void set_WindowFrameType(WindowFrameType value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public enum Microsoft.SqlServer.TransactSql.ScriptDom.WindowFrameType : Enum {
    public int value__;
    public static WindowFrameType Rows;
    public static WindowFrameType Range;
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.WindowsCreateLoginSource : CreateLoginSource {
    private List`1<PrincipalOption> _options;
    public IList`1<PrincipalOption> Options { get; }
    public IList`1<PrincipalOption> get_Options();
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.WithCtesAndXmlNamespaces : TSqlFragment {
    private XmlNamespaces _xmlNamespaces;
    private List`1<CommonTableExpression> _commonTableExpressions;
    private ValueExpression _changeTrackingContext;
    public XmlNamespaces XmlNamespaces { get; public set; }
    public IList`1<CommonTableExpression> CommonTableExpressions { get; }
    public ValueExpression ChangeTrackingContext { get; public set; }
    public XmlNamespaces get_XmlNamespaces();
    public void set_XmlNamespaces(XmlNamespaces value);
    public IList`1<CommonTableExpression> get_CommonTableExpressions();
    public ValueExpression get_ChangeTrackingContext();
    public void set_ChangeTrackingContext(ValueExpression value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.WithinGroupClause : TSqlFragment {
    private OrderByClause _orderByClause;
    private bool _hasGraphPath;
    public OrderByClause OrderByClause { get; public set; }
    public bool HasGraphPath { get; public set; }
    public OrderByClause get_OrderByClause();
    public void set_OrderByClause(OrderByClause value);
    public bool get_HasGraphPath();
    public void set_HasGraphPath(bool value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.WitnessDatabaseOption : DatabaseOption {
    private Literal _witnessServer;
    private bool _isOff;
    public Literal WitnessServer { get; public set; }
    public bool IsOff { get; public set; }
    public Literal get_WitnessServer();
    public void set_WitnessServer(Literal value);
    public bool get_IsOff();
    public void set_IsOff(bool value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.WlmTimeLiteral : TSqlFragment {
    private StringLiteral _timeString;
    public StringLiteral TimeString { get; public set; }
    public StringLiteral get_TimeString();
    public void set_TimeString(StringLiteral value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public abstract class Microsoft.SqlServer.TransactSql.ScriptDom.WorkloadClassifierOption : TSqlFragment {
    private WorkloadClassifierOptionType _optionType;
    public WorkloadClassifierOptionType OptionType { get; public set; }
    public WorkloadClassifierOptionType get_OptionType();
    public void set_OptionType(WorkloadClassifierOptionType value);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public enum Microsoft.SqlServer.TransactSql.ScriptDom.WorkloadClassifierOptionType : Enum {
    public int value__;
    public static WorkloadClassifierOptionType WorkloadGroup;
    public static WorkloadClassifierOptionType MemberName;
    public static WorkloadClassifierOptionType WlmLabel;
    public static WorkloadClassifierOptionType WlmContext;
    public static WorkloadClassifierOptionType StartTime;
    public static WorkloadClassifierOptionType EndTime;
    public static WorkloadClassifierOptionType Importance;
}
public abstract class Microsoft.SqlServer.TransactSql.ScriptDom.WorkloadClassifierStatement : TSqlStatement {
    private Identifier _classifierName;
    private List`1<WorkloadClassifierOption> _options;
    public Identifier ClassifierName { get; public set; }
    public IList`1<WorkloadClassifierOption> Options { get; }
    public Identifier get_ClassifierName();
    public void set_ClassifierName(Identifier value);
    public IList`1<WorkloadClassifierOption> get_Options();
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.WorkloadGroupImportanceParameter : WorkloadGroupParameter {
    private ImportanceParameterType _parameterValue;
    public ImportanceParameterType ParameterValue { get; public set; }
    public ImportanceParameterType get_ParameterValue();
    public void set_ParameterValue(ImportanceParameterType value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public abstract class Microsoft.SqlServer.TransactSql.ScriptDom.WorkloadGroupParameter : TSqlFragment {
    private WorkloadGroupParameterType _parameterType;
    public WorkloadGroupParameterType ParameterType { get; public set; }
    public WorkloadGroupParameterType get_ParameterType();
    public void set_ParameterType(WorkloadGroupParameterType value);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public enum Microsoft.SqlServer.TransactSql.ScriptDom.WorkloadGroupParameterType : Enum {
    public int value__;
    public static WorkloadGroupParameterType Importance;
    public static WorkloadGroupParameterType RequestMaxMemoryGrantPercent;
    public static WorkloadGroupParameterType RequestMaxCpuTimeSec;
    public static WorkloadGroupParameterType RequestMemoryGrantTimeoutSec;
    public static WorkloadGroupParameterType MaxDop;
    public static WorkloadGroupParameterType GroupMaxRequests;
    public static WorkloadGroupParameterType GroupMinMemoryPercent;
    public static WorkloadGroupParameterType MinPercentageResource;
    public static WorkloadGroupParameterType CapPercentageResource;
    public static WorkloadGroupParameterType RequestMinResourceGrantPercent;
    public static WorkloadGroupParameterType RequestMaxResourceGrantPercent;
    public static WorkloadGroupParameterType QueryExecutionTimeoutSec;
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.WorkloadGroupResourceParameter : WorkloadGroupParameter {
    private Literal _parameterValue;
    public Literal ParameterValue { get; public set; }
    public Literal get_ParameterValue();
    public void set_ParameterValue(Literal value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
internal class Microsoft.SqlServer.TransactSql.ScriptDom.WorkloadGroupResourceParameterHelper : OptionsHelper`1<WorkloadGroupParameterType> {
    internal static WorkloadGroupResourceParameterHelper Instance;
    private static WorkloadGroupResourceParameterHelper();
}
public abstract class Microsoft.SqlServer.TransactSql.ScriptDom.WorkloadGroupStatement : TSqlStatement {
    private Identifier _name;
    private List`1<WorkloadGroupParameter> _workloadGroupParameters;
    private Identifier _poolName;
    private Identifier _externalPoolName;
    public Identifier Name { get; public set; }
    public IList`1<WorkloadGroupParameter> WorkloadGroupParameters { get; }
    public Identifier PoolName { get; public set; }
    public Identifier ExternalPoolName { get; public set; }
    public Identifier get_Name();
    public void set_Name(Identifier value);
    public IList`1<WorkloadGroupParameter> get_WorkloadGroupParameters();
    public Identifier get_PoolName();
    public void set_PoolName(Identifier value);
    public Identifier get_ExternalPoolName();
    public void set_ExternalPoolName(Identifier value);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.WriteTextStatement : TextModificationStatement {
    private ValueExpression _sourceParameter;
    public ValueExpression SourceParameter { get; public set; }
    public ValueExpression get_SourceParameter();
    public void set_SourceParameter(ValueExpression value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.WsdlPayloadOption : PayloadOption {
    private bool _isNone;
    private Literal _value;
    public bool IsNone { get; public set; }
    public Literal Value { get; public set; }
    public bool get_IsNone();
    public void set_IsNone(bool value);
    public Literal get_Value();
    public void set_Value(Literal value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public enum Microsoft.SqlServer.TransactSql.ScriptDom.XmlDataTypeOption : Enum {
    public int value__;
    public static XmlDataTypeOption None;
    public static XmlDataTypeOption Content;
    public static XmlDataTypeOption Document;
}
internal class Microsoft.SqlServer.TransactSql.ScriptDom.XmlDataTypeOptionHelper : OptionsHelper`1<XmlDataTypeOption> {
    internal static XmlDataTypeOptionHelper Instance;
    private static XmlDataTypeOptionHelper();
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.XmlDataTypeReference : DataTypeReference {
    private XmlDataTypeOption _xmlDataTypeOption;
    private SchemaObjectName _xmlSchemaCollection;
    public XmlDataTypeOption XmlDataTypeOption { get; public set; }
    public SchemaObjectName XmlSchemaCollection { get; public set; }
    public XmlDataTypeOption get_XmlDataTypeOption();
    public void set_XmlDataTypeOption(XmlDataTypeOption value);
    public SchemaObjectName get_XmlSchemaCollection();
    public void set_XmlSchemaCollection(SchemaObjectName value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.XmlForClause : ForClause {
    private List`1<XmlForClauseOption> _options;
    public IList`1<XmlForClauseOption> Options { get; }
    public IList`1<XmlForClauseOption> get_Options();
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
internal class Microsoft.SqlServer.TransactSql.ScriptDom.XmlForClauseModeHelper : OptionsHelper`1<XmlForClauseOptions> {
    internal static XmlForClauseModeHelper Instance;
    private static XmlForClauseModeHelper();
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.XmlForClauseOption : ForClause {
    private XmlForClauseOptions _optionKind;
    private Literal _value;
    public XmlForClauseOptions OptionKind { get; public set; }
    public Literal Value { get; public set; }
    public XmlForClauseOptions get_OptionKind();
    public void set_OptionKind(XmlForClauseOptions value);
    public Literal get_Value();
    public void set_Value(Literal value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
[FlagsAttribute]
public enum Microsoft.SqlServer.TransactSql.ScriptDom.XmlForClauseOptions : Enum {
    public int value__;
    public static XmlForClauseOptions None;
    public static XmlForClauseOptions Raw;
    public static XmlForClauseOptions Auto;
    public static XmlForClauseOptions Explicit;
    public static XmlForClauseOptions Path;
    public static XmlForClauseOptions XmlData;
    public static XmlForClauseOptions XmlSchema;
    public static XmlForClauseOptions Elements;
    public static XmlForClauseOptions ElementsXsiNil;
    public static XmlForClauseOptions ElementsAbsent;
    public static XmlForClauseOptions BinaryBase64;
    public static XmlForClauseOptions Type;
    public static XmlForClauseOptions Root;
    public static XmlForClauseOptions ElementsAll;
}
internal class Microsoft.SqlServer.TransactSql.ScriptDom.XmlForClauseOptionsHelper : OptionsHelper`1<XmlForClauseOptions> {
    internal static XmlForClauseOptionsHelper Instance;
    private static XmlForClauseOptionsHelper();
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.XmlNamespaces : TSqlFragment {
    private List`1<XmlNamespacesElement> _xmlNamespacesElements;
    public IList`1<XmlNamespacesElement> XmlNamespacesElements { get; }
    public IList`1<XmlNamespacesElement> get_XmlNamespacesElements();
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.XmlNamespacesAliasElement : XmlNamespacesElement {
    private Identifier _identifier;
    public Identifier Identifier { get; public set; }
    public Identifier get_Identifier();
    public void set_Identifier(Identifier value);
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public class Microsoft.SqlServer.TransactSql.ScriptDom.XmlNamespacesDefaultElement : XmlNamespacesElement {
    public virtual void Accept(TSqlFragmentVisitor visitor);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
public abstract class Microsoft.SqlServer.TransactSql.ScriptDom.XmlNamespacesElement : TSqlFragment {
    private StringLiteral _string;
    public StringLiteral String { get; public set; }
    public StringLiteral get_String();
    public void set_String(StringLiteral value);
    public virtual void AcceptChildren(TSqlFragmentVisitor visitor);
}
