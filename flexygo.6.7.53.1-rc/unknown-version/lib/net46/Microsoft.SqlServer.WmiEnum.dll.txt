internal static class Microsoft.SqlServer.Management.Smo.Wmi.AssemblyVersionInfo : object {
    public static string VersionString;
    public static int MajorVersion;
}
internal class Microsoft.SqlServer.Management.Smo.Wmi.ClientProtocol : WmiBase {
    protected virtual object GetTranslatedValue(ManagementObject mo, string propPhysName);
}
internal class Microsoft.SqlServer.Management.Smo.Wmi.ClientProtocolProperties : ProtocolPropertiesBase {
    protected virtual String[] GetParentFields();
    protected virtual string GetWhereClauseTemplate();
}
internal class Microsoft.SqlServer.Management.Smo.Wmi.CNetLibInfo : WmiBase {
}
internal class Microsoft.SqlServer.Management.Smo.Wmi.EnumManagedComputer : EnumObject {
    public ResultType[] ResultTypes { get; }
    public virtual EnumResult GetData(EnumResult erParent);
    public virtual ResultType[] get_ResultTypes();
}
public enum Microsoft.SqlServer.Management.Smo.Wmi.ManagedServiceType : Enum {
    public int value__;
    public static ManagedServiceType SqlServer;
    public static ManagedServiceType SqlAgent;
    public static ManagedServiceType Search;
    public static ManagedServiceType SqlServerIntegrationService;
    public static ManagedServiceType AnalysisServer;
    public static ManagedServiceType ReportServer;
    public static ManagedServiceType SqlBrowser;
    public static ManagedServiceType NotificationServer;
}
public enum Microsoft.SqlServer.Management.Smo.Wmi.PropertyType : Enum {
    public int value__;
    public static PropertyType StringValue;
    public static PropertyType NumericValue;
    public static PropertyType FlagValue;
}
internal abstract class Microsoft.SqlServer.Management.Smo.Wmi.ProtocolPropertiesBase : WmiChildObjectBase {
    public ProtocolPropertiesBase(string className);
}
internal class Microsoft.SqlServer.Management.Smo.Wmi.SAlias : WmiBase {
}
internal class Microsoft.SqlServer.Management.Smo.Wmi.ServerInstance : WmiBase {
    public virtual EnumResult GetData(EnumResult erParent);
}
internal class Microsoft.SqlServer.Management.Smo.Wmi.ServerProtocol : WmiBase {
    private string m_whereServiceInstance;
    public virtual Request RetrieveParentRequest();
    protected virtual void BuildStatementBuilder();
    public virtual EnumResult GetData(EnumResult erParent);
}
internal class Microsoft.SqlServer.Management.Smo.Wmi.ServerProtocolIPAddress : WmiBase {
    private DataTable m_dataParent;
    public virtual Request RetrieveParentRequest();
    protected virtual void BuildStatementBuilder();
    public virtual EnumResult GetData(EnumResult erParent);
}
internal class Microsoft.SqlServer.Management.Smo.Wmi.ServerProtocolIPAddressProperty : ProtocolPropertiesBase {
    protected virtual String[] GetParentFields();
    protected virtual string GetWhereClauseTemplate();
}
internal class Microsoft.SqlServer.Management.Smo.Wmi.ServerProtocolProperties : ProtocolPropertiesBase {
    protected virtual String[] GetParentFields();
    protected virtual string GetWhereClauseTemplate();
}
internal class Microsoft.SqlServer.Management.Smo.Wmi.Service : WmiBase {
    private int StringToEnum(String[] strList, ManagementObject mo, string propPhysName);
    private int GetIndex(String[] strList, string str);
}
internal class Microsoft.SqlServer.Management.Smo.Wmi.ServiceAdvancedProperty : WmiBase {
}
public enum Microsoft.SqlServer.Management.Smo.Wmi.ServiceErrorControl : Enum {
    public int value__;
    public static ServiceErrorControl Ignore;
    public static ServiceErrorControl Normal;
    public static ServiceErrorControl Severe;
    public static ServiceErrorControl Critical;
    public static ServiceErrorControl Unknown;
}
public enum Microsoft.SqlServer.Management.Smo.Wmi.ServiceStartMode : Enum {
    public int value__;
    public static ServiceStartMode Boot;
    public static ServiceStartMode System;
    public static ServiceStartMode Auto;
    public static ServiceStartMode Manual;
    public static ServiceStartMode Disabled;
}
public enum Microsoft.SqlServer.Management.Smo.Wmi.ServiceState : Enum {
    public int value__;
    public static ServiceState Stopped;
    public static ServiceState StartPending;
    public static ServiceState StopPending;
    public static ServiceState Running;
    public static ServiceState ContinuePending;
    public static ServiceState PausePending;
    public static ServiceState Paused;
    public static ServiceState Unknown;
}
[CompilerGeneratedAttribute]
internal class Microsoft.SqlServer.Management.Smo.Wmi.StringWmiEnumerator : object {
    public static CultureInfo Culture { get; public set; }
    public static string MachineNameMustBeSpecified { get; }
    public static CultureInfo get_Culture();
    public static void set_Culture(CultureInfo value);
    public static string get_MachineNameMustBeSpecified();
}
internal class Microsoft.SqlServer.Management.Smo.Wmi.WmiBase : EnumObject {
    private string m_ClassName;
    private StatementBuilder m_sb;
    protected StatementBuilder StatementBuilder { get; }
    public ResultType[] ResultTypes { get; }
    private bool Microsoft.SqlServer.Management.Sdk.Sfc.ISqlFilterDecoderCallback.SupportsParameterization { get; }
    private bool UseReservedFields { get; }
    public WmiBase(string className);
    protected StatementBuilder get_StatementBuilder();
    public virtual ResultType[] get_ResultTypes();
    private WmiProperty GetPropertyForRequest(string propName);
    private string GetPhysicalNameForRequest(string propName);
    private void AddPropertyForRequest(string propName);
    private sealed virtual override string Microsoft.SqlServer.Management.Sdk.Sfc.ISqlFilterDecoderCallback.AddPropertyForFilter(string propName);
    private sealed virtual override string Microsoft.SqlServer.Management.Sdk.Sfc.ISqlFilterDecoderCallback.AddConstantForFilter(string constantValue);
    private sealed virtual override bool Microsoft.SqlServer.Management.Sdk.Sfc.ISqlFilterDecoderCallback.get_SupportsParameterization();
    protected string GetXpathFilter();
    private void AddXpathFilter();
    protected virtual void BuildStatementBuilder();
    private bool get_UseReservedFields();
    public virtual EnumResult GetData(EnumResult erParent);
    protected virtual object GetTranslatedValue(ManagementObject mo, string propPhysName);
    protected DataTable BuildDataTable(ManagementObjectCollection listManagementObject);
    private EnumResult BuildResult(ManagementObjectCollection listManagementObject);
    public virtual Request RetrieveParentRequest();
}
internal abstract class Microsoft.SqlServer.Management.Smo.Wmi.WmiChildObjectBase : WmiBase {
    private DataTable m_dataParent;
    public WmiChildObjectBase(string className);
    protected abstract virtual String[] GetParentFields();
    protected abstract virtual string GetWhereClauseTemplate();
    public virtual Request RetrieveParentRequest();
    protected virtual void BuildStatementBuilder();
    public virtual EnumResult GetData(EnumResult erParent);
}
internal class Microsoft.SqlServer.Management.Smo.Wmi.WmiEnumResult : EnumResult {
    private string m_scope;
    private string m_whereClause;
    public string Scope { get; public set; }
    public string WhereClause { get; public set; }
    public WmiEnumResult(string scope);
    public string get_Scope();
    public void set_Scope(string value);
    public string get_WhereClause();
    public void set_WhereClause(string value);
}
internal class Microsoft.SqlServer.Management.Smo.Wmi.WmiProperty : ObjectProperty {
    private string m_PhysicalName;
    private string m_BaseType;
    public string PhysicalName { get; public set; }
    public string BaseType { get; public set; }
    public WmiProperty(string name, string type);
    public string get_PhysicalName();
    public void set_PhysicalName(string value);
    public string get_BaseType();
    public void set_BaseType(string value);
}
internal class Microsoft.SqlServer.Management.Smo.Wmi.WmiRequest : Request {
    private bool bRequestingTheWhereClause;
    internal bool RequestingTheWhereClause { get; internal set; }
    internal bool get_RequestingTheWhereClause();
    internal void set_RequestingTheWhereClause(bool value);
}
