[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
public class OpenTelemetry.Exporter.ConsoleActivityExporter : ConsoleExporter`1<Activity> {
    public ConsoleActivityExporter(ConsoleExporterOptions options);
    public virtual ExportResult Export(Batch`1& modreq(System.Runtime.InteropServices.InAttribute) batch);
}
public abstract class OpenTelemetry.Exporter.ConsoleExporter`1 : BaseExporter`1<T> {
    private ConsoleExporterOptions options;
    [CompilerGeneratedAttribute]
private ConsoleTagTransformer <TagTransformer>k__BackingField;
    internal ConsoleTagTransformer TagTransformer { get; }
    protected ConsoleExporter`1(ConsoleExporterOptions options);
    [CompilerGeneratedAttribute]
internal ConsoleTagTransformer get_TagTransformer();
    protected void WriteLine(string message);
    private void OnUnsupportedTagDropped(string tagKey, string tagValueTypeFullName);
}
public class OpenTelemetry.Exporter.ConsoleExporterOptions : object {
    [CompilerGeneratedAttribute]
private ConsoleExporterOutputTargets <Targets>k__BackingField;
    public ConsoleExporterOutputTargets Targets { get; public set; }
    [CompilerGeneratedAttribute]
public ConsoleExporterOutputTargets get_Targets();
    [CompilerGeneratedAttribute]
public void set_Targets(ConsoleExporterOutputTargets value);
}
[FlagsAttribute]
public enum OpenTelemetry.Exporter.ConsoleExporterOutputTargets : Enum {
    public int value__;
    public static ConsoleExporterOutputTargets Console;
    public static ConsoleExporterOutputTargets Debug;
}
public class OpenTelemetry.Exporter.ConsoleLogRecordExporter : ConsoleExporter`1<LogRecord> {
    private static int RightPaddingLength;
    private object syncObject;
    private bool disposed;
    private string disposedStackTrace;
    private bool isDisposeMessageSent;
    public ConsoleLogRecordExporter(ConsoleExporterOptions options);
    public virtual ExportResult Export(Batch`1& modreq(System.Runtime.InteropServices.InAttribute) batch);
    protected virtual void Dispose(bool disposing);
}
public class OpenTelemetry.Exporter.ConsoleMetricExporter : ConsoleExporter`1<Metric> {
    private Resource resource;
    public ConsoleMetricExporter(ConsoleExporterOptions options);
    public virtual ExportResult Export(Batch`1& modreq(System.Runtime.InteropServices.InAttribute) batch);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class OpenTelemetry.Exporter.ConsoleTagTransformer : TagTransformer`1<string> {
    private Action`2<string, string> onUnsupportedTagDropped;
    public ConsoleTagTransformer(Action`2<string, string> onUnsupportedTagDropped);
    protected virtual string TransformIntegralTag(string key, long value);
    protected virtual string TransformFloatingPointTag(string key, double value);
    protected virtual string TransformBooleanTag(string key, bool value);
    protected virtual string TransformStringTag(string key, string value);
    protected virtual string TransformArrayTag(string key, Array array);
    protected virtual void OnUnsupportedTagDropped(string tagKey, string tagValueTypeFullName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class OpenTelemetry.Internal.TagTransformer`1 : object {
    [NullableContextAttribute("2")]
public bool TryTransformTag(KeyValuePair`2<string, object> tag, T& result, Nullable`1<int> tagValueMaxLength);
    protected abstract virtual T TransformIntegralTag(string key, long value);
    protected abstract virtual T TransformFloatingPointTag(string key, double value);
    protected abstract virtual T TransformBooleanTag(string key, bool value);
    protected abstract virtual T TransformStringTag(string key, string value);
    protected abstract virtual T TransformArrayTag(string key, Array array);
    protected abstract virtual void OnUnsupportedTagDropped(string tagKey, string tagValueTypeFullName);
    [NullableContextAttribute("2")]
private static string TruncateString(string value, Nullable`1<int> maxLength);
    private T TransformArrayTagInternal(string key, Array array, Nullable`1<int> tagValueMaxLength);
    private T TransformArrayTagIntNetFramework(string key, Array array, Nullable`1<int> tagValueMaxLength);
    private T TransformArrayTagLongNetFramework(string key, Array array, Nullable`1<int> tagValueMaxLength);
    private T ConvertToStringArrayThenTransformArrayTag(string key, Array array, Nullable`1<int> tagValueMaxLength);
    private bool LogUnsupportedTagTypeAndReturnDefault(string key, object value, T& result);
}
internal static class OpenTelemetry.Internal.TagTransformerJsonHelper : object {
    [NullableContextAttribute("1")]
internal static string JsonSerializeArrayTag(Array array);
}
[ExtensionAttribute]
public static class OpenTelemetry.Logs.ConsoleExporterLoggingExtensions : object {
    [ExtensionAttribute]
public static OpenTelemetryLoggerOptions AddConsoleExporter(OpenTelemetryLoggerOptions loggerOptions);
    [ExtensionAttribute]
public static OpenTelemetryLoggerOptions AddConsoleExporter(OpenTelemetryLoggerOptions loggerOptions, Action`1<ConsoleExporterOptions> configure);
    [ExtensionAttribute]
internal static LoggerProviderBuilder AddConsoleExporter(LoggerProviderBuilder loggerProviderBuilder);
    [ExtensionAttribute]
internal static LoggerProviderBuilder AddConsoleExporter(LoggerProviderBuilder loggerProviderBuilder, Action`1<ConsoleExporterOptions> configure);
    [ExtensionAttribute]
internal static LoggerProviderBuilder AddConsoleExporter(LoggerProviderBuilder loggerProviderBuilder, string name, Action`1<ConsoleExporterOptions> configure);
}
internal static class OpenTelemetry.Metrics.Base2ExponentialBucketHistogramHelper : object {
    private static double EpsilonTimes2;
    private static double Ln2;
    private static double SCALEB_C1;
    private static double SCALEB_C2;
    private static double SCALEB_C3;
    private static Base2ExponentialBucketHistogramHelper();
    public static double CalculateLowerBoundary(int index, int scale);
    private static double ScaleB(double x, int n);
}
[ExtensionAttribute]
public static class OpenTelemetry.Metrics.ConsoleExporterMetricsExtensions : object {
    private static int DefaultExportIntervalMilliseconds;
    private static int DefaultExportTimeoutMilliseconds;
    [ExtensionAttribute]
public static MeterProviderBuilder AddConsoleExporter(MeterProviderBuilder builder);
    [ExtensionAttribute]
public static MeterProviderBuilder AddConsoleExporter(MeterProviderBuilder builder, Action`1<ConsoleExporterOptions> configureExporter);
    [ExtensionAttribute]
public static MeterProviderBuilder AddConsoleExporter(MeterProviderBuilder builder, string name, Action`1<ConsoleExporterOptions> configureExporter);
    [ExtensionAttribute]
public static MeterProviderBuilder AddConsoleExporter(MeterProviderBuilder builder, Action`2<ConsoleExporterOptions, MetricReaderOptions> configureExporterAndMetricReader);
    [ExtensionAttribute]
public static MeterProviderBuilder AddConsoleExporter(MeterProviderBuilder builder, string name, Action`2<ConsoleExporterOptions, MetricReaderOptions> configureExporterAndMetricReader);
    private static MetricReader BuildConsoleExporterMetricReader(ConsoleExporterOptions exporterOptions, MetricReaderOptions metricReaderOptions);
}
internal static class OpenTelemetry.Metrics.PeriodicExportingMetricReaderHelper : object {
    internal static int DefaultExportIntervalMilliseconds;
    internal static int DefaultExportTimeoutMilliseconds;
    [NullableContextAttribute("1")]
internal static PeriodicExportingMetricReader CreatePeriodicExportingMetricReader(BaseExporter`1<Metric> exporter, MetricReaderOptions options, int defaultExportIntervalMilliseconds, int defaultExportTimeoutMilliseconds);
}
[ExtensionAttribute]
public static class OpenTelemetry.Trace.ConsoleExporterHelperExtensions : object {
    [ExtensionAttribute]
public static TracerProviderBuilder AddConsoleExporter(TracerProviderBuilder builder);
    [ExtensionAttribute]
public static TracerProviderBuilder AddConsoleExporter(TracerProviderBuilder builder, Action`1<ConsoleExporterOptions> configure);
    [ExtensionAttribute]
public static TracerProviderBuilder AddConsoleExporter(TracerProviderBuilder builder, string name, Action`1<ConsoleExporterOptions> configure);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.IsReadOnlyAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
