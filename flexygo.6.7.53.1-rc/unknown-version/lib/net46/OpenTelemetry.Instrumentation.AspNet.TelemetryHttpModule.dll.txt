[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class OpenTelemetry.Instrumentation.AspNet.ActivityHelper : object {
    internal static string ContextKey;
    internal static object StartedButNotSampledObj;
    private static string BaggageSlotName;
    private static Func`3<HttpRequest, string, IEnumerable`1<string>> HttpRequestHeaderValuesGetter;
    private static ActivitySource AspNetSource;
    private static ActivityHelper();
    public static bool HasStarted(HttpContext context, Activity& aspNetActivity);
    public static Activity StartAspNetActivity(TextMapPropagator textMapPropagator, HttpContext context, Action`2<Activity, HttpContext> onRequestStartedCallback);
    public static void StopAspNetActivity(TextMapPropagator textMapPropagator, Activity aspNetActivity, HttpContext context, Action`2<Activity, HttpContext> onRequestStoppedCallback);
    public static void WriteActivityException(Activity aspNetActivity, HttpContext context, Exception exception, Action`3<Activity, HttpContext, Exception> onExceptionCallback);
    internal static void RestoreContextIfNeeded(HttpContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[EventSourceAttribute]
internal class OpenTelemetry.Instrumentation.AspNet.AspNetTelemetryEventSource : EventSource {
    public static AspNetTelemetryEventSource Log;
    private static AspNetTelemetryEventSource();
    [NonEventAttribute]
public void ActivityStarted(Activity activity);
    [NonEventAttribute]
public void ActivityStopped(Activity activity);
    [NonEventAttribute]
public void ActivityRestored(Activity activity);
    [NonEventAttribute]
public void ActivityException(Activity activity, Exception ex);
    [NonEventAttribute]
public void CallbackException(Activity activity, string eventName, Exception ex);
    [EventAttribute("1")]
public void TraceCallback(string callback);
    [NullableContextAttribute("2")]
[EventAttribute("2")]
public void ActivityStarted(string id);
    [NullableContextAttribute("2")]
[EventAttribute("3")]
public void ActivityStopped(string id);
    [NullableContextAttribute("2")]
[EventAttribute("4")]
public void ActivityRestored(string id);
    [EventAttribute("5")]
public void OnExecuteRequestStepInvocationError(string error);
    [EventAttribute("6")]
public void ActivityException(string id, string ex);
    [EventAttribute("7")]
public void CallbackException(string id, string eventName, string ex);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class OpenTelemetry.Instrumentation.AspNet.TelemetryHttpModule : object {
    public static string AspNetSourceName;
    public static string AspNetActivityName;
    private static string URLRewriteRewrittenRequest;
    private static string URLRewriteModuleVersion;
    private static MethodInfo OnExecuteRequestStepMethodInfo;
    [CompilerGeneratedAttribute]
private static TelemetryHttpModuleOptions <Options>k__BackingField;
    public static TelemetryHttpModuleOptions Options { get; }
    private static TelemetryHttpModule();
    [CompilerGeneratedAttribute]
public static TelemetryHttpModuleOptions get_Options();
    public sealed virtual void Dispose();
    public sealed virtual void Init(HttpApplication context);
    private void Application_BeginRequest(object sender, EventArgs e);
    private void OnExecuteRequestStep(HttpContextBase context, Action step);
    private void Application_EndRequest(object sender, EventArgs e);
    private void Application_Error(object sender, EventArgs e);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class OpenTelemetry.Instrumentation.AspNet.TelemetryHttpModuleOptions : object {
    private TextMapPropagator textMapPropagator;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Action`2<Activity, HttpContext> <OnRequestStartedCallback>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Action`2<Activity, HttpContext> <OnRequestStoppedCallback>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Action`3<Activity, HttpContext, Exception> <OnExceptionCallback>k__BackingField;
    public TextMapPropagator TextMapPropagator { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Action`2<Activity, HttpContext> OnRequestStartedCallback { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Action`2<Activity, HttpContext> OnRequestStoppedCallback { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Action`3<Activity, HttpContext, Exception> OnExceptionCallback { get; public set; }
    public TextMapPropagator get_TextMapPropagator();
    public void set_TextMapPropagator(TextMapPropagator value);
    [CompilerGeneratedAttribute]
public Action`2<Activity, HttpContext> get_OnRequestStartedCallback();
    [CompilerGeneratedAttribute]
public void set_OnRequestStartedCallback(Action`2<Activity, HttpContext> value);
    [CompilerGeneratedAttribute]
public Action`2<Activity, HttpContext> get_OnRequestStoppedCallback();
    [CompilerGeneratedAttribute]
public void set_OnRequestStoppedCallback(Action`2<Activity, HttpContext> value);
    [CompilerGeneratedAttribute]
public Action`3<Activity, HttpContext, Exception> get_OnExceptionCallback();
    [CompilerGeneratedAttribute]
public void set_OnExceptionCallback(Action`3<Activity, HttpContext, Exception> value);
}
[ExtensionAttribute]
internal static class OpenTelemetry.Internal.AssemblyVersionExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static string GetPackageVersion(Assembly assembly);
}
[ExtensionAttribute]
internal static class OpenTelemetry.Internal.ExceptionExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static string ToInvariantString(Exception exception);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal static class OpenTelemetry.Internal.Guard : object {
    [DebuggerHiddenAttribute]
public static void ThrowIfNull(object value, string paramName);
    [DebuggerHiddenAttribute]
public static void ThrowIfNullOrEmpty(string value, string paramName);
    [DebuggerHiddenAttribute]
public static void ThrowIfNullOrWhitespace(string value, string paramName);
    [NullableContextAttribute("1")]
[DebuggerHiddenAttribute]
public static void ThrowIfZero(int value, string message, string paramName);
    [DebuggerHiddenAttribute]
public static void ThrowIfInvalidTimeout(int value, string paramName);
    [DebuggerHiddenAttribute]
public static void ThrowIfOutOfRange(int value, string paramName, int min, int max, string minName, string maxName, string message);
    [DebuggerHiddenAttribute]
public static void ThrowIfOutOfRange(double value, string paramName, double min, double max, string minName, string maxName, string message);
    [DebuggerHiddenAttribute]
public static T ThrowIfNotOfType(object value, string paramName);
    [NullableContextAttribute("1")]
[DebuggerHiddenAttribute]
private static void Range(T value, string paramName, T min, T max, string minName, string maxName, string message);
}
[AttributeUsageAttribute("10624")]
internal class System.Diagnostics.CodeAnalysis.NotNullAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("2048")]
internal class System.Runtime.CompilerServices.CallerArgumentExpressionAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <ParameterName>k__BackingField;
    public string ParameterName { get; }
    public CallerArgumentExpressionAttribute(string parameterName);
    [CompilerGeneratedAttribute]
public string get_ParameterName();
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
