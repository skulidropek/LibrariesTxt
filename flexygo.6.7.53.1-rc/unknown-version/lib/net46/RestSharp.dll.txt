[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class RestSharp.Authenticators.AuthenticatorBase : object {
    [CompilerGeneratedAttribute]
private string <Token>k__BackingField;
    protected string Token { get; }
    protected AuthenticatorBase(string token);
    [CompilerGeneratedAttribute]
protected string get_Token();
    protected abstract virtual Parameter GetAuthenticationParameter(string accessToken);
    public sealed virtual void Authenticate(IRestClient client, IRestRequest request);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class RestSharp.Authenticators.HttpBasicAuthenticator : AuthenticatorBase {
    public HttpBasicAuthenticator(string username, string password);
    public HttpBasicAuthenticator(string username, string password, Encoding encoding);
    private static string GetHeader(string username, string password, Encoding encoding);
    protected virtual Parameter GetAuthenticationParameter(string accessToken);
}
[NullableContextAttribute("1")]
public interface RestSharp.Authenticators.IAuthenticator {
    public abstract virtual void Authenticate(IRestClient client, IRestRequest request);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class RestSharp.Authenticators.JwtAuthenticator : object {
    private string _authHeader;
    public JwtAuthenticator(string accessToken);
    public void SetBearerToken(string accessToken);
    public sealed virtual void Authenticate(IRestClient client, IRestRequest request);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class RestSharp.Authenticators.NtlmAuthenticator : object {
    private ICredentials _credentials;
    public NtlmAuthenticator(string username, string password);
    public NtlmAuthenticator(ICredentials credentials);
    public sealed virtual void Authenticate(IRestClient client, IRestRequest request);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class RestSharp.Authenticators.OAuth.Extensions.OAuthExtensions : object {
    [ExtensionAttribute]
public static string ToRequestValue(OAuthSignatureMethod signatureMethod);
    [ExtensionAttribute]
public static string HashWith(string input, HashAlgorithm algorithm);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class RestSharp.Authenticators.OAuth.Extensions.StringExtensions : object {
    [ExtensionAttribute]
public static bool EqualsIgnoreCase(string left, string right);
    [ExtensionAttribute]
public static string Then(string input, string value);
    [ExtensionAttribute]
public static Uri AsUri(string value);
    [ExtensionAttribute]
public static Byte[] GetBytes(string input);
    [ExtensionAttribute]
public static string PercentEncode(string s);
}
[ExtensionAttribute]
internal static class RestSharp.Authenticators.OAuth.Extensions.TimeExtensions : object {
    [ExtensionAttribute]
public static long ToUnixTime(DateTime dateTime);
}
public enum RestSharp.Authenticators.OAuth.OAuthParameterHandling : Enum {
    public int value__;
    public static OAuthParameterHandling HttpAuthorizationHeader;
    public static OAuthParameterHandling UrlOrPostParameters;
}
public enum RestSharp.Authenticators.OAuth.OAuthSignatureMethod : Enum {
    public int value__;
    public static OAuthSignatureMethod HmacSha1;
    public static OAuthSignatureMethod HmacSha256;
    public static OAuthSignatureMethod PlainText;
    public static OAuthSignatureMethod RsaSha1;
}
public enum RestSharp.Authenticators.OAuth.OAuthSignatureTreatment : Enum {
    public int value__;
    public static OAuthSignatureTreatment Escaped;
    public static OAuthSignatureTreatment Unescaped;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class RestSharp.Authenticators.OAuth.OAuthTools : object {
    private static string AlphaNumeric;
    private static string Digit;
    private static string Lower;
    private static string Unreserved;
    private static string Upper;
    private static Random Random;
    private static object RandomLock;
    private static RandomNumberGenerator Rng;
    private static Encoding Encoding;
    private static String[] UriRfc3986CharsToEscape;
    private static String[] UriRfc3968EscapedHex;
    private static OAuthTools();
    public static string GetNonce();
    public static string GetTimestamp();
    private static string GetTimestamp(DateTime dateTime);
    public static string UrlEncodeRelaxed(string value);
    public static string UrlEncodeStrict(string value);
    private static string NormalizeRequestParameters(WebPairCollection parameters);
    public static IEnumerable`1<string> SortParametersExcludingSignature(WebPairCollection parameters);
    private static string ConstructRequestUrl(Uri url);
    public static string ConcatenateRequestElements(string method, string url, WebPairCollection parameters);
    public static string GetSignature(OAuthSignatureMethod signatureMethod, string signatureBase, string consumerSecret);
    public static string GetSignature(OAuthSignatureMethod signatureMethod, OAuthSignatureTreatment signatureTreatment, string signatureBase, string consumerSecret);
    public static string GetSignature(OAuthSignatureMethod signatureMethod, OAuthSignatureTreatment signatureTreatment, string signatureBase, string consumerSecret, string tokenSecret);
    private static string GetHmacSignature(KeyedHashAlgorithm crypto, string consumerSecret, string tokenSecret, string signatureBase);
    [CompilerGeneratedAttribute]
internal static string <GetSignature>g__GetRsaSignature|23_0(<>c__DisplayClass23_0& );
}
public enum RestSharp.Authenticators.OAuth.OAuthType : Enum {
    public int value__;
    public static OAuthType RequestToken;
    public static OAuthType AccessToken;
    public static OAuthType ProtectedResource;
    public static OAuthType ClientAuthentication;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class RestSharp.Authenticators.OAuth.OAuthWorkflow : object {
    [CompilerGeneratedAttribute]
private string <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ConsumerKey>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ConsumerSecret>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Token>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TokenSecret>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CallbackUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Verifier>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SessionHandle>k__BackingField;
    [CompilerGeneratedAttribute]
private OAuthSignatureMethod <SignatureMethod>k__BackingField;
    [CompilerGeneratedAttribute]
private OAuthSignatureTreatment <SignatureTreatment>k__BackingField;
    [CompilerGeneratedAttribute]
private OAuthParameterHandling <ParameterHandling>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ClientUsername>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ClientPassword>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RequestTokenUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AccessTokenUrl>k__BackingField;
    public string Version { get; public set; }
    public string ConsumerKey { get; public set; }
    public string ConsumerSecret { get; public set; }
    public string Token { get; public set; }
    public string TokenSecret { get; public set; }
    public string CallbackUrl { get; public set; }
    public string Verifier { get; public set; }
    public string SessionHandle { get; public set; }
    public OAuthSignatureMethod SignatureMethod { get; public set; }
    public OAuthSignatureTreatment SignatureTreatment { get; public set; }
    public OAuthParameterHandling ParameterHandling { get; public set; }
    public string ClientUsername { get; public set; }
    public string ClientPassword { get; public set; }
    public string RequestTokenUrl { get; public set; }
    public string AccessTokenUrl { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Version();
    [CompilerGeneratedAttribute]
public void set_Version(string value);
    [CompilerGeneratedAttribute]
public string get_ConsumerKey();
    [CompilerGeneratedAttribute]
public void set_ConsumerKey(string value);
    [CompilerGeneratedAttribute]
public string get_ConsumerSecret();
    [CompilerGeneratedAttribute]
public void set_ConsumerSecret(string value);
    [CompilerGeneratedAttribute]
public string get_Token();
    [CompilerGeneratedAttribute]
public void set_Token(string value);
    [CompilerGeneratedAttribute]
public string get_TokenSecret();
    [CompilerGeneratedAttribute]
public void set_TokenSecret(string value);
    [CompilerGeneratedAttribute]
public string get_CallbackUrl();
    [CompilerGeneratedAttribute]
public void set_CallbackUrl(string value);
    [CompilerGeneratedAttribute]
public string get_Verifier();
    [CompilerGeneratedAttribute]
public void set_Verifier(string value);
    [CompilerGeneratedAttribute]
public string get_SessionHandle();
    [CompilerGeneratedAttribute]
public void set_SessionHandle(string value);
    [CompilerGeneratedAttribute]
public OAuthSignatureMethod get_SignatureMethod();
    [CompilerGeneratedAttribute]
public void set_SignatureMethod(OAuthSignatureMethod value);
    [CompilerGeneratedAttribute]
public OAuthSignatureTreatment get_SignatureTreatment();
    [CompilerGeneratedAttribute]
public void set_SignatureTreatment(OAuthSignatureTreatment value);
    [CompilerGeneratedAttribute]
public OAuthParameterHandling get_ParameterHandling();
    [CompilerGeneratedAttribute]
public void set_ParameterHandling(OAuthParameterHandling value);
    [CompilerGeneratedAttribute]
public string get_ClientUsername();
    [CompilerGeneratedAttribute]
public void set_ClientUsername(string value);
    [CompilerGeneratedAttribute]
public string get_ClientPassword();
    [CompilerGeneratedAttribute]
public void set_ClientPassword(string value);
    [CompilerGeneratedAttribute]
public string get_RequestTokenUrl();
    [CompilerGeneratedAttribute]
public void set_RequestTokenUrl(string value);
    [CompilerGeneratedAttribute]
public string get_AccessTokenUrl();
    [CompilerGeneratedAttribute]
public void set_AccessTokenUrl(string value);
    public OAuthParameters BuildRequestTokenInfo(string method, WebPairCollection parameters);
    public OAuthParameters BuildAccessTokenSignature(string method, WebPairCollection parameters);
    public OAuthParameters BuildClientAuthAccessTokenSignature(string method, WebPairCollection parameters);
    public OAuthParameters BuildProtectedResourceSignature(string method, WebPairCollection parameters, string url);
    private void ValidateTokenRequestState();
    private void ValidateAccessRequestState();
    private void ValidateClientAuthAccessRequestState();
    private void ValidateProtectedResourceState();
    private WebPairCollection GenerateAuthParameters(string timestamp, string nonce);
    private WebPairCollection GenerateXAuthParameters(string timestamp, string nonce);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class RestSharp.Authenticators.OAuth.WebPair : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private string <WebValue>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Encode>k__BackingField;
    [CompilerGeneratedAttribute]
private static WebPairComparer <Comparer>k__BackingField;
    public string Name { get; }
    public string Value { get; }
    public string WebValue { get; }
    public bool Encode { get; }
    internal static WebPairComparer Comparer { get; }
    public WebPair(string name, string value, bool encode);
    private static WebPair();
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
public string get_WebValue();
    [CompilerGeneratedAttribute]
public bool get_Encode();
    [CompilerGeneratedAttribute]
internal static WebPairComparer get_Comparer();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
internal class RestSharp.Authenticators.OAuth.WebPairCollection : object {
    private List`1<WebPair> _parameters;
    public int Count { get; }
    public bool IsReadOnly { get; }
    public WebPair Item { get; public set; }
    public sealed virtual IEnumerator`1<WebPair> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual void Add(WebPair parameter);
    public void AddRange(IEnumerable`1<WebPair> collection);
    public void Add(string name, string value);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(WebPair parameter);
    public sealed virtual void CopyTo(WebPair[] parametersArray, int arrayIndex);
    public sealed virtual bool Remove(WebPair parameter);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual int IndexOf(WebPair parameter);
    public sealed virtual void Insert(int index, WebPair parameter);
    public sealed virtual void RemoveAt(int index);
    public sealed virtual WebPair get_Item(int index);
    public sealed virtual void set_Item(int index, WebPair value);
    private void AddCollection(IEnumerable`1<WebPair> collection);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class RestSharp.Authenticators.OAuth1Authenticator : object {
    [CompilerGeneratedAttribute]
private string <Realm>k__BackingField;
    [CompilerGeneratedAttribute]
private OAuthParameterHandling <ParameterHandling>k__BackingField;
    [CompilerGeneratedAttribute]
private OAuthSignatureMethod <SignatureMethod>k__BackingField;
    [CompilerGeneratedAttribute]
private OAuthSignatureTreatment <SignatureTreatment>k__BackingField;
    [CompilerGeneratedAttribute]
private OAuthType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ConsumerKey>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ConsumerSecret>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Token>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TokenSecret>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Verifier>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CallbackUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SessionHandle>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ClientUsername>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ClientPassword>k__BackingField;
    public string Realm { get; public set; }
    public OAuthParameterHandling ParameterHandling { get; public set; }
    public OAuthSignatureMethod SignatureMethod { get; public set; }
    public OAuthSignatureTreatment SignatureTreatment { get; public set; }
    internal OAuthType Type { get; internal set; }
    internal string ConsumerKey { get; internal set; }
    internal string ConsumerSecret { get; internal set; }
    internal string Token { get; internal set; }
    internal string TokenSecret { get; internal set; }
    internal string Verifier { get; internal set; }
    internal string Version { get; internal set; }
    internal string CallbackUrl { get; internal set; }
    internal string SessionHandle { get; internal set; }
    internal string ClientUsername { get; internal set; }
    internal string ClientPassword { get; internal set; }
    [CompilerGeneratedAttribute]
public virtual string get_Realm();
    [CompilerGeneratedAttribute]
public virtual void set_Realm(string value);
    [CompilerGeneratedAttribute]
public virtual OAuthParameterHandling get_ParameterHandling();
    [CompilerGeneratedAttribute]
public virtual void set_ParameterHandling(OAuthParameterHandling value);
    [CompilerGeneratedAttribute]
public virtual OAuthSignatureMethod get_SignatureMethod();
    [CompilerGeneratedAttribute]
public virtual void set_SignatureMethod(OAuthSignatureMethod value);
    [CompilerGeneratedAttribute]
public virtual OAuthSignatureTreatment get_SignatureTreatment();
    [CompilerGeneratedAttribute]
public virtual void set_SignatureTreatment(OAuthSignatureTreatment value);
    [CompilerGeneratedAttribute]
internal virtual OAuthType get_Type();
    [CompilerGeneratedAttribute]
internal virtual void set_Type(OAuthType value);
    [CompilerGeneratedAttribute]
internal virtual string get_ConsumerKey();
    [CompilerGeneratedAttribute]
internal virtual void set_ConsumerKey(string value);
    [CompilerGeneratedAttribute]
internal virtual string get_ConsumerSecret();
    [CompilerGeneratedAttribute]
internal virtual void set_ConsumerSecret(string value);
    [CompilerGeneratedAttribute]
internal virtual string get_Token();
    [CompilerGeneratedAttribute]
internal virtual void set_Token(string value);
    [CompilerGeneratedAttribute]
internal virtual string get_TokenSecret();
    [CompilerGeneratedAttribute]
internal virtual void set_TokenSecret(string value);
    [CompilerGeneratedAttribute]
internal virtual string get_Verifier();
    [CompilerGeneratedAttribute]
internal virtual void set_Verifier(string value);
    [CompilerGeneratedAttribute]
internal virtual string get_Version();
    [CompilerGeneratedAttribute]
internal virtual void set_Version(string value);
    [CompilerGeneratedAttribute]
internal virtual string get_CallbackUrl();
    [CompilerGeneratedAttribute]
internal virtual void set_CallbackUrl(string value);
    [CompilerGeneratedAttribute]
internal virtual string get_SessionHandle();
    [CompilerGeneratedAttribute]
internal virtual void set_SessionHandle(string value);
    [CompilerGeneratedAttribute]
internal virtual string get_ClientUsername();
    [CompilerGeneratedAttribute]
internal virtual void set_ClientUsername(string value);
    [CompilerGeneratedAttribute]
internal virtual string get_ClientPassword();
    [CompilerGeneratedAttribute]
internal virtual void set_ClientPassword(string value);
    public sealed virtual void Authenticate(IRestClient client, IRestRequest request);
    public static OAuth1Authenticator ForRequestToken(string consumerKey, string consumerSecret, OAuthSignatureMethod signatureMethod);
    public static OAuth1Authenticator ForRequestToken(string consumerKey, string consumerSecret, string callbackUrl);
    public static OAuth1Authenticator ForAccessToken(string consumerKey, string consumerSecret, string token, string tokenSecret, OAuthSignatureMethod signatureMethod);
    public static OAuth1Authenticator ForAccessToken(string consumerKey, string consumerSecret, string token, string tokenSecret, string verifier);
    public static OAuth1Authenticator ForAccessTokenRefresh(string consumerKey, string consumerSecret, string token, string tokenSecret, string sessionHandle);
    public static OAuth1Authenticator ForAccessTokenRefresh(string consumerKey, string consumerSecret, string token, string tokenSecret, string verifier, string sessionHandle);
    public static OAuth1Authenticator ForClientAuthentication(string consumerKey, string consumerSecret, string username, string password, OAuthSignatureMethod signatureMethod);
    public static OAuth1Authenticator ForProtectedResource(string consumerKey, string consumerSecret, string accessToken, string accessTokenSecret, OAuthSignatureMethod signatureMethod);
    private void AddOAuthData(IRestClient client, IRestRequest request, OAuthWorkflow workflow);
    [CompilerGeneratedAttribute]
internal static bool <AddOAuthData>g__BaseQuery|69_0(Parameter x);
    [CompilerGeneratedAttribute]
private IEnumerable`1<Parameter> <AddOAuthData>g__CreateHeaderParameters|69_2(<>c__DisplayClass69_0& );
    [CompilerGeneratedAttribute]
private IEnumerable`1<Parameter> <AddOAuthData>g__CreateUrlParameters|69_3(<>c__DisplayClass69_0& );
    [CompilerGeneratedAttribute]
private string <AddOAuthData>g__GetAuthorizationHeader|69_4(<>c__DisplayClass69_0& );
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ObsoleteAttribute("Check the OAuth2 authenticators implementation on how to use the AuthenticatorBase instead")]
public abstract class RestSharp.Authenticators.OAuth2Authenticator : object {
    [CompilerGeneratedAttribute]
private string <AccessToken>k__BackingField;
    public string AccessToken { get; }
    protected OAuth2Authenticator(string accessToken);
    [CompilerGeneratedAttribute]
public string get_AccessToken();
    public sealed virtual void Authenticate(IRestClient client, IRestRequest request);
    protected abstract virtual Parameter GetAuthenticationParameter(string accessToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class RestSharp.Authenticators.OAuth2AuthorizationRequestHeaderAuthenticator : AuthenticatorBase {
    private string _tokenType;
    public OAuth2AuthorizationRequestHeaderAuthenticator(string accessToken);
    public OAuth2AuthorizationRequestHeaderAuthenticator(string accessToken, string tokenType);
    protected virtual Parameter GetAuthenticationParameter(string accessToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class RestSharp.Authenticators.OAuth2UriQueryParameterAuthenticator : AuthenticatorBase {
    public OAuth2UriQueryParameterAuthenticator(string accessToken);
    protected virtual Parameter GetAuthenticationParameter(string accessToken);
}
[ExtensionAttribute]
internal static class RestSharp.Authenticators.ParametersExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
internal static IEnumerable`1<WebPair> ToWebParameters(IEnumerable`1<Parameter> p);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class RestSharp.Authenticators.SimpleAuthenticator : object {
    private string _password;
    private string _passwordKey;
    private string _username;
    private string _usernameKey;
    public SimpleAuthenticator(string usernameKey, string username, string passwordKey, string password);
    public sealed virtual void Authenticate(IRestClient client, IRestRequest request);
}
public enum RestSharp.DataFormat : Enum {
    public int value__;
    public static DataFormat Json;
    public static DataFormat Xml;
    public static DataFormat None;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class RestSharp.DateFormat : ValueType {
    public static string ISO_8601;
    public static string ROUND_TRIP;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class RestSharp.DeserializationException : Exception {
    [CompilerGeneratedAttribute]
private IRestResponse <Response>k__BackingField;
    public IRestResponse Response { get; }
    public DeserializationException(IRestResponse response, Exception innerException);
    [CompilerGeneratedAttribute]
public IRestResponse get_Response();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("132")]
public class RestSharp.Deserializers.DeserializeAsAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Attribute>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Content>k__BackingField;
    public string Name { get; public set; }
    public bool Attribute { get; public set; }
    public bool Content { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public bool get_Attribute();
    [CompilerGeneratedAttribute]
public void set_Attribute(bool value);
    [CompilerGeneratedAttribute]
public bool get_Content();
    [CompilerGeneratedAttribute]
public void set_Content(bool value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class RestSharp.Deserializers.DotNetXmlDeserializer : object {
    [CompilerGeneratedAttribute]
private Encoding <Encoding>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RootElement>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Namespace>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DateFormat>k__BackingField;
    public Encoding Encoding { get; public set; }
    public string RootElement { get; public set; }
    public string Namespace { get; public set; }
    public string DateFormat { get; public set; }
    [CompilerGeneratedAttribute]
public Encoding get_Encoding();
    [CompilerGeneratedAttribute]
public void set_Encoding(Encoding value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_RootElement();
    [CompilerGeneratedAttribute]
public sealed virtual void set_RootElement(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Namespace();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Namespace(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_DateFormat();
    [CompilerGeneratedAttribute]
public sealed virtual void set_DateFormat(string value);
    public sealed virtual T Deserialize(IRestResponse response);
}
[NullableContextAttribute("1")]
public interface RestSharp.Deserializers.IDeserializer {
    public abstract virtual T Deserialize(IRestResponse response);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class RestSharp.Deserializers.XmlDeserializer : object {
    [CompilerGeneratedAttribute]
private CultureInfo <Culture>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RootElement>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Namespace>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DateFormat>k__BackingField;
    public CultureInfo Culture { get; public set; }
    public string RootElement { get; public set; }
    public string Namespace { get; public set; }
    public string DateFormat { get; public set; }
    [CompilerGeneratedAttribute]
public CultureInfo get_Culture();
    [CompilerGeneratedAttribute]
public void set_Culture(CultureInfo value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_RootElement();
    [CompilerGeneratedAttribute]
public sealed virtual void set_RootElement(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Namespace();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Namespace(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_DateFormat();
    [CompilerGeneratedAttribute]
public sealed virtual void set_DateFormat(string value);
    public virtual T Deserialize(IRestResponse response);
    private static void RemoveNamespace(XDocument xdoc);
    protected virtual object Map(object x, XElement root);
    private static bool TryGetFromString(string inputString, Object& result, Type type);
    private void PopulateListFromElements(Type t, IEnumerable`1<XElement> elements, IList list);
    private object HandleListDerivative(XElement root, string propName, Type type);
    protected virtual object CreateAndMap(Type t, XElement element);
    protected virtual object GetValueFromXml(XElement root, XName name, PropertyInfo prop, bool useExactName);
    protected virtual XElement GetElementByName(XElement root, XName name);
    protected virtual XAttribute GetAttributeByName(XElement root, XName name, bool useExactName);
}
[ExtensionAttribute]
internal static class RestSharp.Extensions.CollectionExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static void ForEach(IEnumerable`1<T> items, Action`1<T> action);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class RestSharp.Extensions.MiscExtensions : object {
    [ExtensionAttribute]
[ObsoleteAttribute("This method will be removed soon. If you use it, please copy the code to your project.")]
public static void SaveAs(Byte[] input, string path);
    [ExtensionAttribute]
[ObsoleteAttribute("This method will be removed soon. If you use it, please copy the code to your project.")]
public static Byte[] ReadAsBytes(Stream input);
    [ExtensionAttribute]
[ObsoleteAttribute("This method will be removed soon. If you use it, please copy the code to your project.")]
public static void CopyTo(Stream input, Stream output);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class RestSharp.Extensions.ReflectionExtensions : object {
    [ExtensionAttribute]
public static T GetAttribute(MemberInfo prop);
    [ExtensionAttribute]
public static T GetAttribute(Type type);
    [ExtensionAttribute]
public static bool IsSubclassOfRawGeneric(Type toCheck, Type generic);
    [ExtensionAttribute]
internal static object ChangeType(object source, Type newType);
    [ExtensionAttribute]
public static object FindEnumValue(Type type, string value, CultureInfo culture);
}
[ExtensionAttribute]
public static class RestSharp.Extensions.ResponseExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
[ObsoleteAttribute("This method will be removed soon. If you use it, please copy the code to your project.")]
public static IRestResponse`1<T> ToAsyncResponse(IRestResponse response);
}
[ExtensionAttribute]
public static class RestSharp.Extensions.ResponseStatusExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static WebException ToWebException(ResponseStatus responseStatus);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class RestSharp.Extensions.RSACryptoServiceProviderExtensions : object {
    [ExtensionAttribute]
public static void FromXmlString2(RSACryptoServiceProvider rsa, string xmlString);
    internal static void FromXmlStringImpl(RSACryptoServiceProvider rsa, string xmlString);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class RestSharp.Extensions.StreamExtensions : object {
    [ExtensionAttribute]
public static void WriteString(Stream stream, string value, Encoding encoding);
    [ExtensionAttribute]
public static Task WriteStringAsync(Stream stream, string value, Encoding encoding, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class RestSharp.Extensions.StringEncodingExtensions : object {
    [ExtensionAttribute]
[ObsoleteAttribute("This method will be removed soon. If you use it, please copy the code to your project.")]
public static string AsString(Byte[] buffer, string encoding);
    [ExtensionAttribute]
[ObsoleteAttribute("This method will be removed soon. If you use it, please copy the code to your project.")]
public static string AsString(Byte[] buffer);
    private static string AsString(Byte[] buffer, Encoding encoding);
    [CompilerGeneratedAttribute]
internal static Encoding <AsString>g__TryParseEncoding|0_0(<>c__DisplayClass0_0& );
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class RestSharp.Extensions.StringExtensions : object {
    private static Regex DateRegex;
    private static Regex NewDateRegex;
    private static Regex IsUpperCaseRegex;
    private static Regex AddUnderscoresRegex1;
    private static Regex AddUnderscoresRegex2;
    private static Regex AddUnderscoresRegex3;
    private static Regex AddDashesRegex1;
    private static Regex AddDashesRegex2;
    private static Regex AddDashesRegex3;
    private static Regex AddSpacesRegex1;
    private static Regex AddSpacesRegex2;
    private static Regex AddSpacesRegex3;
    private static StringExtensions();
    [ExtensionAttribute]
public static string UrlDecode(string input);
    [ExtensionAttribute]
public static string UrlEncode(string input);
    [ExtensionAttribute]
public static string UrlEncode(string input, Encoding encoding);
    [ExtensionAttribute]
public static bool HasValue(string input);
    [ExtensionAttribute]
public static string RemoveUnderscoresAndDashes(string input);
    [ExtensionAttribute]
public static DateTime ParseJsonDate(string input, CultureInfo culture);
    [ExtensionAttribute]
private static string RemoveSurroundingQuotes(string input);
    private static DateTime ParseFormattedDate(string input, CultureInfo culture);
    private static DateTime ExtractDate(string input, Regex regex, CultureInfo culture);
    [ExtensionAttribute]
public static string ToPascalCase(string lowercaseAndUnderscoredWord, CultureInfo culture);
    [ExtensionAttribute]
public static string ToPascalCase(string text, bool removeUnderscores, CultureInfo culture);
    [ExtensionAttribute]
public static string ToCamelCase(string lowercaseAndUnderscoredWord, CultureInfo culture);
    [ExtensionAttribute]
public static string MakeInitialLowerCase(string word, CultureInfo culture);
    [ExtensionAttribute]
public static string AddUnderscores(string pascalCasedWord);
    [ExtensionAttribute]
public static string AddDashes(string pascalCasedWord);
    [ExtensionAttribute]
public static string AddUnderscorePrefix(string pascalCasedWord);
    [ExtensionAttribute]
public static string AddSpaces(string pascalCasedWord);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
internal static bool IsEmpty(string value);
    [ExtensionAttribute]
internal static bool IsNotEmpty(string value);
    [IteratorStateMachineAttribute("RestSharp.Extensions.StringExtensions/<GetNameVariants>d__31")]
[ExtensionAttribute]
public static IEnumerable`1<string> GetNameVariants(string name, CultureInfo culture);
    [ExtensionAttribute]
internal static string JoinToString(IEnumerable`1<T> collection, string separator, Func`2<T, string> getString);
    [ExtensionAttribute]
internal static string JoinToString(IEnumerable`1<string> strings, string separator);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class RestSharp.Extensions.WebRequestExtensions : object {
    [ExtensionAttribute]
public static Task`1<Stream> GetRequestStreamAsync(WebRequest webRequest, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<WebResponse> GetResponseAsync(WebRequest webRequest, CancellationToken cancellationToken);
}
[ExtensionAttribute]
internal static class RestSharp.Extensions.WithExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
internal static T With(T self, Action`1<T> do);
}
[ExtensionAttribute]
public static class RestSharp.Extensions.XmlExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static XName AsNamespaced(string name, string namespace);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class RestSharp.FileParameter : object {
    [CompilerGeneratedAttribute]
private long <ContentLength>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<Stream> <Writer>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FileName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContentType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public long ContentLength { get; public set; }
    public Action`1<Stream> Writer { get; public set; }
    public string FileName { get; public set; }
    public string ContentType { get; public set; }
    public string Name { get; public set; }
    [CompilerGeneratedAttribute]
public long get_ContentLength();
    [CompilerGeneratedAttribute]
public void set_ContentLength(long value);
    [CompilerGeneratedAttribute]
public Action`1<Stream> get_Writer();
    [CompilerGeneratedAttribute]
public void set_Writer(Action`1<Stream> value);
    [CompilerGeneratedAttribute]
public string get_FileName();
    [CompilerGeneratedAttribute]
public void set_FileName(string value);
    [CompilerGeneratedAttribute]
public string get_ContentType();
    [CompilerGeneratedAttribute]
public void set_ContentType(string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    public static FileParameter Create(string name, Byte[] data, string filename, string contentType);
    public static FileParameter Create(string name, Byte[] data, string filename);
    public static FileParameter Create(string name, Action`1<Stream> writer, long contentLength, string fileName, string contentType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class RestSharp.Http : object {
    private TimeOutState _timeoutState;
    private static string LineBreak;
    [CompilerGeneratedAttribute]
private string <FormBoundary>k__BackingField;
    private static Regex AddRangeRegex;
    private IDictionary`2<string, Action`2<HttpWebRequest, string>> _restrictedHeaderActions;
    [CompilerGeneratedAttribute]
private Func`2<string, string> <Encode>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AutomaticDecompression>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AlwaysMultipartFormData>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UserAgent>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Timeout>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ReadWriteTimeout>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private ICredentials <Credentials>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private CookieContainer <CookieContainer>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`2<Stream, IHttpResponse> <AdvancedResponseWriter>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<Stream> <ResponseWriter>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<HttpFile> <Files>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <FollowRedirects>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Pipelined>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private X509CertificateCollection <ClientCertificates>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <MaxRedirects>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseDefaultCredentials>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ConnectionGroupName>k__BackingField;
    [CompilerGeneratedAttribute]
private Encoding <Encoding>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<HttpHeader> <Headers>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<HttpParameter> <Parameters>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<HttpCookie> <Cookies>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RequestBody>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RequestContentType>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <RequestBodyBytes>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <Url>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <Host>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<DecompressionMethods> <AllowedDecompressionMethods>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PreAuthenticate>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UnsafeAuthenticatedConnectionSharing>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private IWebProxy <Proxy>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private RequestCachePolicy <CachePolicy>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private RemoteCertificateValidationCallback <RemoteCertificateValidationCallback>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Action`1<HttpWebRequest> <WebRequestConfigurator>k__BackingField;
    public string FormBoundary { get; }
    protected bool HasParameters { get; }
    protected bool HasCookies { get; }
    protected bool HasBody { get; }
    protected bool HasFiles { get; }
    internal Func`2<string, string> Encode { get; internal set; }
    public bool AutomaticDecompression { get; public set; }
    public bool AlwaysMultipartFormData { get; public set; }
    public string UserAgent { get; public set; }
    public int Timeout { get; public set; }
    public int ReadWriteTimeout { get; public set; }
    [NullableAttribute("2")]
public ICredentials Credentials { get; public set; }
    [NullableAttribute("2")]
public CookieContainer CookieContainer { get; public set; }
    public Action`2<Stream, IHttpResponse> AdvancedResponseWriter { get; public set; }
    public Action`1<Stream> ResponseWriter { get; public set; }
    public IList`1<HttpFile> Files { get; internal set; }
    public bool FollowRedirects { get; public set; }
    public bool Pipelined { get; public set; }
    [NullableAttribute("2")]
public X509CertificateCollection ClientCertificates { get; public set; }
    public Nullable`1<int> MaxRedirects { get; public set; }
    public bool UseDefaultCredentials { get; public set; }
    public string ConnectionGroupName { get; public set; }
    public Encoding Encoding { get; public set; }
    public IList`1<HttpHeader> Headers { get; internal set; }
    public IList`1<HttpParameter> Parameters { get; internal set; }
    public IList`1<HttpCookie> Cookies { get; internal set; }
    public string RequestBody { get; public set; }
    public string RequestContentType { get; public set; }
    public Byte[] RequestBodyBytes { get; public set; }
    public Uri Url { get; public set; }
    [NullableAttribute("2")]
public string Host { get; public set; }
    public IList`1<DecompressionMethods> AllowedDecompressionMethods { get; public set; }
    public bool PreAuthenticate { get; public set; }
    public bool UnsafeAuthenticatedConnectionSharing { get; public set; }
    [NullableAttribute("2")]
public IWebProxy Proxy { get; public set; }
    [NullableAttribute("2")]
public RequestCachePolicy CachePolicy { get; public set; }
    [NullableAttribute("2")]
public RemoteCertificateValidationCallback RemoteCertificateValidationCallback { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Action`1<HttpWebRequest> WebRequestConfigurator { get; public set; }
    private static Http();
    public sealed virtual HttpWebRequest AsPostAsync(Action`1<HttpResponse> action, string httpMethod);
    public sealed virtual HttpWebRequest AsGetAsync(Action`1<HttpResponse> action, string httpMethod);
    private HttpWebRequest GetStyleMethodInternalAsync(string method, Action`1<HttpResponse> callback);
    private HttpWebRequest PutPostInternalAsync(string method, Action`1<HttpResponse> callback);
    private void WriteRequestBodyAsync(HttpWebRequest webRequest, Action`1<HttpResponse> callback);
    private long CalculateContentLength();
    private void SetTimeout(IAsyncResult asyncResult);
    private static void GetRawResponseAsync(IAsyncResult result, Action`1<HttpWebResponse> callback);
    private void ResponseCallback(IAsyncResult result, Action`1<HttpResponse> callback);
    private static void ExecuteCallback(HttpResponse response, Action`1<HttpResponse> callback);
    private HttpResponse CreateErrorResponse(Exception ex);
    [CompilerGeneratedAttribute]
public sealed virtual string get_FormBoundary();
    protected bool get_HasParameters();
    protected bool get_HasCookies();
    protected bool get_HasBody();
    protected bool get_HasFiles();
    [CompilerGeneratedAttribute]
internal Func`2<string, string> get_Encode();
    [CompilerGeneratedAttribute]
internal void set_Encode(Func`2<string, string> value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_AutomaticDecompression();
    [CompilerGeneratedAttribute]
public sealed virtual void set_AutomaticDecompression(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_AlwaysMultipartFormData();
    [CompilerGeneratedAttribute]
public sealed virtual void set_AlwaysMultipartFormData(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_UserAgent();
    [CompilerGeneratedAttribute]
public sealed virtual void set_UserAgent(string value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_Timeout();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Timeout(int value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_ReadWriteTimeout();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ReadWriteTimeout(int value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual ICredentials get_Credentials();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual void set_Credentials(ICredentials value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual CookieContainer get_CookieContainer();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual void set_CookieContainer(CookieContainer value);
    [CompilerGeneratedAttribute]
public sealed virtual Action`2<Stream, IHttpResponse> get_AdvancedResponseWriter();
    [CompilerGeneratedAttribute]
public sealed virtual void set_AdvancedResponseWriter(Action`2<Stream, IHttpResponse> value);
    [CompilerGeneratedAttribute]
public sealed virtual Action`1<Stream> get_ResponseWriter();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ResponseWriter(Action`1<Stream> value);
    [CompilerGeneratedAttribute]
public sealed virtual IList`1<HttpFile> get_Files();
    [CompilerGeneratedAttribute]
internal void set_Files(IList`1<HttpFile> value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_FollowRedirects();
    [CompilerGeneratedAttribute]
public sealed virtual void set_FollowRedirects(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_Pipelined();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Pipelined(bool value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual X509CertificateCollection get_ClientCertificates();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual void set_ClientCertificates(X509CertificateCollection value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<int> get_MaxRedirects();
    [CompilerGeneratedAttribute]
public sealed virtual void set_MaxRedirects(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_UseDefaultCredentials();
    [CompilerGeneratedAttribute]
public sealed virtual void set_UseDefaultCredentials(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ConnectionGroupName();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ConnectionGroupName(string value);
    [CompilerGeneratedAttribute]
public sealed virtual Encoding get_Encoding();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Encoding(Encoding value);
    [CompilerGeneratedAttribute]
public sealed virtual IList`1<HttpHeader> get_Headers();
    [CompilerGeneratedAttribute]
internal void set_Headers(IList`1<HttpHeader> value);
    [CompilerGeneratedAttribute]
public sealed virtual IList`1<HttpParameter> get_Parameters();
    [CompilerGeneratedAttribute]
internal void set_Parameters(IList`1<HttpParameter> value);
    [CompilerGeneratedAttribute]
public sealed virtual IList`1<HttpCookie> get_Cookies();
    [CompilerGeneratedAttribute]
internal void set_Cookies(IList`1<HttpCookie> value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_RequestBody();
    [CompilerGeneratedAttribute]
public sealed virtual void set_RequestBody(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_RequestContentType();
    [CompilerGeneratedAttribute]
public sealed virtual void set_RequestContentType(string value);
    [CompilerGeneratedAttribute]
public sealed virtual Byte[] get_RequestBodyBytes();
    [CompilerGeneratedAttribute]
public sealed virtual void set_RequestBodyBytes(Byte[] value);
    [CompilerGeneratedAttribute]
public sealed virtual Uri get_Url();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Url(Uri value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual string get_Host();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual void set_Host(string value);
    [CompilerGeneratedAttribute]
public sealed virtual IList`1<DecompressionMethods> get_AllowedDecompressionMethods();
    [CompilerGeneratedAttribute]
public sealed virtual void set_AllowedDecompressionMethods(IList`1<DecompressionMethods> value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_PreAuthenticate();
    [CompilerGeneratedAttribute]
public sealed virtual void set_PreAuthenticate(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_UnsafeAuthenticatedConnectionSharing();
    [CompilerGeneratedAttribute]
public sealed virtual void set_UnsafeAuthenticatedConnectionSharing(bool value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual IWebProxy get_Proxy();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual void set_Proxy(IWebProxy value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual RequestCachePolicy get_CachePolicy();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual void set_CachePolicy(RequestCachePolicy value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual RemoteCertificateValidationCallback get_RemoteCertificateValidationCallback();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual void set_RemoteCertificateValidationCallback(RemoteCertificateValidationCallback value);
    [CompilerGeneratedAttribute]
public sealed virtual Action`1<HttpWebRequest> get_WebRequestConfigurator();
    [CompilerGeneratedAttribute]
public sealed virtual void set_WebRequestConfigurator(Action`1<HttpWebRequest> value);
    [ObsoleteAttribute]
public static IHttp Create();
    [ObsoleteAttribute("Overriding this method won't be possible in future version")]
protected virtual HttpWebRequest CreateWebRequest(Uri url);
    private static HttpWebRequest CreateRequest(Uri uri);
    private string GetMultipartFileHeader(HttpFile file);
    private string GetMultipartFormData(HttpParameter param);
    private string GetMultipartFooter();
    private void PreparePostBody(WebRequest webRequest);
    private void WriteMultipartFormData(Stream requestStream);
    private HttpResponse ExtractResponseData(HttpWebResponse webResponse);
    public sealed virtual HttpResponse Post();
    public sealed virtual HttpResponse Put();
    public sealed virtual HttpResponse Get();
    public sealed virtual HttpResponse Head();
    public sealed virtual HttpResponse Options();
    public sealed virtual HttpResponse Delete();
    public sealed virtual HttpResponse Patch();
    public sealed virtual HttpResponse Merge();
    public sealed virtual HttpResponse AsGet(string httpMethod);
    public sealed virtual HttpResponse AsPost(string httpMethod);
    private HttpResponse GetStyleMethodInternal(string method);
    private HttpResponse PostPutInternal(string method);
    private HttpResponse ExecuteRequest(string httpMethod, Action`1<HttpWebRequest> prepareRequest);
    private void WriteRequestBody(WebRequest webRequest);
    [ObsoleteAttribute("Use the WebRequestConfigurator delegate instead of overriding this method")]
protected virtual HttpWebRequest ConfigureWebRequest(string method, Uri url);
    [ObsoleteAttribute]
public sealed virtual HttpWebRequest DeleteAsync(Action`1<HttpResponse> action);
    [ObsoleteAttribute]
public sealed virtual HttpWebRequest GetAsync(Action`1<HttpResponse> action);
    [ObsoleteAttribute]
public sealed virtual HttpWebRequest HeadAsync(Action`1<HttpResponse> action);
    [ObsoleteAttribute]
public sealed virtual HttpWebRequest OptionsAsync(Action`1<HttpResponse> action);
    [ObsoleteAttribute]
public sealed virtual HttpWebRequest PostAsync(Action`1<HttpResponse> action);
    [ObsoleteAttribute]
public sealed virtual HttpWebRequest PutAsync(Action`1<HttpResponse> action);
    [ObsoleteAttribute]
public sealed virtual HttpWebRequest PatchAsync(Action`1<HttpResponse> action);
    [ObsoleteAttribute]
public sealed virtual HttpWebRequest MergeAsync(Action`1<HttpResponse> action);
    [ObsoleteAttribute("Use the WebRequestConfigurator delegate instead of overriding this method")]
protected virtual HttpWebRequest ConfigureAsyncWebRequest(string method, Uri url);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private long <CalculateContentLength>b__6_0(long current, HttpParameter param);
    [CompilerGeneratedAttribute]
internal static void <SetTimeout>g__TimeoutCallback|7_0(object state, bool timedOut);
    [CompilerGeneratedAttribute]
private void <.ctor>g__AddSyncHeaderActions|19_0();
    [CompilerGeneratedAttribute]
private void <.ctor>g__AddSharedHeaderActions|19_1();
    [CompilerGeneratedAttribute]
internal static void <.ctor>g__AddRange|19_13(HttpWebRequest r, string range);
    [CompilerGeneratedAttribute]
private string <PreparePostBody>g__EncodeParameters|166_0();
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private string <PreparePostBody>b__166_2(HttpParameter p);
    [CompilerGeneratedAttribute]
private string <PreparePostBody>g__GetMultipartFormContentType|166_1();
    [CompilerGeneratedAttribute]
private void <PostPutInternal>b__180_0(HttpWebRequest r);
    [CompilerGeneratedAttribute]
internal static HttpResponse <ExecuteRequest>g__ExtractErrorResponse|181_0(Exception ex);
    [CompilerGeneratedAttribute]
internal static HttpWebResponse <ExecuteRequest>g__GetRawResponse|181_1(WebRequest request);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ObsoleteAttribute("The HttpCooking class will be removed in future versions")]
public class RestSharp.HttpCookie : object {
    [CompilerGeneratedAttribute]
private string <Comment>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <CommentUri>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Discard>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Domain>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Expired>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <Expires>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HttpOnly>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Port>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Secure>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <TimeStamp>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Version>k__BackingField;
    public string Comment { get; public set; }
    public Uri CommentUri { get; public set; }
    public bool Discard { get; public set; }
    public string Domain { get; public set; }
    public bool Expired { get; public set; }
    public DateTime Expires { get; public set; }
    public bool HttpOnly { get; public set; }
    public string Name { get; public set; }
    public string Path { get; public set; }
    public string Port { get; public set; }
    public bool Secure { get; public set; }
    public DateTime TimeStamp { get; public set; }
    public string Value { get; public set; }
    public int Version { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Comment();
    [CompilerGeneratedAttribute]
public void set_Comment(string value);
    [CompilerGeneratedAttribute]
public Uri get_CommentUri();
    [CompilerGeneratedAttribute]
public void set_CommentUri(Uri value);
    [CompilerGeneratedAttribute]
public bool get_Discard();
    [CompilerGeneratedAttribute]
public void set_Discard(bool value);
    [CompilerGeneratedAttribute]
public string get_Domain();
    [CompilerGeneratedAttribute]
public void set_Domain(string value);
    [CompilerGeneratedAttribute]
public bool get_Expired();
    [CompilerGeneratedAttribute]
public void set_Expired(bool value);
    [CompilerGeneratedAttribute]
public DateTime get_Expires();
    [CompilerGeneratedAttribute]
public void set_Expires(DateTime value);
    [CompilerGeneratedAttribute]
public bool get_HttpOnly();
    [CompilerGeneratedAttribute]
public void set_HttpOnly(bool value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
public void set_Path(string value);
    [CompilerGeneratedAttribute]
public string get_Port();
    [CompilerGeneratedAttribute]
public void set_Port(string value);
    [CompilerGeneratedAttribute]
public bool get_Secure();
    [CompilerGeneratedAttribute]
public void set_Secure(bool value);
    [CompilerGeneratedAttribute]
public DateTime get_TimeStamp();
    [CompilerGeneratedAttribute]
public void set_TimeStamp(DateTime value);
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(string value);
    [CompilerGeneratedAttribute]
public int get_Version();
    [CompilerGeneratedAttribute]
public void set_Version(int value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ObsoleteAttribute("The HttpFile class will be internal in future version")]
public class RestSharp.HttpFile : object {
    [CompilerGeneratedAttribute]
private long <ContentLength>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<Stream> <Writer>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FileName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContentType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public long ContentLength { get; public set; }
    public Action`1<Stream> Writer { get; public set; }
    public string FileName { get; public set; }
    public string ContentType { get; public set; }
    public string Name { get; public set; }
    [CompilerGeneratedAttribute]
public long get_ContentLength();
    [CompilerGeneratedAttribute]
public void set_ContentLength(long value);
    [CompilerGeneratedAttribute]
public Action`1<Stream> get_Writer();
    [CompilerGeneratedAttribute]
public void set_Writer(Action`1<Stream> value);
    [CompilerGeneratedAttribute]
public string get_FileName();
    [CompilerGeneratedAttribute]
public void set_FileName(string value);
    [CompilerGeneratedAttribute]
public string get_ContentType();
    [CompilerGeneratedAttribute]
public void set_ContentType(string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class RestSharp.HttpHeader : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    public string Name { get; public set; }
    public string Value { get; public set; }
    public HttpHeader(string name, string value);
    public HttpHeader(string name, object value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class RestSharp.HttpParameter : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <ContentType>k__BackingField;
    public string Name { get; public set; }
    public string Value { get; public set; }
    [NullableAttribute("2")]
public string ContentType { get; public set; }
    [NullableContextAttribute("2")]
public HttpParameter(string name, string value, string contentType);
    [NullableContextAttribute("2")]
public HttpParameter(string name, object value, string contentType);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(string value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_ContentType();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_ContentType(string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class RestSharp.HttpResponse : object {
    private string _content;
    [CompilerGeneratedAttribute]
private string <ContentType>k__BackingField;
    [CompilerGeneratedAttribute]
private long <ContentLength>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContentEncoding>k__BackingField;
    [CompilerGeneratedAttribute]
private HttpStatusCode <StatusCode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StatusDescription>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <RawBytes>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <ResponseUri>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Server>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<HttpHeader> <Headers>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<HttpCookie> <Cookies>k__BackingField;
    [CompilerGeneratedAttribute]
private ResponseStatus <ResponseStatus>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ErrorMessage>k__BackingField;
    [CompilerGeneratedAttribute]
private Exception <ErrorException>k__BackingField;
    [CompilerGeneratedAttribute]
private Version <ProtocolVersion>k__BackingField;
    public string ContentType { get; public set; }
    public long ContentLength { get; public set; }
    public string ContentEncoding { get; public set; }
    public string Content { get; }
    public HttpStatusCode StatusCode { get; public set; }
    public string StatusDescription { get; public set; }
    public Byte[] RawBytes { get; public set; }
    public Uri ResponseUri { get; public set; }
    public string Server { get; public set; }
    public IList`1<HttpHeader> Headers { get; internal set; }
    public IList`1<HttpCookie> Cookies { get; }
    public ResponseStatus ResponseStatus { get; public set; }
    public string ErrorMessage { get; public set; }
    public Exception ErrorException { get; public set; }
    public Version ProtocolVersion { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual string get_ContentType();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ContentType(string value);
    [CompilerGeneratedAttribute]
public sealed virtual long get_ContentLength();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ContentLength(long value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ContentEncoding();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ContentEncoding(string value);
    public sealed virtual string get_Content();
    [CompilerGeneratedAttribute]
public sealed virtual HttpStatusCode get_StatusCode();
    [CompilerGeneratedAttribute]
public sealed virtual void set_StatusCode(HttpStatusCode value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_StatusDescription();
    [CompilerGeneratedAttribute]
public sealed virtual void set_StatusDescription(string value);
    [CompilerGeneratedAttribute]
public sealed virtual Byte[] get_RawBytes();
    [CompilerGeneratedAttribute]
public sealed virtual void set_RawBytes(Byte[] value);
    [CompilerGeneratedAttribute]
public sealed virtual Uri get_ResponseUri();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ResponseUri(Uri value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Server();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Server(string value);
    [CompilerGeneratedAttribute]
public sealed virtual IList`1<HttpHeader> get_Headers();
    [CompilerGeneratedAttribute]
internal void set_Headers(IList`1<HttpHeader> value);
    [CompilerGeneratedAttribute]
public sealed virtual IList`1<HttpCookie> get_Cookies();
    [CompilerGeneratedAttribute]
public sealed virtual ResponseStatus get_ResponseStatus();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ResponseStatus(ResponseStatus value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ErrorMessage();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ErrorMessage(string value);
    [CompilerGeneratedAttribute]
public sealed virtual Exception get_ErrorException();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ErrorException(Exception value);
    [CompilerGeneratedAttribute]
public sealed virtual Version get_ProtocolVersion();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ProtocolVersion(Version value);
}
[NullableContextAttribute("1")]
public interface RestSharp.IHttp {
    public Action`1<Stream> ResponseWriter { get; public set; }
    public Action`2<Stream, IHttpResponse> AdvancedResponseWriter { get; public set; }
    [NullableAttribute("2")]
public CookieContainer CookieContainer { get; public set; }
    [NullableAttribute("2")]
public ICredentials Credentials { get; public set; }
    public bool AutomaticDecompression { get; public set; }
    public bool AlwaysMultipartFormData { get; public set; }
    public string UserAgent { get; public set; }
    public int Timeout { get; public set; }
    public int ReadWriteTimeout { get; public set; }
    public bool FollowRedirects { get; public set; }
    public bool Pipelined { get; public set; }
    [NullableAttribute("2")]
public X509CertificateCollection ClientCertificates { get; public set; }
    public Nullable`1<int> MaxRedirects { get; public set; }
    public bool UseDefaultCredentials { get; public set; }
    public Encoding Encoding { get; public set; }
    public IList`1<HttpHeader> Headers { get; }
    public IList`1<HttpParameter> Parameters { get; }
    public IList`1<HttpFile> Files { get; }
    public IList`1<HttpCookie> Cookies { get; }
    public string RequestBody { get; public set; }
    public string RequestContentType { get; public set; }
    public bool PreAuthenticate { get; public set; }
    public bool UnsafeAuthenticatedConnectionSharing { get; public set; }
    [NullableAttribute("2")]
public RequestCachePolicy CachePolicy { get; public set; }
    public string ConnectionGroupName { get; public set; }
    public Byte[] RequestBodyBytes { get; public set; }
    public Uri Url { get; public set; }
    [NullableAttribute("2")]
public string Host { get; public set; }
    public string FormBoundary { get; }
    public IList`1<DecompressionMethods> AllowedDecompressionMethods { get; public set; }
    [NullableAttribute("2")]
public IWebProxy Proxy { get; public set; }
    [NullableAttribute("2")]
public RemoteCertificateValidationCallback RemoteCertificateValidationCallback { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Action`1<HttpWebRequest> WebRequestConfigurator { get; public set; }
    public abstract virtual Action`1<Stream> get_ResponseWriter();
    public abstract virtual void set_ResponseWriter(Action`1<Stream> value);
    public abstract virtual Action`2<Stream, IHttpResponse> get_AdvancedResponseWriter();
    public abstract virtual void set_AdvancedResponseWriter(Action`2<Stream, IHttpResponse> value);
    [NullableContextAttribute("2")]
public abstract virtual CookieContainer get_CookieContainer();
    [NullableContextAttribute("2")]
public abstract virtual void set_CookieContainer(CookieContainer value);
    [NullableContextAttribute("2")]
public abstract virtual ICredentials get_Credentials();
    [NullableContextAttribute("2")]
public abstract virtual void set_Credentials(ICredentials value);
    public abstract virtual bool get_AutomaticDecompression();
    public abstract virtual void set_AutomaticDecompression(bool value);
    public abstract virtual bool get_AlwaysMultipartFormData();
    public abstract virtual void set_AlwaysMultipartFormData(bool value);
    public abstract virtual string get_UserAgent();
    public abstract virtual void set_UserAgent(string value);
    public abstract virtual int get_Timeout();
    public abstract virtual void set_Timeout(int value);
    public abstract virtual int get_ReadWriteTimeout();
    public abstract virtual void set_ReadWriteTimeout(int value);
    public abstract virtual bool get_FollowRedirects();
    public abstract virtual void set_FollowRedirects(bool value);
    public abstract virtual bool get_Pipelined();
    public abstract virtual void set_Pipelined(bool value);
    [NullableContextAttribute("2")]
public abstract virtual X509CertificateCollection get_ClientCertificates();
    [NullableContextAttribute("2")]
public abstract virtual void set_ClientCertificates(X509CertificateCollection value);
    public abstract virtual Nullable`1<int> get_MaxRedirects();
    public abstract virtual void set_MaxRedirects(Nullable`1<int> value);
    public abstract virtual bool get_UseDefaultCredentials();
    public abstract virtual void set_UseDefaultCredentials(bool value);
    public abstract virtual Encoding get_Encoding();
    public abstract virtual void set_Encoding(Encoding value);
    public abstract virtual IList`1<HttpHeader> get_Headers();
    public abstract virtual IList`1<HttpParameter> get_Parameters();
    public abstract virtual IList`1<HttpFile> get_Files();
    public abstract virtual IList`1<HttpCookie> get_Cookies();
    public abstract virtual string get_RequestBody();
    public abstract virtual void set_RequestBody(string value);
    public abstract virtual string get_RequestContentType();
    public abstract virtual void set_RequestContentType(string value);
    public abstract virtual bool get_PreAuthenticate();
    public abstract virtual void set_PreAuthenticate(bool value);
    public abstract virtual bool get_UnsafeAuthenticatedConnectionSharing();
    public abstract virtual void set_UnsafeAuthenticatedConnectionSharing(bool value);
    [NullableContextAttribute("2")]
public abstract virtual RequestCachePolicy get_CachePolicy();
    [NullableContextAttribute("2")]
public abstract virtual void set_CachePolicy(RequestCachePolicy value);
    public abstract virtual string get_ConnectionGroupName();
    public abstract virtual void set_ConnectionGroupName(string value);
    public abstract virtual Byte[] get_RequestBodyBytes();
    public abstract virtual void set_RequestBodyBytes(Byte[] value);
    public abstract virtual Uri get_Url();
    public abstract virtual void set_Url(Uri value);
    [NullableContextAttribute("2")]
public abstract virtual string get_Host();
    [NullableContextAttribute("2")]
public abstract virtual void set_Host(string value);
    public abstract virtual string get_FormBoundary();
    public abstract virtual IList`1<DecompressionMethods> get_AllowedDecompressionMethods();
    public abstract virtual void set_AllowedDecompressionMethods(IList`1<DecompressionMethods> value);
    [NullableContextAttribute("2")]
public abstract virtual IWebProxy get_Proxy();
    [NullableContextAttribute("2")]
public abstract virtual void set_Proxy(IWebProxy value);
    [NullableContextAttribute("2")]
public abstract virtual RemoteCertificateValidationCallback get_RemoteCertificateValidationCallback();
    [NullableContextAttribute("2")]
public abstract virtual void set_RemoteCertificateValidationCallback(RemoteCertificateValidationCallback value);
    public abstract virtual Action`1<HttpWebRequest> get_WebRequestConfigurator();
    public abstract virtual void set_WebRequestConfigurator(Action`1<HttpWebRequest> value);
    [ObsoleteAttribute]
public abstract virtual HttpWebRequest DeleteAsync(Action`1<HttpResponse> action);
    [ObsoleteAttribute]
public abstract virtual HttpWebRequest GetAsync(Action`1<HttpResponse> action);
    [ObsoleteAttribute]
public abstract virtual HttpWebRequest HeadAsync(Action`1<HttpResponse> action);
    [ObsoleteAttribute]
public abstract virtual HttpWebRequest OptionsAsync(Action`1<HttpResponse> action);
    [ObsoleteAttribute]
public abstract virtual HttpWebRequest PostAsync(Action`1<HttpResponse> action);
    [ObsoleteAttribute]
public abstract virtual HttpWebRequest PutAsync(Action`1<HttpResponse> action);
    [ObsoleteAttribute]
public abstract virtual HttpWebRequest PatchAsync(Action`1<HttpResponse> action);
    [ObsoleteAttribute]
public abstract virtual HttpWebRequest MergeAsync(Action`1<HttpResponse> action);
    public abstract virtual HttpWebRequest AsPostAsync(Action`1<HttpResponse> action, string httpMethod);
    public abstract virtual HttpWebRequest AsGetAsync(Action`1<HttpResponse> action, string httpMethod);
    public abstract virtual HttpResponse Delete();
    public abstract virtual HttpResponse Get();
    public abstract virtual HttpResponse Head();
    public abstract virtual HttpResponse Options();
    public abstract virtual HttpResponse Post();
    public abstract virtual HttpResponse Put();
    public abstract virtual HttpResponse Patch();
    public abstract virtual HttpResponse Merge();
    public abstract virtual HttpResponse AsPost(string httpMethod);
    public abstract virtual HttpResponse AsGet(string httpMethod);
}
[NullableContextAttribute("1")]
public interface RestSharp.IHttpResponse {
    public string ContentType { get; public set; }
    public long ContentLength { get; public set; }
    public string ContentEncoding { get; public set; }
    public string Content { get; }
    public HttpStatusCode StatusCode { get; public set; }
    public string StatusDescription { get; public set; }
    public Byte[] RawBytes { get; public set; }
    public Uri ResponseUri { get; public set; }
    public string Server { get; public set; }
    public IList`1<HttpHeader> Headers { get; }
    public IList`1<HttpCookie> Cookies { get; }
    public ResponseStatus ResponseStatus { get; public set; }
    public string ErrorMessage { get; public set; }
    public Exception ErrorException { get; public set; }
    public Version ProtocolVersion { get; public set; }
    public abstract virtual string get_ContentType();
    public abstract virtual void set_ContentType(string value);
    public abstract virtual long get_ContentLength();
    public abstract virtual void set_ContentLength(long value);
    public abstract virtual string get_ContentEncoding();
    public abstract virtual void set_ContentEncoding(string value);
    public abstract virtual string get_Content();
    public abstract virtual HttpStatusCode get_StatusCode();
    public abstract virtual void set_StatusCode(HttpStatusCode value);
    public abstract virtual string get_StatusDescription();
    public abstract virtual void set_StatusDescription(string value);
    public abstract virtual Byte[] get_RawBytes();
    public abstract virtual void set_RawBytes(Byte[] value);
    public abstract virtual Uri get_ResponseUri();
    public abstract virtual void set_ResponseUri(Uri value);
    public abstract virtual string get_Server();
    public abstract virtual void set_Server(string value);
    public abstract virtual IList`1<HttpHeader> get_Headers();
    public abstract virtual IList`1<HttpCookie> get_Cookies();
    public abstract virtual ResponseStatus get_ResponseStatus();
    public abstract virtual void set_ResponseStatus(ResponseStatus value);
    public abstract virtual string get_ErrorMessage();
    public abstract virtual void set_ErrorMessage(string value);
    public abstract virtual Exception get_ErrorException();
    public abstract virtual void set_ErrorException(Exception value);
    public abstract virtual Version get_ProtocolVersion();
    public abstract virtual void set_ProtocolVersion(Version value);
}
[NullableContextAttribute("1")]
[GeneratedCodeAttribute("simple-json", "1.0.0")]
public interface RestSharp.IJsonSerializerStrategy {
    public abstract virtual bool TrySerializeNonPrimitiveObject(object input, Object& output);
    public abstract virtual object DeserializeObject(object value, Type type);
}
[NullableContextAttribute("1")]
public interface RestSharp.IRestClient {
    [NullableAttribute("2")]
public CookieContainer CookieContainer { get; public set; }
    public bool AutomaticDecompression { get; public set; }
    public Nullable`1<int> MaxRedirects { get; public set; }
    public string UserAgent { get; public set; }
    public int Timeout { get; public set; }
    public int ReadWriteTimeout { get; public set; }
    public bool UseSynchronizationContext { get; public set; }
    [NullableAttribute("2")]
public IAuthenticator Authenticator { get; public set; }
    [NullableAttribute("2")]
public Uri BaseUrl { get; public set; }
    public Encoding Encoding { get; public set; }
    public bool ThrowOnDeserializationError { get; public set; }
    public bool FailOnDeserializationError { get; public set; }
    public bool ThrowOnAnyError { get; public set; }
    [NullableAttribute("2")]
public string ConnectionGroupName { get; public set; }
    public bool PreAuthenticate { get; public set; }
    public bool UnsafeAuthenticatedConnectionSharing { get; public set; }
    public IList`1<Parameter> DefaultParameters { get; }
    [NullableAttribute("2")]
public string BaseHost { get; public set; }
    public bool AllowMultipleDefaultParametersWithSameName { get; public set; }
    [NullableAttribute("2")]
public X509CertificateCollection ClientCertificates { get; public set; }
    [NullableAttribute("2")]
public IWebProxy Proxy { get; public set; }
    [NullableAttribute("2")]
public RequestCachePolicy CachePolicy { get; public set; }
    public bool Pipelined { get; public set; }
    public bool FollowRedirects { get; public set; }
    [NullableAttribute("2")]
public RemoteCertificateValidationCallback RemoteCertificateValidationCallback { get; public set; }
    public abstract virtual IRestClient UseSerializer(Func`1<IRestSerializer> serializerFactory);
    public abstract virtual IRestClient UseSerializer();
    [NullableContextAttribute("2")]
public abstract virtual CookieContainer get_CookieContainer();
    [NullableContextAttribute("2")]
public abstract virtual void set_CookieContainer(CookieContainer value);
    public abstract virtual bool get_AutomaticDecompression();
    public abstract virtual void set_AutomaticDecompression(bool value);
    public abstract virtual Nullable`1<int> get_MaxRedirects();
    public abstract virtual void set_MaxRedirects(Nullable`1<int> value);
    public abstract virtual string get_UserAgent();
    public abstract virtual void set_UserAgent(string value);
    public abstract virtual int get_Timeout();
    public abstract virtual void set_Timeout(int value);
    public abstract virtual int get_ReadWriteTimeout();
    public abstract virtual void set_ReadWriteTimeout(int value);
    public abstract virtual bool get_UseSynchronizationContext();
    public abstract virtual void set_UseSynchronizationContext(bool value);
    [NullableContextAttribute("2")]
public abstract virtual IAuthenticator get_Authenticator();
    [NullableContextAttribute("2")]
public abstract virtual void set_Authenticator(IAuthenticator value);
    [NullableContextAttribute("2")]
public abstract virtual Uri get_BaseUrl();
    [NullableContextAttribute("2")]
public abstract virtual void set_BaseUrl(Uri value);
    public abstract virtual Encoding get_Encoding();
    public abstract virtual void set_Encoding(Encoding value);
    public abstract virtual bool get_ThrowOnDeserializationError();
    public abstract virtual void set_ThrowOnDeserializationError(bool value);
    public abstract virtual bool get_FailOnDeserializationError();
    public abstract virtual void set_FailOnDeserializationError(bool value);
    public abstract virtual bool get_ThrowOnAnyError();
    public abstract virtual void set_ThrowOnAnyError(bool value);
    [NullableContextAttribute("2")]
public abstract virtual string get_ConnectionGroupName();
    [NullableContextAttribute("2")]
public abstract virtual void set_ConnectionGroupName(string value);
    public abstract virtual bool get_PreAuthenticate();
    public abstract virtual void set_PreAuthenticate(bool value);
    public abstract virtual bool get_UnsafeAuthenticatedConnectionSharing();
    public abstract virtual void set_UnsafeAuthenticatedConnectionSharing(bool value);
    public abstract virtual IList`1<Parameter> get_DefaultParameters();
    [NullableContextAttribute("2")]
public abstract virtual string get_BaseHost();
    [NullableContextAttribute("2")]
public abstract virtual void set_BaseHost(string value);
    public abstract virtual bool get_AllowMultipleDefaultParametersWithSameName();
    public abstract virtual void set_AllowMultipleDefaultParametersWithSameName(bool value);
    [NullableContextAttribute("2")]
public abstract virtual X509CertificateCollection get_ClientCertificates();
    [NullableContextAttribute("2")]
public abstract virtual void set_ClientCertificates(X509CertificateCollection value);
    [NullableContextAttribute("2")]
public abstract virtual IWebProxy get_Proxy();
    [NullableContextAttribute("2")]
public abstract virtual void set_Proxy(IWebProxy value);
    [NullableContextAttribute("2")]
public abstract virtual RequestCachePolicy get_CachePolicy();
    [NullableContextAttribute("2")]
public abstract virtual void set_CachePolicy(RequestCachePolicy value);
    public abstract virtual bool get_Pipelined();
    public abstract virtual void set_Pipelined(bool value);
    public abstract virtual bool get_FollowRedirects();
    public abstract virtual void set_FollowRedirects(bool value);
    [NullableContextAttribute("2")]
public abstract virtual RemoteCertificateValidationCallback get_RemoteCertificateValidationCallback();
    [NullableContextAttribute("2")]
public abstract virtual void set_RemoteCertificateValidationCallback(RemoteCertificateValidationCallback value);
    public abstract virtual IRestResponse`1<T> Deserialize(IRestResponse response);
    public abstract virtual IRestClient UseUrlEncoder(Func`2<string, string> encoder);
    public abstract virtual IRestClient UseQueryEncoder(Func`3<string, Encoding, string> queryEncoder);
    public abstract virtual IRestResponse Execute(IRestRequest request);
    public abstract virtual IRestResponse Execute(IRestRequest request, Method httpMethod);
    public abstract virtual IRestResponse`1<T> Execute(IRestRequest request);
    public abstract virtual IRestResponse`1<T> Execute(IRestRequest request, Method httpMethod);
    public abstract virtual Byte[] DownloadData(IRestRequest request);
    [ObsoleteAttribute("Use ThrowOnAnyError property to instruct RestSharp to rethrow exceptions")]
public abstract virtual Byte[] DownloadData(IRestRequest request, bool throwOnError);
    public abstract virtual Uri BuildUri(IRestRequest request);
    public abstract virtual string BuildUriWithoutQueryParameters(IRestRequest request);
    public abstract virtual void ConfigureWebRequest(Action`1<HttpWebRequest> configurator);
    public abstract virtual void AddHandler(string contentType, Func`1<IDeserializer> deserializerFactory);
    public abstract virtual void RemoveHandler(string contentType);
    public abstract virtual void ClearHandlers();
    public abstract virtual IRestResponse ExecuteAsGet(IRestRequest request, string httpMethod);
    public abstract virtual IRestResponse ExecuteAsPost(IRestRequest request, string httpMethod);
    public abstract virtual IRestResponse`1<T> ExecuteAsGet(IRestRequest request, string httpMethod);
    public abstract virtual IRestResponse`1<T> ExecuteAsPost(IRestRequest request, string httpMethod);
    public abstract virtual Task`1<IRestResponse`1<T>> ExecuteAsync(IRestRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<IRestResponse`1<T>> ExecuteAsync(IRestRequest request, Method httpMethod, CancellationToken cancellationToken);
    public abstract virtual Task`1<IRestResponse> ExecuteAsync(IRestRequest request, Method httpMethod, CancellationToken cancellationToken);
    public abstract virtual Task`1<IRestResponse> ExecuteAsync(IRestRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<IRestResponse`1<T>> ExecuteGetAsync(IRestRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<IRestResponse`1<T>> ExecutePostAsync(IRestRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<IRestResponse> ExecuteGetAsync(IRestRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<IRestResponse> ExecutePostAsync(IRestRequest request, CancellationToken cancellationToken);
    [ObsoleteAttribute("Use the overload that accepts the delegate factory")]
public abstract virtual IRestClient UseSerializer(IRestSerializer serializer);
    [ObsoleteAttribute("This method will be removed soon in favour of the proper async call")]
public abstract virtual RestRequestAsyncHandle ExecuteAsync(IRestRequest request, Action`2<IRestResponse, RestRequestAsyncHandle> callback);
    [ObsoleteAttribute("This method will be removed soon in favour of the proper async call")]
public abstract virtual RestRequestAsyncHandle ExecuteAsync(IRestRequest request, Action`2<IRestResponse`1<T>, RestRequestAsyncHandle> callback);
    [ObsoleteAttribute("This method will be removed soon in favour of the proper async call")]
public abstract virtual RestRequestAsyncHandle ExecuteAsync(IRestRequest request, Action`2<IRestResponse, RestRequestAsyncHandle> callback, Method httpMethod);
    [ObsoleteAttribute("This method will be removed soon in favour of the proper async call")]
public abstract virtual RestRequestAsyncHandle ExecuteAsync(IRestRequest request, Action`2<IRestResponse`1<T>, RestRequestAsyncHandle> callback, Method httpMethod);
    [ObsoleteAttribute("This method will be removed soon in favour of the proper async call")]
public abstract virtual RestRequestAsyncHandle ExecuteAsyncGet(IRestRequest request, Action`2<IRestResponse, RestRequestAsyncHandle> callback, string httpMethod);
    [ObsoleteAttribute("This method will be removed soon in favour of the proper async call")]
public abstract virtual RestRequestAsyncHandle ExecuteAsyncPost(IRestRequest request, Action`2<IRestResponse, RestRequestAsyncHandle> callback, string httpMethod);
    [ObsoleteAttribute("This method will be removed soon in favour of the proper async call")]
public abstract virtual RestRequestAsyncHandle ExecuteAsyncGet(IRestRequest request, Action`2<IRestResponse`1<T>, RestRequestAsyncHandle> callback, string httpMethod);
    [ObsoleteAttribute("This method will be removed soon in favour of the proper async call")]
public abstract virtual RestRequestAsyncHandle ExecuteAsyncPost(IRestRequest request, Action`2<IRestResponse`1<T>, RestRequestAsyncHandle> callback, string httpMethod);
    [ObsoleteAttribute("This method will be renamed to ExecuteAsync soon")]
public abstract virtual Task`1<IRestResponse`1<T>> ExecuteTaskAsync(IRestRequest request);
    [ObsoleteAttribute("UseExecuteAsync instead")]
public abstract virtual Task`1<IRestResponse`1<T>> ExecuteTaskAsync(IRestRequest request, CancellationToken token);
    [ObsoleteAttribute("Use ExecuteAsync instead")]
public abstract virtual Task`1<IRestResponse`1<T>> ExecuteTaskAsync(IRestRequest request, Method httpMethod);
    [ObsoleteAttribute("Use ExecuteGetAsync instead")]
public abstract virtual Task`1<IRestResponse`1<T>> ExecuteGetTaskAsync(IRestRequest request);
    [ObsoleteAttribute("Use ExecuteGetAsync instead")]
public abstract virtual Task`1<IRestResponse`1<T>> ExecuteGetTaskAsync(IRestRequest request, CancellationToken token);
    [ObsoleteAttribute("Use ExecutePostAsync instead")]
public abstract virtual Task`1<IRestResponse`1<T>> ExecutePostTaskAsync(IRestRequest request);
    [ObsoleteAttribute("Use ExecutePostAsync instead")]
public abstract virtual Task`1<IRestResponse`1<T>> ExecutePostTaskAsync(IRestRequest request, CancellationToken token);
    [ObsoleteAttribute("Use ExecuteAsync instead")]
public abstract virtual Task`1<IRestResponse> ExecuteTaskAsync(IRestRequest request, CancellationToken token);
    [ObsoleteAttribute("Use ExecuteAsync instead")]
public abstract virtual Task`1<IRestResponse> ExecuteTaskAsync(IRestRequest request, CancellationToken token, Method httpMethod);
    [ObsoleteAttribute("Use ExecuteAsync instead")]
public abstract virtual Task`1<IRestResponse> ExecuteTaskAsync(IRestRequest request);
    [ObsoleteAttribute("Use ExecuteGetAsync instead")]
public abstract virtual Task`1<IRestResponse> ExecuteGetTaskAsync(IRestRequest request);
    [ObsoleteAttribute("Use ExecuteGetAsync instead")]
public abstract virtual Task`1<IRestResponse> ExecuteGetTaskAsync(IRestRequest request, CancellationToken token);
    [ObsoleteAttribute("Use ExecutePostAsync instead")]
public abstract virtual Task`1<IRestResponse> ExecutePostTaskAsync(IRestRequest request);
    [ObsoleteAttribute("Use ExecutePostAsync instead")]
public abstract virtual Task`1<IRestResponse> ExecutePostTaskAsync(IRestRequest request, CancellationToken token);
    [ObsoleteAttribute("Use the overload that accepts a factory delegate")]
public abstract virtual void AddHandler(string contentType, IDeserializer deserializer);
}
[NullableContextAttribute("1")]
public interface RestSharp.IRestRequest {
    public bool AlwaysMultipartFormData { get; public set; }
    public ISerializer JsonSerializer { get; public set; }
    public IXmlSerializer XmlSerializer { get; public set; }
    public Action`2<Stream, IHttpResponse> AdvancedResponseWriter { get; public set; }
    public Action`1<Stream> ResponseWriter { get; public set; }
    public List`1<Parameter> Parameters { get; }
    public List`1<FileParameter> Files { get; }
    public Method Method { get; public set; }
    public string Resource { get; public set; }
    [ObsoleteAttribute("Use AddJsonBody or AddXmlBody to tell RestSharp how to serialize the request body")]
public DataFormat RequestFormat { get; public set; }
    public string RootElement { get; public set; }
    public string DateFormat { get; public set; }
    public string XmlNamespace { get; public set; }
    [NullableAttribute("2")]
[ObsoleteAttribute("Use one of authenticators provided")]
public ICredentials Credentials { get; public set; }
    public int Timeout { get; public set; }
    public int ReadWriteTimeout { get; public set; }
    public int Attempts { get; }
    public bool UseDefaultCredentials { get; public set; }
    public IList`1<DecompressionMethods> AllowedDecompressionMethods { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Action`1<IRestResponse> OnBeforeDeserialization { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Action`1<IHttp> OnBeforeRequest { get; public set; }
    [NullableAttribute("2")]
public RequestBody Body { get; public set; }
    public abstract virtual bool get_AlwaysMultipartFormData();
    public abstract virtual void set_AlwaysMultipartFormData(bool value);
    public abstract virtual ISerializer get_JsonSerializer();
    public abstract virtual void set_JsonSerializer(ISerializer value);
    public abstract virtual IXmlSerializer get_XmlSerializer();
    public abstract virtual void set_XmlSerializer(IXmlSerializer value);
    public abstract virtual Action`2<Stream, IHttpResponse> get_AdvancedResponseWriter();
    public abstract virtual void set_AdvancedResponseWriter(Action`2<Stream, IHttpResponse> value);
    public abstract virtual Action`1<Stream> get_ResponseWriter();
    public abstract virtual void set_ResponseWriter(Action`1<Stream> value);
    public abstract virtual List`1<Parameter> get_Parameters();
    public abstract virtual List`1<FileParameter> get_Files();
    public abstract virtual Method get_Method();
    public abstract virtual void set_Method(Method value);
    public abstract virtual string get_Resource();
    public abstract virtual void set_Resource(string value);
    public abstract virtual DataFormat get_RequestFormat();
    public abstract virtual void set_RequestFormat(DataFormat value);
    public abstract virtual string get_RootElement();
    public abstract virtual void set_RootElement(string value);
    public abstract virtual string get_DateFormat();
    public abstract virtual void set_DateFormat(string value);
    public abstract virtual string get_XmlNamespace();
    public abstract virtual void set_XmlNamespace(string value);
    [NullableContextAttribute("2")]
public abstract virtual ICredentials get_Credentials();
    [NullableContextAttribute("2")]
public abstract virtual void set_Credentials(ICredentials value);
    public abstract virtual int get_Timeout();
    public abstract virtual void set_Timeout(int value);
    public abstract virtual int get_ReadWriteTimeout();
    public abstract virtual void set_ReadWriteTimeout(int value);
    public abstract virtual int get_Attempts();
    public abstract virtual bool get_UseDefaultCredentials();
    public abstract virtual void set_UseDefaultCredentials(bool value);
    public abstract virtual IList`1<DecompressionMethods> get_AllowedDecompressionMethods();
    public abstract virtual Action`1<IRestResponse> get_OnBeforeDeserialization();
    public abstract virtual void set_OnBeforeDeserialization(Action`1<IRestResponse> value);
    public abstract virtual Action`1<IHttp> get_OnBeforeRequest();
    public abstract virtual void set_OnBeforeRequest(Action`1<IHttp> value);
    [NullableContextAttribute("2")]
public abstract virtual RequestBody get_Body();
    [NullableContextAttribute("2")]
public abstract virtual void set_Body(RequestBody value);
    public abstract virtual IRestRequest AddFile(string name, string path, string contentType);
    public abstract virtual IRestRequest AddFile(string name, Byte[] bytes, string fileName, string contentType);
    public abstract virtual IRestRequest AddFile(string name, Action`1<Stream> writer, string fileName, long contentLength, string contentType);
    public abstract virtual IRestRequest AddFileBytes(string name, Byte[] bytes, string filename, string contentType);
    [ObsoleteAttribute("Use AddJsonBody or AddXmlBody instead")]
public abstract virtual IRestRequest AddBody(object obj, string xmlNamespace);
    [ObsoleteAttribute("Use AddJsonBody or AddXmlBody instead")]
public abstract virtual IRestRequest AddBody(object obj);
    public abstract virtual IRestRequest AddJsonBody(object obj);
    public abstract virtual IRestRequest AddJsonBody(object obj, string contentType);
    public abstract virtual IRestRequest AddXmlBody(object obj);
    public abstract virtual IRestRequest AddXmlBody(object obj, string xmlNamespace);
    public abstract virtual IRestRequest AddObject(object obj, String[] includedProperties);
    public abstract virtual IRestRequest AddObject(object obj);
    public abstract virtual IRestRequest AddParameter(Parameter p);
    public abstract virtual IRestRequest AddParameter(string name, object value);
    public abstract virtual IRestRequest AddParameter(string name, object value, ParameterType type);
    public abstract virtual IRestRequest AddParameter(string name, object value, string contentType, ParameterType type);
    public abstract virtual IRestRequest AddOrUpdateParameter(Parameter parameter);
    public abstract virtual IRestRequest AddOrUpdateParameters(IEnumerable`1<Parameter> parameters);
    public abstract virtual IRestRequest AddOrUpdateParameter(string name, object value);
    public abstract virtual IRestRequest AddOrUpdateParameter(string name, object value, ParameterType type);
    public abstract virtual IRestRequest AddOrUpdateParameter(string name, object value, string contentType, ParameterType type);
    public abstract virtual IRestRequest AddHeader(string name, string value);
    public abstract virtual IRestRequest AddHeaders(ICollection`1<KeyValuePair`2<string, string>> headers);
    public abstract virtual IRestRequest AddCookie(string name, string value);
    public abstract virtual IRestRequest AddUrlSegment(string name, string value);
    public abstract virtual IRestRequest AddUrlSegment(string name, object value);
    public abstract virtual IRestRequest AddQueryParameter(string name, string value);
    public abstract virtual IRestRequest AddQueryParameter(string name, string value, bool encode);
    public abstract virtual IRestRequest AddDecompressionMethod(DecompressionMethods decompressionMethod);
    public abstract virtual void IncreaseNumAttempts();
}
[NullableContextAttribute("1")]
public interface RestSharp.IRestResponse {
    public IRestRequest Request { get; public set; }
    public string ContentType { get; public set; }
    public long ContentLength { get; public set; }
    public string ContentEncoding { get; public set; }
    public string Content { get; public set; }
    public HttpStatusCode StatusCode { get; public set; }
    public bool IsSuccessful { get; }
    public string StatusDescription { get; public set; }
    public Byte[] RawBytes { get; public set; }
    public Uri ResponseUri { get; public set; }
    public string Server { get; public set; }
    public IList`1<RestResponseCookie> Cookies { get; }
    public IList`1<Parameter> Headers { get; }
    public ResponseStatus ResponseStatus { get; public set; }
    public string ErrorMessage { get; public set; }
    public Exception ErrorException { get; public set; }
    public Version ProtocolVersion { get; public set; }
    public abstract virtual IRestRequest get_Request();
    public abstract virtual void set_Request(IRestRequest value);
    public abstract virtual string get_ContentType();
    public abstract virtual void set_ContentType(string value);
    public abstract virtual long get_ContentLength();
    public abstract virtual void set_ContentLength(long value);
    public abstract virtual string get_ContentEncoding();
    public abstract virtual void set_ContentEncoding(string value);
    public abstract virtual string get_Content();
    public abstract virtual void set_Content(string value);
    public abstract virtual HttpStatusCode get_StatusCode();
    public abstract virtual void set_StatusCode(HttpStatusCode value);
    public abstract virtual bool get_IsSuccessful();
    public abstract virtual string get_StatusDescription();
    public abstract virtual void set_StatusDescription(string value);
    public abstract virtual Byte[] get_RawBytes();
    public abstract virtual void set_RawBytes(Byte[] value);
    public abstract virtual Uri get_ResponseUri();
    public abstract virtual void set_ResponseUri(Uri value);
    public abstract virtual string get_Server();
    public abstract virtual void set_Server(string value);
    public abstract virtual IList`1<RestResponseCookie> get_Cookies();
    public abstract virtual IList`1<Parameter> get_Headers();
    public abstract virtual ResponseStatus get_ResponseStatus();
    public abstract virtual void set_ResponseStatus(ResponseStatus value);
    public abstract virtual string get_ErrorMessage();
    public abstract virtual void set_ErrorMessage(string value);
    public abstract virtual Exception get_ErrorException();
    public abstract virtual void set_ErrorException(Exception value);
    public abstract virtual Version get_ProtocolVersion();
    public abstract virtual void set_ProtocolVersion(Version value);
}
[NullableContextAttribute("1")]
public interface RestSharp.IRestResponse`1 {
    public T Data { get; public set; }
    public abstract virtual T get_Data();
    public abstract virtual void set_Data(T value);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[GeneratedCodeAttribute("simple-json", "1.0.0")]
[EditorBrowsableAttribute("1")]
public class RestSharp.JsonArray : List`1<object> {
    public JsonArray(int capacity);
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
[GeneratedCodeAttribute("simple-json", "1.0.0")]
[EditorBrowsableAttribute("1")]
public class RestSharp.JsonObject : DynamicObject {
    private Dictionary`2<string, object> _members;
    public object Item { get; }
    public ICollection`1<string> Keys { get; }
    public ICollection`1<object> Values { get; }
    public object Item { get; public set; }
    public int Count { get; }
    public bool IsReadOnly { get; }
    public JsonObject(IEqualityComparer`1<string> comparer);
    public object get_Item(int index);
    internal static object GetAtIndex(IDictionary`2<string, object> obj, int index);
    public sealed virtual void Add(string key, object value);
    public sealed virtual bool ContainsKey(string key);
    public sealed virtual ICollection`1<string> get_Keys();
    public sealed virtual bool Remove(string key);
    public sealed virtual bool TryGetValue(string key, Object& value);
    public sealed virtual ICollection`1<object> get_Values();
    public sealed virtual object get_Item(string key);
    public sealed virtual void set_Item(string key, object value);
    public sealed virtual void Add(KeyValuePair`2<string, object> item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(KeyValuePair`2<string, object> item);
    public sealed virtual void CopyTo(KeyValuePair`2[] array, int arrayIndex);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual bool Remove(KeyValuePair`2<string, object> item);
    public sealed virtual IEnumerator`1<KeyValuePair`2<string, object>> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public virtual string ToString();
    public virtual bool TryConvert(ConvertBinder binder, Object& result);
    public virtual bool TryDeleteMember(DeleteMemberBinder binder);
    public virtual bool TryGetIndex(GetIndexBinder binder, Object[] indexes, Object& result);
    public virtual bool TryGetMember(GetMemberBinder binder, Object& result);
    public virtual bool TrySetIndex(SetIndexBinder binder, Object[] indexes, object value);
    public virtual bool TrySetMember(SetMemberBinder binder, object value);
    [IteratorStateMachineAttribute("RestSharp.JsonObject/<GetDynamicMemberNames>d__35")]
public virtual IEnumerable`1<string> GetDynamicMemberNames();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class RestSharp.JsonParameter : Parameter {
    public JsonParameter(string name, object value);
    public JsonParameter(string name, object value, string contentType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class RestSharp.JsonRequest`2 : RestRequest {
    private List`1<Action`1<IRestResponse`1<TResponse>>> _changeResponse;
    private Dictionary`2<HttpStatusCode, Func`1<TResponse>> _customResponses;
    public JsonRequest`2(string resource, TRequest request);
    public JsonRequest`2<TRequest, TResponse> ResponseForStatusCode(HttpStatusCode statusCode, TResponse response);
    public JsonRequest`2<TRequest, TResponse> ResponseForStatusCode(HttpStatusCode statusCode, Func`1<TResponse> getResponse);
    public JsonRequest`2<TRequest, TResponse> ChangeResponse(Action`1<IRestResponse`1<TResponse>> change);
    private void ApplyCustomResponse(IRestResponse`1<TResponse> response);
    internal IRestResponse`1<TResponse> UpdateResponse(IRestResponse`1<TResponse> response);
}
public enum RestSharp.Method : Enum {
    public int value__;
    public static Method GET;
    public static Method POST;
    public static Method PUT;
    public static Method DELETE;
    public static Method HEAD;
    public static Method OPTIONS;
    public static Method PATCH;
    public static Method MERGE;
    public static Method COPY;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class RestSharp.NameValuePair : object {
    public static NameValuePair Empty;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    public string Name { get; }
    public string Value { get; }
    public bool IsEmpty { get; }
    public NameValuePair(string name, string value);
    private static NameValuePair();
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public string get_Value();
    public bool get_IsEmpty();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[ObsoleteAttribute("Use Add[XXX]Parameter methods of IRestRequest instead of instantiating the Parameter class.")]
public class RestSharp.Parameter : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private ParameterType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private DataFormat <DataFormat>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContentType>k__BackingField;
    public string Name { get; public set; }
    public object Value { get; public set; }
    public ParameterType Type { get; public set; }
    public DataFormat DataFormat { get; public set; }
    public string ContentType { get; public set; }
    [NullableContextAttribute("1")]
public Parameter(string name, object value, ParameterType type);
    [NullableContextAttribute("1")]
public Parameter(string name, object value, string contentType, ParameterType type);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public object get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(object value);
    [CompilerGeneratedAttribute]
public ParameterType get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(ParameterType value);
    [CompilerGeneratedAttribute]
public DataFormat get_DataFormat();
    [CompilerGeneratedAttribute]
public void set_DataFormat(DataFormat value);
    [CompilerGeneratedAttribute]
public string get_ContentType();
    [CompilerGeneratedAttribute]
public void set_ContentType(string value);
    [NullableContextAttribute("1")]
public virtual string ToString();
    [NullableContextAttribute("1")]
public sealed virtual bool Equals(Parameter other);
    [NullableContextAttribute("1")]
public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public enum RestSharp.ParameterType : Enum {
    public int value__;
    public static ParameterType Cookie;
    public static ParameterType GetOrPost;
    public static ParameterType UrlSegment;
    public static ParameterType HttpHeader;
    public static ParameterType RequestBody;
    public static ParameterType QueryString;
    public static ParameterType QueryStringWithoutEncode;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[GeneratedCodeAttribute("simple-json", "1.0.0")]
public class RestSharp.PocoJsonSerializerStrategy : object {
    internal IDictionary`2<Type, ConstructorDelegate> ConstructorCache;
    internal IDictionary`2<Type, IDictionary`2<string, GetDelegate>> GetCache;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal IDictionary`2<Type, IDictionary`2<string, KeyValuePair`2<Type, SetDelegate>>> SetCache;
    internal static Type[] EmptyTypes;
    internal static Type[] ArrayConstructorParameterTypes;
    private static String[] Iso8601Format;
    private static PocoJsonSerializerStrategy();
    protected virtual string MapClrMemberNameToJsonFieldName(string clrFieldName);
    internal virtual ConstructorDelegate ContructorDelegateFactory(Type key);
    internal virtual IDictionary`2<string, GetDelegate> GetterValueFactory(Type type);
    internal virtual IDictionary`2<string, KeyValuePair`2<Type, SetDelegate>> SetterValueFactory(Type type);
    public virtual bool TrySerializeNonPrimitiveObject(object input, Object& output);
    public virtual object DeserializeObject(object value, Type type);
    protected virtual object SerializeEnum(Enum p);
    protected virtual bool TrySerializeKnownTypes(object input, Object& output);
    protected virtual bool TrySerializeUnknownTypes(object input, Object& output);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[GeneratedCodeAttribute("reflection-utils", "1.0.0")]
internal class RestSharp.ReflectionUtils : object {
    private static Object[] EmptyObjects;
    private static ReflectionUtils();
    public static Type GetTypeInfo(Type type);
    public static Attribute GetAttribute(MemberInfo info, Type type);
    public static Type GetGenericListElementType(Type type);
    public static Attribute GetAttribute(Type objectType, Type attributeType);
    public static Type[] GetGenericTypeArguments(Type type);
    public static bool IsTypeGeneric(Type type);
    public static bool IsTypeGenericeCollectionInterface(Type type);
    public static bool IsAssignableFrom(Type type1, Type type2);
    public static bool IsTypeDictionary(Type type);
    public static bool IsNullableType(Type type);
    public static object ToNullableType(object obj, Type nullableType);
    public static bool IsValueType(Type type);
    public static IEnumerable`1<ConstructorInfo> GetConstructors(Type type);
    public static ConstructorInfo GetConstructorInfo(Type type, Type[] argsType);
    public static IEnumerable`1<PropertyInfo> GetProperties(Type type);
    public static IEnumerable`1<FieldInfo> GetFields(Type type);
    public static MethodInfo GetGetterMethodInfo(PropertyInfo propertyInfo);
    public static MethodInfo GetSetterMethodInfo(PropertyInfo propertyInfo);
    public static ConstructorDelegate GetContructor(ConstructorInfo constructorInfo);
    public static ConstructorDelegate GetContructor(Type type, Type[] argsType);
    public static ConstructorDelegate GetConstructorByReflection(ConstructorInfo constructorInfo);
    public static ConstructorDelegate GetConstructorByReflection(Type type, Type[] argsType);
    public static ConstructorDelegate GetConstructorByExpression(ConstructorInfo constructorInfo);
    public static ConstructorDelegate GetConstructorByExpression(Type type, Type[] argsType);
    public static GetDelegate GetGetMethod(PropertyInfo propertyInfo);
    public static GetDelegate GetGetMethod(FieldInfo fieldInfo);
    public static GetDelegate GetGetMethodByReflection(PropertyInfo propertyInfo);
    public static GetDelegate GetGetMethodByReflection(FieldInfo fieldInfo);
    public static GetDelegate GetGetMethodByExpression(PropertyInfo propertyInfo);
    public static GetDelegate GetGetMethodByExpression(FieldInfo fieldInfo);
    public static SetDelegate GetSetMethod(PropertyInfo propertyInfo);
    public static SetDelegate GetSetMethod(FieldInfo fieldInfo);
    public static SetDelegate GetSetMethodByReflection(PropertyInfo propertyInfo);
    public static SetDelegate GetSetMethodByReflection(FieldInfo fieldInfo);
    public static SetDelegate GetSetMethodByExpression(PropertyInfo propertyInfo);
    public static SetDelegate GetSetMethodByExpression(FieldInfo fieldInfo);
    public static BinaryExpression Assign(Expression left, Expression right);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class RestSharp.RequestBody : object {
    [CompilerGeneratedAttribute]
private string <ContentType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Value>k__BackingField;
    public string ContentType { get; }
    public string Name { get; }
    public object Value { get; }
    [ObsoleteAttribute("The RestBody constructor will be internal in future versions")]
public RequestBody(string contentType, string name, object value);
    [CompilerGeneratedAttribute]
public string get_ContentType();
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public object get_Value();
}
public enum RestSharp.ResponseStatus : Enum {
    public int value__;
    public static ResponseStatus None;
    public static ResponseStatus Completed;
    public static ResponseStatus Error;
    public static ResponseStatus TimedOut;
    public static ResponseStatus Aborted;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class RestSharp.RestClient : object {
    private static Version Version;
    private static string DefaultUserAgent;
    private static Regex StructuredSyntaxSuffixRegex;
    private static Regex StructuredSyntaxSuffixWildcardRegex;
    private static ParameterType[] MultiParameterTypes;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, Func`1<IDeserializer>> <ContentHandlers>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<DataFormat, IRestSerializer> <Serializers>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<string, string> <Encode>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`3<string, Encoding, string> <EncodeQuery>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<string> <AcceptTypes>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Action`1<HttpWebRequest> <WebRequestConfigurator>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AutomaticDecompression>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <MaxRedirects>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private X509CertificateCollection <ClientCertificates>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private IWebProxy <Proxy>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private RequestCachePolicy <CachePolicy>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Pipelined>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <FollowRedirects>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private CookieContainer <CookieContainer>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UserAgent>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Timeout>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ReadWriteTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseSynchronizationContext>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private IAuthenticator <Authenticator>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private Uri <BaseUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private Encoding <Encoding>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PreAuthenticate>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ThrowOnDeserializationError>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <FailOnDeserializationError>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ThrowOnAnyError>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UnsafeAuthenticatedConnectionSharing>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <ConnectionGroupName>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private RemoteCertificateValidationCallback <RemoteCertificateValidationCallback>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<Parameter> <DefaultParameters>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <BaseHost>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowMultipleDefaultParametersWithSameName>k__BackingField;
    private IDictionary`2<string, Func`1<IDeserializer>> ContentHandlers { get; }
    internal IDictionary`2<DataFormat, IRestSerializer> Serializers { get; }
    private Func`2<string, string> Encode { get; private set; }
    private Func`3<string, Encoding, string> EncodeQuery { get; private set; }
    private IList`1<string> AcceptTypes { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Action`1<HttpWebRequest> WebRequestConfigurator { get; private set; }
    public bool AutomaticDecompression { get; public set; }
    public Nullable`1<int> MaxRedirects { get; public set; }
    [NullableAttribute("2")]
public X509CertificateCollection ClientCertificates { get; public set; }
    [NullableAttribute("2")]
public IWebProxy Proxy { get; public set; }
    [NullableAttribute("2")]
public RequestCachePolicy CachePolicy { get; public set; }
    public bool Pipelined { get; public set; }
    public bool FollowRedirects { get; public set; }
    [NullableAttribute("2")]
public CookieContainer CookieContainer { get; public set; }
    public string UserAgent { get; public set; }
    public int Timeout { get; public set; }
    public int ReadWriteTimeout { get; public set; }
    public bool UseSynchronizationContext { get; public set; }
    [NullableAttribute("2")]
public IAuthenticator Authenticator { get; public set; }
    [NullableAttribute("2")]
public Uri BaseUrl { get; public set; }
    public Encoding Encoding { get; public set; }
    public bool PreAuthenticate { get; public set; }
    public bool ThrowOnDeserializationError { get; public set; }
    public bool FailOnDeserializationError { get; public set; }
    public bool ThrowOnAnyError { get; public set; }
    public bool UnsafeAuthenticatedConnectionSharing { get; public set; }
    [NullableAttribute("2")]
public string ConnectionGroupName { get; public set; }
    [NullableAttribute("2")]
public RemoteCertificateValidationCallback RemoteCertificateValidationCallback { get; public set; }
    public IList`1<Parameter> DefaultParameters { get; }
    [NullableAttribute("2")]
public string BaseHost { get; public set; }
    public bool AllowMultipleDefaultParametersWithSameName { get; public set; }
    public RestClient(Uri baseUrl);
    public RestClient(string baseUrl);
    private static RestClient();
    private static HttpWebRequest DoAsGetAsync(IHttp http, Action`1<HttpResponse> responseCb, string method);
    private static HttpWebRequest DoAsPostAsync(IHttp http, Action`1<HttpResponse> responseCb, string method);
    [ObsoleteAttribute("Use ExecuteAsync instead")]
public virtual Task`1<IRestResponse> ExecuteTaskAsync(IRestRequest request, CancellationToken token, Method httpMethod);
    [ObsoleteAttribute("This method will be removed soon in favour of the proper async call")]
public virtual RestRequestAsyncHandle ExecuteAsync(IRestRequest request, Action`2<IRestResponse, RestRequestAsyncHandle> callback, Method httpMethod);
    [ObsoleteAttribute("This method will be removed soon in favour of the proper async call")]
public virtual RestRequestAsyncHandle ExecuteAsync(IRestRequest request, Action`2<IRestResponse, RestRequestAsyncHandle> callback);
    [ObsoleteAttribute("This method will be removed soon in favour of the proper async call")]
public virtual RestRequestAsyncHandle ExecuteAsyncGet(IRestRequest request, Action`2<IRestResponse, RestRequestAsyncHandle> callback, string httpMethod);
    [ObsoleteAttribute("This method will be removed soon in favour of the proper async call")]
public virtual RestRequestAsyncHandle ExecuteAsyncPost(IRestRequest request, Action`2<IRestResponse, RestRequestAsyncHandle> callback, string httpMethod);
    [ObsoleteAttribute("This method will be removed soon in favour of the proper async call")]
public virtual RestRequestAsyncHandle ExecuteAsync(IRestRequest request, Action`2<IRestResponse`1<T>, RestRequestAsyncHandle> callback, Method httpMethod);
    [ObsoleteAttribute("This method will be removed soon in favour of the proper async call")]
public virtual RestRequestAsyncHandle ExecuteAsync(IRestRequest request, Action`2<IRestResponse`1<T>, RestRequestAsyncHandle> callback);
    [ObsoleteAttribute("This method will be removed soon in favour of the proper async call")]
public virtual RestRequestAsyncHandle ExecuteAsyncGet(IRestRequest request, Action`2<IRestResponse`1<T>, RestRequestAsyncHandle> callback, string httpMethod);
    [ObsoleteAttribute("This method will be removed soon in favour of the proper async call")]
public virtual RestRequestAsyncHandle ExecuteAsyncPost(IRestRequest request, Action`2<IRestResponse`1<T>, RestRequestAsyncHandle> callback, string httpMethod);
    [ObsoleteAttribute("This method will be renamed to ExecuteGetAsync soon")]
public virtual Task`1<IRestResponse`1<T>> ExecuteGetTaskAsync(IRestRequest request);
    [ObsoleteAttribute("Use ExecuteAsync instead")]
public virtual Task`1<IRestResponse> ExecuteTaskAsync(IRestRequest request, CancellationToken token);
    [ObsoleteAttribute("Use ExecuteAsync instead")]
public virtual Task`1<IRestResponse`1<T>> ExecuteTaskAsync(IRestRequest request, CancellationToken token, Method httpMethod);
    [ObsoleteAttribute("Use ExecuteGetAsync instead")]
public virtual Task`1<IRestResponse`1<T>> ExecuteGetTaskAsync(IRestRequest request, CancellationToken token);
    [ObsoleteAttribute("Use ExecutePostAsync instead")]
public virtual Task`1<IRestResponse`1<T>> ExecutePostTaskAsync(IRestRequest request, CancellationToken token);
    [ObsoleteAttribute("Use ExecutePostAsync instead")]
public virtual Task`1<IRestResponse`1<T>> ExecutePostTaskAsync(IRestRequest request);
    [ObsoleteAttribute("Please use ExecuteAsync instead")]
public virtual Task`1<IRestResponse`1<T>> ExecuteTaskAsync(IRestRequest request, Method httpMethod);
    [ObsoleteAttribute("Please use ExecuteAsync instead")]
public virtual Task`1<IRestResponse`1<T>> ExecuteTaskAsync(IRestRequest request);
    [ObsoleteAttribute("Please use ExecuteAsync instead")]
public virtual Task`1<IRestResponse`1<T>> ExecuteTaskAsync(IRestRequest request, CancellationToken token);
    [ObsoleteAttribute("This method will be renamed to ExecutePostAsync soon")]
public virtual Task`1<IRestResponse> ExecutePostTaskAsync(IRestRequest request, CancellationToken token);
    [ObsoleteAttribute("Use ExecutePostAsync instead")]
public virtual Task`1<IRestResponse> ExecutePostTaskAsync(IRestRequest request);
    [ObsoleteAttribute("Use ExecuteAsync instead")]
public virtual Task`1<IRestResponse> ExecuteTaskAsync(IRestRequest request);
    [ObsoleteAttribute("Use ExecuteGetAsync instead")]
public virtual Task`1<IRestResponse> ExecuteGetTaskAsync(IRestRequest request);
    [ObsoleteAttribute("Use ExecuteGetAsync instead")]
public virtual Task`1<IRestResponse> ExecuteGetTaskAsync(IRestRequest request, CancellationToken token);
    public sealed virtual Task`1<IRestResponse`1<T>> ExecuteGetAsync(IRestRequest request, CancellationToken cancellationToken);
    public sealed virtual Task`1<IRestResponse`1<T>> ExecutePostAsync(IRestRequest request, CancellationToken cancellationToken);
    public sealed virtual Task`1<IRestResponse> ExecuteGetAsync(IRestRequest request, CancellationToken cancellationToken);
    public sealed virtual Task`1<IRestResponse> ExecutePostAsync(IRestRequest request, CancellationToken cancellationToken);
    public sealed virtual Task`1<IRestResponse`1<T>> ExecuteAsync(IRestRequest request, CancellationToken cancellationToken);
    public sealed virtual Task`1<IRestResponse> ExecuteAsync(IRestRequest request, Method httpMethod, CancellationToken cancellationToken);
    public sealed virtual Task`1<IRestResponse`1<T>> ExecuteAsync(IRestRequest request, Method httpMethod, CancellationToken cancellationToken);
    public sealed virtual Task`1<IRestResponse> ExecuteAsync(IRestRequest request, CancellationToken token);
    private RestRequestAsyncHandle ExecuteAsync(IRestRequest request, Action`2<IRestResponse, RestRequestAsyncHandle> callback, string httpMethod, Func`4<IHttp, Action`1<HttpResponse>, string, HttpWebRequest> getWebRequest);
    private void DeserializeResponse(IRestRequest request, Action`2<IRestResponse`1<T>, RestRequestAsyncHandle> callback, IRestResponse response, RestRequestAsyncHandle asyncHandle);
    [CompilerGeneratedAttribute]
private IDictionary`2<string, Func`1<IDeserializer>> get_ContentHandlers();
    [CompilerGeneratedAttribute]
internal IDictionary`2<DataFormat, IRestSerializer> get_Serializers();
    [CompilerGeneratedAttribute]
private Func`2<string, string> get_Encode();
    [CompilerGeneratedAttribute]
private void set_Encode(Func`2<string, string> value);
    [CompilerGeneratedAttribute]
private Func`3<string, Encoding, string> get_EncodeQuery();
    [CompilerGeneratedAttribute]
private void set_EncodeQuery(Func`3<string, Encoding, string> value);
    [CompilerGeneratedAttribute]
private IList`1<string> get_AcceptTypes();
    [CompilerGeneratedAttribute]
private Action`1<HttpWebRequest> get_WebRequestConfigurator();
    [CompilerGeneratedAttribute]
private void set_WebRequestConfigurator(Action`1<HttpWebRequest> value);
    [ObsoleteAttribute("Use the overload that accepts the delegate factory")]
public sealed virtual IRestClient UseSerializer(IRestSerializer serializer);
    public sealed virtual IRestClient UseUrlEncoder(Func`2<string, string> encoder);
    public sealed virtual IRestClient UseQueryEncoder(Func`3<string, Encoding, string> queryEncoder);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_AutomaticDecompression();
    [CompilerGeneratedAttribute]
public sealed virtual void set_AutomaticDecompression(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<int> get_MaxRedirects();
    [CompilerGeneratedAttribute]
public sealed virtual void set_MaxRedirects(Nullable`1<int> value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual X509CertificateCollection get_ClientCertificates();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual void set_ClientCertificates(X509CertificateCollection value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual IWebProxy get_Proxy();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual void set_Proxy(IWebProxy value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual RequestCachePolicy get_CachePolicy();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual void set_CachePolicy(RequestCachePolicy value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_Pipelined();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Pipelined(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_FollowRedirects();
    [CompilerGeneratedAttribute]
public sealed virtual void set_FollowRedirects(bool value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual CookieContainer get_CookieContainer();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual void set_CookieContainer(CookieContainer value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_UserAgent();
    [CompilerGeneratedAttribute]
public sealed virtual void set_UserAgent(string value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_Timeout();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Timeout(int value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_ReadWriteTimeout();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ReadWriteTimeout(int value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_UseSynchronizationContext();
    [CompilerGeneratedAttribute]
public sealed virtual void set_UseSynchronizationContext(bool value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual IAuthenticator get_Authenticator();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual void set_Authenticator(IAuthenticator value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual Uri get_BaseUrl();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual void set_BaseUrl(Uri value);
    [CompilerGeneratedAttribute]
public sealed virtual Encoding get_Encoding();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Encoding(Encoding value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_PreAuthenticate();
    [CompilerGeneratedAttribute]
public sealed virtual void set_PreAuthenticate(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_ThrowOnDeserializationError();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ThrowOnDeserializationError(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_FailOnDeserializationError();
    [CompilerGeneratedAttribute]
public sealed virtual void set_FailOnDeserializationError(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_ThrowOnAnyError();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ThrowOnAnyError(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_UnsafeAuthenticatedConnectionSharing();
    [CompilerGeneratedAttribute]
public sealed virtual void set_UnsafeAuthenticatedConnectionSharing(bool value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual string get_ConnectionGroupName();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual void set_ConnectionGroupName(string value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual RemoteCertificateValidationCallback get_RemoteCertificateValidationCallback();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual void set_RemoteCertificateValidationCallback(RemoteCertificateValidationCallback value);
    [CompilerGeneratedAttribute]
public sealed virtual IList`1<Parameter> get_DefaultParameters();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual string get_BaseHost();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual void set_BaseHost(string value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_AllowMultipleDefaultParametersWithSameName();
    [CompilerGeneratedAttribute]
public sealed virtual void set_AllowMultipleDefaultParametersWithSameName(bool value);
    public sealed virtual void AddHandler(string contentType, Func`1<IDeserializer> deserializerFactory);
    [ObsoleteAttribute("Use the overload that accepts a factory delegate")]
public sealed virtual void AddHandler(string contentType, IDeserializer deserializer);
    public sealed virtual void RemoveHandler(string contentType);
    public sealed virtual void ClearHandlers();
    public sealed virtual IRestResponse`1<T> Deserialize(IRestResponse response);
    public sealed virtual void ConfigureWebRequest(Action`1<HttpWebRequest> configurator);
    public sealed virtual Uri BuildUri(IRestRequest request);
    private sealed virtual override string RestSharp.IRestClient.BuildUriWithoutQueryParameters(IRestRequest request);
    public sealed virtual IRestClient UseSerializer(Func`1<IRestSerializer> serializerFactory);
    public sealed virtual IRestClient UseSerializer();
    private void AddHandler(Func`1<IDeserializer> deserializerFactory, String[] contentTypes);
    private void DoBuildUriValidations(IRestRequest request);
    private UrlSegmentParamsValues GetUrlSegmentParamsValues(IRestRequest request);
    private static string MergeBaseUrlAndResource(Uri baseUrl, string resource);
    private string ApplyQueryStringParamsValuesToUri(string mergedUri, IRestRequest request);
    private IEnumerable`1<Parameter> GetDefaultQueryStringParameters(IRestRequest request);
    private static IEnumerable`1<Parameter> GetQueryStringParameters(IRestRequest request);
    private Func`1<IDeserializer> GetHandler(string contentType);
    private void AuthenticateIfNeeded(IRestRequest request);
    private string EncodeParameters(IEnumerable`1<Parameter> parameters, Encoding encoding);
    private string EncodeParameter(Parameter parameter, Encoding encoding);
    private IHttp ConfigureHttp(IRestRequest request);
    private IRestResponse`1<T> Deserialize(IRestRequest request, IRestResponse raw);
    private static bool IsWildcardStructuredSuffixSyntax(string contentType);
    public sealed virtual Byte[] DownloadData(IRestRequest request);
    public sealed virtual Byte[] DownloadData(IRestRequest request, bool throwOnError);
    public virtual IRestResponse Execute(IRestRequest request, Method httpMethod);
    public virtual IRestResponse Execute(IRestRequest request);
    public sealed virtual IRestResponse ExecuteAsGet(IRestRequest request, string httpMethod);
    public sealed virtual IRestResponse ExecuteAsPost(IRestRequest request, string httpMethod);
    public virtual IRestResponse`1<T> Execute(IRestRequest request, Method httpMethod);
    public virtual IRestResponse`1<T> Execute(IRestRequest request);
    public sealed virtual IRestResponse`1<T> ExecuteAsGet(IRestRequest request, string httpMethod);
    public sealed virtual IRestResponse`1<T> ExecuteAsPost(IRestRequest request, string httpMethod);
    private IRestResponse Execute(IRestRequest request, string httpMethod, Func`3<IHttp, string, HttpResponse> getResponse);
    private static HttpResponse DoExecuteAsGet(IHttp http, string method);
    private static HttpResponse DoExecuteAsPost(IHttp http, string method);
    [CompilerGeneratedAttribute]
internal static string <EncodeParameter>g__StringOrEmpty|186_0(object value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class RestSharp.RestClientExtensions : object {
    [ExtensionAttribute]
[ObsoleteAttribute("Use ExecuteAsync that returns Task")]
public static RestRequestAsyncHandle ExecuteAsync(IRestClient client, IRestRequest request, Action`1<IRestResponse> callback);
    [ExtensionAttribute]
[ObsoleteAttribute("Use ExecuteAsync that returns Task")]
public static RestRequestAsyncHandle ExecuteAsync(IRestClient client, IRestRequest request, Action`1<IRestResponse`1<T>> callback);
    [ExtensionAttribute]
[ObsoleteAttribute("Use GetAsync that returns Task")]
public static RestRequestAsyncHandle GetAsync(IRestClient client, IRestRequest request, Action`2<IRestResponse`1<T>, RestRequestAsyncHandle> callback);
    [ExtensionAttribute]
[ObsoleteAttribute("Use PostAsync that returns Task")]
public static RestRequestAsyncHandle PostAsync(IRestClient client, IRestRequest request, Action`2<IRestResponse`1<T>, RestRequestAsyncHandle> callback);
    [ExtensionAttribute]
[ObsoleteAttribute("Use PutAsync that returns Task")]
public static RestRequestAsyncHandle PutAsync(IRestClient client, IRestRequest request, Action`2<IRestResponse`1<T>, RestRequestAsyncHandle> callback);
    [ExtensionAttribute]
[ObsoleteAttribute("Use HeadAsync that returns Task")]
public static RestRequestAsyncHandle HeadAsync(IRestClient client, IRestRequest request, Action`2<IRestResponse`1<T>, RestRequestAsyncHandle> callback);
    [ExtensionAttribute]
[ObsoleteAttribute("Use OptionsAsync that returns Task")]
public static RestRequestAsyncHandle OptionsAsync(IRestClient client, IRestRequest request, Action`2<IRestResponse`1<T>, RestRequestAsyncHandle> callback);
    [ExtensionAttribute]
[ObsoleteAttribute("Use PatchAsync that returns Task")]
public static RestRequestAsyncHandle PatchAsync(IRestClient client, IRestRequest request, Action`2<IRestResponse`1<T>, RestRequestAsyncHandle> callback);
    [ExtensionAttribute]
[ObsoleteAttribute("Use DeleteAsync that returns Task")]
public static RestRequestAsyncHandle DeleteAsync(IRestClient client, IRestRequest request, Action`2<IRestResponse`1<T>, RestRequestAsyncHandle> callback);
    [ExtensionAttribute]
[ObsoleteAttribute("Use GetAsync that returns Task")]
public static RestRequestAsyncHandle GetAsync(IRestClient client, IRestRequest request, Action`2<IRestResponse, RestRequestAsyncHandle> callback);
    [ExtensionAttribute]
[ObsoleteAttribute("Use PostAsync that returns Task")]
public static RestRequestAsyncHandle PostAsync(IRestClient client, IRestRequest request, Action`2<IRestResponse, RestRequestAsyncHandle> callback);
    [ExtensionAttribute]
[ObsoleteAttribute("Use PutAsync that returns Task")]
public static RestRequestAsyncHandle PutAsync(IRestClient client, IRestRequest request, Action`2<IRestResponse, RestRequestAsyncHandle> callback);
    [ExtensionAttribute]
[ObsoleteAttribute("Use HeadAsync that returns Task")]
public static RestRequestAsyncHandle HeadAsync(IRestClient client, IRestRequest request, Action`2<IRestResponse, RestRequestAsyncHandle> callback);
    [ExtensionAttribute]
[ObsoleteAttribute("Use OptionsAsync that returns Task")]
public static RestRequestAsyncHandle OptionsAsync(IRestClient client, IRestRequest request, Action`2<IRestResponse, RestRequestAsyncHandle> callback);
    [ExtensionAttribute]
[ObsoleteAttribute("Use PatchAsync that returns Task")]
public static RestRequestAsyncHandle PatchAsync(IRestClient client, IRestRequest request, Action`2<IRestResponse, RestRequestAsyncHandle> callback);
    [ExtensionAttribute]
[ObsoleteAttribute("Use DeleteAsync that returns Task")]
public static RestRequestAsyncHandle DeleteAsync(IRestClient client, IRestRequest request, Action`2<IRestResponse, RestRequestAsyncHandle> callback);
    [ExtensionAttribute]
[ObsoleteAttribute("Use GetAsync")]
public static Task`1<T> GetTaskAsync(IRestClient client, IRestRequest request);
    [ExtensionAttribute]
[ObsoleteAttribute("Use PostAsync")]
public static Task`1<T> PostTaskAsync(IRestClient client, IRestRequest request);
    [ExtensionAttribute]
[ObsoleteAttribute("Use PutAsync")]
public static Task`1<T> PutTaskAsync(IRestClient client, IRestRequest request);
    [ExtensionAttribute]
[ObsoleteAttribute("Use HeadAsync")]
public static Task`1<T> HeadTaskAsync(IRestClient client, IRestRequest request);
    [ExtensionAttribute]
[ObsoleteAttribute("Use OptionsAsync")]
public static Task`1<T> OptionsTaskAsync(IRestClient client, IRestRequest request);
    [ExtensionAttribute]
[ObsoleteAttribute("Use PatchAsync")]
public static Task`1<T> PatchTaskAsync(IRestClient client, IRestRequest request);
    [ExtensionAttribute]
[ObsoleteAttribute("Use DeleteAsync")]
public static Task`1<T> DeleteTaskAsync(IRestClient client, IRestRequest request);
    [ExtensionAttribute]
public static IRestResponse`1<object> ExecuteDynamic(IRestClient client, IRestRequest request);
    [AsyncStateMachineAttribute("RestSharp.RestClientExtensions/<GetAsync>d__24`1")]
[ExtensionAttribute]
public static Task`1<T> GetAsync(IRestClient client, IRestRequest request, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("RestSharp.RestClientExtensions/<PostAsync>d__25`1")]
[ExtensionAttribute]
public static Task`1<T> PostAsync(IRestClient client, IRestRequest request, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("RestSharp.RestClientExtensions/<PutAsync>d__26`1")]
[ExtensionAttribute]
public static Task`1<T> PutAsync(IRestClient client, IRestRequest request, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("RestSharp.RestClientExtensions/<HeadAsync>d__27`1")]
[ExtensionAttribute]
public static Task`1<T> HeadAsync(IRestClient client, IRestRequest request, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("RestSharp.RestClientExtensions/<OptionsAsync>d__28`1")]
[ExtensionAttribute]
public static Task`1<T> OptionsAsync(IRestClient client, IRestRequest request, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("RestSharp.RestClientExtensions/<PatchAsync>d__29`1")]
[ExtensionAttribute]
public static Task`1<T> PatchAsync(IRestClient client, IRestRequest request, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("RestSharp.RestClientExtensions/<DeleteAsync>d__30`1")]
[ExtensionAttribute]
public static Task`1<T> DeleteAsync(IRestClient client, IRestRequest request, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static IRestResponse`1<T> Get(IRestClient client, IRestRequest request);
    [ExtensionAttribute]
public static IRestResponse`1<T> Post(IRestClient client, IRestRequest request);
    [ExtensionAttribute]
public static IRestResponse`1<T> Put(IRestClient client, IRestRequest request);
    [ExtensionAttribute]
public static IRestResponse`1<T> Head(IRestClient client, IRestRequest request);
    [ExtensionAttribute]
public static IRestResponse`1<T> Options(IRestClient client, IRestRequest request);
    [ExtensionAttribute]
public static IRestResponse`1<T> Patch(IRestClient client, IRestRequest request);
    [ExtensionAttribute]
public static IRestResponse`1<T> Delete(IRestClient client, IRestRequest request);
    [ExtensionAttribute]
public static IRestResponse Get(IRestClient client, IRestRequest request);
    [ExtensionAttribute]
public static IRestResponse Post(IRestClient client, IRestRequest request);
    [ExtensionAttribute]
public static IRestResponse Put(IRestClient client, IRestRequest request);
    [ExtensionAttribute]
public static IRestResponse Head(IRestClient client, IRestRequest request);
    [ExtensionAttribute]
public static IRestResponse Options(IRestClient client, IRestRequest request);
    [ExtensionAttribute]
public static IRestResponse Patch(IRestClient client, IRestRequest request);
    [ExtensionAttribute]
public static IRestResponse Delete(IRestClient client, IRestRequest request);
    [ExtensionAttribute]
public static IRestClient AddDefaultParameter(IRestClient restClient, Parameter p);
    [ExtensionAttribute]
public static IRestClient AddOrUpdateDefaultParameter(IRestClient restClient, Parameter p);
    [ExtensionAttribute]
public static IRestClient RemoveDefaultParameter(IRestClient restClient, string name);
    [ExtensionAttribute]
public static IRestClient AddDefaultParameter(IRestClient restClient, string name, object value);
    [ExtensionAttribute]
public static IRestClient AddDefaultParameter(IRestClient restClient, string name, object value, ParameterType type);
    [ExtensionAttribute]
public static IRestClient AddDefaultHeader(IRestClient restClient, string name, string value);
    [ExtensionAttribute]
public static IRestClient AddDefaultHeaders(IRestClient restClient, Dictionary`2<string, string> headers);
    [ExtensionAttribute]
public static IRestClient AddDefaultUrlSegment(IRestClient restClient, string name, string value);
    [ExtensionAttribute]
public static IRestClient AddDefaultQueryParameter(IRestClient restClient, string name, string value);
    private static void ThrowIfError(IRestResponse response);
    [ExtensionAttribute]
public static RestClient UseJson(RestClient client);
    [ExtensionAttribute]
public static RestClient UseXml(RestClient client);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class RestSharp.RestClientJsonRequest : object {
    [ExtensionAttribute]
public static IRestResponse`1<TResponse> Get(IRestClient client, JsonRequest`2<TRequest, TResponse> request);
    [ExtensionAttribute]
public static IRestResponse`1<TResponse> Post(IRestClient client, JsonRequest`2<TRequest, TResponse> request);
    [ExtensionAttribute]
public static IRestResponse`1<TResponse> Put(IRestClient client, JsonRequest`2<TRequest, TResponse> request);
    [ExtensionAttribute]
public static IRestResponse`1<TResponse> Head(IRestClient client, JsonRequest`2<TRequest, TResponse> request);
    [ExtensionAttribute]
public static IRestResponse`1<TResponse> Options(IRestClient client, JsonRequest`2<TRequest, TResponse> request);
    [ExtensionAttribute]
public static IRestResponse`1<TResponse> Patch(IRestClient client, JsonRequest`2<TRequest, TResponse> request);
    [ExtensionAttribute]
public static IRestResponse`1<TResponse> Delete(IRestClient client, JsonRequest`2<TRequest, TResponse> request);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class RestSharp.RestRequest : object {
    private static Regex PortSplitRegex;
    private IList`1<DecompressionMethods> _allowedDecompressionMethods;
    private Action`2<Stream, IHttpResponse> _advancedResponseWriter;
    private Action`1<Stream> _responseWriter;
    [CompilerGeneratedAttribute]
private bool <AlwaysMultipartFormData>k__BackingField;
    [CompilerGeneratedAttribute]
private ISerializer <JsonSerializer>k__BackingField;
    [CompilerGeneratedAttribute]
private IXmlSerializer <XmlSerializer>k__BackingField;
    [CompilerGeneratedAttribute]
private RequestBody <Body>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseDefaultCredentials>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Parameter> <Parameters>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<FileParameter> <Files>k__BackingField;
    [CompilerGeneratedAttribute]
private Method <Method>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Resource>k__BackingField;
    [CompilerGeneratedAttribute]
private DataFormat <RequestFormat>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RootElement>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<IRestResponse> <OnBeforeDeserialization>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<IHttp> <OnBeforeRequest>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DateFormat>k__BackingField;
    [CompilerGeneratedAttribute]
private string <XmlNamespace>k__BackingField;
    [CompilerGeneratedAttribute]
private ICredentials <Credentials>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Timeout>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ReadWriteTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Attempts>k__BackingField;
    public IList`1<DecompressionMethods> AllowedDecompressionMethods { get; }
    public bool AlwaysMultipartFormData { get; public set; }
    public ISerializer JsonSerializer { get; public set; }
    public IXmlSerializer XmlSerializer { get; public set; }
    public RequestBody Body { get; public set; }
    public Action`1<Stream> ResponseWriter { get; public set; }
    public Action`2<Stream, IHttpResponse> AdvancedResponseWriter { get; public set; }
    public bool UseDefaultCredentials { get; public set; }
    public List`1<Parameter> Parameters { get; }
    public List`1<FileParameter> Files { get; }
    public Method Method { get; public set; }
    public string Resource { get; public set; }
    public DataFormat RequestFormat { get; public set; }
    [ObsoleteAttribute("Add custom content handler instead. This property will be removed.")]
public string RootElement { get; public set; }
    public Action`1<IRestResponse> OnBeforeDeserialization { get; public set; }
    public Action`1<IHttp> OnBeforeRequest { get; public set; }
    [ObsoleteAttribute("Add custom content handler instead. This property will be removed.")]
public string DateFormat { get; public set; }
    [ObsoleteAttribute("Add custom content handler instead. This property will be removed.")]
public string XmlNamespace { get; public set; }
    public ICredentials Credentials { get; public set; }
    public int Timeout { get; public set; }
    public int ReadWriteTimeout { get; public set; }
    public int Attempts { get; private set; }
    public RestRequest(Method method);
    public RestRequest(string resource, Method method);
    public RestRequest(string resource, DataFormat dataFormat);
    public RestRequest(string resource);
    public RestRequest(string resource, Method method, DataFormat dataFormat);
    public RestRequest(Uri resource, Method method, DataFormat dataFormat);
    public RestRequest(Uri resource, Method method);
    public RestRequest(Uri resource);
    private static RestRequest();
    public sealed virtual IList`1<DecompressionMethods> get_AllowedDecompressionMethods();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_AlwaysMultipartFormData();
    [CompilerGeneratedAttribute]
public sealed virtual void set_AlwaysMultipartFormData(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual ISerializer get_JsonSerializer();
    [CompilerGeneratedAttribute]
public sealed virtual void set_JsonSerializer(ISerializer value);
    [CompilerGeneratedAttribute]
public sealed virtual IXmlSerializer get_XmlSerializer();
    [CompilerGeneratedAttribute]
public sealed virtual void set_XmlSerializer(IXmlSerializer value);
    [CompilerGeneratedAttribute]
public sealed virtual RequestBody get_Body();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Body(RequestBody value);
    public sealed virtual Action`1<Stream> get_ResponseWriter();
    public sealed virtual void set_ResponseWriter(Action`1<Stream> value);
    public sealed virtual Action`2<Stream, IHttpResponse> get_AdvancedResponseWriter();
    public sealed virtual void set_AdvancedResponseWriter(Action`2<Stream, IHttpResponse> value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_UseDefaultCredentials();
    [CompilerGeneratedAttribute]
public sealed virtual void set_UseDefaultCredentials(bool value);
    public sealed virtual IRestRequest AddFile(string name, string path, string contentType);
    public sealed virtual IRestRequest AddFile(string name, Byte[] bytes, string fileName, string contentType);
    public sealed virtual IRestRequest AddFile(string name, Action`1<Stream> writer, string fileName, long contentLength, string contentType);
    public sealed virtual IRestRequest AddFileBytes(string name, Byte[] bytes, string filename, string contentType);
    [ObsoleteAttribute("Use AddXmlBody")]
public sealed virtual IRestRequest AddBody(object obj, string xmlNamespace);
    [ObsoleteAttribute("Use AddXmlBody or AddJsonBody")]
public sealed virtual IRestRequest AddBody(object obj);
    public sealed virtual IRestRequest AddJsonBody(object obj);
    public sealed virtual IRestRequest AddJsonBody(object obj, string contentType);
    public sealed virtual IRestRequest AddXmlBody(object obj);
    public sealed virtual IRestRequest AddXmlBody(object obj, string xmlNamespace);
    public sealed virtual IRestRequest AddObject(object obj, String[] includedProperties);
    public sealed virtual IRestRequest AddObject(object obj);
    public sealed virtual IRestRequest AddParameter(Parameter p);
    public sealed virtual IRestRequest AddParameter(string name, object value);
    public sealed virtual IRestRequest AddParameter(string name, object value, ParameterType type);
    public sealed virtual IRestRequest AddParameter(string name, object value, string contentType, ParameterType type);
    public sealed virtual IRestRequest AddOrUpdateParameter(Parameter parameter);
    public sealed virtual IRestRequest AddOrUpdateParameters(IEnumerable`1<Parameter> parameters);
    public sealed virtual IRestRequest AddOrUpdateParameter(string name, object value);
    public sealed virtual IRestRequest AddOrUpdateParameter(string name, object value, ParameterType type);
    public sealed virtual IRestRequest AddOrUpdateParameter(string name, object value, string contentType, ParameterType type);
    public sealed virtual IRestRequest AddHeader(string name, string value);
    public sealed virtual IRestRequest AddHeaders(ICollection`1<KeyValuePair`2<string, string>> headers);
    public sealed virtual IRestRequest AddCookie(string name, string value);
    public sealed virtual IRestRequest AddUrlSegment(string name, string value);
    public sealed virtual IRestRequest AddQueryParameter(string name, string value);
    public sealed virtual IRestRequest AddQueryParameter(string name, string value, bool encode);
    public sealed virtual IRestRequest AddDecompressionMethod(DecompressionMethods decompressionMethod);
    [CompilerGeneratedAttribute]
public sealed virtual List`1<Parameter> get_Parameters();
    [CompilerGeneratedAttribute]
public sealed virtual List`1<FileParameter> get_Files();
    [CompilerGeneratedAttribute]
public sealed virtual Method get_Method();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Method(Method value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Resource();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Resource(string value);
    [CompilerGeneratedAttribute]
public sealed virtual DataFormat get_RequestFormat();
    [CompilerGeneratedAttribute]
public sealed virtual void set_RequestFormat(DataFormat value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_RootElement();
    [CompilerGeneratedAttribute]
public sealed virtual void set_RootElement(string value);
    [CompilerGeneratedAttribute]
public sealed virtual Action`1<IRestResponse> get_OnBeforeDeserialization();
    [CompilerGeneratedAttribute]
public sealed virtual void set_OnBeforeDeserialization(Action`1<IRestResponse> value);
    [CompilerGeneratedAttribute]
public sealed virtual Action`1<IHttp> get_OnBeforeRequest();
    [CompilerGeneratedAttribute]
public sealed virtual void set_OnBeforeRequest(Action`1<IHttp> value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_DateFormat();
    [CompilerGeneratedAttribute]
public sealed virtual void set_DateFormat(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_XmlNamespace();
    [CompilerGeneratedAttribute]
public sealed virtual void set_XmlNamespace(string value);
    [CompilerGeneratedAttribute]
public sealed virtual ICredentials get_Credentials();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Credentials(ICredentials value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_Timeout();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Timeout(int value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_ReadWriteTimeout();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ReadWriteTimeout(int value);
    public sealed virtual void IncreaseNumAttempts();
    [CompilerGeneratedAttribute]
public sealed virtual int get_Attempts();
    [CompilerGeneratedAttribute]
private void set_Attempts(int value);
    public sealed virtual IRestRequest AddUrlSegment(string name, object value);
    private IRestRequest AddFile(FileParameter file);
    [CompilerGeneratedAttribute]
internal static IEnumerable`1<NameValuePair> <.ctor>g__ParseQuery|9_0(string query);
    [CompilerGeneratedAttribute]
internal static bool <AddObject>g__IsAllowedProperty|51_0(string propertyName, <>c__DisplayClass51_0& );
    [CompilerGeneratedAttribute]
internal static bool <AddHeader>g__InvalidHost|62_0(string host);
}
public class RestSharp.RestRequestAsyncHandle : object {
    [NullableAttribute("1")]
public HttpWebRequest WebRequest;
    public void Abort();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class RestSharp.RestRequestExtensions : object {
    [ExtensionAttribute]
internal static void SerializeRequestBody(IRestRequest request, IDictionary`2<DataFormat, IRestSerializer> restSerializers, ISerializer[] serializers);
    [ExtensionAttribute]
internal static void AddBody(IHttp http, RequestBody requestBody);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DebuggerDisplayAttribute("{DebuggerDisplay()}")]
public class RestSharp.RestResponse : RestResponseBase {
    private RestResponse SetHeaders(IEnumerable`1<HttpHeader> headers);
    private RestResponse SetCookies(IEnumerable`1<HttpCookie> cookies);
    internal static RestResponse FromHttpResponse(IHttpResponse httpResponse, IRestRequest request);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DebuggerDisplayAttribute("{DebuggerDisplay()}")]
public class RestSharp.RestResponse`1 : RestResponseBase {
    [CompilerGeneratedAttribute]
private T <Data>k__BackingField;
    public T Data { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual T get_Data();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Data(T value);
    public static RestResponse`1<T> op_Explicit(RestResponse response);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DebuggerDisplayAttribute("{DebuggerDisplay()}")]
public abstract class RestSharp.RestResponseBase : object {
    private string _content;
    [CompilerGeneratedAttribute]
private IRestRequest <Request>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContentType>k__BackingField;
    [CompilerGeneratedAttribute]
private long <ContentLength>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContentEncoding>k__BackingField;
    [CompilerGeneratedAttribute]
private HttpStatusCode <StatusCode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StatusDescription>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <RawBytes>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <ResponseUri>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Server>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<RestResponseCookie> <Cookies>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<Parameter> <Headers>k__BackingField;
    [CompilerGeneratedAttribute]
private ResponseStatus <ResponseStatus>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ErrorMessage>k__BackingField;
    [CompilerGeneratedAttribute]
private Exception <ErrorException>k__BackingField;
    [CompilerGeneratedAttribute]
private Version <ProtocolVersion>k__BackingField;
    public IRestRequest Request { get; public set; }
    public string ContentType { get; public set; }
    public long ContentLength { get; public set; }
    public string ContentEncoding { get; public set; }
    public string Content { get; public set; }
    public HttpStatusCode StatusCode { get; public set; }
    public bool IsSuccessful { get; }
    public string StatusDescription { get; public set; }
    public Byte[] RawBytes { get; public set; }
    public Uri ResponseUri { get; public set; }
    public string Server { get; public set; }
    public IList`1<RestResponseCookie> Cookies { get; protected internal set; }
    public IList`1<Parameter> Headers { get; protected internal set; }
    public ResponseStatus ResponseStatus { get; public set; }
    public string ErrorMessage { get; public set; }
    public Exception ErrorException { get; public set; }
    public Version ProtocolVersion { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual IRestRequest get_Request();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Request(IRestRequest value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ContentType();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ContentType(string value);
    [CompilerGeneratedAttribute]
public sealed virtual long get_ContentLength();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ContentLength(long value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ContentEncoding();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ContentEncoding(string value);
    public sealed virtual string get_Content();
    public sealed virtual void set_Content(string value);
    [CompilerGeneratedAttribute]
public sealed virtual HttpStatusCode get_StatusCode();
    [CompilerGeneratedAttribute]
public sealed virtual void set_StatusCode(HttpStatusCode value);
    public sealed virtual bool get_IsSuccessful();
    [CompilerGeneratedAttribute]
public sealed virtual string get_StatusDescription();
    [CompilerGeneratedAttribute]
public sealed virtual void set_StatusDescription(string value);
    [CompilerGeneratedAttribute]
public sealed virtual Byte[] get_RawBytes();
    [CompilerGeneratedAttribute]
public sealed virtual void set_RawBytes(Byte[] value);
    [CompilerGeneratedAttribute]
public sealed virtual Uri get_ResponseUri();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ResponseUri(Uri value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Server();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Server(string value);
    [CompilerGeneratedAttribute]
public sealed virtual IList`1<RestResponseCookie> get_Cookies();
    [CompilerGeneratedAttribute]
protected internal void set_Cookies(IList`1<RestResponseCookie> value);
    [CompilerGeneratedAttribute]
public sealed virtual IList`1<Parameter> get_Headers();
    [CompilerGeneratedAttribute]
protected internal void set_Headers(IList`1<Parameter> value);
    [CompilerGeneratedAttribute]
public sealed virtual ResponseStatus get_ResponseStatus();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ResponseStatus(ResponseStatus value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ErrorMessage();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ErrorMessage(string value);
    [CompilerGeneratedAttribute]
public sealed virtual Exception get_ErrorException();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ErrorException(Exception value);
    [CompilerGeneratedAttribute]
public sealed virtual Version get_ProtocolVersion();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ProtocolVersion(Version value);
    protected string DebuggerDisplay();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ObsoleteAttribute("We will use HttpCookie in the response as well in the next major version")]
public class RestSharp.RestResponseCookie : object {
    [CompilerGeneratedAttribute]
private string <Comment>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <CommentUri>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Discard>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Domain>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Expired>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <Expires>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HttpOnly>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Port>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Secure>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <TimeStamp>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private HttpCookie <HttpCookie>k__BackingField;
    public string Comment { get; public set; }
    public Uri CommentUri { get; public set; }
    public bool Discard { get; public set; }
    public string Domain { get; public set; }
    public bool Expired { get; public set; }
    public DateTime Expires { get; public set; }
    public bool HttpOnly { get; public set; }
    public string Name { get; public set; }
    public string Path { get; public set; }
    public string Port { get; public set; }
    public bool Secure { get; public set; }
    public DateTime TimeStamp { get; public set; }
    public string Value { get; public set; }
    public int Version { get; public set; }
    public HttpCookie HttpCookie { get; private set; }
    [CompilerGeneratedAttribute]
public string get_Comment();
    [CompilerGeneratedAttribute]
public void set_Comment(string value);
    [CompilerGeneratedAttribute]
public Uri get_CommentUri();
    [CompilerGeneratedAttribute]
public void set_CommentUri(Uri value);
    [CompilerGeneratedAttribute]
public bool get_Discard();
    [CompilerGeneratedAttribute]
public void set_Discard(bool value);
    [CompilerGeneratedAttribute]
public string get_Domain();
    [CompilerGeneratedAttribute]
public void set_Domain(string value);
    [CompilerGeneratedAttribute]
public bool get_Expired();
    [CompilerGeneratedAttribute]
public void set_Expired(bool value);
    [CompilerGeneratedAttribute]
public DateTime get_Expires();
    [CompilerGeneratedAttribute]
public void set_Expires(DateTime value);
    [CompilerGeneratedAttribute]
public bool get_HttpOnly();
    [CompilerGeneratedAttribute]
public void set_HttpOnly(bool value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
public void set_Path(string value);
    [CompilerGeneratedAttribute]
public string get_Port();
    [CompilerGeneratedAttribute]
public void set_Port(string value);
    [CompilerGeneratedAttribute]
public bool get_Secure();
    [CompilerGeneratedAttribute]
public void set_Secure(bool value);
    [CompilerGeneratedAttribute]
public DateTime get_TimeStamp();
    [CompilerGeneratedAttribute]
public void set_TimeStamp(DateTime value);
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(string value);
    [CompilerGeneratedAttribute]
public int get_Version();
    [CompilerGeneratedAttribute]
public void set_Version(int value);
    [CompilerGeneratedAttribute]
public HttpCookie get_HttpCookie();
    [CompilerGeneratedAttribute]
private void set_HttpCookie(HttpCookie value);
    internal static RestResponseCookie FromHttpCookie(HttpCookie cookie);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class RestSharp.Serialization.ContentType : object {
    public static string Json;
    public static string Xml;
    public static Dictionary`2<DataFormat, string> FromDataFormat;
    public static String[] JsonAccept;
    public static String[] XmlAccept;
    private static ContentType();
}
[NullableContextAttribute("1")]
public interface RestSharp.Serialization.IRestSerializer {
    public String[] SupportedContentTypes { get; }
    public DataFormat DataFormat { get; }
    public abstract virtual String[] get_SupportedContentTypes();
    public abstract virtual DataFormat get_DataFormat();
    public abstract virtual string Serialize(Parameter parameter);
}
[NullableContextAttribute("1")]
public interface RestSharp.Serialization.IWithRootElement {
    public string RootElement { get; public set; }
    public abstract virtual string get_RootElement();
    public abstract virtual void set_RootElement(string value);
}
public class RestSharp.Serialization.Json.JsonDeserializer : JsonSerializer {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class RestSharp.Serialization.Json.JsonSerializer : object {
    [CompilerGeneratedAttribute]
private string <DateFormat>k__BackingField;
    [CompilerGeneratedAttribute]
private CultureInfo <Culture>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContentType>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <SupportedContentTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private DataFormat <DataFormat>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RootElement>k__BackingField;
    public string DateFormat { get; public set; }
    public CultureInfo Culture { get; public set; }
    public string ContentType { get; public set; }
    public String[] SupportedContentTypes { get; }
    public DataFormat DataFormat { get; }
    public string RootElement { get; public set; }
    [CompilerGeneratedAttribute]
public string get_DateFormat();
    [CompilerGeneratedAttribute]
public void set_DateFormat(string value);
    [CompilerGeneratedAttribute]
public CultureInfo get_Culture();
    [CompilerGeneratedAttribute]
public void set_Culture(CultureInfo value);
    public sealed virtual string Serialize(object obj);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ContentType();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ContentType(string value);
    [CompilerGeneratedAttribute]
public sealed virtual String[] get_SupportedContentTypes();
    [CompilerGeneratedAttribute]
public sealed virtual DataFormat get_DataFormat();
    public sealed virtual string Serialize(Parameter parameter);
    public sealed virtual T Deserialize(IRestResponse response);
    [CompilerGeneratedAttribute]
public sealed virtual string get_RootElement();
    [CompilerGeneratedAttribute]
public sealed virtual void set_RootElement(string value);
    private static bool IsSerializedString(object obj, String& serializedString);
    private object FindRoot(string content);
    private object Map(object target, IDictionary`2<string, object> data);
    private IDictionary BuildDictionary(Type type, object parent);
    private IList BuildList(Type type, object parent);
    private object ConvertValue(TypeInfo typeInfo, object value);
    private object CreateAndMap(Type type, object element);
}
[ExtensionAttribute]
public static class RestSharp.Serialization.Xml.DotNetXmlSerializerClientExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static IRestClient UseDotNetXmlSerializer(IRestClient restClient, string xmlNamespace, Encoding encoding);
}
[NullableContextAttribute("1")]
public interface RestSharp.Serialization.Xml.IXmlDeserializer {
    public string Namespace { get; public set; }
    public string DateFormat { get; public set; }
    public abstract virtual string get_Namespace();
    public abstract virtual void set_Namespace(string value);
    public abstract virtual string get_DateFormat();
    public abstract virtual void set_DateFormat(string value);
}
[NullableContextAttribute("1")]
public interface RestSharp.Serialization.Xml.IXmlSerializer {
    public string Namespace { get; public set; }
    public string DateFormat { get; public set; }
    public abstract virtual string get_Namespace();
    public abstract virtual void set_Namespace(string value);
    public abstract virtual string get_DateFormat();
    public abstract virtual void set_DateFormat(string value);
}
public class RestSharp.Serialization.Xml.XmlAttributeDeserializer : XmlDeserializer {
    [NullableContextAttribute("1")]
protected virtual object GetValueFromXml(XElement root, XName name, PropertyInfo prop, bool useExactName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class RestSharp.Serialization.Xml.XmlRestSerializer : object {
    private XmlSerilizationOptions _options;
    private IXmlDeserializer _xmlDeserializer;
    private IXmlSerializer _xmlSerializer;
    [CompilerGeneratedAttribute]
private String[] <SupportedContentTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private DataFormat <DataFormat>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContentType>k__BackingField;
    public String[] SupportedContentTypes { get; }
    public DataFormat DataFormat { get; }
    public string ContentType { get; public set; }
    public string RootElement { get; public set; }
    public string Namespace { get; public set; }
    public string DateFormat { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual String[] get_SupportedContentTypes();
    [CompilerGeneratedAttribute]
public sealed virtual DataFormat get_DataFormat();
    [CompilerGeneratedAttribute]
public sealed virtual string get_ContentType();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ContentType(string value);
    public sealed virtual string Serialize(object obj);
    public sealed virtual T Deserialize(IRestResponse response);
    public sealed virtual string Serialize(Parameter parameter);
    public sealed virtual string get_RootElement();
    public sealed virtual void set_RootElement(string value);
    public sealed virtual string get_Namespace();
    public sealed virtual void set_Namespace(string value);
    public sealed virtual string get_DateFormat();
    public sealed virtual void set_DateFormat(string value);
    public XmlRestSerializer WithOptions(XmlSerilizationOptions options);
    public XmlRestSerializer WithXmlSerializer(XmlSerilizationOptions options);
    public XmlRestSerializer WithXmlSerializer(IXmlSerializer xmlSerializer);
    public XmlRestSerializer WithXmlDeserialzier(XmlSerilizationOptions options);
    public XmlRestSerializer WithXmlDeserializer(IXmlDeserializer xmlDeserializer);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class RestSharp.Serialization.Xml.XmlSerilizationOptions : object {
    [CompilerGeneratedAttribute]
private string <RootElement>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Namespace>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DateFormat>k__BackingField;
    [CompilerGeneratedAttribute]
private CultureInfo <Culture>k__BackingField;
    public string RootElement { get; public set; }
    public string Namespace { get; public set; }
    public string DateFormat { get; public set; }
    public CultureInfo Culture { get; public set; }
    public static XmlSerilizationOptions Default { get; }
    [CompilerGeneratedAttribute]
public string get_RootElement();
    [CompilerGeneratedAttribute]
public void set_RootElement(string value);
    [CompilerGeneratedAttribute]
public string get_Namespace();
    [CompilerGeneratedAttribute]
public void set_Namespace(string value);
    [CompilerGeneratedAttribute]
public string get_DateFormat();
    [CompilerGeneratedAttribute]
public void set_DateFormat(string value);
    [CompilerGeneratedAttribute]
public CultureInfo get_Culture();
    [CompilerGeneratedAttribute]
public void set_Culture(CultureInfo value);
    public static XmlSerilizationOptions get_Default();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class RestSharp.Serializers.DotNetXmlSerializer : object {
    [CompilerGeneratedAttribute]
private Encoding <Encoding>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RootElement>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Namespace>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DateFormat>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContentType>k__BackingField;
    public Encoding Encoding { get; public set; }
    public string RootElement { get; public set; }
    public string Namespace { get; public set; }
    public string DateFormat { get; public set; }
    public string ContentType { get; public set; }
    public DotNetXmlSerializer(string namespace);
    [CompilerGeneratedAttribute]
public Encoding get_Encoding();
    [CompilerGeneratedAttribute]
public void set_Encoding(Encoding value);
    public sealed virtual string Serialize(object obj);
    [CompilerGeneratedAttribute]
public sealed virtual string get_RootElement();
    [CompilerGeneratedAttribute]
public sealed virtual void set_RootElement(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Namespace();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Namespace(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_DateFormat();
    [CompilerGeneratedAttribute]
public sealed virtual void set_DateFormat(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ContentType();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ContentType(string value);
}
[NullableContextAttribute("1")]
public interface RestSharp.Serializers.ISerializer {
    public string ContentType { get; public set; }
    public abstract virtual string get_ContentType();
    public abstract virtual void set_ContentType(string value);
    public abstract virtual string Serialize(object obj);
}
public enum RestSharp.Serializers.NameStyle : Enum {
    public int value__;
    public static NameStyle AsIs;
    public static NameStyle CamelCase;
    public static NameStyle LowerCase;
    public static NameStyle PascalCase;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("132")]
public class RestSharp.Serializers.SerializeAsAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Attribute>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Content>k__BackingField;
    [CompilerGeneratedAttribute]
private CultureInfo <Culture>k__BackingField;
    [CompilerGeneratedAttribute]
private NameStyle <NameStyle>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Index>k__BackingField;
    public string Name { get; public set; }
    public bool Attribute { get; public set; }
    public bool Content { get; public set; }
    public CultureInfo Culture { get; public set; }
    public NameStyle NameStyle { get; public set; }
    public int Index { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public bool get_Attribute();
    [CompilerGeneratedAttribute]
public void set_Attribute(bool value);
    [CompilerGeneratedAttribute]
public bool get_Content();
    [CompilerGeneratedAttribute]
public void set_Content(bool value);
    [CompilerGeneratedAttribute]
public CultureInfo get_Culture();
    [CompilerGeneratedAttribute]
public void set_Culture(CultureInfo value);
    [CompilerGeneratedAttribute]
public NameStyle get_NameStyle();
    [CompilerGeneratedAttribute]
public void set_NameStyle(NameStyle value);
    [CompilerGeneratedAttribute]
public int get_Index();
    [CompilerGeneratedAttribute]
public void set_Index(int value);
    public string TransformName(string input);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class RestSharp.Serializers.XmlSerializer : object {
    [CompilerGeneratedAttribute]
private string <RootElement>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Namespace>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DateFormat>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContentType>k__BackingField;
    public string RootElement { get; public set; }
    public string Namespace { get; public set; }
    public string DateFormat { get; public set; }
    public string ContentType { get; public set; }
    public XmlSerializer(string namespace);
    public sealed virtual string Serialize(object obj);
    [CompilerGeneratedAttribute]
public sealed virtual string get_RootElement();
    [CompilerGeneratedAttribute]
public sealed virtual void set_RootElement(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Namespace();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Namespace(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_DateFormat();
    [CompilerGeneratedAttribute]
public sealed virtual void set_DateFormat(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ContentType();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ContentType(string value);
    private void Map(XContainer root, object obj);
    private string GetSerializedValue(object obj);
    private static string SerializeNumber(object number);
    private static bool IsNumeric(object value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[GeneratedCodeAttribute("simple-json", "1.0.0")]
public static class RestSharp.SimpleJson : object {
    private static int TOKEN_NONE;
    private static int TOKEN_CURLY_OPEN;
    private static int TOKEN_CURLY_CLOSE;
    private static int TOKEN_SQUARED_OPEN;
    private static int TOKEN_SQUARED_CLOSE;
    private static int TOKEN_COLON;
    private static int TOKEN_COMMA;
    private static int TOKEN_STRING;
    private static int TOKEN_NUMBER;
    private static int TOKEN_TRUE;
    private static int TOKEN_FALSE;
    private static int TOKEN_NULL;
    private static int BUILDER_CAPACITY;
    private static IJsonSerializerStrategy _currentJsonSerializerStrategy;
    private static PocoJsonSerializerStrategy _pocoJsonSerializerStrategy;
    public static IJsonSerializerStrategy CurrentJsonSerializerStrategy { get; public set; }
    [EditorBrowsableAttribute("2")]
public static PocoJsonSerializerStrategy PocoJsonSerializerStrategy { get; }
    public static object DeserializeObject(string json);
    public static object DeserializeObject(Char[] json);
    public static bool TryDeserializeObject(Char[] json, Object& obj);
    public static bool TryDeserializeObject(string json, Object& obj);
    public static object DeserializeObject(string json, Type type, IJsonSerializerStrategy jsonSerializerStrategy);
    public static object DeserializeObject(Char[] json, Type type, IJsonSerializerStrategy jsonSerializerStrategy);
    private static object GetJsonObject(object jsonObject, Type type, IJsonSerializerStrategy jsonSerializerStrategy);
    public static object DeserializeObject(string json, Type type);
    public static T DeserializeObject(string json, IJsonSerializerStrategy jsonSerializerStrategy);
    public static T DeserializeObject(string json);
    public static string SerializeObject(object json, IJsonSerializerStrategy jsonSerializerStrategy);
    public static string SerializeObject(object json);
    public static string EscapeToJavascriptString(string jsonString);
    private static IDictionary`2<string, object> ParseObject(Char[] json, Int32& index, Boolean& success);
    private static JsonArray ParseArray(Char[] json, Int32& index, Boolean& success);
    private static object ParseValue(Char[] json, Int32& index, Boolean& success);
    private static string ParseString(Char[] json, Int32& index, Boolean& success);
    private static string ConvertFromUtf32(int utf32);
    private static object ParseNumber(Char[] json, Int32& index, Boolean& success);
    private static int GetLastIndexOfNumber(Char[] json, int index);
    private static void EatWhitespace(Char[] json, Int32& index);
    private static int LookAhead(Char[] json, int index);
    private static int NextToken(Char[] json, Int32& index);
    private static bool SerializeValue(IJsonSerializerStrategy jsonSerializerStrategy, object value, StringBuilder builder);
    private static bool SerializeObject(IJsonSerializerStrategy jsonSerializerStrategy, IEnumerable keys, IEnumerable values, StringBuilder builder);
    private static bool SerializeArray(IJsonSerializerStrategy jsonSerializerStrategy, IEnumerable anArray, StringBuilder builder);
    private static bool SerializeString(string aString, StringBuilder builder);
    private static bool SerializeNumber(object number, StringBuilder builder);
    private static bool IsNumeric(object value);
    public static IJsonSerializerStrategy get_CurrentJsonSerializerStrategy();
    public static void set_CurrentJsonSerializerStrategy(IJsonSerializerStrategy value);
    public static PocoJsonSerializerStrategy get_PocoJsonSerializerStrategy();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class RestSharp.Validation.Ensure : object {
    public static void NotNull(object parameter, string name);
    public static void NotEmpty(string parameter, string name);
    public static void NotEmptyString(object parameter, string name);
}
public class RestSharp.Validation.Require : object {
    [NullableContextAttribute("1")]
[ObsoleteAttribute("This method will be removed soon. If you use it, please copy the code to your project.")]
public static void Argument(string argumentName, object argumentValue);
}
public class RestSharp.Validation.Validate : object {
    [ObsoleteAttribute("This method will be removed soon. If you use it, please copy the code to your project.")]
public static void IsBetween(int value, int min, int max);
    [NullableContextAttribute("1")]
[ObsoleteAttribute("This method will be removed soon. If you use it, please copy the code to your project.")]
public static void IsValidLength(string value, int maxSize);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class RestSharp.XmlParameter : Parameter {
    [CompilerGeneratedAttribute]
private string <XmlNamespace>k__BackingField;
    public string XmlNamespace { get; }
    [NullableContextAttribute("1")]
public XmlParameter(string name, object value, string xmlNamespace);
    [CompilerGeneratedAttribute]
public string get_XmlNamespace();
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
