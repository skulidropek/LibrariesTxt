[ExtensionAttribute]
[EditorBrowsableAttribute("1")]
public static class Owin.WebApiAppBuilderExtensions : object {
    private static IHostBufferPolicySelector _defaultBufferPolicySelector;
    private static WebApiAppBuilderExtensions();
    [ExtensionAttribute]
public static IAppBuilder UseWebApi(IAppBuilder builder, HttpConfiguration configuration);
    [ExtensionAttribute]
public static IAppBuilder UseWebApi(IAppBuilder builder, HttpServer httpServer);
    [ExtensionAttribute]
private static IAppBuilder UseMessageHandler(IAppBuilder builder, HttpMessageHandlerOptions options);
    private static HttpMessageHandlerOptions CreateOptions(IAppBuilder builder, HttpServer server, HttpConfiguration configuration);
    [ExtensionAttribute]
internal static CancellationToken GetOnAppDisposingProperty(IAppBuilder builder);
}
[ExtensionAttribute]
internal static class System.Collections.Generic.CollectionExtensions : object {
    [ExtensionAttribute]
public static T[] AppendAndReallocate(T[] array, T value);
    [ExtensionAttribute]
public static T[] AsArray(IEnumerable`1<T> values);
    [ExtensionAttribute]
public static Collection`1<T> AsCollection(IEnumerable`1<T> enumerable);
    [ExtensionAttribute]
public static IList`1<T> AsIList(IEnumerable`1<T> enumerable);
    [ExtensionAttribute]
public static List`1<T> AsList(IEnumerable`1<T> enumerable);
    [ExtensionAttribute]
public static void RemoveFrom(List`1<T> list, int start);
    [ExtensionAttribute]
public static T SingleDefaultOrError(IList`1<T> list, Action`1<TArg1> errorAction, TArg1 errorArg1);
    [ExtensionAttribute]
public static TMatch SingleOfTypeDefaultOrError(IList`1<TInput> list, Action`1<TArg1> errorAction, TArg1 errorArg1);
    [ExtensionAttribute]
public static T[] ToArrayWithoutNulls(ICollection`1<T> collection);
    [ExtensionAttribute]
public static Dictionary`2<TKey, TValue> ToDictionaryFast(TValue[] array, Func`2<TValue, TKey> keySelector, IEqualityComparer`1<TKey> comparer);
    [ExtensionAttribute]
public static Dictionary`2<TKey, TValue> ToDictionaryFast(IList`1<TValue> list, Func`2<TValue, TKey> keySelector, IEqualityComparer`1<TKey> comparer);
    [ExtensionAttribute]
public static Dictionary`2<TKey, TValue> ToDictionaryFast(IEnumerable`1<TValue> enumerable, Func`2<TValue, TKey> keySelector, IEqualityComparer`1<TKey> comparer);
    private static Dictionary`2<TKey, TValue> ToDictionaryFastNoCheck(IList`1<TValue> list, Func`2<TValue, TKey> keySelector, IEqualityComparer`1<TKey> comparer);
}
[ExtensionAttribute]
[EditorBrowsableAttribute("1")]
internal static class System.Collections.Generic.DictionaryExtensions : object {
    [ExtensionAttribute]
public static void RemoveFromDictionary(IDictionary`2<TKey, TValue> dictionary, Func`2<KeyValuePair`2<TKey, TValue>, bool> removeCondition);
    [ExtensionAttribute]
public static void RemoveFromDictionary(IDictionary`2<TKey, TValue> dictionary, Func`3<KeyValuePair`2<TKey, TValue>, TState, bool> removeCondition, TState state);
    [ExtensionAttribute]
public static bool TryGetValue(IDictionary`2<string, object> collection, string key, T& value);
    [IteratorStateMachineAttribute("System.Collections.Generic.DictionaryExtensions/<FindKeysWithPrefix>d__3`1")]
[ExtensionAttribute]
internal static IEnumerable`1<KeyValuePair`2<string, TValue>> FindKeysWithPrefix(IDictionary`2<string, TValue> dictionary, string prefix);
}
internal class System.Collections.ObjectModel.ListWrapperCollection`1 : Collection`1<T> {
    private List`1<T> _items;
    internal List`1<T> ItemsList { get; }
    internal ListWrapperCollection`1(List`1<T> list);
    internal List`1<T> get_ItemsList();
}
[ExtensionAttribute]
[EditorBrowsableAttribute("1")]
public static class System.Net.Http.OwinHttpRequestMessageExtensions : object {
    private static string OwinEnvironmentKey;
    private static string OwinContextKey;
    [ExtensionAttribute]
public static IOwinContext GetOwinContext(HttpRequestMessage request);
    [ExtensionAttribute]
public static void SetOwinContext(HttpRequestMessage request, IOwinContext context);
    [ExtensionAttribute]
public static IDictionary`2<string, object> GetOwinEnvironment(HttpRequestMessage request);
    [ExtensionAttribute]
public static void SetOwinEnvironment(HttpRequestMessage request, IDictionary`2<string, object> environment);
    [ExtensionAttribute]
internal static IAuthenticationManager GetAuthenticationManager(HttpRequestMessage request);
}
internal static class System.Threading.Tasks.TaskHelpers : object {
    private static Task _defaultCompleted;
    private static Task`1<object> _completedTaskReturningNull;
    private static TaskHelpers();
    internal static Task Canceled();
    internal static Task`1<TResult> Canceled();
    internal static Task Completed();
    internal static Task FromError(Exception exception);
    internal static Task`1<TResult> FromError(Exception exception);
    internal static Task`1<object> NullResult();
}
[ExtensionAttribute]
internal static class System.Threading.Tasks.TaskHelpersExtensions : object {
    [AsyncStateMachineAttribute("System.Threading.Tasks.TaskHelpersExtensions/<CastToObject>d__0")]
[ExtensionAttribute]
internal static Task`1<object> CastToObject(Task task);
    [AsyncStateMachineAttribute("System.Threading.Tasks.TaskHelpersExtensions/<CastToObject>d__1`1")]
[ExtensionAttribute]
internal static Task`1<object> CastToObject(Task`1<T> task);
    [ExtensionAttribute]
internal static void ThrowIfFaulted(Task task);
    [ExtensionAttribute]
internal static bool TryGetResult(Task`1<TResult> task, TResult& result);
}
internal static class System.Web.Http.Error : object {
    private static string HttpScheme;
    private static string HttpsScheme;
    internal static string Format(string format, Object[] args);
    internal static ArgumentException Argument(string messageFormat, Object[] messageArgs);
    internal static ArgumentException Argument(string parameterName, string messageFormat, Object[] messageArgs);
    internal static ArgumentException ArgumentUriNotHttpOrHttpsScheme(string parameterName, Uri actualValue);
    internal static ArgumentException ArgumentUriNotAbsolute(string parameterName, Uri actualValue);
    internal static ArgumentException ArgumentUriHasQueryOrFragment(string parameterName, Uri actualValue);
    internal static ArgumentNullException PropertyNull();
    internal static ArgumentNullException ArgumentNull(string parameterName);
    internal static ArgumentNullException ArgumentNull(string parameterName, string messageFormat, Object[] messageArgs);
    internal static ArgumentException ArgumentNullOrEmpty(string parameterName);
    internal static ArgumentOutOfRangeException ArgumentOutOfRange(string parameterName, object actualValue, string messageFormat, Object[] messageArgs);
    internal static ArgumentOutOfRangeException ArgumentMustBeGreaterThanOrEqualTo(string parameterName, object actualValue, object minValue);
    internal static ArgumentOutOfRangeException ArgumentMustBeLessThanOrEqualTo(string parameterName, object actualValue, object maxValue);
    internal static KeyNotFoundException KeyNotFound();
    internal static KeyNotFoundException KeyNotFound(string messageFormat, Object[] messageArgs);
    internal static ObjectDisposedException ObjectDisposed(string messageFormat, Object[] messageArgs);
    internal static OperationCanceledException OperationCanceled();
    internal static OperationCanceledException OperationCanceled(string messageFormat, Object[] messageArgs);
    internal static ArgumentException InvalidEnumArgument(string parameterName, int invalidValue, Type enumClass);
    internal static InvalidOperationException InvalidOperation(string messageFormat, Object[] messageArgs);
    internal static InvalidOperationException InvalidOperation(Exception innerException, string messageFormat, Object[] messageArgs);
    internal static NotSupportedException NotSupported(string messageFormat, Object[] messageArgs);
}
[AttributeUsageAttribute("68")]
public class System.Web.Http.HostAuthenticationAttribute : Attribute {
    private IAuthenticationFilter _innerFilter;
    private string _authenticationType;
    public bool AllowMultiple { get; }
    public string AuthenticationType { get; }
    internal IAuthenticationFilter InnerFilter { get; }
    public HostAuthenticationAttribute(string authenticationType);
    internal HostAuthenticationAttribute(IAuthenticationFilter innerFilter);
    public sealed virtual bool get_AllowMultiple();
    public string get_AuthenticationType();
    internal IAuthenticationFilter get_InnerFilter();
    public sealed virtual Task AuthenticateAsync(HttpAuthenticationContext context, CancellationToken cancellationToken);
    public sealed virtual Task ChallengeAsync(HttpAuthenticationChallengeContext context, CancellationToken cancellationToken);
}
public class System.Web.Http.HostAuthenticationFilter : object {
    private string _authenticationType;
    public string AuthenticationType { get; }
    public bool AllowMultiple { get; }
    public HostAuthenticationFilter(string authenticationType);
    public string get_AuthenticationType();
    [AsyncStateMachineAttribute("System.Web.Http.HostAuthenticationFilter/<AuthenticateAsync>d__4")]
public sealed virtual Task AuthenticateAsync(HttpAuthenticationContext context, CancellationToken cancellationToken);
    public sealed virtual Task ChallengeAsync(HttpAuthenticationChallengeContext context, CancellationToken cancellationToken);
    public sealed virtual bool get_AllowMultiple();
    private static AuthenticationResponseChallenge AddChallengeAuthenticationType(AuthenticationResponseChallenge challenge, string authenticationType);
    private static IAuthenticationManager GetAuthenticationManagerOrThrow(HttpRequestMessage request);
}
internal class System.Web.Http.NonOwnedStream : Stream {
    [CompilerGeneratedAttribute]
private Stream <InnerStream>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsDisposed>k__BackingField;
    protected Stream InnerStream { get; protected set; }
    protected bool IsDisposed { get; private set; }
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanTimeout { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public long Position { get; public set; }
    public int ReadTimeout { get; public set; }
    public int WriteTimeout { get; public set; }
    public NonOwnedStream(Stream innerStream);
    [CompilerGeneratedAttribute]
protected Stream get_InnerStream();
    [CompilerGeneratedAttribute]
protected void set_InnerStream(Stream value);
    [CompilerGeneratedAttribute]
protected bool get_IsDisposed();
    [CompilerGeneratedAttribute]
private void set_IsDisposed(bool value);
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanTimeout();
    public virtual bool get_CanWrite();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public virtual int get_ReadTimeout();
    public virtual void set_ReadTimeout(int value);
    public virtual int get_WriteTimeout();
    public virtual void set_WriteTimeout(int value);
    public virtual IAsyncResult BeginRead(Byte[] buffer, int offset, int count, AsyncCallback callback, object state);
    public virtual IAsyncResult BeginWrite(Byte[] buffer, int offset, int count, AsyncCallback callback, object state);
    public virtual void Close();
    public virtual Task CopyToAsync(Stream destination, int bufferSize, CancellationToken cancellationToken);
    protected virtual void Dispose(bool disposing);
    public virtual int EndRead(IAsyncResult asyncResult);
    public virtual void EndWrite(IAsyncResult asyncResult);
    public virtual void Flush();
    public virtual Task FlushAsync(CancellationToken cancellationToken);
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual Task`1<int> ReadAsync(Byte[] buffer, int offset, int count, CancellationToken cancellationToken);
    public virtual int ReadByte();
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
    public virtual void Write(Byte[] buffer, int offset, int count);
    public virtual Task WriteAsync(Byte[] buffer, int offset, int count, CancellationToken cancellationToken);
    public virtual void WriteByte(byte value);
    protected void ThrowIfDisposed();
}
internal class System.Web.Http.Owin.ExceptionHandling.DefaultExceptionHandler : object {
    public sealed virtual Task HandleAsync(ExceptionHandlerContext context, CancellationToken cancellationToken);
    private static void Handle(ExceptionHandlerContext context);
}
internal class System.Web.Http.Owin.ExceptionHandling.EmptyExceptionLogger : object {
    public sealed virtual Task LogAsync(ExceptionLoggerContext context, CancellationToken cancellationToken);
}
public class System.Web.Http.Owin.HttpMessageHandlerAdapter : OwinMiddleware {
    private HttpMessageHandler _messageHandler;
    private HttpMessageInvoker _messageInvoker;
    private IHostBufferPolicySelector _bufferPolicySelector;
    private IExceptionLogger _exceptionLogger;
    private IExceptionHandler _exceptionHandler;
    private CancellationToken _appDisposing;
    private bool _disposed;
    public HttpMessageHandler MessageHandler { get; }
    public IHostBufferPolicySelector BufferPolicySelector { get; }
    public IExceptionLogger ExceptionLogger { get; }
    public IExceptionHandler ExceptionHandler { get; }
    public CancellationToken AppDisposing { get; }
    public HttpMessageHandlerAdapter(OwinMiddleware next, HttpMessageHandlerOptions options);
    [ObsoleteAttribute("Use the HttpMessageHandlerAdapter(OwinMiddleware, HttpMessageHandlerOptions) constructor instead.")]
public HttpMessageHandlerAdapter(OwinMiddleware next, HttpMessageHandler messageHandler, IHostBufferPolicySelector bufferPolicySelector);
    public HttpMessageHandler get_MessageHandler();
    public IHostBufferPolicySelector get_BufferPolicySelector();
    public IExceptionLogger get_ExceptionLogger();
    public IExceptionHandler get_ExceptionHandler();
    public CancellationToken get_AppDisposing();
    public virtual Task Invoke(IOwinContext context);
    [AsyncStateMachineAttribute("System.Web.Http.Owin.HttpMessageHandlerAdapter/<InvokeCore>d__20")]
private Task InvokeCore(IOwinContext context, IOwinRequest owinRequest, IOwinResponse owinResponse);
    private static HttpContent CreateStreamedRequestContent(IOwinRequest owinRequest);
    [AsyncStateMachineAttribute("System.Web.Http.Owin.HttpMessageHandlerAdapter/<CreateBufferedRequestContentAsync>d__22")]
private static Task`1<HttpContent> CreateBufferedRequestContentAsync(IOwinRequest owinRequest, CancellationToken cancellationToken);
    private static HttpRequestMessage CreateRequestMessage(IOwinRequest owinRequest, HttpContent requestContent);
    private static void MapRequestProperties(HttpRequestMessage request, IOwinContext context);
    private static void SetPrincipal(IPrincipal user);
    private static bool IsSoftNotFound(HttpRequestMessage request, HttpResponseMessage response);
    [AsyncStateMachineAttribute("System.Web.Http.Owin.HttpMessageHandlerAdapter/<BufferResponseContentAsync>d__27")]
private Task`1<HttpResponseMessage> BufferResponseContentAsync(HttpRequestMessage request, HttpResponseMessage response, CancellationToken cancellationToken);
    private Task`1<bool> PrepareHeadersAsync(HttpRequestMessage request, HttpResponseMessage response, IOwinResponse owinResponse, CancellationToken cancellationToken);
    private Task`1<bool> ComputeContentLengthAsync(HttpRequestMessage request, HttpResponseMessage response, IOwinResponse owinResponse, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("System.Web.Http.Owin.HttpMessageHandlerAdapter/<HandleTryComputeLengthExceptionAsync>d__30")]
private Task`1<bool> HandleTryComputeLengthExceptionAsync(Exception exception, HttpRequestMessage request, HttpResponseMessage response, IOwinResponse owinResponse, CancellationToken cancellationToken);
    private Task SendResponseMessageAsync(HttpRequestMessage request, HttpResponseMessage response, IOwinResponse owinResponse, CancellationToken cancellationToken);
    private static void SetHeadersForEmptyResponse(IDictionary`2<string, String[]> headers);
    [AsyncStateMachineAttribute("System.Web.Http.Owin.HttpMessageHandlerAdapter/<SendResponseContentAsync>d__33")]
private Task SendResponseContentAsync(HttpRequestMessage request, HttpResponseMessage response, IOwinResponse owinResponse, CancellationToken cancellationToken);
    private static Task AbortResponseAsync();
    private static HttpMessageHandlerOptions CreateOptions(HttpMessageHandler messageHandler, IHostBufferPolicySelector bufferPolicySelector);
    protected virtual void Dispose(bool disposing);
    public sealed virtual void Dispose();
    private void OnAppDisposing();
}
public class System.Web.Http.Owin.HttpMessageHandlerOptions : object {
    [CompilerGeneratedAttribute]
private HttpMessageHandler <MessageHandler>k__BackingField;
    [CompilerGeneratedAttribute]
private IHostBufferPolicySelector <BufferPolicySelector>k__BackingField;
    [CompilerGeneratedAttribute]
private IExceptionLogger <ExceptionLogger>k__BackingField;
    [CompilerGeneratedAttribute]
private IExceptionHandler <ExceptionHandler>k__BackingField;
    [CompilerGeneratedAttribute]
private CancellationToken <AppDisposing>k__BackingField;
    public HttpMessageHandler MessageHandler { get; public set; }
    public IHostBufferPolicySelector BufferPolicySelector { get; public set; }
    public IExceptionLogger ExceptionLogger { get; public set; }
    public IExceptionHandler ExceptionHandler { get; public set; }
    public CancellationToken AppDisposing { get; public set; }
    [CompilerGeneratedAttribute]
public HttpMessageHandler get_MessageHandler();
    [CompilerGeneratedAttribute]
public void set_MessageHandler(HttpMessageHandler value);
    [CompilerGeneratedAttribute]
public IHostBufferPolicySelector get_BufferPolicySelector();
    [CompilerGeneratedAttribute]
public void set_BufferPolicySelector(IHostBufferPolicySelector value);
    [CompilerGeneratedAttribute]
public IExceptionLogger get_ExceptionLogger();
    [CompilerGeneratedAttribute]
public void set_ExceptionLogger(IExceptionLogger value);
    [CompilerGeneratedAttribute]
public IExceptionHandler get_ExceptionHandler();
    [CompilerGeneratedAttribute]
public void set_ExceptionHandler(IExceptionHandler value);
    [CompilerGeneratedAttribute]
public CancellationToken get_AppDisposing();
    [CompilerGeneratedAttribute]
public void set_AppDisposing(CancellationToken value);
}
public class System.Web.Http.Owin.OwinBufferPolicySelector : object {
    public sealed virtual bool UseBufferedInputStream(object hostContext);
    public sealed virtual bool UseBufferedOutputStream(HttpResponseMessage response);
}
internal static class System.Web.Http.Owin.OwinConstants : object {
    public static string ClientCertifiateKey;
    public static string IsLocalKey;
}
public static class System.Web.Http.Owin.OwinExceptionCatchBlocks : object {
    private static ExceptionContextCatchBlock _httpMessageHandlerAdapterBufferContent;
    private static ExceptionContextCatchBlock _httpMessageHandlerAdapterBufferError;
    private static ExceptionContextCatchBlock _httpMessageHandlerAdapterComputeContentLength;
    private static ExceptionContextCatchBlock _httpMessageHandlerAdapterStreamContent;
    public static ExceptionContextCatchBlock HttpMessageHandlerAdapterBufferContent { get; }
    public static ExceptionContextCatchBlock HttpMessageHandlerAdapterBufferError { get; }
    public static ExceptionContextCatchBlock HttpMessageHandlerAdapterComputeContentLength { get; }
    public static ExceptionContextCatchBlock HttpMessageHandlerAdapterStreamContent { get; }
    private static OwinExceptionCatchBlocks();
    public static ExceptionContextCatchBlock get_HttpMessageHandlerAdapterBufferContent();
    public static ExceptionContextCatchBlock get_HttpMessageHandlerAdapterBufferError();
    public static ExceptionContextCatchBlock get_HttpMessageHandlerAdapterComputeContentLength();
    public static ExceptionContextCatchBlock get_HttpMessageHandlerAdapterStreamContent();
}
internal class System.Web.Http.Owin.OwinHttpRequestContext : HttpRequestContext {
    private IOwinContext _context;
    private HttpRequestMessage _request;
    private X509Certificate2 _clientCertificate;
    private bool _clientCertificateSet;
    private bool _includeErrorDetail;
    private bool _includeErrorDetailSet;
    private bool _isLocal;
    private bool _isLocalSet;
    private UrlHelper _url;
    private bool _urlSet;
    private string _virtualPathRoot;
    private bool _virtualPathRootSet;
    public IOwinContext Context { get; }
    public HttpRequestMessage Request { get; }
    public X509Certificate2 ClientCertificate { get; public set; }
    public bool IncludeErrorDetail { get; public set; }
    public bool IsLocal { get; public set; }
    public IPrincipal Principal { get; public set; }
    public UrlHelper Url { get; public set; }
    public string VirtualPathRoot { get; public set; }
    public OwinHttpRequestContext(IOwinContext context, HttpRequestMessage request);
    public IOwinContext get_Context();
    public HttpRequestMessage get_Request();
    public virtual X509Certificate2 get_ClientCertificate();
    public virtual void set_ClientCertificate(X509Certificate2 value);
    public virtual bool get_IncludeErrorDetail();
    public virtual void set_IncludeErrorDetail(bool value);
    public virtual bool get_IsLocal();
    public virtual void set_IsLocal(bool value);
    public virtual IPrincipal get_Principal();
    public virtual void set_Principal(IPrincipal value);
    public virtual UrlHelper get_Url();
    public virtual void set_Url(UrlHelper value);
    public virtual string get_VirtualPathRoot();
    public virtual void set_VirtualPathRoot(string value);
}
[ExtensionAttribute]
internal static class System.Web.Http.Owin.OwinRequestExtensions : object {
    private static string ContentLengthHeaderName;
    private static string DisableRequestBufferingKey;
    [ExtensionAttribute]
public static void DisableBuffering(IOwinRequest request);
    [ExtensionAttribute]
public static Nullable`1<int> GetContentLength(IOwinRequest request);
}
[ExtensionAttribute]
internal static class System.Web.Http.Owin.OwinResponseExtensions : object {
    private static string DisableResponseBufferingKey;
    [ExtensionAttribute]
public static void DisableBuffering(IOwinResponse response);
}
public class System.Web.Http.Owin.PassiveAuthenticationMessageHandler : DelegatingHandler {
    private static Lazy`1<IPrincipal> _anonymousPrincipal;
    private static PassiveAuthenticationMessageHandler();
    [AsyncStateMachineAttribute("System.Web.Http.Owin.PassiveAuthenticationMessageHandler/<SendAsync>d__1")]
protected virtual Task`1<HttpResponseMessage> SendAsync(HttpRequestMessage request, CancellationToken cancellationToken);
    private static IPrincipal SetCurrentPrincipal(HttpRequestMessage request, IPrincipal principal);
    private static void SuppressDefaultAuthenticationChallenges(HttpRequestMessage request);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task`1<HttpResponseMessage> <>n__0(HttpRequestMessage request, CancellationToken cancellationToken);
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class System.Web.Http.Owin.Properties.OwinResources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string HttpAuthenticationChallengeContext_RequestMustNotBeNull { get; }
    internal static string HttpAuthenticationContext_RequestMustNotBeNull { get; }
    internal static string IAuthenticationManagerNotAvailable { get; }
    internal static string OwinContext_NullRequest { get; }
    internal static string OwinContext_NullResponse { get; }
    internal static string Request_RequestContextMustNotBeNull { get; }
    internal static string SendAsync_ReturnedNull { get; }
    internal static string TypePropertyMustNotBeNull { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_HttpAuthenticationChallengeContext_RequestMustNotBeNull();
    internal static string get_HttpAuthenticationContext_RequestMustNotBeNull();
    internal static string get_IAuthenticationManagerNotAvailable();
    internal static string get_OwinContext_NullRequest();
    internal static string get_OwinContext_NullResponse();
    internal static string get_Request_RequestContextMustNotBeNull();
    internal static string get_SendAsync_ReturnedNull();
    internal static string get_TypePropertyMustNotBeNull();
}
[ExtensionAttribute]
[EditorBrowsableAttribute("1")]
public static class System.Web.Http.OwinHttpConfigurationExtensions : object {
    [ExtensionAttribute]
public static void SuppressDefaultHostAuthentication(HttpConfiguration configuration);
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class System.Web.Http.Properties.CommonWebApiResources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string ArgumentInvalidAbsoluteUri { get; }
    internal static string ArgumentInvalidHttpUriScheme { get; }
    internal static string ArgumentMustBeGreaterThanOrEqualTo { get; }
    internal static string ArgumentMustBeLessThanOrEqualTo { get; }
    internal static string ArgumentNullOrEmpty { get; }
    internal static string ArgumentUriHasQueryOrFragment { get; }
    internal static string InvalidEnumArgument { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_ArgumentInvalidAbsoluteUri();
    internal static string get_ArgumentInvalidHttpUriScheme();
    internal static string get_ArgumentMustBeGreaterThanOrEqualTo();
    internal static string get_ArgumentMustBeLessThanOrEqualTo();
    internal static string get_ArgumentNullOrEmpty();
    internal static string get_ArgumentUriHasQueryOrFragment();
    internal static string get_InvalidEnumArgument();
}
