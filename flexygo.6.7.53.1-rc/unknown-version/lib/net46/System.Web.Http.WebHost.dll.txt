[ExtensionAttribute]
[EditorBrowsableAttribute("1")]
internal static class System.Collections.Generic.DictionaryExtensions : object {
    [ExtensionAttribute]
public static void RemoveFromDictionary(IDictionary`2<TKey, TValue> dictionary, Func`2<KeyValuePair`2<TKey, TValue>, bool> removeCondition);
    [ExtensionAttribute]
public static void RemoveFromDictionary(IDictionary`2<TKey, TValue> dictionary, Func`3<KeyValuePair`2<TKey, TValue>, TState, bool> removeCondition, TState state);
    [ExtensionAttribute]
public static bool TryGetValue(IDictionary`2<string, object> collection, string key, T& value);
    [ExtensionAttribute]
internal static IEnumerable`1<KeyValuePair`2<string, TValue>> FindKeysWithPrefix(IDictionary`2<string, TValue> dictionary, string prefix);
    [CompilerGeneratedAttribute]
private static bool <RemoveFromDictionary>b__0(KeyValuePair`2<TKey, TValue> entry, Func`2<KeyValuePair`2<TKey, TValue>, bool> innerCondition);
}
internal static class System.Threading.Tasks.TaskHelpers : object {
    private static Task _defaultCompleted;
    private static Task`1<object> _completedTaskReturningNull;
    private static TaskHelpers();
    internal static Task Canceled();
    internal static Task`1<TResult> Canceled();
    internal static Task Completed();
    internal static Task FromError(Exception exception);
    internal static Task`1<TResult> FromError(Exception exception);
    internal static Task`1<object> NullResult();
}
[ExtensionAttribute]
internal static class System.Threading.Tasks.TaskHelpersExtensions : object {
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("System.Threading.Tasks.TaskHelpersExtensions/<CastToObject>d__0")]
[ExtensionAttribute]
internal static Task`1<object> CastToObject(Task task);
    [AsyncStateMachineAttribute("System.Threading.Tasks.TaskHelpersExtensions/<CastToObject>d__3`1")]
[ExtensionAttribute]
[DebuggerStepThroughAttribute]
internal static Task`1<object> CastToObject(Task`1<T> task);
    [ExtensionAttribute]
internal static void ThrowIfFaulted(Task task);
    [ExtensionAttribute]
internal static bool TryGetResult(Task`1<TResult> task, TResult& result);
}
internal static class System.Web.Http.Error : object {
    private static string HttpScheme;
    private static string HttpsScheme;
    internal static string Format(string format, Object[] args);
    internal static ArgumentException Argument(string messageFormat, Object[] messageArgs);
    internal static ArgumentException Argument(string parameterName, string messageFormat, Object[] messageArgs);
    internal static ArgumentException ArgumentUriNotHttpOrHttpsScheme(string parameterName, Uri actualValue);
    internal static ArgumentException ArgumentUriNotAbsolute(string parameterName, Uri actualValue);
    internal static ArgumentException ArgumentUriHasQueryOrFragment(string parameterName, Uri actualValue);
    internal static ArgumentNullException PropertyNull();
    internal static ArgumentNullException ArgumentNull(string parameterName);
    internal static ArgumentNullException ArgumentNull(string parameterName, string messageFormat, Object[] messageArgs);
    internal static ArgumentException ArgumentNullOrEmpty(string parameterName);
    internal static ArgumentOutOfRangeException ArgumentOutOfRange(string parameterName, object actualValue, string messageFormat, Object[] messageArgs);
    internal static ArgumentOutOfRangeException ArgumentMustBeGreaterThanOrEqualTo(string parameterName, object actualValue, object minValue);
    internal static ArgumentOutOfRangeException ArgumentMustBeLessThanOrEqualTo(string parameterName, object actualValue, object maxValue);
    internal static KeyNotFoundException KeyNotFound();
    internal static KeyNotFoundException KeyNotFound(string messageFormat, Object[] messageArgs);
    internal static ObjectDisposedException ObjectDisposed(string messageFormat, Object[] messageArgs);
    internal static OperationCanceledException OperationCanceled();
    internal static OperationCanceledException OperationCanceled(string messageFormat, Object[] messageArgs);
    internal static ArgumentException InvalidEnumArgument(string parameterName, int invalidValue, Type enumClass);
    internal static InvalidOperationException InvalidOperation(string messageFormat, Object[] messageArgs);
    internal static InvalidOperationException InvalidOperation(Exception innerException, string messageFormat, Object[] messageArgs);
    internal static NotSupportedException NotSupported(string messageFormat, Object[] messageArgs);
}
public static class System.Web.Http.GlobalConfiguration : object {
    private static Lazy`1<HttpConfiguration> _configuration;
    private static Lazy`1<HttpMessageHandler> _defaultHandler;
    private static Lazy`1<HttpServer> _defaultServer;
    [CompilerGeneratedAttribute]
private static Func`1<HttpConfiguration> CS$<>9__CachedAnonymousMethodDelegate1;
    [CompilerGeneratedAttribute]
private static Func`1<HttpMessageHandler> CS$<>9__CachedAnonymousMethodDelegate3;
    [CompilerGeneratedAttribute]
private static Func`1<HttpServer> CS$<>9__CachedAnonymousMethodDelegate5;
    public static HttpConfiguration Configuration { get; }
    public static HttpMessageHandler DefaultHandler { get; }
    public static HttpServer DefaultServer { get; }
    private static GlobalConfiguration();
    public static HttpConfiguration get_Configuration();
    public static HttpMessageHandler get_DefaultHandler();
    public static HttpServer get_DefaultServer();
    public static void Configure(Action`1<HttpConfiguration> configurationCallback);
    internal static void Reset();
    private static Lazy`1<HttpConfiguration> CreateConfiguration();
    private static Lazy`1<HttpMessageHandler> CreateDefaultHandler();
    private static Lazy`1<HttpServer> CreateDefaultServer();
    [CompilerGeneratedAttribute]
private static HttpConfiguration <CreateConfiguration>b__0();
    [CompilerGeneratedAttribute]
private static HttpMessageHandler <CreateDefaultHandler>b__2();
    [CompilerGeneratedAttribute]
private static HttpServer <CreateDefaultServer>b__4();
}
internal static class System.Web.Http.HttpMethodHelper : object {
    internal static HttpMethod GetHttpMethod(string method);
}
internal class System.Web.Http.NonOwnedStream : Stream {
    [CompilerGeneratedAttribute]
private Stream <InnerStream>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsDisposed>k__BackingField;
    protected Stream InnerStream { get; protected set; }
    protected bool IsDisposed { get; private set; }
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanTimeout { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public long Position { get; public set; }
    public int ReadTimeout { get; public set; }
    public int WriteTimeout { get; public set; }
    public NonOwnedStream(Stream innerStream);
    [CompilerGeneratedAttribute]
protected Stream get_InnerStream();
    [CompilerGeneratedAttribute]
protected void set_InnerStream(Stream value);
    [CompilerGeneratedAttribute]
protected bool get_IsDisposed();
    [CompilerGeneratedAttribute]
private void set_IsDisposed(bool value);
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanTimeout();
    public virtual bool get_CanWrite();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public virtual int get_ReadTimeout();
    public virtual void set_ReadTimeout(int value);
    public virtual int get_WriteTimeout();
    public virtual void set_WriteTimeout(int value);
    public virtual IAsyncResult BeginRead(Byte[] buffer, int offset, int count, AsyncCallback callback, object state);
    public virtual IAsyncResult BeginWrite(Byte[] buffer, int offset, int count, AsyncCallback callback, object state);
    public virtual void Close();
    public virtual Task CopyToAsync(Stream destination, int bufferSize, CancellationToken cancellationToken);
    protected virtual void Dispose(bool disposing);
    public virtual int EndRead(IAsyncResult asyncResult);
    public virtual void EndWrite(IAsyncResult asyncResult);
    public virtual void Flush();
    public virtual Task FlushAsync(CancellationToken cancellationToken);
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual Task`1<int> ReadAsync(Byte[] buffer, int offset, int count, CancellationToken cancellationToken);
    public virtual int ReadByte();
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
    public virtual void Write(Byte[] buffer, int offset, int count);
    public virtual Task WriteAsync(Byte[] buffer, int offset, int count, CancellationToken cancellationToken);
    public virtual void WriteByte(byte value);
    protected void ThrowIfDisposed();
}
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
internal class System.Web.Http.Properties.CommonWebApiResources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [CompilerGeneratedAttribute]
private static Func`2<string, bool> CS$<>9__CachedAnonymousMethodDelegate1;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string ArgumentInvalidAbsoluteUri { get; }
    internal static string ArgumentInvalidHttpUriScheme { get; }
    internal static string ArgumentMustBeGreaterThanOrEqualTo { get; }
    internal static string ArgumentMustBeLessThanOrEqualTo { get; }
    internal static string ArgumentNullOrEmpty { get; }
    internal static string ArgumentUriHasQueryOrFragment { get; }
    internal static string InvalidEnumArgument { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_ArgumentInvalidAbsoluteUri();
    internal static string get_ArgumentInvalidHttpUriScheme();
    internal static string get_ArgumentMustBeGreaterThanOrEqualTo();
    internal static string get_ArgumentMustBeLessThanOrEqualTo();
    internal static string get_ArgumentNullOrEmpty();
    internal static string get_ArgumentUriHasQueryOrFragment();
    internal static string get_InvalidEnumArgument();
    [CompilerGeneratedAttribute]
private static bool <get_ResourceManager>b__0(string s);
}
[EditorBrowsableAttribute("1")]
[ExtensionAttribute]
public static class System.Web.Http.RouteCollectionExtensions : object {
    [ExtensionAttribute]
public static Route MapHttpRoute(RouteCollection routes, string name, string routeTemplate);
    [ExtensionAttribute]
public static Route MapHttpRoute(RouteCollection routes, string name, string routeTemplate, object defaults);
    [ExtensionAttribute]
public static Route MapHttpRoute(RouteCollection routes, string name, string routeTemplate, object defaults, object constraints);
    [ExtensionAttribute]
public static Route MapHttpRoute(RouteCollection routes, string name, string routeTemplate, object defaults, object constraints, HttpMessageHandler handler);
}
internal class System.Web.Http.WebHost.HttpBatchContextWrapper : HttpContextBase {
    private HttpRequestMessageWrapper _httpRequestWrapper;
    private HttpContextBase _httpContextBase;
    private Hashtable _items;
    public HttpRequestBase Request { get; }
    public HttpResponseBase Response { get; }
    public IDictionary Items { get; }
    public IPrincipal User { get; public set; }
    public HttpBatchContextWrapper(HttpContextBase httpContext, HttpRequestMessage httpRequest);
    public virtual HttpRequestBase get_Request();
    public virtual HttpResponseBase get_Response();
    public virtual IDictionary get_Items();
    public virtual IPrincipal get_User();
    public virtual void set_User(IPrincipal value);
}
public class System.Web.Http.WebHost.HttpControllerHandler : HttpTaskAsyncHandler {
    internal static string OwinEnvironmentHttpContextKey;
    internal static string OwinEnvironmentKey;
    private static Lazy`1<Action`1<HttpContextBase>> _suppressRedirectAction;
    private static Lazy`1<IHostBufferPolicySelector> _bufferPolicySelector;
    private static Lazy`1<IExceptionHandler> _exceptionHandler;
    private static Lazy`1<IExceptionLogger> _exceptionLogger;
    private static Func`2<HttpRequestMessage, X509Certificate2> _retrieveClientCertificate;
    private IHttpRouteData _routeData;
    private HttpMessageInvoker _server;
    [CompilerGeneratedAttribute]
private static Func`1<Action`1<HttpContextBase>> CS$<>9__CachedAnonymousMethodDelegate46;
    [CompilerGeneratedAttribute]
private static Func`1<IHostBufferPolicySelector> CS$<>9__CachedAnonymousMethodDelegate47;
    [CompilerGeneratedAttribute]
private static Func`1<IExceptionHandler> CS$<>9__CachedAnonymousMethodDelegate48;
    [CompilerGeneratedAttribute]
private static Func`1<IExceptionLogger> CS$<>9__CachedAnonymousMethodDelegate49;
    [CompilerGeneratedAttribute]
private static Action`1<HttpContextBase> CS$<>9__CachedAnonymousMethodDelegate4a;
    [CompilerGeneratedAttribute]
private static Action`1<HttpContextBase> CS$<>9__CachedAnonymousMethodDelegate4b;
    public HttpControllerHandler(RouteData routeData);
    public HttpControllerHandler(RouteData routeData, HttpMessageHandler handler);
    private static HttpControllerHandler();
    public virtual Task ProcessRequestAsync(HttpContext context);
    [AsyncStateMachineAttribute("System.Web.Http.WebHost.HttpControllerHandler/<ProcessRequestAsyncCore>d__0")]
[DebuggerStepThroughAttribute]
internal Task ProcessRequestAsyncCore(HttpContextBase contextBase);
    private static void CopyHeaders(HttpHeaders from, HttpContextBase to);
    private static void AddHeaderToHttpRequestMessage(HttpRequestMessage httpRequestMessage, string headerName, String[] headerValues);
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("System.Web.Http.WebHost.HttpControllerHandler/<CopyResponseAsync>d__7")]
internal static Task CopyResponseAsync(HttpContextBase httpContextBase, HttpRequestMessage request, HttpResponseMessage response, IExceptionLogger exceptionLogger, IExceptionHandler exceptionHandler, CancellationToken cancellationToken);
    internal static HttpRequestMessage ConvertRequest(HttpContextBase httpContextBase);
    internal static HttpRequestMessage ConvertRequest(HttpContextBase httpContextBase, IHostBufferPolicySelector policySelector);
    private static HttpContent GetStreamContent(HttpRequestBase requestBase, bool bufferInput);
    internal static void EnsureSuppressFormsAuthenticationRedirect(HttpContextBase httpContextBase);
    private static Task WriteResponseContentAsync(HttpContextBase httpContextBase, HttpRequestMessage request, HttpResponseMessage response, IExceptionLogger exceptionLogger, IExceptionHandler exceptionHandler, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("System.Web.Http.WebHost.HttpControllerHandler/<WriteStreamedResponseContentAsync>d__15")]
[DebuggerStepThroughAttribute]
internal static Task WriteStreamedResponseContentAsync(HttpContextBase httpContextBase, HttpRequestMessage request, HttpResponseMessage response, IExceptionLogger exceptionLogger, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("System.Web.Http.WebHost.HttpControllerHandler/<WriteBufferedResponseContentAsync>d__1b")]
[DebuggerStepThroughAttribute]
internal static Task WriteBufferedResponseContentAsync(HttpContextBase httpContextBase, HttpRequestMessage request, HttpResponseMessage response, IExceptionLogger exceptionLogger, IExceptionHandler exceptionHandler, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("System.Web.Http.WebHost.HttpControllerHandler/<CopyErrorResponseAsync>d__23")]
[DebuggerStepThroughAttribute]
internal static Task`1<bool> CopyErrorResponseAsync(ExceptionContextCatchBlock catchBlock, HttpContextBase httpContextBase, HttpRequestMessage request, HttpResponseMessage response, Exception exception, IExceptionLogger exceptionLogger, IExceptionHandler exceptionHandler, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("System.Web.Http.WebHost.HttpControllerHandler/<WriteErrorResponseContentAsync>d__2c")]
[DebuggerStepThroughAttribute]
private static Task WriteErrorResponseContentAsync(HttpResponseBase httpResponseBase, HttpRequestMessage request, HttpResponseMessage errorResponse, CancellationToken cancellationToken, IExceptionLogger exceptionLogger);
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("System.Web.Http.WebHost.HttpControllerHandler/<CopyResponseStatusAndHeadersAsync>d__31")]
private static Task`1<bool> CopyResponseStatusAndHeadersAsync(HttpContextBase httpContextBase, HttpRequestMessage request, HttpResponseMessage response, IExceptionLogger exceptionLogger, CancellationToken cancellationToken);
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("System.Web.Http.WebHost.HttpControllerHandler/<PrepareHeadersAsync>d__35")]
internal static Task`1<bool> PrepareHeadersAsync(HttpResponseBase responseBase, HttpRequestMessage request, HttpResponseMessage response, IExceptionLogger exceptionLogger, CancellationToken cancellationToken);
    private static void ClearContentAndHeaders(HttpResponseBase httpResponseBase);
    private static void SetEmptyErrorResponse(HttpResponseBase httpResponseBase);
    private static X509Certificate2 RetrieveClientCertificate(HttpRequestMessage request);
    [CompilerGeneratedAttribute]
private static Action`1<HttpContextBase> <.cctor>b__40();
    [CompilerGeneratedAttribute]
private static IHostBufferPolicySelector <.cctor>b__43();
    [CompilerGeneratedAttribute]
private static IExceptionHandler <.cctor>b__44();
    [CompilerGeneratedAttribute]
private static IExceptionLogger <.cctor>b__45();
    [CompilerGeneratedAttribute]
private static void <.cctor>b__41(HttpContextBase httpContext);
    [CompilerGeneratedAttribute]
private static void <.cctor>b__42(HttpContextBase httpContext);
}
public class System.Web.Http.WebHost.HttpControllerRouteHandler : object {
    private static Lazy`1<HttpControllerRouteHandler> _instance;
    [CompilerGeneratedAttribute]
private static Func`1<HttpControllerRouteHandler> CS$<>9__CachedAnonymousMethodDelegate1;
    public static HttpControllerRouteHandler Instance { get; }
    private static HttpControllerRouteHandler();
    public static HttpControllerRouteHandler get_Instance();
    private sealed virtual override IHttpHandler System.Web.Routing.IRouteHandler.GetHttpHandler(RequestContext requestContext);
    protected virtual IHttpHandler GetHttpHandler(RequestContext requestContext);
    [CompilerGeneratedAttribute]
private static HttpControllerRouteHandler <.cctor>b__0();
}
internal class System.Web.Http.WebHost.HttpControllerTypeCacheSerializer : object {
    private static Guid _mvcVersionId;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <CurrentDateOverride>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`2<Type, Module> CS$<>9__CachedAnonymousMethodDelegate2;
    [CompilerGeneratedAttribute]
private static Func`2<IGrouping`2<Module, Type>, Assembly> CS$<>9__CachedAnonymousMethodDelegate3;
    private DateTime CurrentDate { get; }
    internal Nullable`1<DateTime> CurrentDateOverride { get; internal set; }
    private static HttpControllerTypeCacheSerializer();
    private DateTime get_CurrentDate();
    [CompilerGeneratedAttribute]
internal Nullable`1<DateTime> get_CurrentDateOverride();
    [CompilerGeneratedAttribute]
internal void set_CurrentDateOverride(Nullable`1<DateTime> value);
    public ICollection`1<Type> DeserializeTypes(TextReader input);
    public void SerializeTypes(IEnumerable`1<Type> types, TextWriter output);
    [CompilerGeneratedAttribute]
private static Module <SerializeTypes>b__0(Type type);
    [CompilerGeneratedAttribute]
private static Assembly <SerializeTypes>b__1(IGrouping`2<Module, Type> groupedByModule);
}
[ExtensionAttribute]
internal static class System.Web.Http.WebHost.HttpRequestMessageExtensions : object {
    private static string HttpContextBaseKey;
    private static string HttpBatchContextKey;
    [ExtensionAttribute]
public static HttpContextBase GetHttpContext(HttpRequestMessage request);
    [ExtensionAttribute]
public static void SetHttpContext(HttpRequestMessage request, HttpContextBase context);
}
[ExtensionAttribute]
internal static class System.Web.Http.WebHost.HttpResponseBaseExtensions : object {
    private static bool _isSystemWebVersion451OrGreater;
    private static bool _isClientDisconnectedTokenAvailable;
    private static HttpResponseBaseExtensions();
    [ExtensionAttribute]
public static CancellationToken GetClientDisconnectedTokenWhenFixed(HttpResponseBase response);
    private static bool IsClientDisconnectedTokenAvailable();
    private static bool IsSystemWebVersion451OrGreater();
}
[ObsoleteAttribute("Use of this type is not recommended because it no longer has initialization logic.")]
[EditorBrowsableAttribute("1")]
public static class System.Web.Http.WebHost.PreApplicationStartCode : object {
    private static bool _startWasCalled;
    public static void Start();
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
internal class System.Web.Http.WebHost.Properties.SRResources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string RequestBodyAlreadyRead { get; }
    internal static string RequestBodyAlreadyReadInMode { get; }
    internal static string RequestStreamCannotBeReadBufferless { get; }
    internal static string Route_ValidationMustBeStringOrCustomConstraint { get; }
    internal static string RouteCollectionNotSupported { get; }
    internal static string RouteCollectionOutOfRange { get; }
    internal static string RouteCollectionUseDirectly { get; }
    internal static string Serialize_Response_Failed { get; }
    internal static string Serialize_Response_Failed_MediaType { get; }
    internal static string TypeCache_DoNotModify { get; }
    internal static string TypePropertyMustNotBeNull { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_RequestBodyAlreadyRead();
    internal static string get_RequestBodyAlreadyReadInMode();
    internal static string get_RequestStreamCannotBeReadBufferless();
    internal static string get_Route_ValidationMustBeStringOrCustomConstraint();
    internal static string get_RouteCollectionNotSupported();
    internal static string get_RouteCollectionOutOfRange();
    internal static string get_RouteCollectionUseDirectly();
    internal static string get_Serialize_Response_Failed();
    internal static string get_Serialize_Response_Failed_MediaType();
    internal static string get_TypeCache_DoNotModify();
    internal static string get_TypePropertyMustNotBeNull();
}
internal class System.Web.Http.WebHost.Routing.HostedHttpRoute : object {
    [CompilerGeneratedAttribute]
private HttpMessageHandler <Handler>k__BackingField;
    [CompilerGeneratedAttribute]
private Route <OriginalRoute>k__BackingField;
    public string RouteTemplate { get; }
    public IDictionary`2<string, object> Defaults { get; }
    public IDictionary`2<string, object> Constraints { get; }
    public IDictionary`2<string, object> DataTokens { get; }
    public HttpMessageHandler Handler { get; private set; }
    internal Route OriginalRoute { get; private set; }
    public HostedHttpRoute(string uriTemplate, IDictionary`2<string, object> defaults, IDictionary`2<string, object> constraints, IDictionary`2<string, object> dataTokens, HttpMessageHandler handler);
    public sealed virtual string get_RouteTemplate();
    public sealed virtual IDictionary`2<string, object> get_Defaults();
    public sealed virtual IDictionary`2<string, object> get_Constraints();
    public sealed virtual IDictionary`2<string, object> get_DataTokens();
    [CompilerGeneratedAttribute]
public sealed virtual HttpMessageHandler get_Handler();
    [CompilerGeneratedAttribute]
private void set_Handler(HttpMessageHandler value);
    [CompilerGeneratedAttribute]
internal Route get_OriginalRoute();
    [CompilerGeneratedAttribute]
private void set_OriginalRoute(Route value);
    public sealed virtual IHttpRouteData GetRouteData(string rootVirtualPath, HttpRequestMessage request);
    public sealed virtual IHttpVirtualPathData GetVirtualPath(HttpRequestMessage request, IDictionary`2<string, object> values);
}
[DefaultMemberAttribute("Item")]
internal class System.Web.Http.WebHost.Routing.HostedHttpRouteCollection : HttpRouteCollection {
    private RouteCollection _routeCollection;
    private string _virtualPathRoot;
    [CompilerGeneratedAttribute]
private static Func`2<HttpWebRoute, IHttpRoute> CS$<>9__CachedAnonymousMethodDelegate1;
    public string VirtualPathRoot { get; }
    public int Count { get; }
    public IHttpRoute Item { get; }
    public IHttpRoute Item { get; }
    public HostedHttpRouteCollection(RouteCollection routeCollection);
    public HostedHttpRouteCollection(RouteCollection routeCollection, string virtualPathRoot);
    public virtual string get_VirtualPathRoot();
    public virtual int get_Count();
    public virtual IHttpRoute get_Item(string name);
    public virtual IHttpRoute get_Item(int index);
    public virtual IHttpRouteData GetRouteData(HttpRequestMessage request);
    public virtual IHttpVirtualPathData GetVirtualPath(HttpRequestMessage request, string name, IDictionary`2<string, object> values);
    public virtual IHttpRoute CreateRoute(string uriTemplate, IDictionary`2<string, object> defaults, IDictionary`2<string, object> constraints, IDictionary`2<string, object> dataTokens, HttpMessageHandler handler);
    protected virtual void ValidateConstraint(string routeTemplate, string name, object constraint);
    public virtual void Add(string name, IHttpRoute route);
    public virtual void Clear();
    public virtual bool Contains(IHttpRoute item);
    public virtual bool ContainsKey(string name);
    public virtual void CopyTo(IHttpRoute[] array, int arrayIndex);
    public virtual void CopyTo(KeyValuePair`2[] array, int arrayIndex);
    public virtual void Insert(int index, string name, IHttpRoute value);
    public virtual bool Remove(string name);
    public virtual IEnumerator`1<IHttpRoute> GetEnumerator();
    public virtual bool TryGetValue(string name, IHttpRoute& route);
    private static NotSupportedException NotSupportedByRouteCollection();
    private static NotSupportedException NotSupportedByHostedRouteCollection();
    [CompilerGeneratedAttribute]
private static IHttpRoute <GetEnumerator>b__0(HttpWebRoute httpWebRoute);
}
internal class System.Web.Http.WebHost.Routing.HostedHttpRouteData : object {
    [CompilerGeneratedAttribute]
private IHttpRoute <Route>k__BackingField;
    [CompilerGeneratedAttribute]
private RouteData <OriginalRouteData>k__BackingField;
    public IHttpRoute Route { get; private set; }
    public IDictionary`2<string, object> Values { get; }
    internal RouteData OriginalRouteData { get; private set; }
    public HostedHttpRouteData(RouteData routeData);
    [CompilerGeneratedAttribute]
public sealed virtual IHttpRoute get_Route();
    [CompilerGeneratedAttribute]
private void set_Route(IHttpRoute value);
    public sealed virtual IDictionary`2<string, object> get_Values();
    [CompilerGeneratedAttribute]
internal RouteData get_OriginalRouteData();
    [CompilerGeneratedAttribute]
private void set_OriginalRouteData(RouteData value);
}
internal class System.Web.Http.WebHost.Routing.HostedHttpVirtualPathData : object {
    private VirtualPathData _virtualPath;
    [CompilerGeneratedAttribute]
private IHttpRoute <Route>k__BackingField;
    public IHttpRoute Route { get; private set; }
    public string VirtualPath { get; public set; }
    public HostedHttpVirtualPathData(VirtualPathData virtualPath, IHttpRoute httpRoute);
    [CompilerGeneratedAttribute]
public sealed virtual IHttpRoute get_Route();
    [CompilerGeneratedAttribute]
private void set_Route(IHttpRoute value);
    public sealed virtual string get_VirtualPath();
    public sealed virtual void set_VirtualPath(string value);
}
[ExtensionAttribute]
internal static class System.Web.Http.WebHost.Routing.HttpContextBaseExtensions : object {
    internal static string HttpRequestMessageKey;
    private static HttpContextBaseExtensions();
    [ExtensionAttribute]
public static HttpRequestMessage GetHttpRequestMessage(HttpContextBase context);
    [ExtensionAttribute]
public static void SetHttpRequestMessage(HttpContextBase context, HttpRequestMessage request);
    [ExtensionAttribute]
public static HttpRequestMessage GetOrCreateHttpRequestMessage(HttpContextBase context);
}
internal class System.Web.Http.WebHost.Routing.HttpRequestMessageContextWrapper : HttpContextBase {
    private HttpRequestMessageWrapper _httpWrapper;
    private Hashtable _items;
    public HttpRequestBase Request { get; }
    public IDictionary Items { get; }
    public HttpRequestMessageContextWrapper(string virtualPathRoot, HttpRequestMessage httpRequest);
    public virtual HttpRequestBase get_Request();
    public virtual IDictionary get_Items();
}
internal class System.Web.Http.WebHost.Routing.HttpRequestMessageWrapper : HttpRequestBase {
    private string _virtualPathRoot;
    private HttpRequestMessage _httpRequest;
    public string ApplicationPath { get; }
    public string AppRelativeCurrentExecutionFilePath { get; }
    public string CurrentExecutionFilePath { get; }
    public string FilePath { get; }
    public string HttpMethod { get; }
    public bool IsLocal { get; }
    public string Path { get; }
    public string PathInfo { get; }
    public NameValueCollection QueryString { get; }
    public string RawUrl { get; }
    public string RequestType { get; }
    public Uri Url { get; }
    public HttpRequestMessageWrapper(string virtualPathRoot, HttpRequestMessage httpRequest);
    public virtual string get_ApplicationPath();
    public virtual string get_AppRelativeCurrentExecutionFilePath();
    public virtual string get_CurrentExecutionFilePath();
    public virtual string get_FilePath();
    public virtual string get_HttpMethod();
    public virtual bool get_IsLocal();
    public virtual string get_Path();
    public virtual string get_PathInfo();
    public virtual NameValueCollection get_QueryString();
    public virtual string get_RawUrl();
    public virtual string get_RequestType();
    public virtual Uri get_Url();
}
[ExtensionAttribute]
internal static class System.Web.Http.WebHost.Routing.HttpRouteDataExtensions : object {
    [ExtensionAttribute]
public static RouteData ToRouteData(IHttpRouteData httpRouteData);
}
internal class System.Web.Http.WebHost.Routing.HttpRouteExceptionHandler : HttpTaskAsyncHandler {
    private ExceptionDispatchInfo _exceptionInfo;
    private IExceptionLogger _exceptionLogger;
    private IExceptionHandler _exceptionHandler;
    internal ExceptionDispatchInfo ExceptionInfo { get; }
    internal IExceptionLogger ExceptionLogger { get; }
    internal IExceptionHandler ExceptionHandler { get; }
    public HttpRouteExceptionHandler(ExceptionDispatchInfo exceptionInfo);
    internal HttpRouteExceptionHandler(ExceptionDispatchInfo exceptionInfo, IExceptionLogger exceptionLogger, IExceptionHandler exceptionHandler);
    internal ExceptionDispatchInfo get_ExceptionInfo();
    internal IExceptionLogger get_ExceptionLogger();
    internal IExceptionHandler get_ExceptionHandler();
    public virtual Task ProcessRequestAsync(HttpContext context);
    [AsyncStateMachineAttribute("System.Web.Http.WebHost.Routing.HttpRouteExceptionHandler/<ProcessRequestAsync>d__0")]
[DebuggerStepThroughAttribute]
internal Task ProcessRequestAsync(HttpContextBase context);
}
internal class System.Web.Http.WebHost.Routing.HttpRouteExceptionRouteHandler : object {
    private ExceptionDispatchInfo _exceptionInfo;
    internal ExceptionDispatchInfo ExceptionInfo { get; }
    public HttpRouteExceptionRouteHandler(ExceptionDispatchInfo exceptionInfo);
    internal ExceptionDispatchInfo get_ExceptionInfo();
    public sealed virtual IHttpHandler GetHttpHandler(RequestContext requestContext);
}
[ExtensionAttribute]
internal static class System.Web.Http.WebHost.Routing.HttpRouteExtensions : object {
    [ExtensionAttribute]
public static Route ToRoute(IHttpRoute httpRoute);
    private static RouteValueDictionary MakeRouteValueDictionary(IDictionary`2<string, object> dictionary);
}
internal class System.Web.Http.WebHost.Routing.HttpWebRoute : Route {
    internal static string HttpRouteKey;
    [CompilerGeneratedAttribute]
private IHttpRoute <HttpRoute>k__BackingField;
    public IHttpRoute HttpRoute { get; private set; }
    public HttpWebRoute(string url, RouteValueDictionary defaults, RouteValueDictionary constraints, RouteValueDictionary dataTokens, IRouteHandler routeHandler, IHttpRoute httpRoute);
    [CompilerGeneratedAttribute]
public IHttpRoute get_HttpRoute();
    [CompilerGeneratedAttribute]
private void set_HttpRoute(IHttpRoute value);
    protected virtual bool ProcessConstraint(HttpContextBase httpContext, object constraint, string parameterName, RouteValueDictionary values, RouteDirection routeDirection);
    public virtual RouteData GetRouteData(HttpContextBase httpContext);
    public virtual VirtualPathData GetVirtualPath(RequestContext requestContext, RouteValueDictionary values);
    private static RouteValueDictionary GetRouteDictionaryWithoutHttpRouteKey(IDictionary`2<string, object> routeValues);
    private static HttpRouteDirection ConvertRouteDirection(RouteDirection routeDirection);
    internal static void ValidateConstraint(string routeTemplate, string name, object constraint);
    private static Exception CreateInvalidConstraintTypeException(string routeTemplate, string name);
}
internal class System.Web.Http.WebHost.SeekableBufferedRequestStream : NonOwnedStream {
    private static int ReadBufferSize;
    private HttpRequestBase _request;
    private bool _isReadToEndComplete;
    public bool CanSeek { get; }
    public long Position { get; public set; }
    public SeekableBufferedRequestStream(HttpRequestBase request);
    public virtual bool get_CanSeek();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public virtual int EndRead(IAsyncResult asyncResult);
    public virtual int Read(Byte[] buffer, int offset, int count);
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("System.Web.Http.WebHost.SeekableBufferedRequestStream/<ReadAsync>d__0")]
public virtual Task`1<int> ReadAsync(Byte[] buffer, int offset, int count, CancellationToken cancellationToken);
    public virtual int ReadByte();
    public virtual long Seek(long offset, SeekOrigin origin);
    private void SwapToSeekableStream();
}
internal static class System.Web.Http.WebHost.SuppressFormsAuthRedirectHelper : object {
    internal static string AppSettingsSuppressFormsAuthenticationRedirectKey;
    private static SuppressFormsAuthRedirectHelper();
    internal static bool GetEnabled(NameValueCollection appSettings);
}
internal class System.Web.Http.WebHost.TaskWrapperAsyncResult : object {
    private Nullable`1<bool> _completedSynchronously;
    [CompilerGeneratedAttribute]
private object <AsyncState>k__BackingField;
    [CompilerGeneratedAttribute]
private Task <Task>k__BackingField;
    public object AsyncState { get; private set; }
    public WaitHandle AsyncWaitHandle { get; }
    public bool CompletedSynchronously { get; internal set; }
    public bool IsCompleted { get; }
    public Task Task { get; private set; }
    public TaskWrapperAsyncResult(Task task, object asyncState);
    [CompilerGeneratedAttribute]
public sealed virtual object get_AsyncState();
    [CompilerGeneratedAttribute]
private void set_AsyncState(object value);
    public sealed virtual WaitHandle get_AsyncWaitHandle();
    public sealed virtual bool get_CompletedSynchronously();
    internal void set_CompletedSynchronously(bool value);
    public sealed virtual bool get_IsCompleted();
    [CompilerGeneratedAttribute]
public Task get_Task();
    [CompilerGeneratedAttribute]
private void set_Task(Task value);
}
internal class System.Web.Http.WebHost.WebHostAssembliesResolver : object {
    private sealed virtual override ICollection`1<Assembly> System.Web.Http.Dispatcher.IAssembliesResolver.GetAssemblies();
}
public class System.Web.Http.WebHost.WebHostBufferPolicySelector : object {
    public virtual bool UseBufferedInputStream(object hostContext);
    public virtual bool UseBufferedOutputStream(HttpResponseMessage response);
}
public static class System.Web.Http.WebHost.WebHostExceptionCatchBlocks : object {
    private static ExceptionContextCatchBlock _httpControllerHandlerBufferContent;
    private static ExceptionContextCatchBlock _httpControllerHandlerBufferError;
    private static ExceptionContextCatchBlock _httpControllerHandlerComputeContentLength;
    private static ExceptionContextCatchBlock _httpControllerHandlerStreamContent;
    private static ExceptionContextCatchBlock _httpWebRoute;
    public static ExceptionContextCatchBlock HttpControllerHandlerBufferContent { get; }
    public static ExceptionContextCatchBlock HttpControllerHandlerBufferError { get; }
    public static ExceptionContextCatchBlock HttpControllerHandlerComputeContentLength { get; }
    public static ExceptionContextCatchBlock HttpControllerHandlerStreamContent { get; }
    public static ExceptionContextCatchBlock HttpWebRoute { get; }
    private static WebHostExceptionCatchBlocks();
    public static ExceptionContextCatchBlock get_HttpControllerHandlerBufferContent();
    public static ExceptionContextCatchBlock get_HttpControllerHandlerBufferError();
    public static ExceptionContextCatchBlock get_HttpControllerHandlerComputeContentLength();
    public static ExceptionContextCatchBlock get_HttpControllerHandlerStreamContent();
    public static ExceptionContextCatchBlock get_HttpWebRoute();
}
internal class System.Web.Http.WebHost.WebHostExceptionHandler : object {
    private IExceptionHandler _innerHandler;
    public IExceptionHandler InnerHandler { get; }
    public WebHostExceptionHandler(IExceptionHandler innerHandler);
    public IExceptionHandler get_InnerHandler();
    public sealed virtual Task HandleAsync(ExceptionHandlerContext context, CancellationToken cancellationToken);
    private static void HandleWebHostBufferedContentException(ExceptionHandlerContext context);
}
internal class System.Web.Http.WebHost.WebHostHttpControllerTypeResolver : DefaultHttpControllerTypeResolver {
    private static string TypeCacheName;
    public virtual ICollection`1<Type> GetControllerTypes(IAssembliesResolver assembliesResolver);
    private static List`1<Type> ReadTypesFromCache(string cacheName, Predicate`1<Type> predicate, HttpControllerTypeCacheSerializer serializer);
    private static void SaveTypesToCache(string cacheName, IEnumerable`1<Type> matchingTypes, HttpControllerTypeCacheSerializer serializer);
}
internal class System.Web.Http.WebHost.WebHostHttpRequestContext : HttpRequestContext {
    private HttpContextBase _contextBase;
    private HttpRequestBase _requestBase;
    private HttpRequestMessage _request;
    private X509Certificate2 _clientCertificate;
    private bool _clientCertificateSet;
    private HttpConfiguration _configuration;
    private bool _configurationSet;
    private bool _includeErrorDetail;
    private bool _includeErrorDetailSet;
    private bool _isLocal;
    private bool _isLocalSet;
    private UrlHelper _url;
    private bool _urlSet;
    private string _virtualPathRoot;
    private bool _virtualPathRootSet;
    public HttpContextBase Context { get; }
    public HttpRequestBase WebRequest { get; }
    public HttpRequestMessage Request { get; }
    public X509Certificate2 ClientCertificate { get; public set; }
    public HttpConfiguration Configuration { get; public set; }
    public bool IncludeErrorDetail { get; public set; }
    public bool IsLocal { get; public set; }
    public IPrincipal Principal { get; public set; }
    public UrlHelper Url { get; public set; }
    public string VirtualPathRoot { get; public set; }
    public WebHostHttpRequestContext(HttpContextBase contextBase, HttpRequestBase requestBase, HttpRequestMessage request);
    public HttpContextBase get_Context();
    public HttpRequestBase get_WebRequest();
    public HttpRequestMessage get_Request();
    public virtual X509Certificate2 get_ClientCertificate();
    public virtual void set_ClientCertificate(X509Certificate2 value);
    public virtual HttpConfiguration get_Configuration();
    public virtual void set_Configuration(HttpConfiguration value);
    public virtual bool get_IncludeErrorDetail();
    public virtual void set_IncludeErrorDetail(bool value);
    public virtual bool get_IsLocal();
    public virtual void set_IsLocal(bool value);
    public virtual IPrincipal get_Principal();
    public virtual void set_Principal(IPrincipal value);
    public virtual UrlHelper get_Url();
    public virtual void set_Url(UrlHelper value);
    public virtual string get_VirtualPathRoot();
    public virtual void set_VirtualPathRoot(string value);
}
