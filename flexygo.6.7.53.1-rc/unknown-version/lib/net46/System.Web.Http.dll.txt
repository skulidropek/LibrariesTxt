[ExtensionAttribute]
internal static class System.Collections.Generic.CollectionExtensions : object {
    [ExtensionAttribute]
public static T[] AppendAndReallocate(T[] array, T value);
    [ExtensionAttribute]
public static T[] AsArray(IEnumerable`1<T> values);
    [ExtensionAttribute]
public static Collection`1<T> AsCollection(IEnumerable`1<T> enumerable);
    [ExtensionAttribute]
public static IList`1<T> AsIList(IEnumerable`1<T> enumerable);
    [ExtensionAttribute]
public static List`1<T> AsList(IEnumerable`1<T> enumerable);
    [ExtensionAttribute]
public static void RemoveFrom(List`1<T> list, int start);
    [ExtensionAttribute]
public static T SingleDefaultOrError(IList`1<T> list, Action`1<TArg1> errorAction, TArg1 errorArg1);
    [ExtensionAttribute]
public static TMatch SingleOfTypeDefaultOrError(IList`1<TInput> list, Action`1<TArg1> errorAction, TArg1 errorArg1);
    [ExtensionAttribute]
public static T[] ToArrayWithoutNulls(ICollection`1<T> collection);
    [ExtensionAttribute]
public static Dictionary`2<TKey, TValue> ToDictionaryFast(TValue[] array, Func`2<TValue, TKey> keySelector, IEqualityComparer`1<TKey> comparer);
    [ExtensionAttribute]
public static Dictionary`2<TKey, TValue> ToDictionaryFast(IList`1<TValue> list, Func`2<TValue, TKey> keySelector, IEqualityComparer`1<TKey> comparer);
    [ExtensionAttribute]
public static Dictionary`2<TKey, TValue> ToDictionaryFast(IEnumerable`1<TValue> enumerable, Func`2<TValue, TKey> keySelector, IEqualityComparer`1<TKey> comparer);
    private static Dictionary`2<TKey, TValue> ToDictionaryFastNoCheck(IList`1<TValue> list, Func`2<TValue, TKey> keySelector, IEqualityComparer`1<TKey> comparer);
}
[ExtensionAttribute]
[EditorBrowsableAttribute("1")]
internal static class System.Collections.Generic.DictionaryExtensions : object {
    [ExtensionAttribute]
public static void RemoveFromDictionary(IDictionary`2<TKey, TValue> dictionary, Func`2<KeyValuePair`2<TKey, TValue>, bool> removeCondition);
    [ExtensionAttribute]
public static void RemoveFromDictionary(IDictionary`2<TKey, TValue> dictionary, Func`3<KeyValuePair`2<TKey, TValue>, TState, bool> removeCondition, TState state);
    [ExtensionAttribute]
public static bool TryGetValue(IDictionary`2<string, object> collection, string key, T& value);
    [IteratorStateMachineAttribute("System.Collections.Generic.DictionaryExtensions/<FindKeysWithPrefix>d__3`1")]
[ExtensionAttribute]
internal static IEnumerable`1<KeyValuePair`2<string, TValue>> FindKeysWithPrefix(IDictionary`2<string, TValue> dictionary, string prefix);
}
internal class System.Collections.ObjectModel.ListWrapperCollection`1 : Collection`1<T> {
    private List`1<T> _items;
    internal List`1<T> ItemsList { get; }
    internal ListWrapperCollection`1(List`1<T> list);
    internal List`1<T> get_ItemsList();
}
[ExtensionAttribute]
[EditorBrowsableAttribute("1")]
public static class System.Net.Http.Formatting.MediaTypeFormatterExtensions : object {
    [ExtensionAttribute]
public static void AddUriPathExtensionMapping(MediaTypeFormatter formatter, string uriPathExtension, MediaTypeHeaderValue mediaType);
    [ExtensionAttribute]
public static void AddUriPathExtensionMapping(MediaTypeFormatter formatter, string uriPathExtension, string mediaType);
}
public class System.Net.Http.Formatting.UriPathExtensionMapping : MediaTypeMapping {
    public static string UriPathExtensionKey;
    [CompilerGeneratedAttribute]
private string <UriPathExtension>k__BackingField;
    public string UriPathExtension { get; private set; }
    public UriPathExtensionMapping(string uriPathExtension, string mediaType);
    public UriPathExtensionMapping(string uriPathExtension, MediaTypeHeaderValue mediaType);
    private static UriPathExtensionMapping();
    [CompilerGeneratedAttribute]
public string get_UriPathExtension();
    [CompilerGeneratedAttribute]
private void set_UriPathExtension(string value);
    public virtual double TryMatchMediaType(HttpRequestMessage request);
    private static string GetUriPathExtensionOrNull(HttpRequestMessage request);
    private void Initialize(string uriPathExtension);
}
[ExtensionAttribute]
[EditorBrowsableAttribute("1")]
public static class System.Net.Http.HttpRequestMessageExtensions : object {
    [ExtensionAttribute]
public static HttpConfiguration GetConfiguration(HttpRequestMessage request);
    [ExtensionAttribute]
internal static HttpConfiguration LegacyGetConfiguration(HttpRequestMessage request);
    [ExtensionAttribute]
public static void SetConfiguration(HttpRequestMessage request, HttpConfiguration configuration);
    [ExtensionAttribute]
public static IDependencyScope GetDependencyScope(HttpRequestMessage request);
    [ExtensionAttribute]
public static HttpRequestContext GetRequestContext(HttpRequestMessage request);
    [ExtensionAttribute]
public static void SetRequestContext(HttpRequestMessage request, HttpRequestContext context);
    [ExtensionAttribute]
public static SynchronizationContext GetSynchronizationContext(HttpRequestMessage request);
    [ExtensionAttribute]
internal static void SetSynchronizationContext(HttpRequestMessage request, SynchronizationContext synchronizationContext);
    [ExtensionAttribute]
public static X509Certificate2 GetClientCertificate(HttpRequestMessage request);
    [ExtensionAttribute]
internal static X509Certificate2 LegacyGetClientCertificate(HttpRequestMessage request);
    [ExtensionAttribute]
public static IHttpRouteData GetRouteData(HttpRequestMessage request);
    [ExtensionAttribute]
internal static IHttpRouteData LegacyGetRouteData(HttpRequestMessage request);
    [ExtensionAttribute]
public static void SetRouteData(HttpRequestMessage request, IHttpRouteData routeData);
    [ExtensionAttribute]
public static HttpActionDescriptor GetActionDescriptor(HttpRequestMessage request);
    [ExtensionAttribute]
internal static void SetActionDescriptor(HttpRequestMessage request, HttpActionDescriptor actionDescriptor);
    [ExtensionAttribute]
private static T GetProperty(HttpRequestMessage request, string key);
    [ExtensionAttribute]
public static HttpResponseMessage CreateErrorResponse(HttpRequestMessage request, InvalidByteRangeException invalidByteRangeException);
    [ExtensionAttribute]
public static HttpResponseMessage CreateErrorResponse(HttpRequestMessage request, HttpStatusCode statusCode, string message);
    [ExtensionAttribute]
internal static HttpResponseMessage CreateErrorResponse(HttpRequestMessage request, HttpStatusCode statusCode, string message, string messageDetail);
    [ExtensionAttribute]
public static HttpResponseMessage CreateErrorResponse(HttpRequestMessage request, HttpStatusCode statusCode, string message, Exception exception);
    [ExtensionAttribute]
public static HttpResponseMessage CreateErrorResponse(HttpRequestMessage request, HttpStatusCode statusCode, Exception exception);
    [ExtensionAttribute]
public static HttpResponseMessage CreateErrorResponse(HttpRequestMessage request, HttpStatusCode statusCode, ModelStateDictionary modelState);
    [ExtensionAttribute]
public static HttpResponseMessage CreateErrorResponse(HttpRequestMessage request, HttpStatusCode statusCode, HttpError error);
    [ExtensionAttribute]
private static HttpResponseMessage CreateErrorResponse(HttpRequestMessage request, HttpStatusCode statusCode, Func`2<bool, HttpError> errorCreator);
    [ExtensionAttribute]
public static HttpResponseMessage CreateResponse(HttpRequestMessage request, T value);
    [ExtensionAttribute]
public static HttpResponseMessage CreateResponse(HttpRequestMessage request, HttpStatusCode statusCode, T value);
    [ExtensionAttribute]
public static HttpResponseMessage CreateResponse(HttpRequestMessage request, HttpStatusCode statusCode, T value, HttpConfiguration configuration);
    [ExtensionAttribute]
public static HttpResponseMessage CreateResponse(HttpRequestMessage request, HttpStatusCode statusCode, T value, string mediaType);
    [ExtensionAttribute]
public static HttpResponseMessage CreateResponse(HttpRequestMessage request, HttpStatusCode statusCode, T value, MediaTypeHeaderValue mediaType);
    [ExtensionAttribute]
public static HttpResponseMessage CreateResponse(HttpRequestMessage request, HttpStatusCode statusCode, T value, MediaTypeFormatter formatter);
    [ExtensionAttribute]
public static HttpResponseMessage CreateResponse(HttpRequestMessage request, HttpStatusCode statusCode, T value, MediaTypeFormatter formatter, string mediaType);
    [ExtensionAttribute]
public static HttpResponseMessage CreateResponse(HttpRequestMessage request, HttpStatusCode statusCode, T value, MediaTypeFormatter formatter, MediaTypeHeaderValue mediaType);
    [ExtensionAttribute]
public static void RegisterForDispose(HttpRequestMessage request, IDisposable resource);
    [ExtensionAttribute]
public static void RegisterForDispose(HttpRequestMessage request, IEnumerable`1<IDisposable> resources);
    [ExtensionAttribute]
public static void DisposeRequestResources(HttpRequestMessage request);
    [ExtensionAttribute]
public static Guid GetCorrelationId(HttpRequestMessage request);
    [ExtensionAttribute]
public static IEnumerable`1<KeyValuePair`2<string, string>> GetQueryNameValuePairs(HttpRequestMessage request);
    [ExtensionAttribute]
public static UrlHelper GetUrlHelper(HttpRequestMessage request);
    [ExtensionAttribute]
public static bool IsLocal(HttpRequestMessage request);
    [ExtensionAttribute]
internal static bool LegacyIsLocal(HttpRequestMessage request);
    [ExtensionAttribute]
public static bool IsBatchRequest(HttpRequestMessage request);
    [ExtensionAttribute]
public static bool ShouldIncludeErrorDetail(HttpRequestMessage request);
    [ExtensionAttribute]
internal static bool LegacyShouldIncludeErrorDetail(HttpRequestMessage request);
    [ExtensionAttribute]
public static IEnumerable`1<IDisposable> GetResourcesForDisposal(HttpRequestMessage request);
    private static List`1<IDisposable> GetRegisteredResourcesForDispose(HttpRequestMessage request);
}
[ExtensionAttribute]
[EditorBrowsableAttribute("1")]
public static class System.Net.Http.HttpResponseMessageExtensions : object {
    [ExtensionAttribute]
public static bool TryGetContentValue(HttpResponseMessage response, T& value);
    [ExtensionAttribute]
internal static void EnsureResponseHasRequest(HttpResponseMessage response, HttpRequestMessage request);
}
internal static class System.Threading.Tasks.TaskHelpers : object {
    private static Task _defaultCompleted;
    private static Task`1<object> _completedTaskReturningNull;
    private static TaskHelpers();
    internal static Task Canceled();
    internal static Task`1<TResult> Canceled();
    internal static Task Completed();
    internal static Task FromError(Exception exception);
    internal static Task`1<TResult> FromError(Exception exception);
    internal static Task`1<object> NullResult();
}
[ExtensionAttribute]
internal static class System.Threading.Tasks.TaskHelpersExtensions : object {
    [AsyncStateMachineAttribute("System.Threading.Tasks.TaskHelpersExtensions/<CastToObject>d__0")]
[ExtensionAttribute]
internal static Task`1<object> CastToObject(Task task);
    [AsyncStateMachineAttribute("System.Threading.Tasks.TaskHelpersExtensions/<CastToObject>d__1`1")]
[ExtensionAttribute]
internal static Task`1<object> CastToObject(Task`1<T> task);
    [ExtensionAttribute]
internal static void ThrowIfFaulted(Task task);
    [ExtensionAttribute]
internal static bool TryGetResult(Task`1<TResult> task, TResult& result);
}
[ExtensionAttribute]
[EditorBrowsableAttribute("1")]
internal static class System.TypeExtensions : object {
    [ExtensionAttribute]
public static bool IsNullable(Type type);
}
[AttributeUsageAttribute("64")]
public class System.Web.Http.AcceptVerbsAttribute : Attribute {
    private Collection`1<HttpMethod> _httpMethods;
    public Collection`1<HttpMethod> HttpMethods { get; }
    public AcceptVerbsAttribute(string method);
    public AcceptVerbsAttribute(String[] methods);
    internal AcceptVerbsAttribute(HttpMethod[] methods);
    public sealed virtual Collection`1<HttpMethod> get_HttpMethods();
}
[AttributeUsageAttribute("64")]
public class System.Web.Http.ActionNameAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Name { get; private set; }
    public ActionNameAttribute(string name);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
}
[AttributeUsageAttribute("68")]
public class System.Web.Http.AllowAnonymousAttribute : Attribute {
}
public abstract class System.Web.Http.ApiController : object {
    private HttpActionContext _actionContext;
    private bool _initialized;
    public HttpConfiguration Configuration { get; public set; }
    public HttpControllerContext ControllerContext { get; public set; }
    public HttpActionContext ActionContext { get; public set; }
    public ModelStateDictionary ModelState { get; }
    public HttpRequestMessage Request { get; public set; }
    public HttpRequestContext RequestContext { get; public set; }
    public UrlHelper Url { get; public set; }
    public IPrincipal User { get; public set; }
    public HttpConfiguration get_Configuration();
    public void set_Configuration(HttpConfiguration value);
    public HttpControllerContext get_ControllerContext();
    public void set_ControllerContext(HttpControllerContext value);
    public HttpActionContext get_ActionContext();
    public void set_ActionContext(HttpActionContext value);
    public ModelStateDictionary get_ModelState();
    public HttpRequestMessage get_Request();
    public void set_Request(HttpRequestMessage value);
    public HttpRequestContext get_RequestContext();
    public void set_RequestContext(HttpRequestContext value);
    public UrlHelper get_Url();
    public void set_Url(UrlHelper value);
    public IPrincipal get_User();
    public void set_User(IPrincipal value);
    public virtual Task`1<HttpResponseMessage> ExecuteAsync(HttpControllerContext controllerContext, CancellationToken cancellationToken);
    public void Validate(TEntity entity);
    public void Validate(TEntity entity, string keyPrefix);
    protected internal virtual BadRequestResult BadRequest();
    protected internal virtual BadRequestErrorMessageResult BadRequest(string message);
    protected internal virtual InvalidModelStateResult BadRequest(ModelStateDictionary modelState);
    protected internal virtual ConflictResult Conflict();
    protected internal virtual NegotiatedContentResult`1<T> Content(HttpStatusCode statusCode, T value);
    protected internal FormattedContentResult`1<T> Content(HttpStatusCode statusCode, T value, MediaTypeFormatter formatter);
    protected internal FormattedContentResult`1<T> Content(HttpStatusCode statusCode, T value, MediaTypeFormatter formatter, string mediaType);
    protected internal virtual FormattedContentResult`1<T> Content(HttpStatusCode statusCode, T value, MediaTypeFormatter formatter, MediaTypeHeaderValue mediaType);
    protected internal CreatedNegotiatedContentResult`1<T> Created(string location, T content);
    protected internal virtual CreatedNegotiatedContentResult`1<T> Created(Uri location, T content);
    protected internal CreatedAtRouteNegotiatedContentResult`1<T> CreatedAtRoute(string routeName, object routeValues, T content);
    protected internal virtual CreatedAtRouteNegotiatedContentResult`1<T> CreatedAtRoute(string routeName, IDictionary`2<string, object> routeValues, T content);
    protected internal virtual InternalServerErrorResult InternalServerError();
    protected internal virtual ExceptionResult InternalServerError(Exception exception);
    protected internal JsonResult`1<T> Json(T content);
    protected internal JsonResult`1<T> Json(T content, JsonSerializerSettings serializerSettings);
    protected internal virtual JsonResult`1<T> Json(T content, JsonSerializerSettings serializerSettings, Encoding encoding);
    protected internal virtual NotFoundResult NotFound();
    protected internal virtual OkResult Ok();
    protected internal virtual OkNegotiatedContentResult`1<T> Ok(T content);
    protected internal virtual RedirectResult Redirect(string location);
    protected internal virtual RedirectResult Redirect(Uri location);
    protected internal RedirectToRouteResult RedirectToRoute(string routeName, object routeValues);
    protected internal virtual RedirectToRouteResult RedirectToRoute(string routeName, IDictionary`2<string, object> routeValues);
    protected internal virtual ResponseMessageResult ResponseMessage(HttpResponseMessage response);
    protected internal virtual StatusCodeResult StatusCode(HttpStatusCode status);
    protected internal UnauthorizedResult Unauthorized(AuthenticationHeaderValue[] challenges);
    protected internal virtual UnauthorizedResult Unauthorized(IEnumerable`1<AuthenticationHeaderValue> challenges);
    protected virtual void Initialize(HttpControllerContext controllerContext);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
}
[AttributeUsageAttribute("68")]
public class System.Web.Http.AuthorizeAttribute : AuthorizationFilterAttribute {
    private static String[] _emptyArray;
    private object _typeId;
    private string _roles;
    private String[] _rolesSplit;
    private string _users;
    private String[] _usersSplit;
    public string Roles { get; public set; }
    public object TypeId { get; }
    public string Users { get; public set; }
    private static AuthorizeAttribute();
    public string get_Roles();
    public void set_Roles(string value);
    public virtual object get_TypeId();
    public string get_Users();
    public void set_Users(string value);
    protected virtual bool IsAuthorized(HttpActionContext actionContext);
    public virtual void OnAuthorization(HttpActionContext actionContext);
    protected virtual void HandleUnauthorizedRequest(HttpActionContext actionContext);
    private static bool SkipAuthorization(HttpActionContext actionContext);
    internal static String[] SplitString(string original);
}
public enum System.Web.Http.Batch.BatchExecutionOrder : Enum {
    public int value__;
    public static BatchExecutionOrder Sequential;
    public static BatchExecutionOrder NonSequential;
}
internal class System.Web.Http.Batch.BatchHttpRequestContext : HttpRequestContext {
    private HttpRequestContext _batchContext;
    public HttpRequestContext BatchContext { get; }
    public X509Certificate2 ClientCertificate { get; public set; }
    public HttpConfiguration Configuration { get; public set; }
    public bool IncludeErrorDetail { get; public set; }
    public bool IsLocal { get; public set; }
    public IPrincipal Principal { get; public set; }
    public IHttpRouteData RouteData { get; public set; }
    public UrlHelper Url { get; public set; }
    public string VirtualPathRoot { get; public set; }
    public BatchHttpRequestContext(HttpRequestContext batchContext);
    public HttpRequestContext get_BatchContext();
    public virtual X509Certificate2 get_ClientCertificate();
    public virtual void set_ClientCertificate(X509Certificate2 value);
    public virtual HttpConfiguration get_Configuration();
    public virtual void set_Configuration(HttpConfiguration value);
    public virtual bool get_IncludeErrorDetail();
    public virtual void set_IncludeErrorDetail(bool value);
    public virtual bool get_IsLocal();
    public virtual void set_IsLocal(bool value);
    public virtual IPrincipal get_Principal();
    public virtual void set_Principal(IPrincipal value);
    public virtual IHttpRouteData get_RouteData();
    public virtual void set_RouteData(IHttpRouteData value);
    public virtual UrlHelper get_Url();
    public virtual void set_Url(UrlHelper value);
    public virtual string get_VirtualPathRoot();
    public virtual void set_VirtualPathRoot(string value);
}
[ExtensionAttribute]
[EditorBrowsableAttribute("1")]
public static class System.Web.Http.Batch.BatchHttpRequestMessageExtensions : object {
    private static string HttpBatchContextKey;
    private static String[] BatchRequestPropertyExclusions;
    private static BatchHttpRequestMessageExtensions();
    [ExtensionAttribute]
public static void CopyBatchRequestProperties(HttpRequestMessage subRequest, HttpRequestMessage batchRequest);
}
public class System.Web.Http.Batch.DefaultHttpBatchHandler : HttpBatchHandler {
    private static string MultiPartContentSubtype;
    private static string MultiPartMixed;
    private BatchExecutionOrder _executionOrder;
    [CompilerGeneratedAttribute]
private IList`1<string> <SupportedContentTypes>k__BackingField;
    public BatchExecutionOrder ExecutionOrder { get; public set; }
    public IList`1<string> SupportedContentTypes { get; private set; }
    public DefaultHttpBatchHandler(HttpServer httpServer);
    public BatchExecutionOrder get_ExecutionOrder();
    public void set_ExecutionOrder(BatchExecutionOrder value);
    [CompilerGeneratedAttribute]
public IList`1<string> get_SupportedContentTypes();
    [CompilerGeneratedAttribute]
private void set_SupportedContentTypes(IList`1<string> value);
    public virtual Task`1<HttpResponseMessage> CreateResponseMessageAsync(IList`1<HttpResponseMessage> responses, HttpRequestMessage request, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("System.Web.Http.Batch.DefaultHttpBatchHandler/<ProcessBatchAsync>d__12")]
public virtual Task`1<HttpResponseMessage> ProcessBatchAsync(HttpRequestMessage request, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("System.Web.Http.Batch.DefaultHttpBatchHandler/<ExecuteRequestMessagesAsync>d__13")]
public virtual Task`1<IList`1<HttpResponseMessage>> ExecuteRequestMessagesAsync(IEnumerable`1<HttpRequestMessage> requests, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("System.Web.Http.Batch.DefaultHttpBatchHandler/<ParseBatchRequestsAsync>d__14")]
public virtual Task`1<IList`1<HttpRequestMessage>> ParseBatchRequestsAsync(HttpRequestMessage request, CancellationToken cancellationToken);
    public virtual void ValidateRequest(HttpRequestMessage request);
}
public abstract class System.Web.Http.Batch.HttpBatchHandler : HttpMessageHandler {
    private HttpServer _server;
    [CompilerGeneratedAttribute]
private HttpMessageInvoker <Invoker>k__BackingField;
    public HttpMessageInvoker Invoker { get; private set; }
    internal IExceptionLogger ExceptionLogger { get; internal set; }
    internal IExceptionHandler ExceptionHandler { get; internal set; }
    protected HttpBatchHandler(HttpServer httpServer);
    [CompilerGeneratedAttribute]
public HttpMessageInvoker get_Invoker();
    [CompilerGeneratedAttribute]
private void set_Invoker(HttpMessageInvoker value);
    internal IExceptionLogger get_ExceptionLogger();
    internal void set_ExceptionLogger(IExceptionLogger value);
    internal IExceptionHandler get_ExceptionHandler();
    internal void set_ExceptionHandler(IExceptionHandler value);
    [AsyncStateMachineAttribute("System.Web.Http.Batch.HttpBatchHandler/<SendAsync>d__12")]
protected sealed virtual Task`1<HttpResponseMessage> SendAsync(HttpRequestMessage request, CancellationToken cancellationToken);
    public abstract virtual Task`1<HttpResponseMessage> ProcessBatchAsync(HttpRequestMessage request, CancellationToken cancellationToken);
}
internal class System.Web.Http.Controllers.ActionFilterResult : object {
    private HttpActionBinding _binding;
    private HttpActionContext _context;
    private ServicesContainer _services;
    private IActionFilter[] _filters;
    public ActionFilterResult(HttpActionBinding binding, HttpActionContext context, ServicesContainer services, IActionFilter[] filters);
    [AsyncStateMachineAttribute("System.Web.Http.Controllers.ActionFilterResult/<ExecuteAsync>d__5")]
public sealed virtual Task`1<HttpResponseMessage> ExecuteAsync(CancellationToken cancellationToken);
    public static Func`1<Task`1<HttpResponseMessage>> InvokeActionWithActionFilters(HttpActionContext actionContext, CancellationToken cancellationToken, IActionFilter[] filters, Func`1<Task`1<HttpResponseMessage>> innerAction);
    private static Func`1<Task`1<HttpResponseMessage>> InvokeActionWithActionFilters(HttpActionContext actionContext, CancellationToken cancellationToken, IActionFilter[] filters, Func`2<T, Task`1<HttpResponseMessage>> innerAction, T state);
}
public class System.Web.Http.Controllers.ApiControllerActionInvoker : object {
    public virtual Task`1<HttpResponseMessage> InvokeActionAsync(HttpActionContext actionContext, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("System.Web.Http.Controllers.ApiControllerActionInvoker/<InvokeActionAsyncCore>d__1")]
private static Task`1<HttpResponseMessage> InvokeActionAsyncCore(HttpActionContext actionContext, CancellationToken cancellationToken);
}
public class System.Web.Http.Controllers.ApiControllerActionSelector : object {
    private ActionSelectorCacheItem _fastCache;
    private object _cacheKey;
    public virtual HttpActionDescriptor SelectAction(HttpControllerContext controllerContext);
    public virtual ILookup`2<string, HttpActionDescriptor> GetActionMapping(HttpControllerDescriptor controllerDescriptor);
    private ActionSelectorCacheItem GetInternalSelector(HttpControllerDescriptor controllerDescriptor);
}
internal class System.Web.Http.Controllers.AuthenticationFilterResult : object {
    private HttpActionContext _context;
    private ApiController _controller;
    private IAuthenticationFilter[] _filters;
    private IHttpActionResult _innerResult;
    public AuthenticationFilterResult(HttpActionContext context, ApiController controller, IAuthenticationFilter[] filters, IHttpActionResult innerResult);
    [AsyncStateMachineAttribute("System.Web.Http.Controllers.AuthenticationFilterResult/<ExecuteAsync>d__5")]
public sealed virtual Task`1<HttpResponseMessage> ExecuteAsync(CancellationToken cancellationToken);
}
internal class System.Web.Http.Controllers.AuthorizationFilterResult : object {
    private HttpActionContext _context;
    private IAuthorizationFilter[] _filters;
    private IHttpActionResult _innerResult;
    public AuthorizationFilterResult(HttpActionContext context, IAuthorizationFilter[] filters, IHttpActionResult innerResult);
    public sealed virtual Task`1<HttpResponseMessage> ExecuteAsync(CancellationToken cancellationToken);
}
public class System.Web.Http.Controllers.ControllerServices : ServicesContainer {
    private Dictionary`2<Type, object> _overrideSingle;
    private Dictionary`2<Type, List`1<object>> _overrideMulti;
    private ServicesContainer _parent;
    public ControllerServices(ServicesContainer parent);
    public virtual bool IsSingleService(Type serviceType);
    public virtual object GetService(Type serviceType);
    public virtual IEnumerable`1<object> GetServices(Type serviceType);
    protected virtual void ReplaceSingle(Type serviceType, object service);
    protected virtual void ClearSingle(Type serviceType);
    protected virtual List`1<object> GetServiceInstances(Type serviceType);
}
internal class System.Web.Http.Controllers.ExceptionFilterResult : object {
    private HttpActionContext _context;
    private IExceptionFilter[] _filters;
    private IExceptionLogger _exceptionLogger;
    private IExceptionHandler _exceptionHandler;
    private IHttpActionResult _innerResult;
    public ExceptionFilterResult(HttpActionContext context, IExceptionFilter[] filters, IExceptionLogger exceptionLogger, IExceptionHandler exceptionHandler, IHttpActionResult innerResult);
    [AsyncStateMachineAttribute("System.Web.Http.Controllers.ExceptionFilterResult/<ExecuteAsync>d__6")]
public sealed virtual Task`1<HttpResponseMessage> ExecuteAsync(CancellationToken cancellationToken);
}
internal class System.Web.Http.Controllers.FilterGrouping : object {
    private IActionFilter[] _actionFilters;
    private IAuthorizationFilter[] _authorizationFilters;
    private IAuthenticationFilter[] _authenticationFilters;
    private IExceptionFilter[] _exceptionFilters;
    public IActionFilter[] ActionFilters { get; }
    public IAuthorizationFilter[] AuthorizationFilters { get; }
    public IAuthenticationFilter[] AuthenticationFilters { get; }
    public IExceptionFilter[] ExceptionFilters { get; }
    public FilterGrouping(IEnumerable`1<FilterInfo> filters);
    public IActionFilter[] get_ActionFilters();
    public IAuthorizationFilter[] get_AuthorizationFilters();
    public IAuthenticationFilter[] get_AuthenticationFilters();
    public IExceptionFilter[] get_ExceptionFilters();
    private static T[] SelectAvailable(List`1<FilterInfo> filters, FilterScope overrideFiltersBeforeScope);
    private static FilterScope SelectLastOverrideScope(List`1<FilterInfo> overrideFilters);
}
public class System.Web.Http.Controllers.HttpActionBinding : object {
    private HttpActionDescriptor _actionDescriptor;
    private HttpParameterBinding[] _parameterBindings;
    private ModelMetadataProvider _metadataProvider;
    public HttpActionDescriptor ActionDescriptor { get; public set; }
    public HttpParameterBinding[] ParameterBindings { get; public set; }
    public HttpActionBinding(HttpActionDescriptor actionDescriptor, HttpParameterBinding[] bindings);
    public HttpActionDescriptor get_ActionDescriptor();
    public void set_ActionDescriptor(HttpActionDescriptor value);
    public HttpParameterBinding[] get_ParameterBindings();
    public void set_ParameterBindings(HttpParameterBinding[] value);
    public virtual Task ExecuteBindingAsync(HttpActionContext actionContext, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("System.Web.Http.Controllers.HttpActionBinding/<ExecuteBindingAsyncCore>d__12")]
private Task ExecuteBindingAsyncCore(HttpActionContext actionContext, CancellationToken cancellationToken);
}
public class System.Web.Http.Controllers.HttpActionContext : object {
    private ModelStateDictionary _modelState;
    private Dictionary`2<string, object> _operationArguments;
    private HttpActionDescriptor _actionDescriptor;
    private HttpControllerContext _controllerContext;
    [CompilerGeneratedAttribute]
private HttpResponseMessage <Response>k__BackingField;
    public HttpControllerContext ControllerContext { get; public set; }
    public HttpActionDescriptor ActionDescriptor { get; public set; }
    public ModelStateDictionary ModelState { get; }
    public Dictionary`2<string, object> ActionArguments { get; }
    public HttpResponseMessage Response { get; public set; }
    public HttpRequestMessage Request { get; }
    public HttpRequestContext RequestContext { get; }
    public HttpActionContext(HttpControllerContext controllerContext, HttpActionDescriptor actionDescriptor);
    public HttpControllerContext get_ControllerContext();
    public void set_ControllerContext(HttpControllerContext value);
    public HttpActionDescriptor get_ActionDescriptor();
    public void set_ActionDescriptor(HttpActionDescriptor value);
    public ModelStateDictionary get_ModelState();
    public Dictionary`2<string, object> get_ActionArguments();
    [CompilerGeneratedAttribute]
public HttpResponseMessage get_Response();
    [CompilerGeneratedAttribute]
public void set_Response(HttpResponseMessage value);
    public HttpRequestMessage get_Request();
    public HttpRequestContext get_RequestContext();
}
[ExtensionAttribute]
[EditorBrowsableAttribute("1")]
public static class System.Web.Http.Controllers.HttpActionContextExtensions : object {
    [ExtensionAttribute]
public static ModelMetadataProvider GetMetadataProvider(HttpActionContext actionContext);
    [ExtensionAttribute]
public static IEnumerable`1<ModelValidatorProvider> GetValidatorProviders(HttpActionContext actionContext);
    [ExtensionAttribute]
public static IEnumerable`1<ModelValidator> GetValidators(HttpActionContext actionContext, ModelMetadata metadata);
    [ExtensionAttribute]
internal static IEnumerable`1<ModelValidator> GetValidators(HttpActionContext actionContext, ModelMetadata metadata, IModelValidatorCache validatorCache);
    [ExtensionAttribute]
internal static IModelValidatorCache GetValidatorCache(HttpActionContext actionContext);
    [ExtensionAttribute]
public static bool TryBindStrongModel(HttpActionContext actionContext, ModelBindingContext parentBindingContext, string propertyName, ModelMetadataProvider metadataProvider, TModel& model);
    [ExtensionAttribute]
public static bool Bind(HttpActionContext actionContext, ModelBindingContext bindingContext);
    [ExtensionAttribute]
public static bool Bind(HttpActionContext actionContext, ModelBindingContext bindingContext, IEnumerable`1<IModelBinder> binders);
}
public abstract class System.Web.Http.Controllers.HttpActionDescriptor : object {
    private ConcurrentDictionary`2<object, object> _properties;
    private IActionResultConverter _converter;
    private Lazy`1<Collection`1<FilterInfo>> _filterPipeline;
    private FilterGrouping _filterGrouping;
    private Collection`1<FilterInfo> _filterPipelineForGrouping;
    private HttpConfiguration _configuration;
    private HttpControllerDescriptor _controllerDescriptor;
    private Collection`1<HttpMethod> _supportedHttpMethods;
    private HttpActionBinding _actionBinding;
    private static ResponseMessageResultConverter _responseMessageResultConverter;
    private static VoidResultConverter _voidResultConverter;
    public string ActionName { get; }
    public HttpConfiguration Configuration { get; public set; }
    public HttpActionBinding ActionBinding { get; public set; }
    public HttpControllerDescriptor ControllerDescriptor { get; public set; }
    public Type ReturnType { get; }
    public IActionResultConverter ResultConverter { get; }
    public Collection`1<HttpMethod> SupportedHttpMethods { get; }
    public ConcurrentDictionary`2<object, object> Properties { get; }
    protected HttpActionDescriptor(HttpControllerDescriptor controllerDescriptor);
    private static HttpActionDescriptor();
    public abstract virtual string get_ActionName();
    public HttpConfiguration get_Configuration();
    public void set_Configuration(HttpConfiguration value);
    public virtual HttpActionBinding get_ActionBinding();
    public virtual void set_ActionBinding(HttpActionBinding value);
    public HttpControllerDescriptor get_ControllerDescriptor();
    public void set_ControllerDescriptor(HttpControllerDescriptor value);
    public abstract virtual Type get_ReturnType();
    public virtual IActionResultConverter get_ResultConverter();
    public virtual Collection`1<HttpMethod> get_SupportedHttpMethods();
    public virtual ConcurrentDictionary`2<object, object> get_Properties();
    public virtual Collection`1<T> GetCustomAttributes();
    public virtual Collection`1<T> GetCustomAttributes(bool inherit);
    public virtual Collection`1<IFilter> GetFilters();
    public abstract virtual Collection`1<HttpParameterDescriptor> GetParameters();
    internal static IActionResultConverter GetResultConverter(Type type);
    public abstract virtual Task`1<object> ExecuteAsync(HttpControllerContext controllerContext, IDictionary`2<string, object> arguments, CancellationToken cancellationToken);
    public virtual Collection`1<FilterInfo> GetFilterPipeline();
    internal FilterGrouping GetFilterGrouping();
    private Collection`1<FilterInfo> InitializeFilterPipeline();
    [IteratorStateMachineAttribute("System.Web.Http.Controllers.HttpActionDescriptor/<RemoveDuplicates>d__41")]
private static IEnumerable`1<FilterInfo> RemoveDuplicates(IEnumerable`1<FilterInfo> filters);
    private static bool AllowMultiple(object filterInstance);
    [CompilerGeneratedAttribute]
private IEnumerable`1<FilterInfo> <InitializeFilterPipeline>b__40_0(IFilterProvider fp);
}
[ExtensionAttribute]
internal static class System.Web.Http.Controllers.HttpActionDescriptorExtensions : object {
    private static string AttributeRoutedPropertyKey;
    [ExtensionAttribute]
public static bool IsAttributeRouted(HttpActionDescriptor actionDescriptor);
    [ExtensionAttribute]
public static void SetIsAttributeRouted(HttpActionDescriptor actionDescriptor, bool value);
}
public class System.Web.Http.Controllers.HttpControllerContext : object {
    private HttpRequestContext _requestContext;
    private HttpRequestMessage _request;
    private HttpControllerDescriptor _controllerDescriptor;
    private IHttpController _controller;
    public HttpConfiguration Configuration { get; public set; }
    public HttpControllerDescriptor ControllerDescriptor { get; public set; }
    public IHttpController Controller { get; public set; }
    public HttpRequestMessage Request { get; public set; }
    public HttpRequestContext RequestContext { get; public set; }
    public IHttpRouteData RouteData { get; public set; }
    public HttpControllerContext(HttpRequestContext requestContext, HttpRequestMessage request, HttpControllerDescriptor controllerDescriptor, IHttpController controller);
    public HttpControllerContext(HttpConfiguration configuration, IHttpRouteData routeData, HttpRequestMessage request);
    public HttpConfiguration get_Configuration();
    public void set_Configuration(HttpConfiguration value);
    public HttpControllerDescriptor get_ControllerDescriptor();
    public void set_ControllerDescriptor(HttpControllerDescriptor value);
    public IHttpController get_Controller();
    public void set_Controller(IHttpController value);
    public HttpRequestMessage get_Request();
    public void set_Request(HttpRequestMessage value);
    public HttpRequestContext get_RequestContext();
    public void set_RequestContext(HttpRequestContext value);
    public IHttpRouteData get_RouteData();
    public void set_RouteData(IHttpRouteData value);
}
public class System.Web.Http.Controllers.HttpControllerDescriptor : object {
    private ConcurrentDictionary`2<object, object> _properties;
    private HttpConfiguration _configuration;
    private string _controllerName;
    private Type _controllerType;
    private Object[] _attributeCache;
    private Object[] _declaredOnlyAttributeCache;
    public ConcurrentDictionary`2<object, object> Properties { get; }
    public HttpConfiguration Configuration { get; public set; }
    public string ControllerName { get; public set; }
    public Type ControllerType { get; public set; }
    public HttpControllerDescriptor(HttpConfiguration configuration, string controllerName, Type controllerType);
    internal HttpControllerDescriptor(HttpConfiguration configuration);
    public virtual ConcurrentDictionary`2<object, object> get_Properties();
    public HttpConfiguration get_Configuration();
    public void set_Configuration(HttpConfiguration value);
    public string get_ControllerName();
    public void set_ControllerName(string value);
    public Type get_ControllerType();
    public void set_ControllerType(Type value);
    public virtual IHttpController CreateController(HttpRequestMessage request);
    public virtual Collection`1<IFilter> GetFilters();
    public virtual Collection`1<T> GetCustomAttributes();
    public virtual Collection`1<T> GetCustomAttributes(bool inherit);
    internal void Initialize(HttpConfiguration configuration);
    private void Initialize();
    private static void InvokeAttributesOnControllerType(HttpControllerDescriptor controllerDescriptor, Type type);
}
[ExtensionAttribute]
internal static class System.Web.Http.Controllers.HttpControllerDescriptorExtensions : object {
    private static string AttributeRoutedPropertyKey;
    [ExtensionAttribute]
public static bool IsAttributeRouted(HttpControllerDescriptor controllerDescriptor);
    [ExtensionAttribute]
public static void SetIsAttributeRouted(HttpControllerDescriptor controllerDescriptor, bool value);
}
public class System.Web.Http.Controllers.HttpControllerSettings : object {
    private MediaTypeFormatterCollection _formatters;
    private ParameterBindingRulesCollection _parameterBindingRules;
    private ServicesContainer _services;
    private HttpConfiguration _configuration;
    public MediaTypeFormatterCollection Formatters { get; }
    public ParameterBindingRulesCollection ParameterBindingRules { get; }
    public ServicesContainer Services { get; }
    internal bool IsFormatterCollectionInitialized { get; }
    internal bool IsParameterBindingRuleCollectionInitialized { get; }
    internal bool IsServiceCollectionInitialized { get; }
    public HttpControllerSettings(HttpConfiguration configuration);
    public MediaTypeFormatterCollection get_Formatters();
    public ParameterBindingRulesCollection get_ParameterBindingRules();
    public ServicesContainer get_Services();
    internal bool get_IsFormatterCollectionInitialized();
    internal bool get_IsParameterBindingRuleCollectionInitialized();
    internal bool get_IsServiceCollectionInitialized();
}
public abstract class System.Web.Http.Controllers.HttpParameterBinding : object {
    private HttpParameterDescriptor _descriptor;
    public bool WillReadBody { get; }
    public bool IsValid { get; }
    public string ErrorMessage { get; }
    public HttpParameterDescriptor Descriptor { get; }
    protected HttpParameterBinding(HttpParameterDescriptor descriptor);
    public virtual bool get_WillReadBody();
    public bool get_IsValid();
    public virtual string get_ErrorMessage();
    public HttpParameterDescriptor get_Descriptor();
    public abstract virtual Task ExecuteBindingAsync(ModelMetadataProvider metadataProvider, HttpActionContext actionContext, CancellationToken cancellationToken);
    protected object GetValue(HttpActionContext actionContext);
    protected void SetValue(HttpActionContext actionContext, object value);
}
public abstract class System.Web.Http.Controllers.HttpParameterDescriptor : object {
    private ConcurrentDictionary`2<object, object> _properties;
    private ParameterBindingAttribute _parameterBindingAttribute;
    private bool _searchedModelBinderAttribute;
    private HttpConfiguration _configuration;
    private HttpActionDescriptor _actionDescriptor;
    public HttpConfiguration Configuration { get; public set; }
    public HttpActionDescriptor ActionDescriptor { get; public set; }
    public ConcurrentDictionary`2<object, object> Properties { get; }
    public object DefaultValue { get; }
    public string ParameterName { get; }
    public Type ParameterType { get; }
    public string Prefix { get; }
    public bool IsOptional { get; }
    public ParameterBindingAttribute ParameterBinderAttribute { get; public set; }
    protected HttpParameterDescriptor(HttpActionDescriptor actionDescriptor);
    public HttpConfiguration get_Configuration();
    public void set_Configuration(HttpConfiguration value);
    public HttpActionDescriptor get_ActionDescriptor();
    public void set_ActionDescriptor(HttpActionDescriptor value);
    public ConcurrentDictionary`2<object, object> get_Properties();
    public virtual object get_DefaultValue();
    public abstract virtual string get_ParameterName();
    public abstract virtual Type get_ParameterType();
    public virtual string get_Prefix();
    public virtual bool get_IsOptional();
    public virtual ParameterBindingAttribute get_ParameterBinderAttribute();
    public virtual void set_ParameterBinderAttribute(ParameterBindingAttribute value);
    public virtual Collection`1<T> GetCustomAttributes();
    private ParameterBindingAttribute FindParameterBindingAttribute();
    private static ParameterBindingAttribute ChooseAttribute(IList`1<ParameterBindingAttribute> list);
}
public class System.Web.Http.Controllers.HttpRequestContext : object {
    [CompilerGeneratedAttribute]
private X509Certificate2 <ClientCertificate>k__BackingField;
    [CompilerGeneratedAttribute]
private HttpConfiguration <Configuration>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IncludeErrorDetail>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsLocal>k__BackingField;
    [CompilerGeneratedAttribute]
private IPrincipal <Principal>k__BackingField;
    [CompilerGeneratedAttribute]
private IHttpRouteData <RouteData>k__BackingField;
    [CompilerGeneratedAttribute]
private UrlHelper <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private string <VirtualPathRoot>k__BackingField;
    public X509Certificate2 ClientCertificate { get; public set; }
    public HttpConfiguration Configuration { get; public set; }
    public bool IncludeErrorDetail { get; public set; }
    public bool IsLocal { get; public set; }
    public IPrincipal Principal { get; public set; }
    public IHttpRouteData RouteData { get; public set; }
    public UrlHelper Url { get; public set; }
    public string VirtualPathRoot { get; public set; }
    [CompilerGeneratedAttribute]
public virtual X509Certificate2 get_ClientCertificate();
    [CompilerGeneratedAttribute]
public virtual void set_ClientCertificate(X509Certificate2 value);
    [CompilerGeneratedAttribute]
public virtual HttpConfiguration get_Configuration();
    [CompilerGeneratedAttribute]
public virtual void set_Configuration(HttpConfiguration value);
    [CompilerGeneratedAttribute]
public virtual bool get_IncludeErrorDetail();
    [CompilerGeneratedAttribute]
public virtual void set_IncludeErrorDetail(bool value);
    [CompilerGeneratedAttribute]
public virtual bool get_IsLocal();
    [CompilerGeneratedAttribute]
public virtual void set_IsLocal(bool value);
    [CompilerGeneratedAttribute]
public virtual IPrincipal get_Principal();
    [CompilerGeneratedAttribute]
public virtual void set_Principal(IPrincipal value);
    [CompilerGeneratedAttribute]
public virtual IHttpRouteData get_RouteData();
    [CompilerGeneratedAttribute]
public virtual void set_RouteData(IHttpRouteData value);
    [CompilerGeneratedAttribute]
public virtual UrlHelper get_Url();
    [CompilerGeneratedAttribute]
public virtual void set_Url(UrlHelper value);
    [CompilerGeneratedAttribute]
public virtual string get_VirtualPathRoot();
    [CompilerGeneratedAttribute]
public virtual void set_VirtualPathRoot(string value);
}
public interface System.Web.Http.Controllers.IActionHttpMethodProvider {
    public Collection`1<HttpMethod> HttpMethods { get; }
    public abstract virtual Collection`1<HttpMethod> get_HttpMethods();
}
public interface System.Web.Http.Controllers.IActionResultConverter {
    public abstract virtual HttpResponseMessage Convert(HttpControllerContext controllerContext, object actionResult);
}
public interface System.Web.Http.Controllers.IActionValueBinder {
    public abstract virtual HttpActionBinding GetBinding(HttpActionDescriptor actionDescriptor);
}
public interface System.Web.Http.Controllers.IControllerConfiguration {
    public abstract virtual void Initialize(HttpControllerSettings controllerSettings, HttpControllerDescriptor controllerDescriptor);
}
public interface System.Web.Http.Controllers.IHttpActionInvoker {
    public abstract virtual Task`1<HttpResponseMessage> InvokeActionAsync(HttpActionContext actionContext, CancellationToken cancellationToken);
}
public interface System.Web.Http.Controllers.IHttpActionSelector {
    public abstract virtual HttpActionDescriptor SelectAction(HttpControllerContext controllerContext);
    public abstract virtual ILookup`2<string, HttpActionDescriptor> GetActionMapping(HttpControllerDescriptor controllerDescriptor);
}
public interface System.Web.Http.Controllers.IHttpController {
    public abstract virtual Task`1<HttpResponseMessage> ExecuteAsync(HttpControllerContext controllerContext, CancellationToken cancellationToken);
}
[ExtensionAttribute]
public static class System.Web.Http.Controllers.ParameterBindingExtensions : object {
    [ExtensionAttribute]
public static HttpParameterBinding BindAsError(HttpParameterDescriptor parameter, string message);
    [ExtensionAttribute]
public static HttpParameterBinding BindWithAttribute(HttpParameterDescriptor parameter, ParameterBindingAttribute attribute);
    [ExtensionAttribute]
public static HttpParameterBinding BindWithModelBinding(HttpParameterDescriptor parameter);
    [ExtensionAttribute]
public static HttpParameterBinding BindWithModelBinding(HttpParameterDescriptor parameter, IModelBinder binder);
    [ExtensionAttribute]
public static HttpParameterBinding BindWithModelBinding(HttpParameterDescriptor parameter, ValueProviderFactory[] valueProviderFactories);
    [ExtensionAttribute]
public static HttpParameterBinding BindWithModelBinding(HttpParameterDescriptor parameter, IEnumerable`1<ValueProviderFactory> valueProviderFactories);
    [ExtensionAttribute]
public static HttpParameterBinding BindWithModelBinding(HttpParameterDescriptor parameter, IModelBinder binder, IEnumerable`1<ValueProviderFactory> valueProviderFactories);
    [ExtensionAttribute]
public static HttpParameterBinding BindWithFormatter(HttpParameterDescriptor parameter);
    [ExtensionAttribute]
public static HttpParameterBinding BindWithFormatter(HttpParameterDescriptor parameter, MediaTypeFormatter[] formatters);
    [ExtensionAttribute]
public static HttpParameterBinding BindWithFormatter(HttpParameterDescriptor parameter, IEnumerable`1<MediaTypeFormatter> formatters);
    [ExtensionAttribute]
public static HttpParameterBinding BindWithFormatter(HttpParameterDescriptor parameter, IEnumerable`1<MediaTypeFormatter> formatters, IBodyModelValidator bodyModelValidator);
}
public class System.Web.Http.Controllers.ReflectedHttpActionDescriptor : HttpActionDescriptor {
    private static Object[] _empty;
    private Lazy`1<Collection`1<HttpParameterDescriptor>> _parameters;
    private ParameterInfo[] _parameterInfos;
    private Lazy`1<ActionExecutor> _actionExecutor;
    private MethodInfo _methodInfo;
    private Type _returnType;
    private string _actionName;
    private Collection`1<HttpMethod> _supportedHttpMethods;
    private Object[] _attributeCache;
    private Object[] _declaredOnlyAttributeCache;
    private static HttpMethod[] _supportedHttpMethodsByConvention;
    public string ActionName { get; }
    public Collection`1<HttpMethod> SupportedHttpMethods { get; }
    public MethodInfo MethodInfo { get; public set; }
    private ParameterInfo[] ParameterInfos { get; }
    public Type ReturnType { get; }
    public ReflectedHttpActionDescriptor(HttpControllerDescriptor controllerDescriptor, MethodInfo methodInfo);
    private static ReflectedHttpActionDescriptor();
    public virtual string get_ActionName();
    public virtual Collection`1<HttpMethod> get_SupportedHttpMethods();
    public MethodInfo get_MethodInfo();
    public void set_MethodInfo(MethodInfo value);
    private ParameterInfo[] get_ParameterInfos();
    public virtual Type get_ReturnType();
    public virtual Collection`1<T> GetCustomAttributes(bool inherit);
    public virtual Task`1<object> ExecuteAsync(HttpControllerContext controllerContext, IDictionary`2<string, object> arguments, CancellationToken cancellationToken);
    public virtual Collection`1<IFilter> GetFilters();
    public virtual Collection`1<HttpParameterDescriptor> GetParameters();
    private void InitializeProperties(MethodInfo methodInfo);
    internal static Type GetReturnType(MethodInfo methodInfo);
    private Collection`1<HttpParameterDescriptor> InitializeParameterDescriptors();
    private Object[] PrepareParameters(IDictionary`2<string, object> parameters, HttpControllerContext controllerContext);
    private object ExtractParameterFromDictionary(ParameterInfo parameterInfo, IDictionary`2<string, object> parameters, HttpControllerContext controllerContext);
    private static string GetActionName(MethodInfo methodInfo, Object[] actionAttributes);
    private static Collection`1<HttpMethod> GetSupportedHttpMethods(MethodInfo methodInfo, Object[] actionAttributes);
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    private static ActionExecutor InitializeActionExecutor(MethodInfo methodInfo);
    [CompilerGeneratedAttribute]
private Collection`1<HttpParameterDescriptor> <.ctor>b__11_0();
    [CompilerGeneratedAttribute]
private Collection`1<HttpParameterDescriptor> <.ctor>b__12_0();
    [CompilerGeneratedAttribute]
private ActionExecutor <InitializeProperties>b__28_0();
    [CompilerGeneratedAttribute]
private ReflectedHttpParameterDescriptor <InitializeParameterDescriptors>b__30_0(ParameterInfo item);
}
public class System.Web.Http.Controllers.ReflectedHttpParameterDescriptor : HttpParameterDescriptor {
    private ParameterInfo _parameterInfo;
    public object DefaultValue { get; }
    public ParameterInfo ParameterInfo { get; public set; }
    public bool IsOptional { get; }
    public string ParameterName { get; }
    public Type ParameterType { get; }
    public ReflectedHttpParameterDescriptor(HttpActionDescriptor actionDescriptor, ParameterInfo parameterInfo);
    public virtual object get_DefaultValue();
    public ParameterInfo get_ParameterInfo();
    public void set_ParameterInfo(ParameterInfo value);
    public virtual bool get_IsOptional();
    public virtual string get_ParameterName();
    public virtual Type get_ParameterType();
    public virtual Collection`1<TAttribute> GetCustomAttributes();
}
internal class System.Web.Http.Controllers.RequestBackedHttpRequestContext : HttpRequestContext {
    private HttpRequestMessage _request;
    private X509Certificate2 _certificate;
    private bool _certificateSet;
    private HttpConfiguration _configuration;
    private bool _configurationSet;
    private bool _includeErrorDetail;
    private bool _includeErrorDetailSet;
    private bool _isLocal;
    private bool _isLocalSet;
    private IHttpRouteData _routeData;
    private bool _routeDataSet;
    private UrlHelper _url;
    private bool _urlSet;
    private string _virtualPathRoot;
    private bool _virtualPathRootSet;
    public HttpRequestMessage Request { get; public set; }
    public X509Certificate2 ClientCertificate { get; public set; }
    public HttpConfiguration Configuration { get; public set; }
    public bool IncludeErrorDetail { get; public set; }
    public bool IsLocal { get; public set; }
    public IHttpRouteData RouteData { get; public set; }
    public UrlHelper Url { get; public set; }
    public string VirtualPathRoot { get; public set; }
    public RequestBackedHttpRequestContext(HttpRequestMessage request);
    public HttpRequestMessage get_Request();
    public void set_Request(HttpRequestMessage value);
    public virtual X509Certificate2 get_ClientCertificate();
    public virtual void set_ClientCertificate(X509Certificate2 value);
    public virtual HttpConfiguration get_Configuration();
    public virtual void set_Configuration(HttpConfiguration value);
    public virtual bool get_IncludeErrorDetail();
    public virtual void set_IncludeErrorDetail(bool value);
    public virtual bool get_IsLocal();
    public virtual void set_IsLocal(bool value);
    public virtual IHttpRouteData get_RouteData();
    public virtual void set_RouteData(IHttpRouteData value);
    public virtual UrlHelper get_Url();
    public virtual void set_Url(UrlHelper value);
    public virtual string get_VirtualPathRoot();
    public virtual void set_VirtualPathRoot(string value);
}
public class System.Web.Http.Controllers.ResponseMessageResultConverter : object {
    public sealed virtual HttpResponseMessage Convert(HttpControllerContext controllerContext, object actionResult);
}
public abstract class System.Web.Http.Controllers.ServicesContainer : object {
    internal Lazy`1<IExceptionLogger> ExceptionServicesLogger;
    internal Lazy`1<IExceptionHandler> ExceptionServicesHandler;
    public abstract virtual object GetService(Type serviceType);
    public abstract virtual IEnumerable`1<object> GetServices(Type serviceType);
    protected abstract virtual List`1<object> GetServiceInstances(Type serviceType);
    protected virtual void ResetCache(Type serviceType);
    public abstract virtual bool IsSingleService(Type serviceType);
    public void Add(Type serviceType, object service);
    public void AddRange(Type serviceType, IEnumerable`1<object> services);
    public virtual void Clear(Type serviceType);
    protected abstract virtual void ClearSingle(Type serviceType);
    protected virtual void ClearMultiple(Type serviceType);
    public int FindIndex(Type serviceType, Predicate`1<object> match);
    public void Insert(Type serviceType, int index, object service);
    public void InsertRange(Type serviceType, int index, IEnumerable`1<object> services);
    public bool Remove(Type serviceType, object service);
    public int RemoveAll(Type serviceType, Predicate`1<object> match);
    public void RemoveAt(Type serviceType, int index);
    public void Replace(Type serviceType, object service);
    protected abstract virtual void ReplaceSingle(Type serviceType, object service);
    protected virtual void ReplaceMultiple(Type serviceType, object service);
    public void ReplaceRange(Type serviceType, IEnumerable`1<object> services);
    public virtual void Dispose();
    private IExceptionLogger CreateExceptionServicesLogger();
    private IExceptionHandler CreateExceptionServicesHandler();
}
public class System.Web.Http.Controllers.ValueResultConverter`1 : object {
    public sealed virtual HttpResponseMessage Convert(HttpControllerContext controllerContext, object actionResult);
}
public class System.Web.Http.Controllers.VoidResultConverter : object {
    public sealed virtual HttpResponseMessage Convert(HttpControllerContext controllerContext, object actionResult);
}
internal class System.Web.Http.Dependencies.EmptyResolver : object {
    private static IDependencyResolver _instance;
    public static IDependencyResolver Instance { get; }
    private static EmptyResolver();
    public static IDependencyResolver get_Instance();
    public sealed virtual IDependencyScope BeginScope();
    public sealed virtual void Dispose();
    public sealed virtual object GetService(Type serviceType);
    public sealed virtual IEnumerable`1<object> GetServices(Type serviceType);
}
public interface System.Web.Http.Dependencies.IDependencyResolver {
    public abstract virtual IDependencyScope BeginScope();
}
public interface System.Web.Http.Dependencies.IDependencyScope {
    public abstract virtual object GetService(Type serviceType);
    public abstract virtual IEnumerable`1<object> GetServices(Type serviceType);
}
public class System.Web.Http.Description.ApiDescription : object {
    [CompilerGeneratedAttribute]
private HttpMethod <HttpMethod>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RelativePath>k__BackingField;
    [CompilerGeneratedAttribute]
private HttpActionDescriptor <ActionDescriptor>k__BackingField;
    [CompilerGeneratedAttribute]
private IHttpRoute <Route>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Documentation>k__BackingField;
    [CompilerGeneratedAttribute]
private Collection`1<MediaTypeFormatter> <SupportedResponseFormatters>k__BackingField;
    [CompilerGeneratedAttribute]
private Collection`1<MediaTypeFormatter> <SupportedRequestBodyFormatters>k__BackingField;
    [CompilerGeneratedAttribute]
private Collection`1<ApiParameterDescription> <ParameterDescriptions>k__BackingField;
    [CompilerGeneratedAttribute]
private ResponseDescription <ResponseDescription>k__BackingField;
    public HttpMethod HttpMethod { get; public set; }
    public string RelativePath { get; public set; }
    public HttpActionDescriptor ActionDescriptor { get; public set; }
    public IHttpRoute Route { get; public set; }
    public string Documentation { get; public set; }
    public Collection`1<MediaTypeFormatter> SupportedResponseFormatters { get; internal set; }
    public Collection`1<MediaTypeFormatter> SupportedRequestBodyFormatters { get; internal set; }
    public Collection`1<ApiParameterDescription> ParameterDescriptions { get; internal set; }
    public ResponseDescription ResponseDescription { get; internal set; }
    public string ID { get; }
    [CompilerGeneratedAttribute]
public HttpMethod get_HttpMethod();
    [CompilerGeneratedAttribute]
public void set_HttpMethod(HttpMethod value);
    [CompilerGeneratedAttribute]
public string get_RelativePath();
    [CompilerGeneratedAttribute]
public void set_RelativePath(string value);
    [CompilerGeneratedAttribute]
public HttpActionDescriptor get_ActionDescriptor();
    [CompilerGeneratedAttribute]
public void set_ActionDescriptor(HttpActionDescriptor value);
    [CompilerGeneratedAttribute]
public IHttpRoute get_Route();
    [CompilerGeneratedAttribute]
public void set_Route(IHttpRoute value);
    [CompilerGeneratedAttribute]
public string get_Documentation();
    [CompilerGeneratedAttribute]
public void set_Documentation(string value);
    [CompilerGeneratedAttribute]
public Collection`1<MediaTypeFormatter> get_SupportedResponseFormatters();
    [CompilerGeneratedAttribute]
internal void set_SupportedResponseFormatters(Collection`1<MediaTypeFormatter> value);
    [CompilerGeneratedAttribute]
public Collection`1<MediaTypeFormatter> get_SupportedRequestBodyFormatters();
    [CompilerGeneratedAttribute]
internal void set_SupportedRequestBodyFormatters(Collection`1<MediaTypeFormatter> value);
    [CompilerGeneratedAttribute]
public Collection`1<ApiParameterDescription> get_ParameterDescriptions();
    [CompilerGeneratedAttribute]
internal void set_ParameterDescriptions(Collection`1<ApiParameterDescription> value);
    [CompilerGeneratedAttribute]
public ResponseDescription get_ResponseDescription();
    [CompilerGeneratedAttribute]
internal void set_ResponseDescription(ResponseDescription value);
    public string get_ID();
}
public class System.Web.Http.Description.ApiExplorer : object {
    private Lazy`1<Collection`1<ApiDescription>> _apiDescriptions;
    private HttpConfiguration _config;
    private static Regex _actionVariableRegex;
    private static Regex _controllerVariableRegex;
    [CompilerGeneratedAttribute]
private IDocumentationProvider <DocumentationProvider>k__BackingField;
    public Collection`1<ApiDescription> ApiDescriptions { get; }
    public IDocumentationProvider DocumentationProvider { get; public set; }
    public ApiExplorer(HttpConfiguration configuration);
    private static ApiExplorer();
    public sealed virtual Collection`1<ApiDescription> get_ApiDescriptions();
    [CompilerGeneratedAttribute]
public IDocumentationProvider get_DocumentationProvider();
    [CompilerGeneratedAttribute]
public void set_DocumentationProvider(IDocumentationProvider value);
    public virtual bool ShouldExploreController(string controllerVariableValue, HttpControllerDescriptor controllerDescriptor, IHttpRoute route);
    public virtual bool ShouldExploreAction(string actionVariableValue, HttpActionDescriptor actionDescriptor, IHttpRoute route);
    public virtual Collection`1<HttpMethod> GetHttpMethodsSupportedByAction(IHttpRoute route, HttpActionDescriptor actionDescriptor);
    [IteratorStateMachineAttribute("System.Web.Http.Description.ApiExplorer/<FlattenRoutes>d__14")]
private IEnumerable`1<IHttpRoute> FlattenRoutes(IEnumerable`1<IHttpRoute> routes);
    private static HttpControllerDescriptor GetDirectRouteController(CandidateAction[] directRouteCandidates);
    private Collection`1<ApiDescription> InitializeApiDescriptions();
    private Collection`1<ApiDescription> ExploreDirectRoute(HttpControllerDescriptor controllerDescriptor, CandidateAction[] candidates, IHttpRoute route);
    private Collection`1<ApiDescription> ExploreRouteControllers(IDictionary`2<string, HttpControllerDescriptor> controllerMappings, IHttpRoute route);
    private void ExploreRouteActions(IHttpRoute route, string localPath, HttpControllerDescriptor controllerDescriptor, Collection`1<ApiDescription> apiDescriptions);
    private void PopulateActionDescriptions(IEnumerable`1<HttpActionDescriptor> actionDescriptors, string actionVariableValue, IHttpRoute route, string localPath, Collection`1<ApiDescription> apiDescriptions);
    private void PopulateActionDescriptions(HttpActionDescriptor actionDescriptor, IHttpRoute route, string localPath, Collection`1<ApiDescription> apiDescriptions);
    private ResponseDescription CreateResponseDescription(HttpActionDescriptor actionDescriptor);
    [IteratorStateMachineAttribute("System.Web.Http.Description.ApiExplorer/<GetInnerFormatters>d__23")]
private static IEnumerable`1<MediaTypeFormatter> GetInnerFormatters(IEnumerable`1<MediaTypeFormatter> mediaTypeFormatters);
    private static bool ShouldEmitPrefixes(ICollection`1<ApiParameterDescription> parameterDescriptions);
    internal static bool TryExpandUriParameters(IHttpRoute route, HttpParsedRoute parsedRoute, ICollection`1<ApiParameterDescription> parameterDescriptions, String& expandedRouteTemplate);
    private static Type GetCollectionElementType(Type collectionType);
    private static void AddPlaceholderForProperties(Dictionary`2<string, object> parameterValuesForRoute, IEnumerable`1<PropertyInfo> properties, string prefix);
    private static bool IsBindableCollection(Type type);
    private static bool IsBindableDictionry(Type type);
    private static bool IsBindableKeyValuePair(Type type);
    private static void AddPlaceholder(Dictionary`2<string, object> parameterValuesForRoute, string queryParameterName);
    private IList`1<ApiParameterDescription> CreateParameterDescriptions(HttpActionDescriptor actionDescriptor, HttpParsedRoute parsedRoute, IDictionary`2<string, object> routeDefaults);
    private static void AddUndeclaredRouteParameters(HttpParsedRoute parsedRoute, IDictionary`2<string, object> routeDefaults, IList`1<ApiParameterDescription> parameterDescriptions);
    private ApiParameterDescription CreateParameterDescriptionFromDescriptor(HttpParameterDescriptor parameter);
    private ApiParameterDescription CreateParameterDescriptionFromBinding(HttpParameterBinding parameterBinding);
    private string GetApiDocumentation(HttpActionDescriptor actionDescriptor);
    private string GetApiParameterDocumentation(HttpParameterDescriptor parameterDescriptor);
    private string GetApiResponseDocumentation(HttpActionDescriptor actionDescriptor);
    private static Collection`1<ApiDescription> RemoveInvalidApiDescriptions(Collection`1<ApiDescription> apiDescriptions);
    private static bool MatchRegexConstraint(IHttpRoute route, string parameterName, string parameterValue);
    private static HttpActionBinding GetActionBinding(HttpActionDescriptor actionDescriptor);
}
[AttributeUsageAttribute("452")]
public class System.Web.Http.Description.ApiExplorerSettingsAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <IgnoreApi>k__BackingField;
    public bool IgnoreApi { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_IgnoreApi();
    [CompilerGeneratedAttribute]
public void set_IgnoreApi(bool value);
}
public class System.Web.Http.Description.ApiParameterDescription : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Documentation>k__BackingField;
    [CompilerGeneratedAttribute]
private ApiParameterSource <Source>k__BackingField;
    [CompilerGeneratedAttribute]
private HttpParameterDescriptor <ParameterDescriptor>k__BackingField;
    public string Name { get; public set; }
    public string Documentation { get; public set; }
    public ApiParameterSource Source { get; public set; }
    public HttpParameterDescriptor ParameterDescriptor { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Documentation();
    [CompilerGeneratedAttribute]
public void set_Documentation(string value);
    [CompilerGeneratedAttribute]
public ApiParameterSource get_Source();
    [CompilerGeneratedAttribute]
public void set_Source(ApiParameterSource value);
    [CompilerGeneratedAttribute]
public HttpParameterDescriptor get_ParameterDescriptor();
    [CompilerGeneratedAttribute]
public void set_ParameterDescriptor(HttpParameterDescriptor value);
    internal IEnumerable`1<PropertyInfo> GetBindableProperties();
    internal bool CanConvertPropertiesFromString();
    internal static IEnumerable`1<PropertyInfo> GetBindableProperties(Type type);
}
public enum System.Web.Http.Description.ApiParameterSource : Enum {
    public int value__;
    public static ApiParameterSource FromUri;
    public static ApiParameterSource FromBody;
    public static ApiParameterSource Unknown;
}
public interface System.Web.Http.Description.IApiExplorer {
    public Collection`1<ApiDescription> ApiDescriptions { get; }
    public abstract virtual Collection`1<ApiDescription> get_ApiDescriptions();
}
public interface System.Web.Http.Description.IDocumentationProvider {
    public abstract virtual string GetDocumentation(HttpControllerDescriptor controllerDescriptor);
    public abstract virtual string GetDocumentation(HttpActionDescriptor actionDescriptor);
    public abstract virtual string GetDocumentation(HttpParameterDescriptor parameterDescriptor);
    public abstract virtual string GetResponseDocumentation(HttpActionDescriptor actionDescriptor);
}
public class System.Web.Http.Description.ResponseDescription : object {
    [CompilerGeneratedAttribute]
private Type <DeclaredType>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <ResponseType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Documentation>k__BackingField;
    public Type DeclaredType { get; public set; }
    public Type ResponseType { get; public set; }
    public string Documentation { get; public set; }
    [CompilerGeneratedAttribute]
public Type get_DeclaredType();
    [CompilerGeneratedAttribute]
public void set_DeclaredType(Type value);
    [CompilerGeneratedAttribute]
public Type get_ResponseType();
    [CompilerGeneratedAttribute]
public void set_ResponseType(Type value);
    [CompilerGeneratedAttribute]
public string get_Documentation();
    [CompilerGeneratedAttribute]
public void set_Documentation(string value);
}
[AttributeUsageAttribute("64")]
public class System.Web.Http.Description.ResponseTypeAttribute : Attribute {
    [CompilerGeneratedAttribute]
private Type <ResponseType>k__BackingField;
    public Type ResponseType { get; private set; }
    public ResponseTypeAttribute(Type responseType);
    [CompilerGeneratedAttribute]
public Type get_ResponseType();
    [CompilerGeneratedAttribute]
private void set_ResponseType(Type value);
}
public class System.Web.Http.Dispatcher.DefaultAssembliesResolver : object {
    public virtual ICollection`1<Assembly> GetAssemblies();
}
public class System.Web.Http.Dispatcher.DefaultHttpControllerActivator : object {
    private Tuple`2<HttpControllerDescriptor, Func`1<IHttpController>> _fastCache;
    private object _cacheKey;
    public sealed virtual IHttpController Create(HttpRequestMessage request, HttpControllerDescriptor controllerDescriptor, Type controllerType);
    private static IHttpController GetInstanceOrActivator(HttpRequestMessage request, Type controllerType, Func`1& activator);
}
public class System.Web.Http.Dispatcher.DefaultHttpControllerSelector : object {
    public static string ControllerSuffix;
    private static string ControllerKey;
    private HttpConfiguration _configuration;
    private HttpControllerTypeCache _controllerTypeCache;
    private Lazy`1<ConcurrentDictionary`2<string, HttpControllerDescriptor>> _controllerInfoCache;
    public DefaultHttpControllerSelector(HttpConfiguration configuration);
    private static DefaultHttpControllerSelector();
    public virtual HttpControllerDescriptor SelectController(HttpRequestMessage request);
    public virtual IDictionary`2<string, HttpControllerDescriptor> GetControllerMapping();
    public virtual string GetControllerName(HttpRequestMessage request);
    private static HttpControllerDescriptor GetDirectRouteController(IHttpRouteData routeData);
    private static Exception CreateDirectRouteAmbiguousControllerException(CandidateAction[] candidates);
    private static Exception CreateAmbiguousControllerException(IHttpRoute route, string controllerName, ICollection`1<Type> matchingTypes);
    private ConcurrentDictionary`2<string, HttpControllerDescriptor> InitializeControllerInfoCache();
}
public class System.Web.Http.Dispatcher.DefaultHttpControllerTypeResolver : object {
    private Predicate`1<Type> _isControllerTypePredicate;
    private Func`2<Assembly, Type[]> _getTypesFunc;
    protected internal Predicate`1<Type> IsControllerTypePredicate { get; }
    public DefaultHttpControllerTypeResolver(Predicate`1<Type> predicate);
    protected internal virtual Predicate`1<Type> get_IsControllerTypePredicate();
    internal static bool IsControllerType(Type t);
    public virtual ICollection`1<Type> GetControllerTypes(IAssembliesResolver assembliesResolver);
    internal static Type[] GetTypes(Assembly assembly);
    internal static bool HasValidControllerName(Type controllerType);
    internal void SetGetTypesFunc(Func`2<Assembly, Type[]> getTypesFunc);
    private static bool TypeIsVisible(Type type);
    [CompilerGeneratedAttribute]
private bool <GetControllerTypes>b__7_0(Type x);
}
public class System.Web.Http.Dispatcher.HttpControllerDispatcher : HttpMessageHandler {
    private HttpConfiguration _configuration;
    private IExceptionLogger _exceptionLogger;
    private IExceptionHandler _exceptionHandler;
    private IHttpControllerSelector _controllerSelector;
    public HttpConfiguration Configuration { get; }
    internal IExceptionLogger ExceptionLogger { get; internal set; }
    internal IExceptionHandler ExceptionHandler { get; internal set; }
    private IHttpControllerSelector ControllerSelector { get; }
    public HttpControllerDispatcher(HttpConfiguration configuration);
    public HttpConfiguration get_Configuration();
    internal IExceptionLogger get_ExceptionLogger();
    internal void set_ExceptionLogger(IExceptionLogger value);
    internal IExceptionHandler get_ExceptionHandler();
    internal void set_ExceptionHandler(IExceptionHandler value);
    private IHttpControllerSelector get_ControllerSelector();
    [AsyncStateMachineAttribute("System.Web.Http.Dispatcher.HttpControllerDispatcher/<SendAsync>d__15")]
protected virtual Task`1<HttpResponseMessage> SendAsync(HttpRequestMessage request, CancellationToken cancellationToken);
    private static HttpControllerContext CreateControllerContext(HttpRequestMessage request, HttpControllerDescriptor controllerDescriptor, IHttpController controller);
    private static HttpConfiguration EnsureNonNull(HttpConfiguration configuration);
}
internal class System.Web.Http.Dispatcher.HttpControllerTypeCache : object {
    private HttpConfiguration _configuration;
    private Lazy`1<Dictionary`2<string, ILookup`2<string, Type>>> _cache;
    internal Dictionary`2<string, ILookup`2<string, Type>> Cache { get; }
    public HttpControllerTypeCache(HttpConfiguration configuration);
    internal Dictionary`2<string, ILookup`2<string, Type>> get_Cache();
    public ICollection`1<Type> GetControllerTypes(string controllerName);
    private Dictionary`2<string, ILookup`2<string, Type>> InitializeCache();
}
public class System.Web.Http.Dispatcher.HttpRoutingDispatcher : HttpMessageHandler {
    private HttpConfiguration _configuration;
    private HttpMessageInvoker _defaultInvoker;
    public HttpRoutingDispatcher(HttpConfiguration configuration);
    public HttpRoutingDispatcher(HttpConfiguration configuration, HttpMessageHandler defaultHandler);
    protected virtual Task`1<HttpResponseMessage> SendAsync(HttpRequestMessage request, CancellationToken cancellationToken);
}
public interface System.Web.Http.Dispatcher.IAssembliesResolver {
    public abstract virtual ICollection`1<Assembly> GetAssemblies();
}
public interface System.Web.Http.Dispatcher.IHttpControllerActivator {
    public abstract virtual IHttpController Create(HttpRequestMessage request, HttpControllerDescriptor controllerDescriptor, Type controllerType);
}
public interface System.Web.Http.Dispatcher.IHttpControllerSelector {
    public abstract virtual HttpControllerDescriptor SelectController(HttpRequestMessage request);
    public abstract virtual IDictionary`2<string, HttpControllerDescriptor> GetControllerMapping();
}
public interface System.Web.Http.Dispatcher.IHttpControllerTypeResolver {
    public abstract virtual ICollection`1<Type> GetControllerTypes(IAssembliesResolver assembliesResolver);
}
internal class System.Web.Http.EfficientTypePropertyKey`2 : Tuple`2<T1, T2> {
    private int _hashCode;
    public EfficientTypePropertyKey`2(T1 item1, T2 item2);
    public virtual int GetHashCode();
}
internal class System.Web.Http.EmptyReadOnlyDictionary`2 : object {
    private static ReadOnlyDictionary`2<TKey, TValue> _value;
    public static IDictionary`2<TKey, TValue> Value { get; }
    private static EmptyReadOnlyDictionary`2();
    public static IDictionary`2<TKey, TValue> get_Value();
}
internal static class System.Web.Http.Error : object {
    private static string HttpScheme;
    private static string HttpsScheme;
    internal static string Format(string format, Object[] args);
    internal static ArgumentException Argument(string messageFormat, Object[] messageArgs);
    internal static ArgumentException Argument(string parameterName, string messageFormat, Object[] messageArgs);
    internal static ArgumentException ArgumentUriNotHttpOrHttpsScheme(string parameterName, Uri actualValue);
    internal static ArgumentException ArgumentUriNotAbsolute(string parameterName, Uri actualValue);
    internal static ArgumentException ArgumentUriHasQueryOrFragment(string parameterName, Uri actualValue);
    internal static ArgumentNullException PropertyNull();
    internal static ArgumentNullException ArgumentNull(string parameterName);
    internal static ArgumentNullException ArgumentNull(string parameterName, string messageFormat, Object[] messageArgs);
    internal static ArgumentException ArgumentNullOrEmpty(string parameterName);
    internal static ArgumentOutOfRangeException ArgumentOutOfRange(string parameterName, object actualValue, string messageFormat, Object[] messageArgs);
    internal static ArgumentOutOfRangeException ArgumentMustBeGreaterThanOrEqualTo(string parameterName, object actualValue, object minValue);
    internal static ArgumentOutOfRangeException ArgumentMustBeLessThanOrEqualTo(string parameterName, object actualValue, object maxValue);
    internal static KeyNotFoundException KeyNotFound();
    internal static KeyNotFoundException KeyNotFound(string messageFormat, Object[] messageArgs);
    internal static ObjectDisposedException ObjectDisposed(string messageFormat, Object[] messageArgs);
    internal static OperationCanceledException OperationCanceled();
    internal static OperationCanceledException OperationCanceled(string messageFormat, Object[] messageArgs);
    internal static ArgumentException InvalidEnumArgument(string parameterName, int invalidValue, Type enumClass);
    internal static InvalidOperationException InvalidOperation(string messageFormat, Object[] messageArgs);
    internal static InvalidOperationException InvalidOperation(Exception innerException, string messageFormat, Object[] messageArgs);
    internal static NotSupportedException NotSupported(string messageFormat, Object[] messageArgs);
}
internal class System.Web.Http.ExceptionHandling.CompositeExceptionLogger : object {
    private IExceptionLogger[] _loggers;
    public IEnumerable`1<IExceptionLogger> Loggers { get; }
    public CompositeExceptionLogger(IExceptionLogger[] loggers);
    public CompositeExceptionLogger(IEnumerable`1<IExceptionLogger> loggers);
    public IEnumerable`1<IExceptionLogger> get_Loggers();
    public sealed virtual Task LogAsync(ExceptionLoggerContext context, CancellationToken cancellationToken);
}
internal class System.Web.Http.ExceptionHandling.DefaultExceptionHandler : object {
    public sealed virtual Task HandleAsync(ExceptionHandlerContext context, CancellationToken cancellationToken);
    private static void Handle(ExceptionHandlerContext context);
}
internal class System.Web.Http.ExceptionHandling.EmptyExceptionHandler : object {
    public sealed virtual Task HandleAsync(ExceptionHandlerContext context, CancellationToken cancellationToken);
}
public static class System.Web.Http.ExceptionHandling.ExceptionCatchBlocks : object {
    private static ExceptionContextCatchBlock _httpBatchHandler;
    private static ExceptionContextCatchBlock _httpControllerDispatcher;
    private static ExceptionContextCatchBlock _httpServer;
    private static ExceptionContextCatchBlock _exceptionFilter;
    public static ExceptionContextCatchBlock HttpBatchHandler { get; }
    public static ExceptionContextCatchBlock HttpControllerDispatcher { get; }
    public static ExceptionContextCatchBlock HttpServer { get; }
    public static ExceptionContextCatchBlock IExceptionFilter { get; }
    private static ExceptionCatchBlocks();
    public static ExceptionContextCatchBlock get_HttpBatchHandler();
    public static ExceptionContextCatchBlock get_HttpControllerDispatcher();
    public static ExceptionContextCatchBlock get_HttpServer();
    public static ExceptionContextCatchBlock get_IExceptionFilter();
}
public class System.Web.Http.ExceptionHandling.ExceptionContext : object {
    [CompilerGeneratedAttribute]
private Exception <Exception>k__BackingField;
    [CompilerGeneratedAttribute]
private ExceptionContextCatchBlock <CatchBlock>k__BackingField;
    [CompilerGeneratedAttribute]
private HttpRequestMessage <Request>k__BackingField;
    [CompilerGeneratedAttribute]
private HttpRequestContext <RequestContext>k__BackingField;
    [CompilerGeneratedAttribute]
private HttpControllerContext <ControllerContext>k__BackingField;
    [CompilerGeneratedAttribute]
private HttpActionContext <ActionContext>k__BackingField;
    [CompilerGeneratedAttribute]
private HttpResponseMessage <Response>k__BackingField;
    public Exception Exception { get; private set; }
    public ExceptionContextCatchBlock CatchBlock { get; private set; }
    public HttpRequestMessage Request { get; public set; }
    public HttpRequestContext RequestContext { get; public set; }
    public HttpControllerContext ControllerContext { get; public set; }
    public HttpActionContext ActionContext { get; public set; }
    public HttpResponseMessage Response { get; public set; }
    public ExceptionContext(Exception exception, ExceptionContextCatchBlock catchBlock);
    public ExceptionContext(Exception exception, ExceptionContextCatchBlock catchBlock, HttpActionContext actionContext);
    public ExceptionContext(Exception exception, ExceptionContextCatchBlock catchBlock, HttpRequestMessage request);
    public ExceptionContext(Exception exception, ExceptionContextCatchBlock catchBlock, HttpRequestMessage request, HttpResponseMessage response);
    [CompilerGeneratedAttribute]
public Exception get_Exception();
    [CompilerGeneratedAttribute]
private void set_Exception(Exception value);
    [CompilerGeneratedAttribute]
public ExceptionContextCatchBlock get_CatchBlock();
    [CompilerGeneratedAttribute]
private void set_CatchBlock(ExceptionContextCatchBlock value);
    [CompilerGeneratedAttribute]
public HttpRequestMessage get_Request();
    [CompilerGeneratedAttribute]
public void set_Request(HttpRequestMessage value);
    [CompilerGeneratedAttribute]
public HttpRequestContext get_RequestContext();
    [CompilerGeneratedAttribute]
public void set_RequestContext(HttpRequestContext value);
    [CompilerGeneratedAttribute]
public HttpControllerContext get_ControllerContext();
    [CompilerGeneratedAttribute]
public void set_ControllerContext(HttpControllerContext value);
    [CompilerGeneratedAttribute]
public HttpActionContext get_ActionContext();
    [CompilerGeneratedAttribute]
public void set_ActionContext(HttpActionContext value);
    [CompilerGeneratedAttribute]
public HttpResponseMessage get_Response();
    [CompilerGeneratedAttribute]
public void set_Response(HttpResponseMessage value);
}
[DebuggerDisplayAttribute("Name: {Name}, IsTopLevel: {IsTopLevel}")]
public class System.Web.Http.ExceptionHandling.ExceptionContextCatchBlock : object {
    private string _name;
    private bool _isTopLevel;
    private bool _callsHandler;
    public string Name { get; }
    public bool IsTopLevel { get; }
    public bool CallsHandler { get; }
    public ExceptionContextCatchBlock(string name, bool isTopLevel, bool callsHandler);
    public string get_Name();
    public bool get_IsTopLevel();
    public bool get_CallsHandler();
    public virtual string ToString();
}
public abstract class System.Web.Http.ExceptionHandling.ExceptionHandler : object {
    private sealed virtual override Task System.Web.Http.ExceptionHandling.IExceptionHandler.HandleAsync(ExceptionHandlerContext context, CancellationToken cancellationToken);
    public virtual Task HandleAsync(ExceptionHandlerContext context, CancellationToken cancellationToken);
    public virtual void Handle(ExceptionHandlerContext context);
    public virtual bool ShouldHandle(ExceptionHandlerContext context);
}
public class System.Web.Http.ExceptionHandling.ExceptionHandlerContext : object {
    private ExceptionContext _exceptionContext;
    [CompilerGeneratedAttribute]
private IHttpActionResult <Result>k__BackingField;
    public ExceptionContext ExceptionContext { get; }
    public IHttpActionResult Result { get; public set; }
    public Exception Exception { get; }
    public ExceptionContextCatchBlock CatchBlock { get; }
    public HttpRequestMessage Request { get; }
    public HttpRequestContext RequestContext { get; }
    public ExceptionHandlerContext(ExceptionContext exceptionContext);
    public ExceptionContext get_ExceptionContext();
    [CompilerGeneratedAttribute]
public IHttpActionResult get_Result();
    [CompilerGeneratedAttribute]
public void set_Result(IHttpActionResult value);
    public Exception get_Exception();
    public ExceptionContextCatchBlock get_CatchBlock();
    public HttpRequestMessage get_Request();
    public HttpRequestContext get_RequestContext();
}
[ExtensionAttribute]
public static class System.Web.Http.ExceptionHandling.ExceptionHandlerExtensions : object {
    [ExtensionAttribute]
public static Task`1<HttpResponseMessage> HandleAsync(IExceptionHandler handler, ExceptionContext context, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("System.Web.Http.ExceptionHandling.ExceptionHandlerExtensions/<HandleAsyncCore>d__1")]
private static Task`1<HttpResponseMessage> HandleAsyncCore(IExceptionHandler handler, ExceptionHandlerContext context, CancellationToken cancellationToken);
}
public abstract class System.Web.Http.ExceptionHandling.ExceptionLogger : object {
    internal static string LoggedByKey;
    private sealed virtual override Task System.Web.Http.ExceptionHandling.IExceptionLogger.LogAsync(ExceptionLoggerContext context, CancellationToken cancellationToken);
    public virtual Task LogAsync(ExceptionLoggerContext context, CancellationToken cancellationToken);
    public virtual void Log(ExceptionLoggerContext context);
    public virtual bool ShouldLog(ExceptionLoggerContext context);
}
public class System.Web.Http.ExceptionHandling.ExceptionLoggerContext : object {
    private ExceptionContext _exceptionContext;
    public ExceptionContext ExceptionContext { get; }
    public Exception Exception { get; }
    public ExceptionContextCatchBlock CatchBlock { get; }
    public HttpRequestMessage Request { get; }
    public HttpRequestContext RequestContext { get; }
    public bool CallsHandler { get; }
    public ExceptionLoggerContext(ExceptionContext exceptionContext);
    public ExceptionContext get_ExceptionContext();
    public Exception get_Exception();
    public ExceptionContextCatchBlock get_CatchBlock();
    public HttpRequestMessage get_Request();
    public HttpRequestContext get_RequestContext();
    public bool get_CallsHandler();
}
[ExtensionAttribute]
public static class System.Web.Http.ExceptionHandling.ExceptionLoggerExtensions : object {
    [ExtensionAttribute]
public static Task LogAsync(IExceptionLogger logger, ExceptionContext context, CancellationToken cancellationToken);
}
public static class System.Web.Http.ExceptionHandling.ExceptionServices : object {
    public static IExceptionLogger GetLogger(HttpConfiguration configuration);
    public static IExceptionLogger GetLogger(ServicesContainer services);
    internal static IExceptionLogger CreateLogger(ServicesContainer services);
    public static IExceptionHandler GetHandler(HttpConfiguration configuration);
    public static IExceptionHandler GetHandler(ServicesContainer services);
    internal static IExceptionHandler CreateHandler(ServicesContainer services);
}
public interface System.Web.Http.ExceptionHandling.IExceptionHandler {
    public abstract virtual Task HandleAsync(ExceptionHandlerContext context, CancellationToken cancellationToken);
}
public interface System.Web.Http.ExceptionHandling.IExceptionLogger {
    public abstract virtual Task LogAsync(ExceptionLoggerContext context, CancellationToken cancellationToken);
}
internal class System.Web.Http.ExceptionHandling.LastChanceExceptionHandler : object {
    private IExceptionHandler _innerHandler;
    public IExceptionHandler InnerHandler { get; }
    public LastChanceExceptionHandler(IExceptionHandler innerHandler);
    public IExceptionHandler get_InnerHandler();
    public sealed virtual Task HandleAsync(ExceptionHandlerContext context, CancellationToken cancellationToken);
    private static IHttpActionResult CreateDefaultLastChanceResult(ExceptionContext context);
}
public class System.Web.Http.Filters.ActionDescriptorFilterProvider : object {
    public sealed virtual IEnumerable`1<FilterInfo> GetFilters(HttpConfiguration configuration, HttpActionDescriptor actionDescriptor);
}
[AttributeUsageAttribute("68")]
public abstract class System.Web.Http.Filters.ActionFilterAttribute : FilterAttribute {
    public virtual void OnActionExecuting(HttpActionContext actionContext);
    public virtual void OnActionExecuted(HttpActionExecutedContext actionExecutedContext);
    public virtual Task OnActionExecutingAsync(HttpActionContext actionContext, CancellationToken cancellationToken);
    public virtual Task OnActionExecutedAsync(HttpActionExecutedContext actionExecutedContext, CancellationToken cancellationToken);
    private sealed virtual override Task`1<HttpResponseMessage> System.Web.Http.Filters.IActionFilter.ExecuteActionFilterAsync(HttpActionContext actionContext, CancellationToken cancellationToken, Func`1<Task`1<HttpResponseMessage>> continuation);
    [AsyncStateMachineAttribute("System.Web.Http.Filters.ActionFilterAttribute/<ExecuteActionFilterAsyncCore>d__5")]
private Task`1<HttpResponseMessage> ExecuteActionFilterAsyncCore(HttpActionContext actionContext, CancellationToken cancellationToken, Func`1<Task`1<HttpResponseMessage>> continuation);
    [AsyncStateMachineAttribute("System.Web.Http.Filters.ActionFilterAttribute/<CallOnActionExecutedAsync>d__6")]
private Task`1<HttpResponseMessage> CallOnActionExecutedAsync(HttpActionContext actionContext, CancellationToken cancellationToken, Func`1<Task`1<HttpResponseMessage>> continuation);
}
[AttributeUsageAttribute("68")]
public abstract class System.Web.Http.Filters.AuthorizationFilterAttribute : FilterAttribute {
    public virtual void OnAuthorization(HttpActionContext actionContext);
    public virtual Task OnAuthorizationAsync(HttpActionContext actionContext, CancellationToken cancellationToken);
    private sealed virtual override Task`1<HttpResponseMessage> System.Web.Http.Filters.IAuthorizationFilter.ExecuteAuthorizationFilterAsync(HttpActionContext actionContext, CancellationToken cancellationToken, Func`1<Task`1<HttpResponseMessage>> continuation);
    [AsyncStateMachineAttribute("System.Web.Http.Filters.AuthorizationFilterAttribute/<ExecuteAuthorizationFilterAsyncCore>d__3")]
private Task`1<HttpResponseMessage> ExecuteAuthorizationFilterAsyncCore(HttpActionContext actionContext, CancellationToken cancellationToken, Func`1<Task`1<HttpResponseMessage>> continuation);
}
public class System.Web.Http.Filters.ConfigurationFilterProvider : object {
    public sealed virtual IEnumerable`1<FilterInfo> GetFilters(HttpConfiguration configuration, HttpActionDescriptor actionDescriptor);
}
[AttributeUsageAttribute("68")]
public abstract class System.Web.Http.Filters.ExceptionFilterAttribute : FilterAttribute {
    public virtual void OnException(HttpActionExecutedContext actionExecutedContext);
    public virtual Task OnExceptionAsync(HttpActionExecutedContext actionExecutedContext, CancellationToken cancellationToken);
    private sealed virtual override Task System.Web.Http.Filters.IExceptionFilter.ExecuteExceptionFilterAsync(HttpActionExecutedContext actionExecutedContext, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("System.Web.Http.Filters.ExceptionFilterAttribute/<ExecuteExceptionFilterAsyncCore>d__3")]
private Task ExecuteExceptionFilterAsyncCore(HttpActionExecutedContext actionExecutedContext, CancellationToken cancellationToken);
}
[AttributeUsageAttribute("68")]
public abstract class System.Web.Http.Filters.FilterAttribute : Attribute {
    private static ConcurrentDictionary`2<Type, bool> _attributeUsageCache;
    public bool AllowMultiple { get; }
    private static FilterAttribute();
    public virtual bool get_AllowMultiple();
    private static bool AllowsMultiple(Type attributeType);
}
public class System.Web.Http.Filters.FilterInfo : object {
    [CompilerGeneratedAttribute]
private IFilter <Instance>k__BackingField;
    [CompilerGeneratedAttribute]
private FilterScope <Scope>k__BackingField;
    public IFilter Instance { get; private set; }
    public FilterScope Scope { get; private set; }
    public FilterInfo(IFilter instance, FilterScope scope);
    [CompilerGeneratedAttribute]
public IFilter get_Instance();
    [CompilerGeneratedAttribute]
private void set_Instance(IFilter value);
    [CompilerGeneratedAttribute]
public FilterScope get_Scope();
    [CompilerGeneratedAttribute]
private void set_Scope(FilterScope value);
}
internal class System.Web.Http.Filters.FilterInfoComparer : object {
    private static FilterInfoComparer _instance;
    public static FilterInfoComparer Instance { get; }
    private static FilterInfoComparer();
    public static FilterInfoComparer get_Instance();
    public sealed virtual int Compare(FilterInfo x, FilterInfo y);
}
public enum System.Web.Http.Filters.FilterScope : Enum {
    public int value__;
    public static FilterScope Global;
    public static FilterScope Controller;
    public static FilterScope Action;
}
public class System.Web.Http.Filters.HttpActionExecutedContext : object {
    private HttpActionContext _actionContext;
    [CompilerGeneratedAttribute]
private Exception <Exception>k__BackingField;
    public HttpActionContext ActionContext { get; public set; }
    public Exception Exception { get; public set; }
    public HttpResponseMessage Response { get; public set; }
    public HttpRequestMessage Request { get; }
    public HttpActionExecutedContext(HttpActionContext actionContext, Exception exception);
    public HttpActionContext get_ActionContext();
    public void set_ActionContext(HttpActionContext value);
    [CompilerGeneratedAttribute]
public Exception get_Exception();
    [CompilerGeneratedAttribute]
public void set_Exception(Exception value);
    public HttpResponseMessage get_Response();
    public void set_Response(HttpResponseMessage value);
    public HttpRequestMessage get_Request();
}
public class System.Web.Http.Filters.HttpAuthenticationChallengeContext : object {
    private IHttpActionResult _result;
    [CompilerGeneratedAttribute]
private HttpActionContext <ActionContext>k__BackingField;
    public HttpActionContext ActionContext { get; private set; }
    public IHttpActionResult Result { get; public set; }
    public HttpRequestMessage Request { get; }
    public HttpAuthenticationChallengeContext(HttpActionContext actionContext, IHttpActionResult result);
    [CompilerGeneratedAttribute]
public HttpActionContext get_ActionContext();
    [CompilerGeneratedAttribute]
private void set_ActionContext(HttpActionContext value);
    public IHttpActionResult get_Result();
    public void set_Result(IHttpActionResult value);
    public HttpRequestMessage get_Request();
}
public class System.Web.Http.Filters.HttpAuthenticationContext : object {
    [CompilerGeneratedAttribute]
private HttpActionContext <ActionContext>k__BackingField;
    [CompilerGeneratedAttribute]
private IPrincipal <Principal>k__BackingField;
    [CompilerGeneratedAttribute]
private IHttpActionResult <ErrorResult>k__BackingField;
    public HttpActionContext ActionContext { get; private set; }
    public IPrincipal Principal { get; public set; }
    public IHttpActionResult ErrorResult { get; public set; }
    public HttpRequestMessage Request { get; }
    public HttpAuthenticationContext(HttpActionContext actionContext, IPrincipal principal);
    [CompilerGeneratedAttribute]
public HttpActionContext get_ActionContext();
    [CompilerGeneratedAttribute]
private void set_ActionContext(HttpActionContext value);
    [CompilerGeneratedAttribute]
public IPrincipal get_Principal();
    [CompilerGeneratedAttribute]
public void set_Principal(IPrincipal value);
    [CompilerGeneratedAttribute]
public IHttpActionResult get_ErrorResult();
    [CompilerGeneratedAttribute]
public void set_ErrorResult(IHttpActionResult value);
    public HttpRequestMessage get_Request();
}
public class System.Web.Http.Filters.HttpFilterCollection : object {
    private List`1<FilterInfo> _filters;
    public int Count { get; }
    public int get_Count();
    public void Add(IFilter filter);
    public void AddRange(IEnumerable`1<IFilter> filters);
    private static FilterInfo CreateFilterInfo(IFilter filter);
    public void Clear();
    public bool Contains(IFilter filter);
    public sealed virtual IEnumerator`1<FilterInfo> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public void Remove(IFilter filter);
}
public interface System.Web.Http.Filters.IActionFilter {
    public abstract virtual Task`1<HttpResponseMessage> ExecuteActionFilterAsync(HttpActionContext actionContext, CancellationToken cancellationToken, Func`1<Task`1<HttpResponseMessage>> continuation);
}
public interface System.Web.Http.Filters.IAuthenticationFilter {
    public abstract virtual Task AuthenticateAsync(HttpAuthenticationContext context, CancellationToken cancellationToken);
    public abstract virtual Task ChallengeAsync(HttpAuthenticationChallengeContext context, CancellationToken cancellationToken);
}
public interface System.Web.Http.Filters.IAuthorizationFilter {
    public abstract virtual Task`1<HttpResponseMessage> ExecuteAuthorizationFilterAsync(HttpActionContext actionContext, CancellationToken cancellationToken, Func`1<Task`1<HttpResponseMessage>> continuation);
}
public interface System.Web.Http.Filters.IExceptionFilter {
    public abstract virtual Task ExecuteExceptionFilterAsync(HttpActionExecutedContext actionExecutedContext, CancellationToken cancellationToken);
}
public interface System.Web.Http.Filters.IFilter {
    public bool AllowMultiple { get; }
    public abstract virtual bool get_AllowMultiple();
}
public interface System.Web.Http.Filters.IFilterProvider {
    public abstract virtual IEnumerable`1<FilterInfo> GetFilters(HttpConfiguration configuration, HttpActionDescriptor actionDescriptor);
}
public interface System.Web.Http.Filters.IOverrideFilter {
    public Type FiltersToOverride { get; }
    public abstract virtual Type get_FiltersToOverride();
}
[AttributeUsageAttribute("2052")]
public class System.Web.Http.FromBodyAttribute : ParameterBindingAttribute {
    public virtual HttpParameterBinding GetBinding(HttpParameterDescriptor parameter);
}
[AttributeUsageAttribute("2052")]
public class System.Web.Http.FromUriAttribute : ModelBinderAttribute {
    [IteratorStateMachineAttribute("System.Web.Http.FromUriAttribute/<GetValueProviderFactories>d__0")]
public virtual IEnumerable`1<ValueProviderFactory> GetValueProviderFactories(HttpConfiguration configuration);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private IEnumerable`1<ValueProviderFactory> <>n__0(HttpConfiguration configuration);
}
public static class System.Web.Http.Hosting.HttpPropertyKeys : object {
    public static string HttpConfigurationKey;
    public static string HttpRouteDataKey;
    public static string HttpActionDescriptorKey;
    public static string SynchronizationContextKey;
    public static string DisposableRequestResourcesKey;
    public static string DependencyScope;
    public static string ClientCertificateKey;
    public static string RetrieveClientCertificateDelegateKey;
    public static string RequestContextKey;
    public static string RequestCorrelationKey;
    public static string IsLocalKey;
    public static string NoRouteMatched;
    public static string IncludeErrorDetailKey;
    public static string RequestQueryNameValuePairsKey;
    public static string CachedRequestQueryKey;
    public static string IsBatchRequest;
    private static HttpPropertyKeys();
}
public interface System.Web.Http.Hosting.IHostBufferPolicySelector {
    public abstract virtual bool UseBufferedInputStream(object hostContext);
    public abstract virtual bool UseBufferedOutputStream(HttpResponseMessage response);
}
public class System.Web.Http.Hosting.SuppressHostPrincipalMessageHandler : DelegatingHandler {
    private static Lazy`1<IPrincipal> _anonymousPrincipal;
    private static SuppressHostPrincipalMessageHandler();
    [AsyncStateMachineAttribute("System.Web.Http.Hosting.SuppressHostPrincipalMessageHandler/<SendAsync>d__1")]
protected virtual Task`1<HttpResponseMessage> SendAsync(HttpRequestMessage request, CancellationToken cancellationToken);
    private static IPrincipal SetCurrentPrincipal(HttpRequestMessage request, IPrincipal principal);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task`1<HttpResponseMessage> <>n__0(HttpRequestMessage request, CancellationToken cancellationToken);
}
[AttributeUsageAttribute("132")]
public class System.Web.Http.HttpBindNeverAttribute : HttpBindingBehaviorAttribute {
}
[AttributeUsageAttribute("132")]
public class System.Web.Http.HttpBindRequiredAttribute : HttpBindingBehaviorAttribute {
}
public class System.Web.Http.HttpConfiguration : object {
    private HttpRouteCollection _routes;
    private ConcurrentDictionary`2<object, object> _properties;
    private MediaTypeFormatterCollection _formatters;
    private Collection`1<DelegatingHandler> _messageHandlers;
    private HttpFilterCollection _filters;
    private IDependencyResolver _dependencyResolver;
    private Action`1<HttpConfiguration> _initializer;
    private bool _initialized;
    private bool _disposed;
    [CompilerGeneratedAttribute]
private ServicesContainer <Services>k__BackingField;
    [CompilerGeneratedAttribute]
private ParameterBindingRulesCollection <ParameterBindingRules>k__BackingField;
    [CompilerGeneratedAttribute]
private IncludeErrorDetailPolicy <IncludeErrorDetailPolicy>k__BackingField;
    public Action`1<HttpConfiguration> Initializer { get; public set; }
    public HttpFilterCollection Filters { get; }
    public Collection`1<DelegatingHandler> MessageHandlers { get; }
    public HttpRouteCollection Routes { get; }
    public ConcurrentDictionary`2<object, object> Properties { get; }
    public string VirtualPathRoot { get; }
    public IDependencyResolver DependencyResolver { get; public set; }
    public ServicesContainer Services { get; internal set; }
    public ParameterBindingRulesCollection ParameterBindingRules { get; internal set; }
    public IncludeErrorDetailPolicy IncludeErrorDetailPolicy { get; public set; }
    public MediaTypeFormatterCollection Formatters { get; }
    public HttpConfiguration(HttpRouteCollection routes);
    private HttpConfiguration(HttpConfiguration configuration, HttpControllerSettings settings);
    public Action`1<HttpConfiguration> get_Initializer();
    public void set_Initializer(Action`1<HttpConfiguration> value);
    public HttpFilterCollection get_Filters();
    public Collection`1<DelegatingHandler> get_MessageHandlers();
    public HttpRouteCollection get_Routes();
    public ConcurrentDictionary`2<object, object> get_Properties();
    public string get_VirtualPathRoot();
    public IDependencyResolver get_DependencyResolver();
    public void set_DependencyResolver(IDependencyResolver value);
    [CompilerGeneratedAttribute]
public ServicesContainer get_Services();
    [CompilerGeneratedAttribute]
internal void set_Services(ServicesContainer value);
    [CompilerGeneratedAttribute]
public ParameterBindingRulesCollection get_ParameterBindingRules();
    [CompilerGeneratedAttribute]
internal void set_ParameterBindingRules(ParameterBindingRulesCollection value);
    [CompilerGeneratedAttribute]
public IncludeErrorDetailPolicy get_IncludeErrorDetailPolicy();
    [CompilerGeneratedAttribute]
public void set_IncludeErrorDetailPolicy(IncludeErrorDetailPolicy value);
    public MediaTypeFormatterCollection get_Formatters();
    private static MediaTypeFormatterCollection DefaultFormatters(HttpConfiguration config);
    internal static HttpConfiguration ApplyControllerSettings(HttpControllerSettings settings, HttpConfiguration configuration);
    private static void DefaultInitializer(HttpConfiguration configuration);
    public void EnsureInitialized();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    [CompilerGeneratedAttribute]
private IEnumerable`1<ModelValidatorProvider> <.ctor>b__11_0();
}
[ExtensionAttribute]
[EditorBrowsableAttribute("1")]
public static class System.Web.Http.HttpConfigurationExtensions : object {
    [ExtensionAttribute]
public static void BindParameter(HttpConfiguration configuration, Type type, IModelBinder binder);
    [ExtensionAttribute]
public static void MapHttpAttributeRoutes(HttpConfiguration configuration);
    [ExtensionAttribute]
public static void MapHttpAttributeRoutes(HttpConfiguration configuration, IInlineConstraintResolver constraintResolver);
    [ExtensionAttribute]
public static void MapHttpAttributeRoutes(HttpConfiguration configuration, IDirectRouteProvider directRouteProvider);
    [ExtensionAttribute]
public static void MapHttpAttributeRoutes(HttpConfiguration configuration, IInlineConstraintResolver constraintResolver, IDirectRouteProvider directRouteProvider);
    [ExtensionAttribute]
internal static IReadOnlyCollection`1<IHttpRoute> GetAttributeRoutes(HttpConfiguration configuration);
    [ExtensionAttribute]
public static void SuppressHostPrincipal(HttpConfiguration configuration);
}
[AttributeUsageAttribute("64")]
public class System.Web.Http.HttpDeleteAttribute : Attribute {
    private static Collection`1<HttpMethod> _supportedMethods;
    public Collection`1<HttpMethod> HttpMethods { get; }
    private static HttpDeleteAttribute();
    public sealed virtual Collection`1<HttpMethod> get_HttpMethods();
}
[XmlRootAttribute("Error")]
public class System.Web.Http.HttpError : Dictionary`2<string, object> {
    public string Message { get; public set; }
    public HttpError ModelState { get; }
    public string MessageDetail { get; public set; }
    public string ExceptionMessage { get; public set; }
    public string ExceptionType { get; public set; }
    public string StackTrace { get; public set; }
    public HttpError InnerException { get; }
    public HttpError(string message);
    public HttpError(Exception exception, bool includeErrorDetail);
    public HttpError(ModelStateDictionary modelState, bool includeErrorDetail);
    internal HttpError(string message, string messageDetail);
    public string get_Message();
    public void set_Message(string value);
    public HttpError get_ModelState();
    public string get_MessageDetail();
    public void set_MessageDetail(string value);
    public string get_ExceptionMessage();
    public void set_ExceptionMessage(string value);
    public string get_ExceptionType();
    public void set_ExceptionType(string value);
    public string get_StackTrace();
    public void set_StackTrace(string value);
    public HttpError get_InnerException();
    public TValue GetPropertyValue(string key);
    private sealed virtual override XmlSchema System.Xml.Serialization.IXmlSerializable.GetSchema();
    private sealed virtual override void System.Xml.Serialization.IXmlSerializable.ReadXml(XmlReader reader);
    private sealed virtual override void System.Xml.Serialization.IXmlSerializable.WriteXml(XmlWriter writer);
}
public static class System.Web.Http.HttpErrorKeys : object {
    public static string MessageKey;
    public static string MessageDetailKey;
    public static string ModelStateKey;
    public static string ExceptionMessageKey;
    public static string ExceptionTypeKey;
    public static string StackTraceKey;
    public static string InnerExceptionKey;
    public static string MessageLanguageKey;
    public static string ErrorCodeKey;
    private static HttpErrorKeys();
}
[AttributeUsageAttribute("64")]
public class System.Web.Http.HttpGetAttribute : Attribute {
    private static Collection`1<HttpMethod> _supportedMethods;
    public Collection`1<HttpMethod> HttpMethods { get; }
    private static HttpGetAttribute();
    public sealed virtual Collection`1<HttpMethod> get_HttpMethods();
}
[AttributeUsageAttribute("64")]
public class System.Web.Http.HttpHeadAttribute : Attribute {
    private static Collection`1<HttpMethod> _supportedMethods;
    public Collection`1<HttpMethod> HttpMethods { get; }
    private static HttpHeadAttribute();
    public sealed virtual Collection`1<HttpMethod> get_HttpMethods();
}
internal static class System.Web.Http.HttpMethodHelper : object {
    internal static HttpMethod GetHttpMethod(string method);
}
[AttributeUsageAttribute("64")]
public class System.Web.Http.HttpOptionsAttribute : Attribute {
    private static Collection`1<HttpMethod> _supportedMethods;
    public Collection`1<HttpMethod> HttpMethods { get; }
    private static HttpOptionsAttribute();
    public sealed virtual Collection`1<HttpMethod> get_HttpMethods();
}
[AttributeUsageAttribute("64")]
public class System.Web.Http.HttpPatchAttribute : Attribute {
    private static Collection`1<HttpMethod> _supportedMethods;
    public Collection`1<HttpMethod> HttpMethods { get; }
    private static HttpPatchAttribute();
    public sealed virtual Collection`1<HttpMethod> get_HttpMethods();
}
[AttributeUsageAttribute("64")]
public class System.Web.Http.HttpPostAttribute : Attribute {
    private static Collection`1<HttpMethod> _supportedMethods;
    public Collection`1<HttpMethod> HttpMethods { get; }
    private static HttpPostAttribute();
    public sealed virtual Collection`1<HttpMethod> get_HttpMethods();
}
[AttributeUsageAttribute("64")]
public class System.Web.Http.HttpPutAttribute : Attribute {
    private static Collection`1<HttpMethod> _supportedMethods;
    public Collection`1<HttpMethod> HttpMethods { get; }
    private static HttpPutAttribute();
    public sealed virtual Collection`1<HttpMethod> get_HttpMethods();
}
public class System.Web.Http.HttpResponseException : Exception {
    [CompilerGeneratedAttribute]
private HttpResponseMessage <Response>k__BackingField;
    public HttpResponseMessage Response { get; private set; }
    public HttpResponseException(HttpStatusCode statusCode);
    public HttpResponseException(HttpResponseMessage response);
    [CompilerGeneratedAttribute]
public HttpResponseMessage get_Response();
    [CompilerGeneratedAttribute]
private void set_Response(HttpResponseMessage value);
}
[DefaultMemberAttribute("Item")]
public class System.Web.Http.HttpRouteCollection : object {
    private static Uri _referenceBaseAddress;
    private string _virtualPathRoot;
    private List`1<IHttpRoute> _collection;
    private IDictionary`2<string, IHttpRoute> _dictionary;
    private bool _disposed;
    public string VirtualPathRoot { get; }
    public int Count { get; }
    public bool IsReadOnly { get; }
    public IHttpRoute Item { get; }
    public IHttpRoute Item { get; }
    public HttpRouteCollection(string virtualPathRoot);
    private static HttpRouteCollection();
    public virtual string get_VirtualPathRoot();
    public virtual int get_Count();
    public virtual bool get_IsReadOnly();
    public virtual IHttpRoute get_Item(int index);
    public virtual IHttpRoute get_Item(string name);
    public virtual IHttpRouteData GetRouteData(HttpRequestMessage request);
    public virtual IHttpVirtualPathData GetVirtualPath(HttpRequestMessage request, string name, IDictionary`2<string, object> values);
    private string GetVirtualPathRoot(HttpRequestContext requestContext);
    public IHttpRoute CreateRoute(string routeTemplate, object defaults, object constraints);
    public IHttpRoute CreateRoute(string routeTemplate, IDictionary`2<string, object> defaults, IDictionary`2<string, object> constraints, IDictionary`2<string, object> dataTokens);
    public virtual IHttpRoute CreateRoute(string routeTemplate, IDictionary`2<string, object> defaults, IDictionary`2<string, object> constraints, IDictionary`2<string, object> dataTokens, HttpMessageHandler handler);
    protected virtual void ValidateConstraint(string routeTemplate, string name, object constraint);
    private sealed virtual override void System.Collections.Generic.ICollection<System.Web.Http.Routing.IHttpRoute>.Add(IHttpRoute route);
    public virtual void Add(string name, IHttpRoute route);
    public virtual void Clear();
    public virtual bool Contains(IHttpRoute item);
    public virtual bool ContainsKey(string name);
    public virtual void CopyTo(IHttpRoute[] array, int arrayIndex);
    public virtual void CopyTo(KeyValuePair`2[] array, int arrayIndex);
    public virtual void Insert(int index, string name, IHttpRoute value);
    private sealed virtual override bool System.Collections.Generic.ICollection<System.Web.Http.Routing.IHttpRoute>.Remove(IHttpRoute route);
    public virtual bool Remove(string name);
    public virtual IEnumerator`1<IHttpRoute> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    protected virtual IEnumerator OnGetEnumerator();
    public virtual bool TryGetValue(string name, IHttpRoute& route);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
}
[ExtensionAttribute]
[EditorBrowsableAttribute("1")]
public static class System.Web.Http.HttpRouteCollectionExtensions : object {
    [ExtensionAttribute]
public static IHttpRoute MapHttpRoute(HttpRouteCollection routes, string name, string routeTemplate);
    [ExtensionAttribute]
public static IHttpRoute MapHttpRoute(HttpRouteCollection routes, string name, string routeTemplate, object defaults);
    [ExtensionAttribute]
public static IHttpRoute MapHttpRoute(HttpRouteCollection routes, string name, string routeTemplate, object defaults, object constraints);
    [ExtensionAttribute]
public static IHttpRoute MapHttpRoute(HttpRouteCollection routes, string name, string routeTemplate, object defaults, object constraints, HttpMessageHandler handler);
    [ExtensionAttribute]
public static IHttpRoute MapHttpBatchRoute(HttpRouteCollection routes, string routeName, string routeTemplate, HttpBatchHandler batchHandler);
    [ExtensionAttribute]
public static IHttpRoute IgnoreRoute(HttpRouteCollection routes, string routeName, string routeTemplate);
    [ExtensionAttribute]
public static IHttpRoute IgnoreRoute(HttpRouteCollection routes, string routeName, string routeTemplate, object constraints);
}
public class System.Web.Http.HttpServer : DelegatingHandler {
    private static IPrincipal _anonymousPrincipal;
    private HttpConfiguration _configuration;
    private HttpMessageHandler _dispatcher;
    private IExceptionLogger _exceptionLogger;
    private IExceptionHandler _exceptionHandler;
    private bool _disposed;
    private bool _initialized;
    private object _initializationLock;
    private object _initializationTarget;
    public HttpMessageHandler Dispatcher { get; }
    public HttpConfiguration Configuration { get; }
    internal IExceptionLogger ExceptionLogger { get; internal set; }
    internal IExceptionHandler ExceptionHandler { get; internal set; }
    public HttpServer(HttpConfiguration configuration);
    public HttpServer(HttpMessageHandler dispatcher);
    public HttpServer(HttpConfiguration configuration, HttpMessageHandler dispatcher);
    private static HttpServer();
    public HttpMessageHandler get_Dispatcher();
    public HttpConfiguration get_Configuration();
    internal IExceptionLogger get_ExceptionLogger();
    internal void set_ExceptionLogger(IExceptionLogger value);
    internal IExceptionHandler get_ExceptionHandler();
    internal void set_ExceptionHandler(IExceptionHandler value);
    protected virtual void Dispose(bool disposing);
    [AsyncStateMachineAttribute("System.Web.Http.HttpServer/<SendAsync>d__24")]
protected virtual Task`1<HttpResponseMessage> SendAsync(HttpRequestMessage request, CancellationToken cancellationToken);
    private void EnsureInitialized();
    protected virtual void Initialize();
    private static HttpConfiguration EnsureNonNull(HttpConfiguration configuration);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task`1<HttpResponseMessage> <>n__0(HttpRequestMessage request, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
private object <EnsureInitialized>b__25_0();
}
public interface System.Web.Http.IHttpActionResult {
    public abstract virtual Task`1<HttpResponseMessage> ExecuteAsync(CancellationToken cancellationToken);
}
public enum System.Web.Http.IncludeErrorDetailPolicy : Enum {
    public int value__;
    public static IncludeErrorDetailPolicy Default;
    public static IncludeErrorDetailPolicy LocalOnly;
    public static IncludeErrorDetailPolicy Always;
    public static IncludeErrorDetailPolicy Never;
}
internal static class System.Web.Http.Internal.CollectionModelBinderUtil : object {
    internal static void CreateOrReplaceCollection(ModelBindingContext bindingContext, IEnumerable`1<TElement> incomingElements, Func`1<ICollection`1<TElement>> creator);
    internal static void CreateOrReplaceDictionary(ModelBindingContext bindingContext, IEnumerable`1<KeyValuePair`2<TKey, TValue>> incomingElements, Func`1<IDictionary`2<TKey, TValue>> creator);
    internal static IModelBinder GetGenericBinder(Type supportedInterfaceType, Type newInstanceType, Type openBinderType, Type modelType);
    internal static Type[] GetGenericBinderTypeArgs(Type supportedInterfaceType, Type modelType);
    internal static IEnumerable`1<string> GetIndexNamesFromValueProviderResult(ValueProviderResult valueProviderResultIndex);
    [IteratorStateMachineAttribute("System.Web.Http.Internal.CollectionModelBinderUtil/<GetZeroBasedIndexes>d__5")]
internal static IEnumerable`1<string> GetZeroBasedIndexes();
}
[ExtensionAttribute]
internal static class System.Web.Http.Internal.HttpParameterBindingExtensions : object {
    [ExtensionAttribute]
public static bool WillReadUri(HttpParameterBinding parameterBinding);
}
[ExtensionAttribute]
internal static class System.Web.Http.Internal.MemberInfoExtensions : object {
    [ExtensionAttribute]
public static TAttribute[] GetCustomAttributes(MemberInfo member, bool inherit);
}
[ExtensionAttribute]
internal static class System.Web.Http.Internal.ParameterInfoExtensions : object {
    [ExtensionAttribute]
public static bool TryGetDefaultValue(ParameterInfo parameterInfo, Object& value);
}
internal class System.Web.Http.Internal.PropertyHelper : object {
    private static ConcurrentDictionary`2<Type, PropertyHelper[]> _reflectionCache;
    private Func`2<object, object> _valueGetter;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    private static MethodInfo _callPropertyGetterOpenGenericMethod;
    private static MethodInfo _callPropertyGetterByReferenceOpenGenericMethod;
    private static MethodInfo _callPropertySetterOpenGenericMethod;
    public string Name { get; protected set; }
    public PropertyHelper(PropertyInfo property);
    private static PropertyHelper();
    public static Action`2<TDeclaringType, object> MakeFastPropertySetter(PropertyInfo propertyInfo);
    [CompilerGeneratedAttribute]
public virtual string get_Name();
    [CompilerGeneratedAttribute]
protected virtual void set_Name(string value);
    public object GetValue(object instance);
    public static PropertyHelper[] GetProperties(object instance);
    public static Func`2<object, object> MakeFastPropertyGetter(PropertyInfo propertyInfo);
    private static PropertyHelper CreateInstance(PropertyInfo property);
    private static object CallPropertyGetter(Func`2<TDeclaringType, TValue> getter, object this);
    private static object CallPropertyGetterByReference(ByRefFunc`2<TDeclaringType, TValue> getter, object this);
    private static void CallPropertySetter(Action`2<TDeclaringType, TValue> setter, object this, object value);
    protected static PropertyHelper[] GetProperties(object instance, Func`2<PropertyInfo, PropertyHelper> createPropertyHelper, ConcurrentDictionary`2<Type, PropertyHelper[]> cache);
}
internal static class System.Web.Http.Internal.TypeActivator : object {
    public static Func`1<TBase> Create(Type instanceType);
    public static Func`1<TInstance> Create();
    public static Func`1<object> Create(Type instanceType);
}
internal static class System.Web.Http.Internal.TypeDescriptorHelper : object {
    internal static ICustomTypeDescriptor Get(Type type);
}
internal static class System.Web.Http.Internal.TypeHelper : object {
    private static Type TaskGenericType;
    internal static Type ApiControllerType;
    private static TypeHelper();
    internal static Type GetTaskInnerTypeOrNull(Type type);
    internal static Type[] GetTypeArgumentsIfMatch(Type closedType, Type matchingOpenType);
    internal static bool IsCompatibleObject(Type type, object value);
    internal static bool IsNullableValueType(Type type);
    internal static bool TypeAllowsNullValue(Type type);
    internal static bool IsSimpleType(Type type);
    internal static bool IsSimpleUnderlyingType(Type type);
    internal static bool CanConvertFromString(Type type);
    internal static bool HasStringConverter(Type type);
    internal static ReadOnlyCollection`1<T> OfType(Object[] objects);
}
public class System.Web.Http.Metadata.ModelMetadata : object {
    private Type _containerType;
    private Type _modelType;
    private string _propertyName;
    private EfficientTypePropertyKey`2<Type, string> _cacheKey;
    private Dictionary`2<string, object> _additionalValues;
    private bool _convertEmptyStringToNull;
    private object _model;
    private Func`1<object> _modelAccessor;
    private IEnumerable`1<ModelMetadata> _properties;
    private Type _realModelType;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsReadOnly>k__BackingField;
    [CompilerGeneratedAttribute]
private ModelMetadataProvider <Provider>k__BackingField;
    public Dictionary`2<string, object> AdditionalValues { get; }
    public Type ContainerType { get; }
    public bool ConvertEmptyStringToNull { get; public set; }
    public string Description { get; public set; }
    public bool IsComplexType { get; }
    public bool IsNullableValueType { get; }
    public bool IsReadOnly { get; public set; }
    public object Model { get; public set; }
    public Type ModelType { get; }
    public IEnumerable`1<ModelMetadata> Properties { get; }
    public string PropertyName { get; }
    protected ModelMetadataProvider Provider { get; protected set; }
    internal Type RealModelType { get; }
    internal EfficientTypePropertyKey`2<Type, string> CacheKey { get; }
    public ModelMetadata(ModelMetadataProvider provider, Type containerType, Func`1<object> modelAccessor, Type modelType, string propertyName);
    internal ModelMetadata(ModelMetadataProvider provider, Type containerType, Func`1<object> modelAccessor, Type modelType, string propertyName, EfficientTypePropertyKey`2<Type, string> cacheKey);
    public virtual Dictionary`2<string, object> get_AdditionalValues();
    public Type get_ContainerType();
    public virtual bool get_ConvertEmptyStringToNull();
    public virtual void set_ConvertEmptyStringToNull(bool value);
    [CompilerGeneratedAttribute]
public virtual string get_Description();
    [CompilerGeneratedAttribute]
public virtual void set_Description(string value);
    public virtual bool get_IsComplexType();
    public bool get_IsNullableValueType();
    [CompilerGeneratedAttribute]
public virtual bool get_IsReadOnly();
    [CompilerGeneratedAttribute]
public virtual void set_IsReadOnly(bool value);
    public object get_Model();
    public void set_Model(object value);
    public Type get_ModelType();
    public virtual IEnumerable`1<ModelMetadata> get_Properties();
    public string get_PropertyName();
    [CompilerGeneratedAttribute]
protected ModelMetadataProvider get_Provider();
    [CompilerGeneratedAttribute]
protected void set_Provider(ModelMetadataProvider value);
    internal Type get_RealModelType();
    internal EfficientTypePropertyKey`2<Type, string> get_CacheKey();
    public virtual string GetDisplayName();
    public virtual IEnumerable`1<ModelValidator> GetValidators(IEnumerable`1<ModelValidatorProvider> validatorProviders);
    private static EfficientTypePropertyKey`2<Type, string> CreateCacheKey(Type containerType, Type modelType, string propertyName);
}
public abstract class System.Web.Http.Metadata.ModelMetadataProvider : object {
    public abstract virtual IEnumerable`1<ModelMetadata> GetMetadataForProperties(object container, Type containerType);
    public abstract virtual ModelMetadata GetMetadataForProperty(Func`1<object> modelAccessor, Type containerType, string propertyName);
    public abstract virtual ModelMetadata GetMetadataForType(Func`1<object> modelAccessor, Type modelType);
}
public abstract class System.Web.Http.Metadata.Providers.AssociatedMetadataProvider`1 : ModelMetadataProvider {
    private ConcurrentDictionary`2<Type, TypeInformation<TModelMetadata>> _typeInfoCache;
    public sealed virtual IEnumerable`1<ModelMetadata> GetMetadataForProperties(object container, Type containerType);
    [IteratorStateMachineAttribute("System.Web.Http.Metadata.Providers.AssociatedMetadataProvider`1/<GetMetadataForPropertiesImpl>d__2")]
private IEnumerable`1<ModelMetadata> GetMetadataForPropertiesImpl(object container, Type containerType);
    public sealed virtual ModelMetadata GetMetadataForProperty(Func`1<object> modelAccessor, Type containerType, string propertyName);
    public sealed virtual ModelMetadata GetMetadataForType(Func`1<object> modelAccessor, Type modelType);
    protected abstract virtual TModelMetadata CreateMetadataPrototype(IEnumerable`1<Attribute> attributes, Type containerType, Type modelType, string propertyName);
    protected abstract virtual TModelMetadata CreateMetadataFromPrototype(TModelMetadata prototype, Func`1<object> modelAccessor);
    private TypeInformation<TModelMetadata> GetTypeInformation(Type type);
    private TypeInformation<TModelMetadata> CreateTypeInformation(Type type);
    private PropertyInformation<TModelMetadata> CreatePropertyInformation(Type containerType, PropertyDescriptor property);
    [IteratorStateMachineAttribute("System.Web.Http.Metadata.Providers.AssociatedMetadataProvider`1/<AsAttributes>d__10")]
private static IEnumerable`1<Attribute> AsAttributes(IEnumerable attributes);
    private static Func`2<object, object> CreatePropertyValueAccessor(PropertyDescriptor property);
    private static Func`2<object, object> CreateDynamicValueAccessor(MethodInfo getMethodInfo, Type declaringType, string propertyName);
}
public class System.Web.Http.Metadata.Providers.CachedDataAnnotationsMetadataAttributes : object {
    [CompilerGeneratedAttribute]
private DisplayAttribute <Display>k__BackingField;
    [CompilerGeneratedAttribute]
private DisplayNameAttribute <DisplayName>k__BackingField;
    [CompilerGeneratedAttribute]
private DisplayFormatAttribute <DisplayFormat>k__BackingField;
    [CompilerGeneratedAttribute]
private EditableAttribute <Editable>k__BackingField;
    [CompilerGeneratedAttribute]
private ReadOnlyAttribute <ReadOnly>k__BackingField;
    public DisplayAttribute Display { get; protected set; }
    public DisplayNameAttribute DisplayName { get; protected set; }
    public DisplayFormatAttribute DisplayFormat { get; protected set; }
    public EditableAttribute Editable { get; protected set; }
    public ReadOnlyAttribute ReadOnly { get; protected set; }
    public CachedDataAnnotationsMetadataAttributes(IEnumerable`1<Attribute> attributes);
    [CompilerGeneratedAttribute]
public DisplayAttribute get_Display();
    [CompilerGeneratedAttribute]
protected void set_Display(DisplayAttribute value);
    [CompilerGeneratedAttribute]
public DisplayNameAttribute get_DisplayName();
    [CompilerGeneratedAttribute]
protected void set_DisplayName(DisplayNameAttribute value);
    [CompilerGeneratedAttribute]
public DisplayFormatAttribute get_DisplayFormat();
    [CompilerGeneratedAttribute]
protected void set_DisplayFormat(DisplayFormatAttribute value);
    [CompilerGeneratedAttribute]
public EditableAttribute get_Editable();
    [CompilerGeneratedAttribute]
protected void set_Editable(EditableAttribute value);
    [CompilerGeneratedAttribute]
public ReadOnlyAttribute get_ReadOnly();
    [CompilerGeneratedAttribute]
protected void set_ReadOnly(ReadOnlyAttribute value);
}
public class System.Web.Http.Metadata.Providers.CachedDataAnnotationsModelMetadata : CachedModelMetadata`1<CachedDataAnnotationsMetadataAttributes> {
    public CachedDataAnnotationsModelMetadata(CachedDataAnnotationsModelMetadata prototype, Func`1<object> modelAccessor);
    public CachedDataAnnotationsModelMetadata(DataAnnotationsModelMetadataProvider provider, Type containerType, Type modelType, string propertyName, IEnumerable`1<Attribute> attributes);
    protected virtual bool ComputeConvertEmptyStringToNull();
    protected virtual string ComputeDescription();
    protected virtual bool ComputeIsReadOnly();
    public virtual string GetDisplayName();
}
public abstract class System.Web.Http.Metadata.Providers.CachedModelMetadata`1 : ModelMetadata {
    private bool _convertEmptyStringToNull;
    private string _description;
    private bool _isReadOnly;
    private bool _isComplexType;
    private bool _convertEmptyStringToNullComputed;
    private bool _descriptionComputed;
    private bool _isReadOnlyComputed;
    private bool _isComplexTypeComputed;
    [CompilerGeneratedAttribute]
private TPrototypeCache <PrototypeCache>k__BackingField;
    public bool ConvertEmptyStringToNull { get; public set; }
    public string Description { get; public set; }
    public bool IsReadOnly { get; public set; }
    public bool IsComplexType { get; }
    protected TPrototypeCache PrototypeCache { get; protected set; }
    protected CachedModelMetadata`1(CachedModelMetadata`1<TPrototypeCache> prototype, Func`1<object> modelAccessor);
    protected CachedModelMetadata`1(DataAnnotationsModelMetadataProvider provider, Type containerType, Type modelType, string propertyName, TPrototypeCache prototypeCache);
    public sealed virtual bool get_ConvertEmptyStringToNull();
    public sealed virtual void set_ConvertEmptyStringToNull(bool value);
    public sealed virtual string get_Description();
    public sealed virtual void set_Description(string value);
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual void set_IsReadOnly(bool value);
    public sealed virtual bool get_IsComplexType();
    [CompilerGeneratedAttribute]
protected TPrototypeCache get_PrototypeCache();
    [CompilerGeneratedAttribute]
protected void set_PrototypeCache(TPrototypeCache value);
    protected virtual bool ComputeConvertEmptyStringToNull();
    protected virtual string ComputeDescription();
    protected virtual bool ComputeIsReadOnly();
    protected virtual bool ComputeIsComplexType();
}
public class System.Web.Http.Metadata.Providers.DataAnnotationsModelMetadataProvider : AssociatedMetadataProvider`1<CachedDataAnnotationsModelMetadata> {
    protected virtual CachedDataAnnotationsModelMetadata CreateMetadataPrototype(IEnumerable`1<Attribute> attributes, Type containerType, Type modelType, string propertyName);
    protected virtual CachedDataAnnotationsModelMetadata CreateMetadataFromPrototype(CachedDataAnnotationsModelMetadata prototype, Func`1<object> modelAccessor);
}
public class System.Web.Http.Metadata.Providers.EmptyModelMetadataProvider : AssociatedMetadataProvider`1<ModelMetadata> {
    protected virtual ModelMetadata CreateMetadataPrototype(IEnumerable`1<Attribute> attributes, Type containerType, Type modelType, string propertyName);
    protected virtual ModelMetadata CreateMetadataFromPrototype(ModelMetadata prototype, Func`1<object> modelAccessor);
}
public class System.Web.Http.ModelBinding.Binders.ArrayModelBinder`1 : CollectionModelBinder`1<TElement> {
    public virtual bool BindModel(HttpActionContext actionContext, ModelBindingContext bindingContext);
    protected virtual bool CreateOrReplaceCollection(HttpActionContext actionContext, ModelBindingContext bindingContext, IList`1<TElement> newCollection);
}
public class System.Web.Http.ModelBinding.Binders.ArrayModelBinderProvider : ModelBinderProvider {
    public virtual IModelBinder GetBinder(HttpConfiguration configuration, Type modelType);
}
public class System.Web.Http.ModelBinding.Binders.CollectionModelBinder`1 : object {
    private static List`1<TElement> BindComplexCollection(HttpActionContext actionContext, ModelBindingContext bindingContext);
    internal static List`1<TElement> BindComplexCollectionFromIndexes(HttpActionContext actionContext, ModelBindingContext bindingContext, IEnumerable`1<string> indexNames);
    public virtual bool BindModel(HttpActionContext actionContext, ModelBindingContext bindingContext);
    internal static List`1<TElement> BindSimpleCollection(HttpActionContext actionContext, ModelBindingContext bindingContext, object rawValue, CultureInfo culture);
    protected virtual bool CreateOrReplaceCollection(HttpActionContext actionContext, ModelBindingContext bindingContext, IList`1<TElement> newCollection);
}
public class System.Web.Http.ModelBinding.Binders.CollectionModelBinderProvider : ModelBinderProvider {
    public virtual IModelBinder GetBinder(HttpConfiguration configuration, Type modelType);
}
public class System.Web.Http.ModelBinding.Binders.ComplexModelDto : object {
    [CompilerGeneratedAttribute]
private ModelMetadata <ModelMetadata>k__BackingField;
    [CompilerGeneratedAttribute]
private Collection`1<ModelMetadata> <PropertyMetadata>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<ModelMetadata, ComplexModelDtoResult> <Results>k__BackingField;
    public ModelMetadata ModelMetadata { get; private set; }
    public Collection`1<ModelMetadata> PropertyMetadata { get; private set; }
    public IDictionary`2<ModelMetadata, ComplexModelDtoResult> Results { get; private set; }
    public ComplexModelDto(ModelMetadata modelMetadata, IEnumerable`1<ModelMetadata> propertyMetadata);
    [CompilerGeneratedAttribute]
public ModelMetadata get_ModelMetadata();
    [CompilerGeneratedAttribute]
private void set_ModelMetadata(ModelMetadata value);
    [CompilerGeneratedAttribute]
public Collection`1<ModelMetadata> get_PropertyMetadata();
    [CompilerGeneratedAttribute]
private void set_PropertyMetadata(Collection`1<ModelMetadata> value);
    [CompilerGeneratedAttribute]
public IDictionary`2<ModelMetadata, ComplexModelDtoResult> get_Results();
    [CompilerGeneratedAttribute]
private void set_Results(IDictionary`2<ModelMetadata, ComplexModelDtoResult> value);
}
public class System.Web.Http.ModelBinding.Binders.ComplexModelDtoModelBinder : object {
    public sealed virtual bool BindModel(HttpActionContext actionContext, ModelBindingContext bindingContext);
}
public class System.Web.Http.ModelBinding.Binders.ComplexModelDtoModelBinderProvider : ModelBinderProvider {
    private static SimpleModelBinderProvider _underlyingProvider;
    private static ComplexModelDtoModelBinderProvider();
    public virtual IModelBinder GetBinder(HttpConfiguration configuration, Type modelType);
    private static SimpleModelBinderProvider GetUnderlyingProvider();
}
public class System.Web.Http.ModelBinding.Binders.ComplexModelDtoResult : object {
    [CompilerGeneratedAttribute]
private object <Model>k__BackingField;
    [CompilerGeneratedAttribute]
private ModelValidationNode <ValidationNode>k__BackingField;
    public object Model { get; private set; }
    public ModelValidationNode ValidationNode { get; private set; }
    public ComplexModelDtoResult(object model, ModelValidationNode validationNode);
    [CompilerGeneratedAttribute]
public object get_Model();
    [CompilerGeneratedAttribute]
private void set_Model(object value);
    [CompilerGeneratedAttribute]
public ModelValidationNode get_ValidationNode();
    [CompilerGeneratedAttribute]
private void set_ValidationNode(ModelValidationNode value);
}
public class System.Web.Http.ModelBinding.Binders.CompositeModelBinder : object {
    [CompilerGeneratedAttribute]
private IModelBinder[] <Binders>k__BackingField;
    private IModelBinder[] Binders { get; private set; }
    public CompositeModelBinder(IEnumerable`1<IModelBinder> binders);
    public CompositeModelBinder(IModelBinder[] binders);
    [CompilerGeneratedAttribute]
private IModelBinder[] get_Binders();
    [CompilerGeneratedAttribute]
private void set_Binders(IModelBinder[] value);
    public virtual bool BindModel(HttpActionContext actionContext, ModelBindingContext bindingContext);
    private bool TryBind(HttpActionContext actionContext, ModelBindingContext bindingContext);
    private static ModelBindingContext CreateNewBindingContext(ModelBindingContext oldBindingContext, string modelName);
}
public class System.Web.Http.ModelBinding.Binders.CompositeModelBinderProvider : ModelBinderProvider {
    private ModelBinderProvider[] _providers;
    public IEnumerable`1<ModelBinderProvider> Providers { get; }
    public CompositeModelBinderProvider(IEnumerable`1<ModelBinderProvider> providers);
    public IEnumerable`1<ModelBinderProvider> get_Providers();
    public virtual IModelBinder GetBinder(HttpConfiguration configuration, Type modelType);
}
public class System.Web.Http.ModelBinding.Binders.DictionaryModelBinder`2 : CollectionModelBinder`1<KeyValuePair`2<TKey, TValue>> {
    protected virtual bool CreateOrReplaceCollection(HttpActionContext actionContext, ModelBindingContext bindingContext, IList`1<KeyValuePair`2<TKey, TValue>> newCollection);
}
public class System.Web.Http.ModelBinding.Binders.DictionaryModelBinderProvider : ModelBinderProvider {
    public virtual IModelBinder GetBinder(HttpConfiguration configuration, Type modelType);
}
public class System.Web.Http.ModelBinding.Binders.KeyValuePairModelBinder`2 : object {
    [CompilerGeneratedAttribute]
private ModelMetadataProvider <MetadataProvider>k__BackingField;
    private ModelMetadataProvider MetadataProvider { get; internal set; }
    [CompilerGeneratedAttribute]
private ModelMetadataProvider get_MetadataProvider();
    [CompilerGeneratedAttribute]
internal void set_MetadataProvider(ModelMetadataProvider value);
    public sealed virtual bool BindModel(HttpActionContext actionContext, ModelBindingContext bindingContext);
}
public class System.Web.Http.ModelBinding.Binders.KeyValuePairModelBinderProvider : ModelBinderProvider {
    public virtual IModelBinder GetBinder(HttpConfiguration configuration, Type modelType);
}
public class System.Web.Http.ModelBinding.Binders.MutableObjectModelBinder : object {
    [CompilerGeneratedAttribute]
private ModelMetadataProvider <MetadataProvider>k__BackingField;
    private ModelMetadataProvider MetadataProvider { get; internal set; }
    [CompilerGeneratedAttribute]
private ModelMetadataProvider get_MetadataProvider();
    [CompilerGeneratedAttribute]
internal void set_MetadataProvider(ModelMetadataProvider value);
    internal static bool CanBindType(Type modelType);
    public virtual bool BindModel(HttpActionContext actionContext, ModelBindingContext bindingContext);
    protected virtual bool CanUpdateProperty(ModelMetadata propertyMetadata);
    internal static bool CanUpdatePropertyInternal(ModelMetadata propertyMetadata);
    private static bool CanUpdateReadOnlyProperty(Type propertyType);
    private ComplexModelDto CreateAndPopulateDto(HttpActionContext actionContext, ModelBindingContext bindingContext, IEnumerable`1<ModelMetadata> propertyMetadatas);
    protected virtual object CreateModel(HttpActionContext actionContext, ModelBindingContext bindingContext);
    internal static EventHandler`1<ModelValidatedEventArgs> CreateNullCheckFailedHandler(ModelMetadata modelMetadata, object incomingValue);
    protected virtual void EnsureModel(HttpActionContext actionContext, ModelBindingContext bindingContext);
    protected virtual IEnumerable`1<ModelMetadata> GetMetadataForProperties(HttpActionContext actionContext, ModelBindingContext bindingContext);
    private static object GetPropertyDefaultValue(PropertyDescriptor propertyDescriptor);
    internal static void GetRequiredPropertiesCollection(HttpActionContext actionContext, ModelBindingContext bindingContext, HashSet`1& requiredProperties, Dictionary`2& requiredValidators, HashSet`1& skipProperties);
    internal void ProcessDto(HttpActionContext actionContext, ModelBindingContext bindingContext, ComplexModelDto dto);
    protected virtual void SetProperty(HttpActionContext actionContext, ModelBindingContext bindingContext, ModelMetadata propertyMetadata, ComplexModelDtoResult dtoResult, ModelValidator requiredValidator);
    private static bool RunValidator(ModelValidator validator, ModelBindingContext bindingContext, ModelMetadata propertyMetadata, string modelStateKey);
    [CompilerGeneratedAttribute]
private bool <GetMetadataForProperties>b__13_2(<>f__AnonymousType3`2<<>f__AnonymousType2`2<ModelMetadata, string>, bool> <>h__TransparentIdentifier1);
}
public class System.Web.Http.ModelBinding.Binders.MutableObjectModelBinderProvider : ModelBinderProvider {
    public virtual IModelBinder GetBinder(HttpConfiguration configuration, Type modelType);
}
public class System.Web.Http.ModelBinding.Binders.SimpleModelBinderProvider : ModelBinderProvider {
    private Func`1<IModelBinder> _modelBinderFactory;
    private Type _modelType;
    [CompilerGeneratedAttribute]
private bool <SuppressPrefixCheck>k__BackingField;
    public Type ModelType { get; }
    public bool SuppressPrefixCheck { get; public set; }
    public SimpleModelBinderProvider(Type modelType, IModelBinder modelBinder);
    public SimpleModelBinderProvider(Type modelType, Func`1<IModelBinder> modelBinderFactory);
    public Type get_ModelType();
    [CompilerGeneratedAttribute]
public bool get_SuppressPrefixCheck();
    [CompilerGeneratedAttribute]
public void set_SuppressPrefixCheck(bool value);
    public virtual IModelBinder GetBinder(HttpConfiguration configuration, Type modelType);
}
public class System.Web.Http.ModelBinding.Binders.TypeConverterModelBinder : object {
    public sealed virtual bool BindModel(HttpActionContext actionContext, ModelBindingContext bindingContext);
    private static bool IsFormatException(Exception ex);
}
public class System.Web.Http.ModelBinding.Binders.TypeConverterModelBinderProvider : ModelBinderProvider {
    public virtual IModelBinder GetBinder(HttpConfiguration configuration, Type modelType);
}
public class System.Web.Http.ModelBinding.Binders.TypeMatchModelBinder : object {
    public sealed virtual bool BindModel(HttpActionContext actionContext, ModelBindingContext bindingContext);
    internal static ValueProviderResult GetCompatibleValueProviderResult(ModelBindingContext bindingContext);
}
public class System.Web.Http.ModelBinding.Binders.TypeMatchModelBinderProvider : ModelBinderProvider {
    private static TypeMatchModelBinder _binder;
    private static TypeMatchModelBinderProvider();
    public virtual IModelBinder GetBinder(HttpConfiguration configuration, Type modelType);
}
public class System.Web.Http.ModelBinding.CancellationTokenParameterBinding : HttpParameterBinding {
    public CancellationTokenParameterBinding(HttpParameterDescriptor descriptor);
    public virtual Task ExecuteBindingAsync(ModelMetadataProvider metadataProvider, HttpActionContext actionContext, CancellationToken cancellationToken);
}
[AttributeUsageAttribute("3100")]
public abstract class System.Web.Http.ModelBinding.CustomModelBinderAttribute : Attribute {
    internal static AttributeTargets ValidTargets;
    public abstract virtual IModelBinder GetBinder();
}
public class System.Web.Http.ModelBinding.DefaultActionValueBinder : object {
    public virtual HttpActionBinding GetBinding(HttpActionDescriptor actionDescriptor);
    private static void EnsureOneBodyParameter(HttpActionBinding actionBinding);
    protected virtual HttpParameterBinding GetParameterBinding(HttpParameterDescriptor parameter);
    internal static ParameterBindingRulesCollection GetDefaultParameterBinders();
}
public class System.Web.Http.ModelBinding.ErrorParameterBinding : HttpParameterBinding {
    private string _message;
    public string ErrorMessage { get; }
    public ErrorParameterBinding(HttpParameterDescriptor descriptor, string message);
    public virtual string get_ErrorMessage();
    public virtual Task ExecuteBindingAsync(ModelMetadataProvider metadataProvider, HttpActionContext actionContext, CancellationToken cancellationToken);
}
public class System.Web.Http.ModelBinding.FormatterParameterBinding : HttpParameterBinding {
    private static string CancellationTokenKey;
    private IEnumerable`1<MediaTypeFormatter> _formatters;
    private string _errorMessage;
    [CompilerGeneratedAttribute]
private IBodyModelValidator <BodyModelValidator>k__BackingField;
    public bool WillReadBody { get; }
    public string ErrorMessage { get; }
    public IEnumerable`1<MediaTypeFormatter> Formatters { get; public set; }
    public IBodyModelValidator BodyModelValidator { get; public set; }
    public FormatterParameterBinding(HttpParameterDescriptor descriptor, IEnumerable`1<MediaTypeFormatter> formatters, IBodyModelValidator bodyModelValidator);
    public virtual bool get_WillReadBody();
    public virtual string get_ErrorMessage();
    public IEnumerable`1<MediaTypeFormatter> get_Formatters();
    public void set_Formatters(IEnumerable`1<MediaTypeFormatter> value);
    [CompilerGeneratedAttribute]
public IBodyModelValidator get_BodyModelValidator();
    [CompilerGeneratedAttribute]
public void set_BodyModelValidator(IBodyModelValidator value);
    public virtual Task`1<object> ReadContentAsync(HttpRequestMessage request, Type type, IEnumerable`1<MediaTypeFormatter> formatters, IFormatterLogger formatterLogger);
    public virtual Task`1<object> ReadContentAsync(HttpRequestMessage request, Type type, IEnumerable`1<MediaTypeFormatter> formatters, IFormatterLogger formatterLogger, CancellationToken cancellationToken);
    public virtual Task ExecuteBindingAsync(ModelMetadataProvider metadataProvider, HttpActionContext actionContext, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("System.Web.Http.ModelBinding.FormatterParameterBinding/<ExecuteBindingAsyncCore>d__18")]
private Task ExecuteBindingAsyncCore(ModelMetadataProvider metadataProvider, HttpActionContext actionContext, HttpParameterDescriptor paramFromBody, Type type, HttpRequestMessage request, IFormatterLogger formatterLogger, CancellationToken cancellationToken);
}
[ExtensionAttribute]
public static class System.Web.Http.ModelBinding.FormDataCollectionExtensions : object {
    internal static string NormalizeJQueryToMvc(string key);
    [IteratorStateMachineAttribute("System.Web.Http.ModelBinding.FormDataCollectionExtensions/<GetJQueryNameValuePairs>d__1")]
[ExtensionAttribute]
internal static IEnumerable`1<KeyValuePair`2<string, string>> GetJQueryNameValuePairs(FormDataCollection formData);
    private static void ThrowIfMaxHttpCollectionKeysExceeded(int count);
    [ExtensionAttribute]
internal static IValueProvider GetJQueryValueProvider(FormDataCollection formData);
    [ExtensionAttribute]
public static T ReadAs(FormDataCollection formData);
    [ExtensionAttribute]
public static T ReadAs(FormDataCollection formData, HttpActionContext actionContext);
    [ExtensionAttribute]
public static object ReadAs(FormDataCollection formData, Type type);
    [ExtensionAttribute]
public static object ReadAs(FormDataCollection formData, Type type, HttpActionContext actionContext);
    [ExtensionAttribute]
public static T ReadAs(FormDataCollection formData, string modelName, IRequiredMemberSelector requiredMemberSelector, IFormatterLogger formatterLogger);
    [ExtensionAttribute]
public static T ReadAs(FormDataCollection formData, string modelName, HttpActionContext actionContext);
    [ExtensionAttribute]
public static object ReadAs(FormDataCollection formData, Type type, string modelName, HttpActionContext actionContext);
    [ExtensionAttribute]
public static object ReadAs(FormDataCollection formData, Type type, string modelName, IRequiredMemberSelector requiredMemberSelector, IFormatterLogger formatterLogger);
    [ExtensionAttribute]
public static object ReadAs(FormDataCollection formData, Type type, string modelName, IRequiredMemberSelector requiredMemberSelector, IFormatterLogger formatterLogger, HttpConfiguration config);
    [ExtensionAttribute]
private static object ReadAsInternal(FormDataCollection formData, Type type, string modelName, HttpActionContext actionContext);
    private static ModelBinderProvider CreateModelBindingProvider(HttpActionContext actionContext);
    private static ModelBindingContext CreateModelBindingContext(HttpActionContext actionContext, string modelName, Type type, IValueProvider vp);
    private static HttpActionContext CreateActionContextForModelBinding(HttpConfiguration config);
}
public enum System.Web.Http.ModelBinding.HttpBindingBehavior : Enum {
    public int value__;
    public static HttpBindingBehavior Optional;
    public static HttpBindingBehavior Never;
    public static HttpBindingBehavior Required;
}
[AttributeUsageAttribute("132")]
public class System.Web.Http.ModelBinding.HttpBindingBehaviorAttribute : Attribute {
    private static object _typeId;
    [CompilerGeneratedAttribute]
private HttpBindingBehavior <Behavior>k__BackingField;
    public HttpBindingBehavior Behavior { get; private set; }
    public object TypeId { get; }
    public HttpBindingBehaviorAttribute(HttpBindingBehavior behavior);
    private static HttpBindingBehaviorAttribute();
    [CompilerGeneratedAttribute]
public HttpBindingBehavior get_Behavior();
    [CompilerGeneratedAttribute]
private void set_Behavior(HttpBindingBehavior value);
    public virtual object get_TypeId();
}
public class System.Web.Http.ModelBinding.HttpRequestParameterBinding : HttpParameterBinding {
    public HttpRequestParameterBinding(HttpParameterDescriptor descriptor);
    public virtual Task ExecuteBindingAsync(ModelMetadataProvider metadataProvider, HttpActionContext actionContext, CancellationToken cancellationToken);
}
public interface System.Web.Http.ModelBinding.IModelBinder {
    public abstract virtual bool BindModel(HttpActionContext actionContext, ModelBindingContext bindingContext);
}
public interface System.Web.Http.ModelBinding.IValueProviderParameterBinding {
    public IEnumerable`1<ValueProviderFactory> ValueProviderFactories { get; }
    public abstract virtual IEnumerable`1<ValueProviderFactory> get_ValueProviderFactories();
}
public class System.Web.Http.ModelBinding.JQueryMvcFormUrlEncodedFormatter : FormUrlEncodedMediaTypeFormatter {
    private HttpConfiguration _configuration;
    public JQueryMvcFormUrlEncodedFormatter(HttpConfiguration config);
    public virtual bool CanReadType(Type type);
    public virtual Task`1<object> ReadFromStreamAsync(Type type, Stream readStream, HttpContent content, IFormatterLogger formatterLogger);
    [AsyncStateMachineAttribute("System.Web.Http.ModelBinding.JQueryMvcFormUrlEncodedFormatter/<ReadFromStreamAsyncCore>d__5")]
private Task`1<object> ReadFromStreamAsyncCore(Type type, Stream readStream, HttpContent content, IFormatterLogger formatterLogger);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task`1<object> <>n__0(Type type, Stream readStream, HttpContent content, IFormatterLogger formatterLogger);
}
[AttributeUsageAttribute("2052")]
public class System.Web.Http.ModelBinding.ModelBinderAttribute : ParameterBindingAttribute {
    [CompilerGeneratedAttribute]
private Type <BinderType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SuppressPrefixCheck>k__BackingField;
    public Type BinderType { get; public set; }
    public string Name { get; public set; }
    public bool SuppressPrefixCheck { get; public set; }
    public ModelBinderAttribute(Type binderType);
    [CompilerGeneratedAttribute]
public Type get_BinderType();
    [CompilerGeneratedAttribute]
public void set_BinderType(Type value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public bool get_SuppressPrefixCheck();
    [CompilerGeneratedAttribute]
public void set_SuppressPrefixCheck(bool value);
    public virtual HttpParameterBinding GetBinding(HttpParameterDescriptor parameter);
    public ModelBinderProvider GetModelBinderProvider(HttpConfiguration configuration);
    public IModelBinder GetModelBinder(HttpConfiguration configuration, Type modelType);
    public virtual IEnumerable`1<ValueProviderFactory> GetValueProviderFactories(HttpConfiguration configuration);
    private static void VerifyBinderType(Type attemptedType);
    private static object GetOrInstantiate(HttpConfiguration configuration, Type type);
}
public static class System.Web.Http.ModelBinding.ModelBinderConfig : object {
    private static string _resourceClassKey;
    private static ModelBinderErrorMessageProvider _typeConversionErrorMessageProvider;
    private static ModelBinderErrorMessageProvider _valueRequiredErrorMessageProvider;
    public static string ResourceClassKey { get; public set; }
    public static ModelBinderErrorMessageProvider TypeConversionErrorMessageProvider { get; public set; }
    public static ModelBinderErrorMessageProvider ValueRequiredErrorMessageProvider { get; public set; }
    public static string get_ResourceClassKey();
    public static void set_ResourceClassKey(string value);
    public static ModelBinderErrorMessageProvider get_TypeConversionErrorMessageProvider();
    public static void set_TypeConversionErrorMessageProvider(ModelBinderErrorMessageProvider value);
    public static ModelBinderErrorMessageProvider get_ValueRequiredErrorMessageProvider();
    public static void set_ValueRequiredErrorMessageProvider(ModelBinderErrorMessageProvider value);
    private static string DefaultTypeConversionErrorMessageProvider(HttpActionContext actionContext, ModelMetadata modelMetadata, object incomingValue);
    private static string DefaultValueRequiredErrorMessageProvider(HttpActionContext actionContext, ModelMetadata modelMetadata, object incomingValue);
    private static string GetResourceCommon(HttpActionContext actionContext, ModelMetadata modelMetadata, object incomingValue, Func`2<HttpActionContext, string> resourceAccessor);
    private static string GetUserResourceString(HttpActionContext actionContext, string resourceName);
    internal static string GetUserResourceString(HttpActionContext actionContext, string resourceName, string resourceClassKey);
    private static string GetValueInvalidResource(HttpActionContext actionContext);
    private static string GetValueRequiredResource(HttpActionContext actionContext);
}
public class System.Web.Http.ModelBinding.ModelBinderErrorMessageProvider : MulticastDelegate {
    public ModelBinderErrorMessageProvider(object object, IntPtr method);
    public virtual string Invoke(HttpActionContext actionContext, ModelMetadata modelMetadata, object incomingValue);
    public virtual IAsyncResult BeginInvoke(HttpActionContext actionContext, ModelMetadata modelMetadata, object incomingValue, AsyncCallback callback, object object);
    public virtual string EndInvoke(IAsyncResult result);
}
public class System.Web.Http.ModelBinding.ModelBinderParameterBinding : HttpParameterBinding {
    private ValueProviderFactory[] _valueProviderFactories;
    private IModelBinder _binder;
    public IEnumerable`1<ValueProviderFactory> ValueProviderFactories { get; }
    public IModelBinder Binder { get; }
    public ModelBinderParameterBinding(HttpParameterDescriptor descriptor, IModelBinder modelBinder, IEnumerable`1<ValueProviderFactory> valueProviderFactories);
    public sealed virtual IEnumerable`1<ValueProviderFactory> get_ValueProviderFactories();
    public IModelBinder get_Binder();
    public virtual Task ExecuteBindingAsync(ModelMetadataProvider metadataProvider, HttpActionContext actionContext, CancellationToken cancellationToken);
    private ModelBindingContext GetModelBindingContext(ModelMetadataProvider metadataProvider, HttpActionContext actionContext);
}
public abstract class System.Web.Http.ModelBinding.ModelBinderProvider : object {
    public abstract virtual IModelBinder GetBinder(HttpConfiguration configuration, Type modelType);
}
public class System.Web.Http.ModelBinding.ModelBindingContext : object {
    private string _modelName;
    private ModelStateDictionary _modelState;
    private Dictionary`2<string, ModelMetadata> _propertyMetadata;
    private ModelValidationNode _validationNode;
    [CompilerGeneratedAttribute]
private ModelMetadata <ModelMetadata>k__BackingField;
    [CompilerGeneratedAttribute]
private IValueProvider <ValueProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <FallbackToEmptyPrefix>k__BackingField;
    public object Model { get; public set; }
    public ModelMetadata ModelMetadata { get; public set; }
    public string ModelName { get; public set; }
    public ModelStateDictionary ModelState { get; public set; }
    public Type ModelType { get; }
    public IDictionary`2<string, ModelMetadata> PropertyMetadata { get; }
    public ModelValidationNode ValidationNode { get; public set; }
    public IValueProvider ValueProvider { get; public set; }
    public bool FallbackToEmptyPrefix { get; public set; }
    public ModelBindingContext(ModelBindingContext bindingContext);
    public object get_Model();
    public void set_Model(object value);
    [CompilerGeneratedAttribute]
public ModelMetadata get_ModelMetadata();
    [CompilerGeneratedAttribute]
public void set_ModelMetadata(ModelMetadata value);
    public string get_ModelName();
    public void set_ModelName(string value);
    public ModelStateDictionary get_ModelState();
    public void set_ModelState(ModelStateDictionary value);
    public Type get_ModelType();
    public IDictionary`2<string, ModelMetadata> get_PropertyMetadata();
    public ModelValidationNode get_ValidationNode();
    public void set_ValidationNode(ModelValidationNode value);
    [CompilerGeneratedAttribute]
public IValueProvider get_ValueProvider();
    [CompilerGeneratedAttribute]
public void set_ValueProvider(IValueProvider value);
    [CompilerGeneratedAttribute]
public bool get_FallbackToEmptyPrefix();
    [CompilerGeneratedAttribute]
public void set_FallbackToEmptyPrefix(bool value);
    private void EnsureModelMetadata();
}
internal static class System.Web.Http.ModelBinding.ModelBindingHelper : object {
    private static ConcurrentDictionary`2<Type, ModelBinderAttribute> _modelBinderAttributeCache;
    private static ModelBindingHelper();
    internal static TModel CastOrDefault(object model);
    internal static string CreateIndexModelName(string parentName, int index);
    internal static string CreateIndexModelName(string parentName, string index);
    internal static string CreatePropertyModelName(string prefix, string propertyName);
    internal static string ConcatenateKeys(string prefix, string suffix);
    internal static IModelBinder GetPossibleBinderInstance(Type closedModelType, Type openModelType, Type openBinderType);
    internal static Object[] RawValueToObjectArray(object rawValue);
    internal static void ReplaceEmptyStringWithNull(ModelMetadata modelMetadata, Object& model);
    internal static bool TryGetProviderFromAttribute(Type modelType, ModelBinderAttribute modelBinderAttribute, ModelBinderProvider& provider);
    internal static bool TryGetProviderFromAttributes(Type modelType, ModelBinderProvider& provider);
    private static ModelBinderAttribute GetModelBinderAttribute(Type modelType);
    internal static void ValidateBindingContext(ModelBindingContext bindingContext);
    internal static void ValidateBindingContext(ModelBindingContext bindingContext, Type requiredType, bool allowNullModel);
}
public class System.Web.Http.ModelBinding.ModelError : object {
    [CompilerGeneratedAttribute]
private Exception <Exception>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ErrorMessage>k__BackingField;
    public Exception Exception { get; private set; }
    public string ErrorMessage { get; private set; }
    public ModelError(Exception exception);
    public ModelError(Exception exception, string errorMessage);
    public ModelError(string errorMessage);
    [CompilerGeneratedAttribute]
public Exception get_Exception();
    [CompilerGeneratedAttribute]
private void set_Exception(Exception value);
    [CompilerGeneratedAttribute]
public string get_ErrorMessage();
    [CompilerGeneratedAttribute]
private void set_ErrorMessage(string value);
}
public class System.Web.Http.ModelBinding.ModelErrorCollection : Collection`1<ModelError> {
    public void Add(Exception exception);
    public void Add(string errorMessage);
}
public class System.Web.Http.ModelBinding.ModelState : object {
    private ModelErrorCollection _errors;
    [CompilerGeneratedAttribute]
private ValueProviderResult <Value>k__BackingField;
    public ValueProviderResult Value { get; public set; }
    public ModelErrorCollection Errors { get; }
    [CompilerGeneratedAttribute]
public ValueProviderResult get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(ValueProviderResult value);
    public ModelErrorCollection get_Errors();
}
[DefaultMemberAttribute("Item")]
public class System.Web.Http.ModelBinding.ModelStateDictionary : object {
    private Dictionary`2<string, ModelState> _innerDictionary;
    public int Count { get; }
    public bool IsReadOnly { get; }
    public bool IsValid { get; }
    public ICollection`1<string> Keys { get; }
    public ICollection`1<ModelState> Values { get; }
    public ModelState Item { get; public set; }
    public ModelStateDictionary(ModelStateDictionary dictionary);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public bool get_IsValid();
    public sealed virtual ICollection`1<string> get_Keys();
    public sealed virtual ICollection`1<ModelState> get_Values();
    public sealed virtual ModelState get_Item(string key);
    public sealed virtual void set_Item(string key, ModelState value);
    public sealed virtual void Add(KeyValuePair`2<string, ModelState> item);
    public sealed virtual void Add(string key, ModelState value);
    public void AddModelError(string key, Exception exception);
    public void AddModelError(string key, string errorMessage);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(KeyValuePair`2<string, ModelState> item);
    public sealed virtual bool ContainsKey(string key);
    public sealed virtual void CopyTo(KeyValuePair`2[] array, int arrayIndex);
    public sealed virtual IEnumerator`1<KeyValuePair`2<string, ModelState>> GetEnumerator();
    private ModelState GetModelStateForKey(string key);
    public bool IsValidField(string key);
    public void Merge(ModelStateDictionary dictionary);
    public sealed virtual bool Remove(KeyValuePair`2<string, ModelState> item);
    public sealed virtual bool Remove(string key);
    public void SetModelValue(string key, ValueProviderResult value);
    public sealed virtual bool TryGetValue(string key, ModelState& value);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public class System.Web.Http.ModelBinding.ParameterBindingRulesCollection : Collection`1<Func`2<HttpParameterDescriptor, HttpParameterBinding>> {
    private static Func`2<HttpParameterDescriptor, HttpParameterBinding> TypeCheck(Type type, Func`2<HttpParameterDescriptor, HttpParameterBinding> func);
    public void Add(Type typeMatch, Func`2<HttpParameterDescriptor, HttpParameterBinding> funcInner);
    public void Insert(int index, Type typeMatch, Func`2<HttpParameterDescriptor, HttpParameterBinding> funcInner);
    public HttpParameterBinding LookupBinding(HttpParameterDescriptor parameter);
}
[AttributeUsageAttribute("64")]
public class System.Web.Http.NonActionAttribute : Attribute {
}
[AttributeUsageAttribute("68")]
public class System.Web.Http.OverrideActionFiltersAttribute : Attribute {
    public bool AllowMultiple { get; }
    public Type FiltersToOverride { get; }
    public sealed virtual bool get_AllowMultiple();
    public sealed virtual Type get_FiltersToOverride();
}
[AttributeUsageAttribute("68")]
public class System.Web.Http.OverrideAuthenticationAttribute : Attribute {
    public bool AllowMultiple { get; }
    public Type FiltersToOverride { get; }
    public sealed virtual bool get_AllowMultiple();
    public sealed virtual Type get_FiltersToOverride();
}
[AttributeUsageAttribute("68")]
public class System.Web.Http.OverrideAuthorizationAttribute : Attribute {
    public bool AllowMultiple { get; }
    public Type FiltersToOverride { get; }
    public sealed virtual bool get_AllowMultiple();
    public sealed virtual Type get_FiltersToOverride();
}
[AttributeUsageAttribute("68")]
public class System.Web.Http.OverrideExceptionFiltersAttribute : Attribute {
    public bool AllowMultiple { get; }
    public Type FiltersToOverride { get; }
    public sealed virtual bool get_AllowMultiple();
    public sealed virtual Type get_FiltersToOverride();
}
[AttributeUsageAttribute("2052")]
public abstract class System.Web.Http.ParameterBindingAttribute : Attribute {
    public abstract virtual HttpParameterBinding GetBinding(HttpParameterDescriptor parameter);
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class System.Web.Http.Properties.CommonWebApiResources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string ArgumentInvalidAbsoluteUri { get; }
    internal static string ArgumentInvalidHttpUriScheme { get; }
    internal static string ArgumentMustBeGreaterThanOrEqualTo { get; }
    internal static string ArgumentMustBeLessThanOrEqualTo { get; }
    internal static string ArgumentNullOrEmpty { get; }
    internal static string ArgumentUriHasQueryOrFragment { get; }
    internal static string InvalidEnumArgument { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_ArgumentInvalidAbsoluteUri();
    internal static string get_ArgumentInvalidHttpUriScheme();
    internal static string get_ArgumentMustBeGreaterThanOrEqualTo();
    internal static string get_ArgumentMustBeLessThanOrEqualTo();
    internal static string get_ArgumentNullOrEmpty();
    internal static string get_ArgumentUriHasQueryOrFragment();
    internal static string get_InvalidEnumArgument();
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class System.Web.Http.Properties.SRResources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string ActionExecutor_UnexpectedTaskInstance { get; }
    internal static string ActionExecutor_WrappedTaskInstance { get; }
    internal static string ActionFilterAttribute_MustSupplyResponseOrException { get; }
    internal static string ActionSelector_AmbiguousMatchType { get; }
    internal static string ApiController_RequestMustNotBeNull { get; }
    internal static string ApiControllerActionInvoker_InvalidHttpActionResult { get; }
    internal static string ApiControllerActionInvoker_NullHttpActionResult { get; }
    internal static string ApiControllerActionSelector_ActionNameNotFound { get; }
    internal static string ApiControllerActionSelector_ActionNotFound { get; }
    internal static string ApiControllerActionSelector_AmbiguousMatch { get; }
    internal static string ApiControllerActionSelector_HttpMethodNotSupported { get; }
    internal static string AttributeRoutes_InvalidPrefix { get; }
    internal static string AttributeRoutes_InvalidTemplate { get; }
    internal static string AuthenticationFilterDidNothing { get; }
    internal static string AuthenticationFilterErrorResult { get; }
    internal static string AuthenticationFilterSetPrincipalToKnownIdentity { get; }
    internal static string AuthenticationFilterSetPrincipalToUnknownIdentity { get; }
    internal static string BadRequest { get; }
    internal static string BatchContentTypeMissing { get; }
    internal static string BatchMediaTypeNotSupported { get; }
    internal static string BatchRequestMissingContent { get; }
    internal static string CannotSupportSingletonInstance { get; }
    internal static string CollectionParameterContainsNullElement { get; }
    internal static string Common_PropertyNotFound { get; }
    internal static string Common_TypeMustDriveFromType { get; }
    internal static string ControllerNameNotFound { get; }
    internal static string DataAnnotationsModelValidatorProvider_ConstructorRequirements { get; }
    internal static string DataAnnotationsModelValidatorProvider_ValidatableConstructorRequirements { get; }
    internal static string DefaultControllerFactory_ControllerNameAmbiguous_WithRouteTemplate { get; }
    internal static string DefaultControllerFactory_ControllerNameNotFound { get; }
    internal static string DefaultControllerFactory_ErrorCreatingController { get; }
    internal static string DefaultInlineConstraintResolver_AmbiguousCtors { get; }
    internal static string DefaultInlineConstraintResolver_CouldNotFindCtor { get; }
    internal static string DefaultInlineConstraintResolver_TypeNotConstraint { get; }
    internal static string DefaultServices_InvalidServiceType { get; }
    internal static string DependencyResolver_BeginScopeReturnsNull { get; }
    internal static string DependencyResolverNoService { get; }
    internal static string DirectRoute_AmbiguousController { get; }
    internal static string DirectRoute_HandlerNotSupported { get; }
    internal static string DirectRoute_InvalidParameter_Action { get; }
    internal static string DirectRoute_InvalidParameter_Controller { get; }
    internal static string DirectRoute_MissingActionDescriptors { get; }
    internal static string ErrorOccurred { get; }
    internal static string HttpActionDescriptor_NoConverterForGenericParamterTypeExists { get; }
    internal static string HttpControllerContext_ConfigurationMustNotBeNull { get; }
    internal static string HttpRequestMessageExtensions_NoConfiguration { get; }
    internal static string HttpRequestMessageExtensions_NoContentNegotiator { get; }
    internal static string HttpRequestMessageExtensions_NoMatchingFormatter { get; }
    internal static string HttpResponseExceptionMessage { get; }
    internal static string HttpRouteBuilder_CouldNotResolveConstraint { get; }
    internal static string HttpServerDisposed { get; }
    internal static string JQuerySyntaxMissingClosingBracket { get; }
    internal static string MaxHttpCollectionKeyLimitReached { get; }
    internal static string MissingDataMemberIsRequired { get; }
    internal static string MissingRequiredMember { get; }
    internal static string ModelBinderConfig_ValueInvalid { get; }
    internal static string ModelBinderConfig_ValueRequired { get; }
    internal static string ModelBinderProviderCollection_InvalidBinderType { get; }
    internal static string ModelBinderUtil_ModelCannotBeNull { get; }
    internal static string ModelBinderUtil_ModelInstanceIsWrong { get; }
    internal static string ModelBinderUtil_ModelMetadataCannotBeNull { get; }
    internal static string ModelBinderUtil_ModelTypeIsWrong { get; }
    internal static string ModelBindingContext_ModelMetadataMustBeSet { get; }
    internal static string NoControllerCreated { get; }
    internal static string NoControllerSelected { get; }
    internal static string NoRouteData { get; }
    internal static string Object_NotYetInitialized { get; }
    internal static string OptionalBodyParameterNotSupported { get; }
    internal static string ParameterBindingCantHaveMultipleBodyParameters { get; }
    internal static string ParameterBindingConflictingAttributes { get; }
    internal static string ParameterBindingIllegalType { get; }
    internal static string ReflectedActionDescriptor_ParameterCannotBeNull { get; }
    internal static string ReflectedActionDescriptor_ParameterNotInDictionary { get; }
    internal static string ReflectedActionDescriptor_ParameterValueHasWrongType { get; }
    internal static string ReflectedHttpActionDescriptor_CannotCallOpenGenericMethods { get; }
    internal static string Request_RequestContextMustNotBeNull { get; }
    internal static string RequestContextConflict { get; }
    internal static string RequestIsNull { get; }
    internal static string RequestNotAuthorized { get; }
    internal static string ResourceNotFound { get; }
    internal static string ResponseMessageResultConverter_NullHttpResponseMessage { get; }
    internal static string Route_AddRemoveWithNoKeyNotSupported { get; }
    internal static string Route_CannotHaveCatchAllInMultiSegment { get; }
    internal static string Route_CannotHaveConsecutiveParameters { get; }
    internal static string Route_CannotHaveConsecutiveSeparators { get; }
    internal static string Route_CatchAllMustBeLast { get; }
    internal static string Route_InvalidParameterName { get; }
    internal static string Route_InvalidRouteTemplate { get; }
    internal static string Route_MismatchedParameter { get; }
    internal static string Route_RepeatedParameter { get; }
    internal static string Route_ValidationMustBeStringOrCustomConstraint { get; }
    internal static string RouteCollection_NameNotFound { get; }
    internal static string RoutePrefix_CannotSupportMultiRoutePrefix { get; }
    internal static string RoutePrefix_PrefixCannotBeNull { get; }
    internal static string SubRouteCollection_DuplicateRouteName { get; }
    internal static string TraceActionFilterMessage { get; }
    internal static string TraceActionInvokeMessage { get; }
    internal static string TraceActionReturnValue { get; }
    internal static string TraceActionSelectedMessage { get; }
    internal static string TraceBeginParameterBind { get; }
    internal static string TraceCancelledMessage { get; }
    internal static string TraceEndParameterBind { get; }
    internal static string TraceEndParameterBindNoBind { get; }
    internal static string TraceGetPerRequestFormatterEndMessage { get; }
    internal static string TraceGetPerRequestFormatterEndMessageNew { get; }
    internal static string TraceGetPerRequestFormatterMessage { get; }
    internal static string TraceGetPerRequestNullFormatterEndMessage { get; }
    internal static string TraceHttpControllerTypeResolverError { get; }
    internal static string TraceInvokingAction { get; }
    internal static string TraceModelStateErrorMessage { get; }
    internal static string TraceModelStateInvalidMessage { get; }
    internal static string TraceNegotiateFormatter { get; }
    internal static string TraceNoneObjectMessage { get; }
    internal static string TraceReadFromStreamMessage { get; }
    internal static string TraceReadFromStreamValueMessage { get; }
    internal static string TraceRequestCompleteMessage { get; }
    internal static string TraceRouteMessage { get; }
    internal static string TraceSelectedFormatter { get; }
    internal static string TraceUnknownMessage { get; }
    internal static string TraceValidModelState { get; }
    internal static string TraceWriteToStreamMessage { get; }
    internal static string TypeInstanceMustNotBeNull { get; }
    internal static string TypeMethodMustNotReturnNull { get; }
    internal static string TypePropertyMustNotBeNull { get; }
    internal static string UnsupportedMediaType { get; }
    internal static string UnsupportedMediaTypeNoContentType { get; }
    internal static string UrlHelper_LinkMustNotReturnNull { get; }
    internal static string ValidatableObjectAdapter_IncompatibleType { get; }
    internal static string Validation_ValueNotFound { get; }
    internal static string ValidationAttributeOnField { get; }
    internal static string ValidationAttributeOnNonPublicProperty { get; }
    internal static string ValidModelState { get; }
    internal static string ValueProviderFactory_Cannot_Create { get; }
    internal static string ValueProviderResult_ConversionThrew { get; }
    internal static string ValueProviderResult_NoConverterExists { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_ActionExecutor_UnexpectedTaskInstance();
    internal static string get_ActionExecutor_WrappedTaskInstance();
    internal static string get_ActionFilterAttribute_MustSupplyResponseOrException();
    internal static string get_ActionSelector_AmbiguousMatchType();
    internal static string get_ApiController_RequestMustNotBeNull();
    internal static string get_ApiControllerActionInvoker_InvalidHttpActionResult();
    internal static string get_ApiControllerActionInvoker_NullHttpActionResult();
    internal static string get_ApiControllerActionSelector_ActionNameNotFound();
    internal static string get_ApiControllerActionSelector_ActionNotFound();
    internal static string get_ApiControllerActionSelector_AmbiguousMatch();
    internal static string get_ApiControllerActionSelector_HttpMethodNotSupported();
    internal static string get_AttributeRoutes_InvalidPrefix();
    internal static string get_AttributeRoutes_InvalidTemplate();
    internal static string get_AuthenticationFilterDidNothing();
    internal static string get_AuthenticationFilterErrorResult();
    internal static string get_AuthenticationFilterSetPrincipalToKnownIdentity();
    internal static string get_AuthenticationFilterSetPrincipalToUnknownIdentity();
    internal static string get_BadRequest();
    internal static string get_BatchContentTypeMissing();
    internal static string get_BatchMediaTypeNotSupported();
    internal static string get_BatchRequestMissingContent();
    internal static string get_CannotSupportSingletonInstance();
    internal static string get_CollectionParameterContainsNullElement();
    internal static string get_Common_PropertyNotFound();
    internal static string get_Common_TypeMustDriveFromType();
    internal static string get_ControllerNameNotFound();
    internal static string get_DataAnnotationsModelValidatorProvider_ConstructorRequirements();
    internal static string get_DataAnnotationsModelValidatorProvider_ValidatableConstructorRequirements();
    internal static string get_DefaultControllerFactory_ControllerNameAmbiguous_WithRouteTemplate();
    internal static string get_DefaultControllerFactory_ControllerNameNotFound();
    internal static string get_DefaultControllerFactory_ErrorCreatingController();
    internal static string get_DefaultInlineConstraintResolver_AmbiguousCtors();
    internal static string get_DefaultInlineConstraintResolver_CouldNotFindCtor();
    internal static string get_DefaultInlineConstraintResolver_TypeNotConstraint();
    internal static string get_DefaultServices_InvalidServiceType();
    internal static string get_DependencyResolver_BeginScopeReturnsNull();
    internal static string get_DependencyResolverNoService();
    internal static string get_DirectRoute_AmbiguousController();
    internal static string get_DirectRoute_HandlerNotSupported();
    internal static string get_DirectRoute_InvalidParameter_Action();
    internal static string get_DirectRoute_InvalidParameter_Controller();
    internal static string get_DirectRoute_MissingActionDescriptors();
    internal static string get_ErrorOccurred();
    internal static string get_HttpActionDescriptor_NoConverterForGenericParamterTypeExists();
    internal static string get_HttpControllerContext_ConfigurationMustNotBeNull();
    internal static string get_HttpRequestMessageExtensions_NoConfiguration();
    internal static string get_HttpRequestMessageExtensions_NoContentNegotiator();
    internal static string get_HttpRequestMessageExtensions_NoMatchingFormatter();
    internal static string get_HttpResponseExceptionMessage();
    internal static string get_HttpRouteBuilder_CouldNotResolveConstraint();
    internal static string get_HttpServerDisposed();
    internal static string get_JQuerySyntaxMissingClosingBracket();
    internal static string get_MaxHttpCollectionKeyLimitReached();
    internal static string get_MissingDataMemberIsRequired();
    internal static string get_MissingRequiredMember();
    internal static string get_ModelBinderConfig_ValueInvalid();
    internal static string get_ModelBinderConfig_ValueRequired();
    internal static string get_ModelBinderProviderCollection_InvalidBinderType();
    internal static string get_ModelBinderUtil_ModelCannotBeNull();
    internal static string get_ModelBinderUtil_ModelInstanceIsWrong();
    internal static string get_ModelBinderUtil_ModelMetadataCannotBeNull();
    internal static string get_ModelBinderUtil_ModelTypeIsWrong();
    internal static string get_ModelBindingContext_ModelMetadataMustBeSet();
    internal static string get_NoControllerCreated();
    internal static string get_NoControllerSelected();
    internal static string get_NoRouteData();
    internal static string get_Object_NotYetInitialized();
    internal static string get_OptionalBodyParameterNotSupported();
    internal static string get_ParameterBindingCantHaveMultipleBodyParameters();
    internal static string get_ParameterBindingConflictingAttributes();
    internal static string get_ParameterBindingIllegalType();
    internal static string get_ReflectedActionDescriptor_ParameterCannotBeNull();
    internal static string get_ReflectedActionDescriptor_ParameterNotInDictionary();
    internal static string get_ReflectedActionDescriptor_ParameterValueHasWrongType();
    internal static string get_ReflectedHttpActionDescriptor_CannotCallOpenGenericMethods();
    internal static string get_Request_RequestContextMustNotBeNull();
    internal static string get_RequestContextConflict();
    internal static string get_RequestIsNull();
    internal static string get_RequestNotAuthorized();
    internal static string get_ResourceNotFound();
    internal static string get_ResponseMessageResultConverter_NullHttpResponseMessage();
    internal static string get_Route_AddRemoveWithNoKeyNotSupported();
    internal static string get_Route_CannotHaveCatchAllInMultiSegment();
    internal static string get_Route_CannotHaveConsecutiveParameters();
    internal static string get_Route_CannotHaveConsecutiveSeparators();
    internal static string get_Route_CatchAllMustBeLast();
    internal static string get_Route_InvalidParameterName();
    internal static string get_Route_InvalidRouteTemplate();
    internal static string get_Route_MismatchedParameter();
    internal static string get_Route_RepeatedParameter();
    internal static string get_Route_ValidationMustBeStringOrCustomConstraint();
    internal static string get_RouteCollection_NameNotFound();
    internal static string get_RoutePrefix_CannotSupportMultiRoutePrefix();
    internal static string get_RoutePrefix_PrefixCannotBeNull();
    internal static string get_SubRouteCollection_DuplicateRouteName();
    internal static string get_TraceActionFilterMessage();
    internal static string get_TraceActionInvokeMessage();
    internal static string get_TraceActionReturnValue();
    internal static string get_TraceActionSelectedMessage();
    internal static string get_TraceBeginParameterBind();
    internal static string get_TraceCancelledMessage();
    internal static string get_TraceEndParameterBind();
    internal static string get_TraceEndParameterBindNoBind();
    internal static string get_TraceGetPerRequestFormatterEndMessage();
    internal static string get_TraceGetPerRequestFormatterEndMessageNew();
    internal static string get_TraceGetPerRequestFormatterMessage();
    internal static string get_TraceGetPerRequestNullFormatterEndMessage();
    internal static string get_TraceHttpControllerTypeResolverError();
    internal static string get_TraceInvokingAction();
    internal static string get_TraceModelStateErrorMessage();
    internal static string get_TraceModelStateInvalidMessage();
    internal static string get_TraceNegotiateFormatter();
    internal static string get_TraceNoneObjectMessage();
    internal static string get_TraceReadFromStreamMessage();
    internal static string get_TraceReadFromStreamValueMessage();
    internal static string get_TraceRequestCompleteMessage();
    internal static string get_TraceRouteMessage();
    internal static string get_TraceSelectedFormatter();
    internal static string get_TraceUnknownMessage();
    internal static string get_TraceValidModelState();
    internal static string get_TraceWriteToStreamMessage();
    internal static string get_TypeInstanceMustNotBeNull();
    internal static string get_TypeMethodMustNotReturnNull();
    internal static string get_TypePropertyMustNotBeNull();
    internal static string get_UnsupportedMediaType();
    internal static string get_UnsupportedMediaTypeNoContentType();
    internal static string get_UrlHelper_LinkMustNotReturnNull();
    internal static string get_ValidatableObjectAdapter_IncompatibleType();
    internal static string get_Validation_ValueNotFound();
    internal static string get_ValidationAttributeOnField();
    internal static string get_ValidationAttributeOnNonPublicProperty();
    internal static string get_ValidModelState();
    internal static string get_ValueProviderFactory_Cannot_Create();
    internal static string get_ValueProviderResult_ConversionThrew();
    internal static string get_ValueProviderResult_NoConverterExists();
}
public class System.Web.Http.Results.BadRequestErrorMessageResult : object {
    private string _message;
    private IDependencyProvider<HttpError> _dependencies;
    public string Message { get; }
    public IContentNegotiator ContentNegotiator { get; }
    public HttpRequestMessage Request { get; }
    public IEnumerable`1<MediaTypeFormatter> Formatters { get; }
    public BadRequestErrorMessageResult(string message, IContentNegotiator contentNegotiator, HttpRequestMessage request, IEnumerable`1<MediaTypeFormatter> formatters);
    public BadRequestErrorMessageResult(string message, ApiController controller);
    private BadRequestErrorMessageResult(string message, IDependencyProvider<HttpError> dependencies);
    public string get_Message();
    public IContentNegotiator get_ContentNegotiator();
    public HttpRequestMessage get_Request();
    public IEnumerable`1<MediaTypeFormatter> get_Formatters();
    public virtual Task`1<HttpResponseMessage> ExecuteAsync(CancellationToken cancellationToken);
    private HttpResponseMessage Execute();
}
public class System.Web.Http.Results.BadRequestResult : object {
    private IDependencyProvider _dependencies;
    public HttpRequestMessage Request { get; }
    public BadRequestResult(HttpRequestMessage request);
    public BadRequestResult(ApiController controller);
    private BadRequestResult(IDependencyProvider dependencies);
    public HttpRequestMessage get_Request();
    public virtual Task`1<HttpResponseMessage> ExecuteAsync(CancellationToken cancellationToken);
}
public class System.Web.Http.Results.ConflictResult : object {
    private IDependencyProvider _dependencies;
    public HttpRequestMessage Request { get; }
    public ConflictResult(HttpRequestMessage request);
    public ConflictResult(ApiController controller);
    private ConflictResult(IDependencyProvider dependencies);
    public HttpRequestMessage get_Request();
    public virtual Task`1<HttpResponseMessage> ExecuteAsync(CancellationToken cancellationToken);
}
public class System.Web.Http.Results.CreatedAtRouteNegotiatedContentResult`1 : object {
    private string _routeName;
    private IDictionary`2<string, object> _routeValues;
    private T _content;
    private IDependencyProvider<T> _dependencies;
    public string RouteName { get; }
    public IDictionary`2<string, object> RouteValues { get; }
    public T Content { get; }
    public UrlHelper UrlFactory { get; }
    public IContentNegotiator ContentNegotiator { get; }
    public HttpRequestMessage Request { get; }
    public IEnumerable`1<MediaTypeFormatter> Formatters { get; }
    public CreatedAtRouteNegotiatedContentResult`1(string routeName, IDictionary`2<string, object> routeValues, T content, UrlHelper urlFactory, IContentNegotiator contentNegotiator, HttpRequestMessage request, IEnumerable`1<MediaTypeFormatter> formatters);
    public CreatedAtRouteNegotiatedContentResult`1(string routeName, IDictionary`2<string, object> routeValues, T content, ApiController controller);
    private CreatedAtRouteNegotiatedContentResult`1(string routeName, IDictionary`2<string, object> routeValues, T content, IDependencyProvider<T> dependencies);
    public string get_RouteName();
    public IDictionary`2<string, object> get_RouteValues();
    public T get_Content();
    public UrlHelper get_UrlFactory();
    public IContentNegotiator get_ContentNegotiator();
    public HttpRequestMessage get_Request();
    public IEnumerable`1<MediaTypeFormatter> get_Formatters();
    public virtual Task`1<HttpResponseMessage> ExecuteAsync(CancellationToken cancellationToken);
    private HttpResponseMessage Execute();
}
public class System.Web.Http.Results.CreatedNegotiatedContentResult`1 : object {
    private Uri _location;
    private T _content;
    private IDependencyProvider<T> _dependencies;
    public Uri Location { get; }
    public T Content { get; }
    public IContentNegotiator ContentNegotiator { get; }
    public HttpRequestMessage Request { get; }
    public IEnumerable`1<MediaTypeFormatter> Formatters { get; }
    public CreatedNegotiatedContentResult`1(Uri location, T content, IContentNegotiator contentNegotiator, HttpRequestMessage request, IEnumerable`1<MediaTypeFormatter> formatters);
    public CreatedNegotiatedContentResult`1(Uri location, T content, ApiController controller);
    private CreatedNegotiatedContentResult`1(Uri location, T content, IDependencyProvider<T> dependencies);
    public Uri get_Location();
    public T get_Content();
    public IContentNegotiator get_ContentNegotiator();
    public HttpRequestMessage get_Request();
    public IEnumerable`1<MediaTypeFormatter> get_Formatters();
    public virtual Task`1<HttpResponseMessage> ExecuteAsync(CancellationToken cancellationToken);
    private HttpResponseMessage Execute();
}
public class System.Web.Http.Results.ExceptionResult : object {
    private Exception _exception;
    private IDependencyProvider _dependencies;
    public Exception Exception { get; }
    public bool IncludeErrorDetail { get; }
    public IContentNegotiator ContentNegotiator { get; }
    public HttpRequestMessage Request { get; }
    public IEnumerable`1<MediaTypeFormatter> Formatters { get; }
    public ExceptionResult(Exception exception, bool includeErrorDetail, IContentNegotiator contentNegotiator, HttpRequestMessage request, IEnumerable`1<MediaTypeFormatter> formatters);
    public ExceptionResult(Exception exception, ApiController controller);
    private ExceptionResult(Exception exception, IDependencyProvider dependencies);
    public Exception get_Exception();
    public bool get_IncludeErrorDetail();
    public IContentNegotiator get_ContentNegotiator();
    public HttpRequestMessage get_Request();
    public IEnumerable`1<MediaTypeFormatter> get_Formatters();
    public virtual Task`1<HttpResponseMessage> ExecuteAsync(CancellationToken cancellationToken);
    private HttpResponseMessage Execute();
}
public class System.Web.Http.Results.FormattedContentResult`1 : object {
    private HttpStatusCode _statusCode;
    private T _content;
    private MediaTypeFormatter _formatter;
    private MediaTypeHeaderValue _mediaType;
    private IDependencyProvider _dependencies;
    public HttpStatusCode StatusCode { get; }
    public T Content { get; }
    public MediaTypeFormatter Formatter { get; }
    public MediaTypeHeaderValue MediaType { get; }
    public HttpRequestMessage Request { get; }
    public FormattedContentResult`1(HttpStatusCode statusCode, T content, MediaTypeFormatter formatter, MediaTypeHeaderValue mediaType, HttpRequestMessage request);
    public FormattedContentResult`1(HttpStatusCode statusCode, T content, MediaTypeFormatter formatter, MediaTypeHeaderValue mediaType, ApiController controller);
    private FormattedContentResult`1(HttpStatusCode statusCode, T content, MediaTypeFormatter formatter, MediaTypeHeaderValue mediaType, IDependencyProvider dependencies);
    public HttpStatusCode get_StatusCode();
    public T get_Content();
    public MediaTypeFormatter get_Formatter();
    public MediaTypeHeaderValue get_MediaType();
    public HttpRequestMessage get_Request();
    public virtual Task`1<HttpResponseMessage> ExecuteAsync(CancellationToken cancellationToken);
    private HttpResponseMessage Execute();
    internal static HttpResponseMessage Execute(HttpStatusCode statusCode, T content, MediaTypeFormatter formatter, MediaTypeHeaderValue mediaType, HttpRequestMessage request);
}
public class System.Web.Http.Results.InternalServerErrorResult : object {
    private IDependencyProvider _dependencies;
    public HttpRequestMessage Request { get; }
    public InternalServerErrorResult(HttpRequestMessage request);
    public InternalServerErrorResult(ApiController controller);
    private InternalServerErrorResult(IDependencyProvider dependencies);
    public HttpRequestMessage get_Request();
    public virtual Task`1<HttpResponseMessage> ExecuteAsync(CancellationToken cancellationToken);
}
public class System.Web.Http.Results.InvalidModelStateResult : object {
    private ModelStateDictionary _modelState;
    private IDependencyProvider _dependencies;
    public ModelStateDictionary ModelState { get; }
    public bool IncludeErrorDetail { get; }
    public IContentNegotiator ContentNegotiator { get; }
    public HttpRequestMessage Request { get; }
    public IEnumerable`1<MediaTypeFormatter> Formatters { get; }
    public InvalidModelStateResult(ModelStateDictionary modelState, bool includeErrorDetail, IContentNegotiator contentNegotiator, HttpRequestMessage request, IEnumerable`1<MediaTypeFormatter> formatters);
    public InvalidModelStateResult(ModelStateDictionary modelState, ApiController controller);
    private InvalidModelStateResult(ModelStateDictionary modelState, IDependencyProvider dependencies);
    public ModelStateDictionary get_ModelState();
    public bool get_IncludeErrorDetail();
    public IContentNegotiator get_ContentNegotiator();
    public HttpRequestMessage get_Request();
    public IEnumerable`1<MediaTypeFormatter> get_Formatters();
    public virtual Task`1<HttpResponseMessage> ExecuteAsync(CancellationToken cancellationToken);
    private HttpResponseMessage Execute();
}
public class System.Web.Http.Results.JsonResult`1 : object {
    private T _content;
    private JsonSerializerSettings _serializerSettings;
    private Encoding _encoding;
    private IDependencyProvider _dependencies;
    public T Content { get; }
    public JsonSerializerSettings SerializerSettings { get; }
    public Encoding Encoding { get; }
    public HttpRequestMessage Request { get; }
    public JsonResult`1(T content, JsonSerializerSettings serializerSettings, Encoding encoding, HttpRequestMessage request);
    public JsonResult`1(T content, JsonSerializerSettings serializerSettings, Encoding encoding, ApiController controller);
    private JsonResult`1(T content, JsonSerializerSettings serializerSettings, Encoding encoding, IDependencyProvider dependencies);
    public T get_Content();
    public JsonSerializerSettings get_SerializerSettings();
    public Encoding get_Encoding();
    public HttpRequestMessage get_Request();
    public virtual Task`1<HttpResponseMessage> ExecuteAsync(CancellationToken cancellationToken);
    private HttpResponseMessage Execute();
    private ArraySegment`1<byte> Serialize();
}
public class System.Web.Http.Results.NegotiatedContentResult`1 : object {
    private HttpStatusCode _statusCode;
    private T _content;
    private IDependencyProvider<T> _dependencies;
    public HttpStatusCode StatusCode { get; }
    public T Content { get; }
    public IContentNegotiator ContentNegotiator { get; }
    public HttpRequestMessage Request { get; }
    public IEnumerable`1<MediaTypeFormatter> Formatters { get; }
    public NegotiatedContentResult`1(HttpStatusCode statusCode, T content, IContentNegotiator contentNegotiator, HttpRequestMessage request, IEnumerable`1<MediaTypeFormatter> formatters);
    public NegotiatedContentResult`1(HttpStatusCode statusCode, T content, ApiController controller);
    private NegotiatedContentResult`1(HttpStatusCode statusCode, T content, IDependencyProvider<T> dependencies);
    public HttpStatusCode get_StatusCode();
    public T get_Content();
    public IContentNegotiator get_ContentNegotiator();
    public HttpRequestMessage get_Request();
    public IEnumerable`1<MediaTypeFormatter> get_Formatters();
    public virtual Task`1<HttpResponseMessage> ExecuteAsync(CancellationToken cancellationToken);
    private HttpResponseMessage Execute();
    internal static HttpResponseMessage Execute(HttpStatusCode statusCode, T content, IContentNegotiator contentNegotiator, HttpRequestMessage request, IEnumerable`1<MediaTypeFormatter> formatters);
}
public class System.Web.Http.Results.NotFoundResult : object {
    private IDependencyProvider _dependencies;
    public HttpRequestMessage Request { get; }
    public NotFoundResult(HttpRequestMessage request);
    public NotFoundResult(ApiController controller);
    private NotFoundResult(IDependencyProvider dependencies);
    public HttpRequestMessage get_Request();
    public virtual Task`1<HttpResponseMessage> ExecuteAsync(CancellationToken cancellationToken);
}
public class System.Web.Http.Results.OkNegotiatedContentResult`1 : object {
    private T _content;
    private IDependencyProvider<T> _dependencies;
    public T Content { get; }
    public IContentNegotiator ContentNegotiator { get; }
    public HttpRequestMessage Request { get; }
    public IEnumerable`1<MediaTypeFormatter> Formatters { get; }
    public OkNegotiatedContentResult`1(T content, IContentNegotiator contentNegotiator, HttpRequestMessage request, IEnumerable`1<MediaTypeFormatter> formatters);
    public OkNegotiatedContentResult`1(T content, ApiController controller);
    private OkNegotiatedContentResult`1(T content, IDependencyProvider<T> dependencies);
    public T get_Content();
    public IContentNegotiator get_ContentNegotiator();
    public HttpRequestMessage get_Request();
    public IEnumerable`1<MediaTypeFormatter> get_Formatters();
    public virtual Task`1<HttpResponseMessage> ExecuteAsync(CancellationToken cancellationToken);
}
public class System.Web.Http.Results.OkResult : object {
    private IDependencyProvider _dependencies;
    public HttpRequestMessage Request { get; }
    public OkResult(HttpRequestMessage request);
    public OkResult(ApiController controller);
    private OkResult(IDependencyProvider dependencies);
    public HttpRequestMessage get_Request();
    public virtual Task`1<HttpResponseMessage> ExecuteAsync(CancellationToken cancellationToken);
}
public class System.Web.Http.Results.RedirectResult : object {
    private Uri _location;
    private IDependencyProvider _dependencies;
    public Uri Location { get; }
    public HttpRequestMessage Request { get; }
    public RedirectResult(Uri location, HttpRequestMessage request);
    public RedirectResult(Uri location, ApiController controller);
    private RedirectResult(Uri location, IDependencyProvider dependencies);
    public Uri get_Location();
    public HttpRequestMessage get_Request();
    public virtual Task`1<HttpResponseMessage> ExecuteAsync(CancellationToken cancellationToken);
    private HttpResponseMessage Execute();
}
public class System.Web.Http.Results.RedirectToRouteResult : object {
    private string _routeName;
    private IDictionary`2<string, object> _routeValues;
    private IDependencyProvider _dependencies;
    public string RouteName { get; }
    public IDictionary`2<string, object> RouteValues { get; }
    public UrlHelper UrlFactory { get; }
    public HttpRequestMessage Request { get; }
    public RedirectToRouteResult(string routeName, IDictionary`2<string, object> routeValues, UrlHelper urlFactory, HttpRequestMessage request);
    public RedirectToRouteResult(string routeName, IDictionary`2<string, object> routeValues, ApiController controller);
    private RedirectToRouteResult(string routeName, IDictionary`2<string, object> routeValues, IDependencyProvider dependencies);
    public string get_RouteName();
    public IDictionary`2<string, object> get_RouteValues();
    public UrlHelper get_UrlFactory();
    public HttpRequestMessage get_Request();
    public virtual Task`1<HttpResponseMessage> ExecuteAsync(CancellationToken cancellationToken);
    private HttpResponseMessage Execute();
}
public class System.Web.Http.Results.ResponseMessageResult : object {
    private HttpResponseMessage _response;
    public HttpResponseMessage Response { get; }
    public ResponseMessageResult(HttpResponseMessage response);
    public HttpResponseMessage get_Response();
    public virtual Task`1<HttpResponseMessage> ExecuteAsync(CancellationToken cancellationToken);
}
public class System.Web.Http.Results.StatusCodeResult : object {
    private HttpStatusCode _statusCode;
    private IDependencyProvider _dependencies;
    public HttpStatusCode StatusCode { get; }
    public HttpRequestMessage Request { get; }
    public StatusCodeResult(HttpStatusCode statusCode, HttpRequestMessage request);
    public StatusCodeResult(HttpStatusCode statusCode, ApiController controller);
    private StatusCodeResult(HttpStatusCode statusCode, IDependencyProvider dependencies);
    public HttpStatusCode get_StatusCode();
    public HttpRequestMessage get_Request();
    public virtual Task`1<HttpResponseMessage> ExecuteAsync(CancellationToken cancellationToken);
    private HttpResponseMessage Execute();
    internal static HttpResponseMessage Execute(HttpStatusCode statusCode, HttpRequestMessage request);
}
public class System.Web.Http.Results.UnauthorizedResult : object {
    private IEnumerable`1<AuthenticationHeaderValue> _challenges;
    private IDependencyProvider _dependencies;
    public IEnumerable`1<AuthenticationHeaderValue> Challenges { get; }
    public HttpRequestMessage Request { get; }
    public UnauthorizedResult(IEnumerable`1<AuthenticationHeaderValue> challenges, HttpRequestMessage request);
    public UnauthorizedResult(IEnumerable`1<AuthenticationHeaderValue> challenges, ApiController controller);
    private UnauthorizedResult(IEnumerable`1<AuthenticationHeaderValue> challenges, IDependencyProvider dependencies);
    public IEnumerable`1<AuthenticationHeaderValue> get_Challenges();
    public HttpRequestMessage get_Request();
    public virtual Task`1<HttpResponseMessage> ExecuteAsync(CancellationToken cancellationToken);
    private HttpResponseMessage Execute();
}
[AttributeUsageAttribute("68")]
public class System.Web.Http.RouteAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Order>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Template>k__BackingField;
    public string Name { get; public set; }
    public int Order { get; public set; }
    public string Template { get; private set; }
    public RouteAttribute(string template);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_Order();
    [CompilerGeneratedAttribute]
public void set_Order(int value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Template();
    [CompilerGeneratedAttribute]
private void set_Template(string value);
    private sealed virtual override RouteEntry System.Web.Http.Routing.IDirectRouteFactory.CreateRoute(DirectRouteFactoryContext context);
}
public class System.Web.Http.RouteParameter : object {
    public static RouteParameter Optional;
    private static RouteParameter();
    public virtual string ToString();
}
[AttributeUsageAttribute("4")]
public class System.Web.Http.RoutePrefixAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Prefix>k__BackingField;
    public string Prefix { get; private set; }
    public RoutePrefixAttribute(string prefix);
    [CompilerGeneratedAttribute]
public virtual string get_Prefix();
    [CompilerGeneratedAttribute]
private void set_Prefix(string value);
}
internal static class System.Web.Http.Routing.AttributeRoutingMapper : object {
    private static string AttributeRouteName;
    public static void MapAttributeRoutes(HttpConfiguration configuration, IInlineConstraintResolver constraintResolver, IDirectRouteProvider directRouteProvider);
    private static void AddGenerationHooksForSubRoutes(HttpRouteCollection routeTable, IEnumerable`1<RouteEntry> entries);
    private static void AddRouteEntries(SubRouteCollection collector, HttpConfiguration configuration, IInlineConstraintResolver constraintResolver, IDirectRouteProvider directRouteProvider);
}
internal class System.Web.Http.Routing.BoundRouteTemplate : object {
    [CompilerGeneratedAttribute]
private string <BoundTemplate>k__BackingField;
    [CompilerGeneratedAttribute]
private HttpRouteValueDictionary <Values>k__BackingField;
    public string BoundTemplate { get; public set; }
    public HttpRouteValueDictionary Values { get; public set; }
    [CompilerGeneratedAttribute]
public string get_BoundTemplate();
    [CompilerGeneratedAttribute]
public void set_BoundTemplate(string value);
    [CompilerGeneratedAttribute]
public HttpRouteValueDictionary get_Values();
    [CompilerGeneratedAttribute]
public void set_Values(HttpRouteValueDictionary value);
}
[DebuggerDisplayAttribute("{DebuggerToString()}")]
internal class System.Web.Http.Routing.CandidateAction : object {
    [CompilerGeneratedAttribute]
private HttpActionDescriptor <ActionDescriptor>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Order>k__BackingField;
    [CompilerGeneratedAttribute]
private decimal <Precedence>k__BackingField;
    public HttpActionDescriptor ActionDescriptor { get; public set; }
    public int Order { get; public set; }
    public decimal Precedence { get; public set; }
    [CompilerGeneratedAttribute]
public HttpActionDescriptor get_ActionDescriptor();
    [CompilerGeneratedAttribute]
public void set_ActionDescriptor(HttpActionDescriptor value);
    [CompilerGeneratedAttribute]
public int get_Order();
    [CompilerGeneratedAttribute]
public void set_Order(int value);
    [CompilerGeneratedAttribute]
public decimal get_Precedence();
    [CompilerGeneratedAttribute]
public void set_Precedence(decimal value);
    public bool MatchName(string actionName);
    public bool MatchVerb(HttpMethod method);
    internal string DebuggerToString();
}
public class System.Web.Http.Routing.Constraints.AlphaRouteConstraint : RegexRouteConstraint {
}
public class System.Web.Http.Routing.Constraints.BoolRouteConstraint : object {
    public sealed virtual bool Match(HttpRequestMessage request, IHttpRoute route, string parameterName, IDictionary`2<string, object> values, HttpRouteDirection routeDirection);
}
public class System.Web.Http.Routing.Constraints.CompoundRouteConstraint : object {
    [CompilerGeneratedAttribute]
private IEnumerable`1<IHttpRouteConstraint> <Constraints>k__BackingField;
    public IEnumerable`1<IHttpRouteConstraint> Constraints { get; private set; }
    public CompoundRouteConstraint(IList`1<IHttpRouteConstraint> constraints);
    [CompilerGeneratedAttribute]
public IEnumerable`1<IHttpRouteConstraint> get_Constraints();
    [CompilerGeneratedAttribute]
private void set_Constraints(IEnumerable`1<IHttpRouteConstraint> value);
    public sealed virtual bool Match(HttpRequestMessage request, IHttpRoute route, string parameterName, IDictionary`2<string, object> values, HttpRouteDirection routeDirection);
}
public class System.Web.Http.Routing.Constraints.DateTimeRouteConstraint : object {
    public sealed virtual bool Match(HttpRequestMessage request, IHttpRoute route, string parameterName, IDictionary`2<string, object> values, HttpRouteDirection routeDirection);
}
public class System.Web.Http.Routing.Constraints.DecimalRouteConstraint : object {
    public sealed virtual bool Match(HttpRequestMessage request, IHttpRoute route, string parameterName, IDictionary`2<string, object> values, HttpRouteDirection routeDirection);
}
public class System.Web.Http.Routing.Constraints.DoubleRouteConstraint : object {
    public sealed virtual bool Match(HttpRequestMessage request, IHttpRoute route, string parameterName, IDictionary`2<string, object> values, HttpRouteDirection routeDirection);
}
public class System.Web.Http.Routing.Constraints.FloatRouteConstraint : object {
    public sealed virtual bool Match(HttpRequestMessage request, IHttpRoute route, string parameterName, IDictionary`2<string, object> values, HttpRouteDirection routeDirection);
}
public class System.Web.Http.Routing.Constraints.GuidRouteConstraint : object {
    public sealed virtual bool Match(HttpRequestMessage request, IHttpRoute route, string parameterName, IDictionary`2<string, object> values, HttpRouteDirection routeDirection);
}
public class System.Web.Http.Routing.Constraints.IntRouteConstraint : object {
    public sealed virtual bool Match(HttpRequestMessage request, IHttpRoute route, string parameterName, IDictionary`2<string, object> values, HttpRouteDirection routeDirection);
}
public class System.Web.Http.Routing.Constraints.LengthRouteConstraint : object {
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Length>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <MinLength>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <MaxLength>k__BackingField;
    public Nullable`1<int> Length { get; private set; }
    public Nullable`1<int> MinLength { get; private set; }
    public Nullable`1<int> MaxLength { get; private set; }
    public LengthRouteConstraint(int length);
    public LengthRouteConstraint(int minLength, int maxLength);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Length();
    [CompilerGeneratedAttribute]
private void set_Length(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_MinLength();
    [CompilerGeneratedAttribute]
private void set_MinLength(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_MaxLength();
    [CompilerGeneratedAttribute]
private void set_MaxLength(Nullable`1<int> value);
    public sealed virtual bool Match(HttpRequestMessage request, IHttpRoute route, string parameterName, IDictionary`2<string, object> values, HttpRouteDirection routeDirection);
}
public class System.Web.Http.Routing.Constraints.LongRouteConstraint : object {
    public sealed virtual bool Match(HttpRequestMessage request, IHttpRoute route, string parameterName, IDictionary`2<string, object> values, HttpRouteDirection routeDirection);
}
public class System.Web.Http.Routing.Constraints.MaxLengthRouteConstraint : object {
    [CompilerGeneratedAttribute]
private int <MaxLength>k__BackingField;
    public int MaxLength { get; private set; }
    public MaxLengthRouteConstraint(int maxLength);
    [CompilerGeneratedAttribute]
public int get_MaxLength();
    [CompilerGeneratedAttribute]
private void set_MaxLength(int value);
    public sealed virtual bool Match(HttpRequestMessage request, IHttpRoute route, string parameterName, IDictionary`2<string, object> values, HttpRouteDirection routeDirection);
}
public class System.Web.Http.Routing.Constraints.MaxRouteConstraint : object {
    [CompilerGeneratedAttribute]
private long <Max>k__BackingField;
    public long Max { get; private set; }
    public MaxRouteConstraint(long max);
    [CompilerGeneratedAttribute]
public long get_Max();
    [CompilerGeneratedAttribute]
private void set_Max(long value);
    public sealed virtual bool Match(HttpRequestMessage request, IHttpRoute route, string parameterName, IDictionary`2<string, object> values, HttpRouteDirection routeDirection);
}
public class System.Web.Http.Routing.Constraints.MinLengthRouteConstraint : object {
    [CompilerGeneratedAttribute]
private int <MinLength>k__BackingField;
    public int MinLength { get; private set; }
    public MinLengthRouteConstraint(int minLength);
    [CompilerGeneratedAttribute]
public int get_MinLength();
    [CompilerGeneratedAttribute]
private void set_MinLength(int value);
    public sealed virtual bool Match(HttpRequestMessage request, IHttpRoute route, string parameterName, IDictionary`2<string, object> values, HttpRouteDirection routeDirection);
}
public class System.Web.Http.Routing.Constraints.MinRouteConstraint : object {
    [CompilerGeneratedAttribute]
private long <Min>k__BackingField;
    public long Min { get; private set; }
    public MinRouteConstraint(long min);
    [CompilerGeneratedAttribute]
public long get_Min();
    [CompilerGeneratedAttribute]
private void set_Min(long value);
    public sealed virtual bool Match(HttpRequestMessage request, IHttpRoute route, string parameterName, IDictionary`2<string, object> values, HttpRouteDirection routeDirection);
}
public class System.Web.Http.Routing.Constraints.OptionalRouteConstraint : object {
    [CompilerGeneratedAttribute]
private IHttpRouteConstraint <InnerConstraint>k__BackingField;
    public IHttpRouteConstraint InnerConstraint { get; private set; }
    public OptionalRouteConstraint(IHttpRouteConstraint innerConstraint);
    [CompilerGeneratedAttribute]
public IHttpRouteConstraint get_InnerConstraint();
    [CompilerGeneratedAttribute]
private void set_InnerConstraint(IHttpRouteConstraint value);
    public sealed virtual bool Match(HttpRequestMessage request, IHttpRoute route, string parameterName, IDictionary`2<string, object> values, HttpRouteDirection routeDirection);
}
public class System.Web.Http.Routing.Constraints.RangeRouteConstraint : object {
    [CompilerGeneratedAttribute]
private long <Min>k__BackingField;
    [CompilerGeneratedAttribute]
private long <Max>k__BackingField;
    public long Min { get; private set; }
    public long Max { get; private set; }
    public RangeRouteConstraint(long min, long max);
    [CompilerGeneratedAttribute]
public long get_Min();
    [CompilerGeneratedAttribute]
private void set_Min(long value);
    [CompilerGeneratedAttribute]
public long get_Max();
    [CompilerGeneratedAttribute]
private void set_Max(long value);
    public sealed virtual bool Match(HttpRequestMessage request, IHttpRoute route, string parameterName, IDictionary`2<string, object> values, HttpRouteDirection routeDirection);
}
public class System.Web.Http.Routing.Constraints.RegexRouteConstraint : object {
    private Regex _regex;
    [CompilerGeneratedAttribute]
private string <Pattern>k__BackingField;
    public string Pattern { get; private set; }
    public RegexRouteConstraint(string pattern);
    [CompilerGeneratedAttribute]
public string get_Pattern();
    [CompilerGeneratedAttribute]
private void set_Pattern(string value);
    public sealed virtual bool Match(HttpRequestMessage request, IHttpRoute route, string parameterName, IDictionary`2<string, object> values, HttpRouteDirection routeDirection);
}
public class System.Web.Http.Routing.DefaultDirectRouteProvider : object {
    public virtual IReadOnlyList`1<RouteEntry> GetDirectRoutes(HttpControllerDescriptor controllerDescriptor, IReadOnlyList`1<HttpActionDescriptor> actionDescriptors, IInlineConstraintResolver constraintResolver);
    protected virtual IReadOnlyList`1<IDirectRouteFactory> GetControllerRouteFactories(HttpControllerDescriptor controllerDescriptor);
    protected virtual IReadOnlyList`1<IDirectRouteFactory> GetActionRouteFactories(HttpActionDescriptor actionDescriptor);
    protected virtual IReadOnlyList`1<RouteEntry> GetControllerDirectRoutes(HttpControllerDescriptor controllerDescriptor, IReadOnlyList`1<HttpActionDescriptor> actionDescriptors, IReadOnlyList`1<IDirectRouteFactory> factories, IInlineConstraintResolver constraintResolver);
    protected virtual IReadOnlyList`1<RouteEntry> GetActionDirectRoutes(HttpActionDescriptor actionDescriptor, IReadOnlyList`1<IDirectRouteFactory> factories, IInlineConstraintResolver constraintResolver);
    protected virtual string GetRoutePrefix(HttpControllerDescriptor controllerDescriptor);
    private static IReadOnlyList`1<RouteEntry> CreateRouteEntries(string prefix, IReadOnlyCollection`1<IDirectRouteFactory> factories, IReadOnlyCollection`1<HttpActionDescriptor> actions, IInlineConstraintResolver constraintResolver, bool targetIsAction);
    private static RouteEntry CreateRouteEntry(string prefix, IDirectRouteFactory factory, IReadOnlyCollection`1<HttpActionDescriptor> actions, IInlineConstraintResolver constraintResolver, bool targetIsAction);
}
public class System.Web.Http.Routing.DefaultInlineConstraintResolver : object {
    private IDictionary`2<string, Type> _inlineConstraintMap;
    public IDictionary`2<string, Type> ConstraintMap { get; }
    public IDictionary`2<string, Type> get_ConstraintMap();
    private static IDictionary`2<string, Type> GetDefaultConstraintMap();
    public virtual IHttpRouteConstraint ResolveConstraint(string inlineConstraint);
    private static object CreateConstraint(Type constraintType, string argumentString);
    private static Object[] ConvertArguments(ParameterInfo[] parameterInfos, String[] arguments);
}
internal class System.Web.Http.Routing.DirectRouteBuilder : object {
    private HttpActionDescriptor[] _actions;
    private bool _targetIsAction;
    private string _template;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, object> <Defaults>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, object> <Constraints>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, object> <DataTokens>k__BackingField;
    [CompilerGeneratedAttribute]
private HttpParsedRoute <ParsedRoute>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Order>k__BackingField;
    [CompilerGeneratedAttribute]
private decimal <Precedence>k__BackingField;
    public string Name { get; public set; }
    public string Template { get; public set; }
    public IDictionary`2<string, object> Defaults { get; public set; }
    public IDictionary`2<string, object> Constraints { get; public set; }
    public IDictionary`2<string, object> DataTokens { get; public set; }
    internal HttpParsedRoute ParsedRoute { get; internal set; }
    public int Order { get; public set; }
    public decimal Precedence { get; public set; }
    public IReadOnlyCollection`1<HttpActionDescriptor> Actions { get; }
    public bool TargetIsAction { get; }
    public DirectRouteBuilder(IReadOnlyCollection`1<HttpActionDescriptor> actions, bool targetIsAction);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Name(string value);
    public sealed virtual string get_Template();
    public sealed virtual void set_Template(string value);
    [CompilerGeneratedAttribute]
public sealed virtual IDictionary`2<string, object> get_Defaults();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Defaults(IDictionary`2<string, object> value);
    [CompilerGeneratedAttribute]
public sealed virtual IDictionary`2<string, object> get_Constraints();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Constraints(IDictionary`2<string, object> value);
    [CompilerGeneratedAttribute]
public sealed virtual IDictionary`2<string, object> get_DataTokens();
    [CompilerGeneratedAttribute]
public sealed virtual void set_DataTokens(IDictionary`2<string, object> value);
    [CompilerGeneratedAttribute]
internal HttpParsedRoute get_ParsedRoute();
    [CompilerGeneratedAttribute]
internal void set_ParsedRoute(HttpParsedRoute value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_Order();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Order(int value);
    [CompilerGeneratedAttribute]
public sealed virtual decimal get_Precedence();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Precedence(decimal value);
    public sealed virtual IReadOnlyCollection`1<HttpActionDescriptor> get_Actions();
    public sealed virtual bool get_TargetIsAction();
    public virtual RouteEntry Build();
    internal virtual void ValidateParameters(HttpParsedRoute parsedRoute);
    internal static void ValidateRouteEntry(RouteEntry entry);
    private static HttpRouteValueDictionary Copy(IDictionary`2<string, object> routeDictionary);
}
public class System.Web.Http.Routing.DirectRouteFactoryContext : object {
    private string _actionName;
    private string _prefix;
    private IReadOnlyCollection`1<HttpActionDescriptor> _actions;
    private IInlineConstraintResolver _inlineConstraintResolver;
    private bool _targetIsAction;
    public string Prefix { get; }
    public IReadOnlyCollection`1<HttpActionDescriptor> Actions { get; }
    public IInlineConstraintResolver InlineConstraintResolver { get; }
    public bool TargetIsAction { get; }
    public DirectRouteFactoryContext(string prefix, IReadOnlyCollection`1<HttpActionDescriptor> actions, IInlineConstraintResolver inlineConstraintResolver, bool targetIsAction);
    public string get_Prefix();
    public IReadOnlyCollection`1<HttpActionDescriptor> get_Actions();
    public IInlineConstraintResolver get_InlineConstraintResolver();
    public bool get_TargetIsAction();
    public IDirectRouteBuilder CreateBuilder(string template);
    internal virtual IDirectRouteBuilder CreateBuilderInternal(string template);
    public IDirectRouteBuilder CreateBuilder(string template, IInlineConstraintResolver constraintResolver);
    private static string BuildRouteTemplate(string routePrefix, string routeTemplate);
    private void ValidateTemplate(string template);
}
public class System.Web.Http.Routing.HttpMethodConstraint : object {
    [CompilerGeneratedAttribute]
private Collection`1<HttpMethod> <AllowedMethods>k__BackingField;
    public Collection`1<HttpMethod> AllowedMethods { get; private set; }
    public HttpMethodConstraint(HttpMethod[] allowedMethods);
    [CompilerGeneratedAttribute]
public Collection`1<HttpMethod> get_AllowedMethods();
    [CompilerGeneratedAttribute]
private void set_AllowedMethods(Collection`1<HttpMethod> value);
    protected virtual bool Match(HttpRequestMessage request, IHttpRoute route, string parameterName, IDictionary`2<string, object> values, HttpRouteDirection routeDirection);
    private sealed virtual override bool System.Web.Http.Routing.IHttpRouteConstraint.Match(HttpRequestMessage request, IHttpRoute route, string parameterName, IDictionary`2<string, object> values, HttpRouteDirection routeDirection);
}
internal class System.Web.Http.Routing.HttpParsedRoute : object {
    [CompilerGeneratedAttribute]
private List`1<PathSegment> <PathSegments>k__BackingField;
    public List`1<PathSegment> PathSegments { get; private set; }
    public HttpParsedRoute(List`1<PathSegment> pathSegments);
    [CompilerGeneratedAttribute]
public List`1<PathSegment> get_PathSegments();
    [CompilerGeneratedAttribute]
private void set_PathSegments(List`1<PathSegment> value);
    public BoundRouteTemplate Bind(IDictionary`2<string, object> currentValues, IDictionary`2<string, object> values, HttpRouteValueDictionary defaultValues, HttpRouteValueDictionary constraints);
    private static string EscapeReservedCharacters(Match m);
    private static bool ForEachParameter(List`1<PathSegment> pathSegments, Func`2<PathParameterSubsegment, bool> action);
    private static PathParameterSubsegment GetParameterSubsegment(List`1<PathSegment> pathSegments, string parameterName);
    private static bool IsParameterRequired(PathParameterSubsegment parameterSubsegment, HttpRouteValueDictionary defaultValues, Object& defaultValue);
    private static bool IsRoutePartNonEmpty(object routePart);
    public HttpRouteValueDictionary Match(RoutingContext context, HttpRouteValueDictionary defaultValues);
    private static void MatchCatchAll(PathContentSegment contentPathSegment, IEnumerable`1<string> remainingRequestSegments, HttpRouteValueDictionary defaultValues, HttpRouteValueDictionary matchedValues);
    private static bool MatchContentPathSegment(PathContentSegment routeSegment, string requestPathSegment, HttpRouteValueDictionary defaultValues, HttpRouteValueDictionary matchedValues);
    private static bool MatchSingleContentPathSegment(PathSubsegment pathSubsegment, string requestPathSegment, HttpRouteValueDictionary matchedValues);
    private static bool RoutePartsEqual(object a, object b);
    private static string UriEncode(string str);
}
public class System.Web.Http.Routing.HttpRoute : object {
    public static string HttpRouteKey;
    internal static string RoutingContextKey;
    private string _routeTemplate;
    private HttpRouteValueDictionary _defaults;
    private HttpRouteValueDictionary _constraints;
    private HttpRouteValueDictionary _dataTokens;
    [CompilerGeneratedAttribute]
private HttpMessageHandler <Handler>k__BackingField;
    [CompilerGeneratedAttribute]
private HttpParsedRoute <ParsedRoute>k__BackingField;
    public IDictionary`2<string, object> Defaults { get; }
    public IDictionary`2<string, object> Constraints { get; }
    public IDictionary`2<string, object> DataTokens { get; }
    public HttpMessageHandler Handler { get; private set; }
    public string RouteTemplate { get; }
    internal HttpParsedRoute ParsedRoute { get; private set; }
    public HttpRoute(string routeTemplate);
    public HttpRoute(string routeTemplate, HttpRouteValueDictionary defaults);
    public HttpRoute(string routeTemplate, HttpRouteValueDictionary defaults, HttpRouteValueDictionary constraints);
    public HttpRoute(string routeTemplate, HttpRouteValueDictionary defaults, HttpRouteValueDictionary constraints, HttpRouteValueDictionary dataTokens);
    public HttpRoute(string routeTemplate, HttpRouteValueDictionary defaults, HttpRouteValueDictionary constraints, HttpRouteValueDictionary dataTokens, HttpMessageHandler handler);
    internal HttpRoute(string routeTemplate, HttpRouteValueDictionary defaults, HttpRouteValueDictionary constraints, HttpRouteValueDictionary dataTokens, HttpMessageHandler handler, HttpParsedRoute parsedRoute);
    private static HttpRoute();
    public sealed virtual IDictionary`2<string, object> get_Defaults();
    public sealed virtual IDictionary`2<string, object> get_Constraints();
    public sealed virtual IDictionary`2<string, object> get_DataTokens();
    [CompilerGeneratedAttribute]
public sealed virtual HttpMessageHandler get_Handler();
    [CompilerGeneratedAttribute]
private void set_Handler(HttpMessageHandler value);
    public sealed virtual string get_RouteTemplate();
    [CompilerGeneratedAttribute]
internal HttpParsedRoute get_ParsedRoute();
    [CompilerGeneratedAttribute]
private void set_ParsedRoute(HttpParsedRoute value);
    public virtual IHttpRouteData GetRouteData(string virtualPathRoot, HttpRequestMessage request);
    private static RoutingContext GetOrCreateRoutingContext(string virtualPathRoot, HttpRequestMessage request);
    private static RoutingContext CreateRoutingContext(string virtualPathRoot, HttpRequestMessage request);
    public virtual IHttpVirtualPathData GetVirtualPath(HttpRequestMessage request, IDictionary`2<string, object> values);
    private static IDictionary`2<string, object> GetRouteDictionaryWithoutHttpRouteKey(IDictionary`2<string, object> routeValues);
    protected virtual bool ProcessConstraint(HttpRequestMessage request, object constraint, string parameterName, HttpRouteValueDictionary values, HttpRouteDirection routeDirection);
    private bool ProcessConstraints(HttpRequestMessage request, HttpRouteValueDictionary values, HttpRouteDirection routeDirection);
    internal static void ValidateConstraint(string routeTemplate, string name, object constraint);
    private static Exception CreateInvalidConstraintTypeException(string routeTemplate, string name);
}
public class System.Web.Http.Routing.HttpRouteData : object {
    private IHttpRoute _route;
    private IDictionary`2<string, object> _values;
    public IHttpRoute Route { get; }
    public IDictionary`2<string, object> Values { get; }
    public HttpRouteData(IHttpRoute route);
    public HttpRouteData(IHttpRoute route, HttpRouteValueDictionary values);
    public sealed virtual IHttpRoute get_Route();
    public sealed virtual IDictionary`2<string, object> get_Values();
}
[ExtensionAttribute]
public static class System.Web.Http.Routing.HttpRouteDataExtensions : object {
    [ExtensionAttribute]
public static void RemoveOptionalRoutingParameters(IHttpRouteData routeData);
    private static void RemoveOptionalRoutingParameters(IDictionary`2<string, object> routeValueDictionary);
    [ExtensionAttribute]
public static IEnumerable`1<IHttpRouteData> GetSubRoutes(IHttpRouteData routeData);
    [ExtensionAttribute]
internal static CandidateAction[] GetDirectRouteCandidates(IHttpRouteData routeData);
}
public enum System.Web.Http.Routing.HttpRouteDirection : Enum {
    public int value__;
    public static HttpRouteDirection UriResolution;
    public static HttpRouteDirection UriGeneration;
}
[ExtensionAttribute]
internal static class System.Web.Http.Routing.HttpRouteExtensions : object {
    [ExtensionAttribute]
public static CandidateAction[] GetDirectRouteCandidates(IHttpRoute route);
    [ExtensionAttribute]
public static HttpActionDescriptor[] GetTargetActionDescriptors(IHttpRoute route);
    [ExtensionAttribute]
public static HttpControllerDescriptor GetTargetControllerDescriptor(IHttpRoute route);
}
public class System.Web.Http.Routing.HttpRouteValueDictionary : Dictionary`2<string, object> {
    public HttpRouteValueDictionary(IDictionary`2<string, object> dictionary);
    public HttpRouteValueDictionary(object values);
}
public class System.Web.Http.Routing.HttpVirtualPathData : object {
    private string _virtualPath;
    [CompilerGeneratedAttribute]
private IHttpRoute <Route>k__BackingField;
    public IHttpRoute Route { get; private set; }
    public string VirtualPath { get; public set; }
    public HttpVirtualPathData(IHttpRoute route, string virtualPath);
    [CompilerGeneratedAttribute]
public sealed virtual IHttpRoute get_Route();
    [CompilerGeneratedAttribute]
private void set_Route(IHttpRoute value);
    public sealed virtual string get_VirtualPath();
    public sealed virtual void set_VirtualPath(string value);
}
public interface System.Web.Http.Routing.IDirectRouteBuilder {
    public string Name { get; public set; }
    public string Template { get; public set; }
    public IDictionary`2<string, object> Defaults { get; public set; }
    public IDictionary`2<string, object> Constraints { get; public set; }
    public IDictionary`2<string, object> DataTokens { get; public set; }
    public int Order { get; public set; }
    public decimal Precedence { get; public set; }
    public IReadOnlyCollection`1<HttpActionDescriptor> Actions { get; }
    public bool TargetIsAction { get; }
    public abstract virtual string get_Name();
    public abstract virtual void set_Name(string value);
    public abstract virtual string get_Template();
    public abstract virtual void set_Template(string value);
    public abstract virtual IDictionary`2<string, object> get_Defaults();
    public abstract virtual void set_Defaults(IDictionary`2<string, object> value);
    public abstract virtual IDictionary`2<string, object> get_Constraints();
    public abstract virtual void set_Constraints(IDictionary`2<string, object> value);
    public abstract virtual IDictionary`2<string, object> get_DataTokens();
    public abstract virtual void set_DataTokens(IDictionary`2<string, object> value);
    public abstract virtual int get_Order();
    public abstract virtual void set_Order(int value);
    public abstract virtual decimal get_Precedence();
    public abstract virtual void set_Precedence(decimal value);
    public abstract virtual IReadOnlyCollection`1<HttpActionDescriptor> get_Actions();
    public abstract virtual bool get_TargetIsAction();
    public abstract virtual RouteEntry Build();
}
public interface System.Web.Http.Routing.IDirectRouteFactory {
    public abstract virtual RouteEntry CreateRoute(DirectRouteFactoryContext context);
}
public interface System.Web.Http.Routing.IDirectRouteProvider {
    public abstract virtual IReadOnlyList`1<RouteEntry> GetDirectRoutes(HttpControllerDescriptor controllerDescriptor, IReadOnlyList`1<HttpActionDescriptor> actionDescriptors, IInlineConstraintResolver constraintResolver);
}
public interface System.Web.Http.Routing.IHttpRoute {
    public string RouteTemplate { get; }
    public IDictionary`2<string, object> Defaults { get; }
    public IDictionary`2<string, object> Constraints { get; }
    public IDictionary`2<string, object> DataTokens { get; }
    public HttpMessageHandler Handler { get; }
    public abstract virtual string get_RouteTemplate();
    public abstract virtual IDictionary`2<string, object> get_Defaults();
    public abstract virtual IDictionary`2<string, object> get_Constraints();
    public abstract virtual IDictionary`2<string, object> get_DataTokens();
    public abstract virtual HttpMessageHandler get_Handler();
    public abstract virtual IHttpRouteData GetRouteData(string virtualPathRoot, HttpRequestMessage request);
    public abstract virtual IHttpVirtualPathData GetVirtualPath(HttpRequestMessage request, IDictionary`2<string, object> values);
}
public interface System.Web.Http.Routing.IHttpRouteConstraint {
    public abstract virtual bool Match(HttpRequestMessage request, IHttpRoute route, string parameterName, IDictionary`2<string, object> values, HttpRouteDirection routeDirection);
}
public interface System.Web.Http.Routing.IHttpRouteData {
    public IHttpRoute Route { get; }
    public IDictionary`2<string, object> Values { get; }
    public abstract virtual IHttpRoute get_Route();
    public abstract virtual IDictionary`2<string, object> get_Values();
}
public interface System.Web.Http.Routing.IHttpRouteInfoProvider {
    public string Name { get; }
    public string Template { get; }
    public int Order { get; }
    public abstract virtual string get_Name();
    public abstract virtual string get_Template();
    public abstract virtual int get_Order();
}
public interface System.Web.Http.Routing.IHttpVirtualPathData {
    public IHttpRoute Route { get; }
    public string VirtualPath { get; public set; }
    public abstract virtual IHttpRoute get_Route();
    public abstract virtual string get_VirtualPath();
    public abstract virtual void set_VirtualPath(string value);
}
public interface System.Web.Http.Routing.IInlineConstraintResolver {
    public abstract virtual IHttpRouteConstraint ResolveConstraint(string inlineConstraint);
}
internal class System.Web.Http.Routing.InlineRouteTemplateParser : object {
    private static string ParameterNameRegex;
    private static string ConstraintRegex;
    private static string DefaultValueRegex;
    private static Regex _parameterRegex;
    private static InlineRouteTemplateParser();
    public static string ParseRouteTemplate(string routeTemplate, IDictionary`2<string, object> defaults, IDictionary`2<string, object> constraints, IInlineConstraintResolver constraintResolver);
    private static object GetDefaultValue(Group defaultValueGroup);
    private static IHttpRouteConstraint GetInlineConstraint(Group constraintGroup, bool isOptional, IInlineConstraintResolver constraintResolver);
}
public interface System.Web.Http.Routing.IRoutePrefix {
    public string Prefix { get; }
    public abstract virtual string get_Prefix();
}
internal class System.Web.Http.Routing.LinkGenerationRoute : object {
    private IHttpRoute _innerRoute;
    public string RouteTemplate { get; }
    public IDictionary`2<string, object> Defaults { get; }
    public IDictionary`2<string, object> Constraints { get; }
    public IDictionary`2<string, object> DataTokens { get; }
    public HttpMessageHandler Handler { get; }
    public LinkGenerationRoute(IHttpRoute innerRoute);
    public sealed virtual string get_RouteTemplate();
    public sealed virtual IDictionary`2<string, object> get_Defaults();
    public sealed virtual IDictionary`2<string, object> get_Constraints();
    public sealed virtual IDictionary`2<string, object> get_DataTokens();
    public sealed virtual HttpMessageHandler get_Handler();
    public sealed virtual IHttpRouteData GetRouteData(string virtualPathRoot, HttpRequestMessage request);
    public sealed virtual IHttpVirtualPathData GetVirtualPath(HttpRequestMessage request, IDictionary`2<string, object> values);
}
internal class System.Web.Http.Routing.PathContentSegment : PathSegment {
    [CompilerGeneratedAttribute]
private List`1<PathSubsegment> <Subsegments>k__BackingField;
    public bool IsCatchAll { get; }
    public List`1<PathSubsegment> Subsegments { get; private set; }
    public PathContentSegment(List`1<PathSubsegment> subsegments);
    public bool get_IsCatchAll();
    [CompilerGeneratedAttribute]
public List`1<PathSubsegment> get_Subsegments();
    [CompilerGeneratedAttribute]
private void set_Subsegments(List`1<PathSubsegment> value);
}
internal class System.Web.Http.Routing.PathLiteralSubsegment : PathSubsegment {
    [CompilerGeneratedAttribute]
private string <Literal>k__BackingField;
    public string Literal { get; private set; }
    public PathLiteralSubsegment(string literal);
    [CompilerGeneratedAttribute]
public string get_Literal();
    [CompilerGeneratedAttribute]
private void set_Literal(string value);
}
internal class System.Web.Http.Routing.PathParameterSubsegment : PathSubsegment {
    [CompilerGeneratedAttribute]
private bool <IsCatchAll>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ParameterName>k__BackingField;
    public bool IsCatchAll { get; private set; }
    public string ParameterName { get; private set; }
    public PathParameterSubsegment(string parameterName);
    [CompilerGeneratedAttribute]
public bool get_IsCatchAll();
    [CompilerGeneratedAttribute]
private void set_IsCatchAll(bool value);
    [CompilerGeneratedAttribute]
public string get_ParameterName();
    [CompilerGeneratedAttribute]
private void set_ParameterName(string value);
}
internal abstract class System.Web.Http.Routing.PathSegment : object {
}
internal class System.Web.Http.Routing.PathSeparatorSegment : PathSegment {
}
internal abstract class System.Web.Http.Routing.PathSubsegment : object {
}
internal class System.Web.Http.Routing.RouteCollectionRoute : object {
    public static string SubRouteDataKey;
    private IReadOnlyCollection`1<IHttpRoute> _subRoutes;
    private static IDictionary`2<string, object> _empty;
    private bool _beingInitialized;
    private IReadOnlyCollection`1<IHttpRoute> SubRoutes { get; }
    public string RouteTemplate { get; }
    public IDictionary`2<string, object> Defaults { get; }
    public IDictionary`2<string, object> Constraints { get; }
    public IDictionary`2<string, object> DataTokens { get; }
    public HttpMessageHandler Handler { get; }
    public int Count { get; }
    private static RouteCollectionRoute();
    public void EnsureInitialized(Func`1<IReadOnlyCollection`1<IHttpRoute>> initializer);
    private IReadOnlyCollection`1<IHttpRoute> get_SubRoutes();
    public sealed virtual string get_RouteTemplate();
    public sealed virtual IDictionary`2<string, object> get_Defaults();
    public sealed virtual IDictionary`2<string, object> get_Constraints();
    public sealed virtual IDictionary`2<string, object> get_DataTokens();
    public sealed virtual HttpMessageHandler get_Handler();
    public sealed virtual IHttpRouteData GetRouteData(string virtualPathRoot, HttpRequestMessage request);
    public sealed virtual IHttpVirtualPathData GetVirtualPath(HttpRequestMessage request, IDictionary`2<string, object> values);
    public sealed virtual int get_Count();
    public sealed virtual IEnumerator`1<IHttpRoute> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
internal static class System.Web.Http.Routing.RouteDataTokenKeys : object {
    public static string Actions;
    public static string Controller;
    public static string Order;
    public static string Precedence;
}
public class System.Web.Http.Routing.RouteEntry : object {
    private string _name;
    private IHttpRoute _route;
    public string Name { get; }
    public IHttpRoute Route { get; }
    public RouteEntry(string name, IHttpRoute route);
    public string get_Name();
    public IHttpRoute get_Route();
}
[AttributeUsageAttribute("68")]
public abstract class System.Web.Http.Routing.RouteFactoryAttribute : Attribute {
    private string _template;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Order>k__BackingField;
    public string Template { get; }
    public string Name { get; public set; }
    public int Order { get; public set; }
    public IDictionary`2<string, object> Defaults { get; }
    public IDictionary`2<string, object> Constraints { get; }
    public IDictionary`2<string, object> DataTokens { get; }
    protected RouteFactoryAttribute(string template);
    public string get_Template();
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public int get_Order();
    [CompilerGeneratedAttribute]
public void set_Order(int value);
    public virtual IDictionary`2<string, object> get_Defaults();
    public virtual IDictionary`2<string, object> get_Constraints();
    public virtual IDictionary`2<string, object> get_DataTokens();
    public sealed virtual RouteEntry CreateRoute(DirectRouteFactoryContext context);
}
internal class System.Web.Http.Routing.RouteInfoDirectRouteFactory : object {
    private IHttpRouteInfoProvider _infoProvider;
    public RouteInfoDirectRouteFactory(IHttpRouteInfoProvider infoProvider);
    public sealed virtual RouteEntry CreateRoute(DirectRouteFactoryContext context);
}
internal static class System.Web.Http.Routing.RouteParser : object {
    private static string GetLiteral(string segmentLiteral);
    private static int IndexOfFirstOpenParameter(string segment, int startIndex);
    internal static bool IsSeparator(string s);
    private static bool IsValidParameterName(string parameterName);
    internal static bool IsInvalidRouteTemplate(string routeTemplate);
    public static HttpParsedRoute Parse(string routeTemplate);
    private static List`1<PathSubsegment> ParseUriSegment(string segment, Exception& exception);
    private static List`1<PathSegment> SplitUriToPathSegments(List`1<string> uriParts);
    internal static List`1<string> SplitUriToPathSegmentStrings(string uri);
    private static Exception ValidateUriParts(List`1<string> pathSegments);
    private static Exception ValidateUriSegment(List`1<PathSubsegment> pathSubsegments, HashSet`1<string> usedParameterNames);
}
internal static class System.Web.Http.Routing.RoutePrecedence : object {
    internal static int ComputeDigit(PathContentSegment segment, IDictionary`2<string, object> constraints);
    public static decimal Compute(HttpParsedRoute parsedRoute, IDictionary`2<string, object> constraints);
}
internal static class System.Web.Http.Routing.RouteValueKeys : object {
    public static string Action;
    public static string Controller;
}
internal class System.Web.Http.Routing.RoutingContext : object {
    private static RoutingContext CachedInvalid;
    [CompilerGeneratedAttribute]
private bool <IsValid>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <PathSegments>k__BackingField;
    public bool IsValid { get; private set; }
    public List`1<string> PathSegments { get; private set; }
    private static RoutingContext();
    public static RoutingContext Invalid();
    public static RoutingContext Valid(List`1<string> pathSegments);
    [CompilerGeneratedAttribute]
public bool get_IsValid();
    [CompilerGeneratedAttribute]
private void set_IsValid(bool value);
    [CompilerGeneratedAttribute]
public List`1<string> get_PathSegments();
    [CompilerGeneratedAttribute]
private void set_PathSegments(List`1<string> value);
}
public class System.Web.Http.Routing.StopRoutingHandler : HttpMessageHandler {
    protected virtual Task`1<HttpResponseMessage> SendAsync(HttpRequestMessage request, CancellationToken cancellationToken);
}
internal class System.Web.Http.Routing.SubRouteCollection : object {
    private List`1<IHttpRoute> _routes;
    private List`1<RouteEntry> _entries;
    public int Count { get; }
    public IReadOnlyCollection`1<RouteEntry> Entries { get; }
    public void Add(RouteEntry entry);
    public void AddRange(IEnumerable`1<RouteEntry> entries);
    public sealed virtual int get_Count();
    public sealed virtual IEnumerator`1<IHttpRoute> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public IReadOnlyCollection`1<RouteEntry> get_Entries();
    private static void ThrowExceptionForDuplicateRouteNames(string name, IHttpRoute route1, IHttpRoute route2);
}
public class System.Web.Http.Routing.UrlHelper : object {
    private HttpRequestMessage _request;
    public HttpRequestMessage Request { get; public set; }
    public UrlHelper(HttpRequestMessage request);
    public HttpRequestMessage get_Request();
    public void set_Request(HttpRequestMessage value);
    public virtual string Content(string path);
    public virtual string Route(string routeName, object routeValues);
    public virtual string Route(string routeName, IDictionary`2<string, object> routeValues);
    public virtual string Link(string routeName, object routeValues);
    public virtual string Link(string routeName, IDictionary`2<string, object> routeValues);
    private static string GetVirtualPath(HttpRequestMessage request, string routeName, IDictionary`2<string, object> routeValues);
}
public static class System.Web.Http.Services.Decorator : object {
    public static T GetInner(T outer);
}
public class System.Web.Http.Services.DefaultServices : ServicesContainer {
    private ConcurrentDictionary`2<Type, Object[]> _cacheMulti;
    private ConcurrentDictionary`2<Type, object> _cacheSingle;
    private HttpConfiguration _configuration;
    private Dictionary`2<Type, object> _defaultServicesSingle;
    private Dictionary`2<Type, List`1<object>> _defaultServicesMulti;
    private IDependencyResolver _lastKnownDependencyResolver;
    private HashSet`1<Type> _serviceTypesSingle;
    private HashSet`1<Type> _serviceTypesMulti;
    public DefaultServices(HttpConfiguration configuration);
    private void SetSingle(T instance);
    private void SetMultiple(T[] instances);
    public virtual bool IsSingleService(Type serviceType);
    public virtual object GetService(Type serviceType);
    public virtual IEnumerable`1<object> GetServices(Type serviceType);
    protected virtual List`1<object> GetServiceInstances(Type serviceType);
    protected virtual void ClearSingle(Type serviceType);
    protected virtual void ReplaceSingle(Type serviceType, object service);
    private void ResetCache();
    protected virtual void ResetCache(Type serviceType);
    [CompilerGeneratedAttribute]
private IEnumerable`1<ModelValidatorProvider> <.ctor>b__11_0();
}
public interface System.Web.Http.Services.IDecorator`1 {
    public T Inner { get; }
    public abstract virtual T get_Inner();
}
[ExtensionAttribute]
[EditorBrowsableAttribute("1")]
public static class System.Web.Http.ServicesExtensions : object {
    [ExtensionAttribute]
public static IEnumerable`1<ModelBinderProvider> GetModelBinderProviders(ServicesContainer services);
    [ExtensionAttribute]
public static ModelMetadataProvider GetModelMetadataProvider(ServicesContainer services);
    [ExtensionAttribute]
public static IEnumerable`1<ModelValidatorProvider> GetModelValidatorProviders(ServicesContainer services);
    [ExtensionAttribute]
internal static IModelValidatorCache GetModelValidatorCache(ServicesContainer services);
    [ExtensionAttribute]
public static IContentNegotiator GetContentNegotiator(ServicesContainer services);
    [ExtensionAttribute]
public static IHttpControllerActivator GetHttpControllerActivator(ServicesContainer services);
    [ExtensionAttribute]
public static IHttpActionSelector GetActionSelector(ServicesContainer services);
    [ExtensionAttribute]
public static IHttpActionInvoker GetActionInvoker(ServicesContainer services);
    [ExtensionAttribute]
public static IActionValueBinder GetActionValueBinder(ServicesContainer services);
    [ExtensionAttribute]
public static IEnumerable`1<ValueProviderFactory> GetValueProviderFactories(ServicesContainer services);
    [ExtensionAttribute]
public static IBodyModelValidator GetBodyModelValidator(ServicesContainer services);
    [ExtensionAttribute]
public static IHostBufferPolicySelector GetHostBufferPolicySelector(ServicesContainer services);
    [ExtensionAttribute]
public static IHttpControllerSelector GetHttpControllerSelector(ServicesContainer services);
    [ExtensionAttribute]
public static IAssembliesResolver GetAssembliesResolver(ServicesContainer services);
    [ExtensionAttribute]
public static IHttpControllerTypeResolver GetHttpControllerTypeResolver(ServicesContainer services);
    [ExtensionAttribute]
public static IApiExplorer GetApiExplorer(ServicesContainer services);
    [ExtensionAttribute]
public static IDocumentationProvider GetDocumentationProvider(ServicesContainer services);
    [ExtensionAttribute]
public static IExceptionHandler GetExceptionHandler(ServicesContainer services);
    [ExtensionAttribute]
public static IEnumerable`1<IExceptionLogger> GetExceptionLoggers(ServicesContainer services);
    [ExtensionAttribute]
public static IEnumerable`1<IFilterProvider> GetFilterProviders(ServicesContainer services);
    [ExtensionAttribute]
public static ITraceManager GetTraceManager(ServicesContainer services);
    [ExtensionAttribute]
public static ITraceWriter GetTraceWriter(ServicesContainer services);
    [ExtensionAttribute]
internal static IEnumerable`1<TService> GetServices(ServicesContainer services);
    [ExtensionAttribute]
private static TService GetService(ServicesContainer services);
    [ExtensionAttribute]
private static T GetServiceOrThrow(ServicesContainer services);
}
[TypeForwardedFromAttribute("System.Web.Http.OData, Version=5.1.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")]
public abstract class System.Web.Http.SingleResult : object {
    [CompilerGeneratedAttribute]
private IQueryable <Queryable>k__BackingField;
    public IQueryable Queryable { get; private set; }
    protected SingleResult(IQueryable queryable);
    [CompilerGeneratedAttribute]
public IQueryable get_Queryable();
    [CompilerGeneratedAttribute]
private void set_Queryable(IQueryable value);
    public static SingleResult`1<T> Create(IQueryable`1<T> queryable);
}
[TypeForwardedFromAttribute("System.Web.Http.OData, Version=5.1.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")]
public class System.Web.Http.SingleResult`1 : SingleResult {
    public IQueryable`1<T> Queryable { get; }
    public SingleResult`1(IQueryable`1<T> queryable);
    public IQueryable`1<T> get_Queryable();
}
internal static class System.Web.Http.Tracing.FormattingUtilities : object {
    public static string NullMessage;
    private static FormattingUtilities();
    public static string ActionArgumentsToString(IDictionary`2<string, object> actionArguments);
    public static string ActionDescriptorToString(HttpActionDescriptor actionDescriptor);
    public static string ActionInvokeToString(HttpActionContext actionContext);
    public static string ActionInvokeToString(string actionName, IDictionary`2<string, object> arguments);
    public static string FormattersToString(IEnumerable`1<MediaTypeFormatter> formatters);
    public static string ModelBinderToString(ModelBinderProvider provider);
    public static string ModelStateToString(ModelStateDictionary modelState);
    public static string RouteToString(IHttpRouteData routeData);
    public static string ValueProviderToString(IValueProvider provider);
    public static string ValueToString(object value, CultureInfo cultureInfo);
}
internal interface System.Web.Http.Tracing.IFormatterTracer {
    public HttpRequestMessage Request { get; }
    public MediaTypeFormatter InnerFormatter { get; }
    public abstract virtual HttpRequestMessage get_Request();
    public abstract virtual MediaTypeFormatter get_InnerFormatter();
}
public interface System.Web.Http.Tracing.ITraceManager {
    public abstract virtual void Initialize(HttpConfiguration configuration);
}
public interface System.Web.Http.Tracing.ITraceWriter {
    public abstract virtual void Trace(HttpRequestMessage request, string category, TraceLevel level, Action`1<TraceRecord> traceAction);
}
[ExtensionAttribute]
public static class System.Web.Http.Tracing.ITraceWriterExtensions : object {
    [ExtensionAttribute]
public static void Debug(ITraceWriter traceWriter, HttpRequestMessage request, string category, string messageFormat, Object[] messageArguments);
    [ExtensionAttribute]
public static void Debug(ITraceWriter traceWriter, HttpRequestMessage request, string category, Exception exception);
    [ExtensionAttribute]
public static void Debug(ITraceWriter traceWriter, HttpRequestMessage request, string category, Exception exception, string messageFormat, Object[] messageArguments);
    [ExtensionAttribute]
public static void Error(ITraceWriter traceWriter, HttpRequestMessage request, string category, string messageFormat, Object[] messageArguments);
    [ExtensionAttribute]
public static void Error(ITraceWriter traceWriter, HttpRequestMessage request, string category, Exception exception);
    [ExtensionAttribute]
public static void Error(ITraceWriter traceWriter, HttpRequestMessage request, string category, Exception exception, string messageFormat, Object[] messageArguments);
    [ExtensionAttribute]
public static void Fatal(ITraceWriter traceWriter, HttpRequestMessage request, string category, string messageFormat, Object[] messageArguments);
    [ExtensionAttribute]
public static void Fatal(ITraceWriter traceWriter, HttpRequestMessage request, string category, Exception exception);
    [ExtensionAttribute]
public static void Fatal(ITraceWriter traceWriter, HttpRequestMessage request, string category, Exception exception, string messageFormat, Object[] messageArguments);
    [ExtensionAttribute]
public static void Info(ITraceWriter traceWriter, HttpRequestMessage request, string category, string messageFormat, Object[] messageArguments);
    [ExtensionAttribute]
public static void Info(ITraceWriter traceWriter, HttpRequestMessage request, string category, Exception exception);
    [ExtensionAttribute]
public static void Info(ITraceWriter traceWriter, HttpRequestMessage request, string category, Exception exception, string messageFormat, Object[] messageArguments);
    [ExtensionAttribute]
public static void Trace(ITraceWriter traceWriter, HttpRequestMessage request, string category, TraceLevel level, Exception exception);
    [ExtensionAttribute]
public static void Trace(ITraceWriter traceWriter, HttpRequestMessage request, string category, TraceLevel level, Exception exception, string messageFormat, Object[] messageArguments);
    [ExtensionAttribute]
public static void Trace(ITraceWriter traceWriter, HttpRequestMessage request, string category, TraceLevel level, string messageFormat, Object[] messageArguments);
    [ExtensionAttribute]
public static void TraceBeginEnd(ITraceWriter traceWriter, HttpRequestMessage request, string category, TraceLevel level, string operatorName, string operationName, Action`1<TraceRecord> beginTrace, Action execute, Action`1<TraceRecord> endTrace, Action`1<TraceRecord> errorTrace);
    [ExtensionAttribute]
public static Task`1<TResult> TraceBeginEndAsync(ITraceWriter traceWriter, HttpRequestMessage request, string category, TraceLevel level, string operatorName, string operationName, Action`1<TraceRecord> beginTrace, Func`1<Task`1<TResult>> execute, Action`2<TraceRecord, TResult> endTrace, Action`1<TraceRecord> errorTrace);
    [AsyncStateMachineAttribute("System.Web.Http.Tracing.ITraceWriterExtensions/<TraceBeginEndAsyncCore>d__17`1")]
[ExtensionAttribute]
private static Task`1<TResult> TraceBeginEndAsyncCore(ITraceWriter traceWriter, HttpRequestMessage request, string category, TraceLevel level, string operatorName, string operationName, Action`2<TraceRecord, TResult> endTrace, Action`1<TraceRecord> errorTrace, Task`1<TResult> task);
    [ExtensionAttribute]
public static Task TraceBeginEndAsync(ITraceWriter traceWriter, HttpRequestMessage request, string category, TraceLevel level, string operatorName, string operationName, Action`1<TraceRecord> beginTrace, Func`1<Task> execute, Action`1<TraceRecord> endTrace, Action`1<TraceRecord> errorTrace);
    [AsyncStateMachineAttribute("System.Web.Http.Tracing.ITraceWriterExtensions/<TraceBeginEndAsyncCore>d__19")]
[ExtensionAttribute]
private static Task TraceBeginEndAsyncCore(ITraceWriter traceWriter, HttpRequestMessage request, string category, TraceLevel level, string operatorName, string operationName, Action`1<TraceRecord> endTrace, Action`1<TraceRecord> errorTrace, Task task);
    [ExtensionAttribute]
public static void Warn(ITraceWriter traceWriter, HttpRequestMessage request, string category, string messageFormat, Object[] messageArguments);
    [ExtensionAttribute]
public static void Warn(ITraceWriter traceWriter, HttpRequestMessage request, string category, Exception exception);
    [ExtensionAttribute]
public static void Warn(ITraceWriter traceWriter, HttpRequestMessage request, string category, Exception exception, string messageFormat, Object[] messageArguments);
    [ExtensionAttribute]
private static void TraceError(ITraceWriter traceWriter, Exception exception, HttpRequestMessage request, string category, string operatorName, string operationName, Action`1<TraceRecord> errorTrace);
}
public static class System.Web.Http.Tracing.TraceCategories : object {
    public static string ActionCategory;
    public static string ControllersCategory;
    public static string FiltersCategory;
    public static string FormattingCategory;
    public static string MessageHandlersCategory;
    public static string ModelBindingCategory;
    public static string RequestCategory;
    public static string RoutingCategory;
    private static TraceCategories();
}
public enum System.Web.Http.Tracing.TraceKind : Enum {
    public int value__;
    public static TraceKind Trace;
    public static TraceKind Begin;
    public static TraceKind End;
}
internal static class System.Web.Http.Tracing.TraceKindHelper : object {
    public static bool IsDefined(TraceKind traceKind);
    public static void Validate(TraceKind value, string parameterValue);
}
public enum System.Web.Http.Tracing.TraceLevel : Enum {
    public int value__;
    public static TraceLevel Off;
    public static TraceLevel Debug;
    public static TraceLevel Info;
    public static TraceLevel Warn;
    public static TraceLevel Error;
    public static TraceLevel Fatal;
}
internal static class System.Web.Http.Tracing.TraceLevelHelper : object {
    public static bool IsDefined(TraceLevel traceLevel);
    public static void Validate(TraceLevel value, string parameterValue);
}
internal class System.Web.Http.Tracing.TraceManager : object {
    public sealed virtual void Initialize(HttpConfiguration configuration);
    private static void CreateAllTracers(HttpConfiguration configuration, ITraceWriter traceWriter);
    private static TService GetService(ServicesContainer services);
    private static void CreateActionInvokerTracer(HttpConfiguration configuration, ITraceWriter traceWriter);
    private static void CreateActionSelectorTracer(HttpConfiguration configuration, ITraceWriter traceWriter);
    private static void CreateActionValueBinderTracer(HttpConfiguration configuration, ITraceWriter traceWriter);
    private static void CreateContentNegotiatorTracer(HttpConfiguration configuration, ITraceWriter traceWriter);
    private static void CreateControllerActivatorTracer(HttpConfiguration configuration, ITraceWriter traceWriter);
    private static void CreateControllerSelectorTracer(HttpConfiguration configuration, ITraceWriter traceWriter);
    private static void CreateHttpControllerTypeResolverTracer(HttpConfiguration configuration, ITraceWriter traceWriter);
    private static void CreateMediaTypeFormatterTracers(HttpConfiguration configuration, ITraceWriter traceWriter);
    private static void CreateMessageHandlerTracers(HttpConfiguration configuration, ITraceWriter traceWriter);
    private static bool AreMessageHandlerTracersRegistered(Collection`1<DelegatingHandler> messageHandlers);
}
[DebuggerDisplayAttribute("Category: {Category}, Operation: {Operation}, Level: {Level}, Kind: {Kind}")]
public class System.Web.Http.Tracing.TraceRecord : object {
    private TraceKind _traceKind;
    private TraceLevel _traceLevel;
    private Lazy`1<Dictionary`2<object, object>> _properties;
    [CompilerGeneratedAttribute]
private string <Category>k__BackingField;
    [CompilerGeneratedAttribute]
private Exception <Exception>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Operation>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Operator>k__BackingField;
    [CompilerGeneratedAttribute]
private HttpRequestMessage <Request>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <RequestId>k__BackingField;
    [CompilerGeneratedAttribute]
private HttpStatusCode <Status>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <Timestamp>k__BackingField;
    public string Category { get; public set; }
    public Exception Exception { get; public set; }
    public TraceKind Kind { get; public set; }
    public TraceLevel Level { get; public set; }
    public string Message { get; public set; }
    public string Operation { get; public set; }
    public string Operator { get; public set; }
    public Dictionary`2<object, object> Properties { get; }
    public HttpRequestMessage Request { get; private set; }
    public Guid RequestId { get; private set; }
    public HttpStatusCode Status { get; public set; }
    public DateTime Timestamp { get; private set; }
    public TraceRecord(HttpRequestMessage request, string category, TraceLevel level);
    [CompilerGeneratedAttribute]
public string get_Category();
    [CompilerGeneratedAttribute]
public void set_Category(string value);
    [CompilerGeneratedAttribute]
public Exception get_Exception();
    [CompilerGeneratedAttribute]
public void set_Exception(Exception value);
    public TraceKind get_Kind();
    public void set_Kind(TraceKind value);
    public TraceLevel get_Level();
    public void set_Level(TraceLevel value);
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
public void set_Message(string value);
    [CompilerGeneratedAttribute]
public string get_Operation();
    [CompilerGeneratedAttribute]
public void set_Operation(string value);
    [CompilerGeneratedAttribute]
public string get_Operator();
    [CompilerGeneratedAttribute]
public void set_Operator(string value);
    public Dictionary`2<object, object> get_Properties();
    [CompilerGeneratedAttribute]
public HttpRequestMessage get_Request();
    [CompilerGeneratedAttribute]
private void set_Request(HttpRequestMessage value);
    [CompilerGeneratedAttribute]
public Guid get_RequestId();
    [CompilerGeneratedAttribute]
private void set_RequestId(Guid value);
    [CompilerGeneratedAttribute]
public HttpStatusCode get_Status();
    [CompilerGeneratedAttribute]
public void set_Status(HttpStatusCode value);
    [CompilerGeneratedAttribute]
public DateTime get_Timestamp();
    [CompilerGeneratedAttribute]
private void set_Timestamp(DateTime value);
}
internal class System.Web.Http.Tracing.Tracers.ActionFilterAttributeTracer : ActionFilterAttribute {
    private ActionFilterAttribute _innerFilter;
    private ITraceWriter _traceWriter;
    public ActionFilterAttribute Inner { get; }
    public bool AllowMultiple { get; }
    public object TypeId { get; }
    public ActionFilterAttributeTracer(ActionFilterAttribute innerFilter, ITraceWriter traceWriter);
    public sealed virtual ActionFilterAttribute get_Inner();
    public virtual bool get_AllowMultiple();
    public virtual object get_TypeId();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual bool IsDefaultAttribute();
    public virtual bool Match(object obj);
    public virtual void OnActionExecuted(HttpActionExecutedContext actionExecutedContext);
    public virtual Task OnActionExecutedAsync(HttpActionExecutedContext actionExecutedContext, CancellationToken cancellationToken);
    private Task OnActionExecutedAsyncCore(HttpActionExecutedContext actionExecutedContext, CancellationToken cancellationToken, string methodName);
    public virtual void OnActionExecuting(HttpActionContext actionContext);
    public virtual Task OnActionExecutingAsync(HttpActionContext actionContext, CancellationToken cancellationToken);
    private Task OnActionExecutingAsyncCore(HttpActionContext actionContext, CancellationToken cancellationToken, string methodName);
}
internal class System.Web.Http.Tracing.Tracers.ActionFilterTracer : FilterTracer {
    private static string ExecuteActionFilterAsyncMethodName;
    public IActionFilter Inner { get; }
    private IActionFilter InnerActionFilter { get; }
    public ActionFilterTracer(IActionFilter innerFilter, ITraceWriter traceWriter);
    public sealed virtual IActionFilter get_Inner();
    private IActionFilter get_InnerActionFilter();
    private sealed virtual override Task`1<HttpResponseMessage> System.Web.Http.Filters.IActionFilter.ExecuteActionFilterAsync(HttpActionContext actionContext, CancellationToken cancellationToken, Func`1<Task`1<HttpResponseMessage>> continuation);
}
internal class System.Web.Http.Tracing.Tracers.ActionValueBinderTracer : object {
    private IActionValueBinder _innerBinder;
    private ITraceWriter _traceWriter;
    public IActionValueBinder Inner { get; }
    public ActionValueBinderTracer(IActionValueBinder innerBinder, ITraceWriter traceWriter);
    public sealed virtual IActionValueBinder get_Inner();
    private sealed virtual override HttpActionBinding System.Web.Http.Controllers.IActionValueBinder.GetBinding(HttpActionDescriptor actionDescriptor);
}
internal class System.Web.Http.Tracing.Tracers.AuthenticationFilterTracer : FilterTracer {
    private static string AuthenticateAsyncMethodName;
    private static string ChallengeAsyncMethodName;
    private IAuthenticationFilter _innerFilter;
    public IAuthenticationFilter Inner { get; }
    public AuthenticationFilterTracer(IAuthenticationFilter innerFilter, ITraceWriter traceWriter);
    public sealed virtual IAuthenticationFilter get_Inner();
    public sealed virtual Task AuthenticateAsync(HttpAuthenticationContext context, CancellationToken cancellationToken);
    public sealed virtual Task ChallengeAsync(HttpAuthenticationChallengeContext context, CancellationToken cancellationToken);
}
internal class System.Web.Http.Tracing.Tracers.AuthorizationFilterAttributeTracer : AuthorizationFilterAttribute {
    private AuthorizationFilterAttribute _innerFilter;
    private ITraceWriter _traceStore;
    public AuthorizationFilterAttribute Inner { get; }
    public bool AllowMultiple { get; }
    public object TypeId { get; }
    public AuthorizationFilterAttributeTracer(AuthorizationFilterAttribute innerFilter, ITraceWriter traceWriter);
    public sealed virtual AuthorizationFilterAttribute get_Inner();
    public virtual bool get_AllowMultiple();
    public virtual object get_TypeId();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual bool IsDefaultAttribute();
    public virtual bool Match(object obj);
    public virtual void OnAuthorization(HttpActionContext actionContext);
    public virtual Task OnAuthorizationAsync(HttpActionContext actionContext, CancellationToken cancellationToken);
    private Task OnAuthorizationSyncCore(HttpActionContext actionContext, CancellationToken cancellationToken, string methodName);
}
internal class System.Web.Http.Tracing.Tracers.AuthorizationFilterTracer : FilterTracer {
    private static string ExecuteAuthorizationFilterAsyncMethodName;
    public IAuthorizationFilter Inner { get; }
    private IAuthorizationFilter InnerAuthorizationFilter { get; }
    public AuthorizationFilterTracer(IAuthorizationFilter innerFilter, ITraceWriter traceWriter);
    public sealed virtual IAuthorizationFilter get_Inner();
    private IAuthorizationFilter get_InnerAuthorizationFilter();
    public sealed virtual Task`1<HttpResponseMessage> ExecuteAuthorizationFilterAsync(HttpActionContext actionContext, CancellationToken cancellationToken, Func`1<Task`1<HttpResponseMessage>> continuation);
}
internal class System.Web.Http.Tracing.Tracers.BufferedMediaTypeFormatterTracer : BufferedMediaTypeFormatter {
    private static string OnReadFromStreamMethodName;
    private static string OnWriteToStreamMethodName;
    private BufferedMediaTypeFormatter _inner;
    private MediaTypeFormatterTracer _innerTracer;
    private HttpRequestMessage System.Web.Http.Tracing.IFormatterTracer.Request { get; }
    public BufferedMediaTypeFormatter Inner { get; }
    public MediaTypeFormatter InnerFormatter { get; }
    public IRequiredMemberSelector RequiredMemberSelector { get; public set; }
    public BufferedMediaTypeFormatterTracer(BufferedMediaTypeFormatter innerFormatter, ITraceWriter traceWriter, HttpRequestMessage request);
    private sealed virtual override HttpRequestMessage System.Web.Http.Tracing.IFormatterTracer.get_Request();
    public sealed virtual BufferedMediaTypeFormatter get_Inner();
    public sealed virtual MediaTypeFormatter get_InnerFormatter();
    public virtual IRequiredMemberSelector get_RequiredMemberSelector();
    public virtual void set_RequiredMemberSelector(IRequiredMemberSelector value);
    public virtual bool CanReadType(Type type);
    public virtual bool CanWriteType(Type type);
    public virtual MediaTypeFormatter GetPerRequestFormatterInstance(Type type, HttpRequestMessage request, MediaTypeHeaderValue mediaType);
    public virtual void SetDefaultContentHeaders(Type type, HttpContentHeaders headers, MediaTypeHeaderValue mediaType);
    public virtual object ReadFromStream(Type type, Stream readStream, HttpContent content, IFormatterLogger formatterLogger);
    public virtual object ReadFromStream(Type type, Stream stream, HttpContent content, IFormatterLogger formatterLogger, CancellationToken cancellationToken);
    private object ReadFromStreamCore(Type type, Stream stream, HttpContent content, IFormatterLogger formatterLogger, Nullable`1<CancellationToken> cancellationToken);
    public virtual void WriteToStream(Type type, object value, Stream writeStream, HttpContent content);
    public virtual void WriteToStream(Type type, object value, Stream writeStream, HttpContent content, CancellationToken cancellationToken);
    private void WriteToStreamCore(Type type, object value, Stream writeStream, HttpContent content, Nullable`1<CancellationToken> cancellationToken);
}
internal class System.Web.Http.Tracing.Tracers.ContentNegotiatorTracer : object {
    private static string NegotiateMethodName;
    private IContentNegotiator _innerNegotiator;
    private ITraceWriter _traceWriter;
    public IContentNegotiator Inner { get; }
    public ContentNegotiatorTracer(IContentNegotiator innerNegotiator, ITraceWriter traceWriter);
    public sealed virtual IContentNegotiator get_Inner();
    public sealed virtual ContentNegotiationResult Negotiate(Type type, HttpRequestMessage request, IEnumerable`1<MediaTypeFormatter> formatters);
}
internal class System.Web.Http.Tracing.Tracers.DefaultHttpControllerTypeResolverTracer : DefaultHttpControllerTypeResolver {
    private DefaultHttpControllerTypeResolver _innerResolver;
    private ITraceWriter _traceWriter;
    private string _innerTypeName;
    public DefaultHttpControllerTypeResolver Inner { get; }
    protected internal Predicate`1<Type> IsControllerTypePredicate { get; }
    public DefaultHttpControllerTypeResolverTracer(DefaultHttpControllerTypeResolver innerResolver, ITraceWriter traceWriter);
    public sealed virtual DefaultHttpControllerTypeResolver get_Inner();
    protected internal virtual Predicate`1<Type> get_IsControllerTypePredicate();
    public virtual ICollection`1<Type> GetControllerTypes(IAssembliesResolver assembliesResolver);
    private Type[] GetTypesAndTrace(Assembly assembly);
}
internal class System.Web.Http.Tracing.Tracers.ExceptionFilterAttributeTracer : ExceptionFilterAttribute {
    private ExceptionFilterAttribute _innerFilter;
    private ITraceWriter _traceStore;
    public ExceptionFilterAttribute Inner { get; }
    public bool AllowMultiple { get; }
    public object TypeId { get; }
    public ExceptionFilterAttributeTracer(ExceptionFilterAttribute innerFilter, ITraceWriter traceWriter);
    public sealed virtual ExceptionFilterAttribute get_Inner();
    public virtual bool get_AllowMultiple();
    public virtual object get_TypeId();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual bool IsDefaultAttribute();
    public virtual bool Match(object obj);
    public virtual void OnException(HttpActionExecutedContext actionExecutedContext);
    public virtual Task OnExceptionAsync(HttpActionExecutedContext actionExecutedContext, CancellationToken cancellationToken);
    private Task OnExceptionAsyncCore(HttpActionExecutedContext actionExecutedContext, CancellationToken cancellationToken, string methodName);
}
internal class System.Web.Http.Tracing.Tracers.ExceptionFilterTracer : FilterTracer {
    private static string ExecuteExceptionFilterAsyncMethodName;
    public IExceptionFilter Inner { get; }
    public IExceptionFilter InnerExceptionFilter { get; }
    public ExceptionFilterTracer(IExceptionFilter innerFilter, ITraceWriter traceWriter);
    public sealed virtual IExceptionFilter get_Inner();
    public IExceptionFilter get_InnerExceptionFilter();
    public sealed virtual Task ExecuteExceptionFilterAsync(HttpActionExecutedContext actionExecutedContext, CancellationToken cancellationToken);
}
internal class System.Web.Http.Tracing.Tracers.FilterTracer : object {
    [CompilerGeneratedAttribute]
private IFilter <InnerFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private ITraceWriter <TraceWriter>k__BackingField;
    public IFilter Inner { get; }
    public IFilter InnerFilter { get; public set; }
    public ITraceWriter TraceWriter { get; public set; }
    public bool AllowMultiple { get; }
    public FilterTracer(IFilter innerFilter, ITraceWriter traceWriter);
    public sealed virtual IFilter get_Inner();
    [CompilerGeneratedAttribute]
public IFilter get_InnerFilter();
    [CompilerGeneratedAttribute]
public void set_InnerFilter(IFilter value);
    [CompilerGeneratedAttribute]
public ITraceWriter get_TraceWriter();
    [CompilerGeneratedAttribute]
public void set_TraceWriter(ITraceWriter value);
    public sealed virtual bool get_AllowMultiple();
    public static IEnumerable`1<IFilter> CreateFilterTracers(IFilter filter, ITraceWriter traceWriter);
    public static IEnumerable`1<FilterInfo> CreateFilterTracers(FilterInfo filter, ITraceWriter traceWriter);
    public static bool IsFilterTracer(IFilter filter);
}
internal class System.Web.Http.Tracing.Tracers.FormatterLoggerTraceWrapper : object {
    private IFormatterLogger _formatterLogger;
    private ITraceWriter _traceWriter;
    private HttpRequestMessage _request;
    private string _operatorName;
    private string _operationName;
    public FormatterLoggerTraceWrapper(IFormatterLogger formatterLogger, ITraceWriter traceWriter, HttpRequestMessage request, string operatorName, string operationName);
    public sealed virtual void LogError(string errorPath, string errorMessage);
    public sealed virtual void LogError(string errorPath, Exception exception);
}
internal class System.Web.Http.Tracing.Tracers.FormatterParameterBindingTracer : FormatterParameterBinding {
    private static string ExecuteBindingAsyncMethodName;
    private FormatterParameterBinding _innerBinding;
    private ITraceWriter _traceWriter;
    public FormatterParameterBinding Inner { get; }
    public string ErrorMessage { get; }
    public bool WillReadBody { get; }
    public FormatterParameterBindingTracer(FormatterParameterBinding innerBinding, ITraceWriter traceWriter);
    public sealed virtual FormatterParameterBinding get_Inner();
    public virtual string get_ErrorMessage();
    public virtual bool get_WillReadBody();
    public virtual Task`1<object> ReadContentAsync(HttpRequestMessage request, Type type, IEnumerable`1<MediaTypeFormatter> formatters, IFormatterLogger formatterLogger);
    public virtual Task`1<object> ReadContentAsync(HttpRequestMessage request, Type type, IEnumerable`1<MediaTypeFormatter> formatters, IFormatterLogger formatterLogger, CancellationToken cancellationToken);
    public virtual Task ExecuteBindingAsync(ModelMetadataProvider metadataProvider, HttpActionContext actionContext, CancellationToken cancellationToken);
    private IEnumerable`1<MediaTypeFormatter> CreateFormatterTracers(HttpRequestMessage request, IEnumerable`1<MediaTypeFormatter> formatters);
    [CompilerGeneratedAttribute]
private void <ExecuteBindingAsync>b__12_0(TraceRecord tr);
}
internal class System.Web.Http.Tracing.Tracers.FormUrlEncodedMediaTypeFormatterTracer : FormUrlEncodedMediaTypeFormatter {
    private FormUrlEncodedMediaTypeFormatter _inner;
    private MediaTypeFormatterTracer _innerTracer;
    private HttpRequestMessage System.Web.Http.Tracing.IFormatterTracer.Request { get; }
    public FormUrlEncodedMediaTypeFormatter Inner { get; }
    public MediaTypeFormatter InnerFormatter { get; }
    public IRequiredMemberSelector RequiredMemberSelector { get; public set; }
    public FormUrlEncodedMediaTypeFormatterTracer(FormUrlEncodedMediaTypeFormatter innerFormatter, ITraceWriter traceWriter, HttpRequestMessage request);
    private sealed virtual override HttpRequestMessage System.Web.Http.Tracing.IFormatterTracer.get_Request();
    public sealed virtual FormUrlEncodedMediaTypeFormatter get_Inner();
    public sealed virtual MediaTypeFormatter get_InnerFormatter();
    public virtual IRequiredMemberSelector get_RequiredMemberSelector();
    public virtual void set_RequiredMemberSelector(IRequiredMemberSelector value);
    public virtual bool CanReadType(Type type);
    public virtual bool CanWriteType(Type type);
    public virtual MediaTypeFormatter GetPerRequestFormatterInstance(Type type, HttpRequestMessage request, MediaTypeHeaderValue mediaType);
    public virtual Task`1<object> ReadFromStreamAsync(Type type, Stream readStream, HttpContent content, IFormatterLogger formatterLogger, CancellationToken cancellationToken);
    public virtual Task`1<object> ReadFromStreamAsync(Type type, Stream readStream, HttpContent content, IFormatterLogger formatterLogger);
    public virtual Task WriteToStreamAsync(Type type, object value, Stream writeStream, HttpContent content, TransportContext transportContext, CancellationToken cancellationToken);
    public virtual Task WriteToStreamAsync(Type type, object value, Stream writeStream, HttpContent content, TransportContext transportContext);
    public virtual void SetDefaultContentHeaders(Type type, HttpContentHeaders headers, MediaTypeHeaderValue mediaType);
}
internal class System.Web.Http.Tracing.Tracers.HttpActionBindingTracer : HttpActionBinding {
    private static string ExecuteBindingAsyncMethodName;
    private HttpActionBinding _innerBinding;
    private ITraceWriter _traceWriter;
    public HttpActionBinding Inner { get; }
    public HttpActionBindingTracer(HttpActionBinding innerBinding, ITraceWriter traceWriter);
    public sealed virtual HttpActionBinding get_Inner();
    public virtual Task ExecuteBindingAsync(HttpActionContext actionContext, CancellationToken cancellationToken);
}
internal class System.Web.Http.Tracing.Tracers.HttpActionDescriptorTracer : HttpActionDescriptor {
    private static string ExecuteMethodName;
    private HttpActionDescriptor _innerDescriptor;
    private ITraceWriter _traceWriter;
    public HttpActionDescriptor Inner { get; }
    public ConcurrentDictionary`2<object, object> Properties { get; }
    public HttpActionBinding ActionBinding { get; public set; }
    public Collection`1<HttpMethod> SupportedHttpMethods { get; }
    public string ActionName { get; }
    public IActionResultConverter ResultConverter { get; }
    public Type ReturnType { get; }
    public HttpActionDescriptorTracer(HttpControllerContext controllerContext, HttpActionDescriptor innerDescriptor, ITraceWriter traceWriter);
    public sealed virtual HttpActionDescriptor get_Inner();
    public virtual ConcurrentDictionary`2<object, object> get_Properties();
    public virtual HttpActionBinding get_ActionBinding();
    public virtual void set_ActionBinding(HttpActionBinding value);
    public virtual Collection`1<HttpMethod> get_SupportedHttpMethods();
    public virtual string get_ActionName();
    public virtual IActionResultConverter get_ResultConverter();
    public virtual Type get_ReturnType();
    public virtual Task`1<object> ExecuteAsync(HttpControllerContext controllerContext, IDictionary`2<string, object> arguments, CancellationToken cancellationToken);
    public virtual Collection`1<T> GetCustomAttributes();
    public virtual Collection`1<T> GetCustomAttributes(bool inherit);
    public virtual Collection`1<IFilter> GetFilters();
    public virtual Collection`1<FilterInfo> GetFilterPipeline();
    public virtual Collection`1<HttpParameterDescriptor> GetParameters();
}
internal class System.Web.Http.Tracing.Tracers.HttpActionInvokerTracer : object {
    private static string InvokeActionAsyncMethodName;
    private IHttpActionInvoker _innerInvoker;
    private ITraceWriter _traceWriter;
    public IHttpActionInvoker Inner { get; }
    public HttpActionInvokerTracer(IHttpActionInvoker innerInvoker, ITraceWriter traceWriter);
    public sealed virtual IHttpActionInvoker get_Inner();
    private sealed virtual override Task`1<HttpResponseMessage> System.Web.Http.Controllers.IHttpActionInvoker.InvokeActionAsync(HttpActionContext actionContext, CancellationToken cancellationToken);
}
internal class System.Web.Http.Tracing.Tracers.HttpActionSelectorTracer : object {
    private static string SelectActionMethodName;
    private IHttpActionSelector _innerSelector;
    private ITraceWriter _traceWriter;
    public IHttpActionSelector Inner { get; }
    public HttpActionSelectorTracer(IHttpActionSelector innerSelector, ITraceWriter traceWriter);
    public sealed virtual IHttpActionSelector get_Inner();
    public sealed virtual ILookup`2<string, HttpActionDescriptor> GetActionMapping(HttpControllerDescriptor controllerDescriptor);
    private sealed virtual override HttpActionDescriptor System.Web.Http.Controllers.IHttpActionSelector.SelectAction(HttpControllerContext controllerContext);
}
internal class System.Web.Http.Tracing.Tracers.HttpControllerActivatorTracer : object {
    private static string CreateMethodName;
    private IHttpControllerActivator _innerActivator;
    private ITraceWriter _traceWriter;
    public IHttpControllerActivator Inner { get; }
    public HttpControllerActivatorTracer(IHttpControllerActivator innerActivator, ITraceWriter traceWriter);
    public sealed virtual IHttpControllerActivator get_Inner();
    private sealed virtual override IHttpController System.Web.Http.Dispatcher.IHttpControllerActivator.Create(HttpRequestMessage request, HttpControllerDescriptor controllerDescriptor, Type controllerType);
}
internal class System.Web.Http.Tracing.Tracers.HttpControllerDescriptorTracer : HttpControllerDescriptor {
    private static string CreateControllerMethodName;
    private HttpControllerDescriptor _innerDescriptor;
    private ITraceWriter _traceWriter;
    public HttpControllerDescriptor Inner { get; }
    public ConcurrentDictionary`2<object, object> Properties { get; }
    public HttpControllerDescriptorTracer(HttpControllerDescriptor innerDescriptor, ITraceWriter traceWriter);
    public sealed virtual HttpControllerDescriptor get_Inner();
    public virtual ConcurrentDictionary`2<object, object> get_Properties();
    public virtual Collection`1<T> GetCustomAttributes();
    public virtual Collection`1<T> GetCustomAttributes(bool inherit);
    public virtual Collection`1<IFilter> GetFilters();
    public virtual IHttpController CreateController(HttpRequestMessage request);
}
internal class System.Web.Http.Tracing.Tracers.HttpControllerSelectorTracer : object {
    private static string SelectControllerMethodName;
    private IHttpControllerSelector _innerSelector;
    private ITraceWriter _traceWriter;
    public IHttpControllerSelector Inner { get; }
    public HttpControllerSelectorTracer(IHttpControllerSelector innerSelector, ITraceWriter traceWriter);
    public sealed virtual IHttpControllerSelector get_Inner();
    private sealed virtual override HttpControllerDescriptor System.Web.Http.Dispatcher.IHttpControllerSelector.SelectController(HttpRequestMessage request);
    private sealed virtual override IDictionary`2<string, HttpControllerDescriptor> System.Web.Http.Dispatcher.IHttpControllerSelector.GetControllerMapping();
}
internal class System.Web.Http.Tracing.Tracers.HttpControllerTracer : object {
    private static string DisposeMethodName;
    private static string ExecuteAsyncMethodName;
    private IHttpController _innerController;
    private HttpRequestMessage _request;
    private ITraceWriter _traceWriter;
    public IHttpController Inner { get; }
    public HttpControllerTracer(HttpRequestMessage request, IHttpController innerController, ITraceWriter traceWriter);
    public sealed virtual IHttpController get_Inner();
    private sealed virtual override void System.IDisposable.Dispose();
    private sealed virtual override Task`1<HttpResponseMessage> System.Web.Http.Controllers.IHttpController.ExecuteAsync(HttpControllerContext controllerContext, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("System.Web.Http.Tracing.Tracers.HttpControllerTracer/<ExecuteAsyncCore>d__10")]
private Task`1<HttpResponseMessage> ExecuteAsyncCore(HttpControllerContext controllerContext, CancellationToken cancellationToken);
    public static IHttpController ActualController(IHttpController controller);
    public static Type ActualControllerType(IHttpController controller);
}
internal class System.Web.Http.Tracing.Tracers.HttpParameterBindingTracer : HttpParameterBinding {
    private static string ExecuteBindingAsyncMethodName;
    [CompilerGeneratedAttribute]
private HttpParameterBinding <InnerBinding>k__BackingField;
    [CompilerGeneratedAttribute]
private ITraceWriter <TraceWriter>k__BackingField;
    public HttpParameterBinding Inner { get; }
    protected HttpParameterBinding InnerBinding { get; private set; }
    protected ITraceWriter TraceWriter { get; private set; }
    public string ErrorMessage { get; }
    public bool WillReadBody { get; }
    public IEnumerable`1<ValueProviderFactory> ValueProviderFactories { get; }
    public HttpParameterBindingTracer(HttpParameterBinding innerBinding, ITraceWriter traceWriter);
    public sealed virtual HttpParameterBinding get_Inner();
    [CompilerGeneratedAttribute]
protected HttpParameterBinding get_InnerBinding();
    [CompilerGeneratedAttribute]
private void set_InnerBinding(HttpParameterBinding value);
    [CompilerGeneratedAttribute]
protected ITraceWriter get_TraceWriter();
    [CompilerGeneratedAttribute]
private void set_TraceWriter(ITraceWriter value);
    public virtual string get_ErrorMessage();
    public virtual bool get_WillReadBody();
    public sealed virtual IEnumerable`1<ValueProviderFactory> get_ValueProviderFactories();
    public virtual Task ExecuteBindingAsync(ModelMetadataProvider metadataProvider, HttpActionContext actionContext, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
private void <ExecuteBindingAsync>b__18_0(TraceRecord tr);
}
internal class System.Web.Http.Tracing.Tracers.JsonMediaTypeFormatterTracer : JsonMediaTypeFormatter {
    private JsonMediaTypeFormatter _inner;
    private MediaTypeFormatterTracer _innerTracer;
    private HttpRequestMessage System.Web.Http.Tracing.IFormatterTracer.Request { get; }
    public JsonMediaTypeFormatter Inner { get; }
    public MediaTypeFormatter InnerFormatter { get; }
    public IRequiredMemberSelector RequiredMemberSelector { get; public set; }
    public JsonMediaTypeFormatterTracer(JsonMediaTypeFormatter innerFormatter, ITraceWriter traceWriter, HttpRequestMessage request);
    private sealed virtual override HttpRequestMessage System.Web.Http.Tracing.IFormatterTracer.get_Request();
    public sealed virtual JsonMediaTypeFormatter get_Inner();
    public sealed virtual MediaTypeFormatter get_InnerFormatter();
    public virtual IRequiredMemberSelector get_RequiredMemberSelector();
    public virtual void set_RequiredMemberSelector(IRequiredMemberSelector value);
    public virtual bool CanReadType(Type type);
    public virtual bool CanWriteType(Type type);
    public virtual MediaTypeFormatter GetPerRequestFormatterInstance(Type type, HttpRequestMessage request, MediaTypeHeaderValue mediaType);
    public virtual Task`1<object> ReadFromStreamAsync(Type type, Stream readStream, HttpContent content, IFormatterLogger formatterLogger);
    public virtual Task`1<object> ReadFromStreamAsync(Type type, Stream readStream, HttpContent content, IFormatterLogger formatterLogger, CancellationToken cancellationToken);
    public virtual object ReadFromStream(Type type, Stream readStream, Encoding effectiveEncoding, IFormatterLogger formatterLogger);
    public virtual JsonReader CreateJsonReader(Type type, Stream readStream, Encoding effectiveEncoding);
    public virtual Task WriteToStreamAsync(Type type, object value, Stream writeStream, HttpContent content, TransportContext transportContext);
    public virtual Task WriteToStreamAsync(Type type, object value, Stream writeStream, HttpContent content, TransportContext transportContext, CancellationToken cancellationToken);
    public virtual void WriteToStream(Type type, object value, Stream writeStream, Encoding effectiveEncoding);
    public virtual JsonWriter CreateJsonWriter(Type type, Stream writeStream, Encoding effectiveEncoding);
    public virtual void SetDefaultContentHeaders(Type type, HttpContentHeaders headers, MediaTypeHeaderValue mediaType);
    public virtual JsonSerializer CreateJsonSerializer();
    public virtual DataContractJsonSerializer CreateDataContractSerializer(Type type);
}
internal class System.Web.Http.Tracing.Tracers.MediaTypeFormatterTracer : MediaTypeFormatter {
    private static string ReadFromStreamAsyncMethodName;
    private static string WriteToStreamAsyncMethodName;
    private static string GetPerRequestFormatterInstanceMethodName;
    private MediaTypeFormatter _inner;
    [CompilerGeneratedAttribute]
private MediaTypeFormatter <InnerFormatter>k__BackingField;
    [CompilerGeneratedAttribute]
private ITraceWriter <TraceWriter>k__BackingField;
    [CompilerGeneratedAttribute]
private HttpRequestMessage <Request>k__BackingField;
    public MediaTypeFormatter Inner { get; }
    public MediaTypeFormatter InnerFormatter { get; private set; }
    public ITraceWriter TraceWriter { get; public set; }
    public HttpRequestMessage Request { get; public set; }
    public IRequiredMemberSelector RequiredMemberSelector { get; public set; }
    public MediaTypeFormatterTracer(MediaTypeFormatter innerFormatter, ITraceWriter traceWriter, HttpRequestMessage request);
    public sealed virtual MediaTypeFormatter get_Inner();
    [CompilerGeneratedAttribute]
public sealed virtual MediaTypeFormatter get_InnerFormatter();
    [CompilerGeneratedAttribute]
private void set_InnerFormatter(MediaTypeFormatter value);
    [CompilerGeneratedAttribute]
public ITraceWriter get_TraceWriter();
    [CompilerGeneratedAttribute]
public void set_TraceWriter(ITraceWriter value);
    [CompilerGeneratedAttribute]
public sealed virtual HttpRequestMessage get_Request();
    [CompilerGeneratedAttribute]
public void set_Request(HttpRequestMessage value);
    public virtual IRequiredMemberSelector get_RequiredMemberSelector();
    public virtual void set_RequiredMemberSelector(IRequiredMemberSelector value);
    public static MediaTypeFormatter ActualMediaTypeFormatter(MediaTypeFormatter formatter);
    public static MediaTypeFormatter CreateTracer(MediaTypeFormatter formatter, ITraceWriter traceWriter, HttpRequestMessage request);
    public virtual MediaTypeFormatter GetPerRequestFormatterInstance(Type type, HttpRequestMessage request, MediaTypeHeaderValue mediaType);
    public virtual bool CanReadType(Type type);
    public virtual bool CanWriteType(Type type);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual void SetDefaultContentHeaders(Type type, HttpContentHeaders headers, MediaTypeHeaderValue mediaType);
    public virtual string ToString();
    public virtual Task`1<object> ReadFromStreamAsync(Type type, Stream readStream, HttpContent content, IFormatterLogger formatterLogger);
    public virtual Task`1<object> ReadFromStreamAsync(Type type, Stream readStream, HttpContent content, IFormatterLogger formatterLogger, CancellationToken cancellationToken);
    private Task`1<object> ReadFromStreamAsyncCore(Type type, Stream readStream, HttpContent content, IFormatterLogger formatterLogger, Nullable`1<CancellationToken> cancellationToken);
    public virtual Task WriteToStreamAsync(Type type, object value, Stream writeStream, HttpContent content, TransportContext transportContext);
    public virtual Task WriteToStreamAsync(Type type, object value, Stream writeStream, HttpContent content, TransportContext transportContext, CancellationToken cancellationToken);
    private Task WriteToStreamAsyncCore(Type type, object value, Stream writeStream, HttpContent content, TransportContext transportContext, Nullable`1<CancellationToken> cancellationToken);
}
internal class System.Web.Http.Tracing.Tracers.MessageHandlerTracer : DelegatingHandler {
    private static string SendAsyncMethodName;
    private DelegatingHandler _innerHandler;
    private ITraceWriter _traceWriter;
    public DelegatingHandler Inner { get; }
    public MessageHandlerTracer(DelegatingHandler innerHandler, ITraceWriter traceWriter);
    public sealed virtual DelegatingHandler get_Inner();
    protected virtual Task`1<HttpResponseMessage> SendAsync(HttpRequestMessage request, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task`1<HttpResponseMessage> <>n__0(HttpRequestMessage request, CancellationToken cancellationToken);
}
internal class System.Web.Http.Tracing.Tracers.OverrideFilterTracer : FilterTracer {
    private IOverrideFilter _innerFilter;
    public IOverrideFilter Inner { get; }
    public Type FiltersToOverride { get; }
    public OverrideFilterTracer(IOverrideFilter innerFilter, ITraceWriter traceWriter);
    public sealed virtual IOverrideFilter get_Inner();
    public sealed virtual Type get_FiltersToOverride();
}
internal class System.Web.Http.Tracing.Tracers.RequestMessageHandlerTracer : DelegatingHandler {
    private ITraceWriter _traceWriter;
    public RequestMessageHandlerTracer(ITraceWriter traceWriter);
    protected virtual Task`1<HttpResponseMessage> SendAsync(HttpRequestMessage request, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task`1<HttpResponseMessage> <>n__0(HttpRequestMessage request, CancellationToken cancellationToken);
}
internal class System.Web.Http.Tracing.Tracers.XmlMediaTypeFormatterTracer : XmlMediaTypeFormatter {
    private XmlMediaTypeFormatter _inner;
    private MediaTypeFormatterTracer _innerTracer;
    private HttpRequestMessage System.Web.Http.Tracing.IFormatterTracer.Request { get; }
    public XmlMediaTypeFormatter Inner { get; }
    public MediaTypeFormatter InnerFormatter { get; }
    public IRequiredMemberSelector RequiredMemberSelector { get; public set; }
    public XmlMediaTypeFormatterTracer(XmlMediaTypeFormatter innerFormatter, ITraceWriter traceWriter, HttpRequestMessage request);
    private sealed virtual override HttpRequestMessage System.Web.Http.Tracing.IFormatterTracer.get_Request();
    public sealed virtual XmlMediaTypeFormatter get_Inner();
    public sealed virtual MediaTypeFormatter get_InnerFormatter();
    public virtual IRequiredMemberSelector get_RequiredMemberSelector();
    public virtual void set_RequiredMemberSelector(IRequiredMemberSelector value);
    public virtual bool CanReadType(Type type);
    public virtual bool CanWriteType(Type type);
    public virtual MediaTypeFormatter GetPerRequestFormatterInstance(Type type, HttpRequestMessage request, MediaTypeHeaderValue mediaType);
    public virtual Task`1<object> ReadFromStreamAsync(Type type, Stream readStream, HttpContent content, IFormatterLogger formatterLogger, CancellationToken cancellationToken);
    public virtual Task`1<object> ReadFromStreamAsync(Type type, Stream readStream, HttpContent content, IFormatterLogger formatterLogger);
    public virtual Task WriteToStreamAsync(Type type, object value, Stream writeStream, HttpContent content, TransportContext transportContext, CancellationToken cancellationToken);
    public virtual Task WriteToStreamAsync(Type type, object value, Stream writeStream, HttpContent content, TransportContext transportContext);
    public virtual void SetDefaultContentHeaders(Type type, HttpContentHeaders headers, MediaTypeHeaderValue mediaType);
    public virtual XmlSerializer CreateXmlSerializer(Type type);
    public virtual DataContractSerializer CreateDataContractSerializer(Type type);
    protected virtual XmlReader CreateXmlReader(Stream readStream, HttpContent content);
    protected virtual XmlWriter CreateXmlWriter(Stream writeStream, HttpContent content);
    protected virtual object GetDeserializer(Type type, HttpContent content);
    protected virtual object GetSerializer(Type type, object value, HttpContent content);
}
internal static class System.Web.Http.Tracing.TraceWriterExceptionMapper : object {
    private static string HttpErrorExceptionMessageFormat;
    private static string HttpErrorExceptionTypeFormat;
    private static string HttpErrorMessageDetailFormat;
    private static string HttpErrorModelStateErrorFormat;
    private static string HttpErrorModelStatePairFormat;
    private static string HttpErrorStackTraceFormat;
    private static string HttpErrorUserMessageFormat;
    public static void TranslateHttpResponseException(TraceRecord traceRecord);
    public static Nullable`1<TraceLevel> GetMappedTraceLevel(Exception exception);
    public static Nullable`1<TraceLevel> GetMappedTraceLevel(HttpResponseException httpResponseException);
    private static HttpResponseException ExtractHttpResponseException(Exception exception);
    private static void AddExceptions(HttpError httpError, List`1<string> messages);
    private static string FormatModelStateErrors(HttpError modelStateError);
}
internal static class System.Web.Http.UriQueryUtility : object {
    public static string UrlEncode(string str);
    public static string UrlDecode(string str);
    private static Byte[] UrlEncode(Byte[] bytes, int offset, int count, bool alwaysCreateNewReturnValue);
    private static Byte[] UrlEncode(Byte[] bytes, int offset, int count);
    private static string UrlDecodeInternal(string value, Encoding encoding);
    private static int HexToInt(char h);
    private static char IntToHex(int n);
    private static bool IsUrlSafeChar(char ch);
    private static bool ValidateUrlEncodingParameters(Byte[] bytes, int offset, int count);
}
public class System.Web.Http.Validation.BodyModelValidatorContext : object {
    [CompilerGeneratedAttribute]
private ModelMetadataProvider <MetadataProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private HttpActionContext <ActionContext>k__BackingField;
    [CompilerGeneratedAttribute]
private IModelValidatorCache <ValidatorCache>k__BackingField;
    [CompilerGeneratedAttribute]
private ModelStateDictionary <ModelState>k__BackingField;
    [CompilerGeneratedAttribute]
private HashSet`1<object> <Visited>k__BackingField;
    [CompilerGeneratedAttribute]
private Stack`1<IBodyModelValidatorKeyBuilder> <KeyBuilders>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RootPrefix>k__BackingField;
    public ModelMetadataProvider MetadataProvider { get; public set; }
    public HttpActionContext ActionContext { get; public set; }
    public IModelValidatorCache ValidatorCache { get; public set; }
    public ModelStateDictionary ModelState { get; private set; }
    public HashSet`1<object> Visited { get; private set; }
    public Stack`1<IBodyModelValidatorKeyBuilder> KeyBuilders { get; private set; }
    public string RootPrefix { get; public set; }
    public BodyModelValidatorContext(ModelStateDictionary modelState);
    [CompilerGeneratedAttribute]
public ModelMetadataProvider get_MetadataProvider();
    [CompilerGeneratedAttribute]
public void set_MetadataProvider(ModelMetadataProvider value);
    [CompilerGeneratedAttribute]
public HttpActionContext get_ActionContext();
    [CompilerGeneratedAttribute]
public void set_ActionContext(HttpActionContext value);
    [CompilerGeneratedAttribute]
public IModelValidatorCache get_ValidatorCache();
    [CompilerGeneratedAttribute]
public void set_ValidatorCache(IModelValidatorCache value);
    [CompilerGeneratedAttribute]
public ModelStateDictionary get_ModelState();
    [CompilerGeneratedAttribute]
private void set_ModelState(ModelStateDictionary value);
    [CompilerGeneratedAttribute]
public HashSet`1<object> get_Visited();
    [CompilerGeneratedAttribute]
private void set_Visited(HashSet`1<object> value);
    [CompilerGeneratedAttribute]
public Stack`1<IBodyModelValidatorKeyBuilder> get_KeyBuilders();
    [CompilerGeneratedAttribute]
private void set_KeyBuilders(Stack`1<IBodyModelValidatorKeyBuilder> value);
    [CompilerGeneratedAttribute]
public string get_RootPrefix();
    [CompilerGeneratedAttribute]
public void set_RootPrefix(string value);
}
public class System.Web.Http.Validation.DefaultBodyModelValidator : object {
    public sealed virtual bool Validate(object model, Type type, ModelMetadataProvider metadataProvider, HttpActionContext actionContext, string keyPrefix);
    public virtual bool ShouldValidateType(Type type);
    protected virtual bool ValidateNodeAndChildren(ModelMetadata metadata, BodyModelValidatorContext validationContext, object container, IEnumerable`1<ModelValidator> validators);
    protected virtual bool ValidateProperties(ModelMetadata metadata, BodyModelValidatorContext validationContext);
    protected virtual bool ValidateElements(IEnumerable model, BodyModelValidatorContext validationContext);
    protected virtual bool ShallowValidate(ModelMetadata metadata, BodyModelValidatorContext validationContext, object container, IEnumerable`1<ModelValidator> validators);
    private static Type GetElementType(Type type);
}
public interface System.Web.Http.Validation.IBodyModelValidator {
    public abstract virtual bool Validate(object model, Type type, ModelMetadataProvider metadataProvider, HttpActionContext actionContext, string keyPrefix);
}
public interface System.Web.Http.Validation.IBodyModelValidatorKeyBuilder {
    public abstract virtual string AppendTo(string prefix);
}
public interface System.Web.Http.Validation.IModelValidatorCache {
    public abstract virtual ModelValidator[] GetValidators(ModelMetadata metadata);
}
public class System.Web.Http.Validation.ModelStateFormatterLogger : object {
    private ModelStateDictionary _modelState;
    private string _prefix;
    public ModelStateFormatterLogger(ModelStateDictionary modelState, string prefix);
    public sealed virtual void LogError(string errorPath, string errorMessage);
    public sealed virtual void LogError(string errorPath, Exception exception);
}
public class System.Web.Http.Validation.ModelValidatedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private HttpActionContext <ActionContext>k__BackingField;
    [CompilerGeneratedAttribute]
private ModelValidationNode <ParentNode>k__BackingField;
    public HttpActionContext ActionContext { get; private set; }
    public ModelValidationNode ParentNode { get; private set; }
    public ModelValidatedEventArgs(HttpActionContext actionContext, ModelValidationNode parentNode);
    [CompilerGeneratedAttribute]
public HttpActionContext get_ActionContext();
    [CompilerGeneratedAttribute]
private void set_ActionContext(HttpActionContext value);
    [CompilerGeneratedAttribute]
public ModelValidationNode get_ParentNode();
    [CompilerGeneratedAttribute]
private void set_ParentNode(ModelValidationNode value);
}
public class System.Web.Http.Validation.ModelValidatingEventArgs : CancelEventArgs {
    [CompilerGeneratedAttribute]
private HttpActionContext <ActionContext>k__BackingField;
    [CompilerGeneratedAttribute]
private ModelValidationNode <ParentNode>k__BackingField;
    public HttpActionContext ActionContext { get; private set; }
    public ModelValidationNode ParentNode { get; private set; }
    public ModelValidatingEventArgs(HttpActionContext actionContext, ModelValidationNode parentNode);
    [CompilerGeneratedAttribute]
public HttpActionContext get_ActionContext();
    [CompilerGeneratedAttribute]
private void set_ActionContext(HttpActionContext value);
    [CompilerGeneratedAttribute]
public ModelValidationNode get_ParentNode();
    [CompilerGeneratedAttribute]
private void set_ParentNode(ModelValidationNode value);
}
public class System.Web.Http.Validation.ModelValidationNode : object {
    private IEnumerable`1<ModelValidator> _validators;
    private List`1<ModelValidationNode> _childNodes;
    [CompilerGeneratedAttribute]
private EventHandler`1<ModelValidatedEventArgs> Validated;
    [CompilerGeneratedAttribute]
private EventHandler`1<ModelValidatingEventArgs> Validating;
    [CompilerGeneratedAttribute]
private ModelMetadata <ModelMetadata>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ModelStateKey>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ValidateAllProperties>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SuppressValidation>k__BackingField;
    public ICollection`1<ModelValidationNode> ChildNodes { get; }
    public ModelMetadata ModelMetadata { get; private set; }
    public string ModelStateKey { get; private set; }
    public bool ValidateAllProperties { get; public set; }
    public bool SuppressValidation { get; public set; }
    public ModelValidationNode(ModelMetadata modelMetadata, string modelStateKey);
    public ModelValidationNode(ModelMetadata modelMetadata, string modelStateKey, IEnumerable`1<ModelValidationNode> childNodes);
    [CompilerGeneratedAttribute]
public void add_Validated(EventHandler`1<ModelValidatedEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_Validated(EventHandler`1<ModelValidatedEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_Validating(EventHandler`1<ModelValidatingEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_Validating(EventHandler`1<ModelValidatingEventArgs> value);
    public ICollection`1<ModelValidationNode> get_ChildNodes();
    [CompilerGeneratedAttribute]
public ModelMetadata get_ModelMetadata();
    [CompilerGeneratedAttribute]
private void set_ModelMetadata(ModelMetadata value);
    [CompilerGeneratedAttribute]
public string get_ModelStateKey();
    [CompilerGeneratedAttribute]
private void set_ModelStateKey(string value);
    [CompilerGeneratedAttribute]
public bool get_ValidateAllProperties();
    [CompilerGeneratedAttribute]
public void set_ValidateAllProperties(bool value);
    [CompilerGeneratedAttribute]
public bool get_SuppressValidation();
    [CompilerGeneratedAttribute]
public void set_SuppressValidation(bool value);
    public void CombineWith(ModelValidationNode otherNode);
    private void OnValidated(ModelValidatedEventArgs e);
    private void OnValidating(ModelValidatingEventArgs e);
    private object TryConvertContainerToMetadataType(ModelValidationNode parentNode);
    public void Validate(HttpActionContext actionContext);
    public void Validate(HttpActionContext actionContext, ModelValidationNode parentNode);
    private void ValidateChildren(HttpActionContext actionContext);
    private void ValidateProperties(HttpActionContext actionContext);
    private void ValidateThis(HttpActionContext actionContext, ModelValidationNode parentNode);
}
public class System.Web.Http.Validation.ModelValidationRequiredMemberSelector : object {
    private ModelMetadataProvider _metadataProvider;
    private List`1<ModelValidatorProvider> _validatorProviders;
    public ModelValidationRequiredMemberSelector(ModelMetadataProvider metadataProvider, IEnumerable`1<ModelValidatorProvider> validatorProviders);
    public sealed virtual bool IsRequiredMember(MemberInfo member);
}
public class System.Web.Http.Validation.ModelValidationResult : object {
    private string _memberName;
    private string _message;
    public string MemberName { get; public set; }
    public string Message { get; public set; }
    public string get_MemberName();
    public void set_MemberName(string value);
    public string get_Message();
    public void set_Message(string value);
}
public abstract class System.Web.Http.Validation.ModelValidator : object {
    [CompilerGeneratedAttribute]
private IEnumerable`1<ModelValidatorProvider> <ValidatorProviders>k__BackingField;
    protected internal IEnumerable`1<ModelValidatorProvider> ValidatorProviders { get; private set; }
    public bool IsRequired { get; }
    protected ModelValidator(IEnumerable`1<ModelValidatorProvider> validatorProviders);
    [CompilerGeneratedAttribute]
protected internal IEnumerable`1<ModelValidatorProvider> get_ValidatorProviders();
    [CompilerGeneratedAttribute]
private void set_ValidatorProviders(IEnumerable`1<ModelValidatorProvider> value);
    public virtual bool get_IsRequired();
    public static ModelValidator GetModelValidator(IEnumerable`1<ModelValidatorProvider> validatorProviders);
    public abstract virtual IEnumerable`1<ModelValidationResult> Validate(ModelMetadata metadata, object container);
}
internal class System.Web.Http.Validation.ModelValidatorCache : object {
    private ConcurrentDictionary`2<EfficientTypePropertyKey`2<Type, string>, ModelValidator[]> _validatorCache;
    private Lazy`1<IEnumerable`1<ModelValidatorProvider>> _validatorProviders;
    public ModelValidatorCache(Lazy`1<IEnumerable`1<ModelValidatorProvider>> validatorProviders);
    public sealed virtual ModelValidator[] GetValidators(ModelMetadata metadata);
}
public abstract class System.Web.Http.Validation.ModelValidatorProvider : object {
    public abstract virtual IEnumerable`1<ModelValidator> GetValidators(ModelMetadata metadata, IEnumerable`1<ModelValidatorProvider> validatorProviders);
}
public abstract class System.Web.Http.Validation.Providers.AssociatedValidatorProvider : ModelValidatorProvider {
    protected virtual ICustomTypeDescriptor GetTypeDescriptor(Type type);
    public sealed virtual IEnumerable`1<ModelValidator> GetValidators(ModelMetadata metadata, IEnumerable`1<ModelValidatorProvider> validatorProviders);
    protected abstract virtual IEnumerable`1<ModelValidator> GetValidators(ModelMetadata metadata, IEnumerable`1<ModelValidatorProvider> validatorProviders, IEnumerable`1<Attribute> attributes);
    private IEnumerable`1<ModelValidator> GetValidatorsForProperty(ModelMetadata metadata, IEnumerable`1<ModelValidatorProvider> validatorProviders);
    private IEnumerable`1<ModelValidator> GetValidatorsForType(ModelMetadata metadata, IEnumerable`1<ModelValidatorProvider> validatorProviders);
}
public class System.Web.Http.Validation.Providers.DataAnnotationsModelValidationFactory : MulticastDelegate {
    public DataAnnotationsModelValidationFactory(object object, IntPtr method);
    public virtual ModelValidator Invoke(IEnumerable`1<ModelValidatorProvider> validatorProviders, ValidationAttribute attribute);
    public virtual IAsyncResult BeginInvoke(IEnumerable`1<ModelValidatorProvider> validatorProviders, ValidationAttribute attribute, AsyncCallback callback, object object);
    public virtual ModelValidator EndInvoke(IAsyncResult result);
}
public class System.Web.Http.Validation.Providers.DataAnnotationsModelValidatorProvider : AssociatedValidatorProvider {
    internal DataAnnotationsModelValidationFactory DefaultAttributeFactory;
    internal Dictionary`2<Type, DataAnnotationsModelValidationFactory> AttributeFactories;
    internal DataAnnotationsValidatableObjectAdapterFactory DefaultValidatableFactory;
    internal Dictionary`2<Type, DataAnnotationsValidatableObjectAdapterFactory> ValidatableFactories;
    protected virtual IEnumerable`1<ModelValidator> GetValidators(ModelMetadata metadata, IEnumerable`1<ModelValidatorProvider> validatorProviders, IEnumerable`1<Attribute> attributes);
    public void RegisterAdapter(Type attributeType, Type adapterType);
    public void RegisterAdapterFactory(Type attributeType, DataAnnotationsModelValidationFactory factory);
    public void RegisterDefaultAdapter(Type adapterType);
    public void RegisterDefaultAdapterFactory(DataAnnotationsModelValidationFactory factory);
    private static ConstructorInfo GetAttributeAdapterConstructor(Type attributeType, Type adapterType);
    private static void ValidateAttributeAdapterType(Type adapterType);
    private static void ValidateAttributeType(Type attributeType);
    private static void ValidateAttributeFactory(DataAnnotationsModelValidationFactory factory);
    public void RegisterValidatableObjectAdapter(Type modelType, Type adapterType);
    public void RegisterValidatableObjectAdapterFactory(Type modelType, DataAnnotationsValidatableObjectAdapterFactory factory);
    public void RegisterDefaultValidatableObjectAdapter(Type adapterType);
    public void RegisterDefaultValidatableObjectAdapterFactory(DataAnnotationsValidatableObjectAdapterFactory factory);
    private static ConstructorInfo GetValidatableAdapterConstructor(Type adapterType);
    private static void ValidateValidatableAdapterType(Type adapterType);
    private static void ValidateValidatableModelType(Type modelType);
    private static void ValidateValidatableFactory(DataAnnotationsValidatableObjectAdapterFactory factory);
}
public class System.Web.Http.Validation.Providers.DataAnnotationsValidatableObjectAdapterFactory : MulticastDelegate {
    public DataAnnotationsValidatableObjectAdapterFactory(object object, IntPtr method);
    public virtual ModelValidator Invoke(IEnumerable`1<ModelValidatorProvider> validatorProviders);
    public virtual IAsyncResult BeginInvoke(IEnumerable`1<ModelValidatorProvider> validatorProviders, AsyncCallback callback, object object);
    public virtual ModelValidator EndInvoke(IAsyncResult result);
}
public class System.Web.Http.Validation.Providers.DataMemberModelValidatorProvider : AssociatedValidatorProvider {
    protected virtual IEnumerable`1<ModelValidator> GetValidators(ModelMetadata metadata, IEnumerable`1<ModelValidatorProvider> validatorProviders, IEnumerable`1<Attribute> attributes);
    internal static bool IsRequiredDataMember(Type containerType, IEnumerable`1<Attribute> attributes);
}
public class System.Web.Http.Validation.Providers.InvalidModelValidatorProvider : AssociatedValidatorProvider {
    [IteratorStateMachineAttribute("System.Web.Http.Validation.Providers.InvalidModelValidatorProvider/<GetValidators>d__0")]
protected virtual IEnumerable`1<ModelValidator> GetValidators(ModelMetadata metadata, IEnumerable`1<ModelValidatorProvider> validatorProviders, IEnumerable`1<Attribute> attributes);
}
public class System.Web.Http.Validation.Providers.RequiredMemberModelValidatorProvider : ModelValidatorProvider {
    private IRequiredMemberSelector _requiredMemberSelector;
    public RequiredMemberModelValidatorProvider(IRequiredMemberSelector requiredMemberSelector);
    public virtual IEnumerable`1<ModelValidator> GetValidators(ModelMetadata metadata, IEnumerable`1<ModelValidatorProvider> validatorProviders);
}
internal class System.Web.Http.Validation.ReferenceEqualityComparer : object {
    private static ReferenceEqualityComparer _instance;
    public static ReferenceEqualityComparer Instance { get; }
    private static ReferenceEqualityComparer();
    public static ReferenceEqualityComparer get_Instance();
    public sealed virtual bool Equals(object x, object y);
    public sealed virtual int GetHashCode(object obj);
}
public class System.Web.Http.Validation.Validators.DataAnnotationsModelValidator : ModelValidator {
    internal static string UseLegacyValidationMemberNameKey;
    private static bool _useLegacyValidationMemberName;
    [CompilerGeneratedAttribute]
private ValidationAttribute <Attribute>k__BackingField;
    internal static bool UseLegacyValidationMemberName { get; internal set; }
    protected internal ValidationAttribute Attribute { get; private set; }
    public bool IsRequired { get; }
    public DataAnnotationsModelValidator(IEnumerable`1<ModelValidatorProvider> validatorProviders, ValidationAttribute attribute);
    private static DataAnnotationsModelValidator();
    internal static bool get_UseLegacyValidationMemberName();
    internal static void set_UseLegacyValidationMemberName(bool value);
    [CompilerGeneratedAttribute]
protected internal ValidationAttribute get_Attribute();
    [CompilerGeneratedAttribute]
private void set_Attribute(ValidationAttribute value);
    public virtual bool get_IsRequired();
    public virtual IEnumerable`1<ModelValidationResult> Validate(ModelMetadata metadata, object container);
    internal static bool GetUseLegacyValidationMemberName(NameValueCollection appSettings);
}
public class System.Web.Http.Validation.Validators.ErrorModelValidator : ModelValidator {
    private string _errorMessage;
    public ErrorModelValidator(IEnumerable`1<ModelValidatorProvider> validatorProviders, string errorMessage);
    public virtual IEnumerable`1<ModelValidationResult> Validate(ModelMetadata metadata, object container);
}
public class System.Web.Http.Validation.Validators.RequiredMemberModelValidator : ModelValidator {
    public bool IsRequired { get; }
    public RequiredMemberModelValidator(IEnumerable`1<ModelValidatorProvider> validatorProviders);
    public virtual bool get_IsRequired();
    public virtual IEnumerable`1<ModelValidationResult> Validate(ModelMetadata metadata, object container);
}
public class System.Web.Http.Validation.Validators.ValidatableObjectAdapter : ModelValidator {
    public ValidatableObjectAdapter(IEnumerable`1<ModelValidatorProvider> validatorProviders);
    public virtual IEnumerable`1<ModelValidationResult> Validate(ModelMetadata metadata, object container);
    [IteratorStateMachineAttribute("System.Web.Http.Validation.Validators.ValidatableObjectAdapter/<ConvertResults>d__2")]
private static IEnumerable`1<ModelValidationResult> ConvertResults(IEnumerable`1<ValidationResult> results);
}
public interface System.Web.Http.ValueProviders.IEnumerableValueProvider {
    public abstract virtual IDictionary`2<string, string> GetKeysFromPrefix(string prefix);
}
public interface System.Web.Http.ValueProviders.IUriValueProviderFactory {
}
public interface System.Web.Http.ValueProviders.IValueProvider {
    public abstract virtual bool ContainsPrefix(string prefix);
    public abstract virtual ValueProviderResult GetValue(string key);
}
public class System.Web.Http.ValueProviders.Providers.CompositeValueProvider : Collection`1<IValueProvider> {
    public CompositeValueProvider(IList`1<IValueProvider> list);
    public virtual bool ContainsPrefix(string prefix);
    public virtual ValueProviderResult GetValue(string key);
    public virtual IDictionary`2<string, string> GetKeysFromPrefix(string prefix);
    internal static IDictionary`2<string, string> GetKeysFromPrefixFromProvider(IValueProvider provider, string prefix);
    protected virtual void InsertItem(int index, IValueProvider item);
    protected virtual void SetItem(int index, IValueProvider item);
}
public class System.Web.Http.ValueProviders.Providers.CompositeValueProviderFactory : ValueProviderFactory {
    private ValueProviderFactory[] _factories;
    public CompositeValueProviderFactory(IEnumerable`1<ValueProviderFactory> factories);
    public virtual IValueProvider GetValueProvider(HttpActionContext actionContext);
    internal static IValueProvider GetValueProvider(HttpActionContext actionContext, ValueProviderFactory[] factories);
}
internal class System.Web.Http.ValueProviders.Providers.ElementalValueProvider : object {
    [CompilerGeneratedAttribute]
private CultureInfo <Culture>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private object <RawValue>k__BackingField;
    public CultureInfo Culture { get; private set; }
    public string Name { get; private set; }
    public object RawValue { get; private set; }
    public ElementalValueProvider(string name, object rawValue, CultureInfo culture);
    [CompilerGeneratedAttribute]
public CultureInfo get_Culture();
    [CompilerGeneratedAttribute]
private void set_Culture(CultureInfo value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
public object get_RawValue();
    [CompilerGeneratedAttribute]
private void set_RawValue(object value);
    public sealed virtual bool ContainsPrefix(string prefix);
    public sealed virtual ValueProviderResult GetValue(string key);
}
public class System.Web.Http.ValueProviders.Providers.NameValuePairsValueProvider : object {
    private CultureInfo _culture;
    private PrefixContainer _prefixContainer;
    private Dictionary`2<string, object> _values;
    private Lazy`1<Dictionary`2<string, object>> _lazyValues;
    internal CultureInfo Culture { get; }
    private PrefixContainer PrefixContainer { get; }
    private Dictionary`2<string, object> Values { get; }
    public NameValuePairsValueProvider(IEnumerable`1<KeyValuePair`2<string, string>> values, CultureInfo culture);
    public NameValuePairsValueProvider(Func`1<IEnumerable`1<KeyValuePair`2<string, string>>> valuesFactory, CultureInfo culture);
    public NameValuePairsValueProvider(IDictionary`2<string, object> values, CultureInfo culture);
    internal CultureInfo get_Culture();
    private PrefixContainer get_PrefixContainer();
    private Dictionary`2<string, object> get_Values();
    private static Dictionary`2<string, object> InitializeValues(IEnumerable`1<KeyValuePair`2<string, T>> nameValuePairs);
    public virtual bool ContainsPrefix(string prefix);
    public virtual IDictionary`2<string, string> GetKeysFromPrefix(string prefix);
    public virtual ValueProviderResult GetValue(string key);
    private static string GetAttemptedValue(object value);
}
public class System.Web.Http.ValueProviders.Providers.QueryStringValueProvider : NameValuePairsValueProvider {
    public QueryStringValueProvider(HttpActionContext actionContext, CultureInfo culture);
}
public class System.Web.Http.ValueProviders.Providers.QueryStringValueProviderFactory : ValueProviderFactory {
    private static string RequestLocalStorageKey;
    public virtual IValueProvider GetValueProvider(HttpActionContext actionContext);
}
public class System.Web.Http.ValueProviders.Providers.RouteDataValueProvider : NameValuePairsValueProvider {
    public RouteDataValueProvider(HttpActionContext actionContext, CultureInfo culture);
    [IteratorStateMachineAttribute("System.Web.Http.ValueProviders.Providers.RouteDataValueProvider/<GetRouteValues>d__1")]
internal static IEnumerable`1<KeyValuePair`2<string, string>> GetRouteValues(IHttpRouteData routeData);
}
public class System.Web.Http.ValueProviders.Providers.RouteDataValueProviderFactory : ValueProviderFactory {
    private static string RequestLocalStorageKey;
    public virtual IValueProvider GetValueProvider(HttpActionContext actionContext);
}
[AttributeUsageAttribute("2116")]
public class System.Web.Http.ValueProviders.ValueProviderAttribute : ModelBinderAttribute {
    private Type[] _valueProviderFactoryTypes;
    public IEnumerable`1<Type> ValueProviderFactoryTypes { get; }
    public ValueProviderAttribute(Type valueProviderFactory);
    public ValueProviderAttribute(Type[] valueProviderFactories);
    public IEnumerable`1<Type> get_ValueProviderFactoryTypes();
    public virtual IEnumerable`1<ValueProviderFactory> GetValueProviderFactories(HttpConfiguration configuration);
    private static ValueProviderFactory Instantiate(Type factoryType);
}
public abstract class System.Web.Http.ValueProviders.ValueProviderFactory : object {
    public abstract virtual IValueProvider GetValueProvider(HttpActionContext actionContext);
}
public class System.Web.Http.ValueProviders.ValueProviderResult : object {
    private static CultureInfo _staticCulture;
    private CultureInfo _instanceCulture;
    [CompilerGeneratedAttribute]
private string <AttemptedValue>k__BackingField;
    [CompilerGeneratedAttribute]
private object <RawValue>k__BackingField;
    public string AttemptedValue { get; protected set; }
    public CultureInfo Culture { get; protected set; }
    public object RawValue { get; protected set; }
    public ValueProviderResult(object rawValue, string attemptedValue, CultureInfo culture);
    private static ValueProviderResult();
    [CompilerGeneratedAttribute]
public string get_AttemptedValue();
    [CompilerGeneratedAttribute]
protected void set_AttemptedValue(string value);
    public CultureInfo get_Culture();
    protected void set_Culture(CultureInfo value);
    [CompilerGeneratedAttribute]
public object get_RawValue();
    [CompilerGeneratedAttribute]
protected void set_RawValue(object value);
    private static object ConvertSimpleType(CultureInfo culture, object value, Type destinationType);
    public object ConvertTo(Type type);
    public virtual object ConvertTo(Type type, CultureInfo culture);
    private static object UnwrapPossibleListType(CultureInfo culture, object value, Type destinationType);
}
internal class System.Web.PrefixContainer : object {
    private ICollection`1<string> _originalValues;
    private String[] _sortedValues;
    internal PrefixContainer(ICollection`1<string> values);
    internal bool ContainsPrefix(string prefix);
    internal IDictionary`2<string, string> GetKeysFromPrefix(string prefix);
    private static void GetKeyFromEmptyPrefix(string entry, IDictionary`2<string, string> results);
    private static void GetKeyFromNonEmptyPrefix(string prefix, string entry, IDictionary`2<string, string> results);
    internal static bool IsPrefixMatch(string prefix, string testString);
}
