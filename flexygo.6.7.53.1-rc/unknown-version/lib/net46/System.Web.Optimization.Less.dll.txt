[ExtensionAttribute]
internal static class System.Web.Optimization.DependencyCache : object {
    private static ConcurrentDictionary`2<string, IList`1<string>> _fileDependencies;
    private static DependencyCache();
    [ExtensionAttribute]
internal static string GetTransientBundleFilesKey(Bundle bundle, BundleContext context);
    internal static void SaveFileDependencies(string virtualPath, String[] fileDependencies);
    private static IEnumerable`1<string> GetFileDependencies(Bundle bundle, string virtualPath, BundleContext context);
    private static string GetTransientFileKey(string virtualPath);
    private static string ComposeTransientFilesKey(IEnumerable`1<string> paths);
}
public class System.Web.Optimization.DynamicBundle : Bundle {
    public DynamicBundle(string virtualPath);
    public DynamicBundle(string virtualPath, string cdnPath);
    public DynamicBundle(string virtualPath, string cdnPath, IBundleTransform[] transforms);
    public virtual string GetCacheKey(BundleContext context);
}
public class System.Web.Optimization.DynamicScriptBundle : DynamicBundle {
    public DynamicScriptBundle(string virtualPath);
    public DynamicScriptBundle(string virtualPath, string cdnPath);
}
public interface System.Web.Optimization.IFileReaderWithResolver {
    public ImportedFilePathResolver PathResolver { get; public set; }
    public abstract virtual ImportedFilePathResolver get_PathResolver();
    public abstract virtual void set_PathResolver(ImportedFilePathResolver value);
}
public class System.Web.Optimization.ImportedFilePathResolver : object {
    private string _currentDirectory;
    public string CurrentDirectory { get; public set; }
    public string get_CurrentDirectory();
    public void set_CurrentDirectory(string value);
    public sealed virtual string GetFullPath(string filePath);
}
public class System.Web.Optimization.LessBundle : DynamicBundle {
    public LessBundle(string virtualPath);
    public LessBundle(string virtualPath, string cdnPath);
}
[ExtensionAttribute]
internal static class System.Web.Optimization.LessExtensions : object {
    [ExtensionAttribute]
internal static void SetCurrentFilePath(Parser lessParser, string currentFilePath);
    [ExtensionAttribute]
internal static ImportedFilePathResolver GetPathResolver(Parser lessParser);
    [ExtensionAttribute]
internal static IFileReaderWithResolver GetFileReaderWithResolver(Parser lessParser);
    [ExtensionAttribute]
internal static LessEngine ResolveLessEngine(ILessEngine engine);
}
public class System.Web.Optimization.LessTransform : object {
    private static Regex _cssUrlRuleMatcher;
    private static LessTransform();
    public sealed virtual void Process(BundleContext context, BundleResponse bundleResponse);
    internal static string Process(IEnumerable`1& files);
    private static string ConvertUrlsToAbsolute(string cssFilePath, string content);
    private static IEnumerable`1<BundleFile> GetFileDependencies(LessEngine lessEngine);
}
public class System.Web.Optimization.LessVirtualFileReader : object {
    private ImportedFilePathResolver _pathResolver;
    private bool dotless.Core.Input.IFileReader.UseCacheDependencies { get; }
    public ImportedFilePathResolver PathResolver { get; public set; }
    protected LessVirtualFileReader(ImportedFilePathResolver pathResolver);
    public virtual bool DoesFileExist(string fileName);
    public virtual string GetFileContents(string fileName);
    public virtual Byte[] GetBinaryFileContents(string fileName);
    protected static Byte[] GetBytes(Stream stream);
    private sealed virtual override bool dotless.Core.Input.IFileReader.get_UseCacheDependencies();
    public sealed virtual ImportedFilePathResolver get_PathResolver();
    public sealed virtual void set_PathResolver(ImportedFilePathResolver value);
}
