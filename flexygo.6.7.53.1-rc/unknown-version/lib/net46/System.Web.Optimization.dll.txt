[AttributeUsageAttribute("1")]
internal class System.Reflection.AssemblyMetadataAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Key>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    public string Key { get; public set; }
    public string Value { get; public set; }
    public AssemblyMetadataAttribute(string key, string value);
    [CompilerGeneratedAttribute]
public string get_Key();
    [CompilerGeneratedAttribute]
public void set_Key(string value);
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(string value);
}
internal class System.Web.Optimization.AssetManager : object {
    internal static object AssetsManagerKey;
    private HttpContextBase _httpContext;
    private Func`3<string, string, string> _resolveUrlMethod;
    private IBundleResolver _resolver;
    private BundleCollection _bundles;
    private Nullable`1<bool> _optimizationEnabled;
    [CompilerGeneratedAttribute]
private static Func`3<string, string, string> CS$<>9__CachedAnonymousMethodDelegate1;
    internal HttpContextBase Context { get; }
    internal Func`3<string, string, string> ResolveUrlMethod { get; internal set; }
    internal IBundleResolver Resolver { get; internal set; }
    internal BundleCollection Bundles { get; internal set; }
    internal bool OptimizationEnabled { get; internal set; }
    public AssetManager(HttpContextBase context);
    private static AssetManager();
    internal HttpContextBase get_Context();
    internal Func`3<string, string, string> get_ResolveUrlMethod();
    internal void set_ResolveUrlMethod(Func`3<string, string, string> value);
    internal IBundleResolver get_Resolver();
    internal void set_Resolver(IBundleResolver value);
    internal BundleCollection get_Bundles();
    internal void set_Bundles(BundleCollection value);
    internal bool get_OptimizationEnabled();
    internal void set_OptimizationEnabled(bool value);
    public static AssetManager GetInstance(HttpContextBase context);
    private IEnumerable`1<AssetTag> EliminateDuplicatesAndResolveUrls(IEnumerable`1<AssetTag> refs);
    private IEnumerable`1<AssetTag> DeterminePathsToRender(IEnumerable`1<string> assets);
    public IHtmlString RenderExplicit(string tagFormat, String[] paths);
    internal string ResolveVirtualPath(string virtualPath);
    internal HtmlString ResolveUrl(string url);
    [CompilerGeneratedAttribute]
private static string <get_ResolveUrlMethod>b__0(string basePath, string relativePath);
}
public class System.Web.Optimization.Bundle : object {
    private static string VersionQueryString;
    private IBundleOrderer _orderer;
    private IBundleBuilder _builder;
    private string _path;
    private ItemRegistry _items;
    private List`1<string> _cacheKeys;
    private bool _enableReplacements;
    private IList`1<IBundleTransform> _transforms;
    [CompilerGeneratedAttribute]
private string <CdnPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CdnFallbackExpression>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ConcatenationToken>k__BackingField;
    public string Path { get; protected set; }
    public string CdnPath { get; public set; }
    public string CdnFallbackExpression { get; public set; }
    public IList`1<IBundleTransform> Transforms { get; }
    internal ItemRegistry Items { get; }
    public IBundleOrderer Orderer { get; public set; }
    public IBundleBuilder Builder { get; public set; }
    public bool EnableFileExtensionReplacements { get; public set; }
    public string ConcatenationToken { get; public set; }
    internal IList`1<string> CacheKeys { get; }
    public Bundle(string virtualPath, string cdnPath, IBundleTransform[] transforms);
    public Bundle(string virtualPath, IBundleTransform[] transforms);
    public Bundle(string virtualPath);
    public Bundle(string virtualPath, string cdnPath);
    public string get_Path();
    protected void set_Path(string value);
    [CompilerGeneratedAttribute]
public string get_CdnPath();
    [CompilerGeneratedAttribute]
public void set_CdnPath(string value);
    [CompilerGeneratedAttribute]
public virtual string get_CdnFallbackExpression();
    [CompilerGeneratedAttribute]
public virtual void set_CdnFallbackExpression(string value);
    public IList`1<IBundleTransform> get_Transforms();
    internal ItemRegistry get_Items();
    public virtual IBundleOrderer get_Orderer();
    public virtual void set_Orderer(IBundleOrderer value);
    public virtual IBundleBuilder get_Builder();
    public virtual void set_Builder(IBundleBuilder value);
    public virtual bool get_EnableFileExtensionReplacements();
    public virtual void set_EnableFileExtensionReplacements(bool value);
    [CompilerGeneratedAttribute]
public string get_ConcatenationToken();
    [CompilerGeneratedAttribute]
public void set_ConcatenationToken(string value);
    internal IList`1<string> get_CacheKeys();
    public virtual IEnumerable`1<BundleFile> EnumerateFiles(BundleContext context);
    public virtual BundleResponse ApplyTransforms(BundleContext context, string bundleContent, IEnumerable`1<BundleFile> bundleFiles);
    public virtual BundleResponse GenerateBundleResponse(BundleContext context);
    public virtual Bundle Include(String[] virtualPaths);
    public virtual Bundle Include(string virtualPath, IItemTransform[] transforms);
    public virtual Bundle IncludeDirectory(string directoryVirtualPath, string searchPattern);
    public virtual Bundle IncludeDirectory(string directoryVirtualPath, string searchPattern, bool searchSubdirectories);
    internal static bool GetInstrumentationMode(HttpContextBase context);
    internal void ProcessRequest(BundleContext context);
    internal BundleResponse GetBundleResponse(BundleContext context);
    internal string GetBundleUrl(BundleContext context, bool includeContentHash);
    public virtual string GetCacheKey(BundleContext context);
    public virtual BundleResponse CacheLookup(BundleContext context);
    public virtual void UpdateCache(BundleContext context, BundleResponse response);
    internal void InvalidateCacheEntries();
    private static void SetHeaders(BundleResponse response, BundleContext context, bool noCache);
}
public class System.Web.Optimization.BundleCollection : object {
    private Dictionary`2<string, Bundle> _bundles;
    private Dictionary`2<string, DynamicFolderBundle> _dynamicBundles;
    private Dictionary`2<string, Bundle> _staticBundles;
    private List`1<BundleFileSetOrdering> _orderPriority;
    private IgnoreList _ignoreList;
    private IgnoreList _directoryFilter;
    private FileExtensionReplacementList _replacementList;
    private HttpContextBase _context;
    [CompilerGeneratedAttribute]
private IBundleCache <Cache>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseCdn>k__BackingField;
    internal IBundleCache Cache { get; internal set; }
    public IList`1<BundleFileSetOrdering> FileSetOrderList { get; }
    public IgnoreList IgnoreList { get; }
    public IgnoreList DirectoryFilter { get; }
    public FileExtensionReplacementList FileExtensionReplacementList { get; public set; }
    internal Dictionary`2<string, DynamicFolderBundle> DynamicBundles { get; }
    internal Dictionary`2<string, Bundle> StaticBundles { get; }
    internal HttpContextBase Context { get; internal set; }
    public bool UseCdn { get; public set; }
    public int Count { get; }
    [CompilerGeneratedAttribute]
internal IBundleCache get_Cache();
    [CompilerGeneratedAttribute]
internal void set_Cache(IBundleCache value);
    public IList`1<BundleFileSetOrdering> get_FileSetOrderList();
    public IgnoreList get_IgnoreList();
    public IgnoreList get_DirectoryFilter();
    public FileExtensionReplacementList get_FileExtensionReplacementList();
    public void set_FileExtensionReplacementList(FileExtensionReplacementList value);
    internal Dictionary`2<string, DynamicFolderBundle> get_DynamicBundles();
    internal Dictionary`2<string, Bundle> get_StaticBundles();
    internal HttpContextBase get_Context();
    internal void set_Context(HttpContextBase value);
    [CompilerGeneratedAttribute]
public bool get_UseCdn();
    [CompilerGeneratedAttribute]
public void set_UseCdn(bool value);
    public void Add(Bundle bundle);
    public static void AddDefaultIgnorePatterns(IgnoreList ignoreList);
    public static void AddDefaultFileOrderings(IList`1<BundleFileSetOrdering> list);
    public static void AddDefaultFileExtensionReplacements(FileExtensionReplacementList list);
    public string ResolveBundleUrl(string bundleVirtualPath);
    public string ResolveBundleUrl(string bundleVirtualPath, bool includeContentHash);
    public Bundle GetBundleFor(string bundleVirtualPath);
    public void Clear();
    public void ResetAll();
    public bool Remove(Bundle bundle);
    public int get_Count();
    public ReadOnlyCollection`1<Bundle> GetRegisteredBundles();
    protected virtual IEnumerator`1<Bundle> GetEnumerator();
    private sealed virtual override IEnumerator`1<Bundle> System.Collections.Generic.IEnumerable<System.Web.Optimization.Bundle>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public class System.Web.Optimization.BundleContext : object {
    private Nullable`1<bool> _useServerCache;
    private HashSet`1<string> _cacheDependencyDirectories;
    [CompilerGeneratedAttribute]
private HttpContextBase <HttpContext>k__BackingField;
    [CompilerGeneratedAttribute]
private BundleCollection <BundleCollection>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BundleVirtualPath>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableInstrumentation>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableOptimizations>k__BackingField;
    [CompilerGeneratedAttribute]
private VirtualPathProvider <VirtualPathProvider>k__BackingField;
    public HttpContextBase HttpContext { get; internal set; }
    public BundleCollection BundleCollection { get; internal set; }
    public string BundleVirtualPath { get; internal set; }
    public bool EnableInstrumentation { get; public set; }
    public bool EnableOptimizations { get; public set; }
    internal VirtualPathProvider VirtualPathProvider { get; internal set; }
    public bool UseServerCache { get; public set; }
    internal HashSet`1<string> CacheDependencyDirectories { get; }
    public BundleContext(HttpContextBase context, BundleCollection collection, string bundleVirtualPath);
    [CompilerGeneratedAttribute]
public HttpContextBase get_HttpContext();
    [CompilerGeneratedAttribute]
internal void set_HttpContext(HttpContextBase value);
    [CompilerGeneratedAttribute]
public BundleCollection get_BundleCollection();
    [CompilerGeneratedAttribute]
internal void set_BundleCollection(BundleCollection value);
    [CompilerGeneratedAttribute]
public string get_BundleVirtualPath();
    [CompilerGeneratedAttribute]
internal void set_BundleVirtualPath(string value);
    [CompilerGeneratedAttribute]
public bool get_EnableInstrumentation();
    [CompilerGeneratedAttribute]
public void set_EnableInstrumentation(bool value);
    [CompilerGeneratedAttribute]
public bool get_EnableOptimizations();
    [CompilerGeneratedAttribute]
public void set_EnableOptimizations(bool value);
    [CompilerGeneratedAttribute]
internal VirtualPathProvider get_VirtualPathProvider();
    [CompilerGeneratedAttribute]
internal void set_VirtualPathProvider(VirtualPathProvider value);
    public bool get_UseServerCache();
    public void set_UseServerCache(bool value);
    internal HashSet`1<string> get_CacheDependencyDirectories();
}
public class System.Web.Optimization.BundleDefinition : object {
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CdnPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CdnFallbackExpression>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<string> <Includes>k__BackingField;
    public string Path { get; public set; }
    public string CdnPath { get; public set; }
    public string CdnFallbackExpression { get; public set; }
    public IList`1<string> Includes { get; internal set; }
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
public void set_Path(string value);
    [CompilerGeneratedAttribute]
public string get_CdnPath();
    [CompilerGeneratedAttribute]
public void set_CdnPath(string value);
    [CompilerGeneratedAttribute]
public string get_CdnFallbackExpression();
    [CompilerGeneratedAttribute]
public void set_CdnFallbackExpression(string value);
    [CompilerGeneratedAttribute]
public IList`1<string> get_Includes();
    [CompilerGeneratedAttribute]
internal void set_Includes(IList`1<string> value);
}
internal class System.Web.Optimization.BundleDirectoryItem : BundleItem {
    [CompilerGeneratedAttribute]
private string <SearchPattern>k__BackingField;
    [CompilerGeneratedAttribute]
private PatternType <PatternType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SearchSubdirectories>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`2<VirtualFile, VirtualFile> CS$<>9__CachedAnonymousMethodDelegate7;
    public string SearchPattern { get; public set; }
    public PatternType PatternType { get; public set; }
    public bool SearchSubdirectories { get; public set; }
    public BundleDirectoryItem(string path, string searchPattern, PatternType patternType, bool searchSubdirectories, IList`1<IItemTransform> transforms);
    [CompilerGeneratedAttribute]
public string get_SearchPattern();
    [CompilerGeneratedAttribute]
public void set_SearchPattern(string value);
    [CompilerGeneratedAttribute]
public PatternType get_PatternType();
    [CompilerGeneratedAttribute]
public void set_PatternType(PatternType value);
    [CompilerGeneratedAttribute]
public bool get_SearchSubdirectories();
    [CompilerGeneratedAttribute]
public void set_SearchSubdirectories(bool value);
    private static void AddAllSubdirectories(VirtualDirectory dir, BundleContext context);
    public void ProcessDirectory(BundleContext context, string directoryVirtualPath, VirtualDirectory dirInfo, List`1<BundleFile> files);
    public virtual void AddFiles(List`1<BundleFile> files, BundleContext context);
    [CompilerGeneratedAttribute]
private bool <ProcessDirectory>b__1(VirtualFile file);
    [CompilerGeneratedAttribute]
private static VirtualFile <ProcessDirectory>b__3(VirtualFile file);
}
public class System.Web.Optimization.BundleFile : object {
    private List`1<IItemTransform> _transforms;
    private VirtualFile _virtualFile;
    [CompilerGeneratedAttribute]
private string <IncludedVirtualPath>k__BackingField;
    public VirtualFile VirtualFile { get; public set; }
    public string IncludedVirtualPath { get; public set; }
    public IList`1<IItemTransform> Transforms { get; }
    public BundleFile(string includedVirtualPath, VirtualFile file, IList`1<IItemTransform> transforms);
    public BundleFile(string includedVirtualPath, VirtualFile file);
    public VirtualFile get_VirtualFile();
    public void set_VirtualFile(VirtualFile value);
    [CompilerGeneratedAttribute]
public string get_IncludedVirtualPath();
    [CompilerGeneratedAttribute]
public void set_IncludedVirtualPath(string value);
    public IList`1<IItemTransform> get_Transforms();
    public string ApplyTransforms();
}
internal class System.Web.Optimization.BundleFileComparer : object {
    internal static BundleFileComparer Instance;
    private static BundleFileComparer();
    public sealed virtual bool Equals(BundleFile x, BundleFile y);
    public sealed virtual int GetHashCode(BundleFile obj);
    public sealed virtual int Compare(BundleFile x, BundleFile y);
}
public class System.Web.Optimization.BundleFileSetOrdering : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<string> <Files>k__BackingField;
    public string Name { get; private set; }
    public IList`1<string> Files { get; private set; }
    public BundleFileSetOrdering(string name);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
public IList`1<string> get_Files();
    [CompilerGeneratedAttribute]
private void set_Files(IList`1<string> value);
}
internal class System.Web.Optimization.BundleHandler : object {
    [CompilerGeneratedAttribute]
private Bundle <RequestBundle>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BundleVirtualPath>k__BackingField;
    public Bundle RequestBundle { get; private set; }
    public string BundleVirtualPath { get; private set; }
    public bool IsReusable { get; }
    public BundleHandler(Bundle requestBundle, string bundleVirtualPath);
    [CompilerGeneratedAttribute]
public Bundle get_RequestBundle();
    [CompilerGeneratedAttribute]
private void set_RequestBundle(Bundle value);
    [CompilerGeneratedAttribute]
public string get_BundleVirtualPath();
    [CompilerGeneratedAttribute]
private void set_BundleVirtualPath(string value);
    public sealed virtual bool get_IsReusable();
    internal static string GetBundleUrlFromContext(HttpContextBase context);
    internal static bool RemapHandlerForBundleRequests(HttpApplication app);
    public sealed virtual void ProcessRequest(HttpContext context);
}
internal class System.Web.Optimization.BundleItem : object {
    private List`1<IItemTransform> _transforms;
    [CompilerGeneratedAttribute]
private string <VirtualPath>k__BackingField;
    public string VirtualPath { get; public set; }
    public List`1<IItemTransform> Transforms { get; }
    public BundleItem(string virtualPath);
    public BundleItem(string virtualPath, IEnumerable`1<IItemTransform> transforms);
    [CompilerGeneratedAttribute]
public string get_VirtualPath();
    [CompilerGeneratedAttribute]
public void set_VirtualPath(string value);
    public List`1<IItemTransform> get_Transforms();
    public virtual void AddFiles(List`1<BundleFile> files, BundleContext context);
}
public class System.Web.Optimization.BundleManifest : object {
    private static string XsdResourceName;
    private static string DefaultBundlePath;
    [CompilerGeneratedAttribute]
private IList`1<BundleDefinition> <StyleBundles>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<BundleDefinition> <ScriptBundles>k__BackingField;
    [CompilerGeneratedAttribute]
private static ValidationEventHandler CS$<>9__CachedAnonymousMethodDelegate1;
    [CompilerGeneratedAttribute]
private static Func`2<XmlElement, string> CS$<>9__CachedAnonymousMethodDelegate4;
    public IList`1<BundleDefinition> StyleBundles { get; private set; }
    public IList`1<BundleDefinition> ScriptBundles { get; private set; }
    public static string BundleManifestPath { get; }
    [CompilerGeneratedAttribute]
public IList`1<BundleDefinition> get_StyleBundles();
    [CompilerGeneratedAttribute]
private void set_StyleBundles(IList`1<BundleDefinition> value);
    [CompilerGeneratedAttribute]
public IList`1<BundleDefinition> get_ScriptBundles();
    [CompilerGeneratedAttribute]
private void set_ScriptBundles(IList`1<BundleDefinition> value);
    public static BundleManifest ReadBundleManifest(Stream bundleStream);
    public static string get_BundleManifestPath();
    public static BundleManifest ReadBundleManifest();
    internal static BundleManifest ReadBundleManifest(VirtualPathProvider vpp);
    private static XmlDocument GetXmlDocument(Stream bundleStream);
    private static BundleDefinition ReadBundle(XmlElement element);
    internal void Register(BundleCollection collection);
    [CompilerGeneratedAttribute]
private static void <GetXmlDocument>b__0(object sender, ValidationEventArgs e);
    [CompilerGeneratedAttribute]
private static string <ReadBundle>b__3(XmlElement s);
}
public class System.Web.Optimization.BundleModule : object {
    protected virtual void Dispose();
    protected virtual void Init(HttpApplication application);
    private void OnApplicationPostResolveRequestCache(object sender, EventArgs e);
    private sealed virtual override void System.Web.IHttpModule.Dispose();
    private sealed virtual override void System.Web.IHttpModule.Init(HttpApplication application);
}
public class System.Web.Optimization.BundleResolver : object {
    private static BundleResolver _default;
    private static IBundleResolver _current;
    private HttpContextBase _context;
    [CompilerGeneratedAttribute]
private BundleCollection <Bundles>k__BackingField;
    public static IBundleResolver Current { get; public set; }
    private BundleCollection Bundles { get; private set; }
    internal HttpContextBase Context { get; internal set; }
    public BundleResolver(BundleCollection bundles);
    public BundleResolver(BundleCollection bundles, HttpContextBase context);
    private static BundleResolver();
    public static IBundleResolver get_Current();
    public static void set_Current(IBundleResolver value);
    [CompilerGeneratedAttribute]
private BundleCollection get_Bundles();
    [CompilerGeneratedAttribute]
private void set_Bundles(BundleCollection value);
    internal HttpContextBase get_Context();
    internal void set_Context(HttpContextBase value);
    public sealed virtual bool IsBundleVirtualPath(string virtualPath);
    public sealed virtual IEnumerable`1<string> GetBundleContents(string virtualPath);
    public sealed virtual string GetBundleUrl(string virtualPath);
}
public class System.Web.Optimization.BundleResponse : object {
    private string _content;
    private string _contentHash;
    private IEnumerable`1<BundleFile> _files;
    private static bool _isMonoRuntime;
    [CompilerGeneratedAttribute]
private string <ContentType>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <CreationDate>k__BackingField;
    [CompilerGeneratedAttribute]
private HttpCacheability <Cacheability>k__BackingField;
    public string Content { get; public set; }
    public string ContentType { get; public set; }
    public DateTimeOffset CreationDate { get; private set; }
    public HttpCacheability Cacheability { get; public set; }
    public IEnumerable`1<BundleFile> Files { get; public set; }
    private static bool AllowOnlyFipsAlgorithms { get; }
    public BundleResponse(string content, IEnumerable`1<BundleFile> files);
    private static BundleResponse();
    public string get_Content();
    public void set_Content(string value);
    [CompilerGeneratedAttribute]
public string get_ContentType();
    [CompilerGeneratedAttribute]
public void set_ContentType(string value);
    [CompilerGeneratedAttribute]
public DateTimeOffset get_CreationDate();
    [CompilerGeneratedAttribute]
private void set_CreationDate(DateTimeOffset value);
    [CompilerGeneratedAttribute]
public HttpCacheability get_Cacheability();
    [CompilerGeneratedAttribute]
public void set_Cacheability(HttpCacheability value);
    public IEnumerable`1<BundleFile> get_Files();
    public void set_Files(IEnumerable`1<BundleFile> value);
    internal static string ComputeHash(string input);
    internal string GetContentHashCode();
    private static bool get_AllowOnlyFipsAlgorithms();
    private static SHA256 CreateHashAlgorithm();
}
public static class System.Web.Optimization.BundleTable : object {
    private static BundleCollection _instance;
    private static bool _enableOptimizations;
    private static bool _enableOptimizationsSet;
    private static VirtualPathProvider _vpp;
    private static bool _readBundleManifest;
    public static BundleCollection Bundles { get; }
    public static bool EnableOptimizations { get; public set; }
    public static VirtualPathProvider VirtualPathProvider { get; public set; }
    private static BundleTable();
    public static BundleCollection get_Bundles();
    public static bool get_EnableOptimizations();
    public static void set_EnableOptimizations(bool value);
    public static VirtualPathProvider get_VirtualPathProvider();
    public static void set_VirtualPathProvider(VirtualPathProvider value);
    private static void EnsureBundleSetup();
}
public class System.Web.Optimization.CssMinify : object {
    internal static CssMinify Instance;
    internal static string CssContentType;
    private static CssMinify();
    public virtual void Process(BundleContext context, BundleResponse response);
}
public class System.Web.Optimization.CssRewriteUrlTransform : object {
    internal static string RebaseUrlToAbsolute(string baseUrl, string url);
    internal static string ConvertUrlsToAbsolute(string baseUrl, string content);
    public sealed virtual string Process(string includedVirtualPath, string input);
}
public class System.Web.Optimization.DefaultBundleBuilder : object {
    internal static IBundleBuilder Instance;
    private static DefaultBundleBuilder();
    private static Dictionary`2<string, string> GetInstrumentedBundlePreamble(string boundaryValue);
    private static string GetBoundaryIdentifier(Bundle bundle);
    private static string GetInstrumentedFileHeaderFormat(string boundaryValue);
    internal static string ConvertToAppRelativePath(string appPath, string fullName);
    private static string GetApplicationPath(VirtualPathProvider vpp);
    private static string GetFileHeader(BundleContext context, VirtualFile file, string fileHeaderFormat);
    private static string GenerateBundlePreamble(string bundleHash);
    public sealed virtual string BuildBundleContent(Bundle bundle, BundleContext context, IEnumerable`1<BundleFile> files);
}
public class System.Web.Optimization.DefaultBundleOrderer : object {
    internal static DefaultBundleOrderer Instance;
    private static DefaultBundleOrderer();
    private static Dictionary`2<string, HashSet`1<BundleFile>> BuildFileMap(IEnumerable`1<BundleFile> files);
    private static void AddOrderingFiles(BundleFileSetOrdering ordering, IEnumerable`1<BundleFile> files, Dictionary`2<string, HashSet`1<BundleFile>> fileMap, HashSet`1<VirtualFile> foundFiles, List`1<BundleFile> result);
    public virtual IEnumerable`1<BundleFile> OrderFiles(BundleContext context, IEnumerable`1<BundleFile> files);
}
internal class System.Web.Optimization.DefaultTransform : object {
    internal static DefaultTransform Instance;
    [CompilerGeneratedAttribute]
private string <ContentType>k__BackingField;
    public string ContentType { get; public set; }
    public DefaultTransform(string contentType);
    private static DefaultTransform();
    [CompilerGeneratedAttribute]
public string get_ContentType();
    [CompilerGeneratedAttribute]
public void set_ContentType(string value);
    public sealed virtual void Process(BundleContext context, BundleResponse response);
}
public class System.Web.Optimization.DynamicFolderBundle : Bundle {
    private string _searchPattern;
    private bool _searchSubdirectories;
    [CompilerGeneratedAttribute]
private PatternType <PatternType>k__BackingField;
    public string SearchPattern { get; public set; }
    public string CdnPath { get; public set; }
    internal PatternType PatternType { get; internal set; }
    public bool SearchSubdirectories { get; public set; }
    public DynamicFolderBundle(string pathSuffix, string searchPattern);
    public DynamicFolderBundle(string pathSuffix, string searchPattern, IBundleTransform[] transforms);
    public DynamicFolderBundle(string pathSuffix, string searchPattern, bool searchSubdirectories);
    public DynamicFolderBundle(string pathSuffix, string searchPattern, bool searchSubdirectories, IBundleTransform[] transforms);
    public string get_SearchPattern();
    public void set_SearchPattern(string value);
    public string get_CdnPath();
    public void set_CdnPath(string value);
    [CompilerGeneratedAttribute]
internal PatternType get_PatternType();
    [CompilerGeneratedAttribute]
internal void set_PatternType(PatternType value);
    public bool get_SearchSubdirectories();
    public void set_SearchSubdirectories(bool value);
    public virtual IEnumerable`1<BundleFile> EnumerateFiles(BundleContext context);
    private static bool IsInvalidRouteUrl(string routeUrl);
}
internal static class System.Web.Optimization.ExceptionUtil : object {
    internal static ArgumentException ParameterNullOrEmpty(string parameter);
    internal static ArgumentException PropertyNullOrEmpty(string property);
    internal static Exception ValidateVirtualPath(string virtualPath, string argumentName);
    internal static bool IsPureWildcardSearchPattern(string searchPattern);
}
[DefaultMemberAttribute("Item")]
public class System.Web.Optimization.FileExtensionReplacementList : object {
    private List`1<Entry> _entries;
    internal int Count { get; }
    internal Entry Item { get; }
    internal int get_Count();
    internal Entry get_Item(int index);
    public void Add(string extension);
    public void Add(string extension, OptimizationMode mode);
    public void Clear();
    private static BundleFile FindReplacementFile(BundleContext context, BundleFile file, string replacementExtension);
    public virtual IEnumerable`1<BundleFile> ReplaceFileExtensions(BundleContext context, IEnumerable`1<BundleFile> files);
}
internal class System.Web.Optimization.FileVirtualPathProvider : VirtualPathProvider {
    private bool _ensureExists;
    [CompilerGeneratedAttribute]
private string <ApplicationPath>k__BackingField;
    public string ApplicationPath { get; public set; }
    internal bool EnsureExists { get; internal set; }
    public FileVirtualPathProvider(string applicationPath);
    [CompilerGeneratedAttribute]
public string get_ApplicationPath();
    [CompilerGeneratedAttribute]
public void set_ApplicationPath(string value);
    internal bool get_EnsureExists();
    internal void set_EnsureExists(bool value);
    public string MapPath(string virtualPath);
    public virtual bool FileExists(string virtualPath);
    public virtual bool DirectoryExists(string virtualDir);
    public virtual VirtualFile GetFile(string virtualPath);
    public virtual VirtualDirectory GetDirectory(string virtualDir);
}
internal class System.Web.Optimization.HttpContextCache : object {
    [CompilerGeneratedAttribute]
private static Func`2<BundleFile, string> CS$<>9__CachedAnonymousMethodDelegate1;
    public sealed virtual bool IsEnabled(BundleContext context);
    public sealed virtual BundleResponse Get(BundleContext context, Bundle bundle);
    public sealed virtual void Put(BundleContext context, Bundle bundle, BundleResponse response);
    [CompilerGeneratedAttribute]
private static string <Put>b__0(BundleFile f);
}
public interface System.Web.Optimization.IBundleBuilder {
    public abstract virtual string BuildBundleContent(Bundle bundle, BundleContext context, IEnumerable`1<BundleFile> files);
}
internal interface System.Web.Optimization.IBundleCache {
    public abstract virtual bool IsEnabled(BundleContext context);
    public abstract virtual BundleResponse Get(BundleContext context, Bundle bundle);
    public abstract virtual void Put(BundleContext context, Bundle bundle, BundleResponse response);
}
public interface System.Web.Optimization.IBundleOrderer {
    public abstract virtual IEnumerable`1<BundleFile> OrderFiles(BundleContext context, IEnumerable`1<BundleFile> files);
}
public interface System.Web.Optimization.IBundleResolver {
    public abstract virtual bool IsBundleVirtualPath(string virtualPath);
    public abstract virtual IEnumerable`1<string> GetBundleContents(string virtualPath);
    public abstract virtual string GetBundleUrl(string virtualPath);
}
public interface System.Web.Optimization.IBundleTransform {
    public abstract virtual void Process(BundleContext context, BundleResponse response);
}
public class System.Web.Optimization.IgnoreList : object {
    private HashSet`1<string> _exactAlways;
    private HashSet`1<string> _exactWhenOptimized;
    private HashSet`1<string> _exactWhenUnoptimized;
    private List`1<IgnoreMatch> _matches;
    public void Clear();
    private void InitializeMatches();
    public void Ignore(string item);
    private static Exception ValidateIgnoreMode(OptimizationMode mode, string argName);
    public void Ignore(string pattern, OptimizationMode mode);
    public bool ShouldIgnore(BundleContext context, string fileName);
    public IEnumerable`1<BundleFile> FilterIgnoredFiles(BundleContext context, IEnumerable`1<BundleFile> files);
}
public interface System.Web.Optimization.IItemTransform {
    public abstract virtual string Process(string includedVirtualPath, string input);
}
internal class System.Web.Optimization.ItemRegistry : List`1<BundleItem> {
    private VirtualPathProvider _vpp;
    [CompilerGeneratedAttribute]
private Bundle <Bundle>k__BackingField;
    internal VirtualPathProvider VirtualPathProvider { get; internal set; }
    internal Bundle Bundle { get; internal set; }
    internal VirtualPathProvider get_VirtualPathProvider();
    internal void set_VirtualPathProvider(VirtualPathProvider value);
    [CompilerGeneratedAttribute]
internal Bundle get_Bundle();
    [CompilerGeneratedAttribute]
internal void set_Bundle(Bundle value);
    internal Exception Include(String[] virtualPaths);
    internal Exception IncludePath(string virtualPath, IItemTransform[] transforms);
    internal Exception IncludeDirectory(string directoryVirtualPath, string searchPattern, PatternType patternType, bool searchSubdirectories, IItemTransform[] transforms);
}
public class System.Web.Optimization.JsMinify : object {
    internal static string JsContentType;
    internal static JsMinify Instance;
    private static JsMinify();
    internal static void GenerateErrorResponse(BundleResponse bundle, IEnumerable`1<object> errors);
    public virtual void Process(BundleContext context, BundleResponse response);
}
public enum System.Web.Optimization.OptimizationMode : Enum {
    public int value__;
    public static OptimizationMode Always;
    public static OptimizationMode WhenEnabled;
    public static OptimizationMode WhenDisabled;
}
public class System.Web.Optimization.OptimizationSettings : object {
    [CompilerGeneratedAttribute]
private string <ApplicationPath>k__BackingField;
    [CompilerGeneratedAttribute]
private BundleCollection <BundleTable>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BundleManifestPath>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<BundleCollection> <BundleSetupMethod>k__BackingField;
    public string ApplicationPath { get; public set; }
    public BundleCollection BundleTable { get; public set; }
    public string BundleManifestPath { get; public set; }
    public Action`1<BundleCollection> BundleSetupMethod { get; public set; }
    [CompilerGeneratedAttribute]
public string get_ApplicationPath();
    [CompilerGeneratedAttribute]
public void set_ApplicationPath(string value);
    [CompilerGeneratedAttribute]
public BundleCollection get_BundleTable();
    [CompilerGeneratedAttribute]
public void set_BundleTable(BundleCollection value);
    [CompilerGeneratedAttribute]
public string get_BundleManifestPath();
    [CompilerGeneratedAttribute]
public void set_BundleManifestPath(string value);
    [CompilerGeneratedAttribute]
public Action`1<BundleCollection> get_BundleSetupMethod();
    [CompilerGeneratedAttribute]
public void set_BundleSetupMethod(Action`1<BundleCollection> value);
}
public static class System.Web.Optimization.Optimizer : object {
    public static BundleResponse BuildBundle(string bundlePath, OptimizationSettings settings);
    private static BundleCollection InitializeBundleCollection(OptimizationSettings settings);
    public static void BuildAllBundles(OptimizationSettings settings);
}
internal static class System.Web.Optimization.PatternHelper : object {
    internal static string VersionToken;
    private static RegexOptions _flags;
    internal static string VersionRegEx;
    internal static PatternType GetPatternType(string input);
    internal static Regex BuildRegex(string input);
    internal static Regex BuildWildcardRegex(string input);
    internal static Exception ValidatePattern(PatternType type, string pattern, string argumentName);
}
internal enum System.Web.Optimization.PatternType : Enum {
    public int value__;
    public static PatternType Exact;
    public static PatternType All;
    public static PatternType Suffix;
    public static PatternType Prefix;
    public static PatternType Version;
}
[EditorBrowsableAttribute("1")]
public static class System.Web.Optimization.PreApplicationStartCode : object {
    private static bool _startWasCalled;
    public static void Start();
}
[CompilerGeneratedAttribute]
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
internal class System.Web.Optimization.Resources.OptimizationResources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string BundleDirectory_does_not_exist { get; }
    internal static string CdnFallBackScriptString { get; }
    internal static string DynamicFolderBundle_InvalidPath { get; }
    internal static string File_does_not_exist { get; }
    internal static string InvalidOptimizationMode { get; }
    internal static string InvalidPattern { get; }
    internal static string InvalidWildcardSearchPattern { get; }
    internal static string MinifyError { get; }
    internal static string Parameter_NullOrEmpty { get; }
    internal static string Property_NullOrEmpty { get; }
    internal static string Type_doesnt_inherit_from_type { get; }
    internal static string UrlMappings_only_app_relative_url_allowed { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_BundleDirectory_does_not_exist();
    internal static string get_CdnFallBackScriptString();
    internal static string get_DynamicFolderBundle_InvalidPath();
    internal static string get_File_does_not_exist();
    internal static string get_InvalidOptimizationMode();
    internal static string get_InvalidPattern();
    internal static string get_InvalidWildcardSearchPattern();
    internal static string get_MinifyError();
    internal static string get_Parameter_NullOrEmpty();
    internal static string get_Property_NullOrEmpty();
    internal static string get_Type_doesnt_inherit_from_type();
    internal static string get_UrlMappings_only_app_relative_url_allowed();
}
public class System.Web.Optimization.ScriptBundle : Bundle {
    public ScriptBundle(string virtualPath);
    public ScriptBundle(string virtualPath, string cdnPath);
}
public static class System.Web.Optimization.Scripts : object {
    private static HttpContextBase _context;
    private static string _defaultTagFormat;
    internal static HttpContextBase Context { get; internal set; }
    private static AssetManager Manager { get; }
    public static string DefaultTagFormat { get; public set; }
    private static Scripts();
    internal static HttpContextBase get_Context();
    internal static void set_Context(HttpContextBase value);
    private static AssetManager get_Manager();
    public static string get_DefaultTagFormat();
    public static void set_DefaultTagFormat(string value);
    public static IHtmlString Render(String[] paths);
    public static IHtmlString RenderFormat(string tagFormat, String[] paths);
    public static IHtmlString Url(string virtualPath);
}
public class System.Web.Optimization.StyleBundle : Bundle {
    public StyleBundle(string virtualPath);
    public StyleBundle(string virtualPath, string cdnPath);
}
public static class System.Web.Optimization.Styles : object {
    private static HttpContextBase _context;
    private static string _defaultTagFormat;
    internal static HttpContextBase Context { get; internal set; }
    private static AssetManager Manager { get; }
    public static string DefaultTagFormat { get; public set; }
    private static Styles();
    internal static HttpContextBase get_Context();
    internal static void set_Context(HttpContextBase value);
    private static AssetManager get_Manager();
    public static string get_DefaultTagFormat();
    public static void set_DefaultTagFormat(string value);
    public static IHtmlString Render(String[] paths);
    public static IHtmlString RenderFormat(string tagFormat, String[] paths);
    public static IHtmlString Url(string virtualPath);
}
internal static class System.Web.Optimization.UrlUtil : object {
    internal static string Url(string basePath, string path);
}
internal class System.Web.Optimization.VirtualFileComparer : object {
    internal static VirtualFileComparer Instance;
    private static VirtualFileComparer();
    public sealed virtual bool Equals(VirtualFile x, VirtualFile y);
    public sealed virtual int GetHashCode(VirtualFile obj);
    public sealed virtual int Compare(VirtualFile x, VirtualFile y);
}
