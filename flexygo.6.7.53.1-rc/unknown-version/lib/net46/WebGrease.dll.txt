[DefaultMemberAttribute("Item")]
public abstract class Microsoft.Ajax.Utilities.ActivationObject : object {
    private bool m_useStrict;
    private bool m_isKnownAtCompileTime;
    private CodeSettings m_settings;
    [CompilerGeneratedAttribute]
private bool <Existing>k__BackingField;
    [CompilerGeneratedAttribute]
private ActivationObject <Parent>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsInWithScope>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, JSVariableField> <NameTable>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<ActivationObject> <ChildScopes>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<Lookup> <ScopeLookups>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<INameDeclaration> <VarDeclaredNames>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<INameDeclaration> <LexicallyDeclaredNames>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<ParameterDeclaration> <GhostedCatchParameters>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<FunctionObject> <GhostedFunctions>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`2<ActivationObject, bool> CS$<>9__CachedAnonymousMethodDelegate1;
    [CompilerGeneratedAttribute]
private static Func`2<JSVariableField, JSVariableField> CS$<>9__CachedAnonymousMethodDelegate11;
    internal bool Existing { get; internal set; }
    public bool UseStrict { get; public set; }
    public bool IsKnownAtCompileTime { get; public set; }
    public ActivationObject Parent { get; private set; }
    public bool IsInWithScope { get; public set; }
    public IDictionary`2<string, JSVariableField> NameTable { get; private set; }
    public IList`1<ActivationObject> ChildScopes { get; private set; }
    public ICollection`1<Lookup> ScopeLookups { get; private set; }
    public ICollection`1<INameDeclaration> VarDeclaredNames { get; private set; }
    public ICollection`1<INameDeclaration> LexicallyDeclaredNames { get; private set; }
    public ICollection`1<ParameterDeclaration> GhostedCatchParameters { get; private set; }
    public ICollection`1<FunctionObject> GhostedFunctions { get; private set; }
    public JSVariableField Item { get; }
    protected ActivationObject(ActivationObject parent, CodeSettings codeSettings);
    [CompilerGeneratedAttribute]
internal bool get_Existing();
    [CompilerGeneratedAttribute]
internal void set_Existing(bool value);
    public bool get_UseStrict();
    public void set_UseStrict(bool value);
    public bool get_IsKnownAtCompileTime();
    public void set_IsKnownAtCompileTime(bool value);
    [CompilerGeneratedAttribute]
public ActivationObject get_Parent();
    [CompilerGeneratedAttribute]
private void set_Parent(ActivationObject value);
    [CompilerGeneratedAttribute]
public bool get_IsInWithScope();
    [CompilerGeneratedAttribute]
public void set_IsInWithScope(bool value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, JSVariableField> get_NameTable();
    [CompilerGeneratedAttribute]
private void set_NameTable(IDictionary`2<string, JSVariableField> value);
    [CompilerGeneratedAttribute]
public IList`1<ActivationObject> get_ChildScopes();
    [CompilerGeneratedAttribute]
private void set_ChildScopes(IList`1<ActivationObject> value);
    [CompilerGeneratedAttribute]
public ICollection`1<Lookup> get_ScopeLookups();
    [CompilerGeneratedAttribute]
private void set_ScopeLookups(ICollection`1<Lookup> value);
    [CompilerGeneratedAttribute]
public ICollection`1<INameDeclaration> get_VarDeclaredNames();
    [CompilerGeneratedAttribute]
private void set_VarDeclaredNames(ICollection`1<INameDeclaration> value);
    [CompilerGeneratedAttribute]
public ICollection`1<INameDeclaration> get_LexicallyDeclaredNames();
    [CompilerGeneratedAttribute]
private void set_LexicallyDeclaredNames(ICollection`1<INameDeclaration> value);
    [CompilerGeneratedAttribute]
public ICollection`1<ParameterDeclaration> get_GhostedCatchParameters();
    [CompilerGeneratedAttribute]
private void set_GhostedCatchParameters(ICollection`1<ParameterDeclaration> value);
    [CompilerGeneratedAttribute]
public ICollection`1<FunctionObject> get_GhostedFunctions();
    [CompilerGeneratedAttribute]
private void set_GhostedFunctions(ICollection`1<FunctionObject> value);
    public abstract virtual void DeclareScope();
    protected void DefineLexicalDeclarations();
    protected void DefineVarDeclarations();
    private void DefineField(INameDeclaration nameDecl, FunctionObject fieldValue);
    internal virtual void AnalyzeScope();
    private void AnalyzeNonGlobalScope();
    private void UnreferencedVariableField(JSVariableField variableField);
    private void UnreferencedFunction(JSVariableField variableField, FunctionObject functionObject);
    private void UnreferencedArgument(JSVariableField variableField);
    private void UnreferencedVariable(JSVariableField variableField);
    private static void SingleReferenceVariableField(JSVariableField variableField);
    private static bool IsIterativeReference(AstNode initializer, INameReference reference);
    private static Block GetParentBlock(AstNode node);
    protected void ManualRenameFields();
    internal void ValidateGeneratedNames();
    private bool GenerateAvoidList(HashSet`1<string> table, string name);
    internal virtual void AutoRenameFields();
    internal IEnumerable`1<JSVariableField> GetUncrunchedLocals();
    public virtual JSVariableField get_Item(string name);
    public JSVariableField FindReference(string name);
    public virtual JSVariableField DeclareField(string name, object value, FieldAttributes attributes);
    public virtual JSVariableField CreateField(JSVariableField outerField);
    public abstract virtual JSVariableField CreateField(string name, object value, FieldAttributes attributes);
    public virtual JSVariableField CreateInnerField(JSVariableField outerField);
    internal JSVariableField AddField(JSVariableField variableField);
    public INameDeclaration VarDeclaredName(string name);
    public INameDeclaration LexicallyDeclaredName(string name);
    public void AddGlobal(string name);
    [CompilerGeneratedAttribute]
private static bool <set_IsKnownAtCompileTime>b__0(ActivationObject p);
    [CompilerGeneratedAttribute]
private static JSVariableField <CreateField>b__10(JSVariableField o);
}
[ExtensionAttribute]
public static class Microsoft.Ajax.Utilities.AjaxMinExtensions : object {
    [ExtensionAttribute]
public static string FormatInvariant(string format, Object[] args);
    [ExtensionAttribute]
public static bool TryParseSingleInvariant(string text, Single& number);
    [ExtensionAttribute]
public static bool TryParseIntInvariant(string text, NumberStyles numberStyles, Int32& number);
    [ExtensionAttribute]
public static bool TryParseLongInvariant(string text, NumberStyles numberStyles, Int64& number);
    [ExtensionAttribute]
public static bool IsNullOrWhiteSpace(string text);
    [ExtensionAttribute]
public static string IfNullOrWhiteSpace(string text, string defaultValue);
    [ExtensionAttribute]
public static string SubstringUpToFirst(string text, char delimiter);
    [ExtensionAttribute]
public static string ToStringInvariant(int number, string format);
    [ExtensionAttribute]
public static string ToStringInvariant(double number, string format);
    [ExtensionAttribute]
public static string ToStringInvariant(int number);
    [ExtensionAttribute]
public static string ToStringInvariant(double number);
    [ExtensionAttribute]
public static IEnumerable`1<TSource> DistinctBy(IEnumerable`1<TSource> source, Func`2<TSource, TKey> keySelector);
    [ExtensionAttribute]
public static TResult IfNotNull(TObject obj, Func`2<TObject, TResult> action);
    [ExtensionAttribute]
public static void IfNotNull(TObject obj, Action`1<TObject> action);
    [ExtensionAttribute]
public static void CopyItemsTo(ICollection`1<TSource> fromSet, ICollection`1<TSource> toSet);
}
internal class Microsoft.Ajax.Utilities.AnalyzeNodeVisitor : TreeVisitor {
    private JSParser m_parser;
    private bool m_encounteredCCOn;
    private MatchPropertiesVisitor m_matchVisitor;
    private Stack`1<ActivationObject> m_scopeStack;
    [CompilerGeneratedAttribute]
private static Func`2<JSVariableField, bool> CS$<>9__CachedAnonymousMethodDelegate1c;
    [CompilerGeneratedAttribute]
private static Func`2<JSVariableField, bool> CS$<>9__CachedAnonymousMethodDelegate1d;
    [CompilerGeneratedAttribute]
private static Func`2<JSVariableField, bool> CS$<>9__CachedAnonymousMethodDelegate25;
    [CompilerGeneratedAttribute]
private static Func`2<JSVariableField, bool> CS$<>9__CachedAnonymousMethodDelegate26;
    [CompilerGeneratedAttribute]
private static Func`2<JSVariableField, bool> CS$<>9__CachedAnonymousMethodDelegate29;
    [CompilerGeneratedAttribute]
private static Func`2<JSVariableField, bool> CS$<>9__CachedAnonymousMethodDelegate2a;
    [CompilerGeneratedAttribute]
private static Func`2<ParameterDeclaration, string> CS$<>9__CachedAnonymousMethodDelegate2d;
    [CompilerGeneratedAttribute]
private static Func`2<ParameterDeclaration, string> CS$<>9__CachedAnonymousMethodDelegate2e;
    [CompilerGeneratedAttribute]
private static Func`2<JSVariableField, bool> CS$<>9__CachedAnonymousMethodDelegate38;
    [CompilerGeneratedAttribute]
private static Func`2<JSVariableField, bool> CS$<>9__CachedAnonymousMethodDelegate39;
    public AnalyzeNodeVisitor(JSParser parser);
    [SuppressMessageAttribute("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
public virtual void Visit(BinaryOperator node);
    private void CombineExpressions(Block node);
    private void CombineWithPreviousExpression(Block node, int ndx);
    private void CombineTwoExpressions(Block node, int ndx);
    private void CombineReturnWithExpression(Block node, int ndx, ReturnNode returnNode);
    private void CombineForNodeWithExpression(Block node, int ndx, ForNode forNode);
    private static void CombineWithPreviousVar(Block node, int ndx, Var previousVar);
    private static bool ContainsReference(AstNode node, JSVariableField targetField);
    private static AstNode FindLastStatement(Block node);
    [SuppressMessageAttribute("Microsoft.Performance", "CA1809:AvoidExcessiveLocals")]
[SuppressMessageAttribute("Microsoft.Maintainability", "CA1506:AvoidExcessiveClassCoupling")]
[SuppressMessageAttribute("Microsoft.Maintainability", "CA1505:AvoidUnmaintainableCode")]
[SuppressMessageAttribute("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
public virtual void Visit(Block node);
    private static bool LabelMatchesParent(string label, AstNode parentNode);
    private static IfNode IsIfReturnExpr(AstNode node, AstNode& condition, AstNode& matchExpression);
    private static int PreviousStatementIndex(Block node, AstNode child);
    public virtual void Visit(Break node);
    [SuppressMessageAttribute("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
public virtual void Visit(CallNode node);
    private void Optimize(Conditional node);
    public virtual void Visit(Conditional node);
    public virtual void Visit(ConditionalCompilationOn node);
    private static bool StringSourceIsNotInlineSafe(string source);
    public virtual void Visit(ConstantWrapper node);
    public virtual void Visit(ConstStatement node);
    public virtual void Visit(ContinueNode node);
    public virtual void Visit(DoWhile node);
    public virtual void Visit(ForNode node);
    public virtual void Visit(ForIn node);
    [SuppressMessageAttribute("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
public virtual void Visit(FunctionObject node);
    [SuppressMessageAttribute("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
public virtual void Visit(IfNode node);
    private void IfConditionExpressionToExpression(IfNode ifNode, AstNode expression);
    public virtual void Visit(Lookup node);
    public virtual void Visit(Member node);
    public virtual void Visit(ObjectLiteral node);
    private static string GetPropertyType(FunctionObject funcObj);
    public virtual void Visit(ObjectLiteralField node);
    public virtual void Visit(RegExpLiteral node);
    public virtual void Visit(ReturnNode node);
    [SuppressMessageAttribute("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
public virtual void Visit(Switch node);
    public virtual void Visit(TryNode node);
    public virtual void Visit(UnaryOperator node);
    public virtual void Visit(Var node);
    public virtual void Visit(VariableDeclaration node);
    public virtual void Visit(WhileNode node);
    public virtual void Visit(WithNode node);
    private static string GuessAtName(AstNode node);
    private static bool AreAssignmentsInVar(BinaryOperator binaryOp, Var varStatement);
    private static void ConvertAssignmentsToVarDecls(BinaryOperator binaryOp, List`1<VariableDeclaration> varDecls, JSParser parser);
    private static void StripDebugStatements(Block node);
    private static bool VarDeclExists(Var node, int ndx, string name);
    private static void DeleteNoInits(Var node, int min, string name);
    private UnaryOperator CreateVoidNode();
    [CompilerGeneratedAttribute]
private static bool <Visit>b__1a(JSVariableField v);
    [CompilerGeneratedAttribute]
private static bool <Visit>b__1b(JSVariableField v);
    [CompilerGeneratedAttribute]
private static bool <Visit>b__23(JSVariableField v);
    [CompilerGeneratedAttribute]
private static bool <Visit>b__24(JSVariableField v);
    [CompilerGeneratedAttribute]
private static bool <Visit>b__27(JSVariableField v);
    [CompilerGeneratedAttribute]
private static bool <Visit>b__28(JSVariableField v);
    [CompilerGeneratedAttribute]
private static string <Visit>b__2b(ParameterDeclaration p);
    [CompilerGeneratedAttribute]
private static string <Visit>b__2c(ParameterDeclaration p);
    [CompilerGeneratedAttribute]
private static bool <Visit>b__36(JSVariableField v);
    [CompilerGeneratedAttribute]
private static bool <Visit>b__37(JSVariableField v);
}
public class Microsoft.Ajax.Utilities.ArrayLiteral : Expression {
    private AstNodeList m_elements;
    [CompilerGeneratedAttribute]
private bool <MayHaveIssues>k__BackingField;
    public AstNodeList Elements { get; public set; }
    public bool MayHaveIssues { get; public set; }
    public IEnumerable`1<AstNode> Children { get; }
    public bool IsConstant { get; }
    public ArrayLiteral(Context context, JSParser parser);
    public AstNodeList get_Elements();
    public void set_Elements(AstNodeList value);
    [CompilerGeneratedAttribute]
public bool get_MayHaveIssues();
    [CompilerGeneratedAttribute]
public void set_MayHaveIssues(bool value);
    public virtual IEnumerable`1<AstNode> get_Children();
    public virtual void Accept(IVisitor visitor);
    public virtual bool ReplaceChild(AstNode oldNode, AstNode newNode);
    public virtual bool get_IsConstant();
    [CompilerGeneratedAttribute]
private AstNode <set_Elements>b__4(AstNodeList n);
    [CompilerGeneratedAttribute]
private AstNode <set_Elements>b__5(AstNodeList n);
}
public class Microsoft.Ajax.Utilities.AspNetBlockNode : AstNode {
    [CompilerGeneratedAttribute]
private bool <IsTerminatedByExplicitSemicolon>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AspNetBlockText>k__BackingField;
    public bool IsTerminatedByExplicitSemicolon { get; public set; }
    public string AspNetBlockText { get; public set; }
    internal bool RequiresSeparator { get; }
    public AspNetBlockNode(Context context, JSParser parser);
    [CompilerGeneratedAttribute]
public bool get_IsTerminatedByExplicitSemicolon();
    [CompilerGeneratedAttribute]
public void set_IsTerminatedByExplicitSemicolon(bool value);
    [CompilerGeneratedAttribute]
public string get_AspNetBlockText();
    [CompilerGeneratedAttribute]
public void set_AspNetBlockText(string value);
    public virtual void Accept(IVisitor visitor);
    internal virtual bool get_RequiresSeparator();
}
public abstract class Microsoft.Ajax.Utilities.AstNode : object {
    private static IEnumerable`1<AstNode> s_emptyChildrenCollection;
    private Context m_terminatingContext;
    [CompilerGeneratedAttribute]
private AstNode <Parent>k__BackingField;
    [CompilerGeneratedAttribute]
private Context <Context>k__BackingField;
    [CompilerGeneratedAttribute]
private JSParser <Parser>k__BackingField;
    [CompilerGeneratedAttribute]
private long <Index>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HideFromOutput>k__BackingField;
    public AstNode Parent { get; public set; }
    public Context Context { get; public set; }
    public JSParser Parser { get; private set; }
    public Context TerminatingContext { get; public set; }
    public bool IsExpression { get; }
    public bool IsConstant { get; }
    public long Index { get; public set; }
    internal bool RequiresSeparator { get; }
    internal bool IsDebuggerStatement { get; }
    public OperatorPrecedence Precedence { get; }
    public bool HideFromOutput { get; public set; }
    public IEnumerable`1<AstNode> Children { get; }
    public bool IsWindowLookup { get; }
    public AstNode LeftHandSide { get; }
    public ActivationObject EnclosingScope { get; }
    public bool ContainsInOperator { get; }
    protected AstNode(Context context, JSParser parser);
    private static AstNode();
    [CompilerGeneratedAttribute]
public sealed virtual AstNode get_Parent();
    [CompilerGeneratedAttribute]
public void set_Parent(AstNode value);
    [CompilerGeneratedAttribute]
public Context get_Context();
    [CompilerGeneratedAttribute]
public void set_Context(Context value);
    [CompilerGeneratedAttribute]
public JSParser get_Parser();
    [CompilerGeneratedAttribute]
private void set_Parser(JSParser value);
    public virtual Context get_TerminatingContext();
    public virtual void set_TerminatingContext(Context value);
    public virtual bool get_IsExpression();
    public virtual bool get_IsConstant();
    [CompilerGeneratedAttribute]
public sealed virtual long get_Index();
    [CompilerGeneratedAttribute]
public void set_Index(long value);
    public virtual string ToCode();
    public static Block ForceToBlock(AstNode node);
    internal virtual string GetFunctionGuess(AstNode target);
    internal virtual bool EncloseBlock(EncloseBlockType type);
    internal virtual bool get_RequiresSeparator();
    internal virtual bool get_IsDebuggerStatement();
    public virtual OperatorPrecedence get_Precedence();
    [CompilerGeneratedAttribute]
public bool get_HideFromOutput();
    [CompilerGeneratedAttribute]
public void set_HideFromOutput(bool value);
    public virtual PrimitiveType FindPrimitiveType();
    public virtual IEnumerable`1<AstNode> get_Children();
    internal static IEnumerable`1<AstNode> EnumerateNonNullNodes(IList`1<T> nodes);
    internal static IEnumerable`1<AstNode> EnumerateNonNullNodes(AstNode n1, AstNode n2, AstNode n3, AstNode n4);
    public bool get_IsWindowLookup();
    public virtual bool ReplaceChild(AstNode oldNode, AstNode newNode);
    public virtual AstNode get_LeftHandSide();
    public virtual ActivationObject get_EnclosingScope();
    public virtual bool IsEquivalentTo(AstNode otherNode);
    public abstract virtual void Accept(IVisitor visitor);
    public virtual bool get_ContainsInOperator();
    public void UpdateWith(Context context);
}
[SuppressMessageAttribute("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
[DefaultMemberAttribute("Item")]
public class Microsoft.Ajax.Utilities.AstNodeList : AstNode {
    private List`1<AstNode> m_list;
    public Context TerminatingContext { get; }
    public OperatorPrecedence Precedence { get; }
    public int Count { get; }
    public IEnumerable`1<AstNode> Children { get; }
    public AstNode Item { get; public set; }
    public string SingleConstantArgument { get; }
    public bool IsConstant { get; }
    public AstNodeList(Context context, JSParser parser);
    public virtual Context get_TerminatingContext();
    public virtual void Accept(IVisitor visitor);
    public virtual OperatorPrecedence get_Precedence();
    public int get_Count();
    public virtual IEnumerable`1<AstNode> get_Children();
    public virtual bool ReplaceChild(AstNode oldNode, AstNode newNode);
    public virtual bool IsEquivalentTo(AstNode otherNode);
    internal AstNodeList Append(AstNode node);
    public AstNodeList Insert(int position, AstNode node);
    internal void RemoveAt(int position);
    public AstNode get_Item(int index);
    public void set_Item(int index, AstNode value);
    public bool IsSingleConstantArgument(string argumentValue);
    public string get_SingleConstantArgument();
    public virtual bool get_IsConstant();
    public virtual string ToString();
    public sealed virtual IEnumerator`1<AstNode> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    [CompilerGeneratedAttribute]
private AstNode <ReplaceChild>b__0(AstNode n);
    [CompilerGeneratedAttribute]
private AstNode <RemoveAt>b__2(AstNode n);
    [CompilerGeneratedAttribute]
private AstNode <set_Item>b__3(AstNode n);
}
public class Microsoft.Ajax.Utilities.BinaryOperator : Expression {
    private AstNode m_operand1;
    private AstNode m_operand2;
    [CompilerGeneratedAttribute]
private JSToken <OperatorToken>k__BackingField;
    [CompilerGeneratedAttribute]
private Context <OperatorContext>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`2<AstNode, Context> CS$<>9__CachedAnonymousMethodDelegate5;
    [CompilerGeneratedAttribute]
private static Func`2<AstNode, bool> CS$<>9__CachedAnonymousMethodDelegate8;
    [CompilerGeneratedAttribute]
private static Func`2<AstNode, bool> CS$<>9__CachedAnonymousMethodDelegate9;
    public AstNode Operand1 { get; public set; }
    public AstNode Operand2 { get; public set; }
    public JSToken OperatorToken { get; public set; }
    public Context OperatorContext { get; public set; }
    public Context TerminatingContext { get; }
    public OperatorPrecedence Precedence { get; }
    public IEnumerable`1<AstNode> Children { get; }
    public AstNode LeftHandSide { get; }
    public bool IsAssign { get; }
    public bool ContainsInOperator { get; }
    public bool IsConstant { get; }
    public BinaryOperator(Context context, JSParser parser);
    public AstNode get_Operand1();
    public void set_Operand1(AstNode value);
    public AstNode get_Operand2();
    public void set_Operand2(AstNode value);
    [CompilerGeneratedAttribute]
public JSToken get_OperatorToken();
    [CompilerGeneratedAttribute]
public void set_OperatorToken(JSToken value);
    [CompilerGeneratedAttribute]
public Context get_OperatorContext();
    [CompilerGeneratedAttribute]
public void set_OperatorContext(Context value);
    public virtual Context get_TerminatingContext();
    public virtual OperatorPrecedence get_Precedence();
    public virtual PrimitiveType FindPrimitiveType();
    public virtual IEnumerable`1<AstNode> get_Children();
    public virtual void Accept(IVisitor visitor);
    public virtual bool ReplaceChild(AstNode oldNode, AstNode newNode);
    public virtual AstNode get_LeftHandSide();
    public void SwapOperands();
    public virtual bool IsEquivalentTo(AstNode otherNode);
    public bool get_IsAssign();
    internal virtual string GetFunctionGuess(AstNode target);
    public virtual bool get_ContainsInOperator();
    public virtual bool get_IsConstant();
    public virtual string ToString();
    [CompilerGeneratedAttribute]
private AstNode <set_Operand1>b__0(AstNode n);
    [CompilerGeneratedAttribute]
private AstNode <set_Operand1>b__1(AstNode n);
    [CompilerGeneratedAttribute]
private AstNode <set_Operand2>b__2(AstNode n);
    [CompilerGeneratedAttribute]
private AstNode <set_Operand2>b__3(AstNode n);
    [CompilerGeneratedAttribute]
private static Context <get_TerminatingContext>b__4(AstNode n);
    [CompilerGeneratedAttribute]
private static bool <get_IsConstant>b__6(AstNode o);
    [CompilerGeneratedAttribute]
private static bool <get_IsConstant>b__7(AstNode o);
}
[DefaultMemberAttribute("Item")]
public class Microsoft.Ajax.Utilities.Block : AstNode {
    private List`1<AstNode> m_list;
    private BlockScope m_blockScope;
    [CompilerGeneratedAttribute]
private bool <BraceOnNewLine>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ForceBraces>k__BackingField;
    public AstNode Item { get; public set; }
    internal BlockScope BlockScope { get; internal set; }
    public ActivationObject EnclosingScope { get; }
    public bool BraceOnNewLine { get; public set; }
    public Context TerminatingContext { get; }
    public bool ForceBraces { get; public set; }
    internal bool RequiresSeparator { get; }
    internal bool IsDebuggerStatement { get; }
    public bool IsExpression { get; }
    public int Count { get; }
    public IEnumerable`1<AstNode> Children { get; }
    public Block(Context context, JSParser parser);
    public AstNode get_Item(int index);
    public void set_Item(int index, AstNode value);
    internal BlockScope get_BlockScope();
    internal void set_BlockScope(BlockScope value);
    public virtual ActivationObject get_EnclosingScope();
    [CompilerGeneratedAttribute]
public bool get_BraceOnNewLine();
    [CompilerGeneratedAttribute]
public void set_BraceOnNewLine(bool value);
    public virtual Context get_TerminatingContext();
    [CompilerGeneratedAttribute]
public bool get_ForceBraces();
    [CompilerGeneratedAttribute]
public void set_ForceBraces(bool value);
    public virtual void Accept(IVisitor visitor);
    internal virtual bool get_RequiresSeparator();
    internal virtual bool EncloseBlock(EncloseBlockType type);
    internal virtual bool get_IsDebuggerStatement();
    public virtual bool get_IsExpression();
    public int get_Count();
    public virtual IEnumerable`1<AstNode> get_Children();
    public virtual bool ReplaceChild(AstNode oldNode, AstNode newNode);
    public void Append(AstNode element);
    public int IndexOf(AstNode child);
    public void InsertAfter(AstNode after, AstNode item);
    public void Insert(int position, AstNode item);
    public void RemoveLast();
    public void RemoveAt(int index);
    public void InsertRange(int index, IEnumerable`1<AstNode> newItems);
    public void Clear();
    [CompilerGeneratedAttribute]
private AstNode <set_Item>b__0(AstNode n);
    [CompilerGeneratedAttribute]
private AstNode <ReplaceChild>b__1(AstNode n);
    [CompilerGeneratedAttribute]
private AstNode <RemoveAt>b__3(AstNode n);
    [CompilerGeneratedAttribute]
private AstNode <Clear>b__5(AstNode n);
}
public class Microsoft.Ajax.Utilities.BlockScope : ActivationObject {
    private Context m_context;
    public Context Context { get; }
    public BlockScope(ActivationObject parent, Context context, CodeSettings settings);
    public Context get_Context();
    public virtual void DeclareScope();
    public virtual JSVariableField CreateField(string name, object value, FieldAttributes attributes);
}
public enum Microsoft.Ajax.Utilities.BlockStart : Enum {
    public int value__;
    public static BlockStart NewLine;
    public static BlockStart SameLine;
    public static BlockStart UseSource;
}
public class Microsoft.Ajax.Utilities.Break : AstNode {
    [CompilerGeneratedAttribute]
private int <NestLevel>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Label>k__BackingField;
    [CompilerGeneratedAttribute]
private Context <LabelContext>k__BackingField;
    public int NestLevel { get; public set; }
    public string Label { get; public set; }
    public Context LabelContext { get; public set; }
    public Break(Context context, JSParser parser);
    [CompilerGeneratedAttribute]
public int get_NestLevel();
    [CompilerGeneratedAttribute]
public void set_NestLevel(int value);
    [CompilerGeneratedAttribute]
public string get_Label();
    [CompilerGeneratedAttribute]
public void set_Label(string value);
    [CompilerGeneratedAttribute]
public Context get_LabelContext();
    [CompilerGeneratedAttribute]
public void set_LabelContext(Context value);
    public virtual void Accept(IVisitor visitor);
}
public class Microsoft.Ajax.Utilities.CallNode : Expression {
    private AstNode m_function;
    private AstNodeList m_arguments;
    [CompilerGeneratedAttribute]
private bool <IsConstructor>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <InBrackets>k__BackingField;
    public AstNode Function { get; public set; }
    public AstNodeList Arguments { get; public set; }
    public bool IsConstructor { get; public set; }
    public bool InBrackets { get; public set; }
    public OperatorPrecedence Precedence { get; }
    public bool IsExpression { get; }
    public IEnumerable`1<AstNode> Children { get; }
    public AstNode LeftHandSide { get; }
    internal bool IsDebuggerStatement { get; }
    public CallNode(Context context, JSParser parser);
    public AstNode get_Function();
    public void set_Function(AstNode value);
    public AstNodeList get_Arguments();
    public void set_Arguments(AstNodeList value);
    [CompilerGeneratedAttribute]
public bool get_IsConstructor();
    [CompilerGeneratedAttribute]
public void set_IsConstructor(bool value);
    [CompilerGeneratedAttribute]
public bool get_InBrackets();
    [CompilerGeneratedAttribute]
public void set_InBrackets(bool value);
    public virtual OperatorPrecedence get_Precedence();
    public virtual bool get_IsExpression();
    public virtual void Accept(IVisitor visitor);
    public virtual IEnumerable`1<AstNode> get_Children();
    public virtual bool ReplaceChild(AstNode oldNode, AstNode newNode);
    public virtual AstNode get_LeftHandSide();
    public virtual bool IsEquivalentTo(AstNode otherNode);
    internal virtual bool get_IsDebuggerStatement();
    [CompilerGeneratedAttribute]
private AstNode <set_Function>b__0(AstNode n);
    [CompilerGeneratedAttribute]
private AstNode <set_Function>b__1(AstNode n);
    [CompilerGeneratedAttribute]
private AstNode <set_Arguments>b__2(AstNodeList n);
    [CompilerGeneratedAttribute]
private AstNode <set_Arguments>b__3(AstNodeList n);
}
public class Microsoft.Ajax.Utilities.CatchScope : BlockScope {
    [CompilerGeneratedAttribute]
private ParameterDeclaration <CatchParameter>k__BackingField;
    public ParameterDeclaration CatchParameter { get; private set; }
    internal CatchScope(ActivationObject parent, Context catchContext, CodeSettings settings, ParameterDeclaration catchParameter);
    [CompilerGeneratedAttribute]
public ParameterDeclaration get_CatchParameter();
    [CompilerGeneratedAttribute]
private void set_CatchParameter(ParameterDeclaration value);
    public virtual JSVariableField CreateField(string name, object value, FieldAttributes attributes);
}
public class Microsoft.Ajax.Utilities.CodeSettings : CommonSettings {
    private bool m_minify;
    private Dictionary`2<string, string> m_identifierReplacementMap;
    private HashSet`1<string> m_noRenameSet;
    private HashSet`1<string> m_knownGlobals;
    private HashSet`1<string> m_debugLookups;
    [CompilerGeneratedAttribute]
private bool <AlwaysEscapeNonAscii>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CollapseToLiteral>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ConstStatementsMozilla>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ErrorIfNotInlineSafe>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EvalLiteralExpressions>k__BackingField;
    [CompilerGeneratedAttribute]
private EvalTreatment <EvalTreatment>k__BackingField;
    [CompilerGeneratedAttribute]
private JavaScriptFormat <Format>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IgnoreConditionalCompilation>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IgnorePreprocessorDefines>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <InlineSafeStrings>k__BackingField;
    [CompilerGeneratedAttribute]
private LocalRenaming <LocalRenaming>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <MacSafariQuirks>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ManualRenamesProperties>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PreprocessOnly>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PreserveFunctionNames>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PreserveImportantComments>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <QuoteObjectLiteralProperties>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ReorderScopeDeclarations>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RemoveFunctionExpressionNames>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RemoveUnneededCode>k__BackingField;
    [CompilerGeneratedAttribute]
private JavaScriptSourceMode <SourceMode>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <StrictMode>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <StripDebugStatements>k__BackingField;
    [CompilerGeneratedAttribute]
private ISourceMap <SymbolsMap>k__BackingField;
    public bool HasRenamePairs { get; }
    public string RenamePairs { get; public set; }
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("This property is deprecated; use NoAutoRenameCollection instead")]
public ReadOnlyCollection`1<string> NoAutoRenameIdentifiers { get; }
    public IEnumerable`1<string> NoAutoRenameCollection { get; }
    public string NoAutoRenameList { get; public set; }
    [ObsoleteAttribute("This property is deprecated; use KnownGlobalsCollection instead")]
[EditorBrowsableAttribute("1")]
public ReadOnlyCollection`1<string> KnownGlobalNames { get; }
    public IEnumerable`1<string> KnownGlobalCollection { get; }
    public string KnownGlobalNamesList { get; public set; }
    [ObsoleteAttribute("This property is deprecated; use DebugLookupCollection instead")]
[EditorBrowsableAttribute("1")]
public ReadOnlyCollection`1<string> DebugLookups { get; }
    public IEnumerable`1<string> DebugLookupCollection { get; }
    public string DebugLookupList { get; public set; }
    public bool AlwaysEscapeNonAscii { get; public set; }
    public bool CollapseToLiteral { get; public set; }
    public bool ConstStatementsMozilla { get; public set; }
    public bool ErrorIfNotInlineSafe { get; public set; }
    [ObsoleteAttribute("This property is deprecated; use EvalTreatment instead")]
[EditorBrowsableAttribute("1")]
public bool EvalsAreSafe { get; public set; }
    [SuppressMessageAttribute("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
public bool EvalLiteralExpressions { get; public set; }
    [SuppressMessageAttribute("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
public EvalTreatment EvalTreatment { get; public set; }
    public JavaScriptFormat Format { get; public set; }
    public bool IgnoreConditionalCompilation { get; public set; }
    public bool IgnorePreprocessorDefines { get; public set; }
    public bool InlineSafeStrings { get; public set; }
    public LocalRenaming LocalRenaming { get; public set; }
    public bool MacSafariQuirks { get; public set; }
    public bool MinifyCode { get; public set; }
    public bool ManualRenamesProperties { get; public set; }
    public bool PreprocessOnly { get; public set; }
    public bool PreserveFunctionNames { get; public set; }
    public bool PreserveImportantComments { get; public set; }
    public bool QuoteObjectLiteralProperties { get; public set; }
    public bool ReorderScopeDeclarations { get; public set; }
    public bool RemoveFunctionExpressionNames { get; public set; }
    public bool RemoveUnneededCode { get; public set; }
    public JavaScriptSourceMode SourceMode { get; public set; }
    public bool StrictMode { get; public set; }
    public bool StripDebugStatements { get; public set; }
    public ISourceMap SymbolsMap { get; public set; }
    public CodeSettings Clone();
    public bool AddRenamePair(string sourceName, string newName);
    public void ClearRenamePairs();
    public bool get_HasRenamePairs();
    public string GetNewName(string sourceName);
    public string get_RenamePairs();
    public void set_RenamePairs(string value);
    public ReadOnlyCollection`1<string> get_NoAutoRenameIdentifiers();
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("This property is deprecated; use SetnoAutoRenames instead")]
public int SetNoAutoRename(String[] noRenameNames);
    public IEnumerable`1<string> get_NoAutoRenameCollection();
    public int SetNoAutoRenames(IEnumerable`1<string> noRenameNames);
    public bool AddNoAutoRename(string noRename);
    public string get_NoAutoRenameList();
    public void set_NoAutoRenameList(string value);
    public ReadOnlyCollection`1<string> get_KnownGlobalNames();
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("This property is deprecated; use SetKnownGlobalIdentifiers instead")]
public int SetKnownGlobalNames(String[] globalArray);
    public IEnumerable`1<string> get_KnownGlobalCollection();
    public int SetKnownGlobalIdentifiers(IEnumerable`1<string> globalArray);
    public bool AddKnownGlobal(string identifier);
    public string get_KnownGlobalNamesList();
    public void set_KnownGlobalNamesList(string value);
    public ReadOnlyCollection`1<string> get_DebugLookups();
    public IEnumerable`1<string> get_DebugLookupCollection();
    [ObsoleteAttribute("This property is deprecated; use SetDebugNamespaces instead")]
[EditorBrowsableAttribute("1")]
public int SetDebugLookups(String[] debugLookups);
    public int SetDebugNamespaces(IEnumerable`1<string> debugLookups);
    public bool AddDebugLookup(string debugNamespace);
    public string get_DebugLookupList();
    public void set_DebugLookupList(string value);
    [CompilerGeneratedAttribute]
public bool get_AlwaysEscapeNonAscii();
    [CompilerGeneratedAttribute]
public void set_AlwaysEscapeNonAscii(bool value);
    [CompilerGeneratedAttribute]
public bool get_CollapseToLiteral();
    [CompilerGeneratedAttribute]
public void set_CollapseToLiteral(bool value);
    [CompilerGeneratedAttribute]
public bool get_ConstStatementsMozilla();
    [CompilerGeneratedAttribute]
public void set_ConstStatementsMozilla(bool value);
    [CompilerGeneratedAttribute]
public bool get_ErrorIfNotInlineSafe();
    [CompilerGeneratedAttribute]
public void set_ErrorIfNotInlineSafe(bool value);
    public bool get_EvalsAreSafe();
    public void set_EvalsAreSafe(bool value);
    [CompilerGeneratedAttribute]
public bool get_EvalLiteralExpressions();
    [CompilerGeneratedAttribute]
public void set_EvalLiteralExpressions(bool value);
    [CompilerGeneratedAttribute]
public EvalTreatment get_EvalTreatment();
    [CompilerGeneratedAttribute]
public void set_EvalTreatment(EvalTreatment value);
    [CompilerGeneratedAttribute]
public JavaScriptFormat get_Format();
    [CompilerGeneratedAttribute]
public void set_Format(JavaScriptFormat value);
    [CompilerGeneratedAttribute]
public bool get_IgnoreConditionalCompilation();
    [CompilerGeneratedAttribute]
public void set_IgnoreConditionalCompilation(bool value);
    [CompilerGeneratedAttribute]
public bool get_IgnorePreprocessorDefines();
    [CompilerGeneratedAttribute]
public void set_IgnorePreprocessorDefines(bool value);
    [CompilerGeneratedAttribute]
public bool get_InlineSafeStrings();
    [CompilerGeneratedAttribute]
public void set_InlineSafeStrings(bool value);
    [CompilerGeneratedAttribute]
public LocalRenaming get_LocalRenaming();
    [CompilerGeneratedAttribute]
public void set_LocalRenaming(LocalRenaming value);
    [CompilerGeneratedAttribute]
public bool get_MacSafariQuirks();
    [CompilerGeneratedAttribute]
public void set_MacSafariQuirks(bool value);
    public bool get_MinifyCode();
    public void set_MinifyCode(bool value);
    [CompilerGeneratedAttribute]
public bool get_ManualRenamesProperties();
    [CompilerGeneratedAttribute]
public void set_ManualRenamesProperties(bool value);
    [CompilerGeneratedAttribute]
public bool get_PreprocessOnly();
    [CompilerGeneratedAttribute]
public void set_PreprocessOnly(bool value);
    [CompilerGeneratedAttribute]
public bool get_PreserveFunctionNames();
    [CompilerGeneratedAttribute]
public void set_PreserveFunctionNames(bool value);
    [CompilerGeneratedAttribute]
public bool get_PreserveImportantComments();
    [CompilerGeneratedAttribute]
public void set_PreserveImportantComments(bool value);
    [CompilerGeneratedAttribute]
public bool get_QuoteObjectLiteralProperties();
    [CompilerGeneratedAttribute]
public void set_QuoteObjectLiteralProperties(bool value);
    [CompilerGeneratedAttribute]
public bool get_ReorderScopeDeclarations();
    [CompilerGeneratedAttribute]
public void set_ReorderScopeDeclarations(bool value);
    [CompilerGeneratedAttribute]
public bool get_RemoveFunctionExpressionNames();
    [CompilerGeneratedAttribute]
public void set_RemoveFunctionExpressionNames(bool value);
    [CompilerGeneratedAttribute]
public bool get_RemoveUnneededCode();
    [CompilerGeneratedAttribute]
public void set_RemoveUnneededCode(bool value);
    [CompilerGeneratedAttribute]
public JavaScriptSourceMode get_SourceMode();
    [CompilerGeneratedAttribute]
public void set_SourceMode(JavaScriptSourceMode value);
    [CompilerGeneratedAttribute]
public bool get_StrictMode();
    [CompilerGeneratedAttribute]
public void set_StrictMode(bool value);
    [CompilerGeneratedAttribute]
public bool get_StripDebugStatements();
    [CompilerGeneratedAttribute]
public void set_StripDebugStatements(bool value);
    [CompilerGeneratedAttribute]
public ISourceMap get_SymbolsMap();
    [CompilerGeneratedAttribute]
public void set_SymbolsMap(ISourceMap value);
    public bool IsModificationAllowed(TreeModifications modification);
}
public class Microsoft.Ajax.Utilities.ColorSlice : object {
    private ColorName[] _colorArray;
    public static Dictionary`2<string, string> NameShorterThanHex { get; }
    public static Dictionary`2<string, string> StrictNameShorterThanHex { get; }
    public static Dictionary`2<string, string> HexShorterThanName { get; }
    public static Dictionary`2<string, string> StrictHexShorterThanNameAndAllNonStrict { get; }
    public static Dictionary`2<string, string> AllColorNames { get; }
    public static Dictionary`2<string, string> get_NameShorterThanHex();
    public static Dictionary`2<string, string> get_StrictNameShorterThanHex();
    public static Dictionary`2<string, string> get_HexShorterThanName();
    public static Dictionary`2<string, string> get_StrictHexShorterThanNameAndAllNonStrict();
    public static Dictionary`2<string, string> get_AllColorNames();
}
public class Microsoft.Ajax.Utilities.CommaOperator : BinaryOperator {
    public CommaOperator(Context context, JSParser parser);
    public static AstNode CombineWithComma(Context context, JSParser parser, AstNode operand1, AstNode operand2);
}
public class Microsoft.Ajax.Utilities.CommonSettings : object {
    private int m_indentLevel;
    [CompilerGeneratedAttribute]
private bool <AllowEmbeddedAspNetBlocks>k__BackingField;
    [CompilerGeneratedAttribute]
private BlockStart <BlocksStartOnSameLine>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IgnoreAllErrors>k__BackingField;
    [CompilerGeneratedAttribute]
private int <IndentSize>k__BackingField;
    [CompilerGeneratedAttribute]
private int <LineBreakThreshold>k__BackingField;
    [CompilerGeneratedAttribute]
private OutputMode <OutputMode>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <TermSemicolons>k__BackingField;
    [CompilerGeneratedAttribute]
private long <KillSwitch>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<string> <IgnoreErrorCollection>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <PreprocessorValues>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<ResourceStrings> <ResourceStrings>k__BackingField;
    public bool AllowEmbeddedAspNetBlocks { get; public set; }
    public BlockStart BlocksStartOnSameLine { get; public set; }
    public bool IgnoreAllErrors { get; public set; }
    public int IndentSize { get; public set; }
    public int LineBreakThreshold { get; public set; }
    public OutputMode OutputMode { get; public set; }
    public bool TermSemicolons { get; public set; }
    public long KillSwitch { get; public set; }
    public string LineTerminator { get; }
    internal string TabSpaces { get; }
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("Use IgnoreErrorCollection instead")]
public ReadOnlyCollection`1<string> IgnoreErrors { get; }
    public ICollection`1<string> IgnoreErrorCollection { get; private set; }
    public string IgnoreErrorList { get; public set; }
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("Use PreprocessorValues instead")]
public ReadOnlyCollection`1<string> PreprocessorDefines { get; }
    public IDictionary`2<string, string> PreprocessorValues { get; private set; }
    public string PreprocessorDefineList { get; public set; }
    public IList`1<ResourceStrings> ResourceStrings { get; private set; }
    [CompilerGeneratedAttribute]
public bool get_AllowEmbeddedAspNetBlocks();
    [CompilerGeneratedAttribute]
public void set_AllowEmbeddedAspNetBlocks(bool value);
    [CompilerGeneratedAttribute]
public BlockStart get_BlocksStartOnSameLine();
    [CompilerGeneratedAttribute]
public void set_BlocksStartOnSameLine(BlockStart value);
    [CompilerGeneratedAttribute]
public bool get_IgnoreAllErrors();
    [CompilerGeneratedAttribute]
public void set_IgnoreAllErrors(bool value);
    [CompilerGeneratedAttribute]
public int get_IndentSize();
    [CompilerGeneratedAttribute]
public void set_IndentSize(int value);
    [CompilerGeneratedAttribute]
public int get_LineBreakThreshold();
    [CompilerGeneratedAttribute]
public void set_LineBreakThreshold(int value);
    [CompilerGeneratedAttribute]
public OutputMode get_OutputMode();
    [CompilerGeneratedAttribute]
public void set_OutputMode(OutputMode value);
    [CompilerGeneratedAttribute]
public bool get_TermSemicolons();
    [CompilerGeneratedAttribute]
public void set_TermSemicolons(bool value);
    [CompilerGeneratedAttribute]
public long get_KillSwitch();
    [CompilerGeneratedAttribute]
public void set_KillSwitch(long value);
    public string get_LineTerminator();
    internal void Indent();
    internal void Unindent();
    internal string get_TabSpaces();
    public ReadOnlyCollection`1<string> get_IgnoreErrors();
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("Use SetIgnoreErrors passing in an IEnumerable<string> instead instead")]
public int SetIgnoreErrors(String[] ignoreErrors);
    [CompilerGeneratedAttribute]
public ICollection`1<string> get_IgnoreErrorCollection();
    [CompilerGeneratedAttribute]
private void set_IgnoreErrorCollection(ICollection`1<string> value);
    public int SetIgnoreErrors(IEnumerable`1<string> ignoreErrors);
    public string get_IgnoreErrorList();
    public void set_IgnoreErrorList(string value);
    public ReadOnlyCollection`1<string> get_PreprocessorDefines();
    [CompilerGeneratedAttribute]
public IDictionary`2<string, string> get_PreprocessorValues();
    [CompilerGeneratedAttribute]
private void set_PreprocessorValues(IDictionary`2<string, string> value);
    public int SetPreprocessorDefines(String[] definedNames);
    public int SetPreprocessorValues(IDictionary`2<string, string> defines);
    public string get_PreprocessorDefineList();
    public void set_PreprocessorDefineList(string value);
    [CompilerGeneratedAttribute]
public IList`1<ResourceStrings> get_ResourceStrings();
    [CompilerGeneratedAttribute]
private void set_ResourceStrings(IList`1<ResourceStrings> value);
    public void AddResourceStrings(ResourceStrings resourceStrings);
    public void AddResourceStrings(IEnumerable`1<ResourceStrings> collection);
    public void ClearResourceStrings();
    public void RemoveResourceStrings(ResourceStrings resourceStrings);
}
public class Microsoft.Ajax.Utilities.Conditional : Expression {
    private AstNode m_condition;
    private AstNode m_trueExpression;
    private AstNode m_falseExpression;
    [CompilerGeneratedAttribute]
private Context <QuestionContext>k__BackingField;
    [CompilerGeneratedAttribute]
private Context <ColonContext>k__BackingField;
    public AstNode Condition { get; public set; }
    public AstNode TrueExpression { get; public set; }
    public AstNode FalseExpression { get; public set; }
    public Context QuestionContext { get; public set; }
    public Context ColonContext { get; public set; }
    public OperatorPrecedence Precedence { get; }
    public IEnumerable`1<AstNode> Children { get; }
    public AstNode LeftHandSide { get; }
    public Conditional(Context context, JSParser parser);
    public AstNode get_Condition();
    public void set_Condition(AstNode value);
    public AstNode get_TrueExpression();
    public void set_TrueExpression(AstNode value);
    public AstNode get_FalseExpression();
    public void set_FalseExpression(AstNode value);
    [CompilerGeneratedAttribute]
public Context get_QuestionContext();
    [CompilerGeneratedAttribute]
public void set_QuestionContext(Context value);
    [CompilerGeneratedAttribute]
public Context get_ColonContext();
    [CompilerGeneratedAttribute]
public void set_ColonContext(Context value);
    public virtual OperatorPrecedence get_Precedence();
    public void SwapBranches();
    public virtual PrimitiveType FindPrimitiveType();
    public virtual bool IsEquivalentTo(AstNode otherNode);
    public virtual IEnumerable`1<AstNode> get_Children();
    public virtual void Accept(IVisitor visitor);
    public virtual bool ReplaceChild(AstNode oldNode, AstNode newNode);
    public virtual AstNode get_LeftHandSide();
    [CompilerGeneratedAttribute]
private AstNode <set_Condition>b__0(AstNode n);
    [CompilerGeneratedAttribute]
private AstNode <set_Condition>b__1(AstNode n);
    [CompilerGeneratedAttribute]
private AstNode <set_TrueExpression>b__2(AstNode n);
    [CompilerGeneratedAttribute]
private AstNode <set_TrueExpression>b__3(AstNode n);
    [CompilerGeneratedAttribute]
private AstNode <set_FalseExpression>b__4(AstNode n);
    [CompilerGeneratedAttribute]
private AstNode <set_FalseExpression>b__5(AstNode n);
}
public class Microsoft.Ajax.Utilities.ConditionalCompilationComment : AstNode {
    private Block m_statements;
    public Block Statements { get; public set; }
    internal bool RequiresSeparator { get; }
    public IEnumerable`1<AstNode> Children { get; }
    public ConditionalCompilationComment(Context context, JSParser parser);
    public Block get_Statements();
    public void set_Statements(Block value);
    internal virtual bool get_RequiresSeparator();
    public virtual void Accept(IVisitor visitor);
    public void Append(AstNode statement);
    public virtual IEnumerable`1<AstNode> get_Children();
    public virtual bool ReplaceChild(AstNode oldNode, AstNode newNode);
    [CompilerGeneratedAttribute]
private AstNode <set_Statements>b__0(Block n);
    [CompilerGeneratedAttribute]
private AstNode <set_Statements>b__1(Block n);
}
public class Microsoft.Ajax.Utilities.ConditionalCompilationElse : ConditionalCompilationStatement {
    public ConditionalCompilationElse(Context context, JSParser parser);
    public virtual void Accept(IVisitor visitor);
}
public class Microsoft.Ajax.Utilities.ConditionalCompilationElseIf : ConditionalCompilationStatement {
    private AstNode m_condition;
    public AstNode Condition { get; public set; }
    public IEnumerable`1<AstNode> Children { get; }
    public ConditionalCompilationElseIf(Context context, JSParser parser);
    public AstNode get_Condition();
    public void set_Condition(AstNode value);
    public virtual IEnumerable`1<AstNode> get_Children();
    public virtual void Accept(IVisitor visitor);
    public virtual bool ReplaceChild(AstNode oldNode, AstNode newNode);
    [CompilerGeneratedAttribute]
private AstNode <set_Condition>b__0(AstNode n);
    [CompilerGeneratedAttribute]
private AstNode <set_Condition>b__1(AstNode n);
}
public class Microsoft.Ajax.Utilities.ConditionalCompilationEnd : ConditionalCompilationStatement {
    public ConditionalCompilationEnd(Context context, JSParser parser);
    public virtual void Accept(IVisitor visitor);
}
public class Microsoft.Ajax.Utilities.ConditionalCompilationIf : ConditionalCompilationStatement {
    private AstNode m_condition;
    public AstNode Condition { get; public set; }
    public IEnumerable`1<AstNode> Children { get; }
    public ConditionalCompilationIf(Context context, JSParser parser);
    public AstNode get_Condition();
    public void set_Condition(AstNode value);
    public virtual IEnumerable`1<AstNode> get_Children();
    public virtual void Accept(IVisitor visitor);
    public virtual bool ReplaceChild(AstNode oldNode, AstNode newNode);
    [CompilerGeneratedAttribute]
private AstNode <set_Condition>b__0(AstNode n);
    [CompilerGeneratedAttribute]
private AstNode <set_Condition>b__1(AstNode n);
}
public class Microsoft.Ajax.Utilities.ConditionalCompilationOn : ConditionalCompilationStatement {
    public ConditionalCompilationOn(Context context, JSParser parser);
    public virtual void Accept(IVisitor visitor);
}
public class Microsoft.Ajax.Utilities.ConditionalCompilationSet : ConditionalCompilationStatement {
    private AstNode m_value;
    [CompilerGeneratedAttribute]
private string <VariableName>k__BackingField;
    public AstNode Value { get; public set; }
    public string VariableName { get; public set; }
    public IEnumerable`1<AstNode> Children { get; }
    public ConditionalCompilationSet(Context context, JSParser parser);
    public AstNode get_Value();
    public void set_Value(AstNode value);
    [CompilerGeneratedAttribute]
public string get_VariableName();
    [CompilerGeneratedAttribute]
public void set_VariableName(string value);
    public virtual IEnumerable`1<AstNode> get_Children();
    public virtual void Accept(IVisitor visitor);
    public virtual bool ReplaceChild(AstNode oldNode, AstNode newNode);
    [CompilerGeneratedAttribute]
private AstNode <set_Value>b__0(AstNode n);
    [CompilerGeneratedAttribute]
private AstNode <set_Value>b__1(AstNode n);
}
public abstract class Microsoft.Ajax.Utilities.ConditionalCompilationStatement : AstNode {
    internal bool RequiresSeparator { get; }
    protected ConditionalCompilationStatement(Context context, JSParser parser);
    internal virtual bool get_RequiresSeparator();
}
public class Microsoft.Ajax.Utilities.ConstantWrapper : Expression {
    private static Regex s_hexNumberFormat;
    private static Regex s_aspNetSubstitution;
    [CompilerGeneratedAttribute]
private bool <MayHaveIssues>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private PrimitiveType <PrimitiveType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsParameterToRegExp>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`2<string, bool> CS$<>9__CachedAnonymousMethodDelegate2;
    [CompilerGeneratedAttribute]
private static Func`2<char, bool> CS$<>9__CachedAnonymousMethodDelegate3;
    public bool MayHaveIssues { get; public set; }
    public object Value { get; public set; }
    public PrimitiveType PrimitiveType { get; public set; }
    public bool IsConstant { get; }
    public bool IsNumericLiteral { get; }
    public bool IsFiniteNumericLiteral { get; }
    public bool IsIntegerLiteral { get; }
    public bool IsExactInteger { get; }
    public bool IsNaN { get; }
    public bool IsInfinity { get; }
    public bool IsZero { get; }
    public bool IsBooleanLiteral { get; }
    public bool IsStringLiteral { get; }
    public bool IsParameterToRegExp { get; public set; }
    public bool IsSpecialNumeric { get; }
    public bool IsOtherDecimal { get; }
    public bool StringContainsAspNetReplacement { get; }
    public bool IsOkayToCombine { get; }
    public bool IsNotOneOrPositiveZero { get; }
    public bool IsNegativeZero { get; }
    public ConstantWrapper(object value, PrimitiveType primitiveType, Context context, JSParser parser);
    private static ConstantWrapper();
    [CompilerGeneratedAttribute]
public bool get_MayHaveIssues();
    [CompilerGeneratedAttribute]
public void set_MayHaveIssues(bool value);
    [CompilerGeneratedAttribute]
public object get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(object value);
    [CompilerGeneratedAttribute]
public PrimitiveType get_PrimitiveType();
    [CompilerGeneratedAttribute]
public void set_PrimitiveType(PrimitiveType value);
    public virtual bool get_IsConstant();
    public bool get_IsNumericLiteral();
    public bool get_IsFiniteNumericLiteral();
    public bool get_IsIntegerLiteral();
    public bool get_IsExactInteger();
    public bool get_IsNaN();
    public bool get_IsInfinity();
    public bool get_IsZero();
    public bool get_IsBooleanLiteral();
    public bool get_IsStringLiteral();
    [CompilerGeneratedAttribute]
public bool get_IsParameterToRegExp();
    [CompilerGeneratedAttribute]
public void set_IsParameterToRegExp(bool value);
    public bool get_IsSpecialNumeric();
    public bool get_IsOtherDecimal();
    public bool get_StringContainsAspNetReplacement();
    public virtual bool IsEquivalentTo(AstNode otherNode);
    public virtual PrimitiveType FindPrimitiveType();
    public virtual void Accept(IVisitor visitor);
    private static void AddEscape(string unescapedRun, string escapedText, StringBuilder& sb);
    [SuppressMessageAttribute("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
public static string EscapeString(string text, bool isRegularExpression, bool useW3Strict, bool useStrict);
    private static bool OkayToDoubleQuote(string text);
    public double ToNumber();
    public bool get_IsOkayToCombine();
    public static bool NumberIsOkayToCombine(double numericValue);
    public bool get_IsNotOneOrPositiveZero();
    public bool get_IsNegativeZero();
    internal double ToInteger();
    internal int ToInt32();
    internal UInt32 ToUInt32();
    public bool ToBoolean();
    public virtual string ToString();
    private static bool IsOnlyDecimalDigits(string text);
    [CompilerGeneratedAttribute]
private static bool <IsOnlyDecimalDigits>b__0(string s);
    [CompilerGeneratedAttribute]
private static bool <IsOnlyDecimalDigits>b__1(char c);
}
public class Microsoft.Ajax.Utilities.ConstantWrapperPP : Expression {
    [CompilerGeneratedAttribute]
private string <VarName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ForceComments>k__BackingField;
    public string VarName { get; public set; }
    public bool ForceComments { get; public set; }
    public ConstantWrapperPP(Context context, JSParser parser);
    [CompilerGeneratedAttribute]
public string get_VarName();
    [CompilerGeneratedAttribute]
public void set_VarName(string value);
    [CompilerGeneratedAttribute]
public bool get_ForceComments();
    [CompilerGeneratedAttribute]
public void set_ForceComments(bool value);
    public virtual void Accept(IVisitor visitor);
}
[SuppressMessageAttribute("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
public class Microsoft.Ajax.Utilities.ConstStatement : Declaration {
    public ConstStatement(Context context, JSParser parser);
    public virtual void Accept(IVisitor visitor);
}
public class Microsoft.Ajax.Utilities.Context : object {
    [CompilerGeneratedAttribute]
private DocumentContext <Document>k__BackingField;
    [CompilerGeneratedAttribute]
private int <StartLineNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private int <StartLinePosition>k__BackingField;
    [CompilerGeneratedAttribute]
private int <StartPosition>k__BackingField;
    [CompilerGeneratedAttribute]
private int <EndLineNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private int <EndLinePosition>k__BackingField;
    [CompilerGeneratedAttribute]
private int <EndPosition>k__BackingField;
    [CompilerGeneratedAttribute]
private int <SourceOffsetStart>k__BackingField;
    [CompilerGeneratedAttribute]
private int <SourceOffsetEnd>k__BackingField;
    [CompilerGeneratedAttribute]
private int <OutputLine>k__BackingField;
    [CompilerGeneratedAttribute]
private int <OutputColumn>k__BackingField;
    [CompilerGeneratedAttribute]
private JSToken <Token>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`2<string, int> CS$<>9__CachedAnonymousMethodDelegate1;
    public DocumentContext Document { get; private set; }
    public int StartLineNumber { get; internal set; }
    public int StartLinePosition { get; internal set; }
    public int StartPosition { get; internal set; }
    public int EndLineNumber { get; internal set; }
    public int EndLinePosition { get; internal set; }
    public int EndPosition { get; internal set; }
    public int SourceOffsetStart { get; internal set; }
    public int SourceOffsetEnd { get; internal set; }
    public int OutputLine { get; public set; }
    public int OutputColumn { get; public set; }
    public JSToken Token { get; internal set; }
    public int StartColumn { get; }
    public int EndColumn { get; }
    public bool HasCode { get; }
    public string Code { get; }
    public Context(JSParser parser);
    public Context(DocumentContext document);
    public Context(DocumentContext document, int startLineNumber, int startLinePosition, int startPosition, int endLineNumber, int endLinePosition, int endPosition, JSToken token);
    [CompilerGeneratedAttribute]
public DocumentContext get_Document();
    [CompilerGeneratedAttribute]
private void set_Document(DocumentContext value);
    [CompilerGeneratedAttribute]
public int get_StartLineNumber();
    [CompilerGeneratedAttribute]
internal void set_StartLineNumber(int value);
    [CompilerGeneratedAttribute]
public int get_StartLinePosition();
    [CompilerGeneratedAttribute]
internal void set_StartLinePosition(int value);
    [CompilerGeneratedAttribute]
public int get_StartPosition();
    [CompilerGeneratedAttribute]
internal void set_StartPosition(int value);
    [CompilerGeneratedAttribute]
public int get_EndLineNumber();
    [CompilerGeneratedAttribute]
internal void set_EndLineNumber(int value);
    [CompilerGeneratedAttribute]
public int get_EndLinePosition();
    [CompilerGeneratedAttribute]
internal void set_EndLinePosition(int value);
    [CompilerGeneratedAttribute]
public int get_EndPosition();
    [CompilerGeneratedAttribute]
internal void set_EndPosition(int value);
    [CompilerGeneratedAttribute]
public int get_SourceOffsetStart();
    [CompilerGeneratedAttribute]
internal void set_SourceOffsetStart(int value);
    [CompilerGeneratedAttribute]
public int get_SourceOffsetEnd();
    [CompilerGeneratedAttribute]
internal void set_SourceOffsetEnd(int value);
    [CompilerGeneratedAttribute]
public int get_OutputLine();
    [CompilerGeneratedAttribute]
public void set_OutputLine(int value);
    [CompilerGeneratedAttribute]
public int get_OutputColumn();
    [CompilerGeneratedAttribute]
public void set_OutputColumn(int value);
    [CompilerGeneratedAttribute]
public JSToken get_Token();
    [CompilerGeneratedAttribute]
internal void set_Token(JSToken value);
    public Context Clone();
    public Context FlattenToStart();
    public Context FlattenToEnd();
    public Context CombineWith(Context other);
    public int get_StartColumn();
    public int get_EndColumn();
    public bool get_HasCode();
    public string get_Code();
    internal void ReportUndefined(Lookup lookup);
    internal void ChangeFileContext(string fileContext);
    internal void HandleError(JSError errorId);
    internal void HandleError(JSError errorId, bool forceToError);
    public Context UpdateWith(Context other);
    public bool IsBefore(Context other);
    public virtual string ToString();
    [CompilerGeneratedAttribute]
private static int <.ctor>b__0(string s);
}
public class Microsoft.Ajax.Utilities.ContextError : object {
    [CompilerGeneratedAttribute]
private bool <IsError>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Severity>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Subcategory>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ErrorCode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HelpKeyword>k__BackingField;
    [CompilerGeneratedAttribute]
private string <File>k__BackingField;
    [CompilerGeneratedAttribute]
private int <StartLine>k__BackingField;
    [CompilerGeneratedAttribute]
private int <StartColumn>k__BackingField;
    [CompilerGeneratedAttribute]
private int <EndLine>k__BackingField;
    [CompilerGeneratedAttribute]
private int <EndColumn>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    public bool IsError { get; protected set; }
    public int Severity { get; protected set; }
    public string Subcategory { get; protected set; }
    public string ErrorCode { get; protected set; }
    public string HelpKeyword { get; protected set; }
    public string File { get; protected set; }
    public int StartLine { get; protected set; }
    public int StartColumn { get; protected set; }
    public int EndLine { get; protected set; }
    public int EndColumn { get; protected set; }
    public string Message { get; protected set; }
    public ContextError(bool isError, int severity, string subcategory, string errorCode, string helpKeyword, string file, int startLine, int startColumn, int endLine, int endColumn, string message);
    [CompilerGeneratedAttribute]
public bool get_IsError();
    [CompilerGeneratedAttribute]
protected void set_IsError(bool value);
    [CompilerGeneratedAttribute]
public int get_Severity();
    [CompilerGeneratedAttribute]
protected void set_Severity(int value);
    [CompilerGeneratedAttribute]
public string get_Subcategory();
    [CompilerGeneratedAttribute]
protected void set_Subcategory(string value);
    [CompilerGeneratedAttribute]
public string get_ErrorCode();
    [CompilerGeneratedAttribute]
protected void set_ErrorCode(string value);
    [CompilerGeneratedAttribute]
public string get_HelpKeyword();
    [CompilerGeneratedAttribute]
protected void set_HelpKeyword(string value);
    [CompilerGeneratedAttribute]
public string get_File();
    [CompilerGeneratedAttribute]
protected void set_File(string value);
    [CompilerGeneratedAttribute]
public int get_StartLine();
    [CompilerGeneratedAttribute]
protected void set_StartLine(int value);
    [CompilerGeneratedAttribute]
public int get_StartColumn();
    [CompilerGeneratedAttribute]
protected void set_StartColumn(int value);
    [CompilerGeneratedAttribute]
public int get_EndLine();
    [CompilerGeneratedAttribute]
protected void set_EndLine(int value);
    [CompilerGeneratedAttribute]
public int get_EndColumn();
    [CompilerGeneratedAttribute]
protected void set_EndColumn(int value);
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
protected void set_Message(string value);
    public virtual string ToString();
}
public class Microsoft.Ajax.Utilities.ContinueNode : AstNode {
    [CompilerGeneratedAttribute]
private int <NestLevel>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Label>k__BackingField;
    [CompilerGeneratedAttribute]
private Context <LabelContext>k__BackingField;
    public int NestLevel { get; public set; }
    public string Label { get; public set; }
    public Context LabelContext { get; public set; }
    public ContinueNode(Context context, JSParser parser);
    [CompilerGeneratedAttribute]
public int get_NestLevel();
    [CompilerGeneratedAttribute]
public void set_NestLevel(int value);
    [CompilerGeneratedAttribute]
public string get_Label();
    [CompilerGeneratedAttribute]
public void set_Label(string value);
    [CompilerGeneratedAttribute]
public Context get_LabelContext();
    [CompilerGeneratedAttribute]
public void set_LabelContext(Context value);
    public virtual void Accept(IVisitor visitor);
}
public class Microsoft.Ajax.Utilities.CrunchEnumerator : object {
    private HashSet`1<string> m_skipNames;
    private int m_currentName;
    private static string s_varFirstLetters;
    private static string s_varPartLetters;
    public static string FirstLetters { get; public set; }
    public static string PartLetters { get; public set; }
    private string CurrentName { get; }
    internal CrunchEnumerator(IEnumerable`1<string> avoidNames);
    private static CrunchEnumerator();
    public static string get_FirstLetters();
    public static void set_FirstLetters(string value);
    public static string get_PartLetters();
    public static void set_PartLetters(string value);
    internal string NextName();
    private string get_CurrentName();
    public static string CrunchedLabel(int nestLevel);
    public static string GenerateNameFromNumber(int index);
}
public enum Microsoft.Ajax.Utilities.CssColor : Enum {
    public int value__;
    public static CssColor Strict;
    public static CssColor Hex;
    public static CssColor Major;
}
public enum Microsoft.Ajax.Utilities.CssComment : Enum {
    public int value__;
    public static CssComment Important;
    public static CssComment None;
    public static CssComment All;
    public static CssComment Hacks;
}
internal class Microsoft.Ajax.Utilities.CssContext : object {
    private Position m_start;
    private Position m_end;
    public Position Start { get; }
    public Position End { get; }
    internal CssContext(Position start, Position end);
    public Position get_Start();
    public Position get_End();
    public void Advance();
    public CssContext Clone();
    public void Reset(int line, int column);
}
public enum Microsoft.Ajax.Utilities.CssErrorCode : Enum {
    public int value__;
    public static CssErrorCode NoError;
    public static CssErrorCode UnknownError;
    public static CssErrorCode UnterminatedComment;
    public static CssErrorCode UnterminatedString;
    public static CssErrorCode UnnecessaryUnits;
    public static CssErrorCode UnexpectedNumberCharacter;
    public static CssErrorCode ExpectedOpenParenthesis;
    public static CssErrorCode InvalidLowSurrogate;
    public static CssErrorCode HighSurrogateNoLow;
    public static CssErrorCode UnderscoreNotValid;
    public static CssErrorCode UnexpectedEscape;
    public static CssErrorCode UnexpectedStringCharacter;
    public static CssErrorCode DecimalNoDigit;
    public static CssErrorCode EquivalentNumbers;
    public static CssErrorCode ScannerSubsystem;
    public static CssErrorCode FallbackEncodingFailed;
    public static CssErrorCode UnknownCharacterEncoding;
    public static CssErrorCode ParserSubsystem;
    public static CssErrorCode ExpectedCharset;
    public static CssErrorCode ExpectedSemicolon;
    public static CssErrorCode UnexpectedToken;
    public static CssErrorCode UnexpectedAtKeyword;
    public static CssErrorCode ExpectedNamespace;
    public static CssErrorCode ExpectedImport;
    public static CssErrorCode ExpectedCommaOrSemicolon;
    public static CssErrorCode ExpectedMediaIdentifier;
    public static CssErrorCode ExpectedCommaOrOpenBrace;
    public static CssErrorCode ExpectedOpenBrace;
    public static CssErrorCode ExpectedSemicolonOrOpenBrace;
    public static CssErrorCode DeclarationIgnoredFormat;
    public static CssErrorCode DeclarationIgnored;
    public static CssErrorCode ExpectedIdentifier;
    public static CssErrorCode ExpectedSelector;
    public static CssErrorCode ExpectedIdentifierOrString;
    public static CssErrorCode ExpectedClosingBracket;
    public static CssErrorCode ExpectedClosingParenthesis;
    public static CssErrorCode ExpectedColon;
    public static CssErrorCode ExpectedExpression;
    public static CssErrorCode HashAfterUnaryNotAllowed;
    public static CssErrorCode ExpectedHexColor;
    public static CssErrorCode TokenAfterUnaryNotAllowed;
    public static CssErrorCode UnexpectedDimension;
    public static CssErrorCode ExpectedProgId;
    public static CssErrorCode ExpectedFunction;
    public static CssErrorCode ProgIdIEOnly;
    public static CssErrorCode ExpectedEqualSign;
    public static CssErrorCode ExpectedTerm;
    public static CssErrorCode ExpectedComma;
    public static CssErrorCode ExpectedRgbNumberOrPercentage;
    public static CssErrorCode ColorCanBeCollapsed;
    public static CssErrorCode HackGeneratesInvalidCss;
    public static CssErrorCode ExpectedEndOfFile;
    public static CssErrorCode DuplicateNamespaceDeclaration;
    public static CssErrorCode UndeclaredNamespace;
    public static CssErrorCode InvalidUnicodeRange;
    public static CssErrorCode ExpressionError;
    public static CssErrorCode ExpectedMediaQueryExpression;
    public static CssErrorCode ExpectedMediaFeature;
    public static CssErrorCode ExpectedMediaQuery;
    public static CssErrorCode MediaQueryRequiresSpace;
    public static CssErrorCode PossibleInvalidClassName;
    public static CssErrorCode ExpectedClosingBrace;
    public static CssErrorCode ExpectedPercentageFromOrTo;
    public static CssErrorCode ExpectedSemicolonOrClosingBrace;
    public static CssErrorCode ExpectedUnit;
    public static CssErrorCode ExpectedProduct;
    public static CssErrorCode ExpectedSum;
    public static CssErrorCode UnexpectedEndOfFile;
    public static CssErrorCode ExpectedNumber;
    public static CssErrorCode UnexpectedCharset;
    public static CssErrorCode PossibleCharsetError;
    public static CssErrorCode UnexpectedFunction;
}
public class Microsoft.Ajax.Utilities.CssErrorEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private ContextError <Error>k__BackingField;
    [CompilerGeneratedAttribute]
private CssException <Exception>k__BackingField;
    public ContextError Error { get; private set; }
    public CssException Exception { get; private set; }
    internal CssErrorEventArgs(CssException exc, ContextError error);
    [CompilerGeneratedAttribute]
public ContextError get_Error();
    [CompilerGeneratedAttribute]
private void set_Error(ContextError value);
    [CompilerGeneratedAttribute]
public CssException get_Exception();
    [CompilerGeneratedAttribute]
private void set_Exception(CssException value);
}
[SuppressMessageAttribute("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
public class Microsoft.Ajax.Utilities.CssException : object {
    [CompilerGeneratedAttribute]
private string <Originator>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Severity>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Line>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Char>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Error>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    public string Originator { get; private set; }
    public int Severity { get; private set; }
    public int Line { get; private set; }
    public int Char { get; private set; }
    public int Error { get; private set; }
    public string Message { get; private set; }
    internal CssException(int errorNum, string source, int severity, int line, int pos, string message);
    [CompilerGeneratedAttribute]
public string get_Originator();
    [CompilerGeneratedAttribute]
private void set_Originator(string value);
    [CompilerGeneratedAttribute]
public int get_Severity();
    [CompilerGeneratedAttribute]
private void set_Severity(int value);
    [CompilerGeneratedAttribute]
public int get_Line();
    [CompilerGeneratedAttribute]
private void set_Line(int value);
    [CompilerGeneratedAttribute]
public int get_Char();
    [CompilerGeneratedAttribute]
private void set_Char(int value);
    [CompilerGeneratedAttribute]
public int get_Error();
    [CompilerGeneratedAttribute]
private void set_Error(int value);
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
private void set_Message(string value);
}
public class Microsoft.Ajax.Utilities.CssParser : object {
    private CssScanner m_scanner;
    private CssToken m_currentToken;
    private StringBuilder m_parsed;
    private bool m_noOutput;
    private string m_lastOutputString;
    private bool m_mightNeedSpace;
    private bool m_skippedSpace;
    private int m_lineLength;
    private bool m_noColorAbbreviation;
    private bool m_encounteredNewLine;
    private bool m_outputNewLine;
    private bool m_forceNewLine;
    private HashSet`1<string> m_namespaces;
    private CodeSettings m_jsSettings;
    private static Regex s_vendorSpecific;
    private static Regex s_regexHack1;
    private static Regex s_regexHack2;
    private static Regex s_regexHack3;
    private static Regex s_regexHack4;
    private static Regex s_regexHack5;
    private static Regex s_regexHack6;
    private static Regex s_regexHack7;
    private static Regex s_rrggbb;
    private bool m_parsingColorValue;
    private static Regex s_valueReplacement;
    private string m_valueReplacement;
    private EventHandler`1<CssErrorEventArgs> CssError;
    [CompilerGeneratedAttribute]
private CssSettings <Settings>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FileContext>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`2<string, bool> CS$<>9__CachedAnonymousMethodDelegate9;
    [CompilerGeneratedAttribute]
private static Func`2<string, bool> CS$<>9__CachedAnonymousMethodDelegateb;
    public CssSettings Settings { get; public set; }
    public string FileContext { get; public set; }
    public CodeSettings JSSettings { get; public set; }
    private TokenType CurrentTokenType { get; }
    private string CurrentTokenText { get; }
    private static CssParser();
    [CompilerGeneratedAttribute]
public CssSettings get_Settings();
    [CompilerGeneratedAttribute]
public void set_Settings(CssSettings value);
    [CompilerGeneratedAttribute]
public string get_FileContext();
    [CompilerGeneratedAttribute]
public void set_FileContext(string value);
    public CodeSettings get_JSSettings();
    public void set_JSSettings(CodeSettings value);
    private TokenType get_CurrentTokenType();
    private string get_CurrentTokenText();
    public string Parse(string source);
    private string HandleCharset(string source);
    private Parsed ParseStylesheet();
    private Parsed ParseCharset();
    private void ParseSCDOCDCComments();
    private Parsed ParseAtKeyword();
    private Parsed ParseAspNetBlock();
    private Parsed ParseNamespace();
    private void ValidateNamespace(string namespaceIdent);
    private Parsed ParseKeyFrames();
    private void ParseKeyFrameBlocks();
    private Parsed ParseKeyFrameSelectors();
    private Parsed ParseImport();
    private Parsed ParseMedia();
    private Parsed ParseMediaQueryList(bool mightNeedSpace);
    private Parsed ParseMediaQuery(bool firstQuery);
    private void ParseMediaQueryExpression();
    private Parsed ParseDeclarationBlock(bool allowMargins);
    [SuppressMessageAttribute("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
private Parsed ParseDeclarationList(bool allowMargins);
    private Parsed ParsePage();
    private Parsed ParsePseudoPage();
    private Parsed ParseMargin();
    private Parsed ParseFontFace();
    private Parsed ParseOperator();
    private Parsed ParseCombinator();
    private Parsed ParseRule();
    private Parsed ParseSelector();
    private Parsed ParseSimpleSelector();
    private Parsed ParseClass();
    private Parsed ParseElementName();
    [SuppressMessageAttribute("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
private Parsed ParseAttrib();
    private Parsed ParsePseudo();
    private Parsed ParseExpression();
    private Parsed ParseDeclaration();
    private Parsed ParsePrio();
    private Parsed ParseExpr();
    private Parsed ParseFunctionParameters();
    [SuppressMessageAttribute("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
private Parsed ParseTerm(bool wasEmpty);
    private Parsed ParseProgId();
    private static string GetRoot(string text);
    private Parsed ParseFunction();
    [SuppressMessageAttribute("Microsoft.Globalization", "CA1308:NormalizeStringsToUppercase")]
[SuppressMessageAttribute("Microsoft.Globalization", "CA1308:NormalizeStringsToUppercase")]
[SuppressMessageAttribute("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
private Parsed ParseRgb();
    [SuppressMessageAttribute("Microsoft.Globalization", "CA1308:NormalizeStringsToUppercase")]
private Parsed ParseExpressionFunction();
    private Parsed ParseHexcolor();
    private Parsed ParseUnit();
    private Parsed ParseProduct();
    private Parsed ParseSum();
    [SuppressMessageAttribute("Microsoft.Globalization", "CA1308:NormalizeStringsToUppercase")]
private Parsed ParseMinMax();
    [SuppressMessageAttribute("Microsoft.Globalization", "CA1308:NormalizeStringsToUppercase")]
private Parsed ParseCalc();
    private TokenType NextToken();
    private TokenType NextRawToken();
    private string NextSignificantToken();
    private void SkipSpace();
    private void SkipSpaceComment();
    private bool SkipIfSpace();
    private void SkipToEndOfStatement();
    private void SkipToEndOfDeclaration();
    private void SkipToClose();
    private void SkipSemicolons();
    private static bool NeedsSpaceBefore(string text);
    private static bool NeedsSpaceAfter(string text);
    private bool AppendCurrent();
    [SuppressMessageAttribute("Microsoft.Globalization", "CA1308:NormalizeStringsToUppercase")]
[SuppressMessageAttribute("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
[SuppressMessageAttribute("Microsoft.Maintainability", "CA1505:AvoidUnmaintainableCode")]
private bool Append(object obj, TokenType tokenType);
    private static bool EscapeCharacter(StringBuilder sb, char character);
    private bool Append(object obj);
    private void NewLine();
    private void AddNewLine();
    private void Indent();
    private void Unindent();
    [SuppressMessageAttribute("Microsoft.Globalization", "CA1308:NormalizeStringsToUppercase")]
private static string CrunchHexColor(string hexColor, CssColor colorNames, bool noAbbr);
    private static bool MightContainColorNames(string propertyName);
    private void ReportError(int severity, CssErrorCode errorNumber, CssContext context, Object[] arguments);
    private void ReportError(int severity, CssErrorCode errorNumber, Object[] arguments);
    public void add_CssError(EventHandler`1<CssErrorEventArgs> value);
    public void remove_CssError(EventHandler`1<CssErrorEventArgs> value);
    protected void OnCssError(CssException exception);
    private static string GetSeverityString(int severity);
    private static string NormalizedValueReplacementComment(string source);
    private static bool CommentContainsText(string comment);
    private string NormalizeImportantComment(string source);
    [CompilerGeneratedAttribute]
private void <Parse>b__1(object sender, CssScannerErrorEventArgs ea);
    [CompilerGeneratedAttribute]
private void <Parse>b__2(object sender, CssScannerContextChangeEventArgs ea);
    [CompilerGeneratedAttribute]
private static bool <NeedsSpaceBefore>b__8(string t);
    [CompilerGeneratedAttribute]
private static bool <NeedsSpaceAfter>b__a(string t);
}
internal class Microsoft.Ajax.Utilities.CssScanner : object {
    private static string c_scanIncludes;
    private static string c_dashMatch;
    private static string c_prefixMatch;
    private static string c_suffixMatch;
    private static string c_substringMatch;
    private static string c_commentStart;
    private static string c_commentEnd;
    private TextReader m_reader;
    private string m_readAhead;
    private char m_currentChar;
    private string m_rawNumber;
    private CssContext m_context;
    private static Regex s_leadingZeros;
    private static Regex s_trailingZeros;
    private static Regex s_sourceDirective;
    private bool m_isAtEOF;
    private EventHandler`1<CssScannerErrorEventArgs> ScannerError;
    private EventHandler`1<CssScannerContextChangeEventArgs> ContextChange;
    [CompilerGeneratedAttribute]
private bool <AllowEmbeddedAspNetBlocks>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <GotEndOfLine>k__BackingField;
    public string RawNumber { get; }
    public bool AllowEmbeddedAspNetBlocks { get; public set; }
    public bool GotEndOfLine { get; public set; }
    public bool EndOfFile { get; }
    public CssScanner(TextReader reader);
    private static CssScanner();
    public string get_RawNumber();
    [CompilerGeneratedAttribute]
public bool get_AllowEmbeddedAspNetBlocks();
    [CompilerGeneratedAttribute]
public void set_AllowEmbeddedAspNetBlocks(bool value);
    [CompilerGeneratedAttribute]
public bool get_GotEndOfLine();
    [CompilerGeneratedAttribute]
public void set_GotEndOfLine(bool value);
    public bool get_EndOfFile();
    [SuppressMessageAttribute("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
public CssToken NextToken();
    [SuppressMessageAttribute("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
private CssToken ScanComment();
    private void SkipToNextLineWithoutUpdate();
    private CssToken ScanAspNetBlock();
    private CssToken ScanCDO();
    private CssToken ScanCDC();
    private CssToken ScanIncludes();
    private CssToken ScanDashMatch();
    private CssToken ScanPrefixMatch();
    private CssToken ScanSuffixMatch();
    private CssToken ScanSubstringMatch();
    private CssToken ScanString();
    private CssToken ScanHash();
    [SuppressMessageAttribute("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
private CssToken ScanAtKeyword();
    private CssToken ScanImportant();
    [SuppressMessageAttribute("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
private CssToken ScanUnicodeRange();
    private CssToken ScanUrl();
    private CssToken ScanNum();
    private CssToken ScanIdent();
    private CssToken ScanProgId();
    private static bool IsSpace(char ch);
    private static int HValue(char ch);
    public static bool IsH(char ch);
    private static bool IsD(char ch);
    private static bool IsNonAscii(char ch);
    internal static bool IsNmChar(char ch);
    private int GetUnicodeEncodingValue(Boolean& follwedByWhitespace);
    private string GetUnicode();
    private static string ConvertUtf32ToUtf16(int unicodeValue);
    private string GetEscape();
    private string GetNmStart();
    private string GetNmChar();
    [SuppressMessageAttribute("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
private string GetString();
    private void SkipAspNetBlock(StringBuilder sb);
    private string GetIdent();
    private string GetName();
    private string GetNum();
    private string GetUrl();
    private string GetW();
    private string GetNewline();
    private void NextChar();
    public char PeekChar();
    private bool ReadString(string str);
    private void PushChar(char ch);
    private void PushString(string str);
    private char DirectiveNextChar();
    private void DirectiveSkipSpace();
    private int DirectiveScanInteger();
    private void ReportError(int severity, CssErrorCode error, Object[] args);
    public void add_ScannerError(EventHandler`1<CssScannerErrorEventArgs> value);
    public void remove_ScannerError(EventHandler`1<CssScannerErrorEventArgs> value);
    protected void OnScannerError(CssException exc);
    public void add_ContextChange(EventHandler`1<CssScannerContextChangeEventArgs> value);
    public void remove_ContextChange(EventHandler`1<CssScannerContextChangeEventArgs> value);
    protected void OnContextChange(string fileContext, int line, int column);
}
internal class Microsoft.Ajax.Utilities.CssScannerContextChangeEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private string <FileContext>k__BackingField;
    public string FileContext { get; private set; }
    public CssScannerContextChangeEventArgs(string fileContext);
    [CompilerGeneratedAttribute]
public string get_FileContext();
    [CompilerGeneratedAttribute]
private void set_FileContext(string value);
}
internal class Microsoft.Ajax.Utilities.CssScannerErrorEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private CssException <Exception>k__BackingField;
    public CssException Exception { get; private set; }
    public CssScannerErrorEventArgs(CssException exc);
    [CompilerGeneratedAttribute]
public CssException get_Exception();
    [CompilerGeneratedAttribute]
private void set_Exception(CssException value);
}
public class Microsoft.Ajax.Utilities.CssSettings : CommonSettings {
    [CompilerGeneratedAttribute]
private CssColor <ColorNames>k__BackingField;
    [CompilerGeneratedAttribute]
private CssComment <CommentMode>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <MinifyExpressions>k__BackingField;
    [CompilerGeneratedAttribute]
private CssType <CssType>k__BackingField;
    public CssColor ColorNames { get; public set; }
    public CssComment CommentMode { get; public set; }
    public bool MinifyExpressions { get; public set; }
    public CssType CssType { get; public set; }
    public CssSettings Clone();
    [CompilerGeneratedAttribute]
public CssColor get_ColorNames();
    [CompilerGeneratedAttribute]
public void set_ColorNames(CssColor value);
    [CompilerGeneratedAttribute]
public CssComment get_CommentMode();
    [CompilerGeneratedAttribute]
public void set_CommentMode(CssComment value);
    [CompilerGeneratedAttribute]
public bool get_MinifyExpressions();
    [CompilerGeneratedAttribute]
public void set_MinifyExpressions(bool value);
    [CompilerGeneratedAttribute]
public CssType get_CssType();
    [CompilerGeneratedAttribute]
public void set_CssType(CssType value);
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Microsoft.Ajax.Utilities.CssStrings : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string ColorCanBeCollapsed { get; }
    internal static string DecimalNoDigit { get; }
    internal static string DeclarationIgnored { get; }
    internal static string DeclarationIgnoredFormat { get; }
    internal static string DuplicateNamespaceDeclaration { get; }
    internal static string EquivalentNumbers { get; }
    internal static string ExpectedCharset { get; }
    internal static string ExpectedClosingBrace { get; }
    internal static string ExpectedClosingBracket { get; }
    internal static string ExpectedClosingParen { get; }
    internal static string ExpectedColon { get; }
    internal static string ExpectedComma { get; }
    internal static string ExpectedCommaOrOpenBrace { get; }
    internal static string ExpectedCommaOrSemicolon { get; }
    internal static string ExpectedEndOfFile { get; }
    internal static string ExpectedEqualSign { get; }
    internal static string ExpectedExpression { get; }
    internal static string ExpectedFunction { get; }
    internal static string ExpectedHexColor { get; }
    internal static string ExpectedIdentifier { get; }
    internal static string ExpectedIdentifierOrString { get; }
    internal static string ExpectedImport { get; }
    internal static string ExpectedMediaFeature { get; }
    internal static string ExpectedMediaIdentifier { get; }
    internal static string ExpectedMediaQuery { get; }
    internal static string ExpectedMediaQueryExpression { get; }
    internal static string ExpectedNamespace { get; }
    internal static string ExpectedNumber { get; }
    internal static string ExpectedOpenBrace { get; }
    internal static string ExpectedOpenParen { get; }
    internal static string ExpectedPercentageFromOrTo { get; }
    internal static string ExpectedProduct { get; }
    internal static string ExpectedProgId { get; }
    internal static string ExpectedRgbNumberOrPercentage { get; }
    internal static string ExpectedSelector { get; }
    internal static string ExpectedSemicolon { get; }
    internal static string ExpectedSemicolonOrClosingBrace { get; }
    internal static string ExpectedSemicolonOrOpenBrace { get; }
    internal static string ExpectedSum { get; }
    internal static string ExpectedTerm { get; }
    internal static string ExpectedUnit { get; }
    internal static string ExpressionError { get; }
    internal static string FallbackEncodingFailed { get; }
    internal static string HackGeneratesInvalidCSS { get; }
    internal static string HashAfterUnaryNotAllowed { get; }
    internal static string HighSurrogateNoLow { get; }
    internal static string InvalidLowSurrogate { get; }
    internal static string InvalidUnicodeRange { get; }
    internal static string MediaQueryRequiresSpace { get; }
    internal static string ParserSubsystem { get; }
    internal static string PossibleCharsetError { get; }
    internal static string PossibleInvalidClassName { get; }
    internal static string ProgIdIEOnly { get; }
    internal static string ScannerSubsystem { get; }
    internal static string Severity0 { get; }
    internal static string Severity1 { get; }
    internal static string Severity2 { get; }
    internal static string Severity3 { get; }
    internal static string Severity4 { get; }
    internal static string SeverityUnknown { get; }
    internal static string TokenAfterUnaryNotAllowed { get; }
    internal static string UndeclaredNamespace { get; }
    internal static string UnderscoreNotValid { get; }
    internal static string UnexpectedAtKeyword { get; }
    internal static string UnexpectedCharset { get; }
    internal static string UnexpectedDimension { get; }
    internal static string UnexpectedEndOfFile { get; }
    internal static string UnexpectedEscape { get; }
    internal static string UnexpectedFunction { get; }
    internal static string UnexpectedNumberCharacter { get; }
    internal static string UnexpectedStringCharacter { get; }
    internal static string UnexpectedToken { get; }
    internal static string UnknownCharacterEncoding { get; }
    internal static string UnknownError { get; }
    internal static string UnnecessaryUnits { get; }
    internal static string UnterminatedComment { get; }
    internal static string UnterminatedString { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_ColorCanBeCollapsed();
    internal static string get_DecimalNoDigit();
    internal static string get_DeclarationIgnored();
    internal static string get_DeclarationIgnoredFormat();
    internal static string get_DuplicateNamespaceDeclaration();
    internal static string get_EquivalentNumbers();
    internal static string get_ExpectedCharset();
    internal static string get_ExpectedClosingBrace();
    internal static string get_ExpectedClosingBracket();
    internal static string get_ExpectedClosingParen();
    internal static string get_ExpectedColon();
    internal static string get_ExpectedComma();
    internal static string get_ExpectedCommaOrOpenBrace();
    internal static string get_ExpectedCommaOrSemicolon();
    internal static string get_ExpectedEndOfFile();
    internal static string get_ExpectedEqualSign();
    internal static string get_ExpectedExpression();
    internal static string get_ExpectedFunction();
    internal static string get_ExpectedHexColor();
    internal static string get_ExpectedIdentifier();
    internal static string get_ExpectedIdentifierOrString();
    internal static string get_ExpectedImport();
    internal static string get_ExpectedMediaFeature();
    internal static string get_ExpectedMediaIdentifier();
    internal static string get_ExpectedMediaQuery();
    internal static string get_ExpectedMediaQueryExpression();
    internal static string get_ExpectedNamespace();
    internal static string get_ExpectedNumber();
    internal static string get_ExpectedOpenBrace();
    internal static string get_ExpectedOpenParen();
    internal static string get_ExpectedPercentageFromOrTo();
    internal static string get_ExpectedProduct();
    internal static string get_ExpectedProgId();
    internal static string get_ExpectedRgbNumberOrPercentage();
    internal static string get_ExpectedSelector();
    internal static string get_ExpectedSemicolon();
    internal static string get_ExpectedSemicolonOrClosingBrace();
    internal static string get_ExpectedSemicolonOrOpenBrace();
    internal static string get_ExpectedSum();
    internal static string get_ExpectedTerm();
    internal static string get_ExpectedUnit();
    internal static string get_ExpressionError();
    internal static string get_FallbackEncodingFailed();
    internal static string get_HackGeneratesInvalidCSS();
    internal static string get_HashAfterUnaryNotAllowed();
    internal static string get_HighSurrogateNoLow();
    internal static string get_InvalidLowSurrogate();
    internal static string get_InvalidUnicodeRange();
    internal static string get_MediaQueryRequiresSpace();
    internal static string get_ParserSubsystem();
    internal static string get_PossibleCharsetError();
    internal static string get_PossibleInvalidClassName();
    internal static string get_ProgIdIEOnly();
    internal static string get_ScannerSubsystem();
    internal static string get_Severity0();
    internal static string get_Severity1();
    internal static string get_Severity2();
    internal static string get_Severity3();
    internal static string get_Severity4();
    internal static string get_SeverityUnknown();
    internal static string get_TokenAfterUnaryNotAllowed();
    internal static string get_UndeclaredNamespace();
    internal static string get_UnderscoreNotValid();
    internal static string get_UnexpectedAtKeyword();
    internal static string get_UnexpectedCharset();
    internal static string get_UnexpectedDimension();
    internal static string get_UnexpectedEndOfFile();
    internal static string get_UnexpectedEscape();
    internal static string get_UnexpectedFunction();
    internal static string get_UnexpectedNumberCharacter();
    internal static string get_UnexpectedStringCharacter();
    internal static string get_UnexpectedToken();
    internal static string get_UnknownCharacterEncoding();
    internal static string get_UnknownError();
    internal static string get_UnnecessaryUnits();
    internal static string get_UnterminatedComment();
    internal static string get_UnterminatedString();
}
internal class Microsoft.Ajax.Utilities.CssToken : object {
    private TokenType m_tokenType;
    private string m_text;
    private CssContext m_context;
    public TokenType TokenType { get; }
    public string Text { get; }
    public CssContext Context { get; }
    public CssToken(TokenType tokenType, string text, CssContext context);
    public CssToken(TokenType tokenType, char ch, CssContext context);
    public TokenType get_TokenType();
    public string get_Text();
    public CssContext get_Context();
}
public enum Microsoft.Ajax.Utilities.CssType : Enum {
    public int value__;
    public static CssType FullStyleSheet;
    public static CssType DeclarationList;
}
public class Microsoft.Ajax.Utilities.CustomNode : AstNode {
    public CustomNode(Context context, JSParser parser);
    public virtual void Accept(IVisitor visitor);
    public virtual string ToCode();
}
public class Microsoft.Ajax.Utilities.DebuggerNode : AstNode {
    internal bool IsDebuggerStatement { get; }
    public DebuggerNode(Context context, JSParser parser);
    public virtual void Accept(IVisitor visitor);
    internal virtual bool get_IsDebuggerStatement();
}
[SuppressMessageAttribute("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
[DefaultMemberAttribute("Item")]
public abstract class Microsoft.Ajax.Utilities.Declaration : AstNode {
    private List`1<VariableDeclaration> m_list;
    [CompilerGeneratedAttribute]
private ActivationObject <Scope>k__BackingField;
    public int Count { get; }
    public VariableDeclaration Item { get; public set; }
    public ActivationObject Scope { get; public set; }
    public IEnumerable`1<AstNode> Children { get; }
    public bool ContainsInOperator { get; }
    protected Declaration(Context context, JSParser parser);
    public int get_Count();
    public VariableDeclaration get_Item(int index);
    public void set_Item(int index, VariableDeclaration value);
    [CompilerGeneratedAttribute]
public ActivationObject get_Scope();
    [CompilerGeneratedAttribute]
public void set_Scope(ActivationObject value);
    public virtual IEnumerable`1<AstNode> get_Children();
    public virtual bool ReplaceChild(AstNode oldNode, AstNode newNode);
    internal void Append(AstNode elem);
    internal void InsertAt(int index, AstNode elem);
    private bool HandleDuplicates(string name);
    public void RemoveAt(int index);
    public void Remove(VariableDeclaration variableDeclaration);
    public bool Contains(string name);
    public virtual bool get_ContainsInOperator();
    public sealed virtual IEnumerator`1<VariableDeclaration> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    [CompilerGeneratedAttribute]
private AstNode <set_Item>b__0(VariableDeclaration n);
    [CompilerGeneratedAttribute]
private AstNode <ReplaceChild>b__1(VariableDeclaration n);
    [CompilerGeneratedAttribute]
private AstNode <ReplaceChild>b__2(VariableDeclaration n);
    [CompilerGeneratedAttribute]
private AstNode <RemoveAt>b__5(VariableDeclaration n);
}
public class Microsoft.Ajax.Utilities.DetachReferences : TreeVisitor {
    private static DetachReferences s_instance;
    private static DetachReferences();
    public static void Apply(AstNode node);
    public static void Apply(AstNode[] nodes);
    public virtual void Visit(Lookup node);
}
public class Microsoft.Ajax.Utilities.DirectivePrologue : ConstantWrapper {
    [CompilerGeneratedAttribute]
private bool <UseStrict>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsRedundant>k__BackingField;
    public bool UseStrict { get; private set; }
    public bool IsRedundant { get; public set; }
    public bool IsExpression { get; }
    internal bool RequiresSeparator { get; }
    public bool IsConstant { get; }
    public DirectivePrologue(string value, Context context, JSParser parser);
    [CompilerGeneratedAttribute]
public bool get_UseStrict();
    [CompilerGeneratedAttribute]
private void set_UseStrict(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsRedundant();
    [CompilerGeneratedAttribute]
public void set_IsRedundant(bool value);
    public virtual bool get_IsExpression();
    internal virtual bool get_RequiresSeparator();
    public virtual bool get_IsConstant();
    public virtual void Accept(IVisitor visitor);
}
public class Microsoft.Ajax.Utilities.DocumentContext : object {
    private Dictionary`2<string, string> m_reportedVariables;
    private JSParser m_parser;
    [CompilerGeneratedAttribute]
private string <Source>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FileContext>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsGenerated>k__BackingField;
    public string Source { get; private set; }
    public string FileContext { get; public set; }
    public bool IsGenerated { get; private set; }
    public DocumentContext(JSParser parser);
    public DocumentContext(JSParser parser, string source);
    [CompilerGeneratedAttribute]
public string get_Source();
    [CompilerGeneratedAttribute]
private void set_Source(string value);
    [CompilerGeneratedAttribute]
public string get_FileContext();
    [CompilerGeneratedAttribute]
public void set_FileContext(string value);
    [CompilerGeneratedAttribute]
public bool get_IsGenerated();
    [CompilerGeneratedAttribute]
private void set_IsGenerated(bool value);
    internal DocumentContext DifferentFileContext(string fileContext);
    internal void HandleError(JScriptException error);
    internal void ReportUndefined(UndefinedReferenceException ex);
    internal bool HasAlreadySeenErrorFor(string varName);
}
public class Microsoft.Ajax.Utilities.DoWhile : IterationStatement {
    private AstNode m_condition;
    [CompilerGeneratedAttribute]
private Context <WhileContext>k__BackingField;
    public AstNode Condition { get; public set; }
    public Context WhileContext { get; public set; }
    internal bool RequiresSeparator { get; }
    public IEnumerable`1<AstNode> Children { get; }
    public DoWhile(Context context, JSParser parser);
    public AstNode get_Condition();
    public void set_Condition(AstNode value);
    [CompilerGeneratedAttribute]
public Context get_WhileContext();
    [CompilerGeneratedAttribute]
public void set_WhileContext(Context value);
    internal virtual bool get_RequiresSeparator();
    public virtual void Accept(IVisitor visitor);
    public virtual IEnumerable`1<AstNode> get_Children();
    public virtual bool ReplaceChild(AstNode oldNode, AstNode newNode);
    internal virtual bool EncloseBlock(EncloseBlockType type);
    [CompilerGeneratedAttribute]
private AstNode <set_Condition>b__2(AstNode n);
    [CompilerGeneratedAttribute]
private AstNode <set_Condition>b__3(AstNode n);
}
public class Microsoft.Ajax.Utilities.EmptyStatement : AstNode {
    internal bool RequiresSeparator { get; }
    public EmptyStatement(Context context, JSParser parser);
    public virtual void Accept(IVisitor visitor);
    internal virtual bool get_RequiresSeparator();
}
internal enum Microsoft.Ajax.Utilities.EncloseBlockType : Enum {
    public int value__;
    public static EncloseBlockType IfWithoutElse;
    public static EncloseBlockType SingleDoWhile;
}
public enum Microsoft.Ajax.Utilities.EvalTreatment : Enum {
    public int value__;
    public static EvalTreatment Ignore;
    public static EvalTreatment MakeImmediateSafe;
    public static EvalTreatment MakeAllSafe;
}
internal class Microsoft.Ajax.Utilities.EvaluateLiteralVisitor : TreeVisitor {
    private JSParser m_parser;
    public EvaluateLiteralVisitor(JSParser parser);
    private bool ReplaceMemberBracketWithDot(BinaryOperator node, ConstantWrapper newLiteral);
    private static void ReplaceNodeWithLiteral(AstNode node, ConstantWrapper newLiteral);
    private static void ReplaceNodeCheckParens(AstNode oldNode, AstNode newNode);
    [SuppressMessageAttribute("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
private void EvalThisOperator(BinaryOperator node, ConstantWrapper left, ConstantWrapper right);
    private void RotateFromLeft(BinaryOperator node, BinaryOperator binaryOp, ConstantWrapper newLiteral);
    private void RotateFromRight(BinaryOperator node, BinaryOperator binaryOp, ConstantWrapper newLiteral);
    private static bool NoMultiplicativeOverOrUnderFlow(ConstantWrapper left, ConstantWrapper right, ConstantWrapper result);
    private static bool NoOverflow(ConstantWrapper result);
    [SuppressMessageAttribute("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
private void EvalToTheLeft(BinaryOperator node, ConstantWrapper thisConstant, ConstantWrapper otherConstant, BinaryOperator leftOperator);
    [SuppressMessageAttribute("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
private void EvalFarToTheLeft(BinaryOperator node, ConstantWrapper thisConstant, ConstantWrapper otherConstant, BinaryOperator leftOperator);
    [SuppressMessageAttribute("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
private void EvalToTheRight(BinaryOperator node, ConstantWrapper thisConstant, ConstantWrapper otherConstant, BinaryOperator rightOperator);
    [SuppressMessageAttribute("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
private void EvalFarToTheRight(BinaryOperator node, ConstantWrapper thisConstant, ConstantWrapper otherConstant, BinaryOperator rightOperator);
    private ConstantWrapper Multiply(ConstantWrapper left, ConstantWrapper right);
    private ConstantWrapper Divide(ConstantWrapper left, ConstantWrapper right);
    private ConstantWrapper Modulo(ConstantWrapper left, ConstantWrapper right);
    private ConstantWrapper Plus(ConstantWrapper left, ConstantWrapper right);
    private ConstantWrapper NumericAddition(ConstantWrapper left, ConstantWrapper right);
    private ConstantWrapper StringConcat(ConstantWrapper left, ConstantWrapper right);
    private ConstantWrapper Minus(ConstantWrapper left, ConstantWrapper right);
    private ConstantWrapper LeftShift(ConstantWrapper left, ConstantWrapper right);
    private ConstantWrapper RightShift(ConstantWrapper left, ConstantWrapper right);
    private ConstantWrapper UnsignedRightShift(ConstantWrapper left, ConstantWrapper right);
    private ConstantWrapper LessThan(ConstantWrapper left, ConstantWrapper right);
    private ConstantWrapper LessThanOrEqual(ConstantWrapper left, ConstantWrapper right);
    private ConstantWrapper GreaterThan(ConstantWrapper left, ConstantWrapper right);
    private ConstantWrapper GreaterThanOrEqual(ConstantWrapper left, ConstantWrapper right);
    private ConstantWrapper Equal(ConstantWrapper left, ConstantWrapper right);
    private ConstantWrapper NotEqual(ConstantWrapper left, ConstantWrapper right);
    private ConstantWrapper StrictEqual(ConstantWrapper left, ConstantWrapper right);
    private ConstantWrapper StrictNotEqual(ConstantWrapper left, ConstantWrapper right);
    private ConstantWrapper BitwiseAnd(ConstantWrapper left, ConstantWrapper right);
    private ConstantWrapper BitwiseOr(ConstantWrapper left, ConstantWrapper right);
    private ConstantWrapper BitwiseXor(ConstantWrapper left, ConstantWrapper right);
    private ConstantWrapper LogicalAnd(ConstantWrapper left, ConstantWrapper right);
    private ConstantWrapper LogicalOr(ConstantWrapper left, ConstantWrapper right);
    private static bool OnlyHasConstantItems(ArrayLiteral arrayLiteral);
    private static string ComputeJoin(ArrayLiteral arrayLiteral, ConstantWrapper separatorNode);
    public virtual void Visit(AstNodeList node);
    public virtual void Visit(BinaryOperator node);
    [SuppressMessageAttribute("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
private void DoBinaryOperator(BinaryOperator node);
    public virtual void Visit(CallNode node);
    public virtual void Visit(Conditional node);
    private void DoConditional(Conditional node);
    public virtual void Visit(ConditionalCompilationElseIf node);
    private void DoConditionalCompilationElseIf(ConditionalCompilationElseIf node);
    public virtual void Visit(ConditionalCompilationIf node);
    private void DoConditionalCompilationIf(ConditionalCompilationIf node);
    public virtual void Visit(DoWhile node);
    private void DoDoWhile(DoWhile node);
    public virtual void Visit(ForNode node);
    private void DoForNode(ForNode node);
    public virtual void Visit(IfNode node);
    private void DoIfNode(IfNode node);
    public virtual void Visit(Member node);
    public virtual void Visit(UnaryOperator node);
    [SuppressMessageAttribute("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
private void DoUnaryNode(UnaryOperator node);
    public virtual void Visit(WhileNode node);
    private void DoWhileNode(WhileNode node);
}
public abstract class Microsoft.Ajax.Utilities.Expression : AstNode {
    public bool IsExpression { get; }
    public OperatorPrecedence Precedence { get; }
    protected Expression(Context context, JSParser parser);
    public virtual bool get_IsExpression();
    public virtual OperatorPrecedence get_Precedence();
}
public enum Microsoft.Ajax.Utilities.FieldType : Enum {
    public int value__;
    public static FieldType Local;
    public static FieldType Predefined;
    public static FieldType Global;
    public static FieldType Arguments;
    public static FieldType Argument;
    public static FieldType WithField;
    public static FieldType CatchError;
    public static FieldType GhostCatch;
    public static FieldType GhostFunction;
    public static FieldType UndefinedGlobal;
}
internal class Microsoft.Ajax.Utilities.FinalPassVisitor : TreeVisitor {
    private JSParser m_parser;
    private StatementStartVisitor m_statementStart;
    private FinalPassVisitor(JSParser parser);
    public static void Apply(AstNode node, JSParser parser);
    public virtual void Visit(BinaryOperator node);
    private void PossiblyBreakExpressionStatement(BinaryOperator node, Block parentBlock);
    private void PossiblyBreakExpressionList(BinaryOperator node, Block parentBlock, AstNodeList nodeList);
    private static AstNode CreateSplitNodeFromEnd(AstNodeList nodeList, int ndx);
    private static void RotateOpeator(BinaryOperator node, AstNodeList rightSide);
    private bool CanBeBroken(AstNode node);
    public virtual void Visit(ConstantWrapper node);
}
public class Microsoft.Ajax.Utilities.ForIn : IterationStatement {
    private AstNode m_variable;
    private AstNode m_collection;
    [CompilerGeneratedAttribute]
private Context <OperatorContext>k__BackingField;
    [CompilerGeneratedAttribute]
private BlockScope <BlockScope>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`2<Block, Context> CS$<>9__CachedAnonymousMethodDelegate5;
    public AstNode Variable { get; public set; }
    public AstNode Collection { get; public set; }
    public Context OperatorContext { get; public set; }
    public BlockScope BlockScope { get; public set; }
    public Context TerminatingContext { get; }
    public IEnumerable`1<AstNode> Children { get; }
    internal bool RequiresSeparator { get; }
    public ForIn(Context context, JSParser parser);
    public AstNode get_Variable();
    public void set_Variable(AstNode value);
    public AstNode get_Collection();
    public void set_Collection(AstNode value);
    [CompilerGeneratedAttribute]
public Context get_OperatorContext();
    [CompilerGeneratedAttribute]
public void set_OperatorContext(Context value);
    [CompilerGeneratedAttribute]
public BlockScope get_BlockScope();
    [CompilerGeneratedAttribute]
public void set_BlockScope(BlockScope value);
    public virtual Context get_TerminatingContext();
    public virtual void Accept(IVisitor visitor);
    public virtual IEnumerable`1<AstNode> get_Children();
    public virtual bool ReplaceChild(AstNode oldNode, AstNode newNode);
    internal virtual bool EncloseBlock(EncloseBlockType type);
    internal virtual bool get_RequiresSeparator();
    [CompilerGeneratedAttribute]
private AstNode <set_Variable>b__0(AstNode n);
    [CompilerGeneratedAttribute]
private AstNode <set_Variable>b__1(AstNode n);
    [CompilerGeneratedAttribute]
private AstNode <set_Collection>b__2(AstNode n);
    [CompilerGeneratedAttribute]
private AstNode <set_Collection>b__3(AstNode n);
    [CompilerGeneratedAttribute]
private static Context <get_TerminatingContext>b__4(Block b);
}
public class Microsoft.Ajax.Utilities.ForNode : IterationStatement {
    private AstNode m_initializer;
    private AstNode m_condition;
    private AstNode m_incrementer;
    [CompilerGeneratedAttribute]
private Context <Separator1Context>k__BackingField;
    [CompilerGeneratedAttribute]
private Context <Separator2Context>k__BackingField;
    [CompilerGeneratedAttribute]
private BlockScope <BlockScope>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`2<Block, Context> CS$<>9__CachedAnonymousMethodDelegate7;
    public AstNode Initializer { get; public set; }
    public AstNode Condition { get; public set; }
    [SuppressMessageAttribute("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
public AstNode Incrementer { get; public set; }
    public Context Separator1Context { get; public set; }
    public Context Separator2Context { get; public set; }
    public BlockScope BlockScope { get; public set; }
    public Context TerminatingContext { get; }
    internal bool RequiresSeparator { get; }
    public IEnumerable`1<AstNode> Children { get; }
    public ForNode(Context context, JSParser parser);
    public AstNode get_Initializer();
    public void set_Initializer(AstNode value);
    public AstNode get_Condition();
    public void set_Condition(AstNode value);
    public AstNode get_Incrementer();
    public void set_Incrementer(AstNode value);
    [CompilerGeneratedAttribute]
public Context get_Separator1Context();
    [CompilerGeneratedAttribute]
public void set_Separator1Context(Context value);
    [CompilerGeneratedAttribute]
public Context get_Separator2Context();
    [CompilerGeneratedAttribute]
public void set_Separator2Context(Context value);
    [CompilerGeneratedAttribute]
public BlockScope get_BlockScope();
    [CompilerGeneratedAttribute]
public void set_BlockScope(BlockScope value);
    public virtual Context get_TerminatingContext();
    public virtual void Accept(IVisitor visitor);
    internal virtual bool get_RequiresSeparator();
    internal virtual bool EncloseBlock(EncloseBlockType type);
    public virtual IEnumerable`1<AstNode> get_Children();
    public virtual bool ReplaceChild(AstNode oldNode, AstNode newNode);
    [CompilerGeneratedAttribute]
private AstNode <set_Initializer>b__0(AstNode n);
    [CompilerGeneratedAttribute]
private AstNode <set_Initializer>b__1(AstNode n);
    [CompilerGeneratedAttribute]
private AstNode <set_Condition>b__2(AstNode n);
    [CompilerGeneratedAttribute]
private AstNode <set_Condition>b__3(AstNode n);
    [CompilerGeneratedAttribute]
private AstNode <set_Incrementer>b__4(AstNode n);
    [CompilerGeneratedAttribute]
private AstNode <set_Incrementer>b__5(AstNode n);
    [CompilerGeneratedAttribute]
private static Context <get_TerminatingContext>b__6(Block b);
}
public class Microsoft.Ajax.Utilities.FunctionObject : AstNode {
    private Block m_body;
    private AstNodeList m_parameters;
    [CompilerGeneratedAttribute]
private FunctionType <FunctionType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NameGuess>k__BackingField;
    [CompilerGeneratedAttribute]
private Context <IdContext>k__BackingField;
    [CompilerGeneratedAttribute]
private Context <ParametersContext>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsSourceElement>k__BackingField;
    [CompilerGeneratedAttribute]
private JSVariableField <VariableField>k__BackingField;
    [CompilerGeneratedAttribute]
private FunctionScope <FunctionScope>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`2<ParameterDeclaration, JSVariableField> CS$<>9__CachedAnonymousMethodDelegate5;
    public Block Body { get; public set; }
    public AstNodeList ParameterDeclarations { get; public set; }
    public FunctionType FunctionType { get; public set; }
    public AstNode Initializer { get; }
    public Context NameContext { get; }
    public bool RenameNotAllowed { get; }
    public string Name { get; public set; }
    public string NameGuess { get; public set; }
    public Context IdContext { get; public set; }
    public Context ParametersContext { get; public set; }
    public bool IsExpression { get; }
    public bool IsSourceElement { get; public set; }
    public JSVariableField VariableField { get; public set; }
    public int RefCount { get; }
    public FunctionScope FunctionScope { get; public set; }
    public ActivationObject EnclosingScope { get; }
    public OperatorPrecedence Precedence { get; }
    public bool IsReferenced { get; }
    public IEnumerable`1<AstNode> Children { get; }
    internal bool RequiresSeparator { get; }
    public FunctionObject(Context functionContext, JSParser parser);
    public Block get_Body();
    public void set_Body(Block value);
    public AstNodeList get_ParameterDeclarations();
    public void set_ParameterDeclarations(AstNodeList value);
    [CompilerGeneratedAttribute]
public FunctionType get_FunctionType();
    [CompilerGeneratedAttribute]
public void set_FunctionType(FunctionType value);
    public sealed virtual AstNode get_Initializer();
    public sealed virtual Context get_NameContext();
    public sealed virtual bool get_RenameNotAllowed();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_NameGuess();
    [CompilerGeneratedAttribute]
public void set_NameGuess(string value);
    [CompilerGeneratedAttribute]
public Context get_IdContext();
    [CompilerGeneratedAttribute]
public void set_IdContext(Context value);
    [CompilerGeneratedAttribute]
public Context get_ParametersContext();
    [CompilerGeneratedAttribute]
public void set_ParametersContext(Context value);
    public virtual bool get_IsExpression();
    [CompilerGeneratedAttribute]
public bool get_IsSourceElement();
    [CompilerGeneratedAttribute]
public void set_IsSourceElement(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual JSVariableField get_VariableField();
    [CompilerGeneratedAttribute]
public sealed virtual void set_VariableField(JSVariableField value);
    public int get_RefCount();
    [CompilerGeneratedAttribute]
public FunctionScope get_FunctionScope();
    [CompilerGeneratedAttribute]
public void set_FunctionScope(FunctionScope value);
    public virtual ActivationObject get_EnclosingScope();
    public virtual OperatorPrecedence get_Precedence();
    public virtual void Accept(IVisitor visitor);
    public bool get_IsReferenced();
    private bool SafeIsReferenced(HashSet`1<FunctionObject> visited);
    public virtual IEnumerable`1<AstNode> get_Children();
    public virtual bool ReplaceChild(AstNode oldNode, AstNode newNode);
    internal virtual bool get_RequiresSeparator();
    internal bool IsArgumentTrimmable(JSVariableField targetArgumentField);
    [CompilerGeneratedAttribute]
private AstNode <set_Body>b__0(Block n);
    [CompilerGeneratedAttribute]
private AstNode <set_Body>b__1(Block n);
    [CompilerGeneratedAttribute]
private AstNode <set_ParameterDeclarations>b__2(AstNodeList n);
    [CompilerGeneratedAttribute]
private AstNode <set_ParameterDeclarations>b__3(AstNodeList n);
    [CompilerGeneratedAttribute]
private static JSVariableField <IsArgumentTrimmable>b__4(ParameterDeclaration p);
}
public class Microsoft.Ajax.Utilities.FunctionScope : ActivationObject {
    private HashSet`1<ActivationObject> m_refScopes;
    [CompilerGeneratedAttribute]
private FunctionObject <FunctionObject>k__BackingField;
    public FunctionObject FunctionObject { get; private set; }
    internal FunctionScope(ActivationObject parent, bool isExpression, CodeSettings settings, FunctionObject funcObj);
    [CompilerGeneratedAttribute]
public FunctionObject get_FunctionObject();
    [CompilerGeneratedAttribute]
private void set_FunctionObject(FunctionObject value);
    public virtual void DeclareScope();
    private void DefineFunctionExpressionName();
    private void DefineParameters();
    private void DefineArgumentsObject();
    public virtual JSVariableField CreateField(string name, object value, FieldAttributes attributes);
    internal void AddReference(ActivationObject scope);
}
public enum Microsoft.Ajax.Utilities.FunctionType : Enum {
    public int value__;
    public static FunctionType Declaration;
    public static FunctionType Expression;
    public static FunctionType Getter;
    public static FunctionType Setter;
}
public class Microsoft.Ajax.Utilities.GetterSetter : ObjectLiteralField {
    [CompilerGeneratedAttribute]
private bool <IsGetter>k__BackingField;
    public bool IsGetter { get; public set; }
    public GetterSetter(string identifier, bool isGetter, Context context, JSParser parser);
    [CompilerGeneratedAttribute]
public bool get_IsGetter();
    [CompilerGeneratedAttribute]
public void set_IsGetter(bool value);
    public virtual void Accept(IVisitor visitor);
    public virtual string ToString();
}
public class Microsoft.Ajax.Utilities.GlobalDefineEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Name { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
}
[DefaultMemberAttribute("Item")]
public class Microsoft.Ajax.Utilities.GlobalScope : ActivationObject {
    private HashSet`1<string> m_globalProperties;
    private HashSet`1<string> m_globalFunctions;
    private HashSet`1<string> m_assumedGlobals;
    private HashSet`1<UndefinedReferenceException> m_undefined;
    public ICollection`1<UndefinedReferenceException> UndefinedReferences { get; }
    public JSVariableField Item { get; }
    internal GlobalScope(CodeSettings settings);
    public ICollection`1<UndefinedReferenceException> get_UndefinedReferences();
    public virtual void DeclareScope();
    public void AddUndefinedReference(UndefinedReferenceException exception);
    internal void SetAssumedGlobals(CodeSettings settings);
    internal virtual void AnalyzeScope();
    internal virtual void AutoRenameFields();
    public virtual JSVariableField get_Item(string name);
    private JSVariableField ResolveFromCollection(string name, HashSet`1<string> collection, FieldType fieldType, bool isFunction);
    public virtual JSVariableField CreateField(string name, object value, FieldAttributes attributes);
    public virtual JSVariableField CreateField(JSVariableField outerField);
}
public class Microsoft.Ajax.Utilities.GroupingOperator : Expression {
    private AstNode m_operand;
    [CompilerGeneratedAttribute]
private static Func`2<AstNode, bool> CS$<>9__CachedAnonymousMethodDelegate3;
    public AstNode Operand { get; public set; }
    public OperatorPrecedence Precedence { get; }
    public IEnumerable`1<AstNode> Children { get; }
    public bool IsConstant { get; }
    public GroupingOperator(Context context, JSParser parser);
    public AstNode get_Operand();
    public void set_Operand(AstNode value);
    public virtual void Accept(IVisitor visitor);
    public virtual PrimitiveType FindPrimitiveType();
    public virtual OperatorPrecedence get_Precedence();
    public virtual IEnumerable`1<AstNode> get_Children();
    public virtual bool ReplaceChild(AstNode oldNode, AstNode newNode);
    public virtual bool IsEquivalentTo(AstNode otherNode);
    public virtual bool get_IsConstant();
    public virtual string ToString();
    [CompilerGeneratedAttribute]
private AstNode <set_Operand>b__0(AstNode n);
    [CompilerGeneratedAttribute]
private AstNode <set_Operand>b__1(AstNode n);
    [CompilerGeneratedAttribute]
private static bool <get_IsConstant>b__2(AstNode o);
}
public class Microsoft.Ajax.Utilities.IfNode : AstNode {
    private AstNode m_condition;
    private Block m_trueBlock;
    private Block m_falseBlock;
    [CompilerGeneratedAttribute]
private Context <ElseContext>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`2<Block, Context> CS$<>9__CachedAnonymousMethodDelegate7;
    public AstNode Condition { get; public set; }
    public Block TrueBlock { get; public set; }
    public Block FalseBlock { get; public set; }
    public Context ElseContext { get; public set; }
    public Context TerminatingContext { get; }
    public IEnumerable`1<AstNode> Children { get; }
    internal bool RequiresSeparator { get; }
    public IfNode(Context context, JSParser parser);
    public AstNode get_Condition();
    public void set_Condition(AstNode value);
    public Block get_TrueBlock();
    public void set_TrueBlock(Block value);
    public Block get_FalseBlock();
    public void set_FalseBlock(Block value);
    [CompilerGeneratedAttribute]
public Context get_ElseContext();
    [CompilerGeneratedAttribute]
public void set_ElseContext(Context value);
    public virtual Context get_TerminatingContext();
    public virtual void Accept(IVisitor visitor);
    public void SwapBranches();
    public virtual IEnumerable`1<AstNode> get_Children();
    public virtual bool ReplaceChild(AstNode oldNode, AstNode newNode);
    internal virtual bool get_RequiresSeparator();
    internal virtual bool EncloseBlock(EncloseBlockType type);
    [CompilerGeneratedAttribute]
private AstNode <set_Condition>b__0(AstNode n);
    [CompilerGeneratedAttribute]
private AstNode <set_Condition>b__1(AstNode n);
    [CompilerGeneratedAttribute]
private AstNode <set_TrueBlock>b__2(Block n);
    [CompilerGeneratedAttribute]
private AstNode <set_TrueBlock>b__3(Block n);
    [CompilerGeneratedAttribute]
private AstNode <set_FalseBlock>b__4(Block n);
    [CompilerGeneratedAttribute]
private AstNode <set_FalseBlock>b__5(Block n);
    [CompilerGeneratedAttribute]
private static Context <get_TerminatingContext>b__6(Block b);
}
public class Microsoft.Ajax.Utilities.ImportantComment : AstNode {
    [CompilerGeneratedAttribute]
private string <Comment>k__BackingField;
    public string Comment { get; private set; }
    internal bool RequiresSeparator { get; }
    public ImportantComment(Context context, JSParser parser);
    [CompilerGeneratedAttribute]
public string get_Comment();
    [CompilerGeneratedAttribute]
private void set_Comment(string value);
    public virtual void Accept(IVisitor visitor);
    internal virtual bool get_RequiresSeparator();
}
public interface Microsoft.Ajax.Utilities.INameDeclaration {
    public string Name { get; }
    public Context NameContext { get; }
    public AstNode Parent { get; }
    public AstNode Initializer { get; }
    public bool RenameNotAllowed { get; }
    public JSVariableField VariableField { get; public set; }
    public abstract virtual string get_Name();
    public abstract virtual Context get_NameContext();
    public abstract virtual AstNode get_Parent();
    public abstract virtual AstNode get_Initializer();
    public abstract virtual bool get_RenameNotAllowed();
    public abstract virtual JSVariableField get_VariableField();
    public abstract virtual void set_VariableField(JSVariableField value);
}
public interface Microsoft.Ajax.Utilities.INameReference {
    public ActivationObject VariableScope { get; }
    public bool IsAssignment { get; }
    public AstNode AssignmentValue { get; }
    public JSVariableField VariableField { get; }
    public string Name { get; }
    public long Index { get; }
    public abstract virtual ActivationObject get_VariableScope();
    public abstract virtual bool get_IsAssignment();
    public abstract virtual AstNode get_AssignmentValue();
    public abstract virtual JSVariableField get_VariableField();
    public abstract virtual string get_Name();
    public abstract virtual long get_Index();
}
public class Microsoft.Ajax.Utilities.InvalidSwitchEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private string <SwitchPart>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ParameterPart>k__BackingField;
    public string SwitchPart { get; public set; }
    public string ParameterPart { get; public set; }
    [CompilerGeneratedAttribute]
public string get_SwitchPart();
    [CompilerGeneratedAttribute]
public void set_SwitchPart(string value);
    [CompilerGeneratedAttribute]
public string get_ParameterPart();
    [CompilerGeneratedAttribute]
public void set_ParameterPart(string value);
}
public interface Microsoft.Ajax.Utilities.ISourceMap {
    public string Name { get; }
    public string SourceRoot { get; public set; }
    public bool SafeHeader { get; public set; }
    public abstract virtual void StartPackage(string sourcePath, string mapPath);
    public abstract virtual void EndPackage();
    public abstract virtual object StartSymbol(AstNode node, int startLine, int startColumn);
    public abstract virtual void MarkSegment(AstNode node, int startLine, int startColumn, string name, Context context);
    public abstract virtual void EndSymbol(object symbol, int endLine, int endColumn, string parentContext);
    public abstract virtual void EndOutputRun(int lineNumber, int columnPosition);
    public abstract virtual void EndFile(TextWriter writer, string newLine);
    public abstract virtual void NewLineInsertedInOutput();
    public abstract virtual string get_Name();
    public abstract virtual string get_SourceRoot();
    public abstract virtual void set_SourceRoot(string value);
    public abstract virtual bool get_SafeHeader();
    public abstract virtual void set_SafeHeader(bool value);
}
public abstract class Microsoft.Ajax.Utilities.IterationStatement : AstNode {
    private Block m_body;
    public Block Body { get; public set; }
    protected IterationStatement(Context context, JSParser parser);
    public Block get_Body();
    public void set_Body(Block value);
    [CompilerGeneratedAttribute]
private AstNode <set_Body>b__0(Block n);
    [CompilerGeneratedAttribute]
private AstNode <set_Body>b__1(Block n);
}
public interface Microsoft.Ajax.Utilities.IVisitor {
    public abstract virtual void Visit(ArrayLiteral node);
    public abstract virtual void Visit(AspNetBlockNode node);
    public abstract virtual void Visit(AstNodeList node);
    public abstract virtual void Visit(BinaryOperator node);
    public abstract virtual void Visit(Block node);
    public abstract virtual void Visit(Break node);
    public abstract virtual void Visit(CallNode node);
    public abstract virtual void Visit(ConditionalCompilationComment node);
    public abstract virtual void Visit(ConditionalCompilationElse node);
    public abstract virtual void Visit(ConditionalCompilationElseIf node);
    public abstract virtual void Visit(ConditionalCompilationEnd node);
    public abstract virtual void Visit(ConditionalCompilationIf node);
    public abstract virtual void Visit(ConditionalCompilationOn node);
    public abstract virtual void Visit(ConditionalCompilationSet node);
    public abstract virtual void Visit(Conditional node);
    public abstract virtual void Visit(ConstantWrapper node);
    public abstract virtual void Visit(ConstantWrapperPP node);
    public abstract virtual void Visit(ConstStatement node);
    public abstract virtual void Visit(ContinueNode node);
    public abstract virtual void Visit(CustomNode node);
    public abstract virtual void Visit(DebuggerNode node);
    public abstract virtual void Visit(DirectivePrologue node);
    public abstract virtual void Visit(DoWhile node);
    public abstract virtual void Visit(EmptyStatement node);
    public abstract virtual void Visit(ForIn node);
    public abstract virtual void Visit(ForNode node);
    public abstract virtual void Visit(FunctionObject node);
    public abstract virtual void Visit(GetterSetter node);
    public abstract virtual void Visit(GroupingOperator node);
    public abstract virtual void Visit(IfNode node);
    public abstract virtual void Visit(ImportantComment node);
    public abstract virtual void Visit(LabeledStatement node);
    public abstract virtual void Visit(LexicalDeclaration node);
    public abstract virtual void Visit(Lookup node);
    public abstract virtual void Visit(Member node);
    public abstract virtual void Visit(ObjectLiteral node);
    public abstract virtual void Visit(ObjectLiteralField node);
    public abstract virtual void Visit(ObjectLiteralProperty node);
    public abstract virtual void Visit(ParameterDeclaration node);
    public abstract virtual void Visit(RegExpLiteral node);
    public abstract virtual void Visit(ReturnNode node);
    public abstract virtual void Visit(Switch node);
    public abstract virtual void Visit(SwitchCase node);
    public abstract virtual void Visit(ThisLiteral node);
    public abstract virtual void Visit(ThrowNode node);
    public abstract virtual void Visit(TryNode node);
    public abstract virtual void Visit(Var node);
    public abstract virtual void Visit(VariableDeclaration node);
    public abstract virtual void Visit(UnaryOperator node);
    public abstract virtual void Visit(WhileNode node);
    public abstract virtual void Visit(WithNode node);
}
public enum Microsoft.Ajax.Utilities.JavaScriptFormat : Enum {
    public int value__;
    public static JavaScriptFormat Normal;
    public static JavaScriptFormat JSON;
}
public enum Microsoft.Ajax.Utilities.JavaScriptSourceMode : Enum {
    public int value__;
    public static JavaScriptSourceMode Program;
    public static JavaScriptSourceMode Expression;
    public static JavaScriptSourceMode EventHandler;
}
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
internal class Microsoft.Ajax.Utilities.JScript : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string AmbiguousCatchVar { get; }
    internal static string AmbiguousNamedFunctionExpression { get; }
    internal static string ApplicationError { get; }
    internal static string ArgumentNotReferenced { get; }
    internal static string ArrayLiteralTrailingComma { get; }
    internal static string AssignmentToConstant { get; }
    internal static string BadBreak { get; }
    internal static string BadContinue { get; }
    internal static string BadHexEscapeSequence { get; }
    internal static string BadLabel { get; }
    internal static string BadNumericLiteral { get; }
    internal static string BadReturn { get; }
    internal static string BadSwitch { get; }
    internal static string CCInvalidElse { get; }
    internal static string CCInvalidElseIf { get; }
    internal static string CCInvalidEnd { get; }
    internal static string CCOff { get; }
    internal static string ConditionalCompilationTooComplex { get; }
    internal static string DupDefault { get; }
    internal static string DuplicateCatch { get; }
    internal static string DuplicateConstantDeclaration { get; }
    internal static string DuplicateLexicalDeclaration { get; }
    internal static string DuplicateName { get; }
    internal static string ErrorEndOfFile { get; }
    internal static string ExpressionExpected { get; }
    internal static string FallbackEncodingFailed { get; }
    internal static string FunctionExpressionExpected { get; }
    internal static string FunctionNameMustBeIdentifier { get; }
    internal static string FunctionNotReferenced { get; }
    internal static string IllegalAssignment { get; }
    internal static string IllegalChar { get; }
    internal static string InternalCompilerError { get; }
    internal static string InvalidElse { get; }
    internal static string InvalidJSONOutput { get; }
    internal static string JSParserException { get; }
    internal static string KeywordUsedAsIdentifier { get; }
    internal static string MisplacedFunctionDeclaration { get; }
    internal static string NoCatch { get; }
    internal static string NoCCEnd { get; }
    internal static string NoColon { get; }
    internal static string NoComma { get; }
    internal static string NoCommaOrTypeDefinitionError { get; }
    internal static string NoCommentEnd { get; }
    internal static string NoEndDebugDirective { get; }
    internal static string NoEndIfDirective { get; }
    internal static string NoEqual { get; }
    internal static string NoIdentifier { get; }
    internal static string NoLabel { get; }
    internal static string NoLeftCurly { get; }
    internal static string NoLeftParenthesis { get; }
    internal static string NoMemberIdentifier { get; }
    internal static string NoRightBracket { get; }
    internal static string NoRightBracketOrComma { get; }
    internal static string NoRightCurly { get; }
    internal static string NoRightParenthesis { get; }
    internal static string NoRightParenthesisOrComma { get; }
    internal static string NoSemicolon { get; }
    internal static string NoWhile { get; }
    internal static string NumericMaximum { get; }
    internal static string NumericMinimum { get; }
    internal static string NumericOverflow { get; }
    internal static string ObjectConstructorTakesNoArguments { get; }
    internal static string ObjectLiteralKeyword { get; }
    internal static string OctalLiteralsDeprecated { get; }
    internal static string ParameterListNotLast { get; }
    internal static string RegExpSyntax { get; }
    internal static string ResourceReferenceMustBeConstant { get; }
    internal static string SemicolonInsertion { get; }
    internal static string Severity0 { get; }
    internal static string Severity1 { get; }
    internal static string Severity2 { get; }
    internal static string Severity3 { get; }
    internal static string Severity4 { get; }
    internal static string SeverityUnknown { get; }
    internal static string StatementBlockExpected { get; }
    internal static string StrictComparisonIsAlwaysTrueOrFalse { get; }
    internal static string StrictModeArgumentName { get; }
    internal static string StrictModeDuplicateArgument { get; }
    internal static string StrictModeDuplicateProperty { get; }
    internal static string StrictModeFunctionName { get; }
    internal static string StrictModeInvalidAssign { get; }
    internal static string StrictModeInvalidDelete { get; }
    internal static string StrictModeInvalidPreOrPost { get; }
    internal static string StrictModeNoWith { get; }
    internal static string StrictModeUndefinedVariable { get; }
    internal static string StrictModeVariableName { get; }
    internal static string StringNotInlineSafe { get; }
    internal static string SuspectAssignment { get; }
    internal static string SuspectEquality { get; }
    internal static string SuspectSemicolon { get; }
    internal static string SyntaxError { get; }
    internal static string TooManyTokensSkipped { get; }
    internal static string UncaughtException { get; }
    internal static string UnclosedFunction { get; }
    internal static string UndeclaredFunction { get; }
    internal static string UndeclaredVariable { get; }
    internal static string UnexpectedSemicolon { get; }
    internal static string UnterminatedAspNetBlock { get; }
    internal static string UnterminatedString { get; }
    internal static string VariableDefinedNotReferenced { get; }
    internal static string WithNotRecommended { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_AmbiguousCatchVar();
    internal static string get_AmbiguousNamedFunctionExpression();
    internal static string get_ApplicationError();
    internal static string get_ArgumentNotReferenced();
    internal static string get_ArrayLiteralTrailingComma();
    internal static string get_AssignmentToConstant();
    internal static string get_BadBreak();
    internal static string get_BadContinue();
    internal static string get_BadHexEscapeSequence();
    internal static string get_BadLabel();
    internal static string get_BadNumericLiteral();
    internal static string get_BadReturn();
    internal static string get_BadSwitch();
    internal static string get_CCInvalidElse();
    internal static string get_CCInvalidElseIf();
    internal static string get_CCInvalidEnd();
    internal static string get_CCOff();
    internal static string get_ConditionalCompilationTooComplex();
    internal static string get_DupDefault();
    internal static string get_DuplicateCatch();
    internal static string get_DuplicateConstantDeclaration();
    internal static string get_DuplicateLexicalDeclaration();
    internal static string get_DuplicateName();
    internal static string get_ErrorEndOfFile();
    internal static string get_ExpressionExpected();
    internal static string get_FallbackEncodingFailed();
    internal static string get_FunctionExpressionExpected();
    internal static string get_FunctionNameMustBeIdentifier();
    internal static string get_FunctionNotReferenced();
    internal static string get_IllegalAssignment();
    internal static string get_IllegalChar();
    internal static string get_InternalCompilerError();
    internal static string get_InvalidElse();
    internal static string get_InvalidJSONOutput();
    internal static string get_JSParserException();
    internal static string get_KeywordUsedAsIdentifier();
    internal static string get_MisplacedFunctionDeclaration();
    internal static string get_NoCatch();
    internal static string get_NoCCEnd();
    internal static string get_NoColon();
    internal static string get_NoComma();
    internal static string get_NoCommaOrTypeDefinitionError();
    internal static string get_NoCommentEnd();
    internal static string get_NoEndDebugDirective();
    internal static string get_NoEndIfDirective();
    internal static string get_NoEqual();
    internal static string get_NoIdentifier();
    internal static string get_NoLabel();
    internal static string get_NoLeftCurly();
    internal static string get_NoLeftParenthesis();
    internal static string get_NoMemberIdentifier();
    internal static string get_NoRightBracket();
    internal static string get_NoRightBracketOrComma();
    internal static string get_NoRightCurly();
    internal static string get_NoRightParenthesis();
    internal static string get_NoRightParenthesisOrComma();
    internal static string get_NoSemicolon();
    internal static string get_NoWhile();
    internal static string get_NumericMaximum();
    internal static string get_NumericMinimum();
    internal static string get_NumericOverflow();
    internal static string get_ObjectConstructorTakesNoArguments();
    internal static string get_ObjectLiteralKeyword();
    internal static string get_OctalLiteralsDeprecated();
    internal static string get_ParameterListNotLast();
    internal static string get_RegExpSyntax();
    internal static string get_ResourceReferenceMustBeConstant();
    internal static string get_SemicolonInsertion();
    internal static string get_Severity0();
    internal static string get_Severity1();
    internal static string get_Severity2();
    internal static string get_Severity3();
    internal static string get_Severity4();
    internal static string get_SeverityUnknown();
    internal static string get_StatementBlockExpected();
    internal static string get_StrictComparisonIsAlwaysTrueOrFalse();
    internal static string get_StrictModeArgumentName();
    internal static string get_StrictModeDuplicateArgument();
    internal static string get_StrictModeDuplicateProperty();
    internal static string get_StrictModeFunctionName();
    internal static string get_StrictModeInvalidAssign();
    internal static string get_StrictModeInvalidDelete();
    internal static string get_StrictModeInvalidPreOrPost();
    internal static string get_StrictModeNoWith();
    internal static string get_StrictModeUndefinedVariable();
    internal static string get_StrictModeVariableName();
    internal static string get_StringNotInlineSafe();
    internal static string get_SuspectAssignment();
    internal static string get_SuspectEquality();
    internal static string get_SuspectSemicolon();
    internal static string get_SyntaxError();
    internal static string get_TooManyTokensSkipped();
    internal static string get_UncaughtException();
    internal static string get_UnclosedFunction();
    internal static string get_UndeclaredFunction();
    internal static string get_UndeclaredVariable();
    internal static string get_UnexpectedSemicolon();
    internal static string get_UnterminatedAspNetBlock();
    internal static string get_UnterminatedString();
    internal static string get_VariableDefinedNotReferenced();
    internal static string get_WithNotRecommended();
}
[SuppressMessageAttribute("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
public class Microsoft.Ajax.Utilities.JScriptException : object {
    private Context m_context;
    [CompilerGeneratedAttribute]
private string <FileContext>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CanRecover>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsError>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private JSError <ErrorCode>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`2<Context, bool> CS$<>9__CachedAnonymousMethodDelegate1;
    public string FileContext { get; private set; }
    public bool CanRecover { get; public set; }
    public bool IsError { get; public set; }
    public string Value { get; public set; }
    public JSError ErrorCode { get; private set; }
    public int StartColumn { get; }
    public int Line { get; }
    public int Column { get; }
    public int EndLine { get; }
    public int EndColumn { get; }
    public string FullSource { get; }
    public string LineText { get; }
    public string ErrorSegment { get; }
    public string Message { get; }
    public int Severity { get; }
    internal JScriptException(JSError errorNumber, Context context);
    [CompilerGeneratedAttribute]
public string get_FileContext();
    [CompilerGeneratedAttribute]
private void set_FileContext(string value);
    [CompilerGeneratedAttribute]
public bool get_CanRecover();
    [CompilerGeneratedAttribute]
public void set_CanRecover(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsError();
    [CompilerGeneratedAttribute]
public void set_IsError(bool value);
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(string value);
    [CompilerGeneratedAttribute]
public JSError get_ErrorCode();
    [CompilerGeneratedAttribute]
private void set_ErrorCode(JSError value);
    public int get_StartColumn();
    public int get_Line();
    public int get_Column();
    public int get_EndLine();
    public int get_EndColumn();
    public string get_FullSource();
    public string get_LineText();
    public string get_ErrorSegment();
    public string get_Message();
    public int get_Severity();
    public static int GetSeverity(JSError errorCode);
    [CompilerGeneratedAttribute]
private static bool <get_Message>b__0(Context c);
}
public class Microsoft.Ajax.Utilities.JScriptExceptionEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private ContextError <Error>k__BackingField;
    [CompilerGeneratedAttribute]
private JScriptException <Exception>k__BackingField;
    public ContextError Error { get; private set; }
    public JScriptException Exception { get; private set; }
    public JScriptExceptionEventArgs(JScriptException exception, ContextError error);
    [CompilerGeneratedAttribute]
public ContextError get_Error();
    [CompilerGeneratedAttribute]
private void set_Error(ContextError value);
    [CompilerGeneratedAttribute]
public JScriptException get_Exception();
    [CompilerGeneratedAttribute]
private void set_Exception(JScriptException value);
}
public class Microsoft.Ajax.Utilities.JSEncoderFallback : EncoderFallback {
    public int MaxCharCount { get; }
    public virtual EncoderFallbackBuffer CreateFallbackBuffer();
    public virtual int get_MaxCharCount();
}
internal class Microsoft.Ajax.Utilities.JSEncoderFallbackBuffer : EncoderFallbackBuffer {
    private string m_fallbackString;
    private int m_position;
    public int Remaining { get; }
    public virtual int get_Remaining();
    private static string GetEncoding(int charValue);
    public virtual bool Fallback(char charUnknown, int index);
    public virtual bool Fallback(char charUnknownHigh, char charUnknownLow, int index);
    public virtual char GetNextChar();
    public virtual bool MovePrevious();
    public virtual void Reset();
    public virtual string ToString();
}
public enum Microsoft.Ajax.Utilities.JSError : Enum {
    public int value__;
    public static JSError NoError;
    public static JSError SyntaxError;
    public static JSError NoColon;
    public static JSError NoSemicolon;
    public static JSError NoLeftParenthesis;
    public static JSError NoRightParenthesis;
    public static JSError NoRightBracket;
    public static JSError NoLeftCurly;
    public static JSError NoRightCurly;
    public static JSError NoIdentifier;
    public static JSError NoEqual;
    public static JSError IllegalChar;
    public static JSError UnterminatedString;
    public static JSError NoCommentEnd;
    public static JSError BadReturn;
    public static JSError BadBreak;
    public static JSError BadContinue;
    public static JSError BadHexEscapeSequence;
    public static JSError NoWhile;
    public static JSError BadLabel;
    public static JSError NoLabel;
    public static JSError DupDefault;
    public static JSError NoMemberIdentifier;
    public static JSError NoCCEnd;
    public static JSError CCOff;
    public static JSError NoCatch;
    public static JSError InvalidElse;
    public static JSError NoComma;
    public static JSError BadSwitch;
    public static JSError CCInvalidEnd;
    public static JSError CCInvalidElse;
    public static JSError CCInvalidElseIf;
    public static JSError ErrorEndOfFile;
    public static JSError DuplicateName;
    public static JSError UndeclaredVariable;
    public static JSError KeywordUsedAsIdentifier;
    public static JSError UndeclaredFunction;
    public static JSError NoCommaOrTypeDefinitionError;
    public static JSError NoRightParenthesisOrComma;
    public static JSError NoRightBracketOrComma;
    public static JSError ExpressionExpected;
    public static JSError UnexpectedSemicolon;
    public static JSError TooManyTokensSkipped;
    public static JSError SuspectAssignment;
    public static JSError SuspectSemicolon;
    public static JSError ParameterListNotLast;
    public static JSError StatementBlockExpected;
    public static JSError VariableDefinedNotReferenced;
    public static JSError ArgumentNotReferenced;
    public static JSError WithNotRecommended;
    public static JSError FunctionNotReferenced;
    public static JSError AmbiguousCatchVar;
    public static JSError FunctionExpressionExpected;
    public static JSError ObjectConstructorTakesNoArguments;
    public static JSError JSParserException;
    public static JSError NumericOverflow;
    public static JSError NumericMaximum;
    public static JSError NumericMinimum;
    public static JSError ResourceReferenceMustBeConstant;
    public static JSError AmbiguousNamedFunctionExpression;
    public static JSError ConditionalCompilationTooComplex;
    public static JSError UnterminatedAspNetBlock;
    public static JSError MisplacedFunctionDeclaration;
    public static JSError OctalLiteralsDeprecated;
    public static JSError FunctionNameMustBeIdentifier;
    public static JSError StrictComparisonIsAlwaysTrueOrFalse;
    public static JSError StrictModeNoWith;
    public static JSError StrictModeDuplicateArgument;
    public static JSError StrictModeVariableName;
    public static JSError StrictModeFunctionName;
    public static JSError StrictModeDuplicateProperty;
    public static JSError StrictModeInvalidAssign;
    public static JSError StrictModeInvalidPreOrPost;
    public static JSError StrictModeInvalidDelete;
    public static JSError StrictModeArgumentName;
    public static JSError DuplicateConstantDeclaration;
    public static JSError AssignmentToConstant;
    public static JSError StringNotInlineSafe;
    public static JSError StrictModeUndefinedVariable;
    public static JSError UnclosedFunction;
    public static JSError ObjectLiteralKeyword;
    public static JSError NoEndIfDirective;
    public static JSError NoEndDebugDirective;
    public static JSError BadNumericLiteral;
    public static JSError DuplicateLexicalDeclaration;
    public static JSError DuplicateCatch;
    public static JSError SuspectEquality;
    public static JSError SemicolonInsertion;
    public static JSError ArrayLiteralTrailingComma;
    public static JSError IllegalAssignment;
    public static JSError RegExpSyntax;
    public static JSError UncaughtException;
    public static JSError ApplicationError;
}
internal class Microsoft.Ajax.Utilities.JSKeyword : object {
    private JSKeyword m_next;
    private JSToken m_token;
    private string m_name;
    private int m_length;
    private JSKeyword(JSToken token, string name);
    private JSKeyword(JSToken token, string name, JSKeyword next);
    internal static string CanBeIdentifier(JSToken keyword);
    internal JSToken GetKeyword(Context context, int wordLength);
    internal JSToken GetKeyword(string source, int startPosition, int wordLength);
    internal static JSKeyword[] InitKeywords();
}
public class Microsoft.Ajax.Utilities.JSONOutputVisitor : object {
    private static Regex s_decimalFormat;
    private TextWriter m_writer;
    [CompilerGeneratedAttribute]
private bool <IsValid>k__BackingField;
    public bool IsValid { get; private set; }
    private JSONOutputVisitor(TextWriter writer);
    private static JSONOutputVisitor();
    [CompilerGeneratedAttribute]
public bool get_IsValid();
    [CompilerGeneratedAttribute]
private void set_IsValid(bool value);
    public static bool Apply(TextWriter writer, AstNode node);
    public sealed virtual void Visit(ArrayLiteral node);
    public sealed virtual void Visit(AstNodeList node);
    public sealed virtual void Visit(Block node);
    public sealed virtual void Visit(ConstantWrapper node);
    public sealed virtual void Visit(CustomNode node);
    public sealed virtual void Visit(UnaryOperator node);
    public sealed virtual void Visit(ObjectLiteral node);
    public sealed virtual void Visit(ObjectLiteralField node);
    public sealed virtual void Visit(ObjectLiteralProperty node);
    public sealed virtual void Visit(AspNetBlockNode node);
    public sealed virtual void Visit(BinaryOperator node);
    public sealed virtual void Visit(Break node);
    public sealed virtual void Visit(CallNode node);
    public sealed virtual void Visit(ConditionalCompilationComment node);
    public sealed virtual void Visit(ConditionalCompilationElse node);
    public sealed virtual void Visit(ConditionalCompilationElseIf node);
    public sealed virtual void Visit(ConditionalCompilationEnd node);
    public sealed virtual void Visit(ConditionalCompilationIf node);
    public sealed virtual void Visit(ConditionalCompilationOn node);
    public sealed virtual void Visit(ConditionalCompilationSet node);
    public sealed virtual void Visit(Conditional node);
    public sealed virtual void Visit(ConstantWrapperPP node);
    public sealed virtual void Visit(ConstStatement node);
    public sealed virtual void Visit(ContinueNode node);
    public sealed virtual void Visit(DebuggerNode node);
    public sealed virtual void Visit(DirectivePrologue node);
    public sealed virtual void Visit(DoWhile node);
    public sealed virtual void Visit(EmptyStatement node);
    public sealed virtual void Visit(ForIn node);
    public sealed virtual void Visit(ForNode node);
    public sealed virtual void Visit(FunctionObject node);
    public sealed virtual void Visit(GetterSetter node);
    public sealed virtual void Visit(GroupingOperator node);
    public sealed virtual void Visit(IfNode node);
    public sealed virtual void Visit(ImportantComment node);
    public sealed virtual void Visit(LabeledStatement node);
    public sealed virtual void Visit(LexicalDeclaration node);
    public sealed virtual void Visit(Lookup node);
    public sealed virtual void Visit(Member node);
    public sealed virtual void Visit(ParameterDeclaration node);
    public sealed virtual void Visit(RegExpLiteral node);
    public sealed virtual void Visit(ReturnNode node);
    public sealed virtual void Visit(Switch node);
    public sealed virtual void Visit(SwitchCase node);
    public sealed virtual void Visit(ThisLiteral node);
    public sealed virtual void Visit(ThrowNode node);
    public sealed virtual void Visit(TryNode node);
    public sealed virtual void Visit(Var node);
    public sealed virtual void Visit(VariableDeclaration node);
    public sealed virtual void Visit(WhileNode node);
    public sealed virtual void Visit(WithNode node);
    private void OutputString(string text);
    public void OutputNumber(double numericValue, Context originalContext);
    private static string GetSmallestRep(string number);
}
[SuppressMessageAttribute("Microsoft.Maintainability", "CA1506:AvoidExcessiveClassCoupling")]
public class Microsoft.Ajax.Utilities.JSParser : object {
    private static int c_MaxSkippedTokenNumber;
    private DocumentContext m_document;
    private JSScanner m_scanner;
    private Context m_currentToken;
    private bool m_useCurrentForNext;
    private int m_tokensSkipped;
    private NoSkipTokenSet m_noSkipTokenSet;
    private long m_goodTokensProcessed;
    private bool m_newModule;
    private List`1<BlockType> m_blockType;
    private Dictionary`2<string, LabelInfo> m_labelTable;
    private int m_finallyEscaped;
    private bool m_foundEndOfLine;
    private IList`1<Context> m_importantComments;
    private CodeSettings m_settings;
    private int m_breakRecursion;
    private int m_severity;
    private EventHandler`1<JScriptExceptionEventArgs> CompilerError;
    private EventHandler`1<UndefinedReferenceEventArgs> UndefinedReference;
    private GlobalScope m_globalScope;
    [CompilerGeneratedAttribute]
private ICollection`1<string> <DebugLookups>k__BackingField;
    [CompilerGeneratedAttribute]
private TextWriter <EchoWriter>k__BackingField;
    [CompilerGeneratedAttribute]
private static Action`1<Context> CS$<>9__CachedAnonymousMethodDelegatef;
    [CompilerGeneratedAttribute]
private static Func`2<Context, Context> CS$<>9__CachedAnonymousMethodDelegate12;
    [CompilerGeneratedAttribute]
private static Func`2<Context, Context> CS$<>9__CachedAnonymousMethodDelegate18;
    [CompilerGeneratedAttribute]
private static Func`2<Context, Context> CS$<>9__CachedAnonymousMethodDelegate1d;
    [CompilerGeneratedAttribute]
private static Func`2<Context, Context> CS$<>9__CachedAnonymousMethodDelegate2d;
    [CompilerGeneratedAttribute]
private static Func`2<Context, Context> CS$<>9__CachedAnonymousMethodDelegate2f;
    [CompilerGeneratedAttribute]
private static Func`2<Context, Context> CS$<>9__CachedAnonymousMethodDelegate31;
    [CompilerGeneratedAttribute]
private static Func`2<Context, Context> CS$<>9__CachedAnonymousMethodDelegate39;
    [CompilerGeneratedAttribute]
private static Func`2<Lookup, Context> CS$<>9__CachedAnonymousMethodDelegate4a;
    [CompilerGeneratedAttribute]
private static Func`2<Lookup, string> CS$<>9__CachedAnonymousMethodDelegate4b;
    [CompilerGeneratedAttribute]
private static Func`2<Lookup, Context> CS$<>9__CachedAnonymousMethodDelegate4c;
    [CompilerGeneratedAttribute]
private static Func`2<Lookup, string> CS$<>9__CachedAnonymousMethodDelegate4d;
    [CompilerGeneratedAttribute]
private static Func`2<AstNode, Context> CS$<>9__CachedAnonymousMethodDelegate72;
    [CompilerGeneratedAttribute]
private static Func`2<AstNode, Context> CS$<>9__CachedAnonymousMethodDelegate74;
    public ICollection`1<string> DebugLookups { get; private set; }
    public CodeSettings Settings { get; }
    public TextWriter EchoWriter { get; public set; }
    public GlobalScope GlobalScope { get; public set; }
    public string FileContext { get; public set; }
    public JSParser(string source);
    [CompilerGeneratedAttribute]
public ICollection`1<string> get_DebugLookups();
    [CompilerGeneratedAttribute]
private void set_DebugLookups(ICollection`1<string> value);
    public CodeSettings get_Settings();
    [CompilerGeneratedAttribute]
public TextWriter get_EchoWriter();
    [CompilerGeneratedAttribute]
public void set_EchoWriter(TextWriter value);
    public void add_CompilerError(EventHandler`1<JScriptExceptionEventArgs> value);
    public void remove_CompilerError(EventHandler`1<JScriptExceptionEventArgs> value);
    public void add_UndefinedReference(EventHandler`1<UndefinedReferenceEventArgs> value);
    public void remove_UndefinedReference(EventHandler`1<UndefinedReferenceEventArgs> value);
    public GlobalScope get_GlobalScope();
    public void set_GlobalScope(GlobalScope value);
    [SuppressMessageAttribute("Microsoft.Globalization", "CA1303:Do not pass literals as localized parameters")]
internal bool OnCompilerError(JScriptException se);
    private static string GetSeverityString(int severity);
    internal void OnUndefinedReference(UndefinedReferenceException ex);
    public string get_FileContext();
    public void set_FileContext(string value);
    private void InitializeScanner(CodeSettings settings);
    [ObsoleteAttribute("Set EchoWriter property to and call Parse method with PreprocessOnly property on the CodeSettings object set to true", "True")]
public string PreprocessOnly(CodeSettings settings);
    [ObsoleteAttribute("Set EchoWriter property to and call Parse method with PreprocessOnly property on the CodeSettings object set to true", "True")]
public void PreprocessOnly(CodeSettings settings, TextWriter outputStream);
    public Block Parse(CodeSettings settings);
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("This property is deprecated; call Parse with CodeSettings.SourceMode set to JavaScriptSourceMode.Expression instead")]
public Block ParseExpression(CodeSettings settings);
    private Block ParseStatements();
    [SuppressMessageAttribute("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
[SuppressMessageAttribute("Microsoft.Maintainability", "CA1505:AvoidUnmaintainableCode")]
private AstNode ParseStatement(bool fSourceElement, bool skipImportantComment);
    private AstNode ParseStatementLevelConditionalComment(bool fSourceElement);
    private ConditionalCompilationSet ParseConditionalCompilationSet();
    private ConditionalCompilationStatement ParseConditionalCompilationIf(bool isElseIf);
    private Block ParseBlock();
    private AstNode ParseDebuggerStatement();
    private AstNode ParseVariableStatement();
    private AstNode ParseIdentifierInitializer(JSToken inToken);
    private IfNode ParseIfStatement();
    [SuppressMessageAttribute("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
private AstNode ParseForStatement();
    private DoWhile ParseDoStatement();
    private WhileNode ParseWhileStatement();
    private ContinueNode ParseContinueStatement();
    private Break ParseBreakStatement();
    private ReturnNode ParseReturnStatement();
    private WithNode ParseWithStatement();
    [SuppressMessageAttribute("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
private AstNode ParseSwitchStatement();
    private AstNode ParseThrowStatement();
    private AstNode ParseTryStatement();
    [SuppressMessageAttribute("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
private FunctionObject ParseFunction(FunctionType functionType, Context fncCtx);
    private void AppendImportantComments(Block block);
    private AstNode ParseExpression();
    private AstNode ParseExpression(bool single);
    private AstNode ParseExpression(bool single, JSToken inToken);
    private AstNode ParseExpression(AstNode leftHandSide, bool single, bool bCanAssign, JSToken inToken);
    private AstNode ParseUnaryExpression(Boolean& isLeftHandSideExpr, bool isMinus);
    private void CCTooComplicated(Context context);
    private AstNode ParsePostfixExpression(AstNode ast, Boolean& isLeftHandSideExpr);
    [SuppressMessageAttribute("Microsoft.Maintainability", "CA1505:AvoidUnmaintainableCode")]
[SuppressMessageAttribute("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
private AstNode ParseLeftHandSideExpression(bool isMinus);
    private bool ConvertNumericLiteralToDouble(string str, bool isInteger, Double& doubleValue);
    private AstNode MemberExpression(AstNode expression, List`1<Context> newContexts);
    private AstNodeList ParseExpressionList(JSToken terminator);
    private AstNode CreateExpressionNode(Context op, AstNode operand1, AstNode operand2);
    private void GetNextToken();
    private AstNode ScanRegularExpression();
    private Context ScanNextToken();
    private JSToken PeekToken();
    private Context CurrentPositionContext();
    private void ReportError(JSError errorId);
    private void ReportError(JSError errorId, bool skipToken);
    private void ReportError(JSError errorId, Context context, bool skipToken);
    private void EOFError(JSError errorId);
    private void SkipTokensAndThrow();
    private void SkipTokensAndThrow(AstNode partialAST);
    private int IndexOfToken(JSToken[] tokens, RecoveryTokenException exc);
    private int IndexOfToken(JSToken[] tokens, JSToken token);
    private bool TokenInList(JSToken[] tokens, JSToken token);
    private bool TokenInList(JSToken[] tokens, RecoveryTokenException exc);
    [CompilerGeneratedAttribute]
private void <.ctor>b__0(object sender, GlobalDefineEventArgs ea);
    [CompilerGeneratedAttribute]
private void <.ctor>b__1(object sender, NewModuleEventArgs ea);
    [CompilerGeneratedAttribute]
private static void <ParseStatement>b__b(Context c);
    [CompilerGeneratedAttribute]
private Context <ParseStatement>b__c(AstNode s);
    [CompilerGeneratedAttribute]
private Context <ParseStatement>b__d(AstNode s);
    [CompilerGeneratedAttribute]
private static Context <ParseStatement>b__e(Context c);
    [CompilerGeneratedAttribute]
private static Context <ParseDebuggerStatement>b__17(Context c);
    [CompilerGeneratedAttribute]
private Context <ParseVariableStatement>b__1a(AstNode d);
    [CompilerGeneratedAttribute]
private static Context <ParseVariableStatement>b__1b(Context c);
    [CompilerGeneratedAttribute]
private static Context <ParseContinueStatement>b__2c(Context c);
    [CompilerGeneratedAttribute]
private static Context <ParseBreakStatement>b__2e(Context c);
    [CompilerGeneratedAttribute]
private static Context <ParseReturnStatement>b__30(Context c);
    [CompilerGeneratedAttribute]
private static Context <ParseThrowStatement>b__38(Context c);
    [CompilerGeneratedAttribute]
private Context <ParseFunction>b__44(ParameterDeclaration p);
    [CompilerGeneratedAttribute]
private static Context <ParseFunction>b__45(Lookup n);
    [CompilerGeneratedAttribute]
private static string <ParseFunction>b__46(Lookup n);
    [CompilerGeneratedAttribute]
private static Context <ParseFunction>b__47(Lookup n);
    [CompilerGeneratedAttribute]
private static string <ParseFunction>b__48(Lookup n);
    [CompilerGeneratedAttribute]
private static Context <ParseLeftHandSideExpression>b__6f(AstNode v);
    [CompilerGeneratedAttribute]
private Context <ParseLeftHandSideExpression>b__70(ObjectLiteralProperty p);
    [CompilerGeneratedAttribute]
private static Context <ParseLeftHandSideExpression>b__71(AstNode v);
    [CompilerGeneratedAttribute]
private Context <ParseExpressionList>b__7d(AstNode n);
    [CompilerGeneratedAttribute]
private void <ScanNextToken>b__81(TextWriter w);
}
public class Microsoft.Ajax.Utilities.JSScanner : object {
    private static JSKeyword[] s_Keywords;
    private static OperatorPrecedence[] s_OperatorsPrec;
    private string m_strSourceCode;
    private int m_endPos;
    private StringBuilder m_identifier;
    private bool m_literalIssues;
    private Dictionary`2<string, string> m_defines;
    private int m_startLinePosition;
    private int m_currentPosition;
    private int m_currentLine;
    private int m_lastPosOnBuilder;
    private int m_ifDirectiveLevel;
    private int m_conditionalCompilationIfLevel;
    private bool m_conditionalCompilationOn;
    private bool m_inConditionalComment;
    private bool m_inSingleLineComment;
    private bool m_inMultipleLineComment;
    private string m_decodedString;
    private Context m_currentToken;
    private EventHandler`1<GlobalDefineEventArgs> GlobalDefine;
    private EventHandler`1<NewModuleEventArgs> NewModule;
    [CompilerGeneratedAttribute]
private ICollection`1<string> <DebugLookupCollection>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UsePreprocessorDefines>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IgnoreConditionalCompilation>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowEmbeddedAspNetBlocks>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <StripDebugCommentBlocks>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SuppressErrors>k__BackingField;
    internal ICollection`1<string> DebugLookupCollection { get; internal set; }
    public bool UsePreprocessorDefines { get; public set; }
    public bool IgnoreConditionalCompilation { get; public set; }
    public bool AllowEmbeddedAspNetBlocks { get; public set; }
    public bool LiteralHasIssues { get; }
    public string StringLiteralValue { get; }
    public int CurrentLine { get; }
    public int StartLinePosition { get; }
    public bool IsEndOfFile { get; }
    public bool StripDebugCommentBlocks { get; public set; }
    public bool SuppressErrors { get; public set; }
    internal string Identifier { get; }
    private bool IsAtEndOfLine { get; }
    public JSScanner(Context sourceContext);
    private JSScanner(IDictionary`2<string, string> defines);
    private static JSScanner();
    [CompilerGeneratedAttribute]
internal ICollection`1<string> get_DebugLookupCollection();
    [CompilerGeneratedAttribute]
internal void set_DebugLookupCollection(ICollection`1<string> value);
    [CompilerGeneratedAttribute]
public bool get_UsePreprocessorDefines();
    [CompilerGeneratedAttribute]
public void set_UsePreprocessorDefines(bool value);
    [CompilerGeneratedAttribute]
public bool get_IgnoreConditionalCompilation();
    [CompilerGeneratedAttribute]
public void set_IgnoreConditionalCompilation(bool value);
    [CompilerGeneratedAttribute]
public bool get_AllowEmbeddedAspNetBlocks();
    [CompilerGeneratedAttribute]
public void set_AllowEmbeddedAspNetBlocks(bool value);
    public bool get_LiteralHasIssues();
    public string get_StringLiteralValue();
    public int get_CurrentLine();
    public int get_StartLinePosition();
    public bool get_IsEndOfFile();
    [CompilerGeneratedAttribute]
public bool get_StripDebugCommentBlocks();
    [CompilerGeneratedAttribute]
public void set_StripDebugCommentBlocks(bool value);
    [CompilerGeneratedAttribute]
public bool get_SuppressErrors();
    [CompilerGeneratedAttribute]
public void set_SuppressErrors(bool value);
    internal string get_Identifier();
    public void add_GlobalDefine(EventHandler`1<GlobalDefineEventArgs> value);
    public void remove_GlobalDefine(EventHandler`1<GlobalDefineEventArgs> value);
    public void add_NewModule(EventHandler`1<NewModuleEventArgs> value);
    public void remove_NewModule(EventHandler`1<NewModuleEventArgs> value);
    public JSScanner Clone();
    [SuppressMessageAttribute("Microsoft.Maintainability", "CA1505:AvoidUnmaintainableCode")]
[SuppressMessageAttribute("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
public Context ScanNextToken(bool scanForRegularExpressionLiterals);
    private JSToken ScanLineTerminator(char ch);
    private JSToken IllegalCharacter();
    public void SetPreprocessorDefines(IDictionary`2<string, string> defines);
    private void OnGlobalDefine(string name);
    private void OnNewModule(string newModule);
    public static bool IsKeyword(string name, bool strictMode);
    private bool CheckSubstring(int startIndex, string target);
    private bool CheckCaseInsensitiveSubstring(string target);
    private char GetChar(int index);
    private void ScanIdentifier();
    private JSToken ScanKeyword(JSKeyword keyword);
    [SuppressMessageAttribute("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
private JSToken ScanNumber(char leadChar);
    private JSToken CheckForNumericBadEnding(JSToken token);
    internal string ScanRegExp();
    internal string ScanRegExpFlags();
    private JSToken ScanAspNetBlock();
    [SuppressMessageAttribute("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
private void ScanString(char delimiter);
    private bool ScanHexDigit(Int32& esc);
    private void SkipAspNetReplacement();
    private void SkipSingleLineComment();
    private void SkipToEndOfLine();
    private void SkipOneLineTerminator();
    public void SkipMultilineComment();
    private void SkipBlanks();
    private static bool IsBlankSpace(char c);
    private bool IsLineTerminator(char c, int increment);
    private bool IsEndLineOrEOF(char c, int increment);
    private bool get_IsAtEndOfLine();
    private static int GetHexValue(char hex);
    public static bool IsValidIdentifier(string name);
    public static bool IsSafeIdentifier(string name);
    public static bool IsValidIdentifierStart(char letter);
    public static bool IsSafeIdentifierStart(char letter);
    public static bool IsValidIdentifierPart(string text);
    public static bool IsValidIdentifierPart(char letter);
    public static bool IsSafeIdentifierPart(char letter);
    internal bool IsIdentifierPartChar(char c);
    private static void PeekUnicodeEscape(string str, Char& ch);
    private bool PeekUnicodeEscape(int index, Char& ch);
    internal bool IsIdentifierStartChar(Char& c);
    internal static bool IsDigit(char c);
    internal static bool IsHexDigit(char c);
    internal static bool IsAsciiLetter(char c);
    private string PPScanIdentifier(bool forceUpper);
    private bool PPScanInteger(Int32& intValue);
    private int PPSkipToDirective(String[] endStrings);
    private bool ScanPreprocessingDirective();
    private bool ScanGlobalsDirective();
    private bool ScanSourceDirective();
    private bool ScanIfDirective();
    private Func`3<string, string, bool> CheckForOperator(SortedDictionary`2<string, Func`3<string, string, bool>> operators);
    private bool ScanElseDirective();
    private bool ScanEndIfDirective();
    private bool ScanDefineDirective();
    private bool ScanUndefineDirective();
    private bool ScanDebugDirective();
    private void HandleError(JSError error);
    internal static JSToken StripAssignment(JSToken assignOp);
    internal static bool IsAssignmentOperator(JSToken token);
    internal static bool IsRightAssociativeOperator(JSToken token);
    internal static bool IsProcessableOperator(JSToken token);
    internal static OperatorPrecedence GetOperatorPrecedence(Context op);
    private static OperatorPrecedence[] InitOperatorsPrec();
}
public enum Microsoft.Ajax.Utilities.JSToken : Enum {
    public int value__;
    public static JSToken None;
    public static JSToken EndOfFile;
    public static JSToken Semicolon;
    public static JSToken RightCurly;
    public static JSToken LeftCurly;
    public static JSToken Debugger;
    public static JSToken Var;
    public static JSToken If;
    public static JSToken For;
    public static JSToken Do;
    public static JSToken While;
    public static JSToken Continue;
    public static JSToken Break;
    public static JSToken Return;
    public static JSToken With;
    public static JSToken Switch;
    public static JSToken Throw;
    public static JSToken Try;
    public static JSToken Function;
    public static JSToken Else;
    public static JSToken ConditionalCommentStart;
    public static JSToken ConditionalCommentEnd;
    public static JSToken ConditionalCompilationOn;
    public static JSToken ConditionalCompilationSet;
    public static JSToken ConditionalCompilationIf;
    public static JSToken ConditionalCompilationElseIf;
    public static JSToken ConditionalCompilationElse;
    public static JSToken ConditionalCompilationEnd;
    public static JSToken ConditionalCompilationVariable;
    public static JSToken AspNetBlock;
    public static JSToken Null;
    public static JSToken True;
    public static JSToken False;
    public static JSToken This;
    public static JSToken Identifier;
    public static JSToken StringLiteral;
    public static JSToken IntegerLiteral;
    public static JSToken NumericLiteral;
    public static JSToken LeftParenthesis;
    public static JSToken LeftBracket;
    public static JSToken AccessField;
    public static JSToken FirstOperator;
    public static JSToken Void;
    public static JSToken TypeOf;
    public static JSToken Delete;
    public static JSToken Increment;
    public static JSToken Decrement;
    public static JSToken LogicalNot;
    public static JSToken BitwiseNot;
    public static JSToken FirstBinaryOperator;
    public static JSToken Plus;
    public static JSToken Minus;
    public static JSToken Multiply;
    public static JSToken Divide;
    public static JSToken Modulo;
    public static JSToken BitwiseAnd;
    public static JSToken BitwiseOr;
    public static JSToken BitwiseXor;
    public static JSToken LeftShift;
    public static JSToken RightShift;
    public static JSToken UnsignedRightShift;
    public static JSToken Equal;
    public static JSToken NotEqual;
    public static JSToken StrictEqual;
    public static JSToken StrictNotEqual;
    public static JSToken LessThan;
    public static JSToken LessThanEqual;
    public static JSToken GreaterThan;
    public static JSToken GreaterThanEqual;
    public static JSToken LogicalAnd;
    public static JSToken LogicalOr;
    public static JSToken InstanceOf;
    public static JSToken In;
    public static JSToken Comma;
    public static JSToken Assign;
    public static JSToken PlusAssign;
    public static JSToken MinusAssign;
    public static JSToken MultiplyAssign;
    public static JSToken DivideAssign;
    public static JSToken ModuloAssign;
    public static JSToken BitwiseAndAssign;
    public static JSToken BitwiseOrAssign;
    public static JSToken BitwiseXorAssign;
    public static JSToken LeftShiftAssign;
    public static JSToken RightShiftAssign;
    public static JSToken UnsignedRightShiftAssign;
    public static JSToken LastAssign;
    public static JSToken ConditionalIf;
    public static JSToken Colon;
    public static JSToken LastOperator;
    public static JSToken Case;
    public static JSToken Catch;
    public static JSToken Default;
    public static JSToken Finally;
    public static JSToken New;
    public static JSToken RightParenthesis;
    public static JSToken RightBracket;
    public static JSToken SingleLineComment;
    public static JSToken MultipleLineComment;
    public static JSToken UnterminatedComment;
    public static JSToken PreprocessorDirective;
    public static JSToken Class;
    public static JSToken Const;
    public static JSToken Enum;
    public static JSToken Export;
    public static JSToken Extends;
    public static JSToken Import;
    public static JSToken Super;
    public static JSToken Implements;
    public static JSToken Interface;
    public static JSToken Let;
    public static JSToken Package;
    public static JSToken Private;
    public static JSToken Protected;
    public static JSToken Public;
    public static JSToken Static;
    public static JSToken Yield;
    public static JSToken Native;
    public static JSToken Get;
    public static JSToken Set;
    public static JSToken EndOfLine;
    public static JSToken WhiteSpace;
    public static JSToken Error;
    public static JSToken RegularExpression;
}
public class Microsoft.Ajax.Utilities.JSVariableField : object {
    private ActivationObject m_owningScope;
    private HashSet`1<INameReference> m_referenceTable;
    private HashSet`1<INameDeclaration> m_declarationTable;
    private bool m_canCrunch;
    private bool m_isDeclared;
    private bool m_isGenerated;
    private string m_crunchedName;
    [CompilerGeneratedAttribute]
private Context <OriginalContext>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private FieldType <FieldType>k__BackingField;
    [CompilerGeneratedAttribute]
private FieldAttributes <Attributes>k__BackingField;
    [CompilerGeneratedAttribute]
private object <FieldValue>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsFunction>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsAmbiguous>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsPlaceholder>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasNoReferences>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <InitializationOnly>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Position>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <WasRemoved>k__BackingField;
    [CompilerGeneratedAttribute]
private JSVariableField <OuterField>k__BackingField;
    [CompilerGeneratedAttribute]
private JSVariableField <GhostedField>k__BackingField;
    public Context OriginalContext { get; public set; }
    public string Name { get; private set; }
    public FieldType FieldType { get; public set; }
    public FieldAttributes Attributes { get; public set; }
    public object FieldValue { get; public set; }
    public bool IsFunction { get; internal set; }
    public bool IsAmbiguous { get; public set; }
    public bool IsPlaceholder { get; public set; }
    public bool HasNoReferences { get; public set; }
    public bool InitializationOnly { get; public set; }
    public int Position { get; public set; }
    public bool WasRemoved { get; public set; }
    public JSVariableField OuterField { get; public set; }
    public ActivationObject OwningScope { get; public set; }
    public JSVariableField GhostedField { get; public set; }
    public int RefCount { get; }
    public ICollection`1<INameReference> References { get; }
    public INameReference OnlyReference { get; }
    public ICollection`1<INameDeclaration> Declarations { get; }
    public INameDeclaration OnlyDeclaration { get; }
    public bool IsLiteral { get; }
    public bool CanCrunch { get; public set; }
    public bool IsDeclared { get; public set; }
    public bool IsGenerated { get; public set; }
    public bool IsOuterReference { get; }
    public string CrunchedName { get; public set; }
    public bool IsReferenced { get; }
    public bool IsReferencedInnerScope { get; }
    public JSVariableField(FieldType fieldType, string name, FieldAttributes fieldAttributes, object value);
    internal JSVariableField(FieldType fieldType, JSVariableField outerField);
    [CompilerGeneratedAttribute]
public Context get_OriginalContext();
    [CompilerGeneratedAttribute]
public void set_OriginalContext(Context value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
public FieldType get_FieldType();
    [CompilerGeneratedAttribute]
public void set_FieldType(FieldType value);
    [CompilerGeneratedAttribute]
public FieldAttributes get_Attributes();
    [CompilerGeneratedAttribute]
public void set_Attributes(FieldAttributes value);
    [CompilerGeneratedAttribute]
public object get_FieldValue();
    [CompilerGeneratedAttribute]
public void set_FieldValue(object value);
    [CompilerGeneratedAttribute]
public bool get_IsFunction();
    [CompilerGeneratedAttribute]
internal void set_IsFunction(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsAmbiguous();
    [CompilerGeneratedAttribute]
public void set_IsAmbiguous(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsPlaceholder();
    [CompilerGeneratedAttribute]
public void set_IsPlaceholder(bool value);
    [CompilerGeneratedAttribute]
public bool get_HasNoReferences();
    [CompilerGeneratedAttribute]
public void set_HasNoReferences(bool value);
    [CompilerGeneratedAttribute]
public bool get_InitializationOnly();
    [CompilerGeneratedAttribute]
public void set_InitializationOnly(bool value);
    [CompilerGeneratedAttribute]
public int get_Position();
    [CompilerGeneratedAttribute]
public void set_Position(int value);
    [CompilerGeneratedAttribute]
public bool get_WasRemoved();
    [CompilerGeneratedAttribute]
public void set_WasRemoved(bool value);
    [CompilerGeneratedAttribute]
public JSVariableField get_OuterField();
    [CompilerGeneratedAttribute]
public void set_OuterField(JSVariableField value);
    public ActivationObject get_OwningScope();
    public void set_OwningScope(ActivationObject value);
    [CompilerGeneratedAttribute]
public JSVariableField get_GhostedField();
    [CompilerGeneratedAttribute]
public void set_GhostedField(JSVariableField value);
    public int get_RefCount();
    public ICollection`1<INameReference> get_References();
    public INameReference get_OnlyReference();
    public ICollection`1<INameDeclaration> get_Declarations();
    public INameDeclaration get_OnlyDeclaration();
    public bool get_IsLiteral();
    public bool get_CanCrunch();
    public void set_CanCrunch(bool value);
    public bool get_IsDeclared();
    public void set_IsDeclared(bool value);
    public bool get_IsGenerated();
    public void set_IsGenerated(bool value);
    public bool get_IsOuterReference();
    public string get_CrunchedName();
    public void set_CrunchedName(string value);
    public bool get_IsReferenced();
    public bool get_IsReferencedInnerScope();
    private void SetFieldsBasedOnType(FieldType fieldType);
    public void AddReference(INameReference reference);
    public void AddReferences(IEnumerable`1<INameReference> references);
    public void Detach();
    public virtual string ToString();
    public virtual int GetHashCode();
    public bool IsSameField(JSVariableField otherField);
}
public class Microsoft.Ajax.Utilities.LabeledStatement : AstNode {
    private AstNode m_statement;
    [CompilerGeneratedAttribute]
private int <NestCount>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Label>k__BackingField;
    [CompilerGeneratedAttribute]
private Context <ColonContext>k__BackingField;
    public AstNode Statement { get; public set; }
    public int NestCount { get; public set; }
    public string Label { get; public set; }
    public Context ColonContext { get; public set; }
    internal bool RequiresSeparator { get; }
    public AstNode LeftHandSide { get; }
    public IEnumerable`1<AstNode> Children { get; }
    public LabeledStatement(Context context, JSParser parser);
    public AstNode get_Statement();
    public void set_Statement(AstNode value);
    [CompilerGeneratedAttribute]
public int get_NestCount();
    [CompilerGeneratedAttribute]
public void set_NestCount(int value);
    [CompilerGeneratedAttribute]
public string get_Label();
    [CompilerGeneratedAttribute]
public void set_Label(string value);
    [CompilerGeneratedAttribute]
public Context get_ColonContext();
    [CompilerGeneratedAttribute]
public void set_ColonContext(Context value);
    public virtual void Accept(IVisitor visitor);
    internal virtual bool get_RequiresSeparator();
    public virtual AstNode get_LeftHandSide();
    internal virtual bool EncloseBlock(EncloseBlockType type);
    public virtual IEnumerable`1<AstNode> get_Children();
    public virtual bool ReplaceChild(AstNode oldNode, AstNode newNode);
    [CompilerGeneratedAttribute]
private AstNode <set_Statement>b__0(AstNode n);
    [CompilerGeneratedAttribute]
private AstNode <set_Statement>b__1(AstNode n);
}
[SuppressMessageAttribute("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
public class Microsoft.Ajax.Utilities.LexicalDeclaration : Declaration {
    [CompilerGeneratedAttribute]
private JSToken <StatementToken>k__BackingField;
    public JSToken StatementToken { get; public set; }
    public LexicalDeclaration(Context context, JSParser parser);
    [CompilerGeneratedAttribute]
public JSToken get_StatementToken();
    [CompilerGeneratedAttribute]
public void set_StatementToken(JSToken value);
    public virtual void Accept(IVisitor visitor);
}
public enum Microsoft.Ajax.Utilities.LocalRenaming : Enum {
    public int value__;
    public static LocalRenaming KeepAll;
    public static LocalRenaming KeepLocalizationVars;
    public static LocalRenaming CrunchAll;
}
public class Microsoft.Ajax.Utilities.LogicalNot : TreeVisitor {
    private AstNode m_expression;
    private bool m_measure;
    private JSParser m_parser;
    private int m_delta;
    public LogicalNot(AstNode node, JSParser parser);
    public int Measure();
    public void Apply();
    public static void Apply(AstNode node, JSParser parser);
    private void WrapWithLogicalNot(AstNode operand);
    private void TypicalHandler(AstNode node);
    public virtual void Visit(AstNodeList node);
    public virtual void Visit(ArrayLiteral node);
    public virtual void Visit(BinaryOperator node);
    private void MeasureBinaryOperator(BinaryOperator node);
    private void ConvertBinaryOperator(BinaryOperator node);
    public virtual void Visit(CallNode node);
    public virtual void Visit(Conditional node);
    public virtual void Visit(ConstantWrapper node);
    public virtual void Visit(GroupingOperator node);
    public virtual void Visit(Lookup node);
    public virtual void Visit(Member node);
    public virtual void Visit(ObjectLiteral node);
    public virtual void Visit(RegExpLiteral node);
    public virtual void Visit(ThisLiteral node);
    public virtual void Visit(UnaryOperator node);
}
public class Microsoft.Ajax.Utilities.Lookup : Expression {
    [CompilerGeneratedAttribute]
private JSVariableField <VariableField>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsGenerated>k__BackingField;
    [CompilerGeneratedAttribute]
private ReferenceType <RefType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public JSVariableField VariableField { get; internal set; }
    public bool IsGenerated { get; public set; }
    public ReferenceType RefType { get; public set; }
    public string Name { get; public set; }
    public bool IsAssignment { get; }
    public AstNode AssignmentValue { get; }
    internal bool IsDebuggerStatement { get; }
    public ActivationObject VariableScope { get; }
    public Lookup(Context context, JSParser parser);
    [CompilerGeneratedAttribute]
public sealed virtual JSVariableField get_VariableField();
    [CompilerGeneratedAttribute]
internal void set_VariableField(JSVariableField value);
    [CompilerGeneratedAttribute]
public bool get_IsGenerated();
    [CompilerGeneratedAttribute]
public void set_IsGenerated(bool value);
    [CompilerGeneratedAttribute]
public ReferenceType get_RefType();
    [CompilerGeneratedAttribute]
public void set_RefType(ReferenceType value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    public sealed virtual bool get_IsAssignment();
    public sealed virtual AstNode get_AssignmentValue();
    public virtual void Accept(IVisitor visitor);
    public virtual bool IsEquivalentTo(AstNode otherNode);
    internal virtual string GetFunctionGuess(AstNode target);
    private static bool MatchMemberName(AstNode node, string lookup, int startIndex, int endIndex);
    private static bool MatchesMemberChain(AstNode parent, string lookup, int startIndex);
    internal virtual bool get_IsDebuggerStatement();
    public virtual string ToString();
    public sealed virtual ActivationObject get_VariableScope();
}
public class Microsoft.Ajax.Utilities.MatchPropertiesVisitor : object {
    private String[] m_parts;
    private bool m_isMatch;
    private int m_index;
    public bool Match(AstNode node, string identifiers);
    public sealed virtual void Visit(CallNode node);
    public sealed virtual void Visit(Member node);
    public sealed virtual void Visit(Lookup node);
    public virtual void Visit(GroupingOperator node);
    public sealed virtual void Visit(ArrayLiteral node);
    public sealed virtual void Visit(AspNetBlockNode node);
    public sealed virtual void Visit(AstNodeList node);
    public sealed virtual void Visit(BinaryOperator node);
    public sealed virtual void Visit(Block node);
    public sealed virtual void Visit(Break node);
    public sealed virtual void Visit(ConditionalCompilationComment node);
    public sealed virtual void Visit(ConditionalCompilationElse node);
    public sealed virtual void Visit(ConditionalCompilationElseIf node);
    public sealed virtual void Visit(ConditionalCompilationEnd node);
    public sealed virtual void Visit(ConditionalCompilationIf node);
    public sealed virtual void Visit(ConditionalCompilationOn node);
    public sealed virtual void Visit(ConditionalCompilationSet node);
    public sealed virtual void Visit(Conditional node);
    public sealed virtual void Visit(ConstantWrapper node);
    public sealed virtual void Visit(ConstantWrapperPP node);
    public sealed virtual void Visit(ConstStatement node);
    public sealed virtual void Visit(ContinueNode node);
    public sealed virtual void Visit(CustomNode node);
    public sealed virtual void Visit(DebuggerNode node);
    public sealed virtual void Visit(DirectivePrologue node);
    public sealed virtual void Visit(DoWhile node);
    public sealed virtual void Visit(EmptyStatement node);
    public sealed virtual void Visit(ForIn node);
    public sealed virtual void Visit(ForNode node);
    public sealed virtual void Visit(FunctionObject node);
    public sealed virtual void Visit(GetterSetter node);
    public sealed virtual void Visit(IfNode node);
    public sealed virtual void Visit(ImportantComment node);
    public sealed virtual void Visit(LabeledStatement node);
    public sealed virtual void Visit(LexicalDeclaration node);
    public sealed virtual void Visit(ObjectLiteral node);
    public sealed virtual void Visit(ObjectLiteralField node);
    public sealed virtual void Visit(ObjectLiteralProperty node);
    public sealed virtual void Visit(ParameterDeclaration node);
    public sealed virtual void Visit(RegExpLiteral node);
    public sealed virtual void Visit(ReturnNode node);
    public sealed virtual void Visit(Switch node);
    public sealed virtual void Visit(SwitchCase node);
    public sealed virtual void Visit(ThisLiteral node);
    public sealed virtual void Visit(ThrowNode node);
    public sealed virtual void Visit(TryNode node);
    public sealed virtual void Visit(UnaryOperator node);
    public sealed virtual void Visit(Var node);
    public sealed virtual void Visit(VariableDeclaration node);
    public sealed virtual void Visit(WhileNode node);
    public sealed virtual void Visit(WithNode node);
}
public class Microsoft.Ajax.Utilities.Member : Expression {
    private AstNode m_root;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private Context <NameContext>k__BackingField;
    public AstNode Root { get; public set; }
    public string Name { get; public set; }
    public Context NameContext { get; public set; }
    public OperatorPrecedence Precedence { get; }
    internal bool IsDebuggerStatement { get; }
    public IEnumerable`1<AstNode> Children { get; }
    public AstNode LeftHandSide { get; }
    public Member(Context context, JSParser parser);
    public AstNode get_Root();
    public void set_Root(AstNode value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public Context get_NameContext();
    [CompilerGeneratedAttribute]
public void set_NameContext(Context value);
    public virtual OperatorPrecedence get_Precedence();
    public virtual void Accept(IVisitor visitor);
    public virtual bool IsEquivalentTo(AstNode otherNode);
    internal virtual string GetFunctionGuess(AstNode target);
    internal virtual bool get_IsDebuggerStatement();
    public virtual IEnumerable`1<AstNode> get_Children();
    public virtual bool ReplaceChild(AstNode oldNode, AstNode newNode);
    public virtual AstNode get_LeftHandSide();
    [CompilerGeneratedAttribute]
private AstNode <set_Root>b__0(AstNode n);
    [CompilerGeneratedAttribute]
private AstNode <set_Root>b__1(AstNode n);
}
public class Microsoft.Ajax.Utilities.Minifier : object {
    private List`1<ContextError> m_errorList;
    [CompilerGeneratedAttribute]
private int <WarningLevel>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FileName>k__BackingField;
    public int WarningLevel { get; public set; }
    public string FileName { get; public set; }
    public ICollection`1<ContextError> ErrorList { get; }
    public ICollection`1<string> Errors { get; }
    [CompilerGeneratedAttribute]
public int get_WarningLevel();
    [CompilerGeneratedAttribute]
public void set_WarningLevel(int value);
    [CompilerGeneratedAttribute]
public string get_FileName();
    [CompilerGeneratedAttribute]
public void set_FileName(string value);
    public ICollection`1<ContextError> get_ErrorList();
    public ICollection`1<string> get_Errors();
    public string MinifyJavaScript(string source);
    public string MinifyJavaScript(string source, CodeSettings codeSettings);
    public string MinifyStyleSheet(string source);
    public string MinifyStyleSheet(string source, CssSettings settings);
    public string MinifyStyleSheet(string source, CssSettings settings, CodeSettings scriptSettings);
    private void OnCssError(object sender, CssErrorEventArgs e);
    private void OnJavaScriptError(object sender, JScriptExceptionEventArgs e);
}
public class Microsoft.Ajax.Utilities.Missing : object {
    private static Missing s_instance;
    public static Missing Value { get; }
    private static Missing();
    public static Missing get_Value();
    public virtual string ToString();
}
public class Microsoft.Ajax.Utilities.NewModuleEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private string <Module>k__BackingField;
    public string Module { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Module();
    [CompilerGeneratedAttribute]
public void set_Module(string value);
}
internal class Microsoft.Ajax.Utilities.NewParensVisitor : object {
    private bool m_needsParens;
    private bool m_outerHasNoArguments;
    private NewParensVisitor(bool outerHasNoArguments);
    public static bool NeedsParens(AstNode expression, bool outerHasNoArguments);
    public sealed virtual void Visit(ArrayLiteral node);
    public sealed virtual void Visit(AspNetBlockNode node);
    public sealed virtual void Visit(BinaryOperator node);
    public sealed virtual void Visit(CallNode node);
    public sealed virtual void Visit(ConditionalCompilationComment node);
    public sealed virtual void Visit(ConditionalCompilationElse node);
    public sealed virtual void Visit(ConditionalCompilationElseIf node);
    public sealed virtual void Visit(ConditionalCompilationEnd node);
    public sealed virtual void Visit(ConditionalCompilationIf node);
    public sealed virtual void Visit(ConditionalCompilationOn node);
    public sealed virtual void Visit(ConditionalCompilationSet node);
    public sealed virtual void Visit(Conditional node);
    public sealed virtual void Visit(ConstantWrapper node);
    public sealed virtual void Visit(ConstantWrapperPP node);
    public sealed virtual void Visit(CustomNode node);
    public sealed virtual void Visit(FunctionObject node);
    public virtual void Visit(GroupingOperator node);
    public sealed virtual void Visit(ImportantComment node);
    public sealed virtual void Visit(Lookup node);
    public sealed virtual void Visit(Member node);
    public sealed virtual void Visit(ObjectLiteral node);
    public sealed virtual void Visit(ParameterDeclaration node);
    public sealed virtual void Visit(RegExpLiteral node);
    public sealed virtual void Visit(ThisLiteral node);
    public sealed virtual void Visit(UnaryOperator node);
    public sealed virtual void Visit(AstNodeList node);
    public sealed virtual void Visit(GetterSetter node);
    public sealed virtual void Visit(ObjectLiteralField node);
    public sealed virtual void Visit(ObjectLiteralProperty node);
    public sealed virtual void Visit(Block node);
    public sealed virtual void Visit(Break node);
    public sealed virtual void Visit(ConstStatement node);
    public sealed virtual void Visit(ContinueNode node);
    public sealed virtual void Visit(DebuggerNode node);
    public sealed virtual void Visit(DirectivePrologue node);
    public sealed virtual void Visit(DoWhile node);
    public sealed virtual void Visit(EmptyStatement node);
    public sealed virtual void Visit(ForIn node);
    public sealed virtual void Visit(ForNode node);
    public sealed virtual void Visit(IfNode node);
    public sealed virtual void Visit(LabeledStatement node);
    public sealed virtual void Visit(LexicalDeclaration node);
    public sealed virtual void Visit(ReturnNode node);
    public sealed virtual void Visit(Switch node);
    public sealed virtual void Visit(SwitchCase node);
    public sealed virtual void Visit(ThrowNode node);
    public sealed virtual void Visit(TryNode node);
    public sealed virtual void Visit(Var node);
    public sealed virtual void Visit(VariableDeclaration node);
    public sealed virtual void Visit(WhileNode node);
    public sealed virtual void Visit(WithNode node);
}
public class Microsoft.Ajax.Utilities.ObjectLiteral : Expression {
    private AstNodeList m_properties;
    public AstNodeList Properties { get; public set; }
    public bool IsConstant { get; }
    public IEnumerable`1<AstNode> Children { get; }
    public ObjectLiteral(Context context, JSParser parser);
    public AstNodeList get_Properties();
    public void set_Properties(AstNodeList value);
    public virtual bool get_IsConstant();
    public virtual void Accept(IVisitor visitor);
    public virtual IEnumerable`1<AstNode> get_Children();
    public virtual bool ReplaceChild(AstNode oldNode, AstNode newNode);
    [CompilerGeneratedAttribute]
private AstNode <set_Properties>b__0(AstNodeList n);
    [CompilerGeneratedAttribute]
private AstNode <set_Properties>b__1(AstNodeList n);
}
public class Microsoft.Ajax.Utilities.ObjectLiteralField : ConstantWrapper {
    [CompilerGeneratedAttribute]
private Context <ColonContext>k__BackingField;
    public Context ColonContext { get; public set; }
    public ObjectLiteralField(object value, PrimitiveType primitiveType, Context context, JSParser parser);
    [CompilerGeneratedAttribute]
public Context get_ColonContext();
    [CompilerGeneratedAttribute]
public void set_ColonContext(Context value);
    public virtual void Accept(IVisitor visitor);
}
public class Microsoft.Ajax.Utilities.ObjectLiteralProperty : AstNode {
    private ObjectLiteralField m_propertyName;
    private AstNode m_propertyValue;
    public ObjectLiteralField Name { get; public set; }
    public AstNode Value { get; public set; }
    public bool IsConstant { get; }
    public IEnumerable`1<AstNode> Children { get; }
    public ObjectLiteralProperty(Context context, JSParser parser);
    public ObjectLiteralField get_Name();
    public void set_Name(ObjectLiteralField value);
    public AstNode get_Value();
    public void set_Value(AstNode value);
    public virtual bool get_IsConstant();
    public virtual void Accept(IVisitor visitor);
    public virtual IEnumerable`1<AstNode> get_Children();
    public virtual bool ReplaceChild(AstNode oldNode, AstNode newNode);
    internal virtual string GetFunctionGuess(AstNode target);
    [CompilerGeneratedAttribute]
private AstNode <set_Name>b__0(ObjectLiteralField n);
    [CompilerGeneratedAttribute]
private AstNode <set_Name>b__1(ObjectLiteralField n);
    [CompilerGeneratedAttribute]
private AstNode <set_Value>b__2(AstNode n);
    [CompilerGeneratedAttribute]
private AstNode <set_Value>b__3(AstNode n);
}
public enum Microsoft.Ajax.Utilities.OperatorPrecedence : Enum {
    public int value__;
    public static OperatorPrecedence None;
    public static OperatorPrecedence Comma;
    public static OperatorPrecedence Assignment;
    public static OperatorPrecedence Conditional;
    public static OperatorPrecedence LogicalOr;
    public static OperatorPrecedence LogicalAnd;
    public static OperatorPrecedence BitwiseOr;
    public static OperatorPrecedence BitwiseXor;
    public static OperatorPrecedence BitwiseAnd;
    public static OperatorPrecedence Equality;
    public static OperatorPrecedence Relational;
    public static OperatorPrecedence Shift;
    public static OperatorPrecedence Additive;
    public static OperatorPrecedence Multiplicative;
    public static OperatorPrecedence Unary;
    public static OperatorPrecedence FieldAccess;
    public static OperatorPrecedence Primary;
    public static OperatorPrecedence Highest;
}
public enum Microsoft.Ajax.Utilities.OutputMode : Enum {
    public int value__;
    public static OutputMode SingleLine;
    public static OutputMode MultipleLines;
    public static OutputMode None;
}
[SuppressMessageAttribute("Microsoft.Maintainability", "CA1506:AvoidExcessiveClassCoupling")]
public class Microsoft.Ajax.Utilities.OutputVisitor : object {
    private TextWriter m_outputStream;
    private char m_lastCharacter;
    private bool m_lastCountOdd;
    private bool m_onNewLine;
    private bool m_startOfStatement;
    private bool m_outputCCOn;
    private bool m_doneWithGlobalDirectives;
    private bool m_needsStrictDirective;
    private bool m_noLineBreaks;
    private int m_indentLevel;
    private int m_lineLength;
    private int m_lineCount;
    private Stack`1<string> m_functionStack;
    private int m_segmentStartLine;
    private int m_segmentStartColumn;
    private Func`2<char, bool> m_addSpaceIfTrue;
    private bool m_noIn;
    private CodeSettings m_settings;
    private static Regex s_decimalFormat;
    [CompilerGeneratedAttribute]
private static Func`2<AstNode, Context> CS$<>9__CachedAnonymousMethodDelegate5;
    [CompilerGeneratedAttribute]
private static Func`2<AstNode, Context> CS$<>9__CachedAnonymousMethodDelegate7;
    [CompilerGeneratedAttribute]
private static Func`2<char, bool> CS$<>9__CachedAnonymousMethodDelegate9;
    [CompilerGeneratedAttribute]
private static Func`2<AstNode, Context> CS$<>9__CachedAnonymousMethodDelegateb;
    [CompilerGeneratedAttribute]
private static Func`2<AstNodeList, int> CS$<>9__CachedAnonymousMethodDelegated;
    [CompilerGeneratedAttribute]
private static Func`2<ParameterDeclaration, JSVariableField> CS$<>9__CachedAnonymousMethodDelegate13;
    [CompilerGeneratedAttribute]
private static Func`2<AstNode, Context> CS$<>9__CachedAnonymousMethodDelegate14;
    [CompilerGeneratedAttribute]
private static Func`2<Block, Context> CS$<>9__CachedAnonymousMethodDelegate15;
    [CompilerGeneratedAttribute]
private static Func`2<Block, Context> CS$<>9__CachedAnonymousMethodDelegate17;
    private OutputVisitor(TextWriter writer, CodeSettings settings);
    private static OutputVisitor();
    public static void Apply(TextWriter writer, AstNode node, CodeSettings settings);
    public sealed virtual void Visit(ArrayLiteral node);
    public sealed virtual void Visit(AspNetBlockNode node);
    public sealed virtual void Visit(AstNodeList node);
    [SuppressMessageAttribute("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
public sealed virtual void Visit(BinaryOperator node);
    public sealed virtual void Visit(Block node);
    public sealed virtual void Visit(Break node);
    public sealed virtual void Visit(CallNode node);
    public sealed virtual void Visit(ConditionalCompilationComment node);
    public sealed virtual void Visit(ConditionalCompilationElse node);
    public sealed virtual void Visit(ConditionalCompilationElseIf node);
    public sealed virtual void Visit(ConditionalCompilationEnd node);
    public sealed virtual void Visit(ConditionalCompilationIf node);
    public sealed virtual void Visit(ConditionalCompilationOn node);
    public sealed virtual void Visit(ConditionalCompilationSet node);
    public sealed virtual void Visit(Conditional node);
    public sealed virtual void Visit(ConstantWrapper node);
    public sealed virtual void Visit(ConstantWrapperPP node);
    public sealed virtual void Visit(ConstStatement node);
    public sealed virtual void Visit(ContinueNode node);
    public sealed virtual void Visit(CustomNode node);
    public sealed virtual void Visit(DebuggerNode node);
    public sealed virtual void Visit(DirectivePrologue node);
    public sealed virtual void Visit(DoWhile node);
    public sealed virtual void Visit(EmptyStatement node);
    public sealed virtual void Visit(ForIn node);
    public sealed virtual void Visit(ForNode node);
    public sealed virtual void Visit(FunctionObject node);
    public sealed virtual void Visit(GetterSetter node);
    public virtual void Visit(GroupingOperator node);
    [SuppressMessageAttribute("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
public sealed virtual void Visit(IfNode node);
    public sealed virtual void Visit(ImportantComment node);
    public sealed virtual void Visit(LabeledStatement node);
    public sealed virtual void Visit(LexicalDeclaration node);
    public sealed virtual void Visit(Lookup node);
    public sealed virtual void Visit(Member node);
    public sealed virtual void Visit(ObjectLiteral node);
    public sealed virtual void Visit(ObjectLiteralField node);
    public sealed virtual void Visit(ObjectLiteralProperty node);
    public sealed virtual void Visit(ParameterDeclaration node);
    public sealed virtual void Visit(RegExpLiteral node);
    public sealed virtual void Visit(ReturnNode node);
    public sealed virtual void Visit(Switch node);
    public sealed virtual void Visit(SwitchCase node);
    public sealed virtual void Visit(ThisLiteral node);
    public sealed virtual void Visit(ThrowNode node);
    public sealed virtual void Visit(TryNode node);
    private void OutputTryBranch(TryNode node);
    private void OutputCatchBranch(TryNode node);
    private void OutputFinallyBranch(TryNode node);
    public sealed virtual void Visit(Var node);
    public sealed virtual void Visit(VariableDeclaration node);
    public sealed virtual void Visit(UnaryOperator node);
    public sealed virtual void Visit(WhileNode node);
    public sealed virtual void Visit(WithNode node);
    private void Output(string text);
    private void Output(char ch);
    private void OutputSpaceOrLineBreak();
    private void InsertSpaceIfNeeded(char ch);
    private void InsertSpaceIfNeeded(string text);
    private void SetLastCharState(char ch);
    private void SetLastCharState(string text);
    private void Indent();
    private void Unindent();
    private void OutputPossibleLineBreak(char ch);
    private bool ReplaceableSemicolon();
    private void BreakLine(bool forceBreak);
    private void NewLine();
    private int WriteToStream(string text);
    private int WriteToStream(char ch);
    [SuppressMessageAttribute("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
public static string OperatorString(JSToken token);
    private void AcceptNodeWithParens(AstNode node, bool needsParens);
    private void OutputFunctionArgsAndBody(FunctionObject node, bool removeUnused);
    private void OutputBlock(Block block);
    private void OutputBlockWithBraces(Block block);
    private string InlineSafeString(string text);
    public static string NormalizeNumber(double numericValue, Context originalContext);
    private static string GetSmallestRep(string number);
    private static string NormalOrHexIfSmaller(double doubleValue, string normal);
    public static string EscapeString(string text);
    private static int QuoteFactor(string text);
    private object StartSymbol(AstNode node);
    private void MarkSegment(AstNode node, string name, Context context);
    private void EndSymbol(object symbol);
    private void SetContextOutputPosition(Context context);
    private static void SetContextOutputPosition(Context context, Context fromContext);
    [CompilerGeneratedAttribute]
private static Context <Visit>b__4(AstNode e);
    [CompilerGeneratedAttribute]
private static Context <Visit>b__6(AstNode n);
    [CompilerGeneratedAttribute]
private static bool <Visit>b__8(char c);
    [CompilerGeneratedAttribute]
private static Context <Visit>b__a(AstNode a);
    [CompilerGeneratedAttribute]
private static int <Visit>b__c(AstNodeList p);
    [CompilerGeneratedAttribute]
private void <Visit>b__e(JSVariableField f);
    [CompilerGeneratedAttribute]
private static JSVariableField <OutputFunctionArgsAndBody>b__10(ParameterDeclaration p);
    [CompilerGeneratedAttribute]
private static Context <OutputFunctionArgsAndBody>b__11(AstNode p);
    [CompilerGeneratedAttribute]
private static Context <OutputFunctionArgsAndBody>b__12(Block b);
    [CompilerGeneratedAttribute]
private static Context <OutputBlock>b__16(Block b);
}
public class Microsoft.Ajax.Utilities.ParameterDeclaration : AstNode {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Position>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RenameNotAllowed>k__BackingField;
    [CompilerGeneratedAttribute]
private JSVariableField <VariableField>k__BackingField;
    public string Name { get; public set; }
    public int Position { get; public set; }
    public bool RenameNotAllowed { get; public set; }
    public JSVariableField VariableField { get; public set; }
    public AstNode Initializer { get; }
    public Context NameContext { get; }
    public ParameterDeclaration(Context context, JSParser parser);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public int get_Position();
    [CompilerGeneratedAttribute]
public void set_Position(int value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_RenameNotAllowed();
    [CompilerGeneratedAttribute]
public void set_RenameNotAllowed(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual JSVariableField get_VariableField();
    [CompilerGeneratedAttribute]
public sealed virtual void set_VariableField(JSVariableField value);
    public sealed virtual AstNode get_Initializer();
    public sealed virtual Context get_NameContext();
    public virtual void Accept(IVisitor visitor);
}
internal class Microsoft.Ajax.Utilities.Position : object {
    private int m_line;
    private int m_char;
    public int Line { get; }
    public int Char { get; }
    public Position(int line, int character);
    public int get_Line();
    public int get_Char();
    public void NextLine();
    public void NextChar();
    public void PreviousChar();
    public Position Clone();
}
public enum Microsoft.Ajax.Utilities.PrimitiveType : Enum {
    public int value__;
    public static PrimitiveType Null;
    public static PrimitiveType Boolean;
    public static PrimitiveType Number;
    public static PrimitiveType String;
    public static PrimitiveType Other;
}
internal class Microsoft.Ajax.Utilities.ReferenceComparer : object {
    public static IComparer`1<JSVariableField> Instance;
    private static ReferenceComparer();
    public sealed virtual int Compare(JSVariableField left, JSVariableField right);
}
public enum Microsoft.Ajax.Utilities.ReferenceType : Enum {
    public int value__;
    public static ReferenceType Variable;
    public static ReferenceType Function;
    public static ReferenceType Constructor;
}
public class Microsoft.Ajax.Utilities.RegExpLiteral : Expression {
    [CompilerGeneratedAttribute]
private string <Pattern>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PatternSwitches>k__BackingField;
    public string Pattern { get; public set; }
    public string PatternSwitches { get; public set; }
    public bool IsConstant { get; }
    public RegExpLiteral(Context context, JSParser parser);
    [CompilerGeneratedAttribute]
public string get_Pattern();
    [CompilerGeneratedAttribute]
public void set_Pattern(string value);
    [CompilerGeneratedAttribute]
public string get_PatternSwitches();
    [CompilerGeneratedAttribute]
public void set_PatternSwitches(string value);
    public virtual bool get_IsConstant();
    public virtual void Accept(IVisitor visitor);
    public virtual bool IsEquivalentTo(AstNode otherNode);
}
internal class Microsoft.Ajax.Utilities.ReorderScopeVisitor : TreeVisitor {
    private List`1<FunctionObject> m_functionDeclarations;
    private List`1<FunctionObject> m_functionExpressions;
    private List`1<DirectivePrologue> m_moduleDirectives;
    private List`1<Var> m_varStatements;
    private bool m_moveVarStatements;
    private bool m_moveFunctionDecls;
    private bool m_combineAdjacentVars;
    private int m_conditionalCommentLevel;
    private ReorderScopeVisitor(JSParser parser);
    public static void Apply(Block block, JSParser parser);
    private static int RelocateDirectivePrologue(Block block, int insertAt, DirectivePrologue directivePrologue);
    private static int RelocateFunction(Block block, int insertAt, FunctionObject funcDecl);
    private static int RelocateVar(Block block, int insertAt, Var varStatement);
    private static void UnnestBlocks(Block node);
    public virtual void Visit(Block node);
    public virtual void Visit(ConditionalCompilationComment node);
    public virtual void Visit(ConditionalCompilationIf node);
    public virtual void Visit(ConditionalCompilationEnd node);
    public virtual void Visit(ConstantWrapper node);
    public virtual void Visit(DirectivePrologue node);
    public virtual void Visit(FunctionObject node);
    public virtual void Visit(Var node);
    public virtual void Visit(GroupingOperator node);
    private static bool IsMinificationHint(ConstantWrapper node);
}
public class Microsoft.Ajax.Utilities.ResolutionVisitor : object {
    private long m_orderIndex;
    private bool m_isUnreachable;
    private int m_withDepth;
    private Stack`1<ActivationObject> m_lexicalStack;
    private Stack`1<ActivationObject> m_variableStack;
    private CodeSettings m_settings;
    [CompilerGeneratedAttribute]
private static Func`2<JSVariableField, bool> CS$<>9__CachedAnonymousMethodDelegate3;
    private ActivationObject CurrentLexicalScope { get; }
    private ActivationObject CurrentVariableScope { get; }
    private long NextOrderIndex { get; }
    private ResolutionVisitor(ActivationObject rootScope, CodeSettings settings);
    private ActivationObject get_CurrentLexicalScope();
    private ActivationObject get_CurrentVariableScope();
    private long get_NextOrderIndex();
    public static void Apply(AstNode node, ActivationObject scope, CodeSettings settings);
    private static void CollapseBlockScope(ActivationObject blockScope);
    private static void CreateFields(ActivationObject scope);
    private static void ResolveLookups(ActivationObject scope, CodeSettings settings);
    private static void MakeExpectedGlobal(JSVariableField varField);
    private static void ResolveLookup(ActivationObject scope, Lookup lookup, CodeSettings settings);
    private static void AddGhostedFields(ActivationObject scope);
    private static void ResolveGhostedCatchParameter(ActivationObject scope, ParameterDeclaration catchParameter);
    private static void ResolveGhostedFunctions(ActivationObject scope, FunctionObject funcObject);
    public sealed virtual void Visit(ArrayLiteral node);
    public sealed virtual void Visit(AspNetBlockNode node);
    public sealed virtual void Visit(AstNodeList node);
    public sealed virtual void Visit(BinaryOperator node);
    public sealed virtual void Visit(Block node);
    public sealed virtual void Visit(Break node);
    public sealed virtual void Visit(CallNode node);
    public sealed virtual void Visit(ConditionalCompilationComment node);
    public sealed virtual void Visit(ConditionalCompilationElse node);
    public sealed virtual void Visit(ConditionalCompilationElseIf node);
    public sealed virtual void Visit(ConditionalCompilationEnd node);
    public sealed virtual void Visit(ConditionalCompilationIf node);
    public sealed virtual void Visit(ConditionalCompilationOn node);
    public sealed virtual void Visit(ConditionalCompilationSet node);
    public sealed virtual void Visit(Conditional node);
    public sealed virtual void Visit(ConstantWrapper node);
    public sealed virtual void Visit(ConstantWrapperPP node);
    public sealed virtual void Visit(ConstStatement node);
    public sealed virtual void Visit(ContinueNode node);
    public sealed virtual void Visit(CustomNode node);
    public sealed virtual void Visit(DebuggerNode node);
    public sealed virtual void Visit(DirectivePrologue node);
    public sealed virtual void Visit(DoWhile node);
    public sealed virtual void Visit(EmptyStatement node);
    public sealed virtual void Visit(ForIn node);
    public sealed virtual void Visit(ForNode node);
    public sealed virtual void Visit(FunctionObject node);
    public sealed virtual void Visit(GetterSetter node);
    public sealed virtual void Visit(GroupingOperator node);
    public sealed virtual void Visit(IfNode node);
    public sealed virtual void Visit(ImportantComment node);
    public sealed virtual void Visit(LabeledStatement node);
    public sealed virtual void Visit(LexicalDeclaration node);
    public sealed virtual void Visit(Lookup node);
    public sealed virtual void Visit(Member node);
    public sealed virtual void Visit(ObjectLiteral node);
    public sealed virtual void Visit(ObjectLiteralField node);
    public sealed virtual void Visit(ObjectLiteralProperty node);
    public sealed virtual void Visit(ParameterDeclaration node);
    public sealed virtual void Visit(RegExpLiteral node);
    public sealed virtual void Visit(ReturnNode node);
    public sealed virtual void Visit(Switch node);
    public sealed virtual void Visit(SwitchCase node);
    public sealed virtual void Visit(ThisLiteral node);
    public sealed virtual void Visit(ThrowNode node);
    public sealed virtual void Visit(TryNode node);
    public sealed virtual void Visit(UnaryOperator node);
    public sealed virtual void Visit(Var node);
    public sealed virtual void Visit(VariableDeclaration node);
    public sealed virtual void Visit(WhileNode node);
    public sealed virtual void Visit(WithNode node);
    [CompilerGeneratedAttribute]
private static bool <ResolveGhostedFunctions>b__2(JSVariableField v);
}
[DefaultMemberAttribute("Item")]
public class Microsoft.Ajax.Utilities.ResourceStrings : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <NameValuePairs>k__BackingField;
    public string Name { get; public set; }
    public IDictionary`2<string, string> NameValuePairs { get; private set; }
    public string Item { get; public set; }
    public int Count { get; }
    public ResourceStrings(IDictionaryEnumerator enumerator);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, string> get_NameValuePairs();
    [CompilerGeneratedAttribute]
private void set_NameValuePairs(IDictionary`2<string, string> value);
    public string get_Item(string name);
    public void set_Item(string name, string value);
    public int get_Count();
}
public class Microsoft.Ajax.Utilities.ReturnNode : AstNode {
    private AstNode m_operand;
    public AstNode Operand { get; public set; }
    public IEnumerable`1<AstNode> Children { get; }
    public ReturnNode(Context context, JSParser parser);
    public AstNode get_Operand();
    public void set_Operand(AstNode value);
    public virtual void Accept(IVisitor visitor);
    public virtual IEnumerable`1<AstNode> get_Children();
    public virtual bool ReplaceChild(AstNode oldNode, AstNode newNode);
    [CompilerGeneratedAttribute]
private AstNode <set_Operand>b__0(AstNode n);
    [CompilerGeneratedAttribute]
private AstNode <set_Operand>b__1(AstNode n);
}
public class Microsoft.Ajax.Utilities.ScriptSharpSourceMap : object {
    private XmlWriter m_writer;
    private string m_currentPackagePath;
    private string m_mapPath;
    private Dictionary`2<string, int> m_sourceFileIndexMap;
    private int currentIndex;
    private int m_lineOffset;
    private int m_columnOffset;
    [CompilerGeneratedAttribute]
private string <SourceRoot>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SafeHeader>k__BackingField;
    public string SourceRoot { get; public set; }
    public bool SafeHeader { get; public set; }
    public static string ImplementationName { get; }
    public string Name { get; }
    public ScriptSharpSourceMap(TextWriter writer);
    [CompilerGeneratedAttribute]
public sealed virtual string get_SourceRoot();
    [CompilerGeneratedAttribute]
public sealed virtual void set_SourceRoot(string value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_SafeHeader();
    [CompilerGeneratedAttribute]
public sealed virtual void set_SafeHeader(bool value);
    public static string get_ImplementationName();
    public sealed virtual string get_Name();
    public sealed virtual void StartPackage(string sourcePath, string mapPath);
    public sealed virtual void EndPackage();
    public sealed virtual void NewLineInsertedInOutput();
    public sealed virtual void EndOutputRun(int lineNumber, int columnPosition);
    public sealed virtual object StartSymbol(AstNode node, int startLine, int startColumn);
    public sealed virtual void MarkSegment(AstNode node, int startLine, int startColumn, string name, Context context);
    public sealed virtual void EndSymbol(object symbol, int endLine, int endColumn, string parentContext);
    public sealed virtual void EndFile(TextWriter writer, string newLine);
    public sealed virtual void Dispose();
    private int GetSourceFileIndex(string fileName);
    private static string MakeRelative(string path, string relativeFrom);
    private static string Normalize(string path);
}
public static class Microsoft.Ajax.Utilities.SourceMapFactory : object {
    public static ISourceMap Create(TextWriter writer, string implementationName);
}
public class Microsoft.Ajax.Utilities.StatementStartVisitor : object {
    private bool m_isSafe;
    public bool IsSafe(AstNode node);
    public sealed virtual void Visit(BinaryOperator node);
    public sealed virtual void Visit(CallNode node);
    public sealed virtual void Visit(Conditional node);
    public sealed virtual void Visit(Member node);
    public sealed virtual void Visit(UnaryOperator node);
    public sealed virtual void Visit(CustomNode node);
    public sealed virtual void Visit(FunctionObject node);
    public sealed virtual void Visit(ObjectLiteral node);
    public sealed virtual void Visit(ArrayLiteral node);
    public sealed virtual void Visit(AspNetBlockNode node);
    public sealed virtual void Visit(Block node);
    public sealed virtual void Visit(Break node);
    public sealed virtual void Visit(ConditionalCompilationComment node);
    public sealed virtual void Visit(ConditionalCompilationElse node);
    public sealed virtual void Visit(ConditionalCompilationElseIf node);
    public sealed virtual void Visit(ConditionalCompilationEnd node);
    public sealed virtual void Visit(ConditionalCompilationIf node);
    public sealed virtual void Visit(ConditionalCompilationOn node);
    public sealed virtual void Visit(ConditionalCompilationSet node);
    public sealed virtual void Visit(ConstantWrapper node);
    public sealed virtual void Visit(ConstantWrapperPP node);
    public sealed virtual void Visit(ConstStatement node);
    public sealed virtual void Visit(ContinueNode node);
    public sealed virtual void Visit(DebuggerNode node);
    public sealed virtual void Visit(DirectivePrologue node);
    public sealed virtual void Visit(DoWhile node);
    public sealed virtual void Visit(EmptyStatement node);
    public sealed virtual void Visit(ForIn node);
    public sealed virtual void Visit(ForNode node);
    public sealed virtual void Visit(GetterSetter node);
    public sealed virtual void Visit(GroupingOperator node);
    public sealed virtual void Visit(IfNode node);
    public sealed virtual void Visit(ImportantComment node);
    public sealed virtual void Visit(LabeledStatement node);
    public sealed virtual void Visit(LexicalDeclaration node);
    public sealed virtual void Visit(Lookup node);
    public sealed virtual void Visit(RegExpLiteral node);
    public sealed virtual void Visit(ReturnNode node);
    public sealed virtual void Visit(Switch node);
    public sealed virtual void Visit(ThisLiteral node);
    public sealed virtual void Visit(ThrowNode node);
    public sealed virtual void Visit(TryNode node);
    public sealed virtual void Visit(Var node);
    public sealed virtual void Visit(WhileNode node);
    public sealed virtual void Visit(WithNode node);
    public sealed virtual void Visit(AstNodeList node);
    public sealed virtual void Visit(ObjectLiteralField node);
    public sealed virtual void Visit(ObjectLiteralProperty node);
    public sealed virtual void Visit(ParameterDeclaration node);
    public sealed virtual void Visit(SwitchCase node);
    public sealed virtual void Visit(VariableDeclaration node);
    [CompilerGeneratedAttribute]
private void <IsSafe>b__0(AstNode n);
}
public class Microsoft.Ajax.Utilities.Switch : AstNode {
    private AstNode m_expression;
    private AstNodeList m_cases;
    [CompilerGeneratedAttribute]
private bool <BraceOnNewLine>k__BackingField;
    [CompilerGeneratedAttribute]
private Context <BraceContext>k__BackingField;
    [CompilerGeneratedAttribute]
private ActivationObject <BlockScope>k__BackingField;
    public AstNode Expression { get; public set; }
    public AstNodeList Cases { get; public set; }
    public bool BraceOnNewLine { get; public set; }
    public Context BraceContext { get; public set; }
    public ActivationObject BlockScope { get; public set; }
    internal bool RequiresSeparator { get; }
    public IEnumerable`1<AstNode> Children { get; }
    public Switch(Context context, JSParser parser);
    public AstNode get_Expression();
    public void set_Expression(AstNode value);
    public AstNodeList get_Cases();
    public void set_Cases(AstNodeList value);
    [CompilerGeneratedAttribute]
public bool get_BraceOnNewLine();
    [CompilerGeneratedAttribute]
public void set_BraceOnNewLine(bool value);
    [CompilerGeneratedAttribute]
public Context get_BraceContext();
    [CompilerGeneratedAttribute]
public void set_BraceContext(Context value);
    [CompilerGeneratedAttribute]
public ActivationObject get_BlockScope();
    [CompilerGeneratedAttribute]
public void set_BlockScope(ActivationObject value);
    public virtual void Accept(IVisitor visitor);
    internal virtual bool get_RequiresSeparator();
    public virtual IEnumerable`1<AstNode> get_Children();
    public virtual bool ReplaceChild(AstNode oldNode, AstNode newNode);
    [CompilerGeneratedAttribute]
private AstNode <set_Expression>b__0(AstNode n);
    [CompilerGeneratedAttribute]
private AstNode <set_Expression>b__1(AstNode n);
    [CompilerGeneratedAttribute]
private AstNode <set_Cases>b__2(AstNodeList n);
    [CompilerGeneratedAttribute]
private AstNode <set_Cases>b__3(AstNodeList n);
}
public class Microsoft.Ajax.Utilities.SwitchCase : AstNode {
    private AstNode m_caseValue;
    private Block m_statements;
    [CompilerGeneratedAttribute]
private Context <ColonContext>k__BackingField;
    public AstNode CaseValue { get; public set; }
    public Block Statements { get; public set; }
    internal bool IsDefault { get; }
    public Context ColonContext { get; public set; }
    public IEnumerable`1<AstNode> Children { get; }
    internal bool RequiresSeparator { get; }
    public SwitchCase(Context context, JSParser parser);
    public AstNode get_CaseValue();
    public void set_CaseValue(AstNode value);
    public Block get_Statements();
    public void set_Statements(Block value);
    internal bool get_IsDefault();
    [CompilerGeneratedAttribute]
public Context get_ColonContext();
    [CompilerGeneratedAttribute]
public void set_ColonContext(Context value);
    public virtual void Accept(IVisitor visitor);
    public virtual IEnumerable`1<AstNode> get_Children();
    public virtual bool ReplaceChild(AstNode oldNode, AstNode newNode);
    internal virtual bool get_RequiresSeparator();
    [CompilerGeneratedAttribute]
private AstNode <set_CaseValue>b__0(AstNode n);
    [CompilerGeneratedAttribute]
private AstNode <set_CaseValue>b__1(AstNode n);
    [CompilerGeneratedAttribute]
private AstNode <set_Statements>b__2(Block n);
    [CompilerGeneratedAttribute]
private AstNode <set_Statements>b__3(Block n);
}
public class Microsoft.Ajax.Utilities.SwitchParser : object {
    private bool m_isMono;
    private EventHandler`1<InvalidSwitchEventArgs> InvalidSwitch;
    private EventHandler`1<UnknownParameterEventArgs> UnknownParameter;
    private EventHandler JSOnlyParameter;
    private EventHandler CssOnlyParameter;
    [CompilerGeneratedAttribute]
private CodeSettings <JSSettings>k__BackingField;
    [CompilerGeneratedAttribute]
private CssSettings <CssSettings>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AnalyzeMode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ReportFormat>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ReportPath>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PrettyPrint>k__BackingField;
    [CompilerGeneratedAttribute]
private int <WarningLevel>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EncodingOutputName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EncodingInputName>k__BackingField;
    public CodeSettings JSSettings { get; private set; }
    public CssSettings CssSettings { get; private set; }
    public bool AnalyzeMode { get; private set; }
    public string ReportFormat { get; private set; }
    public string ReportPath { get; private set; }
    public bool PrettyPrint { get; private set; }
    public int WarningLevel { get; public set; }
    public string EncodingOutputName { get; private set; }
    public string EncodingInputName { get; private set; }
    public SwitchParser(CodeSettings scriptSettings, CssSettings cssSettings);
    [CompilerGeneratedAttribute]
public CodeSettings get_JSSettings();
    [CompilerGeneratedAttribute]
private void set_JSSettings(CodeSettings value);
    [CompilerGeneratedAttribute]
public CssSettings get_CssSettings();
    [CompilerGeneratedAttribute]
private void set_CssSettings(CssSettings value);
    [CompilerGeneratedAttribute]
public bool get_AnalyzeMode();
    [CompilerGeneratedAttribute]
private void set_AnalyzeMode(bool value);
    [CompilerGeneratedAttribute]
public string get_ReportFormat();
    [CompilerGeneratedAttribute]
private void set_ReportFormat(string value);
    [CompilerGeneratedAttribute]
public string get_ReportPath();
    [CompilerGeneratedAttribute]
private void set_ReportPath(string value);
    [CompilerGeneratedAttribute]
public bool get_PrettyPrint();
    [CompilerGeneratedAttribute]
private void set_PrettyPrint(bool value);
    [CompilerGeneratedAttribute]
public int get_WarningLevel();
    [CompilerGeneratedAttribute]
public void set_WarningLevel(int value);
    [CompilerGeneratedAttribute]
public string get_EncodingOutputName();
    [CompilerGeneratedAttribute]
private void set_EncodingOutputName(string value);
    [CompilerGeneratedAttribute]
public string get_EncodingInputName();
    [CompilerGeneratedAttribute]
private void set_EncodingInputName(string value);
    public void add_InvalidSwitch(EventHandler`1<InvalidSwitchEventArgs> value);
    public void remove_InvalidSwitch(EventHandler`1<InvalidSwitchEventArgs> value);
    public void add_UnknownParameter(EventHandler`1<UnknownParameterEventArgs> value);
    public void remove_UnknownParameter(EventHandler`1<UnknownParameterEventArgs> value);
    public void add_JSOnlyParameter(EventHandler value);
    public void remove_JSOnlyParameter(EventHandler value);
    public void add_CssOnlyParameter(EventHandler value);
    public void remove_CssOnlyParameter(EventHandler value);
    public SwitchParser Clone();
    public static String[] ToArguments(string commandLine);
    public void Parse(string commandLine);
    [SuppressMessageAttribute("Microsoft.Maintainability", "CA1505:AvoidUnmaintainableCode")]
[SuppressMessageAttribute("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
public void Parse(String[] args);
    protected virtual int OnUnknownParameter(IList`1<string> arguments, int index, string switchPart, string parameterPart);
    protected virtual void OnInvalidSwitch(string switchPart, string parameterPart);
    protected virtual void OnJSOnlyParameter();
    protected virtual void OnCssOnlyParameter();
    private static void AlignDebugDefine(bool stripDebugStatements, IDictionary`2<string, string> defines);
    [SuppressMessageAttribute("Microsoft.Design", "CA1021:AvoidOutParameters")]
public static bool BooleanSwitch(string booleanText, bool defaultValue, Boolean& booleanValue);
    private void ResetRenamingKill(bool killSpecified);
}
public class Microsoft.Ajax.Utilities.ThisLiteral : Expression {
    public ThisLiteral(Context context, JSParser parser);
    public virtual void Accept(IVisitor visitor);
    public virtual bool IsEquivalentTo(AstNode otherNode);
}
public class Microsoft.Ajax.Utilities.ThrowNode : AstNode {
    private AstNode m_operand;
    public AstNode Operand { get; public set; }
    public IEnumerable`1<AstNode> Children { get; }
    internal bool RequiresSeparator { get; }
    public ThrowNode(Context context, JSParser parser);
    public AstNode get_Operand();
    public void set_Operand(AstNode value);
    public virtual void Accept(IVisitor visitor);
    public virtual IEnumerable`1<AstNode> get_Children();
    public virtual bool ReplaceChild(AstNode oldNode, AstNode newNode);
    internal virtual bool get_RequiresSeparator();
    [CompilerGeneratedAttribute]
private AstNode <set_Operand>b__0(AstNode n);
    [CompilerGeneratedAttribute]
private AstNode <set_Operand>b__1(AstNode n);
}
internal enum Microsoft.Ajax.Utilities.TokenType : Enum {
    public int value__;
    public static TokenType None;
    public static TokenType Space;
    public static TokenType CommentOpen;
    public static TokenType CommentClose;
    public static TokenType Includes;
    public static TokenType DashMatch;
    public static TokenType PrefixMatch;
    public static TokenType SuffixMatch;
    public static TokenType SubstringMatch;
    public static TokenType String;
    public static TokenType Identifier;
    public static TokenType Hash;
    public static TokenType ImportSymbol;
    public static TokenType PageSymbol;
    public static TokenType MediaSymbol;
    public static TokenType FontFaceSymbol;
    public static TokenType CharacterSetSymbol;
    public static TokenType AtKeyword;
    public static TokenType ImportantSymbol;
    public static TokenType NamespaceSymbol;
    public static TokenType KeyFramesSymbol;
    public static TokenType RelativeLength;
    public static TokenType AbsoluteLength;
    public static TokenType Resolution;
    public static TokenType Angle;
    public static TokenType Time;
    public static TokenType Frequency;
    public static TokenType Speech;
    public static TokenType Dimension;
    public static TokenType Percentage;
    public static TokenType Number;
    public static TokenType Uri;
    public static TokenType Function;
    public static TokenType Not;
    public static TokenType UnicodeRange;
    public static TokenType ProgId;
    public static TokenType Character;
    public static TokenType Comment;
    public static TokenType TopLeftCornerSymbol;
    public static TokenType TopLeftSymbol;
    public static TokenType TopCenterSymbol;
    public static TokenType TopRightSymbol;
    public static TokenType TopRightCornerSymbol;
    public static TokenType BottomLeftCornerSymbol;
    public static TokenType BottomLeftSymbol;
    public static TokenType BottomCenterSymbol;
    public static TokenType BottomRightSymbol;
    public static TokenType BottomRightCornerSymbol;
    public static TokenType LeftTopSymbol;
    public static TokenType LeftMiddleSymbol;
    public static TokenType LeftBottomSymbol;
    public static TokenType RightTopSymbol;
    public static TokenType RightMiddleSymbol;
    public static TokenType RightBottomSymbol;
    public static TokenType AspNetBlock;
    public static TokenType Error;
}
[FlagsAttribute]
public enum Microsoft.Ajax.Utilities.TreeModifications : Enum {
    public long value__;
    public static TreeModifications None;
    public static TreeModifications PreserveImportantComments;
    public static TreeModifications BracketMemberToDotMember;
    public static TreeModifications NewObjectToObjectLiteral;
    public static TreeModifications NewArrayToArrayLiteral;
    public static TreeModifications RemoveEmptyDefaultCase;
    public static TreeModifications RemoveEmptyCaseWhenNoDefault;
    public static TreeModifications RemoveBreakFromLastCaseBlock;
    public static TreeModifications RemoveEmptyFinally;
    public static TreeModifications RemoveDuplicateVar;
    public static TreeModifications CombineVarStatements;
    public static TreeModifications MoveVarIntoFor;
    public static TreeModifications VarInitializeReturnToReturnInitializer;
    public static TreeModifications IfEmptyToExpression;
    public static TreeModifications IfConditionCallToConditionAndCall;
    public static TreeModifications IfElseReturnToReturnConditional;
    public static TreeModifications IfConditionReturnToCondition;
    public static TreeModifications IfConditionFalseToIfNotConditionTrue;
    public static TreeModifications CombineAdjacentStringLiterals;
    public static TreeModifications RemoveUnaryPlusOnNumericLiteral;
    public static TreeModifications ApplyUnaryMinusToNumericLiteral;
    public static TreeModifications MinifyStringLiterals;
    public static TreeModifications MinifyNumericLiterals;
    public static TreeModifications RemoveUnusedParameters;
    public static TreeModifications StripDebugStatements;
    public static TreeModifications LocalRenaming;
    public static TreeModifications RemoveFunctionExpressionNames;
    public static TreeModifications RemoveUnnecessaryLabels;
    public static TreeModifications RemoveUnnecessaryCCOnStatements;
    public static TreeModifications DateGetTimeToUnaryPlus;
    public static TreeModifications EvaluateNumericExpressions;
    public static TreeModifications SimplifyStringToNumericConversion;
    public static TreeModifications PropertyRenaming;
    public static TreeModifications RemoveQuotesFromObjectLiteralNames;
    public static TreeModifications BooleanLiteralsToNotOperators;
    public static TreeModifications IfExpressionsToExpression;
    public static TreeModifications CombineAdjacentExpressionStatements;
    public static TreeModifications ReduceStrictOperatorIfTypesAreSame;
    public static TreeModifications ReduceStrictOperatorIfTypesAreDifferent;
    public static TreeModifications MoveFunctionToTopOfScope;
    public static TreeModifications CombineVarStatementsToTopOfScope;
    public static TreeModifications IfNotTrueFalseToIfFalseTrue;
    public static TreeModifications MoveInExpressionsIntoForStatement;
    public static TreeModifications InvertIfReturn;
    public static TreeModifications CombineNestedIfs;
    public static TreeModifications CombineEquivalentIfReturns;
    public static TreeModifications ChangeWhileToFor;
    public static TreeModifications InvertIfContinue;
    public static TreeModifications EvaluateLiteralJoins;
    public static TreeModifications RemoveUnusedVariables;
    public static TreeModifications UnfoldCommaExpressionStatements;
    public static TreeModifications EvaluateLiteralLengths;
}
public class Microsoft.Ajax.Utilities.TreeVisitor : object {
    public virtual void Visit(ArrayLiteral node);
    public virtual void Visit(AspNetBlockNode node);
    public virtual void Visit(AstNodeList node);
    public virtual void Visit(BinaryOperator node);
    public virtual void Visit(Block node);
    public virtual void Visit(Break node);
    public virtual void Visit(CallNode node);
    public virtual void Visit(ConditionalCompilationComment node);
    public virtual void Visit(ConditionalCompilationElse node);
    public virtual void Visit(ConditionalCompilationElseIf node);
    public virtual void Visit(ConditionalCompilationEnd node);
    public virtual void Visit(ConditionalCompilationIf node);
    public virtual void Visit(ConditionalCompilationOn node);
    public virtual void Visit(ConditionalCompilationSet node);
    public virtual void Visit(Conditional node);
    public virtual void Visit(ConstantWrapper node);
    public virtual void Visit(ConstantWrapperPP node);
    public virtual void Visit(ConstStatement node);
    public virtual void Visit(ContinueNode node);
    public virtual void Visit(CustomNode node);
    public virtual void Visit(DebuggerNode node);
    public virtual void Visit(DirectivePrologue node);
    public virtual void Visit(DoWhile node);
    public virtual void Visit(EmptyStatement node);
    public virtual void Visit(ForIn node);
    public virtual void Visit(ForNode node);
    public virtual void Visit(FunctionObject node);
    public virtual void Visit(GetterSetter node);
    public virtual void Visit(GroupingOperator node);
    public virtual void Visit(IfNode node);
    public virtual void Visit(ImportantComment node);
    public virtual void Visit(LabeledStatement node);
    public virtual void Visit(LexicalDeclaration node);
    public virtual void Visit(Lookup node);
    public virtual void Visit(Member node);
    public virtual void Visit(ObjectLiteral node);
    public virtual void Visit(ObjectLiteralField node);
    public virtual void Visit(ObjectLiteralProperty node);
    public virtual void Visit(ParameterDeclaration node);
    public virtual void Visit(RegExpLiteral node);
    public virtual void Visit(ReturnNode node);
    public virtual void Visit(Switch node);
    public virtual void Visit(SwitchCase node);
    public virtual void Visit(ThisLiteral node);
    public virtual void Visit(ThrowNode node);
    public virtual void Visit(TryNode node);
    public virtual void Visit(Var node);
    public virtual void Visit(VariableDeclaration node);
    public virtual void Visit(UnaryOperator node);
    public virtual void Visit(WhileNode node);
    public virtual void Visit(WithNode node);
}
public class Microsoft.Ajax.Utilities.TryNode : AstNode {
    private Block m_tryBlock;
    private Block m_catchBlock;
    private Block m_finallyBlock;
    private ParameterDeclaration m_catchParameter;
    [CompilerGeneratedAttribute]
private Context <CatchContext>k__BackingField;
    [CompilerGeneratedAttribute]
private Context <FinallyContext>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`2<ParameterDeclaration, string> CS$<>9__CachedAnonymousMethodDelegate9;
    [CompilerGeneratedAttribute]
private static Func`2<ParameterDeclaration, Context> CS$<>9__CachedAnonymousMethodDelegateb;
    public Block TryBlock { get; public set; }
    public Block CatchBlock { get; public set; }
    public Block FinallyBlock { get; public set; }
    public ParameterDeclaration CatchParameter { get; public set; }
    public string CatchVarName { get; }
    public Context CatchContext { get; public set; }
    public Context CatchVarContext { get; }
    public Context FinallyContext { get; public set; }
    public IEnumerable`1<AstNode> Children { get; }
    internal bool RequiresSeparator { get; }
    public TryNode(Context context, JSParser parser);
    public Block get_TryBlock();
    public void set_TryBlock(Block value);
    public Block get_CatchBlock();
    public void set_CatchBlock(Block value);
    public Block get_FinallyBlock();
    public void set_FinallyBlock(Block value);
    public ParameterDeclaration get_CatchParameter();
    public void set_CatchParameter(ParameterDeclaration value);
    public string get_CatchVarName();
    [CompilerGeneratedAttribute]
public Context get_CatchContext();
    [CompilerGeneratedAttribute]
public void set_CatchContext(Context value);
    public Context get_CatchVarContext();
    [CompilerGeneratedAttribute]
public Context get_FinallyContext();
    [CompilerGeneratedAttribute]
public void set_FinallyContext(Context value);
    public void SetCatchVariable(JSVariableField field);
    public virtual void Accept(IVisitor visitor);
    public virtual IEnumerable`1<AstNode> get_Children();
    public virtual bool ReplaceChild(AstNode oldNode, AstNode newNode);
    internal virtual bool get_RequiresSeparator();
    [CompilerGeneratedAttribute]
private AstNode <set_TryBlock>b__0(Block n);
    [CompilerGeneratedAttribute]
private AstNode <set_TryBlock>b__1(Block n);
    [CompilerGeneratedAttribute]
private AstNode <set_CatchBlock>b__2(Block n);
    [CompilerGeneratedAttribute]
private AstNode <set_CatchBlock>b__3(Block n);
    [CompilerGeneratedAttribute]
private AstNode <set_FinallyBlock>b__4(Block n);
    [CompilerGeneratedAttribute]
private AstNode <set_FinallyBlock>b__5(Block n);
    [CompilerGeneratedAttribute]
private AstNode <set_CatchParameter>b__6(ParameterDeclaration n);
    [CompilerGeneratedAttribute]
private AstNode <set_CatchParameter>b__7(ParameterDeclaration n);
    [CompilerGeneratedAttribute]
private static string <get_CatchVarName>b__8(ParameterDeclaration v);
    [CompilerGeneratedAttribute]
private static Context <get_CatchVarContext>b__a(ParameterDeclaration v);
}
public class Microsoft.Ajax.Utilities.UnaryOperator : Expression {
    private AstNode m_operand;
    [CompilerGeneratedAttribute]
private Context <OperatorContext>k__BackingField;
    [CompilerGeneratedAttribute]
private JSToken <OperatorToken>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsPostfix>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <OperatorInConditionalCompilationComment>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ConditionalCommentContainsOn>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`2<AstNode, bool> CS$<>9__CachedAnonymousMethodDelegate3;
    public AstNode Operand { get; public set; }
    public Context OperatorContext { get; public set; }
    public JSToken OperatorToken { get; public set; }
    public bool IsPostfix { get; public set; }
    public bool OperatorInConditionalCompilationComment { get; public set; }
    public bool ConditionalCommentContainsOn { get; public set; }
    public OperatorPrecedence Precedence { get; }
    public IEnumerable`1<AstNode> Children { get; }
    public bool IsConstant { get; }
    public UnaryOperator(Context context, JSParser parser);
    public AstNode get_Operand();
    public void set_Operand(AstNode value);
    [CompilerGeneratedAttribute]
public Context get_OperatorContext();
    [CompilerGeneratedAttribute]
public void set_OperatorContext(Context value);
    [CompilerGeneratedAttribute]
public JSToken get_OperatorToken();
    [CompilerGeneratedAttribute]
public void set_OperatorToken(JSToken value);
    [CompilerGeneratedAttribute]
public bool get_IsPostfix();
    [CompilerGeneratedAttribute]
public void set_IsPostfix(bool value);
    [CompilerGeneratedAttribute]
public bool get_OperatorInConditionalCompilationComment();
    [CompilerGeneratedAttribute]
public void set_OperatorInConditionalCompilationComment(bool value);
    [CompilerGeneratedAttribute]
public bool get_ConditionalCommentContainsOn();
    [CompilerGeneratedAttribute]
public void set_ConditionalCommentContainsOn(bool value);
    public virtual void Accept(IVisitor visitor);
    public virtual PrimitiveType FindPrimitiveType();
    public virtual OperatorPrecedence get_Precedence();
    public virtual IEnumerable`1<AstNode> get_Children();
    public virtual bool ReplaceChild(AstNode oldNode, AstNode newNode);
    public virtual bool IsEquivalentTo(AstNode otherNode);
    public virtual bool get_IsConstant();
    public virtual string ToString();
    [CompilerGeneratedAttribute]
private AstNode <set_Operand>b__0(AstNode n);
    [CompilerGeneratedAttribute]
private AstNode <set_Operand>b__1(AstNode n);
    [CompilerGeneratedAttribute]
private static bool <get_IsConstant>b__2(AstNode o);
}
public class Microsoft.Ajax.Utilities.UndefinedReferenceEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private UndefinedReferenceException <Exception>k__BackingField;
    public UndefinedReferenceException Exception { get; private set; }
    public UndefinedReferenceEventArgs(UndefinedReferenceException exception);
    [CompilerGeneratedAttribute]
public UndefinedReferenceException get_Exception();
    [CompilerGeneratedAttribute]
private void set_Exception(UndefinedReferenceException value);
}
[SuppressMessageAttribute("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
public class Microsoft.Ajax.Utilities.UndefinedReferenceException : object {
    private Context m_context;
    private Lookup m_lookup;
    private string m_name;
    private ReferenceType m_type;
    public AstNode LookupNode { get; }
    public string Name { get; }
    public ReferenceType ReferenceType { get; }
    public int Column { get; }
    public int Line { get; }
    internal UndefinedReferenceException(Lookup lookup, Context context);
    public AstNode get_LookupNode();
    public string get_Name();
    public ReferenceType get_ReferenceType();
    public int get_Column();
    public int get_Line();
    public virtual string ToString();
}
public class Microsoft.Ajax.Utilities.UnknownParameterEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private IList`1<string> <Arguments>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Index>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SwitchPart>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ParameterPart>k__BackingField;
    public IList`1<string> Arguments { get; private set; }
    public int Index { get; public set; }
    public string SwitchPart { get; public set; }
    public string ParameterPart { get; public set; }
    public UnknownParameterEventArgs(IList`1<string> arguments);
    [CompilerGeneratedAttribute]
public IList`1<string> get_Arguments();
    [CompilerGeneratedAttribute]
private void set_Arguments(IList`1<string> value);
    [CompilerGeneratedAttribute]
public int get_Index();
    [CompilerGeneratedAttribute]
public void set_Index(int value);
    [CompilerGeneratedAttribute]
public string get_SwitchPart();
    [CompilerGeneratedAttribute]
public void set_SwitchPart(string value);
    [CompilerGeneratedAttribute]
public string get_ParameterPart();
    [CompilerGeneratedAttribute]
public void set_ParameterPart(string value);
}
public class Microsoft.Ajax.Utilities.V3SourceMap : object {
    private string m_minifiedPath;
    private string m_mapPath;
    private TextWriter m_writer;
    private int m_maxMinifiedLine;
    private bool m_hasProperty;
    private HashSet`1<string> m_sourceFiles;
    private List`1<string> m_sourceFileList;
    private HashSet`1<string> m_names;
    private List`1<string> m_nameList;
    private List`1<Segment> m_segments;
    private int m_lastDestinationLine;
    private int m_lastDestinationColumn;
    private int m_lastSourceLine;
    private int m_lastSourceColumn;
    private int m_lastFileIndex;
    private int m_lastNameIndex;
    private int m_lineOffset;
    private int m_columnOffset;
    private static string s_base64;
    [CompilerGeneratedAttribute]
private string <SourceRoot>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SafeHeader>k__BackingField;
    public string SourceRoot { get; public set; }
    public bool SafeHeader { get; public set; }
    public static string ImplementationName { get; }
    public string Name { get; }
    public V3SourceMap(TextWriter writer);
    private static V3SourceMap();
    [CompilerGeneratedAttribute]
public sealed virtual string get_SourceRoot();
    [CompilerGeneratedAttribute]
public sealed virtual void set_SourceRoot(string value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_SafeHeader();
    [CompilerGeneratedAttribute]
public sealed virtual void set_SafeHeader(bool value);
    public static string get_ImplementationName();
    public sealed virtual string get_Name();
    public sealed virtual void StartPackage(string sourcePath, string mapPath);
    public sealed virtual void EndPackage();
    public sealed virtual void NewLineInsertedInOutput();
    public sealed virtual void EndOutputRun(int lineNumber, int columnPosition);
    public sealed virtual object StartSymbol(AstNode node, int startLine, int startColumn);
    [SuppressMessageAttribute("Microsoft.Usage", "CA2233:OperationsShouldNotOverflow")]
public sealed virtual void MarkSegment(AstNode node, int startLine, int startColumn, string name, Context context);
    public sealed virtual void EndSymbol(object symbol, int endLine, int endColumn, string parentContext);
    public sealed virtual void EndFile(TextWriter writer, string newLine);
    public sealed virtual void Dispose();
    private Segment CreateSegment(int destinationLine, int destinationColumn, int sourceLine, int sourceColumn, string fileName, string symbolName);
    private string GenerateMappings(IList`1<string> fileList, IList`1<string> nameList);
    private void EncodeNumbers(StringBuilder sb, Segment segment, IList`1<string> files, IList`1<string> names);
    private static void EncodeNumber(StringBuilder sb, int value);
    private static string MakeRelative(string path, string relativeFrom);
    private static string Normalize(string path);
    private void WriteProperty(string name, int number);
    private void WriteProperty(string name, string text);
    private void WriteProperty(string name, ICollection`1<string> collection);
    private void WritePropertyStart(string name);
    private void OutputEscapedString(string text);
    [CompilerGeneratedAttribute]
private string <MarkSegment>b__0(Context c);
}
[SuppressMessageAttribute("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
public class Microsoft.Ajax.Utilities.Var : Declaration {
    public Var(Context context, JSParser parser);
    public virtual void Accept(IVisitor visitor);
}
public class Microsoft.Ajax.Utilities.VariableDeclaration : AstNode {
    private AstNode m_initializer;
    private bool m_isGenerated;
    [CompilerGeneratedAttribute]
private string <Identifier>k__BackingField;
    [CompilerGeneratedAttribute]
private Context <NameContext>k__BackingField;
    [CompilerGeneratedAttribute]
private Context <AssignContext>k__BackingField;
    [CompilerGeneratedAttribute]
private JSVariableField <VariableField>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsCCSpecialCase>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseCCOn>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`2<JSVariableField, ActivationObject> CS$<>9__CachedAnonymousMethodDelegate3;
    public AstNode Initializer { get; public set; }
    public string Identifier { get; public set; }
    public Context NameContext { get; public set; }
    public Context AssignContext { get; public set; }
    public bool HasInitializer { get; }
    public JSVariableField VariableField { get; public set; }
    public bool IsCCSpecialCase { get; public set; }
    public bool UseCCOn { get; public set; }
    public string Name { get; }
    public bool RenameNotAllowed { get; }
    public bool IsGenerated { get; public set; }
    public bool IsAssignment { get; }
    public AstNode AssignmentValue { get; }
    public bool IsExpression { get; }
    public IEnumerable`1<AstNode> Children { get; }
    public ActivationObject VariableScope { get; }
    public VariableDeclaration(Context context, JSParser parser);
    public sealed virtual AstNode get_Initializer();
    public void set_Initializer(AstNode value);
    [CompilerGeneratedAttribute]
public string get_Identifier();
    [CompilerGeneratedAttribute]
public void set_Identifier(string value);
    [CompilerGeneratedAttribute]
public sealed virtual Context get_NameContext();
    [CompilerGeneratedAttribute]
public void set_NameContext(Context value);
    [CompilerGeneratedAttribute]
public Context get_AssignContext();
    [CompilerGeneratedAttribute]
public void set_AssignContext(Context value);
    public bool get_HasInitializer();
    [CompilerGeneratedAttribute]
public sealed virtual JSVariableField get_VariableField();
    [CompilerGeneratedAttribute]
public sealed virtual void set_VariableField(JSVariableField value);
    [CompilerGeneratedAttribute]
public bool get_IsCCSpecialCase();
    [CompilerGeneratedAttribute]
public void set_IsCCSpecialCase(bool value);
    [CompilerGeneratedAttribute]
public bool get_UseCCOn();
    [CompilerGeneratedAttribute]
public void set_UseCCOn(bool value);
    public sealed virtual string get_Name();
    public sealed virtual bool get_RenameNotAllowed();
    public bool get_IsGenerated();
    public void set_IsGenerated(bool value);
    public sealed virtual bool get_IsAssignment();
    public sealed virtual AstNode get_AssignmentValue();
    public virtual void Accept(IVisitor visitor);
    public virtual bool get_IsExpression();
    internal virtual string GetFunctionGuess(AstNode target);
    public virtual IEnumerable`1<AstNode> get_Children();
    public virtual bool ReplaceChild(AstNode oldNode, AstNode newNode);
    public virtual bool IsEquivalentTo(AstNode otherNode);
    public sealed virtual ActivationObject get_VariableScope();
    [CompilerGeneratedAttribute]
private AstNode <set_Initializer>b__0(AstNode n);
    [CompilerGeneratedAttribute]
private AstNode <set_Initializer>b__1(AstNode n);
    [CompilerGeneratedAttribute]
private static ActivationObject <get_VariableScope>b__2(JSVariableField f);
}
public class Microsoft.Ajax.Utilities.WhileNode : IterationStatement {
    private AstNode m_condition;
    [CompilerGeneratedAttribute]
private static Func`2<Block, Context> CS$<>9__CachedAnonymousMethodDelegate3;
    public AstNode Condition { get; public set; }
    public Context TerminatingContext { get; }
    public IEnumerable`1<AstNode> Children { get; }
    internal bool RequiresSeparator { get; }
    public WhileNode(Context context, JSParser parser);
    public AstNode get_Condition();
    public void set_Condition(AstNode value);
    public virtual Context get_TerminatingContext();
    public virtual void Accept(IVisitor visitor);
    public virtual IEnumerable`1<AstNode> get_Children();
    public virtual bool ReplaceChild(AstNode oldNode, AstNode newNode);
    internal virtual bool get_RequiresSeparator();
    internal virtual bool EncloseBlock(EncloseBlockType type);
    [CompilerGeneratedAttribute]
private AstNode <set_Condition>b__0(AstNode n);
    [CompilerGeneratedAttribute]
private AstNode <set_Condition>b__1(AstNode n);
    [CompilerGeneratedAttribute]
private static Context <get_TerminatingContext>b__2(Block b);
}
public class Microsoft.Ajax.Utilities.WithNode : AstNode {
    private AstNode m_withObject;
    private Block m_body;
    [CompilerGeneratedAttribute]
private static Func`2<Block, Context> CS$<>9__CachedAnonymousMethodDelegate5;
    public AstNode WithObject { get; public set; }
    public Block Body { get; public set; }
    public Context TerminatingContext { get; }
    public IEnumerable`1<AstNode> Children { get; }
    internal bool RequiresSeparator { get; }
    public WithNode(Context context, JSParser parser);
    public AstNode get_WithObject();
    public void set_WithObject(AstNode value);
    public Block get_Body();
    public void set_Body(Block value);
    public virtual Context get_TerminatingContext();
    public virtual void Accept(IVisitor visitor);
    public virtual IEnumerable`1<AstNode> get_Children();
    public virtual bool ReplaceChild(AstNode oldNode, AstNode newNode);
    internal virtual bool get_RequiresSeparator();
    internal virtual bool EncloseBlock(EncloseBlockType type);
    [CompilerGeneratedAttribute]
private AstNode <set_WithObject>b__0(AstNode n);
    [CompilerGeneratedAttribute]
private AstNode <set_WithObject>b__1(AstNode n);
    [CompilerGeneratedAttribute]
private AstNode <set_Body>b__2(Block n);
    [CompilerGeneratedAttribute]
private AstNode <set_Body>b__3(Block n);
    [CompilerGeneratedAttribute]
private static Context <get_TerminatingContext>b__4(Block b);
}
public class Microsoft.Ajax.Utilities.WithScope : BlockScope {
    public WithScope(ActivationObject parent, Context context, CodeSettings settings);
    public virtual JSVariableField CreateInnerField(JSVariableField outerField);
    public virtual void DeclareScope();
    public virtual JSVariableField CreateField(JSVariableField outerField);
    public virtual JSVariableField CreateField(string name, object value, FieldAttributes attributes);
}
[CompilerGeneratedAttribute]
internal static class System.Diagnostics.Contracts.__ContractsRuntime : object {
    [ThreadStaticAttribute]
internal static int insideContractEvaluation;
    internal static void ReportFailure(ContractFailureKind kind, string msg, string conditionTxt, Exception inner);
    internal static void TriggerFailure(ContractFailureKind kind, string msg, string userMessage, string conditionTxt, Exception inner);
    [DebuggerNonUserCodeAttribute]
[ReliabilityContractAttribute("3", "1")]
internal static void Requires(bool condition, string msg, string conditionTxt);
    [DebuggerNonUserCodeAttribute]
[ReliabilityContractAttribute("3", "1")]
internal static void Ensures(bool condition, string msg, string conditionTxt);
}
[CompilerGeneratedAttribute]
internal class System.Diagnostics.Contracts.RuntimeContractsAttribute : Attribute {
    internal RuntimeContractsAttribute(RuntimeContractsFlags contractFlags);
}
[FlagsAttribute]
[CompilerGeneratedAttribute]
internal enum System.Diagnostics.Contracts.RuntimeContractsFlags : Enum {
    public int value__;
    internal static RuntimeContractsFlags None;
    internal static RuntimeContractsFlags LegacyRequires;
    internal static RuntimeContractsFlags RequiresWithException;
    internal static RuntimeContractsFlags Requires;
    internal static RuntimeContractsFlags Ensures;
    internal static RuntimeContractsFlags Invariants;
    internal static RuntimeContractsFlags Asserts;
    internal static RuntimeContractsFlags Assumes;
    internal static RuntimeContractsFlags AsyncEnsures;
    internal static RuntimeContractsFlags ThrowOnFailure;
    internal static RuntimeContractsFlags StandardMode;
    internal static RuntimeContractsFlags InheritContracts;
    internal static RuntimeContractsFlags NoChecking;
}
internal class WebGrease.Activities.AssemblerActivity : object {
    private static Regex EndsWithSemicolon;
    private IWebGreaseContext context;
    private bool endedInSemicolon;
    [CompilerGeneratedAttribute]
private List`1<InputSpec> <Inputs>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OutputFile>k__BackingField;
    [CompilerGeneratedAttribute]
private PreprocessingConfig <PreprocessingConfig>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AddSemicolons>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <MinimalOutput>k__BackingField;
    internal List`1<InputSpec> Inputs { get; private set; }
    internal string OutputFile { get; internal set; }
    private PreprocessingConfig PreprocessingConfig { get; internal set; }
    private bool AddSemicolons { get; internal set; }
    internal bool MinimalOutput { get; internal set; }
    internal AssemblerActivity(IWebGreaseContext context);
    private static AssemblerActivity();
    [CompilerGeneratedAttribute]
internal List`1<InputSpec> get_Inputs();
    [CompilerGeneratedAttribute]
private void set_Inputs(List`1<InputSpec> value);
    [CompilerGeneratedAttribute]
internal string get_OutputFile();
    [CompilerGeneratedAttribute]
internal void set_OutputFile(string value);
    [CompilerGeneratedAttribute]
private PreprocessingConfig get_PreprocessingConfig();
    [CompilerGeneratedAttribute]
internal void set_PreprocessingConfig(PreprocessingConfig value);
    [CompilerGeneratedAttribute]
private bool get_AddSemicolons();
    [CompilerGeneratedAttribute]
internal void set_AddSemicolons(bool value);
    [CompilerGeneratedAttribute]
internal bool get_MinimalOutput();
    [CompilerGeneratedAttribute]
internal void set_MinimalOutput(bool value);
    internal ContentItem Execute(ContentItemType resultContentItemType);
    [SuppressMessageAttribute("Microsoft.Reliability", "CA2000:Dispose objects before losing scope")]
private ContentItem Bundle(ContentItemType targetContentItemType, string outputDirectory, string outputFile, string sourceDirectory);
    private void Append(TextWriter writer, string filePath, string sourceDirectory, PreprocessingConfig preprocessingConfig);
}
internal class WebGrease.Activities.BundleActivity : object {
    private WebGreaseContext context;
    public BundleActivity(WebGreaseContext webGreaseContext);
    internal bool Execute(IEnumerable`1<IFileSet> fileSets);
    private void BundleFileSets(AssemblerActivity assembler, IEnumerable`1<IFileSet> fileSets, FileTypes fileType);
    private bool RestoreBundleFromCache(ICacheSection cacheSection);
    private void Bundle(AssemblerActivity assembler, IEnumerable`1<IFileSet> fileSets, FileTypes fileType);
    [CompilerGeneratedAttribute]
private void <RestoreBundleFromCache>b__4(ContentItem er);
}
internal class WebGrease.Activities.CssLocalizationActivity : object {
    private static Regex ReplaceCssCommentsRegexPattern;
    private IWebGreaseContext context;
    [CompilerGeneratedAttribute]
private string <DestinationDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ThemesResourcesDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LocalesResourcesDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<CssLocalizationInput> <CssLocalizationInputs>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`2<CssLocalizationInput, bool> CS$<>9__CachedAnonymousMethodDelegate14;
    [CompilerGeneratedAttribute]
private static Func`2<string, bool> CS$<>9__CachedAnonymousMethodDelegate15;
    [CompilerGeneratedAttribute]
private static Func`2<string, bool> CS$<>9__CachedAnonymousMethodDelegate18;
    private string DestinationDirectory { get; internal set; }
    private string ThemesResourcesDirectory { get; internal set; }
    private string LocalesResourcesDirectory { get; internal set; }
    internal IList`1<CssLocalizationInput> CssLocalizationInputs { get; private set; }
    public CssLocalizationActivity(IWebGreaseContext context);
    private static CssLocalizationActivity();
    [CompilerGeneratedAttribute]
private string get_DestinationDirectory();
    [CompilerGeneratedAttribute]
internal void set_DestinationDirectory(string value);
    [CompilerGeneratedAttribute]
private string get_ThemesResourcesDirectory();
    [CompilerGeneratedAttribute]
internal void set_ThemesResourcesDirectory(string value);
    [CompilerGeneratedAttribute]
private string get_LocalesResourcesDirectory();
    [CompilerGeneratedAttribute]
internal void set_LocalesResourcesDirectory(string value);
    [CompilerGeneratedAttribute]
internal IList`1<CssLocalizationInput> get_CssLocalizationInputs();
    [CompilerGeneratedAttribute]
private void set_CssLocalizationInputs(IList`1<CssLocalizationInput> value);
    [SuppressMessageAttribute("Microsoft.Globalization", "CA1308:NormalizeStringsToUppercase")]
internal static IEnumerable`1<ContentItem> LocalizeAndTheme(IWebGreaseContext context, ContentItem inputItem, IDictionary`2<string, IDictionary`2<string, string>> localeResources, IDictionary`2<string, IDictionary`2<string, string>> themeResources, bool shouldMinify);
    internal void Execute();
    private void ExpandLocaleAndThemeResources(CssLocalizationInput cssLocalizationInput, string localeName);
    [CompilerGeneratedAttribute]
private void <Execute>b__11();
    [CompilerGeneratedAttribute]
private static bool <Execute>b__12(CssLocalizationInput _);
    [CompilerGeneratedAttribute]
private static bool <Execute>b__13(string _);
    [CompilerGeneratedAttribute]
private static bool <ExpandLocaleAndThemeResources>b__17(string _);
}
internal class WebGrease.Activities.CssLocalizationInput : object {
    [CompilerGeneratedAttribute]
private IList`1<string> <Locales>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<string> <Themes>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SourceFile>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DestinationFile>k__BackingField;
    internal IList`1<string> Locales { get; private set; }
    internal IList`1<string> Themes { get; private set; }
    internal string SourceFile { get; internal set; }
    internal string DestinationFile { get; internal set; }
    [CompilerGeneratedAttribute]
internal IList`1<string> get_Locales();
    [CompilerGeneratedAttribute]
private void set_Locales(IList`1<string> value);
    [CompilerGeneratedAttribute]
internal IList`1<string> get_Themes();
    [CompilerGeneratedAttribute]
private void set_Themes(IList`1<string> value);
    [CompilerGeneratedAttribute]
internal string get_SourceFile();
    [CompilerGeneratedAttribute]
internal void set_SourceFile(string value);
    [CompilerGeneratedAttribute]
internal string get_DestinationFile();
    [CompilerGeneratedAttribute]
internal void set_DestinationFile(string value);
}
internal static class WebGrease.Activities.ErrorCode : object {
    public static string Default;
}
internal class WebGrease.Activities.EverythingActivity : object {
    private static string ImagesDestinationDirectoryName;
    private static string JsDestinationDirectoryName;
    private static string CssDestinationDirectoryName;
    private static string ToolsTempDirectoryName;
    private static string StaticAssemblerDirectoryName;
    private static string PreprocessingTempDirectory;
    private string toolsTempDirectory;
    private string staticAssemblerDirectory;
    private string logDirectory;
    private string preprocessingTempDirectory;
    private string imagesLogFile;
    private IWebGreaseContext context;
    [CompilerGeneratedAttribute]
private static Func`2<ContentPivot, string> CS$<>9__CachedAnonymousMethodDelegate37;
    [CompilerGeneratedAttribute]
private static Func`2<ContentPivot, string> CS$<>9__CachedAnonymousMethodDelegate3a;
    internal EverythingActivity(IWebGreaseContext context);
    internal bool Execute();
    internal bool Execute(IEnumerable`1<IFileSet> fileSets, FileTypes fileType);
    internal void ExecuteHashImages();
    [SuppressMessageAttribute("Microsoft.Design", "CA1031:DoNotCatchGeneralExceptionTypes")]
private static FileHasherActivity GetFileHasher(IWebGreaseContext context, string hashOutputPath, string logFileName, FileTypes fileType, string outputRelativeToPath, string basePrefixToAddToOutputPath, IEnumerable`1<string> fileTypeFilters);
    private static IDictionary`2<string, IDictionary`2<string, string>> GetThemeResources(CssFileSet cssFileSet, IWebGreaseContext context, FileTypes fileType);
    private static IDictionary`2<string, IDictionary`2<string, string>> GetLocaleResources(IFileSet fileSet, IWebGreaseContext context, FileTypes fileType);
    private static void EnsureCssLogFile(FileHasherActivity cssHasher, FileHasherActivity imageHasher, ICacheSection cacheSection);
    private static string GetContentPivotDestinationFilePath(string relativeContentPath, string destinationDirectoryName, string destinationExtension, ContentPivot contentPivot);
    private static void EnsureJsLogFile(FileHasherActivity jsHasher, ICacheSection cacheSection);
    private static void EnsureLogFile(FileHasherActivity hasher, IEnumerable`1<ContentItem> contentItems);
    private static void HashImages(IWebGreaseContext context, FileHasherActivity imageHasher, IEnumerable`1<string> imageDirectoriesToHash, IEnumerable`1<string> imageExtensions);
    private IEnumerable`1<string> GetDestinationFilePaths(ContentItem inputFile, string destinationDirectoryName, string destinationExtension);
    private bool ExecuteCss(IEnumerable`1<CssFileSet> cssFileSets, string sourceDirectory, string destinationDirectory, string configType, IList`1<string> imageDirectories, IList`1<string> imageExtensions);
    private FileHasherActivity GetImageFileHasher(string destinationDirectory, IList`1<string> imageExtensions);
    private bool ExecuteCssFileSet(string configType, IList`1<string> imageDirectories, IList`1<string> imageExtensions, CssFileSet cssFileSet, FileHasherActivity cssHasher, FileHasherActivity imageHasher, string imagesDestinationDirectory);
    private bool ExecuteJS(IEnumerable`1<JSFileSet> jsFileSets, string configType, string sourceDirectory, string destinationDirectory);
    [SuppressMessageAttribute("Microsoft.Globalization", "CA1303:Do not pass literals as localized parameters")]
private bool ExecuteJSFileSet(JSFileSet jsFileSet, FileHasherActivity jsHasher, string configType);
    private IEnumerable`1<ContentItem> HashContentItems(FileHasherActivity hasher, IEnumerable`1<ContentItem> contentItems, string destinationDirectoryName, string destinationExtension);
    private IEnumerable`1<ContentItem> Bundle(IFileSet fileSet, string outputFile, FileTypes fileType, string configType, bool minimalOutput);
    private MinifyCssActivity CreateCssMinifier(FileHasherActivity imageHasher, IList`1<string> imageExtensions, IList`1<string> imageDirectories, string imagesDestinationDirectory, CssMinificationConfig minificationConfig, CssSpritingConfig spritingConfig);
    private IEnumerable`1<ContentItem> PreprocessFiles(string targetFolder, IEnumerable`1<InputSpec> inputFiles, PreprocessingConfig preprocessingConfig);
    [SuppressMessageAttribute("Microsoft.Design", "CA1031:DoNotCatchGeneralExceptionTypes")]
private IEnumerable`1<MinifyCssResult> MinifyCss(IEnumerable`1<ContentItem> inputCssItems, MinifyCssActivity minifier, FileHasherActivity imageHasher, bool writeSpriteLogFile);
    [SuppressMessageAttribute("Microsoft.Design", "CA1031:DoNotCatchGeneralExceptionTypes")]
private IEnumerable`1<ContentItem> MinifyJs(IEnumerable`1<ContentItem> inputFiles, JsMinificationConfig jsConfig, JSValidationConfig jsValidateConfig);
    [SuppressMessageAttribute("Microsoft.Design", "CA1031:DoNotCatchGeneralExceptionTypes")]
private IEnumerable`1<ContentItem> LocalizeJs(IEnumerable`1<ContentItem> inputFiles, IEnumerable`1<string> locales, IDictionary`2<string, IDictionary`2<string, string>> localeResources);
    [SuppressMessageAttribute("Microsoft.Design", "CA1031:DoNotCatchGeneralExceptionTypes")]
private IEnumerable`1<ContentItem> LocalizeAndThemeCss(IEnumerable`1<ContentItem> cssInputItems, IDictionary`2<string, IDictionary`2<string, string>> localeResources, IDictionary`2<string, IDictionary`2<string, string>> themeResources, bool shouldMinify);
    [SuppressMessageAttribute("Microsoft.Design", "CA1031:DoNotCatchGeneralExceptionTypes")]
private ContentItem BundleFiles(IEnumerable`1<InputSpec> inputSpecs, string outputFile, PreprocessingConfig preprocessing, FileTypes fileType, bool minimalOutput);
    private void HandleError(ContentItem contentItem, Exception ex, string file, string message);
    [CompilerGeneratedAttribute]
private ContentItem <Bundle>b__33(string f);
    [CompilerGeneratedAttribute]
private static string <MinifyCss>b__36(ContentPivot p);
    [CompilerGeneratedAttribute]
private static string <MinifyJs>b__39(ContentPivot p);
}
internal class WebGrease.Activities.FileHasherActivity : object {
    private IWebGreaseContext context;
    private Dictionary`2<string, List`1<string>> renamedFilesLog;
    [CompilerGeneratedAttribute]
private string <ConfigType>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<string> <SourceDirectories>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DestinationDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CreateExtraDirectoryLevelFromHashes>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BasePrefixToAddToOutputPath>k__BackingField;
    [CompilerGeneratedAttribute]
private FileTypes <FileType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BasePrefixToRemoveFromOutputPathInLog>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BasePrefixToRemoveFromInputPathInLog>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LogFileName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShouldPreserveSourceDirectoryStructure>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FileTypeFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`2<KeyValuePair`2<string, List`1<string>>, string> CS$<>9__CachedAnonymousMethodDelegate7;
    [CompilerGeneratedAttribute]
private static Func`2<string, string> CS$<>9__CachedAnonymousMethodDelegated;
    [CompilerGeneratedAttribute]
private static Func`2<string, string> CS$<>9__CachedAnonymousMethodDelegatee;
    [CompilerGeneratedAttribute]
private static Func`2<XElement, string> CS$<>9__CachedAnonymousMethodDelegate11;
    [CompilerGeneratedAttribute]
private static Func`2<XElement, string> CS$<>9__CachedAnonymousMethodDelegate12;
    internal string ConfigType { get; internal set; }
    internal IList`1<string> SourceDirectories { get; private set; }
    private string DestinationDirectory { get; internal set; }
    private bool CreateExtraDirectoryLevelFromHashes { get; internal set; }
    internal string BasePrefixToAddToOutputPath { get; internal set; }
    private FileTypes FileType { get; internal set; }
    internal string BasePrefixToRemoveFromOutputPathInLog { get; internal set; }
    internal string BasePrefixToRemoveFromInputPathInLog { get; internal set; }
    internal string LogFileName { get; internal set; }
    private bool ShouldPreserveSourceDirectoryStructure { get; internal set; }
    private string FileTypeFilter { get; internal set; }
    internal FileHasherActivity(IWebGreaseContext context);
    [CompilerGeneratedAttribute]
internal string get_ConfigType();
    [CompilerGeneratedAttribute]
internal void set_ConfigType(string value);
    [CompilerGeneratedAttribute]
internal IList`1<string> get_SourceDirectories();
    [CompilerGeneratedAttribute]
private void set_SourceDirectories(IList`1<string> value);
    [CompilerGeneratedAttribute]
private string get_DestinationDirectory();
    [CompilerGeneratedAttribute]
internal void set_DestinationDirectory(string value);
    [CompilerGeneratedAttribute]
private bool get_CreateExtraDirectoryLevelFromHashes();
    [CompilerGeneratedAttribute]
internal void set_CreateExtraDirectoryLevelFromHashes(bool value);
    [CompilerGeneratedAttribute]
internal string get_BasePrefixToAddToOutputPath();
    [CompilerGeneratedAttribute]
internal void set_BasePrefixToAddToOutputPath(string value);
    [CompilerGeneratedAttribute]
private FileTypes get_FileType();
    [CompilerGeneratedAttribute]
internal void set_FileType(FileTypes value);
    [CompilerGeneratedAttribute]
internal string get_BasePrefixToRemoveFromOutputPathInLog();
    [CompilerGeneratedAttribute]
internal void set_BasePrefixToRemoveFromOutputPathInLog(string value);
    [CompilerGeneratedAttribute]
internal string get_BasePrefixToRemoveFromInputPathInLog();
    [CompilerGeneratedAttribute]
internal void set_BasePrefixToRemoveFromInputPathInLog(string value);
    [CompilerGeneratedAttribute]
internal string get_LogFileName();
    [CompilerGeneratedAttribute]
internal void set_LogFileName(string value);
    [CompilerGeneratedAttribute]
private bool get_ShouldPreserveSourceDirectoryStructure();
    [CompilerGeneratedAttribute]
internal void set_ShouldPreserveSourceDirectoryStructure(bool value);
    [CompilerGeneratedAttribute]
private string get_FileTypeFilter();
    [CompilerGeneratedAttribute]
internal void set_FileTypeFilter(string value);
    internal void Execute();
    internal IEnumerable`1<ContentItem> Hash(ContentItem contentItem, IEnumerable`1<string> originalFiles);
    internal IEnumerable`1<ContentItem> AppendToWorkLog(ContentItem hashedContentItem, IEnumerable`1<string> originalFiles);
    internal ContentItem Hash(ContentItem contentItem);
    internal void Save(bool append);
    internal void AppendToWorkLog(IEnumerable`1<ContentItem> cacheResults);
    internal void AppendToWorkLog(ContentItem cacheResult);
    private static IEnumerable`1<string> GetFilters(string filterType);
    private static string GetUrlPath(string key);
    private IEnumerable`1<ContentItem> Hash(string sourceDirectory, string destinationDirectory, IEnumerable`1<string> filters, string rootSourceDirectory);
    [SuppressMessageAttribute("Microsoft.Globalization", "CA1308:NormalizeStringsToUppercase")]
private string GetDestinationFilePath(string destination, string hashedFileName, string relativePath);
    [SuppressMessageAttribute("Microsoft.Globalization", "CA1308:NormalizeStringsToUppercase")]
private void AppendToWorkLog(string fileBeforeHashing, string fileAfterHashing, bool skipIfExists);
    private string MakeOutputAbsolute(string output);
    private string NormalizeFileForWorkLog(string file, string preFixToRemoveFromWorkLog);
    private void WriteLog(bool appendToLog);
    private void LoadBeforeWrite(string logFileName);
    private static XElement GetLogRoot(string logFileName);
    private static string GetConfigTypeLogFile(string logFileName, string configType);
    [CompilerGeneratedAttribute]
private void <Execute>b__0();
    [CompilerGeneratedAttribute]
private static string <AppendToWorkLog>b__6(KeyValuePair`2<string, List`1<string>> e);
    [CompilerGeneratedAttribute]
private static string <WriteLog>b__b(string f);
    [CompilerGeneratedAttribute]
private static string <WriteLog>b__c(string r);
    [CompilerGeneratedAttribute]
private static string <LoadBeforeWrite>b__f(XElement e);
    [CompilerGeneratedAttribute]
private static string <LoadBeforeWrite>b__10(XElement e);
}
[FlagsAttribute]
public enum WebGrease.Activities.FileTypes : Enum {
    public int value__;
    public static FileTypes None;
    public static FileTypes Image;
    public static FileTypes JS;
    public static FileTypes CSS;
    public static FileTypes All;
}
internal class WebGrease.Activities.JSLocalizationActivity : object {
    private IWebGreaseContext context;
    [CompilerGeneratedAttribute]
private string <DestinationDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ResourcesDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<JSLocalizationInput> <JsLocalizationInputs>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`2<KeyValuePair`2<string, IDictionary`2<string, string>>, bool> CS$<>9__CachedAnonymousMethodDelegate3;
    [CompilerGeneratedAttribute]
private static Func`2<JSLocalizationInput, bool> CS$<>9__CachedAnonymousMethodDelegateb;
    [CompilerGeneratedAttribute]
private static Func`2<string, bool> CS$<>9__CachedAnonymousMethodDelegatec;
    private string DestinationDirectory { get; internal set; }
    private string ResourcesDirectory { get; internal set; }
    internal IList`1<JSLocalizationInput> JsLocalizationInputs { get; private set; }
    internal JSLocalizationActivity(IWebGreaseContext context);
    [CompilerGeneratedAttribute]
private string get_DestinationDirectory();
    [CompilerGeneratedAttribute]
internal void set_DestinationDirectory(string value);
    [CompilerGeneratedAttribute]
private string get_ResourcesDirectory();
    [CompilerGeneratedAttribute]
internal void set_ResourcesDirectory(string value);
    [CompilerGeneratedAttribute]
internal IList`1<JSLocalizationInput> get_JsLocalizationInputs();
    [CompilerGeneratedAttribute]
private void set_JsLocalizationInputs(IList`1<JSLocalizationInput> value);
    [SuppressMessageAttribute("Microsoft.Globalization", "CA1308:NormalizeStringsToUppercase")]
internal static IEnumerable`1<ContentItem> Localize(IWebGreaseContext context, ContentItem contentItem, IEnumerable`1<string> locales, IDictionary`2<string, IDictionary`2<string, string>> localeResources);
    internal void Execute();
    private void ExpandLocaleResources(JSLocalizationInput jsLocalizationInput, string localeName, string outputPath);
    [CompilerGeneratedAttribute]
private static bool <Localize>b__0(KeyValuePair`2<string, IDictionary`2<string, string>> lr);
    [CompilerGeneratedAttribute]
private void <Execute>b__8();
    [CompilerGeneratedAttribute]
private static bool <Execute>b__9(JSLocalizationInput _);
    [CompilerGeneratedAttribute]
private static bool <Execute>b__a(string _);
}
internal class WebGrease.Activities.JSLocalizationInput : object {
    [CompilerGeneratedAttribute]
private IList`1<string> <Locales>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SourceFile>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DestinationFile>k__BackingField;
    internal IList`1<string> Locales { get; private set; }
    internal string SourceFile { get; internal set; }
    internal string DestinationFile { get; internal set; }
    [CompilerGeneratedAttribute]
internal IList`1<string> get_Locales();
    [CompilerGeneratedAttribute]
private void set_Locales(IList`1<string> value);
    [CompilerGeneratedAttribute]
internal string get_SourceFile();
    [CompilerGeneratedAttribute]
internal void set_SourceFile(string value);
    [CompilerGeneratedAttribute]
internal string get_DestinationFile();
    [CompilerGeneratedAttribute]
internal void set_DestinationFile(string value);
}
public class WebGrease.Activities.LogError : MulticastDelegate {
    public LogError(object object, IntPtr method);
    public virtual void Invoke(Exception ex, string message, string fileName);
    public virtual IAsyncResult BeginInvoke(Exception ex, string message, string fileName, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class WebGrease.Activities.LogExtendedError : MulticastDelegate {
    public LogExtendedError(object object, IntPtr method);
    public virtual void Invoke(string subcategory, string errorCode, string helpKeyword, string file, Nullable`1<int> lineNumber, Nullable`1<int> columnNumber, Nullable`1<int> endLineNumber, Nullable`1<int> endColumnNumber, string message);
    public virtual IAsyncResult BeginInvoke(string subcategory, string errorCode, string helpKeyword, string file, Nullable`1<int> lineNumber, Nullable`1<int> columnNumber, Nullable`1<int> endLineNumber, Nullable`1<int> endColumnNumber, string message, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[SuppressMessageAttribute("Microsoft.Maintainability", "CA1506:AvoidExcessiveClassCoupling")]
internal class WebGrease.Activities.MinifyCssActivity : object {
    private static Regex UrlHashAllRegexPattern;
    private static Regex UrlHashRegexPattern;
    private IWebGreaseContext context;
    private IDictionary`2<string, string> availableSourceImages;
    [CompilerGeneratedAttribute]
private List`1<ImageAssemblyScanInput> <AdditionalImageAssemblyBuckets>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ImageBasePrefixToRemoveFromOutputPathInLog>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ImageBasePrefixToAddToOutputPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OutputUnit>k__BackingField;
    [CompilerGeneratedAttribute]
private double <OutputUnitFactor>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<ImageType> <ForcedSpritingImageType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IgnoreImagesWithNonDefaultBackgroundSize>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<string> <ImageDirectories>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<string> <ImageExtensions>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SourceFile>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DestinationFile>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShouldExcludeProperties>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShouldValidateForLowerCase>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShouldOptimize>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShouldMergeMediaQueries>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShouldAssembleBackgroundImages>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShouldMinify>k__BackingField;
    [CompilerGeneratedAttribute]
private HashSet`1<string> <HackSelectors>k__BackingField;
    [CompilerGeneratedAttribute]
private HashSet`1<string> <BannedSelectors>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ImageAssembleScanDestinationFile>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ImageSpritingLogPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ImagesOutputDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private HashSet`1<string> <ImageAssembleReferencesToIgnore>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <ImageAssemblyPadding>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ErrorOnInvalidSprite>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`2<AssembledImage, string> CS$<>9__CachedAnonymousMethodDelegate21;
    internal List`1<ImageAssemblyScanInput> AdditionalImageAssemblyBuckets { get; internal set; }
    internal string ImageBasePrefixToRemoveFromOutputPathInLog { get; internal set; }
    internal string ImageBasePrefixToAddToOutputPath { get; internal set; }
    private string OutputUnit { get; internal set; }
    private double OutputUnitFactor { get; internal set; }
    internal Nullable`1<ImageType> ForcedSpritingImageType { get; internal set; }
    private bool IgnoreImagesWithNonDefaultBackgroundSize { get; internal set; }
    private IList`1<string> ImageDirectories { get; internal set; }
    private IList`1<string> ImageExtensions { get; internal set; }
    private string SourceFile { get; internal set; }
    internal string DestinationFile { get; internal set; }
    internal bool ShouldExcludeProperties { get; internal set; }
    internal bool ShouldValidateForLowerCase { get; internal set; }
    private bool ShouldOptimize { get; internal set; }
    private bool ShouldMergeMediaQueries { get; internal set; }
    private bool ShouldAssembleBackgroundImages { get; internal set; }
    internal bool ShouldMinify { get; internal set; }
    internal HashSet`1<string> HackSelectors { get; internal set; }
    internal HashSet`1<string> BannedSelectors { get; internal set; }
    internal string ImageAssembleScanDestinationFile { get; internal set; }
    internal string ImageSpritingLogPath { get; internal set; }
    private string ImagesOutputDirectory { get; internal set; }
    internal HashSet`1<string> ImageAssembleReferencesToIgnore { get; internal set; }
    private Nullable`1<int> ImageAssemblyPadding { get; internal set; }
    internal bool ErrorOnInvalidSprite { get; internal set; }
    internal MinifyCssActivity(IWebGreaseContext context);
    private static MinifyCssActivity();
    [CompilerGeneratedAttribute]
internal List`1<ImageAssemblyScanInput> get_AdditionalImageAssemblyBuckets();
    [CompilerGeneratedAttribute]
internal void set_AdditionalImageAssemblyBuckets(List`1<ImageAssemblyScanInput> value);
    [CompilerGeneratedAttribute]
internal string get_ImageBasePrefixToRemoveFromOutputPathInLog();
    [CompilerGeneratedAttribute]
internal void set_ImageBasePrefixToRemoveFromOutputPathInLog(string value);
    [CompilerGeneratedAttribute]
internal string get_ImageBasePrefixToAddToOutputPath();
    [CompilerGeneratedAttribute]
internal void set_ImageBasePrefixToAddToOutputPath(string value);
    [CompilerGeneratedAttribute]
private string get_OutputUnit();
    [CompilerGeneratedAttribute]
internal void set_OutputUnit(string value);
    [CompilerGeneratedAttribute]
private double get_OutputUnitFactor();
    [CompilerGeneratedAttribute]
internal void set_OutputUnitFactor(double value);
    [CompilerGeneratedAttribute]
internal Nullable`1<ImageType> get_ForcedSpritingImageType();
    [CompilerGeneratedAttribute]
internal void set_ForcedSpritingImageType(Nullable`1<ImageType> value);
    [CompilerGeneratedAttribute]
private bool get_IgnoreImagesWithNonDefaultBackgroundSize();
    [CompilerGeneratedAttribute]
internal void set_IgnoreImagesWithNonDefaultBackgroundSize(bool value);
    [CompilerGeneratedAttribute]
private IList`1<string> get_ImageDirectories();
    [CompilerGeneratedAttribute]
internal void set_ImageDirectories(IList`1<string> value);
    [CompilerGeneratedAttribute]
private IList`1<string> get_ImageExtensions();
    [CompilerGeneratedAttribute]
internal void set_ImageExtensions(IList`1<string> value);
    [CompilerGeneratedAttribute]
private string get_SourceFile();
    [CompilerGeneratedAttribute]
internal void set_SourceFile(string value);
    [CompilerGeneratedAttribute]
internal string get_DestinationFile();
    [CompilerGeneratedAttribute]
internal void set_DestinationFile(string value);
    [CompilerGeneratedAttribute]
internal bool get_ShouldExcludeProperties();
    [CompilerGeneratedAttribute]
internal void set_ShouldExcludeProperties(bool value);
    [CompilerGeneratedAttribute]
internal bool get_ShouldValidateForLowerCase();
    [CompilerGeneratedAttribute]
internal void set_ShouldValidateForLowerCase(bool value);
    [CompilerGeneratedAttribute]
private bool get_ShouldOptimize();
    [CompilerGeneratedAttribute]
internal void set_ShouldOptimize(bool value);
    [CompilerGeneratedAttribute]
private bool get_ShouldMergeMediaQueries();
    [CompilerGeneratedAttribute]
internal void set_ShouldMergeMediaQueries(bool value);
    [CompilerGeneratedAttribute]
private bool get_ShouldAssembleBackgroundImages();
    [CompilerGeneratedAttribute]
internal void set_ShouldAssembleBackgroundImages(bool value);
    [CompilerGeneratedAttribute]
internal bool get_ShouldMinify();
    [CompilerGeneratedAttribute]
internal void set_ShouldMinify(bool value);
    [CompilerGeneratedAttribute]
internal HashSet`1<string> get_HackSelectors();
    [CompilerGeneratedAttribute]
internal void set_HackSelectors(HashSet`1<string> value);
    [CompilerGeneratedAttribute]
internal HashSet`1<string> get_BannedSelectors();
    [CompilerGeneratedAttribute]
internal void set_BannedSelectors(HashSet`1<string> value);
    [CompilerGeneratedAttribute]
internal string get_ImageAssembleScanDestinationFile();
    [CompilerGeneratedAttribute]
internal void set_ImageAssembleScanDestinationFile(string value);
    [CompilerGeneratedAttribute]
internal string get_ImageSpritingLogPath();
    [CompilerGeneratedAttribute]
internal void set_ImageSpritingLogPath(string value);
    [CompilerGeneratedAttribute]
private string get_ImagesOutputDirectory();
    [CompilerGeneratedAttribute]
internal void set_ImagesOutputDirectory(string value);
    [CompilerGeneratedAttribute]
internal HashSet`1<string> get_ImageAssembleReferencesToIgnore();
    [CompilerGeneratedAttribute]
internal void set_ImageAssembleReferencesToIgnore(HashSet`1<string> value);
    [CompilerGeneratedAttribute]
private Nullable`1<int> get_ImageAssemblyPadding();
    [CompilerGeneratedAttribute]
internal void set_ImageAssemblyPadding(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
internal bool get_ErrorOnInvalidSprite();
    [CompilerGeneratedAttribute]
internal void set_ErrorOnInvalidSprite(bool value);
    [SuppressMessageAttribute("Microsoft.Design", "CA1031:DoNotCatchGeneralExceptionTypes")]
internal MinifyCssResult Process(ContentItem contentItem, FileHasherActivity imageHasher);
    [SuppressMessageAttribute("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
internal void Execute(ContentItem contentItem);
    [SuppressMessageAttribute("Microsoft.Globalization", "CA1308:NormalizeStringsToUppercase")]
private static string PreHashImages(IWebGreaseContext context, string cssContent);
    private Tuple`2<string, IEnumerable`1<ContentItem>> HashImages(string cssContent, FileHasherActivity imageHasher, ICacheSection cacheSection);
    private object GetVarBySettings(FileHasherActivity imageHasher);
    private Tuple`2<string, IEnumerable`1<ContentItem>> ApplyConfiguredVisitors(AstNode stylesheetNode);
    private Tuple`2<AstNode, IEnumerable`1<ContentItem>> SpriteBackgroundImages(AstNode stylesheetNode);
    private Tuple`2<ImageLog, List`1<ContentItem>> SpriteImageFromLog(ImageAssemblyScanOutput scanOutput, string mapXmlFile, ImageAssemblyAnalysisLog imageAssemblyAnalysisLog);
    private ImageLog CreateSpritedImages(string mapXmlFile, ImageAssemblyAnalysisLog imageAssemblyAnalysisLog, IEnumerable`1<InputImage> imageReferencesToAssemble, ICacheSection cacheSection, ICollection`1<ContentItem> results);
    private ImageLog RestoreSpritedImagesFromCache(string mapXmlFile, ICacheSection cacheSection, List`1<ContentItem> results);
    private string GetRelativeSpriteCacheKey(IEnumerable`1<InputImage> imageReferencesToAssemble);
    private ImageAssemblyScanVisitor ExecuteImageAssemblyScan(AstNode stylesheetNode);
    private AstNode ExecuteImageAssemblyUpdate(AstNode stylesheetNode, IEnumerable`1<ImageLog> imageLogs);
    [CompilerGeneratedAttribute]
private static string <CreateSpritedImages>b__20(AssembledImage il);
    [CompilerGeneratedAttribute]
private string <GetRelativeSpriteCacheKey>b__25(InputImage ir);
    [CompilerGeneratedAttribute]
private string <GetRelativeSpriteCacheKey>b__26(string dip);
}
internal class WebGrease.Activities.MinifyCssResult : object {
    [CompilerGeneratedAttribute]
private ContentItem <Css>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<ContentItem> <SpritedImages>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<ContentItem> <HashedImages>k__BackingField;
    internal ContentItem Css { get; private set; }
    internal IEnumerable`1<ContentItem> SpritedImages { get; private set; }
    internal IEnumerable`1<ContentItem> HashedImages { get; private set; }
    public MinifyCssResult(ContentItem css, IEnumerable`1<ContentItem> spritedImages, IEnumerable`1<ContentItem> hashedImages);
    [CompilerGeneratedAttribute]
internal ContentItem get_Css();
    [CompilerGeneratedAttribute]
private void set_Css(ContentItem value);
    [CompilerGeneratedAttribute]
internal IEnumerable`1<ContentItem> get_SpritedImages();
    [CompilerGeneratedAttribute]
private void set_SpritedImages(IEnumerable`1<ContentItem> value);
    [CompilerGeneratedAttribute]
internal IEnumerable`1<ContentItem> get_HashedImages();
    [CompilerGeneratedAttribute]
private void set_HashedImages(IEnumerable`1<ContentItem> value);
}
internal class WebGrease.Activities.MinifyJSActivity : object {
    private IWebGreaseContext context;
    [CompilerGeneratedAttribute]
private string <SourceFile>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DestinationFile>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MinifyArgs>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AnalyzeArgs>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShouldAnalyze>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShouldMinify>k__BackingField;
    private string SourceFile { get; internal set; }
    private string DestinationFile { get; internal set; }
    private string MinifyArgs { get; internal set; }
    private string AnalyzeArgs { get; internal set; }
    private bool ShouldAnalyze { get; internal set; }
    private bool ShouldMinify { get; internal set; }
    public MinifyJSActivity(IWebGreaseContext context);
    [CompilerGeneratedAttribute]
private string get_SourceFile();
    [CompilerGeneratedAttribute]
internal void set_SourceFile(string value);
    [CompilerGeneratedAttribute]
private string get_DestinationFile();
    [CompilerGeneratedAttribute]
internal void set_DestinationFile(string value);
    [CompilerGeneratedAttribute]
private string get_MinifyArgs();
    [CompilerGeneratedAttribute]
internal void set_MinifyArgs(string value);
    [CompilerGeneratedAttribute]
private string get_AnalyzeArgs();
    [CompilerGeneratedAttribute]
internal void set_AnalyzeArgs(string value);
    [CompilerGeneratedAttribute]
private bool get_ShouldAnalyze();
    [CompilerGeneratedAttribute]
internal void set_ShouldAnalyze(bool value);
    [CompilerGeneratedAttribute]
private bool get_ShouldMinify();
    [CompilerGeneratedAttribute]
internal void set_ShouldMinify(bool value);
    internal void Execute(ContentItem contentItem);
    internal ContentItem Minify(ContentItem sourceContentItem);
    private void HandleMinifierErrors(ContentItem contentItem, ICollection`1<ContextError> errorsAndWarnings);
    private SwitchParser GetMinifierSettings(Minifier minifier);
}
internal class WebGrease.Activities.PreprocessorActivity : object {
    private IWebGreaseContext context;
    [CompilerGeneratedAttribute]
private List`1<InputSpec> <Inputs>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OutputFolder>k__BackingField;
    [CompilerGeneratedAttribute]
private PreprocessingConfig <PreprocessingConfig>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <MinimalOutput>k__BackingField;
    internal List`1<InputSpec> Inputs { get; private set; }
    private string OutputFolder { get; internal set; }
    private PreprocessingConfig PreprocessingConfig { get; internal set; }
    internal bool MinimalOutput { get; internal set; }
    internal PreprocessorActivity(IWebGreaseContext context);
    [CompilerGeneratedAttribute]
internal List`1<InputSpec> get_Inputs();
    [CompilerGeneratedAttribute]
private void set_Inputs(List`1<InputSpec> value);
    [CompilerGeneratedAttribute]
private string get_OutputFolder();
    [CompilerGeneratedAttribute]
internal void set_OutputFolder(string value);
    [CompilerGeneratedAttribute]
private PreprocessingConfig get_PreprocessingConfig();
    [CompilerGeneratedAttribute]
internal void set_PreprocessingConfig(PreprocessingConfig value);
    [CompilerGeneratedAttribute]
internal bool get_MinimalOutput();
    [CompilerGeneratedAttribute]
internal void set_MinimalOutput(bool value);
    internal IEnumerable`1<ContentItem> Execute();
}
internal class WebGrease.Activities.RenamedFile : object {
    [CompilerGeneratedAttribute]
private string <OutputName>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <InputNames>k__BackingField;
    public string OutputName { get; private set; }
    public List`1<string> InputNames { get; private set; }
    public RenamedFile(XContainer fileElement);
    [CompilerGeneratedAttribute]
public string get_OutputName();
    [CompilerGeneratedAttribute]
private void set_OutputName(string value);
    [CompilerGeneratedAttribute]
public List`1<string> get_InputNames();
    [CompilerGeneratedAttribute]
private void set_InputNames(List`1<string> value);
}
internal class WebGrease.Activities.RenamedFilesLog : object {
    [CompilerGeneratedAttribute]
private List`1<RenamedFile> <RenamedFiles>k__BackingField;
    internal List`1<RenamedFile> RenamedFiles { get; private set; }
    internal RenamedFilesLog(string logFile);
    [CompilerGeneratedAttribute]
internal List`1<RenamedFile> get_RenamedFiles();
    [CompilerGeneratedAttribute]
private void set_RenamedFiles(List`1<RenamedFile> value);
}
internal class WebGrease.Activities.RenamedFilesLogs : object {
    private Dictionary`2<string, string> dictionary;
    private Dictionary`2<string, List`1<string>> m_reverseDictionary;
    [CompilerGeneratedAttribute]
private static Func`2<string, string> CS$<>9__CachedAnonymousMethodDelegate8;
    [SuppressMessageAttribute("Microsoft.Globalization", "CA1308:NormalizeStringsToUppercase")]
public RenamedFilesLogs(ICollection`1<string> logFiles);
    public static RenamedFilesLogs LoadHashedImagesLogs(string hashedImagesLogFile);
    public static string NormalizeSlash(string path);
    public bool HasItems();
    [SuppressMessageAttribute("Microsoft.Globalization", "CA1308:NormalizeStringsToUppercase")]
public string FindHashPath(string inputName);
    public bool AllInputFileNamesMatch(string hashedFileName, List`1<string> inputFileNames);
    [CompilerGeneratedAttribute]
private void <.ctor>b__0(RenamedFile renamedFile);
    [CompilerGeneratedAttribute]
private void <.ctor>b__2(RenamedFile renamedFile);
    [CompilerGeneratedAttribute]
private static string <.ctor>b__3(string inputName);
}
internal class WebGrease.Activities.ResourceDirectoryPath : object {
    [CompilerGeneratedAttribute]
private string <Directory>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowOverrides>k__BackingField;
    public string Directory { get; public set; }
    public bool AllowOverrides { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Directory();
    [CompilerGeneratedAttribute]
public void set_Directory(string value);
    [CompilerGeneratedAttribute]
public bool get_AllowOverrides();
    [CompilerGeneratedAttribute]
public void set_AllowOverrides(bool value);
}
[SuppressMessageAttribute("Microsoft.Usage", "CA2237:MarkISerializableTypesWithSerializable")]
public class WebGrease.Activities.ResourceOverrideException : Exception {
    [CompilerGeneratedAttribute]
private string <FileName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TokenKey>k__BackingField;
    public string FileName { get; private set; }
    public string TokenKey { get; private set; }
    public ResourceOverrideException(string message);
    public ResourceOverrideException(string message, Exception inner);
    public ResourceOverrideException(string fileName, string tokenKey);
    protected ResourceOverrideException(SerializationInfo info, StreamingContext context);
    [CompilerGeneratedAttribute]
public string get_FileName();
    [CompilerGeneratedAttribute]
private void set_FileName(string value);
    [CompilerGeneratedAttribute]
public string get_TokenKey();
    [CompilerGeneratedAttribute]
private void set_TokenKey(string value);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
internal static class WebGrease.Activities.ResourcesManager : object {
    internal static void TryGetResources(string resourcesDirectoryPath, string localeOrThemeName, Dictionary`2& resources);
    private static bool HasResources(string resourcesDirectoryPath, string localeOrThemeName, String& resourcePath);
}
internal class WebGrease.Activities.ResourcesResolutionActivity : object {
    private static Dictionary`2<string, IDictionary`2<string, string>> EmptyResult;
    private IWebGreaseContext context;
    [CompilerGeneratedAttribute]
private string <SourceDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private ResourceType <ResourceTypeFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ApplicationDirectoryName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SiteDirectoryName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DestinationDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<string> <ResourceKeys>k__BackingField;
    [CompilerGeneratedAttribute]
private FileTypes <FileType>k__BackingField;
    internal string SourceDirectory { get; internal set; }
    internal ResourceType ResourceTypeFilter { get; internal set; }
    internal string ApplicationDirectoryName { get; internal set; }
    internal string SiteDirectoryName { get; internal set; }
    internal string DestinationDirectory { get; internal set; }
    internal IList`1<string> ResourceKeys { get; private set; }
    internal FileTypes FileType { get; internal set; }
    public ResourcesResolutionActivity(IWebGreaseContext context);
    private static ResourcesResolutionActivity();
    [CompilerGeneratedAttribute]
internal string get_SourceDirectory();
    [CompilerGeneratedAttribute]
internal void set_SourceDirectory(string value);
    [CompilerGeneratedAttribute]
internal ResourceType get_ResourceTypeFilter();
    [CompilerGeneratedAttribute]
internal void set_ResourceTypeFilter(ResourceType value);
    [CompilerGeneratedAttribute]
internal string get_ApplicationDirectoryName();
    [CompilerGeneratedAttribute]
internal void set_ApplicationDirectoryName(string value);
    [CompilerGeneratedAttribute]
internal string get_SiteDirectoryName();
    [CompilerGeneratedAttribute]
internal void set_SiteDirectoryName(string value);
    [CompilerGeneratedAttribute]
internal string get_DestinationDirectory();
    [CompilerGeneratedAttribute]
internal void set_DestinationDirectory(string value);
    [CompilerGeneratedAttribute]
internal IList`1<string> get_ResourceKeys();
    [CompilerGeneratedAttribute]
private void set_ResourceKeys(IList`1<string> value);
    [CompilerGeneratedAttribute]
internal FileTypes get_FileType();
    [CompilerGeneratedAttribute]
internal void set_FileType(FileTypes value);
    internal IDictionary`2<string, IDictionary`2<string, string>> GetMergedResources();
    internal void Execute();
    private bool HasSomethingToResolve();
    [CompilerGeneratedAttribute]
private IDictionary`2<string, IDictionary`2<string, string>> <GetMergedResources>b__0();
    [CompilerGeneratedAttribute]
private void <Execute>b__1();
}
internal class WebGrease.Activities.ResourcesResolver : object {
    private static Regex LocalizationResourceKeyRegex;
    private string outputDirectoryPath;
    private List`1<ResourceDirectoryPath> resourceDirectoryPaths;
    private IEnumerable`1<string> resourceKeys;
    [CompilerGeneratedAttribute]
private static Func`2<ResourceDirectoryPath, bool> CS$<>9__CachedAnonymousMethodDelegate4;
    [CompilerGeneratedAttribute]
private static Func`2<IDictionary`2<string, string>, IEnumerable`1<string>> CS$<>9__CachedAnonymousMethodDelegatef;
    [CompilerGeneratedAttribute]
private static Func`2<Match, string> CS$<>9__CachedAnonymousMethodDelegate10;
    [CompilerGeneratedAttribute]
private static Func`2<string, string> CS$<>9__CachedAnonymousMethodDelegate11;
    [CompilerGeneratedAttribute]
private static Func`2<KeyValuePair`2<string, string>, string> CS$<>9__CachedAnonymousMethodDelegate13;
    [CompilerGeneratedAttribute]
private static Func`2<KeyValuePair`2<string, string>, string> CS$<>9__CachedAnonymousMethodDelegate14;
    [CompilerGeneratedAttribute]
private static Func`2<KeyValuePair`2<string, string>, string> CS$<>9__CachedAnonymousMethodDelegate15;
    private ResourcesResolver(IWebGreaseContext context, string inputContentDirectory, ResourceType resourceType, string applicationDirectoryName, string siteName, IEnumerable`1<string> resourceKeys, string outputDirectoryPath);
    private static ResourcesResolver();
    internal static ResourcesResolver Factory(IWebGreaseContext context, string inputContentDirectory, ResourceType resourceType, string applicationDirectoryName, string siteName, IEnumerable`1<string> resourceKeys, string outputDirectoryPath);
    [SuppressMessageAttribute("Microsoft.Globalization", "CA1308:NormalizeStringsToUppercase")]
internal IDictionary`2<string, IDictionary`2<string, string>> GetMergedResources();
    [SuppressMessageAttribute("Microsoft.Globalization", "CA1308:NormalizeStringsToUppercase")]
internal void ResolveHierarchy();
    private SortedDictionary`2<string, string> GetResources(string resourceKey, string localeOrThemeName);
    internal static Dictionary`2<string, string> ReadResources(string filePath);
    internal static string ExpandResourceKeys(string input, IDictionary`2<string, string> resources);
    private static void MergeResources(IDictionary`2<string, string> output, Dictionary`2<string, string> input, bool allowOverrides, bool throwsException);
    private static void WriteResources(string outputDirectoryPath, string key, IDictionary`2<string, string> resources);
    public static IEnumerable`1<Tuple`2<List`1<string>, Dictionary`2<string, string>>> GetGroupedUsedResourceKeys(string css, IDictionary`2<string, IDictionary`2<string, string>> resources);
    [CompilerGeneratedAttribute]
private static bool <GetResources>b__3(ResourceDirectoryPath resourceDirectoryPath);
    [CompilerGeneratedAttribute]
private static IEnumerable`1<string> <GetGroupedUsedResourceKeys>b__8(IDictionary`2<string, string> v);
    [CompilerGeneratedAttribute]
private static string <GetGroupedUsedResourceKeys>b__9(Match m);
    [CompilerGeneratedAttribute]
private static string <GetGroupedUsedResourceKeys>b__a(string rk);
    [CompilerGeneratedAttribute]
private static string <GetGroupedUsedResourceKeys>b__c(KeyValuePair`2<string, string> kvp);
    [CompilerGeneratedAttribute]
private static string <GetGroupedUsedResourceKeys>b__d(KeyValuePair`2<string, string> kvp);
    [CompilerGeneratedAttribute]
private static string <GetGroupedUsedResourceKeys>b__e(KeyValuePair`2<string, string> kv);
}
internal enum WebGrease.Activities.ResourceType : Enum {
    public int value__;
    public static ResourceType Themes;
    public static ResourceType Locales;
}
internal class WebGrease.BuildWorkflowException : WorkflowException {
    [CompilerGeneratedAttribute]
private bool <HasDetailedError>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Subcategory>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ErrorCode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HelpKeyword>k__BackingField;
    [CompilerGeneratedAttribute]
private string <File>k__BackingField;
    [CompilerGeneratedAttribute]
private int <LineNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ColumnNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private int <EndLineNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private int <EndColumnNumber>k__BackingField;
    public bool HasDetailedError { get; private set; }
    public string Subcategory { get; public set; }
    public string ErrorCode { get; public set; }
    public string HelpKeyword { get; public set; }
    public string File { get; public set; }
    public int LineNumber { get; public set; }
    public int ColumnNumber { get; public set; }
    public int EndLineNumber { get; public set; }
    public int EndColumnNumber { get; public set; }
    public BuildWorkflowException(string message);
    public BuildWorkflowException(string message, Exception inner);
    public BuildWorkflowException(string message, string subcategory, string errorCode, string helpKeyword, string file, int lineNumber, int columnNumber, int endLineNumber, int endColumnNumber, Exception inner);
    protected BuildWorkflowException(SerializationInfo info, StreamingContext context);
    [CompilerGeneratedAttribute]
public bool get_HasDetailedError();
    [CompilerGeneratedAttribute]
private void set_HasDetailedError(bool value);
    [CompilerGeneratedAttribute]
public string get_Subcategory();
    [CompilerGeneratedAttribute]
public void set_Subcategory(string value);
    [CompilerGeneratedAttribute]
public string get_ErrorCode();
    [CompilerGeneratedAttribute]
public void set_ErrorCode(string value);
    [CompilerGeneratedAttribute]
public string get_HelpKeyword();
    [CompilerGeneratedAttribute]
public void set_HelpKeyword(string value);
    [CompilerGeneratedAttribute]
public string get_File();
    [CompilerGeneratedAttribute]
public void set_File(string value);
    [CompilerGeneratedAttribute]
public int get_LineNumber();
    [CompilerGeneratedAttribute]
public void set_LineNumber(int value);
    [CompilerGeneratedAttribute]
public int get_ColumnNumber();
    [CompilerGeneratedAttribute]
public void set_ColumnNumber(int value);
    [CompilerGeneratedAttribute]
public int get_EndLineNumber();
    [CompilerGeneratedAttribute]
public void set_EndLineNumber(int value);
    [CompilerGeneratedAttribute]
public int get_EndColumnNumber();
    [CompilerGeneratedAttribute]
public void set_EndColumnNumber(int value);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
internal class WebGrease.CacheDependencyGraph : object {
    private List`1<KeyValuePair`2<Guid, Guid>> links;
    private IDictionary`2<string, Guid> nodes;
    internal void AddDependencyLink(string label1, string label2);
    internal void Save(string path);
    [SuppressMessageAttribute("Microsoft.Globalization", "CA1308:NormalizeStringsToUppercase")]
private Guid AddDependencyNode(string label);
}
internal static class WebGrease.CacheFileCategories : object {
    internal static string AssemblerResult;
    internal static string HashedImage;
    internal static string HashedSpriteImage;
    internal static string HashedMinifiedJsResult;
    internal static string HashedMinifiedCssResult;
    internal static string MinifiedCssResult;
    internal static string RelativeFileNames;
    internal static string MinifiedJsResult;
    internal static string PreprocessingResult;
    internal static string SpriteLogFile;
    internal static string SpriteLogFileXml;
    internal static string SolutionCacheConfig;
}
public class WebGrease.CacheManager : object {
    private IDictionary`2<string, ReadOnlyCacheSection> loadedCacheSections;
    private string cacheRootPath;
    private IWebGreaseContext context;
    private ICacheSection currentCacheSection;
    public ICacheSection CurrentCacheSection { get; }
    public IDictionary`2<string, ReadOnlyCacheSection> LoadedCacheSections { get; }
    public string RootPath { get; }
    public CacheManager(WebGreaseConfiguration configuration, LogManager logManager);
    public sealed virtual ICacheSection get_CurrentCacheSection();
    public sealed virtual IDictionary`2<string, ReadOnlyCacheSection> get_LoadedCacheSections();
    public sealed virtual string get_RootPath();
    public sealed virtual ICacheSection BeginSection(string category, ContentItem contentItem, object settings, IFileSet cacheVaryByFileSet);
    [SuppressMessageAttribute("Microsoft.Design", "CA1031:DoNotCatchGeneralExceptionTypes")]
public sealed virtual void CleanUp();
    public sealed virtual void EndSection(ICacheSection cacheSection);
    public sealed virtual string GetAbsoluteCacheFilePath(string category, string fileName);
    public sealed virtual void SetContext(IWebGreaseContext newContext);
    public sealed virtual string StoreInCache(string cacheCategory, ContentItem contentItem);
}
public class WebGrease.CacheResult : object {
    [CompilerGeneratedAttribute]
private string <RelativeContentPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RelativeHashedContentPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CachedFilePath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FileCategory>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContentHash>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EndResult>k__BackingField;
    public string RelativeContentPath { get; private set; }
    public string RelativeHashedContentPath { get; private set; }
    public string CachedFilePath { get; private set; }
    public string FileCategory { get; private set; }
    public string ContentHash { get; private set; }
    public bool EndResult { get; private set; }
    [CompilerGeneratedAttribute]
public string get_RelativeContentPath();
    [CompilerGeneratedAttribute]
private void set_RelativeContentPath(string value);
    [CompilerGeneratedAttribute]
public string get_RelativeHashedContentPath();
    [CompilerGeneratedAttribute]
private void set_RelativeHashedContentPath(string value);
    [CompilerGeneratedAttribute]
public string get_CachedFilePath();
    [CompilerGeneratedAttribute]
private void set_CachedFilePath(string value);
    [CompilerGeneratedAttribute]
public string get_FileCategory();
    [CompilerGeneratedAttribute]
private void set_FileCategory(string value);
    [CompilerGeneratedAttribute]
public string get_ContentHash();
    [CompilerGeneratedAttribute]
private void set_ContentHash(string value);
    [CompilerGeneratedAttribute]
public bool get_EndResult();
    [CompilerGeneratedAttribute]
private void set_EndResult(bool value);
    public static CacheResult FromContentFile(IWebGreaseContext context, string cacheCategory, bool endResult, string fileCategory, ContentItem contentItem);
}
public class WebGrease.CacheSection : object {
    private static string CacheSectionFileVersionKey;
    private List`1<CacheResult> cacheResults;
    private IDictionary`2<string, CacheSourceDependency> sourceDependencies;
    private List`1<CacheVaryByFile> varyByFiles;
    private List`1<string> varyBySettings;
    private Lazy`1<List`1<CacheSection>> childCacheSections;
    private string cacheCategory;
    private ReadOnlyCacheSection cachedSection;
    private IWebGreaseContext context;
    private bool isUnsaved;
    private CacheSection parent;
    private string uniqueKey;
    private string absolutePath;
    [CompilerGeneratedAttribute]
private static Func`1<List`1<CacheSection>> CS$<>9__CachedAnonymousMethodDelegate1;
    [CompilerGeneratedAttribute]
private static Func`2<CacheVaryByFile, string> CS$<>9__CachedAnonymousMethodDelegate4;
    [CompilerGeneratedAttribute]
private static Func`2<CacheResult, ContentItem> CS$<>9__CachedAnonymousMethodDelegatec;
    [CompilerGeneratedAttribute]
private static Func`2<CacheSection, string> CS$<>9__CachedAnonymousMethodDelegatee;
    public ICacheSection Parent { get; }
    public string UniqueKey { get; }
    private List`1<CacheSection> ChildCacheSections { get; }
    public sealed virtual ICacheSection get_Parent();
    public sealed virtual string get_UniqueKey();
    private List`1<CacheSection> get_ChildCacheSections();
    public static CacheSection Begin(IWebGreaseContext context, string cacheCategory, Action`1<ICacheSection> action, ICacheSection parentCacheSection);
    public static CacheSection Begin(IWebGreaseContext context, string cacheCategory, string uniqueKey, ICacheSection parentCacheSection);
    public sealed virtual T GetCacheData(string id);
    public sealed virtual void SetCacheData(string id, T obj);
    public sealed virtual void AddResult(ContentItem contentItem, string id, bool isEndResult);
    public sealed virtual void AddSourceDependency(string file);
    public sealed virtual void AddSourceDependency(string directory, string searchPattern, SearchOption searchOption);
    public sealed virtual void AddSourceDependency(InputSpec inputSpec);
    public sealed virtual bool CanBeRestoredFromCache();
    public sealed virtual bool CanBeSkipped();
    public sealed virtual void EndSection();
    public IEnumerable`1<CacheResult> GetCacheResults(string fileCategory, bool endResultOnly);
    public sealed virtual ContentItem GetCachedContentItem(string fileCategory);
    public sealed virtual ContentItem GetCachedContentItem(string fileCategory, string relativeDestinationFile, string relativeHashedDestinationFile, IEnumerable`1<ContentPivot> contentPivots);
    public sealed virtual IEnumerable`1<ContentItem> GetCachedContentItems(string fileCategory, bool endResultOnly);
    public sealed virtual void Save();
    public sealed virtual void VaryByContentItem(ContentItem contentItem);
    public sealed virtual void VaryBySettings(object settings, bool nonpublic);
    private static void EnsureCachePath(IWebGreaseContext context, string cacheCategory);
    private static string ToReadOnlyCacheSectionJson(CacheSection cacheSection);
    private void AddChildCacheSection(CacheSection cacheSection);
    private void Dispose();
    private void Touch();
    [CompilerGeneratedAttribute]
private static List`1<CacheSection> <.ctor>b__0();
    [CompilerGeneratedAttribute]
private static string <Begin>b__3(CacheVaryByFile vbf);
    [CompilerGeneratedAttribute]
private static ContentItem <GetCachedContentItems>b__b(CacheResult crf);
    [CompilerGeneratedAttribute]
private static string <ToReadOnlyCacheSectionJson>b__d(CacheSection ccs);
    [CompilerGeneratedAttribute]
private void <Touch>b__f(CacheResult cr);
}
public class WebGrease.CacheSourceDependency : object {
    [CompilerGeneratedAttribute]
private InputSpec <InputSpec>k__BackingField;
    [CompilerGeneratedAttribute]
private string <InputSpecHash>k__BackingField;
    public InputSpec InputSpec { get; private set; }
    public string InputSpecHash { get; private set; }
    [CompilerGeneratedAttribute]
public InputSpec get_InputSpec();
    [CompilerGeneratedAttribute]
private void set_InputSpec(InputSpec value);
    [CompilerGeneratedAttribute]
public string get_InputSpecHash();
    [CompilerGeneratedAttribute]
private void set_InputSpecHash(string value);
    internal static CacheSourceDependency Create(IWebGreaseContext context, InputSpec inputSpec);
    internal bool HasChanged(IWebGreaseContext context);
    private static string GetInputSpecHash(IWebGreaseContext context, InputSpec inputSpec);
}
public class WebGrease.CacheVaryByFile : object {
    [CompilerGeneratedAttribute]
private string <Hash>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    public string Hash { get; private set; }
    public string Path { get; private set; }
    [CompilerGeneratedAttribute]
public string get_Hash();
    [CompilerGeneratedAttribute]
private void set_Hash(string value);
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
private void set_Path(string value);
    public static CacheVaryByFile FromFile(IWebGreaseContext context, ContentItem contentItem);
}
internal static class WebGrease.Common.FileHelper : object {
    internal static void WriteFile(string path, string content);
}
internal enum WebGrease.Configuration.ActivityMode : Enum {
    public int value__;
    public static ActivityMode ShowHelp;
    public static ActivityMode All;
    public static ActivityMode Minify;
    public static ActivityMode Validate;
    public static ActivityMode ExpandTokens;
    public static ActivityMode SpriteImages;
    public static ActivityMode Bundle;
    public static ActivityMode AutoName;
}
internal static class WebGrease.Configuration.ArgumentProcessor : object {
}
public class WebGrease.Configuration.AutoNameConfig : object {
    [CompilerGeneratedAttribute]
private bool <ShouldAutoName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public bool ShouldAutoName { get; private set; }
    public string Name { get; private set; }
    internal AutoNameConfig(XElement element);
    [CompilerGeneratedAttribute]
public bool get_ShouldAutoName();
    [CompilerGeneratedAttribute]
private void set_ShouldAutoName(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
}
public class WebGrease.Configuration.BundlingConfig : object {
    [CompilerGeneratedAttribute]
private bool <ShouldBundleFiles>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <MinimalOutput>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public bool ShouldBundleFiles { get; private set; }
    public bool MinimalOutput { get; private set; }
    public string Name { get; private set; }
    internal BundlingConfig(XElement element);
    [CompilerGeneratedAttribute]
public bool get_ShouldBundleFiles();
    [CompilerGeneratedAttribute]
private void set_ShouldBundleFiles(bool value);
    [CompilerGeneratedAttribute]
public bool get_MinimalOutput();
    [CompilerGeneratedAttribute]
private void set_MinimalOutput(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
}
internal class WebGrease.Configuration.CssFileSet : object {
    private bool usingFileSetLocales;
    private bool usingFileSetThemes;
    [CompilerGeneratedAttribute]
private IList`1<string> <LoadedConfigurationFiles>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<string> <Locales>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, PreprocessingConfig> <Preprocessing>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, AutoNameConfig> <Autonaming>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, BundlingConfig> <Bundling>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Output>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<InputSpec> <InputSpecs>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<string> <Themes>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, CssMinificationConfig> <Minification>k__BackingField;
    [CompilerGeneratedAttribute]
private GlobalConfig <GlobalConfig>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, CssSpritingConfig> <ImageSpriting>k__BackingField;
    public IList`1<string> LoadedConfigurationFiles { get; private set; }
    public IList`1<string> Locales { get; private set; }
    public IDictionary`2<string, PreprocessingConfig> Preprocessing { get; private set; }
    public IDictionary`2<string, AutoNameConfig> Autonaming { get; private set; }
    public IDictionary`2<string, BundlingConfig> Bundling { get; private set; }
    public string Output { get; public set; }
    public IList`1<InputSpec> InputSpecs { get; private set; }
    internal IList`1<string> Themes { get; private set; }
    internal IDictionary`2<string, CssMinificationConfig> Minification { get; private set; }
    internal GlobalConfig GlobalConfig { get; private set; }
    internal IDictionary`2<string, CssSpritingConfig> ImageSpriting { get; private set; }
    [SuppressMessageAttribute("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
internal CssFileSet(XElement cssFileSetElement, string sourceDirectory, IList`1<string> defaultLocales, IDictionary`2<string, CssMinificationConfig> defaultMinification, IDictionary`2<string, CssSpritingConfig> defaultSpriting, IList`1<string> defaultThemes, IDictionary`2<string, PreprocessingConfig> defaultPreprocessing, IDictionary`2<string, BundlingConfig> defaultBundling, GlobalConfig globalConfig, string configurationFile);
    private CssFileSet(IList`1<string> defaultLocales, IDictionary`2<string, CssMinificationConfig> defaultMinification, IDictionary`2<string, CssSpritingConfig> defaultSpriting, IList`1<string> defaultThemes, IDictionary`2<string, PreprocessingConfig> defaultPreprocessing, IDictionary`2<string, BundlingConfig> defaultBundling);
    [CompilerGeneratedAttribute]
public sealed virtual IList`1<string> get_LoadedConfigurationFiles();
    [CompilerGeneratedAttribute]
private void set_LoadedConfigurationFiles(IList`1<string> value);
    [CompilerGeneratedAttribute]
public sealed virtual IList`1<string> get_Locales();
    [CompilerGeneratedAttribute]
private void set_Locales(IList`1<string> value);
    [CompilerGeneratedAttribute]
public sealed virtual IDictionary`2<string, PreprocessingConfig> get_Preprocessing();
    [CompilerGeneratedAttribute]
private void set_Preprocessing(IDictionary`2<string, PreprocessingConfig> value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, AutoNameConfig> get_Autonaming();
    [CompilerGeneratedAttribute]
private void set_Autonaming(IDictionary`2<string, AutoNameConfig> value);
    [CompilerGeneratedAttribute]
public sealed virtual IDictionary`2<string, BundlingConfig> get_Bundling();
    [CompilerGeneratedAttribute]
private void set_Bundling(IDictionary`2<string, BundlingConfig> value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Output();
    [CompilerGeneratedAttribute]
public void set_Output(string value);
    [CompilerGeneratedAttribute]
public sealed virtual IList`1<InputSpec> get_InputSpecs();
    [CompilerGeneratedAttribute]
private void set_InputSpecs(IList`1<InputSpec> value);
    [CompilerGeneratedAttribute]
internal IList`1<string> get_Themes();
    [CompilerGeneratedAttribute]
private void set_Themes(IList`1<string> value);
    [CompilerGeneratedAttribute]
internal IDictionary`2<string, CssMinificationConfig> get_Minification();
    [CompilerGeneratedAttribute]
private void set_Minification(IDictionary`2<string, CssMinificationConfig> value);
    [CompilerGeneratedAttribute]
internal GlobalConfig get_GlobalConfig();
    [CompilerGeneratedAttribute]
private void set_GlobalConfig(GlobalConfig value);
    [CompilerGeneratedAttribute]
internal IDictionary`2<string, CssSpritingConfig> get_ImageSpriting();
    [CompilerGeneratedAttribute]
private void set_ImageSpriting(IDictionary`2<string, CssSpritingConfig> value);
}
internal class WebGrease.Configuration.CssMinificationConfig : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShouldMinify>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShouldOptimize>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShouldMergeMediaQueries>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShouldValidateLowerCase>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShouldExcludeProperties>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <ForbiddenSelectors>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <RemoveSelectors>k__BackingField;
    public string Name { get; public set; }
    internal bool ShouldMinify { get; internal set; }
    internal bool ShouldOptimize { get; internal set; }
    internal bool ShouldMergeMediaQueries { get; internal set; }
    internal bool ShouldValidateLowerCase { get; internal set; }
    internal bool ShouldExcludeProperties { get; internal set; }
    internal IEnumerable`1<string> ForbiddenSelectors { get; internal set; }
    internal IEnumerable`1<string> RemoveSelectors { get; internal set; }
    public CssMinificationConfig(XElement element);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
internal bool get_ShouldMinify();
    [CompilerGeneratedAttribute]
internal void set_ShouldMinify(bool value);
    [CompilerGeneratedAttribute]
internal bool get_ShouldOptimize();
    [CompilerGeneratedAttribute]
internal void set_ShouldOptimize(bool value);
    [CompilerGeneratedAttribute]
internal bool get_ShouldMergeMediaQueries();
    [CompilerGeneratedAttribute]
internal void set_ShouldMergeMediaQueries(bool value);
    [CompilerGeneratedAttribute]
internal bool get_ShouldValidateLowerCase();
    [CompilerGeneratedAttribute]
internal void set_ShouldValidateLowerCase(bool value);
    [CompilerGeneratedAttribute]
internal bool get_ShouldExcludeProperties();
    [CompilerGeneratedAttribute]
internal void set_ShouldExcludeProperties(bool value);
    [CompilerGeneratedAttribute]
internal IEnumerable`1<string> get_ForbiddenSelectors();
    [CompilerGeneratedAttribute]
internal void set_ForbiddenSelectors(IEnumerable`1<string> value);
    [CompilerGeneratedAttribute]
internal IEnumerable`1<string> get_RemoveSelectors();
    [CompilerGeneratedAttribute]
internal void set_RemoveSelectors(IEnumerable`1<string> value);
}
[SuppressMessageAttribute("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
public class WebGrease.Configuration.CssSpritingConfig : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ImagePadding>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <ImagesToIgnore>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShouldAutoVersionBackgroundImages>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShouldAutoSprite>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DestinationImageFolder>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OutputUnit>k__BackingField;
    [CompilerGeneratedAttribute]
private double <OutputUnitFactor>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IgnoreImagesWithNonDefaultBackgroundSize>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <WriteLogFile>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ErrorOnInvalidSprite>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<ImageType> <ForceImageType>k__BackingField;
    public string Name { get; internal set; }
    public int ImagePadding { get; internal set; }
    public IEnumerable`1<string> ImagesToIgnore { get; internal set; }
    internal bool ShouldAutoVersionBackgroundImages { get; internal set; }
    internal bool ShouldAutoSprite { get; internal set; }
    internal string DestinationImageFolder { get; internal set; }
    internal string OutputUnit { get; internal set; }
    internal double OutputUnitFactor { get; internal set; }
    internal bool IgnoreImagesWithNonDefaultBackgroundSize { get; internal set; }
    internal bool WriteLogFile { get; internal set; }
    internal bool ErrorOnInvalidSprite { get; internal set; }
    internal Nullable`1<ImageType> ForceImageType { get; internal set; }
    public CssSpritingConfig(XElement element);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
internal void set_Name(string value);
    [CompilerGeneratedAttribute]
public int get_ImagePadding();
    [CompilerGeneratedAttribute]
internal void set_ImagePadding(int value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<string> get_ImagesToIgnore();
    [CompilerGeneratedAttribute]
internal void set_ImagesToIgnore(IEnumerable`1<string> value);
    [CompilerGeneratedAttribute]
internal bool get_ShouldAutoVersionBackgroundImages();
    [CompilerGeneratedAttribute]
internal void set_ShouldAutoVersionBackgroundImages(bool value);
    [CompilerGeneratedAttribute]
internal bool get_ShouldAutoSprite();
    [CompilerGeneratedAttribute]
internal void set_ShouldAutoSprite(bool value);
    [CompilerGeneratedAttribute]
internal string get_DestinationImageFolder();
    [CompilerGeneratedAttribute]
internal void set_DestinationImageFolder(string value);
    [CompilerGeneratedAttribute]
internal string get_OutputUnit();
    [CompilerGeneratedAttribute]
internal void set_OutputUnit(string value);
    [CompilerGeneratedAttribute]
internal double get_OutputUnitFactor();
    [CompilerGeneratedAttribute]
internal void set_OutputUnitFactor(double value);
    [CompilerGeneratedAttribute]
internal bool get_IgnoreImagesWithNonDefaultBackgroundSize();
    [CompilerGeneratedAttribute]
internal void set_IgnoreImagesWithNonDefaultBackgroundSize(bool value);
    [CompilerGeneratedAttribute]
internal bool get_WriteLogFile();
    [CompilerGeneratedAttribute]
internal void set_WriteLogFile(bool value);
    [CompilerGeneratedAttribute]
internal bool get_ErrorOnInvalidSprite();
    [CompilerGeneratedAttribute]
internal void set_ErrorOnInvalidSprite(bool value);
    [CompilerGeneratedAttribute]
internal Nullable`1<ImageType> get_ForceImageType();
    [CompilerGeneratedAttribute]
internal void set_ForceImageType(Nullable`1<ImageType> value);
}
public class WebGrease.Configuration.GlobalConfig : object {
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <TreatWarningsAsErrors>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public Nullable`1<bool> TreatWarningsAsErrors { get; private set; }
    public string Name { get; private set; }
    public GlobalConfig(XElement settingElement);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_TreatWarningsAsErrors();
    [CompilerGeneratedAttribute]
private void set_TreatWarningsAsErrors(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
}
public interface WebGrease.Configuration.IFileSet {
    public IList`1<string> Locales { get; }
    public IDictionary`2<string, PreprocessingConfig> Preprocessing { get; }
    public IDictionary`2<string, BundlingConfig> Bundling { get; }
    public string Output { get; }
    public IList`1<InputSpec> InputSpecs { get; }
    public IList`1<string> LoadedConfigurationFiles { get; }
    public abstract virtual IList`1<string> get_Locales();
    public abstract virtual IDictionary`2<string, PreprocessingConfig> get_Preprocessing();
    public abstract virtual IDictionary`2<string, BundlingConfig> get_Bundling();
    public abstract virtual string get_Output();
    public abstract virtual IList`1<InputSpec> get_InputSpecs();
    public abstract virtual IList`1<string> get_LoadedConfigurationFiles();
}
public interface WebGrease.Configuration.INamedConfig {
    public string Name { get; }
    public abstract virtual string get_Name();
}
public class WebGrease.Configuration.InputSpec : object {
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SearchPattern>k__BackingField;
    [CompilerGeneratedAttribute]
private SearchOption <SearchOption>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsOptional>k__BackingField;
    public string Path { get; public set; }
    public string SearchPattern { get; public set; }
    public SearchOption SearchOption { get; public set; }
    public bool IsOptional { get; public set; }
    internal InputSpec(XElement element, string sourceDirectory);
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
public void set_Path(string value);
    [CompilerGeneratedAttribute]
public string get_SearchPattern();
    [CompilerGeneratedAttribute]
public void set_SearchPattern(string value);
    [CompilerGeneratedAttribute]
public SearchOption get_SearchOption();
    [CompilerGeneratedAttribute]
public void set_SearchOption(SearchOption value);
    [CompilerGeneratedAttribute]
public bool get_IsOptional();
    [CompilerGeneratedAttribute]
public void set_IsOptional(bool value);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private static int GetObjectHashCode(object obj);
}
public class WebGrease.Configuration.JSFileSet : object {
    private bool usingFileSetLocales;
    [CompilerGeneratedAttribute]
private IList`1<string> <LoadedConfigurationFiles>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Output>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<string> <Locales>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, PreprocessingConfig> <Preprocessing>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, AutoNameConfig> <AutoNaming>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, BundlingConfig> <Bundling>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<InputSpec> <InputSpecs>k__BackingField;
    [CompilerGeneratedAttribute]
private GlobalConfig <GlobalConfig>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, JSValidationConfig> <Validation>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, JsMinificationConfig> <Minification>k__BackingField;
    public IList`1<string> LoadedConfigurationFiles { get; private set; }
    public string Output { get; public set; }
    public IList`1<string> Locales { get; private set; }
    public IDictionary`2<string, PreprocessingConfig> Preprocessing { get; private set; }
    public IDictionary`2<string, AutoNameConfig> AutoNaming { get; private set; }
    public IDictionary`2<string, BundlingConfig> Bundling { get; private set; }
    public IList`1<InputSpec> InputSpecs { get; private set; }
    internal GlobalConfig GlobalConfig { get; private set; }
    internal IDictionary`2<string, JSValidationConfig> Validation { get; private set; }
    internal IDictionary`2<string, JsMinificationConfig> Minification { get; private set; }
    internal JSFileSet(IList`1<string> defaultLocales, IDictionary`2<string, JsMinificationConfig> defaultMinification, IDictionary`2<string, PreprocessingConfig> defaultPreProcessing, IDictionary`2<string, BundlingConfig> defaultBundling);
    [SuppressMessageAttribute("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
internal JSFileSet(XElement jsFileSetElement, string sourceDirectory, IList`1<string> defaultLocales, IDictionary`2<string, JsMinificationConfig> defaultMinification, IDictionary`2<string, PreprocessingConfig> defaultPreProcessing, IDictionary`2<string, BundlingConfig> defaultBundling, GlobalConfig globalConfig, string configurationFile);
    [CompilerGeneratedAttribute]
public sealed virtual IList`1<string> get_LoadedConfigurationFiles();
    [CompilerGeneratedAttribute]
private void set_LoadedConfigurationFiles(IList`1<string> value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Output();
    [CompilerGeneratedAttribute]
public void set_Output(string value);
    [CompilerGeneratedAttribute]
public sealed virtual IList`1<string> get_Locales();
    [CompilerGeneratedAttribute]
private void set_Locales(IList`1<string> value);
    [CompilerGeneratedAttribute]
public sealed virtual IDictionary`2<string, PreprocessingConfig> get_Preprocessing();
    [CompilerGeneratedAttribute]
private void set_Preprocessing(IDictionary`2<string, PreprocessingConfig> value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, AutoNameConfig> get_AutoNaming();
    [CompilerGeneratedAttribute]
private void set_AutoNaming(IDictionary`2<string, AutoNameConfig> value);
    [CompilerGeneratedAttribute]
public sealed virtual IDictionary`2<string, BundlingConfig> get_Bundling();
    [CompilerGeneratedAttribute]
private void set_Bundling(IDictionary`2<string, BundlingConfig> value);
    [CompilerGeneratedAttribute]
public sealed virtual IList`1<InputSpec> get_InputSpecs();
    [CompilerGeneratedAttribute]
private void set_InputSpecs(IList`1<InputSpec> value);
    [CompilerGeneratedAttribute]
internal GlobalConfig get_GlobalConfig();
    [CompilerGeneratedAttribute]
private void set_GlobalConfig(GlobalConfig value);
    [CompilerGeneratedAttribute]
internal IDictionary`2<string, JSValidationConfig> get_Validation();
    [CompilerGeneratedAttribute]
private void set_Validation(IDictionary`2<string, JSValidationConfig> value);
    [CompilerGeneratedAttribute]
internal IDictionary`2<string, JsMinificationConfig> get_Minification();
    [CompilerGeneratedAttribute]
private void set_Minification(IDictionary`2<string, JsMinificationConfig> value);
}
internal class WebGrease.Configuration.JsMinificationConfig : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShouldMinify>k__BackingField;
    [CompilerGeneratedAttribute]
private string <GlobalsToIgnore>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MinificationArugments>k__BackingField;
    public string Name { get; public set; }
    internal bool ShouldMinify { get; internal set; }
    internal string GlobalsToIgnore { get; internal set; }
    internal string MinificationArugments { get; internal set; }
    internal JsMinificationConfig(XElement element);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
internal bool get_ShouldMinify();
    [CompilerGeneratedAttribute]
internal void set_ShouldMinify(bool value);
    [CompilerGeneratedAttribute]
internal string get_GlobalsToIgnore();
    [CompilerGeneratedAttribute]
internal void set_GlobalsToIgnore(string value);
    [CompilerGeneratedAttribute]
internal string get_MinificationArugments();
    [CompilerGeneratedAttribute]
internal void set_MinificationArugments(string value);
}
public class WebGrease.Configuration.JSValidationConfig : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShouldAnalyze>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AnalyzeArguments>k__BackingField;
    public string Name { get; public set; }
    internal bool ShouldAnalyze { get; internal set; }
    internal string AnalyzeArguments { get; internal set; }
    internal JSValidationConfig(XElement element);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
internal bool get_ShouldAnalyze();
    [CompilerGeneratedAttribute]
internal void set_ShouldAnalyze(bool value);
    [CompilerGeneratedAttribute]
internal string get_AnalyzeArguments();
    [CompilerGeneratedAttribute]
internal void set_AnalyzeArguments(string value);
}
public class WebGrease.Configuration.PreprocessingConfig : object {
    [CompilerGeneratedAttribute]
private XElement <Element>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Enabled>k__BackingField;
    [CompilerGeneratedAttribute]
private Collection`1<string> <PreprocessingEngines>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public XElement Element { get; private set; }
    public bool Enabled { get; private set; }
    public Collection`1<string> PreprocessingEngines { get; private set; }
    public string Name { get; private set; }
    public PreprocessingConfig(XElement element);
    [CompilerGeneratedAttribute]
public XElement get_Element();
    [CompilerGeneratedAttribute]
private void set_Element(XElement value);
    [CompilerGeneratedAttribute]
public bool get_Enabled();
    [CompilerGeneratedAttribute]
private void set_Enabled(bool value);
    [CompilerGeneratedAttribute]
public Collection`1<string> get_PreprocessingEngines();
    [CompilerGeneratedAttribute]
private void set_PreprocessingEngines(Collection`1<string> value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
}
public class WebGrease.Configuration.WebGreaseConfiguration : object {
    private static Regex EnvironmentVariablesMatchPattern;
    private static TimeSpan MinimumCacheTimeout;
    private Dictionary`2<string, GlobalConfig> global;
    [CompilerGeneratedAttribute]
private string <SourceDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private GlobalConfig <Global>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ConfigType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DestinationDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TokensDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OverrideTokensDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ApplicationRootDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LogsDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ReportPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ToolsTempDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PreprocessingPluginPath>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<string> <ImageDirectories>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<string> <ImageDirectoriesToHash>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<string> <ImageExtensions>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<CssFileSet> <CssFileSets>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<JSFileSet> <JSFileSets>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<string> <LoadedConfigurationFiles>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Measure>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CacheEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CacheRootPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CacheUniqueKey>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <CacheTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IntermediateErrorDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private TemporaryOverrides <Overrides>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<string> <DefaultLocales>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<string> <DefaultThemes>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, JsMinificationConfig> <DefaultJSMinification>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, CssMinificationConfig> <DefaultCssMinification>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, BundlingConfig> <DefaultBundling>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, CssSpritingConfig> <DefaultSpriting>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, PreprocessingConfig> <DefaultPreprocessing>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`2<CssFileSet, IEnumerable`1<string>> CS$<>9__CachedAnonymousMethodDelegate2;
    [CompilerGeneratedAttribute]
private static Func`2<JSFileSet, IEnumerable`1<string>> CS$<>9__CachedAnonymousMethodDelegate3;
    [CompilerGeneratedAttribute]
private static Func`2<XElement, string> CS$<>9__CachedAnonymousMethodDelegate6;
    [CompilerGeneratedAttribute]
private static Func`2<string, bool> CS$<>9__CachedAnonymousMethodDelegate7;
    [CompilerGeneratedAttribute]
private static MatchEvaluator CS$<>9__CachedAnonymousMethodDelegate9;
    [CompilerGeneratedAttribute]
private static Func`2<XElement, bool> CS$<>9__CachedAnonymousMethodDelegateb;
    public string SourceDirectory { get; public set; }
    internal IEnumerable`1<string> AllLoadedConfigurationFiles { get; }
    internal GlobalConfig Global { get; private set; }
    internal string ConfigType { get; private set; }
    internal string DestinationDirectory { get; internal set; }
    internal string TokensDirectory { get; internal set; }
    internal string OverrideTokensDirectory { get; private set; }
    internal string ApplicationRootDirectory { get; private set; }
    internal string LogsDirectory { get; internal set; }
    internal string ReportPath { get; internal set; }
    internal string ToolsTempDirectory { get; private set; }
    internal string PreprocessingPluginPath { get; private set; }
    internal IList`1<string> ImageDirectories { get; private set; }
    internal IList`1<string> ImageDirectoriesToHash { get; private set; }
    internal IList`1<string> ImageExtensions { get; internal set; }
    internal IList`1<CssFileSet> CssFileSets { get; private set; }
    internal IList`1<JSFileSet> JSFileSets { get; private set; }
    internal IList`1<string> LoadedConfigurationFiles { get; private set; }
    internal bool Measure { get; internal set; }
    internal bool CacheEnabled { get; internal set; }
    internal string CacheRootPath { get; internal set; }
    internal string CacheUniqueKey { get; internal set; }
    internal TimeSpan CacheTimeout { get; internal set; }
    internal string IntermediateErrorDirectory { get; internal set; }
    internal TemporaryOverrides Overrides { get; internal set; }
    private IList`1<string> DefaultLocales { get; private set; }
    private IList`1<string> DefaultThemes { get; private set; }
    private IDictionary`2<string, JsMinificationConfig> DefaultJSMinification { get; private set; }
    private IDictionary`2<string, CssMinificationConfig> DefaultCssMinification { get; private set; }
    private IDictionary`2<string, BundlingConfig> DefaultBundling { get; private set; }
    private IDictionary`2<string, CssSpritingConfig> DefaultSpriting { get; private set; }
    private IDictionary`2<string, PreprocessingConfig> DefaultPreprocessing { get; private set; }
    internal WebGreaseConfiguration(string configType, string preprocessingPluginPath);
    internal WebGreaseConfiguration(WebGreaseConfiguration configuration, FileInfo configurationFile);
    internal WebGreaseConfiguration(FileInfo configurationFile, string configType, string sourceDirectory, string destinationDirectory, string logsDirectory, string toolsTempDirectory, string appRootDirectory, string preprocessingPluginPath);
    internal WebGreaseConfiguration(string configType, string sourceDirectory, string destinationDirectory, string logsDirectory, string toolsTempDirectory, string appRootDirectory, string preprocessingPluginPath);
    private static WebGreaseConfiguration();
    [CompilerGeneratedAttribute]
public string get_SourceDirectory();
    [CompilerGeneratedAttribute]
public void set_SourceDirectory(string value);
    internal IEnumerable`1<string> get_AllLoadedConfigurationFiles();
    [CompilerGeneratedAttribute]
internal GlobalConfig get_Global();
    [CompilerGeneratedAttribute]
private void set_Global(GlobalConfig value);
    [CompilerGeneratedAttribute]
internal string get_ConfigType();
    [CompilerGeneratedAttribute]
private void set_ConfigType(string value);
    [CompilerGeneratedAttribute]
internal string get_DestinationDirectory();
    [CompilerGeneratedAttribute]
internal void set_DestinationDirectory(string value);
    [CompilerGeneratedAttribute]
internal string get_TokensDirectory();
    [CompilerGeneratedAttribute]
internal void set_TokensDirectory(string value);
    [CompilerGeneratedAttribute]
internal string get_OverrideTokensDirectory();
    [CompilerGeneratedAttribute]
private void set_OverrideTokensDirectory(string value);
    [CompilerGeneratedAttribute]
internal string get_ApplicationRootDirectory();
    [CompilerGeneratedAttribute]
private void set_ApplicationRootDirectory(string value);
    [CompilerGeneratedAttribute]
internal string get_LogsDirectory();
    [CompilerGeneratedAttribute]
internal void set_LogsDirectory(string value);
    [CompilerGeneratedAttribute]
internal string get_ReportPath();
    [CompilerGeneratedAttribute]
internal void set_ReportPath(string value);
    [CompilerGeneratedAttribute]
internal string get_ToolsTempDirectory();
    [CompilerGeneratedAttribute]
private void set_ToolsTempDirectory(string value);
    [CompilerGeneratedAttribute]
internal string get_PreprocessingPluginPath();
    [CompilerGeneratedAttribute]
private void set_PreprocessingPluginPath(string value);
    [CompilerGeneratedAttribute]
internal IList`1<string> get_ImageDirectories();
    [CompilerGeneratedAttribute]
private void set_ImageDirectories(IList`1<string> value);
    [CompilerGeneratedAttribute]
internal IList`1<string> get_ImageDirectoriesToHash();
    [CompilerGeneratedAttribute]
private void set_ImageDirectoriesToHash(IList`1<string> value);
    [CompilerGeneratedAttribute]
internal IList`1<string> get_ImageExtensions();
    [CompilerGeneratedAttribute]
internal void set_ImageExtensions(IList`1<string> value);
    [CompilerGeneratedAttribute]
internal IList`1<CssFileSet> get_CssFileSets();
    [CompilerGeneratedAttribute]
private void set_CssFileSets(IList`1<CssFileSet> value);
    [CompilerGeneratedAttribute]
internal IList`1<JSFileSet> get_JSFileSets();
    [CompilerGeneratedAttribute]
private void set_JSFileSets(IList`1<JSFileSet> value);
    [CompilerGeneratedAttribute]
internal IList`1<string> get_LoadedConfigurationFiles();
    [CompilerGeneratedAttribute]
private void set_LoadedConfigurationFiles(IList`1<string> value);
    [CompilerGeneratedAttribute]
internal bool get_Measure();
    [CompilerGeneratedAttribute]
internal void set_Measure(bool value);
    [CompilerGeneratedAttribute]
internal bool get_CacheEnabled();
    [CompilerGeneratedAttribute]
internal void set_CacheEnabled(bool value);
    [CompilerGeneratedAttribute]
internal string get_CacheRootPath();
    [CompilerGeneratedAttribute]
internal void set_CacheRootPath(string value);
    [CompilerGeneratedAttribute]
internal string get_CacheUniqueKey();
    [CompilerGeneratedAttribute]
internal void set_CacheUniqueKey(string value);
    [CompilerGeneratedAttribute]
internal TimeSpan get_CacheTimeout();
    [CompilerGeneratedAttribute]
internal void set_CacheTimeout(TimeSpan value);
    [CompilerGeneratedAttribute]
internal string get_IntermediateErrorDirectory();
    [CompilerGeneratedAttribute]
internal void set_IntermediateErrorDirectory(string value);
    [CompilerGeneratedAttribute]
internal TemporaryOverrides get_Overrides();
    [CompilerGeneratedAttribute]
internal void set_Overrides(TemporaryOverrides value);
    [CompilerGeneratedAttribute]
private IList`1<string> get_DefaultLocales();
    [CompilerGeneratedAttribute]
private void set_DefaultLocales(IList`1<string> value);
    [CompilerGeneratedAttribute]
private IList`1<string> get_DefaultThemes();
    [CompilerGeneratedAttribute]
private void set_DefaultThemes(IList`1<string> value);
    [CompilerGeneratedAttribute]
private IDictionary`2<string, JsMinificationConfig> get_DefaultJSMinification();
    [CompilerGeneratedAttribute]
private void set_DefaultJSMinification(IDictionary`2<string, JsMinificationConfig> value);
    [CompilerGeneratedAttribute]
private IDictionary`2<string, CssMinificationConfig> get_DefaultCssMinification();
    [CompilerGeneratedAttribute]
private void set_DefaultCssMinification(IDictionary`2<string, CssMinificationConfig> value);
    [CompilerGeneratedAttribute]
private IDictionary`2<string, BundlingConfig> get_DefaultBundling();
    [CompilerGeneratedAttribute]
private void set_DefaultBundling(IDictionary`2<string, BundlingConfig> value);
    [CompilerGeneratedAttribute]
private IDictionary`2<string, CssSpritingConfig> get_DefaultSpriting();
    [CompilerGeneratedAttribute]
private void set_DefaultSpriting(IDictionary`2<string, CssSpritingConfig> value);
    [CompilerGeneratedAttribute]
private IDictionary`2<string, PreprocessingConfig> get_DefaultPreprocessing();
    [CompilerGeneratedAttribute]
private void set_DefaultPreprocessing(IDictionary`2<string, PreprocessingConfig> value);
    internal static void AddSeperatedValues(IList`1<string> list, string seperatedValues, Func`2<string, string> action);
    internal static void ForEachConfigSourceElement(XElement parentElement, string parentFilePath, Action`2<XElement, string> configSourceAction);
    internal void Validate();
    private static string EnsureAndExpandDirectory(string directory, bool allowCreate);
    private void Parse(string configurationFile);
    private void Parse(XElement element, string configurationFile);
    private void ParseSettings(IEnumerable`1<XElement> settingsElements, string configurationFile);
    private void ParseSettings(XElement settingsElement, string configurationFile);
    [CompilerGeneratedAttribute]
private static IEnumerable`1<string> <get_AllLoadedConfigurationFiles>b__0(CssFileSet cfs);
    [CompilerGeneratedAttribute]
private static IEnumerable`1<string> <get_AllLoadedConfigurationFiles>b__1(JSFileSet cfs);
    [CompilerGeneratedAttribute]
private static string <ForEachConfigSourceElement>b__4(XElement e);
    [CompilerGeneratedAttribute]
private static bool <ForEachConfigSourceElement>b__5(string cs);
    [CompilerGeneratedAttribute]
private static string <EnsureAndExpandDirectory>b__8(Match match);
    [CompilerGeneratedAttribute]
private static bool <ParseSettings>b__a(XElement e);
    [CompilerGeneratedAttribute]
private void <ParseSettings>b__c(XElement element, string s);
    [CompilerGeneratedAttribute]
private string <ParseSettings>b__d(string value);
    [CompilerGeneratedAttribute]
private string <ParseSettings>b__e(string value);
}
public class WebGrease.ContentItem : object {
    private string contentHash;
    private string content;
    [CompilerGeneratedAttribute]
private string <RelativeContentPath>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<ContentPivot> <Pivots>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RelativeHashedContentPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContentValue>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AbsoluteContentPath>k__BackingField;
    [CompilerGeneratedAttribute]
private ContentItemType <ContentItemType>k__BackingField;
    public string RelativeContentPath { get; private set; }
    public IEnumerable`1<ContentPivot> Pivots { get; private set; }
    public string RelativeHashedContentPath { get; private set; }
    public string Content { get; }
    public bool IsFromDisk { get; }
    public string AbsoluteDiskPath { get; }
    private string ContentValue { get; private set; }
    private string AbsoluteContentPath { get; private set; }
    private ContentItemType ContentItemType { get; private set; }
    [CompilerGeneratedAttribute]
public string get_RelativeContentPath();
    [CompilerGeneratedAttribute]
private void set_RelativeContentPath(string value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<ContentPivot> get_Pivots();
    [CompilerGeneratedAttribute]
private void set_Pivots(IEnumerable`1<ContentPivot> value);
    [CompilerGeneratedAttribute]
public string get_RelativeHashedContentPath();
    [CompilerGeneratedAttribute]
private void set_RelativeHashedContentPath(string value);
    public string get_Content();
    public bool get_IsFromDisk();
    public string get_AbsoluteDiskPath();
    [CompilerGeneratedAttribute]
private string get_ContentValue();
    [CompilerGeneratedAttribute]
private void set_ContentValue(string value);
    [CompilerGeneratedAttribute]
private string get_AbsoluteContentPath();
    [CompilerGeneratedAttribute]
private void set_AbsoluteContentPath(string value);
    [CompilerGeneratedAttribute]
private ContentItemType get_ContentItemType();
    [CompilerGeneratedAttribute]
private void set_ContentItemType(ContentItemType value);
    public static ContentItem FromCacheResult(CacheResult cacheResult, ContentPivot[] pivots);
    public static ContentItem FromCacheResult(CacheResult cacheResult, string relativeContentPath, string relativeHashedContentPath, ContentPivot[] pivots);
    public static ContentItem FromFile(string absoluteContentPath, string relativeContentPath, string relativeHashedContentPath, ContentPivot[] pivots);
    public static ContentItem FromContentItem(ContentItem contentItem, string relativeContentPath, string relativeHashedContentPath);
    public static ContentItem FromContent(string content, ContentPivot[] pivots);
    public static ContentItem FromContent(string content, string relativeContentPath, string relativeHashedContentPath, ContentPivot[] pivots);
    public static ContentItem FromContent(string content, ContentItem contentItem, ContentPivot[] pivots);
    internal string GetContentHash(IWebGreaseContext context);
    internal void WriteToRelativeHashedPath(string destinationDirectory, bool overwrite);
    internal void WriteToContentPath(string destinationDirectory, bool overwrite);
    internal void WriteTo(string fullPath, bool overwrite);
    private string ContentFromDisk();
}
public enum WebGrease.ContentItemType : Enum {
    public int value__;
    public static ContentItemType Path;
    public static ContentItemType Value;
}
public class WebGrease.ContentPivot : object {
    [CompilerGeneratedAttribute]
private string <Locale>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Theme>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`2<string, bool> CS$<>9__CachedAnonymousMethodDelegate1;
    public string Locale { get; private set; }
    public string Theme { get; private set; }
    public ContentPivot(string locale, string theme);
    [CompilerGeneratedAttribute]
public string get_Locale();
    [CompilerGeneratedAttribute]
private void set_Locale(string value);
    [CompilerGeneratedAttribute]
public string get_Theme();
    [CompilerGeneratedAttribute]
private void set_Theme(string value);
    public virtual string ToString();
    [CompilerGeneratedAttribute]
private static bool <ToString>b__0(string i);
}
public enum WebGrease.Css.Ast.AllowedImportData : Enum {
    public int value__;
    public static AllowedImportData String;
    public static AllowedImportData Uri;
    public static AllowedImportData None;
}
public class WebGrease.Css.Ast.Animation.KeyFramesBlockNode : AstNode {
    [CompilerGeneratedAttribute]
private ReadOnlyCollection`1<string> <KeyFramesSelectors>k__BackingField;
    [CompilerGeneratedAttribute]
private ReadOnlyCollection`1<DeclarationNode> <DeclarationNodes>k__BackingField;
    public ReadOnlyCollection`1<string> KeyFramesSelectors { get; private set; }
    public ReadOnlyCollection`1<DeclarationNode> DeclarationNodes { get; private set; }
    public KeyFramesBlockNode(ReadOnlyCollection`1<string> keyFramesSelectors, ReadOnlyCollection`1<DeclarationNode> declarationNodes);
    [CompilerGeneratedAttribute]
public ReadOnlyCollection`1<string> get_KeyFramesSelectors();
    [CompilerGeneratedAttribute]
private void set_KeyFramesSelectors(ReadOnlyCollection`1<string> value);
    [CompilerGeneratedAttribute]
public ReadOnlyCollection`1<DeclarationNode> get_DeclarationNodes();
    [CompilerGeneratedAttribute]
private void set_DeclarationNodes(ReadOnlyCollection`1<DeclarationNode> value);
    public virtual AstNode Accept(NodeVisitor nodeVisitor);
}
public class WebGrease.Css.Ast.Animation.KeyFramesNode : StyleSheetRuleNode {
    [CompilerGeneratedAttribute]
private string <KeyFramesSymbol>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IdentValue>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StringValue>k__BackingField;
    [CompilerGeneratedAttribute]
private ReadOnlyCollection`1<KeyFramesBlockNode> <KeyFramesBlockNodes>k__BackingField;
    public string KeyFramesSymbol { get; private set; }
    [SuppressMessageAttribute("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
public string IdentValue { get; private set; }
    public string StringValue { get; private set; }
    public ReadOnlyCollection`1<KeyFramesBlockNode> KeyFramesBlockNodes { get; private set; }
    [SuppressMessageAttribute("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
[SuppressMessageAttribute("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
public KeyFramesNode(string keyFramesSymbol, string identValue, string stringValue, ReadOnlyCollection`1<KeyFramesBlockNode> keyFramesBlockNodes);
    [CompilerGeneratedAttribute]
public string get_KeyFramesSymbol();
    [CompilerGeneratedAttribute]
private void set_KeyFramesSymbol(string value);
    [CompilerGeneratedAttribute]
public string get_IdentValue();
    [CompilerGeneratedAttribute]
private void set_IdentValue(string value);
    [CompilerGeneratedAttribute]
public string get_StringValue();
    [CompilerGeneratedAttribute]
private void set_StringValue(string value);
    [CompilerGeneratedAttribute]
public ReadOnlyCollection`1<KeyFramesBlockNode> get_KeyFramesBlockNodes();
    [CompilerGeneratedAttribute]
private void set_KeyFramesBlockNodes(ReadOnlyCollection`1<KeyFramesBlockNode> value);
    public virtual AstNode Accept(NodeVisitor nodeVisitor);
}
public class WebGrease.Css.Ast.AstException : Exception {
    public AstException(string message);
    public AstException(string message, Exception inner);
    protected AstException(SerializationInfo info, StreamingContext context);
}
public abstract class WebGrease.Css.Ast.AstNode : object {
    public virtual AstNode Accept(NodeVisitor nodeVisitor);
}
[SuppressMessageAttribute("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
public enum WebGrease.Css.Ast.Combinator : Enum {
    public int value__;
    public static Combinator PlusSign;
    public static Combinator GreaterThanSign;
    public static Combinator Tilde;
    public static Combinator ZeroSpace;
    public static Combinator SingleSpace;
    public static Combinator None;
}
[SuppressMessageAttribute("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
public class WebGrease.Css.Ast.CombinatorSimpleSelectorSequenceNode : AstNode {
    [CompilerGeneratedAttribute]
private Combinator <Combinator>k__BackingField;
    [CompilerGeneratedAttribute]
private SimpleSelectorSequenceNode <SimpleSelectorSequenceNode>k__BackingField;
    [SuppressMessageAttribute("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
public Combinator Combinator { get; private set; }
    public SimpleSelectorSequenceNode SimpleSelectorSequenceNode { get; private set; }
    public CombinatorSimpleSelectorSequenceNode(Combinator combinator, SimpleSelectorSequenceNode simpleSelectorSequenceNode);
    [CompilerGeneratedAttribute]
public Combinator get_Combinator();
    [CompilerGeneratedAttribute]
private void set_Combinator(Combinator value);
    [CompilerGeneratedAttribute]
public SimpleSelectorSequenceNode get_SimpleSelectorSequenceNode();
    [CompilerGeneratedAttribute]
private void set_SimpleSelectorSequenceNode(SimpleSelectorSequenceNode value);
    public virtual AstNode Accept(NodeVisitor nodeVisitor);
}
public class WebGrease.Css.Ast.DeclarationNode : AstNode {
    [CompilerGeneratedAttribute]
private string <Property>k__BackingField;
    [CompilerGeneratedAttribute]
private ExprNode <ExprNode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Prio>k__BackingField;
    public string Property { get; private set; }
    [SuppressMessageAttribute("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
public ExprNode ExprNode { get; private set; }
    [SuppressMessageAttribute("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
public string Prio { get; private set; }
    public DeclarationNode(string property, ExprNode exprNode, string prio);
    [CompilerGeneratedAttribute]
public string get_Property();
    [CompilerGeneratedAttribute]
private void set_Property(string value);
    [CompilerGeneratedAttribute]
public ExprNode get_ExprNode();
    [CompilerGeneratedAttribute]
private void set_ExprNode(ExprNode value);
    [CompilerGeneratedAttribute]
public string get_Prio();
    [CompilerGeneratedAttribute]
private void set_Prio(string value);
    public virtual AstNode Accept(NodeVisitor nodeVisitor);
}
public class WebGrease.Css.Ast.DocumentQueryNode : StyleSheetRuleNode {
    [CompilerGeneratedAttribute]
private string <MatchFunctionName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DocumentSymbol>k__BackingField;
    [CompilerGeneratedAttribute]
private ReadOnlyCollection`1<RulesetNode> <Rulesets>k__BackingField;
    public string MatchFunctionName { get; private set; }
    public string DocumentSymbol { get; private set; }
    [SuppressMessageAttribute("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
public ReadOnlyCollection`1<RulesetNode> Rulesets { get; private set; }
    [SuppressMessageAttribute("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
public DocumentQueryNode(string matchFunctionName, string documentSymbol, ReadOnlyCollection`1<RulesetNode> rulesets);
    [CompilerGeneratedAttribute]
public string get_MatchFunctionName();
    [CompilerGeneratedAttribute]
private void set_MatchFunctionName(string value);
    [CompilerGeneratedAttribute]
public string get_DocumentSymbol();
    [CompilerGeneratedAttribute]
private void set_DocumentSymbol(string value);
    [CompilerGeneratedAttribute]
public ReadOnlyCollection`1<RulesetNode> get_Rulesets();
    [CompilerGeneratedAttribute]
private void set_Rulesets(ReadOnlyCollection`1<RulesetNode> value);
    public virtual AstNode Accept(NodeVisitor nodeVisitor);
}
[SuppressMessageAttribute("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
public class WebGrease.Css.Ast.ExprNode : AstNode {
    [CompilerGeneratedAttribute]
private TermNode <TermNode>k__BackingField;
    [CompilerGeneratedAttribute]
private ReadOnlyCollection`1<TermWithOperatorNode> <TermsWithOperators>k__BackingField;
    public TermNode TermNode { get; private set; }
    public ReadOnlyCollection`1<TermWithOperatorNode> TermsWithOperators { get; private set; }
    public ExprNode(TermNode termNode, ReadOnlyCollection`1<TermWithOperatorNode> termsWithOperators);
    [CompilerGeneratedAttribute]
public TermNode get_TermNode();
    [CompilerGeneratedAttribute]
private void set_TermNode(TermNode value);
    [CompilerGeneratedAttribute]
public ReadOnlyCollection`1<TermWithOperatorNode> get_TermsWithOperators();
    [CompilerGeneratedAttribute]
private void set_TermsWithOperators(ReadOnlyCollection`1<TermWithOperatorNode> value);
    public virtual AstNode Accept(NodeVisitor nodeVisitor);
}
public class WebGrease.Css.Ast.FunctionNode : AstNode {
    [CompilerGeneratedAttribute]
private string <FunctionName>k__BackingField;
    [CompilerGeneratedAttribute]
private ExprNode <ExprNode>k__BackingField;
    public string FunctionName { get; private set; }
    [SuppressMessageAttribute("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
public ExprNode ExprNode { get; private set; }
    public FunctionNode(string functionName, ExprNode exprNode);
    [CompilerGeneratedAttribute]
public string get_FunctionName();
    [CompilerGeneratedAttribute]
private void set_FunctionName(string value);
    [CompilerGeneratedAttribute]
public ExprNode get_ExprNode();
    [CompilerGeneratedAttribute]
private void set_ExprNode(ExprNode value);
    public virtual AstNode Accept(NodeVisitor nodeVisitor);
}
public class WebGrease.Css.Ast.ImportNode : AstNode {
    [CompilerGeneratedAttribute]
private AllowedImportData <AllowedImportDataType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ImportDataValue>k__BackingField;
    [CompilerGeneratedAttribute]
private ReadOnlyCollection`1<MediaQueryNode> <MediaQueries>k__BackingField;
    public AllowedImportData AllowedImportDataType { get; private set; }
    public string ImportDataValue { get; private set; }
    public ReadOnlyCollection`1<MediaQueryNode> MediaQueries { get; private set; }
    public ImportNode(AllowedImportData allowedImportDataType, string importDataValue, ReadOnlyCollection`1<MediaQueryNode> mediaQueries);
    [CompilerGeneratedAttribute]
public AllowedImportData get_AllowedImportDataType();
    [CompilerGeneratedAttribute]
private void set_AllowedImportDataType(AllowedImportData value);
    [CompilerGeneratedAttribute]
public string get_ImportDataValue();
    [CompilerGeneratedAttribute]
private void set_ImportDataValue(string value);
    [CompilerGeneratedAttribute]
public ReadOnlyCollection`1<MediaQueryNode> get_MediaQueries();
    [CompilerGeneratedAttribute]
private void set_MediaQueries(ReadOnlyCollection`1<MediaQueryNode> value);
    public virtual AstNode Accept(NodeVisitor nodeVisitor);
}
public class WebGrease.Css.Ast.MediaQuery.MediaExpressionNode : AstNode {
    [CompilerGeneratedAttribute]
private string <MediaFeature>k__BackingField;
    [CompilerGeneratedAttribute]
private ExprNode <ExprNode>k__BackingField;
    public string MediaFeature { get; private set; }
    [SuppressMessageAttribute("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
public ExprNode ExprNode { get; private set; }
    public MediaExpressionNode(string mediaFeature, ExprNode exprNode);
    [CompilerGeneratedAttribute]
public string get_MediaFeature();
    [CompilerGeneratedAttribute]
private void set_MediaFeature(string value);
    [CompilerGeneratedAttribute]
public ExprNode get_ExprNode();
    [CompilerGeneratedAttribute]
private void set_ExprNode(ExprNode value);
    public virtual AstNode Accept(NodeVisitor nodeVisitor);
}
public class WebGrease.Css.Ast.MediaQuery.MediaNode : StyleSheetRuleNode {
    [CompilerGeneratedAttribute]
private ReadOnlyCollection`1<MediaQueryNode> <MediaQueries>k__BackingField;
    [CompilerGeneratedAttribute]
private ReadOnlyCollection`1<RulesetNode> <Rulesets>k__BackingField;
    [CompilerGeneratedAttribute]
private ReadOnlyCollection`1<PageNode> <PageNodes>k__BackingField;
    public ReadOnlyCollection`1<MediaQueryNode> MediaQueries { get; private set; }
    [SuppressMessageAttribute("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
public ReadOnlyCollection`1<RulesetNode> Rulesets { get; private set; }
    public ReadOnlyCollection`1<PageNode> PageNodes { get; private set; }
    public MediaNode(ReadOnlyCollection`1<MediaQueryNode> mediaQueries, ReadOnlyCollection`1<RulesetNode> rulesets, ReadOnlyCollection`1<PageNode> pages);
    [CompilerGeneratedAttribute]
public ReadOnlyCollection`1<MediaQueryNode> get_MediaQueries();
    [CompilerGeneratedAttribute]
private void set_MediaQueries(ReadOnlyCollection`1<MediaQueryNode> value);
    [CompilerGeneratedAttribute]
public ReadOnlyCollection`1<RulesetNode> get_Rulesets();
    [CompilerGeneratedAttribute]
private void set_Rulesets(ReadOnlyCollection`1<RulesetNode> value);
    [CompilerGeneratedAttribute]
public ReadOnlyCollection`1<PageNode> get_PageNodes();
    [CompilerGeneratedAttribute]
private void set_PageNodes(ReadOnlyCollection`1<PageNode> value);
    public virtual AstNode Accept(NodeVisitor nodeVisitor);
}
public class WebGrease.Css.Ast.MediaQuery.MediaQueryNode : AstNode {
    [CompilerGeneratedAttribute]
private string <OnlyText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NotText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MediaType>k__BackingField;
    [CompilerGeneratedAttribute]
private ReadOnlyCollection`1<MediaExpressionNode> <MediaExpressions>k__BackingField;
    public string OnlyText { get; private set; }
    public string NotText { get; private set; }
    public string MediaType { get; private set; }
    public ReadOnlyCollection`1<MediaExpressionNode> MediaExpressions { get; private set; }
    public MediaQueryNode(string onlyText, string notText, string mediaType, ReadOnlyCollection`1<MediaExpressionNode> mediaExpressions);
    [CompilerGeneratedAttribute]
public string get_OnlyText();
    [CompilerGeneratedAttribute]
private void set_OnlyText(string value);
    [CompilerGeneratedAttribute]
public string get_NotText();
    [CompilerGeneratedAttribute]
private void set_NotText(string value);
    [CompilerGeneratedAttribute]
public string get_MediaType();
    [CompilerGeneratedAttribute]
private void set_MediaType(string value);
    [CompilerGeneratedAttribute]
public ReadOnlyCollection`1<MediaExpressionNode> get_MediaExpressions();
    [CompilerGeneratedAttribute]
private void set_MediaExpressions(ReadOnlyCollection`1<MediaExpressionNode> value);
    public virtual AstNode Accept(NodeVisitor nodeVisitor);
}
public class WebGrease.Css.Ast.NamespaceNode : AstNode {
    [CompilerGeneratedAttribute]
private string <Prefix>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    public string Prefix { get; private set; }
    public string Value { get; private set; }
    public NamespaceNode(string prefix, string value);
    [CompilerGeneratedAttribute]
public string get_Prefix();
    [CompilerGeneratedAttribute]
private void set_Prefix(string value);
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
private void set_Value(string value);
    public virtual AstNode Accept(NodeVisitor nodeVisitor);
}
public class WebGrease.Css.Ast.PageNode : StyleSheetRuleNode {
    [CompilerGeneratedAttribute]
private string <PseudoPage>k__BackingField;
    [CompilerGeneratedAttribute]
private ReadOnlyCollection`1<DeclarationNode> <Declarations>k__BackingField;
    public string PseudoPage { get; private set; }
    public ReadOnlyCollection`1<DeclarationNode> Declarations { get; private set; }
    public PageNode(string pseudoPage, ReadOnlyCollection`1<DeclarationNode> declarations);
    [CompilerGeneratedAttribute]
public string get_PseudoPage();
    [CompilerGeneratedAttribute]
private void set_PseudoPage(string value);
    [CompilerGeneratedAttribute]
public ReadOnlyCollection`1<DeclarationNode> get_Declarations();
    [CompilerGeneratedAttribute]
private void set_Declarations(ReadOnlyCollection`1<DeclarationNode> value);
    public virtual AstNode Accept(NodeVisitor nodeVisitor);
}
[SuppressMessageAttribute("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
public class WebGrease.Css.Ast.RulesetNode : StyleSheetRuleNode {
    [CompilerGeneratedAttribute]
private SelectorsGroupNode <SelectorsGroupNode>k__BackingField;
    [CompilerGeneratedAttribute]
private ReadOnlyCollection`1<DeclarationNode> <Declarations>k__BackingField;
    public SelectorsGroupNode SelectorsGroupNode { get; private set; }
    public ReadOnlyCollection`1<DeclarationNode> Declarations { get; private set; }
    public RulesetNode(SelectorsGroupNode selectorsGroupNode, ReadOnlyCollection`1<DeclarationNode> declarations);
    [CompilerGeneratedAttribute]
public SelectorsGroupNode get_SelectorsGroupNode();
    [CompilerGeneratedAttribute]
private void set_SelectorsGroupNode(SelectorsGroupNode value);
    [CompilerGeneratedAttribute]
public ReadOnlyCollection`1<DeclarationNode> get_Declarations();
    [CompilerGeneratedAttribute]
private void set_Declarations(ReadOnlyCollection`1<DeclarationNode> value);
    public virtual AstNode Accept(NodeVisitor nodeVisitor);
}
public class WebGrease.Css.Ast.Selectors.AttribNode : AstNode {
    [CompilerGeneratedAttribute]
private SelectorNamespacePrefixNode <SelectorNamespacePrefixNode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Ident>k__BackingField;
    [CompilerGeneratedAttribute]
private AttribOperatorAndValueNode <OperatorAndValueNode>k__BackingField;
    public SelectorNamespacePrefixNode SelectorNamespacePrefixNode { get; private set; }
    [SuppressMessageAttribute("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
public string Ident { get; private set; }
    public AttribOperatorAndValueNode OperatorAndValueNode { get; private set; }
    public AttribNode(SelectorNamespacePrefixNode selectorNamespacePrefixNode, string identity, AttribOperatorAndValueNode attribOperatorAndValueNode);
    [CompilerGeneratedAttribute]
public SelectorNamespacePrefixNode get_SelectorNamespacePrefixNode();
    [CompilerGeneratedAttribute]
private void set_SelectorNamespacePrefixNode(SelectorNamespacePrefixNode value);
    [CompilerGeneratedAttribute]
public string get_Ident();
    [CompilerGeneratedAttribute]
private void set_Ident(string value);
    [CompilerGeneratedAttribute]
public AttribOperatorAndValueNode get_OperatorAndValueNode();
    [CompilerGeneratedAttribute]
private void set_OperatorAndValueNode(AttribOperatorAndValueNode value);
    public virtual AstNode Accept(NodeVisitor nodeVisitor);
}
public class WebGrease.Css.Ast.Selectors.AttribOperatorAndValueNode : AstNode {
    [CompilerGeneratedAttribute]
private AttribOperatorKind <AttribOperatorKind>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IdentOrString>k__BackingField;
    public AttribOperatorKind AttribOperatorKind { get; private set; }
    [SuppressMessageAttribute("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
public string IdentOrString { get; private set; }
    [SuppressMessageAttribute("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
public AttribOperatorAndValueNode(AttribOperatorKind operatorKind, string identityOrString);
    [CompilerGeneratedAttribute]
public AttribOperatorKind get_AttribOperatorKind();
    [CompilerGeneratedAttribute]
private void set_AttribOperatorKind(AttribOperatorKind value);
    [CompilerGeneratedAttribute]
public string get_IdentOrString();
    [CompilerGeneratedAttribute]
private void set_IdentOrString(string value);
    public virtual AstNode Accept(NodeVisitor nodeVisitor);
}
public enum WebGrease.Css.Ast.Selectors.AttribOperatorKind : Enum {
    public int value__;
    public static AttribOperatorKind Prefix;
    public static AttribOperatorKind Suffix;
    public static AttribOperatorKind Substring;
    public static AttribOperatorKind Equal;
    public static AttribOperatorKind Includes;
    public static AttribOperatorKind DashMatch;
    public static AttribOperatorKind None;
}
public class WebGrease.Css.Ast.Selectors.FunctionalPseudoNode : AstNode {
    [CompilerGeneratedAttribute]
private string <FunctionName>k__BackingField;
    [CompilerGeneratedAttribute]
private SelectorExpressionNode <SelectorExpressionNode>k__BackingField;
    public string FunctionName { get; private set; }
    public SelectorExpressionNode SelectorExpressionNode { get; private set; }
    public FunctionalPseudoNode(string functionName, SelectorExpressionNode selectorExpressionNode);
    [CompilerGeneratedAttribute]
public string get_FunctionName();
    [CompilerGeneratedAttribute]
private void set_FunctionName(string value);
    [CompilerGeneratedAttribute]
public SelectorExpressionNode get_SelectorExpressionNode();
    [CompilerGeneratedAttribute]
private void set_SelectorExpressionNode(SelectorExpressionNode value);
    public virtual AstNode Accept(NodeVisitor nodeVisitor);
}
public class WebGrease.Css.Ast.Selectors.HashClassAtNameAttribPseudoNegationNode : AstNode {
    private static string ExceptionMessage;
    [CompilerGeneratedAttribute]
private string <Hash>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CssClass>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AtName>k__BackingField;
    [CompilerGeneratedAttribute]
private AttribNode <AttribNode>k__BackingField;
    [CompilerGeneratedAttribute]
private PseudoNode <PseudoNode>k__BackingField;
    [CompilerGeneratedAttribute]
private NegationNode <NegationNode>k__BackingField;
    public string Hash { get; private set; }
    public string CssClass { get; private set; }
    public string AtName { get; private set; }
    public AttribNode AttribNode { get; private set; }
    public PseudoNode PseudoNode { get; private set; }
    public NegationNode NegationNode { get; private set; }
    public HashClassAtNameAttribPseudoNegationNode(string hash, string cssClass, string atName, AttribNode attribNode, PseudoNode pseudoNode, NegationNode negationNode);
    [CompilerGeneratedAttribute]
public string get_Hash();
    [CompilerGeneratedAttribute]
private void set_Hash(string value);
    [CompilerGeneratedAttribute]
public string get_CssClass();
    [CompilerGeneratedAttribute]
private void set_CssClass(string value);
    [CompilerGeneratedAttribute]
public string get_AtName();
    [CompilerGeneratedAttribute]
private void set_AtName(string value);
    [CompilerGeneratedAttribute]
public AttribNode get_AttribNode();
    [CompilerGeneratedAttribute]
private void set_AttribNode(AttribNode value);
    [CompilerGeneratedAttribute]
public PseudoNode get_PseudoNode();
    [CompilerGeneratedAttribute]
private void set_PseudoNode(PseudoNode value);
    [CompilerGeneratedAttribute]
public NegationNode get_NegationNode();
    [CompilerGeneratedAttribute]
private void set_NegationNode(NegationNode value);
    public virtual AstNode Accept(NodeVisitor nodeVisitor);
}
public class WebGrease.Css.Ast.Selectors.NegationArgNode : AstNode {
    private static string ExceptionMessage;
    [CompilerGeneratedAttribute]
private TypeSelectorNode <TypeSelectorNode>k__BackingField;
    [CompilerGeneratedAttribute]
private UniversalSelectorNode <UniversalSelectorNode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Hash>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CssClass>k__BackingField;
    [CompilerGeneratedAttribute]
private AttribNode <AttribNode>k__BackingField;
    [CompilerGeneratedAttribute]
private PseudoNode <PseudoNode>k__BackingField;
    public TypeSelectorNode TypeSelectorNode { get; private set; }
    public UniversalSelectorNode UniversalSelectorNode { get; private set; }
    public string Hash { get; private set; }
    public string CssClass { get; private set; }
    public AttribNode AttribNode { get; private set; }
    public PseudoNode PseudoNode { get; private set; }
    public NegationArgNode(TypeSelectorNode typeSelectorNode, UniversalSelectorNode universalSelectorNode, string hash, string cssClass, AttribNode attribNode, PseudoNode pseudoNode);
    [CompilerGeneratedAttribute]
public TypeSelectorNode get_TypeSelectorNode();
    [CompilerGeneratedAttribute]
private void set_TypeSelectorNode(TypeSelectorNode value);
    [CompilerGeneratedAttribute]
public UniversalSelectorNode get_UniversalSelectorNode();
    [CompilerGeneratedAttribute]
private void set_UniversalSelectorNode(UniversalSelectorNode value);
    [CompilerGeneratedAttribute]
public string get_Hash();
    [CompilerGeneratedAttribute]
private void set_Hash(string value);
    [CompilerGeneratedAttribute]
public string get_CssClass();
    [CompilerGeneratedAttribute]
private void set_CssClass(string value);
    [CompilerGeneratedAttribute]
public AttribNode get_AttribNode();
    [CompilerGeneratedAttribute]
private void set_AttribNode(AttribNode value);
    [CompilerGeneratedAttribute]
public PseudoNode get_PseudoNode();
    [CompilerGeneratedAttribute]
private void set_PseudoNode(PseudoNode value);
    public virtual AstNode Accept(NodeVisitor nodeVisitor);
}
public class WebGrease.Css.Ast.Selectors.NegationNode : AstNode {
    [CompilerGeneratedAttribute]
private NegationArgNode <NegationArgNode>k__BackingField;
    public NegationArgNode NegationArgNode { get; private set; }
    public NegationNode(NegationArgNode negationArgNode);
    [CompilerGeneratedAttribute]
public NegationArgNode get_NegationArgNode();
    [CompilerGeneratedAttribute]
private void set_NegationArgNode(NegationArgNode value);
    public virtual AstNode Accept(NodeVisitor nodeVisitor);
}
public class WebGrease.Css.Ast.Selectors.PseudoNode : AstNode {
    [CompilerGeneratedAttribute]
private int <NumberOfColons>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Ident>k__BackingField;
    [CompilerGeneratedAttribute]
private FunctionalPseudoNode <FunctionalPseudoNode>k__BackingField;
    public int NumberOfColons { get; private set; }
    [SuppressMessageAttribute("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
public string Ident { get; private set; }
    public FunctionalPseudoNode FunctionalPseudoNode { get; private set; }
    public PseudoNode(int numberOfColons, string ident, FunctionalPseudoNode functionalPseudoNode);
    [CompilerGeneratedAttribute]
public int get_NumberOfColons();
    [CompilerGeneratedAttribute]
private void set_NumberOfColons(int value);
    [CompilerGeneratedAttribute]
public string get_Ident();
    [CompilerGeneratedAttribute]
private void set_Ident(string value);
    [CompilerGeneratedAttribute]
public FunctionalPseudoNode get_FunctionalPseudoNode();
    [CompilerGeneratedAttribute]
private void set_FunctionalPseudoNode(FunctionalPseudoNode value);
    public virtual AstNode Accept(NodeVisitor nodeVisitor);
}
public class WebGrease.Css.Ast.Selectors.SelectorExpressionNode : AstNode {
    [CompilerGeneratedAttribute]
private ReadOnlyCollection`1<string> <SelectorExpressions>k__BackingField;
    public ReadOnlyCollection`1<string> SelectorExpressions { get; private set; }
    public SelectorExpressionNode(ReadOnlyCollection`1<string> selectorExpressions);
    [CompilerGeneratedAttribute]
public ReadOnlyCollection`1<string> get_SelectorExpressions();
    [CompilerGeneratedAttribute]
private void set_SelectorExpressions(ReadOnlyCollection`1<string> value);
    public virtual AstNode Accept(NodeVisitor nodeVisitor);
}
public class WebGrease.Css.Ast.Selectors.SelectorNamespacePrefixNode : AstNode {
    [CompilerGeneratedAttribute]
private string <Prefix>k__BackingField;
    public string Prefix { get; private set; }
    public SelectorNamespacePrefixNode(string prefix);
    [CompilerGeneratedAttribute]
public string get_Prefix();
    [CompilerGeneratedAttribute]
private void set_Prefix(string value);
    public virtual AstNode Accept(NodeVisitor nodeVisitor);
}
public class WebGrease.Css.Ast.Selectors.SelectorNode : AstNode {
    [CompilerGeneratedAttribute]
private SimpleSelectorSequenceNode <SimpleSelectorSequenceNode>k__BackingField;
    [CompilerGeneratedAttribute]
private ReadOnlyCollection`1<CombinatorSimpleSelectorSequenceNode> <CombinatorSimpleSelectorSequenceNodes>k__BackingField;
    public SimpleSelectorSequenceNode SimpleSelectorSequenceNode { get; private set; }
    public ReadOnlyCollection`1<CombinatorSimpleSelectorSequenceNode> CombinatorSimpleSelectorSequenceNodes { get; private set; }
    public SelectorNode(SimpleSelectorSequenceNode simpleSelectorSequenceNode, ReadOnlyCollection`1<CombinatorSimpleSelectorSequenceNode> combinatorSimpleSelectorSequenceNodes);
    [CompilerGeneratedAttribute]
public SimpleSelectorSequenceNode get_SimpleSelectorSequenceNode();
    [CompilerGeneratedAttribute]
private void set_SimpleSelectorSequenceNode(SimpleSelectorSequenceNode value);
    [CompilerGeneratedAttribute]
public ReadOnlyCollection`1<CombinatorSimpleSelectorSequenceNode> get_CombinatorSimpleSelectorSequenceNodes();
    [CompilerGeneratedAttribute]
private void set_CombinatorSimpleSelectorSequenceNodes(ReadOnlyCollection`1<CombinatorSimpleSelectorSequenceNode> value);
    public virtual AstNode Accept(NodeVisitor nodeVisitor);
}
public class WebGrease.Css.Ast.Selectors.SelectorsGroupNode : AstNode {
    [CompilerGeneratedAttribute]
private ReadOnlyCollection`1<SelectorNode> <SelectorNodes>k__BackingField;
    public ReadOnlyCollection`1<SelectorNode> SelectorNodes { get; private set; }
    public SelectorsGroupNode(ReadOnlyCollection`1<SelectorNode> selectorNodes);
    [CompilerGeneratedAttribute]
public ReadOnlyCollection`1<SelectorNode> get_SelectorNodes();
    [CompilerGeneratedAttribute]
private void set_SelectorNodes(ReadOnlyCollection`1<SelectorNode> value);
    public virtual AstNode Accept(NodeVisitor nodeVisitor);
}
public class WebGrease.Css.Ast.Selectors.SimpleSelectorSequenceNode : AstNode {
    [CompilerGeneratedAttribute]
private TypeSelectorNode <TypeSelectorNode>k__BackingField;
    [CompilerGeneratedAttribute]
private UniversalSelectorNode <UniversalSelectorNode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Separator>k__BackingField;
    [CompilerGeneratedAttribute]
private ReadOnlyCollection`1<HashClassAtNameAttribPseudoNegationNode> <HashClassAttribPseudoNegationNodes>k__BackingField;
    public TypeSelectorNode TypeSelectorNode { get; private set; }
    public UniversalSelectorNode UniversalSelectorNode { get; private set; }
    public string Separator { get; private set; }
    public ReadOnlyCollection`1<HashClassAtNameAttribPseudoNegationNode> HashClassAttribPseudoNegationNodes { get; private set; }
    public SimpleSelectorSequenceNode(TypeSelectorNode typeSelectorNode, UniversalSelectorNode universalSelectorNode, string separator, ReadOnlyCollection`1<HashClassAtNameAttribPseudoNegationNode> simpleSelectorValues);
    [CompilerGeneratedAttribute]
public TypeSelectorNode get_TypeSelectorNode();
    [CompilerGeneratedAttribute]
private void set_TypeSelectorNode(TypeSelectorNode value);
    [CompilerGeneratedAttribute]
public UniversalSelectorNode get_UniversalSelectorNode();
    [CompilerGeneratedAttribute]
private void set_UniversalSelectorNode(UniversalSelectorNode value);
    [CompilerGeneratedAttribute]
public string get_Separator();
    [CompilerGeneratedAttribute]
private void set_Separator(string value);
    [CompilerGeneratedAttribute]
public ReadOnlyCollection`1<HashClassAtNameAttribPseudoNegationNode> get_HashClassAttribPseudoNegationNodes();
    [CompilerGeneratedAttribute]
private void set_HashClassAttribPseudoNegationNodes(ReadOnlyCollection`1<HashClassAtNameAttribPseudoNegationNode> value);
    public virtual AstNode Accept(NodeVisitor nodeVisitor);
}
public class WebGrease.Css.Ast.Selectors.TypeSelectorNode : AstNode {
    [CompilerGeneratedAttribute]
private SelectorNamespacePrefixNode <SelectorNamespacePrefixNode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ElementName>k__BackingField;
    public SelectorNamespacePrefixNode SelectorNamespacePrefixNode { get; private set; }
    public string ElementName { get; private set; }
    public TypeSelectorNode(SelectorNamespacePrefixNode selectorNamespacePrefixNode, string elementName);
    [CompilerGeneratedAttribute]
public SelectorNamespacePrefixNode get_SelectorNamespacePrefixNode();
    [CompilerGeneratedAttribute]
private void set_SelectorNamespacePrefixNode(SelectorNamespacePrefixNode value);
    [CompilerGeneratedAttribute]
public string get_ElementName();
    [CompilerGeneratedAttribute]
private void set_ElementName(string value);
    public virtual AstNode Accept(NodeVisitor nodeVisitor);
}
public class WebGrease.Css.Ast.Selectors.UniversalSelectorNode : AstNode {
    [CompilerGeneratedAttribute]
private SelectorNamespacePrefixNode <SelectorNamespacePrefixNode>k__BackingField;
    public SelectorNamespacePrefixNode SelectorNamespacePrefixNode { get; private set; }
    public UniversalSelectorNode(SelectorNamespacePrefixNode selectorNamespacePrefixNode);
    [CompilerGeneratedAttribute]
public SelectorNamespacePrefixNode get_SelectorNamespacePrefixNode();
    [CompilerGeneratedAttribute]
private void set_SelectorNamespacePrefixNode(SelectorNamespacePrefixNode value);
    public virtual AstNode Accept(NodeVisitor nodeVisitor);
}
public class WebGrease.Css.Ast.StyleSheetNode : AstNode {
    [CompilerGeneratedAttribute]
private string <CharSetString>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<double> <Dpi>k__BackingField;
    [CompilerGeneratedAttribute]
private ReadOnlyCollection`1<ImportNode> <Imports>k__BackingField;
    [CompilerGeneratedAttribute]
private ReadOnlyCollection`1<NamespaceNode> <Namespaces>k__BackingField;
    [CompilerGeneratedAttribute]
private ReadOnlyCollection`1<StyleSheetRuleNode> <StyleSheetRules>k__BackingField;
    public string CharSetString { get; private set; }
    public Nullable`1<double> Dpi { get; private set; }
    public ReadOnlyCollection`1<ImportNode> Imports { get; private set; }
    public ReadOnlyCollection`1<NamespaceNode> Namespaces { get; private set; }
    public ReadOnlyCollection`1<StyleSheetRuleNode> StyleSheetRules { get; private set; }
    public StyleSheetNode(string charSet, Nullable`1<double> dpi, ReadOnlyCollection`1<ImportNode> imports, ReadOnlyCollection`1<NamespaceNode> namespaces, ReadOnlyCollection`1<StyleSheetRuleNode> styleSheetRules);
    [CompilerGeneratedAttribute]
public string get_CharSetString();
    [CompilerGeneratedAttribute]
private void set_CharSetString(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_Dpi();
    [CompilerGeneratedAttribute]
private void set_Dpi(Nullable`1<double> value);
    [CompilerGeneratedAttribute]
public ReadOnlyCollection`1<ImportNode> get_Imports();
    [CompilerGeneratedAttribute]
private void set_Imports(ReadOnlyCollection`1<ImportNode> value);
    [CompilerGeneratedAttribute]
public ReadOnlyCollection`1<NamespaceNode> get_Namespaces();
    [CompilerGeneratedAttribute]
private void set_Namespaces(ReadOnlyCollection`1<NamespaceNode> value);
    [CompilerGeneratedAttribute]
public ReadOnlyCollection`1<StyleSheetRuleNode> get_StyleSheetRules();
    [CompilerGeneratedAttribute]
private void set_StyleSheetRules(ReadOnlyCollection`1<StyleSheetRuleNode> value);
    public virtual AstNode Accept(NodeVisitor nodeVisitor);
}
public abstract class WebGrease.Css.Ast.StyleSheetRuleNode : AstNode {
}
public class WebGrease.Css.Ast.TermNode : AstNode {
    [CompilerGeneratedAttribute]
private string <UnaryOperator>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NumberBasedValue>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StringBasedValue>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Hexcolor>k__BackingField;
    [CompilerGeneratedAttribute]
private FunctionNode <FunctionNode>k__BackingField;
    public string UnaryOperator { get; private set; }
    public string NumberBasedValue { get; private set; }
    public string StringBasedValue { get; private set; }
    [SuppressMessageAttribute("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
public string Hexcolor { get; private set; }
    public FunctionNode FunctionNode { get; private set; }
    [SuppressMessageAttribute("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
public TermNode(string unaryOperator, string numberBasedValue, string stringBasedValue, string hexColor, FunctionNode functionNode);
    [CompilerGeneratedAttribute]
public string get_UnaryOperator();
    [CompilerGeneratedAttribute]
private void set_UnaryOperator(string value);
    [CompilerGeneratedAttribute]
public string get_NumberBasedValue();
    [CompilerGeneratedAttribute]
private void set_NumberBasedValue(string value);
    [CompilerGeneratedAttribute]
public string get_StringBasedValue();
    [CompilerGeneratedAttribute]
private void set_StringBasedValue(string value);
    [CompilerGeneratedAttribute]
public string get_Hexcolor();
    [CompilerGeneratedAttribute]
private void set_Hexcolor(string value);
    [CompilerGeneratedAttribute]
public FunctionNode get_FunctionNode();
    [CompilerGeneratedAttribute]
private void set_FunctionNode(FunctionNode value);
    public virtual AstNode Accept(NodeVisitor nodeVisitor);
}
public class WebGrease.Css.Ast.TermWithOperatorNode : AstNode {
    [CompilerGeneratedAttribute]
private string <Operator>k__BackingField;
    [CompilerGeneratedAttribute]
private TermNode <TermNode>k__BackingField;
    public string Operator { get; private set; }
    public TermNode TermNode { get; private set; }
    public TermWithOperatorNode(string op, TermNode termNode);
    [CompilerGeneratedAttribute]
public string get_Operator();
    [CompilerGeneratedAttribute]
private void set_Operator(string value);
    [CompilerGeneratedAttribute]
public TermNode get_TermNode();
    [CompilerGeneratedAttribute]
private void set_TermNode(TermNode value);
    public virtual AstNode Accept(NodeVisitor nodeVisitor);
}
internal static class WebGrease.Css.CommonTreeTransformer : object {
    [CompilerGeneratedAttribute]
private static Func`2<CommonTree, ImportNode> CS$<>9__CachedAnonymousMethodDelegate1;
    [CompilerGeneratedAttribute]
private static Func`2<CommonTree, NamespaceNode> CS$<>9__CachedAnonymousMethodDelegate3;
    [CompilerGeneratedAttribute]
private static Func`2<CommonTree, string> CS$<>9__CachedAnonymousMethodDelegate5;
    [CompilerGeneratedAttribute]
private static Func`2<CommonTree, string> CS$<>9__CachedAnonymousMethodDelegate7;
    [CompilerGeneratedAttribute]
private static Func`2<CommonTree, string> CS$<>9__CachedAnonymousMethodDelegate9;
    [CompilerGeneratedAttribute]
private static Func`2<CommonTree, DeclarationNode> CS$<>9__CachedAnonymousMethodDelegatec;
    [CompilerGeneratedAttribute]
private static Func`2<CommonTree, string> CS$<>9__CachedAnonymousMethodDelegated;
    [CompilerGeneratedAttribute]
private static Func`2<CommonTree, TermWithOperatorNode> CS$<>9__CachedAnonymousMethodDelegatef;
    [CompilerGeneratedAttribute]
private static Func`2<CommonTree, SelectorNode> CS$<>9__CachedAnonymousMethodDelegate11;
    [CompilerGeneratedAttribute]
private static Func`2<CommonTree, CombinatorSimpleSelectorSequenceNode> CS$<>9__CachedAnonymousMethodDelegate13;
    [CompilerGeneratedAttribute]
private static Func`2<CommonTree, HashClassAtNameAttribPseudoNegationNode> CS$<>9__CachedAnonymousMethodDelegate15;
    [CompilerGeneratedAttribute]
private static Func`2<CommonTree, string> CS$<>9__CachedAnonymousMethodDelegate17;
    internal static StyleSheetNode CreateStyleSheetNode(CommonTree commonTree);
    private static string CreateCharsetNode(CommonTree styleSheetTree);
    private static Nullable`1<double> CreateDpiNode(CommonTree styleSheetTree);
    private static ReadOnlyCollection`1<StyleSheetRuleNode> CreateStyleSheetRulesNodes(CommonTree styleSheetTree);
    private static ReadOnlyCollection`1<ImportNode> CreateImportNodes(CommonTree styleSheetTree);
    private static MediaQueryNode CreateMediaQueryNode(CommonTree mediaQueryTree);
    private static MediaExpressionNode CreateMediaExpressionNode(CommonTree mediaExpressionTree);
    private static ReadOnlyCollection`1<NamespaceNode> CreateNamespaceNodes(CommonTree styleSheetTree);
    private static RulesetNode CreateRulesetNode(CommonTree rulesetTree);
    private static MediaNode CreateMediaNode(CommonTree mediaTree);
    private static PageNode CreatePageNode(CommonTree pageTree);
    private static DocumentQueryNode CreateDocumentQueryNode(CommonTree documentTree);
    private static KeyFramesNode CreateKeyFramesNode(CommonTree styleSheetChild);
    private static KeyFramesBlockNode CreateKeyFramesBlockNode(CommonTree keyFramesBlockTree);
    private static IEnumerable`1<DeclarationNode> CreateDeclarationNodes(IEnumerable`1<CommonTree> declarationTreeNodes);
    private static ExprNode CreateExpressionNode(CommonTree exprTree);
    private static IEnumerable`1<TermWithOperatorNode> CreateTermWithOperatorsNode(IEnumerable`1<CommonTree> termWithOperatorTreeNodes);
    private static TermNode CreateTermNode(CommonTree termTree);
    private static FunctionNode CreateFunctionNode(CommonTree functionTree);
    private static SelectorsGroupNode CreateSelectorsGroupNode(IEnumerable`1<CommonTree> selectorTreeNodes);
    private static IEnumerable`1<CombinatorSimpleSelectorSequenceNode> CreateCombinatorSimpleSelectorSequenceNode(IEnumerable`1<CommonTree> combinatorSimpleSelectorSequenceTreeNodes);
    private static Combinator CreateCombinatorNode(CommonTree combinatorTree);
    private static int GetWhitespaceCount(CommonTree commonTree);
    private static SimpleSelectorSequenceNode CreateSimpleSelectorSequenceNode(CommonTree simpleSelectorSequenceTree);
    private static UniversalSelectorNode CreateUniversalSelectorNode(CommonTree universalSelectorTree);
    private static TypeSelectorNode CreateTypeSelectorNode(CommonTree typeSelectorTree);
    private static SelectorNamespacePrefixNode CreateNamespacePrefixNode(CommonTree namespacePrefixTree);
    private static IEnumerable`1<HashClassAtNameAttribPseudoNegationNode> CreateHashClassAttribPseudoNegationNodes(IEnumerable`1<CommonTree> hashClassAttribPseudoNegationTreeNodes);
    private static NegationNode CreateNegationNode(CommonTree negationTree);
    private static NegationArgNode CreateNegationArgNode(CommonTree negationArgTree);
    private static PseudoNode CreatePseudoNode(CommonTree pseudoTree);
    private static FunctionalPseudoNode CreateFunctionalPseudoNode(CommonTree functionalPseudoTree);
    private static SelectorExpressionNode CreateSelectorExpressionNode(CommonTree selectorExpressionTree);
    private static AttribNode CreateAttribNode(CommonTree attribTree);
    private static AttribOperatorAndValueNode CreateAttribOperatorValueNode(CommonTree attribOperatorAndValueTree);
    private static string StringOrUriBasedValue(string text);
    private static string T(int tokenIndex);
    [CompilerGeneratedAttribute]
private static ImportNode <CreateImportNodes>b__0(CommonTree import);
    [CompilerGeneratedAttribute]
private static NamespaceNode <CreateNamespaceNodes>b__2(CommonTree ns);
    [CompilerGeneratedAttribute]
private static string <CreatePageNode>b__4(CommonTree pseudo);
    [CompilerGeneratedAttribute]
private static string <CreateDocumentQueryNode>b__6(CommonTree _);
    [CompilerGeneratedAttribute]
private static string <CreateKeyFramesBlockNode>b__8(CommonTree keyFramesSelector);
    [CompilerGeneratedAttribute]
private static DeclarationNode <CreateDeclarationNodes>b__a(CommonTree declaration);
    [CompilerGeneratedAttribute]
private static string <CreateDeclarationNodes>b__b(CommonTree _);
    [CompilerGeneratedAttribute]
private static TermWithOperatorNode <CreateTermWithOperatorsNode>b__e(CommonTree termWithOperatorNode);
    [CompilerGeneratedAttribute]
private static SelectorNode <CreateSelectorsGroupNode>b__10(CommonTree selector);
    [CompilerGeneratedAttribute]
private static CombinatorSimpleSelectorSequenceNode <CreateCombinatorSimpleSelectorSequenceNode>b__12(CommonTree combinatorSimpleSelectorSequenceNode);
    [CompilerGeneratedAttribute]
private static HashClassAtNameAttribPseudoNegationNode <CreateHashClassAttribPseudoNegationNodes>b__14(CommonTree hashClassAttribPseudoNegationNode);
    [CompilerGeneratedAttribute]
private static string <CreateSelectorExpressionNode>b__16(CommonTree _);
}
internal static class WebGrease.Css.CssConstants : object {
    public static string DoubleDot;
    public static string And;
    public static string Namespace;
    public static string Not;
    public static string PrefixMatch;
    public static string SuffixMatch;
    public static string SubstringMatch;
    public static string Star;
    public static string Charset;
    public static string Import;
    public static string Media;
    public static string Page;
    public static string Important;
    public static string Url;
    public static char SingleSpace;
    public static char Comma;
    public static char Semicolon;
    public static char OpenRoundBracket;
    public static char CloseRoundBracket;
    public static char OpenCurlyBracket;
    public static char CloseCurlyBracket;
    public static char OpenSquareBracket;
    public static char CloseSquareBracket;
    public static char Dot;
    public static char Hash;
    public static char Colon;
    public static string Equal;
    public static string Plus;
    public static string Greater;
    public static string Tilde;
    public static string Whitespace;
    public static string Includes;
    public static string DashMatch;
    public static string Rgb;
    public static string EscapedNewLine;
    public static string EscapedCarriageReturnNewLine;
    public static string EscapedFormFeed;
    public static string Pipe;
}
[GeneratedCodeAttribute("ANTLR", "3.3.1.7705")]
[CLSCompliantAttribute("False")]
public class WebGrease.Css.CssLexer : Lexer {
    public static int EOF;
    public static int A;
    public static int AND;
    public static int ANGLE;
    public static int AT_NAME;
    public static int B;
    public static int BACKWARD_SLASH;
    public static int C;
    public static int CHARSET_SYM;
    public static int CIRCLE_BEGIN;
    public static int CIRCLE_END;
    public static int CLASS_IDENT;
    public static int COLON;
    public static int COMMA;
    public static int COMMENTS;
    public static int CURLY_BEGIN;
    public static int CURLY_END;
    public static int D;
    public static int DASHMATCH;
    public static int DIGITS;
    public static int DIMENSION;
    public static int DOCUMENT_SYM;
    public static int DOMAIN_FUNCTION;
    public static int E;
    public static int EQUALS;
    public static int ESCAPE;
    public static int F;
    public static int FORWARD_SLASH;
    public static int FREQ;
    public static int FROM;
    public static int G;
    public static int GREATER;
    public static int H;
    public static int HASH;
    public static int HASH_IDENT;
    public static int HEXDIGIT;
    public static int I;
    public static int IDENT;
    public static int IMPORTANT_SYM;
    public static int IMPORT_SYM;
    public static int INCLUDES;
    public static int K;
    public static int KEYFRAMES_SYM;
    public static int L;
    public static int LENGTH;
    public static int LETTER;
    public static int M;
    public static int MEDIA_SYM;
    public static int MINUS;
    public static int MSIE_EXPRESSION;
    public static int MSIE_IMAGE_TRANSFORM;
    public static int N;
    public static int NAME;
    public static int NAMESPACE_SYM;
    public static int NL;
    public static int NMCHAR;
    public static int NMSTART;
    public static int NONASCII;
    public static int NOT;
    public static int NUMBER;
    public static int O;
    public static int ONLY;
    public static int P;
    public static int PAGE_SYM;
    public static int PERCENTAGE;
    public static int PIPE;
    public static int PLUS;
    public static int PREFIXMATCH;
    public static int R;
    public static int REGEXP_FUNCTION;
    public static int RELATIVELENGTH;
    public static int RESOLUTION;
    public static int S;
    public static int SEMICOLON;
    public static int SPACE_AFTER_UNICODE;
    public static int SPEECH;
    public static int SQUARE_BEGIN;
    public static int SQUARE_END;
    public static int STAR;
    public static int STRING;
    public static int SUBSTRINGMATCH;
    public static int SUFFIXMATCH;
    public static int T;
    public static int TILDE;
    public static int TIME;
    public static int TO;
    public static int U;
    public static int UNICODE;
    public static int UNICODE_ESCAPE_HACK;
    public static int UNICODE_NULLTERM;
    public static int UNICODE_RANGE;
    public static int UNICODE_TAB;
    public static int UNICODE_ZEROS;
    public static int URI;
    public static int URL;
    public static int URLPREFIX_FUNCTION;
    public static int V;
    public static int W;
    public static int WG_DPI_SYM;
    public static int WS;
    public static int WS_FRAGMENT;
    public static int X;
    public static int Y;
    public static int Z;
    private static Regex CommentsRegex;
    private static Regex UrlWhitespaceRegex;
    private DFA8 dfa8;
    private DFA10 dfa10;
    private DFA12 dfa12;
    private DFA14 dfa14;
    private DFA18 dfa18;
    private DFA25 dfa25;
    private DFA31 dfa31;
    private DFA46 dfa46;
    private DFA129 dfa129;
    public string GrammarFileName { get; }
    public CssLexer(ICharStream input);
    public CssLexer(ICharStream input, RecognizerSharedState state);
    private static CssLexer();
    private static string RemoveComments(string text);
    private static string RemoveUrlEdgeWhitespaces(string text);
    public virtual string get_GrammarFileName();
    [GrammarRuleAttribute("CHARSET_SYM")]
private void mCHARSET_SYM();
    [GrammarRuleAttribute("MEDIA_SYM")]
private void mMEDIA_SYM();
    [GrammarRuleAttribute("WG_DPI_SYM")]
private void mWG_DPI_SYM();
    [GrammarRuleAttribute("PAGE_SYM")]
private void mPAGE_SYM();
    [GrammarRuleAttribute("KEYFRAMES_SYM")]
private void mKEYFRAMES_SYM();
    [GrammarRuleAttribute("DOCUMENT_SYM")]
private void mDOCUMENT_SYM();
    [GrammarRuleAttribute("URLPREFIX_FUNCTION")]
private void mURLPREFIX_FUNCTION();
    [GrammarRuleAttribute("DOMAIN_FUNCTION")]
private void mDOMAIN_FUNCTION();
    [GrammarRuleAttribute("REGEXP_FUNCTION")]
private void mREGEXP_FUNCTION();
    [GrammarRuleAttribute("NAMESPACE_SYM")]
private void mNAMESPACE_SYM();
    [GrammarRuleAttribute("CIRCLE_BEGIN")]
private void mCIRCLE_BEGIN();
    [GrammarRuleAttribute("CIRCLE_END")]
private void mCIRCLE_END();
    [GrammarRuleAttribute("COMMA")]
private void mCOMMA();
    [GrammarRuleAttribute("COLON")]
private void mCOLON();
    [GrammarRuleAttribute("CURLY_BEGIN")]
private void mCURLY_BEGIN();
    [GrammarRuleAttribute("CURLY_END")]
private void mCURLY_END();
    [GrammarRuleAttribute("DASHMATCH")]
private void mDASHMATCH();
    [GrammarRuleAttribute("PREFIXMATCH")]
private void mPREFIXMATCH();
    [GrammarRuleAttribute("SUFFIXMATCH")]
private void mSUFFIXMATCH();
    [GrammarRuleAttribute("SUBSTRINGMATCH")]
private void mSUBSTRINGMATCH();
    [GrammarRuleAttribute("MSIE_IMAGE_TRANSFORM")]
private void mMSIE_IMAGE_TRANSFORM();
    [GrammarRuleAttribute("MSIE_EXPRESSION")]
private void mMSIE_EXPRESSION();
    [GrammarRuleAttribute("CLASS_IDENT")]
private void mCLASS_IDENT();
    [GrammarRuleAttribute("EQUALS")]
private void mEQUALS();
    [GrammarRuleAttribute("FORWARD_SLASH")]
private void mFORWARD_SLASH();
    [GrammarRuleAttribute("BACKWARD_SLASH")]
private void mBACKWARD_SLASH();
    [GrammarRuleAttribute("GREATER")]
private void mGREATER();
    [GrammarRuleAttribute("STAR")]
private void mSTAR();
    [GrammarRuleAttribute("MINUS")]
private void mMINUS();
    [GrammarRuleAttribute("FROM")]
private void mFROM();
    [GrammarRuleAttribute("TO")]
private void mTO();
    [GrammarRuleAttribute("AND")]
private void mAND();
    [GrammarRuleAttribute("NOT")]
private void mNOT();
    [GrammarRuleAttribute("ONLY")]
private void mONLY();
    [GrammarRuleAttribute("PLUS")]
private void mPLUS();
    [GrammarRuleAttribute("PIPE")]
private void mPIPE();
    [GrammarRuleAttribute("SEMICOLON")]
private void mSEMICOLON();
    [GrammarRuleAttribute("SQUARE_BEGIN")]
private void mSQUARE_BEGIN();
    [GrammarRuleAttribute("SQUARE_END")]
private void mSQUARE_END();
    [GrammarRuleAttribute("TILDE")]
private void mTILDE();
    [GrammarRuleAttribute("URI")]
private void mURI();
    [GrammarRuleAttribute("LENGTH")]
private void mLENGTH();
    [GrammarRuleAttribute("RELATIVELENGTH")]
private void mRELATIVELENGTH();
    [GrammarRuleAttribute("ANGLE")]
private void mANGLE();
    [GrammarRuleAttribute("RESOLUTION")]
private void mRESOLUTION();
    [GrammarRuleAttribute("TIME")]
private void mTIME();
    [GrammarRuleAttribute("FREQ")]
private void mFREQ();
    [GrammarRuleAttribute("SPEECH")]
private void mSPEECH();
    [GrammarRuleAttribute("UNICODE_ESCAPE_HACK")]
private void mUNICODE_ESCAPE_HACK();
    [GrammarRuleAttribute("IDENT")]
private void mIDENT();
    [GrammarRuleAttribute("NUMBER")]
private void mNUMBER();
    [GrammarRuleAttribute("DIMENSION")]
private void mDIMENSION();
    [GrammarRuleAttribute("IMPORT_SYM")]
private void mIMPORT_SYM();
    [GrammarRuleAttribute("IMPORTANT_SYM")]
private void mIMPORTANT_SYM();
    [GrammarRuleAttribute("INCLUDES")]
private void mINCLUDES();
    [GrammarRuleAttribute("PERCENTAGE")]
private void mPERCENTAGE();
    [GrammarRuleAttribute("STRING")]
private void mSTRING();
    [GrammarRuleAttribute("HASH_IDENT")]
private void mHASH_IDENT();
    [GrammarRuleAttribute("AT_NAME")]
private void mAT_NAME();
    [GrammarRuleAttribute("WS")]
private void mWS();
    [GrammarRuleAttribute("COMMENTS")]
private void mCOMMENTS();
    [GrammarRuleAttribute("NMSTART")]
private void mNMSTART();
    [GrammarRuleAttribute("NMCHAR")]
private void mNMCHAR();
    [GrammarRuleAttribute("NAME")]
private void mNAME();
    [GrammarRuleAttribute("DIGITS")]
private void mDIGITS();
    [GrammarRuleAttribute("ESCAPE")]
private void mESCAPE();
    [GrammarRuleAttribute("HASH")]
private void mHASH();
    [GrammarRuleAttribute("HEXDIGIT")]
private void mHEXDIGIT();
    [GrammarRuleAttribute("LETTER")]
private void mLETTER();
    [GrammarRuleAttribute("NONASCII")]
private void mNONASCII();
    [GrammarRuleAttribute("NL")]
private void mNL();
    [GrammarRuleAttribute("URL")]
private void mURL();
    [GrammarRuleAttribute("UNICODE")]
private void mUNICODE();
    [GrammarRuleAttribute("UNICODE_RANGE")]
private void mUNICODE_RANGE();
    [GrammarRuleAttribute("SPACE_AFTER_UNICODE")]
private void mSPACE_AFTER_UNICODE();
    [GrammarRuleAttribute("WS_FRAGMENT")]
private void mWS_FRAGMENT();
    [GrammarRuleAttribute("UNICODE_ZEROS")]
private void mUNICODE_ZEROS();
    [GrammarRuleAttribute("UNICODE_TAB")]
private void mUNICODE_TAB();
    [GrammarRuleAttribute("UNICODE_NULLTERM")]
private void mUNICODE_NULLTERM();
    [GrammarRuleAttribute("A")]
private void mA();
    [GrammarRuleAttribute("B")]
private void mB();
    [GrammarRuleAttribute("C")]
private void mC();
    [GrammarRuleAttribute("D")]
private void mD();
    [GrammarRuleAttribute("E")]
private void mE();
    [GrammarRuleAttribute("F")]
private void mF();
    [GrammarRuleAttribute("G")]
private void mG();
    [GrammarRuleAttribute("H")]
private void mH();
    [GrammarRuleAttribute("I")]
private void mI();
    [GrammarRuleAttribute("K")]
private void mK();
    [GrammarRuleAttribute("L")]
private void mL();
    [GrammarRuleAttribute("M")]
private void mM();
    [GrammarRuleAttribute("N")]
private void mN();
    [GrammarRuleAttribute("O")]
private void mO();
    [GrammarRuleAttribute("P")]
private void mP();
    [GrammarRuleAttribute("R")]
private void mR();
    [GrammarRuleAttribute("S")]
private void mS();
    [GrammarRuleAttribute("T")]
private void mT();
    [GrammarRuleAttribute("U")]
private void mU();
    [GrammarRuleAttribute("V")]
private void mV();
    [GrammarRuleAttribute("W")]
private void mW();
    [GrammarRuleAttribute("X")]
private void mX();
    [GrammarRuleAttribute("Y")]
private void mY();
    [GrammarRuleAttribute("Z")]
private void mZ();
    public virtual void mTokens();
    protected virtual void InitDFAs();
    private int SpecialStateTransition25(DFA dfa, int s, IIntStream _input);
    private int SpecialStateTransition129(DFA dfa, int s, IIntStream _input);
}
[CLSCompliantAttribute("False")]
[GeneratedCodeAttribute("ANTLR", "3.3.1.7705")]
public class WebGrease.Css.CssParser : Parser {
    public static int EOF;
    public static int A;
    public static int AND;
    public static int ANGLE;
    public static int AT_NAME;
    public static int B;
    public static int BACKWARD_SLASH;
    public static int C;
    public static int CHARSET_SYM;
    public static int CIRCLE_BEGIN;
    public static int CIRCLE_END;
    public static int CLASS_IDENT;
    public static int COLON;
    public static int COMMA;
    public static int COMMENTS;
    public static int CURLY_BEGIN;
    public static int CURLY_END;
    public static int D;
    public static int DASHMATCH;
    public static int DIGITS;
    public static int DIMENSION;
    public static int DOCUMENT_SYM;
    public static int DOMAIN_FUNCTION;
    public static int E;
    public static int EQUALS;
    public static int ESCAPE;
    public static int F;
    public static int FORWARD_SLASH;
    public static int FREQ;
    public static int FROM;
    public static int G;
    public static int GREATER;
    public static int H;
    public static int HASH;
    public static int HASH_IDENT;
    public static int HEXDIGIT;
    public static int I;
    public static int IDENT;
    public static int IMPORTANT_SYM;
    public static int IMPORT_SYM;
    public static int INCLUDES;
    public static int K;
    public static int KEYFRAMES_SYM;
    public static int L;
    public static int LENGTH;
    public static int LETTER;
    public static int M;
    public static int MEDIA_SYM;
    public static int MINUS;
    public static int MSIE_EXPRESSION;
    public static int MSIE_IMAGE_TRANSFORM;
    public static int N;
    public static int NAME;
    public static int NAMESPACE_SYM;
    public static int NL;
    public static int NMCHAR;
    public static int NMSTART;
    public static int NONASCII;
    public static int NOT;
    public static int NUMBER;
    public static int O;
    public static int ONLY;
    public static int P;
    public static int PAGE_SYM;
    public static int PERCENTAGE;
    public static int PIPE;
    public static int PLUS;
    public static int PREFIXMATCH;
    public static int R;
    public static int REGEXP_FUNCTION;
    public static int RELATIVELENGTH;
    public static int RESOLUTION;
    public static int S;
    public static int SEMICOLON;
    public static int SPACE_AFTER_UNICODE;
    public static int SPEECH;
    public static int SQUARE_BEGIN;
    public static int SQUARE_END;
    public static int STAR;
    public static int STRING;
    public static int SUBSTRINGMATCH;
    public static int SUFFIXMATCH;
    public static int T;
    public static int TILDE;
    public static int TIME;
    public static int TO;
    public static int U;
    public static int UNICODE;
    public static int UNICODE_ESCAPE_HACK;
    public static int UNICODE_NULLTERM;
    public static int UNICODE_RANGE;
    public static int UNICODE_TAB;
    public static int UNICODE_ZEROS;
    public static int URI;
    public static int URL;
    public static int URLPREFIX_FUNCTION;
    public static int V;
    public static int W;
    public static int WG_DPI_SYM;
    public static int WS;
    public static int WS_FRAGMENT;
    public static int X;
    public static int Y;
    public static int Z;
    public static int ATIDENTIFIER;
    public static int ATTRIBIDENTIFIER;
    public static int ATTRIBNAME;
    public static int ATTRIBOPERATOR;
    public static int ATTRIBOPERATORVALUE;
    public static int ATTRIBVALUE;
    public static int CHARSET;
    public static int CLASSIDENTIFIER;
    public static int COLONS;
    public static int COMBINATOR;
    public static int COMBINATOR_SIMPLE_SELECTOR;
    public static int COMBINATOR_SIMPLE_SELECTOR_SEQUENCES;
    public static int DECLARATION;
    public static int DECLARATIONS;
    public static int DOCUMENT;
    public static int DOCUMENT_MATCHNAME;
    public static int DOCUMENT_SYMBOL;
    public static int ELEMENT_NAME;
    public static int EXPR;
    public static int FUNCTIONAL_PSEUDO;
    public static int FUNCTIONBASEDVALUE;
    public static int FUNCTIONNAME;
    public static int FUNCTIONPARAM;
    public static int HASHCLASSATNAMEATTRIBPSEUDONEGATION;
    public static int HASHCLASSATNAMEATTRIBPSEUDONEGATIONNODES;
    public static int HASHIDENTIFIER;
    public static int HEXBASEDVALUE;
    public static int IDENTBASEDVALUE;
    public static int IMPORT;
    public static int IMPORTANT;
    public static int IMPORTS;
    public static int KEYFRAMES;
    public static int KEYFRAMES_BLOCK;
    public static int KEYFRAMES_BLOCKS;
    public static int KEYFRAMES_SELECTOR;
    public static int KEYFRAMES_SELECTORS;
    public static int KEYFRAMES_SYMBOL;
    public static int MEDIA;
    public static int MEDIA_EXPRESSION;
    public static int MEDIA_EXPRESSIONS;
    public static int MEDIA_FEATURE;
    public static int MEDIA_QUERY;
    public static int MEDIA_QUERY_LIST;
    public static int MEDIA_TYPE;
    public static int NAMESPACE;
    public static int NAMESPACES;
    public static int NAMESPACE_PREFIX;
    public static int NEGATIONIDENTIFIER;
    public static int NEGATION_ARG;
    public static int NOT_TEXT;
    public static int NUMBERBASEDVALUE;
    public static int ONLY_TEXT;
    public static int OPERATOR;
    public static int PAGE;
    public static int PROPERTY;
    public static int PSEUDOIDENTIFIER;
    public static int PSEUDONAME;
    public static int PSEUDO_PAGE;
    public static int RULESET;
    public static int RULESETS;
    public static int SELECTOR;
    public static int SELECTORS_GROUP;
    public static int SELECTOR_EXPRESSION;
    public static int SELECTOR_NAMESPACE_PREFIX;
    public static int SIMPLE_SELECTOR_SEQUENCE;
    public static int STAR_TEXT;
    public static int STRINGBASEDVALUE;
    public static int STYLESHEET;
    public static int TERM;
    public static int TERMWITHOPERATOR;
    public static int TERMWITHOPERATORS;
    public static int TYPE_SELECTOR;
    public static int UNARY;
    public static int UNIVERSAL;
    public static int URIBASEDVALUE;
    public static int WG_DPI;
    public static int WHITESPACE;
    private IList`1<Exception> _exceptions;
    private static Char[] _semicolon;
    internal static String[] tokenNames;
    private ITreeAdaptor adaptor;
    private DFA28 dfa28;
    private DFA43 dfa43;
    public ITreeAdaptor TreeAdaptor { get; public set; }
    public String[] TokenNames { get; }
    public string GrammarFileName { get; }
    public CssParser(ITokenStream input);
    public CssParser(ITokenStream input, RecognizerSharedState state);
    private static CssParser();
    public static StyleSheetNode Parse(IWebGreaseContext context, string cssContent, bool shouldLogDiagnostics);
    public static StyleSheetNode Parse(FileInfo cssFile, bool shouldLogDiagnostics);
    public virtual void ReportError(RecognitionException e);
    private static StyleSheetNode ParseStyleSheet(IWebGreaseContext context, string cssContent, bool shouldLogDiagnostics);
    private static void LogDiagnostics(string css, CommonTree commonTree);
    private static void LogTree(CommonTree tree);
    private CommonToken GetWhitespaceToken();
    private static CommonToken TrimMsieExpression(string text);
    public ITreeAdaptor get_TreeAdaptor();
    public void set_TreeAdaptor(ITreeAdaptor value);
    public virtual String[] get_TokenNames();
    public virtual string get_GrammarFileName();
    [GrammarRuleAttribute("main")]
public main_return main();
    [GrammarRuleAttribute("styleSheet")]
private styleSheet_return styleSheet();
    [GrammarRuleAttribute("styleimport")]
private styleimport_return styleimport();
    [GrammarRuleAttribute("namespace")]
private namespace_return namespace();
    [GrammarRuleAttribute("namespace_prefix")]
private namespace_prefix_return namespace_prefix();
    [GrammarRuleAttribute("wg_dpi")]
private wg_dpi_return wg_dpi();
    [GrammarRuleAttribute("media")]
private media_return media();
    [GrammarRuleAttribute("media_query_list")]
private media_query_list_return media_query_list();
    [GrammarRuleAttribute("media_query")]
private media_query_return media_query();
    [GrammarRuleAttribute("media_type")]
private media_type_return media_type();
    [GrammarRuleAttribute("media_expression")]
private media_expression_return media_expression();
    [GrammarRuleAttribute("media_feature")]
private media_feature_return media_feature();
    [GrammarRuleAttribute("page")]
private page_return page();
    [GrammarRuleAttribute("pseudo_page")]
private pseudo_page_return pseudo_page();
    [GrammarRuleAttribute("operator")]
private operator_return operator();
    [GrammarRuleAttribute("unary_operator")]
private unary_operator_return unary_operator();
    [GrammarRuleAttribute("property")]
private property_return property();
    [GrammarRuleAttribute("ruleset")]
private ruleset_return ruleset();
    [GrammarRuleAttribute("selectors_group")]
private selectors_group_return selectors_group();
    [GrammarRuleAttribute("selector")]
private selector_return selector();
    [GrammarRuleAttribute("combinator_simple_selector_sequence")]
private combinator_simple_selector_sequence_return combinator_simple_selector_sequence();
    [GrammarRuleAttribute("combinator")]
private combinator_return combinator();
    [GrammarRuleAttribute("whitespace")]
private whitespace_return whitespace();
    [GrammarRuleAttribute("simple_selector_sequence")]
private simple_selector_sequence_return simple_selector_sequence();
    [GrammarRuleAttribute("hashclassatnameattribpseudonegation")]
private hashclassatnameattribpseudonegation_return hashclassatnameattribpseudonegation();
    [GrammarRuleAttribute("type_selector")]
private type_selector_return type_selector();
    [GrammarRuleAttribute("selector_namespace_prefix")]
private selector_namespace_prefix_return selector_namespace_prefix();
    [GrammarRuleAttribute("element_name")]
private element_name_return element_name();
    [GrammarRuleAttribute("universal")]
private universal_return universal();
    [GrammarRuleAttribute("class")]
private class_return class();
    [GrammarRuleAttribute("attrib")]
private attrib_return attrib();
    [GrammarRuleAttribute("pseudo")]
private pseudo_return pseudo();
    [GrammarRuleAttribute("functional_pseudo")]
private functional_pseudo_return functional_pseudo();
    [GrammarRuleAttribute("selectorexpression")]
private selectorexpression_return selectorexpression();
    [GrammarRuleAttribute("negation")]
private negation_return negation();
    [GrammarRuleAttribute("negation_arg")]
private negation_arg_return negation_arg();
    [GrammarRuleAttribute("atname")]
private atname_return atname();
    [GrammarRuleAttribute("declaration")]
private declaration_return declaration();
    [GrammarRuleAttribute("stringoruri")]
private stringoruri_return stringoruri();
    [GrammarRuleAttribute("styleSheetrules")]
private styleSheetrules_return styleSheetrules();
    [GrammarRuleAttribute("prio")]
private prio_return prio();
    [GrammarRuleAttribute("expr")]
private expr_return expr();
    [GrammarRuleAttribute("termwithoperator")]
private termwithoperator_return termwithoperator();
    [GrammarRuleAttribute("term")]
private term_return term();
    [GrammarRuleAttribute("hash")]
private hash_return hash();
    [GrammarRuleAttribute("function")]
private function_return function();
    [GrammarRuleAttribute("beginfunc")]
private beginfunc_return beginfunc();
    [GrammarRuleAttribute("keyframes")]
private keyframes_return keyframes();
    [GrammarRuleAttribute("keyframes_block")]
private keyframes_block_return keyframes_block();
    [GrammarRuleAttribute("keyframes_selectors")]
private keyframes_selectors_return keyframes_selectors();
    [GrammarRuleAttribute("keyframes_selector")]
private keyframes_selector_return keyframes_selector();
    [GrammarRuleAttribute("document")]
private document_return document();
    [GrammarRuleAttribute("document_match_function")]
private document_match_function_return document_match_function();
    public void synpred1_CssParser_fragment();
    public void synpred2_CssParser_fragment();
    public void synpred3_CssParser_fragment();
    public void synpred4_CssParser_fragment();
    public void synpred5_CssParser_fragment();
    public void synpred6_CssParser_fragment();
    public void synpred7_CssParser_fragment();
    public void synpred8_CssParser_fragment();
    private bool EvaluatePredicate(Action fragment);
    protected virtual void InitDFAs();
    private int SpecialStateTransition28(DFA dfa, int s, IIntStream _input);
    private int SpecialStateTransition43(DFA dfa, int s, IIntStream _input);
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
public class WebGrease.Css.CssStrings : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
public static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
public static CultureInfo Culture { get; public set; }
    public static string CssLowercaseValidationError { get; }
    public static string CssLowercaseValidationParentNodeError { get; }
    public static string CssSelectorHackError { get; }
    public static string DuplicateBackgroundFormatError { get; }
    public static string DuplicateImageReferenceWithDifferentRulesError { get; }
    public static string ExpectedAstNode { get; }
    public static string ExpectedEnum { get; }
    public static string ExpectedIdentifierOrString { get; }
    public static string ExpectedOperator { get; }
    public static string ExpectedSimpleSelector { get; }
    public static string ExpectedSingleValue { get; }
    public static string ExpectedValue { get; }
    public static string FileNotFoundError { get; }
    public static string InnerExceptionFile { get; }
    public static string InnerExceptionSelector { get; }
    public static string InvalidDimensionsError { get; }
    public static string OriginalFileElementEmptyError { get; }
    public static string RepeatedPropertyNameError { get; }
    public static string TooManyLengthsError { get; }
    public static ResourceManager get_ResourceManager();
    public static CultureInfo get_Culture();
    public static void set_Culture(CultureInfo value);
    public static string get_CssLowercaseValidationError();
    public static string get_CssLowercaseValidationParentNodeError();
    public static string get_CssSelectorHackError();
    public static string get_DuplicateBackgroundFormatError();
    public static string get_DuplicateImageReferenceWithDifferentRulesError();
    public static string get_ExpectedAstNode();
    public static string get_ExpectedEnum();
    public static string get_ExpectedIdentifierOrString();
    public static string get_ExpectedOperator();
    public static string get_ExpectedSimpleSelector();
    public static string get_ExpectedSingleValue();
    public static string get_ExpectedValue();
    public static string get_FileNotFoundError();
    public static string get_InnerExceptionFile();
    public static string get_InnerExceptionSelector();
    public static string get_InvalidDimensionsError();
    public static string get_OriginalFileElementEmptyError();
    public static string get_RepeatedPropertyNameError();
    public static string get_TooManyLengthsError();
}
[ExtensionAttribute]
internal static class WebGrease.Css.ErrorHelper : object {
    [CompilerGeneratedAttribute]
private static Func`2<Exception, RecognitionException> CS$<>9__CachedAnonymousMethodDelegate3;
    [CompilerGeneratedAttribute]
private static Func`2<RecognitionException, bool> CS$<>9__CachedAnonymousMethodDelegate4;
    [ExtensionAttribute]
internal static IEnumerable`1<string> DedupeCSSErrors(AggregateException aggEx);
    [ExtensionAttribute]
internal static IEnumerable`1<BuildWorkflowException> CreateBuildErrors(AggregateException aggEx, string fileName);
    [CompilerGeneratedAttribute]
private static RecognitionException <CreateBuildErrors>b__0(Exception ex);
    [CompilerGeneratedAttribute]
private static bool <CreateBuildErrors>b__1(RecognitionException ex);
}
[ExtensionAttribute]
public static class WebGrease.Css.Extensions.AstNodeExtensions : object {
    [CompilerGeneratedAttribute]
private static Func`2<MediaQueryNode, string> CS$<>9__CachedAnonymousMethodDelegate1;
    [ExtensionAttribute]
public static string PrettyPrint(AstNode node);
    [ExtensionAttribute]
public static string MinifyPrint(AstNode node);
    [ExtensionAttribute]
public static string PrintSelector(MediaNode node);
    [ExtensionAttribute]
internal static string PrintSelector(RulesetNode rulesetNode);
    [CompilerGeneratedAttribute]
private static string <PrintSelector>b__0(MediaQueryNode mq);
}
[ExtensionAttribute]
public static class WebGrease.Css.Extensions.BackgroundAstNodeExtensions : object {
    [CompilerGeneratedAttribute]
private static Func`2<DeclarationNode, bool> CS$<>9__CachedAnonymousMethodDelegate1;
    [CompilerGeneratedAttribute]
private static Func`2<KeyValuePair`2<string, List`1<DeclarationNode>>, string> CS$<>9__CachedAnonymousMethodDelegatec;
    [CompilerGeneratedAttribute]
private static Func`2<KeyValuePair`2<string, List`1<DeclarationNode>>, DeclarationNode> CS$<>9__CachedAnonymousMethodDelegated;
    [SuppressMessageAttribute("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
[ExtensionAttribute]
internal static bool TryGetBackgroundDeclaration(IEnumerable`1<DeclarationNode> declarationAstNodes, AstNode parentAstNode, Background& backgroundNode, BackgroundImage& backgroundImageNode, BackgroundPosition& backgroundPositionNode, DeclarationNode& backgroundSize, DeclarationNode& webGreaseBackgroundDpi, List`1<string> imageReferencesInInvalidDeclarations, HashSet`1<string> imageReferencesToIgnore, ImageAssemblyAnalysisLog imageAssemblyAnalysisLog, string outputUnit, double outputUnitFactor, bool ignoreImagesWithNonDefaultBackgroundSize);
    [ExtensionAttribute]
internal static void SafeAdd(ImageAssemblyAnalysisLog imageAssemblyAnalysisLog, AstNode parentAstNode, string image, Nullable`1<FailureReason> failureReason);
    [ExtensionAttribute]
internal static IEnumerable`1<TermWithOperatorNode> DeclarationEnumerator(DeclarationNode declarationNode);
    [ExtensionAttribute]
internal static TermNode CopyTerm(TermNode termNode);
    [ExtensionAttribute]
internal static DeclarationNode CreateDeclarationNode(DeclarationNode declarationNode, List`1<TermWithOperatorNode> termWithOperatorNodes);
    private static bool TryGetBackgroundSize(bool ignoreImagesWithNonDefaultBackgroundSize, IDictionary`2<string, DeclarationNode> declarationProperties, DeclarationNode& backgroundSize);
    private static bool TryGetBackgroundDpi(IDictionary`2<string, DeclarationNode> declarationProperties, DeclarationNode& webGreaseBackgroundDpi);
    private static void UpdateFailedUrlsList(string parsedUrl, ICollection`1<string> imagesCriteriaFailedUrls);
    [ExtensionAttribute]
private static Dictionary`2<string, DeclarationNode> LoadDeclarationPropertiesDictionary(IEnumerable`1<DeclarationNode> declarationNodes);
    [CompilerGeneratedAttribute]
private static bool <TryGetBackgroundDeclaration>b__0(DeclarationNode d);
    [CompilerGeneratedAttribute]
private static string <LoadDeclarationPropertiesDictionary>b__a(KeyValuePair`2<string, List`1<DeclarationNode>> d);
    [CompilerGeneratedAttribute]
private static DeclarationNode <LoadDeclarationPropertiesDictionary>b__b(KeyValuePair`2<string, List`1<DeclarationNode>> d);
}
[ExtensionAttribute]
public static class WebGrease.Css.Extensions.CommonTreeExtensions : object {
    [CompilerGeneratedAttribute]
private static Func`2<CommonTree, IEnumerable`1<CommonTree>> CS$<>9__CachedAnonymousMethodDelegatee;
    [ExtensionAttribute]
public static IEnumerable`1<CommonTree> Children(CommonTree commonTree, string childFilterText);
    [SuppressMessageAttribute("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
[ExtensionAttribute]
public static IEnumerable`1<CommonTree> GrandChildren(CommonTree commonTree, string childFilterText);
    [ExtensionAttribute]
public static string TextOrDefault(CommonTree commonTree, string defaultText);
    [ExtensionAttribute]
public static string FirstChildText(CommonTree commonTree);
    [ExtensionAttribute]
public static string FirstChildTextOrDefault(CommonTree commonTree, string defaultText);
    [ExtensionAttribute]
public static string FirstChildText(IEnumerable`1<CommonTree> commonTree);
    [ExtensionAttribute]
public static string FirstChildTextOrDefault(IEnumerable`1<CommonTree> commonTree, string defaultText);
    [CompilerGeneratedAttribute]
private static IEnumerable`1<CommonTree> <GrandChildren>b__d(CommonTree _);
}
[ExtensionAttribute]
public static class WebGrease.Css.Extensions.ListExtensions : object {
    [ExtensionAttribute]
[SuppressMessageAttribute("Microsoft.Design", "CA1002:DoNotExposeGenericLists")]
public static ReadOnlyCollection`1<T> AsSafeReadOnly(List`1<T> list);
    [ExtensionAttribute]
public static void ForEach(IEnumerable`1<T> list, Action`1<T> action);
    [ExtensionAttribute]
public static void ForEach(IEnumerable`1<T> list, Action`2<T, int> action);
    [ExtensionAttribute]
public static void ForEach(IList`1<T> list, Action`2<T, bool> action);
    [ExtensionAttribute]
public static ReadOnlyCollection`1<T> ToSafeReadOnlyCollection(IEnumerable`1<T> enumerable);
    [CompilerGeneratedAttribute]
private static bool <ToSafeReadOnlyCollection>b__0(T _);
}
[ExtensionAttribute]
internal static class WebGrease.Css.Extensions.NumberExtensions : object {
    private static Regex NumberWithUnitsRegex;
    private static NumberExtensions();
    [ExtensionAttribute]
internal static string UnaryOperator(Nullable`1<float> number);
    [ExtensionAttribute]
internal static string CssUnitValue(Nullable`1<float> number, string unit);
    [ExtensionAttribute]
internal static float ParseFloat(string text);
    [ExtensionAttribute]
internal static int SignInt(string unaryOperator);
    [ExtensionAttribute]
internal static bool TryParseZeroBasedNumberValue(string numberBasedValue);
}
[ExtensionAttribute]
public static class WebGrease.Css.Extensions.OrderedDictionaryExtensions : object {
    [ExtensionAttribute]
public static void AppendWithOverride(OrderedDictionary dictionary, TItem item, Func`2<TItem, object> key);
}
internal static class WebGrease.Css.ImageAssemblyAnalysis.ImageAssembleConstants : object {
    public static string BackgroundImage;
    public static string BackgroundRepeat;
    public static string BackgroundPosition;
    public static string BackgroundSize;
    public static string WebGreaseBackgroundDpi;
    public static string Background;
    public static string Repeat;
    public static string NoRepeat;
    public static string RepeatX;
    public static string RepeatY;
    public static string Left;
    public static string Right;
    public static string Center;
    public static string Top;
    public static string Bottom;
    public static string Px;
    public static string Rem;
    public static string Em;
    public static string Percentage;
    public static string Subtract;
    public static string SingleSpace;
    public static string UpFolder;
    public static string Zero;
    public static string PxFormat;
    public static string RemFormat;
    public static string EmFormat;
    public static string OriginalfileElementName;
    public static string WidthElementName;
    public static string HeightElementName;
    public static string XCoordinateElementName;
    public static string YCoordinateElementName;
    public static string PositionInSpriteElementName;
    public static string InputElementName;
    public static string OutputElementName;
    public static string FileAttributeName;
    public static string UrlTerm;
}
[SuppressMessageAttribute("Microsoft.Usage", "CA2237:MarkISerializableTypesWithSerializable")]
public class WebGrease.Css.ImageAssemblyAnalysis.ImageAssembleException : Exception {
    [CompilerGeneratedAttribute]
private string <ImageName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SpriteName>k__BackingField;
    public string ImageName { get; private set; }
    public string SpriteName { get; private set; }
    public ImageAssembleException(string message);
    public ImageAssembleException(string message, Exception innerException);
    internal ImageAssembleException(string imageName, string spriteName, string message);
    internal ImageAssembleException(string imageName, string spriteName, string message, Exception innerException);
    protected ImageAssembleException(SerializationInfo info, StreamingContext context);
    [CompilerGeneratedAttribute]
public string get_ImageName();
    [CompilerGeneratedAttribute]
private void set_ImageName(string value);
    [CompilerGeneratedAttribute]
public string get_SpriteName();
    [CompilerGeneratedAttribute]
private void set_SpriteName(string value);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
public class WebGrease.Css.ImageAssemblyAnalysis.ImageAssemblyScanInput : object {
    [CompilerGeneratedAttribute]
private string <BucketName>k__BackingField;
    [CompilerGeneratedAttribute]
private ReadOnlyCollection`1<string> <ImagesInBucket>k__BackingField;
    public string BucketName { get; private set; }
    public ReadOnlyCollection`1<string> ImagesInBucket { get; private set; }
    public ImageAssemblyScanInput(string bucketName, ReadOnlyCollection`1<string> imagesInBucket);
    [CompilerGeneratedAttribute]
public string get_BucketName();
    [CompilerGeneratedAttribute]
private void set_BucketName(string value);
    [CompilerGeneratedAttribute]
public ReadOnlyCollection`1<string> get_ImagesInBucket();
    [CompilerGeneratedAttribute]
private void set_ImagesInBucket(ReadOnlyCollection`1<string> value);
}
internal class WebGrease.Css.ImageAssemblyAnalysis.ImageAssemblyScanOutput : object {
    [CompilerGeneratedAttribute]
private ImageAssemblyScanInput <ImageAssemblyScanInput>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<InputImage> <ImageReferencesToAssemble>k__BackingField;
    internal ImageAssemblyScanInput ImageAssemblyScanInput { get; internal set; }
    internal IList`1<InputImage> ImageReferencesToAssemble { get; private set; }
    [CompilerGeneratedAttribute]
internal ImageAssemblyScanInput get_ImageAssemblyScanInput();
    [CompilerGeneratedAttribute]
internal void set_ImageAssemblyScanInput(ImageAssemblyScanInput value);
    [CompilerGeneratedAttribute]
internal IList`1<InputImage> get_ImageReferencesToAssemble();
    [CompilerGeneratedAttribute]
private void set_ImageReferencesToAssemble(IList`1<InputImage> value);
}
internal class WebGrease.Css.ImageAssemblyAnalysis.LogModel.AssembledImage : object {
    [CompilerGeneratedAttribute]
private Nullable`1<int> <SpriteWidth>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <SpriteHeight>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RelativeOutputFilePath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OutputFilePath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OriginalFilePath>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <X>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Y>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<ImagePosition> <ImagePosition>k__BackingField;
    internal Nullable`1<int> SpriteWidth { get; private set; }
    internal Nullable`1<int> SpriteHeight { get; private set; }
    internal string RelativeOutputFilePath { get; internal set; }
    internal string OutputFilePath { get; internal set; }
    internal string OriginalFilePath { get; internal set; }
    internal Nullable`1<int> X { get; private set; }
    internal Nullable`1<int> Y { get; private set; }
    internal Nullable`1<ImagePosition> ImagePosition { get; private set; }
    internal AssembledImage(XContainer element, Nullable`1<int> spriteWidth, Nullable`1<int> spriteHeight);
    [CompilerGeneratedAttribute]
internal Nullable`1<int> get_SpriteWidth();
    [CompilerGeneratedAttribute]
private void set_SpriteWidth(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
internal Nullable`1<int> get_SpriteHeight();
    [CompilerGeneratedAttribute]
private void set_SpriteHeight(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
internal string get_RelativeOutputFilePath();
    [CompilerGeneratedAttribute]
internal void set_RelativeOutputFilePath(string value);
    [CompilerGeneratedAttribute]
internal string get_OutputFilePath();
    [CompilerGeneratedAttribute]
internal void set_OutputFilePath(string value);
    [CompilerGeneratedAttribute]
internal string get_OriginalFilePath();
    [CompilerGeneratedAttribute]
internal void set_OriginalFilePath(string value);
    [CompilerGeneratedAttribute]
internal Nullable`1<int> get_X();
    [CompilerGeneratedAttribute]
private void set_X(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
internal Nullable`1<int> get_Y();
    [CompilerGeneratedAttribute]
private void set_Y(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
internal Nullable`1<ImagePosition> get_ImagePosition();
    [CompilerGeneratedAttribute]
private void set_ImagePosition(Nullable`1<ImagePosition> value);
    private static int LoadDimension(XElement element);
    private void ParseElement(XElement childElement);
}
public enum WebGrease.Css.ImageAssemblyAnalysis.LogModel.FailureReason : Enum {
    public int value__;
    public static FailureReason IncorrectPosition;
    public static FailureReason BackgroundSizeIsSetToNonDefaultValue;
    public static FailureReason InvalidDpi;
    public static FailureReason BackgroundRepeatInvalid;
    public static FailureReason MultipleUrls;
    public static FailureReason NoRepeat;
    public static FailureReason NoUrl;
    public static FailureReason IgnoreUrl;
    public static FailureReason SpritingIgnore;
}
internal class WebGrease.Css.ImageAssemblyAnalysis.LogModel.ImageAssemblyAnalysis : object {
    [CompilerGeneratedAttribute]
private Nullable`1<FailureReason> <FailureReason>k__BackingField;
    [CompilerGeneratedAttribute]
private AstNode <AstNode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Image>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<ImageType> <ImageType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SpritedImage>k__BackingField;
    internal Nullable`1<FailureReason> FailureReason { get; internal set; }
    internal AstNode AstNode { get; internal set; }
    internal string Image { get; internal set; }
    internal Nullable`1<ImageType> ImageType { get; internal set; }
    internal string SpritedImage { get; internal set; }
    [CompilerGeneratedAttribute]
internal Nullable`1<FailureReason> get_FailureReason();
    [CompilerGeneratedAttribute]
internal void set_FailureReason(Nullable`1<FailureReason> value);
    [CompilerGeneratedAttribute]
internal AstNode get_AstNode();
    [CompilerGeneratedAttribute]
internal void set_AstNode(AstNode value);
    [CompilerGeneratedAttribute]
internal string get_Image();
    [CompilerGeneratedAttribute]
internal void set_Image(string value);
    [CompilerGeneratedAttribute]
internal Nullable`1<ImageType> get_ImageType();
    [CompilerGeneratedAttribute]
internal void set_ImageType(Nullable`1<ImageType> value);
    [CompilerGeneratedAttribute]
internal string get_SpritedImage();
    [CompilerGeneratedAttribute]
internal void set_SpritedImage(string value);
}
public class WebGrease.Css.ImageAssemblyAnalysis.LogModel.ImageAssemblyAnalysisLog : object {
    private static string PxMessage;
    private static string NoUrlMessage;
    private static string NoRepeatMessage;
    private static string IgnoreUrlMessage;
    private static string InvalidDpiMessage;
    private static string SpritingIgnoredMessage;
    private static string MultipleUrlsMessage;
    private static string BackgroundRepeatInvalidMessage;
    private List`1<ImageAssemblyAnalysis> logNodes;
    [CompilerGeneratedAttribute]
private static Func`2<ImageAssemblyAnalysis, bool> CS$<>9__CachedAnonymousMethodDelegate1;
    [CompilerGeneratedAttribute]
private static Func`2<ImageAssemblyAnalysis, bool> CS$<>9__CachedAnonymousMethodDelegatef;
    [CompilerGeneratedAttribute]
private static Func`2<ImageAssemblyAnalysis, bool> CS$<>9__CachedAnonymousMethodDelegate10;
    [CompilerGeneratedAttribute]
private static Func`2<ImageAssemblyAnalysis, bool> CS$<>9__CachedAnonymousMethodDelegate11;
    [CompilerGeneratedAttribute]
private static Func`2<ImageAssemblyAnalysis, bool> CS$<>9__CachedAnonymousMethodDelegate12;
    [CompilerGeneratedAttribute]
private static Func`2<ImageAssemblyAnalysis, bool> CS$<>9__CachedAnonymousMethodDelegate13;
    [CompilerGeneratedAttribute]
private static Func`2<ImageAssemblyAnalysis, Nullable`1<FailureReason>> CS$<>9__CachedAnonymousMethodDelegate14;
    [CompilerGeneratedAttribute]
private static Func`2<ImageAssemblyAnalysis, Nullable`1<FailureReason>> CS$<>9__CachedAnonymousMethodDelegate15;
    [CompilerGeneratedAttribute]
private static Func`2<ImageAssemblyAnalysis, <>f__AnonymousTypec`2<string, Nullable`1<ImageType>>> CS$<>9__CachedAnonymousMethodDelegate16;
    [CompilerGeneratedAttribute]
private static Func`2<IGrouping`2<<>f__AnonymousTypec`2<string, Nullable`1<ImageType>>, ImageAssemblyAnalysis>, XElement> CS$<>9__CachedAnonymousMethodDelegate17;
    internal IEnumerable`1<ImageAssemblyAnalysis> FailedSprites { get; }
    internal IEnumerable`1<ImageAssemblyAnalysis> get_FailedSprites();
    internal static string GetFailureMessage(ImageAssemblyAnalysis analysis);
    internal void Add(ImageAssemblyAnalysis logNode);
    internal void UpdateSpritedImage(ImageType imageType, string imagePath, string spritedImage);
    [SuppressMessageAttribute("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
internal void Save(string path);
    private static XElement LogNodeToXElement(ImageAssemblyAnalysis logNode);
    [CompilerGeneratedAttribute]
private static bool <get_FailedSprites>b__0(ImageAssemblyAnalysis ln);
    [CompilerGeneratedAttribute]
private static bool <Save>b__6(ImageAssemblyAnalysis ln);
    [CompilerGeneratedAttribute]
private static bool <Save>b__7(ImageAssemblyAnalysis ln);
    [CompilerGeneratedAttribute]
private static bool <Save>b__8(ImageAssemblyAnalysis ln);
    [CompilerGeneratedAttribute]
private static bool <Save>b__9(ImageAssemblyAnalysis ln);
    [CompilerGeneratedAttribute]
private static bool <Save>b__a(ImageAssemblyAnalysis ln);
    [CompilerGeneratedAttribute]
private static Nullable`1<FailureReason> <Save>b__b(ImageAssemblyAnalysis i);
    [CompilerGeneratedAttribute]
private static Nullable`1<FailureReason> <Save>b__c(ImageAssemblyAnalysis i);
    [CompilerGeneratedAttribute]
private static <>f__AnonymousTypec`2<string, Nullable`1<ImageType>> <Save>b__d(ImageAssemblyAnalysis ln);
    [CompilerGeneratedAttribute]
private static XElement <Save>b__e(IGrouping`2<<>f__AnonymousTypec`2<string, Nullable`1<ImageType>>, ImageAssemblyAnalysis> logNode);
}
internal class WebGrease.Css.ImageAssemblyAnalysis.LogModel.ImageLog : object {
    [CompilerGeneratedAttribute]
private List`1<AssembledImage> <InputImages>k__BackingField;
    internal List`1<AssembledImage> InputImages { get; private set; }
    internal ImageLog(XDocument imageMapDocument);
    [CompilerGeneratedAttribute]
internal List`1<AssembledImage> get_InputImages();
    [CompilerGeneratedAttribute]
private void set_InputImages(List`1<AssembledImage> value);
    private void ProcessOutputElement(XElement outputElement);
    private void ProcessInputElement(XElement inputElement, Nullable`1<int> spriteWidth, Nullable`1<int> spriteHeight, string outputFilePath);
}
internal class WebGrease.Css.ImageAssemblyAnalysis.PropertyModel.Background : object {
    [CompilerGeneratedAttribute]
private DeclarationNode <DeclarationAstNode>k__BackingField;
    [CompilerGeneratedAttribute]
private BackgroundImage <BackgroundImage>k__BackingField;
    [CompilerGeneratedAttribute]
private BackgroundPosition <BackgroundPosition>k__BackingField;
    [CompilerGeneratedAttribute]
private BackgroundRepeat <BackgroundRepeat>k__BackingField;
    public DeclarationNode DeclarationAstNode { get; private set; }
    internal BackgroundImage BackgroundImage { get; private set; }
    internal BackgroundPosition BackgroundPosition { get; private set; }
    internal BackgroundRepeat BackgroundRepeat { get; private set; }
    internal string Url { get; }
    internal Background(DeclarationNode declarationAstNode, string outputUnit, double outputUnitFactor);
    [CompilerGeneratedAttribute]
public DeclarationNode get_DeclarationAstNode();
    [CompilerGeneratedAttribute]
private void set_DeclarationAstNode(DeclarationNode value);
    [CompilerGeneratedAttribute]
internal BackgroundImage get_BackgroundImage();
    [CompilerGeneratedAttribute]
private void set_BackgroundImage(BackgroundImage value);
    [CompilerGeneratedAttribute]
internal BackgroundPosition get_BackgroundPosition();
    [CompilerGeneratedAttribute]
private void set_BackgroundPosition(BackgroundPosition value);
    [CompilerGeneratedAttribute]
internal BackgroundRepeat get_BackgroundRepeat();
    [CompilerGeneratedAttribute]
private void set_BackgroundRepeat(BackgroundRepeat value);
    internal string get_Url();
    internal DeclarationNode UpdateBackgroundNode(string updatedUrl, Nullable`1<int> updatedX, Nullable`1<int> updatedY, double webGreaseBackgroundDpi);
    [CompilerGeneratedAttribute]
private void <.ctor>b__0(TermWithOperatorNode termWithOperator);
}
internal class WebGrease.Css.ImageAssemblyAnalysis.PropertyModel.BackgroundImage : object {
    internal static string UrlRegEx;
    private static Regex MultipleUrlsRegex;
    private static Regex UrlRegex;
    [CompilerGeneratedAttribute]
private DeclarationNode <DeclarationNode>k__BackingField;
    [CompilerGeneratedAttribute]
private TermNode <UrlTermNode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    public DeclarationNode DeclarationNode { get; private set; }
    internal TermNode UrlTermNode { get; private set; }
    internal string Url { get; private set; }
    internal BackgroundImage(DeclarationNode declarationNode);
    private static BackgroundImage();
    [CompilerGeneratedAttribute]
public DeclarationNode get_DeclarationNode();
    [CompilerGeneratedAttribute]
private void set_DeclarationNode(DeclarationNode value);
    [CompilerGeneratedAttribute]
internal TermNode get_UrlTermNode();
    [CompilerGeneratedAttribute]
private void set_UrlTermNode(TermNode value);
    [CompilerGeneratedAttribute]
internal string get_Url();
    [CompilerGeneratedAttribute]
private void set_Url(string value);
    internal static bool HasMultipleUrls(string text);
    internal static bool TryGetUrl(TermNode termNode, String& url);
    internal bool VerifyBackgroundUrl(AstNode parent, HashSet`1<string> imageReferencesToIgnore, ImageAssemblyAnalysisLog imageAssemblyAnalysisLog, Boolean& shouldIgnore);
    internal void ParseTerm(TermNode termNode);
    internal void ParseTermWithOperator(TermWithOperatorNode termWithOperatorNode);
    internal bool UpdateTermForUrl(TermNode originalTermNode, TermNode& updatedTermNode, string updatedUrl);
    internal DeclarationNode UpdateBackgroundImageNode(string updatedUrl);
}
internal class WebGrease.Css.ImageAssemblyAnalysis.PropertyModel.BackgroundPosition : object {
    private string outputUnit;
    private double outputUnitFactor;
    [CompilerGeneratedAttribute]
private DeclarationNode <DeclarationNode>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<float> <X>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<float> <Y>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<Source> <XSource>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<Source> <YSource>k__BackingField;
    [CompilerGeneratedAttribute]
private TermNode <XTermNode>k__BackingField;
    [CompilerGeneratedAttribute]
private TermNode <YTermNode>k__BackingField;
    public DeclarationNode DeclarationNode { get; private set; }
    internal Nullable`1<float> X { get; private set; }
    internal Nullable`1<float> Y { get; private set; }
    internal Nullable`1<Source> XSource { get; private set; }
    internal Nullable`1<Source> YSource { get; private set; }
    internal TermNode XTermNode { get; private set; }
    internal TermNode YTermNode { get; private set; }
    internal BackgroundPosition(string outputUnit, double outputUnitFactor);
    internal BackgroundPosition(DeclarationNode declarationNode, string outputUnit, double outputUnitFactor);
    [CompilerGeneratedAttribute]
public DeclarationNode get_DeclarationNode();
    [CompilerGeneratedAttribute]
private void set_DeclarationNode(DeclarationNode value);
    [CompilerGeneratedAttribute]
internal Nullable`1<float> get_X();
    [CompilerGeneratedAttribute]
private void set_X(Nullable`1<float> value);
    [CompilerGeneratedAttribute]
internal Nullable`1<float> get_Y();
    [CompilerGeneratedAttribute]
private void set_Y(Nullable`1<float> value);
    [CompilerGeneratedAttribute]
internal Nullable`1<Source> get_XSource();
    [CompilerGeneratedAttribute]
private void set_XSource(Nullable`1<Source> value);
    [CompilerGeneratedAttribute]
internal Nullable`1<Source> get_YSource();
    [CompilerGeneratedAttribute]
private void set_YSource(Nullable`1<Source> value);
    [CompilerGeneratedAttribute]
internal TermNode get_XTermNode();
    [CompilerGeneratedAttribute]
private void set_XTermNode(TermNode value);
    [CompilerGeneratedAttribute]
internal TermNode get_YTermNode();
    [CompilerGeneratedAttribute]
private void set_YTermNode(TermNode value);
    internal void AddingMissingXAndY(Nullable`1<float> updatedX, Nullable`1<float> updatedY, bool isXUpdated, bool isYUpdated, int indexX, int indexY, List`1<TermWithOperatorNode> newTermsWithOperators, double webGreaseBackgroundDpi);
    internal static DeclarationNode CreateNewDeclaration(Nullable`1<float> updatedX, Nullable`1<float> updatedY, double webGreaseBackgroundDpi, string outputUnit, double outputUnitFactor);
    internal bool IsVerticalSpriteCandidate();
    internal bool IsHorizontalRightAligned();
    internal bool IsHorizontalCenterAligned();
    internal ImagePosition GetImagePositionInVerticalSprite();
    internal void ParseTerm(TermNode termNode);
    internal void ParseTermWithOperator(TermWithOperatorNode termWithOperatorNode);
    internal bool UpdateTermForX(TermNode termNode, TermNode& updatedTermNode, Nullable`1<float> updatedX, double webGreaseBackgroundDpi);
    internal bool UpdateTermForY(TermNode termNode, TermNode& updatedTermNode, Nullable`1<float> updatedY, double webGreaseBackgroundDpi);
    internal DeclarationNode UpdateBackgroundPositionNode(Nullable`1<float> updatedX, Nullable`1<float> updatedY, double webGreaseBackgroundDpi);
    private void TrySwapXCoordinate();
    private void AssignX(TermNode termNode, Nullable`1<float> offset, Nullable`1<int> sign, Source source);
    private void AssignY(TermNode termNode, Nullable`1<float> offset, Nullable`1<int> sign, Source source);
    private void AssignXy(TermNode termNode, Nullable`1<float> offset, Nullable`1<int> sign, Source source);
}
internal class WebGrease.Css.ImageAssemblyAnalysis.PropertyModel.BackgroundRepeat : object {
    [CompilerGeneratedAttribute]
private Nullable`1<Repeat> <RepeatValue>k__BackingField;
    internal Nullable`1<Repeat> RepeatValue { get; private set; }
    internal BackgroundRepeat(DeclarationNode declarationNode);
    [CompilerGeneratedAttribute]
internal Nullable`1<Repeat> get_RepeatValue();
    [CompilerGeneratedAttribute]
private void set_RepeatValue(Nullable`1<Repeat> value);
    internal bool VerifyBackgroundNoRepeat();
    internal void ParseTerm(TermNode termNode);
    internal void ParseTermWithOperator(TermWithOperatorNode termWithOperatorNode);
}
internal enum WebGrease.Css.ImageAssemblyAnalysis.PropertyModel.Repeat : Enum {
    public int value__;
    public static Repeat Repeat;
    public static Repeat NoRepeat;
    public static Repeat RepeatX;
    public static Repeat RepeatY;
}
internal enum WebGrease.Css.ImageAssemblyAnalysis.PropertyModel.Source : Enum {
    public int value__;
    public static Source Left;
    public static Source Right;
    public static Source Center;
    public static Source Top;
    public static Source Bottom;
    public static Source Px;
    public static Source Percentage;
    public static Source NoUnits;
    public static Source Unknown;
    public static Source Rem;
    public static Source Em;
}
internal class WebGrease.Css.PrinterFormatter : object {
    private StringBuilder _buffer;
    private int _indentLevel;
    [CompilerGeneratedAttribute]
private bool <PrettyPrint>k__BackingField;
    [CompilerGeneratedAttribute]
private char <IndentCharacter>k__BackingField;
    [CompilerGeneratedAttribute]
private int <IndentSize>k__BackingField;
    public bool PrettyPrint { get; public set; }
    public char IndentCharacter { get; public set; }
    public int IndentSize { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_PrettyPrint();
    [CompilerGeneratedAttribute]
public void set_PrettyPrint(bool value);
    [CompilerGeneratedAttribute]
public char get_IndentCharacter();
    [CompilerGeneratedAttribute]
public void set_IndentCharacter(char value);
    [CompilerGeneratedAttribute]
public int get_IndentSize();
    [CompilerGeneratedAttribute]
public void set_IndentSize(int value);
    public virtual string ToString();
    public void Append(string content);
    public void Append(char content);
    public void AppendLine(char content);
    public void AppendLine();
    public void Remove(int startIndex, int length);
    public int Length();
    public void IncrementIndentLevel();
    public void DecrementIndentLevel();
    public void WriteIndent();
}
public class WebGrease.Css.UnicodeDecoder : object {
    private TextReader _reader;
    private char _currentChar;
    private string _readAhead;
    private UnicodeDecoder(TextReader reader);
    public static string Decode(string text);
    private static int HValue(char ch);
    private static bool IsH(char ch);
    private static bool IsSpace(char ch);
    private string GetUnicode();
    private int GetUnicodeEncodingValue();
    private void NextChar();
    private char PeekChar();
}
public class WebGrease.Css.Visitor.ColorOptimizationVisitor : NodeTransformVisitor {
    private static Regex NumberBasedValue;
    private static Regex ColorGroupCapture;
    private static ColorOptimizationVisitor();
    [SuppressMessageAttribute("Microsoft.Globalization", "CA1308:NormalizeStringsToUppercase")]
public virtual AstNode VisitTermNode(TermNode termNode);
    private static bool TryGetRgb(ExprNode exprNode, Int32& red, Int32& green, Int32& blue);
    private static bool IsThreeNumberArguments(ExprNode exprNode);
    private static bool IsNumberTerm(TermNode termNode);
    private static bool IsCommaNumber(TermWithOperatorNode termWithOperatorNode);
    private static bool TryGetColorFragment(TermNode termNode, Int32& fragment);
}
public class WebGrease.Css.Visitor.ExcludePropertyVisitor : NodeTransformVisitor {
    private static string ExcludedSubstring;
    public virtual AstNode VisitDeclarationNode(DeclarationNode declarationNode);
}
public class WebGrease.Css.Visitor.FloatOptimizationVisitor : NodeTransformVisitor {
    private static Regex NumberBasedValue;
    private static Regex LengthUnits;
    private static FloatOptimizationVisitor();
    public virtual AstNode VisitTermNode(TermNode termNode);
}
public class WebGrease.Css.Visitor.ImageAssemblyScanVisitor : NodeVisitor {
    private bool _ignoreImagesWithNonDefaultBackgroundSize;
    private string outputUnit;
    private double outputUnitFactor;
    private string _cssPath;
    private ImageAssemblyScanOutput _defaultImageAssemblyScanOutput;
    private ImageAssemblyAnalysisLog _imageAssemblyAnalysisLog;
    private IList`1<ImageAssemblyScanOutput> _imageAssemblyScanOutputs;
    private HashSet`1<string> _imageReferencesToIgnore;
    private IDictionary`2<string, string> _availableImageSources;
    private HashSet`1<string> _imagesCriteriaFailedReferences;
    [CompilerGeneratedAttribute]
private IWebGreaseContext <Context>k__BackingField;
    internal IWebGreaseContext Context { get; internal set; }
    internal ImageAssemblyScanOutput DefaultImageAssemblyScanOutput { get; }
    internal IList`1<ImageAssemblyScanOutput> ImageAssemblyScanOutputs { get; }
    public ImageAssemblyAnalysisLog ImageAssemblyAnalysisLog { get; }
    public ImageAssemblyScanVisitor(string cssPath, IEnumerable`1<string> imageReferencesToIgnore, IEnumerable`1<ImageAssemblyScanInput> additionalImageAssemblyBuckets, bool ignoreImagesWithNonDefaultBackgroundSize, string outputUnit, double outputUnitFactor, IDictionary`2<string, string> availableImageSources);
    [CompilerGeneratedAttribute]
internal IWebGreaseContext get_Context();
    [CompilerGeneratedAttribute]
internal void set_Context(IWebGreaseContext value);
    internal ImageAssemblyScanOutput get_DefaultImageAssemblyScanOutput();
    internal IList`1<ImageAssemblyScanOutput> get_ImageAssemblyScanOutputs();
    public ImageAssemblyAnalysisLog get_ImageAssemblyAnalysisLog();
    public virtual AstNode VisitStyleSheetNode(StyleSheetNode styleSheet);
    public virtual AstNode VisitRulesetNode(RulesetNode rulesetNode);
    public virtual AstNode VisitMediaNode(MediaNode mediaNode);
    public virtual AstNode VisitPageNode(PageNode pageNode);
    public virtual AstNode VisitTermWithOperatorNode(TermWithOperatorNode termWithOperatorNode);
    private void VisitBackgroundDeclarationNode(IEnumerable`1<DeclarationNode> declarations, AstNode parent);
    private void AddImageReference(string url, BackgroundPosition backgroundPosition);
    [CompilerGeneratedAttribute]
private void <.ctor>b__1(string imageReferenceToIgnore);
    [CompilerGeneratedAttribute]
private void <VisitStyleSheetNode>b__6(StyleSheetRuleNode styleSheetRuleNode);
    [CompilerGeneratedAttribute]
private void <VisitMediaNode>b__7(RulesetNode rulesetNode);
    [CompilerGeneratedAttribute]
private void <VisitMediaNode>b__8(PageNode pageNode);
    [CompilerGeneratedAttribute]
private void <VisitBackgroundDeclarationNode>b__9(string imagesCriteriaFailedUrl);
}
public class WebGrease.Css.Visitor.ImageAssemblyUpdateVisitor : NodeVisitor {
    private string outputUnit;
    private double outputUnitFactor;
    private string cssPath;
    private IEnumerable`1<AssembledImage> inputImages;
    private double defaultDpi;
    private string destinationDirectory;
    private string prependToDestination;
    private IDictionary`2<string, string> availableSourceImages;
    [CompilerGeneratedAttribute]
private static Func`2<ImageLog, IEnumerable`1<AssembledImage>> CS$<>9__CachedAnonymousMethodDelegate1;
    internal ImageAssemblyUpdateVisitor(string cssPath, IEnumerable`1<ImageLog> imageLogs, double dpi, string outputUnit, double outputUnitFactor, string destinationDirectory, string prependToDestination, IDictionary`2<string, string> availableSourceImages);
    public virtual AstNode VisitStyleSheetNode(StyleSheetNode styleSheet);
    public virtual AstNode VisitRulesetNode(RulesetNode rulesetNode);
    public virtual AstNode VisitMediaNode(MediaNode mediaNode);
    public virtual AstNode VisitPageNode(PageNode pageNode);
    private static void UpdateDeclarations(IList`1<DeclarationNode> declarationNodes, DeclarationNode originalDeclarationNode, DeclarationNode updatedDeclarationNode);
    private static string GetPositionString(Nullable`1<float> value, Nullable`1<Source> source);
    private static DeclarationNode CreateDebugOriginalPositionComment(Nullable`1<float> xPosition, Nullable`1<Source> xSource, Nullable`1<float> yPosition, Nullable`1<Source> ySource);
    private static DeclarationNode CreateDebugSpritePositionComment(Nullable`1<int> xPixels, Nullable`1<int> yPixels);
    private static DeclarationNode CreateDpiComment(double dpi);
    private static DeclarationNode CreateDebugDeclarationComment(string propertyName, string propertyValue);
    private ReadOnlyCollection`1<DeclarationNode> UpdateDeclarations(ReadOnlyCollection`1<DeclarationNode> declarationNodes, AstNode parent);
    private void SetBackgroundSize(List`1<DeclarationNode> updatedDeclarations, DeclarationNode backgroundSizeNode, double dpiFactor, AssembledImage assembledImage);
    private IEnumerable`1<DeclarationNode> CreateBackgroundSizeNode(AssembledImage assembledImage, double dpiFactor);
    private bool TryGetAssembledImage(string parsedImagePath, BackgroundPosition backgroundPosition, AssembledImage& assembledImage);
    [CompilerGeneratedAttribute]
private static IEnumerable`1<AssembledImage> <.ctor>b__0(ImageLog i);
}
public class WebGrease.Css.Visitor.NodeTransformVisitor : NodeVisitor {
    public virtual AstNode VisitStyleSheetNode(StyleSheetNode styleSheet);
    public virtual AstNode VisitImportNode(ImportNode importNode);
    public virtual AstNode VisitRulesetNode(RulesetNode rulesetNode);
    public virtual AstNode VisitMediaNode(MediaNode mediaNode);
    public virtual AstNode VisitPageNode(PageNode pageNode);
    public virtual AstNode VisitDocumentQueryNode(DocumentQueryNode documentQueryNode);
    public virtual AstNode VisitAttribNode(AttribNode attrib);
    public virtual AstNode VisitAttribOperatorAndValueNode(AttribOperatorAndValueNode attribOperatorAndValueNode);
    public virtual AstNode VisitDeclarationNode(DeclarationNode declarationNode);
    public virtual AstNode VisitExprNode(ExprNode exprNode);
    public virtual AstNode VisitFunctionNode(FunctionNode functionNode);
    public virtual AstNode VisitPseudoNode(PseudoNode pseudoNode);
    public virtual AstNode VisitSelectorNode(SelectorNode selectorNode);
    public virtual AstNode VisitTermNode(TermNode termNode);
    public virtual AstNode VisitTermWithOperatorNode(TermWithOperatorNode termWithOperatorNode);
    public virtual AstNode VisitFunctionalPseudoNode(FunctionalPseudoNode functionalPseudoNode);
    public virtual AstNode VisitHashClassAtNameAttribPseudoNegationNode(HashClassAtNameAttribPseudoNegationNode hashClassAtNameAttribPseudoNegationNode);
    public virtual AstNode VisitSelectorNamespacePrefixNode(SelectorNamespacePrefixNode selectorNamespacePrefixNode);
    public virtual AstNode VisitNegationArgNode(NegationArgNode negationArgNode);
    public virtual AstNode VisitNegationNode(NegationNode negationNode);
    public virtual AstNode VisitSelectorExpressionNode(SelectorExpressionNode selectorExpressionNode);
    public virtual AstNode VisitSelectorsGroupNode(SelectorsGroupNode selectorsGroupNode);
    public virtual AstNode VisitSimpleSelectorSequenceNode(SimpleSelectorSequenceNode simpleSelectorSequenceNode);
    public virtual AstNode VisitTypeSelectorNode(TypeSelectorNode typeSelectorNode);
    public virtual AstNode VisitUniversalSelectorNode(UniversalSelectorNode universalSelectorNode);
    public virtual AstNode VisitCombinatorSimpleSelectorSequenceNode(CombinatorSimpleSelectorSequenceNode combinatorSimpleSelectorSequenceNode);
    public virtual AstNode VisitNamespaceNode(NamespaceNode namespaceNode);
    public virtual AstNode VisitMediaQueryNode(MediaQueryNode mediaQueryNode);
    public virtual AstNode VisitMediaExpressionNode(MediaExpressionNode mediaExpressionNode);
    public virtual AstNode VisitKeyFramesNode(KeyFramesNode keyFramesNode);
    public virtual AstNode VisitKeyFramesBlockNode(KeyFramesBlockNode keyFramesBlockNode);
    [CompilerGeneratedAttribute]
private StyleSheetRuleNode <VisitStyleSheetNode>b__0(StyleSheetRuleNode styleSheetRule);
    [CompilerGeneratedAttribute]
private MediaQueryNode <VisitImportNode>b__1(MediaQueryNode mediaQueryNode);
    [CompilerGeneratedAttribute]
private DeclarationNode <VisitRulesetNode>b__2(DeclarationNode declarationNode);
    [CompilerGeneratedAttribute]
private RulesetNode <VisitMediaNode>b__3(RulesetNode ruleset);
    [CompilerGeneratedAttribute]
private PageNode <VisitMediaNode>b__4(PageNode pages);
    [CompilerGeneratedAttribute]
private DeclarationNode <VisitPageNode>b__5(DeclarationNode declaration);
    [CompilerGeneratedAttribute]
private RulesetNode <VisitDocumentQueryNode>b__6(RulesetNode ruleset);
    [CompilerGeneratedAttribute]
private TermWithOperatorNode <VisitExprNode>b__7(TermWithOperatorNode termWithOperatorNode);
    [CompilerGeneratedAttribute]
private CombinatorSimpleSelectorSequenceNode <VisitSelectorNode>b__8(CombinatorSimpleSelectorSequenceNode combinatorSimpleSelectorSequenceNode);
    [CompilerGeneratedAttribute]
private SelectorNode <VisitSelectorsGroupNode>b__9(SelectorNode selectorNode);
    [CompilerGeneratedAttribute]
private HashClassAtNameAttribPseudoNegationNode <VisitSimpleSelectorSequenceNode>b__a(HashClassAtNameAttribPseudoNegationNode hashClassAtNameAttribPseudoNegationNode);
    [CompilerGeneratedAttribute]
private MediaExpressionNode <VisitMediaQueryNode>b__b(MediaExpressionNode mediaExpressionNode);
    [CompilerGeneratedAttribute]
private KeyFramesBlockNode <VisitKeyFramesNode>b__c(KeyFramesBlockNode keyFramesBlockNode);
    [CompilerGeneratedAttribute]
private DeclarationNode <VisitKeyFramesBlockNode>b__d(DeclarationNode declarationNode);
}
public abstract class WebGrease.Css.Visitor.NodeVisitor : object {
    public virtual AstNode VisitStyleSheetNode(StyleSheetNode styleSheet);
    public virtual AstNode VisitImportNode(ImportNode importNode);
    [SuppressMessageAttribute("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
public virtual AstNode VisitRulesetNode(RulesetNode rulesetNode);
    public virtual AstNode VisitMediaNode(MediaNode mediaNode);
    public virtual AstNode VisitPageNode(PageNode pageNode);
    public virtual AstNode VisitAttribNode(AttribNode attrib);
    public virtual AstNode VisitAttribOperatorAndValueNode(AttribOperatorAndValueNode attribOperatorAndValueNode);
    public virtual AstNode VisitDeclarationNode(DeclarationNode declarationNode);
    [SuppressMessageAttribute("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
public virtual AstNode VisitExprNode(ExprNode exprNode);
    public virtual AstNode VisitFunctionNode(FunctionNode functionNode);
    public virtual AstNode VisitPseudoNode(PseudoNode pseudoNode);
    public virtual AstNode VisitSelectorNode(SelectorNode selectorNode);
    public virtual AstNode VisitTermNode(TermNode termNode);
    public virtual AstNode VisitTermWithOperatorNode(TermWithOperatorNode termWithOperatorNode);
    public virtual AstNode VisitFunctionalPseudoNode(FunctionalPseudoNode functionalPseudoNode);
    public virtual AstNode VisitHashClassAtNameAttribPseudoNegationNode(HashClassAtNameAttribPseudoNegationNode hashClassAtNameAttribPseudoNegationNode);
    public virtual AstNode VisitSelectorNamespacePrefixNode(SelectorNamespacePrefixNode selectorNamespacePrefixNode);
    public virtual AstNode VisitNegationArgNode(NegationArgNode negationArgNode);
    public virtual AstNode VisitNegationNode(NegationNode negationNode);
    public virtual AstNode VisitSelectorExpressionNode(SelectorExpressionNode selectorExpressionNode);
    public virtual AstNode VisitSelectorsGroupNode(SelectorsGroupNode selectorsGroupNode);
    public virtual AstNode VisitSimpleSelectorSequenceNode(SimpleSelectorSequenceNode simpleSelectorSequenceNode);
    public virtual AstNode VisitTypeSelectorNode(TypeSelectorNode typeSelectorNode);
    public virtual AstNode VisitUniversalSelectorNode(UniversalSelectorNode universalSelectorNode);
    [SuppressMessageAttribute("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
public virtual AstNode VisitCombinatorSimpleSelectorSequenceNode(CombinatorSimpleSelectorSequenceNode combinatorSimpleSelectorSequenceNode);
    public virtual AstNode VisitNamespaceNode(NamespaceNode namespaceNode);
    public virtual AstNode VisitMediaQueryNode(MediaQueryNode mediaQueryNode);
    public virtual AstNode VisitMediaExpressionNode(MediaExpressionNode mediaExpressionNode);
    public virtual AstNode VisitKeyFramesNode(KeyFramesNode keyFramesNode);
    public virtual AstNode VisitKeyFramesBlockNode(KeyFramesBlockNode keyFramesBlockNode);
    public virtual AstNode VisitDocumentQueryNode(DocumentQueryNode documentQueryNode);
}
internal class WebGrease.Css.Visitor.OptimizationVisitor : NodeVisitor {
    [CompilerGeneratedAttribute]
private bool <ShouldMergeMediaQueries>k__BackingField;
    internal bool ShouldMergeMediaQueries { get; internal set; }
    [CompilerGeneratedAttribute]
internal bool get_ShouldMergeMediaQueries();
    [CompilerGeneratedAttribute]
internal void set_ShouldMergeMediaQueries(bool value);
    public virtual AstNode VisitStyleSheetNode(StyleSheetNode styleSheet);
    private static void OptimizeRulesetNode(RulesetNode currentRuleSet, OrderedDictionary ruleSetMediaPageDictionary);
    private static RulesetNode MergeDeclarations(RulesetNode sourceRuleset, RulesetNode destinationRuleset);
    private static void AddDeclaration(OrderedDictionary uniqueSourceDeclarations, DeclarationNode newDeclaration);
    private static bool HasImportantFlag(DeclarationNode declarationNode);
    private static string GetUniquePropertyKey(DeclarationNode declarationNode);
    private static string GetVendorPrefix(string stringBasedValue);
    private static OrderedDictionary UniqueDeclarations(RulesetNode rulesetNode);
    private static RulesetNode OptimizeRuleset(RulesetNode rulesetNode);
    private OrderedDictionary GetMergedNodeDictionary(IEnumerable`1<StyleSheetRuleNode> styleSheetRuleNodes);
    private void OptimizeMediaQuery(MediaNode mediaNode, OrderedDictionary ruleSetMediaPageDictionary);
}
public class WebGrease.Css.Visitor.PrintVisitor : NodeVisitor {
    private PrinterFormatter _printerFormatter;
    [CompilerGeneratedAttribute]
private static char <IndentCharacter>k__BackingField;
    [CompilerGeneratedAttribute]
private static int <IndentSize>k__BackingField;
    public static char IndentCharacter { get; public set; }
    public static int IndentSize { get; public set; }
    [CompilerGeneratedAttribute]
public static char get_IndentCharacter();
    [CompilerGeneratedAttribute]
public static void set_IndentCharacter(char value);
    [CompilerGeneratedAttribute]
public static int get_IndentSize();
    [CompilerGeneratedAttribute]
public static void set_IndentSize(int value);
    public static string Print(AstNode node, bool prettyPrint);
    public virtual AstNode VisitStyleSheetNode(StyleSheetNode styleSheet);
    public virtual AstNode VisitImportNode(ImportNode importNode);
    public virtual AstNode VisitNamespaceNode(NamespaceNode namespaceNode);
    public virtual AstNode VisitRulesetNode(RulesetNode rulesetNode);
    public virtual AstNode VisitSelectorsGroupNode(SelectorsGroupNode selectorsGroupNode);
    public virtual AstNode VisitSelectorNode(SelectorNode selectorNode);
    public virtual AstNode VisitSimpleSelectorSequenceNode(SimpleSelectorSequenceNode simpleSelectorSequenceNode);
    public virtual AstNode VisitUniversalSelectorNode(UniversalSelectorNode universalSelectorNode);
    public virtual AstNode VisitTypeSelectorNode(TypeSelectorNode typeSelectorNode);
    public virtual AstNode VisitSelectorNamespacePrefixNode(SelectorNamespacePrefixNode selectorNamespacePrefixNode);
    public virtual AstNode VisitHashClassAtNameAttribPseudoNegationNode(HashClassAtNameAttribPseudoNegationNode hashClassAtNameAttribPseudoNegationNode);
    public virtual AstNode VisitAttribNode(AttribNode attrib);
    public virtual AstNode VisitAttribOperatorAndValueNode(AttribOperatorAndValueNode attribOperatorAndValueNode);
    public virtual AstNode VisitPseudoNode(PseudoNode pseudoNode);
    public virtual AstNode VisitNegationNode(NegationNode negationNode);
    public virtual AstNode VisitNegationArgNode(NegationArgNode negationArgNode);
    public virtual AstNode VisitDeclarationNode(DeclarationNode declarationNode);
    public virtual AstNode VisitExprNode(ExprNode exprNode);
    public virtual AstNode VisitTermNode(TermNode termNode);
    public virtual AstNode VisitTermWithOperatorNode(TermWithOperatorNode termWithOperatorNode);
    public virtual AstNode VisitMediaNode(MediaNode mediaNode);
    public virtual AstNode VisitPageNode(PageNode pageNode);
    public virtual AstNode VisitDocumentQueryNode(DocumentQueryNode documentQueryNode);
    public virtual AstNode VisitCombinatorSimpleSelectorSequenceNode(CombinatorSimpleSelectorSequenceNode combinatorSimpleSelectorSequenceNode);
    public virtual AstNode VisitFunctionNode(FunctionNode functionNode);
    public virtual AstNode VisitFunctionalPseudoNode(FunctionalPseudoNode functionalPseudoNode);
    public virtual AstNode VisitSelectorExpressionNode(SelectorExpressionNode selectorExpressionNode);
    public virtual AstNode VisitMediaQueryNode(MediaQueryNode mediaQueryNode);
    public virtual AstNode VisitMediaExpressionNode(MediaExpressionNode mediaExpressionNode);
    public virtual AstNode VisitKeyFramesNode(KeyFramesNode keyFramesNode);
    public virtual AstNode VisitKeyFramesBlockNode(KeyFramesBlockNode keyFramesBlockNode);
    internal string Print(bool prettyPrint, AstNode node);
    [CompilerGeneratedAttribute]
private void <VisitStyleSheetNode>b__0(ImportNode importNode);
    [CompilerGeneratedAttribute]
private void <VisitStyleSheetNode>b__1(NamespaceNode namespaceNode);
    [CompilerGeneratedAttribute]
private void <VisitStyleSheetNode>b__2(StyleSheetRuleNode styleSheetRuleNode);
    [CompilerGeneratedAttribute]
private void <VisitImportNode>b__3(MediaQueryNode mediaQuery, bool last);
    [CompilerGeneratedAttribute]
private void <VisitRulesetNode>b__5(DeclarationNode declaration, bool last);
    [CompilerGeneratedAttribute]
private void <VisitSelectorsGroupNode>b__6(SelectorNode selector, bool last);
    [CompilerGeneratedAttribute]
private void <VisitSelectorNode>b__7(CombinatorSimpleSelectorSequenceNode combinatorSimpleSelectorSequenceNode, bool selectorIndex);
    [CompilerGeneratedAttribute]
private void <VisitSimpleSelectorSequenceNode>b__8(HashClassAtNameAttribPseudoNegationNode hashClassAttribPseudoNegationNode);
    [CompilerGeneratedAttribute]
private void <VisitExprNode>b__9(TermWithOperatorNode termWithOperator);
    [CompilerGeneratedAttribute]
private void <VisitMediaNode>b__a(MediaQueryNode mediaQuery, bool last);
    [CompilerGeneratedAttribute]
private void <VisitPageNode>b__b(DeclarationNode declaration, bool last);
    [CompilerGeneratedAttribute]
private void <VisitMediaQueryNode>b__c(MediaExpressionNode mediaExpression);
    [CompilerGeneratedAttribute]
private void <VisitMediaQueryNode>b__d(MediaExpressionNode mediaExpression, bool last);
    [CompilerGeneratedAttribute]
private void <VisitKeyFramesNode>b__10(KeyFramesBlockNode keyFramesBlockNode);
    [CompilerGeneratedAttribute]
private void <VisitKeyFramesBlockNode>b__11(DeclarationNode declarationNode, bool last);
}
public class WebGrease.Css.Visitor.SelectorValidationOptimizationVisitor : NodeVisitor {
    private HashSet`1<string> selectorsToValidateOrRemove;
    private bool shouldMatchExactly;
    private bool validate;
    public SelectorValidationOptimizationVisitor(HashSet`1<string> selectorsToValidateOrRemove, bool shouldMatchExactly, bool validate);
    public virtual AstNode VisitStyleSheetNode(StyleSheetNode styleSheet);
    public virtual AstNode VisitRulesetNode(RulesetNode rulesetNode);
    public virtual AstNode VisitMediaNode(MediaNode mediaNode);
    [CompilerGeneratedAttribute]
private bool <VisitRulesetNode>b__3(SelectorNode sn);
}
public class WebGrease.Css.Visitor.ValidateLowercaseVisitor : NodeVisitor {
    [CompilerGeneratedAttribute]
private static Action`1<ImportNode> CS$<>9__CachedAnonymousMethodDelegate2;
    [CompilerGeneratedAttribute]
private static Action`1<SelectorNode> CS$<>9__CachedAnonymousMethodDelegate5;
    [CompilerGeneratedAttribute]
private static Action`1<MediaQueryNode> CS$<>9__CachedAnonymousMethodDelegate9;
    public virtual AstNode VisitStyleSheetNode(StyleSheetNode styleSheet);
    public virtual AstNode VisitRulesetNode(RulesetNode rulesetNode);
    public virtual AstNode VisitMediaNode(MediaNode mediaNode);
    public virtual AstNode VisitPageNode(PageNode pageNode);
    public virtual AstNode VisitDeclarationNode(DeclarationNode declarationNode);
    [SuppressMessageAttribute("Microsoft.Globalization", "CA1308:NormalizeStringsToUppercase")]
private static void ValidateForLowerCase(string textToValidate);
    [CompilerGeneratedAttribute]
private static void <VisitStyleSheetNode>b__0(ImportNode importNode);
    [CompilerGeneratedAttribute]
private void <VisitStyleSheetNode>b__1(StyleSheetRuleNode styleSheetRule);
    [CompilerGeneratedAttribute]
private static void <VisitRulesetNode>b__3(SelectorNode selectorNode);
    [CompilerGeneratedAttribute]
private void <VisitRulesetNode>b__4(DeclarationNode declarationNode);
    [CompilerGeneratedAttribute]
private static void <VisitMediaNode>b__7(MediaQueryNode mediaQuery);
    [CompilerGeneratedAttribute]
private void <VisitMediaNode>b__8(RulesetNode rulesetNode);
    [CompilerGeneratedAttribute]
private void <VisitPageNode>b__b(DeclarationNode declarationNode);
}
[SuppressMessageAttribute("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
public class WebGrease.CssMinifier : object {
    [CompilerGeneratedAttribute]
private List`1<string> <Errors>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShouldMinify>k__BackingField;
    [CompilerGeneratedAttribute]
private MinifyCssActivity <CssActivity>k__BackingField;
    [SuppressMessageAttribute("Microsoft.Design", "CA1002:DoNotExposeGenericLists")]
public List`1<string> Errors { get; private set; }
    public bool ShouldMinify { get; public set; }
    private MinifyCssActivity CssActivity { get; private set; }
    public CssMinifier(IWebGreaseContext context);
    [CompilerGeneratedAttribute]
public List`1<string> get_Errors();
    [CompilerGeneratedAttribute]
private void set_Errors(List`1<string> value);
    [CompilerGeneratedAttribute]
public bool get_ShouldMinify();
    [CompilerGeneratedAttribute]
public void set_ShouldMinify(bool value);
    [CompilerGeneratedAttribute]
private MinifyCssActivity get_CssActivity();
    [CompilerGeneratedAttribute]
private void set_CssActivity(MinifyCssActivity value);
    [SuppressMessageAttribute("Microsoft.Design", "CA1031:DoNotCatchGeneralExceptionTypes")]
public string Minify(string cssContent);
}
internal class WebGrease.DelayedLogManager : object {
    private static string MessageFormat;
    private string messagePrefix;
    private IList`1<Tuple`2<string, Action`1<string>>> actions;
    private object flushLock;
    private bool isFlushed;
    [CompilerGeneratedAttribute]
private LogManager <LogManager>k__BackingField;
    [CompilerGeneratedAttribute]
private static Action`1<Tuple`2<string, Action`1<string>>> CS$<>9__CachedAnonymousMethodDelegate1c;
    public LogManager LogManager { get; private set; }
    public DelayedLogManager(LogManager syncLogManager, string messagePrefix);
    [CompilerGeneratedAttribute]
public LogManager get_LogManager();
    [CompilerGeneratedAttribute]
private void set_LogManager(LogManager value);
    public void Flush();
    private void AddTimedAction(string message, Action`1<string> action);
    [CompilerGeneratedAttribute]
private static void <Flush>b__1b(Tuple`2<string, Action`1<string>> a);
}
[ExtensionAttribute]
internal static class WebGrease.Extensions.DictionaryExtensions : object {
    [ExtensionAttribute]
internal static void AddRange(IDictionary`2<TKey, TValue> dictionary, IEnumerable`1<KeyValuePair`2<TKey, TValue>> range);
    [SuppressMessageAttribute("Microsoft.Design", "CA1006:DoNotNestGenericTypesInMemberSignatures")]
[ExtensionAttribute]
internal static void Add(IDictionary`2<TKey, double> dictionary1, IEnumerable`1<KeyValuePair`2<TKey, double>> dictionary2);
    [ExtensionAttribute]
internal static TValue TryGetValue(IDictionary`2<TKey, TValue> dictionary, TKey key);
    [ExtensionAttribute]
[SuppressMessageAttribute("Microsoft.Design", "CA1006:DoNotNestGenericTypesInMemberSignatures")]
internal static void Add(IDictionary`2<TKey, int> dictionary1, IEnumerable`1<KeyValuePair`2<TKey, int>> dictionary2);
    [ExtensionAttribute]
internal static void AddNamedConfig(IDictionary`2<string, TConfig> configs, TConfig config);
    [ExtensionAttribute]
internal static T GetNamedConfig(IDictionary`2<string, T> configDictionary, string configName);
}
[ExtensionAttribute]
public static class WebGrease.Extensions.InputSpecExtensions : object {
    [CompilerGeneratedAttribute]
private static Func`2<InputSpec, bool> CS$<>9__CachedAnonymousMethodDelegate2;
    [CompilerGeneratedAttribute]
private static Func`2<string, string> CS$<>9__CachedAnonymousMethodDelegate6;
    [ExtensionAttribute]
public static IEnumerable`1<string> GetFiles(IEnumerable`1<InputSpec> inputs, string rootPath, LogManager log, bool throwWhenMissingAndNotOptional);
    [ExtensionAttribute]
public static IEnumerable`1<string> GetFiles(InputSpec input, string rootPath, LogManager log, bool throwWhenMissingAndNotOptional);
    [ExtensionAttribute]
internal static void AddInputSpecs(IList`1<InputSpec> inputSpecs, string sourceDirectory, XElement element);
    [CompilerGeneratedAttribute]
private static bool <GetFiles>b__0(InputSpec _);
    [CompilerGeneratedAttribute]
private static string <GetFiles>b__5(string name);
}
[ExtensionAttribute]
internal static class WebGrease.Extensions.JsonExtensions : object {
    private static JsonSerializerSettings DefaultJsonSerializerSettings;
    private static Lazy`1<JsonSerializerSettings> JsonSerializerSettings;
    [CompilerGeneratedAttribute]
private static Func`1<JsonSerializerSettings> CS$<>9__CachedAnonymousMethodDelegate2;
    private static JsonExtensions();
    [ExtensionAttribute]
internal static T FromJson(string json, bool nonPublic);
    [ExtensionAttribute]
internal static string ToJson(object value, bool nonPublic);
    private static JsonSerializerSettings GetJsonSerializationSettings(bool nonPublic);
    [CompilerGeneratedAttribute]
private static JsonSerializerSettings <.cctor>b__1();
}
[ExtensionAttribute]
internal static class WebGrease.Extensions.StringExtensions : object {
    [ExtensionAttribute]
public static string AsNullIfWhiteSpace(string value);
    [ExtensionAttribute]
public static string InvariantFormat(string format, Object[] args);
    [ExtensionAttribute]
public static Nullable`1<TEnum> TryParseToEnum(string value, Nullable`1<TEnum> defaultValue);
    [ExtensionAttribute]
internal static bool IsNullOrWhitespace(string text);
    [ExtensionAttribute]
public static bool TryParseBool(string textToParse);
    [ExtensionAttribute]
internal static int TryParseInt32(string textToParse);
}
[ExtensionAttribute]
public static class WebGrease.Extensions.StringPathExtensions : object {
    [ExtensionAttribute]
public static string EnsureEndSeparator(string directory);
    [ExtensionAttribute]
[SuppressMessageAttribute("Microsoft.Design", "CA1031:DoNotCatchGeneralExceptionTypes")]
internal static string GetFullPathWithLowercase(string originalPath);
    [SuppressMessageAttribute("Microsoft.Design", "CA1031:DoNotCatchGeneralExceptionTypes")]
[ExtensionAttribute]
internal static string MakeAbsoluteTo(string pathToConvert, string pathToConvertFrom);
    [ExtensionAttribute]
internal static string MakeRelativeTo(string pathToConvert, string pathToConvertFrom, Char[] separators);
    [ExtensionAttribute]
internal static string MakeRelativeToDirectory(string absolutePath, string relativeTo);
    [ExtensionAttribute]
[SuppressMessageAttribute("Microsoft.Globalization", "CA1308:NormalizeStringsToUppercase")]
internal static string NormalizeUrl(string url);
}
public interface WebGrease.ICachableWebGreaseSection {
    public abstract virtual bool Execute(Func`2<ICacheSection, bool> cachableSectionAction);
    public abstract virtual ICachableWebGreaseSection RestoreFromCacheAction(Func`2<ICacheSection, bool> action);
    public abstract virtual ICachableWebGreaseSection WhenSkipped(Action`1<ICacheSection> action);
}
public interface WebGrease.ICacheManager {
    public ICacheSection CurrentCacheSection { get; }
    public IDictionary`2<string, ReadOnlyCacheSection> LoadedCacheSections { get; }
    public string RootPath { get; }
    public abstract virtual ICacheSection get_CurrentCacheSection();
    public abstract virtual IDictionary`2<string, ReadOnlyCacheSection> get_LoadedCacheSections();
    public abstract virtual string get_RootPath();
    public abstract virtual ICacheSection BeginSection(string category, ContentItem contentItem, object settings, IFileSet cacheVaryByFileSet);
    public abstract virtual void CleanUp();
    public abstract virtual void EndSection(ICacheSection cacheSection);
    public abstract virtual string GetAbsoluteCacheFilePath(string category, string fileName);
    public abstract virtual void SetContext(IWebGreaseContext newContext);
    public abstract virtual string StoreInCache(string cacheCategory, ContentItem contentItem);
}
public interface WebGrease.ICacheSection {
    public ICacheSection Parent { get; }
    public string UniqueKey { get; }
    public abstract virtual ICacheSection get_Parent();
    public abstract virtual string get_UniqueKey();
    public abstract virtual void VaryBySettings(object settings, bool nonpublic);
    public abstract virtual void VaryByContentItem(ContentItem contentItem);
    public abstract virtual void EndSection();
    public abstract virtual bool CanBeRestoredFromCache();
    public abstract virtual void AddResult(ContentItem contentItem, string id, bool isEndResult);
    public abstract virtual void AddSourceDependency(string file);
    public abstract virtual void AddSourceDependency(string directory, string searchPattern, SearchOption searchOption);
    public abstract virtual void AddSourceDependency(InputSpec inputSpec);
    public abstract virtual void Save();
    public abstract virtual bool CanBeSkipped();
    public abstract virtual ContentItem GetCachedContentItem(string fileCategory);
    public abstract virtual IEnumerable`1<ContentItem> GetCachedContentItems(string fileCategory, bool endResultOnly);
    public abstract virtual T GetCacheData(string id);
    public abstract virtual void SetCacheData(string id, T obj);
    public abstract virtual ContentItem GetCachedContentItem(string fileCategory, string relativeDestinationFile, string relativeHashedDestinationFile, IEnumerable`1<ContentPivot> contentPivots);
}
[SuppressMessageAttribute("Microsoft.Naming", "CA1704")]
internal class WebGrease.ImageAssemble.ColorQuantizer : object {
    internal static Bitmap Quantize(Image image, PixelFormat bitmapPixelFormat);
    [SuppressMessageAttribute("Microsoft.Reliability", "CA2000:Dispose objects before losing scope")]
internal static Bitmap Quantize(Image image, PixelFormat pixelFormat, bool useDither);
    private static byte ChannelAdjustment(byte current, int offset);
}
internal abstract class WebGrease.ImageAssemble.ImageAssembleBase : object {
    private IWebGreaseContext context;
    [CompilerGeneratedAttribute]
private string <AssembleFileName>k__BackingField;
    [CompilerGeneratedAttribute]
private SpritePackingType <PackingType>k__BackingField;
    [CompilerGeneratedAttribute]
private ImageMap <ImageXmlMap>k__BackingField;
    [CompilerGeneratedAttribute]
private int <PaddingBetweenImages>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OptimizerToolCommand>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`2<Bitmap, int> CS$<>9__CachedAnonymousMethodDelegate3;
    [CompilerGeneratedAttribute]
private static Func`2<Bitmap, int> CS$<>9__CachedAnonymousMethodDelegate4;
    [CompilerGeneratedAttribute]
private static Func`2<KeyValuePair`2<InputImage, Bitmap>, int> CS$<>9__CachedAnonymousMethodDelegate5;
    [CompilerGeneratedAttribute]
private static Func`2<Bitmap, int> CS$<>9__CachedAnonymousMethodDelegate9;
    [CompilerGeneratedAttribute]
private static Func`2<Bitmap, int> CS$<>9__CachedAnonymousMethodDelegatea;
    [CompilerGeneratedAttribute]
private static Func`2<KeyValuePair`2<InputImage, Bitmap>, int> CS$<>9__CachedAnonymousMethodDelegateb;
    internal ImageFormat Format { get; }
    internal ImageType Type { get; }
    internal string DefaultExtension { get; }
    internal string AssembleFileName { get; internal set; }
    internal SpritePackingType PackingType { get; internal set; }
    internal ImageMap ImageXmlMap { get; internal set; }
    internal int PaddingBetweenImages { get; internal set; }
    internal string OptimizerToolCommand { get; internal set; }
    public ImageAssembleBase(IWebGreaseContext context);
    internal abstract virtual ImageFormat get_Format();
    internal abstract virtual ImageType get_Type();
    internal abstract virtual string get_DefaultExtension();
    [CompilerGeneratedAttribute]
internal string get_AssembleFileName();
    [CompilerGeneratedAttribute]
internal void set_AssembleFileName(string value);
    [CompilerGeneratedAttribute]
internal SpritePackingType get_PackingType();
    [CompilerGeneratedAttribute]
internal void set_PackingType(SpritePackingType value);
    [CompilerGeneratedAttribute]
internal ImageMap get_ImageXmlMap();
    [CompilerGeneratedAttribute]
internal void set_ImageXmlMap(ImageMap value);
    [CompilerGeneratedAttribute]
internal int get_PaddingBetweenImages();
    [CompilerGeneratedAttribute]
internal void set_PaddingBetweenImages(int value);
    [CompilerGeneratedAttribute]
internal string get_OptimizerToolCommand();
    [CompilerGeneratedAttribute]
internal void set_OptimizerToolCommand(string value);
    internal virtual void Assemble(Dictionary`2<InputImage, Bitmap> inputImages);
    protected virtual void SaveImage(Bitmap newImage);
    protected virtual void PassThroughImage(Bitmap image, InputImage inputImage);
    protected virtual void OptimizeImage();
    protected string HashImage();
    [SuppressMessageAttribute("Microsoft.Reliability", "CA2000:Dispose objects before losing scope")]
protected virtual Bitmap PackHorizontal(Dictionary`2<InputImage, Bitmap> originalBitmaps, bool useLogging, Nullable`1<PixelFormat> pixelFormat);
    [SuppressMessageAttribute("Microsoft.Reliability", "CA2000:Dispose objects before losing scope")]
protected virtual Bitmap PackVertical(Dictionary`2<InputImage, Bitmap> originalBitmaps, bool useLogging, Nullable`1<PixelFormat> pixelFormat);
    [CompilerGeneratedAttribute]
private static int <PackHorizontal>b__0(Bitmap c);
    [CompilerGeneratedAttribute]
private static int <PackHorizontal>b__1(Bitmap c);
    [CompilerGeneratedAttribute]
private static int <PackHorizontal>b__2(KeyValuePair`2<InputImage, Bitmap> entry);
    [CompilerGeneratedAttribute]
private static int <PackVertical>b__6(Bitmap c);
    [CompilerGeneratedAttribute]
private static int <PackVertical>b__7(Bitmap c);
    [CompilerGeneratedAttribute]
private static int <PackVertical>b__8(KeyValuePair`2<InputImage, Bitmap> entry);
}
internal static class WebGrease.ImageAssemble.ImageAssembleGenerator : object {
    internal static int DefaultPadding;
    [CompilerGeneratedAttribute]
private static Func`2<InputImage, string> CS$<>9__CachedAnonymousMethodDelegate1;
    internal static ImageMap AssembleImages(ReadOnlyCollection`1<InputImage> inputImages, SpritePackingType packingType, string assembleFileFolder, string pngOptimizerToolCommand, bool dedup, IWebGreaseContext context, Nullable`1<int> imagePadding, ImageAssemblyAnalysisLog imageAssemblyAnalysisLog, Nullable`1<ImageType> forcedImageType);
    internal static ImageMap AssembleImages(ReadOnlyCollection`1<InputImage> inputImages, SpritePackingType packingType, string assembleFileFolder, string mapFileName, string pngOptimizerToolCommand, bool dedup, IWebGreaseContext context, Nullable`1<int> imagePadding, ImageAssemblyAnalysisLog imageAssemblyAnalysisLog, Nullable`1<ImageType> forcedImageType);
    private static IEnumerable`1<ImageAssembleBase> RegisterAvailableAssemblers(IWebGreaseContext context);
    private static string GenerateAssembleFileName(IEnumerable`1<InputImage> inputImages, string targetFolder);
    private static bool IsPhoto(Bitmap bitmap);
    private static bool IsIndexed(Bitmap bitmap);
    private static bool HasAlpha(Bitmap bitmap);
    private static bool IsIndexable(Bitmap bitmap);
    private static bool IsMultiframe(Bitmap bitmap);
    [SuppressMessageAttribute("Microsoft.Design", "CA1031:DoNotCatchGeneralExceptionTypes")]
internal static Dictionary`2<ImageType, Dictionary`2<InputImage, Bitmap>> SeparateByImageType(ReadOnlyCollection`1<InputImage> inputImages, Nullable`1<ImageType> forcedImageType);
    private static ReadOnlyCollection`1<InputImage> DedupImages(ReadOnlyCollection`1<InputImage> inputImages, IWebGreaseContext context);
    [CompilerGeneratedAttribute]
private static string <GenerateAssembleFileName>b__0(InputImage i);
}
[DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[CompilerGeneratedAttribute]
internal class WebGrease.ImageAssemble.ImageAssembleStrings : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string AdditionalDetailsMessage { get; }
    internal static string BitDepthParsingErrorMessage { get; }
    internal static string DirectoryDoesNotExistMessage { get; }
    internal static string DuplicateInputFilePathsMessage { get; }
    internal static string EightBitPNGCannotbeSpritedMessage { get; }
    internal static string IgnoredFilesMessage { get; }
    internal static string ImageHashNameUpdateFailedMessage { get; }
    internal static string ImageLoadOutofMemoryExceptionMessage { get; }
    internal static string ImagePositionValues { get; }
    internal static string ImageSaveExternalExceptionMessage { get; }
    internal static string InputFilesDuplicateParameterMessage { get; }
    internal static string InputFilesMissingPositionMessage { get; }
    internal static string InputFilesPathAndPositionMessage { get; }
    internal static string InputImageListNoImageMessage { get; }
    internal static string InvalidImagePositionMessage { get; }
    internal static string InvalidInputParameterMessage { get; }
    internal static string InvalidInputParameterValueMessage { get; }
    internal static string InvalidPaddingValueMessage { get; }
    internal static string MissingInputParameterMessage { get; }
    internal static string NoInputFilesMessage { get; }
    internal static string NoInputFileToProcessMessage { get; }
    internal static string NoInputParametersMessage { get; }
    internal static string PNGBitDepthNotSupportedMessage { get; }
    internal static string SingleInputImageCannotBeSpritedMessage { get; }
    internal static string SinglePNGCannotBeSpritedMessage { get; }
    internal static string ToolCommandLineErrorMessage { get; }
    internal static string ToolSuccessfulCompletionMessage { get; }
    internal static string ToolUsageMessage { get; }
    internal static string ValueMissingForInputParameterMessage { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_AdditionalDetailsMessage();
    internal static string get_BitDepthParsingErrorMessage();
    internal static string get_DirectoryDoesNotExistMessage();
    internal static string get_DuplicateInputFilePathsMessage();
    internal static string get_EightBitPNGCannotbeSpritedMessage();
    internal static string get_IgnoredFilesMessage();
    internal static string get_ImageHashNameUpdateFailedMessage();
    internal static string get_ImageLoadOutofMemoryExceptionMessage();
    internal static string get_ImagePositionValues();
    internal static string get_ImageSaveExternalExceptionMessage();
    internal static string get_InputFilesDuplicateParameterMessage();
    internal static string get_InputFilesMissingPositionMessage();
    internal static string get_InputFilesPathAndPositionMessage();
    internal static string get_InputImageListNoImageMessage();
    internal static string get_InvalidImagePositionMessage();
    internal static string get_InvalidInputParameterMessage();
    internal static string get_InvalidInputParameterValueMessage();
    internal static string get_InvalidPaddingValueMessage();
    internal static string get_MissingInputParameterMessage();
    internal static string get_NoInputFilesMessage();
    internal static string get_NoInputFileToProcessMessage();
    internal static string get_NoInputParametersMessage();
    internal static string get_PNGBitDepthNotSupportedMessage();
    internal static string get_SingleInputImageCannotBeSpritedMessage();
    internal static string get_SinglePNGCannotBeSpritedMessage();
    internal static string get_ToolCommandLineErrorMessage();
    internal static string get_ToolSuccessfulCompletionMessage();
    internal static string get_ToolUsageMessage();
    internal static string get_ValueMissingForInputParameterMessage();
}
internal class WebGrease.ImageAssemble.ImageMap : object {
    private static string XmlVersion;
    private static string XmlEncoding;
    private static string RootNode;
    private static string ImageNode;
    private static string OriginalFile;
    private static string GeneratedFile;
    private static string Width;
    private static string Height;
    private static string XPosition;
    private static string YPosition;
    private static string PositionInSprite;
    private static string InputNode;
    private static string OutputNode;
    private static string CommentNode;
    private static string Padding;
    private string mapFileName;
    private XElement root;
    private XDocument xdoc;
    private IList`1<string> spritedFiles;
    private XElement currentOutputNode;
    private XElement notAssembledNode;
    internal XDocument Document { get; }
    internal IList`1<string> SpritedFiles { get; }
    internal ImageMap(string mapFileName);
    internal XDocument get_Document();
    internal IList`1<string> get_SpritedFiles();
    [SuppressMessageAttribute("Microsoft.Globalization", "CA1308")]
internal void AppendToXml(string notAssembledFile, string comment);
    [SuppressMessageAttribute("Microsoft.Globalization", "CA1308")]
internal void AppendToXml(string originalFile, string genFile, int width, int height, int posX, int posY, string comment, bool addOutputNode, Nullable`1<ImagePosition> posSprite);
    internal void AppendPadding(string padding);
    private void SaveXmlMap();
    internal bool UpdateAssembledImageName(string oldName, string newName);
    public void UpdateSize(string file, int width, int height);
    private void UpdateOrSetOutputAttribute(string file, string attributeName, string value);
}
public enum WebGrease.ImageAssemble.ImagePosition : Enum {
    public int value__;
    public static ImagePosition Left;
    public static ImagePosition Right;
    public static ImagePosition Center;
}
internal enum WebGrease.ImageAssemble.ImageType : Enum {
    public int value__;
    public static ImageType NotSupported;
    public static ImageType Photo;
    public static ImageType NonphotoNonindexed;
    public static ImageType NonphotoIndexed;
}
internal class WebGrease.ImageAssemble.InputImage : object {
    private List`1<string> duplicateImagePaths;
    [CompilerGeneratedAttribute]
private string <AbsoluteImagePath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OriginalImagePath>k__BackingField;
    [CompilerGeneratedAttribute]
private ImagePosition <Position>k__BackingField;
    internal string AbsoluteImagePath { get; internal set; }
    internal string OriginalImagePath { get; internal set; }
    internal ImagePosition Position { get; internal set; }
    internal IList`1<string> DuplicateImagePaths { get; }
    internal InputImage(string imagePath);
    [CompilerGeneratedAttribute]
internal string get_AbsoluteImagePath();
    [CompilerGeneratedAttribute]
internal void set_AbsoluteImagePath(string value);
    [CompilerGeneratedAttribute]
internal string get_OriginalImagePath();
    [CompilerGeneratedAttribute]
internal void set_OriginalImagePath(string value);
    [CompilerGeneratedAttribute]
internal ImagePosition get_Position();
    [CompilerGeneratedAttribute]
internal void set_Position(ImagePosition value);
    internal IList`1<string> get_DuplicateImagePaths();
}
[SuppressMessageAttribute("Microsoft.Naming", "CA1704")]
internal class WebGrease.ImageAssemble.NonphotoIndexedAssemble : ImageAssembleBase {
    internal ImageFormat Format { get; }
    internal ImageType Type { get; }
    internal string DefaultExtension { get; }
    public NonphotoIndexedAssemble(IWebGreaseContext context);
    internal virtual ImageFormat get_Format();
    internal virtual ImageType get_Type();
    internal virtual string get_DefaultExtension();
    [SuppressMessageAttribute("Microsoft.Security", "CA2122:DoNotIndirectlyExposeMethodsWithLinkDemands")]
protected virtual void SaveImage(Bitmap newImage);
    protected virtual void PassThroughImage(Bitmap image, InputImage inputImage);
}
[SuppressMessageAttribute("Microsoft.Naming", "CA1704")]
internal class WebGrease.ImageAssemble.NonphotoNonindexedAssemble : ImageAssembleBase {
    internal ImageFormat Format { get; }
    internal ImageType Type { get; }
    internal string DefaultExtension { get; }
    public NonphotoNonindexedAssemble(IWebGreaseContext context);
    internal virtual ImageFormat get_Format();
    internal virtual ImageType get_Type();
    internal virtual string get_DefaultExtension();
    [SuppressMessageAttribute("Microsoft.Security", "CA2122:DoNotIndirectlyExposeMethodsWithLinkDemands")]
protected virtual void SaveImage(Bitmap newImage);
    protected virtual void PassThroughImage(Bitmap image, InputImage inputImage);
}
internal class WebGrease.ImageAssemble.NotSupportedAssemble : ImageAssembleBase {
    internal ImageFormat Format { get; }
    internal ImageType Type { get; }
    internal string DefaultExtension { get; }
    public NotSupportedAssemble(IWebGreaseContext context);
    internal virtual ImageFormat get_Format();
    internal virtual ImageType get_Type();
    internal virtual string get_DefaultExtension();
    internal virtual void Assemble(Dictionary`2<InputImage, Bitmap> inputImages);
}
internal class WebGrease.ImageAssemble.PhotoAssemble : ImageAssembleBase {
    private static long DefaultJpegQuality;
    [CompilerGeneratedAttribute]
private static Func`2<ImageCodecInfo, bool> CS$<>9__CachedAnonymousMethodDelegate1;
    internal ImageFormat Format { get; }
    internal string DefaultExtension { get; }
    internal ImageType Type { get; }
    public PhotoAssemble(IWebGreaseContext context);
    internal virtual ImageFormat get_Format();
    internal virtual string get_DefaultExtension();
    internal virtual ImageType get_Type();
    protected virtual void SaveImage(Bitmap newImage);
    [CompilerGeneratedAttribute]
private static bool <SaveImage>b__0(ImageCodecInfo e);
}
internal enum WebGrease.ImageAssemble.SpritePackingType : Enum {
    public int value__;
    public static SpritePackingType Vertical;
    public static SpritePackingType Horizontal;
}
public interface WebGrease.ITimeMeasure {
    public abstract virtual TimeMeasureResult[] GetResults();
    [SuppressMessageAttribute("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
public abstract virtual void End(bool isGroup, String[] idParts);
    public abstract virtual void Start(bool isGroup, String[] idParts);
    public abstract virtual void WriteResults(string filePathWithoutExtension, string title, DateTimeOffset utcStart);
}
public interface WebGrease.IWebGreaseContext {
    public ICacheManager Cache { get; }
    public WebGreaseConfiguration Configuration { get; }
    public LogManager Log { get; }
    public ITimeMeasure Measure { get; }
    public PreprocessingManager Preprocessing { get; }
    public DateTimeOffset SessionStartTime { get; }
    public abstract virtual ICacheManager get_Cache();
    public abstract virtual WebGreaseConfiguration get_Configuration();
    public abstract virtual LogManager get_Log();
    public abstract virtual ITimeMeasure get_Measure();
    public abstract virtual PreprocessingManager get_Preprocessing();
    public abstract virtual DateTimeOffset get_SessionStartTime();
    public abstract virtual void CleanCache(LogManager logManager);
    public abstract virtual void CleanDestination();
    public abstract virtual IDictionary`2<string, string> GetAvailableFiles(string rootDirectory, IEnumerable`1<string> directories, IEnumerable`1<string> extensions, FileTypes fileType);
    public abstract virtual string GetValueHash(string value);
    public abstract virtual string GetContentItemHash(ContentItem contentItem);
    public abstract virtual string GetFileHash(string filePath);
    public abstract virtual string MakeRelativeToApplicationRoot(string absolutePath);
    public abstract virtual string GetWorkingSourceDirectory(string relativePath);
    public abstract virtual void Touch(string filePath);
    public abstract virtual IWebGreaseSection SectionedAction(String[] idParts);
    public abstract virtual IWebGreaseSection SectionedActionGroup(String[] idParts);
    public abstract virtual bool TemporaryIgnore(IFileSet fileSet, ContentItem contentItem);
    public abstract virtual bool TemporaryIgnore(ContentPivot contentPivot);
    public abstract virtual string EnsureErrorFileOnDisk(string sourceFile, ContentItem sourceContentItem);
}
public interface WebGrease.IWebGreaseSection {
    public abstract virtual void Execute(Action action);
    public abstract virtual T Execute(Func`1<T> action);
    public abstract virtual ICachableWebGreaseSection MakeCachable(object varBySettings, bool isSkipable);
    public abstract virtual ICachableWebGreaseSection MakeCachable(ContentItem varByContentItem, object varBySettings, bool isSkipable);
    public abstract virtual ICachableWebGreaseSection MakeCachable(IFileSet varByFileSet, object varBySettings, bool isSkipable);
}
public class WebGrease.LogManager : object {
    private Action`2<string, MessageImportance> information;
    private LogExtendedError extendedWarning;
    private Action`1<string> warning;
    private LogError error;
    private Action`1<string> errorMessage;
    private LogExtendedError extendedError;
    private EventHandler ErrorOccurred;
    [CompilerGeneratedAttribute]
private bool <TreatWarningsAsErrors>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasExtendedErrorHandler>k__BackingField;
    public bool TreatWarningsAsErrors { get; public set; }
    public bool HasExtendedErrorHandler { get; public set; }
    public LogManager(Action`2<string, MessageImportance> logInformation, Action`1<string> logWarning, LogExtendedError logExtendedWarning, Action`1<string> logErrorMessage, LogError logError, LogExtendedError logExtendedError, Nullable`1<bool> treatWarningsAsErrors);
    public void add_ErrorOccurred(EventHandler value);
    public void remove_ErrorOccurred(EventHandler value);
    [CompilerGeneratedAttribute]
public bool get_TreatWarningsAsErrors();
    [CompilerGeneratedAttribute]
public void set_TreatWarningsAsErrors(bool value);
    [CompilerGeneratedAttribute]
public bool get_HasExtendedErrorHandler();
    [CompilerGeneratedAttribute]
public void set_HasExtendedErrorHandler(bool value);
    public void Information(string message, MessageImportance messageImportance);
    public void Warning(string message);
    public void Warning(string subcategory, string errorCode, string helpKeyword, string file, Nullable`1<int> lineNumber, Nullable`1<int> columnNumber, Nullable`1<int> endLineNumber, Nullable`1<int> endColumnNumber, string message);
    public void Error(string message);
    public void Error(Exception exception, string customMessage, string file);
    public void Error(string subcategory, string errorCode, string helpKeyword, string file, Nullable`1<int> lineNumber, Nullable`1<int> columnNumber, Nullable`1<int> endLineNumber, Nullable`1<int> endColumnNumber, string message);
    private void ErrorHasOccurred();
}
public enum WebGrease.MessageImportance : Enum {
    public int value__;
    public static MessageImportance Low;
    public static MessageImportance Normal;
    public static MessageImportance High;
}
internal class WebGrease.NullCacheManager : object {
    internal static ICacheSection EmptyCacheSection;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, ReadOnlyCacheSection> <LoadedCacheSections>k__BackingField;
    public ICacheSection CurrentCacheSection { get; }
    [SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
public IDictionary`2<string, ReadOnlyCacheSection> LoadedCacheSections { get; private set; }
    public string RootPath { get; }
    private static NullCacheManager();
    public sealed virtual ICacheSection get_CurrentCacheSection();
    [CompilerGeneratedAttribute]
public sealed virtual IDictionary`2<string, ReadOnlyCacheSection> get_LoadedCacheSections();
    [CompilerGeneratedAttribute]
private void set_LoadedCacheSections(IDictionary`2<string, ReadOnlyCacheSection> value);
    public sealed virtual string get_RootPath();
    public sealed virtual ICacheSection BeginSection(string category, ContentItem contentItem, object settings, IFileSet cacheVaryByFileSet);
    public sealed virtual void CleanUp();
    public sealed virtual void EndSection(ICacheSection cacheSection);
    public sealed virtual string GetAbsoluteCacheFilePath(string category, string fileName);
    public sealed virtual void SetContext(IWebGreaseContext newContext);
    public sealed virtual string StoreInCache(string cacheCategory, ContentItem contentItem);
}
public class WebGrease.NullCacheSection : object {
    internal static IEnumerable`1<CacheResult> EmptyCacheResults;
    private static IEnumerable`1<ContentItem> EmptyContentItems;
    [CompilerGeneratedAttribute]
private string <UniqueKey>k__BackingField;
    [SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
public ICacheSection Parent { get; }
    public string UniqueKey { get; private set; }
    private static NullCacheSection();
    public sealed virtual ICacheSection get_Parent();
    [CompilerGeneratedAttribute]
public sealed virtual string get_UniqueKey();
    [CompilerGeneratedAttribute]
private void set_UniqueKey(string value);
    public sealed virtual void AddResult(ContentItem contentItem, string id, bool isEndResult);
    public sealed virtual void AddSourceDependency(string file);
    public sealed virtual void AddSourceDependency(string directory, string searchPattern, SearchOption searchOption);
    public sealed virtual void AddSourceDependency(InputSpec inputSpec);
    public sealed virtual bool CanBeRestoredFromCache();
    public sealed virtual bool CanBeSkipped();
    public sealed virtual void EndSection();
    public sealed virtual ContentItem GetCachedContentItem(string fileCategory);
    public sealed virtual IEnumerable`1<ContentItem> GetCachedContentItems(string fileCategory, bool endResultOnly);
    public sealed virtual T GetCacheData(string id);
    public sealed virtual void SetCacheData(string id, T obj);
    public sealed virtual ContentItem GetCachedContentItem(string fileCategory, string relativeDestinationFile, string relativeHashedDestinationFile, IEnumerable`1<ContentPivot> contentPivots);
    public sealed virtual void VaryByContentItem(ContentItem contentItem);
    public sealed virtual void Save();
    public sealed virtual void VaryBySettings(object settings, bool nonpublic);
}
internal class WebGrease.NullTimeMeasure : object {
    private TimeMeasureResult[] emptyResult;
    public sealed virtual TimeMeasureResult[] GetResults();
    public sealed virtual void End(bool isGroup, String[] idParts);
    public sealed virtual void Start(bool isGroup, String[] idParts);
    public sealed virtual void WriteResults(string filePathWithoutExtension, string title, DateTimeOffset utcStart);
}
public interface WebGrease.Preprocessing.IPreprocessingEngine {
    public string Name { get; }
    public abstract virtual string get_Name();
    public abstract virtual bool CanProcess(ContentItem contentItem, PreprocessingConfig preprocessConfig);
    public abstract virtual ContentItem Process(ContentItem contentItem, PreprocessingConfig preprocessingConfig, bool minimalOutput);
    public abstract virtual void SetContext(IWebGreaseContext webGreaseContext);
}
public class WebGrease.Preprocessing.PreprocessingException : Exception {
    public PreprocessingException(string message);
    public PreprocessingException(string message, Exception inner);
    protected PreprocessingException(SerializationInfo info, StreamingContext context);
}
public class WebGrease.Preprocessing.PreprocessingManager : object {
    [ImportManyAttribute("WebGrease.Preprocessing.IPreprocessingEngine")]
private IList`1<IPreprocessingEngine> registeredPreprocessingEngines;
    private IWebGreaseContext context;
    [CompilerGeneratedAttribute]
private static Func`2<IPreprocessingEngine, string> CS$<>9__CachedAnonymousMethodDelegate3;
    internal PreprocessingManager(WebGreaseConfiguration webGreaseConfiguration, LogManager logManager, ITimeMeasure timeMeasure);
    internal void SetContext(WebGreaseContext webGreaseContext);
    internal ContentItem Process(ContentItem contentItem, PreprocessingConfig preprocessConfig, bool minimalOutput);
    internal IPreprocessingEngine[] GetProcessors(ContentItem contentItem, PreprocessingConfig preprocessConfig);
    private void Initialize(string pluginPath, LogManager logManager, ITimeMeasure timeMeasure);
    [CompilerGeneratedAttribute]
private static string <Process>b__2(IPreprocessingEngine pptu);
    [CompilerGeneratedAttribute]
private IEnumerable`1<IPreprocessingEngine> <GetProcessors>b__6(string ppe);
}
public class WebGrease.ReadOnlyCacheSection : object {
    private static object LoadLock;
    private string absolutePath;
    private IWebGreaseContext context;
    private IEnumerable`1<CacheSourceDependency> sourceDependencies;
    private IEnumerable`1<CacheResult> cacheResults;
    private IEnumerable`1<string> childCacheSectionFiles;
    private IEnumerable`1<ReadOnlyCacheSection> childCacheSections;
    private bool disposed;
    private int referenceCount;
    [CompilerGeneratedAttribute]
private static Func`2<JToken, string> CS$<>9__CachedAnonymousMethodDelegate1;
    [CompilerGeneratedAttribute]
private static Func`2<ReadOnlyCacheSection, bool> CS$<>9__CachedAnonymousMethodDelegatea;
    [CompilerGeneratedAttribute]
private static Action`1<ReadOnlyCacheSection> CS$<>9__CachedAnonymousMethodDelegateb;
    [CompilerGeneratedAttribute]
private static Func`2<CacheResult, bool> CS$<>9__CachedAnonymousMethodDelegated;
    [CompilerGeneratedAttribute]
private static Func`2<CacheResult, bool> CS$<>9__CachedAnonymousMethodDelegate12;
    [CompilerGeneratedAttribute]
private static Action`1<ReadOnlyCacheSection> CS$<>9__CachedAnonymousMethodDelegate15;
    [CompilerGeneratedAttribute]
private static Func`2<ReadOnlyCacheSection, IEnumerable`1<ReadOnlyCacheSection>> CS$<>9__CachedAnonymousMethodDelegate1a;
    private IEnumerable`1<ReadOnlyCacheSection> ChildCacheSections { get; }
    private ReadOnlyCacheSection(string jsonString, IWebGreaseContext context);
    private static ReadOnlyCacheSection();
    private IEnumerable`1<ReadOnlyCacheSection> get_ChildCacheSections();
    internal static ReadOnlyCacheSection Load(string fullPath, IWebGreaseContext context);
    internal IEnumerable`1<CacheResult> GetCacheResults(string fileCategory, bool endResultOnly);
    internal void Dispose();
    internal bool CanBeRestoredFromCache();
    internal bool CanBeSkipped();
    private static bool Unload(IWebGreaseContext context, string fullPath);
    private static bool HasCachedEndResultThatChanged(IWebGreaseContext context, CacheResult r);
    private void Touch();
    private bool HasChangedSourceDependencies();
    private IEnumerable`1<ReadOnlyCacheSection> SafeAllRecursiveChildSections();
    [CompilerGeneratedAttribute]
private static string <.ctor>b__0(JToken f);
    [CompilerGeneratedAttribute]
private ReadOnlyCacheSection <get_ChildCacheSections>b__2(string childCacheSectionFile);
    [CompilerGeneratedAttribute]
private static bool <Dispose>b__8(ReadOnlyCacheSection ccs);
    [CompilerGeneratedAttribute]
private static void <Dispose>b__9(ReadOnlyCacheSection ccs);
    [CompilerGeneratedAttribute]
private static bool <CanBeRestoredFromCache>b__c(CacheResult cr);
    [CompilerGeneratedAttribute]
private static bool <CanBeSkipped>b__e(CacheResult cr);
    [CompilerGeneratedAttribute]
private bool <CanBeSkipped>b__f(CacheResult cr);
    [CompilerGeneratedAttribute]
private bool <CanBeSkipped>b__10(CacheSourceDependency sd);
    [CompilerGeneratedAttribute]
private static void <CanBeSkipped>b__11(ReadOnlyCacheSection scc);
    [CompilerGeneratedAttribute]
private void <Touch>b__17(CacheResult cr);
    [CompilerGeneratedAttribute]
private bool <HasChangedSourceDependencies>b__18(CacheSourceDependency sd);
    [CompilerGeneratedAttribute]
private static IEnumerable`1<ReadOnlyCacheSection> <SafeAllRecursiveChildSections>b__19(ReadOnlyCacheSection css);
}
[DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[CompilerGeneratedAttribute]
internal class WebGrease.ResourceStrings : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string BundlingFiles { get; }
    internal static string ConfigurationFileParseError { get; }
    internal static string DuplicateFoundFormat { get; }
    internal static string ErrorsInFileFormat { get; }
    internal static string FileHasheActivityCouldNotLocateDirectory { get; }
    internal static string FileHasherActivityErrorOccurred { get; }
    internal static string GeneralErrorMessage { get; }
    internal static string InvalidBundlingOutputFile { get; }
    internal static string MinifyingCssFilesAndSpritingBackgroundImages { get; }
    internal static string MoreThan256Colours { get; }
    internal static string MultipleSwitches { get; }
    internal static string NoFilesProcessed { get; }
    internal static string PreprocessingCouldNotFindThePluginPath { get; }
    internal static string PreprocessingEngineFound { get; }
    internal static string PreprocessingInitializeEnd { get; }
    internal static string PreprocessingInitializeStart { get; }
    internal static string PreprocessingLoadingError { get; }
    internal static string PreprocessingPluginPath { get; }
    internal static string ResolvingTokensAndPerformingLocalization { get; }
    internal static string ResourceResolverDuplicateKeyExceptionMessage { get; }
    internal static string SemiTransparencyFound { get; }
    internal static string ThereWereErrorsWhileBundlingFiles { get; }
    internal static string ThereWereErrorsWhileMinifyingTheCssFiles { get; }
    internal static string Usage { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_BundlingFiles();
    internal static string get_ConfigurationFileParseError();
    internal static string get_DuplicateFoundFormat();
    internal static string get_ErrorsInFileFormat();
    internal static string get_FileHasheActivityCouldNotLocateDirectory();
    internal static string get_FileHasherActivityErrorOccurred();
    internal static string get_GeneralErrorMessage();
    internal static string get_InvalidBundlingOutputFile();
    internal static string get_MinifyingCssFilesAndSpritingBackgroundImages();
    internal static string get_MoreThan256Colours();
    internal static string get_MultipleSwitches();
    internal static string get_NoFilesProcessed();
    internal static string get_PreprocessingCouldNotFindThePluginPath();
    internal static string get_PreprocessingEngineFound();
    internal static string get_PreprocessingInitializeEnd();
    internal static string get_PreprocessingInitializeStart();
    internal static string get_PreprocessingLoadingError();
    internal static string get_PreprocessingPluginPath();
    internal static string get_ResolvingTokensAndPerformingLocalization();
    internal static string get_ResourceResolverDuplicateKeyExceptionMessage();
    internal static string get_SemiTransparencyFound();
    internal static string get_ThereWereErrorsWhileBundlingFiles();
    internal static string get_ThereWereErrorsWhileMinifyingTheCssFiles();
    internal static string get_Usage();
}
public static class WebGrease.SectionIdParts : object {
    public static string AssemblerActivity;
    public static string Assembly;
    public static string BundleActivity;
    public static string Css;
    public static string ConfigurationFile;
    public static string WebGreaseBuildTask;
    public static string WebGreaseBuildTaskSession;
    public static string CssFileSet;
    public static string CssLocalizationActivity;
    public static string EverythingActivity;
    public static string FileHasherActivity;
    public static string ContentHash;
    public static string ImageHash;
    public static string Initialize;
    public static string Js;
    public static string JsFileSet;
    public static string JSLocalizationActivity;
    public static string MinifyCssActivity;
    public static string MinifyJsActivity;
    public static string Optimize;
    public static string Parse;
    public static string Preprocessing;
    public static string PrintCss;
    public static string Process;
    public static string ResourcesResolutionActivity;
    public static string Spriting;
    public static string Validate;
}
internal static class WebGrease.Strings : object {
    internal static string Css;
    internal static string CssFilter;
    internal static string JsFilter;
    internal static string JS;
    internal static string Px;
    internal static string ScanLogExtension;
    internal static string ResxExtension;
    internal static string Semicolon;
    internal static string DefaultLocale;
    internal static string DefaultResx;
    internal static string GlobalsToIgnoreArg;
    internal static string DefaultGlobalsToIgnore;
    internal static string DefaultMinifyArgs;
    internal static string DefaultAnalyzeArgs;
    internal static string CssLocalizedOutput;
    internal static string JsLocalizedOutput;
    internal static string ImagesLogFile;
    internal static string CssLogFile;
    internal static string JsLogFile;
    internal static Char[] FileFilterSeparator;
    internal static List`1<string> DefaultImageExtensions;
    private static Char[] SemicolonSeparatorField;
    internal static Char[] SemicolonSeparator { get; }
    private static Strings();
    internal static Char[] get_SemicolonSeparator();
}
public class WebGrease.TemporaryOverrides : object {
    private List`1<string> locales;
    private List`1<string> themes;
    private List`1<string> outputs;
    private List`1<string> outputExtensions;
    private string uniqueKey;
    [CompilerGeneratedAttribute]
private bool <SkipAll>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`2<XElement, string> CS$<>9__CachedAnonymousMethodDelegate4;
    [CompilerGeneratedAttribute]
private static Func`2<string, bool> CS$<>9__CachedAnonymousMethodDelegate5;
    [CompilerGeneratedAttribute]
private static Func`2<string, string> CS$<>9__CachedAnonymousMethodDelegate6;
    [CompilerGeneratedAttribute]
private static Func`2<XAttribute, Nullable`1<bool>> CS$<>9__CachedAnonymousMethodDelegate16;
    public bool SkipAll { get; public set; }
    public string UniqueKey { get; }
    [CompilerGeneratedAttribute]
public bool get_SkipAll();
    [CompilerGeneratedAttribute]
public void set_SkipAll(bool value);
    public string get_UniqueKey();
    public static TemporaryOverrides Create(string overrideFile);
    public bool ShouldIgnore(ContentItem contentItem);
    public bool ShouldIgnore(ContentPivot contentPivot);
    public bool ShouldIgnore(IFileSet fileSet);
    private static IEnumerable`1<string> GetItems(string items);
    private static IEnumerable`1<string> GetElementItems(IEnumerable`1<XElement> elements, string elementName);
    private bool ShouldIgnoreOutputs(IFileSet fileSet);
    private bool ShouldIgnoreOutputExtensions(IFileSet fileSet);
    private bool ShouldIgnoreTheme(string themeToIgnore);
    private bool ShouldIgnoreLocale(string localeToIgnore);
    private void LoadFromFile(string overrideFile);
    [CompilerGeneratedAttribute]
private bool <ShouldIgnore>b__0(ContentPivot cp);
    [CompilerGeneratedAttribute]
private static string <GetElementItems>b__1(XElement e);
    [CompilerGeneratedAttribute]
private static bool <GetElementItems>b__2(string i);
    [CompilerGeneratedAttribute]
private static string <GetElementItems>b__3(string i);
    [CompilerGeneratedAttribute]
private static Nullable`1<bool> <LoadFromFile>b__15(XAttribute a);
}
public class WebGrease.TimeMeasure : object {
    private List`1<IDictionary`2<string, int>> measurementCounts;
    private List`1<IDictionary`2<string, double>> measurements;
    private IList`1<TimeMeasureItem> timers;
    [CompilerGeneratedAttribute]
private static Func`2<KeyValuePair`2<string, double>, double> CS$<>9__CachedAnonymousMethodDelegate3;
    [CompilerGeneratedAttribute]
private static Func`2<KeyValuePair`2<FileTypes, TimeMeasureResult[]>, double> CS$<>9__CachedAnonymousMethodDelegatec;
    [CompilerGeneratedAttribute]
private static Func`2<KeyValuePair`2<FileTypes, TimeMeasureResult[]>, double> CS$<>9__CachedAnonymousMethodDelegated;
    [CompilerGeneratedAttribute]
private static Func`2<TimeMeasureResult, string> CS$<>9__CachedAnonymousMethodDelegatee;
    [CompilerGeneratedAttribute]
private static Func`2<TimeMeasureResult, double> CS$<>9__CachedAnonymousMethodDelegatef;
    [CompilerGeneratedAttribute]
private static Func`2<TimeMeasureResult, double> CS$<>9__CachedAnonymousMethodDelegate10;
    [CompilerGeneratedAttribute]
private static Func`2<TimeMeasureResult, string> CS$<>9__CachedAnonymousMethodDelegate12;
    public sealed virtual TimeMeasureResult[] GetResults();
    public sealed virtual void Start(bool isGroup, String[] idParts);
    public sealed virtual void End(bool isGroup, String[] idParts);
    public void BeginGroup();
    public void EndGroup();
    public sealed virtual void WriteResults(string filePathWithoutExtension, string title, DateTimeOffset utcStart);
    internal static void WriteResults(string filePathWithoutExtension, IDictionary`2<FileTypes, TimeMeasureResult[]> results, string title, DateTimeOffset startTime, string activityName);
    private static string GetMeasureTable(string title, IEnumerable`1<TimeMeasureResult> measureTotal);
    private void AddToResult(TimeMeasureItem timer);
    private void PauseLastTimer();
    private void ResumeLastTimer();
    private void StopTimer(TimeMeasureItem timer);
    [CompilerGeneratedAttribute]
private static double <GetResults>b__1(KeyValuePair`2<string, double> m);
    [CompilerGeneratedAttribute]
private TimeMeasureResult <GetResults>b__2(KeyValuePair`2<string, double> m);
    [CompilerGeneratedAttribute]
private static double <WriteResults>b__7(KeyValuePair`2<FileTypes, TimeMeasureResult[]> r);
    [CompilerGeneratedAttribute]
private static double <WriteResults>b__9(KeyValuePair`2<FileTypes, TimeMeasureResult[]> r);
    [CompilerGeneratedAttribute]
private static string <WriteResults>b__b(TimeMeasureResult tm);
    [CompilerGeneratedAttribute]
private static double <WriteResults>b__8(TimeMeasureResult v);
    [CompilerGeneratedAttribute]
private static double <WriteResults>b__a(TimeMeasureResult v);
    [CompilerGeneratedAttribute]
private static string <GetMeasureTable>b__11(TimeMeasureResult tm);
}
[ExtensionAttribute]
public static class WebGrease.TimeMeasureExtensions : object {
    private static Object[] HeaderValues;
    [CompilerGeneratedAttribute]
private static Func`2<TimeMeasureResult, double> CS$<>9__CachedAnonymousMethodDelegate2;
    [CompilerGeneratedAttribute]
private static Func`2<TimeMeasureResult, double> CS$<>9__CachedAnonymousMethodDelegate3;
    [CompilerGeneratedAttribute]
private static Func`2<TimeMeasureResult, double> CS$<>9__CachedAnonymousMethodDelegate6;
    [CompilerGeneratedAttribute]
private static Func`2<TimeMeasureResult, double> CS$<>9__CachedAnonymousMethodDelegate7;
    [CompilerGeneratedAttribute]
private static Func`2<IGrouping`2<string, TimeMeasureResult>, TimeMeasureResult> CS$<>9__CachedAnonymousMethodDelegated;
    [CompilerGeneratedAttribute]
private static Func`2<TimeMeasureResult, double> CS$<>9__CachedAnonymousMethodDelegatee;
    [CompilerGeneratedAttribute]
private static Func`2<TimeMeasureResult, int> CS$<>9__CachedAnonymousMethodDelegatef;
    [CompilerGeneratedAttribute]
private static Func`2<TimeMeasureResult, double> CS$<>9__CachedAnonymousMethodDelegate10;
    private static TimeMeasureExtensions();
    [ExtensionAttribute]
public static string GetCsv(IEnumerable`1<TimeMeasureResult> results);
    [ExtensionAttribute]
public static string GetTextTable(IEnumerable`1<TimeMeasureResult> results, string title);
    [ExtensionAttribute]
public static IEnumerable`1<TimeMeasureResult> Group(IEnumerable`1<TimeMeasureResult> resultsToAdd, Func`2<TimeMeasureResult, string> groupSelector);
    private static string GetCsvRow(Object[] values);
    private static Object[] GetValues(TimeMeasureResult measureResult, double totalTime);
    [CompilerGeneratedAttribute]
private static double <GetCsv>b__0(TimeMeasureResult r);
    [CompilerGeneratedAttribute]
private static double <GetCsv>b__1(TimeMeasureResult r);
    [CompilerGeneratedAttribute]
private static double <GetTextTable>b__4(TimeMeasureResult r);
    [CompilerGeneratedAttribute]
private static double <GetTextTable>b__5(TimeMeasureResult r);
    [CompilerGeneratedAttribute]
private static TimeMeasureResult <Group>b__9(IGrouping`2<string, TimeMeasureResult> s);
    [CompilerGeneratedAttribute]
private static double <Group>b__c(TimeMeasureResult r);
    [CompilerGeneratedAttribute]
private static int <Group>b__a(TimeMeasureResult m);
    [CompilerGeneratedAttribute]
private static double <Group>b__b(TimeMeasureResult m);
}
public class WebGrease.TimeMeasureItem : object {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <Value>k__BackingField;
    public string Id { get; public set; }
    public DateTime Value { get; public set; }
    public TimeMeasureItem(string id, DateTime value);
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(string value);
    [CompilerGeneratedAttribute]
public DateTime get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(DateTime value);
}
public class WebGrease.TimeMeasureResult : object {
    [CompilerGeneratedAttribute]
private int <Count>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Duration>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <IdParts>k__BackingField;
    public int Count { get; public set; }
    public double Duration { get; public set; }
    public IEnumerable`1<string> IdParts { get; public set; }
    public string Name { get; }
    [CompilerGeneratedAttribute]
public int get_Count();
    [CompilerGeneratedAttribute]
public void set_Count(int value);
    [CompilerGeneratedAttribute]
public double get_Duration();
    [CompilerGeneratedAttribute]
public void set_Duration(double value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<string> get_IdParts();
    [CompilerGeneratedAttribute]
public void set_IdParts(IEnumerable`1<string> value);
    public string get_Name();
}
public class WebGrease.WebGreaseContext : object {
    private static string IdPartsDelimiter;
    private static IDictionary`2<string, Tuple`3<DateTime, long, string>> CachedFileHashes;
    private static object CachedFileHashLock;
    private static ThreadLocal`1<MD5CryptoServiceProvider> Hasher;
    private static ThreadLocal`1<Encoding> DefaultEncoding;
    private IDictionary`2<string, string> sessionCachedFileHashes;
    private IDictionary`2<string, IDictionary`2<string, string>> availableFileCollections;
    [CompilerGeneratedAttribute]
private ICacheManager <Cache>k__BackingField;
    [CompilerGeneratedAttribute]
private WebGreaseConfiguration <Configuration>k__BackingField;
    [CompilerGeneratedAttribute]
private LogManager <Log>k__BackingField;
    [CompilerGeneratedAttribute]
private ITimeMeasure <Measure>k__BackingField;
    [CompilerGeneratedAttribute]
private PreprocessingManager <Preprocessing>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <SessionStartTime>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`2<string, string> CS$<>9__CachedAnonymousMethodDelegate3;
    [CompilerGeneratedAttribute]
private static Func`2<string, string> CS$<>9__CachedAnonymousMethodDelegate5;
    [CompilerGeneratedAttribute]
private static Func`1<MD5CryptoServiceProvider> CS$<>9__CachedAnonymousMethodDelegate11;
    [CompilerGeneratedAttribute]
private static Func`1<Encoding> CS$<>9__CachedAnonymousMethodDelegate12;
    public ICacheManager Cache { get; private set; }
    public WebGreaseConfiguration Configuration { get; private set; }
    public LogManager Log { get; private set; }
    public ITimeMeasure Measure { get; private set; }
    public PreprocessingManager Preprocessing { get; private set; }
    public DateTimeOffset SessionStartTime { get; private set; }
    public WebGreaseContext(IWebGreaseContext parentContext, FileInfo configFile);
    public WebGreaseContext(WebGreaseConfiguration configuration, LogManager logManager);
    public WebGreaseContext(WebGreaseConfiguration configuration, Action`2<string, MessageImportance> logInformation, Action`1<string> logWarning, LogExtendedError logExtendedWarning, Action`1<string> logErrorMessage, LogError logError, LogExtendedError logExtendedError);
    private static WebGreaseContext();
    [CompilerGeneratedAttribute]
public sealed virtual ICacheManager get_Cache();
    [CompilerGeneratedAttribute]
private void set_Cache(ICacheManager value);
    [CompilerGeneratedAttribute]
public sealed virtual WebGreaseConfiguration get_Configuration();
    [CompilerGeneratedAttribute]
private void set_Configuration(WebGreaseConfiguration value);
    [CompilerGeneratedAttribute]
public sealed virtual LogManager get_Log();
    [CompilerGeneratedAttribute]
private void set_Log(LogManager value);
    [CompilerGeneratedAttribute]
public sealed virtual ITimeMeasure get_Measure();
    [CompilerGeneratedAttribute]
private void set_Measure(ITimeMeasure value);
    [CompilerGeneratedAttribute]
public sealed virtual PreprocessingManager get_Preprocessing();
    [CompilerGeneratedAttribute]
private void set_Preprocessing(PreprocessingManager value);
    [CompilerGeneratedAttribute]
public sealed virtual DateTimeOffset get_SessionStartTime();
    [CompilerGeneratedAttribute]
private void set_SessionStartTime(DateTimeOffset value);
    public sealed virtual IWebGreaseSection SectionedAction(String[] idParts);
    public sealed virtual IWebGreaseSection SectionedActionGroup(String[] idParts);
    public sealed virtual bool TemporaryIgnore(IFileSet fileSet, ContentItem contentItem);
    public sealed virtual bool TemporaryIgnore(ContentPivot contentPivot);
    public sealed virtual void CleanCache(LogManager logManager);
    public sealed virtual void CleanDestination();
    [SuppressMessageAttribute("Microsoft.Globalization", "CA1308:NormalizeStringsToUppercase")]
public sealed virtual IDictionary`2<string, string> GetAvailableFiles(string rootDirectory, IEnumerable`1<string> directories, IEnumerable`1<string> extensions, FileTypes fileType);
    public sealed virtual string GetValueHash(string value);
    public sealed virtual string GetContentItemHash(ContentItem contentItem);
    public sealed virtual string GetFileHash(string filePath);
    public sealed virtual string MakeRelativeToApplicationRoot(string absolutePath);
    public sealed virtual string GetWorkingSourceDirectory(string relativePath);
    [SuppressMessageAttribute("Microsoft.Design", "CA1031:DoNotCatchGeneralExceptionTypes")]
public sealed virtual void Touch(string filePath);
    public sealed virtual string EnsureErrorFileOnDisk(string sourceFile, ContentItem sourceContentItem);
    internal static string ToStringId(IEnumerable`1<string> idParts);
    internal static IEnumerable`1<string> ToIdParts(string id);
    internal static string ComputeContentHash(string content, Encoding encoding);
    internal static string ComputeFileHash(string filePath);
    [SuppressMessageAttribute("Microsoft.Globalization", "CA1308:NormalizeStringsToUppercase")]
private static string BytesToHash(Byte[] hash);
    [SuppressMessageAttribute("Microsoft.Design", "CA1031:DoNotCatchGeneralExceptionTypes")]
private void CleanDirectory(string directory);
    private void Initialize(WebGreaseConfiguration configuration, LogManager logManager, ICacheManager cacheManager, PreprocessingManager preprocessingManager, DateTimeOffset runStartTime, ITimeMeasure timeMeasure);
    [CompilerGeneratedAttribute]
private static string <GetAvailableFiles>b__0(string f);
    [CompilerGeneratedAttribute]
private static string <GetAvailableFiles>b__2(string f);
    [CompilerGeneratedAttribute]
private static MD5CryptoServiceProvider <.cctor>b__f();
    [CompilerGeneratedAttribute]
private static Encoding <.cctor>b__10();
}
public class WebGrease.WebGreaseSection : object {
    private bool isGroup;
    private IWebGreaseContext context;
    private String[] idParts;
    private object cacheVarBySetting;
    private bool cacheIsSkipable;
    private ContentItem cacheVarByContentItem;
    private IFileSet cacheVarByFileSet;
    private Func`2<ICacheSection, bool> restoreFromCacheAction;
    private Action`1<ICacheSection> whenSkippedAction;
    private WebGreaseSection(IWebGreaseContext context, String[] idParts, bool isGroup);
    public static IWebGreaseSection Create(IWebGreaseContext context, String[] idParts, bool isGroup);
    public sealed virtual void Execute(Action action);
    public sealed virtual T Execute(Func`1<T> action);
    public sealed virtual ICachableWebGreaseSection MakeCachable(object varBySettings, bool isSkipable);
    public sealed virtual ICachableWebGreaseSection MakeCachable(ContentItem varByContentItem, object varBySettings, bool isSkipable);
    public sealed virtual ICachableWebGreaseSection MakeCachable(IFileSet varByFileSet, object varBySettings, bool isSkipable);
    public sealed virtual ICachableWebGreaseSection RestoreFromCacheAction(Func`2<ICacheSection, bool> action);
    public sealed virtual ICachableWebGreaseSection WhenSkipped(Action`1<ICacheSection> action);
    public sealed virtual bool Execute(Func`2<ICacheSection, bool> cachableSectionAction);
}
public class WebGrease.WorkflowException : Exception {
    public WorkflowException(string message);
    public WorkflowException(string message, Exception inner);
    protected WorkflowException(SerializationInfo info, StreamingContext context);
}
