[GeneratedCodeAttribute("MyTemplate", "11.0.0.0")]
[EditorBrowsableAttribute("1")]
internal class A.a : Computer {
}
[GeneratedCodeAttribute("MyTemplate", "11.0.0.0")]
[EditorBrowsableAttribute("1")]
internal class A.A : ApplicationBase {
}
[HideModuleNameAttribute]
[StandardModuleAttribute]
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class A.b : object {
    private static ResourceManager A;
    private static CultureInfo A;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager A { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo a { get; internal set; }
    internal static ResourceManager A();
    internal static CultureInfo a();
    internal static void A(CultureInfo );
}
[HideModuleNameAttribute]
[StandardModuleAttribute]
[GeneratedCodeAttribute("MyTemplate", "11.0.0.0")]
internal class A.B : object {
    private static a`1<a> A;
    private static a`1<A> A;
    private static a`1<User> A;
    private static a`1<A> A;
    [HelpKeywordAttribute("My.Computer")]
internal static a A { get; }
    [HelpKeywordAttribute("My.Application")]
internal static A a { get; }
    [HelpKeywordAttribute("My.User")]
internal static User B { get; }
    [HelpKeywordAttribute("My.WebServices")]
internal static A b { get; }
    private static B();
    [DebuggerHiddenAttribute]
internal static a A();
    [DebuggerHiddenAttribute]
internal static A a();
    [DebuggerHiddenAttribute]
internal static User B();
    [DebuggerHiddenAttribute]
internal static A b();
}
[StandardModuleAttribute]
[HideModuleNameAttribute]
[CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
internal class A.c : object {
    [HelpKeywordAttribute("My.Settings")]
internal static C A { get; }
    internal static C A();
}
[EditorBrowsableAttribute("2")]
[GeneratedCodeAttribute("Microsoft.VisualStudio.Editors.SettingsDesigner.SettingsSingleFileGenerator", "17.7.0.0")]
[CompilerGeneratedAttribute]
internal class A.C : ApplicationSettingsBase {
    private static C A;
    private static C();
    public static C A();
}
public class FLEXYGO.Authentication.Identity.AccessTokenProvider : object {
    public sealed virtual override void Create(AuthenticationTokenCreateContext context);
    public sealed virtual override void Receive(AuthenticationTokenReceiveContext context);
    [AsyncStateMachineAttribute("FLEXYGO.Authentication.Identity.AccessTokenProvider/A")]
public sealed virtual override Task CreateAsync(AuthenticationTokenCreateContext context);
    [AsyncStateMachineAttribute("FLEXYGO.Authentication.Identity.AccessTokenProvider/a")]
public sealed virtual override Task ReceiveAsync(AuthenticationTokenReceiveContext context);
}
public class FLEXYGO.Authentication.Identity.ApplicationDbContext : IdentityDbContext`1<ApplicationUser> {
    public static ApplicationDbContext Create();
}
public class FLEXYGO.Authentication.Identity.ApplicationOAuthProvider : OAuthAuthorizationServerProvider {
    public virtual Task MatchEndpoint(OAuthMatchEndpointContext context);
    public virtual Task ValidateClientRedirectUri(OAuthValidateClientRedirectUriContext context);
    public virtual Task ValidateClientAuthentication(OAuthValidateClientAuthenticationContext context);
    [AsyncStateMachineAttribute("FLEXYGO.Authentication.Identity.ApplicationOAuthProvider/A")]
public virtual Task GrantResourceOwnerCredentials(OAuthGrantResourceOwnerCredentialsContext Context);
    public virtual Task GrantClientCredentials(OAuthGrantClientCredentialsContext context);
    public static AuthenticationProperties CreateProperties(string userName);
    [AsyncStateMachineAttribute("FLEXYGO.Authentication.Identity.ApplicationOAuthProvider/a")]
public virtual Task AuthorizeEndpoint(OAuthAuthorizeEndpointContext context);
    private bool A(string );
    private bool A(string , string );
}
public class FLEXYGO.Authentication.Identity.ApplicationSignInManager : SignInManager`2<ApplicationUser, string> {
    public ApplicationSignInManager(ApplicationUserManager userManager, IAuthenticationManager authenticationManager);
    public virtual Task`1<ClaimsIdentity> CreateUserIdentityAsync(ApplicationUser user);
    public static ApplicationSignInManager Create(IdentityFactoryOptions`1<ApplicationSignInManager> options, IOwinContext context);
    public SignInStatus PasswordSignIn(string userName, string password, bool isPersistent, bool shouldLockout);
    public SignInStatus PasswordSignIn(string userName, string password, bool isPersistent, bool shouldLockout, string bearer);
    private LoginType A(string , string );
}
public class FLEXYGO.Authentication.Identity.ApplicationUser : IdentityUser {
    [CompilerGeneratedAttribute]
private string A;
    [CompilerGeneratedAttribute]
private string a;
    [CompilerGeneratedAttribute]
private string B;
    [CompilerGeneratedAttribute]
private string b;
    [CompilerGeneratedAttribute]
private string C;
    [CompilerGeneratedAttribute]
private string c;
    [CompilerGeneratedAttribute]
private string D;
    [CompilerGeneratedAttribute]
private string d;
    [CompilerGeneratedAttribute]
private string E;
    [CompilerGeneratedAttribute]
private string e;
    [CompilerGeneratedAttribute]
private bool A;
    [CompilerGeneratedAttribute]
private bool a;
    [CompilerGeneratedAttribute]
private string F;
    public string IPGroup { get; public set; }
    public string Reference { get; public set; }
    public string SubReference { get; public set; }
    public string ProfileName { get; public set; }
    public string Avatar { get; public set; }
    public string Name { get; public set; }
    public string SurName { get; public set; }
    public string NickName { get; public set; }
    public string RoleId { get; public set; }
    public string CultureId { get; public set; }
    public bool MustChangePassword { get; public set; }
    public bool ExclusiveWebAPI { get; public set; }
    public string MailAccountId { get; public set; }
    [CompilerGeneratedAttribute]
public string get_IPGroup();
    [CompilerGeneratedAttribute]
public void set_IPGroup(string AutoPropertyValue);
    [CompilerGeneratedAttribute]
public string get_Reference();
    [CompilerGeneratedAttribute]
public void set_Reference(string AutoPropertyValue);
    [CompilerGeneratedAttribute]
public string get_SubReference();
    [CompilerGeneratedAttribute]
public void set_SubReference(string AutoPropertyValue);
    [CompilerGeneratedAttribute]
public string get_ProfileName();
    [CompilerGeneratedAttribute]
public void set_ProfileName(string AutoPropertyValue);
    [CompilerGeneratedAttribute]
public string get_Avatar();
    [CompilerGeneratedAttribute]
public void set_Avatar(string AutoPropertyValue);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string AutoPropertyValue);
    [CompilerGeneratedAttribute]
public string get_SurName();
    [CompilerGeneratedAttribute]
public void set_SurName(string AutoPropertyValue);
    [CompilerGeneratedAttribute]
public string get_NickName();
    [CompilerGeneratedAttribute]
public void set_NickName(string AutoPropertyValue);
    [CompilerGeneratedAttribute]
public string get_RoleId();
    [CompilerGeneratedAttribute]
public void set_RoleId(string AutoPropertyValue);
    [CompilerGeneratedAttribute]
public string get_CultureId();
    [CompilerGeneratedAttribute]
public void set_CultureId(string AutoPropertyValue);
    [CompilerGeneratedAttribute]
public bool get_MustChangePassword();
    [CompilerGeneratedAttribute]
public void set_MustChangePassword(bool AutoPropertyValue);
    [CompilerGeneratedAttribute]
public bool get_ExclusiveWebAPI();
    [CompilerGeneratedAttribute]
public void set_ExclusiveWebAPI(bool AutoPropertyValue);
    [CompilerGeneratedAttribute]
public string get_MailAccountId();
    [CompilerGeneratedAttribute]
public void set_MailAccountId(string AutoPropertyValue);
    public ClaimsIdentity GenerateUserIdentity(ApplicationUserManager manager);
    public Task`1<ClaimsIdentity> GenerateUserIdentityAsync(ApplicationUserManager manager);
}
public class FLEXYGO.Authentication.Identity.ApplicationUserManager : UserManager`1<ApplicationUser> {
    public static IDataProtectionProvider currentProvider;
    private static object A;
    private static ApplicationUserManager();
    public ApplicationUserManager(IUserStore`1<ApplicationUser> store);
    public static ApplicationUserManager Create(IdentityFactoryOptions`1<ApplicationUserManager> options);
    public static ApplicationUserManager Create(IdentityFactoryOptions`1<ApplicationUserManager> options, IOwinContext context);
    private static ApplicationUserManager A(ApplicationUserManager , IdentityFactoryOptions`1<ApplicationUserManager> );
    public ApplicationUser FindByEmailOrUserName(string userName);
}
public class FLEXYGO.Authentication.Identity.AspNetUsers_Token : object {
    [CompilerGeneratedAttribute]
private string A;
    [CompilerGeneratedAttribute]
private string a;
    [CompilerGeneratedAttribute]
private string B;
    [CompilerGeneratedAttribute]
private string b;
    [CompilerGeneratedAttribute]
private string C;
    [CompilerGeneratedAttribute]
private string c;
    [CompilerGeneratedAttribute]
private string D;
    [CompilerGeneratedAttribute]
private DateTime A;
    [CompilerGeneratedAttribute]
private DateTime a;
    public string userId { get; public set; }
    public string TokenType { get; public set; }
    public string AccessToken { get; public set; }
    public string RefreshToken { get; public set; }
    public string RefreshData { get; public set; }
    public string Scope { get; public set; }
    public string AppName { get; public set; }
    public DateTime ExpiryDate { get; public set; }
    public DateTime InsertedDate { get; public set; }
    [CompilerGeneratedAttribute]
public string get_userId();
    [CompilerGeneratedAttribute]
public void set_userId(string AutoPropertyValue);
    [CompilerGeneratedAttribute]
public string get_TokenType();
    [CompilerGeneratedAttribute]
public void set_TokenType(string AutoPropertyValue);
    [CompilerGeneratedAttribute]
public string get_AccessToken();
    [CompilerGeneratedAttribute]
public void set_AccessToken(string AutoPropertyValue);
    [CompilerGeneratedAttribute]
public string get_RefreshToken();
    [CompilerGeneratedAttribute]
public void set_RefreshToken(string AutoPropertyValue);
    [CompilerGeneratedAttribute]
public string get_RefreshData();
    [CompilerGeneratedAttribute]
public void set_RefreshData(string AutoPropertyValue);
    [CompilerGeneratedAttribute]
public string get_Scope();
    [CompilerGeneratedAttribute]
public void set_Scope(string AutoPropertyValue);
    [CompilerGeneratedAttribute]
public string get_AppName();
    [CompilerGeneratedAttribute]
public void set_AppName(string AutoPropertyValue);
    [CompilerGeneratedAttribute]
public DateTime get_ExpiryDate();
    [CompilerGeneratedAttribute]
public void set_ExpiryDate(DateTime AutoPropertyValue);
    [CompilerGeneratedAttribute]
public DateTime get_InsertedDate();
    [CompilerGeneratedAttribute]
public void set_InsertedDate(DateTime AutoPropertyValue);
}
public class FLEXYGO.Authentication.Identity.AspNetUsers_Tokens : object {
    public static List`1<AspNetUsers_Token> Items { get; }
    public static List`1<AspNetUsers_Token> get_Items();
    private static string A(ClaimsIdentity );
    private static ClaimsIdentity A(string );
    private static object A();
    public static bool UpdateRefreshToken(string AccessToken, string RefreshToken, AuthenticationTicket RefreshTicket);
    public static ClaimsIdentity RemoveTokenFromRefresh(string RefreshToken);
    public static bool InsertToken(string AccessToken, string UserName, DateTime ExpiryDate, string AppName);
    public static string GetLatestToken(string UserName);
}
public class FLEXYGO.Authentication.Identity.AuthContext : IdentityDbContext`1<IdentityUser> {
}
public class FLEXYGO.Authentication.Identity.AuthRepository : object {
    private AuthContext A;
    private UserManager`1<IdentityUser> A;
    [AsyncStateMachineAttribute("FLEXYGO.Authentication.Identity.AuthRepository/A")]
public Task`1<IdentityUser> FindUser(string userName, string password);
    public sealed virtual override void Dispose();
}
public class FLEXYGO.Authentication.Identity.BasicRefreshTokenProvider : object {
    public sealed virtual override void Create(AuthenticationTokenCreateContext context);
    public sealed virtual override void Receive(AuthenticationTokenReceiveContext context);
    [AsyncStateMachineAttribute("FLEXYGO.Authentication.Identity.BasicRefreshTokenProvider/A")]
public sealed virtual override Task CreateAsync(AuthenticationTokenCreateContext context);
    [AsyncStateMachineAttribute("FLEXYGO.Authentication.Identity.BasicRefreshTokenProvider/a")]
public sealed virtual override Task ReceiveAsync(AuthenticationTokenReceiveContext context);
}
public class FLEXYGO.Authentication.Identity.EmailService : object {
    private static Exception A;
    private static string A;
    private static string a;
    public static string LastException { get; }
    public static string ChangePasswordUri { get; public set; }
    public static string VerifiedUserName { get; public set; }
    public static string get_LastException();
    public static string get_ChangePasswordUri();
    public static void set_ChangePasswordUri(string value);
    public static string get_VerifiedUserName();
    public static void set_VerifiedUserName(string value);
    public sealed virtual override Task SendAsync(IdentityMessage message);
}
[StandardModuleAttribute]
[ExtensionAttribute]
public class FLEXYGO.Authentication.Identity.IdentityExtensions : object {
    [ExtensionAttribute]
public static string GetAvatar(IIdentity user);
    [ExtensionAttribute]
public static string GetIpGroup(IIdentity user);
    [ExtensionAttribute]
public static string GetReference(IIdentity user);
    [ExtensionAttribute]
public static string GetSubReference(IIdentity user);
    [ExtensionAttribute]
public static int GetProfileName(IIdentity user);
    [ExtensionAttribute]
public static string GetEmail(IIdentity user);
    [ExtensionAttribute]
public static string GetMailAccountId(IIdentity user);
    [ExtensionAttribute]
public static string GetId(IIdentity user);
    [ExtensionAttribute]
public static string RoleId(IIdentity user);
    [ExtensionAttribute]
public static string GetCultureId(IIdentity user);
    [ExtensionAttribute]
public static string GetCleanCultureId(IIdentity user);
}
public class FLEXYGO.Authentication.Identity.IdentityHelper : object {
    public static string XsrfKey;
    public static string ProviderNameKey;
    public static string CodeKey;
    public static string UserIdKey;
    public static string GetProviderNameFromRequest(HttpRequest request);
    public static string GetCodeFromRequest(HttpRequest request);
    public static string GetUserIdFromRequest(HttpRequest request);
    public static string GetResetPasswordRedirectUrl(string code, HttpRequest request);
    public static string GetUserConfirmationRedirectUrl(string code, string userId, HttpRequest request);
    private static bool A(string );
    public static void RedirectToReturnUrl(string returnUrl, HttpResponse response, bool endResponse, HttpContext context);
}
public class FLEXYGO.Authentication.Identity.QueryStringOAuthBearerProvider : OAuthBearerAuthenticationProvider {
    public virtual Task RequestToken(OAuthRequestTokenContext context);
}
public class FLEXYGO.Authentication.Identity.SmsService : object {
    private static Exception A;
    private static object A;
    private static string A;
    public static string LastException { get; }
    public static string ChangePasswordUri { get; public set; }
    public static string VerifiedUserName { get; public set; }
    public static string get_LastException();
    public static string get_ChangePasswordUri();
    public static void set_ChangePasswordUri(string value);
    public static string get_VerifiedUserName();
    public static void set_VerifiedUserName(string value);
    public sealed virtual override Task SendAsync(IdentityMessage message);
}
public class FLEXYGO.Authentication.Identity.Startup : object {
    private static OAuthAuthorizationServerOptions A;
    private static ConcurrentDictionary`2<string, string> A;
    public static OAuthAuthorizationServerOptions OAuthOptions { get; private set; }
    private static Startup();
    public static OAuthAuthorizationServerOptions get_OAuthOptions();
    private static void set_OAuthOptions(OAuthAuthorizationServerOptions );
    public static void ConfigureAuth(IAppBuilder app);
    private static void A(AuthenticationTokenCreateContext );
    private static void A(AuthenticationTokenReceiveContext );
}
public class FLEXYGO.Authentication.Identity.Utils : object {
    public static PasswordValidator getPasswordValidator();
}
[ExtensionAttribute]
[StandardModuleAttribute]
public class System.Web.HttpRequestExtensions : object {
    [ExtensionAttribute]
public static string ToRaw(HttpRequest request);
    private static void A(HttpRequest , StringWriter );
    private static void a(HttpRequest , StringWriter );
    private static void B(HttpRequest , StringWriter );
}
