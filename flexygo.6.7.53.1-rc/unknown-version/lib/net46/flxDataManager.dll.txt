[CompilerGeneratedAttribute]
[DebuggerAspectGeneratedCodeAttribute]
internal class A.a : object {
    internal static Object[] A;
    private static a();
}
[DebuggerAspectGeneratedCodeAttribute]
[CompilerGeneratedAttribute]
internal class A.A : object {
    internal static Debug A;
    internal static Debug a;
    internal static Debug B;
    internal static Debug b;
    internal static Debug C;
    internal static Debug c;
    internal static Debug D;
    internal static Debug d;
    internal static Debug E;
    internal static Debug e;
    internal static MethodBase A;
    internal static MethodBase a;
    internal static MethodBase B;
    internal static MethodBase b;
    internal static MethodBase C;
    internal static MethodBase c;
    internal static MethodBase D;
    internal static MethodBase d;
    internal static MethodBase E;
    internal static MethodBase e;
    [DebuggerAspectGeneratedCodeAttribute]
[CompilerGeneratedAttribute]
private static A();
}
[DebuggerAspectGeneratedCodeAttribute]
[CompilerGeneratedAttribute]
internal class A.B : object {
    public static B A;
    public static B();
    public virtual object GetMetadata(int );
}
internal class A.c : object {
    public sealed virtual string A();
    public sealed virtual string a();
    public sealed virtual string B();
    public sealed virtual string b();
    public sealed virtual void DeriveParameters(DbCommand );
    public sealed virtual DbCommand GetDbCommand();
    public sealed virtual DbCommand GetDbCommand(string , DbConnection );
    public sealed virtual DbDataAdapter GetDbDataAdapter(string , DbConnection );
    public sealed virtual DbConnection GetDbConnection(string );
    public sealed virtual DbType GetStandardDbType(int );
    public sealed virtual int InsertRowAndReturnIdentity(DataManager , string , string , string );
    public sealed virtual DataTable GetTableDefaults(DataManager , string );
    public sealed virtual DataTable GetObjectSchema(DataManager , string , string );
    public sealed virtual string ConvertFunctionString(DbType , string );
    public sealed virtual bool IsSelect(string , String& );
    public sealed virtual bool IsMultiSelect(string , String& );
    public sealed virtual bool IsInsert(string , String& );
    public sealed virtual bool IsUpdate(string , String& );
    public sealed virtual bool IsDelete(string , String& );
    public sealed virtual bool IsStored(string , String& , String& , Int32& );
    public object A(string );
    public sealed virtual bool TestSql(DataManager , string , DataTable& , List`1<DbParameter> );
    public sealed virtual bool GetStoredResult(DbCommand );
    public sealed virtual string GetPaginatedSql(string , int , int );
    public sealed virtual bool DropTable(DataManager , string );
    public sealed virtual DbParameter GetDbParameter();
    public sealed virtual DbParameter GetDbParameter(string , DbType , int );
    public sealed virtual object ConvertValue(object , DbType );
    public sealed virtual Exception ProcessError(Exception , string );
    public sealed virtual string GetSqlFilter(string , string );
    public sealed virtual void ClearParamsCache(string , string );
    public sealed virtual object parseBoolean(string );
}
internal class A.d : object {
    private static Dictionary`2<string, Dictionary`2<string, List`1<SqlParameter>>> A;
    private static d();
    public sealed virtual string A();
    public sealed virtual string a();
    public sealed virtual string B();
    public sealed virtual string b();
    public sealed virtual DbCommand GetDbCommand();
    public sealed virtual DbCommand GetDbCommand(string , DbConnection );
    public sealed virtual DbDataAdapter GetDbDataAdapter(string , DbConnection );
    public sealed virtual DbConnection GetDbConnection(string );
    public sealed virtual DbType GetStandardDbType(int );
    public sealed virtual int InsertRowAndReturnIdentity(DataManager , string , string , string );
    public sealed virtual DataTable GetTableDefaults(DataManager , string );
    public sealed virtual DbParameter GetDbParameter();
    public sealed virtual DataTable GetObjectSchema(DataManager , string , string );
    public sealed virtual DbParameter GetDbParameter(string , DbType , int );
    public sealed virtual string ConvertFunctionString(DbType , string );
    public sealed virtual bool IsSelect(string , String& );
    public sealed virtual bool IsMultiSelect(string , String& );
    public sealed virtual bool IsInsert(string , String& );
    public sealed virtual bool IsUpdate(string , String& );
    public sealed virtual bool IsDelete(string , String& );
    public sealed virtual bool IsStored(string , String& , String& , Int32& );
    public bool A(TSqlScript , string , String& );
    public bool a(TSqlScript , string , String& );
    public TSqlScript A(string );
    public sealed virtual bool TestSql(DataManager , string , DataTable& , List`1<DbParameter> );
    public sealed virtual void DeriveParameters(DbCommand );
    public sealed virtual void ClearParamsCache(string , string );
    public sealed virtual bool GetStoredResult(DbCommand );
    public sealed virtual string GetPaginatedSql(string , int , int );
    public sealed virtual bool DropTable(DataManager , string );
    public sealed virtual object ConvertValue(object , DbType );
    public sealed virtual Exception ProcessError(Exception , string );
    public sealed virtual string GetSqlFilter(string , string );
    public sealed virtual object parseBoolean(string );
}
internal class A.D : object {
    public sealed virtual string A();
    public sealed virtual string a();
    public sealed virtual string B();
    public sealed virtual string b();
    public sealed virtual void DeriveParameters(DbCommand );
    public sealed virtual DbCommand GetDbCommand();
    public sealed virtual DbCommand GetDbCommand(string , DbConnection );
    public sealed virtual DbDataAdapter GetDbDataAdapter(string , DbConnection );
    public sealed virtual DbConnection GetDbConnection(string );
    public sealed virtual DbType GetStandardDbType(int );
    public sealed virtual int InsertRowAndReturnIdentity(DataManager , string , string , string );
    public sealed virtual DataTable GetTableDefaults(DataManager , string );
    public sealed virtual DataTable GetObjectSchema(DataManager , string , string );
    public sealed virtual string ConvertFunctionString(DbType , string );
    public sealed virtual bool IsSelect(string , String& );
    public sealed virtual bool IsMultiSelect(string , String& );
    public sealed virtual bool IsInsert(string , String& );
    public sealed virtual bool IsUpdate(string , String& );
    public sealed virtual bool IsDelete(string , String& );
    public sealed virtual bool IsStored(string , String& , String& , Int32& );
    public object A(string );
    public sealed virtual bool TestSql(DataManager , string , DataTable& , List`1<DbParameter> );
    public sealed virtual bool GetStoredResult(DbCommand );
    public sealed virtual string GetPaginatedSql(string , int , int );
    public sealed virtual bool DropTable(DataManager , string );
    public sealed virtual DbParameter GetDbParameter();
    public sealed virtual DbParameter GetDbParameter(string , DbType , int );
    public sealed virtual object ConvertValue(object , DbType );
    public sealed virtual Exception ProcessError(Exception , string );
    public sealed virtual string GetSqlFilter(string , string );
    public sealed virtual void ClearParamsCache(string , string );
    public sealed virtual object parseBoolean(string );
}
public class Extends : object {
    public static LinkedServerCollection LinkedServers { get; }
    public static LinkedServerCollection get_LinkedServers();
}
public class FLEXYGO.Data.DataManager : MarshalByRefObject {
    private IConfiguration A;
    private eDBType A;
    private string A;
    private string a;
    private DataAdapter A;
    private bool A;
    private bool a;
    private DbTransaction A;
    private DbConnection A;
    private int A;
    private bool B;
    private bool b;
    private ArrayList A;
    private ArrayList a;
    private ArrayList B;
    internal Exception A;
    public string ErrorMessage;
    public IDataManagerConnector _connector;
    private static IDictionary`2<string, object> A;
    public string ConnectString { get; public set; }
    public eDBType Type { get; public set; }
    public string InnerSchema { get; }
    public bool KeepOpen { get; public set; }
    public bool ParseLinkedServers { get; public set; }
    public int Timeout { get; public set; }
    public DataAdapter CurrentDataAdapter { get; }
    public Exception LastException { get; }
    public bool FillSchema { get; public set; }
    public ArrayList SQLInstructions { get; public set; }
    public ArrayList PreSQLInstructions { get; public set; }
    public ArrayList PostSQLInstructions { get; public set; }
    public bool InTrans { get; }
    public DbTransaction Trans { get; }
    public string ParameterNamePrefix { get; }
    public string ParameterBindPrefix { get; }
    public string OpenQuote { get; }
    public string CloseQuote { get; }
    public DataManager(string aConnectString, string aDBType, bool aKeepOpen, ArrayList SqlSentenceInstructions, ArrayList beforeSqlSentenceInstructions, ArrayList afterSqlSentenceInstructions);
    public DataManager(string ConnectionName, bool aKeepOpen, ArrayList SqlSentenceInstructions, ArrayList beforeSqlSentenceInstructions, ArrayList afterSqlSentenceInstructions);
    public DataManager(UserConnection UserConnection);
    public DataManager(string aConnectString, eDBType aDBType, bool aKeepOpen, ArrayList SqlSentenceInstructions, ArrayList beforeSqlSentenceInstructions, ArrayList afterSqlSentenceInstructions);
    public DataManager(string aConnectString, eDBType aDBType);
    public DataManager(string aConnectString, eDBType aDBType, int aTimeout);
    public string get_ConnectString();
    public void set_ConnectString(string value);
    public eDBType get_Type();
    public void set_Type(eDBType value);
    public string get_InnerSchema();
    public bool get_KeepOpen();
    public void set_KeepOpen(bool value);
    public bool get_ParseLinkedServers();
    public void set_ParseLinkedServers(bool value);
    public int get_Timeout();
    public void set_Timeout(int value);
    public DataAdapter get_CurrentDataAdapter();
    public Exception get_LastException();
    public bool get_FillSchema();
    public void set_FillSchema(bool value);
    public ArrayList get_SQLInstructions();
    public void set_SQLInstructions(ArrayList value);
    public ArrayList get_PreSQLInstructions();
    public void set_PreSQLInstructions(ArrayList value);
    public ArrayList get_PostSQLInstructions();
    public void set_PostSQLInstructions(ArrayList value);
    public bool get_InTrans();
    public DbTransaction get_Trans();
    public bool CreateTable(string tableName, string schema, FieldSettingsCollection fields);
    public bool DropTable(string tableName);
    public int InsertRowAndReturnIdentity(string tableName, string schema, string sql);
    public bool AddColumnToTable(FieldSettings field);
    public static eDBType GetDBType(string ProviderName);
    public string get_ParameterNamePrefix();
    public string get_ParameterBindPrefix();
    public string get_OpenQuote();
    public string get_CloseQuote();
    public string QuoteName(string fieldName);
    public string QuoteName(string tableName, string fieldName);
    public string QuoteName(string tableName, string schema, string ConnectionStringId);
    public string QuoteName(string tableName, string fieldName, string schema, string ConnectionStringId);
    public string ConvertFunctionString(DbType datatype, string datafield);
    public void Close();
    public DataTable GetTableDefaults(string TableName);
    public DbType GetStandardDbType(int customParamType);
    public DataTable GetObjectSchema(string objectName, string schema);
    public bool canConnect();
    public bool ChangePassword(string newPassword);
    public void BeginTrans();
    public void RollbackTrans();
    public void CommitTrans();
    public DbDataAdapter DataAdapter(string SqlSentence, List`1<DbParameter> params);
    public DbDataReader DataReader(string SqlSentence, List`1<DbParameter> params);
    public DbDataReader DataReader(string SqlSentence, CommandBehavior aBehavior);
    public XmlReader XmlReader(string SqlSentence);
    public DbCommand Command(string SqlSentence);
    public DataSet DataSet(string SqlSentence);
    public DataSet DataSet(string SqlSentence, string aTableName);
    public DataSet DataSet(DataSet aDataSet, string SqlSentence, List`1<DbParameter> params);
    public DataSet DataSet(DataSet aDataSet, string SqlSentence, string aTableName, List`1<DbParameter> params);
    public DataSet DataSet(string SqlSentence, int aStartPage, int aPageSize, List`1<DbParameter> params);
    public DataSet DataSet(string SqlSentence, string aTableName, int aStartPage, int aPageSize, List`1<DbParameter> params);
    public DataSet DataSet(DataSet aDataSet, string SqlSentence, int aStartPage, int aPageSize, List`1<DbParameter> params);
    public DataSet DataSet(DataSet aDataSet, string SqlSentence, string aTableName, int aStartPage, int aPageSize, List`1<DbParameter> params);
    public DataTable DataTable(string SqlSentence, List`1<DbParameter> params);
    public DataTable DataTable(string SqlSentence, string aTableName, List`1<DbParameter> params);
    public DataTable DataTable(string SqlSentence, int aStartPage, int aPageSize, List`1<DbParameter> params);
    public DataTable DataTable(string SqlSentence, string aTableName, int aStartPage, int aPageSize, List`1<DbParameter> params);
    public DataTable DataTableColumnsExtendedProperties(string TableName, string ExtendedProperty);
    public DbCommand Stored(string aStored);
    public DbCommand Stored(string aStored, Boolean& aExists);
    public object GetValue(string SqlSentence, string aFieldName, List`1<DbParameter> params);
    public object GetValue(string SqlSentence, int aFieldOrder, List`1<DbParameter> params);
    public object GetValue(string SqlSentence, List`1<DbParameter> params);
    public void ExecuteSQLInstruction(string SqlSentence);
    public void ExecuteSQLInstruction(string SqlSentence, List`1<DbParameter> params);
    public bool IsSelect(string sentence, String& lerror);
    public bool IsMultiSelect(string sentence, String& lerror);
    public bool IsInsert(string sentence, String& lerror);
    public bool IsUpdate(string sentence, String& lerror);
    public bool IsDelete(string sentence, String& lerror);
    public bool IsStored(string sentence, String& lerror, String& procedureName, Int32& parameters);
    public bool TestSql(string SqlSentence, DataTable& dt, List`1<DbParameter> params);
    public int ExecuteSql(string SqlSentence);
    public int ExecuteSql(string SqlSentence, List`1<DbParameter> params);
    private void A(DbConnection , DbTransaction );
    private void a(DbConnection , DbTransaction );
    public int ExecuteSqlWithError(string SqlSentence);
    public void ExecuteSqlWithError(StringCollection SqlSentenceCol);
    public bool StoredExist(string aStored);
    public bool ExecuteERPStored(string aStored, BaseCollection aList, Boolean& aExists);
    public bool ExecuteStored(string aStored, BaseCollection aList);
    public bool ExecuteGipeStored(string aStored, BaseCollection aList);
    public bool ExecuteStored(string aStored, BaseCollection aList, Boolean& aExists);
    public bool ExecuteStoredResult(string aStored, BaseCollection aList, DataTable& aResult);
    public bool ExecuteStoredResult(string aStored, BaseCollection aList, DataSet& aResult, string TableNames);
    public bool ExecuteStoredResult(string aStored, BaseCollection aList, DataTable& aResult, Boolean& aExists);
    public bool ExecuteStoredResult(string aStored, BaseCollection aList, DataSet& aResult, string TableNames, Boolean& aExists);
    public int RecordCount(string SqlSentence, List`1<DbParameter> params);
    public bool Stored_GetInputParams(DbCommand aStored, BaseCollection& aList);
    public bool Stored_GetInputParams(string aStored, BaseCollection& aList);
    private void A();
    private DbCommand A(string , Boolean& );
    private DbCommand A(string , List`1<DbParameter> );
    private DbDataReader a(string , List`1<DbParameter> );
    private DbDataReader A(string , CommandBehavior );
    private Exception A(Exception );
    public string GetSqlFilter(string SqlFilter, string SQLDisplayField);
    public object parseBoolean(string value);
    private DbDataAdapter B(string , List`1<DbParameter> );
    private bool A(DbCommand , BaseCollection , bool );
    private bool A(DbCommand , BaseCollection );
    private bool a(DbCommand , BaseCollection , bool );
    internal DbConnection A(bool );
    private DataTable A(string , string , int , int , List`1<DbParameter> );
    private DataTable A(string , string );
    private DataSet A(DataSet , string , string , int , int , List`1<DbParameter> );
    private void A(String& , List`1& );
    public void ProcessLinkedServers(String& SQLSentence);
    public object ConvertValue(object Value, DbType dbType);
    private string A(string , int , int );
    private string A(string , int , int , List`1<DbParameter> );
    private bool A(DataSet , string );
    private bool A(string , BaseCollection , bool , Boolean& );
    private bool A(string , BaseCollection , DataTable& , bool , Boolean& );
    private bool A(string , BaseCollection , DataSet& , string , bool , bool );
    private DbConnection a(bool );
    private DbParameter A(DbParameter );
    private void A(object , SqlInfoMessageEventArgs );
    private void A(object , MySqlInfoMessageEventArgs );
    private void A(object , OracleInfoMessageEventArgs );
    private void A(object , StateChangeEventArgs );
    private int b(string , List`1<DbParameter> );
    private DataTable A(DbCommand );
    private DataSet A(DbCommand , string );
    public void ClearParamsCache(string cnnstring, string stored);
    private DbCommand A(string );
    public string buildSentence(string sqlSentence);
}
public enum FLEXYGO.Data.eDBAction : Enum {
    public int value__;
    public static eDBAction OTHER;
    public static eDBAction READ;
    public static eDBAction INSERT;
    public static eDBAction UPDATE;
    public static eDBAction DELETE;
}
public class FLEXYGO.Data.FieldSettings : MarshalByRefObject {
    internal string A;
    internal object A;
    internal bool A;
    internal bool a;
    [CompilerGeneratedAttribute]
private DbType A;
    internal int A;
    internal int a;
    internal int B;
    internal bool B;
    internal Type A;
    internal Type a;
    internal bool b;
    internal bool C;
    internal string a;
    internal string B;
    internal bool c;
    internal string b;
    private eDBType A;
    private string C;
    private string c;
    public string FieldName { get; }
    public object DefaultValue { get; }
    public bool Identity { get; }
    public bool Calculated { get; }
    public DbType DataTypeSQL { get; }
    public bool Key { get; }
    public Type FieldType { get; }
    public Type CustomFieldType { get; public set; }
    public bool AllowsNulls { get; }
    public bool Unique { get; }
    public string TableName { get; }
    public string Schema { get; }
    public int Length { get; }
    public string MappedField { get; }
    public bool Mapped { get; }
    public bool Required { get; }
    public FieldSettings(DataManager dm, string fieldName, string schema, bool key, bool identity, bool allowNull, Type fieldType, bool unique, string tableName, int length, bool calculated, DbType dbtype, int precission, int scale);
    protected FieldSettings(SerializationInfo info, StreamingContext context);
    [CompilerGeneratedAttribute]
internal DbType A();
    [CompilerGeneratedAttribute]
internal void A(DbType );
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    public string get_FieldName();
    public object get_DefaultValue();
    public bool get_Identity();
    public bool get_Calculated();
    public DbType get_DataTypeSQL();
    public bool get_Key();
    public Type get_FieldType();
    public Type get_CustomFieldType();
    public void set_CustomFieldType(Type value);
    public bool get_AllowsNulls();
    public bool get_Unique();
    public string get_TableName();
    public string get_Schema();
    public int get_Length();
    public string get_MappedField();
    public bool get_Mapped();
    public bool get_Required();
    public void SetDefault(string aValue);
    public string Description();
    private string a();
    private string B();
}
public class FLEXYGO.Data.FieldSettingsCollection : ClassCollection`1<FieldSettings> {
    public bool Add(FieldSettings aField);
    public bool Remove(FieldSettings aField);
    public bool Contains(string FieldName);
    public string ElementAt(int index);
}
public interface FLEXYGO.Data.IDataManagerConnector {
    public string ParameterNamePrefix { get; }
    public string ParameterBindPrefix { get; }
    public string OpenQuote { get; }
    public string CloseQuote { get; }
    public abstract virtual DbConnection GetDbConnection(string connectionString);
    public abstract virtual DbCommand GetDbCommand();
    public abstract virtual DbCommand GetDbCommand(string sentence, DbConnection connection);
    public abstract virtual DbDataAdapter GetDbDataAdapter(string sentence, DbConnection connection);
    public abstract virtual DbParameter GetDbParameter();
    public abstract virtual DbParameter GetDbParameter(string paramName, DbType paramType, int size);
    public abstract virtual DbType GetStandardDbType(int customParamType);
    public abstract virtual DataTable GetTableDefaults(DataManager dm, string TableName);
    public abstract virtual DataTable GetObjectSchema(DataManager dm, string tableName, string schema);
    public abstract virtual int InsertRowAndReturnIdentity(DataManager dm, string tableName, string schema, string sql);
    public abstract virtual string A();
    public abstract virtual string a();
    public abstract virtual string B();
    public abstract virtual string b();
    public abstract virtual string ConvertFunctionString(DbType datatype, string datafield);
    public abstract virtual bool IsSelect(string sentence, String& lerror);
    public abstract virtual bool IsMultiSelect(string sentence, String& lerror);
    public abstract virtual bool IsInsert(string sentence, String& lerror);
    public abstract virtual bool IsUpdate(string sentence, String& lerror);
    public abstract virtual bool IsDelete(string sentence, String& lerror);
    public abstract virtual bool IsStored(string sentence, String& lerror, String& procedureName, Int32& parameters);
    public abstract virtual bool TestSql(DataManager dm, string SqlSentence, DataTable& dt, List`1<DbParameter> params);
    public abstract virtual void DeriveParameters(DbCommand cmd);
    public abstract virtual void ClearParamsCache(string cnnstring, string stored);
    public abstract virtual bool GetStoredResult(DbCommand cmd);
    public abstract virtual string GetPaginatedSql(string SQLSentence, int FromRowNumber, int ToRowNumber);
    public abstract virtual bool DropTable(DataManager dm, string tableName);
    public abstract virtual object ConvertValue(object Value, DbType dbType);
    public abstract virtual Exception ProcessError(Exception e, string ErrorMessage);
    public abstract virtual string GetSqlFilter(string SqlFilter, string GetSqlFilter);
    public abstract virtual object parseBoolean(string value);
}
[XmlRootAttribute]
public class FLEXYGO.Data.StoredParam : object {
    public string Name;
    public object Value;
    public object OldValue;
    public string TableName;
    public bool IsKey;
    public sealed virtual XmlSchema GetSchema();
    public sealed virtual void ReadXml(XmlReader reader);
    public sealed virtual void WriteXml(XmlWriter writer);
}
[XmlRootAttribute]
public class FLEXYGO.Data.StoredParamCollection : ClassCollection`1<StoredParam> {
    public string rowId;
    public string ObjectName;
    public StoredParamCollection(string RowIdentifier, string Name);
    public sealed virtual XmlSchema GetSchema();
    public sealed virtual void ReadXml(XmlReader reader);
    public sealed virtual void WriteXml(XmlWriter writer);
    public string ToXML();
    public static StoredParamCollection FromXML(string XmlText);
}
public class FLEXYGO.Data.UserConnection : object {
    internal string A;
    internal bool A;
    internal string a;
    internal eDBType A;
    internal ArrayList A;
    internal ArrayList a;
    internal ArrayList B;
    public string ConnString { get; }
    public eDBType DBType { get; }
    public ArrayList SQLContext { get; public set; }
    public ArrayList PreSQLContext { get; public set; }
    public ArrayList PostSQLContext { get; public set; }
    public UserConnection(string ConnStringId, string ConnString, eDBType DBType, bool Encripted, ArrayList SQLContext, ArrayList PreSQLContext, ArrayList PostSQLContext);
    public string get_ConnString();
    public eDBType get_DBType();
    public ArrayList get_SQLContext();
    public void set_SQLContext(ArrayList value);
    public ArrayList get_PreSQLContext();
    public void set_PreSQLContext(ArrayList value);
    public ArrayList get_PostSQLContext();
    public void set_PostSQLContext(ArrayList value);
}
public class FLEXYGO.Data.UserConnectionCollection : ClassCollection`1<UserConnection> {
    private string A;
    private string a;
    public string ConfConnString { get; }
    public eDBType ConfConnDbType { get; }
    public string MainDataConnString { get; }
    public eDBType MainDataConnDbType { get; }
    public string ConfConnStringId { get; }
    public string MainDataConnStringId { get; }
    public UserConnectionCollection(UserConnection ConfUserConn, UserConnection MainDataUserConn);
    public UserConnectionCollection(string ConfUserConnName, string MainDataUserConnName);
    public UserConnectionCollection(IConfiguration config);
    public string get_ConfConnString();
    public eDBType get_ConfConnDbType();
    public string get_MainDataConnString();
    public eDBType get_MainDataConnDbType();
    public string get_ConfConnStringId();
    public string get_MainDataConnStringId();
    public bool Add(UserConnection UserConnection);
    public bool Remove(UserConnection UserConnection);
    public bool Contains(string UserConnStringId);
}
public class OracleStringSentences : object {
    public static string getDbSchema { get; }
    public static string getColumnsTable { get; }
    public static string dropStoredProcedure { get; }
    public static string getDataTables { get; }
    public static string get_getDbSchema();
    public static string get_getColumnsTable();
    public static string get_dropStoredProcedure();
    public static string get_getDataTables();
}
public class SqlResources : object {
    public static IGlobalVars GlobalVars;
    private static SqlResources();
    public static string getDbSchema(eDBType dbType);
    public static string getColumnsTable(eDBType dbType, string tablename);
    public static string dropStoredProcedure(eDBType dbType, string storedName);
    public static string getDataTables(eDBType dbType, string schema);
    public static string getSchemaList(eDBType dbType);
}
public class SqlStringSentences : object {
    public static string getDbSchema { get; }
    public static string getColumnsTable { get; }
    public static string dropStoredProcedure { get; }
    public static string getDataTables { get; }
    public static string get_getDbSchema();
    public static string get_getColumnsTable();
    public static string get_dropStoredProcedure();
    public static string get_getDataTables();
}
