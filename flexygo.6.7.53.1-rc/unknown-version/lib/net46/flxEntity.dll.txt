public class FLEXYGO.Objects.ColumnUtils : object {
    public static BaseCollection TranslateColumnNames(string ObjectName, DataTable Data, ConfToken Conf);
}
public class FLEXYGO.Objects.DelegatedProperty : MulticastDelegate {
    public DelegatedProperty(object object, IntPtr method);
    public virtual object Invoke();
    public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object);
    public virtual object EndInvoke(IAsyncResult result);
}
[DefaultMemberAttribute("Item")]
public class FLEXYGO.Objects.EntityCollection : object {
    private static string A;
    protected ObjectSettings _ObjectConfiguration;
    protected ConfToken _confToken;
    protected DataManager _dm;
    protected DataTable _table;
    protected object _parentObject;
    protected BaseCollection _parentDefaults;
    protected string _name;
    protected string _ControlConfig;
    protected string _sql;
    protected string _OriginalWhere;
    protected string _id;
    protected ObjectProcessCollection _Processes;
    protected bool _menusLoaded;
    protected ReportsCollection _reports;
    protected bool _ReportsLoaded;
    protected int _pageSize;
    protected bool _isCountLoaded;
    protected int _ItemCount;
    protected int _currentLoadedPage;
    public BaseCollection Context;
    protected ObjectPropertyCollection pProperties;
    public ConfToken ConfToken { get; public set; }
    public string Name { get; }
    public ObjectSettings Configuration { get; }
    public ObjectSettings ChildConfiguration { get; }
    public string Description { get; }
    public string DeleteConfirm { get; }
    public string ConnString { get; }
    public string GetObjectToken { get; }
    public bool CanInsert { get; }
    public bool CanUpdate { get; }
    public bool CanDelete { get; }
    public bool IsCollection { get; }
    public string ID { get; }
    public object ParentObject { get; public set; }
    public BaseCollection ParentDefaults { get; public set; }
    public string OriginalSQLSentence { get; }
    public string TableName { get; }
    public string SQL { get; }
    public int PageSize { get; public set; }
    public int CurrentPage { get; }
    public int PageCount { get; }
    public int Count { get; }
    public object Item { get; public set; }
    public string PrimaryKeys { get; }
    public UserConnection UserConnectionString { get; }
    public string ControlConfig { get; public set; }
    public DataManager DataManager { get; public set; }
    public string Where { get; }
    public EntityCollection(string Name, ConfToken aConfToken);
    public EntityCollection(string Name, string aWhere, ConfToken aConfToken);
    public string GetIdentifierSQL();
    private void A(string , string , ConfToken );
    public sealed virtual ConfToken get_ConfToken();
    public sealed virtual void set_ConfToken(ConfToken value);
    public sealed virtual string get_Name();
    public sealed virtual ObjectSettings get_Configuration();
    public ObjectSettings get_ChildConfiguration();
    public sealed virtual string get_Description();
    public string get_DeleteConfirm();
    public string get_ConnString();
    public sealed virtual string ParseString(string str, bool SqlParse);
    public sealed virtual string Parsevalue(string str);
    public sealed virtual string ParseWithDefaults(string sqlSentence, KeyValuePairs[] Defaults);
    public ObjectPropertyCollection Properties();
    public sealed virtual string get_GetObjectToken();
    public sealed virtual ObjectProcessCollection ProcessCollection(KeyValuePairs[] Defaults);
    public NavigationNode NavigationNodes(eNodeType NodeType, KeyValuePairs[] Defaults);
    public sealed virtual ObjectReportCollection Reports(KeyValuePairs[] Defaults);
    public ClassCollection`1<ToolBarButton> ActionsCollection();
    public bool get_CanInsert();
    public bool get_CanUpdate();
    public bool get_CanDelete();
    public sealed virtual bool get_IsCollection();
    public string get_ID();
    public object get_ParentObject();
    public void set_ParentObject(object value);
    public sealed virtual BaseCollection get_ParentDefaults();
    public sealed virtual void set_ParentDefaults(BaseCollection value);
    public string get_OriginalSQLSentence();
    public string get_TableName();
    public string get_SQL();
    public int get_PageSize();
    public void set_PageSize(int value);
    public int get_CurrentPage();
    public int get_PageCount();
    public sealed virtual int get_Count();
    public sealed virtual object get_Item(int aIndice);
    public sealed virtual void set_Item(int aIndice, object value);
    public string get_PrimaryKeys();
    public UserConnection get_UserConnectionString();
    private string A();
    private void A(string );
    public string get_ControlConfig();
    public void set_ControlConfig(string value);
    public sealed virtual DataManager get_DataManager();
    public sealed virtual void set_DataManager(DataManager value);
    public string ToJSon(int Page, int Pagesize, string OrderBy);
    public string ToJSon();
    public sealed virtual string get_Where();
    public string GetWhere(eWhereType aWhereType);
    public sealed virtual string GetWhereKeys();
    public sealed virtual ModuleToolbar GetToolBar(ModuleToolbar Toolbar, KeyValuePairs[] AdditionalParams);
    public sealed virtual ICrystalReportDocument GetCrystalReportDocument(string ReportName, string ReportSelectionFormula, eReportModes ReportMode, List`1<KeyValuePairs> ReportParams);
    public string SQLDataSentence(string OrderBy);
    public DataTable GetPageData(int Page, int Pagesize, bool withDescrips, string OrderBy, bool UseCollectionProperties, bool IsDefined);
    public DataTable GetPageData(int Page, int Pagesize, string aWhere, bool withDescrips, List`1<PropertyOrder> OrderBy, bool UseCollectionProperties);
    public DataTable GetPageData(int Page, int Pagesize, string aWhere, bool withDescrips, string OrderBy, bool UseCollectionProperties, bool IsDefined);
    public string GetPageSQL(string aWhere, bool withDescripts, List`1<PropertyOrder> OrderBy, bool UseCollectionProperties);
    public string GetPageSQL(string aWhere, bool withDescripts, string OrderBy, bool UseCollectionProperties, bool IsDefined);
    public sealed virtual IEnumerator GetEnumerator();
    public void Refresh();
    public ArrayList KeyFields();
    public DataTable GetDataView(string ViewName, int Page, int Pagesize, string aWhere, List`1<PropertyOrder> OrderBy);
    public List`1<FieldData> GetDataViewSchema(string ViewName);
    public DataTable GetDataView(string ViewName, int Page, int Pagesize, string aWhere, string OrderBy, string FindString);
    public string buildSQLViewSentence(string ViewName, string aWhere, List`1<PropertyOrder> OrderBy);
    public string buildSQLViewSentence(string ViewName, string aWhere, string OrderBy);
    public int GetDataViewCount(string ViewName, string aWhere);
    public Template GetTemplateType(string TemplateType);
    public Template GetTemplateType(string TemplateType, int page, int pageSize, string additionalWhere, List`1<PropertyOrder> OrderBy, string ViewName, bool NoData, Dictionary`2<string, TemplateGroup> GroupsInfo);
    public Template GetDefaultEditListTemplate(int page, int pageSize, string additionalWhere, List`1<PropertyOrder> orderby, string GridDataViewId);
    public Template GetTemplate(string TemplateId, bool noData, List`1& orderby, int page, int pageSize, string additionalWhere, Dictionary`2<string, TemplateGroup> GroupsInfo);
    public TemplatesCollection GetTemplateList(string TemplateType);
    public BaseCollection GetBasicTemplateList(string TemplateType);
    public BaseCollection GetBasicViewList();
    public sealed virtual Template GetTemplate(string TemplateId);
    public bool Delete(bool ReloadConfig);
    private string A(eWhereType );
    private string a(string );
    private string A(string , string );
    private string A(string , bool , bool , bool );
    private string A(bool , bool , bool , bool );
    protected string _objectWhere(string ObjectName, DataRow aRow);
    private string A(string , eWhereType );
    private string B(string );
    private string a();
    public sealed virtual ClassCollection`1<ToolBarButton> Actions();
    public sealed virtual Template GetTemplateByType(string TemplateType);
    public sealed virtual NavigationNode NavigationNode(eNodeType NodeType, KeyValuePairs[] Defaults);
}
[DefaultMemberAttribute("Item")]
public class FLEXYGO.Objects.EntityObject : object {
    private static string A;
    protected bool _IsNew;
    protected string _name;
    protected string _where;
    protected DataManager _dm;
    public DataSet _dataset;
    protected ClassCollection`1<EntityCollection> _relatedObjects;
    protected ObjectProcessCollection _Processes;
    protected bool _ProcessLoaded;
    protected ReportsCollection _reports;
    protected bool _reportsLoaded;
    protected Exception _lastException;
    protected ProcessHelper _lastReturnvalues;
    protected EntityCollection _parent;
    protected BaseCollection _parentDefaults;
    protected BaseCollection _lastvalues;
    protected string _id;
    protected BaseCollection _keyFields;
    protected bool _useTransactions;
    protected ConfToken _confToken;
    protected ObjectSettings _ObjectConfiguration;
    protected bool _newDataManager;
    public BaseCollection Context;
    protected ObjectPropertyCollection pProperties;
    private BaseCollection A;
    public DataSet GetData { get; }
    public string GetObjectToken { get; }
    public bool CanUpdate { get; }
    public bool CanDelete { get; }
    public bool CanInsert { get; }
    public bool CanView { get; }
    public bool CanViewCollection { get; }
    public bool CanPrint { get; }
    public bool CanClone { get; }
    public ObjectSettings Configuration { get; }
    public string Name { get; }
    public Exception LastException { get; }
    public ProcessHelper LastReturnvalues { get; }
    public ConfToken ConfToken { get; public set; }
    public string Description { get; }
    public string DeleteConfirm { get; }
    public bool IsCollection { get; }
    public string ConnString { get; }
    public eDBType DBType { get; }
    public string ID { get; }
    public EntityCollection ParentObject { get; public set; }
    public BaseCollection ParentDefaults { get; public set; }
    public string Sql { get; }
    public string ParentName { get; }
    public string TableName { get; }
    public string Where { get; }
    public BaseCollection KeyCollection { get; }
    public string KeyFields { get; }
    public string KeyWhereString { get; }
    public UserConnection UserConnectionString { get; }
    public bool IsNew { get; public set; }
    public int Count { get; }
    public bool HasChanges { get; public set; }
    public object Item { get; public set; }
    public object Item { get; public set; }
    public bool UseTransactions { get; public set; }
    public DataManager DataManager { get; public set; }
    public EntityObject(string ObjectName, ConfToken aConfToken);
    public EntityObject(string ObjectName, ConfToken aConfToken, DataManager aDm);
    public EntityObject(string ObjectName, string aWhere, ConfToken aConfToken);
    public EntityObject(string ObjectName, string aWhere, ConfToken aConfToken, DataManager aDm);
    public static EntityObject GetObject(string ObjectName, ConfToken aConfToken);
    public static EntityObject GetObject(string ObjectName, ConfToken aConfToken, DataManager aDm);
    private void A(string , string , ConfToken );
    private void A(string , string , ConfToken , DataManager );
    public DataSet get_GetData();
    public sealed virtual string get_GetObjectToken();
    public bool get_CanUpdate();
    public bool get_CanDelete();
    public bool get_CanInsert();
    public string GetFakeSelect();
    public bool get_CanView();
    public bool get_CanViewCollection();
    public bool get_CanPrint();
    public bool get_CanClone();
    public sealed virtual ObjectSettings get_Configuration();
    public sealed virtual string get_Name();
    public Exception get_LastException();
    public ProcessHelper get_LastReturnvalues();
    public sealed virtual ConfToken get_ConfToken();
    public sealed virtual void set_ConfToken(ConfToken value);
    public sealed virtual string get_Description();
    public string get_DeleteConfirm();
    public sealed virtual bool get_IsCollection();
    public string get_ConnString();
    public eDBType get_DBType();
    public string get_ID();
    public EntityCollection get_ParentObject();
    public void set_ParentObject(EntityCollection value);
    public sealed virtual BaseCollection get_ParentDefaults();
    public sealed virtual void set_ParentDefaults(BaseCollection value);
    public string get_Sql();
    public string get_ParentName();
    public string get_TableName();
    public sealed virtual string get_Where();
    public BaseCollection get_KeyCollection();
    public string get_KeyFields();
    public string get_KeyWhereString();
    public UserConnection get_UserConnectionString();
    public bool get_IsNew();
    public void set_IsNew(bool value);
    public sealed virtual int get_Count();
    public bool get_HasChanges();
    public void set_HasChanges(bool value);
    public sealed virtual IEnumerator GetEnumerator();
    public sealed virtual object get_Item(int Index);
    public sealed virtual void set_Item(int Index, object value);
    public object get_Item(string aProperty);
    public void set_Item(string aProperty, object value);
    public bool get_UseTransactions();
    public void set_UseTransactions(bool value);
    public sealed virtual DataManager get_DataManager();
    public sealed virtual void set_DataManager(DataManager value);
    public string ToJson();
    public bool CanEditProperty(string PropertyName);
    public bool CanViewProperty(string PropertyName);
    public sealed virtual string ParseString(string str, bool SQLParse);
    private string A(string , string );
    public sealed virtual string Parsevalue(string str);
    public sealed virtual string ParseWithDefaults(string sqlSentence, KeyValuePairs[] Defaults);
    public BaseCollection Fields();
    public ObjectPropertyCollection Properties();
    public ObjectPropertyCollection DBProperties(bool includeDisconnected, bool IncludeHasDefinition);
    public sealed virtual ObjectReportCollection Reports(KeyValuePairs[] Defaults);
    public ClassCollection`1<ToolBarButton> ActionsCollection();
    public sealed virtual ObjectProcessCollection ProcessCollection(KeyValuePairs[] Defaults);
    public NavigationNode NavigationNodes(eNodeType NodeType, KeyValuePairs[] Defaults);
    public void Read(string aWhere);
    public virtual bool Insert(bool ReloadConfig, string LastProcessName, string LastAfterProcessName, bool IgnoreChainProcess);
    public bool InsertProcess(string aTable, eUpdateType InsertType, string InsertProcessName);
    public void LogView();
    public virtual bool Update(bool ReloadConfig, string LastProcessName, string LastAfterProcessName);
    public void RefreshAditionalKeys(ObjectAditionalTableSettings lAdditional);
    public sealed virtual string GetWhereKeys();
    private void A(eDBAction , string , DateTime );
    private string A(eDBAction );
    private string A();
    public bool UpdateProcess(eUpdateType UpdateType, string UpdateProcessName);
    public bool UpdateProcessTable(eUpdateType UpdateType, string UpdateProcessName, string TableName);
    public bool UpdateWithLastValues();
    public bool DeleteProcess(string aTable, eUpdateType DeleteType, string DeleteProcessName);
    public virtual bool Delete(bool ReloadConfig, string LastProcessName, string LastAfterProcessName);
    public void CloneFrom(EntityObject aEntityObject, bool IsNew);
    public void CloneFrom(EntityObject aEntityObject);
    public string GetDisplayvalue(ObjectProperty p);
    public BasicPropertyCollection BasicProperties(string viewName, bool GetAll);
    public Template GetTemplateType(string TemplateType);
    public Template GetDefaultTemplate(string TemplateType);
    public sealed virtual Template GetTemplate(string TemplateId);
    public TemplatesCollection GetTemplateList(string TemplateType);
    public BaseCollection GetBasicTemplateList(string TemplateType);
    public DataTable GetDataView(string ViewName, int Page, int Pagesize, string aWhere, string OrderBy, string CnnString, string FindString);
    public string buildSQLViewSentence(string ViewName, string aWhere, string OrderBy);
    public int GetDataViewCount(string ViewName, string aWhere);
    public List`1<BaseCollection> GetViewColumnsNames(string ViewName, string KeyName);
    public EntityCollection RelatedObjects(string ObjectName);
    public ClassCollection`1<EntityCollection> RelatedMenuVisibleObjects();
    public ClassCollection`1<EntityCollection> RelatedObjects();
    private ClassCollection`1<EntityCollection> A(bool );
    private BaseCollection A(string );
    public void RelatedObjectsReload();
    public sealed virtual ModuleToolbar GetToolBar(ModuleToolbar Toolbar, KeyValuePairs[] AdditionalParams);
    public sealed virtual ICrystalReportDocument GetCrystalReportDocument(string ReportName, string ReportSelectionFormula, eReportModes ReportMode, List`1<KeyValuePairs> ReportParams);
    public Stream GetCrystalReportDocumentStream(string ReportName, string ReportSelectionFormula, eReportModes ReportMode, List`1<KeyValuePairs> ReportParams);
    private void a();
    private void B();
    private bool A(string , eDBType , eUpdateType , string , bool );
    private bool A(string , eDBType , eUpdateType , string , bool , DataRowVersion );
    private bool a(string , eDBType , eUpdateType , string , bool );
    private void a(string );
    private int a(string , string );
    private void B(string );
    private void b();
    private void b(string );
    private void A(DataTable );
    public object ParseDefaultValues(object avalue);
    private bool A(string , DataRowVersion );
    private bool C(string );
    private bool c(string );
    private bool A(string , Boolean& , string );
    private bool a(string , Boolean& , string );
    private string D(string );
    private bool B(string , Boolean& , string );
    private bool b(string , Boolean& , string );
    private bool C(string , Boolean& , string );
    private bool c(string , Boolean& , string );
    protected string _keyFieldsStr();
    protected FieldSettingsCollection _getKeyFields();
    protected string _whereKeyFields(DataRowVersion aVersion, bool WithTableName);
    protected string _getRelatedObjectsPropertyvalues(string aProperty, string aField);
    protected string _buildRelatedObjectsWhere(string aWhere, string ObjectName);
    private string A(string , String& , Object& );
    public void _AppendField(DataManager dm, DataTable lTable, DataColumn lCol, StringBuilder& lFields, StringBuilder& lvalues);
    private string a(string , DataRowVersion );
    private string B(string , string );
    private string d(string );
    private bool E(string );
    private bool e(string );
    private void F(string );
    private void f(string );
    public sealed virtual Template GetTemplateByType(string TemplateType);
    public sealed virtual NavigationNode NavigationNode(eNodeType NodeType, KeyValuePairs[] Defaults);
    public sealed virtual ClassCollection`1<ToolBarButton> Actions();
}
public class FLEXYGO.Objects.Enumerator : object {
    private int A;
    private ICollection A;
    public object Current { get; }
    public Enumerator(ICollection aCol);
    public sealed virtual void Reset();
    public sealed virtual bool MoveNext();
    public sealed virtual object get_Current();
}
[DefaultMemberAttribute("Item")]
public interface FLEXYGO.Objects.ICollection {
    public int Count { get; }
    public object Item { get; public set; }
    public abstract virtual int get_Count();
    public abstract virtual object get_Item(int aIndice);
    public abstract virtual void set_Item(int aIndice, object value);
}
[DefaultMemberAttribute("Item")]
public interface FLEXYGO.Objects.IEntity {
    public string Name { get; }
    public string Description { get; }
    public ConfToken ConfToken { get; public set; }
    public string GetObjectToken { get; }
    public ObjectSettings Configuration { get; }
    public bool IsCollection { get; }
    public string Where { get; }
    public DataManager DataManager { get; public set; }
    public object Item { get; public set; }
    public BaseCollection ParentDefaults { get; public set; }
    public abstract virtual string get_Name();
    public abstract virtual string get_Description();
    public abstract virtual ConfToken get_ConfToken();
    public abstract virtual void set_ConfToken(ConfToken value);
    public abstract virtual string get_GetObjectToken();
    public abstract virtual ObjectSettings get_Configuration();
    public abstract virtual bool get_IsCollection();
    public abstract virtual string get_Where();
    public abstract virtual DataManager get_DataManager();
    public abstract virtual void set_DataManager(DataManager value);
    public abstract virtual string GetWhereKeys();
    public abstract virtual object get_Item(int Index);
    public abstract virtual void set_Item(int Index, object value);
    public abstract virtual ObjectReportCollection Reports(KeyValuePairs[] Defaults);
    public abstract virtual ClassCollection`1<ToolBarButton> Actions();
    public abstract virtual ObjectProcessCollection ProcessCollection(KeyValuePairs[] Defaults);
    public abstract virtual BaseCollection get_ParentDefaults();
    public abstract virtual void set_ParentDefaults(BaseCollection value);
    public abstract virtual NavigationNode NavigationNode(eNodeType NodeType, KeyValuePairs[] Defaults);
    public abstract virtual Template GetTemplate(string TemplateId);
    public abstract virtual Template GetTemplateByType(string TemplateType);
    public abstract virtual string ParseString(string str, bool SQLParse);
    public abstract virtual string Parsevalue(string str);
    public abstract virtual string ParseWithDefaults(string str, KeyValuePairs[] Defaults);
    public abstract virtual ModuleToolbar GetToolBar(ModuleToolbar Toolbar, KeyValuePairs[] AdditionalParams);
    public abstract virtual ICrystalReportDocument GetCrystalReportDocument(string ReportName, string ReportSelectionFormula, eReportModes ReportMode, List`1<KeyValuePairs> ReportParams);
}
public class FLEXYGO.Processing.ProcessManager : object {
    public string ProcessName;
    public ConfToken ConfToken;
    public ProcessConfig Config;
    private List`1<string> A;
    public ProcessManager(string ProcessName, ConfToken aConfToken);
    public ProcessHelper run(IEntity entity, bool LogAction);
    public ProcessHelper run(IEntity entity, KeyValuePairs[]& AdditionalProcessParams, bool LogAction);
    public string getNextProcess(string LastExecutedProcess);
    public void getProcessOrder(string ProcessName);
    public ProcessHelper runProcessChain(IEntity Entity, KeyValuePairs[] ProcessParams, string LastProcessName, bool isEntityRelated);
    public ProcessHelper runProcessChainFromUntil(IEntity Entity, KeyValuePairs[] ProcessParams, string FromProcessName, string UntilProcessName);
    private string A(string , KeyValuePairs[] , IEntity );
    public bool GetParamList(BaseCollection Params, string binPath);
    private string A(string );
    private string a(string );
    private bool A(BaseCollection& , string );
    private void A(IEntity , string , BaseCollection , DateTime );
    public static void LogExternalAction(ConfToken ConfToken, DateTime TimeStamp, DateTime EndTimeStamp, string Message, object processName, object ObjectName, object ObjectKey);
    private string A(IEntity );
    public string ParseString(IEntity Entity, string str);
    public BaseCollection prepareParams(IEntity entity, KeyValuePairs[] AdditionalProcessParams);
    private object A(string , string );
    private void A(BaseCollection , ProcessHelper& );
    public static Assembly generateAssemblyFromCode(string code, string binPath, ConfToken confToken);
    private void A(BaseCollection& , IEntity , ProcessHelper& );
    public static ProcessHelper execProcess(string ProcessName, string ObjectName, string ObjectWhere, KeyValuePairs[] ProcessParams, ConfToken ConfToken);
    public static ProcessHelper execEntityProcess(string ProcessName, IEntity Entity, KeyValuePairs[] ProcessParams, ConfToken ConfToken);
}
