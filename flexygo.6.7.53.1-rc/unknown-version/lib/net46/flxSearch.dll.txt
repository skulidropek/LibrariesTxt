public class filterHelper : object {
    private string A;
    private string a;
    private string B;
    private object A;
    private string b;
    public string ObjectName { get; public set; }
    public string ObjectProperty { get; public set; }
    public string ObjectPath { get; public set; }
    public object Value { get; public set; }
    public string FilterType { get; public set; }
    public string get_ObjectName();
    public void set_ObjectName(string value);
    public string get_ObjectProperty();
    public void set_ObjectProperty(string value);
    public string get_ObjectPath();
    public void set_ObjectPath(string value);
    public object get_Value();
    public void set_Value(object value);
    public string get_FilterType();
    public void set_FilterType(string value);
}
public class FLEXYGO.Filtering.Search : object {
    public static string GetSearchWhere(string SearchId, string SearchType, filterHelper[] FilterValues, string ObjectName, string UserId);
    public static BaseCollection GetSearchCriterias(string UserId, string findString, string ObjectName);
    public static string GetSearchCriteriasBySearchId(string UserId, string findString, string SearchId);
    public static BaseCollection GetUserSearchCriteriaSettings(string UserId);
    public static bool SaveUserSearchCriteriaOrder(string UserId, DataTable OrderedObjects);
    public static bool SaveUserSearchCriteriaCheck(string UserId, string SearchId, bool Enabled);
    internal static string A(string , DataView , bool );
    public static string getAditionalJoins(string ParentTableName, ObjectSettings cnf, DataManager dm);
}
public class FLEXYGO.Filtering.SearchCriteria : object {
    public string SearchId;
    public string ObjectName;
    public string CollectionName;
    public string Descrip;
    public string IconClass;
    public int Count;
    public string Filter;
    public bool Active;
    public int Order;
}
public class PathObject : object {
    public string ObjectName;
    public string ObjectTable;
    public BaseCollection TableKeys;
}
public class PropertySelects : object {
    public string SqlSentence;
    public string DisplayField;
    public BaseCollection ValueField;
}
public class WhereExistsBuilder : object {
    private string A;
    private BaseCollection A;
    private BaseCollection a;
    private Dictionary`2<string, PathObject> A;
    private Dictionary`2<string, PropertySelects> A;
    public WhereExistsBuilder(string searchObjectTable, BaseCollection searchObjectKeys, BaseCollection searchProperties, Dictionary`2<string, PathObject> pathObjects, Dictionary`2<string, PropertySelects> propertySelects);
    public string GetExists();
}
