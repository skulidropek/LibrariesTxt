public class Flexygo.CustomLoggerService : LoggerService {
    [CompilerGeneratedAttribute]
private static EntityObject A;
    public static EntityObject CurrentReport { get; public set; }
    [CompilerGeneratedAttribute]
public static EntityObject get_CurrentReport();
    [CompilerGeneratedAttribute]
public static void set_CurrentReport(EntityObject value);
    public virtual void Error(Exception exception, string message);
}
public class Flexygo.CustomReportStorageWebExtension : ReportStorageWebExtension {
    public static ReportStorageWebExtension ReportStorageExtension;
    private static CustomReportStorageWebExtension();
    public virtual bool CanSetData(string url);
    public virtual Dictionary`2<string, string> GetUrls();
    public virtual bool IsValidUrl(string ReportName);
    public virtual Byte[] GetData(string ReportName);
    public virtual void SetData(XtraReport report, string ReportName);
    public virtual string SetNewData(XtraReport report, string defaultUrl);
}
public class Flexygo.MyDataSourceWizardDBSchemaProviderFactory : object {
    public sealed virtual IDBSchemaProviderEx Create();
}
public class Flexygo.ReportStorageHelper : object {
    public static BaseCollection SQLDataType;
    public static XtraReport LoadReport(string reportName);
    public static void SaveReportLayout(string reportName, Byte[] reportLayout);
}
public class Flexygo.SynonymDBSchemaProvider : object {
    private static Dictionary`2<string, object> A;
    private static SynonymDBSchemaProvider();
    public void setDataStructure(SqlDataConnection connection);
    public sealed virtual void LoadColumns(SqlDataConnection connection, DBTable[] tables);
    public sealed virtual DBTable[] GetTables(SqlDataConnection connection, String[] tableList);
    public sealed virtual DBTable[] GetViews(SqlDataConnection connection, String[] viewList);
    public sealed virtual DBStoredProcedure[] GetProcedures(SqlDataConnection connection, String[] procedureList);
}
public class flxSysReports.Reports : object {
    private static Dictionary`2<string, DBSchema> A;
    private static Reports();
    public static void clearSchemas();
    public static XtraReport getReportDocument(IEntity Entity, string ReportName, string ReportSelectionFormula, eReportModes ReportMode, List`1<KeyValuePairs> ReportParams);
    private static string A(string , string , String[] );
    private static void A(XtraReport , string , string , string );
    public static CustomSqlQuery cloneSqlQuery(SqlQuery originalQuery);
    public static bool CreateReportsParameters(EntityObject Entity, ProcessHelper Ret);
}
