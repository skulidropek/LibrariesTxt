public class FLEXYGO.UI.Chart : object {
    public static ChartHelper GetHTML(string ObjectName, string ObjectWhere, string AdditionalWhere, string ModuleName, string PageName);
    private static ArrayList A(EntityObject , ModuleDefinition , string );
    public static ChartHelper GetSettings(string ChartSettingName);
}
public class FLEXYGO.UI.Chatter : object {
    public static List`1<MessageResult> GetMessages(string ObjectName, string ObjectId);
    public static MessageResult SetMessage(string DestinationObjectName, string DestinationObjectId, Nullable`1<Guid> DestinationParentMessage, string Content, Attachment[] Attachments, string ContentMarked, string Mentions, string ChatterLink);
    public static MessageResult UpdateMessage(string MessageId, string Content, Attachment[] Attachments, string ContentMarked, string Mentions, string DestinationObjectName, string DestinationObjectId, string ChatterLink);
    public static bool DeleteMessage(string MessageId, string DestinationObjectName, string DestinationObjectId);
    public static MentionsConfig SetMentions(string ObjectName);
}
public class FLEXYGO.UI.DocumentManager : object {
    private static object A;
    private static DocumentManager();
    public static DocumentResult[] GetDocument(string ObjectId, string ObjectName, string DocGuid, string AdditionalWhere, string CategoryId);
    private static DocumentResult[] A(string , string , string , string , string );
    private static DocumentResult[] a(string , string , string , string , string );
    public static DocumentResult AppendToDocument(string ObjectName, string ObjectId, string DocumentId, string Base64, bool LastAppend);
    private static string A(string , string , string );
    private static string a(string , string , string );
    public static DocumentResult SetDocument(string ObjectName, string ObjectId, string DocumentName, string DocumentType, string Base64, string CloudId, string CloudLink, string DownloadLink, string DocAction, bool PartialUpload, bool IgnoreIfExists, ConfToken ConfToken, string CategoryId, string LastProcessName, string LastAfterProcessName, Nullable`1<double> FileSizeBytes);
    public static DocumentResult SetDocumentFLX(string ObjectName, string ObjectId, string DocumentName, string DocumentType, string Base64, string CloudId, string CloudLink, string DownloadLink, string DocAction, string DefaultCategory, bool PartialUpload, bool IgnoreIfExists, ConfToken ConfToken, string CategoryId, string LastProcessName, string LastAfterProcessName, Nullable`1<double> FileSizeBytes);
    private static DocumentResult A(string , string , string , string , string , string , string , string , string , string , string , bool , ConfToken , string , string , string , Nullable`1<double> );
    private static string A(DataManager , string );
    private static string a(DataManager , string );
    public static DocumentResult RemoveDocument(string DocGuid, string ObjectName, string ObjectId, string LastProcessName, string LastAfterProcessName);
    private static DocumentResult B(string , string , string , string , string );
    private static DocumentResult b(string , string , string , string , string );
    public static DocumentResult UpdateDocument(string DocGuid, string ObjectName, string ObjectId, string Name, string Description, string CategoryId, string LastProcessName, string LastAfterProcessName);
    public static void LinkDocument(string DocGuid, string ObjectName, string ObjectId);
    private static DocumentResult A(string , string , string , string , string , string , string , string );
    private static void B(string , string , string );
    private static void b(string , string , string );
    private static DocumentResult a(string , string , string , string , string , string , string , string );
    public static CategoryResult[] GetCategories(string Mode, string Objectname);
    private static CategoryResult[] A(string );
    private static CategoryResult[] a(string );
    public static ConfigResult GetConfig(string ObjectName);
    private static ConfigResult B(string );
    public static bool GetDriveAccount(string Code);
    public static string GetDriveToken();
    public static DocumentResult DownloadAllDocuments(string ObjectName, string ObjectId, string AdditionalWhere, string CategoryId);
    private static DocumentResult A(string , string , string , string );
    private static DocumentResult a(string , string , string , string );
    public static DocumentResult sendSelectedDocuments(string ObjectName, string ObjectId, string Attachments, string mailTo, string mailSubject, string mailBody, object CC);
    private static DocumentResult A(string , string , string , string , string , string , object );
    private static DocumentResult a(string , string , string , string , string , string , object );
}
public class FLEXYGO.UI.EasyLine : object {
    public static EasyLineHelper GetHTML(string ObjectName, string ObjectWhere, string ModuleName, string PageName);
    private static DataTable A(EntityObject , ModuleDefinition );
}
public class FLEXYGO.UI.EasyPie : object {
    public static EasyPieHelper GetHTML(string ObjectName, string ObjectWhere, string ModuleName, string PageName);
    private static DataTable A(EntityObject , ModuleDefinition );
}
public class FLEXYGO.UI.Edit : object {
    public static EditHelper GetEditTemplate(string ObjectName, string ObjectWhere, string ModuleName, KeyValuePairs[] Defaults, string TemplateId, bool Clone);
    internal static List`1<FormAction> A(string , FormSender );
    public static ReportParamsHelper GetReportParamsTemplate(string ObjectName, string ObjectWhere, string ModuleName, string ReportName, KeyValuePairs[] Defaults);
    private static Template A(EntityObject );
    public static ProcessParamsHelper GetProcessParamsTemplate(string ObjectName, string ObjectWhere, string ModuleName, string ProcessName, KeyValuePairs[] Defaults);
    public static ObjectReportsParamCollection ReportParamsDefaults(ObjectReportsParamCollection Params, EntityObject Entity, KeyValuePairs[] Defaults);
    private static ProcessParamCollection A(ProcessParamCollection , EntityObject , KeyValuePairs[] );
    private static ObjectPropertyCollection A(ObjectPropertyCollection , EntityObject , KeyValuePairs[] );
    private static Template a(EntityObject );
    public static ObjectProperty GetPropConfig(string Mode, string Name, string PropertyName);
    public static List`1<BaseCollection> GetComboData(string Mode, string ObjectName, string PropertyName, string CryptedSql, string CryptedFilter, string Value, int Page, string AdditionalWhere);
    public static object GetComboText(string Mode, string ObjectName, string PropertyName, string CryptedSql, string CryptedFilter, string Value, int Page, string AdditionalWhere, string SQLValueField);
    public static object GetComboTextByView(string ObjectName, string ViewName, string ValueField, string Value);
    public static List`1<BaseCollection> GetComboDataView(string ObjectName, string ViewName, string DisplayField, string Value, int Page, string PageSize, string AdditionalWhere, string SQLFilter, string CnnString, bool HasSecurityObject);
    public static bool ResizeProperties(string Mode, PropertyResize[] Properties);
    public static bool InsertSeparator(string Mode, string Name, string PropertyName, int Above);
    public static bool InsertPlaceHolder(string Mode, string Name, string PropertyName, int Above);
    public static List`1<string> GetNewProperties(string ObjectName);
    public static bool AddNewFields(string ObjectName, string FieldName, int FieldType, string TableName);
    public static bool AddNewDetachedProperty(string ObjectName, string PropertyName, string PropertyLabel);
    public static bool AddNewProperties(string ObjectName, String[] Properties);
    private static void A(DataManager , EntityObject , string , string );
    private static List`1<FormAction> A(string , string , string , bool , bool , KeyValuePairs[] );
    public static List`1<FormAction> ProcessAllDependencies(string ObjectName, string ProcessName, string ReportName, bool IsNew, bool IsView, KeyValuePairs[] Properties);
    public static BaseCollection ProcessAllListDependencies(List`1<ObjectRowDependencyHelper> ObjectRowDependency);
    public static List`1<FormAction> ProcessDependencies(string ObjectName, string ProcessName, string ReportName, string PropertyName, KeyValuePairs[] Properties);
    public static List`1<FilterAction> ProcessFilterDependencies(string SearchId, string ObjectName, string PropertyObjectName, string PropertyName, KeyValuePairs[] Properties);
    public static bool ValidateProperty(string ObjectName, string ProcessName, string ReportName, string PropertyName, KeyValuePairs[] Properties);
    private static BaseCollection A(ObjectPropertyCollection , BaseCollection& );
    private static FormAction A(ObjectDependantProperty , ObjectProperty , BaseCollection , string , bool , bool );
    private static bool A(string , string , DependencyType , FormAction& );
    private static FilterAction A(ObjectDependantFilterProperty , SearchPropertyCollection , ObjectPropertyCollection , BaseCollection );
    private static string A(string , BaseCollection , ObjectPropertyCollection );
    private static string A(string , BaseCollection , ObjectPropertyCollection , SearchPropertyCollection );
    private static object A(string , BaseCollection , DataManager , ObjectPropertyCollection );
    public static bool SaveDependenciesConfig(string ObjectName, string ProcessName, string ReportName, string PropertyName, DependencyHelper[] Dependencies);
    public static bool SaveFilterDependenciesConfig(string SearchId, string ObjectName, string PropertyName, DependencyFilterHelper[] Dependencies);
    public static EditHelper GetEditConfig(string ObjectName);
    public static ProcessParamsHelper GetProcessParamsConfig(string ProcessName);
    public static ReportParamsHelper GetReportParamsConfig(string ReportName);
    public static EditHelper GetPropertyBasicConfig(string ObjectName, string PropertyName);
}
public class FLEXYGO.UI.Entity : object {
    private static int A;
    public static EntityHelper ReadEntity(string ObjectName, string ObjectWhere);
    public static EntityHelper InsertEntity(string ObjectName, KeyValuePairs[] Properties, string LastProcessName, string LastAfterProcessName);
    private static BasicPropertyCollection A(BasicPropertyCollection );
    public static EntityHelper UpdateEntity(string ObjectName, string ObjectWhere, KeyValuePairs[] Properties, string LastProcessName, string LastAfterProcessName);
    public static string GetDeleteConfirm(string ObjectName, string ObjectWhere);
    public static EntityHelper Delete(string ObjectName, string ObjectWhere, string LastProcessName, string LastAfterProcessName);
    public static EntityHelper DeleteEntity(string ObjectName, string ObjectWhere, string LastProcessName, string LastAfterProcessName);
    private static EntityHelper A(string , string );
    public static NavigationNodes GetProcesses(string ObjectName, string ObjectWhere, string Options, KeyValuePairs[] Defaults);
    public static List`1<BaseCollection> GetView(string ObjectName, string ObjectWhere, string ViewName, string Page, string PageSize, string Filter, string OrderBy, bool WithDescrips);
    public static int GetViewCount(string ObjectName, string ObjectWhere, string ViewName, string Filter);
    public static List`1<BaseCollection> GetViewColumnsNames(string ObjectName, string ViewName);
    public static TemplateHelper GetTemplateByType(string ObjectName, string ObjectWhere, string TemplateType, string Page, string PageSize, string Filter, string OrderBy);
    public static TemplateHelper GetTemplateById(string ObjectName, string ObjectWhere, string TemplateId, string Page, string PageSize, string Filter, string OrderBy);
    private static TemplateHelper A(string , string , string , string , string , string , string , string );
    public static ObjBasicConfig getConfig(string ObjectName);
}
public class FLEXYGO.UI.File : object {
    public static FileResult SaveFile(string Mode, string ObjectName, string PropertyName, string Base64, string Name, KeyValuePairs[] FormValues);
}
public class FLEXYGO.UI.FileBrowser : object {
    private static void A(string , string , List`1<string> );
    private static void A(List`1<string> );
    private static void A(string , List`1<string> );
    private static void A(string , string );
    private static void A(string );
    private static List`1<DirEntriesResult> A(string , string , string , string );
    public static List`1<DirEntriesResult> GetData(string ObjectName, string ObjectWhere, string ModuleName, string ActionType, List`1<string> SelectedEntries, string NewFolderName, string Path);
    public static DocumentResult SetDocument(string ObjectName, string ObjectWhere, string ModuleName, string DocumentName, string DocumentType, string Base64, string DocAction, bool PartialUpload, string CurrentPath);
    public static bool AppendToDocument(string ObjectName, string ObjectWhere, string ModuleName, string DocumentName, string CurrentPath, string Base64, bool LastAppend);
    public static DocumentResult RemoveDocument(string ObjectName, string ObjectWhere, string ModuleName);
    private static string A(string , string , string );
    private static void A(string , List`1<DirEntriesResult> );
    private static void A(string , int , List`1<DirEntriesResult> );
    private static void a(string , List`1<DirEntriesResult> );
}
public class FLEXYGO.UI.Funnel : object {
    public static FunnelHelper GetHTML(string ObjectName, string ObjectWhere, string AdditionalWhere, string ModuleName, string PageName);
    private static ArrayList A(EntityObject , ModuleDefinition , string );
}
public class FLEXYGO.UI.Html : object {
    public static HtmlHelper GetHTML(string ObjectName, string ObjectWhere, string ModuleName, string PageName, KeyValuePairs[] Defaults);
}
public class FLEXYGO.UI.Image : object {
    public static ImageRetHelper SaveFile(string Mode, string ObjectName, string PropertyName, string FileName, string Base64, string CurrentValue, KeyValuePairs[] FormValues, string Name);
}
public class FLEXYGO.UI.ImageManager : object {
    private static object A;
    private static ImageManager();
    public static ImageResult[] GetImages(string ObjectId, string ObjectName, string ImageId, string AdditionalWhere, string imageClassId);
    private static ImageResult[] A(string , string , string , string , string );
    private static ImageResult[] a(string , string , string , string , string );
    public static ImageResult SetImage(string ObjectName, string ObjectId, string Name, string Base64, bool IgnoreIfExists, ConfToken ConfToken, string imageClassId, string creationDate, string LastProcessName, string LastAfterProcessName);
    public static ImageResult SetImageFLX(string ObjectName, string ObjectId, string Name, string Base64, bool IgnoreIfExists, ConfToken ConfToken, string imageClassId, string creationDate, string Descrip, string LastProcessName, string LastAfterProcessName);
    private static ImageResult A(string , string , string , string , string , bool , ConfToken , string , string , string );
    public static ImageResult RemoveImage(string ImageId, string ObjectName, string LastProcessName, string LastAfterProcessName);
    private static ImageResult A(string , string , string );
    private static ImageResult A(string , string , string , string );
    public static ImageResult UpdateImage(string ImageId, bool MainImage, int OrderNumber, string ObjectName);
    private static ImageResult A(string , bool , int );
    private static ImageResult A(string , bool , int , string );
    public static ClassificationResult[] GetClassification();
    public static ImageResult RemoveAllImages(string ObjectName, string ObjectId, string AdditionalWhere, string imageClassId);
    private static ImageResult a(string , string , string , string );
    private static ImageResult B(string , string , string , string , string );
    public static ImageResult DownloadAllImages(string ObjectName, string ObjectId, string AdditionalWhere, string imageClassId);
    private static ImageResult B(string , string , string , string );
    private static ImageResult b(string , string , string , string , string );
    private static A A(string );
}
public class FLEXYGO.UI.ImageRecognitionManager : object {
    private static object A;
    private static ImageRecognitionManager();
    public static ImageResult[] GetImages(string ObjectId, string ObjectName, string ImageId, string AdditionalWhere, string imageClassId);
    private static ImageResult[] A(string , string , string , string , string );
    public static ImageResult SetImage(string ObjectName, string ObjectId, string Name, string Base64, bool IgnoreIfExists, ConfToken ConfToken, string imageClassId);
    public static ImageResult SetImageFLX(string ObjectName, string ObjectId, string Name, string Base64, bool IgnoreIfExists, ConfToken ConfToken, string imageClassId);
    public static void GenerateEncodings(ConfToken ConfToken);
    public static ImageResult RemoveImage(string ImageId, string ObjectName);
    private static ImageResult A(string );
    public static ImageResult UpdateImage(string ImageId, bool MainImage, int OrderNumber, string ObjectName);
    private static ImageResult A(string , int );
    public static ImageResult RemoveAllImages(string ObjectName, string ObjectId, string AdditionalWhere, string imageClassId);
    private static ImageResult A(string , string , string , string );
    public static ImageResult DownloadAllImages(string ObjectName, string ObjectId, string AdditionalWhere, string imageClassId);
    private static ImageResult a(string , string , string , string );
}
public class FLEXYGO.UI.Kanban : object {
    public static KanbanHelper GetKanban(string ObjectName, string ObjectWhere, string ModuleName, string AdditionalWhere, object searchId, filterHelper[] filterValues);
    public static KanbanHelper GetKanbanColumn(string ObjectName, string ObjectWhere, string ModuleName, string AdditionalWhere, string ColumnId, object searchId, filterHelper[] filterValues);
    private static KanbanSettingsHelper A(string );
    private static List`1<KanbanSettingOrdersHelper> a(string );
}
public class FLEXYGO.UI.List : object {
    public static ListHelper GetList(string ObjectName, string ObjectWhere, string ModuleName, string PageName, int Page, List`1<PropertyOrder> OrderInfo, string AdditionalWhere, string Mode, object SearchId, filterHelper[] FilterValues, string TemplateId, string ViewId, Nullable`1<int> PageSize, string PresetId, Dictionary`2<string, TemplateGroup> GroupsInfo, KeyValuePairs[] Defaults);
    public static ListHelper GetSearch(string ObjectName, string ObjectWhere, string ModuleName, string PageName, int Page, List`1<PropertyOrder> OrderInfo, string AdditionalWhere, string Mode, object SearchId, filterHelper[] FilterValues);
    public static SearchSettingsCollection LoadFilters(string CollectionName);
    private static BaseCollection A(EntityCollection );
    private static ObjectProperty A(ObjectProperty );
    public static UserSavedSearchesCollection LoadUserSavedSearches(string ObjectName);
    public static List`1<BaseCollection> GetPageList(string ObjectName, string CryptedSql, int Page, int PageSize, bool RemoveKeys, KeyValuePairs[] Filters, string ModuleName, string PageName);
    public static int GetCount(string ObjectName, string CryptedSql, KeyValuePairs[] Filters, string ModuleName, string PageName);
    private static DataTable A(String& , string , int , int , List`1<PropertyOrder> );
    public static List`1<BaseCollection> SetTableDataKeys(List`1<BaseCollection> TableData, string ObjectName, bool removeKey);
    public static Object[] GetBagPage(string ObjectName, string ObjectWhere, string AdditionalWhere);
    public static TemplateToolbarCollection ParseToolbars(Template template, EntityCollection modCollection);
}
public class FLEXYGO.UI.Mail : object {
    public static MailConfig GetMailConfig(string ModuleName, string PageName, string ObjectName, string ObjectWhere);
    public static List`1<MailFolder> GetMailFolders();
    public static List`1<MailHeader> GetMailHeaders(int Page, int PageSize, string Folder, bool Seen, string MailAddress, string Subject, string Body, object MailDateMin, object MailDateMax);
    public static List`1<MailHeader> GetMails(long Uid, int PageSize, string Folder, bool Seen, string MailAddress, string Subject, string Body, object MailDateMin, object MailDateMax);
    public static List`1<Mails> DownloadMails(string Folder, int PageSize, ConfToken aConfToken);
    private static void A(string , string , string , string , MailConfig& );
    public static MailView GetMail(string MessageId, string Mode);
    public static int GetMailBadgeValue(string UserId);
    private static string A(string );
    public static bool UpdateMailNoticeBadge(EntityObject Entity, ProcessHelper& Ret);
    public static bool EnableMailSettings(EntityObject Entity, ProcessHelper& Ret);
    public static bool refreshMailToken(EmailAccount EmailAccount, string userid);
    public static AuthMail checkMailToken(EmailAccount EmailAccount, string userid);
}
public class FLEXYGO.UI.Map : object {
    public static MapsHelper GetHTML(string ObjectName, string ObjectWhere, string ModuleName, string PageName);
    private static ArrayList A(EntityObject , ModuleDefinition );
}
public class FLEXYGO.UI.MasterTable : object {
    public static MasterTableSettings GetSettings(string TableName);
    public static List`1<BaseCollection> GetTableData(string TableName);
    public static BaseCollection Insert(string TableName, KeyValuePairs[] values);
    public static BaseCollection Update(string TableName, KeyValuePairs[] keys, KeyValuePairs[] values);
    public static bool Delete(string TableName, KeyValuePairs[] keys);
    private static MasterTableProperties A(KeyValuePairs[] );
}
public class FLEXYGO.UI.MenuManager : object {
    public static bool DeleteMenu(string MenuId);
    public static bool AddMenu(string AppName);
    public static bool RelocateMenu(string Id, string Order, object ParentId);
    public static List`1<BaseCollection> GetMenus(object AppName);
}
public class FLEXYGO.UI.Navigation : object {
    public static NavigationNodes GetMainNodes();
    public static NavigationNodes GetNavNodes();
    public static NavigationNodes GetNodesById(string ParentId, bool HideAutoSQLNodes);
    public static NavigationNodes GetAreaNode(string ParentId);
    public static List`1<BaseCollection> GetProcessesNodes(string AreaId, string Source, string Target);
    public static bool DeleteNode(string NodeId);
    public static bool RelocateNode(string Id, string ParentId, string Order);
    public static bool RefreshNodes();
}
public class FLEXYGO.UI.Network : object {
    public static NetworkHelper GetData(string ObjectName, string ObjectWhere, string ModuleName, bool Details, int ParentId, int MaxId, string ParentObjectName, string ParentObjectWhere);
}
public class FLEXYGO.UI.Notify : object {
    public static NavigationNode GetNotice(string NoticeId);
    public static bool SetNoticeIsRead(string NoticeId);
    public static int GetBadgeValue();
}
public class FLEXYGO.UI.ObjectsRelations : object {
    public static HtmlHelper GetHTML(string ObjectName, string ObjectWhere, string ModuleName, string PageName, string Mode);
}
public class FLEXYGO.UI.OrgChart : object {
    public static OrgChartHelper GetNodes(string ObjectName, string ObjectWhere, string ModuleName, string PageName, KeyValuePairs[] Defaults, string AdditionalWhere);
    private static DataTable A(ModuleDefinition , string );
}
public class FLEXYGO.UI.Page : object {
    [CompilerGeneratedAttribute]
private static ConcurrentBag`1<moduleObserver> A;
    public static ConcurrentBag`1<moduleObserver> observersUsers { get; public set; }
    private static Page();
    [CompilerGeneratedAttribute]
public static ConcurrentBag`1<moduleObserver> get_observersUsers();
    [CompilerGeneratedAttribute]
public static void set_observersUsers(ConcurrentBag`1<moduleObserver> value);
    public static Page GetPageByName(string PageName, string ObjectName, string ObjectWhere);
    public static BaseCollection GetSetModuleViewers(string UserId, string ModuleName, string ObjectName, string ObjectWhere, bool removeElement);
    public static Page GetModuleManagerModules(string PageName);
    public static HelpPage GetHelpById(string HelpId);
    public static Page GetPageByObject(string StrType, string ObjectName, string ObjectWhere, bool IsClone);
    public static Page GetPageObjectDefaults(string StrType, string ObjectName, string ObjectWhere);
    private static void A(PageModules , IEntity );
    public static PageModules GetPageTabModules(string ObjectName, string ObjectWhere, string ModuleName);
    private static void A(PageModules , IObjectSettings , string , string );
    private static void a(PageModules , IEntity );
    private static void A(Page );
    private static void A(PageModules );
    public static string SavePageConfig(string PageName, string LayoutName, string ObjectName, ConfigModuleHelper[] Modules);
    public static ExternalAuth GetExternalAuth(string AppName);
    public static string ParseStringByValues(string str, KeyValuePairs[] values);
}
public class FLEXYGO.UI.Planner : object {
    public static PlannerSettings GetPlannerConfig(string ObjectName, string ObjectWhere, string ModuleName, string PageName, string AdditionalWhere, string GroupsFilter, string PlannerInitDate, string PlannerInitMode, filterHelper[] FilterValues, object SearchId, string TimeMode, KeyValuePairs[] Defaults);
    private static List`1<PlannerModeSettings> A(string );
    private static List`1<ModesCardsSettings> a(string );
    private static DateTime[] A(DateTime , string );
    public static List`1<BaseCollection> GetFirstColumnList(string PlannerModeId, string PlannerFilter, string GroupsFilter);
    public static CardsData GetListOfCards(string PlannerModeId, string PlannerFilter, DateTime DateStart, DateTime DateEnd, string AdditionalWhere, KeyValuePairs[] Defaults);
    public static CardsData GetCellListCards(string PlannerModeId, string CellDay, string CellRowId);
    private static void A(DataTable& , EntityObject );
}
public class FLEXYGO.UI.Process : object {
    public static ProcessHelper ExecProcessChain(string processName, string objectName, string objectWhere, KeyValuePairs[] processParams, string lastProcessName);
    public static ProcessConfig GetProcessInfoByName(string processName);
    public static string GetMessageException(string processName, Exception ex);
}
public class FLEXYGO.UI.Report : object {
    public static BaseCollection GetReportConfig(string ReportName, string ObjectName, string ObjectWhere);
    public static string GetReportPDFBase64(string ObjectName, string ObjectWhere, string ReportName, string ReportWhere, string ReportTypeId, string Params, string Defaults, string HasParams);
    public static ReportExcelHelper GetReportExcel(string ObjectName, string ObjectWhere, string ReportName, string AdditionalWhere);
    public static ReportExcelHelper GetExcelExport(string ObjectName, string ObjectWhere, string ModuleName, string AdditionalWhere, String[] InactiveFields, List`1<PropertyOrder> OrderInfo, string ViewId, KeyValuePairs[] Defaults);
    private static DataSet A(EntityObject , string , string , string , List`1<PropertyOrder> , string , KeyValuePairs[] );
    private static DataSet A(string , string , string , List`1<PropertyOrder> );
    private static string A(string , string , string , KeyValuePairs[] );
    private static string A(string , List`1<PropertyOrder> , DataManager );
}
public class FLEXYGO.UI.Rss : object {
    public static RssHelper GetHTML(string ObjectName, string ObjectWhere, string ModuleName, string PageName);
    public static RssVersionInfoHelper GetVersionInfo(string ObjectName, string ObjectWhere, string ModuleName, string PageName);
    private static string A(EntityObject , ModuleDefinition );
    public static ProductVersionInfo GetProductVersionInfo(ModuleDefinition modDef, string productName);
}
public class FLEXYGO.UI.Scheduler : object {
    public static SchedulerItemHelper GetSchedulerTemplate(string ModuleName);
    public static List`1<SchedulerHelper> GetSchedulerConfig(string Scheduler);
    public static SchedulerResult[] GetSchedulerResult(string ObjectName, string ViewName, string Start, string End, string StartDate, string EndDate, string StartTime, string EndTime, string Duration, string DescripTemplate, String[] Keys, string Color, string UserIdField, string Filter, string TextColor, string AdditionalWhere, string TokenDefault, string AllDayField);
    private static int A(string );
}
public class FLEXYGO.UI.SchedulerView : object {
    public static SchedulerConfigResult[] GetSchedulerConfig(string ModuleName);
    public static SchedulerViewResult[] GetSchedulerViewConfig(string ObjName, string ObjectWhere, string ModuleName, string Start, string End, string AdditionalWhere, SchedulerConfigResult[] SchedulerConfig);
    private static SchedulerViewResult[] A(string , string , string , string , string , List`1<string> , string , SchedulerViewResult[] , string , string , string , bool , bool , string , string , string , string , string , string , string , string , string );
}
public class FLEXYGO.UI.SchedulerYear : object {
    public static SchedulerItemHelper[] GetSchedulerHolidays(string ModuleName, string Start, string End);
    public static SchedulerYearResult[] GetSchedulerYearConfig(string ObjName, string ObjectWhere, string ModuleName, string Start, string End, string AdditionalWhere, string Filter);
    private static SchedulerYearResult[] A(string , string , string , string , string , ArrayList , string , SchedulerYearResult[] , string , string , string , bool , bool , string , string , string , string , string , string , string , string , string , string , string , string );
    public static SchedulerComboItemHelper GetSchedulerCombo(string ModuleName);
}
public class FLEXYGO.UI.Security : object {
    public static bool SetSecurity(string SecurityType, string SecurityKey, string SecurityKey2, string SecurityItem, string SecurityItemValue, string SecurityId, string SecurityKey3);
    public static string GetObjectKey(string SecurityType, string SecurityKey, string SecurityKey2, string SecurityKey3);
}
public class FLEXYGO.UI.SparkLine : object {
    public static SparkLineHelper GetHTML(string ObjectName, string ObjectWhere, string ModuleName, string PageName);
    private static ArrayList A(EntityObject , ModuleDefinition );
}
public class FLEXYGO.UI.SQLFeed : object {
    public static SQLFeedHelper GetHTML(string ObjectName, string ObjectWhere, string ModuleName, string PageName);
    private static string A(EntityObject , ModuleDefinition );
}
public class FLEXYGO.UI.Storage : object {
    public static bool Save(KeyValuePairs[] Properties, ConfToken confToken);
    public static List`1<BaseCollection> Load(ConfToken confToken);
}
public class FLEXYGO.UI.Sys : object {
    [CompilerGeneratedAttribute]
private static List`1<moduleObserver> A;
    public static List`1<moduleObserver> observersUsers { get; public set; }
    private static Sys();
    [CompilerGeneratedAttribute]
public static List`1<moduleObserver> get_observersUsers();
    [CompilerGeneratedAttribute]
public static void set_observersUsers(List`1<moduleObserver> value);
    public static List`1<BaseCollection> CreateObject(KeyValuePairs[] StoredParams);
    public static Dictionary`2<string, Dictionary`2<string, List`1<DbSchemaColumn>>> GetDBSchema();
    public static List`1<SubqueryData> GetSubqueriesColumns(string subqueries, string connStringId);
    public static bool UpdateObject(KeyValuePairs[] storedParams);
    public static bool SetSkinCacheVars(KeyValuePairs[] varValues, string skinId);
    public static bool SaveSkinCacheVars(string skinId);
    public static bool ResetSkinCacheVars();
    public static BaseCollection SearchObjects(string FindString, bool EnableCount, string ObjectName);
    public static BaseCollection GetUserSearchSettings();
    public static bool SaveUserSearchSettingsOrder(KeyValuePairs[] OrderedObjects);
    public static bool SaveUserSearchSettingsCheck(string SearchId, bool Checked);
    public static bool AreParents(string ObjectName1, string ObjectName2);
    public static ObjRelatedHelper getRelatedObjetsAndProps(string ObjectName);
    public static object GetView(string ObjectName, string ViewName);
    public static FilterManagerHelper GetFilters(string ObjectName);
    public static string saveFilter(string SearchId, string FilterName, string ObjectName, string Type, bool Generic, FilterSaveHelper[] Properties);
    public static object saveView(string ObjectName, string ViewName, string Mode, FilterSaveHelper[] Properties, string SQL);
    public static bool validateView(string ObjectName, string SQL);
    public static bool testView(string ObjectName, string SQL);
    public static string getSqlFromProps(string ObjectName, FilterSaveHelper[] Properties);
    public static bool UpdateChanges(string version, List`1<VersionPendingChangeHelper> changes);
    public static List`1<VersionPendingChangeHelper> GetPendingReviewChanges(string version);
    public static ConnectionHelper IsConnectionAlive();
    public static List`1<moduleObserver> IsObserverModule(string UserId, string ModuleName, string ObjectName, string ObjectWhere);
}
public class FLEXYGO.UI.Test : object {
    private static BaseCollection A;
    private static object A;
    private static Test();
    public static TestResult ExecuteTest(string TestName, string ClassName, string TestId);
    public static List`1<TestResult> GetTests();
    private static void A();
}
public class FLEXYGO.UI.Timeline : object {
    public static TimelineHelper GetTimeline(string PageName, string ModuleName, string ObjectName, string ObjectWhere, string SearchId, filterHelper[] FilterValues);
    public static string GetItems();
    private static string A(object , filterHelper[] , EntityCollection );
    private static string A(string , string );
}
public class FLEXYGO.UI.Upload : object {
    public static UploadResult UploadFile(string Base64, string Name, string Path, string Mode, string ObjectName, string PropertyName, KeyValuePairs[] FormValues);
    public static UploadConfig GetConfig(string ObjectName, string ObjectWhere, string ModuleName, string PageName);
}
public class FLEXYGO.UI.Utils : object {
    public static ModuleDefinition GetModuleInfo(String& ObjectName, String& ObjectWhere, string ModuleName, string PageName, KeyValuePairs[] Defaults);
    public static string RoothPath(string RootPath, string RootPathType, string Base64, string Name, KeyValuePairs[] FormValues);
    public static string ParseTextWithDefaults(string Text, KeyValuePairs[] Defaults);
}
public class FLEXYGO.UI.View : object {
    public static ViewHelper GetViewTemplate(string ObjectName, string ObjectWhere, string ModuleName, string PageName, string TemplateId, KeyValuePairs[] Defaults);
    public static TemplateToolbarCollection ParseToolbars(Template template, EntityObject modEntity);
}
public class FLEXYGO.UI.WA_ApiDefinition : object {
    public static HttpResponseMessage GetApiGenericDefinition();
    private static void A(OpenApiDocument& );
    private static void a(OpenApiDocument& );
    private static void B(OpenApiDocument& );
    private static void b(OpenApiDocument& );
    private static void C(OpenApiDocument& );
    private static void c(OpenApiDocument& );
    private static void D(OpenApiDocument& );
    private static void d(OpenApiDocument& );
    private static void E(OpenApiDocument& );
    private static void e(OpenApiDocument& );
    private static void F(OpenApiDocument& );
    private static void f(OpenApiDocument& );
    private static void G(OpenApiDocument& );
    private static void g(OpenApiDocument& );
    private static OpenApiOperation A(OpenApiDocument& , string , string , OperationType , string );
    private static void A(OpenApiOperation& );
    private static void A(ObjectPropertyCollection , OpenApiOperation& );
    private static string A(string );
    private static IOpenApiAny A(string , string );
    private static SystemObjectSettings A();
    private static void A(OpenApiDocument& , DataManager );
}
public class FLEXYGO.UI.WA_Entity : object {
    public static int defaultPagesize;
    public static List`1<BaseCollection> GetCollection(string ObjectName, string filter, int page, int pagesize, string orderBy, bool withDescrips, bool IsDefined);
    public static ObjectSchemaHelper GetEntitySchema(string ObjectName);
    public static List`1<FieldData> GetViewSchema(string ObjectName, string ViewName);
    public static List`1<BaseCollection> GetView(string ObjectName, string ViewName, string filter, int page, int pagesize, string orderBy);
    public static WebApiHelper GetEntity(string ObjectName, string Id, string filter);
    public static WebApiHelper InsertEntity(string ObjectName, JObject data);
    public static WebApiHelper UpdateEntity(string ObjectName, JObject data, string Id, string filter);
    public static WebApiHelper DeleteEntity(string ObjectName, string Id, string filter);
    public static ProcessHelper ExecProcess(string ProcessName, JObject data, string ObjectName, string Id, string filter);
    public static BaseCollection GetCurrentContext();
    private static WebApiHelper A(EntityHelper );
    private static string A(string , string , string );
    private static string A(string , string );
    private static KeyValuePairs[] A(JObject );
    public static void LogBlackListErrors(string Method, IDictionary`2<string, object> Params);
    public static EntityObject LogWebApi(IDictionary`2<string, object> Params, string FunctionName, string PetitionType);
    public static EntityObject InsertWebApiLog(int StatusCode, string ObjectName, string FunctionName, string PetitionType, string Body, string ProcessName, string ViewName, string ObjectWhere, string ObjectId, string Filter, int Page, int PageSize, string OrderBy);
    public static EntityObject UpdateWebApiLog(EntityObject objLog);
}
