[CompilerGeneratedAttribute]
[RequiresDebuggerEnhancementAttribute("2")]
[RequiresMethodExecutionAdviceAnalysisAttribute]
[RequiresMethodExecutionAdviceAnalysisAttribute]
[RequiresDebuggerEnhancementAttribute("2")]
[DebuggerAspectGeneratedCodeAttribute]
internal class A.a : object {
}
internal class A.A : object {
    private static Dictionary`2<Type, SqlDbType> A;
    public static SqlDbType A(Type );
    public static SqlDbType A();
}
[DebuggerAspectGeneratedCodeAttribute]
[CompilerGeneratedAttribute]
internal class A.b : object {
    internal static Object[] A;
    private static b();
}
[CompilerGeneratedAttribute]
[DebuggerAspectGeneratedCodeAttribute]
internal class A.B : object {
    internal static Telemetry A;
    internal static MethodBase A;
    [DebuggerAspectGeneratedCodeAttribute]
[CompilerGeneratedAttribute]
private static B();
}
[DebuggerAspectGeneratedCodeAttribute]
[CompilerGeneratedAttribute]
internal class A.C : object {
    public static C A;
    public static C();
    public virtual object GetMetadata(int );
}
public class FLEXYGO.Utilities.Download : object {
    public string Path;
    public bool DeleteAfterDownload;
    public Nullable`1<DateTime> ExpiredDate;
    public string Name;
    public string GetLink(bool onZoom, object size);
    public static Download GetDocumentFromToken(string Token);
}
public class FLEXYGO.Utilities.General.BaseCollection : Dictionary`2<string, object> {
    public BaseCollection(BaseCollection d);
    public string ToJson();
    public virtual string ToString();
}
public class FLEXYGO.Utilities.General.ClassCollection`1 : Dictionary`2<string, T> {
    public string ToJson();
}
[HasInheritedAttributeAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[SerializerAttribute("FLEXYGO.Utilities.General.Debug/Serializer")]
public class FLEXYGO.Utilities.General.Debug : OnMethodBoundaryAspect {
    private string A;
    public Debug(string debugCategory);
    [CompilerGeneratedAttribute]
protected Debug(PortableFormatterConstructorContext context);
    [HasInheritedAttributeAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[DebuggerAspectMethodAttribute("2")]
[MethodExecutionAdviceOptimizationAttribute("58362")]
public virtual void OnEntry(MethodExecutionArgs args);
    [DebuggerAspectMethodAttribute("2")]
[HasInheritedAttributeAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[MethodExecutionAdviceOptimizationAttribute("61951")]
public virtual void OnExit(MethodExecutionArgs args);
}
public class FLEXYGO.Utilities.General.KeyValuePairs : object {
    private string A;
    private object A;
    public string Key { get; public set; }
    public object Value { get; public set; }
    public KeyValuePairs(string aKey, object aValue);
    public sealed virtual string get_Key();
    public sealed virtual void set_Key(string value);
    public sealed virtual object get_Value();
    public sealed virtual void set_Value(object value);
    public sealed virtual string StringValue();
}
public class FLEXYGO.Utilities.General.LDAP : object {
    private string A;
    private string a;
    public LDAP(string aPath);
    public bool IsAuthenticated(string aUser, string aPwd);
}
public class FLEXYGO.Utilities.General.Security : object {
    public static IIdentity getWinowsIdentity(IPrincipal User);
    public static IIdentity getIdentity(IPrincipal User);
}
[XmlRootAttribute("dictionary")]
public class FLEXYGO.Utilities.General.SerializableDictionary`1 : Dictionary`2<string, TValue> {
    public SerializableDictionary`1(StringComparer comparer);
    public sealed virtual XmlSchema GetSchema();
    public sealed virtual void ReadXml(XmlReader reader);
    public sealed virtual void WriteXml(XmlWriter writer);
}
public class FLEXYGO.Utilities.General.StringEnum : object {
    private Type A;
    private static Hashtable A;
    public Type EnumType { get; }
    public StringEnum(Type enumType);
    private static StringEnum();
    public string GetStringValue(string valueName);
    public Array GetStringValues();
    public IList GetListValues();
    public bool IsStringDefined(string stringValue);
    public bool IsStringDefined(string stringValue, bool ignoreCase);
    public Type get_EnumType();
    public static string GetStringValue(Enum value);
    public static object Parse(Type type, string stringValue);
    public static object Parse(Type type, string stringValue, bool ignoreCase);
    public static bool IsStringDefined(Type enumType, string stringValue);
    public static bool IsStringDefined(Type enumType, string stringValue, bool ignoreCase);
}
public class FLEXYGO.Utilities.General.StringValueAttribute : Attribute {
    private string A;
    public string Value { get; }
    public StringValueAttribute(string value);
    public string get_Value();
}
[SerializerAttribute("FLEXYGO.Utilities.General.Telemetry/Serializer")]
[HasInheritedAttributeAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class FLEXYGO.Utilities.General.Telemetry : OnMethodBoundaryAspect {
    private string A;
    public Telemetry(string telemetryCategory);
    [CompilerGeneratedAttribute]
protected Telemetry(PortableFormatterConstructorContext context);
    [DebuggerAspectMethodAttribute("2")]
[MethodExecutionAdviceOptimizationAttribute("58362")]
[HasInheritedAttributeAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public virtual void OnEntry(MethodExecutionArgs args);
    [HasInheritedAttributeAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[DebuggerAspectMethodAttribute("2")]
[MethodExecutionAdviceOptimizationAttribute("61951")]
public virtual void OnExit(MethodExecutionArgs args);
}
public class FLEXYGO.Utilities.General.URL : object {
    public static int getPageTypeId(string pageType);
    public static string GeObjecttUrlByType(PageType PageType, string ObjectName, string ObjectWhere, string Defaults, string SuccessMessage, string ErrorMessage);
    public static string GeObjecttUrlByName(string PageName, string ObjectName, string ObjectWhere, string Defaults);
}
public class FLEXYGO.Utilities.General.Util : object {
    private static int A;
    public static string LogLevel;
    public static bool SentinelEnabled;
    public static int SentinelLevel;
    private static Util();
    public static string SafeReplace(string input, string find, string replace, bool matchWholeWord);
    public static void LogError(string msg, string source);
    public static void LogWarning(string msg, string source);
    public static void LogInformation(string msg, string source);
    public static void LogEvent(string msg, EventLogEntryType type, string source);
    private static string A(string );
    public static int RandomNumber();
    public static string ParseStringFromRow(string str, DataRow row);
    public static string ParseString(string str, BaseCollection col, bool onlyIfNotBlank);
    public static string ReplaceStr(string str, string oldValue, string newValue);
    public static string FormatedReplace(string str, string marker, object newValue, Type type);
    public static BaseCollection KeyValuePairsToCollection(KeyValuePairs[] arr);
    public static BaseCollection KeyValuePairsToUniqueKeyCollection(KeyValuePairs[] arr);
    public static bool IsBlank(object aValue);
    public static bool IsNull(object aValue);
    public static bool ConvertToBoolean(object aValue);
    public static string ObjectToStr(object aValue);
    public static object StrToObject(string atype, string aValue);
    public static object StrToObject(Type aType, string aValue);
    public static object StrToObject(TypeCode aType, string aValue);
    public static void DirCopy(DirectoryInfo aDirOrg, DirectoryInfo aDirDst);
    public static bool StrToBool(string aStr);
    public static string GetHtmlFromXML(string xsltPath, XsltArgumentList arguments, string xml);
    public static XmlDocument GetXMLFromUrl(string xmlUrl);
    public static string ReadInnerExceptions(Exception ex);
    public static Byte[] RotateAndDeleteExif(Byte[] byteStream);
    public static Byte[] GetMiniature(string filePath, int width, int height);
    public static WorkbookStylesPart Worksheet_Style(SpreadsheetDocument document);
    public static bool DataSetToExcel(string Path, DataSet ds);
    private static string A(int , UInt32 );
    public static long fileSize(string path);
    public static string imgPathToB64(string AbsolutePath);
    public static BaseCollection loadMonacoDefinitions(string ProjectPath);
    public static bool IsRunningInVisualStudio();
}
public enum FLEXYGO.Utilities.SQL.eErrorLevel : Enum {
    public int value__;
    public static eErrorLevel SYSTEM;
    public static eErrorLevel APPLICATION;
    public static eErrorLevel DATABASE;
    public static eErrorLevel ENTITY;
    public static eErrorLevel PROCESS;
    public static eErrorLevel CONTROLLER;
    public static eErrorLevel INTERF;
    public static eErrorLevel SECURITY;
}
public enum FLEXYGO.Utilities.SQL.eWhereType : Enum {
    public int value__;
    public static eWhereType Normal;
    public static eWhereType Table;
    public static eWhereType Print;
}
[ExtensionAttribute]
public static class FLEXYGO.Utilities.SQL.ListExtensions : object {
    [ExtensionAttribute]
public static T Clone(T source);
}
public class FLEXYGO.Utilities.SQL.SQLUtilities : object {
    public static string ConvertToSQLDate(object aDate);
    public static object ParseSQLValue(object val, string type, bool withQuotes);
    public static DataTable ArrayToDatatable(Object[] arr);
    public static DataTable JSONToDatatable(string JSON);
    public static Stream GenerateStreamFromString(string s);
    public static DataTable ArrayToDatatable(IList arr);
    public static string ProcessStringParams(string sqlsentence);
    public static BaseCollection DataTasetToList(DataSet ds, object ConfToken);
    public static List`1<BaseCollection> DataTableToList(DataTable dt, object ConfToken);
    public static BaseCollection DataRowToList(DataRow dr, object ConfToken);
    public static List`1<T> DataTableToTypedList(DataTable dt);
    public static DateTime GetDatePart(string Mode);
    public static string ProcessOrderBy(String& SQLSentence);
    public static string RemoveOrderBy(string SqlSentence);
    public static string BuildCount(string SQLSentence);
    public static string addOrderBy(string aSql, string OrderBy);
    public static string appendOrderBy(string OrderBy1, string OrderBy2);
    public static string ProcessOrderBy(String& SQLSentence, string aTableName);
    public static bool Permissions(string aString, string aUser, string aGroup);
    public static string GetFrom(string aSql);
    public static string GetAlias(string SqlSentence, string FieldName);
    public static List`1<DbParameter> cloneSQLParams(List`1<DbParameter> originalParams, Type paramType);
    public static string AddWhere(string aSql, string aWhere, bool aAnd);
    private static string A(string , string , bool );
    public static string FormatField(object aValue, eDBType aDBType, bool aEscapeQuotes, bool Nvarchar);
    public static string FormatField(Type aType, object aValue, eDBType aDBType, bool aEscapeQuotes, bool Nvarchar, string controlType);
    public static string FormatField(SqlDbType aSQLDbType, object aValue, bool aEscapeQuotes, bool Nvarchar, string controlType);
    public static string FormatField(DbType aDbType, object aValue, bool aEscapeQuotes, bool Nvarchar, string controlType);
    public static string FormatField(TypeCode aTypeCode, object aValue, eDBType aDBType, bool aEscapeQuotes, bool Nvarchar, string controlType);
    public static string FormatFieldCrystal(TypeCode aTypeCode, object aValue);
    public string AddTableToWhere(string aWhere, eWhereType aMode);
    public string AddTableToWhere(string aWhere, string aTable, eWhereType aMode);
    public string AddTableToWhereSimple(string aWhere, string aTable, eWhereType aMode);
    public string StructToWhere(List`1<WhereStruct> aArray, string aSql);
    public static int WhereToStruct(List`1<WhereStruct> aArray, string aWhere);
    public static List`1<FieldData> GetTableSchema(DataTable dt);
}
public class FLEXYGO.Web.Utilities : object {
    public static NameValueCollection GetEncodedQueryParams(string EncodedBase64params);
    public static string JSEscStr(string value);
    public static string JSStrToObject(string Str);
    public static string TemplateButtonParser(string TemplateStr);
}
