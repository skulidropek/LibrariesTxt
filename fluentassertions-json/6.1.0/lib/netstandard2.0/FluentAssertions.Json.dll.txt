[ExtensionAttribute]
internal static class FluentAssertions.Json.Common.StringExtensions : object {
    [ExtensionAttribute]
public static string EscapePlaceholders(string value);
    [ExtensionAttribute]
public static string RemoveNewLines(string this);
}
internal class FluentAssertions.Json.Difference : object {
    [CompilerGeneratedAttribute]
private DifferenceKind <Kind>k__BackingField;
    [CompilerGeneratedAttribute]
private JPath <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Actual>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Expected>k__BackingField;
    private DifferenceKind Kind { get; }
    private JPath Path { get; }
    private object Actual { get; }
    private object Expected { get; }
    public Difference(DifferenceKind kind, JPath path, object actual, object expected);
    public Difference(DifferenceKind kind, JPath path);
    [CompilerGeneratedAttribute]
private DifferenceKind get_Kind();
    [CompilerGeneratedAttribute]
private JPath get_Path();
    [CompilerGeneratedAttribute]
private object get_Actual();
    [CompilerGeneratedAttribute]
private object get_Expected();
    public virtual string ToString();
}
internal enum FluentAssertions.Json.DifferenceKind : Enum {
    public int value__;
    public static DifferenceKind ActualIsNull;
    public static DifferenceKind ExpectedIsNull;
    public static DifferenceKind OtherType;
    public static DifferenceKind OtherName;
    public static DifferenceKind OtherValue;
    public static DifferenceKind DifferentLength;
    public static DifferenceKind ActualMissesProperty;
    public static DifferenceKind ExpectedMissesProperty;
    public static DifferenceKind ActualMissesElement;
    public static DifferenceKind WrongOrder;
}
public interface FluentAssertions.Json.IJsonAssertionOptions`1 {
    public abstract virtual IJsonAssertionRestriction`2<T, TProperty> Using(Action`1<IAssertionContext`1<TProperty>> action);
}
public interface FluentAssertions.Json.IJsonAssertionRestriction`2 {
    public abstract virtual IJsonAssertionOptions`1<T> WhenTypeIs();
}
internal class FluentAssertions.Json.JPath : object {
    private List`1<string> nodes;
    private JPath(JPath existingPath, string extraNode);
    public JPath AddProperty(string name);
    public JPath AddIndex(int index);
    public virtual string ToString();
}
[ExtensionAttribute]
[DebuggerNonUserCodeAttribute]
public static class FluentAssertions.Json.JsonAssertionExtensions : object {
    [ExtensionAttribute]
public static JTokenAssertions Should(JToken jToken);
    [ExtensionAttribute]
public static JTokenAssertions Should(JObject jObject);
    [ExtensionAttribute]
public static JTokenAssertions Should(JValue jValue);
}
public class FluentAssertions.Json.JsonAssertionOptions`1 : EquivalencyAssertionOptions`1<T> {
    public JsonAssertionOptions`1(EquivalencyAssertionOptions`1<T> equivalencyAssertionOptions);
    public sealed virtual IJsonAssertionRestriction`2<T, TProperty> Using(Action`1<IAssertionContext`1<TProperty>> action);
}
public class FluentAssertions.Json.JsonAssertionRestriction`2 : object {
    private Restriction`1<EquivalencyAssertionOptions`1<T>, TProperty> restriction;
    internal JsonAssertionRestriction`2(Restriction`1<EquivalencyAssertionOptions`1<T>, TProperty> restriction);
    public sealed virtual IJsonAssertionOptions`1<T> WhenTypeIs();
}
[DebuggerNonUserCodeAttribute]
public class FluentAssertions.Json.JTokenAssertions : ReferenceTypeAssertions`2<JToken, JTokenAssertions> {
    [CompilerGeneratedAttribute]
private GenericCollectionAssertions`1<JToken> <EnumerableSubject>k__BackingField;
    private GenericCollectionAssertions`1<JToken> EnumerableSubject { get; }
    protected string Identifier { get; }
    private static JTokenAssertions();
    public JTokenAssertions(JToken subject);
    [CompilerGeneratedAttribute]
private GenericCollectionAssertions`1<JToken> get_EnumerableSubject();
    protected virtual string get_Identifier();
    public AndConstraint`1<JTokenAssertions> BeEquivalentTo(string expected, string because, Object[] becauseArgs);
    public AndConstraint`1<JTokenAssertions> BeEquivalentTo(JToken expected, string because, Object[] becauseArgs);
    public AndConstraint`1<JTokenAssertions> BeEquivalentTo(JToken expected, Func`2<IJsonAssertionOptions`1<object>, IJsonAssertionOptions`1<object>> config, string because, Object[] becauseArgs);
    private AndConstraint`1<JTokenAssertions> BeEquivalentTo(JToken expected, bool ignoreExtraProperties, Func`2<IJsonAssertionOptions`1<object>, IJsonAssertionOptions`1<object>> config, string because, Object[] becauseArgs);
    public AndConstraint`1<JTokenAssertions> NotBeEquivalentTo(string unexpected, string because, Object[] becauseArgs);
    public AndConstraint`1<JTokenAssertions> NotBeEquivalentTo(JToken unexpected, string because, Object[] becauseArgs);
    public AndConstraint`1<JTokenAssertions> HaveValue(string expected);
    public AndConstraint`1<JTokenAssertions> HaveValue(string expected, string because, Object[] becauseArgs);
    public AndConstraint`1<JTokenAssertions> NotHaveValue(string unexpected, string because, Object[] becauseArgs);
    public AndConstraint`1<JTokenAssertions> MatchRegex(string regularExpression);
    public AndConstraint`1<JTokenAssertions> MatchRegex(string regularExpression, string because, Object[] becauseArgs);
    public AndConstraint`1<JTokenAssertions> NotMatchRegex(string regularExpression, string because, Object[] becauseArgs);
    public AndWhichConstraint`2<JTokenAssertions, JToken> HaveElement(string expected);
    public AndWhichConstraint`2<JTokenAssertions, JToken> HaveElement(string expected, string because, Object[] becauseArgs);
    public AndWhichConstraint`2<JTokenAssertions, JToken> NotHaveElement(string unexpected, string because, Object[] becauseArgs);
    public AndWhichConstraint`2<JTokenAssertions, JToken> ContainSingleItem(string because, Object[] becauseArgs);
    public AndConstraint`1<JTokenAssertions> HaveCount(int expected, string because, Object[] becauseArgs);
    public AndConstraint`1<JTokenAssertions> ContainSubtree(string subtree, string because, Object[] becauseArgs);
    public AndConstraint`1<JTokenAssertions> ContainSubtree(JToken subtree, string because, Object[] becauseArgs);
    public string Format(JToken value, bool useLineBreaks);
}
internal class FluentAssertions.Json.JTokenDifferentiator : object {
    private bool ignoreExtraProperties;
    private Func`2<IJsonAssertionOptions`1<object>, IJsonAssertionOptions`1<object>> config;
    public JTokenDifferentiator(bool ignoreExtraProperties, Func`2<IJsonAssertionOptions`1<object>, IJsonAssertionOptions`1<object>> config);
    public Difference FindFirstDifference(JToken actual, JToken expected);
    private Difference FindFirstDifference(JToken actual, JToken expected, JPath path);
    private Difference FindJArrayDifference(JArray actualArray, JToken expected, JPath path);
    private Difference CompareExpectedItems(JArray actual, JArray expected, JPath path);
    private Difference CompareItems(JArray actual, JArray expected, JPath path);
    private Difference FindJObjectDifference(JObject actual, JToken expected, JPath path);
    private Difference CompareProperties(IEnumerable`1<JProperty> actual, IEnumerable`1<JProperty> expected, JPath path);
    private Difference FindJPropertyDifference(JProperty actualProperty, JToken expected, JPath path);
    private Difference FindValueDifference(JValue actualValue, JToken expected, JPath path);
    private Difference CompareValues(JValue actual, JValue expected, JPath path);
    private static string Describe(JTokenType jTokenType);
    [CompilerGeneratedAttribute]
private EquivalencyAssertionOptions`1<object> <CompareValues>b__12_0(EquivalencyAssertionOptions`1<object> options);
}
public class FluentAssertions.Json.JTokenFormatter : object {
    public sealed virtual bool CanHandle(object value);
    public sealed virtual void Format(object value, FormattedObjectGraph formattedGraph, FormattingContext context, FormatChild formatChild);
}
[ExtensionAttribute]
public static class FluentAssertions.Json.ObjectAssertionsExtensions : object {
    [ExtensionAttribute]
[CustomAssertionAttribute]
public static AndConstraint`1<ObjectAssertions> BeJsonSerializable(ObjectAssertions assertions, string because, Object[] becauseArgs);
    [ExtensionAttribute]
[CustomAssertionAttribute]
public static AndConstraint`1<ObjectAssertions> BeJsonSerializable(ObjectAssertions assertions, string because, Object[] becauseArgs);
    [ExtensionAttribute]
[CustomAssertionAttribute]
public static AndConstraint`1<ObjectAssertions> BeJsonSerializable(ObjectAssertions assertions, Func`2<EquivalencyAssertionOptions`1<T>, EquivalencyAssertionOptions`1<T>> options, string because, Object[] becauseArgs);
    private static object CreateCloneUsingJsonSerializer(object subject);
}
[ExtensionAttribute]
public static class FluentAssertions.Json.StringAssertionsExtensions : object {
    [ExtensionAttribute]
[CustomAssertionAttribute]
public static AndWhichConstraint`2<StringAssertions, JToken> BeValidJson(StringAssertions stringAssertions, string because, Object[] becauseArgs);
}
