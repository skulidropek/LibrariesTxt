public class FluentEmail.Core.Defaults.ReplaceRenderer : object {
    public sealed virtual string Parse(string template, T model, bool isHtml);
    public sealed virtual Task`1<string> ParseAsync(string template, T model, bool isHtml);
}
public class FluentEmail.Core.Defaults.SaveToDiskSender : object {
    private string _directory;
    public SaveToDiskSender(string directory);
    public sealed virtual SendResponse Send(IFluentEmail email, Nullable`1<CancellationToken> token);
    [AsyncStateMachineAttribute("FluentEmail.Core.Defaults.SaveToDiskSender/<SendAsync>d__3")]
public sealed virtual Task`1<SendResponse> SendAsync(IFluentEmail email, Nullable`1<CancellationToken> token);
    [AsyncStateMachineAttribute("FluentEmail.Core.Defaults.SaveToDiskSender/<SaveEmailToDisk>d__4")]
private Task`1<bool> SaveEmailToDisk(IFluentEmail email);
}
public class FluentEmail.Core.Email : object {
    [CompilerGeneratedAttribute]
private EmailData <Data>k__BackingField;
    [CompilerGeneratedAttribute]
private ITemplateRenderer <Renderer>k__BackingField;
    [CompilerGeneratedAttribute]
private ISender <Sender>k__BackingField;
    public static ITemplateRenderer DefaultRenderer;
    public static ISender DefaultSender;
    public EmailData Data { get; public set; }
    public ITemplateRenderer Renderer { get; public set; }
    public ISender Sender { get; public set; }
    public Email(ITemplateRenderer renderer, ISender sender);
    public Email(string emailAddress, string name);
    public Email(ITemplateRenderer renderer, ISender sender, string emailAddress, string name);
    private static Email();
    [CompilerGeneratedAttribute]
public sealed virtual EmailData get_Data();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Data(EmailData value);
    [CompilerGeneratedAttribute]
public sealed virtual ITemplateRenderer get_Renderer();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Renderer(ITemplateRenderer value);
    [CompilerGeneratedAttribute]
public sealed virtual ISender get_Sender();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Sender(ISender value);
    public static IFluentEmail From(string emailAddress, string name);
    public sealed virtual IFluentEmail SetFrom(string emailAddress, string name);
    public sealed virtual IFluentEmail To(string emailAddress, string name);
    public sealed virtual IFluentEmail To(string emailAddress);
    public sealed virtual IFluentEmail To(IEnumerable`1<Address> mailAddresses);
    public sealed virtual IFluentEmail CC(string emailAddress, string name);
    public sealed virtual IFluentEmail CC(IEnumerable`1<Address> mailAddresses);
    public sealed virtual IFluentEmail BCC(string emailAddress, string name);
    public sealed virtual IFluentEmail BCC(IEnumerable`1<Address> mailAddresses);
    public sealed virtual IFluentEmail ReplyTo(string address);
    public sealed virtual IFluentEmail ReplyTo(string address, string name);
    public sealed virtual IFluentEmail Subject(string subject);
    public sealed virtual IFluentEmail Body(string body, bool isHtml);
    public sealed virtual IFluentEmail PlaintextAlternativeBody(string body);
    public sealed virtual IFluentEmail HighPriority();
    public sealed virtual IFluentEmail LowPriority();
    public sealed virtual IFluentEmail UsingTemplateEngine(ITemplateRenderer renderer);
    public sealed virtual IFluentEmail UsingTemplateFromEmbedded(string path, T model, Assembly assembly, bool isHtml);
    public sealed virtual IFluentEmail PlaintextAlternativeUsingTemplateFromEmbedded(string path, T model, Assembly assembly);
    public sealed virtual IFluentEmail UsingTemplateFromFile(string filename, T model, bool isHtml);
    public sealed virtual IFluentEmail PlaintextAlternativeUsingTemplateFromFile(string filename, T model);
    public sealed virtual IFluentEmail UsingCultureTemplateFromFile(string filename, T model, CultureInfo culture, bool isHtml);
    public sealed virtual IFluentEmail PlaintextAlternativeUsingCultureTemplateFromFile(string filename, T model, CultureInfo culture);
    public sealed virtual IFluentEmail UsingTemplate(string template, T model, bool isHtml);
    public sealed virtual IFluentEmail PlaintextAlternativeUsingTemplate(string template, T model);
    public sealed virtual IFluentEmail Attach(Attachment attachment);
    public sealed virtual IFluentEmail Attach(IEnumerable`1<Attachment> attachments);
    public sealed virtual IFluentEmail AttachFromFilename(string filename, string contentType, string attachmentName);
    public sealed virtual IFluentEmail Tag(string tag);
    public sealed virtual IFluentEmail Header(string header, string body);
    public virtual SendResponse Send(Nullable`1<CancellationToken> token);
    public virtual Task`1<SendResponse> SendAsync(Nullable`1<CancellationToken> token);
    private static string GetCultureFileName(string fileName, CultureInfo culture);
    private sealed virtual override Type FluentEmail.Core.IHideObjectMembers.GetType();
    [CompilerGeneratedAttribute]
private bool <Attach>b__44_0(Attachment attachment);
}
internal static class FluentEmail.Core.EmbeddedResourceHelper : object {
    internal static string GetResourceAsString(Assembly assembly, string path);
}
public class FluentEmail.Core.FluentEmailFactory : object {
    private IServiceProvider services;
    public FluentEmailFactory(IServiceProvider services);
    public sealed virtual IFluentEmail Create();
}
public interface FluentEmail.Core.IFluentEmail {
    public EmailData Data { get; public set; }
    public ITemplateRenderer Renderer { get; public set; }
    public ISender Sender { get; public set; }
    public abstract virtual EmailData get_Data();
    public abstract virtual void set_Data(EmailData value);
    public abstract virtual ITemplateRenderer get_Renderer();
    public abstract virtual void set_Renderer(ITemplateRenderer value);
    public abstract virtual ISender get_Sender();
    public abstract virtual void set_Sender(ISender value);
    public abstract virtual IFluentEmail To(string emailAddress, string name);
    public abstract virtual IFluentEmail SetFrom(string emailAddress, string name);
    public abstract virtual IFluentEmail To(string emailAddress);
    public abstract virtual IFluentEmail To(IEnumerable`1<Address> mailAddresses);
    public abstract virtual IFluentEmail CC(string emailAddress, string name);
    public abstract virtual IFluentEmail CC(IEnumerable`1<Address> mailAddresses);
    public abstract virtual IFluentEmail BCC(string emailAddress, string name);
    public abstract virtual IFluentEmail BCC(IEnumerable`1<Address> mailAddresses);
    public abstract virtual IFluentEmail ReplyTo(string address);
    public abstract virtual IFluentEmail ReplyTo(string address, string name);
    public abstract virtual IFluentEmail Subject(string subject);
    public abstract virtual IFluentEmail Body(string body, bool isHtml);
    public abstract virtual IFluentEmail HighPriority();
    public abstract virtual IFluentEmail LowPriority();
    public abstract virtual IFluentEmail UsingTemplateEngine(ITemplateRenderer renderer);
    public abstract virtual IFluentEmail UsingTemplateFromEmbedded(string path, T model, Assembly assembly, bool isHtml);
    public abstract virtual IFluentEmail UsingTemplateFromFile(string filename, T model, bool isHtml);
    public abstract virtual IFluentEmail UsingCultureTemplateFromFile(string filename, T model, CultureInfo culture, bool isHtml);
    public abstract virtual IFluentEmail UsingTemplate(string template, T model, bool isHtml);
    public abstract virtual IFluentEmail Attach(Attachment attachment);
    public abstract virtual IFluentEmail Attach(IEnumerable`1<Attachment> attachments);
    public abstract virtual SendResponse Send(Nullable`1<CancellationToken> token);
    public abstract virtual Task`1<SendResponse> SendAsync(Nullable`1<CancellationToken> token);
    public abstract virtual IFluentEmail AttachFromFilename(string filename, string contentType, string attachmentName);
    public abstract virtual IFluentEmail PlaintextAlternativeBody(string body);
    public abstract virtual IFluentEmail PlaintextAlternativeUsingTemplateFromEmbedded(string path, T model, Assembly assembly);
    public abstract virtual IFluentEmail PlaintextAlternativeUsingTemplateFromFile(string filename, T model);
    public abstract virtual IFluentEmail PlaintextAlternativeUsingCultureTemplateFromFile(string filename, T model, CultureInfo culture);
    public abstract virtual IFluentEmail PlaintextAlternativeUsingTemplate(string template, T model);
    public abstract virtual IFluentEmail Tag(string tag);
    public abstract virtual IFluentEmail Header(string header, string body);
}
public interface FluentEmail.Core.IFluentEmailFactory {
    public abstract virtual IFluentEmail Create();
}
[EditorBrowsableAttribute("1")]
public interface FluentEmail.Core.IHideObjectMembers {
    [EditorBrowsableAttribute("1")]
public abstract virtual Type GetType();
    [EditorBrowsableAttribute("1")]
public abstract virtual int GetHashCode();
    [EditorBrowsableAttribute("1")]
public abstract virtual string ToString();
    [EditorBrowsableAttribute("1")]
public abstract virtual bool Equals(object obj);
}
public interface FluentEmail.Core.Interfaces.ISender {
    public abstract virtual SendResponse Send(IFluentEmail email, Nullable`1<CancellationToken> token);
    public abstract virtual Task`1<SendResponse> SendAsync(IFluentEmail email, Nullable`1<CancellationToken> token);
}
public interface FluentEmail.Core.Interfaces.ITemplateRenderer {
    public abstract virtual string Parse(string template, T model, bool isHtml);
    public abstract virtual Task`1<string> ParseAsync(string template, T model, bool isHtml);
}
[ExtensionAttribute]
public static class FluentEmail.Core.ListExtensions : object {
    [ExtensionAttribute]
public static void ForEach(IEnumerable`1<T> enumerable, Action`1<T> consumer);
    [ExtensionAttribute]
public static void AddRange(IList`1<T> list, IEnumerable`1<T> items);
}
public class FluentEmail.Core.Models.Address : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EmailAddress>k__BackingField;
    public string Name { get; public set; }
    public string EmailAddress { get; public set; }
    public Address(string emailAddress, string name);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_EmailAddress();
    [CompilerGeneratedAttribute]
public void set_EmailAddress(string value);
    public virtual string ToString();
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
}
public class FluentEmail.Core.Models.Attachment : object {
    [CompilerGeneratedAttribute]
private bool <IsInline>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Filename>k__BackingField;
    [CompilerGeneratedAttribute]
private Stream <Data>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContentType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContentId>k__BackingField;
    public bool IsInline { get; public set; }
    public string Filename { get; public set; }
    public Stream Data { get; public set; }
    public string ContentType { get; public set; }
    public string ContentId { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_IsInline();
    [CompilerGeneratedAttribute]
public void set_IsInline(bool value);
    [CompilerGeneratedAttribute]
public string get_Filename();
    [CompilerGeneratedAttribute]
public void set_Filename(string value);
    [CompilerGeneratedAttribute]
public Stream get_Data();
    [CompilerGeneratedAttribute]
public void set_Data(Stream value);
    [CompilerGeneratedAttribute]
public string get_ContentType();
    [CompilerGeneratedAttribute]
public void set_ContentType(string value);
    [CompilerGeneratedAttribute]
public string get_ContentId();
    [CompilerGeneratedAttribute]
public void set_ContentId(string value);
}
public class FluentEmail.Core.Models.EmailData : object {
    [CompilerGeneratedAttribute]
private IList`1<Address> <ToAddresses>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<Address> <CcAddresses>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<Address> <BccAddresses>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<Address> <ReplyToAddresses>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<Attachment> <Attachments>k__BackingField;
    [CompilerGeneratedAttribute]
private Address <FromAddress>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Subject>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Body>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PlaintextAlternativeBody>k__BackingField;
    [CompilerGeneratedAttribute]
private Priority <Priority>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<string> <Tags>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsHtml>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <Headers>k__BackingField;
    public IList`1<Address> ToAddresses { get; public set; }
    public IList`1<Address> CcAddresses { get; public set; }
    public IList`1<Address> BccAddresses { get; public set; }
    public IList`1<Address> ReplyToAddresses { get; public set; }
    public IList`1<Attachment> Attachments { get; public set; }
    public Address FromAddress { get; public set; }
    public string Subject { get; public set; }
    public string Body { get; public set; }
    public string PlaintextAlternativeBody { get; public set; }
    public Priority Priority { get; public set; }
    public IList`1<string> Tags { get; public set; }
    public bool IsHtml { get; public set; }
    public IDictionary`2<string, string> Headers { get; public set; }
    [CompilerGeneratedAttribute]
public IList`1<Address> get_ToAddresses();
    [CompilerGeneratedAttribute]
public void set_ToAddresses(IList`1<Address> value);
    [CompilerGeneratedAttribute]
public IList`1<Address> get_CcAddresses();
    [CompilerGeneratedAttribute]
public void set_CcAddresses(IList`1<Address> value);
    [CompilerGeneratedAttribute]
public IList`1<Address> get_BccAddresses();
    [CompilerGeneratedAttribute]
public void set_BccAddresses(IList`1<Address> value);
    [CompilerGeneratedAttribute]
public IList`1<Address> get_ReplyToAddresses();
    [CompilerGeneratedAttribute]
public void set_ReplyToAddresses(IList`1<Address> value);
    [CompilerGeneratedAttribute]
public IList`1<Attachment> get_Attachments();
    [CompilerGeneratedAttribute]
public void set_Attachments(IList`1<Attachment> value);
    [CompilerGeneratedAttribute]
public Address get_FromAddress();
    [CompilerGeneratedAttribute]
public void set_FromAddress(Address value);
    [CompilerGeneratedAttribute]
public string get_Subject();
    [CompilerGeneratedAttribute]
public void set_Subject(string value);
    [CompilerGeneratedAttribute]
public string get_Body();
    [CompilerGeneratedAttribute]
public void set_Body(string value);
    [CompilerGeneratedAttribute]
public string get_PlaintextAlternativeBody();
    [CompilerGeneratedAttribute]
public void set_PlaintextAlternativeBody(string value);
    [CompilerGeneratedAttribute]
public Priority get_Priority();
    [CompilerGeneratedAttribute]
public void set_Priority(Priority value);
    [CompilerGeneratedAttribute]
public IList`1<string> get_Tags();
    [CompilerGeneratedAttribute]
public void set_Tags(IList`1<string> value);
    [CompilerGeneratedAttribute]
public bool get_IsHtml();
    [CompilerGeneratedAttribute]
public void set_IsHtml(bool value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, string> get_Headers();
    [CompilerGeneratedAttribute]
public void set_Headers(IDictionary`2<string, string> value);
}
public enum FluentEmail.Core.Models.Priority : Enum {
    public int value__;
    public static Priority High;
    public static Priority Normal;
    public static Priority Low;
}
public class FluentEmail.Core.Models.SendResponse : object {
    [CompilerGeneratedAttribute]
private string <MessageId>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<string> <ErrorMessages>k__BackingField;
    public string MessageId { get; public set; }
    public IList`1<string> ErrorMessages { get; public set; }
    public bool Successful { get; }
    [CompilerGeneratedAttribute]
public string get_MessageId();
    [CompilerGeneratedAttribute]
public void set_MessageId(string value);
    [CompilerGeneratedAttribute]
public IList`1<string> get_ErrorMessages();
    [CompilerGeneratedAttribute]
public void set_ErrorMessages(IList`1<string> value);
    public bool get_Successful();
}
public class FluentEmail.Core.Models.SendResponse`1 : SendResponse {
    [CompilerGeneratedAttribute]
private T <Data>k__BackingField;
    public T Data { get; public set; }
    [CompilerGeneratedAttribute]
public T get_Data();
    [CompilerGeneratedAttribute]
public void set_Data(T value);
}
[ExtensionAttribute]
public static class Microsoft.Extensions.DependencyInjection.FluentEmailServiceCollectionExtensions : object {
    [ExtensionAttribute]
public static FluentEmailServicesBuilder AddFluentEmail(IServiceCollection services, string defaultFromEmail, string defaultFromName);
}
public class Microsoft.Extensions.DependencyInjection.FluentEmailServicesBuilder : object {
    [CompilerGeneratedAttribute]
private IServiceCollection <Services>k__BackingField;
    public IServiceCollection Services { get; private set; }
    internal FluentEmailServicesBuilder(IServiceCollection services);
    [CompilerGeneratedAttribute]
public IServiceCollection get_Services();
    [CompilerGeneratedAttribute]
private void set_Services(IServiceCollection value);
}
