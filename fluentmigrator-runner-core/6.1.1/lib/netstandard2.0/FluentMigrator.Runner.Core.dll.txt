[ExtensionAttribute]
[ObsoleteAttribute]
public static class FluentMigrator.Runner.AnnouncerExtensions : object {
    [ExtensionAttribute]
[ObsoleteAttribute]
public static void Heading(IAnnouncer announcer, string message, Object[] args);
    [ExtensionAttribute]
[ObsoleteAttribute]
public static void Say(IAnnouncer announcer, string message, Object[] args);
    [ExtensionAttribute]
[ObsoleteAttribute]
public static void Error(IAnnouncer announcer, string message, Object[] args);
}
[ObsoleteAttribute]
public abstract class FluentMigrator.Runner.Announcers.Announcer : object {
    [CompilerGeneratedAttribute]
private bool <ShowSql>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowElapsedTime>k__BackingField;
    public bool ShowSql { get; public set; }
    public bool ShowElapsedTime { get; public set; }
    protected Announcer(IOptions`1<AnnouncerOptions> options);
    [CompilerGeneratedAttribute]
public virtual bool get_ShowSql();
    [CompilerGeneratedAttribute]
public virtual void set_ShowSql(bool value);
    [CompilerGeneratedAttribute]
public virtual bool get_ShowElapsedTime();
    [CompilerGeneratedAttribute]
public virtual void set_ShowElapsedTime(bool value);
    public virtual void Heading(string message);
    public virtual void Say(string message);
    public virtual void Emphasize(string message);
    public virtual void Sql(string sql);
    public virtual void ElapsedTime(TimeSpan timeSpan);
    public virtual void Error(Exception exception);
    public virtual void Error(string message);
    public abstract virtual void Write(string message, bool isNotSql);
}
[ObsoleteAttribute]
public class FluentMigrator.Runner.Announcers.AnnouncerOptions : object {
    [ObsoleteAttribute]
public static AnnouncerOptions AllEnabled;
    [CompilerGeneratedAttribute]
private bool <ShowSql>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowElapsedTime>k__BackingField;
    public bool ShowSql { get; public set; }
    public bool ShowElapsedTime { get; public set; }
    private static AnnouncerOptions();
    [CompilerGeneratedAttribute]
public bool get_ShowSql();
    [CompilerGeneratedAttribute]
public void set_ShowSql(bool value);
    [CompilerGeneratedAttribute]
public bool get_ShowElapsedTime();
    [CompilerGeneratedAttribute]
public void set_ShowElapsedTime(bool value);
}
[ObsoleteAttribute]
public class FluentMigrator.Runner.Announcers.CompositeAnnouncer : object {
    [CompilerGeneratedAttribute]
private IEnumerable`1<IAnnouncer> <Announcers>k__BackingField;
    public IEnumerable`1<IAnnouncer> Announcers { get; }
    public CompositeAnnouncer(IAnnouncer[] announcers);
    [CompilerGeneratedAttribute]
public IEnumerable`1<IAnnouncer> get_Announcers();
    public sealed virtual void Heading(string message);
    public sealed virtual void Say(string message);
    public sealed virtual void Emphasize(string message);
    public sealed virtual void Sql(string sql);
    public sealed virtual void ElapsedTime(TimeSpan timeSpan);
    public sealed virtual void Error(string message);
    public sealed virtual void Error(Exception exception);
    [ObsoleteAttribute]
public sealed virtual void Write(string message, bool isNotSql);
    private void Each(Action`1<IAnnouncer> action);
}
[ObsoleteAttribute]
public class FluentMigrator.Runner.Announcers.ConsoleAnnouncer : Announcer {
    public ConsoleAnnouncer(IOptions`1<AnnouncerOptions> options);
    public void Header();
    public void HorizontalRule();
    public virtual void Heading(string message);
    public virtual void Say(string message);
    public virtual void Emphasize(string message);
    public virtual void ElapsedTime(TimeSpan timeSpan);
    public virtual void Error(string message);
    public virtual void Write(string message, bool isNotSql);
}
[ObsoleteAttribute]
public class FluentMigrator.Runner.Announcers.LoggerAnnouncer : object {
    private ILogger _logger;
    private AnnouncerOptions _options;
    public LoggerAnnouncer(ILoggerFactory loggerFactory, IOptions`1<AnnouncerOptions> options);
    public LoggerAnnouncer(ILogger logger, AnnouncerOptions options);
    public sealed virtual void Heading(string message);
    public sealed virtual void Say(string message);
    public sealed virtual void Emphasize(string message);
    public sealed virtual void Sql(string sql);
    public sealed virtual void ElapsedTime(TimeSpan timeSpan);
    public sealed virtual void Error(string message);
    public sealed virtual void Error(Exception exception);
    public sealed virtual void Write(string message, bool isNotSql);
}
[ObsoleteAttribute]
public class FluentMigrator.Runner.Announcers.NullAnnouncer : Announcer {
    public virtual void Write(string message, bool isNotSql);
}
[ObsoleteAttribute("Use DependencyInjection extension method chain instead: .AddLogging(lb => lb.AddDebug().AddFluentMigratorConsole())")]
public class FluentMigrator.Runner.Announcers.TextWriterAnnouncer : Announcer {
    private Action`1<string> _write;
    public TextWriterAnnouncer(TextWriter writer);
    public TextWriterAnnouncer(Action`1<string> write);
    public TextWriterAnnouncer(IOptions`1<TextWriterAnnouncerOptions> options);
    public virtual void Heading(string message);
    public virtual void ElapsedTime(TimeSpan timeSpan);
    public virtual void Write(string message, bool isNotSql);
}
[ObsoleteAttribute]
public class FluentMigrator.Runner.Announcers.TextWriterAnnouncerOptions : AnnouncerOptions {
    [CompilerGeneratedAttribute]
private Action`1<string> <WriteDelegate>k__BackingField;
    public Action`1<string> WriteDelegate { get; public set; }
    [CompilerGeneratedAttribute]
public Action`1<string> get_WriteDelegate();
    [CompilerGeneratedAttribute]
public void set_WriteDelegate(Action`1<string> value);
    private static void DefaultWriteHandler(string line);
}
[ObsoleteAttribute]
public class FluentMigrator.Runner.Announcers.TextWriterWithGoAnnouncer : TextWriterAnnouncer {
    public TextWriterWithGoAnnouncer(TextWriter writer);
    public TextWriterWithGoAnnouncer(Action`1<string> write);
    public TextWriterWithGoAnnouncer(IOptions`1<TextWriterAnnouncerOptions> options);
    public virtual void Sql(string sql);
}
public class FluentMigrator.Runner.BatchParser.EndCodeSearchResult : object {
    [CompilerGeneratedAttribute]
private int <Index>k__BackingField;
    [CompilerGeneratedAttribute]
private IRangeSearcher <NestedRangeSearcher>k__BackingField;
    public bool IsNestedStart { get; }
    public int Index { get; }
    public IRangeSearcher NestedRangeSearcher { get; }
    public EndCodeSearchResult(int index);
    public EndCodeSearchResult(int index, IRangeSearcher nestedRangeSearcher);
    public bool get_IsNestedStart();
    [CompilerGeneratedAttribute]
public int get_Index();
    [CompilerGeneratedAttribute]
public IRangeSearcher get_NestedRangeSearcher();
    public static EndCodeSearchResult op_Implicit(int index);
}
public interface FluentMigrator.Runner.BatchParser.ILineReader {
    public string Line { get; }
    public int Index { get; }
    public int Length { get; }
    public abstract virtual string get_Line();
    public abstract virtual int get_Index();
    public abstract virtual int get_Length();
    public abstract virtual string ReadString(int length);
    public abstract virtual ILineReader Advance(int length);
}
public interface FluentMigrator.Runner.BatchParser.IRangeSearcher {
    public int StartCodeLength { get; }
    public int EndCodeLength { get; }
    public bool IsComment { get; }
    public abstract virtual int get_StartCodeLength();
    public abstract virtual int get_EndCodeLength();
    public abstract virtual bool get_IsComment();
    public abstract virtual int FindStartCode(ILineReader reader);
    public abstract virtual EndCodeSearchResult FindEndCode(ILineReader reader);
}
public interface FluentMigrator.Runner.BatchParser.ISpecialTokenSearcher {
    public abstract virtual SpecialTokenInfo Find(ILineReader reader);
}
public interface FluentMigrator.Runner.BatchParser.ITextSource {
    public abstract virtual ILineReader CreateReader();
}
public class FluentMigrator.Runner.BatchParser.RangeSearchers.AnsiSqlIdentifier : StringWithNoEscape {
}
public class FluentMigrator.Runner.BatchParser.RangeSearchers.CharWithEscapeByDuplication : object {
    private char _endChar;
    private Regex _startCodeRegex;
    private Regex _endCodeRegex;
    [CompilerGeneratedAttribute]
private bool <IsComment>k__BackingField;
    public int StartCodeLength { get; }
    public int EndCodeLength { get; }
    public bool IsComment { get; }
    public CharWithEscapeByDuplication(char startAndEndChar, bool isComment);
    public CharWithEscapeByDuplication(char startChar, char endChar, bool isComment);
    public sealed virtual int get_StartCodeLength();
    public sealed virtual int get_EndCodeLength();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsComment();
    public sealed virtual int FindStartCode(ILineReader reader);
    public sealed virtual EndCodeSearchResult FindEndCode(ILineReader reader);
}
public class FluentMigrator.Runner.BatchParser.RangeSearchers.DoubleDashSingleLineComment : SingleLineComment {
}
public class FluentMigrator.Runner.BatchParser.RangeSearchers.DoubleSlashSingleLineComment : SingleLineComment {
}
public class FluentMigrator.Runner.BatchParser.RangeSearchers.MultiLineComment : StringWithNoEscape {
}
public class FluentMigrator.Runner.BatchParser.RangeSearchers.MySqlIdentifier : CharWithEscapeByDuplication {
}
public class FluentMigrator.Runner.BatchParser.RangeSearchers.NestingMultiLineComment : object {
    private Regex _startCodeRegex;
    private Regex _endCodeRegex;
    [CompilerGeneratedAttribute]
private int <StartCodeLength>k__BackingField;
    [CompilerGeneratedAttribute]
private int <EndCodeLength>k__BackingField;
    public int StartCodeLength { get; }
    public int EndCodeLength { get; }
    public bool IsComment { get; }
    [CompilerGeneratedAttribute]
public sealed virtual int get_StartCodeLength();
    [CompilerGeneratedAttribute]
public sealed virtual int get_EndCodeLength();
    public sealed virtual bool get_IsComment();
    public sealed virtual int FindStartCode(ILineReader reader);
    public sealed virtual EndCodeSearchResult FindEndCode(ILineReader reader);
}
public class FluentMigrator.Runner.BatchParser.RangeSearchers.PoundSignSingleLineComment : SingleLineComment {
}
public class FluentMigrator.Runner.BatchParser.RangeSearchers.SingleLineComment : object {
    private bool _onlyAtBeginningOfLine;
    private Regex _startCodeRegex;
    [CompilerGeneratedAttribute]
private int <StartCodeLength>k__BackingField;
    public int StartCodeLength { get; }
    public int EndCodeLength { get; }
    public bool IsComment { get; }
    public SingleLineComment(string startCode);
    public SingleLineComment(string startCode, bool onlyAtBeginningOfLine);
    [CompilerGeneratedAttribute]
public sealed virtual int get_StartCodeLength();
    public sealed virtual int get_EndCodeLength();
    public sealed virtual bool get_IsComment();
    public sealed virtual int FindStartCode(ILineReader reader);
    public sealed virtual EndCodeSearchResult FindEndCode(ILineReader reader);
}
public class FluentMigrator.Runner.BatchParser.RangeSearchers.SqlServerIdentifier : CharWithEscapeByDuplication {
}
public class FluentMigrator.Runner.BatchParser.RangeSearchers.SqlString : CharWithEscapeByDuplication {
}
public class FluentMigrator.Runner.BatchParser.RangeSearchers.StringWithNoEscape : object {
    private Regex _startCodeRegex;
    private Regex _endCodeRegex;
    [CompilerGeneratedAttribute]
private int <StartCodeLength>k__BackingField;
    [CompilerGeneratedAttribute]
private int <EndCodeLength>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsComment>k__BackingField;
    public int StartCodeLength { get; }
    public int EndCodeLength { get; }
    public bool IsComment { get; }
    public StringWithNoEscape(string startAndEndCode, bool isComment);
    public StringWithNoEscape(string startCode, string endCode, bool isComment);
    [CompilerGeneratedAttribute]
public sealed virtual int get_StartCodeLength();
    [CompilerGeneratedAttribute]
public sealed virtual int get_EndCodeLength();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsComment();
    public sealed virtual int FindStartCode(ILineReader reader);
    public sealed virtual EndCodeSearchResult FindEndCode(ILineReader reader);
}
internal class FluentMigrator.Runner.BatchParser.SearchContext : object {
    [CompilerGeneratedAttribute]
private IList`1<ISpecialTokenSearcher> <SpecialTokenSearchers>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<IRangeSearcher> <RangeSearchers>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <StripComments>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler`1<SqlBatchCollectorEventArgs> BatchSql;
    [CompilerGeneratedAttribute]
private EventHandler`1<SpecialTokenEventArgs> SpecialToken;
    public IList`1<ISpecialTokenSearcher> SpecialTokenSearchers { get; }
    public IList`1<IRangeSearcher> RangeSearchers { get; }
    public bool StripComments { get; }
    public SearchContext(IEnumerable`1<IRangeSearcher> rangeSearchers, IEnumerable`1<ISpecialTokenSearcher> specialTokenSearchers, bool stripComments);
    [CompilerGeneratedAttribute]
public IList`1<ISpecialTokenSearcher> get_SpecialTokenSearchers();
    [CompilerGeneratedAttribute]
public IList`1<IRangeSearcher> get_RangeSearchers();
    [CompilerGeneratedAttribute]
public bool get_StripComments();
    [CompilerGeneratedAttribute]
public void add_BatchSql(EventHandler`1<SqlBatchCollectorEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_BatchSql(EventHandler`1<SqlBatchCollectorEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_SpecialToken(EventHandler`1<SpecialTokenEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_SpecialToken(EventHandler`1<SpecialTokenEventArgs> value);
    internal void OnBatchSql(SqlBatchCollectorEventArgs e);
    internal void OnSpecialToken(SpecialTokenEventArgs e);
}
internal class FluentMigrator.Runner.BatchParser.SearchStatus : object {
    private SearchContext _context;
    private ILineReader _reader;
    private Stack`1<IRangeSearcher> _activeRanges;
    private SpecialTokenInfo _foundToken;
    public SearchStatus(SearchContext context, ILineReader reader);
    private SearchStatus(SearchContext context, ILineReader reader, Stack`1<IRangeSearcher> activeRanges, SpecialTokenInfo foundToken);
    public SearchStatus Process();
    private static SpecialTokenInfo FindToken(ILineReader reader, IEnumerable`1<ISpecialTokenSearcher> searchers);
    private static RangeStart FindRangeStart(ILineReader reader, IEnumerable`1<IRangeSearcher> searchers);
    private SearchStatus FindRangeEnd();
    private SearchStatus FindTokenOrRangeStart();
    private SearchStatus UseNewRange(ILineReader reader, RangeStart info);
    private ILineReader WriteSql(ILineReader reader);
    private ILineReader WriteSql(ILineReader reader, RangeStart info);
    private ILineReader WriteSql(ILineReader reader, IRangeSearcher searcher, EndCodeSearchResult info);
    private ILineReader WriteSql(ILineReader reader, int itemIndex, int skipLength);
}
public class FluentMigrator.Runner.BatchParser.Sources.LinesSource : object {
    private IEnumerable`1<string> _batchSource;
    public LinesSource(IEnumerable`1<string> batchSource);
    public sealed virtual ILineReader CreateReader();
}
public class FluentMigrator.Runner.BatchParser.Sources.TextReaderSource : object {
    private TextReader _reader;
    private bool _isOwner;
    public TextReaderSource(TextReader reader);
    public TextReaderSource(TextReader reader, bool takeOwnership);
    public sealed virtual ILineReader CreateReader();
    public sealed virtual void Dispose();
}
public class FluentMigrator.Runner.BatchParser.SpecialTokenEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private string <Token>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Opaque>k__BackingField;
    public string Token { get; }
    public object Opaque { get; }
    public SpecialTokenEventArgs(string token, object opaque);
    [CompilerGeneratedAttribute]
public string get_Token();
    [CompilerGeneratedAttribute]
public object get_Opaque();
}
public class FluentMigrator.Runner.BatchParser.SpecialTokenInfo : object {
    [CompilerGeneratedAttribute]
private int <Index>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Length>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Token>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Opaque>k__BackingField;
    public int Index { get; }
    public int Length { get; }
    public string Token { get; }
    public object Opaque { get; }
    public SpecialTokenInfo(int index, int length, string token, object opaque);
    [CompilerGeneratedAttribute]
public int get_Index();
    [CompilerGeneratedAttribute]
public int get_Length();
    [CompilerGeneratedAttribute]
public string get_Token();
    [CompilerGeneratedAttribute]
public object get_Opaque();
}
public class FluentMigrator.Runner.BatchParser.SpecialTokenSearchers.GoSearcher : object {
    private static Regex _regex;
    private static GoSearcher();
    public sealed virtual SpecialTokenInfo Find(ILineReader reader);
    public static Nullable`1<int> GetGoCount(string sql);
    private static Nullable`1<int> GetGoCount(Match match);
}
public class FluentMigrator.Runner.BatchParser.SpecialTokenSearchers.SemicolonSearcher : object {
    private static Regex _regex;
    private static SemicolonSearcher();
    public sealed virtual SpecialTokenInfo Find(ILineReader reader);
}
internal class FluentMigrator.Runner.BatchParser.SqlBatchCollectorEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private string <SqlContent>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsEndOfLine>k__BackingField;
    public string SqlContent { get; }
    public bool IsEndOfLine { get; }
    public SqlBatchCollectorEventArgs(string sqlContent, bool isEndOfLine);
    [CompilerGeneratedAttribute]
public string get_SqlContent();
    [CompilerGeneratedAttribute]
public bool get_IsEndOfLine();
}
public class FluentMigrator.Runner.BatchParser.SqlBatchParser : object {
    private IEnumerable`1<IRangeSearcher> _rangeSearchers;
    private IEnumerable`1<ISpecialTokenSearcher> _specialTokenSearchers;
    private string _newLine;
    [CompilerGeneratedAttribute]
private EventHandler`1<SpecialTokenEventArgs> SpecialToken;
    [CompilerGeneratedAttribute]
private EventHandler`1<SqlTextEventArgs> SqlText;
    public SqlBatchParser(IEnumerable`1<IRangeSearcher> rangeSearchers, IEnumerable`1<ISpecialTokenSearcher> specialTokenSearchers, string newLine);
    [CompilerGeneratedAttribute]
public void add_SpecialToken(EventHandler`1<SpecialTokenEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_SpecialToken(EventHandler`1<SpecialTokenEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_SqlText(EventHandler`1<SqlTextEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_SqlText(EventHandler`1<SqlTextEventArgs> value);
    public void Process(ITextSource source, bool stripComments);
    protected virtual void OnSpecialToken(SpecialTokenEventArgs e);
    protected virtual void OnSqlText(SqlTextEventArgs e);
}
public class FluentMigrator.Runner.BatchParser.SqlTextEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private string <SqlText>k__BackingField;
    public string SqlText { get; }
    public SqlTextEventArgs(string sqlText);
    [CompilerGeneratedAttribute]
public string get_SqlText();
}
public enum FluentMigrator.Runner.CompatibilityMode : Enum {
    public int value__;
    public static CompatibilityMode STRICT;
    public static CompatibilityMode LOOSE;
}
public class FluentMigrator.Runner.ConnectionlessVersionLoader : object {
    private IMigrationProcessor _processor;
    private IMigrationInformationLoader _migrationInformationLoader;
    private bool _versionsLoaded;
    [CompilerGeneratedAttribute]
private IAssemblyCollection <Assemblies>k__BackingField;
    [CompilerGeneratedAttribute]
private IMigrationRunnerConventions <Conventions>k__BackingField;
    [CompilerGeneratedAttribute]
private long <StartVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private long <TargetVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private VersionSchemaMigration <VersionSchemaMigration>k__BackingField;
    [CompilerGeneratedAttribute]
private IMigration <VersionMigration>k__BackingField;
    [CompilerGeneratedAttribute]
private IMigration <VersionUniqueMigration>k__BackingField;
    [CompilerGeneratedAttribute]
private IMigration <VersionDescriptionMigration>k__BackingField;
    [CompilerGeneratedAttribute]
private IMigrationRunner <Runner>k__BackingField;
    [CompilerGeneratedAttribute]
private IVersionInfo <VersionInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private IVersionTableMetaData <VersionTableMetaData>k__BackingField;
    [ObsoleteAttribute]
protected IAssemblyCollection Assemblies { get; protected set; }
    public IMigrationRunnerConventions Conventions { get; public set; }
    public long StartVersion { get; public set; }
    public long TargetVersion { get; public set; }
    public VersionSchemaMigration VersionSchemaMigration { get; }
    public IMigration VersionMigration { get; }
    public IMigration VersionUniqueMigration { get; }
    public IMigration VersionDescriptionMigration { get; }
    [ObsoleteAttribute]
public IMigrationRunner Runner { get; public set; }
    public IVersionInfo VersionInfo { get; public set; }
    public IVersionTableMetaData VersionTableMetaData { get; public set; }
    public bool AlreadyCreatedVersionSchema { get; }
    public bool AlreadyCreatedVersionTable { get; }
    [ObsoleteAttribute]
internal ConnectionlessVersionLoader(IMigrationRunner runner, IAssemblyCollection assemblies, IConventionSet conventionSet, IMigrationRunnerConventions conventions, IRunnerContext runnerContext, IVersionTableMetaData versionTableMetaData);
    public ConnectionlessVersionLoader(IProcessorAccessor processorAccessor, IMigrationRunnerConventions conventions, IOptions`1<RunnerOptions> runnerOptions, IMigrationInformationLoader migrationInformationLoader, IVersionTableMetaData versionTableMetaData);
    [CompilerGeneratedAttribute]
protected IAssemblyCollection get_Assemblies();
    [CompilerGeneratedAttribute]
protected void set_Assemblies(IAssemblyCollection value);
    [CompilerGeneratedAttribute]
public IMigrationRunnerConventions get_Conventions();
    [CompilerGeneratedAttribute]
public void set_Conventions(IMigrationRunnerConventions value);
    [CompilerGeneratedAttribute]
public long get_StartVersion();
    [CompilerGeneratedAttribute]
public void set_StartVersion(long value);
    [CompilerGeneratedAttribute]
public long get_TargetVersion();
    [CompilerGeneratedAttribute]
public void set_TargetVersion(long value);
    [CompilerGeneratedAttribute]
public VersionSchemaMigration get_VersionSchemaMigration();
    [CompilerGeneratedAttribute]
public IMigration get_VersionMigration();
    [CompilerGeneratedAttribute]
public IMigration get_VersionUniqueMigration();
    [CompilerGeneratedAttribute]
public IMigration get_VersionDescriptionMigration();
    [CompilerGeneratedAttribute]
public sealed virtual IMigrationRunner get_Runner();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Runner(IMigrationRunner value);
    [CompilerGeneratedAttribute]
public sealed virtual IVersionInfo get_VersionInfo();
    [CompilerGeneratedAttribute]
public sealed virtual void set_VersionInfo(IVersionInfo value);
    [CompilerGeneratedAttribute]
public sealed virtual IVersionTableMetaData get_VersionTableMetaData();
    [CompilerGeneratedAttribute]
public void set_VersionTableMetaData(IVersionTableMetaData value);
    public sealed virtual bool get_AlreadyCreatedVersionSchema();
    public sealed virtual bool get_AlreadyCreatedVersionTable();
    public sealed virtual void DeleteVersion(long version);
    public sealed virtual IVersionTableMetaData GetVersionTableMetaData();
    public sealed virtual void LoadVersionInfo();
    public sealed virtual void RemoveVersionTable();
    public sealed virtual void UpdateVersionInfo(long version);
    public sealed virtual void UpdateVersionInfo(long version, string description);
    protected virtual InsertionDataDefinition CreateVersionInfoInsertionData(long version, string description);
}
public static class FluentMigrator.Runner.ConsoleUtilities : object {
    public static void AsError(Action action);
    public static void AsEmphasize(Action action);
}
public class FluentMigrator.Runner.Constraints.CurrentVersionMigrationConstraintAttribute : MigrationConstraintAttribute {
    public CurrentVersionMigrationConstraintAttribute(long minimumVersionToRunAgainst);
}
public class FluentMigrator.Runner.Constraints.MigrationConstraintAttribute : Attribute {
    private Func`2<MigrationConstraintContext, bool> _predicate;
    public MigrationConstraintAttribute(Func`2<MigrationConstraintContext, bool> predicate);
    public bool ShouldRun(MigrationConstraintContext context);
}
public class FluentMigrator.Runner.Constraints.MigrationConstraintContext : object {
    [CompilerGeneratedAttribute]
private RunnerOptions <RunnerOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private IVersionInfo <VersionInfo>k__BackingField;
    public RunnerOptions RunnerOptions { get; public set; }
    public IVersionInfo VersionInfo { get; public set; }
    [CompilerGeneratedAttribute]
public RunnerOptions get_RunnerOptions();
    [CompilerGeneratedAttribute]
public void set_RunnerOptions(RunnerOptions value);
    [CompilerGeneratedAttribute]
public IVersionInfo get_VersionInfo();
    [CompilerGeneratedAttribute]
public void set_VersionInfo(IVersionInfo value);
}
public class FluentMigrator.Runner.Conventions.ConventionSet : object {
    [CompilerGeneratedAttribute]
private IRootPathConvention <RootPathConvention>k__BackingField;
    [CompilerGeneratedAttribute]
private DefaultSchemaConvention <SchemaConvention>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<IColumnsConvention> <ColumnsConventions>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<IConstraintConvention> <ConstraintConventions>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<IForeignKeyConvention> <ForeignKeyConventions>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<IIndexConvention> <IndexConventions>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<ISequenceConvention> <SequenceConventions>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<IAutoNameConvention> <AutoNameConventions>k__BackingField;
    public IRootPathConvention RootPathConvention { get; public set; }
    public DefaultSchemaConvention SchemaConvention { get; public set; }
    public IList`1<IColumnsConvention> ColumnsConventions { get; }
    public IList`1<IConstraintConvention> ConstraintConventions { get; }
    public IList`1<IForeignKeyConvention> ForeignKeyConventions { get; }
    public IList`1<IIndexConvention> IndexConventions { get; }
    public IList`1<ISequenceConvention> SequenceConventions { get; }
    public IList`1<IAutoNameConvention> AutoNameConventions { get; }
    [CompilerGeneratedAttribute]
public sealed virtual IRootPathConvention get_RootPathConvention();
    [CompilerGeneratedAttribute]
public void set_RootPathConvention(IRootPathConvention value);
    [CompilerGeneratedAttribute]
public sealed virtual DefaultSchemaConvention get_SchemaConvention();
    [CompilerGeneratedAttribute]
public void set_SchemaConvention(DefaultSchemaConvention value);
    [CompilerGeneratedAttribute]
public sealed virtual IList`1<IColumnsConvention> get_ColumnsConventions();
    [CompilerGeneratedAttribute]
public sealed virtual IList`1<IConstraintConvention> get_ConstraintConventions();
    [CompilerGeneratedAttribute]
public sealed virtual IList`1<IForeignKeyConvention> get_ForeignKeyConventions();
    [CompilerGeneratedAttribute]
public sealed virtual IList`1<IIndexConvention> get_IndexConventions();
    [CompilerGeneratedAttribute]
public sealed virtual IList`1<ISequenceConvention> get_SequenceConventions();
    [CompilerGeneratedAttribute]
public sealed virtual IList`1<IAutoNameConvention> get_AutoNameConventions();
}
public class FluentMigrator.Runner.Conventions.DefaultAutoNameConvention : object {
    public sealed virtual IAutoNameExpression Apply(IAutoNameExpression expression);
    [IteratorStateMachineAttribute("FluentMigrator.Runner.Conventions.DefaultAutoNameConvention/<GetAutoScriptUpNameImpl>d__1")]
private static IEnumerable`1<string> GetAutoScriptUpNameImpl(Type type, IEnumerable`1<string> databaseTypes);
    [IteratorStateMachineAttribute("FluentMigrator.Runner.Conventions.DefaultAutoNameConvention/<GetAutoScriptDownNameImpl>d__2")]
private static IEnumerable`1<string> GetAutoScriptDownNameImpl(Type type, IEnumerable`1<string> databaseTypes);
}
public class FluentMigrator.Runner.Conventions.DefaultConstraintNameConvention : object {
    public sealed virtual IConstraintExpression Apply(IConstraintExpression expression);
    private static string GetConstraintName(ConstraintDefinition expression);
}
public class FluentMigrator.Runner.Conventions.DefaultForeignKeyNameConvention : object {
    public sealed virtual IForeignKeyExpression Apply(IForeignKeyExpression expression);
    private static string GetForeignKeyName(ForeignKeyDefinition foreignKey);
}
public class FluentMigrator.Runner.Conventions.DefaultIndexNameConvention : object {
    public sealed virtual IIndexExpression Apply(IIndexExpression expression);
    private static string GetIndexName(IndexDefinition index);
}
public class FluentMigrator.Runner.Conventions.DefaultPrimaryKeyNameConvention : object {
    public sealed virtual IColumnsExpression Apply(IColumnsExpression expression);
    private static string GetPrimaryKeyName(string tableName);
}
public class FluentMigrator.Runner.Conventions.DefaultRootPathConvention : object {
    private string _rootPath;
    public DefaultRootPathConvention(string rootPath);
    public sealed virtual IFileSystemExpression Apply(IFileSystemExpression expression);
}
public class FluentMigrator.Runner.Conventions.DefaultSchemaConvention : object {
    private IDefaultSchemaNameConvention _defaultSchemaNameConvention;
    public DefaultSchemaConvention(string defaultSchemaName);
    public DefaultSchemaConvention(IDefaultSchemaNameConvention defaultSchemaNameConvention);
    private string GetSchemaName(string originalSchemaName);
    public ISchemaExpression Apply(ISchemaExpression expression);
    public sealed virtual IForeignKeyExpression Apply(IForeignKeyExpression expression);
    public sealed virtual IConstraintExpression Apply(IConstraintExpression expression);
    public sealed virtual IIndexExpression Apply(IIndexExpression expression);
    public sealed virtual ISequenceExpression Apply(ISequenceExpression expression);
}
public class FluentMigrator.Runner.Conventions.DefaultSchemaNameConvention : object {
    private string _defaultSchemaName;
    private bool _isActive;
    public DefaultSchemaNameConvention(string defaultSchemaName);
    public sealed virtual string GetSchemaName(string originalSchemaName);
}
public interface FluentMigrator.Runner.Conventions.IAutoNameConvention {
    public abstract virtual IAutoNameExpression Apply(IAutoNameExpression expression);
}
public interface FluentMigrator.Runner.Conventions.IColumnsConvention {
    public abstract virtual IColumnsExpression Apply(IColumnsExpression expression);
}
public interface FluentMigrator.Runner.Conventions.IConstraintConvention {
    public abstract virtual IConstraintExpression Apply(IConstraintExpression expression);
}
public interface FluentMigrator.Runner.Conventions.IConventionSet {
    public IRootPathConvention RootPathConvention { get; }
    public DefaultSchemaConvention SchemaConvention { get; }
    public IList`1<IColumnsConvention> ColumnsConventions { get; }
    public IList`1<IConstraintConvention> ConstraintConventions { get; }
    public IList`1<IForeignKeyConvention> ForeignKeyConventions { get; }
    public IList`1<IIndexConvention> IndexConventions { get; }
    public IList`1<ISequenceConvention> SequenceConventions { get; }
    public IList`1<IAutoNameConvention> AutoNameConventions { get; }
    public abstract virtual IRootPathConvention get_RootPathConvention();
    public abstract virtual DefaultSchemaConvention get_SchemaConvention();
    public abstract virtual IList`1<IColumnsConvention> get_ColumnsConventions();
    public abstract virtual IList`1<IConstraintConvention> get_ConstraintConventions();
    public abstract virtual IList`1<IForeignKeyConvention> get_ForeignKeyConventions();
    public abstract virtual IList`1<IIndexConvention> get_IndexConventions();
    public abstract virtual IList`1<ISequenceConvention> get_SequenceConventions();
    public abstract virtual IList`1<IAutoNameConvention> get_AutoNameConventions();
}
public interface FluentMigrator.Runner.Conventions.IDefaultSchemaNameConvention {
    public abstract virtual string GetSchemaName(string originalSchemaName);
}
public interface FluentMigrator.Runner.Conventions.IForeignKeyConvention {
    public abstract virtual IForeignKeyExpression Apply(IForeignKeyExpression expression);
}
public interface FluentMigrator.Runner.Conventions.IIndexConvention {
    public abstract virtual IIndexExpression Apply(IIndexExpression expression);
}
public interface FluentMigrator.Runner.Conventions.IRootPathConvention {
    public abstract virtual IFileSystemExpression Apply(IFileSystemExpression expression);
}
public interface FluentMigrator.Runner.Conventions.ISequenceConvention {
    public abstract virtual ISequenceExpression Apply(ISequenceExpression expression);
}
[ExtensionAttribute]
public static class FluentMigrator.Runner.ConventionSetExtensions : object {
    [IteratorStateMachineAttribute("FluentMigrator.Runner.ConventionSetExtensions/<Apply>d__0")]
[ExtensionAttribute]
public static IEnumerable`1<IMigrationExpression> Apply(IEnumerable`1<IMigrationExpression> expressions, IConventionSet conventionSet);
    [ExtensionAttribute]
public static T Apply(T expression, IConventionSet conventionSet);
}
public class FluentMigrator.Runner.DefaultConventionSet : object {
    [CompilerGeneratedAttribute]
private IRootPathConvention <RootPathConvention>k__BackingField;
    [CompilerGeneratedAttribute]
private DefaultSchemaConvention <SchemaConvention>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<IColumnsConvention> <ColumnsConventions>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<IConstraintConvention> <ConstraintConventions>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<IForeignKeyConvention> <ForeignKeyConventions>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<IIndexConvention> <IndexConventions>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<ISequenceConvention> <SequenceConventions>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<IAutoNameConvention> <AutoNameConventions>k__BackingField;
    public IRootPathConvention RootPathConvention { get; }
    public DefaultSchemaConvention SchemaConvention { get; }
    public IList`1<IColumnsConvention> ColumnsConventions { get; }
    public IList`1<IConstraintConvention> ConstraintConventions { get; }
    public IList`1<IForeignKeyConvention> ForeignKeyConventions { get; }
    public IList`1<IIndexConvention> IndexConventions { get; }
    public IList`1<ISequenceConvention> SequenceConventions { get; }
    public IList`1<IAutoNameConvention> AutoNameConventions { get; }
    [ObsoleteAttribute]
public DefaultConventionSet(IRunnerContext runnerContext);
    public DefaultConventionSet(string defaultSchemaName, string workingDirectory);
    [CompilerGeneratedAttribute]
public sealed virtual IRootPathConvention get_RootPathConvention();
    [CompilerGeneratedAttribute]
public sealed virtual DefaultSchemaConvention get_SchemaConvention();
    [CompilerGeneratedAttribute]
public sealed virtual IList`1<IColumnsConvention> get_ColumnsConventions();
    [CompilerGeneratedAttribute]
public sealed virtual IList`1<IConstraintConvention> get_ConstraintConventions();
    [CompilerGeneratedAttribute]
public sealed virtual IList`1<IForeignKeyConvention> get_ForeignKeyConventions();
    [CompilerGeneratedAttribute]
public sealed virtual IList`1<IIndexConvention> get_IndexConventions();
    [CompilerGeneratedAttribute]
public sealed virtual IList`1<ISequenceConvention> get_SequenceConventions();
    [CompilerGeneratedAttribute]
public sealed virtual IList`1<IAutoNameConvention> get_AutoNameConventions();
}
public class FluentMigrator.Runner.DefaultMigrationInformationLoader : object {
    private String[] _tagsToMatch;
    private bool _includeUntaggedMigrations;
    private IMigrationSource _source;
    private SortedList`2<long, IMigrationInfo> _migrationInfos;
    [CompilerGeneratedAttribute]
private IMigrationRunnerConventions <Conventions>k__BackingField;
    [CompilerGeneratedAttribute]
private IAssemblyCollection <Assemblies>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Namespace>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <LoadNestedNamespaces>k__BackingField;
    public IMigrationRunnerConventions Conventions { get; }
    [ObsoleteAttribute]
public IAssemblyCollection Assemblies { get; }
    public string Namespace { get; }
    public bool LoadNestedNamespaces { get; }
    [ObsoleteAttribute]
public IEnumerable`1<string> TagsToMatch { get; }
    [ObsoleteAttribute]
public DefaultMigrationInformationLoader(IMigrationRunnerConventions conventions, Assembly assembly, string namespace, IEnumerable`1<string> tagsToMatch);
    [ObsoleteAttribute]
public DefaultMigrationInformationLoader(IMigrationRunnerConventions conventions, IAssemblyCollection assemblies, string namespace, IEnumerable`1<string> tagsToMatch);
    [ObsoleteAttribute]
public DefaultMigrationInformationLoader(IMigrationRunnerConventions conventions, Assembly assembly, string namespace, bool loadNestedNamespaces, IEnumerable`1<string> tagsToMatch);
    [ObsoleteAttribute]
public DefaultMigrationInformationLoader(IMigrationRunnerConventions conventions, IAssemblyCollection assemblies, string namespace, bool loadNestedNamespaces, IEnumerable`1<string> tagsToMatch);
    public DefaultMigrationInformationLoader(IMigrationSource source, IOptionsSnapshot`1<TypeFilterOptions> filterOptions, IMigrationRunnerConventions conventions, IOptions`1<RunnerOptions> runnerOptions);
    [CompilerGeneratedAttribute]
public IMigrationRunnerConventions get_Conventions();
    [CompilerGeneratedAttribute]
public IAssemblyCollection get_Assemblies();
    [CompilerGeneratedAttribute]
public string get_Namespace();
    [CompilerGeneratedAttribute]
public bool get_LoadNestedNamespaces();
    public IEnumerable`1<string> get_TagsToMatch();
    public sealed virtual SortedList`2<long, IMigrationInfo> LoadMigrations();
    private static IEnumerable`1<IMigrationInfo> FindMigrations(IMigrationSource source, IMigrationRunnerConventions conventions, string namespace, bool loadNestedNamespaces, String[] tagsToMatch, bool includeUntagged);
}
public class FluentMigrator.Runner.Exceptions.InvalidMigrationException : RunnerException {
    private IMigration _migration;
    private string _errors;
    public string Message { get; }
    public InvalidMigrationException(IMigration migration, string errors);
    public virtual string get_Message();
}
public class FluentMigrator.Runner.Exceptions.MissingMigrationsException : RunnerException {
    public MissingMigrationsException(string message);
    public MissingMigrationsException(string message, Exception innerException);
    public MissingMigrationsException(SerializationInfo info, StreamingContext context);
}
public class FluentMigrator.Runner.Exceptions.RunnerException : FluentMigratorException {
    protected RunnerException(string message);
    protected RunnerException(string message, Exception innerException);
    protected RunnerException(SerializationInfo info, StreamingContext context);
}
public class FluentMigrator.Runner.Exceptions.VersionOrderInvalidException : RunnerException {
    private IReadOnlyCollection`1<KeyValuePair`2<long, IMigrationInfo>> _invalidMigrations;
    public IEnumerable`1<KeyValuePair`2<long, IMigrationInfo>> InvalidMigrations { get; public set; }
    public IEnumerable`1<long> InvalidVersions { get; }
    public string Message { get; }
    public VersionOrderInvalidException(IEnumerable`1<KeyValuePair`2<long, IMigrationInfo>> invalidMigrations);
    public IEnumerable`1<KeyValuePair`2<long, IMigrationInfo>> get_InvalidMigrations();
    public void set_InvalidMigrations(IEnumerable`1<KeyValuePair`2<long, IMigrationInfo>> value);
    public IEnumerable`1<long> get_InvalidVersions();
    public virtual string get_Message();
}
[ExtensionAttribute]
public static class FluentMigrator.Runner.Extensions.TagsExtensions : object {
    [ExtensionAttribute]
public static List`1<string> ToTags(string tags);
}
[ExtensionAttribute]
public static class FluentMigrator.Runner.Extensions.TypeExtensions : object {
    [ExtensionAttribute]
public static bool Is(Type type);
    [ExtensionAttribute]
public static bool IsConcrete(Type type);
}
public class FluentMigrator.Runner.FluentMigratorLoggerOptions : object {
    [CompilerGeneratedAttribute]
private bool <ShowSql>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowElapsedTime>k__BackingField;
    public bool ShowSql { get; public set; }
    public bool ShowElapsedTime { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_ShowSql();
    [CompilerGeneratedAttribute]
public void set_ShowSql(bool value);
    [CompilerGeneratedAttribute]
public bool get_ShowElapsedTime();
    [CompilerGeneratedAttribute]
public void set_ShowElapsedTime(bool value);
}
[ExtensionAttribute]
public static class FluentMigrator.Runner.FluentMigratorLoggingExtensions : object {
    [ExtensionAttribute]
public static ILoggerFactory AddFluentMigratorConsole(ILoggerFactory loggerFactory);
    [ExtensionAttribute]
public static ILoggerFactory AddFluentMigratorConsole(ILoggerFactory loggerFactory, FluentMigratorLoggerOptions options);
    [ExtensionAttribute]
public static ILoggingBuilder AddFluentMigratorConsole(ILoggingBuilder loggingBuilder);
}
[ObsoleteAttribute("Use ColumnBase<TTypeMap> instead. Going forward, column models must have a db-specific type map model.")]
public abstract class FluentMigrator.Runner.Generators.Base.ColumnBase : object {
    private ITypeMap _typeMap;
    [CompilerGeneratedAttribute]
private IList`1<Func`2<ColumnDefinition, string>> <ClauseOrder>k__BackingField;
    [CompilerGeneratedAttribute]
private IQuoter <Quoter>k__BackingField;
    protected IList`1<Func`2<ColumnDefinition, string>> ClauseOrder { get; protected set; }
    public string ForeignKeyConstraint { get; }
    protected IQuoter Quoter { get; }
    protected ColumnBase(ITypeMap typeMap, IQuoter quoter);
    [CompilerGeneratedAttribute]
protected IList`1<Func`2<ColumnDefinition, string>> get_ClauseOrder();
    [CompilerGeneratedAttribute]
protected void set_ClauseOrder(IList`1<Func`2<ColumnDefinition, string>> value);
    public virtual string get_ForeignKeyConstraint();
    [CompilerGeneratedAttribute]
protected IQuoter get_Quoter();
    protected string GetTypeMap(DbType value, Nullable`1<int> size, Nullable`1<int> precision);
    public virtual string FormatString(ColumnDefinition column);
    protected virtual string FormatType(ColumnDefinition column);
    protected virtual string FormatNullable(ColumnDefinition column);
    protected virtual string FormatDefaultValue(ColumnDefinition column);
    protected abstract virtual string FormatIdentity(ColumnDefinition column);
    protected virtual string FormatPrimaryKey(ColumnDefinition column);
    protected virtual string FormatCollation(ColumnDefinition column);
    public virtual string FormatCascade(string onWhat, Rule rule);
    public virtual string GenerateForeignKeyName(ForeignKeyDefinition foreignKey);
    public virtual string FormatForeignKey(ForeignKeyDefinition foreignKey, Func`2<ForeignKeyDefinition, string> fkNameGeneration);
    public virtual string Generate(ColumnDefinition column);
    public virtual string Generate(IEnumerable`1<ColumnDefinition> columns, string tableName);
    public virtual bool ShouldPrimaryKeysBeAddedSeparately(IEnumerable`1<ColumnDefinition> primaryKeyColumns);
    public virtual string AddPrimaryKeyConstraint(string tableName, IEnumerable`1<ColumnDefinition> primaryKeyColumns);
    protected virtual string GetPrimaryKeyConstraintName(IEnumerable`1<ColumnDefinition> primaryKeyColumns, string tableName);
    [CompilerGeneratedAttribute]
private string <Generate>b__23_1(ColumnDefinition x);
    [CompilerGeneratedAttribute]
private string <AddPrimaryKeyConstraint>b__25_0(ColumnDefinition x);
}
public abstract class FluentMigrator.Runner.Generators.Base.ColumnBase`1 : ColumnBase {
    protected ColumnBase`1(TTypeMap typeMap, IQuoter quoter);
}
public abstract class FluentMigrator.Runner.Generators.Base.GeneratorBase : object {
    private IColumn _column;
    private IQuoter _quoter;
    private IDescriptionGenerator _descriptionGenerator;
    protected IColumn Column { get; }
    public IQuoter Quoter { get; }
    protected IDescriptionGenerator DescriptionGenerator { get; }
    public GeneratorBase(IColumn column, IQuoter quoter, IDescriptionGenerator descriptionGenerator);
    public abstract virtual string Generate(CreateSchemaExpression expression);
    public abstract virtual string Generate(DeleteSchemaExpression expression);
    public abstract virtual string Generate(CreateTableExpression expression);
    public abstract virtual string Generate(AlterColumnExpression expression);
    public abstract virtual string Generate(CreateColumnExpression expression);
    public abstract virtual string Generate(DeleteTableExpression expression);
    public abstract virtual string Generate(DeleteColumnExpression expression);
    public abstract virtual string Generate(CreateForeignKeyExpression expression);
    public abstract virtual string Generate(DeleteForeignKeyExpression expression);
    public abstract virtual string Generate(CreateIndexExpression expression);
    public abstract virtual string Generate(DeleteIndexExpression expression);
    public abstract virtual string Generate(RenameTableExpression expression);
    public abstract virtual string Generate(RenameColumnExpression expression);
    public abstract virtual string Generate(InsertDataExpression expression);
    public abstract virtual string Generate(AlterDefaultConstraintExpression expression);
    public abstract virtual string Generate(DeleteDataExpression expression);
    public abstract virtual string Generate(UpdateDataExpression expression);
    public abstract virtual string Generate(AlterSchemaExpression expression);
    public abstract virtual string Generate(CreateSequenceExpression expression);
    public abstract virtual string Generate(DeleteSequenceExpression expression);
    public abstract virtual string Generate(CreateConstraintExpression expression);
    public abstract virtual string Generate(DeleteConstraintExpression expression);
    public abstract virtual string Generate(DeleteDefaultConstraintExpression expression);
    public virtual bool IsAdditionalFeatureSupported(string feature);
    public virtual string Generate(AlterTableExpression expression);
    protected IColumn get_Column();
    public IQuoter get_Quoter();
    protected IDescriptionGenerator get_DescriptionGenerator();
}
public abstract class FluentMigrator.Runner.Generators.Base.TypeMapBase : object {
    private Dictionary`2<DbType, SortedList`2<int, string>> _templates;
    private static string SizePlaceholder;
    protected static string PrecisionPlaceholder;
    protected abstract virtual void SetupTypeMaps();
    protected void SetTypeMap(DbType type, string template);
    protected void SetTypeMap(DbType type, string template, int maxSize);
    public virtual string GetTypeMap(DbType type, Nullable`1<int> size, Nullable`1<int> precision);
    private void EnsureHasList(DbType type);
    private string ReplacePlaceholders(string value, Nullable`1<int> size, Nullable`1<int> precision);
}
[ExtensionAttribute]
public static class FluentMigrator.Runner.Generators.CompatibilityModeExtension : object {
    [ExtensionAttribute]
public static string HandleCompatibility(CompatibilityMode mode, string message);
}
public class FluentMigrator.Runner.Generators.EmptyDescriptionGenerator : object {
    public sealed virtual IEnumerable`1<string> GenerateDescriptionStatements(CreateTableExpression expression);
    public sealed virtual string GenerateDescriptionStatement(AlterTableExpression expression);
    public sealed virtual string GenerateDescriptionStatement(CreateColumnExpression expression);
    public sealed virtual string GenerateDescriptionStatement(AlterColumnExpression expression);
}
public class FluentMigrator.Runner.Generators.GeneratorOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<CompatibilityMode> <CompatibilityMode>k__BackingField;
    public Nullable`1<CompatibilityMode> CompatibilityMode { get; public set; }
    [CompilerGeneratedAttribute]
public Nullable`1<CompatibilityMode> get_CompatibilityMode();
    [CompilerGeneratedAttribute]
public void set_CompatibilityMode(Nullable`1<CompatibilityMode> value);
}
public abstract class FluentMigrator.Runner.Generators.Generic.GenericDescriptionGenerator : object {
    protected abstract virtual string GenerateTableDescription(string schemaName, string tableName, string tableDescription);
    protected abstract virtual string GenerateColumnDescription(string descriptionName, string schemaName, string tableName, string columnName, string columnDescription);
    public virtual IEnumerable`1<string> GenerateDescriptionStatements(CreateTableExpression expression);
    public virtual string GenerateDescriptionStatement(AlterTableExpression expression);
    public virtual string GenerateDescriptionStatement(CreateColumnExpression expression);
    public virtual string GenerateDescriptionStatement(AlterColumnExpression expression);
}
public abstract class FluentMigrator.Runner.Generators.Generic.GenericGenerator : GeneratorBase {
    [CompilerGeneratedAttribute]
private CompatibilityMode <CompatibilityMode>k__BackingField;
    public CompatibilityMode CompatibilityMode { get; public set; }
    public string CreateTable { get; }
    public string DropTable { get; }
    public string DropTableIfExists { get; }
    public string AddColumn { get; }
    public string DropColumn { get; }
    public string AlterColumn { get; }
    public string RenameColumn { get; }
    public string RenameTable { get; }
    public string CreateSchema { get; }
    public string AlterSchema { get; }
    public string DropSchema { get; }
    public string CreateIndex { get; }
    public string DropIndex { get; }
    public string InsertData { get; }
    public string UpdateData { get; }
    public string DeleteData { get; }
    public string CreateConstraint { get; }
    public string DeleteConstraint { get; }
    public string CreateForeignKeyConstraint { get; }
    protected GenericGenerator(IColumn column, IQuoter quoter, IDescriptionGenerator descriptionGenerator, IOptions`1<GeneratorOptions> generatorOptions);
    [CompilerGeneratedAttribute]
public CompatibilityMode get_CompatibilityMode();
    [CompilerGeneratedAttribute]
public void set_CompatibilityMode(CompatibilityMode value);
    public virtual string get_CreateTable();
    public virtual string get_DropTable();
    public virtual string get_DropTableIfExists();
    public virtual string get_AddColumn();
    public virtual string get_DropColumn();
    public virtual string get_AlterColumn();
    public virtual string get_RenameColumn();
    public virtual string get_RenameTable();
    public virtual string get_CreateSchema();
    public virtual string get_AlterSchema();
    public virtual string get_DropSchema();
    public virtual string get_CreateIndex();
    public virtual string get_DropIndex();
    public virtual string get_InsertData();
    public virtual string get_UpdateData();
    public virtual string get_DeleteData();
    public virtual string get_CreateConstraint();
    public virtual string get_DeleteConstraint();
    public virtual string get_CreateForeignKeyConstraint();
    public virtual string GetUniqueString(CreateIndexExpression column);
    public virtual string GetClusterTypeString(CreateIndexExpression column);
    public virtual string Generate(CreateTableExpression expression);
    public virtual string Generate(DeleteTableExpression expression);
    public virtual string Generate(RenameTableExpression expression);
    public virtual string Generate(CreateColumnExpression expression);
    public virtual string Generate(AlterColumnExpression expression);
    public virtual string Generate(DeleteColumnExpression expression);
    public virtual string Generate(RenameColumnExpression expression);
    public virtual string Generate(CreateIndexExpression expression);
    public virtual string Generate(DeleteIndexExpression expression);
    public virtual string Generate(CreateForeignKeyExpression expression);
    public virtual string Generate(CreateConstraintExpression expression);
    public virtual string Generate(DeleteConstraintExpression expression);
    public virtual string GenerateForeignKeyName(ForeignKeyDefinition foreignKey);
    public virtual string Generate(DeleteForeignKeyExpression expression);
    public virtual string Generate(InsertDataExpression expression);
    protected virtual StringBuilder AppendSqlStatementEndToken(StringBuilder stringBuilder);
    protected List`1<KeyValuePair`2<string, string>> GenerateColumnNamesAndValues(InsertDataExpression expression);
    protected string ValidateAdditionalFeatureCompatibility(IEnumerable`1<KeyValuePair`2<string, object>> features);
    public virtual string Generate(UpdateDataExpression expression);
    public virtual string Generate(DeleteDataExpression expression);
    public virtual string Generate(CreateSchemaExpression expression);
    public virtual string Generate(DeleteSchemaExpression expression);
    public virtual string Generate(AlterSchemaExpression expression);
    public virtual string Generate(CreateSequenceExpression expression);
    public virtual string Generate(DeleteSequenceExpression expression);
    [CompilerGeneratedAttribute]
private bool <ValidateAdditionalFeatureCompatibility>b__62_0(KeyValuePair`2<string, object> x);
}
public class FluentMigrator.Runner.Generators.Generic.GenericQuoter : object {
    [CompilerGeneratedAttribute]
private string <IdentifierSeparator>k__BackingField;
    public string ValueQuote { get; }
    public string EscapeValueQuote { get; }
    public string IdentifierSeparator { get; }
    public string OpenQuote { get; }
    public string CloseQuote { get; }
    public string OpenQuoteEscapeString { get; }
    public string CloseQuoteEscapeString { get; }
    public virtual string QuoteValue(object value);
    public virtual string FromTimeSpan(TimeSpan value);
    protected virtual string FormatByteArray(Byte[] value);
    private string FormatDecimal(decimal value);
    private string FormatFloat(float value);
    private string FormatDouble(double value);
    public virtual string FormatNull();
    public virtual string FormatAnsiString(string value);
    public virtual string FormatNationalString(string value);
    public virtual string FormatSystemMethods(SystemMethods value);
    public virtual string FormatChar(char value);
    public virtual string FormatBool(bool value);
    public virtual string FormatGuid(Guid value);
    public virtual string FormatDateTime(DateTime value);
    public virtual string FormatDateTimeOffset(DateTimeOffset value);
    public virtual string FormatEnum(object value);
    public virtual string get_ValueQuote();
    public virtual string get_EscapeValueQuote();
    [CompilerGeneratedAttribute]
public virtual string get_IdentifierSeparator();
    public virtual string get_OpenQuote();
    public virtual string get_CloseQuote();
    public virtual string get_OpenQuoteEscapeString();
    public virtual string get_CloseQuoteEscapeString();
    public virtual bool IsQuoted(string name);
    protected virtual bool ShouldQuote(string name);
    public virtual string Quote(string name);
    public virtual string QuoteColumnName(string columnName);
    public virtual string QuoteConstraintName(string constraintName, string schemaName);
    public virtual string QuoteIndexName(string indexName, string schemaName);
    public virtual string QuoteTableName(string tableName, string schemaName);
    public virtual string QuoteSequenceName(string sequenceName, string schemaName);
    public virtual string QuoteSchemaName(string schemaName);
    public virtual string UnQuote(string quoted);
    protected virtual string CreateSchemaPrefixedQuotedIdentifier(string quotedSchemaName, string quotedIdentifier);
}
public interface FluentMigrator.Runner.Generators.IColumn {
    public abstract virtual string Generate(ColumnDefinition column);
    public abstract virtual string Generate(IEnumerable`1<ColumnDefinition> columns, string tableName);
    public abstract virtual string GenerateForeignKeyName(ForeignKeyDefinition foreignKey);
    public abstract virtual string FormatForeignKey(ForeignKeyDefinition foreignKey, Func`2<ForeignKeyDefinition, string> fkNameGeneration);
    public abstract virtual string FormatCascade(string onWhat, Rule rule);
}
public interface FluentMigrator.Runner.Generators.IDescriptionGenerator {
    public abstract virtual IEnumerable`1<string> GenerateDescriptionStatements(CreateTableExpression expression);
    public abstract virtual string GenerateDescriptionStatement(AlterTableExpression expression);
    public abstract virtual string GenerateDescriptionStatement(CreateColumnExpression expression);
    public abstract virtual string GenerateDescriptionStatement(AlterColumnExpression expression);
}
public interface FluentMigrator.Runner.Generators.IGeneratorAccessor {
    public IMigrationGenerator Generator { get; }
    public abstract virtual IMigrationGenerator get_Generator();
}
public interface FluentMigrator.Runner.Generators.IQuoter {
    public abstract virtual string Quote(string name);
    public abstract virtual string UnQuote(string value);
    public abstract virtual string QuoteValue(object value);
    public abstract virtual bool IsQuoted(string value);
    public abstract virtual string QuoteColumnName(string columnName);
    public abstract virtual string QuoteTableName(string tableName, string schemaName);
    public abstract virtual string QuoteIndexName(string indexName, string schemaName);
    public abstract virtual string QuoteConstraintName(string constraintName, string schemaName);
    public abstract virtual string QuoteSequenceName(string sequenceName, string schemaName);
    public abstract virtual string QuoteSchemaName(string schemaName);
}
public interface FluentMigrator.Runner.Generators.ITypeMap {
    public abstract virtual string GetTypeMap(DbType type, Nullable`1<int> size, Nullable`1<int> precision);
}
public class FluentMigrator.Runner.Generators.SelectingGeneratorAccessor : object {
    [CompilerGeneratedAttribute]
private IMigrationGenerator <Generator>k__BackingField;
    public IMigrationGenerator Generator { get; }
    public SelectingGeneratorAccessor(IEnumerable`1<IMigrationGenerator> generators, IOptionsSnapshot`1<SelectingGeneratorAccessorOptions> options, IOptionsSnapshot`1<SelectingProcessorAccessorOptions> processorSelectorOptions);
    [CompilerGeneratedAttribute]
public sealed virtual IMigrationGenerator get_Generator();
    private IMigrationGenerator FindGenerator(IReadOnlyCollection`1<IMigrationGenerator> generators, string generatorId);
    private static string GetName(IMigrationGenerator generator);
}
public class FluentMigrator.Runner.Generators.SelectingGeneratorAccessorOptions : object {
    [CompilerGeneratedAttribute]
private string <GeneratorId>k__BackingField;
    public string GeneratorId { get; public set; }
    [CompilerGeneratedAttribute]
public string get_GeneratorId();
    [CompilerGeneratedAttribute]
public void set_GeneratorId(string value);
}
public class FluentMigrator.Runner.Helpers.FormatHelper : object {
    public static string FormatSqlEscape(string sql);
}
[ObsoleteAttribute]
public interface FluentMigrator.Runner.IAnnouncer {
    public abstract virtual void Heading(string message);
    public abstract virtual void Say(string message);
    public abstract virtual void Emphasize(string message);
    public abstract virtual void Sql(string sql);
    public abstract virtual void ElapsedTime(TimeSpan timeSpan);
    public abstract virtual void Error(string message);
    public abstract virtual void Error(Exception exception);
    [ObsoleteAttribute]
public abstract virtual void Write(string message, bool isNotSql);
}
public interface FluentMigrator.Runner.IMaintenanceLoader {
    public abstract virtual IList`1<IMigrationInfo> LoadMaintenance(MigrationStage stage);
}
public interface FluentMigrator.Runner.IMigrationInformationLoader {
    public abstract virtual SortedList`2<long, IMigrationInfo> LoadMigrations();
}
public interface FluentMigrator.Runner.IMigrationRunner {
    public IMigrationProcessor Processor { get; }
    public IMigrationInformationLoader MigrationLoader { get; }
    [ObsoleteAttribute]
public IRunnerContext RunnerContext { get; }
    public abstract virtual IMigrationProcessor get_Processor();
    public abstract virtual IMigrationInformationLoader get_MigrationLoader();
    public abstract virtual IRunnerContext get_RunnerContext();
    public abstract virtual void Up(IMigration migration);
    public abstract virtual void Down(IMigration migration);
    public abstract virtual void MigrateUp();
    public abstract virtual void MigrateUp(long version);
    public abstract virtual void Rollback(int steps);
    public abstract virtual void RollbackToVersion(long version);
    public abstract virtual void MigrateDown(long version);
    public abstract virtual void ValidateVersionOrder();
    public abstract virtual void ListMigrations();
    public abstract virtual bool HasMigrationsToApplyUp(Nullable`1<long> version);
    public abstract virtual bool HasMigrationsToApplyDown(long version);
    public abstract virtual bool HasMigrationsToApplyRollback();
    public abstract virtual bool LoadVersionInfoIfRequired();
}
public interface FluentMigrator.Runner.IMigrationRunnerBuilder {
    public IServiceCollection Services { get; }
    [EditorBrowsableAttribute("1")]
public IAssemblySourceItem DanglingAssemblySourceItem { get; public set; }
    public abstract virtual IServiceCollection get_Services();
    public abstract virtual IAssemblySourceItem get_DanglingAssemblySourceItem();
    public abstract virtual void set_DanglingAssemblySourceItem(IAssemblySourceItem value);
}
public interface FluentMigrator.Runner.IMigrationRunnerConventions {
    public Func`2<Type, bool> TypeIsMigration { get; }
    public Func`2<Type, bool> TypeIsProfile { get; }
    public Func`2<Type, Nullable`1<MigrationStage>> GetMaintenanceStage { get; }
    public Func`2<Type, bool> TypeIsVersionTableMetaData { get; }
    [ObsoleteAttribute]
public Func`2<Type, IMigrationInfo> GetMigrationInfo { get; }
    public Func`2<IMigration, IMigrationInfo> GetMigrationInfoForMigration { get; }
    public Func`2<Type, bool> TypeHasTags { get; }
    public Func`3<Type, IEnumerable`1<string>, bool> TypeHasMatchingTags { get; }
    public abstract virtual Func`2<Type, bool> get_TypeIsMigration();
    public abstract virtual Func`2<Type, bool> get_TypeIsProfile();
    public abstract virtual Func`2<Type, Nullable`1<MigrationStage>> get_GetMaintenanceStage();
    public abstract virtual Func`2<Type, bool> get_TypeIsVersionTableMetaData();
    public abstract virtual Func`2<Type, IMigrationInfo> get_GetMigrationInfo();
    public abstract virtual Func`2<IMigration, IMigrationInfo> get_GetMigrationInfoForMigration();
    public abstract virtual Func`2<Type, bool> get_TypeHasTags();
    public abstract virtual Func`3<Type, IEnumerable`1<string>, bool> get_TypeHasMatchingTags();
}
public interface FluentMigrator.Runner.IMigrationScope {
    public bool IsActive { get; }
    public abstract virtual bool get_IsActive();
    public abstract virtual void Complete();
    public abstract virtual void Cancel();
}
public interface FluentMigrator.Runner.IMigrationScopeManager {
    public IMigrationScope CurrentScope { get; }
    public abstract virtual IMigrationScope get_CurrentScope();
    public abstract virtual IMigrationScope BeginScope();
    public abstract virtual IMigrationScope CreateOrWrapMigrationScope(bool transactional);
}
public interface FluentMigrator.Runner.IMigrationScopeStarter {
    public abstract virtual IMigrationScope BeginScope();
}
public class FluentMigrator.Runner.Infrastructure.DefaultMigrationRunnerConventions : object {
    [CompilerGeneratedAttribute]
private static DefaultMigrationRunnerConventions <Instance>k__BackingField;
    public static DefaultMigrationRunnerConventions Instance { get; }
    public Func`2<Type, bool> TypeIsMigration { get; }
    public Func`2<Type, bool> TypeIsProfile { get; }
    public Func`2<Type, Nullable`1<MigrationStage>> GetMaintenanceStage { get; }
    public Func`2<Type, bool> TypeIsVersionTableMetaData { get; }
    [ObsoleteAttribute]
public Func`2<Type, IMigrationInfo> GetMigrationInfo { get; }
    public Func`2<IMigration, IMigrationInfo> GetMigrationInfoForMigration { get; }
    public Func`2<Type, bool> TypeHasTags { get; }
    public Func`3<Type, IEnumerable`1<string>, bool> TypeHasMatchingTags { get; }
    private static DefaultMigrationRunnerConventions();
    [CompilerGeneratedAttribute]
public static DefaultMigrationRunnerConventions get_Instance();
    public sealed virtual Func`2<Type, bool> get_TypeIsMigration();
    public sealed virtual Func`2<Type, bool> get_TypeIsProfile();
    public sealed virtual Func`2<Type, Nullable`1<MigrationStage>> get_GetMaintenanceStage();
    public sealed virtual Func`2<Type, bool> get_TypeIsVersionTableMetaData();
    public sealed virtual Func`2<Type, IMigrationInfo> get_GetMigrationInfo();
    public sealed virtual Func`2<IMigration, IMigrationInfo> get_GetMigrationInfoForMigration();
    public sealed virtual Func`2<Type, bool> get_TypeHasTags();
    public sealed virtual Func`3<Type, IEnumerable`1<string>, bool> get_TypeHasMatchingTags();
    private static bool TypeIsMigrationImpl(Type type);
    private static Nullable`1<MigrationStage> GetMaintenanceStageImpl(Type type);
    private static bool TypeIsProfileImpl(Type type);
    private static bool TypeIsVersionTableMetaDataImpl(Type type);
    private static IMigrationInfo GetMigrationInfoForMigrationImpl(IMigration migration);
    private IMigrationInfo GetMigrationInfoForImpl(Type migrationType);
    private static bool TypeHasTagsImpl(Type type);
    private static IEnumerable`1<T> GetInheritedCustomAttributes(Type type);
    private static bool TypeHasMatchingTagsImpl(Type type, IEnumerable`1<string> tagsToMatch);
}
internal class FluentMigrator.Runner.Infrastructure.Hosts.NetCoreHost : object {
    public string BaseDirectory { get; }
    public sealed virtual string get_BaseDirectory();
    public sealed virtual object CreateInstance(IServiceProvider serviceProvider, string assemblyName, string typeName);
    public sealed virtual IEnumerable`1<Assembly> GetLoadedAssemblies();
    private static Assembly GetAssembly(string assemblyName);
    private static Assembly GetAssemblyByFileName(string assemblyName);
}
public interface FluentMigrator.Runner.Infrastructure.IHostAbstraction {
    public string BaseDirectory { get; }
    public abstract virtual string get_BaseDirectory();
    public abstract virtual object CreateInstance(IServiceProvider serviceProvider, string assemblyName, string typeName);
    public abstract virtual IEnumerable`1<Assembly> GetLoadedAssemblies();
}
public static class FluentMigrator.Runner.Infrastructure.RuntimeHost : object {
    private static String[] _noNames;
    private static IHostAbstraction _currentHost;
    public static IHostAbstraction Current { get; }
    private static RuntimeHost();
    public static IHostAbstraction get_Current();
    [IteratorStateMachineAttribute("FluentMigrator.Runner.Infrastructure.RuntimeHost/<FindAssemblies>d__4")]
public static IEnumerable`1<AssemblyName> FindAssemblies();
    [IteratorStateMachineAttribute("FluentMigrator.Runner.Infrastructure.RuntimeHost/<FindAssemblies>d__5")]
public static IEnumerable`1<AssemblyName> FindAssemblies(string name);
    [IteratorStateMachineAttribute("FluentMigrator.Runner.Infrastructure.RuntimeHost/<GetAssemblyNames>d__6")]
private static IEnumerable`1<AssemblyName> GetAssemblyNames(string fullGacDirectory, string assemblyName);
    private static IEnumerable`1<string> GetFullGacDirectories();
    [IteratorStateMachineAttribute("FluentMigrator.Runner.Infrastructure.RuntimeHost/<GetFullGacDirectoriesOnWindows>d__8")]
private static IEnumerable`1<string> GetFullGacDirectoriesOnWindows(string winDir);
    private static String[] GetGacDirectories();
}
[ObsoleteAttribute("Exists only to simplify the migration to the new FluentMigration version")]
public class FluentMigrator.Runner.Initialization.AssemblyCollectionService : object {
    private Lazy`1<Assembly[]> _lazyAssemblies;
    private Lazy`1<Type[]> _exportedTypes;
    private Lazy`1<ManifestResourceNameWithAssembly[]> _resourceEntries;
    public Assembly[] Assemblies { get; }
    public AssemblyCollectionService(IAssemblySource source);
    public sealed virtual Assembly[] get_Assemblies();
    public sealed virtual Type[] GetExportedTypes();
    public sealed virtual ManifestResourceNameWithAssembly[] GetManifestResourceNames();
}
public class FluentMigrator.Runner.Initialization.AssemblyFileLoadEngine : object {
    public sealed virtual bool TryLoad(string name, ICollection`1<Exception> exceptions, Assembly& assembly);
}
public class FluentMigrator.Runner.Initialization.AssemblyLoader.AssemblyLoaderFactory : object {
    public virtual IAssemblyLoader GetAssemblyLoader(string name);
}
public class FluentMigrator.Runner.Initialization.AssemblyLoader.AssemblyLoaderFromFile : object {
    private string _name;
    public AssemblyLoaderFromFile(string name);
    public sealed virtual Assembly Load();
}
public class FluentMigrator.Runner.Initialization.AssemblyLoader.AssemblyLoaderFromName : object {
    private string _name;
    public AssemblyLoaderFromName(string name);
    public sealed virtual Assembly Load();
}
public interface FluentMigrator.Runner.Initialization.AssemblyLoader.IAssemblyLoader {
    public abstract virtual Assembly Load();
}
public class FluentMigrator.Runner.Initialization.AssemblyMigrationSourceItem : object {
    private IReadOnlyCollection`1<Assembly> _assemblies;
    public IEnumerable`1<Type> MigrationTypeCandidates { get; }
    public AssemblyMigrationSourceItem(IReadOnlyCollection`1<Assembly> assemblies);
    public sealed virtual IEnumerable`1<Type> get_MigrationTypeCandidates();
}
public class FluentMigrator.Runner.Initialization.AssemblyNameLoadEngine : object {
    public sealed virtual bool TryLoad(string name, ICollection`1<Exception> exceptions, Assembly& assembly);
}
public class FluentMigrator.Runner.Initialization.AssemblySource : object {
    private Lazy`1<IReadOnlyCollection`1<Assembly>> _assemblies;
    public IReadOnlyCollection`1<Assembly> Assemblies { get; }
    public AssemblySource(IOptions`1<AssemblySourceOptions> options, IEnumerable`1<IAssemblyLoadEngine> loadEngines, IEnumerable`1<IAssemblySourceItem> sourceItems);
    [ObsoleteAttribute]
public AssemblySource(Func`1<IAssemblyCollection> assemblyCollectionFunc);
    public sealed virtual IReadOnlyCollection`1<Assembly> get_Assemblies();
    private static IReadOnlyCollection`1<Assembly> LoadAssemblies(AssemblySourceOptions options, IReadOnlyCollection`1<IAssemblyLoadEngine> loadEngines);
}
public class FluentMigrator.Runner.Initialization.AssemblySourceConventionSetAccessor : object {
    private Lazy`1<IConventionSet> _lazyValue;
    public AssemblySourceConventionSetAccessor(IOptionsSnapshot`1<TypeFilterOptions> typeFilterOptions, IEnumerable`1<ITypeSourceItem`1<IConventionSet>> sources, IServiceProvider serviceProvider, IAssemblySource assemblySource);
    public sealed virtual IConventionSet GetConventionSet();
    private static IEnumerable`1<Type> GetAssemblyTypes(IAssemblySource assemblySource, Predicate`1<Type> predicate);
}
public class FluentMigrator.Runner.Initialization.AssemblySourceItem : object {
    [CompilerGeneratedAttribute]
private IEnumerable`1<Assembly> <Assemblies>k__BackingField;
    public IEnumerable`1<Assembly> Assemblies { get; }
    public AssemblySourceItem(Assembly[] assemblies);
    [CompilerGeneratedAttribute]
public sealed virtual IEnumerable`1<Assembly> get_Assemblies();
}
public class FluentMigrator.Runner.Initialization.AssemblySourceItem`1 : object {
    private Assembly[] _assemblies;
    public AssemblySourceItem`1(Assembly[] assemblies);
    public sealed virtual IEnumerable`1<Type> GetCandidates(Predicate`1<Type> predicate);
}
public class FluentMigrator.Runner.Initialization.AssemblySourceMigrationRunnerConventionsAccessor : object {
    private Lazy`1<IMigrationRunnerConventions> _lazyConventions;
    public IMigrationRunnerConventions MigrationRunnerConventions { get; }
    public AssemblySourceMigrationRunnerConventionsAccessor(IServiceProvider serviceProvider, IAssemblySource assemblySource);
    public sealed virtual IMigrationRunnerConventions get_MigrationRunnerConventions();
}
public class FluentMigrator.Runner.Initialization.AssemblySourceOptions : object {
    [CompilerGeneratedAttribute]
private String[] <AssemblyNames>k__BackingField;
    public String[] AssemblyNames { get; public set; }
    [CompilerGeneratedAttribute]
public String[] get_AssemblyNames();
    [CompilerGeneratedAttribute]
public void set_AssemblyNames(String[] value);
}
public class FluentMigrator.Runner.Initialization.AssemblySourceVersionTableMetaDataAccessor : object {
    private Lazy`1<IVersionTableMetaData> _lazyValue;
    public IVersionTableMetaData VersionTableMetaData { get; }
    public AssemblySourceVersionTableMetaDataAccessor(IOptionsSnapshot`1<TypeFilterOptions> typeFilterOptions, IEnumerable`1<IVersionTableMetaDataSourceItem> sources, IServiceProvider serviceProvider, IAssemblySource assemblySource);
    public sealed virtual IVersionTableMetaData get_VersionTableMetaData();
    private static IEnumerable`1<Type> GetAssemblyTypes(IAssemblySource assemblySource, Predicate`1<Type> predicate);
}
public class FluentMigrator.Runner.Initialization.AssemblyVersionTableMetaDataSourceItem : object {
    private Assembly[] _assemblies;
    public AssemblyVersionTableMetaDataSourceItem(Assembly[] assemblies);
    public sealed virtual IEnumerable`1<Type> GetCandidates(Predicate`1<Type> predicate);
}
public class FluentMigrator.Runner.Initialization.ConfigurationConnectionStringReader : object {
    private IServiceProvider _serviceProvider;
    [CompilerGeneratedAttribute]
private int <Priority>k__BackingField;
    public int Priority { get; }
    public ConfigurationConnectionStringReader(IServiceProvider serviceProvider);
    [CompilerGeneratedAttribute]
public sealed virtual int get_Priority();
    public sealed virtual string GetConnectionString(string connectionStringOrName);
}
public class FluentMigrator.Runner.Initialization.ConnectionStringAccessor : object {
    private Lazy`1<string> _lazyData;
    public string ConnectionString { get; }
    public ConnectionStringAccessor(IOptionsSnapshot`1<ProcessorOptions> processorOptions, IOptionsSnapshot`1<SelectingProcessorAccessorOptions> processorSelectorOptions, IEnumerable`1<IConnectionStringReader> readers);
    public sealed virtual string get_ConnectionString();
}
[ObsoleteAttribute]
public class FluentMigrator.Runner.Initialization.DefaultConnectionStringProvider : object {
    private IReadOnlyCollection`1<IConnectionStringReader> _accessors;
    private object _syncRoot;
    private string _connectionString;
    public DefaultConnectionStringProvider(IEnumerable`1<IConnectionStringReader> accessors);
    public sealed virtual string GetConnectionString(IAnnouncer announcer, string connection, string configPath, string assemblyLocation, string database);
    [IteratorStateMachineAttribute("FluentMigrator.Runner.Initialization.DefaultConnectionStringProvider/<CreateAccessors>d__6")]
private static IEnumerable`1<IConnectionStringReader> CreateAccessors(string assemblyLocation, IAnnouncer announcer, string configPath);
    private static string GetConnectionString(IReadOnlyCollection`1<IConnectionStringReader> accessors, string connection, string database);
    private static string GetConnectionString(IReadOnlyCollection`1<IConnectionStringReader> accessors, string connectionStringOrName);
}
public interface FluentMigrator.Runner.Initialization.IAssemblyLoadEngine {
    public abstract virtual bool TryLoad(string name, ICollection`1<Exception> exceptions, Assembly& assembly);
}
public interface FluentMigrator.Runner.Initialization.IAssemblySource {
    public IReadOnlyCollection`1<Assembly> Assemblies { get; }
    public abstract virtual IReadOnlyCollection`1<Assembly> get_Assemblies();
}
public interface FluentMigrator.Runner.Initialization.IAssemblySourceItem {
    public IEnumerable`1<Assembly> Assemblies { get; }
    public abstract virtual IEnumerable`1<Assembly> get_Assemblies();
}
public interface FluentMigrator.Runner.Initialization.IConnectionStringAccessor {
    public string ConnectionString { get; }
    public abstract virtual string get_ConnectionString();
}
[ObsoleteAttribute]
public interface FluentMigrator.Runner.Initialization.IConnectionStringProvider {
    public abstract virtual string GetConnectionString(IAnnouncer announcer, string connection, string configPath, string assemblyLocation, string database);
}
public interface FluentMigrator.Runner.Initialization.IConnectionStringReader {
    public int Priority { get; }
    public abstract virtual int get_Priority();
    public abstract virtual string GetConnectionString(string connectionStringOrName);
}
public interface FluentMigrator.Runner.Initialization.IConventionSetAccessor {
    public abstract virtual IConventionSet GetConventionSet();
}
public interface FluentMigrator.Runner.Initialization.IFilteringMigrationSource {
    public abstract virtual IEnumerable`1<IMigration> GetMigrations(Func`2<Type, bool> predicate);
}
public interface FluentMigrator.Runner.Initialization.IMigrationRunnerConventionsAccessor {
    public IMigrationRunnerConventions MigrationRunnerConventions { get; }
    public abstract virtual IMigrationRunnerConventions get_MigrationRunnerConventions();
}
[ObsoleteAttribute("Use IFilteringMigrationSource to get optimal performance")]
public interface FluentMigrator.Runner.Initialization.IMigrationSource {
    public abstract virtual IEnumerable`1<IMigration> GetMigrations();
}
public interface FluentMigrator.Runner.Initialization.IMigrationSourceItem {
    public IEnumerable`1<Type> MigrationTypeCandidates { get; }
    public abstract virtual IEnumerable`1<Type> get_MigrationTypeCandidates();
}
public interface FluentMigrator.Runner.Initialization.IProfileSource {
    public abstract virtual IEnumerable`1<IMigration> GetProfiles(string profile);
}
[ObsoleteAttribute]
public interface FluentMigrator.Runner.Initialization.IRunnerContext {
    [ObsoleteAttribute("A preselection must happen during the migration runner configuration")]
public string Database { get; public set; }
    public string Connection { get; public set; }
    public String[] Targets { get; public set; }
    public bool PreviewOnly { get; public set; }
    public string Namespace { get; public set; }
    public bool NestedNamespaces { get; public set; }
    public string Task { get; public set; }
    public long Version { get; public set; }
    public long StartVersion { get; public set; }
    public bool NoConnection { get; public set; }
    public int Steps { get; public set; }
    public string WorkingDirectory { get; public set; }
    public string Profile { get; public set; }
    public IAnnouncer Announcer { get; }
    public IStopWatch StopWatch { get; }
    public Nullable`1<int> Timeout { get; public set; }
    public string ConnectionStringConfigPath { get; public set; }
    public IEnumerable`1<string> Tags { get; public set; }
    public string ProviderSwitches { get; public set; }
    public bool TransactionPerSession { get; public set; }
    public bool AllowBreakingChange { get; public set; }
    public string DefaultSchemaName { get; public set; }
    public bool StripComments { get; public set; }
    public abstract virtual string get_Database();
    public abstract virtual void set_Database(string value);
    public abstract virtual string get_Connection();
    public abstract virtual void set_Connection(string value);
    public abstract virtual String[] get_Targets();
    public abstract virtual void set_Targets(String[] value);
    public abstract virtual bool get_PreviewOnly();
    public abstract virtual void set_PreviewOnly(bool value);
    public abstract virtual string get_Namespace();
    public abstract virtual void set_Namespace(string value);
    public abstract virtual bool get_NestedNamespaces();
    public abstract virtual void set_NestedNamespaces(bool value);
    public abstract virtual string get_Task();
    public abstract virtual void set_Task(string value);
    public abstract virtual long get_Version();
    public abstract virtual void set_Version(long value);
    public abstract virtual long get_StartVersion();
    public abstract virtual void set_StartVersion(long value);
    public abstract virtual bool get_NoConnection();
    public abstract virtual void set_NoConnection(bool value);
    public abstract virtual int get_Steps();
    public abstract virtual void set_Steps(int value);
    public abstract virtual string get_WorkingDirectory();
    public abstract virtual void set_WorkingDirectory(string value);
    public abstract virtual string get_Profile();
    public abstract virtual void set_Profile(string value);
    public abstract virtual IAnnouncer get_Announcer();
    public abstract virtual IStopWatch get_StopWatch();
    public abstract virtual Nullable`1<int> get_Timeout();
    public abstract virtual void set_Timeout(Nullable`1<int> value);
    public abstract virtual string get_ConnectionStringConfigPath();
    public abstract virtual void set_ConnectionStringConfigPath(string value);
    public abstract virtual IEnumerable`1<string> get_Tags();
    public abstract virtual void set_Tags(IEnumerable`1<string> value);
    public abstract virtual string get_ProviderSwitches();
    public abstract virtual void set_ProviderSwitches(string value);
    public abstract virtual bool get_TransactionPerSession();
    public abstract virtual void set_TransactionPerSession(bool value);
    public abstract virtual bool get_AllowBreakingChange();
    public abstract virtual void set_AllowBreakingChange(bool value);
    public abstract virtual string get_DefaultSchemaName();
    public abstract virtual void set_DefaultSchemaName(string value);
    public abstract virtual bool get_StripComments();
    public abstract virtual void set_StripComments(bool value);
}
public interface FluentMigrator.Runner.Initialization.IScanIn {
    [EditorBrowsableAttribute("1")]
public IAssemblySourceItem SourceItem { get; }
    public abstract virtual IAssemblySourceItem get_SourceItem();
}
public interface FluentMigrator.Runner.Initialization.IScanInBuilder {
    public IScanInForBuilder For { get; }
    public abstract virtual IScanInForBuilder get_For();
}
public interface FluentMigrator.Runner.Initialization.IScanInForBuilder {
    public abstract virtual IScanInBuilder Migrations();
    public abstract virtual IScanInBuilder VersionTableMetaData();
    public abstract virtual IScanInBuilder ConventionSet();
    public abstract virtual IScanInBuilder EmbeddedResources();
    public abstract virtual IMigrationRunnerBuilder All();
}
public interface FluentMigrator.Runner.Initialization.ITypeSourceItem`1 {
    public abstract virtual IEnumerable`1<Type> GetCandidates(Predicate`1<Type> predicate);
}
public interface FluentMigrator.Runner.Initialization.IVersionTableMetaDataAccessor {
    public IVersionTableMetaData VersionTableMetaData { get; }
    public abstract virtual IVersionTableMetaData get_VersionTableMetaData();
}
public interface FluentMigrator.Runner.Initialization.IVersionTableMetaDataSourceItem {
    public abstract virtual IEnumerable`1<Type> GetCandidates(Predicate`1<Type> predicate);
}
public class FluentMigrator.Runner.Initialization.MigrationSource : object {
    private IAssemblySource _source;
    private IMigrationRunnerConventions _conventions;
    private IServiceProvider _serviceProvider;
    private ConcurrentDictionary`2<Type, IMigration> _instanceCache;
    private IEnumerable`1<IMigrationSourceItem> _sourceItems;
    public MigrationSource(IAssemblySource source, IMigrationRunnerConventions conventions, IServiceProvider serviceProvider, IEnumerable`1<IMigrationSourceItem> sourceItems);
    [ObsoleteAttribute]
public MigrationSource(IAssemblySource source, IMigrationRunnerConventions conventions);
    public sealed virtual IEnumerable`1<IMigration> GetMigrations();
    public sealed virtual IEnumerable`1<IMigration> GetMigrations(Func`2<Type, bool> predicate);
    private IEnumerable`1<Type> GetMigrationTypeCandidates();
    private IMigration CreateInstance(Type type);
}
[ObsoleteAttribute]
public class FluentMigrator.Runner.Initialization.NetFramework.AppConfigConnectionStringAccessorOptions : object {
    [CompilerGeneratedAttribute]
private string <ConnectionStringConfigPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MachineName>k__BackingField;
    public string ConnectionStringConfigPath { get; public set; }
    public string MachineName { get; public set; }
    [CompilerGeneratedAttribute]
public string get_ConnectionStringConfigPath();
    [CompilerGeneratedAttribute]
public void set_ConnectionStringConfigPath(string value);
    [CompilerGeneratedAttribute]
public string get_MachineName();
    [CompilerGeneratedAttribute]
public void set_MachineName(string value);
}
public class FluentMigrator.Runner.Initialization.PassThroughConnectionStringReader : object {
    private string _connectionString;
    [CompilerGeneratedAttribute]
private int <Priority>k__BackingField;
    public int Priority { get; }
    public PassThroughConnectionStringReader(string connectionString);
    [CompilerGeneratedAttribute]
public sealed virtual int get_Priority();
    public sealed virtual string GetConnectionString(string connectionStringName);
}
public class FluentMigrator.Runner.Initialization.PassThroughMigrationRunnerConventionsAccessor : object {
    [CompilerGeneratedAttribute]
private IMigrationRunnerConventions <MigrationRunnerConventions>k__BackingField;
    public IMigrationRunnerConventions MigrationRunnerConventions { get; }
    public PassThroughMigrationRunnerConventionsAccessor(IMigrationRunnerConventions conventions);
    [CompilerGeneratedAttribute]
public sealed virtual IMigrationRunnerConventions get_MigrationRunnerConventions();
}
public class FluentMigrator.Runner.Initialization.PassThroughVersionTableMetaDataAccessor : object {
    [CompilerGeneratedAttribute]
private IVersionTableMetaData <VersionTableMetaData>k__BackingField;
    public IVersionTableMetaData VersionTableMetaData { get; }
    public PassThroughVersionTableMetaDataAccessor(IVersionTableMetaData versionTableMetaData);
    [CompilerGeneratedAttribute]
public sealed virtual IVersionTableMetaData get_VersionTableMetaData();
}
public class FluentMigrator.Runner.Initialization.ProfileSource : object {
    private IFilteringMigrationSource _source;
    private IMigrationRunnerConventions _conventions;
    public ProfileSource(IFilteringMigrationSource source, IMigrationRunnerConventions conventions);
    public sealed virtual IEnumerable`1<IMigration> GetProfiles(string profile);
    private bool IsSelectedProfile(Type type, string profile);
}
[ObsoleteAttribute]
public class FluentMigrator.Runner.Initialization.RunnerContext : object {
    [CompilerGeneratedAttribute]
private string <Database>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Connection>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Targets>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PreviewOnly>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Namespace>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NestedNamespaces>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Task>k__BackingField;
    [CompilerGeneratedAttribute]
private long <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private long <StartVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NoConnection>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Steps>k__BackingField;
    [CompilerGeneratedAttribute]
private string <WorkingDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Profile>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Timeout>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ConnectionStringConfigPath>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <Tags>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <TransactionPerSession>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowBreakingChange>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProviderSwitches>k__BackingField;
    [CompilerGeneratedAttribute]
private IAnnouncer <Announcer>k__BackingField;
    [CompilerGeneratedAttribute]
private IStopWatch <StopWatch>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DefaultSchemaName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <StripComments>k__BackingField;
    public string Database { get; public set; }
    public string Connection { get; public set; }
    public String[] Targets { get; public set; }
    public bool PreviewOnly { get; public set; }
    public string Namespace { get; public set; }
    public bool NestedNamespaces { get; public set; }
    public string Task { get; public set; }
    public long Version { get; public set; }
    public long StartVersion { get; public set; }
    public bool NoConnection { get; public set; }
    public int Steps { get; public set; }
    public string WorkingDirectory { get; public set; }
    public string Profile { get; public set; }
    public Nullable`1<int> Timeout { get; public set; }
    public string ConnectionStringConfigPath { get; public set; }
    public IEnumerable`1<string> Tags { get; public set; }
    public bool TransactionPerSession { get; public set; }
    public bool AllowBreakingChange { get; public set; }
    public string ProviderSwitches { get; public set; }
    public IAnnouncer Announcer { get; }
    public IStopWatch StopWatch { get; }
    public string DefaultSchemaName { get; public set; }
    public bool StripComments { get; public set; }
    public RunnerContext(IAnnouncer announcer);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Database();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Database(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Connection();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Connection(string value);
    [CompilerGeneratedAttribute]
public sealed virtual String[] get_Targets();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Targets(String[] value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_PreviewOnly();
    [CompilerGeneratedAttribute]
public sealed virtual void set_PreviewOnly(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Namespace();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Namespace(string value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_NestedNamespaces();
    [CompilerGeneratedAttribute]
public sealed virtual void set_NestedNamespaces(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Task();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Task(string value);
    [CompilerGeneratedAttribute]
public sealed virtual long get_Version();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Version(long value);
    [CompilerGeneratedAttribute]
public sealed virtual long get_StartVersion();
    [CompilerGeneratedAttribute]
public sealed virtual void set_StartVersion(long value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_NoConnection();
    [CompilerGeneratedAttribute]
public sealed virtual void set_NoConnection(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_Steps();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Steps(int value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_WorkingDirectory();
    [CompilerGeneratedAttribute]
public sealed virtual void set_WorkingDirectory(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Profile();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Profile(string value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<int> get_Timeout();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Timeout(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ConnectionStringConfigPath();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ConnectionStringConfigPath(string value);
    [CompilerGeneratedAttribute]
public sealed virtual IEnumerable`1<string> get_Tags();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Tags(IEnumerable`1<string> value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_TransactionPerSession();
    [CompilerGeneratedAttribute]
public sealed virtual void set_TransactionPerSession(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_AllowBreakingChange();
    [CompilerGeneratedAttribute]
public sealed virtual void set_AllowBreakingChange(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ProviderSwitches();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ProviderSwitches(string value);
    [CompilerGeneratedAttribute]
public sealed virtual IAnnouncer get_Announcer();
    [CompilerGeneratedAttribute]
public sealed virtual IStopWatch get_StopWatch();
    [CompilerGeneratedAttribute]
public sealed virtual string get_DefaultSchemaName();
    [CompilerGeneratedAttribute]
public sealed virtual void set_DefaultSchemaName(string value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_StripComments();
    [CompilerGeneratedAttribute]
public sealed virtual void set_StripComments(bool value);
}
public class FluentMigrator.Runner.Initialization.RunnerOptions : object {
    [CompilerGeneratedAttribute]
private string <Task>k__BackingField;
    [CompilerGeneratedAttribute]
private long <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private long <StartVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Steps>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Profile>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Tags>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowBreakingChange>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <TransactionPerSession>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NoConnection>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IncludeUntaggedMaintenances>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IncludeUntaggedMigrations>k__BackingField;
    public string Task { get; public set; }
    public long Version { get; public set; }
    public long StartVersion { get; public set; }
    public int Steps { get; public set; }
    public string Profile { get; public set; }
    public String[] Tags { get; public set; }
    public bool AllowBreakingChange { get; public set; }
    public bool TransactionPerSession { get; public set; }
    public bool NoConnection { get; public set; }
    public bool IncludeUntaggedMaintenances { get; public set; }
    public bool IncludeUntaggedMigrations { get; public set; }
    [ObsoleteAttribute]
public RunnerOptions(IRunnerContext runnerContext);
    [CompilerGeneratedAttribute]
public string get_Task();
    [CompilerGeneratedAttribute]
public void set_Task(string value);
    [CompilerGeneratedAttribute]
public long get_Version();
    [CompilerGeneratedAttribute]
public void set_Version(long value);
    [CompilerGeneratedAttribute]
public long get_StartVersion();
    [CompilerGeneratedAttribute]
public void set_StartVersion(long value);
    [CompilerGeneratedAttribute]
public int get_Steps();
    [CompilerGeneratedAttribute]
public void set_Steps(int value);
    [CompilerGeneratedAttribute]
public string get_Profile();
    [CompilerGeneratedAttribute]
public void set_Profile(string value);
    [CompilerGeneratedAttribute]
public String[] get_Tags();
    [CompilerGeneratedAttribute]
public void set_Tags(String[] value);
    [CompilerGeneratedAttribute]
public bool get_AllowBreakingChange();
    [CompilerGeneratedAttribute]
public void set_AllowBreakingChange(bool value);
    [CompilerGeneratedAttribute]
public bool get_TransactionPerSession();
    [CompilerGeneratedAttribute]
public void set_TransactionPerSession(bool value);
    [CompilerGeneratedAttribute]
public bool get_NoConnection();
    [CompilerGeneratedAttribute]
public void set_NoConnection(bool value);
    [CompilerGeneratedAttribute]
public bool get_IncludeUntaggedMaintenances();
    [CompilerGeneratedAttribute]
public void set_IncludeUntaggedMaintenances(bool value);
    [CompilerGeneratedAttribute]
public bool get_IncludeUntaggedMigrations();
    [CompilerGeneratedAttribute]
public void set_IncludeUntaggedMigrations(bool value);
    [ObsoleteAttribute]
public void SetValuesFrom(IRunnerContext runnerContext);
}
public class FluentMigrator.Runner.Initialization.TaskExecutor : object {
    private ILogger _logger;
    private IAssemblySource _assemblySource;
    private RunnerOptions _runnerOptions;
    private Lazy`1<IServiceProvider> _lazyServiceProvider;
    private IReadOnlyCollection`1<Assembly> _assemblies;
    [CompilerGeneratedAttribute]
private IMigrationRunner <Runner>k__BackingField;
    [CompilerGeneratedAttribute]
private IConnectionStringProvider <ConnectionStringProvider>k__BackingField;
    protected IMigrationRunner Runner { get; protected set; }
    [ObsoleteAttribute]
protected IConnectionStringProvider ConnectionStringProvider { get; }
    protected IServiceProvider ServiceProvider { get; }
    public TaskExecutor(ILogger`1<TaskExecutor> logger, IAssemblySource assemblySource, IOptions`1<RunnerOptions> runnerOptions, IServiceProvider serviceProvider);
    [ObsoleteAttribute]
public TaskExecutor(IRunnerContext runnerContext, Action`1<IMigrationRunnerBuilder> configureRunner);
    [ObsoleteAttribute]
public TaskExecutor(IRunnerContext runnerContext, AssemblyLoaderFactory assemblyLoaderFactory, IConnectionStringProvider connectionStringProvider, Action`1<IMigrationRunnerBuilder> configureRunner);
    [CompilerGeneratedAttribute]
protected IMigrationRunner get_Runner();
    [CompilerGeneratedAttribute]
protected void set_Runner(IMigrationRunner value);
    [CompilerGeneratedAttribute]
protected IConnectionStringProvider get_ConnectionStringProvider();
    protected IServiceProvider get_ServiceProvider();
    [ObsoleteAttribute]
protected virtual IEnumerable`1<Assembly> GetTargetAssemblies();
    protected virtual void Initialize();
    public void Execute();
    public bool HasMigrationsToApply();
}
public class FluentMigrator.Runner.Initialization.TypeFilterOptions : object {
    [CompilerGeneratedAttribute]
private string <Namespace>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NestedNamespaces>k__BackingField;
    public string Namespace { get; public set; }
    public bool NestedNamespaces { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Namespace();
    [CompilerGeneratedAttribute]
public void set_Namespace(string value);
    [CompilerGeneratedAttribute]
public bool get_NestedNamespaces();
    [CompilerGeneratedAttribute]
public void set_NestedNamespaces(bool value);
}
public interface FluentMigrator.Runner.IProfileLoader {
    public abstract virtual void ApplyProfiles(IMigrationRunner runner);
}
public interface FluentMigrator.Runner.IStopWatch {
    public abstract virtual void Start();
    public abstract virtual void Stop();
    public abstract virtual TimeSpan ElapsedTime();
    public abstract virtual TimeSpan Time(Action action);
}
public interface FluentMigrator.Runner.IVersionLoader {
    public bool AlreadyCreatedVersionSchema { get; }
    public bool AlreadyCreatedVersionTable { get; }
    public IMigrationRunner Runner { get; public set; }
    public IVersionInfo VersionInfo { get; public set; }
    public IVersionTableMetaData VersionTableMetaData { get; }
    public abstract virtual bool get_AlreadyCreatedVersionSchema();
    public abstract virtual bool get_AlreadyCreatedVersionTable();
    public abstract virtual void DeleteVersion(long version);
    public abstract virtual IVersionTableMetaData GetVersionTableMetaData();
    public abstract virtual void LoadVersionInfo();
    public abstract virtual void RemoveVersionTable();
    public abstract virtual IMigrationRunner get_Runner();
    public abstract virtual void set_Runner(IMigrationRunner value);
    public abstract virtual void UpdateVersionInfo(long version);
    public abstract virtual void UpdateVersionInfo(long version, string description);
    public abstract virtual IVersionInfo get_VersionInfo();
    public abstract virtual void set_VersionInfo(IVersionInfo value);
    public abstract virtual IVersionTableMetaData get_VersionTableMetaData();
}
[ExtensionAttribute]
[ObsoleteAttribute]
internal static class FluentMigrator.Runner.LegacyExtensions : object {
    [ExtensionAttribute]
public static string GetName(IMigrationGenerator generator);
    [ExtensionAttribute]
internal static ProcessorOptions GetProcessorOptions(IMigrationProcessorOptions options, string connectionString);
    [ExtensionAttribute]
public static Type GetVersionTableMetaDataType(IEnumerable`1<Assembly> assemblies, IMigrationRunnerConventions runnerConventions, IRunnerContext runnerContext);
    [ExtensionAttribute]
public static Type GetVersionTableMetaDataType(IEnumerable`1<Assembly> assemblies, IServiceProvider serviceProvider);
    [ExtensionAttribute]
public static string LoadConnectionString(IReadOnlyCollection`1<Assembly> assemblies, IConnectionStringProvider connectionStringProvider, IRunnerContext runnerContext);
    [IteratorStateMachineAttribute("FluentMigrator.Runner.LegacyExtensions/<GetTargetAssemblies>d__5")]
[ExtensionAttribute]
public static IEnumerable`1<Assembly> GetTargetAssemblies(AssemblyLoaderFactory loaderFactory, IEnumerable`1<string> assemblyNames);
    [ExtensionAttribute]
public static IReadOnlyCollection`1<Type> GetExportedTypes(IEnumerable`1<Assembly> assemblies);
}
[ObsoleteAttribute]
public class FluentMigrator.Runner.Logging.AnnouncerFluentMigratorLogger : FluentMigratorLogger {
    private IAnnouncer _announcer;
    public AnnouncerFluentMigratorLogger(IAnnouncer announcer);
    protected virtual void WriteError(string message);
    protected virtual void WriteError(Exception exception);
    protected virtual void WriteHeading(string message);
    protected virtual void WriteEmphasize(string message);
    protected virtual void WriteSql(string sql);
    protected virtual void WriteEmptySql();
    protected virtual void WriteElapsedTime(TimeSpan timeSpan);
    protected virtual void WriteSay(string message);
}
public class FluentMigrator.Runner.Logging.FluentMigratorConsoleLogger : FluentMigratorRunnerLogger {
    public FluentMigratorConsoleLogger(FluentMigratorLoggerOptions options);
    protected virtual void WriteHeading(string message);
    protected virtual void WriteEmphasize(string message);
    protected virtual void WriteSql(string sql);
    protected virtual void WriteEmptySql();
    protected virtual void WriteElapsedTime(TimeSpan timeSpan);
    protected virtual void WriteSay(string message);
    protected virtual void WriteError(Exception exception);
    protected virtual void WriteError(string message);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private void <>n__0(string message);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private void <>n__1(Exception exception);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private void <>n__2(string message);
}
public class FluentMigrator.Runner.Logging.FluentMigratorConsoleLoggerProvider : object {
    private FluentMigratorLoggerOptions _options;
    public FluentMigratorConsoleLoggerProvider(IOptions`1<FluentMigratorLoggerOptions> options);
    public sealed virtual ILogger CreateLogger(string categoryName);
    public sealed virtual void Dispose();
}
public abstract class FluentMigrator.Runner.Logging.FluentMigratorLogger : object {
    private FluentMigratorLoggerOptions _options;
    protected FluentMigratorLogger(FluentMigratorLoggerOptions options);
    public sealed virtual void Log(LogLevel logLevel, EventId eventId, TState state, Exception exception, Func`3<TState, Exception, string> formatter);
    public sealed virtual bool IsEnabled(LogLevel logLevel);
    public sealed virtual IDisposable BeginScope(TState state);
    protected abstract virtual void WriteError(string message);
    protected abstract virtual void WriteError(Exception exception);
    protected abstract virtual void WriteHeading(string message);
    protected abstract virtual void WriteEmphasize(string message);
    protected abstract virtual void WriteSql(string sql);
    protected abstract virtual void WriteEmptySql();
    protected abstract virtual void WriteElapsedTime(TimeSpan timeSpan);
    protected abstract virtual void WriteSay(string message);
}
public class FluentMigrator.Runner.Logging.FluentMigratorRunnerLogger : FluentMigratorLogger {
    private TextWriter _output;
    private TextWriter _error;
    public FluentMigratorRunnerLogger(TextWriter output, TextWriter error, FluentMigratorLoggerOptions options);
    protected virtual void WriteError(Exception exception);
    protected virtual void WriteHeading(string message);
    protected virtual void WriteEmphasize(string message);
    protected virtual void WriteSql(string sql);
    protected virtual void WriteEmptySql();
    protected virtual void WriteSay(string message);
    protected virtual void WriteElapsedTime(TimeSpan timeSpan);
    protected virtual void WriteError(string message);
}
public interface FluentMigrator.Runner.Logging.IPasswordMaskUtility {
    public abstract virtual string ApplyMask(string connectionString);
}
[ObsoleteAttribute("Used to ease transition to the logging framework")]
internal class FluentMigrator.Runner.Logging.LegacyFluentMigratorLoggerProvider : object {
    private IAnnouncer _announcer;
    public LegacyFluentMigratorLoggerProvider(IAnnouncer announcer);
    public sealed virtual ILogger CreateLogger(string categoryName);
    public sealed virtual void Dispose();
}
public class FluentMigrator.Runner.Logging.LogFileFluentMigratorLoggerOptions : SqlScriptFluentMigratorLoggerOptions {
    [CompilerGeneratedAttribute]
private string <OutputFileName>k__BackingField;
    public string OutputFileName { get; public set; }
    [CompilerGeneratedAttribute]
public string get_OutputFileName();
    [CompilerGeneratedAttribute]
public void set_OutputFileName(string value);
}
public class FluentMigrator.Runner.Logging.LogFileFluentMigratorLoggerProvider : SqlScriptFluentMigratorLoggerProvider {
    public LogFileFluentMigratorLoggerProvider(IAssemblySource assemblySource, IOptions`1<LogFileFluentMigratorLoggerOptions> options);
    private static string GetOutputFileName(IAssemblySource assemblySource, LogFileFluentMigratorLoggerOptions options);
}
public class FluentMigrator.Runner.Logging.PasswordMaskUtility : object {
    private static Regex _matchPwd;
    private static PasswordMaskUtility();
    public sealed virtual string ApplyMask(string connectionString);
}
internal class FluentMigrator.Runner.Logging.SqlScriptFluentMigratorLogger : FluentMigratorLogger {
    private SqlTextWriter _writer;
    private SqlScriptFluentMigratorLoggerOptions _options;
    public SqlScriptFluentMigratorLogger(SqlTextWriter writer, SqlScriptFluentMigratorLoggerOptions options);
    protected virtual void WriteError(string message);
    protected virtual void WriteError(Exception exception);
    protected virtual void WriteHeading(string message);
    protected virtual void WriteEmphasize(string message);
    protected virtual void WriteElapsedTime(TimeSpan timeSpan);
    protected virtual void WriteSay(string message);
    protected virtual void WriteSql(string sql);
    protected virtual void WriteEmptySql();
}
public class FluentMigrator.Runner.Logging.SqlScriptFluentMigratorLoggerOptions : FluentMigratorLoggerOptions {
    [CompilerGeneratedAttribute]
private bool <OutputGoBetweenStatements>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <OutputSemicolonDelimiter>k__BackingField;
    public bool OutputGoBetweenStatements { get; public set; }
    public bool OutputSemicolonDelimiter { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_OutputGoBetweenStatements();
    [CompilerGeneratedAttribute]
public void set_OutputGoBetweenStatements(bool value);
    [CompilerGeneratedAttribute]
public bool get_OutputSemicolonDelimiter();
    [CompilerGeneratedAttribute]
public void set_OutputSemicolonDelimiter(bool value);
}
public class FluentMigrator.Runner.Logging.SqlScriptFluentMigratorLoggerProvider : object {
    private TextWriter _writer;
    private bool _disposeWriter;
    private SqlTextWriter _sqlWriter;
    private ILogger _logFileLogger;
    public SqlScriptFluentMigratorLoggerProvider(TextWriter output, SqlScriptFluentMigratorLoggerOptions options, bool disposeWriter);
    public sealed virtual ILogger CreateLogger(string categoryName);
    public sealed virtual void Dispose();
}
internal class FluentMigrator.Runner.Logging.SqlTextWriter : TextWriter {
    private TextWriter _innerWriter;
    public Encoding Encoding { get; }
    public SqlTextWriter(TextWriter innerWriter);
    public virtual Encoding get_Encoding();
    public virtual void WriteLine(string value);
    public void WriteLineDirect(string message);
}
[ExtensionAttribute]
public static class FluentMigrator.Runner.LoggingUtilities : object {
    [ExtensionAttribute]
public static void LogElapsedTime(ILogger logger, TimeSpan timeSpan);
    [ExtensionAttribute]
public static void LogEmphasized(ILogger logger, string message);
    [ExtensionAttribute]
public static void LogHeader(ILogger logger, string message);
    [ExtensionAttribute]
public static void LogSql(ILogger logger, string sql);
    [ExtensionAttribute]
public static void LogSay(ILogger logger, string message);
    [ExtensionAttribute]
public static void WriteHorizontalRuler(TextWriter writer);
    [ExtensionAttribute]
public static void WriteHeader(TextWriter writer);
    [ExtensionAttribute]
public static void WriteExceptionMessage(TextWriter writer, string message, int level);
    [ExtensionAttribute]
public static void WriteException(TextWriter writer, Exception exception, int level);
}
public class FluentMigrator.Runner.MaintenanceLoader : object {
    private IDictionary`2<MigrationStage, IList`1<IMigration>> _maintenance;
    [ObsoleteAttribute]
public MaintenanceLoader(IAssemblyCollection assemblyCollection, IEnumerable`1<string> tags, IMigrationRunnerConventions conventions);
    public MaintenanceLoader(IAssemblySource assemblySource, IOptions`1<RunnerOptions> options, IMigrationRunnerConventions conventions, IServiceProvider serviceProvider);
    public sealed virtual IList`1<IMigrationInfo> LoadMaintenance(MigrationStage stage);
}
[ExtensionAttribute]
public static class FluentMigrator.Runner.MigrationConventionsExtensions : object {
    [ExtensionAttribute]
public static bool HasRequestedTags(IMigrationRunnerConventions conventions, Type type, String[] tagsList, bool includeUntagged);
}
public class FluentMigrator.Runner.MigrationRunner : object {
    private ILogger _logger;
    private IStopWatch _stopWatch;
    private IServiceProvider _serviceProvider;
    private Lazy`1<IVersionLoader> _versionLoader;
    private RunnerOptions _options;
    private ProcessorOptions _processorOptions;
    private MigrationValidator _migrationValidator;
    private IMigrationScopeManager _migrationScopeManager;
    private IVersionLoader _currentVersionLoader;
    private bool _alreadyOutputPreviewOnlyModeWarning;
    private List`1<Exception> _caughtExceptions;
    [CompilerGeneratedAttribute]
private bool <SilentlyFail>k__BackingField;
    [CompilerGeneratedAttribute]
private IMigrationProcessor <Processor>k__BackingField;
    [CompilerGeneratedAttribute]
private IMigrationInformationLoader <MigrationLoader>k__BackingField;
    [CompilerGeneratedAttribute]
private IProfileLoader <ProfileLoader>k__BackingField;
    [CompilerGeneratedAttribute]
private IMaintenanceLoader <MaintenanceLoader>k__BackingField;
    [CompilerGeneratedAttribute]
private IMigrationRunnerConventions <Conventions>k__BackingField;
    [CompilerGeneratedAttribute]
private IRunnerContext <RunnerContext>k__BackingField;
    public bool TransactionPerSession { get; }
    public bool SilentlyFail { get; public set; }
    public IReadOnlyList`1<Exception> CaughtExceptions { get; }
    public IMigrationProcessor Processor { get; }
    public IMigrationInformationLoader MigrationLoader { get; public set; }
    public IProfileLoader ProfileLoader { get; public set; }
    public IMaintenanceLoader MaintenanceLoader { get; }
    public IMigrationRunnerConventions Conventions { get; }
    public IMigrationScope CurrentScope { get; public set; }
    [ObsoleteAttribute]
public IRunnerContext RunnerContext { get; }
    public IVersionLoader VersionLoader { get; public set; }
    private bool AllowBreakingChanges { get; }
    [ObsoleteAttribute]
public MigrationRunner(IOptions`1<RunnerOptions> options, IOptionsSnapshot`1<ProcessorOptions> processorOptions, IProfileLoader profileLoader, IProcessorAccessor processorAccessor, IMaintenanceLoader maintenanceLoader, IMigrationInformationLoader migrationLoader, ILogger`1<MigrationRunner> logger, IStopWatch stopWatch, IMigrationRunnerConventionsAccessor migrationRunnerConventionsAccessor, IAssemblySource assemblySource, MigrationValidator migrationValidator, IServiceProvider serviceProvider);
    public MigrationRunner(IOptions`1<RunnerOptions> options, IOptionsSnapshot`1<ProcessorOptions> processorOptions, IProfileLoader profileLoader, IProcessorAccessor processorAccessor, IMaintenanceLoader maintenanceLoader, IMigrationInformationLoader migrationLoader, ILogger`1<MigrationRunner> logger, IStopWatch stopWatch, IMigrationRunnerConventionsAccessor migrationRunnerConventionsAccessor, MigrationValidator migrationValidator, IServiceProvider serviceProvider, IMigrationScopeManager migrationScopeHandler);
    [ObsoleteAttribute]
public MigrationRunner(IOptions`1<RunnerOptions> options, IOptionsSnapshot`1<ProcessorOptions> processorOptions, IProfileLoader profileLoader, IProcessorAccessor processorAccessor, IMaintenanceLoader maintenanceLoader, IMigrationInformationLoader migrationLoader, ILogger`1<MigrationRunner> logger, IStopWatch stopWatch, IMigrationRunnerConventionsAccessor migrationRunnerConventionsAccessor, IAssemblySource assemblySource, MigrationValidator migrationValidator, IServiceProvider serviceProvider, IMigrationScopeManager migrationScopeHandler);
    public bool get_TransactionPerSession();
    [CompilerGeneratedAttribute]
public bool get_SilentlyFail();
    [CompilerGeneratedAttribute]
public void set_SilentlyFail(bool value);
    public IReadOnlyList`1<Exception> get_CaughtExceptions();
    [CompilerGeneratedAttribute]
public sealed virtual IMigrationProcessor get_Processor();
    [CompilerGeneratedAttribute]
public sealed virtual IMigrationInformationLoader get_MigrationLoader();
    [CompilerGeneratedAttribute]
public void set_MigrationLoader(IMigrationInformationLoader value);
    [CompilerGeneratedAttribute]
public IProfileLoader get_ProfileLoader();
    [CompilerGeneratedAttribute]
public void set_ProfileLoader(IProfileLoader value);
    [CompilerGeneratedAttribute]
public IMaintenanceLoader get_MaintenanceLoader();
    [CompilerGeneratedAttribute]
public IMigrationRunnerConventions get_Conventions();
    public IMigrationScope get_CurrentScope();
    public void set_CurrentScope(IMigrationScope value);
    [CompilerGeneratedAttribute]
public sealed virtual IRunnerContext get_RunnerContext();
    public IVersionLoader get_VersionLoader();
    public void set_VersionLoader(IVersionLoader value);
    private bool get_AllowBreakingChanges();
    public void ApplyProfiles();
    public void ApplyMaintenance(MigrationStage stage, bool useAutomaticTransactionManagement);
    public sealed virtual void MigrateUp();
    public void MigrateUp(bool useAutomaticTransactionManagement);
    public sealed virtual void MigrateUp(long targetVersion);
    public void MigrateUp(long targetVersion, bool useAutomaticTransactionManagement);
    private IEnumerable`1<IMigrationInfo> GetUpMigrationsToApply(long version);
    private bool IsMigrationStepNeededForUpMigration(IMigrationInfo migration, long targetVersion);
    public sealed virtual void MigrateDown(long targetVersion);
    public void MigrateDown(long targetVersion, bool useAutomaticTransactionManagement);
    private IEnumerable`1<IMigrationInfo> GetDownMigrationsToApply(long targetVersion);
    private bool IsMigrationStepNeededForDownMigration(long versionOfMigration, long targetVersion);
    public sealed virtual bool HasMigrationsToApplyUp(Nullable`1<long> version);
    public sealed virtual bool HasMigrationsToApplyDown(long version);
    public sealed virtual bool HasMigrationsToApplyRollback();
    public sealed virtual bool LoadVersionInfoIfRequired();
    public virtual void ApplyMigrationUp(IMigrationInfo migrationInfo, bool useTransaction);
    public virtual void ApplyMigrationDown(IMigrationInfo migrationInfo, bool useTransaction);
    public sealed virtual void Rollback(int steps);
    public void Rollback(int steps, bool useAutomaticTransactionManagement);
    public sealed virtual void RollbackToVersion(long version);
    public void RollbackToVersion(long version, bool useAutomaticTransactionManagement);
    public sealed virtual void Up(IMigration migration);
    private void ExecuteMigration(IMigration migration, Action`2<IMigration, IMigrationContext> getExpressions);
    public sealed virtual void Down(IMigration migration);
    protected void ExecuteExpressions(ICollection`1<IMigrationExpression> expressions);
    private void AnnounceTime(string message, Action action);
    public sealed virtual void ValidateVersionOrder();
    public sealed virtual void ListMigrations();
    [IteratorStateMachineAttribute("FluentMigrator.Runner.MigrationRunner/<GetStatusStrings>d__79")]
private IEnumerable`1<string> GetStatusStrings(MigrationStatus status);
    private MigrationStatus GetStatus(KeyValuePair`2<long, IMigrationInfo> migration, long currentVersion);
    private bool MigrationVersionLessThanGreatestAppliedMigration(long version);
    public sealed virtual IMigrationScope BeginScope();
    [CompilerGeneratedAttribute]
private bool <IsMigrationStepNeededForUpMigration>g__MeetsMigrationConstraints|57_0(Type migrationType);
    [CompilerGeneratedAttribute]
private bool <IsMigrationStepNeededForUpMigration>b__57_1(MigrationConstraintAttribute a);
    [CompilerGeneratedAttribute]
private bool <HasMigrationsToApplyUp>b__62_0(KeyValuePair`2<long, IMigrationInfo> mi);
    [CompilerGeneratedAttribute]
private bool <ValidateVersionOrder>b__77_0(KeyValuePair`2<long, IMigrationInfo> kvp);
}
[ExtensionAttribute]
public static class FluentMigrator.Runner.MigrationRunnerBuilderExtensions : object {
    [ExtensionAttribute]
public static IMigrationRunnerBuilder ConfigureGlobalProcessorOptions(IMigrationRunnerBuilder builder, Action`1<ProcessorOptions> configureAction);
    [ExtensionAttribute]
public static IMigrationRunnerBuilder WithGlobalConnectionString(IMigrationRunnerBuilder builder, string connectionStringOrName);
    [ExtensionAttribute]
public static IMigrationRunnerBuilder WithGlobalConnectionString(IMigrationRunnerBuilder builder, Func`2<IServiceProvider, string> configureConnectionString);
    [ExtensionAttribute]
public static IMigrationRunnerBuilder WithGlobalCommandTimeout(IMigrationRunnerBuilder builder, TimeSpan commandTimeout);
    [ExtensionAttribute]
public static IMigrationRunnerBuilder WithGlobalStripComments(IMigrationRunnerBuilder builder, bool stripComments);
    [ExtensionAttribute]
public static IMigrationRunnerBuilder AsGlobalPreview(IMigrationRunnerBuilder builder, bool preview);
    [ExtensionAttribute]
public static IMigrationRunnerBuilder WithVersionTable(IMigrationRunnerBuilder builder, IVersionTableMetaData versionTableMetaData);
    [ExtensionAttribute]
public static IMigrationRunnerBuilder WithRunnerConventions(IMigrationRunnerBuilder builder, IMigrationRunnerConventions conventions);
    [ExtensionAttribute]
public static IMigrationRunnerBuilder WithMigrationsIn(IMigrationRunnerBuilder builder, Assembly[] assemblies);
    [ExtensionAttribute]
public static IScanInBuilder ScanIn(IMigrationRunnerBuilder builder, Assembly[] assemblies);
}
public class FluentMigrator.Runner.MigrationRunnerConventions : object {
    private static IMigrationRunnerConventions _default;
    [CompilerGeneratedAttribute]
private Func`2<Type, bool> <TypeIsMigration>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<Type, bool> <TypeIsProfile>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<Type, Nullable`1<MigrationStage>> <GetMaintenanceStage>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<Type, bool> <TypeIsVersionTableMetaData>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<Type, IMigrationInfo> <GetMigrationInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<IMigration, IMigrationInfo> <GetMigrationInfoForMigration>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<Type, bool> <TypeHasTags>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`3<Type, IEnumerable`1<string>, bool> <TypeHasMatchingTags>k__BackingField;
    public Func`2<Type, bool> TypeIsMigration { get; public set; }
    public Func`2<Type, bool> TypeIsProfile { get; public set; }
    public Func`2<Type, Nullable`1<MigrationStage>> GetMaintenanceStage { get; public set; }
    public Func`2<Type, bool> TypeIsVersionTableMetaData { get; public set; }
    [ObsoleteAttribute]
public Func`2<Type, IMigrationInfo> GetMigrationInfo { get; public set; }
    public Func`2<IMigration, IMigrationInfo> GetMigrationInfoForMigration { get; }
    public Func`2<Type, bool> TypeHasTags { get; public set; }
    public Func`3<Type, IEnumerable`1<string>, bool> TypeHasMatchingTags { get; public set; }
    private static MigrationRunnerConventions();
    [CompilerGeneratedAttribute]
public sealed virtual Func`2<Type, bool> get_TypeIsMigration();
    [CompilerGeneratedAttribute]
public void set_TypeIsMigration(Func`2<Type, bool> value);
    [CompilerGeneratedAttribute]
public sealed virtual Func`2<Type, bool> get_TypeIsProfile();
    [CompilerGeneratedAttribute]
public void set_TypeIsProfile(Func`2<Type, bool> value);
    [CompilerGeneratedAttribute]
public sealed virtual Func`2<Type, Nullable`1<MigrationStage>> get_GetMaintenanceStage();
    [CompilerGeneratedAttribute]
public void set_GetMaintenanceStage(Func`2<Type, Nullable`1<MigrationStage>> value);
    [CompilerGeneratedAttribute]
public sealed virtual Func`2<Type, bool> get_TypeIsVersionTableMetaData();
    [CompilerGeneratedAttribute]
public void set_TypeIsVersionTableMetaData(Func`2<Type, bool> value);
    [CompilerGeneratedAttribute]
public sealed virtual Func`2<Type, IMigrationInfo> get_GetMigrationInfo();
    [CompilerGeneratedAttribute]
public void set_GetMigrationInfo(Func`2<Type, IMigrationInfo> value);
    [CompilerGeneratedAttribute]
public sealed virtual Func`2<IMigration, IMigrationInfo> get_GetMigrationInfoForMigration();
    [CompilerGeneratedAttribute]
public sealed virtual Func`2<Type, bool> get_TypeHasTags();
    [CompilerGeneratedAttribute]
public void set_TypeHasTags(Func`2<Type, bool> value);
    [CompilerGeneratedAttribute]
public sealed virtual Func`3<Type, IEnumerable`1<string>, bool> get_TypeHasMatchingTags();
    [CompilerGeneratedAttribute]
public void set_TypeHasMatchingTags(Func`3<Type, IEnumerable`1<string>, bool> value);
}
public class FluentMigrator.Runner.MigrationScopeHandler : object {
    private IMigrationProcessor _processor;
    private bool _previewOnly;
    [CompilerGeneratedAttribute]
private IMigrationScope <CurrentScope>k__BackingField;
    public IMigrationScope CurrentScope { get; public set; }
    private bool HasActiveMigrationScope { get; }
    public MigrationScopeHandler(IMigrationProcessor processor, ProcessorOptions processorOptions);
    [CompilerGeneratedAttribute]
public sealed virtual IMigrationScope get_CurrentScope();
    [CompilerGeneratedAttribute]
public void set_CurrentScope(IMigrationScope value);
    public sealed virtual IMigrationScope BeginScope();
    public sealed virtual IMigrationScope CreateOrWrapMigrationScope(bool transactional);
    private void GuardAgainstActiveMigrationScope();
    private bool get_HasActiveMigrationScope();
    [CompilerGeneratedAttribute]
private void <BeginScope>b__7_0();
}
public class FluentMigrator.Runner.MigrationValidator : object {
    private ILogger _logger;
    private IConventionSet _conventions;
    private IMigrationExpressionValidator _validator;
    internal MigrationValidator(ILogger logger, IConventionSet conventions, IMigrationExpressionValidator validator);
    public MigrationValidator(ILogger`1<MigrationValidator> logger, IConventionSet conventions, IMigrationExpressionValidator validator);
    public void ApplyConventionsToAndValidateExpressions(IMigration migration, IEnumerable`1<IMigrationExpression> expressions);
    private void AppendError(StringBuilder builder, string expressionType, string errors);
}
public class FluentMigrator.Runner.NoOpMigrationScope : object {
    public bool IsActive { get; }
    public sealed virtual void Dispose();
    public sealed virtual bool get_IsActive();
    public sealed virtual void Complete();
    public sealed virtual void Cancel();
}
public class FluentMigrator.Runner.Processors.ConnectionlessProcessor : object {
    private ILogger _logger;
    [CompilerGeneratedAttribute]
private string <ConnectionString>k__BackingField;
    [CompilerGeneratedAttribute]
private IMigrationGenerator <Generator>k__BackingField;
    [CompilerGeneratedAttribute]
private IAnnouncer <Announcer>k__BackingField;
    [CompilerGeneratedAttribute]
private ProcessorOptions <Options>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DatabaseType>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<string> <DatabaseTypeAliases>k__BackingField;
    [ObsoleteAttribute("Will change from public to protected")]
public string ConnectionString { get; }
    public IMigrationGenerator Generator { get; public set; }
    [ObsoleteAttribute]
public IAnnouncer Announcer { get; public set; }
    public ProcessorOptions Options { get; public set; }
    public string DatabaseType { get; }
    public IList`1<string> DatabaseTypeAliases { get; }
    public ConnectionlessProcessor(IGeneratorAccessor generatorAccessor, ILogger logger, IOptionsSnapshot`1<ProcessorOptions> options, IOptions`1<SelectingProcessorAccessorOptions> accessorOptions);
    public ConnectionlessProcessor(IGeneratorAccessor generatorAccessor, ILogger logger, IOptionsSnapshot`1<ProcessorOptions> options, IReadOnlyCollection`1<string> processorIds);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ConnectionString();
    [CompilerGeneratedAttribute]
public IMigrationGenerator get_Generator();
    [CompilerGeneratedAttribute]
public void set_Generator(IMigrationGenerator value);
    [CompilerGeneratedAttribute]
public IAnnouncer get_Announcer();
    [CompilerGeneratedAttribute]
public void set_Announcer(IAnnouncer value);
    [CompilerGeneratedAttribute]
public ProcessorOptions get_Options();
    [CompilerGeneratedAttribute]
public void set_Options(ProcessorOptions value);
    public sealed virtual void Execute(string sql);
    public sealed virtual void Execute(string template, Object[] args);
    public sealed virtual DataSet ReadTableData(string schemaName, string tableName);
    public sealed virtual DataSet Read(string template, Object[] args);
    public sealed virtual bool Exists(string template, Object[] args);
    public sealed virtual void BeginTransaction();
    public sealed virtual void CommitTransaction();
    public sealed virtual void RollbackTransaction();
    protected void Process(string sql);
    public sealed virtual void Process(CreateSchemaExpression expression);
    public sealed virtual void Process(DeleteSchemaExpression expression);
    public sealed virtual void Process(AlterTableExpression expression);
    public sealed virtual void Process(AlterColumnExpression expression);
    public sealed virtual void Process(CreateTableExpression expression);
    public sealed virtual void Process(CreateColumnExpression expression);
    public sealed virtual void Process(DeleteTableExpression expression);
    public sealed virtual void Process(DeleteColumnExpression expression);
    public sealed virtual void Process(CreateForeignKeyExpression expression);
    public sealed virtual void Process(DeleteForeignKeyExpression expression);
    public sealed virtual void Process(CreateIndexExpression expression);
    public sealed virtual void Process(DeleteIndexExpression expression);
    public sealed virtual void Process(RenameTableExpression expression);
    public sealed virtual void Process(RenameColumnExpression expression);
    public sealed virtual void Process(InsertDataExpression expression);
    public sealed virtual void Process(AlterDefaultConstraintExpression expression);
    public sealed virtual void Process(PerformDBOperationExpression expression);
    public sealed virtual void Process(DeleteDataExpression expression);
    public sealed virtual void Process(UpdateDataExpression expression);
    public sealed virtual void Process(AlterSchemaExpression expression);
    public sealed virtual void Process(CreateSequenceExpression expression);
    public sealed virtual void Process(DeleteSequenceExpression expression);
    public sealed virtual void Process(CreateConstraintExpression expression);
    public sealed virtual void Process(DeleteConstraintExpression expression);
    public sealed virtual void Process(DeleteDefaultConstraintExpression expression);
    public sealed virtual bool SchemaExists(string schemaName);
    public sealed virtual bool TableExists(string schemaName, string tableName);
    public sealed virtual bool ColumnExists(string schemaName, string tableName, string columnName);
    public sealed virtual bool ConstraintExists(string schemaName, string tableName, string constraintName);
    public sealed virtual bool IndexExists(string schemaName, string tableName, string indexName);
    public sealed virtual bool SequenceExists(string schemaName, string sequenceName);
    public sealed virtual bool DefaultValueExists(string schemaName, string tableName, string columnName, object defaultValue);
    [CompilerGeneratedAttribute]
public sealed virtual string get_DatabaseType();
    [CompilerGeneratedAttribute]
public sealed virtual IList`1<string> get_DatabaseTypeAliases();
    public sealed virtual void Dispose();
}
[ObsoleteAttribute]
public class FluentMigrator.Runner.Processors.ConnectionlessProcessorFactory : object {
    private IMigrationGenerator _generator;
    private string _databaseId;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Name { get; }
    [ObsoleteAttribute]
public ConnectionlessProcessorFactory(IGeneratorAccessor generatorAccessor, IRunnerContext runnerContext);
    [ObsoleteAttribute]
public sealed virtual IMigrationProcessor Create(string connectionString, IAnnouncer announcer, IMigrationProcessorOptions options);
    public sealed virtual bool IsForProvider(string provider);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
}
[ExtensionAttribute]
public static class FluentMigrator.Runner.Processors.DataReaderExtensions : object {
    [ExtensionAttribute]
public static DataSet ReadDataSet(IDataReader reader);
    [ExtensionAttribute]
public static DataTable ReadTable(IDataReader reader);
    [ExtensionAttribute]
private static void CreateColumns(IDataReader reader, DataTable table);
    [ExtensionAttribute]
private static DataColumn CreateColumn(IDataReader reader, int fieldIndex);
}
public abstract class FluentMigrator.Runner.Processors.DbFactoryBase : object {
    private object _lock;
    private DbProviderFactory modreq(System.Runtime.CompilerServices.IsVolatile) _factory;
    public DbProviderFactory Factory { get; }
    protected DbFactoryBase(DbProviderFactory factory);
    public virtual DbProviderFactory get_Factory();
    protected abstract virtual DbProviderFactory CreateFactory();
    [ObsoleteAttribute]
public sealed virtual IDbConnection CreateConnection(string connectionString);
    [ObsoleteAttribute]
public virtual IDbCommand CreateCommand(string commandText, IDbConnection connection, IDbTransaction transaction, IMigrationProcessorOptions options);
}
public abstract class FluentMigrator.Runner.Processors.GenericProcessorBase : ProcessorBase {
    [ObsoleteAttribute]
private string _connectionString;
    private Lazy`1<DbProviderFactory> _dbProviderFactory;
    private Lazy`1<IDbConnection> _lazyConnection;
    private IDbConnection _connection;
    private bool _disposed;
    [CompilerGeneratedAttribute]
private IDbFactory <Factory>k__BackingField;
    [CompilerGeneratedAttribute]
private IDbTransaction <Transaction>k__BackingField;
    [ObsoleteAttribute("Will change from public to protected")]
public string ConnectionString { get; }
    public IDbConnection Connection { get; protected set; }
    [ObsoleteAttribute]
public IDbFactory Factory { get; protected set; }
    public IDbTransaction Transaction { get; protected set; }
    protected DbProviderFactory DbProviderFactory { get; }
    [ObsoleteAttribute]
protected GenericProcessorBase(IDbConnection connection, IDbFactory factory, IMigrationGenerator generator, IAnnouncer announcer, IMigrationProcessorOptions options);
    protected GenericProcessorBase(Func`1<DbProviderFactory> factoryAccessor, IMigrationGenerator generator, ILogger logger, ProcessorOptions options, IConnectionStringAccessor connectionStringAccessor);
    public virtual string get_ConnectionString();
    public IDbConnection get_Connection();
    protected void set_Connection(IDbConnection value);
    [CompilerGeneratedAttribute]
public IDbFactory get_Factory();
    [CompilerGeneratedAttribute]
protected void set_Factory(IDbFactory value);
    [CompilerGeneratedAttribute]
public IDbTransaction get_Transaction();
    [CompilerGeneratedAttribute]
protected void set_Transaction(IDbTransaction value);
    protected DbProviderFactory get_DbProviderFactory();
    protected virtual void EnsureConnectionIsOpen();
    protected virtual void EnsureConnectionIsClosed();
    public virtual void BeginTransaction();
    public virtual void RollbackTransaction();
    public virtual void CommitTransaction();
    protected virtual void Dispose(bool isDisposing);
    protected virtual IDbCommand CreateCommand(string commandText);
    protected virtual IDbCommand CreateCommand(string commandText, IDbConnection connection, IDbTransaction transaction);
}
[ObsoleteAttribute]
public interface FluentMigrator.Runner.Processors.IDbFactory {
    [ObsoleteAttribute]
public abstract virtual IDbConnection CreateConnection(string connectionString);
    [ObsoleteAttribute]
public abstract virtual IDbCommand CreateCommand(string commandText, IDbConnection connection, IDbTransaction transaction, IMigrationProcessorOptions options);
}
[ObsoleteAttribute]
public interface FluentMigrator.Runner.Processors.IMigrationProcessorFactory {
    public string Name { get; }
    [ObsoleteAttribute]
public abstract virtual IMigrationProcessor Create(string connectionString, IAnnouncer announcer, IMigrationProcessorOptions options);
    [ObsoleteAttribute]
public abstract virtual bool IsForProvider(string provider);
    public abstract virtual string get_Name();
}
public interface FluentMigrator.Runner.Processors.IProcessorAccessor {
    public IMigrationProcessor Processor { get; }
    public abstract virtual IMigrationProcessor get_Processor();
}
public abstract class FluentMigrator.Runner.Processors.ProcessorBase : object {
    protected internal IMigrationGenerator Generator;
    [ObsoleteAttribute]
protected IAnnouncer Announcer;
    [CompilerGeneratedAttribute]
private bool <WasCommitted>k__BackingField;
    [CompilerGeneratedAttribute]
private ILogger <Logger>k__BackingField;
    [CompilerGeneratedAttribute]
private ProcessorOptions <Options>k__BackingField;
    [ObsoleteAttribute]
public string ConnectionString { get; }
    public string DatabaseType { get; }
    public IList`1<string> DatabaseTypeAliases { get; }
    public bool WasCommitted { get; protected set; }
    protected internal ILogger Logger { get; }
    protected ProcessorOptions Options { get; }
    [ObsoleteAttribute]
protected ProcessorBase(IMigrationGenerator generator, IAnnouncer announcer, IMigrationProcessorOptions options);
    [ObsoleteAttribute]
protected ProcessorBase(IMigrationGenerator generator, IAnnouncer announcer, ProcessorOptions options);
    protected ProcessorBase(IMigrationGenerator generator, ILogger logger, ProcessorOptions options);
    public abstract virtual string get_ConnectionString();
    public abstract virtual string get_DatabaseType();
    public abstract virtual IList`1<string> get_DatabaseTypeAliases();
    [CompilerGeneratedAttribute]
public bool get_WasCommitted();
    [CompilerGeneratedAttribute]
protected void set_WasCommitted(bool value);
    [CompilerGeneratedAttribute]
protected internal ILogger get_Logger();
    [CompilerGeneratedAttribute]
protected ProcessorOptions get_Options();
    public virtual void Process(CreateSchemaExpression expression);
    public virtual void Process(DeleteSchemaExpression expression);
    public virtual void Process(CreateTableExpression expression);
    public virtual void Process(AlterTableExpression expression);
    public virtual void Process(AlterColumnExpression expression);
    public virtual void Process(CreateColumnExpression expression);
    public virtual void Process(DeleteTableExpression expression);
    public virtual void Process(DeleteColumnExpression expression);
    public virtual void Process(CreateForeignKeyExpression expression);
    public virtual void Process(DeleteForeignKeyExpression expression);
    public virtual void Process(CreateIndexExpression expression);
    public virtual void Process(DeleteIndexExpression expression);
    public virtual void Process(RenameTableExpression expression);
    public virtual void Process(RenameColumnExpression expression);
    public virtual void Process(InsertDataExpression expression);
    public virtual void Process(DeleteDataExpression expression);
    public virtual void Process(AlterDefaultConstraintExpression expression);
    public virtual void Process(UpdateDataExpression expression);
    public abstract virtual void Process(PerformDBOperationExpression expression);
    public virtual void Process(AlterSchemaExpression expression);
    public virtual void Process(CreateSequenceExpression expression);
    public virtual void Process(DeleteSequenceExpression expression);
    public virtual void Process(CreateConstraintExpression expression);
    public virtual void Process(DeleteConstraintExpression expression);
    public virtual void Process(DeleteDefaultConstraintExpression expression);
    protected abstract virtual void Process(string sql);
    public virtual void BeginTransaction();
    public virtual void CommitTransaction();
    public virtual void RollbackTransaction();
    public abstract virtual DataSet ReadTableData(string schemaName, string tableName);
    public abstract virtual DataSet Read(string template, Object[] args);
    public abstract virtual bool Exists(string template, Object[] args);
    public virtual void Execute(string sql);
    public abstract virtual void Execute(string template, Object[] args);
    public abstract virtual bool SchemaExists(string schemaName);
    public abstract virtual bool TableExists(string schemaName, string tableName);
    public abstract virtual bool ColumnExists(string schemaName, string tableName, string columnName);
    public abstract virtual bool ConstraintExists(string schemaName, string tableName, string constraintName);
    public abstract virtual bool IndexExists(string schemaName, string tableName, string indexName);
    public abstract virtual bool SequenceExists(string schemaName, string sequenceName);
    public abstract virtual bool DefaultValueExists(string schemaName, string tableName, string columnName, object defaultValue);
    public sealed virtual void Dispose();
    protected abstract virtual void Dispose(bool isDisposing);
    protected virtual void ReThrowWithSql(Exception ex, string sql);
}
public class FluentMigrator.Runner.Processors.ProcessorOptions : object {
    [CompilerGeneratedAttribute]
private string <ConnectionString>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PreviewOnly>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TimeSpan> <Timeout>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProviderSwitches>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <StripComments>k__BackingField;
    public string ConnectionString { get; public set; }
    public bool PreviewOnly { get; public set; }
    public Nullable`1<TimeSpan> Timeout { get; public set; }
    public string ProviderSwitches { get; public set; }
    public bool StripComments { get; public set; }
    private Nullable`1<int> FluentMigrator.IMigrationProcessorOptions.Timeout { get; }
    [ObsoleteAttribute]
public ProcessorOptions(IRunnerContext runnerContext);
    [CompilerGeneratedAttribute]
public string get_ConnectionString();
    [CompilerGeneratedAttribute]
public void set_ConnectionString(string value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_PreviewOnly();
    [CompilerGeneratedAttribute]
public void set_PreviewOnly(bool value);
    [CompilerGeneratedAttribute]
public Nullable`1<TimeSpan> get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(Nullable`1<TimeSpan> value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ProviderSwitches();
    [CompilerGeneratedAttribute]
public void set_ProviderSwitches(string value);
    [CompilerGeneratedAttribute]
public bool get_StripComments();
    [CompilerGeneratedAttribute]
public void set_StripComments(bool value);
    private sealed virtual override Nullable`1<int> FluentMigrator.IMigrationProcessorOptions.get_Timeout();
    [ObsoleteAttribute]
public void SetValuesFrom(IRunnerContext runnerContext);
}
public class FluentMigrator.Runner.Processors.ReflectionBasedDbFactory : DbFactoryBase {
    private IServiceProvider _serviceProvider;
    private TestEntry[] _testEntries;
    private DbProviderFactory _instance;
    [ObsoleteAttribute]
public ReflectionBasedDbFactory(string assemblyName, string dbProviderFactoryTypeName);
    [ObsoleteAttribute]
protected ReflectionBasedDbFactory(TestEntry[] testEntries);
    protected ReflectionBasedDbFactory(IServiceProvider serviceProvider, TestEntry[] testEntries);
    protected virtual DbProviderFactory CreateFactory();
    [ObsoleteAttribute]
protected static bool TryCreateFactory(IEnumerable`1<TestEntry> entries, ICollection`1<Exception> exceptions, DbProviderFactory& factory);
    protected static bool TryCreateFactory(IServiceProvider serviceProvider, IEnumerable`1<TestEntry> entries, ICollection`1<Exception> exceptions, DbProviderFactory& factory);
    protected static bool TryCreateFromAppDomainPaths(TestEntry entry, ICollection`1<Exception> exceptions, DbProviderFactory& factory);
    [ObsoleteAttribute]
protected static bool TryCreateFactoryFromRuntimeHost(TestEntry entry, ICollection`1<Exception> exceptions, DbProviderFactory& factory);
    protected static bool TryCreateFactoryFromRuntimeHost(TestEntry entry, ICollection`1<Exception> exceptions, IServiceProvider serviceProvider, DbProviderFactory& factory);
    protected static bool TryLoadAssemblyFromAppDomainDirectories(string assemblyName, ICollection`1<Exception> exceptions, Assembly& assembly);
    protected static bool TryLoadAssemblyFromDirectories(IEnumerable`1<string> directories, string assemblyName, ICollection`1<Exception> exceptions, Assembly& assembly);
    private static bool TryCreateFromGac(TestEntry entry, ICollection`1<Exception> exceptions, DbProviderFactory& factory);
    private static bool TryCreateFromCurrentDomain(TestEntry entry, ICollection`1<Exception> exceptions, DbProviderFactory& factory);
    private static bool TryLoadAssemblyFromCurrentDomain(string assemblyName, ICollection`1<Exception> exceptions, Assembly& assembly);
    [IteratorStateMachineAttribute("FluentMigrator.Runner.Processors.ReflectionBasedDbFactory/<FindAssembliesInGac>d__17")]
private static IEnumerable`1<AssemblyName> FindAssembliesInGac(String[] names);
    private static bool TryGetInstance(Type factoryType, DbProviderFactory& factory);
    private static bool TryCastInstance(object value, DbProviderFactory& factory);
    [IteratorStateMachineAttribute("FluentMigrator.Runner.Processors.ReflectionBasedDbFactory/<GetPathsFromAppDomain>d__20")]
private static IEnumerable`1<string> GetPathsFromAppDomain();
}
public class FluentMigrator.Runner.Processors.SelectingProcessorAccessor : object {
    [CompilerGeneratedAttribute]
private IMigrationProcessor <Processor>k__BackingField;
    public IMigrationProcessor Processor { get; }
    public SelectingProcessorAccessor(IEnumerable`1<IMigrationProcessor> processors, IOptionsSnapshot`1<SelectingProcessorAccessorOptions> options, IOptionsSnapshot`1<SelectingGeneratorAccessorOptions> generatorSelectorOptions, IServiceProvider serviceProvider);
    [CompilerGeneratedAttribute]
public sealed virtual IMigrationProcessor get_Processor();
    private IMigrationProcessor FindGenerator(IReadOnlyCollection`1<IMigrationProcessor> processors, string processorsId);
}
public class FluentMigrator.Runner.Processors.SelectingProcessorAccessorOptions : object {
    [CompilerGeneratedAttribute]
private string <ProcessorId>k__BackingField;
    public string ProcessorId { get; public set; }
    [CompilerGeneratedAttribute]
public string get_ProcessorId();
    [CompilerGeneratedAttribute]
public void set_ProcessorId(string value);
}
public class FluentMigrator.Runner.ProfileLoader : object {
    [CompilerGeneratedAttribute]
private IEnumerable`1<IMigration> <Profiles>k__BackingField;
    public IEnumerable`1<IMigration> Profiles { get; }
    [ObsoleteAttribute("Use the other constructor")]
public ProfileLoader(IOptions`1<RunnerOptions> options, IProfileSource source, IServiceProvider serviceProvider);
    public ProfileLoader(IOptions`1<RunnerOptions> options, IProfileSource source);
    [CompilerGeneratedAttribute]
public IEnumerable`1<IMigration> get_Profiles();
    public sealed virtual void ApplyProfiles(IMigrationRunner runner);
}
public static class FluentMigrator.Runner.RunnerEventIds : object {
    public static string RunnerCategory;
    public static EventId Heading;
    public static EventId Emphasize;
    public static EventId ElapsedTime;
    public static EventId Sql;
    public static EventId Say;
    private static RunnerEventIds();
}
public class FluentMigrator.Runner.StopWatch : object {
    public static Func`1<DateTime> TimeNow;
    private DateTime _startTime;
    private DateTime _endTime;
    private static StopWatch();
    public sealed virtual void Start();
    public sealed virtual void Stop();
    public sealed virtual TimeSpan ElapsedTime();
    public sealed virtual TimeSpan Time(Action action);
}
public class FluentMigrator.Runner.TrackingMigrationScope : object {
    private Action _disposalAction;
    [CompilerGeneratedAttribute]
private bool <IsActive>k__BackingField;
    public bool IsActive { get; private set; }
    public TrackingMigrationScope(Action disposalAction);
    public sealed virtual void Dispose();
    [CompilerGeneratedAttribute]
public virtual bool get_IsActive();
    [CompilerGeneratedAttribute]
private void set_IsActive(bool value);
    public sealed virtual void Complete();
    public sealed virtual void Cancel();
    protected virtual void DoComplete();
    protected virtual void DoCancel();
}
public class FluentMigrator.Runner.TransactionalMigrationScope : TrackingMigrationScope {
    private IMigrationProcessor _migrationProcessor;
    public TransactionalMigrationScope(IMigrationProcessor processor, Action disposalAction);
    protected virtual void DoComplete();
    protected virtual void DoCancel();
}
[ExtensionAttribute]
internal static class FluentMigrator.Runner.TypeFinder : object {
    [ExtensionAttribute]
public static IEnumerable`1<Type> FilterByNamespace(IEnumerable`1<Type> types, string namespace, bool loadNestedNamespaces);
    [ExtensionAttribute]
public static bool IsInNamespace(Type type, string namespace, bool loadNestedNamespaces);
}
public interface FluentMigrator.Runner.Versioning.IVersionInfo {
    public abstract virtual void AddAppliedMigration(long migration);
    public abstract virtual IEnumerable`1<long> AppliedMigrations();
    public abstract virtual bool HasAppliedMigration(long migration);
    public abstract virtual long Latest();
}
public class FluentMigrator.Runner.Versioning.VersionDescriptionMigration : Migration {
    private IVersionTableMetaData _versionTableMeta;
    public VersionDescriptionMigration(IVersionTableMetaData versionTableMeta);
    public virtual void Up();
    public virtual void Down();
}
public class FluentMigrator.Runner.Versioning.VersionInfo : object {
    private IList`1<long> _versionsApplied;
    public sealed virtual long Latest();
    public sealed virtual void AddAppliedMigration(long migration);
    public sealed virtual bool HasAppliedMigration(long migration);
    public sealed virtual IEnumerable`1<long> AppliedMigrations();
}
public class FluentMigrator.Runner.Versioning.VersionMigration : Migration {
    private IVersionTableMetaData _versionTableMetaData;
    public VersionMigration(IVersionTableMetaData versionTableMetaData);
    public virtual void Up();
    public virtual void Down();
}
public class FluentMigrator.Runner.Versioning.VersionSchemaMigration : Migration {
    private IVersionTableMetaData _versionTableMetaData;
    public VersionSchemaMigration(IVersionTableMetaData versionTableMetaData);
    public virtual void Up();
    public virtual void Down();
}
public class FluentMigrator.Runner.Versioning.VersionUniqueMigration : ForwardOnlyMigration {
    private IVersionTableMetaData _versionTableMeta;
    public VersionUniqueMigration(IVersionTableMetaData versionTableMeta);
    public virtual void Up();
}
public class FluentMigrator.Runner.VersionLoader : object {
    private IMigrationProcessor _processor;
    private IConventionSet _conventionSet;
    private bool _versionSchemaMigrationAlreadyRun;
    private bool _versionMigrationAlreadyRun;
    private bool _versionUniqueMigrationAlreadyRun;
    private bool _versionDescriptionMigrationAlreadyRun;
    private IVersionInfo _versionInfo;
    [CompilerGeneratedAttribute]
private IMigrationRunnerConventions <Conventions>k__BackingField;
    [CompilerGeneratedAttribute]
private IAssemblyCollection <Assemblies>k__BackingField;
    [CompilerGeneratedAttribute]
private IVersionTableMetaData <VersionTableMetaData>k__BackingField;
    [CompilerGeneratedAttribute]
private IMigrationRunner <Runner>k__BackingField;
    [CompilerGeneratedAttribute]
private VersionSchemaMigration <VersionSchemaMigration>k__BackingField;
    [CompilerGeneratedAttribute]
private IMigration <VersionMigration>k__BackingField;
    [CompilerGeneratedAttribute]
private IMigration <VersionUniqueMigration>k__BackingField;
    [CompilerGeneratedAttribute]
private IMigration <VersionDescriptionMigration>k__BackingField;
    private IMigrationRunnerConventions Conventions { get; private set; }
    [ObsoleteAttribute]
protected IAssemblyCollection Assemblies { get; protected set; }
    public IVersionTableMetaData VersionTableMetaData { get; }
    public IMigrationRunner Runner { get; public set; }
    public VersionSchemaMigration VersionSchemaMigration { get; }
    public IMigration VersionMigration { get; }
    public IMigration VersionUniqueMigration { get; }
    public IMigration VersionDescriptionMigration { get; }
    public IVersionInfo VersionInfo { get; public set; }
    public bool AlreadyCreatedVersionSchema { get; }
    public bool AlreadyCreatedVersionTable { get; }
    public bool AlreadyMadeVersionUnique { get; }
    public bool AlreadyMadeVersionDescription { get; }
    public bool OwnsVersionSchema { get; }
    [ObsoleteAttribute]
internal VersionLoader(IMigrationRunner runner, Assembly assembly, IConventionSet conventionSet, IMigrationRunnerConventions conventions, IRunnerContext runnerContext);
    [ObsoleteAttribute]
internal VersionLoader(IMigrationRunner runner, IAssemblyCollection assemblies, IConventionSet conventionSet, IMigrationRunnerConventions conventions, IRunnerContext runnerContext, IVersionTableMetaData versionTableMetaData);
    public VersionLoader(IProcessorAccessor processorAccessor, IConventionSet conventionSet, IMigrationRunnerConventions conventions, IVersionTableMetaData versionTableMetaData, IMigrationRunner runner);
    [CompilerGeneratedAttribute]
private IMigrationRunnerConventions get_Conventions();
    [CompilerGeneratedAttribute]
private void set_Conventions(IMigrationRunnerConventions value);
    [CompilerGeneratedAttribute]
protected IAssemblyCollection get_Assemblies();
    [CompilerGeneratedAttribute]
protected void set_Assemblies(IAssemblyCollection value);
    [CompilerGeneratedAttribute]
public sealed virtual IVersionTableMetaData get_VersionTableMetaData();
    [CompilerGeneratedAttribute]
public sealed virtual IMigrationRunner get_Runner();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Runner(IMigrationRunner value);
    [CompilerGeneratedAttribute]
public VersionSchemaMigration get_VersionSchemaMigration();
    [CompilerGeneratedAttribute]
public IMigration get_VersionMigration();
    [CompilerGeneratedAttribute]
public IMigration get_VersionUniqueMigration();
    [CompilerGeneratedAttribute]
public IMigration get_VersionDescriptionMigration();
    public sealed virtual void UpdateVersionInfo(long version);
    public sealed virtual void UpdateVersionInfo(long version, string description);
    public sealed virtual IVersionTableMetaData GetVersionTableMetaData();
    protected virtual InsertionDataDefinition CreateVersionInfoInsertionData(long version, string description);
    public sealed virtual IVersionInfo get_VersionInfo();
    public sealed virtual void set_VersionInfo(IVersionInfo value);
    public sealed virtual bool get_AlreadyCreatedVersionSchema();
    public sealed virtual bool get_AlreadyCreatedVersionTable();
    public bool get_AlreadyMadeVersionUnique();
    public bool get_AlreadyMadeVersionDescription();
    public bool get_OwnsVersionSchema();
    public sealed virtual void LoadVersionInfo();
    public sealed virtual void RemoveVersionTable();
    public sealed virtual void DeleteVersion(long version);
    [ObsoleteAttribute]
private IVersionTableMetaData CreateVersionTableMetaData(IRunnerContext runnerContext);
}
public class FluentMigrator.Runner.VersionTableInfo.DefaultVersionTableMetaData : object {
    [CompilerGeneratedAttribute]
private string <SchemaName>k__BackingField;
    public string SchemaName { get; public set; }
    public string TableName { get; }
    public string ColumnName { get; }
    public string UniqueIndexName { get; }
    public string AppliedOnColumnName { get; }
    public bool CreateWithPrimaryKey { get; }
    public string DescriptionColumnName { get; }
    public bool OwnsSchema { get; }
    public DefaultVersionTableMetaData(IConventionSet conventionSet, IOptions`1<RunnerOptions> runnerOptions);
    [ObsoleteAttribute("Use dependency injection")]
public DefaultVersionTableMetaData(string schemaName);
    [CompilerGeneratedAttribute]
public virtual string get_SchemaName();
    [CompilerGeneratedAttribute]
public virtual void set_SchemaName(string value);
    public virtual string get_TableName();
    public virtual string get_ColumnName();
    public virtual string get_UniqueIndexName();
    public virtual string get_AppliedOnColumnName();
    public sealed virtual bool get_CreateWithPrimaryKey();
    public virtual string get_DescriptionColumnName();
    public virtual bool get_OwnsSchema();
}
public interface FluentMigrator.Runner.VersionTableInfo.IVersionTableMetaData {
    public bool OwnsSchema { get; }
    public string SchemaName { get; }
    public string TableName { get; }
    public string ColumnName { get; }
    public string DescriptionColumnName { get; }
    public string UniqueIndexName { get; }
    public string AppliedOnColumnName { get; }
    public bool CreateWithPrimaryKey { get; }
    public abstract virtual bool get_OwnsSchema();
    public abstract virtual string get_SchemaName();
    public abstract virtual string get_TableName();
    public abstract virtual string get_ColumnName();
    public abstract virtual string get_DescriptionColumnName();
    public abstract virtual string get_UniqueIndexName();
    public abstract virtual string get_AppliedOnColumnName();
    public abstract virtual bool get_CreateWithPrimaryKey();
}
[AttributeUsageAttribute("4")]
public class FluentMigrator.Runner.VersionTableInfo.VersionTableMetaDataAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[ExtensionAttribute]
public static class Microsoft.Extensions.DependencyInjection.FluentMigratorServiceCollectionExtensions : object {
    [ExtensionAttribute]
public static IServiceCollection AddFluentMigratorCore(IServiceCollection services);
    [ExtensionAttribute]
public static IServiceCollection ConfigureRunner(IServiceCollection services, Action`1<IMigrationRunnerBuilder> configure);
    [ExtensionAttribute]
[ObsoleteAttribute]
internal static IServiceCollection CreateServices(IRunnerContext runnerContext, IConnectionStringProvider connectionStringProvider, AssemblyLoaderFactory defaultAssemblyLoaderFactory, Action`1<IMigrationRunnerBuilder> configureRunner);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
