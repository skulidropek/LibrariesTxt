[ExtensionAttribute]
public static class FluentMigrator.Runner.Db2RunnerBuilderExtensions : object {
    [ExtensionAttribute]
public static IMigrationRunnerBuilder AddDb2(IMigrationRunnerBuilder builder);
    [ExtensionAttribute]
public static IMigrationRunnerBuilder AddDb2ISeries(IMigrationRunnerBuilder builder);
}
internal class FluentMigrator.Runner.Generators.DB2.Db2Column : ColumnBase`1<Db2TypeMap> {
    [CompilerGeneratedAttribute]
private List`1<Func`2<ColumnDefinition, string>> <AlterClauseOrder>k__BackingField;
    public List`1<Func`2<ColumnDefinition, string>> AlterClauseOrder { get; public set; }
    public Db2Column(IQuoter quoter);
    [CompilerGeneratedAttribute]
public List`1<Func`2<ColumnDefinition, string>> get_AlterClauseOrder();
    [CompilerGeneratedAttribute]
public void set_AlterClauseOrder(List`1<Func`2<ColumnDefinition, string>> value);
    public string FormatAlterDefaultValue(string column, object defaultValue);
    public string GenerateAlterClause(ColumnDefinition column);
    protected virtual string FormatCCSID(ColumnDefinition column);
    protected virtual string FormatDefaultValue(ColumnDefinition column);
    protected virtual string FormatIdentity(ColumnDefinition column);
    protected virtual string FormatNullable(ColumnDefinition column);
}
public class FluentMigrator.Runner.Generators.DB2.Db2Generator : GenericGenerator {
    public Db2Generator(Db2Quoter quoter);
    public Db2Generator(Db2Quoter quoter, IOptions`1<GeneratorOptions> generatorOptions);
    public virtual string Generate(AlterDefaultConstraintExpression expression);
    public virtual string Generate(DeleteDefaultConstraintExpression expression);
    public virtual string Generate(RenameTableExpression expression);
    public virtual string Generate(DeleteColumnExpression expression);
    public virtual string Generate(CreateColumnExpression expression);
    public virtual string Generate(CreateForeignKeyExpression expression);
    public virtual string Generate(CreateConstraintExpression expression);
    public virtual string Generate(CreateIndexExpression expression);
    public virtual string Generate(CreateSchemaExpression expression);
    public virtual string Generate(DeleteTableExpression expression);
    public virtual string Generate(DeleteIndexExpression expression);
    public virtual string Generate(DeleteSchemaExpression expression);
    public virtual string Generate(DeleteConstraintExpression expression);
    public virtual string Generate(DeleteForeignKeyExpression expression);
    public virtual string Generate(DeleteDataExpression expression);
    public virtual string Generate(RenameColumnExpression expression);
    public virtual string Generate(InsertDataExpression expression);
    public virtual string Generate(UpdateDataExpression expression);
    public virtual string Generate(CreateTableExpression expression);
    public virtual string Generate(AlterColumnExpression expression);
    public virtual string Generate(AlterSchemaExpression expression);
    [CompilerGeneratedAttribute]
private StringBuilder <Generate>b__8_0(StringBuilder acc, string col);
    [CompilerGeneratedAttribute]
private StringBuilder <Generate>b__8_1(StringBuilder acc, string col);
    [CompilerGeneratedAttribute]
private string <Generate>b__9_0(string q);
    [CompilerGeneratedAttribute]
private StringBuilder <Generate>b__10_0(StringBuilder item, IndexColumnDefinition itemToo);
    [CompilerGeneratedAttribute]
private StringBuilder <Generate>b__17_0(StringBuilder acc, KeyValuePair`2<string, object> rowVal);
    [CompilerGeneratedAttribute]
private StringBuilder <Generate>b__19_0(StringBuilder acc, KeyValuePair`2<string, object> rowVal);
    [CompilerGeneratedAttribute]
private StringBuilder <Generate>b__19_1(StringBuilder acc, KeyValuePair`2<string, object> rowVal);
    [CompilerGeneratedAttribute]
private StringBuilder <Generate>b__20_0(StringBuilder acc, KeyValuePair`2<string, object> newRow);
    [CompilerGeneratedAttribute]
private StringBuilder <Generate>b__20_1(StringBuilder acc, KeyValuePair`2<string, object> rowVal);
}
public class FluentMigrator.Runner.Generators.DB2.Db2Quoter : GenericQuoter {
    public Char[] SpecialChars;
    public virtual string FormatDateTime(DateTime value);
    protected virtual bool ShouldQuote(string name);
    public virtual string QuoteIndexName(string indexName, string schemaName);
    public virtual string FormatSystemMethods(SystemMethods value);
}
internal class FluentMigrator.Runner.Generators.DB2.Db2TypeMap : TypeMapBase {
    protected sealed virtual void SetupTypeMaps();
}
public interface FluentMigrator.Runner.Generators.DB2.IDb2TypeMap {
}
public class FluentMigrator.Runner.Generators.DB2.iSeries.Db2ISeriesGenerator : Db2Generator {
    public Db2ISeriesGenerator(Db2ISeriesQuoter quoter);
    public Db2ISeriesGenerator(Db2ISeriesQuoter quoter, IOptions`1<GeneratorOptions> generatorOptions);
}
public class FluentMigrator.Runner.Generators.DB2.iSeries.Db2ISeriesQuoter : Db2Quoter {
    public virtual string QuoteConstraintName(string constraintName, string schemaName);
    public virtual string QuoteIndexName(string indexName, string schemaName);
}
public class FluentMigrator.Runner.Processors.DB2.Db2DbFactory : ReflectionBasedDbFactory {
    private static TestEntry[] _testEntries;
    public Db2DbFactory(IServiceProvider serviceProvider);
    private static Db2DbFactory();
}
public class FluentMigrator.Runner.Processors.DB2.Db2Processor : GenericProcessorBase {
    [CompilerGeneratedAttribute]
private IList`1<string> <DatabaseTypeAliases>k__BackingField;
    [CompilerGeneratedAttribute]
private IQuoter <Quoter>k__BackingField;
    public string DatabaseType { get; }
    public IList`1<string> DatabaseTypeAliases { get; }
    public IQuoter Quoter { get; public set; }
    public Db2Processor(Db2DbFactory factory, Db2Generator generator, Db2Quoter quoter, ILogger`1<Db2Processor> logger, IOptionsSnapshot`1<ProcessorOptions> options, IConnectionStringAccessor connectionStringAccessor);
    public virtual string get_DatabaseType();
    [CompilerGeneratedAttribute]
public virtual IList`1<string> get_DatabaseTypeAliases();
    [CompilerGeneratedAttribute]
public IQuoter get_Quoter();
    [CompilerGeneratedAttribute]
public void set_Quoter(IQuoter value);
    public virtual bool ColumnExists(string schemaName, string tableName, string columnName);
    public virtual bool ConstraintExists(string schemaName, string tableName, string constraintName);
    public virtual bool DefaultValueExists(string schemaName, string tableName, string columnName, object defaultValue);
    public virtual void Execute(string template, Object[] args);
    public virtual bool Exists(string template, Object[] args);
    public virtual bool IndexExists(string schemaName, string tableName, string indexName);
    public virtual void Process(PerformDBOperationExpression expression);
    public virtual DataSet Read(string template, Object[] args);
    public virtual DataSet ReadTableData(string schemaName, string tableName);
    public virtual bool SchemaExists(string schemaName);
    public virtual bool SequenceExists(string schemaName, string sequenceName);
    public virtual bool TableExists(string schemaName, string tableName);
    protected virtual void Process(string sql);
    private string BuildEqualityComparison(string columnName, string value);
}
public class FluentMigrator.Runner.Processors.DB2.iSeries.Db2ISeriesDbFactory : ReflectionBasedDbFactory {
    private static TestEntry[] _testEntries;
    public Db2ISeriesDbFactory(IServiceProvider serviceProvider);
    private static Db2ISeriesDbFactory();
}
public class FluentMigrator.Runner.Processors.DB2.iSeries.Db2ISeriesProcessor : GenericProcessorBase {
    [CompilerGeneratedAttribute]
private IList`1<string> <DatabaseTypeAliases>k__BackingField;
    [CompilerGeneratedAttribute]
private IQuoter <Quoter>k__BackingField;
    public string DatabaseType { get; }
    public IList`1<string> DatabaseTypeAliases { get; }
    public IQuoter Quoter { get; public set; }
    public Db2ISeriesProcessor(Db2ISeriesDbFactory factory, Db2ISeriesGenerator generator, Db2ISeriesQuoter quoter, ILogger`1<Db2ISeriesProcessor> logger, IOptionsSnapshot`1<ProcessorOptions> options, IConnectionStringAccessor connectionStringAccessor);
    public virtual string get_DatabaseType();
    [CompilerGeneratedAttribute]
public virtual IList`1<string> get_DatabaseTypeAliases();
    [CompilerGeneratedAttribute]
public IQuoter get_Quoter();
    [CompilerGeneratedAttribute]
public void set_Quoter(IQuoter value);
    public virtual bool ColumnExists(string schemaName, string tableName, string columnName);
    public virtual bool ConstraintExists(string schemaName, string tableName, string constraintName);
    public virtual bool DefaultValueExists(string schemaName, string tableName, string columnName, object defaultValue);
    public virtual void Execute(string template, Object[] args);
    public virtual bool Exists(string template, Object[] args);
    public virtual bool IndexExists(string schemaName, string tableName, string indexName);
    public virtual void Process(PerformDBOperationExpression expression);
    public virtual DataSet Read(string template, Object[] args);
    public virtual DataSet ReadTableData(string schemaName, string tableName);
    public virtual bool SchemaExists(string schemaName);
    public virtual bool SequenceExists(string schemaName, string sequenceName);
    public virtual bool TableExists(string schemaName, string tableName);
    protected virtual void Process(string sql);
    private string FormatToSafeName(string sqlName);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
