internal class FluentMigrator.Runner.Generators.Hana.HanaColumn : ColumnBase`1<HanaTypeMap> {
    private static int HanaObjectNameMaxLength;
    public HanaColumn(IQuoter quoter);
    protected virtual string FormatIdentity(ColumnDefinition column);
    protected virtual string FormatNullable(ColumnDefinition column);
    protected virtual string GetPrimaryKeyConstraintName(IEnumerable`1<ColumnDefinition> primaryKeyColumns, string tableName);
    public virtual string AddPrimaryKeyConstraint(string tableName, IEnumerable`1<ColumnDefinition> primaryKeyColumns);
    [CompilerGeneratedAttribute]
private string <AddPrimaryKeyConstraint>b__5_0(ColumnDefinition x);
}
public class FluentMigrator.Runner.Generators.Hana.HanaDescriptionGenerator : GenericDescriptionGenerator {
    private static string TableDescriptionTemplate;
    private static string ColumnDescriptionTemplate;
    private string GetFullTableName(string schemaName, string tableName);
    protected virtual string GenerateTableDescription(string schemaName, string tableName, string tableDescription);
    protected virtual string GenerateColumnDescription(string descriptionName, string schemaName, string tableName, string columnName, string columnDescription);
}
public class FluentMigrator.Runner.Generators.Hana.HanaGenerator : GenericGenerator {
    public string DropTable { get; }
    public string AddColumn { get; }
    public string AlterColumn { get; }
    public string DropColumn { get; }
    public string RenameColumn { get; }
    public HanaGenerator(HanaQuoter quoter);
    public HanaGenerator(HanaQuoter quoter, IOptions`1<GeneratorOptions> generatorOptions);
    public virtual string get_DropTable();
    public virtual string Generate(DeleteTableExpression expression);
    public virtual string Generate(RenameTableExpression expression);
    public virtual string Generate(CreateSequenceExpression expression);
    public virtual string get_AddColumn();
    public virtual string get_AlterColumn();
    public virtual string get_DropColumn();
    public virtual string get_RenameColumn();
    public virtual string Generate(DeleteDataExpression expression);
    public virtual string Generate(InsertDataExpression expression);
    private string InnerGenerate(CreateTableExpression expression);
    public virtual string Generate(UpdateDataExpression expression);
    public virtual string Generate(CreateTableExpression expression);
    public virtual string Generate(AlterTableExpression expression);
    public virtual string Generate(CreateColumnExpression expression);
    public virtual string Generate(AlterColumnExpression expression);
    public virtual string Generate(DeleteColumnExpression expression);
    public virtual string Generate(CreateForeignKeyExpression expression);
    public virtual string Generate(CreateConstraintExpression expression);
    public virtual string Generate(DeleteForeignKeyExpression expression);
    public virtual string Generate(DeleteConstraintExpression expression);
    public virtual string Generate(AlterDefaultConstraintExpression expression);
    public virtual string Generate(DeleteDefaultConstraintExpression expression);
    public virtual string Generate(CreateIndexExpression expression);
    public virtual string Generate(DeleteIndexExpression expression);
    public virtual string Generate(DeleteSequenceExpression expression);
    public virtual string Generate(RenameColumnExpression expression);
    private static string WrapInBlock(string sql);
}
public class FluentMigrator.Runner.Generators.Hana.HanaQuoter : GenericQuoter {
    public virtual string FormatNationalString(string value);
    public virtual string FormatSystemMethods(SystemMethods value);
    public virtual string QuoteSchemaName(string schemaName);
    public virtual string QuoteValue(object value);
}
public class FluentMigrator.Runner.Generators.Hana.HanaTypeMap : TypeMapBase {
    public static int AnsiStringCapacity;
    public static int AnsiTextCapacity;
    public static int UnicodeStringCapacity;
    public static int UnicodeTextCapacity;
    public static int BlobCapacity;
    public static int DecimalCapacity;
    public static int XmlCapacity;
    public static int ImageCapacity;
    protected virtual void SetupTypeMaps();
}
public interface FluentMigrator.Runner.Generators.Hana.IHanaTypeMap {
}
[ExtensionAttribute]
public static class FluentMigrator.Runner.HanaRunnerBuilderExtensions : object {
    [ExtensionAttribute]
public static IMigrationRunnerBuilder AddHana(IMigrationRunnerBuilder builder);
}
public class FluentMigrator.Runner.Processors.Hana.HanaDbFactory : ReflectionBasedDbFactory {
    public HanaDbFactory(IServiceProvider serviceProvider);
    [IteratorStateMachineAttribute("FluentMigrator.Runner.Processors.Hana.HanaDbFactory/<GetTestEntries>d__2")]
private static IEnumerable`1<TestEntry> GetTestEntries();
}
public class FluentMigrator.Runner.Processors.Hana.HanaProcessor : GenericProcessorBase {
    [CompilerGeneratedAttribute]
private IList`1<string> <DatabaseTypeAliases>k__BackingField;
    public string DatabaseType { get; }
    public IList`1<string> DatabaseTypeAliases { get; }
    public IQuoter Quoter { get; }
    public HanaProcessor(HanaDbFactory factory, HanaGenerator generator, ILogger`1<HanaProcessor> logger, IOptionsSnapshot`1<ProcessorOptions> options, IConnectionStringAccessor connectionStringAccessor);
    public virtual string get_DatabaseType();
    [CompilerGeneratedAttribute]
public virtual IList`1<string> get_DatabaseTypeAliases();
    public IQuoter get_Quoter();
    public virtual bool SchemaExists(string schemaName);
    public virtual bool TableExists(string schemaName, string tableName);
    public virtual bool ColumnExists(string schemaName, string tableName, string columnName);
    public virtual bool ConstraintExists(string schemaName, string tableName, string constraintName);
    public virtual bool IndexExists(string schemaName, string tableName, string indexName);
    public virtual bool SequenceExists(string schemaName, string sequenceName);
    public virtual bool DefaultValueExists(string schemaName, string tableName, string columnName, object defaultValue);
    public virtual void Execute(string template, Object[] args);
    public virtual bool Exists(string template, Object[] args);
    public virtual DataSet ReadTableData(string schemaName, string tableName);
    public virtual DataSet Read(string template, Object[] args);
    public virtual void Process(PerformDBOperationExpression expression);
    protected virtual void Process(string sql);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
