public interface FluentMigrator.Runner.Generators.MySql.IMySqlTypeMap {
}
public class FluentMigrator.Runner.Generators.MySql.MySql4Generator : GenericGenerator {
    public string AlterColumn { get; }
    public string DeleteConstraint { get; }
    public MySql4Generator(MySqlQuoter quoter);
    public MySql4Generator(MySqlQuoter quoter, IOptions`1<GeneratorOptions> generatorOptions);
    protected MySql4Generator(IColumn column, IQuoter quoter, IDescriptionGenerator descriptionGenerator, IOptions`1<GeneratorOptions> generatorOptions);
    public virtual string get_AlterColumn();
    public virtual string get_DeleteConstraint();
    public virtual string Generate(CreateTableExpression expression);
    public virtual string Generate(AlterTableExpression expression);
    public virtual string Generate(DeleteIndexExpression expression);
    public virtual string Generate(RenameColumnExpression expression);
    public virtual string Generate(AlterDefaultConstraintExpression expression);
    public virtual string Generate(CreateSequenceExpression expression);
    public virtual string Generate(DeleteSequenceExpression expression);
    public virtual string Generate(DeleteConstraintExpression expression);
    public virtual string Generate(DeleteForeignKeyExpression expression);
    public virtual string Generate(DeleteDefaultConstraintExpression expression);
}
internal class FluentMigrator.Runner.Generators.MySql.MySql4TypeMap : TypeMapBase {
    public static int AnsiTinyStringCapacity;
    public static int StringCapacity;
    public static int VarcharCapacity;
    public static int TextCapacity;
    public static int MediumTextCapacity;
    public static int LongTextCapacity;
    public static int DecimalCapacity;
    protected virtual void SetupMySqlTypeMaps();
    protected sealed virtual void SetupTypeMaps();
}
public class FluentMigrator.Runner.Generators.MySql.MySql5Generator : MySql4Generator {
    public MySql5Generator(MySqlQuoter quoter);
    public MySql5Generator(MySqlQuoter quoter, IOptions`1<GeneratorOptions> generatorOptions);
    protected MySql5Generator(IColumn column, IQuoter quoter, IDescriptionGenerator descriptionGenerator, IOptions`1<GeneratorOptions> generatorOptions);
}
internal class FluentMigrator.Runner.Generators.MySql.MySql5TypeMap : MySql4TypeMap {
    public static int DecimalCapacity;
    protected virtual void SetupMySqlTypeMaps();
}
public class FluentMigrator.Runner.Generators.MySql.MySql8Generator : MySql5Generator {
    public MySql8Generator(MySqlQuoter quoter);
    public MySql8Generator(MySqlQuoter quoter, IOptions`1<GeneratorOptions> generatorOptions);
    protected MySql8Generator(IColumn column, IQuoter quoter, IDescriptionGenerator descriptionGenerator, IOptions`1<GeneratorOptions> generatorOptions);
    public virtual string Generate(CreateIndexExpression expression);
    protected virtual IndexType GetIndexType(CreateIndexExpression expression);
}
internal class FluentMigrator.Runner.Generators.MySql.MySql8TypeMap : MySql5TypeMap {
}
internal class FluentMigrator.Runner.Generators.MySql.MySqlColumn : ColumnBase`1<IMySqlTypeMap> {
    public MySqlColumn(IMySqlTypeMap typeMap, IQuoter quoter);
    internal string FormatDefaultValue(object defaultValue);
    protected string FormatDescription(ColumnDefinition column);
    protected virtual string FormatIdentity(ColumnDefinition column);
}
public class FluentMigrator.Runner.Generators.MySql.MySqlQuoter : GenericQuoter {
    public string OpenQuote { get; }
    public string CloseQuote { get; }
    public virtual string get_OpenQuote();
    public virtual string get_CloseQuote();
    public virtual string QuoteValue(object value);
    public virtual string FromTimeSpan(TimeSpan value);
    public virtual string FormatSystemMethods(SystemMethods value);
    public virtual string QuoteSchemaName(string schemaName);
}
[ExtensionAttribute]
public static class FluentMigrator.Runner.MySqlRunnerBuilderExtensions : object {
    [ExtensionAttribute]
public static IMigrationRunnerBuilder AddMySql4(IMigrationRunnerBuilder builder);
    [ExtensionAttribute]
public static IMigrationRunnerBuilder AddMySql5(IMigrationRunnerBuilder builder);
    [ExtensionAttribute]
public static IMigrationRunnerBuilder AddMySql8(IMigrationRunnerBuilder builder);
}
public class FluentMigrator.Runner.Processors.MySql.MySql4Processor : MySqlProcessor {
    [CompilerGeneratedAttribute]
private IList`1<string> <DatabaseTypeAliases>k__BackingField;
    public string DatabaseType { get; }
    public IList`1<string> DatabaseTypeAliases { get; }
    public MySql4Processor(MySqlDbFactory factory, MySql4Generator generator, ILogger`1<MySql4Processor> logger, IOptionsSnapshot`1<ProcessorOptions> options, IConnectionStringAccessor connectionStringAccessor);
    public virtual string get_DatabaseType();
    [CompilerGeneratedAttribute]
public virtual IList`1<string> get_DatabaseTypeAliases();
}
public class FluentMigrator.Runner.Processors.MySql.MySql5Processor : MySqlProcessor {
    [CompilerGeneratedAttribute]
private IList`1<string> <DatabaseTypeAliases>k__BackingField;
    public string DatabaseType { get; }
    public IList`1<string> DatabaseTypeAliases { get; }
    public MySql5Processor(MySqlDbFactory factory, MySql5Generator generator, ILogger`1<MySql5Processor> logger, IOptionsSnapshot`1<ProcessorOptions> options, IConnectionStringAccessor connectionStringAccessor);
    public virtual string get_DatabaseType();
    [CompilerGeneratedAttribute]
public virtual IList`1<string> get_DatabaseTypeAliases();
}
public class FluentMigrator.Runner.Processors.MySql.MySql8Processor : MySqlProcessor {
    [CompilerGeneratedAttribute]
private IList`1<string> <DatabaseTypeAliases>k__BackingField;
    public string DatabaseType { get; }
    public IList`1<string> DatabaseTypeAliases { get; }
    public MySql8Processor(MySqlDbFactory factory, MySql8Generator generator, ILogger`1<MySql8Processor> logger, IOptionsSnapshot`1<ProcessorOptions> options, IConnectionStringAccessor connectionStringAccessor);
    public virtual string get_DatabaseType();
    [CompilerGeneratedAttribute]
public virtual IList`1<string> get_DatabaseTypeAliases();
}
public class FluentMigrator.Runner.Processors.MySql.MySqlDbFactory : ReflectionBasedDbFactory {
    private static TestEntry[] _entries;
    public MySqlDbFactory(IServiceProvider serviceProvider);
    private static MySqlDbFactory();
}
public class FluentMigrator.Runner.Processors.MySql.MySqlProcessor : GenericProcessorBase {
    private MySqlQuoter _quoter;
    [CompilerGeneratedAttribute]
private IList`1<string> <DatabaseTypeAliases>k__BackingField;
    public string DatabaseType { get; }
    public IList`1<string> DatabaseTypeAliases { get; }
    [ObsoleteAttribute]
public MySqlProcessor(IDbConnection connection, IMigrationGenerator generator, IAnnouncer announcer, IMigrationProcessorOptions options, IDbFactory factory);
    protected MySqlProcessor(MySqlDbFactory factory, IMigrationGenerator generator, ILogger`1<MySqlProcessor> logger, IOptionsSnapshot`1<ProcessorOptions> options, IConnectionStringAccessor connectionStringAccessor);
    public virtual string get_DatabaseType();
    [CompilerGeneratedAttribute]
public virtual IList`1<string> get_DatabaseTypeAliases();
    public virtual bool SchemaExists(string schemaName);
    public virtual bool TableExists(string schemaName, string tableName);
    public virtual bool ColumnExists(string schemaName, string tableName, string columnName);
    public virtual bool ConstraintExists(string schemaName, string tableName, string constraintName);
    public virtual bool IndexExists(string schemaName, string tableName, string indexName);
    public virtual bool SequenceExists(string schemaName, string sequenceName);
    public virtual bool DefaultValueExists(string schemaName, string tableName, string columnName, object defaultValue);
    public virtual void Execute(string template, Object[] args);
    public virtual bool Exists(string template, Object[] args);
    public virtual DataSet ReadTableData(string schemaName, string tableName);
    public virtual DataSet Read(string template, Object[] args);
    protected virtual void Process(string sql);
    public virtual void Process(PerformDBOperationExpression expression);
    public virtual void Process(RenameColumnExpression expression);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
