public interface FluentMigrator.Runner.Generators.Oracle.IOracle12CGenerator {
}
public interface FluentMigrator.Runner.Generators.Oracle.IOracleGenerator {
}
public interface FluentMigrator.Runner.Generators.Oracle.IOracleTypeMap {
}
internal class FluentMigrator.Runner.Generators.Oracle.Oracle12CColumn : OracleColumn {
    protected int OracleObjectNameMaxLength { get; }
    public Oracle12CColumn(IQuoter quoter);
    protected virtual int get_OracleObjectNameMaxLength();
    private static string GetIdentityString(ColumnDefinition column);
    protected virtual string FormatIdentity(ColumnDefinition column);
    protected virtual string FormatNullable(ColumnDefinition column);
}
public class FluentMigrator.Runner.Generators.Oracle.Oracle12CGenerator : OracleGenerator {
    public Oracle12CGenerator(bool useQuotedIdentifiers);
    public Oracle12CGenerator(OracleQuoterBase quoter);
    public Oracle12CGenerator(OracleQuoterBase quoter, IOptions`1<GeneratorOptions> generatorOptions);
}
internal class FluentMigrator.Runner.Generators.Oracle.OracleColumn : ColumnBase`1<IOracleTypeMap> {
    protected int OracleObjectNameMaxLength { get; }
    public OracleColumn(IQuoter quoter);
    protected virtual int get_OracleObjectNameMaxLength();
    protected virtual string FormatIdentity(ColumnDefinition column);
    protected virtual string FormatNullable(ColumnDefinition column);
    protected virtual string GetPrimaryKeyConstraintName(IEnumerable`1<ColumnDefinition> primaryKeyColumns, string tableName);
}
public class FluentMigrator.Runner.Generators.Oracle.OracleDescriptionGenerator : GenericDescriptionGenerator {
    private static string TableDescriptionTemplate;
    private static string ColumnDescriptionTemplate;
    private string GetFullTableName(string schemaName, string tableName);
    protected virtual string GenerateTableDescription(string schemaName, string tableName, string tableDescription);
    protected virtual string GenerateColumnDescription(string descriptionName, string schemaName, string tableName, string columnName, string columnDescription);
}
public class FluentMigrator.Runner.Generators.Oracle.OracleGenerator : GenericGenerator {
    public string DropTable { get; }
    public string AddColumn { get; }
    public string AlterColumn { get; }
    public string RenameTable { get; }
    public string InsertData { get; }
    public OracleGenerator(bool useQuotedIdentifiers);
    public OracleGenerator(OracleQuoterBase quoter);
    public OracleGenerator(OracleQuoterBase quoter, IOptions`1<GeneratorOptions> generatorOptions);
    public OracleGenerator(IColumn column, OracleQuoterBase quoter, IOptions`1<GeneratorOptions> generatorOptions);
    protected OracleGenerator(IColumn column, OracleQuoterBase quoter, IDescriptionGenerator descriptionGenerator, IOptions`1<GeneratorOptions> generatorOptions);
    protected static OracleQuoterBase GetQuoter(bool useQuotedIdentifiers);
    public virtual string get_DropTable();
    public virtual string Generate(DeleteTableExpression expression);
    public virtual string Generate(CreateSequenceExpression expression);
    public virtual string get_AddColumn();
    public virtual string get_AlterColumn();
    public virtual string get_RenameTable();
    public virtual string get_InsertData();
    private static string ExpandTableName(string schema, string table);
    private static string WrapStatementInExecuteImmediateBlock(string statement);
    private static string WrapInBlock(string sql);
    private string InnerGenerate(CreateTableExpression expression);
    protected virtual StringBuilder AppendSqlStatementEndToken(StringBuilder stringBuilder);
    public virtual string Generate(CreateTableExpression expression);
    public virtual string Generate(AlterTableExpression expression);
    public virtual string Generate(CreateColumnExpression expression);
    public virtual string Generate(AlterColumnExpression expression);
    public virtual string Generate(CreateIndexExpression expression);
    public virtual string Generate(InsertDataExpression expression);
    public virtual string Generate(AlterDefaultConstraintExpression expression);
    public virtual string Generate(DeleteDefaultConstraintExpression expression);
    public virtual string Generate(DeleteIndexExpression expression);
}
public class FluentMigrator.Runner.Generators.Oracle.OracleQuoter : OracleQuoterQuotedIdentifier {
    public virtual string Quote(string name);
    public virtual string QuoteConstraintName(string constraintName, string schemaName);
    public virtual string QuoteIndexName(string indexName, string schemaName);
    public virtual string QuoteTableName(string tableName, string schemaName);
    public virtual string QuoteSequenceName(string sequenceName, string schemaName);
}
public class FluentMigrator.Runner.Generators.Oracle.OracleQuoterBase : GenericQuoter {
    public static int MaxChunkLength;
    public static Char[] EscapeCharacters;
    private static OracleQuoterBase();
    [IteratorStateMachineAttribute("FluentMigrator.Runner.Generators.Oracle.OracleQuoterBase/<SplitBy>d__2")]
public static IEnumerable`1<string> SplitBy(string str, int maxChunkLength);
    public virtual string FormatDateTime(DateTime value);
    public virtual string QuoteIndexName(string indexName, string schemaName);
    public virtual string FromTimeSpan(TimeSpan value);
    public virtual string FormatGuid(Guid value);
    public virtual string FormatSystemMethods(SystemMethods value);
    private static string FormatString(string value, string oracleFunction, Func`2<string, string> formatter);
    public virtual string FormatAnsiString(string value);
    public virtual string FormatNationalString(string value);
}
public class FluentMigrator.Runner.Generators.Oracle.OracleQuoterQuotedIdentifier : OracleQuoterBase {
}
public class FluentMigrator.Runner.Generators.Oracle.OracleTypeMap : TypeMapBase {
    public static int AnsiStringCapacity;
    public static int AnsiTextCapacity;
    public static int BlobCapacity;
    public static int CharStringCapacity;
    public static int DecimalCapacity;
    public static int RawCapacity;
    public static int UnicodeStringCapacity;
    public static int UnicodeTextCapacity;
    protected sealed virtual void SetupTypeMaps();
}
[ExtensionAttribute]
public static class FluentMigrator.Runner.OracleRunnerBuilderExtensions : object {
    private static void RegisterOracleQuoter(IMigrationRunnerBuilder builder);
    private static void RegisterOracleGenerator(IMigrationRunnerBuilder builder);
    private static void RegisterOracle12CGenerator(IMigrationRunnerBuilder builder);
    private static void RegisterOracleProcessor(IMigrationRunnerBuilder builder);
    private static void RegisterOracleManagedProcessor(IMigrationRunnerBuilder builder);
    private static void RegisterDotConnectOracleProcessor(IMigrationRunnerBuilder builder);
    [ExtensionAttribute]
public static IMigrationRunnerBuilder AddOracle(IMigrationRunnerBuilder builder);
    [ExtensionAttribute]
public static IMigrationRunnerBuilder AddOracleManaged(IMigrationRunnerBuilder builder);
    [ExtensionAttribute]
public static IMigrationRunnerBuilder AddDotConnectOracle(IMigrationRunnerBuilder builder);
    [ExtensionAttribute]
public static IMigrationRunnerBuilder AddOracle12C(IMigrationRunnerBuilder builder);
    [ExtensionAttribute]
public static IMigrationRunnerBuilder AddOracle12CManaged(IMigrationRunnerBuilder builder);
    [ExtensionAttribute]
public static IMigrationRunnerBuilder AddDotConnectOracle12C(IMigrationRunnerBuilder builder);
}
[ExtensionAttribute]
internal static class FluentMigrator.Runner.ProcessorOptionsExtensions : object {
    [ExtensionAttribute]
public static bool IsQuotingForced(ProcessorOptions options);
    internal static bool Quoted(string options);
}
public class FluentMigrator.Runner.Processors.DotConnectOracle.DotConnectOracle12CProcessor : DotConnectOracleProcessor {
    [CompilerGeneratedAttribute]
private IList`1<string> <DatabaseTypeAliases>k__BackingField;
    public string DatabaseType { get; }
    public IList`1<string> DatabaseTypeAliases { get; }
    public DotConnectOracle12CProcessor(DotConnectOracleDbFactory factory, IOracle12CGenerator generator, ILogger`1<DotConnectOracle12CProcessor> logger, IOptionsSnapshot`1<ProcessorOptions> options, IConnectionStringAccessor connectionStringAccessor);
    public virtual string get_DatabaseType();
    [CompilerGeneratedAttribute]
public virtual IList`1<string> get_DatabaseTypeAliases();
}
public class FluentMigrator.Runner.Processors.DotConnectOracle.DotConnectOracleDbFactory : ReflectionBasedDbFactory {
    private static TestEntry[] _entries;
    public DotConnectOracleDbFactory(IServiceProvider serviceProvider);
    private static DotConnectOracleDbFactory();
}
public class FluentMigrator.Runner.Processors.DotConnectOracle.DotConnectOracleProcessor : GenericProcessorBase {
    [CompilerGeneratedAttribute]
private IList`1<string> <DatabaseTypeAliases>k__BackingField;
    public string DatabaseType { get; }
    public IList`1<string> DatabaseTypeAliases { get; }
    public DotConnectOracleProcessor(DotConnectOracleDbFactory factory, IOracleGenerator generator, ILogger`1<DotConnectOracleProcessor> logger, IOptionsSnapshot`1<ProcessorOptions> options, IConnectionStringAccessor connectionStringAccessor);
    public virtual string get_DatabaseType();
    [CompilerGeneratedAttribute]
public virtual IList`1<string> get_DatabaseTypeAliases();
    public virtual bool SchemaExists(string schemaName);
    public virtual bool TableExists(string schemaName, string tableName);
    public virtual bool ColumnExists(string schemaName, string tableName, string columnName);
    public virtual bool ConstraintExists(string schemaName, string tableName, string constraintName);
    public virtual bool IndexExists(string schemaName, string tableName, string indexName);
    public virtual bool SequenceExists(string schemaName, string sequenceName);
    public virtual bool DefaultValueExists(string schemaName, string tableName, string columnName, object defaultValue);
    public virtual void Execute(string template, Object[] args);
    public virtual bool Exists(string template, Object[] args);
    public virtual DataSet ReadTableData(string schemaName, string tableName);
    public virtual DataSet Read(string template, Object[] args);
    public virtual void Process(PerformDBOperationExpression expression);
    protected virtual void Process(string sql);
}
public class FluentMigrator.Runner.Processors.Oracle.Oracle12CManagedProcessor : OracleManagedProcessor {
    [CompilerGeneratedAttribute]
private IList`1<string> <DatabaseTypeAliases>k__BackingField;
    public string DatabaseType { get; }
    public IList`1<string> DatabaseTypeAliases { get; }
    public Oracle12CManagedProcessor(OracleManagedDbFactory factory, IOracle12CGenerator generator, ILogger`1<Oracle12CManagedProcessor> logger, IOptionsSnapshot`1<ProcessorOptions> options, IConnectionStringAccessor connectionStringAccessor);
    public virtual string get_DatabaseType();
    [CompilerGeneratedAttribute]
public virtual IList`1<string> get_DatabaseTypeAliases();
}
public class FluentMigrator.Runner.Processors.Oracle.Oracle12CProcessor : OracleProcessor {
    [CompilerGeneratedAttribute]
private IList`1<string> <DatabaseTypeAliases>k__BackingField;
    public string DatabaseType { get; }
    public IList`1<string> DatabaseTypeAliases { get; }
    public Oracle12CProcessor(OracleDbFactory factory, IOracle12CGenerator generator, ILogger`1<Oracle12CProcessor> logger, IOptionsSnapshot`1<ProcessorOptions> options, IConnectionStringAccessor connectionStringAccessor);
    public virtual string get_DatabaseType();
    [CompilerGeneratedAttribute]
public virtual IList`1<string> get_DatabaseTypeAliases();
}
public class FluentMigrator.Runner.Processors.Oracle.OracleBaseDbFactory : ReflectionBasedDbFactory {
    protected OracleBaseDbFactory(IServiceProvider serviceProvider, TestEntry[] testEntries);
}
public class FluentMigrator.Runner.Processors.Oracle.OracleDbFactory : OracleBaseDbFactory {
    private static TestEntry[] _testEntries;
    public OracleDbFactory(IServiceProvider serviceProvider);
    private static OracleDbFactory();
}
public class FluentMigrator.Runner.Processors.Oracle.OracleManagedDbFactory : OracleBaseDbFactory {
    private static TestEntry[] _entries;
    public OracleManagedDbFactory(IServiceProvider serviceProvider);
    private static OracleManagedDbFactory();
}
public class FluentMigrator.Runner.Processors.Oracle.OracleManagedProcessor : OracleProcessorBase {
    public OracleManagedProcessor(OracleManagedDbFactory factory, IOracleGenerator generator, ILogger`1<OracleManagedProcessor> logger, IOptionsSnapshot`1<ProcessorOptions> options, IConnectionStringAccessor connectionStringAccessor);
}
public class FluentMigrator.Runner.Processors.Oracle.OracleProcessor : OracleProcessorBase {
    public OracleProcessor(OracleDbFactory factory, IOracleGenerator generator, ILogger`1<OracleProcessor> logger, IOptionsSnapshot`1<ProcessorOptions> options, IConnectionStringAccessor connectionStringAccessor);
}
public class FluentMigrator.Runner.Processors.Oracle.OracleProcessorBase : GenericProcessorBase {
    [CompilerGeneratedAttribute]
private string <DatabaseType>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<string> <DatabaseTypeAliases>k__BackingField;
    public string DatabaseType { get; }
    public IList`1<string> DatabaseTypeAliases { get; }
    public IQuoter Quoter { get; }
    protected OracleProcessorBase(string databaseType, OracleBaseDbFactory factory, IMigrationGenerator generator, ILogger logger, IOptionsSnapshot`1<ProcessorOptions> options, IConnectionStringAccessor connectionStringAccessor);
    [CompilerGeneratedAttribute]
public virtual string get_DatabaseType();
    [CompilerGeneratedAttribute]
public virtual IList`1<string> get_DatabaseTypeAliases();
    public IQuoter get_Quoter();
    public virtual bool SchemaExists(string schemaName);
    public virtual bool TableExists(string schemaName, string tableName);
    public virtual bool ColumnExists(string schemaName, string tableName, string columnName);
    public virtual bool ConstraintExists(string schemaName, string tableName, string constraintName);
    public virtual bool IndexExists(string schemaName, string tableName, string indexName);
    public virtual bool SequenceExists(string schemaName, string sequenceName);
    public virtual bool DefaultValueExists(string schemaName, string tableName, string columnName, object defaultValue);
    public virtual void Execute(string template, Object[] args);
    public virtual bool Exists(string template, Object[] args);
    public virtual DataSet ReadTableData(string schemaName, string tableName);
    public virtual DataSet Read(string template, Object[] args);
    public virtual void Process(PerformDBOperationExpression expression);
    protected virtual void Process(string sql);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
