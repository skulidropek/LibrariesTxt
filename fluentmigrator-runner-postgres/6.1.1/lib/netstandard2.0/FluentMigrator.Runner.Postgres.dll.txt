public interface FluentMigrator.Runner.Generators.Postgres.IPostgresTypeMap {
}
internal class FluentMigrator.Runner.Generators.Postgres.Postgres10_0Column : PostgresColumn {
    public Postgres10_0Column(PostgresQuoter quoter, IPostgresTypeMap typeMap);
    private string FormatAlterIdentity(ColumnDefinition column);
    protected virtual string FormatIdentity(ColumnDefinition column);
    protected virtual string FormatType(ColumnDefinition column);
}
public class FluentMigrator.Runner.Generators.Postgres.Postgres10_0Generator : PostgresGenerator {
    public Postgres10_0Generator(PostgresQuoter quoter);
    public Postgres10_0Generator(PostgresQuoter quoter, IOptions`1<GeneratorOptions> generatorOptions);
    protected Postgres10_0Generator(PostgresQuoter quoter, IOptions`1<GeneratorOptions> generatorOptions, IPostgresTypeMap typeMap);
    protected Postgres10_0Generator(IColumn column, PostgresQuoter quoter, IOptions`1<GeneratorOptions> generatorOptions);
    protected virtual HashSet`1<string> GetAllowIndexStorageParameters();
    protected virtual string GetOverridingIdentityValuesString(InsertDataExpression expression);
}
public class FluentMigrator.Runner.Generators.Postgres.Postgres11_0Generator : Postgres10_0Generator {
    public Postgres11_0Generator(PostgresQuoter quoter);
    public Postgres11_0Generator(PostgresQuoter quoter, IOptions`1<GeneratorOptions> generatorOptions);
    protected Postgres11_0Generator(PostgresQuoter quoter, IOptions`1<GeneratorOptions> generatorOptions, IPostgresTypeMap typeMap);
    protected Postgres11_0Generator(IColumn column, PostgresQuoter quoter, IOptions`1<GeneratorOptions> generatorOptions);
    protected virtual string GetIncludeString(CreateIndexExpression column);
    protected virtual string GetAsOnly(CreateIndexExpression expression);
    protected virtual HashSet`1<string> GetAllowIndexStorageParameters();
}
public class FluentMigrator.Runner.Generators.Postgres.Postgres15_0Generator : Postgres11_0Generator {
    public Postgres15_0Generator(PostgresQuoter quoter);
    public Postgres15_0Generator(PostgresQuoter quoter, IOptions`1<GeneratorOptions> generatorOptions);
    protected Postgres15_0Generator(PostgresQuoter quoter, IOptions`1<GeneratorOptions> generatorOptions, IPostgresTypeMap typeMap);
    protected Postgres15_0Generator(IColumn column, PostgresQuoter quoter, IOptions`1<GeneratorOptions> generatorOptions);
    protected virtual string GetWithNullsDistinctStringInWhere(IndexDefinition index);
    protected virtual string GetWithNullsDistinctString(IndexDefinition index);
    [CompilerGeneratedAttribute]
internal static Nullable`1<bool> <GetWithNullsDistinctString>g__GetNullsDistinct|5_0(IndexColumnDefinition column);
}
internal class FluentMigrator.Runner.Generators.Postgres.PostgresColumn : ColumnBase`1<IPostgresTypeMap> {
    [CompilerGeneratedAttribute]
private IList`1<Func`2<ColumnDefinition, string>> <AlterClauseOrder>k__BackingField;
    protected IList`1<Func`2<ColumnDefinition, string>> AlterClauseOrder { get; protected set; }
    [ObsoleteAttribute]
public PostgresColumn(PostgresQuoter quoter);
    public PostgresColumn(PostgresQuoter quoter, IPostgresTypeMap typeMap);
    public string FormatAlterDefaultValue(string column, object defaultValue);
    private string FormatAlterNullable(ColumnDefinition column);
    private string FormatAlterType(ColumnDefinition column);
    [CompilerGeneratedAttribute]
protected IList`1<Func`2<ColumnDefinition, string>> get_AlterClauseOrder();
    [CompilerGeneratedAttribute]
protected void set_AlterClauseOrder(IList`1<Func`2<ColumnDefinition, string>> value);
    public string GenerateAlterClauses(ColumnDefinition column);
    protected virtual string FormatNullable(ColumnDefinition column);
    protected virtual string FormatIdentity(ColumnDefinition column);
    public virtual string AddPrimaryKeyConstraint(string tableName, IEnumerable`1<ColumnDefinition> primaryKeyColumns);
    protected void FormatTypeValidator(ColumnDefinition column);
    protected virtual string FormatType(ColumnDefinition column);
    protected string ColumnBaseFormatType(ColumnDefinition column);
    public string GetColumnType(ColumnDefinition column);
}
public class FluentMigrator.Runner.Generators.Postgres.PostgresDescriptionGenerator : GenericDescriptionGenerator {
    [CompilerGeneratedAttribute]
private IQuoter <Quoter>k__BackingField;
    private static string TableDescriptionTemplate;
    private static string ColumnDescriptionTemplate;
    protected IQuoter Quoter { get; }
    public PostgresDescriptionGenerator(PostgresQuoter quoter);
    [CompilerGeneratedAttribute]
protected IQuoter get_Quoter();
    private string GetFullTableName(string schemaName, string tableName);
    protected virtual string GenerateTableDescription(string schemaName, string tableName, string tableDescription);
    protected virtual string GenerateColumnDescription(string descriptionName, string schemaName, string tableName, string columnName, string columnDescription);
}
public class FluentMigrator.Runner.Generators.Postgres.PostgresGenerator : GenericGenerator {
    private static HashSet`1<string> _supportedAdditionalFeatures;
    public string CreateTable { get; }
    public string DropTable { get; }
    public string AddColumn { get; }
    public string DropColumn { get; }
    public string AlterColumn { get; }
    public string RenameColumn { get; }
    public PostgresGenerator(PostgresQuoter quoter);
    public PostgresGenerator(PostgresQuoter quoter, IOptions`1<GeneratorOptions> generatorOptions);
    protected PostgresGenerator(PostgresQuoter quoter, IOptions`1<GeneratorOptions> generatorOptions, IPostgresTypeMap typeMap);
    protected PostgresGenerator(IColumn column, PostgresQuoter quoter, IOptions`1<GeneratorOptions> generatorOptions);
    private static PostgresGenerator();
    public virtual bool IsAdditionalFeatureSupported(string feature);
    public virtual string get_CreateTable();
    public virtual string get_DropTable();
    public virtual string get_AddColumn();
    public virtual string get_DropColumn();
    public virtual string get_AlterColumn();
    public virtual string get_RenameColumn();
    public virtual string Generate(AlterTableExpression expression);
    public virtual string Generate(CreateSchemaExpression expression);
    public virtual string Generate(DeleteSchemaExpression expression);
    public virtual string Generate(CreateTableExpression expression);
    public virtual string Generate(AlterColumnExpression expression);
    public virtual string Generate(CreateColumnExpression expression);
    public virtual string Generate(DeleteColumnExpression expression);
    public virtual string Generate(CreateForeignKeyExpression expression);
    public virtual string Generate(DeleteForeignKeyExpression expression);
    protected virtual string GetIncludeString(CreateIndexExpression column);
    protected virtual Algorithm GetIndexMethod(CreateIndexExpression expression);
    protected virtual string GetFilter(CreateIndexExpression expression);
    protected virtual string GetWithNullsDistinctStringInWhere(IndexDefinition index);
    protected virtual string GetWithNullsDistinctString(IndexDefinition index);
    protected virtual string GetAsConcurrently(CreateIndexExpression expression);
    protected virtual string GetAsOnly(CreateIndexExpression expression);
    protected virtual string GetNullsSort(IndexColumnDefinition column);
    protected virtual string GetTablespace(CreateIndexExpression expression);
    protected virtual string GetWithIndexStorageParameters(CreateIndexExpression expression);
    protected virtual HashSet`1<string> GetAllowIndexStorageParameters();
    public virtual string Generate(CreateIndexExpression expression);
    public virtual string Generate(DeleteIndexExpression expression);
    public virtual string Generate(DeleteTableExpression expression);
    public virtual string Generate(RenameTableExpression expression);
    public virtual string Generate(RenameColumnExpression expression);
    public virtual string Generate(InsertDataExpression expression);
    public virtual string Generate(AlterDefaultConstraintExpression expression);
    public virtual string Generate(DeleteDataExpression expression);
    public virtual string Generate(UpdateDataExpression expression);
    public virtual string Generate(AlterSchemaExpression expression);
    public virtual string Generate(DeleteDefaultConstraintExpression expression);
    public virtual string Generate(DeleteConstraintExpression expression);
    public virtual string Generate(CreateConstraintExpression expression);
    protected string GetColumnList(IEnumerable`1<string> columns);
    protected string GetDataList(List`1<object> data);
    public virtual string Generate(CreateSequenceExpression expression);
    public virtual string Generate(DeleteSequenceExpression expression);
    protected virtual string GetOverridingIdentityValuesString(InsertDataExpression expression);
    [CompilerGeneratedAttribute]
internal static Nullable`1<bool> <GetWithNullsDistinctStringInWhere>g__GetNullsDistinct|30_0(IndexColumnDefinition column);
    [CompilerGeneratedAttribute]
internal static string <GetWithIndexStorageParameters>g__ToOnOff|36_0(bool value);
    [CompilerGeneratedAttribute]
internal static T <GetWithIndexStorageParameters>g__GetIndexStorageParameters|36_1(string indexStorageParameter, string indexStorageParameterName, <>c__DisplayClass36_0& );
}
public class FluentMigrator.Runner.Generators.Postgres.PostgresQuoter : GenericQuoter {
    private static HashSet`1<string> _keywords;
    [CompilerGeneratedAttribute]
private PostgresOptions <Options>k__BackingField;
    public PostgresOptions Options { get; }
    public PostgresQuoter(PostgresOptions options);
    private static PostgresQuoter();
    [CompilerGeneratedAttribute]
public PostgresOptions get_Options();
    protected virtual bool ShouldQuote(string name);
    public virtual string FormatBool(bool value);
    public virtual string QuoteSchemaName(string schemaName);
    public virtual string QuoteSequenceName(string sequenceName, string schemaName);
    protected virtual string FormatByteArray(Byte[] array);
    public string UnQuoteSchemaName(string quoted);
    public virtual string FormatSystemMethods(SystemMethods value);
}
internal class FluentMigrator.Runner.Generators.Postgres.PostgresTypeMap : TypeMapBase {
    private static int DecimalCapacity;
    private static int PostgresMaxVarcharSize;
    protected virtual void SetupPostgresTypeMaps();
    protected sealed virtual void SetupTypeMaps();
}
public class FluentMigrator.Runner.Generators.Postgres92.Postgres92Generator : PostgresGenerator {
    public Postgres92Generator(PostgresQuoter quoter, IOptions`1<GeneratorOptions> generatorOptions);
}
internal class FluentMigrator.Runner.Generators.Postgres92.Postgres92TypeMap : PostgresTypeMap {
    protected virtual void SetupPostgresTypeMaps();
}
[ExtensionAttribute]
public static class FluentMigrator.Runner.PostgresRunnerBuilderExtensions : object {
    [ExtensionAttribute]
public static IMigrationRunnerBuilder AddPostgres(IMigrationRunnerBuilder builder);
    [ExtensionAttribute]
public static IMigrationRunnerBuilder AddPostgres92(IMigrationRunnerBuilder builder);
    [ExtensionAttribute]
public static IMigrationRunnerBuilder AddPostgres10_0(IMigrationRunnerBuilder builder);
    [ExtensionAttribute]
public static IMigrationRunnerBuilder AddPostgres11_0(IMigrationRunnerBuilder builder);
    [ExtensionAttribute]
public static IMigrationRunnerBuilder AddPostgres15_0(IMigrationRunnerBuilder builder);
    [ExtensionAttribute]
private static IMigrationRunnerBuilder AddCommonPostgresServices(IMigrationRunnerBuilder builder);
}
public class FluentMigrator.Runner.Processors.Postgres.Postgres10_0Processor : PostgresProcessor {
    [CompilerGeneratedAttribute]
private IList`1<string> <DatabaseTypeAliases>k__BackingField;
    public string DatabaseType { get; }
    public IList`1<string> DatabaseTypeAliases { get; }
    public Postgres10_0Processor(PostgresDbFactory factory, Postgres10_0Generator generator, ILogger`1<Postgres10_0Processor> logger, IOptionsSnapshot`1<ProcessorOptions> options, IConnectionStringAccessor connectionStringAccessor, PostgresOptions pgOptions);
    public virtual string get_DatabaseType();
    [CompilerGeneratedAttribute]
public virtual IList`1<string> get_DatabaseTypeAliases();
}
public class FluentMigrator.Runner.Processors.Postgres.Postgres11_0Processor : PostgresProcessor {
    [CompilerGeneratedAttribute]
private IList`1<string> <DatabaseTypeAliases>k__BackingField;
    public string DatabaseType { get; }
    public IList`1<string> DatabaseTypeAliases { get; }
    public Postgres11_0Processor(PostgresDbFactory factory, Postgres11_0Generator generator, ILogger`1<Postgres11_0Processor> logger, IOptionsSnapshot`1<ProcessorOptions> options, IConnectionStringAccessor connectionStringAccessor, PostgresOptions pgOptions);
    public virtual string get_DatabaseType();
    [CompilerGeneratedAttribute]
public virtual IList`1<string> get_DatabaseTypeAliases();
}
public class FluentMigrator.Runner.Processors.Postgres.Postgres15_0Processor : PostgresProcessor {
    [CompilerGeneratedAttribute]
private IList`1<string> <DatabaseTypeAliases>k__BackingField;
    public string DatabaseType { get; }
    public IList`1<string> DatabaseTypeAliases { get; }
    public Postgres15_0Processor(PostgresDbFactory factory, Postgres15_0Generator generator, ILogger`1<Postgres15_0Processor> logger, IOptionsSnapshot`1<ProcessorOptions> options, IConnectionStringAccessor connectionStringAccessor, PostgresOptions pgOptions);
    public virtual string get_DatabaseType();
    [CompilerGeneratedAttribute]
public virtual IList`1<string> get_DatabaseTypeAliases();
}
public class FluentMigrator.Runner.Processors.Postgres.PostgresDbFactory : ReflectionBasedDbFactory {
    private static TestEntry[] _entries;
    public PostgresDbFactory(IServiceProvider serviceProvider);
    private static PostgresDbFactory();
}
public class FluentMigrator.Runner.Processors.Postgres.PostgresOptions : object {
    [CompilerGeneratedAttribute]
private bool <ForceQuote>k__BackingField;
    public bool ForceQuote { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_ForceQuote();
    [CompilerGeneratedAttribute]
public void set_ForceQuote(bool value);
    public static PostgresOptions ParseProviderSwitches(string providerSwitches);
    public sealed virtual object Clone();
}
public class FluentMigrator.Runner.Processors.Postgres.PostgresProcessor : GenericProcessorBase {
    private PostgresQuoter _quoter;
    [CompilerGeneratedAttribute]
private IList`1<string> <DatabaseTypeAliases>k__BackingField;
    public string DatabaseType { get; }
    public IList`1<string> DatabaseTypeAliases { get; }
    [ObsoleteAttribute]
public PostgresProcessor(IDbConnection connection, IMigrationGenerator generator, IAnnouncer announcer, IMigrationProcessorOptions options, IDbFactory factory, PostgresOptions pgOptions);
    public PostgresProcessor(PostgresDbFactory factory, PostgresGenerator generator, ILogger`1<PostgresProcessor> logger, IOptionsSnapshot`1<ProcessorOptions> options, IConnectionStringAccessor connectionStringAccessor, PostgresOptions pgOptions);
    public virtual string get_DatabaseType();
    [CompilerGeneratedAttribute]
public virtual IList`1<string> get_DatabaseTypeAliases();
    public virtual void Execute(string template, Object[] args);
    public virtual bool SchemaExists(string schemaName);
    public virtual bool TableExists(string schemaName, string tableName);
    public virtual bool ColumnExists(string schemaName, string tableName, string columnName);
    public virtual bool ConstraintExists(string schemaName, string tableName, string constraintName);
    public virtual bool IndexExists(string schemaName, string tableName, string indexName);
    public virtual bool SequenceExists(string schemaName, string sequenceName);
    public virtual DataSet ReadTableData(string schemaName, string tableName);
    public virtual bool DefaultValueExists(string schemaName, string tableName, string columnName, object defaultValue);
    public virtual DataSet Read(string template, Object[] args);
    public virtual bool Exists(string template, Object[] args);
    protected virtual void Process(string sql);
    public virtual void Process(PerformDBOperationExpression expression);
    private string FormatToSafeSchemaName(string schemaName);
    private string FormatToSafeName(string sqlName);
}
public class FluentMigrator.Runner.Processors.Postgres92.Postgres92Processor : PostgresProcessor {
    [CompilerGeneratedAttribute]
private IList`1<string> <DatabaseTypeAliases>k__BackingField;
    public string DatabaseType { get; }
    public IList`1<string> DatabaseTypeAliases { get; }
    public Postgres92Processor(PostgresDbFactory factory, Postgres92Generator generator, ILogger`1<PostgresProcessor> logger, IOptionsSnapshot`1<ProcessorOptions> options, IConnectionStringAccessor connectionStringAccessor, PostgresOptions pgOptions);
    public virtual string get_DatabaseType();
    [CompilerGeneratedAttribute]
public virtual IList`1<string> get_DatabaseTypeAliases();
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
