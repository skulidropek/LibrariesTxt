public class FluentMigrator.Runner.BatchParser.SQLiteBatchParser : SqlBatchParser {
    private static IEnumerable`1<IRangeSearcher> _rangeSearchers;
    private static IEnumerable`1<ISpecialTokenSearcher> _specialTokenSearchers;
    public SQLiteBatchParser(string newLine);
    protected SQLiteBatchParser(IEnumerable`1<IRangeSearcher> rangeSearchers, IEnumerable`1<ISpecialTokenSearcher> specialTokenSearchers, string newLine);
    private static SQLiteBatchParser();
}
public interface FluentMigrator.Runner.Generators.SQLite.ISQLiteTypeMap {
}
internal class FluentMigrator.Runner.Generators.SQLite.SQLiteColumn : ColumnBase`1<ISQLiteTypeMap> {
    public SQLiteColumn(IQuoter quoter);
    public SQLiteColumn(IQuoter quoter, ISQLiteTypeMap typeMap);
    public virtual string Generate(IEnumerable`1<ColumnDefinition> columns, string tableName);
    protected virtual string FormatUniqueConstraint(ColumnDefinition column);
    public virtual string FormatForeignKey(ForeignKeyDefinition foreignKey, Func`2<ForeignKeyDefinition, string> fkNameGeneration);
    protected virtual string FormatIdentity(ColumnDefinition column);
    protected virtual string FormatPrimaryKey(ColumnDefinition column);
    public virtual bool ShouldPrimaryKeysBeAddedSeparately(IEnumerable`1<ColumnDefinition> primaryKeyColumns);
    [CompilerGeneratedAttribute]
private string <Generate>b__2_1(ColumnDefinition x);
}
public class FluentMigrator.Runner.Generators.SQLite.SQLiteGenerator : GenericGenerator {
    public string RenameTable { get; }
    public SQLiteGenerator(SQLiteQuoter quoter);
    public SQLiteGenerator(SQLiteQuoter quoter, ISQLiteTypeMap typeMap);
    public SQLiteGenerator(SQLiteQuoter quoter, IOptions`1<GeneratorOptions> generatorOptions);
    public SQLiteGenerator(SQLiteQuoter quoter, ISQLiteTypeMap typeMap, IOptions`1<GeneratorOptions> generatorOptions);
    public virtual string get_RenameTable();
    public virtual string Generate(AlterColumnExpression expression);
    public virtual string Generate(AlterDefaultConstraintExpression expression);
    public virtual string Generate(CreateForeignKeyExpression expression);
    public virtual string Generate(DeleteForeignKeyExpression expression);
    public virtual string Generate(CreateSequenceExpression expression);
    public virtual string Generate(DeleteSequenceExpression expression);
    public virtual string Generate(DeleteDefaultConstraintExpression expression);
    public virtual string Generate(CreateConstraintExpression expression);
    public virtual string Generate(DeleteConstraintExpression expression);
    public virtual string Generate(CreateIndexExpression expression);
    public virtual string Generate(DeleteIndexExpression expression);
}
public class FluentMigrator.Runner.Generators.SQLite.SQLiteQuoter : GenericQuoter {
    private bool _binaryGuid;
    public SQLiteQuoter(bool binaryGuid);
    public virtual string FormatSystemMethods(SystemMethods value);
    public virtual string FormatGuid(Guid value);
    public virtual string QuoteSchemaName(string schemaName);
    public virtual string QuoteIndexName(string indexName, string schemaName);
    protected virtual string FormatByteArray(Byte[] value);
}
public class FluentMigrator.Runner.Generators.SQLite.SQLiteTypeMap : TypeMapBase {
    [CompilerGeneratedAttribute]
private bool <UseStrictTables>k__BackingField;
    public static int AnsiStringCapacity;
    public static int AnsiTextCapacity;
    public static int UnicodeStringCapacity;
    public static int UnicodeTextCapacity;
    public static int ImageCapacity;
    public static int DecimalCapacity;
    public static int XmlCapacity;
    public bool UseStrictTables { get; }
    public SQLiteTypeMap(bool useStrictTables);
    [CompilerGeneratedAttribute]
public bool get_UseStrictTables();
    protected virtual void SetupTypeMaps();
    public virtual string GetTypeMap(DbType type, Nullable`1<int> size, Nullable`1<int> precision);
}
public class FluentMigrator.Runner.Processors.SQLite.SQLiteDbFactory : ReflectionBasedDbFactory {
    private static TestEntry[] _testEntries;
    public SQLiteDbFactory(IServiceProvider serviceProvider);
    private static SQLiteDbFactory();
}
public class FluentMigrator.Runner.Processors.SQLite.SQLiteProcessor : GenericProcessorBase {
    private IServiceProvider _serviceProvider;
    private SQLiteQuoter _quoter;
    [CompilerGeneratedAttribute]
private IList`1<string> <DatabaseTypeAliases>k__BackingField;
    public string DatabaseType { get; }
    public IList`1<string> DatabaseTypeAliases { get; }
    public SQLiteProcessor(SQLiteDbFactory factory, SQLiteGenerator generator, ILogger`1<SQLiteProcessor> logger, IOptionsSnapshot`1<ProcessorOptions> options, IConnectionStringAccessor connectionStringAccessor, IServiceProvider serviceProvider, SQLiteQuoter quoter);
    public virtual string get_DatabaseType();
    [CompilerGeneratedAttribute]
public virtual IList`1<string> get_DatabaseTypeAliases();
    public virtual bool SchemaExists(string schemaName);
    public virtual bool TableExists(string schemaName, string tableName);
    public virtual bool ColumnExists(string schemaName, string tableName, string columnName);
    public virtual bool ConstraintExists(string schemaName, string tableName, string constraintName);
    public virtual bool IndexExists(string schemaName, string tableName, string indexName);
    public virtual bool SequenceExists(string schemaName, string sequenceName);
    public virtual void Execute(string template, Object[] args);
    public virtual bool Exists(string template, Object[] args);
    public virtual DataSet ReadTableData(string schemaName, string tableName);
    public virtual bool DefaultValueExists(string schemaName, string tableName, string columnName, object defaultValue);
    public virtual void Process(PerformDBOperationExpression expression);
    protected virtual void Process(string sql);
    private bool ContainsGo(string sql);
    private void ExecuteNonQuery(string sql);
    private void ExecuteBatchNonQuery(string sql, Action`1<string> executeBatch, Action`2<string, int> executeGo);
    public virtual DataSet Read(string template, Object[] args);
    [CompilerGeneratedAttribute]
private void <Process>b__19_0(string sqlBatch);
    [CompilerGeneratedAttribute]
private void <Process>b__19_1(string sqlBatch, int goCount);
    [CompilerGeneratedAttribute]
private void <Process>b__19_2(string sqlBatch);
    [CompilerGeneratedAttribute]
private void <Process>b__19_3(string sqlBatch, int goCount);
}
[ExtensionAttribute]
public static class FluentMigrator.Runner.SQLiteRunnerBuilderExtensions : object {
    [ExtensionAttribute]
public static IMigrationRunnerBuilder AddSQLite(IMigrationRunnerBuilder builder, bool binaryGuid, bool useStrictTables);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
