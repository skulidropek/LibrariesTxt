public class FluentMigrator.Runner.BatchParser.SqlServerBatchParser : SqlBatchParser {
    private static IEnumerable`1<IRangeSearcher> _rangeSearchers;
    private static IEnumerable`1<ISpecialTokenSearcher> _specialTokenSearchers;
    public SqlServerBatchParser(string newLine);
    protected SqlServerBatchParser(IEnumerable`1<IRangeSearcher> rangeSearchers, IEnumerable`1<ISpecialTokenSearcher> specialTokenSearchers, string newLine);
    private static SqlServerBatchParser();
}
public interface FluentMigrator.Runner.Generators.SqlServer.ISqlServerTypeMap {
}
internal class FluentMigrator.Runner.Generators.SqlServer.SqlServer2000Column : ColumnBase`1<ISqlServerTypeMap> {
    public SqlServer2000Column(ISqlServerTypeMap typeMap, IQuoter quoter);
    protected virtual string FormatDefaultValue(ColumnDefinition column);
    private static bool DefaultValueIsSqlFunction(object defaultValue);
    protected virtual string FormatIdentity(ColumnDefinition column);
    private static string GetIdentityString(ColumnDefinition column);
    public static string FormatDefaultValue(object defaultValue, IQuoter quoter);
    public static string GetDefaultConstraintName(string tableName, string columnName);
}
public class FluentMigrator.Runner.Generators.SqlServer.SqlServer2000Generator : GenericGenerator {
    private IEnumerable`1<string> _supportedAdditionalFeatures;
    public string DropTableIfExists { get; }
    public string RenameTable { get; }
    public string RenameColumn { get; }
    public string DropIndex { get; }
    public string AddColumn { get; }
    public string IdentityInsert { get; }
    public string CreateConstraint { get; }
    public SqlServer2000Generator(SqlServer2000Quoter quoter);
    public SqlServer2000Generator(SqlServer2000Quoter quoter, IOptions`1<GeneratorOptions> generatorOptions);
    protected SqlServer2000Generator(IColumn column, IQuoter quoter, IDescriptionGenerator descriptionGenerator, IOptions`1<GeneratorOptions> generatorOptions);
    public virtual string get_DropTableIfExists();
    public virtual string get_RenameTable();
    public virtual string get_RenameColumn();
    public virtual string get_DropIndex();
    public virtual string get_AddColumn();
    public virtual string get_IdentityInsert();
    public virtual string get_CreateConstraint();
    public virtual string GetClusterTypeString(CreateIndexExpression column);
    protected virtual string GetConstraintClusteringString(CreateConstraintExpression constraint);
    public virtual string Generate(CreateConstraintExpression expression);
    public virtual string Generate(RenameTableExpression expression);
    public virtual string Generate(RenameColumnExpression expression);
    public virtual string Generate(DeleteColumnExpression expression);
    protected virtual void BuildDelete(DeleteColumnExpression expression, string columnName, StringBuilder builder);
    public virtual string Generate(AlterDefaultConstraintExpression expression);
    public virtual string Generate(InsertDataExpression expression);
    protected static bool IsUsingIdentityInsert(InsertDataExpression expression);
    public virtual string Generate(CreateSequenceExpression expression);
    public virtual string Generate(DeleteSequenceExpression expression);
    public virtual string Generate(DeleteDefaultConstraintExpression expression);
    public virtual bool IsAdditionalFeatureSupported(string feature);
    [CompilerGeneratedAttribute]
private string <Generate>b__20_0(string x);
}
public class FluentMigrator.Runner.Generators.SqlServer.SqlServer2000Quoter : GenericQuoter {
    public string OpenQuote { get; }
    public string CloseQuote { get; }
    public string CloseQuoteEscapeString { get; }
    public string OpenQuoteEscapeString { get; }
    public virtual string get_OpenQuote();
    public virtual string get_CloseQuote();
    public virtual string get_CloseQuoteEscapeString();
    public virtual string get_OpenQuoteEscapeString();
    public virtual string QuoteSchemaName(string schemaName);
    public virtual string FormatNationalString(string value);
    public virtual string FormatSystemMethods(SystemMethods value);
}
public class FluentMigrator.Runner.Generators.SqlServer.SqlServer2000TypeMap : TypeMapBase {
    public static int AnsiStringCapacity;
    public static int AnsiTextCapacity;
    public static int UnicodeStringCapacity;
    public static int UnicodeTextCapacity;
    public static int ImageCapacity;
    public static int DecimalCapacity;
    protected virtual void SetupSqlServerTypeMaps();
    protected sealed virtual void SetupTypeMaps();
}
internal class FluentMigrator.Runner.Generators.SqlServer.SqlServer2005Column : SqlServer2000Column {
    public SqlServer2005Column(ISqlServerTypeMap typeMap, IQuoter quoter);
    protected virtual string FormatNullable(ColumnDefinition column);
    protected virtual string FormatRowGuid(ColumnDefinition column);
}
public class FluentMigrator.Runner.Generators.SqlServer.SqlServer2005DescriptionGenerator : GenericDescriptionGenerator {
    private static string TableDescriptionTemplate;
    private static string ColumnDescriptionTemplate;
    private static string RemoveTableDescriptionTemplate;
    private static string RemoveColumnDescriptionTemplate;
    private static string TableDescriptionVerificationTemplate;
    private static string ColumnDescriptionVerificationTemplate;
    public virtual string GenerateDescriptionStatement(AlterTableExpression expression);
    public virtual string GenerateDescriptionStatement(AlterColumnExpression expression);
    protected virtual string GenerateTableDescription(string schemaName, string tableName, string tableDescription);
    protected virtual string GenerateColumnDescription(string descriptionName, string schemaName, string tableName, string columnName, string columnDescription);
    private string GenerateTableDescriptionRemoval(string schemaName, string tableName);
    private string GenerateColumnDescriptionRemoval(string descriptionName, string schemaName, string tableName, string columnName);
    private string FormatSchemaName(string schemaName);
}
public class FluentMigrator.Runner.Generators.SqlServer.SqlServer2005Generator : SqlServer2000Generator {
    private static string ErrorMessageFilteredIndexesAreNonClusteredIndexes;
    private static HashSet`1<string> _supportedAdditionalFeatures;
    public string AddColumn { get; }
    public string CreateSchema { get; }
    public string CreateIndex { get; }
    public string DropIndex { get; }
    public string IdentityInsert { get; }
    public string CreateUniqueConstraint { get; }
    public string CreateForeignKeyConstraint { get; }
    public SqlServer2005Generator(SqlServer2005Quoter quoter);
    public SqlServer2005Generator(SqlServer2005Quoter quoter, IOptions`1<GeneratorOptions> generatorOptions);
    protected SqlServer2005Generator(IColumn column, IQuoter quoter, IDescriptionGenerator descriptionGenerator, IOptions`1<GeneratorOptions> generatorOptions);
    private static SqlServer2005Generator();
    public virtual string get_AddColumn();
    public virtual string get_CreateSchema();
    public virtual string get_CreateIndex();
    public virtual string get_DropIndex();
    public virtual string get_IdentityInsert();
    public virtual string get_CreateUniqueConstraint();
    public virtual string get_CreateForeignKeyConstraint();
    public virtual string GetIncludeString(CreateIndexExpression expression);
    public virtual string GetIncludeString(CreateConstraintExpression expression);
    protected string GetIncludeStringFor(ISupportAdditionalFeatures expression, string featureKey);
    public virtual string GetFilterString(CreateIndexExpression createIndexExpression);
    public virtual string GetFilterString(CreateConstraintExpression createConstraintExpression);
    public virtual string GetWithOptions(ISupportAdditionalFeatures expression);
    public virtual bool IsAdditionalFeatureSupported(string feature);
    public virtual string Generate(CreateTableExpression expression);
    public virtual string Generate(AlterTableExpression expression);
    public virtual string Generate(DeleteTableExpression expression);
    public virtual string Generate(CreateColumnExpression expression);
    public virtual string Generate(AlterColumnExpression expression);
    public virtual string Generate(CreateForeignKeyExpression expression);
    public virtual string Generate(CreateIndexExpression expression);
    public virtual string Generate(DeleteIndexExpression expression);
    public virtual string Generate(CreateConstraintExpression expression);
    public virtual string Generate(DeleteDefaultConstraintExpression expression);
    public virtual string Generate(DeleteConstraintExpression expression);
    public virtual string Generate(CreateSchemaExpression expression);
    public virtual string Generate(DeleteSchemaExpression expression);
    public virtual string Generate(AlterSchemaExpression expression);
    private string ComposeStatements(string ddlStatement, IEnumerable`1<string> otherStatements);
    [CompilerGeneratedAttribute]
private string <Generate>b__35_0(string x);
}
public class FluentMigrator.Runner.Generators.SqlServer.SqlServer2005Quoter : SqlServer2000Quoter {
    public virtual string QuoteSchemaName(string schemaName);
}
public class FluentMigrator.Runner.Generators.SqlServer.SqlServer2005TypeMap : SqlServer2000TypeMap {
    protected virtual void SetupSqlServerTypeMaps();
}
internal class FluentMigrator.Runner.Generators.SqlServer.SqlServer2008Column : SqlServer2005Column {
    public SqlServer2008Column(ISqlServerTypeMap typeMap, IQuoter quoter);
    protected virtual string FormatSparse(ColumnDefinition column);
}
public class FluentMigrator.Runner.Generators.SqlServer.SqlServer2008Generator : SqlServer2005Generator {
    private static HashSet`1<string> _supportedAdditionalFeatures;
    public SqlServer2008Generator(SqlServer2008Quoter quoter);
    public SqlServer2008Generator(SqlServer2008Quoter quoter, IOptions`1<GeneratorOptions> generatorOptions);
    protected SqlServer2008Generator(IColumn column, IQuoter quoter, IDescriptionGenerator descriptionGenerator, IOptions`1<GeneratorOptions> generatorOptions);
    private static SqlServer2008Generator();
    public virtual bool IsAdditionalFeatureSupported(string feature);
    public virtual string GetWithNullsDistinctString(IndexDefinition index);
    public virtual string Generate(CreateIndexExpression expression);
    public virtual string GetWithOptions(ISupportAdditionalFeatures expression);
    [CompilerGeneratedAttribute]
internal static Nullable`1<bool> <GetWithNullsDistinctString>g__GetNullsDistinct|6_0(IndexColumnDefinition column);
}
public class FluentMigrator.Runner.Generators.SqlServer.SqlServer2008Quoter : SqlServer2005Quoter {
    public virtual string FormatSystemMethods(SystemMethods value);
}
internal class FluentMigrator.Runner.Generators.SqlServer.SqlServer2008TypeMap : SqlServer2005TypeMap {
    protected virtual void SetupSqlServerTypeMaps();
}
public class FluentMigrator.Runner.Generators.SqlServer.SqlServer2012Generator : SqlServer2008Generator {
    public SqlServer2012Generator(SqlServer2008Quoter quoter);
    public SqlServer2012Generator(SqlServer2008Quoter quoter, IOptions`1<GeneratorOptions> generatorOptions);
    protected SqlServer2012Generator(IColumn column, IQuoter quoter, IDescriptionGenerator descriptionGenerator, IOptions`1<GeneratorOptions> generatorOptions);
    public virtual string Generate(CreateSequenceExpression expression);
    public virtual string Generate(DeleteSequenceExpression expression);
}
public class FluentMigrator.Runner.Generators.SqlServer.SqlServer2014Generator : SqlServer2012Generator {
    public SqlServer2014Generator(SqlServer2008Quoter quoter);
    public SqlServer2014Generator(SqlServer2008Quoter quoter, IOptions`1<GeneratorOptions> generatorOptions);
    protected SqlServer2014Generator(IColumn column, IQuoter quoter, IDescriptionGenerator descriptionGenerator, IOptions`1<GeneratorOptions> generatorOptions);
}
public class FluentMigrator.Runner.Generators.SqlServer.SqlServer2016Generator : SqlServer2014Generator {
    public SqlServer2016Generator(SqlServer2008Quoter quoter);
    public SqlServer2016Generator(SqlServer2008Quoter quoter, IOptions`1<GeneratorOptions> generatorOptions);
    protected SqlServer2016Generator(IColumn column, IQuoter quoter, IDescriptionGenerator descriptionGenerator, IOptions`1<GeneratorOptions> generatorOptions);
}
public class FluentMigrator.Runner.Processors.SqlServer.SqlServer2000Processor : GenericProcessorBase {
    private IServiceProvider _serviceProvider;
    [CompilerGeneratedAttribute]
private IList`1<string> <DatabaseTypeAliases>k__BackingField;
    public string DatabaseType { get; }
    public IList`1<string> DatabaseTypeAliases { get; }
    public SqlServer2000Processor(ILogger`1<SqlServer2000Processor> logger, SqlServer2000Generator generator, IOptionsSnapshot`1<ProcessorOptions> options, IConnectionStringAccessor connectionStringAccessor, IServiceProvider serviceProvider);
    protected SqlServer2000Processor(DbProviderFactory factory, ILogger logger, SqlServer2000Generator generator, IOptionsSnapshot`1<ProcessorOptions> options, IConnectionStringAccessor connectionStringAccessor, IServiceProvider serviceProvider);
    public virtual string get_DatabaseType();
    [CompilerGeneratedAttribute]
public virtual IList`1<string> get_DatabaseTypeAliases();
    public virtual void BeginTransaction();
    public virtual void CommitTransaction();
    public virtual void RollbackTransaction();
    public virtual bool SchemaExists(string schemaName);
    public virtual bool TableExists(string schemaName, string tableName);
    public virtual bool ColumnExists(string schemaName, string tableName, string columnName);
    public virtual bool ConstraintExists(string schemaName, string tableName, string constraintName);
    public virtual bool IndexExists(string schemaName, string tableName, string indexName);
    public virtual bool SequenceExists(string schemaName, string sequenceName);
    public virtual bool DefaultValueExists(string schemaName, string tableName, string columnName, object defaultValue);
    public virtual DataSet ReadTableData(string schemaName, string tableName);
    public virtual DataSet Read(string template, Object[] args);
    public virtual bool Exists(string template, Object[] args);
    public virtual void Execute(string template, Object[] args);
    protected virtual void Process(string sql);
    private bool ContainsGo(string sql);
    private void ExecuteNonQuery(string sql);
    private void ExecuteBatchNonQuery(string sql);
    public virtual void Process(PerformDBOperationExpression expression);
}
public class FluentMigrator.Runner.Processors.SqlServer.SqlServer2005Processor : SqlServerProcessor {
    public SqlServer2005Processor(ILogger`1<SqlServer2005Processor> logger, SqlServer2005Quoter quoter, SqlServer2005Generator generator, IOptionsSnapshot`1<ProcessorOptions> options, IConnectionStringAccessor connectionStringAccessor, IServiceProvider serviceProvider);
}
public class FluentMigrator.Runner.Processors.SqlServer.SqlServer2008Processor : SqlServerProcessor {
    public SqlServer2008Processor(ILogger`1<SqlServer2008Processor> logger, SqlServer2008Quoter quoter, SqlServer2008Generator generator, IOptionsSnapshot`1<ProcessorOptions> options, IConnectionStringAccessor connectionStringAccessor, IServiceProvider serviceProvider);
}
public class FluentMigrator.Runner.Processors.SqlServer.SqlServer2012Processor : SqlServerProcessor {
    public SqlServer2012Processor(ILogger`1<SqlServer2012Processor> logger, SqlServer2008Quoter quoter, SqlServer2012Generator generator, IOptionsSnapshot`1<ProcessorOptions> options, IConnectionStringAccessor connectionStringAccessor, IServiceProvider serviceProvider);
}
public class FluentMigrator.Runner.Processors.SqlServer.SqlServer2014Processor : SqlServerProcessor {
    public SqlServer2014Processor(ILogger`1<SqlServer2014Processor> logger, SqlServer2008Quoter quoter, SqlServer2014Generator generator, IOptionsSnapshot`1<ProcessorOptions> options, IConnectionStringAccessor connectionStringAccessor, IServiceProvider serviceProvider);
}
public class FluentMigrator.Runner.Processors.SqlServer.SqlServer2016Processor : SqlServerProcessor {
    public SqlServer2016Processor(ILogger`1<SqlServer2016Processor> logger, SqlServer2008Quoter quoter, SqlServer2016Generator generator, IOptionsSnapshot`1<ProcessorOptions> options, IConnectionStringAccessor connectionStringAccessor, IServiceProvider serviceProvider);
    protected SqlServer2016Processor(DbProviderFactory factory, ILogger logger, SqlServer2008Quoter quoter, SqlServer2016Generator generator, IOptionsSnapshot`1<ProcessorOptions> options, IConnectionStringAccessor connectionStringAccessor, IServiceProvider serviceProvider);
}
[ObsoleteAttribute]
public class FluentMigrator.Runner.Processors.SqlServer.SqlServerDbFactory : DbFactoryBase {
    protected virtual DbProviderFactory CreateFactory();
}
public class FluentMigrator.Runner.Processors.SqlServer.SqlServerProcessor : GenericProcessorBase {
    private IServiceProvider _serviceProvider;
    private static string SqlSchemaExists;
    private static string TABLE_EXISTS;
    private static string COLUMN_EXISTS;
    private static string CONSTRAINT_EXISTS;
    private static string INDEX_EXISTS;
    private static string SEQUENCES_EXISTS;
    private static string DEFAULTVALUE_EXISTS;
    [CompilerGeneratedAttribute]
private string <DatabaseType>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<string> <DatabaseTypeAliases>k__BackingField;
    [CompilerGeneratedAttribute]
private IQuoter <Quoter>k__BackingField;
    public string DatabaseType { get; }
    public IList`1<string> DatabaseTypeAliases { get; }
    public IQuoter Quoter { get; }
    [ObsoleteAttribute]
public SqlServerProcessor(IEnumerable`1<string> databaseTypes, IDbConnection connection, GenericGenerator generator, IAnnouncer announcer, IMigrationProcessorOptions options, IDbFactory factory);
    protected SqlServerProcessor(IEnumerable`1<string> databaseTypes, IMigrationGenerator generator, IQuoter quoter, ILogger logger, IOptionsSnapshot`1<ProcessorOptions> options, IConnectionStringAccessor connectionStringAccessor, IServiceProvider serviceProvider);
    protected SqlServerProcessor(IEnumerable`1<string> databaseTypes, DbProviderFactory factory, IMigrationGenerator generator, IQuoter quoter, ILogger logger, IOptionsSnapshot`1<ProcessorOptions> options, IConnectionStringAccessor connectionStringAccessor, IServiceProvider serviceProvider);
    [CompilerGeneratedAttribute]
public virtual string get_DatabaseType();
    [CompilerGeneratedAttribute]
public virtual IList`1<string> get_DatabaseTypeAliases();
    [CompilerGeneratedAttribute]
public IQuoter get_Quoter();
    private static string SafeSchemaName(string schemaName);
    public virtual void BeginTransaction();
    public virtual void CommitTransaction();
    public virtual void RollbackTransaction();
    public virtual bool SchemaExists(string schemaName);
    public virtual bool TableExists(string schemaName, string tableName);
    public virtual bool ColumnExists(string schemaName, string tableName, string columnName);
    public virtual bool ConstraintExists(string schemaName, string tableName, string constraintName);
    public virtual bool IndexExists(string schemaName, string tableName, string indexName);
    public virtual bool SequenceExists(string schemaName, string sequenceName);
    public virtual bool DefaultValueExists(string schemaName, string tableName, string columnName, object defaultValue);
    public virtual void Execute(string template, Object[] args);
    public virtual bool Exists(string template, Object[] args);
    public virtual DataSet ReadTableData(string schemaName, string tableName);
    public virtual DataSet Read(string template, Object[] args);
    protected virtual void Process(string sql);
    private bool ContainsGo(string sql);
    private void ExecuteNonQuery(string sql);
    private void ExecuteBatchNonQuery(string sql);
    public virtual void Process(PerformDBOperationExpression expression);
}
[ExtensionAttribute]
public static class FluentMigrator.Runner.SqlServerRunnerBuilderExtensions : object {
    [ExtensionAttribute]
public static IMigrationRunnerBuilder AddSqlServer(IMigrationRunnerBuilder builder);
    [ExtensionAttribute]
public static IMigrationRunnerBuilder AddSqlServer2000(IMigrationRunnerBuilder builder);
    [ExtensionAttribute]
public static IMigrationRunnerBuilder AddSqlServer2005(IMigrationRunnerBuilder builder);
    [ExtensionAttribute]
public static IMigrationRunnerBuilder AddSqlServer2008(IMigrationRunnerBuilder builder);
    [ExtensionAttribute]
public static IMigrationRunnerBuilder AddSqlServer2012(IMigrationRunnerBuilder builder);
    [ExtensionAttribute]
public static IMigrationRunnerBuilder AddSqlServer2014(IMigrationRunnerBuilder builder);
    [ExtensionAttribute]
public static IMigrationRunnerBuilder AddSqlServer2016(IMigrationRunnerBuilder builder);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
