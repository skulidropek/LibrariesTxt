internal class System.Data.SqlServerCe.Accessor : object {
    private object thisLock;
    private bool isFinalized;
    private int index;
    private int count;
    private int bindingIndx;
    private int dataBufferSize;
    private int actualBufferSize;
    private int numValues;
    private IntPtr dataHandle;
    private UInt64[] pValueArray;
    private MEDBBINDING[] dbbindings;
    private String[] columnNames;
    internal bool doTruncate;
    internal static Type SByteType;
    internal static Type Int16Type;
    internal static Type Int32Type;
    internal static Type Int64Type;
    internal static Type ByteType;
    internal static Type SingleType;
    internal static Type DoubleType;
    internal static Type StringType;
    internal static Type GuidType;
    internal MEDBBINDING[] DbBinding { get; }
    internal IntPtr DataHandle { get; }
    internal int Count { get; }
    unknown int NumValues {internal set; }
    internal int CurrentIndex { get; internal set; }
    internal int DataBufferSize { get; }
    unknown int ActualDataBufferSize {internal set; }
    unknown int Ordinal {internal set; }
    internal string ColumnName { get; internal set; }
    unknown IntPtr ObjectPtr {internal set; }
    internal int MaxLen { get; internal set; }
    internal SETYPE SeType { get; internal set; }
    internal byte Precision { get; internal set; }
    internal byte Scale { get; internal set; }
    internal int SizeValue { get; internal set; }
    internal DBStatus StatusValue { get; internal set; }
    internal object Value { get; internal set; }
    unknown bool Value_BOOL {private set; }
    private Byte[] Value_BYTES { get; private set; }
    unknown decimal Value_CY {private set; }
    private DateTime Value_DATETIME { get; private set; }
    private Guid Value_GUID { get; private set; }
    unknown byte Value_TINYINT {private set; }
    unknown short Value_I2 {private set; }
    unknown int Value_I4 {private set; }
    unknown long Value_I8 {private set; }
    private SqlDecimal Value_NUMERIC { get; private set; }
    unknown float Value_R4 {private set; }
    unknown double Value_R8 {private set; }
    unknown string Value_STRING {private set; }
    unknown Char[] Value_CHARS {private set; }
    private static Accessor();
    internal Accessor(int count);
    protected virtual void Finalize();
    public sealed virtual void Dispose();
    [SecurityCriticalAttribute]
[SecurityTreatAsSafeAttribute]
private void Dispose(bool disposing);
    [SecurityCriticalAttribute]
private void ReleaseNativeInterfaces();
    internal MEDBBINDING[] get_DbBinding();
    internal IntPtr get_DataHandle();
    internal int get_Count();
    internal void set_NumValues(int value);
    internal int get_CurrentIndex();
    internal void set_CurrentIndex(int value);
    internal int get_DataBufferSize();
    internal void set_ActualDataBufferSize(int value);
    [SecurityCriticalAttribute]
internal void AllocData();
    internal void set_Ordinal(int value);
    internal string get_ColumnName();
    internal void set_ColumnName(string value);
    [SecurityCriticalAttribute]
internal void set_ObjectPtr(IntPtr value);
    internal int get_MaxLen();
    internal void set_MaxLen(int value);
    internal SETYPE get_SeType();
    internal void set_SeType(SETYPE value);
    internal byte get_Precision();
    internal void set_Precision(byte value);
    internal byte get_Scale();
    internal void set_Scale(byte value);
    [SecurityCriticalAttribute]
internal int get_SizeValue();
    [SecurityCriticalAttribute]
internal void set_SizeValue(int value);
    [SecurityCriticalAttribute]
internal DBStatus get_StatusValue();
    [SecurityCriticalAttribute]
internal void set_StatusValue(DBStatus value);
    [SecurityCriticalAttribute]
private Exception CheckTypeValueStatusValue(Type type);
    [SecurityCriticalAttribute]
internal void SetValueDBNull();
    [SecurityCriticalAttribute]
internal void SetValueNull();
    [SecurityCriticalAttribute]
[SecurityTreatAsSafeAttribute]
internal object get_Value();
    [SecurityTreatAsSafeAttribute]
[SecurityCriticalAttribute]
internal void set_Value(object value);
    [SecurityCriticalAttribute]
private void set_Value_BOOL(bool value);
    [SecurityCriticalAttribute]
private Byte[] get_Value_BYTES();
    [SecurityCriticalAttribute]
private void set_Value_BYTES(Byte[] value);
    [SecurityCriticalAttribute]
private void set_Value_CY(decimal value);
    [SecurityCriticalAttribute]
private DateTime get_Value_DATETIME();
    [SecurityCriticalAttribute]
private void set_Value_DATETIME(DateTime value);
    [SecurityCriticalAttribute]
private Guid get_Value_GUID();
    [SecurityCriticalAttribute]
private void set_Value_GUID(Guid value);
    [SecurityCriticalAttribute]
private void set_Value_TINYINT(byte value);
    [SecurityCriticalAttribute]
private void set_Value_I2(short value);
    [SecurityCriticalAttribute]
private void set_Value_I4(int value);
    [SecurityCriticalAttribute]
private void set_Value_I8(long value);
    [SecurityCriticalAttribute]
private SqlDecimal get_Value_NUMERIC();
    [SecurityCriticalAttribute]
private void set_Value_NUMERIC(SqlDecimal value);
    [SecurityCriticalAttribute]
private void set_Value_R4(float value);
    [SecurityCriticalAttribute]
private void set_Value_R8(double value);
    [SecurityCriticalAttribute]
private void set_Value_STRING(string value);
    [SecurityCriticalAttribute]
private void set_Value_CHARS(Char[] value);
    private static int AlignDataSize(int value);
}
public enum System.Data.SqlServerCe.AddOption : Enum {
    public int value__;
    public static AddOption ExistingDatabase;
    public static AddOption CreateDatabase;
}
internal class System.Data.SqlServerCe.ADP : object {
    internal static int MaxConnectionStringCacheSize;
    internal static string BeginTransaction;
    internal static string CommandSetEnlistedConnection;
    internal static string GetDatabaseInfo;
    internal static string ChangeDatabase;
    internal static string Cancel;
    internal static string Clone;
    internal static string CommitTransaction;
    internal static string ConnectionString;
    internal static string DataSetColumn;
    internal static string DataSetTable;
    internal static string Delete;
    internal static string DeleteCommand;
    internal static string DeriveParameters;
    internal static string ExecuteReader;
    internal static string ExecuteNonQuery;
    internal static string ExecuteTableDirect;
    internal static string ExecuteScalar;
    internal static string ExecuteXmlReader;
    internal static string ExecuteResultSet;
    internal static string Fill;
    internal static string FillSchema;
    internal static string GetBytes;
    internal static string GetChars;
    internal static string Insert;
    internal static string Parameter;
    internal static string ParameterName;
    internal static string ParameterIndex;
    internal static string Prepare;
    internal static string Remove;
    internal static string RollbackTransaction;
    internal static string SaveTransaction;
    internal static string Select;
    internal static string SelectCommand;
    internal static string SourceColumn;
    internal static string SourceVersion;
    internal static string SourceTable;
    internal static string Update;
    internal static string UpdateCommand;
    internal static string sysTableTombstone;
    internal static string sysContextColumn;
    internal static string sysTableCommitSequence;
    internal static string sysTableTrackedObjects;
    internal static int DecimalScaleOfMoney;
    internal static string sysTableSyncArticles;
    internal static string sysTableSyncSubscriptions;
    internal static int DB_E_BADBOOKMARK;
    internal static int DB_E_DELETEDROW;
    internal static int DB_E_NOTFOUND;
    internal static int SSCE_M_LOCKTIMEOUT;
    internal static int SSCE_M_PENDINGUPDATE;
    internal static int SSCE_M_DBUPGRADENEEDED;
    internal static int SSCE_M_NOCURRENTRECORD;
    internal static int SSCE_M_COLUMNORDINALNOTFOUND;
    internal static int SSCE_M_MANAGEDEXCEPTION;
    internal static int SSCE_M_TRANSACTIONABORTED;
    internal static int SSCE_M_INVALIDPASSWORD;
    internal static int SSCE_M_FILENOTFOUND;
    internal static int SSCE_M_INVALIDSRCPASSWORD;
    internal static int SSCE_M_INVALIDPATH;
    internal static int SSCE_M_INVALIDFILENAME;
    internal static int SSCE_M_FILESHAREVIOLATION;
    internal static int SSCE_M_FILEACCESSDENIED;
    internal static int SSCE_M_FILEALREADYEXISTS;
    internal static int SSCE_M_INVALIDPROVIDERTYPE;
    internal static int SSCE_M_INVALIDDBVERSION;
    internal static int SSCE_M_SINGLEUSEROPERATION;
    internal static int SSCE_M_PATHTOOLONG;
    internal static int SSCE_M_DBAUTOUPGRADEFAILED;
    internal static int SSCE_M_TABLENOTTRACKED;
    internal static int SQLCE_WrongTrackingVersion;
    internal static int SQLCE_WrongCleanupSequence;
    internal static int MAX_PARAMETER_NAME_LENGTH;
    internal static int ExecutedQuery;
    internal static int ExecutedNonQuery;
    internal static int SchemaOnly;
    internal static short VARIANT_TRUE;
    internal static short VARIANT_FALSE;
    internal static int TRUE;
    internal static int FALSE;
    internal static int DBACCESSOR_ROWDATA;
    internal static int DBACCESSOR_PARAMETERDATA;
    internal static int S_OK;
    internal static int SESETCOLUMN_DEFAULT;
    internal static int E_FAIL;
    internal static CompareOptions compareOptions;
    private static Type StackOverflowType;
    private static Type OutOfMemoryType;
    private static Type ThreadAbortType;
    private static Type NullReferenceType;
    internal static object EventRowUpdated;
    internal static object EventRowUpdating;
    internal static object EventInfoMessage;
    internal static object EventStateChange;
    internal static object EventFlushFailure;
    internal static int SizeOf_tagDBOBJECT;
    internal static Guid IID_ISequentialStream;
    internal static Guid IID_ILockBytes;
    [SecurityCriticalAttribute]
private static ADP();
    internal static IntPtr IntPtrOffset(IntPtr pbase, int offset);
    internal static int SrcCompare(string strA, string strB);
    internal static void CheckArgumentNull(object value, string parameterName);
    internal static bool IsEmpty(string str);
    internal static bool IsAlive(WeakReference value);
    internal static bool IsCatchableExceptionType(Exception e);
    internal static List`1<string> GetTablePrimaryKey(string tableName, SqlCeConnection Connection);
    internal static string GetTableRowGuidColumn(string tableName, SqlCeConnection Connection);
    internal static SqlCeTableColumns GetTableColumns(string tableName, SqlCeConnection Connection);
    [SecurityTreatAsSafeAttribute]
[SecurityCriticalAttribute]
internal static object BitConverterGetObject(SqlCeType ceType, Byte[] fullBytes, int offset, int length);
    [SecurityTreatAsSafeAttribute]
[SecurityCriticalAttribute]
internal static Byte[] BitConverterGetBytes(SqlCeType ceType, object val, Int32& length);
}
internal enum System.Data.SqlServerCe.ChangeType : Enum {
    public int value__;
    public static ChangeType RowInserted;
    public static ChangeType RowDeleted;
    public static ChangeType RowUpdated;
}
internal enum System.Data.SqlServerCe.ColumnUpdatedStatus : Enum {
    public int value__;
    public static ColumnUpdatedStatus None;
    public static ColumnUpdatedStatus NewValue;
    public static ColumnUpdatedStatus ServerDefault;
}
public enum System.Data.SqlServerCe.CommitMode : Enum {
    public int value__;
    public static CommitMode Deferred;
    public static CommitMode Immediate;
}
internal static class System.Data.SqlServerCe.CommonUtils : object {
    private static string DataDirectoryMacro;
    private static string DataDirectory;
    private static CommonUtils();
    public static string ReplaceDataDirectory(string inputString);
}
internal class System.Data.SqlServerCe.ConStringUtil : object {
    public static string EngineDefault;
    public static string PlatformDefault;
    public static string ReadOnly;
    public static string ReadWrite;
    public static string Exclusive;
    public static string SharedRead;
    private static int _encryptionModeOptions;
    private static char _equalSign;
    private static char _semiColon;
    private static char _singleQuote;
    private static char _doubleQuote;
    private static char _space;
    private static char _tab;
    private static char _backslash;
    private static Hashtable _encryptionModeMapping;
    private static Hashtable _connectionSynonymMapping;
    private static ConStringUtil();
    public static int MapEncryptionMode(string value);
    public static string RemoveKeyValuesFromString(string conString, string removeKey);
    public static Dictionary`2<string, string> ParseConnectionString(string connectionString);
    public static string ReplaceDataDirectory(string inputString);
    public static string MapToOledbConnectionString(string conString);
    private static void SkipValue(string conString, Int32& index);
    private static void SkipWhiteSpace(string conString, Int32& index);
    private static void ParseStringIntoTable(string conString, Dictionary`2<string, string> values);
    private static Exception ConnectionStringSyntax(int index, Char[] connectionString);
    private static int GetKeyValuePair(Char[] connectionString, int currentPosition, String& key, Char[] valuebuf, Int32& vallength, Boolean& isempty);
    private static string GetKey(Char[] valuebuf, int bufPosition);
    private static int TrimWhiteSpace(Char[] valuebuf, int bufPosition);
    private static bool InsertKeyValue(Dictionary`2<string, string> values, String& key, string value);
}
[SecurityCriticalAttribute("1")]
internal class System.Data.SqlServerCe.CspSafeHandle : SafeHandleZeroOrMinusOneIsInvalid {
    private static CspSafeHandle();
    [SuppressUnmanagedCodeSecurityAttribute]
[SecurityCriticalAttribute]
[SuppressUnmanagedCodeSecurityAttribute]
[ReliabilityContractAttribute("3", "2")]
private static bool CryptReleaseContext(IntPtr hProv, int dwFlags);
    protected virtual bool ReleaseHandle();
}
internal enum System.Data.SqlServerCe.CursorPosition : Enum {
    public int value__;
    public static CursorPosition Undefined;
    public static CursorPosition AfterLast;
    public static CursorPosition BeforeFirst;
    public static CursorPosition OnRow;
}
internal class System.Data.SqlServerCe.DataColumnPropertyDescriptor : PropertyDescriptor {
    private int ordinal;
    private bool isReadOnly;
    private SqlCeResultSet parent;
    public Type ComponentType { get; }
    public bool IsReadOnly { get; }
    public Type PropertyType { get; }
    private static DataColumnPropertyDescriptor();
    internal DataColumnPropertyDescriptor(int ordinal, SqlCeResultSet resultSet, bool isReadOnly);
    public virtual Type get_ComponentType();
    public virtual bool get_IsReadOnly();
    public virtual Type get_PropertyType();
    public virtual bool Equals(object other);
    public virtual int GetHashCode();
    public virtual bool CanResetValue(object component);
    public virtual object GetValue(object component);
    public virtual void ResetValue(object component);
    public virtual void SetValue(object component, object value);
    public virtual bool ShouldSerializeValue(object component);
}
internal class System.Data.SqlServerCe.DB_NUMERIC : ValueType {
    public byte precision;
    public byte scale;
    public byte sign;
    [FixedBufferAttribute("System.Byte", "16")]
public <val>e__FixedBuffer0 val;
}
[FlagsAttribute]
internal enum System.Data.SqlServerCe.DbColumnFlags : Enum {
    public int value__;
    public static DbColumnFlags ISBOOKMARK;
    public static DbColumnFlags MAYDEFER;
    public static DbColumnFlags WRITE;
    public static DbColumnFlags WRITEUNKNOWN;
    public static DbColumnFlags ISFIXEDLENGTH;
    public static DbColumnFlags ISNULLABLE;
    public static DbColumnFlags MAYBENULL;
    public static DbColumnFlags ISLONG;
    public static DbColumnFlags ISROWID;
    public static DbColumnFlags ISROWVER;
    public static DbColumnFlags CACHEDEFERRED;
}
[FlagsAttribute]
public enum System.Data.SqlServerCe.DbInsertOptions : Enum {
    public int value__;
    public static DbInsertOptions KeepCurrentPosition;
    public static DbInsertOptions PositionOnInsertedRow;
}
[FlagsAttribute]
public enum System.Data.SqlServerCe.DbRangeOptions : Enum {
    public int value__;
    public static DbRangeOptions InclusiveStart;
    public static DbRangeOptions InclusiveEnd;
    public static DbRangeOptions ExclusiveStart;
    public static DbRangeOptions ExclusiveEnd;
    public static DbRangeOptions ExcludeNulls;
    public static DbRangeOptions Prefix;
    public static DbRangeOptions Match;
    public static DbRangeOptions Default;
}
[FlagsAttribute]
public enum System.Data.SqlServerCe.DbSeekOptions : Enum {
    public int value__;
    public static DbSeekOptions FirstEqual;
    public static DbSeekOptions LastEqual;
    public static DbSeekOptions AfterEqual;
    public static DbSeekOptions After;
    public static DbSeekOptions BeforeEqual;
    public static DbSeekOptions Before;
}
internal enum System.Data.SqlServerCe.DBStatus : Enum {
    public int value__;
    public static DBStatus S_OK;
    public static DBStatus E_BADACCESSOR;
    public static DBStatus E_CANTCONVERTVALUE;
    public static DBStatus S_ISNULL;
    public static DBStatus S_TRUNCATED;
    public static DBStatus E_SIGNMISMATCH;
    public static DBStatus E_DATAOVERFLOW;
    public static DBStatus E_CANTCREATE;
    public static DBStatus E_UNAVAILABLE;
    public static DBStatus E_PERMISSIONDENIED;
    public static DBStatus E_INTEGRITYVIOLATION;
    public static DBStatus E_SCHEMAVIOLATION;
    public static DBStatus E_BADSTATUS;
    public static DBStatus S_DEFAULT;
    public static DBStatus S_CELLEMPTY;
    public static DBStatus S_IGNORE;
    public static DBStatus E_DOESNOTEXIST;
    public static DBStatus E_INVALIDURL;
    public static DBStatus E_RESOURCELOCKED;
    public static DBStatus E_RESOURCEEXISTS;
    public static DBStatus E_CANNOTCOMPLETE;
    public static DBStatus E_VOLUMENOTFOUND;
    public static DBStatus E_OUTOFSPACE;
    public static DBStatus S_CANNOTDELETESOURCE;
    public static DBStatus E_READONLY;
    public static DBStatus E_RESOURCEOUTOFSCOPE;
    public static DBStatus S_ALREADYEXISTS;
    public static DBStatus E_CANCELED;
    public static DBStatus E_NOTCOLLECTION;
    public static DBStatus S_ROWSETCOLUMN;
}
internal class System.Data.SqlServerCe.DBTIMESTAMP : ValueType {
    public short year;
    public ushort month;
    public ushort day;
    public ushort hour;
    public ushort minute;
    public ushort second;
    public UInt32 fraction;
}
internal enum System.Data.SqlServerCe.DIRECTION : Enum {
    public int value__;
    public static DIRECTION MOVE_NEXT;
    public static DIRECTION MOVE_PREVIOUS;
    public static DIRECTION MOVE_FIRST;
    public static DIRECTION MOVE_LAST;
}
public enum System.Data.SqlServerCe.DropOption : Enum {
    public int value__;
    public static DropOption LeaveDatabase;
    public static DropOption DropDatabase;
    public static DropOption UnregisterSubscription;
}
internal enum System.Data.SqlServerCe.ENCRYPTIONMODE : Enum {
    public int value__;
    public static ENCRYPTIONMODE ENCRYPT_MODE_INVALID;
    public static ENCRYPTIONMODE ENCRYPT_MODE_PLATFORM_DEFAULT;
    public static ENCRYPTIONMODE ENCRYPT_MODE_ENGINE_DEFAULT;
}
public enum System.Data.SqlServerCe.ExchangeType : Enum {
    public int value__;
    public static ExchangeType None;
    public static ExchangeType Upload;
    public static ExchangeType BiDirectional;
}
internal static class System.Data.SqlServerCe.ExtensionMethods : object {
    private static string DataSqlServerCeEntityAssembly;
    private static string DataSqlServerCeAssembly;
    private static string DataEntityAssembly;
    private static string SystemDataCommonDbProviderServices_TypeName;
    internal static Type SystemDataCommonDbProviderServices_Type;
    private static string SqlCeProviderServices_TypeName;
    private static FieldInfo SqlCeProviderServices_Instance_FieldInfo;
    private static ExtensionMethods();
    [SecurityCriticalAttribute]
internal static object SystemDataSqlServerCeSqlCeProviderServices_Instance();
    [SecurityCriticalAttribute]
private static object SystemDataSqlServerCeSqlCeProviderServices_Instance_GetValue();
    private static string ConstructFullAssemblyName(string assemblyName);
    private static string GetFullAssemblyName(string assemblyName);
}
internal enum System.Data.SqlServerCe.FETCH : Enum {
    public int value__;
    public static FETCH UNKNOWN;
    public static FETCH FORWARD;
    public static FETCH BACKWARD;
}
internal class System.Data.SqlServerCe.FieldNameLookup : object {
    private Hashtable _fieldNameLookup;
    private String[] _fieldNames;
    private CompareInfo _compareInfo;
    private int _defaultLocaleID;
    private static FieldNameLookup();
    public FieldNameLookup(String[] fieldNames, int defaultLocaleID);
    public FieldNameLookup(IDataReader reader, int defaultLocaleID);
    public int GetOrdinal(string fieldName);
    public int IndexOfName(string fieldName);
    public int IndexOf(string fieldName);
    private int LinearIndexOf(string fieldName, CompareOptions compareOptions);
    private void GenerateLookup();
}
internal class System.Data.SqlServerCe.FlushFailureEventHandler : MulticastDelegate {
    public FlushFailureEventHandler(object object, IntPtr method);
    public virtual void Invoke(int hr, IntPtr pError);
    public virtual IAsyncResult BeginInvoke(int hr, IntPtr pError, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class System.Data.SqlServerCe.HashProvider : object {
    private static HashProvider();
    [SecurityCriticalAttribute]
internal static bool MatchHash(string filePath);
    private static bool ByteArrayEqual(Byte[] array1, Byte[] array2);
    [SecurityCriticalAttribute]
internal static Byte[] CalculateHash(string filePath);
}
[SecurityCriticalAttribute("1")]
internal class System.Data.SqlServerCe.HashSafeHandle : SafeHandleZeroOrMinusOneIsInvalid {
    private static HashSafeHandle();
    [ReliabilityContractAttribute("3", "2")]
[SecurityCriticalAttribute]
[SuppressUnmanagedCodeSecurityAttribute]
[SuppressUnmanagedCodeSecurityAttribute]
private static bool CryptDestroyHash(IntPtr hHash);
    protected virtual bool ReleaseHandle();
}
internal class System.Data.SqlServerCe.KeyValuePairsEnumerator`2 : object {
    private IEnumerator`1<KeyValuePair`2<TKey, TValue>> m_collection;
    public object Current { get; }
    private static KeyValuePairsEnumerator`2();
    public KeyValuePairsEnumerator`2(IEnumerator`1<KeyValuePair`2<TKey, TValue>> enumerator);
    public sealed virtual void Reset();
    public sealed virtual bool MoveNext();
    public sealed virtual object get_Current();
}
internal class System.Data.SqlServerCe.KeywordMapper : object {
    private static int _connectionOptions;
    private static Hashtable _keywordSynonymsMapping;
    private static String[] _validKeywords;
    private static Dictionary`2<string, Keywords> _keywords;
    private static Dictionary`2<string, string> _oledbAdoDotNetKeywordsMapping;
    public static Hashtable KeywordSynonymsMapping { get; }
    public static Dictionary`2<string, string> OledbAdoDotNetKeywordsMapping { get; }
    public static String[] ValidKeywords { get; }
    public static Dictionary`2<string, Keywords> KeywordsDictionary { get; }
    private static KeywordMapper();
    public static Hashtable get_KeywordSynonymsMapping();
    public static Dictionary`2<string, string> get_OledbAdoDotNetKeywordsMapping();
    public static String[] get_ValidKeywords();
    public static Dictionary`2<string, Keywords> get_KeywordsDictionary();
}
internal enum System.Data.SqlServerCe.Keywords : Enum {
    public int value__;
    public static Keywords AutoshrinkThreshold;
    public static Keywords CaseSensitive;
    public static Keywords DataSource;
    public static Keywords DefaultLockEscalation;
    public static Keywords DefaultLockTimeout;
    public static Keywords Encrypt;
    public static Keywords EncryptionMode;
    public static Keywords Enlist;
    public static Keywords FileAccessRetryTimeout;
    public static Keywords FileMode;
    public static Keywords FlushInterval;
    public static Keywords InitialLcid;
    public static Keywords MaxBufferSize;
    public static Keywords MaxDatabaseSize;
    public static Keywords Password;
    public static Keywords PersistSecurityInfo;
    public static Keywords TempFileMaxSize;
    public static Keywords TempFilePath;
    public static Keywords KeywordsCount;
}
internal static class System.Data.SqlServerCe.KillBitHelper : object {
    private static string KillBitRegKey;
    private static string SqlCeAssembly;
    private static string FwdLink;
    private static bool isKillBitted;
    [SecurityCriticalAttribute]
private static KillBitHelper();
    internal static void ThrowIfKillBitIsSet();
    [SecurityCriticalAttribute]
public static bool GetKillBit();
}
internal class System.Data.SqlServerCe.MEDBBINDING : ValueType {
    public int iOrdinal;
    public int obValue;
    public int obSize;
    public int obStatus;
    public IntPtr pObject;
    public int cbMaxLen;
    public UInt32 dwFlags;
    public SETYPE type;
    public UInt32 bPrecision;
    public UInt32 bScale;
    public int minor_pError;
}
internal class System.Data.SqlServerCe.MEDBKEYINFO : ValueType {
    public IntPtr pwszBaseColumnName;
    public UInt32 iOrdinal;
    public int isUnique;
    public int isKey;
    public int isReadOnly;
    public int isIdentity;
}
internal class System.Data.SqlServerCe.MEOPENINFO : ValueType {
    internal IntPtr pwszFileName;
    internal IntPtr pwszPassword;
    internal IntPtr pwszTempPath;
    internal int lcidLocale;
    internal int cbBufferPool;
    internal int fEncrypt;
    internal int dwAutoShrinkPercent;
    internal int dwFlushInterval;
    internal int cMaxPages;
    internal int cMaxTmpPages;
    internal int dwDefaultTimeout;
    internal int dwDefaultEscalation;
    internal SEOPENFLAGS dwFlags;
    internal int dwEncryptionMode;
    internal int dwLocaleFlags;
}
internal class System.Data.SqlServerCe.MetaData : object {
    internal UInt32 ordinal;
    internal UInt32 size;
    internal object value;
    internal bool isReadOnly;
    internal bool isRowVersion;
    internal bool isExpression;
    internal bool isIdentity;
    internal bool isUnique;
    internal bool isKey;
    internal bool isNullable;
    internal bool hasDefault;
    internal string baseTableName;
    internal string baseColumnName;
    internal SqlCeType typeMap;
    private SqlMetaData sqlMetaData;
    private object thisLock;
    private bool isFinalized;
    public SqlMetaData SqlMetaData { get; }
    public string ColumnName { get; }
    private static MetaData();
    public MetaData(string name, SqlCeType typeMap, byte precision, byte scale, long maxLength, string databaseName, string schemaName);
    public SqlMetaData get_SqlMetaData();
    public string get_ColumnName();
    public sealed virtual void Dispose();
    protected virtual void Finalize();
    [SecurityCriticalAttribute]
[SecurityTreatAsSafeAttribute]
private void Dispose(bool disposing);
}
internal static class System.Data.SqlServerCe.NativeMethods : object {
    private static int VersionMismatchKB;
    private static bool m_fTryLoadingNativeLibraries;
    private static NativeMethodsHelper NativeMethodsHelper;
    private static string ProcArchitecture;
    [SecurityCriticalAttribute]
private static NativeMethods();
    internal static bool Failed(int hr);
    [SecurityCriticalAttribute]
public static void CheckHRESULT(IntPtr pISSCEErrors, int hr);
    [SecurityCriticalAttribute]
internal static IntPtr MarshalStringToLPWSTR(string source);
    [SecurityCriticalAttribute]
internal static string GetMinorErrorMessage(int minorError);
    [SecurityCriticalAttribute]
[SecurityTreatAsSafeAttribute]
internal static void LoadNativeBinaries();
    [SecurityCriticalAttribute]
[SecurityTreatAsSafeAttribute]
public static bool IsValidBinary(string filename);
    private static void ThrowIfNativeLibraryNotLoaded();
    [SecurityCriticalAttribute]
internal static bool ValidateNativeBinary(string modulePath);
    [SecurityCriticalAttribute]
internal static bool LoadValidLibrary(string modulePath);
    [SecurityCriticalAttribute]
private static void ValidateCRT(string CRTPath);
    [SecurityCriticalAttribute]
internal static bool LoadNativeBinariesFromPrivateFolder(string privateInstall);
    [SecurityCriticalAttribute]
internal static void uwutil_ZeroMemory(IntPtr dest, int length);
    [SecurityCriticalAttribute]
internal static int GetSqlCeVersionInfo(IntPtr& pwszVersion);
    [SecurityCriticalAttribute]
internal static int GetNativeVersionInfo(Int32& bldMajor, Int32& bldMinor);
    [SecurityCriticalAttribute]
internal static int GetDatabaseInstanceID(IntPtr pStore, IntPtr& pwszGuidString, IntPtr pError);
    [SecurityCriticalAttribute]
internal static int GetEncryptionMode(IntPtr pStore, Int32& encryptionMode, IntPtr pError);
    [SecurityCriticalAttribute]
internal static int GetLocale(IntPtr pStore, Int32& locale, IntPtr pError);
    [SecurityCriticalAttribute]
internal static int GetLocaleFlags(IntPtr pStore, Int32& sortFlags, IntPtr pError);
    [SecurityCriticalAttribute]
internal static int OpenCursor(IntPtr pITransact, IntPtr pwszTableName, IntPtr pwszIndexName, IntPtr& pSeCursor, IntPtr pError);
    [SecurityCriticalAttribute]
internal static int GetValues(IntPtr pSeCursor, int seGetColumn, IntPtr prgBinding, int cDbBinding, IntPtr pData, IntPtr pError);
    [SecurityCriticalAttribute]
internal static int Read(IntPtr pSeqStream, Void* pBuffer, int bufferIndex, int byteCount, Int32& bytesRead, IntPtr pError);
    [SecurityCriticalAttribute]
internal static int ReadAt(IntPtr pLockBytes, int srcIndex, Void* pBuffer, int bufferIndex, int byteCount, Int32& bytesRead, IntPtr pError);
    [SecurityCriticalAttribute]
internal static int Seek(IntPtr pSeCursor, IntPtr pQpServices, IntPtr prgBinding, int cBinding, IntPtr pData, int cKeyValues, int dbSeekOptions, IntPtr pError);
    [SecurityCriticalAttribute]
internal static int SetRange(IntPtr pSeCursor, IntPtr pQpServices, IntPtr prgBinding, int cBinding, IntPtr pStartData, int cStartKeyValues, IntPtr pEndData, int cEndKeyValues, int dbRangeOptions, IntPtr pError);
    [SecurityCriticalAttribute]
internal static int SafeRelease(IntPtr& ppUnknown);
    [SecurityCriticalAttribute]
internal static int SafeDelete(IntPtr& ppInstance);
    [SecurityCriticalAttribute]
internal static int DeleteArray(IntPtr& ppInstance);
    [SecurityCriticalAttribute]
internal static int OpenStore(IntPtr pOpenInfo, IntPtr pfnOnFlushFailure, IntPtr& pStoreService, IntPtr& pStoreServer, IntPtr& pQpServices, IntPtr& pSeStore, IntPtr& pTx, IntPtr& pQpDatabase, IntPtr& pQpSession, IntPtr& pStoreEvents, IntPtr& pError);
    [SecurityCriticalAttribute]
internal static int CloseStore(IntPtr pSeStore);
    [SecurityCriticalAttribute]
internal static int CloseAndReleaseStore(IntPtr& pSeStore);
    [SecurityCriticalAttribute]
internal static int OpenTransaction(IntPtr pSeStore, IntPtr pQpDatabase, SEISOLATION isoLevel, IntPtr pQPConnSession, IntPtr& pTx, IntPtr& pQpSession, IntPtr pError);
    [SecurityCriticalAttribute]
internal static int CreateDatabase(IntPtr pOpenInfo, IntPtr& pError);
    [SecurityCriticalAttribute]
internal static int Rebuild(IntPtr pwszSrc, IntPtr pwszDst, IntPtr pwszTemp, IntPtr pwszPwd, IntPtr pwszPwdNew, int fEncrypt, SEFIXOPTION tyOption, int fSafeRepair, int lcid, int dstEncryptionMode, int localeFlags, IntPtr& pError);
    [SecurityCriticalAttribute]
internal static int CreateErrorInstance(IntPtr& pError);
    [SecurityCriticalAttribute]
internal static int uwutil_ConvertToDBTIMESTAMP(DBTIMESTAMP& pDbTimestamp, UInt32 dtTime, int dtDay);
    [SecurityCriticalAttribute]
internal static int uwutil_ConvertFromDBTIMESTAMP(DBTIMESTAMP pDbTimestamp, UInt32& dtTime, Int32& dtDay);
    [SecurityCriticalAttribute]
internal static void uwutil_SysFreeString(IntPtr p);
    [SecurityCriticalAttribute]
internal static UInt32 uwutil_ReleaseCOMPtr(IntPtr p);
    [SecurityCriticalAttribute]
internal static int uwutil_get_ErrorCount(IntPtr pIRDA);
    [SecurityCriticalAttribute]
internal static int uwutil_get_Error(IntPtr pIError, int errno, Int32& hResult, IntPtr& message, Int32& nativeError, IntPtr& source, Int32& numericParameter1, Int32& numericParameter2, Int32& numericParameter3, IntPtr& errorParameter1, IntPtr& errorParameter2, IntPtr& errorParameter3);
    [SecurityCriticalAttribute]
internal static int SetValues(IntPtr pQpServices, IntPtr pSeCursor, IntPtr prgBinding, int cDbBinding, IntPtr pData, IntPtr pError);
    [SecurityCriticalAttribute]
internal static int SetValue(IntPtr pSeCursor, int seSetColumn, Void* pBuffer, int ordinal, int size, IntPtr pError);
    [SecurityCriticalAttribute]
internal static int Prepare(IntPtr pSeCursor, SEPREPAREMODE mode, IntPtr pError);
    [SecurityCriticalAttribute]
internal static int InsertRecord(int fMoveTo, IntPtr pSeCursor, Int32& hBookmark, IntPtr pError);
    [SecurityCriticalAttribute]
internal static int UpdateRecord(IntPtr pSeCursor, IntPtr pError);
    [SecurityCriticalAttribute]
internal static int DeleteRecord(IntPtr pSeCursor, IntPtr pError);
    [SecurityCriticalAttribute]
internal static int GotoBookmark(IntPtr pSeCursor, int hBookmark, IntPtr pError);
    [SecurityCriticalAttribute]
internal static int GetContextErrorInfo(IntPtr pError, Int32& lNumber, Int32& lNativeError, IntPtr& pwszMessage, IntPtr& pwszSource, Int32& numPar1, Int32& numPar2, Int32& numPar3, IntPtr& pwszErr1, IntPtr& pwszErr2, IntPtr& pwszErr3);
    [SecurityCriticalAttribute]
internal static int GetContextErrorMessage(int dminorError, IntPtr& pwszMessage);
    [SecurityCriticalAttribute]
internal static int GetMinorError(IntPtr pError, Int32& lMinor);
    [SecurityCriticalAttribute]
internal static int GetBookmark(IntPtr pSeCursor, Int32& hBookmark, IntPtr pError);
    [SecurityCriticalAttribute]
internal static int GetColumnInfo(IntPtr pIUnknown, Int32& columnCount, IntPtr& prgColumnInfo, IntPtr pError);
    [SecurityCriticalAttribute]
internal static int SetColumnInfo(IntPtr pITransact, string TableName, string ColumnName, SECOLUMNINFO seColumnInfo, SECOLUMNATTRIB seColAttrib, IntPtr pError);
    [SecurityCriticalAttribute]
internal static int SetTableInfoAsSystem(IntPtr pITransact, string TableName, IntPtr pError);
    [SecurityCriticalAttribute]
internal static int GetParameterInfo(IntPtr pQpCommand, UInt32& columnCount, IntPtr& prgParamInfo, IntPtr pError);
    [SecurityCriticalAttribute]
internal static int GetIndexColumnOrdinals(IntPtr pSeCursor, IntPtr pwszIndex, UInt32& cColumns, IntPtr& priOrdinals, IntPtr pError);
    [SecurityCriticalAttribute]
internal static int GetKeyInfo(IntPtr pIUnknown, IntPtr pTx, string pwszBaseTable, IntPtr prgDbKeyInfo, int cDbKeyInfo, IntPtr pError);
    [SecurityCriticalAttribute]
internal static int CreateCommand(IntPtr pQpSession, IntPtr& pQpCommand, IntPtr pError);
    [SecurityCriticalAttribute]
internal static int CompileQueryPlan(IntPtr pQpCommand, string pwszCommandText, ResultSetOptions options, IntPtr[] pParamNames, IntPtr prgBinding, int cDbBinding, IntPtr& pQpPlan, IntPtr pError);
    [SecurityCriticalAttribute]
internal static int Move(IntPtr pSeCursor, DIRECTION direction, IntPtr pError);
    [SecurityCriticalAttribute]
internal static int AbortTransaction(IntPtr pTx, IntPtr pError);
    [SecurityCriticalAttribute]
internal static int CommitTransaction(IntPtr pTx, CommitMode mode, IntPtr pError);
    [SecurityCriticalAttribute]
internal static int SetTransactionFlag(IntPtr pITransact, SeTransactionFlags seTxFlag, bool fEnable, IntPtr pError);
    [SecurityCriticalAttribute]
internal static int GetTransactionFlags(IntPtr pITransact, SeTransactionFlags& seTxFlags);
    [SecurityCriticalAttribute]
internal static int GetTrackingContext(IntPtr pITransact, IntPtr& pGuidTrackingContext, IntPtr pError);
    [SecurityCriticalAttribute]
internal static int SetTrackingContext(IntPtr pITransact, IntPtr& pGuidTrackingContext, IntPtr pError);
    [SecurityCriticalAttribute]
internal static int GetTransactionBsn(IntPtr pITransact, Int64& pTransactionBsn, IntPtr pError);
    [SecurityCriticalAttribute]
internal static int InitChangeTracking(IntPtr pITransact, IntPtr& pTracking, IntPtr& pError);
    [SecurityCriticalAttribute]
internal static int ExitChangeTracking(IntPtr& pTracking, IntPtr& pError);
    [SecurityCriticalAttribute]
internal static int EnableChangeTracking(IntPtr pTracking, string TableName, SETRACKINGTYPE seTrackingType, SEOCSTRACKOPTIONS seTrackOpts, IntPtr pError);
    [SecurityCriticalAttribute]
internal static int GetTrackingOptions(IntPtr pTracking, string TableName, SEOCSTRACKOPTIONSV2& iTrackingOptions, IntPtr pError);
    [SecurityCriticalAttribute]
internal static int DisableChangeTracking(IntPtr pTracking, string TableName, IntPtr pError);
    [SecurityCriticalAttribute]
internal static int IsTableChangeTracked(IntPtr pTracking, string TableName, Boolean& fTableTracked, IntPtr pError);
    [SecurityCriticalAttribute]
internal static int GetChangeTrackingInfo(IntPtr pTracking, string TableName, SEOCSTRACKOPTIONS& trackOptions, SETRACKINGTYPE& trackType, Int64& trackOrdinal, IntPtr pError);
    [SecurityCriticalAttribute]
internal static int CleanupTrackingMetadata(IntPtr pTracking, string TableName, int retentionPeriodInDays, long cutoffTxCsn, long leastTxCsn, IntPtr pError);
    [SecurityCriticalAttribute]
internal static int CleanupTransactionData(IntPtr pTracking, int iRetentionPeriodInDays, long ullCutoffTransactionCsn, IntPtr pError);
    [SecurityCriticalAttribute]
internal static int CleanupTombstoneData(IntPtr pTracking, string TableName, int iRetentionPeriodInDays, long ullCutoffTransactionCsn, IntPtr pError);
    [SecurityCriticalAttribute]
internal static int GetCurrentTrackingTxCsn(IntPtr pTracking, Int64& txCsn, IntPtr pError);
    [SecurityCriticalAttribute]
internal static int GetCurrentTrackingTxBsn(IntPtr pTracking, Int64& txBsn, IntPtr pError);
    [SecurityCriticalAttribute]
internal static int DllAddRef();
    [SecurityCriticalAttribute]
internal static int DllRelease();
    [SecurityCriticalAttribute]
internal static int ClearErrorInfo(IntPtr pError);
    [SecurityCriticalAttribute]
internal static int ExecuteQueryPlan(IntPtr pTx, IntPtr pQpServices, IntPtr pQpCommand, IntPtr pQpPlan, IntPtr prgBinding, int cDbBinding, IntPtr pData, Int32& recordsAffected, ResultSetOptions& cursorCapabilities, IntPtr& pSeCursor, Int32& fIsBaseTableCursor, IntPtr pError);
    internal static int uwrda_put_ControlReceiveTimeout(IntPtr pIRda, int ControlReceiveTimeout);
    internal static int uwrda_get_ConnectionRetryTimeout(IntPtr pIRda, UInt16& ConnectionRetryTimeout);
    internal static int uwrda_put_ConnectionRetryTimeout(IntPtr pIRda, ushort ConnectionRetryTimeout);
    internal static int uwrda_get_CompressionLevel(IntPtr pIRda, UInt16& CompressionLevel);
    internal static int uwrda_put_CompressionLevel(IntPtr pIRda, ushort CompressionLevel);
    internal static int uwrda_get_ConnectionManager(IntPtr pIRda, Boolean& ConnectionManager);
    internal static int uwrda_put_ConnectionManager(IntPtr pIRda, bool ConnectionManager);
    internal static int uwrda_Pull(IntPtr pIRda, string zLocalTableName, string zSqlSelectString, string zOleDbConnectionString, RdaTrackOption trackOption, string zErrorTable);
    internal static int uwrda_Push(IntPtr pIRda, string zLocalTableName, string zOleDbConnectionString, RdaBatchOption batchOption);
    internal static int uwrda_SubmitSql(IntPtr pIRda, string zSqlString, string zOleDbConnectionString);
    internal static int uwrda_get_InternetLogin(IntPtr pIRda, IntPtr& rbz);
    internal static int uwrda_put_InternetLogin(IntPtr pIRda, string InternetLogin);
    internal static int uwrda_get_InternetPassword(IntPtr pIRda, IntPtr& rbz);
    internal static int uwrda_put_InternetPassword(IntPtr pIRda, string InternetPassword);
    internal static int uwrda_get_InternetProxyServer(IntPtr pIRda, IntPtr& rbz);
    internal static int uwrda_put_InternetProxyServer(IntPtr pIRda, string InternetProxyServer);
    internal static int uwrda_get_InternetProxyLogin(IntPtr pIRda, IntPtr& rbz);
    internal static int uwrda_put_InternetProxyLogin(IntPtr pIRda, string InternetProxyLogin);
    internal static int uwrda_get_InternetProxyPassword(IntPtr pIRda, IntPtr& rbz);
    internal static int uwrda_put_InternetProxyPassword(IntPtr pIRda, string InternetProxyPassword);
    internal static int uwrda_get_ConnectTimeout(IntPtr pIRda, Int32& connectTimeout);
    internal static int uwrda_put_ConnectTimeout(IntPtr pIRda, int connectTimeout);
    internal static int uwrda_get_SendTimeout(IntPtr pIRda, Int32& SendTimeout);
    internal static int uwrda_put_SendTimeout(IntPtr pIRda, int SendTimeout);
    internal static int uwrda_get_ReceiveTimeout(IntPtr pIRda, Int32& ReceiveTimeout);
    internal static int uwrda_put_ReceiveTimeout(IntPtr pIRda, int ReceiveTimeout);
    internal static int uwrda_get_DataSendTimeout(IntPtr pIRda, Int32& DataSendTimeout);
    internal static int uwrda_put_DataSendTimeout(IntPtr pIRda, int DataSendTimeout);
    internal static int uwrda_get_DataReceiveTimeout(IntPtr pIRda, Int32& DataReceiveTimeout);
    internal static int uwrda_put_DataReceiveTimeout(IntPtr pIRda, int DataReceiveTimeout);
    internal static int uwrda_get_ControlSendTimeout(IntPtr pIRda, Int32& ControlSendTimeout);
    internal static int uwrda_put_ControlSendTimeout(IntPtr pIRda, int ControlSendTimeout);
    internal static int uwrda_get_ControlReceiveTimeout(IntPtr pIRda, Int32& ControlReceiveTimeout);
    internal static int uwrda_RemoteDataAccess(IntPtr& pIRda, IntPtr& pCreationIError);
    internal static int uwrda_get_ErrorPointer(IntPtr pIRda, IntPtr& pIErrors);
    internal static int uwrda_get_LocalConnectionString(IntPtr pIRda, IntPtr& rbz);
    internal static int uwrda_put_LocalConnectionString(IntPtr pIRda, string zLocalConnectionString);
    internal static int uwrda_get_InternetUrl(IntPtr pIRda, IntPtr& rbz);
    internal static int uwrda_put_InternetUrl(IntPtr pIRda, string InternetUrl);
    internal static int uwrepl_put_ConnectionRetryTimeout(IntPtr pIReplication, ushort ConnectionRetryTimeout);
    internal static int uwrepl_get_CompressionLevel(IntPtr pIReplication, UInt16& CompressionLevel);
    internal static int uwrepl_put_CompressionLevel(IntPtr pIReplication, ushort CompressionLevel);
    internal static int uwrepl_get_ConnectionManager(IntPtr pIReplication, Boolean& ConnectionManager);
    internal static int uwrepl_put_ConnectionManager(IntPtr pIReplication, bool ConnectionManager);
    internal static int uwrepl_get_SnapshotTransferType(IntPtr pIReplication, SnapshotTransferType& SnapshotTransferType);
    internal static int uwrepl_put_SnapshotTransferType(IntPtr pIReplication, SnapshotTransferType SnapshotTransferType);
    internal static int uwrepl_AddSubscription(IntPtr pIReplication, AddOption addOption);
    internal static int uwrepl_DropSubscription(IntPtr pIReplication, DropOption dropOption);
    internal static int uwrepl_ReinitializeSubscription(IntPtr pIReplication, bool uploadBeforeReinit);
    internal static int uwrepl_Initialize(IntPtr pIReplication);
    internal static int uwrepl_Run(IntPtr pIReplication);
    internal static int uwrepl_Terminate(IntPtr pIReplication);
    internal static int uwrepl_Cancel(IntPtr pIReplication);
    internal static int uwrepl_LoadProperties(IntPtr pIReplication, Boolean& PasswordsLoaded);
    internal static int uwrepl_SaveProperties(IntPtr pIReplication);
    internal static int uwrepl_get_Subscriber(IntPtr pIReplication, IntPtr& rbz);
    internal static int uwrepl_put_Subscriber(IntPtr pIReplication, string Subscriber);
    internal static int uwrepl_get_SubscriberConnectionString(IntPtr pIReplication, IntPtr& rbz);
    internal static int uwrepl_put_SubscriberConnectionString(IntPtr pIReplication, string SubscriberConnectionString);
    internal static int uwrepl_get_SubscriberChanges(IntPtr pIReplication, Int32& SubscriberChanges);
    internal static int uwrepl_get_SubscriberConflicts(IntPtr pIReplication, Int32& SubscriberConflicts);
    internal static int uwrepl_get_Validate(IntPtr pIReplication, ValidateType& Validate);
    internal static int uwrepl_put_Validate(IntPtr pIReplication, ValidateType Validate);
    internal static int uwrepl_get_ConnectTimeout(IntPtr pIReplication, Int32& connectTimeout);
    internal static int uwrepl_put_ConnectTimeout(IntPtr pIReplication, int connectTimeout);
    internal static int uwrepl_get_SendTimeout(IntPtr pIReplication, Int32& SendTimeout);
    internal static int uwrepl_put_SendTimeout(IntPtr pIReplication, int SendTimeout);
    internal static int uwrepl_get_ReceiveTimeout(IntPtr pIReplication, Int32& ReceiveTimeout);
    internal static int uwrepl_put_ReceiveTimeout(IntPtr pIReplication, int ReceiveTimeout);
    internal static int uwrepl_get_DataSendTimeout(IntPtr pIReplication, Int32& DataSendTimeout);
    internal static int uwrepl_put_DataSendTimeout(IntPtr pIReplication, int DataSendTimeout);
    internal static int uwrepl_get_DataReceiveTimeout(IntPtr pIReplication, Int32& DataReceiveTimeout);
    internal static int uwrepl_put_DataReceiveTimeout(IntPtr pIReplication, int DataReceiveTimeout);
    internal static int uwrepl_get_ControlSendTimeout(IntPtr pIReplication, Int32& ControlSendTimeout);
    internal static int uwrepl_put_ControlSendTimeout(IntPtr pIReplication, int ControlSendTimeout);
    internal static int uwrepl_get_ControlReceiveTimeout(IntPtr pIReplication, Int32& ControlReceiveTimeout);
    internal static int uwrepl_put_ControlReceiveTimeout(IntPtr pIReplication, int ControlReceiveTimeout);
    internal static int uwrepl_get_ConnectionRetryTimeout(IntPtr pIReplication, UInt16& ConnectionRetryTimeout);
    internal static int uwrepl_put_LoginTimeout(IntPtr pIReplication, ushort LoginTimeout);
    internal static int uwrepl_get_ProfileName(IntPtr pIReplication, IntPtr& rbz);
    internal static int uwrepl_put_ProfileName(IntPtr pIReplication, string ProfileName);
    internal static int uwrepl_get_Publisher(IntPtr pIReplication, IntPtr& rbz);
    internal static int uwrepl_put_Publisher(IntPtr pIReplication, string Publisher);
    internal static int uwrepl_get_PublisherNetwork(IntPtr pIReplication, NetworkType& PublisherNetwork);
    internal static int uwrepl_put_PublisherNetwork(IntPtr pIReplication, NetworkType PublisherNetwork);
    internal static int uwrepl_get_PublisherAddress(IntPtr pIReplication, IntPtr& rbz);
    internal static int uwrepl_put_PublisherAddress(IntPtr pIReplication, string PublisherAddress);
    internal static int uwrepl_get_PublisherSecurityMode(IntPtr pIReplication, SecurityType& PublisherSecurityMode);
    internal static int uwrepl_put_PublisherSecurityMode(IntPtr pIReplication, SecurityType PublisherSecurityMode);
    internal static int uwrepl_get_PublisherLogin(IntPtr pIReplication, IntPtr& rbz);
    internal static int uwrepl_put_PublisherLogin(IntPtr pIReplication, string PublisherLogin);
    internal static int uwrepl_get_PublisherPassword(IntPtr pIReplication, IntPtr& rbz);
    internal static int uwrepl_put_PublisherPassword(IntPtr pIReplication, string PublisherPassword);
    internal static int uwrepl_get_PublisherDatabase(IntPtr pIReplication, IntPtr& rbz);
    internal static int uwrepl_put_PublisherDatabase(IntPtr pIReplication, string PublisherDatabase);
    internal static int uwrepl_get_Publication(IntPtr pIReplication, IntPtr& rbz);
    internal static int uwrepl_put_Publication(IntPtr pIReplication, string Publication);
    internal static int uwrepl_get_PublisherChanges(IntPtr pIReplication, Int32& PublisherChanges);
    internal static int uwrepl_get_PublisherConflicts(IntPtr pIReplication, Int32& PublisherConflicts);
    internal static int uwrepl_get_QueryTimeout(IntPtr pIReplication, UInt16& QueryTimeout);
    internal static int uwrepl_put_QueryTimeout(IntPtr pIReplication, ushort QueryTimeout);
    internal static int uwrepl_get_DistributorSecurityMode(IntPtr pIReplication, SecurityType& DistributorSecurityMode);
    internal static int uwrepl_put_DistributorSecurityMode(IntPtr pIReplication, SecurityType DistributorSecurityMode);
    internal static int uwrepl_get_DistributorLogin(IntPtr pIReplication, IntPtr& rbz);
    internal static int uwrepl_put_DistributorLogin(IntPtr pIReplication, string DistributorLogin);
    internal static int uwrepl_get_DistributorPassword(IntPtr pIReplication, IntPtr& rbz);
    internal static int uwrepl_put_DistributorPassword(IntPtr pIReplication, string DistributorPassword);
    internal static int uwrepl_get_ExchangeType(IntPtr pIReplication, ExchangeType& ExchangeType);
    internal static int uwrepl_put_ExchangeType(IntPtr pIReplication, ExchangeType ExchangeType);
    internal static int uwrepl_get_HostName(IntPtr pIReplication, IntPtr& rbz);
    internal static int uwrepl_put_HostName(IntPtr pIReplication, string HostName);
    internal static int uwrepl_get_InternetUrl(IntPtr pIReplication, IntPtr& rbz);
    internal static int uwrepl_put_InternetUrl(IntPtr pIReplication, string InternetUrl);
    internal static int uwrepl_get_InternetLogin(IntPtr pIReplication, IntPtr& rbz);
    internal static int uwrepl_put_InternetLogin(IntPtr pIReplication, string InternetLogin);
    internal static int uwrepl_get_InternetPassword(IntPtr pIReplication, IntPtr& rbz);
    internal static int uwrepl_put_InternetPassword(IntPtr pIReplication, string InternetPassword);
    internal static int uwrepl_get_InternetProxyServer(IntPtr pIReplication, IntPtr& rbz);
    internal static int uwrepl_put_InternetProxyServer(IntPtr pIReplication, string InternetProxyServer);
    internal static int uwrepl_get_InternetProxyLogin(IntPtr pIReplication, IntPtr& rbz);
    internal static int uwrepl_put_InternetProxyLogin(IntPtr pIReplication, string InternetProxyLogin);
    internal static int uwrepl_get_InternetProxyPassword(IntPtr pIReplication, IntPtr& rbz);
    internal static int uwrepl_put_InternetProxyPassword(IntPtr pIReplication, string InternetProxyPassword);
    internal static int uwrepl_get_LoginTimeout(IntPtr pIReplication, UInt16& LoginTimeout);
    internal static int uwrepl_Replication(IntPtr& pIReplication, IntPtr& pCreationIError);
    internal static int uwrepl_get_ErrorPointer(IntPtr pIReplication, IntPtr& pIErrors);
    internal static int uwrepl_get_Distributor(IntPtr pIReplication, IntPtr& rbz);
    internal static int uwrepl_put_Distributor(IntPtr pIReplication, string Distributor);
    internal static int uwrepl_get_PostSyncCleanup(IntPtr pIReplication, Int16& iCleanupType);
    internal static int uwrepl_put_PostSyncCleanup(IntPtr pIReplication, short iCleanupType);
    internal static int uwrepl_get_DistributorNetwork(IntPtr pIReplication, NetworkType& DistributorNetwork);
    internal static int uwrepl_put_DistributorNetwork(IntPtr pIReplication, NetworkType DistributorNetwork);
    internal static int uwrepl_get_DistributorAddress(IntPtr pIReplication, IntPtr& rbz);
    internal static int uwrepl_put_DistributorAddress(IntPtr pIReplication, string DistributorAddress);
    internal static int uwrepl_AsyncReplication(IntPtr pIReplication, IntPtr& pAsyncIReplication);
    internal static int uwrepl_WaitForNextStatusReport(IntPtr pAsyncReplication, SyncStatus& pSyncStatus, IntPtr& rbzTableName, Int32& pPrecentCompleted, Boolean& pCompleted);
    internal static int uwrepl_GetSyncResult(IntPtr pIReplication, Int32& pHr);
}
internal class System.Data.SqlServerCe.NativeMethodsHelper : object {
    private UnmanagedLibraryHelper assemblyHelper;
    [SecurityCriticalAttribute]
private delegate_uwutil_ZeroMemory _uwutil_ZeroMemory;
    [SecurityCriticalAttribute]
private delegate_ME_GetSqlCeVersionInfo _ME_GetSqlCeVersionInfo;
    [SecurityCriticalAttribute]
private delegate_ME_GetNativeVersionInfo _ME_GetNativeVersionInfo;
    [SecurityCriticalAttribute]
private delegate_ME_GetDatabaseInstanceID _ME_GetDatabaseInstanceID;
    [SecurityCriticalAttribute]
private delegate_ME_GetEncryptionMode _ME_GetEncryptionMode;
    [SecurityCriticalAttribute]
private delegate_ME_GetLocale _ME_GetLocale;
    [SecurityCriticalAttribute]
private delegate_ME_GetLocaleFlags _ME_GetLocaleFlags;
    [SecurityCriticalAttribute]
private delegate_ME_OpenCursor _ME_OpenCursor;
    [SecurityCriticalAttribute]
private delegate_ME_GetValues _ME_GetValues;
    [SecurityCriticalAttribute]
private delegate_ME_Read _ME_Read;
    [SecurityCriticalAttribute]
private delegate_ME_ReadAt _ME_ReadAt;
    [SecurityCriticalAttribute]
private delegate_ME_Seek _ME_Seek;
    [SecurityCriticalAttribute]
private delegate_ME_SetRange _ME_SetRange;
    [SecurityCriticalAttribute]
private delegate_ME_SafeRelease _ME_SafeRelease;
    [SecurityCriticalAttribute]
private delegate_ME_SafeDelete _ME_SafeDelete;
    [SecurityCriticalAttribute]
private delegate_ME_DeleteArray _ME_DeleteArray;
    [SecurityCriticalAttribute]
private delegate_ME_OpenStore _ME_OpenStore;
    [SecurityCriticalAttribute]
private delegate_ME_CloseStore _ME_CloseStore;
    [SecurityCriticalAttribute]
private delegate_ME_CloseAndReleaseStore _ME_CloseAndReleaseStore;
    [SecurityCriticalAttribute]
private delegate_ME_OpenTransaction _ME_OpenTransaction;
    [SecurityCriticalAttribute]
private delegate_ME_CreateDatabase _ME_CreateDatabase;
    [SecurityCriticalAttribute]
private delegate_ME_Rebuild _ME_Rebuild;
    [SecurityCriticalAttribute]
private delegate_ME_CreateErrorInstance _ME_CreateErrorInstance;
    [SecurityCriticalAttribute]
private delegate_uwutil_ConvertToDBTIMESTAMP _uwutil_ConvertToDBTIMESTAMP;
    [SecurityCriticalAttribute]
private delegate_uwutil_ConvertFromDBTIMESTAMP _uwutil_ConvertFromDBTIMESTAMP;
    [SecurityCriticalAttribute]
private delegate_uwutil_SysFreeString _uwutil_SysFreeString;
    [SecurityCriticalAttribute]
private delegate_uwutil_ReleaseCOMPtr _uwutil_ReleaseCOMPtr;
    [SecurityCriticalAttribute]
private delegate_uwutil_get_ErrorCount _uwutil_get_ErrorCount;
    [SecurityCriticalAttribute]
private delegate_uwutil_get_Error _uwutil_get_Error;
    [SecurityCriticalAttribute]
private delegate_ME_SetValues _ME_SetValues;
    [SecurityCriticalAttribute]
private delegate_ME_SetValue _ME_SetValue;
    [SecurityCriticalAttribute]
private delegate_ME_Prepare _ME_Prepare;
    [SecurityCriticalAttribute]
private delegate_ME_InsertRecord _ME_InsertRecord;
    [SecurityCriticalAttribute]
private delegate_ME_UpdateRecord _ME_UpdateRecord;
    [SecurityCriticalAttribute]
private delegate_ME_DeleteRecord _ME_DeleteRecord;
    [SecurityCriticalAttribute]
private delegate_ME_GotoBookmark _ME_GotoBookmark;
    [SecurityCriticalAttribute]
private delegate_ME_GetContextErrorInfo _ME_GetContextErrorInfo;
    [SecurityCriticalAttribute]
private delegate_ME_GetContextErrorMessage _ME_GetContextErrorMessage;
    [SecurityCriticalAttribute]
private delegate_ME_GetMinorError _ME_GetMinorError;
    [SecurityCriticalAttribute]
private delegate_ME_GetBookmark _ME_GetBookmark;
    [SecurityCriticalAttribute]
private delegate_ME_GetColumnInfo _ME_GetColumnInfo;
    [SecurityCriticalAttribute]
private delegate_ME_SetColumnInfo _ME_SetColumnInfo;
    [SecurityCriticalAttribute]
private delegate_ME_SetTableInfoAsSystem _ME_SetTableInfoAsSystem;
    [SecurityCriticalAttribute]
private delegate_ME_GetParameterInfo _ME_GetParameterInfo;
    [SecurityCriticalAttribute]
private delegate_ME_GetIndexColumnOrdinals _ME_GetIndexColumnOrdinals;
    [SecurityCriticalAttribute]
private delegate_ME_GetKeyInfo _ME_GetKeyInfo;
    [SecurityCriticalAttribute]
private delegate_ME_CreateCommand _ME_CreateCommand;
    [SecurityCriticalAttribute]
private delegate_ME_CompileQueryPlan _ME_CompileQueryPlan;
    [SecurityCriticalAttribute]
private delegate_ME_Move _ME_Move;
    [SecurityCriticalAttribute]
private delegate_ME_AbortTransaction _ME_AbortTransaction;
    [SecurityCriticalAttribute]
private delegate_ME_CommitTransaction _ME_CommitTransaction;
    [SecurityCriticalAttribute]
private delegate_ME_SetTransactionFlag _ME_SetTransactionFlag;
    [SecurityCriticalAttribute]
private delegate_ME_GetTransactionFlags _ME_GetTransactionFlags;
    [SecurityCriticalAttribute]
private delegate_ME_GetTrackingContext _ME_GetTrackingContext;
    [SecurityCriticalAttribute]
private delegate_ME_SetTrackingContext _ME_SetTrackingContext;
    [SecurityCriticalAttribute]
private delegate_ME_GetTransactionBsn _ME_GetTransactionBsn;
    [SecurityCriticalAttribute]
private delegate_ME_InitChangeTracking _ME_InitChangeTracking;
    [SecurityCriticalAttribute]
private delegate_ME_ExitChangeTracking _ME_ExitChangeTracking;
    [SecurityCriticalAttribute]
private delegate_ME_EnableChangeTracking _ME_EnableChangeTracking;
    [SecurityCriticalAttribute]
private delegate_ME_GetTrackingOptions _ME_GetTrackingOptions;
    [SecurityCriticalAttribute]
private delegate_ME_DisableChangeTracking _ME_DisableChangeTracking;
    [SecurityCriticalAttribute]
private delegate_ME_IsTableChangeTracked _ME_IsTableChangeTracked;
    [SecurityCriticalAttribute]
private delegate_ME_GetChangeTrackingInfo _ME_GetChangeTrackingInfo;
    [SecurityCriticalAttribute]
private delegate_ME_CleanupTrackingMetadata _ME_CleanupTrackingMetadata;
    [SecurityCriticalAttribute]
private delegate_ME_CleanupTransactionData _ME_CleanupTransactionData;
    [SecurityCriticalAttribute]
private delegate_ME_CleanupTombstoneData _ME_CleanupTombstoneData;
    [SecurityCriticalAttribute]
private delegate_ME_GetCurrentTrackingTxCsn _ME_GetCurrentTrackingTxCsn;
    [SecurityCriticalAttribute]
private delegate_ME_GetCurrentTrackingTxBsn _ME_GetCurrentTrackingTxBsn;
    [SecurityCriticalAttribute]
private delegate_DllRelease _DllRelease;
    [SecurityCriticalAttribute]
private delegate_DllAddRef _DllAddRef;
    [SecurityCriticalAttribute]
private delegate_ME_ClearErrorInfo _ME_ClearErrorInfo;
    [SecurityCriticalAttribute]
private delegate_ME_ExecuteQueryPlan _ME_ExecuteQueryPlan;
    private delegate_uwrda_put_ControlReceiveTimeout _uwrda_put_ControlReceiveTimeout;
    private delegate_uwrda_get_ConnectionRetryTimeout _uwrda_get_ConnectionRetryTimeout;
    private delegate_uwrda_put_ConnectionRetryTimeout _uwrda_put_ConnectionRetryTimeout;
    private delegate_uwrda_get_CompressionLevel _uwrda_get_CompressionLevel;
    private delegate_uwrda_put_CompressionLevel _uwrda_put_CompressionLevel;
    private delegate_uwrda_get_ConnectionManager _uwrda_get_ConnectionManager;
    private delegate_uwrda_put_ConnectionManager _uwrda_put_ConnectionManager;
    private delegate_uwrda_Pull _uwrda_Pull;
    private delegate_uwrda_Push _uwrda_Push;
    private delegate_uwrda_SubmitSql _uwrda_SubmitSql;
    private delegate_uwrda_get_InternetLogin _uwrda_get_InternetLogin;
    private delegate_uwrda_put_InternetLogin _uwrda_put_InternetLogin;
    private delegate_uwrda_get_InternetPassword _uwrda_get_InternetPassword;
    private delegate_uwrda_put_InternetPassword _uwrda_put_InternetPassword;
    private delegate_uwrda_get_InternetProxyServer _uwrda_get_InternetProxyServer;
    private delegate_uwrda_put_InternetProxyServer _uwrda_put_InternetProxyServer;
    private delegate_uwrda_get_InternetProxyLogin _uwrda_get_InternetProxyLogin;
    private delegate_uwrda_put_InternetProxyLogin _uwrda_put_InternetProxyLogin;
    private delegate_uwrda_get_InternetProxyPassword _uwrda_get_InternetProxyPassword;
    private delegate_uwrda_put_InternetProxyPassword _uwrda_put_InternetProxyPassword;
    private delegate_uwrda_get_ConnectTimeout _uwrda_get_ConnectTimeout;
    private delegate_uwrda_put_ConnectTimeout _uwrda_put_ConnectTimeout;
    private delegate_uwrda_get_SendTimeout _uwrda_get_SendTimeout;
    private delegate_uwrda_put_SendTimeout _uwrda_put_SendTimeout;
    private delegate_uwrda_get_ReceiveTimeout _uwrda_get_ReceiveTimeout;
    private delegate_uwrda_put_ReceiveTimeout _uwrda_put_ReceiveTimeout;
    private delegate_uwrda_get_DataSendTimeout _uwrda_get_DataSendTimeout;
    private delegate_uwrda_put_DataSendTimeout _uwrda_put_DataSendTimeout;
    private delegate_uwrda_get_DataReceiveTimeout _uwrda_get_DataReceiveTimeout;
    private delegate_uwrda_put_DataReceiveTimeout _uwrda_put_DataReceiveTimeout;
    private delegate_uwrda_get_ControlSendTimeout _uwrda_get_ControlSendTimeout;
    private delegate_uwrda_put_ControlSendTimeout _uwrda_put_ControlSendTimeout;
    private delegate_uwrda_get_ControlReceiveTimeout _uwrda_get_ControlReceiveTimeout;
    private delegate_uwrda_RemoteDataAccess _uwrda_RemoteDataAccess;
    private delegate_uwrda_get_ErrorPointer _uwrda_get_ErrorPointer;
    private delegate_uwrda_get_LocalConnectionString _uwrda_get_LocalConnectionString;
    private delegate_uwrda_put_LocalConnectionString _uwrda_put_LocalConnectionString;
    private delegate_uwrda_get_InternetUrl _uwrda_get_InternetUrl;
    private delegate_uwrda_put_InternetUrl _uwrda_put_InternetUrl;
    private delegate_uwrepl_put_ConnectionRetryTimeout _uwrepl_put_ConnectionRetryTimeout;
    private delegate_uwrepl_get_CompressionLevel _uwrepl_get_CompressionLevel;
    private delegate_uwrepl_put_CompressionLevel _uwrepl_put_CompressionLevel;
    private delegate_uwrepl_get_ConnectionManager _uwrepl_get_ConnectionManager;
    private delegate_uwrepl_put_ConnectionManager _uwrepl_put_ConnectionManager;
    private delegate_uwrepl_get_SnapshotTransferType _uwrepl_get_SnapshotTransferType;
    private delegate_uwrepl_put_SnapshotTransferType _uwrepl_put_SnapshotTransferType;
    private delegate_uwrepl_AddSubscription _uwrepl_AddSubscription;
    private delegate_uwrepl_DropSubscription _uwrepl_DropSubscription;
    private delegate_uwrepl_ReinitializeSubscription _uwrepl_ReinitializeSubscription;
    private delegate_uwrepl_Initialize _uwrepl_Initialize;
    private delegate_uwrepl_Run _uwrepl_Run;
    private delegate_uwrepl_Terminate _uwrepl_Terminate;
    private delegate_uwrepl_Cancel _uwrepl_Cancel;
    private delegate_uwrepl_LoadProperties _uwrepl_LoadProperties;
    private delegate_uwrepl_SaveProperties _uwrepl_SaveProperties;
    private delegate_uwrepl_get_Subscriber _uwrepl_get_Subscriber;
    private delegate_uwrepl_put_Subscriber _uwrepl_put_Subscriber;
    private delegate_uwrepl_get_SubscriberConnectionString _uwrepl_get_SubscriberConnectionString;
    private delegate_uwrepl_put_SubscriberConnectionString _uwrepl_put_SubscriberConnectionString;
    private delegate_uwrepl_get_SubscriberChanges _uwrepl_get_SubscriberChanges;
    private delegate_uwrepl_get_SubscriberConflicts _uwrepl_get_SubscriberConflicts;
    private delegate_uwrepl_get_Validate _uwrepl_get_Validate;
    private delegate_uwrepl_put_Validate _uwrepl_put_Validate;
    private delegate_uwrepl_get_ConnectTimeout _uwrepl_get_ConnectTimeout;
    private delegate_uwrepl_put_ConnectTimeout _uwrepl_put_ConnectTimeout;
    private delegate_uwrepl_get_SendTimeout _uwrepl_get_SendTimeout;
    private delegate_uwrepl_put_SendTimeout _uwrepl_put_SendTimeout;
    private delegate_uwrepl_get_ReceiveTimeout _uwrepl_get_ReceiveTimeout;
    private delegate_uwrepl_put_ReceiveTimeout _uwrepl_put_ReceiveTimeout;
    private delegate_uwrepl_get_DataSendTimeout _uwrepl_get_DataSendTimeout;
    private delegate_uwrepl_put_DataSendTimeout _uwrepl_put_DataSendTimeout;
    private delegate_uwrepl_get_DataReceiveTimeout _uwrepl_get_DataReceiveTimeout;
    private delegate_uwrepl_put_DataReceiveTimeout _uwrepl_put_DataReceiveTimeout;
    private delegate_uwrepl_get_ControlSendTimeout _uwrepl_get_ControlSendTimeout;
    private delegate_uwrepl_put_ControlSendTimeout _uwrepl_put_ControlSendTimeout;
    private delegate_uwrepl_get_ControlReceiveTimeout _uwrepl_get_ControlReceiveTimeout;
    private delegate_uwrepl_put_ControlReceiveTimeout _uwrepl_put_ControlReceiveTimeout;
    private delegate_uwrepl_get_ConnectionRetryTimeout _uwrepl_get_ConnectionRetryTimeout;
    private delegate_uwrepl_put_LoginTimeout _uwrepl_put_LoginTimeout;
    private delegate_uwrepl_get_ProfileName _uwrepl_get_ProfileName;
    private delegate_uwrepl_put_ProfileName _uwrepl_put_ProfileName;
    private delegate_uwrepl_get_Publisher _uwrepl_get_Publisher;
    private delegate_uwrepl_put_Publisher _uwrepl_put_Publisher;
    private delegate_uwrepl_get_PublisherNetwork _uwrepl_get_PublisherNetwork;
    private delegate_uwrepl_put_PublisherNetwork _uwrepl_put_PublisherNetwork;
    private delegate_uwrepl_get_PublisherAddress _uwrepl_get_PublisherAddress;
    private delegate_uwrepl_put_PublisherAddress _uwrepl_put_PublisherAddress;
    private delegate_uwrepl_get_PublisherSecurityMode _uwrepl_get_PublisherSecurityMode;
    private delegate_uwrepl_put_PublisherSecurityMode _uwrepl_put_PublisherSecurityMode;
    private delegate_uwrepl_get_PublisherLogin _uwrepl_get_PublisherLogin;
    private delegate_uwrepl_put_PublisherLogin _uwrepl_put_PublisherLogin;
    private delegate_uwrepl_get_PublisherPassword _uwrepl_get_PublisherPassword;
    private delegate_uwrepl_put_PublisherPassword _uwrepl_put_PublisherPassword;
    private delegate_uwrepl_get_PublisherDatabase _uwrepl_get_PublisherDatabase;
    private delegate_uwrepl_put_PublisherDatabase _uwrepl_put_PublisherDatabase;
    private delegate_uwrepl_get_Publication _uwrepl_get_Publication;
    private delegate_uwrepl_put_Publication _uwrepl_put_Publication;
    private delegate_uwrepl_get_PublisherChanges _uwrepl_get_PublisherChanges;
    private delegate_uwrepl_get_PublisherConflicts _uwrepl_get_PublisherConflicts;
    private delegate_uwrepl_get_QueryTimeout _uwrepl_get_QueryTimeout;
    private delegate_uwrepl_put_QueryTimeout _uwrepl_put_QueryTimeout;
    private delegate_uwrepl_get_DistributorSecurityMode _uwrepl_get_DistributorSecurityMode;
    private delegate_uwrepl_put_DistributorSecurityMode _uwrepl_put_DistributorSecurityMode;
    private delegate_uwrepl_get_DistributorLogin _uwrepl_get_DistributorLogin;
    private delegate_uwrepl_put_DistributorLogin _uwrepl_put_DistributorLogin;
    private delegate_uwrepl_get_DistributorPassword _uwrepl_get_DistributorPassword;
    private delegate_uwrepl_put_DistributorPassword _uwrepl_put_DistributorPassword;
    private delegate_uwrepl_get_ExchangeType _uwrepl_get_ExchangeType;
    private delegate_uwrepl_put_ExchangeType _uwrepl_put_ExchangeType;
    private delegate_uwrepl_get_HostName _uwrepl_get_HostName;
    private delegate_uwrepl_put_HostName _uwrepl_put_HostName;
    private delegate_uwrepl_get_InternetUrl _uwrepl_get_InternetUrl;
    private delegate_uwrepl_put_InternetUrl _uwrepl_put_InternetUrl;
    private delegate_uwrepl_get_InternetLogin _uwrepl_get_InternetLogin;
    private delegate_uwrepl_put_InternetLogin _uwrepl_put_InternetLogin;
    private delegate_uwrepl_get_InternetPassword _uwrepl_get_InternetPassword;
    private delegate_uwrepl_put_InternetPassword _uwrepl_put_InternetPassword;
    private delegate_uwrepl_get_InternetProxyServer _uwrepl_get_InternetProxyServer;
    private delegate_uwrepl_put_InternetProxyServer _uwrepl_put_InternetProxyServer;
    private delegate_uwrepl_get_InternetProxyLogin _uwrepl_get_InternetProxyLogin;
    private delegate_uwrepl_put_InternetProxyLogin _uwrepl_put_InternetProxyLogin;
    private delegate_uwrepl_get_InternetProxyPassword _uwrepl_get_InternetProxyPassword;
    private delegate_uwrepl_put_InternetProxyPassword _uwrepl_put_InternetProxyPassword;
    private delegate_uwrepl_get_LoginTimeout _uwrepl_get_LoginTimeout;
    private delegate_uwrepl_Replication _uwrepl_Replication;
    private delegate_uwrepl_get_ErrorPointer _uwrepl_get_ErrorPointer;
    private delegate_uwrepl_get_Distributor _uwrepl_get_Distributor;
    private delegate_uwrepl_put_Distributor _uwrepl_put_Distributor;
    private delegate_uwrepl_get_PostSyncCleanup _uwrepl_get_PostSyncCleanup;
    private delegate_uwrepl_put_PostSyncCleanup _uwrepl_put_PostSyncCleanup;
    private delegate_uwrepl_get_DistributorNetwork _uwrepl_get_DistributorNetwork;
    private delegate_uwrepl_put_DistributorNetwork _uwrepl_put_DistributorNetwork;
    private delegate_uwrepl_get_DistributorAddress _uwrepl_get_DistributorAddress;
    private delegate_uwrepl_put_DistributorAddress _uwrepl_put_DistributorAddress;
    private delegate_uwrepl_AsyncReplication _uwrepl_AsyncReplication;
    private delegate_uwrepl_WaitForNextStatusReport _uwrepl_WaitForNextStatusReport;
    private delegate_uwrepl_GetSyncResult _uwrepl_GetSyncResult;
    private static NativeMethodsHelper();
    [SecurityCriticalAttribute]
internal NativeMethodsHelper(string modulePath);
    [SecurityCriticalAttribute]
public sealed virtual void Dispose();
    [SecurityCriticalAttribute]
internal void uwutil_ZeroMemory(IntPtr dest, int length);
    [SecurityCriticalAttribute]
internal int GetSqlCeVersionInfo(IntPtr& pwszVersion);
    [SecurityCriticalAttribute]
internal int GetNativeVersionInfo(Int32& bldMajor, Int32& bldMinor);
    [SecurityCriticalAttribute]
internal int GetDatabaseInstanceID(IntPtr pStore, IntPtr& pwszGuidString, IntPtr pError);
    [SecurityCriticalAttribute]
internal int GetEncryptionMode(IntPtr pStore, Int32& encryptionMode, IntPtr pError);
    [SecurityCriticalAttribute]
internal int GetLocale(IntPtr pStore, Int32& locale, IntPtr pError);
    [SecurityCriticalAttribute]
internal int GetLocaleFlags(IntPtr pStore, Int32& sortFlags, IntPtr pError);
    [SecurityCriticalAttribute]
internal int OpenCursor(IntPtr pITransact, IntPtr pwszTableName, IntPtr pwszIndexName, IntPtr& pSeCursor, IntPtr pError);
    [SecurityCriticalAttribute]
internal int GetValues(IntPtr pSeCursor, int seGetColumn, IntPtr prgBinding, int cDbBinding, IntPtr pData, IntPtr pError);
    [SecurityCriticalAttribute]
internal int Read(IntPtr pSeqStream, Void* pBuffer, int bufferIndex, int byteCount, Int32& bytesRead, IntPtr pError);
    [SecurityCriticalAttribute]
internal int ReadAt(IntPtr pLockBytes, int srcIndex, Void* pBuffer, int bufferIndex, int byteCount, Int32& bytesRead, IntPtr pError);
    [SecurityCriticalAttribute]
internal int Seek(IntPtr pSeCursor, IntPtr pQpServices, IntPtr prgBinding, int cBinding, IntPtr pData, int cKeyValues, int dbSeekOptions, IntPtr pError);
    [SecurityCriticalAttribute]
internal int SetRange(IntPtr pSeCursor, IntPtr pQpServices, IntPtr prgBinding, int cBinding, IntPtr pStartData, int cStartKeyValues, IntPtr pEndData, int cEndKeyValues, int dbRangeOptions, IntPtr pError);
    [SecurityCriticalAttribute]
internal int SafeRelease(IntPtr& ppUnknown);
    [SecurityCriticalAttribute]
internal int SafeDelete(IntPtr& ppInstance);
    [SecurityCriticalAttribute]
internal int DeleteArray(IntPtr& ppInstance);
    [SecurityCriticalAttribute]
internal int OpenStore(IntPtr pOpenInfo, IntPtr pfnOnFlushFailure, IntPtr& pStoreService, IntPtr& pStoreServer, IntPtr& pQpServices, IntPtr& pSeStore, IntPtr& pTx, IntPtr& pQpDatabase, IntPtr& pQpSession, IntPtr& pStoreEvents, IntPtr& pError);
    [SecurityCriticalAttribute]
internal int CloseStore(IntPtr pSeStore);
    [SecurityCriticalAttribute]
internal int CloseAndReleaseStore(IntPtr& pSeStore);
    [SecurityCriticalAttribute]
internal int OpenTransaction(IntPtr pSeStore, IntPtr pQpDatabase, SEISOLATION isoLevel, IntPtr pQpConnSession, IntPtr& pTx, IntPtr& pQpSession, IntPtr pError);
    [SecurityCriticalAttribute]
internal int CreateDatabase(IntPtr pOpenInfo, IntPtr& pError);
    [SecurityCriticalAttribute]
internal int Rebuild(IntPtr pwszSrc, IntPtr pwszDst, IntPtr pwszTemp, IntPtr pwszPwd, IntPtr pwszPwdNew, int fEncrypt, SEFIXOPTION tyOption, int fSafeRepair, int lcid, int dstEncryptionMode, int localeFlags, IntPtr& pError);
    [SecurityCriticalAttribute]
internal int CreateErrorInstance(IntPtr& pError);
    [SecurityCriticalAttribute]
internal int uwutil_ConvertToDBTIMESTAMP(DBTIMESTAMP& pDbTimestamp, UInt32 dtTime, int dtDay);
    [SecurityCriticalAttribute]
internal int uwutil_ConvertFromDBTIMESTAMP(DBTIMESTAMP pDbTimestamp, UInt32& dtTime, Int32& dtDay);
    [SecurityCriticalAttribute]
internal void uwutil_SysFreeString(IntPtr p);
    [SecurityCriticalAttribute]
internal UInt32 uwutil_ReleaseCOMPtr(IntPtr p);
    [SecurityCriticalAttribute]
internal int uwutil_get_ErrorCount(IntPtr pIRDA);
    [SecurityCriticalAttribute]
internal int uwutil_get_Error(IntPtr pIError, int errno, Int32& hResult, IntPtr& message, Int32& nativeError, IntPtr& source, Int32& numericParameter1, Int32& numericParameter2, Int32& numericParameter3, IntPtr& errorParameter1, IntPtr& errorParameter2, IntPtr& errorParameter3);
    [SecurityCriticalAttribute]
internal int SetValues(IntPtr pQpServices, IntPtr pSeCursor, IntPtr prgBinding, int cDbBinding, IntPtr pData, IntPtr pError);
    [SecurityCriticalAttribute]
internal int SetValue(IntPtr pSeCursor, int seSetColumn, Void* pBuffer, int ordinal, int size, IntPtr pError);
    [SecurityCriticalAttribute]
internal int Prepare(IntPtr pSeCursor, SEPREPAREMODE mode, IntPtr pError);
    [SecurityCriticalAttribute]
internal int InsertRecord(int fMoveTo, IntPtr pSeCursor, Int32& hBookmark, IntPtr pError);
    [SecurityCriticalAttribute]
internal int UpdateRecord(IntPtr pSeCursor, IntPtr pError);
    [SecurityCriticalAttribute]
internal int DeleteRecord(IntPtr pSeCursor, IntPtr pError);
    [SecurityCriticalAttribute]
internal int GotoBookmark(IntPtr pSeCursor, int hBookmark, IntPtr pError);
    [SecurityCriticalAttribute]
internal int GetContextErrorInfo(IntPtr pError, Int32& lNumber, Int32& lNativeError, IntPtr& pwszMessage, IntPtr& pwszSource, Int32& numPar1, Int32& numPar2, Int32& numPar3, IntPtr& pwszErr1, IntPtr& pwszErr2, IntPtr& pwszErr3);
    [SecurityCriticalAttribute]
internal int GetContextErrorMessage(int dminorError, IntPtr& pwszMessage);
    [SecurityCriticalAttribute]
internal int GetMinorError(IntPtr pError, Int32& lMinor);
    [SecurityCriticalAttribute]
internal int GetBookmark(IntPtr pSeCursor, Int32& hBookmark, IntPtr pError);
    [SecurityCriticalAttribute]
internal int GetColumnInfo(IntPtr pIUnknown, Int32& columnCount, IntPtr& prgColumnInfo, IntPtr pError);
    [SecurityCriticalAttribute]
internal int SetColumnInfo(IntPtr pITransact, string TableName, string ColumnName, SECOLUMNINFO seColumnInfo, SECOLUMNATTRIB seColAttrib, IntPtr pError);
    [SecurityCriticalAttribute]
internal int SetTableInfoAsSystem(IntPtr pITransact, string TableName, IntPtr pError);
    [SecurityCriticalAttribute]
internal int GetParameterInfo(IntPtr pQpCommand, UInt32& columnCount, IntPtr& prgParamInfo, IntPtr pError);
    [SecurityCriticalAttribute]
internal int GetIndexColumnOrdinals(IntPtr pSeCursor, IntPtr pwszIndex, UInt32& cColumns, IntPtr& priOrdinals, IntPtr pError);
    [SecurityCriticalAttribute]
internal int GetKeyInfo(IntPtr pIUnknown, IntPtr pTx, string pwszBaseTable, IntPtr prgDbKeyInfo, int cDbKeyInfo, IntPtr pError);
    [SecurityCriticalAttribute]
internal int CreateCommand(IntPtr pQpSession, IntPtr& pQpCommand, IntPtr pError);
    [SecurityCriticalAttribute]
internal int CompileQueryPlan(IntPtr pQpCommand, string pwszCommandText, ResultSetOptions options, IntPtr[] pParamNames, IntPtr prgBinding, int cDbBinding, IntPtr& pQpPlan, IntPtr pError);
    [SecurityCriticalAttribute]
internal int Move(IntPtr pSeCursor, DIRECTION direction, IntPtr pError);
    [SecurityCriticalAttribute]
internal int AbortTransaction(IntPtr pTx, IntPtr pError);
    [SecurityCriticalAttribute]
internal int CommitTransaction(IntPtr pTx, CommitMode mode, IntPtr pError);
    [SecurityCriticalAttribute]
internal int SetTransactionFlag(IntPtr pITransact, SeTransactionFlags seTxFlag, bool fEnable, IntPtr pError);
    [SecurityCriticalAttribute]
internal int GetTransactionFlags(IntPtr pITransact, SeTransactionFlags& seTxFlags);
    [SecurityCriticalAttribute]
internal int GetTrackingContext(IntPtr pITransact, IntPtr& pGuidTrackingContext, IntPtr pError);
    [SecurityCriticalAttribute]
internal int SetTrackingContext(IntPtr pITransact, IntPtr& pGuidTrackingContext, IntPtr pError);
    [SecurityCriticalAttribute]
internal int GetTransactionBsn(IntPtr pITransact, Int64& pTransactionBsn, IntPtr pError);
    [SecurityCriticalAttribute]
internal int InitChangeTracking(IntPtr pITransact, IntPtr& pTracking, IntPtr& pError);
    [SecurityCriticalAttribute]
internal int ExitChangeTracking(IntPtr& pTracking, IntPtr& pError);
    [SecurityCriticalAttribute]
internal int EnableChangeTracking(IntPtr pTracking, string TableName, SETRACKINGTYPE seTrackingType, SEOCSTRACKOPTIONS seTrackOpts, IntPtr pError);
    [SecurityCriticalAttribute]
internal int GetTrackingOptions(IntPtr pTracking, string TableName, SEOCSTRACKOPTIONSV2& iTrackingOptions, IntPtr pError);
    [SecurityCriticalAttribute]
internal int DisableChangeTracking(IntPtr pTracking, string TableName, IntPtr pError);
    [SecurityCriticalAttribute]
internal int IsTableChangeTracked(IntPtr pTracking, string TableName, Boolean& fTableTracked, IntPtr pError);
    [SecurityCriticalAttribute]
internal int GetChangeTrackingInfo(IntPtr pTracking, string TableName, SEOCSTRACKOPTIONS& trackOptions, SETRACKINGTYPE& trackType, Int64& trackOrdinal, IntPtr pError);
    [SecurityCriticalAttribute]
internal int CleanupTrackingMetadata(IntPtr pTracking, string TableName, int retentionPeriodInDays, long cutoffTxCsn, long leastTxCsn, IntPtr pError);
    [SecurityCriticalAttribute]
internal int CleanupTransactionData(IntPtr pTracking, int iRetentionPeriodInDays, long ullCutoffTransactionCsn, IntPtr pError);
    [SecurityCriticalAttribute]
internal int CleanupTombstoneData(IntPtr pTracking, string TableName, int iRetentionPeriodInDays, long ullCutoffTransactionCsn, IntPtr pError);
    [SecurityCriticalAttribute]
internal int GetCurrentTrackingTxCsn(IntPtr pTracking, Int64& txCsn, IntPtr pError);
    [SecurityCriticalAttribute]
internal int GetCurrentTrackingTxBsn(IntPtr pTracking, Int64& txBsn, IntPtr pError);
    [SecurityCriticalAttribute]
internal int DllAddRef();
    [SecurityCriticalAttribute]
internal int DllRelease();
    [SecurityCriticalAttribute]
internal int ClearErrorInfo(IntPtr pError);
    [SecurityCriticalAttribute]
internal int ExecuteQueryPlan(IntPtr pTx, IntPtr pQpServices, IntPtr pQpCommand, IntPtr pQpPlan, IntPtr prgBinding, int cDbBinding, IntPtr pData, Int32& recordsAffected, ResultSetOptions& cursorCapabilities, IntPtr& pSeCursor, Int32& fIsBaseTableCursor, IntPtr pError);
    internal int uwrda_put_ControlReceiveTimeout(IntPtr pIRda, int ControlReceiveTimeout);
    internal int uwrda_get_ConnectionRetryTimeout(IntPtr pIRda, UInt16& ConnectionRetryTimeout);
    internal int uwrda_put_ConnectionRetryTimeout(IntPtr pIRda, ushort ConnectionRetryTimeout);
    internal int uwrda_get_CompressionLevel(IntPtr pIRda, UInt16& CompressionLevel);
    internal int uwrda_put_CompressionLevel(IntPtr pIRda, ushort CompressionLevel);
    internal int uwrda_get_ConnectionManager(IntPtr pIRda, Boolean& ConnectionManager);
    internal int uwrda_put_ConnectionManager(IntPtr pIRda, bool ConnectionManager);
    internal int uwrda_Pull(IntPtr pIRda, string zLocalTableName, string zSqlSelectString, string zOleDbConnectionString, RdaTrackOption trackOption, string zErrorTable);
    internal int uwrda_Push(IntPtr pIRda, string zLocalTableName, string zOleDbConnectionString, RdaBatchOption batchOption);
    internal int uwrda_SubmitSql(IntPtr pIRda, string zSqlString, string zOleDbConnectionString);
    internal int uwrda_get_InternetLogin(IntPtr pIRda, IntPtr& rbz);
    internal int uwrda_put_InternetLogin(IntPtr pIRda, string InternetLogin);
    internal int uwrda_get_InternetPassword(IntPtr pIRda, IntPtr& rbz);
    internal int uwrda_put_InternetPassword(IntPtr pIRda, string InternetPassword);
    internal int uwrda_get_InternetProxyServer(IntPtr pIRda, IntPtr& rbz);
    internal int uwrda_put_InternetProxyServer(IntPtr pIRda, string InternetProxyServer);
    internal int uwrda_get_InternetProxyLogin(IntPtr pIRda, IntPtr& rbz);
    internal int uwrda_put_InternetProxyLogin(IntPtr pIRda, string InternetProxyLogin);
    internal int uwrda_get_InternetProxyPassword(IntPtr pIRda, IntPtr& rbz);
    internal int uwrda_put_InternetProxyPassword(IntPtr pIRda, string InternetProxyPassword);
    internal int uwrda_get_ConnectTimeout(IntPtr pIRda, Int32& connectTimeout);
    internal int uwrda_put_ConnectTimeout(IntPtr pIRda, int connectTimeout);
    internal int uwrda_get_SendTimeout(IntPtr pIRda, Int32& SendTimeout);
    internal int uwrda_put_SendTimeout(IntPtr pIRda, int SendTimeout);
    internal int uwrda_get_ReceiveTimeout(IntPtr pIRda, Int32& ReceiveTimeout);
    internal int uwrda_put_ReceiveTimeout(IntPtr pIRda, int ReceiveTimeout);
    internal int uwrda_get_DataSendTimeout(IntPtr pIRda, Int32& DataSendTimeout);
    internal int uwrda_put_DataSendTimeout(IntPtr pIRda, int DataSendTimeout);
    internal int uwrda_get_DataReceiveTimeout(IntPtr pIRda, Int32& DataReceiveTimeout);
    internal int uwrda_put_DataReceiveTimeout(IntPtr pIRda, int DataReceiveTimeout);
    internal int uwrda_get_ControlSendTimeout(IntPtr pIRda, Int32& ControlSendTimeout);
    internal int uwrda_put_ControlSendTimeout(IntPtr pIRda, int ControlSendTimeout);
    internal int uwrda_get_ControlReceiveTimeout(IntPtr pIRda, Int32& ControlReceiveTimeout);
    internal int uwrda_RemoteDataAccess(IntPtr& pIRda, IntPtr& pCreationIError);
    internal int uwrda_get_ErrorPointer(IntPtr pIRda, IntPtr& pIErrors);
    internal int uwrda_get_LocalConnectionString(IntPtr pIRda, IntPtr& rbz);
    internal int uwrda_put_LocalConnectionString(IntPtr pIRda, string zLocalConnectionString);
    internal int uwrda_get_InternetUrl(IntPtr pIRda, IntPtr& rbz);
    internal int uwrda_put_InternetUrl(IntPtr pIRda, string InternetUrl);
    internal int uwrepl_put_ConnectionRetryTimeout(IntPtr pIReplication, ushort ConnectionRetryTimeout);
    internal int uwrepl_get_CompressionLevel(IntPtr pIReplication, UInt16& CompressionLevel);
    internal int uwrepl_put_CompressionLevel(IntPtr pIReplication, ushort CompressionLevel);
    internal int uwrepl_get_ConnectionManager(IntPtr pIReplication, Boolean& ConnectionManager);
    internal int uwrepl_put_ConnectionManager(IntPtr pIReplication, bool ConnectionManager);
    internal int uwrepl_get_SnapshotTransferType(IntPtr pIReplication, SnapshotTransferType& SnapshotTransferType);
    internal int uwrepl_put_SnapshotTransferType(IntPtr pIReplication, SnapshotTransferType SnapshotTransferType);
    internal int uwrepl_AddSubscription(IntPtr pIReplication, AddOption addOption);
    internal int uwrepl_DropSubscription(IntPtr pIReplication, DropOption dropOption);
    internal int uwrepl_ReinitializeSubscription(IntPtr pIReplication, bool uploadBeforeReinit);
    internal int uwrepl_Initialize(IntPtr pIReplication);
    internal int uwrepl_Run(IntPtr pIReplication);
    internal int uwrepl_Terminate(IntPtr pIReplication);
    internal int uwrepl_Cancel(IntPtr pIReplication);
    internal int uwrepl_LoadProperties(IntPtr pIReplication, Boolean& PasswordsLoaded);
    internal int uwrepl_SaveProperties(IntPtr pIReplication);
    internal int uwrepl_get_Subscriber(IntPtr pIReplication, IntPtr& rbz);
    internal int uwrepl_put_Subscriber(IntPtr pIReplication, string Subscriber);
    internal int uwrepl_get_SubscriberConnectionString(IntPtr pIReplication, IntPtr& rbz);
    internal int uwrepl_put_SubscriberConnectionString(IntPtr pIReplication, string SubscriberConnectionString);
    internal int uwrepl_get_SubscriberChanges(IntPtr pIReplication, Int32& SubscriberChanges);
    internal int uwrepl_get_SubscriberConflicts(IntPtr pIReplication, Int32& SubscriberConflicts);
    internal int uwrepl_get_Validate(IntPtr pIReplication, ValidateType& Validate);
    internal int uwrepl_put_Validate(IntPtr pIReplication, ValidateType Validate);
    internal int uwrepl_get_ConnectTimeout(IntPtr pIReplication, Int32& connectTimeout);
    internal int uwrepl_put_ConnectTimeout(IntPtr pIReplication, int connectTimeout);
    internal int uwrepl_get_SendTimeout(IntPtr pIReplication, Int32& SendTimeout);
    internal int uwrepl_put_SendTimeout(IntPtr pIReplication, int SendTimeout);
    internal int uwrepl_get_ReceiveTimeout(IntPtr pIReplication, Int32& ReceiveTimeout);
    internal int uwrepl_put_ReceiveTimeout(IntPtr pIReplication, int ReceiveTimeout);
    internal int uwrepl_get_DataSendTimeout(IntPtr pIReplication, Int32& DataSendTimeout);
    internal int uwrepl_put_DataSendTimeout(IntPtr pIReplication, int DataSendTimeout);
    internal int uwrepl_get_DataReceiveTimeout(IntPtr pIReplication, Int32& DataReceiveTimeout);
    internal int uwrepl_put_DataReceiveTimeout(IntPtr pIReplication, int DataReceiveTimeout);
    internal int uwrepl_get_ControlSendTimeout(IntPtr pIReplication, Int32& ControlSendTimeout);
    internal int uwrepl_put_ControlSendTimeout(IntPtr pIReplication, int ControlSendTimeout);
    internal int uwrepl_get_ControlReceiveTimeout(IntPtr pIReplication, Int32& ControlReceiveTimeout);
    internal int uwrepl_put_ControlReceiveTimeout(IntPtr pIReplication, int ControlReceiveTimeout);
    internal int uwrepl_get_ConnectionRetryTimeout(IntPtr pIReplication, UInt16& ConnectionRetryTimeout);
    internal int uwrepl_put_LoginTimeout(IntPtr pIReplication, ushort LoginTimeout);
    internal int uwrepl_get_ProfileName(IntPtr pIReplication, IntPtr& rbz);
    internal int uwrepl_put_ProfileName(IntPtr pIReplication, string ProfileName);
    internal int uwrepl_get_Publisher(IntPtr pIReplication, IntPtr& rbz);
    internal int uwrepl_put_Publisher(IntPtr pIReplication, string Publisher);
    internal int uwrepl_get_PublisherNetwork(IntPtr pIReplication, NetworkType& PublisherNetwork);
    internal int uwrepl_put_PublisherNetwork(IntPtr pIReplication, NetworkType PublisherNetwork);
    internal int uwrepl_get_PublisherAddress(IntPtr pIReplication, IntPtr& rbz);
    internal int uwrepl_put_PublisherAddress(IntPtr pIReplication, string PublisherAddress);
    internal int uwrepl_get_PublisherSecurityMode(IntPtr pIReplication, SecurityType& PublisherSecurityMode);
    internal int uwrepl_put_PublisherSecurityMode(IntPtr pIReplication, SecurityType PublisherSecurityMode);
    internal int uwrepl_get_PublisherLogin(IntPtr pIReplication, IntPtr& rbz);
    internal int uwrepl_put_PublisherLogin(IntPtr pIReplication, string PublisherLogin);
    internal int uwrepl_get_PublisherPassword(IntPtr pIReplication, IntPtr& rbz);
    internal int uwrepl_put_PublisherPassword(IntPtr pIReplication, string PublisherPassword);
    internal int uwrepl_get_PublisherDatabase(IntPtr pIReplication, IntPtr& rbz);
    internal int uwrepl_put_PublisherDatabase(IntPtr pIReplication, string PublisherDatabase);
    internal int uwrepl_get_Publication(IntPtr pIReplication, IntPtr& rbz);
    internal int uwrepl_put_Publication(IntPtr pIReplication, string Publication);
    internal int uwrepl_get_PublisherChanges(IntPtr pIReplication, Int32& PublisherChanges);
    internal int uwrepl_get_PublisherConflicts(IntPtr pIReplication, Int32& PublisherConflicts);
    internal int uwrepl_get_QueryTimeout(IntPtr pIReplication, UInt16& QueryTimeout);
    internal int uwrepl_put_QueryTimeout(IntPtr pIReplication, ushort QueryTimeout);
    internal int uwrepl_get_DistributorSecurityMode(IntPtr pIReplication, SecurityType& DistributorSecurityMode);
    internal int uwrepl_put_DistributorSecurityMode(IntPtr pIReplication, SecurityType DistributorSecurityMode);
    internal int uwrepl_get_DistributorLogin(IntPtr pIReplication, IntPtr& rbz);
    internal int uwrepl_put_DistributorLogin(IntPtr pIReplication, string DistributorLogin);
    internal int uwrepl_get_DistributorPassword(IntPtr pIReplication, IntPtr& rbz);
    internal int uwrepl_put_DistributorPassword(IntPtr pIReplication, string DistributorPassword);
    internal int uwrepl_get_ExchangeType(IntPtr pIReplication, ExchangeType& ExchangeType);
    internal int uwrepl_put_ExchangeType(IntPtr pIReplication, ExchangeType ExchangeType);
    internal int uwrepl_get_HostName(IntPtr pIReplication, IntPtr& rbz);
    internal int uwrepl_put_HostName(IntPtr pIReplication, string HostName);
    internal int uwrepl_get_InternetUrl(IntPtr pIReplication, IntPtr& rbz);
    internal int uwrepl_put_InternetUrl(IntPtr pIReplication, string InternetUrl);
    internal int uwrepl_get_InternetLogin(IntPtr pIReplication, IntPtr& rbz);
    internal int uwrepl_put_InternetLogin(IntPtr pIReplication, string InternetLogin);
    internal int uwrepl_get_InternetPassword(IntPtr pIReplication, IntPtr& rbz);
    internal int uwrepl_put_InternetPassword(IntPtr pIReplication, string InternetPassword);
    internal int uwrepl_get_InternetProxyServer(IntPtr pIReplication, IntPtr& rbz);
    internal int uwrepl_put_InternetProxyServer(IntPtr pIReplication, string InternetProxyServer);
    internal int uwrepl_get_InternetProxyLogin(IntPtr pIReplication, IntPtr& rbz);
    internal int uwrepl_put_InternetProxyLogin(IntPtr pIReplication, string InternetProxyLogin);
    internal int uwrepl_get_InternetProxyPassword(IntPtr pIReplication, IntPtr& rbz);
    internal int uwrepl_put_InternetProxyPassword(IntPtr pIReplication, string InternetProxyPassword);
    internal int uwrepl_get_LoginTimeout(IntPtr pIReplication, UInt16& LoginTimeout);
    internal int uwrepl_Replication(IntPtr& pIReplication, IntPtr& pCreationIError);
    internal int uwrepl_get_ErrorPointer(IntPtr pIReplication, IntPtr& pIErrors);
    internal int uwrepl_get_Distributor(IntPtr pIReplication, IntPtr& rbz);
    internal int uwrepl_put_Distributor(IntPtr pIReplication, string Distributor);
    internal int uwrepl_get_PostSyncCleanup(IntPtr pIReplication, Int16& iCleanupType);
    internal int uwrepl_put_PostSyncCleanup(IntPtr pIReplication, short iCleanupType);
    internal int uwrepl_get_DistributorNetwork(IntPtr pIReplication, NetworkType& DistributorNetwork);
    internal int uwrepl_put_DistributorNetwork(IntPtr pIReplication, NetworkType DistributorNetwork);
    internal int uwrepl_get_DistributorAddress(IntPtr pIReplication, IntPtr& rbz);
    internal int uwrepl_put_DistributorAddress(IntPtr pIReplication, string DistributorAddress);
    internal int uwrepl_AsyncReplication(IntPtr pIReplication, IntPtr& pAsyncIReplication);
    internal int uwrepl_WaitForNextStatusReport(IntPtr pAsyncReplication, SyncStatus& pSyncStatus, IntPtr& rbzTableName, Int32& pPrecentCompleted, Boolean& pCompleted);
    internal int uwrepl_GetSyncResult(IntPtr pIReplication, Int32& pHr);
}
public enum System.Data.SqlServerCe.NetworkType : Enum {
    public int value__;
    public static NetworkType DefaultNetwork;
    public static NetworkType TcpIpSockets;
    public static NetworkType MultiProtocol;
}
public class System.Data.SqlServerCe.OnStartTableDownload : MulticastDelegate {
    public OnStartTableDownload(object object, IntPtr method);
    public virtual void Invoke(IAsyncResult ar, string tableName);
    public virtual IAsyncResult BeginInvoke(IAsyncResult ar, string tableName, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Data.SqlServerCe.OnStartTableUpload : MulticastDelegate {
    public OnStartTableUpload(object object, IntPtr method);
    public virtual void Invoke(IAsyncResult ar, string tableName);
    public virtual IAsyncResult BeginInvoke(IAsyncResult ar, string tableName, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Data.SqlServerCe.OnSynchronization : MulticastDelegate {
    public OnSynchronization(object object, IntPtr method);
    public virtual void Invoke(IAsyncResult ar, int percentComplete);
    public virtual IAsyncResult BeginInvoke(IAsyncResult ar, int percentComplete, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public enum System.Data.SqlServerCe.PurgeType : Enum {
    public int value__;
    public static PurgeType None;
    public static PurgeType TimeBased;
    public static PurgeType CsnBased;
    public static PurgeType Max;
}
internal class System.Data.SqlServerCe.QPPARAMINFO : object {
    public IntPtr pwszParam;
    public UInt32 cchMax;
    public UInt32 iOrdinal;
    public QPPARAMTYPE paramType;
    public SETYPE type;
    public UInt32 ulSize;
    public byte bPrecision;
    public byte bScale;
    public short padding;
    public int fIsTyped;
    private static QPPARAMINFO();
}
internal enum System.Data.SqlServerCe.QPPARAMTYPE : Enum {
    public int value__;
    public static QPPARAMTYPE QPPARAM_INPUT;
    public static QPPARAMTYPE QPPARAM_OUTPUT;
    public static QPPARAMTYPE QPPARAM_INOUT;
    public static QPPARAMTYPE QPPARAM_RETURN;
}
public enum System.Data.SqlServerCe.RdaBatchOption : Enum {
    public int value__;
    public static RdaBatchOption BatchingOff;
    public static RdaBatchOption BatchingOn;
}
public enum System.Data.SqlServerCe.RdaTrackOption : Enum {
    public int value__;
    public static RdaTrackOption TrackingOff;
    public static RdaTrackOption TrackingOn;
    public static RdaTrackOption TrackingOnWithIndexes;
    public static RdaTrackOption TrackingOffWithIndexes;
}
public enum System.Data.SqlServerCe.RepairOption : Enum {
    public int value__;
    public static RepairOption DeleteCorruptedRows;
    [ObsoleteAttribute("This is deprecated, please use RecoverAllPossibleRows")]
public static RepairOption RecoverCorruptedRows;
    public static RepairOption RecoverAllPossibleRows;
    public static RepairOption RecoverAllOrFail;
}
internal class System.Data.SqlServerCe.Res : object {
    internal static string SQLCE_WebHostingRestriction;
    internal static string SQLCE_ConflictingSensitivityOptions;
    internal static string SQLCE_InsensitiveBaseTableCursor;
    internal static string SQLCE_MissingQueryParameters;
    internal static string SQLCE_InvalidOperationInHostedContext;
    internal static string SQLCE_TooManyParameters;
    internal static string SQLCE_TooManyCommandParameters;
    internal static string SQLCE_TooFewCommandParameters;
    internal static string SQLCE_ConnectionStringNotInitialized;
    internal static string SQLCE_CursorNotScrollable;
    internal static string SQLCE_CursorNotUpdatable;
    internal static string SQLCE_InvalidBaseColumnType;
    internal static string SQLCE_OrdinalOutOfRange;
    internal static string SQLCE_UndefinedDefaultValue;
    internal static string SQLCE_DataIndexTooLarge;
    internal static string SQLCE_TooManyBytesAvailable;
    internal static string SQLCE_TooManyCharsAvailable;
    internal static string SQLCE_ArgumentOutOfRange;
    internal static string SQLCE_DataColumn_SetFailed;
    internal static string SQLCE_IndexNameNotSpecified;
    internal static string SQLCE_InvalidDataType;
    internal static string SQLCE_HasRowsScrollabilityRequirement;
    internal static string SQLCE_InvalidValueForKeyValue;
    internal static string SQLCE_UnableToFetchDefaultValue;
    internal static string SQLCE_OpenedCursorsOnTxCommit;
    internal static string SQLCE_OpenedCursorsOnTxAbort;
    internal static string SQLCE_OpenedCursorsOnTxChange;
    internal static string SQLCE_DeletedRow;
    internal static string SQLCE_ColumnContainsDbNullValue;
    internal static string SQLCE_CantLoadEntityDll;
    internal static string SQLCE_WrongTrackingVersion;
    internal static string SQLCE_WrongCleanupSequence;
    internal static string SQLCE_IncorrectValue;
    internal static string SQLCE_FormatException;
    internal static string SQLCE_NoTable;
    internal static string SQLCE_NoPrimaryKey;
    internal static string SQLCE_NativeBinaryIsNotProper;
    internal static string SQLCE_NativeEngineNotLoaded;
    internal static string SQLCE_ConnectionNotOpened;
    internal static string SQLCE_SchemaCollectionNotDefined;
    internal static string SQLCE_RestrictionsMismatch;
    internal static string SQLCE_InternalErrorInGetSchema;
    internal static string SQLCE_KillBitted;
    internal static string SQLCE_ConvertFailed;
    internal static string SQLCE_CRTNotSigned;
    internal static string SQL_SqlRecordReadOnly;
    internal static string SQL_SqlResultSetClosed;
    internal static string SQL_InvalidConStringOption;
    internal static string SQL_InvalidConnectionOptionValue;
    internal static string SQL_InvalidDataLength;
    internal static string SQL_InvalidParameterNameLength;
    internal static string SQL_PrecisionValueOutOfRange;
    internal static string SQL_ScaleValueOutOfRange;
    internal static string SQL_InvalidBufferSizeOrIndex;
    internal static string Expr_DatatypeConvertion;
    internal static string SqlMisc_InvalidPrecScaleMessage;
    internal static string OleDb_BadAccessor;
    internal static string OleDb_BadStatus;
    internal static string OleDb_CantConvertValue;
    internal static string OleDb_SignMismatch;
    internal static string OleDb_DataOverflow;
    internal static string OleDb_CantCreate;
    internal static string OleDb_Unavailable;
    internal static string OleDb_UnexpectedStatusValue;
    internal static string ADP_InvalidImplicitConversion;
    internal static string ADP_CollectionIsNotParent;
    internal static string ADP_CollectionIsParent;
    internal static string ADP_OpenReaderExists;
    internal static string ADP_ConnectionStringSyntax;
    internal static string ADP_InvalidCommandType;
    internal static string ADP_InvalidCommandTimeOut;
    internal static string ADP_InvalidUpdateRowSource;
    internal static string ADP_CommandTextRequired;
    internal static string ADP_CommandIsActive;
    internal static string ADP_ConnectionRequired_Prepare;
    internal static string ADP_ConnectionRequired_ExecuteReader;
    internal static string ADP_ConnectionRequired_ExecuteNonQuery;
    internal static string ADP_ConnectionRequired_ExecuteScalar;
    internal static string ADP_OpenConnectionRequired_Prepare;
    internal static string ADP_OpenConnectionRequired_SetConnection;
    internal static string ADP_OpenConnectionRequired_ExecuteReader;
    internal static string ADP_OpenConnectionRequired_ExecuteNonQuery;
    internal static string ADP_OpenConnectionRequired_ExecuteScalar;
    internal static string ADP_NoQuoteChange;
    internal static string ADP_InvalidQuotePrefix;
    internal static string ADP_InvalidQuoteSuffix;
    internal static string ADP_InvalidSchemaSeparator;
    internal static string ADP_MissingSourceCommand;
    internal static string ADP_MissingSourceCommandConnection;
    internal static string ADP_DynamicSQLNoTableInfo;
    internal static string ADP_DynamicSQLJoinUnsupported;
    internal static string ADP_DynamicSQLNoKeyInfo;
    internal static string ADP_OpenConnectionPropertySet;
    internal static string ADP_ParallelTransactionsNotSupported;
    internal static string ADP_InvalidIsolationLevel;
    internal static string ADP_EmptyDatabaseName;
    internal static string ADP_OpenConnectionRequired_BeginTransaction;
    internal static string ADP_OpenConnectionRequired_ChangeDatabase;
    internal static string ADP_OpenConnectionRequired_CommitTransaction;
    internal static string ADP_OpenConnectionRequired_RollbackTransaction;
    internal static string ADP_OpenConnectionRequired_GetDatabaseInfo;
    internal static string ADP_NoConnectionString;
    internal static string ADP_ConnectionAlreadyOpen;
    internal static string ADP_TransactionRequired_Execute;
    internal static string ADP_TransactionConnectionMismatch;
    internal static string ADP_ConnectionNotEnlisted;
    internal static string ADP_TransactionCompleted;
    internal static string ADP_DataReaderClosed;
    internal static string ADP_DataReaderNoData;
    internal static string ADP_NonSequentialColumnAccess;
    internal static string ADP_NonSeqByteAccess;
    internal static string ADP_InvalidSourceBufferIndex;
    internal static string ADP_InvalidDestinationBufferIndex;
    internal static string ADP_InvalidParameterDirection;
    internal static string ADP_InvalidSizeValue;
    internal static string ADP_InvalidPrefixSuffix;
    internal static string ADP_ParameterSizeUnspecified;
    internal static string ADP_ParameterNotSpecified;
    internal static string ADP_InvalidDataRowVersion;
    internal static string ADP_CollectionIndexString;
    internal static string ADP_CollectionRemoveInvalidObject;
    internal static string ADP_CollectionNullValue;
    internal static string ADP_CollectionInvalidType;
    internal static string ADP_TransactionZombied;
    internal static string ADP_UnknownDataType;
    internal static string ADP_UnknownType;
    internal static string ADP_InvalidDataType;
    internal static string ADP_TruncatedBytes;
    internal static string ADP_TruncatedString;
    internal static string ADP_InvalidDataLength2;
    internal static string ADP_LocalTransactionPresent;
    internal static string ADP_FileVersionMismatch;
    internal static string ADP_LoadNativeBinaryFail;
    internal static string ADP_NoErrorInfoPresent;
    internal static string ADP_KeywordNotSupported;
    internal static string DataCategory_Advanced;
    internal static string DataCategory_Initialization;
    internal static string DataCategory_Security;
    internal static string DataCategory_Source;
    internal static string SqlCeConnectionString_AutoShrinkThreshold;
    internal static string SqlCeConnectionString_CaseSensitive;
    internal static string SqlCeConnectionString_DataSource;
    internal static string SqlCeConnectionString_DefaultLockEscalation;
    internal static string SqlCeConnectionString_DefaultLockTimeout;
    internal static string SqlCeConnectionString_Encrypt;
    internal static string SqlCeConnectionString_EncryptionMode;
    internal static string SqlCeConnectionString_Enlist;
    internal static string SqlCeConnectionString_FileAccessRetryTimeout;
    internal static string SqlCeConnectionString_FlushInterval;
    internal static string SqlCeConnectionString_Lcid;
    internal static string SqlCeConnectionString_MaxBufferSize;
    internal static string SqlCeConnectionString_MaxDatabaseSize;
    internal static string SqlCeConnectionString_FileMode;
    internal static string SqlCeConnectionString_Password;
    internal static string SqlCeConnectionString_PersistSecurityInfo;
    internal static string SqlCeConnectionString_TempFilePath;
    internal static string SqlCeConnectionString_TempFileMaxSize;
    private static Res loader;
    private ResourceManager resources;
    private static Res();
    private static Res GetLoader();
    public static string GetString(string name, Object[] args);
    public static string GetString(CultureInfo culture, string name, Object[] args);
    public static string GetString(string name);
    public static string GetString(CultureInfo culture, string name);
}
[AttributeUsageAttribute("32767")]
internal class System.Data.SqlServerCe.ResCategoryAttribute : CategoryAttribute {
    public ResCategoryAttribute(string category);
    protected virtual string GetLocalizedString(string value);
}
[AttributeUsageAttribute("32767")]
internal class System.Data.SqlServerCe.ResDescriptionAttribute : DescriptionAttribute {
    private bool replaced;
    public string Description { get; }
    public ResDescriptionAttribute(string description);
    public virtual string get_Description();
}
internal class System.Data.SqlServerCe.ResultSetChangedEventArgs : EventArgs {
    private RowView rowView;
    private ChangeType changeType;
    internal RowView RowView { get; }
    internal ChangeType ChangeType { get; }
    private static ResultSetChangedEventArgs();
    public ResultSetChangedEventArgs(ChangeType type, RowView view);
    internal RowView get_RowView();
    internal ChangeType get_ChangeType();
}
internal class System.Data.SqlServerCe.ResultSetChangedEventHandler : MulticastDelegate {
    public ResultSetChangedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, ResultSetChangedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, ResultSetChangedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Data.SqlServerCe.ResultSetEnumerator : object {
    internal SqlCeResultSet _resultset;
    internal SqlCeUpdatableRecord _current;
    private object System.Collections.IEnumerator.Current { get; }
    public SqlCeUpdatableRecord Current { get; }
    private static ResultSetEnumerator();
    public ResultSetEnumerator(SqlCeResultSet resultSet);
    private sealed virtual override object System.Collections.IEnumerator.get_Current();
    public SqlCeUpdatableRecord get_Current();
    public sealed virtual bool MoveNext();
    public sealed virtual void Reset();
}
[FlagsAttribute]
public enum System.Data.SqlServerCe.ResultSetOptions : Enum {
    public int value__;
    public static ResultSetOptions None;
    public static ResultSetOptions Updatable;
    public static ResultSetOptions Scrollable;
    public static ResultSetOptions Sensitive;
    public static ResultSetOptions Insensitive;
}
public enum System.Data.SqlServerCe.ResultSetSensitivity : Enum {
    public int value__;
    public static ResultSetSensitivity Asensitive;
    public static ResultSetSensitivity Insensitive;
    public static ResultSetSensitivity Sensitive;
}
public class System.Data.SqlServerCe.ResultSetView : object {
    private SqlCeResultSet parent;
    private ArrayList rowViewList;
    private PropertyDescriptorCollection propDescCollection;
    private Int32[] ordinals;
    private ListChangedEventHandler onListChanged;
    private ResultSetChangedEventHandler onResultSetChanged;
    internal SqlCeResultSet SqlCeResultSet { get; }
    public String[] Columns { get; public set; }
    public Int32[] Ordinals { get; public set; }
    private bool System.Collections.IList.IsFixedSize { get; }
    private bool System.Collections.IList.IsReadOnly { get; }
    private object System.Collections.IList.Item { get; private set; }
    private int System.Collections.ICollection.Count { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    private bool System.ComponentModel.IBindingList.AllowEdit { get; }
    private bool System.ComponentModel.IBindingList.AllowNew { get; }
    private bool System.ComponentModel.IBindingList.AllowRemove { get; }
    private bool System.ComponentModel.IBindingList.SupportsChangeNotification { get; }
    private bool System.ComponentModel.IBindingList.SupportsSearching { get; }
    private bool System.ComponentModel.IBindingList.SupportsSorting { get; }
    private bool System.ComponentModel.IBindingList.IsSorted { get; }
    private ListSortDirection System.ComponentModel.IBindingList.SortDirection { get; }
    private PropertyDescriptor System.ComponentModel.IBindingList.SortProperty { get; }
    private static ResultSetView();
    internal ResultSetView(SqlCeResultSet resultSet);
    internal SqlCeResultSet get_SqlCeResultSet();
    public String[] get_Columns();
    public void set_Columns(String[] value);
    public Int32[] get_Ordinals();
    public void set_Ordinals(Int32[] value);
    private sealed virtual override void System.IDisposable.Dispose();
    private void OnListChanged(ListChangedEventArgs e);
    private void OnResultSetChanged(object sender, ResultSetChangedEventArgs e);
    public sealed virtual void add_ListChanged(ListChangedEventHandler value);
    public sealed virtual void remove_ListChanged(ListChangedEventHandler value);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override bool System.Collections.IList.get_IsFixedSize();
    private sealed virtual override bool System.Collections.IList.get_IsReadOnly();
    private sealed virtual override object System.Collections.IList.get_Item(int index);
    private sealed virtual override void System.Collections.IList.set_Item(int index, object value);
    private sealed virtual override int System.Collections.IList.Add(object value);
    private sealed virtual override void System.Collections.IList.Clear();
    private sealed virtual override bool System.Collections.IList.Contains(object value);
    private sealed virtual override int System.Collections.IList.IndexOf(object value);
    private sealed virtual override void System.Collections.IList.Insert(int index, object value);
    private sealed virtual override void System.Collections.IList.Remove(object value);
    private sealed virtual override void System.Collections.IList.RemoveAt(int index);
    private sealed virtual override int System.Collections.ICollection.get_Count();
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
    private sealed virtual override string System.ComponentModel.ITypedList.GetListName(PropertyDescriptor[] listAccessors);
    private void FillPropertyDescriptorArray();
    private sealed virtual override PropertyDescriptorCollection System.ComponentModel.ITypedList.GetItemProperties(PropertyDescriptor[] listAccessors);
    private sealed virtual override bool System.ComponentModel.IBindingList.get_AllowEdit();
    private sealed virtual override bool System.ComponentModel.IBindingList.get_AllowNew();
    private sealed virtual override bool System.ComponentModel.IBindingList.get_AllowRemove();
    private sealed virtual override bool System.ComponentModel.IBindingList.get_SupportsChangeNotification();
    private sealed virtual override bool System.ComponentModel.IBindingList.get_SupportsSearching();
    private sealed virtual override bool System.ComponentModel.IBindingList.get_SupportsSorting();
    private sealed virtual override object System.ComponentModel.IBindingList.AddNew();
    private sealed virtual override bool System.ComponentModel.IBindingList.get_IsSorted();
    private sealed virtual override ListSortDirection System.ComponentModel.IBindingList.get_SortDirection();
    private sealed virtual override PropertyDescriptor System.ComponentModel.IBindingList.get_SortProperty();
    private sealed virtual override void System.ComponentModel.IBindingList.AddIndex(PropertyDescriptor property);
    private sealed virtual override void System.ComponentModel.IBindingList.ApplySort(PropertyDescriptor property, ListSortDirection direction);
    private sealed virtual override int System.ComponentModel.IBindingList.Find(PropertyDescriptor property, object key);
    private sealed virtual override void System.ComponentModel.IBindingList.RemoveIndex(PropertyDescriptor property);
    private sealed virtual override void System.ComponentModel.IBindingList.RemoveSort();
}
public class System.Data.SqlServerCe.RowView : object {
    private int hBookmark;
    private ResultSetView parent;
    private WeakReference weakRefRecord;
    private SqlCeUpdatableRecord record;
    private string error;
    private bool isBeingEdited;
    private bool isNewRow;
    private bool isDeleted;
    internal bool IsNew { get; internal set; }
    internal ResultSetView Parent { get; internal set; }
    internal int Bookmark { get; }
    public SqlCeUpdatableRecord UpdatableRecord { get; }
    private string System.ComponentModel.IDataErrorInfo.Item { get; }
    private string System.ComponentModel.IDataErrorInfo.Error { get; }
    unknown string Error {internal set; }
    private static RowView();
    internal RowView(RowView value);
    internal RowView(int hBookmark);
    internal RowView(ResultSetView parent, int hBookmark);
    internal RowView(ResultSetView parent, int hBookmark, SqlCeUpdatableRecord record);
    internal void set_IsNew(bool value);
    internal bool get_IsNew();
    internal ResultSetView get_Parent();
    internal void set_Parent(ResultSetView value);
    public virtual int GetHashCode();
    public virtual bool Equals(object other);
    internal int get_Bookmark();
    public SqlCeUpdatableRecord get_UpdatableRecord();
    public sealed virtual void Dispose();
    private void Dispose(bool disposing);
    private sealed virtual override void System.ComponentModel.IEditableObject.BeginEdit();
    private sealed virtual override void System.ComponentModel.IEditableObject.CancelEdit();
    private sealed virtual override void System.ComponentModel.IEditableObject.EndEdit();
    internal void Refresh();
    private sealed virtual override string System.ComponentModel.IDataErrorInfo.get_Item(string colName);
    private sealed virtual override string System.ComponentModel.IDataErrorInfo.get_Error();
    internal void set_Error(string value);
}
internal static class System.Data.SqlServerCe.SchemaCollections : object {
    private static string PopulationMechanism;
    private static string PopulationString;
    private static string CustomCollection;
    private static string XMLResource;
    private static string SQLStatement;
    private static string RestrictionName;
    private static string ParameterName;
    private static string RestrictionDefault;
    private static string RestrictionNumber;
    private static DataTable metadataCollections;
    private static DataTable restrictionsTable;
    private static Dictionary`2<string, string> DataTypesExtraInfo;
    private static SchemaCollections();
    internal static DataTable GetSchema(SqlCeConnection conn);
    internal static DataTable GetSchema(SqlCeConnection conn, string schemaName);
    internal static DataTable GetSchema(SqlCeConnection conn, string schemaName, String[] restrictions);
    private static DataTable GetCustomCollections(SqlCeConnection conn, DataRow collectionRow, String[] restrictions);
    private static DataTable GetXMLResourceCollections(SqlCeConnection conn, DataRow collectionRow, String[] restrictions);
    private static DataTable GetSqlStatementCollections(SqlCeConnection conn, DataRow collectionRow, String[] restrictions);
    private static bool IsNullOrEmptyArray(Array array);
}
[FlagsAttribute]
internal enum System.Data.SqlServerCe.SECOLUMNATTRIB : Enum {
    public int value__;
    public static SECOLUMNATTRIB NAME;
    public static SECOLUMNATTRIB IDCOL;
    public static SECOLUMNATTRIB IDRANGE;
    public static SECOLUMNATTRIB WRITEABLE;
    public static SECOLUMNATTRIB NULLABLE;
    public static SECOLUMNATTRIB TYPE;
    public static SECOLUMNATTRIB IDENTITY;
    public static SECOLUMNATTRIB IDNEXT;
    public static SECOLUMNATTRIB SYSCOL;
    public static SECOLUMNATTRIB IDRANGE1;
    public static SECOLUMNATTRIB IDRANGE2;
}
internal class System.Data.SqlServerCe.SECOLUMNINFO : object {
    public IntPtr pwszColumn;
    public UInt32 cchMax;
    public SETYPE type;
    public UInt32 ulSize;
    public UInt32 bPrecision;
    public UInt32 bScale;
    public long lSeed;
    public long lStep;
    public int fIsFixed;
    public int fIsNullable;
    public int fIsIdentity;
    public int fIsRowGuid;
    public int fIsWriteable;
    public int fIsSystem;
    public int fIsRowVersion;
    public long lIdentityMin;
    public long lIdentityMax;
    public long lIdentityNext;
    public int fMaybeNull;
    public IntPtr pwszBaseTable;
    public UInt32 cchMaxBaseTable;
    public IntPtr pwszBaseColumn;
    public UInt32 cchMaxBaseColumn;
    public UInt32 dwCedbPropId;
    public IntPtr pwszDefaultExpr;
    public UInt32 cchMaxDefaultExpr;
    public int fHasDefault;
    public int fIsExpression;
    public int fCompressed;
    public long lIdentityMinEx;
    public long lIdentityMaxEx;
    public int fUseExRange;
    public int fUseOverflowRange;
    private static SECOLUMNINFO();
}
public enum System.Data.SqlServerCe.SecurityType : Enum {
    public int value__;
    public static SecurityType DBAuthentication;
    public static SecurityType NTAuthentication;
}
internal class System.Data.SqlServerCe.SEDATETIME : ValueType {
    public UInt32 ulMSSinceMidnight;
    public int lDaysSince1900;
}
internal enum System.Data.SqlServerCe.SEFIXOPTION : Enum {
    public int value__;
    public static SEFIXOPTION SEFIX_OPTION_INVALID;
    public static SEFIXOPTION SEFIX_OPTION_COMPACT;
    public static SEFIXOPTION SEFIX_OPTION_SHRINK;
    public static SEFIXOPTION SEFIX_OPTION_VERIFY;
    public static SEFIXOPTION SEFIX_OPTION_VERIFYEX;
    public static SEFIXOPTION SEFIX_OPTION_REPAIR;
    public static SEFIXOPTION SEFIX_OPTION_STATS;
    public static SEFIXOPTION SEFIX_OPTION_CLEAR_STATS;
    public static SEFIXOPTION SEFIX_OPTION_UPGRADE;
    public static SEFIXOPTION SEFIX_OPTION_LAST;
}
internal enum System.Data.SqlServerCe.SEGETCOLUMN : Enum {
    public int value__;
    public static SEGETCOLUMN CURRENT;
    public static SEGETCOLUMN ORIGINAL;
}
internal enum System.Data.SqlServerCe.SEISOLATION : Enum {
    public int value__;
    public static SEISOLATION ISO_READ_COMMITTED;
    public static SEISOLATION ISO_REPEATABLE_READ;
    public static SEISOLATION ISO_SERIALIZABLE;
    public static SEISOLATION ISO_DEFAULT;
}
[FlagsAttribute]
internal enum System.Data.SqlServerCe.SELOCALEFLAGS : Enum {
    public int value__;
    public static SELOCALEFLAGS INVALID;
    public static SELOCALEFLAGS SELOCALE_CASE_SENSITIVE;
}
[FlagsAttribute]
internal enum System.Data.SqlServerCe.SEOCSTRACKOPTIONS : Enum {
    public int value__;
    public static SEOCSTRACKOPTIONS NONE;
    public static SEOCSTRACKOPTIONS UPSERT;
    public static SEOCSTRACKOPTIONS INSERTUPDATE;
    public static SEOCSTRACKOPTIONS DELETE;
    public static SEOCSTRACKOPTIONS COLUMNS;
    public static SEOCSTRACKOPTIONS ALL;
}
[FlagsAttribute]
internal enum System.Data.SqlServerCe.SEOCSTRACKOPTIONSV2 : Enum {
    public int value__;
    public static SEOCSTRACKOPTIONSV2 NONE;
    public static SEOCSTRACKOPTIONSV2 INSERT;
    public static SEOCSTRACKOPTIONSV2 UPDATE;
    public static SEOCSTRACKOPTIONSV2 DELETE;
}
[FlagsAttribute]
internal enum System.Data.SqlServerCe.SEOPENFLAGS : Enum {
    public int value__;
    public static SEOPENFLAGS MODE_READ;
    public static SEOPENFLAGS MODE_WRITE;
    public static SEOPENFLAGS MODE_SHARE_DENY_READ;
    public static SEOPENFLAGS MODE_SHARE_DENY_WRITE;
}
internal enum System.Data.SqlServerCe.SEPREPAREMODE : Enum {
    public int value__;
    public static SEPREPAREMODE PREP_INSERT;
    public static SEPREPAREMODE PREP_UPDATE;
    public static SEPREPAREMODE PREP_DELETE;
    public static SEPREPAREMODE PREP_CANCEL;
    public static SEPREPAREMODE PREP_NONE;
}
[FlagsAttribute]
internal enum System.Data.SqlServerCe.SETABLEATTRIBOPS : Enum {
    public UInt32 value__;
    public static SETABLEATTRIBOPS ALLOWALL;
    public static SETABLEATTRIBOPS TABLERENAME;
    public static SETABLEATTRIBOPS TABLEDELETE;
    public static SETABLEATTRIBOPS COLUMNCREATE;
    public static SETABLEATTRIBOPS COLUMNRENAME;
    public static SETABLEATTRIBOPS COLUMNDELETE;
    public static SETABLEATTRIBOPS INDEXCREATE;
    public static SETABLEATTRIBOPS INDEXRENAME;
    public static SETABLEATTRIBOPS INDEXDELETE;
    public static SETABLEATTRIBOPS CONSTRAINTCREATE;
    public static SETABLEATTRIBOPS CONSTRAINTDELETE;
    public static SETABLEATTRIBOPS PKCREATE;
    public static SETABLEATTRIBOPS PKRENAME;
    public static SETABLEATTRIBOPS PKDELETE;
    public static SETABLEATTRIBOPS ALTERDEFAULTS;
    public static SETABLEATTRIBOPS SWAPCOLUMNORDINALS;
    public static SETABLEATTRIBOPS ALLOWNONE;
    public static SETABLEATTRIBOPS NEEDEDBITS;
}
[FlagsAttribute]
internal enum System.Data.SqlServerCe.SETABLEATTRIBS : Enum {
    public int value__;
    public static SETABLEATTRIBS TRACKING;
    public static SETABLEATTRIBS GRANTEDOPS;
    public static SETABLEATTRIBS ISSYSTEM;
    public static SETABLEATTRIBS EDBTYPE;
    public static SETABLEATTRIBS ISREADONLY;
    public static SETABLEATTRIBS VALIDATTRIBS;
}
internal class System.Data.SqlServerCe.SETABLEINFO : object {
    public IntPtr pwszTable;
    public UInt32 cchMax;
    public bool fIsSystem;
    public bool fReadOnly;
    public ulong uhVersion;
    public bool fTemporary;
    public bool fOrdered;
    public long lNextIdentity;
    public bool fIdentityOverflow;
    public ushort wTracking;
    public int lTableNick;
    public UInt32 dwCedbType;
    public int hBookmark;
    public UInt32 cPages;
    public UInt32 cLvPages;
    public UInt32 dwGrantedOps;
    public bool fHasDefaults;
    public bool fCompressed;
    public UInt32 cStatMods;
    private static SETABLEINFO();
}
internal enum System.Data.SqlServerCe.SETRACKINGTYPE : Enum {
    public int value__;
    public static SETRACKINGTYPE INVALID;
    public static SETRACKINGTYPE NONE;
    public static SETRACKINGTYPE PK;
    public static SETRACKINGTYPE ROWGUID;
}
[FlagsAttribute]
internal enum System.Data.SqlServerCe.SeTransactionFlags : Enum {
    public int value__;
    public static SeTransactionFlags NOFLAGS;
    public static SeTransactionFlags SYSTEM;
    public static SeTransactionFlags GENERATEIDENTITY;
    public static SeTransactionFlags GENERATEROWGUID;
    public static SeTransactionFlags TRACK;
    public static SeTransactionFlags REPLACECOLUMN;
    public static SeTransactionFlags DISABLETRIGGERS;
    public static SeTransactionFlags COMPRESSEDLVSTREAM;
    public static SeTransactionFlags VALIDFLAGS;
}
internal enum System.Data.SqlServerCe.SETYPE : Enum {
    public int value__;
    public static SETYPE TINYINT;
    public static SETYPE SMALLINT;
    public static SETYPE UI2;
    public static SETYPE INTEGER;
    public static SETYPE UI4;
    public static SETYPE BIGINT;
    public static SETYPE UI8;
    public static SETYPE NCHAR;
    public static SETYPE NVARCHAR;
    public static SETYPE NTEXT;
    public static SETYPE BINARY;
    public static SETYPE VARBINARY;
    public static SETYPE IMAGE;
    public static SETYPE DATETIME;
    public static SETYPE UNIQUEIDENTIFIER;
    public static SETYPE BIT;
    public static SETYPE REAL;
    public static SETYPE FLOAT;
    public static SETYPE MONEY;
    public static SETYPE NUMERIC;
    public static SETYPE ROWVERSION;
    public static SETYPE LAST;
    public static SETYPE INVALID;
}
public enum System.Data.SqlServerCe.SnapshotTransferType : Enum {
    public int value__;
    public static SnapshotTransferType UNC;
    public static SnapshotTransferType FTP;
}
[FlagsAttribute]
internal enum System.Data.SqlServerCe.SORTFLAGS : Enum {
    public int value__;
    public static SORTFLAGS NORM_IGNORECASE;
    public static SORTFLAGS NORM_IGNOREKANATYPE;
    public static SORTFLAGS NORM_IGNOREWIDTH;
}
[SecurityCriticalAttribute("1")]
public class System.Data.SqlServerCe.SqlCeChangeTracking : object {
    private object thisLock;
    private IntPtr pTracking;
    private IntPtr pError;
    private SqlCeTransaction m_transaction;
    private SqlCeConnection m_connection;
    private bool isFinalized;
    private static int trackingOptionsMask;
    private TrackingVersion iTrackingVersion;
    private bool hasLocalTransaction;
    private string m_tableName;
    private List`1<string> m_primaryKeyColumns;
    private Dictionary`2<string, byte> m_numericPrecisions;
    private SqlCeTableColumns m_tableColumns;
    private TrackingKeyType m_keyType;
    private SqlCeConnection Connection { get; }
    [ObsoleteAttribute("Obsolete method. Not to be used")]
internal long CurrentTxBsn { get; }
    [ObsoleteAttribute("Obsolete method. Use the new, public method GetLastCommittedCsn() instead")]
internal long CurrentTxCsn { get; }
    private static SqlCeChangeTracking();
    public SqlCeChangeTracking(SqlCeTransaction transaction);
    public SqlCeChangeTracking(SqlCeConnection connection);
    private SqlCeConnection get_Connection();
    internal TrackingVersion DetectTrackingType();
    internal void VersionCheck(TrackingVersion& iCurrentVersion, TrackingVersion tSupportedVersion, TrackingVersion tUnsupportedVersion);
    private void ProcessResults(int hr);
    private int InitChangeTracking(IntPtr& pTracking, IntPtr& pError);
    private int ExitChangeTracking(IntPtr& pTracking, IntPtr& pError, bool fCommit);
    public sealed virtual void Dispose();
    protected virtual void Finalize();
    public void Dispose(bool disposing);
    [ObsoleteAttribute("Obsolete method. Use the new, public EnableTracking method instead")]
internal void EnableTracking(string tableName, SETRACKINGTYPE trackType, SEOCSTRACKOPTIONS trackOpts);
    public void EnableTracking(string tableName, TrackingKeyType trackingKeyType, TrackingOptions trackingOptions);
    public bool GetTrackingOptions(string tableName, TrackingOptions& trackingOptions);
    public void DisableTracking(string tableName);
    [ObsoleteAttribute("Obsolete method. Use the new, public GetTrackingOptions method instead")]
internal bool IsTableTracked(string tableName);
    [ObsoleteAttribute("Obsolete method. Use the new, public GetTrackingOptions method instead")]
internal SETRACKINGTYPE GetTrackingType(string tableName);
    public void PurgeTombstoneTableData(string tableName, PurgeType pType, long retentionValue);
    private void CheckIfDataIsPresentInTombstone(long retentionValue, PurgeType pType);
    public void PurgeTransactionSequenceData(PurgeType pType, long retentionValue);
    public long GetLastCommittedCsn();
    [ObsoleteAttribute("Obsolete method. Use the new, public Purge methods instead")]
internal void CleanupMetadata(string tableName, int retentionPeriod, long cutOffTxCsn, long leastTxCsn);
    internal long get_CurrentTxBsn();
    internal long get_CurrentTxCsn();
    internal byte GetPrecision(string tableName, string columnName);
    internal TrackingKeyType GetTrackingKeyType(string tableName);
    internal bool TableExists(string tableName);
    internal bool SystemCommandExecuteNonQuery(string commandText);
    public static bool UpgradePublicTracking(string connectionString);
    public Byte[] PackTombstoneKey(string tableName, Object[] columnValues);
    public Object[] UnpackTombstoneKey(string tableName, Byte[] tombstoneKey);
}
public class System.Data.SqlServerCe.SqlCeCommand : DbCommand {
    private object thisLock;
    private int recordsAffected;
    internal UInt32[] indexColOrdinals;
    private bool dbRangeSet;
    private bool isHostControlled;
    private bool isPrepared;
    private bool isDisposed;
    private bool isFinalized;
    private ExecuteType executeType;
    private IntPtr pQpPlan;
    private IntPtr pQpCommand;
    private IntPtr pError;
    private string commandText;
    private string indexName;
    private Object[] dbRangeStart;
    private Object[] dbRangeEnd;
    private DbRangeOptions dbRangeOptions;
    internal ResultSetOptions cursorCapabilities;
    private ResultSetOptions resultSetOptions;
    private CommandType type;
    private UpdateRowSource updatedRowSource;
    internal CommandBehavior behavior;
    private Accessor accessor;
    private SqlCeConnection connection;
    private SqlCeTransaction transaction;
    private SqlCeParameterCollection parameters;
    private SqlCeResultSet resultSet;
    private WeakReferenceCache cursorWeakRefList;
    private MetaData[] metadata;
    private SqlCeDataReader cursor;
    public string CommandText { get; public set; }
    public string IndexName { get; public set; }
    public int CommandTimeout { get; public set; }
    public CommandType CommandType { get; public set; }
    protected DbConnection DbConnection { get; protected set; }
    public SqlCeConnection Connection { get; public set; }
    protected DbParameterCollection DbParameterCollection { get; }
    public SqlCeParameterCollection Parameters { get; }
    protected DbTransaction DbTransaction { get; protected set; }
    public SqlCeTransaction Transaction { get; public set; }
    internal SqlCeTransaction InternalTransaction { get; internal set; }
    public UpdateRowSource UpdatedRowSource { get; public set; }
    internal IntPtr IQPSession { get; }
    internal IntPtr ITransact { get; }
    internal IntPtr IQPPlan { get; }
    public bool DesignTimeVisible { get; public set; }
    private static SqlCeCommand();
    internal SqlCeCommand(bool isHostControlled);
    public SqlCeCommand(string commandText);
    public SqlCeCommand(string commandText, SqlCeConnection connection);
    public SqlCeCommand(string commandText, SqlCeConnection connection, SqlCeTransaction transaction);
    public virtual string get_CommandText();
    public virtual void set_CommandText(string value);
    public string get_IndexName();
    public void set_IndexName(string value);
    public virtual int get_CommandTimeout();
    public virtual void set_CommandTimeout(int value);
    public virtual CommandType get_CommandType();
    public virtual void set_CommandType(CommandType value);
    protected virtual DbConnection get_DbConnection();
    protected virtual void set_DbConnection(DbConnection value);
    public SqlCeConnection get_Connection();
    public void set_Connection(SqlCeConnection value);
    protected virtual DbParameterCollection get_DbParameterCollection();
    public SqlCeParameterCollection get_Parameters();
    protected virtual DbTransaction get_DbTransaction();
    protected virtual void set_DbTransaction(DbTransaction value);
    public SqlCeTransaction get_Transaction();
    public void set_Transaction(SqlCeTransaction value);
    internal void set_InternalTransaction(SqlCeTransaction value);
    internal SqlCeTransaction get_InternalTransaction();
    public virtual UpdateRowSource get_UpdatedRowSource();
    public virtual void set_UpdatedRowSource(UpdateRowSource value);
    internal IntPtr get_IQPSession();
    internal IntPtr get_ITransact();
    internal IntPtr get_IQPPlan();
    protected virtual void Finalize();
    [SecurityCriticalAttribute]
private void ReleaseNativeInterfaces();
    [SecurityCriticalAttribute]
[SecurityTreatAsSafeAttribute]
protected virtual void Dispose(bool disposing);
    public void SetRange(DbRangeOptions dbRangeOptions, Object[] startData, Object[] endData);
    [SecurityCriticalAttribute]
private void CreateAccessorFromParameterList();
    [SecurityCriticalAttribute]
private void CreateParameterAccessor(MetaData[] metadata);
    private static int GetParameterSize(MetaData info, SqlCeParameter p);
    public virtual void Cancel();
    private sealed virtual override object System.ICloneable.Clone();
    internal void CloseFromConnection();
    [SecurityTreatAsSafeAttribute]
[SecurityCriticalAttribute]
private void CloseInternalCommand();
    protected virtual DbParameter CreateDbParameter();
    public SqlCeParameter CreateParameter();
    protected virtual DbDataReader ExecuteDbDataReader(CommandBehavior behavior);
    public SqlCeDataReader ExecuteReader();
    public SqlCeDataReader ExecuteReader(CommandBehavior behavior);
    public SqlCeResultSet ExecuteResultSet(ResultSetOptions options);
    public SqlCeResultSet ExecuteResultSet(ResultSetOptions options, SqlCeResultSet resultSet);
    [SecurityTreatAsSafeAttribute]
[SecurityCriticalAttribute]
private SqlCeDataReader ExecuteCommand(CommandBehavior behavior, string method, ResultSetOptions options);
    internal bool HasOpenedCursors();
    internal void ClearCursorList();
    private void SetResultSetOptions(ResultSetOptions options);
    [SecurityCriticalAttribute]
private CursorPosition MoveFirst(IntPtr pSeCursor);
    [SecurityCriticalAttribute]
private SqlCeDataReader InitializeDataReader(SqlCeDataReader reader, int resultType);
    [SecurityCriticalAttribute]
private int ExecuteCommandText(IntPtr& pCursor, Boolean& isBaseTableCursor);
    public virtual int ExecuteNonQuery();
    public virtual object ExecuteScalar();
    [SecurityCriticalAttribute]
private void OpenCursor(CommandBehavior behavior, string method, IntPtr& pSeCursor);
    private string ExpandCommandText(string method);
    private void FillParameterDataBindings(bool verifyValue);
    private void FillParameterDataBindings();
    [SecurityCriticalAttribute]
private void InitializeCommand(CommandBehavior behavior, string method);
    [SecurityCriticalAttribute]
[SecurityTreatAsSafeAttribute]
internal void OnDataBindingChange();
    public virtual void Prepare();
    internal SqlCeTransaction ValidateTransaction();
    [SecurityCriticalAttribute]
private void CompileQueryPlan();
    [SecurityCriticalAttribute]
private void CreateDataBindings();
    [SecurityCriticalAttribute]
private MetaData[] GetQueryParameters(IntPtr pQpCommand);
    [SecurityCriticalAttribute]
private void ProcessResults(int hr);
    internal void ValidateCommand(string method);
    public virtual bool get_DesignTimeVisible();
    public virtual void set_DesignTimeVisible(bool value);
}
public class System.Data.SqlServerCe.SqlCeCommandBuilder : DbCommandBuilder {
    private SqlCeRowUpdatingEventHandler _rowUpdatingHandler;
    public ConflictOption ConflictOption { get; public set; }
    public CatalogLocation CatalogLocation { get; public set; }
    public string CatalogSeparator { get; public set; }
    public SqlCeDataAdapter DataAdapter { get; public set; }
    public string QuotePrefix { get; public set; }
    public string QuoteSuffix { get; public set; }
    public string SchemaSeparator { get; public set; }
    private static SqlCeCommandBuilder();
    public SqlCeCommandBuilder(SqlCeDataAdapter adapter);
    public virtual ConflictOption get_ConflictOption();
    public virtual void set_ConflictOption(ConflictOption value);
    public virtual CatalogLocation get_CatalogLocation();
    public virtual void set_CatalogLocation(CatalogLocation value);
    public virtual string get_CatalogSeparator();
    public virtual void set_CatalogSeparator(string value);
    public SqlCeDataAdapter get_DataAdapter();
    public void set_DataAdapter(SqlCeDataAdapter value);
    public virtual string get_QuotePrefix();
    public virtual void set_QuotePrefix(string value);
    public virtual string get_QuoteSuffix();
    public virtual void set_QuoteSuffix(string value);
    public virtual string get_SchemaSeparator();
    public virtual void set_SchemaSeparator(string value);
    private void SqlCeRowUpdatingHandler(object sender, SqlCeRowUpdatingEventArgs ruevent);
    public SqlCeCommand GetInsertCommand();
    public SqlCeCommand GetUpdateCommand();
    public SqlCeCommand GetDeleteCommand();
    protected virtual void ApplyParameterInfo(DbParameter param, DataRow row, StatementType statementType, bool whereClause);
    protected virtual string GetParameterName(int parameterOrdinal);
    protected virtual string GetParameterName(string parameterName);
    protected virtual string GetParameterPlaceholder(int parameterOrdinal);
    protected virtual void SetRowUpdatingHandler(DbDataAdapter adapter);
    private void ConsistentQuoteDelimiters(string quotePrefix, string quoteSuffix);
    private static string BuildQuotedString(string quotePrefix, string quoteSuffix, string unQuotedString);
    private static bool RemoveStringQuotes(string quotePrefix, string quoteSuffix, string quotedString, String& unquotedString);
    public virtual string QuoteIdentifier(string unquotedIdentifier);
    public virtual string UnquoteIdentifier(string quotedIdentifier);
}
public class System.Data.SqlServerCe.SqlCeConnection : DbConnection {
    private static int MaxRetrialAttempts;
    private static int StartSleepInterval;
    private static Hashtable connStrCache;
    private SqlCeConnectionStringBuilder connTokens;
    private SqlCeDelegatedTransaction _delegatedTransaction;
    private bool isOpened;
    private bool isHostControlled;
    private bool removePwd;
    private IntPtr pStoreService;
    private IntPtr pStoreServer;
    private IntPtr pSeStore;
    private IntPtr pQpServices;
    private IntPtr pQpDatabase;
    private IntPtr pQpSession;
    private IntPtr pTx;
    private IntPtr pStoreEvents;
    private IntPtr pError;
    private string connStr;
    private string dataSource;
    private string modifiedConnStr;
    private ConnectionState state;
    private bool isDisposed;
    private ObjectLifeTimeTracker weakReferenceCache;
    private bool isClosing;
    private int isNativeAssemblyReleased;
    private FlushFailureEventHandler flushFailureEventHandler;
    public string DatabaseIdentifier { get; }
    public string ConnectionString { get; public set; }
    public int ConnectionTimeout { get; }
    public string Database { get; }
    public string DataSource { get; }
    internal SqlCeDelegatedTransaction DelegatedTransaction { get; internal set; }
    internal bool HasDelegatedTransaction { get; }
    public ConnectionState State { get; }
    public string ServerVersion { get; }
    protected DbProviderFactory DbProviderFactory { get; }
    internal IntPtr ITransact { get; }
    internal IntPtr IQPSession { get; }
    internal IntPtr IQPServices { get; }
    internal bool IsEnlisted { get; }
    internal SqlCeTransaction Transaction { get; }
    private static SqlCeConnection();
    public SqlCeConnection(string connectionString);
    [SecurityTreatAsSafeAttribute]
[SecurityCriticalAttribute]
public string get_DatabaseIdentifier();
    [SecurityCriticalAttribute]
internal void OnFlushFailure(int hr, IntPtr pError);
    public virtual string get_ConnectionString();
    public virtual void set_ConnectionString(string value);
    public virtual int get_ConnectionTimeout();
    public virtual string get_Database();
    public virtual string get_DataSource();
    internal SqlCeDelegatedTransaction get_DelegatedTransaction();
    internal void set_DelegatedTransaction(SqlCeDelegatedTransaction value);
    internal bool get_HasDelegatedTransaction();
    public virtual ConnectionState get_State();
    public virtual string get_ServerVersion();
    protected virtual DbProviderFactory get_DbProviderFactory();
    public void add_InfoMessage(SqlCeInfoMessageEventHandler value);
    public void remove_InfoMessage(SqlCeInfoMessageEventHandler value);
    public void add_FlushFailure(SqlCeFlushFailureEventHandler value);
    public void remove_FlushFailure(SqlCeFlushFailureEventHandler value);
    public virtual void add_StateChange(StateChangeEventHandler value);
    public virtual void remove_StateChange(StateChangeEventHandler value);
    internal IntPtr get_ITransact();
    internal IntPtr get_IQPSession();
    internal IntPtr get_IQPServices();
    internal bool get_IsEnlisted();
    [SecurityTreatAsSafeAttribute]
[SecurityCriticalAttribute]
public virtual void EnlistTransaction(Transaction SysTrans);
    [SecurityCriticalAttribute]
internal void Enlist(Transaction tx);
    internal SqlCeTransaction get_Transaction();
    protected virtual void Finalize();
    [SecurityCriticalAttribute]
private void ReleaseNativeInterfaces();
    internal void DisposeSqlCeDataRdr(SqlCeTransaction tx);
    public void Dispose();
    [SecurityCriticalAttribute]
[SecurityTreatAsSafeAttribute]
protected virtual void Dispose(bool disposing);
    public virtual void Close();
    internal void Zombie(SqlCeTransaction tx);
    [SecurityTreatAsSafeAttribute]
[SecurityCriticalAttribute]
private void Close(bool silent);
    [SecurityCriticalAttribute]
[SecurityTreatAsSafeAttribute]
public List`1<KeyValuePair`2<string, string>> GetDatabaseInfo();
    [SecurityTreatAsSafeAttribute]
[SecurityCriticalAttribute]
public SqlCeTransaction BeginTransaction(IsolationLevel isolationLevel);
    protected virtual DbTransaction BeginDbTransaction(IsolationLevel isolationLevel);
    public SqlCeTransaction BeginTransaction();
    public virtual void ChangeDatabase(string value);
    internal void CheckStateOpen(string method);
    internal void AddWeakReference(object value);
    internal void RemoveWeakReference(object value);
    public virtual DataTable GetSchema();
    public virtual DataTable GetSchema(string collectionName);
    public virtual DataTable GetSchema(string collectionName, String[] restrictionValues);
    internal bool HasOpenedCursors(SqlCeTransaction tx);
    protected virtual DbCommand CreateDbCommand();
    public SqlCeCommand CreateCommand();
    private void OnStateChange(ConnectionState original, ConnectionState state);
    [SecurityTreatAsSafeAttribute]
[SecurityCriticalAttribute]
public virtual void Open();
    [SecurityTreatAsSafeAttribute]
[SecurityCriticalAttribute]
internal void Open(bool silent);
    private static void CachedConnectionStringAdd(string connStr, string modifiedConnStr, SqlCeConnectionStringBuilder connTokens);
    [SecurityCriticalAttribute]
private void ProcessResults(int hr);
    [SecurityCriticalAttribute]
internal SqlCeException ProcessResults(int hr, IntPtr pError, object src);
}
[DefaultPropertyAttribute("DataSource")]
[DefaultMemberAttribute("Item")]
[TypeConverterAttribute("System.Data.SqlServerCe.SqlCeConnectionStringBuilder/SqlCeConnectionStringBuilderConverter")]
public class System.Data.SqlServerCe.SqlCeConnectionStringBuilder : DbConnectionStringBuilder {
    private static String[] _validKeywords;
    private static Dictionary`2<string, Keywords> _keywords;
    private int _autoshrinkThreshold;
    private bool _caseSensitive;
    private string _dataSource;
    private int _defaultLockEscalation;
    private int _defaultLockTimeout;
    private bool _encrypt;
    private string _encryptionMode;
    private bool _enlist;
    private int _fileAccessRetryTimeout;
    private string _fileMode;
    private int _flushInterval;
    private int _initialLcid;
    private int _maxBufferSize;
    private int _maxDatabaseSize;
    private string _password;
    private bool _persistSecurityInfo;
    private int _tempFileMaxSize;
    private string _tempFilePath;
    public object Item { get; public set; }
    [ResCategoryAttribute("DataCategory_Advanced")]
[DisplayNameAttribute("Autoshrink Threshold")]
[ResDescriptionAttribute("SqlCeConnectionString_AutoShrinkThreshold")]
[RefreshPropertiesAttribute("1")]
public int AutoshrinkThreshold { get; public set; }
    [RefreshPropertiesAttribute("1")]
[DisplayNameAttribute("Case Sensitive")]
[ResCategoryAttribute("DataCategory_Initialization")]
[BrowsableAttribute("False")]
[ResDescriptionAttribute("SqlCeConnectionString_CaseSensitive")]
public bool CaseSensitive { get; public set; }
    [DisplayNameAttribute("Data Source")]
[ResDescriptionAttribute("SqlCeConnectionString_DataSource")]
[RefreshPropertiesAttribute("1")]
[ResCategoryAttribute("DataCategory_Source")]
public string DataSource { get; public set; }
    [RefreshPropertiesAttribute("1")]
[DisplayNameAttribute("Default Lock Escalation")]
[ResCategoryAttribute("DataCategory_Advanced")]
[ResDescriptionAttribute("SqlCeConnectionString_DefaultLockEscalation")]
public int DefaultLockEscalation { get; public set; }
    [DisplayNameAttribute("Default Lock Timeout")]
[ResDescriptionAttribute("SqlCeConnectionString_DefaultLockTimeout")]
[RefreshPropertiesAttribute("1")]
[ResCategoryAttribute("DataCategory_Advanced")]
public int DefaultLockTimeout { get; public set; }
    [RefreshPropertiesAttribute("1")]
[BrowsableAttribute("False")]
[DisplayNameAttribute("Encrypt Database")]
[ResCategoryAttribute("DataCategory_Security")]
[ResDescriptionAttribute("SqlCeConnectionString_Encrypt")]
public bool Encrypt { get; public set; }
    [ResCategoryAttribute("DataCategory_Security")]
[ResDescriptionAttribute("SqlCeConnectionString_EncryptionMode")]
[RefreshPropertiesAttribute("1")]
[TypeConverterAttribute("System.Data.SqlServerCe.SqlCeConnectionStringBuilder/EncryptionModeConverter")]
[BrowsableAttribute("False")]
[DisplayNameAttribute("Encryption Mode")]
public string EncryptionMode { get; public set; }
    [RefreshPropertiesAttribute("1")]
[BrowsableAttribute("False")]
[ResCategoryAttribute("DataCategory_Advanced")]
[ResDescriptionAttribute("SqlCeConnectionString_Enlist")]
[DisplayNameAttribute("Enlist")]
public bool Enlist { get; public set; }
    [DisplayNameAttribute("File Access Retry Timeout")]
[RefreshPropertiesAttribute("1")]
[BrowsableAttribute("False")]
[ResCategoryAttribute("DataCategory_Initialization")]
[ResDescriptionAttribute("SqlCeConnectionString_FileAccessRetryTimeout")]
public int FileAccessRetryTimeout { get; public set; }
    [RefreshPropertiesAttribute("1")]
[BrowsableAttribute("False")]
[DisplayNameAttribute("Mode")]
[ResCategoryAttribute("DataCategory_Source")]
[ResDescriptionAttribute("SqlCeConnectionString_FileMode")]
public string FileMode { get; public set; }
    [ResCategoryAttribute("DataCategory_Advanced")]
[ResDescriptionAttribute("SqlCeConnectionString_FlushInterval")]
[RefreshPropertiesAttribute("1")]
[DisplayNameAttribute("Flush Interval")]
public int FlushInterval { get; public set; }
    [RefreshPropertiesAttribute("1")]
[BrowsableAttribute("False")]
[DisplayNameAttribute("Locale Identifier")]
[ResDescriptionAttribute("SqlCeConnectionString_Lcid")]
[ResCategoryAttribute("DataCategory_Initialization")]
public int InitialLcid { get; public set; }
    [DisplayNameAttribute("Max Buffer Size")]
[ResCategoryAttribute("DataCategory_Advanced")]
[ResDescriptionAttribute("SqlCeConnectionString_MaxBufferSize")]
[RefreshPropertiesAttribute("1")]
public int MaxBufferSize { get; public set; }
    [RefreshPropertiesAttribute("1")]
[ResCategoryAttribute("DataCategory_Source")]
[ResDescriptionAttribute("SqlCeConnectionString_MaxDatabaseSize")]
[DisplayNameAttribute("Max Database Size")]
public int MaxDatabaseSize { get; public set; }
    [ResCategoryAttribute("DataCategory_Security")]
[PasswordPropertyTextAttribute("True")]
[DisplayNameAttribute("Password")]
[ResDescriptionAttribute("SqlCeConnectionString_Password")]
[RefreshPropertiesAttribute("1")]
public string Password { get; public set; }
    [DisplayNameAttribute("Persist Security Info")]
[ResCategoryAttribute("DataCategory_Security")]
[ResDescriptionAttribute("SqlCeConnectionString_PersistSecurityInfo")]
[RefreshPropertiesAttribute("1")]
public bool PersistSecurityInfo { get; public set; }
    [RefreshPropertiesAttribute("1")]
[ResDescriptionAttribute("SqlCeConnectionString_TempFileMaxSize")]
[DisplayNameAttribute("Temp File Max Size")]
[ResCategoryAttribute("DataCategory_Advanced")]
public int TempFileMaxSize { get; public set; }
    [DisplayNameAttribute("Temp File Directory")]
[ResDescriptionAttribute("SqlCeConnectionString_TempFilePath")]
[RefreshPropertiesAttribute("1")]
[ResCategoryAttribute("DataCategory_Advanced")]
public string TempFilePath { get; public set; }
    public ICollection Keys { get; }
    public ICollection Values { get; }
    public bool IsFixedSize { get; }
    internal string OledbConnectionString { get; }
    private static SqlCeConnectionStringBuilder();
    public SqlCeConnectionStringBuilder(string connectionString);
    public virtual void Clear();
    public virtual bool ContainsKey(string keyword);
    public virtual bool ShouldSerialize(string keyword);
    public virtual bool TryGetValue(string keyword, Object& value);
    public virtual bool Remove(string keyword);
    public virtual object get_Item(string keyword);
    public virtual void set_Item(string keyword, object value);
    public int get_AutoshrinkThreshold();
    public void set_AutoshrinkThreshold(int value);
    public bool get_CaseSensitive();
    public void set_CaseSensitive(bool value);
    public string get_DataSource();
    public void set_DataSource(string value);
    public int get_DefaultLockEscalation();
    public void set_DefaultLockEscalation(int value);
    public int get_DefaultLockTimeout();
    public void set_DefaultLockTimeout(int value);
    public bool get_Encrypt();
    public void set_Encrypt(bool value);
    public string get_EncryptionMode();
    public void set_EncryptionMode(string value);
    public bool get_Enlist();
    public void set_Enlist(bool value);
    public int get_FileAccessRetryTimeout();
    public void set_FileAccessRetryTimeout(int value);
    public string get_FileMode();
    public void set_FileMode(string value);
    public int get_FlushInterval();
    public void set_FlushInterval(int value);
    public int get_InitialLcid();
    public void set_InitialLcid(int value);
    public int get_MaxBufferSize();
    public void set_MaxBufferSize(int value);
    public int get_MaxDatabaseSize();
    public void set_MaxDatabaseSize(int value);
    public string get_Password();
    public void set_Password(string value);
    public bool get_PersistSecurityInfo();
    public void set_PersistSecurityInfo(bool value);
    public int get_TempFileMaxSize();
    public void set_TempFileMaxSize(int value);
    public string get_TempFilePath();
    public void set_TempFilePath(string value);
    public virtual ICollection get_Keys();
    public virtual ICollection get_Values();
    public virtual bool get_IsFixedSize();
    internal string get_OledbConnectionString();
    private static bool ConvertToBoolean(object value);
    private static int ConvertToInt32(object value);
    private static string ConvertToString(object value);
    private object GetAt(Keywords index);
    private static Keywords GetIndex(string keyword);
    private void Reset(Keywords index);
    private void SetValue(string keyword, bool value);
    private void SetValue(string keyword, int value);
    private void SetValue(string keyword, string value);
}
internal class System.Data.SqlServerCe.SqlCeConnectionStringDefaults : object {
    public static int AutoShrinkThreshold;
    public static int AutoShrinkThresholdOff;
    public static int AutoShrinkThresholdMax;
    public static bool CaseSensitive;
    public static string DataSource;
    public static int DefaultLockEscalation;
    public static int DefaultLockEscalationMin;
    public static int DefaultLockTimeOut;
    public static int DefaultLockTimeOutNone;
    public static bool Encrypt;
    public static string EncryptionMode;
    public static bool Enlist;
    public static int FileAccessRetryTimeout;
    public static int FileAccessRetryTimeoutMin;
    public static int FileAccessRetryTimeoutMax;
    public static string FileMode;
    public static int FlushInterval;
    public static int FlushIntervalMin;
    public static int FlushIntervalMax;
    public static int Lcid;
    public static int MaxBufferSize;
    public static int MaxBufferSizeMin;
    public static int MaxBufferSizeMax;
    public static int MaxDatabaseSize;
    public static int MaxDatabaseSizeMin;
    public static int MaxDatabaseSizeMax;
    public static string Password;
    public static bool PersistSecurityInfo;
    public static int TempFileMaxSize;
    public static int TempFileMaxSizeMin;
    public static int TempFileMaxSizeMax;
    public static string TempFilePath;
}
internal class System.Data.SqlServerCe.SqlCeConnectionStringKeywords : object {
    public static string AutoShrinkThreshold;
    public static string CaseSensitive;
    public static string DataSource;
    public static string DefaultLockEscalation;
    public static string DefaultLockTimeout;
    public static string Encrypt;
    public static string EncryptionMode;
    public static string Enlist;
    public static string FileAccessRetryTimeout;
    public static string FlushInterval;
    public static string Lcid;
    public static string MaxBufferSize;
    public static string MaxDatabaseSize;
    public static string FileMode;
    public static string Password;
    public static string PersistSecurityInfo;
    public static string TempFilePath;
    public static string TempFileMaxSize;
}
internal class System.Data.SqlServerCe.SqlCeConnectionStringSynonyms : object {
    public static string AutoShrinkThreshold;
    public static string CaseSensitive;
    public static string CaseSensitiveSynonym;
    public static string DataSource;
    public static string DefaultLockEscalation;
    public static string DefaultLockTimeout;
    public static string Encrypt;
    public static string EncryptSynonym;
    public static string EncryptionMode;
    public static string Enlist;
    public static string FlushInterval;
    public static string Lcid;
    public static string LcidSynonym;
    public static string MaxBufferSize;
    public static string MaxDatabaseSize;
    public static string FileMode;
    public static string FileModeSynonym;
    public static string Pwd;
    public static string Password;
    public static string PasswordSynonym;
    public static string TempFilePath;
    public static string TempFilePathSynonym;
    public static string TempFileMaxSize;
}
public class System.Data.SqlServerCe.SqlCeDataAdapter : DbDataAdapter {
    public SqlCeCommand DeleteCommand { get; public set; }
    public SqlCeCommand InsertCommand { get; public set; }
    public SqlCeCommand SelectCommand { get; public set; }
    public SqlCeCommand UpdateCommand { get; public set; }
    private static SqlCeDataAdapter();
    public SqlCeDataAdapter(SqlCeCommand selectCommand);
    public SqlCeDataAdapter(string selectCommandText, string selectConnectionString);
    public SqlCeDataAdapter(string selectCommandText, SqlCeConnection selectConnection);
    private SqlCeDataAdapter(SqlCeDataAdapter from);
    public void Dispose();
    protected virtual void Dispose(bool disposing);
    public SqlCeCommand get_DeleteCommand();
    public void set_DeleteCommand(SqlCeCommand value);
    public SqlCeCommand get_InsertCommand();
    public void set_InsertCommand(SqlCeCommand value);
    public SqlCeCommand get_SelectCommand();
    public void set_SelectCommand(SqlCeCommand value);
    public SqlCeCommand get_UpdateCommand();
    public void set_UpdateCommand(SqlCeCommand value);
    public void add_RowUpdated(SqlCeRowUpdatedEventHandler value);
    public void remove_RowUpdated(SqlCeRowUpdatedEventHandler value);
    public void add_RowUpdating(SqlCeRowUpdatingEventHandler value);
    public void remove_RowUpdating(SqlCeRowUpdatingEventHandler value);
    private sealed virtual override object System.ICloneable.Clone();
    protected virtual RowUpdatedEventArgs CreateRowUpdatedEvent(DataRow dataRow, IDbCommand command, StatementType statementType, DataTableMapping tableMapping);
    protected virtual RowUpdatingEventArgs CreateRowUpdatingEvent(DataRow dataRow, IDbCommand command, StatementType statementType, DataTableMapping tableMapping);
    protected virtual void OnRowUpdated(RowUpdatedEventArgs value);
    protected virtual void OnRowUpdating(RowUpdatingEventArgs value);
}
[DefaultMemberAttribute("Item")]
public class System.Data.SqlServerCe.SqlCeDataReader : DbDataReader {
    private object thisLock;
    private int currAccessor;
    internal Int32[] bindingIndex;
    internal Int32[] accessorIndex;
    internal int recordsAffected;
    internal ResultSetOptions cursorCapabilities;
    internal CursorPosition cursorPosition;
    private int fieldCount;
    private int lastBlobColumn;
    private int indexColumnCount;
    private bool sequentialAccess;
    internal bool isDisposed;
    private bool isFinalized;
    private int sequentialOrdinal;
    private long sequentialUnitsRead;
    internal FETCH fetchDirection;
    internal bool isBaseTableCursor;
    internal bool isOnRow;
    private bool isClosed;
    private bool useIndex;
    private bool isHostControlled;
    internal SqlCeConnection connection;
    internal SqlCeTransaction transaction;
    internal Accessor[] accessorArray;
    internal IntPtr pSeCursor;
    internal IntPtr pError;
    private CommandBehavior behavior;
    private DataTable dbSchemaTable;
    internal MetaData[] metadata;
    internal FieldNameLookup fieldNameLookup;
    public int Depth { get; }
    public int FieldCount { get; }
    public bool IsClosed { get; }
    public int RecordsAffected { get; }
    public object Item { get; }
    public object Item { get; }
    public bool HasRows { get; }
    public int HiddenFieldCount { get; }
    private static SqlCeDataReader();
    [SecurityCriticalAttribute]
internal SqlCeDataReader(SqlCeConnection connection, SqlCeCommand command);
    public virtual int get_Depth();
    public virtual int get_FieldCount();
    public virtual bool get_IsClosed();
    public virtual int get_RecordsAffected();
    public virtual object get_Item(int index);
    public virtual object get_Item(string name);
    public virtual bool get_HasRows();
    public int get_HiddenFieldCount();
    internal void InitializeReader(SqlCeConnection connection, SqlCeCommand command);
    public void Dispose();
    protected virtual void Finalize();
    [SecurityCriticalAttribute]
private void ReleaseNativeInterfaces();
    [SecurityTreatAsSafeAttribute]
[SecurityCriticalAttribute]
protected virtual void Dispose(bool disposing);
    public virtual void Close();
    public virtual DataTable GetSchemaTable();
    [SecurityTreatAsSafeAttribute]
[SecurityCriticalAttribute]
public bool Seek(DbSeekOptions dbSeekOptions, Object[] index);
    [SecurityCriticalAttribute]
internal void SetRange(DbRangeOptions dbRangeOptions, Object[] startData, Object[] endData);
    internal void BuildSchemaTable();
    private static bool IsAliased(MetaData info);
    protected bool IsCommandBehavior(CommandBehavior condition);
    [SecurityCriticalAttribute]
internal void FillMetaData(SqlCeCommand command);
    [SecurityCriticalAttribute]
private void FillMetaData(IntPtr pIUnknown);
    [SecurityCriticalAttribute]
private void PopulateMetaData(int columnCount, IntPtr prgColumnInfo);
    [SecurityCriticalAttribute]
private Accessor FetchValue(int index);
    [SecurityCriticalAttribute]
internal void ProcessResults(int hr);
    public virtual bool NextResult();
    protected virtual void OnMove();
    public virtual bool Read();
    [SecurityTreatAsSafeAttribute]
[SecurityCriticalAttribute]
internal bool Move(DIRECTION direction);
    [SecurityCriticalAttribute]
private int Move(IntPtr pSeCursor, DIRECTION direction);
    [SecurityCriticalAttribute]
private bool IsEndOfRowset(int hr);
    [SecurityCriticalAttribute]
[SecurityTreatAsSafeAttribute]
internal void ReleaseCurrentRow();
    [SecurityCriticalAttribute]
internal void CreateAccessors(SqlCeCommand command, int columnCount, bool allowMultipleAccessor);
    [SecurityCriticalAttribute]
private void CreateBindingsFromMetaData(SqlCeCommand command, int columnCount, bool allowMultipleAccessor);
    public virtual bool GetBoolean(int ordinal);
    public virtual decimal GetDecimal(int ordinal);
    public virtual byte GetByte(int ordinal);
    private void DoSequentialCheck(int ordinal, long dataIndex, string method);
    [SecurityCriticalAttribute]
[SecurityTreatAsSafeAttribute]
public virtual long GetBytes(int ordinal, long dataIndex, Byte[] buffer, int bufferIndex, int length);
    [SecurityCriticalAttribute]
[SecurityTreatAsSafeAttribute]
public virtual long GetChars(int ordinal, long dataIndex, Char[] buffer, int bufferIndex, int length);
    public virtual string GetDataTypeName(int index);
    public virtual DateTime GetDateTime(int ordinal);
    public virtual double GetDouble(int ordinal);
    public virtual Type GetFieldType(int ordinal);
    public virtual Type GetProviderSpecificFieldType(int ordinal);
    public virtual float GetFloat(int ordinal);
    public virtual Guid GetGuid(int ordinal);
    public virtual short GetInt16(int ordinal);
    public virtual int GetInt32(int ordinal);
    public virtual long GetInt64(int ordinal);
    public virtual string GetName(int index);
    public virtual int GetOrdinal(string name);
    [SecurityTreatAsSafeAttribute]
[SecurityCriticalAttribute]
public virtual string GetString(int ordinal);
    [SecurityCriticalAttribute]
[SecurityTreatAsSafeAttribute]
public virtual object GetValue(int ordinal);
    [SecurityCriticalAttribute]
[SecurityTreatAsSafeAttribute]
public virtual int GetValues(Object[] values);
    [SecurityCriticalAttribute]
private object GetLongValue(MetaData info, int ordinal);
    [SecurityCriticalAttribute]
private int GetBytes(MetaData info, Byte[] buffer, int dataIndex, int bufferIndex, int cb);
    [SecurityCriticalAttribute]
private int GetChars(MetaData info, Char[] buffer, int dataIndex, int bufferIndex, int cch);
    public virtual SqlBoolean GetSqlBoolean(int ordinal);
    public virtual SqlMoney GetSqlMoney(int ordinal);
    public virtual SqlDecimal GetSqlDecimal(int ordinal);
    public virtual SqlByte GetSqlByte(int ordinal);
    public virtual SqlBinary GetSqlBinary(int ordinal);
    public virtual SqlDateTime GetSqlDateTime(int ordinal);
    public virtual SqlDouble GetSqlDouble(int ordinal);
    public virtual SqlSingle GetSqlSingle(int ordinal);
    public virtual SqlGuid GetSqlGuid(int ordinal);
    public virtual SqlInt16 GetSqlInt16(int ordinal);
    public virtual SqlInt32 GetSqlInt32(int ordinal);
    public virtual SqlInt64 GetSqlInt64(int ordinal);
    public virtual SqlString GetSqlString(int ordinal);
    [SecurityTreatAsSafeAttribute]
[SecurityCriticalAttribute]
public virtual bool IsDBNull(int ordinal);
    public virtual IEnumerator GetEnumerator();
    public virtual char GetChar(int ordinal);
}
internal class System.Data.SqlServerCe.SqlCeDelegatedTransaction : object {
    private SqlCeConnection _connection;
    private IsolationLevel seIsolationLevel;
    private SqlCeTransaction _sqlCeTransaction;
    private Transaction _atomicTransaction;
    internal Transaction Transaction { get; }
    public SqlCeTransaction SqlCeTransaction { get; public set; }
    private static SqlCeDelegatedTransaction();
    internal SqlCeDelegatedTransaction(SqlCeConnection connection, Transaction tx);
    private void CloseDelegatedConnection(SqlCeConnection connection);
    internal Transaction get_Transaction();
    public sealed virtual void Initialize();
    internal static TransactionPromotionException PromotionFailed(Exception inner);
    public sealed virtual Byte[] Promote();
    public sealed virtual void Rollback(SinglePhaseEnlistment enlistment);
    public sealed virtual void SinglePhaseCommit(SinglePhaseEnlistment enlistment);
    public SqlCeTransaction get_SqlCeTransaction();
    public void set_SqlCeTransaction(SqlCeTransaction value);
}
public class System.Data.SqlServerCe.SqlCeEngine : object {
    private SqlCeConnectionStringBuilder connTokens;
    private string connStr;
    private bool isDisposed;
    private int isNativeAssemblyReleased;
    public string LocalConnectionString { get; public set; }
    private static SqlCeEngine();
    public SqlCeEngine(string connectionString);
    public sealed virtual void Dispose();
    protected virtual void Finalize();
    [SecurityCriticalAttribute]
[SecurityTreatAsSafeAttribute]
private void Dispose(bool disposing);
    public string get_LocalConnectionString();
    public void set_LocalConnectionString(string value);
    public void Compact(string connectionString);
    public void Shrink();
    public void Repair(string connectionString, RepairOption options);
    public bool Verify();
    public bool Verify(VerifyOption option);
    [SecurityCriticalAttribute]
[SecurityTreatAsSafeAttribute]
private void Repair(SEFIXOPTION option, string dstConnStr, RepairOption repairOption);
    [SecurityTreatAsSafeAttribute]
[SecurityCriticalAttribute]
public void CreateDatabase();
    [SecurityCriticalAttribute]
private static void ProcessResults(IntPtr pError, int hr);
    public void Upgrade();
    public void Upgrade(string destConnectionString);
}
public class System.Data.SqlServerCe.SqlCeError : object {
    private int hResult;
    private string message;
    private string formattedMessage;
    private int nativeError;
    private string source;
    private Int32[] numericErrorParameters;
    private String[] errorParameters;
    internal static Regex ParamInfoRegex;
    public int HResult { get; }
    public string Message { get; }
    public int NativeError { get; }
    public string Source { get; }
    public Int32[] NumericErrorParameters { get; }
    public String[] ErrorParameters { get; }
    private static SqlCeError();
    internal SqlCeError(int hResult, string message, int nativeError, string source, int numericParameter1, int numericParameter2, int numericParameter3, string errorParameter1, string errorParameter2, string errorParameter3);
    public int get_HResult();
    public string get_Message();
    public int get_NativeError();
    public string get_Source();
    public Int32[] get_NumericErrorParameters();
    public String[] get_ErrorParameters();
    public virtual string ToString();
    internal static SqlCeError GetDefaultError(int hr);
    private string FormatErrorMessage(SqlCeError err);
}
[DefaultMemberAttribute("Item")]
public class System.Data.SqlServerCe.SqlCeErrorCollection : object {
    private ArrayList items;
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    public int Count { get; }
    public SqlCeError Item { get; }
    private static SqlCeErrorCollection();
    [SecurityCriticalAttribute]
internal void FillErrorInformation(int hr, IntPtr pIError);
    [SecurityCriticalAttribute]
internal void FillErrorCollection(int hr, IntPtr pISSCEErrors);
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    public sealed virtual int get_Count();
    public SqlCeError get_Item(int index);
    internal void Add(SqlCeError error);
    public sealed virtual void CopyTo(Array array, int index);
    public sealed virtual IEnumerator GetEnumerator();
}
public class System.Data.SqlServerCe.SqlCeException : DbException {
    private SqlCeErrorCollection _errors;
    private string _customMessage;
    public SqlCeErrorCollection Errors { get; private set; }
    public int HResult { get; }
    public int NativeError { get; }
    public string Message { get; }
    public string Source { get; }
    private static SqlCeException();
    private SqlCeException(string msg);
    private SqlCeException(string msg, Exception inner);
    internal SqlCeException(SqlCeErrorCollection errors);
    protected SqlCeException(SerializationInfo info, StreamingContext context);
    [SecurityCriticalAttribute]
public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    public SqlCeErrorCollection get_Errors();
    private void set_Errors(SqlCeErrorCollection value);
    public int get_HResult();
    public int get_NativeError();
    public virtual string get_Message();
    public virtual string get_Source();
    [SecurityCriticalAttribute]
internal static SqlCeException FillErrorInformation(int hr, IntPtr pIError);
    [SecurityCriticalAttribute]
internal static SqlCeException FillErrorCollection(int hr, IntPtr pISSCEErrors);
    internal static SqlCeException CreateException(SqlCeErrorCollection errors);
    internal static SqlCeException CreateException(string message);
    internal static SqlCeException CreateException(string message, Exception inner);
    private string BuildExceptionMessage();
}
public class System.Data.SqlServerCe.SqlCeFlushFailureEventArgs : EventArgs {
    private object src;
    private SqlCeErrorCollection errors;
    public SqlCeErrorCollection Errors { get; }
    public string Message { get; }
    private static SqlCeFlushFailureEventArgs();
    [SecurityCriticalAttribute]
internal SqlCeFlushFailureEventArgs(int hr, IntPtr pError, object src);
    public SqlCeErrorCollection get_Errors();
    public string get_Message();
    public virtual string ToString();
}
public class System.Data.SqlServerCe.SqlCeFlushFailureEventHandler : MulticastDelegate {
    public SqlCeFlushFailureEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, SqlCeFlushFailureEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, SqlCeFlushFailureEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Data.SqlServerCe.SqlCeInfoMessageEventArgs : EventArgs {
    private object src;
    private SqlCeErrorCollection errors;
    public SqlCeErrorCollection Errors { get; }
    public string Message { get; }
    private static SqlCeInfoMessageEventArgs();
    [SecurityCriticalAttribute]
internal SqlCeInfoMessageEventArgs(int hr, IntPtr pError, object src);
    public SqlCeErrorCollection get_Errors();
    public string get_Message();
    public virtual string ToString();
}
public class System.Data.SqlServerCe.SqlCeInfoMessageEventHandler : MulticastDelegate {
    public SqlCeInfoMessageEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, SqlCeInfoMessageEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, SqlCeInfoMessageEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class System.Data.SqlServerCe.SqlCeInfoSchemaColumn : object {
    public string ParamName;
    public string ColumnName;
    public SqlCeType SqlCeType;
    public int MaxLength;
    public object DefaultValue;
    public byte Precision;
    public byte Scale;
    public int Ordinal;
    private static SqlCeInfoSchemaColumn();
}
public class System.Data.SqlServerCe.SqlCeInvalidDatabaseFormatException : SqlCeException {
    private static SqlCeInvalidDatabaseFormatException();
    internal SqlCeInvalidDatabaseFormatException(SqlCeErrorCollection errors);
    protected SqlCeInvalidDatabaseFormatException(SerializationInfo info, StreamingContext context);
    [SecurityCriticalAttribute]
public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
public class System.Data.SqlServerCe.SqlCeLockTimeoutException : SqlCeException {
    private static SqlCeLockTimeoutException();
    internal SqlCeLockTimeoutException(SqlCeErrorCollection errors);
    protected SqlCeLockTimeoutException(SerializationInfo info, StreamingContext context);
    [SecurityCriticalAttribute]
public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
public class System.Data.SqlServerCe.SqlCeParameter : DbParameter {
    private byte precision;
    private byte scale;
    private int size;
    private bool designNullable;
    private bool userSpecifiedType;
    private bool userSpecifiedScale;
    private bool valueConverted;
    private bool inferType;
    private string parameterName;
    private string sourceColumn;
    private object value;
    private object convertedValue;
    private SqlCeParameterCollection parent;
    private SqlCeType typeMap;
    private DataRowVersion sourceVersion;
    public DbType DbType { get; public set; }
    public ParameterDirection Direction { get; public set; }
    public bool IsNullable { get; public set; }
    public int Offset { get; public set; }
    public bool SourceColumnNullMapping { get; public set; }
    [DbProviderSpecificTypePropertyAttribute("True")]
public SqlDbType SqlDbType { get; public set; }
    internal SqlCeType NativeType { get; internal set; }
    internal bool IsUserSpecifiedType { get; }
    public string ParameterName { get; public set; }
    internal string InternalParameterName { get; internal set; }
    internal SqlCeParameterCollection Parent { get; internal set; }
    public byte Precision { get; public set; }
    public byte Scale { get; public set; }
    public int Size { get; public set; }
    public string SourceColumn { get; public set; }
    public DataRowVersion SourceVersion { get; public set; }
    public object Value { get; public set; }
    private static SqlCeParameter();
    public SqlCeParameter(string name, object value);
    public SqlCeParameter(string name, SqlDbType dataType);
    public SqlCeParameter(string name, SqlDbType dataType, int size);
    public SqlCeParameter(string name, SqlDbType dataType, int size, string sourceColumn);
    public SqlCeParameter(string parameterName, SqlDbType dbType, int size, bool isNullable, byte precision, byte scale, string sourceColumn, DataRowVersion sourceVersion, object value);
    public SqlCeParameter(string parameterName, SqlDbType dbType, int size, ParameterDirection direction, bool isNullable, byte precision, byte scale, string sourceColumn, DataRowVersion sourceVersion, object value);
    public virtual DbType get_DbType();
    public virtual void set_DbType(DbType value);
    public virtual ParameterDirection get_Direction();
    public virtual void set_Direction(ParameterDirection value);
    public virtual bool get_IsNullable();
    public virtual void set_IsNullable(bool value);
    public int get_Offset();
    public void set_Offset(int value);
    public virtual bool get_SourceColumnNullMapping();
    public virtual void set_SourceColumnNullMapping(bool value);
    public SqlDbType get_SqlDbType();
    public void set_SqlDbType(SqlDbType value);
    internal SqlCeType get_NativeType();
    internal void set_NativeType(SqlCeType value);
    internal bool get_IsUserSpecifiedType();
    public virtual string get_ParameterName();
    public virtual void set_ParameterName(string value);
    internal string get_InternalParameterName();
    internal void set_InternalParameterName(string value);
    internal SqlCeParameterCollection get_Parent();
    internal void set_Parent(SqlCeParameterCollection value);
    public byte get_Precision();
    public void set_Precision(byte value);
    public byte get_Scale();
    public void set_Scale(byte value);
    public virtual int get_Size();
    public virtual void set_Size(int value);
    public virtual string get_SourceColumn();
    public virtual void set_SourceColumn(string value);
    public virtual DataRowVersion get_SourceVersion();
    public virtual void set_SourceVersion(DataRowVersion value);
    public virtual object get_Value();
    public virtual void set_Value(object value);
    public virtual void ResetDbType();
    private void CopyTo(DbParameter destination);
    private sealed virtual override object System.ICloneable.Clone();
    private void BindingChange();
    internal int GetParameterLength();
    internal object GetParameterValue();
    private void ConvertValue();
    public virtual string ToString();
}
[DefaultMemberAttribute("Item")]
public class System.Data.SqlServerCe.SqlCeParameterCollection : DbParameterCollection {
    private SqlCeCommand parent;
    private Dictionary`2<string, SqlCeParameter> m_KeyValuePairs;
    private List`1<SqlCeParameter> m_Values;
    private DstComparer m_KeyComparer;
    public bool IsSynchronized { get; }
    public object SyncRoot { get; }
    public bool IsReadOnly { get; }
    public bool IsFixedSize { get; }
    public int Count { get; }
    private Type ItemType { get; }
    public SqlCeParameter Item { get; public set; }
    public SqlCeParameter Item { get; public set; }
    private static SqlCeParameterCollection();
    internal SqlCeParameterCollection(SqlCeCommand parent);
    public virtual bool get_IsSynchronized();
    public virtual object get_SyncRoot();
    public virtual bool get_IsReadOnly();
    public virtual bool get_IsFixedSize();
    public virtual int get_Count();
    private Type get_ItemType();
    private Exception ThrowParamterExistsException();
    private Exception ThrowParamterNotFoundException(string parameterName);
    private Exception ThrowParamterNotFoundException(int index);
    private void RangeCheck(int index);
    private void RangeCheck(string parameterName, SqlCeParameter& param);
    private int RangeCheckIndex(string parameterName);
    protected virtual DbParameter GetParameter(string parameterName);
    protected virtual DbParameter GetParameter(int index);
    protected virtual void SetParameter(int index, DbParameter value);
    protected virtual void SetParameter(string parameterName, DbParameter value);
    public SqlCeParameter get_Item(int index);
    public void set_Item(int index, SqlCeParameter value);
    public SqlCeParameter get_Item(string parameterName);
    public void set_Item(string parameterName, SqlCeParameter value);
    private void Replace(int index, SqlCeParameter newValue);
    internal string OnParameterNameChange(SqlCeParameter param, string newName);
    private List`1<SqlCeParameter> InitCollections();
    internal void AddWithoutEvents(int index, SqlCeParameter value);
    public virtual void AddRange(Array values);
    public virtual int Add(object value);
    public SqlCeParameter Add(SqlCeParameter value);
    public SqlCeParameter AddWithValue(string parameterName, object value);
    [ObsoleteAttribute("Add(String parameterName, Object value) has been deprecated.  Use AddWithValue(String parameterName, Object value).", "False")]
public SqlCeParameter Add(string parameterName, object value);
    public SqlCeParameter Add(string parameterName, SqlDbType type);
    public SqlCeParameter Add(string parameterName, SqlDbType type, int size);
    public SqlCeParameter Add(string parameterName, SqlDbType type, int size, string sourceColumn);
    public virtual bool Contains(string value);
    public virtual bool Contains(object value);
    public virtual void Clear();
    internal void ClearWithoutEvents();
    public virtual void CopyTo(Array array, int index);
    public virtual IEnumerator GetEnumerator();
    public virtual int IndexOf(string parameterName);
    public virtual int IndexOf(object value);
    public virtual void Insert(int index, object value);
    internal void OnDataBindingChange();
    public virtual void RemoveAt(int index);
    public virtual void RemoveAt(string parameterName);
    private void RemoveIndex(int index);
    public virtual void Remove(object value);
    private void ValidateType(object value);
    private void Validate(int index, SqlCeParameter value);
}
public class System.Data.SqlServerCe.SqlCeProviderFactory : DbProviderFactory {
    public static SqlCeProviderFactory Instance;
    private static SqlCeProviderFactory();
    public virtual DbCommand CreateCommand();
    public virtual DbCommandBuilder CreateCommandBuilder();
    public virtual DbConnection CreateConnection();
    public virtual DbDataAdapter CreateDataAdapter();
    public virtual DbParameter CreateParameter();
    public virtual DbConnectionStringBuilder CreateConnectionStringBuilder();
    [SecurityCriticalAttribute]
[SecurityTreatAsSafeAttribute]
private sealed virtual override object System.IServiceProvider.GetService(Type serviceType);
}
[SecurityCriticalAttribute("1")]
public class System.Data.SqlServerCe.SqlCeRemoteDataAccess : object {
    private IntPtr pIRda;
    private IntPtr pIErrors;
    private int isNativeAssemblyReleased;
    public string LocalConnectionString { get; public set; }
    public string InternetUrl { get; public set; }
    public string InternetLogin { get; public set; }
    public string InternetPassword { get; public set; }
    public bool ConnectionManager { get; public set; }
    public string InternetProxyServer { get; public set; }
    public string InternetProxyLogin { get; public set; }
    public string InternetProxyPassword { get; public set; }
    public int ConnectTimeout { get; public set; }
    public int SendTimeout { get; public set; }
    public int ReceiveTimeout { get; public set; }
    private int DataSendTimeout { get; private set; }
    private int DataReceiveTimeout { get; private set; }
    private int ControlSendTimeout { get; private set; }
    private int ControlReceiveTimeout { get; private set; }
    public short ConnectionRetryTimeout { get; public set; }
    public short CompressionLevel { get; public set; }
    private static SqlCeRemoteDataAccess();
    public SqlCeRemoteDataAccess(string internetUrl, string localConnectionString);
    public SqlCeRemoteDataAccess(string internetUrl, string internetLogin, string internetPassword, string localConnectionString);
    public sealed virtual void Dispose();
    protected virtual void Finalize();
    private void Dispose(bool disposing);
    public string get_LocalConnectionString();
    public void set_LocalConnectionString(string value);
    public string get_InternetUrl();
    public void set_InternetUrl(string value);
    public string get_InternetLogin();
    public void set_InternetLogin(string value);
    public string get_InternetPassword();
    public void set_InternetPassword(string value);
    public bool get_ConnectionManager();
    public void set_ConnectionManager(bool value);
    public string get_InternetProxyServer();
    public void set_InternetProxyServer(string value);
    public string get_InternetProxyLogin();
    public void set_InternetProxyLogin(string value);
    public string get_InternetProxyPassword();
    public void set_InternetProxyPassword(string value);
    public int get_ConnectTimeout();
    public void set_ConnectTimeout(int value);
    public int get_SendTimeout();
    public void set_SendTimeout(int value);
    public int get_ReceiveTimeout();
    public void set_ReceiveTimeout(int value);
    private int get_DataSendTimeout();
    private void set_DataSendTimeout(int value);
    private int get_DataReceiveTimeout();
    private void set_DataReceiveTimeout(int value);
    private int get_ControlSendTimeout();
    private void set_ControlSendTimeout(int value);
    private int get_ControlReceiveTimeout();
    private void set_ControlReceiveTimeout(int value);
    public short get_ConnectionRetryTimeout();
    public void set_ConnectionRetryTimeout(short value);
    public short get_CompressionLevel();
    public void set_CompressionLevel(short value);
    public void Pull(string localTableName, string sqlSelectString, string oleDBConnectionString);
    public void Pull(string localTableName, string sqlSelectString, string oleDBConnectionString, RdaTrackOption trackOption);
    public void Pull(string localTableName, string sqlSelectString, string oleDBConnectionString, RdaTrackOption trackOption, string errorTable);
    public void Push(string localTableName, string oleDBConnectionString);
    public void Push(string localTableName, string oleDBConnectionString, RdaBatchOption batchOption);
    public void SubmitSql(string sqlString, string oleDBConnectionString);
}
[SecurityCriticalAttribute("1")]
public class System.Data.SqlServerCe.SqlCeReplication : object {
    internal IntPtr pIReplication;
    internal IntPtr pIErrors;
    private int isNativeAssemblyReleased;
    public short PostSyncCleanup { get; public set; }
    public string Distributor { get; public set; }
    public NetworkType DistributorNetwork { get; public set; }
    public string DistributorAddress { get; public set; }
    public SecurityType DistributorSecurityMode { get; public set; }
    public string DistributorLogin { get; public set; }
    public string DistributorPassword { get; public set; }
    public ExchangeType ExchangeType { get; public set; }
    public string HostName { get; public set; }
    public string InternetUrl { get; public set; }
    public string InternetLogin { get; public set; }
    public string InternetPassword { get; public set; }
    public string InternetProxyServer { get; public set; }
    public string InternetProxyLogin { get; public set; }
    public string InternetProxyPassword { get; public set; }
    public short LoginTimeout { get; public set; }
    public string ProfileName { get; public set; }
    public string Publisher { get; public set; }
    public NetworkType PublisherNetwork { get; public set; }
    public string PublisherAddress { get; public set; }
    public SecurityType PublisherSecurityMode { get; public set; }
    public string PublisherLogin { get; public set; }
    public string PublisherPassword { get; public set; }
    public string PublisherDatabase { get; public set; }
    public string Publication { get; public set; }
    public int PublisherChanges { get; }
    public int PublisherConflicts { get; }
    public short QueryTimeout { get; public set; }
    public string Subscriber { get; public set; }
    public string SubscriberConnectionString { get; public set; }
    public int SubscriberChanges { get; }
    public int SubscriberConflicts { get; }
    public ValidateType Validate { get; public set; }
    public int ConnectTimeout { get; public set; }
    public int SendTimeout { get; public set; }
    public int ReceiveTimeout { get; public set; }
    private int DataSendTimeout { get; private set; }
    private int DataReceiveTimeout { get; private set; }
    private int ControlSendTimeout { get; private set; }
    private int ControlReceiveTimeout { get; private set; }
    public short ConnectionRetryTimeout { get; public set; }
    public short CompressionLevel { get; public set; }
    public bool ConnectionManager { get; public set; }
    public SnapshotTransferType SnapshotTransferType { get; public set; }
    private static SqlCeReplication();
    public SqlCeReplication(string internetUrl, string internetLogin, string internetPassword, string publisher, string publisherDatabase, string publisherLogin, string publisherPassword, string publication, string subscriber, string subscriberConnectionString);
    public SqlCeReplication(string internetUrl, string internetLogin, string internetPassword, string publisher, string publisherDatabase, string publication, string subscriber, string subscriberConnectionString);
    public sealed virtual void Dispose();
    protected virtual void Finalize();
    private void Dispose(bool disposing);
    public short get_PostSyncCleanup();
    public void set_PostSyncCleanup(short value);
    public string get_Distributor();
    public void set_Distributor(string value);
    public NetworkType get_DistributorNetwork();
    public void set_DistributorNetwork(NetworkType value);
    public string get_DistributorAddress();
    public void set_DistributorAddress(string value);
    public SecurityType get_DistributorSecurityMode();
    public void set_DistributorSecurityMode(SecurityType value);
    public string get_DistributorLogin();
    public void set_DistributorLogin(string value);
    public string get_DistributorPassword();
    public void set_DistributorPassword(string value);
    public ExchangeType get_ExchangeType();
    public void set_ExchangeType(ExchangeType value);
    public string get_HostName();
    public void set_HostName(string value);
    public string get_InternetUrl();
    public void set_InternetUrl(string value);
    public string get_InternetLogin();
    public void set_InternetLogin(string value);
    public string get_InternetPassword();
    public void set_InternetPassword(string value);
    public string get_InternetProxyServer();
    public void set_InternetProxyServer(string value);
    public string get_InternetProxyLogin();
    public void set_InternetProxyLogin(string value);
    public string get_InternetProxyPassword();
    public void set_InternetProxyPassword(string value);
    public short get_LoginTimeout();
    public void set_LoginTimeout(short value);
    public string get_ProfileName();
    public void set_ProfileName(string value);
    public string get_Publisher();
    public void set_Publisher(string value);
    public NetworkType get_PublisherNetwork();
    public void set_PublisherNetwork(NetworkType value);
    public string get_PublisherAddress();
    public void set_PublisherAddress(string value);
    public SecurityType get_PublisherSecurityMode();
    public void set_PublisherSecurityMode(SecurityType value);
    public string get_PublisherLogin();
    public void set_PublisherLogin(string value);
    public string get_PublisherPassword();
    public void set_PublisherPassword(string value);
    public string get_PublisherDatabase();
    public void set_PublisherDatabase(string value);
    public string get_Publication();
    public void set_Publication(string value);
    public int get_PublisherChanges();
    public int get_PublisherConflicts();
    public short get_QueryTimeout();
    public void set_QueryTimeout(short value);
    public string get_Subscriber();
    public void set_Subscriber(string value);
    public string get_SubscriberConnectionString();
    public void set_SubscriberConnectionString(string value);
    public int get_SubscriberChanges();
    public int get_SubscriberConflicts();
    public ValidateType get_Validate();
    public void set_Validate(ValidateType value);
    public int get_ConnectTimeout();
    public void set_ConnectTimeout(int value);
    public int get_SendTimeout();
    public void set_SendTimeout(int value);
    public int get_ReceiveTimeout();
    public void set_ReceiveTimeout(int value);
    private int get_DataSendTimeout();
    private void set_DataSendTimeout(int value);
    private int get_DataReceiveTimeout();
    private void set_DataReceiveTimeout(int value);
    private int get_ControlSendTimeout();
    private void set_ControlSendTimeout(int value);
    private int get_ControlReceiveTimeout();
    private void set_ControlReceiveTimeout(int value);
    public short get_ConnectionRetryTimeout();
    public void set_ConnectionRetryTimeout(short value);
    public short get_CompressionLevel();
    public void set_CompressionLevel(short value);
    public bool get_ConnectionManager();
    public void set_ConnectionManager(bool value);
    public SnapshotTransferType get_SnapshotTransferType();
    public void set_SnapshotTransferType(SnapshotTransferType value);
    public void AddSubscription(AddOption addOption);
    public void DropSubscription(DropOption dropOption);
    public void ReinitializeSubscription(bool uploadBeforeReinitialize);
    public void Synchronize();
    public IAsyncResult BeginSynchronize(AsyncCallback onSyncCompletion, object state);
    public IAsyncResult BeginSynchronize(AsyncCallback onSyncCompletion, OnStartTableUpload onStartTableUpload, OnStartTableDownload onStartTableDownload, OnSynchronization onSynchronization, object state);
    public void EndSynchronize(IAsyncResult ar);
    public void CancelSynchronize();
    public bool LoadProperties();
    public void SaveProperties();
}
internal class System.Data.SqlServerCe.SqlCeRestriction : object {
    private static SqlCeRestriction();
    private static bool IsWebHosted();
    private static bool IsExplicitlyEnabled();
    public static void CheckExplicitWebHosting();
}
[DefaultMemberAttribute("Item")]
public class System.Data.SqlServerCe.SqlCeResultSet : SqlCeDataReader {
    private bool isInitialized;
    private IList`1<int> bookmarkArray;
    private SqlCeUpdatableRecord sqlUpdatableRecord;
    private ResultSetChangedEventHandler onResultSetChanged;
    public object Item { get; }
    public object Item { get; }
    public bool Updatable { get; }
    public bool Scrollable { get; }
    public ResultSetSensitivity Sensitivity { get; }
    internal IList`1<int> BookmarkArray { get; }
    private bool System.ComponentModel.IListSource.ContainsListCollection { get; }
    protected bool ContainsListCollection { get; }
    public ResultSetView ResultSetView { get; }
    private static SqlCeResultSet();
    [SecurityCriticalAttribute]
internal SqlCeResultSet(SqlCeConnection connection, SqlCeCommand command);
    internal void add_ResultSetChanged(ResultSetChangedEventHandler value);
    internal void remove_ResultSetChanged(ResultSetChangedEventHandler value);
    private void OnResultSetChanged(object sender, ResultSetChangedEventArgs e);
    public virtual object get_Item(int index);
    public virtual object get_Item(string name);
    public bool get_Updatable();
    public bool get_Scrollable();
    public ResultSetSensitivity get_Sensitivity();
    [SecurityCriticalAttribute]
[SecurityTreatAsSafeAttribute]
internal IList`1<int> get_BookmarkArray();
    private sealed virtual override bool System.ComponentModel.IListSource.get_ContainsListCollection();
    protected bool get_ContainsListCollection();
    public ResultSetView get_ResultSetView();
    private sealed virtual override IList System.ComponentModel.IListSource.GetList();
    protected IList GetList();
    [SecurityTreatAsSafeAttribute]
[SecurityCriticalAttribute]
internal bool GotoRow(int hBookmark);
    private void InitializeMetaData();
    [SecurityTreatAsSafeAttribute]
[SecurityCriticalAttribute]
internal void InternalUpdate(object sender);
    internal void RemoveBookmarkFromCache(int hBookmark);
    [SecurityTreatAsSafeAttribute]
[SecurityCriticalAttribute]
internal int InternalInsert(bool fMoveTo, object sender, SqlCeUpdatableRecord record);
    [SecurityCriticalAttribute]
private void SetValues(SEPREPAREMODE mode, SqlCeUpdatableRecord record);
    protected virtual void OnMove();
    internal SqlCeUpdatableRecord GetCurrentRecord();
    private void ValidateSet(string method);
    private bool HasColumnChanged(int ordinal);
    public SqlCeUpdatableRecord CreateRecord();
    public void Update();
    [SecurityCriticalAttribute]
[SecurityTreatAsSafeAttribute]
public void Delete();
    public void Insert(SqlCeUpdatableRecord record);
    public void Insert(SqlCeUpdatableRecord record, DbInsertOptions options);
    public bool ReadFirst();
    public bool ReadLast();
    public bool ReadPrevious();
    public bool ReadAbsolute(int position);
    public bool ReadRelative(int position);
    public void SetDefault(int ordinal);
    public bool IsSetAsDefault(int ordinal);
    public virtual IEnumerator GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public SqlMetaData GetSqlMetaData(int ordinal);
    public virtual bool IsDBNull(int ordinal);
    public virtual bool GetBoolean(int ordinal);
    public virtual decimal GetDecimal(int ordinal);
    public virtual byte GetByte(int ordinal);
    public virtual long GetBytes(int ordinal, long dataIndex, Byte[] buffer, int bufferIndex, int length);
    public virtual long GetChars(int ordinal, long dataIndex, Char[] buffer, int bufferIndex, int length);
    public virtual DateTime GetDateTime(int ordinal);
    public virtual double GetDouble(int ordinal);
    public virtual float GetFloat(int ordinal);
    public virtual Guid GetGuid(int ordinal);
    public virtual short GetInt16(int ordinal);
    public virtual int GetInt32(int ordinal);
    public virtual long GetInt64(int ordinal);
    public virtual string GetString(int ordinal);
    public virtual object GetValue(int ordinal);
    public virtual int GetValues(Object[] values);
    public void SetObjectRef(int ordinal, object buffer);
    public int SetValues(Object[] values);
    public void SetValue(int ordinal, object value);
    public void SetBoolean(int ordinal, bool value);
    public void SetByte(int ordinal, byte value);
    public void SetBytes(int ordinal, long dataIndex, Byte[] buffer, int bufferIndex, int length);
    public void SetChar(int ordinal, char c);
    public void SetChars(int ordinal, long dataIndex, Char[] buffer, int bufferIndex, int length);
    public void SetDouble(int ordinal, double value);
    public void SetDecimal(int ordinal, decimal value);
    public void SetDateTime(int ordinal, DateTime value);
    public void SetGuid(int ordinal, Guid value);
    public void SetInt16(int ordinal, short value);
    public void SetInt32(int ordinal, int value);
    public void SetInt64(int ordinal, long value);
    public void SetFloat(int ordinal, float value);
    public void SetString(int ordinal, string value);
    public virtual SqlBoolean GetSqlBoolean(int ordinal);
    public virtual SqlMoney GetSqlMoney(int ordinal);
    public virtual SqlDecimal GetSqlDecimal(int ordinal);
    public virtual SqlByte GetSqlByte(int ordinal);
    public virtual SqlBinary GetSqlBinary(int ordinal);
    public virtual SqlDateTime GetSqlDateTime(int ordinal);
    public virtual SqlDouble GetSqlDouble(int ordinal);
    public virtual SqlSingle GetSqlSingle(int ordinal);
    public virtual SqlGuid GetSqlGuid(int ordinal);
    public virtual SqlInt16 GetSqlInt16(int ordinal);
    public virtual SqlInt32 GetSqlInt32(int ordinal);
    public virtual SqlInt64 GetSqlInt64(int ordinal);
    public virtual SqlString GetSqlString(int ordinal);
    public void SetSqlBoolean(int ordinal, SqlBoolean value);
    public void SetSqlBinary(int ordinal, SqlBinary value);
    public void SetSqlByte(int ordinal, SqlByte value);
    public void SetSqlInt16(int ordinal, SqlInt16 value);
    public void SetSqlInt32(int ordinal, SqlInt32 value);
    public void SetSqlInt64(int ordinal, SqlInt64 value);
    public void SetSqlSingle(int ordinal, SqlSingle value);
    public void SetSqlDouble(int ordinal, SqlDouble value);
    public void SetSqlString(int ordinal, SqlString value);
    public void SetSqlMoney(int ordinal, SqlMoney value);
    public void SetSqlDecimal(int ordinal, SqlDecimal value);
    public void SetSqlDateTime(int ordinal, SqlDateTime value);
    public void SetSqlGuid(int ordinal, SqlGuid value);
}
public class System.Data.SqlServerCe.SqlCeRowUpdatedEventArgs : RowUpdatedEventArgs {
    public SqlCeCommand Command { get; }
    private static SqlCeRowUpdatedEventArgs();
    public SqlCeRowUpdatedEventArgs(DataRow dataRow, IDbCommand command, StatementType statementType, DataTableMapping tableMapping);
    public SqlCeCommand get_Command();
}
public class System.Data.SqlServerCe.SqlCeRowUpdatedEventHandler : MulticastDelegate {
    public SqlCeRowUpdatedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, SqlCeRowUpdatedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, SqlCeRowUpdatedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Data.SqlServerCe.SqlCeRowUpdatingEventArgs : RowUpdatingEventArgs {
    public SqlCeCommand Command { get; public set; }
    private static SqlCeRowUpdatingEventArgs();
    public SqlCeRowUpdatingEventArgs(DataRow dataRow, IDbCommand command, StatementType statementType, DataTableMapping tableMapping);
    public SqlCeCommand get_Command();
    public void set_Command(SqlCeCommand value);
}
public class System.Data.SqlServerCe.SqlCeRowUpdatingEventHandler : MulticastDelegate {
    public SqlCeRowUpdatingEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, SqlCeRowUpdatingEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, SqlCeRowUpdatingEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class System.Data.SqlServerCe.SqlCeServicing : object {
    private static SqlCeServicing();
    [SecurityCriticalAttribute]
internal static void DoBreadcrumbServicing(string modulePath);
}
internal class System.Data.SqlServerCe.SqlCeSHA256 : SHA256 {
    public static string MicrosoftEnhancedRsaAes;
    public static string MicrosoftEnhancedRsaAesPrototype;
    private AlgorithmId m_algorithmId;
    [SecurityCriticalAttribute]
private CspSafeHandle m_cspHandle;
    [SecurityCriticalAttribute]
private HashSafeHandle m_hashHandle;
    private static SqlCeSHA256();
    [SecurityCriticalAttribute]
private void InitFields(string provider, ProviderType providerType, AlgorithmId algorithm);
    [SecurityCriticalAttribute]
protected virtual void HashCore(Byte[] array, int ibStart, int cbSize);
    [SecurityCriticalAttribute]
protected virtual Byte[] HashFinal();
    [SecurityCriticalAttribute]
public virtual void Initialize();
    [SecurityCriticalAttribute]
public void Dispose();
    [SecurityCriticalAttribute]
private static CspSafeHandle AcquireCsp(string keyContainer, string providerName, ProviderType providerType, CryptAcquireContextFlags flags);
    [SecurityCriticalAttribute]
private static Byte[] GetHashParameter(HashSafeHandle hashHandle, HashParameter parameter);
}
internal class System.Data.SqlServerCe.SqlCeTableColumns : object {
    public string TableName;
    private Dictionary`2<string, SqlCeInfoSchemaColumn> columns;
    private Dictionary`2<string, SqlCeInfoSchemaColumn> parameters;
    private StringComparer _comparer;
    public int Count { get; }
    private static SqlCeTableColumns();
    public SqlCeTableColumns(string tableName);
    public void Add(SqlCeInfoSchemaColumn column);
    public void Clear(string newTableName);
    public int get_Count();
    public SqlCeInfoSchemaColumn GetValueByParameterName(string paramName);
    public SqlCeInfoSchemaColumn GetValueByColumnName(string columnName);
    public string ParameterNameOf(string columnName);
    public sealed virtual IEnumerator GetEnumerator();
}
public class System.Data.SqlServerCe.SqlCeTransaction : DbTransaction {
    private object thisLock;
    private bool isZombied;
    private bool isDisposed;
    private bool isFinalized;
    internal SqlCeConnection connection;
    private IsolationLevel isolationLevel;
    private IntPtr pQpSession;
    private IntPtr pTx;
    private IntPtr pError;
    private long ullTransactionBsn;
    private Guid trackingContext;
    private SqlCeChangeTracking m_tracking;
    protected DbConnection DbConnection { get; }
    internal SeTransactionFlags EngineFlags { get; internal set; }
    private SqlCeConnection Connection { get; }
    public IsolationLevel IsolationLevel { get; }
    public Guid TrackingContext { get; public set; }
    public long CurrentTransactionBsn { get; }
    internal bool IsZombied { get; }
    internal IntPtr ITransact { get; }
    internal IntPtr IQPSession { get; }
    private static SqlCeTransaction();
    [SecurityCriticalAttribute]
internal SqlCeTransaction(SqlCeConnection connection, IsolationLevel isolationLevel, IntPtr pTx, IntPtr pQpSession);
    protected virtual DbConnection get_DbConnection();
    [SecurityCriticalAttribute]
[SecurityTreatAsSafeAttribute]
internal SeTransactionFlags get_EngineFlags();
    [SecurityCriticalAttribute]
[SecurityTreatAsSafeAttribute]
internal void set_EngineFlags(SeTransactionFlags value);
    private SqlCeConnection get_Connection();
    public virtual IsolationLevel get_IsolationLevel();
    public Guid get_TrackingContext();
    [SecurityCriticalAttribute]
[SecurityTreatAsSafeAttribute]
public void set_TrackingContext(Guid value);
    public long get_CurrentTransactionBsn();
    internal bool get_IsZombied();
    internal void SetTrackingObject(SqlCeChangeTracking trk);
    protected virtual void Finalize();
    [SecurityCriticalAttribute]
private void ReleaseNativeInterfaces();
    private void EnterPublicAPI();
    public void Dispose();
    [SecurityTreatAsSafeAttribute]
[SecurityCriticalAttribute]
protected virtual void Dispose(bool disposing);
    internal IntPtr get_ITransact();
    internal IntPtr get_IQPSession();
    public virtual void Commit();
    [SecurityTreatAsSafeAttribute]
[SecurityCriticalAttribute]
public void Commit(CommitMode mode);
    [SecurityCriticalAttribute]
[SecurityTreatAsSafeAttribute]
public virtual void Rollback();
    [SecurityCriticalAttribute]
private void ProcessResults(int hr);
}
public class System.Data.SqlServerCe.SqlCeTransactionInProgressException : SqlCeException {
    private static SqlCeTransactionInProgressException();
    internal SqlCeTransactionInProgressException(SqlCeErrorCollection errors);
    protected SqlCeTransactionInProgressException(SerializationInfo info, StreamingContext context);
    [SecurityCriticalAttribute]
public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
public class System.Data.SqlServerCe.SqlCeType : object {
    internal static SqlCeType _SByte;
    internal static SqlCeType _SmallInt;
    internal static SqlCeType _Int;
    internal static SqlCeType _BigInt;
    internal static SqlCeType _TinyInt;
    internal static SqlCeType _UInt16;
    internal static SqlCeType _UInt32;
    internal static SqlCeType _UInt64;
    internal static SqlCeType _Real;
    internal static SqlCeType _Float;
    internal static SqlCeType _Money;
    internal static SqlCeType _Numeric;
    internal static SqlCeType _Bit;
    internal static SqlCeType _UniqueIdentifier;
    internal static SqlCeType _Binary;
    internal static SqlCeType _RowVersion;
    internal static SqlCeType _Image;
    internal static SqlCeType _VarBinary;
    internal static SqlCeType _NText;
    internal static SqlCeType _NChar;
    internal static SqlCeType _NVarChar;
    internal static SqlCeType _DateTime;
    internal static SqlCeType Default;
    internal static DataTypeAlias[] _aliasTypes;
    internal static SqlCeType[] _AllTypes;
    internal static int MAX_BINARY_COLUMN_SIZE;
    internal static int MAX_IMAGE_COLUMN_SIZE;
    internal static int MAX_NCHAR_COLUMN_SIZE;
    internal static int MAX_NTEXT_COLUMN_SIZE;
    internal SETYPE seType;
    internal string dataType;
    internal Type clrType;
    internal DbType dbType;
    internal SqlDbType sqlDbType;
    internal bool isFixed;
    internal bool isBLOB;
    internal byte maxpre;
    internal byte scale;
    internal int fixlen;
    internal static Int32[] SqlDbTypeConversionMatrix;
    private static DataTypeAlias[] _AliasTypes { get; }
    public SqlDbType SqlDbType { get; }
    internal SETYPE SeType { get; }
    internal string DataType { get; }
    internal Type ClrType { get; }
    internal DbType DbType { get; }
    internal bool IsLongValue { get; }
    internal bool IsFixed { get; }
    private static SqlCeType();
    private SqlCeType(byte maxpre, byte scale, int fixlen, bool isFixed, bool isBLOB, SqlDbType sqlDbType, SETYPE seType, string dataType, DbType dbType, Type clrType);
    private static DataTypeAlias[] get__AliasTypes();
    public SqlDbType get_SqlDbType();
    internal SETYPE get_SeType();
    internal string get_DataType();
    internal Type get_ClrType();
    internal DbType get_DbType();
    internal bool get_IsLongValue();
    internal bool get_IsFixed();
    internal static SqlCeType FromSeType(SETYPE type);
    internal static SqlCeType FromDbType(DbType type);
    internal static SqlCeType FromSqlDbType(SqlDbType type);
    internal static SqlCeType FromDataType(string dataType);
    internal static Type SqlDbType2SqlType(SqlDbType type);
    internal static SqlCeType FromClrType(object value);
    public virtual string ToString();
    internal static void ValidateDataConversion(SqlDbType expectedType, SqlDbType actualType);
}
[DefaultMemberAttribute("Item")]
public class System.Data.SqlServerCe.SqlCeUpdatableRecord : object {
    internal Object[] values;
    private SqlMetaData[] sqlMetaDatas;
    private bool updatable;
    private Boolean[] boundFields;
    private String[] fieldNames;
    private FieldNameLookup fieldNameLookup;
    private int hiddenFieldCount;
    private ColumnUpdatedStatus[] columnsUpdated;
    private Type SqlBinaryType;
    private Type SqlBooleanType;
    private Type SqlByteType;
    private Type SqlDateTimeType;
    private Type SqlDecimalType;
    private Type SqlDoubleType;
    private Type SqlGuidType;
    private Type SqlInt16Type;
    private Type SqlInt32Type;
    private Type SqlInt64Type;
    private Type SqlMoneyType;
    private Type SqlSingleType;
    private Type SqlStringType;
    public int FieldCount { get; }
    public int HiddenFieldCount { get; }
    public bool Updatable { get; }
    internal ColumnUpdatedStatus[] ColumnsUpdatedStatus { get; }
    public object Item { get; public set; }
    public object Item { get; public set; }
    private static SqlCeUpdatableRecord();
    internal SqlCeUpdatableRecord(MetaData[] metaData, Object[] values, bool updatable, int hiddenFieldCount, FieldNameLookup fieldNameLookup);
    public sealed virtual int get_FieldCount();
    public int get_HiddenFieldCount();
    public bool get_Updatable();
    internal ColumnUpdatedStatus[] get_ColumnsUpdatedStatus();
    public void SetDefault(int ordinal);
    public sealed virtual int GetValues(Object[] values);
    public int SetValues(Object[] values);
    public sealed virtual string GetName(int ordinal);
    public sealed virtual object GetValue(int ordinal);
    public sealed virtual string GetDataTypeName(int ordinal);
    public sealed virtual Type GetFieldType(int ordinal);
    public sealed virtual IDataReader GetData(int ordinal);
    public sealed virtual int GetOrdinal(string name);
    public bool IsSetAsDefault(int ordinal);
    public sealed virtual object get_Item(int ordinal);
    public void set_Item(int ordinal, object value);
    public sealed virtual object get_Item(string name);
    public void set_Item(string name, object value);
    public sealed virtual bool IsDBNull(int ordinal);
    private void EnsureObjectArray(int ordinal, string method);
    private void SetClrTypeValue(int ordinal, object value, string method);
    private void SetSqlTypeValue(int ordinal, INullable value, string method);
    private void ValidateType(int ordinal, object value, SqlDbType type);
    public sealed virtual bool GetBoolean(int ordinal);
    public sealed virtual byte GetByte(int ordinal);
    public sealed virtual long GetBytes(int ordinal, long dataIndex, Byte[] buffer, int bufferIndex, int length);
    public sealed virtual long GetChars(int ordinal, long dataIndex, Char[] buffer, int bufferIndex, int length);
    public sealed virtual char GetChar(int ordinal);
    public sealed virtual Guid GetGuid(int ordinal);
    public sealed virtual short GetInt16(int ordinal);
    public sealed virtual int GetInt32(int ordinal);
    public sealed virtual long GetInt64(int ordinal);
    public sealed virtual float GetFloat(int ordinal);
    public sealed virtual double GetDouble(int ordinal);
    public sealed virtual string GetString(int ordinal);
    public sealed virtual decimal GetDecimal(int ordinal);
    public sealed virtual DateTime GetDateTime(int ordinal);
    public SqlMetaData GetSqlMetaData(int ordinal);
    public SqlBoolean GetSqlBoolean(int ordinal);
    public SqlBinary GetSqlBinary(int ordinal);
    public SqlByte GetSqlByte(int ordinal);
    public SqlInt16 GetSqlInt16(int ordinal);
    public SqlInt32 GetSqlInt32(int ordinal);
    public SqlInt64 GetSqlInt64(int ordinal);
    public SqlSingle GetSqlSingle(int ordinal);
    public SqlDouble GetSqlDouble(int ordinal);
    public SqlString GetSqlString(int ordinal);
    public SqlMoney GetSqlMoney(int ordinal);
    public SqlDecimal GetSqlDecimal(int ordinal);
    public SqlDateTime GetSqlDateTime(int ordinal);
    public SqlGuid GetSqlGuid(int ordinal);
    public SqlChars GetSqlCharsRef(int ordinal);
    public SqlBytes GetSqlBytesRef(int ordinal);
    public void SetObjectRef(int ordinal, object value);
    public void SetValue(int ordinal, object value);
    public void SetBoolean(int ordinal, bool value);
    public void SetByte(int ordinal, byte value);
    public void SetBytes(int ordinal, long dataIndex, Byte[] buffer, int bufferIndex, int length);
    public void SetChar(int ordinal, char value);
    public void SetChars(int ordinal, long dataIndex, Char[] buffer, int bufferIndex, int length);
    public void SetGuid(int ordinal, Guid value);
    public void SetInt16(int ordinal, short value);
    public void SetInt32(int ordinal, int value);
    public void SetInt64(int ordinal, long value);
    public void SetFloat(int ordinal, float value);
    public void SetDouble(int ordinal, double value);
    public void SetString(int ordinal, string value);
    public void SetDecimal(int ordinal, decimal value);
    public void SetDateTime(int ordinal, DateTime value);
    public void SetSqlBoolean(int ordinal, SqlBoolean value);
    public void SetSqlBinary(int ordinal, SqlBinary value);
    public void SetSqlByte(int ordinal, SqlByte value);
    public void SetSqlInt16(int ordinal, SqlInt16 value);
    public void SetSqlInt32(int ordinal, SqlInt32 value);
    public void SetSqlInt64(int ordinal, SqlInt64 value);
    public void SetSqlSingle(int ordinal, SqlSingle value);
    public void SetSqlDouble(int ordinal, SqlDouble value);
    public void SetSqlString(int ordinal, SqlString value);
    public void SetSqlMoney(int ordinal, SqlMoney value);
    public void SetSqlDecimal(int ordinal, SqlDecimal value);
    public void SetSqlDateTime(int ordinal, SqlDateTime value);
    public void SetSqlGuid(int ordinal, SqlGuid value);
}
internal static class System.Data.SqlServerCe.SqlCeUtil : object {
    internal static string ProviderName;
    internal static string ProductName;
    internal static string ProductRootRegKey;
    internal static string Product35RootRegKey;
    internal static string ProductProxyPortsRegKey;
    internal static string NetCFKey;
    internal static string ProductServicingFile;
    internal static string CRTAssemblyFolder;
    internal static string CRTDllName;
    internal static string CRTCertificatePublicKey;
    internal static string ModuleStorageEngine;
    internal static string ModuleStorageEngineSys;
    internal static string ModuleQueryProcessor;
    internal static string ModuleClientAgent;
    internal static string ModuleOleDbProvider;
    internal static string ModuleManagedExtentions;
    internal static string ModuleDbCompact;
    internal static string ModuleErrRes;
    internal static string ModuleServerAgent;
    internal static string ModuleReplicationProvider;
    internal static string ModuleTdsServer;
    internal static string Hash_i386;
    internal static string Hash_amd64;
    private static Nullable`1<bool> isWebHosted;
    internal static bool IsWebHosted { get; }
    private static SqlCeUtil();
    [SecurityCriticalAttribute]
internal static RegistryKey RegistryOpenSubKey(RegistryKey rootKey, string subKeyName, bool writable);
    [SecurityCriticalAttribute]
internal static RegistryKey RegistryOpenProductRootKey(RegistryKey sysRootKey, bool writable);
    [SecurityCriticalAttribute]
internal static RegistryKey RegistryOpenProductRootSubKey(RegistryKey sysRootKey, string subKeyName, bool writable);
    internal static RegistryKey RegistryCreateProductRootKey(RegistryKey sysRootKey);
    internal static RegistryKey RegistryCreateProductRootSubKey(RegistryKey sysRootKey, string subKeyName);
    [SecurityCriticalAttribute]
internal static string GetModuleInstallPath(string moduleName);
    internal static bool get_IsWebHosted();
    private static bool FindIfWebHosted();
    [SecurityCriticalAttribute]
internal static void DemandForPermission(string filename, FileIOPermissionAccess permissions);
    [SecurityCriticalAttribute]
internal static Exception CreateException(IntPtr pError, int hr);
}
internal class System.Data.SqlServerCe.SqlCeVersion : object {
    public static string FileVersion;
    public static string AssemblyVersion;
    public static string ProductVersion;
    public static string ProductName;
    private static Version _fileVersion;
    private static Version _productVersion;
    public static int ProductMajor { get; }
    public static int ProductMinor { get; }
    public static int BuildMajor { get; }
    public static int BuildMinor { get; }
    public static int VersionSuffix { get; }
    public static int ServicePackLevel { get; }
    private static SqlCeVersion();
    public static int get_ProductMajor();
    public static int get_ProductMinor();
    public static int get_BuildMajor();
    public static int get_BuildMinor();
    public static int get_VersionSuffix();
    public static int get_ServicePackLevel();
}
public class System.Data.SqlServerCe.SqlMetaData : object {
    private static long x_lMax;
    private static long x_lServerMaxUnicode;
    private static long x_lServerMaxANSI;
    private static long x_lServerMaxBinary;
    private static SqlCompareOptions x_eDefaultStringCompareOptions;
    private string m_strName;
    private long m_lMaxLength;
    private SqlDbType m_sqlDbType;
    private byte m_bPrecision;
    private byte m_bScale;
    private long m_lLocale;
    private SqlCompareOptions m_eCompareOptions;
    private bool m_bPartialLength;
    private static Byte[] __maxLenFromPrecision;
    private static DateTime x_dtSmallMax;
    private static DateTime x_dtSmallMin;
    private static SqlMoney x_smSmallMax;
    private static SqlMoney x_smSmallMin;
    private static DbType[] sxm_rgSqlDbTypeToDbType;
    internal static SqlMetaData[] sxm_rgDefaults;
    public SqlCompareOptions CompareOptions { get; }
    public DbType DbType { get; }
    public long LocaleId { get; }
    public static long Max { get; }
    public long MaxLength { get; }
    public string Name { get; }
    public byte Precision { get; }
    public byte Scale { get; }
    public SqlDbType SqlDbType { get; }
    public string TypeName { get; }
    internal bool IsPartialLength { get; }
    private static SqlMetaData();
    public SqlMetaData(string name, SqlDbType dbType);
    public SqlMetaData(string name, SqlDbType dbType, long maxLength);
    public SqlMetaData(string name, SqlDbType dbType, byte precision, byte scale);
    public SqlMetaData(string name, SqlDbType dbType, long maxLength, long locale, SqlCompareOptions compareOptions);
    public SqlMetaData(string name, SqlDbType dbType, long maxLength, byte precision, byte scale, long localeId, SqlCompareOptions compareOptions, Type userDefinedType);
    private SqlMetaData(string name, SqlDbType sqlDbType, long maxLength, byte precision, byte scale, long localeId, SqlCompareOptions compareOptions, bool partialLength);
    public SqlCompareOptions get_CompareOptions();
    public DbType get_DbType();
    public long get_LocaleId();
    public static long get_Max();
    public long get_MaxLength();
    public string get_Name();
    public byte get_Precision();
    public byte get_Scale();
    public SqlDbType get_SqlDbType();
    public string get_TypeName();
    internal bool get_IsPartialLength();
    private void Construct(string name, SqlDbType dbType);
    private void Construct(string name, SqlDbType dbType, long maxLength);
    private void Construct(string name, SqlDbType dbType, long maxLength, long locale, SqlCompareOptions compareOptions);
    private void Construct(string name, SqlDbType dbType, byte precision, byte scale);
    private void AssertNameIsValid(string name);
    public short Adjust(short value);
    public int Adjust(int value);
    public long Adjust(long value);
    public float Adjust(float value);
    public double Adjust(double value);
    public string Adjust(string value);
    public decimal Adjust(decimal value);
    public DateTime Adjust(DateTime value);
    public Guid Adjust(Guid value);
    public SqlBoolean Adjust(SqlBoolean value);
    public SqlByte Adjust(SqlByte value);
    public SqlInt16 Adjust(SqlInt16 value);
    public SqlInt32 Adjust(SqlInt32 value);
    public SqlInt64 Adjust(SqlInt64 value);
    public SqlSingle Adjust(SqlSingle value);
    public SqlDouble Adjust(SqlDouble value);
    public SqlMoney Adjust(SqlMoney value);
    public SqlDateTime Adjust(SqlDateTime value);
    public SqlDecimal Adjust(SqlDecimal value);
    public SqlString Adjust(SqlString value);
    public SqlBinary Adjust(SqlBinary value);
    public SqlGuid Adjust(SqlGuid value);
    public SqlChars Adjust(SqlChars value);
    public SqlBytes Adjust(SqlBytes value);
    public object Adjust(object value);
    public bool Adjust(bool value);
    public byte Adjust(byte value);
    public Byte[] Adjust(Byte[] value);
    public char Adjust(char value);
    public Char[] Adjust(Char[] value);
    private static void ThrowInvalidType();
    private void VerifyDateTimeRange(DateTime value);
    private void VerifyMoneyRange(SqlMoney value);
    private SqlDecimal InternalAdjustSqlDecimal(SqlDecimal value);
    private void SetDefaultsForType(SqlDbType dbType);
}
[SecurityCriticalAttribute("1")]
internal class System.Data.SqlServerCe.SyncAsyncResult : object {
    private ManualResetEvent completeEvent;
    private object callerContext;
    private AsyncCallback callerCompletionCallback;
    private OnStartTableUpload callerOnStartTableUpload;
    private OnStartTableDownload callerOnStartTableDownload;
    private OnSynchronization callerOnSynchronization;
    private SqlCeReplication callerReplobj;
    private bool isCompleted;
    private Exception exception;
    private bool System.IAsyncResult.IsCompleted { get; }
    private bool System.IAsyncResult.CompletedSynchronously { get; }
    private WaitHandle System.IAsyncResult.AsyncWaitHandle { get; }
    private object System.IAsyncResult.AsyncState { get; }
    private static SyncAsyncResult();
    internal SyncAsyncResult(SqlCeReplication replication, AsyncCallback completionCallback, object context);
    internal SyncAsyncResult(SqlCeReplication replication, AsyncCallback completionCallback, OnStartTableUpload onStartTableUpload, OnStartTableDownload onStartTableDownload, OnSynchronization onSynchronization, object context);
    internal void SyncThread();
    private void DispatchEventToCaller(SyncStatus status, string tablename, int percentComplete);
    private void BeginSyncAndStatusReporting();
    public Exception GetException();
    private sealed virtual override bool System.IAsyncResult.get_IsCompleted();
    private sealed virtual override bool System.IAsyncResult.get_CompletedSynchronously();
    private sealed virtual override WaitHandle System.IAsyncResult.get_AsyncWaitHandle();
    private sealed virtual override object System.IAsyncResult.get_AsyncState();
}
internal enum System.Data.SqlServerCe.SyncStatus : Enum {
    public int value__;
    public static SyncStatus Start;
    public static SyncStatus Uploading;
    public static SyncStatus Synchronizing;
    public static SyncStatus Connecting;
    public static SyncStatus Downloading;
    public static SyncStatus End;
}
internal class System.Data.SqlServerCe.tagDBOBJECT : ValueType {
    public int dwFlags;
    public Guid iid;
}
public enum System.Data.SqlServerCe.TrackingKeyType : Enum {
    public int value__;
    public static TrackingKeyType None;
    public static TrackingKeyType PrimaryKey;
    public static TrackingKeyType Guid;
    public static TrackingKeyType Max;
}
[FlagsAttribute]
public enum System.Data.SqlServerCe.TrackingOptions : Enum {
    public int value__;
    public static TrackingOptions None;
    public static TrackingOptions Insert;
    public static TrackingOptions Update;
    public static TrackingOptions Delete;
    public static TrackingOptions All;
    public static TrackingOptions Max;
}
internal enum System.Data.SqlServerCe.TrackingVersion : Enum {
    public int value__;
    public static TrackingVersion Unknown;
    public static TrackingVersion TypeV1;
    public static TrackingVersion TypeV2;
}
internal class System.Data.SqlServerCe.UnmanagedLibraryHelper : object {
    private SafeLibraryHandle m_hLibrary;
    private static UnmanagedLibraryHelper();
    [SecurityCriticalAttribute]
public UnmanagedLibraryHelper(string fileName);
    [SecurityCriticalAttribute]
[SecurityTreatAsSafeAttribute]
public TDelegate GetUnmanagedFunction(string functionName);
    [SecurityCriticalAttribute]
public sealed virtual void Dispose();
}
public enum System.Data.SqlServerCe.ValidateType : Enum {
    public int value__;
    public static ValidateType NoValidation;
    public static ValidateType RowCountOnly;
}
internal class System.Data.SqlServerCe.ValueMapper : object {
    private static ValueMapperDelegate _typeMapperInternal;
    private static ValueMapper();
    public static object GetMappedValue(SqlDbType paramType, object value);
    private static object GetMappedValueNET20RTM(SqlDbType paramType, object value);
    private static object GetMappedValueNET20SP1(SqlDbType paramType, object value);
    private static object DateTimeMapper(SqlDbType paramType, object value);
    private static object TimeSpanMapper(SqlDbType paramType, object value);
    private static object DateTimeOffsetMapper(SqlDbType paramType, object value);
}
public enum System.Data.SqlServerCe.VerifyOption : Enum {
    public int value__;
    public static VerifyOption Default;
    public static VerifyOption Enhanced;
}
internal class System.Data.SqlServerCe.WeakReferenceCache : object {
    private bool _trackResurrection;
    protected WeakReference[] items;
    internal int Count { get; }
    private static WeakReferenceCache();
    internal WeakReferenceCache(bool trackResurrection);
    internal int get_Count();
    internal int Add(object value);
    internal object GetObject(int indx);
    internal void Remove(object value);
    internal void RemoveAt(int index);
}
internal class System.Data.SqlServerCe.WinTrust : object {
    private static string WINTRUST_ACTION_GENERIC_VERIFY_V2;
    private IntPtr INVALID_HANDLE_VALUE;
    private UnmanagedLibraryHelper winTrustModuleHelper;
    [SecurityCriticalAttribute]
private delegate_WinVerifyTrust WinVerifyTrust;
    private static WinTrust();
    [SecurityCriticalAttribute]
[SuppressUnmanagedCodeSecurityAttribute]
private static UInt32 GetSystemDirectory(StringBuilder lpBuffer, UInt32 uSize);
    [SecurityCriticalAttribute]
public bool VerifyEmbeddedSignature(string filePath);
}
