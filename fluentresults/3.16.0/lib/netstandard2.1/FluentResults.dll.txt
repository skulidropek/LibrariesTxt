public class FluentResults.DefaultLogger : object {
    public sealed virtual void Log(string context, string content, ResultBase result, LogLevel logLevel);
    public sealed virtual void Log(string content, ResultBase result, LogLevel logLevel);
}
[ExtensionAttribute]
public static class FluentResults.EnumerableExtensions : object {
    [ExtensionAttribute]
public static Result Merge(IEnumerable`1<Result> results);
    [ExtensionAttribute]
public static Result`1<IEnumerable`1<TValue>> Merge(IEnumerable`1<Result`1<TValue>> results);
}
public class FluentResults.Error : object {
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, object> <Metadata>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<IError> <Reasons>k__BackingField;
    public string Message { get; protected set; }
    public Dictionary`2<string, object> Metadata { get; }
    public List`1<IError> Reasons { get; }
    public Error(string message);
    public Error(string message, IError causedBy);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Message();
    [CompilerGeneratedAttribute]
protected void set_Message(string value);
    [CompilerGeneratedAttribute]
public sealed virtual Dictionary`2<string, object> get_Metadata();
    [CompilerGeneratedAttribute]
public sealed virtual List`1<IError> get_Reasons();
    public Error CausedBy(IError error);
    public Error CausedBy(Exception exception);
    public Error CausedBy(string message, Exception exception);
    public Error CausedBy(string message);
    public Error CausedBy(IEnumerable`1<IError> errors);
    public Error CausedBy(IEnumerable`1<string> errors);
    public Error WithMetadata(string metadataName, object metadataValue);
    public Error WithMetadata(Dictionary`2<string, object> metadata);
    public virtual string ToString();
}
public class FluentResults.ExceptionalError : Error {
    [CompilerGeneratedAttribute]
private Exception <Exception>k__BackingField;
    public Exception Exception { get; }
    public ExceptionalError(Exception exception);
    public ExceptionalError(string message, Exception exception);
    [CompilerGeneratedAttribute]
public sealed virtual Exception get_Exception();
    public virtual string ToString();
}
[ExtensionAttribute]
public static class FluentResults.Extensions.ResultExtensions : object {
    [AsyncStateMachineAttribute("FluentResults.Extensions.ResultExtensions/<MapErrors>d__0")]
[ExtensionAttribute]
public static Task`1<Result> MapErrors(Task`1<Result> resultTask, Func`2<IError, IError> errorMapper);
    [AsyncStateMachineAttribute("FluentResults.Extensions.ResultExtensions/<MapErrors>d__1")]
[ExtensionAttribute]
public static ValueTask`1<Result> MapErrors(ValueTask`1<Result> resultTask, Func`2<IError, IError> errorMapper);
    [AsyncStateMachineAttribute("FluentResults.Extensions.ResultExtensions/<MapErrors>d__2`1")]
[ExtensionAttribute]
public static Task`1<Result`1<T>> MapErrors(Task`1<Result`1<T>> resultTask, Func`2<IError, IError> errorMapper);
    [AsyncStateMachineAttribute("FluentResults.Extensions.ResultExtensions/<MapErrors>d__3`1")]
[ExtensionAttribute]
public static ValueTask`1<Result`1<T>> MapErrors(ValueTask`1<Result`1<T>> resultTask, Func`2<IError, IError> errorMapper);
    [AsyncStateMachineAttribute("FluentResults.Extensions.ResultExtensions/<MapSuccesses>d__4")]
[ExtensionAttribute]
public static Task`1<Result> MapSuccesses(Task`1<Result> resultTask, Func`2<ISuccess, ISuccess> errorMapper);
    [AsyncStateMachineAttribute("FluentResults.Extensions.ResultExtensions/<MapSuccesses>d__5")]
[ExtensionAttribute]
public static ValueTask`1<Result> MapSuccesses(ValueTask`1<Result> resultTask, Func`2<ISuccess, ISuccess> errorMapper);
    [AsyncStateMachineAttribute("FluentResults.Extensions.ResultExtensions/<MapSuccesses>d__6`1")]
[ExtensionAttribute]
public static Task`1<Result`1<T>> MapSuccesses(Task`1<Result`1<T>> resultTask, Func`2<ISuccess, ISuccess> errorMapper);
    [AsyncStateMachineAttribute("FluentResults.Extensions.ResultExtensions/<MapSuccesses>d__7`1")]
[ExtensionAttribute]
public static ValueTask`1<Result`1<T>> MapSuccesses(ValueTask`1<Result`1<T>> resultTask, Func`2<ISuccess, ISuccess> errorMapper);
    [AsyncStateMachineAttribute("FluentResults.Extensions.ResultExtensions/<Bind>d__8`2")]
[ExtensionAttribute]
public static Task`1<Result`1<TNew>> Bind(Task`1<Result`1<TOld>> resultTask, Func`2<TOld, Task`1<Result`1<TNew>>> bind);
    [AsyncStateMachineAttribute("FluentResults.Extensions.ResultExtensions/<Bind>d__9`2")]
[ExtensionAttribute]
public static ValueTask`1<Result`1<TNew>> Bind(ValueTask`1<Result`1<TOld>> resultTask, Func`2<TOld, ValueTask`1<Result`1<TNew>>> bind);
    [AsyncStateMachineAttribute("FluentResults.Extensions.ResultExtensions/<Bind>d__10`2")]
[ExtensionAttribute]
public static Task`1<Result`1<TNew>> Bind(Task`1<Result`1<TOld>> resultTask, Func`2<TOld, Result`1<TNew>> bind);
    [AsyncStateMachineAttribute("FluentResults.Extensions.ResultExtensions/<Bind>d__11`2")]
[ExtensionAttribute]
public static ValueTask`1<Result`1<TNew>> Bind(ValueTask`1<Result`1<TOld>> resultTask, Func`2<TOld, Result`1<TNew>> bind);
    [AsyncStateMachineAttribute("FluentResults.Extensions.ResultExtensions/<Bind>d__12`1")]
[ExtensionAttribute]
public static Task`1<Result> Bind(Task`1<Result`1<TOld>> resultTask, Func`2<TOld, Task`1<Result>> bind);
    [AsyncStateMachineAttribute("FluentResults.Extensions.ResultExtensions/<Bind>d__13`1")]
[ExtensionAttribute]
public static Task`1<Result> Bind(Task`1<Result`1<TOld>> resultTask, Func`2<TOld, Result> bind);
    [AsyncStateMachineAttribute("FluentResults.Extensions.ResultExtensions/<Bind>d__14`1")]
[ExtensionAttribute]
public static ValueTask`1<Result> Bind(ValueTask`1<Result`1<TOld>> resultTask, Func`2<TOld, Result> bind);
    [AsyncStateMachineAttribute("FluentResults.Extensions.ResultExtensions/<Bind>d__15`1")]
[ExtensionAttribute]
public static ValueTask`1<Result> Bind(ValueTask`1<Result`1<TOld>> resultTask, Func`2<TOld, ValueTask`1<Result>> bind);
    [AsyncStateMachineAttribute("FluentResults.Extensions.ResultExtensions/<Bind>d__16`1")]
[ExtensionAttribute]
public static Task`1<Result`1<TNew>> Bind(Task`1<Result> resultTask, Func`1<Task`1<Result`1<TNew>>> bind);
    [AsyncStateMachineAttribute("FluentResults.Extensions.ResultExtensions/<Bind>d__17`1")]
[ExtensionAttribute]
public static ValueTask`1<Result`1<TNew>> Bind(ValueTask`1<Result> resultTask, Func`1<ValueTask`1<Result`1<TNew>>> bind);
    [AsyncStateMachineAttribute("FluentResults.Extensions.ResultExtensions/<Bind>d__18")]
[ExtensionAttribute]
public static Task`1<Result> Bind(Task`1<Result> resultTask, Func`1<Task`1<Result>> bind);
    [AsyncStateMachineAttribute("FluentResults.Extensions.ResultExtensions/<Bind>d__19")]
[ExtensionAttribute]
public static ValueTask`1<Result> Bind(ValueTask`1<Result> resultTask, Func`1<ValueTask`1<Result>> bind);
    [AsyncStateMachineAttribute("FluentResults.Extensions.ResultExtensions/<Map>d__20`2")]
[ExtensionAttribute]
public static Task`1<Result`1<TNewValue>> Map(Task`1<Result`1<TOldValue>> resultTask, Func`2<TOldValue, TNewValue> valueConverter);
    [AsyncStateMachineAttribute("FluentResults.Extensions.ResultExtensions/<Map>d__21`2")]
[ExtensionAttribute]
public static Task`1<Result`1<TNewValue>> Map(ValueTask`1<Result`1<TOldValue>> resultTask, Func`2<TOldValue, TNewValue> valueConverter);
    [AsyncStateMachineAttribute("FluentResults.Extensions.ResultExtensions/<ToResult>d__22`1")]
[ExtensionAttribute]
public static Task`1<Result`1<TValue>> ToResult(Task`1<Result> resultTask, TValue value);
    [AsyncStateMachineAttribute("FluentResults.Extensions.ResultExtensions/<ToResult>d__23`1")]
[ExtensionAttribute]
public static Task`1<Result`1<TValue>> ToResult(ValueTask`1<Result> resultTask, TValue value);
}
public interface FluentResults.IError {
    public List`1<IError> Reasons { get; }
    public abstract virtual List`1<IError> get_Reasons();
}
public interface FluentResults.IExceptionalError {
    public Exception Exception { get; }
    public abstract virtual Exception get_Exception();
}
public interface FluentResults.IReason {
    public string Message { get; }
    public Dictionary`2<string, object> Metadata { get; }
    public abstract virtual string get_Message();
    public abstract virtual Dictionary`2<string, object> get_Metadata();
}
public interface FluentResults.IResult`1 {
    public TValue Value { get; }
    public TValue ValueOrDefault { get; }
    public abstract virtual TValue get_Value();
    public abstract virtual TValue get_ValueOrDefault();
}
public interface FluentResults.IResultBase {
    public bool IsFailed { get; }
    public bool IsSuccess { get; }
    public List`1<IReason> Reasons { get; }
    public List`1<IError> Errors { get; }
    public List`1<ISuccess> Successes { get; }
    public abstract virtual bool get_IsFailed();
    public abstract virtual bool get_IsSuccess();
    public abstract virtual List`1<IReason> get_Reasons();
    public abstract virtual List`1<IError> get_Errors();
    public abstract virtual List`1<ISuccess> get_Successes();
}
public interface FluentResults.IResultLogger {
    public abstract virtual void Log(string context, string content, ResultBase result, LogLevel logLevel);
    public abstract virtual void Log(string content, ResultBase result, LogLevel logLevel);
}
public interface FluentResults.ISuccess {
}
[ExtensionAttribute]
public static class FluentResults.ObjectExtensions : object {
    [ExtensionAttribute]
public static Result`1<TValue> ToResult(TValue value);
    [ExtensionAttribute]
internal static string ToLabelValueStringOrEmpty(object value, string label);
}
[ExtensionAttribute]
public static class FluentResults.ReasonExtensions : object {
    [ExtensionAttribute]
public static bool HasMetadataKey(IReason reason, string key);
    [ExtensionAttribute]
public static bool HasMetadata(IReason reason, string key, Func`2<object, bool> predicate);
}
internal class FluentResults.ReasonFormat : object {
    public static string ErrorReasonsToString(IReadOnlyCollection`1<IError> errorReasons);
    public static string ReasonsToString(IReadOnlyCollection`1<IReason> errorReasons);
}
public class FluentResults.ReasonStringBuilder : object {
    private string _reasonType;
    private List`1<string> _infos;
    public ReasonStringBuilder WithReasonType(Type type);
    public ReasonStringBuilder WithInfo(string label, string value);
    public string Build();
    private static string ReasonInfosToString(List`1<string> reasonInfos);
}
public class FluentResults.Result : ResultBase`1<Result> {
    [CompilerGeneratedAttribute]
private static ResultSettings <Settings>k__BackingField;
    internal static ResultSettings Settings { get; private set; }
    private static Result();
    [CompilerGeneratedAttribute]
internal static ResultSettings get_Settings();
    [CompilerGeneratedAttribute]
private static void set_Settings(ResultSettings value);
    public static void Setup(Action`1<ResultSettingsBuilder> setupFunc);
    public static Result Ok();
    public static Result Fail(IError error);
    public static Result Fail(string errorMessage);
    public static Result Fail(IEnumerable`1<string> errorMessages);
    public static Result Fail(IEnumerable`1<IError> errors);
    public static Result`1<TValue> Ok(TValue value);
    public static Result`1<TValue> Fail(IError error);
    public static Result`1<TValue> Fail(string errorMessage);
    public static Result`1<TValue> Fail(IEnumerable`1<string> errorMessages);
    public static Result`1<TValue> Fail(IEnumerable`1<IError> errors);
    public static Result Merge(ResultBase[] results);
    public static Result`1<IEnumerable`1<TValue>> Merge(Result`1[] results);
    public static Result OkIf(bool isSuccess, IError error);
    public static Result OkIf(bool isSuccess, string error);
    public static Result OkIf(bool isSuccess, Func`1<IError> errorFactory);
    public static Result OkIf(bool isSuccess, Func`1<string> errorMessageFactory);
    public static Result FailIf(bool isFailure, IError error);
    public static Result FailIf(bool isFailure, string error);
    public static Result FailIf(bool isFailure, Func`1<IError> errorFactory);
    public static Result FailIf(bool isFailure, Func`1<string> errorMessageFactory);
    public static Result Try(Action action, Func`2<Exception, IError> catchHandler);
    [AsyncStateMachineAttribute("FluentResults.Result/<Try>d__27")]
public static Task`1<Result> Try(Func`1<Task> action, Func`2<Exception, IError> catchHandler);
    [AsyncStateMachineAttribute("FluentResults.Result/<Try>d__28")]
public static ValueTask`1<Result> Try(Func`1<ValueTask> action, Func`2<Exception, IError> catchHandler);
    public static Result`1<T> Try(Func`1<T> action, Func`2<Exception, IError> catchHandler);
    [AsyncStateMachineAttribute("FluentResults.Result/<Try>d__30`1")]
public static Task`1<Result`1<T>> Try(Func`1<Task`1<T>> action, Func`2<Exception, IError> catchHandler);
    [AsyncStateMachineAttribute("FluentResults.Result/<Try>d__31`1")]
public static ValueTask`1<Result`1<T>> Try(Func`1<ValueTask`1<T>> action, Func`2<Exception, IError> catchHandler);
    public Result MapErrors(Func`2<IError, IError> errorMapper);
    public Result MapSuccesses(Func`2<ISuccess, ISuccess> successMapper);
    public Result`1<TNewValue> ToResult(TNewValue newValue);
    public Result`1<TNewValue> Bind(Func`1<Result`1<TNewValue>> bind);
    [AsyncStateMachineAttribute("FluentResults.Result/<Bind>d__37`1")]
public Task`1<Result`1<TNewValue>> Bind(Func`1<Task`1<Result`1<TNewValue>>> bind);
    [AsyncStateMachineAttribute("FluentResults.Result/<Bind>d__38`1")]
public ValueTask`1<Result`1<TNewValue>> Bind(Func`1<ValueTask`1<Result`1<TNewValue>>> bind);
    public Result Bind(Func`1<Result> action);
    [AsyncStateMachineAttribute("FluentResults.Result/<Bind>d__40")]
public Task`1<Result> Bind(Func`1<Task`1<Result>> action);
    [AsyncStateMachineAttribute("FluentResults.Result/<Bind>d__41")]
public ValueTask`1<Result> Bind(Func`1<ValueTask`1<Result>> action);
    public static Result op_Implicit(Error error);
    public static Result op_Implicit(List`1<Error> errors);
}
public class FluentResults.Result`1 : ResultBase`1<Result`1<TValue>> {
    private TValue _value;
    public TValue ValueOrDefault { get; }
    public TValue Value { get; private set; }
    public sealed virtual TValue get_ValueOrDefault();
    public sealed virtual TValue get_Value();
    private void set_Value(TValue value);
    public Result`1<TValue> WithValue(TValue value);
    public Result`1<TValue> MapErrors(Func`2<IError, IError> errorMapper);
    public Result`1<TValue> MapSuccesses(Func`2<ISuccess, ISuccess> successMapper);
    public Result ToResult();
    public Result`1<TNewValue> ToResult(Func`2<TValue, TNewValue> valueConverter);
    public Result`1<TNewValue> Map(Func`2<TValue, TNewValue> mapLogic);
    public Result`1<TNewValue> Bind(Func`2<TValue, Result`1<TNewValue>> bind);
    [AsyncStateMachineAttribute("FluentResults.Result`1/<Bind>d__14`1")]
public Task`1<Result`1<TNewValue>> Bind(Func`2<TValue, Task`1<Result`1<TNewValue>>> bind);
    [AsyncStateMachineAttribute("FluentResults.Result`1/<Bind>d__15`1")]
public ValueTask`1<Result`1<TNewValue>> Bind(Func`2<TValue, ValueTask`1<Result`1<TNewValue>>> bind);
    public Result Bind(Func`2<TValue, Result> action);
    [AsyncStateMachineAttribute("FluentResults.Result`1/<Bind>d__17")]
public Task`1<Result> Bind(Func`2<TValue, Task`1<Result>> action);
    [AsyncStateMachineAttribute("FluentResults.Result`1/<Bind>d__18")]
public ValueTask`1<Result> Bind(Func`2<TValue, ValueTask`1<Result>> action);
    public virtual string ToString();
    public static Result`1<TValue> op_Implicit(Result result);
    public static Result`1<object> op_Implicit(Result`1<TValue> result);
    public static Result`1<TValue> op_Implicit(TValue value);
    public static Result`1<TValue> op_Implicit(Error error);
    public static Result`1<TValue> op_Implicit(List`1<Error> errors);
    public void Deconstruct(Boolean& isSuccess, Boolean& isFailed, TValue& value);
    public void Deconstruct(Boolean& isSuccess, Boolean& isFailed, TValue& value, List`1& errors);
    private void ThrowIfFailed();
}
public abstract class FluentResults.ResultBase : object {
    [CompilerGeneratedAttribute]
private List`1<IReason> <Reasons>k__BackingField;
    public bool IsFailed { get; }
    public bool IsSuccess { get; }
    public List`1<IReason> Reasons { get; }
    public List`1<IError> Errors { get; }
    public List`1<ISuccess> Successes { get; }
    public sealed virtual bool get_IsFailed();
    public sealed virtual bool get_IsSuccess();
    [CompilerGeneratedAttribute]
public sealed virtual List`1<IReason> get_Reasons();
    public sealed virtual List`1<IError> get_Errors();
    public sealed virtual List`1<ISuccess> get_Successes();
    public bool HasError();
    public bool HasError(IEnumerable`1& result);
    public bool HasError(Func`2<TError, bool> predicate);
    public bool HasError(Func`2<TError, bool> predicate, IEnumerable`1& result);
    public bool HasError(Func`2<IError, bool> predicate);
    public bool HasError(Func`2<IError, bool> predicate, IEnumerable`1& result);
    public bool HasException();
    public bool HasException(IEnumerable`1& result);
    public bool HasException(Func`2<TException, bool> predicate);
    public bool HasException(Func`2<TException, bool> predicate, IEnumerable`1& result);
    public bool HasSuccess();
    public bool HasSuccess(IEnumerable`1& result);
    public bool HasSuccess(Func`2<TSuccess, bool> predicate);
    public bool HasSuccess(Func`2<TSuccess, bool> predicate, IEnumerable`1& result);
    public bool HasSuccess(Func`2<ISuccess, bool> predicate, IEnumerable`1& result);
    public bool HasSuccess(Func`2<ISuccess, bool> predicate);
    public void Deconstruct(Boolean& isSuccess, Boolean& isFailed);
    public void Deconstruct(Boolean& isSuccess, Boolean& isFailed, List`1& errors);
}
public abstract class FluentResults.ResultBase`1 : ResultBase {
    public TResult WithReason(IReason reason);
    public TResult WithReasons(IEnumerable`1<IReason> reasons);
    public TResult WithError(string errorMessage);
    public TResult WithError(IError error);
    public TResult WithErrors(IEnumerable`1<IError> errors);
    public TResult WithErrors(IEnumerable`1<string> errors);
    public TResult WithError();
    public TResult WithSuccess(string successMessage);
    public TResult WithSuccess(ISuccess success);
    public TResult WithSuccess();
    public TResult WithSuccesses(IEnumerable`1<ISuccess> successes);
    public TResult Log(LogLevel logLevel);
    public TResult Log(string context, LogLevel logLevel);
    public TResult Log(string context, string content, LogLevel logLevel);
    public TResult Log(LogLevel logLevel);
    public TResult Log(string content, LogLevel logLevel);
    public TResult LogIfSuccess(LogLevel logLevel);
    public TResult LogIfSuccess(string context, string content, LogLevel logLevel);
    public TResult LogIfSuccess(string content, LogLevel logLevel);
    public TResult LogIfFailed(LogLevel logLevel);
    public TResult LogIfFailed(string context, string content, LogLevel logLevel);
    public TResult LogIfFailed(string content, LogLevel logLevel);
    public virtual string ToString();
}
internal static class FluentResults.ResultHelper : object {
    public static Result Merge(IEnumerable`1<ResultBase> results);
    public static Result`1<IEnumerable`1<TValue>> MergeWithValue(IEnumerable`1<Result`1<TValue>> results);
    public static bool HasError(List`1<IError> errors, Func`2<TError, bool> predicate, IEnumerable`1& result);
    public static bool HasException(List`1<IError> errors, Func`2<TException, bool> predicate, IEnumerable`1& result);
    public static bool HasSuccess(List`1<ISuccess> successes, Func`2<TSuccess, bool> predicate, IEnumerable`1& result);
}
public class FluentResults.ResultSettings : object {
    [CompilerGeneratedAttribute]
private IResultLogger <Logger>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<Exception, IError> <DefaultTryCatchHandler>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<string, ISuccess> <SuccessFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<string, IError> <ErrorFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`3<string, Exception, IExceptionalError> <ExceptionalErrorFactory>k__BackingField;
    public IResultLogger Logger { get; public set; }
    public Func`2<Exception, IError> DefaultTryCatchHandler { get; public set; }
    public Func`2<string, ISuccess> SuccessFactory { get; public set; }
    public Func`2<string, IError> ErrorFactory { get; public set; }
    public Func`3<string, Exception, IExceptionalError> ExceptionalErrorFactory { get; public set; }
    [CompilerGeneratedAttribute]
public IResultLogger get_Logger();
    [CompilerGeneratedAttribute]
public void set_Logger(IResultLogger value);
    [CompilerGeneratedAttribute]
public Func`2<Exception, IError> get_DefaultTryCatchHandler();
    [CompilerGeneratedAttribute]
public void set_DefaultTryCatchHandler(Func`2<Exception, IError> value);
    [CompilerGeneratedAttribute]
public Func`2<string, ISuccess> get_SuccessFactory();
    [CompilerGeneratedAttribute]
public void set_SuccessFactory(Func`2<string, ISuccess> value);
    [CompilerGeneratedAttribute]
public Func`2<string, IError> get_ErrorFactory();
    [CompilerGeneratedAttribute]
public void set_ErrorFactory(Func`2<string, IError> value);
    [CompilerGeneratedAttribute]
public Func`3<string, Exception, IExceptionalError> get_ExceptionalErrorFactory();
    [CompilerGeneratedAttribute]
public void set_ExceptionalErrorFactory(Func`3<string, Exception, IExceptionalError> value);
}
public class FluentResults.ResultSettingsBuilder : object {
    [CompilerGeneratedAttribute]
private IResultLogger <Logger>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<Exception, IError> <DefaultTryCatchHandler>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<string, ISuccess> <SuccessFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<string, IError> <ErrorFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`3<string, Exception, IExceptionalError> <ExceptionalErrorFactory>k__BackingField;
    public IResultLogger Logger { get; public set; }
    public Func`2<Exception, IError> DefaultTryCatchHandler { get; public set; }
    public Func`2<string, ISuccess> SuccessFactory { get; public set; }
    public Func`2<string, IError> ErrorFactory { get; public set; }
    public Func`3<string, Exception, IExceptionalError> ExceptionalErrorFactory { get; public set; }
    [CompilerGeneratedAttribute]
public IResultLogger get_Logger();
    [CompilerGeneratedAttribute]
public void set_Logger(IResultLogger value);
    [CompilerGeneratedAttribute]
public Func`2<Exception, IError> get_DefaultTryCatchHandler();
    [CompilerGeneratedAttribute]
public void set_DefaultTryCatchHandler(Func`2<Exception, IError> value);
    [CompilerGeneratedAttribute]
public Func`2<string, ISuccess> get_SuccessFactory();
    [CompilerGeneratedAttribute]
public void set_SuccessFactory(Func`2<string, ISuccess> value);
    [CompilerGeneratedAttribute]
public Func`2<string, IError> get_ErrorFactory();
    [CompilerGeneratedAttribute]
public void set_ErrorFactory(Func`2<string, IError> value);
    [CompilerGeneratedAttribute]
public Func`3<string, Exception, IExceptionalError> get_ExceptionalErrorFactory();
    [CompilerGeneratedAttribute]
public void set_ExceptionalErrorFactory(Func`3<string, Exception, IExceptionalError> value);
    public ResultSettings Build();
}
public class FluentResults.Success : object {
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, object> <Metadata>k__BackingField;
    public string Message { get; protected set; }
    public Dictionary`2<string, object> Metadata { get; }
    public Success(string message);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Message();
    [CompilerGeneratedAttribute]
protected void set_Message(string value);
    [CompilerGeneratedAttribute]
public sealed virtual Dictionary`2<string, object> get_Metadata();
    public Success WithMetadata(string metadataName, object metadataValue);
    public Success WithMetadata(Dictionary`2<string, object> metadata);
    public virtual string ToString();
}
