[ExtensionAttribute]
internal static class FluentScheduler.DateTimeExtensions : object {
    [ExtensionAttribute]
internal static DateTime First(DateTime current);
    [ExtensionAttribute]
internal static DateTime FirstOfYear(DateTime current);
    [ExtensionAttribute]
internal static DateTime Last(DateTime current);
    [ExtensionAttribute]
internal static DateTime Last(DateTime current, DayOfWeek dayOfWeek);
    [ExtensionAttribute]
internal static DateTime ThisOrNext(DateTime current, DayOfWeek dayOfWeek);
    [ExtensionAttribute]
internal static DateTime Next(DateTime current, DayOfWeek dayOfWeek);
    [ExtensionAttribute]
internal static DateTime NextNWeekday(DateTime current, int toAdvance);
    [ExtensionAttribute]
internal static bool IsWeekday(DateTime current);
    [ExtensionAttribute]
internal static DateTime ClearMinutesAndSeconds(DateTime current);
    [ExtensionAttribute]
internal static DateTime ToWeek(DateTime current, Week week);
}
public class FluentScheduler.DayUnit : object {
    private int _duration;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Schedule <Schedule>k__BackingField;
    internal Schedule Schedule { get; private set; }
    private Schedule FluentScheduler.IDayRestrictableUnit.Schedule { get; }
    internal DayUnit(Schedule schedule, int duration);
    [CompilerGeneratedAttribute]
internal Schedule get_Schedule();
    [CompilerGeneratedAttribute]
private void set_Schedule(Schedule value);
    private sealed virtual override Schedule FluentScheduler.IDayRestrictableUnit.get_Schedule();
    public IDayRestrictableUnit At(int hours, int minutes);
    private sealed virtual override DateTime FluentScheduler.IDayRestrictableUnit.DayIncrement(DateTime increment);
    [CompilerGeneratedAttribute]
private DateTime <.ctor>b__1_0(DateTime x);
}
[ExtensionAttribute]
public static class FluentScheduler.DelayForExtensions : object {
    private static DelayTimeUnit DelayFor(Schedule schedule, int interval);
    [ExtensionAttribute]
public static DelayTimeUnit DelayFor(SpecificTimeUnit unit, int interval);
    [ExtensionAttribute]
public static DelayTimeUnit DelayFor(MillisecondUnit unit, int interval);
    [ExtensionAttribute]
public static DelayTimeUnit DelayFor(SecondUnit unit, int interval);
    [ExtensionAttribute]
public static DelayTimeUnit DelayFor(MinuteUnit unit, int interval);
    [ExtensionAttribute]
public static DelayTimeUnit DelayFor(HourUnit unit, int interval);
    [ExtensionAttribute]
public static DelayTimeUnit DelayFor(DayUnit unit, int interval);
    [ExtensionAttribute]
public static DelayTimeUnit DelayFor(WeekUnit unit, int interval);
    [ExtensionAttribute]
public static DelayTimeUnit DelayFor(MonthUnit unit, int interval);
}
public class FluentScheduler.DelayTimeUnit : object {
    private int _interval;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Schedule <Schedule>k__BackingField;
    internal Schedule Schedule { get; private set; }
    internal DelayTimeUnit(Schedule schedule, int interval);
    [CompilerGeneratedAttribute]
internal Schedule get_Schedule();
    [CompilerGeneratedAttribute]
private void set_Schedule(Schedule value);
    public void Milliseconds();
    public void Seconds();
    public void Minutes();
    public void Hours();
    public void Days();
    public void Weeks();
    public void Months();
    public void Years();
}
public class FluentScheduler.HourUnit : object {
    private int _duration;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Schedule <Schedule>k__BackingField;
    internal Schedule Schedule { get; private set; }
    private Schedule FluentScheduler.ITimeRestrictableUnit.Schedule { get; }
    internal HourUnit(Schedule schedule, int duration);
    [CompilerGeneratedAttribute]
internal Schedule get_Schedule();
    [CompilerGeneratedAttribute]
private void set_Schedule(Schedule value);
    private sealed virtual override Schedule FluentScheduler.ITimeRestrictableUnit.get_Schedule();
    public ITimeRestrictableUnit At(int minutes);
    [CompilerGeneratedAttribute]
private DateTime <.ctor>b__1_0(DateTime x);
}
public interface FluentScheduler.IAsyncJob {
    public abstract virtual Task ExecuteAsync();
    private sealed virtual override void FluentScheduler.IJob.Execute();
}
public interface FluentScheduler.IDayRestrictableUnit {
    public Schedule Schedule { get; }
    public abstract virtual Schedule get_Schedule();
    public abstract virtual DateTime DayIncrement(DateTime increment);
}
public interface FluentScheduler.IJob {
    public abstract virtual void Execute();
}
public interface FluentScheduler.IJobFactory {
    public abstract virtual IJob GetJobInstance();
}
public interface FluentScheduler.ITimeRestrictableUnit {
    public Schedule Schedule { get; }
    public abstract virtual Schedule get_Schedule();
}
public class FluentScheduler.JobEndInfo : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private DateTime <StartTime>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private TimeSpan <Duration>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Nullable`1<DateTime> <NextRun>k__BackingField;
    public string Name { get; public set; }
    public DateTime StartTime { get; public set; }
    public TimeSpan Duration { get; public set; }
    public Nullable`1<DateTime> NextRun { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public DateTime get_StartTime();
    [CompilerGeneratedAttribute]
public void set_StartTime(DateTime value);
    [CompilerGeneratedAttribute]
public TimeSpan get_Duration();
    [CompilerGeneratedAttribute]
public void set_Duration(TimeSpan value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTime> get_NextRun();
    [CompilerGeneratedAttribute]
public void set_NextRun(Nullable`1<DateTime> value);
}
public class FluentScheduler.JobExceptionInfo : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Exception <Exception>k__BackingField;
    public string Name { get; public set; }
    public Exception Exception { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public Exception get_Exception();
    [CompilerGeneratedAttribute]
public void set_Exception(Exception value);
}
internal class FluentScheduler.JobFactory : object {
    private sealed virtual override IJob FluentScheduler.IJobFactory.GetJobInstance();
}
public static class FluentScheduler.JobManager : object {
    private static UInt32 _maxTimerInterval;
    private static bool _useUtc;
    private static Timer _timer;
    private static ScheduleCollection _schedules;
    private static ISet`1<Tuple`2<Schedule, Task>> _running;
    private static IJobFactory _jobFactory;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private static Action`1<JobExceptionInfo> JobException;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private static Action`1<JobStartInfo> JobStart;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private static Action`1<JobEndInfo> JobEnd;
    internal static DateTime Now { get; }
    private static IJobFactory JobFactory { get; public set; }
    public static IEnumerable`1<Schedule> RunningSchedules { get; }
    public static IEnumerable`1<Schedule> AllSchedules { get; }
    private static JobManager();
    internal static DateTime get_Now();
    public static void UseUtcTime();
    private static IJobFactory get_JobFactory();
    public static void set_JobFactory(IJobFactory value);
    internal static Action GetJobAction();
    internal static Action GetJobAction(IJob job);
    internal static Action GetJobAction(Func`1<IJob> jobFactory);
    private static void DisposeIfNeeded(IJob job);
    [CompilerGeneratedAttribute]
public static void add_JobException(Action`1<JobExceptionInfo> value);
    [CompilerGeneratedAttribute]
public static void remove_JobException(Action`1<JobExceptionInfo> value);
    [CompilerGeneratedAttribute]
public static void add_JobStart(Action`1<JobStartInfo> value);
    [CompilerGeneratedAttribute]
public static void remove_JobStart(Action`1<JobStartInfo> value);
    [CompilerGeneratedAttribute]
public static void add_JobEnd(Action`1<JobEndInfo> value);
    [CompilerGeneratedAttribute]
public static void remove_JobEnd(Action`1<JobEndInfo> value);
    public static void Initialize(Registry[] registries);
    public static void Start();
    public static void Stop();
    public static void StopAndBlock();
    public static Schedule GetSchedule(string name);
    public static IEnumerable`1<Schedule> get_RunningSchedules();
    public static IEnumerable`1<Schedule> get_AllSchedules();
    public static void AddJob(Action job, Action`1<Schedule> schedule);
    public static void AddJob(IJob job, Action`1<Schedule> schedule);
    public static void AddJob(Action`1<Schedule> schedule);
    private static void AddJob(Action`1<Schedule> jobSchedule, Schedule schedule);
    public static void RemoveJob(string name);
    public static void RemoveAllJobs();
    [IteratorStateMachineAttribute("FluentScheduler.JobManager/<CalculateNextRun>d__40")]
private static IEnumerable`1<Schedule> CalculateNextRun(IEnumerable`1<Schedule> schedules);
    private static void ScheduleJobs();
    internal static void RunJob(Schedule schedule);
}
public class FluentScheduler.JobStartInfo : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private DateTime <StartTime>k__BackingField;
    public string Name { get; public set; }
    public DateTime StartTime { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public DateTime get_StartTime();
    [CompilerGeneratedAttribute]
public void set_StartTime(DateTime value);
}
public class FluentScheduler.MillisecondUnit : object {
    private int _duration;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Schedule <Schedule>k__BackingField;
    internal Schedule Schedule { get; private set; }
    private Schedule FluentScheduler.ITimeRestrictableUnit.Schedule { get; }
    internal MillisecondUnit(Schedule schedule, int duration);
    [CompilerGeneratedAttribute]
internal Schedule get_Schedule();
    [CompilerGeneratedAttribute]
private void set_Schedule(Schedule value);
    private sealed virtual override Schedule FluentScheduler.ITimeRestrictableUnit.get_Schedule();
    [CompilerGeneratedAttribute]
private DateTime <.ctor>b__1_0(DateTime x);
}
public class FluentScheduler.MinuteUnit : object {
    private int _duration;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Schedule <Schedule>k__BackingField;
    internal Schedule Schedule { get; private set; }
    private Schedule FluentScheduler.ITimeRestrictableUnit.Schedule { get; }
    internal MinuteUnit(Schedule schedule, int duration);
    [CompilerGeneratedAttribute]
internal Schedule get_Schedule();
    [CompilerGeneratedAttribute]
private void set_Schedule(Schedule value);
    private sealed virtual override Schedule FluentScheduler.ITimeRestrictableUnit.get_Schedule();
    [CompilerGeneratedAttribute]
private DateTime <.ctor>b__1_0(DateTime x);
}
public class FluentScheduler.MonthOnDayOfMonthUnit : object {
    private int _duration;
    private int _dayOfMonth;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Schedule <Schedule>k__BackingField;
    internal Schedule Schedule { get; private set; }
    private Schedule FluentScheduler.IDayRestrictableUnit.Schedule { get; }
    internal MonthOnDayOfMonthUnit(Schedule schedule, int duration, int dayOfMonth);
    [CompilerGeneratedAttribute]
internal Schedule get_Schedule();
    [CompilerGeneratedAttribute]
private void set_Schedule(Schedule value);
    private sealed virtual override Schedule FluentScheduler.IDayRestrictableUnit.get_Schedule();
    private sealed virtual override DateTime FluentScheduler.IDayRestrictableUnit.DayIncrement(DateTime increment);
    public IDayRestrictableUnit At(int hours, int minutes);
}
public class FluentScheduler.MonthOnDayOfWeekUnit : object {
    private int _duration;
    private Week _week;
    private DayOfWeek _dayOfWeek;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Schedule <Schedule>k__BackingField;
    internal Schedule Schedule { get; private set; }
    internal MonthOnDayOfWeekUnit(Schedule schedule, int duration, Week week, DayOfWeek dayOfWeek);
    [CompilerGeneratedAttribute]
internal Schedule get_Schedule();
    [CompilerGeneratedAttribute]
private void set_Schedule(Schedule value);
    public void At(int hours, int minutes);
}
public class FluentScheduler.MonthOnLastDayOfMonthUnit : object {
    private int _duration;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Schedule <Schedule>k__BackingField;
    internal Schedule Schedule { get; private set; }
    internal MonthOnLastDayOfMonthUnit(Schedule schedule, int duration);
    [CompilerGeneratedAttribute]
internal Schedule get_Schedule();
    [CompilerGeneratedAttribute]
private void set_Schedule(Schedule value);
    public void At(int hours, int minutes);
    [CompilerGeneratedAttribute]
private DateTime <.ctor>b__1_0(DateTime x);
}
public class FluentScheduler.MonthUnit : object {
    private int _duration;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Schedule <Schedule>k__BackingField;
    internal Schedule Schedule { get; private set; }
    internal MonthUnit(Schedule schedule, int duration);
    [CompilerGeneratedAttribute]
internal Schedule get_Schedule();
    [CompilerGeneratedAttribute]
private void set_Schedule(Schedule value);
    public MonthOnDayOfMonthUnit On(int day);
    public MonthOnLastDayOfMonthUnit OnTheLastDay();
    public MonthOnDayOfWeekUnit OnTheFirst(DayOfWeek day);
    public MonthOnDayOfWeekUnit OnTheSecond(DayOfWeek day);
    public MonthOnDayOfWeekUnit OnTheThird(DayOfWeek day);
    public MonthOnDayOfWeekUnit OnTheFourth(DayOfWeek day);
    public MonthOnDayOfWeekUnit OnTheLast(DayOfWeek day);
    [CompilerGeneratedAttribute]
private DateTime <.ctor>b__1_0(DateTime x);
}
public class FluentScheduler.Registry : object {
    private bool _allJobsConfiguredAsNonReentrant;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private List`1<Schedule> <Schedules>k__BackingField;
    internal List`1<Schedule> Schedules { get; private set; }
    [CompilerGeneratedAttribute]
internal List`1<Schedule> get_Schedules();
    [CompilerGeneratedAttribute]
private void set_Schedules(List`1<Schedule> value);
    public void NonReentrantAsDefault();
    public Schedule Schedule(Action job);
    public Schedule Schedule(IJob job);
    public Schedule Schedule();
    public Schedule Schedule(Func`1<IJob> job);
    private Schedule Schedule(Action action, string name);
}
[ExtensionAttribute]
public static class FluentScheduler.RestrictableUnitExtensions : object {
    [ExtensionAttribute]
public static ITimeRestrictableUnit Between(ITimeRestrictableUnit unit, int startHour, int startMinute, int endHour, int endMinute);
    [ExtensionAttribute]
public static IDayRestrictableUnit WeekdaysOnly(IDayRestrictableUnit unit);
}
public class FluentScheduler.Schedule : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private DateTime <NextRun>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <Disabled>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private List`1<Action> <Jobs>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Func`2<DateTime, DateTime> <CalculateNextRun>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private TimeSpan <DelayRunFor>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ICollection`1<Schedule> <AdditionalSchedules>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Schedule <Parent>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <PendingRunOnce>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private object <Reentrant>k__BackingField;
    public DateTime NextRun { get; internal set; }
    public string Name { get; internal set; }
    public bool Disabled { get; private set; }
    internal List`1<Action> Jobs { get; private set; }
    internal Func`2<DateTime, DateTime> CalculateNextRun { get; internal set; }
    internal TimeSpan DelayRunFor { get; internal set; }
    internal ICollection`1<Schedule> AdditionalSchedules { get; internal set; }
    internal Schedule Parent { get; internal set; }
    internal bool PendingRunOnce { get; internal set; }
    internal object Reentrant { get; internal set; }
    public Schedule(Action action);
    public Schedule(IEnumerable`1<Action> actions);
    [CompilerGeneratedAttribute]
public DateTime get_NextRun();
    [CompilerGeneratedAttribute]
internal void set_NextRun(DateTime value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
internal void set_Name(string value);
    [CompilerGeneratedAttribute]
public bool get_Disabled();
    [CompilerGeneratedAttribute]
private void set_Disabled(bool value);
    [CompilerGeneratedAttribute]
internal List`1<Action> get_Jobs();
    [CompilerGeneratedAttribute]
private void set_Jobs(List`1<Action> value);
    [CompilerGeneratedAttribute]
internal Func`2<DateTime, DateTime> get_CalculateNextRun();
    [CompilerGeneratedAttribute]
internal void set_CalculateNextRun(Func`2<DateTime, DateTime> value);
    [CompilerGeneratedAttribute]
internal TimeSpan get_DelayRunFor();
    [CompilerGeneratedAttribute]
internal void set_DelayRunFor(TimeSpan value);
    [CompilerGeneratedAttribute]
internal ICollection`1<Schedule> get_AdditionalSchedules();
    [CompilerGeneratedAttribute]
internal void set_AdditionalSchedules(ICollection`1<Schedule> value);
    [CompilerGeneratedAttribute]
internal Schedule get_Parent();
    [CompilerGeneratedAttribute]
internal void set_Parent(Schedule value);
    [CompilerGeneratedAttribute]
internal bool get_PendingRunOnce();
    [CompilerGeneratedAttribute]
internal void set_PendingRunOnce(bool value);
    [CompilerGeneratedAttribute]
internal object get_Reentrant();
    [CompilerGeneratedAttribute]
internal void set_Reentrant(object value);
    public void Execute();
    public Schedule AndThen(Action job);
    public Schedule AndThen(IJob job);
    public Schedule AndThen(Func`1<IJob> job);
    public Schedule AndThen();
    public SpecificTimeUnit ToRunNow();
    public TimeUnit ToRunEvery(int interval);
    public TimeUnit ToRunOnceIn(int interval);
    public SpecificTimeUnit ToRunOnceAt(int hours, int minutes);
    public SpecificTimeUnit ToRunOnceAt(DateTime time);
    public Schedule WithName(string name);
    public Schedule NonReentrant();
    public void Disable();
    public void Enable();
}
internal class FluentScheduler.ScheduleCollection : object {
    private List`1<Schedule> _schedules;
    private object _lock;
    internal bool Any();
    internal void Sort();
    internal IEnumerable`1<Schedule> All();
    internal void Add(Schedule schedule);
    internal bool Remove(string name);
    internal bool Remove(Schedule schedule);
    internal void RemoveAll();
    internal Schedule First();
    internal Schedule Get(string name);
}
public class FluentScheduler.SecondUnit : object {
    private int _duration;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Schedule <Schedule>k__BackingField;
    internal Schedule Schedule { get; private set; }
    private Schedule FluentScheduler.ITimeRestrictableUnit.Schedule { get; }
    internal SecondUnit(Schedule schedule, int duration);
    [CompilerGeneratedAttribute]
internal Schedule get_Schedule();
    [CompilerGeneratedAttribute]
private void set_Schedule(Schedule value);
    private sealed virtual override Schedule FluentScheduler.ITimeRestrictableUnit.get_Schedule();
    [CompilerGeneratedAttribute]
private DateTime <.ctor>b__1_0(DateTime x);
}
public class FluentScheduler.SpecificTimeUnit : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Schedule <Schedule>k__BackingField;
    internal Schedule Schedule { get; private set; }
    internal SpecificTimeUnit(Schedule schedule);
    [CompilerGeneratedAttribute]
internal Schedule get_Schedule();
    [CompilerGeneratedAttribute]
private void set_Schedule(Schedule value);
    public TimeUnit AndEvery(int interval);
}
internal enum FluentScheduler.TimeOfDayRunnable : Enum {
    public int value__;
    public static TimeOfDayRunnable TooEarly;
    public static TimeOfDayRunnable CanRun;
    public static TimeOfDayRunnable TooLate;
}
internal class FluentScheduler.TimeOfDayRunnableCalculator : object {
    private int _startHour;
    private int _startMinute;
    private int _endHour;
    private int _endMinute;
    internal TimeOfDayRunnableCalculator(int startHour, int startMinute, int endHour, int endMinute);
    internal TimeOfDayRunnable Calculate(DateTime nextRun);
}
public class FluentScheduler.TimeUnit : object {
    private Schedule _schedule;
    private int _duration;
    internal TimeUnit(Schedule schedule, int duration);
    public MillisecondUnit Milliseconds();
    public SecondUnit Seconds();
    public MinuteUnit Minutes();
    public HourUnit Hours();
    public DayUnit Days();
    public WeekdayUnit Weekdays();
    public WeekUnit Weeks();
    public MonthUnit Months();
}
internal enum FluentScheduler.Week : Enum {
    public int value__;
    public static Week First;
    public static Week Second;
    public static Week Third;
    public static Week Fourth;
    public static Week Last;
}
public class FluentScheduler.WeekdayUnit : object {
    private int _duration;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Schedule <Schedule>k__BackingField;
    internal Schedule Schedule { get; private set; }
    private Schedule FluentScheduler.ITimeRestrictableUnit.Schedule { get; }
    internal WeekdayUnit(Schedule schedule, int duration);
    [CompilerGeneratedAttribute]
internal Schedule get_Schedule();
    [CompilerGeneratedAttribute]
private void set_Schedule(Schedule value);
    private sealed virtual override Schedule FluentScheduler.ITimeRestrictableUnit.get_Schedule();
    public void At(int hours, int minutes);
    [CompilerGeneratedAttribute]
private DateTime <.ctor>b__1_0(DateTime x);
}
public class FluentScheduler.WeeklyDayOfWeekUnit : object {
    private int _duration;
    private DayOfWeek _day;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Schedule <Schedule>k__BackingField;
    internal Schedule Schedule { get; private set; }
    internal WeeklyDayOfWeekUnit(Schedule schedule, int duration, DayOfWeek day);
    [CompilerGeneratedAttribute]
internal Schedule get_Schedule();
    [CompilerGeneratedAttribute]
private void set_Schedule(Schedule value);
    public void At(int hours, int minutes);
}
public class FluentScheduler.WeekUnit : object {
    private int _duration;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Schedule <Schedule>k__BackingField;
    internal Schedule Schedule { get; private set; }
    internal WeekUnit(Schedule schedule, int duration);
    [CompilerGeneratedAttribute]
internal Schedule get_Schedule();
    [CompilerGeneratedAttribute]
private void set_Schedule(Schedule value);
    public void At(int hours, int minutes);
    public WeeklyDayOfWeekUnit On(DayOfWeek day);
    [CompilerGeneratedAttribute]
private DateTime <.ctor>b__1_0(DateTime x);
}
