public abstract class FluentValidation.AspNetCore.ClientValidatorBase : object {
    [CompilerGeneratedAttribute]
private IPropertyValidator <Validator>k__BackingField;
    [CompilerGeneratedAttribute]
private IValidationRule <Rule>k__BackingField;
    [CompilerGeneratedAttribute]
private IRuleComponent <Component>k__BackingField;
    public IPropertyValidator Validator { get; }
    public IValidationRule Rule { get; }
    public IRuleComponent Component { get; }
    public ClientValidatorBase(IValidationRule rule, IRuleComponent component);
    [CompilerGeneratedAttribute]
public IPropertyValidator get_Validator();
    [CompilerGeneratedAttribute]
public IValidationRule get_Rule();
    [CompilerGeneratedAttribute]
public IRuleComponent get_Component();
    public abstract virtual void AddValidation(ClientModelValidationContext context);
    protected static bool MergeAttribute(IDictionary`2<string, string> attributes, string key, string value);
}
internal class FluentValidation.AspNetCore.CreditCardClientValidator : ClientValidatorBase {
    public CreditCardClientValidator(IValidationRule rule, IRuleComponent component);
    public virtual void AddValidation(ClientModelValidationContext context);
}
[AttributeUsageAttribute("2176")]
public class FluentValidation.AspNetCore.CustomizeValidatorAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <RuleSet>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Properties>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <Interceptor>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Skip>k__BackingField;
    public string RuleSet { get; public set; }
    public string Properties { get; public set; }
    public Type Interceptor { get; public set; }
    public bool Skip { get; public set; }
    [CompilerGeneratedAttribute]
public string get_RuleSet();
    [CompilerGeneratedAttribute]
public void set_RuleSet(string value);
    [CompilerGeneratedAttribute]
public string get_Properties();
    [CompilerGeneratedAttribute]
public void set_Properties(string value);
    [CompilerGeneratedAttribute]
public Type get_Interceptor();
    [CompilerGeneratedAttribute]
public void set_Interceptor(Type value);
    [CompilerGeneratedAttribute]
public bool get_Skip();
    [CompilerGeneratedAttribute]
public void set_Skip(bool value);
    public IValidatorSelector ToValidatorSelector(ModelValidationContext mvContext);
    protected virtual IValidatorSelector CreateRulesetValidatorSelector(ModelValidationContext mvContext, String[] ruleSets);
    protected virtual IValidatorSelector CreateMemberNameValidatorSelector(ModelValidationContext mvContext, String[] properties);
    protected virtual IValidatorSelector CreateDefaultValidatorSelector(ModelValidationContext mvContext);
    public IValidatorInterceptor GetInterceptor();
}
internal class FluentValidation.AspNetCore.EmailClientValidator : ClientValidatorBase {
    public EmailClientValidator(IValidationRule rule, IRuleComponent component);
    public virtual void AddValidation(ClientModelValidationContext context);
}
internal class FluentValidation.AspNetCore.EqualToClientValidator : ClientValidatorBase {
    private IComparisonValidator EqualValidator { get; }
    public EqualToClientValidator(IValidationRule rule, IRuleComponent component);
    private IComparisonValidator get_EqualValidator();
    public virtual void AddValidation(ClientModelValidationContext context);
}
public class FluentValidation.AspNetCore.FluentValidationAutoValidationConfiguration : object {
    [CompilerGeneratedAttribute]
private bool <ImplicitlyValidateChildProperties>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ImplicitlyValidateRootCollectionElements>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <ValidatorFactoryType>k__BackingField;
    [CompilerGeneratedAttribute]
private IValidatorFactory <ValidatorFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DisableDataAnnotationsValidation>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<Type, bool> <Filter>k__BackingField;
    [ObsoleteAttribute("Implicit validation of child properties deprecated and will be removed in a future release. Please use SetValidator instead. For details see https://github.com/FluentValidation/FluentValidation/issues/1960")]
public bool ImplicitlyValidateChildProperties { get; public set; }
    [ObsoleteAttribute("Implicit validation of root collection elements is deprecated and will be removed in a future release. Please use an explicit collection validator instead. For details see https://github.com/FluentValidation/FluentValidation/issues/1960")]
public bool ImplicitlyValidateRootCollectionElements { get; public set; }
    [ObsoleteAttribute("IValidatorFactory and its implementors are deprecated. Please use the Service Provider directly. For details see https://github.com/FluentValidation/FluentValidation/issues/1961")]
public Type ValidatorFactoryType { get; public set; }
    [ObsoleteAttribute("IValidatorFactory and its implementors are deprecated. Please use the Service Provider directly. For details see https://github.com/FluentValidation/FluentValidation/issues/1961")]
public IValidatorFactory ValidatorFactory { get; public set; }
    public bool DisableDataAnnotationsValidation { get; public set; }
    public Func`2<Type, bool> Filter { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_ImplicitlyValidateChildProperties();
    [CompilerGeneratedAttribute]
public void set_ImplicitlyValidateChildProperties(bool value);
    [CompilerGeneratedAttribute]
public bool get_ImplicitlyValidateRootCollectionElements();
    [CompilerGeneratedAttribute]
public void set_ImplicitlyValidateRootCollectionElements(bool value);
    [CompilerGeneratedAttribute]
public Type get_ValidatorFactoryType();
    [CompilerGeneratedAttribute]
public void set_ValidatorFactoryType(Type value);
    [CompilerGeneratedAttribute]
public IValidatorFactory get_ValidatorFactory();
    [CompilerGeneratedAttribute]
public void set_ValidatorFactory(IValidatorFactory value);
    [CompilerGeneratedAttribute]
public bool get_DisableDataAnnotationsValidation();
    [CompilerGeneratedAttribute]
public void set_DisableDataAnnotationsValidation(bool value);
    [CompilerGeneratedAttribute]
public Func`2<Type, bool> get_Filter();
    [CompilerGeneratedAttribute]
public void set_Filter(Func`2<Type, bool> value);
}
internal class FluentValidation.AspNetCore.FluentValidationBindingMetadataProvider : object {
    public static string Prefix;
    public sealed virtual void CreateBindingMetadata(BindingMetadataProviderContext context);
}
public class FluentValidation.AspNetCore.FluentValidationClientModelValidatorProvider : object {
    private IHttpContextAccessor _httpContextAccessor;
    private ValidatorDescriptorCache _descriptorCache;
    [CompilerGeneratedAttribute]
private Dictionary`2<Type, FluentValidationClientValidatorFactory> <ClientValidatorFactories>k__BackingField;
    public Dictionary`2<Type, FluentValidationClientValidatorFactory> ClientValidatorFactories { get; }
    public FluentValidationClientModelValidatorProvider(IHttpContextAccessor httpContextAccessor);
    [CompilerGeneratedAttribute]
public Dictionary`2<Type, FluentValidationClientValidatorFactory> get_ClientValidatorFactories();
    public void Add(Type validatorType, FluentValidationClientValidatorFactory factory);
    public sealed virtual void CreateValidators(ClientValidatorProviderContext context);
    protected virtual void HandleNonNullableValueTypeRequiredRule(ClientValidatorProviderContext context);
    protected virtual IClientModelValidator GetModelValidator(ClientValidatorProviderContext context, IValidationRule rule, IRuleComponent component);
    private bool TypeAllowsNullValue(Type type);
}
public class FluentValidation.AspNetCore.FluentValidationClientValidatorFactory : MulticastDelegate {
    public FluentValidationClientValidatorFactory(object object, IntPtr method);
    public virtual IClientModelValidator Invoke(ClientValidatorProviderContext context, IValidationRule rule, IRuleComponent component);
    public virtual IAsyncResult BeginInvoke(ClientValidatorProviderContext context, IValidationRule rule, IRuleComponent component, AsyncCallback callback, object object);
    public virtual IClientModelValidator EndInvoke(IAsyncResult result);
}
public class FluentValidation.AspNetCore.FluentValidationModelValidator : object {
    private bool _implicitValidationEnabled;
    private bool _implicitRootCollectionElementValidationEnabled;
    private Func`2<Type, bool> _filter;
    public FluentValidationModelValidator(bool implicitValidationEnabled);
    public FluentValidationModelValidator(bool implicitValidationEnabled, bool implicitRootCollectionElementValidationEnabled);
    public FluentValidationModelValidator(bool implicitValidationEnabled, bool implicitRootCollectionElementValidationEnabled, Func`2<Type, bool> filter);
    public virtual IEnumerable`1<ModelValidationResult> Validate(ModelValidationContext mvContext);
    protected bool ShouldSkip(ModelValidationContext mvContext);
    protected static ModelMetadata GetRootMetadata(ModelValidationContext mvContext);
    protected static CustomizeValidatorAttribute GetCustomizations(ActionContext context, object model);
    private static bool IsRootCollectionElementType(ModelMetadata rootMetadata, Type modelType);
}
public class FluentValidation.AspNetCore.FluentValidationModelValidatorProvider : object {
    private bool _implicitValidationEnabled;
    private bool _implicitRootCollectionElementValidationEnabled;
    private Func`2<Type, bool> _filter;
    public FluentValidationModelValidatorProvider(bool implicitValidationEnabled);
    public FluentValidationModelValidatorProvider(bool implicitValidationEnabled, bool implicitRootCollectionElementValidationEnabled);
    public FluentValidationModelValidatorProvider(bool implicitValidationEnabled, bool implicitRootCollectionElementValidationEnabled, Func`2<Type, bool> filter);
    public virtual void CreateValidators(ModelValidatorProviderContext context);
}
public class FluentValidation.AspNetCore.FluentValidationMvcConfiguration : FluentValidationAutoValidationConfiguration {
    private IServiceCollection _services;
    [CompilerGeneratedAttribute]
private ValidatorConfiguration <ValidatorOptions>k__BackingField;
    internal bool ClientsideEnabled;
    internal Action`1<FluentValidationClientModelValidatorProvider> ClientsideConfig;
    [CompilerGeneratedAttribute]
private bool <AutomaticValidationEnabled>k__BackingField;
    [ObsoleteAttribute("Global options should be set using the static ValidatorOptions.Global instead.")]
public ValidatorConfiguration ValidatorOptions { get; private set; }
    [ObsoleteAttribute("Set the static ValidatorOptions.Global.LanguageManager.Enabled property instead.")]
public bool LocalizationEnabled { get; public set; }
    public bool AutomaticValidationEnabled { get; public set; }
    [ObsoleteAttribute]
public FluentValidationMvcConfiguration(ValidatorConfiguration validatorOptions);
    internal FluentValidationMvcConfiguration(ValidatorConfiguration validatorOptions, IServiceCollection services);
    [CompilerGeneratedAttribute]
public ValidatorConfiguration get_ValidatorOptions();
    [CompilerGeneratedAttribute]
private void set_ValidatorOptions(ValidatorConfiguration value);
    public bool get_LocalizationEnabled();
    public void set_LocalizationEnabled(bool value);
    [CompilerGeneratedAttribute]
public bool get_AutomaticValidationEnabled();
    [CompilerGeneratedAttribute]
public void set_AutomaticValidationEnabled(bool value);
    [ObsoleteAttribute("RegisterValidatorsFromAssemblyContaining is deprecated. Call services.AddValidatorsFromAssemblyContaining<T> instead, which has the same effect. See https://github.com/FluentValidation/FluentValidation/issues/1963")]
public FluentValidationMvcConfiguration RegisterValidatorsFromAssemblyContaining(Func`2<AssemblyScanResult, bool> filter, ServiceLifetime lifetime, bool includeInternalTypes);
    [ObsoleteAttribute("RegisterValidatorsFromAssemblyContaining is deprecated. Call services.AddValidatorsFromAssemblyContaining instead, which has the same effect. See https://github.com/FluentValidation/FluentValidation/issues/1963")]
public FluentValidationMvcConfiguration RegisterValidatorsFromAssemblyContaining(Type type, Func`2<AssemblyScanResult, bool> filter, ServiceLifetime lifetime, bool includeInternalTypes);
    [ObsoleteAttribute("RegisterValidatorsFromAssembly is deprecated. Call services.AddValidatorsFromAssembly instead, which has the same effect. See https://github.com/FluentValidation/FluentValidation/issues/1963")]
public FluentValidationMvcConfiguration RegisterValidatorsFromAssembly(Assembly assembly, Func`2<AssemblyScanResult, bool> filter, ServiceLifetime lifetime, bool includeInternalTypes);
    [ObsoleteAttribute("RegisterValidatorsFromAssemblies is deprecated. Call services.AddValidatorsFromAssemblies instead, which has the same effect. See https://github.com/FluentValidation/FluentValidation/issues/1963")]
public FluentValidationMvcConfiguration RegisterValidatorsFromAssemblies(IEnumerable`1<Assembly> assemblies, Func`2<AssemblyScanResult, bool> filter, ServiceLifetime lifetime, bool includeInternalTypes);
    [ObsoleteAttribute("ConfigureClientsideValidation is deprecated and will be removed in a future release. To configure client-side validation call services.AddFluentValidationClientsideAdapters(config => ...) instead. For details see https://github.com/FluentValidation/FluentValidation/issues/1965")]
public FluentValidationMvcConfiguration ConfigureClientsideValidation(Action`1<FluentValidationClientModelValidatorProvider> clientsideConfig, bool enabled);
}
[ExtensionAttribute]
public static class FluentValidation.AspNetCore.FluentValidationMvcExtensions : object {
    [ExtensionAttribute]
[ObsoleteAttribute("Calling AddFluentValidation() is deprecated. Call services.AddFluentValidationAutoValidation().AddFluentValidationClientsideAdapters() instead, which has the same effect. For details see https://github.com/FluentValidation/FluentValidation/issues/1965")]
public static IMvcCoreBuilder AddFluentValidation(IMvcCoreBuilder mvcBuilder, Action`1<FluentValidationMvcConfiguration> configurationExpression);
    [ExtensionAttribute]
[ObsoleteAttribute("Calling AddFluentValidation() is deprecated. Call services.AddFluentValidationAutoValidation().AddFluentValidationClientsideAdapters() instead, which has the same effect. For details see https://github.com/FluentValidation/FluentValidation/issues/1965")]
public static IMvcBuilder AddFluentValidation(IMvcBuilder mvcBuilder, Action`1<FluentValidationMvcConfiguration> configurationExpression);
    [ExtensionAttribute]
[ObsoleteAttribute("Calling AddFluentValidation() is deprecated. Call services.AddFluentValidationAutoValidation().AddFluentValidationClientsideAdapters() instead, which has the same effect. For details see https://github.com/FluentValidation/FluentValidation/issues/1965")]
public static IServiceCollection AddFluentValidation(IServiceCollection services, Action`1<FluentValidationMvcConfiguration> configurationExpression);
    [ExtensionAttribute]
public static IServiceCollection AddFluentValidationAutoValidation(IServiceCollection services, Action`1<FluentValidationAutoValidationConfiguration> configurationExpression);
    [ExtensionAttribute]
public static IServiceCollection AddFluentValidationClientsideAdapters(IServiceCollection services, Action`1<FluentValidationClientModelValidatorProvider> configuration);
}
internal class FluentValidation.AspNetCore.FluentValidationObjectModelValidator : ObjectModelValidator {
    private bool _runMvcValidation;
    private FluentValidationModelValidatorProvider _fvProvider;
    public FluentValidationObjectModelValidator(IModelMetadataProvider modelMetadataProvider, IList`1<IModelValidatorProvider> validatorProviders, bool runMvcValidation);
    public virtual ValidationVisitor GetValidationVisitor(ActionContext actionContext, IModelValidatorProvider validatorProvider, ValidatorCache validatorCache, IModelMetadataProvider metadataProvider, ValidationStateDictionary validationState);
}
internal class FluentValidation.AspNetCore.FluentValidationViewOptionsSetup : object {
    private Action`1<FluentValidationClientModelValidatorProvider> _action;
    private IHttpContextAccessor _httpContextAccessor;
    public FluentValidationViewOptionsSetup(Action`1<FluentValidationClientModelValidatorProvider> action, IHttpContextAccessor httpContextAccessor);
    public sealed virtual void Configure(MvcViewOptions options);
}
internal class FluentValidation.AspNetCore.FluentValidationVisitor : ValidationVisitor {
    public FluentValidationVisitor(ActionContext actionContext, IModelValidatorProvider validatorProvider, ValidatorCache validatorCache, IModelMetadataProvider metadataProvider, ValidationStateDictionary validationState);
    public virtual bool Validate(ModelMetadata metadata, string key, object model, bool alwaysValidateAtTopLevel);
    public virtual bool Validate(ModelMetadata metadata, string key, object model, bool alwaysValidateAtTopLevel, object container);
    private bool ValidateInternal(ModelMetadata metadata, string key, object model, Func`1<bool> continuation);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private bool <>n__0(ModelMetadata metadata, string key, object model, bool alwaysValidateAtTopLevel);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private bool <>n__1(ModelMetadata metadata, string key, object model, bool alwaysValidateAtTopLevel, object container);
}
public interface FluentValidation.AspNetCore.IValidatorInterceptor {
    public abstract virtual IValidationContext BeforeAspNetValidation(ActionContext actionContext, IValidationContext commonContext);
    public abstract virtual ValidationResult AfterAspNetValidation(ActionContext actionContext, IValidationContext validationContext, ValidationResult result);
}
internal class FluentValidation.AspNetCore.MaxLengthClientValidator : ClientValidatorBase {
    public MaxLengthClientValidator(IValidationRule rule, IRuleComponent component);
    public virtual void AddValidation(ClientModelValidationContext context);
    private string GetErrorMessage(ILengthValidator lengthVal, ClientModelValidationContext context);
}
internal class FluentValidation.AspNetCore.MinLengthClientValidator : ClientValidatorBase {
    public MinLengthClientValidator(IValidationRule rule, IRuleComponent component);
    public virtual void AddValidation(ClientModelValidationContext context);
    private string GetErrorMessage(ILengthValidator lengthVal, ClientModelValidationContext context);
}
[ExtensionAttribute]
internal static class FluentValidation.AspNetCore.MvcValidationHelper : object {
    internal static void SetRootMetadata(ActionContext context, ModelMetadata metadata);
    internal static ModelMetadata GetRootMetadata(ModelValidationContext context);
    internal static List`1<KeyValuePair`2<ModelStateEntry, ModelError>> RemoveImplicitRequiredErrors(ActionContext actionContext);
    internal static CustomizeValidatorAttribute GetCustomizations(ActionContext actionContext, Type type, string prefix);
    internal static void CacheCustomizations(ActionContext context, object model, string key);
    internal static void ReApplyUnhandledImplicitRequiredErrors(List`1<KeyValuePair`2<ModelStateEntry, ModelError>> requiredErrorsNotHandledByFv);
    internal static void RemoveDuplicateModelstateEntries(ActionContext actionContext);
    internal static CustomizeValidatorAttribute GetCustomizations(ActionContext ctx, object model);
    [ExtensionAttribute]
internal static ValidatorConfiguration GetValidatorConfiguration(IServiceProvider serviceProvider);
}
internal class FluentValidation.AspNetCore.RangeClientValidator : ClientValidatorBase {
    private IBetweenValidator RangeValidator { get; }
    public RangeClientValidator(IValidationRule rule, IRuleComponent component);
    private IBetweenValidator get_RangeValidator();
    public virtual void AddValidation(ClientModelValidationContext context);
    private string GetErrorMessage(ClientModelValidationContext context);
}
internal class FluentValidation.AspNetCore.RangeMaxClientValidator : ClientValidatorBase {
    private IComparisonValidator RangeValidator { get; }
    public RangeMaxClientValidator(IValidationRule rule, IRuleComponent component);
    private IComparisonValidator get_RangeValidator();
    public virtual void AddValidation(ClientModelValidationContext context);
    private string GetErrorMessage(ClientModelValidationContext context);
}
internal class FluentValidation.AspNetCore.RangeMinClientValidator : ClientValidatorBase {
    private IComparisonValidator RangeValidator { get; }
    public RangeMinClientValidator(IValidationRule rule, IRuleComponent component);
    private IComparisonValidator get_RangeValidator();
    public virtual void AddValidation(ClientModelValidationContext context);
    private string GetErrorMessage(ClientModelValidationContext context);
}
internal class FluentValidation.AspNetCore.RegexClientValidator : ClientValidatorBase {
    public RegexClientValidator(IValidationRule rule, IRuleComponent component);
    public virtual void AddValidation(ClientModelValidationContext context);
}
internal class FluentValidation.AspNetCore.RequiredClientValidator : ClientValidatorBase {
    public RequiredClientValidator(IValidationRule rule, IRuleComponent component);
    public virtual void AddValidation(ClientModelValidationContext context);
    private string GetErrorMessage(ClientModelValidationContext context);
}
public class FluentValidation.AspNetCore.RuleSetForClientSideMessagesAttribute : ActionFilterAttribute {
    private String[] _ruleSets;
    public RuleSetForClientSideMessagesAttribute(string ruleSet);
    public RuleSetForClientSideMessagesAttribute(String[] ruleSets);
    public virtual void OnResultExecuting(ResultExecutingContext context);
    public static void SetRulesetForClientValidation(HttpContext context, String[] ruleSets);
    public static String[] GetRuleSetsForClientValidation(HttpContext context);
}
internal class FluentValidation.AspNetCore.StringLengthClientValidator : ClientValidatorBase {
    public StringLengthClientValidator(IValidationRule rule, IRuleComponent component);
    public virtual void AddValidation(ClientModelValidationContext context);
    private string GetErrorMessage(ILengthValidator lengthVal, ClientModelValidationContext context);
}
[ExtensionAttribute]
public static class FluentValidation.AspNetCore.ValidationResultExtension : object {
    private static string _rulesetKey;
    [ExtensionAttribute]
public static void AddToModelState(ValidationResult result, ModelStateDictionary modelState);
    [ExtensionAttribute]
public static void AddToModelState(ValidationResult result, ModelStateDictionary modelState, string prefix);
    [ExtensionAttribute]
public static void SetRulesetForClientsideMessages(HttpContext context, String[] ruleSets);
    [ExtensionAttribute]
public static String[] GetRuleSetsForClientValidation(HttpContext context);
    [ExtensionAttribute]
public static void SetRulesetForClientsideMessages(ControllerContext context, String[] ruleSets);
    [ExtensionAttribute]
public static void SetRulesetForClientsideMessages(PageContext context, String[] ruleSets);
}
internal class FluentValidation.AspNetCore.ValidatorDescriptorCache : object {
    private static string CacheKey;
    public IValidatorDescriptor GetCachedDescriptor(ClientValidatorProviderContext context, IHttpContextAccessor httpContextAccessor);
    private Dictionary`2<Type, IValidatorDescriptor> GetCache(IDictionary`2<object, object> httpContextItems);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
