[ExtensionAttribute]
public static class FluentValidation.DependencyInjectionExtensions : object {
    [ExtensionAttribute]
[ObsoleteAttribute("Storing a service provider within a ValidationContext is no longer supported. If you still require this functionality, you should manually store the service provider within context.RootContextData")]
public static IServiceProvider GetServiceProvider(IValidationContext context);
    [ExtensionAttribute]
[ObsoleteAttribute("Storing a service provider within a ValidationContext is no longer supported. If you still require this functionality, you should manually store the service provider within context.RootContextData")]
public static IServiceProvider GetServiceProvider(MessageBuilderContext`2<T, TProperty> context);
    private static IServiceProvider Get(IDictionary`2<string, object> rootContextData);
    [ExtensionAttribute]
[ObsoleteAttribute("Storing a service provider within a ValidationContext is no longer supported. If you still require this functionality, you should manually store the service provider within context.RootContextData")]
public static void SetServiceProvider(IValidationContext context, IServiceProvider serviceProvider);
    [ExtensionAttribute]
[ObsoleteAttribute("The InjectValidator method is deprecated and will be removed in a future release. Please use Constructor Injection instead. See the following page for further details: https://github.com/FluentValidation/FluentValidation/issues/1960")]
public static IRuleBuilderOptions`2<T, TProperty> InjectValidator(IRuleBuilder`2<T, TProperty> ruleBuilder, String[] ruleSets);
    [ExtensionAttribute]
[ObsoleteAttribute("The InjectValidator method is deprecated and will be removed in a future release. Please use Constructor Injection instead. See the following page for further details: https://github.com/FluentValidation/FluentValidation/issues/1960")]
public static IRuleBuilderOptions`2<T, TProperty> InjectValidator(IRuleBuilder`2<T, TProperty> ruleBuilder, Func`3<IServiceProvider, ValidationContext`1<T>, IValidator`1<TProperty>> callback, String[] ruleSets);
}
[ExtensionAttribute]
public static class FluentValidation.ServiceCollectionExtensions : object {
    [ExtensionAttribute]
public static IServiceCollection AddValidatorsFromAssemblies(IServiceCollection services, IEnumerable`1<Assembly> assemblies, ServiceLifetime lifetime, Func`2<AssemblyScanResult, bool> filter, bool includeInternalTypes);
    [ExtensionAttribute]
public static IServiceCollection AddValidatorsFromAssembly(IServiceCollection services, Assembly assembly, ServiceLifetime lifetime, Func`2<AssemblyScanResult, bool> filter, bool includeInternalTypes);
    [ExtensionAttribute]
public static IServiceCollection AddValidatorsFromAssemblyContaining(IServiceCollection services, Type type, ServiceLifetime lifetime, Func`2<AssemblyScanResult, bool> filter, bool includeInternalTypes);
    [ExtensionAttribute]
public static IServiceCollection AddValidatorsFromAssemblyContaining(IServiceCollection services, ServiceLifetime lifetime, Func`2<AssemblyScanResult, bool> filter, bool includeInternalTypes);
    [ExtensionAttribute]
private static IServiceCollection AddScanResult(IServiceCollection services, AssemblyScanResult scanResult, ServiceLifetime lifetime, Func`2<AssemblyScanResult, bool> filter);
}
[ObsoleteAttribute("IValidatorFactory and its implementors are deprecated and will be removed in a future release. Please use the Service Provider directly (or a DI container). For details see https://github.com/FluentValidation/FluentValidation/issues/1961")]
public class FluentValidation.ServiceProviderValidatorFactory : ValidatorFactoryBase {
    private IServiceProvider _serviceProvider;
    public ServiceProviderValidatorFactory(IServiceProvider serviceProvider);
    public virtual IValidator CreateInstance(Type validatorType);
}
