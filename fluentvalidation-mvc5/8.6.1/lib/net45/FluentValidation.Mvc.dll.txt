internal abstract class FluentValidation.Mvc.AbstractComparisonFluentValidationPropertyValidator`1 : FluentValidationPropertyValidator {
    protected TValidator AbstractComparisonValidator { get; }
    protected object MinValue { get; }
    protected object MaxValue { get; }
    protected AbstractComparisonFluentValidationPropertyValidator`1(ModelMetadata metadata, ControllerContext controllerContext, PropertyRule propertyDescription, IPropertyValidator validator);
    protected TValidator get_AbstractComparisonValidator();
    protected abstract virtual object get_MinValue();
    protected abstract virtual object get_MaxValue();
    [IteratorStateMachineAttribute("FluentValidation.Mvc.AbstractComparisonFluentValidationPropertyValidator`1/<GetClientValidationRules>d__7")]
public virtual IEnumerable`1<ModelClientValidationRule> GetClientValidationRules();
    protected abstract virtual string GetDefaultMessage();
}
internal class FluentValidation.Mvc.CreditCardFluentValidationPropertyValidator : FluentValidationPropertyValidator {
    public CreditCardFluentValidationPropertyValidator(ModelMetadata metadata, ControllerContext controllerContext, PropertyRule rule, IPropertyValidator validator);
    [IteratorStateMachineAttribute("FluentValidation.Mvc.CreditCardFluentValidationPropertyValidator/<GetClientValidationRules>d__1")]
public virtual IEnumerable`1<ModelClientValidationRule> GetClientValidationRules();
}
public class FluentValidation.Mvc.CustomizeValidatorAttribute : CustomModelBinderAttribute {
    [CompilerGeneratedAttribute]
private string <RuleSet>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Properties>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <Interceptor>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Skip>k__BackingField;
    private static string key;
    public string RuleSet { get; public set; }
    public string Properties { get; public set; }
    public Type Interceptor { get; public set; }
    public bool Skip { get; public set; }
    [CompilerGeneratedAttribute]
public string get_RuleSet();
    [CompilerGeneratedAttribute]
public void set_RuleSet(string value);
    [CompilerGeneratedAttribute]
public string get_Properties();
    [CompilerGeneratedAttribute]
public void set_Properties(string value);
    [CompilerGeneratedAttribute]
public Type get_Interceptor();
    [CompilerGeneratedAttribute]
public void set_Interceptor(Type value);
    [CompilerGeneratedAttribute]
public bool get_Skip();
    [CompilerGeneratedAttribute]
public void set_Skip(bool value);
    public virtual IModelBinder GetBinder();
    public sealed virtual object BindModel(ControllerContext controllerContext, ModelBindingContext bindingContext);
    public static CustomizeValidatorAttribute GetFromControllerContext(ControllerContext context);
    public IValidatorSelector ToValidatorSelector();
    protected virtual IValidatorSelector CreateRulesetValidatorSelector(String[] ruleSets);
    protected virtual IValidatorSelector CreateMemberNameValidatorSelector(String[] properties);
    protected virtual IValidatorSelector CreateDefaultValidatorSelector();
    public IValidatorInterceptor GetInterceptor();
}
internal class FluentValidation.Mvc.EmailFluentValidationPropertyValidator : FluentValidationPropertyValidator {
    private IEmailValidator EmailValidator { get; }
    public EmailFluentValidationPropertyValidator(ModelMetadata metadata, ControllerContext controllerContext, PropertyRule rule, IPropertyValidator validator);
    private IEmailValidator get_EmailValidator();
    [IteratorStateMachineAttribute("FluentValidation.Mvc.EmailFluentValidationPropertyValidator/<GetClientValidationRules>d__3")]
public virtual IEnumerable`1<ModelClientValidationRule> GetClientValidationRules();
}
internal class FluentValidation.Mvc.EqualToFluentValidationPropertyValidator : FluentValidationPropertyValidator {
    private EqualValidator EqualValidator { get; }
    public EqualToFluentValidationPropertyValidator(ModelMetadata metadata, ControllerContext controllerContext, PropertyRule rule, IPropertyValidator validator);
    private EqualValidator get_EqualValidator();
    [IteratorStateMachineAttribute("FluentValidation.Mvc.EqualToFluentValidationPropertyValidator/<GetClientValidationRules>d__3")]
public virtual IEnumerable`1<ModelClientValidationRule> GetClientValidationRules();
}
public class FluentValidation.Mvc.FluentValidationModelValidationFactory : MulticastDelegate {
    public FluentValidationModelValidationFactory(object object, IntPtr method);
    public virtual ModelValidator Invoke(ModelMetadata metadata, ControllerContext context, PropertyRule rule, IPropertyValidator validator);
    public virtual IAsyncResult BeginInvoke(ModelMetadata metadata, ControllerContext context, PropertyRule rule, IPropertyValidator validator, AsyncCallback callback, object object);
    public virtual ModelValidator EndInvoke(IAsyncResult result);
}
internal class FluentValidation.Mvc.FluentValidationModelValidator : ModelValidator {
    private IValidator _validator;
    private CustomizeValidatorAttribute _customizations;
    public FluentValidationModelValidator(ModelMetadata metadata, ControllerContext controllerContext, IValidator validator);
    public virtual IEnumerable`1<ModelValidationResult> Validate(object container);
    protected virtual IEnumerable`1<ModelValidationResult> ConvertValidationResultToModelValidationResults(ValidationResult result);
}
public class FluentValidation.Mvc.FluentValidationModelValidatorProvider : ModelValidatorProvider {
    [CompilerGeneratedAttribute]
private bool <AddImplicitRequiredValidator>k__BackingField;
    [CompilerGeneratedAttribute]
private IValidatorFactory <ValidatorFactory>k__BackingField;
    private Dictionary`2<Type, FluentValidationModelValidationFactory> validatorFactories;
    public bool AddImplicitRequiredValidator { get; public set; }
    public IValidatorFactory ValidatorFactory { get; public set; }
    public FluentValidationModelValidatorProvider(IValidatorFactory validatorFactory);
    [CompilerGeneratedAttribute]
public bool get_AddImplicitRequiredValidator();
    [CompilerGeneratedAttribute]
public void set_AddImplicitRequiredValidator(bool value);
    [CompilerGeneratedAttribute]
public IValidatorFactory get_ValidatorFactory();
    [CompilerGeneratedAttribute]
public void set_ValidatorFactory(IValidatorFactory value);
    public static void Configure(Action`1<FluentValidationModelValidatorProvider> configurationExpression);
    public void Add(Type validatorType, FluentValidationModelValidationFactory factory);
    public virtual IEnumerable`1<ModelValidator> GetValidators(ModelMetadata metadata, ControllerContext context);
    protected virtual IValidator CreateValidator(ModelMetadata metadata, ControllerContext context);
    protected IEnumerable`1<ModelValidator> GetValidatorsForProperty(ModelMetadata metadata, ControllerContext context, IValidator validator);
    protected virtual ModelValidator GetModelValidator(ModelMetadata meta, ControllerContext context, PropertyRule rule, IPropertyValidator propertyValidator);
    protected virtual ModelValidator CreateNotNullValidatorForProperty(ModelMetadata metadata, ControllerContext cc);
    [IteratorStateMachineAttribute("FluentValidation.Mvc.FluentValidationModelValidatorProvider/<GetValidatorsForModel>d__17")]
protected virtual IEnumerable`1<ModelValidator> GetValidatorsForModel(ModelMetadata metadata, ControllerContext context, IValidator validator);
    protected virtual bool IsValidatingProperty(ModelMetadata metadata);
}
public class FluentValidation.Mvc.FluentValidationPropertyValidator : ModelValidator {
    [CompilerGeneratedAttribute]
private IPropertyValidator <Validator>k__BackingField;
    [CompilerGeneratedAttribute]
private PropertyRule <Rule>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShouldValidate>k__BackingField;
    public IPropertyValidator Validator { get; }
    public PropertyRule Rule { get; }
    protected bool ShouldValidate { get; protected set; }
    public FluentValidationPropertyValidator(ModelMetadata metadata, ControllerContext controllerContext, PropertyRule rule, IPropertyValidator validator);
    [CompilerGeneratedAttribute]
public IPropertyValidator get_Validator();
    [CompilerGeneratedAttribute]
public PropertyRule get_Rule();
    [CompilerGeneratedAttribute]
protected bool get_ShouldValidate();
    [CompilerGeneratedAttribute]
protected void set_ShouldValidate(bool value);
    [IteratorStateMachineAttribute("FluentValidation.Mvc.FluentValidationPropertyValidator/<Validate>d__11")]
public virtual IEnumerable`1<ModelValidationResult> Validate(object container);
    protected bool TypeAllowsNullValue(Type type);
    protected virtual bool ShouldGenerateClientSideRules();
    public virtual IEnumerable`1<ModelClientValidationRule> GetClientValidationRules();
    [CompilerGeneratedAttribute]
private object <Validate>b__11_0(object x);
}
public interface FluentValidation.Mvc.IValidatorInterceptor {
    public abstract virtual ValidationContext BeforeMvcValidation(ControllerContext controllerContext, ValidationContext validationContext);
    public abstract virtual ValidationResult AfterMvcValidation(ControllerContext controllerContext, ValidationContext validationContext, ValidationResult result);
}
internal class FluentValidation.Mvc.MaxFluentValidationPropertyValidator : AbstractComparisonFluentValidationPropertyValidator`1<LessThanOrEqualValidator> {
    protected object MinValue { get; }
    protected object MaxValue { get; }
    public MaxFluentValidationPropertyValidator(ModelMetadata metadata, ControllerContext controllerContext, PropertyRule propertyDescription, IPropertyValidator validator);
    protected virtual object get_MinValue();
    protected virtual object get_MaxValue();
    protected virtual string GetDefaultMessage();
}
internal class FluentValidation.Mvc.MinFluentValidationPropertyValidator : AbstractComparisonFluentValidationPropertyValidator`1<GreaterThanOrEqualValidator> {
    protected object MinValue { get; }
    protected object MaxValue { get; }
    public MinFluentValidationPropertyValidator(ModelMetadata metadata, ControllerContext controllerContext, PropertyRule propertyDescription, IPropertyValidator validator);
    protected virtual object get_MinValue();
    protected virtual object get_MaxValue();
    protected virtual string GetDefaultMessage();
}
internal class FluentValidation.Mvc.RangeFluentValidationPropertyValidator : FluentValidationPropertyValidator {
    private InclusiveBetweenValidator RangeValidator { get; }
    public RangeFluentValidationPropertyValidator(ModelMetadata metadata, ControllerContext controllerContext, PropertyRule propertyDescription, IPropertyValidator validator);
    private InclusiveBetweenValidator get_RangeValidator();
    [IteratorStateMachineAttribute("FluentValidation.Mvc.RangeFluentValidationPropertyValidator/<GetClientValidationRules>d__3")]
public virtual IEnumerable`1<ModelClientValidationRule> GetClientValidationRules();
}
internal class FluentValidation.Mvc.RegularExpressionFluentValidationPropertyValidator : FluentValidationPropertyValidator {
    private IRegularExpressionValidator RegexValidator { get; }
    public RegularExpressionFluentValidationPropertyValidator(ModelMetadata metadata, ControllerContext controllerContext, PropertyRule rule, IPropertyValidator validator);
    private IRegularExpressionValidator get_RegexValidator();
    [IteratorStateMachineAttribute("FluentValidation.Mvc.RegularExpressionFluentValidationPropertyValidator/<GetClientValidationRules>d__3")]
public virtual IEnumerable`1<ModelClientValidationRule> GetClientValidationRules();
}
internal class FluentValidation.Mvc.RequiredFluentValidationPropertyValidator : FluentValidationPropertyValidator {
    public bool IsRequired { get; }
    public RequiredFluentValidationPropertyValidator(ModelMetadata metadata, ControllerContext controllerContext, PropertyRule rule, IPropertyValidator validator);
    [IteratorStateMachineAttribute("FluentValidation.Mvc.RequiredFluentValidationPropertyValidator/<GetClientValidationRules>d__1")]
public virtual IEnumerable`1<ModelClientValidationRule> GetClientValidationRules();
    public virtual bool get_IsRequired();
}
public class FluentValidation.Mvc.RuleSetForClientSideMessagesAttribute : ActionFilterAttribute {
    private static string key;
    private String[] _ruleSets;
    public RuleSetForClientSideMessagesAttribute(string ruleSet);
    public RuleSetForClientSideMessagesAttribute(String[] ruleSets);
    public virtual void OnActionExecuting(ActionExecutingContext filterContext);
    public static void SetRulesetForClientValidation(HttpContextBase context, String[] ruleSets);
    public static String[] GetRuleSetsForClientValidation(HttpContextBase context);
}
internal class FluentValidation.Mvc.StringLengthFluentValidationPropertyValidator : FluentValidationPropertyValidator {
    private ILengthValidator LengthValidator { get; }
    public StringLengthFluentValidationPropertyValidator(ModelMetadata metadata, ControllerContext controllerContext, PropertyRule rule, IPropertyValidator validator);
    private ILengthValidator get_LengthValidator();
    [IteratorStateMachineAttribute("FluentValidation.Mvc.StringLengthFluentValidationPropertyValidator/<GetClientValidationRules>d__3")]
public virtual IEnumerable`1<ModelClientValidationRule> GetClientValidationRules();
    [CompilerGeneratedAttribute]
internal static string <GetClientValidationRules>g__FallbackMessage|3_0(<>c__DisplayClass3_0& );
}
[ExtensionAttribute]
public static class FluentValidation.Mvc.ValidationResultExtension : object {
    [ExtensionAttribute]
public static void AddToModelState(ValidationResult result, ModelStateDictionary modelState, string prefix);
    [ExtensionAttribute]
public static void SetRulesetForClientsideMessages(ControllerContext context, String[] ruleSets);
}
