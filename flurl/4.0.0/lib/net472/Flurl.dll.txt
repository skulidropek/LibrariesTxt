[ExtensionAttribute]
public static class Flurl.GeneratedExtensions : object {
    [ExtensionAttribute]
public static Url AppendPathSegment(string url, object segment, bool fullyEncode);
    [ExtensionAttribute]
public static Url AppendPathSegments(string url, Object[] segments);
    [ExtensionAttribute]
public static Url AppendPathSegments(string url, IEnumerable`1<object> segments);
    [ExtensionAttribute]
public static Url RemovePathSegment(string url);
    [ExtensionAttribute]
public static Url RemovePath(string url);
    [ExtensionAttribute]
public static Url SetQueryParam(string url, string name, object value, NullValueHandling nullValueHandling);
    [ExtensionAttribute]
public static Url SetQueryParam(string url, string name, string value, bool isEncoded, NullValueHandling nullValueHandling);
    [ExtensionAttribute]
public static Url SetQueryParam(string url, string name);
    [ExtensionAttribute]
public static Url SetQueryParams(string url, object values, NullValueHandling nullValueHandling);
    [ExtensionAttribute]
public static Url SetQueryParams(string url, IEnumerable`1<string> names);
    [ExtensionAttribute]
public static Url SetQueryParams(string url, String[] names);
    [ExtensionAttribute]
public static Url AppendQueryParam(string url, string name, object value, NullValueHandling nullValueHandling);
    [ExtensionAttribute]
public static Url AppendQueryParam(string url, string name, string value, bool isEncoded, NullValueHandling nullValueHandling);
    [ExtensionAttribute]
public static Url AppendQueryParam(string url, string name);
    [ExtensionAttribute]
public static Url AppendQueryParam(string url, object values, NullValueHandling nullValueHandling);
    [ExtensionAttribute]
public static Url AppendQueryParam(string url, IEnumerable`1<string> names);
    [ExtensionAttribute]
public static Url AppendQueryParam(string url, String[] names);
    [ExtensionAttribute]
public static Url RemoveQueryParam(string url, string name);
    [ExtensionAttribute]
public static Url RemoveQueryParams(string url, String[] names);
    [ExtensionAttribute]
public static Url RemoveQueryParams(string url, IEnumerable`1<string> names);
    [ExtensionAttribute]
public static Url RemoveQuery(string url);
    [ExtensionAttribute]
public static Url SetFragment(string url, string fragment);
    [ExtensionAttribute]
public static Url RemoveFragment(string url);
    [ExtensionAttribute]
public static Url ResetToRoot(string url);
    [ExtensionAttribute]
public static Url AppendPathSegment(Uri uri, object segment, bool fullyEncode);
    [ExtensionAttribute]
public static Url AppendPathSegments(Uri uri, Object[] segments);
    [ExtensionAttribute]
public static Url AppendPathSegments(Uri uri, IEnumerable`1<object> segments);
    [ExtensionAttribute]
public static Url RemovePathSegment(Uri uri);
    [ExtensionAttribute]
public static Url RemovePath(Uri uri);
    [ExtensionAttribute]
public static Url SetQueryParam(Uri uri, string name, object value, NullValueHandling nullValueHandling);
    [ExtensionAttribute]
public static Url SetQueryParam(Uri uri, string name, string value, bool isEncoded, NullValueHandling nullValueHandling);
    [ExtensionAttribute]
public static Url SetQueryParam(Uri uri, string name);
    [ExtensionAttribute]
public static Url SetQueryParams(Uri uri, object values, NullValueHandling nullValueHandling);
    [ExtensionAttribute]
public static Url SetQueryParams(Uri uri, IEnumerable`1<string> names);
    [ExtensionAttribute]
public static Url SetQueryParams(Uri uri, String[] names);
    [ExtensionAttribute]
public static Url AppendQueryParam(Uri uri, string name, object value, NullValueHandling nullValueHandling);
    [ExtensionAttribute]
public static Url AppendQueryParam(Uri uri, string name, string value, bool isEncoded, NullValueHandling nullValueHandling);
    [ExtensionAttribute]
public static Url AppendQueryParam(Uri uri, string name);
    [ExtensionAttribute]
public static Url AppendQueryParam(Uri uri, object values, NullValueHandling nullValueHandling);
    [ExtensionAttribute]
public static Url AppendQueryParam(Uri uri, IEnumerable`1<string> names);
    [ExtensionAttribute]
public static Url AppendQueryParam(Uri uri, String[] names);
    [ExtensionAttribute]
public static Url RemoveQueryParam(Uri uri, string name);
    [ExtensionAttribute]
public static Url RemoveQueryParams(Uri uri, String[] names);
    [ExtensionAttribute]
public static Url RemoveQueryParams(Uri uri, IEnumerable`1<string> names);
    [ExtensionAttribute]
public static Url RemoveQuery(Uri uri);
    [ExtensionAttribute]
public static Url SetFragment(Uri uri, string fragment);
    [ExtensionAttribute]
public static Url RemoveFragment(Uri uri);
    [ExtensionAttribute]
public static Url ResetToRoot(Uri uri);
}
public enum Flurl.NullValueHandling : Enum {
    public int value__;
    public static NullValueHandling NameOnly;
    public static NullValueHandling Remove;
    public static NullValueHandling Ignore;
}
[DefaultMemberAttribute("Item")]
public class Flurl.QueryParamCollection : object {
    private NameValueList`1<QueryParamValue> _values;
    public int Count { get; }
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ValueTuple`2<string, object> Item { get; }
    public QueryParamCollection(string query);
    public virtual string ToString();
    public string ToString(bool encodeSpaceAsPlus);
    public void Add(string name, object value, bool isEncoded, NullValueHandling nullValueHandling);
    public void AddOrReplace(string name, object value, bool isEncoded, NullValueHandling nullValueHandling);
    [IteratorStateMachineAttribute("Flurl.QueryParamCollection/<SplitCollection>d__6")]
private IEnumerable`1<object> SplitCollection(object value);
    public void Remove(string name);
    public void Clear();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual IEnumerator`1<ValueTuple`2<string, object>> GetEnumerator();
    public sealed virtual int get_Count();
    public sealed virtual ValueTuple`2<string, object> get_Item(int index);
    public sealed virtual object FirstOrDefault(string name);
    public sealed virtual bool TryGetFirst(string name, Object& value);
    public sealed virtual IEnumerable`1<object> GetAll(string name);
    public sealed virtual bool Contains(string name);
    public sealed virtual bool Contains(string name, object value);
}
[IsReadOnlyAttribute]
internal class Flurl.QueryParamValue : ValueType {
    private string _encodedValue;
    [CompilerGeneratedAttribute]
private object <Value>k__BackingField;
    public object Value { get; }
    public QueryParamValue(object value, bool isEncoded);
    [CompilerGeneratedAttribute]
public object get_Value();
    public string Encode(bool encodeSpaceAsPlus);
}
public class Flurl.Url : object {
    private string _originalString;
    private bool _parsed;
    private string _scheme;
    private string _userInfo;
    private string _host;
    private List`1<string> _pathSegments;
    private QueryParamCollection _queryParams;
    private string _fragment;
    private Nullable`1<int> _port;
    private bool _leadingSlash;
    private bool _trailingSlash;
    private bool _trailingQmark;
    private bool _trailingHash;
    private static int MAX_URL_LENGTH;
    public string Scheme { get; public set; }
    public string UserInfo { get; public set; }
    public string Host { get; public set; }
    public Nullable`1<int> Port { get; public set; }
    public string Authority { get; }
    public string Root { get; }
    public string Path { get; public set; }
    public IList`1<string> PathSegments { get; }
    public string Query { get; public set; }
    public QueryParamCollection QueryParams { get; }
    public string Fragment { get; public set; }
    public bool IsRelative { get; }
    public bool IsSecureScheme { get; }
    public Url(string baseUrl);
    public Url(Uri uri);
    public string get_Scheme();
    public void set_Scheme(string value);
    public string get_UserInfo();
    public void set_UserInfo(string value);
    public string get_Host();
    public void set_Host(string value);
    public Nullable`1<int> get_Port();
    public void set_Port(Nullable`1<int> value);
    public string get_Authority();
    public string get_Root();
    public string get_Path();
    public void set_Path(string value);
    public IList`1<string> get_PathSegments();
    public string get_Query();
    public void set_Query(string value);
    public QueryParamCollection get_QueryParams();
    public string get_Fragment();
    public void set_Fragment(string value);
    public bool get_IsRelative();
    public bool get_IsSecureScheme();
    public static Url Parse(string url);
    private Url EnsureParsed();
    private Url ParseInternal(Uri uri);
    public static QueryParamCollection ParseQueryParams(string query);
    [IteratorStateMachineAttribute("Flurl.Url/<ParsePathSegments>d__52")]
public static IEnumerable`1<string> ParsePathSegments(string path);
    public Url AppendPathSegment(object segment, bool fullyEncode);
    public Url AppendPathSegments(Object[] segments);
    public Url AppendPathSegments(IEnumerable`1<object> segments);
    public Url RemovePathSegment();
    public Url RemovePath();
    public Url SetQueryParam(string name, object value, NullValueHandling nullValueHandling);
    public Url SetQueryParam(string name, string value, bool isEncoded, NullValueHandling nullValueHandling);
    public Url SetQueryParam(string name);
    public Url SetQueryParams(object values, NullValueHandling nullValueHandling);
    public Url SetQueryParams(IEnumerable`1<string> names);
    public Url SetQueryParams(String[] names);
    public Url AppendQueryParam(string name, object value, NullValueHandling nullValueHandling);
    public Url AppendQueryParam(string name, string value, bool isEncoded, NullValueHandling nullValueHandling);
    public Url AppendQueryParam(string name);
    public Url AppendQueryParam(object values, NullValueHandling nullValueHandling);
    public Url AppendQueryParam(IEnumerable`1<string> names);
    public Url AppendQueryParam(String[] names);
    public Url RemoveQueryParam(string name);
    public Url RemoveQueryParams(String[] names);
    public Url RemoveQueryParams(IEnumerable`1<string> names);
    public Url RemoveQuery();
    public Url SetFragment(string fragment);
    public Url RemoveFragment();
    public Url ResetToRoot();
    public Url Reset();
    public Url Clone();
    public string ToString(bool encodeSpaceAsPlus);
    public virtual string ToString();
    public Uri ToUri();
    public static string op_Implicit(Url url);
    public static Url op_Implicit(string url);
    public static Url op_Implicit(Uri uri);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static string Combine(String[] parts);
    public static string Decode(string s, bool interpretPlusAsSpace);
    public static string Encode(string s, bool encodeSpaceAsPlus);
    public static string EncodeIllegalCharacters(string s, bool encodeSpaceAsPlus);
    public static bool IsValid(string url);
    [CompilerGeneratedAttribute]
internal static string <Combine>g__CombineEnsureSingleSeparator|87_0(string a, string b, char separator);
}
[ExtensionAttribute]
public static class Flurl.Util.CommonExtensions : object {
    [ExtensionAttribute]
public static IEnumerable`1<ValueTuple`2<string, object>> ToKeyValuePairs(object obj);
    [ExtensionAttribute]
public static string ToInvariantString(object obj);
    [ExtensionAttribute]
internal static bool OrdinalEquals(string s, string value, bool ignoreCase);
    [ExtensionAttribute]
internal static bool OrdinalContains(string s, string value, bool ignoreCase);
    [ExtensionAttribute]
internal static bool OrdinalStartsWith(string s, string value, bool ignoreCase);
    [ExtensionAttribute]
internal static bool OrdinalEndsWith(string s, string value, bool ignoreCase);
    [ExtensionAttribute]
public static String[] SplitOnFirstOccurence(string s, string separator);
    private static IEnumerable`1<ValueTuple`2<string, object>> StringToKV(string s);
    private static IEnumerable`1<ValueTuple`2<string, object>> ObjectToKV(object obj);
    internal static object GetDeclaredTypeValue(object value, Type declaredType);
    [IteratorStateMachineAttribute("Flurl.Util.CommonExtensions/<CollectionToKV>d__10")]
private static IEnumerable`1<ValueTuple`2<string, object>> CollectionToKV(IEnumerable col);
    [ExtensionAttribute]
public static void Merge(IDictionary`2<TKey, TValue> d1, IDictionary`2<TKey, TValue> d2);
    [ExtensionAttribute]
public static string StripQuotes(string s);
    [ExtensionAttribute]
public static bool IsIP(string s);
    [CompilerGeneratedAttribute]
internal static bool <CollectionToKV>g__TryGetProp|10_0(object obj, string name, Object& value);
    [CompilerGeneratedAttribute]
internal static bool <CollectionToKV>g__IsTuple2|10_1(object item, Object& name, Object& val);
    [CompilerGeneratedAttribute]
internal static bool <CollectionToKV>g__LooksLikeKV|10_2(object item, Object& name, Object& val);
}
public interface Flurl.Util.INameValueList`1 {
    public abstract virtual void Add(string name, TValue value);
    public abstract virtual void AddOrReplace(string name, TValue value);
    public abstract virtual bool Remove(string name);
}
public interface Flurl.Util.INameValueListBase`1 {
    public abstract virtual TValue FirstOrDefault(string name);
    public abstract virtual bool TryGetFirst(string name, TValue& value);
    public abstract virtual IEnumerable`1<TValue> GetAll(string name);
    public abstract virtual bool Contains(string name);
    public abstract virtual bool Contains(string name, TValue value);
}
public interface Flurl.Util.IReadOnlyNameValueList`1 {
}
[TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Flurl.Util.NameValueList`1 : List`1<ValueTuple`2<string, TValue>> {
    private bool _caseSensitiveNames;
    public NameValueList`1(bool caseSensitiveNames);
    public NameValueList`1(IEnumerable`1<ValueTuple`2<string, TValue>> items, bool caseSensitiveNames);
    public sealed virtual void Add(string name, TValue value);
    public sealed virtual void AddOrReplace(string name, TValue value);
    public sealed virtual bool Remove(string name);
    public sealed virtual TValue FirstOrDefault(string name);
    public sealed virtual bool TryGetFirst(string name, TValue& value);
    public sealed virtual IEnumerable`1<TValue> GetAll(string name);
    public sealed virtual bool Contains(string name);
    public sealed virtual bool Contains(string name, TValue value);
}
