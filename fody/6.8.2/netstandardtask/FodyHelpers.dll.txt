[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class ConfigReader : object {
    [ExtensionAttribute]
public static string ReadString(XElement element, string name, string defaultValue);
    [ExtensionAttribute]
public static bool ReadBool(XElement element, string name, bool defaultValue);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Fody.BaseModuleWeaver : object {
    private static XElement Empty;
    [CompilerGeneratedAttribute]
private XElement <Config>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<string> <LogDebug>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<string> <LogInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`2<string, MessageImportance> <LogMessage>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<string> <LogWarning>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Action`2<string, SequencePoint> <LogWarningPoint>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<string> <LogError>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Action`2<string, SequencePoint> <LogErrorPoint>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`2<string, AssemblyDefinition> <ResolveAssembly>k__BackingField;
    [CompilerGeneratedAttribute]
private IAssemblyResolver <AssemblyResolver>k__BackingField;
    [CompilerGeneratedAttribute]
private ModuleDefinition <ModuleDefinition>k__BackingField;
    [CompilerGeneratedAttribute]
private TypeSystem <TypeSystem>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AssemblyFilePath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProjectDirectoryPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProjectFilePath>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <DocumentationFilePath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AddinDirectoryPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SolutionDirectoryPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <References>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <ReferenceCopyLocalPaths>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <RuntimeCopyLocalPaths>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <DefineConstants>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<string, TypeDefinition> <FindType>k__BackingField;
    [CompilerGeneratedAttribute]
private TryFindTypeFunc <TryFindType>k__BackingField;
    public XElement Config { get; public set; }
    [ObsoleteAttribute("Use WriteDebug", "False")]
public Action`1<string> LogDebug { get; public set; }
    [ObsoleteAttribute("Use WriteInfo", "False")]
public Action`1<string> LogInfo { get; public set; }
    [ObsoleteAttribute("Use WriteMessage", "False")]
public Action`2<string, MessageImportance> LogMessage { get; public set; }
    [ObsoleteAttribute("Use WriteWarning", "False")]
public Action`1<string> LogWarning { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ObsoleteAttribute("Use WriteWarning", "False")]
public Action`2<string, SequencePoint> LogWarningPoint { get; public set; }
    [ObsoleteAttribute("Use WriteError", "False")]
public Action`1<string> LogError { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ObsoleteAttribute("Use WriteError", "False")]
public Action`2<string, SequencePoint> LogErrorPoint { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Func`2<string, AssemblyDefinition> ResolveAssembly { get; public set; }
    public IAssemblyResolver AssemblyResolver { get; public set; }
    public ModuleDefinition ModuleDefinition { get; public set; }
    public TypeSystem TypeSystem { get; public set; }
    public string AssemblyFilePath { get; public set; }
    public string ProjectDirectoryPath { get; public set; }
    public string ProjectFilePath { get; public set; }
    [NullableAttribute("2")]
public string DocumentationFilePath { get; public set; }
    public string AddinDirectoryPath { get; public set; }
    public string SolutionDirectoryPath { get; public set; }
    public string References { get; public set; }
    public List`1<string> ReferenceCopyLocalPaths { get; public set; }
    public List`1<string> RuntimeCopyLocalPaths { get; public set; }
    public List`1<string> DefineConstants { get; public set; }
    [ObsoleteAttribute("Use FindTypeDefinition", "False")]
public Func`2<string, TypeDefinition> FindType { get; public set; }
    [ObsoleteAttribute("Use TryFindTypeDefinition", "False")]
public TryFindTypeFunc TryFindType { get; public set; }
    public bool ShouldCleanReference { get; }
    private static BaseModuleWeaver();
    [CompilerGeneratedAttribute]
public XElement get_Config();
    [CompilerGeneratedAttribute]
public void set_Config(XElement value);
    public virtual void WriteDebug(string message);
    [CompilerGeneratedAttribute]
public Action`1<string> get_LogDebug();
    [CompilerGeneratedAttribute]
public void set_LogDebug(Action`1<string> value);
    public virtual void WriteInfo(string message);
    [CompilerGeneratedAttribute]
public Action`1<string> get_LogInfo();
    [CompilerGeneratedAttribute]
public void set_LogInfo(Action`1<string> value);
    public virtual void WriteMessage(string message, MessageImportance importance);
    [CompilerGeneratedAttribute]
public Action`2<string, MessageImportance> get_LogMessage();
    [CompilerGeneratedAttribute]
public void set_LogMessage(Action`2<string, MessageImportance> value);
    public virtual void WriteWarning(string message);
    public virtual void WriteWarning(string message, SequencePoint sequencePoint);
    public virtual void WriteWarning(string message, MethodDefinition method);
    [CompilerGeneratedAttribute]
public Action`1<string> get_LogWarning();
    [CompilerGeneratedAttribute]
public void set_LogWarning(Action`1<string> value);
    [CompilerGeneratedAttribute]
public Action`2<string, SequencePoint> get_LogWarningPoint();
    [CompilerGeneratedAttribute]
public void set_LogWarningPoint(Action`2<string, SequencePoint> value);
    public virtual void WriteError(string message);
    public virtual void WriteError(string message, SequencePoint sequencePoint);
    public virtual void WriteError(string message, MethodDefinition method);
    [CompilerGeneratedAttribute]
public Action`1<string> get_LogError();
    [CompilerGeneratedAttribute]
public void set_LogError(Action`1<string> value);
    [CompilerGeneratedAttribute]
public Action`2<string, SequencePoint> get_LogErrorPoint();
    [CompilerGeneratedAttribute]
public void set_LogErrorPoint(Action`2<string, SequencePoint> value);
    [CompilerGeneratedAttribute]
public Func`2<string, AssemblyDefinition> get_ResolveAssembly();
    [CompilerGeneratedAttribute]
public void set_ResolveAssembly(Func`2<string, AssemblyDefinition> value);
    [CompilerGeneratedAttribute]
public IAssemblyResolver get_AssemblyResolver();
    [CompilerGeneratedAttribute]
public void set_AssemblyResolver(IAssemblyResolver value);
    [CompilerGeneratedAttribute]
public ModuleDefinition get_ModuleDefinition();
    [CompilerGeneratedAttribute]
public void set_ModuleDefinition(ModuleDefinition value);
    [CompilerGeneratedAttribute]
public TypeSystem get_TypeSystem();
    [CompilerGeneratedAttribute]
public void set_TypeSystem(TypeSystem value);
    [CompilerGeneratedAttribute]
public string get_AssemblyFilePath();
    [CompilerGeneratedAttribute]
public void set_AssemblyFilePath(string value);
    [CompilerGeneratedAttribute]
public string get_ProjectDirectoryPath();
    [CompilerGeneratedAttribute]
public void set_ProjectDirectoryPath(string value);
    [CompilerGeneratedAttribute]
public string get_ProjectFilePath();
    [CompilerGeneratedAttribute]
public void set_ProjectFilePath(string value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_DocumentationFilePath();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_DocumentationFilePath(string value);
    [CompilerGeneratedAttribute]
public string get_AddinDirectoryPath();
    [CompilerGeneratedAttribute]
public void set_AddinDirectoryPath(string value);
    [CompilerGeneratedAttribute]
public string get_SolutionDirectoryPath();
    [CompilerGeneratedAttribute]
public void set_SolutionDirectoryPath(string value);
    [CompilerGeneratedAttribute]
public string get_References();
    [CompilerGeneratedAttribute]
public void set_References(string value);
    [CompilerGeneratedAttribute]
public List`1<string> get_ReferenceCopyLocalPaths();
    [CompilerGeneratedAttribute]
public void set_ReferenceCopyLocalPaths(List`1<string> value);
    [CompilerGeneratedAttribute]
public List`1<string> get_RuntimeCopyLocalPaths();
    [CompilerGeneratedAttribute]
public void set_RuntimeCopyLocalPaths(List`1<string> value);
    [CompilerGeneratedAttribute]
public List`1<string> get_DefineConstants();
    [CompilerGeneratedAttribute]
public void set_DefineConstants(List`1<string> value);
    public abstract virtual void Execute();
    public virtual void Cancel();
    public abstract virtual IEnumerable`1<string> GetAssembliesForScanning();
    public TypeDefinition FindTypeDefinition(string name);
    [CompilerGeneratedAttribute]
public Func`2<string, TypeDefinition> get_FindType();
    [CompilerGeneratedAttribute]
public void set_FindType(Func`2<string, TypeDefinition> value);
    public bool TryFindTypeDefinition(string name, TypeDefinition& type);
    [CompilerGeneratedAttribute]
public TryFindTypeFunc get_TryFindType();
    [CompilerGeneratedAttribute]
public void set_TryFindType(TryFindTypeFunc value);
    public virtual void AfterWeaving();
    public virtual bool get_ShouldCleanReference();
}
[ExtensionAttribute]
public static class Fody.CecilExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static SequencePoint GetSequencePoint(MethodDefinition method);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ObsoleteAttribute("Not for public use")]
public static class Fody.Guard : object {
    public static void AgainstNull(string argumentName, object value);
    public static void AgainstNullAndEmpty(string argumentName, string value);
    public static void FileExists(string argumentName, string path);
}
public static class Fody.Ildasm : object {
    [NullableAttribute("2")]
private static string ildasmPath;
    public static bool FoundIldasm;
    private static Ildasm();
    [NullableContextAttribute("1")]
[ObsoleteAttribute("Prefer using https://www.nuget.org/packages/Verify.ICSharpCode.Decompiler or https://www.nuget.org/packages/ICSharpCode.Decompiler")]
public static string Decompile(string assemblyPath, string item);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Fody.LogMessage : object {
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private object <MessageImportance>k__BackingField;
    public string Text { get; }
    public object MessageImportance { get; }
    public LogMessage(string text, object messageImportance);
    [CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
public object get_MessageImportance();
}
public enum Fody.MessageImportance : Enum {
    public int value__;
    public static MessageImportance High;
    public static MessageImportance Normal;
    public static MessageImportance Low;
}
public static class Fody.MessageImportanceDefaults : object {
    public static MessageImportance Debug;
    public static MessageImportance Info;
    private static MessageImportanceDefaults();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Fody.PeVerifier : object {
    public static bool FoundPeVerify;
    [NullableAttribute("2")]
private static string peverifyPath;
    private static PeVerifier();
    public static bool Verify(string assemblyPath, IEnumerable`1<string> ignoreCodes, String& output, string workingDirectory);
    public static bool Verify(string beforeAssemblyPath, string afterAssemblyPath, IEnumerable`1<string> ignoreCodes, String& beforeOutput, String& afterOutput, string workingDirectory);
    public static void ThrowIfDifferent(string beforeAssemblyPath, string afterAssemblyPath, string workingDirectory);
    public static void ThrowIfDifferent(string beforeAssemblyPath, string afterAssemblyPath, IEnumerable`1<string> ignoreCodes, string workingDirectory);
    public static string TrimLineNumbers(string input);
    private static bool InnerVerify(string assemblyPath, List`1<string> ignoreCodes, String& output, string workingDirectory);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Fody.SequencePointMessage : object {
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private SequencePoint <SequencePoint>k__BackingField;
    public string Text { get; }
    [NullableAttribute("2")]
public SequencePoint SequencePoint { get; }
    public SequencePointMessage(string text, SequencePoint sequencePoint);
    [CompilerGeneratedAttribute]
public string get_Text();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public SequencePoint get_SequencePoint();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Fody.TestAssemblyResolver : object {
    private Dictionary`2<string, AssemblyDefinition> definitions;
    public sealed virtual void Dispose();
    public sealed virtual AssemblyDefinition Resolve(AssemblyNameReference name);
    public AssemblyDefinition Resolve(string name);
    private static bool TryGetAssemblyLocation(string name, String& assemblyLocation);
    private static Assembly GetAssembly(string name);
    private AssemblyDefinition GetAssemblyDefinition(string assemblyLocation);
    public sealed virtual AssemblyDefinition Resolve(AssemblyNameReference name, ReaderParameters parameters);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Fody.TestResult : object {
    private List`1<LogMessage> messages;
    private List`1<SequencePointMessage> warnings;
    private List`1<SequencePointMessage> errors;
    [CompilerGeneratedAttribute]
private Assembly <Assembly>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AssemblyPath>k__BackingField;
    public IReadOnlyList`1<LogMessage> Messages { get; }
    public IReadOnlyList`1<SequencePointMessage> Warnings { get; }
    public IReadOnlyList`1<SequencePointMessage> Errors { get; }
    public Assembly Assembly { get; internal set; }
    public string AssemblyPath { get; internal set; }
    internal void AddMessage(string text, MessageImportance messageImportance);
    public IReadOnlyList`1<LogMessage> get_Messages();
    internal void AddWarning(string text, SequencePoint sequencePoint);
    public IReadOnlyList`1<SequencePointMessage> get_Warnings();
    internal void AddError(string text, SequencePoint sequencePoint);
    public IReadOnlyList`1<SequencePointMessage> get_Errors();
    [CompilerGeneratedAttribute]
public Assembly get_Assembly();
    [CompilerGeneratedAttribute]
internal void set_Assembly(Assembly value);
    [CompilerGeneratedAttribute]
public string get_AssemblyPath();
    [CompilerGeneratedAttribute]
internal void set_AssemblyPath(string value);
    public object GetInstance(string className);
    public object GetGenericInstance(string className, Type[] types);
}
[ObsoleteAttribute("No longer required as BaseModuleWeaver.TryFindType has been replace with BaseModuleWeaver.TryFindTypeDefinition", "False")]
public class Fody.TryFindTypeFunc : MulticastDelegate {
    public TryFindTypeFunc(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual bool Invoke(string typeName, TypeDefinition& type);
    public virtual IAsyncResult BeginInvoke(string typeName, TypeDefinition& type, AsyncCallback callback, object object);
    public virtual bool EndInvoke(TypeDefinition& type, IAsyncResult result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Fody.TypeCache : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Func`2<string, AssemblyDefinition> resolve;
    public static List`1<string> defaultAssemblies;
    private Dictionary`2<string, TypeDefinition> cachedTypes;
    public TypeCache(Func`2<string, AssemblyDefinition> resolve);
    private static TypeCache();
    public void BuildAssembliesToScan(BaseModuleWeaver weaver);
    public void BuildAssembliesToScan(IEnumerable`1<BaseModuleWeaver> weavers);
    [IteratorStateMachineAttribute("Fody.TypeCache/<GetAssembliesForScanning>d__6")]
private static IEnumerable`1<string> GetAssembliesForScanning(IEnumerable`1<BaseModuleWeaver> weavers);
    private void Initialise(IEnumerable`1<AssemblyDefinition> assemblyDefinitions);
    public virtual TypeDefinition FindType(string typeName);
    private bool FindFromValues(string typeName, TypeDefinition& type);
    public virtual bool TryFindType(string typeName, TypeDefinition& type);
    private void AddIfPublic(TypeDefinition type);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Fody.TypeSystem : object {
    [CompilerGeneratedAttribute]
private TypeReference <IntPtrReference>k__BackingField;
    [CompilerGeneratedAttribute]
private TypeReference <UIntPtrReference>k__BackingField;
    [CompilerGeneratedAttribute]
private TypeReference <StringReference>k__BackingField;
    [CompilerGeneratedAttribute]
private TypeReference <ObjectReference>k__BackingField;
    [CompilerGeneratedAttribute]
private TypeReference <VoidReference>k__BackingField;
    [CompilerGeneratedAttribute]
private TypeReference <BooleanReference>k__BackingField;
    [CompilerGeneratedAttribute]
private TypeReference <CharReference>k__BackingField;
    [CompilerGeneratedAttribute]
private TypeReference <SByteReference>k__BackingField;
    [CompilerGeneratedAttribute]
private TypeReference <ByteReference>k__BackingField;
    [CompilerGeneratedAttribute]
private TypeReference <Int16Reference>k__BackingField;
    [CompilerGeneratedAttribute]
private TypeReference <UInt16Reference>k__BackingField;
    [CompilerGeneratedAttribute]
private TypeReference <Int32Reference>k__BackingField;
    [CompilerGeneratedAttribute]
private TypeReference <UInt32Reference>k__BackingField;
    [CompilerGeneratedAttribute]
private TypeReference <Int64Reference>k__BackingField;
    [CompilerGeneratedAttribute]
private TypeReference <UInt64Reference>k__BackingField;
    [CompilerGeneratedAttribute]
private TypeReference <SingleReference>k__BackingField;
    [CompilerGeneratedAttribute]
private TypeReference <DoubleReference>k__BackingField;
    [CompilerGeneratedAttribute]
private TypeDefinition <ObjectDefinition>k__BackingField;
    [CompilerGeneratedAttribute]
private TypeDefinition <VoidDefinition>k__BackingField;
    [CompilerGeneratedAttribute]
private TypeDefinition <BooleanDefinition>k__BackingField;
    [CompilerGeneratedAttribute]
private TypeDefinition <CharDefinition>k__BackingField;
    [CompilerGeneratedAttribute]
private TypeDefinition <SByteDefinition>k__BackingField;
    [CompilerGeneratedAttribute]
private TypeDefinition <ByteDefinition>k__BackingField;
    [CompilerGeneratedAttribute]
private TypeDefinition <Int16Definition>k__BackingField;
    [CompilerGeneratedAttribute]
private TypeDefinition <UInt16Definition>k__BackingField;
    [CompilerGeneratedAttribute]
private TypeDefinition <Int32Definition>k__BackingField;
    [CompilerGeneratedAttribute]
private TypeDefinition <UInt32Definition>k__BackingField;
    [CompilerGeneratedAttribute]
private TypeDefinition <Int64Definition>k__BackingField;
    [CompilerGeneratedAttribute]
private TypeDefinition <UInt64Definition>k__BackingField;
    [CompilerGeneratedAttribute]
private TypeDefinition <SingleDefinition>k__BackingField;
    [CompilerGeneratedAttribute]
private TypeDefinition <DoubleDefinition>k__BackingField;
    [CompilerGeneratedAttribute]
private TypeDefinition <IntPtrDefinition>k__BackingField;
    [CompilerGeneratedAttribute]
private TypeDefinition <UIntPtrDefinition>k__BackingField;
    [CompilerGeneratedAttribute]
private TypeDefinition <StringDefinition>k__BackingField;
    public TypeReference IntPtrReference { get; }
    public TypeReference UIntPtrReference { get; }
    public TypeReference StringReference { get; }
    public TypeReference ObjectReference { get; }
    public TypeReference VoidReference { get; }
    public TypeReference BooleanReference { get; }
    public TypeReference CharReference { get; }
    public TypeReference SByteReference { get; }
    public TypeReference ByteReference { get; }
    public TypeReference Int16Reference { get; }
    public TypeReference UInt16Reference { get; }
    public TypeReference Int32Reference { get; }
    public TypeReference UInt32Reference { get; }
    public TypeReference Int64Reference { get; }
    public TypeReference UInt64Reference { get; }
    public TypeReference SingleReference { get; }
    public TypeReference DoubleReference { get; }
    public TypeDefinition ObjectDefinition { get; }
    public TypeDefinition VoidDefinition { get; }
    public TypeDefinition BooleanDefinition { get; }
    public TypeDefinition CharDefinition { get; }
    public TypeDefinition SByteDefinition { get; }
    public TypeDefinition ByteDefinition { get; }
    public TypeDefinition Int16Definition { get; }
    public TypeDefinition UInt16Definition { get; }
    public TypeDefinition Int32Definition { get; }
    public TypeDefinition UInt32Definition { get; }
    public TypeDefinition Int64Definition { get; }
    public TypeDefinition UInt64Definition { get; }
    public TypeDefinition SingleDefinition { get; }
    public TypeDefinition DoubleDefinition { get; }
    public TypeDefinition IntPtrDefinition { get; }
    public TypeDefinition UIntPtrDefinition { get; }
    public TypeDefinition StringDefinition { get; }
    public TypeSystem(Func`2<string, TypeDefinition> resolve, ModuleDefinition module);
    [CompilerGeneratedAttribute]
public TypeReference get_IntPtrReference();
    [CompilerGeneratedAttribute]
public TypeReference get_UIntPtrReference();
    [CompilerGeneratedAttribute]
public TypeReference get_StringReference();
    [CompilerGeneratedAttribute]
public TypeReference get_ObjectReference();
    [CompilerGeneratedAttribute]
public TypeReference get_VoidReference();
    [CompilerGeneratedAttribute]
public TypeReference get_BooleanReference();
    [CompilerGeneratedAttribute]
public TypeReference get_CharReference();
    [CompilerGeneratedAttribute]
public TypeReference get_SByteReference();
    [CompilerGeneratedAttribute]
public TypeReference get_ByteReference();
    [CompilerGeneratedAttribute]
public TypeReference get_Int16Reference();
    [CompilerGeneratedAttribute]
public TypeReference get_UInt16Reference();
    [CompilerGeneratedAttribute]
public TypeReference get_Int32Reference();
    [CompilerGeneratedAttribute]
public TypeReference get_UInt32Reference();
    [CompilerGeneratedAttribute]
public TypeReference get_Int64Reference();
    [CompilerGeneratedAttribute]
public TypeReference get_UInt64Reference();
    [CompilerGeneratedAttribute]
public TypeReference get_SingleReference();
    [CompilerGeneratedAttribute]
public TypeReference get_DoubleReference();
    [CompilerGeneratedAttribute]
public TypeDefinition get_ObjectDefinition();
    [CompilerGeneratedAttribute]
public TypeDefinition get_VoidDefinition();
    [CompilerGeneratedAttribute]
public TypeDefinition get_BooleanDefinition();
    [CompilerGeneratedAttribute]
public TypeDefinition get_CharDefinition();
    [CompilerGeneratedAttribute]
public TypeDefinition get_SByteDefinition();
    [CompilerGeneratedAttribute]
public TypeDefinition get_ByteDefinition();
    [CompilerGeneratedAttribute]
public TypeDefinition get_Int16Definition();
    [CompilerGeneratedAttribute]
public TypeDefinition get_UInt16Definition();
    [CompilerGeneratedAttribute]
public TypeDefinition get_Int32Definition();
    [CompilerGeneratedAttribute]
public TypeDefinition get_UInt32Definition();
    [CompilerGeneratedAttribute]
public TypeDefinition get_Int64Definition();
    [CompilerGeneratedAttribute]
public TypeDefinition get_UInt64Definition();
    [CompilerGeneratedAttribute]
public TypeDefinition get_SingleDefinition();
    [CompilerGeneratedAttribute]
public TypeDefinition get_DoubleDefinition();
    [CompilerGeneratedAttribute]
public TypeDefinition get_IntPtrDefinition();
    [CompilerGeneratedAttribute]
public TypeDefinition get_UIntPtrDefinition();
    [CompilerGeneratedAttribute]
public TypeDefinition get_StringDefinition();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Fody.WeaverTestHelper : object {
    [ExtensionAttribute]
public static TestResult ExecuteTestRun(BaseModuleWeaver weaver, string assemblyPath, bool runPeVerify, Action`1<ModuleDefinition> afterExecuteCallback, Action`1<ModuleDefinition> beforeExecuteCallback, string assemblyName, IEnumerable`1<string> ignoreCodes, bool writeSymbols, string folderName);
    private static bool IsWindows();
    private static TypeCache CacheTypes(BaseModuleWeaver weaver, TestAssemblyResolver assemblyResolver);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Fody.WeavingException : Exception {
    [CompilerGeneratedAttribute]
private SequencePoint <SequencePoint>k__BackingField;
    public SequencePoint SequencePoint { get; public set; }
    [NullableContextAttribute("1")]
public WeavingException(string message);
    [CompilerGeneratedAttribute]
public SequencePoint get_SequencePoint();
    [CompilerGeneratedAttribute]
public void set_SequencePoint(SequencePoint value);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
internal static class ReferenceCleaner : object {
    [NullableContextAttribute("1")]
public static void CleanReferences(ModuleDefinition module, BaseModuleWeaver weaver, List`1<string> referenceCopyLocalPaths, List`1<string> runtimeCopyLocalPaths, Action`1<string> log);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class SdkToolFinder : object {
    private static string windowsSdkDirectory;
    private static bool foundToolsDirectory;
    private static SdkToolFinder();
    public static bool TryFindTool(string tool, String& path);
}
[ExtensionAttribute]
internal static class StringExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static string ReplaceCaseless(string str, string oldValue, string newValue);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class SymbolReaderProvider : object {
    private DefaultSymbolReaderProvider inner;
    public sealed virtual ISymbolReader GetSymbolReader(ModuleDefinition module, string fileName);
    public sealed virtual ISymbolReader GetSymbolReader(ModuleDefinition module, Stream symbolStream);
}
[AttributeUsageAttribute("2432")]
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal class System.Diagnostics.CodeAnalysis.AllowNullAttribute : Attribute {
}
[AttributeUsageAttribute("2432")]
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal class System.Diagnostics.CodeAnalysis.DisallowNullAttribute : Attribute {
}
[AttributeUsageAttribute("64")]
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal class System.Diagnostics.CodeAnalysis.DoesNotReturnAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal class System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ParameterValue>k__BackingField;
    public bool ParameterValue { get; }
    public DoesNotReturnIfAttribute(bool parameterValue);
    [CompilerGeneratedAttribute]
public bool get_ParameterValue();
}
[AttributeUsageAttribute("10624")]
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal class System.Diagnostics.CodeAnalysis.MaybeNullAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal class System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ReturnValue>k__BackingField;
    public bool ReturnValue { get; }
    public MaybeNullWhenAttribute(bool returnValue);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("192")]
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal class System.Diagnostics.CodeAnalysis.MemberNotNullAttribute : Attribute {
    [CompilerGeneratedAttribute]
private String[] <Members>k__BackingField;
    public String[] Members { get; }
    public MemberNotNullAttribute(string member);
    public MemberNotNullAttribute(String[] members);
    [CompilerGeneratedAttribute]
public String[] get_Members();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("192")]
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal class System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ReturnValue>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Members>k__BackingField;
    public bool ReturnValue { get; }
    public String[] Members { get; }
    public MemberNotNullWhenAttribute(bool returnValue, string member);
    public MemberNotNullWhenAttribute(bool returnValue, String[] members);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
    [CompilerGeneratedAttribute]
public String[] get_Members();
}
[AttributeUsageAttribute("10624")]
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal class System.Diagnostics.CodeAnalysis.NotNullAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("10368")]
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal class System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <ParameterName>k__BackingField;
    public string ParameterName { get; }
    public NotNullIfNotNullAttribute(string parameterName);
    [CompilerGeneratedAttribute]
public string get_ParameterName();
}
[AttributeUsageAttribute("2048")]
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal class System.Diagnostics.CodeAnalysis.NotNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ReturnValue>k__BackingField;
    public bool ReturnValue { get; }
    public NotNullWhenAttribute(bool returnValue);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
