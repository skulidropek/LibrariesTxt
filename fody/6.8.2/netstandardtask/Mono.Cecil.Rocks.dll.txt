public class Mono.Cecil.Rocks.DocCommentId : object {
    private IMemberDefinition commentMember;
    private StringBuilder id;
    private DocCommentId(IMemberDefinition member);
    private void WriteField(FieldDefinition field);
    private void WriteEvent(EventDefinition event);
    private void WriteType(TypeDefinition type);
    private void WriteMethod(MethodDefinition method);
    private static bool IsConversionOperator(MethodDefinition self);
    private void WriteReturnType(MethodDefinition method);
    private void WriteProperty(PropertyDefinition property);
    private void WriteParameters(IList`1<ParameterDefinition> parameters);
    private void WriteTypeSignature(TypeReference type);
    private bool IsGenericMethodTypeParameter(TypeReference type);
    private void WriteGenericInstanceTypeSignature(GenericInstanceType type);
    private void WriteList(IList`1<T> list, Action`1<T> action);
    private void WriteModiferTypeSignature(IModifierType type, char id);
    private void WriteFunctionPointerTypeSignature(FunctionPointerType type);
    private void WriteArrayTypeSignature(ArrayType type);
    private void WriteDefinition(char id, IMemberDefinition member);
    private void WriteTypeFullName(TypeReference type);
    private void WriteTypeFullName(TypeReference type, GenericTypeOptions options);
    private void WriteGenericTypeParameters(TypeReference type, GenericTypeOptions options);
    private static bool IsGenericType(TypeReference type);
    private IList`1<TypeReference> GetGenericTypeArguments(TypeReference type, GenericTypeOptions options);
    private void WriteItemName(string name);
    public virtual string ToString();
    public static string GetDocCommentId(IMemberDefinition member);
    [CompilerGeneratedAttribute]
private void <WriteParameters>b__10_0(ParameterDefinition p);
    [CompilerGeneratedAttribute]
private void <WriteArrayTypeSignature>b__17_0(ArrayDimension dimension);
}
[ExtensionAttribute]
internal static class Mono.Cecil.Rocks.Functional : object {
    public static Func`2<A, R> Y(Func`2<Func`2<A, R>, Func`2<A, R>> f);
    [ExtensionAttribute]
public static IEnumerable`1<TSource> Prepend(IEnumerable`1<TSource> source, TSource element);
    [IteratorStateMachineAttribute("Mono.Cecil.Rocks.Functional/<PrependIterator>d__2`1")]
private static IEnumerable`1<TSource> PrependIterator(IEnumerable`1<TSource> source, TSource element);
}
public interface Mono.Cecil.Rocks.IILVisitor {
    public abstract virtual void OnInlineNone(OpCode opcode);
    public abstract virtual void OnInlineSByte(OpCode opcode, sbyte value);
    public abstract virtual void OnInlineByte(OpCode opcode, byte value);
    public abstract virtual void OnInlineInt32(OpCode opcode, int value);
    public abstract virtual void OnInlineInt64(OpCode opcode, long value);
    public abstract virtual void OnInlineSingle(OpCode opcode, float value);
    public abstract virtual void OnInlineDouble(OpCode opcode, double value);
    public abstract virtual void OnInlineString(OpCode opcode, string value);
    public abstract virtual void OnInlineBranch(OpCode opcode, int offset);
    public abstract virtual void OnInlineSwitch(OpCode opcode, Int32[] offsets);
    public abstract virtual void OnInlineVariable(OpCode opcode, VariableDefinition variable);
    public abstract virtual void OnInlineArgument(OpCode opcode, ParameterDefinition parameter);
    public abstract virtual void OnInlineSignature(OpCode opcode, CallSite callSite);
    public abstract virtual void OnInlineType(OpCode opcode, TypeReference type);
    public abstract virtual void OnInlineField(OpCode opcode, FieldReference field);
    public abstract virtual void OnInlineMethod(OpCode opcode, MethodReference method);
}
public static class Mono.Cecil.Rocks.ILParser : object {
    public static void Parse(MethodDefinition method, IILVisitor visitor);
    private static void ParseMethod(MethodDefinition method, IILVisitor visitor);
    private static ParseContext CreateContext(MethodDefinition method, IILVisitor visitor);
    private static void ParseFatMethod(ParseContext context);
    private static void ParseCode(int code_size, ParseContext context);
    private static VariableDefinition GetVariable(ParseContext context, int index);
}
[ExtensionAttribute]
public static class Mono.Cecil.Rocks.MethodBodyRocks : object {
    [ExtensionAttribute]
public static void SimplifyMacros(MethodBody self);
    private static void ExpandMacro(Instruction instruction, OpCode opcode, object operand);
    private static void MakeMacro(Instruction instruction, OpCode opcode);
    [ExtensionAttribute]
public static void Optimize(MethodBody self);
    [ExtensionAttribute]
private static void OptimizeLongs(MethodBody self);
    [ExtensionAttribute]
public static void OptimizeMacros(MethodBody self);
    private static void OptimizeBranches(MethodBody body);
    private static bool OptimizeBranch(Instruction instruction);
    private static void ComputeOffsets(MethodBody body);
}
[ExtensionAttribute]
public static class Mono.Cecil.Rocks.MethodDefinitionRocks : object {
    [ExtensionAttribute]
public static MethodDefinition GetBaseMethod(MethodDefinition self);
    [ExtensionAttribute]
public static MethodDefinition GetOriginalBaseMethod(MethodDefinition self);
    private static TypeDefinition ResolveBaseType(TypeDefinition type);
    private static MethodDefinition GetMatchingMethod(TypeDefinition type, MethodDefinition method);
}
[ExtensionAttribute]
public static class Mono.Cecil.Rocks.ModuleDefinitionRocks : object {
    [ExtensionAttribute]
public static IEnumerable`1<TypeDefinition> GetAllTypes(ModuleDefinition self);
}
[ExtensionAttribute]
public static class Mono.Cecil.Rocks.ParameterReferenceRocks : object {
    [ExtensionAttribute]
public static int GetSequence(ParameterReference self);
}
[ExtensionAttribute]
public static class Mono.Cecil.Rocks.TypeDefinitionRocks : object {
    [ExtensionAttribute]
public static IEnumerable`1<MethodDefinition> GetConstructors(TypeDefinition self);
    [ExtensionAttribute]
public static MethodDefinition GetStaticConstructor(TypeDefinition self);
    [ExtensionAttribute]
public static IEnumerable`1<MethodDefinition> GetMethods(TypeDefinition self);
    [ExtensionAttribute]
public static TypeReference GetEnumUnderlyingType(TypeDefinition self);
}
[ExtensionAttribute]
public static class Mono.Cecil.Rocks.TypeReferenceRocks : object {
    [ExtensionAttribute]
public static ArrayType MakeArrayType(TypeReference self);
    [ExtensionAttribute]
public static ArrayType MakeArrayType(TypeReference self, int rank);
    [ExtensionAttribute]
public static PointerType MakePointerType(TypeReference self);
    [ExtensionAttribute]
public static ByReferenceType MakeByReferenceType(TypeReference self);
    [ExtensionAttribute]
public static OptionalModifierType MakeOptionalModifierType(TypeReference self, TypeReference modifierType);
    [ExtensionAttribute]
public static RequiredModifierType MakeRequiredModifierType(TypeReference self, TypeReference modifierType);
    [ExtensionAttribute]
public static GenericInstanceType MakeGenericInstanceType(TypeReference self, TypeReference[] arguments);
    [ExtensionAttribute]
public static PinnedType MakePinnedType(TypeReference self);
    [ExtensionAttribute]
public static SentinelType MakeSentinelType(TypeReference self);
}
