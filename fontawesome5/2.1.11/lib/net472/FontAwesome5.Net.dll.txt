public static class FontAwesome5.Awesome : object {
    public static DependencyProperty ContentProperty;
    private static EFontAwesomeIcon DEFAULT_CONTENT;
    private static Awesome();
    public static EFontAwesomeIcon GetContent(DependencyObject target);
    public static void SetContent(DependencyObject target, EFontAwesomeIcon value);
    private static void ContentChanged(DependencyObject sender, DependencyPropertyChangedEventArgs evt);
}
public class FontAwesome5.Converters.DrawingConverter : MarkupExtension {
    public virtual object ProvideValue(IServiceProvider serviceProvider);
    public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
public class FontAwesome5.Converters.ImageSourceConverter : MarkupExtension {
    public virtual object ProvideValue(IServiceProvider serviceProvider);
    public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
public class FontAwesome5.Converters.ImageSourceSvgConverter : MarkupExtension {
    public virtual object ProvideValue(IServiceProvider serviceProvider);
    public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
public class FontAwesome5.Converters.LabelConverter : MarkupExtension {
    public virtual object ProvideValue(IServiceProvider serviceProvider);
    public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
public class FontAwesome5.Converters.StyleConverter : MarkupExtension {
    public virtual object ProvideValue(IServiceProvider serviceProvider);
    public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
[ValueConversionAttribute("FontAwesome5.EFontAwesomeIcon", "System.Windows.Visibility")]
public class FontAwesome5.Converters.VisibilityConverter : MarkupExtension {
    public virtual object ProvideValue(IServiceProvider serviceProvider);
    public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
[LocalizabilityAttribute]
public enum FontAwesome5.EFlipOrientation : Enum {
    public int value__;
    public static EFlipOrientation Normal;
    public static EFlipOrientation Horizontal;
    public static EFlipOrientation Vertical;
}
[ExtensionAttribute]
public static class FontAwesome5.Extensions.ControlExtensions : object {
    private static string SpinnerStoryBoardName;
    private static string PulseStoryBoardName;
    private static ControlExtensions();
    [ExtensionAttribute]
public static void BeginSpin(T control);
    [ExtensionAttribute]
public static void StopSpin(T control);
    [ExtensionAttribute]
public static void BeginPulse(T control);
    [ExtensionAttribute]
public static void StopPulse(T control);
    [ExtensionAttribute]
public static void SetRotation(T control);
    [ExtensionAttribute]
public static void SetFlipOrientation(T control);
}
[ExtensionAttribute]
public static class FontAwesome5.Extensions.EFontAwesomeIconExtensions : object {
    [ExtensionAttribute]
public static Typeface GetTypeFace(EFontAwesomeIcon icon);
    [ExtensionAttribute]
public static FontFamily GetFontFamily(EFontAwesomeIcon icon);
}
[ExtensionAttribute]
public static class FontAwesome5.Extensions.EFontAwesomeIconsExtensions : object {
    [ExtensionAttribute]
public static ImageSource CreateImageSource(EFontAwesomeIcon icon, Brush foregroundBrush, double emSize);
    [ExtensionAttribute]
public static ImageSource CreateImageSource(EFontAwesomeIcon icon, Brush foregroundBrush, Pen pen);
    [ExtensionAttribute]
public static Drawing CreateDrawing(EFontAwesomeIcon icon, Brush foregroundBrush, double emSize);
    [ExtensionAttribute]
public static Drawing CreateDrawing(EFontAwesomeIcon icon, Brush brush, Pen pen);
    [ExtensionAttribute]
public static FormattedText CreateFormattedText(EFontAwesomeIcon icon, Brush foregroundBrush, double emSize);
    [ExtensionAttribute]
public static FormattedText CreateFormattedText(EFontAwesomeIcon icon, Brush foregroundBrush, double emSize, FlowDirection flowDirection, TextFormattingMode textFormattingMode, NumberSubstitution numberSubstitution);
    [ExtensionAttribute]
public static Path CreatePath(EFontAwesomeIcon icon, Brush foregroundBrush, double emSize);
    [ExtensionAttribute]
public static Geometry CreateGeometry(EFontAwesomeIcon icon, Int32& width, Int32& height);
}
public class FontAwesome5.FontAwesome : TextBlock {
    public static DependencyProperty IconProperty;
    public static DependencyProperty SpinProperty;
    public static DependencyProperty SpinDurationProperty;
    public static DependencyProperty PulseProperty;
    public static DependencyProperty PulseDurationProperty;
    public static DependencyProperty RotationProperty;
    public static DependencyProperty FlipOrientationProperty;
    public EFontAwesomeIcon Icon { get; public set; }
    public bool Spin { get; public set; }
    public double SpinDuration { get; public set; }
    public bool Pulse { get; public set; }
    public double PulseDuration { get; public set; }
    public double Rotation { get; public set; }
    public EFlipOrientation FlipOrientation { get; public set; }
    private static FontAwesome();
    private static void OpacityChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    public EFontAwesomeIcon get_Icon();
    public void set_Icon(EFontAwesomeIcon value);
    private static void OnIconPropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    public sealed virtual bool get_Spin();
    public sealed virtual void set_Spin(bool value);
    private static void OnSpinPropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static object SpinCoerceValue(DependencyObject d, object basevalue);
    public sealed virtual double get_SpinDuration();
    public sealed virtual void set_SpinDuration(double value);
    private static void SpinDurationChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static object SpinDurationCoerceValue(DependencyObject d, object value);
    public sealed virtual bool get_Pulse();
    public sealed virtual void set_Pulse(bool value);
    private static void OnPulsePropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static object PulseCoerceValue(DependencyObject d, object basevalue);
    public sealed virtual double get_PulseDuration();
    public sealed virtual void set_PulseDuration(double value);
    private static void PulseDurationChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static object PulseDurationCoerceValue(DependencyObject d, object value);
    public sealed virtual double get_Rotation();
    public sealed virtual void set_Rotation(double value);
    private static void RotationChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static object RotationCoerceValue(DependencyObject d, object value);
    public sealed virtual EFlipOrientation get_FlipOrientation();
    public sealed virtual void set_FlipOrientation(EFlipOrientation value);
    private static void FlipOrientationChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    [CompilerGeneratedAttribute]
private void <.ctor>b__8_0(object s, DependencyPropertyChangedEventArgs a);
}
public static class FontAwesome5.Fonts : object {
    public static FontFamily RegularFontFamily;
    public static FontFamily SolidFontFamily;
    public static FontFamily BrandsFontFamily;
    public static Typeface RegularTypeface { get; }
    public static Typeface SolidTypeface { get; }
    public static Typeface BrandsTypeface { get; }
    private static Fonts();
    public static void LoadFromResource();
    public static void LoadFromDirectory(string path);
    public static void SaveFontFilesToDirectory(string path);
    private static void WriteResourceToFile(ResourceManager resManager, string resourceName, string fileName);
    public static Typeface get_RegularTypeface();
    public static Typeface get_SolidTypeface();
    public static Typeface get_BrandsTypeface();
}
public interface FontAwesome5.IFlippable {
    public EFlipOrientation FlipOrientation { get; public set; }
    public abstract virtual EFlipOrientation get_FlipOrientation();
    public abstract virtual void set_FlipOrientation(EFlipOrientation value);
}
public class FontAwesome5.ImageAwesome : Image {
    public static DependencyProperty ForegroundProperty;
    public static DependencyProperty IconProperty;
    public static DependencyProperty SpinProperty;
    public static DependencyProperty SpinDurationProperty;
    public static DependencyProperty PulseProperty;
    public static DependencyProperty PulseDurationProperty;
    public static DependencyProperty RotationProperty;
    public static DependencyProperty FlipOrientationProperty;
    public Brush Foreground { get; public set; }
    public EFontAwesomeIcon Icon { get; public set; }
    public bool Spin { get; public set; }
    public double SpinDuration { get; public set; }
    public bool Pulse { get; public set; }
    public double PulseDuration { get; public set; }
    public double Rotation { get; public set; }
    public EFlipOrientation FlipOrientation { get; public set; }
    private static ImageAwesome();
    private static void OpacityChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    public Brush get_Foreground();
    public void set_Foreground(Brush value);
    public EFontAwesomeIcon get_Icon();
    public void set_Icon(EFontAwesomeIcon value);
    public sealed virtual bool get_Spin();
    public sealed virtual void set_Spin(bool value);
    private static void OnSpinPropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static object SpinCoerceValue(DependencyObject d, object basevalue);
    public sealed virtual double get_SpinDuration();
    public sealed virtual void set_SpinDuration(double value);
    private static void SpinDurationChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static object SpinDurationCoerceValue(DependencyObject d, object value);
    public sealed virtual bool get_Pulse();
    public sealed virtual void set_Pulse(bool value);
    private static void OnPulsePropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static object PulseCoerceValue(DependencyObject d, object basevalue);
    public sealed virtual double get_PulseDuration();
    public sealed virtual void set_PulseDuration(double value);
    private static void PulseDurationChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static object PulseDurationCoerceValue(DependencyObject d, object value);
    public sealed virtual double get_Rotation();
    public sealed virtual void set_Rotation(double value);
    private static void RotationChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static object RotationCoerceValue(DependencyObject d, object value);
    public sealed virtual EFlipOrientation get_FlipOrientation();
    public sealed virtual void set_FlipOrientation(EFlipOrientation value);
    private static void FlipOrientationChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void OnIconPropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    [CompilerGeneratedAttribute]
private void <.ctor>b__9_0(object s, DependencyPropertyChangedEventArgs a);
}
public interface FontAwesome5.IPulsable {
    public bool Pulse { get; public set; }
    public double PulseDuration { get; public set; }
    public abstract virtual bool get_Pulse();
    public abstract virtual void set_Pulse(bool value);
    public abstract virtual double get_PulseDuration();
    public abstract virtual void set_PulseDuration(double value);
}
public interface FontAwesome5.IRotatable {
    public double Rotation { get; public set; }
    public abstract virtual double get_Rotation();
    public abstract virtual void set_Rotation(double value);
}
public interface FontAwesome5.ISpinable {
    public bool Spin { get; public set; }
    public double SpinDuration { get; public set; }
    public abstract virtual bool get_Spin();
    public abstract virtual void set_Spin(bool value);
    public abstract virtual double get_SpinDuration();
    public abstract virtual void set_SpinDuration(double value);
}
public class FontAwesome5.SvgAwesome : Viewbox {
    public static DependencyProperty ForegroundProperty;
    public static DependencyProperty IconProperty;
    public static DependencyProperty SpinProperty;
    public static DependencyProperty SpinDurationProperty;
    public static DependencyProperty PulseProperty;
    public static DependencyProperty PulseDurationProperty;
    public static DependencyProperty RotationProperty;
    public static DependencyProperty FlipOrientationProperty;
    public Brush Foreground { get; public set; }
    public EFontAwesomeIcon Icon { get; public set; }
    public bool Spin { get; public set; }
    public double SpinDuration { get; public set; }
    public bool Pulse { get; public set; }
    public double PulseDuration { get; public set; }
    public double Rotation { get; public set; }
    public EFlipOrientation FlipOrientation { get; public set; }
    private static SvgAwesome();
    private static void OpacityChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    public Brush get_Foreground();
    public void set_Foreground(Brush value);
    public EFontAwesomeIcon get_Icon();
    public void set_Icon(EFontAwesomeIcon value);
    public sealed virtual bool get_Spin();
    public sealed virtual void set_Spin(bool value);
    private static void OnSpinPropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static object SpinCoerceValue(DependencyObject d, object basevalue);
    public sealed virtual double get_SpinDuration();
    public sealed virtual void set_SpinDuration(double value);
    private static void SpinDurationChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static object SpinDurationCoerceValue(DependencyObject d, object value);
    public sealed virtual bool get_Pulse();
    public sealed virtual void set_Pulse(bool value);
    private static void OnPulsePropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static object PulseCoerceValue(DependencyObject d, object basevalue);
    public sealed virtual double get_PulseDuration();
    public sealed virtual void set_PulseDuration(double value);
    private static void PulseDurationChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static object PulseDurationCoerceValue(DependencyObject d, object value);
    public sealed virtual double get_Rotation();
    public sealed virtual void set_Rotation(double value);
    private static void RotationChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static object RotationCoerceValue(DependencyObject d, object value);
    public sealed virtual EFlipOrientation get_FlipOrientation();
    public sealed virtual void set_FlipOrientation(EFlipOrientation value);
    private static void FlipOrientationChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void OnIconPropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    [CompilerGeneratedAttribute]
private void <.ctor>b__9_0(object s, DependencyPropertyChangedEventArgs a);
}
