[AutoOpenAttribute]
[CompilationMappingAttribute]
public static class FParsec.CharParsers : object {
    [LiteralAttribute]
[DebuggerBrowsableAttribute("0")]
public static char EOS;
    public static string foldCase(string arg00);
    public static string normalizeNewlines(string arg00);
    public static string floatToHexString(double arg00);
    public static double floatOfHexString(string arg00);
    public static string float32ToHexString(float arg00);
    public static float float32OfHexString(string arg00);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal static ParserResult`2<Result, UserState> applyParser(FSharpFunc`2<CharStream`1<UserState>, Reply`1<Result>> parser, CharStream`1<UserState> stream);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static ParserResult`2<a, u> runParserOnString(FSharpFunc`2<CharStream`1<u>, Reply`1<a>> parser, u ustate, string streamName, string chars);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static ParserResult`2<a, u> runParserOnSubstring(FSharpFunc`2<CharStream`1<u>, Reply`1<a>> parser, u ustate, string streamName, string chars, int index, int length);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static ParserResult`2<a, u> runParserOnStream(FSharpFunc`2<CharStream`1<u>, Reply`1<a>> parser, u ustate, string streamName, Stream byteStream, Encoding encoding);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static ParserResult`2<a, u> runParserOnFile(FSharpFunc`2<CharStream`1<u>, Reply`1<a>> parser, u ustate, string path, Encoding encoding);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static ParserResult`2<Result, Unit> run(FSharpFunc`2<CharStream`1<Unit>, Reply`1<Result>> parser, string string);
    public static FSharpFunc`2<CharStream`1<u>, Reply`1<Position>> getPosition();
    public static FSharpFunc`2<CharStream`1<u>, Reply`1<u>> getUserState();
    public static FSharpFunc`2<CharStream`1<u>, Reply`1<Unit>> setUserState(u newUserState);
    public static FSharpFunc`2<CharStream`1<u>, Reply`1<Unit>> updateUserState(FSharpFunc`2<u, u> f);
    public static FSharpFunc`2<CharStream`1<u>, Reply`1<Unit>> userStateSatisfies(FSharpFunc`2<u, bool> f);
    public static FSharpFunc`2<CharStream`1<u>, Reply`1<a>> newlineReturn(a result);
    public static FSharpFunc`2<CharStream`1<u>, Reply`1<char>> newline();
    public static FSharpFunc`2<CharStream`1<u>, Reply`1<Unit>> skipNewline();
    public static FSharpFunc`2<CharStream`1<u>, Reply`1<a>> unicodeNewlineReturn(a result);
    public static FSharpFunc`2<CharStream`1<u>, Reply`1<char>> unicodeNewline();
    public static FSharpFunc`2<CharStream`1<u>, Reply`1<Unit>> skipUnicodeNewline();
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal static Reply`1<a> charReturnE(char c, a result, ErrorMessageList error, CharStream`1<u> stream);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpFunc`2<CharStream`1<u>, Reply`1<a>> charReturn(char c, a result);
    public static FSharpFunc`2<CharStream`1<u>, Reply`1<char>> pchar(char c);
    public static FSharpFunc`2<CharStream`1<u>, Reply`1<Unit>> skipChar(char c);
    public static FSharpFunc`2<CharStream`1<u>, Reply`1<char>> anyChar();
    public static FSharpFunc`2<CharStream`1<u>, Reply`1<Unit>> skipAnyChar();
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal static Reply`1<char> satisfyE(FSharpFunc`2<char, bool> f, ErrorMessageList error, CharStream`1<u> stream);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal static Reply`1<Unit> skipSatisfyE(FSharpFunc`2<char, bool> f, ErrorMessageList error, CharStream`1<u> stream);
    public static FSharpFunc`2<CharStream`1<u>, Reply`1<char>> satisfy(FSharpFunc`2<char, bool> f);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpFunc`2<CharStream`1<u>, Reply`1<char>> satisfyL(FSharpFunc`2<char, bool> f, string label);
    public static FSharpFunc`2<CharStream`1<u>, Reply`1<Unit>> skipSatisfy(FSharpFunc`2<char, bool> f);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpFunc`2<CharStream`1<u>, Reply`1<Unit>> skipSatisfyL(FSharpFunc`2<char, bool> f, string label);
    internal static string charsToString(IEnumerable`1<char> chars);
    public static FSharpFunc`2<char, bool> isAnyOf(IEnumerable`1<char> chars);
    public static FSharpFunc`2<char, bool> isNoneOf(IEnumerable`1<char> chars);
    public static FSharpFunc`2<CharStream`1<u>, Reply`1<char>> anyOf(IEnumerable`1<char> chars);
    public static FSharpFunc`2<CharStream`1<u>, Reply`1<Unit>> skipAnyOf(IEnumerable`1<char> chars);
    public static FSharpFunc`2<CharStream`1<u>, Reply`1<char>> noneOf(IEnumerable`1<char> chars);
    public static FSharpFunc`2<CharStream`1<u>, Reply`1<Unit>> skipNoneOf(IEnumerable`1<char> chars);
    public static bool isAsciiUpper(char c);
    public static bool isAsciiLower(char c);
    public static bool isAsciiLetter(char c);
    public static bool isUpper(char c);
    public static bool isLower(char c);
    public static bool isLetter(char c);
    public static bool isDigit(char c);
    public static bool isHex(char c);
    public static bool isOctal(char c);
    [CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
internal static bool f@181(char c);
    public static FSharpFunc`2<CharStream`1<u>, Reply`1<char>> asciiUpper();
    [CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
internal static bool f@181-1(char c);
    public static FSharpFunc`2<CharStream`1<u>, Reply`1<char>> asciiLower();
    [CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
internal static bool f@181-2(char c);
    public static FSharpFunc`2<CharStream`1<u>, Reply`1<char>> asciiLetter();
    [CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
internal static bool f@181-3(char c);
    public static FSharpFunc`2<CharStream`1<u>, Reply`1<char>> upper();
    [CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
internal static bool f@181-4(char c);
    public static FSharpFunc`2<CharStream`1<u>, Reply`1<char>> lower();
    [CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
internal static bool f@181-5(char c);
    public static FSharpFunc`2<CharStream`1<u>, Reply`1<char>> letter();
    [CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
internal static bool f@181-6(char c);
    public static FSharpFunc`2<CharStream`1<u>, Reply`1<char>> digit();
    [CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
internal static bool f@181-7(char c);
    public static FSharpFunc`2<CharStream`1<u>, Reply`1<char>> hex();
    [CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
internal static bool f@181-8(char c);
    public static FSharpFunc`2<CharStream`1<u>, Reply`1<char>> octal();
    public static FSharpFunc`2<CharStream`1<u>, Reply`1<char>> tab();
    public static FSharpFunc`2<CharStream`1<u>, Reply`1<Unit>> spaces();
    public static FSharpFunc`2<CharStream`1<u>, Reply`1<Unit>> spaces1();
    public static FSharpFunc`2<CharStream`1<u>, Reply`1<Unit>> unicodeSpaces();
    public static FSharpFunc`2<CharStream`1<u>, Reply`1<Unit>> unicodeSpaces1();
    public static FSharpFunc`2<CharStream`1<u>, Reply`1<Unit>> eof();
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal static a newlineOrEOSCharInStringArg(string name, string arg, int i);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal static void checkStringContainsNoNewlineOrEOSChar(string s, string name);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpFunc`2<CharStream`1<u>, Reply`1<a>> stringReturn(string s, a result);
    public static FSharpFunc`2<CharStream`1<u>, Reply`1<string>> pstring(string s);
    public static FSharpFunc`2<CharStream`1<u>, Reply`1<Unit>> skipString(string s);
    public static FSharpFunc`2<CharStream`1<u>, Reply`1<string>> pstringCI(string s);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpFunc`2<CharStream`1<u>, Reply`1<a>> stringCIReturn(string s, a result);
    public static FSharpFunc`2<CharStream`1<u>, Reply`1<Unit>> skipStringCI(string s);
    public static FSharpFunc`2<CharStream`1<u>, Reply`1<string>> anyString(int n);
    public static FSharpFunc`2<CharStream`1<u>, Reply`1<Unit>> skipAnyString(int n);
    public static FSharpFunc`2<CharStream`1<u>, Reply`1<string>> restOfLine(bool skipNewline);
    public static FSharpFunc`2<CharStream`1<u>, Reply`1<Unit>> skipRestOfLine(bool skipNewline);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpFunc`2<CharStream`1<u>, Reply`1<string>> charsTillString(string s, bool skipString, int maxCount);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpFunc`2<CharStream`1<u>, Reply`1<string>> charsTillStringCI(string s, bool skipString, int maxCount);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpFunc`2<CharStream`1<u>, Reply`1<Unit>> skipCharsTillString(string s, bool skipString, int maxCount);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpFunc`2<CharStream`1<u>, Reply`1<Unit>> skipCharsTillStringCI(string s, bool skipString, int maxCount);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpFunc`2<CharStream`1<u>, Reply`1<string>> manySatisfy2(FSharpFunc`2<char, bool> f1, FSharpFunc`2<char, bool> f);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpFunc`2<CharStream`1<u>, Reply`1<string>> many1Satisfy2(FSharpFunc`2<char, bool> f1, FSharpFunc`2<char, bool> f);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpFunc`2<CharStream`1<u>, Reply`1<string>> many1Satisfy2L(FSharpFunc`2<char, bool> f1, FSharpFunc`2<char, bool> f, string label);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpFunc`2<CharStream`1<u>, Reply`1<Unit>> skipManySatisfy2(FSharpFunc`2<char, bool> f1, FSharpFunc`2<char, bool> f);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpFunc`2<CharStream`1<u>, Reply`1<Unit>> skipMany1Satisfy2(FSharpFunc`2<char, bool> f1, FSharpFunc`2<char, bool> f);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpFunc`2<CharStream`1<u>, Reply`1<Unit>> skipMany1Satisfy2L(FSharpFunc`2<char, bool> f1, FSharpFunc`2<char, bool> f, string label);
    public static FSharpFunc`2<CharStream`1<u>, Reply`1<string>> manySatisfy(FSharpFunc`2<char, bool> f);
    public static FSharpFunc`2<CharStream`1<u>, Reply`1<string>> many1Satisfy(FSharpFunc`2<char, bool> f);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpFunc`2<CharStream`1<u>, Reply`1<string>> many1SatisfyL(FSharpFunc`2<char, bool> f, string label);
    public static FSharpFunc`2<CharStream`1<u>, Reply`1<Unit>> skipManySatisfy(FSharpFunc`2<char, bool> f);
    public static FSharpFunc`2<CharStream`1<u>, Reply`1<Unit>> skipMany1Satisfy(FSharpFunc`2<char, bool> f);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpFunc`2<CharStream`1<u>, Reply`1<Unit>> skipMany1SatisfyL(FSharpFunc`2<char, bool> f, string label);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal static FSharpFunc`2<CharStream`1<u>, Reply`1<string>> manyMinMaxSatisfy2E(int minCount, int maxCount, FSharpFunc`2<char, bool> f1, FSharpFunc`2<char, bool> f, ErrorMessageList error);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal static FSharpFunc`2<CharStream`1<u>, Reply`1<Unit>> skipManyMinMaxSatisfy2E(int minCount, int maxCount, FSharpFunc`2<char, bool> f1, FSharpFunc`2<char, bool> f, ErrorMessageList error);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpFunc`2<CharStream`1<u>, Reply`1<string>> manyMinMaxSatisfy(int minCount, int maxCount, FSharpFunc`2<char, bool> f);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpFunc`2<CharStream`1<u>, Reply`1<string>> manyMinMaxSatisfyL(int minCount, int maxCount, FSharpFunc`2<char, bool> f, string label);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpFunc`2<CharStream`1<u>, Reply`1<string>> manyMinMaxSatisfy2(int minCount, int maxCount, FSharpFunc`2<char, bool> f1, FSharpFunc`2<char, bool> f);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpFunc`2<CharStream`1<u>, Reply`1<string>> manyMinMaxSatisfy2L(int minCount, int maxCount, FSharpFunc`2<char, bool> f1, FSharpFunc`2<char, bool> f, string label);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpFunc`2<CharStream`1<u>, Reply`1<Unit>> skipManyMinMaxSatisfy(int minCount, int maxCount, FSharpFunc`2<char, bool> f);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpFunc`2<CharStream`1<u>, Reply`1<Unit>> skipManyMinMaxSatisfyL(int minCount, int maxCount, FSharpFunc`2<char, bool> f, string label);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpFunc`2<CharStream`1<u>, Reply`1<Unit>> skipManyMinMaxSatisfy2(int minCount, int maxCount, FSharpFunc`2<char, bool> f1, FSharpFunc`2<char, bool> f);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpFunc`2<CharStream`1<u>, Reply`1<Unit>> skipManyMinMaxSatisfy2L(int minCount, int maxCount, FSharpFunc`2<char, bool> f1, FSharpFunc`2<char, bool> f, string label);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal static FSharpFunc`2<CharStream`1<u>, Reply`1<string>> regexE(string pattern, ErrorMessageList error);
    public static FSharpFunc`2<CharStream`1<u>, Reply`1<string>> regex(string pattern);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpFunc`2<CharStream`1<u>, Reply`1<string>> regexL(string pattern, string label);
    public static FSharpFunc`2<CharStream`1<u>, Reply`1<string>> identifier(IdentifierOptions identifierOptions);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpFunc`2<CharStream`1<u>, Reply`1<string>> manyChars2(FSharpFunc`2<CharStream`1<u>, Reply`1<char>> p1, FSharpFunc`2<CharStream`1<u>, Reply`1<char>> p);
    public static FSharpFunc`2<CharStream`1<u>, Reply`1<string>> manyChars(FSharpFunc`2<CharStream`1<u>, Reply`1<char>> p);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpFunc`2<CharStream`1<u>, Reply`1<string>> many1Chars2(FSharpFunc`2<CharStream`1<u>, Reply`1<char>> p1, FSharpFunc`2<CharStream`1<u>, Reply`1<char>> p);
    public static FSharpFunc`2<CharStream`1<u>, Reply`1<string>> many1Chars(FSharpFunc`2<CharStream`1<u>, Reply`1<char>> p);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpFunc`2<CharStream`1<u>, Reply`1<c>> manyCharsTillApply2(FSharpFunc`2<CharStream`1<u>, Reply`1<char>> p1, FSharpFunc`2<CharStream`1<u>, Reply`1<char>> p, FSharpFunc`2<CharStream`1<u>, Reply`1<b>> endp, FSharpFunc`2<string, FSharpFunc`2<b, c>> f);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpFunc`2<CharStream`1<u>, Reply`1<c>> manyCharsTillApply(FSharpFunc`2<CharStream`1<u>, Reply`1<char>> p, FSharpFunc`2<CharStream`1<u>, Reply`1<b>> endp, FSharpFunc`2<string, FSharpFunc`2<b, c>> f);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpFunc`2<CharStream`1<u>, Reply`1<string>> manyCharsTill2(FSharpFunc`2<CharStream`1<u>, Reply`1<char>> p1, FSharpFunc`2<CharStream`1<u>, Reply`1<char>> p, FSharpFunc`2<CharStream`1<u>, Reply`1<b>> endp);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpFunc`2<CharStream`1<u>, Reply`1<string>> manyCharsTill(FSharpFunc`2<CharStream`1<u>, Reply`1<char>> p, FSharpFunc`2<CharStream`1<u>, Reply`1<b>> endp);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpFunc`2<CharStream`1<u>, Reply`1<c>> many1CharsTillApply2(FSharpFunc`2<CharStream`1<u>, Reply`1<char>> p1, FSharpFunc`2<CharStream`1<u>, Reply`1<char>> p, FSharpFunc`2<CharStream`1<u>, Reply`1<b>> endp, FSharpFunc`2<string, FSharpFunc`2<b, c>> f);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpFunc`2<CharStream`1<u>, Reply`1<c>> many1CharsTillApply(FSharpFunc`2<CharStream`1<u>, Reply`1<char>> p, FSharpFunc`2<CharStream`1<u>, Reply`1<b>> endp, FSharpFunc`2<string, FSharpFunc`2<b, c>> f);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpFunc`2<CharStream`1<u>, Reply`1<string>> many1CharsTill2(FSharpFunc`2<CharStream`1<u>, Reply`1<char>> p1, FSharpFunc`2<CharStream`1<u>, Reply`1<char>> p, FSharpFunc`2<CharStream`1<u>, Reply`1<b>> endp);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpFunc`2<CharStream`1<u>, Reply`1<string>> many1CharsTill(FSharpFunc`2<CharStream`1<u>, Reply`1<char>> p, FSharpFunc`2<CharStream`1<u>, Reply`1<b>> endp);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpFunc`2<CharStream`1<u>, Reply`1<string>> manyStrings2(FSharpFunc`2<CharStream`1<u>, Reply`1<string>> p1, FSharpFunc`2<CharStream`1<u>, Reply`1<string>> p);
    public static FSharpFunc`2<CharStream`1<u>, Reply`1<string>> manyStrings(FSharpFunc`2<CharStream`1<u>, Reply`1<string>> p);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpFunc`2<CharStream`1<u>, Reply`1<string>> many1Strings2(FSharpFunc`2<CharStream`1<u>, Reply`1<string>> p1, FSharpFunc`2<CharStream`1<u>, Reply`1<string>> p);
    public static FSharpFunc`2<CharStream`1<u>, Reply`1<string>> many1Strings(FSharpFunc`2<CharStream`1<u>, Reply`1<string>> p);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpFunc`2<CharStream`1<u>, Reply`1<string>> stringsSepBy(FSharpFunc`2<CharStream`1<u>, Reply`1<string>> p, FSharpFunc`2<CharStream`1<u>, Reply`1<string>> sep);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpFunc`2<CharStream`1<u>, Reply`1<string>> stringsSepBy1(FSharpFunc`2<CharStream`1<u>, Reply`1<string>> p, FSharpFunc`2<CharStream`1<u>, Reply`1<string>> sep);
    public static FSharpFunc`2<CharStream`1<u>, Reply`1<string>> skipped(FSharpFunc`2<CharStream`1<u>, Reply`1<Unit>> p);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpFunc`2<CharStream`1<u>, Reply`1<b>> withSkippedString(FSharpFunc`2<string, FSharpFunc`2<a, b>> f, FSharpFunc`2<CharStream`1<u>, Reply`1<a>> p);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static Reply`1<NumberLiteral> numberLiteralE(NumberLiteralOptions opt, ErrorMessageList errorInCaseNoLiteralFound, CharStream`1<u> stream);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpFunc`2<CharStream`1<u>, Reply`1<NumberLiteral>> numberLiteral(NumberLiteralOptions opt, string label);
    public static FSharpFunc`2<CharStream`1<u>, Reply`1<double>> pfloat();
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal static ulong parseUInt64(char c0, CharStream`1<u> stream, ReplyStatus& status, ErrorMessageList& error);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal static UInt32 parseUInt32(char c0, CharStream`1<u> stream, ReplyStatus& status, ErrorMessageList& error);
    public static FSharpFunc`2<CharStream`1<u>, Reply`1<long>> pint64();
    public static FSharpFunc`2<CharStream`1<u>, Reply`1<int>> pint32();
    public static FSharpFunc`2<CharStream`1<u>, Reply`1<short>> pint16();
    public static FSharpFunc`2<CharStream`1<u>, Reply`1<sbyte>> pint8();
    public static FSharpFunc`2<CharStream`1<u>, Reply`1<ulong>> puint64();
    public static FSharpFunc`2<CharStream`1<u>, Reply`1<UInt32>> puint32();
    public static FSharpFunc`2<CharStream`1<u>, Reply`1<ushort>> puint16();
    public static FSharpFunc`2<CharStream`1<u>, Reply`1<byte>> puint8();
    public static FSharpFunc`2<CharStream`1<u>, Reply`1<Unit>> notFollowedByEof();
    public static FSharpFunc`2<CharStream`1<u>, Reply`1<Unit>> followedByNewline();
    public static FSharpFunc`2<CharStream`1<u>, Reply`1<Unit>> notFollowedByNewline();
    public static FSharpFunc`2<CharStream`1<u>, Reply`1<Unit>> followedByString(string str);
    public static FSharpFunc`2<CharStream`1<u>, Reply`1<Unit>> followedByStringCI(string str);
    public static FSharpFunc`2<CharStream`1<u>, Reply`1<Unit>> notFollowedByString(string str);
    public static FSharpFunc`2<CharStream`1<u>, Reply`1<Unit>> notFollowedByStringCI(string str);
    public static FSharpFunc`2<CharStream`1<u>, Reply`1<Unit>> previousCharSatisfies(FSharpFunc`2<char, bool> f);
    public static FSharpFunc`2<CharStream`1<u>, Reply`1<Unit>> previousCharSatisfiesNot(FSharpFunc`2<char, bool> f);
    public static FSharpFunc`2<CharStream`1<u>, Reply`1<Unit>> nextCharSatisfies(FSharpFunc`2<char, bool> f);
    public static FSharpFunc`2<CharStream`1<u>, Reply`1<Unit>> nextCharSatisfiesNot(FSharpFunc`2<char, bool> f);
    public static FSharpFunc`2<CharStream`1<u>, Reply`1<Unit>> next2CharsSatisfy(FSharpFunc`2<char, FSharpFunc`2<char, bool>> f);
    public static FSharpFunc`2<CharStream`1<u>, Reply`1<Unit>> next2CharsSatisfyNot(FSharpFunc`2<char, FSharpFunc`2<char, bool>> f);
}
[CompilationMappingAttribute]
internal static class FParsec.Emit : object {
}
[AutoOpenAttribute]
[CompilationMappingAttribute]
public static class FParsec.Error : object {
    [LiteralAttribute]
[DebuggerBrowsableAttribute("0")]
public static ErrorMessageList NoErrorMessages;
    public static FSharpOption`1<string> |Expected|_|(ErrorMessage msg);
    public static FSharpOption`1<string> |ExpectedString|_|(ErrorMessage msg);
    public static FSharpOption`1<string> |ExpectedStringCI|_|(ErrorMessage msg);
    public static FSharpOption`1<string> |Unexpected|_|(ErrorMessage msg);
    public static FSharpOption`1<string> |UnexpectedString|_|(ErrorMessage msg);
    public static FSharpOption`1<string> |UnexpectedStringCI|_|(ErrorMessage msg);
    public static FSharpOption`1<string> |Message|_|(ErrorMessage msg);
    public static FSharpOption`1<Tuple`3<Position, object, ErrorMessageList>> |NestedError|_|(ErrorMessage msg);
    public static FSharpOption`1<Tuple`4<string, Position, object, ErrorMessageList>> |CompoundError|_|(ErrorMessage msg);
    public static FSharpOption`1<object> |OtherErrorMessage|_|(ErrorMessage msg);
    public static FSharpChoice`2<Tuple`2<ErrorMessage, ErrorMessageList>, Unit> |ErrorMessageList|NoErrorMessages|(ErrorMessageList error);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static bool isSingleErrorMessageOfType(ErrorMessageType ty, ErrorMessageList error);
    public static ErrorMessageList expected(string label);
    public static ErrorMessageList expectedString(string str);
    public static ErrorMessageList expectedStringCI(string str);
    public static ErrorMessageList unexpected(string label);
    public static ErrorMessageList unexpectedString(string str);
    public static ErrorMessageList unexpectedStringCI(string str);
    public static ErrorMessageList messageError(string msg);
    public static ErrorMessageList otherError(object obj);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static ErrorMessageList nestedError(CharStream`1<u> stream, ErrorMessageList error);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static ErrorMessageList compoundError(string label, CharStream`1<u> stream, ErrorMessageList error);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static ErrorMessageList mergeErrors(ErrorMessageList errorMessages1, ErrorMessageList errorMessages2);
    internal static void writeStringWithSimplifiedWhitespace@128(TextWriter tw, string s);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal static void printErrorPosition(int tabSize, LineWrapper lw, CharStream`1<u> stream, Position p);
    internal static FSharpFunc`2<a, FSharpFunc`2<Position, FSharpFunc`2<string, FSharpFunc`2<int, Unit>>>> positionPrinter@270-1(FSharpFunc`2<Position, CharStream`1<u>> getStream, int tabSize, LineWrapper lw);
    internal static void printArray@309(LineWrapper lw, string title, List`1<string> a, string sep);
    internal static void printMessages@283(LineWrapper lw, FSharpFunc`2<TextWriter, FSharpFunc`2<Position, FSharpFunc`2<string, FSharpFunc`2<int, Unit>>>> positionPrinter, string indentationIncrement, Position position, ErrorMessageList msgs);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal static a raiseInfiniteLoopException(string name, CharStream stream);
}
[CompilationRepresentationAttribute]
[CompilationMappingAttribute]
public static class FParsec.InternalsModule : object {
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static bool referenceEquals(a x, a y);
    public static bool isNull(a x);
    public static bool isNotNull(a x);
    public static bool isNullOrEmpty(string s);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static string concat3(string a, string b, string c);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static string concat4(string a, string b, string c, string d);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static string concat5(string a, string b, string c, string d, string e);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static string concat6(string a, string b, string c, string d, string e, string f);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static string concat7(string a, string b, string c, string d, string e, string f, string g);
    public static int findNewlineOrEOSChar(string arg00);
    public static a[] getSortedUniqueValues(IEnumerable`1<a> s);
    internal static bool isCombiningChar@219(string s);
    internal static bool isUnicodeNewlineOrEos@228(char c);
    internal static Tuple`2<int, int> clip@331(int space, int nBefore, int nAfter);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static LineSnippet getLineSnippet(CharStream`1<u> stream, Position p, int space, int tabSize, bool multiCharGraphemeSafe);
}
[AutoOpenAttribute]
[CompilationMappingAttribute]
public static class FParsec.Primitives : object {
    [LiteralAttribute]
[DebuggerBrowsableAttribute("0")]
public static ReplyStatus Ok;
    [LiteralAttribute]
[DebuggerBrowsableAttribute("0")]
public static ReplyStatus Error;
    [LiteralAttribute]
[DebuggerBrowsableAttribute("0")]
public static ReplyStatus FatalError;
    [CompilationMappingAttribute]
public static ParserCombinator parse { get; }
    private static Primitives();
    public static FSharpFunc`2<CharStream`1<u>, Reply`1<a>> preturn(a x);
    public static FSharpFunc`2<CharStream`1<u>, Reply`1<a>> pzero();
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpFunc`2<CharStream`1<u>, Reply`1<b>> op_GreaterGreaterEquals(FSharpFunc`2<CharStream`1<u>, Reply`1<a>> p, FSharpFunc`2<a, FSharpFunc`2<CharStream`1<u>, Reply`1<b>>> f);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpFunc`2<CharStream`1<u>, Reply`1<b>> op_GreaterGreaterPercent(FSharpFunc`2<CharStream`1<u>, Reply`1<a>> p, b x);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpFunc`2<CharStream`1<u>, Reply`1<b>> op_GreaterGreaterDot(FSharpFunc`2<CharStream`1<u>, Reply`1<a>> p, FSharpFunc`2<CharStream`1<u>, Reply`1<b>> q);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpFunc`2<CharStream`1<u>, Reply`1<a>> op_DotGreaterGreater(FSharpFunc`2<CharStream`1<u>, Reply`1<a>> p, FSharpFunc`2<CharStream`1<u>, Reply`1<b>> q);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpFunc`2<CharStream`1<u>, Reply`1<Tuple`2<a, b>>> op_DotGreaterGreaterDot(FSharpFunc`2<CharStream`1<u>, Reply`1<a>> p, FSharpFunc`2<CharStream`1<u>, Reply`1<b>> q);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpFunc`2<CharStream`1<u>, Reply`1<c>> between(FSharpFunc`2<CharStream`1<u>, Reply`1<a>> popen, FSharpFunc`2<CharStream`1<u>, Reply`1<b>> pclose, FSharpFunc`2<CharStream`1<u>, Reply`1<c>> p);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpFunc`2<CharStream`1<u>, Reply`1<b>> op_BarGreaterGreater(FSharpFunc`2<CharStream`1<u>, Reply`1<a>> p, FSharpFunc`2<a, b> f);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpFunc`2<CharStream`1<u>, Reply`1<c>> pipe2(FSharpFunc`2<CharStream`1<u>, Reply`1<a>> p1, FSharpFunc`2<CharStream`1<u>, Reply`1<b>> p2, FSharpFunc`2<a, FSharpFunc`2<b, c>> f);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpFunc`2<CharStream`1<u>, Reply`1<d>> pipe3(FSharpFunc`2<CharStream`1<u>, Reply`1<a>> p1, FSharpFunc`2<CharStream`1<u>, Reply`1<b>> p2, FSharpFunc`2<CharStream`1<u>, Reply`1<c>> p3, FSharpFunc`2<a, FSharpFunc`2<b, FSharpFunc`2<c, d>>> f);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpFunc`2<CharStream`1<u>, Reply`1<e>> pipe4(FSharpFunc`2<CharStream`1<u>, Reply`1<a>> p1, FSharpFunc`2<CharStream`1<u>, Reply`1<b>> p2, FSharpFunc`2<CharStream`1<u>, Reply`1<c>> p3, FSharpFunc`2<CharStream`1<u>, Reply`1<d>> p4, FSharpFunc`2<a, FSharpFunc`2<b, FSharpFunc`2<c, FSharpFunc`2<d, e>>>> f);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpFunc`2<CharStream`1<u>, Reply`1<f>> pipe5(FSharpFunc`2<CharStream`1<u>, Reply`1<a>> p1, FSharpFunc`2<CharStream`1<u>, Reply`1<b>> p2, FSharpFunc`2<CharStream`1<u>, Reply`1<c>> p3, FSharpFunc`2<CharStream`1<u>, Reply`1<d>> p4, FSharpFunc`2<CharStream`1<u>, Reply`1<e>> p5, FSharpFunc`2<a, FSharpFunc`2<b, FSharpFunc`2<c, FSharpFunc`2<d, FSharpFunc`2<e, f>>>>> f);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpFunc`2<CharStream`1<u>, Reply`1<a>> op_LessBarGreater(FSharpFunc`2<CharStream`1<u>, Reply`1<a>> p1, FSharpFunc`2<CharStream`1<u>, Reply`1<a>> p2);
    public static FSharpFunc`2<CharStream`1<u>, Reply`1<a>> choice(IEnumerable`1<FSharpFunc`2<CharStream`1<u>, Reply`1<a>>> ps);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpFunc`2<CharStream`1<u>, Reply`1<a>> choiceL(IEnumerable`1<FSharpFunc`2<CharStream`1<u>, Reply`1<a>>> ps, string label);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpFunc`2<CharStream`1<u>, Reply`1<a>> op_LessBarGreaterPercent(FSharpFunc`2<CharStream`1<u>, Reply`1<a>> p, a x);
    public static FSharpFunc`2<CharStream`1<u>, Reply`1<FSharpOption`1<a>>> opt(FSharpFunc`2<CharStream`1<u>, Reply`1<a>> p);
    public static FSharpFunc`2<CharStream`1<u>, Reply`1<Unit>> optional(FSharpFunc`2<CharStream`1<u>, Reply`1<a>> p);
    public static FSharpFunc`2<CharStream`1<u>, Reply`1<a>> attempt(FSharpFunc`2<CharStream`1<u>, Reply`1<a>> p);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpFunc`2<CharStream`1<u>, Reply`1<b>> op_GreaterGreaterEqualsQmark(FSharpFunc`2<CharStream`1<u>, Reply`1<a>> p, FSharpFunc`2<a, FSharpFunc`2<CharStream`1<u>, Reply`1<b>>> f);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpFunc`2<CharStream`1<u>, Reply`1<b>> op_GreaterGreaterQmark(FSharpFunc`2<CharStream`1<u>, Reply`1<a>> p, FSharpFunc`2<CharStream`1<u>, Reply`1<b>> q);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpFunc`2<CharStream`1<u>, Reply`1<Tuple`2<a, b>>> op_DotGreaterGreaterDotQmark(FSharpFunc`2<CharStream`1<u>, Reply`1<a>> p, FSharpFunc`2<CharStream`1<u>, Reply`1<b>> q);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpFunc`2<CharStream`1<u>, Reply`1<a>> op_DotGreaterGreaterQmark(FSharpFunc`2<CharStream`1<u>, Reply`1<a>> p, FSharpFunc`2<CharStream`1<u>, Reply`1<b>> q);
    public static FSharpFunc`2<CharStream`1<u>, Reply`1<a>> notEmpty(FSharpFunc`2<CharStream`1<u>, Reply`1<a>> p);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal static Reply`1<Unit> followedByE(FSharpFunc`2<CharStream`1<u>, Reply`1<a>> p, ErrorMessageList error, CharStream`1<u> stream);
    public static FSharpFunc`2<CharStream`1<u>, Reply`1<Unit>> followedBy(FSharpFunc`2<CharStream`1<u>, Reply`1<a>> p);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpFunc`2<CharStream`1<u>, Reply`1<Unit>> followedByL(FSharpFunc`2<CharStream`1<u>, Reply`1<a>> p, string label);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal static Reply`1<Unit> notFollowedByE(FSharpFunc`2<CharStream`1<u>, Reply`1<a>> p, ErrorMessageList error, CharStream`1<u> stream);
    public static FSharpFunc`2<CharStream`1<u>, Reply`1<Unit>> notFollowedBy(FSharpFunc`2<CharStream`1<u>, Reply`1<a>> p);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpFunc`2<CharStream`1<u>, Reply`1<Unit>> notFollowedByL(FSharpFunc`2<CharStream`1<u>, Reply`1<a>> p, string label);
    public static FSharpFunc`2<CharStream`1<u>, Reply`1<a>> lookAhead(FSharpFunc`2<CharStream`1<u>, Reply`1<a>> p);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpFunc`2<CharStream`1<u>, Reply`1<a>> op_LessQmarkGreater(FSharpFunc`2<CharStream`1<u>, Reply`1<a>> p, string label);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpFunc`2<CharStream`1<u>, Reply`1<a>> op_LessQmarkQmarkGreater(FSharpFunc`2<CharStream`1<u>, Reply`1<a>> p, string label);
    public static FSharpFunc`2<CharStream`1<u>, Reply`1<a>> fail(string msg);
    public static FSharpFunc`2<CharStream`1<u>, Reply`1<a>> failFatally(string msg);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpFunc`2<CharStream`1<u>, Reply`1<Tuple`2<a, b>>> tuple2(FSharpFunc`2<CharStream`1<u>, Reply`1<a>> p1, FSharpFunc`2<CharStream`1<u>, Reply`1<b>> p2);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpFunc`2<CharStream`1<u>, Reply`1<Tuple`3<a, b, c>>> tuple3(FSharpFunc`2<CharStream`1<u>, Reply`1<a>> p1, FSharpFunc`2<CharStream`1<u>, Reply`1<b>> p2, FSharpFunc`2<CharStream`1<u>, Reply`1<c>> p3);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpFunc`2<CharStream`1<u>, Reply`1<Tuple`4<a, b, c, d>>> tuple4(FSharpFunc`2<CharStream`1<u>, Reply`1<a>> p1, FSharpFunc`2<CharStream`1<u>, Reply`1<b>> p2, FSharpFunc`2<CharStream`1<u>, Reply`1<c>> p3, FSharpFunc`2<CharStream`1<u>, Reply`1<d>> p4);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpFunc`2<CharStream`1<u>, Reply`1<Tuple`5<a, b, c, d, e>>> tuple5(FSharpFunc`2<CharStream`1<u>, Reply`1<a>> p1, FSharpFunc`2<CharStream`1<u>, Reply`1<b>> p2, FSharpFunc`2<CharStream`1<u>, Reply`1<c>> p3, FSharpFunc`2<CharStream`1<u>, Reply`1<d>> p4, FSharpFunc`2<CharStream`1<u>, Reply`1<e>> p5);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpFunc`2<CharStream`1<u>, Reply`1<a[]>> parray(int n, FSharpFunc`2<CharStream`1<u>, Reply`1<a>> p);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpFunc`2<CharStream`1<u>, Reply`1<Unit>> skipArray(int n, FSharpFunc`2<CharStream`1<u>, Reply`1<a>> p);
    public static FSharpFunc`2<CharStream`1<u>, Reply`1<FSharpList`1<a>>> many(FSharpFunc`2<CharStream`1<u>, Reply`1<a>> p);
    public static FSharpFunc`2<CharStream`1<u>, Reply`1<FSharpList`1<a>>> many1(FSharpFunc`2<CharStream`1<u>, Reply`1<a>> p);
    public static FSharpFunc`2<CharStream`1<u>, Reply`1<Unit>> skipMany(FSharpFunc`2<CharStream`1<u>, Reply`1<a>> p);
    public static FSharpFunc`2<CharStream`1<u>, Reply`1<Unit>> skipMany1(FSharpFunc`2<CharStream`1<u>, Reply`1<a>> p);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpFunc`2<CharStream`1<u>, Reply`1<FSharpList`1<a>>> sepBy(FSharpFunc`2<CharStream`1<u>, Reply`1<a>> p, FSharpFunc`2<CharStream`1<u>, Reply`1<b>> sep);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpFunc`2<CharStream`1<u>, Reply`1<FSharpList`1<a>>> sepBy1(FSharpFunc`2<CharStream`1<u>, Reply`1<a>> p, FSharpFunc`2<CharStream`1<u>, Reply`1<b>> sep);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpFunc`2<CharStream`1<u>, Reply`1<Unit>> skipSepBy(FSharpFunc`2<CharStream`1<u>, Reply`1<a>> p, FSharpFunc`2<CharStream`1<u>, Reply`1<b>> sep);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpFunc`2<CharStream`1<u>, Reply`1<Unit>> skipSepBy1(FSharpFunc`2<CharStream`1<u>, Reply`1<a>> p, FSharpFunc`2<CharStream`1<u>, Reply`1<b>> sep);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpFunc`2<CharStream`1<u>, Reply`1<FSharpList`1<a>>> sepEndBy(FSharpFunc`2<CharStream`1<u>, Reply`1<a>> p, FSharpFunc`2<CharStream`1<u>, Reply`1<b>> sep);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpFunc`2<CharStream`1<u>, Reply`1<FSharpList`1<a>>> sepEndBy1(FSharpFunc`2<CharStream`1<u>, Reply`1<a>> p, FSharpFunc`2<CharStream`1<u>, Reply`1<b>> sep);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpFunc`2<CharStream`1<u>, Reply`1<Unit>> skipSepEndBy(FSharpFunc`2<CharStream`1<u>, Reply`1<a>> p, FSharpFunc`2<CharStream`1<u>, Reply`1<b>> sep);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpFunc`2<CharStream`1<u>, Reply`1<Unit>> skipSepEndBy1(FSharpFunc`2<CharStream`1<u>, Reply`1<a>> p, FSharpFunc`2<CharStream`1<u>, Reply`1<b>> sep);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpFunc`2<CharStream`1<u>, Reply`1<FSharpList`1<a>>> manyTill(FSharpFunc`2<CharStream`1<u>, Reply`1<a>> p, FSharpFunc`2<CharStream`1<u>, Reply`1<b>> endp);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpFunc`2<CharStream`1<u>, Reply`1<FSharpList`1<a>>> many1Till(FSharpFunc`2<CharStream`1<u>, Reply`1<a>> p, FSharpFunc`2<CharStream`1<u>, Reply`1<b>> endp);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpFunc`2<CharStream`1<u>, Reply`1<Unit>> skipManyTill(FSharpFunc`2<CharStream`1<u>, Reply`1<a>> p, FSharpFunc`2<CharStream`1<u>, Reply`1<b>> endp);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpFunc`2<CharStream`1<u>, Reply`1<Unit>> skipMany1Till(FSharpFunc`2<CharStream`1<u>, Reply`1<a>> p, FSharpFunc`2<CharStream`1<u>, Reply`1<b>> endp);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpFunc`2<CharStream`1<u>, Reply`1<a>> chainl1(FSharpFunc`2<CharStream`1<u>, Reply`1<a>> p, FSharpFunc`2<CharStream`1<u>, Reply`1<FSharpFunc`2<a, FSharpFunc`2<a, a>>>> op);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpFunc`2<CharStream`1<u>, Reply`1<a>> chainl(FSharpFunc`2<CharStream`1<u>, Reply`1<a>> p, FSharpFunc`2<CharStream`1<u>, Reply`1<FSharpFunc`2<a, FSharpFunc`2<a, a>>>> op, a x);
    internal static c calc@907(FSharpFunc`2<b, FSharpFunc`2<c, c>> op, c y, FSharpList`1<Tuple`2<FSharpFunc`2<b, FSharpFunc`2<c, c>>, b>> lst);
    [CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
internal static a resultFromState@722(FSharpList`1<Tuple`2<FSharpFunc`2<a, FSharpFunc`2<a, a>>, a>> _arg1);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpFunc`2<CharStream`1<u>, Reply`1<a>> chainr1(FSharpFunc`2<CharStream`1<u>, Reply`1<a>> p, FSharpFunc`2<CharStream`1<u>, Reply`1<FSharpFunc`2<a, FSharpFunc`2<a, a>>>> op);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpFunc`2<CharStream`1<u>, Reply`1<a>> chainr(FSharpFunc`2<CharStream`1<u>, Reply`1<a>> p, FSharpFunc`2<CharStream`1<u>, Reply`1<FSharpFunc`2<a, FSharpFunc`2<a, a>>>> op, a x);
    public static ParserCombinator get_parse();
    internal static FSharpFunc`2<b, c> dummyParser@945();
    public static Tuple`2<FSharpFunc`2<CharStream`1<u>, Reply`1<a>>, FSharpRef`1<FSharpFunc`2<CharStream`1<u>, Reply`1<a>>>> createParserForwardedToRef();
}
[CompilationMappingAttribute]
public static class FParsec.StaticMapping : object {
}
