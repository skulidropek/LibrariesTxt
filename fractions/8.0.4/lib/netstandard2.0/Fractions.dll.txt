[ExtensionAttribute]
public static class Fractions.Extensions.MathExt : object {
    [ExtensionAttribute]
public static bool IsEven(long number);
    [ExtensionAttribute]
public static bool IsOdd(long number);
    public static long GreatestCommonDivisor(long a, long b);
    private static long BinaryGreatestCommonDivisorAlgorithm(long a, long b);
    public static long LeastCommonMultiple(long a, long b);
    public static bool RemainingDigitsAfterTheDecimalPoint(double remainingDigits);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Fractions.Formatter.DecimalNotationFormatter : object {
    private static MidpointRounding DefaultMidpointRoundingMode;
    public static int DefaultGeneralFormatPrecision;
    public static int DefaultScientificFormatPrecision;
    [CompilerGeneratedAttribute]
private static DecimalNotationFormatter <Instance>k__BackingField;
    private static BigInteger Ten;
    public static DecimalNotationFormatter Instance { get; }
    private static DecimalNotationFormatter();
    [CompilerGeneratedAttribute]
public static DecimalNotationFormatter get_Instance();
    [NullableContextAttribute("2")]
public sealed virtual string Format(string format, object value, IFormatProvider formatProvider);
    private static int GetPrecisionDigitsOrDefault(string format, int defaultValue);
    private static int GetPrecisionDigits(string format);
    private static string FormatWithFixedPointFormat(Fraction fraction, string format, NumberFormatInfo formatProvider);
    private static string FormatWithStandardNumericFormat(Fraction fraction, string format, NumberFormatInfo formatProvider);
    private static string FormatWithPercentFormat(Fraction fraction, string format, NumberFormatInfo formatProvider);
    private static string FormatWithCurrencyFormat(Fraction fraction, string format, NumberFormatInfo formatProvider);
    private static string FormatWithScientificFormat(Fraction fraction, string format, NumberFormatInfo formatProvider);
    private static string FormatGeneral(Fraction fraction, string format, NumberFormatInfo formatProvider);
    private static string FormatWithSignificantDigitsAfterRadix(Fraction fraction, string format, NumberFormatInfo formatProvider);
    private static StringBuilder AppendDecimals(StringBuilder sb, Fraction fraction, NumberFormatInfo formatProvider, int nbDecimals, string quotientFormat, MidpointRounding roundingMode);
    private static StringBuilder AppendSignificantDecimals(StringBuilder sb, Fraction mantissa, NumberFormatInfo formatProvider, int maxNbDecimals, string quotientFormat);
    private static StringBuilder AppendExponentWithSignificantDigits(StringBuilder sb, int exponent, NumberFormatInfo formatProvider, char exponentSymbol);
    private static Fraction Round(Fraction x, int nbDigits, MidpointRounding midpointRounding);
    private static BigInteger Round(BigInteger numerator, BigInteger denominator, MidpointRounding midpointRounding);
    private static int GetExponentPower(Fraction fraction, BigInteger& powerOfTen);
    private static int CountDigits(BigInteger value, BigInteger& powerOfTen);
    [CompilerGeneratedAttribute]
internal static string <FormatWithStandardNumericFormat>g__withNegativeSign|11_0(StringBuilder sb, string negativeSignSymbol, int pattern);
    [CompilerGeneratedAttribute]
internal static string <FormatWithPercentFormat>g__withPositiveSign|12_0(StringBuilder sb, string percentSymbol, int pattern);
    [CompilerGeneratedAttribute]
internal static string <FormatWithPercentFormat>g__withNegativeSign|12_1(StringBuilder sb, string percentSymbol, string negativeSignSymbol, int pattern);
    [CompilerGeneratedAttribute]
internal static string <FormatWithCurrencyFormat>g__withPositiveSign|13_0(StringBuilder sb, string currencySymbol, int pattern);
    [CompilerGeneratedAttribute]
internal static string <FormatWithCurrencyFormat>g__withNegativeSign|13_1(StringBuilder sb, string currencySymbol, string negativeSignSymbol, int pattern);
    [CompilerGeneratedAttribute]
internal static string <FormatWithScientificFormat>g__withAppendedExponent|14_0(StringBuilder sb, int exponent, NumberFormatInfo numberFormat, char exponentSymbol);
}
public class Fractions.Formatter.DefaultFractionFormatProvider : object {
    public static IFormatProvider Instance;
    private static DefaultFractionFormatProvider();
    private sealed virtual override object System.IFormatProvider.GetFormat(Type formatType);
}
internal class Fractions.Formatter.DefaultFractionFormatter : object {
    [CompilerGeneratedAttribute]
private static ICustomFormatter <Instance>k__BackingField;
    public static ICustomFormatter Instance { get; }
    private static DefaultFractionFormatter();
    [CompilerGeneratedAttribute]
public static ICustomFormatter get_Instance();
    public sealed virtual string Format(string format, object arg, IFormatProvider formatProvider);
    private static string FormatMixed(Fraction fraction, IFormatProvider formatProvider);
    private static string FormatInteger(Fraction fraction, IFormatProvider formatProvider);
    private static string FormatRemainder(Fraction fraction, IFormatProvider formatProvider);
    private static string FormatGeneral(Fraction fraction, IFormatProvider formatProvider);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
[TypeConverterAttribute("Fractions.TypeConverters.FractionTypeConverter")]
[DebuggerTypeProxyAttribute("Fractions.Fraction/FractionDebugView")]
public class Fractions.Fraction : ValueType {
    private static BigInteger MIN_DECIMAL;
    private static BigInteger MAX_DECIMAL;
    private static BigInteger TEN;
    private Nullable`1<BigInteger> _denominator;
    private bool _normalizationNotApplied;
    [CompilerGeneratedAttribute]
private static Fraction <PositiveInfinity>k__BackingField;
    [CompilerGeneratedAttribute]
private static Fraction <NegativeInfinity>k__BackingField;
    [CompilerGeneratedAttribute]
private static Fraction <NaN>k__BackingField;
    [CompilerGeneratedAttribute]
private static Fraction <Zero>k__BackingField;
    [CompilerGeneratedAttribute]
private static Fraction <One>k__BackingField;
    [CompilerGeneratedAttribute]
private static Fraction <Two>k__BackingField;
    [CompilerGeneratedAttribute]
private static Fraction <MinusOne>k__BackingField;
    [CompilerGeneratedAttribute]
private BigInteger <Numerator>k__BackingField;
    public static Fraction PositiveInfinity { get; }
    public static Fraction NegativeInfinity { get; }
    public static Fraction NaN { get; }
    public static Fraction Zero { get; }
    public static Fraction One { get; }
    public static Fraction Two { get; }
    public static Fraction MinusOne { get; }
    public BigInteger Numerator { get; }
    public BigInteger Denominator { get; }
    public bool IsNaN { get; }
    public bool IsInfinity { get; }
    public bool IsPositiveInfinity { get; }
    public bool IsNegativeInfinity { get; }
    public bool IsPositive { get; }
    public bool IsNegative { get; }
    public bool IsZero { get; }
    public FractionState State { get; }
    private Fraction(bool normalizationNotApplied, BigInteger numerator, BigInteger denominator);
    public Fraction(BigInteger numerator, BigInteger denominator);
    public Fraction(BigInteger numerator, BigInteger denominator, bool normalize);
    public Fraction(int numerator);
    public Fraction(long numerator);
    [CLSCompliantAttribute("False")]
public Fraction(UInt32 numerator);
    [CLSCompliantAttribute("False")]
public Fraction(ulong numerator);
    public Fraction(BigInteger numerator);
    public Fraction(double value);
    public Fraction(decimal value);
    private static Fraction();
    [NullableContextAttribute("0")]
public sealed virtual int CompareTo(object other);
    public sealed virtual int CompareTo(Fraction other);
    public static Fraction FromDecimal(decimal value);
    public static Fraction FromDecimal(decimal value, bool reduceTerms);
    public static Fraction FromDouble(double value);
    public static Fraction FromDouble(double value, bool reduceTerms);
    public static Fraction FromDoubleRounded(double value);
    public static Fraction FromDoubleRounded(double value, bool reduceTerms);
    public static Fraction FromDoubleRounded(double value, int significantDigits);
    public static Fraction FromDoubleRounded(double value, int significantDigits, bool reduceTerms);
    public static Fraction FromString(string fractionString);
    public static Fraction FromString(string fractionString, bool normalize);
    public static Fraction FromString(string fractionString, IFormatProvider formatProvider);
    public static Fraction FromString(string fractionString, NumberStyles numberStyles, IFormatProvider formatProvider);
    public static Fraction FromString(string fractionString, IFormatProvider formatProvider, bool normalize);
    public static Fraction FromString(string fractionString, NumberStyles numberStyles, IFormatProvider formatProvider, bool normalize);
    public int ToInt32();
    public long ToInt64();
    [CLSCompliantAttribute("False")]
public UInt32 ToUInt32();
    [CLSCompliantAttribute("False")]
public ulong ToUInt64();
    public BigInteger ToBigInteger();
    public decimal ToDecimal();
    public double ToDouble();
    [CompilerGeneratedAttribute]
public static Fraction get_PositiveInfinity();
    [CompilerGeneratedAttribute]
public static Fraction get_NegativeInfinity();
    [CompilerGeneratedAttribute]
public static Fraction get_NaN();
    [CompilerGeneratedAttribute]
public static Fraction get_Zero();
    [CompilerGeneratedAttribute]
public static Fraction get_One();
    [CompilerGeneratedAttribute]
public static Fraction get_Two();
    [CompilerGeneratedAttribute]
public static Fraction get_MinusOne();
    [CompilerGeneratedAttribute]
public BigInteger get_Numerator();
    public BigInteger get_Denominator();
    public bool get_IsNaN();
    public bool get_IsInfinity();
    public bool get_IsPositiveInfinity();
    public bool get_IsNegativeInfinity();
    public bool get_IsPositive();
    public bool get_IsNegative();
    public bool get_IsZero();
    public FractionState get_State();
    [ObsoleteAttribute("As of version 8.0.0, the equality of values is checked when Fraction.Equals(..) is called. Please use the .Equals(..) method.", "False")]
public bool IsEquivalentTo(Fraction other);
    public sealed virtual bool Equals(Fraction other);
    [NullableContextAttribute("0")]
public virtual bool Equals(object other);
    public virtual int GetHashCode();
    public Fraction Remainder(Fraction divisor);
    public Fraction Add(Fraction summand);
    public Fraction Subtract(Fraction subtrahend);
    public Fraction Negate();
    [ObsoleteAttribute("The 'Invert' method is obsolete. Please use the the 'Negate' method or the negation operator '-value'.", "False")]
public Fraction Invert();
    public Fraction Multiply(Fraction factor);
    public Fraction Divide(Fraction divisor);
    public Fraction Reduce();
    public Fraction Abs();
    public static Fraction Abs(Fraction fraction);
    public static Fraction GetReducedFraction(BigInteger numerator, BigInteger denominator);
    private static Fraction ReduceSigned(BigInteger numerator, BigInteger denominator);
    public static Fraction Pow(Fraction base, int exponent);
    public Fraction Reciprocal();
    public static Fraction Reciprocal(Fraction fraction);
    internal static BigInteger MultiplyTerms(BigInteger& a, BigInteger& b);
    public static bool op_Equality(Fraction left, Fraction right);
    public static bool op_Inequality(Fraction left, Fraction right);
    public static Fraction op_Addition(Fraction a, Fraction b);
    public static Fraction op_Subtraction(Fraction a, Fraction b);
    public static Fraction op_UnaryNegation(Fraction a);
    public static Fraction op_Multiply(Fraction a, Fraction b);
    public static Fraction op_Division(Fraction a, Fraction b);
    public static Fraction op_Modulus(Fraction a, Fraction b);
    public static bool op_LessThan(Fraction a, Fraction b);
    public static bool op_GreaterThan(Fraction a, Fraction b);
    public static bool op_LessThanOrEqual(Fraction a, Fraction b);
    public static bool op_GreaterThanOrEqual(Fraction a, Fraction b);
    public static Fraction op_Implicit(int value);
    public static Fraction op_Implicit(long value);
    [CLSCompliantAttribute("False")]
public static Fraction op_Implicit(UInt32 value);
    [CLSCompliantAttribute("False")]
public static Fraction op_Implicit(ulong value);
    public static Fraction op_Implicit(BigInteger value);
    public static Fraction op_Explicit(double value);
    public static Fraction op_Implicit(decimal value);
    [NullableContextAttribute("0")]
public static Fraction op_Explicit(string value);
    public static int op_Explicit(Fraction fraction);
    public static long op_Explicit(Fraction fraction);
    [CLSCompliantAttribute("False")]
public static UInt32 op_Explicit(Fraction fraction);
    [CLSCompliantAttribute("False")]
public static ulong op_Explicit(Fraction fraction);
    public static decimal op_Explicit(Fraction fraction);
    public static double op_Explicit(Fraction fraction);
    public static BigInteger op_Explicit(Fraction fraction);
    public static Fraction Round(Fraction fraction, int decimals);
    public static Fraction Round(Fraction fraction, int decimals, MidpointRounding mode);
    public static BigInteger RoundToBigInteger(Fraction fraction);
    public static BigInteger RoundToBigInteger(Fraction fraction, MidpointRounding mode);
    private static BigInteger RoundToBigInteger(BigInteger numerator, BigInteger denominator, MidpointRounding mode);
    public virtual string ToString();
    public string ToString(IFormatProvider formatProvider);
    public string ToString(string format);
    [NullableContextAttribute("2")]
public sealed virtual string ToString(string format, IFormatProvider formatProvider);
    [NullableContextAttribute("2")]
public static bool TryParse(string value, Fraction& fraction);
    [NullableContextAttribute("2")]
public static bool TryParse(string value, NumberStyles numberStyles, IFormatProvider formatProvider, Fraction& fraction);
    [NullableContextAttribute("2")]
public static bool TryParse(string value, NumberStyles numberStyles, IFormatProvider formatProvider, bool normalize, Fraction& fraction);
    private static bool TryParseWithExponent(string valueString, NumberStyles parseNumberStyles, NumberFormatInfo numberFormatInfo, int startIndex, int endIndex, bool isNegative, bool reduceTerms, Fraction& fraction);
    private static bool TryParseDecimalNumber(string valueString, NumberStyles parseNumberStyles, NumberFormatInfo numberFormatInfo, int startIndex, int endIndex, bool isNegative, bool reduceTerms, Fraction& fraction);
    private static bool TryParseInteger(string valueString, NumberStyles parseNumberStyles, IFormatProvider formatProvider, int startIndex, int endIndex, bool isNegative, Fraction& fraction);
    private static bool CannotParse(Fraction& fraction);
    [CompilerGeneratedAttribute]
internal static int <CompareTo>g__comparePositiveTerms|1_0(BigInteger numerator1, BigInteger denominator1, BigInteger numerator2, BigInteger denominator2);
    [CompilerGeneratedAttribute]
internal static int <CompareTo>g__compareNegativeTerms|1_1(BigInteger numerator1, BigInteger denominator1, BigInteger numerator2, BigInteger denominator2);
    [CompilerGeneratedAttribute]
internal static BigInteger <RoundToBigInteger>g__roundAwayFromZero|132_0(BigInteger numerator, BigInteger denominator);
    [CompilerGeneratedAttribute]
internal static BigInteger <RoundToBigInteger>g__roundToEven|132_1(BigInteger numerator, BigInteger denominator);
    [CompilerGeneratedAttribute]
internal static bool <TryParse>g__startsWith|139_0(string fractionString, string testString, int startIndex);
    [CompilerGeneratedAttribute]
internal static bool <TryParse>g__endsWith|139_1(string fractionString, string testString, int endIndex);
}
public abstract class Fractions.FractionComparer : object {
    [CompilerGeneratedAttribute]
private static FractionComparer <ValueEquality>k__BackingField;
    [CompilerGeneratedAttribute]
private static FractionComparer <StrictEquality>k__BackingField;
    public static FractionComparer ValueEquality { get; }
    public static FractionComparer StrictEquality { get; }
    private static FractionComparer();
    [CompilerGeneratedAttribute]
public static FractionComparer get_ValueEquality();
    [CompilerGeneratedAttribute]
public static FractionComparer get_StrictEquality();
    public abstract virtual bool Equals(Fraction x, Fraction y);
    public abstract virtual int GetHashCode(Fraction obj);
    public bool Equals(object x, object y);
    private sealed virtual override bool System.Collections.IEqualityComparer.Equals(object x, object y);
    public int GetHashCode(object obj);
    private sealed virtual override int System.Collections.IEqualityComparer.GetHashCode(object obj);
}
[ExtensionAttribute]
public static class Fractions.FractionExt : object {
    [ExtensionAttribute]
public static Fraction Sqrt(Fraction x, int accuracy);
}
public enum Fractions.FractionState : Enum {
    public int value__;
    public static FractionState Unknown;
    public static FractionState IsNormalized;
}
public class Fractions.FractionStrictEqualityComparer : FractionComparer {
    public virtual bool Equals(Fraction x, Fraction y);
    public virtual int GetHashCode(Fraction obj);
}
public class Fractions.FractionValueEqualityComparer : FractionComparer {
    public virtual bool Equals(Fraction x, Fraction y);
    public virtual int GetHashCode(Fraction obj);
    private static void Swap(BigInteger& a, BigInteger& b);
}
[ObsoleteAttribute("The data type now supports NaN and Infinity, so this exception type is no longer needed.", "False")]
public class Fractions.InvalidNumberException : ArithmeticException {
    public InvalidNumberException(string message);
    public InvalidNumberException(string message, Exception innerException);
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Fractions.Properties.Resources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string AccuracyIsLessThanOrEqualToZero { get; }
    internal static string CannotConvertToFraction { get; }
    internal static string CompareToArgumentException { get; }
    internal static string SignificantDigitsOutOfRange { get; }
    internal static string TypeXnotSupported { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_AccuracyIsLessThanOrEqualToZero();
    internal static string get_CannotConvertToFraction();
    internal static string get_CompareToArgumentException();
    internal static string get_SignificantDigitsOutOfRange();
    internal static string get_TypeXnotSupported();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Fractions.TypeConverters.FractionTypeConverter : TypeConverter {
    [NullableAttribute("1")]
private static HashSet`1<Type> SupportedTypes;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static Dictionary`2<Type, Func`3<object, CultureInfo, object>> ConvertToDictionary;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static Dictionary`2<Type, Func`3<object, CultureInfo, Fraction>> ConvertFromDictionary;
    private static FractionTypeConverter();
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    [NullableContextAttribute("1")]
public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.IsReadOnlyAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.RequiresLocationAttribute : Attribute {
}
