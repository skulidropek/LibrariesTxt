[ExtensionAttribute]
public static class FreeSql.AdoNetExtensions : object {
    private static Dictionary`2<string, IFreeSql> _dicCurd;
    private static object _dicCurdLock;
    private static AdoNetExtensions();
    private static IFreeSql GetCrud(IDbConnection dbconn);
    private static IFreeSql GetCrud(IDbTransaction dbtran);
    [ExtensionAttribute]
public static IFreeSql GetIFreeSql(IDbConnection that);
    [ExtensionAttribute]
public static IInsert`1<T1> Insert(IDbConnection that);
    [ExtensionAttribute]
public static IInsert`1<T1> Insert(IDbConnection that, T1 source);
    [ExtensionAttribute]
public static IInsert`1<T1> Insert(IDbConnection that, T1[] source);
    [ExtensionAttribute]
public static IInsert`1<T1> Insert(IDbConnection that, List`1<T1> source);
    [ExtensionAttribute]
public static IInsert`1<T1> Insert(IDbConnection that, IEnumerable`1<T1> source);
    [ExtensionAttribute]
public static IInsertOrUpdate`1<T1> InsertOrUpdate(IDbConnection that);
    [ExtensionAttribute]
public static IUpdate`1<T1> Update(IDbConnection that);
    [ExtensionAttribute]
public static IUpdate`1<T1> Update(IDbConnection that, object dywhere);
    [ExtensionAttribute]
public static ISelect`1<T1> Select(IDbConnection that);
    [ExtensionAttribute]
public static ISelect`1<T1> Select(IDbConnection that, object dywhere);
    [ExtensionAttribute]
public static IDelete`1<T1> Delete(IDbConnection that);
    [ExtensionAttribute]
public static IDelete`1<T1> Delete(IDbConnection that, object dywhere);
    [ExtensionAttribute]
public static ISelect`2<T1, T2> Select(IDbConnection that);
    [ExtensionAttribute]
public static ISelect`3<T1, T2, T3> Select(IDbConnection that);
    [ExtensionAttribute]
public static ISelect`4<T1, T2, T3, T4> Select(IDbConnection that);
    [ExtensionAttribute]
public static ISelect`5<T1, T2, T3, T4, T5> Select(IDbConnection that);
    [ExtensionAttribute]
public static ISelect`6<T1, T2, T3, T4, T5, T6> Select(IDbConnection that);
    [ExtensionAttribute]
public static ISelect`7<T1, T2, T3, T4, T5, T6, T7> Select(IDbConnection that);
    [ExtensionAttribute]
public static ISelect`8<T1, T2, T3, T4, T5, T6, T7, T8> Select(IDbConnection that);
    [ExtensionAttribute]
public static ISelect`9<T1, T2, T3, T4, T5, T6, T7, T8, T9> Select(IDbConnection that);
    [ExtensionAttribute]
public static ISelect`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> Select(IDbConnection that);
    [ExtensionAttribute]
public static IInsert`1<T1> Insert(IDbTransaction that);
    [ExtensionAttribute]
public static IInsert`1<T1> Insert(IDbTransaction that, T1 source);
    [ExtensionAttribute]
public static IInsert`1<T1> Insert(IDbTransaction that, T1[] source);
    [ExtensionAttribute]
public static IInsert`1<T1> Insert(IDbTransaction that, List`1<T1> source);
    [ExtensionAttribute]
public static IInsert`1<T1> Insert(IDbTransaction that, IEnumerable`1<T1> source);
    [ExtensionAttribute]
public static IInsertOrUpdate`1<T1> InsertOrUpdate(IDbTransaction that);
    [ExtensionAttribute]
public static IUpdate`1<T1> Update(IDbTransaction that);
    [ExtensionAttribute]
public static IUpdate`1<T1> Update(IDbTransaction that, object dywhere);
    [ExtensionAttribute]
public static ISelect`1<T1> Select(IDbTransaction that);
    [ExtensionAttribute]
public static ISelect`1<T1> Select(IDbTransaction that, object dywhere);
    [ExtensionAttribute]
public static IDelete`1<T1> Delete(IDbTransaction that);
    [ExtensionAttribute]
public static IDelete`1<T1> Delete(IDbTransaction that, object dywhere);
    [ExtensionAttribute]
public static ISelect`2<T1, T2> Select(IDbTransaction that);
    [ExtensionAttribute]
public static ISelect`3<T1, T2, T3> Select(IDbTransaction that);
    [ExtensionAttribute]
public static ISelect`4<T1, T2, T3, T4> Select(IDbTransaction that);
    [ExtensionAttribute]
public static ISelect`5<T1, T2, T3, T4, T5> Select(IDbTransaction that);
    [ExtensionAttribute]
public static ISelect`6<T1, T2, T3, T4, T5, T6> Select(IDbTransaction that);
    [ExtensionAttribute]
public static ISelect`7<T1, T2, T3, T4, T5, T6, T7> Select(IDbTransaction that);
    [ExtensionAttribute]
public static ISelect`8<T1, T2, T3, T4, T5, T6, T7, T8> Select(IDbTransaction that);
    [ExtensionAttribute]
public static ISelect`9<T1, T2, T3, T4, T5, T6, T7, T8, T9> Select(IDbTransaction that);
    [ExtensionAttribute]
public static ISelect`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> Select(IDbTransaction that);
}
public class FreeSql.Aop.AuditDataReaderEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private DbDataReader <DataReader>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <Index>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private PropertyInfo <Property>k__BackingField;
    private object _value;
    internal bool _valueIsGeted;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <ValueIsChanged>k__BackingField;
    public DbDataReader DataReader { get; }
    public int Index { get; }
    public PropertyInfo Property { get; }
    public object Value { get; public set; }
    public bool ValueIsChanged { get; private set; }
    public AuditDataReaderEventArgs(DbDataReader dataReader, int index, PropertyInfo property);
    [CompilerGeneratedAttribute]
public DbDataReader get_DataReader();
    [CompilerGeneratedAttribute]
public int get_Index();
    [CompilerGeneratedAttribute]
public PropertyInfo get_Property();
    public object get_Value();
    public void set_Value(object value);
    [CompilerGeneratedAttribute]
public bool get_ValueIsChanged();
    [CompilerGeneratedAttribute]
private void set_ValueIsChanged(bool value);
}
public class FreeSql.Aop.AuditValueEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private AuditValueType <AuditValueType>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ColumnInfo <Column>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private PropertyInfo <Property>k__BackingField;
    private object _value;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <ValueIsChanged>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private object <Object>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <ObjectAuditBreak>k__BackingField;
    public AuditValueType AuditValueType { get; }
    public ColumnInfo Column { get; }
    public PropertyInfo Property { get; }
    public object Value { get; public set; }
    public bool ValueIsChanged { get; private set; }
    public object Object { get; }
    public bool ObjectAuditBreak { get; public set; }
    public AuditValueEventArgs(AuditValueType auditValueType, ColumnInfo column, PropertyInfo property, object value, object obj);
    [CompilerGeneratedAttribute]
public AuditValueType get_AuditValueType();
    [CompilerGeneratedAttribute]
public ColumnInfo get_Column();
    [CompilerGeneratedAttribute]
public PropertyInfo get_Property();
    public object get_Value();
    public void set_Value(object value);
    [CompilerGeneratedAttribute]
public bool get_ValueIsChanged();
    [CompilerGeneratedAttribute]
private void set_ValueIsChanged(bool value);
    [CompilerGeneratedAttribute]
public object get_Object();
    [CompilerGeneratedAttribute]
public bool get_ObjectAuditBreak();
    [CompilerGeneratedAttribute]
public void set_ObjectAuditBreak(bool value);
}
public enum FreeSql.Aop.AuditValueType : Enum {
    public int value__;
    public static AuditValueType Update;
    public static AuditValueType Insert;
    public static AuditValueType InsertOrUpdate;
}
public class FreeSql.Aop.CommandAfterEventArgs : CommandBeforeEventArgs {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Exception <Exception>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Log>k__BackingField;
    public Exception Exception { get; }
    public string Log { get; }
    public long ElapsedTicks { get; }
    public long ElapsedMilliseconds { get; }
    public CommandAfterEventArgs(CommandBeforeEventArgs before, Exception exception, string log);
    [CompilerGeneratedAttribute]
public Exception get_Exception();
    [CompilerGeneratedAttribute]
public string get_Log();
    public long get_ElapsedTicks();
    public long get_ElapsedMilliseconds();
}
public class FreeSql.Aop.CommandBeforeEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Guid <Identifier>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Stopwatch <Stopwatch>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private DbCommand <Command>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Dictionary`2<string, object> <States>k__BackingField;
    public Guid Identifier { get; protected set; }
    protected Stopwatch Stopwatch { get; }
    internal Stopwatch StopwatchInternal { get; }
    public DbCommand Command { get; }
    public Dictionary`2<string, object> States { get; protected set; }
    public CommandBeforeEventArgs(DbCommand command);
    protected CommandBeforeEventArgs(Guid identifier, Stopwatch stopwatch, DbCommand command, Dictionary`2<string, object> states);
    [CompilerGeneratedAttribute]
public Guid get_Identifier();
    [CompilerGeneratedAttribute]
protected void set_Identifier(Guid value);
    [CompilerGeneratedAttribute]
protected Stopwatch get_Stopwatch();
    internal Stopwatch get_StopwatchInternal();
    [CompilerGeneratedAttribute]
public DbCommand get_Command();
    [CompilerGeneratedAttribute]
public Dictionary`2<string, object> get_States();
    [CompilerGeneratedAttribute]
protected void set_States(Dictionary`2<string, object> value);
}
public class FreeSql.Aop.ConfigEntityEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Type <EntityType>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private TableAttribute <ModifyResult>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private List`1<IndexAttribute> <ModifyIndexResult>k__BackingField;
    public Type EntityType { get; }
    public TableAttribute ModifyResult { get; internal set; }
    public List`1<IndexAttribute> ModifyIndexResult { get; }
    public ConfigEntityEventArgs(Type entityType);
    [CompilerGeneratedAttribute]
public Type get_EntityType();
    [CompilerGeneratedAttribute]
public TableAttribute get_ModifyResult();
    [CompilerGeneratedAttribute]
internal void set_ModifyResult(TableAttribute value);
    [CompilerGeneratedAttribute]
public List`1<IndexAttribute> get_ModifyIndexResult();
}
public class FreeSql.Aop.ConfigEntityPropertyEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Type <EntityType>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private PropertyInfo <Property>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ColumnAttribute <ModifyResult>k__BackingField;
    public Type EntityType { get; }
    public PropertyInfo Property { get; }
    public ColumnAttribute ModifyResult { get; internal set; }
    public ConfigEntityPropertyEventArgs(Type entityType, PropertyInfo property);
    [CompilerGeneratedAttribute]
public Type get_EntityType();
    [CompilerGeneratedAttribute]
public PropertyInfo get_Property();
    [CompilerGeneratedAttribute]
public ColumnAttribute get_ModifyResult();
    [CompilerGeneratedAttribute]
internal void set_ModifyResult(ColumnAttribute value);
}
public class FreeSql.Aop.CurdAfterEventArgs : CurdBeforeEventArgs {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Exception <Exception>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private object <ExecuteResult>k__BackingField;
    public Exception Exception { get; }
    public object ExecuteResult { get; }
    public long ElapsedTicks { get; }
    public long ElapsedMilliseconds { get; }
    public CurdAfterEventArgs(CurdBeforeEventArgs before, Exception exception, object executeResult);
    [CompilerGeneratedAttribute]
public Exception get_Exception();
    [CompilerGeneratedAttribute]
public object get_ExecuteResult();
    public long get_ElapsedTicks();
    public long get_ElapsedMilliseconds();
}
public class FreeSql.Aop.CurdBeforeEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Guid <Identifier>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Stopwatch <Stopwatch>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private CurdType <CurdType>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Type <EntityType>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private TableInfo <Table>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Sql>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private DbParameter[] <DbParms>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Dictionary`2<string, object> <States>k__BackingField;
    public Guid Identifier { get; protected set; }
    protected Stopwatch Stopwatch { get; }
    internal Stopwatch StopwatchInternal { get; }
    public CurdType CurdType { get; }
    public Type EntityType { get; }
    public TableInfo Table { get; }
    public string Sql { get; }
    public DbParameter[] DbParms { get; }
    public Dictionary`2<string, object> States { get; protected set; }
    public CurdBeforeEventArgs(Type entityType, TableInfo table, CurdType curdType, string sql, DbParameter[] dbParms);
    protected CurdBeforeEventArgs(Guid identifier, Stopwatch stopwatch, Type entityType, TableInfo table, CurdType curdType, string sql, DbParameter[] dbParms, Dictionary`2<string, object> states);
    [CompilerGeneratedAttribute]
public Guid get_Identifier();
    [CompilerGeneratedAttribute]
protected void set_Identifier(Guid value);
    [CompilerGeneratedAttribute]
protected Stopwatch get_Stopwatch();
    internal Stopwatch get_StopwatchInternal();
    [CompilerGeneratedAttribute]
public CurdType get_CurdType();
    [CompilerGeneratedAttribute]
public Type get_EntityType();
    [CompilerGeneratedAttribute]
public TableInfo get_Table();
    [CompilerGeneratedAttribute]
public string get_Sql();
    [CompilerGeneratedAttribute]
public DbParameter[] get_DbParms();
    [CompilerGeneratedAttribute]
public Dictionary`2<string, object> get_States();
    [CompilerGeneratedAttribute]
protected void set_States(Dictionary`2<string, object> value);
}
public enum FreeSql.Aop.CurdType : Enum {
    public int value__;
    public static CurdType Select;
    public static CurdType Delete;
    public static CurdType Update;
    public static CurdType Insert;
    public static CurdType InsertOrUpdate;
}
public class FreeSql.Aop.ParseExpressionEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private List`1<SelectTableInfo> <Tables>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Func`2<Expression, string> <FreeParse>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Expression <Expression>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Result>k__BackingField;
    public List`1<SelectTableInfo> Tables { get; }
    public Func`2<Expression, string> FreeParse { get; }
    public Expression Expression { get; }
    public string Result { get; public set; }
    public ParseExpressionEventArgs(Expression expression, Func`2<Expression, string> freeParse, List`1<SelectTableInfo> tables);
    [CompilerGeneratedAttribute]
public List`1<SelectTableInfo> get_Tables();
    [CompilerGeneratedAttribute]
public Func`2<Expression, string> get_FreeParse();
    [CompilerGeneratedAttribute]
public Expression get_Expression();
    [CompilerGeneratedAttribute]
public string get_Result();
    [CompilerGeneratedAttribute]
public void set_Result(string value);
}
public class FreeSql.Aop.SyncStructureAfterEventArgs : SyncStructureBeforeEventArgs {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Sql>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Exception <Exception>k__BackingField;
    public string Sql { get; }
    public Exception Exception { get; }
    public long ElapsedTicks { get; }
    public long ElapsedMilliseconds { get; }
    public SyncStructureAfterEventArgs(SyncStructureBeforeEventArgs before, string sql, Exception exception);
    [CompilerGeneratedAttribute]
public string get_Sql();
    [CompilerGeneratedAttribute]
public Exception get_Exception();
    public long get_ElapsedTicks();
    public long get_ElapsedMilliseconds();
}
public class FreeSql.Aop.SyncStructureBeforeEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Guid <Identifier>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Stopwatch <Stopwatch>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Type[] <EntityTypes>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Dictionary`2<string, object> <States>k__BackingField;
    public Guid Identifier { get; protected set; }
    protected Stopwatch Stopwatch { get; }
    internal Stopwatch StopwatchInternal { get; }
    public Type[] EntityTypes { get; }
    public Dictionary`2<string, object> States { get; protected set; }
    public SyncStructureBeforeEventArgs(Type[] entityTypes);
    protected SyncStructureBeforeEventArgs(Guid identifier, Stopwatch stopwatch, Type[] entityTypes, Dictionary`2<string, object> states);
    [CompilerGeneratedAttribute]
public Guid get_Identifier();
    [CompilerGeneratedAttribute]
protected void set_Identifier(Guid value);
    [CompilerGeneratedAttribute]
protected Stopwatch get_Stopwatch();
    internal Stopwatch get_StopwatchInternal();
    [CompilerGeneratedAttribute]
public Type[] get_EntityTypes();
    [CompilerGeneratedAttribute]
public Dictionary`2<string, object> get_States();
    [CompilerGeneratedAttribute]
protected void set_States(Dictionary`2<string, object> value);
}
public class FreeSql.Aop.TraceAfterEventArgs : TraceBeforeEventArgs {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Remark>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Exception <Exception>k__BackingField;
    public string Remark { get; }
    public Exception Exception { get; }
    public long ElapsedTicks { get; }
    public long ElapsedMilliseconds { get; }
    public TraceAfterEventArgs(TraceBeforeEventArgs before, string remark, Exception exception);
    [CompilerGeneratedAttribute]
public string get_Remark();
    [CompilerGeneratedAttribute]
public Exception get_Exception();
    public long get_ElapsedTicks();
    public long get_ElapsedMilliseconds();
}
public class FreeSql.Aop.TraceBeforeEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Guid <Identifier>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Stopwatch <Stopwatch>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Operation>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private object <Value>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Dictionary`2<string, object> <States>k__BackingField;
    public Guid Identifier { get; protected set; }
    protected Stopwatch Stopwatch { get; }
    internal Stopwatch StopwatchInternal { get; }
    public string Operation { get; }
    public object Value { get; }
    public Dictionary`2<string, object> States { get; protected set; }
    public TraceBeforeEventArgs(string operation, object value);
    protected TraceBeforeEventArgs(Guid identifier, Stopwatch stopwatch, string operation, object value, Dictionary`2<string, object> states);
    [CompilerGeneratedAttribute]
public Guid get_Identifier();
    [CompilerGeneratedAttribute]
protected void set_Identifier(Guid value);
    [CompilerGeneratedAttribute]
protected Stopwatch get_Stopwatch();
    internal Stopwatch get_StopwatchInternal();
    [CompilerGeneratedAttribute]
public string get_Operation();
    [CompilerGeneratedAttribute]
public object get_Value();
    [CompilerGeneratedAttribute]
public Dictionary`2<string, object> get_States();
    [CompilerGeneratedAttribute]
protected void set_States(Dictionary`2<string, object> value);
}
public static class FreeSql.CoreStrings : object {
    private static ResourceManager _resourceManager;
    private static CultureInfo _resourceCulture;
    public static CultureInfo Culture { get; public set; }
    public static string Before_Chunk_Cannot_Use_Select { get; }
    public static string Begin_Transaction_Then_ForUpdate { get; }
    public static string Cannot_Be_NULL { get; }
    public static string Check_UseConnectionString { get; }
    public static string Commit { get; }
    public static string Connection_Failed_Switch_Servers { get; }
    public static string Custom_Reflection_IsNotNull { get; }
    public static string Custom_StaticMethodName_IsNotNull { get; }
    public static string CustomFieldSeparatedBySpaces { get; }
    public static string DateRange_Comma_Separateda_By2Char { get; }
    public static string DateRange_DateFormat_yyyy { get; }
    public static string Different_Number_SlaveConnectionString_SlaveWeights { get; }
    public static string EspeciallySubquery_Cannot_Parsing { get; }
    public static string GBase_NotSupport_OtherThanCommas { get; }
    public static string Include_ParameterType_Error { get; }
    public static string Include_ParameterType_Error_Use_IncludeMany { get; }
    public static string Include_ParameterType_Error_Use_MemberAccess { get; }
    public static string IncludeMany_ParameterType_Error_Use_MemberAccess { get; }
    public static string Install_FreeSql_Extensions_LazyLoading { get; }
    public static string ManyToMany_AsSelect_NotSupport_Sum_Avg_etc { get; }
    public static string MasterPool_IsNull_UseTransaction { get; }
    public static string NoProperty_Defined { get; }
    public static string Not_Implemented { get; }
    public static string Not_Implemented_MemberAcess_Constant { get; }
    public static string Not_Support { get; }
    public static string NotSpecified_UseConnectionString_UseConnectionFactory { get; }
    public static string Parameter_Field_NotSpecified { get; }
    public static string Properties_Cannot_Null { get; }
    public static string Range_Comma_Separateda_By2Char { get; }
    public static string RollBack { get; }
    public static string RunTimeError_Reflection_IncludeMany { get; }
    public static string S_Access_InsertOnlyOneAtTime { get; }
    public static string S_BaseEntity_Initialization_Error { get; }
    public static string S_ConnectionStringError { get; }
    public static string S_ConnectionStringError_CheckProject { get; }
    public static string S_CustomAdapter_Cannot_Use_CreateCommand { get; }
    public static string S_CustomAdapter_OnlySuppport_UseConnectionFactory { get; }
    public static string S_DB_Parameter_Error_NoConnectionString { get; }
    public static string S_DB_ParameterError { get; }
    public static string S_InsertOrUpdate_Unable_UpdateColumns { get; }
    public static string S_MasterDatabase { get; }
    public static string S_NameOptions_Incorrect { get; }
    public static string S_Not_Implemented_Feature { get; }
    public static string S_Not_Implemented_FeedBack { get; }
    public static string S_ObjectPool { get; }
    public static string S_OnConflictDoUpdate_MustIsPrimary { get; }
    public static string S_SlaveDatabase { get; }
    public static string SubTableFieldValue_IsNotNull { get; }
    public static string T2_Type_Error { get; }
    public static string Use_InsertDict_Method { get; }
    private static CoreStrings();
    public static CultureInfo get_Culture();
    public static void set_Culture(CultureInfo value);
    public static string AsTable_PropertyName_FormatError(object asTable);
    public static string AsTable_PropertyName_NotDateTime(object atmGroupsValue);
    public static string Available_Failed_Get_Resource(object name, object statistics);
    public static string Available_Thrown_Exception(object name);
    public static string Bad_Expression_Format(object column);
    public static string get_Before_Chunk_Cannot_Use_Select();
    public static string get_Begin_Transaction_Then_ForUpdate();
    public static string get_Cannot_Be_NULL();
    public static string Cannot_Be_NULL_Name(object name);
    public static string Cannot_Match_Property(object property);
    public static string Cannot_Resolve_ExpressionTree(object property);
    public static string get_Check_UseConnectionString();
    public static string get_Commit();
    public static string get_Connection_Failed_Switch_Servers();
    public static string Custom_Expression_ParsingError(object exp3MethodDeclaringType);
    public static string get_Custom_Reflection_IsNotNull();
    public static string get_Custom_StaticMethodName_IsNotNull();
    public static string Custom_StaticMethodName_NotSet_DynamicFilterCustom(object fiValueCustomArray);
    public static string get_CustomFieldSeparatedBySpaces();
    public static string DataType_AsType_Inconsistent(object dataDisplayCsharp, object tableTypeDisplayCsharp);
    public static string get_DateRange_Comma_Separateda_By2Char();
    public static string get_DateRange_DateFormat_yyyy();
    public static string DbUpdateVersionException_RowLevelOptimisticLock(object sourceCount, object affrows);
    public static string get_Different_Number_SlaveConnectionString_SlaveWeights();
    public static string Duplicate_ColumnAttribute(object colattrName);
    public static string Duplicate_PropertyName(object pName);
    public static string Entity_Must_Primary_Key(object function, object tableCsName);
    public static string Entity_MySQL_VersionsBelow8_NotSupport_Multiple_PrimaryKeys(object tbTypeFullName);
    public static string Entity_NotParentChild_Relationship(object tbTypeFullName);
    public static string get_EspeciallySubquery_Cannot_Parsing();
    public static string Expression_Error_Use_ParameterExpression(object exp);
    public static string Expression_Error_Use_Successive_MemberAccess_Type(object exp);
    public static string ExpressionTree_Convert_Type_Error(object value, object valueTypeFullName, object typeFullName, object exMessage);
    public static string Failed_SubTable_FieldValue(object sqlWhere);
    public static string Functions_AsTable_NotImplemented(object asTable);
    public static string get_GBase_NotSupport_OtherThanCommas();
    public static string Generated_Same_SubTable(object tableName);
    public static string GetPrimarys_ParameterError_IsNotDictKey(object primary);
    public static string Has_Specified_Cannot_Specified_Second(object first, object second);
    public static string Ignored_Check_Confirm_PublicGetSet(object tb2DbName, object mp2MemberName);
    public static string get_Include_ParameterType_Error();
    public static string get_Include_ParameterType_Error_Use_IncludeMany();
    public static string get_Include_ParameterType_Error_Use_MemberAccess();
    public static string IncludeMany_NotValid_Navigation(object tbTypeDisplayCsharp, object collMemMemberName);
    public static string IncludeMany_ParameterError_OnlyUseOneParameter(object navigateSelector);
    public static string IncludeMany_ParameterError_Select_ReturnConsistentType(object navigateSelector, object collMemElementType);
    public static string get_IncludeMany_ParameterType_Error_Use_MemberAccess();
    public static string IncludeMany_ParameterTypeError(object navigateSelector);
    public static string InsertInto_No_Property_Selected(object displayCsharp);
    public static string InsertInto_TypeError(object displayCsharp);
    public static string InsertOrUpdate_Must_Primary_Key(object CsName);
    public static string InsertOrUpdate_NotSuport_Generic_UseEntity(object typeofT1);
    public static string get_Install_FreeSql_Extensions_LazyLoading();
    public static string LazyLoading_CompilationError(object trytbTypeName, object exMessage, object cscode);
    public static string LazyLoading_EntityMustDeclarePublic(object trytbTypeName);
    public static string get_ManyToMany_AsSelect_NotSupport_Sum_Avg_etc();
    public static string ManyToMany_NotFound_CorrespondingField(object trytbTypeName, object pnvName, object tbmidCsName, object midTypePropsTrytbName, object findtrytbPkCsName);
    public static string ManyToMany_ParsingError_EntityMissing_PrimaryKey(object trytbTypeName, object pnvName, object tbrefTypeName);
    public static string ManyToMany_ParsingError_EntityMustHas_NavigateCollection(object trytbTypeName, object pnvName, object tbrefTypeName);
    public static string ManyToMany_ParsingError_InconsistentType(object trytbTypeName, object pnvName, object tbmidCsName, object trycolCsName, object trytbCsName, object trytbPrimarysCsName);
    public static string ManyToMany_ParsingError_IntermediateClass_ErrorMessage(object trytbTypeName, object pnvName, object tbmidCsName, object midTypePropsTrytbName, object exMessage);
    public static string ManyToMany_ParsingError_IntermediateClass_NotManyToOne_OneToOne(object trytbTypeName, object pnvName, object tbmidCsName, object midTypePropsTrytbName);
    public static string Mapping_Exception_HasNo_SamePropertyName(object name);
    public static string get_MasterPool_IsNull_UseTransaction();
    public static string Missing_FreeSqlProvider_Package(object Provider);
    public static string Missing_FreeSqlProvider_Package_Reason(object dll, object providerType);
    public static string Navigation_Bind_Number_Different(object trytbTypeName, object pnvName, object bindColumnsCount, object tbrefPrimarysLength);
    public static string Navigation_Missing_AsSelect(object tb2DbName, object mp2MemberName);
    public static string Navigation_Missing_SetProperty(object trytbTypeDisplayCsharp, object pName);
    public static string Navigation_NotFound_CorrespondingField(object trytbTypeName, object pnvName, object findtbrefPkCsName);
    public static string Navigation_ParsingError_EntityMissingPrimaryKey(object trytbTypeName, object pnvName, object trytcTypeName);
    public static string Navigation_ParsingError_InconsistentType(object trytbTypeName, object pnvName, object trytbCsName, object trycolCsName, object tbrefCsName, object tbrefPrimarysCsName);
    public static string Navigation_ParsingError_NotFound_Property(object trytbTypeName, object pnvName, object tbrefTypeName, object bi);
    public static string NoPrimaryKey_UseSetDto(object tableTypeDisplayCsharp);
    public static string get_NoProperty_Defined();
    public static string get_Not_Implemented();
    public static string Not_Implemented_Expression(object exp);
    public static string Not_Implemented_Expression_ParameterUseConstant(object exp, object expArguments);
    public static string Not_Implemented_Expression_UseAsSelect(object exp, object exp3MethodName, object exp3ArgumentsCount);
    public static string get_Not_Implemented_MemberAcess_Constant();
    public static string Not_Implemented_Name(object name);
    public static string get_Not_Support();
    public static string Not_Support_OrderByRandom(object dataType);
    public static string Not_Valid_Navigation_Property(object property);
    public static string NotFound_Column(object dbName, object memberName);
    public static string NotFound_CsName_Column(object CsName);
    public static string NotFound_Property(object memberName);
    public static string NotFound_PropertyName(object proto);
    public static string NotFound_Reflection(object fiValueCustomArray);
    public static string NotFound_Static_MethodName(object fiValueCustomArray);
    public static string NotFound_Table_Property_AsTable(object atmGroupsValue);
    public static string get_NotSpecified_UseConnectionString_UseConnectionFactory();
    public static string ObjectPool_Get_Timeout(object policyName, object GetName, object totalSeconds);
    public static string ObjectPool_GetAsync_Queue_Long(object policyName, object asyncGetCapacity);
    public static string OneToMany_NotFound_CorrespondingField(object trytbTypeName, object pnvName, object tbrefCsName, object findtrytb, object findtrytbPkCsName);
    public static string OneToMany_ParsingError_InconsistentType(object trytbTypeName, object pnvName, object trytbCsName, object trytbPrimarysCsName, object tbrefCsName, object trycolCsName);
    public static string OneToMany_UseNavigate(object refpropName, object findtrytbPkCsName);
    public static string get_Parameter_Field_NotSpecified();
    public static string ParameterError_NotValid_Collection(object property);
    public static string ParameterError_NotValid_Navigation(object property);
    public static string ParameterError_NotValid_PropertyName(object where, object keyval, object reftbTypeDisplayCsharp);
    public static string ParameterError_NotValid_UseCommas(object property);
    public static string Parsing_Failed(object callExpMethodName, object message);
    public static string Policy_ObjectPool_Dispose(object policyName);
    public static string Policy_Status_NotAvailable(object policyName, object UnavailableExceptionMessage);
    public static string Properties_AsRowLock_Must_Numeric_Byte(object trytbVersionColumnCsName);
    public static string get_Properties_Cannot_Null();
    public static string Property_Cannot_Find(object property);
    public static string get_Range_Comma_Separateda_By2Char();
    public static string get_RollBack();
    public static string get_RunTimeError_Reflection_IncludeMany();
    public static string get_S_Access_InsertOnlyOneAtTime();
    public static string get_S_BaseEntity_Initialization_Error();
    public static string S_BlockAccess_WaitForRecovery(object thisName, object exMessage);
    public static string S_CannotBeConverted_To_ISelect(object typeofName);
    public static string get_S_ConnectionStringError();
    public static string S_ConnectionStringError_Check(object thisName);
    public static string get_S_ConnectionStringError_CheckProject();
    public static string S_ConnectionStringError_CheckProjectConnection(object thisName);
    public static string get_S_CustomAdapter_Cannot_Use_CreateCommand();
    public static string get_S_CustomAdapter_OnlySuppport_UseConnectionFactory();
    public static string S_Dameng_NotSupport_TablespaceSchemas(object tbname);
    public static string get_S_DB_Parameter_Error_NoConnectionString();
    public static string get_S_DB_ParameterError();
    public static string S_DB_ParameterError_UnsupportedType(object dbargs);
    public static string S_Features_Unique(object method, object provider);
    public static string get_S_InsertOrUpdate_Unable_UpdateColumns();
    public static string get_S_MasterDatabase();
    public static string S_MygisGeometry_NotImplement(object wkt);
    public static string get_S_NameOptions_Incorrect();
    public static string get_S_Not_Implemented_Feature();
    public static string get_S_Not_Implemented_FeedBack();
    public static string S_NotFound_Name(object name);
    public static string S_NotImplementSkipOffset(object providerName);
    public static string get_S_ObjectPool();
    public static string S_OldTableExists(object tboldname, object tbname);
    public static string get_S_OnConflictDoUpdate_MustIsPrimary();
    public static string S_Oracle_NotSupport_TablespaceSchemas(object tbname);
    public static string S_ParsingFailed_UseRestoreToSelect(object callExpMethodName, object message);
    public static string S_RequiresEntityPrimaryKey(object providerName, object tableCsName);
    public static string S_SelectManayErrorType(object typeFullName);
    public static string get_S_SlaveDatabase();
    public static string S_Type_IsNot_Migrable(object objentityTypeFullName);
    public static string S_Type_IsNot_Migrable_0Attributes(object objentityTypeFullName);
    public static string S_TypeMappingNotImplemented(object columnDbTypeTextFull);
    public static string S_WrongParameter(object args);
    public static string Set_Column_IsNullable_False(object qoteSql);
    public static string SubTableFieldValue_CannotLessThen(object dt, object beginTime);
    public static string get_SubTableFieldValue_IsNotNull();
    public static string SubTableFieldValue_NotConvertDateTime(object columnValue);
    public static string SubTableFieldValue_NotMatchTable(object dt);
    public static string get_T2_Type_Error();
    public static string TableName_Format_Error(object yyyyMMdd);
    public static string Type_AsType_Parameter_Error(object Type);
    public static string Type_Cannot_Access_Constructor(object thatFullName);
    public static string Type_Error_Name(object name);
    public static string TypeAsType_NotSupport_Object(object Type);
    public static string TypeError_CannotUse_IncludeMany(object typeofFullName);
    public static string Unable_Parse_Expression(object exp);
    public static string Unable_Parse_ExpressionMethod(object exp3tmpCallMethodName);
    public static string get_Use_InsertDict_Method();
    private static string GetString(string name, String[] formatterNames);
}
[AttributeUsageAttribute("128")]
public class FreeSql.DataAnnotations.ColumnAttribute : Attribute {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <OldName>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <DbType>k__BackingField;
    internal Nullable`1<bool> _IsPrimary;
    internal Nullable`1<bool> _IsIdentity;
    internal Nullable`1<bool> _IsNullable;
    internal Nullable`1<bool> _IsIgnore;
    internal Nullable`1<bool> _IsVersion;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Type <MapType>k__BackingField;
    internal Nullable`1<short> _Position;
    internal Nullable`1<bool> _CanInsert;
    internal Nullable`1<bool> _CanUpdate;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private DateTimeKind <ServerTime>k__BackingField;
    internal Nullable`1<int> _StringLength;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <InsertValueSql>k__BackingField;
    internal Nullable`1<int> _Precision;
    internal Nullable`1<int> _Scale;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <RewriteSql>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <RereadSql>k__BackingField;
    public string Name { get; public set; }
    public string OldName { get; public set; }
    public string DbType { get; public set; }
    public bool IsPrimary { get; public set; }
    public bool IsIdentity { get; public set; }
    public bool IsNullable { get; public set; }
    public bool IsIgnore { get; public set; }
    public bool IsVersion { get; public set; }
    public Type MapType { get; public set; }
    public short Position { get; public set; }
    public bool CanInsert { get; public set; }
    public bool CanUpdate { get; public set; }
    public DateTimeKind ServerTime { get; public set; }
    public int StringLength { get; public set; }
    public string InsertValueSql { get; public set; }
    public int Precision { get; public set; }
    public int Scale { get; public set; }
    public string RewriteSql { get; public set; }
    public string RereadSql { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_OldName();
    [CompilerGeneratedAttribute]
public void set_OldName(string value);
    [CompilerGeneratedAttribute]
public string get_DbType();
    [CompilerGeneratedAttribute]
public void set_DbType(string value);
    public bool get_IsPrimary();
    public void set_IsPrimary(bool value);
    public bool get_IsIdentity();
    public void set_IsIdentity(bool value);
    public bool get_IsNullable();
    public void set_IsNullable(bool value);
    public bool get_IsIgnore();
    public void set_IsIgnore(bool value);
    public bool get_IsVersion();
    public void set_IsVersion(bool value);
    [CompilerGeneratedAttribute]
public Type get_MapType();
    [CompilerGeneratedAttribute]
public void set_MapType(Type value);
    public short get_Position();
    public void set_Position(short value);
    public bool get_CanInsert();
    public void set_CanInsert(bool value);
    public bool get_CanUpdate();
    public void set_CanUpdate(bool value);
    [CompilerGeneratedAttribute]
public DateTimeKind get_ServerTime();
    [CompilerGeneratedAttribute]
public void set_ServerTime(DateTimeKind value);
    public int get_StringLength();
    public void set_StringLength(int value);
    [CompilerGeneratedAttribute]
public string get_InsertValueSql();
    [CompilerGeneratedAttribute]
public void set_InsertValueSql(string value);
    public int get_Precision();
    public void set_Precision(int value);
    public int get_Scale();
    public void set_Scale(int value);
    [CompilerGeneratedAttribute]
public string get_RewriteSql();
    [CompilerGeneratedAttribute]
public void set_RewriteSql(string value);
    [CompilerGeneratedAttribute]
public string get_RereadSql();
    [CompilerGeneratedAttribute]
public void set_RereadSql(string value);
}
public class FreeSql.DataAnnotations.ColumnFluent : object {
    public ColumnAttribute _column;
    public PropertyInfo _property;
    public Type _entityType;
    public ColumnFluent(ColumnAttribute column, PropertyInfo property, Type entityType);
    public ColumnFluent Name(string value);
    public ColumnFluent OldName(string value);
    public ColumnFluent DbType(string value);
    public ColumnFluent IsPrimary(bool value);
    public ColumnFluent IsIdentity(bool value);
    public ColumnFluent IsNullable(bool value);
    public ColumnFluent IsIgnore(bool value);
    public ColumnFluent IsVersion(bool value);
    public ColumnFluent MapType(Type value);
    public ColumnFluent Position(short value);
    public ColumnFluent CanInsert(bool value);
    public ColumnFluent CanUpdate(bool value);
    public ColumnFluent ServerTime(DateTimeKind value);
    public ColumnFluent StringLength(int value);
    public ColumnFluent InsertValueSql(string value);
    public ColumnFluent Precision(int precision, int scale);
    public ColumnFluent RewriteSql(string value);
    public ColumnFluent RereadSql(string value);
}
internal class FreeSql.DataAnnotations.DateTimeAsTableImpl : object {
    private object _lock;
    private List`1<string> _allTables;
    private List`1<DateTime> _allTablesTime;
    private DateTime _beginTime;
    private DateTime _lastTime;
    private Func`3<DateTime, int, DateTime> _nextTimeFunc;
    private string _tableName;
    private Match _tableNameFormat;
    private static Regex _regTableNameFormat;
    private static ConcurrentDictionary`2<string, Regex[]> _dicRegSqlWhereDateTimes;
    private Func`2<String[], String[]> _GetDefaultAllTables;
    public String[] AllTables { get; }
    public DateTimeAsTableImpl(string tableName, DateTime beginTime, Func`3<DateTime, int, DateTime> nextTimeFunc);
    private static DateTimeAsTableImpl();
    private int GetTimestamp(DateTime dt);
    private void ExpandTable(DateTime beginTime, DateTime endTime);
    public NativeTuple`2<DateTime, DateTime> GetRangeByTableName(string tableName);
    private DateTime ParseColumnValue(object columnValue);
    public sealed virtual string GetTableNameByColumnValue(object columnValue, bool autoExpand);
    public sealed virtual String[] GetTableNamesByColumnValueRange(object columnValue1, object columnValue2);
    private static Regex[] GetRegSqlWhereDateTimes(string columnName, string quoteParameterName);
    public sealed virtual IAsTable SetDefaultAllTables(Func`2<String[], String[]> audit);
    public sealed virtual IAsTableTableNameRangeResult GetTableNamesBySqlWhere(string sqlWhere, List`1<DbParameter> dbParams, SelectTableInfo tb, CommonUtils commonUtils);
    public sealed virtual String[] get_AllTables();
    public sealed virtual IAsTable SetTableName(int index, string tableName);
}
[AttributeUsageAttribute("68")]
public class FreeSql.DataAnnotations.ExpressionCallAttribute : Attribute {
}
public class FreeSql.DataAnnotations.ExpressionCallContext : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private IUtility <Utility>k__BackingField;
    internal CommonExpression _commonExp;
    internal ExpTSC _tsc;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private DataType <DataType>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Dictionary`2<string, string> <ParsedContent>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Dictionary`2<string, Expression> <RawExpression>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private DbParameter <DbParameter>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private List`1<DbParameter> <UserParameters>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Func`2<object, string> <FormatSql>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Result>k__BackingField;
    public IUtility Utility { get; }
    public DataType DataType { get; internal set; }
    public Dictionary`2<string, string> ParsedContent { get; }
    public Dictionary`2<string, Expression> RawExpression { get; }
    public DbParameter DbParameter { get; internal set; }
    public List`1<DbParameter> UserParameters { get; internal set; }
    public Func`2<object, string> FormatSql { get; internal set; }
    public string Result { get; public set; }
    [CompilerGeneratedAttribute]
public IUtility get_Utility();
    [CompilerGeneratedAttribute]
public DataType get_DataType();
    [CompilerGeneratedAttribute]
internal void set_DataType(DataType value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_ParsedContent();
    [CompilerGeneratedAttribute]
public Dictionary`2<string, Expression> get_RawExpression();
    [CompilerGeneratedAttribute]
public DbParameter get_DbParameter();
    [CompilerGeneratedAttribute]
internal void set_DbParameter(DbParameter value);
    [CompilerGeneratedAttribute]
public List`1<DbParameter> get_UserParameters();
    [CompilerGeneratedAttribute]
internal void set_UserParameters(List`1<DbParameter> value);
    [CompilerGeneratedAttribute]
public Func`2<object, string> get_FormatSql();
    [CompilerGeneratedAttribute]
internal void set_FormatSql(Func`2<object, string> value);
    [CompilerGeneratedAttribute]
public string get_Result();
    [CompilerGeneratedAttribute]
public void set_Result(string value);
}
public interface FreeSql.DataAnnotations.IAsTable {
    public String[] AllTables { get; }
    public abstract virtual String[] get_AllTables();
    public abstract virtual IAsTable SetTableName(int index, string tableName);
    public abstract virtual string GetTableNameByColumnValue(object columnValue, bool autoExpand);
    public abstract virtual String[] GetTableNamesByColumnValueRange(object columnValue1, object columnValue2);
    public abstract virtual IAsTableTableNameRangeResult GetTableNamesBySqlWhere(string sqlWhere, List`1<DbParameter> dbParams, SelectTableInfo tb, CommonUtils commonUtils);
    public abstract virtual IAsTable SetDefaultAllTables(Func`2<String[], String[]> audit);
}
public class FreeSql.DataAnnotations.IAsTableTableNameRangeResult : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private String[] <Names>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private object <ColumnValue1>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private object <ColumnValue2>k__BackingField;
    public String[] Names { get; }
    public object ColumnValue1 { get; }
    public object ColumnValue2 { get; }
    public IAsTableTableNameRangeResult(String[] names, object columnValue1, object columnValue2);
    [CompilerGeneratedAttribute]
public String[] get_Names();
    [CompilerGeneratedAttribute]
public object get_ColumnValue1();
    [CompilerGeneratedAttribute]
public object get_ColumnValue2();
}
[AttributeUsageAttribute("4")]
public class FreeSql.DataAnnotations.IndexAttribute : Attribute {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Fields>k__BackingField;
    internal Nullable`1<bool> _IsUnique;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private IndexMethod <IndexMethod>k__BackingField;
    public string Name { get; public set; }
    public string Fields { get; public set; }
    public bool IsUnique { get; public set; }
    public IndexMethod IndexMethod { get; public set; }
    public IndexAttribute(string name, string fields);
    public IndexAttribute(string name, string fields, bool isUnique);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Fields();
    [CompilerGeneratedAttribute]
public void set_Fields(string value);
    public bool get_IsUnique();
    public void set_IsUnique(bool value);
    [CompilerGeneratedAttribute]
public IndexMethod get_IndexMethod();
    [CompilerGeneratedAttribute]
public void set_IndexMethod(IndexMethod value);
}
public enum FreeSql.DataAnnotations.IndexMethod : Enum {
    public int value__;
    public static IndexMethod B_Tree;
    public static IndexMethod Hash;
    public static IndexMethod GiST;
    public static IndexMethod GIN;
    public static IndexMethod SP_GiST;
    public static IndexMethod BRIN;
}
public class FreeSql.DataAnnotations.NavigateAttribute : Attribute {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Bind>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <TempPrimary>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Type <ManyToMany>k__BackingField;
    public string Bind { get; public set; }
    public string TempPrimary { get; public set; }
    public Type ManyToMany { get; public set; }
    public NavigateAttribute(string bind);
    [CompilerGeneratedAttribute]
public string get_Bind();
    [CompilerGeneratedAttribute]
public void set_Bind(string value);
    [CompilerGeneratedAttribute]
public string get_TempPrimary();
    [CompilerGeneratedAttribute]
public void set_TempPrimary(string value);
    [CompilerGeneratedAttribute]
public Type get_ManyToMany();
    [CompilerGeneratedAttribute]
public void set_ManyToMany(Type value);
}
[AttributeUsageAttribute("4")]
public class FreeSql.DataAnnotations.OraclePrimaryKeyNameAttribute : Attribute {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Name>k__BackingField;
    public string Name { get; public set; }
    public OraclePrimaryKeyNameAttribute(string name);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
}
[AttributeUsageAttribute("2048")]
public class FreeSql.DataAnnotations.RawValueAttribute : Attribute {
}
[AttributeUsageAttribute("4")]
public class FreeSql.DataAnnotations.TableAttribute : Attribute {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <OldName>k__BackingField;
    internal Nullable`1<bool> _DisableSyncStructure;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ConcurrentDictionary`2<string, ColumnAttribute> <_columns>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ConcurrentDictionary`2<string, NavigateAttribute> <_navigates>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ConcurrentDictionary`2<string, IndexAttribute> <_indexs>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <AsTable>k__BackingField;
    public string Name { get; public set; }
    public string OldName { get; public set; }
    public bool DisableSyncStructure { get; public set; }
    internal ConcurrentDictionary`2<string, ColumnAttribute> _columns { get; }
    internal ConcurrentDictionary`2<string, NavigateAttribute> _navigates { get; }
    internal ConcurrentDictionary`2<string, IndexAttribute> _indexs { get; }
    public string AsTable { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_OldName();
    [CompilerGeneratedAttribute]
public void set_OldName(string value);
    public bool get_DisableSyncStructure();
    public void set_DisableSyncStructure(bool value);
    [CompilerGeneratedAttribute]
internal ConcurrentDictionary`2<string, ColumnAttribute> get__columns();
    [CompilerGeneratedAttribute]
internal ConcurrentDictionary`2<string, NavigateAttribute> get__navigates();
    [CompilerGeneratedAttribute]
internal ConcurrentDictionary`2<string, IndexAttribute> get__indexs();
    [CompilerGeneratedAttribute]
public string get_AsTable();
    [CompilerGeneratedAttribute]
public void set_AsTable(string value);
    internal void ParseAsTable(TableInfo tb);
}
public class FreeSql.DataAnnotations.TableFluent : object {
    private Type _entityType;
    private Dictionary`2<string, PropertyInfo> _properties;
    private TableAttribute _table;
    public TableFluent(Type entityType, TableAttribute table);
    public TableFluent Name(string value);
    public TableFluent OldName(string value);
    public TableFluent DisableSyncStructure(bool value);
    public TableFluent AsTable(string value);
    public ColumnFluent Property(string proto);
    public TableFluent Navigate(string proto, string bind, Type manyToMany);
    public TableFluent Navigate(string proto, string bind, string tempPrimary);
    private TableFluent NavigateInternal(string proto, string bind, string tempPrimary, Type manyToMany);
    public TableFluent Index(string name, string fields, bool isUnique);
    public TableFluent IndexRemove(string name);
}
public class FreeSql.DataAnnotations.TableFluent`1 : object {
    private Dictionary`2<string, PropertyInfo> _properties;
    private TableAttribute _table;
    public TableFluent`1(TableAttribute table);
    public TableFluent`1<T> Name(string value);
    public TableFluent`1<T> OldName(string value);
    public TableFluent`1<T> DisableSyncStructure(bool value);
    public TableFluent`1<T> AsTable(string value);
    public ColumnFluent Property(Expression`1<Func`2<T, TProto>> column);
    public ColumnFluent Property(string proto);
    public TableFluent`1<T> Navigate(Expression`1<Func`2<T, TProto>> proto, string bind, Type manyToMany);
    public TableFluent`1<T> Navigate(Expression`1<Func`2<T, TProto>> proto, string bind, string tempPrimary);
    private TableFluent`1<T> NavigateInternal(Expression`1<Func`2<T, TProto>> proto, string bind, string tempPrimary, Type manyToMany);
    public TableFluent`1<T> Navigate(string proto, string bind, Type manyToMany);
    public TableFluent`1<T> Navigate(string proto, string bind, string tempPrimary);
    private TableFluent`1<T> NavigateInternal(string proto, string bind, string tempPrimary, Type manyToMany);
    public TableFluent`1<T> Index(string name, string fields, bool isUnique);
    public TableFluent`1<T> IndexRemove(string name);
}
public class FreeSql.DatabaseModel.DbColumnInfo : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private DbTableInfo <Table>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Type <CsType>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <DbType>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <DbTypeText>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <DbTypeTextFull>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <MaxLength>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsPrimary>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsIdentity>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsNullable>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Comment>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <DefaultValue>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <Position>k__BackingField;
    public DbTableInfo Table { get; public set; }
    public string Name { get; public set; }
    public Type CsType { get; public set; }
    public int DbType { get; public set; }
    public string DbTypeText { get; public set; }
    public string DbTypeTextFull { get; public set; }
    public int MaxLength { get; public set; }
    public bool IsPrimary { get; public set; }
    public bool IsIdentity { get; public set; }
    public bool IsNullable { get; public set; }
    [ObsoleteAttribute("早期编码时少按了一个字母，请使用 Comment")]
public string Coment { get; public set; }
    public string Comment { get; public set; }
    public string DefaultValue { get; public set; }
    public int Position { get; public set; }
    [CompilerGeneratedAttribute]
public DbTableInfo get_Table();
    [CompilerGeneratedAttribute]
public void set_Table(DbTableInfo value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public Type get_CsType();
    [CompilerGeneratedAttribute]
public void set_CsType(Type value);
    [CompilerGeneratedAttribute]
public int get_DbType();
    [CompilerGeneratedAttribute]
public void set_DbType(int value);
    [CompilerGeneratedAttribute]
public string get_DbTypeText();
    [CompilerGeneratedAttribute]
public void set_DbTypeText(string value);
    [CompilerGeneratedAttribute]
public string get_DbTypeTextFull();
    [CompilerGeneratedAttribute]
public void set_DbTypeTextFull(string value);
    [CompilerGeneratedAttribute]
public int get_MaxLength();
    [CompilerGeneratedAttribute]
public void set_MaxLength(int value);
    [CompilerGeneratedAttribute]
public bool get_IsPrimary();
    [CompilerGeneratedAttribute]
public void set_IsPrimary(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsIdentity();
    [CompilerGeneratedAttribute]
public void set_IsIdentity(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsNullable();
    [CompilerGeneratedAttribute]
public void set_IsNullable(bool value);
    public string get_Coment();
    public void set_Coment(string value);
    [CompilerGeneratedAttribute]
public string get_Comment();
    [CompilerGeneratedAttribute]
public void set_Comment(string value);
    [CompilerGeneratedAttribute]
public string get_DefaultValue();
    [CompilerGeneratedAttribute]
public void set_DefaultValue(string value);
    [CompilerGeneratedAttribute]
public int get_Position();
    [CompilerGeneratedAttribute]
public void set_Position(int value);
}
public class FreeSql.DatabaseModel.DbEnumInfo : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Dictionary`2<string, string> <Labels>k__BackingField;
    public string Name { get; public set; }
    public Dictionary`2<string, string> Labels { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_Labels();
    [CompilerGeneratedAttribute]
public void set_Labels(Dictionary`2<string, string> value);
}
public class FreeSql.DatabaseModel.DbForeignInfo : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private DbTableInfo <Table>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private List`1<DbColumnInfo> <Columns>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private DbTableInfo <ReferencedTable>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private List`1<DbColumnInfo> <ReferencedColumns>k__BackingField;
    public DbTableInfo Table { get; public set; }
    public List`1<DbColumnInfo> Columns { get; public set; }
    public DbTableInfo ReferencedTable { get; public set; }
    public List`1<DbColumnInfo> ReferencedColumns { get; public set; }
    [CompilerGeneratedAttribute]
public DbTableInfo get_Table();
    [CompilerGeneratedAttribute]
public void set_Table(DbTableInfo value);
    [CompilerGeneratedAttribute]
public List`1<DbColumnInfo> get_Columns();
    [CompilerGeneratedAttribute]
public void set_Columns(List`1<DbColumnInfo> value);
    [CompilerGeneratedAttribute]
public DbTableInfo get_ReferencedTable();
    [CompilerGeneratedAttribute]
public void set_ReferencedTable(DbTableInfo value);
    [CompilerGeneratedAttribute]
public List`1<DbColumnInfo> get_ReferencedColumns();
    [CompilerGeneratedAttribute]
public void set_ReferencedColumns(List`1<DbColumnInfo> value);
}
public class FreeSql.DatabaseModel.DbIndexColumnInfo : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private DbColumnInfo <Column>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsDesc>k__BackingField;
    public DbColumnInfo Column { get; public set; }
    public bool IsDesc { get; public set; }
    [CompilerGeneratedAttribute]
public DbColumnInfo get_Column();
    [CompilerGeneratedAttribute]
public void set_Column(DbColumnInfo value);
    [CompilerGeneratedAttribute]
public bool get_IsDesc();
    [CompilerGeneratedAttribute]
public void set_IsDesc(bool value);
}
public class FreeSql.DatabaseModel.DbIndexInfo : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private List`1<DbIndexColumnInfo> <Columns>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsUnique>k__BackingField;
    public string Name { get; public set; }
    public List`1<DbIndexColumnInfo> Columns { get; }
    public bool IsUnique { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public List`1<DbIndexColumnInfo> get_Columns();
    [CompilerGeneratedAttribute]
public bool get_IsUnique();
    [CompilerGeneratedAttribute]
public void set_IsUnique(bool value);
}
public class FreeSql.DatabaseModel.DbTableInfo : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Schema>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Comment>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private DbTableType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private List`1<DbColumnInfo> <Columns>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private List`1<DbColumnInfo> <Identitys>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private List`1<DbColumnInfo> <Primarys>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Dictionary`2<string, DbIndexInfo> <UniquesDict>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Dictionary`2<string, DbIndexInfo> <IndexesDict>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Dictionary`2<string, DbForeignInfo> <ForeignsDict>k__BackingField;
    public string Id { get; public set; }
    public string Schema { get; public set; }
    public string Name { get; public set; }
    public string Comment { get; public set; }
    public DbTableType Type { get; public set; }
    public List`1<DbColumnInfo> Columns { get; public set; }
    public List`1<DbColumnInfo> Identitys { get; public set; }
    public List`1<DbColumnInfo> Primarys { get; public set; }
    public Dictionary`2<string, DbIndexInfo> UniquesDict { get; public set; }
    public Dictionary`2<string, DbIndexInfo> IndexesDict { get; public set; }
    public Dictionary`2<string, DbForeignInfo> ForeignsDict { get; public set; }
    public List`1<DbIndexInfo> Uniques { get; }
    public List`1<DbIndexInfo> Indexes { get; }
    public List`1<DbForeignInfo> Foreigns { get; }
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(string value);
    [CompilerGeneratedAttribute]
public string get_Schema();
    [CompilerGeneratedAttribute]
public void set_Schema(string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Comment();
    [CompilerGeneratedAttribute]
public void set_Comment(string value);
    [CompilerGeneratedAttribute]
public DbTableType get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(DbTableType value);
    [CompilerGeneratedAttribute]
public List`1<DbColumnInfo> get_Columns();
    [CompilerGeneratedAttribute]
public void set_Columns(List`1<DbColumnInfo> value);
    [CompilerGeneratedAttribute]
public List`1<DbColumnInfo> get_Identitys();
    [CompilerGeneratedAttribute]
public void set_Identitys(List`1<DbColumnInfo> value);
    [CompilerGeneratedAttribute]
public List`1<DbColumnInfo> get_Primarys();
    [CompilerGeneratedAttribute]
public void set_Primarys(List`1<DbColumnInfo> value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, DbIndexInfo> get_UniquesDict();
    [CompilerGeneratedAttribute]
public void set_UniquesDict(Dictionary`2<string, DbIndexInfo> value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, DbIndexInfo> get_IndexesDict();
    [CompilerGeneratedAttribute]
public void set_IndexesDict(Dictionary`2<string, DbIndexInfo> value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, DbForeignInfo> get_ForeignsDict();
    [CompilerGeneratedAttribute]
public void set_ForeignsDict(Dictionary`2<string, DbForeignInfo> value);
    public List`1<DbIndexInfo> get_Uniques();
    public List`1<DbIndexInfo> get_Indexes();
    public List`1<DbForeignInfo> get_Foreigns();
}
public enum FreeSql.DatabaseModel.DbTableType : Enum {
    public int value__;
    public static DbTableType TABLE;
    public static DbTableType VIEW;
    public static DbTableType StoreProcedure;
}
public class FreeSql.DatabaseModel.DbTypeInfo : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private List`1<LabelInfo> <Labels>k__BackingField;
    public string Name { get; public set; }
    public List`1<LabelInfo> Labels { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public List`1<LabelInfo> get_Labels();
    [CompilerGeneratedAttribute]
public void set_Labels(List`1<LabelInfo> value);
}
public enum FreeSql.DataType : Enum {
    public int value__;
    public static DataType MySql;
    public static DataType SqlServer;
    public static DataType PostgreSQL;
    public static DataType Oracle;
    public static DataType Sqlite;
    public static DataType OdbcOracle;
    public static DataType OdbcSqlServer;
    public static DataType OdbcMySql;
    public static DataType OdbcPostgreSQL;
    public static DataType Odbc;
    public static DataType MsAccess;
    public static DataType Dameng;
    public static DataType ShenTong;
    public static DataType KingbaseES;
    public static DataType Firebird;
    public static DataType Custom;
    public static DataType ClickHouse;
    public static DataType GBase;
    public static DataType QuestDb;
    public static DataType Xugu;
    public static DataType CustomOracle;
    public static DataType CustomSqlServer;
    public static DataType CustomMySql;
    public static DataType CustomPostgreSQL;
    public static DataType DuckDB;
}
public class FreeSql.Extensions.DynamicEntity.DynamicCompileBuilder : object {
    private string _className;
    private Attribute[] _tableAttributes;
    private List`1<DynamicPropertyInfo> _properties;
    private Type _superClass;
    private IFreeSql _fsql;
    private TypeBuilder _typeBuilder;
    public TypeBuilder TypeBuilder { get; }
    public DynamicCompileBuilder(IFreeSql fsql, string className, Attribute[] attributes);
    public TypeBuilder get_TypeBuilder();
    public DynamicCompileBuilder Property(string propertyName, Type propertyType, Attribute[] attributes);
    public DynamicCompileBuilder Property(string propertyName, Type propertyType, bool isOverride, Attribute[] attributes);
    public DynamicCompileBuilder Property(string propertyName, Type propertyType, bool isOverride, object defaultValue, Attribute[] attributes);
    public DynamicCompileBuilder Extend(Type superClass);
    private void SetTableAttribute(TypeBuilder& typeBuilder);
    private void SetPropertys(TypeBuilder& typeBuilder);
    private void OpCodesAdapter(ILGenerator& generator, FieldInfo info, object value);
    private void SetPropertyAttribute(PropertyBuilder& propertyBuilder, T tAttribute);
    private void OverrideProperty(TypeBuilder& typeBuilder, MethodBuilder methodBuilder, PropertyMethodEnum methodEnum, string propertyName);
    public TableInfo Build();
    public Type BuildJustType();
    private string FirstCharToLower(string input);
    private string FirstCharToUpper(string input);
    private static string Md5Encryption(string inputStr);
}
[ExtensionAttribute]
public static class FreeSql.Extensions.EntityUtil.EntityUtilExtensions : object {
    private static MethodInfo MethodStringBuilderAppend;
    private static MethodInfo MethodStringBuilderToString;
    private static MethodInfo MethodDecimalToString;
    private static PropertyInfo MethodStringBuilderLength;
    private static MethodInfo MethodStringConcat;
    private static MethodInfo MethodFreeUtilNewMongodbId;
    private static ConcurrentDictionary`2<DataType, ConcurrentDictionary`2<Type, Func`3<object, bool, string>>> _dicGetEntityKeyString;
    private static ConcurrentDictionary`2<DataType, ConcurrentDictionary`2<Type, Func`2<object, Object[]>>> _dicGetEntityKeyValues;
    private static ConcurrentDictionary`2<DataType, ConcurrentDictionary`2<Type, ConcurrentDictionary`2<string, Func`2<object, object>>>> _dicGetEntityValueWithPropertyName;
    private static ConcurrentDictionary`2<DataType, ConcurrentDictionary`2<Type, Func`2<object, string>>> _dicGetEntityString;
    private static ConcurrentDictionary`2<DataType, ConcurrentDictionary`2<Type, Action`2<object, object>>> _dicMapEntityValue;
    private static ConcurrentDictionary`2<DataType, ConcurrentDictionary`2<Type, Action`2<object, object>>> _dicMapEntityKeyValue;
    private static ConcurrentDictionary`2<DataType, ConcurrentDictionary`2<Type, Action`2<object, long>>> _dicSetEntityIdentityValueWithPrimary;
    private static ConcurrentDictionary`2<DataType, ConcurrentDictionary`2<Type, Func`2<object, long>>> _dicGetEntityIdentityValueWithPrimary;
    private static ConcurrentDictionary`2<DataType, ConcurrentDictionary`2<Type, Action`1<object>>> _dicClearEntityPrimaryValueWithIdentityAndGuid;
    private static ConcurrentDictionary`2<DataType, ConcurrentDictionary`2<Type, Action`1<object>>> _dicClearEntityPrimaryValueWithIdentity;
    private static ConcurrentDictionary`2<DataType, ConcurrentDictionary`2<Type, Func`4<object, object, bool, String[]>>> _dicCompareEntityValueReturnColumns;
    private static ConcurrentDictionary`2<DataType, ConcurrentDictionary`2<Type, Action`3<object, string, int>>> _dicSetEntityIncrByWithPropertyName;
    private static ConcurrentDictionary`2<DataType, ConcurrentDictionary`2<Type, ConcurrentDictionary`2<string, Action`3<object, string, object>>>> _dicSetEntityValueWithPropertyName;
    private static ConcurrentDictionary`2<Type, MethodInfo[]> _dicAppendEntityUpdateSetWithColumnMethods;
    private static ConcurrentDictionary`2<Type, ConcurrentDictionary`2<Type, MethodInfo>> _dicAppendEntityUpdateSetWithColumnMethod;
    private static EntityUtilExtensions();
    [ExtensionAttribute]
public static string GetEntityKeyString(IFreeSql orm, Type entityType, object entity, bool genGuid, string splitString);
    [ExtensionAttribute]
public static Object[] GetEntityKeyValues(IFreeSql orm, Type entityType, object entity);
    [ExtensionAttribute]
public static object GetEntityValueWithPropertyName(IFreeSql orm, Type entityType, object entity, string propertyName);
    [ExtensionAttribute]
public static object GetPropertyValue(TableInfo table, object entity, string propertyName);
    [ExtensionAttribute]
public static string GetEntityString(IFreeSql orm, Type entityType, object entity);
    [ExtensionAttribute]
public static void MapEntityValue(IFreeSql orm, Type entityType, object entityFrom, object entityTo);
    [ExtensionAttribute]
public static void MapEntityKeyValue(IFreeSql orm, Type entityType, object entityFrom, object entityTo);
    [ExtensionAttribute]
public static void SetEntityIdentityValueWithPrimary(IFreeSql orm, Type entityType, object entity, long idtval);
    [ExtensionAttribute]
public static long GetEntityIdentityValueWithPrimary(IFreeSql orm, Type entityType, object entity);
    [ExtensionAttribute]
public static void ClearEntityPrimaryValueWithIdentityAndGuid(IFreeSql orm, Type entityType, object entity);
    [ExtensionAttribute]
public static void ClearEntityPrimaryValueWithIdentity(IFreeSql orm, Type entityType, object entity);
    [ExtensionAttribute]
public static String[] CompareEntityValueReturnColumns(IFreeSql orm, Type entityType, object entity1, object entity2, bool isEqual);
    [ExtensionAttribute]
public static void SetEntityIncrByWithPropertyName(IFreeSql orm, Type entityType, object entity, string propertyName, int incrBy);
    [ExtensionAttribute]
public static void SetEntityValueWithPropertyName(IFreeSql orm, Type entityType, object entity, string propertyName, object value);
    [ExtensionAttribute]
public static void SetPropertyValue(TableInfo table, object entity, string propertyName, object value);
    [ExtensionAttribute]
public static void AppendEntityUpdateSetWithColumn(IUpdate`1<TEntity> update, Type columnType, LambdaExpression setExp);
}
public enum FreeSql.FieldAliasOptions : Enum {
    public int value__;
    public static FieldAliasOptions AsIndex;
    public static FieldAliasOptions AsProperty;
    public static FieldAliasOptions AsEmpty;
}
public class FreeSql.FreeSqlBuilder : object {
    private DataType _dataType;
    private string _masterConnectionString;
    private String[] _slaveConnectionString;
    private Int32[] _slaveWeights;
    private Func`1<DbConnection> _connectionFactory;
    private bool _isAutoSyncStructure;
    private bool _isConfigEntityFromDbFirst;
    private bool _isNoneCommandParameter;
    private bool _isGenerateCommandParameterWithLambda;
    private bool _isLazyLoading;
    private bool _isExitAutoDisposePool;
    private bool _isQuoteSqlName;
    private Nullable`1<bool> _isAdoConnectionPool;
    private MappingPriorityType[] _mappingPriorityTypes;
    private NameConvertType _nameConvertType;
    private Action`1<DbCommand> _aopCommandExecuting;
    private Action`2<DbCommand, string> _aopCommandExecuted;
    private Type _providerType;
    private static int _isTypeHandlered;
    private ConcurrentDictionary`2<Type, bool> _dicTypeHandlerTypes;
    private object _concurrentObj;
    public FreeSqlBuilder UseConnectionString(DataType dataType, string connectionString, Type providerType);
    public FreeSqlBuilder UseCustomTableEntityCacheFactory(Func`1<ConcurrentDictionary`2<DataType, ConcurrentDictionary`2<Type, TableInfo>>> factory);
    public FreeSqlBuilder UseAdoConnectionPool(bool value);
    public FreeSqlBuilder UseSlave(String[] slaveConnectionString);
    public FreeSqlBuilder UseSlaveWeight(Int32[] slaveWeights);
    public FreeSqlBuilder UseConnectionFactory(DataType dataType, Func`1<DbConnection> connectionFactory, Type providerType);
    public FreeSqlBuilder UseAutoSyncStructure(bool value);
    public FreeSqlBuilder UseConfigEntityFromDbFirst(bool value);
    public FreeSqlBuilder UseNoneCommandParameter(bool value);
    public FreeSqlBuilder UseGenerateCommandParameterWithLambda(bool value);
    public FreeSqlBuilder UseLazyLoading(bool value);
    public FreeSqlBuilder UseMonitorCommand(Action`1<DbCommand> executing, Action`2<DbCommand, string> executed);
    public FreeSqlBuilder UseNameConvert(NameConvertType convertType);
    public FreeSqlBuilder UseQuoteSqlName(bool value);
    public FreeSqlBuilder UseMappingPriority(MappingPriorityType mappingType1, MappingPriorityType mappingType2, MappingPriorityType mappingType3);
    public FreeSqlBuilder UseExitAutoDisposePool(bool value);
    public IFreeSql Build();
    public IFreeSql`1<TMark> Build();
    [CompilerGeneratedAttribute]
private void <Build>b__35_0(object s, CommandBeforeEventArgs e);
    [CompilerGeneratedAttribute]
private void <Build>b__35_1(object s, CommandAfterEventArgs e);
    [CompilerGeneratedAttribute]
internal static string <Build>g__PascalCaseToUnderScore|35_2(string str);
    [CompilerGeneratedAttribute]
private void <Build>b__35_5(IObjectPool`1<DbConnection> a);
    [CompilerGeneratedAttribute]
private void <Build>b__35_7(object s, ConfigEntityPropertyEventArgs e);
}
public interface FreeSql.IAdo {
    public IObjectPool`1<DbConnection> MasterPool { get; }
    public List`1<IObjectPool`1<DbConnection>> SlavePools { get; }
    public DataType DataType { get; }
    public string ConnectionString { get; }
    public String[] SlaveConnectionStrings { get; }
    public Guid Identifier { get; }
    public DbTransaction TransactionCurrentThread { get; }
    public abstract virtual IObjectPool`1<DbConnection> get_MasterPool();
    public abstract virtual List`1<IObjectPool`1<DbConnection>> get_SlavePools();
    public abstract virtual DataType get_DataType();
    public abstract virtual string get_ConnectionString();
    public abstract virtual String[] get_SlaveConnectionStrings();
    public abstract virtual Guid get_Identifier();
    public abstract virtual void Transaction(Action handler);
    public abstract virtual void Transaction(IsolationLevel isolationLevel, Action handler);
    public abstract virtual DbTransaction get_TransactionCurrentThread();
    public abstract virtual DbParameter[] GetDbParamtersByObject(object obj);
    public abstract virtual AdoCommandFluent CommandFluent(string cmdText, object parms);
    public abstract virtual bool ExecuteConnectTest(int commandTimeout);
    public abstract virtual void ExecuteReader(Action`1<FetchCallbackArgs`1<DbDataReader>> fetchHandler, CommandType cmdType, string cmdText, DbParameter[] cmdParms);
    public abstract virtual void ExecuteReader(DbTransaction transaction, Action`1<FetchCallbackArgs`1<DbDataReader>> fetchHandler, CommandType cmdType, string cmdText, DbParameter[] cmdParms);
    public abstract virtual void ExecuteReader(DbConnection connection, DbTransaction transaction, Action`1<FetchCallbackArgs`1<DbDataReader>> fetchHandler, CommandType cmdType, string cmdText, int cmdTimeout, DbParameter[] cmdParms);
    public abstract virtual void ExecuteReader(Action`1<FetchCallbackArgs`1<DbDataReader>> fetchHandler, string cmdText, object parms);
    public abstract virtual void ExecuteReader(DbTransaction transaction, Action`1<FetchCallbackArgs`1<DbDataReader>> fetchHandler, string cmdText, object parms);
    public abstract virtual void ExecuteReader(DbConnection connection, DbTransaction transaction, Action`1<FetchCallbackArgs`1<DbDataReader>> fetchHandler, string cmdText, object parms);
    public abstract virtual Object[][] ExecuteArray(CommandType cmdType, string cmdText, DbParameter[] cmdParms);
    public abstract virtual Object[][] ExecuteArray(DbTransaction transaction, CommandType cmdType, string cmdText, DbParameter[] cmdParms);
    public abstract virtual Object[][] ExecuteArray(DbConnection connection, DbTransaction transaction, CommandType cmdType, string cmdText, int cmdTimeout, DbParameter[] cmdParms);
    public abstract virtual Object[][] ExecuteArray(string cmdText, object parms);
    public abstract virtual Object[][] ExecuteArray(DbTransaction transaction, string cmdText, object parms);
    public abstract virtual Object[][] ExecuteArray(DbConnection connection, DbTransaction transaction, string cmdText, object parms);
    public abstract virtual DataSet ExecuteDataSet(CommandType cmdType, string cmdText, DbParameter[] cmdParms);
    public abstract virtual DataSet ExecuteDataSet(DbTransaction transaction, CommandType cmdType, string cmdText, DbParameter[] cmdParms);
    public abstract virtual DataSet ExecuteDataSet(DbConnection connection, DbTransaction transaction, CommandType cmdType, string cmdText, int cmdTimeout, DbParameter[] cmdParms);
    public abstract virtual DataSet ExecuteDataSet(string cmdText, object parms);
    public abstract virtual DataSet ExecuteDataSet(DbTransaction transaction, string cmdText, object parms);
    public abstract virtual DataSet ExecuteDataSet(DbConnection connection, DbTransaction transaction, string cmdText, object parms);
    public abstract virtual DataTable ExecuteDataTable(CommandType cmdType, string cmdText, DbParameter[] cmdParms);
    public abstract virtual DataTable ExecuteDataTable(DbTransaction transaction, CommandType cmdType, string cmdText, DbParameter[] cmdParms);
    public abstract virtual DataTable ExecuteDataTable(DbConnection connection, DbTransaction transaction, CommandType cmdType, string cmdText, int cmdTimeout, DbParameter[] cmdParms);
    public abstract virtual DataTable ExecuteDataTable(string cmdText, object parms);
    public abstract virtual DataTable ExecuteDataTable(DbTransaction transaction, string cmdText, object parms);
    public abstract virtual DataTable ExecuteDataTable(DbConnection connection, DbTransaction transaction, string cmdText, object parms);
    public abstract virtual int ExecuteNonQuery(CommandType cmdType, string cmdText, DbParameter[] cmdParms);
    public abstract virtual int ExecuteNonQuery(DbTransaction transaction, CommandType cmdType, string cmdText, DbParameter[] cmdParms);
    public abstract virtual int ExecuteNonQuery(DbConnection connection, DbTransaction transaction, CommandType cmdType, string cmdText, int cmdTimeout, DbParameter[] cmdParms);
    public abstract virtual int ExecuteNonQuery(DbConnection connection, DbTransaction transaction, CommandType cmdType, string cmdText, int cmdTimeout, Action`1<DbCommand> cmdAfterHandler, DbParameter[] cmdParms);
    public abstract virtual int ExecuteNonQuery(string cmdText, object parms);
    public abstract virtual int ExecuteNonQuery(DbTransaction transaction, string cmdText, object parms);
    public abstract virtual int ExecuteNonQuery(DbConnection connection, DbTransaction transaction, string cmdText, object parms);
    public abstract virtual object ExecuteScalar(CommandType cmdType, string cmdText, DbParameter[] cmdParms);
    public abstract virtual object ExecuteScalar(DbTransaction transaction, CommandType cmdType, string cmdText, DbParameter[] cmdParms);
    public abstract virtual object ExecuteScalar(DbConnection connection, DbTransaction transaction, CommandType cmdType, string cmdText, int cmdTimeout, DbParameter[] cmdParms);
    public abstract virtual object ExecuteScalar(string cmdText, object parms);
    public abstract virtual object ExecuteScalar(DbTransaction transaction, string cmdText, object parms);
    public abstract virtual object ExecuteScalar(DbConnection connection, DbTransaction transaction, string cmdText, object parms);
    public abstract virtual List`1<T> Query(CommandType cmdType, string cmdText, DbParameter[] cmdParms);
    public abstract virtual List`1<T> Query(DbTransaction transaction, CommandType cmdType, string cmdText, DbParameter[] cmdParms);
    public abstract virtual List`1<T> Query(DbConnection connection, DbTransaction transaction, CommandType cmdType, string cmdText, int cmdTimeout, DbParameter[] cmdParms);
    public abstract virtual List`1<T> Query(Type resultType, DbConnection connection, DbTransaction transaction, CommandType cmdType, string cmdText, int cmdTimeout, DbParameter[] cmdParms);
    public abstract virtual T QuerySingle(CommandType cmdType, string cmdText, DbParameter[] cmdParms);
    public abstract virtual List`1<T> Query(string cmdText, object parms);
    public abstract virtual List`1<T> Query(DbTransaction transaction, string cmdText, object parms);
    public abstract virtual List`1<T> Query(DbConnection connection, DbTransaction transaction, string cmdText, object parms);
    public abstract virtual T QuerySingle(string cmdText, object parms);
    public abstract virtual NativeTuple`2<List`1<T1>, List`1<T2>> Query(CommandType cmdType, string cmdText, DbParameter[] cmdParms);
    public abstract virtual NativeTuple`2<List`1<T1>, List`1<T2>> Query(DbTransaction transaction, CommandType cmdType, string cmdText, DbParameter[] cmdParms);
    public abstract virtual NativeTuple`2<List`1<T1>, List`1<T2>> Query(DbConnection connection, DbTransaction transaction, CommandType cmdType, string cmdText, int cmdTimeout, DbParameter[] cmdParms);
    public abstract virtual NativeTuple`2<List`1<T1>, List`1<T2>> Query(string cmdText, object parms);
    public abstract virtual NativeTuple`2<List`1<T1>, List`1<T2>> Query(DbTransaction transaction, string cmdText, object parms);
    public abstract virtual NativeTuple`2<List`1<T1>, List`1<T2>> Query(DbConnection connection, DbTransaction transaction, string cmdText, object parms);
    public abstract virtual NativeTuple`3<List`1<T1>, List`1<T2>, List`1<T3>> Query(CommandType cmdType, string cmdText, DbParameter[] cmdParms);
    public abstract virtual NativeTuple`3<List`1<T1>, List`1<T2>, List`1<T3>> Query(DbTransaction transaction, CommandType cmdType, string cmdText, DbParameter[] cmdParms);
    public abstract virtual NativeTuple`3<List`1<T1>, List`1<T2>, List`1<T3>> Query(DbConnection connection, DbTransaction transaction, CommandType cmdType, string cmdText, int cmdTimeout, DbParameter[] cmdParms);
    public abstract virtual NativeTuple`3<List`1<T1>, List`1<T2>, List`1<T3>> Query(string cmdText, object parms);
    public abstract virtual NativeTuple`3<List`1<T1>, List`1<T2>, List`1<T3>> Query(DbTransaction transaction, string cmdText, object parms);
    public abstract virtual NativeTuple`3<List`1<T1>, List`1<T2>, List`1<T3>> Query(DbConnection connection, DbTransaction transaction, string cmdText, object parms);
    public abstract virtual NativeTuple`4<List`1<T1>, List`1<T2>, List`1<T3>, List`1<T4>> Query(CommandType cmdType, string cmdText, DbParameter[] cmdParms);
    public abstract virtual NativeTuple`4<List`1<T1>, List`1<T2>, List`1<T3>, List`1<T4>> Query(DbTransaction transaction, CommandType cmdType, string cmdText, DbParameter[] cmdParms);
    public abstract virtual NativeTuple`4<List`1<T1>, List`1<T2>, List`1<T3>, List`1<T4>> Query(DbConnection connection, DbTransaction transaction, CommandType cmdType, string cmdText, int cmdTimeout, DbParameter[] cmdParms);
    public abstract virtual NativeTuple`4<List`1<T1>, List`1<T2>, List`1<T3>, List`1<T4>> Query(string cmdText, object parms);
    public abstract virtual NativeTuple`4<List`1<T1>, List`1<T2>, List`1<T3>, List`1<T4>> Query(DbTransaction transaction, string cmdText, object parms);
    public abstract virtual NativeTuple`4<List`1<T1>, List`1<T2>, List`1<T3>, List`1<T4>> Query(DbConnection connection, DbTransaction transaction, string cmdText, object parms);
    public abstract virtual NativeTuple`5<List`1<T1>, List`1<T2>, List`1<T3>, List`1<T4>, List`1<T5>> Query(CommandType cmdType, string cmdText, DbParameter[] cmdParms);
    public abstract virtual NativeTuple`5<List`1<T1>, List`1<T2>, List`1<T3>, List`1<T4>, List`1<T5>> Query(DbTransaction transaction, CommandType cmdType, string cmdText, DbParameter[] cmdParms);
    public abstract virtual NativeTuple`5<List`1<T1>, List`1<T2>, List`1<T3>, List`1<T4>, List`1<T5>> Query(DbConnection connection, DbTransaction transaction, CommandType cmdType, string cmdText, int cmdTimeout, DbParameter[] cmdParms);
    public abstract virtual NativeTuple`5<List`1<T1>, List`1<T2>, List`1<T3>, List`1<T4>, List`1<T5>> Query(string cmdText, object parms);
    public abstract virtual NativeTuple`5<List`1<T1>, List`1<T2>, List`1<T3>, List`1<T4>, List`1<T5>> Query(DbTransaction transaction, string cmdText, object parms);
    public abstract virtual NativeTuple`5<List`1<T1>, List`1<T2>, List`1<T3>, List`1<T4>, List`1<T5>> Query(DbConnection connection, DbTransaction transaction, string cmdText, object parms);
    public abstract virtual Task`1<bool> ExecuteConnectTestAsync(int commandTimeout, CancellationToken cancellationToken);
    public abstract virtual Task ExecuteReaderAsync(Func`2<FetchCallbackArgs`1<DbDataReader>, Task> readerHander, CommandType cmdType, string cmdText, DbParameter[] cmdParms, CancellationToken cancellationToken);
    public abstract virtual Task ExecuteReaderAsync(DbTransaction transaction, Func`2<FetchCallbackArgs`1<DbDataReader>, Task> readerHander, CommandType cmdType, string cmdText, DbParameter[] cmdParms, CancellationToken cancellationToken);
    public abstract virtual Task ExecuteReaderAsync(DbConnection connection, DbTransaction transaction, Func`2<FetchCallbackArgs`1<DbDataReader>, Task> readerHander, CommandType cmdType, string cmdText, int cmdTimeout, DbParameter[] cmdParms, CancellationToken cancellationToken);
    public abstract virtual Task ExecuteReaderAsync(Func`2<FetchCallbackArgs`1<DbDataReader>, Task> readerHander, string cmdText, object parms, CancellationToken cancellationToken);
    public abstract virtual Task ExecuteReaderAsync(DbTransaction transaction, Func`2<FetchCallbackArgs`1<DbDataReader>, Task> readerHander, string cmdText, object parms, CancellationToken cancellationToken);
    public abstract virtual Task ExecuteReaderAsync(DbConnection connection, DbTransaction transaction, Func`2<FetchCallbackArgs`1<DbDataReader>, Task> readerHander, string cmdText, object parms, CancellationToken cancellationToken);
    public abstract virtual Task`1<Object[][]> ExecuteArrayAsync(CommandType cmdType, string cmdText, DbParameter[] cmdParms, CancellationToken cancellationToken);
    public abstract virtual Task`1<Object[][]> ExecuteArrayAsync(DbTransaction transaction, CommandType cmdType, string cmdText, DbParameter[] cmdParms, CancellationToken cancellationToken);
    public abstract virtual Task`1<Object[][]> ExecuteArrayAsync(DbConnection connection, DbTransaction transaction, CommandType cmdType, string cmdText, int cmdTimeout, DbParameter[] cmdParms, CancellationToken cancellationToken);
    public abstract virtual Task`1<Object[][]> ExecuteArrayAsync(string cmdText, object parms, CancellationToken cancellationToken);
    public abstract virtual Task`1<Object[][]> ExecuteArrayAsync(DbTransaction transaction, string cmdText, object parms, CancellationToken cancellationToken);
    public abstract virtual Task`1<Object[][]> ExecuteArrayAsync(DbConnection connection, DbTransaction transaction, string cmdText, object parms, CancellationToken cancellationToken);
    public abstract virtual Task`1<DataSet> ExecuteDataSetAsync(CommandType cmdType, string cmdText, DbParameter[] cmdParms, CancellationToken cancellationToken);
    public abstract virtual Task`1<DataSet> ExecuteDataSetAsync(DbTransaction transaction, CommandType cmdType, string cmdText, DbParameter[] cmdParms, CancellationToken cancellationToken);
    public abstract virtual Task`1<DataSet> ExecuteDataSetAsync(DbConnection connection, DbTransaction transaction, CommandType cmdType, string cmdText, int cmdTimeout, DbParameter[] cmdParms, CancellationToken cancellationToken);
    public abstract virtual Task`1<DataSet> ExecuteDataSetAsync(string cmdText, object parms, CancellationToken cancellationToken);
    public abstract virtual Task`1<DataSet> ExecuteDataSetAsync(DbTransaction transaction, string cmdText, object parms, CancellationToken cancellationToken);
    public abstract virtual Task`1<DataSet> ExecuteDataSetAsync(DbConnection connection, DbTransaction transaction, string cmdText, object parms, CancellationToken cancellationToken);
    public abstract virtual Task`1<DataTable> ExecuteDataTableAsync(CommandType cmdType, string cmdText, DbParameter[] cmdParms, CancellationToken cancellationToken);
    public abstract virtual Task`1<DataTable> ExecuteDataTableAsync(DbTransaction transaction, CommandType cmdType, string cmdText, DbParameter[] cmdParms, CancellationToken cancellationToken);
    public abstract virtual Task`1<DataTable> ExecuteDataTableAsync(DbConnection connection, DbTransaction transaction, CommandType cmdType, string cmdText, int cmdTimeout, DbParameter[] cmdParms, CancellationToken cancellationToken);
    public abstract virtual Task`1<DataTable> ExecuteDataTableAsync(string cmdText, object parms, CancellationToken cancellationToken);
    public abstract virtual Task`1<DataTable> ExecuteDataTableAsync(DbTransaction transaction, string cmdText, object parms, CancellationToken cancellationToken);
    public abstract virtual Task`1<DataTable> ExecuteDataTableAsync(DbConnection connection, DbTransaction transaction, string cmdText, object parms, CancellationToken cancellationToken);
    public abstract virtual Task`1<int> ExecuteNonQueryAsync(CommandType cmdType, string cmdText, DbParameter[] cmdParms, CancellationToken cancellationToken);
    public abstract virtual Task`1<int> ExecuteNonQueryAsync(DbTransaction transaction, CommandType cmdType, string cmdText, DbParameter[] cmdParms, CancellationToken cancellationToken);
    public abstract virtual Task`1<int> ExecuteNonQueryAsync(DbConnection connection, DbTransaction transaction, CommandType cmdType, string cmdText, int cmdTimeout, DbParameter[] cmdParms, CancellationToken cancellationToken);
    public abstract virtual Task`1<int> ExecuteNonQueryAsync(DbConnection connection, DbTransaction transaction, CommandType cmdType, string cmdText, int cmdTimeout, Func`2<DbCommand, Task> cmdAfterHandler, DbParameter[] cmdParms, CancellationToken cancellationToken);
    public abstract virtual Task`1<int> ExecuteNonQueryAsync(string cmdText, object parms, CancellationToken cancellationToken);
    public abstract virtual Task`1<int> ExecuteNonQueryAsync(DbTransaction transaction, string cmdText, object parms, CancellationToken cancellationToken);
    public abstract virtual Task`1<int> ExecuteNonQueryAsync(DbConnection connection, DbTransaction transaction, string cmdText, object parms, CancellationToken cancellationToken);
    public abstract virtual Task`1<object> ExecuteScalarAsync(CommandType cmdType, string cmdText, DbParameter[] cmdParms, CancellationToken cancellationToken);
    public abstract virtual Task`1<object> ExecuteScalarAsync(DbTransaction transaction, CommandType cmdType, string cmdText, DbParameter[] cmdParms, CancellationToken cancellationToken);
    public abstract virtual Task`1<object> ExecuteScalarAsync(DbConnection connection, DbTransaction transaction, CommandType cmdType, string cmdText, int cmdTimeout, DbParameter[] cmdParms, CancellationToken cancellationToken);
    public abstract virtual Task`1<object> ExecuteScalarAsync(string cmdText, object parms, CancellationToken cancellationToken);
    public abstract virtual Task`1<object> ExecuteScalarAsync(DbTransaction transaction, string cmdText, object parms, CancellationToken cancellationToken);
    public abstract virtual Task`1<object> ExecuteScalarAsync(DbConnection connection, DbTransaction transaction, string cmdText, object parms, CancellationToken cancellationToken);
    public abstract virtual Task`1<List`1<T>> QueryAsync(CommandType cmdType, string cmdText, DbParameter[] cmdParms, CancellationToken cancellationToken);
    public abstract virtual Task`1<List`1<T>> QueryAsync(DbTransaction transaction, CommandType cmdType, string cmdText, DbParameter[] cmdParms, CancellationToken cancellationToken);
    public abstract virtual Task`1<List`1<T>> QueryAsync(DbConnection connection, DbTransaction transaction, CommandType cmdType, string cmdText, int cmdTimeout, DbParameter[] cmdParms, CancellationToken cancellationToken);
    public abstract virtual Task`1<List`1<T>> QueryAsync(Type resultType, DbConnection connection, DbTransaction transaction, CommandType cmdType, string cmdText, int cmdTimeout, DbParameter[] cmdParms, CancellationToken cancellationToken);
    public abstract virtual Task`1<T> QuerySingleAsync(string cmdText, object parms, CancellationToken cancellationToken);
    public abstract virtual Task`1<List`1<T>> QueryAsync(string cmdText, object parms, CancellationToken cancellationToken);
    public abstract virtual Task`1<List`1<T>> QueryAsync(DbTransaction transaction, string cmdText, object parms, CancellationToken cancellationToken);
    public abstract virtual Task`1<List`1<T>> QueryAsync(DbConnection connection, DbTransaction transaction, string cmdText, object parms, CancellationToken cancellationToken);
    public abstract virtual Task`1<T> QuerySingleAsync(CommandType cmdType, string cmdText, DbParameter[] cmdParms, CancellationToken cancellationToken);
    public abstract virtual Task`1<NativeTuple`2<List`1<T1>, List`1<T2>>> QueryAsync(CommandType cmdType, string cmdText, DbParameter[] cmdParms, CancellationToken cancellationToken);
    public abstract virtual Task`1<NativeTuple`2<List`1<T1>, List`1<T2>>> QueryAsync(DbTransaction transaction, CommandType cmdType, string cmdText, DbParameter[] cmdParms, CancellationToken cancellationToken);
    public abstract virtual Task`1<NativeTuple`2<List`1<T1>, List`1<T2>>> QueryAsync(DbConnection connection, DbTransaction transaction, CommandType cmdType, string cmdText, int cmdTimeout, DbParameter[] cmdParms, CancellationToken cancellationToken);
    public abstract virtual Task`1<NativeTuple`2<List`1<T1>, List`1<T2>>> QueryAsync(string cmdText, object parms, CancellationToken cancellationToken);
    public abstract virtual Task`1<NativeTuple`2<List`1<T1>, List`1<T2>>> QueryAsync(DbTransaction transaction, string cmdText, object parms, CancellationToken cancellationToken);
    public abstract virtual Task`1<NativeTuple`2<List`1<T1>, List`1<T2>>> QueryAsync(DbConnection connection, DbTransaction transaction, string cmdText, object parms, CancellationToken cancellationToken);
    public abstract virtual Task`1<NativeTuple`3<List`1<T1>, List`1<T2>, List`1<T3>>> QueryAsync(CommandType cmdType, string cmdText, DbParameter[] cmdParms, CancellationToken cancellationToken);
    public abstract virtual Task`1<NativeTuple`3<List`1<T1>, List`1<T2>, List`1<T3>>> QueryAsync(DbTransaction transaction, CommandType cmdType, string cmdText, DbParameter[] cmdParms, CancellationToken cancellationToken);
    public abstract virtual Task`1<NativeTuple`3<List`1<T1>, List`1<T2>, List`1<T3>>> QueryAsync(DbConnection connection, DbTransaction transaction, CommandType cmdType, string cmdText, int cmdTimeout, DbParameter[] cmdParms, CancellationToken cancellationToken);
    public abstract virtual Task`1<NativeTuple`3<List`1<T1>, List`1<T2>, List`1<T3>>> QueryAsync(string cmdText, object parms, CancellationToken cancellationToken);
    public abstract virtual Task`1<NativeTuple`3<List`1<T1>, List`1<T2>, List`1<T3>>> QueryAsync(DbTransaction transaction, string cmdText, object parms, CancellationToken cancellationToken);
    public abstract virtual Task`1<NativeTuple`3<List`1<T1>, List`1<T2>, List`1<T3>>> QueryAsync(DbConnection connection, DbTransaction transaction, string cmdText, object parms, CancellationToken cancellationToken);
    public abstract virtual Task`1<NativeTuple`4<List`1<T1>, List`1<T2>, List`1<T3>, List`1<T4>>> QueryAsync(CommandType cmdType, string cmdText, DbParameter[] cmdParms, CancellationToken cancellationToken);
    public abstract virtual Task`1<NativeTuple`4<List`1<T1>, List`1<T2>, List`1<T3>, List`1<T4>>> QueryAsync(DbTransaction transaction, CommandType cmdType, string cmdText, DbParameter[] cmdParms, CancellationToken cancellationToken);
    public abstract virtual Task`1<NativeTuple`4<List`1<T1>, List`1<T2>, List`1<T3>, List`1<T4>>> QueryAsync(DbConnection connection, DbTransaction transaction, CommandType cmdType, string cmdText, int cmdTimeout, DbParameter[] cmdParms, CancellationToken cancellationToken);
    public abstract virtual Task`1<NativeTuple`4<List`1<T1>, List`1<T2>, List`1<T3>, List`1<T4>>> QueryAsync(string cmdText, object parms, CancellationToken cancellationToken);
    public abstract virtual Task`1<NativeTuple`4<List`1<T1>, List`1<T2>, List`1<T3>, List`1<T4>>> QueryAsync(DbTransaction transaction, string cmdText, object parms, CancellationToken cancellationToken);
    public abstract virtual Task`1<NativeTuple`4<List`1<T1>, List`1<T2>, List`1<T3>, List`1<T4>>> QueryAsync(DbConnection connection, DbTransaction transaction, string cmdText, object parms, CancellationToken cancellationToken);
    public abstract virtual Task`1<NativeTuple`5<List`1<T1>, List`1<T2>, List`1<T3>, List`1<T4>, List`1<T5>>> QueryAsync(CommandType cmdType, string cmdText, DbParameter[] cmdParms, CancellationToken cancellationToken);
    public abstract virtual Task`1<NativeTuple`5<List`1<T1>, List`1<T2>, List`1<T3>, List`1<T4>, List`1<T5>>> QueryAsync(DbTransaction transaction, CommandType cmdType, string cmdText, DbParameter[] cmdParms, CancellationToken cancellationToken);
    public abstract virtual Task`1<NativeTuple`5<List`1<T1>, List`1<T2>, List`1<T3>, List`1<T4>, List`1<T5>>> QueryAsync(DbConnection connection, DbTransaction transaction, CommandType cmdType, string cmdText, int cmdTimeout, DbParameter[] cmdParms, CancellationToken cancellationToken);
    public abstract virtual Task`1<NativeTuple`5<List`1<T1>, List`1<T2>, List`1<T3>, List`1<T4>, List`1<T5>>> QueryAsync(string cmdText, object parms, CancellationToken cancellationToken);
    public abstract virtual Task`1<NativeTuple`5<List`1<T1>, List`1<T2>, List`1<T3>, List`1<T4>, List`1<T5>>> QueryAsync(DbTransaction transaction, string cmdText, object parms, CancellationToken cancellationToken);
    public abstract virtual Task`1<NativeTuple`5<List`1<T1>, List`1<T2>, List`1<T3>, List`1<T4>, List`1<T5>>> QueryAsync(DbConnection connection, DbTransaction transaction, string cmdText, object parms, CancellationToken cancellationToken);
}
public interface FreeSql.IAop {
    public EventHandler`1<ParseExpressionEventArgs> ParseExpressionHandler { get; }
    public EventHandler`1<ConfigEntityEventArgs> ConfigEntityHandler { get; }
    public EventHandler`1<ConfigEntityPropertyEventArgs> ConfigEntityPropertyHandler { get; }
    public EventHandler`1<CurdBeforeEventArgs> CurdBeforeHandler { get; }
    public EventHandler`1<CurdAfterEventArgs> CurdAfterHandler { get; }
    public EventHandler`1<SyncStructureBeforeEventArgs> SyncStructureBeforeHandler { get; }
    public EventHandler`1<SyncStructureAfterEventArgs> SyncStructureAfterHandler { get; }
    public EventHandler`1<AuditValueEventArgs> AuditValueHandler { get; }
    public EventHandler`1<AuditDataReaderEventArgs> AuditDataReaderHandler { get; }
    public EventHandler`1<CommandBeforeEventArgs> CommandBeforeHandler { get; }
    public EventHandler`1<CommandAfterEventArgs> CommandAfterHandler { get; }
    public EventHandler`1<TraceBeforeEventArgs> TraceBeforeHandler { get; }
    public EventHandler`1<TraceAfterEventArgs> TraceAfterHandler { get; }
    [CompilerGeneratedAttribute]
public abstract virtual void add_ParseExpression(EventHandler`1<ParseExpressionEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ParseExpression(EventHandler`1<ParseExpressionEventArgs> value);
    public abstract virtual EventHandler`1<ParseExpressionEventArgs> get_ParseExpressionHandler();
    [CompilerGeneratedAttribute]
public abstract virtual void add_ConfigEntity(EventHandler`1<ConfigEntityEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ConfigEntity(EventHandler`1<ConfigEntityEventArgs> value);
    public abstract virtual EventHandler`1<ConfigEntityEventArgs> get_ConfigEntityHandler();
    [CompilerGeneratedAttribute]
public abstract virtual void add_ConfigEntityProperty(EventHandler`1<ConfigEntityPropertyEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ConfigEntityProperty(EventHandler`1<ConfigEntityPropertyEventArgs> value);
    public abstract virtual EventHandler`1<ConfigEntityPropertyEventArgs> get_ConfigEntityPropertyHandler();
    [CompilerGeneratedAttribute]
public abstract virtual void add_CurdBefore(EventHandler`1<CurdBeforeEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_CurdBefore(EventHandler`1<CurdBeforeEventArgs> value);
    public abstract virtual EventHandler`1<CurdBeforeEventArgs> get_CurdBeforeHandler();
    [CompilerGeneratedAttribute]
public abstract virtual void add_CurdAfter(EventHandler`1<CurdAfterEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_CurdAfter(EventHandler`1<CurdAfterEventArgs> value);
    public abstract virtual EventHandler`1<CurdAfterEventArgs> get_CurdAfterHandler();
    [CompilerGeneratedAttribute]
public abstract virtual void add_SyncStructureBefore(EventHandler`1<SyncStructureBeforeEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_SyncStructureBefore(EventHandler`1<SyncStructureBeforeEventArgs> value);
    public abstract virtual EventHandler`1<SyncStructureBeforeEventArgs> get_SyncStructureBeforeHandler();
    [CompilerGeneratedAttribute]
public abstract virtual void add_SyncStructureAfter(EventHandler`1<SyncStructureAfterEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_SyncStructureAfter(EventHandler`1<SyncStructureAfterEventArgs> value);
    public abstract virtual EventHandler`1<SyncStructureAfterEventArgs> get_SyncStructureAfterHandler();
    [CompilerGeneratedAttribute]
public abstract virtual void add_AuditValue(EventHandler`1<AuditValueEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_AuditValue(EventHandler`1<AuditValueEventArgs> value);
    public abstract virtual EventHandler`1<AuditValueEventArgs> get_AuditValueHandler();
    [CompilerGeneratedAttribute]
public abstract virtual void add_AuditDataReader(EventHandler`1<AuditDataReaderEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_AuditDataReader(EventHandler`1<AuditDataReaderEventArgs> value);
    public abstract virtual EventHandler`1<AuditDataReaderEventArgs> get_AuditDataReaderHandler();
    [CompilerGeneratedAttribute]
public abstract virtual void add_CommandBefore(EventHandler`1<CommandBeforeEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_CommandBefore(EventHandler`1<CommandBeforeEventArgs> value);
    public abstract virtual EventHandler`1<CommandBeforeEventArgs> get_CommandBeforeHandler();
    [CompilerGeneratedAttribute]
public abstract virtual void add_CommandAfter(EventHandler`1<CommandAfterEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_CommandAfter(EventHandler`1<CommandAfterEventArgs> value);
    public abstract virtual EventHandler`1<CommandAfterEventArgs> get_CommandAfterHandler();
    [CompilerGeneratedAttribute]
public abstract virtual void add_TraceBefore(EventHandler`1<TraceBeforeEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_TraceBefore(EventHandler`1<TraceBeforeEventArgs> value);
    public abstract virtual EventHandler`1<TraceBeforeEventArgs> get_TraceBeforeHandler();
    [CompilerGeneratedAttribute]
public abstract virtual void add_TraceAfter(EventHandler`1<TraceAfterEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_TraceAfter(EventHandler`1<TraceAfterEventArgs> value);
    public abstract virtual EventHandler`1<TraceAfterEventArgs> get_TraceAfterHandler();
}
public interface FreeSql.ICodeFirst {
    public bool IsAutoSyncStructure { get; public set; }
    public bool IsSyncStructureToLower { get; public set; }
    public bool IsSyncStructureToUpper { get; public set; }
    public bool IsConfigEntityFromDbFirst { get; public set; }
    public bool IsNoneCommandParameter { get; public set; }
    public bool IsGenerateCommandParameterWithLambda { get; public set; }
    public bool IsLazyLoading { get; public set; }
    public abstract virtual bool get_IsAutoSyncStructure();
    public abstract virtual void set_IsAutoSyncStructure(bool value);
    public abstract virtual bool get_IsSyncStructureToLower();
    public abstract virtual void set_IsSyncStructureToLower(bool value);
    public abstract virtual bool get_IsSyncStructureToUpper();
    public abstract virtual void set_IsSyncStructureToUpper(bool value);
    public abstract virtual bool get_IsConfigEntityFromDbFirst();
    public abstract virtual void set_IsConfigEntityFromDbFirst(bool value);
    public abstract virtual bool get_IsNoneCommandParameter();
    public abstract virtual void set_IsNoneCommandParameter(bool value);
    public abstract virtual bool get_IsGenerateCommandParameterWithLambda();
    public abstract virtual void set_IsGenerateCommandParameterWithLambda(bool value);
    public abstract virtual bool get_IsLazyLoading();
    public abstract virtual void set_IsLazyLoading(bool value);
    public abstract virtual string GetComparisonDDLStatements();
    public abstract virtual string GetComparisonDDLStatements(Type[] entityTypes);
    public abstract virtual string GetComparisonDDLStatements(Type entityType, string tableName);
    public abstract virtual string GetComparisonDDLStatements(TableInfo tableSchema, string tableName);
    public abstract virtual void SyncStructure();
    public abstract virtual void SyncStructure(Type[] entityTypes);
    public abstract virtual void SyncStructure(Type entityType, string tableName, bool isForceSync);
    public abstract virtual void SyncStructure(TableInfo tableSchema, string tableName, bool isForceSync);
    public abstract virtual DbInfoResult GetDbInfo(Type type);
    public abstract virtual ICodeFirst ConfigEntity(Action`1<TableFluent`1<T>> entity);
    public abstract virtual ICodeFirst ConfigEntity(Type type, Action`1<TableFluent> entity);
    public abstract virtual TableAttribute GetConfigEntity(Type type);
    public abstract virtual TableInfo GetTableByEntity(Type type);
}
public interface FreeSql.IDbFirst {
    public abstract virtual List`1<string> GetDatabases();
    public abstract virtual List`1<DbTableInfo> GetTablesByDatabase(String[] database);
    public abstract virtual DbTableInfo GetTableByName(string name, bool ignoreCase);
    public abstract virtual bool ExistsTable(string name, bool ignoreCase);
    public abstract virtual int GetDbType(DbColumnInfo column);
    public abstract virtual string GetCsConvert(DbColumnInfo column);
    public abstract virtual string GetCsTypeValue(DbColumnInfo column);
    public abstract virtual string GetCsType(DbColumnInfo column);
    public abstract virtual Type GetCsTypeInfo(DbColumnInfo column);
    public abstract virtual string GetDataReaderMethod(DbColumnInfo column);
    public abstract virtual string GetCsStringify(DbColumnInfo column);
    public abstract virtual string GetCsParse(DbColumnInfo column);
    public abstract virtual List`1<DbEnumInfo> GetEnumsByDatabase(String[] database);
}
public interface FreeSql.IDelete`1 {
    public abstract virtual IDelete`1<T1> WithTransaction(DbTransaction transaction);
    public abstract virtual IDelete`1<T1> WithConnection(DbConnection connection);
    public abstract virtual IDelete`1<T1> CommandTimeout(int timeout);
    public abstract virtual IDelete`1<T1> Where(Expression`1<Func`2<T1, bool>> exp);
    public abstract virtual IDelete`1<T1> WhereIf(bool condition, Expression`1<Func`2<T1, bool>> exp);
    public abstract virtual IDelete`1<T1> Where(string sql, object parms);
    public abstract virtual IDelete`1<T1> WhereIf(bool condition, string sql, object parms);
    public abstract virtual IDelete`1<T1> Where(T1 item);
    public abstract virtual IDelete`1<T1> Where(IEnumerable`1<T1> items);
    public abstract virtual IDelete`1<T1> WhereDynamic(object dywhere, bool not);
    public abstract virtual IDelete`1<T1> WhereDynamicFilter(DynamicFilterInfo filter);
    public abstract virtual IDelete`1<T1> DisableGlobalFilter(String[] name);
    public abstract virtual IDelete`1<T1> AsTable(Func`2<string, string> tableRule);
    public abstract virtual IDelete`1<T1> AsTable(string tableName);
    public abstract virtual IDelete`1<T1> AsType(Type entityType);
    public abstract virtual string ToSql();
    public abstract virtual int ExecuteAffrows();
    public abstract virtual List`1<T1> ExecuteDeleted();
    public abstract virtual Task`1<int> ExecuteAffrowsAsync(CancellationToken cancellationToken);
    public abstract virtual Task`1<List`1<T1>> ExecuteDeletedAsync(CancellationToken cancellationToken);
}
public interface FreeSql.IInsert`1 {
    public abstract virtual IInsert`1<T1> WithTransaction(DbTransaction transaction);
    public abstract virtual IInsert`1<T1> WithConnection(DbConnection connection);
    public abstract virtual IInsert`1<T1> CommandTimeout(int timeout);
    public abstract virtual IInsert`1<T1> AppendData(T1 source);
    public abstract virtual IInsert`1<T1> AppendData(T1[] source);
    public abstract virtual IInsert`1<T1> AppendData(IEnumerable`1<T1> source);
    public abstract virtual IInsert`1<T1> InsertColumns(Expression`1<Func`2<T1, object>> columns);
    public abstract virtual IInsert`1<T1> InsertColumns(String[] columns);
    public abstract virtual IInsert`1<T1> IgnoreColumns(Expression`1<Func`2<T1, object>> columns);
    public abstract virtual IInsert`1<T1> IgnoreColumns(String[] columns);
    public abstract virtual IInsert`1<T1> IgnoreInsertValueSql(Expression`1<Func`2<T1, object>> columns);
    public abstract virtual IInsert`1<T1> InsertIdentity();
    public abstract virtual IInsert`1<T1> NoneParameter(bool isNotCommandParameter);
    public abstract virtual IInsert`1<T1> BatchOptions(int valuesLimit, int parameterLimit, bool autoTransaction);
    public abstract virtual IInsert`1<T1> BatchProgress(Action`1<BatchProgressStatus`1<T1>> callback);
    public abstract virtual IInsert`1<T1> AsTable(Func`2<string, string> tableRule);
    public abstract virtual IInsert`1<T1> AsTable(string tableName);
    public abstract virtual IInsert`1<T1> AsType(Type entityType);
    public abstract virtual string ToSql();
    public abstract virtual int ExecuteAffrows();
    public abstract virtual long ExecuteIdentity();
    public abstract virtual List`1<T1> ExecuteInserted();
    public abstract virtual DataTable ToDataTable();
    public abstract virtual Task`1<int> ExecuteAffrowsAsync(CancellationToken cancellationToken);
    public abstract virtual Task`1<long> ExecuteIdentityAsync(CancellationToken cancellationToken);
    public abstract virtual Task`1<List`1<T1>> ExecuteInsertedAsync(CancellationToken cancellationToken);
}
public interface FreeSql.IInsertOrUpdate`1 {
    public abstract virtual IInsertOrUpdate`1<T1> WithTransaction(DbTransaction transaction);
    public abstract virtual IInsertOrUpdate`1<T1> WithConnection(DbConnection connection);
    public abstract virtual IInsertOrUpdate`1<T1> CommandTimeout(int timeout);
    public abstract virtual IInsertOrUpdate`1<T1> SetSource(T1 source);
    public abstract virtual IInsertOrUpdate`1<T1> SetSource(T1 source, Expression`1<Func`2<T1, object>> tempPrimarys);
    public abstract virtual IInsertOrUpdate`1<T1> SetSource(IEnumerable`1<T1> source, Expression`1<Func`2<T1, object>> tempPrimarys);
    public abstract virtual IInsertOrUpdate`1<T1> SetSource(string sql, Expression`1<Func`2<T1, object>> tempPrimarys);
    public abstract virtual IInsertOrUpdate`1<T1> IfExistsDoNothing();
    public abstract virtual IInsertOrUpdate`1<T1> UpdateColumns(Expression`1<Func`2<T1, object>> columns);
    public abstract virtual IInsertOrUpdate`1<T1> UpdateColumns(String[] columns);
    public abstract virtual IInsertOrUpdate`1<T1> UpdateSet(Expression`1<Func`3<T1, T1, TMember>> exp);
    public abstract virtual IInsertOrUpdate`1<T1> BatchOptions(int rowsLimit, bool autoTransaction);
    public abstract virtual IInsertOrUpdate`1<T1> AsTable(Func`2<string, string> tableRule);
    public abstract virtual IInsertOrUpdate`1<T1> AsTable(string tableName);
    public abstract virtual IInsertOrUpdate`1<T1> AsType(Type entityType);
    public abstract virtual string ToSql();
    public abstract virtual int ExecuteAffrows();
    public abstract virtual Task`1<int> ExecuteAffrowsAsync(CancellationToken cancellationToken);
}
public abstract class FreeSql.Internal.BaseDiyMemberExpression : object {
    public ParameterExpression _lambdaParameter;
    public ReadAnonymousTypeInfo _map;
    public string _field;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ReadAnonymousTypeInfo <ParseExpMapResult>k__BackingField;
    public ReadAnonymousTypeInfo ParseExpMapResult { get; protected set; }
    [CompilerGeneratedAttribute]
public ReadAnonymousTypeInfo get_ParseExpMapResult();
    [CompilerGeneratedAttribute]
protected void set_ParseExpMapResult(ReadAnonymousTypeInfo value);
    public abstract virtual string ParseExp(Expression[] members);
}
public abstract class FreeSql.Internal.CommonExpression : object {
    public CommonUtils _common;
    private AdoProvider _adoPriv;
    internal static int ReadAnonymousFieldAsCsName;
    internal static int ReadAnonymousFieldAsCsNameGroupBy;
    private static Dictionary`2<ExpressionType, string> dicExpressionOperator;
    private static ConcurrentDictionary`2<string, Regex> dicRegexAlias;
    private static ConcurrentDictionary`2<Type, MethodInfo> _dicExpressionLambdaToSqlAsSelectMethodInfo;
    private static ConcurrentDictionary`2<Type, MethodInfo> _dicExpressionLambdaToSqlAsSelectWhereMethodInfo;
    private static ConcurrentDictionary`2<Type, MethodInfo> _dicExpressionLambdaToSqlAsSelectWhereSqlMethodInfo;
    private static ConcurrentDictionary`2<Type, ConcurrentDictionary`2<string, MethodInfo>> _dicExpressionLambdaToSqlAsSelectAggMethodInfo;
    internal static ConcurrentDictionary`2<Type, PropertyInfo> _dicNullableValueProperty;
    private static ConcurrentDictionary`2<Type, Expression> _dicFreeSqlGlobalExtensionsAsSelectExpression;
    private static MethodInfo MethodDateTimeSubtractDateTime;
    private static MethodInfo MethodDateTimeSubtractTimeSpan;
    private static MethodInfo MethodMathFloor;
    private static ConcurrentDictionary`2<Type, bool> _dicTypeExistsExpressionCallAttribute;
    private static ConcurrentDictionary`2<Type, ConcurrentDictionary`2<string, bool>> _dicMethodExistsExpressionCallAttribute;
    private static ConcurrentDictionary`2<Type, FieldInfo[]> _dicTypeExpressionCallClassContextFields;
    private static ThreadLocal`1<List`1<BaseDiyMemberExpression>> _subSelectParentDiyMemExps;
    private static ConcurrentDictionary`2<Type, MethodInfo> _dicSelectMethodToSql;
    private static ConcurrentDictionary`2<Type, ConcurrentDictionary`2<string, bool>> _dicGetWhereCascadeSqlError;
    public AdoProvider _ado { get; }
    public CommonExpression(CommonUtils common);
    private static CommonExpression();
    public AdoProvider get__ado();
    internal string GetFieldAsCsName(string csname);
    internal bool EndsWithDbNestedField(string dbField, string dbNestedField);
    public bool ReadAnonymousField(List`1<SelectTableInfo> _tables, Func`3<Type, string, string> _tableRule, StringBuilder field, ReadAnonymousTypeInfo parent, Int32& index, Expression exp, Select0Provider select, BaseDiyMemberExpression diymemexp, List`1<Item> whereGlobalFilter, List`1<string> findIncludeMany, List`1<Expression> findSubSelectMany, bool isAllDtoMap);
    public object ReadAnonymous(ReadAnonymousTypeInfo parent, DbDataReader dr, Int32& index, bool notRead, ReadAnonymousDbValueRef dbValue, int rowIndex, List`1<NativeTuple`3<string, IList, int>> fillIncludeMany, List`1<NativeTuple`3<Expression, IList, int>> fillSubSelectMany);
    public ColumnInfo SearchColumnByField(List`1<SelectTableInfo> _tables, TableInfo currentTable, string field);
    public string ExpressionSelectColumn_MemberAccess(List`1<SelectTableInfo> _tables, Func`3<Type, string, string> _tableRule, List`1<SelectColumnInfo> _selectColumnMap, SelectTableInfoType tbtype, Expression exp, bool isQuoteName, BaseDiyMemberExpression diymemexp);
    public String[] ExpressionSelectColumns_MemberAccess_New_NewArrayInit(List`1<SelectTableInfo> _tables, Func`3<Type, string, string> _tableRule, Expression exp, bool isQuoteName, BaseDiyMemberExpression diymemexp);
    public string ExpressionWhereLambdaNoneForeignObject(List`1<SelectTableInfo> _tables, Func`3<Type, string, string> _tableRule, TableInfo table, List`1<SelectColumnInfo> _selectColumnMap, Expression exp, BaseDiyMemberExpression diymemexp, List`1<DbParameter> dbParams);
    public string ExpressionWhereLambda(List`1<SelectTableInfo> _tables, Func`3<Type, string, string> _tableRule, Expression exp, BaseDiyMemberExpression diymemexp, List`1<Item> whereGlobalFilter, List`1<DbParameter> dbParams);
    public void ExpressionJoinLambda(List`1<SelectTableInfo> _tables, Func`3<Type, string, string> _tableRule, SelectTableInfoType tbtype, Expression exp, BaseDiyMemberExpression diymemexp, List`1<Item> whereGlobalFilter);
    public string GetBoolString(Expression exp, ColumnInfo column, string sql);
    private static string GetBoolString(string sql);
    public string ExpressionBinary(string oper, Expression leftExp, Expression rightExp, ExpTSC tsc);
    public string ExpressionLambdaToSql(Expression exp, ExpTSC tsc);
    public string ExpressionBinaryBitwise(string oper, Expression leftExp, Expression rightExp, ExpTSC tsc);
    public abstract virtual string ExpressionLambdaToSqlMemberAccessString(MemberExpression exp, ExpTSC tsc);
    public abstract virtual string ExpressionLambdaToSqlMemberAccessDateTime(MemberExpression exp, ExpTSC tsc);
    public abstract virtual string ExpressionLambdaToSqlCallString(MethodCallExpression exp, ExpTSC tsc);
    public abstract virtual string ExpressionLambdaToSqlCallMath(MethodCallExpression exp, ExpTSC tsc);
    public abstract virtual string ExpressionLambdaToSqlCallDateTime(MethodCallExpression exp, ExpTSC tsc);
    public abstract virtual string ExpressionLambdaToSqlCallConvert(MethodCallExpression exp, ExpTSC tsc);
    public abstract virtual string ExpressionLambdaToSqlOther(Expression exp, ExpTSC tsc);
    public string ExpressionConstDateTime(Expression exp);
    public static object ExpressionGetValue(Expression exp, Boolean& success);
    public string GetWhereCascadeSql(SelectTableInfo tb, IEnumerable`1<Item> filters, bool isMultitb);
    public string formatSql(object obj, Type mapType, ColumnInfo mapColumn, List`1<DbParameter> dbParams);
    public List`1<Expression[]> MatchDtoPropertys(SelectTableInfo tb, PropertyInfo dtoProp);
    public static void ParseExpressionNoAsSelect(object sender, ParseExpressionEventArgs e, Func`3<Type, string, string> tableRule, List`1<Item> whereGlobalFilter, List`1<DbParameter> dbParams);
    [CompilerGeneratedAttribute]
private string <ExpressionBinaryBitwise>g__LocalSwithBitResult|38_0(Expression expBit, string r1, string r2);
    [CompilerGeneratedAttribute]
private Expression <MatchDtoPropertys>g__LocalMatch|56_0(Type type, Expression memExp, <>c__DisplayClass56_0& );
    [CompilerGeneratedAttribute]
internal static Expression[] <MatchDtoPropertys>g__LocalGetExpressionPath|56_1(Expression exp);
    [CompilerGeneratedAttribute]
internal static void <ParseExpressionNoAsSelect>g__LocalSetSelectProviderAlias|57_0(string alias, <>c__DisplayClass57_0& );
    [CompilerGeneratedAttribute]
internal static void <ParseExpressionNoAsSelect>g__LocalInitSelectProvider|57_1(<>c__DisplayClass57_0& );
    [CompilerGeneratedAttribute]
internal static Exception <ParseExpressionNoAsSelect>g__throwCallExp|57_3(string message, <>c__DisplayClass57_1& );
}
public abstract class FreeSql.Internal.CommonProvider.AdoProvider : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private IObjectPool`1<DbConnection> <MasterPool>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private List`1<IObjectPool`1<DbConnection>> <SlavePools>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private DataType <DataType>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <ConnectionString>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private String[] <SlaveConnectionStrings>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Guid <Identifier>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private CommonUtils <_util>k__BackingField;
    protected int slaveUnavailables;
    private object slaveLock;
    protected Func`1<DbTransaction> ResolveTransaction;
    private ConcurrentDictionary`2<int, Transaction2> _trans;
    private int _disposeCounter;
    private static ConcurrentDictionary`2<int, Regex> _dicAddslashesReplaceIsNull;
    protected bool IsTracePerformance { get; }
    public IObjectPool`1<DbConnection> MasterPool { get; protected set; }
    public List`1<IObjectPool`1<DbConnection>> SlavePools { get; }
    public DataType DataType { get; }
    public string ConnectionString { get; protected set; }
    public String[] SlaveConnectionStrings { get; protected set; }
    public Guid Identifier { get; protected set; }
    public CommonUtils _util { get; public set; }
    public DbTransaction TransactionCurrentThread { get; }
    public TraceBeforeEventArgs TransactionCurrentThreadAopBefore { get; }
    public AdoProvider(DataType dataType, string connectionString, String[] slaveConnectionStrings);
    private static AdoProvider();
    public abstract virtual void ReturnConnection(IObjectPool`1<DbConnection> pool, Object`1<DbConnection> conn, Exception ex);
    public abstract virtual DbCommand CreateCommand();
    public abstract virtual DbParameter[] GetDbParamtersByObject(string sql, object obj);
    public sealed virtual DbParameter[] GetDbParamtersByObject(object obj);
    protected bool get_IsTracePerformance();
    [CompilerGeneratedAttribute]
public sealed virtual IObjectPool`1<DbConnection> get_MasterPool();
    [CompilerGeneratedAttribute]
protected void set_MasterPool(IObjectPool`1<DbConnection> value);
    [CompilerGeneratedAttribute]
public sealed virtual List`1<IObjectPool`1<DbConnection>> get_SlavePools();
    [CompilerGeneratedAttribute]
public sealed virtual DataType get_DataType();
    [CompilerGeneratedAttribute]
public sealed virtual string get_ConnectionString();
    [CompilerGeneratedAttribute]
protected void set_ConnectionString(string value);
    [CompilerGeneratedAttribute]
public sealed virtual String[] get_SlaveConnectionStrings();
    [CompilerGeneratedAttribute]
protected void set_SlaveConnectionStrings(String[] value);
    [CompilerGeneratedAttribute]
public sealed virtual Guid get_Identifier();
    [CompilerGeneratedAttribute]
protected void set_Identifier(Guid value);
    [CompilerGeneratedAttribute]
public CommonUtils get__util();
    [CompilerGeneratedAttribute]
public void set__util(CommonUtils value);
    private void LoggerException(IObjectPool`1<DbConnection> pool, PrepareCommandResult pc, Exception ex, DateTime dt, StringBuilder logtxt, bool isThrowException);
    internal Dictionary`2<string, PropertyInfo> GetQueryTypeProperties(Type type);
    public sealed virtual AdoCommandFluent CommandFluent(string cmdText, object parms);
    public sealed virtual bool ExecuteConnectTest(int commandTimeout);
    public sealed virtual T QuerySingle(string cmdText, object parms);
    public sealed virtual T QuerySingle(CommandType cmdType, string cmdText, DbParameter[] cmdParms);
    public sealed virtual List`1<T> Query(string cmdText, object parms);
    public sealed virtual List`1<T> Query(DbTransaction transaction, string cmdText, object parms);
    public sealed virtual List`1<T> Query(DbConnection connection, DbTransaction transaction, string cmdText, object parms);
    public sealed virtual List`1<T> Query(CommandType cmdType, string cmdText, DbParameter[] cmdParms);
    public sealed virtual List`1<T> Query(DbTransaction transaction, CommandType cmdType, string cmdText, DbParameter[] cmdParms);
    public sealed virtual List`1<T> Query(DbConnection connection, DbTransaction transaction, CommandType cmdType, string cmdText, int cmdTimeout, DbParameter[] cmdParms);
    public sealed virtual List`1<T> Query(Type resultType, DbConnection connection, DbTransaction transaction, CommandType cmdType, string cmdText, int cmdTimeout, DbParameter[] cmdParms);
    public sealed virtual NativeTuple`2<List`1<T1>, List`1<T2>> Query(string cmdText, object parms);
    public sealed virtual NativeTuple`2<List`1<T1>, List`1<T2>> Query(DbTransaction transaction, string cmdText, object parms);
    public sealed virtual NativeTuple`2<List`1<T1>, List`1<T2>> Query(DbConnection connection, DbTransaction transaction, string cmdText, object parms);
    public sealed virtual NativeTuple`2<List`1<T1>, List`1<T2>> Query(CommandType cmdType, string cmdText, DbParameter[] cmdParms);
    public sealed virtual NativeTuple`2<List`1<T1>, List`1<T2>> Query(DbTransaction transaction, CommandType cmdType, string cmdText, DbParameter[] cmdParms);
    public sealed virtual NativeTuple`2<List`1<T1>, List`1<T2>> Query(DbConnection connection, DbTransaction transaction, CommandType cmdType, string cmdText, int cmdTimeout, DbParameter[] cmdParms);
    public sealed virtual NativeTuple`3<List`1<T1>, List`1<T2>, List`1<T3>> Query(string cmdText, object parms);
    public sealed virtual NativeTuple`3<List`1<T1>, List`1<T2>, List`1<T3>> Query(DbTransaction transaction, string cmdText, object parms);
    public sealed virtual NativeTuple`3<List`1<T1>, List`1<T2>, List`1<T3>> Query(DbConnection connection, DbTransaction transaction, string cmdText, object parms);
    public sealed virtual NativeTuple`3<List`1<T1>, List`1<T2>, List`1<T3>> Query(CommandType cmdType, string cmdText, DbParameter[] cmdParms);
    public sealed virtual NativeTuple`3<List`1<T1>, List`1<T2>, List`1<T3>> Query(DbTransaction transaction, CommandType cmdType, string cmdText, DbParameter[] cmdParms);
    public sealed virtual NativeTuple`3<List`1<T1>, List`1<T2>, List`1<T3>> Query(DbConnection connection, DbTransaction transaction, CommandType cmdType, string cmdText, int cmdTimeout, DbParameter[] cmdParms);
    public sealed virtual NativeTuple`4<List`1<T1>, List`1<T2>, List`1<T3>, List`1<T4>> Query(string cmdText, object parms);
    public sealed virtual NativeTuple`4<List`1<T1>, List`1<T2>, List`1<T3>, List`1<T4>> Query(DbTransaction transaction, string cmdText, object parms);
    public sealed virtual NativeTuple`4<List`1<T1>, List`1<T2>, List`1<T3>, List`1<T4>> Query(DbConnection connection, DbTransaction transaction, string cmdText, object parms);
    public sealed virtual NativeTuple`4<List`1<T1>, List`1<T2>, List`1<T3>, List`1<T4>> Query(CommandType cmdType, string cmdText, DbParameter[] cmdParms);
    public sealed virtual NativeTuple`4<List`1<T1>, List`1<T2>, List`1<T3>, List`1<T4>> Query(DbTransaction transaction, CommandType cmdType, string cmdText, DbParameter[] cmdParms);
    public sealed virtual NativeTuple`4<List`1<T1>, List`1<T2>, List`1<T3>, List`1<T4>> Query(DbConnection connection, DbTransaction transaction, CommandType cmdType, string cmdText, int cmdTimeout, DbParameter[] cmdParms);
    public sealed virtual NativeTuple`5<List`1<T1>, List`1<T2>, List`1<T3>, List`1<T4>, List`1<T5>> Query(string cmdText, object parms);
    public sealed virtual NativeTuple`5<List`1<T1>, List`1<T2>, List`1<T3>, List`1<T4>, List`1<T5>> Query(DbTransaction transaction, string cmdText, object parms);
    public sealed virtual NativeTuple`5<List`1<T1>, List`1<T2>, List`1<T3>, List`1<T4>, List`1<T5>> Query(DbConnection connection, DbTransaction transaction, string cmdText, object parms);
    public sealed virtual NativeTuple`5<List`1<T1>, List`1<T2>, List`1<T3>, List`1<T4>, List`1<T5>> Query(CommandType cmdType, string cmdText, DbParameter[] cmdParms);
    public sealed virtual NativeTuple`5<List`1<T1>, List`1<T2>, List`1<T3>, List`1<T4>, List`1<T5>> Query(DbTransaction transaction, CommandType cmdType, string cmdText, DbParameter[] cmdParms);
    public sealed virtual NativeTuple`5<List`1<T1>, List`1<T2>, List`1<T3>, List`1<T4>, List`1<T5>> Query(DbConnection connection, DbTransaction transaction, CommandType cmdType, string cmdText, int cmdTimeout, DbParameter[] cmdParms);
    public sealed virtual void ExecuteReader(Action`1<FetchCallbackArgs`1<DbDataReader>> fetchHandler, string cmdText, object parms);
    public sealed virtual void ExecuteReader(DbTransaction transaction, Action`1<FetchCallbackArgs`1<DbDataReader>> fetchHandler, string cmdText, object parms);
    public sealed virtual void ExecuteReader(DbConnection connection, DbTransaction transaction, Action`1<FetchCallbackArgs`1<DbDataReader>> fetchHandler, string cmdText, object parms);
    public sealed virtual void ExecuteReader(Action`1<FetchCallbackArgs`1<DbDataReader>> fetchHandler, CommandType cmdType, string cmdText, DbParameter[] cmdParms);
    public sealed virtual void ExecuteReader(DbTransaction transaction, Action`1<FetchCallbackArgs`1<DbDataReader>> fetchHandler, CommandType cmdType, string cmdText, DbParameter[] cmdParms);
    public sealed virtual void ExecuteReader(DbConnection connection, DbTransaction transaction, Action`1<FetchCallbackArgs`1<DbDataReader>> fetchHandler, CommandType cmdType, string cmdText, int cmdTimeout, DbParameter[] cmdParms);
    public void ExecuteReaderMultiple(int multipleResult, DbConnection connection, DbTransaction transaction, Action`2<FetchCallbackArgs`1<DbDataReader>, int> fetchHandler, Action`2<DbDataReader, int> schemaHandler, CommandType cmdType, string cmdText, int cmdTimeout, DbParameter[] cmdParms);
    public sealed virtual Object[][] ExecuteArray(string cmdText, object parms);
    public sealed virtual Object[][] ExecuteArray(DbTransaction transaction, string cmdText, object parms);
    public sealed virtual Object[][] ExecuteArray(DbConnection connection, DbTransaction transaction, string cmdText, object parms);
    public sealed virtual Object[][] ExecuteArray(CommandType cmdType, string cmdText, DbParameter[] cmdParms);
    public sealed virtual Object[][] ExecuteArray(DbTransaction transaction, CommandType cmdType, string cmdText, DbParameter[] cmdParms);
    public sealed virtual Object[][] ExecuteArray(DbConnection connection, DbTransaction transaction, CommandType cmdType, string cmdText, int cmdTimeout, DbParameter[] cmdParms);
    public sealed virtual DataSet ExecuteDataSet(string cmdText, object parms);
    public sealed virtual DataSet ExecuteDataSet(DbTransaction transaction, string cmdText, object parms);
    public sealed virtual DataSet ExecuteDataSet(DbConnection connection, DbTransaction transaction, string cmdText, object parms);
    public sealed virtual DataSet ExecuteDataSet(CommandType cmdType, string cmdText, DbParameter[] cmdParms);
    public sealed virtual DataSet ExecuteDataSet(DbTransaction transaction, CommandType cmdType, string cmdText, DbParameter[] cmdParms);
    public sealed virtual DataSet ExecuteDataSet(DbConnection connection, DbTransaction transaction, CommandType cmdType, string cmdText, int cmdTimeout, DbParameter[] cmdParms);
    public sealed virtual DataTable ExecuteDataTable(string cmdText, object parms);
    public sealed virtual DataTable ExecuteDataTable(DbTransaction transaction, string cmdText, object parms);
    public sealed virtual DataTable ExecuteDataTable(DbConnection connection, DbTransaction transaction, string cmdText, object parms);
    public sealed virtual DataTable ExecuteDataTable(CommandType cmdType, string cmdText, DbParameter[] cmdParms);
    public sealed virtual DataTable ExecuteDataTable(DbTransaction transaction, CommandType cmdType, string cmdText, DbParameter[] cmdParms);
    public sealed virtual DataTable ExecuteDataTable(DbConnection connection, DbTransaction transaction, CommandType cmdType, string cmdText, int cmdTimeout, DbParameter[] cmdParms);
    public sealed virtual int ExecuteNonQuery(string cmdText, object parms);
    public sealed virtual int ExecuteNonQuery(DbTransaction transaction, string cmdText, object parms);
    public sealed virtual int ExecuteNonQuery(DbConnection connection, DbTransaction transaction, string cmdText, object parms);
    public sealed virtual int ExecuteNonQuery(CommandType cmdType, string cmdText, DbParameter[] cmdParms);
    public sealed virtual int ExecuteNonQuery(DbTransaction transaction, CommandType cmdType, string cmdText, DbParameter[] cmdParms);
    public sealed virtual int ExecuteNonQuery(DbConnection connection, DbTransaction transaction, CommandType cmdType, string cmdText, int cmdTimeout, DbParameter[] cmdParms);
    public sealed virtual int ExecuteNonQuery(DbConnection connection, DbTransaction transaction, CommandType cmdType, string cmdText, int cmdTimeout, Action`1<DbCommand> cmdAfterHandler, DbParameter[] cmdParms);
    public sealed virtual object ExecuteScalar(string cmdText, object parms);
    public sealed virtual object ExecuteScalar(DbTransaction transaction, string cmdText, object parms);
    public sealed virtual object ExecuteScalar(DbConnection connection, DbTransaction transaction, string cmdText, object parms);
    public sealed virtual object ExecuteScalar(CommandType cmdType, string cmdText, DbParameter[] cmdParms);
    public sealed virtual object ExecuteScalar(DbTransaction transaction, CommandType cmdType, string cmdText, DbParameter[] cmdParms);
    public sealed virtual object ExecuteScalar(DbConnection connection, DbTransaction transaction, CommandType cmdType, string cmdText, int cmdTimeout, DbParameter[] cmdParms);
    private PrepareCommandResult PrepareCommand(DbConnection connection, DbTransaction transaction, CommandType cmdType, string cmdText, int cmdTimeout, DbParameter[] cmdParms, StringBuilder logtxt);
    [AsyncStateMachineAttribute("FreeSql.Internal.CommonProvider.AdoProvider/<ExecuteConnectTestAsync>d__113")]
[DebuggerStepThroughAttribute]
public sealed virtual Task`1<bool> ExecuteConnectTestAsync(int commandTimeout, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("FreeSql.Internal.CommonProvider.AdoProvider/<QuerySingleAsync>d__114`1")]
[DebuggerStepThroughAttribute]
public sealed virtual Task`1<T> QuerySingleAsync(string cmdText, object parms, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("FreeSql.Internal.CommonProvider.AdoProvider/<QuerySingleAsync>d__115`1")]
[DebuggerStepThroughAttribute]
public sealed virtual Task`1<T> QuerySingleAsync(CommandType cmdType, string cmdText, DbParameter[] cmdParms, CancellationToken cancellationToken);
    public sealed virtual Task`1<List`1<T>> QueryAsync(string cmdText, object parms, CancellationToken cancellationToken);
    public sealed virtual Task`1<List`1<T>> QueryAsync(DbTransaction transaction, string cmdText, object parms, CancellationToken cancellationToken);
    public sealed virtual Task`1<List`1<T>> QueryAsync(DbConnection connection, DbTransaction transaction, string cmdText, object parms, CancellationToken cancellationToken);
    public sealed virtual Task`1<List`1<T>> QueryAsync(CommandType cmdType, string cmdText, DbParameter[] cmdParms, CancellationToken cancellationToken);
    public sealed virtual Task`1<List`1<T>> QueryAsync(DbTransaction transaction, CommandType cmdType, string cmdText, DbParameter[] cmdParms, CancellationToken cancellationToken);
    public sealed virtual Task`1<List`1<T>> QueryAsync(DbConnection connection, DbTransaction transaction, CommandType cmdType, string cmdText, int cmdTimeout, DbParameter[] cmdParms, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("FreeSql.Internal.CommonProvider.AdoProvider/<QueryAsync>d__122`1")]
[DebuggerStepThroughAttribute]
public sealed virtual Task`1<List`1<T>> QueryAsync(Type resultType, DbConnection connection, DbTransaction transaction, CommandType cmdType, string cmdText, int cmdTimeout, DbParameter[] cmdParms, CancellationToken cancellationToken);
    public sealed virtual Task`1<NativeTuple`2<List`1<T1>, List`1<T2>>> QueryAsync(string cmdText, object parms, CancellationToken cancellationToken);
    public sealed virtual Task`1<NativeTuple`2<List`1<T1>, List`1<T2>>> QueryAsync(DbTransaction transaction, string cmdText, object parms, CancellationToken cancellationToken);
    public sealed virtual Task`1<NativeTuple`2<List`1<T1>, List`1<T2>>> QueryAsync(DbConnection connection, DbTransaction transaction, string cmdText, object parms, CancellationToken cancellationToken);
    public sealed virtual Task`1<NativeTuple`2<List`1<T1>, List`1<T2>>> QueryAsync(CommandType cmdType, string cmdText, DbParameter[] cmdParms, CancellationToken cancellationToken);
    public sealed virtual Task`1<NativeTuple`2<List`1<T1>, List`1<T2>>> QueryAsync(DbTransaction transaction, CommandType cmdType, string cmdText, DbParameter[] cmdParms, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("FreeSql.Internal.CommonProvider.AdoProvider/<QueryAsync>d__128`2")]
[DebuggerStepThroughAttribute]
public sealed virtual Task`1<NativeTuple`2<List`1<T1>, List`1<T2>>> QueryAsync(DbConnection connection, DbTransaction transaction, CommandType cmdType, string cmdText, int cmdTimeout, DbParameter[] cmdParms, CancellationToken cancellationToken);
    public sealed virtual Task`1<NativeTuple`3<List`1<T1>, List`1<T2>, List`1<T3>>> QueryAsync(string cmdText, object parms, CancellationToken cancellationToken);
    public sealed virtual Task`1<NativeTuple`3<List`1<T1>, List`1<T2>, List`1<T3>>> QueryAsync(DbTransaction transaction, string cmdText, object parms, CancellationToken cancellationToken);
    public sealed virtual Task`1<NativeTuple`3<List`1<T1>, List`1<T2>, List`1<T3>>> QueryAsync(DbConnection connection, DbTransaction transaction, string cmdText, object parms, CancellationToken cancellationToken);
    public sealed virtual Task`1<NativeTuple`3<List`1<T1>, List`1<T2>, List`1<T3>>> QueryAsync(CommandType cmdType, string cmdText, DbParameter[] cmdParms, CancellationToken cancellationToken);
    public sealed virtual Task`1<NativeTuple`3<List`1<T1>, List`1<T2>, List`1<T3>>> QueryAsync(DbTransaction transaction, CommandType cmdType, string cmdText, DbParameter[] cmdParms, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("FreeSql.Internal.CommonProvider.AdoProvider/<QueryAsync>d__134`3")]
[DebuggerStepThroughAttribute]
public sealed virtual Task`1<NativeTuple`3<List`1<T1>, List`1<T2>, List`1<T3>>> QueryAsync(DbConnection connection, DbTransaction transaction, CommandType cmdType, string cmdText, int cmdTimeout, DbParameter[] cmdParms, CancellationToken cancellationToken);
    public sealed virtual Task`1<NativeTuple`4<List`1<T1>, List`1<T2>, List`1<T3>, List`1<T4>>> QueryAsync(string cmdText, object parms, CancellationToken cancellationToken);
    public sealed virtual Task`1<NativeTuple`4<List`1<T1>, List`1<T2>, List`1<T3>, List`1<T4>>> QueryAsync(DbTransaction transaction, string cmdText, object parms, CancellationToken cancellationToken);
    public sealed virtual Task`1<NativeTuple`4<List`1<T1>, List`1<T2>, List`1<T3>, List`1<T4>>> QueryAsync(DbConnection connection, DbTransaction transaction, string cmdText, object parms, CancellationToken cancellationToken);
    public sealed virtual Task`1<NativeTuple`4<List`1<T1>, List`1<T2>, List`1<T3>, List`1<T4>>> QueryAsync(CommandType cmdType, string cmdText, DbParameter[] cmdParms, CancellationToken cancellationToken);
    public sealed virtual Task`1<NativeTuple`4<List`1<T1>, List`1<T2>, List`1<T3>, List`1<T4>>> QueryAsync(DbTransaction transaction, CommandType cmdType, string cmdText, DbParameter[] cmdParms, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("FreeSql.Internal.CommonProvider.AdoProvider/<QueryAsync>d__140`4")]
[DebuggerStepThroughAttribute]
public sealed virtual Task`1<NativeTuple`4<List`1<T1>, List`1<T2>, List`1<T3>, List`1<T4>>> QueryAsync(DbConnection connection, DbTransaction transaction, CommandType cmdType, string cmdText, int cmdTimeout, DbParameter[] cmdParms, CancellationToken cancellationToken);
    public sealed virtual Task`1<NativeTuple`5<List`1<T1>, List`1<T2>, List`1<T3>, List`1<T4>, List`1<T5>>> QueryAsync(string cmdText, object parms, CancellationToken cancellationToken);
    public sealed virtual Task`1<NativeTuple`5<List`1<T1>, List`1<T2>, List`1<T3>, List`1<T4>, List`1<T5>>> QueryAsync(DbTransaction transaction, string cmdText, object parms, CancellationToken cancellationToken);
    public sealed virtual Task`1<NativeTuple`5<List`1<T1>, List`1<T2>, List`1<T3>, List`1<T4>, List`1<T5>>> QueryAsync(DbConnection connection, DbTransaction transaction, string cmdText, object parms, CancellationToken cancellationToken);
    public sealed virtual Task`1<NativeTuple`5<List`1<T1>, List`1<T2>, List`1<T3>, List`1<T4>, List`1<T5>>> QueryAsync(CommandType cmdType, string cmdText, DbParameter[] cmdParms, CancellationToken cancellationToken);
    public sealed virtual Task`1<NativeTuple`5<List`1<T1>, List`1<T2>, List`1<T3>, List`1<T4>, List`1<T5>>> QueryAsync(DbTransaction transaction, CommandType cmdType, string cmdText, DbParameter[] cmdParms, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("FreeSql.Internal.CommonProvider.AdoProvider/<QueryAsync>d__146`5")]
[DebuggerStepThroughAttribute]
public sealed virtual Task`1<NativeTuple`5<List`1<T1>, List`1<T2>, List`1<T3>, List`1<T4>, List`1<T5>>> QueryAsync(DbConnection connection, DbTransaction transaction, CommandType cmdType, string cmdText, int cmdTimeout, DbParameter[] cmdParms, CancellationToken cancellationToken);
    public sealed virtual Task ExecuteReaderAsync(Func`2<FetchCallbackArgs`1<DbDataReader>, Task> fetchHandler, string cmdText, object parms, CancellationToken cancellationToken);
    public sealed virtual Task ExecuteReaderAsync(DbTransaction transaction, Func`2<FetchCallbackArgs`1<DbDataReader>, Task> fetchHandler, string cmdText, object parms, CancellationToken cancellationToken);
    public sealed virtual Task ExecuteReaderAsync(DbConnection connection, DbTransaction transaction, Func`2<FetchCallbackArgs`1<DbDataReader>, Task> fetchHandler, string cmdText, object parms, CancellationToken cancellationToken);
    public sealed virtual Task ExecuteReaderAsync(Func`2<FetchCallbackArgs`1<DbDataReader>, Task> fetchHandler, CommandType cmdType, string cmdText, DbParameter[] cmdParms, CancellationToken cancellationToken);
    public sealed virtual Task ExecuteReaderAsync(DbTransaction transaction, Func`2<FetchCallbackArgs`1<DbDataReader>, Task> fetchHandler, CommandType cmdType, string cmdText, DbParameter[] cmdParms, CancellationToken cancellationToken);
    public sealed virtual Task ExecuteReaderAsync(DbConnection connection, DbTransaction transaction, Func`2<FetchCallbackArgs`1<DbDataReader>, Task> fetchHandler, CommandType cmdType, string cmdText, int cmdTimeout, DbParameter[] cmdParms, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("FreeSql.Internal.CommonProvider.AdoProvider/<ExecuteReaderMultipleAsync>d__153")]
[DebuggerStepThroughAttribute]
public Task ExecuteReaderMultipleAsync(int multipleResult, DbConnection connection, DbTransaction transaction, Func`3<FetchCallbackArgs`1<DbDataReader>, int, Task> fetchHandler, Action`2<DbDataReader, int> schemaHandler, CommandType cmdType, string cmdText, int cmdTimeout, DbParameter[] cmdParms, CancellationToken cancellationToken);
    public sealed virtual Task`1<Object[][]> ExecuteArrayAsync(string cmdText, object parms, CancellationToken cancellationToken);
    public sealed virtual Task`1<Object[][]> ExecuteArrayAsync(DbTransaction transaction, string cmdText, object parms, CancellationToken cancellationToken);
    public sealed virtual Task`1<Object[][]> ExecuteArrayAsync(DbConnection connection, DbTransaction transaction, string cmdText, object parms, CancellationToken cancellationToken);
    public sealed virtual Task`1<Object[][]> ExecuteArrayAsync(CommandType cmdType, string cmdText, DbParameter[] cmdParms, CancellationToken cancellationToken);
    public sealed virtual Task`1<Object[][]> ExecuteArrayAsync(DbTransaction transaction, CommandType cmdType, string cmdText, DbParameter[] cmdParms, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("FreeSql.Internal.CommonProvider.AdoProvider/<ExecuteArrayAsync>d__159")]
[DebuggerStepThroughAttribute]
public sealed virtual Task`1<Object[][]> ExecuteArrayAsync(DbConnection connection, DbTransaction transaction, CommandType cmdType, string cmdText, int cmdTimeout, DbParameter[] cmdParms, CancellationToken cancellationToken);
    public sealed virtual Task`1<DataSet> ExecuteDataSetAsync(string cmdText, object parms, CancellationToken cancellationToken);
    public sealed virtual Task`1<DataSet> ExecuteDataSetAsync(DbTransaction transaction, string cmdText, object parms, CancellationToken cancellationToken);
    public sealed virtual Task`1<DataSet> ExecuteDataSetAsync(DbConnection connection, DbTransaction transaction, string cmdText, object parms, CancellationToken cancellationToken);
    public sealed virtual Task`1<DataSet> ExecuteDataSetAsync(CommandType cmdType, string cmdText, DbParameter[] cmdParms, CancellationToken cancellationToken);
    public sealed virtual Task`1<DataSet> ExecuteDataSetAsync(DbTransaction transaction, CommandType cmdType, string cmdText, DbParameter[] cmdParms, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("FreeSql.Internal.CommonProvider.AdoProvider/<ExecuteDataSetAsync>d__165")]
[DebuggerStepThroughAttribute]
public sealed virtual Task`1<DataSet> ExecuteDataSetAsync(DbConnection connection, DbTransaction transaction, CommandType cmdType, string cmdText, int cmdTimeout, DbParameter[] cmdParms, CancellationToken cancellationToken);
    public sealed virtual Task`1<DataTable> ExecuteDataTableAsync(string cmdText, object parms, CancellationToken cancellationToken);
    public sealed virtual Task`1<DataTable> ExecuteDataTableAsync(DbTransaction transaction, string cmdText, object parms, CancellationToken cancellationToken);
    public sealed virtual Task`1<DataTable> ExecuteDataTableAsync(DbConnection connection, DbTransaction transaction, string cmdText, object parms, CancellationToken cancellationToken);
    public sealed virtual Task`1<DataTable> ExecuteDataTableAsync(CommandType cmdType, string cmdText, DbParameter[] cmdParms, CancellationToken cancellationToken);
    public sealed virtual Task`1<DataTable> ExecuteDataTableAsync(DbTransaction transaction, CommandType cmdType, string cmdText, DbParameter[] cmdParms, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("FreeSql.Internal.CommonProvider.AdoProvider/<ExecuteDataTableAsync>d__171")]
[DebuggerStepThroughAttribute]
public sealed virtual Task`1<DataTable> ExecuteDataTableAsync(DbConnection connection, DbTransaction transaction, CommandType cmdType, string cmdText, int cmdTimeout, DbParameter[] cmdParms, CancellationToken cancellationToken);
    public sealed virtual Task`1<int> ExecuteNonQueryAsync(string cmdText, object parms, CancellationToken cancellationToken);
    public sealed virtual Task`1<int> ExecuteNonQueryAsync(DbTransaction transaction, string cmdText, object parms, CancellationToken cancellationToken);
    public sealed virtual Task`1<int> ExecuteNonQueryAsync(DbConnection connection, DbTransaction transaction, string cmdText, object parms, CancellationToken cancellationToken);
    public sealed virtual Task`1<int> ExecuteNonQueryAsync(CommandType cmdType, string cmdText, DbParameter[] cmdParms, CancellationToken cancellationToken);
    public sealed virtual Task`1<int> ExecuteNonQueryAsync(DbTransaction transaction, CommandType cmdType, string cmdText, DbParameter[] cmdParms, CancellationToken cancellationToken);
    public sealed virtual Task`1<int> ExecuteNonQueryAsync(DbConnection connection, DbTransaction transaction, CommandType cmdType, string cmdText, int cmdTimeout, DbParameter[] cmdParms, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("FreeSql.Internal.CommonProvider.AdoProvider/<ExecuteNonQueryAsync>d__178")]
[DebuggerStepThroughAttribute]
public sealed virtual Task`1<int> ExecuteNonQueryAsync(DbConnection connection, DbTransaction transaction, CommandType cmdType, string cmdText, int cmdTimeout, Func`2<DbCommand, Task> cmdAfterHandler, DbParameter[] cmdParms, CancellationToken cancellationToken);
    public sealed virtual Task`1<object> ExecuteScalarAsync(string cmdText, object parms, CancellationToken cancellationToken);
    public sealed virtual Task`1<object> ExecuteScalarAsync(DbTransaction transaction, string cmdText, object parms, CancellationToken cancellationToken);
    public sealed virtual Task`1<object> ExecuteScalarAsync(DbConnection connection, DbTransaction transaction, string cmdText, object parms, CancellationToken cancellationToken);
    public sealed virtual Task`1<object> ExecuteScalarAsync(CommandType cmdType, string cmdText, DbParameter[] cmdParms, CancellationToken cancellationToken);
    public sealed virtual Task`1<object> ExecuteScalarAsync(DbTransaction transaction, CommandType cmdType, string cmdText, DbParameter[] cmdParms, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("FreeSql.Internal.CommonProvider.AdoProvider/<ExecuteScalarAsync>d__184")]
[DebuggerStepThroughAttribute]
public sealed virtual Task`1<object> ExecuteScalarAsync(DbConnection connection, DbTransaction transaction, CommandType cmdType, string cmdText, int cmdTimeout, DbParameter[] cmdParms, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("FreeSql.Internal.CommonProvider.AdoProvider/<PrepareCommandAsync>d__185")]
[DebuggerStepThroughAttribute]
private Task`1<PrepareCommandResult> PrepareCommandAsync(DbConnection connection, DbTransaction transaction, CommandType cmdType, string cmdText, int cmdTimeout, DbParameter[] cmdParms, StringBuilder logtxt, CancellationToken cancellationToken);
    public sealed virtual DbTransaction get_TransactionCurrentThread();
    public TraceBeforeEventArgs get_TransactionCurrentThreadAopBefore();
    public void BeginTransaction(Nullable`1<IsolationLevel> isolationLevel);
    private void CommitTimeoutTransaction();
    private void CommitTransaction(bool isCommit, Transaction2 tran, Exception rollbackException, string remark);
    public void CommitTransaction();
    public void RollbackTransaction(Exception ex);
    public sealed virtual void Transaction(Action handler);
    public sealed virtual void Transaction(IsolationLevel isolationLevel, Action handler);
    private void TransactionInternal(Nullable`1<IsolationLevel> isolationLevel, Action handler);
    protected virtual override void Finalize();
    public sealed virtual void Dispose();
    public object AddslashesTypeHandler(Type type, object param);
    public abstract virtual object AddslashesProcessParam(object param, Type mapType, ColumnInfo mapColumn);
    public string Addslashes(string filter, Object[] parms);
    protected string AddslashesIEnumerable(object param, Type mapType, ColumnInfo mapColumn);
    public static bool IsFromSlave(string cmdText, CommandType cmdType);
}
public class FreeSql.Internal.CommonProvider.AopProvider : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private EventHandler`1<ParseExpressionEventArgs> ParseExpression;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private EventHandler`1<ConfigEntityEventArgs> ConfigEntity;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private EventHandler`1<ConfigEntityPropertyEventArgs> ConfigEntityProperty;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private EventHandler`1<CurdBeforeEventArgs> CurdBefore;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private EventHandler`1<CurdAfterEventArgs> CurdAfter;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private EventHandler`1<SyncStructureBeforeEventArgs> SyncStructureBefore;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private EventHandler`1<SyncStructureAfterEventArgs> SyncStructureAfter;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private EventHandler`1<AuditValueEventArgs> AuditValue;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private EventHandler`1<AuditDataReaderEventArgs> AuditDataReader;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private EventHandler`1<CommandBeforeEventArgs> CommandBefore;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private EventHandler`1<CommandAfterEventArgs> CommandAfter;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private EventHandler`1<TraceBeforeEventArgs> TraceBefore;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private EventHandler`1<TraceAfterEventArgs> TraceAfter;
    public EventHandler`1<ParseExpressionEventArgs> ParseExpressionHandler { get; }
    public EventHandler`1<ConfigEntityEventArgs> ConfigEntityHandler { get; }
    public EventHandler`1<ConfigEntityPropertyEventArgs> ConfigEntityPropertyHandler { get; }
    public EventHandler`1<CurdBeforeEventArgs> CurdBeforeHandler { get; }
    public EventHandler`1<CurdAfterEventArgs> CurdAfterHandler { get; }
    public EventHandler`1<SyncStructureBeforeEventArgs> SyncStructureBeforeHandler { get; }
    public EventHandler`1<SyncStructureAfterEventArgs> SyncStructureAfterHandler { get; }
    public EventHandler`1<AuditValueEventArgs> AuditValueHandler { get; }
    public EventHandler`1<AuditDataReaderEventArgs> AuditDataReaderHandler { get; }
    public EventHandler`1<CommandBeforeEventArgs> CommandBeforeHandler { get; }
    public EventHandler`1<CommandAfterEventArgs> CommandAfterHandler { get; }
    public EventHandler`1<TraceBeforeEventArgs> TraceBeforeHandler { get; }
    public EventHandler`1<TraceAfterEventArgs> TraceAfterHandler { get; }
    [CompilerGeneratedAttribute]
public sealed virtual void add_ParseExpression(EventHandler`1<ParseExpressionEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ParseExpression(EventHandler`1<ParseExpressionEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_ConfigEntity(EventHandler`1<ConfigEntityEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ConfigEntity(EventHandler`1<ConfigEntityEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_ConfigEntityProperty(EventHandler`1<ConfigEntityPropertyEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ConfigEntityProperty(EventHandler`1<ConfigEntityPropertyEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_CurdBefore(EventHandler`1<CurdBeforeEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_CurdBefore(EventHandler`1<CurdBeforeEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_CurdAfter(EventHandler`1<CurdAfterEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_CurdAfter(EventHandler`1<CurdAfterEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_SyncStructureBefore(EventHandler`1<SyncStructureBeforeEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_SyncStructureBefore(EventHandler`1<SyncStructureBeforeEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_SyncStructureAfter(EventHandler`1<SyncStructureAfterEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_SyncStructureAfter(EventHandler`1<SyncStructureAfterEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_AuditValue(EventHandler`1<AuditValueEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_AuditValue(EventHandler`1<AuditValueEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_AuditDataReader(EventHandler`1<AuditDataReaderEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_AuditDataReader(EventHandler`1<AuditDataReaderEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_CommandBefore(EventHandler`1<CommandBeforeEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_CommandBefore(EventHandler`1<CommandBeforeEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_CommandAfter(EventHandler`1<CommandAfterEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_CommandAfter(EventHandler`1<CommandAfterEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_TraceBefore(EventHandler`1<TraceBeforeEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_TraceBefore(EventHandler`1<TraceBeforeEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_TraceAfter(EventHandler`1<TraceAfterEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_TraceAfter(EventHandler`1<TraceAfterEventArgs> value);
    public sealed virtual EventHandler`1<ParseExpressionEventArgs> get_ParseExpressionHandler();
    public sealed virtual EventHandler`1<ConfigEntityEventArgs> get_ConfigEntityHandler();
    public sealed virtual EventHandler`1<ConfigEntityPropertyEventArgs> get_ConfigEntityPropertyHandler();
    public sealed virtual EventHandler`1<CurdBeforeEventArgs> get_CurdBeforeHandler();
    public sealed virtual EventHandler`1<CurdAfterEventArgs> get_CurdAfterHandler();
    public sealed virtual EventHandler`1<SyncStructureBeforeEventArgs> get_SyncStructureBeforeHandler();
    public sealed virtual EventHandler`1<SyncStructureAfterEventArgs> get_SyncStructureAfterHandler();
    public sealed virtual EventHandler`1<AuditValueEventArgs> get_AuditValueHandler();
    public sealed virtual EventHandler`1<AuditDataReaderEventArgs> get_AuditDataReaderHandler();
    public sealed virtual EventHandler`1<CommandBeforeEventArgs> get_CommandBeforeHandler();
    public sealed virtual EventHandler`1<CommandAfterEventArgs> get_CommandAfterHandler();
    public sealed virtual EventHandler`1<TraceBeforeEventArgs> get_TraceBeforeHandler();
    public sealed virtual EventHandler`1<TraceAfterEventArgs> get_TraceAfterHandler();
}
public abstract class FreeSql.Internal.CommonProvider.BaseDbProvider : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private IAdo <Ado>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private IAop <Aop>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ICodeFirst <CodeFirst>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private IDbFirst <DbFirst>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private CommonUtils <InternalCommonUtils>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private CommonExpression <InternalCommonExpression>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private GlobalFilter <GlobalFilter>k__BackingField;
    public IAdo Ado { get; protected set; }
    public IAop Aop { get; protected set; }
    public ICodeFirst CodeFirst { get; protected set; }
    public IDbFirst DbFirst { get; protected set; }
    public CommonUtils InternalCommonUtils { get; protected set; }
    public CommonExpression InternalCommonExpression { get; protected set; }
    public GlobalFilter GlobalFilter { get; }
    public abstract virtual ISelect`1<T1> CreateSelectProvider(object dywhere);
    public abstract virtual IInsert`1<T1> CreateInsertProvider();
    public abstract virtual IUpdate`1<T1> CreateUpdateProvider(object dywhere);
    public abstract virtual IDelete`1<T1> CreateDeleteProvider(object dywhere);
    public abstract virtual IInsertOrUpdate`1<T1> CreateInsertOrUpdateProvider();
    public sealed virtual ISelect`1<T1> Select();
    public sealed virtual ISelect`1<T1> Select(object dywhere);
    public sealed virtual IInsert`1<T1> Insert();
    public sealed virtual IInsert`1<T1> Insert(T1 source);
    public sealed virtual IInsert`1<T1> Insert(T1[] source);
    public sealed virtual IInsert`1<T1> Insert(List`1<T1> source);
    public sealed virtual IInsert`1<T1> Insert(IEnumerable`1<T1> source);
    public sealed virtual IUpdate`1<T1> Update();
    public sealed virtual IUpdate`1<T1> Update(object dywhere);
    public sealed virtual IDelete`1<T1> Delete();
    public sealed virtual IDelete`1<T1> Delete(object dywhere);
    public sealed virtual IInsertOrUpdate`1<T1> InsertOrUpdate();
    [CompilerGeneratedAttribute]
public virtual IAdo get_Ado();
    [CompilerGeneratedAttribute]
protected virtual void set_Ado(IAdo value);
    [CompilerGeneratedAttribute]
public virtual IAop get_Aop();
    [CompilerGeneratedAttribute]
protected virtual void set_Aop(IAop value);
    [CompilerGeneratedAttribute]
public virtual ICodeFirst get_CodeFirst();
    [CompilerGeneratedAttribute]
protected virtual void set_CodeFirst(ICodeFirst value);
    [CompilerGeneratedAttribute]
public virtual IDbFirst get_DbFirst();
    [CompilerGeneratedAttribute]
protected virtual void set_DbFirst(IDbFirst value);
    [CompilerGeneratedAttribute]
public virtual CommonUtils get_InternalCommonUtils();
    [CompilerGeneratedAttribute]
protected virtual void set_InternalCommonUtils(CommonUtils value);
    [CompilerGeneratedAttribute]
public virtual CommonExpression get_InternalCommonExpression();
    [CompilerGeneratedAttribute]
protected virtual void set_InternalCommonExpression(CommonExpression value);
    public sealed virtual void Transaction(Action handler);
    public sealed virtual void Transaction(IsolationLevel isolationLevel, Action handler);
    [CompilerGeneratedAttribute]
public virtual GlobalFilter get_GlobalFilter();
    public abstract virtual void Dispose();
}
public abstract class FreeSql.Internal.CommonProvider.CodeFirstProvider : object {
    public IFreeSql _orm;
    public CommonUtils _commonUtils;
    public CommonExpression _commonExpression;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsAutoSyncStructure>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsSyncStructureToLower>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsSyncStructureToUpper>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsConfigEntityFromDbFirst>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsNoneCommandParameter>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsGenerateCommandParameterWithLambda>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsLazyLoading>k__BackingField;
    private static object syncStructureLock;
    private object _dicSycedLock;
    public ConcurrentDictionary`2<Type, ConcurrentDictionary`2<string, bool>> _dicSynced;
    public bool IsAutoSyncStructure { get; public set; }
    public bool IsSyncStructureToLower { get; public set; }
    public bool IsSyncStructureToUpper { get; public set; }
    public bool IsConfigEntityFromDbFirst { get; public set; }
    public bool IsNoneCommandParameter { get; public set; }
    public bool IsGenerateCommandParameterWithLambda { get; public set; }
    public bool IsLazyLoading { get; public set; }
    public CodeFirstProvider(IFreeSql orm, CommonUtils commonUtils, CommonExpression commonExpression);
    private static CodeFirstProvider();
    [CompilerGeneratedAttribute]
public virtual bool get_IsAutoSyncStructure();
    [CompilerGeneratedAttribute]
public virtual void set_IsAutoSyncStructure(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsSyncStructureToLower();
    [CompilerGeneratedAttribute]
public sealed virtual void set_IsSyncStructureToLower(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsSyncStructureToUpper();
    [CompilerGeneratedAttribute]
public sealed virtual void set_IsSyncStructureToUpper(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsConfigEntityFromDbFirst();
    [CompilerGeneratedAttribute]
public sealed virtual void set_IsConfigEntityFromDbFirst(bool value);
    [CompilerGeneratedAttribute]
public virtual bool get_IsNoneCommandParameter();
    [CompilerGeneratedAttribute]
public virtual void set_IsNoneCommandParameter(bool value);
    [CompilerGeneratedAttribute]
public virtual bool get_IsGenerateCommandParameterWithLambda();
    [CompilerGeneratedAttribute]
public virtual void set_IsGenerateCommandParameterWithLambda(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsLazyLoading();
    [CompilerGeneratedAttribute]
public sealed virtual void set_IsLazyLoading(bool value);
    public abstract virtual DbInfoResult GetDbInfo(Type type);
    public sealed virtual ICodeFirst ConfigEntity(Action`1<TableFluent`1<T>> entity);
    public sealed virtual ICodeFirst ConfigEntity(Type type, Action`1<TableFluent> entity);
    public sealed virtual TableAttribute GetConfigEntity(Type type);
    public sealed virtual TableInfo GetTableByEntity(Type type);
    protected string GetTableNameLowerOrUpper(string tableName);
    public sealed virtual string GetComparisonDDLStatements();
    public sealed virtual string GetComparisonDDLStatements(Type[] entityTypes);
    public sealed virtual string GetComparisonDDLStatements(Type entityType, string tableName);
    public sealed virtual string GetComparisonDDLStatements(TableInfo tableSchema, string tableName);
    protected abstract virtual string GetComparisonDDLStatements(TypeSchemaAndName[] objects);
    internal ConcurrentDictionary`2<string, bool> _dicSycedGetOrAdd(Type entityType);
    public void _dicSycedTryAdd(Type entityType, string tableName);
    public sealed virtual void SyncStructure();
    public sealed virtual void SyncStructure(Type[] entityTypes);
    public sealed virtual void SyncStructure(Type entityType, string tableName, bool isForceSync);
    public sealed virtual void SyncStructure(TableInfo tableSchema, string tableName, bool isForceSync);
    protected void SyncStructure(TypeSchemaAndName[] objects);
    public virtual int ExecuteDDLStatements(string ddl);
    public static string ReplaceIndexName(string indexName, string tbname);
    [CompilerGeneratedAttribute]
private TypeSchemaAndName <GetComparisonDDLStatements>b__39_0(Type a);
    [CompilerGeneratedAttribute]
private TypeSchemaAndName <SyncStructure>b__50_0(Type a);
    [CompilerGeneratedAttribute]
private bool <SyncStructure>b__53_0(TypeSchemaAndName a);
    [CompilerGeneratedAttribute]
private TypeSchemaAndName <SyncStructure>b__53_1(TypeSchemaAndName a);
}
public class FreeSql.Internal.CommonProvider.DbConnectionPool : object {
    internal DataType _dataType;
    internal Func`1<DbConnection> _connectionFactory;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private DbConnection <TestConnection>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsSingletonConnection>k__BackingField;
    private int _id;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private IPolicy`1<DbConnection> <Policy>k__BackingField;
    public DbConnection TestConnection { get; }
    public bool IsSingletonConnection { get; }
    public IPolicy`1<DbConnection> Policy { get; }
    public bool IsAvailable { get; }
    public Exception UnavailableException { get; }
    public Nullable`1<DateTime> UnavailableTime { get; }
    public string Statistics { get; }
    public string StatisticsFullily { get; }
    public DbConnectionPool(DataType dataType, Func`1<DbConnection> connectionFactory);
    [CompilerGeneratedAttribute]
public DbConnection get_TestConnection();
    [CompilerGeneratedAttribute]
public bool get_IsSingletonConnection();
    [CompilerGeneratedAttribute]
public sealed virtual IPolicy`1<DbConnection> get_Policy();
    public sealed virtual bool get_IsAvailable();
    public sealed virtual Exception get_UnavailableException();
    public sealed virtual Nullable`1<DateTime> get_UnavailableTime();
    public sealed virtual string get_Statistics();
    public sealed virtual string get_StatisticsFullily();
    public sealed virtual void Dispose();
    public sealed virtual Object`1<DbConnection> Get(Nullable`1<TimeSpan> timeout);
    [AsyncStateMachineAttribute("FreeSql.Internal.CommonProvider.DbConnectionPool/<GetAsync>d__25")]
[DebuggerStepThroughAttribute]
public sealed virtual Task`1<Object`1<DbConnection>> GetAsync();
    public sealed virtual void Return(Object`1<DbConnection> obj, bool isReset);
    public sealed virtual bool SetUnavailable(Exception exception, DateTime lastGetTime);
}
public class FreeSql.Internal.CommonProvider.DbConnectionPoolPolicy : object {
    private Func`1<DbConnection> _connectionFactory;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <PoolSize>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private TimeSpan <SyncGetTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private TimeSpan <IdleTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <AsyncGetCapacity>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsThrowGetTimeoutException>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsAutoDisposeWithSystem>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <CheckAvailableInterval>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <Weight>k__BackingField;
    public string Name { get; public set; }
    public int PoolSize { get; public set; }
    public TimeSpan SyncGetTimeout { get; public set; }
    public TimeSpan IdleTimeout { get; public set; }
    public int AsyncGetCapacity { get; public set; }
    public bool IsThrowGetTimeoutException { get; public set; }
    public bool IsAutoDisposeWithSystem { get; public set; }
    public int CheckAvailableInterval { get; public set; }
    public int Weight { get; public set; }
    public DbConnectionPoolPolicy(string name, Func`1<DbConnection> connectionFactory);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Name(string value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_PoolSize();
    [CompilerGeneratedAttribute]
public sealed virtual void set_PoolSize(int value);
    [CompilerGeneratedAttribute]
public sealed virtual TimeSpan get_SyncGetTimeout();
    [CompilerGeneratedAttribute]
public sealed virtual void set_SyncGetTimeout(TimeSpan value);
    [CompilerGeneratedAttribute]
public sealed virtual TimeSpan get_IdleTimeout();
    [CompilerGeneratedAttribute]
public sealed virtual void set_IdleTimeout(TimeSpan value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_AsyncGetCapacity();
    [CompilerGeneratedAttribute]
public sealed virtual void set_AsyncGetCapacity(int value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsThrowGetTimeoutException();
    [CompilerGeneratedAttribute]
public sealed virtual void set_IsThrowGetTimeoutException(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsAutoDisposeWithSystem();
    [CompilerGeneratedAttribute]
public sealed virtual void set_IsAutoDisposeWithSystem(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_CheckAvailableInterval();
    [CompilerGeneratedAttribute]
public sealed virtual void set_CheckAvailableInterval(int value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_Weight();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Weight(int value);
    public sealed virtual DbConnection OnCreate();
    public sealed virtual void OnDestroy(DbConnection obj);
    public sealed virtual void OnGet(Object`1<DbConnection> obj);
    public sealed virtual Task OnGetAsync(Object`1<DbConnection> obj);
    public sealed virtual void OnGetTimeout();
    public sealed virtual void OnReturn(Object`1<DbConnection> obj);
    public sealed virtual bool OnCheckAvailable(Object`1<DbConnection> obj);
    public sealed virtual void OnAvailable();
    public sealed virtual void OnUnavailable();
}
public class FreeSql.Internal.CommonProvider.DbConnectionStringPool : object {
    internal DataType _dataType;
    internal Func`1<DbConnection> _connectionFactory;
    private int _id;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private IPolicy`1<DbConnection> <Policy>k__BackingField;
    public IPolicy`1<DbConnection> Policy { get; }
    public bool IsAvailable { get; }
    public Exception UnavailableException { get; }
    public Nullable`1<DateTime> UnavailableTime { get; }
    public string Statistics { get; }
    public string StatisticsFullily { get; }
    public DbConnectionStringPool(DataType dataType, string name, Func`1<DbConnection> connectionFactory);
    [CompilerGeneratedAttribute]
public sealed virtual IPolicy`1<DbConnection> get_Policy();
    public sealed virtual bool get_IsAvailable();
    public sealed virtual Exception get_UnavailableException();
    public sealed virtual Nullable`1<DateTime> get_UnavailableTime();
    public sealed virtual string get_Statistics();
    public sealed virtual string get_StatisticsFullily();
    public sealed virtual void Dispose();
    public sealed virtual Object`1<DbConnection> Get(Nullable`1<TimeSpan> timeout);
    [AsyncStateMachineAttribute("FreeSql.Internal.CommonProvider.DbConnectionStringPool/<GetAsync>d__19")]
[DebuggerStepThroughAttribute]
public sealed virtual Task`1<Object`1<DbConnection>> GetAsync();
    public sealed virtual void Return(Object`1<DbConnection> obj, bool isReset);
    public sealed virtual bool SetUnavailable(Exception exception, DateTime lastGetTime);
}
public abstract class FreeSql.Internal.CommonProvider.DeleteProvider : object {
    public IFreeSql _orm;
    public CommonUtils _commonUtils;
    public CommonExpression _commonExpression;
    public TableInfo _table;
    public Func`2<string, string> _tableRule;
    public StringBuilder _where;
    public int _whereTimes;
    public List`1<Item> _whereGlobalFilter;
    public List`1<DbParameter> _params;
    public DbTransaction _transaction;
    public DbConnection _connection;
    public int _commandTimeout;
    public Action`1<StringBuilder> _interceptSql;
    public bool _isAutoSyncStructure;
}
public abstract class FreeSql.Internal.CommonProvider.DeleteProvider`1 : DeleteProvider {
    public DeleteProvider`1(IFreeSql orm, CommonUtils commonUtils, CommonExpression commonExpression, object dywhere);
    protected void ClearData();
    public sealed virtual IDelete`1<T1> WithTransaction(DbTransaction transaction);
    public sealed virtual IDelete`1<T1> WithConnection(DbConnection connection);
    public sealed virtual IDelete`1<T1> CommandTimeout(int timeout);
    public virtual int ExecuteAffrows();
    public abstract virtual List`1<T1> ExecuteDeleted();
    public sealed virtual IDelete`1<T1> Where(Expression`1<Func`2<T1, bool>> exp);
    public sealed virtual IDelete`1<T1> WhereIf(bool condition, Expression`1<Func`2<T1, bool>> exp);
    public sealed virtual IDelete`1<T1> Where(string sql, object parms);
    public sealed virtual IDelete`1<T1> WhereIf(bool condition, string sql, object parms);
    public sealed virtual IDelete`1<T1> Where(T1 item);
    public sealed virtual IDelete`1<T1> Where(IEnumerable`1<T1> items);
    public sealed virtual IDelete`1<T1> WhereDynamic(object dywhere, bool not);
    public sealed virtual IDelete`1<T1> WhereDynamicFilter(DynamicFilterInfo filter);
    public sealed virtual IDelete`1<T1> DisableGlobalFilter(String[] name);
    protected string TableRuleInvoke();
    public sealed virtual IDelete`1<T1> AsTable(Func`2<string, string> tableRule);
    public sealed virtual IDelete`1<T1> AsTable(string tableName);
    public sealed virtual IDelete`1<T1> AsType(Type entityType);
    public virtual string ToSql();
    public void ToSqlFetch(Action`1<StringBuilder> fetch);
    [AsyncStateMachineAttribute("FreeSql.Internal.CommonProvider.DeleteProvider`1/<ToSqlFetchAsync>d__22")]
[DebuggerStepThroughAttribute]
public Task ToSqlFetchAsync(Func`2<StringBuilder, Task> fetchAsync);
    [AsyncStateMachineAttribute("FreeSql.Internal.CommonProvider.DeleteProvider`1/<ExecuteAffrowsAsync>d__23")]
[DebuggerStepThroughAttribute]
public virtual Task`1<int> ExecuteAffrowsAsync(CancellationToken cancellationToken);
    public abstract virtual Task`1<List`1<T1>> ExecuteDeletedAsync(CancellationToken cancellationToken);
}
public abstract class FreeSql.Internal.CommonProvider.InsertOrUpdateProvider : object {
    public IFreeSql _orm;
    public CommonUtils _commonUtils;
    public CommonExpression _commonExpression;
    public bool _doNothing;
    public Dictionary`2<string, bool> _updateIgnore;
    public Dictionary`2<string, bool> _auditValueChangedDict;
    public Dictionary`2<string, string> _updateSetDict;
    public TableInfo _table;
    public ColumnInfo[] _tempPrimarys;
    public Func`2<string, string> _tableRule;
    public int _batchValuesLimit;
    public bool _batchAutoTransaction;
    public DbParameter[] _params;
    public DbTransaction _transaction;
    public DbConnection _connection;
    public int _commandTimeout;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ColumnInfo <IdentityColumn>k__BackingField;
    public bool _isAutoSyncStructure;
    public ColumnInfo IdentityColumn { get; protected set; }
    [CompilerGeneratedAttribute]
public ColumnInfo get_IdentityColumn();
    [CompilerGeneratedAttribute]
protected void set_IdentityColumn(ColumnInfo value);
}
public abstract class FreeSql.Internal.CommonProvider.InsertOrUpdateProvider`1 : InsertOrUpdateProvider {
    public List`1<T1> _source;
    public string _sourceSql;
    private byte _SplitSourceByIdentityValueIsNullFlag;
    public InsertOrUpdateProvider`1(IFreeSql orm, CommonUtils commonUtils, CommonExpression commonExpression);
    protected void ClearData();
    public sealed virtual IInsertOrUpdate`1<T1> WithTransaction(DbTransaction transaction);
    public sealed virtual IInsertOrUpdate`1<T1> WithConnection(DbConnection connection);
    public sealed virtual IInsertOrUpdate`1<T1> CommandTimeout(int timeout);
    public sealed virtual IInsertOrUpdate`1<T1> UpdateColumns(Expression`1<Func`2<T1, object>> columns);
    public sealed virtual IInsertOrUpdate`1<T1> UpdateColumns(String[] columns);
    public sealed virtual IInsertOrUpdate`1<T1> UpdateSet(Expression`1<Func`3<T1, T1, TMember>> exp);
    public static void AuditDataValue(object sender, IEnumerable`1<T1> data, IFreeSql orm, TableInfo table, Dictionary`2<string, bool> changedDict);
    public static void AuditDataValue(object sender, T1 data, IFreeSql orm, TableInfo table, Dictionary`2<string, bool> changedDict);
    public sealed virtual IInsertOrUpdate`1<T1> SetSource(T1 source);
    public sealed virtual IInsertOrUpdate`1<T1> SetSource(T1 source, Expression`1<Func`2<T1, object>> tempPrimarys);
    public sealed virtual IInsertOrUpdate`1<T1> SetSource(IEnumerable`1<T1> source, Expression`1<Func`2<T1, object>> tempPrimarys);
    public virtual IInsertOrUpdate`1<T1> SetSource(string sql, Expression`1<Func`2<T1, object>> tempPrimarys);
    public sealed virtual IInsertOrUpdate`1<T1> IfExistsDoNothing();
    public virtual IInsertOrUpdate`1<T1> BatchOptions(int valuesLimit, bool autoTransaction);
    protected string TableRuleInvoke();
    public sealed virtual IInsertOrUpdate`1<T1> AsTable(Func`2<string, string> tableRule);
    public sealed virtual IInsertOrUpdate`1<T1> AsTable(string tableName);
    public sealed virtual IInsertOrUpdate`1<T1> AsType(Type entityType);
    public void WriteSourceSelectUnionAll(List`1<T1> source, StringBuilder sb, List`1<DbParameter> dbParams, bool disableInsertValueSql);
    public NativeTuple`2<List`1[], List`1[]> SplitSourceByIdentityValueIsNull(List`1<T1> source);
    public abstract virtual string ToSql();
    public sealed virtual int ExecuteAffrows();
    public int RawExecuteAffrows();
    [AsyncStateMachineAttribute("FreeSql.Internal.CommonProvider.InsertOrUpdateProvider`1/<RawExecuteAffrowsAsync>d__28")]
[DebuggerStepThroughAttribute]
public Task`1<int> RawExecuteAffrowsAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("FreeSql.Internal.CommonProvider.InsertOrUpdateProvider`1/<ExecuteAffrowsAsync>d__29")]
[DebuggerStepThroughAttribute]
public sealed virtual Task`1<int> ExecuteAffrowsAsync(CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
private ColumnInfo <SetSource>b__14_2(string a);
    [CompilerGeneratedAttribute]
private ColumnInfo <SetSource>b__15_1(string a);
    [CompilerGeneratedAttribute]
private List`1[] <SplitSourceByIdentityValueIsNull>g__LocalSplitSourceByAsTable|24_0(List`1<T1> loc1);
    [CompilerGeneratedAttribute]
private <>f__AnonymousType1`2<T1, string> <SplitSourceByIdentityValueIsNull>b__24_1(T1 a);
    [CompilerGeneratedAttribute]
private void <ExecuteAffrows>g__ExecuteBatchOptions|26_0(List`1[] splitedSource, <>c__DisplayClass26_0& );
}
public abstract class FreeSql.Internal.CommonProvider.InsertProvider : object {
    public IFreeSql _orm;
    public CommonUtils _commonUtils;
    public CommonExpression _commonExpression;
    public Dictionary`2<string, bool> _ignore;
    public Dictionary`2<string, bool> _ignoreInsertValueSql;
    public Dictionary`2<string, bool> _auditValueChangedDict;
    public TableInfo _table;
    public Func`2<string, string> _tableRule;
    public string _noneParameterFlag;
    public bool _noneParameter;
    public bool _insertIdentity;
    public int _batchValuesLimit;
    public int _batchParameterLimit;
    public bool _batchAutoTransaction;
    public DbParameter[] _params;
    public DbTransaction _transaction;
    public DbConnection _connection;
    public int _commandTimeout;
    public bool _isAutoSyncStructure;
}
public abstract class FreeSql.Internal.CommonProvider.InsertProvider`1 : InsertProvider {
    public List`1<T1> _source;
    internal List`1<T1> _sourceOld;
    public Action`1<BatchProgressStatus`1<T1>> _batchProgress;
    public InsertProvider`1(IFreeSql orm, CommonUtils commonUtils, CommonExpression commonExpression);
    protected void IgnoreCanInsert();
    protected void ClearData();
    public sealed virtual IInsert`1<T1> WithTransaction(DbTransaction transaction);
    public sealed virtual IInsert`1<T1> WithConnection(DbConnection connection);
    public sealed virtual IInsert`1<T1> CommandTimeout(int timeout);
    public sealed virtual IInsert`1<T1> InsertIdentity();
    public sealed virtual IInsert`1<T1> NoneParameter(bool isNotCommandParameter);
    public virtual IInsert`1<T1> BatchOptions(int valuesLimit, int parameterLimit, bool autoTransaction);
    public sealed virtual IInsert`1<T1> BatchProgress(Action`1<BatchProgressStatus`1<T1>> callback);
    public sealed virtual IInsert`1<T1> AppendData(T1 source);
    public sealed virtual IInsert`1<T1> AppendData(T1[] source);
    public sealed virtual IInsert`1<T1> AppendData(IEnumerable`1<T1> source);
    public static void AuditDataValue(object sender, IEnumerable`1<T1> data, IFreeSql orm, TableInfo table, Dictionary`2<string, bool> changedDict);
    public static void AuditDataValue(object sender, T1 data, IFreeSql orm, TableInfo table, Dictionary`2<string, bool> changedDict);
    protected List`1[] SplitSource(int valuesLimit, int parameterLimit, bool isAsTableSplited);
    protected virtual int SplitExecuteAffrows(int valuesLimit, int parameterLimit);
    protected long SplitExecuteIdentity(int valuesLimit, int parameterLimit);
    protected List`1<T1> SplitExecuteInserted(int valuesLimit, int parameterLimit);
    protected virtual int RawExecuteAffrows();
    protected abstract virtual long RawExecuteIdentity();
    protected abstract virtual List`1<T1> RawExecuteInserted();
    public abstract virtual int ExecuteAffrows();
    public abstract virtual long ExecuteIdentity();
    public abstract virtual List`1<T1> ExecuteInserted();
    public sealed virtual IInsert`1<T1> IgnoreColumns(Expression`1<Func`2<T1, object>> columns);
    public sealed virtual IInsert`1<T1> InsertColumns(Expression`1<Func`2<T1, object>> columns);
    public sealed virtual IInsert`1<T1> IgnoreInsertValueSql(Expression`1<Func`2<T1, object>> columns);
    public sealed virtual IInsert`1<T1> IgnoreColumns(String[] columns);
    public sealed virtual IInsert`1<T1> InsertColumns(String[] columns);
    public IInsert`1<T1> IgnoreInsertValueSql(String[] columns);
    protected string TableRuleInvoke();
    public sealed virtual IInsert`1<T1> AsTable(Func`2<string, string> tableRule);
    public sealed virtual IInsert`1<T1> AsTable(string tableName);
    public sealed virtual IInsert`1<T1> AsType(Type entityType);
    public virtual string ToSql();
    public string ToSqlValuesOrSelectUnionAll(bool isValues);
    public string ToSqlValuesOrSelectUnionAllExtension101(bool isValues, Action`3<object, int, StringBuilder> onrow);
    public string ToSqlValuesOrSelectUnionAllExtension102(bool isValues, Action`3<object, int, StringBuilder> onrowPre, Action`3<object, int, StringBuilder> onrow);
    private string ToSqlValuesOrSelectUnionAllExtension103(bool isValues, Action`3<object, int, StringBuilder> onrowPre, Action`3<object, int, StringBuilder> onrow, bool isAsTableSplited);
    public sealed virtual DataTable ToDataTable();
    [AsyncStateMachineAttribute("FreeSql.Internal.CommonProvider.InsertProvider`1/<SplitExecuteAffrowsAsync>d__44")]
[DebuggerStepThroughAttribute]
protected virtual Task`1<int> SplitExecuteAffrowsAsync(int valuesLimit, int parameterLimit, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("FreeSql.Internal.CommonProvider.InsertProvider`1/<SplitExecuteIdentityAsync>d__45")]
[DebuggerStepThroughAttribute]
protected virtual Task`1<long> SplitExecuteIdentityAsync(int valuesLimit, int parameterLimit, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("FreeSql.Internal.CommonProvider.InsertProvider`1/<SplitExecuteInsertedAsync>d__46")]
[DebuggerStepThroughAttribute]
protected virtual Task`1<List`1<T1>> SplitExecuteInsertedAsync(int valuesLimit, int parameterLimit, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("FreeSql.Internal.CommonProvider.InsertProvider`1/<RawExecuteAffrowsAsync>d__47")]
[DebuggerStepThroughAttribute]
protected virtual Task`1<int> RawExecuteAffrowsAsync(CancellationToken cancellationToken);
    protected abstract virtual Task`1<long> RawExecuteIdentityAsync(CancellationToken cancellationToken);
    protected abstract virtual Task`1<List`1<T1>> RawExecuteInsertedAsync(CancellationToken cancellationToken);
    public abstract virtual Task`1<int> ExecuteAffrowsAsync(CancellationToken cancellationToken);
    public abstract virtual Task`1<long> ExecuteIdentityAsync(CancellationToken cancellationToken);
    public abstract virtual Task`1<List`1<T1>> ExecuteInsertedAsync(CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
private <>f__AnonymousType1`2<T1, string> <SplitSource>b__18_0(T1 a);
    [CompilerGeneratedAttribute]
private <>f__AnonymousType1`2<T1, string> <ToSqlValuesOrSelectUnionAllExtension103>b__42_0(T1 a);
}
public abstract class FreeSql.Internal.CommonProvider.Select0Provider : object {
    public int _limit;
    public int _skip;
    public string _select;
    public string _orderby;
    public string _groupby;
    public string _having;
    public StringBuilder _where;
    public List`1<DbParameter> _params;
    public List`1<DbParameter> _paramsInit;
    public List`1<SelectTableInfo> _tables;
    public List`1<Func`3<Type, string, string>> _tableRules;
    public Func`3<Type, string, string> _aliasRule;
    public string _tosqlAppendContent;
    public StringBuilder _join;
    public IFreeSql _orm;
    public CommonUtils _commonUtils;
    public CommonExpression _commonExpression;
    public DbTransaction _transaction;
    public DbConnection _connection;
    public int _commandTimeout;
    public Action`1<object> _trackToList;
    public List`1<Action`1<object>> _includeToList;
    public List`1<Func`3<object, CancellationToken, Task>> _includeToListAsync;
    public Dictionary`2<string, NativeTuple`2<MemberExpression[], TableRef>> _includeInfo;
    public bool _distinct;
    public Expression _selectExpression;
    public List`1<Item> _whereGlobalFilter;
    public Func`1<bool> _cancel;
    public bool _is_AsTreeCte;
    public BaseDiyMemberExpression _diymemexpWithTempQuery;
    public Func`1<DbTransaction> _resolveHookTransaction;
    private int _disposeCounter;
    public static MethodInfo _methodSqlExtInternalRawField;
    public static MethodInfo _methodSqlExtInternalRawSql;
    public static MethodInfo _MethodDataReaderIsDBNull;
    public static Dictionary`2<Type, MethodInfo> _dicMethodDataReaderGetValue;
    public static Dictionary`2<DataType, Dictionary`2<Type, MethodInfo>> _dicMethodDataReaderGetValueOverride;
    public static MethodInfo MethodStringContains;
    public static MethodInfo MethodStringStartsWith;
    public static MethodInfo MethodStringEndsWith;
    private static ConcurrentDictionary`2<string, MethodInfo> MethodEnumerableDic;
    public List`1<NativeTuple`3<string, DbParameter[], ReadAnonymousTypeOtherInfo>> _SameSelectPendingShareData;
    public Func`3<Type, string, string> _tableRule { get; }
    public bool IsDefaultSqlContent { get; }
    private static Select0Provider();
    public Func`3<Type, string, string> get__tableRule();
    public bool get_IsDefaultSqlContent();
    protected virtual override void Finalize();
    public abstract virtual string ToSqlBase(string field);
    public abstract virtual void AsTableBase(Func`3<Type, string, string> tableRule);
    public static void CopyData(Select0Provider from, Select0Provider to, ReadOnlyCollection`1<ParameterExpression> lambParms);
    public Expression ConvertStringPropertyToExpression(string property, bool fromFirstTable);
    public static MethodInfo GetMethodEnumerable(string methodName);
    internal Select0Provider SetSameSelectPendingShareData(List`1<NativeTuple`3<string, DbParameter[], ReadAnonymousTypeOtherInfo>> data);
    internal bool SameSelectPending(String& sql, ReadAnonymousTypeOtherInfo csspsod);
    internal static Expression SetSameSelectPendingShareDataWithExpression(Expression exp, List`1<NativeTuple`3<string, DbParameter[], ReadAnonymousTypeOtherInfo>> data);
    public ReadAnonymousTypeAfInfo GetExpressionField(Expression newexp, FieldAliasOptions fieldAlias);
    public string GetNestSelectSql(Expression select, string affield, Func`2<string, string> ToSql);
}
public abstract class FreeSql.Internal.CommonProvider.Select0Provider`2 : Select0Provider {
    private static ConcurrentDictionary`2<MethodInfo, bool> _dicMethodIsDynamicFilterCustomAttribute;
    private static ConcurrentDictionary`2<string, GetAllFieldExpressionTreeInfo<TSelect, T1>> _dicGetAllFieldExpressionTree;
    private static EventHandler`1<AuditDataReaderEventArgs> _OldAuditDataReaderHandler;
    private static ConcurrentDictionary`2<Type, MethodInfo[]> _dicGetMethodsByName;
    public Select0Provider`2(IFreeSql orm, CommonUtils commonUtils, CommonExpression commonExpression, object dywhere);
    private static Select0Provider`2();
    public sealed virtual TSelect TrackToList(Action`1<object> track);
    public sealed virtual TSelect Cancel(Func`1<bool> cancel);
    public sealed virtual TSelect WithTransaction(DbTransaction transaction);
    public sealed virtual TSelect WithConnection(DbConnection connection);
    public sealed virtual TSelect WithParameters(List`1<DbParameter> parameters);
    public sealed virtual TSelect CommandTimeout(int timeout);
    public sealed virtual TSelect GroupBy(string sql, object parms);
    public sealed virtual TSelect Having(string sql, object parms);
    public sealed virtual TSelect LeftJoin(Expression`1<Func`2<T1, bool>> exp);
    public sealed virtual TSelect InnerJoin(Expression`1<Func`2<T1, bool>> exp);
    public sealed virtual TSelect RightJoin(Expression`1<Func`2<T1, bool>> exp);
    public sealed virtual TSelect LeftJoin(Expression`1<Func`3<T1, T2, bool>> exp);
    public sealed virtual TSelect InnerJoin(Expression`1<Func`3<T1, T2, bool>> exp);
    public sealed virtual TSelect RightJoin(Expression`1<Func`3<T1, T2, bool>> exp);
    public sealed virtual TSelect InnerJoin(string sql, object parms);
    public sealed virtual TSelect LeftJoin(string sql, object parms);
    public sealed virtual TSelect RightJoin(string sql, object parms);
    public sealed virtual TSelect RawJoin(string sql);
    public sealed virtual TSelect Limit(int limit);
    public sealed virtual TSelect Master();
    public sealed virtual TSelect Offset(int offset);
    public sealed virtual TSelect OrderBy(string sql, object parms);
    public sealed virtual TSelect OrderBy(bool condition, string sql, object parms);
    public sealed virtual TSelect Page(int pageNumber, int pageSize);
    public sealed virtual TSelect Page(BasePagingInfo pagingInfo);
    public sealed virtual TSelect Skip(int offset);
    public sealed virtual TSelect Take(int limit);
    public sealed virtual TSelect Distinct();
    private string GetToDeleteWhere(string alias);
    public sealed virtual IDelete`1<T1> ToDelete();
    public sealed virtual IUpdate`1<T1> ToUpdate();
    protected List`1<Dictionary`2<Type, string>> GetTableRuleUnions();
    public virtual void AsTableBase(Func`3<Type, string, string> tableRule);
    public sealed virtual TSelect AsTable(Func`3<Type, string, string> tableRule);
    public sealed virtual TSelect AsAlias(Func`3<Type, string, string> aliasRule);
    public sealed virtual TSelect AsType(Type entityType);
    public virtual string ToSqlBase(string field);
    public abstract virtual string ToSql(string field);
    public sealed virtual TSelect Where(string sql, object parms);
    public sealed virtual TSelect WhereIf(bool condition, string sql, object parms);
    public sealed virtual TSelect OrderByPropertyName(string property, bool isAscending);
    public sealed virtual TSelect OrderByPropertyNameIf(bool condition, string property, bool isAscending);
    public sealed virtual TSelect WhereDynamicFilter(DynamicFilterInfo filter);
    private static bool MethodIsDynamicFilterCustomAttribute(MethodInfo method);
    public sealed virtual TSelect DisableGlobalFilter(String[] name);
    public sealed virtual TSelect ForUpdate(bool noawait);
    public ISelect`1<TDto> InternalWithTempQuery(Expression selector);
    public sealed virtual bool Any();
    public sealed virtual long Count();
    public sealed virtual TSelect Count(Int64& count);
    public sealed virtual List`1<T1> ToList();
    public virtual List`1<T1> ToList(bool includeNestedMembers);
    public sealed virtual T1 ToOne();
    public sealed virtual T1 First();
    [AsyncStateMachineAttribute("FreeSql.Internal.CommonProvider.Select0Provider`2/<AnyAsync>d__56")]
[DebuggerStepThroughAttribute]
public sealed virtual Task`1<bool> AnyAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("FreeSql.Internal.CommonProvider.Select0Provider`2/<CountAsync>d__57")]
[DebuggerStepThroughAttribute]
public sealed virtual Task`1<long> CountAsync(CancellationToken cancellationToken);
    public sealed virtual Task`1<List`1<T1>> ToListAsync(CancellationToken cancellationToken);
    public virtual Task`1<List`1<T1>> ToListAsync(bool includeNestedMembers, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("FreeSql.Internal.CommonProvider.Select0Provider`2/<ToOneAsync>d__60")]
[DebuggerStepThroughAttribute]
public sealed virtual Task`1<T1> ToOneAsync(CancellationToken cancellationToken);
    public sealed virtual Task`1<T1> FirstAsync(CancellationToken cancellationToken);
    public sealed virtual DataTable ToDataTableByPropertyName(String[] properties);
    public sealed virtual DataTable ToDataTable(string field);
    public sealed virtual List`1<TTuple> ToList(string field);
    public List`1<TTuple> ToListQfPrivate(string sql, string field);
    internal List`1<T1> ToListAfPrivate(string sql, GetAllFieldExpressionTreeInfo<TSelect, T1> af, ReadAnonymousTypeOtherInfo[] otherData);
    internal List`1<T1> ToListPrivate(GetAllFieldExpressionTreeInfo<TSelect, T1> af, ReadAnonymousTypeOtherInfo[] otherData);
    internal void ToListAfChunkPrivate(int chunkSize, Action`1<FetchCallbackArgs`1<List`1<T1>>> chunkDone, string sql, GetAllFieldExpressionTreeInfo<TSelect, T1> af, ReadAnonymousTypeOtherInfo[] otherData);
    internal void ToListChunkPrivate(int chunkSize, Action`1<FetchCallbackArgs`1<List`1<T1>>> chunkDone, GetAllFieldExpressionTreeInfo<TSelect, T1> af, ReadAnonymousTypeOtherInfo[] otherData);
    public sealed virtual void ToChunk(int size, Action`1<FetchCallbackArgs`1<List`1<T1>>> done, bool includeNestedMembers);
    internal void ToListMrChunkPrivate(int chunkSize, Action`1<FetchCallbackArgs`1<List`1<TReturn>>> chunkDone, string sql, ReadAnonymousTypeAfInfo af);
    public void InternalToChunk(Expression select, int size, Action`1<FetchCallbackArgs`1<List`1<TReturn>>> done);
    public sealed virtual Dictionary`2<TKey, T1> ToDictionary(Func`2<T1, TKey> keySelector);
    public sealed virtual Dictionary`2<TKey, TElement> ToDictionary(Func`2<T1, TKey> keySelector, Func`2<T1, TElement> elementSelector);
    internal List`1<TReturn> ToListMrPrivate(string sql, ReadAnonymousTypeAfInfo af, ReadAnonymousTypeOtherInfo[] otherData);
    internal List`1<TReturn> ToListMapReaderPrivate(ReadAnonymousTypeAfInfo af, ReadAnonymousTypeOtherInfo[] otherData);
    protected List`1<TReturn> ToListMapReader(ReadAnonymousTypeAfInfo af);
    public GetAllFieldExpressionTreeInfo<TSelect, T1> GetAllFieldExpressionTreeLevelAll();
    public GetAllFieldExpressionTreeInfo<TSelect, T1> GetAllFieldExpressionTreeLevel2(bool isRereadSql);
    protected double InternalAvg(Expression exp);
    protected TMember InternalMax(Expression exp);
    protected TMember InternalMin(Expression exp);
    protected decimal InternalSum(Expression exp);
    public ISelectGrouping`2<TKey, TValue> InternalGroupBy(Expression columns);
    public TSelect InternalJoin(Expression exp, SelectTableInfoType joinType);
    protected TSelect InternalJoin(Expression exp, SelectTableInfoType joinType);
    public TSelect InternalOrderBy(Expression column);
    public TSelect InternalOrderByDescending(Expression column);
    public List`1<TReturn> InternalToList(Expression select);
    protected string InternalToSql(Expression select, FieldAliasOptions fieldAlias);
    protected string InternalGetInsertIntoToSql(string tableName, Expression select);
    public int InternalInsertInto(string tableName, Expression select);
    protected DataTable InternalToDataTable(Expression select);
    protected TReturn InternalToAggregate(Expression select);
    public TSelect InternalWhere(Expression exp);
    public sealed virtual Task`1<DataTable> ToDataTableByPropertyNameAsync(String[] properties, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("FreeSql.Internal.CommonProvider.Select0Provider`2/<ToDataTableAsync>d__100")]
[DebuggerStepThroughAttribute]
public sealed virtual Task`1<DataTable> ToDataTableAsync(string field, CancellationToken cancellationToken);
    public sealed virtual Task`1<List`1<TTuple>> ToListAsync(string field, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("FreeSql.Internal.CommonProvider.Select0Provider`2/<ToListQfPrivateAsync>d__102`1")]
[DebuggerStepThroughAttribute]
public Task`1<List`1<TTuple>> ToListQfPrivateAsync(string sql, string field, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("FreeSql.Internal.CommonProvider.Select0Provider`2/<ToListAfPrivateAsync>d__103")]
[DebuggerStepThroughAttribute]
internal Task`1<List`1<T1>> ToListAfPrivateAsync(string sql, GetAllFieldExpressionTreeInfo<TSelect, T1> af, ReadAnonymousTypeOtherInfo[] otherData, CancellationToken cancellationToken);
    internal Task`1<List`1<T1>> ToListPrivateAsync(GetAllFieldExpressionTreeInfo<TSelect, T1> af, ReadAnonymousTypeOtherInfo[] otherData, CancellationToken cancellationToken);
    public sealed virtual Task`1<Dictionary`2<TKey, T1>> ToDictionaryAsync(Func`2<T1, TKey> keySelector, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("FreeSql.Internal.CommonProvider.Select0Provider`2/<ToDictionaryAsync>d__106`2")]
[DebuggerStepThroughAttribute]
public sealed virtual Task`1<Dictionary`2<TKey, TElement>> ToDictionaryAsync(Func`2<T1, TKey> keySelector, Func`2<T1, TElement> elementSelector, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("FreeSql.Internal.CommonProvider.Select0Provider`2/<ToListMrPrivateAsync>d__107`1")]
[DebuggerStepThroughAttribute]
internal Task`1<List`1<TReturn>> ToListMrPrivateAsync(string sql, ReadAnonymousTypeAfInfo af, ReadAnonymousTypeOtherInfo[] otherData, CancellationToken cancellationToken);
    internal Task`1<List`1<TReturn>> ToListMapReaderPrivateAsync(ReadAnonymousTypeAfInfo af, ReadAnonymousTypeOtherInfo[] otherData, CancellationToken cancellationToken);
    protected Task`1<List`1<TReturn>> ToListMapReaderAsync(ReadAnonymousTypeAfInfo af, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("FreeSql.Internal.CommonProvider.Select0Provider`2/<InternalAvgAsync>d__110")]
[DebuggerStepThroughAttribute]
protected Task`1<double> InternalAvgAsync(Expression exp, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("FreeSql.Internal.CommonProvider.Select0Provider`2/<InternalMaxAsync>d__111`1")]
[DebuggerStepThroughAttribute]
protected Task`1<TMember> InternalMaxAsync(Expression exp, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("FreeSql.Internal.CommonProvider.Select0Provider`2/<InternalMinAsync>d__112`1")]
[DebuggerStepThroughAttribute]
protected Task`1<TMember> InternalMinAsync(Expression exp, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("FreeSql.Internal.CommonProvider.Select0Provider`2/<InternalSumAsync>d__113")]
[DebuggerStepThroughAttribute]
protected Task`1<decimal> InternalSumAsync(Expression exp, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("FreeSql.Internal.CommonProvider.Select0Provider`2/<InternalToListAsync>d__115`1")]
[DebuggerStepThroughAttribute]
protected Task`1<List`1<TReturn>> InternalToListAsync(Expression select, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("FreeSql.Internal.CommonProvider.Select0Provider`2/<InternalInsertIntoAsync>d__116`1")]
[DebuggerStepThroughAttribute]
public Task`1<int> InternalInsertIntoAsync(string tableName, Expression select, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("FreeSql.Internal.CommonProvider.Select0Provider`2/<InternalToDataTableAsync>d__117")]
[DebuggerStepThroughAttribute]
protected Task`1<DataTable> InternalToDataTableAsync(Expression select, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("FreeSql.Internal.CommonProvider.Select0Provider`2/<InternalToAggregateAsync>d__118`1")]
[DebuggerStepThroughAttribute]
protected Task`1<TReturn> InternalToAggregateAsync(Expression select, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
internal static bool <WhereDynamicFilter>g__IsIgnoreFilter|43_1(DynamicFilterInfo testFilter);
    [CompilerGeneratedAttribute]
private string <GetAllFieldExpressionTreeLevelAll>b__80_0(SelectTableInfo a);
    [CompilerGeneratedAttribute]
private GetAllFieldExpressionTreeInfo<TSelect, T1> <GetAllFieldExpressionTreeLevelAll>b__80_1(string s);
}
public abstract class FreeSql.Internal.CommonProvider.Select10Provider`10 : Select0Provider`2<ISelect`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>, T1> {
    public Select10Provider`10(IFreeSql orm, CommonUtils commonUtils, CommonExpression commonExpression, object dywhere);
    private sealed virtual override ISelect`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10>.WithSql(string sqlT1, string sqlT2, string sqlT3, string sqlT4, string sqlT5, string sqlT6, string sqlT7, string sqlT8, string sqlT9, string sqlT10, object parms);
    private sealed virtual override ISelect`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10>.As(string aliasT1, string aliasT2, string aliasT3, string aliasT4, string aliasT5, string aliasT6, string aliasT7, string aliasT8, string aliasT9, string aliasT10);
    private sealed virtual override ISelect`1<TDto> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10>.WithTempQuery(Expression`1<Func`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TDto>> selector);
    private sealed virtual override double FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10>.Avg(Expression`1<Func`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TMember>> column);
    private sealed virtual override ISelectGrouping`2<TKey, NativeTuple`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10>.GroupBy(Expression`1<Func`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TKey>> exp);
    private sealed virtual override TMember FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10>.Max(Expression`1<Func`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TMember>> column);
    private sealed virtual override TMember FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10>.Min(Expression`1<Func`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TMember>> column);
    private sealed virtual override ISelect`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10>.OrderBy(Expression`1<Func`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TMember>> column);
    private sealed virtual override ISelect`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10>.OrderByDescending(Expression`1<Func`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TMember>> column);
    private sealed virtual override ISelect`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10>.OrderByIf(bool condition, Expression`1<Func`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TMember>> column, bool descending);
    private sealed virtual override decimal FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10>.Sum(Expression`1<Func`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TMember>> column);
    private sealed virtual override TReturn FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10>.ToAggregate(Expression`1<Func`11<ISelectGroupingAggregate`1<T1>, ISelectGroupingAggregate`1<T2>, ISelectGroupingAggregate`1<T3>, ISelectGroupingAggregate`1<T4>, ISelectGroupingAggregate`1<T5>, ISelectGroupingAggregate`1<T6>, ISelectGroupingAggregate`1<T7>, ISelectGroupingAggregate`1<T8>, ISelectGroupingAggregate`1<T9>, ISelectGroupingAggregate`1<T10>, TReturn>> select);
    private sealed virtual override ISelect`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10>.Aggregate(Expression`1<Func`11<ISelectGroupingAggregate`1<T1>, ISelectGroupingAggregate`1<T2>, ISelectGroupingAggregate`1<T3>, ISelectGroupingAggregate`1<T4>, ISelectGroupingAggregate`1<T5>, ISelectGroupingAggregate`1<T6>, ISelectGroupingAggregate`1<T7>, ISelectGroupingAggregate`1<T8>, ISelectGroupingAggregate`1<T9>, ISelectGroupingAggregate`1<T10>, TReturn>> select, TReturn& result);
    private sealed virtual override List`1<TReturn> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10>.ToList(Expression`1<Func`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TReturn>> select);
    private sealed virtual override List`1<TDto> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10>.ToList();
    private Expression`1<Func`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TDto>> GetToListDtoSelector();
    public sealed virtual void ToChunk(Expression`1<Func`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TReturn>> select, int size, Action`1<FetchCallbackArgs`1<List`1<TReturn>>> done);
    private sealed virtual override DataTable FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10>.ToDataTable(Expression`1<Func`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TReturn>> select);
    private sealed virtual override int FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10>.InsertInto(string tableName, Expression`1<Func`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TTargetEntity>> select);
    private sealed virtual override string FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10>.ToSql(Expression`1<Func`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TReturn>> select, FieldAliasOptions fieldAlias);
    private sealed virtual override ISelect`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10>.LeftJoin(Expression`1<Func`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, bool>> exp);
    private sealed virtual override ISelect`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10>.InnerJoin(Expression`1<Func`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, bool>> exp);
    private sealed virtual override ISelect`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10>.RightJoin(Expression`1<Func`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, bool>> exp);
    private sealed virtual override ISelect`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10>.Where(Expression`1<Func`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, bool>> exp);
    private sealed virtual override ISelect`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10>.WhereIf(bool condition, Expression`1<Func`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, bool>> exp);
    private sealed virtual override bool FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10>.Any(Expression`1<Func`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, bool>> exp);
    private sealed virtual override TReturn FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10>.ToOne(Expression`1<Func`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TReturn>> select);
    private sealed virtual override TReturn FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10>.First(Expression`1<Func`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TReturn>> select);
    private sealed virtual override TDto FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10>.First();
    private sealed virtual override ISelect`1<TDto> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10>.WithTempQuery(Expression`1<Func`2<HzyTuple`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>, TDto>> selector);
    private sealed virtual override double FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10>.Avg(Expression`1<Func`2<HzyTuple`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>, TMember>> column);
    private sealed virtual override ISelectGrouping`2<TKey, NativeTuple`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10>.GroupBy(Expression`1<Func`2<HzyTuple`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>, TKey>> exp);
    private sealed virtual override TMember FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10>.Max(Expression`1<Func`2<HzyTuple`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>, TMember>> column);
    private sealed virtual override TMember FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10>.Min(Expression`1<Func`2<HzyTuple`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>, TMember>> column);
    private sealed virtual override ISelect`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10>.OrderBy(Expression`1<Func`2<HzyTuple`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>, TMember>> column);
    private sealed virtual override ISelect`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10>.OrderByDescending(Expression`1<Func`2<HzyTuple`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>, TMember>> column);
    private sealed virtual override ISelect`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10>.OrderByIf(bool condition, Expression`1<Func`2<HzyTuple`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>, TMember>> column, bool descending);
    private sealed virtual override decimal FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10>.Sum(Expression`1<Func`2<HzyTuple`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>, TMember>> column);
    private sealed virtual override List`1<TReturn> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10>.ToList(Expression`1<Func`2<HzyTuple`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>, TReturn>> select);
    public sealed virtual void ToChunk(Expression`1<Func`2<HzyTuple`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>, TReturn>> select, int size, Action`1<FetchCallbackArgs`1<List`1<TReturn>>> done);
    private sealed virtual override DataTable FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10>.ToDataTable(Expression`1<Func`2<HzyTuple`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>, TReturn>> select);
    private sealed virtual override int FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10>.InsertInto(string tableName, Expression`1<Func`2<HzyTuple`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>, TTargetEntity>> select);
    private sealed virtual override string FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10>.ToSql(Expression`1<Func`2<HzyTuple`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>, TReturn>> select, FieldAliasOptions fieldAlias);
    private sealed virtual override ISelect`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10>.LeftJoin(Expression`1<Func`2<HzyTuple`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>, bool>> exp);
    private sealed virtual override ISelect`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10>.InnerJoin(Expression`1<Func`2<HzyTuple`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>, bool>> exp);
    private sealed virtual override ISelect`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10>.RightJoin(Expression`1<Func`2<HzyTuple`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>, bool>> exp);
    private sealed virtual override ISelect`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10>.Where(Expression`1<Func`2<HzyTuple`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>, bool>> exp);
    private sealed virtual override ISelect`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10>.WhereIf(bool condition, Expression`1<Func`2<HzyTuple`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>, bool>> exp);
    private sealed virtual override bool FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10>.Any(Expression`1<Func`2<HzyTuple`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>, bool>> exp);
    private sealed virtual override TReturn FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10>.ToOne(Expression`1<Func`2<HzyTuple`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>, TReturn>> select);
    private sealed virtual override TReturn FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10>.First(Expression`1<Func`2<HzyTuple`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>, TReturn>> select);
    private sealed virtual override Task`1<double> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10>.AvgAsync(Expression`1<Func`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TMember>> column, CancellationToken cancellationToken);
    private sealed virtual override Task`1<TMember> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10>.MaxAsync(Expression`1<Func`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TMember>> column, CancellationToken cancellationToken);
    private sealed virtual override Task`1<TMember> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10>.MinAsync(Expression`1<Func`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TMember>> column, CancellationToken cancellationToken);
    private sealed virtual override Task`1<decimal> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10>.SumAsync(Expression`1<Func`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TMember>> column, CancellationToken cancellationToken);
    private sealed virtual override Task`1<TReturn> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10>.ToAggregateAsync(Expression`1<Func`11<ISelectGroupingAggregate`1<T1>, ISelectGroupingAggregate`1<T2>, ISelectGroupingAggregate`1<T3>, ISelectGroupingAggregate`1<T4>, ISelectGroupingAggregate`1<T5>, ISelectGroupingAggregate`1<T6>, ISelectGroupingAggregate`1<T7>, ISelectGroupingAggregate`1<T8>, ISelectGroupingAggregate`1<T9>, ISelectGroupingAggregate`1<T10>, TReturn>> select, CancellationToken cancellationToken);
    private sealed virtual override Task`1<List`1<TReturn>> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10>.ToListAsync(Expression`1<Func`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TReturn>> select, CancellationToken cancellationToken);
    private sealed virtual override Task`1<List`1<TDto>> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10>.ToListAsync(CancellationToken cancellationToken);
    private sealed virtual override Task`1<DataTable> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10>.ToDataTableAsync(Expression`1<Func`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TReturn>> select, CancellationToken cancellationToken);
    private sealed virtual override Task`1<int> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10>.InsertIntoAsync(string tableName, Expression`1<Func`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TTargetEntity>> select, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("FreeSql.Internal.CommonProvider.Select10Provider`10/<FreeSql-ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10>-AnyAsync>d__61")]
[DebuggerStepThroughAttribute]
private sealed virtual override Task`1<bool> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10>.AnyAsync(Expression`1<Func`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, bool>> exp, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("FreeSql.Internal.CommonProvider.Select10Provider`10/<FreeSql-ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10>-ToOneAsync>d__62`1")]
[DebuggerStepThroughAttribute]
private sealed virtual override Task`1<TReturn> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10>.ToOneAsync(Expression`1<Func`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TReturn>> select, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("FreeSql.Internal.CommonProvider.Select10Provider`10/<FreeSql-ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10>-FirstAsync>d__63`1")]
[DebuggerStepThroughAttribute]
private sealed virtual override Task`1<TReturn> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10>.FirstAsync(Expression`1<Func`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TReturn>> select, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("FreeSql.Internal.CommonProvider.Select10Provider`10/<FreeSql-ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10>-FirstAsync>d__64`1")]
[DebuggerStepThroughAttribute]
private sealed virtual override Task`1<TDto> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10>.FirstAsync(CancellationToken cancellationToken);
    private sealed virtual override Task`1<double> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10>.AvgAsync(Expression`1<Func`2<HzyTuple`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>, TMember>> column, CancellationToken cancellationToken);
    private sealed virtual override Task`1<TMember> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10>.MaxAsync(Expression`1<Func`2<HzyTuple`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>, TMember>> column, CancellationToken cancellationToken);
    private sealed virtual override Task`1<TMember> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10>.MinAsync(Expression`1<Func`2<HzyTuple`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>, TMember>> column, CancellationToken cancellationToken);
    private sealed virtual override Task`1<decimal> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10>.SumAsync(Expression`1<Func`2<HzyTuple`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>, TMember>> column, CancellationToken cancellationToken);
    private sealed virtual override Task`1<List`1<TReturn>> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10>.ToListAsync(Expression`1<Func`2<HzyTuple`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>, TReturn>> select, CancellationToken cancellationToken);
    private sealed virtual override Task`1<DataTable> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10>.ToDataTableAsync(Expression`1<Func`2<HzyTuple`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>, TReturn>> select, CancellationToken cancellationToken);
    private sealed virtual override Task`1<int> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10>.InsertIntoAsync(string tableName, Expression`1<Func`2<HzyTuple`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>, TTargetEntity>> select, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("FreeSql.Internal.CommonProvider.Select10Provider`10/<FreeSql-ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10>-AnyAsync>d__72")]
[DebuggerStepThroughAttribute]
private sealed virtual override Task`1<bool> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10>.AnyAsync(Expression`1<Func`2<HzyTuple`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>, bool>> exp, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("FreeSql.Internal.CommonProvider.Select10Provider`10/<FreeSql-ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10>-ToOneAsync>d__73`1")]
[DebuggerStepThroughAttribute]
private sealed virtual override Task`1<TReturn> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10>.ToOneAsync(Expression`1<Func`2<HzyTuple`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>, TReturn>> select, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("FreeSql.Internal.CommonProvider.Select10Provider`10/<FreeSql-ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10>-FirstAsync>d__74`1")]
[DebuggerStepThroughAttribute]
private sealed virtual override Task`1<TReturn> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10>.FirstAsync(Expression`1<Func`2<HzyTuple`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>, TReturn>> select, CancellationToken cancellationToken);
}
public abstract class FreeSql.Internal.CommonProvider.Select11Provider`11 : Select0Provider`2<ISelect`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>, T1> {
    public Select11Provider`11(IFreeSql orm, CommonUtils commonUtils, CommonExpression commonExpression, object dywhere);
    private sealed virtual override ISelect`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11>.WithSql(string sqlT1, string sqlT2, string sqlT3, string sqlT4, string sqlT5, string sqlT6, string sqlT7, string sqlT8, string sqlT9, string sqlT10, string sqlT11, object parms);
    private sealed virtual override ISelect`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11>.As(string aliasT1, string aliasT2, string aliasT3, string aliasT4, string aliasT5, string aliasT6, string aliasT7, string aliasT8, string aliasT9, string aliasT10, string aliasT11);
    private sealed virtual override ISelect`1<TDto> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11>.WithTempQuery(Expression`1<Func`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TDto>> selector);
    private sealed virtual override double FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11>.Avg(Expression`1<Func`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TMember>> column);
    private sealed virtual override ISelectGrouping`2<TKey, NativeTuple`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11>.GroupBy(Expression`1<Func`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TKey>> exp);
    private sealed virtual override TMember FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11>.Max(Expression`1<Func`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TMember>> column);
    private sealed virtual override TMember FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11>.Min(Expression`1<Func`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TMember>> column);
    private sealed virtual override ISelect`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11>.OrderBy(Expression`1<Func`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TMember>> column);
    private sealed virtual override ISelect`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11>.OrderByDescending(Expression`1<Func`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TMember>> column);
    private sealed virtual override ISelect`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11>.OrderByIf(bool condition, Expression`1<Func`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TMember>> column, bool descending);
    private sealed virtual override decimal FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11>.Sum(Expression`1<Func`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TMember>> column);
    private sealed virtual override TReturn FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11>.ToAggregate(Expression`1<Func`12<ISelectGroupingAggregate`1<T1>, ISelectGroupingAggregate`1<T2>, ISelectGroupingAggregate`1<T3>, ISelectGroupingAggregate`1<T4>, ISelectGroupingAggregate`1<T5>, ISelectGroupingAggregate`1<T6>, ISelectGroupingAggregate`1<T7>, ISelectGroupingAggregate`1<T8>, ISelectGroupingAggregate`1<T9>, ISelectGroupingAggregate`1<T10>, ISelectGroupingAggregate`1<T11>, TReturn>> select);
    private sealed virtual override ISelect`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11>.Aggregate(Expression`1<Func`12<ISelectGroupingAggregate`1<T1>, ISelectGroupingAggregate`1<T2>, ISelectGroupingAggregate`1<T3>, ISelectGroupingAggregate`1<T4>, ISelectGroupingAggregate`1<T5>, ISelectGroupingAggregate`1<T6>, ISelectGroupingAggregate`1<T7>, ISelectGroupingAggregate`1<T8>, ISelectGroupingAggregate`1<T9>, ISelectGroupingAggregate`1<T10>, ISelectGroupingAggregate`1<T11>, TReturn>> select, TReturn& result);
    private sealed virtual override List`1<TReturn> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11>.ToList(Expression`1<Func`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TReturn>> select);
    private sealed virtual override List`1<TDto> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11>.ToList();
    private Expression`1<Func`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TDto>> GetToListDtoSelector();
    public sealed virtual void ToChunk(Expression`1<Func`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TReturn>> select, int size, Action`1<FetchCallbackArgs`1<List`1<TReturn>>> done);
    private sealed virtual override DataTable FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11>.ToDataTable(Expression`1<Func`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TReturn>> select);
    private sealed virtual override int FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11>.InsertInto(string tableName, Expression`1<Func`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TTargetEntity>> select);
    private sealed virtual override string FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11>.ToSql(Expression`1<Func`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TReturn>> select, FieldAliasOptions fieldAlias);
    private sealed virtual override ISelect`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11>.LeftJoin(Expression`1<Func`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, bool>> exp);
    private sealed virtual override ISelect`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11>.InnerJoin(Expression`1<Func`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, bool>> exp);
    private sealed virtual override ISelect`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11>.RightJoin(Expression`1<Func`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, bool>> exp);
    private sealed virtual override ISelect`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11>.Where(Expression`1<Func`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, bool>> exp);
    private sealed virtual override ISelect`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11>.WhereIf(bool condition, Expression`1<Func`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, bool>> exp);
    private sealed virtual override bool FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11>.Any(Expression`1<Func`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, bool>> exp);
    private sealed virtual override TReturn FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11>.ToOne(Expression`1<Func`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TReturn>> select);
    private sealed virtual override TReturn FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11>.First(Expression`1<Func`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TReturn>> select);
    private sealed virtual override TDto FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11>.First();
    private sealed virtual override ISelect`1<TDto> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11>.WithTempQuery(Expression`1<Func`2<HzyTuple`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>, TDto>> selector);
    private sealed virtual override double FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11>.Avg(Expression`1<Func`2<HzyTuple`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>, TMember>> column);
    private sealed virtual override ISelectGrouping`2<TKey, NativeTuple`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11>.GroupBy(Expression`1<Func`2<HzyTuple`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>, TKey>> exp);
    private sealed virtual override TMember FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11>.Max(Expression`1<Func`2<HzyTuple`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>, TMember>> column);
    private sealed virtual override TMember FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11>.Min(Expression`1<Func`2<HzyTuple`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>, TMember>> column);
    private sealed virtual override ISelect`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11>.OrderBy(Expression`1<Func`2<HzyTuple`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>, TMember>> column);
    private sealed virtual override ISelect`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11>.OrderByDescending(Expression`1<Func`2<HzyTuple`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>, TMember>> column);
    private sealed virtual override ISelect`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11>.OrderByIf(bool condition, Expression`1<Func`2<HzyTuple`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>, TMember>> column, bool descending);
    private sealed virtual override decimal FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11>.Sum(Expression`1<Func`2<HzyTuple`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>, TMember>> column);
    private sealed virtual override List`1<TReturn> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11>.ToList(Expression`1<Func`2<HzyTuple`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>, TReturn>> select);
    public sealed virtual void ToChunk(Expression`1<Func`2<HzyTuple`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>, TReturn>> select, int size, Action`1<FetchCallbackArgs`1<List`1<TReturn>>> done);
    private sealed virtual override DataTable FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11>.ToDataTable(Expression`1<Func`2<HzyTuple`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>, TReturn>> select);
    private sealed virtual override int FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11>.InsertInto(string tableName, Expression`1<Func`2<HzyTuple`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>, TTargetEntity>> select);
    private sealed virtual override string FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11>.ToSql(Expression`1<Func`2<HzyTuple`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>, TReturn>> select, FieldAliasOptions fieldAlias);
    private sealed virtual override ISelect`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11>.LeftJoin(Expression`1<Func`2<HzyTuple`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>, bool>> exp);
    private sealed virtual override ISelect`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11>.InnerJoin(Expression`1<Func`2<HzyTuple`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>, bool>> exp);
    private sealed virtual override ISelect`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11>.RightJoin(Expression`1<Func`2<HzyTuple`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>, bool>> exp);
    private sealed virtual override ISelect`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11>.Where(Expression`1<Func`2<HzyTuple`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>, bool>> exp);
    private sealed virtual override ISelect`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11>.WhereIf(bool condition, Expression`1<Func`2<HzyTuple`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>, bool>> exp);
    private sealed virtual override bool FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11>.Any(Expression`1<Func`2<HzyTuple`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>, bool>> exp);
    private sealed virtual override TReturn FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11>.ToOne(Expression`1<Func`2<HzyTuple`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>, TReturn>> select);
    private sealed virtual override TReturn FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11>.First(Expression`1<Func`2<HzyTuple`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>, TReturn>> select);
    private sealed virtual override Task`1<double> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11>.AvgAsync(Expression`1<Func`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TMember>> column, CancellationToken cancellationToken);
    private sealed virtual override Task`1<TMember> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11>.MaxAsync(Expression`1<Func`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TMember>> column, CancellationToken cancellationToken);
    private sealed virtual override Task`1<TMember> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11>.MinAsync(Expression`1<Func`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TMember>> column, CancellationToken cancellationToken);
    private sealed virtual override Task`1<decimal> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11>.SumAsync(Expression`1<Func`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TMember>> column, CancellationToken cancellationToken);
    private sealed virtual override Task`1<TReturn> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11>.ToAggregateAsync(Expression`1<Func`12<ISelectGroupingAggregate`1<T1>, ISelectGroupingAggregate`1<T2>, ISelectGroupingAggregate`1<T3>, ISelectGroupingAggregate`1<T4>, ISelectGroupingAggregate`1<T5>, ISelectGroupingAggregate`1<T6>, ISelectGroupingAggregate`1<T7>, ISelectGroupingAggregate`1<T8>, ISelectGroupingAggregate`1<T9>, ISelectGroupingAggregate`1<T10>, ISelectGroupingAggregate`1<T11>, TReturn>> select, CancellationToken cancellationToken);
    private sealed virtual override Task`1<List`1<TReturn>> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11>.ToListAsync(Expression`1<Func`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TReturn>> select, CancellationToken cancellationToken);
    private sealed virtual override Task`1<List`1<TDto>> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11>.ToListAsync(CancellationToken cancellationToken);
    private sealed virtual override Task`1<DataTable> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11>.ToDataTableAsync(Expression`1<Func`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TReturn>> select, CancellationToken cancellationToken);
    private sealed virtual override Task`1<int> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11>.InsertIntoAsync(string tableName, Expression`1<Func`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TTargetEntity>> select, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("FreeSql.Internal.CommonProvider.Select11Provider`11/<FreeSql-ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11>-AnyAsync>d__61")]
[DebuggerStepThroughAttribute]
private sealed virtual override Task`1<bool> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11>.AnyAsync(Expression`1<Func`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, bool>> exp, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("FreeSql.Internal.CommonProvider.Select11Provider`11/<FreeSql-ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11>-ToOneAsync>d__62`1")]
[DebuggerStepThroughAttribute]
private sealed virtual override Task`1<TReturn> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11>.ToOneAsync(Expression`1<Func`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TReturn>> select, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("FreeSql.Internal.CommonProvider.Select11Provider`11/<FreeSql-ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11>-FirstAsync>d__63`1")]
[DebuggerStepThroughAttribute]
private sealed virtual override Task`1<TReturn> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11>.FirstAsync(Expression`1<Func`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TReturn>> select, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("FreeSql.Internal.CommonProvider.Select11Provider`11/<FreeSql-ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11>-FirstAsync>d__64`1")]
[DebuggerStepThroughAttribute]
private sealed virtual override Task`1<TDto> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11>.FirstAsync(CancellationToken cancellationToken);
    private sealed virtual override Task`1<double> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11>.AvgAsync(Expression`1<Func`2<HzyTuple`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>, TMember>> column, CancellationToken cancellationToken);
    private sealed virtual override Task`1<TMember> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11>.MaxAsync(Expression`1<Func`2<HzyTuple`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>, TMember>> column, CancellationToken cancellationToken);
    private sealed virtual override Task`1<TMember> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11>.MinAsync(Expression`1<Func`2<HzyTuple`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>, TMember>> column, CancellationToken cancellationToken);
    private sealed virtual override Task`1<decimal> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11>.SumAsync(Expression`1<Func`2<HzyTuple`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>, TMember>> column, CancellationToken cancellationToken);
    private sealed virtual override Task`1<List`1<TReturn>> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11>.ToListAsync(Expression`1<Func`2<HzyTuple`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>, TReturn>> select, CancellationToken cancellationToken);
    private sealed virtual override Task`1<DataTable> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11>.ToDataTableAsync(Expression`1<Func`2<HzyTuple`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>, TReturn>> select, CancellationToken cancellationToken);
    private sealed virtual override Task`1<int> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11>.InsertIntoAsync(string tableName, Expression`1<Func`2<HzyTuple`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>, TTargetEntity>> select, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("FreeSql.Internal.CommonProvider.Select11Provider`11/<FreeSql-ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11>-AnyAsync>d__72")]
[DebuggerStepThroughAttribute]
private sealed virtual override Task`1<bool> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11>.AnyAsync(Expression`1<Func`2<HzyTuple`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>, bool>> exp, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("FreeSql.Internal.CommonProvider.Select11Provider`11/<FreeSql-ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11>-ToOneAsync>d__73`1")]
[DebuggerStepThroughAttribute]
private sealed virtual override Task`1<TReturn> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11>.ToOneAsync(Expression`1<Func`2<HzyTuple`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>, TReturn>> select, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("FreeSql.Internal.CommonProvider.Select11Provider`11/<FreeSql-ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11>-FirstAsync>d__74`1")]
[DebuggerStepThroughAttribute]
private sealed virtual override Task`1<TReturn> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11>.FirstAsync(Expression`1<Func`2<HzyTuple`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>, TReturn>> select, CancellationToken cancellationToken);
}
public abstract class FreeSql.Internal.CommonProvider.Select12Provider`12 : Select0Provider`2<ISelect`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>, T1> {
    public Select12Provider`12(IFreeSql orm, CommonUtils commonUtils, CommonExpression commonExpression, object dywhere);
    private sealed virtual override ISelect`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>.WithSql(string sqlT1, string sqlT2, string sqlT3, string sqlT4, string sqlT5, string sqlT6, string sqlT7, string sqlT8, string sqlT9, string sqlT10, string sqlT11, string sqlT12, object parms);
    private sealed virtual override ISelect`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>.As(string aliasT1, string aliasT2, string aliasT3, string aliasT4, string aliasT5, string aliasT6, string aliasT7, string aliasT8, string aliasT9, string aliasT10, string aliasT11, string aliasT12);
    private sealed virtual override ISelect`1<TDto> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>.WithTempQuery(Expression`1<Func`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TDto>> selector);
    private sealed virtual override double FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>.Avg(Expression`1<Func`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TMember>> column);
    private sealed virtual override ISelectGrouping`2<TKey, NativeTuple`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>.GroupBy(Expression`1<Func`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TKey>> exp);
    private sealed virtual override TMember FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>.Max(Expression`1<Func`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TMember>> column);
    private sealed virtual override TMember FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>.Min(Expression`1<Func`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TMember>> column);
    private sealed virtual override ISelect`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>.OrderBy(Expression`1<Func`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TMember>> column);
    private sealed virtual override ISelect`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>.OrderByDescending(Expression`1<Func`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TMember>> column);
    private sealed virtual override ISelect`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>.OrderByIf(bool condition, Expression`1<Func`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TMember>> column, bool descending);
    private sealed virtual override decimal FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>.Sum(Expression`1<Func`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TMember>> column);
    private sealed virtual override TReturn FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>.ToAggregate(Expression`1<Func`13<ISelectGroupingAggregate`1<T1>, ISelectGroupingAggregate`1<T2>, ISelectGroupingAggregate`1<T3>, ISelectGroupingAggregate`1<T4>, ISelectGroupingAggregate`1<T5>, ISelectGroupingAggregate`1<T6>, ISelectGroupingAggregate`1<T7>, ISelectGroupingAggregate`1<T8>, ISelectGroupingAggregate`1<T9>, ISelectGroupingAggregate`1<T10>, ISelectGroupingAggregate`1<T11>, ISelectGroupingAggregate`1<T12>, TReturn>> select);
    private sealed virtual override ISelect`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>.Aggregate(Expression`1<Func`13<ISelectGroupingAggregate`1<T1>, ISelectGroupingAggregate`1<T2>, ISelectGroupingAggregate`1<T3>, ISelectGroupingAggregate`1<T4>, ISelectGroupingAggregate`1<T5>, ISelectGroupingAggregate`1<T6>, ISelectGroupingAggregate`1<T7>, ISelectGroupingAggregate`1<T8>, ISelectGroupingAggregate`1<T9>, ISelectGroupingAggregate`1<T10>, ISelectGroupingAggregate`1<T11>, ISelectGroupingAggregate`1<T12>, TReturn>> select, TReturn& result);
    private sealed virtual override List`1<TReturn> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>.ToList(Expression`1<Func`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TReturn>> select);
    private sealed virtual override List`1<TDto> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>.ToList();
    private Expression`1<Func`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TDto>> GetToListDtoSelector();
    public sealed virtual void ToChunk(Expression`1<Func`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TReturn>> select, int size, Action`1<FetchCallbackArgs`1<List`1<TReturn>>> done);
    private sealed virtual override DataTable FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>.ToDataTable(Expression`1<Func`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TReturn>> select);
    private sealed virtual override int FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>.InsertInto(string tableName, Expression`1<Func`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TTargetEntity>> select);
    private sealed virtual override string FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>.ToSql(Expression`1<Func`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TReturn>> select, FieldAliasOptions fieldAlias);
    private sealed virtual override ISelect`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>.LeftJoin(Expression`1<Func`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, bool>> exp);
    private sealed virtual override ISelect`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>.InnerJoin(Expression`1<Func`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, bool>> exp);
    private sealed virtual override ISelect`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>.RightJoin(Expression`1<Func`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, bool>> exp);
    private sealed virtual override ISelect`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>.Where(Expression`1<Func`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, bool>> exp);
    private sealed virtual override ISelect`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>.WhereIf(bool condition, Expression`1<Func`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, bool>> exp);
    private sealed virtual override bool FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>.Any(Expression`1<Func`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, bool>> exp);
    private sealed virtual override TReturn FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>.ToOne(Expression`1<Func`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TReturn>> select);
    private sealed virtual override TReturn FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>.First(Expression`1<Func`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TReturn>> select);
    private sealed virtual override TDto FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>.First();
    private sealed virtual override ISelect`1<TDto> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>.WithTempQuery(Expression`1<Func`2<HzyTuple`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>, TDto>> selector);
    private sealed virtual override double FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>.Avg(Expression`1<Func`2<HzyTuple`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>, TMember>> column);
    private sealed virtual override ISelectGrouping`2<TKey, NativeTuple`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>.GroupBy(Expression`1<Func`2<HzyTuple`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>, TKey>> exp);
    private sealed virtual override TMember FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>.Max(Expression`1<Func`2<HzyTuple`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>, TMember>> column);
    private sealed virtual override TMember FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>.Min(Expression`1<Func`2<HzyTuple`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>, TMember>> column);
    private sealed virtual override ISelect`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>.OrderBy(Expression`1<Func`2<HzyTuple`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>, TMember>> column);
    private sealed virtual override ISelect`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>.OrderByDescending(Expression`1<Func`2<HzyTuple`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>, TMember>> column);
    private sealed virtual override ISelect`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>.OrderByIf(bool condition, Expression`1<Func`2<HzyTuple`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>, TMember>> column, bool descending);
    private sealed virtual override decimal FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>.Sum(Expression`1<Func`2<HzyTuple`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>, TMember>> column);
    private sealed virtual override List`1<TReturn> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>.ToList(Expression`1<Func`2<HzyTuple`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>, TReturn>> select);
    public sealed virtual void ToChunk(Expression`1<Func`2<HzyTuple`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>, TReturn>> select, int size, Action`1<FetchCallbackArgs`1<List`1<TReturn>>> done);
    private sealed virtual override DataTable FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>.ToDataTable(Expression`1<Func`2<HzyTuple`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>, TReturn>> select);
    private sealed virtual override int FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>.InsertInto(string tableName, Expression`1<Func`2<HzyTuple`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>, TTargetEntity>> select);
    private sealed virtual override string FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>.ToSql(Expression`1<Func`2<HzyTuple`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>, TReturn>> select, FieldAliasOptions fieldAlias);
    private sealed virtual override ISelect`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>.LeftJoin(Expression`1<Func`2<HzyTuple`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>, bool>> exp);
    private sealed virtual override ISelect`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>.InnerJoin(Expression`1<Func`2<HzyTuple`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>, bool>> exp);
    private sealed virtual override ISelect`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>.RightJoin(Expression`1<Func`2<HzyTuple`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>, bool>> exp);
    private sealed virtual override ISelect`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>.Where(Expression`1<Func`2<HzyTuple`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>, bool>> exp);
    private sealed virtual override ISelect`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>.WhereIf(bool condition, Expression`1<Func`2<HzyTuple`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>, bool>> exp);
    private sealed virtual override bool FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>.Any(Expression`1<Func`2<HzyTuple`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>, bool>> exp);
    private sealed virtual override TReturn FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>.ToOne(Expression`1<Func`2<HzyTuple`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>, TReturn>> select);
    private sealed virtual override TReturn FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>.First(Expression`1<Func`2<HzyTuple`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>, TReturn>> select);
    private sealed virtual override Task`1<double> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>.AvgAsync(Expression`1<Func`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TMember>> column, CancellationToken cancellationToken);
    private sealed virtual override Task`1<TMember> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>.MaxAsync(Expression`1<Func`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TMember>> column, CancellationToken cancellationToken);
    private sealed virtual override Task`1<TMember> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>.MinAsync(Expression`1<Func`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TMember>> column, CancellationToken cancellationToken);
    private sealed virtual override Task`1<decimal> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>.SumAsync(Expression`1<Func`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TMember>> column, CancellationToken cancellationToken);
    private sealed virtual override Task`1<TReturn> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>.ToAggregateAsync(Expression`1<Func`13<ISelectGroupingAggregate`1<T1>, ISelectGroupingAggregate`1<T2>, ISelectGroupingAggregate`1<T3>, ISelectGroupingAggregate`1<T4>, ISelectGroupingAggregate`1<T5>, ISelectGroupingAggregate`1<T6>, ISelectGroupingAggregate`1<T7>, ISelectGroupingAggregate`1<T8>, ISelectGroupingAggregate`1<T9>, ISelectGroupingAggregate`1<T10>, ISelectGroupingAggregate`1<T11>, ISelectGroupingAggregate`1<T12>, TReturn>> select, CancellationToken cancellationToken);
    private sealed virtual override Task`1<List`1<TReturn>> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>.ToListAsync(Expression`1<Func`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TReturn>> select, CancellationToken cancellationToken);
    private sealed virtual override Task`1<List`1<TDto>> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>.ToListAsync(CancellationToken cancellationToken);
    private sealed virtual override Task`1<DataTable> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>.ToDataTableAsync(Expression`1<Func`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TReturn>> select, CancellationToken cancellationToken);
    private sealed virtual override Task`1<int> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>.InsertIntoAsync(string tableName, Expression`1<Func`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TTargetEntity>> select, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("FreeSql.Internal.CommonProvider.Select12Provider`12/<FreeSql-ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>-AnyAsync>d__61")]
[DebuggerStepThroughAttribute]
private sealed virtual override Task`1<bool> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>.AnyAsync(Expression`1<Func`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, bool>> exp, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("FreeSql.Internal.CommonProvider.Select12Provider`12/<FreeSql-ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>-ToOneAsync>d__62`1")]
[DebuggerStepThroughAttribute]
private sealed virtual override Task`1<TReturn> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>.ToOneAsync(Expression`1<Func`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TReturn>> select, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("FreeSql.Internal.CommonProvider.Select12Provider`12/<FreeSql-ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>-FirstAsync>d__63`1")]
[DebuggerStepThroughAttribute]
private sealed virtual override Task`1<TReturn> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>.FirstAsync(Expression`1<Func`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TReturn>> select, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("FreeSql.Internal.CommonProvider.Select12Provider`12/<FreeSql-ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>-FirstAsync>d__64`1")]
[DebuggerStepThroughAttribute]
private sealed virtual override Task`1<TDto> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>.FirstAsync(CancellationToken cancellationToken);
    private sealed virtual override Task`1<double> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>.AvgAsync(Expression`1<Func`2<HzyTuple`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>, TMember>> column, CancellationToken cancellationToken);
    private sealed virtual override Task`1<TMember> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>.MaxAsync(Expression`1<Func`2<HzyTuple`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>, TMember>> column, CancellationToken cancellationToken);
    private sealed virtual override Task`1<TMember> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>.MinAsync(Expression`1<Func`2<HzyTuple`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>, TMember>> column, CancellationToken cancellationToken);
    private sealed virtual override Task`1<decimal> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>.SumAsync(Expression`1<Func`2<HzyTuple`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>, TMember>> column, CancellationToken cancellationToken);
    private sealed virtual override Task`1<List`1<TReturn>> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>.ToListAsync(Expression`1<Func`2<HzyTuple`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>, TReturn>> select, CancellationToken cancellationToken);
    private sealed virtual override Task`1<DataTable> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>.ToDataTableAsync(Expression`1<Func`2<HzyTuple`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>, TReturn>> select, CancellationToken cancellationToken);
    private sealed virtual override Task`1<int> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>.InsertIntoAsync(string tableName, Expression`1<Func`2<HzyTuple`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>, TTargetEntity>> select, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("FreeSql.Internal.CommonProvider.Select12Provider`12/<FreeSql-ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>-AnyAsync>d__72")]
[DebuggerStepThroughAttribute]
private sealed virtual override Task`1<bool> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>.AnyAsync(Expression`1<Func`2<HzyTuple`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>, bool>> exp, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("FreeSql.Internal.CommonProvider.Select12Provider`12/<FreeSql-ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>-ToOneAsync>d__73`1")]
[DebuggerStepThroughAttribute]
private sealed virtual override Task`1<TReturn> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>.ToOneAsync(Expression`1<Func`2<HzyTuple`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>, TReturn>> select, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("FreeSql.Internal.CommonProvider.Select12Provider`12/<FreeSql-ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>-FirstAsync>d__74`1")]
[DebuggerStepThroughAttribute]
private sealed virtual override Task`1<TReturn> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>.FirstAsync(Expression`1<Func`2<HzyTuple`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>, TReturn>> select, CancellationToken cancellationToken);
}
public abstract class FreeSql.Internal.CommonProvider.Select13Provider`13 : Select0Provider`2<ISelect`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>, T1> {
    public Select13Provider`13(IFreeSql orm, CommonUtils commonUtils, CommonExpression commonExpression, object dywhere);
    private sealed virtual override ISelect`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>.WithSql(string sqlT1, string sqlT2, string sqlT3, string sqlT4, string sqlT5, string sqlT6, string sqlT7, string sqlT8, string sqlT9, string sqlT10, string sqlT11, string sqlT12, string sqlT13, object parms);
    private sealed virtual override ISelect`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>.As(string aliasT1, string aliasT2, string aliasT3, string aliasT4, string aliasT5, string aliasT6, string aliasT7, string aliasT8, string aliasT9, string aliasT10, string aliasT11, string aliasT12, string aliasT13);
    private sealed virtual override ISelect`1<TDto> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>.WithTempQuery(Expression`1<Func`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TDto>> selector);
    private sealed virtual override double FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>.Avg(Expression`1<Func`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TMember>> column);
    private sealed virtual override ISelectGrouping`2<TKey, NativeTuple`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>.GroupBy(Expression`1<Func`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TKey>> exp);
    private sealed virtual override TMember FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>.Max(Expression`1<Func`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TMember>> column);
    private sealed virtual override TMember FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>.Min(Expression`1<Func`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TMember>> column);
    private sealed virtual override ISelect`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>.OrderBy(Expression`1<Func`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TMember>> column);
    private sealed virtual override ISelect`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>.OrderByDescending(Expression`1<Func`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TMember>> column);
    private sealed virtual override ISelect`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>.OrderByIf(bool condition, Expression`1<Func`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TMember>> column, bool descending);
    private sealed virtual override decimal FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>.Sum(Expression`1<Func`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TMember>> column);
    private sealed virtual override TReturn FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>.ToAggregate(Expression`1<Func`14<ISelectGroupingAggregate`1<T1>, ISelectGroupingAggregate`1<T2>, ISelectGroupingAggregate`1<T3>, ISelectGroupingAggregate`1<T4>, ISelectGroupingAggregate`1<T5>, ISelectGroupingAggregate`1<T6>, ISelectGroupingAggregate`1<T7>, ISelectGroupingAggregate`1<T8>, ISelectGroupingAggregate`1<T9>, ISelectGroupingAggregate`1<T10>, ISelectGroupingAggregate`1<T11>, ISelectGroupingAggregate`1<T12>, ISelectGroupingAggregate`1<T13>, TReturn>> select);
    private sealed virtual override ISelect`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>.Aggregate(Expression`1<Func`14<ISelectGroupingAggregate`1<T1>, ISelectGroupingAggregate`1<T2>, ISelectGroupingAggregate`1<T3>, ISelectGroupingAggregate`1<T4>, ISelectGroupingAggregate`1<T5>, ISelectGroupingAggregate`1<T6>, ISelectGroupingAggregate`1<T7>, ISelectGroupingAggregate`1<T8>, ISelectGroupingAggregate`1<T9>, ISelectGroupingAggregate`1<T10>, ISelectGroupingAggregate`1<T11>, ISelectGroupingAggregate`1<T12>, ISelectGroupingAggregate`1<T13>, TReturn>> select, TReturn& result);
    private sealed virtual override List`1<TReturn> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>.ToList(Expression`1<Func`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TReturn>> select);
    private sealed virtual override List`1<TDto> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>.ToList();
    private Expression`1<Func`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TDto>> GetToListDtoSelector();
    public sealed virtual void ToChunk(Expression`1<Func`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TReturn>> select, int size, Action`1<FetchCallbackArgs`1<List`1<TReturn>>> done);
    private sealed virtual override DataTable FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>.ToDataTable(Expression`1<Func`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TReturn>> select);
    private sealed virtual override int FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>.InsertInto(string tableName, Expression`1<Func`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TTargetEntity>> select);
    private sealed virtual override string FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>.ToSql(Expression`1<Func`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TReturn>> select, FieldAliasOptions fieldAlias);
    private sealed virtual override ISelect`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>.LeftJoin(Expression`1<Func`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, bool>> exp);
    private sealed virtual override ISelect`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>.InnerJoin(Expression`1<Func`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, bool>> exp);
    private sealed virtual override ISelect`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>.RightJoin(Expression`1<Func`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, bool>> exp);
    private sealed virtual override ISelect`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>.Where(Expression`1<Func`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, bool>> exp);
    private sealed virtual override ISelect`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>.WhereIf(bool condition, Expression`1<Func`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, bool>> exp);
    private sealed virtual override bool FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>.Any(Expression`1<Func`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, bool>> exp);
    private sealed virtual override TReturn FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>.ToOne(Expression`1<Func`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TReturn>> select);
    private sealed virtual override TReturn FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>.First(Expression`1<Func`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TReturn>> select);
    private sealed virtual override TDto FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>.First();
    private sealed virtual override ISelect`1<TDto> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>.WithTempQuery(Expression`1<Func`2<HzyTuple`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>, TDto>> selector);
    private sealed virtual override double FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>.Avg(Expression`1<Func`2<HzyTuple`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>, TMember>> column);
    private sealed virtual override ISelectGrouping`2<TKey, NativeTuple`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>.GroupBy(Expression`1<Func`2<HzyTuple`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>, TKey>> exp);
    private sealed virtual override TMember FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>.Max(Expression`1<Func`2<HzyTuple`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>, TMember>> column);
    private sealed virtual override TMember FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>.Min(Expression`1<Func`2<HzyTuple`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>, TMember>> column);
    private sealed virtual override ISelect`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>.OrderBy(Expression`1<Func`2<HzyTuple`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>, TMember>> column);
    private sealed virtual override ISelect`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>.OrderByDescending(Expression`1<Func`2<HzyTuple`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>, TMember>> column);
    private sealed virtual override ISelect`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>.OrderByIf(bool condition, Expression`1<Func`2<HzyTuple`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>, TMember>> column, bool descending);
    private sealed virtual override decimal FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>.Sum(Expression`1<Func`2<HzyTuple`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>, TMember>> column);
    private sealed virtual override List`1<TReturn> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>.ToList(Expression`1<Func`2<HzyTuple`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>, TReturn>> select);
    public sealed virtual void ToChunk(Expression`1<Func`2<HzyTuple`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>, TReturn>> select, int size, Action`1<FetchCallbackArgs`1<List`1<TReturn>>> done);
    private sealed virtual override DataTable FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>.ToDataTable(Expression`1<Func`2<HzyTuple`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>, TReturn>> select);
    private sealed virtual override int FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>.InsertInto(string tableName, Expression`1<Func`2<HzyTuple`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>, TTargetEntity>> select);
    private sealed virtual override string FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>.ToSql(Expression`1<Func`2<HzyTuple`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>, TReturn>> select, FieldAliasOptions fieldAlias);
    private sealed virtual override ISelect`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>.LeftJoin(Expression`1<Func`2<HzyTuple`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>, bool>> exp);
    private sealed virtual override ISelect`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>.InnerJoin(Expression`1<Func`2<HzyTuple`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>, bool>> exp);
    private sealed virtual override ISelect`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>.RightJoin(Expression`1<Func`2<HzyTuple`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>, bool>> exp);
    private sealed virtual override ISelect`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>.Where(Expression`1<Func`2<HzyTuple`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>, bool>> exp);
    private sealed virtual override ISelect`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>.WhereIf(bool condition, Expression`1<Func`2<HzyTuple`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>, bool>> exp);
    private sealed virtual override bool FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>.Any(Expression`1<Func`2<HzyTuple`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>, bool>> exp);
    private sealed virtual override TReturn FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>.ToOne(Expression`1<Func`2<HzyTuple`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>, TReturn>> select);
    private sealed virtual override TReturn FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>.First(Expression`1<Func`2<HzyTuple`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>, TReturn>> select);
    private sealed virtual override Task`1<double> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>.AvgAsync(Expression`1<Func`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TMember>> column, CancellationToken cancellationToken);
    private sealed virtual override Task`1<TMember> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>.MaxAsync(Expression`1<Func`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TMember>> column, CancellationToken cancellationToken);
    private sealed virtual override Task`1<TMember> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>.MinAsync(Expression`1<Func`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TMember>> column, CancellationToken cancellationToken);
    private sealed virtual override Task`1<decimal> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>.SumAsync(Expression`1<Func`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TMember>> column, CancellationToken cancellationToken);
    private sealed virtual override Task`1<TReturn> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>.ToAggregateAsync(Expression`1<Func`14<ISelectGroupingAggregate`1<T1>, ISelectGroupingAggregate`1<T2>, ISelectGroupingAggregate`1<T3>, ISelectGroupingAggregate`1<T4>, ISelectGroupingAggregate`1<T5>, ISelectGroupingAggregate`1<T6>, ISelectGroupingAggregate`1<T7>, ISelectGroupingAggregate`1<T8>, ISelectGroupingAggregate`1<T9>, ISelectGroupingAggregate`1<T10>, ISelectGroupingAggregate`1<T11>, ISelectGroupingAggregate`1<T12>, ISelectGroupingAggregate`1<T13>, TReturn>> select, CancellationToken cancellationToken);
    private sealed virtual override Task`1<List`1<TReturn>> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>.ToListAsync(Expression`1<Func`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TReturn>> select, CancellationToken cancellationToken);
    private sealed virtual override Task`1<List`1<TDto>> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>.ToListAsync(CancellationToken cancellationToken);
    private sealed virtual override Task`1<DataTable> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>.ToDataTableAsync(Expression`1<Func`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TReturn>> select, CancellationToken cancellationToken);
    private sealed virtual override Task`1<int> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>.InsertIntoAsync(string tableName, Expression`1<Func`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TTargetEntity>> select, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("FreeSql.Internal.CommonProvider.Select13Provider`13/<FreeSql-ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>-AnyAsync>d__61")]
[DebuggerStepThroughAttribute]
private sealed virtual override Task`1<bool> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>.AnyAsync(Expression`1<Func`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, bool>> exp, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("FreeSql.Internal.CommonProvider.Select13Provider`13/<FreeSql-ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>-ToOneAsync>d__62`1")]
[DebuggerStepThroughAttribute]
private sealed virtual override Task`1<TReturn> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>.ToOneAsync(Expression`1<Func`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TReturn>> select, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("FreeSql.Internal.CommonProvider.Select13Provider`13/<FreeSql-ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>-FirstAsync>d__63`1")]
[DebuggerStepThroughAttribute]
private sealed virtual override Task`1<TReturn> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>.FirstAsync(Expression`1<Func`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TReturn>> select, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("FreeSql.Internal.CommonProvider.Select13Provider`13/<FreeSql-ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>-FirstAsync>d__64`1")]
[DebuggerStepThroughAttribute]
private sealed virtual override Task`1<TDto> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>.FirstAsync(CancellationToken cancellationToken);
    private sealed virtual override Task`1<double> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>.AvgAsync(Expression`1<Func`2<HzyTuple`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>, TMember>> column, CancellationToken cancellationToken);
    private sealed virtual override Task`1<TMember> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>.MaxAsync(Expression`1<Func`2<HzyTuple`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>, TMember>> column, CancellationToken cancellationToken);
    private sealed virtual override Task`1<TMember> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>.MinAsync(Expression`1<Func`2<HzyTuple`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>, TMember>> column, CancellationToken cancellationToken);
    private sealed virtual override Task`1<decimal> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>.SumAsync(Expression`1<Func`2<HzyTuple`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>, TMember>> column, CancellationToken cancellationToken);
    private sealed virtual override Task`1<List`1<TReturn>> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>.ToListAsync(Expression`1<Func`2<HzyTuple`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>, TReturn>> select, CancellationToken cancellationToken);
    private sealed virtual override Task`1<DataTable> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>.ToDataTableAsync(Expression`1<Func`2<HzyTuple`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>, TReturn>> select, CancellationToken cancellationToken);
    private sealed virtual override Task`1<int> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>.InsertIntoAsync(string tableName, Expression`1<Func`2<HzyTuple`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>, TTargetEntity>> select, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("FreeSql.Internal.CommonProvider.Select13Provider`13/<FreeSql-ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>-AnyAsync>d__72")]
[DebuggerStepThroughAttribute]
private sealed virtual override Task`1<bool> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>.AnyAsync(Expression`1<Func`2<HzyTuple`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>, bool>> exp, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("FreeSql.Internal.CommonProvider.Select13Provider`13/<FreeSql-ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>-ToOneAsync>d__73`1")]
[DebuggerStepThroughAttribute]
private sealed virtual override Task`1<TReturn> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>.ToOneAsync(Expression`1<Func`2<HzyTuple`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>, TReturn>> select, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("FreeSql.Internal.CommonProvider.Select13Provider`13/<FreeSql-ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>-FirstAsync>d__74`1")]
[DebuggerStepThroughAttribute]
private sealed virtual override Task`1<TReturn> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>.FirstAsync(Expression`1<Func`2<HzyTuple`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>, TReturn>> select, CancellationToken cancellationToken);
}
public abstract class FreeSql.Internal.CommonProvider.Select14Provider`14 : Select0Provider`2<ISelect`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>, T1> {
    public Select14Provider`14(IFreeSql orm, CommonUtils commonUtils, CommonExpression commonExpression, object dywhere);
    private sealed virtual override ISelect`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>.WithSql(string sqlT1, string sqlT2, string sqlT3, string sqlT4, string sqlT5, string sqlT6, string sqlT7, string sqlT8, string sqlT9, string sqlT10, string sqlT11, string sqlT12, string sqlT13, string sqlT14, object parms);
    private sealed virtual override ISelect`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>.As(string aliasT1, string aliasT2, string aliasT3, string aliasT4, string aliasT5, string aliasT6, string aliasT7, string aliasT8, string aliasT9, string aliasT10, string aliasT11, string aliasT12, string aliasT13, string aliasT14);
    private sealed virtual override ISelect`1<TDto> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>.WithTempQuery(Expression`1<Func`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TDto>> selector);
    private sealed virtual override double FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>.Avg(Expression`1<Func`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TMember>> column);
    private sealed virtual override ISelectGrouping`2<TKey, NativeTuple`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>.GroupBy(Expression`1<Func`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TKey>> exp);
    private sealed virtual override TMember FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>.Max(Expression`1<Func`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TMember>> column);
    private sealed virtual override TMember FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>.Min(Expression`1<Func`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TMember>> column);
    private sealed virtual override ISelect`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>.OrderBy(Expression`1<Func`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TMember>> column);
    private sealed virtual override ISelect`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>.OrderByDescending(Expression`1<Func`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TMember>> column);
    private sealed virtual override ISelect`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>.OrderByIf(bool condition, Expression`1<Func`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TMember>> column, bool descending);
    private sealed virtual override decimal FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>.Sum(Expression`1<Func`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TMember>> column);
    private sealed virtual override TReturn FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>.ToAggregate(Expression`1<Func`15<ISelectGroupingAggregate`1<T1>, ISelectGroupingAggregate`1<T2>, ISelectGroupingAggregate`1<T3>, ISelectGroupingAggregate`1<T4>, ISelectGroupingAggregate`1<T5>, ISelectGroupingAggregate`1<T6>, ISelectGroupingAggregate`1<T7>, ISelectGroupingAggregate`1<T8>, ISelectGroupingAggregate`1<T9>, ISelectGroupingAggregate`1<T10>, ISelectGroupingAggregate`1<T11>, ISelectGroupingAggregate`1<T12>, ISelectGroupingAggregate`1<T13>, ISelectGroupingAggregate`1<T14>, TReturn>> select);
    private sealed virtual override ISelect`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>.Aggregate(Expression`1<Func`15<ISelectGroupingAggregate`1<T1>, ISelectGroupingAggregate`1<T2>, ISelectGroupingAggregate`1<T3>, ISelectGroupingAggregate`1<T4>, ISelectGroupingAggregate`1<T5>, ISelectGroupingAggregate`1<T6>, ISelectGroupingAggregate`1<T7>, ISelectGroupingAggregate`1<T8>, ISelectGroupingAggregate`1<T9>, ISelectGroupingAggregate`1<T10>, ISelectGroupingAggregate`1<T11>, ISelectGroupingAggregate`1<T12>, ISelectGroupingAggregate`1<T13>, ISelectGroupingAggregate`1<T14>, TReturn>> select, TReturn& result);
    private sealed virtual override List`1<TReturn> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>.ToList(Expression`1<Func`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TReturn>> select);
    private sealed virtual override List`1<TDto> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>.ToList();
    private Expression`1<Func`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TDto>> GetToListDtoSelector();
    public sealed virtual void ToChunk(Expression`1<Func`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TReturn>> select, int size, Action`1<FetchCallbackArgs`1<List`1<TReturn>>> done);
    private sealed virtual override DataTable FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>.ToDataTable(Expression`1<Func`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TReturn>> select);
    private sealed virtual override int FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>.InsertInto(string tableName, Expression`1<Func`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TTargetEntity>> select);
    private sealed virtual override string FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>.ToSql(Expression`1<Func`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TReturn>> select, FieldAliasOptions fieldAlias);
    private sealed virtual override ISelect`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>.LeftJoin(Expression`1<Func`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, bool>> exp);
    private sealed virtual override ISelect`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>.InnerJoin(Expression`1<Func`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, bool>> exp);
    private sealed virtual override ISelect`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>.RightJoin(Expression`1<Func`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, bool>> exp);
    private sealed virtual override ISelect`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>.Where(Expression`1<Func`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, bool>> exp);
    private sealed virtual override ISelect`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>.WhereIf(bool condition, Expression`1<Func`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, bool>> exp);
    private sealed virtual override bool FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>.Any(Expression`1<Func`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, bool>> exp);
    private sealed virtual override TReturn FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>.ToOne(Expression`1<Func`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TReturn>> select);
    private sealed virtual override TReturn FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>.First(Expression`1<Func`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TReturn>> select);
    private sealed virtual override TDto FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>.First();
    private sealed virtual override ISelect`1<TDto> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>.WithTempQuery(Expression`1<Func`2<HzyTuple`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>, TDto>> selector);
    private sealed virtual override double FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>.Avg(Expression`1<Func`2<HzyTuple`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>, TMember>> column);
    private sealed virtual override ISelectGrouping`2<TKey, NativeTuple`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>.GroupBy(Expression`1<Func`2<HzyTuple`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>, TKey>> exp);
    private sealed virtual override TMember FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>.Max(Expression`1<Func`2<HzyTuple`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>, TMember>> column);
    private sealed virtual override TMember FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>.Min(Expression`1<Func`2<HzyTuple`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>, TMember>> column);
    private sealed virtual override ISelect`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>.OrderBy(Expression`1<Func`2<HzyTuple`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>, TMember>> column);
    private sealed virtual override ISelect`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>.OrderByDescending(Expression`1<Func`2<HzyTuple`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>, TMember>> column);
    private sealed virtual override ISelect`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>.OrderByIf(bool condition, Expression`1<Func`2<HzyTuple`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>, TMember>> column, bool descending);
    private sealed virtual override decimal FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>.Sum(Expression`1<Func`2<HzyTuple`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>, TMember>> column);
    private sealed virtual override List`1<TReturn> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>.ToList(Expression`1<Func`2<HzyTuple`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>, TReturn>> select);
    public sealed virtual void ToChunk(Expression`1<Func`2<HzyTuple`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>, TReturn>> select, int size, Action`1<FetchCallbackArgs`1<List`1<TReturn>>> done);
    private sealed virtual override DataTable FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>.ToDataTable(Expression`1<Func`2<HzyTuple`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>, TReturn>> select);
    private sealed virtual override int FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>.InsertInto(string tableName, Expression`1<Func`2<HzyTuple`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>, TTargetEntity>> select);
    private sealed virtual override string FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>.ToSql(Expression`1<Func`2<HzyTuple`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>, TReturn>> select, FieldAliasOptions fieldAlias);
    private sealed virtual override ISelect`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>.LeftJoin(Expression`1<Func`2<HzyTuple`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>, bool>> exp);
    private sealed virtual override ISelect`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>.InnerJoin(Expression`1<Func`2<HzyTuple`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>, bool>> exp);
    private sealed virtual override ISelect`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>.RightJoin(Expression`1<Func`2<HzyTuple`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>, bool>> exp);
    private sealed virtual override ISelect`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>.Where(Expression`1<Func`2<HzyTuple`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>, bool>> exp);
    private sealed virtual override ISelect`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>.WhereIf(bool condition, Expression`1<Func`2<HzyTuple`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>, bool>> exp);
    private sealed virtual override bool FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>.Any(Expression`1<Func`2<HzyTuple`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>, bool>> exp);
    private sealed virtual override TReturn FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>.ToOne(Expression`1<Func`2<HzyTuple`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>, TReturn>> select);
    private sealed virtual override TReturn FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>.First(Expression`1<Func`2<HzyTuple`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>, TReturn>> select);
    private sealed virtual override Task`1<double> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>.AvgAsync(Expression`1<Func`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TMember>> column, CancellationToken cancellationToken);
    private sealed virtual override Task`1<TMember> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>.MaxAsync(Expression`1<Func`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TMember>> column, CancellationToken cancellationToken);
    private sealed virtual override Task`1<TMember> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>.MinAsync(Expression`1<Func`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TMember>> column, CancellationToken cancellationToken);
    private sealed virtual override Task`1<decimal> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>.SumAsync(Expression`1<Func`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TMember>> column, CancellationToken cancellationToken);
    private sealed virtual override Task`1<TReturn> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>.ToAggregateAsync(Expression`1<Func`15<ISelectGroupingAggregate`1<T1>, ISelectGroupingAggregate`1<T2>, ISelectGroupingAggregate`1<T3>, ISelectGroupingAggregate`1<T4>, ISelectGroupingAggregate`1<T5>, ISelectGroupingAggregate`1<T6>, ISelectGroupingAggregate`1<T7>, ISelectGroupingAggregate`1<T8>, ISelectGroupingAggregate`1<T9>, ISelectGroupingAggregate`1<T10>, ISelectGroupingAggregate`1<T11>, ISelectGroupingAggregate`1<T12>, ISelectGroupingAggregate`1<T13>, ISelectGroupingAggregate`1<T14>, TReturn>> select, CancellationToken cancellationToken);
    private sealed virtual override Task`1<List`1<TReturn>> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>.ToListAsync(Expression`1<Func`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TReturn>> select, CancellationToken cancellationToken);
    private sealed virtual override Task`1<List`1<TDto>> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>.ToListAsync(CancellationToken cancellationToken);
    private sealed virtual override Task`1<DataTable> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>.ToDataTableAsync(Expression`1<Func`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TReturn>> select, CancellationToken cancellationToken);
    private sealed virtual override Task`1<int> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>.InsertIntoAsync(string tableName, Expression`1<Func`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TTargetEntity>> select, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("FreeSql.Internal.CommonProvider.Select14Provider`14/<FreeSql-ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>-AnyAsync>d__61")]
[DebuggerStepThroughAttribute]
private sealed virtual override Task`1<bool> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>.AnyAsync(Expression`1<Func`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, bool>> exp, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("FreeSql.Internal.CommonProvider.Select14Provider`14/<FreeSql-ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>-ToOneAsync>d__62`1")]
[DebuggerStepThroughAttribute]
private sealed virtual override Task`1<TReturn> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>.ToOneAsync(Expression`1<Func`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TReturn>> select, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("FreeSql.Internal.CommonProvider.Select14Provider`14/<FreeSql-ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>-FirstAsync>d__63`1")]
[DebuggerStepThroughAttribute]
private sealed virtual override Task`1<TReturn> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>.FirstAsync(Expression`1<Func`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TReturn>> select, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("FreeSql.Internal.CommonProvider.Select14Provider`14/<FreeSql-ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>-FirstAsync>d__64`1")]
[DebuggerStepThroughAttribute]
private sealed virtual override Task`1<TDto> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>.FirstAsync(CancellationToken cancellationToken);
    private sealed virtual override Task`1<double> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>.AvgAsync(Expression`1<Func`2<HzyTuple`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>, TMember>> column, CancellationToken cancellationToken);
    private sealed virtual override Task`1<TMember> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>.MaxAsync(Expression`1<Func`2<HzyTuple`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>, TMember>> column, CancellationToken cancellationToken);
    private sealed virtual override Task`1<TMember> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>.MinAsync(Expression`1<Func`2<HzyTuple`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>, TMember>> column, CancellationToken cancellationToken);
    private sealed virtual override Task`1<decimal> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>.SumAsync(Expression`1<Func`2<HzyTuple`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>, TMember>> column, CancellationToken cancellationToken);
    private sealed virtual override Task`1<List`1<TReturn>> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>.ToListAsync(Expression`1<Func`2<HzyTuple`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>, TReturn>> select, CancellationToken cancellationToken);
    private sealed virtual override Task`1<DataTable> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>.ToDataTableAsync(Expression`1<Func`2<HzyTuple`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>, TReturn>> select, CancellationToken cancellationToken);
    private sealed virtual override Task`1<int> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>.InsertIntoAsync(string tableName, Expression`1<Func`2<HzyTuple`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>, TTargetEntity>> select, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("FreeSql.Internal.CommonProvider.Select14Provider`14/<FreeSql-ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>-AnyAsync>d__72")]
[DebuggerStepThroughAttribute]
private sealed virtual override Task`1<bool> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>.AnyAsync(Expression`1<Func`2<HzyTuple`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>, bool>> exp, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("FreeSql.Internal.CommonProvider.Select14Provider`14/<FreeSql-ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>-ToOneAsync>d__73`1")]
[DebuggerStepThroughAttribute]
private sealed virtual override Task`1<TReturn> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>.ToOneAsync(Expression`1<Func`2<HzyTuple`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>, TReturn>> select, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("FreeSql.Internal.CommonProvider.Select14Provider`14/<FreeSql-ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>-FirstAsync>d__74`1")]
[DebuggerStepThroughAttribute]
private sealed virtual override Task`1<TReturn> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>.FirstAsync(Expression`1<Func`2<HzyTuple`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>, TReturn>> select, CancellationToken cancellationToken);
}
public abstract class FreeSql.Internal.CommonProvider.Select15Provider`15 : Select0Provider`2<ISelect`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>, T1> {
    public Select15Provider`15(IFreeSql orm, CommonUtils commonUtils, CommonExpression commonExpression, object dywhere);
    private sealed virtual override ISelect`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>.WithSql(string sqlT1, string sqlT2, string sqlT3, string sqlT4, string sqlT5, string sqlT6, string sqlT7, string sqlT8, string sqlT9, string sqlT10, string sqlT11, string sqlT12, string sqlT13, string sqlT14, string sqlT15, object parms);
    private sealed virtual override ISelect`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>.As(string aliasT1, string aliasT2, string aliasT3, string aliasT4, string aliasT5, string aliasT6, string aliasT7, string aliasT8, string aliasT9, string aliasT10, string aliasT11, string aliasT12, string aliasT13, string aliasT14, string aliasT15);
    private sealed virtual override ISelect`1<TDto> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>.WithTempQuery(Expression`1<Func`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TDto>> selector);
    private sealed virtual override double FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>.Avg(Expression`1<Func`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TMember>> column);
    private sealed virtual override ISelectGrouping`2<TKey, NativeTuple`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>.GroupBy(Expression`1<Func`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TKey>> exp);
    private sealed virtual override TMember FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>.Max(Expression`1<Func`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TMember>> column);
    private sealed virtual override TMember FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>.Min(Expression`1<Func`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TMember>> column);
    private sealed virtual override ISelect`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>.OrderBy(Expression`1<Func`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TMember>> column);
    private sealed virtual override ISelect`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>.OrderByDescending(Expression`1<Func`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TMember>> column);
    private sealed virtual override ISelect`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>.OrderByIf(bool condition, Expression`1<Func`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TMember>> column, bool descending);
    private sealed virtual override decimal FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>.Sum(Expression`1<Func`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TMember>> column);
    private sealed virtual override TReturn FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>.ToAggregate(Expression`1<Func`16<ISelectGroupingAggregate`1<T1>, ISelectGroupingAggregate`1<T2>, ISelectGroupingAggregate`1<T3>, ISelectGroupingAggregate`1<T4>, ISelectGroupingAggregate`1<T5>, ISelectGroupingAggregate`1<T6>, ISelectGroupingAggregate`1<T7>, ISelectGroupingAggregate`1<T8>, ISelectGroupingAggregate`1<T9>, ISelectGroupingAggregate`1<T10>, ISelectGroupingAggregate`1<T11>, ISelectGroupingAggregate`1<T12>, ISelectGroupingAggregate`1<T13>, ISelectGroupingAggregate`1<T14>, ISelectGroupingAggregate`1<T15>, TReturn>> select);
    private sealed virtual override ISelect`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>.Aggregate(Expression`1<Func`16<ISelectGroupingAggregate`1<T1>, ISelectGroupingAggregate`1<T2>, ISelectGroupingAggregate`1<T3>, ISelectGroupingAggregate`1<T4>, ISelectGroupingAggregate`1<T5>, ISelectGroupingAggregate`1<T6>, ISelectGroupingAggregate`1<T7>, ISelectGroupingAggregate`1<T8>, ISelectGroupingAggregate`1<T9>, ISelectGroupingAggregate`1<T10>, ISelectGroupingAggregate`1<T11>, ISelectGroupingAggregate`1<T12>, ISelectGroupingAggregate`1<T13>, ISelectGroupingAggregate`1<T14>, ISelectGroupingAggregate`1<T15>, TReturn>> select, TReturn& result);
    private sealed virtual override List`1<TReturn> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>.ToList(Expression`1<Func`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TReturn>> select);
    private sealed virtual override List`1<TDto> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>.ToList();
    private Expression`1<Func`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TDto>> GetToListDtoSelector();
    public sealed virtual void ToChunk(Expression`1<Func`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TReturn>> select, int size, Action`1<FetchCallbackArgs`1<List`1<TReturn>>> done);
    private sealed virtual override DataTable FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>.ToDataTable(Expression`1<Func`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TReturn>> select);
    private sealed virtual override int FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>.InsertInto(string tableName, Expression`1<Func`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TTargetEntity>> select);
    private sealed virtual override string FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>.ToSql(Expression`1<Func`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TReturn>> select, FieldAliasOptions fieldAlias);
    private sealed virtual override ISelect`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>.LeftJoin(Expression`1<Func`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, bool>> exp);
    private sealed virtual override ISelect`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>.InnerJoin(Expression`1<Func`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, bool>> exp);
    private sealed virtual override ISelect`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>.RightJoin(Expression`1<Func`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, bool>> exp);
    private sealed virtual override ISelect`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>.Where(Expression`1<Func`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, bool>> exp);
    private sealed virtual override ISelect`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>.WhereIf(bool condition, Expression`1<Func`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, bool>> exp);
    private sealed virtual override bool FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>.Any(Expression`1<Func`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, bool>> exp);
    private sealed virtual override TReturn FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>.ToOne(Expression`1<Func`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TReturn>> select);
    private sealed virtual override TReturn FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>.First(Expression`1<Func`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TReturn>> select);
    private sealed virtual override TDto FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>.First();
    private sealed virtual override ISelect`1<TDto> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>.WithTempQuery(Expression`1<Func`2<HzyTuple`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>, TDto>> selector);
    private sealed virtual override double FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>.Avg(Expression`1<Func`2<HzyTuple`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>, TMember>> column);
    private sealed virtual override ISelectGrouping`2<TKey, NativeTuple`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>.GroupBy(Expression`1<Func`2<HzyTuple`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>, TKey>> exp);
    private sealed virtual override TMember FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>.Max(Expression`1<Func`2<HzyTuple`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>, TMember>> column);
    private sealed virtual override TMember FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>.Min(Expression`1<Func`2<HzyTuple`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>, TMember>> column);
    private sealed virtual override ISelect`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>.OrderBy(Expression`1<Func`2<HzyTuple`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>, TMember>> column);
    private sealed virtual override ISelect`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>.OrderByDescending(Expression`1<Func`2<HzyTuple`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>, TMember>> column);
    private sealed virtual override ISelect`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>.OrderByIf(bool condition, Expression`1<Func`2<HzyTuple`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>, TMember>> column, bool descending);
    private sealed virtual override decimal FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>.Sum(Expression`1<Func`2<HzyTuple`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>, TMember>> column);
    private sealed virtual override List`1<TReturn> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>.ToList(Expression`1<Func`2<HzyTuple`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>, TReturn>> select);
    public sealed virtual void ToChunk(Expression`1<Func`2<HzyTuple`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>, TReturn>> select, int size, Action`1<FetchCallbackArgs`1<List`1<TReturn>>> done);
    private sealed virtual override DataTable FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>.ToDataTable(Expression`1<Func`2<HzyTuple`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>, TReturn>> select);
    private sealed virtual override int FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>.InsertInto(string tableName, Expression`1<Func`2<HzyTuple`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>, TTargetEntity>> select);
    private sealed virtual override string FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>.ToSql(Expression`1<Func`2<HzyTuple`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>, TReturn>> select, FieldAliasOptions fieldAlias);
    private sealed virtual override ISelect`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>.LeftJoin(Expression`1<Func`2<HzyTuple`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>, bool>> exp);
    private sealed virtual override ISelect`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>.InnerJoin(Expression`1<Func`2<HzyTuple`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>, bool>> exp);
    private sealed virtual override ISelect`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>.RightJoin(Expression`1<Func`2<HzyTuple`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>, bool>> exp);
    private sealed virtual override ISelect`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>.Where(Expression`1<Func`2<HzyTuple`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>, bool>> exp);
    private sealed virtual override ISelect`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>.WhereIf(bool condition, Expression`1<Func`2<HzyTuple`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>, bool>> exp);
    private sealed virtual override bool FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>.Any(Expression`1<Func`2<HzyTuple`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>, bool>> exp);
    private sealed virtual override TReturn FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>.ToOne(Expression`1<Func`2<HzyTuple`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>, TReturn>> select);
    private sealed virtual override TReturn FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>.First(Expression`1<Func`2<HzyTuple`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>, TReturn>> select);
    private sealed virtual override Task`1<double> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>.AvgAsync(Expression`1<Func`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TMember>> column, CancellationToken cancellationToken);
    private sealed virtual override Task`1<TMember> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>.MaxAsync(Expression`1<Func`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TMember>> column, CancellationToken cancellationToken);
    private sealed virtual override Task`1<TMember> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>.MinAsync(Expression`1<Func`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TMember>> column, CancellationToken cancellationToken);
    private sealed virtual override Task`1<decimal> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>.SumAsync(Expression`1<Func`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TMember>> column, CancellationToken cancellationToken);
    private sealed virtual override Task`1<TReturn> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>.ToAggregateAsync(Expression`1<Func`16<ISelectGroupingAggregate`1<T1>, ISelectGroupingAggregate`1<T2>, ISelectGroupingAggregate`1<T3>, ISelectGroupingAggregate`1<T4>, ISelectGroupingAggregate`1<T5>, ISelectGroupingAggregate`1<T6>, ISelectGroupingAggregate`1<T7>, ISelectGroupingAggregate`1<T8>, ISelectGroupingAggregate`1<T9>, ISelectGroupingAggregate`1<T10>, ISelectGroupingAggregate`1<T11>, ISelectGroupingAggregate`1<T12>, ISelectGroupingAggregate`1<T13>, ISelectGroupingAggregate`1<T14>, ISelectGroupingAggregate`1<T15>, TReturn>> select, CancellationToken cancellationToken);
    private sealed virtual override Task`1<List`1<TReturn>> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>.ToListAsync(Expression`1<Func`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TReturn>> select, CancellationToken cancellationToken);
    private sealed virtual override Task`1<List`1<TDto>> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>.ToListAsync(CancellationToken cancellationToken);
    private sealed virtual override Task`1<DataTable> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>.ToDataTableAsync(Expression`1<Func`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TReturn>> select, CancellationToken cancellationToken);
    private sealed virtual override Task`1<int> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>.InsertIntoAsync(string tableName, Expression`1<Func`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TTargetEntity>> select, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("FreeSql.Internal.CommonProvider.Select15Provider`15/<FreeSql-ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>-AnyAsync>d__61")]
[DebuggerStepThroughAttribute]
private sealed virtual override Task`1<bool> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>.AnyAsync(Expression`1<Func`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, bool>> exp, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("FreeSql.Internal.CommonProvider.Select15Provider`15/<FreeSql-ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>-ToOneAsync>d__62`1")]
[DebuggerStepThroughAttribute]
private sealed virtual override Task`1<TReturn> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>.ToOneAsync(Expression`1<Func`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TReturn>> select, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("FreeSql.Internal.CommonProvider.Select15Provider`15/<FreeSql-ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>-FirstAsync>d__63`1")]
[DebuggerStepThroughAttribute]
private sealed virtual override Task`1<TReturn> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>.FirstAsync(Expression`1<Func`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TReturn>> select, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("FreeSql.Internal.CommonProvider.Select15Provider`15/<FreeSql-ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>-FirstAsync>d__64`1")]
[DebuggerStepThroughAttribute]
private sealed virtual override Task`1<TDto> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>.FirstAsync(CancellationToken cancellationToken);
    private sealed virtual override Task`1<double> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>.AvgAsync(Expression`1<Func`2<HzyTuple`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>, TMember>> column, CancellationToken cancellationToken);
    private sealed virtual override Task`1<TMember> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>.MaxAsync(Expression`1<Func`2<HzyTuple`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>, TMember>> column, CancellationToken cancellationToken);
    private sealed virtual override Task`1<TMember> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>.MinAsync(Expression`1<Func`2<HzyTuple`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>, TMember>> column, CancellationToken cancellationToken);
    private sealed virtual override Task`1<decimal> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>.SumAsync(Expression`1<Func`2<HzyTuple`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>, TMember>> column, CancellationToken cancellationToken);
    private sealed virtual override Task`1<List`1<TReturn>> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>.ToListAsync(Expression`1<Func`2<HzyTuple`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>, TReturn>> select, CancellationToken cancellationToken);
    private sealed virtual override Task`1<DataTable> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>.ToDataTableAsync(Expression`1<Func`2<HzyTuple`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>, TReturn>> select, CancellationToken cancellationToken);
    private sealed virtual override Task`1<int> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>.InsertIntoAsync(string tableName, Expression`1<Func`2<HzyTuple`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>, TTargetEntity>> select, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("FreeSql.Internal.CommonProvider.Select15Provider`15/<FreeSql-ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>-AnyAsync>d__72")]
[DebuggerStepThroughAttribute]
private sealed virtual override Task`1<bool> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>.AnyAsync(Expression`1<Func`2<HzyTuple`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>, bool>> exp, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("FreeSql.Internal.CommonProvider.Select15Provider`15/<FreeSql-ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>-ToOneAsync>d__73`1")]
[DebuggerStepThroughAttribute]
private sealed virtual override Task`1<TReturn> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>.ToOneAsync(Expression`1<Func`2<HzyTuple`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>, TReturn>> select, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("FreeSql.Internal.CommonProvider.Select15Provider`15/<FreeSql-ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>-FirstAsync>d__74`1")]
[DebuggerStepThroughAttribute]
private sealed virtual override Task`1<TReturn> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>.FirstAsync(Expression`1<Func`2<HzyTuple`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>, TReturn>> select, CancellationToken cancellationToken);
}
public abstract class FreeSql.Internal.CommonProvider.Select16Provider`16 : Select0Provider`2<ISelect`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>, T1> {
    public Select16Provider`16(IFreeSql orm, CommonUtils commonUtils, CommonExpression commonExpression, object dywhere);
    private sealed virtual override ISelect`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>.WithSql(string sqlT1, string sqlT2, string sqlT3, string sqlT4, string sqlT5, string sqlT6, string sqlT7, string sqlT8, string sqlT9, string sqlT10, string sqlT11, string sqlT12, string sqlT13, string sqlT14, string sqlT15, string sqlT16, object parms);
    private sealed virtual override ISelect`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>.As(string aliasT1, string aliasT2, string aliasT3, string aliasT4, string aliasT5, string aliasT6, string aliasT7, string aliasT8, string aliasT9, string aliasT10, string aliasT11, string aliasT12, string aliasT13, string aliasT14, string aliasT15, string aliasT16);
    private sealed virtual override ISelect`1<TDto> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>.WithTempQuery(Expression`1<Func`17<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TDto>> selector);
    private sealed virtual override double FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>.Avg(Expression`1<Func`17<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TMember>> column);
    private sealed virtual override ISelectGrouping`2<TKey, NativeTuple`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>.GroupBy(Expression`1<Func`17<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TKey>> exp);
    private sealed virtual override TMember FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>.Max(Expression`1<Func`17<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TMember>> column);
    private sealed virtual override TMember FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>.Min(Expression`1<Func`17<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TMember>> column);
    private sealed virtual override ISelect`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>.OrderBy(Expression`1<Func`17<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TMember>> column);
    private sealed virtual override ISelect`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>.OrderByDescending(Expression`1<Func`17<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TMember>> column);
    private sealed virtual override ISelect`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>.OrderByIf(bool condition, Expression`1<Func`17<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TMember>> column, bool descending);
    private sealed virtual override decimal FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>.Sum(Expression`1<Func`17<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TMember>> column);
    private sealed virtual override TReturn FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>.ToAggregate(Expression`1<Func`17<ISelectGroupingAggregate`1<T1>, ISelectGroupingAggregate`1<T2>, ISelectGroupingAggregate`1<T3>, ISelectGroupingAggregate`1<T4>, ISelectGroupingAggregate`1<T5>, ISelectGroupingAggregate`1<T6>, ISelectGroupingAggregate`1<T7>, ISelectGroupingAggregate`1<T8>, ISelectGroupingAggregate`1<T9>, ISelectGroupingAggregate`1<T10>, ISelectGroupingAggregate`1<T11>, ISelectGroupingAggregate`1<T12>, ISelectGroupingAggregate`1<T13>, ISelectGroupingAggregate`1<T14>, ISelectGroupingAggregate`1<T15>, ISelectGroupingAggregate`1<T16>, TReturn>> select);
    private sealed virtual override ISelect`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>.Aggregate(Expression`1<Func`17<ISelectGroupingAggregate`1<T1>, ISelectGroupingAggregate`1<T2>, ISelectGroupingAggregate`1<T3>, ISelectGroupingAggregate`1<T4>, ISelectGroupingAggregate`1<T5>, ISelectGroupingAggregate`1<T6>, ISelectGroupingAggregate`1<T7>, ISelectGroupingAggregate`1<T8>, ISelectGroupingAggregate`1<T9>, ISelectGroupingAggregate`1<T10>, ISelectGroupingAggregate`1<T11>, ISelectGroupingAggregate`1<T12>, ISelectGroupingAggregate`1<T13>, ISelectGroupingAggregate`1<T14>, ISelectGroupingAggregate`1<T15>, ISelectGroupingAggregate`1<T16>, TReturn>> select, TReturn& result);
    private sealed virtual override List`1<TReturn> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>.ToList(Expression`1<Func`17<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TReturn>> select);
    private sealed virtual override List`1<TDto> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>.ToList();
    private Expression`1<Func`17<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TDto>> GetToListDtoSelector();
    public sealed virtual void ToChunk(Expression`1<Func`17<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TReturn>> select, int size, Action`1<FetchCallbackArgs`1<List`1<TReturn>>> done);
    private sealed virtual override DataTable FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>.ToDataTable(Expression`1<Func`17<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TReturn>> select);
    private sealed virtual override int FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>.InsertInto(string tableName, Expression`1<Func`17<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TTargetEntity>> select);
    private sealed virtual override string FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>.ToSql(Expression`1<Func`17<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TReturn>> select, FieldAliasOptions fieldAlias);
    private sealed virtual override ISelect`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>.LeftJoin(Expression`1<Func`17<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, bool>> exp);
    private sealed virtual override ISelect`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>.InnerJoin(Expression`1<Func`17<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, bool>> exp);
    private sealed virtual override ISelect`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>.RightJoin(Expression`1<Func`17<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, bool>> exp);
    private sealed virtual override ISelect`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>.Where(Expression`1<Func`17<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, bool>> exp);
    private sealed virtual override ISelect`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>.WhereIf(bool condition, Expression`1<Func`17<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, bool>> exp);
    private sealed virtual override bool FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>.Any(Expression`1<Func`17<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, bool>> exp);
    private sealed virtual override TReturn FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>.ToOne(Expression`1<Func`17<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TReturn>> select);
    private sealed virtual override TReturn FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>.First(Expression`1<Func`17<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TReturn>> select);
    private sealed virtual override TDto FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>.First();
    private sealed virtual override ISelect`1<TDto> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>.WithTempQuery(Expression`1<Func`2<HzyTuple`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>, TDto>> selector);
    private sealed virtual override double FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>.Avg(Expression`1<Func`2<HzyTuple`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>, TMember>> column);
    private sealed virtual override ISelectGrouping`2<TKey, NativeTuple`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>.GroupBy(Expression`1<Func`2<HzyTuple`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>, TKey>> exp);
    private sealed virtual override TMember FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>.Max(Expression`1<Func`2<HzyTuple`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>, TMember>> column);
    private sealed virtual override TMember FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>.Min(Expression`1<Func`2<HzyTuple`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>, TMember>> column);
    private sealed virtual override ISelect`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>.OrderBy(Expression`1<Func`2<HzyTuple`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>, TMember>> column);
    private sealed virtual override ISelect`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>.OrderByDescending(Expression`1<Func`2<HzyTuple`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>, TMember>> column);
    private sealed virtual override ISelect`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>.OrderByIf(bool condition, Expression`1<Func`2<HzyTuple`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>, TMember>> column, bool descending);
    private sealed virtual override decimal FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>.Sum(Expression`1<Func`2<HzyTuple`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>, TMember>> column);
    private sealed virtual override List`1<TReturn> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>.ToList(Expression`1<Func`2<HzyTuple`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>, TReturn>> select);
    public sealed virtual void ToChunk(Expression`1<Func`2<HzyTuple`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>, TReturn>> select, int size, Action`1<FetchCallbackArgs`1<List`1<TReturn>>> done);
    private sealed virtual override DataTable FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>.ToDataTable(Expression`1<Func`2<HzyTuple`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>, TReturn>> select);
    private sealed virtual override int FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>.InsertInto(string tableName, Expression`1<Func`2<HzyTuple`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>, TTargetEntity>> select);
    private sealed virtual override string FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>.ToSql(Expression`1<Func`2<HzyTuple`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>, TReturn>> select, FieldAliasOptions fieldAlias);
    private sealed virtual override ISelect`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>.LeftJoin(Expression`1<Func`2<HzyTuple`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>, bool>> exp);
    private sealed virtual override ISelect`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>.InnerJoin(Expression`1<Func`2<HzyTuple`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>, bool>> exp);
    private sealed virtual override ISelect`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>.RightJoin(Expression`1<Func`2<HzyTuple`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>, bool>> exp);
    private sealed virtual override ISelect`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>.Where(Expression`1<Func`2<HzyTuple`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>, bool>> exp);
    private sealed virtual override ISelect`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>.WhereIf(bool condition, Expression`1<Func`2<HzyTuple`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>, bool>> exp);
    private sealed virtual override bool FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>.Any(Expression`1<Func`2<HzyTuple`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>, bool>> exp);
    private sealed virtual override TReturn FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>.ToOne(Expression`1<Func`2<HzyTuple`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>, TReturn>> select);
    private sealed virtual override TReturn FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>.First(Expression`1<Func`2<HzyTuple`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>, TReturn>> select);
    private sealed virtual override Task`1<double> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>.AvgAsync(Expression`1<Func`17<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TMember>> column, CancellationToken cancellationToken);
    private sealed virtual override Task`1<TMember> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>.MaxAsync(Expression`1<Func`17<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TMember>> column, CancellationToken cancellationToken);
    private sealed virtual override Task`1<TMember> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>.MinAsync(Expression`1<Func`17<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TMember>> column, CancellationToken cancellationToken);
    private sealed virtual override Task`1<decimal> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>.SumAsync(Expression`1<Func`17<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TMember>> column, CancellationToken cancellationToken);
    private sealed virtual override Task`1<TReturn> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>.ToAggregateAsync(Expression`1<Func`17<ISelectGroupingAggregate`1<T1>, ISelectGroupingAggregate`1<T2>, ISelectGroupingAggregate`1<T3>, ISelectGroupingAggregate`1<T4>, ISelectGroupingAggregate`1<T5>, ISelectGroupingAggregate`1<T6>, ISelectGroupingAggregate`1<T7>, ISelectGroupingAggregate`1<T8>, ISelectGroupingAggregate`1<T9>, ISelectGroupingAggregate`1<T10>, ISelectGroupingAggregate`1<T11>, ISelectGroupingAggregate`1<T12>, ISelectGroupingAggregate`1<T13>, ISelectGroupingAggregate`1<T14>, ISelectGroupingAggregate`1<T15>, ISelectGroupingAggregate`1<T16>, TReturn>> select, CancellationToken cancellationToken);
    private sealed virtual override Task`1<List`1<TReturn>> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>.ToListAsync(Expression`1<Func`17<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TReturn>> select, CancellationToken cancellationToken);
    private sealed virtual override Task`1<List`1<TDto>> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>.ToListAsync(CancellationToken cancellationToken);
    private sealed virtual override Task`1<DataTable> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>.ToDataTableAsync(Expression`1<Func`17<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TReturn>> select, CancellationToken cancellationToken);
    private sealed virtual override Task`1<int> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>.InsertIntoAsync(string tableName, Expression`1<Func`17<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TTargetEntity>> select, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("FreeSql.Internal.CommonProvider.Select16Provider`16/<FreeSql-ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>-AnyAsync>d__61")]
[DebuggerStepThroughAttribute]
private sealed virtual override Task`1<bool> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>.AnyAsync(Expression`1<Func`17<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, bool>> exp, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("FreeSql.Internal.CommonProvider.Select16Provider`16/<FreeSql-ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>-ToOneAsync>d__62`1")]
[DebuggerStepThroughAttribute]
private sealed virtual override Task`1<TReturn> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>.ToOneAsync(Expression`1<Func`17<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TReturn>> select, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("FreeSql.Internal.CommonProvider.Select16Provider`16/<FreeSql-ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>-FirstAsync>d__63`1")]
[DebuggerStepThroughAttribute]
private sealed virtual override Task`1<TReturn> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>.FirstAsync(Expression`1<Func`17<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TReturn>> select, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("FreeSql.Internal.CommonProvider.Select16Provider`16/<FreeSql-ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>-FirstAsync>d__64`1")]
[DebuggerStepThroughAttribute]
private sealed virtual override Task`1<TDto> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>.FirstAsync(CancellationToken cancellationToken);
    private sealed virtual override Task`1<double> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>.AvgAsync(Expression`1<Func`2<HzyTuple`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>, TMember>> column, CancellationToken cancellationToken);
    private sealed virtual override Task`1<TMember> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>.MaxAsync(Expression`1<Func`2<HzyTuple`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>, TMember>> column, CancellationToken cancellationToken);
    private sealed virtual override Task`1<TMember> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>.MinAsync(Expression`1<Func`2<HzyTuple`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>, TMember>> column, CancellationToken cancellationToken);
    private sealed virtual override Task`1<decimal> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>.SumAsync(Expression`1<Func`2<HzyTuple`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>, TMember>> column, CancellationToken cancellationToken);
    private sealed virtual override Task`1<List`1<TReturn>> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>.ToListAsync(Expression`1<Func`2<HzyTuple`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>, TReturn>> select, CancellationToken cancellationToken);
    private sealed virtual override Task`1<DataTable> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>.ToDataTableAsync(Expression`1<Func`2<HzyTuple`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>, TReturn>> select, CancellationToken cancellationToken);
    private sealed virtual override Task`1<int> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>.InsertIntoAsync(string tableName, Expression`1<Func`2<HzyTuple`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>, TTargetEntity>> select, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("FreeSql.Internal.CommonProvider.Select16Provider`16/<FreeSql-ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>-AnyAsync>d__72")]
[DebuggerStepThroughAttribute]
private sealed virtual override Task`1<bool> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>.AnyAsync(Expression`1<Func`2<HzyTuple`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>, bool>> exp, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("FreeSql.Internal.CommonProvider.Select16Provider`16/<FreeSql-ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>-ToOneAsync>d__73`1")]
[DebuggerStepThroughAttribute]
private sealed virtual override Task`1<TReturn> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>.ToOneAsync(Expression`1<Func`2<HzyTuple`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>, TReturn>> select, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("FreeSql.Internal.CommonProvider.Select16Provider`16/<FreeSql-ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>-FirstAsync>d__74`1")]
[DebuggerStepThroughAttribute]
private sealed virtual override Task`1<TReturn> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>.FirstAsync(Expression`1<Func`2<HzyTuple`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>, TReturn>> select, CancellationToken cancellationToken);
}
public abstract class FreeSql.Internal.CommonProvider.Select1Provider`1 : Select0Provider`2<ISelect`1<T1>, T1> {
    private bool _isIncluded;
    private static MethodInfo GetEntityValueWithPropertyNameMethod;
    private static ConcurrentDictionary`2<Type, ConcurrentDictionary`2<string, MethodInfo>> _dicTypeMethod;
    internal object _includeManySubListOneToManyTempValue1;
    public Select1Provider`1(IFreeSql orm, CommonUtils commonUtils, CommonExpression commonExpression, object dywhere);
    private static Select1Provider`1();
    protected ISelect`1<T1> InternalFrom(LambdaExpression lambdaExp);
    public sealed virtual ISelect`1<T1> As(string alias);
    public sealed virtual double Avg(Expression`1<Func`2<T1, TMember>> column);
    public abstract virtual ISelect`2<T1, T2> From(Expression`1<Func`3<ISelectFromExpression`1<T1>, T2, ISelectFromExpression`1<T1>>> exp);
    public abstract virtual ISelect`3<T1, T2, T3> From(Expression`1<Func`4<ISelectFromExpression`1<T1>, T2, T3, ISelectFromExpression`1<T1>>> exp);
    public abstract virtual ISelect`4<T1, T2, T3, T4> From(Expression`1<Func`5<ISelectFromExpression`1<T1>, T2, T3, T4, ISelectFromExpression`1<T1>>> exp);
    public abstract virtual ISelect`5<T1, T2, T3, T4, T5> From(Expression`1<Func`6<ISelectFromExpression`1<T1>, T2, T3, T4, T5, ISelectFromExpression`1<T1>>> exp);
    public abstract virtual ISelect`6<T1, T2, T3, T4, T5, T6> From(Expression`1<Func`7<ISelectFromExpression`1<T1>, T2, T3, T4, T5, T6, ISelectFromExpression`1<T1>>> exp);
    public abstract virtual ISelect`7<T1, T2, T3, T4, T5, T6, T7> From(Expression`1<Func`8<ISelectFromExpression`1<T1>, T2, T3, T4, T5, T6, T7, ISelectFromExpression`1<T1>>> exp);
    public abstract virtual ISelect`8<T1, T2, T3, T4, T5, T6, T7, T8> From(Expression`1<Func`9<ISelectFromExpression`1<T1>, T2, T3, T4, T5, T6, T7, T8, ISelectFromExpression`1<T1>>> exp);
    public abstract virtual ISelect`9<T1, T2, T3, T4, T5, T6, T7, T8, T9> From(Expression`1<Func`10<ISelectFromExpression`1<T1>, T2, T3, T4, T5, T6, T7, T8, T9, ISelectFromExpression`1<T1>>> exp);
    public abstract virtual ISelect`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> From(Expression`1<Func`11<ISelectFromExpression`1<T1>, T2, T3, T4, T5, T6, T7, T8, T9, T10, ISelectFromExpression`1<T1>>> exp);
    public abstract virtual ISelect`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> From(Expression`1<Func`12<ISelectFromExpression`1<T1>, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, ISelectFromExpression`1<T1>>> exp);
    public abstract virtual ISelect`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> From(Expression`1<Func`13<ISelectFromExpression`1<T1>, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, ISelectFromExpression`1<T1>>> exp);
    public abstract virtual ISelect`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> From(Expression`1<Func`14<ISelectFromExpression`1<T1>, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, ISelectFromExpression`1<T1>>> exp);
    public abstract virtual ISelect`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> From(Expression`1<Func`15<ISelectFromExpression`1<T1>, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, ISelectFromExpression`1<T1>>> exp);
    public abstract virtual ISelect`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> From(Expression`1<Func`16<ISelectFromExpression`1<T1>, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, ISelectFromExpression`1<T1>>> exp);
    public abstract virtual ISelect`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> From(Expression`1<Func`17<ISelectFromExpression`1<T1>, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, ISelectFromExpression`1<T1>>> exp);
    public sealed virtual ISelect`2<T1, T2> FromQuery(ISelect`1<T2> select2);
    public TQuery FromQueryMulti(TQuery ret, Type[] entityTypes, Select0Provider[] querys);
    public sealed virtual ISelect`3<T1, T2, T3> FromQuery(ISelect`1<T2> select2, ISelect`1<T3> select3);
    public sealed virtual ISelect`4<T1, T2, T3, T4> FromQuery(ISelect`1<T2> select2, ISelect`1<T3> select3, ISelect`1<T4> select4);
    public sealed virtual ISelect`5<T1, T2, T3, T4, T5> FromQuery(ISelect`1<T2> select2, ISelect`1<T3> select3, ISelect`1<T4> select4, ISelect`1<T5> select5);
    public sealed virtual ISelect`1<T1> UnionAll(ISelect`1[] querys);
    public sealed virtual ISelectGrouping`2<TKey, T1> GroupBy(Expression`1<Func`2<T1, TKey>> columns);
    public sealed virtual TMember Max(Expression`1<Func`2<T1, TMember>> column);
    public sealed virtual TMember Min(Expression`1<Func`2<T1, TMember>> column);
    public void OrderByReflection(LambdaExpression column, bool isDescending);
    public sealed virtual ISelect`1<T1> OrderBy(Expression`1<Func`2<T1, TMember>> column);
    public sealed virtual ISelect`1<T1> OrderBy(bool condition, Expression`1<Func`2<T1, TMember>> column);
    public sealed virtual ISelect`1<T1> OrderByDescending(Expression`1<Func`2<T1, TMember>> column);
    public sealed virtual ISelect`1<T1> OrderByDescending(bool condition, Expression`1<Func`2<T1, TMember>> column);
    public sealed virtual ISelect`1<T1> OrderByIf(bool condition, Expression`1<Func`2<T1, TMember>> column, bool descending);
    public sealed virtual decimal Sum(Expression`1<Func`2<T1, TMember>> column);
    public sealed virtual List`1<TReturn> ToList(Expression`1<Func`2<T1, TReturn>> select);
    public sealed virtual List`1<TDto> ToList();
    private Expression`1<Func`2<T1, TDto>> GetToListDtoSelector();
    public sealed virtual void ToChunk(Expression`1<Func`2<T1, TReturn>> select, int size, Action`1<FetchCallbackArgs`1<List`1<TReturn>>> done);
    public sealed virtual DataTable ToDataTable(Expression`1<Func`2<T1, TReturn>> select);
    public sealed virtual string ToSql(Expression`1<Func`2<T1, TReturn>> select, FieldAliasOptions fieldAlias);
    public sealed virtual TReturn ToAggregate(Expression`1<Func`2<ISelectGroupingAggregate`1<T1>, TReturn>> select);
    public sealed virtual ISelect`1<T1> Aggregate(Expression`1<Func`2<ISelectGroupingAggregate`1<T1>, TReturn>> select, TReturn& result);
    public sealed virtual ISelect`1<T1> Where(Expression`1<Func`2<T1, bool>> exp);
    public sealed virtual ISelect`1<T1> WhereIf(bool condition, Expression`1<Func`2<T1, bool>> exp);
    public sealed virtual ISelect`1<T1> Where(Expression`1<Func`3<T1, T2, bool>> exp);
    public sealed virtual ISelect`1<T1> Where(Expression`1<Func`2<T2, bool>> exp);
    public sealed virtual ISelect`1<T1> Where(Expression`1<Func`4<T1, T2, T3, bool>> exp);
    public sealed virtual ISelect`1<T1> Where(Expression`1<Func`5<T1, T2, T3, T4, bool>> exp);
    public sealed virtual ISelect`1<T1> Where(Expression`1<Func`6<T1, T2, T3, T4, T5, bool>> exp);
    public sealed virtual ISelect`1<T1> WhereDynamic(object dywhere, bool not);
    public sealed virtual ISelect`1<T1> WhereCascade(Expression`1<Func`2<T1, bool>> exp);
    public sealed virtual ISelect`1<T1> WithSql(string sql, object parms);
    public sealed virtual ISelect`1<T1> WithMemory(IEnumerable`1<T1> source);
    public sealed virtual ISelect`1<TDto> WithTempQuery(Expression`1<Func`2<T1, TDto>> selector);
    public sealed virtual bool Any(Expression`1<Func`2<T1, bool>> exp);
    public sealed virtual TReturn ToOne(Expression`1<Func`2<T1, TReturn>> select);
    public sealed virtual TDto ToOne();
    public sealed virtual TReturn First(Expression`1<Func`2<T1, TReturn>> select);
    public sealed virtual TDto First();
    public virtual List`1<T1> ToList(bool includeNestedMembers);
    public sealed virtual int InsertInto(string tableName, Expression`1<Func`2<T1, TTargetEntity>> select);
    public sealed virtual ISelect`1<T1> IncludeByPropertyNameIf(bool condition, string property);
    public sealed virtual ISelect`1<T1> IncludeByPropertyNameIf(bool condition, string property, Expression`1<Action`1<ISelect`1<object>>> then);
    public sealed virtual ISelect`1<T1> IncludeByPropertyName(string property);
    public sealed virtual ISelect`1<T1> IncludeByPropertyName(string property, Expression`1<Action`1<ISelect`1<object>>> then);
    public sealed virtual ISelect`1<T1> IncludeIf(bool condition, Expression`1<Func`2<T1, TNavigate>> navigateSelector);
    public sealed virtual ISelect`1<T1> Include(Expression`1<Func`2<T1, TNavigate>> navigateSelector);
    private static NativeTuple`2<ParameterExpression, List`1<MemberExpression>> GetExpressionStack(Expression exp);
    public sealed virtual ISelect`1<T1> IncludeMany(Expression`1<Func`2<T1, IEnumerable`1<TNavigate>>> navigateSelector, Action`1<ISelect`1<TNavigate>> then);
    internal void SetList(IEnumerable`1<T1> list);
    [AsyncStateMachineAttribute("FreeSql.Internal.CommonProvider.Select1Provider`1/<SetListAsync>d__77")]
[DebuggerStepThroughAttribute]
internal Task SetListAsync(IEnumerable`1<T1> list, CancellationToken cancellationToken);
    public sealed virtual Task`1<double> AvgAsync(Expression`1<Func`2<T1, TMember>> column, CancellationToken cancellationToken);
    public sealed virtual Task`1<TMember> MaxAsync(Expression`1<Func`2<T1, TMember>> column, CancellationToken cancellationToken);
    public sealed virtual Task`1<TMember> MinAsync(Expression`1<Func`2<T1, TMember>> column, CancellationToken cancellationToken);
    public sealed virtual Task`1<decimal> SumAsync(Expression`1<Func`2<T1, TMember>> column, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("FreeSql.Internal.CommonProvider.Select1Provider`1/<ToListAsync>d__82`1")]
[DebuggerStepThroughAttribute]
public sealed virtual Task`1<List`1<TReturn>> ToListAsync(Expression`1<Func`2<T1, TReturn>> select, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("FreeSql.Internal.CommonProvider.Select1Provider`1/<ToListAsync>d__83`1")]
[DebuggerStepThroughAttribute]
public sealed virtual Task`1<List`1<TDto>> ToListAsync(CancellationToken cancellationToken);
    public sealed virtual Task`1<int> InsertIntoAsync(string tableName, Expression`1<Func`2<T1, TTargetEntity>> select, CancellationToken cancellationToken);
    public sealed virtual Task`1<DataTable> ToDataTableAsync(Expression`1<Func`2<T1, TReturn>> select, CancellationToken cancellationToken);
    public sealed virtual Task`1<TReturn> ToAggregateAsync(Expression`1<Func`2<ISelectGroupingAggregate`1<T1>, TReturn>> select, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("FreeSql.Internal.CommonProvider.Select1Provider`1/<AnyAsync>d__87")]
[DebuggerStepThroughAttribute]
public sealed virtual Task`1<bool> AnyAsync(Expression`1<Func`2<T1, bool>> exp, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("FreeSql.Internal.CommonProvider.Select1Provider`1/<ToOneAsync>d__88`1")]
[DebuggerStepThroughAttribute]
public sealed virtual Task`1<TReturn> ToOneAsync(Expression`1<Func`2<T1, TReturn>> select, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("FreeSql.Internal.CommonProvider.Select1Provider`1/<ToOneAsync>d__89`1")]
[DebuggerStepThroughAttribute]
public sealed virtual Task`1<TDto> ToOneAsync(CancellationToken cancellationToken);
    public sealed virtual Task`1<TReturn> FirstAsync(Expression`1<Func`2<T1, TReturn>> select, CancellationToken cancellationToken);
    public sealed virtual Task`1<TDto> FirstAsync(CancellationToken cancellationToken);
    public virtual Task`1<List`1<T1>> ToListAsync(bool includeNestedMembers, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
internal static string <UnionAll>g__LocalGetQuerySql|24_0(ISelect`1<T1> query);
    [CompilerGeneratedAttribute]
private MemberInitExpression <ToList>g__GetIncludeManyNewInitExpression|36_0(IncludeManyNewInit<T1> imni);
    [CompilerGeneratedAttribute]
private MemberInitExpression <ToListAsync>g__GetIncludeManyNewInitExpression|82_0(IncludeManyNewInit<T1> imni);
}
public abstract class FreeSql.Internal.CommonProvider.Select2Provider`2 : Select0Provider`2<ISelect`2<T1, T2>, T1> {
    public Select2Provider`2(IFreeSql orm, CommonUtils commonUtils, CommonExpression commonExpression, object dywhere);
    private sealed virtual override ISelect`2<T1, T2> FreeSql.ISelect<T1,T2>.WithSql(string sqlT1, string sqlT2, object parms);
    private sealed virtual override ISelect`2<T1, T2> FreeSql.ISelect<T1,T2>.As(string aliasT1, string aliasT2);
    private sealed virtual override ISelect`1<TDto> FreeSql.ISelect<T1,T2>.WithTempQuery(Expression`1<Func`3<T1, T2, TDto>> selector);
    private sealed virtual override double FreeSql.ISelect<T1,T2>.Avg(Expression`1<Func`3<T1, T2, TMember>> column);
    private sealed virtual override ISelectGrouping`2<TKey, NativeTuple`2<T1, T2>> FreeSql.ISelect<T1,T2>.GroupBy(Expression`1<Func`3<T1, T2, TKey>> exp);
    private sealed virtual override TMember FreeSql.ISelect<T1,T2>.Max(Expression`1<Func`3<T1, T2, TMember>> column);
    private sealed virtual override TMember FreeSql.ISelect<T1,T2>.Min(Expression`1<Func`3<T1, T2, TMember>> column);
    private sealed virtual override ISelect`2<T1, T2> FreeSql.ISelect<T1,T2>.OrderBy(Expression`1<Func`3<T1, T2, TMember>> column);
    private sealed virtual override ISelect`2<T1, T2> FreeSql.ISelect<T1,T2>.OrderByDescending(Expression`1<Func`3<T1, T2, TMember>> column);
    private sealed virtual override ISelect`2<T1, T2> FreeSql.ISelect<T1,T2>.OrderByIf(bool condition, Expression`1<Func`3<T1, T2, TMember>> column, bool descending);
    private sealed virtual override decimal FreeSql.ISelect<T1,T2>.Sum(Expression`1<Func`3<T1, T2, TMember>> column);
    private sealed virtual override TReturn FreeSql.ISelect<T1,T2>.ToAggregate(Expression`1<Func`3<ISelectGroupingAggregate`1<T1>, ISelectGroupingAggregate`1<T2>, TReturn>> select);
    private sealed virtual override ISelect`2<T1, T2> FreeSql.ISelect<T1,T2>.Aggregate(Expression`1<Func`3<ISelectGroupingAggregate`1<T1>, ISelectGroupingAggregate`1<T2>, TReturn>> select, TReturn& result);
    private sealed virtual override List`1<TReturn> FreeSql.ISelect<T1,T2>.ToList(Expression`1<Func`3<T1, T2, TReturn>> select);
    private sealed virtual override List`1<TDto> FreeSql.ISelect<T1,T2>.ToList();
    private Expression`1<Func`3<T1, T2, TDto>> GetToListDtoSelector();
    public sealed virtual void ToChunk(Expression`1<Func`3<T1, T2, TReturn>> select, int size, Action`1<FetchCallbackArgs`1<List`1<TReturn>>> done);
    private sealed virtual override DataTable FreeSql.ISelect<T1,T2>.ToDataTable(Expression`1<Func`3<T1, T2, TReturn>> select);
    private sealed virtual override int FreeSql.ISelect<T1,T2>.InsertInto(string tableName, Expression`1<Func`3<T1, T2, TTargetEntity>> select);
    private sealed virtual override string FreeSql.ISelect<T1,T2>.ToSql(Expression`1<Func`3<T1, T2, TReturn>> select, FieldAliasOptions fieldAlias);
    private sealed virtual override ISelect`2<T1, T2> FreeSql.ISelect<T1,T2>.LeftJoin(Expression`1<Func`3<T1, T2, bool>> exp);
    private sealed virtual override ISelect`2<T1, T2> FreeSql.ISelect<T1,T2>.InnerJoin(Expression`1<Func`3<T1, T2, bool>> exp);
    private sealed virtual override ISelect`2<T1, T2> FreeSql.ISelect<T1,T2>.RightJoin(Expression`1<Func`3<T1, T2, bool>> exp);
    private sealed virtual override ISelect`2<T1, T2> FreeSql.ISelect<T1,T2>.Where(Expression`1<Func`3<T1, T2, bool>> exp);
    private sealed virtual override ISelect`2<T1, T2> FreeSql.ISelect<T1,T2>.WhereIf(bool condition, Expression`1<Func`3<T1, T2, bool>> exp);
    private sealed virtual override bool FreeSql.ISelect<T1,T2>.Any(Expression`1<Func`3<T1, T2, bool>> exp);
    private sealed virtual override TReturn FreeSql.ISelect<T1,T2>.ToOne(Expression`1<Func`3<T1, T2, TReturn>> select);
    private sealed virtual override TReturn FreeSql.ISelect<T1,T2>.First(Expression`1<Func`3<T1, T2, TReturn>> select);
    private sealed virtual override TDto FreeSql.ISelect<T1,T2>.First();
    private sealed virtual override ISelect`1<TDto> FreeSql.ISelect<T1,T2>.WithTempQuery(Expression`1<Func`2<HzyTuple`2<T1, T2>, TDto>> selector);
    private sealed virtual override double FreeSql.ISelect<T1,T2>.Avg(Expression`1<Func`2<HzyTuple`2<T1, T2>, TMember>> column);
    private sealed virtual override ISelectGrouping`2<TKey, NativeTuple`2<T1, T2>> FreeSql.ISelect<T1,T2>.GroupBy(Expression`1<Func`2<HzyTuple`2<T1, T2>, TKey>> exp);
    private sealed virtual override TMember FreeSql.ISelect<T1,T2>.Max(Expression`1<Func`2<HzyTuple`2<T1, T2>, TMember>> column);
    private sealed virtual override TMember FreeSql.ISelect<T1,T2>.Min(Expression`1<Func`2<HzyTuple`2<T1, T2>, TMember>> column);
    private sealed virtual override ISelect`2<T1, T2> FreeSql.ISelect<T1,T2>.OrderBy(Expression`1<Func`2<HzyTuple`2<T1, T2>, TMember>> column);
    private sealed virtual override ISelect`2<T1, T2> FreeSql.ISelect<T1,T2>.OrderByDescending(Expression`1<Func`2<HzyTuple`2<T1, T2>, TMember>> column);
    private sealed virtual override ISelect`2<T1, T2> FreeSql.ISelect<T1,T2>.OrderByIf(bool condition, Expression`1<Func`2<HzyTuple`2<T1, T2>, TMember>> column, bool descending);
    private sealed virtual override decimal FreeSql.ISelect<T1,T2>.Sum(Expression`1<Func`2<HzyTuple`2<T1, T2>, TMember>> column);
    private sealed virtual override List`1<TReturn> FreeSql.ISelect<T1,T2>.ToList(Expression`1<Func`2<HzyTuple`2<T1, T2>, TReturn>> select);
    public sealed virtual void ToChunk(Expression`1<Func`2<HzyTuple`2<T1, T2>, TReturn>> select, int size, Action`1<FetchCallbackArgs`1<List`1<TReturn>>> done);
    private sealed virtual override DataTable FreeSql.ISelect<T1,T2>.ToDataTable(Expression`1<Func`2<HzyTuple`2<T1, T2>, TReturn>> select);
    private sealed virtual override int FreeSql.ISelect<T1,T2>.InsertInto(string tableName, Expression`1<Func`2<HzyTuple`2<T1, T2>, TTargetEntity>> select);
    private sealed virtual override string FreeSql.ISelect<T1,T2>.ToSql(Expression`1<Func`2<HzyTuple`2<T1, T2>, TReturn>> select, FieldAliasOptions fieldAlias);
    private sealed virtual override ISelect`2<T1, T2> FreeSql.ISelect<T1,T2>.LeftJoin(Expression`1<Func`2<HzyTuple`2<T1, T2>, bool>> exp);
    private sealed virtual override ISelect`2<T1, T2> FreeSql.ISelect<T1,T2>.InnerJoin(Expression`1<Func`2<HzyTuple`2<T1, T2>, bool>> exp);
    private sealed virtual override ISelect`2<T1, T2> FreeSql.ISelect<T1,T2>.RightJoin(Expression`1<Func`2<HzyTuple`2<T1, T2>, bool>> exp);
    private sealed virtual override ISelect`2<T1, T2> FreeSql.ISelect<T1,T2>.Where(Expression`1<Func`2<HzyTuple`2<T1, T2>, bool>> exp);
    private sealed virtual override ISelect`2<T1, T2> FreeSql.ISelect<T1,T2>.WhereIf(bool condition, Expression`1<Func`2<HzyTuple`2<T1, T2>, bool>> exp);
    private sealed virtual override bool FreeSql.ISelect<T1,T2>.Any(Expression`1<Func`2<HzyTuple`2<T1, T2>, bool>> exp);
    private sealed virtual override TReturn FreeSql.ISelect<T1,T2>.ToOne(Expression`1<Func`2<HzyTuple`2<T1, T2>, TReturn>> select);
    private sealed virtual override TReturn FreeSql.ISelect<T1,T2>.First(Expression`1<Func`2<HzyTuple`2<T1, T2>, TReturn>> select);
    private sealed virtual override Task`1<double> FreeSql.ISelect<T1,T2>.AvgAsync(Expression`1<Func`3<T1, T2, TMember>> column, CancellationToken cancellationToken);
    private sealed virtual override Task`1<TMember> FreeSql.ISelect<T1,T2>.MaxAsync(Expression`1<Func`3<T1, T2, TMember>> column, CancellationToken cancellationToken);
    private sealed virtual override Task`1<TMember> FreeSql.ISelect<T1,T2>.MinAsync(Expression`1<Func`3<T1, T2, TMember>> column, CancellationToken cancellationToken);
    private sealed virtual override Task`1<decimal> FreeSql.ISelect<T1,T2>.SumAsync(Expression`1<Func`3<T1, T2, TMember>> column, CancellationToken cancellationToken);
    private sealed virtual override Task`1<TReturn> FreeSql.ISelect<T1,T2>.ToAggregateAsync(Expression`1<Func`3<ISelectGroupingAggregate`1<T1>, ISelectGroupingAggregate`1<T2>, TReturn>> select, CancellationToken cancellationToken);
    private sealed virtual override Task`1<List`1<TReturn>> FreeSql.ISelect<T1,T2>.ToListAsync(Expression`1<Func`3<T1, T2, TReturn>> select, CancellationToken cancellationToken);
    private sealed virtual override Task`1<List`1<TDto>> FreeSql.ISelect<T1,T2>.ToListAsync(CancellationToken cancellationToken);
    private sealed virtual override Task`1<DataTable> FreeSql.ISelect<T1,T2>.ToDataTableAsync(Expression`1<Func`3<T1, T2, TReturn>> select, CancellationToken cancellationToken);
    private sealed virtual override Task`1<int> FreeSql.ISelect<T1,T2>.InsertIntoAsync(string tableName, Expression`1<Func`3<T1, T2, TTargetEntity>> select, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("FreeSql.Internal.CommonProvider.Select2Provider`2/<FreeSql-ISelect<T1,T2>-AnyAsync>d__61")]
[DebuggerStepThroughAttribute]
private sealed virtual override Task`1<bool> FreeSql.ISelect<T1,T2>.AnyAsync(Expression`1<Func`3<T1, T2, bool>> exp, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("FreeSql.Internal.CommonProvider.Select2Provider`2/<FreeSql-ISelect<T1,T2>-ToOneAsync>d__62`1")]
[DebuggerStepThroughAttribute]
private sealed virtual override Task`1<TReturn> FreeSql.ISelect<T1,T2>.ToOneAsync(Expression`1<Func`3<T1, T2, TReturn>> select, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("FreeSql.Internal.CommonProvider.Select2Provider`2/<FreeSql-ISelect<T1,T2>-FirstAsync>d__63`1")]
[DebuggerStepThroughAttribute]
private sealed virtual override Task`1<TReturn> FreeSql.ISelect<T1,T2>.FirstAsync(Expression`1<Func`3<T1, T2, TReturn>> select, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("FreeSql.Internal.CommonProvider.Select2Provider`2/<FreeSql-ISelect<T1,T2>-FirstAsync>d__64`1")]
[DebuggerStepThroughAttribute]
private sealed virtual override Task`1<TDto> FreeSql.ISelect<T1,T2>.FirstAsync(CancellationToken cancellationToken);
    private sealed virtual override Task`1<double> FreeSql.ISelect<T1,T2>.AvgAsync(Expression`1<Func`2<HzyTuple`2<T1, T2>, TMember>> column, CancellationToken cancellationToken);
    private sealed virtual override Task`1<TMember> FreeSql.ISelect<T1,T2>.MaxAsync(Expression`1<Func`2<HzyTuple`2<T1, T2>, TMember>> column, CancellationToken cancellationToken);
    private sealed virtual override Task`1<TMember> FreeSql.ISelect<T1,T2>.MinAsync(Expression`1<Func`2<HzyTuple`2<T1, T2>, TMember>> column, CancellationToken cancellationToken);
    private sealed virtual override Task`1<decimal> FreeSql.ISelect<T1,T2>.SumAsync(Expression`1<Func`2<HzyTuple`2<T1, T2>, TMember>> column, CancellationToken cancellationToken);
    private sealed virtual override Task`1<List`1<TReturn>> FreeSql.ISelect<T1,T2>.ToListAsync(Expression`1<Func`2<HzyTuple`2<T1, T2>, TReturn>> select, CancellationToken cancellationToken);
    private sealed virtual override Task`1<DataTable> FreeSql.ISelect<T1,T2>.ToDataTableAsync(Expression`1<Func`2<HzyTuple`2<T1, T2>, TReturn>> select, CancellationToken cancellationToken);
    private sealed virtual override Task`1<int> FreeSql.ISelect<T1,T2>.InsertIntoAsync(string tableName, Expression`1<Func`2<HzyTuple`2<T1, T2>, TTargetEntity>> select, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("FreeSql.Internal.CommonProvider.Select2Provider`2/<FreeSql-ISelect<T1,T2>-AnyAsync>d__72")]
[DebuggerStepThroughAttribute]
private sealed virtual override Task`1<bool> FreeSql.ISelect<T1,T2>.AnyAsync(Expression`1<Func`2<HzyTuple`2<T1, T2>, bool>> exp, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("FreeSql.Internal.CommonProvider.Select2Provider`2/<FreeSql-ISelect<T1,T2>-ToOneAsync>d__73`1")]
[DebuggerStepThroughAttribute]
private sealed virtual override Task`1<TReturn> FreeSql.ISelect<T1,T2>.ToOneAsync(Expression`1<Func`2<HzyTuple`2<T1, T2>, TReturn>> select, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("FreeSql.Internal.CommonProvider.Select2Provider`2/<FreeSql-ISelect<T1,T2>-FirstAsync>d__74`1")]
[DebuggerStepThroughAttribute]
private sealed virtual override Task`1<TReturn> FreeSql.ISelect<T1,T2>.FirstAsync(Expression`1<Func`2<HzyTuple`2<T1, T2>, TReturn>> select, CancellationToken cancellationToken);
}
public abstract class FreeSql.Internal.CommonProvider.Select3Provider`3 : Select0Provider`2<ISelect`3<T1, T2, T3>, T1> {
    public Select3Provider`3(IFreeSql orm, CommonUtils commonUtils, CommonExpression commonExpression, object dywhere);
    private sealed virtual override ISelect`3<T1, T2, T3> FreeSql.ISelect<T1,T2,T3>.WithSql(string sqlT1, string sqlT2, string sqlT3, object parms);
    private sealed virtual override ISelect`3<T1, T2, T3> FreeSql.ISelect<T1,T2,T3>.As(string aliasT1, string aliasT2, string aliasT3);
    private sealed virtual override ISelect`1<TDto> FreeSql.ISelect<T1,T2,T3>.WithTempQuery(Expression`1<Func`4<T1, T2, T3, TDto>> selector);
    private sealed virtual override double FreeSql.ISelect<T1,T2,T3>.Avg(Expression`1<Func`4<T1, T2, T3, TMember>> column);
    private sealed virtual override ISelectGrouping`2<TKey, NativeTuple`3<T1, T2, T3>> FreeSql.ISelect<T1,T2,T3>.GroupBy(Expression`1<Func`4<T1, T2, T3, TKey>> exp);
    private sealed virtual override TMember FreeSql.ISelect<T1,T2,T3>.Max(Expression`1<Func`4<T1, T2, T3, TMember>> column);
    private sealed virtual override TMember FreeSql.ISelect<T1,T2,T3>.Min(Expression`1<Func`4<T1, T2, T3, TMember>> column);
    private sealed virtual override ISelect`3<T1, T2, T3> FreeSql.ISelect<T1,T2,T3>.OrderBy(Expression`1<Func`4<T1, T2, T3, TMember>> column);
    private sealed virtual override ISelect`3<T1, T2, T3> FreeSql.ISelect<T1,T2,T3>.OrderByDescending(Expression`1<Func`4<T1, T2, T3, TMember>> column);
    private sealed virtual override ISelect`3<T1, T2, T3> FreeSql.ISelect<T1,T2,T3>.OrderByIf(bool condition, Expression`1<Func`4<T1, T2, T3, TMember>> column, bool descending);
    private sealed virtual override decimal FreeSql.ISelect<T1,T2,T3>.Sum(Expression`1<Func`4<T1, T2, T3, TMember>> column);
    private sealed virtual override TReturn FreeSql.ISelect<T1,T2,T3>.ToAggregate(Expression`1<Func`4<ISelectGroupingAggregate`1<T1>, ISelectGroupingAggregate`1<T2>, ISelectGroupingAggregate`1<T3>, TReturn>> select);
    private sealed virtual override ISelect`3<T1, T2, T3> FreeSql.ISelect<T1,T2,T3>.Aggregate(Expression`1<Func`4<ISelectGroupingAggregate`1<T1>, ISelectGroupingAggregate`1<T2>, ISelectGroupingAggregate`1<T3>, TReturn>> select, TReturn& result);
    private sealed virtual override List`1<TReturn> FreeSql.ISelect<T1,T2,T3>.ToList(Expression`1<Func`4<T1, T2, T3, TReturn>> select);
    private sealed virtual override List`1<TDto> FreeSql.ISelect<T1,T2,T3>.ToList();
    private Expression`1<Func`4<T1, T2, T3, TDto>> GetToListDtoSelector();
    public sealed virtual void ToChunk(Expression`1<Func`4<T1, T2, T3, TReturn>> select, int size, Action`1<FetchCallbackArgs`1<List`1<TReturn>>> done);
    private sealed virtual override DataTable FreeSql.ISelect<T1,T2,T3>.ToDataTable(Expression`1<Func`4<T1, T2, T3, TReturn>> select);
    private sealed virtual override int FreeSql.ISelect<T1,T2,T3>.InsertInto(string tableName, Expression`1<Func`4<T1, T2, T3, TTargetEntity>> select);
    private sealed virtual override string FreeSql.ISelect<T1,T2,T3>.ToSql(Expression`1<Func`4<T1, T2, T3, TReturn>> select, FieldAliasOptions fieldAlias);
    private sealed virtual override ISelect`3<T1, T2, T3> FreeSql.ISelect<T1,T2,T3>.LeftJoin(Expression`1<Func`4<T1, T2, T3, bool>> exp);
    private sealed virtual override ISelect`3<T1, T2, T3> FreeSql.ISelect<T1,T2,T3>.InnerJoin(Expression`1<Func`4<T1, T2, T3, bool>> exp);
    private sealed virtual override ISelect`3<T1, T2, T3> FreeSql.ISelect<T1,T2,T3>.RightJoin(Expression`1<Func`4<T1, T2, T3, bool>> exp);
    private sealed virtual override ISelect`3<T1, T2, T3> FreeSql.ISelect<T1,T2,T3>.Where(Expression`1<Func`4<T1, T2, T3, bool>> exp);
    private sealed virtual override ISelect`3<T1, T2, T3> FreeSql.ISelect<T1,T2,T3>.WhereIf(bool condition, Expression`1<Func`4<T1, T2, T3, bool>> exp);
    private sealed virtual override bool FreeSql.ISelect<T1,T2,T3>.Any(Expression`1<Func`4<T1, T2, T3, bool>> exp);
    private sealed virtual override TReturn FreeSql.ISelect<T1,T2,T3>.ToOne(Expression`1<Func`4<T1, T2, T3, TReturn>> select);
    private sealed virtual override TReturn FreeSql.ISelect<T1,T2,T3>.First(Expression`1<Func`4<T1, T2, T3, TReturn>> select);
    private sealed virtual override TDto FreeSql.ISelect<T1,T2,T3>.First();
    private sealed virtual override ISelect`1<TDto> FreeSql.ISelect<T1,T2,T3>.WithTempQuery(Expression`1<Func`2<HzyTuple`3<T1, T2, T3>, TDto>> selector);
    private sealed virtual override double FreeSql.ISelect<T1,T2,T3>.Avg(Expression`1<Func`2<HzyTuple`3<T1, T2, T3>, TMember>> column);
    private sealed virtual override ISelectGrouping`2<TKey, NativeTuple`3<T1, T2, T3>> FreeSql.ISelect<T1,T2,T3>.GroupBy(Expression`1<Func`2<HzyTuple`3<T1, T2, T3>, TKey>> exp);
    private sealed virtual override TMember FreeSql.ISelect<T1,T2,T3>.Max(Expression`1<Func`2<HzyTuple`3<T1, T2, T3>, TMember>> column);
    private sealed virtual override TMember FreeSql.ISelect<T1,T2,T3>.Min(Expression`1<Func`2<HzyTuple`3<T1, T2, T3>, TMember>> column);
    private sealed virtual override ISelect`3<T1, T2, T3> FreeSql.ISelect<T1,T2,T3>.OrderBy(Expression`1<Func`2<HzyTuple`3<T1, T2, T3>, TMember>> column);
    private sealed virtual override ISelect`3<T1, T2, T3> FreeSql.ISelect<T1,T2,T3>.OrderByDescending(Expression`1<Func`2<HzyTuple`3<T1, T2, T3>, TMember>> column);
    private sealed virtual override ISelect`3<T1, T2, T3> FreeSql.ISelect<T1,T2,T3>.OrderByIf(bool condition, Expression`1<Func`2<HzyTuple`3<T1, T2, T3>, TMember>> column, bool descending);
    private sealed virtual override decimal FreeSql.ISelect<T1,T2,T3>.Sum(Expression`1<Func`2<HzyTuple`3<T1, T2, T3>, TMember>> column);
    private sealed virtual override List`1<TReturn> FreeSql.ISelect<T1,T2,T3>.ToList(Expression`1<Func`2<HzyTuple`3<T1, T2, T3>, TReturn>> select);
    public sealed virtual void ToChunk(Expression`1<Func`2<HzyTuple`3<T1, T2, T3>, TReturn>> select, int size, Action`1<FetchCallbackArgs`1<List`1<TReturn>>> done);
    private sealed virtual override DataTable FreeSql.ISelect<T1,T2,T3>.ToDataTable(Expression`1<Func`2<HzyTuple`3<T1, T2, T3>, TReturn>> select);
    private sealed virtual override int FreeSql.ISelect<T1,T2,T3>.InsertInto(string tableName, Expression`1<Func`2<HzyTuple`3<T1, T2, T3>, TTargetEntity>> select);
    private sealed virtual override string FreeSql.ISelect<T1,T2,T3>.ToSql(Expression`1<Func`2<HzyTuple`3<T1, T2, T3>, TReturn>> select, FieldAliasOptions fieldAlias);
    private sealed virtual override ISelect`3<T1, T2, T3> FreeSql.ISelect<T1,T2,T3>.LeftJoin(Expression`1<Func`2<HzyTuple`3<T1, T2, T3>, bool>> exp);
    private sealed virtual override ISelect`3<T1, T2, T3> FreeSql.ISelect<T1,T2,T3>.InnerJoin(Expression`1<Func`2<HzyTuple`3<T1, T2, T3>, bool>> exp);
    private sealed virtual override ISelect`3<T1, T2, T3> FreeSql.ISelect<T1,T2,T3>.RightJoin(Expression`1<Func`2<HzyTuple`3<T1, T2, T3>, bool>> exp);
    private sealed virtual override ISelect`3<T1, T2, T3> FreeSql.ISelect<T1,T2,T3>.Where(Expression`1<Func`2<HzyTuple`3<T1, T2, T3>, bool>> exp);
    private sealed virtual override ISelect`3<T1, T2, T3> FreeSql.ISelect<T1,T2,T3>.WhereIf(bool condition, Expression`1<Func`2<HzyTuple`3<T1, T2, T3>, bool>> exp);
    private sealed virtual override bool FreeSql.ISelect<T1,T2,T3>.Any(Expression`1<Func`2<HzyTuple`3<T1, T2, T3>, bool>> exp);
    private sealed virtual override TReturn FreeSql.ISelect<T1,T2,T3>.ToOne(Expression`1<Func`2<HzyTuple`3<T1, T2, T3>, TReturn>> select);
    private sealed virtual override TReturn FreeSql.ISelect<T1,T2,T3>.First(Expression`1<Func`2<HzyTuple`3<T1, T2, T3>, TReturn>> select);
    private sealed virtual override Task`1<double> FreeSql.ISelect<T1,T2,T3>.AvgAsync(Expression`1<Func`4<T1, T2, T3, TMember>> column, CancellationToken cancellationToken);
    private sealed virtual override Task`1<TMember> FreeSql.ISelect<T1,T2,T3>.MaxAsync(Expression`1<Func`4<T1, T2, T3, TMember>> column, CancellationToken cancellationToken);
    private sealed virtual override Task`1<TMember> FreeSql.ISelect<T1,T2,T3>.MinAsync(Expression`1<Func`4<T1, T2, T3, TMember>> column, CancellationToken cancellationToken);
    private sealed virtual override Task`1<decimal> FreeSql.ISelect<T1,T2,T3>.SumAsync(Expression`1<Func`4<T1, T2, T3, TMember>> column, CancellationToken cancellationToken);
    private sealed virtual override Task`1<TReturn> FreeSql.ISelect<T1,T2,T3>.ToAggregateAsync(Expression`1<Func`4<ISelectGroupingAggregate`1<T1>, ISelectGroupingAggregate`1<T2>, ISelectGroupingAggregate`1<T3>, TReturn>> select, CancellationToken cancellationToken);
    private sealed virtual override Task`1<List`1<TReturn>> FreeSql.ISelect<T1,T2,T3>.ToListAsync(Expression`1<Func`4<T1, T2, T3, TReturn>> select, CancellationToken cancellationToken);
    private sealed virtual override Task`1<List`1<TDto>> FreeSql.ISelect<T1,T2,T3>.ToListAsync(CancellationToken cancellationToken);
    private sealed virtual override Task`1<DataTable> FreeSql.ISelect<T1,T2,T3>.ToDataTableAsync(Expression`1<Func`4<T1, T2, T3, TReturn>> select, CancellationToken cancellationToken);
    private sealed virtual override Task`1<int> FreeSql.ISelect<T1,T2,T3>.InsertIntoAsync(string tableName, Expression`1<Func`4<T1, T2, T3, TTargetEntity>> select, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("FreeSql.Internal.CommonProvider.Select3Provider`3/<FreeSql-ISelect<T1,T2,T3>-AnyAsync>d__61")]
[DebuggerStepThroughAttribute]
private sealed virtual override Task`1<bool> FreeSql.ISelect<T1,T2,T3>.AnyAsync(Expression`1<Func`4<T1, T2, T3, bool>> exp, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("FreeSql.Internal.CommonProvider.Select3Provider`3/<FreeSql-ISelect<T1,T2,T3>-ToOneAsync>d__62`1")]
[DebuggerStepThroughAttribute]
private sealed virtual override Task`1<TReturn> FreeSql.ISelect<T1,T2,T3>.ToOneAsync(Expression`1<Func`4<T1, T2, T3, TReturn>> select, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("FreeSql.Internal.CommonProvider.Select3Provider`3/<FreeSql-ISelect<T1,T2,T3>-FirstAsync>d__63`1")]
[DebuggerStepThroughAttribute]
private sealed virtual override Task`1<TReturn> FreeSql.ISelect<T1,T2,T3>.FirstAsync(Expression`1<Func`4<T1, T2, T3, TReturn>> select, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("FreeSql.Internal.CommonProvider.Select3Provider`3/<FreeSql-ISelect<T1,T2,T3>-FirstAsync>d__64`1")]
[DebuggerStepThroughAttribute]
private sealed virtual override Task`1<TDto> FreeSql.ISelect<T1,T2,T3>.FirstAsync(CancellationToken cancellationToken);
    private sealed virtual override Task`1<double> FreeSql.ISelect<T1,T2,T3>.AvgAsync(Expression`1<Func`2<HzyTuple`3<T1, T2, T3>, TMember>> column, CancellationToken cancellationToken);
    private sealed virtual override Task`1<TMember> FreeSql.ISelect<T1,T2,T3>.MaxAsync(Expression`1<Func`2<HzyTuple`3<T1, T2, T3>, TMember>> column, CancellationToken cancellationToken);
    private sealed virtual override Task`1<TMember> FreeSql.ISelect<T1,T2,T3>.MinAsync(Expression`1<Func`2<HzyTuple`3<T1, T2, T3>, TMember>> column, CancellationToken cancellationToken);
    private sealed virtual override Task`1<decimal> FreeSql.ISelect<T1,T2,T3>.SumAsync(Expression`1<Func`2<HzyTuple`3<T1, T2, T3>, TMember>> column, CancellationToken cancellationToken);
    private sealed virtual override Task`1<List`1<TReturn>> FreeSql.ISelect<T1,T2,T3>.ToListAsync(Expression`1<Func`2<HzyTuple`3<T1, T2, T3>, TReturn>> select, CancellationToken cancellationToken);
    private sealed virtual override Task`1<DataTable> FreeSql.ISelect<T1,T2,T3>.ToDataTableAsync(Expression`1<Func`2<HzyTuple`3<T1, T2, T3>, TReturn>> select, CancellationToken cancellationToken);
    private sealed virtual override Task`1<int> FreeSql.ISelect<T1,T2,T3>.InsertIntoAsync(string tableName, Expression`1<Func`2<HzyTuple`3<T1, T2, T3>, TTargetEntity>> select, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("FreeSql.Internal.CommonProvider.Select3Provider`3/<FreeSql-ISelect<T1,T2,T3>-AnyAsync>d__72")]
[DebuggerStepThroughAttribute]
private sealed virtual override Task`1<bool> FreeSql.ISelect<T1,T2,T3>.AnyAsync(Expression`1<Func`2<HzyTuple`3<T1, T2, T3>, bool>> exp, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("FreeSql.Internal.CommonProvider.Select3Provider`3/<FreeSql-ISelect<T1,T2,T3>-ToOneAsync>d__73`1")]
[DebuggerStepThroughAttribute]
private sealed virtual override Task`1<TReturn> FreeSql.ISelect<T1,T2,T3>.ToOneAsync(Expression`1<Func`2<HzyTuple`3<T1, T2, T3>, TReturn>> select, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("FreeSql.Internal.CommonProvider.Select3Provider`3/<FreeSql-ISelect<T1,T2,T3>-FirstAsync>d__74`1")]
[DebuggerStepThroughAttribute]
private sealed virtual override Task`1<TReturn> FreeSql.ISelect<T1,T2,T3>.FirstAsync(Expression`1<Func`2<HzyTuple`3<T1, T2, T3>, TReturn>> select, CancellationToken cancellationToken);
}
public abstract class FreeSql.Internal.CommonProvider.Select4Provider`4 : Select0Provider`2<ISelect`4<T1, T2, T3, T4>, T1> {
    public Select4Provider`4(IFreeSql orm, CommonUtils commonUtils, CommonExpression commonExpression, object dywhere);
    private sealed virtual override ISelect`4<T1, T2, T3, T4> FreeSql.ISelect<T1,T2,T3,T4>.WithSql(string sqlT1, string sqlT2, string sqlT3, string sqlT4, object parms);
    private sealed virtual override ISelect`4<T1, T2, T3, T4> FreeSql.ISelect<T1,T2,T3,T4>.As(string aliasT1, string aliasT2, string aliasT3, string aliasT4);
    private sealed virtual override ISelect`1<TDto> FreeSql.ISelect<T1,T2,T3,T4>.WithTempQuery(Expression`1<Func`5<T1, T2, T3, T4, TDto>> selector);
    private sealed virtual override double FreeSql.ISelect<T1,T2,T3,T4>.Avg(Expression`1<Func`5<T1, T2, T3, T4, TMember>> column);
    private sealed virtual override ISelectGrouping`2<TKey, NativeTuple`4<T1, T2, T3, T4>> FreeSql.ISelect<T1,T2,T3,T4>.GroupBy(Expression`1<Func`5<T1, T2, T3, T4, TKey>> exp);
    private sealed virtual override TMember FreeSql.ISelect<T1,T2,T3,T4>.Max(Expression`1<Func`5<T1, T2, T3, T4, TMember>> column);
    private sealed virtual override TMember FreeSql.ISelect<T1,T2,T3,T4>.Min(Expression`1<Func`5<T1, T2, T3, T4, TMember>> column);
    private sealed virtual override ISelect`4<T1, T2, T3, T4> FreeSql.ISelect<T1,T2,T3,T4>.OrderBy(Expression`1<Func`5<T1, T2, T3, T4, TMember>> column);
    private sealed virtual override ISelect`4<T1, T2, T3, T4> FreeSql.ISelect<T1,T2,T3,T4>.OrderByDescending(Expression`1<Func`5<T1, T2, T3, T4, TMember>> column);
    private sealed virtual override ISelect`4<T1, T2, T3, T4> FreeSql.ISelect<T1,T2,T3,T4>.OrderByIf(bool condition, Expression`1<Func`5<T1, T2, T3, T4, TMember>> column, bool descending);
    private sealed virtual override decimal FreeSql.ISelect<T1,T2,T3,T4>.Sum(Expression`1<Func`5<T1, T2, T3, T4, TMember>> column);
    private sealed virtual override TReturn FreeSql.ISelect<T1,T2,T3,T4>.ToAggregate(Expression`1<Func`5<ISelectGroupingAggregate`1<T1>, ISelectGroupingAggregate`1<T2>, ISelectGroupingAggregate`1<T3>, ISelectGroupingAggregate`1<T4>, TReturn>> select);
    private sealed virtual override ISelect`4<T1, T2, T3, T4> FreeSql.ISelect<T1,T2,T3,T4>.Aggregate(Expression`1<Func`5<ISelectGroupingAggregate`1<T1>, ISelectGroupingAggregate`1<T2>, ISelectGroupingAggregate`1<T3>, ISelectGroupingAggregate`1<T4>, TReturn>> select, TReturn& result);
    private sealed virtual override List`1<TReturn> FreeSql.ISelect<T1,T2,T3,T4>.ToList(Expression`1<Func`5<T1, T2, T3, T4, TReturn>> select);
    private sealed virtual override List`1<TDto> FreeSql.ISelect<T1,T2,T3,T4>.ToList();
    private Expression`1<Func`5<T1, T2, T3, T4, TDto>> GetToListDtoSelector();
    public sealed virtual void ToChunk(Expression`1<Func`5<T1, T2, T3, T4, TReturn>> select, int size, Action`1<FetchCallbackArgs`1<List`1<TReturn>>> done);
    private sealed virtual override DataTable FreeSql.ISelect<T1,T2,T3,T4>.ToDataTable(Expression`1<Func`5<T1, T2, T3, T4, TReturn>> select);
    private sealed virtual override int FreeSql.ISelect<T1,T2,T3,T4>.InsertInto(string tableName, Expression`1<Func`5<T1, T2, T3, T4, TTargetEntity>> select);
    private sealed virtual override string FreeSql.ISelect<T1,T2,T3,T4>.ToSql(Expression`1<Func`5<T1, T2, T3, T4, TReturn>> select, FieldAliasOptions fieldAlias);
    private sealed virtual override ISelect`4<T1, T2, T3, T4> FreeSql.ISelect<T1,T2,T3,T4>.LeftJoin(Expression`1<Func`5<T1, T2, T3, T4, bool>> exp);
    private sealed virtual override ISelect`4<T1, T2, T3, T4> FreeSql.ISelect<T1,T2,T3,T4>.InnerJoin(Expression`1<Func`5<T1, T2, T3, T4, bool>> exp);
    private sealed virtual override ISelect`4<T1, T2, T3, T4> FreeSql.ISelect<T1,T2,T3,T4>.RightJoin(Expression`1<Func`5<T1, T2, T3, T4, bool>> exp);
    private sealed virtual override ISelect`4<T1, T2, T3, T4> FreeSql.ISelect<T1,T2,T3,T4>.Where(Expression`1<Func`5<T1, T2, T3, T4, bool>> exp);
    private sealed virtual override ISelect`4<T1, T2, T3, T4> FreeSql.ISelect<T1,T2,T3,T4>.WhereIf(bool condition, Expression`1<Func`5<T1, T2, T3, T4, bool>> exp);
    private sealed virtual override bool FreeSql.ISelect<T1,T2,T3,T4>.Any(Expression`1<Func`5<T1, T2, T3, T4, bool>> exp);
    private sealed virtual override TReturn FreeSql.ISelect<T1,T2,T3,T4>.ToOne(Expression`1<Func`5<T1, T2, T3, T4, TReturn>> select);
    private sealed virtual override TReturn FreeSql.ISelect<T1,T2,T3,T4>.First(Expression`1<Func`5<T1, T2, T3, T4, TReturn>> select);
    private sealed virtual override TDto FreeSql.ISelect<T1,T2,T3,T4>.First();
    private sealed virtual override ISelect`1<TDto> FreeSql.ISelect<T1,T2,T3,T4>.WithTempQuery(Expression`1<Func`2<HzyTuple`4<T1, T2, T3, T4>, TDto>> selector);
    private sealed virtual override double FreeSql.ISelect<T1,T2,T3,T4>.Avg(Expression`1<Func`2<HzyTuple`4<T1, T2, T3, T4>, TMember>> column);
    private sealed virtual override ISelectGrouping`2<TKey, NativeTuple`4<T1, T2, T3, T4>> FreeSql.ISelect<T1,T2,T3,T4>.GroupBy(Expression`1<Func`2<HzyTuple`4<T1, T2, T3, T4>, TKey>> exp);
    private sealed virtual override TMember FreeSql.ISelect<T1,T2,T3,T4>.Max(Expression`1<Func`2<HzyTuple`4<T1, T2, T3, T4>, TMember>> column);
    private sealed virtual override TMember FreeSql.ISelect<T1,T2,T3,T4>.Min(Expression`1<Func`2<HzyTuple`4<T1, T2, T3, T4>, TMember>> column);
    private sealed virtual override ISelect`4<T1, T2, T3, T4> FreeSql.ISelect<T1,T2,T3,T4>.OrderBy(Expression`1<Func`2<HzyTuple`4<T1, T2, T3, T4>, TMember>> column);
    private sealed virtual override ISelect`4<T1, T2, T3, T4> FreeSql.ISelect<T1,T2,T3,T4>.OrderByDescending(Expression`1<Func`2<HzyTuple`4<T1, T2, T3, T4>, TMember>> column);
    private sealed virtual override ISelect`4<T1, T2, T3, T4> FreeSql.ISelect<T1,T2,T3,T4>.OrderByIf(bool condition, Expression`1<Func`2<HzyTuple`4<T1, T2, T3, T4>, TMember>> column, bool descending);
    private sealed virtual override decimal FreeSql.ISelect<T1,T2,T3,T4>.Sum(Expression`1<Func`2<HzyTuple`4<T1, T2, T3, T4>, TMember>> column);
    private sealed virtual override List`1<TReturn> FreeSql.ISelect<T1,T2,T3,T4>.ToList(Expression`1<Func`2<HzyTuple`4<T1, T2, T3, T4>, TReturn>> select);
    public sealed virtual void ToChunk(Expression`1<Func`2<HzyTuple`4<T1, T2, T3, T4>, TReturn>> select, int size, Action`1<FetchCallbackArgs`1<List`1<TReturn>>> done);
    private sealed virtual override DataTable FreeSql.ISelect<T1,T2,T3,T4>.ToDataTable(Expression`1<Func`2<HzyTuple`4<T1, T2, T3, T4>, TReturn>> select);
    private sealed virtual override int FreeSql.ISelect<T1,T2,T3,T4>.InsertInto(string tableName, Expression`1<Func`2<HzyTuple`4<T1, T2, T3, T4>, TTargetEntity>> select);
    private sealed virtual override string FreeSql.ISelect<T1,T2,T3,T4>.ToSql(Expression`1<Func`2<HzyTuple`4<T1, T2, T3, T4>, TReturn>> select, FieldAliasOptions fieldAlias);
    private sealed virtual override ISelect`4<T1, T2, T3, T4> FreeSql.ISelect<T1,T2,T3,T4>.LeftJoin(Expression`1<Func`2<HzyTuple`4<T1, T2, T3, T4>, bool>> exp);
    private sealed virtual override ISelect`4<T1, T2, T3, T4> FreeSql.ISelect<T1,T2,T3,T4>.InnerJoin(Expression`1<Func`2<HzyTuple`4<T1, T2, T3, T4>, bool>> exp);
    private sealed virtual override ISelect`4<T1, T2, T3, T4> FreeSql.ISelect<T1,T2,T3,T4>.RightJoin(Expression`1<Func`2<HzyTuple`4<T1, T2, T3, T4>, bool>> exp);
    private sealed virtual override ISelect`4<T1, T2, T3, T4> FreeSql.ISelect<T1,T2,T3,T4>.Where(Expression`1<Func`2<HzyTuple`4<T1, T2, T3, T4>, bool>> exp);
    private sealed virtual override ISelect`4<T1, T2, T3, T4> FreeSql.ISelect<T1,T2,T3,T4>.WhereIf(bool condition, Expression`1<Func`2<HzyTuple`4<T1, T2, T3, T4>, bool>> exp);
    private sealed virtual override bool FreeSql.ISelect<T1,T2,T3,T4>.Any(Expression`1<Func`2<HzyTuple`4<T1, T2, T3, T4>, bool>> exp);
    private sealed virtual override TReturn FreeSql.ISelect<T1,T2,T3,T4>.ToOne(Expression`1<Func`2<HzyTuple`4<T1, T2, T3, T4>, TReturn>> select);
    private sealed virtual override TReturn FreeSql.ISelect<T1,T2,T3,T4>.First(Expression`1<Func`2<HzyTuple`4<T1, T2, T3, T4>, TReturn>> select);
    private sealed virtual override Task`1<double> FreeSql.ISelect<T1,T2,T3,T4>.AvgAsync(Expression`1<Func`5<T1, T2, T3, T4, TMember>> column, CancellationToken cancellationToken);
    private sealed virtual override Task`1<TMember> FreeSql.ISelect<T1,T2,T3,T4>.MaxAsync(Expression`1<Func`5<T1, T2, T3, T4, TMember>> column, CancellationToken cancellationToken);
    private sealed virtual override Task`1<TMember> FreeSql.ISelect<T1,T2,T3,T4>.MinAsync(Expression`1<Func`5<T1, T2, T3, T4, TMember>> column, CancellationToken cancellationToken);
    private sealed virtual override Task`1<decimal> FreeSql.ISelect<T1,T2,T3,T4>.SumAsync(Expression`1<Func`5<T1, T2, T3, T4, TMember>> column, CancellationToken cancellationToken);
    private sealed virtual override Task`1<TReturn> FreeSql.ISelect<T1,T2,T3,T4>.ToAggregateAsync(Expression`1<Func`5<ISelectGroupingAggregate`1<T1>, ISelectGroupingAggregate`1<T2>, ISelectGroupingAggregate`1<T3>, ISelectGroupingAggregate`1<T4>, TReturn>> select, CancellationToken cancellationToken);
    private sealed virtual override Task`1<List`1<TReturn>> FreeSql.ISelect<T1,T2,T3,T4>.ToListAsync(Expression`1<Func`5<T1, T2, T3, T4, TReturn>> select, CancellationToken cancellationToken);
    private sealed virtual override Task`1<List`1<TDto>> FreeSql.ISelect<T1,T2,T3,T4>.ToListAsync(CancellationToken cancellationToken);
    private sealed virtual override Task`1<DataTable> FreeSql.ISelect<T1,T2,T3,T4>.ToDataTableAsync(Expression`1<Func`5<T1, T2, T3, T4, TReturn>> select, CancellationToken cancellationToken);
    private sealed virtual override Task`1<int> FreeSql.ISelect<T1,T2,T3,T4>.InsertIntoAsync(string tableName, Expression`1<Func`5<T1, T2, T3, T4, TTargetEntity>> select, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("FreeSql.Internal.CommonProvider.Select4Provider`4/<FreeSql-ISelect<T1,T2,T3,T4>-AnyAsync>d__61")]
[DebuggerStepThroughAttribute]
private sealed virtual override Task`1<bool> FreeSql.ISelect<T1,T2,T3,T4>.AnyAsync(Expression`1<Func`5<T1, T2, T3, T4, bool>> exp, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("FreeSql.Internal.CommonProvider.Select4Provider`4/<FreeSql-ISelect<T1,T2,T3,T4>-ToOneAsync>d__62`1")]
[DebuggerStepThroughAttribute]
private sealed virtual override Task`1<TReturn> FreeSql.ISelect<T1,T2,T3,T4>.ToOneAsync(Expression`1<Func`5<T1, T2, T3, T4, TReturn>> select, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("FreeSql.Internal.CommonProvider.Select4Provider`4/<FreeSql-ISelect<T1,T2,T3,T4>-FirstAsync>d__63`1")]
[DebuggerStepThroughAttribute]
private sealed virtual override Task`1<TReturn> FreeSql.ISelect<T1,T2,T3,T4>.FirstAsync(Expression`1<Func`5<T1, T2, T3, T4, TReturn>> select, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("FreeSql.Internal.CommonProvider.Select4Provider`4/<FreeSql-ISelect<T1,T2,T3,T4>-FirstAsync>d__64`1")]
[DebuggerStepThroughAttribute]
private sealed virtual override Task`1<TDto> FreeSql.ISelect<T1,T2,T3,T4>.FirstAsync(CancellationToken cancellationToken);
    private sealed virtual override Task`1<double> FreeSql.ISelect<T1,T2,T3,T4>.AvgAsync(Expression`1<Func`2<HzyTuple`4<T1, T2, T3, T4>, TMember>> column, CancellationToken cancellationToken);
    private sealed virtual override Task`1<TMember> FreeSql.ISelect<T1,T2,T3,T4>.MaxAsync(Expression`1<Func`2<HzyTuple`4<T1, T2, T3, T4>, TMember>> column, CancellationToken cancellationToken);
    private sealed virtual override Task`1<TMember> FreeSql.ISelect<T1,T2,T3,T4>.MinAsync(Expression`1<Func`2<HzyTuple`4<T1, T2, T3, T4>, TMember>> column, CancellationToken cancellationToken);
    private sealed virtual override Task`1<decimal> FreeSql.ISelect<T1,T2,T3,T4>.SumAsync(Expression`1<Func`2<HzyTuple`4<T1, T2, T3, T4>, TMember>> column, CancellationToken cancellationToken);
    private sealed virtual override Task`1<List`1<TReturn>> FreeSql.ISelect<T1,T2,T3,T4>.ToListAsync(Expression`1<Func`2<HzyTuple`4<T1, T2, T3, T4>, TReturn>> select, CancellationToken cancellationToken);
    private sealed virtual override Task`1<DataTable> FreeSql.ISelect<T1,T2,T3,T4>.ToDataTableAsync(Expression`1<Func`2<HzyTuple`4<T1, T2, T3, T4>, TReturn>> select, CancellationToken cancellationToken);
    private sealed virtual override Task`1<int> FreeSql.ISelect<T1,T2,T3,T4>.InsertIntoAsync(string tableName, Expression`1<Func`2<HzyTuple`4<T1, T2, T3, T4>, TTargetEntity>> select, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("FreeSql.Internal.CommonProvider.Select4Provider`4/<FreeSql-ISelect<T1,T2,T3,T4>-AnyAsync>d__72")]
[DebuggerStepThroughAttribute]
private sealed virtual override Task`1<bool> FreeSql.ISelect<T1,T2,T3,T4>.AnyAsync(Expression`1<Func`2<HzyTuple`4<T1, T2, T3, T4>, bool>> exp, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("FreeSql.Internal.CommonProvider.Select4Provider`4/<FreeSql-ISelect<T1,T2,T3,T4>-ToOneAsync>d__73`1")]
[DebuggerStepThroughAttribute]
private sealed virtual override Task`1<TReturn> FreeSql.ISelect<T1,T2,T3,T4>.ToOneAsync(Expression`1<Func`2<HzyTuple`4<T1, T2, T3, T4>, TReturn>> select, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("FreeSql.Internal.CommonProvider.Select4Provider`4/<FreeSql-ISelect<T1,T2,T3,T4>-FirstAsync>d__74`1")]
[DebuggerStepThroughAttribute]
private sealed virtual override Task`1<TReturn> FreeSql.ISelect<T1,T2,T3,T4>.FirstAsync(Expression`1<Func`2<HzyTuple`4<T1, T2, T3, T4>, TReturn>> select, CancellationToken cancellationToken);
}
public abstract class FreeSql.Internal.CommonProvider.Select5Provider`5 : Select0Provider`2<ISelect`5<T1, T2, T3, T4, T5>, T1> {
    public Select5Provider`5(IFreeSql orm, CommonUtils commonUtils, CommonExpression commonExpression, object dywhere);
    private sealed virtual override ISelect`5<T1, T2, T3, T4, T5> FreeSql.ISelect<T1,T2,T3,T4,T5>.WithSql(string sqlT1, string sqlT2, string sqlT3, string sqlT4, string sqlT5, object parms);
    private sealed virtual override ISelect`5<T1, T2, T3, T4, T5> FreeSql.ISelect<T1,T2,T3,T4,T5>.As(string aliasT1, string aliasT2, string aliasT3, string aliasT4, string aliasT5);
    private sealed virtual override ISelect`1<TDto> FreeSql.ISelect<T1,T2,T3,T4,T5>.WithTempQuery(Expression`1<Func`6<T1, T2, T3, T4, T5, TDto>> selector);
    private sealed virtual override double FreeSql.ISelect<T1,T2,T3,T4,T5>.Avg(Expression`1<Func`6<T1, T2, T3, T4, T5, TMember>> column);
    private sealed virtual override ISelectGrouping`2<TKey, NativeTuple`5<T1, T2, T3, T4, T5>> FreeSql.ISelect<T1,T2,T3,T4,T5>.GroupBy(Expression`1<Func`6<T1, T2, T3, T4, T5, TKey>> exp);
    private sealed virtual override TMember FreeSql.ISelect<T1,T2,T3,T4,T5>.Max(Expression`1<Func`6<T1, T2, T3, T4, T5, TMember>> column);
    private sealed virtual override TMember FreeSql.ISelect<T1,T2,T3,T4,T5>.Min(Expression`1<Func`6<T1, T2, T3, T4, T5, TMember>> column);
    private sealed virtual override ISelect`5<T1, T2, T3, T4, T5> FreeSql.ISelect<T1,T2,T3,T4,T5>.OrderBy(Expression`1<Func`6<T1, T2, T3, T4, T5, TMember>> column);
    private sealed virtual override ISelect`5<T1, T2, T3, T4, T5> FreeSql.ISelect<T1,T2,T3,T4,T5>.OrderByDescending(Expression`1<Func`6<T1, T2, T3, T4, T5, TMember>> column);
    private sealed virtual override ISelect`5<T1, T2, T3, T4, T5> FreeSql.ISelect<T1,T2,T3,T4,T5>.OrderByIf(bool condition, Expression`1<Func`6<T1, T2, T3, T4, T5, TMember>> column, bool descending);
    private sealed virtual override decimal FreeSql.ISelect<T1,T2,T3,T4,T5>.Sum(Expression`1<Func`6<T1, T2, T3, T4, T5, TMember>> column);
    private sealed virtual override TReturn FreeSql.ISelect<T1,T2,T3,T4,T5>.ToAggregate(Expression`1<Func`6<ISelectGroupingAggregate`1<T1>, ISelectGroupingAggregate`1<T2>, ISelectGroupingAggregate`1<T3>, ISelectGroupingAggregate`1<T4>, ISelectGroupingAggregate`1<T5>, TReturn>> select);
    private sealed virtual override ISelect`5<T1, T2, T3, T4, T5> FreeSql.ISelect<T1,T2,T3,T4,T5>.Aggregate(Expression`1<Func`6<ISelectGroupingAggregate`1<T1>, ISelectGroupingAggregate`1<T2>, ISelectGroupingAggregate`1<T3>, ISelectGroupingAggregate`1<T4>, ISelectGroupingAggregate`1<T5>, TReturn>> select, TReturn& result);
    private sealed virtual override List`1<TReturn> FreeSql.ISelect<T1,T2,T3,T4,T5>.ToList(Expression`1<Func`6<T1, T2, T3, T4, T5, TReturn>> select);
    private sealed virtual override List`1<TDto> FreeSql.ISelect<T1,T2,T3,T4,T5>.ToList();
    private Expression`1<Func`6<T1, T2, T3, T4, T5, TDto>> GetToListDtoSelector();
    public sealed virtual void ToChunk(Expression`1<Func`6<T1, T2, T3, T4, T5, TReturn>> select, int size, Action`1<FetchCallbackArgs`1<List`1<TReturn>>> done);
    private sealed virtual override DataTable FreeSql.ISelect<T1,T2,T3,T4,T5>.ToDataTable(Expression`1<Func`6<T1, T2, T3, T4, T5, TReturn>> select);
    private sealed virtual override int FreeSql.ISelect<T1,T2,T3,T4,T5>.InsertInto(string tableName, Expression`1<Func`6<T1, T2, T3, T4, T5, TTargetEntity>> select);
    private sealed virtual override string FreeSql.ISelect<T1,T2,T3,T4,T5>.ToSql(Expression`1<Func`6<T1, T2, T3, T4, T5, TReturn>> select, FieldAliasOptions fieldAlias);
    private sealed virtual override ISelect`5<T1, T2, T3, T4, T5> FreeSql.ISelect<T1,T2,T3,T4,T5>.LeftJoin(Expression`1<Func`6<T1, T2, T3, T4, T5, bool>> exp);
    private sealed virtual override ISelect`5<T1, T2, T3, T4, T5> FreeSql.ISelect<T1,T2,T3,T4,T5>.InnerJoin(Expression`1<Func`6<T1, T2, T3, T4, T5, bool>> exp);
    private sealed virtual override ISelect`5<T1, T2, T3, T4, T5> FreeSql.ISelect<T1,T2,T3,T4,T5>.RightJoin(Expression`1<Func`6<T1, T2, T3, T4, T5, bool>> exp);
    private sealed virtual override ISelect`5<T1, T2, T3, T4, T5> FreeSql.ISelect<T1,T2,T3,T4,T5>.Where(Expression`1<Func`6<T1, T2, T3, T4, T5, bool>> exp);
    private sealed virtual override ISelect`5<T1, T2, T3, T4, T5> FreeSql.ISelect<T1,T2,T3,T4,T5>.WhereIf(bool condition, Expression`1<Func`6<T1, T2, T3, T4, T5, bool>> exp);
    private sealed virtual override bool FreeSql.ISelect<T1,T2,T3,T4,T5>.Any(Expression`1<Func`6<T1, T2, T3, T4, T5, bool>> exp);
    private sealed virtual override TReturn FreeSql.ISelect<T1,T2,T3,T4,T5>.ToOne(Expression`1<Func`6<T1, T2, T3, T4, T5, TReturn>> select);
    private sealed virtual override TReturn FreeSql.ISelect<T1,T2,T3,T4,T5>.First(Expression`1<Func`6<T1, T2, T3, T4, T5, TReturn>> select);
    private sealed virtual override TDto FreeSql.ISelect<T1,T2,T3,T4,T5>.First();
    private sealed virtual override ISelect`1<TDto> FreeSql.ISelect<T1,T2,T3,T4,T5>.WithTempQuery(Expression`1<Func`2<HzyTuple`5<T1, T2, T3, T4, T5>, TDto>> selector);
    private sealed virtual override double FreeSql.ISelect<T1,T2,T3,T4,T5>.Avg(Expression`1<Func`2<HzyTuple`5<T1, T2, T3, T4, T5>, TMember>> column);
    private sealed virtual override ISelectGrouping`2<TKey, NativeTuple`5<T1, T2, T3, T4, T5>> FreeSql.ISelect<T1,T2,T3,T4,T5>.GroupBy(Expression`1<Func`2<HzyTuple`5<T1, T2, T3, T4, T5>, TKey>> exp);
    private sealed virtual override TMember FreeSql.ISelect<T1,T2,T3,T4,T5>.Max(Expression`1<Func`2<HzyTuple`5<T1, T2, T3, T4, T5>, TMember>> column);
    private sealed virtual override TMember FreeSql.ISelect<T1,T2,T3,T4,T5>.Min(Expression`1<Func`2<HzyTuple`5<T1, T2, T3, T4, T5>, TMember>> column);
    private sealed virtual override ISelect`5<T1, T2, T3, T4, T5> FreeSql.ISelect<T1,T2,T3,T4,T5>.OrderBy(Expression`1<Func`2<HzyTuple`5<T1, T2, T3, T4, T5>, TMember>> column);
    private sealed virtual override ISelect`5<T1, T2, T3, T4, T5> FreeSql.ISelect<T1,T2,T3,T4,T5>.OrderByDescending(Expression`1<Func`2<HzyTuple`5<T1, T2, T3, T4, T5>, TMember>> column);
    private sealed virtual override ISelect`5<T1, T2, T3, T4, T5> FreeSql.ISelect<T1,T2,T3,T4,T5>.OrderByIf(bool condition, Expression`1<Func`2<HzyTuple`5<T1, T2, T3, T4, T5>, TMember>> column, bool descending);
    private sealed virtual override decimal FreeSql.ISelect<T1,T2,T3,T4,T5>.Sum(Expression`1<Func`2<HzyTuple`5<T1, T2, T3, T4, T5>, TMember>> column);
    private sealed virtual override List`1<TReturn> FreeSql.ISelect<T1,T2,T3,T4,T5>.ToList(Expression`1<Func`2<HzyTuple`5<T1, T2, T3, T4, T5>, TReturn>> select);
    public sealed virtual void ToChunk(Expression`1<Func`2<HzyTuple`5<T1, T2, T3, T4, T5>, TReturn>> select, int size, Action`1<FetchCallbackArgs`1<List`1<TReturn>>> done);
    private sealed virtual override DataTable FreeSql.ISelect<T1,T2,T3,T4,T5>.ToDataTable(Expression`1<Func`2<HzyTuple`5<T1, T2, T3, T4, T5>, TReturn>> select);
    private sealed virtual override int FreeSql.ISelect<T1,T2,T3,T4,T5>.InsertInto(string tableName, Expression`1<Func`2<HzyTuple`5<T1, T2, T3, T4, T5>, TTargetEntity>> select);
    private sealed virtual override string FreeSql.ISelect<T1,T2,T3,T4,T5>.ToSql(Expression`1<Func`2<HzyTuple`5<T1, T2, T3, T4, T5>, TReturn>> select, FieldAliasOptions fieldAlias);
    private sealed virtual override ISelect`5<T1, T2, T3, T4, T5> FreeSql.ISelect<T1,T2,T3,T4,T5>.LeftJoin(Expression`1<Func`2<HzyTuple`5<T1, T2, T3, T4, T5>, bool>> exp);
    private sealed virtual override ISelect`5<T1, T2, T3, T4, T5> FreeSql.ISelect<T1,T2,T3,T4,T5>.InnerJoin(Expression`1<Func`2<HzyTuple`5<T1, T2, T3, T4, T5>, bool>> exp);
    private sealed virtual override ISelect`5<T1, T2, T3, T4, T5> FreeSql.ISelect<T1,T2,T3,T4,T5>.RightJoin(Expression`1<Func`2<HzyTuple`5<T1, T2, T3, T4, T5>, bool>> exp);
    private sealed virtual override ISelect`5<T1, T2, T3, T4, T5> FreeSql.ISelect<T1,T2,T3,T4,T5>.Where(Expression`1<Func`2<HzyTuple`5<T1, T2, T3, T4, T5>, bool>> exp);
    private sealed virtual override ISelect`5<T1, T2, T3, T4, T5> FreeSql.ISelect<T1,T2,T3,T4,T5>.WhereIf(bool condition, Expression`1<Func`2<HzyTuple`5<T1, T2, T3, T4, T5>, bool>> exp);
    private sealed virtual override bool FreeSql.ISelect<T1,T2,T3,T4,T5>.Any(Expression`1<Func`2<HzyTuple`5<T1, T2, T3, T4, T5>, bool>> exp);
    private sealed virtual override TReturn FreeSql.ISelect<T1,T2,T3,T4,T5>.ToOne(Expression`1<Func`2<HzyTuple`5<T1, T2, T3, T4, T5>, TReturn>> select);
    private sealed virtual override TReturn FreeSql.ISelect<T1,T2,T3,T4,T5>.First(Expression`1<Func`2<HzyTuple`5<T1, T2, T3, T4, T5>, TReturn>> select);
    private sealed virtual override Task`1<double> FreeSql.ISelect<T1,T2,T3,T4,T5>.AvgAsync(Expression`1<Func`6<T1, T2, T3, T4, T5, TMember>> column, CancellationToken cancellationToken);
    private sealed virtual override Task`1<TMember> FreeSql.ISelect<T1,T2,T3,T4,T5>.MaxAsync(Expression`1<Func`6<T1, T2, T3, T4, T5, TMember>> column, CancellationToken cancellationToken);
    private sealed virtual override Task`1<TMember> FreeSql.ISelect<T1,T2,T3,T4,T5>.MinAsync(Expression`1<Func`6<T1, T2, T3, T4, T5, TMember>> column, CancellationToken cancellationToken);
    private sealed virtual override Task`1<decimal> FreeSql.ISelect<T1,T2,T3,T4,T5>.SumAsync(Expression`1<Func`6<T1, T2, T3, T4, T5, TMember>> column, CancellationToken cancellationToken);
    private sealed virtual override Task`1<TReturn> FreeSql.ISelect<T1,T2,T3,T4,T5>.ToAggregateAsync(Expression`1<Func`6<ISelectGroupingAggregate`1<T1>, ISelectGroupingAggregate`1<T2>, ISelectGroupingAggregate`1<T3>, ISelectGroupingAggregate`1<T4>, ISelectGroupingAggregate`1<T5>, TReturn>> select, CancellationToken cancellationToken);
    private sealed virtual override Task`1<List`1<TReturn>> FreeSql.ISelect<T1,T2,T3,T4,T5>.ToListAsync(Expression`1<Func`6<T1, T2, T3, T4, T5, TReturn>> select, CancellationToken cancellationToken);
    private sealed virtual override Task`1<List`1<TDto>> FreeSql.ISelect<T1,T2,T3,T4,T5>.ToListAsync(CancellationToken cancellationToken);
    private sealed virtual override Task`1<DataTable> FreeSql.ISelect<T1,T2,T3,T4,T5>.ToDataTableAsync(Expression`1<Func`6<T1, T2, T3, T4, T5, TReturn>> select, CancellationToken cancellationToken);
    private sealed virtual override Task`1<int> FreeSql.ISelect<T1,T2,T3,T4,T5>.InsertIntoAsync(string tableName, Expression`1<Func`6<T1, T2, T3, T4, T5, TTargetEntity>> select, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("FreeSql.Internal.CommonProvider.Select5Provider`5/<FreeSql-ISelect<T1,T2,T3,T4,T5>-AnyAsync>d__61")]
[DebuggerStepThroughAttribute]
private sealed virtual override Task`1<bool> FreeSql.ISelect<T1,T2,T3,T4,T5>.AnyAsync(Expression`1<Func`6<T1, T2, T3, T4, T5, bool>> exp, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("FreeSql.Internal.CommonProvider.Select5Provider`5/<FreeSql-ISelect<T1,T2,T3,T4,T5>-ToOneAsync>d__62`1")]
[DebuggerStepThroughAttribute]
private sealed virtual override Task`1<TReturn> FreeSql.ISelect<T1,T2,T3,T4,T5>.ToOneAsync(Expression`1<Func`6<T1, T2, T3, T4, T5, TReturn>> select, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("FreeSql.Internal.CommonProvider.Select5Provider`5/<FreeSql-ISelect<T1,T2,T3,T4,T5>-FirstAsync>d__63`1")]
[DebuggerStepThroughAttribute]
private sealed virtual override Task`1<TReturn> FreeSql.ISelect<T1,T2,T3,T4,T5>.FirstAsync(Expression`1<Func`6<T1, T2, T3, T4, T5, TReturn>> select, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("FreeSql.Internal.CommonProvider.Select5Provider`5/<FreeSql-ISelect<T1,T2,T3,T4,T5>-FirstAsync>d__64`1")]
[DebuggerStepThroughAttribute]
private sealed virtual override Task`1<TDto> FreeSql.ISelect<T1,T2,T3,T4,T5>.FirstAsync(CancellationToken cancellationToken);
    private sealed virtual override Task`1<double> FreeSql.ISelect<T1,T2,T3,T4,T5>.AvgAsync(Expression`1<Func`2<HzyTuple`5<T1, T2, T3, T4, T5>, TMember>> column, CancellationToken cancellationToken);
    private sealed virtual override Task`1<TMember> FreeSql.ISelect<T1,T2,T3,T4,T5>.MaxAsync(Expression`1<Func`2<HzyTuple`5<T1, T2, T3, T4, T5>, TMember>> column, CancellationToken cancellationToken);
    private sealed virtual override Task`1<TMember> FreeSql.ISelect<T1,T2,T3,T4,T5>.MinAsync(Expression`1<Func`2<HzyTuple`5<T1, T2, T3, T4, T5>, TMember>> column, CancellationToken cancellationToken);
    private sealed virtual override Task`1<decimal> FreeSql.ISelect<T1,T2,T3,T4,T5>.SumAsync(Expression`1<Func`2<HzyTuple`5<T1, T2, T3, T4, T5>, TMember>> column, CancellationToken cancellationToken);
    private sealed virtual override Task`1<List`1<TReturn>> FreeSql.ISelect<T1,T2,T3,T4,T5>.ToListAsync(Expression`1<Func`2<HzyTuple`5<T1, T2, T3, T4, T5>, TReturn>> select, CancellationToken cancellationToken);
    private sealed virtual override Task`1<DataTable> FreeSql.ISelect<T1,T2,T3,T4,T5>.ToDataTableAsync(Expression`1<Func`2<HzyTuple`5<T1, T2, T3, T4, T5>, TReturn>> select, CancellationToken cancellationToken);
    private sealed virtual override Task`1<int> FreeSql.ISelect<T1,T2,T3,T4,T5>.InsertIntoAsync(string tableName, Expression`1<Func`2<HzyTuple`5<T1, T2, T3, T4, T5>, TTargetEntity>> select, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("FreeSql.Internal.CommonProvider.Select5Provider`5/<FreeSql-ISelect<T1,T2,T3,T4,T5>-AnyAsync>d__72")]
[DebuggerStepThroughAttribute]
private sealed virtual override Task`1<bool> FreeSql.ISelect<T1,T2,T3,T4,T5>.AnyAsync(Expression`1<Func`2<HzyTuple`5<T1, T2, T3, T4, T5>, bool>> exp, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("FreeSql.Internal.CommonProvider.Select5Provider`5/<FreeSql-ISelect<T1,T2,T3,T4,T5>-ToOneAsync>d__73`1")]
[DebuggerStepThroughAttribute]
private sealed virtual override Task`1<TReturn> FreeSql.ISelect<T1,T2,T3,T4,T5>.ToOneAsync(Expression`1<Func`2<HzyTuple`5<T1, T2, T3, T4, T5>, TReturn>> select, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("FreeSql.Internal.CommonProvider.Select5Provider`5/<FreeSql-ISelect<T1,T2,T3,T4,T5>-FirstAsync>d__74`1")]
[DebuggerStepThroughAttribute]
private sealed virtual override Task`1<TReturn> FreeSql.ISelect<T1,T2,T3,T4,T5>.FirstAsync(Expression`1<Func`2<HzyTuple`5<T1, T2, T3, T4, T5>, TReturn>> select, CancellationToken cancellationToken);
}
public abstract class FreeSql.Internal.CommonProvider.Select6Provider`6 : Select0Provider`2<ISelect`6<T1, T2, T3, T4, T5, T6>, T1> {
    public Select6Provider`6(IFreeSql orm, CommonUtils commonUtils, CommonExpression commonExpression, object dywhere);
    private sealed virtual override ISelect`6<T1, T2, T3, T4, T5, T6> FreeSql.ISelect<T1,T2,T3,T4,T5,T6>.WithSql(string sqlT1, string sqlT2, string sqlT3, string sqlT4, string sqlT5, string sqlT6, object parms);
    private sealed virtual override ISelect`6<T1, T2, T3, T4, T5, T6> FreeSql.ISelect<T1,T2,T3,T4,T5,T6>.As(string aliasT1, string aliasT2, string aliasT3, string aliasT4, string aliasT5, string aliasT6);
    private sealed virtual override ISelect`1<TDto> FreeSql.ISelect<T1,T2,T3,T4,T5,T6>.WithTempQuery(Expression`1<Func`7<T1, T2, T3, T4, T5, T6, TDto>> selector);
    private sealed virtual override double FreeSql.ISelect<T1,T2,T3,T4,T5,T6>.Avg(Expression`1<Func`7<T1, T2, T3, T4, T5, T6, TMember>> column);
    private sealed virtual override ISelectGrouping`2<TKey, NativeTuple`6<T1, T2, T3, T4, T5, T6>> FreeSql.ISelect<T1,T2,T3,T4,T5,T6>.GroupBy(Expression`1<Func`7<T1, T2, T3, T4, T5, T6, TKey>> exp);
    private sealed virtual override TMember FreeSql.ISelect<T1,T2,T3,T4,T5,T6>.Max(Expression`1<Func`7<T1, T2, T3, T4, T5, T6, TMember>> column);
    private sealed virtual override TMember FreeSql.ISelect<T1,T2,T3,T4,T5,T6>.Min(Expression`1<Func`7<T1, T2, T3, T4, T5, T6, TMember>> column);
    private sealed virtual override ISelect`6<T1, T2, T3, T4, T5, T6> FreeSql.ISelect<T1,T2,T3,T4,T5,T6>.OrderBy(Expression`1<Func`7<T1, T2, T3, T4, T5, T6, TMember>> column);
    private sealed virtual override ISelect`6<T1, T2, T3, T4, T5, T6> FreeSql.ISelect<T1,T2,T3,T4,T5,T6>.OrderByDescending(Expression`1<Func`7<T1, T2, T3, T4, T5, T6, TMember>> column);
    private sealed virtual override ISelect`6<T1, T2, T3, T4, T5, T6> FreeSql.ISelect<T1,T2,T3,T4,T5,T6>.OrderByIf(bool condition, Expression`1<Func`7<T1, T2, T3, T4, T5, T6, TMember>> column, bool descending);
    private sealed virtual override decimal FreeSql.ISelect<T1,T2,T3,T4,T5,T6>.Sum(Expression`1<Func`7<T1, T2, T3, T4, T5, T6, TMember>> column);
    private sealed virtual override TReturn FreeSql.ISelect<T1,T2,T3,T4,T5,T6>.ToAggregate(Expression`1<Func`7<ISelectGroupingAggregate`1<T1>, ISelectGroupingAggregate`1<T2>, ISelectGroupingAggregate`1<T3>, ISelectGroupingAggregate`1<T4>, ISelectGroupingAggregate`1<T5>, ISelectGroupingAggregate`1<T6>, TReturn>> select);
    private sealed virtual override ISelect`6<T1, T2, T3, T4, T5, T6> FreeSql.ISelect<T1,T2,T3,T4,T5,T6>.Aggregate(Expression`1<Func`7<ISelectGroupingAggregate`1<T1>, ISelectGroupingAggregate`1<T2>, ISelectGroupingAggregate`1<T3>, ISelectGroupingAggregate`1<T4>, ISelectGroupingAggregate`1<T5>, ISelectGroupingAggregate`1<T6>, TReturn>> select, TReturn& result);
    private sealed virtual override List`1<TReturn> FreeSql.ISelect<T1,T2,T3,T4,T5,T6>.ToList(Expression`1<Func`7<T1, T2, T3, T4, T5, T6, TReturn>> select);
    private sealed virtual override List`1<TDto> FreeSql.ISelect<T1,T2,T3,T4,T5,T6>.ToList();
    private Expression`1<Func`7<T1, T2, T3, T4, T5, T6, TDto>> GetToListDtoSelector();
    public sealed virtual void ToChunk(Expression`1<Func`7<T1, T2, T3, T4, T5, T6, TReturn>> select, int size, Action`1<FetchCallbackArgs`1<List`1<TReturn>>> done);
    private sealed virtual override DataTable FreeSql.ISelect<T1,T2,T3,T4,T5,T6>.ToDataTable(Expression`1<Func`7<T1, T2, T3, T4, T5, T6, TReturn>> select);
    private sealed virtual override int FreeSql.ISelect<T1,T2,T3,T4,T5,T6>.InsertInto(string tableName, Expression`1<Func`7<T1, T2, T3, T4, T5, T6, TTargetEntity>> select);
    private sealed virtual override string FreeSql.ISelect<T1,T2,T3,T4,T5,T6>.ToSql(Expression`1<Func`7<T1, T2, T3, T4, T5, T6, TReturn>> select, FieldAliasOptions fieldAlias);
    private sealed virtual override ISelect`6<T1, T2, T3, T4, T5, T6> FreeSql.ISelect<T1,T2,T3,T4,T5,T6>.LeftJoin(Expression`1<Func`7<T1, T2, T3, T4, T5, T6, bool>> exp);
    private sealed virtual override ISelect`6<T1, T2, T3, T4, T5, T6> FreeSql.ISelect<T1,T2,T3,T4,T5,T6>.InnerJoin(Expression`1<Func`7<T1, T2, T3, T4, T5, T6, bool>> exp);
    private sealed virtual override ISelect`6<T1, T2, T3, T4, T5, T6> FreeSql.ISelect<T1,T2,T3,T4,T5,T6>.RightJoin(Expression`1<Func`7<T1, T2, T3, T4, T5, T6, bool>> exp);
    private sealed virtual override ISelect`6<T1, T2, T3, T4, T5, T6> FreeSql.ISelect<T1,T2,T3,T4,T5,T6>.Where(Expression`1<Func`7<T1, T2, T3, T4, T5, T6, bool>> exp);
    private sealed virtual override ISelect`6<T1, T2, T3, T4, T5, T6> FreeSql.ISelect<T1,T2,T3,T4,T5,T6>.WhereIf(bool condition, Expression`1<Func`7<T1, T2, T3, T4, T5, T6, bool>> exp);
    private sealed virtual override bool FreeSql.ISelect<T1,T2,T3,T4,T5,T6>.Any(Expression`1<Func`7<T1, T2, T3, T4, T5, T6, bool>> exp);
    private sealed virtual override TReturn FreeSql.ISelect<T1,T2,T3,T4,T5,T6>.ToOne(Expression`1<Func`7<T1, T2, T3, T4, T5, T6, TReturn>> select);
    private sealed virtual override TReturn FreeSql.ISelect<T1,T2,T3,T4,T5,T6>.First(Expression`1<Func`7<T1, T2, T3, T4, T5, T6, TReturn>> select);
    private sealed virtual override TDto FreeSql.ISelect<T1,T2,T3,T4,T5,T6>.First();
    private sealed virtual override ISelect`1<TDto> FreeSql.ISelect<T1,T2,T3,T4,T5,T6>.WithTempQuery(Expression`1<Func`2<HzyTuple`6<T1, T2, T3, T4, T5, T6>, TDto>> selector);
    private sealed virtual override double FreeSql.ISelect<T1,T2,T3,T4,T5,T6>.Avg(Expression`1<Func`2<HzyTuple`6<T1, T2, T3, T4, T5, T6>, TMember>> column);
    private sealed virtual override ISelectGrouping`2<TKey, NativeTuple`6<T1, T2, T3, T4, T5, T6>> FreeSql.ISelect<T1,T2,T3,T4,T5,T6>.GroupBy(Expression`1<Func`2<HzyTuple`6<T1, T2, T3, T4, T5, T6>, TKey>> exp);
    private sealed virtual override TMember FreeSql.ISelect<T1,T2,T3,T4,T5,T6>.Max(Expression`1<Func`2<HzyTuple`6<T1, T2, T3, T4, T5, T6>, TMember>> column);
    private sealed virtual override TMember FreeSql.ISelect<T1,T2,T3,T4,T5,T6>.Min(Expression`1<Func`2<HzyTuple`6<T1, T2, T3, T4, T5, T6>, TMember>> column);
    private sealed virtual override ISelect`6<T1, T2, T3, T4, T5, T6> FreeSql.ISelect<T1,T2,T3,T4,T5,T6>.OrderBy(Expression`1<Func`2<HzyTuple`6<T1, T2, T3, T4, T5, T6>, TMember>> column);
    private sealed virtual override ISelect`6<T1, T2, T3, T4, T5, T6> FreeSql.ISelect<T1,T2,T3,T4,T5,T6>.OrderByDescending(Expression`1<Func`2<HzyTuple`6<T1, T2, T3, T4, T5, T6>, TMember>> column);
    private sealed virtual override ISelect`6<T1, T2, T3, T4, T5, T6> FreeSql.ISelect<T1,T2,T3,T4,T5,T6>.OrderByIf(bool condition, Expression`1<Func`2<HzyTuple`6<T1, T2, T3, T4, T5, T6>, TMember>> column, bool descending);
    private sealed virtual override decimal FreeSql.ISelect<T1,T2,T3,T4,T5,T6>.Sum(Expression`1<Func`2<HzyTuple`6<T1, T2, T3, T4, T5, T6>, TMember>> column);
    private sealed virtual override List`1<TReturn> FreeSql.ISelect<T1,T2,T3,T4,T5,T6>.ToList(Expression`1<Func`2<HzyTuple`6<T1, T2, T3, T4, T5, T6>, TReturn>> select);
    public sealed virtual void ToChunk(Expression`1<Func`2<HzyTuple`6<T1, T2, T3, T4, T5, T6>, TReturn>> select, int size, Action`1<FetchCallbackArgs`1<List`1<TReturn>>> done);
    private sealed virtual override DataTable FreeSql.ISelect<T1,T2,T3,T4,T5,T6>.ToDataTable(Expression`1<Func`2<HzyTuple`6<T1, T2, T3, T4, T5, T6>, TReturn>> select);
    private sealed virtual override int FreeSql.ISelect<T1,T2,T3,T4,T5,T6>.InsertInto(string tableName, Expression`1<Func`2<HzyTuple`6<T1, T2, T3, T4, T5, T6>, TTargetEntity>> select);
    private sealed virtual override string FreeSql.ISelect<T1,T2,T3,T4,T5,T6>.ToSql(Expression`1<Func`2<HzyTuple`6<T1, T2, T3, T4, T5, T6>, TReturn>> select, FieldAliasOptions fieldAlias);
    private sealed virtual override ISelect`6<T1, T2, T3, T4, T5, T6> FreeSql.ISelect<T1,T2,T3,T4,T5,T6>.LeftJoin(Expression`1<Func`2<HzyTuple`6<T1, T2, T3, T4, T5, T6>, bool>> exp);
    private sealed virtual override ISelect`6<T1, T2, T3, T4, T5, T6> FreeSql.ISelect<T1,T2,T3,T4,T5,T6>.InnerJoin(Expression`1<Func`2<HzyTuple`6<T1, T2, T3, T4, T5, T6>, bool>> exp);
    private sealed virtual override ISelect`6<T1, T2, T3, T4, T5, T6> FreeSql.ISelect<T1,T2,T3,T4,T5,T6>.RightJoin(Expression`1<Func`2<HzyTuple`6<T1, T2, T3, T4, T5, T6>, bool>> exp);
    private sealed virtual override ISelect`6<T1, T2, T3, T4, T5, T6> FreeSql.ISelect<T1,T2,T3,T4,T5,T6>.Where(Expression`1<Func`2<HzyTuple`6<T1, T2, T3, T4, T5, T6>, bool>> exp);
    private sealed virtual override ISelect`6<T1, T2, T3, T4, T5, T6> FreeSql.ISelect<T1,T2,T3,T4,T5,T6>.WhereIf(bool condition, Expression`1<Func`2<HzyTuple`6<T1, T2, T3, T4, T5, T6>, bool>> exp);
    private sealed virtual override bool FreeSql.ISelect<T1,T2,T3,T4,T5,T6>.Any(Expression`1<Func`2<HzyTuple`6<T1, T2, T3, T4, T5, T6>, bool>> exp);
    private sealed virtual override TReturn FreeSql.ISelect<T1,T2,T3,T4,T5,T6>.ToOne(Expression`1<Func`2<HzyTuple`6<T1, T2, T3, T4, T5, T6>, TReturn>> select);
    private sealed virtual override TReturn FreeSql.ISelect<T1,T2,T3,T4,T5,T6>.First(Expression`1<Func`2<HzyTuple`6<T1, T2, T3, T4, T5, T6>, TReturn>> select);
    private sealed virtual override Task`1<double> FreeSql.ISelect<T1,T2,T3,T4,T5,T6>.AvgAsync(Expression`1<Func`7<T1, T2, T3, T4, T5, T6, TMember>> column, CancellationToken cancellationToken);
    private sealed virtual override Task`1<TMember> FreeSql.ISelect<T1,T2,T3,T4,T5,T6>.MaxAsync(Expression`1<Func`7<T1, T2, T3, T4, T5, T6, TMember>> column, CancellationToken cancellationToken);
    private sealed virtual override Task`1<TMember> FreeSql.ISelect<T1,T2,T3,T4,T5,T6>.MinAsync(Expression`1<Func`7<T1, T2, T3, T4, T5, T6, TMember>> column, CancellationToken cancellationToken);
    private sealed virtual override Task`1<decimal> FreeSql.ISelect<T1,T2,T3,T4,T5,T6>.SumAsync(Expression`1<Func`7<T1, T2, T3, T4, T5, T6, TMember>> column, CancellationToken cancellationToken);
    private sealed virtual override Task`1<TReturn> FreeSql.ISelect<T1,T2,T3,T4,T5,T6>.ToAggregateAsync(Expression`1<Func`7<ISelectGroupingAggregate`1<T1>, ISelectGroupingAggregate`1<T2>, ISelectGroupingAggregate`1<T3>, ISelectGroupingAggregate`1<T4>, ISelectGroupingAggregate`1<T5>, ISelectGroupingAggregate`1<T6>, TReturn>> select, CancellationToken cancellationToken);
    private sealed virtual override Task`1<List`1<TReturn>> FreeSql.ISelect<T1,T2,T3,T4,T5,T6>.ToListAsync(Expression`1<Func`7<T1, T2, T3, T4, T5, T6, TReturn>> select, CancellationToken cancellationToken);
    private sealed virtual override Task`1<List`1<TDto>> FreeSql.ISelect<T1,T2,T3,T4,T5,T6>.ToListAsync(CancellationToken cancellationToken);
    private sealed virtual override Task`1<DataTable> FreeSql.ISelect<T1,T2,T3,T4,T5,T6>.ToDataTableAsync(Expression`1<Func`7<T1, T2, T3, T4, T5, T6, TReturn>> select, CancellationToken cancellationToken);
    private sealed virtual override Task`1<int> FreeSql.ISelect<T1,T2,T3,T4,T5,T6>.InsertIntoAsync(string tableName, Expression`1<Func`7<T1, T2, T3, T4, T5, T6, TTargetEntity>> select, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("FreeSql.Internal.CommonProvider.Select6Provider`6/<FreeSql-ISelect<T1,T2,T3,T4,T5,T6>-AnyAsync>d__61")]
[DebuggerStepThroughAttribute]
private sealed virtual override Task`1<bool> FreeSql.ISelect<T1,T2,T3,T4,T5,T6>.AnyAsync(Expression`1<Func`7<T1, T2, T3, T4, T5, T6, bool>> exp, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("FreeSql.Internal.CommonProvider.Select6Provider`6/<FreeSql-ISelect<T1,T2,T3,T4,T5,T6>-ToOneAsync>d__62`1")]
[DebuggerStepThroughAttribute]
private sealed virtual override Task`1<TReturn> FreeSql.ISelect<T1,T2,T3,T4,T5,T6>.ToOneAsync(Expression`1<Func`7<T1, T2, T3, T4, T5, T6, TReturn>> select, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("FreeSql.Internal.CommonProvider.Select6Provider`6/<FreeSql-ISelect<T1,T2,T3,T4,T5,T6>-FirstAsync>d__63`1")]
[DebuggerStepThroughAttribute]
private sealed virtual override Task`1<TReturn> FreeSql.ISelect<T1,T2,T3,T4,T5,T6>.FirstAsync(Expression`1<Func`7<T1, T2, T3, T4, T5, T6, TReturn>> select, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("FreeSql.Internal.CommonProvider.Select6Provider`6/<FreeSql-ISelect<T1,T2,T3,T4,T5,T6>-FirstAsync>d__64`1")]
[DebuggerStepThroughAttribute]
private sealed virtual override Task`1<TDto> FreeSql.ISelect<T1,T2,T3,T4,T5,T6>.FirstAsync(CancellationToken cancellationToken);
    private sealed virtual override Task`1<double> FreeSql.ISelect<T1,T2,T3,T4,T5,T6>.AvgAsync(Expression`1<Func`2<HzyTuple`6<T1, T2, T3, T4, T5, T6>, TMember>> column, CancellationToken cancellationToken);
    private sealed virtual override Task`1<TMember> FreeSql.ISelect<T1,T2,T3,T4,T5,T6>.MaxAsync(Expression`1<Func`2<HzyTuple`6<T1, T2, T3, T4, T5, T6>, TMember>> column, CancellationToken cancellationToken);
    private sealed virtual override Task`1<TMember> FreeSql.ISelect<T1,T2,T3,T4,T5,T6>.MinAsync(Expression`1<Func`2<HzyTuple`6<T1, T2, T3, T4, T5, T6>, TMember>> column, CancellationToken cancellationToken);
    private sealed virtual override Task`1<decimal> FreeSql.ISelect<T1,T2,T3,T4,T5,T6>.SumAsync(Expression`1<Func`2<HzyTuple`6<T1, T2, T3, T4, T5, T6>, TMember>> column, CancellationToken cancellationToken);
    private sealed virtual override Task`1<List`1<TReturn>> FreeSql.ISelect<T1,T2,T3,T4,T5,T6>.ToListAsync(Expression`1<Func`2<HzyTuple`6<T1, T2, T3, T4, T5, T6>, TReturn>> select, CancellationToken cancellationToken);
    private sealed virtual override Task`1<DataTable> FreeSql.ISelect<T1,T2,T3,T4,T5,T6>.ToDataTableAsync(Expression`1<Func`2<HzyTuple`6<T1, T2, T3, T4, T5, T6>, TReturn>> select, CancellationToken cancellationToken);
    private sealed virtual override Task`1<int> FreeSql.ISelect<T1,T2,T3,T4,T5,T6>.InsertIntoAsync(string tableName, Expression`1<Func`2<HzyTuple`6<T1, T2, T3, T4, T5, T6>, TTargetEntity>> select, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("FreeSql.Internal.CommonProvider.Select6Provider`6/<FreeSql-ISelect<T1,T2,T3,T4,T5,T6>-AnyAsync>d__72")]
[DebuggerStepThroughAttribute]
private sealed virtual override Task`1<bool> FreeSql.ISelect<T1,T2,T3,T4,T5,T6>.AnyAsync(Expression`1<Func`2<HzyTuple`6<T1, T2, T3, T4, T5, T6>, bool>> exp, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("FreeSql.Internal.CommonProvider.Select6Provider`6/<FreeSql-ISelect<T1,T2,T3,T4,T5,T6>-ToOneAsync>d__73`1")]
[DebuggerStepThroughAttribute]
private sealed virtual override Task`1<TReturn> FreeSql.ISelect<T1,T2,T3,T4,T5,T6>.ToOneAsync(Expression`1<Func`2<HzyTuple`6<T1, T2, T3, T4, T5, T6>, TReturn>> select, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("FreeSql.Internal.CommonProvider.Select6Provider`6/<FreeSql-ISelect<T1,T2,T3,T4,T5,T6>-FirstAsync>d__74`1")]
[DebuggerStepThroughAttribute]
private sealed virtual override Task`1<TReturn> FreeSql.ISelect<T1,T2,T3,T4,T5,T6>.FirstAsync(Expression`1<Func`2<HzyTuple`6<T1, T2, T3, T4, T5, T6>, TReturn>> select, CancellationToken cancellationToken);
}
public abstract class FreeSql.Internal.CommonProvider.Select7Provider`7 : Select0Provider`2<ISelect`7<T1, T2, T3, T4, T5, T6, T7>, T1> {
    public Select7Provider`7(IFreeSql orm, CommonUtils commonUtils, CommonExpression commonExpression, object dywhere);
    private sealed virtual override ISelect`7<T1, T2, T3, T4, T5, T6, T7> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7>.WithSql(string sqlT1, string sqlT2, string sqlT3, string sqlT4, string sqlT5, string sqlT6, string sqlT7, object parms);
    private sealed virtual override ISelect`7<T1, T2, T3, T4, T5, T6, T7> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7>.As(string aliasT1, string aliasT2, string aliasT3, string aliasT4, string aliasT5, string aliasT6, string aliasT7);
    private sealed virtual override ISelect`1<TDto> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7>.WithTempQuery(Expression`1<Func`8<T1, T2, T3, T4, T5, T6, T7, TDto>> selector);
    private sealed virtual override double FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7>.Avg(Expression`1<Func`8<T1, T2, T3, T4, T5, T6, T7, TMember>> column);
    private sealed virtual override ISelectGrouping`2<TKey, NativeTuple`7<T1, T2, T3, T4, T5, T6, T7>> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7>.GroupBy(Expression`1<Func`8<T1, T2, T3, T4, T5, T6, T7, TKey>> exp);
    private sealed virtual override TMember FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7>.Max(Expression`1<Func`8<T1, T2, T3, T4, T5, T6, T7, TMember>> column);
    private sealed virtual override TMember FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7>.Min(Expression`1<Func`8<T1, T2, T3, T4, T5, T6, T7, TMember>> column);
    private sealed virtual override ISelect`7<T1, T2, T3, T4, T5, T6, T7> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7>.OrderBy(Expression`1<Func`8<T1, T2, T3, T4, T5, T6, T7, TMember>> column);
    private sealed virtual override ISelect`7<T1, T2, T3, T4, T5, T6, T7> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7>.OrderByDescending(Expression`1<Func`8<T1, T2, T3, T4, T5, T6, T7, TMember>> column);
    private sealed virtual override ISelect`7<T1, T2, T3, T4, T5, T6, T7> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7>.OrderByIf(bool condition, Expression`1<Func`8<T1, T2, T3, T4, T5, T6, T7, TMember>> column, bool descending);
    private sealed virtual override decimal FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7>.Sum(Expression`1<Func`8<T1, T2, T3, T4, T5, T6, T7, TMember>> column);
    private sealed virtual override TReturn FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7>.ToAggregate(Expression`1<Func`8<ISelectGroupingAggregate`1<T1>, ISelectGroupingAggregate`1<T2>, ISelectGroupingAggregate`1<T3>, ISelectGroupingAggregate`1<T4>, ISelectGroupingAggregate`1<T5>, ISelectGroupingAggregate`1<T6>, ISelectGroupingAggregate`1<T7>, TReturn>> select);
    private sealed virtual override ISelect`7<T1, T2, T3, T4, T5, T6, T7> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7>.Aggregate(Expression`1<Func`8<ISelectGroupingAggregate`1<T1>, ISelectGroupingAggregate`1<T2>, ISelectGroupingAggregate`1<T3>, ISelectGroupingAggregate`1<T4>, ISelectGroupingAggregate`1<T5>, ISelectGroupingAggregate`1<T6>, ISelectGroupingAggregate`1<T7>, TReturn>> select, TReturn& result);
    private sealed virtual override List`1<TReturn> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7>.ToList(Expression`1<Func`8<T1, T2, T3, T4, T5, T6, T7, TReturn>> select);
    private sealed virtual override List`1<TDto> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7>.ToList();
    private Expression`1<Func`8<T1, T2, T3, T4, T5, T6, T7, TDto>> GetToListDtoSelector();
    public sealed virtual void ToChunk(Expression`1<Func`8<T1, T2, T3, T4, T5, T6, T7, TReturn>> select, int size, Action`1<FetchCallbackArgs`1<List`1<TReturn>>> done);
    private sealed virtual override DataTable FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7>.ToDataTable(Expression`1<Func`8<T1, T2, T3, T4, T5, T6, T7, TReturn>> select);
    private sealed virtual override int FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7>.InsertInto(string tableName, Expression`1<Func`8<T1, T2, T3, T4, T5, T6, T7, TTargetEntity>> select);
    private sealed virtual override string FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7>.ToSql(Expression`1<Func`8<T1, T2, T3, T4, T5, T6, T7, TReturn>> select, FieldAliasOptions fieldAlias);
    private sealed virtual override ISelect`7<T1, T2, T3, T4, T5, T6, T7> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7>.LeftJoin(Expression`1<Func`8<T1, T2, T3, T4, T5, T6, T7, bool>> exp);
    private sealed virtual override ISelect`7<T1, T2, T3, T4, T5, T6, T7> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7>.InnerJoin(Expression`1<Func`8<T1, T2, T3, T4, T5, T6, T7, bool>> exp);
    private sealed virtual override ISelect`7<T1, T2, T3, T4, T5, T6, T7> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7>.RightJoin(Expression`1<Func`8<T1, T2, T3, T4, T5, T6, T7, bool>> exp);
    private sealed virtual override ISelect`7<T1, T2, T3, T4, T5, T6, T7> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7>.Where(Expression`1<Func`8<T1, T2, T3, T4, T5, T6, T7, bool>> exp);
    private sealed virtual override ISelect`7<T1, T2, T3, T4, T5, T6, T7> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7>.WhereIf(bool condition, Expression`1<Func`8<T1, T2, T3, T4, T5, T6, T7, bool>> exp);
    private sealed virtual override bool FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7>.Any(Expression`1<Func`8<T1, T2, T3, T4, T5, T6, T7, bool>> exp);
    private sealed virtual override TReturn FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7>.ToOne(Expression`1<Func`8<T1, T2, T3, T4, T5, T6, T7, TReturn>> select);
    private sealed virtual override TReturn FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7>.First(Expression`1<Func`8<T1, T2, T3, T4, T5, T6, T7, TReturn>> select);
    private sealed virtual override TDto FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7>.First();
    private sealed virtual override ISelect`1<TDto> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7>.WithTempQuery(Expression`1<Func`2<HzyTuple`7<T1, T2, T3, T4, T5, T6, T7>, TDto>> selector);
    private sealed virtual override double FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7>.Avg(Expression`1<Func`2<HzyTuple`7<T1, T2, T3, T4, T5, T6, T7>, TMember>> column);
    private sealed virtual override ISelectGrouping`2<TKey, NativeTuple`7<T1, T2, T3, T4, T5, T6, T7>> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7>.GroupBy(Expression`1<Func`2<HzyTuple`7<T1, T2, T3, T4, T5, T6, T7>, TKey>> exp);
    private sealed virtual override TMember FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7>.Max(Expression`1<Func`2<HzyTuple`7<T1, T2, T3, T4, T5, T6, T7>, TMember>> column);
    private sealed virtual override TMember FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7>.Min(Expression`1<Func`2<HzyTuple`7<T1, T2, T3, T4, T5, T6, T7>, TMember>> column);
    private sealed virtual override ISelect`7<T1, T2, T3, T4, T5, T6, T7> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7>.OrderBy(Expression`1<Func`2<HzyTuple`7<T1, T2, T3, T4, T5, T6, T7>, TMember>> column);
    private sealed virtual override ISelect`7<T1, T2, T3, T4, T5, T6, T7> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7>.OrderByDescending(Expression`1<Func`2<HzyTuple`7<T1, T2, T3, T4, T5, T6, T7>, TMember>> column);
    private sealed virtual override ISelect`7<T1, T2, T3, T4, T5, T6, T7> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7>.OrderByIf(bool condition, Expression`1<Func`2<HzyTuple`7<T1, T2, T3, T4, T5, T6, T7>, TMember>> column, bool descending);
    private sealed virtual override decimal FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7>.Sum(Expression`1<Func`2<HzyTuple`7<T1, T2, T3, T4, T5, T6, T7>, TMember>> column);
    private sealed virtual override List`1<TReturn> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7>.ToList(Expression`1<Func`2<HzyTuple`7<T1, T2, T3, T4, T5, T6, T7>, TReturn>> select);
    public sealed virtual void ToChunk(Expression`1<Func`2<HzyTuple`7<T1, T2, T3, T4, T5, T6, T7>, TReturn>> select, int size, Action`1<FetchCallbackArgs`1<List`1<TReturn>>> done);
    private sealed virtual override DataTable FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7>.ToDataTable(Expression`1<Func`2<HzyTuple`7<T1, T2, T3, T4, T5, T6, T7>, TReturn>> select);
    private sealed virtual override int FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7>.InsertInto(string tableName, Expression`1<Func`2<HzyTuple`7<T1, T2, T3, T4, T5, T6, T7>, TTargetEntity>> select);
    private sealed virtual override string FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7>.ToSql(Expression`1<Func`2<HzyTuple`7<T1, T2, T3, T4, T5, T6, T7>, TReturn>> select, FieldAliasOptions fieldAlias);
    private sealed virtual override ISelect`7<T1, T2, T3, T4, T5, T6, T7> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7>.LeftJoin(Expression`1<Func`2<HzyTuple`7<T1, T2, T3, T4, T5, T6, T7>, bool>> exp);
    private sealed virtual override ISelect`7<T1, T2, T3, T4, T5, T6, T7> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7>.InnerJoin(Expression`1<Func`2<HzyTuple`7<T1, T2, T3, T4, T5, T6, T7>, bool>> exp);
    private sealed virtual override ISelect`7<T1, T2, T3, T4, T5, T6, T7> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7>.RightJoin(Expression`1<Func`2<HzyTuple`7<T1, T2, T3, T4, T5, T6, T7>, bool>> exp);
    private sealed virtual override ISelect`7<T1, T2, T3, T4, T5, T6, T7> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7>.Where(Expression`1<Func`2<HzyTuple`7<T1, T2, T3, T4, T5, T6, T7>, bool>> exp);
    private sealed virtual override ISelect`7<T1, T2, T3, T4, T5, T6, T7> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7>.WhereIf(bool condition, Expression`1<Func`2<HzyTuple`7<T1, T2, T3, T4, T5, T6, T7>, bool>> exp);
    private sealed virtual override bool FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7>.Any(Expression`1<Func`2<HzyTuple`7<T1, T2, T3, T4, T5, T6, T7>, bool>> exp);
    private sealed virtual override TReturn FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7>.ToOne(Expression`1<Func`2<HzyTuple`7<T1, T2, T3, T4, T5, T6, T7>, TReturn>> select);
    private sealed virtual override TReturn FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7>.First(Expression`1<Func`2<HzyTuple`7<T1, T2, T3, T4, T5, T6, T7>, TReturn>> select);
    private sealed virtual override Task`1<double> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7>.AvgAsync(Expression`1<Func`8<T1, T2, T3, T4, T5, T6, T7, TMember>> column, CancellationToken cancellationToken);
    private sealed virtual override Task`1<TMember> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7>.MaxAsync(Expression`1<Func`8<T1, T2, T3, T4, T5, T6, T7, TMember>> column, CancellationToken cancellationToken);
    private sealed virtual override Task`1<TMember> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7>.MinAsync(Expression`1<Func`8<T1, T2, T3, T4, T5, T6, T7, TMember>> column, CancellationToken cancellationToken);
    private sealed virtual override Task`1<decimal> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7>.SumAsync(Expression`1<Func`8<T1, T2, T3, T4, T5, T6, T7, TMember>> column, CancellationToken cancellationToken);
    private sealed virtual override Task`1<TReturn> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7>.ToAggregateAsync(Expression`1<Func`8<ISelectGroupingAggregate`1<T1>, ISelectGroupingAggregate`1<T2>, ISelectGroupingAggregate`1<T3>, ISelectGroupingAggregate`1<T4>, ISelectGroupingAggregate`1<T5>, ISelectGroupingAggregate`1<T6>, ISelectGroupingAggregate`1<T7>, TReturn>> select, CancellationToken cancellationToken);
    private sealed virtual override Task`1<List`1<TReturn>> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7>.ToListAsync(Expression`1<Func`8<T1, T2, T3, T4, T5, T6, T7, TReturn>> select, CancellationToken cancellationToken);
    private sealed virtual override Task`1<List`1<TDto>> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7>.ToListAsync(CancellationToken cancellationToken);
    private sealed virtual override Task`1<DataTable> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7>.ToDataTableAsync(Expression`1<Func`8<T1, T2, T3, T4, T5, T6, T7, TReturn>> select, CancellationToken cancellationToken);
    private sealed virtual override Task`1<int> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7>.InsertIntoAsync(string tableName, Expression`1<Func`8<T1, T2, T3, T4, T5, T6, T7, TTargetEntity>> select, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("FreeSql.Internal.CommonProvider.Select7Provider`7/<FreeSql-ISelect<T1,T2,T3,T4,T5,T6,T7>-AnyAsync>d__61")]
[DebuggerStepThroughAttribute]
private sealed virtual override Task`1<bool> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7>.AnyAsync(Expression`1<Func`8<T1, T2, T3, T4, T5, T6, T7, bool>> exp, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("FreeSql.Internal.CommonProvider.Select7Provider`7/<FreeSql-ISelect<T1,T2,T3,T4,T5,T6,T7>-ToOneAsync>d__62`1")]
[DebuggerStepThroughAttribute]
private sealed virtual override Task`1<TReturn> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7>.ToOneAsync(Expression`1<Func`8<T1, T2, T3, T4, T5, T6, T7, TReturn>> select, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("FreeSql.Internal.CommonProvider.Select7Provider`7/<FreeSql-ISelect<T1,T2,T3,T4,T5,T6,T7>-FirstAsync>d__63`1")]
[DebuggerStepThroughAttribute]
private sealed virtual override Task`1<TReturn> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7>.FirstAsync(Expression`1<Func`8<T1, T2, T3, T4, T5, T6, T7, TReturn>> select, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("FreeSql.Internal.CommonProvider.Select7Provider`7/<FreeSql-ISelect<T1,T2,T3,T4,T5,T6,T7>-FirstAsync>d__64`1")]
[DebuggerStepThroughAttribute]
private sealed virtual override Task`1<TDto> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7>.FirstAsync(CancellationToken cancellationToken);
    private sealed virtual override Task`1<double> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7>.AvgAsync(Expression`1<Func`2<HzyTuple`7<T1, T2, T3, T4, T5, T6, T7>, TMember>> column, CancellationToken cancellationToken);
    private sealed virtual override Task`1<TMember> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7>.MaxAsync(Expression`1<Func`2<HzyTuple`7<T1, T2, T3, T4, T5, T6, T7>, TMember>> column, CancellationToken cancellationToken);
    private sealed virtual override Task`1<TMember> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7>.MinAsync(Expression`1<Func`2<HzyTuple`7<T1, T2, T3, T4, T5, T6, T7>, TMember>> column, CancellationToken cancellationToken);
    private sealed virtual override Task`1<decimal> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7>.SumAsync(Expression`1<Func`2<HzyTuple`7<T1, T2, T3, T4, T5, T6, T7>, TMember>> column, CancellationToken cancellationToken);
    private sealed virtual override Task`1<List`1<TReturn>> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7>.ToListAsync(Expression`1<Func`2<HzyTuple`7<T1, T2, T3, T4, T5, T6, T7>, TReturn>> select, CancellationToken cancellationToken);
    private sealed virtual override Task`1<DataTable> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7>.ToDataTableAsync(Expression`1<Func`2<HzyTuple`7<T1, T2, T3, T4, T5, T6, T7>, TReturn>> select, CancellationToken cancellationToken);
    private sealed virtual override Task`1<int> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7>.InsertIntoAsync(string tableName, Expression`1<Func`2<HzyTuple`7<T1, T2, T3, T4, T5, T6, T7>, TTargetEntity>> select, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("FreeSql.Internal.CommonProvider.Select7Provider`7/<FreeSql-ISelect<T1,T2,T3,T4,T5,T6,T7>-AnyAsync>d__72")]
[DebuggerStepThroughAttribute]
private sealed virtual override Task`1<bool> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7>.AnyAsync(Expression`1<Func`2<HzyTuple`7<T1, T2, T3, T4, T5, T6, T7>, bool>> exp, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("FreeSql.Internal.CommonProvider.Select7Provider`7/<FreeSql-ISelect<T1,T2,T3,T4,T5,T6,T7>-ToOneAsync>d__73`1")]
[DebuggerStepThroughAttribute]
private sealed virtual override Task`1<TReturn> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7>.ToOneAsync(Expression`1<Func`2<HzyTuple`7<T1, T2, T3, T4, T5, T6, T7>, TReturn>> select, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("FreeSql.Internal.CommonProvider.Select7Provider`7/<FreeSql-ISelect<T1,T2,T3,T4,T5,T6,T7>-FirstAsync>d__74`1")]
[DebuggerStepThroughAttribute]
private sealed virtual override Task`1<TReturn> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7>.FirstAsync(Expression`1<Func`2<HzyTuple`7<T1, T2, T3, T4, T5, T6, T7>, TReturn>> select, CancellationToken cancellationToken);
}
public abstract class FreeSql.Internal.CommonProvider.Select8Provider`8 : Select0Provider`2<ISelect`8<T1, T2, T3, T4, T5, T6, T7, T8>, T1> {
    public Select8Provider`8(IFreeSql orm, CommonUtils commonUtils, CommonExpression commonExpression, object dywhere);
    private sealed virtual override ISelect`8<T1, T2, T3, T4, T5, T6, T7, T8> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8>.WithSql(string sqlT1, string sqlT2, string sqlT3, string sqlT4, string sqlT5, string sqlT6, string sqlT7, string sqlT8, object parms);
    private sealed virtual override ISelect`8<T1, T2, T3, T4, T5, T6, T7, T8> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8>.As(string aliasT1, string aliasT2, string aliasT3, string aliasT4, string aliasT5, string aliasT6, string aliasT7, string aliasT8);
    private sealed virtual override ISelect`1<TDto> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8>.WithTempQuery(Expression`1<Func`9<T1, T2, T3, T4, T5, T6, T7, T8, TDto>> selector);
    private sealed virtual override double FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8>.Avg(Expression`1<Func`9<T1, T2, T3, T4, T5, T6, T7, T8, TMember>> column);
    private sealed virtual override ISelectGrouping`2<TKey, NativeTuple`8<T1, T2, T3, T4, T5, T6, T7, T8>> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8>.GroupBy(Expression`1<Func`9<T1, T2, T3, T4, T5, T6, T7, T8, TKey>> exp);
    private sealed virtual override TMember FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8>.Max(Expression`1<Func`9<T1, T2, T3, T4, T5, T6, T7, T8, TMember>> column);
    private sealed virtual override TMember FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8>.Min(Expression`1<Func`9<T1, T2, T3, T4, T5, T6, T7, T8, TMember>> column);
    private sealed virtual override ISelect`8<T1, T2, T3, T4, T5, T6, T7, T8> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8>.OrderBy(Expression`1<Func`9<T1, T2, T3, T4, T5, T6, T7, T8, TMember>> column);
    private sealed virtual override ISelect`8<T1, T2, T3, T4, T5, T6, T7, T8> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8>.OrderByDescending(Expression`1<Func`9<T1, T2, T3, T4, T5, T6, T7, T8, TMember>> column);
    private sealed virtual override ISelect`8<T1, T2, T3, T4, T5, T6, T7, T8> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8>.OrderByIf(bool condition, Expression`1<Func`9<T1, T2, T3, T4, T5, T6, T7, T8, TMember>> column, bool descending);
    private sealed virtual override decimal FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8>.Sum(Expression`1<Func`9<T1, T2, T3, T4, T5, T6, T7, T8, TMember>> column);
    private sealed virtual override TReturn FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8>.ToAggregate(Expression`1<Func`9<ISelectGroupingAggregate`1<T1>, ISelectGroupingAggregate`1<T2>, ISelectGroupingAggregate`1<T3>, ISelectGroupingAggregate`1<T4>, ISelectGroupingAggregate`1<T5>, ISelectGroupingAggregate`1<T6>, ISelectGroupingAggregate`1<T7>, ISelectGroupingAggregate`1<T8>, TReturn>> select);
    private sealed virtual override ISelect`8<T1, T2, T3, T4, T5, T6, T7, T8> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8>.Aggregate(Expression`1<Func`9<ISelectGroupingAggregate`1<T1>, ISelectGroupingAggregate`1<T2>, ISelectGroupingAggregate`1<T3>, ISelectGroupingAggregate`1<T4>, ISelectGroupingAggregate`1<T5>, ISelectGroupingAggregate`1<T6>, ISelectGroupingAggregate`1<T7>, ISelectGroupingAggregate`1<T8>, TReturn>> select, TReturn& result);
    private sealed virtual override List`1<TReturn> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8>.ToList(Expression`1<Func`9<T1, T2, T3, T4, T5, T6, T7, T8, TReturn>> select);
    private sealed virtual override List`1<TDto> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8>.ToList();
    private Expression`1<Func`9<T1, T2, T3, T4, T5, T6, T7, T8, TDto>> GetToListDtoSelector();
    public sealed virtual void ToChunk(Expression`1<Func`9<T1, T2, T3, T4, T5, T6, T7, T8, TReturn>> select, int size, Action`1<FetchCallbackArgs`1<List`1<TReturn>>> done);
    private sealed virtual override DataTable FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8>.ToDataTable(Expression`1<Func`9<T1, T2, T3, T4, T5, T6, T7, T8, TReturn>> select);
    private sealed virtual override int FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8>.InsertInto(string tableName, Expression`1<Func`9<T1, T2, T3, T4, T5, T6, T7, T8, TTargetEntity>> select);
    private sealed virtual override string FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8>.ToSql(Expression`1<Func`9<T1, T2, T3, T4, T5, T6, T7, T8, TReturn>> select, FieldAliasOptions fieldAlias);
    private sealed virtual override ISelect`8<T1, T2, T3, T4, T5, T6, T7, T8> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8>.LeftJoin(Expression`1<Func`9<T1, T2, T3, T4, T5, T6, T7, T8, bool>> exp);
    private sealed virtual override ISelect`8<T1, T2, T3, T4, T5, T6, T7, T8> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8>.InnerJoin(Expression`1<Func`9<T1, T2, T3, T4, T5, T6, T7, T8, bool>> exp);
    private sealed virtual override ISelect`8<T1, T2, T3, T4, T5, T6, T7, T8> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8>.RightJoin(Expression`1<Func`9<T1, T2, T3, T4, T5, T6, T7, T8, bool>> exp);
    private sealed virtual override ISelect`8<T1, T2, T3, T4, T5, T6, T7, T8> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8>.Where(Expression`1<Func`9<T1, T2, T3, T4, T5, T6, T7, T8, bool>> exp);
    private sealed virtual override ISelect`8<T1, T2, T3, T4, T5, T6, T7, T8> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8>.WhereIf(bool condition, Expression`1<Func`9<T1, T2, T3, T4, T5, T6, T7, T8, bool>> exp);
    private sealed virtual override bool FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8>.Any(Expression`1<Func`9<T1, T2, T3, T4, T5, T6, T7, T8, bool>> exp);
    private sealed virtual override TReturn FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8>.ToOne(Expression`1<Func`9<T1, T2, T3, T4, T5, T6, T7, T8, TReturn>> select);
    private sealed virtual override TReturn FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8>.First(Expression`1<Func`9<T1, T2, T3, T4, T5, T6, T7, T8, TReturn>> select);
    private sealed virtual override TDto FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8>.First();
    private sealed virtual override ISelect`1<TDto> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8>.WithTempQuery(Expression`1<Func`2<HzyTuple`8<T1, T2, T3, T4, T5, T6, T7, T8>, TDto>> selector);
    private sealed virtual override double FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8>.Avg(Expression`1<Func`2<HzyTuple`8<T1, T2, T3, T4, T5, T6, T7, T8>, TMember>> column);
    private sealed virtual override ISelectGrouping`2<TKey, NativeTuple`8<T1, T2, T3, T4, T5, T6, T7, T8>> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8>.GroupBy(Expression`1<Func`2<HzyTuple`8<T1, T2, T3, T4, T5, T6, T7, T8>, TKey>> exp);
    private sealed virtual override TMember FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8>.Max(Expression`1<Func`2<HzyTuple`8<T1, T2, T3, T4, T5, T6, T7, T8>, TMember>> column);
    private sealed virtual override TMember FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8>.Min(Expression`1<Func`2<HzyTuple`8<T1, T2, T3, T4, T5, T6, T7, T8>, TMember>> column);
    private sealed virtual override ISelect`8<T1, T2, T3, T4, T5, T6, T7, T8> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8>.OrderBy(Expression`1<Func`2<HzyTuple`8<T1, T2, T3, T4, T5, T6, T7, T8>, TMember>> column);
    private sealed virtual override ISelect`8<T1, T2, T3, T4, T5, T6, T7, T8> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8>.OrderByDescending(Expression`1<Func`2<HzyTuple`8<T1, T2, T3, T4, T5, T6, T7, T8>, TMember>> column);
    private sealed virtual override ISelect`8<T1, T2, T3, T4, T5, T6, T7, T8> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8>.OrderByIf(bool condition, Expression`1<Func`2<HzyTuple`8<T1, T2, T3, T4, T5, T6, T7, T8>, TMember>> column, bool descending);
    private sealed virtual override decimal FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8>.Sum(Expression`1<Func`2<HzyTuple`8<T1, T2, T3, T4, T5, T6, T7, T8>, TMember>> column);
    private sealed virtual override List`1<TReturn> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8>.ToList(Expression`1<Func`2<HzyTuple`8<T1, T2, T3, T4, T5, T6, T7, T8>, TReturn>> select);
    public sealed virtual void ToChunk(Expression`1<Func`2<HzyTuple`8<T1, T2, T3, T4, T5, T6, T7, T8>, TReturn>> select, int size, Action`1<FetchCallbackArgs`1<List`1<TReturn>>> done);
    private sealed virtual override DataTable FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8>.ToDataTable(Expression`1<Func`2<HzyTuple`8<T1, T2, T3, T4, T5, T6, T7, T8>, TReturn>> select);
    private sealed virtual override int FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8>.InsertInto(string tableName, Expression`1<Func`2<HzyTuple`8<T1, T2, T3, T4, T5, T6, T7, T8>, TTargetEntity>> select);
    private sealed virtual override string FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8>.ToSql(Expression`1<Func`2<HzyTuple`8<T1, T2, T3, T4, T5, T6, T7, T8>, TReturn>> select, FieldAliasOptions fieldAlias);
    private sealed virtual override ISelect`8<T1, T2, T3, T4, T5, T6, T7, T8> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8>.LeftJoin(Expression`1<Func`2<HzyTuple`8<T1, T2, T3, T4, T5, T6, T7, T8>, bool>> exp);
    private sealed virtual override ISelect`8<T1, T2, T3, T4, T5, T6, T7, T8> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8>.InnerJoin(Expression`1<Func`2<HzyTuple`8<T1, T2, T3, T4, T5, T6, T7, T8>, bool>> exp);
    private sealed virtual override ISelect`8<T1, T2, T3, T4, T5, T6, T7, T8> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8>.RightJoin(Expression`1<Func`2<HzyTuple`8<T1, T2, T3, T4, T5, T6, T7, T8>, bool>> exp);
    private sealed virtual override ISelect`8<T1, T2, T3, T4, T5, T6, T7, T8> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8>.Where(Expression`1<Func`2<HzyTuple`8<T1, T2, T3, T4, T5, T6, T7, T8>, bool>> exp);
    private sealed virtual override ISelect`8<T1, T2, T3, T4, T5, T6, T7, T8> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8>.WhereIf(bool condition, Expression`1<Func`2<HzyTuple`8<T1, T2, T3, T4, T5, T6, T7, T8>, bool>> exp);
    private sealed virtual override bool FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8>.Any(Expression`1<Func`2<HzyTuple`8<T1, T2, T3, T4, T5, T6, T7, T8>, bool>> exp);
    private sealed virtual override TReturn FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8>.ToOne(Expression`1<Func`2<HzyTuple`8<T1, T2, T3, T4, T5, T6, T7, T8>, TReturn>> select);
    private sealed virtual override TReturn FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8>.First(Expression`1<Func`2<HzyTuple`8<T1, T2, T3, T4, T5, T6, T7, T8>, TReturn>> select);
    private sealed virtual override Task`1<double> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8>.AvgAsync(Expression`1<Func`9<T1, T2, T3, T4, T5, T6, T7, T8, TMember>> column, CancellationToken cancellationToken);
    private sealed virtual override Task`1<TMember> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8>.MaxAsync(Expression`1<Func`9<T1, T2, T3, T4, T5, T6, T7, T8, TMember>> column, CancellationToken cancellationToken);
    private sealed virtual override Task`1<TMember> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8>.MinAsync(Expression`1<Func`9<T1, T2, T3, T4, T5, T6, T7, T8, TMember>> column, CancellationToken cancellationToken);
    private sealed virtual override Task`1<decimal> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8>.SumAsync(Expression`1<Func`9<T1, T2, T3, T4, T5, T6, T7, T8, TMember>> column, CancellationToken cancellationToken);
    private sealed virtual override Task`1<TReturn> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8>.ToAggregateAsync(Expression`1<Func`9<ISelectGroupingAggregate`1<T1>, ISelectGroupingAggregate`1<T2>, ISelectGroupingAggregate`1<T3>, ISelectGroupingAggregate`1<T4>, ISelectGroupingAggregate`1<T5>, ISelectGroupingAggregate`1<T6>, ISelectGroupingAggregate`1<T7>, ISelectGroupingAggregate`1<T8>, TReturn>> select, CancellationToken cancellationToken);
    private sealed virtual override Task`1<List`1<TReturn>> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8>.ToListAsync(Expression`1<Func`9<T1, T2, T3, T4, T5, T6, T7, T8, TReturn>> select, CancellationToken cancellationToken);
    private sealed virtual override Task`1<List`1<TDto>> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8>.ToListAsync(CancellationToken cancellationToken);
    private sealed virtual override Task`1<DataTable> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8>.ToDataTableAsync(Expression`1<Func`9<T1, T2, T3, T4, T5, T6, T7, T8, TReturn>> select, CancellationToken cancellationToken);
    private sealed virtual override Task`1<int> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8>.InsertIntoAsync(string tableName, Expression`1<Func`9<T1, T2, T3, T4, T5, T6, T7, T8, TTargetEntity>> select, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("FreeSql.Internal.CommonProvider.Select8Provider`8/<FreeSql-ISelect<T1,T2,T3,T4,T5,T6,T7,T8>-AnyAsync>d__61")]
[DebuggerStepThroughAttribute]
private sealed virtual override Task`1<bool> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8>.AnyAsync(Expression`1<Func`9<T1, T2, T3, T4, T5, T6, T7, T8, bool>> exp, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("FreeSql.Internal.CommonProvider.Select8Provider`8/<FreeSql-ISelect<T1,T2,T3,T4,T5,T6,T7,T8>-ToOneAsync>d__62`1")]
[DebuggerStepThroughAttribute]
private sealed virtual override Task`1<TReturn> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8>.ToOneAsync(Expression`1<Func`9<T1, T2, T3, T4, T5, T6, T7, T8, TReturn>> select, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("FreeSql.Internal.CommonProvider.Select8Provider`8/<FreeSql-ISelect<T1,T2,T3,T4,T5,T6,T7,T8>-FirstAsync>d__63`1")]
[DebuggerStepThroughAttribute]
private sealed virtual override Task`1<TReturn> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8>.FirstAsync(Expression`1<Func`9<T1, T2, T3, T4, T5, T6, T7, T8, TReturn>> select, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("FreeSql.Internal.CommonProvider.Select8Provider`8/<FreeSql-ISelect<T1,T2,T3,T4,T5,T6,T7,T8>-FirstAsync>d__64`1")]
[DebuggerStepThroughAttribute]
private sealed virtual override Task`1<TDto> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8>.FirstAsync(CancellationToken cancellationToken);
    private sealed virtual override Task`1<double> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8>.AvgAsync(Expression`1<Func`2<HzyTuple`8<T1, T2, T3, T4, T5, T6, T7, T8>, TMember>> column, CancellationToken cancellationToken);
    private sealed virtual override Task`1<TMember> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8>.MaxAsync(Expression`1<Func`2<HzyTuple`8<T1, T2, T3, T4, T5, T6, T7, T8>, TMember>> column, CancellationToken cancellationToken);
    private sealed virtual override Task`1<TMember> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8>.MinAsync(Expression`1<Func`2<HzyTuple`8<T1, T2, T3, T4, T5, T6, T7, T8>, TMember>> column, CancellationToken cancellationToken);
    private sealed virtual override Task`1<decimal> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8>.SumAsync(Expression`1<Func`2<HzyTuple`8<T1, T2, T3, T4, T5, T6, T7, T8>, TMember>> column, CancellationToken cancellationToken);
    private sealed virtual override Task`1<List`1<TReturn>> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8>.ToListAsync(Expression`1<Func`2<HzyTuple`8<T1, T2, T3, T4, T5, T6, T7, T8>, TReturn>> select, CancellationToken cancellationToken);
    private sealed virtual override Task`1<DataTable> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8>.ToDataTableAsync(Expression`1<Func`2<HzyTuple`8<T1, T2, T3, T4, T5, T6, T7, T8>, TReturn>> select, CancellationToken cancellationToken);
    private sealed virtual override Task`1<int> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8>.InsertIntoAsync(string tableName, Expression`1<Func`2<HzyTuple`8<T1, T2, T3, T4, T5, T6, T7, T8>, TTargetEntity>> select, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("FreeSql.Internal.CommonProvider.Select8Provider`8/<FreeSql-ISelect<T1,T2,T3,T4,T5,T6,T7,T8>-AnyAsync>d__72")]
[DebuggerStepThroughAttribute]
private sealed virtual override Task`1<bool> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8>.AnyAsync(Expression`1<Func`2<HzyTuple`8<T1, T2, T3, T4, T5, T6, T7, T8>, bool>> exp, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("FreeSql.Internal.CommonProvider.Select8Provider`8/<FreeSql-ISelect<T1,T2,T3,T4,T5,T6,T7,T8>-ToOneAsync>d__73`1")]
[DebuggerStepThroughAttribute]
private sealed virtual override Task`1<TReturn> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8>.ToOneAsync(Expression`1<Func`2<HzyTuple`8<T1, T2, T3, T4, T5, T6, T7, T8>, TReturn>> select, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("FreeSql.Internal.CommonProvider.Select8Provider`8/<FreeSql-ISelect<T1,T2,T3,T4,T5,T6,T7,T8>-FirstAsync>d__74`1")]
[DebuggerStepThroughAttribute]
private sealed virtual override Task`1<TReturn> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8>.FirstAsync(Expression`1<Func`2<HzyTuple`8<T1, T2, T3, T4, T5, T6, T7, T8>, TReturn>> select, CancellationToken cancellationToken);
}
public abstract class FreeSql.Internal.CommonProvider.Select9Provider`9 : Select0Provider`2<ISelect`9<T1, T2, T3, T4, T5, T6, T7, T8, T9>, T1> {
    public Select9Provider`9(IFreeSql orm, CommonUtils commonUtils, CommonExpression commonExpression, object dywhere);
    private sealed virtual override ISelect`9<T1, T2, T3, T4, T5, T6, T7, T8, T9> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9>.WithSql(string sqlT1, string sqlT2, string sqlT3, string sqlT4, string sqlT5, string sqlT6, string sqlT7, string sqlT8, string sqlT9, object parms);
    private sealed virtual override ISelect`9<T1, T2, T3, T4, T5, T6, T7, T8, T9> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9>.As(string aliasT1, string aliasT2, string aliasT3, string aliasT4, string aliasT5, string aliasT6, string aliasT7, string aliasT8, string aliasT9);
    private sealed virtual override ISelect`1<TDto> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9>.WithTempQuery(Expression`1<Func`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, TDto>> selector);
    private sealed virtual override double FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9>.Avg(Expression`1<Func`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, TMember>> column);
    private sealed virtual override ISelectGrouping`2<TKey, NativeTuple`9<T1, T2, T3, T4, T5, T6, T7, T8, T9>> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9>.GroupBy(Expression`1<Func`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, TKey>> exp);
    private sealed virtual override TMember FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9>.Max(Expression`1<Func`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, TMember>> column);
    private sealed virtual override TMember FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9>.Min(Expression`1<Func`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, TMember>> column);
    private sealed virtual override ISelect`9<T1, T2, T3, T4, T5, T6, T7, T8, T9> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9>.OrderBy(Expression`1<Func`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, TMember>> column);
    private sealed virtual override ISelect`9<T1, T2, T3, T4, T5, T6, T7, T8, T9> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9>.OrderByDescending(Expression`1<Func`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, TMember>> column);
    private sealed virtual override ISelect`9<T1, T2, T3, T4, T5, T6, T7, T8, T9> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9>.OrderByIf(bool condition, Expression`1<Func`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, TMember>> column, bool descending);
    private sealed virtual override decimal FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9>.Sum(Expression`1<Func`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, TMember>> column);
    private sealed virtual override TReturn FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9>.ToAggregate(Expression`1<Func`10<ISelectGroupingAggregate`1<T1>, ISelectGroupingAggregate`1<T2>, ISelectGroupingAggregate`1<T3>, ISelectGroupingAggregate`1<T4>, ISelectGroupingAggregate`1<T5>, ISelectGroupingAggregate`1<T6>, ISelectGroupingAggregate`1<T7>, ISelectGroupingAggregate`1<T8>, ISelectGroupingAggregate`1<T9>, TReturn>> select);
    private sealed virtual override ISelect`9<T1, T2, T3, T4, T5, T6, T7, T8, T9> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9>.Aggregate(Expression`1<Func`10<ISelectGroupingAggregate`1<T1>, ISelectGroupingAggregate`1<T2>, ISelectGroupingAggregate`1<T3>, ISelectGroupingAggregate`1<T4>, ISelectGroupingAggregate`1<T5>, ISelectGroupingAggregate`1<T6>, ISelectGroupingAggregate`1<T7>, ISelectGroupingAggregate`1<T8>, ISelectGroupingAggregate`1<T9>, TReturn>> select, TReturn& result);
    private sealed virtual override List`1<TReturn> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9>.ToList(Expression`1<Func`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, TReturn>> select);
    private sealed virtual override List`1<TDto> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9>.ToList();
    private Expression`1<Func`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, TDto>> GetToListDtoSelector();
    public sealed virtual void ToChunk(Expression`1<Func`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, TReturn>> select, int size, Action`1<FetchCallbackArgs`1<List`1<TReturn>>> done);
    private sealed virtual override DataTable FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9>.ToDataTable(Expression`1<Func`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, TReturn>> select);
    private sealed virtual override int FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9>.InsertInto(string tableName, Expression`1<Func`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, TTargetEntity>> select);
    private sealed virtual override string FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9>.ToSql(Expression`1<Func`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, TReturn>> select, FieldAliasOptions fieldAlias);
    private sealed virtual override ISelect`9<T1, T2, T3, T4, T5, T6, T7, T8, T9> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9>.LeftJoin(Expression`1<Func`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, bool>> exp);
    private sealed virtual override ISelect`9<T1, T2, T3, T4, T5, T6, T7, T8, T9> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9>.InnerJoin(Expression`1<Func`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, bool>> exp);
    private sealed virtual override ISelect`9<T1, T2, T3, T4, T5, T6, T7, T8, T9> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9>.RightJoin(Expression`1<Func`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, bool>> exp);
    private sealed virtual override ISelect`9<T1, T2, T3, T4, T5, T6, T7, T8, T9> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9>.Where(Expression`1<Func`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, bool>> exp);
    private sealed virtual override ISelect`9<T1, T2, T3, T4, T5, T6, T7, T8, T9> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9>.WhereIf(bool condition, Expression`1<Func`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, bool>> exp);
    private sealed virtual override bool FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9>.Any(Expression`1<Func`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, bool>> exp);
    private sealed virtual override TReturn FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9>.ToOne(Expression`1<Func`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, TReturn>> select);
    private sealed virtual override TReturn FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9>.First(Expression`1<Func`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, TReturn>> select);
    private sealed virtual override TDto FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9>.First();
    private sealed virtual override ISelect`1<TDto> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9>.WithTempQuery(Expression`1<Func`2<HzyTuple`9<T1, T2, T3, T4, T5, T6, T7, T8, T9>, TDto>> selector);
    private sealed virtual override double FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9>.Avg(Expression`1<Func`2<HzyTuple`9<T1, T2, T3, T4, T5, T6, T7, T8, T9>, TMember>> column);
    private sealed virtual override ISelectGrouping`2<TKey, NativeTuple`9<T1, T2, T3, T4, T5, T6, T7, T8, T9>> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9>.GroupBy(Expression`1<Func`2<HzyTuple`9<T1, T2, T3, T4, T5, T6, T7, T8, T9>, TKey>> exp);
    private sealed virtual override TMember FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9>.Max(Expression`1<Func`2<HzyTuple`9<T1, T2, T3, T4, T5, T6, T7, T8, T9>, TMember>> column);
    private sealed virtual override TMember FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9>.Min(Expression`1<Func`2<HzyTuple`9<T1, T2, T3, T4, T5, T6, T7, T8, T9>, TMember>> column);
    private sealed virtual override ISelect`9<T1, T2, T3, T4, T5, T6, T7, T8, T9> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9>.OrderBy(Expression`1<Func`2<HzyTuple`9<T1, T2, T3, T4, T5, T6, T7, T8, T9>, TMember>> column);
    private sealed virtual override ISelect`9<T1, T2, T3, T4, T5, T6, T7, T8, T9> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9>.OrderByDescending(Expression`1<Func`2<HzyTuple`9<T1, T2, T3, T4, T5, T6, T7, T8, T9>, TMember>> column);
    private sealed virtual override ISelect`9<T1, T2, T3, T4, T5, T6, T7, T8, T9> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9>.OrderByIf(bool condition, Expression`1<Func`2<HzyTuple`9<T1, T2, T3, T4, T5, T6, T7, T8, T9>, TMember>> column, bool descending);
    private sealed virtual override decimal FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9>.Sum(Expression`1<Func`2<HzyTuple`9<T1, T2, T3, T4, T5, T6, T7, T8, T9>, TMember>> column);
    private sealed virtual override List`1<TReturn> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9>.ToList(Expression`1<Func`2<HzyTuple`9<T1, T2, T3, T4, T5, T6, T7, T8, T9>, TReturn>> select);
    public sealed virtual void ToChunk(Expression`1<Func`2<HzyTuple`9<T1, T2, T3, T4, T5, T6, T7, T8, T9>, TReturn>> select, int size, Action`1<FetchCallbackArgs`1<List`1<TReturn>>> done);
    private sealed virtual override DataTable FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9>.ToDataTable(Expression`1<Func`2<HzyTuple`9<T1, T2, T3, T4, T5, T6, T7, T8, T9>, TReturn>> select);
    private sealed virtual override int FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9>.InsertInto(string tableName, Expression`1<Func`2<HzyTuple`9<T1, T2, T3, T4, T5, T6, T7, T8, T9>, TTargetEntity>> select);
    private sealed virtual override string FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9>.ToSql(Expression`1<Func`2<HzyTuple`9<T1, T2, T3, T4, T5, T6, T7, T8, T9>, TReturn>> select, FieldAliasOptions fieldAlias);
    private sealed virtual override ISelect`9<T1, T2, T3, T4, T5, T6, T7, T8, T9> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9>.LeftJoin(Expression`1<Func`2<HzyTuple`9<T1, T2, T3, T4, T5, T6, T7, T8, T9>, bool>> exp);
    private sealed virtual override ISelect`9<T1, T2, T3, T4, T5, T6, T7, T8, T9> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9>.InnerJoin(Expression`1<Func`2<HzyTuple`9<T1, T2, T3, T4, T5, T6, T7, T8, T9>, bool>> exp);
    private sealed virtual override ISelect`9<T1, T2, T3, T4, T5, T6, T7, T8, T9> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9>.RightJoin(Expression`1<Func`2<HzyTuple`9<T1, T2, T3, T4, T5, T6, T7, T8, T9>, bool>> exp);
    private sealed virtual override ISelect`9<T1, T2, T3, T4, T5, T6, T7, T8, T9> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9>.Where(Expression`1<Func`2<HzyTuple`9<T1, T2, T3, T4, T5, T6, T7, T8, T9>, bool>> exp);
    private sealed virtual override ISelect`9<T1, T2, T3, T4, T5, T6, T7, T8, T9> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9>.WhereIf(bool condition, Expression`1<Func`2<HzyTuple`9<T1, T2, T3, T4, T5, T6, T7, T8, T9>, bool>> exp);
    private sealed virtual override bool FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9>.Any(Expression`1<Func`2<HzyTuple`9<T1, T2, T3, T4, T5, T6, T7, T8, T9>, bool>> exp);
    private sealed virtual override TReturn FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9>.ToOne(Expression`1<Func`2<HzyTuple`9<T1, T2, T3, T4, T5, T6, T7, T8, T9>, TReturn>> select);
    private sealed virtual override TReturn FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9>.First(Expression`1<Func`2<HzyTuple`9<T1, T2, T3, T4, T5, T6, T7, T8, T9>, TReturn>> select);
    private sealed virtual override Task`1<double> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9>.AvgAsync(Expression`1<Func`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, TMember>> column, CancellationToken cancellationToken);
    private sealed virtual override Task`1<TMember> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9>.MaxAsync(Expression`1<Func`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, TMember>> column, CancellationToken cancellationToken);
    private sealed virtual override Task`1<TMember> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9>.MinAsync(Expression`1<Func`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, TMember>> column, CancellationToken cancellationToken);
    private sealed virtual override Task`1<decimal> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9>.SumAsync(Expression`1<Func`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, TMember>> column, CancellationToken cancellationToken);
    private sealed virtual override Task`1<TReturn> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9>.ToAggregateAsync(Expression`1<Func`10<ISelectGroupingAggregate`1<T1>, ISelectGroupingAggregate`1<T2>, ISelectGroupingAggregate`1<T3>, ISelectGroupingAggregate`1<T4>, ISelectGroupingAggregate`1<T5>, ISelectGroupingAggregate`1<T6>, ISelectGroupingAggregate`1<T7>, ISelectGroupingAggregate`1<T8>, ISelectGroupingAggregate`1<T9>, TReturn>> select, CancellationToken cancellationToken);
    private sealed virtual override Task`1<List`1<TReturn>> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9>.ToListAsync(Expression`1<Func`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, TReturn>> select, CancellationToken cancellationToken);
    private sealed virtual override Task`1<List`1<TDto>> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9>.ToListAsync(CancellationToken cancellationToken);
    private sealed virtual override Task`1<DataTable> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9>.ToDataTableAsync(Expression`1<Func`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, TReturn>> select, CancellationToken cancellationToken);
    private sealed virtual override Task`1<int> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9>.InsertIntoAsync(string tableName, Expression`1<Func`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, TTargetEntity>> select, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("FreeSql.Internal.CommonProvider.Select9Provider`9/<FreeSql-ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9>-AnyAsync>d__61")]
[DebuggerStepThroughAttribute]
private sealed virtual override Task`1<bool> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9>.AnyAsync(Expression`1<Func`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, bool>> exp, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("FreeSql.Internal.CommonProvider.Select9Provider`9/<FreeSql-ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9>-ToOneAsync>d__62`1")]
[DebuggerStepThroughAttribute]
private sealed virtual override Task`1<TReturn> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9>.ToOneAsync(Expression`1<Func`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, TReturn>> select, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("FreeSql.Internal.CommonProvider.Select9Provider`9/<FreeSql-ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9>-FirstAsync>d__63`1")]
[DebuggerStepThroughAttribute]
private sealed virtual override Task`1<TReturn> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9>.FirstAsync(Expression`1<Func`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, TReturn>> select, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("FreeSql.Internal.CommonProvider.Select9Provider`9/<FreeSql-ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9>-FirstAsync>d__64`1")]
[DebuggerStepThroughAttribute]
private sealed virtual override Task`1<TDto> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9>.FirstAsync(CancellationToken cancellationToken);
    private sealed virtual override Task`1<double> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9>.AvgAsync(Expression`1<Func`2<HzyTuple`9<T1, T2, T3, T4, T5, T6, T7, T8, T9>, TMember>> column, CancellationToken cancellationToken);
    private sealed virtual override Task`1<TMember> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9>.MaxAsync(Expression`1<Func`2<HzyTuple`9<T1, T2, T3, T4, T5, T6, T7, T8, T9>, TMember>> column, CancellationToken cancellationToken);
    private sealed virtual override Task`1<TMember> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9>.MinAsync(Expression`1<Func`2<HzyTuple`9<T1, T2, T3, T4, T5, T6, T7, T8, T9>, TMember>> column, CancellationToken cancellationToken);
    private sealed virtual override Task`1<decimal> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9>.SumAsync(Expression`1<Func`2<HzyTuple`9<T1, T2, T3, T4, T5, T6, T7, T8, T9>, TMember>> column, CancellationToken cancellationToken);
    private sealed virtual override Task`1<List`1<TReturn>> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9>.ToListAsync(Expression`1<Func`2<HzyTuple`9<T1, T2, T3, T4, T5, T6, T7, T8, T9>, TReturn>> select, CancellationToken cancellationToken);
    private sealed virtual override Task`1<DataTable> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9>.ToDataTableAsync(Expression`1<Func`2<HzyTuple`9<T1, T2, T3, T4, T5, T6, T7, T8, T9>, TReturn>> select, CancellationToken cancellationToken);
    private sealed virtual override Task`1<int> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9>.InsertIntoAsync(string tableName, Expression`1<Func`2<HzyTuple`9<T1, T2, T3, T4, T5, T6, T7, T8, T9>, TTargetEntity>> select, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("FreeSql.Internal.CommonProvider.Select9Provider`9/<FreeSql-ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9>-AnyAsync>d__72")]
[DebuggerStepThroughAttribute]
private sealed virtual override Task`1<bool> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9>.AnyAsync(Expression`1<Func`2<HzyTuple`9<T1, T2, T3, T4, T5, T6, T7, T8, T9>, bool>> exp, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("FreeSql.Internal.CommonProvider.Select9Provider`9/<FreeSql-ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9>-ToOneAsync>d__73`1")]
[DebuggerStepThroughAttribute]
private sealed virtual override Task`1<TReturn> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9>.ToOneAsync(Expression`1<Func`2<HzyTuple`9<T1, T2, T3, T4, T5, T6, T7, T8, T9>, TReturn>> select, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("FreeSql.Internal.CommonProvider.Select9Provider`9/<FreeSql-ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9>-FirstAsync>d__74`1")]
[DebuggerStepThroughAttribute]
private sealed virtual override Task`1<TReturn> FreeSql.ISelect<T1,T2,T3,T4,T5,T6,T7,T8,T9>.FirstAsync(Expression`1<Func`2<HzyTuple`9<T1, T2, T3, T4, T5, T6, T7, T8, T9>, TReturn>> select, CancellationToken cancellationToken);
}
public class FreeSql.Internal.CommonProvider.SelectGroupingProvider : BaseDiyMemberExpression {
    public IFreeSql _orm;
    public Select0Provider _select;
    public CommonExpression _comonExp;
    public List`1<SelectTableInfo> _tables;
    public int _groupByLimit;
    public int _groupBySkip;
    public bool _addFieldAlias;
    public bool _flagNestedFieldAlias;
    public static ThreadLocal`1<string> _ParseExpOnlyDbField;
    public SelectGroupingProvider(IFreeSql orm, Select0Provider select, ReadAnonymousTypeInfo map, string field, CommonExpression comonExp, List`1<SelectTableInfo> tables);
    private static SelectGroupingProvider();
    public virtual string ParseExp(Expression[] members);
    public void InternalHaving(Expression exp);
    public void InternalOrderBy(Expression exp, bool isDescending);
    public object InternalToList(Expression select, Type elementType);
    public IEnumerable`1<KeyValuePair`2<object, object>> InternalToKeyValuePairs(Expression elementSelector, Type elementType);
    public string InternalToSql(Expression select, FieldAliasOptions fieldAlias);
    public string InternalToSql(string field);
}
public class FreeSql.Internal.CommonProvider.SelectGroupingProvider`2 : SelectGroupingProvider {
    public SelectGroupingProvider`2(IFreeSql orm, Select0Provider select, ReadAnonymousTypeInfo map, string field, CommonExpression comonExp, List`1<SelectTableInfo> tables);
    public sealed virtual string ToSql(Expression`1<Func`2<ISelectGroupingAggregate`2<TKey, TValue>, TReturn>> select, FieldAliasOptions fieldAlias);
    public sealed virtual string ToSql(string field);
    public sealed virtual ISelect`1<TDto> WithTempQuery(Expression`1<Func`2<ISelectGroupingAggregate`2<TKey, TValue>, TDto>> selector);
    public sealed virtual ISelectGrouping`2<TKey, TValue> Skip(int offset);
    public sealed virtual ISelectGrouping`2<TKey, TValue> Offset(int offset);
    public sealed virtual ISelectGrouping`2<TKey, TValue> Limit(int limit);
    public sealed virtual ISelectGrouping`2<TKey, TValue> Take(int limit);
    public sealed virtual ISelectGrouping`2<TKey, TValue> Page(int pageNumber, int pageSize);
    public sealed virtual ISelectGrouping`2<TKey, TValue> Page(BasePagingInfo pagingInfo);
    public sealed virtual long Count();
    public sealed virtual ISelectGrouping`2<TKey, TValue> Count(Int64& count);
    public sealed virtual ISelectGrouping`2<TKey, TValue> HavingIf(bool condition, Expression`1<Func`2<ISelectGroupingAggregate`2<TKey, TValue>, bool>> exp);
    public sealed virtual ISelectGrouping`2<TKey, TValue> Having(Expression`1<Func`2<ISelectGroupingAggregate`2<TKey, TValue>, bool>> exp);
    public sealed virtual ISelectGrouping`2<TKey, TValue> OrderBy(Expression`1<Func`2<ISelectGroupingAggregate`2<TKey, TValue>, TMember>> column);
    public sealed virtual ISelectGrouping`2<TKey, TValue> OrderByDescending(Expression`1<Func`2<ISelectGroupingAggregate`2<TKey, TValue>, TMember>> column);
    public sealed virtual List`1<TReturn> Select(Expression`1<Func`2<ISelectGroupingAggregate`2<TKey, TValue>, TReturn>> select);
    public sealed virtual TReturn First(Expression`1<Func`2<ISelectGroupingAggregate`2<TKey, TValue>, TReturn>> select);
    public sealed virtual List`1<TReturn> ToList(Expression`1<Func`2<ISelectGroupingAggregate`2<TKey, TValue>, TReturn>> select);
    public sealed virtual Dictionary`2<TKey, TElement> ToDictionary(Expression`1<Func`2<ISelectGroupingAggregate`2<TKey, TValue>, TElement>> elementSelector);
    [AsyncStateMachineAttribute("FreeSql.Internal.CommonProvider.SelectGroupingProvider`2/<CountAsync>d__20")]
[DebuggerStepThroughAttribute]
public sealed virtual Task`1<long> CountAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("FreeSql.Internal.CommonProvider.SelectGroupingProvider`2/<FirstAsync>d__21`1")]
[DebuggerStepThroughAttribute]
public sealed virtual Task`1<TReturn> FirstAsync(Expression`1<Func`2<ISelectGroupingAggregate`2<TKey, TValue>, TReturn>> select, CancellationToken cancellationToken);
    public sealed virtual Task`1<List`1<TReturn>> ToListAsync(Expression`1<Func`2<ISelectGroupingAggregate`2<TKey, TValue>, TReturn>> select, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("FreeSql.Internal.CommonProvider.SelectGroupingProvider`2/<ToDictionaryAsync>d__23`1")]
[DebuggerStepThroughAttribute]
public sealed virtual Task`1<Dictionary`2<TKey, TElement>> ToDictionaryAsync(Expression`1<Func`2<ISelectGroupingAggregate`2<TKey, TValue>, TElement>> elementSelector, CancellationToken cancellationToken);
}
public class FreeSql.Internal.CommonProvider.UpdateJoinProvider`2 : object {
    public IUpdate`1<T1> _update;
    public UpdateProvider`1<T1> _updateProvider;
    public ISelect`1<T2> _query;
    public Select0Provider _queryProvider;
    public ISelect`2<T1, T2> _query2;
    public Select2Provider`2<T1, T2> _query2Provider;
    public IFreeSql _orm;
    public CommonUtils _commonUtils;
    public CommonExpression _commonExpression;
    public string _joinOn;
    public string _tableName;
    public UpdateJoinProvider`2(IUpdate`1<T1> update, ISelect`1<T2> query, Expression`1<Func`3<T1, T2, bool>> on);
    public void ValidateDataType(Action InterceptSqlServer, Action InterceptMySql, Action InterceptPostgreSQL, Action InterceptMergeInto, Action InterceptGBase);
    public sealed virtual IUpdateJoin`2<T1, T2> AsTable(string tableName, string joinTableName);
    public sealed virtual IUpdateJoin`2<T1, T2> WithConnection(DbConnection connection);
    public sealed virtual IUpdateJoin`2<T1, T2> WithTransaction(DbTransaction transaction);
    public sealed virtual IUpdateJoin`2<T1, T2> CommandTimeout(int timeout);
    public sealed virtual IUpdateJoin`2<T1, T2> DisableGlobalFilter(String[] name);
    public sealed virtual IUpdateJoin`2<T1, T2> Set(Expression`1<Func`2<T1, TMember>> column, TMember value);
    public sealed virtual IUpdateJoin`2<T1, T2> SetIf(bool condition, Expression`1<Func`2<T1, TMember>> column, TMember value);
    public sealed virtual IUpdateJoin`2<T1, T2> SetRaw(string sql, object parms);
    public sealed virtual IUpdateJoin`2<T1, T2> Where(string sql, object parms);
    public sealed virtual IUpdateJoin`2<T1, T2> Where(Expression`1<Func`3<T1, T2, bool>> exp);
    public sealed virtual IUpdateJoin`2<T1, T2> WhereIf(bool condition, Expression`1<Func`3<T1, T2, bool>> exp);
    public sealed virtual IUpdateJoin`2<T1, T2> Set(Expression`1<Func`3<T1, T2, bool>> exp);
    public sealed virtual IUpdateJoin`2<T1, T2> SetIf(bool condition, Expression`1<Func`3<T1, T2, bool>> exp);
    private void InterceptSql(StringBuilder sb);
    public sealed virtual string ToSql();
    public sealed virtual int ExecuteAffrows();
    [AsyncStateMachineAttribute("FreeSql.Internal.CommonProvider.UpdateJoinProvider`2/<ExecuteAffrowsAsync>d__29")]
[DebuggerStepThroughAttribute]
public sealed virtual Task`1<int> ExecuteAffrowsAsync(CancellationToken cancellationToken);
}
public abstract class FreeSql.Internal.CommonProvider.UpdateProvider : object {
    public IFreeSql _orm;
    public CommonUtils _commonUtils;
    public CommonExpression _commonExpression;
    public Dictionary`2<string, bool> _ignore;
    public Dictionary`2<string, bool> _auditValueChangedDict;
    public TableInfo _table;
    public ColumnInfo[] _tempPrimarys;
    public ColumnInfo _versionColumn;
    public bool _ignoreVersion;
    public Func`2<string, string> _tableRule;
    public StringBuilder _where;
    public List`1<Item> _whereGlobalFilter;
    public StringBuilder _set;
    public StringBuilder _setIncr;
    public List`1<DbParameter> _params;
    public List`1<DbParameter> _paramsSource;
    public bool _noneParameter;
    public int _batchRowsLimit;
    public int _batchParameterLimit;
    public bool _batchAutoTransaction;
    public DbTransaction _transaction;
    public DbConnection _connection;
    public int _commandTimeout;
    public Action`1<StringBuilder> _interceptSql;
    public string _tableAlias;
    public object _updateVersionValue;
    public bool _isAutoSyncStructure;
    public static int ExecuteBulkUpdate(UpdateProvider`1<T1> update, NativeTuple`5<string, string, string, string, String[]> state, Action`1<IInsert`1<T1>> funcBulkCopy);
    public static int ExecuteBulkUpsert(InsertOrUpdateProvider`1<T1> upsert, NativeTuple`5<string, string, string, string, String[]> state, Action`1<IInsert`1<T1>> funcBulkCopy);
    public static int ExecuteBulkCommand(List`1<T1> _source, ColumnInfo[] _tempPrimarys, IFreeSql _orm, DbConnection _connection, DbTransaction _transaction, TableInfo _table, NativeTuple`5<string, string, string, string, String[]> state, Action`1<IInsert`1<T1>> funcBulkCopy);
    public static Task`1<int> ExecuteBulkUpdateAsync(UpdateProvider`1<T1> update, NativeTuple`5<string, string, string, string, String[]> state, Func`2<IInsert`1<T1>, Task> funcBulkCopy);
    public static Task`1<int> ExecuteBulkUpsertAsync(InsertOrUpdateProvider`1<T1> upsert, NativeTuple`5<string, string, string, string, String[]> state, Func`2<IInsert`1<T1>, Task> funcBulkCopy);
    [AsyncStateMachineAttribute("FreeSql.Internal.CommonProvider.UpdateProvider/<ExecuteBulkCommandAsync>d__32`1")]
[DebuggerStepThroughAttribute]
public static Task`1<int> ExecuteBulkCommandAsync(List`1<T1> _source, ColumnInfo[] _tempPrimarys, IFreeSql _orm, DbConnection _connection, DbTransaction _transaction, TableInfo _table, NativeTuple`5<string, string, string, string, String[]> state, Func`2<IInsert`1<T1>, Task> funcBulkCopy);
}
public abstract class FreeSql.Internal.CommonProvider.UpdateProvider`1 : UpdateProvider {
    public List`1<T1> _source;
    public List`1<T1> _sourceOld;
    public Action`1<BatchProgressStatus`1<T1>> _batchProgress;
    public UpdateProvider`1(IFreeSql orm, CommonUtils commonUtils, CommonExpression commonExpression, object dywhere);
    protected void IgnoreCanUpdate();
    protected void ClearData();
    public sealed virtual IUpdateJoin`2<T1, T2> Join(Expression`1<Func`3<T1, T2, bool>> on);
    public sealed virtual IUpdateJoin`2<T1, T2> Join(ISelect`1<T2> query, Expression`1<Func`3<T1, T2, bool>> on);
    public sealed virtual IUpdate`1<T1> WithTransaction(DbTransaction transaction);
    public sealed virtual IUpdate`1<T1> WithConnection(DbConnection connection);
    public sealed virtual IUpdate`1<T1> CommandTimeout(int timeout);
    public sealed virtual IUpdate`1<T1> NoneParameter(bool isNotCommandParameter);
    public virtual IUpdate`1<T1> BatchOptions(int rowsLimit, int parameterLimit, bool autoTransaction);
    public sealed virtual IUpdate`1<T1> BatchProgress(Action`1<BatchProgressStatus`1<T1>> callback);
    protected void ValidateVersionAndThrow(int affrows, string sql, DbParameter[] dbParms);
    protected internal List`1[] SplitSource(int valuesLimit, int parameterLimit, bool isAsTableSplited);
    protected virtual void SplitExecute(int valuesLimit, int parameterLimit, string traceName, Action execute);
    protected int SplitExecuteAffrows(int valuesLimit, int parameterLimit);
    protected List`1<TReturn> SplitExecuteUpdated(int valuesLimit, int parameterLimit, IEnumerable`1<ColumnInfo> columns);
    protected int RawExecuteAffrows();
    protected abstract virtual List`1<TReturn> RawExecuteUpdated(IEnumerable`1<ColumnInfo> columns);
    public abstract virtual int ExecuteAffrows();
    protected abstract virtual List`1<TReturn> ExecuteUpdated(IEnumerable`1<ColumnInfo> columns);
    public sealed virtual List`1<T1> ExecuteUpdated();
    public sealed virtual List`1<TReturn> ExecuteUpdated(Expression`1<Func`2<T1, TReturn>> returnColumns);
    public sealed virtual IUpdate`1<T1> IgnoreColumns(Expression`1<Func`2<T1, object>> columns);
    public sealed virtual IUpdate`1<T1> UpdateColumns(Expression`1<Func`2<T1, object>> columns);
    public sealed virtual IUpdate`1<T1> IgnoreColumns(String[] columns);
    public sealed virtual IUpdate`1<T1> UpdateColumns(String[] columns);
    public static void AuditDataValue(object sender, IEnumerable`1<T1> data, IFreeSql orm, TableInfo table, Dictionary`2<string, bool> changedDict);
    public static void AuditDataValue(object sender, T1 data, IFreeSql orm, TableInfo table, Dictionary`2<string, bool> changedDict);
    public static void GetDictionaryTableInfo(IEnumerable`1<T1> source, IFreeSql orm, TableInfo& table);
    public static void GetDictionaryTableInfo(T1 source, IFreeSql orm, TableInfo& table);
    public sealed virtual IUpdate`1<T1> SetSource(T1 source);
    public sealed virtual IUpdate`1<T1> SetSource(IEnumerable`1<T1> source, Expression`1<Func`2<T1, object>> tempPrimarys, bool ignoreVersion);
    public sealed virtual IUpdate`1<T1> SetSourceIgnore(T1 source, Func`2<object, bool> ignore);
    protected void SetPriv(ColumnInfo col, object value);
    public sealed virtual IUpdate`1<T1> Set(Expression`1<Func`2<T1, TMember>> column, TMember value);
    public sealed virtual IUpdate`1<T1> SetIf(bool condition, Expression`1<Func`2<T1, TMember>> column, TMember value);
    public sealed virtual IUpdate`1<T1> Set(Expression`1<Func`2<T1, TMember>> exp);
    public sealed virtual IUpdate`1<T1> SetIf(bool condition, Expression`1<Func`2<T1, TMember>> exp);
    public sealed virtual IUpdate`1<T1> SetRaw(string sql, object parms);
    public sealed virtual IUpdate`1<T1> SetDto(object dto);
    public sealed virtual IUpdate`1<T1> SetDtoIgnore(object dto, Func`2<object, bool> ignore);
    public sealed virtual IUpdate`1<T1> Where(Expression`1<Func`2<T1, bool>> exp);
    public sealed virtual IUpdate`1<T1> WhereIf(bool condition, Expression`1<Func`2<T1, bool>> exp);
    public sealed virtual IUpdate`1<T1> Where(string sql, object parms);
    public sealed virtual IUpdate`1<T1> Where(T1 item);
    public sealed virtual IUpdate`1<T1> Where(IEnumerable`1<T1> items);
    public sealed virtual IUpdate`1<T1> WhereDynamic(object dywhere, bool not);
    public sealed virtual IUpdate`1<T1> WhereDynamicFilter(DynamicFilterInfo filter);
    public sealed virtual IUpdate`1<T1> DisableGlobalFilter(String[] name);
    protected string WhereCaseSource(string CsName, Func`2<string, string> thenValue);
    protected abstract virtual void ToSqlCase(StringBuilder caseWhen, ColumnInfo[] primarys);
    protected abstract virtual void ToSqlWhen(StringBuilder sb, ColumnInfo[] primarys, object d);
    protected virtual void ToSqlCaseWhenEnd(StringBuilder sb, ColumnInfo col);
    protected string TableRuleInvoke();
    public sealed virtual IUpdate`1<T1> AsTable(Func`2<string, string> tableRule);
    public sealed virtual IUpdate`1<T1> AsTable(string tableName);
    public sealed virtual IUpdate`1<T1> AsType(Type entityType);
    public virtual string ToSql();
    public void ToSqlFetch(Action`1<StringBuilder> fetch);
    [AsyncStateMachineAttribute("FreeSql.Internal.CommonProvider.UpdateProvider`1/<ToSqlFetchAsync>d__62")]
[DebuggerStepThroughAttribute]
public Task ToSqlFetchAsync(Func`2<StringBuilder, Task> fetchAsync);
    public virtual void ToSqlExtension110(StringBuilder sb, bool isAsTableSplited);
    public virtual void ToSqlWhere(StringBuilder sb);
    [AsyncStateMachineAttribute("FreeSql.Internal.CommonProvider.UpdateProvider`1/<SplitExecuteAsync>d__65")]
[DebuggerStepThroughAttribute]
protected virtual Task SplitExecuteAsync(int valuesLimit, int parameterLimit, string traceName, Func`1<Task> executeAsync, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("FreeSql.Internal.CommonProvider.UpdateProvider`1/<SplitExecuteAffrowsAsync>d__66")]
[DebuggerStepThroughAttribute]
protected Task`1<int> SplitExecuteAffrowsAsync(int valuesLimit, int parameterLimit, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("FreeSql.Internal.CommonProvider.UpdateProvider`1/<SplitExecuteUpdatedAsync>d__67`1")]
[DebuggerStepThroughAttribute]
protected Task`1<List`1<TReturn>> SplitExecuteUpdatedAsync(int valuesLimit, int parameterLimit, IEnumerable`1<ColumnInfo> columns, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("FreeSql.Internal.CommonProvider.UpdateProvider`1/<RawExecuteAffrowsAsync>d__68")]
[DebuggerStepThroughAttribute]
protected Task`1<int> RawExecuteAffrowsAsync(CancellationToken cancellationToken);
    protected abstract virtual Task`1<List`1<TReturn>> RawExecuteUpdatedAsync(IEnumerable`1<ColumnInfo> columns, CancellationToken cancellationToken);
    public abstract virtual Task`1<int> ExecuteAffrowsAsync(CancellationToken cancellationToken);
    protected abstract virtual Task`1<List`1<TReturn>> ExecuteUpdatedAsync(IEnumerable`1<ColumnInfo> columns, CancellationToken cancellationToken);
    public sealed virtual Task`1<List`1<T1>> ExecuteUpdatedAsync(CancellationToken cancellationToken);
    public sealed virtual Task`1<List`1<TReturn>> ExecuteUpdatedAsync(Expression`1<Func`2<T1, TReturn>> returnColumns, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
private <>f__AnonymousType1`2<T1, string> <SplitSource>b__15_0(T1 a);
    [CompilerGeneratedAttribute]
private ColumnInfo <ExecuteUpdated>b__24_0(string a);
    [CompilerGeneratedAttribute]
private ColumnInfo <SetSource>b__34_2(string a);
    [CompilerGeneratedAttribute]
private <>f__AnonymousType1`2<T1, string> <ToSqlExtension110>b__63_0(T1 a);
    [CompilerGeneratedAttribute]
private ColumnInfo <ExecuteUpdatedAsync>b__73_0(string a);
}
public abstract class FreeSql.Internal.CommonUtils : object {
    public bool IsQuoteSqlName;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private IFreeSql <_orm>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private List`1<DbTableInfo> <dbTables>k__BackingField;
    public object dbTablesLock;
    private ConcurrentDictionary`2<Type, TableAttribute> dicConfigEntity;
    public MappingPriorityType[] _mappingPriorityTypes;
    private ConcurrentDictionary`2<Type, Dictionary`2<string, IndexAttribute>> dicAopConfigEntityIndex;
    private static int _CodeBaseNotSupportedException;
    public string Now { get; }
    public string NowUtc { get; }
    public IFreeSql _orm { get; public set; }
    public ICodeFirst CodeFirst { get; }
    public List`1<DbTableInfo> dbTables { get; public set; }
    public CommonUtils(IFreeSql orm);
    public abstract virtual string GetNoneParamaterSqlValue(List`1<DbParameter> specialParams, string specialParamFlag, ColumnInfo col, Type type, object value);
    public abstract virtual DbParameter AppendParamter(List`1<DbParameter> _params, string parameterName, ColumnInfo col, Type type, object value);
    public abstract virtual DbParameter[] GetDbParamtersByObject(string sql, object obj);
    public abstract virtual string FormatSql(string sql, Object[] args);
    public string QuoteSqlName(String[] name);
    public abstract virtual string QuoteSqlNameAdapter(String[] name);
    public abstract virtual string TrimQuoteSqlName(string name);
    public abstract virtual String[] SplitTableName(string name);
    public static String[] GetSplitTableNames(string name, char leftQuote, char rightQuote, int size);
    public abstract virtual string QuoteParamterName(string name);
    public abstract virtual string IsNull(string sql, object value);
    public abstract virtual string StringConcat(String[] objs, Type[] types);
    public abstract virtual string Mod(string left, string right, Type leftType, Type rightType);
    public abstract virtual string Div(string left, string right, Type leftType, Type rightType);
    public virtual string BitAnd(string left, string right);
    public virtual string BitOr(string left, string right);
    public virtual string BitShiftLeft(string left, string right);
    public virtual string BitShiftRight(string left, string right);
    public virtual string BitNot(string left);
    public virtual string BitXor(string left, string right);
    public abstract virtual string get_Now();
    public abstract virtual string get_NowUtc();
    public abstract virtual string QuoteWriteParamterAdapter(Type type, string paramterName);
    protected abstract virtual string QuoteReadColumnAdapter(Type type, Type mapType, string columnName);
    public virtual string RewriteColumn(ColumnInfo col, string sql);
    public string RereadColumn(ColumnInfo col, string columnName);
    public virtual string FieldAsAlias(string alias);
    public virtual string IIF(string test, string ifTrue, string ifElse);
    public static string BytesSqlRaw(Byte[] bytes);
    [CompilerGeneratedAttribute]
public IFreeSql get__orm();
    [CompilerGeneratedAttribute]
public void set__orm(IFreeSql value);
    public ICodeFirst get_CodeFirst();
    public TableInfo GetTableByEntity(Type entity);
    [CompilerGeneratedAttribute]
public List`1<DbTableInfo> get_dbTables();
    [CompilerGeneratedAttribute]
public void set_dbTables(List`1<DbTableInfo> value);
    public ICodeFirst ConfigEntity(Action`1<TableFluent`1<T>> entity);
    public ICodeFirst ConfigEntity(Type type, Action`1<TableFluent> entity);
    public TableAttribute GetConfigEntity(Type type);
    public string GetEntityTableAopName(TableInfo table, bool flag1);
    public TableAttribute GetEntityTableAttribute(Type type);
    public ColumnAttribute GetEntityColumnAttribute(Type type, PropertyInfo proto);
    public NavigateAttribute GetEntityNavigateAttribute(Type type, PropertyInfo proto);
    public IndexAttribute[] GetEntityIndexAttribute(Type type);
    public string WhereObject(TableInfo table, string aliasAndDot, object dywhere, List`1<DbParameter> dbParams);
    public string WhereItems(ColumnInfo[] primarys, string aliasAndDot, IEnumerable`1<TEntity> items, List`1<DbParameter> dbParams);
    public static Dictionary`2<string, string> GetPropertyCommentByDescriptionAttribute(Type type);
    public static Dictionary`2<string, string> GetProperyCommentBySummary(Type type);
    public static void PrevReheatConnectionPool(ObjectPool`1<DbConnection> pool, int minPoolSize);
    [CompilerGeneratedAttribute]
internal static object <WhereObject>g__LocalGetSingleElement|56_1(IEnumerable ie);
    [CompilerGeneratedAttribute]
internal static string <GetPropertyCommentByDescriptionAttribute>g__GetByAttribute|58_0(Object[] attrs, string attributeName);
    [CompilerGeneratedAttribute]
internal static void <GetPropertyCommentByDescriptionAttribute>g__GetDydesc|58_1(PropertyInfo prop, <>c__DisplayClass58_0& );
    [CompilerGeneratedAttribute]
internal static Dictionary`2<string, string> <GetProperyCommentBySummary>g__LocalGetComment|60_0(Type localType, int level);
}
public class FreeSql.Internal.DbUpdateVersionException : Exception {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private TableInfo <Table>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Sql>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private DbParameter[] <DbParams>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <Affrows>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <EntitySourceCount>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private IEnumerable`1<object> <EntitySource>k__BackingField;
    public TableInfo Table { get; }
    public string Sql { get; }
    public DbParameter[] DbParams { get; }
    public int Affrows { get; }
    public int EntitySourceCount { get; }
    public IEnumerable`1<object> EntitySource { get; }
    public DbUpdateVersionException(string message, TableInfo table, string sql, DbParameter[] dbParms, int affrows, IEnumerable`1<object> source);
    [CompilerGeneratedAttribute]
public TableInfo get_Table();
    [CompilerGeneratedAttribute]
public string get_Sql();
    [CompilerGeneratedAttribute]
public DbParameter[] get_DbParams();
    [CompilerGeneratedAttribute]
public int get_Affrows();
    [CompilerGeneratedAttribute]
public int get_EntitySourceCount();
    [CompilerGeneratedAttribute]
public IEnumerable`1<object> get_EntitySource();
}
public class FreeSql.Internal.GlobalFilter : object {
    private ConcurrentDictionary`2<string, Item> _filters;
    private int _id;
    public GlobalFilter Apply(string name, Expression`1<Func`2<TEntity, bool>> where, bool before);
    public GlobalFilter ApplyIf(string name, Func`1<bool> condition, Expression`1<Func`2<TEntity, bool>> where, bool before);
    public GlobalFilter ApplyOnly(string name, Expression`1<Func`2<TEntity, bool>> where, bool before);
    public GlobalFilter ApplyOnlyIf(string name, Func`1<bool> condition, Expression`1<Func`2<TEntity, bool>> where, bool before);
    private GlobalFilter Apply(bool only, string name, Func`1<bool> condition, Expression`1<Func`2<TEntity, bool>> where, bool before);
    public void Remove(string name);
    public List`1<Item> GetFilters();
    public List`1<Item> GetAllFilters();
}
public enum FreeSql.Internal.MappingPriorityType : Enum {
    public int value__;
    public static MappingPriorityType Attribute;
    public static MappingPriorityType FluentApi;
    public static MappingPriorityType Aop;
}
public class FreeSql.Internal.Model.AdoCommandFluent : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private AdoProvider <Ado>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private DbConnection <Connection>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private DbTransaction <Transaction>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private CommandType <CmdType>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <CmdText>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <CmdTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private List`1<DbParameter> <CmdParameters>k__BackingField;
    protected internal AdoProvider Ado { get; protected set; }
    protected internal DbConnection Connection { get; protected set; }
    protected internal DbTransaction Transaction { get; protected set; }
    protected internal CommandType CmdType { get; protected set; }
    protected internal string CmdText { get; protected set; }
    protected internal int CmdTimeout { get; protected set; }
    protected internal List`1<DbParameter> CmdParameters { get; }
    public AdoCommandFluent(AdoProvider ado, string commandText, object parms);
    [CompilerGeneratedAttribute]
protected internal AdoProvider get_Ado();
    [CompilerGeneratedAttribute]
protected void set_Ado(AdoProvider value);
    [CompilerGeneratedAttribute]
protected internal DbConnection get_Connection();
    [CompilerGeneratedAttribute]
protected void set_Connection(DbConnection value);
    [CompilerGeneratedAttribute]
protected internal DbTransaction get_Transaction();
    [CompilerGeneratedAttribute]
protected void set_Transaction(DbTransaction value);
    [CompilerGeneratedAttribute]
protected internal CommandType get_CmdType();
    [CompilerGeneratedAttribute]
protected void set_CmdType(CommandType value);
    [CompilerGeneratedAttribute]
protected internal string get_CmdText();
    [CompilerGeneratedAttribute]
protected void set_CmdText(string value);
    [CompilerGeneratedAttribute]
protected internal int get_CmdTimeout();
    [CompilerGeneratedAttribute]
protected void set_CmdTimeout(int value);
    [CompilerGeneratedAttribute]
protected internal List`1<DbParameter> get_CmdParameters();
    public AdoCommandFluent WithConnection(DbConnection conn);
    public AdoCommandFluent WithTransaction(DbTransaction tran);
    public AdoCommandFluent WithParameter(string parameterName, object value, Action`1<DbParameter> modify);
    public AdoCommandFluent CommandType(CommandType commandType);
    public AdoCommandFluent CommandTimeout(int commandTimeout);
    public int ExecuteNonQuery();
    public object ExecuteScalar();
    public DataTable ExecuteDataTable();
    public DataSet ExecuteDataSet();
    public Object[][] ExecuteArray();
    public List`1<T> Query();
    public T QuerySingle();
    public NativeTuple`2<List`1<T1>, List`1<T2>> Query();
    public NativeTuple`3<List`1<T1>, List`1<T2>, List`1<T3>> Query();
    public NativeTuple`4<List`1<T1>, List`1<T2>, List`1<T3>, List`1<T4>> Query();
    public NativeTuple`5<List`1<T1>, List`1<T2>, List`1<T3>, List`1<T4>, List`1<T5>> Query();
    public Task`1<int> ExecuteNonQueryAsync(CancellationToken cancellationToken);
    public Task`1<object> ExecuteScalarAsync(CancellationToken cancellationToken);
    public Task`1<DataTable> ExecuteDataTableAsync(CancellationToken cancellationToken);
    public Task`1<DataSet> ExecuteDataSetAsync(CancellationToken cancellationToken);
    public Task`1<Object[][]> ExecuteArrayAsync(CancellationToken cancellationToken);
    public Task`1<List`1<T>> QueryAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("FreeSql.Internal.Model.AdoCommandFluent/<QuerySingleAsync>d__50`1")]
[DebuggerStepThroughAttribute]
public Task`1<T> QuerySingleAsync(CancellationToken cancellationToken);
    public Task`1<NativeTuple`2<List`1<T1>, List`1<T2>>> QueryAsync(CancellationToken cancellationToken);
    public Task`1<NativeTuple`3<List`1<T1>, List`1<T2>, List`1<T3>>> QueryAsync(CancellationToken cancellationToken);
    public Task`1<NativeTuple`4<List`1<T1>, List`1<T2>, List`1<T3>, List`1<T4>>> QueryAsync(CancellationToken cancellationToken);
    public Task`1<NativeTuple`5<List`1<T1>, List`1<T2>, List`1<T3>, List`1<T4>, List`1<T5>>> QueryAsync(CancellationToken cancellationToken);
}
public class FreeSql.Internal.Model.BasePagingInfo : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <PageNumber>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <PageSize>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private long <Count>k__BackingField;
    public int PageNumber { get; public set; }
    public int PageSize { get; public set; }
    public long Count { get; public set; }
    [CompilerGeneratedAttribute]
public int get_PageNumber();
    [CompilerGeneratedAttribute]
public void set_PageNumber(int value);
    [CompilerGeneratedAttribute]
public int get_PageSize();
    [CompilerGeneratedAttribute]
public void set_PageSize(int value);
    [CompilerGeneratedAttribute]
public long get_Count();
    [CompilerGeneratedAttribute]
public void set_Count(long value);
}
public class FreeSql.Internal.Model.BatchProgressStatus`1 : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private IEnumerable`1<T1> <Data>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <Current>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <Total>k__BackingField;
    public IEnumerable`1<T1> Data { get; }
    public int Current { get; }
    public int Total { get; }
    public BatchProgressStatus`1(List`1<T1> data, int current, int total);
    [CompilerGeneratedAttribute]
public IEnumerable`1<T1> get_Data();
    [CompilerGeneratedAttribute]
public int get_Current();
    [CompilerGeneratedAttribute]
public int get_Total();
}
public class FreeSql.Internal.Model.ColumnInfo : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private TableInfo <Table>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <CsName>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Type <CsType>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ColumnAttribute <Attribute>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Comment>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <DbTypeText>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <DbDefaultValue>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <DbInsertValue>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <DbUpdateValue>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <DbSize>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private byte <DbPrecision>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private byte <DbScale>k__BackingField;
    private static ConcurrentDictionary`2<ColumnInfo, Func`2<object, object>> _dicGetMapValue;
    private static ConcurrentDictionary`2<ColumnInfo, Action`2<object, object>> _dicSetMapValue;
    public TableInfo Table { get; public set; }
    public string CsName { get; public set; }
    public Type CsType { get; public set; }
    public ColumnAttribute Attribute { get; public set; }
    public string Comment { get; public set; }
    public string DbTypeText { get; internal set; }
    public string DbDefaultValue { get; internal set; }
    public string DbInsertValue { get; internal set; }
    public string DbUpdateValue { get; internal set; }
    public int DbSize { get; internal set; }
    public byte DbPrecision { get; internal set; }
    public byte DbScale { get; internal set; }
    private static ColumnInfo();
    [CompilerGeneratedAttribute]
public TableInfo get_Table();
    [CompilerGeneratedAttribute]
public void set_Table(TableInfo value);
    [CompilerGeneratedAttribute]
public string get_CsName();
    [CompilerGeneratedAttribute]
public void set_CsName(string value);
    [CompilerGeneratedAttribute]
public Type get_CsType();
    [CompilerGeneratedAttribute]
public void set_CsType(Type value);
    [CompilerGeneratedAttribute]
public ColumnAttribute get_Attribute();
    [CompilerGeneratedAttribute]
public void set_Attribute(ColumnAttribute value);
    [CompilerGeneratedAttribute]
public string get_Comment();
    [CompilerGeneratedAttribute]
public void set_Comment(string value);
    [CompilerGeneratedAttribute]
public string get_DbTypeText();
    [CompilerGeneratedAttribute]
internal void set_DbTypeText(string value);
    [CompilerGeneratedAttribute]
public string get_DbDefaultValue();
    [CompilerGeneratedAttribute]
internal void set_DbDefaultValue(string value);
    [CompilerGeneratedAttribute]
public string get_DbInsertValue();
    [CompilerGeneratedAttribute]
internal void set_DbInsertValue(string value);
    [CompilerGeneratedAttribute]
public string get_DbUpdateValue();
    [CompilerGeneratedAttribute]
internal void set_DbUpdateValue(string value);
    [CompilerGeneratedAttribute]
public int get_DbSize();
    [CompilerGeneratedAttribute]
internal void set_DbSize(int value);
    [CompilerGeneratedAttribute]
public byte get_DbPrecision();
    [CompilerGeneratedAttribute]
internal void set_DbPrecision(byte value);
    [CompilerGeneratedAttribute]
public byte get_DbScale();
    [CompilerGeneratedAttribute]
internal void set_DbScale(byte value);
    public object GetDbValue(object obj);
    public object GetValue(object obj);
    public void SetValue(object obj, object val);
    [ObsoleteAttribute("请使用 GetDbValue 或者 GetValue")]
public object GetMapValue(object obj);
    [ObsoleteAttribute("请使用 SetValue")]
public void SetMapValue(object obj, object val);
    [CompilerGeneratedAttribute]
private Func`2<object, object> <GetMapValue>b__52_0(ColumnInfo col);
    [CompilerGeneratedAttribute]
private Action`2<object, object> <SetMapValue>b__54_0(ColumnInfo col);
}
public static class FreeSql.Internal.Model.CsToDb : object {
    public static CsToDb`1<T> New(T type, string dbtype, string dbtypeFull, Nullable`1<bool> isUnsigned, Nullable`1<bool> isnullable, object defaultValue);
}
public class FreeSql.Internal.Model.CsToDb`1 : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T <type>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <dbtype>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <dbtypeFull>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Nullable`1<bool> <isUnsigned>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Nullable`1<bool> <isnullable>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private object <defaultValue>k__BackingField;
    public T type { get; }
    public string dbtype { get; }
    public string dbtypeFull { get; }
    public Nullable`1<bool> isUnsigned { get; }
    public Nullable`1<bool> isnullable { get; }
    public object defaultValue { get; }
    public CsToDb`1(T type, string dbtype, string dbtypeFull, Nullable`1<bool> isUnsigned, Nullable`1<bool> isnullable, object defaultValue);
    [CompilerGeneratedAttribute]
public T get_type();
    [CompilerGeneratedAttribute]
public string get_dbtype();
    [CompilerGeneratedAttribute]
public string get_dbtypeFull();
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_isUnsigned();
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_isnullable();
    [CompilerGeneratedAttribute]
public object get_defaultValue();
}
public class FreeSql.Internal.Model.DbInfoResult : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <type>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <dbtype>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <dbtypeFull>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Nullable`1<bool> <isnullable>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private object <defaultValue>k__BackingField;
    public int type { get; }
    public string dbtype { get; }
    public string dbtypeFull { get; }
    public Nullable`1<bool> isnullable { get; }
    public object defaultValue { get; }
    public DbInfoResult(int type, string dbtype, string dbtypeFull, Nullable`1<bool> isnullable, object defaultValue);
    [CompilerGeneratedAttribute]
public int get_type();
    [CompilerGeneratedAttribute]
public string get_dbtype();
    [CompilerGeneratedAttribute]
public string get_dbtypeFull();
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_isnullable();
    [CompilerGeneratedAttribute]
public object get_defaultValue();
}
public class FreeSql.Internal.Model.DbToCs : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <csConvert>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <csParse>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <csStringify>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <csType>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Type <csTypeInfo>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Type <csNullableTypeInfo>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <csTypeValue>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <dataReaderMethod>k__BackingField;
    public string csConvert { get; }
    public string csParse { get; }
    public string csStringify { get; }
    public string csType { get; }
    public Type csTypeInfo { get; }
    public Type csNullableTypeInfo { get; }
    public string csTypeValue { get; }
    public string dataReaderMethod { get; }
    public DbToCs(string csConvert, string csParse, string csStringify, string csType, Type csTypeInfo, Type csNullableTypeInfo, string csTypeValue, string dataReaderMethod);
    [CompilerGeneratedAttribute]
public string get_csConvert();
    [CompilerGeneratedAttribute]
public string get_csParse();
    [CompilerGeneratedAttribute]
public string get_csStringify();
    [CompilerGeneratedAttribute]
public string get_csType();
    [CompilerGeneratedAttribute]
public Type get_csTypeInfo();
    [CompilerGeneratedAttribute]
public Type get_csNullableTypeInfo();
    [CompilerGeneratedAttribute]
public string get_csTypeValue();
    [CompilerGeneratedAttribute]
public string get_dataReaderMethod();
}
[AttributeUsageAttribute("64")]
public class FreeSql.Internal.Model.DynamicFilterCustomAttribute : Attribute {
}
public class FreeSql.Internal.Model.DynamicFilterInfo : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Field>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private DynamicFilterOperator <Operator>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private object <Value>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private DynamicFilterLogic <Logic>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private List`1<DynamicFilterInfo> <Filters>k__BackingField;
    public string Field { get; public set; }
    public DynamicFilterOperator Operator { get; public set; }
    public object Value { get; public set; }
    public DynamicFilterLogic Logic { get; public set; }
    public List`1<DynamicFilterInfo> Filters { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Field();
    [CompilerGeneratedAttribute]
public void set_Field(string value);
    [CompilerGeneratedAttribute]
public DynamicFilterOperator get_Operator();
    [CompilerGeneratedAttribute]
public void set_Operator(DynamicFilterOperator value);
    [CompilerGeneratedAttribute]
public object get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(object value);
    [CompilerGeneratedAttribute]
public DynamicFilterLogic get_Logic();
    [CompilerGeneratedAttribute]
public void set_Logic(DynamicFilterLogic value);
    [CompilerGeneratedAttribute]
public List`1<DynamicFilterInfo> get_Filters();
    [CompilerGeneratedAttribute]
public void set_Filters(List`1<DynamicFilterInfo> value);
}
public enum FreeSql.Internal.Model.DynamicFilterLogic : Enum {
    public int value__;
    public static DynamicFilterLogic And;
    public static DynamicFilterLogic Or;
}
public enum FreeSql.Internal.Model.DynamicFilterOperator : Enum {
    public int value__;
    public static DynamicFilterOperator Contains;
    public static DynamicFilterOperator StartsWith;
    public static DynamicFilterOperator EndsWith;
    public static DynamicFilterOperator NotContains;
    public static DynamicFilterOperator NotStartsWith;
    public static DynamicFilterOperator NotEndsWith;
    public static DynamicFilterOperator Equal;
    public static DynamicFilterOperator Equals;
    public static DynamicFilterOperator Eq;
    public static DynamicFilterOperator NotEqual;
    public static DynamicFilterOperator GreaterThan;
    public static DynamicFilterOperator GreaterThanOrEqual;
    public static DynamicFilterOperator LessThan;
    public static DynamicFilterOperator LessThanOrEqual;
    public static DynamicFilterOperator Range;
    public static DynamicFilterOperator DateRange;
    public static DynamicFilterOperator Any;
    public static DynamicFilterOperator NotAny;
    public static DynamicFilterOperator Custom;
}
public class FreeSql.Internal.Model.FetchCallbackArgs`1 : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T <Object>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsBreak>k__BackingField;
    public T Object { get; public set; }
    public bool IsBreak { get; public set; }
    [CompilerGeneratedAttribute]
public T get_Object();
    [CompilerGeneratedAttribute]
public void set_Object(T value);
    [CompilerGeneratedAttribute]
public bool get_IsBreak();
    [CompilerGeneratedAttribute]
public void set_IsBreak(bool value);
}
public class FreeSql.Internal.Model.HzyTuple`1 : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T <t1>k__BackingField;
    public T t1 { get; }
    public HzyTuple`1(T t);
    [CompilerGeneratedAttribute]
public T get_t1();
}
public class FreeSql.Internal.Model.HzyTuple`10 : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T1 <t1>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T2 <t2>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T3 <t3>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T4 <t4>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T5 <t5>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T6 <t6>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T7 <t7>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T8 <t8>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T9 <t9>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T10 <t10>k__BackingField;
    public T1 t1 { get; }
    public T2 t2 { get; }
    public T3 t3 { get; }
    public T4 t4 { get; }
    public T5 t5 { get; }
    public T6 t6 { get; }
    public T7 t7 { get; }
    public T8 t8 { get; }
    public T9 t9 { get; }
    public T10 t10 { get; }
    public HzyTuple`10(T1 t1, T2 t2, T3 t3, T4 t4, T5 t5, T6 t6, T7 t7, T8 t8, T9 t9, T10 t10);
    [CompilerGeneratedAttribute]
public T1 get_t1();
    [CompilerGeneratedAttribute]
public T2 get_t2();
    [CompilerGeneratedAttribute]
public T3 get_t3();
    [CompilerGeneratedAttribute]
public T4 get_t4();
    [CompilerGeneratedAttribute]
public T5 get_t5();
    [CompilerGeneratedAttribute]
public T6 get_t6();
    [CompilerGeneratedAttribute]
public T7 get_t7();
    [CompilerGeneratedAttribute]
public T8 get_t8();
    [CompilerGeneratedAttribute]
public T9 get_t9();
    [CompilerGeneratedAttribute]
public T10 get_t10();
}
public class FreeSql.Internal.Model.HzyTuple`11 : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T1 <t1>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T2 <t2>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T3 <t3>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T4 <t4>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T5 <t5>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T6 <t6>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T7 <t7>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T8 <t8>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T9 <t9>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T10 <t10>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T11 <t11>k__BackingField;
    public T1 t1 { get; }
    public T2 t2 { get; }
    public T3 t3 { get; }
    public T4 t4 { get; }
    public T5 t5 { get; }
    public T6 t6 { get; }
    public T7 t7 { get; }
    public T8 t8 { get; }
    public T9 t9 { get; }
    public T10 t10 { get; }
    public T11 t11 { get; }
    public HzyTuple`11(T1 t1, T2 t2, T3 t3, T4 t4, T5 t5, T6 t6, T7 t7, T8 t8, T9 t9, T10 t10, T11 t11);
    [CompilerGeneratedAttribute]
public T1 get_t1();
    [CompilerGeneratedAttribute]
public T2 get_t2();
    [CompilerGeneratedAttribute]
public T3 get_t3();
    [CompilerGeneratedAttribute]
public T4 get_t4();
    [CompilerGeneratedAttribute]
public T5 get_t5();
    [CompilerGeneratedAttribute]
public T6 get_t6();
    [CompilerGeneratedAttribute]
public T7 get_t7();
    [CompilerGeneratedAttribute]
public T8 get_t8();
    [CompilerGeneratedAttribute]
public T9 get_t9();
    [CompilerGeneratedAttribute]
public T10 get_t10();
    [CompilerGeneratedAttribute]
public T11 get_t11();
}
public class FreeSql.Internal.Model.HzyTuple`12 : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T1 <t1>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T2 <t2>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T3 <t3>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T4 <t4>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T5 <t5>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T6 <t6>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T7 <t7>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T8 <t8>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T9 <t9>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T10 <t10>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T11 <t11>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T12 <t12>k__BackingField;
    public T1 t1 { get; }
    public T2 t2 { get; }
    public T3 t3 { get; }
    public T4 t4 { get; }
    public T5 t5 { get; }
    public T6 t6 { get; }
    public T7 t7 { get; }
    public T8 t8 { get; }
    public T9 t9 { get; }
    public T10 t10 { get; }
    public T11 t11 { get; }
    public T12 t12 { get; }
    public HzyTuple`12(T1 t1, T2 t2, T3 t3, T4 t4, T5 t5, T6 t6, T7 t7, T8 t8, T9 t9, T10 t10, T11 t11, T12 t12);
    [CompilerGeneratedAttribute]
public T1 get_t1();
    [CompilerGeneratedAttribute]
public T2 get_t2();
    [CompilerGeneratedAttribute]
public T3 get_t3();
    [CompilerGeneratedAttribute]
public T4 get_t4();
    [CompilerGeneratedAttribute]
public T5 get_t5();
    [CompilerGeneratedAttribute]
public T6 get_t6();
    [CompilerGeneratedAttribute]
public T7 get_t7();
    [CompilerGeneratedAttribute]
public T8 get_t8();
    [CompilerGeneratedAttribute]
public T9 get_t9();
    [CompilerGeneratedAttribute]
public T10 get_t10();
    [CompilerGeneratedAttribute]
public T11 get_t11();
    [CompilerGeneratedAttribute]
public T12 get_t12();
}
public class FreeSql.Internal.Model.HzyTuple`13 : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T1 <t1>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T2 <t2>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T3 <t3>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T4 <t4>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T5 <t5>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T6 <t6>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T7 <t7>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T8 <t8>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T9 <t9>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T10 <t10>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T11 <t11>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T12 <t12>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T13 <t13>k__BackingField;
    public T1 t1 { get; }
    public T2 t2 { get; }
    public T3 t3 { get; }
    public T4 t4 { get; }
    public T5 t5 { get; }
    public T6 t6 { get; }
    public T7 t7 { get; }
    public T8 t8 { get; }
    public T9 t9 { get; }
    public T10 t10 { get; }
    public T11 t11 { get; }
    public T12 t12 { get; }
    public T13 t13 { get; }
    public HzyTuple`13(T1 t1, T2 t2, T3 t3, T4 t4, T5 t5, T6 t6, T7 t7, T8 t8, T9 t9, T10 t10, T11 t11, T12 t12, T13 t13);
    [CompilerGeneratedAttribute]
public T1 get_t1();
    [CompilerGeneratedAttribute]
public T2 get_t2();
    [CompilerGeneratedAttribute]
public T3 get_t3();
    [CompilerGeneratedAttribute]
public T4 get_t4();
    [CompilerGeneratedAttribute]
public T5 get_t5();
    [CompilerGeneratedAttribute]
public T6 get_t6();
    [CompilerGeneratedAttribute]
public T7 get_t7();
    [CompilerGeneratedAttribute]
public T8 get_t8();
    [CompilerGeneratedAttribute]
public T9 get_t9();
    [CompilerGeneratedAttribute]
public T10 get_t10();
    [CompilerGeneratedAttribute]
public T11 get_t11();
    [CompilerGeneratedAttribute]
public T12 get_t12();
    [CompilerGeneratedAttribute]
public T13 get_t13();
}
public class FreeSql.Internal.Model.HzyTuple`14 : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T1 <t1>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T2 <t2>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T3 <t3>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T4 <t4>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T5 <t5>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T6 <t6>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T7 <t7>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T8 <t8>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T9 <t9>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T10 <t10>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T11 <t11>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T12 <t12>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T13 <t13>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T14 <t14>k__BackingField;
    public T1 t1 { get; }
    public T2 t2 { get; }
    public T3 t3 { get; }
    public T4 t4 { get; }
    public T5 t5 { get; }
    public T6 t6 { get; }
    public T7 t7 { get; }
    public T8 t8 { get; }
    public T9 t9 { get; }
    public T10 t10 { get; }
    public T11 t11 { get; }
    public T12 t12 { get; }
    public T13 t13 { get; }
    public T14 t14 { get; }
    public HzyTuple`14(T1 t1, T2 t2, T3 t3, T4 t4, T5 t5, T6 t6, T7 t7, T8 t8, T9 t9, T10 t10, T11 t11, T12 t12, T13 t13, T14 t14);
    [CompilerGeneratedAttribute]
public T1 get_t1();
    [CompilerGeneratedAttribute]
public T2 get_t2();
    [CompilerGeneratedAttribute]
public T3 get_t3();
    [CompilerGeneratedAttribute]
public T4 get_t4();
    [CompilerGeneratedAttribute]
public T5 get_t5();
    [CompilerGeneratedAttribute]
public T6 get_t6();
    [CompilerGeneratedAttribute]
public T7 get_t7();
    [CompilerGeneratedAttribute]
public T8 get_t8();
    [CompilerGeneratedAttribute]
public T9 get_t9();
    [CompilerGeneratedAttribute]
public T10 get_t10();
    [CompilerGeneratedAttribute]
public T11 get_t11();
    [CompilerGeneratedAttribute]
public T12 get_t12();
    [CompilerGeneratedAttribute]
public T13 get_t13();
    [CompilerGeneratedAttribute]
public T14 get_t14();
}
public class FreeSql.Internal.Model.HzyTuple`15 : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T1 <t1>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T2 <t2>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T3 <t3>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T4 <t4>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T5 <t5>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T6 <t6>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T7 <t7>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T8 <t8>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T9 <t9>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T10 <t10>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T11 <t11>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T12 <t12>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T13 <t13>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T14 <t14>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T15 <t15>k__BackingField;
    public T1 t1 { get; }
    public T2 t2 { get; }
    public T3 t3 { get; }
    public T4 t4 { get; }
    public T5 t5 { get; }
    public T6 t6 { get; }
    public T7 t7 { get; }
    public T8 t8 { get; }
    public T9 t9 { get; }
    public T10 t10 { get; }
    public T11 t11 { get; }
    public T12 t12 { get; }
    public T13 t13 { get; }
    public T14 t14 { get; }
    public T15 t15 { get; }
    public HzyTuple`15(T1 t1, T2 t2, T3 t3, T4 t4, T5 t5, T6 t6, T7 t7, T8 t8, T9 t9, T10 t10, T11 t11, T12 t12, T13 t13, T14 t14, T15 t15);
    [CompilerGeneratedAttribute]
public T1 get_t1();
    [CompilerGeneratedAttribute]
public T2 get_t2();
    [CompilerGeneratedAttribute]
public T3 get_t3();
    [CompilerGeneratedAttribute]
public T4 get_t4();
    [CompilerGeneratedAttribute]
public T5 get_t5();
    [CompilerGeneratedAttribute]
public T6 get_t6();
    [CompilerGeneratedAttribute]
public T7 get_t7();
    [CompilerGeneratedAttribute]
public T8 get_t8();
    [CompilerGeneratedAttribute]
public T9 get_t9();
    [CompilerGeneratedAttribute]
public T10 get_t10();
    [CompilerGeneratedAttribute]
public T11 get_t11();
    [CompilerGeneratedAttribute]
public T12 get_t12();
    [CompilerGeneratedAttribute]
public T13 get_t13();
    [CompilerGeneratedAttribute]
public T14 get_t14();
    [CompilerGeneratedAttribute]
public T15 get_t15();
}
public class FreeSql.Internal.Model.HzyTuple`16 : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T1 <t1>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T2 <t2>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T3 <t3>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T4 <t4>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T5 <t5>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T6 <t6>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T7 <t7>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T8 <t8>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T9 <t9>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T10 <t10>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T11 <t11>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T12 <t12>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T13 <t13>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T14 <t14>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T15 <t15>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T16 <t16>k__BackingField;
    public T1 t1 { get; }
    public T2 t2 { get; }
    public T3 t3 { get; }
    public T4 t4 { get; }
    public T5 t5 { get; }
    public T6 t6 { get; }
    public T7 t7 { get; }
    public T8 t8 { get; }
    public T9 t9 { get; }
    public T10 t10 { get; }
    public T11 t11 { get; }
    public T12 t12 { get; }
    public T13 t13 { get; }
    public T14 t14 { get; }
    public T15 t15 { get; }
    public T16 t16 { get; }
    public HzyTuple`16(T1 t1, T2 t2, T3 t3, T4 t4, T5 t5, T6 t6, T7 t7, T8 t8, T9 t9, T10 t10, T11 t11, T12 t12, T13 t13, T14 t14, T15 t15, T16 t16);
    [CompilerGeneratedAttribute]
public T1 get_t1();
    [CompilerGeneratedAttribute]
public T2 get_t2();
    [CompilerGeneratedAttribute]
public T3 get_t3();
    [CompilerGeneratedAttribute]
public T4 get_t4();
    [CompilerGeneratedAttribute]
public T5 get_t5();
    [CompilerGeneratedAttribute]
public T6 get_t6();
    [CompilerGeneratedAttribute]
public T7 get_t7();
    [CompilerGeneratedAttribute]
public T8 get_t8();
    [CompilerGeneratedAttribute]
public T9 get_t9();
    [CompilerGeneratedAttribute]
public T10 get_t10();
    [CompilerGeneratedAttribute]
public T11 get_t11();
    [CompilerGeneratedAttribute]
public T12 get_t12();
    [CompilerGeneratedAttribute]
public T13 get_t13();
    [CompilerGeneratedAttribute]
public T14 get_t14();
    [CompilerGeneratedAttribute]
public T15 get_t15();
    [CompilerGeneratedAttribute]
public T16 get_t16();
}
public class FreeSql.Internal.Model.HzyTuple`2 : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T1 <t1>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T2 <t2>k__BackingField;
    public T1 t1 { get; }
    public T2 t2 { get; }
    public HzyTuple`2(T1 t1, T2 t2);
    [CompilerGeneratedAttribute]
public T1 get_t1();
    [CompilerGeneratedAttribute]
public T2 get_t2();
}
public class FreeSql.Internal.Model.HzyTuple`3 : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T1 <t1>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T2 <t2>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T3 <t3>k__BackingField;
    public T1 t1 { get; }
    public T2 t2 { get; }
    public T3 t3 { get; }
    public HzyTuple`3(T1 t1, T2 t2, T3 t3);
    [CompilerGeneratedAttribute]
public T1 get_t1();
    [CompilerGeneratedAttribute]
public T2 get_t2();
    [CompilerGeneratedAttribute]
public T3 get_t3();
}
public class FreeSql.Internal.Model.HzyTuple`4 : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T1 <t1>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T2 <t2>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T3 <t3>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T4 <t4>k__BackingField;
    public T1 t1 { get; }
    public T2 t2 { get; }
    public T3 t3 { get; }
    public T4 t4 { get; }
    public HzyTuple`4(T1 t1, T2 t2, T3 t3, T4 t4);
    [CompilerGeneratedAttribute]
public T1 get_t1();
    [CompilerGeneratedAttribute]
public T2 get_t2();
    [CompilerGeneratedAttribute]
public T3 get_t3();
    [CompilerGeneratedAttribute]
public T4 get_t4();
}
public class FreeSql.Internal.Model.HzyTuple`5 : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T1 <t1>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T2 <t2>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T3 <t3>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T4 <t4>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T5 <t5>k__BackingField;
    public T1 t1 { get; }
    public T2 t2 { get; }
    public T3 t3 { get; }
    public T4 t4 { get; }
    public T5 t5 { get; }
    public HzyTuple`5(T1 t1, T2 t2, T3 t3, T4 t4, T5 t5);
    [CompilerGeneratedAttribute]
public T1 get_t1();
    [CompilerGeneratedAttribute]
public T2 get_t2();
    [CompilerGeneratedAttribute]
public T3 get_t3();
    [CompilerGeneratedAttribute]
public T4 get_t4();
    [CompilerGeneratedAttribute]
public T5 get_t5();
}
public class FreeSql.Internal.Model.HzyTuple`6 : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T1 <t1>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T2 <t2>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T3 <t3>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T4 <t4>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T5 <t5>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T6 <t6>k__BackingField;
    public T1 t1 { get; }
    public T2 t2 { get; }
    public T3 t3 { get; }
    public T4 t4 { get; }
    public T5 t5 { get; }
    public T6 t6 { get; }
    public HzyTuple`6(T1 t1, T2 t2, T3 t3, T4 t4, T5 t5, T6 t6);
    [CompilerGeneratedAttribute]
public T1 get_t1();
    [CompilerGeneratedAttribute]
public T2 get_t2();
    [CompilerGeneratedAttribute]
public T3 get_t3();
    [CompilerGeneratedAttribute]
public T4 get_t4();
    [CompilerGeneratedAttribute]
public T5 get_t5();
    [CompilerGeneratedAttribute]
public T6 get_t6();
}
public class FreeSql.Internal.Model.HzyTuple`7 : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T1 <t1>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T2 <t2>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T3 <t3>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T4 <t4>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T5 <t5>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T6 <t6>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T7 <t7>k__BackingField;
    public T1 t1 { get; }
    public T2 t2 { get; }
    public T3 t3 { get; }
    public T4 t4 { get; }
    public T5 t5 { get; }
    public T6 t6 { get; }
    public T7 t7 { get; }
    public HzyTuple`7(T1 t1, T2 t2, T3 t3, T4 t4, T5 t5, T6 t6, T7 t7);
    [CompilerGeneratedAttribute]
public T1 get_t1();
    [CompilerGeneratedAttribute]
public T2 get_t2();
    [CompilerGeneratedAttribute]
public T3 get_t3();
    [CompilerGeneratedAttribute]
public T4 get_t4();
    [CompilerGeneratedAttribute]
public T5 get_t5();
    [CompilerGeneratedAttribute]
public T6 get_t6();
    [CompilerGeneratedAttribute]
public T7 get_t7();
}
public class FreeSql.Internal.Model.HzyTuple`8 : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T1 <t1>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T2 <t2>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T3 <t3>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T4 <t4>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T5 <t5>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T6 <t6>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T7 <t7>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T8 <t8>k__BackingField;
    public T1 t1 { get; }
    public T2 t2 { get; }
    public T3 t3 { get; }
    public T4 t4 { get; }
    public T5 t5 { get; }
    public T6 t6 { get; }
    public T7 t7 { get; }
    public T8 t8 { get; }
    public HzyTuple`8(T1 t1, T2 t2, T3 t3, T4 t4, T5 t5, T6 t6, T7 t7, T8 t8);
    [CompilerGeneratedAttribute]
public T1 get_t1();
    [CompilerGeneratedAttribute]
public T2 get_t2();
    [CompilerGeneratedAttribute]
public T3 get_t3();
    [CompilerGeneratedAttribute]
public T4 get_t4();
    [CompilerGeneratedAttribute]
public T5 get_t5();
    [CompilerGeneratedAttribute]
public T6 get_t6();
    [CompilerGeneratedAttribute]
public T7 get_t7();
    [CompilerGeneratedAttribute]
public T8 get_t8();
}
public class FreeSql.Internal.Model.HzyTuple`9 : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T1 <t1>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T2 <t2>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T3 <t3>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T4 <t4>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T5 <t5>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T6 <t6>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T7 <t7>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T8 <t8>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T9 <t9>k__BackingField;
    public T1 t1 { get; }
    public T2 t2 { get; }
    public T3 t3 { get; }
    public T4 t4 { get; }
    public T5 t5 { get; }
    public T6 t6 { get; }
    public T7 t7 { get; }
    public T8 t8 { get; }
    public T9 t9 { get; }
    public HzyTuple`9(T1 t1, T2 t2, T3 t3, T4 t4, T5 t5, T6 t6, T7 t7, T8 t8, T9 t9);
    [CompilerGeneratedAttribute]
public T1 get_t1();
    [CompilerGeneratedAttribute]
public T2 get_t2();
    [CompilerGeneratedAttribute]
public T3 get_t3();
    [CompilerGeneratedAttribute]
public T4 get_t4();
    [CompilerGeneratedAttribute]
public T5 get_t5();
    [CompilerGeneratedAttribute]
public T6 get_t6();
    [CompilerGeneratedAttribute]
public T7 get_t7();
    [CompilerGeneratedAttribute]
public T8 get_t8();
    [CompilerGeneratedAttribute]
public T9 get_t9();
}
public class FreeSql.Internal.Model.IndexColumnInfo : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ColumnInfo <Column>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsDesc>k__BackingField;
    public ColumnInfo Column { get; public set; }
    public bool IsDesc { get; public set; }
    [CompilerGeneratedAttribute]
public ColumnInfo get_Column();
    [CompilerGeneratedAttribute]
public void set_Column(ColumnInfo value);
    [CompilerGeneratedAttribute]
public bool get_IsDesc();
    [CompilerGeneratedAttribute]
public void set_IsDesc(bool value);
}
public class FreeSql.Internal.Model.IndexInfo : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private IndexColumnInfo[] <Columns>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsUnique>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private IndexMethod <IndexMethod>k__BackingField;
    public string Name { get; public set; }
    public IndexColumnInfo[] Columns { get; public set; }
    public bool IsUnique { get; public set; }
    public IndexMethod IndexMethod { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public IndexColumnInfo[] get_Columns();
    [CompilerGeneratedAttribute]
public void set_Columns(IndexColumnInfo[] value);
    [CompilerGeneratedAttribute]
public bool get_IsUnique();
    [CompilerGeneratedAttribute]
public void set_IsUnique(bool value);
    [CompilerGeneratedAttribute]
public IndexMethod get_IndexMethod();
    [CompilerGeneratedAttribute]
public void set_IndexMethod(IndexMethod value);
}
public interface FreeSql.Internal.Model.Interface.ITypeHandler {
    public Type Type { get; }
    public abstract virtual Type get_Type();
    public abstract virtual object Deserialize(object value);
    public abstract virtual object Serialize(object value);
    public abstract virtual void FluentApi(ColumnFluent col);
}
public static class FreeSql.Internal.Model.NativeTuple : object {
    public static NativeTuple`2<T1, T2> Create(T1 item1, T2 item2);
    public static NativeTuple`3<T1, T2, T3> Create(T1 item1, T2 item2, T3 item3);
    public static NativeTuple`4<T1, T2, T3, T4> Create(T1 item1, T2 item2, T3 item3, T4 item4);
    public static NativeTuple`5<T1, T2, T3, T4, T5> Create(T1 item1, T2 item2, T3 item3, T4 item4, T5 item5);
    public static NativeTuple`6<T1, T2, T3, T4, T5, T6> Create(T1 item1, T2 item2, T3 item3, T4 item4, T5 item5, T6 item6);
    public static NativeTuple`7<T1, T2, T3, T4, T5, T6, T7> Create(T1 item1, T2 item2, T3 item3, T4 item4, T5 item5, T6 item6, T7 item7);
    public static NativeTuple`8<T1, T2, T3, T4, T5, T6, T7, T8> Create(T1 item1, T2 item2, T3 item3, T4 item4, T5 item5, T6 item6, T7 item7, T8 item8);
    public static NativeTuple`9<T1, T2, T3, T4, T5, T6, T7, T8, T9> Create(T1 item1, T2 item2, T3 item3, T4 item4, T5 item5, T6 item6, T7 item7, T8 item8, T9 item9);
    public static NativeTuple`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> Create(T1 item1, T2 item2, T3 item3, T4 item4, T5 item5, T6 item6, T7 item7, T8 item8, T9 item9, T10 item10);
    public static NativeTuple`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> Create(T1 item1, T2 item2, T3 item3, T4 item4, T5 item5, T6 item6, T7 item7, T8 item8, T9 item9, T10 item10, T11 item11);
    public static NativeTuple`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> Create(T1 item1, T2 item2, T3 item3, T4 item4, T5 item5, T6 item6, T7 item7, T8 item8, T9 item9, T10 item10, T11 item11, T12 item12);
    public static NativeTuple`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> Create(T1 item1, T2 item2, T3 item3, T4 item4, T5 item5, T6 item6, T7 item7, T8 item8, T9 item9, T10 item10, T11 item11, T12 item12, T13 item13);
    public static NativeTuple`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> Create(T1 item1, T2 item2, T3 item3, T4 item4, T5 item5, T6 item6, T7 item7, T8 item8, T9 item9, T10 item10, T11 item11, T12 item12, T13 item13, T14 item14);
    public static NativeTuple`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> Create(T1 item1, T2 item2, T3 item3, T4 item4, T5 item5, T6 item6, T7 item7, T8 item8, T9 item9, T10 item10, T11 item11, T12 item12, T13 item13, T14 item14, T15 item15);
    public static NativeTuple`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> Create(T1 item1, T2 item2, T3 item3, T4 item4, T5 item5, T6 item6, T7 item7, T8 item8, T9 item9, T10 item10, T11 item11, T12 item12, T13 item13, T14 item14, T15 item15, T16 item16);
}
public class FreeSql.Internal.Model.NativeTuple`10 : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T1 <Item1>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T2 <Item2>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T3 <Item3>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T4 <Item4>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T5 <Item5>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T6 <Item6>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T7 <Item7>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T8 <Item8>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T9 <Item9>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T10 <Item10>k__BackingField;
    public T1 Item1 { get; }
    public T2 Item2 { get; }
    public T3 Item3 { get; }
    public T4 Item4 { get; }
    public T5 Item5 { get; }
    public T6 Item6 { get; }
    public T7 Item7 { get; }
    public T8 Item8 { get; }
    public T9 Item9 { get; }
    public T10 Item10 { get; }
    public NativeTuple`10(T1 item1, T2 item2, T3 item3, T4 item4, T5 item5, T6 item6, T7 item7, T8 item8, T9 item9, T10 item10);
    [CompilerGeneratedAttribute]
public T1 get_Item1();
    [CompilerGeneratedAttribute]
public T2 get_Item2();
    [CompilerGeneratedAttribute]
public T3 get_Item3();
    [CompilerGeneratedAttribute]
public T4 get_Item4();
    [CompilerGeneratedAttribute]
public T5 get_Item5();
    [CompilerGeneratedAttribute]
public T6 get_Item6();
    [CompilerGeneratedAttribute]
public T7 get_Item7();
    [CompilerGeneratedAttribute]
public T8 get_Item8();
    [CompilerGeneratedAttribute]
public T9 get_Item9();
    [CompilerGeneratedAttribute]
public T10 get_Item10();
}
public class FreeSql.Internal.Model.NativeTuple`11 : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T1 <Item1>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T2 <Item2>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T3 <Item3>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T4 <Item4>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T5 <Item5>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T6 <Item6>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T7 <Item7>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T8 <Item8>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T9 <Item9>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T10 <Item10>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T11 <Item11>k__BackingField;
    public T1 Item1 { get; }
    public T2 Item2 { get; }
    public T3 Item3 { get; }
    public T4 Item4 { get; }
    public T5 Item5 { get; }
    public T6 Item6 { get; }
    public T7 Item7 { get; }
    public T8 Item8 { get; }
    public T9 Item9 { get; }
    public T10 Item10 { get; }
    public T11 Item11 { get; }
    public NativeTuple`11(T1 item1, T2 item2, T3 item3, T4 item4, T5 item5, T6 item6, T7 item7, T8 item8, T9 item9, T10 item10, T11 item11);
    [CompilerGeneratedAttribute]
public T1 get_Item1();
    [CompilerGeneratedAttribute]
public T2 get_Item2();
    [CompilerGeneratedAttribute]
public T3 get_Item3();
    [CompilerGeneratedAttribute]
public T4 get_Item4();
    [CompilerGeneratedAttribute]
public T5 get_Item5();
    [CompilerGeneratedAttribute]
public T6 get_Item6();
    [CompilerGeneratedAttribute]
public T7 get_Item7();
    [CompilerGeneratedAttribute]
public T8 get_Item8();
    [CompilerGeneratedAttribute]
public T9 get_Item9();
    [CompilerGeneratedAttribute]
public T10 get_Item10();
    [CompilerGeneratedAttribute]
public T11 get_Item11();
}
public class FreeSql.Internal.Model.NativeTuple`12 : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T1 <Item1>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T2 <Item2>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T3 <Item3>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T4 <Item4>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T5 <Item5>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T6 <Item6>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T7 <Item7>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T8 <Item8>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T9 <Item9>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T10 <Item10>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T11 <Item11>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T12 <Item12>k__BackingField;
    public T1 Item1 { get; }
    public T2 Item2 { get; }
    public T3 Item3 { get; }
    public T4 Item4 { get; }
    public T5 Item5 { get; }
    public T6 Item6 { get; }
    public T7 Item7 { get; }
    public T8 Item8 { get; }
    public T9 Item9 { get; }
    public T10 Item10 { get; }
    public T11 Item11 { get; }
    public T12 Item12 { get; }
    public NativeTuple`12(T1 item1, T2 item2, T3 item3, T4 item4, T5 item5, T6 item6, T7 item7, T8 item8, T9 item9, T10 item10, T11 item11, T12 item12);
    [CompilerGeneratedAttribute]
public T1 get_Item1();
    [CompilerGeneratedAttribute]
public T2 get_Item2();
    [CompilerGeneratedAttribute]
public T3 get_Item3();
    [CompilerGeneratedAttribute]
public T4 get_Item4();
    [CompilerGeneratedAttribute]
public T5 get_Item5();
    [CompilerGeneratedAttribute]
public T6 get_Item6();
    [CompilerGeneratedAttribute]
public T7 get_Item7();
    [CompilerGeneratedAttribute]
public T8 get_Item8();
    [CompilerGeneratedAttribute]
public T9 get_Item9();
    [CompilerGeneratedAttribute]
public T10 get_Item10();
    [CompilerGeneratedAttribute]
public T11 get_Item11();
    [CompilerGeneratedAttribute]
public T12 get_Item12();
}
public class FreeSql.Internal.Model.NativeTuple`13 : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T1 <Item1>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T2 <Item2>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T3 <Item3>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T4 <Item4>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T5 <Item5>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T6 <Item6>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T7 <Item7>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T8 <Item8>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T9 <Item9>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T10 <Item10>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T11 <Item11>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T12 <Item12>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T13 <Item13>k__BackingField;
    public T1 Item1 { get; }
    public T2 Item2 { get; }
    public T3 Item3 { get; }
    public T4 Item4 { get; }
    public T5 Item5 { get; }
    public T6 Item6 { get; }
    public T7 Item7 { get; }
    public T8 Item8 { get; }
    public T9 Item9 { get; }
    public T10 Item10 { get; }
    public T11 Item11 { get; }
    public T12 Item12 { get; }
    public T13 Item13 { get; }
    public NativeTuple`13(T1 item1, T2 item2, T3 item3, T4 item4, T5 item5, T6 item6, T7 item7, T8 item8, T9 item9, T10 item10, T11 item11, T12 item12, T13 item13);
    [CompilerGeneratedAttribute]
public T1 get_Item1();
    [CompilerGeneratedAttribute]
public T2 get_Item2();
    [CompilerGeneratedAttribute]
public T3 get_Item3();
    [CompilerGeneratedAttribute]
public T4 get_Item4();
    [CompilerGeneratedAttribute]
public T5 get_Item5();
    [CompilerGeneratedAttribute]
public T6 get_Item6();
    [CompilerGeneratedAttribute]
public T7 get_Item7();
    [CompilerGeneratedAttribute]
public T8 get_Item8();
    [CompilerGeneratedAttribute]
public T9 get_Item9();
    [CompilerGeneratedAttribute]
public T10 get_Item10();
    [CompilerGeneratedAttribute]
public T11 get_Item11();
    [CompilerGeneratedAttribute]
public T12 get_Item12();
    [CompilerGeneratedAttribute]
public T13 get_Item13();
}
public class FreeSql.Internal.Model.NativeTuple`14 : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T1 <Item1>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T2 <Item2>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T3 <Item3>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T4 <Item4>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T5 <Item5>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T6 <Item6>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T7 <Item7>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T8 <Item8>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T9 <Item9>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T10 <Item10>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T11 <Item11>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T12 <Item12>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T13 <Item13>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T14 <Item14>k__BackingField;
    public T1 Item1 { get; }
    public T2 Item2 { get; }
    public T3 Item3 { get; }
    public T4 Item4 { get; }
    public T5 Item5 { get; }
    public T6 Item6 { get; }
    public T7 Item7 { get; }
    public T8 Item8 { get; }
    public T9 Item9 { get; }
    public T10 Item10 { get; }
    public T11 Item11 { get; }
    public T12 Item12 { get; }
    public T13 Item13 { get; }
    public T14 Item14 { get; }
    public NativeTuple`14(T1 item1, T2 item2, T3 item3, T4 item4, T5 item5, T6 item6, T7 item7, T8 item8, T9 item9, T10 item10, T11 item11, T12 item12, T13 item13, T14 item14);
    [CompilerGeneratedAttribute]
public T1 get_Item1();
    [CompilerGeneratedAttribute]
public T2 get_Item2();
    [CompilerGeneratedAttribute]
public T3 get_Item3();
    [CompilerGeneratedAttribute]
public T4 get_Item4();
    [CompilerGeneratedAttribute]
public T5 get_Item5();
    [CompilerGeneratedAttribute]
public T6 get_Item6();
    [CompilerGeneratedAttribute]
public T7 get_Item7();
    [CompilerGeneratedAttribute]
public T8 get_Item8();
    [CompilerGeneratedAttribute]
public T9 get_Item9();
    [CompilerGeneratedAttribute]
public T10 get_Item10();
    [CompilerGeneratedAttribute]
public T11 get_Item11();
    [CompilerGeneratedAttribute]
public T12 get_Item12();
    [CompilerGeneratedAttribute]
public T13 get_Item13();
    [CompilerGeneratedAttribute]
public T14 get_Item14();
}
public class FreeSql.Internal.Model.NativeTuple`15 : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T1 <Item1>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T2 <Item2>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T3 <Item3>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T4 <Item4>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T5 <Item5>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T6 <Item6>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T7 <Item7>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T8 <Item8>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T9 <Item9>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T10 <Item10>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T11 <Item11>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T12 <Item12>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T13 <Item13>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T14 <Item14>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T15 <Item15>k__BackingField;
    public T1 Item1 { get; }
    public T2 Item2 { get; }
    public T3 Item3 { get; }
    public T4 Item4 { get; }
    public T5 Item5 { get; }
    public T6 Item6 { get; }
    public T7 Item7 { get; }
    public T8 Item8 { get; }
    public T9 Item9 { get; }
    public T10 Item10 { get; }
    public T11 Item11 { get; }
    public T12 Item12 { get; }
    public T13 Item13 { get; }
    public T14 Item14 { get; }
    public T15 Item15 { get; }
    public NativeTuple`15(T1 item1, T2 item2, T3 item3, T4 item4, T5 item5, T6 item6, T7 item7, T8 item8, T9 item9, T10 item10, T11 item11, T12 item12, T13 item13, T14 item14, T15 item15);
    [CompilerGeneratedAttribute]
public T1 get_Item1();
    [CompilerGeneratedAttribute]
public T2 get_Item2();
    [CompilerGeneratedAttribute]
public T3 get_Item3();
    [CompilerGeneratedAttribute]
public T4 get_Item4();
    [CompilerGeneratedAttribute]
public T5 get_Item5();
    [CompilerGeneratedAttribute]
public T6 get_Item6();
    [CompilerGeneratedAttribute]
public T7 get_Item7();
    [CompilerGeneratedAttribute]
public T8 get_Item8();
    [CompilerGeneratedAttribute]
public T9 get_Item9();
    [CompilerGeneratedAttribute]
public T10 get_Item10();
    [CompilerGeneratedAttribute]
public T11 get_Item11();
    [CompilerGeneratedAttribute]
public T12 get_Item12();
    [CompilerGeneratedAttribute]
public T13 get_Item13();
    [CompilerGeneratedAttribute]
public T14 get_Item14();
    [CompilerGeneratedAttribute]
public T15 get_Item15();
}
public class FreeSql.Internal.Model.NativeTuple`16 : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T1 <Item1>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T2 <Item2>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T3 <Item3>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T4 <Item4>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T5 <Item5>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T6 <Item6>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T7 <Item7>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T8 <Item8>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T9 <Item9>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T10 <Item10>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T11 <Item11>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T12 <Item12>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T13 <Item13>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T14 <Item14>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T15 <Item15>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T16 <Item16>k__BackingField;
    public T1 Item1 { get; }
    public T2 Item2 { get; }
    public T3 Item3 { get; }
    public T4 Item4 { get; }
    public T5 Item5 { get; }
    public T6 Item6 { get; }
    public T7 Item7 { get; }
    public T8 Item8 { get; }
    public T9 Item9 { get; }
    public T10 Item10 { get; }
    public T11 Item11 { get; }
    public T12 Item12 { get; }
    public T13 Item13 { get; }
    public T14 Item14 { get; }
    public T15 Item15 { get; }
    public T16 Item16 { get; }
    public NativeTuple`16(T1 item1, T2 item2, T3 item3, T4 item4, T5 item5, T6 item6, T7 item7, T8 item8, T9 item9, T10 item10, T11 item11, T12 item12, T13 item13, T14 item14, T15 item15, T16 item16);
    [CompilerGeneratedAttribute]
public T1 get_Item1();
    [CompilerGeneratedAttribute]
public T2 get_Item2();
    [CompilerGeneratedAttribute]
public T3 get_Item3();
    [CompilerGeneratedAttribute]
public T4 get_Item4();
    [CompilerGeneratedAttribute]
public T5 get_Item5();
    [CompilerGeneratedAttribute]
public T6 get_Item6();
    [CompilerGeneratedAttribute]
public T7 get_Item7();
    [CompilerGeneratedAttribute]
public T8 get_Item8();
    [CompilerGeneratedAttribute]
public T9 get_Item9();
    [CompilerGeneratedAttribute]
public T10 get_Item10();
    [CompilerGeneratedAttribute]
public T11 get_Item11();
    [CompilerGeneratedAttribute]
public T12 get_Item12();
    [CompilerGeneratedAttribute]
public T13 get_Item13();
    [CompilerGeneratedAttribute]
public T14 get_Item14();
    [CompilerGeneratedAttribute]
public T15 get_Item15();
    [CompilerGeneratedAttribute]
public T16 get_Item16();
}
public class FreeSql.Internal.Model.NativeTuple`2 : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T1 <Item1>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T2 <Item2>k__BackingField;
    public T1 Item1 { get; }
    public T2 Item2 { get; }
    public NativeTuple`2(T1 item1, T2 item2);
    [CompilerGeneratedAttribute]
public T1 get_Item1();
    [CompilerGeneratedAttribute]
public T2 get_Item2();
}
public class FreeSql.Internal.Model.NativeTuple`3 : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T1 <Item1>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T2 <Item2>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T3 <Item3>k__BackingField;
    public T1 Item1 { get; }
    public T2 Item2 { get; }
    public T3 Item3 { get; }
    public NativeTuple`3(T1 item1, T2 item2, T3 item3);
    [CompilerGeneratedAttribute]
public T1 get_Item1();
    [CompilerGeneratedAttribute]
public T2 get_Item2();
    [CompilerGeneratedAttribute]
public T3 get_Item3();
}
public class FreeSql.Internal.Model.NativeTuple`4 : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T1 <Item1>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T2 <Item2>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T3 <Item3>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T4 <Item4>k__BackingField;
    public T1 Item1 { get; }
    public T2 Item2 { get; }
    public T3 Item3 { get; }
    public T4 Item4 { get; }
    public NativeTuple`4(T1 item1, T2 item2, T3 item3, T4 item4);
    [CompilerGeneratedAttribute]
public T1 get_Item1();
    [CompilerGeneratedAttribute]
public T2 get_Item2();
    [CompilerGeneratedAttribute]
public T3 get_Item3();
    [CompilerGeneratedAttribute]
public T4 get_Item4();
}
public class FreeSql.Internal.Model.NativeTuple`5 : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T1 <Item1>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T2 <Item2>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T3 <Item3>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T4 <Item4>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T5 <Item5>k__BackingField;
    public T1 Item1 { get; }
    public T2 Item2 { get; }
    public T3 Item3 { get; }
    public T4 Item4 { get; }
    public T5 Item5 { get; }
    public NativeTuple`5(T1 item1, T2 item2, T3 item3, T4 item4, T5 item5);
    [CompilerGeneratedAttribute]
public T1 get_Item1();
    [CompilerGeneratedAttribute]
public T2 get_Item2();
    [CompilerGeneratedAttribute]
public T3 get_Item3();
    [CompilerGeneratedAttribute]
public T4 get_Item4();
    [CompilerGeneratedAttribute]
public T5 get_Item5();
}
public class FreeSql.Internal.Model.NativeTuple`6 : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T1 <Item1>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T2 <Item2>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T3 <Item3>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T4 <Item4>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T5 <Item5>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T6 <Item6>k__BackingField;
    public T1 Item1 { get; }
    public T2 Item2 { get; }
    public T3 Item3 { get; }
    public T4 Item4 { get; }
    public T5 Item5 { get; }
    public T6 Item6 { get; }
    public NativeTuple`6(T1 item1, T2 item2, T3 item3, T4 item4, T5 item5, T6 item6);
    [CompilerGeneratedAttribute]
public T1 get_Item1();
    [CompilerGeneratedAttribute]
public T2 get_Item2();
    [CompilerGeneratedAttribute]
public T3 get_Item3();
    [CompilerGeneratedAttribute]
public T4 get_Item4();
    [CompilerGeneratedAttribute]
public T5 get_Item5();
    [CompilerGeneratedAttribute]
public T6 get_Item6();
}
public class FreeSql.Internal.Model.NativeTuple`7 : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T1 <Item1>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T2 <Item2>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T3 <Item3>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T4 <Item4>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T5 <Item5>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T6 <Item6>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T7 <Item7>k__BackingField;
    public T1 Item1 { get; }
    public T2 Item2 { get; }
    public T3 Item3 { get; }
    public T4 Item4 { get; }
    public T5 Item5 { get; }
    public T6 Item6 { get; }
    public T7 Item7 { get; }
    public NativeTuple`7(T1 item1, T2 item2, T3 item3, T4 item4, T5 item5, T6 item6, T7 item7);
    [CompilerGeneratedAttribute]
public T1 get_Item1();
    [CompilerGeneratedAttribute]
public T2 get_Item2();
    [CompilerGeneratedAttribute]
public T3 get_Item3();
    [CompilerGeneratedAttribute]
public T4 get_Item4();
    [CompilerGeneratedAttribute]
public T5 get_Item5();
    [CompilerGeneratedAttribute]
public T6 get_Item6();
    [CompilerGeneratedAttribute]
public T7 get_Item7();
}
public class FreeSql.Internal.Model.NativeTuple`8 : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T1 <Item1>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T2 <Item2>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T3 <Item3>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T4 <Item4>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T5 <Item5>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T6 <Item6>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T7 <Item7>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T8 <Item8>k__BackingField;
    public T1 Item1 { get; }
    public T2 Item2 { get; }
    public T3 Item3 { get; }
    public T4 Item4 { get; }
    public T5 Item5 { get; }
    public T6 Item6 { get; }
    public T7 Item7 { get; }
    public T8 Item8 { get; }
    public NativeTuple`8(T1 item1, T2 item2, T3 item3, T4 item4, T5 item5, T6 item6, T7 item7, T8 item8);
    [CompilerGeneratedAttribute]
public T1 get_Item1();
    [CompilerGeneratedAttribute]
public T2 get_Item2();
    [CompilerGeneratedAttribute]
public T3 get_Item3();
    [CompilerGeneratedAttribute]
public T4 get_Item4();
    [CompilerGeneratedAttribute]
public T5 get_Item5();
    [CompilerGeneratedAttribute]
public T6 get_Item6();
    [CompilerGeneratedAttribute]
public T7 get_Item7();
    [CompilerGeneratedAttribute]
public T8 get_Item8();
}
public class FreeSql.Internal.Model.NativeTuple`9 : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T1 <Item1>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T2 <Item2>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T3 <Item3>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T4 <Item4>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T5 <Item5>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T6 <Item6>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T7 <Item7>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T8 <Item8>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T9 <Item9>k__BackingField;
    public T1 Item1 { get; }
    public T2 Item2 { get; }
    public T3 Item3 { get; }
    public T4 Item4 { get; }
    public T5 Item5 { get; }
    public T6 Item6 { get; }
    public T7 Item7 { get; }
    public T8 Item8 { get; }
    public T9 Item9 { get; }
    public NativeTuple`9(T1 item1, T2 item2, T3 item3, T4 item4, T5 item5, T6 item6, T7 item7, T8 item8, T9 item9);
    [CompilerGeneratedAttribute]
public T1 get_Item1();
    [CompilerGeneratedAttribute]
public T2 get_Item2();
    [CompilerGeneratedAttribute]
public T3 get_Item3();
    [CompilerGeneratedAttribute]
public T4 get_Item4();
    [CompilerGeneratedAttribute]
public T5 get_Item5();
    [CompilerGeneratedAttribute]
public T6 get_Item6();
    [CompilerGeneratedAttribute]
public T7 get_Item7();
    [CompilerGeneratedAttribute]
public T8 get_Item8();
    [CompilerGeneratedAttribute]
public T9 get_Item9();
}
public class FreeSql.Internal.Model.ReadAnonymousTypeAfInfo : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ReadAnonymousTypeInfo <map>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <field>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private List`1<NativeTuple`3<string, IList, int>> <fillIncludeMany>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private List`1<NativeTuple`3<Expression, IList, int>> <fillSubSelectMany>k__BackingField;
    public ReadAnonymousTypeInfo map { get; }
    public string field { get; }
    public List`1<NativeTuple`3<string, IList, int>> fillIncludeMany { get; public set; }
    public List`1<NativeTuple`3<Expression, IList, int>> fillSubSelectMany { get; public set; }
    public ReadAnonymousTypeAfInfo(ReadAnonymousTypeInfo map, string field);
    [CompilerGeneratedAttribute]
public ReadAnonymousTypeInfo get_map();
    [CompilerGeneratedAttribute]
public string get_field();
    [CompilerGeneratedAttribute]
public List`1<NativeTuple`3<string, IList, int>> get_fillIncludeMany();
    [CompilerGeneratedAttribute]
public void set_fillIncludeMany(List`1<NativeTuple`3<string, IList, int>> value);
    [CompilerGeneratedAttribute]
public List`1<NativeTuple`3<Expression, IList, int>> get_fillSubSelectMany();
    [CompilerGeneratedAttribute]
public void set_fillSubSelectMany(List`1<NativeTuple`3<Expression, IList, int>> value);
}
public class FreeSql.Internal.Model.ReadAnonymousTypeInfo : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private PropertyInfo <Property>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private FieldInfo <ReflectionField>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <CsName>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Type <CsType>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Type <MapType>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <DbField>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <DbNestedField>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ConstructorInfo <Consturctor>k__BackingField;
    public List`1<ReadAnonymousTypeInfo> Childs;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private TableInfo <Table>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsEntity>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsDefaultCtor>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <IncludeManyKey>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Expression <SubSelectMany>k__BackingField;
    public PropertyInfo Property { get; public set; }
    public FieldInfo ReflectionField { get; public set; }
    public string CsName { get; public set; }
    public Type CsType { get; public set; }
    public Type MapType { get; public set; }
    public string DbField { get; public set; }
    public string DbNestedField { get; public set; }
    public ConstructorInfo Consturctor { get; public set; }
    public TableInfo Table { get; public set; }
    public bool IsEntity { get; public set; }
    public bool IsDefaultCtor { get; public set; }
    public string IncludeManyKey { get; public set; }
    public Expression SubSelectMany { get; public set; }
    [CompilerGeneratedAttribute]
public PropertyInfo get_Property();
    [CompilerGeneratedAttribute]
public void set_Property(PropertyInfo value);
    [CompilerGeneratedAttribute]
public FieldInfo get_ReflectionField();
    [CompilerGeneratedAttribute]
public void set_ReflectionField(FieldInfo value);
    [CompilerGeneratedAttribute]
public string get_CsName();
    [CompilerGeneratedAttribute]
public void set_CsName(string value);
    [CompilerGeneratedAttribute]
public Type get_CsType();
    [CompilerGeneratedAttribute]
public void set_CsType(Type value);
    [CompilerGeneratedAttribute]
public Type get_MapType();
    [CompilerGeneratedAttribute]
public void set_MapType(Type value);
    [CompilerGeneratedAttribute]
public string get_DbField();
    [CompilerGeneratedAttribute]
public void set_DbField(string value);
    [CompilerGeneratedAttribute]
public string get_DbNestedField();
    [CompilerGeneratedAttribute]
public void set_DbNestedField(string value);
    [CompilerGeneratedAttribute]
public ConstructorInfo get_Consturctor();
    [CompilerGeneratedAttribute]
public void set_Consturctor(ConstructorInfo value);
    [CompilerGeneratedAttribute]
public TableInfo get_Table();
    [CompilerGeneratedAttribute]
public void set_Table(TableInfo value);
    [CompilerGeneratedAttribute]
public bool get_IsEntity();
    [CompilerGeneratedAttribute]
public void set_IsEntity(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsDefaultCtor();
    [CompilerGeneratedAttribute]
public void set_IsDefaultCtor(bool value);
    [CompilerGeneratedAttribute]
public string get_IncludeManyKey();
    [CompilerGeneratedAttribute]
public void set_IncludeManyKey(string value);
    [CompilerGeneratedAttribute]
public Expression get_SubSelectMany();
    [CompilerGeneratedAttribute]
public void set_SubSelectMany(Expression value);
    public ColumnInfo GetColumn();
    public void CopyTo(ReadAnonymousTypeInfo target);
    public List`1<ReadAnonymousTypeInfo> GetAllChilds(int maxDepth);
    [CompilerGeneratedAttribute]
internal static void <CopyTo>g__LocalEachCopyChilds|54_0(List`1<ReadAnonymousTypeInfo> from, List`1<ReadAnonymousTypeInfo> to);
}
public class FreeSql.Internal.Model.ReadAnonymousTypeOtherInfo : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <field>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ReadAnonymousTypeInfo <read>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private List`1<object> <retlist>k__BackingField;
    public string field { get; }
    public ReadAnonymousTypeInfo read { get; }
    public List`1<object> retlist { get; }
    public ReadAnonymousTypeOtherInfo(string field, ReadAnonymousTypeInfo read, List`1<object> retlist);
    [CompilerGeneratedAttribute]
public string get_field();
    [CompilerGeneratedAttribute]
public ReadAnonymousTypeInfo get_read();
    [CompilerGeneratedAttribute]
public List`1<object> get_retlist();
}
public class FreeSql.Internal.Model.SelectColumnInfo : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ColumnInfo <Column>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private SelectTableInfo <Table>k__BackingField;
    public ColumnInfo Column { get; public set; }
    public SelectTableInfo Table { get; public set; }
    [CompilerGeneratedAttribute]
public ColumnInfo get_Column();
    [CompilerGeneratedAttribute]
public void set_Column(ColumnInfo value);
    [CompilerGeneratedAttribute]
public SelectTableInfo get_Table();
    [CompilerGeneratedAttribute]
public void set_Table(SelectTableInfo value);
}
public class FreeSql.Internal.Model.SelectTableInfo : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private TableInfo <Table>k__BackingField;
    private string _alias;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <AliasInit>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <On>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <NavigateCondition>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ParameterExpression <Parameter>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private SelectTableInfoType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Cascade>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <CascadeBefore>k__BackingField;
    public TableInfo Table { get; public set; }
    public string Alias { get; public set; }
    public string AliasInit { get; public set; }
    public string On { get; public set; }
    public string NavigateCondition { get; public set; }
    public ParameterExpression Parameter { get; public set; }
    public SelectTableInfoType Type { get; public set; }
    public string Cascade { get; public set; }
    public string CascadeBefore { get; public set; }
    [CompilerGeneratedAttribute]
public TableInfo get_Table();
    [CompilerGeneratedAttribute]
public void set_Table(TableInfo value);
    public string get_Alias();
    public void set_Alias(string value);
    [CompilerGeneratedAttribute]
public string get_AliasInit();
    [CompilerGeneratedAttribute]
public void set_AliasInit(string value);
    [CompilerGeneratedAttribute]
public string get_On();
    [CompilerGeneratedAttribute]
public void set_On(string value);
    [CompilerGeneratedAttribute]
public string get_NavigateCondition();
    [CompilerGeneratedAttribute]
public void set_NavigateCondition(string value);
    [CompilerGeneratedAttribute]
public ParameterExpression get_Parameter();
    [CompilerGeneratedAttribute]
public void set_Parameter(ParameterExpression value);
    [CompilerGeneratedAttribute]
public SelectTableInfoType get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(SelectTableInfoType value);
    [CompilerGeneratedAttribute]
public string get_Cascade();
    [CompilerGeneratedAttribute]
public void set_Cascade(string value);
    [CompilerGeneratedAttribute]
public string get_CascadeBefore();
    [CompilerGeneratedAttribute]
public void set_CascadeBefore(string value);
}
public enum FreeSql.Internal.Model.SelectTableInfoType : Enum {
    public int value__;
    public static SelectTableInfoType From;
    public static SelectTableInfoType LeftJoin;
    public static SelectTableInfoType InnerJoin;
    public static SelectTableInfoType RightJoin;
    public static SelectTableInfoType RawJoin;
    public static SelectTableInfoType Parent;
}
public class FreeSql.Internal.Model.TableInfo : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Type <Type>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Type <TypeLazy>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private MethodInfo <TypeLazySetOrm>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Dictionary`2<string, PropertyInfo> <Properties>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Dictionary`2<string, ColumnInfo> <Columns>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Dictionary`2<string, ColumnInfo> <ColumnsByCs>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Dictionary`2<string, ColumnInfo> <ColumnsByCsIgnore>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ColumnInfo[] <ColumnsByPosition>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ColumnInfo[] <ColumnsByCanUpdateDbUpdateValue>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ColumnInfo[] <Primarys>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private IndexInfo[] <Indexes>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <CsName>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <DbName>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <DbOldName>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <DisableSyncStructure>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Comment>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsRereadSql>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsDictionaryType>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private IAsTable <AsTableImpl>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ColumnInfo <AsTableColumn>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ColumnInfo <VersionColumn>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ConcurrentDictionary`2<string, TableRef> <_refs>k__BackingField;
    public Type Type { get; public set; }
    public Type TypeLazy { get; public set; }
    public MethodInfo TypeLazySetOrm { get; public set; }
    public Dictionary`2<string, PropertyInfo> Properties { get; public set; }
    public Dictionary`2<string, ColumnInfo> Columns { get; public set; }
    public Dictionary`2<string, ColumnInfo> ColumnsByCs { get; public set; }
    public Dictionary`2<string, ColumnInfo> ColumnsByCsIgnore { get; public set; }
    public ColumnInfo[] ColumnsByPosition { get; public set; }
    public ColumnInfo[] ColumnsByCanUpdateDbUpdateValue { get; public set; }
    public ColumnInfo[] Primarys { get; public set; }
    public IndexInfo[] Indexes { get; public set; }
    public string CsName { get; public set; }
    public string DbName { get; public set; }
    public string DbOldName { get; public set; }
    public bool DisableSyncStructure { get; public set; }
    public string Comment { get; public set; }
    public bool IsRereadSql { get; internal set; }
    public bool IsDictionaryType { get; public set; }
    public IAsTable AsTableImpl { get; internal set; }
    public ColumnInfo AsTableColumn { get; internal set; }
    public ColumnInfo VersionColumn { get; public set; }
    private ConcurrentDictionary`2<string, TableRef> _refs { get; }
    [CompilerGeneratedAttribute]
public Type get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(Type value);
    [CompilerGeneratedAttribute]
public Type get_TypeLazy();
    [CompilerGeneratedAttribute]
public void set_TypeLazy(Type value);
    [CompilerGeneratedAttribute]
public MethodInfo get_TypeLazySetOrm();
    [CompilerGeneratedAttribute]
public void set_TypeLazySetOrm(MethodInfo value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, PropertyInfo> get_Properties();
    [CompilerGeneratedAttribute]
public void set_Properties(Dictionary`2<string, PropertyInfo> value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, ColumnInfo> get_Columns();
    [CompilerGeneratedAttribute]
public void set_Columns(Dictionary`2<string, ColumnInfo> value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, ColumnInfo> get_ColumnsByCs();
    [CompilerGeneratedAttribute]
public void set_ColumnsByCs(Dictionary`2<string, ColumnInfo> value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, ColumnInfo> get_ColumnsByCsIgnore();
    [CompilerGeneratedAttribute]
public void set_ColumnsByCsIgnore(Dictionary`2<string, ColumnInfo> value);
    [CompilerGeneratedAttribute]
public ColumnInfo[] get_ColumnsByPosition();
    [CompilerGeneratedAttribute]
public void set_ColumnsByPosition(ColumnInfo[] value);
    [CompilerGeneratedAttribute]
public ColumnInfo[] get_ColumnsByCanUpdateDbUpdateValue();
    [CompilerGeneratedAttribute]
public void set_ColumnsByCanUpdateDbUpdateValue(ColumnInfo[] value);
    [CompilerGeneratedAttribute]
public ColumnInfo[] get_Primarys();
    [CompilerGeneratedAttribute]
public void set_Primarys(ColumnInfo[] value);
    [CompilerGeneratedAttribute]
public IndexInfo[] get_Indexes();
    [CompilerGeneratedAttribute]
public void set_Indexes(IndexInfo[] value);
    [CompilerGeneratedAttribute]
public string get_CsName();
    [CompilerGeneratedAttribute]
public void set_CsName(string value);
    [CompilerGeneratedAttribute]
public string get_DbName();
    [CompilerGeneratedAttribute]
public void set_DbName(string value);
    [CompilerGeneratedAttribute]
public string get_DbOldName();
    [CompilerGeneratedAttribute]
public void set_DbOldName(string value);
    [CompilerGeneratedAttribute]
public bool get_DisableSyncStructure();
    [CompilerGeneratedAttribute]
public void set_DisableSyncStructure(bool value);
    [CompilerGeneratedAttribute]
public string get_Comment();
    [CompilerGeneratedAttribute]
public void set_Comment(string value);
    [CompilerGeneratedAttribute]
public bool get_IsRereadSql();
    [CompilerGeneratedAttribute]
internal void set_IsRereadSql(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsDictionaryType();
    [CompilerGeneratedAttribute]
public void set_IsDictionaryType(bool value);
    [CompilerGeneratedAttribute]
public IAsTable get_AsTableImpl();
    [CompilerGeneratedAttribute]
internal void set_AsTableImpl(IAsTable value);
    [CompilerGeneratedAttribute]
public ColumnInfo get_AsTableColumn();
    [CompilerGeneratedAttribute]
internal void set_AsTableColumn(ColumnInfo value);
    [CompilerGeneratedAttribute]
public ColumnInfo get_VersionColumn();
    [CompilerGeneratedAttribute]
public void set_VersionColumn(ColumnInfo value);
    public void SetAsTable(IAsTable astable, ColumnInfo column);
    [CompilerGeneratedAttribute]
private ConcurrentDictionary`2<string, TableRef> get__refs();
    internal void AddOrUpdateTableRef(string propertyName, TableRef tbref);
    public TableRef GetTableRef(string propertyName, bool isThrowException, bool isCascadeQuery);
    public IEnumerable`1<KeyValuePair`2<string, TableRef>> GetAllTableRef();
    public static TableInfo GetDefaultTable(Type type);
}
public class FreeSql.Internal.Model.TableRef : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private PropertyInfo <Property>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private TableRefType <RefType>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Type <RefEntityType>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Type <RefMiddleEntityType>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private List`1<ColumnInfo> <Columns>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private List`1<ColumnInfo> <MiddleColumns>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private List`1<ColumnInfo> <RefColumns>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Exception <Exception>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsTempPrimary>k__BackingField;
    public PropertyInfo Property { get; public set; }
    public TableRefType RefType { get; public set; }
    public Type RefEntityType { get; public set; }
    public Type RefMiddleEntityType { get; public set; }
    public List`1<ColumnInfo> Columns { get; public set; }
    public List`1<ColumnInfo> MiddleColumns { get; public set; }
    public List`1<ColumnInfo> RefColumns { get; public set; }
    public Exception Exception { get; public set; }
    public bool IsTempPrimary { get; public set; }
    [CompilerGeneratedAttribute]
public PropertyInfo get_Property();
    [CompilerGeneratedAttribute]
public void set_Property(PropertyInfo value);
    [CompilerGeneratedAttribute]
public TableRefType get_RefType();
    [CompilerGeneratedAttribute]
public void set_RefType(TableRefType value);
    [CompilerGeneratedAttribute]
public Type get_RefEntityType();
    [CompilerGeneratedAttribute]
public void set_RefEntityType(Type value);
    [CompilerGeneratedAttribute]
public Type get_RefMiddleEntityType();
    [CompilerGeneratedAttribute]
public void set_RefMiddleEntityType(Type value);
    [CompilerGeneratedAttribute]
public List`1<ColumnInfo> get_Columns();
    [CompilerGeneratedAttribute]
public void set_Columns(List`1<ColumnInfo> value);
    [CompilerGeneratedAttribute]
public List`1<ColumnInfo> get_MiddleColumns();
    [CompilerGeneratedAttribute]
public void set_MiddleColumns(List`1<ColumnInfo> value);
    [CompilerGeneratedAttribute]
public List`1<ColumnInfo> get_RefColumns();
    [CompilerGeneratedAttribute]
public void set_RefColumns(List`1<ColumnInfo> value);
    [CompilerGeneratedAttribute]
public Exception get_Exception();
    [CompilerGeneratedAttribute]
public void set_Exception(Exception value);
    [CompilerGeneratedAttribute]
public bool get_IsTempPrimary();
    [CompilerGeneratedAttribute]
public void set_IsTempPrimary(bool value);
}
public enum FreeSql.Internal.Model.TableRefType : Enum {
    public int value__;
    public static TableRefType OneToOne;
    public static TableRefType ManyToOne;
    public static TableRefType OneToMany;
    public static TableRefType ManyToMany;
    public static TableRefType PgArrayToMany;
}
public abstract class FreeSql.Internal.Model.TypeHandler`1 : object {
    public Type Type { get; }
    public abstract virtual T Deserialize(object value);
    public abstract virtual object Serialize(T value);
    public virtual void FluentApi(ColumnFluent col);
    public sealed virtual Type get_Type();
    private sealed virtual override object FreeSql.Internal.Model.Interface.ITypeHandler.Deserialize(object value);
    private sealed virtual override object FreeSql.Internal.Model.Interface.ITypeHandler.Serialize(object value);
}
public enum FreeSql.Internal.NameConvertType : Enum {
    public int value__;
    public static NameConvertType None;
    public static NameConvertType PascalCaseToUnderscore;
    public static NameConvertType PascalCaseToUnderscoreWithUpper;
    public static NameConvertType PascalCaseToUnderscoreWithLower;
    public static NameConvertType ToUpper;
    public static NameConvertType ToLower;
}
public class FreeSql.Internal.ObjectPool.DefaultPolicy`1 : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <PoolSize>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private TimeSpan <SyncGetTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private TimeSpan <IdleTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <AsyncGetCapacity>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsThrowGetTimeoutException>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsAutoDisposeWithSystem>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <CheckAvailableInterval>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <Weight>k__BackingField;
    public Func`1<T> CreateObject;
    public Action`1<Object`1<T>> OnGetObject;
    public string Name { get; public set; }
    public int PoolSize { get; public set; }
    public TimeSpan SyncGetTimeout { get; public set; }
    public TimeSpan IdleTimeout { get; public set; }
    public int AsyncGetCapacity { get; public set; }
    public bool IsThrowGetTimeoutException { get; public set; }
    public bool IsAutoDisposeWithSystem { get; public set; }
    public int CheckAvailableInterval { get; public set; }
    public int Weight { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Name(string value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_PoolSize();
    [CompilerGeneratedAttribute]
public sealed virtual void set_PoolSize(int value);
    [CompilerGeneratedAttribute]
public sealed virtual TimeSpan get_SyncGetTimeout();
    [CompilerGeneratedAttribute]
public sealed virtual void set_SyncGetTimeout(TimeSpan value);
    [CompilerGeneratedAttribute]
public sealed virtual TimeSpan get_IdleTimeout();
    [CompilerGeneratedAttribute]
public sealed virtual void set_IdleTimeout(TimeSpan value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_AsyncGetCapacity();
    [CompilerGeneratedAttribute]
public sealed virtual void set_AsyncGetCapacity(int value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsThrowGetTimeoutException();
    [CompilerGeneratedAttribute]
public sealed virtual void set_IsThrowGetTimeoutException(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsAutoDisposeWithSystem();
    [CompilerGeneratedAttribute]
public sealed virtual void set_IsAutoDisposeWithSystem(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_CheckAvailableInterval();
    [CompilerGeneratedAttribute]
public sealed virtual void set_CheckAvailableInterval(int value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_Weight();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Weight(int value);
    public sealed virtual T OnCreate();
    public sealed virtual void OnDestroy(T obj);
    public sealed virtual void OnGet(Object`1<T> obj);
    public sealed virtual Task OnGetAsync(Object`1<T> obj);
    public sealed virtual void OnGetTimeout();
    public sealed virtual void OnReturn(Object`1<T> obj);
    public sealed virtual bool OnCheckAvailable(Object`1<T> obj);
    public sealed virtual void OnAvailable();
    public sealed virtual void OnUnavailable();
}
public interface FreeSql.Internal.ObjectPool.IObjectPool`1 {
    public IPolicy`1<T> Policy { get; }
    public bool IsAvailable { get; }
    public Exception UnavailableException { get; }
    public Nullable`1<DateTime> UnavailableTime { get; }
    public string Statistics { get; }
    public string StatisticsFullily { get; }
    public abstract virtual IPolicy`1<T> get_Policy();
    public abstract virtual bool get_IsAvailable();
    public abstract virtual Exception get_UnavailableException();
    public abstract virtual Nullable`1<DateTime> get_UnavailableTime();
    public abstract virtual bool SetUnavailable(Exception exception, DateTime lastGetTime);
    public abstract virtual string get_Statistics();
    public abstract virtual string get_StatisticsFullily();
    public abstract virtual Object`1<T> Get(Nullable`1<TimeSpan> timeout);
    public abstract virtual Task`1<Object`1<T>> GetAsync();
    public abstract virtual void Return(Object`1<T> obj, bool isReset);
}
public interface FreeSql.Internal.ObjectPool.IPolicy`1 {
    public string Name { get; public set; }
    public int PoolSize { get; public set; }
    public TimeSpan SyncGetTimeout { get; public set; }
    public TimeSpan IdleTimeout { get; public set; }
    public int AsyncGetCapacity { get; public set; }
    public bool IsThrowGetTimeoutException { get; public set; }
    public bool IsAutoDisposeWithSystem { get; public set; }
    public int CheckAvailableInterval { get; public set; }
    public int Weight { get; public set; }
    public abstract virtual string get_Name();
    public abstract virtual void set_Name(string value);
    public abstract virtual int get_PoolSize();
    public abstract virtual void set_PoolSize(int value);
    public abstract virtual TimeSpan get_SyncGetTimeout();
    public abstract virtual void set_SyncGetTimeout(TimeSpan value);
    public abstract virtual TimeSpan get_IdleTimeout();
    public abstract virtual void set_IdleTimeout(TimeSpan value);
    public abstract virtual int get_AsyncGetCapacity();
    public abstract virtual void set_AsyncGetCapacity(int value);
    public abstract virtual bool get_IsThrowGetTimeoutException();
    public abstract virtual void set_IsThrowGetTimeoutException(bool value);
    public abstract virtual bool get_IsAutoDisposeWithSystem();
    public abstract virtual void set_IsAutoDisposeWithSystem(bool value);
    public abstract virtual int get_CheckAvailableInterval();
    public abstract virtual void set_CheckAvailableInterval(int value);
    public abstract virtual int get_Weight();
    public abstract virtual void set_Weight(int value);
    public abstract virtual T OnCreate();
    public abstract virtual void OnDestroy(T obj);
    public abstract virtual void OnGetTimeout();
    public abstract virtual void OnGet(Object`1<T> obj);
    public abstract virtual Task OnGetAsync(Object`1<T> obj);
    public abstract virtual void OnReturn(Object`1<T> obj);
    public abstract virtual bool OnCheckAvailable(Object`1<T> obj);
    public abstract virtual void OnAvailable();
    public abstract virtual void OnUnavailable();
}
public class FreeSql.Internal.ObjectPool.Object`1 : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private IObjectPool`1<T> <Pool>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <Id>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T <Value>k__BackingField;
    internal long _getTimes;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private DateTime <LastGetTime>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private DateTime <LastGetTimeCopy>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private DateTime <LastReturnTime>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private DateTime <CreateTime>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <LastGetThreadId>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <LastReturnThreadId>k__BackingField;
    internal bool _isReturned;
    public IObjectPool`1<T> Pool { get; internal set; }
    public int Id { get; internal set; }
    public T Value { get; internal set; }
    public long GetTimes { get; }
    public DateTime LastGetTime { get; internal set; }
    public DateTime LastGetTimeCopy { get; internal set; }
    public DateTime LastReturnTime { get; internal set; }
    public DateTime CreateTime { get; internal set; }
    public int LastGetThreadId { get; internal set; }
    public int LastReturnThreadId { get; internal set; }
    public static Object`1<T> InitWith(IObjectPool`1<T> pool, int id, T value);
    [CompilerGeneratedAttribute]
public IObjectPool`1<T> get_Pool();
    [CompilerGeneratedAttribute]
internal void set_Pool(IObjectPool`1<T> value);
    [CompilerGeneratedAttribute]
public int get_Id();
    [CompilerGeneratedAttribute]
internal void set_Id(int value);
    [CompilerGeneratedAttribute]
public T get_Value();
    [CompilerGeneratedAttribute]
internal void set_Value(T value);
    public long get_GetTimes();
    [CompilerGeneratedAttribute]
public DateTime get_LastGetTime();
    [CompilerGeneratedAttribute]
internal void set_LastGetTime(DateTime value);
    [CompilerGeneratedAttribute]
public DateTime get_LastGetTimeCopy();
    [CompilerGeneratedAttribute]
internal void set_LastGetTimeCopy(DateTime value);
    [CompilerGeneratedAttribute]
public DateTime get_LastReturnTime();
    [CompilerGeneratedAttribute]
internal void set_LastReturnTime(DateTime value);
    [CompilerGeneratedAttribute]
public DateTime get_CreateTime();
    [CompilerGeneratedAttribute]
internal void set_CreateTime(DateTime value);
    [CompilerGeneratedAttribute]
public int get_LastGetThreadId();
    [CompilerGeneratedAttribute]
internal void set_LastGetThreadId(int value);
    [CompilerGeneratedAttribute]
public int get_LastReturnThreadId();
    [CompilerGeneratedAttribute]
internal void set_LastReturnThreadId(int value);
    public virtual string ToString();
    public void ResetValue();
    public sealed virtual void Dispose();
}
public class FreeSql.Internal.ObjectPool.ObjectPool`1 : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private IPolicy`1<T> <Policy>k__BackingField;
    private object _allObjectsLock;
    internal List`1<Object`1<T>> _allObjects;
    internal ConcurrentStack`1<Object`1<T>> _freeObjects;
    private ConcurrentQueue`1<GetSyncQueueInfo<T>> _getSyncQueue;
    private ConcurrentQueue`1<TaskCompletionSource`1<Object`1<T>>> _getAsyncQueue;
    private ConcurrentQueue`1<bool> _getQueue;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Exception <UnavailableException>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Nullable`1<DateTime> <UnavailableTime>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Nullable`1<DateTime> <AvailableTime>k__BackingField;
    private object UnavailableLock;
    private bool running;
    public IPolicy`1<T> Policy { get; protected set; }
    public bool IsAvailable { get; }
    public Exception UnavailableException { get; private set; }
    public Nullable`1<DateTime> UnavailableTime { get; private set; }
    public Nullable`1<DateTime> AvailableTime { get; private set; }
    public string Statistics { get; }
    public string StatisticsFullily { get; }
    public ObjectPool`1(int poolsize, Func`1<T> createObject, Action`1<Object`1<T>> onGetObject);
    public ObjectPool`1(IPolicy`1<T> policy);
    [CompilerGeneratedAttribute]
public sealed virtual IPolicy`1<T> get_Policy();
    [CompilerGeneratedAttribute]
protected void set_Policy(IPolicy`1<T> value);
    public sealed virtual bool get_IsAvailable();
    [CompilerGeneratedAttribute]
public sealed virtual Exception get_UnavailableException();
    [CompilerGeneratedAttribute]
private void set_UnavailableException(Exception value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<DateTime> get_UnavailableTime();
    [CompilerGeneratedAttribute]
private void set_UnavailableTime(Nullable`1<DateTime> value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTime> get_AvailableTime();
    [CompilerGeneratedAttribute]
private void set_AvailableTime(Nullable`1<DateTime> value);
    public sealed virtual bool SetUnavailable(Exception exception, DateTime lastGetTime);
    private void CheckAvailable(int interval);
    private void RestoreToAvailable();
    protected bool LiveCheckAvailable();
    public sealed virtual string get_Statistics();
    public sealed virtual string get_StatisticsFullily();
    public void AutoFree();
    private Object`1<T> GetFree(bool checkAvailable);
    public sealed virtual Object`1<T> Get(Nullable`1<TimeSpan> timeout);
    [AsyncStateMachineAttribute("FreeSql.Internal.ObjectPool.ObjectPool`1/<GetAsync>d__39")]
[DebuggerStepThroughAttribute]
public sealed virtual Task`1<Object`1<T>> GetAsync();
    public sealed virtual void Return(Object`1<T> obj, bool isReset);
    public sealed virtual void Dispose();
    [CompilerGeneratedAttribute]
private void <.ctor>b__35_0(object s1, EventArgs e1);
    [CompilerGeneratedAttribute]
private void <.ctor>b__35_1(object s1, ConsoleCancelEventArgs e1);
}
internal class FreeSql.Internal.ObjectPool.TestTrace : object {
    internal static void WriteLine(string text, ConsoleColor backgroundColor);
}
public class FreeSql.Internal.Utils : object {
    public static Func`1<ConcurrentDictionary`2<DataType, ConcurrentDictionary`2<Type, TableInfo>>> ChacheTableEntityFactory;
    private static ConcurrentDictionary`2<DataType, ConcurrentDictionary`2<Type, TableInfo>> __cacheGetTableByEntity;
    private static Lazy`1<MethodInfo> MethodLazyLoadingComplier;
    public static Dictionary`2<Type, bool> dicExecuteArrayRowReadClassOrTuple;
    internal static ConcurrentDictionary`2<string, ConcurrentDictionary`2<Type, Func`6<Type, Int32[], DbDataReader, int, CommonUtils, RowInfo>>> _dicExecuteArrayRowReadClassOrTuple;
    internal static MethodInfo MethodDataReaderGetValue;
    internal static PropertyInfo PropertyDataReaderFieldCount;
    internal static MethodInfo MethodExecuteArrayRowReadClassOrTuple;
    internal static MethodInfo MethodGetDataReaderValue;
    private static ConcurrentDictionary`2<string, Action`2<object, object>> _dicFillPropertyValue;
    private static ConcurrentDictionary`2<Type, ConcurrentDictionary`2<Type, Func`2<object, object>>> _dicGetDataReaderValue;
    private static Encoding DefaultEncoding;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private static ConcurrentDictionary`2<Type, ITypeHandler> <TypeHandlers>k__BackingField;
    public static ConcurrentBag`1<Func`4<LabelTarget, Expression, Type, Expression>> GetDataReaderValueBlockExpressionSwitchTypeFullName;
    public static ConcurrentBag`1<Func`5<LabelTarget, Expression, Expression, Type, Expression>> GetDataReaderValueBlockExpressionObjectToStringIfThenElse;
    public static ConcurrentBag`1<Func`5<LabelTarget, Expression, Expression, Type, Expression>> GetDataReaderValueBlockExpressionObjectToBytesIfThenElse;
    public static ConcurrentDictionary`2<DataType, ConcurrentDictionary`2<Type, TableInfo>> _cacheGetTableByEntity { get; }
    private static MethodInfo MethodGuidTryParse { get; }
    private static MethodInfo MethodEnumParse { get; }
    private static MethodInfo MethodConvertChangeType { get; }
    private static MethodInfo MethodTimeSpanFromSeconds { get; }
    private static MethodInfo MethodSByteTryParse { get; }
    private static MethodInfo MethodShortTryParse { get; }
    private static MethodInfo MethodIntTryParse { get; }
    private static MethodInfo MethodLongTryParse { get; }
    private static MethodInfo MethodByteTryParse { get; }
    private static MethodInfo MethodUShortTryParse { get; }
    private static MethodInfo MethodUIntTryParse { get; }
    private static MethodInfo MethodULongTryParse { get; }
    private static MethodInfo MethodDoubleTryParse { get; }
    private static MethodInfo MethodFloatTryParse { get; }
    private static MethodInfo MethodDecimalTryParse { get; }
    private static MethodInfo MethodTimeSpanTryParse { get; }
    private static MethodInfo MethodDateTimeTryParse { get; }
    private static MethodInfo MethodDateTimeOffsetTryParse { get; }
    private static MethodInfo MethodToString { get; }
    private static MethodInfo MethodBigIntegerParse { get; }
    private static PropertyInfo PropertyDateTimeOffsetDateTime { get; }
    private static PropertyInfo PropertyDateTimeTicks { get; }
    private static ConstructorInfo CtorDateTimeOffsetArgsTicks { get; }
    private static MethodInfo MethodValueIsEnumAndTargetIsNumber { get; }
    private static MethodInfo MethodEncodingGetBytes { get; }
    private static MethodInfo MethodEncodingGetString { get; }
    private static MethodInfo MethodStringToCharArray { get; }
    private static MethodInfo MethodStringToChar { get; }
    private static MethodInfo MethodStringToBitArray { get; }
    private static MethodInfo MethodGuidToBytes { get; }
    private static MethodInfo MethodBytesToGuid { get; }
    private static MethodInfo MethodStreamToBytes { get; }
    private static MethodInfo MethodListOrArrayToArray { get; }
    private static MethodInfo MethodListOrArrayToList { get; }
    private static Type TypeTimeOnly { get; }
    private static MethodInfo MethodTimeOnlyToTimeSpan { get; }
    private static MethodInfo MethodTimeOnlyFromTimeSpan { get; }
    private static MethodInfo MethodTimeOnlyParse { get; }
    private static Type TypeDateOnly { get; }
    private static MethodInfo MethodDateOnlyToDateTime { get; }
    private static MethodInfo MethodDateOnlyFromDateTime { get; }
    private static MethodInfo MethodDateOnlyParse { get; }
    public static ConcurrentDictionary`2<Type, ITypeHandler> TypeHandlers { get; }
    private static Utils();
    public static ConcurrentDictionary`2<DataType, ConcurrentDictionary`2<Type, TableInfo>> get__cacheGetTableByEntity();
    internal static void RemoveTableByEntity(Type entity, CommonUtils common);
    internal static TableInfo GetTableByEntity(Type entity, CommonUtils common);
    public static ColumnInfo ColumnAttributeToInfo(TableInfo trytb, object entityDefault, string csName, Type mapType, bool isIgnore, ColumnAttribute& colattr, DbInfoResult tp, CommonUtils common);
    public static void AuditTableInfo(TableInfo trytb, TableAttribute tbattr, IEnumerable`1<IndexAttribute> indexes, List`1<ColumnInfo> columnsList, CommonUtils common);
    public static void AddTableRef(CommonUtils common, TableInfo trytb, PropertyInfo pnv, bool isLazy, NativeTuple`5<PropertyInfo, bool, bool, MethodInfo, MethodInfo> vp, StringBuilder cscode);
    public static T[] GetDbParamtersByObject(string sql, object obj, string paramPrefix, Func`4<string, Type, object, T> constructorParamter);
    internal static object InternalDataReaderGetValue(CommonUtils commonUtil, DbDataReader dr, int index, PropertyInfo property);
    internal static RowInfo ExecuteArrayRowReadClassOrTuple(string flagStr, Type typeOrg, Int32[] indexes, DbDataReader row, int dataIndex, CommonUtils _commonUtils);
    internal static RowInfo ExecuteArrayRowReadAnonymousType(Type type2, Int32[] indexes2, DbDataReader row2, int dataindex2, CommonUtils commonUtils2);
    internal static void FillPropertyValue(object info, string memberAccessPath, object value);
    public static BigInteger ToBigInteger(string that);
    public static string ToStringConcat(object obj);
    public static bool ValueIsEnumAndTargetIsNumber(object value, Type targetType);
    public static Byte[] GuidToBytes(Guid guid);
    public static Guid BytesToGuid(Byte[] bytes);
    public static char StringToChar(string str);
    public static BitArray StringToBitArray(string str1010);
    public static Byte[] StreamToBytes(Stream stream);
    public static TElement[] ListOrArrayToArray(object listOrArray);
    public static List`1<TElement> ListOrArrayToList(object listOrArray);
    private static MethodInfo get_MethodGuidTryParse();
    private static MethodInfo get_MethodEnumParse();
    private static MethodInfo get_MethodConvertChangeType();
    private static MethodInfo get_MethodTimeSpanFromSeconds();
    private static MethodInfo get_MethodSByteTryParse();
    private static MethodInfo get_MethodShortTryParse();
    private static MethodInfo get_MethodIntTryParse();
    private static MethodInfo get_MethodLongTryParse();
    private static MethodInfo get_MethodByteTryParse();
    private static MethodInfo get_MethodUShortTryParse();
    private static MethodInfo get_MethodUIntTryParse();
    private static MethodInfo get_MethodULongTryParse();
    private static MethodInfo get_MethodDoubleTryParse();
    private static MethodInfo get_MethodFloatTryParse();
    private static MethodInfo get_MethodDecimalTryParse();
    private static MethodInfo get_MethodTimeSpanTryParse();
    private static MethodInfo get_MethodDateTimeTryParse();
    private static MethodInfo get_MethodDateTimeOffsetTryParse();
    private static MethodInfo get_MethodToString();
    private static MethodInfo get_MethodBigIntegerParse();
    private static PropertyInfo get_PropertyDateTimeOffsetDateTime();
    private static PropertyInfo get_PropertyDateTimeTicks();
    private static ConstructorInfo get_CtorDateTimeOffsetArgsTicks();
    private static MethodInfo get_MethodValueIsEnumAndTargetIsNumber();
    private static MethodInfo get_MethodEncodingGetBytes();
    private static MethodInfo get_MethodEncodingGetString();
    private static MethodInfo get_MethodStringToCharArray();
    private static MethodInfo get_MethodStringToChar();
    private static MethodInfo get_MethodStringToBitArray();
    private static MethodInfo get_MethodGuidToBytes();
    private static MethodInfo get_MethodBytesToGuid();
    private static MethodInfo get_MethodStreamToBytes();
    private static MethodInfo get_MethodListOrArrayToArray();
    private static MethodInfo get_MethodListOrArrayToList();
    private static Type get_TypeTimeOnly();
    private static MethodInfo get_MethodTimeOnlyToTimeSpan();
    private static MethodInfo get_MethodTimeOnlyFromTimeSpan();
    private static MethodInfo get_MethodTimeOnlyParse();
    private static Type get_TypeDateOnly();
    private static MethodInfo get_MethodDateOnlyToDateTime();
    private static MethodInfo get_MethodDateOnlyFromDateTime();
    private static MethodInfo get_MethodDateOnlyParse();
    [CompilerGeneratedAttribute]
public static ConcurrentDictionary`2<Type, ITypeHandler> get_TypeHandlers();
    public static Expression GetDataReaderValueBlockExpression(Type type, Expression value);
    public static object GetDataReaderValue(Type type, object value);
    public static string GetCsName(string name);
    public static string ReplaceSqlConstString(string sql, Dictionary`2<string, string> parms, string paramPrefix);
    internal static string ParseSqlWhereLevel1(string sql);
    private static string ParseSqlWhereLevel12(string sql);
    [CompilerGeneratedAttribute]
internal static Expression <GetDataReaderValueBlockExpression>g__LocalFuncGetExpression|126_0(bool ignoreArray, <>c__DisplayClass126_0& );
    [CompilerGeneratedAttribute]
internal static string <ParseSqlWhereLevel1>g__LocalProcessBrackets|130_0(string locsql);
    [CompilerGeneratedAttribute]
internal static void <ParseSqlWhereLevel12>g__LocalParseSqlWhere|131_0(string sqlPart);
}
public interface FreeSql.ISelect`1 {
    public abstract virtual Task`1<bool> AnyAsync(Expression`1<Func`2<T1, bool>> exp, CancellationToken cancellationToken);
    public abstract virtual Task`1<int> InsertIntoAsync(string tableName, Expression`1<Func`2<T1, TTargetEntity>> select, CancellationToken cancellationToken);
    public abstract virtual Task`1<DataTable> ToDataTableAsync(Expression`1<Func`2<T1, TReturn>> select, CancellationToken cancellationToken);
    public abstract virtual Task`1<List`1<TReturn>> ToListAsync(Expression`1<Func`2<T1, TReturn>> select, CancellationToken cancellationToken);
    public abstract virtual Task`1<List`1<TDto>> ToListAsync(CancellationToken cancellationToken);
    public abstract virtual Task`1<TReturn> ToOneAsync(Expression`1<Func`2<T1, TReturn>> select, CancellationToken cancellationToken);
    public abstract virtual Task`1<TDto> ToOneAsync(CancellationToken cancellationToken);
    public abstract virtual Task`1<TReturn> FirstAsync(Expression`1<Func`2<T1, TReturn>> select, CancellationToken cancellationToken);
    public abstract virtual Task`1<TDto> FirstAsync(CancellationToken cancellationToken);
    public abstract virtual Task`1<TReturn> ToAggregateAsync(Expression`1<Func`2<ISelectGroupingAggregate`1<T1>, TReturn>> select, CancellationToken cancellationToken);
    public abstract virtual Task`1<decimal> SumAsync(Expression`1<Func`2<T1, TMember>> column, CancellationToken cancellationToken);
    public abstract virtual Task`1<TMember> MinAsync(Expression`1<Func`2<T1, TMember>> column, CancellationToken cancellationToken);
    public abstract virtual Task`1<TMember> MaxAsync(Expression`1<Func`2<T1, TMember>> column, CancellationToken cancellationToken);
    public abstract virtual Task`1<double> AvgAsync(Expression`1<Func`2<T1, TMember>> column, CancellationToken cancellationToken);
    public abstract virtual bool Any(Expression`1<Func`2<T1, bool>> exp);
    public abstract virtual int InsertInto(string tableName, Expression`1<Func`2<T1, TTargetEntity>> select);
    public abstract virtual DataTable ToDataTable(Expression`1<Func`2<T1, TReturn>> select);
    public abstract virtual List`1<TReturn> ToList(Expression`1<Func`2<T1, TReturn>> select);
    public abstract virtual List`1<TDto> ToList();
    public abstract virtual void ToChunk(Expression`1<Func`2<T1, TReturn>> select, int size, Action`1<FetchCallbackArgs`1<List`1<TReturn>>> done);
    public abstract virtual TReturn ToOne(Expression`1<Func`2<T1, TReturn>> select);
    public abstract virtual TDto ToOne();
    public abstract virtual TReturn First(Expression`1<Func`2<T1, TReturn>> select);
    public abstract virtual TDto First();
    public abstract virtual string ToSql(Expression`1<Func`2<T1, TReturn>> select, FieldAliasOptions fieldAlias);
    public abstract virtual TReturn ToAggregate(Expression`1<Func`2<ISelectGroupingAggregate`1<T1>, TReturn>> select);
    public abstract virtual ISelect`1<T1> Aggregate(Expression`1<Func`2<ISelectGroupingAggregate`1<T1>, TReturn>> select, TReturn& result);
    public abstract virtual decimal Sum(Expression`1<Func`2<T1, TMember>> column);
    public abstract virtual TMember Min(Expression`1<Func`2<T1, TMember>> column);
    public abstract virtual TMember Max(Expression`1<Func`2<T1, TMember>> column);
    public abstract virtual double Avg(Expression`1<Func`2<T1, TMember>> column);
    public abstract virtual ISelect`1<T1> As(string alias);
    public abstract virtual ISelect`2<T1, T2> From(Expression`1<Func`3<ISelectFromExpression`1<T1>, T2, ISelectFromExpression`1<T1>>> exp);
    public abstract virtual ISelect`3<T1, T2, T3> From(Expression`1<Func`4<ISelectFromExpression`1<T1>, T2, T3, ISelectFromExpression`1<T1>>> exp);
    public abstract virtual ISelect`4<T1, T2, T3, T4> From(Expression`1<Func`5<ISelectFromExpression`1<T1>, T2, T3, T4, ISelectFromExpression`1<T1>>> exp);
    public abstract virtual ISelect`5<T1, T2, T3, T4, T5> From(Expression`1<Func`6<ISelectFromExpression`1<T1>, T2, T3, T4, T5, ISelectFromExpression`1<T1>>> exp);
    public abstract virtual ISelect`6<T1, T2, T3, T4, T5, T6> From(Expression`1<Func`7<ISelectFromExpression`1<T1>, T2, T3, T4, T5, T6, ISelectFromExpression`1<T1>>> exp);
    public abstract virtual ISelect`7<T1, T2, T3, T4, T5, T6, T7> From(Expression`1<Func`8<ISelectFromExpression`1<T1>, T2, T3, T4, T5, T6, T7, ISelectFromExpression`1<T1>>> exp);
    public abstract virtual ISelect`8<T1, T2, T3, T4, T5, T6, T7, T8> From(Expression`1<Func`9<ISelectFromExpression`1<T1>, T2, T3, T4, T5, T6, T7, T8, ISelectFromExpression`1<T1>>> exp);
    public abstract virtual ISelect`9<T1, T2, T3, T4, T5, T6, T7, T8, T9> From(Expression`1<Func`10<ISelectFromExpression`1<T1>, T2, T3, T4, T5, T6, T7, T8, T9, ISelectFromExpression`1<T1>>> exp);
    public abstract virtual ISelect`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> From(Expression`1<Func`11<ISelectFromExpression`1<T1>, T2, T3, T4, T5, T6, T7, T8, T9, T10, ISelectFromExpression`1<T1>>> exp);
    public abstract virtual ISelect`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> From(Expression`1<Func`12<ISelectFromExpression`1<T1>, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, ISelectFromExpression`1<T1>>> exp);
    public abstract virtual ISelect`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> From(Expression`1<Func`13<ISelectFromExpression`1<T1>, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, ISelectFromExpression`1<T1>>> exp);
    public abstract virtual ISelect`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> From(Expression`1<Func`14<ISelectFromExpression`1<T1>, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, ISelectFromExpression`1<T1>>> exp);
    public abstract virtual ISelect`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> From(Expression`1<Func`15<ISelectFromExpression`1<T1>, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, ISelectFromExpression`1<T1>>> exp);
    public abstract virtual ISelect`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> From(Expression`1<Func`16<ISelectFromExpression`1<T1>, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, ISelectFromExpression`1<T1>>> exp);
    public abstract virtual ISelect`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> From(Expression`1<Func`17<ISelectFromExpression`1<T1>, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, ISelectFromExpression`1<T1>>> exp);
    public abstract virtual ISelect`2<T1, T2> FromQuery(ISelect`1<T2> select2);
    public abstract virtual ISelect`3<T1, T2, T3> FromQuery(ISelect`1<T2> select2, ISelect`1<T3> select3);
    public abstract virtual ISelect`4<T1, T2, T3, T4> FromQuery(ISelect`1<T2> select2, ISelect`1<T3> select3, ISelect`1<T4> select4);
    public abstract virtual ISelect`5<T1, T2, T3, T4, T5> FromQuery(ISelect`1<T2> select2, ISelect`1<T3> select3, ISelect`1<T4> select4, ISelect`1<T5> select5);
    public abstract virtual ISelect`1<T1> UnionAll(ISelect`1[] querys);
    public abstract virtual ISelect`1<T1> Where(Expression`1<Func`2<T1, bool>> exp);
    public abstract virtual ISelect`1<T1> WhereIf(bool condition, Expression`1<Func`2<T1, bool>> exp);
    public abstract virtual ISelect`1<T1> Where(Expression`1<Func`3<T1, T2, bool>> exp);
    public abstract virtual ISelect`1<T1> Where(Expression`1<Func`2<T2, bool>> exp);
    public abstract virtual ISelect`1<T1> Where(Expression`1<Func`4<T1, T2, T3, bool>> exp);
    public abstract virtual ISelect`1<T1> Where(Expression`1<Func`5<T1, T2, T3, T4, bool>> exp);
    public abstract virtual ISelect`1<T1> Where(Expression`1<Func`6<T1, T2, T3, T4, T5, bool>> exp);
    public abstract virtual ISelect`1<T1> WhereDynamic(object dywhere, bool not);
    public abstract virtual ISelect`1<T1> WhereCascade(Expression`1<Func`2<T1, bool>> exp);
    public abstract virtual ISelectGrouping`2<TKey, T1> GroupBy(Expression`1<Func`2<T1, TKey>> exp);
    public abstract virtual ISelect`1<T1> OrderBy(Expression`1<Func`2<T1, TMember>> column);
    public abstract virtual ISelect`1<T1> OrderBy(bool condition, Expression`1<Func`2<T1, TMember>> column);
    public abstract virtual ISelect`1<T1> OrderByIf(bool condition, Expression`1<Func`2<T1, TMember>> column, bool descending);
    public abstract virtual ISelect`1<T1> OrderByDescending(Expression`1<Func`2<T1, TMember>> column);
    public abstract virtual ISelect`1<T1> OrderByDescending(bool condition, Expression`1<Func`2<T1, TMember>> column);
    public abstract virtual ISelect`1<T1> Include(Expression`1<Func`2<T1, TNavigate>> navigateSelector);
    public abstract virtual ISelect`1<T1> IncludeIf(bool condition, Expression`1<Func`2<T1, TNavigate>> navigateSelector);
    public abstract virtual ISelect`1<T1> IncludeMany(Expression`1<Func`2<T1, IEnumerable`1<TNavigate>>> navigateSelector, Action`1<ISelect`1<TNavigate>> then);
    public abstract virtual ISelect`1<T1> IncludeByPropertyName(string property);
    public abstract virtual ISelect`1<T1> IncludeByPropertyName(string property, Expression`1<Action`1<ISelect`1<object>>> then);
    public abstract virtual ISelect`1<T1> IncludeByPropertyNameIf(bool condition, string property);
    public abstract virtual ISelect`1<T1> IncludeByPropertyNameIf(bool condition, string property, Expression`1<Action`1<ISelect`1<object>>> then);
    public abstract virtual ISelect`1<T1> WithSql(string sql, object parms);
    public abstract virtual ISelect`1<T1> WithMemory(IEnumerable`1<T1> source);
    public abstract virtual ISelect`1<TDto> WithTempQuery(Expression`1<Func`2<T1, TDto>> selector);
}
public interface FreeSql.ISelect`10 {
    public abstract virtual Task`1<bool> AnyAsync(Expression`1<Func`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, bool>> exp, CancellationToken cancellationToken);
    public abstract virtual Task`1<int> InsertIntoAsync(string tableName, Expression`1<Func`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TTargetEntity>> select, CancellationToken cancellationToken);
    public abstract virtual Task`1<DataTable> ToDataTableAsync(Expression`1<Func`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TReturn>> select, CancellationToken cancellationToken);
    public abstract virtual Task`1<List`1<TReturn>> ToListAsync(Expression`1<Func`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TReturn>> select, CancellationToken cancellationToken);
    public abstract virtual Task`1<List`1<TDto>> ToListAsync(CancellationToken cancellationToken);
    public abstract virtual Task`1<TReturn> ToOneAsync(Expression`1<Func`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TReturn>> select, CancellationToken cancellationToken);
    public abstract virtual Task`1<TReturn> FirstAsync(Expression`1<Func`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TReturn>> select, CancellationToken cancellationToken);
    public abstract virtual Task`1<TDto> FirstAsync(CancellationToken cancellationToken);
    public abstract virtual Task`1<TReturn> ToAggregateAsync(Expression`1<Func`11<ISelectGroupingAggregate`1<T1>, ISelectGroupingAggregate`1<T2>, ISelectGroupingAggregate`1<T3>, ISelectGroupingAggregate`1<T4>, ISelectGroupingAggregate`1<T5>, ISelectGroupingAggregate`1<T6>, ISelectGroupingAggregate`1<T7>, ISelectGroupingAggregate`1<T8>, ISelectGroupingAggregate`1<T9>, ISelectGroupingAggregate`1<T10>, TReturn>> select, CancellationToken cancellationToken);
    public abstract virtual Task`1<decimal> SumAsync(Expression`1<Func`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TMember>> column, CancellationToken cancellationToken);
    public abstract virtual Task`1<TMember> MinAsync(Expression`1<Func`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TMember>> column, CancellationToken cancellationToken);
    public abstract virtual Task`1<TMember> MaxAsync(Expression`1<Func`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TMember>> column, CancellationToken cancellationToken);
    public abstract virtual Task`1<double> AvgAsync(Expression`1<Func`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TMember>> column, CancellationToken cancellationToken);
    public abstract virtual Task`1<bool> AnyAsync(Expression`1<Func`2<HzyTuple`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>, bool>> exp, CancellationToken cancellationToken);
    public abstract virtual Task`1<int> InsertIntoAsync(string tableName, Expression`1<Func`2<HzyTuple`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>, TTargetEntity>> select, CancellationToken cancellationToken);
    public abstract virtual Task`1<DataTable> ToDataTableAsync(Expression`1<Func`2<HzyTuple`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>, TReturn>> select, CancellationToken cancellationToken);
    public abstract virtual Task`1<List`1<TReturn>> ToListAsync(Expression`1<Func`2<HzyTuple`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>, TReturn>> select, CancellationToken cancellationToken);
    public abstract virtual Task`1<TReturn> ToOneAsync(Expression`1<Func`2<HzyTuple`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>, TReturn>> select, CancellationToken cancellationToken);
    public abstract virtual Task`1<TReturn> FirstAsync(Expression`1<Func`2<HzyTuple`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>, TReturn>> select, CancellationToken cancellationToken);
    public abstract virtual Task`1<decimal> SumAsync(Expression`1<Func`2<HzyTuple`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>, TMember>> column, CancellationToken cancellationToken);
    public abstract virtual Task`1<TMember> MinAsync(Expression`1<Func`2<HzyTuple`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>, TMember>> column, CancellationToken cancellationToken);
    public abstract virtual Task`1<TMember> MaxAsync(Expression`1<Func`2<HzyTuple`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>, TMember>> column, CancellationToken cancellationToken);
    public abstract virtual Task`1<double> AvgAsync(Expression`1<Func`2<HzyTuple`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>, TMember>> column, CancellationToken cancellationToken);
    public abstract virtual bool Any(Expression`1<Func`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, bool>> exp);
    public abstract virtual int InsertInto(string tableName, Expression`1<Func`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TTargetEntity>> select);
    public abstract virtual DataTable ToDataTable(Expression`1<Func`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TReturn>> select);
    public abstract virtual List`1<TReturn> ToList(Expression`1<Func`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TReturn>> select);
    public abstract virtual List`1<TDto> ToList();
    public abstract virtual void ToChunk(Expression`1<Func`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TReturn>> select, int size, Action`1<FetchCallbackArgs`1<List`1<TReturn>>> done);
    public abstract virtual TReturn ToOne(Expression`1<Func`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TReturn>> select);
    public abstract virtual TReturn First(Expression`1<Func`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TReturn>> select);
    public abstract virtual TDto First();
    public abstract virtual string ToSql(Expression`1<Func`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TReturn>> select, FieldAliasOptions fieldAlias);
    public abstract virtual TReturn ToAggregate(Expression`1<Func`11<ISelectGroupingAggregate`1<T1>, ISelectGroupingAggregate`1<T2>, ISelectGroupingAggregate`1<T3>, ISelectGroupingAggregate`1<T4>, ISelectGroupingAggregate`1<T5>, ISelectGroupingAggregate`1<T6>, ISelectGroupingAggregate`1<T7>, ISelectGroupingAggregate`1<T8>, ISelectGroupingAggregate`1<T9>, ISelectGroupingAggregate`1<T10>, TReturn>> select);
    public abstract virtual ISelect`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> Aggregate(Expression`1<Func`11<ISelectGroupingAggregate`1<T1>, ISelectGroupingAggregate`1<T2>, ISelectGroupingAggregate`1<T3>, ISelectGroupingAggregate`1<T4>, ISelectGroupingAggregate`1<T5>, ISelectGroupingAggregate`1<T6>, ISelectGroupingAggregate`1<T7>, ISelectGroupingAggregate`1<T8>, ISelectGroupingAggregate`1<T9>, ISelectGroupingAggregate`1<T10>, TReturn>> select, TReturn& result);
    public abstract virtual decimal Sum(Expression`1<Func`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TMember>> column);
    public abstract virtual TMember Min(Expression`1<Func`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TMember>> column);
    public abstract virtual TMember Max(Expression`1<Func`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TMember>> column);
    public abstract virtual double Avg(Expression`1<Func`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TMember>> column);
    public abstract virtual ISelect`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> LeftJoin(Expression`1<Func`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, bool>> exp);
    public abstract virtual ISelect`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> InnerJoin(Expression`1<Func`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, bool>> exp);
    public abstract virtual ISelect`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> RightJoin(Expression`1<Func`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, bool>> exp);
    public abstract virtual ISelect`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> Where(Expression`1<Func`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, bool>> exp);
    public abstract virtual ISelect`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> WhereIf(bool condition, Expression`1<Func`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, bool>> exp);
    public abstract virtual ISelectGrouping`2<TKey, NativeTuple`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> GroupBy(Expression`1<Func`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TKey>> exp);
    public abstract virtual ISelect`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> OrderBy(Expression`1<Func`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TMember>> column);
    public abstract virtual ISelect`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> OrderByDescending(Expression`1<Func`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TMember>> column);
    public abstract virtual ISelect`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> OrderByIf(bool condition, Expression`1<Func`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TMember>> column, bool descending);
    public abstract virtual ISelect`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> WithSql(string sqlT1, string sqlT2, string sqlT3, string sqlT4, string sqlT5, string sqlT6, string sqlT7, string sqlT8, string sqlT9, string sqlT10, object parms);
    public abstract virtual ISelect`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> As(string aliasT1, string aliasT2, string aliasT3, string aliasT4, string aliasT5, string aliasT6, string aliasT7, string aliasT8, string aliasT9, string aliasT10);
    public abstract virtual ISelect`1<TDto> WithTempQuery(Expression`1<Func`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TDto>> selector);
    public abstract virtual bool Any(Expression`1<Func`2<HzyTuple`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>, bool>> exp);
    public abstract virtual int InsertInto(string tableName, Expression`1<Func`2<HzyTuple`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>, TTargetEntity>> select);
    public abstract virtual DataTable ToDataTable(Expression`1<Func`2<HzyTuple`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>, TReturn>> select);
    public abstract virtual List`1<TReturn> ToList(Expression`1<Func`2<HzyTuple`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>, TReturn>> select);
    public abstract virtual void ToChunk(Expression`1<Func`2<HzyTuple`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>, TReturn>> select, int size, Action`1<FetchCallbackArgs`1<List`1<TReturn>>> done);
    public abstract virtual TReturn ToOne(Expression`1<Func`2<HzyTuple`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>, TReturn>> select);
    public abstract virtual TReturn First(Expression`1<Func`2<HzyTuple`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>, TReturn>> select);
    public abstract virtual string ToSql(Expression`1<Func`2<HzyTuple`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>, TReturn>> select, FieldAliasOptions fieldAlias);
    public abstract virtual decimal Sum(Expression`1<Func`2<HzyTuple`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>, TMember>> column);
    public abstract virtual TMember Min(Expression`1<Func`2<HzyTuple`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>, TMember>> column);
    public abstract virtual TMember Max(Expression`1<Func`2<HzyTuple`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>, TMember>> column);
    public abstract virtual double Avg(Expression`1<Func`2<HzyTuple`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>, TMember>> column);
    public abstract virtual ISelect`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> LeftJoin(Expression`1<Func`2<HzyTuple`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>, bool>> exp);
    public abstract virtual ISelect`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> InnerJoin(Expression`1<Func`2<HzyTuple`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>, bool>> exp);
    public abstract virtual ISelect`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> RightJoin(Expression`1<Func`2<HzyTuple`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>, bool>> exp);
    public abstract virtual ISelect`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> Where(Expression`1<Func`2<HzyTuple`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>, bool>> exp);
    public abstract virtual ISelect`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> WhereIf(bool condition, Expression`1<Func`2<HzyTuple`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>, bool>> exp);
    public abstract virtual ISelectGrouping`2<TKey, NativeTuple`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> GroupBy(Expression`1<Func`2<HzyTuple`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>, TKey>> exp);
    public abstract virtual ISelect`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> OrderBy(Expression`1<Func`2<HzyTuple`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>, TMember>> column);
    public abstract virtual ISelect`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> OrderByDescending(Expression`1<Func`2<HzyTuple`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>, TMember>> column);
    public abstract virtual ISelect`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> OrderByIf(bool condition, Expression`1<Func`2<HzyTuple`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>, TMember>> column, bool descending);
    public abstract virtual ISelect`1<TDto> WithTempQuery(Expression`1<Func`2<HzyTuple`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>, TDto>> selector);
}
public interface FreeSql.ISelect`11 {
    public abstract virtual Task`1<bool> AnyAsync(Expression`1<Func`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, bool>> exp, CancellationToken cancellationToken);
    public abstract virtual Task`1<int> InsertIntoAsync(string tableName, Expression`1<Func`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TTargetEntity>> select, CancellationToken cancellationToken);
    public abstract virtual Task`1<DataTable> ToDataTableAsync(Expression`1<Func`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TReturn>> select, CancellationToken cancellationToken);
    public abstract virtual Task`1<List`1<TReturn>> ToListAsync(Expression`1<Func`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TReturn>> select, CancellationToken cancellationToken);
    public abstract virtual Task`1<List`1<TDto>> ToListAsync(CancellationToken cancellationToken);
    public abstract virtual Task`1<TReturn> ToOneAsync(Expression`1<Func`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TReturn>> select, CancellationToken cancellationToken);
    public abstract virtual Task`1<TReturn> FirstAsync(Expression`1<Func`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TReturn>> select, CancellationToken cancellationToken);
    public abstract virtual Task`1<TDto> FirstAsync(CancellationToken cancellationToken);
    public abstract virtual Task`1<TReturn> ToAggregateAsync(Expression`1<Func`12<ISelectGroupingAggregate`1<T1>, ISelectGroupingAggregate`1<T2>, ISelectGroupingAggregate`1<T3>, ISelectGroupingAggregate`1<T4>, ISelectGroupingAggregate`1<T5>, ISelectGroupingAggregate`1<T6>, ISelectGroupingAggregate`1<T7>, ISelectGroupingAggregate`1<T8>, ISelectGroupingAggregate`1<T9>, ISelectGroupingAggregate`1<T10>, ISelectGroupingAggregate`1<T11>, TReturn>> select, CancellationToken cancellationToken);
    public abstract virtual Task`1<decimal> SumAsync(Expression`1<Func`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TMember>> column, CancellationToken cancellationToken);
    public abstract virtual Task`1<TMember> MinAsync(Expression`1<Func`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TMember>> column, CancellationToken cancellationToken);
    public abstract virtual Task`1<TMember> MaxAsync(Expression`1<Func`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TMember>> column, CancellationToken cancellationToken);
    public abstract virtual Task`1<double> AvgAsync(Expression`1<Func`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TMember>> column, CancellationToken cancellationToken);
    public abstract virtual Task`1<bool> AnyAsync(Expression`1<Func`2<HzyTuple`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>, bool>> exp, CancellationToken cancellationToken);
    public abstract virtual Task`1<int> InsertIntoAsync(string tableName, Expression`1<Func`2<HzyTuple`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>, TTargetEntity>> select, CancellationToken cancellationToken);
    public abstract virtual Task`1<DataTable> ToDataTableAsync(Expression`1<Func`2<HzyTuple`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>, TReturn>> select, CancellationToken cancellationToken);
    public abstract virtual Task`1<List`1<TReturn>> ToListAsync(Expression`1<Func`2<HzyTuple`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>, TReturn>> select, CancellationToken cancellationToken);
    public abstract virtual Task`1<TReturn> ToOneAsync(Expression`1<Func`2<HzyTuple`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>, TReturn>> select, CancellationToken cancellationToken);
    public abstract virtual Task`1<TReturn> FirstAsync(Expression`1<Func`2<HzyTuple`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>, TReturn>> select, CancellationToken cancellationToken);
    public abstract virtual Task`1<decimal> SumAsync(Expression`1<Func`2<HzyTuple`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>, TMember>> column, CancellationToken cancellationToken);
    public abstract virtual Task`1<TMember> MinAsync(Expression`1<Func`2<HzyTuple`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>, TMember>> column, CancellationToken cancellationToken);
    public abstract virtual Task`1<TMember> MaxAsync(Expression`1<Func`2<HzyTuple`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>, TMember>> column, CancellationToken cancellationToken);
    public abstract virtual Task`1<double> AvgAsync(Expression`1<Func`2<HzyTuple`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>, TMember>> column, CancellationToken cancellationToken);
    public abstract virtual bool Any(Expression`1<Func`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, bool>> exp);
    public abstract virtual int InsertInto(string tableName, Expression`1<Func`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TTargetEntity>> select);
    public abstract virtual DataTable ToDataTable(Expression`1<Func`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TReturn>> select);
    public abstract virtual List`1<TReturn> ToList(Expression`1<Func`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TReturn>> select);
    public abstract virtual List`1<TDto> ToList();
    public abstract virtual void ToChunk(Expression`1<Func`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TReturn>> select, int size, Action`1<FetchCallbackArgs`1<List`1<TReturn>>> done);
    public abstract virtual TReturn ToOne(Expression`1<Func`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TReturn>> select);
    public abstract virtual TReturn First(Expression`1<Func`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TReturn>> select);
    public abstract virtual TDto First();
    public abstract virtual string ToSql(Expression`1<Func`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TReturn>> select, FieldAliasOptions fieldAlias);
    public abstract virtual TReturn ToAggregate(Expression`1<Func`12<ISelectGroupingAggregate`1<T1>, ISelectGroupingAggregate`1<T2>, ISelectGroupingAggregate`1<T3>, ISelectGroupingAggregate`1<T4>, ISelectGroupingAggregate`1<T5>, ISelectGroupingAggregate`1<T6>, ISelectGroupingAggregate`1<T7>, ISelectGroupingAggregate`1<T8>, ISelectGroupingAggregate`1<T9>, ISelectGroupingAggregate`1<T10>, ISelectGroupingAggregate`1<T11>, TReturn>> select);
    public abstract virtual ISelect`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> Aggregate(Expression`1<Func`12<ISelectGroupingAggregate`1<T1>, ISelectGroupingAggregate`1<T2>, ISelectGroupingAggregate`1<T3>, ISelectGroupingAggregate`1<T4>, ISelectGroupingAggregate`1<T5>, ISelectGroupingAggregate`1<T6>, ISelectGroupingAggregate`1<T7>, ISelectGroupingAggregate`1<T8>, ISelectGroupingAggregate`1<T9>, ISelectGroupingAggregate`1<T10>, ISelectGroupingAggregate`1<T11>, TReturn>> select, TReturn& result);
    public abstract virtual decimal Sum(Expression`1<Func`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TMember>> column);
    public abstract virtual TMember Min(Expression`1<Func`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TMember>> column);
    public abstract virtual TMember Max(Expression`1<Func`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TMember>> column);
    public abstract virtual double Avg(Expression`1<Func`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TMember>> column);
    public abstract virtual ISelect`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> LeftJoin(Expression`1<Func`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, bool>> exp);
    public abstract virtual ISelect`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> InnerJoin(Expression`1<Func`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, bool>> exp);
    public abstract virtual ISelect`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> RightJoin(Expression`1<Func`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, bool>> exp);
    public abstract virtual ISelect`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> Where(Expression`1<Func`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, bool>> exp);
    public abstract virtual ISelect`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> WhereIf(bool condition, Expression`1<Func`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, bool>> exp);
    public abstract virtual ISelectGrouping`2<TKey, NativeTuple`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> GroupBy(Expression`1<Func`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TKey>> exp);
    public abstract virtual ISelect`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> OrderBy(Expression`1<Func`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TMember>> column);
    public abstract virtual ISelect`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> OrderByDescending(Expression`1<Func`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TMember>> column);
    public abstract virtual ISelect`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> OrderByIf(bool condition, Expression`1<Func`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TMember>> column, bool descending);
    public abstract virtual ISelect`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> WithSql(string sqlT1, string sqlT2, string sqlT3, string sqlT4, string sqlT5, string sqlT6, string sqlT7, string sqlT8, string sqlT9, string sqlT10, string sqlT11, object parms);
    public abstract virtual ISelect`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> As(string aliasT1, string aliasT2, string aliasT3, string aliasT4, string aliasT5, string aliasT6, string aliasT7, string aliasT8, string aliasT9, string aliasT10, string aliasT11);
    public abstract virtual ISelect`1<TDto> WithTempQuery(Expression`1<Func`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TDto>> selector);
    public abstract virtual bool Any(Expression`1<Func`2<HzyTuple`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>, bool>> exp);
    public abstract virtual int InsertInto(string tableName, Expression`1<Func`2<HzyTuple`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>, TTargetEntity>> select);
    public abstract virtual DataTable ToDataTable(Expression`1<Func`2<HzyTuple`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>, TReturn>> select);
    public abstract virtual List`1<TReturn> ToList(Expression`1<Func`2<HzyTuple`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>, TReturn>> select);
    public abstract virtual void ToChunk(Expression`1<Func`2<HzyTuple`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>, TReturn>> select, int size, Action`1<FetchCallbackArgs`1<List`1<TReturn>>> done);
    public abstract virtual TReturn ToOne(Expression`1<Func`2<HzyTuple`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>, TReturn>> select);
    public abstract virtual TReturn First(Expression`1<Func`2<HzyTuple`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>, TReturn>> select);
    public abstract virtual string ToSql(Expression`1<Func`2<HzyTuple`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>, TReturn>> select, FieldAliasOptions fieldAlias);
    public abstract virtual decimal Sum(Expression`1<Func`2<HzyTuple`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>, TMember>> column);
    public abstract virtual TMember Min(Expression`1<Func`2<HzyTuple`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>, TMember>> column);
    public abstract virtual TMember Max(Expression`1<Func`2<HzyTuple`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>, TMember>> column);
    public abstract virtual double Avg(Expression`1<Func`2<HzyTuple`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>, TMember>> column);
    public abstract virtual ISelect`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> LeftJoin(Expression`1<Func`2<HzyTuple`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>, bool>> exp);
    public abstract virtual ISelect`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> InnerJoin(Expression`1<Func`2<HzyTuple`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>, bool>> exp);
    public abstract virtual ISelect`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> RightJoin(Expression`1<Func`2<HzyTuple`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>, bool>> exp);
    public abstract virtual ISelect`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> Where(Expression`1<Func`2<HzyTuple`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>, bool>> exp);
    public abstract virtual ISelect`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> WhereIf(bool condition, Expression`1<Func`2<HzyTuple`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>, bool>> exp);
    public abstract virtual ISelectGrouping`2<TKey, NativeTuple`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> GroupBy(Expression`1<Func`2<HzyTuple`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>, TKey>> exp);
    public abstract virtual ISelect`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> OrderBy(Expression`1<Func`2<HzyTuple`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>, TMember>> column);
    public abstract virtual ISelect`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> OrderByDescending(Expression`1<Func`2<HzyTuple`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>, TMember>> column);
    public abstract virtual ISelect`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> OrderByIf(bool condition, Expression`1<Func`2<HzyTuple`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>, TMember>> column, bool descending);
    public abstract virtual ISelect`1<TDto> WithTempQuery(Expression`1<Func`2<HzyTuple`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>, TDto>> selector);
}
public interface FreeSql.ISelect`12 {
    public abstract virtual Task`1<bool> AnyAsync(Expression`1<Func`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, bool>> exp, CancellationToken cancellationToken);
    public abstract virtual Task`1<int> InsertIntoAsync(string tableName, Expression`1<Func`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TTargetEntity>> select, CancellationToken cancellationToken);
    public abstract virtual Task`1<DataTable> ToDataTableAsync(Expression`1<Func`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TReturn>> select, CancellationToken cancellationToken);
    public abstract virtual Task`1<List`1<TReturn>> ToListAsync(Expression`1<Func`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TReturn>> select, CancellationToken cancellationToken);
    public abstract virtual Task`1<List`1<TDto>> ToListAsync(CancellationToken cancellationToken);
    public abstract virtual Task`1<TReturn> ToOneAsync(Expression`1<Func`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TReturn>> select, CancellationToken cancellationToken);
    public abstract virtual Task`1<TReturn> FirstAsync(Expression`1<Func`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TReturn>> select, CancellationToken cancellationToken);
    public abstract virtual Task`1<TDto> FirstAsync(CancellationToken cancellationToken);
    public abstract virtual Task`1<TReturn> ToAggregateAsync(Expression`1<Func`13<ISelectGroupingAggregate`1<T1>, ISelectGroupingAggregate`1<T2>, ISelectGroupingAggregate`1<T3>, ISelectGroupingAggregate`1<T4>, ISelectGroupingAggregate`1<T5>, ISelectGroupingAggregate`1<T6>, ISelectGroupingAggregate`1<T7>, ISelectGroupingAggregate`1<T8>, ISelectGroupingAggregate`1<T9>, ISelectGroupingAggregate`1<T10>, ISelectGroupingAggregate`1<T11>, ISelectGroupingAggregate`1<T12>, TReturn>> select, CancellationToken cancellationToken);
    public abstract virtual Task`1<decimal> SumAsync(Expression`1<Func`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TMember>> column, CancellationToken cancellationToken);
    public abstract virtual Task`1<TMember> MinAsync(Expression`1<Func`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TMember>> column, CancellationToken cancellationToken);
    public abstract virtual Task`1<TMember> MaxAsync(Expression`1<Func`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TMember>> column, CancellationToken cancellationToken);
    public abstract virtual Task`1<double> AvgAsync(Expression`1<Func`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TMember>> column, CancellationToken cancellationToken);
    public abstract virtual Task`1<bool> AnyAsync(Expression`1<Func`2<HzyTuple`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>, bool>> exp, CancellationToken cancellationToken);
    public abstract virtual Task`1<int> InsertIntoAsync(string tableName, Expression`1<Func`2<HzyTuple`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>, TTargetEntity>> select, CancellationToken cancellationToken);
    public abstract virtual Task`1<DataTable> ToDataTableAsync(Expression`1<Func`2<HzyTuple`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>, TReturn>> select, CancellationToken cancellationToken);
    public abstract virtual Task`1<List`1<TReturn>> ToListAsync(Expression`1<Func`2<HzyTuple`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>, TReturn>> select, CancellationToken cancellationToken);
    public abstract virtual Task`1<TReturn> ToOneAsync(Expression`1<Func`2<HzyTuple`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>, TReturn>> select, CancellationToken cancellationToken);
    public abstract virtual Task`1<TReturn> FirstAsync(Expression`1<Func`2<HzyTuple`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>, TReturn>> select, CancellationToken cancellationToken);
    public abstract virtual Task`1<decimal> SumAsync(Expression`1<Func`2<HzyTuple`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>, TMember>> column, CancellationToken cancellationToken);
    public abstract virtual Task`1<TMember> MinAsync(Expression`1<Func`2<HzyTuple`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>, TMember>> column, CancellationToken cancellationToken);
    public abstract virtual Task`1<TMember> MaxAsync(Expression`1<Func`2<HzyTuple`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>, TMember>> column, CancellationToken cancellationToken);
    public abstract virtual Task`1<double> AvgAsync(Expression`1<Func`2<HzyTuple`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>, TMember>> column, CancellationToken cancellationToken);
    public abstract virtual bool Any(Expression`1<Func`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, bool>> exp);
    public abstract virtual int InsertInto(string tableName, Expression`1<Func`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TTargetEntity>> select);
    public abstract virtual DataTable ToDataTable(Expression`1<Func`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TReturn>> select);
    public abstract virtual List`1<TReturn> ToList(Expression`1<Func`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TReturn>> select);
    public abstract virtual List`1<TDto> ToList();
    public abstract virtual void ToChunk(Expression`1<Func`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TReturn>> select, int size, Action`1<FetchCallbackArgs`1<List`1<TReturn>>> done);
    public abstract virtual TReturn ToOne(Expression`1<Func`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TReturn>> select);
    public abstract virtual TReturn First(Expression`1<Func`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TReturn>> select);
    public abstract virtual TDto First();
    public abstract virtual string ToSql(Expression`1<Func`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TReturn>> select, FieldAliasOptions fieldAlias);
    public abstract virtual TReturn ToAggregate(Expression`1<Func`13<ISelectGroupingAggregate`1<T1>, ISelectGroupingAggregate`1<T2>, ISelectGroupingAggregate`1<T3>, ISelectGroupingAggregate`1<T4>, ISelectGroupingAggregate`1<T5>, ISelectGroupingAggregate`1<T6>, ISelectGroupingAggregate`1<T7>, ISelectGroupingAggregate`1<T8>, ISelectGroupingAggregate`1<T9>, ISelectGroupingAggregate`1<T10>, ISelectGroupingAggregate`1<T11>, ISelectGroupingAggregate`1<T12>, TReturn>> select);
    public abstract virtual ISelect`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> Aggregate(Expression`1<Func`13<ISelectGroupingAggregate`1<T1>, ISelectGroupingAggregate`1<T2>, ISelectGroupingAggregate`1<T3>, ISelectGroupingAggregate`1<T4>, ISelectGroupingAggregate`1<T5>, ISelectGroupingAggregate`1<T6>, ISelectGroupingAggregate`1<T7>, ISelectGroupingAggregate`1<T8>, ISelectGroupingAggregate`1<T9>, ISelectGroupingAggregate`1<T10>, ISelectGroupingAggregate`1<T11>, ISelectGroupingAggregate`1<T12>, TReturn>> select, TReturn& result);
    public abstract virtual decimal Sum(Expression`1<Func`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TMember>> column);
    public abstract virtual TMember Min(Expression`1<Func`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TMember>> column);
    public abstract virtual TMember Max(Expression`1<Func`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TMember>> column);
    public abstract virtual double Avg(Expression`1<Func`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TMember>> column);
    public abstract virtual ISelect`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> LeftJoin(Expression`1<Func`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, bool>> exp);
    public abstract virtual ISelect`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> InnerJoin(Expression`1<Func`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, bool>> exp);
    public abstract virtual ISelect`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> RightJoin(Expression`1<Func`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, bool>> exp);
    public abstract virtual ISelect`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> Where(Expression`1<Func`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, bool>> exp);
    public abstract virtual ISelect`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> WhereIf(bool condition, Expression`1<Func`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, bool>> exp);
    public abstract virtual ISelectGrouping`2<TKey, NativeTuple`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> GroupBy(Expression`1<Func`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TKey>> exp);
    public abstract virtual ISelect`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> OrderBy(Expression`1<Func`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TMember>> column);
    public abstract virtual ISelect`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> OrderByDescending(Expression`1<Func`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TMember>> column);
    public abstract virtual ISelect`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> OrderByIf(bool condition, Expression`1<Func`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TMember>> column, bool descending);
    public abstract virtual ISelect`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> WithSql(string sqlT1, string sqlT2, string sqlT3, string sqlT4, string sqlT5, string sqlT6, string sqlT7, string sqlT8, string sqlT9, string sqlT10, string sqlT11, string sqlT12, object parms);
    public abstract virtual ISelect`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> As(string aliasT1, string aliasT2, string aliasT3, string aliasT4, string aliasT5, string aliasT6, string aliasT7, string aliasT8, string aliasT9, string aliasT10, string aliasT11, string aliasT12);
    public abstract virtual ISelect`1<TDto> WithTempQuery(Expression`1<Func`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TDto>> selector);
    public abstract virtual bool Any(Expression`1<Func`2<HzyTuple`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>, bool>> exp);
    public abstract virtual int InsertInto(string tableName, Expression`1<Func`2<HzyTuple`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>, TTargetEntity>> select);
    public abstract virtual DataTable ToDataTable(Expression`1<Func`2<HzyTuple`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>, TReturn>> select);
    public abstract virtual List`1<TReturn> ToList(Expression`1<Func`2<HzyTuple`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>, TReturn>> select);
    public abstract virtual void ToChunk(Expression`1<Func`2<HzyTuple`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>, TReturn>> select, int size, Action`1<FetchCallbackArgs`1<List`1<TReturn>>> done);
    public abstract virtual TReturn ToOne(Expression`1<Func`2<HzyTuple`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>, TReturn>> select);
    public abstract virtual TReturn First(Expression`1<Func`2<HzyTuple`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>, TReturn>> select);
    public abstract virtual string ToSql(Expression`1<Func`2<HzyTuple`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>, TReturn>> select, FieldAliasOptions fieldAlias);
    public abstract virtual decimal Sum(Expression`1<Func`2<HzyTuple`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>, TMember>> column);
    public abstract virtual TMember Min(Expression`1<Func`2<HzyTuple`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>, TMember>> column);
    public abstract virtual TMember Max(Expression`1<Func`2<HzyTuple`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>, TMember>> column);
    public abstract virtual double Avg(Expression`1<Func`2<HzyTuple`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>, TMember>> column);
    public abstract virtual ISelect`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> LeftJoin(Expression`1<Func`2<HzyTuple`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>, bool>> exp);
    public abstract virtual ISelect`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> InnerJoin(Expression`1<Func`2<HzyTuple`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>, bool>> exp);
    public abstract virtual ISelect`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> RightJoin(Expression`1<Func`2<HzyTuple`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>, bool>> exp);
    public abstract virtual ISelect`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> Where(Expression`1<Func`2<HzyTuple`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>, bool>> exp);
    public abstract virtual ISelect`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> WhereIf(bool condition, Expression`1<Func`2<HzyTuple`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>, bool>> exp);
    public abstract virtual ISelectGrouping`2<TKey, NativeTuple`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> GroupBy(Expression`1<Func`2<HzyTuple`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>, TKey>> exp);
    public abstract virtual ISelect`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> OrderBy(Expression`1<Func`2<HzyTuple`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>, TMember>> column);
    public abstract virtual ISelect`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> OrderByDescending(Expression`1<Func`2<HzyTuple`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>, TMember>> column);
    public abstract virtual ISelect`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> OrderByIf(bool condition, Expression`1<Func`2<HzyTuple`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>, TMember>> column, bool descending);
    public abstract virtual ISelect`1<TDto> WithTempQuery(Expression`1<Func`2<HzyTuple`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>, TDto>> selector);
}
public interface FreeSql.ISelect`13 {
    public abstract virtual Task`1<bool> AnyAsync(Expression`1<Func`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, bool>> exp, CancellationToken cancellationToken);
    public abstract virtual Task`1<int> InsertIntoAsync(string tableName, Expression`1<Func`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TTargetEntity>> select, CancellationToken cancellationToken);
    public abstract virtual Task`1<DataTable> ToDataTableAsync(Expression`1<Func`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TReturn>> select, CancellationToken cancellationToken);
    public abstract virtual Task`1<List`1<TReturn>> ToListAsync(Expression`1<Func`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TReturn>> select, CancellationToken cancellationToken);
    public abstract virtual Task`1<List`1<TDto>> ToListAsync(CancellationToken cancellationToken);
    public abstract virtual Task`1<TReturn> ToOneAsync(Expression`1<Func`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TReturn>> select, CancellationToken cancellationToken);
    public abstract virtual Task`1<TReturn> FirstAsync(Expression`1<Func`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TReturn>> select, CancellationToken cancellationToken);
    public abstract virtual Task`1<TDto> FirstAsync(CancellationToken cancellationToken);
    public abstract virtual Task`1<TReturn> ToAggregateAsync(Expression`1<Func`14<ISelectGroupingAggregate`1<T1>, ISelectGroupingAggregate`1<T2>, ISelectGroupingAggregate`1<T3>, ISelectGroupingAggregate`1<T4>, ISelectGroupingAggregate`1<T5>, ISelectGroupingAggregate`1<T6>, ISelectGroupingAggregate`1<T7>, ISelectGroupingAggregate`1<T8>, ISelectGroupingAggregate`1<T9>, ISelectGroupingAggregate`1<T10>, ISelectGroupingAggregate`1<T11>, ISelectGroupingAggregate`1<T12>, ISelectGroupingAggregate`1<T13>, TReturn>> select, CancellationToken cancellationToken);
    public abstract virtual Task`1<decimal> SumAsync(Expression`1<Func`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TMember>> column, CancellationToken cancellationToken);
    public abstract virtual Task`1<TMember> MinAsync(Expression`1<Func`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TMember>> column, CancellationToken cancellationToken);
    public abstract virtual Task`1<TMember> MaxAsync(Expression`1<Func`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TMember>> column, CancellationToken cancellationToken);
    public abstract virtual Task`1<double> AvgAsync(Expression`1<Func`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TMember>> column, CancellationToken cancellationToken);
    public abstract virtual Task`1<bool> AnyAsync(Expression`1<Func`2<HzyTuple`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>, bool>> exp, CancellationToken cancellationToken);
    public abstract virtual Task`1<int> InsertIntoAsync(string tableName, Expression`1<Func`2<HzyTuple`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>, TTargetEntity>> select, CancellationToken cancellationToken);
    public abstract virtual Task`1<DataTable> ToDataTableAsync(Expression`1<Func`2<HzyTuple`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>, TReturn>> select, CancellationToken cancellationToken);
    public abstract virtual Task`1<List`1<TReturn>> ToListAsync(Expression`1<Func`2<HzyTuple`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>, TReturn>> select, CancellationToken cancellationToken);
    public abstract virtual Task`1<TReturn> ToOneAsync(Expression`1<Func`2<HzyTuple`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>, TReturn>> select, CancellationToken cancellationToken);
    public abstract virtual Task`1<TReturn> FirstAsync(Expression`1<Func`2<HzyTuple`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>, TReturn>> select, CancellationToken cancellationToken);
    public abstract virtual Task`1<decimal> SumAsync(Expression`1<Func`2<HzyTuple`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>, TMember>> column, CancellationToken cancellationToken);
    public abstract virtual Task`1<TMember> MinAsync(Expression`1<Func`2<HzyTuple`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>, TMember>> column, CancellationToken cancellationToken);
    public abstract virtual Task`1<TMember> MaxAsync(Expression`1<Func`2<HzyTuple`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>, TMember>> column, CancellationToken cancellationToken);
    public abstract virtual Task`1<double> AvgAsync(Expression`1<Func`2<HzyTuple`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>, TMember>> column, CancellationToken cancellationToken);
    public abstract virtual bool Any(Expression`1<Func`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, bool>> exp);
    public abstract virtual int InsertInto(string tableName, Expression`1<Func`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TTargetEntity>> select);
    public abstract virtual DataTable ToDataTable(Expression`1<Func`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TReturn>> select);
    public abstract virtual List`1<TReturn> ToList(Expression`1<Func`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TReturn>> select);
    public abstract virtual List`1<TDto> ToList();
    public abstract virtual void ToChunk(Expression`1<Func`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TReturn>> select, int size, Action`1<FetchCallbackArgs`1<List`1<TReturn>>> done);
    public abstract virtual TReturn ToOne(Expression`1<Func`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TReturn>> select);
    public abstract virtual TReturn First(Expression`1<Func`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TReturn>> select);
    public abstract virtual TDto First();
    public abstract virtual string ToSql(Expression`1<Func`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TReturn>> select, FieldAliasOptions fieldAlias);
    public abstract virtual TReturn ToAggregate(Expression`1<Func`14<ISelectGroupingAggregate`1<T1>, ISelectGroupingAggregate`1<T2>, ISelectGroupingAggregate`1<T3>, ISelectGroupingAggregate`1<T4>, ISelectGroupingAggregate`1<T5>, ISelectGroupingAggregate`1<T6>, ISelectGroupingAggregate`1<T7>, ISelectGroupingAggregate`1<T8>, ISelectGroupingAggregate`1<T9>, ISelectGroupingAggregate`1<T10>, ISelectGroupingAggregate`1<T11>, ISelectGroupingAggregate`1<T12>, ISelectGroupingAggregate`1<T13>, TReturn>> select);
    public abstract virtual ISelect`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> Aggregate(Expression`1<Func`14<ISelectGroupingAggregate`1<T1>, ISelectGroupingAggregate`1<T2>, ISelectGroupingAggregate`1<T3>, ISelectGroupingAggregate`1<T4>, ISelectGroupingAggregate`1<T5>, ISelectGroupingAggregate`1<T6>, ISelectGroupingAggregate`1<T7>, ISelectGroupingAggregate`1<T8>, ISelectGroupingAggregate`1<T9>, ISelectGroupingAggregate`1<T10>, ISelectGroupingAggregate`1<T11>, ISelectGroupingAggregate`1<T12>, ISelectGroupingAggregate`1<T13>, TReturn>> select, TReturn& result);
    public abstract virtual decimal Sum(Expression`1<Func`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TMember>> column);
    public abstract virtual TMember Min(Expression`1<Func`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TMember>> column);
    public abstract virtual TMember Max(Expression`1<Func`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TMember>> column);
    public abstract virtual double Avg(Expression`1<Func`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TMember>> column);
    public abstract virtual ISelect`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> LeftJoin(Expression`1<Func`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, bool>> exp);
    public abstract virtual ISelect`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> InnerJoin(Expression`1<Func`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, bool>> exp);
    public abstract virtual ISelect`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> RightJoin(Expression`1<Func`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, bool>> exp);
    public abstract virtual ISelect`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> Where(Expression`1<Func`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, bool>> exp);
    public abstract virtual ISelect`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> WhereIf(bool condition, Expression`1<Func`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, bool>> exp);
    public abstract virtual ISelectGrouping`2<TKey, NativeTuple`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> GroupBy(Expression`1<Func`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TKey>> exp);
    public abstract virtual ISelect`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> OrderBy(Expression`1<Func`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TMember>> column);
    public abstract virtual ISelect`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> OrderByDescending(Expression`1<Func`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TMember>> column);
    public abstract virtual ISelect`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> OrderByIf(bool condition, Expression`1<Func`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TMember>> column, bool descending);
    public abstract virtual ISelect`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> WithSql(string sqlT1, string sqlT2, string sqlT3, string sqlT4, string sqlT5, string sqlT6, string sqlT7, string sqlT8, string sqlT9, string sqlT10, string sqlT11, string sqlT12, string sqlT13, object parms);
    public abstract virtual ISelect`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> As(string aliasT1, string aliasT2, string aliasT3, string aliasT4, string aliasT5, string aliasT6, string aliasT7, string aliasT8, string aliasT9, string aliasT10, string aliasT11, string aliasT12, string aliasT13);
    public abstract virtual ISelect`1<TDto> WithTempQuery(Expression`1<Func`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TDto>> selector);
    public abstract virtual bool Any(Expression`1<Func`2<HzyTuple`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>, bool>> exp);
    public abstract virtual int InsertInto(string tableName, Expression`1<Func`2<HzyTuple`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>, TTargetEntity>> select);
    public abstract virtual DataTable ToDataTable(Expression`1<Func`2<HzyTuple`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>, TReturn>> select);
    public abstract virtual List`1<TReturn> ToList(Expression`1<Func`2<HzyTuple`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>, TReturn>> select);
    public abstract virtual void ToChunk(Expression`1<Func`2<HzyTuple`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>, TReturn>> select, int size, Action`1<FetchCallbackArgs`1<List`1<TReturn>>> done);
    public abstract virtual TReturn ToOne(Expression`1<Func`2<HzyTuple`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>, TReturn>> select);
    public abstract virtual TReturn First(Expression`1<Func`2<HzyTuple`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>, TReturn>> select);
    public abstract virtual string ToSql(Expression`1<Func`2<HzyTuple`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>, TReturn>> select, FieldAliasOptions fieldAlias);
    public abstract virtual decimal Sum(Expression`1<Func`2<HzyTuple`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>, TMember>> column);
    public abstract virtual TMember Min(Expression`1<Func`2<HzyTuple`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>, TMember>> column);
    public abstract virtual TMember Max(Expression`1<Func`2<HzyTuple`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>, TMember>> column);
    public abstract virtual double Avg(Expression`1<Func`2<HzyTuple`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>, TMember>> column);
    public abstract virtual ISelect`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> LeftJoin(Expression`1<Func`2<HzyTuple`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>, bool>> exp);
    public abstract virtual ISelect`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> InnerJoin(Expression`1<Func`2<HzyTuple`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>, bool>> exp);
    public abstract virtual ISelect`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> RightJoin(Expression`1<Func`2<HzyTuple`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>, bool>> exp);
    public abstract virtual ISelect`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> Where(Expression`1<Func`2<HzyTuple`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>, bool>> exp);
    public abstract virtual ISelect`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> WhereIf(bool condition, Expression`1<Func`2<HzyTuple`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>, bool>> exp);
    public abstract virtual ISelectGrouping`2<TKey, NativeTuple`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> GroupBy(Expression`1<Func`2<HzyTuple`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>, TKey>> exp);
    public abstract virtual ISelect`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> OrderBy(Expression`1<Func`2<HzyTuple`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>, TMember>> column);
    public abstract virtual ISelect`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> OrderByDescending(Expression`1<Func`2<HzyTuple`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>, TMember>> column);
    public abstract virtual ISelect`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> OrderByIf(bool condition, Expression`1<Func`2<HzyTuple`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>, TMember>> column, bool descending);
    public abstract virtual ISelect`1<TDto> WithTempQuery(Expression`1<Func`2<HzyTuple`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>, TDto>> selector);
}
public interface FreeSql.ISelect`14 {
    public abstract virtual Task`1<bool> AnyAsync(Expression`1<Func`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, bool>> exp, CancellationToken cancellationToken);
    public abstract virtual Task`1<int> InsertIntoAsync(string tableName, Expression`1<Func`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TTargetEntity>> select, CancellationToken cancellationToken);
    public abstract virtual Task`1<DataTable> ToDataTableAsync(Expression`1<Func`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TReturn>> select, CancellationToken cancellationToken);
    public abstract virtual Task`1<List`1<TReturn>> ToListAsync(Expression`1<Func`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TReturn>> select, CancellationToken cancellationToken);
    public abstract virtual Task`1<List`1<TDto>> ToListAsync(CancellationToken cancellationToken);
    public abstract virtual Task`1<TReturn> ToOneAsync(Expression`1<Func`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TReturn>> select, CancellationToken cancellationToken);
    public abstract virtual Task`1<TReturn> FirstAsync(Expression`1<Func`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TReturn>> select, CancellationToken cancellationToken);
    public abstract virtual Task`1<TDto> FirstAsync(CancellationToken cancellationToken);
    public abstract virtual Task`1<TReturn> ToAggregateAsync(Expression`1<Func`15<ISelectGroupingAggregate`1<T1>, ISelectGroupingAggregate`1<T2>, ISelectGroupingAggregate`1<T3>, ISelectGroupingAggregate`1<T4>, ISelectGroupingAggregate`1<T5>, ISelectGroupingAggregate`1<T6>, ISelectGroupingAggregate`1<T7>, ISelectGroupingAggregate`1<T8>, ISelectGroupingAggregate`1<T9>, ISelectGroupingAggregate`1<T10>, ISelectGroupingAggregate`1<T11>, ISelectGroupingAggregate`1<T12>, ISelectGroupingAggregate`1<T13>, ISelectGroupingAggregate`1<T14>, TReturn>> select, CancellationToken cancellationToken);
    public abstract virtual Task`1<decimal> SumAsync(Expression`1<Func`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TMember>> column, CancellationToken cancellationToken);
    public abstract virtual Task`1<TMember> MinAsync(Expression`1<Func`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TMember>> column, CancellationToken cancellationToken);
    public abstract virtual Task`1<TMember> MaxAsync(Expression`1<Func`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TMember>> column, CancellationToken cancellationToken);
    public abstract virtual Task`1<double> AvgAsync(Expression`1<Func`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TMember>> column, CancellationToken cancellationToken);
    public abstract virtual Task`1<bool> AnyAsync(Expression`1<Func`2<HzyTuple`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>, bool>> exp, CancellationToken cancellationToken);
    public abstract virtual Task`1<int> InsertIntoAsync(string tableName, Expression`1<Func`2<HzyTuple`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>, TTargetEntity>> select, CancellationToken cancellationToken);
    public abstract virtual Task`1<DataTable> ToDataTableAsync(Expression`1<Func`2<HzyTuple`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>, TReturn>> select, CancellationToken cancellationToken);
    public abstract virtual Task`1<List`1<TReturn>> ToListAsync(Expression`1<Func`2<HzyTuple`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>, TReturn>> select, CancellationToken cancellationToken);
    public abstract virtual Task`1<TReturn> ToOneAsync(Expression`1<Func`2<HzyTuple`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>, TReturn>> select, CancellationToken cancellationToken);
    public abstract virtual Task`1<TReturn> FirstAsync(Expression`1<Func`2<HzyTuple`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>, TReturn>> select, CancellationToken cancellationToken);
    public abstract virtual Task`1<decimal> SumAsync(Expression`1<Func`2<HzyTuple`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>, TMember>> column, CancellationToken cancellationToken);
    public abstract virtual Task`1<TMember> MinAsync(Expression`1<Func`2<HzyTuple`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>, TMember>> column, CancellationToken cancellationToken);
    public abstract virtual Task`1<TMember> MaxAsync(Expression`1<Func`2<HzyTuple`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>, TMember>> column, CancellationToken cancellationToken);
    public abstract virtual Task`1<double> AvgAsync(Expression`1<Func`2<HzyTuple`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>, TMember>> column, CancellationToken cancellationToken);
    public abstract virtual bool Any(Expression`1<Func`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, bool>> exp);
    public abstract virtual int InsertInto(string tableName, Expression`1<Func`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TTargetEntity>> select);
    public abstract virtual DataTable ToDataTable(Expression`1<Func`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TReturn>> select);
    public abstract virtual List`1<TReturn> ToList(Expression`1<Func`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TReturn>> select);
    public abstract virtual List`1<TDto> ToList();
    public abstract virtual void ToChunk(Expression`1<Func`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TReturn>> select, int size, Action`1<FetchCallbackArgs`1<List`1<TReturn>>> done);
    public abstract virtual TReturn ToOne(Expression`1<Func`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TReturn>> select);
    public abstract virtual TReturn First(Expression`1<Func`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TReturn>> select);
    public abstract virtual TDto First();
    public abstract virtual string ToSql(Expression`1<Func`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TReturn>> select, FieldAliasOptions fieldAlias);
    public abstract virtual TReturn ToAggregate(Expression`1<Func`15<ISelectGroupingAggregate`1<T1>, ISelectGroupingAggregate`1<T2>, ISelectGroupingAggregate`1<T3>, ISelectGroupingAggregate`1<T4>, ISelectGroupingAggregate`1<T5>, ISelectGroupingAggregate`1<T6>, ISelectGroupingAggregate`1<T7>, ISelectGroupingAggregate`1<T8>, ISelectGroupingAggregate`1<T9>, ISelectGroupingAggregate`1<T10>, ISelectGroupingAggregate`1<T11>, ISelectGroupingAggregate`1<T12>, ISelectGroupingAggregate`1<T13>, ISelectGroupingAggregate`1<T14>, TReturn>> select);
    public abstract virtual ISelect`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> Aggregate(Expression`1<Func`15<ISelectGroupingAggregate`1<T1>, ISelectGroupingAggregate`1<T2>, ISelectGroupingAggregate`1<T3>, ISelectGroupingAggregate`1<T4>, ISelectGroupingAggregate`1<T5>, ISelectGroupingAggregate`1<T6>, ISelectGroupingAggregate`1<T7>, ISelectGroupingAggregate`1<T8>, ISelectGroupingAggregate`1<T9>, ISelectGroupingAggregate`1<T10>, ISelectGroupingAggregate`1<T11>, ISelectGroupingAggregate`1<T12>, ISelectGroupingAggregate`1<T13>, ISelectGroupingAggregate`1<T14>, TReturn>> select, TReturn& result);
    public abstract virtual decimal Sum(Expression`1<Func`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TMember>> column);
    public abstract virtual TMember Min(Expression`1<Func`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TMember>> column);
    public abstract virtual TMember Max(Expression`1<Func`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TMember>> column);
    public abstract virtual double Avg(Expression`1<Func`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TMember>> column);
    public abstract virtual ISelect`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> LeftJoin(Expression`1<Func`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, bool>> exp);
    public abstract virtual ISelect`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> InnerJoin(Expression`1<Func`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, bool>> exp);
    public abstract virtual ISelect`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> RightJoin(Expression`1<Func`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, bool>> exp);
    public abstract virtual ISelect`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> Where(Expression`1<Func`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, bool>> exp);
    public abstract virtual ISelect`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> WhereIf(bool condition, Expression`1<Func`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, bool>> exp);
    public abstract virtual ISelectGrouping`2<TKey, NativeTuple`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> GroupBy(Expression`1<Func`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TKey>> exp);
    public abstract virtual ISelect`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> OrderBy(Expression`1<Func`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TMember>> column);
    public abstract virtual ISelect`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> OrderByDescending(Expression`1<Func`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TMember>> column);
    public abstract virtual ISelect`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> OrderByIf(bool condition, Expression`1<Func`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TMember>> column, bool descending);
    public abstract virtual ISelect`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> WithSql(string sqlT1, string sqlT2, string sqlT3, string sqlT4, string sqlT5, string sqlT6, string sqlT7, string sqlT8, string sqlT9, string sqlT10, string sqlT11, string sqlT12, string sqlT13, string sqlT14, object parms);
    public abstract virtual ISelect`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> As(string aliasT1, string aliasT2, string aliasT3, string aliasT4, string aliasT5, string aliasT6, string aliasT7, string aliasT8, string aliasT9, string aliasT10, string aliasT11, string aliasT12, string aliasT13, string aliasT14);
    public abstract virtual ISelect`1<TDto> WithTempQuery(Expression`1<Func`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TDto>> selector);
    public abstract virtual bool Any(Expression`1<Func`2<HzyTuple`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>, bool>> exp);
    public abstract virtual int InsertInto(string tableName, Expression`1<Func`2<HzyTuple`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>, TTargetEntity>> select);
    public abstract virtual DataTable ToDataTable(Expression`1<Func`2<HzyTuple`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>, TReturn>> select);
    public abstract virtual List`1<TReturn> ToList(Expression`1<Func`2<HzyTuple`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>, TReturn>> select);
    public abstract virtual void ToChunk(Expression`1<Func`2<HzyTuple`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>, TReturn>> select, int size, Action`1<FetchCallbackArgs`1<List`1<TReturn>>> done);
    public abstract virtual TReturn ToOne(Expression`1<Func`2<HzyTuple`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>, TReturn>> select);
    public abstract virtual TReturn First(Expression`1<Func`2<HzyTuple`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>, TReturn>> select);
    public abstract virtual string ToSql(Expression`1<Func`2<HzyTuple`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>, TReturn>> select, FieldAliasOptions fieldAlias);
    public abstract virtual decimal Sum(Expression`1<Func`2<HzyTuple`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>, TMember>> column);
    public abstract virtual TMember Min(Expression`1<Func`2<HzyTuple`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>, TMember>> column);
    public abstract virtual TMember Max(Expression`1<Func`2<HzyTuple`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>, TMember>> column);
    public abstract virtual double Avg(Expression`1<Func`2<HzyTuple`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>, TMember>> column);
    public abstract virtual ISelect`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> LeftJoin(Expression`1<Func`2<HzyTuple`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>, bool>> exp);
    public abstract virtual ISelect`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> InnerJoin(Expression`1<Func`2<HzyTuple`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>, bool>> exp);
    public abstract virtual ISelect`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> RightJoin(Expression`1<Func`2<HzyTuple`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>, bool>> exp);
    public abstract virtual ISelect`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> Where(Expression`1<Func`2<HzyTuple`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>, bool>> exp);
    public abstract virtual ISelect`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> WhereIf(bool condition, Expression`1<Func`2<HzyTuple`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>, bool>> exp);
    public abstract virtual ISelectGrouping`2<TKey, NativeTuple`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> GroupBy(Expression`1<Func`2<HzyTuple`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>, TKey>> exp);
    public abstract virtual ISelect`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> OrderBy(Expression`1<Func`2<HzyTuple`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>, TMember>> column);
    public abstract virtual ISelect`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> OrderByDescending(Expression`1<Func`2<HzyTuple`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>, TMember>> column);
    public abstract virtual ISelect`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> OrderByIf(bool condition, Expression`1<Func`2<HzyTuple`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>, TMember>> column, bool descending);
    public abstract virtual ISelect`1<TDto> WithTempQuery(Expression`1<Func`2<HzyTuple`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>, TDto>> selector);
}
public interface FreeSql.ISelect`15 {
    public abstract virtual Task`1<bool> AnyAsync(Expression`1<Func`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, bool>> exp, CancellationToken cancellationToken);
    public abstract virtual Task`1<int> InsertIntoAsync(string tableName, Expression`1<Func`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TTargetEntity>> select, CancellationToken cancellationToken);
    public abstract virtual Task`1<DataTable> ToDataTableAsync(Expression`1<Func`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TReturn>> select, CancellationToken cancellationToken);
    public abstract virtual Task`1<List`1<TReturn>> ToListAsync(Expression`1<Func`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TReturn>> select, CancellationToken cancellationToken);
    public abstract virtual Task`1<List`1<TDto>> ToListAsync(CancellationToken cancellationToken);
    public abstract virtual Task`1<TReturn> ToOneAsync(Expression`1<Func`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TReturn>> select, CancellationToken cancellationToken);
    public abstract virtual Task`1<TReturn> FirstAsync(Expression`1<Func`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TReturn>> select, CancellationToken cancellationToken);
    public abstract virtual Task`1<TDto> FirstAsync(CancellationToken cancellationToken);
    public abstract virtual Task`1<TReturn> ToAggregateAsync(Expression`1<Func`16<ISelectGroupingAggregate`1<T1>, ISelectGroupingAggregate`1<T2>, ISelectGroupingAggregate`1<T3>, ISelectGroupingAggregate`1<T4>, ISelectGroupingAggregate`1<T5>, ISelectGroupingAggregate`1<T6>, ISelectGroupingAggregate`1<T7>, ISelectGroupingAggregate`1<T8>, ISelectGroupingAggregate`1<T9>, ISelectGroupingAggregate`1<T10>, ISelectGroupingAggregate`1<T11>, ISelectGroupingAggregate`1<T12>, ISelectGroupingAggregate`1<T13>, ISelectGroupingAggregate`1<T14>, ISelectGroupingAggregate`1<T15>, TReturn>> select, CancellationToken cancellationToken);
    public abstract virtual Task`1<decimal> SumAsync(Expression`1<Func`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TMember>> column, CancellationToken cancellationToken);
    public abstract virtual Task`1<TMember> MinAsync(Expression`1<Func`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TMember>> column, CancellationToken cancellationToken);
    public abstract virtual Task`1<TMember> MaxAsync(Expression`1<Func`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TMember>> column, CancellationToken cancellationToken);
    public abstract virtual Task`1<double> AvgAsync(Expression`1<Func`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TMember>> column, CancellationToken cancellationToken);
    public abstract virtual Task`1<bool> AnyAsync(Expression`1<Func`2<HzyTuple`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>, bool>> exp, CancellationToken cancellationToken);
    public abstract virtual Task`1<int> InsertIntoAsync(string tableName, Expression`1<Func`2<HzyTuple`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>, TTargetEntity>> select, CancellationToken cancellationToken);
    public abstract virtual Task`1<DataTable> ToDataTableAsync(Expression`1<Func`2<HzyTuple`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>, TReturn>> select, CancellationToken cancellationToken);
    public abstract virtual Task`1<List`1<TReturn>> ToListAsync(Expression`1<Func`2<HzyTuple`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>, TReturn>> select, CancellationToken cancellationToken);
    public abstract virtual Task`1<TReturn> ToOneAsync(Expression`1<Func`2<HzyTuple`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>, TReturn>> select, CancellationToken cancellationToken);
    public abstract virtual Task`1<TReturn> FirstAsync(Expression`1<Func`2<HzyTuple`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>, TReturn>> select, CancellationToken cancellationToken);
    public abstract virtual Task`1<decimal> SumAsync(Expression`1<Func`2<HzyTuple`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>, TMember>> column, CancellationToken cancellationToken);
    public abstract virtual Task`1<TMember> MinAsync(Expression`1<Func`2<HzyTuple`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>, TMember>> column, CancellationToken cancellationToken);
    public abstract virtual Task`1<TMember> MaxAsync(Expression`1<Func`2<HzyTuple`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>, TMember>> column, CancellationToken cancellationToken);
    public abstract virtual Task`1<double> AvgAsync(Expression`1<Func`2<HzyTuple`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>, TMember>> column, CancellationToken cancellationToken);
    public abstract virtual bool Any(Expression`1<Func`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, bool>> exp);
    public abstract virtual int InsertInto(string tableName, Expression`1<Func`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TTargetEntity>> select);
    public abstract virtual DataTable ToDataTable(Expression`1<Func`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TReturn>> select);
    public abstract virtual List`1<TReturn> ToList(Expression`1<Func`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TReturn>> select);
    public abstract virtual List`1<TDto> ToList();
    public abstract virtual void ToChunk(Expression`1<Func`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TReturn>> select, int size, Action`1<FetchCallbackArgs`1<List`1<TReturn>>> done);
    public abstract virtual TReturn ToOne(Expression`1<Func`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TReturn>> select);
    public abstract virtual TReturn First(Expression`1<Func`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TReturn>> select);
    public abstract virtual TDto First();
    public abstract virtual string ToSql(Expression`1<Func`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TReturn>> select, FieldAliasOptions fieldAlias);
    public abstract virtual TReturn ToAggregate(Expression`1<Func`16<ISelectGroupingAggregate`1<T1>, ISelectGroupingAggregate`1<T2>, ISelectGroupingAggregate`1<T3>, ISelectGroupingAggregate`1<T4>, ISelectGroupingAggregate`1<T5>, ISelectGroupingAggregate`1<T6>, ISelectGroupingAggregate`1<T7>, ISelectGroupingAggregate`1<T8>, ISelectGroupingAggregate`1<T9>, ISelectGroupingAggregate`1<T10>, ISelectGroupingAggregate`1<T11>, ISelectGroupingAggregate`1<T12>, ISelectGroupingAggregate`1<T13>, ISelectGroupingAggregate`1<T14>, ISelectGroupingAggregate`1<T15>, TReturn>> select);
    public abstract virtual ISelect`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> Aggregate(Expression`1<Func`16<ISelectGroupingAggregate`1<T1>, ISelectGroupingAggregate`1<T2>, ISelectGroupingAggregate`1<T3>, ISelectGroupingAggregate`1<T4>, ISelectGroupingAggregate`1<T5>, ISelectGroupingAggregate`1<T6>, ISelectGroupingAggregate`1<T7>, ISelectGroupingAggregate`1<T8>, ISelectGroupingAggregate`1<T9>, ISelectGroupingAggregate`1<T10>, ISelectGroupingAggregate`1<T11>, ISelectGroupingAggregate`1<T12>, ISelectGroupingAggregate`1<T13>, ISelectGroupingAggregate`1<T14>, ISelectGroupingAggregate`1<T15>, TReturn>> select, TReturn& result);
    public abstract virtual decimal Sum(Expression`1<Func`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TMember>> column);
    public abstract virtual TMember Min(Expression`1<Func`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TMember>> column);
    public abstract virtual TMember Max(Expression`1<Func`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TMember>> column);
    public abstract virtual double Avg(Expression`1<Func`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TMember>> column);
    public abstract virtual ISelect`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> LeftJoin(Expression`1<Func`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, bool>> exp);
    public abstract virtual ISelect`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> InnerJoin(Expression`1<Func`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, bool>> exp);
    public abstract virtual ISelect`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> RightJoin(Expression`1<Func`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, bool>> exp);
    public abstract virtual ISelect`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> Where(Expression`1<Func`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, bool>> exp);
    public abstract virtual ISelect`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> WhereIf(bool condition, Expression`1<Func`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, bool>> exp);
    public abstract virtual ISelectGrouping`2<TKey, NativeTuple`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> GroupBy(Expression`1<Func`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TKey>> exp);
    public abstract virtual ISelect`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> OrderBy(Expression`1<Func`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TMember>> column);
    public abstract virtual ISelect`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> OrderByDescending(Expression`1<Func`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TMember>> column);
    public abstract virtual ISelect`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> OrderByIf(bool condition, Expression`1<Func`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TMember>> column, bool descending);
    public abstract virtual ISelect`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> WithSql(string sqlT1, string sqlT2, string sqlT3, string sqlT4, string sqlT5, string sqlT6, string sqlT7, string sqlT8, string sqlT9, string sqlT10, string sqlT11, string sqlT12, string sqlT13, string sqlT14, string sqlT15, object parms);
    public abstract virtual ISelect`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> As(string aliasT1, string aliasT2, string aliasT3, string aliasT4, string aliasT5, string aliasT6, string aliasT7, string aliasT8, string aliasT9, string aliasT10, string aliasT11, string aliasT12, string aliasT13, string aliasT14, string aliasT15);
    public abstract virtual ISelect`1<TDto> WithTempQuery(Expression`1<Func`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TDto>> selector);
    public abstract virtual bool Any(Expression`1<Func`2<HzyTuple`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>, bool>> exp);
    public abstract virtual int InsertInto(string tableName, Expression`1<Func`2<HzyTuple`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>, TTargetEntity>> select);
    public abstract virtual DataTable ToDataTable(Expression`1<Func`2<HzyTuple`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>, TReturn>> select);
    public abstract virtual List`1<TReturn> ToList(Expression`1<Func`2<HzyTuple`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>, TReturn>> select);
    public abstract virtual void ToChunk(Expression`1<Func`2<HzyTuple`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>, TReturn>> select, int size, Action`1<FetchCallbackArgs`1<List`1<TReturn>>> done);
    public abstract virtual TReturn ToOne(Expression`1<Func`2<HzyTuple`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>, TReturn>> select);
    public abstract virtual TReturn First(Expression`1<Func`2<HzyTuple`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>, TReturn>> select);
    public abstract virtual string ToSql(Expression`1<Func`2<HzyTuple`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>, TReturn>> select, FieldAliasOptions fieldAlias);
    public abstract virtual decimal Sum(Expression`1<Func`2<HzyTuple`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>, TMember>> column);
    public abstract virtual TMember Min(Expression`1<Func`2<HzyTuple`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>, TMember>> column);
    public abstract virtual TMember Max(Expression`1<Func`2<HzyTuple`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>, TMember>> column);
    public abstract virtual double Avg(Expression`1<Func`2<HzyTuple`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>, TMember>> column);
    public abstract virtual ISelect`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> LeftJoin(Expression`1<Func`2<HzyTuple`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>, bool>> exp);
    public abstract virtual ISelect`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> InnerJoin(Expression`1<Func`2<HzyTuple`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>, bool>> exp);
    public abstract virtual ISelect`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> RightJoin(Expression`1<Func`2<HzyTuple`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>, bool>> exp);
    public abstract virtual ISelect`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> Where(Expression`1<Func`2<HzyTuple`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>, bool>> exp);
    public abstract virtual ISelect`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> WhereIf(bool condition, Expression`1<Func`2<HzyTuple`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>, bool>> exp);
    public abstract virtual ISelectGrouping`2<TKey, NativeTuple`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> GroupBy(Expression`1<Func`2<HzyTuple`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>, TKey>> exp);
    public abstract virtual ISelect`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> OrderBy(Expression`1<Func`2<HzyTuple`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>, TMember>> column);
    public abstract virtual ISelect`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> OrderByDescending(Expression`1<Func`2<HzyTuple`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>, TMember>> column);
    public abstract virtual ISelect`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> OrderByIf(bool condition, Expression`1<Func`2<HzyTuple`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>, TMember>> column, bool descending);
    public abstract virtual ISelect`1<TDto> WithTempQuery(Expression`1<Func`2<HzyTuple`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>, TDto>> selector);
}
public interface FreeSql.ISelect`16 {
    public abstract virtual Task`1<bool> AnyAsync(Expression`1<Func`17<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, bool>> exp, CancellationToken cancellationToken);
    public abstract virtual Task`1<int> InsertIntoAsync(string tableName, Expression`1<Func`17<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TTargetEntity>> select, CancellationToken cancellationToken);
    public abstract virtual Task`1<DataTable> ToDataTableAsync(Expression`1<Func`17<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TReturn>> select, CancellationToken cancellationToken);
    public abstract virtual Task`1<List`1<TReturn>> ToListAsync(Expression`1<Func`17<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TReturn>> select, CancellationToken cancellationToken);
    public abstract virtual Task`1<List`1<TDto>> ToListAsync(CancellationToken cancellationToken);
    public abstract virtual Task`1<TReturn> ToOneAsync(Expression`1<Func`17<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TReturn>> select, CancellationToken cancellationToken);
    public abstract virtual Task`1<TReturn> FirstAsync(Expression`1<Func`17<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TReturn>> select, CancellationToken cancellationToken);
    public abstract virtual Task`1<TDto> FirstAsync(CancellationToken cancellationToken);
    public abstract virtual Task`1<TReturn> ToAggregateAsync(Expression`1<Func`17<ISelectGroupingAggregate`1<T1>, ISelectGroupingAggregate`1<T2>, ISelectGroupingAggregate`1<T3>, ISelectGroupingAggregate`1<T4>, ISelectGroupingAggregate`1<T5>, ISelectGroupingAggregate`1<T6>, ISelectGroupingAggregate`1<T7>, ISelectGroupingAggregate`1<T8>, ISelectGroupingAggregate`1<T9>, ISelectGroupingAggregate`1<T10>, ISelectGroupingAggregate`1<T11>, ISelectGroupingAggregate`1<T12>, ISelectGroupingAggregate`1<T13>, ISelectGroupingAggregate`1<T14>, ISelectGroupingAggregate`1<T15>, ISelectGroupingAggregate`1<T16>, TReturn>> select, CancellationToken cancellationToken);
    public abstract virtual Task`1<decimal> SumAsync(Expression`1<Func`17<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TMember>> column, CancellationToken cancellationToken);
    public abstract virtual Task`1<TMember> MinAsync(Expression`1<Func`17<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TMember>> column, CancellationToken cancellationToken);
    public abstract virtual Task`1<TMember> MaxAsync(Expression`1<Func`17<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TMember>> column, CancellationToken cancellationToken);
    public abstract virtual Task`1<double> AvgAsync(Expression`1<Func`17<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TMember>> column, CancellationToken cancellationToken);
    public abstract virtual Task`1<bool> AnyAsync(Expression`1<Func`2<HzyTuple`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>, bool>> exp, CancellationToken cancellationToken);
    public abstract virtual Task`1<int> InsertIntoAsync(string tableName, Expression`1<Func`2<HzyTuple`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>, TTargetEntity>> select, CancellationToken cancellationToken);
    public abstract virtual Task`1<DataTable> ToDataTableAsync(Expression`1<Func`2<HzyTuple`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>, TReturn>> select, CancellationToken cancellationToken);
    public abstract virtual Task`1<List`1<TReturn>> ToListAsync(Expression`1<Func`2<HzyTuple`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>, TReturn>> select, CancellationToken cancellationToken);
    public abstract virtual Task`1<TReturn> ToOneAsync(Expression`1<Func`2<HzyTuple`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>, TReturn>> select, CancellationToken cancellationToken);
    public abstract virtual Task`1<TReturn> FirstAsync(Expression`1<Func`2<HzyTuple`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>, TReturn>> select, CancellationToken cancellationToken);
    public abstract virtual Task`1<decimal> SumAsync(Expression`1<Func`2<HzyTuple`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>, TMember>> column, CancellationToken cancellationToken);
    public abstract virtual Task`1<TMember> MinAsync(Expression`1<Func`2<HzyTuple`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>, TMember>> column, CancellationToken cancellationToken);
    public abstract virtual Task`1<TMember> MaxAsync(Expression`1<Func`2<HzyTuple`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>, TMember>> column, CancellationToken cancellationToken);
    public abstract virtual Task`1<double> AvgAsync(Expression`1<Func`2<HzyTuple`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>, TMember>> column, CancellationToken cancellationToken);
    public abstract virtual bool Any(Expression`1<Func`17<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, bool>> exp);
    public abstract virtual int InsertInto(string tableName, Expression`1<Func`17<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TTargetEntity>> select);
    public abstract virtual DataTable ToDataTable(Expression`1<Func`17<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TReturn>> select);
    public abstract virtual List`1<TReturn> ToList(Expression`1<Func`17<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TReturn>> select);
    public abstract virtual List`1<TDto> ToList();
    public abstract virtual void ToChunk(Expression`1<Func`17<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TReturn>> select, int size, Action`1<FetchCallbackArgs`1<List`1<TReturn>>> done);
    public abstract virtual TReturn ToOne(Expression`1<Func`17<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TReturn>> select);
    public abstract virtual TReturn First(Expression`1<Func`17<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TReturn>> select);
    public abstract virtual TDto First();
    public abstract virtual string ToSql(Expression`1<Func`17<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TReturn>> select, FieldAliasOptions fieldAlias);
    public abstract virtual TReturn ToAggregate(Expression`1<Func`17<ISelectGroupingAggregate`1<T1>, ISelectGroupingAggregate`1<T2>, ISelectGroupingAggregate`1<T3>, ISelectGroupingAggregate`1<T4>, ISelectGroupingAggregate`1<T5>, ISelectGroupingAggregate`1<T6>, ISelectGroupingAggregate`1<T7>, ISelectGroupingAggregate`1<T8>, ISelectGroupingAggregate`1<T9>, ISelectGroupingAggregate`1<T10>, ISelectGroupingAggregate`1<T11>, ISelectGroupingAggregate`1<T12>, ISelectGroupingAggregate`1<T13>, ISelectGroupingAggregate`1<T14>, ISelectGroupingAggregate`1<T15>, ISelectGroupingAggregate`1<T16>, TReturn>> select);
    public abstract virtual ISelect`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> Aggregate(Expression`1<Func`17<ISelectGroupingAggregate`1<T1>, ISelectGroupingAggregate`1<T2>, ISelectGroupingAggregate`1<T3>, ISelectGroupingAggregate`1<T4>, ISelectGroupingAggregate`1<T5>, ISelectGroupingAggregate`1<T6>, ISelectGroupingAggregate`1<T7>, ISelectGroupingAggregate`1<T8>, ISelectGroupingAggregate`1<T9>, ISelectGroupingAggregate`1<T10>, ISelectGroupingAggregate`1<T11>, ISelectGroupingAggregate`1<T12>, ISelectGroupingAggregate`1<T13>, ISelectGroupingAggregate`1<T14>, ISelectGroupingAggregate`1<T15>, ISelectGroupingAggregate`1<T16>, TReturn>> select, TReturn& result);
    public abstract virtual decimal Sum(Expression`1<Func`17<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TMember>> column);
    public abstract virtual TMember Min(Expression`1<Func`17<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TMember>> column);
    public abstract virtual TMember Max(Expression`1<Func`17<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TMember>> column);
    public abstract virtual double Avg(Expression`1<Func`17<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TMember>> column);
    public abstract virtual ISelect`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> LeftJoin(Expression`1<Func`17<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, bool>> exp);
    public abstract virtual ISelect`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> InnerJoin(Expression`1<Func`17<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, bool>> exp);
    public abstract virtual ISelect`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> RightJoin(Expression`1<Func`17<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, bool>> exp);
    public abstract virtual ISelect`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> Where(Expression`1<Func`17<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, bool>> exp);
    public abstract virtual ISelect`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> WhereIf(bool condition, Expression`1<Func`17<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, bool>> exp);
    public abstract virtual ISelectGrouping`2<TKey, NativeTuple`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> GroupBy(Expression`1<Func`17<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TKey>> exp);
    public abstract virtual ISelect`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> OrderBy(Expression`1<Func`17<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TMember>> column);
    public abstract virtual ISelect`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> OrderByDescending(Expression`1<Func`17<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TMember>> column);
    public abstract virtual ISelect`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> OrderByIf(bool condition, Expression`1<Func`17<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TMember>> column, bool descending);
    public abstract virtual ISelect`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> WithSql(string sqlT1, string sqlT2, string sqlT3, string sqlT4, string sqlT5, string sqlT6, string sqlT7, string sqlT8, string sqlT9, string sqlT10, string sqlT11, string sqlT12, string sqlT13, string sqlT14, string sqlT15, string sqlT16, object parms);
    public abstract virtual ISelect`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> As(string aliasT1, string aliasT2, string aliasT3, string aliasT4, string aliasT5, string aliasT6, string aliasT7, string aliasT8, string aliasT9, string aliasT10, string aliasT11, string aliasT12, string aliasT13, string aliasT14, string aliasT15, string aliasT16);
    public abstract virtual ISelect`1<TDto> WithTempQuery(Expression`1<Func`17<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TDto>> selector);
    public abstract virtual bool Any(Expression`1<Func`2<HzyTuple`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>, bool>> exp);
    public abstract virtual int InsertInto(string tableName, Expression`1<Func`2<HzyTuple`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>, TTargetEntity>> select);
    public abstract virtual DataTable ToDataTable(Expression`1<Func`2<HzyTuple`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>, TReturn>> select);
    public abstract virtual List`1<TReturn> ToList(Expression`1<Func`2<HzyTuple`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>, TReturn>> select);
    public abstract virtual void ToChunk(Expression`1<Func`2<HzyTuple`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>, TReturn>> select, int size, Action`1<FetchCallbackArgs`1<List`1<TReturn>>> done);
    public abstract virtual TReturn ToOne(Expression`1<Func`2<HzyTuple`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>, TReturn>> select);
    public abstract virtual TReturn First(Expression`1<Func`2<HzyTuple`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>, TReturn>> select);
    public abstract virtual string ToSql(Expression`1<Func`2<HzyTuple`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>, TReturn>> select, FieldAliasOptions fieldAlias);
    public abstract virtual decimal Sum(Expression`1<Func`2<HzyTuple`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>, TMember>> column);
    public abstract virtual TMember Min(Expression`1<Func`2<HzyTuple`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>, TMember>> column);
    public abstract virtual TMember Max(Expression`1<Func`2<HzyTuple`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>, TMember>> column);
    public abstract virtual double Avg(Expression`1<Func`2<HzyTuple`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>, TMember>> column);
    public abstract virtual ISelect`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> LeftJoin(Expression`1<Func`2<HzyTuple`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>, bool>> exp);
    public abstract virtual ISelect`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> InnerJoin(Expression`1<Func`2<HzyTuple`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>, bool>> exp);
    public abstract virtual ISelect`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> RightJoin(Expression`1<Func`2<HzyTuple`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>, bool>> exp);
    public abstract virtual ISelect`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> Where(Expression`1<Func`2<HzyTuple`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>, bool>> exp);
    public abstract virtual ISelect`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> WhereIf(bool condition, Expression`1<Func`2<HzyTuple`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>, bool>> exp);
    public abstract virtual ISelectGrouping`2<TKey, NativeTuple`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> GroupBy(Expression`1<Func`2<HzyTuple`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>, TKey>> exp);
    public abstract virtual ISelect`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> OrderBy(Expression`1<Func`2<HzyTuple`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>, TMember>> column);
    public abstract virtual ISelect`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> OrderByDescending(Expression`1<Func`2<HzyTuple`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>, TMember>> column);
    public abstract virtual ISelect`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> OrderByIf(bool condition, Expression`1<Func`2<HzyTuple`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>, TMember>> column, bool descending);
    public abstract virtual ISelect`1<TDto> WithTempQuery(Expression`1<Func`2<HzyTuple`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>, TDto>> selector);
}
public interface FreeSql.ISelect`2 {
    public abstract virtual Task`1<bool> AnyAsync(Expression`1<Func`3<T1, T2, bool>> exp, CancellationToken cancellationToken);
    public abstract virtual Task`1<int> InsertIntoAsync(string tableName, Expression`1<Func`3<T1, T2, TTargetEntity>> select, CancellationToken cancellationToken);
    public abstract virtual Task`1<DataTable> ToDataTableAsync(Expression`1<Func`3<T1, T2, TReturn>> select, CancellationToken cancellationToken);
    public abstract virtual Task`1<List`1<TReturn>> ToListAsync(Expression`1<Func`3<T1, T2, TReturn>> select, CancellationToken cancellationToken);
    public abstract virtual Task`1<List`1<TDto>> ToListAsync(CancellationToken cancellationToken);
    public abstract virtual Task`1<TReturn> ToOneAsync(Expression`1<Func`3<T1, T2, TReturn>> select, CancellationToken cancellationToken);
    public abstract virtual Task`1<TReturn> FirstAsync(Expression`1<Func`3<T1, T2, TReturn>> select, CancellationToken cancellationToken);
    public abstract virtual Task`1<TDto> FirstAsync(CancellationToken cancellationToken);
    public abstract virtual Task`1<TReturn> ToAggregateAsync(Expression`1<Func`3<ISelectGroupingAggregate`1<T1>, ISelectGroupingAggregate`1<T2>, TReturn>> select, CancellationToken cancellationToken);
    public abstract virtual Task`1<decimal> SumAsync(Expression`1<Func`3<T1, T2, TMember>> column, CancellationToken cancellationToken);
    public abstract virtual Task`1<TMember> MinAsync(Expression`1<Func`3<T1, T2, TMember>> column, CancellationToken cancellationToken);
    public abstract virtual Task`1<TMember> MaxAsync(Expression`1<Func`3<T1, T2, TMember>> column, CancellationToken cancellationToken);
    public abstract virtual Task`1<double> AvgAsync(Expression`1<Func`3<T1, T2, TMember>> column, CancellationToken cancellationToken);
    public abstract virtual Task`1<bool> AnyAsync(Expression`1<Func`2<HzyTuple`2<T1, T2>, bool>> exp, CancellationToken cancellationToken);
    public abstract virtual Task`1<int> InsertIntoAsync(string tableName, Expression`1<Func`2<HzyTuple`2<T1, T2>, TTargetEntity>> select, CancellationToken cancellationToken);
    public abstract virtual Task`1<DataTable> ToDataTableAsync(Expression`1<Func`2<HzyTuple`2<T1, T2>, TReturn>> select, CancellationToken cancellationToken);
    public abstract virtual Task`1<List`1<TReturn>> ToListAsync(Expression`1<Func`2<HzyTuple`2<T1, T2>, TReturn>> select, CancellationToken cancellationToken);
    public abstract virtual Task`1<TReturn> ToOneAsync(Expression`1<Func`2<HzyTuple`2<T1, T2>, TReturn>> select, CancellationToken cancellationToken);
    public abstract virtual Task`1<TReturn> FirstAsync(Expression`1<Func`2<HzyTuple`2<T1, T2>, TReturn>> select, CancellationToken cancellationToken);
    public abstract virtual Task`1<decimal> SumAsync(Expression`1<Func`2<HzyTuple`2<T1, T2>, TMember>> column, CancellationToken cancellationToken);
    public abstract virtual Task`1<TMember> MinAsync(Expression`1<Func`2<HzyTuple`2<T1, T2>, TMember>> column, CancellationToken cancellationToken);
    public abstract virtual Task`1<TMember> MaxAsync(Expression`1<Func`2<HzyTuple`2<T1, T2>, TMember>> column, CancellationToken cancellationToken);
    public abstract virtual Task`1<double> AvgAsync(Expression`1<Func`2<HzyTuple`2<T1, T2>, TMember>> column, CancellationToken cancellationToken);
    public abstract virtual bool Any(Expression`1<Func`3<T1, T2, bool>> exp);
    public abstract virtual int InsertInto(string tableName, Expression`1<Func`3<T1, T2, TTargetEntity>> select);
    public abstract virtual DataTable ToDataTable(Expression`1<Func`3<T1, T2, TReturn>> select);
    public abstract virtual List`1<TReturn> ToList(Expression`1<Func`3<T1, T2, TReturn>> select);
    public abstract virtual List`1<TDto> ToList();
    public abstract virtual void ToChunk(Expression`1<Func`3<T1, T2, TReturn>> select, int size, Action`1<FetchCallbackArgs`1<List`1<TReturn>>> done);
    public abstract virtual TReturn ToOne(Expression`1<Func`3<T1, T2, TReturn>> select);
    public abstract virtual TReturn First(Expression`1<Func`3<T1, T2, TReturn>> select);
    public abstract virtual TDto First();
    public abstract virtual string ToSql(Expression`1<Func`3<T1, T2, TReturn>> select, FieldAliasOptions fieldAlias);
    public abstract virtual TReturn ToAggregate(Expression`1<Func`3<ISelectGroupingAggregate`1<T1>, ISelectGroupingAggregate`1<T2>, TReturn>> select);
    public abstract virtual ISelect`2<T1, T2> Aggregate(Expression`1<Func`3<ISelectGroupingAggregate`1<T1>, ISelectGroupingAggregate`1<T2>, TReturn>> select, TReturn& result);
    public abstract virtual decimal Sum(Expression`1<Func`3<T1, T2, TMember>> column);
    public abstract virtual TMember Min(Expression`1<Func`3<T1, T2, TMember>> column);
    public abstract virtual TMember Max(Expression`1<Func`3<T1, T2, TMember>> column);
    public abstract virtual double Avg(Expression`1<Func`3<T1, T2, TMember>> column);
    public abstract virtual ISelect`2<T1, T2> LeftJoin(Expression`1<Func`3<T1, T2, bool>> exp);
    public abstract virtual ISelect`2<T1, T2> InnerJoin(Expression`1<Func`3<T1, T2, bool>> exp);
    public abstract virtual ISelect`2<T1, T2> RightJoin(Expression`1<Func`3<T1, T2, bool>> exp);
    public abstract virtual ISelect`2<T1, T2> Where(Expression`1<Func`3<T1, T2, bool>> exp);
    public abstract virtual ISelect`2<T1, T2> WhereIf(bool condition, Expression`1<Func`3<T1, T2, bool>> exp);
    public abstract virtual ISelectGrouping`2<TKey, NativeTuple`2<T1, T2>> GroupBy(Expression`1<Func`3<T1, T2, TKey>> exp);
    public abstract virtual ISelect`2<T1, T2> OrderBy(Expression`1<Func`3<T1, T2, TMember>> column);
    public abstract virtual ISelect`2<T1, T2> OrderByDescending(Expression`1<Func`3<T1, T2, TMember>> column);
    public abstract virtual ISelect`2<T1, T2> OrderByIf(bool condition, Expression`1<Func`3<T1, T2, TMember>> column, bool descending);
    public abstract virtual ISelect`2<T1, T2> WithSql(string sqlT1, string sqlT2, object parms);
    public abstract virtual ISelect`2<T1, T2> As(string aliasT1, string aliasT2);
    public abstract virtual ISelect`1<TDto> WithTempQuery(Expression`1<Func`3<T1, T2, TDto>> selector);
    public abstract virtual bool Any(Expression`1<Func`2<HzyTuple`2<T1, T2>, bool>> exp);
    public abstract virtual int InsertInto(string tableName, Expression`1<Func`2<HzyTuple`2<T1, T2>, TTargetEntity>> select);
    public abstract virtual DataTable ToDataTable(Expression`1<Func`2<HzyTuple`2<T1, T2>, TReturn>> select);
    public abstract virtual List`1<TReturn> ToList(Expression`1<Func`2<HzyTuple`2<T1, T2>, TReturn>> select);
    public abstract virtual void ToChunk(Expression`1<Func`2<HzyTuple`2<T1, T2>, TReturn>> select, int size, Action`1<FetchCallbackArgs`1<List`1<TReturn>>> done);
    public abstract virtual TReturn ToOne(Expression`1<Func`2<HzyTuple`2<T1, T2>, TReturn>> select);
    public abstract virtual TReturn First(Expression`1<Func`2<HzyTuple`2<T1, T2>, TReturn>> select);
    public abstract virtual string ToSql(Expression`1<Func`2<HzyTuple`2<T1, T2>, TReturn>> select, FieldAliasOptions fieldAlias);
    public abstract virtual decimal Sum(Expression`1<Func`2<HzyTuple`2<T1, T2>, TMember>> column);
    public abstract virtual TMember Min(Expression`1<Func`2<HzyTuple`2<T1, T2>, TMember>> column);
    public abstract virtual TMember Max(Expression`1<Func`2<HzyTuple`2<T1, T2>, TMember>> column);
    public abstract virtual double Avg(Expression`1<Func`2<HzyTuple`2<T1, T2>, TMember>> column);
    public abstract virtual ISelect`2<T1, T2> LeftJoin(Expression`1<Func`2<HzyTuple`2<T1, T2>, bool>> exp);
    public abstract virtual ISelect`2<T1, T2> InnerJoin(Expression`1<Func`2<HzyTuple`2<T1, T2>, bool>> exp);
    public abstract virtual ISelect`2<T1, T2> RightJoin(Expression`1<Func`2<HzyTuple`2<T1, T2>, bool>> exp);
    public abstract virtual ISelect`2<T1, T2> Where(Expression`1<Func`2<HzyTuple`2<T1, T2>, bool>> exp);
    public abstract virtual ISelect`2<T1, T2> WhereIf(bool condition, Expression`1<Func`2<HzyTuple`2<T1, T2>, bool>> exp);
    public abstract virtual ISelectGrouping`2<TKey, NativeTuple`2<T1, T2>> GroupBy(Expression`1<Func`2<HzyTuple`2<T1, T2>, TKey>> exp);
    public abstract virtual ISelect`2<T1, T2> OrderBy(Expression`1<Func`2<HzyTuple`2<T1, T2>, TMember>> column);
    public abstract virtual ISelect`2<T1, T2> OrderByDescending(Expression`1<Func`2<HzyTuple`2<T1, T2>, TMember>> column);
    public abstract virtual ISelect`2<T1, T2> OrderByIf(bool condition, Expression`1<Func`2<HzyTuple`2<T1, T2>, TMember>> column, bool descending);
    public abstract virtual ISelect`1<TDto> WithTempQuery(Expression`1<Func`2<HzyTuple`2<T1, T2>, TDto>> selector);
}
public interface FreeSql.ISelect`3 {
    public abstract virtual Task`1<bool> AnyAsync(Expression`1<Func`4<T1, T2, T3, bool>> exp, CancellationToken cancellationToken);
    public abstract virtual Task`1<int> InsertIntoAsync(string tableName, Expression`1<Func`4<T1, T2, T3, TTargetEntity>> select, CancellationToken cancellationToken);
    public abstract virtual Task`1<DataTable> ToDataTableAsync(Expression`1<Func`4<T1, T2, T3, TReturn>> select, CancellationToken cancellationToken);
    public abstract virtual Task`1<List`1<TReturn>> ToListAsync(Expression`1<Func`4<T1, T2, T3, TReturn>> select, CancellationToken cancellationToken);
    public abstract virtual Task`1<List`1<TDto>> ToListAsync(CancellationToken cancellationToken);
    public abstract virtual Task`1<TReturn> ToOneAsync(Expression`1<Func`4<T1, T2, T3, TReturn>> select, CancellationToken cancellationToken);
    public abstract virtual Task`1<TReturn> FirstAsync(Expression`1<Func`4<T1, T2, T3, TReturn>> select, CancellationToken cancellationToken);
    public abstract virtual Task`1<TDto> FirstAsync(CancellationToken cancellationToken);
    public abstract virtual Task`1<TReturn> ToAggregateAsync(Expression`1<Func`4<ISelectGroupingAggregate`1<T1>, ISelectGroupingAggregate`1<T2>, ISelectGroupingAggregate`1<T3>, TReturn>> select, CancellationToken cancellationToken);
    public abstract virtual Task`1<decimal> SumAsync(Expression`1<Func`4<T1, T2, T3, TMember>> column, CancellationToken cancellationToken);
    public abstract virtual Task`1<TMember> MinAsync(Expression`1<Func`4<T1, T2, T3, TMember>> column, CancellationToken cancellationToken);
    public abstract virtual Task`1<TMember> MaxAsync(Expression`1<Func`4<T1, T2, T3, TMember>> column, CancellationToken cancellationToken);
    public abstract virtual Task`1<double> AvgAsync(Expression`1<Func`4<T1, T2, T3, TMember>> column, CancellationToken cancellationToken);
    public abstract virtual Task`1<bool> AnyAsync(Expression`1<Func`2<HzyTuple`3<T1, T2, T3>, bool>> exp, CancellationToken cancellationToken);
    public abstract virtual Task`1<int> InsertIntoAsync(string tableName, Expression`1<Func`2<HzyTuple`3<T1, T2, T3>, TTargetEntity>> select, CancellationToken cancellationToken);
    public abstract virtual Task`1<DataTable> ToDataTableAsync(Expression`1<Func`2<HzyTuple`3<T1, T2, T3>, TReturn>> select, CancellationToken cancellationToken);
    public abstract virtual Task`1<List`1<TReturn>> ToListAsync(Expression`1<Func`2<HzyTuple`3<T1, T2, T3>, TReturn>> select, CancellationToken cancellationToken);
    public abstract virtual Task`1<TReturn> ToOneAsync(Expression`1<Func`2<HzyTuple`3<T1, T2, T3>, TReturn>> select, CancellationToken cancellationToken);
    public abstract virtual Task`1<TReturn> FirstAsync(Expression`1<Func`2<HzyTuple`3<T1, T2, T3>, TReturn>> select, CancellationToken cancellationToken);
    public abstract virtual Task`1<decimal> SumAsync(Expression`1<Func`2<HzyTuple`3<T1, T2, T3>, TMember>> column, CancellationToken cancellationToken);
    public abstract virtual Task`1<TMember> MinAsync(Expression`1<Func`2<HzyTuple`3<T1, T2, T3>, TMember>> column, CancellationToken cancellationToken);
    public abstract virtual Task`1<TMember> MaxAsync(Expression`1<Func`2<HzyTuple`3<T1, T2, T3>, TMember>> column, CancellationToken cancellationToken);
    public abstract virtual Task`1<double> AvgAsync(Expression`1<Func`2<HzyTuple`3<T1, T2, T3>, TMember>> column, CancellationToken cancellationToken);
    public abstract virtual bool Any(Expression`1<Func`4<T1, T2, T3, bool>> exp);
    public abstract virtual int InsertInto(string tableName, Expression`1<Func`4<T1, T2, T3, TTargetEntity>> select);
    public abstract virtual DataTable ToDataTable(Expression`1<Func`4<T1, T2, T3, TReturn>> select);
    public abstract virtual List`1<TReturn> ToList(Expression`1<Func`4<T1, T2, T3, TReturn>> select);
    public abstract virtual List`1<TDto> ToList();
    public abstract virtual void ToChunk(Expression`1<Func`4<T1, T2, T3, TReturn>> select, int size, Action`1<FetchCallbackArgs`1<List`1<TReturn>>> done);
    public abstract virtual TReturn ToOne(Expression`1<Func`4<T1, T2, T3, TReturn>> select);
    public abstract virtual TReturn First(Expression`1<Func`4<T1, T2, T3, TReturn>> select);
    public abstract virtual TDto First();
    public abstract virtual string ToSql(Expression`1<Func`4<T1, T2, T3, TReturn>> select, FieldAliasOptions fieldAlias);
    public abstract virtual TReturn ToAggregate(Expression`1<Func`4<ISelectGroupingAggregate`1<T1>, ISelectGroupingAggregate`1<T2>, ISelectGroupingAggregate`1<T3>, TReturn>> select);
    public abstract virtual ISelect`3<T1, T2, T3> Aggregate(Expression`1<Func`4<ISelectGroupingAggregate`1<T1>, ISelectGroupingAggregate`1<T2>, ISelectGroupingAggregate`1<T3>, TReturn>> select, TReturn& result);
    public abstract virtual decimal Sum(Expression`1<Func`4<T1, T2, T3, TMember>> column);
    public abstract virtual TMember Min(Expression`1<Func`4<T1, T2, T3, TMember>> column);
    public abstract virtual TMember Max(Expression`1<Func`4<T1, T2, T3, TMember>> column);
    public abstract virtual double Avg(Expression`1<Func`4<T1, T2, T3, TMember>> column);
    public abstract virtual ISelect`3<T1, T2, T3> LeftJoin(Expression`1<Func`4<T1, T2, T3, bool>> exp);
    public abstract virtual ISelect`3<T1, T2, T3> InnerJoin(Expression`1<Func`4<T1, T2, T3, bool>> exp);
    public abstract virtual ISelect`3<T1, T2, T3> RightJoin(Expression`1<Func`4<T1, T2, T3, bool>> exp);
    public abstract virtual ISelect`3<T1, T2, T3> Where(Expression`1<Func`4<T1, T2, T3, bool>> exp);
    public abstract virtual ISelect`3<T1, T2, T3> WhereIf(bool condition, Expression`1<Func`4<T1, T2, T3, bool>> exp);
    public abstract virtual ISelectGrouping`2<TKey, NativeTuple`3<T1, T2, T3>> GroupBy(Expression`1<Func`4<T1, T2, T3, TKey>> exp);
    public abstract virtual ISelect`3<T1, T2, T3> OrderBy(Expression`1<Func`4<T1, T2, T3, TMember>> column);
    public abstract virtual ISelect`3<T1, T2, T3> OrderByDescending(Expression`1<Func`4<T1, T2, T3, TMember>> column);
    public abstract virtual ISelect`3<T1, T2, T3> OrderByIf(bool condition, Expression`1<Func`4<T1, T2, T3, TMember>> column, bool descending);
    public abstract virtual ISelect`3<T1, T2, T3> WithSql(string sqlT1, string sqlT2, string sqlT3, object parms);
    public abstract virtual ISelect`3<T1, T2, T3> As(string aliasT1, string aliasT2, string aliasT3);
    public abstract virtual ISelect`1<TDto> WithTempQuery(Expression`1<Func`4<T1, T2, T3, TDto>> selector);
    public abstract virtual bool Any(Expression`1<Func`2<HzyTuple`3<T1, T2, T3>, bool>> exp);
    public abstract virtual int InsertInto(string tableName, Expression`1<Func`2<HzyTuple`3<T1, T2, T3>, TTargetEntity>> select);
    public abstract virtual DataTable ToDataTable(Expression`1<Func`2<HzyTuple`3<T1, T2, T3>, TReturn>> select);
    public abstract virtual List`1<TReturn> ToList(Expression`1<Func`2<HzyTuple`3<T1, T2, T3>, TReturn>> select);
    public abstract virtual void ToChunk(Expression`1<Func`2<HzyTuple`3<T1, T2, T3>, TReturn>> select, int size, Action`1<FetchCallbackArgs`1<List`1<TReturn>>> done);
    public abstract virtual TReturn ToOne(Expression`1<Func`2<HzyTuple`3<T1, T2, T3>, TReturn>> select);
    public abstract virtual TReturn First(Expression`1<Func`2<HzyTuple`3<T1, T2, T3>, TReturn>> select);
    public abstract virtual string ToSql(Expression`1<Func`2<HzyTuple`3<T1, T2, T3>, TReturn>> select, FieldAliasOptions fieldAlias);
    public abstract virtual decimal Sum(Expression`1<Func`2<HzyTuple`3<T1, T2, T3>, TMember>> column);
    public abstract virtual TMember Min(Expression`1<Func`2<HzyTuple`3<T1, T2, T3>, TMember>> column);
    public abstract virtual TMember Max(Expression`1<Func`2<HzyTuple`3<T1, T2, T3>, TMember>> column);
    public abstract virtual double Avg(Expression`1<Func`2<HzyTuple`3<T1, T2, T3>, TMember>> column);
    public abstract virtual ISelect`3<T1, T2, T3> LeftJoin(Expression`1<Func`2<HzyTuple`3<T1, T2, T3>, bool>> exp);
    public abstract virtual ISelect`3<T1, T2, T3> InnerJoin(Expression`1<Func`2<HzyTuple`3<T1, T2, T3>, bool>> exp);
    public abstract virtual ISelect`3<T1, T2, T3> RightJoin(Expression`1<Func`2<HzyTuple`3<T1, T2, T3>, bool>> exp);
    public abstract virtual ISelect`3<T1, T2, T3> Where(Expression`1<Func`2<HzyTuple`3<T1, T2, T3>, bool>> exp);
    public abstract virtual ISelect`3<T1, T2, T3> WhereIf(bool condition, Expression`1<Func`2<HzyTuple`3<T1, T2, T3>, bool>> exp);
    public abstract virtual ISelectGrouping`2<TKey, NativeTuple`3<T1, T2, T3>> GroupBy(Expression`1<Func`2<HzyTuple`3<T1, T2, T3>, TKey>> exp);
    public abstract virtual ISelect`3<T1, T2, T3> OrderBy(Expression`1<Func`2<HzyTuple`3<T1, T2, T3>, TMember>> column);
    public abstract virtual ISelect`3<T1, T2, T3> OrderByDescending(Expression`1<Func`2<HzyTuple`3<T1, T2, T3>, TMember>> column);
    public abstract virtual ISelect`3<T1, T2, T3> OrderByIf(bool condition, Expression`1<Func`2<HzyTuple`3<T1, T2, T3>, TMember>> column, bool descending);
    public abstract virtual ISelect`1<TDto> WithTempQuery(Expression`1<Func`2<HzyTuple`3<T1, T2, T3>, TDto>> selector);
}
public interface FreeSql.ISelect`4 {
    public abstract virtual Task`1<bool> AnyAsync(Expression`1<Func`5<T1, T2, T3, T4, bool>> exp, CancellationToken cancellationToken);
    public abstract virtual Task`1<int> InsertIntoAsync(string tableName, Expression`1<Func`5<T1, T2, T3, T4, TTargetEntity>> select, CancellationToken cancellationToken);
    public abstract virtual Task`1<DataTable> ToDataTableAsync(Expression`1<Func`5<T1, T2, T3, T4, TReturn>> select, CancellationToken cancellationToken);
    public abstract virtual Task`1<List`1<TReturn>> ToListAsync(Expression`1<Func`5<T1, T2, T3, T4, TReturn>> select, CancellationToken cancellationToken);
    public abstract virtual Task`1<List`1<TDto>> ToListAsync(CancellationToken cancellationToken);
    public abstract virtual Task`1<TReturn> ToOneAsync(Expression`1<Func`5<T1, T2, T3, T4, TReturn>> select, CancellationToken cancellationToken);
    public abstract virtual Task`1<TReturn> FirstAsync(Expression`1<Func`5<T1, T2, T3, T4, TReturn>> select, CancellationToken cancellationToken);
    public abstract virtual Task`1<TDto> FirstAsync(CancellationToken cancellationToken);
    public abstract virtual Task`1<TReturn> ToAggregateAsync(Expression`1<Func`5<ISelectGroupingAggregate`1<T1>, ISelectGroupingAggregate`1<T2>, ISelectGroupingAggregate`1<T3>, ISelectGroupingAggregate`1<T4>, TReturn>> select, CancellationToken cancellationToken);
    public abstract virtual Task`1<decimal> SumAsync(Expression`1<Func`5<T1, T2, T3, T4, TMember>> column, CancellationToken cancellationToken);
    public abstract virtual Task`1<TMember> MinAsync(Expression`1<Func`5<T1, T2, T3, T4, TMember>> column, CancellationToken cancellationToken);
    public abstract virtual Task`1<TMember> MaxAsync(Expression`1<Func`5<T1, T2, T3, T4, TMember>> column, CancellationToken cancellationToken);
    public abstract virtual Task`1<double> AvgAsync(Expression`1<Func`5<T1, T2, T3, T4, TMember>> column, CancellationToken cancellationToken);
    public abstract virtual Task`1<bool> AnyAsync(Expression`1<Func`2<HzyTuple`4<T1, T2, T3, T4>, bool>> exp, CancellationToken cancellationToken);
    public abstract virtual Task`1<int> InsertIntoAsync(string tableName, Expression`1<Func`2<HzyTuple`4<T1, T2, T3, T4>, TTargetEntity>> select, CancellationToken cancellationToken);
    public abstract virtual Task`1<DataTable> ToDataTableAsync(Expression`1<Func`2<HzyTuple`4<T1, T2, T3, T4>, TReturn>> select, CancellationToken cancellationToken);
    public abstract virtual Task`1<List`1<TReturn>> ToListAsync(Expression`1<Func`2<HzyTuple`4<T1, T2, T3, T4>, TReturn>> select, CancellationToken cancellationToken);
    public abstract virtual Task`1<TReturn> ToOneAsync(Expression`1<Func`2<HzyTuple`4<T1, T2, T3, T4>, TReturn>> select, CancellationToken cancellationToken);
    public abstract virtual Task`1<TReturn> FirstAsync(Expression`1<Func`2<HzyTuple`4<T1, T2, T3, T4>, TReturn>> select, CancellationToken cancellationToken);
    public abstract virtual Task`1<decimal> SumAsync(Expression`1<Func`2<HzyTuple`4<T1, T2, T3, T4>, TMember>> column, CancellationToken cancellationToken);
    public abstract virtual Task`1<TMember> MinAsync(Expression`1<Func`2<HzyTuple`4<T1, T2, T3, T4>, TMember>> column, CancellationToken cancellationToken);
    public abstract virtual Task`1<TMember> MaxAsync(Expression`1<Func`2<HzyTuple`4<T1, T2, T3, T4>, TMember>> column, CancellationToken cancellationToken);
    public abstract virtual Task`1<double> AvgAsync(Expression`1<Func`2<HzyTuple`4<T1, T2, T3, T4>, TMember>> column, CancellationToken cancellationToken);
    public abstract virtual bool Any(Expression`1<Func`5<T1, T2, T3, T4, bool>> exp);
    public abstract virtual int InsertInto(string tableName, Expression`1<Func`5<T1, T2, T3, T4, TTargetEntity>> select);
    public abstract virtual DataTable ToDataTable(Expression`1<Func`5<T1, T2, T3, T4, TReturn>> select);
    public abstract virtual List`1<TReturn> ToList(Expression`1<Func`5<T1, T2, T3, T4, TReturn>> select);
    public abstract virtual List`1<TDto> ToList();
    public abstract virtual void ToChunk(Expression`1<Func`5<T1, T2, T3, T4, TReturn>> select, int size, Action`1<FetchCallbackArgs`1<List`1<TReturn>>> done);
    public abstract virtual TReturn ToOne(Expression`1<Func`5<T1, T2, T3, T4, TReturn>> select);
    public abstract virtual TReturn First(Expression`1<Func`5<T1, T2, T3, T4, TReturn>> select);
    public abstract virtual TDto First();
    public abstract virtual string ToSql(Expression`1<Func`5<T1, T2, T3, T4, TReturn>> select, FieldAliasOptions fieldAlias);
    public abstract virtual TReturn ToAggregate(Expression`1<Func`5<ISelectGroupingAggregate`1<T1>, ISelectGroupingAggregate`1<T2>, ISelectGroupingAggregate`1<T3>, ISelectGroupingAggregate`1<T4>, TReturn>> select);
    public abstract virtual ISelect`4<T1, T2, T3, T4> Aggregate(Expression`1<Func`5<ISelectGroupingAggregate`1<T1>, ISelectGroupingAggregate`1<T2>, ISelectGroupingAggregate`1<T3>, ISelectGroupingAggregate`1<T4>, TReturn>> select, TReturn& result);
    public abstract virtual decimal Sum(Expression`1<Func`5<T1, T2, T3, T4, TMember>> column);
    public abstract virtual TMember Min(Expression`1<Func`5<T1, T2, T3, T4, TMember>> column);
    public abstract virtual TMember Max(Expression`1<Func`5<T1, T2, T3, T4, TMember>> column);
    public abstract virtual double Avg(Expression`1<Func`5<T1, T2, T3, T4, TMember>> column);
    public abstract virtual ISelect`4<T1, T2, T3, T4> LeftJoin(Expression`1<Func`5<T1, T2, T3, T4, bool>> exp);
    public abstract virtual ISelect`4<T1, T2, T3, T4> InnerJoin(Expression`1<Func`5<T1, T2, T3, T4, bool>> exp);
    public abstract virtual ISelect`4<T1, T2, T3, T4> RightJoin(Expression`1<Func`5<T1, T2, T3, T4, bool>> exp);
    public abstract virtual ISelect`4<T1, T2, T3, T4> Where(Expression`1<Func`5<T1, T2, T3, T4, bool>> exp);
    public abstract virtual ISelect`4<T1, T2, T3, T4> WhereIf(bool condition, Expression`1<Func`5<T1, T2, T3, T4, bool>> exp);
    public abstract virtual ISelectGrouping`2<TKey, NativeTuple`4<T1, T2, T3, T4>> GroupBy(Expression`1<Func`5<T1, T2, T3, T4, TKey>> exp);
    public abstract virtual ISelect`4<T1, T2, T3, T4> OrderBy(Expression`1<Func`5<T1, T2, T3, T4, TMember>> column);
    public abstract virtual ISelect`4<T1, T2, T3, T4> OrderByDescending(Expression`1<Func`5<T1, T2, T3, T4, TMember>> column);
    public abstract virtual ISelect`4<T1, T2, T3, T4> OrderByIf(bool condition, Expression`1<Func`5<T1, T2, T3, T4, TMember>> column, bool descending);
    public abstract virtual ISelect`4<T1, T2, T3, T4> WithSql(string sqlT1, string sqlT2, string sqlT3, string sqlT4, object parms);
    public abstract virtual ISelect`4<T1, T2, T3, T4> As(string aliasT1, string aliasT2, string aliasT3, string aliasT4);
    public abstract virtual ISelect`1<TDto> WithTempQuery(Expression`1<Func`5<T1, T2, T3, T4, TDto>> selector);
    public abstract virtual bool Any(Expression`1<Func`2<HzyTuple`4<T1, T2, T3, T4>, bool>> exp);
    public abstract virtual int InsertInto(string tableName, Expression`1<Func`2<HzyTuple`4<T1, T2, T3, T4>, TTargetEntity>> select);
    public abstract virtual DataTable ToDataTable(Expression`1<Func`2<HzyTuple`4<T1, T2, T3, T4>, TReturn>> select);
    public abstract virtual List`1<TReturn> ToList(Expression`1<Func`2<HzyTuple`4<T1, T2, T3, T4>, TReturn>> select);
    public abstract virtual void ToChunk(Expression`1<Func`2<HzyTuple`4<T1, T2, T3, T4>, TReturn>> select, int size, Action`1<FetchCallbackArgs`1<List`1<TReturn>>> done);
    public abstract virtual TReturn ToOne(Expression`1<Func`2<HzyTuple`4<T1, T2, T3, T4>, TReturn>> select);
    public abstract virtual TReturn First(Expression`1<Func`2<HzyTuple`4<T1, T2, T3, T4>, TReturn>> select);
    public abstract virtual string ToSql(Expression`1<Func`2<HzyTuple`4<T1, T2, T3, T4>, TReturn>> select, FieldAliasOptions fieldAlias);
    public abstract virtual decimal Sum(Expression`1<Func`2<HzyTuple`4<T1, T2, T3, T4>, TMember>> column);
    public abstract virtual TMember Min(Expression`1<Func`2<HzyTuple`4<T1, T2, T3, T4>, TMember>> column);
    public abstract virtual TMember Max(Expression`1<Func`2<HzyTuple`4<T1, T2, T3, T4>, TMember>> column);
    public abstract virtual double Avg(Expression`1<Func`2<HzyTuple`4<T1, T2, T3, T4>, TMember>> column);
    public abstract virtual ISelect`4<T1, T2, T3, T4> LeftJoin(Expression`1<Func`2<HzyTuple`4<T1, T2, T3, T4>, bool>> exp);
    public abstract virtual ISelect`4<T1, T2, T3, T4> InnerJoin(Expression`1<Func`2<HzyTuple`4<T1, T2, T3, T4>, bool>> exp);
    public abstract virtual ISelect`4<T1, T2, T3, T4> RightJoin(Expression`1<Func`2<HzyTuple`4<T1, T2, T3, T4>, bool>> exp);
    public abstract virtual ISelect`4<T1, T2, T3, T4> Where(Expression`1<Func`2<HzyTuple`4<T1, T2, T3, T4>, bool>> exp);
    public abstract virtual ISelect`4<T1, T2, T3, T4> WhereIf(bool condition, Expression`1<Func`2<HzyTuple`4<T1, T2, T3, T4>, bool>> exp);
    public abstract virtual ISelectGrouping`2<TKey, NativeTuple`4<T1, T2, T3, T4>> GroupBy(Expression`1<Func`2<HzyTuple`4<T1, T2, T3, T4>, TKey>> exp);
    public abstract virtual ISelect`4<T1, T2, T3, T4> OrderBy(Expression`1<Func`2<HzyTuple`4<T1, T2, T3, T4>, TMember>> column);
    public abstract virtual ISelect`4<T1, T2, T3, T4> OrderByDescending(Expression`1<Func`2<HzyTuple`4<T1, T2, T3, T4>, TMember>> column);
    public abstract virtual ISelect`4<T1, T2, T3, T4> OrderByIf(bool condition, Expression`1<Func`2<HzyTuple`4<T1, T2, T3, T4>, TMember>> column, bool descending);
    public abstract virtual ISelect`1<TDto> WithTempQuery(Expression`1<Func`2<HzyTuple`4<T1, T2, T3, T4>, TDto>> selector);
}
public interface FreeSql.ISelect`5 {
    public abstract virtual Task`1<bool> AnyAsync(Expression`1<Func`6<T1, T2, T3, T4, T5, bool>> exp, CancellationToken cancellationToken);
    public abstract virtual Task`1<int> InsertIntoAsync(string tableName, Expression`1<Func`6<T1, T2, T3, T4, T5, TTargetEntity>> select, CancellationToken cancellationToken);
    public abstract virtual Task`1<DataTable> ToDataTableAsync(Expression`1<Func`6<T1, T2, T3, T4, T5, TReturn>> select, CancellationToken cancellationToken);
    public abstract virtual Task`1<List`1<TReturn>> ToListAsync(Expression`1<Func`6<T1, T2, T3, T4, T5, TReturn>> select, CancellationToken cancellationToken);
    public abstract virtual Task`1<List`1<TDto>> ToListAsync(CancellationToken cancellationToken);
    public abstract virtual Task`1<TReturn> ToOneAsync(Expression`1<Func`6<T1, T2, T3, T4, T5, TReturn>> select, CancellationToken cancellationToken);
    public abstract virtual Task`1<TReturn> FirstAsync(Expression`1<Func`6<T1, T2, T3, T4, T5, TReturn>> select, CancellationToken cancellationToken);
    public abstract virtual Task`1<TDto> FirstAsync(CancellationToken cancellationToken);
    public abstract virtual Task`1<TReturn> ToAggregateAsync(Expression`1<Func`6<ISelectGroupingAggregate`1<T1>, ISelectGroupingAggregate`1<T2>, ISelectGroupingAggregate`1<T3>, ISelectGroupingAggregate`1<T4>, ISelectGroupingAggregate`1<T5>, TReturn>> select, CancellationToken cancellationToken);
    public abstract virtual Task`1<decimal> SumAsync(Expression`1<Func`6<T1, T2, T3, T4, T5, TMember>> column, CancellationToken cancellationToken);
    public abstract virtual Task`1<TMember> MinAsync(Expression`1<Func`6<T1, T2, T3, T4, T5, TMember>> column, CancellationToken cancellationToken);
    public abstract virtual Task`1<TMember> MaxAsync(Expression`1<Func`6<T1, T2, T3, T4, T5, TMember>> column, CancellationToken cancellationToken);
    public abstract virtual Task`1<double> AvgAsync(Expression`1<Func`6<T1, T2, T3, T4, T5, TMember>> column, CancellationToken cancellationToken);
    public abstract virtual Task`1<bool> AnyAsync(Expression`1<Func`2<HzyTuple`5<T1, T2, T3, T4, T5>, bool>> exp, CancellationToken cancellationToken);
    public abstract virtual Task`1<int> InsertIntoAsync(string tableName, Expression`1<Func`2<HzyTuple`5<T1, T2, T3, T4, T5>, TTargetEntity>> select, CancellationToken cancellationToken);
    public abstract virtual Task`1<DataTable> ToDataTableAsync(Expression`1<Func`2<HzyTuple`5<T1, T2, T3, T4, T5>, TReturn>> select, CancellationToken cancellationToken);
    public abstract virtual Task`1<List`1<TReturn>> ToListAsync(Expression`1<Func`2<HzyTuple`5<T1, T2, T3, T4, T5>, TReturn>> select, CancellationToken cancellationToken);
    public abstract virtual Task`1<TReturn> ToOneAsync(Expression`1<Func`2<HzyTuple`5<T1, T2, T3, T4, T5>, TReturn>> select, CancellationToken cancellationToken);
    public abstract virtual Task`1<TReturn> FirstAsync(Expression`1<Func`2<HzyTuple`5<T1, T2, T3, T4, T5>, TReturn>> select, CancellationToken cancellationToken);
    public abstract virtual Task`1<decimal> SumAsync(Expression`1<Func`2<HzyTuple`5<T1, T2, T3, T4, T5>, TMember>> column, CancellationToken cancellationToken);
    public abstract virtual Task`1<TMember> MinAsync(Expression`1<Func`2<HzyTuple`5<T1, T2, T3, T4, T5>, TMember>> column, CancellationToken cancellationToken);
    public abstract virtual Task`1<TMember> MaxAsync(Expression`1<Func`2<HzyTuple`5<T1, T2, T3, T4, T5>, TMember>> column, CancellationToken cancellationToken);
    public abstract virtual Task`1<double> AvgAsync(Expression`1<Func`2<HzyTuple`5<T1, T2, T3, T4, T5>, TMember>> column, CancellationToken cancellationToken);
    public abstract virtual bool Any(Expression`1<Func`6<T1, T2, T3, T4, T5, bool>> exp);
    public abstract virtual int InsertInto(string tableName, Expression`1<Func`6<T1, T2, T3, T4, T5, TTargetEntity>> select);
    public abstract virtual DataTable ToDataTable(Expression`1<Func`6<T1, T2, T3, T4, T5, TReturn>> select);
    public abstract virtual List`1<TReturn> ToList(Expression`1<Func`6<T1, T2, T3, T4, T5, TReturn>> select);
    public abstract virtual List`1<TDto> ToList();
    public abstract virtual void ToChunk(Expression`1<Func`6<T1, T2, T3, T4, T5, TReturn>> select, int size, Action`1<FetchCallbackArgs`1<List`1<TReturn>>> done);
    public abstract virtual TReturn ToOne(Expression`1<Func`6<T1, T2, T3, T4, T5, TReturn>> select);
    public abstract virtual TReturn First(Expression`1<Func`6<T1, T2, T3, T4, T5, TReturn>> select);
    public abstract virtual TDto First();
    public abstract virtual string ToSql(Expression`1<Func`6<T1, T2, T3, T4, T5, TReturn>> select, FieldAliasOptions fieldAlias);
    public abstract virtual TReturn ToAggregate(Expression`1<Func`6<ISelectGroupingAggregate`1<T1>, ISelectGroupingAggregate`1<T2>, ISelectGroupingAggregate`1<T3>, ISelectGroupingAggregate`1<T4>, ISelectGroupingAggregate`1<T5>, TReturn>> select);
    public abstract virtual ISelect`5<T1, T2, T3, T4, T5> Aggregate(Expression`1<Func`6<ISelectGroupingAggregate`1<T1>, ISelectGroupingAggregate`1<T2>, ISelectGroupingAggregate`1<T3>, ISelectGroupingAggregate`1<T4>, ISelectGroupingAggregate`1<T5>, TReturn>> select, TReturn& result);
    public abstract virtual decimal Sum(Expression`1<Func`6<T1, T2, T3, T4, T5, TMember>> column);
    public abstract virtual TMember Min(Expression`1<Func`6<T1, T2, T3, T4, T5, TMember>> column);
    public abstract virtual TMember Max(Expression`1<Func`6<T1, T2, T3, T4, T5, TMember>> column);
    public abstract virtual double Avg(Expression`1<Func`6<T1, T2, T3, T4, T5, TMember>> column);
    public abstract virtual ISelect`5<T1, T2, T3, T4, T5> LeftJoin(Expression`1<Func`6<T1, T2, T3, T4, T5, bool>> exp);
    public abstract virtual ISelect`5<T1, T2, T3, T4, T5> InnerJoin(Expression`1<Func`6<T1, T2, T3, T4, T5, bool>> exp);
    public abstract virtual ISelect`5<T1, T2, T3, T4, T5> RightJoin(Expression`1<Func`6<T1, T2, T3, T4, T5, bool>> exp);
    public abstract virtual ISelect`5<T1, T2, T3, T4, T5> Where(Expression`1<Func`6<T1, T2, T3, T4, T5, bool>> exp);
    public abstract virtual ISelect`5<T1, T2, T3, T4, T5> WhereIf(bool condition, Expression`1<Func`6<T1, T2, T3, T4, T5, bool>> exp);
    public abstract virtual ISelectGrouping`2<TKey, NativeTuple`5<T1, T2, T3, T4, T5>> GroupBy(Expression`1<Func`6<T1, T2, T3, T4, T5, TKey>> exp);
    public abstract virtual ISelect`5<T1, T2, T3, T4, T5> OrderBy(Expression`1<Func`6<T1, T2, T3, T4, T5, TMember>> column);
    public abstract virtual ISelect`5<T1, T2, T3, T4, T5> OrderByDescending(Expression`1<Func`6<T1, T2, T3, T4, T5, TMember>> column);
    public abstract virtual ISelect`5<T1, T2, T3, T4, T5> OrderByIf(bool condition, Expression`1<Func`6<T1, T2, T3, T4, T5, TMember>> column, bool descending);
    public abstract virtual ISelect`5<T1, T2, T3, T4, T5> WithSql(string sqlT1, string sqlT2, string sqlT3, string sqlT4, string sqlT5, object parms);
    public abstract virtual ISelect`5<T1, T2, T3, T4, T5> As(string aliasT1, string aliasT2, string aliasT3, string aliasT4, string aliasT5);
    public abstract virtual ISelect`1<TDto> WithTempQuery(Expression`1<Func`6<T1, T2, T3, T4, T5, TDto>> selector);
    public abstract virtual bool Any(Expression`1<Func`2<HzyTuple`5<T1, T2, T3, T4, T5>, bool>> exp);
    public abstract virtual int InsertInto(string tableName, Expression`1<Func`2<HzyTuple`5<T1, T2, T3, T4, T5>, TTargetEntity>> select);
    public abstract virtual DataTable ToDataTable(Expression`1<Func`2<HzyTuple`5<T1, T2, T3, T4, T5>, TReturn>> select);
    public abstract virtual List`1<TReturn> ToList(Expression`1<Func`2<HzyTuple`5<T1, T2, T3, T4, T5>, TReturn>> select);
    public abstract virtual void ToChunk(Expression`1<Func`2<HzyTuple`5<T1, T2, T3, T4, T5>, TReturn>> select, int size, Action`1<FetchCallbackArgs`1<List`1<TReturn>>> done);
    public abstract virtual TReturn ToOne(Expression`1<Func`2<HzyTuple`5<T1, T2, T3, T4, T5>, TReturn>> select);
    public abstract virtual TReturn First(Expression`1<Func`2<HzyTuple`5<T1, T2, T3, T4, T5>, TReturn>> select);
    public abstract virtual string ToSql(Expression`1<Func`2<HzyTuple`5<T1, T2, T3, T4, T5>, TReturn>> select, FieldAliasOptions fieldAlias);
    public abstract virtual decimal Sum(Expression`1<Func`2<HzyTuple`5<T1, T2, T3, T4, T5>, TMember>> column);
    public abstract virtual TMember Min(Expression`1<Func`2<HzyTuple`5<T1, T2, T3, T4, T5>, TMember>> column);
    public abstract virtual TMember Max(Expression`1<Func`2<HzyTuple`5<T1, T2, T3, T4, T5>, TMember>> column);
    public abstract virtual double Avg(Expression`1<Func`2<HzyTuple`5<T1, T2, T3, T4, T5>, TMember>> column);
    public abstract virtual ISelect`5<T1, T2, T3, T4, T5> LeftJoin(Expression`1<Func`2<HzyTuple`5<T1, T2, T3, T4, T5>, bool>> exp);
    public abstract virtual ISelect`5<T1, T2, T3, T4, T5> InnerJoin(Expression`1<Func`2<HzyTuple`5<T1, T2, T3, T4, T5>, bool>> exp);
    public abstract virtual ISelect`5<T1, T2, T3, T4, T5> RightJoin(Expression`1<Func`2<HzyTuple`5<T1, T2, T3, T4, T5>, bool>> exp);
    public abstract virtual ISelect`5<T1, T2, T3, T4, T5> Where(Expression`1<Func`2<HzyTuple`5<T1, T2, T3, T4, T5>, bool>> exp);
    public abstract virtual ISelect`5<T1, T2, T3, T4, T5> WhereIf(bool condition, Expression`1<Func`2<HzyTuple`5<T1, T2, T3, T4, T5>, bool>> exp);
    public abstract virtual ISelectGrouping`2<TKey, NativeTuple`5<T1, T2, T3, T4, T5>> GroupBy(Expression`1<Func`2<HzyTuple`5<T1, T2, T3, T4, T5>, TKey>> exp);
    public abstract virtual ISelect`5<T1, T2, T3, T4, T5> OrderBy(Expression`1<Func`2<HzyTuple`5<T1, T2, T3, T4, T5>, TMember>> column);
    public abstract virtual ISelect`5<T1, T2, T3, T4, T5> OrderByDescending(Expression`1<Func`2<HzyTuple`5<T1, T2, T3, T4, T5>, TMember>> column);
    public abstract virtual ISelect`5<T1, T2, T3, T4, T5> OrderByIf(bool condition, Expression`1<Func`2<HzyTuple`5<T1, T2, T3, T4, T5>, TMember>> column, bool descending);
    public abstract virtual ISelect`1<TDto> WithTempQuery(Expression`1<Func`2<HzyTuple`5<T1, T2, T3, T4, T5>, TDto>> selector);
}
public interface FreeSql.ISelect`6 {
    public abstract virtual Task`1<bool> AnyAsync(Expression`1<Func`7<T1, T2, T3, T4, T5, T6, bool>> exp, CancellationToken cancellationToken);
    public abstract virtual Task`1<int> InsertIntoAsync(string tableName, Expression`1<Func`7<T1, T2, T3, T4, T5, T6, TTargetEntity>> select, CancellationToken cancellationToken);
    public abstract virtual Task`1<DataTable> ToDataTableAsync(Expression`1<Func`7<T1, T2, T3, T4, T5, T6, TReturn>> select, CancellationToken cancellationToken);
    public abstract virtual Task`1<List`1<TReturn>> ToListAsync(Expression`1<Func`7<T1, T2, T3, T4, T5, T6, TReturn>> select, CancellationToken cancellationToken);
    public abstract virtual Task`1<List`1<TDto>> ToListAsync(CancellationToken cancellationToken);
    public abstract virtual Task`1<TReturn> ToOneAsync(Expression`1<Func`7<T1, T2, T3, T4, T5, T6, TReturn>> select, CancellationToken cancellationToken);
    public abstract virtual Task`1<TReturn> FirstAsync(Expression`1<Func`7<T1, T2, T3, T4, T5, T6, TReturn>> select, CancellationToken cancellationToken);
    public abstract virtual Task`1<TDto> FirstAsync(CancellationToken cancellationToken);
    public abstract virtual Task`1<TReturn> ToAggregateAsync(Expression`1<Func`7<ISelectGroupingAggregate`1<T1>, ISelectGroupingAggregate`1<T2>, ISelectGroupingAggregate`1<T3>, ISelectGroupingAggregate`1<T4>, ISelectGroupingAggregate`1<T5>, ISelectGroupingAggregate`1<T6>, TReturn>> select, CancellationToken cancellationToken);
    public abstract virtual Task`1<decimal> SumAsync(Expression`1<Func`7<T1, T2, T3, T4, T5, T6, TMember>> column, CancellationToken cancellationToken);
    public abstract virtual Task`1<TMember> MinAsync(Expression`1<Func`7<T1, T2, T3, T4, T5, T6, TMember>> column, CancellationToken cancellationToken);
    public abstract virtual Task`1<TMember> MaxAsync(Expression`1<Func`7<T1, T2, T3, T4, T5, T6, TMember>> column, CancellationToken cancellationToken);
    public abstract virtual Task`1<double> AvgAsync(Expression`1<Func`7<T1, T2, T3, T4, T5, T6, TMember>> column, CancellationToken cancellationToken);
    public abstract virtual Task`1<bool> AnyAsync(Expression`1<Func`2<HzyTuple`6<T1, T2, T3, T4, T5, T6>, bool>> exp, CancellationToken cancellationToken);
    public abstract virtual Task`1<int> InsertIntoAsync(string tableName, Expression`1<Func`2<HzyTuple`6<T1, T2, T3, T4, T5, T6>, TTargetEntity>> select, CancellationToken cancellationToken);
    public abstract virtual Task`1<DataTable> ToDataTableAsync(Expression`1<Func`2<HzyTuple`6<T1, T2, T3, T4, T5, T6>, TReturn>> select, CancellationToken cancellationToken);
    public abstract virtual Task`1<List`1<TReturn>> ToListAsync(Expression`1<Func`2<HzyTuple`6<T1, T2, T3, T4, T5, T6>, TReturn>> select, CancellationToken cancellationToken);
    public abstract virtual Task`1<TReturn> ToOneAsync(Expression`1<Func`2<HzyTuple`6<T1, T2, T3, T4, T5, T6>, TReturn>> select, CancellationToken cancellationToken);
    public abstract virtual Task`1<TReturn> FirstAsync(Expression`1<Func`2<HzyTuple`6<T1, T2, T3, T4, T5, T6>, TReturn>> select, CancellationToken cancellationToken);
    public abstract virtual Task`1<decimal> SumAsync(Expression`1<Func`2<HzyTuple`6<T1, T2, T3, T4, T5, T6>, TMember>> column, CancellationToken cancellationToken);
    public abstract virtual Task`1<TMember> MinAsync(Expression`1<Func`2<HzyTuple`6<T1, T2, T3, T4, T5, T6>, TMember>> column, CancellationToken cancellationToken);
    public abstract virtual Task`1<TMember> MaxAsync(Expression`1<Func`2<HzyTuple`6<T1, T2, T3, T4, T5, T6>, TMember>> column, CancellationToken cancellationToken);
    public abstract virtual Task`1<double> AvgAsync(Expression`1<Func`2<HzyTuple`6<T1, T2, T3, T4, T5, T6>, TMember>> column, CancellationToken cancellationToken);
    public abstract virtual bool Any(Expression`1<Func`7<T1, T2, T3, T4, T5, T6, bool>> exp);
    public abstract virtual int InsertInto(string tableName, Expression`1<Func`7<T1, T2, T3, T4, T5, T6, TTargetEntity>> select);
    public abstract virtual DataTable ToDataTable(Expression`1<Func`7<T1, T2, T3, T4, T5, T6, TReturn>> select);
    public abstract virtual List`1<TReturn> ToList(Expression`1<Func`7<T1, T2, T3, T4, T5, T6, TReturn>> select);
    public abstract virtual List`1<TDto> ToList();
    public abstract virtual void ToChunk(Expression`1<Func`7<T1, T2, T3, T4, T5, T6, TReturn>> select, int size, Action`1<FetchCallbackArgs`1<List`1<TReturn>>> done);
    public abstract virtual TReturn ToOne(Expression`1<Func`7<T1, T2, T3, T4, T5, T6, TReturn>> select);
    public abstract virtual TReturn First(Expression`1<Func`7<T1, T2, T3, T4, T5, T6, TReturn>> select);
    public abstract virtual TDto First();
    public abstract virtual string ToSql(Expression`1<Func`7<T1, T2, T3, T4, T5, T6, TReturn>> select, FieldAliasOptions fieldAlias);
    public abstract virtual TReturn ToAggregate(Expression`1<Func`7<ISelectGroupingAggregate`1<T1>, ISelectGroupingAggregate`1<T2>, ISelectGroupingAggregate`1<T3>, ISelectGroupingAggregate`1<T4>, ISelectGroupingAggregate`1<T5>, ISelectGroupingAggregate`1<T6>, TReturn>> select);
    public abstract virtual ISelect`6<T1, T2, T3, T4, T5, T6> Aggregate(Expression`1<Func`7<ISelectGroupingAggregate`1<T1>, ISelectGroupingAggregate`1<T2>, ISelectGroupingAggregate`1<T3>, ISelectGroupingAggregate`1<T4>, ISelectGroupingAggregate`1<T5>, ISelectGroupingAggregate`1<T6>, TReturn>> select, TReturn& result);
    public abstract virtual decimal Sum(Expression`1<Func`7<T1, T2, T3, T4, T5, T6, TMember>> column);
    public abstract virtual TMember Min(Expression`1<Func`7<T1, T2, T3, T4, T5, T6, TMember>> column);
    public abstract virtual TMember Max(Expression`1<Func`7<T1, T2, T3, T4, T5, T6, TMember>> column);
    public abstract virtual double Avg(Expression`1<Func`7<T1, T2, T3, T4, T5, T6, TMember>> column);
    public abstract virtual ISelect`6<T1, T2, T3, T4, T5, T6> LeftJoin(Expression`1<Func`7<T1, T2, T3, T4, T5, T6, bool>> exp);
    public abstract virtual ISelect`6<T1, T2, T3, T4, T5, T6> InnerJoin(Expression`1<Func`7<T1, T2, T3, T4, T5, T6, bool>> exp);
    public abstract virtual ISelect`6<T1, T2, T3, T4, T5, T6> RightJoin(Expression`1<Func`7<T1, T2, T3, T4, T5, T6, bool>> exp);
    public abstract virtual ISelect`6<T1, T2, T3, T4, T5, T6> Where(Expression`1<Func`7<T1, T2, T3, T4, T5, T6, bool>> exp);
    public abstract virtual ISelect`6<T1, T2, T3, T4, T5, T6> WhereIf(bool condition, Expression`1<Func`7<T1, T2, T3, T4, T5, T6, bool>> exp);
    public abstract virtual ISelectGrouping`2<TKey, NativeTuple`6<T1, T2, T3, T4, T5, T6>> GroupBy(Expression`1<Func`7<T1, T2, T3, T4, T5, T6, TKey>> exp);
    public abstract virtual ISelect`6<T1, T2, T3, T4, T5, T6> OrderBy(Expression`1<Func`7<T1, T2, T3, T4, T5, T6, TMember>> column);
    public abstract virtual ISelect`6<T1, T2, T3, T4, T5, T6> OrderByDescending(Expression`1<Func`7<T1, T2, T3, T4, T5, T6, TMember>> column);
    public abstract virtual ISelect`6<T1, T2, T3, T4, T5, T6> OrderByIf(bool condition, Expression`1<Func`7<T1, T2, T3, T4, T5, T6, TMember>> column, bool descending);
    public abstract virtual ISelect`6<T1, T2, T3, T4, T5, T6> WithSql(string sqlT1, string sqlT2, string sqlT3, string sqlT4, string sqlT5, string sqlT6, object parms);
    public abstract virtual ISelect`6<T1, T2, T3, T4, T5, T6> As(string aliasT1, string aliasT2, string aliasT3, string aliasT4, string aliasT5, string aliasT6);
    public abstract virtual ISelect`1<TDto> WithTempQuery(Expression`1<Func`7<T1, T2, T3, T4, T5, T6, TDto>> selector);
    public abstract virtual bool Any(Expression`1<Func`2<HzyTuple`6<T1, T2, T3, T4, T5, T6>, bool>> exp);
    public abstract virtual int InsertInto(string tableName, Expression`1<Func`2<HzyTuple`6<T1, T2, T3, T4, T5, T6>, TTargetEntity>> select);
    public abstract virtual DataTable ToDataTable(Expression`1<Func`2<HzyTuple`6<T1, T2, T3, T4, T5, T6>, TReturn>> select);
    public abstract virtual List`1<TReturn> ToList(Expression`1<Func`2<HzyTuple`6<T1, T2, T3, T4, T5, T6>, TReturn>> select);
    public abstract virtual void ToChunk(Expression`1<Func`2<HzyTuple`6<T1, T2, T3, T4, T5, T6>, TReturn>> select, int size, Action`1<FetchCallbackArgs`1<List`1<TReturn>>> done);
    public abstract virtual TReturn ToOne(Expression`1<Func`2<HzyTuple`6<T1, T2, T3, T4, T5, T6>, TReturn>> select);
    public abstract virtual TReturn First(Expression`1<Func`2<HzyTuple`6<T1, T2, T3, T4, T5, T6>, TReturn>> select);
    public abstract virtual string ToSql(Expression`1<Func`2<HzyTuple`6<T1, T2, T3, T4, T5, T6>, TReturn>> select, FieldAliasOptions fieldAlias);
    public abstract virtual decimal Sum(Expression`1<Func`2<HzyTuple`6<T1, T2, T3, T4, T5, T6>, TMember>> column);
    public abstract virtual TMember Min(Expression`1<Func`2<HzyTuple`6<T1, T2, T3, T4, T5, T6>, TMember>> column);
    public abstract virtual TMember Max(Expression`1<Func`2<HzyTuple`6<T1, T2, T3, T4, T5, T6>, TMember>> column);
    public abstract virtual double Avg(Expression`1<Func`2<HzyTuple`6<T1, T2, T3, T4, T5, T6>, TMember>> column);
    public abstract virtual ISelect`6<T1, T2, T3, T4, T5, T6> LeftJoin(Expression`1<Func`2<HzyTuple`6<T1, T2, T3, T4, T5, T6>, bool>> exp);
    public abstract virtual ISelect`6<T1, T2, T3, T4, T5, T6> InnerJoin(Expression`1<Func`2<HzyTuple`6<T1, T2, T3, T4, T5, T6>, bool>> exp);
    public abstract virtual ISelect`6<T1, T2, T3, T4, T5, T6> RightJoin(Expression`1<Func`2<HzyTuple`6<T1, T2, T3, T4, T5, T6>, bool>> exp);
    public abstract virtual ISelect`6<T1, T2, T3, T4, T5, T6> Where(Expression`1<Func`2<HzyTuple`6<T1, T2, T3, T4, T5, T6>, bool>> exp);
    public abstract virtual ISelect`6<T1, T2, T3, T4, T5, T6> WhereIf(bool condition, Expression`1<Func`2<HzyTuple`6<T1, T2, T3, T4, T5, T6>, bool>> exp);
    public abstract virtual ISelectGrouping`2<TKey, NativeTuple`6<T1, T2, T3, T4, T5, T6>> GroupBy(Expression`1<Func`2<HzyTuple`6<T1, T2, T3, T4, T5, T6>, TKey>> exp);
    public abstract virtual ISelect`6<T1, T2, T3, T4, T5, T6> OrderBy(Expression`1<Func`2<HzyTuple`6<T1, T2, T3, T4, T5, T6>, TMember>> column);
    public abstract virtual ISelect`6<T1, T2, T3, T4, T5, T6> OrderByDescending(Expression`1<Func`2<HzyTuple`6<T1, T2, T3, T4, T5, T6>, TMember>> column);
    public abstract virtual ISelect`6<T1, T2, T3, T4, T5, T6> OrderByIf(bool condition, Expression`1<Func`2<HzyTuple`6<T1, T2, T3, T4, T5, T6>, TMember>> column, bool descending);
    public abstract virtual ISelect`1<TDto> WithTempQuery(Expression`1<Func`2<HzyTuple`6<T1, T2, T3, T4, T5, T6>, TDto>> selector);
}
public interface FreeSql.ISelect`7 {
    public abstract virtual Task`1<bool> AnyAsync(Expression`1<Func`8<T1, T2, T3, T4, T5, T6, T7, bool>> exp, CancellationToken cancellationToken);
    public abstract virtual Task`1<int> InsertIntoAsync(string tableName, Expression`1<Func`8<T1, T2, T3, T4, T5, T6, T7, TTargetEntity>> select, CancellationToken cancellationToken);
    public abstract virtual Task`1<DataTable> ToDataTableAsync(Expression`1<Func`8<T1, T2, T3, T4, T5, T6, T7, TReturn>> select, CancellationToken cancellationToken);
    public abstract virtual Task`1<List`1<TReturn>> ToListAsync(Expression`1<Func`8<T1, T2, T3, T4, T5, T6, T7, TReturn>> select, CancellationToken cancellationToken);
    public abstract virtual Task`1<List`1<TDto>> ToListAsync(CancellationToken cancellationToken);
    public abstract virtual Task`1<TReturn> ToOneAsync(Expression`1<Func`8<T1, T2, T3, T4, T5, T6, T7, TReturn>> select, CancellationToken cancellationToken);
    public abstract virtual Task`1<TReturn> FirstAsync(Expression`1<Func`8<T1, T2, T3, T4, T5, T6, T7, TReturn>> select, CancellationToken cancellationToken);
    public abstract virtual Task`1<TDto> FirstAsync(CancellationToken cancellationToken);
    public abstract virtual Task`1<TReturn> ToAggregateAsync(Expression`1<Func`8<ISelectGroupingAggregate`1<T1>, ISelectGroupingAggregate`1<T2>, ISelectGroupingAggregate`1<T3>, ISelectGroupingAggregate`1<T4>, ISelectGroupingAggregate`1<T5>, ISelectGroupingAggregate`1<T6>, ISelectGroupingAggregate`1<T7>, TReturn>> select, CancellationToken cancellationToken);
    public abstract virtual Task`1<decimal> SumAsync(Expression`1<Func`8<T1, T2, T3, T4, T5, T6, T7, TMember>> column, CancellationToken cancellationToken);
    public abstract virtual Task`1<TMember> MinAsync(Expression`1<Func`8<T1, T2, T3, T4, T5, T6, T7, TMember>> column, CancellationToken cancellationToken);
    public abstract virtual Task`1<TMember> MaxAsync(Expression`1<Func`8<T1, T2, T3, T4, T5, T6, T7, TMember>> column, CancellationToken cancellationToken);
    public abstract virtual Task`1<double> AvgAsync(Expression`1<Func`8<T1, T2, T3, T4, T5, T6, T7, TMember>> column, CancellationToken cancellationToken);
    public abstract virtual Task`1<bool> AnyAsync(Expression`1<Func`2<HzyTuple`7<T1, T2, T3, T4, T5, T6, T7>, bool>> exp, CancellationToken cancellationToken);
    public abstract virtual Task`1<int> InsertIntoAsync(string tableName, Expression`1<Func`2<HzyTuple`7<T1, T2, T3, T4, T5, T6, T7>, TTargetEntity>> select, CancellationToken cancellationToken);
    public abstract virtual Task`1<DataTable> ToDataTableAsync(Expression`1<Func`2<HzyTuple`7<T1, T2, T3, T4, T5, T6, T7>, TReturn>> select, CancellationToken cancellationToken);
    public abstract virtual Task`1<List`1<TReturn>> ToListAsync(Expression`1<Func`2<HzyTuple`7<T1, T2, T3, T4, T5, T6, T7>, TReturn>> select, CancellationToken cancellationToken);
    public abstract virtual Task`1<TReturn> ToOneAsync(Expression`1<Func`2<HzyTuple`7<T1, T2, T3, T4, T5, T6, T7>, TReturn>> select, CancellationToken cancellationToken);
    public abstract virtual Task`1<TReturn> FirstAsync(Expression`1<Func`2<HzyTuple`7<T1, T2, T3, T4, T5, T6, T7>, TReturn>> select, CancellationToken cancellationToken);
    public abstract virtual Task`1<decimal> SumAsync(Expression`1<Func`2<HzyTuple`7<T1, T2, T3, T4, T5, T6, T7>, TMember>> column, CancellationToken cancellationToken);
    public abstract virtual Task`1<TMember> MinAsync(Expression`1<Func`2<HzyTuple`7<T1, T2, T3, T4, T5, T6, T7>, TMember>> column, CancellationToken cancellationToken);
    public abstract virtual Task`1<TMember> MaxAsync(Expression`1<Func`2<HzyTuple`7<T1, T2, T3, T4, T5, T6, T7>, TMember>> column, CancellationToken cancellationToken);
    public abstract virtual Task`1<double> AvgAsync(Expression`1<Func`2<HzyTuple`7<T1, T2, T3, T4, T5, T6, T7>, TMember>> column, CancellationToken cancellationToken);
    public abstract virtual bool Any(Expression`1<Func`8<T1, T2, T3, T4, T5, T6, T7, bool>> exp);
    public abstract virtual int InsertInto(string tableName, Expression`1<Func`8<T1, T2, T3, T4, T5, T6, T7, TTargetEntity>> select);
    public abstract virtual DataTable ToDataTable(Expression`1<Func`8<T1, T2, T3, T4, T5, T6, T7, TReturn>> select);
    public abstract virtual List`1<TReturn> ToList(Expression`1<Func`8<T1, T2, T3, T4, T5, T6, T7, TReturn>> select);
    public abstract virtual List`1<TDto> ToList();
    public abstract virtual void ToChunk(Expression`1<Func`8<T1, T2, T3, T4, T5, T6, T7, TReturn>> select, int size, Action`1<FetchCallbackArgs`1<List`1<TReturn>>> done);
    public abstract virtual TReturn ToOne(Expression`1<Func`8<T1, T2, T3, T4, T5, T6, T7, TReturn>> select);
    public abstract virtual TReturn First(Expression`1<Func`8<T1, T2, T3, T4, T5, T6, T7, TReturn>> select);
    public abstract virtual TDto First();
    public abstract virtual string ToSql(Expression`1<Func`8<T1, T2, T3, T4, T5, T6, T7, TReturn>> select, FieldAliasOptions fieldAlias);
    public abstract virtual TReturn ToAggregate(Expression`1<Func`8<ISelectGroupingAggregate`1<T1>, ISelectGroupingAggregate`1<T2>, ISelectGroupingAggregate`1<T3>, ISelectGroupingAggregate`1<T4>, ISelectGroupingAggregate`1<T5>, ISelectGroupingAggregate`1<T6>, ISelectGroupingAggregate`1<T7>, TReturn>> select);
    public abstract virtual ISelect`7<T1, T2, T3, T4, T5, T6, T7> Aggregate(Expression`1<Func`8<ISelectGroupingAggregate`1<T1>, ISelectGroupingAggregate`1<T2>, ISelectGroupingAggregate`1<T3>, ISelectGroupingAggregate`1<T4>, ISelectGroupingAggregate`1<T5>, ISelectGroupingAggregate`1<T6>, ISelectGroupingAggregate`1<T7>, TReturn>> select, TReturn& result);
    public abstract virtual decimal Sum(Expression`1<Func`8<T1, T2, T3, T4, T5, T6, T7, TMember>> column);
    public abstract virtual TMember Min(Expression`1<Func`8<T1, T2, T3, T4, T5, T6, T7, TMember>> column);
    public abstract virtual TMember Max(Expression`1<Func`8<T1, T2, T3, T4, T5, T6, T7, TMember>> column);
    public abstract virtual double Avg(Expression`1<Func`8<T1, T2, T3, T4, T5, T6, T7, TMember>> column);
    public abstract virtual ISelect`7<T1, T2, T3, T4, T5, T6, T7> LeftJoin(Expression`1<Func`8<T1, T2, T3, T4, T5, T6, T7, bool>> exp);
    public abstract virtual ISelect`7<T1, T2, T3, T4, T5, T6, T7> InnerJoin(Expression`1<Func`8<T1, T2, T3, T4, T5, T6, T7, bool>> exp);
    public abstract virtual ISelect`7<T1, T2, T3, T4, T5, T6, T7> RightJoin(Expression`1<Func`8<T1, T2, T3, T4, T5, T6, T7, bool>> exp);
    public abstract virtual ISelect`7<T1, T2, T3, T4, T5, T6, T7> Where(Expression`1<Func`8<T1, T2, T3, T4, T5, T6, T7, bool>> exp);
    public abstract virtual ISelect`7<T1, T2, T3, T4, T5, T6, T7> WhereIf(bool condition, Expression`1<Func`8<T1, T2, T3, T4, T5, T6, T7, bool>> exp);
    public abstract virtual ISelectGrouping`2<TKey, NativeTuple`7<T1, T2, T3, T4, T5, T6, T7>> GroupBy(Expression`1<Func`8<T1, T2, T3, T4, T5, T6, T7, TKey>> exp);
    public abstract virtual ISelect`7<T1, T2, T3, T4, T5, T6, T7> OrderBy(Expression`1<Func`8<T1, T2, T3, T4, T5, T6, T7, TMember>> column);
    public abstract virtual ISelect`7<T1, T2, T3, T4, T5, T6, T7> OrderByDescending(Expression`1<Func`8<T1, T2, T3, T4, T5, T6, T7, TMember>> column);
    public abstract virtual ISelect`7<T1, T2, T3, T4, T5, T6, T7> OrderByIf(bool condition, Expression`1<Func`8<T1, T2, T3, T4, T5, T6, T7, TMember>> column, bool descending);
    public abstract virtual ISelect`7<T1, T2, T3, T4, T5, T6, T7> WithSql(string sqlT1, string sqlT2, string sqlT3, string sqlT4, string sqlT5, string sqlT6, string sqlT7, object parms);
    public abstract virtual ISelect`7<T1, T2, T3, T4, T5, T6, T7> As(string aliasT1, string aliasT2, string aliasT3, string aliasT4, string aliasT5, string aliasT6, string aliasT7);
    public abstract virtual ISelect`1<TDto> WithTempQuery(Expression`1<Func`8<T1, T2, T3, T4, T5, T6, T7, TDto>> selector);
    public abstract virtual bool Any(Expression`1<Func`2<HzyTuple`7<T1, T2, T3, T4, T5, T6, T7>, bool>> exp);
    public abstract virtual int InsertInto(string tableName, Expression`1<Func`2<HzyTuple`7<T1, T2, T3, T4, T5, T6, T7>, TTargetEntity>> select);
    public abstract virtual DataTable ToDataTable(Expression`1<Func`2<HzyTuple`7<T1, T2, T3, T4, T5, T6, T7>, TReturn>> select);
    public abstract virtual List`1<TReturn> ToList(Expression`1<Func`2<HzyTuple`7<T1, T2, T3, T4, T5, T6, T7>, TReturn>> select);
    public abstract virtual void ToChunk(Expression`1<Func`2<HzyTuple`7<T1, T2, T3, T4, T5, T6, T7>, TReturn>> select, int size, Action`1<FetchCallbackArgs`1<List`1<TReturn>>> done);
    public abstract virtual TReturn ToOne(Expression`1<Func`2<HzyTuple`7<T1, T2, T3, T4, T5, T6, T7>, TReturn>> select);
    public abstract virtual TReturn First(Expression`1<Func`2<HzyTuple`7<T1, T2, T3, T4, T5, T6, T7>, TReturn>> select);
    public abstract virtual string ToSql(Expression`1<Func`2<HzyTuple`7<T1, T2, T3, T4, T5, T6, T7>, TReturn>> select, FieldAliasOptions fieldAlias);
    public abstract virtual decimal Sum(Expression`1<Func`2<HzyTuple`7<T1, T2, T3, T4, T5, T6, T7>, TMember>> column);
    public abstract virtual TMember Min(Expression`1<Func`2<HzyTuple`7<T1, T2, T3, T4, T5, T6, T7>, TMember>> column);
    public abstract virtual TMember Max(Expression`1<Func`2<HzyTuple`7<T1, T2, T3, T4, T5, T6, T7>, TMember>> column);
    public abstract virtual double Avg(Expression`1<Func`2<HzyTuple`7<T1, T2, T3, T4, T5, T6, T7>, TMember>> column);
    public abstract virtual ISelect`7<T1, T2, T3, T4, T5, T6, T7> LeftJoin(Expression`1<Func`2<HzyTuple`7<T1, T2, T3, T4, T5, T6, T7>, bool>> exp);
    public abstract virtual ISelect`7<T1, T2, T3, T4, T5, T6, T7> InnerJoin(Expression`1<Func`2<HzyTuple`7<T1, T2, T3, T4, T5, T6, T7>, bool>> exp);
    public abstract virtual ISelect`7<T1, T2, T3, T4, T5, T6, T7> RightJoin(Expression`1<Func`2<HzyTuple`7<T1, T2, T3, T4, T5, T6, T7>, bool>> exp);
    public abstract virtual ISelect`7<T1, T2, T3, T4, T5, T6, T7> Where(Expression`1<Func`2<HzyTuple`7<T1, T2, T3, T4, T5, T6, T7>, bool>> exp);
    public abstract virtual ISelect`7<T1, T2, T3, T4, T5, T6, T7> WhereIf(bool condition, Expression`1<Func`2<HzyTuple`7<T1, T2, T3, T4, T5, T6, T7>, bool>> exp);
    public abstract virtual ISelectGrouping`2<TKey, NativeTuple`7<T1, T2, T3, T4, T5, T6, T7>> GroupBy(Expression`1<Func`2<HzyTuple`7<T1, T2, T3, T4, T5, T6, T7>, TKey>> exp);
    public abstract virtual ISelect`7<T1, T2, T3, T4, T5, T6, T7> OrderBy(Expression`1<Func`2<HzyTuple`7<T1, T2, T3, T4, T5, T6, T7>, TMember>> column);
    public abstract virtual ISelect`7<T1, T2, T3, T4, T5, T6, T7> OrderByDescending(Expression`1<Func`2<HzyTuple`7<T1, T2, T3, T4, T5, T6, T7>, TMember>> column);
    public abstract virtual ISelect`7<T1, T2, T3, T4, T5, T6, T7> OrderByIf(bool condition, Expression`1<Func`2<HzyTuple`7<T1, T2, T3, T4, T5, T6, T7>, TMember>> column, bool descending);
    public abstract virtual ISelect`1<TDto> WithTempQuery(Expression`1<Func`2<HzyTuple`7<T1, T2, T3, T4, T5, T6, T7>, TDto>> selector);
}
public interface FreeSql.ISelect`8 {
    public abstract virtual Task`1<bool> AnyAsync(Expression`1<Func`9<T1, T2, T3, T4, T5, T6, T7, T8, bool>> exp, CancellationToken cancellationToken);
    public abstract virtual Task`1<int> InsertIntoAsync(string tableName, Expression`1<Func`9<T1, T2, T3, T4, T5, T6, T7, T8, TTargetEntity>> select, CancellationToken cancellationToken);
    public abstract virtual Task`1<DataTable> ToDataTableAsync(Expression`1<Func`9<T1, T2, T3, T4, T5, T6, T7, T8, TReturn>> select, CancellationToken cancellationToken);
    public abstract virtual Task`1<List`1<TReturn>> ToListAsync(Expression`1<Func`9<T1, T2, T3, T4, T5, T6, T7, T8, TReturn>> select, CancellationToken cancellationToken);
    public abstract virtual Task`1<List`1<TDto>> ToListAsync(CancellationToken cancellationToken);
    public abstract virtual Task`1<TReturn> ToOneAsync(Expression`1<Func`9<T1, T2, T3, T4, T5, T6, T7, T8, TReturn>> select, CancellationToken cancellationToken);
    public abstract virtual Task`1<TReturn> FirstAsync(Expression`1<Func`9<T1, T2, T3, T4, T5, T6, T7, T8, TReturn>> select, CancellationToken cancellationToken);
    public abstract virtual Task`1<TDto> FirstAsync(CancellationToken cancellationToken);
    public abstract virtual Task`1<TReturn> ToAggregateAsync(Expression`1<Func`9<ISelectGroupingAggregate`1<T1>, ISelectGroupingAggregate`1<T2>, ISelectGroupingAggregate`1<T3>, ISelectGroupingAggregate`1<T4>, ISelectGroupingAggregate`1<T5>, ISelectGroupingAggregate`1<T6>, ISelectGroupingAggregate`1<T7>, ISelectGroupingAggregate`1<T8>, TReturn>> select, CancellationToken cancellationToken);
    public abstract virtual Task`1<decimal> SumAsync(Expression`1<Func`9<T1, T2, T3, T4, T5, T6, T7, T8, TMember>> column, CancellationToken cancellationToken);
    public abstract virtual Task`1<TMember> MinAsync(Expression`1<Func`9<T1, T2, T3, T4, T5, T6, T7, T8, TMember>> column, CancellationToken cancellationToken);
    public abstract virtual Task`1<TMember> MaxAsync(Expression`1<Func`9<T1, T2, T3, T4, T5, T6, T7, T8, TMember>> column, CancellationToken cancellationToken);
    public abstract virtual Task`1<double> AvgAsync(Expression`1<Func`9<T1, T2, T3, T4, T5, T6, T7, T8, TMember>> column, CancellationToken cancellationToken);
    public abstract virtual Task`1<bool> AnyAsync(Expression`1<Func`2<HzyTuple`8<T1, T2, T3, T4, T5, T6, T7, T8>, bool>> exp, CancellationToken cancellationToken);
    public abstract virtual Task`1<int> InsertIntoAsync(string tableName, Expression`1<Func`2<HzyTuple`8<T1, T2, T3, T4, T5, T6, T7, T8>, TTargetEntity>> select, CancellationToken cancellationToken);
    public abstract virtual Task`1<DataTable> ToDataTableAsync(Expression`1<Func`2<HzyTuple`8<T1, T2, T3, T4, T5, T6, T7, T8>, TReturn>> select, CancellationToken cancellationToken);
    public abstract virtual Task`1<List`1<TReturn>> ToListAsync(Expression`1<Func`2<HzyTuple`8<T1, T2, T3, T4, T5, T6, T7, T8>, TReturn>> select, CancellationToken cancellationToken);
    public abstract virtual Task`1<TReturn> ToOneAsync(Expression`1<Func`2<HzyTuple`8<T1, T2, T3, T4, T5, T6, T7, T8>, TReturn>> select, CancellationToken cancellationToken);
    public abstract virtual Task`1<TReturn> FirstAsync(Expression`1<Func`2<HzyTuple`8<T1, T2, T3, T4, T5, T6, T7, T8>, TReturn>> select, CancellationToken cancellationToken);
    public abstract virtual Task`1<decimal> SumAsync(Expression`1<Func`2<HzyTuple`8<T1, T2, T3, T4, T5, T6, T7, T8>, TMember>> column, CancellationToken cancellationToken);
    public abstract virtual Task`1<TMember> MinAsync(Expression`1<Func`2<HzyTuple`8<T1, T2, T3, T4, T5, T6, T7, T8>, TMember>> column, CancellationToken cancellationToken);
    public abstract virtual Task`1<TMember> MaxAsync(Expression`1<Func`2<HzyTuple`8<T1, T2, T3, T4, T5, T6, T7, T8>, TMember>> column, CancellationToken cancellationToken);
    public abstract virtual Task`1<double> AvgAsync(Expression`1<Func`2<HzyTuple`8<T1, T2, T3, T4, T5, T6, T7, T8>, TMember>> column, CancellationToken cancellationToken);
    public abstract virtual bool Any(Expression`1<Func`9<T1, T2, T3, T4, T5, T6, T7, T8, bool>> exp);
    public abstract virtual int InsertInto(string tableName, Expression`1<Func`9<T1, T2, T3, T4, T5, T6, T7, T8, TTargetEntity>> select);
    public abstract virtual DataTable ToDataTable(Expression`1<Func`9<T1, T2, T3, T4, T5, T6, T7, T8, TReturn>> select);
    public abstract virtual List`1<TReturn> ToList(Expression`1<Func`9<T1, T2, T3, T4, T5, T6, T7, T8, TReturn>> select);
    public abstract virtual List`1<TDto> ToList();
    public abstract virtual void ToChunk(Expression`1<Func`9<T1, T2, T3, T4, T5, T6, T7, T8, TReturn>> select, int size, Action`1<FetchCallbackArgs`1<List`1<TReturn>>> done);
    public abstract virtual TReturn ToOne(Expression`1<Func`9<T1, T2, T3, T4, T5, T6, T7, T8, TReturn>> select);
    public abstract virtual TReturn First(Expression`1<Func`9<T1, T2, T3, T4, T5, T6, T7, T8, TReturn>> select);
    public abstract virtual TDto First();
    public abstract virtual string ToSql(Expression`1<Func`9<T1, T2, T3, T4, T5, T6, T7, T8, TReturn>> select, FieldAliasOptions fieldAlias);
    public abstract virtual TReturn ToAggregate(Expression`1<Func`9<ISelectGroupingAggregate`1<T1>, ISelectGroupingAggregate`1<T2>, ISelectGroupingAggregate`1<T3>, ISelectGroupingAggregate`1<T4>, ISelectGroupingAggregate`1<T5>, ISelectGroupingAggregate`1<T6>, ISelectGroupingAggregate`1<T7>, ISelectGroupingAggregate`1<T8>, TReturn>> select);
    public abstract virtual ISelect`8<T1, T2, T3, T4, T5, T6, T7, T8> Aggregate(Expression`1<Func`9<ISelectGroupingAggregate`1<T1>, ISelectGroupingAggregate`1<T2>, ISelectGroupingAggregate`1<T3>, ISelectGroupingAggregate`1<T4>, ISelectGroupingAggregate`1<T5>, ISelectGroupingAggregate`1<T6>, ISelectGroupingAggregate`1<T7>, ISelectGroupingAggregate`1<T8>, TReturn>> select, TReturn& result);
    public abstract virtual decimal Sum(Expression`1<Func`9<T1, T2, T3, T4, T5, T6, T7, T8, TMember>> column);
    public abstract virtual TMember Min(Expression`1<Func`9<T1, T2, T3, T4, T5, T6, T7, T8, TMember>> column);
    public abstract virtual TMember Max(Expression`1<Func`9<T1, T2, T3, T4, T5, T6, T7, T8, TMember>> column);
    public abstract virtual double Avg(Expression`1<Func`9<T1, T2, T3, T4, T5, T6, T7, T8, TMember>> column);
    public abstract virtual ISelect`8<T1, T2, T3, T4, T5, T6, T7, T8> LeftJoin(Expression`1<Func`9<T1, T2, T3, T4, T5, T6, T7, T8, bool>> exp);
    public abstract virtual ISelect`8<T1, T2, T3, T4, T5, T6, T7, T8> InnerJoin(Expression`1<Func`9<T1, T2, T3, T4, T5, T6, T7, T8, bool>> exp);
    public abstract virtual ISelect`8<T1, T2, T3, T4, T5, T6, T7, T8> RightJoin(Expression`1<Func`9<T1, T2, T3, T4, T5, T6, T7, T8, bool>> exp);
    public abstract virtual ISelect`8<T1, T2, T3, T4, T5, T6, T7, T8> Where(Expression`1<Func`9<T1, T2, T3, T4, T5, T6, T7, T8, bool>> exp);
    public abstract virtual ISelect`8<T1, T2, T3, T4, T5, T6, T7, T8> WhereIf(bool condition, Expression`1<Func`9<T1, T2, T3, T4, T5, T6, T7, T8, bool>> exp);
    public abstract virtual ISelectGrouping`2<TKey, NativeTuple`8<T1, T2, T3, T4, T5, T6, T7, T8>> GroupBy(Expression`1<Func`9<T1, T2, T3, T4, T5, T6, T7, T8, TKey>> exp);
    public abstract virtual ISelect`8<T1, T2, T3, T4, T5, T6, T7, T8> OrderBy(Expression`1<Func`9<T1, T2, T3, T4, T5, T6, T7, T8, TMember>> column);
    public abstract virtual ISelect`8<T1, T2, T3, T4, T5, T6, T7, T8> OrderByDescending(Expression`1<Func`9<T1, T2, T3, T4, T5, T6, T7, T8, TMember>> column);
    public abstract virtual ISelect`8<T1, T2, T3, T4, T5, T6, T7, T8> OrderByIf(bool condition, Expression`1<Func`9<T1, T2, T3, T4, T5, T6, T7, T8, TMember>> column, bool descending);
    public abstract virtual ISelect`8<T1, T2, T3, T4, T5, T6, T7, T8> WithSql(string sqlT1, string sqlT2, string sqlT3, string sqlT4, string sqlT5, string sqlT6, string sqlT7, string sqlT8, object parms);
    public abstract virtual ISelect`8<T1, T2, T3, T4, T5, T6, T7, T8> As(string aliasT1, string aliasT2, string aliasT3, string aliasT4, string aliasT5, string aliasT6, string aliasT7, string aliasT8);
    public abstract virtual ISelect`1<TDto> WithTempQuery(Expression`1<Func`9<T1, T2, T3, T4, T5, T6, T7, T8, TDto>> selector);
    public abstract virtual bool Any(Expression`1<Func`2<HzyTuple`8<T1, T2, T3, T4, T5, T6, T7, T8>, bool>> exp);
    public abstract virtual int InsertInto(string tableName, Expression`1<Func`2<HzyTuple`8<T1, T2, T3, T4, T5, T6, T7, T8>, TTargetEntity>> select);
    public abstract virtual DataTable ToDataTable(Expression`1<Func`2<HzyTuple`8<T1, T2, T3, T4, T5, T6, T7, T8>, TReturn>> select);
    public abstract virtual List`1<TReturn> ToList(Expression`1<Func`2<HzyTuple`8<T1, T2, T3, T4, T5, T6, T7, T8>, TReturn>> select);
    public abstract virtual void ToChunk(Expression`1<Func`2<HzyTuple`8<T1, T2, T3, T4, T5, T6, T7, T8>, TReturn>> select, int size, Action`1<FetchCallbackArgs`1<List`1<TReturn>>> done);
    public abstract virtual TReturn ToOne(Expression`1<Func`2<HzyTuple`8<T1, T2, T3, T4, T5, T6, T7, T8>, TReturn>> select);
    public abstract virtual TReturn First(Expression`1<Func`2<HzyTuple`8<T1, T2, T3, T4, T5, T6, T7, T8>, TReturn>> select);
    public abstract virtual string ToSql(Expression`1<Func`2<HzyTuple`8<T1, T2, T3, T4, T5, T6, T7, T8>, TReturn>> select, FieldAliasOptions fieldAlias);
    public abstract virtual decimal Sum(Expression`1<Func`2<HzyTuple`8<T1, T2, T3, T4, T5, T6, T7, T8>, TMember>> column);
    public abstract virtual TMember Min(Expression`1<Func`2<HzyTuple`8<T1, T2, T3, T4, T5, T6, T7, T8>, TMember>> column);
    public abstract virtual TMember Max(Expression`1<Func`2<HzyTuple`8<T1, T2, T3, T4, T5, T6, T7, T8>, TMember>> column);
    public abstract virtual double Avg(Expression`1<Func`2<HzyTuple`8<T1, T2, T3, T4, T5, T6, T7, T8>, TMember>> column);
    public abstract virtual ISelect`8<T1, T2, T3, T4, T5, T6, T7, T8> LeftJoin(Expression`1<Func`2<HzyTuple`8<T1, T2, T3, T4, T5, T6, T7, T8>, bool>> exp);
    public abstract virtual ISelect`8<T1, T2, T3, T4, T5, T6, T7, T8> InnerJoin(Expression`1<Func`2<HzyTuple`8<T1, T2, T3, T4, T5, T6, T7, T8>, bool>> exp);
    public abstract virtual ISelect`8<T1, T2, T3, T4, T5, T6, T7, T8> RightJoin(Expression`1<Func`2<HzyTuple`8<T1, T2, T3, T4, T5, T6, T7, T8>, bool>> exp);
    public abstract virtual ISelect`8<T1, T2, T3, T4, T5, T6, T7, T8> Where(Expression`1<Func`2<HzyTuple`8<T1, T2, T3, T4, T5, T6, T7, T8>, bool>> exp);
    public abstract virtual ISelect`8<T1, T2, T3, T4, T5, T6, T7, T8> WhereIf(bool condition, Expression`1<Func`2<HzyTuple`8<T1, T2, T3, T4, T5, T6, T7, T8>, bool>> exp);
    public abstract virtual ISelectGrouping`2<TKey, NativeTuple`8<T1, T2, T3, T4, T5, T6, T7, T8>> GroupBy(Expression`1<Func`2<HzyTuple`8<T1, T2, T3, T4, T5, T6, T7, T8>, TKey>> exp);
    public abstract virtual ISelect`8<T1, T2, T3, T4, T5, T6, T7, T8> OrderBy(Expression`1<Func`2<HzyTuple`8<T1, T2, T3, T4, T5, T6, T7, T8>, TMember>> column);
    public abstract virtual ISelect`8<T1, T2, T3, T4, T5, T6, T7, T8> OrderByDescending(Expression`1<Func`2<HzyTuple`8<T1, T2, T3, T4, T5, T6, T7, T8>, TMember>> column);
    public abstract virtual ISelect`8<T1, T2, T3, T4, T5, T6, T7, T8> OrderByIf(bool condition, Expression`1<Func`2<HzyTuple`8<T1, T2, T3, T4, T5, T6, T7, T8>, TMember>> column, bool descending);
    public abstract virtual ISelect`1<TDto> WithTempQuery(Expression`1<Func`2<HzyTuple`8<T1, T2, T3, T4, T5, T6, T7, T8>, TDto>> selector);
}
public interface FreeSql.ISelect`9 {
    public abstract virtual Task`1<bool> AnyAsync(Expression`1<Func`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, bool>> exp, CancellationToken cancellationToken);
    public abstract virtual Task`1<int> InsertIntoAsync(string tableName, Expression`1<Func`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, TTargetEntity>> select, CancellationToken cancellationToken);
    public abstract virtual Task`1<DataTable> ToDataTableAsync(Expression`1<Func`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, TReturn>> select, CancellationToken cancellationToken);
    public abstract virtual Task`1<List`1<TReturn>> ToListAsync(Expression`1<Func`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, TReturn>> select, CancellationToken cancellationToken);
    public abstract virtual Task`1<List`1<TDto>> ToListAsync(CancellationToken cancellationToken);
    public abstract virtual Task`1<TReturn> ToOneAsync(Expression`1<Func`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, TReturn>> select, CancellationToken cancellationToken);
    public abstract virtual Task`1<TReturn> FirstAsync(Expression`1<Func`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, TReturn>> select, CancellationToken cancellationToken);
    public abstract virtual Task`1<TDto> FirstAsync(CancellationToken cancellationToken);
    public abstract virtual Task`1<TReturn> ToAggregateAsync(Expression`1<Func`10<ISelectGroupingAggregate`1<T1>, ISelectGroupingAggregate`1<T2>, ISelectGroupingAggregate`1<T3>, ISelectGroupingAggregate`1<T4>, ISelectGroupingAggregate`1<T5>, ISelectGroupingAggregate`1<T6>, ISelectGroupingAggregate`1<T7>, ISelectGroupingAggregate`1<T8>, ISelectGroupingAggregate`1<T9>, TReturn>> select, CancellationToken cancellationToken);
    public abstract virtual Task`1<decimal> SumAsync(Expression`1<Func`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, TMember>> column, CancellationToken cancellationToken);
    public abstract virtual Task`1<TMember> MinAsync(Expression`1<Func`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, TMember>> column, CancellationToken cancellationToken);
    public abstract virtual Task`1<TMember> MaxAsync(Expression`1<Func`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, TMember>> column, CancellationToken cancellationToken);
    public abstract virtual Task`1<double> AvgAsync(Expression`1<Func`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, TMember>> column, CancellationToken cancellationToken);
    public abstract virtual Task`1<bool> AnyAsync(Expression`1<Func`2<HzyTuple`9<T1, T2, T3, T4, T5, T6, T7, T8, T9>, bool>> exp, CancellationToken cancellationToken);
    public abstract virtual Task`1<int> InsertIntoAsync(string tableName, Expression`1<Func`2<HzyTuple`9<T1, T2, T3, T4, T5, T6, T7, T8, T9>, TTargetEntity>> select, CancellationToken cancellationToken);
    public abstract virtual Task`1<DataTable> ToDataTableAsync(Expression`1<Func`2<HzyTuple`9<T1, T2, T3, T4, T5, T6, T7, T8, T9>, TReturn>> select, CancellationToken cancellationToken);
    public abstract virtual Task`1<List`1<TReturn>> ToListAsync(Expression`1<Func`2<HzyTuple`9<T1, T2, T3, T4, T5, T6, T7, T8, T9>, TReturn>> select, CancellationToken cancellationToken);
    public abstract virtual Task`1<TReturn> ToOneAsync(Expression`1<Func`2<HzyTuple`9<T1, T2, T3, T4, T5, T6, T7, T8, T9>, TReturn>> select, CancellationToken cancellationToken);
    public abstract virtual Task`1<TReturn> FirstAsync(Expression`1<Func`2<HzyTuple`9<T1, T2, T3, T4, T5, T6, T7, T8, T9>, TReturn>> select, CancellationToken cancellationToken);
    public abstract virtual Task`1<decimal> SumAsync(Expression`1<Func`2<HzyTuple`9<T1, T2, T3, T4, T5, T6, T7, T8, T9>, TMember>> column, CancellationToken cancellationToken);
    public abstract virtual Task`1<TMember> MinAsync(Expression`1<Func`2<HzyTuple`9<T1, T2, T3, T4, T5, T6, T7, T8, T9>, TMember>> column, CancellationToken cancellationToken);
    public abstract virtual Task`1<TMember> MaxAsync(Expression`1<Func`2<HzyTuple`9<T1, T2, T3, T4, T5, T6, T7, T8, T9>, TMember>> column, CancellationToken cancellationToken);
    public abstract virtual Task`1<double> AvgAsync(Expression`1<Func`2<HzyTuple`9<T1, T2, T3, T4, T5, T6, T7, T8, T9>, TMember>> column, CancellationToken cancellationToken);
    public abstract virtual bool Any(Expression`1<Func`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, bool>> exp);
    public abstract virtual int InsertInto(string tableName, Expression`1<Func`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, TTargetEntity>> select);
    public abstract virtual DataTable ToDataTable(Expression`1<Func`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, TReturn>> select);
    public abstract virtual List`1<TReturn> ToList(Expression`1<Func`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, TReturn>> select);
    public abstract virtual List`1<TDto> ToList();
    public abstract virtual void ToChunk(Expression`1<Func`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, TReturn>> select, int size, Action`1<FetchCallbackArgs`1<List`1<TReturn>>> done);
    public abstract virtual TReturn ToOne(Expression`1<Func`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, TReturn>> select);
    public abstract virtual TReturn First(Expression`1<Func`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, TReturn>> select);
    public abstract virtual TDto First();
    public abstract virtual string ToSql(Expression`1<Func`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, TReturn>> select, FieldAliasOptions fieldAlias);
    public abstract virtual TReturn ToAggregate(Expression`1<Func`10<ISelectGroupingAggregate`1<T1>, ISelectGroupingAggregate`1<T2>, ISelectGroupingAggregate`1<T3>, ISelectGroupingAggregate`1<T4>, ISelectGroupingAggregate`1<T5>, ISelectGroupingAggregate`1<T6>, ISelectGroupingAggregate`1<T7>, ISelectGroupingAggregate`1<T8>, ISelectGroupingAggregate`1<T9>, TReturn>> select);
    public abstract virtual ISelect`9<T1, T2, T3, T4, T5, T6, T7, T8, T9> Aggregate(Expression`1<Func`10<ISelectGroupingAggregate`1<T1>, ISelectGroupingAggregate`1<T2>, ISelectGroupingAggregate`1<T3>, ISelectGroupingAggregate`1<T4>, ISelectGroupingAggregate`1<T5>, ISelectGroupingAggregate`1<T6>, ISelectGroupingAggregate`1<T7>, ISelectGroupingAggregate`1<T8>, ISelectGroupingAggregate`1<T9>, TReturn>> select, TReturn& result);
    public abstract virtual decimal Sum(Expression`1<Func`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, TMember>> column);
    public abstract virtual TMember Min(Expression`1<Func`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, TMember>> column);
    public abstract virtual TMember Max(Expression`1<Func`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, TMember>> column);
    public abstract virtual double Avg(Expression`1<Func`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, TMember>> column);
    public abstract virtual ISelect`9<T1, T2, T3, T4, T5, T6, T7, T8, T9> LeftJoin(Expression`1<Func`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, bool>> exp);
    public abstract virtual ISelect`9<T1, T2, T3, T4, T5, T6, T7, T8, T9> InnerJoin(Expression`1<Func`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, bool>> exp);
    public abstract virtual ISelect`9<T1, T2, T3, T4, T5, T6, T7, T8, T9> RightJoin(Expression`1<Func`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, bool>> exp);
    public abstract virtual ISelect`9<T1, T2, T3, T4, T5, T6, T7, T8, T9> Where(Expression`1<Func`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, bool>> exp);
    public abstract virtual ISelect`9<T1, T2, T3, T4, T5, T6, T7, T8, T9> WhereIf(bool condition, Expression`1<Func`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, bool>> exp);
    public abstract virtual ISelectGrouping`2<TKey, NativeTuple`9<T1, T2, T3, T4, T5, T6, T7, T8, T9>> GroupBy(Expression`1<Func`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, TKey>> exp);
    public abstract virtual ISelect`9<T1, T2, T3, T4, T5, T6, T7, T8, T9> OrderBy(Expression`1<Func`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, TMember>> column);
    public abstract virtual ISelect`9<T1, T2, T3, T4, T5, T6, T7, T8, T9> OrderByDescending(Expression`1<Func`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, TMember>> column);
    public abstract virtual ISelect`9<T1, T2, T3, T4, T5, T6, T7, T8, T9> OrderByIf(bool condition, Expression`1<Func`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, TMember>> column, bool descending);
    public abstract virtual ISelect`9<T1, T2, T3, T4, T5, T6, T7, T8, T9> WithSql(string sqlT1, string sqlT2, string sqlT3, string sqlT4, string sqlT5, string sqlT6, string sqlT7, string sqlT8, string sqlT9, object parms);
    public abstract virtual ISelect`9<T1, T2, T3, T4, T5, T6, T7, T8, T9> As(string aliasT1, string aliasT2, string aliasT3, string aliasT4, string aliasT5, string aliasT6, string aliasT7, string aliasT8, string aliasT9);
    public abstract virtual ISelect`1<TDto> WithTempQuery(Expression`1<Func`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, TDto>> selector);
    public abstract virtual bool Any(Expression`1<Func`2<HzyTuple`9<T1, T2, T3, T4, T5, T6, T7, T8, T9>, bool>> exp);
    public abstract virtual int InsertInto(string tableName, Expression`1<Func`2<HzyTuple`9<T1, T2, T3, T4, T5, T6, T7, T8, T9>, TTargetEntity>> select);
    public abstract virtual DataTable ToDataTable(Expression`1<Func`2<HzyTuple`9<T1, T2, T3, T4, T5, T6, T7, T8, T9>, TReturn>> select);
    public abstract virtual List`1<TReturn> ToList(Expression`1<Func`2<HzyTuple`9<T1, T2, T3, T4, T5, T6, T7, T8, T9>, TReturn>> select);
    public abstract virtual void ToChunk(Expression`1<Func`2<HzyTuple`9<T1, T2, T3, T4, T5, T6, T7, T8, T9>, TReturn>> select, int size, Action`1<FetchCallbackArgs`1<List`1<TReturn>>> done);
    public abstract virtual TReturn ToOne(Expression`1<Func`2<HzyTuple`9<T1, T2, T3, T4, T5, T6, T7, T8, T9>, TReturn>> select);
    public abstract virtual TReturn First(Expression`1<Func`2<HzyTuple`9<T1, T2, T3, T4, T5, T6, T7, T8, T9>, TReturn>> select);
    public abstract virtual string ToSql(Expression`1<Func`2<HzyTuple`9<T1, T2, T3, T4, T5, T6, T7, T8, T9>, TReturn>> select, FieldAliasOptions fieldAlias);
    public abstract virtual decimal Sum(Expression`1<Func`2<HzyTuple`9<T1, T2, T3, T4, T5, T6, T7, T8, T9>, TMember>> column);
    public abstract virtual TMember Min(Expression`1<Func`2<HzyTuple`9<T1, T2, T3, T4, T5, T6, T7, T8, T9>, TMember>> column);
    public abstract virtual TMember Max(Expression`1<Func`2<HzyTuple`9<T1, T2, T3, T4, T5, T6, T7, T8, T9>, TMember>> column);
    public abstract virtual double Avg(Expression`1<Func`2<HzyTuple`9<T1, T2, T3, T4, T5, T6, T7, T8, T9>, TMember>> column);
    public abstract virtual ISelect`9<T1, T2, T3, T4, T5, T6, T7, T8, T9> LeftJoin(Expression`1<Func`2<HzyTuple`9<T1, T2, T3, T4, T5, T6, T7, T8, T9>, bool>> exp);
    public abstract virtual ISelect`9<T1, T2, T3, T4, T5, T6, T7, T8, T9> InnerJoin(Expression`1<Func`2<HzyTuple`9<T1, T2, T3, T4, T5, T6, T7, T8, T9>, bool>> exp);
    public abstract virtual ISelect`9<T1, T2, T3, T4, T5, T6, T7, T8, T9> RightJoin(Expression`1<Func`2<HzyTuple`9<T1, T2, T3, T4, T5, T6, T7, T8, T9>, bool>> exp);
    public abstract virtual ISelect`9<T1, T2, T3, T4, T5, T6, T7, T8, T9> Where(Expression`1<Func`2<HzyTuple`9<T1, T2, T3, T4, T5, T6, T7, T8, T9>, bool>> exp);
    public abstract virtual ISelect`9<T1, T2, T3, T4, T5, T6, T7, T8, T9> WhereIf(bool condition, Expression`1<Func`2<HzyTuple`9<T1, T2, T3, T4, T5, T6, T7, T8, T9>, bool>> exp);
    public abstract virtual ISelectGrouping`2<TKey, NativeTuple`9<T1, T2, T3, T4, T5, T6, T7, T8, T9>> GroupBy(Expression`1<Func`2<HzyTuple`9<T1, T2, T3, T4, T5, T6, T7, T8, T9>, TKey>> exp);
    public abstract virtual ISelect`9<T1, T2, T3, T4, T5, T6, T7, T8, T9> OrderBy(Expression`1<Func`2<HzyTuple`9<T1, T2, T3, T4, T5, T6, T7, T8, T9>, TMember>> column);
    public abstract virtual ISelect`9<T1, T2, T3, T4, T5, T6, T7, T8, T9> OrderByDescending(Expression`1<Func`2<HzyTuple`9<T1, T2, T3, T4, T5, T6, T7, T8, T9>, TMember>> column);
    public abstract virtual ISelect`9<T1, T2, T3, T4, T5, T6, T7, T8, T9> OrderByIf(bool condition, Expression`1<Func`2<HzyTuple`9<T1, T2, T3, T4, T5, T6, T7, T8, T9>, TMember>> column, bool descending);
    public abstract virtual ISelect`1<TDto> WithTempQuery(Expression`1<Func`2<HzyTuple`9<T1, T2, T3, T4, T5, T6, T7, T8, T9>, TDto>> selector);
}
public interface FreeSql.ISelect0 {
}
public interface FreeSql.ISelect0`2 {
    public abstract virtual Task`1<DataTable> ToDataTableAsync(string field, CancellationToken cancellationToken);
    public abstract virtual Task`1<DataTable> ToDataTableByPropertyNameAsync(String[] properties, CancellationToken cancellationToken);
    public abstract virtual Task`1<Dictionary`2<TKey, T1>> ToDictionaryAsync(Func`2<T1, TKey> keySelector, CancellationToken cancellationToken);
    public abstract virtual Task`1<Dictionary`2<TKey, TElement>> ToDictionaryAsync(Func`2<T1, TKey> keySelector, Func`2<T1, TElement> elementSelector, CancellationToken cancellationToken);
    public abstract virtual Task`1<List`1<T1>> ToListAsync(CancellationToken cancellationToken);
    public abstract virtual Task`1<List`1<T1>> ToListAsync(bool includeNestedMembers, CancellationToken cancellationToken);
    public abstract virtual Task`1<List`1<TTuple>> ToListAsync(string field, CancellationToken cancellationToken);
    public abstract virtual Task`1<T1> ToOneAsync(CancellationToken cancellationToken);
    public abstract virtual Task`1<T1> FirstAsync(CancellationToken cancellationToken);
    public abstract virtual Task`1<bool> AnyAsync(CancellationToken cancellationToken);
    public abstract virtual Task`1<long> CountAsync(CancellationToken cancellationToken);
    public abstract virtual TSelect Cancel(Func`1<bool> cancel);
    public abstract virtual TSelect WithTransaction(DbTransaction transaction);
    public abstract virtual TSelect WithConnection(DbConnection connection);
    public abstract virtual TSelect WithParameters(List`1<DbParameter> parameters);
    public abstract virtual TSelect CommandTimeout(int timeout);
    public abstract virtual TSelect TrackToList(Action`1<object> action);
    public abstract virtual DataTable ToDataTable(string field);
    public abstract virtual DataTable ToDataTableByPropertyName(String[] properties);
    public abstract virtual Dictionary`2<TKey, T1> ToDictionary(Func`2<T1, TKey> keySelector);
    public abstract virtual Dictionary`2<TKey, TElement> ToDictionary(Func`2<T1, TKey> keySelector, Func`2<T1, TElement> elementSelector);
    public abstract virtual List`1<T1> ToList();
    public abstract virtual List`1<T1> ToList(bool includeNestedMembers);
    public abstract virtual void ToChunk(int size, Action`1<FetchCallbackArgs`1<List`1<T1>>> done, bool includeNestedMembers);
    public abstract virtual List`1<TTuple> ToList(string field);
    public abstract virtual T1 ToOne();
    public abstract virtual T1 First();
    public abstract virtual IDelete`1<T1> ToDelete();
    public abstract virtual IUpdate`1<T1> ToUpdate();
    public abstract virtual TSelect AsTable(Func`3<Type, string, string> tableRule);
    public abstract virtual TSelect AsAlias(Func`3<Type, string, string> aliasRule);
    public abstract virtual TSelect AsType(Type entityType);
    public abstract virtual string ToSql(string field);
    public abstract virtual bool Any();
    public abstract virtual long Count();
    public abstract virtual TSelect Count(Int64& count);
    public abstract virtual TSelect Master();
    public abstract virtual TSelect LeftJoin(Expression`1<Func`2<T1, bool>> exp);
    public abstract virtual TSelect InnerJoin(Expression`1<Func`2<T1, bool>> exp);
    public abstract virtual TSelect RightJoin(Expression`1<Func`2<T1, bool>> exp);
    public abstract virtual TSelect LeftJoin(Expression`1<Func`3<T1, T2, bool>> exp);
    public abstract virtual TSelect InnerJoin(Expression`1<Func`3<T1, T2, bool>> exp);
    public abstract virtual TSelect RightJoin(Expression`1<Func`3<T1, T2, bool>> exp);
    public abstract virtual TSelect LeftJoin(string sql, object parms);
    public abstract virtual TSelect InnerJoin(string sql, object parms);
    public abstract virtual TSelect RightJoin(string sql, object parms);
    public abstract virtual TSelect RawJoin(string sql);
    public abstract virtual TSelect Where(string sql, object parms);
    public abstract virtual TSelect WhereIf(bool condition, string sql, object parms);
    public abstract virtual TSelect WhereDynamicFilter(DynamicFilterInfo filter);
    public abstract virtual TSelect DisableGlobalFilter(String[] name);
    public abstract virtual TSelect ForUpdate(bool nowait);
    public abstract virtual TSelect GroupBy(string sql, object parms);
    public abstract virtual TSelect Having(string sql, object parms);
    public abstract virtual TSelect OrderBy(string sql, object parms);
    public abstract virtual TSelect OrderBy(bool condition, string sql, object parms);
    public abstract virtual TSelect OrderByPropertyName(string property, bool isAscending);
    public abstract virtual TSelect OrderByPropertyNameIf(bool condition, string property, bool isAscending);
    public abstract virtual TSelect Skip(int offset);
    public abstract virtual TSelect Offset(int offset);
    public abstract virtual TSelect Limit(int limit);
    public abstract virtual TSelect Take(int limit);
    public abstract virtual TSelect Page(int pageNumber, int pageSize);
    public abstract virtual TSelect Page(BasePagingInfo pagingInfo);
    public abstract virtual TSelect Distinct();
}
public interface FreeSql.ISelectFromExpression`1 {
    public abstract virtual ISelectFromExpression`1<T1> LeftJoin(Expression`1<Func`2<T1, bool>> exp);
    public abstract virtual ISelectFromExpression`1<T1> InnerJoin(Expression`1<Func`2<T1, bool>> exp);
    public abstract virtual ISelectFromExpression`1<T1> RightJoin(Expression`1<Func`2<T1, bool>> exp);
    public abstract virtual ISelectFromExpression`1<T1> Where(Expression`1<Func`2<T1, bool>> exp);
    public abstract virtual ISelectFromExpression`1<T1> WhereIf(bool condition, Expression`1<Func`2<T1, bool>> exp);
    public abstract virtual ISelectFromExpression`1<T1> OrderBy(Expression`1<Func`2<T1, TMember>> column);
    public abstract virtual ISelectFromExpression`1<T1> OrderByDescending(Expression`1<Func`2<T1, TMember>> column);
}
public interface FreeSql.ISelectGrouping`2 {
    public abstract virtual Task`1<long> CountAsync(CancellationToken cancellationToken);
    public abstract virtual Task`1<List`1<TReturn>> ToListAsync(Expression`1<Func`2<ISelectGroupingAggregate`2<TKey, TValue>, TReturn>> select, CancellationToken cancellationToken);
    public abstract virtual Task`1<Dictionary`2<TKey, TElement>> ToDictionaryAsync(Expression`1<Func`2<ISelectGroupingAggregate`2<TKey, TValue>, TElement>> elementSelector, CancellationToken cancellationToken);
    public abstract virtual Task`1<TReturn> FirstAsync(Expression`1<Func`2<ISelectGroupingAggregate`2<TKey, TValue>, TReturn>> select, CancellationToken cancellationToken);
    public abstract virtual ISelectGrouping`2<TKey, TValue> Having(Expression`1<Func`2<ISelectGroupingAggregate`2<TKey, TValue>, bool>> exp);
    public abstract virtual ISelectGrouping`2<TKey, TValue> HavingIf(bool condition, Expression`1<Func`2<ISelectGroupingAggregate`2<TKey, TValue>, bool>> exp);
    public abstract virtual ISelectGrouping`2<TKey, TValue> OrderBy(Expression`1<Func`2<ISelectGroupingAggregate`2<TKey, TValue>, TMember>> column);
    public abstract virtual ISelectGrouping`2<TKey, TValue> OrderByDescending(Expression`1<Func`2<ISelectGroupingAggregate`2<TKey, TValue>, TMember>> column);
    public abstract virtual List`1<TReturn> ToList(Expression`1<Func`2<ISelectGroupingAggregate`2<TKey, TValue>, TReturn>> select);
    public abstract virtual Dictionary`2<TKey, TElement> ToDictionary(Expression`1<Func`2<ISelectGroupingAggregate`2<TKey, TValue>, TElement>> elementSelector);
    public abstract virtual TReturn First(Expression`1<Func`2<ISelectGroupingAggregate`2<TKey, TValue>, TReturn>> select);
    public abstract virtual List`1<TReturn> Select(Expression`1<Func`2<ISelectGroupingAggregate`2<TKey, TValue>, TReturn>> select);
    public abstract virtual string ToSql(Expression`1<Func`2<ISelectGroupingAggregate`2<TKey, TValue>, TReturn>> select, FieldAliasOptions fieldAlias);
    public abstract virtual string ToSql(string field);
    public abstract virtual ISelect`1<TDto> WithTempQuery(Expression`1<Func`2<ISelectGroupingAggregate`2<TKey, TValue>, TDto>> selector);
    public abstract virtual ISelectGrouping`2<TKey, TValue> Skip(int offset);
    public abstract virtual ISelectGrouping`2<TKey, TValue> Offset(int offset);
    public abstract virtual ISelectGrouping`2<TKey, TValue> Limit(int limit);
    public abstract virtual ISelectGrouping`2<TKey, TValue> Take(int limit);
    public abstract virtual ISelectGrouping`2<TKey, TValue> Page(int pageNumber, int pageSize);
    public abstract virtual ISelectGrouping`2<TKey, TValue> Page(BasePagingInfo pagingInfo);
    public abstract virtual long Count();
    public abstract virtual ISelectGrouping`2<TKey, TValue> Count(Int64& count);
}
public interface FreeSql.ISelectGroupingAggregate`1 {
    public TKey Key { get; public set; }
    public abstract virtual TKey get_Key();
    public abstract virtual void set_Key(TKey value);
    public abstract virtual int Count();
    public abstract virtual int Count(T3 column);
    public abstract virtual decimal Sum(T3 column);
    public abstract virtual decimal Avg(T3 column);
    public abstract virtual T3 Max(T3 column);
    public abstract virtual T3 Min(T3 column);
}
public interface FreeSql.ISelectGroupingAggregate`2 {
    public TValue Value { get; public set; }
    public abstract virtual TValue get_Value();
    public abstract virtual void set_Value(TValue value);
}
public interface FreeSql.IUpdate`1 {
    public abstract virtual IUpdateJoin`2<T1, T2> Join(ISelect`1<T2> query, Expression`1<Func`3<T1, T2, bool>> on);
    public abstract virtual IUpdateJoin`2<T1, T2> Join(Expression`1<Func`3<T1, T2, bool>> on);
    public abstract virtual IUpdate`1<T1> WithTransaction(DbTransaction transaction);
    public abstract virtual IUpdate`1<T1> WithConnection(DbConnection connection);
    public abstract virtual IUpdate`1<T1> CommandTimeout(int timeout);
    public abstract virtual IUpdate`1<T1> NoneParameter(bool isNotCommandParameter);
    public abstract virtual IUpdate`1<T1> BatchOptions(int rowsLimit, int parameterLimit, bool autoTransaction);
    public abstract virtual IUpdate`1<T1> BatchProgress(Action`1<BatchProgressStatus`1<T1>> callback);
    public abstract virtual IUpdate`1<T1> SetSource(T1 source);
    public abstract virtual IUpdate`1<T1> SetSource(IEnumerable`1<T1> source, Expression`1<Func`2<T1, object>> tempPrimarys, bool ignoreVersion);
    public abstract virtual IUpdate`1<T1> SetSourceIgnore(T1 source, Func`2<object, bool> ignore);
    public abstract virtual IUpdate`1<T1> IgnoreColumns(Expression`1<Func`2<T1, object>> columns);
    public abstract virtual IUpdate`1<T1> IgnoreColumns(String[] columns);
    public abstract virtual IUpdate`1<T1> UpdateColumns(Expression`1<Func`2<T1, object>> columns);
    public abstract virtual IUpdate`1<T1> UpdateColumns(String[] columns);
    public abstract virtual IUpdate`1<T1> Set(Expression`1<Func`2<T1, TMember>> column, TMember value);
    public abstract virtual IUpdate`1<T1> SetIf(bool condition, Expression`1<Func`2<T1, TMember>> column, TMember value);
    public abstract virtual IUpdate`1<T1> Set(Expression`1<Func`2<T1, TMember>> exp);
    public abstract virtual IUpdate`1<T1> SetIf(bool condition, Expression`1<Func`2<T1, TMember>> exp);
    public abstract virtual IUpdate`1<T1> SetRaw(string sql, object parms);
    public abstract virtual IUpdate`1<T1> SetDto(object dto);
    public abstract virtual IUpdate`1<T1> SetDtoIgnore(object dto, Func`2<object, bool> ignore);
    public abstract virtual IUpdate`1<T1> Where(Expression`1<Func`2<T1, bool>> exp);
    public abstract virtual IUpdate`1<T1> WhereIf(bool condition, Expression`1<Func`2<T1, bool>> exp);
    public abstract virtual IUpdate`1<T1> Where(string sql, object parms);
    public abstract virtual IUpdate`1<T1> Where(T1 item);
    public abstract virtual IUpdate`1<T1> Where(IEnumerable`1<T1> items);
    public abstract virtual IUpdate`1<T1> WhereDynamic(object dywhere, bool not);
    public abstract virtual IUpdate`1<T1> WhereDynamicFilter(DynamicFilterInfo filter);
    public abstract virtual IUpdate`1<T1> DisableGlobalFilter(String[] name);
    public abstract virtual IUpdate`1<T1> AsTable(Func`2<string, string> tableRule);
    public abstract virtual IUpdate`1<T1> AsTable(string tableName);
    public abstract virtual IUpdate`1<T1> AsType(Type entityType);
    public abstract virtual string ToSql();
    public abstract virtual int ExecuteAffrows();
    public abstract virtual List`1<T1> ExecuteUpdated();
    public abstract virtual List`1<TReturn> ExecuteUpdated(Expression`1<Func`2<T1, TReturn>> returnColumns);
    public abstract virtual Task`1<int> ExecuteAffrowsAsync(CancellationToken cancellationToken);
    public abstract virtual Task`1<List`1<T1>> ExecuteUpdatedAsync(CancellationToken cancellationToken);
    public abstract virtual Task`1<List`1<TReturn>> ExecuteUpdatedAsync(Expression`1<Func`2<T1, TReturn>> returnColumns, CancellationToken cancellationToken);
}
public interface FreeSql.IUpdateJoin`2 {
    public abstract virtual IUpdateJoin`2<T1, T2> WithTransaction(DbTransaction transaction);
    public abstract virtual IUpdateJoin`2<T1, T2> WithConnection(DbConnection connection);
    public abstract virtual IUpdateJoin`2<T1, T2> CommandTimeout(int timeout);
    public abstract virtual IUpdateJoin`2<T1, T2> Set(Expression`1<Func`2<T1, TMember>> column, TMember value);
    public abstract virtual IUpdateJoin`2<T1, T2> SetIf(bool condition, Expression`1<Func`2<T1, TMember>> column, TMember value);
    public abstract virtual IUpdateJoin`2<T1, T2> Set(Expression`1<Func`3<T1, T2, bool>> exp);
    public abstract virtual IUpdateJoin`2<T1, T2> SetIf(bool condition, Expression`1<Func`3<T1, T2, bool>> exp);
    public abstract virtual IUpdateJoin`2<T1, T2> SetRaw(string sql, object parms);
    public abstract virtual IUpdateJoin`2<T1, T2> Where(Expression`1<Func`3<T1, T2, bool>> exp);
    public abstract virtual IUpdateJoin`2<T1, T2> WhereIf(bool condition, Expression`1<Func`3<T1, T2, bool>> exp);
    public abstract virtual IUpdateJoin`2<T1, T2> Where(string sql, object parms);
    public abstract virtual IUpdateJoin`2<T1, T2> DisableGlobalFilter(String[] name);
    public abstract virtual IUpdateJoin`2<T1, T2> AsTable(string tableName, string joinTableName);
    public abstract virtual string ToSql();
    public abstract virtual int ExecuteAffrows();
    public abstract virtual Task`1<int> ExecuteAffrowsAsync(CancellationToken cancellationToken);
}
[ExpressionCallAttribute]
public static class FreeSql.SqlExt : object {
    internal static ThreadLocal`1<ExpressionCallContext> expContext;
    private static SqlExt();
    public static ISqlOver`1<long> Rank();
    public static ISqlOver`1<long> DenseRank();
    public static ISqlOver`1<long> Count(object column);
    public static ISqlOver`1<decimal> Sum(object column);
    public static ISqlOver`1<decimal> Avg(object column);
    public static ISqlOver`1<T> Max(T column);
    public static ISqlOver`1<T> Min(T column);
    public static ISqlOver`1<long> RowNumber();
    public static TValue IsNull(TValue value, TValue defaultValue);
    public static long DistinctCount(T column);
    private static bool InternalRawSql(string sql);
    private static object InternalRawField(string sql);
    public static bool GreaterThan(TValue value1, TValue value2);
    public static bool GreaterThanOrEqual(TValue value1, TValue value2);
    public static bool LessThan(TValue value1, TValue value2);
    public static bool LessThanOrEqual(TValue value1, TValue value2);
    public static bool EqualIsNull(TValue value1);
    public static ICaseWhenEnd Case();
    public static TOutput CaseDict(TInput input, Dictionary`2<TInput, TOutput> dict);
    public static IGroupConcat GroupConcat(object column);
    public static int FindInSet(TValue str, string strlist);
    public static string StringAgg(object column, object delimiter);
}
[ExtensionAttribute]
[ExpressionCallAttribute]
public static class FreeSql.SqlExtExtensions : object {
    private static ThreadLocal`1<ExpressionCallContext> expContextSelf;
    internal static ThreadLocal`1<List`1<ExpSbInfo>> expSb;
    private static ExpressionCallContext expContext { get; }
    internal static ExpSbInfo expSbLast { get; }
    private static SqlExtExtensions();
    private static ExpressionCallContext get_expContext();
    internal static ExpSbInfo get_expSbLast();
    internal static ISqlOver`1<TValue> Over(string sqlFunc);
    [ExtensionAttribute]
public static ISqlOver`1<TValue> Over(ISqlOver`1<TValue> that);
    [ExtensionAttribute]
public static ISqlOver`1<TValue> PartitionBy(ISqlOver`1<TValue> that, object column);
    [ExtensionAttribute]
public static ISqlOver`1<TValue> OrderBy(ISqlOver`1<TValue> that, object column);
    [ExtensionAttribute]
public static ISqlOver`1<TValue> OrderByDescending(ISqlOver`1<TValue> that, object column);
    [ExtensionAttribute]
private static ISqlOver`1<TValue> OrderByPriv(ISqlOver`1<TValue> that, bool isDesc);
    [ExtensionAttribute]
public static TValue ToValue(ISqlOver`1<TValue> that);
    public static ICaseWhenEnd Case();
    [ExtensionAttribute]
public static ICaseWhenEnd`1<TValue> When(ICaseWhenEnd that, bool test, TValue then);
    [ExtensionAttribute]
public static ICaseWhenEnd`1<TValue> When(ICaseWhenEnd`1<TValue> that, bool test, TValue then);
    [ExtensionAttribute]
public static ICaseWhenEnd`1<TValue> Else(ICaseWhenEnd`1<TValue> that, TValue then);
    [ExtensionAttribute]
public static TValue End(ICaseWhenEnd`1<TValue> that);
    public static IGroupConcat GroupConcat(object column);
    [ExtensionAttribute]
public static IGroupConcat Distinct(IGroupConcat that);
    [ExtensionAttribute]
public static IGroupConcat Separator(IGroupConcat that, object separator);
    [ExtensionAttribute]
public static IGroupConcat OrderBy(IGroupConcat that, object column);
    [ExtensionAttribute]
public static IGroupConcat OrderByDescending(IGroupConcat that, object column);
    [ExtensionAttribute]
private static IGroupConcat OrderByPriv(IGroupConcat that, bool isDesc);
    [ExtensionAttribute]
public static string ToValue(IGroupConcat that);
    public static string StringJoinSqliteGroupConcat(object column, object delimiter);
    public static string StringJoinPgsqlGroupConcat(object column, object delimiter);
    public static string StringJoinMySqlGroupConcat(object column, object delimiter);
    public static string StringJoinOracleGroupConcat(object column, object delimiter);
    public static string StringJoinFirebirdList(object column, object delimiter);
    public static string StringJoinGBaseWmConcatText(object column, object delimiter);
}
[ExtensionAttribute]
public static class FreeSqlGlobalDynamicEntityExtensions : object {
    [ExtensionAttribute]
public static DynamicCompileBuilder DynamicEntity(ICodeFirst codeFirst, string className, Attribute[] attributes);
    [ExtensionAttribute]
public static object CreateInstance(TableInfo table, Dictionary`2<string, object> dict);
    [ExtensionAttribute]
public static Dictionary`2<string, object> CreateDictionary(TableInfo table, object instance);
}
[ExtensionAttribute]
[ExpressionCallAttribute]
public static class FreeSqlGlobalExpressionCallExtensions : object {
    public static ThreadLocal`1<ExpressionCallContext> expContext;
    private static FreeSqlGlobalExpressionCallExtensions();
    [ExtensionAttribute]
public static bool Between(DateTime that, DateTime between, DateTime and);
    [ExtensionAttribute]
public static bool BetweenEnd(DateTime that, DateTime start, DateTime end);
}
[ExtensionAttribute]
public static class FreeSqlGlobalExtensions : object {
    private static Lazy`1<Dictionary`2<Type, bool>> _dicIsNumberType;
    private static ConcurrentDictionary`2<Type, Lazy`1<ConstructorInfo>> _dicInternalGetTypeConstructor0OrFirst;
    private static ConcurrentDictionary`2<Type, Dictionary`2<string, PropertyInfo>> _dicGetPropertiesDictIgnoreCase;
    private static ConcurrentDictionary`2<Type, FieldInfo[]> _dicGetFields;
    private static ConcurrentDictionary`2<string, string> _dicMySqlVersion;
    private static FreeSqlGlobalExtensions();
    [ExtensionAttribute]
internal static object GetTaskReflectionResult(Task task);
    [ExtensionAttribute]
public static bool IsIntegerType(Type that);
    [ExtensionAttribute]
public static bool IsNumberType(Type that);
    [ExtensionAttribute]
public static bool IsNullableType(Type that);
    [ExtensionAttribute]
public static bool IsAnonymousType(Type that);
    [ExtensionAttribute]
public static bool IsArrayOrList(Type that);
    [ExtensionAttribute]
public static Type NullableTypeOrThis(Type that);
    [ExtensionAttribute]
internal static string NotNullAndConcat(string that, Object[] args);
    [ExtensionAttribute]
public static string DisplayCsharp(Type type, bool isNameSpace);
    [ExtensionAttribute]
internal static string DisplayCsharp(MethodInfo method, bool isOverride);
    [ExtensionAttribute]
public static object CreateInstanceGetDefaultValue(Type that);
    [ExtensionAttribute]
internal static NewExpression InternalNewExpression(Type that);
    [ExtensionAttribute]
internal static ConstructorInfo InternalGetTypeConstructor0OrFirst(Type that, bool isThrow);
    [ExtensionAttribute]
public static Dictionary`2<string, PropertyInfo> GetPropertiesDictIgnoreCase(Type that);
    [ExtensionAttribute]
public static double Distance(Point that, Point point);
    [ExtensionAttribute]
public static object GetEnum(IDataReader dr, int index);
    [ExtensionAttribute]
public static string ToDescriptionOrString(Enum item);
    [ExtensionAttribute]
public static long ToInt64(Enum item);
    [ExtensionAttribute]
public static IEnumerable`1<T> ToSet(long value);
    [ExtensionAttribute]
public static ISelect`1<TEntity> AsSelect(IEnumerable`1<TEntity> that);
    [ExtensionAttribute]
public static ISelect`1<TEntity> AsSelect(IEnumerable`1<TEntity> that, IFreeSql orm);
    [ExtensionAttribute]
public static ISelect`1<T> Queryable(IFreeSql freesql);
    [ExtensionAttribute]
public static ISelect`2<T1, T2> Select(IFreeSql freesql);
    [ExtensionAttribute]
public static ISelect`3<T1, T2, T3> Select(IFreeSql freesql);
    [ExtensionAttribute]
public static ISelect`4<T1, T2, T3, T4> Select(IFreeSql freesql);
    [ExtensionAttribute]
public static ISelect`5<T1, T2, T3, T4, T5> Select(IFreeSql freesql);
    [ExtensionAttribute]
public static ISelect`6<T1, T2, T3, T4, T5, T6> Select(IFreeSql freesql);
    [ExtensionAttribute]
public static ISelect`7<T1, T2, T3, T4, T5, T6, T7> Select(IFreeSql freesql);
    [ExtensionAttribute]
public static ISelect`8<T1, T2, T3, T4, T5, T6, T7, T8> Select(IFreeSql freesql);
    [ExtensionAttribute]
public static ISelect`9<T1, T2, T3, T4, T5, T6, T7, T8, T9> Select(IFreeSql freesql);
    [ExtensionAttribute]
public static ISelect`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> Select(IFreeSql freesql);
    [ExtensionAttribute]
public static ISelect`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> Select(IFreeSql freesql);
    [ExtensionAttribute]
public static ISelect`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> Select(IFreeSql freesql);
    [ExtensionAttribute]
public static ISelect`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> Select(IFreeSql freesql);
    [ExtensionAttribute]
public static ISelect`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> Select(IFreeSql freesql);
    [ExtensionAttribute]
public static ISelect`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> Select(IFreeSql freesql);
    [ExtensionAttribute]
public static ISelect`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> Select(IFreeSql freesql);
    [ExtensionAttribute]
public static List`1<T1> IncludeMany(List`1<T1> list, IFreeSql orm, Expression`1<Func`2<T1, IEnumerable`1<TNavigate>>> navigateSelector, Action`1<ISelect`1<TNavigate>> then);
    [AsyncStateMachineAttribute("FreeSqlGlobalExtensions/<IncludeManyAsync>d__42`2")]
[DebuggerStepThroughAttribute]
[ExtensionAttribute]
public static Task`1<List`1<T1>> IncludeManyAsync(List`1<T1> list, IFreeSql orm, Expression`1<Func`2<T1, IEnumerable`1<TNavigate>>> navigateSelector, Action`1<ISelect`1<TNavigate>> then, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static List`1<T1> IncludeByPropertyName(List`1<T1> list, IFreeSql orm, string property, string where, int take, string select, Expression`1<Action`1<ISelect`1<object>>> then);
    [ExtensionAttribute]
public static Task`1<List`1<T1>> IncludeByPropertyNameAsync(List`1<T1> list, IFreeSql orm, string property, string where, int take, string select, Expression`1<Action`1<ISelect`1<object>>> then);
    [AsyncStateMachineAttribute("FreeSqlGlobalExtensions/<IncludeByPropertyNameSyncOrAsync>d__45`1")]
[DebuggerStepThroughAttribute]
private static Task`1<List`1<T1>> IncludeByPropertyNameSyncOrAsync(bool isAsync, List`1<T1> list, IFreeSql orm, string property, string where, int take, string select, Expression`1<Action`1<ISelect`1<object>>> then);
    private static Select1Provider`1<object> IncludeManyByPropertyNameCommonGetSelect(IFreeSql orm, Type entityType, string property, string where, int take, string select, Expression`1<Action`1<ISelect`1<object>>> then);
    [ExtensionAttribute]
public static List`1<T1> ToTreeList(ISelect`1<T1> that);
    [AsyncStateMachineAttribute("FreeSqlGlobalExtensions/<ToTreeListAsync>d__48`1")]
[DebuggerStepThroughAttribute]
[ExtensionAttribute]
public static Task`1<List`1<T1>> ToTreeListAsync(ISelect`1<T1> that, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static ISelect`1<T1> AsTreeCte(ISelect`1<T1> that, Expression`1<Func`2<T1, string>> pathSelector, bool up, string pathSeparator, int level);
    [ExtensionAttribute]
public static TSelect OrderByRandom(ISelect0`2<TSelect, T1> that);
    [ExtensionAttribute]
public static InsertDictImpl InsertDict(IFreeSql freesql, Dictionary`2<string, object> source);
    [ExtensionAttribute]
public static InsertDictImpl InsertDict(IFreeSql freesql, IEnumerable`1<Dictionary`2<string, object>> source);
    private static void LocalReplaceDictDBNullValue(Dictionary`2<string, object> dict);
    [ExtensionAttribute]
public static UpdateDictImpl UpdateDict(IFreeSql freesql, Dictionary`2<string, object> source);
    [ExtensionAttribute]
public static UpdateDictImpl UpdateDict(IFreeSql freesql, IEnumerable`1<Dictionary`2<string, object>> source);
    [ExtensionAttribute]
public static InsertOrUpdateDictImpl InsertOrUpdateDict(IFreeSql freesql, Dictionary`2<string, object> source);
    [ExtensionAttribute]
public static InsertOrUpdateDictImpl InsertOrUpdateDict(IFreeSql freesql, IEnumerable`1<Dictionary`2<string, object>> source);
    [ExtensionAttribute]
public static DeleteDictImpl DeleteDict(IFreeSql freesql, Dictionary`2<string, object> source);
    [ExtensionAttribute]
public static DeleteDictImpl DeleteDict(IFreeSql freesql, IEnumerable`1<Dictionary`2<string, object>> source);
    [ExtensionAttribute]
public static T1 QuerySingle(IAdo ado, Expression`1<Func`1<T1>> selector);
    [AsyncStateMachineAttribute("FreeSqlGlobalExtensions/<QuerySingleAsync>d__66`1")]
[DebuggerStepThroughAttribute]
[ExtensionAttribute]
public static Task`1<T1> QuerySingleAsync(IAdo ado, Expression`1<Func`1<T1>> selector, CancellationToken cancellationToken);
    private static NativeTuple`3<Select1Provider`1<object>, ReadAnonymousTypeAfInfo, string> SelectNoTable(IFreeSql fsql, Expression selector);
    [CompilerGeneratedAttribute]
internal static string <DisplayCsharp>g__LocalDisplayCsharpParameter|10_2(ParameterInfo lp);
}
public static class FreeUtil : object {
    private static DateTime dt1970;
    internal static ThreadLocal`1<Random> rnd;
    private static int __staticMachine;
    private static int __staticPid;
    private static int __staticIncrement;
    private static FreeUtil();
    public static Guid NewMongodbId();
    public static string Sha1(string str);
}
public interface IFreeSql {
    public IAdo Ado { get; }
    public IAop Aop { get; }
    public ICodeFirst CodeFirst { get; }
    public IDbFirst DbFirst { get; }
    public GlobalFilter GlobalFilter { get; }
    public abstract virtual IInsert`1<T1> Insert();
    public abstract virtual IInsert`1<T1> Insert(T1 source);
    public abstract virtual IInsert`1<T1> Insert(T1[] source);
    public abstract virtual IInsert`1<T1> Insert(List`1<T1> source);
    public abstract virtual IInsert`1<T1> Insert(IEnumerable`1<T1> source);
    public abstract virtual IInsertOrUpdate`1<T1> InsertOrUpdate();
    public abstract virtual IUpdate`1<T1> Update();
    public abstract virtual IUpdate`1<T1> Update(object dywhere);
    public abstract virtual ISelect`1<T1> Select();
    public abstract virtual ISelect`1<T1> Select(object dywhere);
    public abstract virtual IDelete`1<T1> Delete();
    public abstract virtual IDelete`1<T1> Delete(object dywhere);
    public abstract virtual void Transaction(Action handler);
    public abstract virtual void Transaction(IsolationLevel isolationLevel, Action handler);
    public abstract virtual IAdo get_Ado();
    public abstract virtual IAop get_Aop();
    public abstract virtual ICodeFirst get_CodeFirst();
    public abstract virtual IDbFirst get_DbFirst();
    public abstract virtual GlobalFilter get_GlobalFilter();
}
public interface IFreeSql`1 {
}
internal class System.Linq.Expressions.GetParameterExpressionVisitor : ExpressionVisitor {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ParameterExpression <Result>k__BackingField;
    public ParameterExpression Result { get; private set; }
    [CompilerGeneratedAttribute]
public ParameterExpression get_Result();
    [CompilerGeneratedAttribute]
private void set_Result(ParameterExpression value);
    protected virtual Expression VisitParameter(ParameterExpression node);
}
[ExtensionAttribute]
public static class System.Linq.Expressions.LambadaExpressionExtensions : object {
    private static ConcurrentDictionary`2<Type, ConcurrentDictionary`2<string, MethodInfo>> _dicTypeMethod;
    private static LambadaExpressionExtensions();
    private static LambdaExpression InternalAndOrExpression(bool condition, LambdaExpression exp1, LambdaExpression exp2, bool isAndAlso);
    private static LambdaExpression InternalNotExpression(bool condition, LambdaExpression exp);
    [ExtensionAttribute]
public static Expression`1<Func`2<T1, bool>> And(Expression`1<Func`2<T1, bool>> exp1, Expression`1<Func`2<T1, bool>> exp2);
    [ExtensionAttribute]
public static Expression`1<Func`2<T1, bool>> And(Expression`1<Func`2<T1, bool>> exp1, bool condition, Expression`1<Func`2<T1, bool>> exp2);
    [ExtensionAttribute]
public static Expression`1<Func`2<T1, bool>> Or(Expression`1<Func`2<T1, bool>> exp1, Expression`1<Func`2<T1, bool>> exp2);
    [ExtensionAttribute]
public static Expression`1<Func`2<T1, bool>> Or(Expression`1<Func`2<T1, bool>> exp1, bool condition, Expression`1<Func`2<T1, bool>> exp2);
    [ExtensionAttribute]
public static Expression`1<Func`2<T1, bool>> Not(Expression`1<Func`2<T1, bool>> exp, bool condition);
    [ExtensionAttribute]
public static Expression`1<Func`3<T1, T2, bool>> And(Expression`1<Func`3<T1, T2, bool>> exp1, Expression`1<Func`3<T1, T2, bool>> exp2);
    [ExtensionAttribute]
public static Expression`1<Func`3<T1, T2, bool>> And(Expression`1<Func`3<T1, T2, bool>> exp1, bool condition, Expression`1<Func`3<T1, T2, bool>> exp2);
    [ExtensionAttribute]
public static Expression`1<Func`3<T1, T2, bool>> Or(Expression`1<Func`3<T1, T2, bool>> exp1, Expression`1<Func`3<T1, T2, bool>> exp2);
    [ExtensionAttribute]
public static Expression`1<Func`3<T1, T2, bool>> Or(Expression`1<Func`3<T1, T2, bool>> exp1, bool condition, Expression`1<Func`3<T1, T2, bool>> exp2);
    [ExtensionAttribute]
public static Expression`1<Func`3<T1, T2, bool>> Not(Expression`1<Func`3<T1, T2, bool>> exp, bool condition);
    [ExtensionAttribute]
public static Expression`1<Func`4<T1, T2, T3, bool>> And(Expression`1<Func`4<T1, T2, T3, bool>> exp1, Expression`1<Func`4<T1, T2, T3, bool>> exp2);
    [ExtensionAttribute]
public static Expression`1<Func`4<T1, T2, T3, bool>> And(Expression`1<Func`4<T1, T2, T3, bool>> exp1, bool condition, Expression`1<Func`4<T1, T2, T3, bool>> exp2);
    [ExtensionAttribute]
public static Expression`1<Func`4<T1, T2, T3, bool>> Or(Expression`1<Func`4<T1, T2, T3, bool>> exp1, Expression`1<Func`4<T1, T2, T3, bool>> exp2);
    [ExtensionAttribute]
public static Expression`1<Func`4<T1, T2, T3, bool>> Or(Expression`1<Func`4<T1, T2, T3, bool>> exp1, bool condition, Expression`1<Func`4<T1, T2, T3, bool>> exp2);
    [ExtensionAttribute]
public static Expression`1<Func`4<T1, T2, T3, bool>> Not(Expression`1<Func`4<T1, T2, T3, bool>> exp, bool condition);
    [ExtensionAttribute]
public static Expression`1<Func`5<T1, T2, T3, T4, bool>> And(Expression`1<Func`5<T1, T2, T3, T4, bool>> exp1, Expression`1<Func`5<T1, T2, T3, T4, bool>> exp2);
    [ExtensionAttribute]
public static Expression`1<Func`5<T1, T2, T3, T4, bool>> And(Expression`1<Func`5<T1, T2, T3, T4, bool>> exp1, bool condition, Expression`1<Func`5<T1, T2, T3, T4, bool>> exp2);
    [ExtensionAttribute]
public static Expression`1<Func`5<T1, T2, T3, T4, bool>> Or(Expression`1<Func`5<T1, T2, T3, T4, bool>> exp1, Expression`1<Func`5<T1, T2, T3, T4, bool>> exp2);
    [ExtensionAttribute]
public static Expression`1<Func`5<T1, T2, T3, T4, bool>> Or(Expression`1<Func`5<T1, T2, T3, T4, bool>> exp1, bool condition, Expression`1<Func`5<T1, T2, T3, T4, bool>> exp2);
    [ExtensionAttribute]
public static Expression`1<Func`5<T1, T2, T3, T4, bool>> Not(Expression`1<Func`5<T1, T2, T3, T4, bool>> exp, bool condition);
    [ExtensionAttribute]
public static Expression`1<Func`6<T1, T2, T3, T4, T5, bool>> And(Expression`1<Func`6<T1, T2, T3, T4, T5, bool>> exp1, Expression`1<Func`6<T1, T2, T3, T4, T5, bool>> exp2);
    [ExtensionAttribute]
public static Expression`1<Func`6<T1, T2, T3, T4, T5, bool>> And(Expression`1<Func`6<T1, T2, T3, T4, T5, bool>> exp1, bool condition, Expression`1<Func`6<T1, T2, T3, T4, T5, bool>> exp2);
    [ExtensionAttribute]
public static Expression`1<Func`6<T1, T2, T3, T4, T5, bool>> Or(Expression`1<Func`6<T1, T2, T3, T4, T5, bool>> exp1, Expression`1<Func`6<T1, T2, T3, T4, T5, bool>> exp2);
    [ExtensionAttribute]
public static Expression`1<Func`6<T1, T2, T3, T4, T5, bool>> Or(Expression`1<Func`6<T1, T2, T3, T4, T5, bool>> exp1, bool condition, Expression`1<Func`6<T1, T2, T3, T4, T5, bool>> exp2);
    [ExtensionAttribute]
public static Expression`1<Func`6<T1, T2, T3, T4, T5, bool>> Not(Expression`1<Func`6<T1, T2, T3, T4, T5, bool>> exp, bool condition);
    [ExtensionAttribute]
public static bool IsParameter(Expression exp);
    [ExtensionAttribute]
public static ParameterExpression GetParameter(Expression exp);
    [ExtensionAttribute]
public static bool IsStringJoin(MethodCallExpression exp, Expression& tolistObjectExpOut, MethodInfo& toListMethodOut, LambdaExpression& toListArgs0Out);
    [ExtensionAttribute]
public static object GetConstExprValue(Expression exp);
}
internal class System.Linq.Expressions.NewExpressionVisitor : ExpressionVisitor {
    private ParameterExpression[] _newParameters;
    private ParameterExpression[] _oldParameters;
    public NewExpressionVisitor(ParameterExpression newParam, ParameterExpression oldParam);
    public NewExpressionVisitor(ParameterExpression[] newParams, ParameterExpression[] oldParams);
    public Expression Replace(Expression exp);
    protected virtual Expression VisitParameter(ParameterExpression node);
}
internal class System.Linq.Expressions.TestParameterExpressionVisitor : ExpressionVisitor {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <Result>k__BackingField;
    public bool Result { get; private set; }
    [CompilerGeneratedAttribute]
public bool get_Result();
    [CompilerGeneratedAttribute]
private void set_Result(bool value);
    protected virtual Expression VisitParameter(ParameterExpression node);
}
