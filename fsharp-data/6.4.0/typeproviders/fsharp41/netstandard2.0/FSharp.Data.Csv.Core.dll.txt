[CompilationRepresentationAttribute]
[CompilationMappingAttribute]
public static class FSharp.Data.CsvExtensionsModule : object {
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static string op_Dynamic(CsvRow csvRow, string columnName);
}
[CompilationMappingAttribute]
public class FSharp.Data.CsvFile : CsvFile`1<CsvRow> {
    internal IDictionary`2<string, int> headerDic;
    internal int init@46-1;
    internal CsvFile(Func`1<TextReader> readerFunc, FSharpOption`1<string> separators, FSharpOption`1<char> quote, FSharpOption`1<bool> hasHeaders, FSharpOption`1<bool> ignoreErrors, FSharpOption`1<int> skipRows);
    public int GetColumnIndex(string columnName);
    public FSharpOption`1<int> TryGetColumnIndex(string columnName);
    public static CsvFile Parse(string text, FSharpOption`1<string> separators, FSharpOption`1<char> quote, FSharpOption`1<bool> hasHeaders, FSharpOption`1<bool> ignoreErrors, FSharpOption`1<int> skipRows);
    public static CsvFile Load(Stream stream, FSharpOption`1<string> separators, FSharpOption`1<char> quote, FSharpOption`1<bool> hasHeaders, FSharpOption`1<bool> ignoreErrors, FSharpOption`1<int> skipRows);
    public static CsvFile Load(TextReader reader, FSharpOption`1<string> separators, FSharpOption`1<char> quote, FSharpOption`1<bool> hasHeaders, FSharpOption`1<bool> ignoreErrors, FSharpOption`1<int> skipRows);
    public static CsvFile Load(string uri, FSharpOption`1<string> separators, FSharpOption`1<char> quote, FSharpOption`1<bool> hasHeaders, FSharpOption`1<bool> ignoreErrors, FSharpOption`1<int> skipRows, FSharpOption`1<Encoding> encoding);
    public static FSharpAsync`1<CsvFile> AsyncLoad(string uri, FSharpOption`1<string> separators, FSharpOption`1<char> quote, FSharpOption`1<bool> hasHeaders, FSharpOption`1<bool> ignoreErrors, FSharpOption`1<int> skipRows, FSharpOption`1<Encoding> encoding);
}
[DefaultMemberAttribute("Item")]
[StructuredFormatDisplayAttribute("{Columns}")]
[CompilationMappingAttribute]
public class FSharp.Data.CsvRow : object {
    internal CsvFile parent;
    internal String[] columns;
    public String[] Columns { get; }
    public string Item { get; }
    public string Item { get; }
    public CsvRow(CsvFile parent, String[] columns);
    public String[] get_Columns();
    public string GetColumn(int index);
    public string GetColumn(string columnName);
    public string get_Item(int index);
    public string get_Item(string columnName);
}
[CompilationMappingAttribute]
public class FSharp.Data.Runtime.CsvFile`1 : object {
    internal string separators;
    internal IEnumerable`1<RowType> rows;
    internal Func`2<RowType, String[]> rowToStringArray;
    internal char quote;
    internal int numberOfColumns;
    internal FSharpOption`1<String[]> headers;
    internal IDisposable disposer;
    internal int init@244;
    public IEnumerable`1<RowType> Rows { get; }
    public FSharpOption`1<String[]> Headers { get; }
    public int NumberOfColumns { get; }
    public string Separators { get; }
    public char Quote { get; }
    internal CsvFile`1(Func`2<RowType, String[]> rowToStringArray, IDisposable disposer, IEnumerable`1<RowType> rows, FSharpOption`1<String[]> headers, int numberOfColumns, string separators, char quote);
    public CsvFile`1(Func`3<object, String[], RowType> stringArrayToRow, Func`2<RowType, String[]> rowToStringArray, Func`1<TextReader> readerFunc, string separators, char quote, bool hasHeaders, bool ignoreErrors, int skipRows);
    public IEnumerable`1<RowType> get_Rows();
    public FSharpOption`1<String[]> get_Headers();
    public int get_NumberOfColumns();
    public string get_Separators();
    public char get_Quote();
    [EditorBrowsableAttribute("1")]
[CompilerMessageAttribute("This method is intended for use in generated code only.", "10001")]
public static CsvFile`1<RowType> CreateEmpty(Func`2<RowType, String[]> rowToStringArray, IEnumerable`1<RowType> rows, FSharpOption`1<String[]> headers, int numberOfColumns, string separators, char quote);
    [EditorBrowsableAttribute("1")]
[CompilerMessageAttribute("This method is intended for use in generated code only.", "10001")]
public static CsvFile`1<RowType> Create(Func`3<object, String[], RowType> stringArrayToRow, Func`2<RowType, String[]> rowToStringArray, TextReader reader, string separators, char quote, bool hasHeaders, bool ignoreErrors, int skipRows, bool cacheRows);
    [EditorBrowsableAttribute("1")]
[CompilerMessageAttribute("This method is intended for use in generated code only.", "10001")]
public static RowType[] ParseRows(string text, Func`3<object, String[], RowType> stringArrayToRow, string separators, char quote, bool ignoreErrors);
    public void Save(TextWriter writer, FSharpOption`1<char> separator, FSharpOption`1<char> quote);
    public void Save(Stream stream, FSharpOption`1<char> separator, FSharpOption`1<char> quote);
    public void Save(string path, FSharpOption`1<char> separator, FSharpOption`1<char> quote);
    public string SaveToString(FSharpOption`1<char> separator, FSharpOption`1<char> quote);
    internal CsvFile`1<RowType> withRows(IEnumerable`1<RowType> rows);
    internal CsvFile`1<RowType> mapRows(FSharpFunc`2<IEnumerable`1<RowType>, a> f);
    public CsvFile`1<RowType> Cache();
    public CsvFile`1<RowType> Map(Func`2<RowType, RowType> mapping);
    public CsvFile`1<RowType> Filter(Func`2<RowType, bool> predicate);
    public CsvFile`1<RowType> Take(int count);
    public CsvFile`1<RowType> TakeWhile(Func`2<RowType, bool> predicate);
    public CsvFile`1<RowType> Skip(int count);
    public CsvFile`1<RowType> SkipWhile(Func`2<RowType, bool> predicate);
    public CsvFile`1<RowType> Truncate(int count);
    public CsvFile`1<RowType> Append(IEnumerable`1<RowType> rows);
    private virtual override void System.IDisposable.Dispose();
}
[AutoOpenAttribute]
[CompilationMappingAttribute]
internal static class FSharp.Data.Runtime.CsvHelpers : object {
    [CompilerGeneratedAttribute]
internal static int GetHashCode$cont@89(IEqualityComparer comp, ParsedCsvLines this, Unit unitVar);
    [CompilerGeneratedAttribute]
internal static bool Equals$cont@89(ParsedCsvLines this, ParsedCsvLines that, IEqualityComparer comp, Unit unitVar);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal static ParsedCsvLines parseIntoLines(FSharpFunc`2<Unit, TextReader> newReader, string separators, char quote, bool hasHeaders, int skipRows);
    internal static bool ignoreRow(String[] untypedRow);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal static IEnumerable`1<a> parseIntoTypedRows(FSharpFunc`2<Unit, TextReader> newReader, bool ignoreErrors, FSharpFunc`2<String[], a> stringArrayToRow, ParsedCsvLines _arg1);
}
[CompilationMappingAttribute]
public static class FSharp.Data.Runtime.CsvInference : object {
    [CompilationMappingAttribute]
internal static IDictionary`2<string, Tuple`2<Type, TypeWrapper>> nameToTypeForCsv { get; }
    [CompilationMappingAttribute]
internal static FSharpList`1<Tuple`2<string, Tuple`2<Type, TypeWrapper>>> arg@1 { get; }
    [CompilationMappingAttribute]
internal static Lazy`1<Regex> nameAndTypeRegex { get; }
    [CompilationMappingAttribute]
internal static Lazy`1<Regex> overrideByNameRegex { get; }
    internal static IDictionary`2<string, Tuple`2<Type, TypeWrapper>> get_nameToTypeForCsv();
    internal static FSharpList`1<Tuple`2<string, Tuple`2<Type, TypeWrapper>>> get_arg@1();
    internal static Lazy`1<Regex> get_nameAndTypeRegex();
    internal static Lazy`1<Regex> get_overrideByNameRegex();
    [CompilerGeneratedAttribute]
internal static int GetHashCode$cont@49-1(IEqualityComparer comp, SchemaParseResult this, Unit unitVar);
    [CompilerGeneratedAttribute]
internal static bool Equals$cont@49-1(SchemaParseResult this, SchemaParseResult that, IEqualityComparer comp, Unit unitVar);
    [CompilerGeneratedAttribute]
internal static bool Equals$cont@49-2(SchemaParseResult this, SchemaParseResult obj, Unit unitVar);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal static SchemaParseResult parseSchemaItem(IUnitsOfMeasureProvider unitsOfMeasureProvider, string str, bool forSchemaOverride);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal static InferedType inferCellType(IUnitsOfMeasureProvider unitsOfMeasureProvider, bool preferOptionals, String[] missingValues, InferenceMode' inferenceMode, CultureInfo cultureInfo, FSharpOption`1<Type> unit, string value);
    internal static FSharpOption`1<Unit> |Comma|_|@153(int chr);
    internal static FSharpOption`1<Unit> |Quote|_|@154(int chr);
    internal static void iter@157(StringReader reader, List`1<string> schemas, StringBuilder chars, Unit unitVar0);
    internal static List`1<string> readSchema@149(StringReader reader);
    [CompilerGeneratedAttribute]
internal static FSharpOption`1[] schema$cont@185(string schema, IUnitsOfMeasureProvider unitsOfMeasureProvider, FSharpFunc`2<string, string> makeUnique, String[] headers, Unit unitVar);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal static Tuple`2<Tuple`2[], FSharpOption`1[]> parseHeaders(FSharpOption`1<String[]> headers, int numberOfColumns, string schema, IUnitsOfMeasureProvider unitsOfMeasureProvider);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal static Tuple`2<InferedType, FSharpOption`1[]> inferType(Tuple`2[] headerNamesAndUnits, FSharpOption`1[] schema, IEnumerable`1<String[]> rows, int inferRows, String[] missingValues, InferenceMode' inferenceMode, CultureInfo cultureInfo, bool assumeMissingValues, bool preferOptionals, IUnitsOfMeasureProvider unitsOfMeasureProvider);
    [CompilerGeneratedAttribute]
internal static PrimitiveInferedProperty getFields$cont@363(bool preferOptionals, InferedProperty field, Unit unitVar);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal static FSharpList`1<PrimitiveInferedProperty> getFields(bool preferOptionals, InferedType inferedType, FSharpOption`1[] schema);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal static FSharpList`1<PrimitiveInferedProperty> inferColumnTypes(Tuple`2[] headerNamesAndUnits, FSharpOption`1[] schema, IEnumerable`1<String[]> rows, int inferRows, String[] missingValues, InferenceMode' inferenceMode, CultureInfo cultureInfo, bool assumeMissingValues, bool preferOptionals, IUnitsOfMeasureProvider unitsOfMeasureProvider);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal static FSharpList`1<PrimitiveInferedProperty> CsvFile.InferColumnTypes(CsvFile x, int inferRows, String[] missingValues, InferenceMode' inferenceMode, CultureInfo cultureInfo, string schema, bool assumeMissingValues, bool preferOptionals, IUnitsOfMeasureProvider unitsOfMeasureProvider);
}
[CompilationMappingAttribute]
internal static class FSharp.Data.Runtime.CsvReader : object {
    internal static StringBuilder readString@41(TextReader reader, char quote, StringBuilder chars);
    internal static FSharpList`1<string> readLine@52(TextReader reader, char quote, Char[] separators, FSharpList`1<string> data, StringBuilder chars, int current);
    internal static IEnumerable`1<Tuple`2<String[], int>> readLines@66(TextReader reader, char quote, Char[] separators, int lineNumber);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal static IEnumerable`1<Tuple`2<String[], int>> readCsvFile(TextReader reader, string separators, char quote);
}
[ExtensionAttribute]
[CompilationMappingAttribute]
public class FSharp.Data.StringExtensions : object {
    [ExtensionAttribute]
public static int AsInteger(string x, FSharpOption`1<CultureInfo> cultureInfo);
    [ExtensionAttribute]
public static long AsInteger64(string x, FSharpOption`1<CultureInfo> cultureInfo);
    [ExtensionAttribute]
public static decimal AsDecimal(string x, FSharpOption`1<CultureInfo> cultureInfo);
    [ExtensionAttribute]
public static double AsFloat(string x, FSharpOption`1<CultureInfo> cultureInfo, FSharpOption`1<String[]> missingValues);
    [ExtensionAttribute]
public static bool AsBoolean(string x);
    [ExtensionAttribute]
public static DateTime AsDateTime(string x, FSharpOption`1<CultureInfo> cultureInfo);
    [ExtensionAttribute]
public static DateTimeOffset AsDateTimeOffset(string x, FSharpOption`1<CultureInfo> cultureInfo);
    [ExtensionAttribute]
public static TimeSpan AsTimeSpan(string x, FSharpOption`1<CultureInfo> cultureInfo);
    [ExtensionAttribute]
public static Guid AsGuid(string x);
}
[CompilationMappingAttribute]
internal static class System.AssemblyVersionInformation : object {
    [LiteralAttribute]
[DebuggerBrowsableAttribute("0")]
internal static string AssemblyTitle;
    [LiteralAttribute]
[DebuggerBrowsableAttribute("0")]
internal static string AssemblyProduct;
    [LiteralAttribute]
[DebuggerBrowsableAttribute("0")]
internal static string AssemblyDescription;
    [LiteralAttribute]
[DebuggerBrowsableAttribute("0")]
internal static string AssemblyVersion;
    [LiteralAttribute]
[DebuggerBrowsableAttribute("0")]
internal static string AssemblyFileVersion;
}
