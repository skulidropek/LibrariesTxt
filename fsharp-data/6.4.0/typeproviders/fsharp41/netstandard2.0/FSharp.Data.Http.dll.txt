[CompilationMappingAttribute]
internal static class FSharp.Data.CookieHandling : object {
    internal static bool isInvalidCookie@1879(string cookieStr);
    internal static FSharpFunc`2<string, string> stripPrefix@1911(string prefix);
    [CompilerGeneratedAttribute]
internal static void createCookie$cont@1932(Cookie cookie, string cookiePart, Unit unitVar);
    internal static Cookie createCookie@1917(String[] cookieParts);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal static Tuple`2[] getAllCookiesFromHeader(string header, Uri responseUri);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal static FSharpMap`2<string, string> getCookiesAndManageCookieContainer(Uri uri, Uri responseUri, FSharpMap`2<string, string> headers, CookieContainer cookieContainer, bool addCookiesToCookieContainer, bool silentCookieErrors);
}
[AbstractClassAttribute]
[CompilationMappingAttribute]
public abstract class FSharp.Data.Http : object {
    internal static Regex charsetRegex;
    internal static int init@2006;
    private static Http();
    internal static string EncodeFormData(string query);
    internal static string AppendQueryToUrl(string url, FSharpList`1<Tuple`2<string, string>> query);
    internal static FSharpAsync`1<b> InnerRequest(string url, FSharpFunc`2<string, FSharpFunc`2<int, FSharpFunc`2<string, FSharpFunc`2<string, FSharpFunc`2<FSharpOption`1<a>, FSharpFunc`2<FSharpMap`2<string, string>, FSharpFunc`2<FSharpMap`2<string, string>, FSharpFunc`2<Stream, FSharpAsync`1<b>>>>>>>>> toHttpResponse, FSharpOption`1<FSharpList`1<Tuple`2<string, string>>> query, FSharpOption`1<IEnumerable`1<Tuple`2<string, string>>> headers, FSharpOption`1<string> httpMethod, FSharpOption`1<HttpRequestBody> body, FSharpOption`1<IEnumerable`1<Tuple`2<string, string>>> cookies, FSharpOption`1<CookieContainer> cookieContainer, FSharpOption`1<bool> silentHttpErrors, FSharpOption`1<bool> silentCookieErrors, FSharpOption`1<a> responseEncodingOverride, FSharpOption`1<FSharpFunc`2<HttpWebRequest, HttpWebRequest>> customizeHttpRequest, FSharpOption`1<int> timeout);
    public static FSharpAsync`1<HttpResponse> AsyncRequest(string url, FSharpOption`1<FSharpList`1<Tuple`2<string, string>>> query, FSharpOption`1<IEnumerable`1<Tuple`2<string, string>>> headers, FSharpOption`1<string> httpMethod, FSharpOption`1<HttpRequestBody> body, FSharpOption`1<IEnumerable`1<Tuple`2<string, string>>> cookies, FSharpOption`1<CookieContainer> cookieContainer, FSharpOption`1<bool> silentHttpErrors, FSharpOption`1<bool> silentCookieErrors, FSharpOption`1<string> responseEncodingOverride, FSharpOption`1<FSharpFunc`2<HttpWebRequest, HttpWebRequest>> customizeHttpRequest, FSharpOption`1<int> timeout);
    public static FSharpAsync`1<string> AsyncRequestString(string url, FSharpOption`1<FSharpList`1<Tuple`2<string, string>>> query, FSharpOption`1<IEnumerable`1<Tuple`2<string, string>>> headers, FSharpOption`1<string> httpMethod, FSharpOption`1<HttpRequestBody> body, FSharpOption`1<IEnumerable`1<Tuple`2<string, string>>> cookies, FSharpOption`1<CookieContainer> cookieContainer, FSharpOption`1<bool> silentHttpErrors, FSharpOption`1<bool> silentCookieErrors, FSharpOption`1<string> responseEncodingOverride, FSharpOption`1<FSharpFunc`2<HttpWebRequest, HttpWebRequest>> customizeHttpRequest, FSharpOption`1<int> timeout);
    public static FSharpAsync`1<HttpResponseWithStream> AsyncRequestStream(string url, FSharpOption`1<FSharpList`1<Tuple`2<string, string>>> query, FSharpOption`1<IEnumerable`1<Tuple`2<string, string>>> headers, FSharpOption`1<string> httpMethod, FSharpOption`1<HttpRequestBody> body, FSharpOption`1<IEnumerable`1<Tuple`2<string, string>>> cookies, FSharpOption`1<CookieContainer> cookieContainer, FSharpOption`1<bool> silentHttpErrors, FSharpOption`1<bool> silentCookieErrors, FSharpOption`1<FSharpFunc`2<HttpWebRequest, HttpWebRequest>> customizeHttpRequest, FSharpOption`1<int> timeout);
    public static HttpResponse Request(string url, FSharpOption`1<FSharpList`1<Tuple`2<string, string>>> query, FSharpOption`1<IEnumerable`1<Tuple`2<string, string>>> headers, FSharpOption`1<string> httpMethod, FSharpOption`1<HttpRequestBody> body, FSharpOption`1<IEnumerable`1<Tuple`2<string, string>>> cookies, FSharpOption`1<CookieContainer> cookieContainer, FSharpOption`1<bool> silentHttpErrors, FSharpOption`1<bool> silentCookieErrors, FSharpOption`1<string> responseEncodingOverride, FSharpOption`1<FSharpFunc`2<HttpWebRequest, HttpWebRequest>> customizeHttpRequest, FSharpOption`1<int> timeout);
    public static string RequestString(string url, FSharpOption`1<FSharpList`1<Tuple`2<string, string>>> query, FSharpOption`1<IEnumerable`1<Tuple`2<string, string>>> headers, FSharpOption`1<string> httpMethod, FSharpOption`1<HttpRequestBody> body, FSharpOption`1<IEnumerable`1<Tuple`2<string, string>>> cookies, FSharpOption`1<CookieContainer> cookieContainer, FSharpOption`1<bool> silentHttpErrors, FSharpOption`1<bool> silentCookieErrors, FSharpOption`1<string> responseEncodingOverride, FSharpOption`1<FSharpFunc`2<HttpWebRequest, HttpWebRequest>> customizeHttpRequest, FSharpOption`1<int> timeout);
    public static HttpResponseWithStream RequestStream(string url, FSharpOption`1<FSharpList`1<Tuple`2<string, string>>> query, FSharpOption`1<IEnumerable`1<Tuple`2<string, string>>> headers, FSharpOption`1<string> httpMethod, FSharpOption`1<HttpRequestBody> body, FSharpOption`1<IEnumerable`1<Tuple`2<string, string>>> cookies, FSharpOption`1<CookieContainer> cookieContainer, FSharpOption`1<bool> silentHttpErrors, FSharpOption`1<bool> silentCookieErrors, FSharpOption`1<FSharpFunc`2<HttpWebRequest, HttpWebRequest>> customizeHttpRequest, FSharpOption`1<int> timeout);
}
[CompilationMappingAttribute]
public static class FSharp.Data.HttpContentTypes : object {
    [LiteralAttribute]
[DebuggerBrowsableAttribute("0")]
public static string Any;
    [LiteralAttribute]
[DebuggerBrowsableAttribute("0")]
public static string Text;
    [LiteralAttribute]
[DebuggerBrowsableAttribute("0")]
public static string Binary;
    [LiteralAttribute]
[DebuggerBrowsableAttribute("0")]
public static string Zip;
    [LiteralAttribute]
[DebuggerBrowsableAttribute("0")]
public static string GZip;
    [LiteralAttribute]
[DebuggerBrowsableAttribute("0")]
public static string FormValues;
    [LiteralAttribute]
[DebuggerBrowsableAttribute("0")]
public static string Json;
    [LiteralAttribute]
[DebuggerBrowsableAttribute("0")]
public static string JavaScript;
    [LiteralAttribute]
[DebuggerBrowsableAttribute("0")]
public static string Xml;
    [LiteralAttribute]
[DebuggerBrowsableAttribute("0")]
public static string Rss;
    [LiteralAttribute]
[DebuggerBrowsableAttribute("0")]
public static string Atom;
    [LiteralAttribute]
[DebuggerBrowsableAttribute("0")]
public static string Rdf;
    [LiteralAttribute]
[DebuggerBrowsableAttribute("0")]
public static string Html;
    [LiteralAttribute]
[DebuggerBrowsableAttribute("0")]
public static string XHtml;
    [LiteralAttribute]
[DebuggerBrowsableAttribute("0")]
public static string Soap;
    [LiteralAttribute]
[DebuggerBrowsableAttribute("0")]
public static string Csv;
    [LiteralAttribute]
[DebuggerBrowsableAttribute("0")]
public static string JsonRpc;
    private static HttpContentTypes();
    public static string Multipart(string boundary);
}
[CompilationMappingAttribute]
public static class FSharp.Data.HttpEncodings : object {
    [CompilationMappingAttribute]
public static Encoding PostDefaultEncoding { get; }
    [CompilationMappingAttribute]
public static Encoding ResponseDefaultEncoding { get; }
    public static Encoding get_PostDefaultEncoding();
    public static Encoding get_ResponseDefaultEncoding();
    internal static Encoding getEncoding(string encodingStr);
}
[AutoOpenAttribute]
[CompilationMappingAttribute]
internal static class FSharp.Data.HttpHelpers : object {
    [CompilationMappingAttribute]
internal static bool runningOnMono { get; }
    internal static void copy@1402(Stream inputStream, Byte[] buffer, MemoryStream outputStream, Unit unitVar0);
    internal static FSharpAsync`1<MemoryStream> asyncRead(Stream stream);
    internal static bool takeIfSeekable@1544(FSharpRef`1<bool> seekable, FSharpRef`1<long> length, Stream str);
    internal static FSharpOption`1<long> trySumLength@1540(IEnumerable`1<a> streams);
    internal static string printHeader@1559(string header, string value);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal static Stream writeMultipartFileItem(string boundary, IEnumerable`1<MultipartFileItem> parts, Encoding e);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal static Stream writeMultipart(string boundary, IEnumerable`1<MultipartItem> parts, Encoding e);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal static FSharpAsync`1<Unit> asyncCopy(Stream source, Stream dest);
    internal static bool get_runningOnMono();
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal static FSharpAsync`1<Unit> writeBody(HttpWebRequest req, Stream data);
    internal static a reraisePreserveStackTrace(Exception e);
    [CompilerGeneratedAttribute]
internal static FSharpAsync`1<a> catchHandler@1(Exception _arg1);
    internal static FSharpAsync`1<a> augmentWebExceptionsWithDetails(FSharpFunc`2<Unit, FSharpAsync`1<a>> f);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal static void checkForRepeatedHeaders(FSharpList`1<Tuple`2<a, b>> visitedHeaders, FSharpList`1<Tuple`2<a, b>> remainingHeaders);
    internal static void action@1(HttpWebRequest req, FSharpRef`1<bool> hasContentType, string header, string value);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal static bool setHeaders(FSharpList`1<Tuple`2<string, string>> headers, HttpWebRequest req);
    [CompilerGeneratedAttribute]
internal static FSharpAsync`1<WebResponse> catchHandler@1-1(HttpWebRequest req, Exception _arg2);
    internal static FSharpAsync`1<WebResponse> getResponseAsync@1778(FSharpAsync`1<WebResponse> getResponseFromBeginEnd, HttpWebRequest req);
    [CompilerGeneratedAttribute]
internal static FSharpAsync`1<WebResponse> catchHandler@1-2(Exception _arg3);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal static FSharpAsync`1<WebResponse> getResponse(HttpWebRequest req, FSharpOption`1<bool> silentHttpErrors);
    internal static bool isText@1828(string mimeType);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal static FSharpAsync`1<HttpResponse> toHttpResponse(bool forceText, string responseUrl, int statusCode, string contentType, string characterSet, FSharpOption`1<string> responseEncodingOverride, FSharpMap`2<string, string> cookies, FSharpMap`2<string, string> headers, Stream stream);
}
[CompilationMappingAttribute]
public static class FSharp.Data.HttpMethod : object {
    public static string Options { get; }
    public static string Get { get; }
    public static string Head { get; }
    public static string Post { get; }
    public static string Put { get; }
    public static string Delete { get; }
    public static string Trace { get; }
    public static string Connect { get; }
    public static string PropFind { get; }
    public static string PropPatch { get; }
    public static string MkCol { get; }
    public static string Copy { get; }
    public static string Move { get; }
    public static string Lock { get; }
    public static string Unlock { get; }
    public static string Patch { get; }
    [CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
public static string get_Options();
    [CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
public static string get_Get();
    [CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
public static string get_Head();
    [CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
public static string get_Post();
    [CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
public static string get_Put();
    [CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
public static string get_Delete();
    [CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
public static string get_Trace();
    [CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
public static string get_Connect();
    [CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
public static string get_PropFind();
    [CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
public static string get_PropPatch();
    [CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
public static string get_MkCol();
    [CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
public static string get_Copy();
    [CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
public static string get_Move();
    [CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
public static string get_Lock();
    [CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
public static string get_Unlock();
    [CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
public static string get_Patch();
}
[DebuggerDisplayAttribute("{__DebugDisplay(),nq}")]
[CompilationMappingAttribute]
public abstract class FSharp.Data.HttpRequestBody : object {
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
internal int _tag;
    [CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
[DebuggerBrowsableAttribute("0")]
public int Tag { get; }
    [CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
[DebuggerBrowsableAttribute("0")]
public bool IsTextRequest { get; }
    [CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
[DebuggerBrowsableAttribute("0")]
public bool IsBinaryUpload { get; }
    [CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
[DebuggerBrowsableAttribute("0")]
public bool IsFormValues { get; }
    [CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
[DebuggerBrowsableAttribute("0")]
public bool IsMultipart { get; }
    [CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
[DebuggerBrowsableAttribute("0")]
public bool IsMultipartFormData { get; }
    [CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
internal HttpRequestBody(int _tag);
    [CompilationMappingAttribute]
public static HttpRequestBody NewTextRequest(string item);
    [CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
public bool get_IsTextRequest();
    [CompilationMappingAttribute]
public static HttpRequestBody NewBinaryUpload(Byte[] item);
    [CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
public bool get_IsBinaryUpload();
    [CompilationMappingAttribute]
public static HttpRequestBody NewFormValues(IEnumerable`1<Tuple`2<string, string>> item);
    [CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
public bool get_IsFormValues();
    [CompilationMappingAttribute]
public static HttpRequestBody NewMultipart(string _boundary, IEnumerable`1<MultipartItem> _parts);
    [CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
public bool get_IsMultipart();
    [CompilationMappingAttribute]
public static HttpRequestBody NewMultipartFormData(string _boundary, IEnumerable`1<MultipartFormDataItem> _parts);
    [CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
public bool get_IsMultipartFormData();
    [CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
public int get_Tag();
    [CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
internal object __DebugDisplay();
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
public sealed virtual int GetHashCode(IEqualityComparer comp);
    [CompilerGeneratedAttribute]
public sealed virtual int GetHashCode();
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(object obj, IEqualityComparer comp);
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(HttpRequestBody obj);
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(object obj);
}
[CompilationMappingAttribute]
public static class FSharp.Data.HttpRequestHeaders : object {
    public static Tuple`2<string, string> Accept(string contentType);
    public static Tuple`2<string, string> AcceptCharset(string characterSets);
    public static Tuple`2<string, string> AcceptDatetime(DateTime dateTime);
    public static Tuple`2<string, string> AcceptEncoding(string encoding);
    public static Tuple`2<string, string> AcceptLanguage(string language);
    public static Tuple`2<string, string> Allow(string methods);
    public static Tuple`2<string, string> Authorization(string credentials);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static Tuple`2<string, string> BasicAuth(string username, string password);
    public static Tuple`2<string, string> CacheControl(string control);
    public static Tuple`2<string, string> Connection(string connection);
    public static Tuple`2<string, string> ContentDisposition(string placement, FSharpOption`1<string> name, FSharpOption`1<string> fileName);
    public static Tuple`2<string, string> ContentEncoding(string encoding);
    public static Tuple`2<string, string> ContentLanguage(string language);
    public static Tuple`2<string, string> ContentLocation(string location);
    public static Tuple`2<string, string> ContentMD5(string md5sum);
    public static Tuple`2<string, string> ContentRange(string range);
    public static Tuple`2<string, string> ContentType(string contentType);
    public static Tuple`2<string, string> ContentTypeWithEncoding(string contentType, Encoding charset);
    public static Tuple`2<string, string> Date(DateTime date);
    public static Tuple`2<string, string> Expect(string behaviors);
    public static Tuple`2<string, string> Expires(DateTime dateTime);
    public static Tuple`2<string, string> From(string email);
    public static Tuple`2<string, string> Host(string host);
    public static Tuple`2<string, string> IfMatch(string entity);
    public static Tuple`2<string, string> IfModifiedSince(DateTime dateTime);
    public static Tuple`2<string, string> IfNoneMatch(string etag);
    public static Tuple`2<string, string> IfRange(string range);
    public static Tuple`2<string, string> IfUnmodifiedSince(DateTime dateTime);
    public static Tuple`2<string, string> KeepAlive(string keepAlive);
    public static Tuple`2<string, string> LastModified(DateTime dateTime);
    public static Tuple`2<string, string> MaxForwards(int count);
    public static Tuple`2<string, string> Origin(string origin);
    public static Tuple`2<string, string> Pragma(string pragma);
    public static Tuple`2<string, string> Prefer(string prefer);
    public static Tuple`2<string, string> ProxyAuthorization(string credentials);
    public static Tuple`2<string, string> Range(long start, long finish);
    public static Tuple`2<string, string> Referer(string referer);
    public static Tuple`2<string, string> TE(string te);
    public static Tuple`2<string, string> Trailer(string trailer);
    public static Tuple`2<string, string> TransferEncoding(string directive);
    public static Tuple`2<string, string> Translate(string translate);
    public static Tuple`2<string, string> Upgrade(string upgrade);
    public static Tuple`2<string, string> UserAgent(string userAgent);
    public static Tuple`2<string, string> Via(string server);
    public static Tuple`2<string, string> Warning(string message);
    public static Tuple`2<string, string> XHTTPMethodOverride(string httpMethod);
}
[CompilationMappingAttribute]
public class FSharp.Data.HttpResponse : object {
    [DebuggerBrowsableAttribute("0")]
internal HttpResponseBody Body@;
    [DebuggerBrowsableAttribute("0")]
internal int StatusCode@;
    [DebuggerBrowsableAttribute("0")]
internal string ResponseUrl@;
    [DebuggerBrowsableAttribute("0")]
internal FSharpMap`2<string, string> Headers@;
    [DebuggerBrowsableAttribute("0")]
internal FSharpMap`2<string, string> Cookies@;
    [CompilationMappingAttribute]
public HttpResponseBody Body { get; }
    [CompilationMappingAttribute]
public int StatusCode { get; }
    [CompilationMappingAttribute]
public string ResponseUrl { get; }
    [CompilationMappingAttribute]
public FSharpMap`2<string, string> Headers { get; }
    [CompilationMappingAttribute]
public FSharpMap`2<string, string> Cookies { get; }
    public HttpResponse(HttpResponseBody body, int statusCode, string responseUrl, FSharpMap`2<string, string> headers, FSharpMap`2<string, string> cookies);
    public HttpResponseBody get_Body();
    public int get_StatusCode();
    public string get_ResponseUrl();
    public FSharpMap`2<string, string> get_Headers();
    public FSharpMap`2<string, string> get_Cookies();
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
public sealed virtual int CompareTo(HttpResponse obj);
    [CompilerGeneratedAttribute]
public sealed virtual int CompareTo(object obj);
    [CompilerGeneratedAttribute]
public sealed virtual int CompareTo(object obj, IComparer comp);
    [CompilerGeneratedAttribute]
public sealed virtual int GetHashCode(IEqualityComparer comp);
    [CompilerGeneratedAttribute]
public sealed virtual int GetHashCode();
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(object obj, IEqualityComparer comp);
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(HttpResponse obj);
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(object obj);
}
[DebuggerDisplayAttribute("{__DebugDisplay(),nq}")]
[CompilationMappingAttribute]
public abstract class FSharp.Data.HttpResponseBody : object {
    [CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
[DebuggerBrowsableAttribute("0")]
public int Tag { get; }
    [CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
[DebuggerBrowsableAttribute("0")]
public bool IsText { get; }
    [CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
[DebuggerBrowsableAttribute("0")]
public bool IsBinary { get; }
    [CompilationMappingAttribute]
public static HttpResponseBody NewText(string item);
    [CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
public bool get_IsText();
    [CompilationMappingAttribute]
public static HttpResponseBody NewBinary(Byte[] item);
    [CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
public bool get_IsBinary();
    [CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
public int get_Tag();
    [CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
internal object __DebugDisplay();
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
public sealed virtual int CompareTo(HttpResponseBody obj);
    [CompilerGeneratedAttribute]
public sealed virtual int CompareTo(object obj);
    [CompilerGeneratedAttribute]
public sealed virtual int CompareTo(object obj, IComparer comp);
    [CompilerGeneratedAttribute]
public sealed virtual int GetHashCode(IEqualityComparer comp);
    [CompilerGeneratedAttribute]
public sealed virtual int GetHashCode();
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(object obj, IEqualityComparer comp);
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(HttpResponseBody obj);
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(object obj);
}
[CompilationMappingAttribute]
public static class FSharp.Data.HttpResponseHeaders : object {
    [LiteralAttribute]
[DebuggerBrowsableAttribute("0")]
public static string AccessControlAllowOrigin;
    [LiteralAttribute]
[DebuggerBrowsableAttribute("0")]
public static string AcceptRanges;
    [LiteralAttribute]
[DebuggerBrowsableAttribute("0")]
public static string Age;
    [LiteralAttribute]
[DebuggerBrowsableAttribute("0")]
public static string Allow;
    [LiteralAttribute]
[DebuggerBrowsableAttribute("0")]
public static string CacheControl;
    [LiteralAttribute]
[DebuggerBrowsableAttribute("0")]
public static string Connection;
    [LiteralAttribute]
[DebuggerBrowsableAttribute("0")]
public static string ContentEncoding;
    [LiteralAttribute]
[DebuggerBrowsableAttribute("0")]
public static string ContentLanguage;
    [LiteralAttribute]
[DebuggerBrowsableAttribute("0")]
public static string ContentLength;
    [LiteralAttribute]
[DebuggerBrowsableAttribute("0")]
public static string ContentLocation;
    [LiteralAttribute]
[DebuggerBrowsableAttribute("0")]
public static string ContentMD5;
    [LiteralAttribute]
[DebuggerBrowsableAttribute("0")]
public static string ContentDisposition;
    [LiteralAttribute]
[DebuggerBrowsableAttribute("0")]
public static string ContentRange;
    [LiteralAttribute]
[DebuggerBrowsableAttribute("0")]
public static string ContentType;
    [LiteralAttribute]
[DebuggerBrowsableAttribute("0")]
public static string Date;
    [LiteralAttribute]
[DebuggerBrowsableAttribute("0")]
public static string ETag;
    [LiteralAttribute]
[DebuggerBrowsableAttribute("0")]
public static string Expires;
    [LiteralAttribute]
[DebuggerBrowsableAttribute("0")]
public static string LastModified;
    [LiteralAttribute]
[DebuggerBrowsableAttribute("0")]
public static string Link;
    [LiteralAttribute]
[DebuggerBrowsableAttribute("0")]
public static string Location;
    [LiteralAttribute]
[DebuggerBrowsableAttribute("0")]
public static string P3P;
    [LiteralAttribute]
[DebuggerBrowsableAttribute("0")]
public static string Pragma;
    [LiteralAttribute]
[DebuggerBrowsableAttribute("0")]
public static string ProxyAuthenticate;
    [LiteralAttribute]
[DebuggerBrowsableAttribute("0")]
public static string Refresh;
    [LiteralAttribute]
[DebuggerBrowsableAttribute("0")]
public static string RetryAfter;
    [LiteralAttribute]
[DebuggerBrowsableAttribute("0")]
public static string Server;
    [LiteralAttribute]
[DebuggerBrowsableAttribute("0")]
public static string SetCookie;
    [LiteralAttribute]
[DebuggerBrowsableAttribute("0")]
public static string Status;
    [LiteralAttribute]
[DebuggerBrowsableAttribute("0")]
public static string StrictTransportSecurity;
    [LiteralAttribute]
[DebuggerBrowsableAttribute("0")]
public static string Trailer;
    [LiteralAttribute]
[DebuggerBrowsableAttribute("0")]
public static string TransferEncoding;
    [LiteralAttribute]
[DebuggerBrowsableAttribute("0")]
public static string Vary;
    [LiteralAttribute]
[DebuggerBrowsableAttribute("0")]
public static string Via;
    [LiteralAttribute]
[DebuggerBrowsableAttribute("0")]
public static string Warning;
    [LiteralAttribute]
[DebuggerBrowsableAttribute("0")]
public static string WWWAuthenticate;
    private static HttpResponseHeaders();
}
[CompilationMappingAttribute]
public class FSharp.Data.HttpResponseWithStream : object {
    [DebuggerBrowsableAttribute("0")]
internal Stream ResponseStream@;
    [DebuggerBrowsableAttribute("0")]
internal int StatusCode@;
    [DebuggerBrowsableAttribute("0")]
internal string ResponseUrl@;
    [DebuggerBrowsableAttribute("0")]
internal FSharpMap`2<string, string> Headers@;
    [DebuggerBrowsableAttribute("0")]
internal FSharpMap`2<string, string> Cookies@;
    [CompilationMappingAttribute]
public Stream ResponseStream { get; }
    [CompilationMappingAttribute]
public int StatusCode { get; }
    [CompilationMappingAttribute]
public string ResponseUrl { get; }
    [CompilationMappingAttribute]
public FSharpMap`2<string, string> Headers { get; }
    [CompilationMappingAttribute]
public FSharpMap`2<string, string> Cookies { get; }
    public HttpResponseWithStream(Stream responseStream, int statusCode, string responseUrl, FSharpMap`2<string, string> headers, FSharpMap`2<string, string> cookies);
    public Stream get_ResponseStream();
    public int get_StatusCode();
    public string get_ResponseUrl();
    public FSharpMap`2<string, string> get_Headers();
    public FSharpMap`2<string, string> get_Cookies();
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
public sealed virtual int GetHashCode(IEqualityComparer comp);
    [CompilerGeneratedAttribute]
public sealed virtual int GetHashCode();
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(object obj, IEqualityComparer comp);
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(HttpResponseWithStream obj);
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(object obj);
}
[CompilationMappingAttribute]
public static class FSharp.Data.HttpStatusCodes : object {
    [LiteralAttribute]
[DebuggerBrowsableAttribute("0")]
public static int Continue;
    [LiteralAttribute]
[DebuggerBrowsableAttribute("0")]
public static int SwitchingProtocols;
    [LiteralAttribute]
[DebuggerBrowsableAttribute("0")]
public static int Processing;
    [LiteralAttribute]
[DebuggerBrowsableAttribute("0")]
public static int EarlyHints;
    [LiteralAttribute]
[DebuggerBrowsableAttribute("0")]
public static int OK;
    [LiteralAttribute]
[DebuggerBrowsableAttribute("0")]
public static int Created;
    [LiteralAttribute]
[DebuggerBrowsableAttribute("0")]
public static int Accepted;
    [LiteralAttribute]
[DebuggerBrowsableAttribute("0")]
public static int NonAuthoritativeInformation;
    [LiteralAttribute]
[DebuggerBrowsableAttribute("0")]
public static int NoContent;
    [LiteralAttribute]
[DebuggerBrowsableAttribute("0")]
public static int ResetContent;
    [LiteralAttribute]
[DebuggerBrowsableAttribute("0")]
public static int PartialContent;
    [LiteralAttribute]
[DebuggerBrowsableAttribute("0")]
public static int MultiStatus;
    [LiteralAttribute]
[DebuggerBrowsableAttribute("0")]
public static int AlreadyReported;
    [LiteralAttribute]
[DebuggerBrowsableAttribute("0")]
public static int IMUsed;
    [LiteralAttribute]
[DebuggerBrowsableAttribute("0")]
public static int MultipleChoices;
    [LiteralAttribute]
[DebuggerBrowsableAttribute("0")]
public static int MovedPermanently;
    [LiteralAttribute]
[DebuggerBrowsableAttribute("0")]
public static int Found;
    [LiteralAttribute]
[DebuggerBrowsableAttribute("0")]
public static int SeeOther;
    [LiteralAttribute]
[DebuggerBrowsableAttribute("0")]
public static int NotModified;
    [LiteralAttribute]
[DebuggerBrowsableAttribute("0")]
public static int UseProxy;
    [LiteralAttribute]
[DebuggerBrowsableAttribute("0")]
public static int SwitchProxy;
    [LiteralAttribute]
[DebuggerBrowsableAttribute("0")]
public static int TemporaryRedirect;
    [LiteralAttribute]
[DebuggerBrowsableAttribute("0")]
public static int PermanentRedirect;
    [LiteralAttribute]
[DebuggerBrowsableAttribute("0")]
public static int BadRequest;
    [LiteralAttribute]
[DebuggerBrowsableAttribute("0")]
public static int Unauthorized;
    [LiteralAttribute]
[DebuggerBrowsableAttribute("0")]
public static int PaymentRequired;
    [LiteralAttribute]
[DebuggerBrowsableAttribute("0")]
public static int Forbidden;
    [LiteralAttribute]
[DebuggerBrowsableAttribute("0")]
public static int NotFound;
    [LiteralAttribute]
[DebuggerBrowsableAttribute("0")]
public static int MethodNotAllowed;
    [LiteralAttribute]
[DebuggerBrowsableAttribute("0")]
public static int NotAcceptable;
    [LiteralAttribute]
[DebuggerBrowsableAttribute("0")]
public static int ProxyAuthenticationRequired;
    [LiteralAttribute]
[DebuggerBrowsableAttribute("0")]
public static int RequestTimeout;
    [LiteralAttribute]
[DebuggerBrowsableAttribute("0")]
public static int Conflict;
    [LiteralAttribute]
[DebuggerBrowsableAttribute("0")]
public static int Gone;
    [LiteralAttribute]
[DebuggerBrowsableAttribute("0")]
public static int LengthRequired;
    [LiteralAttribute]
[DebuggerBrowsableAttribute("0")]
public static int PreconditionFailed;
    [LiteralAttribute]
[DebuggerBrowsableAttribute("0")]
public static int PayloadTooLarge;
    [LiteralAttribute]
[DebuggerBrowsableAttribute("0")]
public static int URITooLong;
    [LiteralAttribute]
[DebuggerBrowsableAttribute("0")]
public static int UnsupportedMediaType;
    [LiteralAttribute]
[DebuggerBrowsableAttribute("0")]
public static int RangeNotSatisfiable;
    [LiteralAttribute]
[DebuggerBrowsableAttribute("0")]
public static int ExpectationFailed;
    [LiteralAttribute]
[DebuggerBrowsableAttribute("0")]
public static int MisdirectedRequest;
    [LiteralAttribute]
[DebuggerBrowsableAttribute("0")]
public static int UnprocessableEntity;
    [LiteralAttribute]
[DebuggerBrowsableAttribute("0")]
public static int Locked;
    [LiteralAttribute]
[DebuggerBrowsableAttribute("0")]
public static int FailedDependency;
    [LiteralAttribute]
[DebuggerBrowsableAttribute("0")]
public static int UpgradeRequired;
    [LiteralAttribute]
[DebuggerBrowsableAttribute("0")]
public static int PreconditionRequired;
    [LiteralAttribute]
[DebuggerBrowsableAttribute("0")]
public static int TooManyRequests;
    [LiteralAttribute]
[DebuggerBrowsableAttribute("0")]
public static int RequestHeaderFieldsTooLarge;
    [LiteralAttribute]
[DebuggerBrowsableAttribute("0")]
public static int UnavailableForLegalReasons;
    [LiteralAttribute]
[DebuggerBrowsableAttribute("0")]
public static int InternalServerError;
    [LiteralAttribute]
[DebuggerBrowsableAttribute("0")]
public static int NotImplemented;
    [LiteralAttribute]
[DebuggerBrowsableAttribute("0")]
public static int BadGateway;
    [LiteralAttribute]
[DebuggerBrowsableAttribute("0")]
public static int ServiceUnavailable;
    [LiteralAttribute]
[DebuggerBrowsableAttribute("0")]
public static int GatewayTimeout;
    [LiteralAttribute]
[DebuggerBrowsableAttribute("0")]
public static int HTTPVersionNotSupported;
    [LiteralAttribute]
[DebuggerBrowsableAttribute("0")]
public static int VariantAlsoNegotiates;
    [LiteralAttribute]
[DebuggerBrowsableAttribute("0")]
public static int InsufficientStorage;
    [LiteralAttribute]
[DebuggerBrowsableAttribute("0")]
public static int LoopDetected;
    [LiteralAttribute]
[DebuggerBrowsableAttribute("0")]
public static int NotExtended;
    [LiteralAttribute]
[DebuggerBrowsableAttribute("0")]
public static int NetworkAuthenticationRequired;
    private static HttpStatusCodes();
}
[CompilationMappingAttribute]
public static class FSharp.Data.MimeTypes : object {
    [CompilationMappingAttribute]
internal static Tuple`2[] pairs { get; }
    [CompilationMappingAttribute]
internal static FSharpMap`2<string, string> map { get; }
    internal static Tuple`2[] get_pairs();
    internal static FSharpMap`2<string, string> get_map();
    public static FSharpOption`1<string> tryFind(string ext);
}
[DebuggerDisplayAttribute("{__DebugDisplay(),nq}")]
[CompilationMappingAttribute]
public class FSharp.Data.MultipartFileItem : object {
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
internal string _formField;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
internal FSharpOption`1<string> _filename;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
internal FSharpOption`1<string> _contentType;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
internal Stream _content;
    [CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
[DebuggerBrowsableAttribute("0")]
public int Tag { get; }
    [CompilationMappingAttribute]
[CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
public string formField { get; }
    [CompilationMappingAttribute]
[CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
public FSharpOption`1<string> filename { get; }
    [CompilationMappingAttribute]
[CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
public FSharpOption`1<string> contentType { get; }
    [CompilationMappingAttribute]
[CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
public Stream content { get; }
    [CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
internal MultipartFileItem(string _formField, FSharpOption`1<string> _filename, FSharpOption`1<string> _contentType, Stream _content);
    [CompilationMappingAttribute]
public static MultipartFileItem NewMultipartFileItem(string _formField, FSharpOption`1<string> _filename, FSharpOption`1<string> _contentType, Stream _content);
    [CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
public string get_formField();
    [CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
public FSharpOption`1<string> get_filename();
    [CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
public FSharpOption`1<string> get_contentType();
    [CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
public Stream get_content();
    [CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
public int get_Tag();
    [CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
internal object __DebugDisplay();
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
public sealed virtual int GetHashCode(IEqualityComparer comp);
    [CompilerGeneratedAttribute]
public sealed virtual int GetHashCode();
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(object obj, IEqualityComparer comp);
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(MultipartFileItem obj);
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(object obj);
}
[DebuggerDisplayAttribute("{__DebugDisplay(),nq}")]
[CompilationMappingAttribute]
public abstract class FSharp.Data.MultipartFormDataItem : object {
    [CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
[DebuggerBrowsableAttribute("0")]
public int Tag { get; }
    [CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
[DebuggerBrowsableAttribute("0")]
public bool IsFileValue { get; }
    [CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
[DebuggerBrowsableAttribute("0")]
public bool IsFormValue { get; }
    [CompilationMappingAttribute]
public static MultipartFormDataItem NewFileValue(MultipartFileItem item);
    [CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
public bool get_IsFileValue();
    [CompilationMappingAttribute]
public static MultipartFormDataItem NewFormValue(string item1, string item2);
    [CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
public bool get_IsFormValue();
    [CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
public int get_Tag();
    [CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
internal object __DebugDisplay();
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
public sealed virtual int GetHashCode(IEqualityComparer comp);
    [CompilerGeneratedAttribute]
public sealed virtual int GetHashCode();
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(object obj, IEqualityComparer comp);
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(MultipartFormDataItem obj);
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(object obj);
}
[DebuggerDisplayAttribute("{__DebugDisplay(),nq}")]
[CompilationMappingAttribute]
public class FSharp.Data.MultipartItem : object {
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
internal string _formField;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
internal string _filename;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
internal Stream _content;
    [CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
[DebuggerBrowsableAttribute("0")]
public int Tag { get; }
    [CompilationMappingAttribute]
[CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
public string formField { get; }
    [CompilationMappingAttribute]
[CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
public string filename { get; }
    [CompilationMappingAttribute]
[CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
public Stream content { get; }
    [CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
internal MultipartItem(string _formField, string _filename, Stream _content);
    [CompilationMappingAttribute]
public static MultipartItem NewMultipartItem(string _formField, string _filename, Stream _content);
    [CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
public string get_formField();
    [CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
public string get_filename();
    [CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
public Stream get_content();
    [CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
public int get_Tag();
    [CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
internal object __DebugDisplay();
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
public sealed virtual int GetHashCode(IEqualityComparer comp);
    [CompilerGeneratedAttribute]
public sealed virtual int GetHashCode();
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(object obj, IEqualityComparer comp);
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(MultipartItem obj);
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(object obj);
}
[CompilationMappingAttribute]
internal static class System.AssemblyVersionInformation : object {
    [LiteralAttribute]
[DebuggerBrowsableAttribute("0")]
internal static string AssemblyTitle;
    [LiteralAttribute]
[DebuggerBrowsableAttribute("0")]
internal static string AssemblyProduct;
    [LiteralAttribute]
[DebuggerBrowsableAttribute("0")]
internal static string AssemblyDescription;
    [LiteralAttribute]
[DebuggerBrowsableAttribute("0")]
internal static string AssemblyVersion;
    [LiteralAttribute]
[DebuggerBrowsableAttribute("0")]
internal static string AssemblyFileVersion;
}
