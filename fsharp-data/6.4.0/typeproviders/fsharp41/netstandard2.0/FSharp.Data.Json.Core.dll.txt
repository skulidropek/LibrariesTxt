[ExtensionAttribute]
[CompilationMappingAttribute]
public class FSharp.Data.JsonExtensions : object {
    [ExtensionAttribute]
public static Tuple`2[] Properties(JsonValue x);
    [ExtensionAttribute]
public static JsonValue GetProperty(JsonValue x, string propertyName);
    [ExtensionAttribute]
public static FSharpOption`1<JsonValue> TryGetProperty(JsonValue x, string propertyName);
    [ExtensionAttribute]
public static JsonValue Item(JsonValue x, string propertyName);
    [ExtensionAttribute]
public static JsonValue[] AsArray(JsonValue x);
    [ExtensionAttribute]
public static IEnumerator GetEnumerator(JsonValue x);
    [ExtensionAttribute]
public static JsonValue Item(JsonValue x, int index);
    [ExtensionAttribute]
public static string AsString(JsonValue x, FSharpOption`1<CultureInfo> cultureInfo);
    [ExtensionAttribute]
public static int AsInteger(JsonValue x, FSharpOption`1<CultureInfo> cultureInfo);
    [ExtensionAttribute]
public static long AsInteger64(JsonValue x, FSharpOption`1<CultureInfo> cultureInfo);
    [ExtensionAttribute]
public static decimal AsDecimal(JsonValue x, FSharpOption`1<CultureInfo> cultureInfo);
    [ExtensionAttribute]
public static double AsFloat(JsonValue x, FSharpOption`1<CultureInfo> cultureInfo, FSharpOption`1<String[]> missingValues);
    [ExtensionAttribute]
public static bool AsBoolean(JsonValue x);
    [ExtensionAttribute]
public static DateTime AsDateTime(JsonValue x, FSharpOption`1<CultureInfo> cultureInfo);
    [ExtensionAttribute]
public static DateTimeOffset AsDateTimeOffset(JsonValue x, FSharpOption`1<CultureInfo> cultureInfo);
    [ExtensionAttribute]
public static TimeSpan AsTimeSpan(JsonValue x, FSharpOption`1<CultureInfo> cultureInfo);
    [ExtensionAttribute]
public static Guid AsGuid(JsonValue x);
    [ExtensionAttribute]
public static string InnerText(JsonValue x);
}
[CompilationRepresentationAttribute]
[CompilationMappingAttribute]
public static class FSharp.Data.JsonExtensionsModule : object {
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static JsonValue op_Dynamic(JsonValue jsonObject, string propertyName);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static Tuple`2[] JsonValue.get_Properties(JsonValue );
}
[CompilationMappingAttribute]
internal class FSharp.Data.JsonParser : object {
    internal string jsonText;
    internal int i;
    internal string s;
    internal StringBuilder buf;
    public JsonParser(string jsonText);
    internal JsonValue Parse();
    internal IEnumerable`1<JsonValue> ParseMultiple();
    [CompilerGeneratedAttribute]
internal bool isNumChar(char c);
    [CompilerGeneratedAttribute]
internal a throw();
    [CompilerGeneratedAttribute]
internal void ensure(bool cond);
    [CompilerGeneratedAttribute]
internal void skipCommentsAndWhitespace();
    [CompilerGeneratedAttribute]
internal a parseValue(FSharpFunc`2<JsonValue, a> cont);
    [CompilerGeneratedAttribute]
internal string parseString();
    [CompilerGeneratedAttribute]
internal JsonValue parseNum();
    [CompilerGeneratedAttribute]
internal a parsePair(FSharpFunc`2<Tuple`2<string, JsonValue>, a> cont);
    [CompilerGeneratedAttribute]
internal a parseObject(FSharpFunc`2<JsonValue, a> cont);
    [CompilerGeneratedAttribute]
internal a parseArray(FSharpFunc`2<JsonValue, a> cont);
    [CompilerGeneratedAttribute]
internal JsonValue parseLiteral(string expected, JsonValue r);
}
[RequireQualifiedAccessAttribute]
[CompilationMappingAttribute]
public enum FSharp.Data.JsonSaveOptions : Enum {
    public int value__;
    public static JsonSaveOptions None;
    public static JsonSaveOptions DisableFormatting;
    public static JsonSaveOptions CompactSpaceAfterComma;
}
[RequireQualifiedAccessAttribute]
[StructuredFormatDisplayAttribute("{_Print}")]
[DebuggerDisplayAttribute("{__DebugDisplay(),nq}")]
[CompilationMappingAttribute]
public class FSharp.Data.JsonValue : object {
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
internal int _tag;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
internal static JsonValue _unique_Null;
    [CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
[DebuggerBrowsableAttribute("0")]
public int Tag { get; }
    [CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
[DebuggerBrowsableAttribute("0")]
public bool IsString { get; }
    [CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
[DebuggerBrowsableAttribute("0")]
public bool IsNumber { get; }
    [CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
[DebuggerBrowsableAttribute("0")]
public bool IsFloat { get; }
    [CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
[DebuggerBrowsableAttribute("0")]
public bool IsRecord { get; }
    [CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
[DebuggerBrowsableAttribute("0")]
public bool IsArray { get; }
    [CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
[DebuggerBrowsableAttribute("0")]
public bool IsBoolean { get; }
    [CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
[DebuggerBrowsableAttribute("0")]
public static JsonValue Null { get; }
    [CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
[DebuggerBrowsableAttribute("0")]
public bool IsNull { get; }
    [EditorBrowsableAttribute("1")]
[CompilerMessageAttribute("This method is intended for use in generated code only.", "10001")]
public string _Print { get; }
    private static JsonValue();
    [CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
internal JsonValue(int _tag);
    [CompilationMappingAttribute]
public static JsonValue NewString(string item);
    [CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
public bool get_IsString();
    [CompilationMappingAttribute]
public static JsonValue NewNumber(decimal item);
    [CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
public bool get_IsNumber();
    [CompilationMappingAttribute]
public static JsonValue NewFloat(double item);
    [CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
public bool get_IsFloat();
    [CompilationMappingAttribute]
public static JsonValue NewRecord(Tuple`2[] _properties);
    [CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
public bool get_IsRecord();
    [CompilationMappingAttribute]
public static JsonValue NewArray(JsonValue[] _elements);
    [CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
public bool get_IsArray();
    [CompilationMappingAttribute]
public static JsonValue NewBoolean(bool item);
    [CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
public bool get_IsBoolean();
    [CompilationMappingAttribute]
public static JsonValue get_Null();
    [CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
public bool get_IsNull();
    [CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
public int get_Tag();
    [CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
internal object __DebugDisplay();
    [CompilerGeneratedAttribute]
public sealed virtual int CompareTo(JsonValue obj);
    [CompilerGeneratedAttribute]
public sealed virtual int CompareTo(object obj);
    [CompilerGeneratedAttribute]
public sealed virtual int CompareTo(object obj, IComparer comp);
    [CompilerGeneratedAttribute]
public sealed virtual int GetHashCode(IEqualityComparer comp);
    [CompilerGeneratedAttribute]
public sealed virtual int GetHashCode();
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(object obj, IEqualityComparer comp);
    public string get__Print();
    public void WriteTo(TextWriter w, JsonSaveOptions saveOptions);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal static void JsonStringEncodeTo(TextWriter w, string value);
    public string ToString(JsonSaveOptions saveOptions);
    public virtual string ToString();
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(JsonValue obj);
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(object obj);
    public static JsonValue Parse(string text);
    public static FSharpOption`1<JsonValue> TryParse(string text);
    public static JsonValue Load(Stream stream);
    public static JsonValue Load(TextReader reader);
    public static FSharpAsync`1<JsonValue> AsyncLoad(string uri, FSharpOption`1<Encoding> encoding);
    public static JsonValue Load(string uri, FSharpOption`1<Encoding> encoding);
    public static IEnumerable`1<JsonValue> ParseMultiple(string text);
    internal Tuple`3<HttpRequestBody, FSharpList`1<Tuple`2<string, string>>, string> PrepareRequest(FSharpOption`1<string> httpMethod, FSharpOption`1<a> headers);
    public HttpResponse Request(string url, FSharpOption`1<string> httpMethod, FSharpOption`1<IEnumerable`1<Tuple`2<string, string>>> headers);
    public FSharpAsync`1<HttpResponse> RequestAsync(string url, FSharpOption`1<string> httpMethod, FSharpOption`1<IEnumerable`1<Tuple`2<string, string>>> headers);
    [ObsoleteAttribute("Please use JsonValue.Request instead")]
public HttpResponse Post(string uri, FSharpOption`1<IEnumerable`1<Tuple`2<string, string>>> headers);
}
[CompilationRepresentationAttribute]
[CompilationMappingAttribute]
public static class FSharp.Data.JsonValueModule : object {
    [ObsoleteAttribute("Please use JsonValue.Record instead")]
[CompilationMappingAttribute]
public static FSharpFunc`2<FSharpMap`2<string, JsonValue>, JsonValue> Object { get; }
    [ObsoleteAttribute("Please use JsonValue.Record instead")]
public static FSharpOption`1<FSharpMap`2<string, JsonValue>> |Object|_|(JsonValue x);
    public static FSharpFunc`2<FSharpMap`2<string, JsonValue>, JsonValue> get_Object();
}
[CompilationMappingAttribute]
public interface FSharp.Data.Runtime.BaseTypes.IJsonDocument {
    public JsonValue JsonValue { get; }
    public abstract virtual JsonValue get_JsonValue();
    [EditorBrowsableAttribute("1")]
[CompilerMessageAttribute("This method is intended for use in generated code only.", "10001")]
public abstract virtual string Path();
    [EditorBrowsableAttribute("1")]
[CompilerMessageAttribute("This method is intended for use in generated code only.", "10001")]
public abstract virtual IJsonDocument CreateNew(JsonValue value, string pathIncrement);
}
[StructuredFormatDisplayAttribute("{JsonValue}")]
[CompilationMappingAttribute]
public class FSharp.Data.Runtime.BaseTypes.JsonDocument : object {
    [DebuggerBrowsableAttribute("0")]
internal JsonValue Json@;
    [DebuggerBrowsableAttribute("0")]
internal string Path@;
    [CompilationMappingAttribute]
internal JsonValue Json { get; }
    [CompilationMappingAttribute]
internal string Path { get; }
    public JsonValue JsonValue { get; }
    internal JsonDocument(JsonValue json, string path);
    internal JsonValue get_Json();
    internal string get_Path();
    [CompilerGeneratedAttribute]
public sealed virtual int CompareTo(JsonDocument obj);
    [CompilerGeneratedAttribute]
public sealed virtual int CompareTo(object obj);
    [CompilerGeneratedAttribute]
public sealed virtual int CompareTo(object obj, IComparer comp);
    [CompilerGeneratedAttribute]
public sealed virtual int GetHashCode(IEqualityComparer comp);
    [CompilerGeneratedAttribute]
public sealed virtual int GetHashCode();
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(object obj, IEqualityComparer comp);
    public JsonValue get_JsonValue();
    [EditorBrowsableAttribute("1")]
[CompilerMessageAttribute("This method is intended for use in generated code only.", "10001")]
public virtual string ToString();
    [EditorBrowsableAttribute("1")]
[CompilerMessageAttribute("This method is intended for use in generated code only.", "10001")]
public static IJsonDocument Create(JsonValue value, string path);
    [EditorBrowsableAttribute("1")]
[CompilerMessageAttribute("This method is intended for use in generated code only.", "10001")]
public static IJsonDocument Create(TextReader reader);
    [EditorBrowsableAttribute("1")]
[CompilerMessageAttribute("This method is intended for use in generated code only.", "10001")]
public static IJsonDocument[] CreateList(TextReader reader);
    private virtual override JsonValue FSharp.Data.Runtime.BaseTypes.IJsonDocument.get_JsonValue();
    private virtual override string FSharp.Data.Runtime.BaseTypes.IJsonDocument.Path();
    private virtual override IJsonDocument FSharp.Data.Runtime.BaseTypes.IJsonDocument.CreateNew(JsonValue value, string pathIncrement);
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(JsonDocument obj);
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(object obj);
}
[AutoOpenAttribute]
[CompilationMappingAttribute]
internal static class FSharp.Data.Runtime.Helpers : object {
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal static bool inRangeDecimal(a lo, b hi, decimal v);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal static bool inRangeDecimal$W(FSharpFunc`2<a, decimal> op_Explicit, FSharpFunc`2<b, decimal> op_Explicit1, a lo, b hi, decimal v);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal static bool inRangeFloat(a lo, b hi, double v);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal static bool inRangeFloat$W(FSharpFunc`2<a, double> op_Explicit, FSharpFunc`2<b, double> op_Explicit1, a lo, b hi, double v);
    internal static bool isIntegerDecimal(decimal v);
    internal static bool isIntegerFloat(double v);
}
[CompilationMappingAttribute]
public class FSharp.Data.Runtime.JsonConversions : object {
    public static FSharpFunc`2<JsonValue, FSharpOption`1<bool>> AsBoolean { get; }
    public static FSharpFunc`2<JsonValue, FSharpOption`1<Guid>> AsGuid { get; }
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpFunc`2<JsonValue, FSharpOption`1<string>> AsString(bool useNoneForNullOrEmpty, IFormatProvider cultureInfo);
    public static FSharpFunc`2<JsonValue, FSharpOption`1<int>> AsInteger(IFormatProvider cultureInfo);
    public static FSharpFunc`2<JsonValue, FSharpOption`1<long>> AsInteger64(IFormatProvider cultureInfo);
    public static FSharpFunc`2<JsonValue, FSharpOption`1<decimal>> AsDecimal(IFormatProvider cultureInfo);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpFunc`2<JsonValue, FSharpOption`1<double>> AsFloat(String[] missingValues, bool useNoneForMissingValues, IFormatProvider cultureInfo);
    public static FSharpFunc`2<JsonValue, FSharpOption`1<bool>> get_AsBoolean();
    public static FSharpFunc`2<JsonValue, FSharpOption`1<DateTimeOffset>> AsDateTimeOffset(IFormatProvider cultureInfo);
    public static FSharpFunc`2<JsonValue, FSharpOption`1<DateTime>> AsDateTime(IFormatProvider cultureInfo);
    public static FSharpFunc`2<JsonValue, FSharpOption`1<TimeSpan>> AsTimeSpan(CultureInfo cultureInfo);
    public static FSharpFunc`2<JsonValue, FSharpOption`1<Guid>> get_AsGuid();
}
[CompilationMappingAttribute]
public class FSharp.Data.Runtime.JsonRuntime : object {
    public static FSharpOption`1<string> ConvertString(string cultureStr, FSharpOption`1<JsonValue> json);
    public static FSharpOption`1<int> ConvertInteger(string cultureStr, FSharpOption`1<JsonValue> json);
    public static FSharpOption`1<long> ConvertInteger64(string cultureStr, FSharpOption`1<JsonValue> json);
    public static FSharpOption`1<decimal> ConvertDecimal(string cultureStr, FSharpOption`1<JsonValue> json);
    public static FSharpOption`1<double> ConvertFloat(string cultureStr, string missingValuesStr, FSharpOption`1<JsonValue> json);
    public static FSharpOption`1<bool> ConvertBoolean(FSharpOption`1<JsonValue> json);
    public static FSharpOption`1<DateTimeOffset> ConvertDateTimeOffset(string cultureStr, FSharpOption`1<JsonValue> json);
    public static FSharpOption`1<DateTime> ConvertDateTime(string cultureStr, FSharpOption`1<JsonValue> json);
    public static FSharpOption`1<TimeSpan> ConvertTimeSpan(string cultureStr, FSharpOption`1<JsonValue> json);
    public static FSharpOption`1<Guid> ConvertGuid(FSharpOption`1<JsonValue> json);
    public static T GetNonOptionalValue(string path, FSharpOption`1<T> opt, FSharpOption`1<JsonValue> originalValue);
    public static T[] ConvertArray(IJsonDocument doc, Func`2<IJsonDocument, T> mapping);
    public static Tuple`2[] GetRecordProperties(IJsonDocument doc);
    public static IEnumerable`1<Tuple`2<Key, Value>> ConvertRecordToDictionary(IJsonDocument doc, Func`2<IJsonDocument, Key> mappingKey, Func`2<IJsonDocument, Value> mappingValue);
    public static bool InferedDictionaryContainsKey(IJsonDocument doc, Func`2<IJsonDocument, Key> mappingKey, Key key);
    public static FSharpOption`1<Value> TryGetValueByKeyFromInferedDictionary(IJsonDocument doc, Func`2<IJsonDocument, Key> mappingKey, Func`2<IJsonDocument, Value> mappingValue, Key key);
    public static Value GetValueByKeyFromInferedDictionary(IJsonDocument doc, Func`2<IJsonDocument, Key> mappingKey, Func`2<IJsonDocument, Value> mappingValue, Key key);
    public static Key[] GetKeysFromInferedDictionary(IJsonDocument doc, Func`2<IJsonDocument, Key> mappingKey);
    public static Value[] GetValuesFromInferedDictionary(IJsonDocument doc, Func`2<IJsonDocument, Value> mappingValue);
    public static FSharpOption`1<JsonValue> TryGetPropertyUnpacked(IJsonDocument doc, string name);
    public static JsonValueOptionAndPath TryGetPropertyUnpackedWithPath(IJsonDocument doc, string name);
    public static FSharpOption`1<IJsonDocument> TryGetPropertyPacked(IJsonDocument doc, string name);
    public static IJsonDocument GetPropertyPacked(IJsonDocument doc, string name);
    public static IJsonDocument GetPropertyPackedOrNull(IJsonDocument doc, string name);
    public static FSharpOption`1<T> ConvertOptionalProperty(IJsonDocument doc, string name, Func`2<IJsonDocument, T> mapping);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal static FSharpFunc`2<JsonValue, bool> Matches(string cultureStr, InferedTypeTag tag);
    public static T[] GetArrayChildrenByTypeTag(IJsonDocument doc, string cultureStr, string tagCode, Func`2<IJsonDocument, T> mapping);
    public static FSharpOption`1<T> TryGetArrayChildByTypeTag(IJsonDocument doc, string cultureStr, string tagCode, Func`2<IJsonDocument, T> mapping);
    public static IJsonDocument GetArrayChildByTypeTag(IJsonDocument doc, string cultureStr, string tagCode);
    public static FSharpOption`1<T> TryGetValueByTypeTag(IJsonDocument doc, string cultureStr, string tagCode, Func`2<IJsonDocument, T> mapping);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal static JsonValue ToJsonValue(CultureInfo cultureInfo, object value);
    public static IJsonDocument CreateValue(object value, string cultureStr);
    public static IJsonDocument CreateRecord(Tuple`2[] properties, string cultureStr);
    public static IJsonDocument CreateRecordFromDictionary(IEnumerable`1<Tuple`2<Key, Value>> keyValuePairs, string cultureStr, Func`2<Key, string> mappingKeyBack);
    public static IJsonDocument CreateArray(Object[] elements, string cultureStr);
}
[CompilationMappingAttribute]
public class FSharp.Data.Runtime.JsonValueOptionAndPath : object {
    [DebuggerBrowsableAttribute("0")]
internal FSharpOption`1<JsonValue> JsonOpt@;
    [DebuggerBrowsableAttribute("0")]
internal string Path@;
    [CompilationMappingAttribute]
public FSharpOption`1<JsonValue> JsonOpt { get; }
    [CompilationMappingAttribute]
public string Path { get; }
    public JsonValueOptionAndPath(FSharpOption`1<JsonValue> jsonOpt, string path);
    public FSharpOption`1<JsonValue> get_JsonOpt();
    public string get_Path();
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
public sealed virtual int CompareTo(JsonValueOptionAndPath obj);
    [CompilerGeneratedAttribute]
public sealed virtual int CompareTo(object obj);
    [CompilerGeneratedAttribute]
public sealed virtual int CompareTo(object obj, IComparer comp);
    [CompilerGeneratedAttribute]
public sealed virtual int GetHashCode(IEqualityComparer comp);
    [CompilerGeneratedAttribute]
public sealed virtual int GetHashCode();
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(object obj, IEqualityComparer comp);
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(JsonValueOptionAndPath obj);
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(object obj);
}
[CompilationMappingAttribute]
public static class ProviderImplementation.JsonInference : object {
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal static InferedType inferType(IUnitsOfMeasureProvider unitsOfMeasureProvider, InferenceMode' inferenceMode, CultureInfo cultureInfo, string parentName, JsonValue json);
}
[CompilationMappingAttribute]
internal static class System.AssemblyVersionInformation : object {
    [LiteralAttribute]
[DebuggerBrowsableAttribute("0")]
internal static string AssemblyTitle;
    [LiteralAttribute]
[DebuggerBrowsableAttribute("0")]
internal static string AssemblyProduct;
    [LiteralAttribute]
[DebuggerBrowsableAttribute("0")]
internal static string AssemblyDescription;
    [LiteralAttribute]
[DebuggerBrowsableAttribute("0")]
internal static string AssemblyVersion;
    [LiteralAttribute]
[DebuggerBrowsableAttribute("0")]
internal static string AssemblyFileVersion;
}
