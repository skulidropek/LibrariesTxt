[StructuredFormatDisplayAttribute("{Name}")]
[DebuggerDisplayAttribute("{Name}")]
[CompilationMappingAttribute]
public class FSharp.Data.Runtime.WorldBank.Country : object {
    internal string countryCode;
    internal ServiceConnection connection;
    internal Indicators indicators;
    public string Code { get; }
    public string Name { get; }
    public string CapitalCity { get; }
    public string Region { get; }
    internal Country(ServiceConnection connection, string countryCode);
    public string get_Code();
    public string get_Name();
    public string get_CapitalCity();
    public string get_Region();
    private virtual override Indicators FSharp.Data.Runtime.WorldBank.ICountry.GetIndicators();
}
[CompilationMappingAttribute]
public class FSharp.Data.Runtime.WorldBank.CountryCollection`1 : object {
    internal ServiceConnection connection;
    internal IEnumerable`1<T> items;
    internal CountryCollection`1(ServiceConnection connection, FSharpOption`1<string> regionCodeOpt);
    private virtual override IEnumerator`1<T> System.Collections.Generic.IEnumerable<'T>.GetEnumerator();
    private virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private virtual override Country FSharp.Data.Runtime.WorldBank.ICountryCollection.GetCountry(string countryCode, string _countryName);
}
[CompilationMappingAttribute]
public interface FSharp.Data.Runtime.WorldBank.ICountry {
    public abstract virtual Indicators GetIndicators();
}
[CompilationMappingAttribute]
public interface FSharp.Data.Runtime.WorldBank.ICountryCollection {
    public abstract virtual Country GetCountry(string countryCode, string countryName);
}
[CompilationMappingAttribute]
public interface FSharp.Data.Runtime.WorldBank.IIndicators {
    public abstract virtual Indicator GetIndicator(string indicatorCode);
    public abstract virtual FSharpAsync`1<Indicator> AsyncGetIndicator(string indicatorCode);
}
[CompilationMappingAttribute]
public interface FSharp.Data.Runtime.WorldBank.IIndicatorsDescriptions {
    public abstract virtual IndicatorDescription GetIndicator(string indicatorCode);
}
[AutoOpenAttribute]
[CompilationMappingAttribute]
public static class FSharp.Data.Runtime.WorldBank.Implementation : object {
    internal static int retryCount { get; }
    internal static int parallelIndicatorPageDownloads { get; }
    [CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
internal static int get_retryCount();
    [CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
internal static int get_parallelIndicatorPageDownloads();
    [CompilerGeneratedAttribute]
internal static int CompareTo$cont@23(IndicatorRecord this, IndicatorRecord obj, Unit unitVar);
    [CompilerGeneratedAttribute]
internal static int CompareTo$cont@23-1(IComparer comp, IndicatorRecord this, IndicatorRecord objTemp, Unit unitVar);
    [CompilerGeneratedAttribute]
internal static FSharpAsync`1<string> catchHandler@1(ServiceConnection this, int attempt, FSharpList`1<string> funcs, FSharpList`1<Tuple`2<string, string>> args, string url, Exception e);
}
[DefaultMemberAttribute("Item")]
[StructuredFormatDisplayAttribute("{Name}")]
[DebuggerDisplayAttribute("{Name}")]
[CompilationMappingAttribute]
public class FSharp.Data.Runtime.WorldBank.Indicator : object {
    internal string indicatorCode;
    internal string countryOrRegionCode;
    internal ServiceConnection connection;
    internal IEnumerable`1<Tuple`2<int, double>> data;
    internal Lazy`1<IDictionary`2<int, double>> dataDict;
    public string Code { get; }
    public string IndicatorCode { get; }
    public string Name { get; }
    public string Source { get; }
    public string Description { get; }
    public double Item { get; }
    public ICollection`1<int> Years { get; }
    public ICollection`1<double> Values { get; }
    internal Indicator(ServiceConnection connection, string countryOrRegionCode, string indicatorCode);
    public string get_Code();
    public string get_IndicatorCode();
    public string get_Name();
    public string get_Source();
    public string get_Description();
    public double get_Item(int year);
    public FSharpOption`1<double> TryGetValueAt(int year);
    public ICollection`1<int> get_Years();
    public ICollection`1<double> get_Values();
    private virtual override IEnumerator`1<Tuple`2<int, double>> System.Collections.Generic.IEnumerable<System.Tuple<System.Int32, System.Double>>.GetEnumerator();
    private virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[StructuredFormatDisplayAttribute("{Name}")]
[DebuggerDisplayAttribute("{Name}")]
[CompilationMappingAttribute]
public class FSharp.Data.Runtime.WorldBank.IndicatorDescription : object {
    internal string topicCode;
    internal string indicatorCode;
    internal ServiceConnection connection;
    public string Code { get; }
    public string IndicatorCode { get; }
    public string Name { get; }
    public string Source { get; }
    public string Description { get; }
    internal IndicatorDescription(ServiceConnection connection, string topicCode, string indicatorCode);
    public string get_Code();
    public string get_IndicatorCode();
    public string get_Name();
    public string get_Source();
    public string get_Description();
}
[CompilationMappingAttribute]
public class FSharp.Data.Runtime.WorldBank.Indicators : object {
    internal string countryOrRegionCode;
    internal ServiceConnection connection;
    internal IEnumerable`1<Indicator> indicators;
    internal Indicators(ServiceConnection connection, string countryOrRegionCode);
    private virtual override Indicator FSharp.Data.Runtime.WorldBank.IIndicators.GetIndicator(string indicatorCode);
    private virtual override FSharpAsync`1<Indicator> FSharp.Data.Runtime.WorldBank.IIndicators.AsyncGetIndicator(string indicatorCode);
    private virtual override IEnumerator`1<Indicator> System.Collections.Generic.IEnumerable<FSharp.Data.Runtime.WorldBank.Indicator>.GetEnumerator();
    private virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[CompilationMappingAttribute]
public class FSharp.Data.Runtime.WorldBank.IndicatorsDescriptions : object {
    internal string topicCode;
    internal ServiceConnection connection;
    internal IEnumerable`1<IndicatorDescription> indicatorsDescriptions;
    internal IndicatorsDescriptions(ServiceConnection connection, string topicCode);
    private virtual override IndicatorDescription FSharp.Data.Runtime.WorldBank.IIndicatorsDescriptions.GetIndicator(string indicatorCode);
    private virtual override IEnumerator`1<IndicatorDescription> System.Collections.Generic.IEnumerable<FSharp.Data.Runtime.WorldBank.IndicatorDescription>.GetEnumerator();
    private virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[CompilationMappingAttribute]
public interface FSharp.Data.Runtime.WorldBank.IRegion {
    public abstract virtual CountryCollection`1<T> GetCountries();
    public abstract virtual Indicators GetIndicators();
}
[CompilationMappingAttribute]
public interface FSharp.Data.Runtime.WorldBank.IRegionCollection {
    public abstract virtual Region GetRegion(string regionCode);
}
[CompilationMappingAttribute]
public interface FSharp.Data.Runtime.WorldBank.ITopic {
    public abstract virtual IndicatorsDescriptions GetIndicators();
}
[CompilationMappingAttribute]
public interface FSharp.Data.Runtime.WorldBank.ITopicCollection {
    public abstract virtual Topic GetTopic(string topicCode);
}
[CompilationMappingAttribute]
public interface FSharp.Data.Runtime.WorldBank.IWorldBankData {
    public abstract virtual IEnumerable`1<T> GetCountries();
    public abstract virtual IEnumerable`1<T> GetRegions();
    public abstract virtual IEnumerable`1<T> GetTopics();
}
[StructuredFormatDisplayAttribute("{Name}")]
[DebuggerDisplayAttribute("{Name}")]
[CompilationMappingAttribute]
public class FSharp.Data.Runtime.WorldBank.Region : object {
    internal string regionCode;
    internal ServiceConnection connection;
    internal Indicators indicators;
    public string RegionCode { get; }
    public string Name { get; }
    internal Region(ServiceConnection connection, string regionCode);
    public string get_RegionCode();
    public string get_Name();
    private virtual override CountryCollection`1<a> FSharp.Data.Runtime.WorldBank.IRegion.GetCountries();
    private virtual override Indicators FSharp.Data.Runtime.WorldBank.IRegion.GetIndicators();
}
[CompilationMappingAttribute]
public class FSharp.Data.Runtime.WorldBank.RegionCollection`1 : object {
    internal ServiceConnection connection;
    internal IEnumerable`1<T> items;
    internal RegionCollection`1(ServiceConnection connection);
    private virtual override IEnumerator`1<T> System.Collections.Generic.IEnumerable<'T>.GetEnumerator();
    private virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private virtual override Region FSharp.Data.Runtime.WorldBank.IRegionCollection.GetRegion(string regionCode);
}
[StructuredFormatDisplayAttribute("{Name}")]
[DebuggerDisplayAttribute("{Name}")]
[CompilationMappingAttribute]
public class FSharp.Data.Runtime.WorldBank.Topic : object {
    internal string topicCode;
    internal ServiceConnection connection;
    internal IndicatorsDescriptions indicatorsDescriptions;
    public string Code { get; }
    public string Name { get; }
    public string Description { get; }
    internal Topic(ServiceConnection connection, string topicCode);
    public string get_Code();
    public string get_Name();
    public string get_Description();
    private virtual override IndicatorsDescriptions FSharp.Data.Runtime.WorldBank.ITopic.GetIndicators();
}
[CompilationMappingAttribute]
public class FSharp.Data.Runtime.WorldBank.TopicCollection`1 : object {
    internal ServiceConnection connection;
    internal IEnumerable`1<T> items;
    internal TopicCollection`1(ServiceConnection connection);
    private virtual override IEnumerator`1<T> System.Collections.Generic.IEnumerable<'T>.GetEnumerator();
    private virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private virtual override Topic FSharp.Data.Runtime.WorldBank.ITopicCollection.GetTopic(string topicCode);
}
[CompilationMappingAttribute]
public class FSharp.Data.Runtime.WorldBank.WorldBankData : object {
    internal ServiceConnection connection;
    public WorldBankData(string serviceUrl, string sources);
    private virtual override IEnumerable`1<c> FSharp.Data.Runtime.WorldBank.IWorldBankData.GetCountries();
    private virtual override IEnumerable`1<b> FSharp.Data.Runtime.WorldBank.IWorldBankData.GetRegions();
    private virtual override IEnumerable`1<a> FSharp.Data.Runtime.WorldBank.IWorldBankData.GetTopics();
}
[CompilationMappingAttribute]
internal static class System.AssemblyVersionInformation : object {
    [LiteralAttribute]
[DebuggerBrowsableAttribute("0")]
internal static string AssemblyTitle;
    [LiteralAttribute]
[DebuggerBrowsableAttribute("0")]
internal static string AssemblyProduct;
    [LiteralAttribute]
[DebuggerBrowsableAttribute("0")]
internal static string AssemblyDescription;
    [LiteralAttribute]
[DebuggerBrowsableAttribute("0")]
internal static string AssemblyVersion;
    [LiteralAttribute]
[DebuggerBrowsableAttribute("0")]
internal static string AssemblyFileVersion;
}
