[StructuredFormatDisplayAttribute("{_Print}")]
[CompilationMappingAttribute]
public class FSharp.Data.Runtime.BaseTypes.XmlElement : object {
    [DebuggerBrowsableAttribute("0")]
internal XElement XElement@;
    [CompilationMappingAttribute]
public XElement XElement { get; }
    [EditorBrowsableAttribute("1")]
[CompilerMessageAttribute("This method is intended for use in generated code only.", "10001")]
public string _Print { get; }
    public XmlElement(XElement xElement);
    public XElement get_XElement();
    [CompilerGeneratedAttribute]
public sealed virtual int GetHashCode(IEqualityComparer comp);
    [CompilerGeneratedAttribute]
public sealed virtual int GetHashCode();
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(object obj, IEqualityComparer comp);
    public string get__Print();
    [EditorBrowsableAttribute("1")]
[CompilerMessageAttribute("This method is intended for use in generated code only.", "10001")]
public virtual string ToString();
    [EditorBrowsableAttribute("1")]
[CompilerMessageAttribute("This method is intended for use in generated code only.", "10001")]
public static XmlElement Create(XElement element);
    [EditorBrowsableAttribute("1")]
[CompilerMessageAttribute("This method is intended for use in generated code only.", "10001")]
public static XmlElement Create(TextReader reader);
    [EditorBrowsableAttribute("1")]
[CompilerMessageAttribute("This method is intended for use in generated code only.", "10001")]
public static XmlElement[] CreateList(TextReader reader);
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(XmlElement obj);
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(object obj);
}
[CompilationMappingAttribute]
public class FSharp.Data.Runtime.XmlRuntime : object {
    public static FSharpOption`1<string> TryGetValue(XmlElement xml);
    public static FSharpOption`1<string> TryGetAttribute(XmlElement xml, string nameWithNS);
    internal static XmlElement[] GetChildrenArray(XmlElement value, string nameWithNS);
    internal static FSharpOption`1<XmlElement> GetChildOption(XmlElement value, string nameWithNS);
    public static XmlElement GetChild(XmlElement value, string nameWithNS);
    public static R[] ConvertArray(XmlElement xml, string nameWithNS, Func`2<XmlElement, R> f);
    public static FSharpOption`1<R> ConvertOptional(XmlElement xml, string nameWithNS, Func`2<XmlElement, R> f);
    public static FSharpOption`1<R> ConvertOptional2(XmlElement xml, string nameWithNS, Func`2<XmlElement, FSharpOption`1<R>> f);
    public static FSharpOption`1<R> ConvertAsName(XmlElement xml, string nameWithNS, Func`2<XmlElement, R> f);
    public static IJsonDocument GetJsonValue(XmlElement xml);
    public static FSharpOption`1<IJsonDocument> TryGetJsonValue(XmlElement xml);
    public static XmlElement CreateValue(string nameWithNS, object value, string cultureStr);
    public static XmlElement CreateRecord(string nameWithNS, Tuple`2[] attributes, Tuple`2[] elements, string cultureStr);
}
[CompilationMappingAttribute]
public static class FSharp.Data.Runtime.XmlSchema : object {
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static XmlSchemaSet parseSchemaFromTextReader(string resolutionFolder, TextReader textReader);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static XmlSchemaSet parseSchema(string resolutionFolder, string xsdText);
}
[AutoOpenAttribute]
[CompilationMappingAttribute]
public static class FSharp.Data.XElementExtensions : object {
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static HttpResponse XElement.Request(XElement x, string uri, FSharpOption`1<string> httpMethod, FSharpOption`1<IEnumerable`1<Tuple`2<string, string>>> headers);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpAsync`1<HttpResponse> XElement.RequestAsync(XElement x, string uri, FSharpOption`1<string> httpMethod, FSharpOption`1<IEnumerable`1<Tuple`2<string, string>>> headers);
}
[CompilationMappingAttribute]
internal static class ProviderImplementation.XmlInference : object {
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal static FSharpOption`1<a> |EmptyMap|_|(a result, FSharpMap`2<b, c> map);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal static FSharpList`1<InferedProperty> getAttributes(IUnitsOfMeasureProvider unitsOfMeasureProvider, InferenceMode' inferenceMode, CultureInfo cultureInfo, XElement element);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal static InferedType getInferedTypeFromValue(IUnitsOfMeasureProvider unitsOfMeasureProvider, InferenceMode' inferenceMode, CultureInfo cultureInfo, XElement element);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal static InferedType[] inferGlobalType(IUnitsOfMeasureProvider unitsOfMeasureProvider, InferenceMode' inferenceMode, CultureInfo cultureInfo, bool allowEmptyValues, XElement[] elements);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal static InferedType inferLocalType(IUnitsOfMeasureProvider unitsOfMeasureProvider, InferenceMode' inferenceMode, CultureInfo cultureInfo, bool allowEmptyValues, XElement element);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal static InferedType[] inferType(IUnitsOfMeasureProvider unitsOfMeasureProvider, InferenceMode' inferenceMode, CultureInfo cultureInfo, bool allowEmptyValues, bool globalInference, XElement[] elements);
}
[CompilationMappingAttribute]
internal static class ProviderImplementation.XsdInference : object {
    [CompilationMappingAttribute]
internal static InferedProperty nil { get; }
    internal static Type getType(XmlTypeCode _arg1);
    internal static InferedMultiplicity getMultiplicity(decimal _arg1_0, decimal _arg1_1);
    internal static InferedMultiplicity combineMultiplicity(InferedMultiplicity _arg1_0, InferedMultiplicity x);
    internal static InferedMultiplicity makeOptional(InferedMultiplicity _arg1);
    internal static string formatName(XmlQualifiedName qName);
    internal static FSharpOption`1<string> getElementName(XsdElement elm);
    internal static InferedProperty get_nil();
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal static InferedType inferElementType(Dictionary`2<XsdComplexType, InferedProperty> ctx, XsdElement elm);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal static FSharpList`1<InferedProperty> inferProperties(Dictionary`2<XsdComplexType, InferedProperty> ctx, XsdComplexType cty);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal static FSharpList`1<Tuple`2<XsdElement, InferedMultiplicity>> getElements(Dictionary`2<XsdComplexType, InferedProperty> ctx, InferedMultiplicity parentMultiplicity, XsdParticle _arg1);
    internal static InferedType inferElements(FSharpList`1<XsdElement> elms);
}
[CompilationMappingAttribute]
public static class ProviderImplementation.XsdModel : object {
    [CompilerGeneratedAttribute]
internal static int GetHashCode$cont@50(IEqualityComparer comp, XsdParticle this, Unit unitVar);
    [CompilerGeneratedAttribute]
internal static bool Equals$cont@50(XsdParticle this, XsdParticle that, IEqualityComparer comp, Unit unitVar);
    [CompilerGeneratedAttribute]
internal static bool Equals$cont@50-1(XsdParticle this, XsdParticle obj, Unit unitVar);
}
[CompilationMappingAttribute]
public static class ProviderImplementation.XsdParsing : object {
    public static IEnumerable`1<a> ofType(IEnumerable sequence);
    internal static void collect@88(IDictionary`2<XmlSchemaElement, FSharpList`1<XmlSchemaElement>> subst, HashSet`1<XmlSchemaElement> items, XmlSchemaElement elm);
    internal static FSharpList`1<XmlSchemaElement> collectSubst@85(IDictionary`2<XmlSchemaElement, FSharpList`1<XmlSchemaElement>> subst, XmlSchemaElement elm);
    public static XmlTypeCode getTypeCode(XmlSchemaDatatype xmlSchemaDatatype);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static XsdElement parseElement(ParsingContext ctx, XmlSchemaElement elm);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static XsdComplexType parseComplexType(ParsingContext ctx, XmlSchemaComplexType x);
    internal static XsdParticle parseParticles@178(ParsingContext ctx, Tuple`2<decimal, decimal> occurs, XmlSchemaGroupBase group);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static XsdParticle parseParticle(ParsingContext ctx, XmlSchemaParticle par);
    public static IEnumerable`1<XsdElement> getElements(XmlSchemaSet schema);
}
[CompilationMappingAttribute]
internal static class System.AssemblyVersionInformation : object {
    [LiteralAttribute]
[DebuggerBrowsableAttribute("0")]
internal static string AssemblyTitle;
    [LiteralAttribute]
[DebuggerBrowsableAttribute("0")]
internal static string AssemblyProduct;
    [LiteralAttribute]
[DebuggerBrowsableAttribute("0")]
internal static string AssemblyDescription;
    [LiteralAttribute]
[DebuggerBrowsableAttribute("0")]
internal static string AssemblyVersion;
    [LiteralAttribute]
[DebuggerBrowsableAttribute("0")]
internal static string AssemblyFileVersion;
}
