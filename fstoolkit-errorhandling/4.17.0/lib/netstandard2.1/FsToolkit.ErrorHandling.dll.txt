[RequireQualifiedAccessAttribute]
[CompilationMappingAttribute]
public static class FsToolkit.ErrorHandling.Async : object {
    public static FSharpAsync`1<value> singleton(value value);
    public static FSharpAsync`1<value> retn(value value);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpAsync`1<output> bind(FSharpFunc`2<input, FSharpAsync`1<output>> binder, FSharpAsync`1<input> input);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpAsync`1<output> apply(FSharpAsync`1<FSharpFunc`2<input, output>> applier, FSharpAsync`1<input> input);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpAsync`1<output> map(FSharpFunc`2<input, output> mapper, FSharpAsync`1<input> input);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpAsync`1<output> map2(FSharpFunc`2<input1, FSharpFunc`2<input2, output>> mapper, FSharpAsync`1<input1> input1, FSharpAsync`1<input2> input2);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpAsync`1<output> map3(FSharpFunc`2<input1, FSharpFunc`2<input2, FSharpFunc`2<input3, output>>> mapper, FSharpAsync`1<input1> input1, FSharpAsync`1<input2> input2, FSharpAsync`1<input3> input3);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpAsync`1<Tuple`2<left, right>> zip(FSharpAsync`1<left> left, FSharpAsync`1<right> right);
}
[AutoOpenAttribute]
[CompilationMappingAttribute]
public static class FsToolkit.ErrorHandling.AsyncExt : object {
    internal static void finish@173(FSharpChoice`3<a, b, c> compResult, FSharpChoice`3<Unit, d, e> deferredResult, FSharpFunc`2<a, Unit> cont, FSharpFunc`2<Exception, Unit> econt, FSharpFunc`2<c, Unit> ccont);
    internal static void startDeferred@187(FSharpAsync`1<Unit> deferred, FSharpChoice`3<a, b, c> compResult, FSharpFunc`2<a, Unit> cont, FSharpFunc`2<Exception, Unit> econt, FSharpFunc`2<c, Unit> ccont);
    internal static FSharpFunc`2<Tuple`3<FSharpFunc`2<T, Unit>, FSharpFunc`2<Exception, Unit>, FSharpFunc`2<OperationCanceledException, Unit>>, Unit> startComp@195(FSharpAsync`1<Unit> deferred, FSharpAsync`1<T> comp, CancellationToken ct);
    public static FSharpAsync`1<T> Async.TryFinallyAsync.Static(FSharpAsync`1<T> comp, FSharpAsync`1<Unit> deferred);
}
[CompilationMappingAttribute]
public static class FsToolkit.ErrorHandling.AsyncOperators : object {
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpAsync`1<output> op_LessBangGreater(FSharpFunc`2<input, output> mapper, FSharpAsync`1<input> input);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpAsync`1<output> op_LessMultiplyGreater(FSharpAsync`1<FSharpFunc`2<input, output>> applier, FSharpAsync`1<input> input);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpAsync`1<output> op_GreaterGreaterEquals(FSharpAsync`1<input> input, FSharpFunc`2<input, FSharpAsync`1<output>> binder);
}
[RequireQualifiedAccessAttribute]
[CompilationMappingAttribute]
public static class FsToolkit.ErrorHandling.AsyncOption : object {
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpAsync`1<FSharpOption`1<output>> map(FSharpFunc`2<input, output> mapper, FSharpAsync`1<FSharpOption`1<input>> input);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpAsync`1<FSharpOption`1<output>> bind(FSharpFunc`2<input, FSharpAsync`1<FSharpOption`1<output>>> binder, FSharpAsync`1<FSharpOption`1<input>> input);
    public static FSharpAsync`1<FSharpOption`1<value>> retn(value value);
    public static FSharpAsync`1<FSharpOption`1<value>> some(value value);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpAsync`1<FSharpOption`1<output>> apply(FSharpAsync`1<FSharpOption`1<FSharpFunc`2<input, output>>> applier, FSharpAsync`1<FSharpOption`1<input>> input);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpAsync`1<output> either(FSharpFunc`2<input, FSharpAsync`1<output>> onSome, FSharpAsync`1<output> onNone, FSharpAsync`1<FSharpOption`1<input>> input);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpAsync`1<value> defaultValue(value value, FSharpAsync`1<FSharpOption`1<value>> asyncOption);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpAsync`1<value> defaultWith(FSharpFunc`2<Unit, value> defThunk, FSharpAsync`1<FSharpOption`1<value>> asyncOption);
}
[AutoOpenAttribute]
[CompilationMappingAttribute]
public static class FsToolkit.ErrorHandling.AsyncOptionCE : object {
    [CompilationMappingAttribute]
public static AsyncOptionBuilder asyncOption { get; }
    public static AsyncOptionBuilder get_asyncOption();
}
[AutoOpenAttribute]
[CompilationMappingAttribute]
public static class FsToolkit.ErrorHandling.AsyncOptionCEExtensions : object {
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static a AsyncOptionBuilder.Source(AsyncOptionBuilder _, a s);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpAsync`1<FSharpOption`1<value>> AsyncOptionBuilder.Source(AsyncOptionBuilder _, FSharpOption`1<value> r);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpAsync`1<FSharpOption`1<value>> AsyncOptionBuilder.Source(AsyncOptionBuilder _, FSharpAsync`1<value> a);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpAsync`1<FSharpOption`1<output>> AsyncOptionBuilder.Using(AsyncOptionBuilder this, disposable resource, FSharpFunc`2<disposable, FSharpAsync`1<FSharpOption`1<output>>> binder);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpAsync`1<FSharpOption`1<Unit>> AsyncOptionBuilder.For(AsyncOptionBuilder this, a sequence, FSharpFunc`2<input, FSharpAsync`1<FSharpOption`1<Unit>>> binder);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpAsync`1<FSharpOption`1<value>> AsyncOptionBuilder.Source(AsyncOptionBuilder _, Task`1<value> a);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpAsync`1<FSharpOption`1<Unit>> AsyncOptionBuilder.Source(AsyncOptionBuilder _, Task a);
}
[RequireQualifiedAccessAttribute]
[CompilationMappingAttribute]
public static class FsToolkit.ErrorHandling.AsyncResult : object {
    public static FSharpAsync`1<FSharpResult`2<ok, error>> retn(ok value);
    public static FSharpAsync`1<FSharpResult`2<ok, error>> ok(ok value);
    public static FSharpAsync`1<FSharpResult`2<ok, error>> returnError(error error);
    public static FSharpAsync`1<FSharpResult`2<ok, error>> error(error error);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpAsync`1<FSharpResult`2<output, error>> map(FSharpFunc`2<input, output> mapper, FSharpAsync`1<FSharpResult`2<input, error>> input);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpAsync`1<FSharpResult`2<ok, outputError>> mapError(FSharpFunc`2<inputError, outputError> mapper, FSharpAsync`1<FSharpResult`2<ok, inputError>> input);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpAsync`1<FSharpResult`2<output, error>> bind(FSharpFunc`2<input, FSharpAsync`1<FSharpResult`2<output, error>>> binder, FSharpAsync`1<FSharpResult`2<input, error>> input);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpAsync`1<output> foldResult(FSharpFunc`2<input, output> onSuccess, FSharpFunc`2<inputError, output> onError, FSharpAsync`1<FSharpResult`2<input, inputError>> input);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpAsync`1<FSharpResult`2<b, d>> eitherMap(FSharpFunc`2<a, b> onSuccess, FSharpFunc`2<c, d> onError, FSharpAsync`1<FSharpResult`2<a, c>> input);
    public static FSharpAsync`1<FSharpResult`2<ok, Exception>> ofTask(Task`1<ok> aTask);
    public static FSharpAsync`1<FSharpResult`2<Unit, Exception>> ofTaskAction(Task aTask);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpAsync`1<FSharpResult`2<output, error>> map2(FSharpFunc`2<input1, FSharpFunc`2<input2, output>> mapper, FSharpAsync`1<FSharpResult`2<input1, error>> input1, FSharpAsync`1<FSharpResult`2<input2, error>> input2);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpAsync`1<FSharpResult`2<output, error>> map3(FSharpFunc`2<input1, FSharpFunc`2<input2, FSharpFunc`2<input3, output>>> mapper, FSharpAsync`1<FSharpResult`2<input1, error>> input1, FSharpAsync`1<FSharpResult`2<input2, error>> input2, FSharpAsync`1<FSharpResult`2<input3, error>> input3);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpAsync`1<FSharpResult`2<output, error>> apply(FSharpAsync`1<FSharpResult`2<FSharpFunc`2<input, output>, error>> applier, FSharpAsync`1<FSharpResult`2<input, error>> input);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpAsync`1<FSharpResult`2<ok, errorOutput>> orElse(FSharpAsync`1<FSharpResult`2<ok, errorOutput>> ifError, FSharpAsync`1<FSharpResult`2<ok, errorInput>> input);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpAsync`1<FSharpResult`2<ok, errorOutput>> orElseWith(FSharpFunc`2<errorInput, FSharpAsync`1<FSharpResult`2<ok, errorOutput>>> ifErrorFunc, FSharpAsync`1<FSharpResult`2<ok, errorInput>> input);
    public static FSharpAsync`1<FSharpResult`2<Unit, error>> ignore(FSharpAsync`1<FSharpResult`2<ok, error>> value);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpAsync`1<FSharpResult`2<Unit, error>> requireTrue(error error, FSharpAsync`1<bool> value);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpAsync`1<FSharpResult`2<Unit, error>> requireFalse(error error, FSharpAsync`1<bool> value);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpAsync`1<FSharpResult`2<ok, error>> requireSome(error error, FSharpAsync`1<FSharpOption`1<ok>> value);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpAsync`1<FSharpResult`2<Unit, error>> requireNone(error error, FSharpAsync`1<FSharpOption`1<ok>> value);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpAsync`1<FSharpResult`2<ok, error>> requireValueSome(error error, FSharpAsync`1<FSharpValueOption`1<ok>> value);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpAsync`1<FSharpResult`2<Unit, error>> requireValueNone(error error, FSharpAsync`1<FSharpValueOption`1<ok>> value);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpAsync`1<FSharpResult`2<Unit, error>> requireEqual(value value1, FSharpAsync`1<value> value2, error error);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpAsync`1<FSharpResult`2<Unit, error>> requireEqualTo(value other, error error, FSharpAsync`1<value> this);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpAsync`1<FSharpResult`2<Unit, error>> requireEmpty(error error, FSharpAsync`1<a> values);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpAsync`1<FSharpResult`2<Unit, error>> requireNotEmpty(error error, FSharpAsync`1<a> values);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpAsync`1<FSharpResult`2<ok, error>> requireHead(error error, FSharpAsync`1<a> values);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpAsync`1<FSharpResult`2<ok, errorOutput>> setError(errorOutput error, FSharpAsync`1<FSharpResult`2<ok, errorInput>> asyncResult);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpAsync`1<FSharpResult`2<ok, errorOutput>> withError(errorOutput error, FSharpAsync`1<FSharpResult`2<ok, Unit>> asyncResult);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpAsync`1<ok> defaultValue(ok ifError, FSharpAsync`1<FSharpResult`2<ok, error>> asyncResult);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpAsync`1<error> defaultError(error ifOk, FSharpAsync`1<FSharpResult`2<ok, error>> asyncResult);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpAsync`1<ok> defaultWith(FSharpFunc`2<error, ok> ifErrorThunk, FSharpAsync`1<FSharpResult`2<ok, error>> asyncResult);
    public static FSharpAsync`1<Unit> ignoreError(FSharpAsync`1<FSharpResult`2<Unit, error>> result);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpAsync`1<FSharpResult`2<ok, error>> tee(FSharpFunc`2<ok, Unit> inspector, FSharpAsync`1<FSharpResult`2<ok, error>> asyncResult);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpAsync`1<FSharpResult`2<ok, error>> teeIf(FSharpFunc`2<ok, bool> predicate, FSharpFunc`2<ok, Unit> inspector, FSharpAsync`1<FSharpResult`2<ok, error>> asyncResult);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpAsync`1<FSharpResult`2<ok, error>> teeError(FSharpFunc`2<error, Unit> teeFunction, FSharpAsync`1<FSharpResult`2<ok, error>> asyncResult);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpAsync`1<FSharpResult`2<ok, error>> teeErrorIf(FSharpFunc`2<error, bool> predicate, FSharpFunc`2<error, Unit> teeFunction, FSharpAsync`1<FSharpResult`2<ok, error>> asyncResult);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpAsync`1<FSharpResult`2<Tuple`2<leftOk, rightOk>, error>> zip(FSharpAsync`1<FSharpResult`2<leftOk, error>> left, FSharpAsync`1<FSharpResult`2<rightOk, error>> right);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpAsync`1<FSharpResult`2<ok, Tuple`2<leftError, rightError>>> zipError(FSharpAsync`1<FSharpResult`2<ok, leftError>> left, FSharpAsync`1<FSharpResult`2<ok, rightError>> right);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpAsync`1<FSharpResult`2<ok, error>> catch(FSharpFunc`2<Exception, error> exnMapper, FSharpAsync`1<FSharpResult`2<ok, error>> input);
    public static FSharpAsync`1<FSharpResult`2<ok, error>> ofAsync(FSharpAsync`1<ok> value);
    public static FSharpAsync`1<FSharpResult`2<ok, error>> ofResult(FSharpResult`2<ok, error> x);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpAsync`1<FSharpResult`2<b, a>> bindRequireSome(a error, FSharpAsync`1<FSharpResult`2<FSharpOption`1<b>, a>> x);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpAsync`1<FSharpResult`2<Unit, a>> bindRequireNone(a error, FSharpAsync`1<FSharpResult`2<FSharpOption`1<b>, a>> x);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpAsync`1<FSharpResult`2<b, a>> bindRequireValueSome(a error, FSharpAsync`1<FSharpResult`2<FSharpValueOption`1<b>, a>> x);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpAsync`1<FSharpResult`2<Unit, a>> bindRequireValueNone(a error, FSharpAsync`1<FSharpResult`2<FSharpValueOption`1<b>, a>> x);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpAsync`1<FSharpResult`2<Unit, a>> bindRequireTrue(a error, FSharpAsync`1<FSharpResult`2<bool, a>> x);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpAsync`1<FSharpResult`2<Unit, a>> bindRequireFalse(a error, FSharpAsync`1<FSharpResult`2<bool, a>> x);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpAsync`1<FSharpResult`2<b, a>> bindRequireNotNull(a error, FSharpAsync`1<FSharpResult`2<b, a>> x);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpAsync`1<FSharpResult`2<Unit, b>> bindRequireEqual(a y, b error, FSharpAsync`1<FSharpResult`2<a, b>> x);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpAsync`1<FSharpResult`2<Unit, a>> bindRequireEmpty(a error, FSharpAsync`1<FSharpResult`2<b, a>> x);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpAsync`1<FSharpResult`2<Unit, a>> bindRequireNotEmpty(a error, FSharpAsync`1<FSharpResult`2<b, a>> x);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpAsync`1<FSharpResult`2<c, a>> bindRequireHead(a error, FSharpAsync`1<FSharpResult`2<b, a>> x);
}
[AutoOpenAttribute]
[CompilationMappingAttribute]
public static class FsToolkit.ErrorHandling.AsyncResultCE : object {
    [CompilationMappingAttribute]
public static AsyncResultBuilder asyncResult { get; }
    public static AsyncResultBuilder get_asyncResult();
}
[AutoOpenAttribute]
[CompilationMappingAttribute]
public static class FsToolkit.ErrorHandling.AsyncResultCEExtensions : object {
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static a AsyncResultBuilder.Source(AsyncResultBuilder _, a s);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpAsync`1<FSharpResult`2<ok, error>> AsyncResultBuilder.Source(AsyncResultBuilder _, FSharpResult`2<ok, error> result);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpAsync`1<FSharpResult`2<ok, error>> AsyncResultBuilder.Source(AsyncResultBuilder _, FSharpChoice`2<ok, error> choice);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpAsync`1<FSharpResult`2<ok, error>> AsyncResultBuilder.Source(AsyncResultBuilder _, FSharpAsync`1<ok> asyncComputation);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpAsync`1<FSharpResult`2<U, error>> AsyncResultBuilder.Using(AsyncResultBuilder _, ok resource, FSharpFunc`2<ok, FSharpAsync`1<FSharpResult`2<U, error>>> binder);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpAsync`1<FSharpResult`2<Unit, error>> AsyncResultBuilder.For(AsyncResultBuilder this, a sequence, FSharpFunc`2<ok, FSharpAsync`1<FSharpResult`2<Unit, error>>> binder);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpAsync`1<FSharpResult`2<ok, error>> AsyncResultBuilder.Source(AsyncResultBuilder _, Task`1<ok> task);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpAsync`1<FSharpResult`2<Unit, error>> AsyncResultBuilder.Source(AsyncResultBuilder _, Task task);
}
[RequireQualifiedAccessAttribute]
[CompilationMappingAttribute]
public static class FsToolkit.ErrorHandling.AsyncResultOption : object {
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpAsync`1<FSharpResult`2<FSharpOption`1<okOutput>, error>> map(FSharpFunc`2<okInput, okOutput> mapper, FSharpAsync`1<FSharpResult`2<FSharpOption`1<okInput>, error>> input);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpAsync`1<FSharpResult`2<FSharpOption`1<okOutput>, error>> bind(FSharpFunc`2<okInput, FSharpAsync`1<FSharpResult`2<FSharpOption`1<okOutput>, error>>> binder, FSharpAsync`1<FSharpResult`2<FSharpOption`1<okInput>, error>> input);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpAsync`1<FSharpResult`2<FSharpOption`1<okOutput>, error>> map2(FSharpFunc`2<okInput1, FSharpFunc`2<okInput2, okOutput>> mapper, FSharpAsync`1<FSharpResult`2<FSharpOption`1<okInput1>, error>> input1, FSharpAsync`1<FSharpResult`2<FSharpOption`1<okInput2>, error>> input2);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpAsync`1<FSharpResult`2<FSharpOption`1<okOutput>, error>> map3(FSharpFunc`2<okInput1, FSharpFunc`2<okInput2, FSharpFunc`2<okInput3, okOutput>>> mapper, FSharpAsync`1<FSharpResult`2<FSharpOption`1<okInput1>, error>> input1, FSharpAsync`1<FSharpResult`2<FSharpOption`1<okInput2>, error>> input2, FSharpAsync`1<FSharpResult`2<FSharpOption`1<okInput3>, error>> input3);
    public static FSharpAsync`1<FSharpResult`2<FSharpOption`1<ok>, error>> retn(ok value);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpAsync`1<FSharpResult`2<FSharpOption`1<okOutput>, error>> apply(FSharpAsync`1<FSharpResult`2<FSharpOption`1<FSharpFunc`2<okInput, okOutput>>, error>> applier, FSharpAsync`1<FSharpResult`2<FSharpOption`1<okInput>, error>> input);
    public static FSharpAsync`1<FSharpResult`2<FSharpOption`1<Unit>, error>> ignore(FSharpAsync`1<FSharpResult`2<FSharpOption`1<ok>, error>> value);
    public static FSharpAsync`1<FSharpResult`2<FSharpOption`1<ok>, error>> ofResult(FSharpResult`2<ok, error> r);
    public static FSharpAsync`1<FSharpResult`2<FSharpOption`1<ok>, error>> ofAsyncResult(FSharpAsync`1<FSharpResult`2<ok, error>> r);
    public static FSharpAsync`1<FSharpResult`2<FSharpOption`1<ok>, a>> ofOption(FSharpOption`1<ok> r);
    public static FSharpAsync`1<FSharpResult`2<FSharpOption`1<ok>, a>> ofAsyncOption(FSharpAsync`1<FSharpOption`1<ok>> r);
}
[AutoOpenAttribute]
[CompilationMappingAttribute]
public static class FsToolkit.ErrorHandling.AsyncResultOptionCE : object {
    [CompilationMappingAttribute]
public static AsyncResultOptionBuilder asyncResultOption { get; }
    public static AsyncResultOptionBuilder get_asyncResultOption();
}
[AutoOpenAttribute]
[CompilationMappingAttribute]
public static class FsToolkit.ErrorHandling.AsyncResultOptionCEExtensions : object {
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static a AsyncResultOptionBuilder.Source(AsyncResultOptionBuilder _, a s);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpAsync`1<FSharpResult`2<FSharpOption`1<ok>, error>> AsyncResultOptionBuilder.Source(AsyncResultOptionBuilder _, FSharpResult`2<ok, error> result);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpAsync`1<FSharpResult`2<FSharpOption`1<ok>, error>> AsyncResultOptionBuilder.Source(AsyncResultOptionBuilder this, FSharpChoice`2<ok, error> result);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpAsync`1<FSharpResult`2<FSharpOption`1<ok>, error>> AsyncResultOptionBuilder.Source(AsyncResultOptionBuilder this, FSharpOption`1<ok> optional);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpAsync`1<FSharpResult`2<FSharpOption`1<ok>, error>> AsyncResultOptionBuilder.Source(AsyncResultOptionBuilder this, FSharpAsync`1<ok> async);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpAsync`1<FSharpResult`2<FSharpOption`1<okOutput>, error>> AsyncResultOptionBuilder.Using(AsyncResultOptionBuilder _, ok resource, FSharpFunc`2<ok, FSharpAsync`1<FSharpResult`2<FSharpOption`1<okOutput>, error>>> binder);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpAsync`1<FSharpResult`2<FSharpOption`1<Unit>, error>> AsyncResultOptionBuilder.For(AsyncResultOptionBuilder this, a sequence, FSharpFunc`2<ok, FSharpAsync`1<FSharpResult`2<FSharpOption`1<Unit>, error>>> binder);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpAsync`1<FSharpResult`2<FSharpOption`1<ok>, error>> AsyncResultOptionBuilder.Source(AsyncResultOptionBuilder this, Task`1<ok> async);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpAsync`1<FSharpResult`2<FSharpOption`1<Unit>, error>> AsyncResultOptionBuilder.Source(AsyncResultOptionBuilder this, Task async);
}
[AutoOpenAttribute]
[CompilationMappingAttribute]
public static class FsToolkit.ErrorHandling.AsyncResultOptionCEExtensionsHighPriority : object {
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpAsync`1<FSharpResult`2<FSharpOption`1<ok>, error>> AsyncResultOptionBuilder.Source(AsyncResultOptionBuilder _, FSharpAsync`1<FSharpResult`2<ok, error>> result);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpAsync`1<FSharpResult`2<FSharpOption`1<ok>, error>> AsyncResultOptionBuilder.Source(AsyncResultOptionBuilder _, FSharpAsync`1<FSharpOption`1<ok>> result);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpAsync`1<FSharpResult`2<FSharpOption`1<ok>, error>> AsyncResultOptionBuilder.Source(AsyncResultOptionBuilder _, Task`1<FSharpResult`2<ok, error>> result);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpAsync`1<FSharpResult`2<FSharpOption`1<ok>, error>> AsyncResultOptionBuilder.Source(AsyncResultOptionBuilder _, Task`1<FSharpOption`1<ok>> result);
}
[RequireQualifiedAccessAttribute]
[CompilationMappingAttribute]
public static class FsToolkit.ErrorHandling.AsyncValidation : object {
    public static FSharpAsync`1<FSharpResult`2<ok, FSharpList`1<error>>> ok(ok value);
    public static FSharpAsync`1<FSharpResult`2<ok, FSharpList`1<error>>> error(error error);
    public static FSharpAsync`1<FSharpResult`2<ok, FSharpList`1<error>>> ofResult(FSharpResult`2<ok, error> result);
    public static FSharpAsync`1<FSharpResult`2<ok, FSharpList`1<error>>> ofChoice(FSharpChoice`2<ok, error> choice);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpAsync`1<FSharpResult`2<okOutput, FSharpList`1<error>>> apply(FSharpAsync`1<FSharpResult`2<FSharpFunc`2<okInput, okOutput>, FSharpList`1<error>>> applier, FSharpAsync`1<FSharpResult`2<okInput, FSharpList`1<error>>> input);
    public static FSharpAsync`1<FSharpResult`2<ok, FSharpList`1<error>>> retn(ok value);
    public static FSharpAsync`1<FSharpResult`2<ok, FSharpList`1<error>>> returnError(error error);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpAsync`1<FSharpResult`2<ok, FSharpList`1<errorOutput>>> orElse(FSharpAsync`1<FSharpResult`2<ok, FSharpList`1<errorOutput>>> ifError, FSharpAsync`1<FSharpResult`2<ok, FSharpList`1<errorInput>>> result);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpAsync`1<FSharpResult`2<ok, FSharpList`1<errorOutput>>> orElseWith(FSharpFunc`2<FSharpList`1<errorInput>, FSharpAsync`1<FSharpResult`2<ok, FSharpList`1<errorOutput>>>> ifErrorFunc, FSharpAsync`1<FSharpResult`2<ok, FSharpList`1<errorInput>>> result);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpAsync`1<FSharpResult`2<okOutput, FSharpList`1<error>>> map(FSharpFunc`2<okInput, okOutput> mapper, FSharpAsync`1<FSharpResult`2<okInput, FSharpList`1<error>>> input);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpAsync`1<FSharpResult`2<okOutput, FSharpList`1<error>>> map2(FSharpFunc`2<okInput1, FSharpFunc`2<okInput2, okOutput>> mapper, FSharpAsync`1<FSharpResult`2<okInput1, FSharpList`1<error>>> input1, FSharpAsync`1<FSharpResult`2<okInput2, FSharpList`1<error>>> input2);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpAsync`1<FSharpResult`2<okOutput, FSharpList`1<error>>> map3(FSharpFunc`2<okInput1, FSharpFunc`2<okInput2, FSharpFunc`2<okInput3, okOutput>>> mapper, FSharpAsync`1<FSharpResult`2<okInput1, FSharpList`1<error>>> input1, FSharpAsync`1<FSharpResult`2<okInput2, FSharpList`1<error>>> input2, FSharpAsync`1<FSharpResult`2<okInput3, FSharpList`1<error>>> input3);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpAsync`1<FSharpResult`2<ok, FSharpList`1<errorOutput>>> mapError(FSharpFunc`2<errorInput, errorOutput> errorMapper, FSharpAsync`1<FSharpResult`2<ok, FSharpList`1<errorInput>>> input);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpAsync`1<FSharpResult`2<ok, FSharpList`1<errorOutput>>> mapErrors(FSharpFunc`2<FSharpList`1<errorInput>, FSharpList`1<errorOutput>> errorMapper, FSharpAsync`1<FSharpResult`2<ok, FSharpList`1<errorInput>>> input);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpAsync`1<FSharpResult`2<okOutput, FSharpList`1<error>>> bind(FSharpFunc`2<okInput, FSharpAsync`1<FSharpResult`2<okOutput, FSharpList`1<error>>>> binder, FSharpAsync`1<FSharpResult`2<okInput, FSharpList`1<error>>> input);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpAsync`1<FSharpResult`2<Tuple`2<left, right>, FSharpList`1<error>>> zip(FSharpAsync`1<FSharpResult`2<left, FSharpList`1<error>>> left, FSharpAsync`1<FSharpResult`2<right, FSharpList`1<error>>> right);
}
[AutoOpenAttribute]
[CompilationMappingAttribute]
public static class FsToolkit.ErrorHandling.AsyncValidationCE : object {
    [CompilationMappingAttribute]
public static AsyncValidationBuilder asyncValidation { get; }
    public static AsyncValidationBuilder get_asyncValidation();
}
[RequireQualifiedAccessAttribute]
[CompilationMappingAttribute]
public static class FsToolkit.ErrorHandling.List : object {
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal static FSharpResult`2<FSharpList`1<a>, b> traverseResultM'(FSharpResult`2<FSharpList`1<a>, b> state, FSharpFunc`2<c, FSharpResult`2<a, b>> f, FSharpList`1<c> xs);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal static FSharpAsync`1<FSharpResult`2<FSharpList`1<a>, b>> traverseAsyncResultM'(FSharpAsync`1<FSharpResult`2<FSharpList`1<a>, b>> state, FSharpFunc`2<c, FSharpAsync`1<FSharpResult`2<a, b>>> f, FSharpList`1<c> xs);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpResult`2<FSharpList`1<b>, c> traverseResultM(FSharpFunc`2<a, FSharpResult`2<b, c>> f, FSharpList`1<a> xs);
    public static FSharpResult`2<FSharpList`1<a>, b> sequenceResultM(FSharpList`1<FSharpResult`2<a, b>> xs);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpAsync`1<FSharpResult`2<FSharpList`1<b>, c>> traverseAsyncResultM(FSharpFunc`2<a, FSharpAsync`1<FSharpResult`2<b, c>>> f, FSharpList`1<a> xs);
    public static FSharpAsync`1<FSharpResult`2<FSharpList`1<a>, b>> sequenceAsyncResultM(FSharpList`1<FSharpAsync`1<FSharpResult`2<a, b>>> xs);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal static FSharpResult`2<FSharpList`1<a>, FSharpList`1<b>> traverseResultA'(FSharpResult`2<FSharpList`1<a>, FSharpList`1<b>> state, FSharpFunc`2<c, FSharpResult`2<a, b>> f, FSharpList`1<c> xs);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal static FSharpAsync`1<FSharpResult`2<FSharpList`1<a>, FSharpList`1<b>>> traverseAsyncResultA'(FSharpAsync`1<FSharpResult`2<FSharpList`1<a>, FSharpList`1<b>>> state, FSharpFunc`2<c, FSharpAsync`1<FSharpResult`2<a, b>>> f, FSharpList`1<c> xs);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpResult`2<FSharpList`1<b>, FSharpList`1<c>> traverseResultA(FSharpFunc`2<a, FSharpResult`2<b, c>> f, FSharpList`1<a> xs);
    public static FSharpResult`2<FSharpList`1<a>, FSharpList`1<b>> sequenceResultA(FSharpList`1<FSharpResult`2<a, b>> xs);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal static FSharpResult`2<FSharpList`1<a>, FSharpList`1<b>> traverseValidationA'(FSharpResult`2<FSharpList`1<a>, FSharpList`1<b>> state, FSharpFunc`2<c, FSharpResult`2<a, FSharpList`1<b>>> f, FSharpList`1<c> xs);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpResult`2<FSharpList`1<b>, FSharpList`1<c>> traverseValidationA(FSharpFunc`2<a, FSharpResult`2<b, FSharpList`1<c>>> f, FSharpList`1<a> xs);
    public static FSharpResult`2<FSharpList`1<a>, FSharpList`1<b>> sequenceValidationA(FSharpList`1<FSharpResult`2<a, FSharpList`1<b>>> xs);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpAsync`1<FSharpResult`2<FSharpList`1<b>, FSharpList`1<c>>> traverseAsyncResultA(FSharpFunc`2<a, FSharpAsync`1<FSharpResult`2<b, c>>> f, FSharpList`1<a> xs);
    public static FSharpAsync`1<FSharpResult`2<FSharpList`1<a>, FSharpList`1<b>>> sequenceAsyncResultA(FSharpList`1<FSharpAsync`1<FSharpResult`2<a, b>>> xs);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal static FSharpOption`1<FSharpList`1<a>> traverseOptionM'(FSharpOption`1<FSharpList`1<a>> state, FSharpFunc`2<b, FSharpOption`1<a>> f, FSharpList`1<b> xs);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal static FSharpAsync`1<FSharpOption`1<FSharpList`1<a>>> traverseAsyncOptionM'(FSharpAsync`1<FSharpOption`1<FSharpList`1<a>>> state, FSharpFunc`2<b, FSharpAsync`1<FSharpOption`1<a>>> f, FSharpList`1<b> xs);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpOption`1<FSharpList`1<b>> traverseOptionM(FSharpFunc`2<a, FSharpOption`1<b>> f, FSharpList`1<a> xs);
    public static FSharpOption`1<FSharpList`1<a>> sequenceOptionM(FSharpList`1<FSharpOption`1<a>> xs);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpAsync`1<FSharpOption`1<FSharpList`1<b>>> traverseAsyncOptionM(FSharpFunc`2<a, FSharpAsync`1<FSharpOption`1<b>>> f, FSharpList`1<a> xs);
    public static FSharpAsync`1<FSharpOption`1<FSharpList`1<a>>> sequenceAsyncOptionM(FSharpList`1<FSharpAsync`1<FSharpOption`1<a>>> xs);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal static FSharpValueOption`1<FSharpList`1<a>> traverseVOptionM'(FSharpValueOption`1<FSharpList`1<a>> state, FSharpFunc`2<b, FSharpValueOption`1<a>> f, FSharpList`1<b> xs);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpValueOption`1<FSharpList`1<b>> traverseVOptionM(FSharpFunc`2<a, FSharpValueOption`1<b>> f, FSharpList`1<a> xs);
    public static FSharpValueOption`1<FSharpList`1<a>> sequenceVOptionM(FSharpList`1<FSharpValueOption`1<a>> xs);
}
[AutoOpenAttribute]
[CompilationMappingAttribute]
public static class FsToolkit.ErrorHandling.Operator.AsyncOption.AsyncOption : object {
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpAsync`1<FSharpOption`1<output>> op_LessBangGreater(FSharpFunc`2<input, output> mapper, FSharpAsync`1<FSharpOption`1<input>> input);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpAsync`1<FSharpOption`1<output>> op_LessMultiplyGreater(FSharpAsync`1<FSharpOption`1<FSharpFunc`2<input, output>>> applier, FSharpAsync`1<FSharpOption`1<input>> input);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpAsync`1<FSharpOption`1<output>> op_GreaterGreaterEquals(FSharpAsync`1<FSharpOption`1<input>> input, FSharpFunc`2<input, FSharpAsync`1<FSharpOption`1<output>>> binder);
}
[AutoOpenAttribute]
[CompilationMappingAttribute]
public static class FsToolkit.ErrorHandling.Operator.AsyncResult.AsyncResult : object {
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpAsync`1<FSharpResult`2<okOutput, error>> op_LessBangGreater(FSharpFunc`2<okInput, okOutput> mapper, FSharpAsync`1<FSharpResult`2<okInput, error>> input);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpAsync`1<FSharpResult`2<okOutput, error>> op_LessMultiplyGreater(FSharpAsync`1<FSharpResult`2<FSharpFunc`2<okInput, okOutput>, error>> applier, FSharpAsync`1<FSharpResult`2<okInput, error>> input);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpAsync`1<FSharpResult`2<okOutput, error>> op_GreaterGreaterEquals(FSharpAsync`1<FSharpResult`2<input, error>> input, FSharpFunc`2<input, FSharpAsync`1<FSharpResult`2<okOutput, error>>> binder);
}
[AutoOpenAttribute]
[CompilationMappingAttribute]
public static class FsToolkit.ErrorHandling.Operator.AsyncResultOption.AsyncResultOption : object {
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpAsync`1<FSharpResult`2<FSharpOption`1<okOutput>, error>> op_LessBangGreater(FSharpFunc`2<okInput, okOutput> mapper, FSharpAsync`1<FSharpResult`2<FSharpOption`1<okInput>, error>> input);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpAsync`1<FSharpResult`2<FSharpOption`1<okOutput>, error>> op_LessMultiplyGreater(FSharpAsync`1<FSharpResult`2<FSharpOption`1<FSharpFunc`2<okInput, okOutput>>, error>> applier, FSharpAsync`1<FSharpResult`2<FSharpOption`1<okInput>, error>> input);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpAsync`1<FSharpResult`2<FSharpOption`1<okOutput>, error>> op_GreaterGreaterEquals(FSharpAsync`1<FSharpResult`2<FSharpOption`1<okInput>, error>> input, FSharpFunc`2<okInput, FSharpAsync`1<FSharpResult`2<FSharpOption`1<okOutput>, error>>> binder);
}
[AutoOpenAttribute]
[CompilationMappingAttribute]
public static class FsToolkit.ErrorHandling.Operator.AsyncValidation.AsyncValidation : object {
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpAsync`1<FSharpResult`2<okOutput, FSharpList`1<error>>> op_LessBangGreater(FSharpFunc`2<okInput, okOutput> mapper, FSharpAsync`1<FSharpResult`2<okInput, FSharpList`1<error>>> input);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpAsync`1<FSharpResult`2<okOutput, FSharpList`1<error>>> op_LessBangHatGreater(FSharpFunc`2<okInput, okOutput> mapper, FSharpResult`2<okInput, error> input);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpAsync`1<FSharpResult`2<okOutput, FSharpList`1<error>>> op_LessMultiplyGreater(FSharpAsync`1<FSharpResult`2<FSharpFunc`2<okInput, okOutput>, FSharpList`1<error>>> applier, FSharpAsync`1<FSharpResult`2<okInput, FSharpList`1<error>>> input);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpAsync`1<FSharpResult`2<okOutput, FSharpList`1<error>>> op_LessMultiplyHatGreater(FSharpAsync`1<FSharpResult`2<FSharpFunc`2<okInput, okOutput>, FSharpList`1<error>>> applier, FSharpResult`2<okInput, error> input);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpAsync`1<FSharpResult`2<okOutput, FSharpList`1<error>>> op_GreaterGreaterEquals(FSharpAsync`1<FSharpResult`2<okInput, FSharpList`1<error>>> input, FSharpFunc`2<okInput, FSharpAsync`1<FSharpResult`2<okOutput, FSharpList`1<error>>>> binder);
}
[AutoOpenAttribute]
[CompilationMappingAttribute]
public static class FsToolkit.ErrorHandling.Operator.Option.Option : object {
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpOption`1<output> op_GreaterGreaterEquals(FSharpOption`1<input> input, FSharpFunc`2<input, FSharpOption`1<output>> binder);
}
[AutoOpenAttribute]
[CompilationMappingAttribute]
public static class FsToolkit.ErrorHandling.Operator.Result.Result : object {
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpResult`2<okOutput, error> op_LessBangGreater(FSharpFunc`2<okInput, okOutput> mapper, FSharpResult`2<okInput, error> input);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpResult`2<okOutput, error> op_LessMultiplyGreater(FSharpResult`2<FSharpFunc`2<okInput, okOutput>, error> applier, FSharpResult`2<okInput, error> input);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpResult`2<okOutput, error> op_GreaterGreaterEquals(FSharpResult`2<input, error> input, FSharpFunc`2<input, FSharpResult`2<okOutput, error>> binder);
}
[AutoOpenAttribute]
[CompilationMappingAttribute]
public static class FsToolkit.ErrorHandling.Operator.ResultOption.ResultOption : object {
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpResult`2<FSharpOption`1<okOutput>, error> op_LessBangGreater(FSharpFunc`2<okInput, okOutput> mapper, FSharpResult`2<FSharpOption`1<okInput>, error> input);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpResult`2<FSharpOption`1<okOutput>, error> op_LessMultiplyGreater(FSharpResult`2<FSharpOption`1<FSharpFunc`2<okInput, okOutput>>, error> applier, FSharpResult`2<FSharpOption`1<okInput>, error> input);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpResult`2<FSharpOption`1<okOutput>, error> op_LessMultiplyHatGreater(FSharpResult`2<FSharpOption`1<FSharpFunc`2<okInput, okOutput>>, error> applier, FSharpResult`2<okInput, error> input);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpResult`2<FSharpOption`1<okOutput>, error> op_GreaterGreaterEquals(FSharpResult`2<FSharpOption`1<okInput>, error> input, FSharpFunc`2<okInput, FSharpResult`2<FSharpOption`1<okOutput>, error>> binder);
}
[AutoOpenAttribute]
[CompilationMappingAttribute]
public static class FsToolkit.ErrorHandling.Operator.Validation.Validation : object {
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpResult`2<okOutput, FSharpList`1<error>> op_LessBangGreater(FSharpFunc`2<okInput, okOutput> mapper, FSharpResult`2<okInput, FSharpList`1<error>> input);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpResult`2<okOutput, FSharpList`1<error>> op_LessBangHatGreater(FSharpFunc`2<okInput, okOutput> mapper, FSharpResult`2<okInput, error> input);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpResult`2<okOutput, FSharpList`1<error>> op_LessMultiplyGreater(FSharpResult`2<FSharpFunc`2<okInput, okOutput>, FSharpList`1<error>> applier, FSharpResult`2<okInput, FSharpList`1<error>> input);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpResult`2<okOutput, FSharpList`1<error>> op_LessMultiplyHatGreater(FSharpResult`2<FSharpFunc`2<okInput, okOutput>, FSharpList`1<error>> applier, FSharpResult`2<okInput, error> input);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpResult`2<okOutput, FSharpList`1<error>> op_GreaterGreaterEquals(FSharpResult`2<okInput, FSharpList`1<error>> input, FSharpFunc`2<okInput, FSharpResult`2<okOutput, FSharpList`1<error>>> binder);
}
[RequireQualifiedAccessAttribute]
[CompilationMappingAttribute]
public static class FsToolkit.ErrorHandling.Option : object {
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpOption`1<TOutput> bind(FSharpFunc`2<TInput, FSharpOption`1<TOutput>> mapper, FSharpOption`1<TInput> input);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpOption`1<TOutput> map(FSharpFunc`2<TInput, TOutput> mapper, FSharpOption`1<TInput> input);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpOption`1<TOutput> map2(FSharpFunc`2<TInput1, FSharpFunc`2<TInput2, TOutput>> mapper, FSharpOption`1<TInput1> input1, FSharpOption`1<TInput2> input2);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpOption`1<TOutput> map3(FSharpFunc`2<TInput1, FSharpFunc`2<TInput2, FSharpFunc`2<TInput3, TOutput>>> mapper, FSharpOption`1<TInput1> input1, FSharpOption`1<TInput2> input2, FSharpOption`1<TInput3> input3);
    public static FSharpOption`1<Unit> ignore(FSharpOption`1<T> opt);
    public static FSharpOption`1<value> ofValueOption(FSharpValueOption`1<value> vopt);
    public static FSharpValueOption`1<value> toValueOption(FSharpOption`1<value> opt);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpResult`2<FSharpOption`1<okOutput>, error> traverseResult(FSharpFunc`2<input, FSharpResult`2<okOutput, error>> binder, FSharpOption`1<input> input);
    public static FSharpResult`2<FSharpOption`1<ok>, error> sequenceResult(FSharpOption`1<FSharpResult`2<ok, error>> opt);
    public static FSharpOption`1<value> tryParse(string valueToParse);
    public static FSharpOption`1<value> tryParse$W(FSharpFunc`2<string, FSharpFunc`2<value&, bool>> tryParse, string valueToParse);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpOption`1<value> tryGetValue(key key, Dictionary dictionary);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpOption`1<value> tryGetValue$W(FSharpFunc`2<Dictionary, FSharpFunc`2<key, FSharpFunc`2<value&, bool>>> tryGetValue, key key, Dictionary dictionary);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpOption`1<Tuple`2<left, right>> zip(FSharpOption`1<left> left, FSharpOption`1<right> right);
    public static FSharpOption`1<ok> ofResult(FSharpResult`2<ok, error> r);
    public static FSharpOption`1<nullableValue> ofNull(nullableValue value);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpOption`1<nullableValue> bindNull(FSharpFunc`2<value, nullableValue> binder, FSharpOption`1<value> option);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static output either(FSharpFunc`2<a, output> onSome, FSharpFunc`2<Unit, output> onNone, FSharpOption`1<a> input);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpOption`1<T> teeSome(FSharpFunc`2<T, Unit> f, FSharpOption`1<T> opt);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpOption`1<T> teeNone(FSharpFunc`2<Unit, Unit> f, FSharpOption`1<T> opt);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpOption`1<T> teeIf(FSharpFunc`2<T, bool> predicate, FSharpFunc`2<T, Unit> f, FSharpOption`1<T> opt);
    public static FSharpOption`1<a> ofPair(bool input_0, a x);
}
[AutoOpenAttribute]
[CompilationMappingAttribute]
public static class FsToolkit.ErrorHandling.OptionCE : object {
    [CompilationMappingAttribute]
public static OptionBuilder option { get; }
    public static OptionBuilder get_option();
}
[AutoOpenAttribute]
[CompilationMappingAttribute]
public static class FsToolkit.ErrorHandling.OptionExtensions : object {
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static a OptionBuilder.Source(OptionBuilder _, a s);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpOption`1<value> OptionBuilder.Source(OptionBuilder _, Nullable`1<value> nullable);
}
[AutoOpenAttribute]
[CompilationMappingAttribute]
public static class FsToolkit.ErrorHandling.OptionExtensionsLower : object {
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpOption`1<value> OptionBuilder.Source(OptionBuilder _, value nullableObj);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpOption`1<string> OptionBuilder.Source(OptionBuilder _, string m);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpOption`1<Tuple`2<left, right>> OptionBuilder.MergeSources(OptionBuilder _, left nullableObj1, FSharpOption`1<right> option2);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpOption`1<Tuple`2<left, right>> OptionBuilder.MergeSources(OptionBuilder _, FSharpOption`1<left> option1, right nullableObj2);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpOption`1<Tuple`2<left, right>> OptionBuilder.MergeSources(OptionBuilder _, left nullableObj1, right nullableObj2);
}
[RequireQualifiedAccessAttribute]
[CompilationMappingAttribute]
public static class FsToolkit.ErrorHandling.Result : object {
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpResult`2<okOutput, error> map(FSharpFunc`2<okInput, okOutput> mapper, FSharpResult`2<okInput, error> input);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpResult`2<ok, errorOutput> mapError(FSharpFunc`2<errorInput, errorOutput> errorMapper, FSharpResult`2<ok, errorInput> input);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpResult`2<okOutput, error> bind(FSharpFunc`2<okInput, FSharpResult`2<okOutput, error>> binder, FSharpResult`2<okInput, error> input);
    public static bool isOk(FSharpResult`2<ok, error> value);
    public static bool isError(FSharpResult`2<ok, error> value);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static output either(FSharpFunc`2<okInput, output> onOk, FSharpFunc`2<errorInput, output> onError, FSharpResult`2<okInput, errorInput> input);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpResult`2<okOutput, errorOutput> eitherMap(FSharpFunc`2<okInput, okOutput> onOk, FSharpFunc`2<errorInput, errorOutput> onError, FSharpResult`2<okInput, errorInput> input);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpResult`2<okOutput, error> apply(FSharpResult`2<FSharpFunc`2<okInput, okOutput>, error> applier, FSharpResult`2<okInput, error> input);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpResult`2<okOutput, error> map2(FSharpFunc`2<okInput1, FSharpFunc`2<okInput2, okOutput>> mapper, FSharpResult`2<okInput1, error> input1, FSharpResult`2<okInput2, error> input2);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpResult`2<okOutput, error> map3(FSharpFunc`2<okInput1, FSharpFunc`2<okInput2, FSharpFunc`2<okInput3, okOutput>>> mapper, FSharpResult`2<okInput1, error> input1, FSharpResult`2<okInput2, error> input2, FSharpResult`2<okInput3, error> input3);
    public static FSharpResult`2<ok, error> ofChoice(FSharpChoice`2<ok, error> input);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpResult`2<b, Tuple`2<string, c>> tryCreate(string fieldName, a x);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpResult`2<b, Tuple`2<string, c>> tryCreate$W(FSharpFunc`2<a, FSharpResult`2<b, c>> tryCreate, string fieldName, a x);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpResult`2<ok, errorOutput> orElse(FSharpResult`2<ok, errorOutput> ifError, FSharpResult`2<ok, error> result);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpResult`2<ok, errorOutput> orElseWith(FSharpFunc`2<error, FSharpResult`2<ok, errorOutput>> ifErrorFunc, FSharpResult`2<ok, error> result);
    public static FSharpResult`2<Unit, error> ignore(FSharpResult`2<ok, error> result);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpResult`2<Unit, error> requireTrue(error error, bool value);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpResult`2<Unit, error> requireFalse(error error, bool value);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpResult`2<ok, error> requireSome(error error, FSharpOption`1<ok> option);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpResult`2<Unit, error> requireNone(error error, FSharpOption`1<value> option);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpResult`2<ok, error> requireValueSome(error error, FSharpValueOption`1<ok> voption);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpResult`2<Unit, error> requireValueNone(error error, FSharpValueOption`1<value> voption);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpResult`2<ok, error> requireNotNull(error error, ok value);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpResult`2<Unit, error> requireEqualTo(value other, error error, value this);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpResult`2<Unit, error> requireEqual(value x1, value x2, error error);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpResult`2<Unit, error> requireEmpty(error error, a xs);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpResult`2<Unit, error> requireNotEmpty(error error, a xs);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpResult`2<ok, error> requireHead(error error, a xs);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpResult`2<ok, error> setError(error error, FSharpResult`2<ok, errorIgnored> result);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpResult`2<ok, error> withError(error error, FSharpResult`2<ok, Unit> result);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static ok defaultValue(ok ifError, FSharpResult`2<ok, error> result);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static error defaultError(error ifOk, FSharpResult`2<ok, error> result);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static ok defaultWith(FSharpFunc`2<error, ok> ifErrorThunk, FSharpResult`2<ok, error> result);
    public static void ignoreError(FSharpResult`2<Unit, error> result);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpResult`2<ok, error> teeIf(FSharpFunc`2<ok, bool> predicate, FSharpFunc`2<ok, Unit> sideEffect, FSharpResult`2<ok, error> result);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpResult`2<ok, error> teeErrorIf(FSharpFunc`2<error, bool> predicate, FSharpFunc`2<error, Unit> sideEffect, FSharpResult`2<ok, error> result);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpResult`2<ok, error> tee(FSharpFunc`2<ok, Unit> sideEffect, FSharpResult`2<ok, error> result);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpResult`2<ok, error> teeError(FSharpFunc`2<error, Unit> sideEffect, FSharpResult`2<ok, error> result);
    public static FSharpAsync`1<FSharpResult`2<ok, error>> sequenceAsync(FSharpResult`2<FSharpAsync`1<ok>, error> resAsync);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpAsync`1<FSharpResult`2<okOutput, error>> traverseAsync(FSharpFunc`2<okInput, FSharpAsync`1<okOutput>> f, FSharpResult`2<okInput, error> res);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static ok valueOr(FSharpFunc`2<error, ok> f, FSharpResult`2<ok, error> res);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpResult`2<Tuple`2<leftOk, rightOk>, error> zip(FSharpResult`2<leftOk, error> left, FSharpResult`2<rightOk, error> right);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpResult`2<ok, Tuple`2<leftError, rightError>> zipError(FSharpResult`2<ok, leftError> left, FSharpResult`2<ok, rightError> right);
}
[AutoOpenAttribute]
[CompilationMappingAttribute]
public static class FsToolkit.ErrorHandling.ResultCE : object {
    [CompilationMappingAttribute]
public static ResultBuilder result { get; }
    public static ResultBuilder get_result();
}
[AutoOpenAttribute]
[CompilationMappingAttribute]
public static class FsToolkit.ErrorHandling.ResultCEChoiceExtensions : object {
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpResult`2<ok, error> ResultBuilder.Source(ResultBuilder _, FSharpChoice`2<ok, error> choice);
}
[AutoOpenAttribute]
[CompilationMappingAttribute]
public static class FsToolkit.ErrorHandling.ResultCEExtensions : object {
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static a ResultBuilder.Source(ResultBuilder _, a s);
}
[RequireQualifiedAccessAttribute]
[CompilationMappingAttribute]
public static class FsToolkit.ErrorHandling.ResultOption : object {
    public static FSharpResult`2<FSharpOption`1<a>, b> retn(a x);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpResult`2<FSharpOption`1<okOutput>, error> map(FSharpFunc`2<okInput, okOutput> mapper, FSharpResult`2<FSharpOption`1<okInput>, error> input);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpResult`2<FSharpOption`1<ok>, errorOutput> mapError(FSharpFunc`2<errorInput, errorOutput> mapper, FSharpResult`2<FSharpOption`1<ok>, errorInput> input);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpResult`2<FSharpOption`1<okOutput>, error> bind(FSharpFunc`2<okInput, FSharpResult`2<FSharpOption`1<okOutput>, error>> binder, FSharpResult`2<FSharpOption`1<okInput>, error> input);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpResult`2<FSharpOption`1<okOutput>, error> apply(FSharpResult`2<FSharpOption`1<FSharpFunc`2<okInput, okOutput>>, error> applier, FSharpResult`2<FSharpOption`1<okInput>, error> input);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpResult`2<FSharpOption`1<okOutput>, error> map2(FSharpFunc`2<okInput1, FSharpFunc`2<okInput2, okOutput>> mapper, FSharpResult`2<FSharpOption`1<okInput1>, error> input1, FSharpResult`2<FSharpOption`1<okInput2>, error> input2);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpResult`2<FSharpOption`1<okOutput>, error> map3(FSharpFunc`2<okInput1, FSharpFunc`2<okInput2, FSharpFunc`2<okInput3, okOutput>>> mapper, FSharpResult`2<FSharpOption`1<okInput1>, error> input1, FSharpResult`2<FSharpOption`1<okInput2>, error> input2, FSharpResult`2<FSharpOption`1<okInput3>, error> input3);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpResult`2<FSharpOption`1<Tuple`2<leftOk, rightOk>>, error> zip(FSharpResult`2<FSharpOption`1<leftOk>, error> left, FSharpResult`2<FSharpOption`1<rightOk>, error> right);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpResult`2<FSharpOption`1<ok>, Tuple`2<leftError, rightError>> zipError(FSharpResult`2<FSharpOption`1<ok>, leftError> left, FSharpResult`2<FSharpOption`1<ok>, rightError> right);
    public static FSharpResult`2<FSharpOption`1<Unit>, error> ignore(FSharpResult`2<FSharpOption`1<ok>, error> resultOpt);
    public static FSharpResult`2<FSharpOption`1<ok>, error> ofResult(FSharpResult`2<ok, error> result);
    public static FSharpResult`2<FSharpOption`1<T>, error> ofOption(FSharpOption`1<T> option);
    public static FSharpResult`2<FSharpOption`1<ok>, error> ofChoice(FSharpChoice`2<ok, error> choice);
}
[AutoOpenAttribute]
[CompilationMappingAttribute]
public static class FsToolkit.ErrorHandling.ResultOptionCE : object {
    [CompilationMappingAttribute]
public static ResultOptionBuilder resultOption { get; }
    public static ResultOptionBuilder get_resultOption();
}
[AutoOpenAttribute]
[CompilationMappingAttribute]
public static class FsToolkit.ErrorHandling.ResultOptionCEExtensions : object {
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static a ResultOptionBuilder.Source(ResultOptionBuilder _, a s);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpResult`2<FSharpOption`1<ok>, error> ResultOptionBuilder.Source(ResultOptionBuilder _, FSharpResult`2<ok, error> result);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpResult`2<FSharpOption`1<T>, error> ResultOptionBuilder.Source(ResultOptionBuilder _, FSharpOption`1<T> option);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpResult`2<FSharpOption`1<T>, Error> ResultOptionBuilder.Source(ResultOptionBuilder _, FSharpChoice`2<T, Error> choice);
}
[RequireQualifiedAccessAttribute]
[CompilationMappingAttribute]
public static class FsToolkit.ErrorHandling.Seq : object {
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpResult`2<IEnumerable`1<okOutput>, error> traverseResultM'(FSharpResult`2<IEnumerable`1<okOutput>, error> state, FSharpFunc`2<okInput, FSharpResult`2<okOutput, error>> f, IEnumerable`1<okInput> xs);
    [CompilerGeneratedAttribute]
internal static FSharpResult`2<IEnumerable`1<b>, c> loop@23-2(FSharpFunc`2<a, FSharpResult`2<b, c>> f, IEnumerator`1<a> enumerator, IEnumerable`1<b> oks);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpResult`2<IEnumerable`1<b>, c> traverseResultM(FSharpFunc`2<a, FSharpResult`2<b, c>> f, IEnumerable`1<a> xs);
    public static FSharpResult`2<IEnumerable`1<a>, b> sequenceResultM(IEnumerable`1<FSharpResult`2<a, b>> xs);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpResult`2<IEnumerable`1<okOutput>, IEnumerable`1<error>> traverseResultA'(FSharpResult`2<IEnumerable`1<okOutput>, IEnumerable`1<error>> state, FSharpFunc`2<okInput, FSharpResult`2<okOutput, error>> f, IEnumerable`1<okInput> xs);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpResult`2<IEnumerable`1<b>, IEnumerable`1<c>> traverseResultA(FSharpFunc`2<a, FSharpResult`2<b, c>> f, IEnumerable`1<a> xs);
    public static FSharpResult`2<IEnumerable`1<a>, IEnumerable`1<b>> sequenceResultA(IEnumerable`1<FSharpResult`2<a, b>> xs);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpAsync`1<FSharpResult`2<IEnumerable`1<okOutput>, error>> traverseAsyncResultM'(FSharpAsync`1<FSharpResult`2<IEnumerable`1<okOutput>, error>> state, FSharpFunc`2<okInput, FSharpAsync`1<FSharpResult`2<okOutput, error>>> f, IEnumerable`1<okInput> xs);
    [CompilerGeneratedAttribute]
internal static FSharpAsync`1<FSharpResult`2<IEnumerable`1<b>, c>> loop@118-10(FSharpFunc`2<a, FSharpAsync`1<FSharpResult`2<b, c>>> f, IEnumerator`1<a> enumerator, IEnumerable`1<b> oks);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpAsync`1<FSharpResult`2<IEnumerable`1<b>, c>> traverseAsyncResultM(FSharpFunc`2<a, FSharpAsync`1<FSharpResult`2<b, c>>> f, IEnumerable`1<a> xs);
    public static FSharpAsync`1<FSharpResult`2<IEnumerable`1<a>, b>> sequenceAsyncResultM(IEnumerable`1<FSharpAsync`1<FSharpResult`2<a, b>>> xs);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpAsync`1<FSharpResult`2<IEnumerable`1<okOutput>, IEnumerable`1<error>>> traverseAsyncResultA'(FSharpAsync`1<FSharpResult`2<IEnumerable`1<okOutput>, IEnumerable`1<error>>> state, FSharpFunc`2<okInput, FSharpAsync`1<FSharpResult`2<okOutput, error>>> f, IEnumerable`1<okInput> xs);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpAsync`1<FSharpResult`2<IEnumerable`1<b>, IEnumerable`1<c>>> traverseAsyncResultA(FSharpFunc`2<a, FSharpAsync`1<FSharpResult`2<b, c>>> f, IEnumerable`1<a> xs);
    public static FSharpAsync`1<FSharpResult`2<IEnumerable`1<a>, IEnumerable`1<b>>> sequenceAsyncResultA(IEnumerable`1<FSharpAsync`1<FSharpResult`2<a, b>>> xs);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpOption`1<IEnumerable`1<okOutput>> traverseOptionM'(FSharpOption`1<IEnumerable`1<okOutput>> state, FSharpFunc`2<okInput, FSharpOption`1<okOutput>> f, IEnumerable`1<okInput> xs);
    [CompilerGeneratedAttribute]
internal static FSharpOption`1<IEnumerable`1<b>> loop@224-13(FSharpFunc`2<a, FSharpOption`1<b>> f, IEnumerator`1<a> enumerator, IEnumerable`1<b> values);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpOption`1<IEnumerable`1<b>> traverseOptionM(FSharpFunc`2<a, FSharpOption`1<b>> f, IEnumerable`1<a> xs);
    public static FSharpOption`1<IEnumerable`1<a>> sequenceOptionM(IEnumerable`1<FSharpOption`1<a>> xs);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpAsync`1<FSharpOption`1<IEnumerable`1<okOutput>>> traverseAsyncOptionM'(FSharpAsync`1<FSharpOption`1<IEnumerable`1<okOutput>>> state, FSharpFunc`2<okInput, FSharpAsync`1<FSharpOption`1<okOutput>>> f, IEnumerable`1<okInput> xs);
    [CompilerGeneratedAttribute]
internal static FSharpAsync`1<FSharpOption`1<IEnumerable`1<b>>> loop@275-21(FSharpFunc`2<a, FSharpAsync`1<FSharpOption`1<b>>> f, IEnumerator`1<a> enumerator, IEnumerable`1<b> values);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpAsync`1<FSharpOption`1<IEnumerable`1<b>>> traverseAsyncOptionM(FSharpFunc`2<a, FSharpAsync`1<FSharpOption`1<b>>> f, IEnumerable`1<a> xs);
    public static FSharpAsync`1<FSharpOption`1<IEnumerable`1<a>>> sequenceAsyncOptionM(IEnumerable`1<FSharpAsync`1<FSharpOption`1<a>>> xs);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpValueOption`1<IEnumerable`1<okOutput>> traverseVOptionM'(FSharpValueOption`1<IEnumerable`1<okOutput>> state, FSharpFunc`2<okInput, FSharpValueOption`1<okOutput>> f, IEnumerable`1<okInput> xs);
    [CompilerGeneratedAttribute]
internal static FSharpValueOption`1<IEnumerable`1<b>> loop@332-24(FSharpFunc`2<a, FSharpValueOption`1<b>> f, IEnumerator`1<a> enumerator, IEnumerable`1<b> values);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpValueOption`1<IEnumerable`1<b>> traverseVOptionM(FSharpFunc`2<a, FSharpValueOption`1<b>> f, IEnumerable`1<a> xs);
    public static FSharpValueOption`1<IEnumerable`1<a>> sequenceVOptionM(IEnumerable`1<FSharpValueOption`1<a>> xs);
}
[RequireQualifiedAccessAttribute]
[CompilationMappingAttribute]
public static class FsToolkit.ErrorHandling.Validation : object {
    public static FSharpResult`2<ok, FSharpList`1<error>> ok(ok value);
    public static FSharpResult`2<ok, FSharpList`1<error>> error(error error);
    public static FSharpResult`2<ok, FSharpList`1<error>> ofResult(FSharpResult`2<ok, error> result);
    public static FSharpResult`2<ok, FSharpList`1<error>> ofChoice(FSharpChoice`2<ok, error> choice);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpResult`2<okOutput, FSharpList`1<error>> apply(FSharpResult`2<FSharpFunc`2<okInput, okOutput>, FSharpList`1<error>> applier, FSharpResult`2<okInput, FSharpList`1<error>> input);
    public static FSharpResult`2<ok, FSharpList`1<error>> retn(ok value);
    public static FSharpResult`2<ok, FSharpList`1<error>> returnError(error error);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpResult`2<ok, FSharpList`1<errorOutput>> orElse(FSharpResult`2<ok, FSharpList`1<errorOutput>> ifError, FSharpResult`2<ok, FSharpList`1<errorInput>> result);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpResult`2<ok, FSharpList`1<errorOutput>> orElseWith(FSharpFunc`2<FSharpList`1<errorInput>, FSharpResult`2<ok, FSharpList`1<errorOutput>>> ifErrorFunc, FSharpResult`2<ok, FSharpList`1<errorInput>> result);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpResult`2<okOutput, FSharpList`1<error>> map(FSharpFunc`2<okInput, okOutput> mapper, FSharpResult`2<okInput, FSharpList`1<error>> input);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpResult`2<okOutput, FSharpList`1<error>> map2(FSharpFunc`2<okInput1, FSharpFunc`2<okInput2, okOutput>> mapper, FSharpResult`2<okInput1, FSharpList`1<error>> input1, FSharpResult`2<okInput2, FSharpList`1<error>> input2);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpResult`2<okOutput, FSharpList`1<error>> map3(FSharpFunc`2<okInput1, FSharpFunc`2<okInput2, FSharpFunc`2<okInput3, okOutput>>> mapper, FSharpResult`2<okInput1, FSharpList`1<error>> input1, FSharpResult`2<okInput2, FSharpList`1<error>> input2, FSharpResult`2<okInput3, FSharpList`1<error>> input3);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpResult`2<ok, FSharpList`1<errorOutput>> mapError(FSharpFunc`2<errorInput, errorOutput> errorMapper, FSharpResult`2<ok, FSharpList`1<errorInput>> input);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpResult`2<ok, FSharpList`1<errorOutput>> mapErrors(FSharpFunc`2<FSharpList`1<errorInput>, FSharpList`1<errorOutput>> errorMapper, FSharpResult`2<ok, FSharpList`1<errorInput>> input);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpResult`2<okOutput, FSharpList`1<error>> bind(FSharpFunc`2<okInput, FSharpResult`2<okOutput, FSharpList`1<error>>> binder, FSharpResult`2<okInput, FSharpList`1<error>> input);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpResult`2<Tuple`2<left, right>, FSharpList`1<error>> zip(FSharpResult`2<left, FSharpList`1<error>> left, FSharpResult`2<right, FSharpList`1<error>> right);
}
[AutoOpenAttribute]
[CompilationMappingAttribute]
public static class FsToolkit.ErrorHandling.ValidationCE : object {
    [CompilationMappingAttribute]
public static ValidationBuilder validation { get; }
    public static ValidationBuilder get_validation();
}
[AutoOpenAttribute]
[CompilationMappingAttribute]
public static class FsToolkit.ErrorHandling.ValidationCEExtensions : object {
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static a ValidationBuilder.Source(ValidationBuilder _, a s);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpResult`2<ok, FSharpList`1<error>> ValidationBuilder.Source(ValidationBuilder _, FSharpResult`2<ok, error> s);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpResult`2<ok, FSharpList`1<error>> ValidationBuilder.Source(ValidationBuilder _, FSharpChoice`2<ok, error> choice);
}
[RequireQualifiedAccessAttribute]
[CompilationMappingAttribute]
public static class FsToolkit.ErrorHandling.ValueOption : object {
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpValueOption`1<b> bind(FSharpFunc`2<a, FSharpValueOption`1<b>> f, FSharpValueOption`1<a> x);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpValueOption`1<b> map(FSharpFunc`2<a, b> f, FSharpValueOption`1<a> x);
    public static FSharpValueOption`1<value> ofOption(FSharpOption`1<value> opt);
    public static FSharpOption`1<value> toOption(FSharpValueOption`1<value> vopt);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpResult`2<FSharpValueOption`1<okOutput>, error> traverseResult(FSharpFunc`2<okInput, FSharpResult`2<okOutput, error>> binder, FSharpValueOption`1<okInput> input);
    public static FSharpResult`2<FSharpValueOption`1<okOutput>, error> sequenceResult(FSharpValueOption`1<FSharpResult`2<okOutput, error>> opt);
    public static FSharpValueOption`1<value> tryParse(string valueToParse);
    public static FSharpValueOption`1<value> tryParse$W(FSharpFunc`2<string, FSharpFunc`2<value&, bool>> tryParse, string valueToParse);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpValueOption`1<value> tryGetValue(key key, Dictionary dictionary);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpValueOption`1<value> tryGetValue$W(FSharpFunc`2<Dictionary, FSharpFunc`2<key, FSharpFunc`2<value&, bool>>> tryGetValue, key key, Dictionary dictionary);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpValueOption`1<Tuple`2<left, right>> zip(FSharpValueOption`1<left> left, FSharpValueOption`1<right> right);
    public static FSharpValueOption`1<ok> ofResult(FSharpResult`2<ok, error> result);
    public static FSharpValueOption`1<nullableValue> ofNull(nullableValue value);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpValueOption`1<nullableValue> bindNull(FSharpFunc`2<value, nullableValue> binder, FSharpValueOption`1<value> voption);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static output either(FSharpFunc`2<a, output> onSome, FSharpFunc`2<Unit, output> onNone, FSharpValueOption`1<a> input);
    public static FSharpValueOption`1<a> ofPair(bool input_0, a x);
}
[AutoOpenAttribute]
[CompilationMappingAttribute]
public static class FsToolkit.ErrorHandling.ValueOptionCE : object {
    [CompilationMappingAttribute]
public static ValueOptionBuilder voption { get; }
    public static ValueOptionBuilder get_voption();
}
[AutoOpenAttribute]
[CompilationMappingAttribute]
public static class FsToolkit.ErrorHandling.ValueOptionExtensions : object {
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static a ValueOptionBuilder.Source(ValueOptionBuilder _, a s);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpValueOption`1<a> ValueOptionBuilder.Source(ValueOptionBuilder _, Nullable`1<a> nullable);
}
[AutoOpenAttribute]
[CompilationMappingAttribute]
public static class FsToolkit.ErrorHandling.ValueOptionExtensionsLower : object {
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpValueOption`1<a> ValueOptionBuilder.Source(ValueOptionBuilder _, a nullableObj);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpValueOption`1<string> ValueOptionBuilder.Source(ValueOptionBuilder _, string m);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpValueOption`1<Tuple`2<e, f>> ValueOptionBuilder.MergeSources(ValueOptionBuilder _, e nullableObj1, FSharpValueOption`1<f> option2);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpValueOption`1<Tuple`2<c, d>> ValueOptionBuilder.MergeSources(ValueOptionBuilder _, FSharpValueOption`1<c> option1, d nullableObj2);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpValueOption`1<Tuple`2<a, b>> ValueOptionBuilder.MergeSources(ValueOptionBuilder _, a nullableObj1, b nullableObj2);
}
