public class RestSharp.Portable.AuthenticationChallengeHandler : object {
    private Dictionary`2<string, AuthenticatorInfo> _authenticators;
    [CompilerGeneratedAttribute]
private AuthHeader <Header>k__BackingField;
    public IEnumerable`1<Tuple`2<string, IAuthenticator>> Authenticators { get; }
    public AuthHeader Header { get; }
    public AuthenticationChallengeHandler(AuthHeader authHeader);
    public IEnumerable`1<Tuple`2<string, IAuthenticator>> get_Authenticators();
    [CompilerGeneratedAttribute]
public AuthHeader get_Header();
    public void Register(string method, IAuthenticator authenticator, int securityLevel);
    public void Unregister(string method);
    public sealed virtual bool CanPreAuthenticate(IRestClient client, IRestRequest request, ICredentials credentials);
    public sealed virtual bool CanPreAuthenticate(IHttpClient client, IHttpRequestMessage request, ICredentials credentials);
    [AsyncStateMachineAttribute("RestSharp.Portable.AuthenticationChallengeHandler/<PreAuthenticate>d__11")]
public sealed virtual Task PreAuthenticate(IRestClient client, IRestRequest request, ICredentials credentials);
    [AsyncStateMachineAttribute("RestSharp.Portable.AuthenticationChallengeHandler/<PreAuthenticate>d__12")]
public sealed virtual Task PreAuthenticate(IHttpClient client, IHttpRequestMessage request, ICredentials credentials);
    public sealed virtual bool CanHandleChallenge(IHttpClient client, IHttpRequestMessage request, ICredentials credentials, IHttpResponseMessage response);
    public sealed virtual Task HandleChallenge(IHttpClient client, IHttpRequestMessage request, ICredentials credentials, IHttpResponseMessage response);
    [CompilerGeneratedAttribute]
private bool <CanHandleChallenge>b__13_0(AuthHeaderInfo x);
    [CompilerGeneratedAttribute]
private AuthenticatorInfo <CanHandleChallenge>b__13_1(AuthHeaderInfo x);
    [CompilerGeneratedAttribute]
private bool <HandleChallenge>b__14_0(AuthHeaderInfo x);
    [CompilerGeneratedAttribute]
private AuthenticatorInfo <HandleChallenge>b__14_1(AuthHeaderInfo x);
}
public class RestSharp.Portable.Authenticators.HttpBasicAuthenticator : object {
    public static string AuthenticationMethod;
    private AuthHeader _authHeader;
    private string _authToken;
    private NetworkCredential _authCredential;
    protected bool HasAuthorizationToken { get; }
    public HttpBasicAuthenticator(AuthHeader authHeader);
    public HttpBasicAuthenticator(NetworkCredential credentials);
    public HttpBasicAuthenticator(NetworkCredential credentials, AuthHeader authHeader);
    public HttpBasicAuthenticator(string userName, string password);
    public HttpBasicAuthenticator(string userName, string password, AuthHeader authHeader);
    protected bool get_HasAuthorizationToken();
    public sealed virtual bool CanPreAuthenticate(IRestClient client, IRestRequest request, ICredentials credentials);
    public sealed virtual bool CanPreAuthenticate(IHttpClient client, IHttpRequestMessage request, ICredentials credentials);
    public sealed virtual Task PreAuthenticate(IRestClient client, IRestRequest request, ICredentials credentials);
    public sealed virtual Task PreAuthenticate(IHttpClient client, IHttpRequestMessage request, ICredentials credentials);
    public virtual bool CanHandleChallenge(IHttpClient client, IHttpRequestMessage request, ICredentials credentials, IHttpResponseMessage response);
    public sealed virtual Task HandleChallenge(IHttpClient client, IHttpRequestMessage request, ICredentials credentials, IHttpResponseMessage response);
}
public class RestSharp.Portable.Authenticators.HttpDigestAuthenticator : object {
    public static string AuthenticationMethod;
    private AuthHeader _authHeader;
    private NetworkCredential _authCredential;
    private string _realm;
    private string _nonce;
    private QualityOfProtection _qop;
    private string _cnonce;
    private string _opaque;
    private Algorithm _algorithm;
    private DateTime _cnonceDate;
    private int _nc;
    protected bool HasAuthorizationToken { get; }
    public HttpDigestAuthenticator(AuthHeader authHeader);
    protected bool get_HasAuthorizationToken();
    public sealed virtual bool CanPreAuthenticate(IRestClient client, IRestRequest request, ICredentials credentials);
    public sealed virtual bool CanPreAuthenticate(IHttpClient client, IHttpRequestMessage request, ICredentials credentials);
    public sealed virtual Task PreAuthenticate(IRestClient client, IRestRequest request, ICredentials credentials);
    [AsyncStateMachineAttribute("RestSharp.Portable.Authenticators.HttpDigestAuthenticator/<PreAuthenticate>d__20")]
public sealed virtual Task PreAuthenticate(IHttpClient client, IHttpRequestMessage request, ICredentials credentials);
    public virtual bool CanHandleChallenge(IHttpClient client, IHttpRequestMessage request, ICredentials credentials, IHttpResponseMessage response);
    public sealed virtual Task HandleChallenge(IHttpClient client, IHttpRequestMessage request, ICredentials credentials, IHttpResponseMessage response);
    private static string CalculateMd5Hash(string input);
    private static string CalculateMd5Hash(Byte[] inputBytes);
    private static string GrabHeaderVar(string varName, string header, string defaultValue);
    [AsyncStateMachineAttribute("RestSharp.Portable.Authenticators.HttpDigestAuthenticator/<GetDigestHeader>d__26")]
private Task`1<string> GetDigestHeader(IHttpClient client, IHttpRequestMessage request, NetworkCredential credential);
    private void ParseResponseHeader(string authenticateHeader);
}
public class RestSharp.Portable.Authenticators.HttpHiddenBasicAuthenticator : HttpBasicAuthenticator {
    public virtual bool CanHandleChallenge(IHttpClient client, IHttpRequestMessage request, ICredentials credentials, IHttpResponseMessage response);
}
public class RestSharp.Portable.Authenticators.SimpleAuthenticator : object {
    public static string AuthenticationMethod;
    private string _usernameKey;
    private string _passwordKey;
    private ParameterType _parameterType;
    public SimpleAuthenticator(string usernameKey, string passwordKey);
    public SimpleAuthenticator(string usernameKey, string passwordKey, ParameterType parameterType);
    public sealed virtual bool CanPreAuthenticate(IRestClient client, IRestRequest request, ICredentials credentials);
    public sealed virtual bool CanPreAuthenticate(IHttpClient client, IHttpRequestMessage request, ICredentials credentials);
    public sealed virtual Task PreAuthenticate(IRestClient client, IRestRequest request, ICredentials credentials);
    public sealed virtual Task PreAuthenticate(IHttpClient client, IHttpRequestMessage request, ICredentials credentials);
    public virtual bool CanHandleChallenge(IHttpClient client, IHttpRequestMessage request, ICredentials credentials, IHttpResponseMessage response);
    public sealed virtual Task HandleChallenge(IHttpClient client, IHttpRequestMessage request, ICredentials credentials, IHttpResponseMessage response);
}
public enum RestSharp.Portable.AuthHeader : Enum {
    public int value__;
    public static AuthHeader Www;
    public static AuthHeader Proxy;
}
public class RestSharp.Portable.AuthHeaderInfo : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RawValue>k__BackingField;
    [CompilerGeneratedAttribute]
private ILookup`2<string, string> <Values>k__BackingField;
    [CompilerGeneratedAttribute]
private ILookup`2<string, string> <RawValues>k__BackingField;
    public string Name { get; private set; }
    public string RawValue { get; private set; }
    public ILookup`2<string, string> Values { get; private set; }
    public ILookup`2<string, string> RawValues { get; private set; }
    public AuthHeaderInfo(string name, string rawValue, IEnumerable`1<KeyValuePair`2<string, string>> values, IEnumerable`1<KeyValuePair`2<string, string>> rawValues);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_RawValue();
    [CompilerGeneratedAttribute]
private void set_RawValue(string value);
    [CompilerGeneratedAttribute]
public ILookup`2<string, string> get_Values();
    [CompilerGeneratedAttribute]
private void set_Values(ILookup`2<string, string> value);
    [CompilerGeneratedAttribute]
public ILookup`2<string, string> get_RawValues();
    [CompilerGeneratedAttribute]
private void set_RawValues(ILookup`2<string, string> value);
}
[ExtensionAttribute]
public static class RestSharp.Portable.AuthHeaderUtilities : object {
    private static IEnumerable`1<string> _emptyHeaderValues;
    private static AuthHeaderUtilities();
    [ExtensionAttribute]
public static Uri GetRequestUri(IHttpClient client, IHttpRequestMessage request);
    [ExtensionAttribute]
public static Uri GetRequestUri(IHttpClient client, IHttpRequestMessage request, IHttpResponseMessage response);
    [ExtensionAttribute]
public static string ToAuthorizationHeaderName(AuthHeader header);
    [ExtensionAttribute]
public static string ToAuthenticationHeaderName(AuthHeader header);
    public static Nullable`1<bool> RemoveAuthorizationHeader(IParameterCollection parameters, AuthHeader header, string authValue);
    public static bool RemoveAuthorizationHeader(IRestClient client, IRestRequest request, AuthHeader header, string authValue);
    public static void SetAuthorizationHeader(IRestRequest request, AuthHeader header, string authValue);
    [ExtensionAttribute]
public static void SetAuthorizationHeader(IHttpRequestMessage request, AuthHeader header, string authValue);
    public static bool TrySetAuthorizationHeader(IRestClient client, IRestRequest request, AuthHeader header, string authValue);
    [ExtensionAttribute]
public static IEnumerable`1<AuthHeaderInfo> GetAuthenticationHeaderInfo(IRestResponse response, AuthHeader header);
    [ExtensionAttribute]
public static string GetAuthenticationMethodValue(IRestResponse response, AuthHeader header, string methodName);
    [ExtensionAttribute]
public static IEnumerable`1<AuthHeaderInfo> GetAuthenticationHeaderInfo(IHttpResponseMessage response, AuthHeader header);
    [ExtensionAttribute]
public static string GetAuthenticationMethodValue(IHttpResponseMessage response, AuthHeader header, string methodName);
    public static IEnumerable`1<AuthHeaderInfo> ParseAuthenticationHeader(string headerValue);
}
[DefaultMemberAttribute("Item")]
public class RestSharp.Portable.Collections.ObservableDictionary`2 : object {
    private static string CountString;
    private static string IndexerName;
    private static string KeysName;
    private static string ValuesName;
    private IDictionary`2<TKey, TValue> _dictionary;
    [CompilerGeneratedAttribute]
private NotifyCollectionChangedEventHandler CollectionChanged;
    [CompilerGeneratedAttribute]
private PropertyChangedEventHandler PropertyChanged;
    public ICollection`1<TKey> Keys { get; }
    public ICollection`1<TValue> Values { get; }
    public TValue Item { get; public set; }
    public int Count { get; }
    public bool IsReadOnly { get; }
    public ObservableDictionary`2(IDictionary`2<TKey, TValue> dictionary);
    public ObservableDictionary`2(IEqualityComparer`1<TKey> comparer);
    public ObservableDictionary`2(int capacity);
    public ObservableDictionary`2(IDictionary`2<TKey, TValue> dictionary, IEqualityComparer`1<TKey> comparer);
    public ObservableDictionary`2(int capacity, IEqualityComparer`1<TKey> comparer);
    public sealed virtual void Add(TKey key, TValue value);
    public sealed virtual bool ContainsKey(TKey key);
    public sealed virtual ICollection`1<TKey> get_Keys();
    public sealed virtual bool Remove(TKey key);
    public sealed virtual bool TryGetValue(TKey key, TValue& value);
    public sealed virtual ICollection`1<TValue> get_Values();
    public sealed virtual TValue get_Item(TKey key);
    public sealed virtual void set_Item(TKey key, TValue value);
    public sealed virtual void Add(KeyValuePair`2<TKey, TValue> item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(KeyValuePair`2<TKey, TValue> item);
    public sealed virtual void CopyTo(KeyValuePair`2[] array, int arrayIndex);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual bool Remove(KeyValuePair`2<TKey, TValue> item);
    public sealed virtual IEnumerator`1<KeyValuePair`2<TKey, TValue>> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    [CompilerGeneratedAttribute]
public sealed virtual void add_CollectionChanged(NotifyCollectionChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_CollectionChanged(NotifyCollectionChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    public void AddRange(IDictionary`2<TKey, TValue> items);
    private void Insert(TKey key, TValue value, bool add);
    private void OnPropertyChanged();
    private void OnPropertyChanged(string propertyName);
    private void OnCollectionChanged();
    private void OnCollectionChanged(NotifyCollectionChangedAction action, KeyValuePair`2<TKey, TValue> changedItem);
    private void OnCollectionChanged(NotifyCollectionChangedAction action, KeyValuePair`2<TKey, TValue> newItem, KeyValuePair`2<TKey, TValue> oldItem);
    private void OnCollectionChanged(NotifyCollectionChangedAction action, IList newItems);
    [CompilerGeneratedAttribute]
private bool <AddRange>b__39_0(TKey k);
}
public class RestSharp.Portable.Content.ByteArrayContent : object {
    private Byte[] _data;
    [CompilerGeneratedAttribute]
private IHttpHeaders <Headers>k__BackingField;
    public IHttpHeaders Headers { get; }
    public int Length { get; }
    public IEnumerable`1<byte> Data { get; }
    public ByteArrayContent(Byte[] data);
    [CompilerGeneratedAttribute]
public sealed virtual IHttpHeaders get_Headers();
    public int get_Length();
    public IEnumerable`1<byte> get_Data();
    public sealed virtual void Dispose();
    public sealed virtual Task CopyToAsync(Stream stream);
    public sealed virtual Task LoadIntoBufferAsync(long maxBufferSize);
    public sealed virtual Task`1<Stream> ReadAsStreamAsync();
    public sealed virtual Task`1<Byte[]> ReadAsByteArrayAsync();
    public sealed virtual Task`1<string> ReadAsStringAsync();
    public sealed virtual bool TryComputeLength(Int64& length);
}
[ExtensionAttribute]
public static class RestSharp.Portable.Content.GenericContentCollector : object {
    private static Char[] _semicolon;
    private static GenericContentCollector();
    [ExtensionAttribute]
public static IHttpContent GetContent(IRestClient client, IRestRequest request, RequestParameters parameters);
    [ExtensionAttribute]
internal static IHttpContent GetBodyContent(IRestRequest request, Parameter body);
    [ExtensionAttribute]
private static IHttpContent GetBasicContent(IRestClient client, IRestRequest request, RequestParameters parameters);
    [ExtensionAttribute]
private static IHttpContent GetMultiPartContent(IRestClient client, IRestRequest request, RequestParameters parameters);
}
internal class RestSharp.Portable.Content.HttpHeaderContent : object {
    [CompilerGeneratedAttribute]
private IHttpHeaders <Headers>k__BackingField;
    public IHttpHeaders Headers { get; }
    public HttpHeaderContent(IHttpHeaders headers);
    [CompilerGeneratedAttribute]
public sealed virtual IHttpHeaders get_Headers();
    [AsyncStateMachineAttribute("RestSharp.Portable.Content.HttpHeaderContent/<WriteTo>d__4")]
public static Task WriteTo(IHttpHeaders headers, Stream stream);
    public static long ComputeLength(IHttpHeaders headers);
    public sealed virtual void Dispose();
    public sealed virtual Task CopyToAsync(Stream stream);
    public sealed virtual Task LoadIntoBufferAsync(long maxBufferSize);
    [AsyncStateMachineAttribute("RestSharp.Portable.Content.HttpHeaderContent/<ReadAsStreamAsync>d__9")]
public sealed virtual Task`1<Stream> ReadAsStreamAsync();
    [AsyncStateMachineAttribute("RestSharp.Portable.Content.HttpHeaderContent/<ReadAsByteArrayAsync>d__10")]
public sealed virtual Task`1<Byte[]> ReadAsByteArrayAsync();
    [AsyncStateMachineAttribute("RestSharp.Portable.Content.HttpHeaderContent/<ReadAsStringAsync>d__11")]
public sealed virtual Task`1<string> ReadAsStringAsync();
    public sealed virtual bool TryComputeLength(Int64& length);
    private Task WriteTo(Stream stream);
}
[ExtensionAttribute]
internal static class RestSharp.Portable.Content.HttpHeadersExtensions : object {
    [ExtensionAttribute]
public static void ReplaceWithoutValidation(IHttpHeaders headers, string key, string value);
    [ExtensionAttribute]
public static void ReplaceWithoutValidation(IHttpHeaders headers, string key, IEnumerable`1<string> values);
    [ExtensionAttribute]
public static void Replace(IHttpHeaders headers, string key, string value);
    [ExtensionAttribute]
public static void Replace(IHttpHeaders headers, string key, IEnumerable`1<string> values);
}
public class RestSharp.Portable.Content.MultipartFormDataContent : object {
    private List`1<IHttpContent> _contents;
    private Byte[] _buffer;
    [CompilerGeneratedAttribute]
private string <Boundary>k__BackingField;
    [CompilerGeneratedAttribute]
private IHttpHeaders <Headers>k__BackingField;
    public string Boundary { get; }
    public IHttpHeaders Headers { get; }
    public string ContentType { get; }
    public MultipartFormDataContent(IHttpHeaders headers);
    [CompilerGeneratedAttribute]
public string get_Boundary();
    [CompilerGeneratedAttribute]
public sealed virtual IHttpHeaders get_Headers();
    public string get_ContentType();
    public void Add(IHttpContent content, string name);
    public void Add(IHttpContent content, string name, string fileName);
    public sealed virtual void Dispose();
    public sealed virtual Task CopyToAsync(Stream stream);
    [AsyncStateMachineAttribute("RestSharp.Portable.Content.MultipartFormDataContent/<LoadIntoBufferAsync>d__15")]
public sealed virtual Task LoadIntoBufferAsync(long maxBufferSize);
    [AsyncStateMachineAttribute("RestSharp.Portable.Content.MultipartFormDataContent/<ReadAsStreamAsync>d__16")]
public sealed virtual Task`1<Stream> ReadAsStreamAsync();
    [AsyncStateMachineAttribute("RestSharp.Portable.Content.MultipartFormDataContent/<ReadAsByteArrayAsync>d__17")]
public sealed virtual Task`1<Byte[]> ReadAsByteArrayAsync();
    [AsyncStateMachineAttribute("RestSharp.Portable.Content.MultipartFormDataContent/<ReadAsStringAsync>d__18")]
public sealed virtual Task`1<string> ReadAsStringAsync();
    public sealed virtual bool TryComputeLength(Int64& length);
    public sealed virtual IEnumerator`1<IHttpContent> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private string BuildContentDisposition(string name, string fileName);
    [AsyncStateMachineAttribute("RestSharp.Portable.Content.MultipartFormDataContent/<WriteTo>d__23")]
private Task WriteTo(Stream stream, bool withHeaders);
}
internal class RestSharp.Portable.Content.NonDisposableStream : Stream {
    private Stream _baseStream;
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public long Position { get; public set; }
    public NonDisposableStream(Stream baseStream);
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public virtual void Flush();
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
    public virtual void Write(Byte[] buffer, int offset, int count);
}
public class RestSharp.Portable.Content.StringContent : object {
    private string _value;
    private Encoding _encoding;
    private Byte[] _buffer;
    [CompilerGeneratedAttribute]
private IHttpHeaders <Headers>k__BackingField;
    public IHttpHeaders Headers { get; }
    public StringContent(string value, Encoding encoding);
    [CompilerGeneratedAttribute]
public sealed virtual IHttpHeaders get_Headers();
    public sealed virtual void Dispose();
    public sealed virtual Task CopyToAsync(Stream stream);
    public sealed virtual Task LoadIntoBufferAsync(long maxBufferSize);
    public sealed virtual Task`1<Stream> ReadAsStreamAsync();
    public sealed virtual Task`1<Byte[]> ReadAsByteArrayAsync();
    public sealed virtual Task`1<string> ReadAsStringAsync();
    public sealed virtual bool TryComputeLength(Int64& length);
}
public enum RestSharp.Portable.ContentCollectionMode : Enum {
    public int value__;
    public static ContentCollectionMode BasicContent;
    public static ContentCollectionMode MultiPartForFileParameters;
    public static ContentCollectionMode MultiPart;
}
internal class RestSharp.Portable.Crypto.CryptographicException : Exception {
    public CryptographicException(string message);
}
internal class RestSharp.Portable.Crypto.CryptographicUnexpectedOperationException : CryptographicException {
    public CryptographicUnexpectedOperationException(string message);
}
internal abstract class RestSharp.Portable.Crypto.HashAlgorithm : object {
    protected internal Byte[] HashValue;
    protected int HashSizeValue;
    private bool _disposed;
    public bool CanTransformMultipleBlocks { get; }
    public bool CanReuseTransform { get; }
    public Byte[] Hash { get; }
    public int HashSize { get; }
    public int InputBlockSize { get; }
    public int OutputBlockSize { get; }
    public virtual bool get_CanTransformMultipleBlocks();
    public virtual bool get_CanReuseTransform();
    public virtual Byte[] get_Hash();
    public virtual int get_HashSize();
    public virtual int get_InputBlockSize();
    public Byte[] ComputeHash(Byte[] buffer);
    public Byte[] ComputeHash(Byte[] buffer, int offset, int count);
    protected abstract virtual void HashCore(Byte[] array, int ibStart, int cbSize);
    protected abstract virtual Byte[] HashFinal();
    public abstract virtual void Initialize();
    protected virtual void Dispose(bool disposing);
    public virtual int get_OutputBlockSize();
    private sealed virtual override void System.IDisposable.Dispose();
    public sealed virtual int TransformBlock(Byte[] inputBuffer, int inputOffset, int inputCount, Byte[] outputBuffer, int outputOffset);
    public sealed virtual Byte[] TransformFinalBlock(Byte[] inputBuffer, int inputOffset, int inputCount);
}
internal interface RestSharp.Portable.Crypto.ICryptoTransform {
    public bool CanReuseTransform { get; }
    public bool CanTransformMultipleBlocks { get; }
    public int InputBlockSize { get; }
    public int OutputBlockSize { get; }
    public abstract virtual bool get_CanReuseTransform();
    public abstract virtual bool get_CanTransformMultipleBlocks();
    public abstract virtual int get_InputBlockSize();
    public abstract virtual int get_OutputBlockSize();
    public abstract virtual int TransformBlock(Byte[] inputBuffer, int inputOffset, int inputCount, Byte[] outputBuffer, int outputOffset);
    public abstract virtual Byte[] TransformFinalBlock(Byte[] inputBuffer, int inputOffset, int inputCount);
}
internal abstract class RestSharp.Portable.Crypto.MD5 : HashAlgorithm {
    public static MD5 Create();
}
internal class RestSharp.Portable.Crypto.MD5Managed : MD5 {
    private MD5_CTX _context;
    private Byte[] _digest;
    private bool _hashCoreCalled;
    private bool _hashFinalCalled;
    private static int S11;
    private static int S12;
    private static int S13;
    private static int S14;
    private static int S21;
    private static int S22;
    private static int S23;
    private static int S24;
    private static int S31;
    private static int S32;
    private static int S33;
    private static int S34;
    private static int S41;
    private static int S42;
    private static int S43;
    private static int S44;
    private static Byte[] PADDING;
    public Byte[] Hash { get; }
    public int HashSize { get; }
    private static MD5Managed();
    public virtual void Initialize();
    private void InitializeVariables();
    protected virtual void HashCore(Byte[] array, int ibStart, int cbSize);
    protected virtual Byte[] HashFinal();
    public virtual Byte[] get_Hash();
    public virtual int get_HashSize();
    private static UInt32 F(UInt32 x, UInt32 y, UInt32 z);
    private static UInt32 G(UInt32 x, UInt32 y, UInt32 z);
    private static UInt32 H(UInt32 x, UInt32 y, UInt32 z);
    private static UInt32 I(UInt32 x, UInt32 y, UInt32 z);
    private static UInt32 ROTATE_LEFT(UInt32 x, int n);
    private static void FF(UInt32& a, UInt32 b, UInt32 c, UInt32 d, UInt32 x, int s, UInt32 ac);
    private static void GG(UInt32& a, UInt32 b, UInt32 c, UInt32 d, UInt32 x, int s, UInt32 ac);
    private static void HH(UInt32& a, UInt32 b, UInt32 c, UInt32 d, UInt32 x, int s, UInt32 ac);
    private static void II(UInt32& a, UInt32 b, UInt32 c, UInt32 d, UInt32 x, int s, UInt32 ac);
    private static void MD5Init(MD5_CTX context);
    private static void MD5Update(MD5_CTX context, Byte[] input, UInt32 inputIndex, UInt32 inputLen);
    private static void MD5Final(Byte[] digest, MD5_CTX context);
    private static void MD5Transform(UInt32[] state, Byte[] block, UInt32 blockIndex);
    private static void Encode(Byte[] output, UInt32[] input, UInt32 len);
    private static void Decode(UInt32[] output, Byte[] input, UInt32 inputIndex, UInt32 len);
}
public class RestSharp.Portable.Deserializers.JsonDeserializer : object {
    public sealed virtual T Deserialize(IRestResponse response);
    protected virtual void ConfigureSerializer(JsonSerializer serializer);
}
public class RestSharp.Portable.Deserializers.XmlDataContractDeserializer : object {
    public sealed virtual T Deserialize(IRestResponse response);
    protected virtual DataContractSerializer CreateSerializer(Type t);
}
public class RestSharp.Portable.FileParameter : Parameter {
    [CompilerGeneratedAttribute]
private long <ContentLength>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FileName>k__BackingField;
    public long ContentLength { get; public set; }
    public string FileName { get; public set; }
    [CompilerGeneratedAttribute]
public long get_ContentLength();
    [CompilerGeneratedAttribute]
public void set_ContentLength(long value);
    [CompilerGeneratedAttribute]
public string get_FileName();
    [CompilerGeneratedAttribute]
public void set_FileName(string value);
    public static FileParameter Create(string name, Byte[] data, string filename, string contentType);
    public static FileParameter Create(string name, Byte[] data, string filename);
    public static FileParameter Create(string name, Stream input, string filename, string contentType);
    public static FileParameter Create(string name, Stream input, string filename);
}
[ExtensionAttribute]
public static class RestSharp.Portable.HttpContentExtensions : object {
    [ExtensionAttribute]
public static Task LoadIntoBufferAsync(IHttpContent content);
    [ExtensionAttribute]
internal static IEncoding GetEncoding(IHttpContent content, IRestClient restClient);
}
[ExtensionAttribute]
public static class RestSharp.Portable.HttpHeadersExtensions : object {
    [ExtensionAttribute]
public static string GetValue(IHttpHeaders headers, string name);
    [ExtensionAttribute]
public static string GetValue(IHttpHeaders headers, string name, string defaultValue);
}
public interface RestSharp.Portable.IAuthenticator {
    public abstract virtual bool CanPreAuthenticate(IRestClient client, IRestRequest request, ICredentials credentials);
    public abstract virtual bool CanPreAuthenticate(IHttpClient client, IHttpRequestMessage request, ICredentials credentials);
    public abstract virtual bool CanHandleChallenge(IHttpClient client, IHttpRequestMessage request, ICredentials credentials, IHttpResponseMessage response);
    public abstract virtual Task PreAuthenticate(IRestClient client, IRestRequest request, ICredentials credentials);
    public abstract virtual Task PreAuthenticate(IHttpClient client, IHttpRequestMessage request, ICredentials credentials);
    public abstract virtual Task HandleChallenge(IHttpClient client, IHttpRequestMessage request, ICredentials credentials, IHttpResponseMessage response);
}
public interface RestSharp.Portable.IDeserializer {
    public abstract virtual T Deserialize(IRestResponse response);
}
public interface RestSharp.Portable.IEncoding {
    public abstract virtual Byte[] Decode(Byte[] data);
    public abstract virtual Stream DecodeStream(Stream data);
}
public interface RestSharp.Portable.IHttpClient {
    public Uri BaseAddress { get; public set; }
    public IHttpHeaders DefaultRequestHeaders { get; }
    public TimeSpan Timeout { get; public set; }
    public abstract virtual Uri get_BaseAddress();
    public abstract virtual void set_BaseAddress(Uri value);
    public abstract virtual IHttpHeaders get_DefaultRequestHeaders();
    public abstract virtual TimeSpan get_Timeout();
    public abstract virtual void set_Timeout(TimeSpan value);
    public abstract virtual Task`1<IHttpResponseMessage> SendAsync(IHttpRequestMessage request, CancellationToken cancellationToken);
}
public interface RestSharp.Portable.IHttpClientFactory {
    public abstract virtual IHttpClient CreateClient(IRestClient client);
    public abstract virtual IHttpRequestMessage CreateRequestMessage(IRestClient client, IRestRequest request, IList`1<Parameter> parameters);
}
public interface RestSharp.Portable.IHttpContent {
    public IHttpHeaders Headers { get; }
    public abstract virtual IHttpHeaders get_Headers();
    public abstract virtual Task CopyToAsync(Stream stream);
    public abstract virtual Task LoadIntoBufferAsync(long maxBufferSize);
    public abstract virtual Task`1<Stream> ReadAsStreamAsync();
    public abstract virtual Task`1<Byte[]> ReadAsByteArrayAsync();
    public abstract virtual Task`1<string> ReadAsStringAsync();
    public abstract virtual bool TryComputeLength(Int64& length);
}
public interface RestSharp.Portable.IHttpHeaders {
    public abstract virtual void Add(string name, IEnumerable`1<string> values);
    public abstract virtual void Add(string name, string value);
    public abstract virtual void Clear();
    public abstract virtual bool Contains(string name);
    public abstract virtual IEnumerable`1<string> GetValues(string name);
    public abstract virtual bool Remove(string name);
    public abstract virtual bool TryGetValues(string name, IEnumerable`1& values);
    public abstract virtual bool TryAddWithoutValidation(string name, IEnumerable`1<string> values);
    public abstract virtual bool TryAddWithoutValidation(string name, string value);
}
public interface RestSharp.Portable.IHttpRequestMessage {
    public IHttpHeaders Headers { get; }
    public Method Method { get; public set; }
    public Uri RequestUri { get; public set; }
    public Version Version { get; public set; }
    public IHttpContent Content { get; public set; }
    public abstract virtual IHttpHeaders get_Headers();
    public abstract virtual Method get_Method();
    public abstract virtual void set_Method(Method value);
    public abstract virtual Uri get_RequestUri();
    public abstract virtual void set_RequestUri(Uri value);
    public abstract virtual Version get_Version();
    public abstract virtual void set_Version(Version value);
    public abstract virtual IHttpContent get_Content();
    public abstract virtual void set_Content(IHttpContent value);
}
public interface RestSharp.Portable.IHttpResponseMessage {
    public CookieContainer Cookies { get; }
    public IHttpHeaders Headers { get; }
    public bool IsSuccessStatusCode { get; }
    public string ReasonPhrase { get; }
    public IHttpRequestMessage RequestMessage { get; }
    public HttpStatusCode StatusCode { get; }
    public IHttpContent Content { get; }
    public abstract virtual CookieContainer get_Cookies();
    public abstract virtual IHttpHeaders get_Headers();
    public abstract virtual bool get_IsSuccessStatusCode();
    public abstract virtual string get_ReasonPhrase();
    public abstract virtual IHttpRequestMessage get_RequestMessage();
    public abstract virtual HttpStatusCode get_StatusCode();
    public abstract virtual IHttpContent get_Content();
    public abstract virtual void EnsureSuccessStatusCode();
}
public class RestSharp.Portable.Impl.GenericHttpHeaders : object {
    private Dictionary`2<string, IEnumerable`1<string>> _headers;
    private Dictionary`2<string, List`1<string>> _headersToChange;
    private object _syncRoot;
    public sealed virtual IEnumerator`1<KeyValuePair`2<string, IEnumerable`1<string>>> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual void Add(string name, IEnumerable`1<string> values);
    public sealed virtual void Add(string name, string value);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(string name);
    public sealed virtual IEnumerable`1<string> GetValues(string name);
    public sealed virtual bool Remove(string name);
    public sealed virtual bool TryGetValues(string name, IEnumerable`1& values);
    public sealed virtual bool TryAddWithoutValidation(string name, IEnumerable`1<string> values);
    public sealed virtual bool TryAddWithoutValidation(string name, string value);
    public virtual string ToString();
}
public interface RestSharp.Portable.IParameterCollection {
    public abstract virtual void AddOrUpdate(Parameter parameter);
    public abstract virtual bool Remove(ParameterType type, string name);
    public abstract virtual IList`1<Parameter> Find(ParameterType type, string name);
}
public interface RestSharp.Portable.IRestClient {
    public IAuthenticator Authenticator { get; public set; }
    public Uri BaseUrl { get; public set; }
    public IParameterCollection DefaultParameters { get; }
    public CookieContainer CookieContainer { get; public set; }
    public ICredentials Credentials { get; public set; }
    public bool IgnoreResponseStatusCode { get; public set; }
    public Nullable`1<TimeSpan> Timeout { get; public set; }
    public string UserAgent { get; public set; }
    public IDictionary`2<string, IDeserializer> ContentHandlers { get; }
    public IDictionary`2<string, IEncoding> EncodingHandlers { get; }
    public abstract virtual IAuthenticator get_Authenticator();
    public abstract virtual void set_Authenticator(IAuthenticator value);
    public abstract virtual Uri get_BaseUrl();
    public abstract virtual void set_BaseUrl(Uri value);
    public abstract virtual IParameterCollection get_DefaultParameters();
    public abstract virtual CookieContainer get_CookieContainer();
    public abstract virtual void set_CookieContainer(CookieContainer value);
    public abstract virtual ICredentials get_Credentials();
    public abstract virtual void set_Credentials(ICredentials value);
    public abstract virtual bool get_IgnoreResponseStatusCode();
    public abstract virtual void set_IgnoreResponseStatusCode(bool value);
    public abstract virtual Nullable`1<TimeSpan> get_Timeout();
    public abstract virtual void set_Timeout(Nullable`1<TimeSpan> value);
    public abstract virtual string get_UserAgent();
    public abstract virtual void set_UserAgent(string value);
    public abstract virtual IDictionary`2<string, IDeserializer> get_ContentHandlers();
    public abstract virtual IDictionary`2<string, IEncoding> get_EncodingHandlers();
    public abstract virtual Task`1<IRestResponse> Execute(IRestRequest request);
    public abstract virtual Task`1<IRestResponse`1<T>> Execute(IRestRequest request);
    public abstract virtual Task`1<IRestResponse> Execute(IRestRequest request, CancellationToken ct);
    public abstract virtual Task`1<IRestResponse`1<T>> Execute(IRestRequest request, CancellationToken ct);
    public abstract virtual IDeserializer GetHandler(string contentType);
    public abstract virtual IEncoding GetEncoding(IEnumerable`1<string> encodingIds);
    [ObsoleteAttribute("Use the ContentHandlers property instead")]
public abstract virtual IRestClient AddHandler(string contentType, IDeserializer deserializer);
    [ObsoleteAttribute("Use the ContentHandlers property instead")]
public abstract virtual IRestClient RemoveHandler(string contentType);
    [ObsoleteAttribute("Use the ContentHandlers property instead")]
public abstract virtual IRestClient ClearHandlers();
    [ObsoleteAttribute("Use the EncodingHandlers property instead")]
public abstract virtual IRestClient AddEncoding(string encodingId, IEncoding encoding);
    [ObsoleteAttribute("Use the EncodingHandlers property instead")]
public abstract virtual IRestClient RemoveEncoding(string encodingId);
    [ObsoleteAttribute("Use the EncodingHandlers property instead")]
public abstract virtual IRestClient ClearEncodings();
}
public interface RestSharp.Portable.IRestRequest {
    public ISerializer Serializer { get; public set; }
    public Method Method { get; public set; }
    public string Resource { get; }
    public IParameterCollection Parameters { get; }
    public ContentCollectionMode ContentCollectionMode { get; public set; }
    public Func`3<Stream, CancellationToken, Task> ResponseWriterAsync { get; public set; }
    public abstract virtual ISerializer get_Serializer();
    public abstract virtual void set_Serializer(ISerializer value);
    public abstract virtual Method get_Method();
    public abstract virtual void set_Method(Method value);
    public abstract virtual string get_Resource();
    public abstract virtual IParameterCollection get_Parameters();
    public abstract virtual ContentCollectionMode get_ContentCollectionMode();
    public abstract virtual void set_ContentCollectionMode(ContentCollectionMode value);
    public abstract virtual Func`3<Stream, CancellationToken, Task> get_ResponseWriterAsync();
    public abstract virtual void set_ResponseWriterAsync(Func`3<Stream, CancellationToken, Task> value);
}
public interface RestSharp.Portable.IRestResponse {
    public IRestRequest Request { get; }
    public Uri ResponseUri { get; }
    public Byte[] RawBytes { get; }
    public string ContentType { get; }
    public CookieCollection Cookies { get; }
    public IHttpHeaders Headers { get; }
    public bool IsSuccess { get; }
    public HttpStatusCode StatusCode { get; }
    public string StatusDescription { get; }
    public string Content { get; }
    public abstract virtual IRestRequest get_Request();
    public abstract virtual Uri get_ResponseUri();
    public abstract virtual Byte[] get_RawBytes();
    public abstract virtual string get_ContentType();
    public abstract virtual CookieCollection get_Cookies();
    public abstract virtual IHttpHeaders get_Headers();
    public abstract virtual bool get_IsSuccess();
    public abstract virtual HttpStatusCode get_StatusCode();
    public abstract virtual string get_StatusDescription();
    public abstract virtual string get_Content();
}
public interface RestSharp.Portable.IRestResponse`1 {
    public T Data { get; }
    public abstract virtual T get_Data();
}
public interface RestSharp.Portable.ISerializer {
    public string ContentType { get; public set; }
    public abstract virtual string get_ContentType();
    public abstract virtual void set_ContentType(string value);
    public abstract virtual Byte[] Serialize(object obj);
}
public enum RestSharp.Portable.Method : Enum {
    public int value__;
    public static Method GET;
    public static Method POST;
    public static Method PUT;
    public static Method DELETE;
    public static Method HEAD;
    public static Method OPTIONS;
    public static Method PATCH;
    public static Method MERGE;
}
[DefaultMemberAttribute("Item")]
internal class RestSharp.Portable.MultiValueDictionary`2 : object {
    private Dictionary`2<TKey, InnerCollectionView<TKey, TValue>> _dictionary;
    private Func`1<ICollection`1<TValue>> _newCollectionFactory;
    private int _version;
    public IEnumerable`1<TKey> Keys { get; }
    public IEnumerable`1<IReadOnlyCollection`1<TValue>> Values { get; }
    public IReadOnlyCollection`1<TValue> Item { get; }
    public int Count { get; }
    public MultiValueDictionary`2(int capacity);
    public MultiValueDictionary`2(IEqualityComparer`1<TKey> comparer);
    public MultiValueDictionary`2(int capacity, IEqualityComparer`1<TKey> comparer);
    public MultiValueDictionary`2(IEnumerable`1<KeyValuePair`2<TKey, IReadOnlyCollection`1<TValue>>> enumerable);
    public MultiValueDictionary`2(IEnumerable`1<KeyValuePair`2<TKey, IReadOnlyCollection`1<TValue>>> enumerable, IEqualityComparer`1<TKey> comparer);
    public static MultiValueDictionary`2<TKey, TValue> Create();
    public static MultiValueDictionary`2<TKey, TValue> Create(int capacity);
    public static MultiValueDictionary`2<TKey, TValue> Create(IEqualityComparer`1<TKey> comparer);
    public static MultiValueDictionary`2<TKey, TValue> Create(int capacity, IEqualityComparer`1<TKey> comparer);
    public static MultiValueDictionary`2<TKey, TValue> Create(IEnumerable`1<KeyValuePair`2<TKey, IReadOnlyCollection`1<TValue>>> enumerable);
    public static MultiValueDictionary`2<TKey, TValue> Create(IEnumerable`1<KeyValuePair`2<TKey, IReadOnlyCollection`1<TValue>>> enumerable, IEqualityComparer`1<TKey> comparer);
    public static MultiValueDictionary`2<TKey, TValue> Create(Func`1<TValueCollection> collectionFactory);
    public static MultiValueDictionary`2<TKey, TValue> Create(int capacity, Func`1<TValueCollection> collectionFactory);
    public static MultiValueDictionary`2<TKey, TValue> Create(IEqualityComparer`1<TKey> comparer, Func`1<TValueCollection> collectionFactory);
    public static MultiValueDictionary`2<TKey, TValue> Create(int capacity, IEqualityComparer`1<TKey> comparer, Func`1<TValueCollection> collectionFactory);
    public static MultiValueDictionary`2<TKey, TValue> Create(IEnumerable`1<KeyValuePair`2<TKey, IReadOnlyCollection`1<TValue>>> enumerable, Func`1<TValueCollection> collectionFactory);
    public static MultiValueDictionary`2<TKey, TValue> Create(IEnumerable`1<KeyValuePair`2<TKey, IReadOnlyCollection`1<TValue>>> enumerable, IEqualityComparer`1<TKey> comparer, Func`1<TValueCollection> collectionFactory);
    public void Add(TKey key, TValue value);
    public void AddRange(TKey key, IEnumerable`1<TValue> values);
    public bool Remove(TKey key);
    public bool Remove(TKey key, TValue value);
    public bool Contains(TKey key, TValue value);
    public bool ContainsValue(TValue value);
    public void Clear();
    public sealed virtual bool ContainsKey(TKey key);
    public sealed virtual IEnumerable`1<TKey> get_Keys();
    public sealed virtual bool TryGetValue(TKey key, IReadOnlyCollection`1& value);
    public sealed virtual IEnumerable`1<IReadOnlyCollection`1<TValue>> get_Values();
    public sealed virtual IReadOnlyCollection`1<TValue> get_Item(TKey key);
    public sealed virtual int get_Count();
    public sealed virtual IEnumerator`1<KeyValuePair`2<TKey, IReadOnlyCollection`1<TValue>>> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public class RestSharp.Portable.Parameter : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private ParameterType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContentType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ValidateOnAdd>k__BackingField;
    [CompilerGeneratedAttribute]
private Encoding <Encoding>k__BackingField;
    public string Name { get; public set; }
    public object Value { get; public set; }
    public ParameterType Type { get; public set; }
    public string ContentType { get; public set; }
    public bool ValidateOnAdd { get; public set; }
    public Encoding Encoding { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public object get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(object value);
    [CompilerGeneratedAttribute]
public ParameterType get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(ParameterType value);
    [CompilerGeneratedAttribute]
public string get_ContentType();
    [CompilerGeneratedAttribute]
public void set_ContentType(string value);
    [CompilerGeneratedAttribute]
public bool get_ValidateOnAdd();
    [CompilerGeneratedAttribute]
public void set_ValidateOnAdd(bool value);
    [CompilerGeneratedAttribute]
public Encoding get_Encoding();
    [CompilerGeneratedAttribute]
public void set_Encoding(Encoding value);
    public string ToRequestString();
}
internal class RestSharp.Portable.ParameterCollection : object {
    private MultiValueDictionary`2<ParameterKey, ParameterEntry> _dictionary;
    private ulong _order;
    public int Count { get; }
    public bool IsReadOnly { get; }
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual IList`1<Parameter> Find(ParameterType type, string name);
    public sealed virtual void Add(Parameter item);
    public sealed virtual void AddOrUpdate(Parameter parameter);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(Parameter item);
    public sealed virtual void CopyTo(Parameter[] array, int arrayIndex);
    [IteratorStateMachineAttribute("RestSharp.Portable.ParameterCollection/<GetEnumerator>d__13")]
public sealed virtual IEnumerator`1<Parameter> GetEnumerator();
    public sealed virtual bool Remove(Parameter item);
    public sealed virtual bool Remove(ParameterType type, string name);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[ExtensionAttribute]
public static class RestSharp.Portable.ParameterExtensions : object {
    public static Encoding DefaultEncoding;
    private static ParameterExtensions();
    [ExtensionAttribute]
public static IEnumerable`1<Parameter> GetGetOrPostParameters(IEnumerable`1<Parameter> parameters);
    [ExtensionAttribute]
public static IEnumerable`1<Parameter> GetGetOrPostParameters(IEnumerable`1<Parameter> parameters, bool withFile);
    [ExtensionAttribute]
public static IEnumerable`1<FileParameter> GetFileParameters(IEnumerable`1<Parameter> parameters);
    [ExtensionAttribute]
public static bool IsContentParameter(Parameter parameter);
    [ExtensionAttribute]
internal static string ToEncodedString(Parameter parameter, bool spaceAsPlus);
    private static string UrlEncode(Parameter parameter, Encoding encoding, bool spaceAsPlus);
}
internal class RestSharp.Portable.ParameterKey : object {
    [CompilerGeneratedAttribute]
private ParameterType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public ParameterType Type { get; }
    public string Name { get; }
    public ParameterKey(ParameterType type, string name);
    public ParameterKey(Parameter parameter);
    [CompilerGeneratedAttribute]
public ParameterType get_Type();
    [CompilerGeneratedAttribute]
public string get_Name();
}
internal class RestSharp.Portable.ParameterKeyComparer : object {
    private StringComparer _defaultComparer;
    private StringComparer _httpHeaderComparer;
    public sealed virtual int Compare(ParameterKey x, ParameterKey y);
    public sealed virtual bool Equals(ParameterKey x, ParameterKey y);
    public sealed virtual int GetHashCode(ParameterKey obj);
}
public enum RestSharp.Portable.ParameterType : Enum {
    public int value__;
    public static ParameterType GetOrPost;
    public static ParameterType UrlSegment;
    public static ParameterType QueryString;
    public static ParameterType HttpHeader;
    public static ParameterType RequestBody;
}
internal static class RestSharp.Portable.PlatformSupport : object {
    public static bool IsSilverlight { get; }
    public static bool IsMono { get; }
    public static bool get_IsSilverlight();
    public static bool get_IsMono();
}
public class RestSharp.Portable.PostParametersContent : object {
    private List`1<EncodedParameter> _postParameters;
    private IHttpHeaders _headers;
    private Byte[] _buffer;
    private bool _isDisposed;
    public IHttpHeaders Headers { get; }
    public PostParametersContent(IEnumerable`1<Parameter> postParameters);
    public sealed virtual IHttpHeaders get_Headers();
    public sealed virtual Task CopyToAsync(Stream stream);
    public sealed virtual Task LoadIntoBufferAsync(long maxBufferSize);
    public sealed virtual Task`1<Stream> ReadAsStreamAsync();
    public sealed virtual Task`1<Byte[]> ReadAsByteArrayAsync();
    public sealed virtual Task`1<string> ReadAsStringAsync();
    public sealed virtual bool TryComputeLength(Int64& length);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    private void WriteTo(Stream stream);
}
public enum RestSharp.Portable.PropertyFilterMode : Enum {
    public int value__;
    public static PropertyFilterMode Include;
    public static PropertyFilterMode Exclude;
}
public class RestSharp.Portable.RequestParameters : object {
    [CompilerGeneratedAttribute]
private IList`1<Parameter> <Parameters>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<Parameter> <OtherParameters>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<Parameter> <ContentHeaderParameters>k__BackingField;
    public IList`1<Parameter> Parameters { get; }
    public IList`1<Parameter> OtherParameters { get; }
    public IList`1<Parameter> ContentHeaderParameters { get; }
    internal RequestParameters(IRestClient client, IRestRequest request);
    [CompilerGeneratedAttribute]
public IList`1<Parameter> get_Parameters();
    [CompilerGeneratedAttribute]
public IList`1<Parameter> get_OtherParameters();
    [CompilerGeneratedAttribute]
public IList`1<Parameter> get_ContentHeaderParameters();
    private static IList`1<Parameter> GetParameters(IRestClient client, IRestRequest request);
}
public abstract class RestSharp.Portable.RestClientBase : object {
    private static string s_defaultUserAgent;
    private static Lazy`1<bool> s_isSilverlight;
    private static Lazy`1<bool> s_isMono;
    private ObservableDictionary`2<string, IDeserializer> _contentHandlers;
    private IList`1<string> _acceptTypes;
    private ObservableDictionary`2<string, IEncoding> _encodingHandlers;
    private IList`1<string> _acceptEncodings;
    private Lazy`1<IHttpClient> _httpClient;
    private bool _disposedValue;
    [CompilerGeneratedAttribute]
private IHttpClientFactory <HttpClientFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <BaseUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private IAuthenticator <Authenticator>k__BackingField;
    [CompilerGeneratedAttribute]
private CookieContainer <CookieContainer>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TimeSpan> <Timeout>k__BackingField;
    [CompilerGeneratedAttribute]
private IParameterCollection <DefaultParameters>k__BackingField;
    [CompilerGeneratedAttribute]
private ICredentials <Credentials>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IgnoreResponseStatusCode>k__BackingField;
    public IHttpClientFactory HttpClientFactory { get; public set; }
    public Uri BaseUrl { get; public set; }
    public IAuthenticator Authenticator { get; public set; }
    public CookieContainer CookieContainer { get; public set; }
    public Nullable`1<TimeSpan> Timeout { get; public set; }
    public IDictionary`2<string, IDeserializer> ContentHandlers { get; }
    public IDictionary`2<string, IEncoding> EncodingHandlers { get; }
    public string UserAgent { get; public set; }
    public IParameterCollection DefaultParameters { get; }
    public ICredentials Credentials { get; public set; }
    public bool IgnoreResponseStatusCode { get; public set; }
    protected RestClientBase(IHttpClientFactory httpClientFactory);
    protected RestClientBase(IHttpClientFactory httpClientFactory, Uri baseUrl);
    protected RestClientBase(IHttpClientFactory httpClientFactory, string baseUrl);
    private static RestClientBase();
    protected virtual override void Finalize();
    [CompilerGeneratedAttribute]
public IHttpClientFactory get_HttpClientFactory();
    [CompilerGeneratedAttribute]
public void set_HttpClientFactory(IHttpClientFactory value);
    [CompilerGeneratedAttribute]
public sealed virtual Uri get_BaseUrl();
    [CompilerGeneratedAttribute]
public sealed virtual void set_BaseUrl(Uri value);
    [CompilerGeneratedAttribute]
public sealed virtual IAuthenticator get_Authenticator();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Authenticator(IAuthenticator value);
    [CompilerGeneratedAttribute]
public sealed virtual CookieContainer get_CookieContainer();
    [CompilerGeneratedAttribute]
public sealed virtual void set_CookieContainer(CookieContainer value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<TimeSpan> get_Timeout();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Timeout(Nullable`1<TimeSpan> value);
    public sealed virtual IDictionary`2<string, IDeserializer> get_ContentHandlers();
    public sealed virtual IDictionary`2<string, IEncoding> get_EncodingHandlers();
    public sealed virtual string get_UserAgent();
    public sealed virtual void set_UserAgent(string value);
    [CompilerGeneratedAttribute]
public sealed virtual IParameterCollection get_DefaultParameters();
    [CompilerGeneratedAttribute]
public sealed virtual ICredentials get_Credentials();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Credentials(ICredentials value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IgnoreResponseStatusCode();
    [CompilerGeneratedAttribute]
public sealed virtual void set_IgnoreResponseStatusCode(bool value);
    public sealed virtual void Dispose();
    public virtual Task`1<IRestResponse> Execute(IRestRequest request);
    public virtual Task`1<IRestResponse`1<T>> Execute(IRestRequest request);
    [AsyncStateMachineAttribute("RestSharp.Portable.RestClientBase/<Execute>d__54")]
public virtual Task`1<IRestResponse> Execute(IRestRequest request, CancellationToken ct);
    [AsyncStateMachineAttribute("RestSharp.Portable.RestClientBase/<Execute>d__55`1")]
public virtual Task`1<IRestResponse`1<T>> Execute(IRestRequest request, CancellationToken ct);
    public sealed virtual IDeserializer GetHandler(string contentType);
    public sealed virtual IEncoding GetEncoding(IEnumerable`1<string> encodingIds);
    [ObsoleteAttribute("Use the ContentHandlers property instead")]
public sealed virtual IRestClient AddHandler(string contentType, IDeserializer deserializer);
    [ObsoleteAttribute("Use the ContentHandlers property instead")]
public sealed virtual IRestClient RemoveHandler(string contentType);
    [ObsoleteAttribute("Use the ContentHandlers property instead")]
public sealed virtual IRestClient ClearHandlers();
    [ObsoleteAttribute("Use the EncodingHandlers property instead")]
public sealed virtual IRestClient AddEncoding(string encodingId, IEncoding encoding);
    [ObsoleteAttribute("Use the EncodingHandlers property instead")]
public sealed virtual IRestClient RemoveEncoding(string encodingId);
    [ObsoleteAttribute("Use the EncodingHandlers property instead")]
public sealed virtual IRestClient ClearEncodings();
    protected void UpdateAcceptHeader();
    protected abstract virtual IHttpContent GetContent(IRestRequest request, RequestParameters parameters);
    protected virtual void ModifyRequestBeforeAuthentication(IHttpClient httpClient, IHttpRequestMessage requestMessage);
    [AsyncStateMachineAttribute("RestSharp.Portable.RestClientBase/<ExecuteRequest>d__67")]
protected Task`1<IHttpResponseMessage> ExecuteRequest(IRestRequest request, CancellationToken ct);
    protected virtual void Dispose(bool disposing);
    private static string GetDefaultVersion();
    private void UpdateAcceptsEncodingHeader();
    private void ContentHandlersOnCollectionChanged(object sender, NotifyCollectionChangedEventArgs args);
    private void EncodingHandlersOnCollectionChanged(object sender, NotifyCollectionChangedEventArgs args);
    [CompilerGeneratedAttribute]
private IHttpClient <.ctor>b__9_0();
}
[ExtensionAttribute]
public static class RestSharp.Portable.RestClientExtensions : object {
    [ExtensionAttribute]
public static IRestClient AddDefaultParameter(IRestClient client, string name, object value);
    [ExtensionAttribute]
public static IRestClient AddDefaultParameter(IRestClient client, string name, object value, ParameterType type);
    [ExtensionAttribute]
public static IRestClient AddDefaultParameter(IRestClient client, Parameter parameter);
    [ExtensionAttribute]
public static IRestClient RemoveDefaultParameter(IRestClient client, string name);
    [ExtensionAttribute]
public static Uri BuildUri(IRestClient client, IRestRequest request);
    [ExtensionAttribute]
public static Uri BuildUri(IRestClient client, IRestRequest request, bool withQuery);
    [ExtensionAttribute]
public static Method GetEffectiveHttpMethod(IRestClient client, IRestRequest request);
    [ExtensionAttribute]
public static Method GetEffectiveHttpMethod(IRestClient client, IRestRequest request, IList`1<Parameter> parameters);
    [ExtensionAttribute]
public static IRestClient ReplaceHandler(IRestClient client, Type oldType, IDeserializer deserializer);
    [ExtensionAttribute]
public static RequestParameters MergeParameters(IRestClient client, IRestRequest request);
    [ExtensionAttribute]
internal static Method GetDefaultMethod(IRestClient client, IRestRequest request, IList`1<Parameter> parameters);
    private static string ReplaceUrlSegments(string url, IEnumerable`1<Parameter> parameters);
}
public class RestSharp.Portable.RestRequest : object {
    [CompilerGeneratedAttribute]
private Method <Method>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Resource>k__BackingField;
    [CompilerGeneratedAttribute]
private IParameterCollection <Parameters>k__BackingField;
    [CompilerGeneratedAttribute]
private ISerializer <Serializer>k__BackingField;
    [CompilerGeneratedAttribute]
private ContentCollectionMode <ContentCollectionMode>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`3<Stream, CancellationToken, Task> <ResponseWriterAsync>k__BackingField;
    public Method Method { get; public set; }
    public string Resource { get; public set; }
    public IParameterCollection Parameters { get; }
    public ISerializer Serializer { get; public set; }
    public ContentCollectionMode ContentCollectionMode { get; public set; }
    public Func`3<Stream, CancellationToken, Task> ResponseWriterAsync { get; public set; }
    public RestRequest(Method method);
    public RestRequest(string resource);
    public RestRequest(string resource, Method method);
    public RestRequest(Uri resource);
    public RestRequest(Uri resource, Method method);
    [CompilerGeneratedAttribute]
public sealed virtual Method get_Method();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Method(Method value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Resource();
    [CompilerGeneratedAttribute]
public void set_Resource(string value);
    [CompilerGeneratedAttribute]
public sealed virtual IParameterCollection get_Parameters();
    [CompilerGeneratedAttribute]
public sealed virtual ISerializer get_Serializer();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Serializer(ISerializer value);
    [CompilerGeneratedAttribute]
public sealed virtual ContentCollectionMode get_ContentCollectionMode();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ContentCollectionMode(ContentCollectionMode value);
    [CompilerGeneratedAttribute]
public sealed virtual Func`3<Stream, CancellationToken, Task> get_ResponseWriterAsync();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ResponseWriterAsync(Func`3<Stream, CancellationToken, Task> value);
}
[ExtensionAttribute]
public static class RestSharp.Portable.RestRequestExtensions : object {
    private static JsonSerializer _defaultJsonSerializer;
    private static XmlDataContractSerializer _defaultXmlDataContractSerializer;
    private static RestRequestExtensions();
    [ExtensionAttribute]
public static IRestRequest AddJsonBody(IRestRequest request, object obj);
    [ExtensionAttribute]
public static IRestRequest AddXmlBody(IRestRequest request, object obj);
    [ExtensionAttribute]
public static IRestRequest AddBody(IRestRequest request, object obj);
    [ExtensionAttribute]
public static IRestRequest AddBody(IRestRequest request, string name, object obj);
    [ExtensionAttribute]
public static IRestRequest AddBody(IRestRequest request, string name, string text, Encoding encoding);
    [ExtensionAttribute]
public static IRestRequest AddBody(IRestRequest request, string text, Encoding encoding);
    [ExtensionAttribute]
public static IRestRequest AddObject(IRestRequest request, object obj, String[] includedProperties);
    [ExtensionAttribute]
public static IRestRequest AddObject(IRestRequest request, object obj, IEnumerable`1<string> objProperties, PropertyFilterMode filterMode);
    [ExtensionAttribute]
public static IRestRequest AddParameter(IRestRequest request, Parameter parameter);
    [ExtensionAttribute]
public static IRestRequest AddOrUpdateParameter(IRestRequest request, Parameter parameter);
    [ExtensionAttribute]
public static IRestRequest AddQueryParameter(IRestRequest request, string name, object value);
    [ExtensionAttribute]
public static IRestRequest AddOrUpdateQueryParameter(IRestRequest request, string name, object value);
    [ExtensionAttribute]
public static IRestRequest AddUrlSegment(IRestRequest request, string name, object value);
    [ExtensionAttribute]
public static IRestRequest AddHeader(IRestRequest request, string name, object value);
    [ExtensionAttribute]
public static IRestRequest AddOrUpdateHeader(IRestRequest request, string name, object value);
    [ExtensionAttribute]
public static IRestRequest AddParameter(IRestRequest request, string name, object value);
    [ExtensionAttribute]
public static IRestRequest AddOrUpdateParameter(IRestRequest request, string name, object value);
    [ExtensionAttribute]
public static IRestRequest AddParameter(IRestRequest request, string name, object value, ParameterType type);
    [ExtensionAttribute]
public static IRestRequest AddOrUpdateParameter(IRestRequest request, string name, object value, ParameterType type);
    [ExtensionAttribute]
public static IRestRequest AddParameter(IRestRequest request, string name, object value, ParameterType type, string contentType);
    [ExtensionAttribute]
public static IRestRequest AddOrUpdateParameter(IRestRequest request, string name, object value, ParameterType type, string contentType);
    [ExtensionAttribute]
public static IRestRequest AddFile(IRestRequest request, string name, Byte[] bytes, string fileName);
    [ExtensionAttribute]
public static IRestRequest AddFile(IRestRequest request, string name, Byte[] bytes, string fileName, string contentType);
    [ExtensionAttribute]
public static IRestRequest AddFile(IRestRequest request, string name, Stream input, string fileName);
    [ExtensionAttribute]
public static IRestRequest AddFile(IRestRequest request, string name, Stream input, string fileName, string contentType);
    [ExtensionAttribute]
public static IRestRequest AddFile(IRestRequest request, FileParameter parameter);
}
public class RestSharp.Portable.RestResponse : object {
    private Lazy`1<string> _content;
    [CompilerGeneratedAttribute]
private IRestRequest <Request>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <ResponseUri>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <RawBytes>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContentType>k__BackingField;
    [CompilerGeneratedAttribute]
private CookieCollection <Cookies>k__BackingField;
    [CompilerGeneratedAttribute]
private IHttpHeaders <Headers>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsSuccess>k__BackingField;
    [CompilerGeneratedAttribute]
private HttpStatusCode <StatusCode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StatusDescription>k__BackingField;
    [CompilerGeneratedAttribute]
private IRestClient <Client>k__BackingField;
    public IRestRequest Request { get; }
    public Uri ResponseUri { get; private set; }
    public Byte[] RawBytes { get; private set; }
    public string ContentType { get; private set; }
    public CookieCollection Cookies { get; private set; }
    public IHttpHeaders Headers { get; private set; }
    public bool IsSuccess { get; private set; }
    public HttpStatusCode StatusCode { get; private set; }
    public string StatusDescription { get; private set; }
    public string Content { get; }
    protected IRestClient Client { get; }
    protected RestResponse(IRestClient client, IRestRequest request);
    [CompilerGeneratedAttribute]
public sealed virtual IRestRequest get_Request();
    [CompilerGeneratedAttribute]
public sealed virtual Uri get_ResponseUri();
    [CompilerGeneratedAttribute]
private void set_ResponseUri(Uri value);
    [CompilerGeneratedAttribute]
public sealed virtual Byte[] get_RawBytes();
    [CompilerGeneratedAttribute]
private void set_RawBytes(Byte[] value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ContentType();
    [CompilerGeneratedAttribute]
private void set_ContentType(string value);
    [CompilerGeneratedAttribute]
public sealed virtual CookieCollection get_Cookies();
    [CompilerGeneratedAttribute]
private void set_Cookies(CookieCollection value);
    [CompilerGeneratedAttribute]
public sealed virtual IHttpHeaders get_Headers();
    [CompilerGeneratedAttribute]
private void set_Headers(IHttpHeaders value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsSuccess();
    [CompilerGeneratedAttribute]
private void set_IsSuccess(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual HttpStatusCode get_StatusCode();
    [CompilerGeneratedAttribute]
private void set_StatusCode(HttpStatusCode value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_StatusDescription();
    [CompilerGeneratedAttribute]
private void set_StatusDescription(string value);
    public sealed virtual string get_Content();
    [CompilerGeneratedAttribute]
protected IRestClient get_Client();
    [AsyncStateMachineAttribute("RestSharp.Portable.RestResponse/<CreateResponse>d__42")]
public static Task`1<IRestResponse> CreateResponse(IRestClient client, IRestRequest request, IHttpResponseMessage responseMessage, CancellationToken ct);
    [AsyncStateMachineAttribute("RestSharp.Portable.RestResponse/<CreateResponse>d__43`1")]
public static Task`1<IRestResponse`1<T>> CreateResponse(IRestClient client, IRestRequest request, IHttpResponseMessage responseMessage, CancellationToken ct);
    [AsyncStateMachineAttribute("RestSharp.Portable.RestResponse/<LoadResponse>d__44")]
protected virtual Task LoadResponse(IHttpResponseMessage response, CancellationToken ct);
}
public class RestSharp.Portable.RestResponse`1 : RestResponse {
    [CompilerGeneratedAttribute]
private T <Data>k__BackingField;
    public T Data { get; private set; }
    protected internal RestResponse`1(IRestClient client, IRestRequest request);
    [CompilerGeneratedAttribute]
public sealed virtual T get_Data();
    [CompilerGeneratedAttribute]
private void set_Data(T value);
    [AsyncStateMachineAttribute("RestSharp.Portable.RestResponse`1/<LoadResponse>d__5")]
protected virtual Task LoadResponse(IHttpResponseMessage response, CancellationToken ct);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__0(IHttpResponseMessage response, CancellationToken ct);
}
[ExtensionAttribute]
internal static class RestSharp.Portable.RestResponseExtensions : object {
    private static Encoding _defaultEncoding;
    private static RestResponseExtensions();
    [ExtensionAttribute]
public static string GetStringContent(IRestResponse response);
}
public class RestSharp.Portable.Serializers.JsonSerializer : object {
    private static Encoding _encoding;
    [CompilerGeneratedAttribute]
private string <ContentType>k__BackingField;
    public string ContentType { get; public set; }
    private static JsonSerializer();
    [CompilerGeneratedAttribute]
public sealed virtual string get_ContentType();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ContentType(string value);
    public sealed virtual Byte[] Serialize(object obj);
    protected virtual void ConfigureSerializer(JsonSerializer serializer);
}
public class RestSharp.Portable.Serializers.XmlDataContractSerializer : object {
    private static Encoding _defaultEncoding;
    private string _contentType;
    [CompilerGeneratedAttribute]
private static XmlDataContractSerializer <Default>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlWriterSettings <XmlWriterSettings>k__BackingField;
    public string ContentType { get; public set; }
    internal static XmlDataContractSerializer Default { get; }
    protected XmlWriterSettings XmlWriterSettings { get; protected set; }
    private static XmlDataContractSerializer();
    public sealed virtual string get_ContentType();
    public sealed virtual void set_ContentType(string value);
    [CompilerGeneratedAttribute]
internal static XmlDataContractSerializer get_Default();
    [CompilerGeneratedAttribute]
protected XmlWriterSettings get_XmlWriterSettings();
    [CompilerGeneratedAttribute]
protected void set_XmlWriterSettings(XmlWriterSettings value);
    public sealed virtual Byte[] Serialize(object obj);
    protected virtual DataContractSerializer CreateSerializer(object obj);
}
[FlagsAttribute]
internal enum RestSharp.Portable.UrlEscapeFlags : Enum {
    public int value__;
    public static UrlEscapeFlags Default;
    public static UrlEscapeFlags LikeEscapeDataString;
    public static UrlEscapeFlags LikeUrlEncode;
    public static UrlEscapeFlags AllowLikeEscapeDataString;
    public static UrlEscapeFlags AllowAllUnreserved;
    public static UrlEscapeFlags AllowLikeUrlEncode;
    public static UrlEscapeFlags AllowLikeEscapeUriString;
    public static UrlEscapeFlags AllowLikeWebRequest;
    public static UrlEscapeFlags AllowMask;
    public static UrlEscapeFlags LowerCaseHexCharacters;
    public static UrlEscapeFlags EscapeSpaceAsPlus;
    public static UrlEscapeFlags BuilderVariantMask;
    public static UrlEscapeFlags BuilderVariantListByteArray;
    public static UrlEscapeFlags BuilderVariantListByte;
}
internal static class RestSharp.Portable.UrlEscapeUtility : object {
    private static Encoding s_defaultEncoding;
    private static Byte[] s_hexCharsLow;
    private static Byte[] s_hexCharsUp;
    private static Dictionary`2<UrlEscapeFlags, ISet`1<byte>> s_allowedBytes;
    private static Dictionary`2<UrlEscapeFlags, EscapeBuilderDelegate> s_escapeBuilders;
    private static UrlEscapeUtility();
    public static long ComputeLength(string data);
    public static long ComputeLength(string data, Encoding encoding);
    public static long ComputeLength(string data, UrlEscapeFlags flags);
    public static long ComputeLength(string data, Encoding encoding, UrlEscapeFlags flags);
    public static long ComputeLength(Byte[] data);
    public static long ComputeLength(Byte[] data, UrlEscapeFlags flags);
    public static string Escape(string data);
    public static string Escape(string data, Encoding encoding);
    public static string Escape(Byte[] data);
    public static Byte[] EscapeToBytes(string data);
    public static Byte[] EscapeToBytes(string data, Encoding encoding);
    public static Byte[] EscapeToBytes(Byte[] data);
    public static string Escape(string data, UrlEscapeFlags flags);
    public static string Escape(string data, Encoding encoding, UrlEscapeFlags flags);
    public static string Escape(Byte[] data, UrlEscapeFlags flags);
    public static Byte[] EscapeToBytes(string data, UrlEscapeFlags flags);
    public static Byte[] EscapeToBytes(string data, Encoding encoding, UrlEscapeFlags flags);
    public static Byte[] EscapeToBytes(Byte[] data, UrlEscapeFlags flags);
    private static long ComputeLength(Byte[] data, UrlEscapeFlags flags, ISet`1<byte> allowedBytes);
    private static Byte[] EscapeToBytes1(Byte[] data, UrlEscapeFlags flags, Byte[] hexChars, ISet`1<byte> allowedBytes);
    private static Byte[] EscapeToBytes2(Byte[] data, UrlEscapeFlags flags, Byte[] hexChars, ISet`1<byte> allowedBytes);
    private static string EscapeDataString(string input);
    private static string ConvertEscapedBytesToString(Byte[] data);
}
internal static class RestSharp.Portable.UrlUtility : object {
    private static Byte[] s_lowalpha;
    private static Byte[] s_upalpha;
    private static Byte[] s_alpha;
    private static Byte[] s_digit;
    private static Byte[] s_mark;
    private static Lazy`1<Byte[]> s_alphanum;
    private static Lazy`1<Byte[]> s_unreserved;
    internal static Byte[] AlphaNum { get; }
    internal static Byte[] Unreserved { get; }
    private static UrlUtility();
    internal static Byte[] get_AlphaNum();
    internal static Byte[] get_Unreserved();
    public static string Escape(string data);
    public static string Escape(string data, Encoding encoding);
    public static string Escape(Byte[] data);
    public static Byte[] EscapeToBytes(string data);
    public static Byte[] EscapeToBytes(string data, Encoding encoding);
    public static Byte[] EscapeToBytes(Byte[] data);
    public static string Escape(string data, UrlEscapeFlags flags);
    public static string Escape(string data, Encoding encoding, UrlEscapeFlags flags);
    public static string Escape(Byte[] data, UrlEscapeFlags flags);
    public static Byte[] EscapeToBytes(string data, UrlEscapeFlags flags);
    public static Byte[] EscapeToBytes(string data, Encoding encoding, UrlEscapeFlags flags);
    public static Byte[] EscapeToBytes(Byte[] data, UrlEscapeFlags flags);
    public static long ComputeLength(string data);
    public static long ComputeLength(string data, Encoding encoding);
    public static long ComputeLength(string data, UrlEscapeFlags flags);
    public static long ComputeLength(string data, Encoding encoding, UrlEscapeFlags flags);
    public static long ComputeLength(Byte[] data);
    public static long ComputeLength(Byte[] data, UrlEscapeFlags flags);
}
