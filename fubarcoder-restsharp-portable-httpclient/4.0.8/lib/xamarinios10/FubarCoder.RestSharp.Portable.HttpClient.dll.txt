[ExtensionAttribute]
internal static class RestSharp.Portable.HttpClient.DefaultHttpExtensions : object {
    [ExtensionAttribute]
public static IHttpHeaders AsRestHeaders(HttpHeaders headers);
    [ExtensionAttribute]
public static HttpHeaders AsHttpHeaders(IHttpHeaders headers);
    [ExtensionAttribute]
public static IHttpContent AsRestHttpContent(HttpContent content);
    [ExtensionAttribute]
public static HttpContent AsHttpContent(IHttpContent content);
    [ExtensionAttribute]
public static void CopyTo(IHttpHeaders headers, HttpHeaders destination);
    [ExtensionAttribute]
public static HttpRequestMessage AsHttpRequestMessage(IHttpRequestMessage message);
}
[ExtensionAttribute]
internal static class RestSharp.Portable.HttpClient.HttpMethodExtensions : object {
    private static IDictionary`2<Method, HttpMethod> _methodsToHttpMethods;
    private static IDictionary`2<string, Method> _httpMethodsToMethods;
    private static HttpMethodExtensions();
    [ExtensionAttribute]
public static HttpMethod ToHttpMethod(Method method);
    [ExtensionAttribute]
public static Method ToMethod(HttpMethod method);
}
public class RestSharp.Portable.HttpClient.Impl.DefaultHttpClientFactory : object {
    private bool _setCredentials;
    public DefaultHttpClientFactory(bool setCredentials);
    public virtual IHttpClient CreateClient(IRestClient client);
    public virtual IHttpRequestMessage CreateRequestMessage(IRestClient client, IRestRequest request, IList`1<Parameter> parameters);
    protected virtual Uri GetBaseAddress(IRestClient client);
    protected virtual Uri GetMessageAddress(IRestClient client, IRestRequest request);
    protected virtual Method GetHttpMethod(IRestClient client, IRestRequest request);
    protected virtual HttpRequestMessage AddHttpHeaderParameters(HttpRequestMessage message, IRestRequest request, IList`1<Parameter> parameters);
    protected virtual HttpMessageHandler CreateMessageHandler(IRestClient client);
}
public class RestSharp.Portable.HttpClient.Impl.Http.DefaultHttpClient : object {
    private DefaultHttpHeaders _defaultHeaders;
    private CookieContainer _cookies;
    [CompilerGeneratedAttribute]
private HttpClient <Client>k__BackingField;
    public HttpClient Client { get; }
    public Uri BaseAddress { get; public set; }
    public IHttpHeaders DefaultRequestHeaders { get; }
    public TimeSpan Timeout { get; public set; }
    public DefaultHttpClient(HttpClient client, CookieContainer cookies);
    [CompilerGeneratedAttribute]
public HttpClient get_Client();
    public sealed virtual Uri get_BaseAddress();
    public sealed virtual void set_BaseAddress(Uri value);
    public sealed virtual IHttpHeaders get_DefaultRequestHeaders();
    public sealed virtual TimeSpan get_Timeout();
    public sealed virtual void set_Timeout(TimeSpan value);
    [AsyncStateMachineAttribute("RestSharp.Portable.HttpClient.Impl.Http.DefaultHttpClient/<SendAsync>d__14")]
public sealed virtual Task`1<IHttpResponseMessage> SendAsync(IHttpRequestMessage request, CancellationToken cancellationToken);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
}
public class RestSharp.Portable.HttpClient.Impl.Http.DefaultHttpContent : object {
    private bool _isDisposed;
    [CompilerGeneratedAttribute]
private HttpContent <Content>k__BackingField;
    [CompilerGeneratedAttribute]
private IHttpHeaders <Headers>k__BackingField;
    public HttpContent Content { get; }
    public IHttpHeaders Headers { get; }
    public DefaultHttpContent(HttpContent content);
    [CompilerGeneratedAttribute]
public HttpContent get_Content();
    [CompilerGeneratedAttribute]
public sealed virtual IHttpHeaders get_Headers();
    public sealed virtual Task CopyToAsync(Stream stream);
    public sealed virtual Task LoadIntoBufferAsync(long maxBufferSize);
    public sealed virtual Task`1<Stream> ReadAsStreamAsync();
    public sealed virtual Task`1<Byte[]> ReadAsByteArrayAsync();
    public sealed virtual Task`1<string> ReadAsStringAsync();
    public sealed virtual bool TryComputeLength(Int64& length);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
}
public class RestSharp.Portable.HttpClient.Impl.Http.DefaultHttpHeaders : object {
    private HttpHeaders _headers;
    public HttpHeaders Headers { get; }
    public DefaultHttpHeaders(HttpHeaders headers);
    public HttpHeaders get_Headers();
    public sealed virtual IEnumerator`1<KeyValuePair`2<string, IEnumerable`1<string>>> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual void Add(string name, IEnumerable`1<string> values);
    public sealed virtual void Add(string name, string value);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(string name);
    public sealed virtual IEnumerable`1<string> GetValues(string name);
    public sealed virtual bool Remove(string name);
    public sealed virtual bool TryGetValues(string name, IEnumerable`1& values);
    public sealed virtual bool TryAddWithoutValidation(string name, IEnumerable`1<string> values);
    public sealed virtual bool TryAddWithoutValidation(string name, string value);
}
public class RestSharp.Portable.HttpClient.Impl.Http.DefaultHttpRequestMessage : object {
    private DefaultHttpHeaders _requestHttpHeaders;
    private IHttpContent _content;
    private bool _isDisposed;
    [CompilerGeneratedAttribute]
private HttpRequestMessage <RequestMessage>k__BackingField;
    public HttpRequestMessage RequestMessage { get; }
    public IHttpHeaders Headers { get; }
    public Method Method { get; public set; }
    public Uri RequestUri { get; public set; }
    public Version Version { get; public set; }
    public IHttpContent Content { get; public set; }
    public DefaultHttpRequestMessage(HttpRequestMessage requestMessage);
    [CompilerGeneratedAttribute]
public HttpRequestMessage get_RequestMessage();
    public sealed virtual IHttpHeaders get_Headers();
    public sealed virtual Method get_Method();
    public sealed virtual void set_Method(Method value);
    public sealed virtual Uri get_RequestUri();
    public sealed virtual void set_RequestUri(Uri value);
    public sealed virtual Version get_Version();
    public sealed virtual void set_Version(Version value);
    public sealed virtual IHttpContent get_Content();
    public sealed virtual void set_Content(IHttpContent value);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
}
public class RestSharp.Portable.HttpClient.Impl.Http.DefaultHttpResponseMessage : object {
    [CompilerGeneratedAttribute]
private HttpResponseMessage <ResponseMessage>k__BackingField;
    [CompilerGeneratedAttribute]
private CookieContainer <Cookies>k__BackingField;
    [CompilerGeneratedAttribute]
private IHttpHeaders <Headers>k__BackingField;
    [CompilerGeneratedAttribute]
private IHttpRequestMessage <RequestMessage>k__BackingField;
    [CompilerGeneratedAttribute]
private IHttpContent <Content>k__BackingField;
    public HttpResponseMessage ResponseMessage { get; }
    public CookieContainer Cookies { get; }
    public IHttpHeaders Headers { get; }
    public bool IsSuccessStatusCode { get; }
    public string ReasonPhrase { get; }
    public IHttpRequestMessage RequestMessage { get; }
    public HttpStatusCode StatusCode { get; }
    public IHttpContent Content { get; }
    public DefaultHttpResponseMessage(HttpRequestMessage requestMessage, HttpResponseMessage responseMessage, CookieContainer cookies);
    [CompilerGeneratedAttribute]
public HttpResponseMessage get_ResponseMessage();
    [CompilerGeneratedAttribute]
public sealed virtual CookieContainer get_Cookies();
    [CompilerGeneratedAttribute]
public sealed virtual IHttpHeaders get_Headers();
    public sealed virtual bool get_IsSuccessStatusCode();
    public sealed virtual string get_ReasonPhrase();
    [CompilerGeneratedAttribute]
public sealed virtual IHttpRequestMessage get_RequestMessage();
    public sealed virtual HttpStatusCode get_StatusCode();
    [CompilerGeneratedAttribute]
public sealed virtual IHttpContent get_Content();
    public sealed virtual void EnsureSuccessStatusCode();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
}
public class RestSharp.Portable.HttpClient.Impl.Http.HttpContentWrapper : HttpContent {
    private bool _isDisposed;
    [CompilerGeneratedAttribute]
private IHttpContent <Content>k__BackingField;
    public IHttpContent Content { get; }
    public HttpContentWrapper(IHttpContent content);
    [CompilerGeneratedAttribute]
public IHttpContent get_Content();
    protected virtual Task SerializeToStreamAsync(Stream stream, TransportContext context);
    protected virtual bool TryComputeLength(Int64& length);
    protected virtual void Dispose(bool disposing);
}
public class RestSharp.Portable.HttpClient.RestClient : RestClientBase {
    public RestClient(Uri baseUrl);
    public RestClient(string baseUrl);
    protected virtual IHttpContent GetContent(IRestRequest request, RequestParameters parameters);
}
[ExtensionAttribute]
public static class RestSharp.Portable.HttpClient.RestClientExtensions : object {
    [ExtensionAttribute]
internal static IHttpContent GetContent(IRestClient client, IRestRequest request, RequestParameters parameters);
    [ExtensionAttribute]
private static HttpContent GetBasicContent(IRestClient client, IRestRequest request, RequestParameters parameters);
    [ExtensionAttribute]
private static HttpContent GetMultiPartContent(IRestClient client, IRestRequest request, RequestParameters parameters);
}
[ExtensionAttribute]
public static class RestSharp.Portable.HttpClient.RestRequestExtensions : object {
    [ExtensionAttribute]
internal static HttpContent GetBodyContent(IRestRequest request, Parameter body);
}
