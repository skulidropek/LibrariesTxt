public class FuzzySharp.Edits.EditOp : object {
    [CompilerGeneratedAttribute]
private EditType <EditType>k__BackingField;
    [CompilerGeneratedAttribute]
private int <SourcePos>k__BackingField;
    [CompilerGeneratedAttribute]
private int <DestPos>k__BackingField;
    public EditType EditType { get; public set; }
    public int SourcePos { get; public set; }
    public int DestPos { get; public set; }
    [CompilerGeneratedAttribute]
public EditType get_EditType();
    [CompilerGeneratedAttribute]
public void set_EditType(EditType value);
    [CompilerGeneratedAttribute]
public int get_SourcePos();
    [CompilerGeneratedAttribute]
public void set_SourcePos(int value);
    [CompilerGeneratedAttribute]
public int get_DestPos();
    [CompilerGeneratedAttribute]
public void set_DestPos(int value);
    public virtual string ToString();
}
public enum FuzzySharp.Edits.EditType : Enum {
    public int value__;
    public static EditType DELETE;
    public static EditType EQUAL;
    public static EditType INSERT;
    public static EditType REPLACE;
    public static EditType KEEP;
}
public class FuzzySharp.Edits.MatchingBlock : object {
    [CompilerGeneratedAttribute]
private int <SourcePos>k__BackingField;
    [CompilerGeneratedAttribute]
private int <DestPos>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Length>k__BackingField;
    public int SourcePos { get; public set; }
    public int DestPos { get; public set; }
    public int Length { get; public set; }
    [CompilerGeneratedAttribute]
public int get_SourcePos();
    [CompilerGeneratedAttribute]
public void set_SourcePos(int value);
    [CompilerGeneratedAttribute]
public int get_DestPos();
    [CompilerGeneratedAttribute]
public void set_DestPos(int value);
    [CompilerGeneratedAttribute]
public int get_Length();
    [CompilerGeneratedAttribute]
public void set_Length(int value);
    public virtual string ToString();
}
public class FuzzySharp.Edits.OpCode : object {
    [CompilerGeneratedAttribute]
private EditType <EditType>k__BackingField;
    [CompilerGeneratedAttribute]
private int <SourceBegin>k__BackingField;
    [CompilerGeneratedAttribute]
private int <SourceEnd>k__BackingField;
    [CompilerGeneratedAttribute]
private int <DestBegin>k__BackingField;
    [CompilerGeneratedAttribute]
private int <DestEnd>k__BackingField;
    public EditType EditType { get; public set; }
    public int SourceBegin { get; public set; }
    public int SourceEnd { get; public set; }
    public int DestBegin { get; public set; }
    public int DestEnd { get; public set; }
    [CompilerGeneratedAttribute]
public EditType get_EditType();
    [CompilerGeneratedAttribute]
public void set_EditType(EditType value);
    [CompilerGeneratedAttribute]
public int get_SourceBegin();
    [CompilerGeneratedAttribute]
public void set_SourceBegin(int value);
    [CompilerGeneratedAttribute]
public int get_SourceEnd();
    [CompilerGeneratedAttribute]
public void set_SourceEnd(int value);
    [CompilerGeneratedAttribute]
public int get_DestBegin();
    [CompilerGeneratedAttribute]
public void set_DestBegin(int value);
    [CompilerGeneratedAttribute]
public int get_DestEnd();
    [CompilerGeneratedAttribute]
public void set_DestEnd(int value);
    public virtual string ToString();
}
[ExtensionAttribute]
public static class FuzzySharp.Extensions.EnumerableExtensions : object {
    [IteratorStateMachineAttribute("FuzzySharp.Extensions.EnumerableExtensions/<MaxN>d__0`1")]
[ExtensionAttribute]
public static IEnumerable`1<T> MaxN(IEnumerable`1<T> source, int n);
    [IteratorStateMachineAttribute("FuzzySharp.Extensions.EnumerableExtensions/<MaxNBy>d__1`2")]
[ExtensionAttribute]
public static IEnumerable`1<T> MaxNBy(IEnumerable`1<T> source, int n, Func`2<T, TVal> selector);
}
public class FuzzySharp.Extractor.ExtractedResult`1 : object {
    public T Value;
    public int Score;
    public int Index;
    public ExtractedResult`1(T value, int score);
    public ExtractedResult`1(T value, int score, int index);
    public sealed virtual int CompareTo(ExtractedResult`1<T> other);
    public virtual string ToString();
}
public static class FuzzySharp.Extractor.ResultExtractor : object {
    [IteratorStateMachineAttribute("FuzzySharp.Extractor.ResultExtractor/<ExtractWithoutOrder>d__0`1")]
public static IEnumerable`1<ExtractedResult`1<T>> ExtractWithoutOrder(T query, IEnumerable`1<T> choices, Func`2<T, string> processor, IRatioScorer scorer, int cutoff);
    public static ExtractedResult`1<T> ExtractOne(T query, IEnumerable`1<T> choices, Func`2<T, string> processor, IRatioScorer calculator, int cutoff);
    public static IEnumerable`1<ExtractedResult`1<T>> ExtractSorted(T query, IEnumerable`1<T> choices, Func`2<T, string> processor, IRatioScorer calculator, int cutoff);
    public static IEnumerable`1<ExtractedResult`1<T>> ExtractTop(T query, IEnumerable`1<T> choices, Func`2<T, string> processor, IRatioScorer calculator, int limit, int cutoff);
}
public static class FuzzySharp.Fuzz : object {
    public static int Ratio(string input1, string input2);
    public static int Ratio(string input1, string input2, PreprocessMode preprocessMode);
    public static int PartialRatio(string input1, string input2);
    public static int PartialRatio(string input1, string input2, PreprocessMode preprocessMode);
    public static int TokenSortRatio(string input1, string input2);
    public static int TokenSortRatio(string input1, string input2, PreprocessMode preprocessMode);
    public static int PartialTokenSortRatio(string input1, string input2);
    public static int PartialTokenSortRatio(string input1, string input2, PreprocessMode preprocessMode);
    public static int TokenSetRatio(string input1, string input2);
    public static int TokenSetRatio(string input1, string input2, PreprocessMode preprocessMode);
    public static int PartialTokenSetRatio(string input1, string input2);
    public static int PartialTokenSetRatio(string input1, string input2, PreprocessMode preprocessMode);
    public static int TokenDifferenceRatio(string input1, string input2);
    public static int TokenDifferenceRatio(string input1, string input2, PreprocessMode preprocessMode);
    public static int PartialTokenDifferenceRatio(string input1, string input2);
    public static int PartialTokenDifferenceRatio(string input1, string input2, PreprocessMode preprocessMode);
    public static int TokenInitialismRatio(string input1, string input2);
    public static int TokenInitialismRatio(string input1, string input2, PreprocessMode preprocessMode);
    public static int PartialTokenInitialismRatio(string input1, string input2);
    public static int PartialTokenInitialismRatio(string input1, string input2, PreprocessMode preprocessMode);
    public static int TokenAbbreviationRatio(string input1, string input2);
    public static int TokenAbbreviationRatio(string input1, string input2, PreprocessMode preprocessMode);
    public static int PartialTokenAbbreviationRatio(string input1, string input2);
    public static int PartialTokenAbbreviationRatio(string input1, string input2, PreprocessMode preprocessMode);
    public static int WeightedRatio(string input1, string input2);
    public static int WeightedRatio(string input1, string input2, PreprocessMode preprocessMode);
}
public static class FuzzySharp.Levenshtein : object {
    private static EditOp[] GetEditOps(T[] arr1, T[] arr2);
    private static EditOp[] GetEditOps(string s1, string s2);
    private static EditOp[] GetEditOps(int len1, T[] c1, int len2, T[] c2);
    private static EditOp[] EditOpsFromCostMatrix(int len1, T[] c1, int p1, int o1, int len2, T[] c2, int p2, int o2, Int32[] matrix);
    public static MatchingBlock[] GetMatchingBlocks(T[] s1, T[] s2);
    public static MatchingBlock[] GetMatchingBlocks(string s1, string s2);
    public static MatchingBlock[] GetMatchingBlocks(int len1, int len2, OpCode[] ops);
    private static MatchingBlock[] GetMatchingBlocks(int len1, int len2, EditOp[] ops);
    private static OpCode[] EditOpsToOpCodes(EditOp[] ops, int len1, int len2);
    public static int EditDistance(string s1, string s2, int xcost);
    public static int EditDistance(T[] c1, T[] c2, int xcost);
    private static int Memchr(T[] haystack, int offset, T needle, int num);
    public static double GetRatio(T[] input1, T[] input2);
    public static double GetRatio(IEnumerable`1<T> input1, IEnumerable`1<T> input2);
    public static double GetRatio(string s1, string s2);
}
public enum FuzzySharp.PreProcess.PreprocessMode : Enum {
    public int value__;
    public static PreprocessMode Full;
    public static PreprocessMode None;
}
internal class FuzzySharp.PreProcess.StringPreprocessorFactory : object {
    private static string pattern;
    private static StringPreprocessorFactory();
    private static string Default(string input);
    public static Func`2<string, string> GetPreprocessor(PreprocessMode mode);
}
public static class FuzzySharp.Process : object {
    private static IRatioScorer s_defaultScorer;
    private static Func`2<string, string> s_defaultStringProcessor;
    private static Process();
    public static IEnumerable`1<ExtractedResult`1<string>> ExtractAll(string query, IEnumerable`1<string> choices, Func`2<string, string> processor, IRatioScorer scorer, int cutoff);
    public static IEnumerable`1<ExtractedResult`1<T>> ExtractAll(T query, IEnumerable`1<T> choices, Func`2<T, string> processor, IRatioScorer scorer, int cutoff);
    public static IEnumerable`1<ExtractedResult`1<string>> ExtractTop(string query, IEnumerable`1<string> choices, Func`2<string, string> processor, IRatioScorer scorer, int limit, int cutoff);
    public static IEnumerable`1<ExtractedResult`1<T>> ExtractTop(T query, IEnumerable`1<T> choices, Func`2<T, string> processor, IRatioScorer scorer, int limit, int cutoff);
    public static IEnumerable`1<ExtractedResult`1<string>> ExtractSorted(string query, IEnumerable`1<string> choices, Func`2<string, string> processor, IRatioScorer scorer, int cutoff);
    public static IEnumerable`1<ExtractedResult`1<T>> ExtractSorted(T query, IEnumerable`1<T> choices, Func`2<T, string> processor, IRatioScorer scorer, int cutoff);
    public static ExtractedResult`1<string> ExtractOne(string query, IEnumerable`1<string> choices, Func`2<string, string> processor, IRatioScorer scorer, int cutoff);
    public static ExtractedResult`1<T> ExtractOne(T query, IEnumerable`1<T> choices, Func`2<T, string> processor, IRatioScorer scorer, int cutoff);
    public static ExtractedResult`1<string> ExtractOne(string query, String[] choices);
}
public class FuzzySharp.SimilarityRatio.Scorer.Composite.WeightedRatioScorer : ScorerBase {
    private static double UNBASE_SCALE;
    private static double PARTIAL_SCALE;
    private static bool TRY_PARTIALS;
    private static WeightedRatioScorer();
    public virtual int Score(string input1, string input2);
}
public interface FuzzySharp.SimilarityRatio.Scorer.Generic.IRatioScorer`1 {
    public abstract virtual int Score(T[] input1, T[] input2);
}
public abstract class FuzzySharp.SimilarityRatio.Scorer.Generic.ScorerBase`1 : object {
    public abstract virtual int Score(T[] input1, T[] input2);
}
public interface FuzzySharp.SimilarityRatio.Scorer.IRatioScorer {
    public abstract virtual int Score(string input1, string input2);
    public abstract virtual int Score(string input1, string input2, PreprocessMode preprocessMode);
}
public abstract class FuzzySharp.SimilarityRatio.Scorer.ScorerBase : object {
    public abstract virtual int Score(string input1, string input2);
    public sealed virtual int Score(string input1, string input2, PreprocessMode preprocessMode);
}
public class FuzzySharp.SimilarityRatio.Scorer.StrategySensitive.DefaultRatioScorer : SimpleRatioScorerBase {
    protected Func`3<string, string, int> Scorer { get; }
    protected virtual Func`3<string, string, int> get_Scorer();
}
public abstract class FuzzySharp.SimilarityRatio.Scorer.StrategySensitive.Generic.StrategySensitiveScorerBase`1 : ScorerBase`1<T> {
    protected Func`3<T[], T[], int> Scorer { get; }
    protected abstract virtual Func`3<T[], T[], int> get_Scorer();
}
public class FuzzySharp.SimilarityRatio.Scorer.StrategySensitive.PartialRatioScorer : SimpleRatioScorerBase {
    protected Func`3<string, string, int> Scorer { get; }
    protected virtual Func`3<string, string, int> get_Scorer();
}
public class FuzzySharp.SimilarityRatio.Scorer.StrategySensitive.PartialTokenAbbreviationScorer : TokenAbbreviationScorerBase {
    protected Func`3<string, string, int> Scorer { get; }
    protected virtual Func`3<string, string, int> get_Scorer();
}
public class FuzzySharp.SimilarityRatio.Scorer.StrategySensitive.PartialTokenDifferenceScorer : TokenDifferenceScorerBase {
    protected Func`3<String[], String[], int> Scorer { get; }
    protected virtual Func`3<String[], String[], int> get_Scorer();
}
public class FuzzySharp.SimilarityRatio.Scorer.StrategySensitive.PartialTokenInitialismScorer : TokenInitialismScorerBase {
    protected Func`3<string, string, int> Scorer { get; }
    protected virtual Func`3<string, string, int> get_Scorer();
}
public class FuzzySharp.SimilarityRatio.Scorer.StrategySensitive.PartialTokenSetScorer : TokenSetScorerBase {
    protected Func`3<string, string, int> Scorer { get; }
    protected virtual Func`3<string, string, int> get_Scorer();
}
public class FuzzySharp.SimilarityRatio.Scorer.StrategySensitive.PartialTokenSortScorer : TokenSortScorerBase {
    protected Func`3<string, string, int> Scorer { get; }
    protected virtual Func`3<string, string, int> get_Scorer();
}
public abstract class FuzzySharp.SimilarityRatio.Scorer.StrategySensitive.SimpleRatioScorerBase : StrategySensitiveScorerBase {
    public virtual int Score(string input1, string input2);
}
public abstract class FuzzySharp.SimilarityRatio.Scorer.StrategySensitive.StrategySensitiveScorerBase : ScorerBase {
    protected Func`3<string, string, int> Scorer { get; }
    protected abstract virtual Func`3<string, string, int> get_Scorer();
}
public class FuzzySharp.SimilarityRatio.Scorer.StrategySensitive.TokenAbbreviationScorer : TokenAbbreviationScorerBase {
    protected Func`3<string, string, int> Scorer { get; }
    protected virtual Func`3<string, string, int> get_Scorer();
}
public abstract class FuzzySharp.SimilarityRatio.Scorer.StrategySensitive.TokenAbbreviationScorerBase : StrategySensitiveScorerBase {
    public virtual int Score(string input1, string input2);
    private bool StringContainsInOrder(string s1, string s2);
}
public class FuzzySharp.SimilarityRatio.Scorer.StrategySensitive.TokenDifferenceScorer : TokenDifferenceScorerBase {
    protected Func`3<String[], String[], int> Scorer { get; }
    protected virtual Func`3<String[], String[], int> get_Scorer();
}
public abstract class FuzzySharp.SimilarityRatio.Scorer.StrategySensitive.TokenDifferenceScorerBase : StrategySensitiveScorerBase`1<string> {
    public virtual int Score(String[] input1, String[] input2);
    public sealed virtual int Score(string input1, string input2);
    public sealed virtual int Score(string input1, string input2, PreprocessMode preprocessMode);
}
public class FuzzySharp.SimilarityRatio.Scorer.StrategySensitive.TokenInitialismScorer : TokenInitialismScorerBase {
    protected Func`3<string, string, int> Scorer { get; }
    protected virtual Func`3<string, string, int> get_Scorer();
}
public abstract class FuzzySharp.SimilarityRatio.Scorer.StrategySensitive.TokenInitialismScorerBase : StrategySensitiveScorerBase {
    public virtual int Score(string input1, string input2);
}
public class FuzzySharp.SimilarityRatio.Scorer.StrategySensitive.TokenSetScorer : TokenSetScorerBase {
    protected Func`3<string, string, int> Scorer { get; }
    protected virtual Func`3<string, string, int> get_Scorer();
}
public abstract class FuzzySharp.SimilarityRatio.Scorer.StrategySensitive.TokenSetScorerBase : StrategySensitiveScorerBase {
    public virtual int Score(string input1, string input2);
}
public class FuzzySharp.SimilarityRatio.Scorer.StrategySensitive.TokenSortScorer : TokenSortScorerBase {
    protected Func`3<string, string, int> Scorer { get; }
    protected virtual Func`3<string, string, int> get_Scorer();
}
public abstract class FuzzySharp.SimilarityRatio.Scorer.StrategySensitive.TokenSortScorerBase : StrategySensitiveScorerBase {
    public virtual int Score(string input1, string input2);
}
public static class FuzzySharp.SimilarityRatio.ScorerCache : object {
    private static ConcurrentDictionary`2<Type, IRatioScorer> s_scorerCache;
    private static ScorerCache();
    public static IRatioScorer Get();
}
internal class FuzzySharp.SimilarityRatio.Strategy.DefaultRatioStrategy : object {
    public static int Calculate(string input1, string input2);
}
internal class FuzzySharp.SimilarityRatio.Strategy.Generic.DefaultRatioStrategy`1 : object {
    public static int Calculate(T[] input1, T[] input2);
}
internal class FuzzySharp.SimilarityRatio.Strategy.Generic.PartialRatioStrategy`1 : object {
    public static int Calculate(T[] input1, T[] input2);
}
internal class FuzzySharp.SimilarityRatio.Strategy.PartialRatioStrategy : object {
    public static int Calculate(string input1, string input2);
}
public abstract class FuzzySharp.Utils.Heap`1 : object {
    private static int InitialCapacity;
    private static int GrowFactor;
    private static int MinGrow;
    private int _capacity;
    private T[] _heap;
    private int _tail;
    [CompilerGeneratedAttribute]
private Comparer`1<T> <Comparer>k__BackingField;
    public int Count { get; }
    public int Capacity { get; }
    protected Comparer`1<T> Comparer { get; }
    protected Heap`1(Comparer`1<T> comparer);
    protected Heap`1(IEnumerable`1<T> collection);
    protected Heap`1(IEnumerable`1<T> collection, Comparer`1<T> comparer);
    public int get_Count();
    public int get_Capacity();
    [CompilerGeneratedAttribute]
protected Comparer`1<T> get_Comparer();
    protected abstract virtual bool Dominates(T x, T y);
    public void Add(T item);
    private void BubbleUp(int i);
    public T GetMin();
    public T ExtractDominating();
    private void BubbleDown(int i);
    private int Dominating(int i);
    private int GetDominating(int newNode, int dominatingNode);
    private void Swap(int i, int j);
    private static int Parent(int i);
    private static int YoungChild(int i);
    private static int OldChild(int i);
    private void Grow();
    public sealed virtual IEnumerator`1<T> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public class FuzzySharp.Utils.MaxHeap`1 : Heap`1<T> {
    public MaxHeap`1(Comparer`1<T> comparer);
    public MaxHeap`1(IEnumerable`1<T> collection, Comparer`1<T> comparer);
    public MaxHeap`1(IEnumerable`1<T> collection);
    protected virtual bool Dominates(T x, T y);
}
public class FuzzySharp.Utils.MinHeap`1 : Heap`1<T> {
    public MinHeap`1(Comparer`1<T> comparer);
    public MinHeap`1(IEnumerable`1<T> collection);
    public MinHeap`1(IEnumerable`1<T> collection, Comparer`1<T> comparer);
    protected virtual bool Dominates(T x, T y);
}
[ExtensionAttribute]
public static class FuzzySharp.Utils.Permutation : object {
    [ExtensionAttribute]
public static List`1<List`1<T>> AllPermutations(IEnumerable`1<T> seed);
    [ExtensionAttribute]
public static List`1<List`1<T>> PermutationsOfSize(IEnumerable`1<T> seed, int size);
    [IteratorStateMachineAttribute("FuzzySharp.Utils.Permutation/<PermutationsOfSize>d__2`1")]
[ExtensionAttribute]
private static IEnumerable`1<List`1<T>> PermutationsOfSize(IEnumerable`1<T> seed, List`1<T> set, int size);
    [IteratorStateMachineAttribute("FuzzySharp.Utils.Permutation/<Permute>d__3`1")]
private static IEnumerable`1<List`1<T>> Permute(List`1<T> set, int start, int end);
    private static void Swap(List`1<T> set, int a, int b);
    [IteratorStateMachineAttribute("FuzzySharp.Utils.Permutation/<Cycles>d__5`1")]
public static IEnumerable`1<List`1<T>> Cycles(IEnumerable`1<T> seed);
    [ExtensionAttribute]
public static bool IsPermutationOf(IEnumerable`1<T> set, IEnumerable`1<T> other);
}
public class FuzzySharp.Utils.Permutor`1 : object {
    private List`1<T> _set;
    public Permutor`1(IEnumerable`1<T> set);
    public List`1<T> PermutationAt(long i);
    public List`1<T> NextPermutation();
    public bool NextPermutation(List`1<T> set);
}
