public enum Gee.External.Capstone.Arm.ArmConditionCode : Enum {
    public int value__;
    public static ArmConditionCode Invalid;
    public static ArmConditionCode ARM_CC_EQ;
    public static ArmConditionCode ARM_CC_NE;
    public static ArmConditionCode ARM_CC_HS;
    public static ArmConditionCode ARM_CC_LO;
    public static ArmConditionCode ARM_CC_MI;
    public static ArmConditionCode ARM_CC_PL;
    public static ArmConditionCode ARM_CC_VS;
    public static ArmConditionCode ARM_CC_VC;
    public static ArmConditionCode ARM_CC_HI;
    public static ArmConditionCode ARM_CC_LS;
    public static ArmConditionCode ARM_CC_GE;
    public static ArmConditionCode ARM_CC_LT;
    public static ArmConditionCode ARM_CC_GT;
    public static ArmConditionCode ARM_CC_LE;
    public static ArmConditionCode ARM_CC_AL;
}
public enum Gee.External.Capstone.Arm.ArmCpsFlag : Enum {
    public int value__;
    public static ArmCpsFlag Invalid;
    public static ArmCpsFlag ARM_CPSFLAG_F;
    public static ArmCpsFlag ARM_CPSFLAG_I;
    public static ArmCpsFlag ARM_CPSFLAG_A;
    public static ArmCpsFlag ARM_CPSFLAG_NONE;
}
public enum Gee.External.Capstone.Arm.ArmCpsMode : Enum {
    public int value__;
    public static ArmCpsMode Invalid;
    public static ArmCpsMode ARM_CPSMODE_IE;
    public static ArmCpsMode ARM_CPSMODE_ID;
}
[FlagsAttribute]
public enum Gee.External.Capstone.Arm.ArmDisassembleMode : Enum {
    public int value__;
    public static ArmDisassembleMode Arm;
    public static ArmDisassembleMode BigEndian;
    public static ArmDisassembleMode LittleEndian;
    public static ArmDisassembleMode CortexM;
    public static ArmDisassembleMode Thumb;
    public static ArmDisassembleMode V8;
}
public class Gee.External.Capstone.Arm.ArmInstruction : Instruction`8<ArmInstruction, ArmInstructionDetail, ArmDisassembleMode, ArmInstructionGroup, ArmInstructionGroupId, ArmInstructionId, ArmRegister, ArmRegisterId> {
    internal ArmInstruction(ArmInstructionBuilder builder);
    internal static ArmInstruction Create(CapstoneDisassembler disassembler, NativeInstructionHandle hInstruction);
}
internal class Gee.External.Capstone.Arm.ArmInstructionBuilder : InstructionBuilder`8<ArmInstructionDetail, ArmDisassembleMode, ArmInstructionGroup, ArmInstructionGroupId, ArmInstruction, ArmInstructionId, ArmRegister, ArmRegisterId> {
    internal ArmInstruction Create();
    private protected virtual ArmInstructionDetail CreateDetails(CapstoneDisassembler disassembler, NativeInstructionHandle hInstruction);
    private protected virtual ArmDisassembleMode CreateDisassembleMode(NativeDisassembleMode nativeDisassembleMode);
    private protected virtual ArmInstructionId CreateId(int id);
}
public class Gee.External.Capstone.Arm.ArmInstructionDetail : InstructionDetail`8<ArmInstructionDetail, ArmDisassembleMode, ArmInstructionGroup, ArmInstructionGroupId, ArmInstruction, ArmInstructionId, ArmRegister, ArmRegisterId> {
    [CompilerGeneratedAttribute]
private ArmConditionCode <ConditionCode>k__BackingField;
    [CompilerGeneratedAttribute]
private ArmCpsFlag <CpsFlag>k__BackingField;
    [CompilerGeneratedAttribute]
private ArmCpsMode <CpsMode>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsUserMode>k__BackingField;
    [CompilerGeneratedAttribute]
private ArmMemoryBarrierOperation <MemoryBarrierOperation>k__BackingField;
    [CompilerGeneratedAttribute]
private ArmOperand[] <Operands>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UpdateFlags>k__BackingField;
    [CompilerGeneratedAttribute]
private ArmVectorDataType <VectorDataType>k__BackingField;
    [CompilerGeneratedAttribute]
private int <VectorSize>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <WriteBack>k__BackingField;
    public ArmConditionCode ConditionCode { get; }
    public ArmCpsFlag CpsFlag { get; }
    public ArmCpsMode CpsMode { get; }
    public bool IsUserMode { get; }
    public ArmMemoryBarrierOperation MemoryBarrierOperation { get; }
    public ArmOperand[] Operands { get; }
    public bool UpdateFlags { get; }
    public ArmVectorDataType VectorDataType { get; }
    public int VectorSize { get; }
    public bool WriteBack { get; }
    internal ArmInstructionDetail(ArmInstructionDetailBuilder builder);
    [CompilerGeneratedAttribute]
public ArmConditionCode get_ConditionCode();
    [CompilerGeneratedAttribute]
public ArmCpsFlag get_CpsFlag();
    [CompilerGeneratedAttribute]
public ArmCpsMode get_CpsMode();
    [CompilerGeneratedAttribute]
public bool get_IsUserMode();
    [CompilerGeneratedAttribute]
public ArmMemoryBarrierOperation get_MemoryBarrierOperation();
    [CompilerGeneratedAttribute]
public ArmOperand[] get_Operands();
    [CompilerGeneratedAttribute]
public bool get_UpdateFlags();
    [CompilerGeneratedAttribute]
public ArmVectorDataType get_VectorDataType();
    [CompilerGeneratedAttribute]
public int get_VectorSize();
    [CompilerGeneratedAttribute]
public bool get_WriteBack();
    internal static ArmInstructionDetail Create(CapstoneDisassembler disassembler, NativeInstructionHandle hInstruction);
}
internal class Gee.External.Capstone.Arm.ArmInstructionDetailBuilder : InstructionDetailBuilder`8<ArmInstructionDetail, ArmDisassembleMode, ArmInstructionGroup, ArmInstructionGroupId, ArmInstruction, ArmInstructionId, ArmRegister, ArmRegisterId> {
    [CompilerGeneratedAttribute]
private ArmConditionCode <ConditionCode>k__BackingField;
    [CompilerGeneratedAttribute]
private ArmCpsFlag <CpsFlag>k__BackingField;
    [CompilerGeneratedAttribute]
private ArmCpsMode <CpsMode>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsUserMode>k__BackingField;
    [CompilerGeneratedAttribute]
private ArmMemoryBarrierOperation <MemoryBarrierOperation>k__BackingField;
    [CompilerGeneratedAttribute]
private ArmOperand[] <Operands>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UpdateFlags>k__BackingField;
    [CompilerGeneratedAttribute]
private ArmVectorDataType <VectorDataType>k__BackingField;
    [CompilerGeneratedAttribute]
private int <VectorSize>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <WriteBack>k__BackingField;
    internal ArmConditionCode ConditionCode { get; private set; }
    internal ArmCpsFlag CpsFlag { get; private set; }
    internal ArmCpsMode CpsMode { get; private set; }
    internal bool IsUserMode { get; private set; }
    internal ArmMemoryBarrierOperation MemoryBarrierOperation { get; private set; }
    internal ArmOperand[] Operands { get; private set; }
    internal bool UpdateFlags { get; private set; }
    internal ArmVectorDataType VectorDataType { get; private set; }
    internal int VectorSize { get; private set; }
    internal bool WriteBack { get; private set; }
    [CompilerGeneratedAttribute]
internal ArmConditionCode get_ConditionCode();
    [CompilerGeneratedAttribute]
private void set_ConditionCode(ArmConditionCode value);
    [CompilerGeneratedAttribute]
internal ArmCpsFlag get_CpsFlag();
    [CompilerGeneratedAttribute]
private void set_CpsFlag(ArmCpsFlag value);
    [CompilerGeneratedAttribute]
internal ArmCpsMode get_CpsMode();
    [CompilerGeneratedAttribute]
private void set_CpsMode(ArmCpsMode value);
    [CompilerGeneratedAttribute]
internal bool get_IsUserMode();
    [CompilerGeneratedAttribute]
private void set_IsUserMode(bool value);
    [CompilerGeneratedAttribute]
internal ArmMemoryBarrierOperation get_MemoryBarrierOperation();
    [CompilerGeneratedAttribute]
private void set_MemoryBarrierOperation(ArmMemoryBarrierOperation value);
    [CompilerGeneratedAttribute]
internal ArmOperand[] get_Operands();
    [CompilerGeneratedAttribute]
private void set_Operands(ArmOperand[] value);
    [CompilerGeneratedAttribute]
internal bool get_UpdateFlags();
    [CompilerGeneratedAttribute]
private void set_UpdateFlags(bool value);
    [CompilerGeneratedAttribute]
internal ArmVectorDataType get_VectorDataType();
    [CompilerGeneratedAttribute]
private void set_VectorDataType(ArmVectorDataType value);
    [CompilerGeneratedAttribute]
internal int get_VectorSize();
    [CompilerGeneratedAttribute]
private void set_VectorSize(int value);
    [CompilerGeneratedAttribute]
internal bool get_WriteBack();
    [CompilerGeneratedAttribute]
private void set_WriteBack(bool value);
    internal virtual void Build(CapstoneDisassembler disassembler, NativeInstructionHandle hInstruction);
    internal ArmInstructionDetail Create();
    private protected virtual ArmDisassembleMode CreateDisassembleMode(NativeDisassembleMode nativeDisassembleMode);
    private protected virtual ArmInstructionGroup CreateInstructionGroup(CapstoneDisassembler disassembler, byte instructionGroupId);
    private protected virtual ArmRegister CreateRegister(CapstoneDisassembler disassembler, short registerId);
}
public class Gee.External.Capstone.Arm.ArmInstructionGroup : InstructionGroup`1<ArmInstructionGroupId> {
    internal ArmInstructionGroup(ArmInstructionGroupId id, string name);
    internal static ArmInstructionGroup Create(CapstoneDisassembler disassembler, ArmInstructionGroupId id);
}
public enum Gee.External.Capstone.Arm.ArmInstructionGroupId : Enum {
    public int value__;
    public static ArmInstructionGroupId Invalid;
    public static ArmInstructionGroupId ARM_GRP_JUMP;
    public static ArmInstructionGroupId ARM_GRP_CALL;
    public static ArmInstructionGroupId ARM_GRP_INT;
    public static ArmInstructionGroupId ARM_GRP_PRIVILEGE;
    public static ArmInstructionGroupId ARM_GRP_BRANCH_RELATIVE;
    public static ArmInstructionGroupId ARM_GRP_CRYPTO;
    public static ArmInstructionGroupId ARM_GRP_DATABARRIER;
    public static ArmInstructionGroupId ARM_GRP_DIVIDE;
    public static ArmInstructionGroupId ARM_GRP_FPARMV8;
    public static ArmInstructionGroupId ARM_GRP_MULTPRO;
    public static ArmInstructionGroupId ARM_GRP_NEON;
    public static ArmInstructionGroupId ARM_GRP_T2EXTRACTPACK;
    public static ArmInstructionGroupId ARM_GRP_THUMB2DSP;
    public static ArmInstructionGroupId ARM_GRP_TRUSTZONE;
    public static ArmInstructionGroupId ARM_GRP_V4T;
    public static ArmInstructionGroupId ARM_GRP_V5T;
    public static ArmInstructionGroupId ARM_GRP_V5TE;
    public static ArmInstructionGroupId ARM_GRP_V6;
    public static ArmInstructionGroupId ARM_GRP_V6T2;
    public static ArmInstructionGroupId ARM_GRP_V7;
    public static ArmInstructionGroupId ARM_GRP_V8;
    public static ArmInstructionGroupId ARM_GRP_VFP2;
    public static ArmInstructionGroupId ARM_GRP_VFP3;
    public static ArmInstructionGroupId ARM_GRP_VFP4;
    public static ArmInstructionGroupId ARM_GRP_ARM;
    public static ArmInstructionGroupId ARM_GRP_MCLASS;
    public static ArmInstructionGroupId ARM_GRP_NOTMCLASS;
    public static ArmInstructionGroupId ARM_GRP_THUMB;
    public static ArmInstructionGroupId ARM_GRP_THUMB1ONLY;
    public static ArmInstructionGroupId ARM_GRP_THUMB2;
    public static ArmInstructionGroupId ARM_GRP_PREV8;
    public static ArmInstructionGroupId ARM_GRP_FPVMLX;
    public static ArmInstructionGroupId ARM_GRP_MULOPS;
    public static ArmInstructionGroupId ARM_GRP_CRC;
    public static ArmInstructionGroupId ARM_GRP_DPVFP;
    public static ArmInstructionGroupId ARM_GRP_V6M;
    public static ArmInstructionGroupId ARM_GRP_VIRTUALIZATION;
}
public enum Gee.External.Capstone.Arm.ArmInstructionId : Enum {
    public int value__;
    public static ArmInstructionId Invalid;
    public static ArmInstructionId ARM_INS_ADC;
    public static ArmInstructionId ARM_INS_ADD;
    public static ArmInstructionId ARM_INS_ADR;
    public static ArmInstructionId ARM_INS_AESD;
    public static ArmInstructionId ARM_INS_AESE;
    public static ArmInstructionId ARM_INS_AESIMC;
    public static ArmInstructionId ARM_INS_AESMC;
    public static ArmInstructionId ARM_INS_AND;
    public static ArmInstructionId ARM_INS_BFC;
    public static ArmInstructionId ARM_INS_BFI;
    public static ArmInstructionId ARM_INS_BIC;
    public static ArmInstructionId ARM_INS_BKPT;
    public static ArmInstructionId ARM_INS_BL;
    public static ArmInstructionId ARM_INS_BLX;
    public static ArmInstructionId ARM_INS_BX;
    public static ArmInstructionId ARM_INS_BXJ;
    public static ArmInstructionId ARM_INS_B;
    public static ArmInstructionId ARM_INS_CDP;
    public static ArmInstructionId ARM_INS_CDP2;
    public static ArmInstructionId ARM_INS_CLREX;
    public static ArmInstructionId ARM_INS_CLZ;
    public static ArmInstructionId ARM_INS_CMN;
    public static ArmInstructionId ARM_INS_CMP;
    public static ArmInstructionId ARM_INS_CPS;
    public static ArmInstructionId ARM_INS_CRC32B;
    public static ArmInstructionId ARM_INS_CRC32CB;
    public static ArmInstructionId ARM_INS_CRC32CH;
    public static ArmInstructionId ARM_INS_CRC32CW;
    public static ArmInstructionId ARM_INS_CRC32H;
    public static ArmInstructionId ARM_INS_CRC32W;
    public static ArmInstructionId ARM_INS_DBG;
    public static ArmInstructionId ARM_INS_DMB;
    public static ArmInstructionId ARM_INS_DSB;
    public static ArmInstructionId ARM_INS_EOR;
    public static ArmInstructionId ARM_INS_ERET;
    public static ArmInstructionId ARM_INS_VMOV;
    public static ArmInstructionId ARM_INS_FLDMDBX;
    public static ArmInstructionId ARM_INS_FLDMIAX;
    public static ArmInstructionId ARM_INS_VMRS;
    public static ArmInstructionId ARM_INS_FSTMDBX;
    public static ArmInstructionId ARM_INS_FSTMIAX;
    public static ArmInstructionId ARM_INS_HINT;
    public static ArmInstructionId ARM_INS_HLT;
    public static ArmInstructionId ARM_INS_HVC;
    public static ArmInstructionId ARM_INS_ISB;
    public static ArmInstructionId ARM_INS_LDA;
    public static ArmInstructionId ARM_INS_LDAB;
    public static ArmInstructionId ARM_INS_LDAEX;
    public static ArmInstructionId ARM_INS_LDAEXB;
    public static ArmInstructionId ARM_INS_LDAEXD;
    public static ArmInstructionId ARM_INS_LDAEXH;
    public static ArmInstructionId ARM_INS_LDAH;
    public static ArmInstructionId ARM_INS_LDC2L;
    public static ArmInstructionId ARM_INS_LDC2;
    public static ArmInstructionId ARM_INS_LDCL;
    public static ArmInstructionId ARM_INS_LDC;
    public static ArmInstructionId ARM_INS_LDMDA;
    public static ArmInstructionId ARM_INS_LDMDB;
    public static ArmInstructionId ARM_INS_LDM;
    public static ArmInstructionId ARM_INS_LDMIB;
    public static ArmInstructionId ARM_INS_LDRBT;
    public static ArmInstructionId ARM_INS_LDRB;
    public static ArmInstructionId ARM_INS_LDRD;
    public static ArmInstructionId ARM_INS_LDREX;
    public static ArmInstructionId ARM_INS_LDREXB;
    public static ArmInstructionId ARM_INS_LDREXD;
    public static ArmInstructionId ARM_INS_LDREXH;
    public static ArmInstructionId ARM_INS_LDRH;
    public static ArmInstructionId ARM_INS_LDRHT;
    public static ArmInstructionId ARM_INS_LDRSB;
    public static ArmInstructionId ARM_INS_LDRSBT;
    public static ArmInstructionId ARM_INS_LDRSH;
    public static ArmInstructionId ARM_INS_LDRSHT;
    public static ArmInstructionId ARM_INS_LDRT;
    public static ArmInstructionId ARM_INS_LDR;
    public static ArmInstructionId ARM_INS_MCR;
    public static ArmInstructionId ARM_INS_MCR2;
    public static ArmInstructionId ARM_INS_MCRR;
    public static ArmInstructionId ARM_INS_MCRR2;
    public static ArmInstructionId ARM_INS_MLA;
    public static ArmInstructionId ARM_INS_MLS;
    public static ArmInstructionId ARM_INS_MOV;
    public static ArmInstructionId ARM_INS_MOVT;
    public static ArmInstructionId ARM_INS_MOVW;
    public static ArmInstructionId ARM_INS_MRC;
    public static ArmInstructionId ARM_INS_MRC2;
    public static ArmInstructionId ARM_INS_MRRC;
    public static ArmInstructionId ARM_INS_MRRC2;
    public static ArmInstructionId ARM_INS_MRS;
    public static ArmInstructionId ARM_INS_MSR;
    public static ArmInstructionId ARM_INS_MUL;
    public static ArmInstructionId ARM_INS_MVN;
    public static ArmInstructionId ARM_INS_ORR;
    public static ArmInstructionId ARM_INS_PKHBT;
    public static ArmInstructionId ARM_INS_PKHTB;
    public static ArmInstructionId ARM_INS_PLDW;
    public static ArmInstructionId ARM_INS_PLD;
    public static ArmInstructionId ARM_INS_PLI;
    public static ArmInstructionId ARM_INS_QADD;
    public static ArmInstructionId ARM_INS_QADD16;
    public static ArmInstructionId ARM_INS_QADD8;
    public static ArmInstructionId ARM_INS_QASX;
    public static ArmInstructionId ARM_INS_QDADD;
    public static ArmInstructionId ARM_INS_QDSUB;
    public static ArmInstructionId ARM_INS_QSAX;
    public static ArmInstructionId ARM_INS_QSUB;
    public static ArmInstructionId ARM_INS_QSUB16;
    public static ArmInstructionId ARM_INS_QSUB8;
    public static ArmInstructionId ARM_INS_RBIT;
    public static ArmInstructionId ARM_INS_REV;
    public static ArmInstructionId ARM_INS_REV16;
    public static ArmInstructionId ARM_INS_REVSH;
    public static ArmInstructionId ARM_INS_RFEDA;
    public static ArmInstructionId ARM_INS_RFEDB;
    public static ArmInstructionId ARM_INS_RFEIA;
    public static ArmInstructionId ARM_INS_RFEIB;
    public static ArmInstructionId ARM_INS_RSB;
    public static ArmInstructionId ARM_INS_RSC;
    public static ArmInstructionId ARM_INS_SADD16;
    public static ArmInstructionId ARM_INS_SADD8;
    public static ArmInstructionId ARM_INS_SASX;
    public static ArmInstructionId ARM_INS_SBC;
    public static ArmInstructionId ARM_INS_SBFX;
    public static ArmInstructionId ARM_INS_SDIV;
    public static ArmInstructionId ARM_INS_SEL;
    public static ArmInstructionId ARM_INS_SETEND;
    public static ArmInstructionId ARM_INS_SHA1C;
    public static ArmInstructionId ARM_INS_SHA1H;
    public static ArmInstructionId ARM_INS_SHA1M;
    public static ArmInstructionId ARM_INS_SHA1P;
    public static ArmInstructionId ARM_INS_SHA1SU0;
    public static ArmInstructionId ARM_INS_SHA1SU1;
    public static ArmInstructionId ARM_INS_SHA256H;
    public static ArmInstructionId ARM_INS_SHA256H2;
    public static ArmInstructionId ARM_INS_SHA256SU0;
    public static ArmInstructionId ARM_INS_SHA256SU1;
    public static ArmInstructionId ARM_INS_SHADD16;
    public static ArmInstructionId ARM_INS_SHADD8;
    public static ArmInstructionId ARM_INS_SHASX;
    public static ArmInstructionId ARM_INS_SHSAX;
    public static ArmInstructionId ARM_INS_SHSUB16;
    public static ArmInstructionId ARM_INS_SHSUB8;
    public static ArmInstructionId ARM_INS_SMC;
    public static ArmInstructionId ARM_INS_SMLABB;
    public static ArmInstructionId ARM_INS_SMLABT;
    public static ArmInstructionId ARM_INS_SMLAD;
    public static ArmInstructionId ARM_INS_SMLADX;
    public static ArmInstructionId ARM_INS_SMLAL;
    public static ArmInstructionId ARM_INS_SMLALBB;
    public static ArmInstructionId ARM_INS_SMLALBT;
    public static ArmInstructionId ARM_INS_SMLALD;
    public static ArmInstructionId ARM_INS_SMLALDX;
    public static ArmInstructionId ARM_INS_SMLALTB;
    public static ArmInstructionId ARM_INS_SMLALTT;
    public static ArmInstructionId ARM_INS_SMLATB;
    public static ArmInstructionId ARM_INS_SMLATT;
    public static ArmInstructionId ARM_INS_SMLAWB;
    public static ArmInstructionId ARM_INS_SMLAWT;
    public static ArmInstructionId ARM_INS_SMLSD;
    public static ArmInstructionId ARM_INS_SMLSDX;
    public static ArmInstructionId ARM_INS_SMLSLD;
    public static ArmInstructionId ARM_INS_SMLSLDX;
    public static ArmInstructionId ARM_INS_SMMLA;
    public static ArmInstructionId ARM_INS_SMMLAR;
    public static ArmInstructionId ARM_INS_SMMLS;
    public static ArmInstructionId ARM_INS_SMMLSR;
    public static ArmInstructionId ARM_INS_SMMUL;
    public static ArmInstructionId ARM_INS_SMMULR;
    public static ArmInstructionId ARM_INS_SMUAD;
    public static ArmInstructionId ARM_INS_SMUADX;
    public static ArmInstructionId ARM_INS_SMULBB;
    public static ArmInstructionId ARM_INS_SMULBT;
    public static ArmInstructionId ARM_INS_SMULL;
    public static ArmInstructionId ARM_INS_SMULTB;
    public static ArmInstructionId ARM_INS_SMULTT;
    public static ArmInstructionId ARM_INS_SMULWB;
    public static ArmInstructionId ARM_INS_SMULWT;
    public static ArmInstructionId ARM_INS_SMUSD;
    public static ArmInstructionId ARM_INS_SMUSDX;
    public static ArmInstructionId ARM_INS_SRSDA;
    public static ArmInstructionId ARM_INS_SRSDB;
    public static ArmInstructionId ARM_INS_SRSIA;
    public static ArmInstructionId ARM_INS_SRSIB;
    public static ArmInstructionId ARM_INS_SSAT;
    public static ArmInstructionId ARM_INS_SSAT16;
    public static ArmInstructionId ARM_INS_SSAX;
    public static ArmInstructionId ARM_INS_SSUB16;
    public static ArmInstructionId ARM_INS_SSUB8;
    public static ArmInstructionId ARM_INS_STC2L;
    public static ArmInstructionId ARM_INS_STC2;
    public static ArmInstructionId ARM_INS_STCL;
    public static ArmInstructionId ARM_INS_STC;
    public static ArmInstructionId ARM_INS_STL;
    public static ArmInstructionId ARM_INS_STLB;
    public static ArmInstructionId ARM_INS_STLEX;
    public static ArmInstructionId ARM_INS_STLEXB;
    public static ArmInstructionId ARM_INS_STLEXD;
    public static ArmInstructionId ARM_INS_STLEXH;
    public static ArmInstructionId ARM_INS_STLH;
    public static ArmInstructionId ARM_INS_STMDA;
    public static ArmInstructionId ARM_INS_STMDB;
    public static ArmInstructionId ARM_INS_STM;
    public static ArmInstructionId ARM_INS_STMIB;
    public static ArmInstructionId ARM_INS_STRBT;
    public static ArmInstructionId ARM_INS_STRB;
    public static ArmInstructionId ARM_INS_STRD;
    public static ArmInstructionId ARM_INS_STREX;
    public static ArmInstructionId ARM_INS_STREXB;
    public static ArmInstructionId ARM_INS_STREXD;
    public static ArmInstructionId ARM_INS_STREXH;
    public static ArmInstructionId ARM_INS_STRH;
    public static ArmInstructionId ARM_INS_STRHT;
    public static ArmInstructionId ARM_INS_STRT;
    public static ArmInstructionId ARM_INS_STR;
    public static ArmInstructionId ARM_INS_SUB;
    public static ArmInstructionId ARM_INS_SVC;
    public static ArmInstructionId ARM_INS_SWP;
    public static ArmInstructionId ARM_INS_SWPB;
    public static ArmInstructionId ARM_INS_SXTAB;
    public static ArmInstructionId ARM_INS_SXTAB16;
    public static ArmInstructionId ARM_INS_SXTAH;
    public static ArmInstructionId ARM_INS_SXTB;
    public static ArmInstructionId ARM_INS_SXTB16;
    public static ArmInstructionId ARM_INS_SXTH;
    public static ArmInstructionId ARM_INS_TEQ;
    public static ArmInstructionId ARM_INS_TRAP;
    public static ArmInstructionId ARM_INS_TST;
    public static ArmInstructionId ARM_INS_UADD16;
    public static ArmInstructionId ARM_INS_UADD8;
    public static ArmInstructionId ARM_INS_UASX;
    public static ArmInstructionId ARM_INS_UBFX;
    public static ArmInstructionId ARM_INS_UDF;
    public static ArmInstructionId ARM_INS_UDIV;
    public static ArmInstructionId ARM_INS_UHADD16;
    public static ArmInstructionId ARM_INS_UHADD8;
    public static ArmInstructionId ARM_INS_UHASX;
    public static ArmInstructionId ARM_INS_UHSAX;
    public static ArmInstructionId ARM_INS_UHSUB16;
    public static ArmInstructionId ARM_INS_UHSUB8;
    public static ArmInstructionId ARM_INS_UMAAL;
    public static ArmInstructionId ARM_INS_UMLAL;
    public static ArmInstructionId ARM_INS_UMULL;
    public static ArmInstructionId ARM_INS_UQADD16;
    public static ArmInstructionId ARM_INS_UQADD8;
    public static ArmInstructionId ARM_INS_UQASX;
    public static ArmInstructionId ARM_INS_UQSAX;
    public static ArmInstructionId ARM_INS_UQSUB16;
    public static ArmInstructionId ARM_INS_UQSUB8;
    public static ArmInstructionId ARM_INS_USAD8;
    public static ArmInstructionId ARM_INS_USADA8;
    public static ArmInstructionId ARM_INS_USAT;
    public static ArmInstructionId ARM_INS_USAT16;
    public static ArmInstructionId ARM_INS_USAX;
    public static ArmInstructionId ARM_INS_USUB16;
    public static ArmInstructionId ARM_INS_USUB8;
    public static ArmInstructionId ARM_INS_UXTAB;
    public static ArmInstructionId ARM_INS_UXTAB16;
    public static ArmInstructionId ARM_INS_UXTAH;
    public static ArmInstructionId ARM_INS_UXTB;
    public static ArmInstructionId ARM_INS_UXTB16;
    public static ArmInstructionId ARM_INS_UXTH;
    public static ArmInstructionId ARM_INS_VABAL;
    public static ArmInstructionId ARM_INS_VABA;
    public static ArmInstructionId ARM_INS_VABDL;
    public static ArmInstructionId ARM_INS_VABD;
    public static ArmInstructionId ARM_INS_VABS;
    public static ArmInstructionId ARM_INS_VACGE;
    public static ArmInstructionId ARM_INS_VACGT;
    public static ArmInstructionId ARM_INS_VADD;
    public static ArmInstructionId ARM_INS_VADDHN;
    public static ArmInstructionId ARM_INS_VADDL;
    public static ArmInstructionId ARM_INS_VADDW;
    public static ArmInstructionId ARM_INS_VAND;
    public static ArmInstructionId ARM_INS_VBIC;
    public static ArmInstructionId ARM_INS_VBIF;
    public static ArmInstructionId ARM_INS_VBIT;
    public static ArmInstructionId ARM_INS_VBSL;
    public static ArmInstructionId ARM_INS_VCEQ;
    public static ArmInstructionId ARM_INS_VCGE;
    public static ArmInstructionId ARM_INS_VCGT;
    public static ArmInstructionId ARM_INS_VCLE;
    public static ArmInstructionId ARM_INS_VCLS;
    public static ArmInstructionId ARM_INS_VCLT;
    public static ArmInstructionId ARM_INS_VCLZ;
    public static ArmInstructionId ARM_INS_VCMP;
    public static ArmInstructionId ARM_INS_VCMPE;
    public static ArmInstructionId ARM_INS_VCNT;
    public static ArmInstructionId ARM_INS_VCVTA;
    public static ArmInstructionId ARM_INS_VCVTB;
    public static ArmInstructionId ARM_INS_VCVT;
    public static ArmInstructionId ARM_INS_VCVTM;
    public static ArmInstructionId ARM_INS_VCVTN;
    public static ArmInstructionId ARM_INS_VCVTP;
    public static ArmInstructionId ARM_INS_VCVTT;
    public static ArmInstructionId ARM_INS_VDIV;
    public static ArmInstructionId ARM_INS_VDUP;
    public static ArmInstructionId ARM_INS_VEOR;
    public static ArmInstructionId ARM_INS_VEXT;
    public static ArmInstructionId ARM_INS_VFMA;
    public static ArmInstructionId ARM_INS_VFMS;
    public static ArmInstructionId ARM_INS_VFNMA;
    public static ArmInstructionId ARM_INS_VFNMS;
    public static ArmInstructionId ARM_INS_VHADD;
    public static ArmInstructionId ARM_INS_VHSUB;
    public static ArmInstructionId ARM_INS_VLD1;
    public static ArmInstructionId ARM_INS_VLD2;
    public static ArmInstructionId ARM_INS_VLD3;
    public static ArmInstructionId ARM_INS_VLD4;
    public static ArmInstructionId ARM_INS_VLDMDB;
    public static ArmInstructionId ARM_INS_VLDMIA;
    public static ArmInstructionId ARM_INS_VLDR;
    public static ArmInstructionId ARM_INS_VMAXNM;
    public static ArmInstructionId ARM_INS_VMAX;
    public static ArmInstructionId ARM_INS_VMINNM;
    public static ArmInstructionId ARM_INS_VMIN;
    public static ArmInstructionId ARM_INS_VMLA;
    public static ArmInstructionId ARM_INS_VMLAL;
    public static ArmInstructionId ARM_INS_VMLS;
    public static ArmInstructionId ARM_INS_VMLSL;
    public static ArmInstructionId ARM_INS_VMOVL;
    public static ArmInstructionId ARM_INS_VMOVN;
    public static ArmInstructionId ARM_INS_VMSR;
    public static ArmInstructionId ARM_INS_VMUL;
    public static ArmInstructionId ARM_INS_VMULL;
    public static ArmInstructionId ARM_INS_VMVN;
    public static ArmInstructionId ARM_INS_VNEG;
    public static ArmInstructionId ARM_INS_VNMLA;
    public static ArmInstructionId ARM_INS_VNMLS;
    public static ArmInstructionId ARM_INS_VNMUL;
    public static ArmInstructionId ARM_INS_VORN;
    public static ArmInstructionId ARM_INS_VORR;
    public static ArmInstructionId ARM_INS_VPADAL;
    public static ArmInstructionId ARM_INS_VPADDL;
    public static ArmInstructionId ARM_INS_VPADD;
    public static ArmInstructionId ARM_INS_VPMAX;
    public static ArmInstructionId ARM_INS_VPMIN;
    public static ArmInstructionId ARM_INS_VQABS;
    public static ArmInstructionId ARM_INS_VQADD;
    public static ArmInstructionId ARM_INS_VQDMLAL;
    public static ArmInstructionId ARM_INS_VQDMLSL;
    public static ArmInstructionId ARM_INS_VQDMULH;
    public static ArmInstructionId ARM_INS_VQDMULL;
    public static ArmInstructionId ARM_INS_VQMOVUN;
    public static ArmInstructionId ARM_INS_VQMOVN;
    public static ArmInstructionId ARM_INS_VQNEG;
    public static ArmInstructionId ARM_INS_VQRDMULH;
    public static ArmInstructionId ARM_INS_VQRSHL;
    public static ArmInstructionId ARM_INS_VQRSHRN;
    public static ArmInstructionId ARM_INS_VQRSHRUN;
    public static ArmInstructionId ARM_INS_VQSHL;
    public static ArmInstructionId ARM_INS_VQSHLU;
    public static ArmInstructionId ARM_INS_VQSHRN;
    public static ArmInstructionId ARM_INS_VQSHRUN;
    public static ArmInstructionId ARM_INS_VQSUB;
    public static ArmInstructionId ARM_INS_VRADDHN;
    public static ArmInstructionId ARM_INS_VRECPE;
    public static ArmInstructionId ARM_INS_VRECPS;
    public static ArmInstructionId ARM_INS_VREV16;
    public static ArmInstructionId ARM_INS_VREV32;
    public static ArmInstructionId ARM_INS_VREV64;
    public static ArmInstructionId ARM_INS_VRHADD;
    public static ArmInstructionId ARM_INS_VRINTA;
    public static ArmInstructionId ARM_INS_VRINTM;
    public static ArmInstructionId ARM_INS_VRINTN;
    public static ArmInstructionId ARM_INS_VRINTP;
    public static ArmInstructionId ARM_INS_VRINTR;
    public static ArmInstructionId ARM_INS_VRINTX;
    public static ArmInstructionId ARM_INS_VRINTZ;
    public static ArmInstructionId ARM_INS_VRSHL;
    public static ArmInstructionId ARM_INS_VRSHRN;
    public static ArmInstructionId ARM_INS_VRSHR;
    public static ArmInstructionId ARM_INS_VRSQRTE;
    public static ArmInstructionId ARM_INS_VRSQRTS;
    public static ArmInstructionId ARM_INS_VRSRA;
    public static ArmInstructionId ARM_INS_VRSUBHN;
    public static ArmInstructionId ARM_INS_VSELEQ;
    public static ArmInstructionId ARM_INS_VSELGE;
    public static ArmInstructionId ARM_INS_VSELGT;
    public static ArmInstructionId ARM_INS_VSELVS;
    public static ArmInstructionId ARM_INS_VSHLL;
    public static ArmInstructionId ARM_INS_VSHL;
    public static ArmInstructionId ARM_INS_VSHRN;
    public static ArmInstructionId ARM_INS_VSHR;
    public static ArmInstructionId ARM_INS_VSLI;
    public static ArmInstructionId ARM_INS_VSQRT;
    public static ArmInstructionId ARM_INS_VSRA;
    public static ArmInstructionId ARM_INS_VSRI;
    public static ArmInstructionId ARM_INS_VST1;
    public static ArmInstructionId ARM_INS_VST2;
    public static ArmInstructionId ARM_INS_VST3;
    public static ArmInstructionId ARM_INS_VST4;
    public static ArmInstructionId ARM_INS_VSTMDB;
    public static ArmInstructionId ARM_INS_VSTMIA;
    public static ArmInstructionId ARM_INS_VSTR;
    public static ArmInstructionId ARM_INS_VSUB;
    public static ArmInstructionId ARM_INS_VSUBHN;
    public static ArmInstructionId ARM_INS_VSUBL;
    public static ArmInstructionId ARM_INS_VSUBW;
    public static ArmInstructionId ARM_INS_VSWP;
    public static ArmInstructionId ARM_INS_VTBL;
    public static ArmInstructionId ARM_INS_VTBX;
    public static ArmInstructionId ARM_INS_VCVTR;
    public static ArmInstructionId ARM_INS_VTRN;
    public static ArmInstructionId ARM_INS_VTST;
    public static ArmInstructionId ARM_INS_VUZP;
    public static ArmInstructionId ARM_INS_VZIP;
    public static ArmInstructionId ARM_INS_ADDW;
    public static ArmInstructionId ARM_INS_ASR;
    public static ArmInstructionId ARM_INS_DCPS1;
    public static ArmInstructionId ARM_INS_DCPS2;
    public static ArmInstructionId ARM_INS_DCPS3;
    public static ArmInstructionId ARM_INS_IT;
    public static ArmInstructionId ARM_INS_LSL;
    public static ArmInstructionId ARM_INS_LSR;
    public static ArmInstructionId ARM_INS_ORN;
    public static ArmInstructionId ARM_INS_ROR;
    public static ArmInstructionId ARM_INS_RRX;
    public static ArmInstructionId ARM_INS_SUBW;
    public static ArmInstructionId ARM_INS_TBB;
    public static ArmInstructionId ARM_INS_TBH;
    public static ArmInstructionId ARM_INS_CBNZ;
    public static ArmInstructionId ARM_INS_CBZ;
    public static ArmInstructionId ARM_INS_POP;
    public static ArmInstructionId ARM_INS_PUSH;
    public static ArmInstructionId ARM_INS_NOP;
    public static ArmInstructionId ARM_INS_YIELD;
    public static ArmInstructionId ARM_INS_WFE;
    public static ArmInstructionId ARM_INS_WFI;
    public static ArmInstructionId ARM_INS_SEV;
    public static ArmInstructionId ARM_INS_SEVL;
    public static ArmInstructionId ARM_INS_VPUSH;
    public static ArmInstructionId ARM_INS_VPOP;
}
public enum Gee.External.Capstone.Arm.ArmMemoryBarrierOperation : Enum {
    public int value__;
    public static ArmMemoryBarrierOperation Invalid;
    public static ArmMemoryBarrierOperation ARM_MB_RESERVED_0;
    public static ArmMemoryBarrierOperation ARM_MB_OSHLD;
    public static ArmMemoryBarrierOperation ARM_MB_OSHST;
    public static ArmMemoryBarrierOperation ARM_MB_OSH;
    public static ArmMemoryBarrierOperation ARM_MB_RESERVED_4;
    public static ArmMemoryBarrierOperation ARM_MB_NSHLD;
    public static ArmMemoryBarrierOperation ARM_MB_NSHST;
    public static ArmMemoryBarrierOperation ARM_MB_NSH;
    public static ArmMemoryBarrierOperation ARM_MB_RESERVED_8;
    public static ArmMemoryBarrierOperation ARM_MB_ISHLD;
    public static ArmMemoryBarrierOperation ARM_MB_ISHST;
    public static ArmMemoryBarrierOperation ARM_MB_ISH;
    public static ArmMemoryBarrierOperation ARM_MB_RESERVED_12;
    public static ArmMemoryBarrierOperation ARM_MB_LD;
    public static ArmMemoryBarrierOperation ARM_MB_ST;
    public static ArmMemoryBarrierOperation ARM_MB_SY;
}
public class Gee.External.Capstone.Arm.ArmMemoryOperandValue : object {
    [CompilerGeneratedAttribute]
private ArmRegister <Base>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Displacement>k__BackingField;
    [CompilerGeneratedAttribute]
private ArmRegister <Index>k__BackingField;
    [CompilerGeneratedAttribute]
private int <LeftShit>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Scale>k__BackingField;
    public ArmRegister Base { get; }
    public int Displacement { get; }
    public ArmRegister Index { get; }
    public int LeftShit { get; }
    public int Scale { get; }
    internal ArmMemoryOperandValue(CapstoneDisassembler disassembler, NativeArmMemoryOperandValue& nativeMemoryOperandValue);
    [CompilerGeneratedAttribute]
public ArmRegister get_Base();
    [CompilerGeneratedAttribute]
public int get_Displacement();
    [CompilerGeneratedAttribute]
public ArmRegister get_Index();
    [CompilerGeneratedAttribute]
public int get_LeftShit();
    [CompilerGeneratedAttribute]
public int get_Scale();
}
public class Gee.External.Capstone.Arm.ArmOperand : object {
    private OperandAccessType _accessType;
    private double _floatingPoint;
    private int _immediate;
    private ArmMemoryOperandValue _memory;
    private ArmRegister _register;
    private ArmSetEndOperation _setEndOperation;
    private ArmRegister _shiftRegister;
    private int _shiftValue;
    private ArmSystemRegister _systemRegister;
    [CompilerGeneratedAttribute]
private bool <IsSubtracted>k__BackingField;
    [CompilerGeneratedAttribute]
private sbyte <NeonLane>k__BackingField;
    [CompilerGeneratedAttribute]
private ArmShiftOperation <ShiftOperation>k__BackingField;
    [CompilerGeneratedAttribute]
private ArmOperandType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private int <VectorIndex>k__BackingField;
    public OperandAccessType AccessType { get; }
    public double FloatingPoint { get; }
    public int Immediate { get; }
    public bool IsDietModeEnabled { get; }
    public bool IsSubtracted { get; }
    public ArmMemoryOperandValue Memory { get; }
    public sbyte NeonLane { get; }
    public ArmRegister Register { get; }
    public ArmSetEndOperation SetEndOperation { get; }
    public ArmShiftOperation ShiftOperation { get; }
    public ArmRegister ShiftRegister { get; }
    public int ShiftValue { get; }
    public ArmSystemRegister SystemRegister { get; }
    public ArmOperandType Type { get; }
    public int VectorIndex { get; }
    internal ArmOperand(CapstoneDisassembler disassembler, NativeArmOperand& nativeOperand);
    public OperandAccessType get_AccessType();
    public double get_FloatingPoint();
    public int get_Immediate();
    public bool get_IsDietModeEnabled();
    [CompilerGeneratedAttribute]
public bool get_IsSubtracted();
    public ArmMemoryOperandValue get_Memory();
    [CompilerGeneratedAttribute]
public sbyte get_NeonLane();
    public ArmRegister get_Register();
    public ArmSetEndOperation get_SetEndOperation();
    [CompilerGeneratedAttribute]
public ArmShiftOperation get_ShiftOperation();
    public ArmRegister get_ShiftRegister();
    public int get_ShiftValue();
    public ArmSystemRegister get_SystemRegister();
    [CompilerGeneratedAttribute]
public ArmOperandType get_Type();
    [CompilerGeneratedAttribute]
public int get_VectorIndex();
    internal static ArmOperand[] Create(CapstoneDisassembler disassembler, NativeArmInstructionDetail& nativeInstructionDetail);
    [CompilerGeneratedAttribute]
internal static int <.ctor>g__CreateShiftValue|45_0(ArmOperand this, NativeArmOperand& cNativeOperand);
    [CompilerGeneratedAttribute]
internal static ArmRegister <.ctor>g__CreateShiftRegister|45_1(ArmOperand this, CapstoneDisassembler cDisassembler, NativeArmOperand& cNativeArmOperand);
}
public enum Gee.External.Capstone.Arm.ArmOperandType : Enum {
    public int value__;
    public static ArmOperandType Invalid;
    public static ArmOperandType Register;
    public static ArmOperandType Immediate;
    public static ArmOperandType Memory;
    public static ArmOperandType FloatingPoint;
    public static ArmOperandType CImmediate;
    public static ArmOperandType PImmediate;
    public static ArmOperandType SetEndOperation;
    public static ArmOperandType SystemRegister;
}
public class Gee.External.Capstone.Arm.ArmRegister : Register`1<ArmRegisterId> {
    internal ArmRegister(ArmRegisterId id, string name);
    internal static ArmRegister TryCreate(CapstoneDisassembler disassembler, ArmRegisterId id);
}
public enum Gee.External.Capstone.Arm.ArmRegisterId : Enum {
    public int value__;
    public static ArmRegisterId Invalid;
    public static ArmRegisterId ARM_REG_APSR;
    public static ArmRegisterId ARM_REG_APSR_NZCV;
    public static ArmRegisterId ARM_REG_CPSR;
    public static ArmRegisterId ARM_REG_FPEXC;
    public static ArmRegisterId ARM_REG_FPINST;
    public static ArmRegisterId ARM_REG_FPSCR;
    public static ArmRegisterId ARM_REG_FPSCR_NZCV;
    public static ArmRegisterId ARM_REG_FPSID;
    public static ArmRegisterId ARM_REG_ITSTATE;
    public static ArmRegisterId ARM_REG_LR;
    public static ArmRegisterId ARM_REG_PC;
    public static ArmRegisterId ARM_REG_SP;
    public static ArmRegisterId ARM_REG_SPSR;
    public static ArmRegisterId ARM_REG_D0;
    public static ArmRegisterId ARM_REG_D1;
    public static ArmRegisterId ARM_REG_D2;
    public static ArmRegisterId ARM_REG_D3;
    public static ArmRegisterId ARM_REG_D4;
    public static ArmRegisterId ARM_REG_D5;
    public static ArmRegisterId ARM_REG_D6;
    public static ArmRegisterId ARM_REG_D7;
    public static ArmRegisterId ARM_REG_D8;
    public static ArmRegisterId ARM_REG_D9;
    public static ArmRegisterId ARM_REG_D10;
    public static ArmRegisterId ARM_REG_D11;
    public static ArmRegisterId ARM_REG_D12;
    public static ArmRegisterId ARM_REG_D13;
    public static ArmRegisterId ARM_REG_D14;
    public static ArmRegisterId ARM_REG_D15;
    public static ArmRegisterId ARM_REG_D16;
    public static ArmRegisterId ARM_REG_D17;
    public static ArmRegisterId ARM_REG_D18;
    public static ArmRegisterId ARM_REG_D19;
    public static ArmRegisterId ARM_REG_D20;
    public static ArmRegisterId ARM_REG_D21;
    public static ArmRegisterId ARM_REG_D22;
    public static ArmRegisterId ARM_REG_D23;
    public static ArmRegisterId ARM_REG_D24;
    public static ArmRegisterId ARM_REG_D25;
    public static ArmRegisterId ARM_REG_D26;
    public static ArmRegisterId ARM_REG_D27;
    public static ArmRegisterId ARM_REG_D28;
    public static ArmRegisterId ARM_REG_D29;
    public static ArmRegisterId ARM_REG_D30;
    public static ArmRegisterId ARM_REG_D31;
    public static ArmRegisterId ARM_REG_FPINST2;
    public static ArmRegisterId ARM_REG_MVFR0;
    public static ArmRegisterId ARM_REG_MVFR1;
    public static ArmRegisterId ARM_REG_MVFR2;
    public static ArmRegisterId ARM_REG_Q0;
    public static ArmRegisterId ARM_REG_Q1;
    public static ArmRegisterId ARM_REG_Q2;
    public static ArmRegisterId ARM_REG_Q3;
    public static ArmRegisterId ARM_REG_Q4;
    public static ArmRegisterId ARM_REG_Q5;
    public static ArmRegisterId ARM_REG_Q6;
    public static ArmRegisterId ARM_REG_Q7;
    public static ArmRegisterId ARM_REG_Q8;
    public static ArmRegisterId ARM_REG_Q9;
    public static ArmRegisterId ARM_REG_Q10;
    public static ArmRegisterId ARM_REG_Q11;
    public static ArmRegisterId ARM_REG_Q12;
    public static ArmRegisterId ARM_REG_Q13;
    public static ArmRegisterId ARM_REG_Q14;
    public static ArmRegisterId ARM_REG_Q15;
    public static ArmRegisterId ARM_REG_R0;
    public static ArmRegisterId ARM_REG_R1;
    public static ArmRegisterId ARM_REG_R2;
    public static ArmRegisterId ARM_REG_R3;
    public static ArmRegisterId ARM_REG_R4;
    public static ArmRegisterId ARM_REG_R5;
    public static ArmRegisterId ARM_REG_R6;
    public static ArmRegisterId ARM_REG_R7;
    public static ArmRegisterId ARM_REG_R8;
    public static ArmRegisterId ARM_REG_R9;
    public static ArmRegisterId ARM_REG_R10;
    public static ArmRegisterId ARM_REG_R11;
    public static ArmRegisterId ARM_REG_R12;
    public static ArmRegisterId ARM_REG_S0;
    public static ArmRegisterId ARM_REG_S1;
    public static ArmRegisterId ARM_REG_S2;
    public static ArmRegisterId ARM_REG_S3;
    public static ArmRegisterId ARM_REG_S4;
    public static ArmRegisterId ARM_REG_S5;
    public static ArmRegisterId ARM_REG_S6;
    public static ArmRegisterId ARM_REG_S7;
    public static ArmRegisterId ARM_REG_S8;
    public static ArmRegisterId ARM_REG_S9;
    public static ArmRegisterId ARM_REG_S10;
    public static ArmRegisterId ARM_REG_S11;
    public static ArmRegisterId ARM_REG_S12;
    public static ArmRegisterId ARM_REG_S13;
    public static ArmRegisterId ARM_REG_S14;
    public static ArmRegisterId ARM_REG_S15;
    public static ArmRegisterId ARM_REG_S16;
    public static ArmRegisterId ARM_REG_S17;
    public static ArmRegisterId ARM_REG_S18;
    public static ArmRegisterId ARM_REG_S19;
    public static ArmRegisterId ARM_REG_S20;
    public static ArmRegisterId ARM_REG_S21;
    public static ArmRegisterId ARM_REG_S22;
    public static ArmRegisterId ARM_REG_S23;
    public static ArmRegisterId ARM_REG_S24;
    public static ArmRegisterId ARM_REG_S25;
    public static ArmRegisterId ARM_REG_S26;
    public static ArmRegisterId ARM_REG_S27;
    public static ArmRegisterId ARM_REG_S28;
    public static ArmRegisterId ARM_REG_S29;
    public static ArmRegisterId ARM_REG_S30;
    public static ArmRegisterId ARM_REG_S31;
    public static ArmRegisterId ARM_REG_R13;
    public static ArmRegisterId ARM_REG_R14;
    public static ArmRegisterId ARM_REG_R15;
    public static ArmRegisterId ARM_REG_SB;
    public static ArmRegisterId ARM_REG_SL;
    public static ArmRegisterId ARM_REG_FP;
    public static ArmRegisterId ARM_REG_IP;
}
public enum Gee.External.Capstone.Arm.ArmSetEndOperation : Enum {
    public int value__;
    public static ArmSetEndOperation Invalid;
    public static ArmSetEndOperation ARM_SETEND_BE;
    public static ArmSetEndOperation ARM_SETEND_LE;
}
public enum Gee.External.Capstone.Arm.ArmShiftOperation : Enum {
    public int value__;
    public static ArmShiftOperation Invalid;
    public static ArmShiftOperation ARM_SFT_ASR;
    public static ArmShiftOperation ARM_SFT_LSL;
    public static ArmShiftOperation ARM_SFT_LSR;
    public static ArmShiftOperation ARM_SFT_ROR;
    public static ArmShiftOperation ARM_SFT_RRX;
    public static ArmShiftOperation ARM_SFT_ASR_REG;
    public static ArmShiftOperation ARM_SFT_LSL_REG;
    public static ArmShiftOperation ARM_SFT_LSR_REG;
    public static ArmShiftOperation ARM_SFT_ROR_REG;
    public static ArmShiftOperation ARM_SFT_RRX_REG;
}
public enum Gee.External.Capstone.Arm.ArmSystemRegister : Enum {
    public int value__;
    public static ArmSystemRegister Invalid;
    public static ArmSystemRegister ARM_SYSREG_SPSR_C;
    public static ArmSystemRegister ARM_SYSREG_SPSR_X;
    public static ArmSystemRegister ARM_SYSREG_SPSR_S;
    public static ArmSystemRegister ARM_SYSREG_SPSR_F;
    public static ArmSystemRegister ARM_SYSREG_CPSR_C;
    public static ArmSystemRegister ARM_SYSREG_CPSR_X;
    public static ArmSystemRegister ARM_SYSREG_CPSR_S;
    public static ArmSystemRegister ARM_SYSREG_CPSR_F;
    public static ArmSystemRegister ARM_SYSREG_APSR;
    public static ArmSystemRegister ARM_SYSREG_APSR_G;
    public static ArmSystemRegister ARM_SYSREG_APSR_NZCVQ;
    public static ArmSystemRegister ARM_SYSREG_APSR_NZCVQG;
    public static ArmSystemRegister ARM_SYSREG_IAPSR;
    public static ArmSystemRegister ARM_SYSREG_IAPSR_G;
    public static ArmSystemRegister ARM_SYSREG_IAPSR_NZCVQG;
    public static ArmSystemRegister ARM_SYSREG_IAPSR_NZCVQ;
    public static ArmSystemRegister ARM_SYSREG_EAPSR;
    public static ArmSystemRegister ARM_SYSREG_EAPSR_G;
    public static ArmSystemRegister ARM_SYSREG_EAPSR_NZCVQG;
    public static ArmSystemRegister ARM_SYSREG_EAPSR_NZCVQ;
    public static ArmSystemRegister ARM_SYSREG_XPSR;
    public static ArmSystemRegister ARM_SYSREG_XPSR_G;
    public static ArmSystemRegister ARM_SYSREG_XPSR_NZCVQG;
    public static ArmSystemRegister ARM_SYSREG_XPSR_NZCVQ;
    public static ArmSystemRegister ARM_SYSREG_IPSR;
    public static ArmSystemRegister ARM_SYSREG_EPSR;
    public static ArmSystemRegister ARM_SYSREG_IEPSR;
    public static ArmSystemRegister ARM_SYSREG_MSP;
    public static ArmSystemRegister ARM_SYSREG_PSP;
    public static ArmSystemRegister ARM_SYSREG_PRIMASK;
    public static ArmSystemRegister ARM_SYSREG_BASEPRI;
    public static ArmSystemRegister ARM_SYSREG_BASEPRI_MAX;
    public static ArmSystemRegister ARM_SYSREG_FAULTMASK;
    public static ArmSystemRegister ARM_SYSREG_CONTROL;
    public static ArmSystemRegister ARM_SYSREG_R8_USR;
    public static ArmSystemRegister ARM_SYSREG_R9_USR;
    public static ArmSystemRegister ARM_SYSREG_R10_USR;
    public static ArmSystemRegister ARM_SYSREG_R11_USR;
    public static ArmSystemRegister ARM_SYSREG_R12_USR;
    public static ArmSystemRegister ARM_SYSREG_SP_USR;
    public static ArmSystemRegister ARM_SYSREG_LR_USR;
    public static ArmSystemRegister ARM_SYSREG_R8_FIQ;
    public static ArmSystemRegister ARM_SYSREG_R9_FIQ;
    public static ArmSystemRegister ARM_SYSREG_R10_FIQ;
    public static ArmSystemRegister ARM_SYSREG_R11_FIQ;
    public static ArmSystemRegister ARM_SYSREG_R12_FIQ;
    public static ArmSystemRegister ARM_SYSREG_SP_FIQ;
    public static ArmSystemRegister ARM_SYSREG_LR_FIQ;
    public static ArmSystemRegister ARM_SYSREG_LR_IRQ;
    public static ArmSystemRegister ARM_SYSREG_SP_IRQ;
    public static ArmSystemRegister ARM_SYSREG_LR_SVC;
    public static ArmSystemRegister ARM_SYSREG_SP_SVC;
    public static ArmSystemRegister ARM_SYSREG_LR_ABT;
    public static ArmSystemRegister ARM_SYSREG_SP_ABT;
    public static ArmSystemRegister ARM_SYSREG_LR_UND;
    public static ArmSystemRegister ARM_SYSREG_SP_UND;
    public static ArmSystemRegister ARM_SYSREG_LR_MON;
    public static ArmSystemRegister ARM_SYSREG_SP_MON;
    public static ArmSystemRegister ARM_SYSREG_ELR_HYP;
    public static ArmSystemRegister ARM_SYSREG_SP_HYP;
    public static ArmSystemRegister ARM_SYSREG_SPSR_FIQ;
    public static ArmSystemRegister ARM_SYSREG_SPSR_IRQ;
    public static ArmSystemRegister ARM_SYSREG_SPSR_SVC;
    public static ArmSystemRegister ARM_SYSREG_SPSR_ABT;
    public static ArmSystemRegister ARM_SYSREG_SPSR_UND;
    public static ArmSystemRegister ARM_SYSREG_SPSR_MON;
    public static ArmSystemRegister ARM_SYSREG_SPSR_HYP;
}
public enum Gee.External.Capstone.Arm.ArmVectorDataType : Enum {
    public int value__;
    public static ArmVectorDataType Invalid;
    public static ArmVectorDataType ARM_VECTORDATA_I8;
    public static ArmVectorDataType ARM_VECTORDATA_I16;
    public static ArmVectorDataType ARM_VECTORDATA_I32;
    public static ArmVectorDataType ARM_VECTORDATA_I64;
    public static ArmVectorDataType ARM_VECTORDATA_S8;
    public static ArmVectorDataType ARM_VECTORDATA_S16;
    public static ArmVectorDataType ARM_VECTORDATA_S32;
    public static ArmVectorDataType ARM_VECTORDATA_S64;
    public static ArmVectorDataType ARM_VECTORDATA_U8;
    public static ArmVectorDataType ARM_VECTORDATA_U16;
    public static ArmVectorDataType ARM_VECTORDATA_U32;
    public static ArmVectorDataType ARM_VECTORDATA_U64;
    public static ArmVectorDataType ARM_VECTORDATA_P8;
    public static ArmVectorDataType ARM_VECTORDATA_F32;
    public static ArmVectorDataType ARM_VECTORDATA_F64;
    public static ArmVectorDataType ARM_VECTORDATA_F16F64;
    public static ArmVectorDataType ARM_VECTORDATA_F64F16;
    public static ArmVectorDataType ARM_VECTORDATA_F32F16;
    public static ArmVectorDataType ARM_VECTORDATA_F16F32;
    public static ArmVectorDataType ARM_VECTORDATA_F64F32;
    public static ArmVectorDataType ARM_VECTORDATA_F32F64;
    public static ArmVectorDataType ARM_VECTORDATA_S32F32;
    public static ArmVectorDataType ARM_VECTORDATA_U32F32;
    public static ArmVectorDataType ARM_VECTORDATA_F32S32;
    public static ArmVectorDataType ARM_VECTORDATA_F32U32;
    public static ArmVectorDataType ARM_VECTORDATA_F64S16;
    public static ArmVectorDataType ARM_VECTORDATA_F32S16;
    public static ArmVectorDataType ARM_VECTORDATA_F64S32;
    public static ArmVectorDataType ARM_VECTORDATA_S16F64;
    public static ArmVectorDataType ARM_VECTORDATA_S16F32;
    public static ArmVectorDataType ARM_VECTORDATA_S32F64;
    public static ArmVectorDataType ARM_VECTORDATA_U16F64;
    public static ArmVectorDataType ARM_VECTORDATA_U16F32;
    public static ArmVectorDataType ARM_VECTORDATA_U32F64;
    public static ArmVectorDataType ARM_VECTORDATA_F64U16;
    public static ArmVectorDataType ARM_VECTORDATA_F32U16;
    public static ArmVectorDataType ARM_VECTORDATA_F64U32;
}
public class Gee.External.Capstone.Arm.CapstoneArmDisassembler : CapstoneDisassembler`8<ArmDisassembleMode, ArmInstruction, ArmInstructionDetail, ArmInstructionGroup, ArmInstructionGroupId, ArmInstructionId, ArmRegister, ArmRegisterId> {
    public CapstoneArmDisassembler(ArmDisassembleMode disassembleMode);
    private protected virtual ArmInstruction CreateInstruction(NativeInstructionHandle hInstruction);
}
internal class Gee.External.Capstone.Arm.NativeArmInstructionDetail : ValueType {
    public bool IsUserMode;
    public int VectorSize;
    public ArmVectorDataType VectorDataType;
    public ArmCpsMode CpsMode;
    public ArmCpsFlag CpsFlag;
    public ArmConditionCode ConditionCode;
    public bool UpdateFlags;
    public bool WriteBack;
    public ArmMemoryBarrierOperation MemoryBarrierOperation;
    public byte OperandCount;
    public NativeArmOperand[] Operands;
}
internal class Gee.External.Capstone.Arm.NativeArmMemoryOperandValue : ValueType {
    public ArmRegisterId Base;
    public ArmRegisterId Index;
    public int Scale;
    public int Displacement;
    public int LeftShift;
}
internal class Gee.External.Capstone.Arm.NativeArmOperand : ValueType {
    public int VectorIndex;
    public NativeArmOperandShift Shift;
    public ArmOperandType Type;
    public NativeArmOperandValue Value;
    public bool IsSubtracted;
    public OperandAccessType AccessType;
    public sbyte NeonLane;
}
internal class Gee.External.Capstone.Arm.NativeArmOperandShift : ValueType {
    public ArmShiftOperation Operation;
    public int Value;
}
internal class Gee.External.Capstone.Arm.NativeArmOperandValue : ValueType {
    public int Register;
    public int Immediate;
    public double FloatingPoint;
    public NativeArmMemoryOperandValue Memory;
    public ArmSetEndOperation SetEndOperation;
}
public enum Gee.External.Capstone.Arm64.Arm64AtOperation : Enum {
    public int value__;
    public static Arm64AtOperation Invalid;
    public static Arm64AtOperation ARM64_AT_S1E1R;
    public static Arm64AtOperation ARM64_AT_S1E1W;
    public static Arm64AtOperation ARM64_AT_S1E0R;
    public static Arm64AtOperation ARM64_AT_S1E0W;
    public static Arm64AtOperation ARM64_AT_S1E2R;
    public static Arm64AtOperation ARM64_AT_S1E2W;
    public static Arm64AtOperation ARM64_AT_S12E1R;
    public static Arm64AtOperation ARM64_AT_S12E1W;
    public static Arm64AtOperation ARM64_AT_S12E0R;
    public static Arm64AtOperation ARM64_AT_S12E0W;
    public static Arm64AtOperation ARM64_AT_S1E3R;
    public static Arm64AtOperation ARM64_AT_S1E3W;
}
public enum Gee.External.Capstone.Arm64.Arm64BarrierOperation : Enum {
    public int value__;
    public static Arm64BarrierOperation Invalid;
    public static Arm64BarrierOperation ARM64_BARRIER_OSHLD;
    public static Arm64BarrierOperation ARM64_BARRIER_OSHST;
    public static Arm64BarrierOperation ARM64_BARRIER_OSH;
    public static Arm64BarrierOperation ARM64_BARRIER_NSHLD;
    public static Arm64BarrierOperation ARM64_BARRIER_NSHST;
    public static Arm64BarrierOperation ARM64_BARRIER_NSH;
    public static Arm64BarrierOperation ARM64_BARRIER_ISHLD;
    public static Arm64BarrierOperation ARM64_BARRIER_ISHST;
    public static Arm64BarrierOperation ARM64_BARRIER_ISH;
    public static Arm64BarrierOperation ARM64_BARRIER_LD;
    public static Arm64BarrierOperation ARM64_BARRIER_ST;
    public static Arm64BarrierOperation ARM64_BARRIER_SY;
}
public enum Gee.External.Capstone.Arm64.Arm64ConditionCode : Enum {
    public int value__;
    public static Arm64ConditionCode Invalid;
    public static Arm64ConditionCode ARM64_CC_EQ;
    public static Arm64ConditionCode ARM64_CC_NE;
    public static Arm64ConditionCode ARM64_CC_HS;
    public static Arm64ConditionCode ARM64_CC_LO;
    public static Arm64ConditionCode ARM64_CC_MI;
    public static Arm64ConditionCode ARM64_CC_PL;
    public static Arm64ConditionCode ARM64_CC_VS;
    public static Arm64ConditionCode ARM64_CC_VC;
    public static Arm64ConditionCode ARM64_CC_HI;
    public static Arm64ConditionCode ARM64_CC_LS;
    public static Arm64ConditionCode ARM64_CC_GE;
    public static Arm64ConditionCode ARM64_CC_LT;
    public static Arm64ConditionCode ARM64_CC_GT;
    public static Arm64ConditionCode ARM64_CC_LE;
    public static Arm64ConditionCode ARM64_CC_AL;
    public static Arm64ConditionCode ARM64_CC_NV;
}
public enum Gee.External.Capstone.Arm64.Arm64DcOperation : Enum {
    public int value__;
    public static Arm64DcOperation Invalid;
    public static Arm64DcOperation ARM64_DC_ZVA;
    public static Arm64DcOperation ARM64_DC_IVAC;
    public static Arm64DcOperation ARM64_DC_ISW;
    public static Arm64DcOperation ARM64_DC_CVAC;
    public static Arm64DcOperation ARM64_DC_CSW;
    public static Arm64DcOperation ARM64_DC_CVAU;
    public static Arm64DcOperation ARM64_DC_CIVAC;
    public static Arm64DcOperation ARM64_DC_CISW;
}
[FlagsAttribute]
public enum Gee.External.Capstone.Arm64.Arm64DisassembleMode : Enum {
    public int value__;
    public static Arm64DisassembleMode Arm;
    public static Arm64DisassembleMode BigEndian;
    public static Arm64DisassembleMode LittleEndian;
}
public enum Gee.External.Capstone.Arm64.Arm64ExtendOperation : Enum {
    public int value__;
    public static Arm64ExtendOperation Invalid;
    public static Arm64ExtendOperation ARM64_EXT_UXTB;
    public static Arm64ExtendOperation ARM64_EXT_UXTH;
    public static Arm64ExtendOperation ARM64_EXT_UXTW;
    public static Arm64ExtendOperation ARM64_EXT_UXTX;
    public static Arm64ExtendOperation ARM64_EXT_SXTB;
    public static Arm64ExtendOperation ARM64_EXT_SXTH;
    public static Arm64ExtendOperation ARM64_EXT_SXTW;
    public static Arm64ExtendOperation ARM64_EXT_SXTX;
}
public enum Gee.External.Capstone.Arm64.Arm64IcOperation : Enum {
    public int value__;
    public static Arm64IcOperation Invalid;
    public static Arm64IcOperation ARM64_IC_IALLUIS;
    public static Arm64IcOperation ARM64_IC_IALLU;
    public static Arm64IcOperation ARM64_IC_IVAU;
}
public class Gee.External.Capstone.Arm64.Arm64Instruction : Instruction`8<Arm64Instruction, Arm64InstructionDetail, Arm64DisassembleMode, Arm64InstructionGroup, Arm64InstructionGroupId, Arm64InstructionId, Arm64Register, Arm64RegisterId> {
    internal Arm64Instruction(Arm64InstructionBuilder builder);
    internal static Arm64Instruction Create(CapstoneDisassembler disassembler, NativeInstructionHandle hInstruction);
}
internal class Gee.External.Capstone.Arm64.Arm64InstructionBuilder : InstructionBuilder`8<Arm64InstructionDetail, Arm64DisassembleMode, Arm64InstructionGroup, Arm64InstructionGroupId, Arm64Instruction, Arm64InstructionId, Arm64Register, Arm64RegisterId> {
    internal Arm64Instruction Create();
    private protected virtual Arm64InstructionDetail CreateDetails(CapstoneDisassembler disassembler, NativeInstructionHandle hInstruction);
    private protected virtual Arm64DisassembleMode CreateDisassembleMode(NativeDisassembleMode nativeDisassembleMode);
    private protected virtual Arm64InstructionId CreateId(int id);
}
public class Gee.External.Capstone.Arm64.Arm64InstructionDetail : InstructionDetail`8<Arm64InstructionDetail, Arm64DisassembleMode, Arm64InstructionGroup, Arm64InstructionGroupId, Arm64Instruction, Arm64InstructionId, Arm64Register, Arm64RegisterId> {
    [CompilerGeneratedAttribute]
private Arm64ConditionCode <ConditionCode>k__BackingField;
    [CompilerGeneratedAttribute]
private Arm64Operand[] <Operands>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UpdateFlags>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <WriteBack>k__BackingField;
    public Arm64ConditionCode ConditionCode { get; }
    public Arm64Operand[] Operands { get; }
    public bool UpdateFlags { get; }
    public bool WriteBack { get; }
    internal Arm64InstructionDetail(Arm64InstructionDetailBuilder builder);
    [CompilerGeneratedAttribute]
public Arm64ConditionCode get_ConditionCode();
    [CompilerGeneratedAttribute]
public Arm64Operand[] get_Operands();
    [CompilerGeneratedAttribute]
public bool get_UpdateFlags();
    [CompilerGeneratedAttribute]
public bool get_WriteBack();
    internal static Arm64InstructionDetail Create(CapstoneDisassembler disassembler, NativeInstructionHandle hInstruction);
}
internal class Gee.External.Capstone.Arm64.Arm64InstructionDetailBuilder : InstructionDetailBuilder`8<Arm64InstructionDetail, Arm64DisassembleMode, Arm64InstructionGroup, Arm64InstructionGroupId, Arm64Instruction, Arm64InstructionId, Arm64Register, Arm64RegisterId> {
    [CompilerGeneratedAttribute]
private Arm64ConditionCode <ConditionCode>k__BackingField;
    [CompilerGeneratedAttribute]
private Arm64Operand[] <Operands>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UpdateFlags>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <WriteBack>k__BackingField;
    internal Arm64ConditionCode ConditionCode { get; private set; }
    internal Arm64Operand[] Operands { get; private set; }
    internal bool UpdateFlags { get; private set; }
    internal bool WriteBack { get; private set; }
    [CompilerGeneratedAttribute]
internal Arm64ConditionCode get_ConditionCode();
    [CompilerGeneratedAttribute]
private void set_ConditionCode(Arm64ConditionCode value);
    [CompilerGeneratedAttribute]
internal Arm64Operand[] get_Operands();
    [CompilerGeneratedAttribute]
private void set_Operands(Arm64Operand[] value);
    [CompilerGeneratedAttribute]
internal bool get_UpdateFlags();
    [CompilerGeneratedAttribute]
private void set_UpdateFlags(bool value);
    [CompilerGeneratedAttribute]
internal bool get_WriteBack();
    [CompilerGeneratedAttribute]
private void set_WriteBack(bool value);
    internal virtual void Build(CapstoneDisassembler disassembler, NativeInstructionHandle hInstruction);
    internal Arm64InstructionDetail Create();
    private protected virtual Arm64DisassembleMode CreateDisassembleMode(NativeDisassembleMode nativeDisassembleMode);
    private protected virtual Arm64InstructionGroup CreateInstructionGroup(CapstoneDisassembler disassembler, byte instructionGroupId);
    private protected virtual Arm64Register CreateRegister(CapstoneDisassembler disassembler, short registerId);
}
public class Gee.External.Capstone.Arm64.Arm64InstructionGroup : InstructionGroup`1<Arm64InstructionGroupId> {
    public Arm64InstructionGroup(Arm64InstructionGroupId id, string name);
    internal static Arm64InstructionGroup Create(CapstoneDisassembler disassembler, Arm64InstructionGroupId id);
}
public enum Gee.External.Capstone.Arm64.Arm64InstructionGroupId : Enum {
    public int value__;
    public static Arm64InstructionGroupId Invalid;
    public static Arm64InstructionGroupId ARM64_GRP_JUMP;
    public static Arm64InstructionGroupId ARM64_GRP_CALL;
    public static Arm64InstructionGroupId ARM64_GRP_RET;
    public static Arm64InstructionGroupId ARM64_GRP_INT;
    public static Arm64InstructionGroupId ARM64_GRP_PRIVILEGE;
    public static Arm64InstructionGroupId ARM64_GRP_BRANCH_RELATIVE;
    public static Arm64InstructionGroupId ARM64_GRP_CRYPTO;
    public static Arm64InstructionGroupId ARM64_GRP_FPARMV8;
    public static Arm64InstructionGroupId ARM64_GRP_NEON;
    public static Arm64InstructionGroupId ARM64_GRP_CRC;
}
public enum Gee.External.Capstone.Arm64.Arm64InstructionId : Enum {
    public int value__;
    public static Arm64InstructionId Invalid;
    public static Arm64InstructionId ARM64_INS_ABS;
    public static Arm64InstructionId ARM64_INS_ADC;
    public static Arm64InstructionId ARM64_INS_ADDHN;
    public static Arm64InstructionId ARM64_INS_ADDHN2;
    public static Arm64InstructionId ARM64_INS_ADDP;
    public static Arm64InstructionId ARM64_INS_ADD;
    public static Arm64InstructionId ARM64_INS_ADDV;
    public static Arm64InstructionId ARM64_INS_ADR;
    public static Arm64InstructionId ARM64_INS_ADRP;
    public static Arm64InstructionId ARM64_INS_AESD;
    public static Arm64InstructionId ARM64_INS_AESE;
    public static Arm64InstructionId ARM64_INS_AESIMC;
    public static Arm64InstructionId ARM64_INS_AESMC;
    public static Arm64InstructionId ARM64_INS_AND;
    public static Arm64InstructionId ARM64_INS_ASR;
    public static Arm64InstructionId ARM64_INS_B;
    public static Arm64InstructionId ARM64_INS_BFM;
    public static Arm64InstructionId ARM64_INS_BIC;
    public static Arm64InstructionId ARM64_INS_BIF;
    public static Arm64InstructionId ARM64_INS_BIT;
    public static Arm64InstructionId ARM64_INS_BL;
    public static Arm64InstructionId ARM64_INS_BLR;
    public static Arm64InstructionId ARM64_INS_BR;
    public static Arm64InstructionId ARM64_INS_BRK;
    public static Arm64InstructionId ARM64_INS_BSL;
    public static Arm64InstructionId ARM64_INS_CBNZ;
    public static Arm64InstructionId ARM64_INS_CBZ;
    public static Arm64InstructionId ARM64_INS_CCMN;
    public static Arm64InstructionId ARM64_INS_CCMP;
    public static Arm64InstructionId ARM64_INS_CLREX;
    public static Arm64InstructionId ARM64_INS_CLS;
    public static Arm64InstructionId ARM64_INS_CLZ;
    public static Arm64InstructionId ARM64_INS_CMEQ;
    public static Arm64InstructionId ARM64_INS_CMGE;
    public static Arm64InstructionId ARM64_INS_CMGT;
    public static Arm64InstructionId ARM64_INS_CMHI;
    public static Arm64InstructionId ARM64_INS_CMHS;
    public static Arm64InstructionId ARM64_INS_CMLE;
    public static Arm64InstructionId ARM64_INS_CMLT;
    public static Arm64InstructionId ARM64_INS_CMTST;
    public static Arm64InstructionId ARM64_INS_CNT;
    public static Arm64InstructionId ARM64_INS_MOV;
    public static Arm64InstructionId ARM64_INS_CRC32B;
    public static Arm64InstructionId ARM64_INS_CRC32CB;
    public static Arm64InstructionId ARM64_INS_CRC32CH;
    public static Arm64InstructionId ARM64_INS_CRC32CW;
    public static Arm64InstructionId ARM64_INS_CRC32CX;
    public static Arm64InstructionId ARM64_INS_CRC32H;
    public static Arm64InstructionId ARM64_INS_CRC32W;
    public static Arm64InstructionId ARM64_INS_CRC32X;
    public static Arm64InstructionId ARM64_INS_CSEL;
    public static Arm64InstructionId ARM64_INS_CSINC;
    public static Arm64InstructionId ARM64_INS_CSINV;
    public static Arm64InstructionId ARM64_INS_CSNEG;
    public static Arm64InstructionId ARM64_INS_DCPS1;
    public static Arm64InstructionId ARM64_INS_DCPS2;
    public static Arm64InstructionId ARM64_INS_DCPS3;
    public static Arm64InstructionId ARM64_INS_DMB;
    public static Arm64InstructionId ARM64_INS_DRPS;
    public static Arm64InstructionId ARM64_INS_DSB;
    public static Arm64InstructionId ARM64_INS_DUP;
    public static Arm64InstructionId ARM64_INS_EON;
    public static Arm64InstructionId ARM64_INS_EOR;
    public static Arm64InstructionId ARM64_INS_ERET;
    public static Arm64InstructionId ARM64_INS_EXTR;
    public static Arm64InstructionId ARM64_INS_EXT;
    public static Arm64InstructionId ARM64_INS_FABD;
    public static Arm64InstructionId ARM64_INS_FABS;
    public static Arm64InstructionId ARM64_INS_FACGE;
    public static Arm64InstructionId ARM64_INS_FACGT;
    public static Arm64InstructionId ARM64_INS_FADD;
    public static Arm64InstructionId ARM64_INS_FADDP;
    public static Arm64InstructionId ARM64_INS_FCCMP;
    public static Arm64InstructionId ARM64_INS_FCCMPE;
    public static Arm64InstructionId ARM64_INS_FCMEQ;
    public static Arm64InstructionId ARM64_INS_FCMGE;
    public static Arm64InstructionId ARM64_INS_FCMGT;
    public static Arm64InstructionId ARM64_INS_FCMLE;
    public static Arm64InstructionId ARM64_INS_FCMLT;
    public static Arm64InstructionId ARM64_INS_FCMP;
    public static Arm64InstructionId ARM64_INS_FCMPE;
    public static Arm64InstructionId ARM64_INS_FCSEL;
    public static Arm64InstructionId ARM64_INS_FCVTAS;
    public static Arm64InstructionId ARM64_INS_FCVTAU;
    public static Arm64InstructionId ARM64_INS_FCVT;
    public static Arm64InstructionId ARM64_INS_FCVTL;
    public static Arm64InstructionId ARM64_INS_FCVTL2;
    public static Arm64InstructionId ARM64_INS_FCVTMS;
    public static Arm64InstructionId ARM64_INS_FCVTMU;
    public static Arm64InstructionId ARM64_INS_FCVTNS;
    public static Arm64InstructionId ARM64_INS_FCVTNU;
    public static Arm64InstructionId ARM64_INS_FCVTN;
    public static Arm64InstructionId ARM64_INS_FCVTN2;
    public static Arm64InstructionId ARM64_INS_FCVTPS;
    public static Arm64InstructionId ARM64_INS_FCVTPU;
    public static Arm64InstructionId ARM64_INS_FCVTXN;
    public static Arm64InstructionId ARM64_INS_FCVTXN2;
    public static Arm64InstructionId ARM64_INS_FCVTZS;
    public static Arm64InstructionId ARM64_INS_FCVTZU;
    public static Arm64InstructionId ARM64_INS_FDIV;
    public static Arm64InstructionId ARM64_INS_FMADD;
    public static Arm64InstructionId ARM64_INS_FMAX;
    public static Arm64InstructionId ARM64_INS_FMAXNM;
    public static Arm64InstructionId ARM64_INS_FMAXNMP;
    public static Arm64InstructionId ARM64_INS_FMAXNMV;
    public static Arm64InstructionId ARM64_INS_FMAXP;
    public static Arm64InstructionId ARM64_INS_FMAXV;
    public static Arm64InstructionId ARM64_INS_FMIN;
    public static Arm64InstructionId ARM64_INS_FMINNM;
    public static Arm64InstructionId ARM64_INS_FMINNMP;
    public static Arm64InstructionId ARM64_INS_FMINNMV;
    public static Arm64InstructionId ARM64_INS_FMINP;
    public static Arm64InstructionId ARM64_INS_FMINV;
    public static Arm64InstructionId ARM64_INS_FMLA;
    public static Arm64InstructionId ARM64_INS_FMLS;
    public static Arm64InstructionId ARM64_INS_FMOV;
    public static Arm64InstructionId ARM64_INS_FMSUB;
    public static Arm64InstructionId ARM64_INS_FMUL;
    public static Arm64InstructionId ARM64_INS_FMULX;
    public static Arm64InstructionId ARM64_INS_FNEG;
    public static Arm64InstructionId ARM64_INS_FNMADD;
    public static Arm64InstructionId ARM64_INS_FNMSUB;
    public static Arm64InstructionId ARM64_INS_FNMUL;
    public static Arm64InstructionId ARM64_INS_FRECPE;
    public static Arm64InstructionId ARM64_INS_FRECPS;
    public static Arm64InstructionId ARM64_INS_FRECPX;
    public static Arm64InstructionId ARM64_INS_FRINTA;
    public static Arm64InstructionId ARM64_INS_FRINTI;
    public static Arm64InstructionId ARM64_INS_FRINTM;
    public static Arm64InstructionId ARM64_INS_FRINTN;
    public static Arm64InstructionId ARM64_INS_FRINTP;
    public static Arm64InstructionId ARM64_INS_FRINTX;
    public static Arm64InstructionId ARM64_INS_FRINTZ;
    public static Arm64InstructionId ARM64_INS_FRSQRTE;
    public static Arm64InstructionId ARM64_INS_FRSQRTS;
    public static Arm64InstructionId ARM64_INS_FSQRT;
    public static Arm64InstructionId ARM64_INS_FSUB;
    public static Arm64InstructionId ARM64_INS_HINT;
    public static Arm64InstructionId ARM64_INS_HLT;
    public static Arm64InstructionId ARM64_INS_HVC;
    public static Arm64InstructionId ARM64_INS_INS;
    public static Arm64InstructionId ARM64_INS_ISB;
    public static Arm64InstructionId ARM64_INS_LD1;
    public static Arm64InstructionId ARM64_INS_LD1R;
    public static Arm64InstructionId ARM64_INS_LD2R;
    public static Arm64InstructionId ARM64_INS_LD2;
    public static Arm64InstructionId ARM64_INS_LD3R;
    public static Arm64InstructionId ARM64_INS_LD3;
    public static Arm64InstructionId ARM64_INS_LD4;
    public static Arm64InstructionId ARM64_INS_LD4R;
    public static Arm64InstructionId ARM64_INS_LDARB;
    public static Arm64InstructionId ARM64_INS_LDARH;
    public static Arm64InstructionId ARM64_INS_LDAR;
    public static Arm64InstructionId ARM64_INS_LDAXP;
    public static Arm64InstructionId ARM64_INS_LDAXRB;
    public static Arm64InstructionId ARM64_INS_LDAXRH;
    public static Arm64InstructionId ARM64_INS_LDAXR;
    public static Arm64InstructionId ARM64_INS_LDNP;
    public static Arm64InstructionId ARM64_INS_LDP;
    public static Arm64InstructionId ARM64_INS_LDPSW;
    public static Arm64InstructionId ARM64_INS_LDRB;
    public static Arm64InstructionId ARM64_INS_LDR;
    public static Arm64InstructionId ARM64_INS_LDRH;
    public static Arm64InstructionId ARM64_INS_LDRSB;
    public static Arm64InstructionId ARM64_INS_LDRSH;
    public static Arm64InstructionId ARM64_INS_LDRSW;
    public static Arm64InstructionId ARM64_INS_LDTRB;
    public static Arm64InstructionId ARM64_INS_LDTRH;
    public static Arm64InstructionId ARM64_INS_LDTRSB;
    public static Arm64InstructionId ARM64_INS_LDTRSH;
    public static Arm64InstructionId ARM64_INS_LDTRSW;
    public static Arm64InstructionId ARM64_INS_LDTR;
    public static Arm64InstructionId ARM64_INS_LDURB;
    public static Arm64InstructionId ARM64_INS_LDUR;
    public static Arm64InstructionId ARM64_INS_LDURH;
    public static Arm64InstructionId ARM64_INS_LDURSB;
    public static Arm64InstructionId ARM64_INS_LDURSH;
    public static Arm64InstructionId ARM64_INS_LDURSW;
    public static Arm64InstructionId ARM64_INS_LDXP;
    public static Arm64InstructionId ARM64_INS_LDXRB;
    public static Arm64InstructionId ARM64_INS_LDXRH;
    public static Arm64InstructionId ARM64_INS_LDXR;
    public static Arm64InstructionId ARM64_INS_LSL;
    public static Arm64InstructionId ARM64_INS_LSR;
    public static Arm64InstructionId ARM64_INS_MADD;
    public static Arm64InstructionId ARM64_INS_MLA;
    public static Arm64InstructionId ARM64_INS_MLS;
    public static Arm64InstructionId ARM64_INS_MOVI;
    public static Arm64InstructionId ARM64_INS_MOVK;
    public static Arm64InstructionId ARM64_INS_MOVN;
    public static Arm64InstructionId ARM64_INS_MOVZ;
    public static Arm64InstructionId ARM64_INS_MRS;
    public static Arm64InstructionId ARM64_INS_MSR;
    public static Arm64InstructionId ARM64_INS_MSUB;
    public static Arm64InstructionId ARM64_INS_MUL;
    public static Arm64InstructionId ARM64_INS_MVNI;
    public static Arm64InstructionId ARM64_INS_NEG;
    public static Arm64InstructionId ARM64_INS_NOT;
    public static Arm64InstructionId ARM64_INS_ORN;
    public static Arm64InstructionId ARM64_INS_ORR;
    public static Arm64InstructionId ARM64_INS_PMULL2;
    public static Arm64InstructionId ARM64_INS_PMULL;
    public static Arm64InstructionId ARM64_INS_PMUL;
    public static Arm64InstructionId ARM64_INS_PRFM;
    public static Arm64InstructionId ARM64_INS_PRFUM;
    public static Arm64InstructionId ARM64_INS_RADDHN;
    public static Arm64InstructionId ARM64_INS_RADDHN2;
    public static Arm64InstructionId ARM64_INS_RBIT;
    public static Arm64InstructionId ARM64_INS_RET;
    public static Arm64InstructionId ARM64_INS_REV16;
    public static Arm64InstructionId ARM64_INS_REV32;
    public static Arm64InstructionId ARM64_INS_REV64;
    public static Arm64InstructionId ARM64_INS_REV;
    public static Arm64InstructionId ARM64_INS_ROR;
    public static Arm64InstructionId ARM64_INS_RSHRN2;
    public static Arm64InstructionId ARM64_INS_RSHRN;
    public static Arm64InstructionId ARM64_INS_RSUBHN;
    public static Arm64InstructionId ARM64_INS_RSUBHN2;
    public static Arm64InstructionId ARM64_INS_SABAL2;
    public static Arm64InstructionId ARM64_INS_SABAL;
    public static Arm64InstructionId ARM64_INS_SABA;
    public static Arm64InstructionId ARM64_INS_SABDL2;
    public static Arm64InstructionId ARM64_INS_SABDL;
    public static Arm64InstructionId ARM64_INS_SABD;
    public static Arm64InstructionId ARM64_INS_SADALP;
    public static Arm64InstructionId ARM64_INS_SADDLP;
    public static Arm64InstructionId ARM64_INS_SADDLV;
    public static Arm64InstructionId ARM64_INS_SADDL2;
    public static Arm64InstructionId ARM64_INS_SADDL;
    public static Arm64InstructionId ARM64_INS_SADDW2;
    public static Arm64InstructionId ARM64_INS_SADDW;
    public static Arm64InstructionId ARM64_INS_SBC;
    public static Arm64InstructionId ARM64_INS_SBFM;
    public static Arm64InstructionId ARM64_INS_SCVTF;
    public static Arm64InstructionId ARM64_INS_SDIV;
    public static Arm64InstructionId ARM64_INS_SHA1C;
    public static Arm64InstructionId ARM64_INS_SHA1H;
    public static Arm64InstructionId ARM64_INS_SHA1M;
    public static Arm64InstructionId ARM64_INS_SHA1P;
    public static Arm64InstructionId ARM64_INS_SHA1SU0;
    public static Arm64InstructionId ARM64_INS_SHA1SU1;
    public static Arm64InstructionId ARM64_INS_SHA256H2;
    public static Arm64InstructionId ARM64_INS_SHA256H;
    public static Arm64InstructionId ARM64_INS_SHA256SU0;
    public static Arm64InstructionId ARM64_INS_SHA256SU1;
    public static Arm64InstructionId ARM64_INS_SHADD;
    public static Arm64InstructionId ARM64_INS_SHLL2;
    public static Arm64InstructionId ARM64_INS_SHLL;
    public static Arm64InstructionId ARM64_INS_SHL;
    public static Arm64InstructionId ARM64_INS_SHRN2;
    public static Arm64InstructionId ARM64_INS_SHRN;
    public static Arm64InstructionId ARM64_INS_SHSUB;
    public static Arm64InstructionId ARM64_INS_SLI;
    public static Arm64InstructionId ARM64_INS_SMADDL;
    public static Arm64InstructionId ARM64_INS_SMAXP;
    public static Arm64InstructionId ARM64_INS_SMAXV;
    public static Arm64InstructionId ARM64_INS_SMAX;
    public static Arm64InstructionId ARM64_INS_SMC;
    public static Arm64InstructionId ARM64_INS_SMINP;
    public static Arm64InstructionId ARM64_INS_SMINV;
    public static Arm64InstructionId ARM64_INS_SMIN;
    public static Arm64InstructionId ARM64_INS_SMLAL2;
    public static Arm64InstructionId ARM64_INS_SMLAL;
    public static Arm64InstructionId ARM64_INS_SMLSL2;
    public static Arm64InstructionId ARM64_INS_SMLSL;
    public static Arm64InstructionId ARM64_INS_SMOV;
    public static Arm64InstructionId ARM64_INS_SMSUBL;
    public static Arm64InstructionId ARM64_INS_SMULH;
    public static Arm64InstructionId ARM64_INS_SMULL2;
    public static Arm64InstructionId ARM64_INS_SMULL;
    public static Arm64InstructionId ARM64_INS_SQABS;
    public static Arm64InstructionId ARM64_INS_SQADD;
    public static Arm64InstructionId ARM64_INS_SQDMLAL;
    public static Arm64InstructionId ARM64_INS_SQDMLAL2;
    public static Arm64InstructionId ARM64_INS_SQDMLSL;
    public static Arm64InstructionId ARM64_INS_SQDMLSL2;
    public static Arm64InstructionId ARM64_INS_SQDMULH;
    public static Arm64InstructionId ARM64_INS_SQDMULL;
    public static Arm64InstructionId ARM64_INS_SQDMULL2;
    public static Arm64InstructionId ARM64_INS_SQNEG;
    public static Arm64InstructionId ARM64_INS_SQRDMULH;
    public static Arm64InstructionId ARM64_INS_SQRSHL;
    public static Arm64InstructionId ARM64_INS_SQRSHRN;
    public static Arm64InstructionId ARM64_INS_SQRSHRN2;
    public static Arm64InstructionId ARM64_INS_SQRSHRUN;
    public static Arm64InstructionId ARM64_INS_SQRSHRUN2;
    public static Arm64InstructionId ARM64_INS_SQSHLU;
    public static Arm64InstructionId ARM64_INS_SQSHL;
    public static Arm64InstructionId ARM64_INS_SQSHRN;
    public static Arm64InstructionId ARM64_INS_SQSHRN2;
    public static Arm64InstructionId ARM64_INS_SQSHRUN;
    public static Arm64InstructionId ARM64_INS_SQSHRUN2;
    public static Arm64InstructionId ARM64_INS_SQSUB;
    public static Arm64InstructionId ARM64_INS_SQXTN2;
    public static Arm64InstructionId ARM64_INS_SQXTN;
    public static Arm64InstructionId ARM64_INS_SQXTUN2;
    public static Arm64InstructionId ARM64_INS_SQXTUN;
    public static Arm64InstructionId ARM64_INS_SRHADD;
    public static Arm64InstructionId ARM64_INS_SRI;
    public static Arm64InstructionId ARM64_INS_SRSHL;
    public static Arm64InstructionId ARM64_INS_SRSHR;
    public static Arm64InstructionId ARM64_INS_SRSRA;
    public static Arm64InstructionId ARM64_INS_SSHLL2;
    public static Arm64InstructionId ARM64_INS_SSHLL;
    public static Arm64InstructionId ARM64_INS_SSHL;
    public static Arm64InstructionId ARM64_INS_SSHR;
    public static Arm64InstructionId ARM64_INS_SSRA;
    public static Arm64InstructionId ARM64_INS_SSUBL2;
    public static Arm64InstructionId ARM64_INS_SSUBL;
    public static Arm64InstructionId ARM64_INS_SSUBW2;
    public static Arm64InstructionId ARM64_INS_SSUBW;
    public static Arm64InstructionId ARM64_INS_ST1;
    public static Arm64InstructionId ARM64_INS_ST2;
    public static Arm64InstructionId ARM64_INS_ST3;
    public static Arm64InstructionId ARM64_INS_ST4;
    public static Arm64InstructionId ARM64_INS_STLRB;
    public static Arm64InstructionId ARM64_INS_STLRH;
    public static Arm64InstructionId ARM64_INS_STLR;
    public static Arm64InstructionId ARM64_INS_STLXP;
    public static Arm64InstructionId ARM64_INS_STLXRB;
    public static Arm64InstructionId ARM64_INS_STLXRH;
    public static Arm64InstructionId ARM64_INS_STLXR;
    public static Arm64InstructionId ARM64_INS_STNP;
    public static Arm64InstructionId ARM64_INS_STP;
    public static Arm64InstructionId ARM64_INS_STRB;
    public static Arm64InstructionId ARM64_INS_STR;
    public static Arm64InstructionId ARM64_INS_STRH;
    public static Arm64InstructionId ARM64_INS_STTRB;
    public static Arm64InstructionId ARM64_INS_STTRH;
    public static Arm64InstructionId ARM64_INS_STTR;
    public static Arm64InstructionId ARM64_INS_STURB;
    public static Arm64InstructionId ARM64_INS_STUR;
    public static Arm64InstructionId ARM64_INS_STURH;
    public static Arm64InstructionId ARM64_INS_STXP;
    public static Arm64InstructionId ARM64_INS_STXRB;
    public static Arm64InstructionId ARM64_INS_STXRH;
    public static Arm64InstructionId ARM64_INS_STXR;
    public static Arm64InstructionId ARM64_INS_SUBHN;
    public static Arm64InstructionId ARM64_INS_SUBHN2;
    public static Arm64InstructionId ARM64_INS_SUB;
    public static Arm64InstructionId ARM64_INS_SUQADD;
    public static Arm64InstructionId ARM64_INS_SVC;
    public static Arm64InstructionId ARM64_INS_SYSL;
    public static Arm64InstructionId ARM64_INS_SYS;
    public static Arm64InstructionId ARM64_INS_TBL;
    public static Arm64InstructionId ARM64_INS_TBNZ;
    public static Arm64InstructionId ARM64_INS_TBX;
    public static Arm64InstructionId ARM64_INS_TBZ;
    public static Arm64InstructionId ARM64_INS_TRN1;
    public static Arm64InstructionId ARM64_INS_TRN2;
    public static Arm64InstructionId ARM64_INS_UABAL2;
    public static Arm64InstructionId ARM64_INS_UABAL;
    public static Arm64InstructionId ARM64_INS_UABA;
    public static Arm64InstructionId ARM64_INS_UABDL2;
    public static Arm64InstructionId ARM64_INS_UABDL;
    public static Arm64InstructionId ARM64_INS_UABD;
    public static Arm64InstructionId ARM64_INS_UADALP;
    public static Arm64InstructionId ARM64_INS_UADDLP;
    public static Arm64InstructionId ARM64_INS_UADDLV;
    public static Arm64InstructionId ARM64_INS_UADDL2;
    public static Arm64InstructionId ARM64_INS_UADDL;
    public static Arm64InstructionId ARM64_INS_UADDW2;
    public static Arm64InstructionId ARM64_INS_UADDW;
    public static Arm64InstructionId ARM64_INS_UBFM;
    public static Arm64InstructionId ARM64_INS_UCVTF;
    public static Arm64InstructionId ARM64_INS_UDIV;
    public static Arm64InstructionId ARM64_INS_UHADD;
    public static Arm64InstructionId ARM64_INS_UHSUB;
    public static Arm64InstructionId ARM64_INS_UMADDL;
    public static Arm64InstructionId ARM64_INS_UMAXP;
    public static Arm64InstructionId ARM64_INS_UMAXV;
    public static Arm64InstructionId ARM64_INS_UMAX;
    public static Arm64InstructionId ARM64_INS_UMINP;
    public static Arm64InstructionId ARM64_INS_UMINV;
    public static Arm64InstructionId ARM64_INS_UMIN;
    public static Arm64InstructionId ARM64_INS_UMLAL2;
    public static Arm64InstructionId ARM64_INS_UMLAL;
    public static Arm64InstructionId ARM64_INS_UMLSL2;
    public static Arm64InstructionId ARM64_INS_UMLSL;
    public static Arm64InstructionId ARM64_INS_UMOV;
    public static Arm64InstructionId ARM64_INS_UMSUBL;
    public static Arm64InstructionId ARM64_INS_UMULH;
    public static Arm64InstructionId ARM64_INS_UMULL2;
    public static Arm64InstructionId ARM64_INS_UMULL;
    public static Arm64InstructionId ARM64_INS_UQADD;
    public static Arm64InstructionId ARM64_INS_UQRSHL;
    public static Arm64InstructionId ARM64_INS_UQRSHRN;
    public static Arm64InstructionId ARM64_INS_UQRSHRN2;
    public static Arm64InstructionId ARM64_INS_UQSHL;
    public static Arm64InstructionId ARM64_INS_UQSHRN;
    public static Arm64InstructionId ARM64_INS_UQSHRN2;
    public static Arm64InstructionId ARM64_INS_UQSUB;
    public static Arm64InstructionId ARM64_INS_UQXTN2;
    public static Arm64InstructionId ARM64_INS_UQXTN;
    public static Arm64InstructionId ARM64_INS_URECPE;
    public static Arm64InstructionId ARM64_INS_URHADD;
    public static Arm64InstructionId ARM64_INS_URSHL;
    public static Arm64InstructionId ARM64_INS_URSHR;
    public static Arm64InstructionId ARM64_INS_URSQRTE;
    public static Arm64InstructionId ARM64_INS_URSRA;
    public static Arm64InstructionId ARM64_INS_USHLL2;
    public static Arm64InstructionId ARM64_INS_USHLL;
    public static Arm64InstructionId ARM64_INS_USHL;
    public static Arm64InstructionId ARM64_INS_USHR;
    public static Arm64InstructionId ARM64_INS_USQADD;
    public static Arm64InstructionId ARM64_INS_USRA;
    public static Arm64InstructionId ARM64_INS_USUBL2;
    public static Arm64InstructionId ARM64_INS_USUBL;
    public static Arm64InstructionId ARM64_INS_USUBW2;
    public static Arm64InstructionId ARM64_INS_USUBW;
    public static Arm64InstructionId ARM64_INS_UZP1;
    public static Arm64InstructionId ARM64_INS_UZP2;
    public static Arm64InstructionId ARM64_INS_XTN2;
    public static Arm64InstructionId ARM64_INS_XTN;
    public static Arm64InstructionId ARM64_INS_ZIP1;
    public static Arm64InstructionId ARM64_INS_ZIP2;
    public static Arm64InstructionId ARM64_INS_MNEG;
    public static Arm64InstructionId ARM64_INS_UMNEGL;
    public static Arm64InstructionId ARM64_INS_SMNEGL;
    public static Arm64InstructionId ARM64_INS_NOP;
    public static Arm64InstructionId ARM64_INS_YIELD;
    public static Arm64InstructionId ARM64_INS_WFE;
    public static Arm64InstructionId ARM64_INS_WFI;
    public static Arm64InstructionId ARM64_INS_SEV;
    public static Arm64InstructionId ARM64_INS_SEVL;
    public static Arm64InstructionId ARM64_INS_NGC;
    public static Arm64InstructionId ARM64_INS_SBFIZ;
    public static Arm64InstructionId ARM64_INS_UBFIZ;
    public static Arm64InstructionId ARM64_INS_SBFX;
    public static Arm64InstructionId ARM64_INS_UBFX;
    public static Arm64InstructionId ARM64_INS_BFI;
    public static Arm64InstructionId ARM64_INS_BFXIL;
    public static Arm64InstructionId ARM64_INS_CMN;
    public static Arm64InstructionId ARM64_INS_MVN;
    public static Arm64InstructionId ARM64_INS_TST;
    public static Arm64InstructionId ARM64_INS_CSET;
    public static Arm64InstructionId ARM64_INS_CINC;
    public static Arm64InstructionId ARM64_INS_CSETM;
    public static Arm64InstructionId ARM64_INS_CINV;
    public static Arm64InstructionId ARM64_INS_CNEG;
    public static Arm64InstructionId ARM64_INS_SXTB;
    public static Arm64InstructionId ARM64_INS_SXTH;
    public static Arm64InstructionId ARM64_INS_SXTW;
    public static Arm64InstructionId ARM64_INS_CMP;
    public static Arm64InstructionId ARM64_INS_UXTB;
    public static Arm64InstructionId ARM64_INS_UXTH;
    public static Arm64InstructionId ARM64_INS_UXTW;
    public static Arm64InstructionId ARM64_INS_IC;
    public static Arm64InstructionId ARM64_INS_DC;
    public static Arm64InstructionId ARM64_INS_AT;
    public static Arm64InstructionId ARM64_INS_TLBI;
    public static Arm64InstructionId ARM64_INS_NEGS;
    public static Arm64InstructionId ARM64_INS_NGCS;
}
public class Gee.External.Capstone.Arm64.Arm64MemoryOperandValue : object {
    [CompilerGeneratedAttribute]
private Arm64Register <Base>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Displacement>k__BackingField;
    [CompilerGeneratedAttribute]
private Arm64Register <Index>k__BackingField;
    public Arm64Register Base { get; }
    public int Displacement { get; }
    public Arm64Register Index { get; }
    internal Arm64MemoryOperandValue(CapstoneDisassembler disassembler, NativeArm64MemoryOperandValue& nativeMemoryOperandValue);
    [CompilerGeneratedAttribute]
public Arm64Register get_Base();
    [CompilerGeneratedAttribute]
public int get_Displacement();
    [CompilerGeneratedAttribute]
public Arm64Register get_Index();
}
public enum Gee.External.Capstone.Arm64.Arm64MrsSystemRegister : Enum {
    public int value__;
    public static Arm64MrsSystemRegister Invalid;
    public static Arm64MrsSystemRegister ARM64_SYSREG_MDCCSR_EL0;
    public static Arm64MrsSystemRegister ARM64_SYSREG_DBGDTRRX_EL0;
    public static Arm64MrsSystemRegister ARM64_SYSREG_MDRAR_EL1;
    public static Arm64MrsSystemRegister ARM64_SYSREG_OSLSR_EL1;
    public static Arm64MrsSystemRegister ARM64_SYSREG_DBGAUTHSTATUS_EL1;
    public static Arm64MrsSystemRegister ARM64_SYSREG_PMCEID0_EL0;
    public static Arm64MrsSystemRegister ARM64_SYSREG_PMCEID1_EL0;
    public static Arm64MrsSystemRegister ARM64_SYSREG_MIDR_EL1;
    public static Arm64MrsSystemRegister ARM64_SYSREG_CCSIDR_EL1;
    public static Arm64MrsSystemRegister ARM64_SYSREG_CLIDR_EL1;
    public static Arm64MrsSystemRegister ARM64_SYSREG_CTR_EL0;
    public static Arm64MrsSystemRegister ARM64_SYSREG_MPIDR_EL1;
    public static Arm64MrsSystemRegister ARM64_SYSREG_REVIDR_EL1;
    public static Arm64MrsSystemRegister ARM64_SYSREG_AIDR_EL1;
    public static Arm64MrsSystemRegister ARM64_SYSREG_DCZID_EL0;
    public static Arm64MrsSystemRegister ARM64_SYSREG_ID_PFR0_EL1;
    public static Arm64MrsSystemRegister ARM64_SYSREG_ID_PFR1_EL1;
    public static Arm64MrsSystemRegister ARM64_SYSREG_ID_DFR0_EL1;
    public static Arm64MrsSystemRegister ARM64_SYSREG_ID_AFR0_EL1;
    public static Arm64MrsSystemRegister ARM64_SYSREG_ID_MMFR0_EL1;
    public static Arm64MrsSystemRegister ARM64_SYSREG_ID_MMFR1_EL1;
    public static Arm64MrsSystemRegister ARM64_SYSREG_ID_MMFR2_EL1;
    public static Arm64MrsSystemRegister ARM64_SYSREG_ID_MMFR3_EL1;
    public static Arm64MrsSystemRegister ARM64_SYSREG_ID_ISAR0_EL1;
    public static Arm64MrsSystemRegister ARM64_SYSREG_ID_ISAR1_EL1;
    public static Arm64MrsSystemRegister ARM64_SYSREG_ID_ISAR2_EL1;
    public static Arm64MrsSystemRegister ARM64_SYSREG_ID_ISAR3_EL1;
    public static Arm64MrsSystemRegister ARM64_SYSREG_ID_ISAR4_EL1;
    public static Arm64MrsSystemRegister ARM64_SYSREG_ID_ISAR5_EL1;
    public static Arm64MrsSystemRegister ARM64_SYSREG_ID_A64PFR0_EL1;
    public static Arm64MrsSystemRegister ARM64_SYSREG_ID_A64PFR1_EL1;
    public static Arm64MrsSystemRegister ARM64_SYSREG_ID_A64DFR0_EL1;
    public static Arm64MrsSystemRegister ARM64_SYSREG_ID_A64DFR1_EL1;
    public static Arm64MrsSystemRegister ARM64_SYSREG_ID_A64AFR0_EL1;
    public static Arm64MrsSystemRegister ARM64_SYSREG_ID_A64AFR1_EL1;
    public static Arm64MrsSystemRegister ARM64_SYSREG_ID_A64ISAR0_EL1;
    public static Arm64MrsSystemRegister ARM64_SYSREG_ID_A64ISAR1_EL1;
    public static Arm64MrsSystemRegister ARM64_SYSREG_ID_A64MMFR0_EL1;
    public static Arm64MrsSystemRegister ARM64_SYSREG_ID_A64MMFR1_EL1;
    public static Arm64MrsSystemRegister ARM64_SYSREG_MVFR0_EL1;
    public static Arm64MrsSystemRegister ARM64_SYSREG_MVFR1_EL1;
    public static Arm64MrsSystemRegister ARM64_SYSREG_MVFR2_EL1;
    public static Arm64MrsSystemRegister ARM64_SYSREG_RVBAR_EL1;
    public static Arm64MrsSystemRegister ARM64_SYSREG_RVBAR_EL2;
    public static Arm64MrsSystemRegister ARM64_SYSREG_RVBAR_EL3;
    public static Arm64MrsSystemRegister ARM64_SYSREG_ISR_EL1;
    public static Arm64MrsSystemRegister ARM64_SYSREG_CNTPCT_EL0;
    public static Arm64MrsSystemRegister ARM64_SYSREG_CNTVCT_EL0;
    public static Arm64MrsSystemRegister ARM64_SYSREG_TRCSTATR;
    public static Arm64MrsSystemRegister ARM64_SYSREG_TRCIDR8;
    public static Arm64MrsSystemRegister ARM64_SYSREG_TRCIDR9;
    public static Arm64MrsSystemRegister ARM64_SYSREG_TRCIDR10;
    public static Arm64MrsSystemRegister ARM64_SYSREG_TRCIDR11;
    public static Arm64MrsSystemRegister ARM64_SYSREG_TRCIDR12;
    public static Arm64MrsSystemRegister ARM64_SYSREG_TRCIDR13;
    public static Arm64MrsSystemRegister ARM64_SYSREG_TRCIDR0;
    public static Arm64MrsSystemRegister ARM64_SYSREG_TRCIDR1;
    public static Arm64MrsSystemRegister ARM64_SYSREG_TRCIDR2;
    public static Arm64MrsSystemRegister ARM64_SYSREG_TRCIDR3;
    public static Arm64MrsSystemRegister ARM64_SYSREG_TRCIDR4;
    public static Arm64MrsSystemRegister ARM64_SYSREG_TRCIDR5;
    public static Arm64MrsSystemRegister ARM64_SYSREG_TRCIDR6;
    public static Arm64MrsSystemRegister ARM64_SYSREG_TRCIDR7;
    public static Arm64MrsSystemRegister ARM64_SYSREG_TRCOSLSR;
    public static Arm64MrsSystemRegister ARM64_SYSREG_TRCPDSR;
    public static Arm64MrsSystemRegister ARM64_SYSREG_TRCDEVAFF0;
    public static Arm64MrsSystemRegister ARM64_SYSREG_TRCDEVAFF1;
    public static Arm64MrsSystemRegister ARM64_SYSREG_TRCLSR;
    public static Arm64MrsSystemRegister ARM64_SYSREG_TRCAUTHSTATUS;
    public static Arm64MrsSystemRegister ARM64_SYSREG_TRCDEVARCH;
    public static Arm64MrsSystemRegister ARM64_SYSREG_TRCDEVID;
    public static Arm64MrsSystemRegister ARM64_SYSREG_TRCDEVTYPE;
    public static Arm64MrsSystemRegister ARM64_SYSREG_TRCPIDR4;
    public static Arm64MrsSystemRegister ARM64_SYSREG_TRCPIDR5;
    public static Arm64MrsSystemRegister ARM64_SYSREG_TRCPIDR6;
    public static Arm64MrsSystemRegister ARM64_SYSREG_TRCPIDR7;
    public static Arm64MrsSystemRegister ARM64_SYSREG_TRCPIDR0;
    public static Arm64MrsSystemRegister ARM64_SYSREG_TRCPIDR1;
    public static Arm64MrsSystemRegister ARM64_SYSREG_TRCPIDR2;
    public static Arm64MrsSystemRegister ARM64_SYSREG_TRCPIDR3;
    public static Arm64MrsSystemRegister ARM64_SYSREG_TRCCIDR0;
    public static Arm64MrsSystemRegister ARM64_SYSREG_TRCCIDR1;
    public static Arm64MrsSystemRegister ARM64_SYSREG_TRCCIDR2;
    public static Arm64MrsSystemRegister ARM64_SYSREG_TRCCIDR3;
    public static Arm64MrsSystemRegister ARM64_SYSREG_ICC_IAR1_EL1;
    public static Arm64MrsSystemRegister ARM64_SYSREG_ICC_IAR0_EL1;
    public static Arm64MrsSystemRegister ARM64_SYSREG_ICC_HPPIR1_EL1;
    public static Arm64MrsSystemRegister ARM64_SYSREG_ICC_HPPIR0_EL1;
    public static Arm64MrsSystemRegister ARM64_SYSREG_ICC_RPR_EL1;
    public static Arm64MrsSystemRegister ARM64_SYSREG_ICH_VTR_EL2;
    public static Arm64MrsSystemRegister ARM64_SYSREG_ICH_EISR_EL2;
    public static Arm64MrsSystemRegister ARM64_SYSREG_ICH_ELSR_EL2;
}
public enum Gee.External.Capstone.Arm64.Arm64MsrSystemRegister : Enum {
    public int value__;
    public static Arm64MsrSystemRegister Invalid;
    public static Arm64MsrSystemRegister ARM64_SYSREG_DBGDTRTX_EL0;
    public static Arm64MsrSystemRegister ARM64_SYSREG_OSLAR_EL1;
    public static Arm64MsrSystemRegister ARM64_SYSREG_PMSWINC_EL0;
    public static Arm64MsrSystemRegister ARM64_SYSREG_TRCOSLAR;
    public static Arm64MsrSystemRegister ARM64_SYSREG_TRCLAR;
    public static Arm64MsrSystemRegister ARM64_SYSREG_ICC_EOIR1_EL1;
    public static Arm64MsrSystemRegister ARM64_SYSREG_ICC_EOIR0_EL1;
    public static Arm64MsrSystemRegister ARM64_SYSREG_ICC_DIR_EL1;
    public static Arm64MsrSystemRegister ARM64_SYSREG_ICC_SGI1R_EL1;
    public static Arm64MsrSystemRegister ARM64_SYSREG_ICC_ASGI1R_EL1;
    public static Arm64MsrSystemRegister ARM64_SYSREG_ICC_SGI0R_EL1;
}
public class Gee.External.Capstone.Arm64.Arm64Operand : object {
    private OperandAccessType _accessType;
    private Arm64AtOperation _atOperation;
    private Arm64BarrierOperation _barrierOperation;
    private Arm64DcOperation _dcOperation;
    private double _floatingPoint;
    private Arm64IcOperation _icOperation;
    private long _immediate;
    private Arm64MemoryOperandValue _memory;
    private Arm64MrsSystemRegister _mrsSystemRegister;
    private Arm64MsrSystemRegister _msrSystemRegister;
    private Arm64PrefetchOperation _prefetchOperation;
    private Arm64PStateField _pStateField;
    private Arm64Register _register;
    private int _shiftValue;
    private Arm64TlbiOperation _tlbiOperation;
    [CompilerGeneratedAttribute]
private Arm64ExtendOperation <ExtendOperation>k__BackingField;
    [CompilerGeneratedAttribute]
private Arm64ShiftOperation <ShiftOperation>k__BackingField;
    [CompilerGeneratedAttribute]
private Arm64OperandType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private Arm64VectorArrangementSpecifier <VectorArrangementSpecifier>k__BackingField;
    [CompilerGeneratedAttribute]
private Arm64VectorElementSizeSpecifier <VectorElementSizeSpecifier>k__BackingField;
    [CompilerGeneratedAttribute]
private int <VectorIndex>k__BackingField;
    public OperandAccessType AccessType { get; }
    public Arm64AtOperation AtOperation { get; }
    public Arm64BarrierOperation BarrierOperation { get; }
    public Arm64DcOperation DcOperation { get; }
    public Arm64ExtendOperation ExtendOperation { get; }
    public double FloatingPoint { get; }
    public Arm64IcOperation IcOperation { get; }
    public long Immediate { get; }
    public bool IsDietModeEnabled { get; }
    public Arm64MemoryOperandValue Memory { get; }
    public Arm64MrsSystemRegister MrsSystemRegister { get; }
    public Arm64MsrSystemRegister MsrSystemRegister { get; }
    public Arm64PrefetchOperation PrefetchOperation { get; }
    public Arm64PStateField PStateField { get; }
    public Arm64Register Register { get; }
    public Arm64ShiftOperation ShiftOperation { get; }
    public int ShiftValue { get; }
    public Arm64TlbiOperation TlbiOperation { get; }
    public Arm64OperandType Type { get; }
    public Arm64VectorArrangementSpecifier VectorArrangementSpecifier { get; }
    public Arm64VectorElementSizeSpecifier VectorElementSizeSpecifier { get; }
    public int VectorIndex { get; }
    internal Arm64Operand(CapstoneDisassembler disassembler, Arm64InstructionId instructionId, NativeArm64Operand& nativeOperand);
    public OperandAccessType get_AccessType();
    public Arm64AtOperation get_AtOperation();
    public Arm64BarrierOperation get_BarrierOperation();
    public Arm64DcOperation get_DcOperation();
    [CompilerGeneratedAttribute]
public Arm64ExtendOperation get_ExtendOperation();
    public double get_FloatingPoint();
    public Arm64IcOperation get_IcOperation();
    public long get_Immediate();
    public bool get_IsDietModeEnabled();
    public Arm64MemoryOperandValue get_Memory();
    public Arm64MrsSystemRegister get_MrsSystemRegister();
    public Arm64MsrSystemRegister get_MsrSystemRegister();
    public Arm64PrefetchOperation get_PrefetchOperation();
    public Arm64PStateField get_PStateField();
    public Arm64Register get_Register();
    [CompilerGeneratedAttribute]
public Arm64ShiftOperation get_ShiftOperation();
    public int get_ShiftValue();
    public Arm64TlbiOperation get_TlbiOperation();
    [CompilerGeneratedAttribute]
public Arm64OperandType get_Type();
    [CompilerGeneratedAttribute]
public Arm64VectorArrangementSpecifier get_VectorArrangementSpecifier();
    [CompilerGeneratedAttribute]
public Arm64VectorElementSizeSpecifier get_VectorElementSizeSpecifier();
    [CompilerGeneratedAttribute]
public int get_VectorIndex();
    internal static Arm64Operand[] Create(CapstoneDisassembler disassembler, Arm64InstructionId instructionId, NativeArm64InstructionDetail& nativeInstructionDetail);
    [CompilerGeneratedAttribute]
internal static int <.ctor>g__CreateShiftValue|66_0(Arm64Operand this, NativeArm64Operand& cNativeOperand);
}
public enum Gee.External.Capstone.Arm64.Arm64OperandType : Enum {
    public int value__;
    public static Arm64OperandType Invalid;
    public static Arm64OperandType Register;
    public static Arm64OperandType Immediate;
    public static Arm64OperandType Memory;
    public static Arm64OperandType FloatingPoint;
    public static Arm64OperandType CImmediate;
    public static Arm64OperandType MrsSystemRegister;
    public static Arm64OperandType MsrSystemRegister;
    public static Arm64OperandType PStateField;
    public static Arm64OperandType SystemOperation;
    public static Arm64OperandType PrefetchOperation;
    public static Arm64OperandType BarrierOperation;
    public static Arm64OperandType AtOperation;
    public static Arm64OperandType DcOperation;
    public static Arm64OperandType IcOperation;
    public static Arm64OperandType TlbiOperation;
}
public enum Gee.External.Capstone.Arm64.Arm64PrefetchOperation : Enum {
    public int value__;
    public static Arm64PrefetchOperation Invalid;
    public static Arm64PrefetchOperation ARM64_PRFM_PLDL1KEEP;
    public static Arm64PrefetchOperation ARM64_PRFM_PLDL1STRM;
    public static Arm64PrefetchOperation ARM64_PRFM_PLDL2KEEP;
    public static Arm64PrefetchOperation ARM64_PRFM_PLDL2STRM;
    public static Arm64PrefetchOperation ARM64_PRFM_PLDL3KEEP;
    public static Arm64PrefetchOperation ARM64_PRFM_PLDL3STRM;
    public static Arm64PrefetchOperation ARM64_PRFM_PLIL1KEEP;
    public static Arm64PrefetchOperation ARM64_PRFM_PLIL1STRM;
    public static Arm64PrefetchOperation ARM64_PRFM_PLIL2KEEP;
    public static Arm64PrefetchOperation ARM64_PRFM_PLIL2STRM;
    public static Arm64PrefetchOperation ARM64_PRFM_PLIL3KEEP;
    public static Arm64PrefetchOperation ARM64_PRFM_PLIL3STRM;
    public static Arm64PrefetchOperation ARM64_PRFM_PSTL1KEEP;
    public static Arm64PrefetchOperation ARM64_PRFM_PSTL1STRM;
    public static Arm64PrefetchOperation ARM64_PRFM_PSTL2KEEP;
    public static Arm64PrefetchOperation ARM64_PRFM_PSTL2STRM;
    public static Arm64PrefetchOperation ARM64_PRFM_PSTL3KEEP;
    public static Arm64PrefetchOperation ARM64_PRFM_PSTL3STRM;
}
public enum Gee.External.Capstone.Arm64.Arm64PStateField : Enum {
    public int value__;
    public static Arm64PStateField Invalid;
    public static Arm64PStateField ARM64_PSTATE_SPSEL;
    public static Arm64PStateField ARM64_PSTATE_DAIFSET;
    public static Arm64PStateField ARM64_PSTATE_DAIFCLR;
}
public class Gee.External.Capstone.Arm64.Arm64Register : Register`1<Arm64RegisterId> {
    internal Arm64Register(Arm64RegisterId id, string name);
    internal static Arm64Register TryCreate(CapstoneDisassembler disassembler, Arm64RegisterId id);
}
public enum Gee.External.Capstone.Arm64.Arm64RegisterId : Enum {
    public int value__;
    public static Arm64RegisterId Invalid;
    public static Arm64RegisterId ARM64_REG_X29;
    public static Arm64RegisterId ARM64_REG_X30;
    public static Arm64RegisterId ARM64_REG_NZCV;
    public static Arm64RegisterId ARM64_REG_SP;
    public static Arm64RegisterId ARM64_REG_WSP;
    public static Arm64RegisterId ARM64_REG_WZR;
    public static Arm64RegisterId ARM64_REG_XZR;
    public static Arm64RegisterId ARM64_REG_B0;
    public static Arm64RegisterId ARM64_REG_B1;
    public static Arm64RegisterId ARM64_REG_B2;
    public static Arm64RegisterId ARM64_REG_B3;
    public static Arm64RegisterId ARM64_REG_B4;
    public static Arm64RegisterId ARM64_REG_B5;
    public static Arm64RegisterId ARM64_REG_B6;
    public static Arm64RegisterId ARM64_REG_B7;
    public static Arm64RegisterId ARM64_REG_B8;
    public static Arm64RegisterId ARM64_REG_B9;
    public static Arm64RegisterId ARM64_REG_B10;
    public static Arm64RegisterId ARM64_REG_B11;
    public static Arm64RegisterId ARM64_REG_B12;
    public static Arm64RegisterId ARM64_REG_B13;
    public static Arm64RegisterId ARM64_REG_B14;
    public static Arm64RegisterId ARM64_REG_B15;
    public static Arm64RegisterId ARM64_REG_B16;
    public static Arm64RegisterId ARM64_REG_B17;
    public static Arm64RegisterId ARM64_REG_B18;
    public static Arm64RegisterId ARM64_REG_B19;
    public static Arm64RegisterId ARM64_REG_B20;
    public static Arm64RegisterId ARM64_REG_B21;
    public static Arm64RegisterId ARM64_REG_B22;
    public static Arm64RegisterId ARM64_REG_B23;
    public static Arm64RegisterId ARM64_REG_B24;
    public static Arm64RegisterId ARM64_REG_B25;
    public static Arm64RegisterId ARM64_REG_B26;
    public static Arm64RegisterId ARM64_REG_B27;
    public static Arm64RegisterId ARM64_REG_B28;
    public static Arm64RegisterId ARM64_REG_B29;
    public static Arm64RegisterId ARM64_REG_B30;
    public static Arm64RegisterId ARM64_REG_B31;
    public static Arm64RegisterId ARM64_REG_D0;
    public static Arm64RegisterId ARM64_REG_D1;
    public static Arm64RegisterId ARM64_REG_D2;
    public static Arm64RegisterId ARM64_REG_D3;
    public static Arm64RegisterId ARM64_REG_D4;
    public static Arm64RegisterId ARM64_REG_D5;
    public static Arm64RegisterId ARM64_REG_D6;
    public static Arm64RegisterId ARM64_REG_D7;
    public static Arm64RegisterId ARM64_REG_D8;
    public static Arm64RegisterId ARM64_REG_D9;
    public static Arm64RegisterId ARM64_REG_D10;
    public static Arm64RegisterId ARM64_REG_D11;
    public static Arm64RegisterId ARM64_REG_D12;
    public static Arm64RegisterId ARM64_REG_D13;
    public static Arm64RegisterId ARM64_REG_D14;
    public static Arm64RegisterId ARM64_REG_D15;
    public static Arm64RegisterId ARM64_REG_D16;
    public static Arm64RegisterId ARM64_REG_D17;
    public static Arm64RegisterId ARM64_REG_D18;
    public static Arm64RegisterId ARM64_REG_D19;
    public static Arm64RegisterId ARM64_REG_D20;
    public static Arm64RegisterId ARM64_REG_D21;
    public static Arm64RegisterId ARM64_REG_D22;
    public static Arm64RegisterId ARM64_REG_D23;
    public static Arm64RegisterId ARM64_REG_D24;
    public static Arm64RegisterId ARM64_REG_D25;
    public static Arm64RegisterId ARM64_REG_D26;
    public static Arm64RegisterId ARM64_REG_D27;
    public static Arm64RegisterId ARM64_REG_D28;
    public static Arm64RegisterId ARM64_REG_D29;
    public static Arm64RegisterId ARM64_REG_D30;
    public static Arm64RegisterId ARM64_REG_D31;
    public static Arm64RegisterId ARM64_REG_H0;
    public static Arm64RegisterId ARM64_REG_H1;
    public static Arm64RegisterId ARM64_REG_H2;
    public static Arm64RegisterId ARM64_REG_H3;
    public static Arm64RegisterId ARM64_REG_H4;
    public static Arm64RegisterId ARM64_REG_H5;
    public static Arm64RegisterId ARM64_REG_H6;
    public static Arm64RegisterId ARM64_REG_H7;
    public static Arm64RegisterId ARM64_REG_H8;
    public static Arm64RegisterId ARM64_REG_H9;
    public static Arm64RegisterId ARM64_REG_H10;
    public static Arm64RegisterId ARM64_REG_H11;
    public static Arm64RegisterId ARM64_REG_H12;
    public static Arm64RegisterId ARM64_REG_H13;
    public static Arm64RegisterId ARM64_REG_H14;
    public static Arm64RegisterId ARM64_REG_H15;
    public static Arm64RegisterId ARM64_REG_H16;
    public static Arm64RegisterId ARM64_REG_H17;
    public static Arm64RegisterId ARM64_REG_H18;
    public static Arm64RegisterId ARM64_REG_H19;
    public static Arm64RegisterId ARM64_REG_H20;
    public static Arm64RegisterId ARM64_REG_H21;
    public static Arm64RegisterId ARM64_REG_H22;
    public static Arm64RegisterId ARM64_REG_H23;
    public static Arm64RegisterId ARM64_REG_H24;
    public static Arm64RegisterId ARM64_REG_H25;
    public static Arm64RegisterId ARM64_REG_H26;
    public static Arm64RegisterId ARM64_REG_H27;
    public static Arm64RegisterId ARM64_REG_H28;
    public static Arm64RegisterId ARM64_REG_H29;
    public static Arm64RegisterId ARM64_REG_H30;
    public static Arm64RegisterId ARM64_REG_H31;
    public static Arm64RegisterId ARM64_REG_Q0;
    public static Arm64RegisterId ARM64_REG_Q1;
    public static Arm64RegisterId ARM64_REG_Q2;
    public static Arm64RegisterId ARM64_REG_Q3;
    public static Arm64RegisterId ARM64_REG_Q4;
    public static Arm64RegisterId ARM64_REG_Q5;
    public static Arm64RegisterId ARM64_REG_Q6;
    public static Arm64RegisterId ARM64_REG_Q7;
    public static Arm64RegisterId ARM64_REG_Q8;
    public static Arm64RegisterId ARM64_REG_Q9;
    public static Arm64RegisterId ARM64_REG_Q10;
    public static Arm64RegisterId ARM64_REG_Q11;
    public static Arm64RegisterId ARM64_REG_Q12;
    public static Arm64RegisterId ARM64_REG_Q13;
    public static Arm64RegisterId ARM64_REG_Q14;
    public static Arm64RegisterId ARM64_REG_Q15;
    public static Arm64RegisterId ARM64_REG_Q16;
    public static Arm64RegisterId ARM64_REG_Q17;
    public static Arm64RegisterId ARM64_REG_Q18;
    public static Arm64RegisterId ARM64_REG_Q19;
    public static Arm64RegisterId ARM64_REG_Q20;
    public static Arm64RegisterId ARM64_REG_Q21;
    public static Arm64RegisterId ARM64_REG_Q22;
    public static Arm64RegisterId ARM64_REG_Q23;
    public static Arm64RegisterId ARM64_REG_Q24;
    public static Arm64RegisterId ARM64_REG_Q25;
    public static Arm64RegisterId ARM64_REG_Q26;
    public static Arm64RegisterId ARM64_REG_Q27;
    public static Arm64RegisterId ARM64_REG_Q28;
    public static Arm64RegisterId ARM64_REG_Q29;
    public static Arm64RegisterId ARM64_REG_Q30;
    public static Arm64RegisterId ARM64_REG_Q31;
    public static Arm64RegisterId ARM64_REG_S0;
    public static Arm64RegisterId ARM64_REG_S1;
    public static Arm64RegisterId ARM64_REG_S2;
    public static Arm64RegisterId ARM64_REG_S3;
    public static Arm64RegisterId ARM64_REG_S4;
    public static Arm64RegisterId ARM64_REG_S5;
    public static Arm64RegisterId ARM64_REG_S6;
    public static Arm64RegisterId ARM64_REG_S7;
    public static Arm64RegisterId ARM64_REG_S8;
    public static Arm64RegisterId ARM64_REG_S9;
    public static Arm64RegisterId ARM64_REG_S10;
    public static Arm64RegisterId ARM64_REG_S11;
    public static Arm64RegisterId ARM64_REG_S12;
    public static Arm64RegisterId ARM64_REG_S13;
    public static Arm64RegisterId ARM64_REG_S14;
    public static Arm64RegisterId ARM64_REG_S15;
    public static Arm64RegisterId ARM64_REG_S16;
    public static Arm64RegisterId ARM64_REG_S17;
    public static Arm64RegisterId ARM64_REG_S18;
    public static Arm64RegisterId ARM64_REG_S19;
    public static Arm64RegisterId ARM64_REG_S20;
    public static Arm64RegisterId ARM64_REG_S21;
    public static Arm64RegisterId ARM64_REG_S22;
    public static Arm64RegisterId ARM64_REG_S23;
    public static Arm64RegisterId ARM64_REG_S24;
    public static Arm64RegisterId ARM64_REG_S25;
    public static Arm64RegisterId ARM64_REG_S26;
    public static Arm64RegisterId ARM64_REG_S27;
    public static Arm64RegisterId ARM64_REG_S28;
    public static Arm64RegisterId ARM64_REG_S29;
    public static Arm64RegisterId ARM64_REG_S30;
    public static Arm64RegisterId ARM64_REG_S31;
    public static Arm64RegisterId ARM64_REG_W0;
    public static Arm64RegisterId ARM64_REG_W1;
    public static Arm64RegisterId ARM64_REG_W2;
    public static Arm64RegisterId ARM64_REG_W3;
    public static Arm64RegisterId ARM64_REG_W4;
    public static Arm64RegisterId ARM64_REG_W5;
    public static Arm64RegisterId ARM64_REG_W6;
    public static Arm64RegisterId ARM64_REG_W7;
    public static Arm64RegisterId ARM64_REG_W8;
    public static Arm64RegisterId ARM64_REG_W9;
    public static Arm64RegisterId ARM64_REG_W10;
    public static Arm64RegisterId ARM64_REG_W11;
    public static Arm64RegisterId ARM64_REG_W12;
    public static Arm64RegisterId ARM64_REG_W13;
    public static Arm64RegisterId ARM64_REG_W14;
    public static Arm64RegisterId ARM64_REG_W15;
    public static Arm64RegisterId ARM64_REG_W16;
    public static Arm64RegisterId ARM64_REG_W17;
    public static Arm64RegisterId ARM64_REG_W18;
    public static Arm64RegisterId ARM64_REG_W19;
    public static Arm64RegisterId ARM64_REG_W20;
    public static Arm64RegisterId ARM64_REG_W21;
    public static Arm64RegisterId ARM64_REG_W22;
    public static Arm64RegisterId ARM64_REG_W23;
    public static Arm64RegisterId ARM64_REG_W24;
    public static Arm64RegisterId ARM64_REG_W25;
    public static Arm64RegisterId ARM64_REG_W26;
    public static Arm64RegisterId ARM64_REG_W27;
    public static Arm64RegisterId ARM64_REG_W28;
    public static Arm64RegisterId ARM64_REG_W29;
    public static Arm64RegisterId ARM64_REG_W30;
    public static Arm64RegisterId ARM64_REG_X0;
    public static Arm64RegisterId ARM64_REG_X1;
    public static Arm64RegisterId ARM64_REG_X2;
    public static Arm64RegisterId ARM64_REG_X3;
    public static Arm64RegisterId ARM64_REG_X4;
    public static Arm64RegisterId ARM64_REG_X5;
    public static Arm64RegisterId ARM64_REG_X6;
    public static Arm64RegisterId ARM64_REG_X7;
    public static Arm64RegisterId ARM64_REG_X8;
    public static Arm64RegisterId ARM64_REG_X9;
    public static Arm64RegisterId ARM64_REG_X10;
    public static Arm64RegisterId ARM64_REG_X11;
    public static Arm64RegisterId ARM64_REG_X12;
    public static Arm64RegisterId ARM64_REG_X13;
    public static Arm64RegisterId ARM64_REG_X14;
    public static Arm64RegisterId ARM64_REG_X15;
    public static Arm64RegisterId ARM64_REG_X16;
    public static Arm64RegisterId ARM64_REG_X17;
    public static Arm64RegisterId ARM64_REG_X18;
    public static Arm64RegisterId ARM64_REG_X19;
    public static Arm64RegisterId ARM64_REG_X20;
    public static Arm64RegisterId ARM64_REG_X21;
    public static Arm64RegisterId ARM64_REG_X22;
    public static Arm64RegisterId ARM64_REG_X23;
    public static Arm64RegisterId ARM64_REG_X24;
    public static Arm64RegisterId ARM64_REG_X25;
    public static Arm64RegisterId ARM64_REG_X26;
    public static Arm64RegisterId ARM64_REG_X27;
    public static Arm64RegisterId ARM64_REG_X28;
    public static Arm64RegisterId ARM64_REG_V0;
    public static Arm64RegisterId ARM64_REG_V1;
    public static Arm64RegisterId ARM64_REG_V2;
    public static Arm64RegisterId ARM64_REG_V3;
    public static Arm64RegisterId ARM64_REG_V4;
    public static Arm64RegisterId ARM64_REG_V5;
    public static Arm64RegisterId ARM64_REG_V6;
    public static Arm64RegisterId ARM64_REG_V7;
    public static Arm64RegisterId ARM64_REG_V8;
    public static Arm64RegisterId ARM64_REG_V9;
    public static Arm64RegisterId ARM64_REG_V10;
    public static Arm64RegisterId ARM64_REG_V11;
    public static Arm64RegisterId ARM64_REG_V12;
    public static Arm64RegisterId ARM64_REG_V13;
    public static Arm64RegisterId ARM64_REG_V14;
    public static Arm64RegisterId ARM64_REG_V15;
    public static Arm64RegisterId ARM64_REG_V16;
    public static Arm64RegisterId ARM64_REG_V17;
    public static Arm64RegisterId ARM64_REG_V18;
    public static Arm64RegisterId ARM64_REG_V19;
    public static Arm64RegisterId ARM64_REG_V20;
    public static Arm64RegisterId ARM64_REG_V21;
    public static Arm64RegisterId ARM64_REG_V22;
    public static Arm64RegisterId ARM64_REG_V23;
    public static Arm64RegisterId ARM64_REG_V24;
    public static Arm64RegisterId ARM64_REG_V25;
    public static Arm64RegisterId ARM64_REG_V26;
    public static Arm64RegisterId ARM64_REG_V27;
    public static Arm64RegisterId ARM64_REG_V28;
    public static Arm64RegisterId ARM64_REG_V29;
    public static Arm64RegisterId ARM64_REG_V30;
    public static Arm64RegisterId ARM64_REG_V31;
    public static Arm64RegisterId ARM64_REG_IP0;
    public static Arm64RegisterId ARM64_REG_IP1;
    public static Arm64RegisterId ARM64_REG_FP;
    public static Arm64RegisterId ARM64_REG_LR;
}
public enum Gee.External.Capstone.Arm64.Arm64ShiftOperation : Enum {
    public int value__;
    public static Arm64ShiftOperation Invalid;
    public static Arm64ShiftOperation ARM64_SFT_LSL;
    public static Arm64ShiftOperation ARM64_SFT_MSL;
    public static Arm64ShiftOperation ARM64_SFT_LSR;
    public static Arm64ShiftOperation ARM64_SFT_ASR;
    public static Arm64ShiftOperation ARM64_SFT_ROR;
}
public enum Gee.External.Capstone.Arm64.Arm64TlbiOperation : Enum {
    public int value__;
    public static Arm64TlbiOperation Invalid;
    public static Arm64TlbiOperation ARM64_TLBI_VMALLE1IS;
    public static Arm64TlbiOperation ARM64_TLBI_VAE1IS;
    public static Arm64TlbiOperation ARM64_TLBI_ASIDE1IS;
    public static Arm64TlbiOperation ARM64_TLBI_VAAE1IS;
    public static Arm64TlbiOperation ARM64_TLBI_VALE1IS;
    public static Arm64TlbiOperation ARM64_TLBI_VAALE1IS;
    public static Arm64TlbiOperation ARM64_TLBI_ALLE2IS;
    public static Arm64TlbiOperation ARM64_TLBI_VAE2IS;
    public static Arm64TlbiOperation ARM64_TLBI_ALLE1IS;
    public static Arm64TlbiOperation ARM64_TLBI_VALE2IS;
    public static Arm64TlbiOperation ARM64_TLBI_VMALLS12E1IS;
    public static Arm64TlbiOperation ARM64_TLBI_ALLE3IS;
    public static Arm64TlbiOperation ARM64_TLBI_VAE3IS;
    public static Arm64TlbiOperation ARM64_TLBI_VALE3IS;
    public static Arm64TlbiOperation ARM64_TLBI_IPAS2E1IS;
    public static Arm64TlbiOperation ARM64_TLBI_IPAS2LE1IS;
    public static Arm64TlbiOperation ARM64_TLBI_IPAS2E1;
    public static Arm64TlbiOperation ARM64_TLBI_IPAS2LE1;
    public static Arm64TlbiOperation ARM64_TLBI_VMALLE1;
    public static Arm64TlbiOperation ARM64_TLBI_VAE1;
    public static Arm64TlbiOperation ARM64_TLBI_ASIDE1;
    public static Arm64TlbiOperation ARM64_TLBI_VAAE1;
    public static Arm64TlbiOperation ARM64_TLBI_VALE1;
    public static Arm64TlbiOperation ARM64_TLBI_VAALE1;
    public static Arm64TlbiOperation ARM64_TLBI_ALLE2;
    public static Arm64TlbiOperation ARM64_TLBI_VAE2;
    public static Arm64TlbiOperation ARM64_TLBI_ALLE1;
    public static Arm64TlbiOperation ARM64_TLBI_VALE2;
    public static Arm64TlbiOperation ARM64_TLBI_VMALLS12E1;
    public static Arm64TlbiOperation ARM64_TLBI_ALLE3;
    public static Arm64TlbiOperation ARM64_TLBI_VAE3;
    public static Arm64TlbiOperation ARM64_TLBI_VALE3;
}
public enum Gee.External.Capstone.Arm64.Arm64VectorArrangementSpecifier : Enum {
    public int value__;
    public static Arm64VectorArrangementSpecifier Invalid;
    public static Arm64VectorArrangementSpecifier ARM64_VAS_8B;
    public static Arm64VectorArrangementSpecifier ARM64_VAS_16B;
    public static Arm64VectorArrangementSpecifier ARM64_VAS_4H;
    public static Arm64VectorArrangementSpecifier ARM64_VAS_8H;
    public static Arm64VectorArrangementSpecifier ARM64_VAS_2S;
    public static Arm64VectorArrangementSpecifier ARM64_VAS_4S;
    public static Arm64VectorArrangementSpecifier ARM64_VAS_1D;
    public static Arm64VectorArrangementSpecifier ARM64_VAS_2D;
    public static Arm64VectorArrangementSpecifier ARM64_VAS_1Q;
}
public enum Gee.External.Capstone.Arm64.Arm64VectorElementSizeSpecifier : Enum {
    public int value__;
    public static Arm64VectorElementSizeSpecifier Invalid;
    public static Arm64VectorElementSizeSpecifier ARM64_VESS_B;
    public static Arm64VectorElementSizeSpecifier ARM64_VESS_H;
    public static Arm64VectorElementSizeSpecifier ARM64_VESS_S;
    public static Arm64VectorElementSizeSpecifier ARM64_VESS_D;
}
public class Gee.External.Capstone.Arm64.CapstoneArm64Disassembler : CapstoneDisassembler`8<Arm64DisassembleMode, Arm64Instruction, Arm64InstructionDetail, Arm64InstructionGroup, Arm64InstructionGroupId, Arm64InstructionId, Arm64Register, Arm64RegisterId> {
    public CapstoneArm64Disassembler(Arm64DisassembleMode disassembleMode);
    private protected virtual Arm64Instruction CreateInstruction(NativeInstructionHandle hInstruction);
}
internal class Gee.External.Capstone.Arm64.NativeArm64InstructionDetail : ValueType {
    public Arm64ConditionCode ConditionCode;
    public bool UpdateFlags;
    public bool WriteBack;
    public byte OperandCount;
    public NativeArm64Operand[] Operands;
}
internal class Gee.External.Capstone.Arm64.NativeArm64MemoryOperandValue : ValueType {
    public Arm64RegisterId Base;
    public Arm64RegisterId Index;
    public int Displacement;
}
internal class Gee.External.Capstone.Arm64.NativeArm64Operand : ValueType {
    public int VectorIndex;
    public Arm64VectorArrangementSpecifier VectorArrangementSpecifier;
    public Arm64VectorElementSizeSpecifier VectorElementSizeSpecifier;
    public NativeArm64OperandShift Shift;
    public Arm64ExtendOperation ExtendOperation;
    public Arm64OperandType Type;
    public NativeArm64OperandValue Value;
    public OperandAccessType AccessType;
}
internal class Gee.External.Capstone.Arm64.NativeArm64OperandShift : ValueType {
    public Arm64ShiftOperation Operation;
    public int Value;
}
internal class Gee.External.Capstone.Arm64.NativeArm64OperandValue : ValueType {
    public Arm64RegisterId Register;
    public long Immediate;
    public double FloatingPoint;
    public NativeArm64MemoryOperandValue Memory;
    public Arm64PStateField PStateField;
    public int SystemOperation;
    public Arm64PrefetchOperation PrefetchOperation;
    public Arm64BarrierOperation BarrierOperation;
}
public abstract class Gee.External.Capstone.CapstoneDisassembler : object {
    public static bool IsArm64Supported { get; }
    public static bool IsArmSupported { get; }
    public static bool IsDietModeEnabled { get; }
    internal static bool IsEvmSupported { get; }
    internal static bool IsM680XSupported { get; }
    public static bool IsM68KSupported { get; }
    public static bool IsMipsSupported { get; }
    public static bool IsPowerPcSupported { get; }
    internal static bool IsSparcSupported { get; }
    internal static bool IsSystemZSupported { get; }
    internal static bool IsTms320C64XSupported { get; }
    public static bool IsX86ReduceModeEnabled { get; }
    public static bool IsX86Supported { get; }
    public static bool IsXCoreSupported { get; }
    public static Version Version { get; }
    public DisassembleArchitecture DisassembleArchitecture { get; }
    public bool EnableInstructionDetails { get; public set; }
    public bool EnableSkipDataMode { get; public set; }
    internal NativeDisassemblerHandle Handle { get; }
    internal NativeDisassembleMode NativeDisassembleMode { get; }
    public string SkipDataInstructionMnemonic { get; public set; }
    public static bool get_IsArm64Supported();
    public static bool get_IsArmSupported();
    public static bool get_IsDietModeEnabled();
    internal static bool get_IsEvmSupported();
    internal static bool get_IsM680XSupported();
    public static bool get_IsM68KSupported();
    public static bool get_IsMipsSupported();
    public static bool get_IsPowerPcSupported();
    internal static bool get_IsSparcSupported();
    internal static bool get_IsSystemZSupported();
    internal static bool get_IsTms320C64XSupported();
    public static bool get_IsX86ReduceModeEnabled();
    public static bool get_IsX86Supported();
    public static bool get_IsXCoreSupported();
    public static Version get_Version();
    public abstract virtual DisassembleArchitecture get_DisassembleArchitecture();
    public abstract virtual bool get_EnableInstructionDetails();
    public abstract virtual void set_EnableInstructionDetails(bool value);
    public abstract virtual bool get_EnableSkipDataMode();
    public abstract virtual void set_EnableSkipDataMode(bool value);
    internal abstract virtual NativeDisassemblerHandle get_Handle();
    internal abstract virtual NativeDisassembleMode get_NativeDisassembleMode();
    public abstract virtual string get_SkipDataInstructionMnemonic();
    public abstract virtual void set_SkipDataInstructionMnemonic(string value);
    public static CapstoneArm64Disassembler CreateArm64Disassembler(Arm64DisassembleMode disassembleMode);
    public static CapstoneArmDisassembler CreateArmDisassembler(ArmDisassembleMode disassembleMode);
    public static CapstoneM68KDisassembler CreateM68KDisassembler(M68KDisassembleMode disassembleMode);
    public static CapstoneMipsDisassembler CreateMipsDisassembler(MipsDisassembleMode disassembleMode);
    public static CapstonePowerPcDisassembler CreatePowerPcDisassembler(PowerPcDisassembleMode disassembleMode);
    public static CapstoneX86Disassembler CreateX86Disassembler(X86DisassembleMode disassembleMode);
    public static CapstoneXCoreDisassembler CreateXCoreDisassembler(XCoreDisassembleMode disassembleMode);
    internal static void ThrowIfDietModeIsEnabled();
    internal static void ThrowIfValueIsNullReference(string name, T value);
    public abstract virtual void Dispose();
}
public abstract class Gee.External.Capstone.CapstoneDisassembler`8 : CapstoneDisassembler {
    private DisassembleArchitecture _disassembleArchitecture;
    private TDisassembleMode _disassembleMode;
    private DisassembleSyntax _disassembleSyntax;
    private bool _enableInstructionDetails;
    private bool _enableSkipDataMode;
    private NativeDisassemblerHandle _handle;
    private NativeDisassembleMode _nativeDisassembleMode;
    private Func`3<Byte[], long, long> _skipDataCallback;
    private string _skipDataInstructionMnemonic;
    public DisassembleArchitecture DisassembleArchitecture { get; }
    public TDisassembleMode DisassembleMode { get; public set; }
    public DisassembleSyntax DisassembleSyntax { get; public set; }
    public bool EnableInstructionDetails { get; public set; }
    public bool EnableSkipDataMode { get; public set; }
    internal NativeDisassemblerHandle Handle { get; }
    internal NativeDisassembleMode NativeDisassembleMode { get; }
    public Func`3<Byte[], long, long> SkipDataCallback { get; public set; }
    public string SkipDataInstructionMnemonic { get; public set; }
    private protected CapstoneDisassembler`8(DisassembleArchitecture disassembleArchitecture, TDisassembleMode disassembleMode);
    public virtual DisassembleArchitecture get_DisassembleArchitecture();
    public TDisassembleMode get_DisassembleMode();
    public void set_DisassembleMode(TDisassembleMode value);
    public DisassembleSyntax get_DisassembleSyntax();
    public void set_DisassembleSyntax(DisassembleSyntax value);
    public virtual bool get_EnableInstructionDetails();
    public virtual void set_EnableInstructionDetails(bool value);
    public virtual bool get_EnableSkipDataMode();
    public virtual void set_EnableSkipDataMode(bool value);
    internal virtual NativeDisassemblerHandle get_Handle();
    internal virtual NativeDisassembleMode get_NativeDisassembleMode();
    public Func`3<Byte[], long, long> get_SkipDataCallback();
    public void set_SkipDataCallback(Func`3<Byte[], long, long> value);
    public virtual string get_SkipDataInstructionMnemonic();
    public virtual void set_SkipDataInstructionMnemonic(string value);
    private protected abstract virtual TInstruction CreateInstruction(NativeInstructionHandle hInstruction);
    public TInstruction[] Disassemble(Byte[] binaryCode);
    public TInstruction[] Disassemble(Byte[] binaryCode, long startingAddress);
    public TInstruction[] Disassemble(Byte[] binaryCode, long startingAddress, int count);
    public virtual void Dispose();
    public string GetInstructionGroupName(TInstructionGroupId instructionGroupId);
    public string GetRegisterName(TRegisterId registerId);
    public IEnumerable`1<TInstruction> Iterate(Byte[] binaryCode);
    [IteratorStateMachineAttribute("Gee.External.Capstone.CapstoneDisassembler`8/<Iterate>d__42")]
public IEnumerable`1<TInstruction> Iterate(Byte[] binaryCode, long startingAddress);
    public void ResetInstructionMnemonic(TInstructionId instructionId);
    public void SetInstructionMnemonic(TInstructionId instructionId, string instructionMnemonic);
    private void ThrowIfDisassemblerIsDisposed();
    [CompilerGeneratedAttribute]
internal static NativeDisassembleMode <.ctor>g__CreateNativeDisassembleMode|33_0(CapstoneDisassembler`8<TDisassembleMode, TInstruction, TInstructionDetail, TInstructionGroup, TInstructionGroupId, TInstructionId, TRegister, TRegisterId> this);
}
public class Gee.External.Capstone.CapstoneException : Exception {
    internal CapstoneException(string detailMessage);
    internal CapstoneException(string detailMessage, Exception innerException);
}
public enum Gee.External.Capstone.DisassembleArchitecture : Enum {
    public int value__;
    public static DisassembleArchitecture Arm;
    public static DisassembleArchitecture Arm64;
    public static DisassembleArchitecture Mips;
    public static DisassembleArchitecture X86;
    public static DisassembleArchitecture PowerPc;
    public static DisassembleArchitecture Sparc;
    public static DisassembleArchitecture SystemZ;
    public static DisassembleArchitecture XCore;
    public static DisassembleArchitecture M68K;
    public static DisassembleArchitecture Tms320C64X;
    public static DisassembleArchitecture M680X;
    public static DisassembleArchitecture Evm;
}
public enum Gee.External.Capstone.DisassembleSyntax : Enum {
    public int value__;
    public static DisassembleSyntax Att;
    public static DisassembleSyntax Intel;
    public static DisassembleSyntax Masm;
}
public abstract class Gee.External.Capstone.Instruction`8 : object {
    private TDetail _details;
    private string _mnemonic;
    private string _operand;
    [CompilerGeneratedAttribute]
private long <Address>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <Bytes>k__BackingField;
    [CompilerGeneratedAttribute]
private DisassembleArchitecture <DisassembleArchitecture>k__BackingField;
    [CompilerGeneratedAttribute]
private TDisassembleMode <DisassembleMode>k__BackingField;
    [CompilerGeneratedAttribute]
private TId <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsSkippedData>k__BackingField;
    public long Address { get; }
    public Byte[] Bytes { get; }
    public TDetail Details { get; }
    public DisassembleArchitecture DisassembleArchitecture { get; }
    public TDisassembleMode DisassembleMode { get; }
    public bool HasDetails { get; }
    public TId Id { get; }
    public bool IsDietModeEnabled { get; }
    public bool IsSkippedData { get; }
    public string Mnemonic { get; }
    public string Operand { get; }
    private protected Instruction`8(InstructionBuilder`8<TDetail, TDisassembleMode, TGroup, TGroupId, TSelf, TId, TRegister, TRegisterId> builder);
    [CompilerGeneratedAttribute]
public long get_Address();
    [CompilerGeneratedAttribute]
public Byte[] get_Bytes();
    public TDetail get_Details();
    [CompilerGeneratedAttribute]
public DisassembleArchitecture get_DisassembleArchitecture();
    [CompilerGeneratedAttribute]
public TDisassembleMode get_DisassembleMode();
    public bool get_HasDetails();
    [CompilerGeneratedAttribute]
public TId get_Id();
    public bool get_IsDietModeEnabled();
    [CompilerGeneratedAttribute]
public bool get_IsSkippedData();
    public string get_Mnemonic();
    public string get_Operand();
    public virtual string ToString();
}
internal abstract class Gee.External.Capstone.InstructionBuilder`8 : object {
    [CompilerGeneratedAttribute]
private long <Address>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <Bytes>k__BackingField;
    [CompilerGeneratedAttribute]
private TDetail <Details>k__BackingField;
    [CompilerGeneratedAttribute]
private DisassembleArchitecture <DisassembleArchitecture>k__BackingField;
    [CompilerGeneratedAttribute]
private TDisassembleMode <DisassembleMode>k__BackingField;
    [CompilerGeneratedAttribute]
private TId <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsSkippedData>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Mnemonic>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Operand>k__BackingField;
    internal long Address { get; private set; }
    internal Byte[] Bytes { get; private set; }
    internal TDetail Details { get; private set; }
    internal DisassembleArchitecture DisassembleArchitecture { get; private set; }
    internal TDisassembleMode DisassembleMode { get; private set; }
    internal TId Id { get; private set; }
    internal bool IsSkippedData { get; private set; }
    internal string Mnemonic { get; private set; }
    internal string Operand { get; private set; }
    [CompilerGeneratedAttribute]
internal long get_Address();
    [CompilerGeneratedAttribute]
private void set_Address(long value);
    [CompilerGeneratedAttribute]
internal Byte[] get_Bytes();
    [CompilerGeneratedAttribute]
private void set_Bytes(Byte[] value);
    [CompilerGeneratedAttribute]
internal TDetail get_Details();
    [CompilerGeneratedAttribute]
private void set_Details(TDetail value);
    [CompilerGeneratedAttribute]
internal DisassembleArchitecture get_DisassembleArchitecture();
    [CompilerGeneratedAttribute]
private void set_DisassembleArchitecture(DisassembleArchitecture value);
    [CompilerGeneratedAttribute]
internal TDisassembleMode get_DisassembleMode();
    [CompilerGeneratedAttribute]
private void set_DisassembleMode(TDisassembleMode value);
    [CompilerGeneratedAttribute]
internal TId get_Id();
    [CompilerGeneratedAttribute]
private void set_Id(TId value);
    [CompilerGeneratedAttribute]
internal bool get_IsSkippedData();
    [CompilerGeneratedAttribute]
private void set_IsSkippedData(bool value);
    [CompilerGeneratedAttribute]
internal string get_Mnemonic();
    [CompilerGeneratedAttribute]
private void set_Mnemonic(string value);
    [CompilerGeneratedAttribute]
internal string get_Operand();
    [CompilerGeneratedAttribute]
private void set_Operand(string value);
    internal virtual void Build(CapstoneDisassembler disassembler, NativeInstructionHandle hInstruction);
    private protected abstract virtual TDetail CreateDetails(CapstoneDisassembler disassembler, NativeInstructionHandle hInstruction);
    private protected abstract virtual TDisassembleMode CreateDisassembleMode(NativeDisassembleMode nativeDisassembleMode);
    private protected abstract virtual TId CreateId(int id);
    [CompilerGeneratedAttribute]
internal static void <Build>g__SetBytes|37_0(InstructionBuilder`8<TDetail, TDisassembleMode, TGroup, TGroupId, TInstruction, TId, TRegister, TRegisterId> this, NativeInstruction& cNativeInstruction);
    [CompilerGeneratedAttribute]
internal static void <Build>g__SetDetails|37_1(InstructionBuilder`8<TDetail, TDisassembleMode, TGroup, TGroupId, TInstruction, TId, TRegister, TRegisterId> this, CapstoneDisassembler cDisassembler, NativeInstructionHandle cHInstruction, NativeInstruction& cNativeInstruction);
}
public abstract class Gee.External.Capstone.InstructionDetail`8 : object {
    private TRegister[] _allReadRegisters;
    private TRegister[] _allWrittenRegisters;
    private Lazy`1<TRegister[]> _explicitlyReadRegisters;
    private Lazy`1<TRegister[]> _explicitlyWrittenRegisters;
    private TGroup[] _groups;
    private TRegister[] _implicitlyReadRegisters;
    private TRegister[] _implicitlyWrittenRegisters;
    [CompilerGeneratedAttribute]
private DisassembleArchitecture <DisassembleArchitecture>k__BackingField;
    [CompilerGeneratedAttribute]
private TDisassembleMode <DisassembleMode>k__BackingField;
    public TRegister[] AllReadRegisters { get; }
    public TRegister[] AllWrittenRegisters { get; }
    public DisassembleArchitecture DisassembleArchitecture { get; }
    public TDisassembleMode DisassembleMode { get; }
    public TRegister[] ExplicitlyReadRegisters { get; }
    public TRegister[] ExplicitlyWrittenRegisters { get; }
    public TGroup[] Groups { get; }
    public TRegister[] ImplicitlyReadRegisters { get; }
    public TRegister[] ImplicitlyWrittenRegisters { get; }
    public bool IsDietModeEnabled { get; }
    private protected InstructionDetail`8(InstructionDetailBuilder`8<TSelf, TDisassembleMode, TGroup, TGroupId, TInstruction, TInstructionId, TRegister, TRegisterId> builder);
    public TRegister[] get_AllReadRegisters();
    public TRegister[] get_AllWrittenRegisters();
    [CompilerGeneratedAttribute]
public DisassembleArchitecture get_DisassembleArchitecture();
    [CompilerGeneratedAttribute]
public TDisassembleMode get_DisassembleMode();
    public TRegister[] get_ExplicitlyReadRegisters();
    public TRegister[] get_ExplicitlyWrittenRegisters();
    public TGroup[] get_Groups();
    public TRegister[] get_ImplicitlyReadRegisters();
    public TRegister[] get_ImplicitlyWrittenRegisters();
    public bool get_IsDietModeEnabled();
    public bool BelongsToGroup(string instructionGroupName);
    public bool BelongsToGroup(TGroupId instructionGroupId);
    private bool IsDisassembleArchitectureUnsupported();
    public bool IsRegisterExplicitlyRead(string registerName);
    public bool IsRegisterExplicitlyRead(TRegisterId registerId);
    public bool IsRegisterExplicitlyWritten(string registerName);
    public bool IsRegisterExplicitlyWritten(TRegisterId registerId);
    public bool IsRegisterImplicitlyRead(string registerName);
    public bool IsRegisterImplicitlyRead(TRegisterId registerId);
    public bool IsRegisterImplicitlyWritten(string registerName);
    public bool IsRegisterImplicitlyWritten(TRegisterId registerId);
    public bool IsRegisterRead(string registerName);
    public bool IsRegisterRead(TRegisterId registerId);
    public bool IsRegisterWritten(string registerName);
    public bool IsRegisterWritten(TRegisterId registerId);
    private TRegister[] OnExplicitlyReadRegistersLazyInitialization();
    private TRegister[] OnExplicitlyWrittenRegistersLazyInitialization();
}
internal abstract class Gee.External.Capstone.InstructionDetailBuilder`8 : object {
    [CompilerGeneratedAttribute]
private TRegister[] <AllReadRegisters>k__BackingField;
    [CompilerGeneratedAttribute]
private TRegister[] <AllWrittenRegisters>k__BackingField;
    [CompilerGeneratedAttribute]
private DisassembleArchitecture <DisassembleArchitecture>k__BackingField;
    [CompilerGeneratedAttribute]
private TDisassembleMode <DisassembleMode>k__BackingField;
    [CompilerGeneratedAttribute]
private TGroup[] <Groups>k__BackingField;
    [CompilerGeneratedAttribute]
private TRegister[] <ImplicitlyReadRegisters>k__BackingField;
    [CompilerGeneratedAttribute]
private TRegister[] <ImplicitlyWrittenRegisters>k__BackingField;
    internal TRegister[] AllReadRegisters { get; private set; }
    internal TRegister[] AllWrittenRegisters { get; private set; }
    internal DisassembleArchitecture DisassembleArchitecture { get; private set; }
    internal TDisassembleMode DisassembleMode { get; private set; }
    internal TGroup[] Groups { get; private set; }
    internal TRegister[] ImplicitlyReadRegisters { get; private set; }
    internal TRegister[] ImplicitlyWrittenRegisters { get; private set; }
    [CompilerGeneratedAttribute]
internal TRegister[] get_AllReadRegisters();
    [CompilerGeneratedAttribute]
private void set_AllReadRegisters(TRegister[] value);
    [CompilerGeneratedAttribute]
internal TRegister[] get_AllWrittenRegisters();
    [CompilerGeneratedAttribute]
private void set_AllWrittenRegisters(TRegister[] value);
    [CompilerGeneratedAttribute]
internal DisassembleArchitecture get_DisassembleArchitecture();
    [CompilerGeneratedAttribute]
private void set_DisassembleArchitecture(DisassembleArchitecture value);
    [CompilerGeneratedAttribute]
internal TDisassembleMode get_DisassembleMode();
    [CompilerGeneratedAttribute]
private void set_DisassembleMode(TDisassembleMode value);
    [CompilerGeneratedAttribute]
internal TGroup[] get_Groups();
    [CompilerGeneratedAttribute]
private void set_Groups(TGroup[] value);
    [CompilerGeneratedAttribute]
internal TRegister[] get_ImplicitlyReadRegisters();
    [CompilerGeneratedAttribute]
private void set_ImplicitlyReadRegisters(TRegister[] value);
    [CompilerGeneratedAttribute]
internal TRegister[] get_ImplicitlyWrittenRegisters();
    [CompilerGeneratedAttribute]
private void set_ImplicitlyWrittenRegisters(TRegister[] value);
    internal virtual void Build(CapstoneDisassembler disassembler, NativeInstructionHandle hInstruction);
    private protected abstract virtual TDisassembleMode CreateDisassembleMode(NativeDisassembleMode nativeDisassembleMode);
    private protected abstract virtual TGroup CreateInstructionGroup(CapstoneDisassembler disassembler, byte instructionGroupId);
    private protected abstract virtual TRegister CreateRegister(CapstoneDisassembler disassembler, short registerId);
    [CompilerGeneratedAttribute]
internal static void <Build>g__SetAccessedRegisters|28_0(InstructionDetailBuilder`8<TDetail, TDisassembleMode, TGroup, TGroupId, TInstruction, TInstructionId, TRegister, TRegisterId> this, CapstoneDisassembler cDisassembler, NativeInstructionHandle cHInstruction);
    [CompilerGeneratedAttribute]
internal static void <Build>g__SetGroups|28_1(InstructionDetailBuilder`8<TDetail, TDisassembleMode, TGroup, TGroupId, TInstruction, TInstructionId, TRegister, TRegisterId> this, CapstoneDisassembler cDisassembler, NativeInstructionDetail& cNativeInstructionDetail);
    [CompilerGeneratedAttribute]
internal static void <Build>g__SetImplicitlyReadRegisters|28_2(InstructionDetailBuilder`8<TDetail, TDisassembleMode, TGroup, TGroupId, TInstruction, TInstructionId, TRegister, TRegisterId> this, CapstoneDisassembler cDisassembler, NativeInstructionDetail& cNativeInstructionDetail);
    [CompilerGeneratedAttribute]
internal static void <Build>g__SetImplicitlyWrittenRegisters|28_3(InstructionDetailBuilder`8<TDetail, TDisassembleMode, TGroup, TGroupId, TInstruction, TInstructionId, TRegister, TRegisterId> this, CapstoneDisassembler cDisassembler, NativeInstructionDetail& cNativeInstructionDetail);
}
public abstract class Gee.External.Capstone.InstructionGroup`1 : object {
    private string _name;
    [CompilerGeneratedAttribute]
private TId <Id>k__BackingField;
    public TId Id { get; }
    public bool IsDietModeEnabled { get; }
    public string Name { get; }
    private protected InstructionGroup`1(TId id, string name);
    [CompilerGeneratedAttribute]
public TId get_Id();
    public bool get_IsDietModeEnabled();
    public string get_Name();
    public virtual bool Equals(object object);
    public virtual int GetHashCode();
}
public class Gee.External.Capstone.M68K.CapstoneM68KDisassembler : CapstoneDisassembler`8<M68KDisassembleMode, M68KInstruction, M68KInstructionDetail, M68KInstructionGroup, M68KInstructionGroupId, M68KInstructionId, M68KRegister, M68KRegisterId> {
    public CapstoneM68KDisassembler(M68KDisassembleMode disassembleMode);
    private protected virtual M68KInstruction CreateInstruction(NativeInstructionHandle hInstruction);
}
public enum Gee.External.Capstone.M68K.M68KAddressMode : Enum {
    public int value__;
    public static M68KAddressMode Invalid;
    public static M68KAddressMode M68K_AM_REG_DIRECT_DATA;
    public static M68KAddressMode M68K_AM_REG_DIRECT_ADDR;
    public static M68KAddressMode M68K_AM_REGI_ADDR;
    public static M68KAddressMode M68K_AM_REGI_ADDR_POST_INC;
    public static M68KAddressMode M68K_AM_REGI_ADDR_PRE_DEC;
    public static M68KAddressMode M68K_AM_REGI_ADDR_DISP;
    public static M68KAddressMode M68K_AM_AREGI_INDEX_8_BIT_DISP;
    public static M68KAddressMode M68K_AM_AREGI_INDEX_BASE_DISP;
    public static M68KAddressMode M68K_AM_MEMI_POST_INDEX;
    public static M68KAddressMode M68K_AM_MEMI_PRE_INDEX;
    public static M68KAddressMode M68K_AM_PCI_DISP;
    public static M68KAddressMode M68K_AM_PCI_INDEX_8_BIT_DISP;
    public static M68KAddressMode M68K_AM_PCI_INDEX_BASE_DISP;
    public static M68KAddressMode M68K_AM_PC_MEMI_POST_INDEX;
    public static M68KAddressMode M68K_AM_PC_MEMI_PRE_INDEX;
    public static M68KAddressMode M68K_AM_ABSOLUTE_DATA_SHORT;
    public static M68KAddressMode M68K_AM_ABSOLUTE_DATA_LONG;
    public static M68KAddressMode M68K_AM_IMMEDIATE;
    public static M68KAddressMode M68K_AM_BRANCH_DISPLACEMENT;
}
public class Gee.External.Capstone.M68K.M68KBranchDisplacementOperandValue : object {
    [CompilerGeneratedAttribute]
private int <Displacement>k__BackingField;
    [CompilerGeneratedAttribute]
private M68KBranchDisplacementSize <DisplacementSize>k__BackingField;
    public int Displacement { get; }
    public M68KBranchDisplacementSize DisplacementSize { get; }
    internal M68KBranchDisplacementOperandValue(NativeM68KBranchDisplacementOperandValue& nativeBranchDisplacementOperandValue);
    [CompilerGeneratedAttribute]
public int get_Displacement();
    [CompilerGeneratedAttribute]
public M68KBranchDisplacementSize get_DisplacementSize();
}
public enum Gee.External.Capstone.M68K.M68KBranchDisplacementSize : Enum {
    public byte value__;
    public static M68KBranchDisplacementSize Invalid;
    public static M68KBranchDisplacementSize Byte;
    public static M68KBranchDisplacementSize Word;
    public static M68KBranchDisplacementSize Long;
}
public enum Gee.External.Capstone.M68K.M68KCpuOperationSize : Enum {
    public int value__;
    public static M68KCpuOperationSize Invalid;
    public static M68KCpuOperationSize Byte;
    public static M68KCpuOperationSize Word;
    public static M68KCpuOperationSize Long;
}
[FlagsAttribute]
public enum Gee.External.Capstone.M68K.M68KDisassembleMode : Enum {
    public int value__;
    public static M68KDisassembleMode BigEndian;
    public static M68KDisassembleMode M68K000;
    public static M68KDisassembleMode M68K010;
    public static M68KDisassembleMode M68K020;
    public static M68KDisassembleMode M68K030;
    public static M68KDisassembleMode M68K040;
    public static M68KDisassembleMode M68K060;
}
public enum Gee.External.Capstone.M68K.M68KFpuOperationSize : Enum {
    public int value__;
    public static M68KFpuOperationSize Invalid;
    public static M68KFpuOperationSize Single;
    public static M68KFpuOperationSize Double;
    public static M68KFpuOperationSize Extended;
}
public class Gee.External.Capstone.M68K.M68KInstruction : Instruction`8<M68KInstruction, M68KInstructionDetail, M68KDisassembleMode, M68KInstructionGroup, M68KInstructionGroupId, M68KInstructionId, M68KRegister, M68KRegisterId> {
    internal M68KInstruction(M68KInstructionBuilder builder);
    internal static M68KInstruction Create(CapstoneDisassembler disassembler, NativeInstructionHandle hInstruction);
}
internal class Gee.External.Capstone.M68K.M68KInstructionBuilder : InstructionBuilder`8<M68KInstructionDetail, M68KDisassembleMode, M68KInstructionGroup, M68KInstructionGroupId, M68KInstruction, M68KInstructionId, M68KRegister, M68KRegisterId> {
    internal M68KInstruction Create();
    private protected virtual M68KInstructionDetail CreateDetails(CapstoneDisassembler disassembler, NativeInstructionHandle hInstruction);
    private protected virtual M68KDisassembleMode CreateDisassembleMode(NativeDisassembleMode nativeDisassembleMode);
    private protected virtual M68KInstructionId CreateId(int id);
}
public class Gee.External.Capstone.M68K.M68KInstructionDetail : InstructionDetail`8<M68KInstructionDetail, M68KDisassembleMode, M68KInstructionGroup, M68KInstructionGroupId, M68KInstruction, M68KInstructionId, M68KRegister, M68KRegisterId> {
    [CompilerGeneratedAttribute]
private M68KOperand[] <Operands>k__BackingField;
    [CompilerGeneratedAttribute]
private M68KOperationSize <OperationSize>k__BackingField;
    public M68KOperand[] Operands { get; }
    public M68KOperationSize OperationSize { get; }
    internal M68KInstructionDetail(M68KInstructionDetailBuilder builder);
    [CompilerGeneratedAttribute]
public M68KOperand[] get_Operands();
    [CompilerGeneratedAttribute]
public M68KOperationSize get_OperationSize();
    internal static M68KInstructionDetail Create(CapstoneDisassembler disassembler, NativeInstructionHandle hInstruction);
}
internal class Gee.External.Capstone.M68K.M68KInstructionDetailBuilder : InstructionDetailBuilder`8<M68KInstructionDetail, M68KDisassembleMode, M68KInstructionGroup, M68KInstructionGroupId, M68KInstruction, M68KInstructionId, M68KRegister, M68KRegisterId> {
    [CompilerGeneratedAttribute]
private M68KOperand[] <Operands>k__BackingField;
    [CompilerGeneratedAttribute]
private M68KOperationSize <OperationSize>k__BackingField;
    internal M68KOperand[] Operands { get; private set; }
    internal M68KOperationSize OperationSize { get; private set; }
    [CompilerGeneratedAttribute]
internal M68KOperand[] get_Operands();
    [CompilerGeneratedAttribute]
private void set_Operands(M68KOperand[] value);
    [CompilerGeneratedAttribute]
internal M68KOperationSize get_OperationSize();
    [CompilerGeneratedAttribute]
private void set_OperationSize(M68KOperationSize value);
    internal virtual void Build(CapstoneDisassembler disassembler, NativeInstructionHandle hInstruction);
    internal M68KInstructionDetail Create();
    private protected virtual M68KDisassembleMode CreateDisassembleMode(NativeDisassembleMode nativeDisassembleMode);
    private protected virtual M68KInstructionGroup CreateInstructionGroup(CapstoneDisassembler disassembler, byte instructionGroupId);
    private protected virtual M68KRegister CreateRegister(CapstoneDisassembler disassembler, short registerId);
}
public class Gee.External.Capstone.M68K.M68KInstructionGroup : InstructionGroup`1<M68KInstructionGroupId> {
    internal M68KInstructionGroup(M68KInstructionGroupId id, string name);
    internal static M68KInstructionGroup Create(CapstoneDisassembler disassembler, M68KInstructionGroupId id);
}
public enum Gee.External.Capstone.M68K.M68KInstructionGroupId : Enum {
    public int value__;
    public static M68KInstructionGroupId Invalid;
    public static M68KInstructionGroupId M68K_GRP_JUMP;
    public static M68KInstructionGroupId M68K_GRP_RET;
    public static M68KInstructionGroupId M68K_GRP_IRET;
    public static M68KInstructionGroupId M68K_GRP_BRANCH_RELATIVE;
}
public enum Gee.External.Capstone.M68K.M68KInstructionId : Enum {
    public int value__;
    public static M68KInstructionId Invalid;
    public static M68KInstructionId M68K_INS_ABCD;
    public static M68KInstructionId M68K_INS_ADD;
    public static M68KInstructionId M68K_INS_ADDA;
    public static M68KInstructionId M68K_INS_ADDI;
    public static M68KInstructionId M68K_INS_ADDQ;
    public static M68KInstructionId M68K_INS_ADDX;
    public static M68KInstructionId M68K_INS_AND;
    public static M68KInstructionId M68K_INS_ANDI;
    public static M68KInstructionId M68K_INS_ASL;
    public static M68KInstructionId M68K_INS_ASR;
    public static M68KInstructionId M68K_INS_BHS;
    public static M68KInstructionId M68K_INS_BLO;
    public static M68KInstructionId M68K_INS_BHI;
    public static M68KInstructionId M68K_INS_BLS;
    public static M68KInstructionId M68K_INS_BCC;
    public static M68KInstructionId M68K_INS_BCS;
    public static M68KInstructionId M68K_INS_BNE;
    public static M68KInstructionId M68K_INS_BEQ;
    public static M68KInstructionId M68K_INS_BVC;
    public static M68KInstructionId M68K_INS_BVS;
    public static M68KInstructionId M68K_INS_BPL;
    public static M68KInstructionId M68K_INS_BMI;
    public static M68KInstructionId M68K_INS_BGE;
    public static M68KInstructionId M68K_INS_BLT;
    public static M68KInstructionId M68K_INS_BGT;
    public static M68KInstructionId M68K_INS_BLE;
    public static M68KInstructionId M68K_INS_BRA;
    public static M68KInstructionId M68K_INS_BSR;
    public static M68KInstructionId M68K_INS_BCHG;
    public static M68KInstructionId M68K_INS_BCLR;
    public static M68KInstructionId M68K_INS_BSET;
    public static M68KInstructionId M68K_INS_BTST;
    public static M68KInstructionId M68K_INS_BFCHG;
    public static M68KInstructionId M68K_INS_BFCLR;
    public static M68KInstructionId M68K_INS_BFEXTS;
    public static M68KInstructionId M68K_INS_BFEXTU;
    public static M68KInstructionId M68K_INS_BFFFO;
    public static M68KInstructionId M68K_INS_BFINS;
    public static M68KInstructionId M68K_INS_BFSET;
    public static M68KInstructionId M68K_INS_BFTST;
    public static M68KInstructionId M68K_INS_BKPT;
    public static M68KInstructionId M68K_INS_CALLM;
    public static M68KInstructionId M68K_INS_CAS;
    public static M68KInstructionId M68K_INS_CAS2;
    public static M68KInstructionId M68K_INS_CHK;
    public static M68KInstructionId M68K_INS_CHK2;
    public static M68KInstructionId M68K_INS_CLR;
    public static M68KInstructionId M68K_INS_CMP;
    public static M68KInstructionId M68K_INS_CMPA;
    public static M68KInstructionId M68K_INS_CMPI;
    public static M68KInstructionId M68K_INS_CMPM;
    public static M68KInstructionId M68K_INS_CMP2;
    public static M68KInstructionId M68K_INS_CINVL;
    public static M68KInstructionId M68K_INS_CINVP;
    public static M68KInstructionId M68K_INS_CINVA;
    public static M68KInstructionId M68K_INS_CPUSHL;
    public static M68KInstructionId M68K_INS_CPUSHP;
    public static M68KInstructionId M68K_INS_CPUSHA;
    public static M68KInstructionId M68K_INS_DBT;
    public static M68KInstructionId M68K_INS_DBF;
    public static M68KInstructionId M68K_INS_DBHI;
    public static M68KInstructionId M68K_INS_DBLS;
    public static M68KInstructionId M68K_INS_DBCC;
    public static M68KInstructionId M68K_INS_DBCS;
    public static M68KInstructionId M68K_INS_DBNE;
    public static M68KInstructionId M68K_INS_DBEQ;
    public static M68KInstructionId M68K_INS_DBVC;
    public static M68KInstructionId M68K_INS_DBVS;
    public static M68KInstructionId M68K_INS_DBPL;
    public static M68KInstructionId M68K_INS_DBMI;
    public static M68KInstructionId M68K_INS_DBGE;
    public static M68KInstructionId M68K_INS_DBLT;
    public static M68KInstructionId M68K_INS_DBGT;
    public static M68KInstructionId M68K_INS_DBLE;
    public static M68KInstructionId M68K_INS_DBRA;
    public static M68KInstructionId M68K_INS_DIVS;
    public static M68KInstructionId M68K_INS_DIVSL;
    public static M68KInstructionId M68K_INS_DIVU;
    public static M68KInstructionId M68K_INS_DIVUL;
    public static M68KInstructionId M68K_INS_EOR;
    public static M68KInstructionId M68K_INS_EORI;
    public static M68KInstructionId M68K_INS_EXG;
    public static M68KInstructionId M68K_INS_EXT;
    public static M68KInstructionId M68K_INS_EXTB;
    public static M68KInstructionId M68K_INS_FABS;
    public static M68KInstructionId M68K_INS_FSABS;
    public static M68KInstructionId M68K_INS_FDABS;
    public static M68KInstructionId M68K_INS_FACOS;
    public static M68KInstructionId M68K_INS_FADD;
    public static M68KInstructionId M68K_INS_FSADD;
    public static M68KInstructionId M68K_INS_FDADD;
    public static M68KInstructionId M68K_INS_FASIN;
    public static M68KInstructionId M68K_INS_FATAN;
    public static M68KInstructionId M68K_INS_FATANH;
    public static M68KInstructionId M68K_INS_FBF;
    public static M68KInstructionId M68K_INS_FBEQ;
    public static M68KInstructionId M68K_INS_FBOGT;
    public static M68KInstructionId M68K_INS_FBOGE;
    public static M68KInstructionId M68K_INS_FBOLT;
    public static M68KInstructionId M68K_INS_FBOLE;
    public static M68KInstructionId M68K_INS_FBOGL;
    public static M68KInstructionId M68K_INS_FBOR;
    public static M68KInstructionId M68K_INS_FBUN;
    public static M68KInstructionId M68K_INS_FBUEQ;
    public static M68KInstructionId M68K_INS_FBUGT;
    public static M68KInstructionId M68K_INS_FBUGE;
    public static M68KInstructionId M68K_INS_FBULT;
    public static M68KInstructionId M68K_INS_FBULE;
    public static M68KInstructionId M68K_INS_FBNE;
    public static M68KInstructionId M68K_INS_FBT;
    public static M68KInstructionId M68K_INS_FBSF;
    public static M68KInstructionId M68K_INS_FBSEQ;
    public static M68KInstructionId M68K_INS_FBGT;
    public static M68KInstructionId M68K_INS_FBGE;
    public static M68KInstructionId M68K_INS_FBLT;
    public static M68KInstructionId M68K_INS_FBLE;
    public static M68KInstructionId M68K_INS_FBGL;
    public static M68KInstructionId M68K_INS_FBGLE;
    public static M68KInstructionId M68K_INS_FBNGLE;
    public static M68KInstructionId M68K_INS_FBNGL;
    public static M68KInstructionId M68K_INS_FBNLE;
    public static M68KInstructionId M68K_INS_FBNLT;
    public static M68KInstructionId M68K_INS_FBNGE;
    public static M68KInstructionId M68K_INS_FBNGT;
    public static M68KInstructionId M68K_INS_FBSNE;
    public static M68KInstructionId M68K_INS_FBST;
    public static M68KInstructionId M68K_INS_FCMP;
    public static M68KInstructionId M68K_INS_FCOS;
    public static M68KInstructionId M68K_INS_FCOSH;
    public static M68KInstructionId M68K_INS_FDBF;
    public static M68KInstructionId M68K_INS_FDBEQ;
    public static M68KInstructionId M68K_INS_FDBOGT;
    public static M68KInstructionId M68K_INS_FDBOGE;
    public static M68KInstructionId M68K_INS_FDBOLT;
    public static M68KInstructionId M68K_INS_FDBOLE;
    public static M68KInstructionId M68K_INS_FDBOGL;
    public static M68KInstructionId M68K_INS_FDBOR;
    public static M68KInstructionId M68K_INS_FDBUN;
    public static M68KInstructionId M68K_INS_FDBUEQ;
    public static M68KInstructionId M68K_INS_FDBUGT;
    public static M68KInstructionId M68K_INS_FDBUGE;
    public static M68KInstructionId M68K_INS_FDBULT;
    public static M68KInstructionId M68K_INS_FDBULE;
    public static M68KInstructionId M68K_INS_FDBNE;
    public static M68KInstructionId M68K_INS_FDBT;
    public static M68KInstructionId M68K_INS_FDBSF;
    public static M68KInstructionId M68K_INS_FDBSEQ;
    public static M68KInstructionId M68K_INS_FDBGT;
    public static M68KInstructionId M68K_INS_FDBGE;
    public static M68KInstructionId M68K_INS_FDBLT;
    public static M68KInstructionId M68K_INS_FDBLE;
    public static M68KInstructionId M68K_INS_FDBGL;
    public static M68KInstructionId M68K_INS_FDBGLE;
    public static M68KInstructionId M68K_INS_FDBNGLE;
    public static M68KInstructionId M68K_INS_FDBNGL;
    public static M68KInstructionId M68K_INS_FDBNLE;
    public static M68KInstructionId M68K_INS_FDBNLT;
    public static M68KInstructionId M68K_INS_FDBNGE;
    public static M68KInstructionId M68K_INS_FDBNGT;
    public static M68KInstructionId M68K_INS_FDBSNE;
    public static M68KInstructionId M68K_INS_FDBST;
    public static M68KInstructionId M68K_INS_FDIV;
    public static M68KInstructionId M68K_INS_FSDIV;
    public static M68KInstructionId M68K_INS_FDDIV;
    public static M68KInstructionId M68K_INS_FETOX;
    public static M68KInstructionId M68K_INS_FETOXM1;
    public static M68KInstructionId M68K_INS_FGETEXP;
    public static M68KInstructionId M68K_INS_FGETMAN;
    public static M68KInstructionId M68K_INS_FINT;
    public static M68KInstructionId M68K_INS_FINTRZ;
    public static M68KInstructionId M68K_INS_FLOG10;
    public static M68KInstructionId M68K_INS_FLOG2;
    public static M68KInstructionId M68K_INS_FLOGN;
    public static M68KInstructionId M68K_INS_FLOGNP1;
    public static M68KInstructionId M68K_INS_FMOD;
    public static M68KInstructionId M68K_INS_FMOVE;
    public static M68KInstructionId M68K_INS_FSMOVE;
    public static M68KInstructionId M68K_INS_FDMOVE;
    public static M68KInstructionId M68K_INS_FMOVECR;
    public static M68KInstructionId M68K_INS_FMOVEM;
    public static M68KInstructionId M68K_INS_FMUL;
    public static M68KInstructionId M68K_INS_FSMUL;
    public static M68KInstructionId M68K_INS_FDMUL;
    public static M68KInstructionId M68K_INS_FNEG;
    public static M68KInstructionId M68K_INS_FSNEG;
    public static M68KInstructionId M68K_INS_FDNEG;
    public static M68KInstructionId M68K_INS_FNOP;
    public static M68KInstructionId M68K_INS_FREM;
    public static M68KInstructionId M68K_INS_FRESTORE;
    public static M68KInstructionId M68K_INS_FSAVE;
    public static M68KInstructionId M68K_INS_FSCALE;
    public static M68KInstructionId M68K_INS_FSGLDIV;
    public static M68KInstructionId M68K_INS_FSGLMUL;
    public static M68KInstructionId M68K_INS_FSIN;
    public static M68KInstructionId M68K_INS_FSINCOS;
    public static M68KInstructionId M68K_INS_FSINH;
    public static M68KInstructionId M68K_INS_FSQRT;
    public static M68KInstructionId M68K_INS_FSSQRT;
    public static M68KInstructionId M68K_INS_FDSQRT;
    public static M68KInstructionId M68K_INS_FSF;
    public static M68KInstructionId M68K_INS_FSBEQ;
    public static M68KInstructionId M68K_INS_FSOGT;
    public static M68KInstructionId M68K_INS_FSOGE;
    public static M68KInstructionId M68K_INS_FSOLT;
    public static M68KInstructionId M68K_INS_FSOLE;
    public static M68KInstructionId M68K_INS_FSOGL;
    public static M68KInstructionId M68K_INS_FSOR;
    public static M68KInstructionId M68K_INS_FSUN;
    public static M68KInstructionId M68K_INS_FSUEQ;
    public static M68KInstructionId M68K_INS_FSUGT;
    public static M68KInstructionId M68K_INS_FSUGE;
    public static M68KInstructionId M68K_INS_FSULT;
    public static M68KInstructionId M68K_INS_FSULE;
    public static M68KInstructionId M68K_INS_FSNE;
    public static M68KInstructionId M68K_INS_FST;
    public static M68KInstructionId M68K_INS_FSSF;
    public static M68KInstructionId M68K_INS_FSSEQ;
    public static M68KInstructionId M68K_INS_FSGT;
    public static M68KInstructionId M68K_INS_FSGE;
    public static M68KInstructionId M68K_INS_FSLT;
    public static M68KInstructionId M68K_INS_FSLE;
    public static M68KInstructionId M68K_INS_FSGL;
    public static M68KInstructionId M68K_INS_FSGLE;
    public static M68KInstructionId M68K_INS_FSNGLE;
    public static M68KInstructionId M68K_INS_FSNGL;
    public static M68KInstructionId M68K_INS_FSNLE;
    public static M68KInstructionId M68K_INS_FSNLT;
    public static M68KInstructionId M68K_INS_FSNGE;
    public static M68KInstructionId M68K_INS_FSNGT;
    public static M68KInstructionId M68K_INS_FSSNE;
    public static M68KInstructionId M68K_INS_FSST;
    public static M68KInstructionId M68K_INS_FSUB;
    public static M68KInstructionId M68K_INS_FSSUB;
    public static M68KInstructionId M68K_INS_FDSUB;
    public static M68KInstructionId M68K_INS_FTAN;
    public static M68KInstructionId M68K_INS_FTANH;
    public static M68KInstructionId M68K_INS_FTENTOX;
    public static M68KInstructionId M68K_INS_FTRAPF;
    public static M68KInstructionId M68K_INS_FTRAPEQ;
    public static M68KInstructionId M68K_INS_FTRAPOGT;
    public static M68KInstructionId M68K_INS_FTRAPOGE;
    public static M68KInstructionId M68K_INS_FTRAPOLT;
    public static M68KInstructionId M68K_INS_FTRAPOLE;
    public static M68KInstructionId M68K_INS_FTRAPOGL;
    public static M68KInstructionId M68K_INS_FTRAPOR;
    public static M68KInstructionId M68K_INS_FTRAPUN;
    public static M68KInstructionId M68K_INS_FTRAPUEQ;
    public static M68KInstructionId M68K_INS_FTRAPUGT;
    public static M68KInstructionId M68K_INS_FTRAPUGE;
    public static M68KInstructionId M68K_INS_FTRAPULT;
    public static M68KInstructionId M68K_INS_FTRAPULE;
    public static M68KInstructionId M68K_INS_FTRAPNE;
    public static M68KInstructionId M68K_INS_FTRAPT;
    public static M68KInstructionId M68K_INS_FTRAPSF;
    public static M68KInstructionId M68K_INS_FTRAPSEQ;
    public static M68KInstructionId M68K_INS_FTRAPGT;
    public static M68KInstructionId M68K_INS_FTRAPGE;
    public static M68KInstructionId M68K_INS_FTRAPLT;
    public static M68KInstructionId M68K_INS_FTRAPLE;
    public static M68KInstructionId M68K_INS_FTRAPGL;
    public static M68KInstructionId M68K_INS_FTRAPGLE;
    public static M68KInstructionId M68K_INS_FTRAPNGLE;
    public static M68KInstructionId M68K_INS_FTRAPNGL;
    public static M68KInstructionId M68K_INS_FTRAPNLE;
    public static M68KInstructionId M68K_INS_FTRAPNLT;
    public static M68KInstructionId M68K_INS_FTRAPNGE;
    public static M68KInstructionId M68K_INS_FTRAPNGT;
    public static M68KInstructionId M68K_INS_FTRAPSNE;
    public static M68KInstructionId M68K_INS_FTRAPST;
    public static M68KInstructionId M68K_INS_FTST;
    public static M68KInstructionId M68K_INS_FTWOTOX;
    public static M68KInstructionId M68K_INS_HALT;
    public static M68KInstructionId M68K_INS_ILLEGAL;
    public static M68KInstructionId M68K_INS_JMP;
    public static M68KInstructionId M68K_INS_JSR;
    public static M68KInstructionId M68K_INS_LEA;
    public static M68KInstructionId M68K_INS_LINK;
    public static M68KInstructionId M68K_INS_LPSTOP;
    public static M68KInstructionId M68K_INS_LSL;
    public static M68KInstructionId M68K_INS_LSR;
    public static M68KInstructionId M68K_INS_MOVE;
    public static M68KInstructionId M68K_INS_MOVEA;
    public static M68KInstructionId M68K_INS_MOVEC;
    public static M68KInstructionId M68K_INS_MOVEM;
    public static M68KInstructionId M68K_INS_MOVEP;
    public static M68KInstructionId M68K_INS_MOVEQ;
    public static M68KInstructionId M68K_INS_MOVES;
    public static M68KInstructionId M68K_INS_MOVE16;
    public static M68KInstructionId M68K_INS_MULS;
    public static M68KInstructionId M68K_INS_MULU;
    public static M68KInstructionId M68K_INS_NBCD;
    public static M68KInstructionId M68K_INS_NEG;
    public static M68KInstructionId M68K_INS_NEGX;
    public static M68KInstructionId M68K_INS_NOP;
    public static M68KInstructionId M68K_INS_NOT;
    public static M68KInstructionId M68K_INS_OR;
    public static M68KInstructionId M68K_INS_ORI;
    public static M68KInstructionId M68K_INS_PACK;
    public static M68KInstructionId M68K_INS_PEA;
    public static M68KInstructionId M68K_INS_PFLUSH;
    public static M68KInstructionId M68K_INS_PFLUSHA;
    public static M68KInstructionId M68K_INS_PFLUSHAN;
    public static M68KInstructionId M68K_INS_PFLUSHN;
    public static M68KInstructionId M68K_INS_PLOADR;
    public static M68KInstructionId M68K_INS_PLOADW;
    public static M68KInstructionId M68K_INS_PLPAR;
    public static M68KInstructionId M68K_INS_PLPAW;
    public static M68KInstructionId M68K_INS_PMOVE;
    public static M68KInstructionId M68K_INS_PMOVEFD;
    public static M68KInstructionId M68K_INS_PTESTR;
    public static M68KInstructionId M68K_INS_PTESTW;
    public static M68KInstructionId M68K_INS_PULSE;
    public static M68KInstructionId M68K_INS_REMS;
    public static M68KInstructionId M68K_INS_REMU;
    public static M68KInstructionId M68K_INS_RESET;
    public static M68KInstructionId M68K_INS_ROL;
    public static M68KInstructionId M68K_INS_ROR;
    public static M68KInstructionId M68K_INS_ROXL;
    public static M68KInstructionId M68K_INS_ROXR;
    public static M68KInstructionId M68K_INS_RTD;
    public static M68KInstructionId M68K_INS_RTE;
    public static M68KInstructionId M68K_INS_RTM;
    public static M68KInstructionId M68K_INS_RTR;
    public static M68KInstructionId M68K_INS_RTS;
    public static M68KInstructionId M68K_INS_SBCD;
    public static M68KInstructionId M68K_INS_ST;
    public static M68KInstructionId M68K_INS_SF;
    public static M68KInstructionId M68K_INS_SHI;
    public static M68KInstructionId M68K_INS_SLS;
    public static M68KInstructionId M68K_INS_SCC;
    public static M68KInstructionId M68K_INS_SHS;
    public static M68KInstructionId M68K_INS_SCS;
    public static M68KInstructionId M68K_INS_SLO;
    public static M68KInstructionId M68K_INS_SNE;
    public static M68KInstructionId M68K_INS_SEQ;
    public static M68KInstructionId M68K_INS_SVC;
    public static M68KInstructionId M68K_INS_SVS;
    public static M68KInstructionId M68K_INS_SPL;
    public static M68KInstructionId M68K_INS_SMI;
    public static M68KInstructionId M68K_INS_SGE;
    public static M68KInstructionId M68K_INS_SLT;
    public static M68KInstructionId M68K_INS_SGT;
    public static M68KInstructionId M68K_INS_SLE;
    public static M68KInstructionId M68K_INS_STOP;
    public static M68KInstructionId M68K_INS_SUB;
    public static M68KInstructionId M68K_INS_SUBA;
    public static M68KInstructionId M68K_INS_SUBI;
    public static M68KInstructionId M68K_INS_SUBQ;
    public static M68KInstructionId M68K_INS_SUBX;
    public static M68KInstructionId M68K_INS_SWAP;
    public static M68KInstructionId M68K_INS_TAS;
    public static M68KInstructionId M68K_INS_TRAP;
    public static M68KInstructionId M68K_INS_TRAPV;
    public static M68KInstructionId M68K_INS_TRAPT;
    public static M68KInstructionId M68K_INS_TRAPF;
    public static M68KInstructionId M68K_INS_TRAPHI;
    public static M68KInstructionId M68K_INS_TRAPLS;
    public static M68KInstructionId M68K_INS_TRAPCC;
    public static M68KInstructionId M68K_INS_TRAPHS;
    public static M68KInstructionId M68K_INS_TRAPCS;
    public static M68KInstructionId M68K_INS_TRAPLO;
    public static M68KInstructionId M68K_INS_TRAPNE;
    public static M68KInstructionId M68K_INS_TRAPEQ;
    public static M68KInstructionId M68K_INS_TRAPVC;
    public static M68KInstructionId M68K_INS_TRAPVS;
    public static M68KInstructionId M68K_INS_TRAPPL;
    public static M68KInstructionId M68K_INS_TRAPMI;
    public static M68KInstructionId M68K_INS_TRAPGE;
    public static M68KInstructionId M68K_INS_TRAPLT;
    public static M68KInstructionId M68K_INS_TRAPGT;
    public static M68KInstructionId M68K_INS_TRAPLE;
    public static M68KInstructionId M68K_INS_TST;
    public static M68KInstructionId M68K_INS_UNLK;
    public static M68KInstructionId M68K_INS_UNPK;
}
public class Gee.External.Capstone.M68K.M68KMemoryOperandValue : object {
    [CompilerGeneratedAttribute]
private M68KRegister <Base>k__BackingField;
    [CompilerGeneratedAttribute]
private byte <BitField>k__BackingField;
    [CompilerGeneratedAttribute]
private short <Displacement>k__BackingField;
    [CompilerGeneratedAttribute]
private M68KRegister <Index>k__BackingField;
    [CompilerGeneratedAttribute]
private byte <IndexSize>k__BackingField;
    [CompilerGeneratedAttribute]
private M68KRegister <IndirectBase>k__BackingField;
    [CompilerGeneratedAttribute]
private int <IndirectDisplacement>k__BackingField;
    [CompilerGeneratedAttribute]
private byte <Offset>k__BackingField;
    [CompilerGeneratedAttribute]
private int <OutDisplacement>k__BackingField;
    [CompilerGeneratedAttribute]
private byte <Scale>k__BackingField;
    [CompilerGeneratedAttribute]
private byte <Width>k__BackingField;
    public M68KRegister Base { get; }
    public byte BitField { get; }
    public short Displacement { get; }
    public M68KRegister Index { get; }
    public byte IndexSize { get; }
    public M68KRegister IndirectBase { get; }
    public int IndirectDisplacement { get; }
    public byte Offset { get; }
    public int OutDisplacement { get; }
    public byte Scale { get; }
    public byte Width { get; }
    internal M68KMemoryOperandValue(CapstoneDisassembler disassembler, NativeM68KMemoryOperandValue& nativeMemoryOperandValue);
    [CompilerGeneratedAttribute]
public M68KRegister get_Base();
    [CompilerGeneratedAttribute]
public byte get_BitField();
    [CompilerGeneratedAttribute]
public short get_Displacement();
    [CompilerGeneratedAttribute]
public M68KRegister get_Index();
    [CompilerGeneratedAttribute]
public byte get_IndexSize();
    [CompilerGeneratedAttribute]
public M68KRegister get_IndirectBase();
    [CompilerGeneratedAttribute]
public int get_IndirectDisplacement();
    [CompilerGeneratedAttribute]
public byte get_Offset();
    [CompilerGeneratedAttribute]
public int get_OutDisplacement();
    [CompilerGeneratedAttribute]
public byte get_Scale();
    [CompilerGeneratedAttribute]
public byte get_Width();
}
public class Gee.External.Capstone.M68K.M68KOperand : object {
    private M68KBranchDisplacementOperandValue _branchDisplacement;
    private double _dImmediate;
    private long _immediate;
    private M68KMemoryOperandValue _memory;
    private M68KRegister _register;
    private int _registerBits;
    private Tuple`2<M68KRegister, M68KRegister> _registerPair;
    private float _sImmediate;
    [CompilerGeneratedAttribute]
private M68KAddressMode <AddressMode>k__BackingField;
    [CompilerGeneratedAttribute]
private M68KOperandType <Type>k__BackingField;
    public M68KAddressMode AddressMode { get; }
    public M68KBranchDisplacementOperandValue BranchDisplacement { get; }
    public double DImmediate { get; }
    public long Immediate { get; }
    public M68KMemoryOperandValue Memory { get; }
    public M68KRegister Register { get; }
    public int RegisterBits { get; }
    public Tuple`2<M68KRegister, M68KRegister> RegisterPair { get; }
    public float SImmediate { get; }
    public M68KOperandType Type { get; }
    internal M68KOperand(CapstoneDisassembler disassembler, NativeM68KOperand& nativeOperand);
    [CompilerGeneratedAttribute]
public M68KAddressMode get_AddressMode();
    public M68KBranchDisplacementOperandValue get_BranchDisplacement();
    public double get_DImmediate();
    public long get_Immediate();
    public M68KMemoryOperandValue get_Memory();
    public M68KRegister get_Register();
    public int get_RegisterBits();
    public Tuple`2<M68KRegister, M68KRegister> get_RegisterPair();
    public float get_SImmediate();
    [CompilerGeneratedAttribute]
public M68KOperandType get_Type();
    internal static M68KOperand[] Create(CapstoneDisassembler disassembler, NativeM68KInstructionDetail& nativeInstructionDetail);
}
public enum Gee.External.Capstone.M68K.M68KOperandType : Enum {
    public int value__;
    public static M68KOperandType Invalid;
    public static M68KOperandType Register;
    public static M68KOperandType Immediate;
    public static M68KOperandType Memory;
    public static M68KOperandType SImmediate;
    public static M68KOperandType DImmediate;
    public static M68KOperandType RegisterBits;
    public static M68KOperandType RegisterPair;
    public static M68KOperandType BranchDisplacement;
}
public class Gee.External.Capstone.M68K.M68KOperationSize : object {
    private M68KCpuOperationSize _cpuOperationSize;
    private M68KFpuOperationSize _fpuOperationSize;
    [CompilerGeneratedAttribute]
private M68KOperationSizeType <Type>k__BackingField;
    public M68KCpuOperationSize CpuOperationSize { get; }
    public M68KFpuOperationSize FpuOperationSize { get; }
    public M68KOperationSizeType Type { get; }
    internal M68KOperationSize(NativeM68KOperationSize& nativeOperationSize);
    public M68KCpuOperationSize get_CpuOperationSize();
    public M68KFpuOperationSize get_FpuOperationSize();
    [CompilerGeneratedAttribute]
public M68KOperationSizeType get_Type();
}
public enum Gee.External.Capstone.M68K.M68KOperationSizeType : Enum {
    public int value__;
    public static M68KOperationSizeType Invalid;
    public static M68KOperationSizeType Cpu;
    public static M68KOperationSizeType Fpu;
}
public class Gee.External.Capstone.M68K.M68KRegister : Register`1<M68KRegisterId> {
    internal M68KRegister(M68KRegisterId id, string name);
    internal static M68KRegister TryCreate(CapstoneDisassembler disassembler, M68KRegisterId id);
}
public enum Gee.External.Capstone.M68K.M68KRegisterId : Enum {
    public int value__;
    public static M68KRegisterId Invalid;
    public static M68KRegisterId M68K_REG_D0;
    public static M68KRegisterId M68K_REG_D1;
    public static M68KRegisterId M68K_REG_D2;
    public static M68KRegisterId M68K_REG_D3;
    public static M68KRegisterId M68K_REG_D4;
    public static M68KRegisterId M68K_REG_D5;
    public static M68KRegisterId M68K_REG_D6;
    public static M68KRegisterId M68K_REG_D7;
    public static M68KRegisterId M68K_REG_A0;
    public static M68KRegisterId M68K_REG_A1;
    public static M68KRegisterId M68K_REG_A2;
    public static M68KRegisterId M68K_REG_A3;
    public static M68KRegisterId M68K_REG_A4;
    public static M68KRegisterId M68K_REG_A5;
    public static M68KRegisterId M68K_REG_A6;
    public static M68KRegisterId M68K_REG_A7;
    public static M68KRegisterId M68K_REG_FP0;
    public static M68KRegisterId M68K_REG_FP1;
    public static M68KRegisterId M68K_REG_FP2;
    public static M68KRegisterId M68K_REG_FP3;
    public static M68KRegisterId M68K_REG_FP4;
    public static M68KRegisterId M68K_REG_FP5;
    public static M68KRegisterId M68K_REG_FP6;
    public static M68KRegisterId M68K_REG_FP7;
    public static M68KRegisterId M68K_REG_PC;
    public static M68KRegisterId M68K_REG_SR;
    public static M68KRegisterId M68K_REG_CCR;
    public static M68KRegisterId M68K_REG_SFC;
    public static M68KRegisterId M68K_REG_DFC;
    public static M68KRegisterId M68K_REG_USP;
    public static M68KRegisterId M68K_REG_VBR;
    public static M68KRegisterId M68K_REG_CACR;
    public static M68KRegisterId M68K_REG_CAAR;
    public static M68KRegisterId M68K_REG_MSP;
    public static M68KRegisterId M68K_REG_ISP;
    public static M68KRegisterId M68K_REG_TC;
    public static M68KRegisterId M68K_REG_ITT0;
    public static M68KRegisterId M68K_REG_ITT1;
    public static M68KRegisterId M68K_REG_DTT0;
    public static M68KRegisterId M68K_REG_DTT1;
    public static M68KRegisterId M68K_REG_MMUSR;
    public static M68KRegisterId M68K_REG_URP;
    public static M68KRegisterId M68K_REG_SRP;
    public static M68KRegisterId M68K_REG_FPCR;
    public static M68KRegisterId M68K_REG_FPSR;
    public static M68KRegisterId M68K_REG_FPIAR;
}
internal class Gee.External.Capstone.M68K.NativeM68KBranchDisplacementOperandValue : ValueType {
    public int Displacement;
    public M68KBranchDisplacementSize DisplacementSize;
}
internal class Gee.External.Capstone.M68K.NativeM68KInstructionDetail : ValueType {
    public NativeM68KOperand[] Operands;
    public NativeM68KOperationSize OperationSize;
    public byte OperandCount;
}
internal class Gee.External.Capstone.M68K.NativeM68KMemoryOperandValue : ValueType {
    public M68KRegisterId Base;
    public M68KRegisterId Index;
    public M68KRegisterId IndirectBase;
    public int IndirectDisplacement;
    public int OutDisplacement;
    public short Displacement;
    public byte Scale;
    public byte BitField;
    public byte Width;
    public byte Offset;
    public byte IndexSize;
}
internal class Gee.External.Capstone.M68K.NativeM68KOperand : ValueType {
    public NativeM68KOperandValue Value;
    public NativeM68KMemoryOperandValue Memory;
    public NativeM68KBranchDisplacementOperandValue BranchDisplacement;
    public int RegisterBits;
    public M68KOperandType Type;
    public M68KAddressMode AddressMode;
}
internal class Gee.External.Capstone.M68K.NativeM68KOperandValue : ValueType {
    public long Immediate;
    public double DImmediate;
    public float SImmediate;
    public M68KRegisterId Register;
    public NativeM68KRegisterPairOperandValue RegisterPair;
}
internal class Gee.External.Capstone.M68K.NativeM68KOperationSize : ValueType {
    public M68KOperationSizeType Type;
    public NativeM68KOperationSizeValue Value;
}
internal class Gee.External.Capstone.M68K.NativeM68KOperationSizeValue : ValueType {
    public M68KCpuOperationSize CpuOperationSize;
    public M68KFpuOperationSize FpuOperationSize;
}
internal class Gee.External.Capstone.M68K.NativeM68KRegisterPairOperandValue : ValueType {
    public M68KRegisterId Register0;
    public M68KRegisterId Register1;
}
internal static class Gee.External.Capstone.MarshalExtension : object {
    internal static IntPtr AllocHGlobal();
    internal static IntPtr AllocHGlobal(int size);
    internal static T FreePtrToStructure(IntPtr p);
    internal static T PtrToStructure(IntPtr p);
    internal static T[] PtrToStructure(IntPtr p, int size);
    internal static int SizeOf();
}
public class Gee.External.Capstone.Mips.CapstoneMipsDisassembler : CapstoneDisassembler`8<MipsDisassembleMode, MipsInstruction, MipsInstructionDetail, MipsInstructionGroup, MipsInstructionGroupId, MipsInstructionId, MipsRegister, MipsRegisterId> {
    public CapstoneMipsDisassembler(MipsDisassembleMode disassembleMode);
    private protected virtual MipsInstruction CreateInstruction(NativeInstructionHandle hInstruction);
}
[FlagsAttribute]
public enum Gee.External.Capstone.Mips.MipsDisassembleMode : Enum {
    public int value__;
    public static MipsDisassembleMode BigEndian;
    public static MipsDisassembleMode Bit32;
    public static MipsDisassembleMode Bit64;
    public static MipsDisassembleMode LittleEndian;
    public static MipsDisassembleMode Micro;
    public static MipsDisassembleMode Mips2;
    public static MipsDisassembleMode Mips3;
    public static MipsDisassembleMode Mips32R6;
}
public class Gee.External.Capstone.Mips.MipsInstruction : Instruction`8<MipsInstruction, MipsInstructionDetail, MipsDisassembleMode, MipsInstructionGroup, MipsInstructionGroupId, MipsInstructionId, MipsRegister, MipsRegisterId> {
    internal MipsInstruction(MipsInstructionBuilder builder);
    internal static MipsInstruction Create(CapstoneDisassembler disassembler, NativeInstructionHandle hInstruction);
}
internal class Gee.External.Capstone.Mips.MipsInstructionBuilder : InstructionBuilder`8<MipsInstructionDetail, MipsDisassembleMode, MipsInstructionGroup, MipsInstructionGroupId, MipsInstruction, MipsInstructionId, MipsRegister, MipsRegisterId> {
    internal MipsInstruction Create();
    private protected virtual MipsInstructionDetail CreateDetails(CapstoneDisassembler disassembler, NativeInstructionHandle hInstruction);
    private protected virtual MipsDisassembleMode CreateDisassembleMode(NativeDisassembleMode nativeDisassembleMode);
    private protected virtual MipsInstructionId CreateId(int id);
}
public class Gee.External.Capstone.Mips.MipsInstructionDetail : InstructionDetail`8<MipsInstructionDetail, MipsDisassembleMode, MipsInstructionGroup, MipsInstructionGroupId, MipsInstruction, MipsInstructionId, MipsRegister, MipsRegisterId> {
    [CompilerGeneratedAttribute]
private MipsOperand[] <Operands>k__BackingField;
    public MipsOperand[] Operands { get; }
    internal MipsInstructionDetail(MipsInstructionDetailBuilder builder);
    [CompilerGeneratedAttribute]
public MipsOperand[] get_Operands();
    internal static MipsInstructionDetail Create(CapstoneDisassembler disassembler, NativeInstructionHandle hInstruction);
}
internal class Gee.External.Capstone.Mips.MipsInstructionDetailBuilder : InstructionDetailBuilder`8<MipsInstructionDetail, MipsDisassembleMode, MipsInstructionGroup, MipsInstructionGroupId, MipsInstruction, MipsInstructionId, MipsRegister, MipsRegisterId> {
    [CompilerGeneratedAttribute]
private MipsOperand[] <Operands>k__BackingField;
    internal MipsOperand[] Operands { get; private set; }
    [CompilerGeneratedAttribute]
internal MipsOperand[] get_Operands();
    [CompilerGeneratedAttribute]
private void set_Operands(MipsOperand[] value);
    internal virtual void Build(CapstoneDisassembler disassembler, NativeInstructionHandle hInstruction);
    internal MipsInstructionDetail Create();
    private protected virtual MipsDisassembleMode CreateDisassembleMode(NativeDisassembleMode nativeDisassembleMode);
    private protected virtual MipsInstructionGroup CreateInstructionGroup(CapstoneDisassembler disassembler, byte instructionGroupId);
    private protected virtual MipsRegister CreateRegister(CapstoneDisassembler disassembler, short registerId);
}
public class Gee.External.Capstone.Mips.MipsInstructionGroup : InstructionGroup`1<MipsInstructionGroupId> {
    internal MipsInstructionGroup(MipsInstructionGroupId id, string name);
    internal static MipsInstructionGroup Create(CapstoneDisassembler disassembler, MipsInstructionGroupId id);
}
public enum Gee.External.Capstone.Mips.MipsInstructionGroupId : Enum {
    public int value__;
    public static MipsInstructionGroupId Invalid;
    public static MipsInstructionGroupId MIPS_GRP_JUMP;
    public static MipsInstructionGroupId MIPS_GRP_CALL;
    public static MipsInstructionGroupId MIPS_GRP_RET;
    public static MipsInstructionGroupId MIPS_GRP_INT;
    public static MipsInstructionGroupId MIPS_GRP_IRET;
    public static MipsInstructionGroupId MIPS_GRP_PRIVILEGE;
    public static MipsInstructionGroupId MIPS_GRP_BRANCH_RELATIVE;
    public static MipsInstructionGroupId MIPS_GRP_BITCOUNT;
    public static MipsInstructionGroupId MIPS_GRP_DSP;
    public static MipsInstructionGroupId MIPS_GRP_DSPR2;
    public static MipsInstructionGroupId MIPS_GRP_FPIDX;
    public static MipsInstructionGroupId MIPS_GRP_MSA;
    public static MipsInstructionGroupId MIPS_GRP_MIPS32R2;
    public static MipsInstructionGroupId MIPS_GRP_MIPS64;
    public static MipsInstructionGroupId MIPS_GRP_MIPS64R2;
    public static MipsInstructionGroupId MIPS_GRP_SEINREG;
    public static MipsInstructionGroupId MIPS_GRP_STDENC;
    public static MipsInstructionGroupId MIPS_GRP_SWAP;
    public static MipsInstructionGroupId MIPS_GRP_MICROMIPS;
    public static MipsInstructionGroupId MIPS_GRP_MIPS16MODE;
    public static MipsInstructionGroupId MIPS_GRP_FP64BIT;
    public static MipsInstructionGroupId MIPS_GRP_NONANSFPMATH;
    public static MipsInstructionGroupId MIPS_GRP_NOTFP64BIT;
    public static MipsInstructionGroupId MIPS_GRP_NOTINMICROMIPS;
    public static MipsInstructionGroupId MIPS_GRP_NOTNACL;
    public static MipsInstructionGroupId MIPS_GRP_NOTMIPS32R6;
    public static MipsInstructionGroupId MIPS_GRP_NOTMIPS64R6;
    public static MipsInstructionGroupId MIPS_GRP_CNMIPS;
    public static MipsInstructionGroupId MIPS_GRP_MIPS32;
    public static MipsInstructionGroupId MIPS_GRP_MIPS32R6;
    public static MipsInstructionGroupId MIPS_GRP_MIPS64R6;
    public static MipsInstructionGroupId MIPS_GRP_MIPS2;
    public static MipsInstructionGroupId MIPS_GRP_MIPS3;
    public static MipsInstructionGroupId MIPS_GRP_MIPS3_32;
    public static MipsInstructionGroupId MIPS_GRP_MIPS3_32R2;
    public static MipsInstructionGroupId MIPS_GRP_MIPS4_32;
    public static MipsInstructionGroupId MIPS_GRP_MIPS4_32R2;
    public static MipsInstructionGroupId MIPS_GRP_MIPS5_32R2;
    public static MipsInstructionGroupId MIPS_GRP_GP32BIT;
    public static MipsInstructionGroupId MIPS_GRP_GP64BIT;
}
public enum Gee.External.Capstone.Mips.MipsInstructionId : Enum {
    public int value__;
    public static MipsInstructionId Invalid;
    public static MipsInstructionId MIPS_INS_ABSQ_S;
    public static MipsInstructionId MIPS_INS_ADD;
    public static MipsInstructionId MIPS_INS_ADDIUPC;
    public static MipsInstructionId MIPS_INS_ADDIUR1SP;
    public static MipsInstructionId MIPS_INS_ADDIUR2;
    public static MipsInstructionId MIPS_INS_ADDIUS5;
    public static MipsInstructionId MIPS_INS_ADDIUSP;
    public static MipsInstructionId MIPS_INS_ADDQH;
    public static MipsInstructionId MIPS_INS_ADDQH_R;
    public static MipsInstructionId MIPS_INS_ADDQ;
    public static MipsInstructionId MIPS_INS_ADDQ_S;
    public static MipsInstructionId MIPS_INS_ADDSC;
    public static MipsInstructionId MIPS_INS_ADDS_A;
    public static MipsInstructionId MIPS_INS_ADDS_S;
    public static MipsInstructionId MIPS_INS_ADDS_U;
    public static MipsInstructionId MIPS_INS_ADDU16;
    public static MipsInstructionId MIPS_INS_ADDUH;
    public static MipsInstructionId MIPS_INS_ADDUH_R;
    public static MipsInstructionId MIPS_INS_ADDU;
    public static MipsInstructionId MIPS_INS_ADDU_S;
    public static MipsInstructionId MIPS_INS_ADDVI;
    public static MipsInstructionId MIPS_INS_ADDV;
    public static MipsInstructionId MIPS_INS_ADDWC;
    public static MipsInstructionId MIPS_INS_ADD_A;
    public static MipsInstructionId MIPS_INS_ADDI;
    public static MipsInstructionId MIPS_INS_ADDIU;
    public static MipsInstructionId MIPS_INS_ALIGN;
    public static MipsInstructionId MIPS_INS_ALUIPC;
    public static MipsInstructionId MIPS_INS_AND;
    public static MipsInstructionId MIPS_INS_AND16;
    public static MipsInstructionId MIPS_INS_ANDI16;
    public static MipsInstructionId MIPS_INS_ANDI;
    public static MipsInstructionId MIPS_INS_APPEND;
    public static MipsInstructionId MIPS_INS_ASUB_S;
    public static MipsInstructionId MIPS_INS_ASUB_U;
    public static MipsInstructionId MIPS_INS_AUI;
    public static MipsInstructionId MIPS_INS_AUIPC;
    public static MipsInstructionId MIPS_INS_AVER_S;
    public static MipsInstructionId MIPS_INS_AVER_U;
    public static MipsInstructionId MIPS_INS_AVE_S;
    public static MipsInstructionId MIPS_INS_AVE_U;
    public static MipsInstructionId MIPS_INS_B16;
    public static MipsInstructionId MIPS_INS_BADDU;
    public static MipsInstructionId MIPS_INS_BAL;
    public static MipsInstructionId MIPS_INS_BALC;
    public static MipsInstructionId MIPS_INS_BALIGN;
    public static MipsInstructionId MIPS_INS_BBIT0;
    public static MipsInstructionId MIPS_INS_BBIT032;
    public static MipsInstructionId MIPS_INS_BBIT1;
    public static MipsInstructionId MIPS_INS_BBIT132;
    public static MipsInstructionId MIPS_INS_BC;
    public static MipsInstructionId MIPS_INS_BC0F;
    public static MipsInstructionId MIPS_INS_BC0FL;
    public static MipsInstructionId MIPS_INS_BC0T;
    public static MipsInstructionId MIPS_INS_BC0TL;
    public static MipsInstructionId MIPS_INS_BC1EQZ;
    public static MipsInstructionId MIPS_INS_BC1F;
    public static MipsInstructionId MIPS_INS_BC1FL;
    public static MipsInstructionId MIPS_INS_BC1NEZ;
    public static MipsInstructionId MIPS_INS_BC1T;
    public static MipsInstructionId MIPS_INS_BC1TL;
    public static MipsInstructionId MIPS_INS_BC2EQZ;
    public static MipsInstructionId MIPS_INS_BC2F;
    public static MipsInstructionId MIPS_INS_BC2FL;
    public static MipsInstructionId MIPS_INS_BC2NEZ;
    public static MipsInstructionId MIPS_INS_BC2T;
    public static MipsInstructionId MIPS_INS_BC2TL;
    public static MipsInstructionId MIPS_INS_BC3F;
    public static MipsInstructionId MIPS_INS_BC3FL;
    public static MipsInstructionId MIPS_INS_BC3T;
    public static MipsInstructionId MIPS_INS_BC3TL;
    public static MipsInstructionId MIPS_INS_BCLRI;
    public static MipsInstructionId MIPS_INS_BCLR;
    public static MipsInstructionId MIPS_INS_BEQ;
    public static MipsInstructionId MIPS_INS_BEQC;
    public static MipsInstructionId MIPS_INS_BEQL;
    public static MipsInstructionId MIPS_INS_BEQZ16;
    public static MipsInstructionId MIPS_INS_BEQZALC;
    public static MipsInstructionId MIPS_INS_BEQZC;
    public static MipsInstructionId MIPS_INS_BGEC;
    public static MipsInstructionId MIPS_INS_BGEUC;
    public static MipsInstructionId MIPS_INS_BGEZ;
    public static MipsInstructionId MIPS_INS_BGEZAL;
    public static MipsInstructionId MIPS_INS_BGEZALC;
    public static MipsInstructionId MIPS_INS_BGEZALL;
    public static MipsInstructionId MIPS_INS_BGEZALS;
    public static MipsInstructionId MIPS_INS_BGEZC;
    public static MipsInstructionId MIPS_INS_BGEZL;
    public static MipsInstructionId MIPS_INS_BGTZ;
    public static MipsInstructionId MIPS_INS_BGTZALC;
    public static MipsInstructionId MIPS_INS_BGTZC;
    public static MipsInstructionId MIPS_INS_BGTZL;
    public static MipsInstructionId MIPS_INS_BINSLI;
    public static MipsInstructionId MIPS_INS_BINSL;
    public static MipsInstructionId MIPS_INS_BINSRI;
    public static MipsInstructionId MIPS_INS_BINSR;
    public static MipsInstructionId MIPS_INS_BITREV;
    public static MipsInstructionId MIPS_INS_BITSWAP;
    public static MipsInstructionId MIPS_INS_BLEZ;
    public static MipsInstructionId MIPS_INS_BLEZALC;
    public static MipsInstructionId MIPS_INS_BLEZC;
    public static MipsInstructionId MIPS_INS_BLEZL;
    public static MipsInstructionId MIPS_INS_BLTC;
    public static MipsInstructionId MIPS_INS_BLTUC;
    public static MipsInstructionId MIPS_INS_BLTZ;
    public static MipsInstructionId MIPS_INS_BLTZAL;
    public static MipsInstructionId MIPS_INS_BLTZALC;
    public static MipsInstructionId MIPS_INS_BLTZALL;
    public static MipsInstructionId MIPS_INS_BLTZALS;
    public static MipsInstructionId MIPS_INS_BLTZC;
    public static MipsInstructionId MIPS_INS_BLTZL;
    public static MipsInstructionId MIPS_INS_BMNZI;
    public static MipsInstructionId MIPS_INS_BMNZ;
    public static MipsInstructionId MIPS_INS_BMZI;
    public static MipsInstructionId MIPS_INS_BMZ;
    public static MipsInstructionId MIPS_INS_BNE;
    public static MipsInstructionId MIPS_INS_BNEC;
    public static MipsInstructionId MIPS_INS_BNEGI;
    public static MipsInstructionId MIPS_INS_BNEG;
    public static MipsInstructionId MIPS_INS_BNEL;
    public static MipsInstructionId MIPS_INS_BNEZ16;
    public static MipsInstructionId MIPS_INS_BNEZALC;
    public static MipsInstructionId MIPS_INS_BNEZC;
    public static MipsInstructionId MIPS_INS_BNVC;
    public static MipsInstructionId MIPS_INS_BNZ;
    public static MipsInstructionId MIPS_INS_BOVC;
    public static MipsInstructionId MIPS_INS_BPOSGE32;
    public static MipsInstructionId MIPS_INS_BREAK;
    public static MipsInstructionId MIPS_INS_BREAK16;
    public static MipsInstructionId MIPS_INS_BSELI;
    public static MipsInstructionId MIPS_INS_BSEL;
    public static MipsInstructionId MIPS_INS_BSETI;
    public static MipsInstructionId MIPS_INS_BSET;
    public static MipsInstructionId MIPS_INS_BZ;
    public static MipsInstructionId MIPS_INS_BEQZ;
    public static MipsInstructionId MIPS_INS_B;
    public static MipsInstructionId MIPS_INS_BNEZ;
    public static MipsInstructionId MIPS_INS_BTEQZ;
    public static MipsInstructionId MIPS_INS_BTNEZ;
    public static MipsInstructionId MIPS_INS_CACHE;
    public static MipsInstructionId MIPS_INS_CEIL;
    public static MipsInstructionId MIPS_INS_CEQI;
    public static MipsInstructionId MIPS_INS_CEQ;
    public static MipsInstructionId MIPS_INS_CFC1;
    public static MipsInstructionId MIPS_INS_CFCMSA;
    public static MipsInstructionId MIPS_INS_CINS;
    public static MipsInstructionId MIPS_INS_CINS32;
    public static MipsInstructionId MIPS_INS_CLASS;
    public static MipsInstructionId MIPS_INS_CLEI_S;
    public static MipsInstructionId MIPS_INS_CLEI_U;
    public static MipsInstructionId MIPS_INS_CLE_S;
    public static MipsInstructionId MIPS_INS_CLE_U;
    public static MipsInstructionId MIPS_INS_CLO;
    public static MipsInstructionId MIPS_INS_CLTI_S;
    public static MipsInstructionId MIPS_INS_CLTI_U;
    public static MipsInstructionId MIPS_INS_CLT_S;
    public static MipsInstructionId MIPS_INS_CLT_U;
    public static MipsInstructionId MIPS_INS_CLZ;
    public static MipsInstructionId MIPS_INS_CMPGDU;
    public static MipsInstructionId MIPS_INS_CMPGU;
    public static MipsInstructionId MIPS_INS_CMPU;
    public static MipsInstructionId MIPS_INS_CMP;
    public static MipsInstructionId MIPS_INS_COPY_S;
    public static MipsInstructionId MIPS_INS_COPY_U;
    public static MipsInstructionId MIPS_INS_CTC1;
    public static MipsInstructionId MIPS_INS_CTCMSA;
    public static MipsInstructionId MIPS_INS_CVT;
    public static MipsInstructionId MIPS_INS_C;
    public static MipsInstructionId MIPS_INS_CMPI;
    public static MipsInstructionId MIPS_INS_DADD;
    public static MipsInstructionId MIPS_INS_DADDI;
    public static MipsInstructionId MIPS_INS_DADDIU;
    public static MipsInstructionId MIPS_INS_DADDU;
    public static MipsInstructionId MIPS_INS_DAHI;
    public static MipsInstructionId MIPS_INS_DALIGN;
    public static MipsInstructionId MIPS_INS_DATI;
    public static MipsInstructionId MIPS_INS_DAUI;
    public static MipsInstructionId MIPS_INS_DBITSWAP;
    public static MipsInstructionId MIPS_INS_DCLO;
    public static MipsInstructionId MIPS_INS_DCLZ;
    public static MipsInstructionId MIPS_INS_DDIV;
    public static MipsInstructionId MIPS_INS_DDIVU;
    public static MipsInstructionId MIPS_INS_DERET;
    public static MipsInstructionId MIPS_INS_DEXT;
    public static MipsInstructionId MIPS_INS_DEXTM;
    public static MipsInstructionId MIPS_INS_DEXTU;
    public static MipsInstructionId MIPS_INS_DI;
    public static MipsInstructionId MIPS_INS_DINS;
    public static MipsInstructionId MIPS_INS_DINSM;
    public static MipsInstructionId MIPS_INS_DINSU;
    public static MipsInstructionId MIPS_INS_DIV;
    public static MipsInstructionId MIPS_INS_DIVU;
    public static MipsInstructionId MIPS_INS_DIV_S;
    public static MipsInstructionId MIPS_INS_DIV_U;
    public static MipsInstructionId MIPS_INS_DLSA;
    public static MipsInstructionId MIPS_INS_DMFC0;
    public static MipsInstructionId MIPS_INS_DMFC1;
    public static MipsInstructionId MIPS_INS_DMFC2;
    public static MipsInstructionId MIPS_INS_DMOD;
    public static MipsInstructionId MIPS_INS_DMODU;
    public static MipsInstructionId MIPS_INS_DMTC0;
    public static MipsInstructionId MIPS_INS_DMTC1;
    public static MipsInstructionId MIPS_INS_DMTC2;
    public static MipsInstructionId MIPS_INS_DMUH;
    public static MipsInstructionId MIPS_INS_DMUHU;
    public static MipsInstructionId MIPS_INS_DMUL;
    public static MipsInstructionId MIPS_INS_DMULT;
    public static MipsInstructionId MIPS_INS_DMULTU;
    public static MipsInstructionId MIPS_INS_DMULU;
    public static MipsInstructionId MIPS_INS_DOTP_S;
    public static MipsInstructionId MIPS_INS_DOTP_U;
    public static MipsInstructionId MIPS_INS_DPADD_S;
    public static MipsInstructionId MIPS_INS_DPADD_U;
    public static MipsInstructionId MIPS_INS_DPAQX_SA;
    public static MipsInstructionId MIPS_INS_DPAQX_S;
    public static MipsInstructionId MIPS_INS_DPAQ_SA;
    public static MipsInstructionId MIPS_INS_DPAQ_S;
    public static MipsInstructionId MIPS_INS_DPAU;
    public static MipsInstructionId MIPS_INS_DPAX;
    public static MipsInstructionId MIPS_INS_DPA;
    public static MipsInstructionId MIPS_INS_DPOP;
    public static MipsInstructionId MIPS_INS_DPSQX_SA;
    public static MipsInstructionId MIPS_INS_DPSQX_S;
    public static MipsInstructionId MIPS_INS_DPSQ_SA;
    public static MipsInstructionId MIPS_INS_DPSQ_S;
    public static MipsInstructionId MIPS_INS_DPSUB_S;
    public static MipsInstructionId MIPS_INS_DPSUB_U;
    public static MipsInstructionId MIPS_INS_DPSU;
    public static MipsInstructionId MIPS_INS_DPSX;
    public static MipsInstructionId MIPS_INS_DPS;
    public static MipsInstructionId MIPS_INS_DROTR;
    public static MipsInstructionId MIPS_INS_DROTR32;
    public static MipsInstructionId MIPS_INS_DROTRV;
    public static MipsInstructionId MIPS_INS_DSBH;
    public static MipsInstructionId MIPS_INS_DSHD;
    public static MipsInstructionId MIPS_INS_DSLL;
    public static MipsInstructionId MIPS_INS_DSLL32;
    public static MipsInstructionId MIPS_INS_DSLLV;
    public static MipsInstructionId MIPS_INS_DSRA;
    public static MipsInstructionId MIPS_INS_DSRA32;
    public static MipsInstructionId MIPS_INS_DSRAV;
    public static MipsInstructionId MIPS_INS_DSRL;
    public static MipsInstructionId MIPS_INS_DSRL32;
    public static MipsInstructionId MIPS_INS_DSRLV;
    public static MipsInstructionId MIPS_INS_DSUB;
    public static MipsInstructionId MIPS_INS_DSUBU;
    public static MipsInstructionId MIPS_INS_EHB;
    public static MipsInstructionId MIPS_INS_EI;
    public static MipsInstructionId MIPS_INS_ERET;
    public static MipsInstructionId MIPS_INS_EXT;
    public static MipsInstructionId MIPS_INS_EXTP;
    public static MipsInstructionId MIPS_INS_EXTPDP;
    public static MipsInstructionId MIPS_INS_EXTPDPV;
    public static MipsInstructionId MIPS_INS_EXTPV;
    public static MipsInstructionId MIPS_INS_EXTRV_RS;
    public static MipsInstructionId MIPS_INS_EXTRV_R;
    public static MipsInstructionId MIPS_INS_EXTRV_S;
    public static MipsInstructionId MIPS_INS_EXTRV;
    public static MipsInstructionId MIPS_INS_EXTR_RS;
    public static MipsInstructionId MIPS_INS_EXTR_R;
    public static MipsInstructionId MIPS_INS_EXTR_S;
    public static MipsInstructionId MIPS_INS_EXTR;
    public static MipsInstructionId MIPS_INS_EXTS;
    public static MipsInstructionId MIPS_INS_EXTS32;
    public static MipsInstructionId MIPS_INS_ABS;
    public static MipsInstructionId MIPS_INS_FADD;
    public static MipsInstructionId MIPS_INS_FCAF;
    public static MipsInstructionId MIPS_INS_FCEQ;
    public static MipsInstructionId MIPS_INS_FCLASS;
    public static MipsInstructionId MIPS_INS_FCLE;
    public static MipsInstructionId MIPS_INS_FCLT;
    public static MipsInstructionId MIPS_INS_FCNE;
    public static MipsInstructionId MIPS_INS_FCOR;
    public static MipsInstructionId MIPS_INS_FCUEQ;
    public static MipsInstructionId MIPS_INS_FCULE;
    public static MipsInstructionId MIPS_INS_FCULT;
    public static MipsInstructionId MIPS_INS_FCUNE;
    public static MipsInstructionId MIPS_INS_FCUN;
    public static MipsInstructionId MIPS_INS_FDIV;
    public static MipsInstructionId MIPS_INS_FEXDO;
    public static MipsInstructionId MIPS_INS_FEXP2;
    public static MipsInstructionId MIPS_INS_FEXUPL;
    public static MipsInstructionId MIPS_INS_FEXUPR;
    public static MipsInstructionId MIPS_INS_FFINT_S;
    public static MipsInstructionId MIPS_INS_FFINT_U;
    public static MipsInstructionId MIPS_INS_FFQL;
    public static MipsInstructionId MIPS_INS_FFQR;
    public static MipsInstructionId MIPS_INS_FILL;
    public static MipsInstructionId MIPS_INS_FLOG2;
    public static MipsInstructionId MIPS_INS_FLOOR;
    public static MipsInstructionId MIPS_INS_FMADD;
    public static MipsInstructionId MIPS_INS_FMAX_A;
    public static MipsInstructionId MIPS_INS_FMAX;
    public static MipsInstructionId MIPS_INS_FMIN_A;
    public static MipsInstructionId MIPS_INS_FMIN;
    public static MipsInstructionId MIPS_INS_MOV;
    public static MipsInstructionId MIPS_INS_FMSUB;
    public static MipsInstructionId MIPS_INS_FMUL;
    public static MipsInstructionId MIPS_INS_MUL;
    public static MipsInstructionId MIPS_INS_NEG;
    public static MipsInstructionId MIPS_INS_FRCP;
    public static MipsInstructionId MIPS_INS_FRINT;
    public static MipsInstructionId MIPS_INS_FRSQRT;
    public static MipsInstructionId MIPS_INS_FSAF;
    public static MipsInstructionId MIPS_INS_FSEQ;
    public static MipsInstructionId MIPS_INS_FSLE;
    public static MipsInstructionId MIPS_INS_FSLT;
    public static MipsInstructionId MIPS_INS_FSNE;
    public static MipsInstructionId MIPS_INS_FSOR;
    public static MipsInstructionId MIPS_INS_FSQRT;
    public static MipsInstructionId MIPS_INS_SQRT;
    public static MipsInstructionId MIPS_INS_FSUB;
    public static MipsInstructionId MIPS_INS_SUB;
    public static MipsInstructionId MIPS_INS_FSUEQ;
    public static MipsInstructionId MIPS_INS_FSULE;
    public static MipsInstructionId MIPS_INS_FSULT;
    public static MipsInstructionId MIPS_INS_FSUNE;
    public static MipsInstructionId MIPS_INS_FSUN;
    public static MipsInstructionId MIPS_INS_FTINT_S;
    public static MipsInstructionId MIPS_INS_FTINT_U;
    public static MipsInstructionId MIPS_INS_FTQ;
    public static MipsInstructionId MIPS_INS_FTRUNC_S;
    public static MipsInstructionId MIPS_INS_FTRUNC_U;
    public static MipsInstructionId MIPS_INS_HADD_S;
    public static MipsInstructionId MIPS_INS_HADD_U;
    public static MipsInstructionId MIPS_INS_HSUB_S;
    public static MipsInstructionId MIPS_INS_HSUB_U;
    public static MipsInstructionId MIPS_INS_ILVEV;
    public static MipsInstructionId MIPS_INS_ILVL;
    public static MipsInstructionId MIPS_INS_ILVOD;
    public static MipsInstructionId MIPS_INS_ILVR;
    public static MipsInstructionId MIPS_INS_INS;
    public static MipsInstructionId MIPS_INS_INSERT;
    public static MipsInstructionId MIPS_INS_INSV;
    public static MipsInstructionId MIPS_INS_INSVE;
    public static MipsInstructionId MIPS_INS_J;
    public static MipsInstructionId MIPS_INS_JAL;
    public static MipsInstructionId MIPS_INS_JALR;
    public static MipsInstructionId MIPS_INS_JALRS16;
    public static MipsInstructionId MIPS_INS_JALRS;
    public static MipsInstructionId MIPS_INS_JALS;
    public static MipsInstructionId MIPS_INS_JALX;
    public static MipsInstructionId MIPS_INS_JIALC;
    public static MipsInstructionId MIPS_INS_JIC;
    public static MipsInstructionId MIPS_INS_JR;
    public static MipsInstructionId MIPS_INS_JR16;
    public static MipsInstructionId MIPS_INS_JRADDIUSP;
    public static MipsInstructionId MIPS_INS_JRC;
    public static MipsInstructionId MIPS_INS_JALRC;
    public static MipsInstructionId MIPS_INS_LB;
    public static MipsInstructionId MIPS_INS_LBU16;
    public static MipsInstructionId MIPS_INS_LBUX;
    public static MipsInstructionId MIPS_INS_LBU;
    public static MipsInstructionId MIPS_INS_LD;
    public static MipsInstructionId MIPS_INS_LDC1;
    public static MipsInstructionId MIPS_INS_LDC2;
    public static MipsInstructionId MIPS_INS_LDC3;
    public static MipsInstructionId MIPS_INS_LDI;
    public static MipsInstructionId MIPS_INS_LDL;
    public static MipsInstructionId MIPS_INS_LDPC;
    public static MipsInstructionId MIPS_INS_LDR;
    public static MipsInstructionId MIPS_INS_LDXC1;
    public static MipsInstructionId MIPS_INS_LH;
    public static MipsInstructionId MIPS_INS_LHU16;
    public static MipsInstructionId MIPS_INS_LHX;
    public static MipsInstructionId MIPS_INS_LHU;
    public static MipsInstructionId MIPS_INS_LI16;
    public static MipsInstructionId MIPS_INS_LL;
    public static MipsInstructionId MIPS_INS_LLD;
    public static MipsInstructionId MIPS_INS_LSA;
    public static MipsInstructionId MIPS_INS_LUXC1;
    public static MipsInstructionId MIPS_INS_LUI;
    public static MipsInstructionId MIPS_INS_LW;
    public static MipsInstructionId MIPS_INS_LW16;
    public static MipsInstructionId MIPS_INS_LWC1;
    public static MipsInstructionId MIPS_INS_LWC2;
    public static MipsInstructionId MIPS_INS_LWC3;
    public static MipsInstructionId MIPS_INS_LWL;
    public static MipsInstructionId MIPS_INS_LWM16;
    public static MipsInstructionId MIPS_INS_LWM32;
    public static MipsInstructionId MIPS_INS_LWPC;
    public static MipsInstructionId MIPS_INS_LWP;
    public static MipsInstructionId MIPS_INS_LWR;
    public static MipsInstructionId MIPS_INS_LWUPC;
    public static MipsInstructionId MIPS_INS_LWU;
    public static MipsInstructionId MIPS_INS_LWX;
    public static MipsInstructionId MIPS_INS_LWXC1;
    public static MipsInstructionId MIPS_INS_LWXS;
    public static MipsInstructionId MIPS_INS_LI;
    public static MipsInstructionId MIPS_INS_MADD;
    public static MipsInstructionId MIPS_INS_MADDF;
    public static MipsInstructionId MIPS_INS_MADDR_Q;
    public static MipsInstructionId MIPS_INS_MADDU;
    public static MipsInstructionId MIPS_INS_MADDV;
    public static MipsInstructionId MIPS_INS_MADD_Q;
    public static MipsInstructionId MIPS_INS_MAQ_SA;
    public static MipsInstructionId MIPS_INS_MAQ_S;
    public static MipsInstructionId MIPS_INS_MAXA;
    public static MipsInstructionId MIPS_INS_MAXI_S;
    public static MipsInstructionId MIPS_INS_MAXI_U;
    public static MipsInstructionId MIPS_INS_MAX_A;
    public static MipsInstructionId MIPS_INS_MAX;
    public static MipsInstructionId MIPS_INS_MAX_S;
    public static MipsInstructionId MIPS_INS_MAX_U;
    public static MipsInstructionId MIPS_INS_MFC0;
    public static MipsInstructionId MIPS_INS_MFC1;
    public static MipsInstructionId MIPS_INS_MFC2;
    public static MipsInstructionId MIPS_INS_MFHC1;
    public static MipsInstructionId MIPS_INS_MFHI;
    public static MipsInstructionId MIPS_INS_MFLO;
    public static MipsInstructionId MIPS_INS_MINA;
    public static MipsInstructionId MIPS_INS_MINI_S;
    public static MipsInstructionId MIPS_INS_MINI_U;
    public static MipsInstructionId MIPS_INS_MIN_A;
    public static MipsInstructionId MIPS_INS_MIN;
    public static MipsInstructionId MIPS_INS_MIN_S;
    public static MipsInstructionId MIPS_INS_MIN_U;
    public static MipsInstructionId MIPS_INS_MOD;
    public static MipsInstructionId MIPS_INS_MODSUB;
    public static MipsInstructionId MIPS_INS_MODU;
    public static MipsInstructionId MIPS_INS_MOD_S;
    public static MipsInstructionId MIPS_INS_MOD_U;
    public static MipsInstructionId MIPS_INS_MOVE;
    public static MipsInstructionId MIPS_INS_MOVEP;
    public static MipsInstructionId MIPS_INS_MOVF;
    public static MipsInstructionId MIPS_INS_MOVN;
    public static MipsInstructionId MIPS_INS_MOVT;
    public static MipsInstructionId MIPS_INS_MOVZ;
    public static MipsInstructionId MIPS_INS_MSUB;
    public static MipsInstructionId MIPS_INS_MSUBF;
    public static MipsInstructionId MIPS_INS_MSUBR_Q;
    public static MipsInstructionId MIPS_INS_MSUBU;
    public static MipsInstructionId MIPS_INS_MSUBV;
    public static MipsInstructionId MIPS_INS_MSUB_Q;
    public static MipsInstructionId MIPS_INS_MTC0;
    public static MipsInstructionId MIPS_INS_MTC1;
    public static MipsInstructionId MIPS_INS_MTC2;
    public static MipsInstructionId MIPS_INS_MTHC1;
    public static MipsInstructionId MIPS_INS_MTHI;
    public static MipsInstructionId MIPS_INS_MTHLIP;
    public static MipsInstructionId MIPS_INS_MTLO;
    public static MipsInstructionId MIPS_INS_MTM0;
    public static MipsInstructionId MIPS_INS_MTM1;
    public static MipsInstructionId MIPS_INS_MTM2;
    public static MipsInstructionId MIPS_INS_MTP0;
    public static MipsInstructionId MIPS_INS_MTP1;
    public static MipsInstructionId MIPS_INS_MTP2;
    public static MipsInstructionId MIPS_INS_MUH;
    public static MipsInstructionId MIPS_INS_MUHU;
    public static MipsInstructionId MIPS_INS_MULEQ_S;
    public static MipsInstructionId MIPS_INS_MULEU_S;
    public static MipsInstructionId MIPS_INS_MULQ_RS;
    public static MipsInstructionId MIPS_INS_MULQ_S;
    public static MipsInstructionId MIPS_INS_MULR_Q;
    public static MipsInstructionId MIPS_INS_MULSAQ_S;
    public static MipsInstructionId MIPS_INS_MULSA;
    public static MipsInstructionId MIPS_INS_MULT;
    public static MipsInstructionId MIPS_INS_MULTU;
    public static MipsInstructionId MIPS_INS_MULU;
    public static MipsInstructionId MIPS_INS_MULV;
    public static MipsInstructionId MIPS_INS_MUL_Q;
    public static MipsInstructionId MIPS_INS_MUL_S;
    public static MipsInstructionId MIPS_INS_NLOC;
    public static MipsInstructionId MIPS_INS_NLZC;
    public static MipsInstructionId MIPS_INS_NMADD;
    public static MipsInstructionId MIPS_INS_NMSUB;
    public static MipsInstructionId MIPS_INS_NOR;
    public static MipsInstructionId MIPS_INS_NORI;
    public static MipsInstructionId MIPS_INS_NOT16;
    public static MipsInstructionId MIPS_INS_NOT;
    public static MipsInstructionId MIPS_INS_OR;
    public static MipsInstructionId MIPS_INS_OR16;
    public static MipsInstructionId MIPS_INS_ORI;
    public static MipsInstructionId MIPS_INS_PACKRL;
    public static MipsInstructionId MIPS_INS_PAUSE;
    public static MipsInstructionId MIPS_INS_PCKEV;
    public static MipsInstructionId MIPS_INS_PCKOD;
    public static MipsInstructionId MIPS_INS_PCNT;
    public static MipsInstructionId MIPS_INS_PICK;
    public static MipsInstructionId MIPS_INS_POP;
    public static MipsInstructionId MIPS_INS_PRECEQU;
    public static MipsInstructionId MIPS_INS_PRECEQ;
    public static MipsInstructionId MIPS_INS_PRECEU;
    public static MipsInstructionId MIPS_INS_PRECRQU_S;
    public static MipsInstructionId MIPS_INS_PRECRQ;
    public static MipsInstructionId MIPS_INS_PRECRQ_RS;
    public static MipsInstructionId MIPS_INS_PRECR;
    public static MipsInstructionId MIPS_INS_PRECR_SRA;
    public static MipsInstructionId MIPS_INS_PRECR_SRA_R;
    public static MipsInstructionId MIPS_INS_PREF;
    public static MipsInstructionId MIPS_INS_PREPEND;
    public static MipsInstructionId MIPS_INS_RADDU;
    public static MipsInstructionId MIPS_INS_RDDSP;
    public static MipsInstructionId MIPS_INS_RDHWR;
    public static MipsInstructionId MIPS_INS_REPLV;
    public static MipsInstructionId MIPS_INS_REPL;
    public static MipsInstructionId MIPS_INS_RINT;
    public static MipsInstructionId MIPS_INS_ROTR;
    public static MipsInstructionId MIPS_INS_ROTRV;
    public static MipsInstructionId MIPS_INS_ROUND;
    public static MipsInstructionId MIPS_INS_SAT_S;
    public static MipsInstructionId MIPS_INS_SAT_U;
    public static MipsInstructionId MIPS_INS_SB;
    public static MipsInstructionId MIPS_INS_SB16;
    public static MipsInstructionId MIPS_INS_SC;
    public static MipsInstructionId MIPS_INS_SCD;
    public static MipsInstructionId MIPS_INS_SD;
    public static MipsInstructionId MIPS_INS_SDBBP;
    public static MipsInstructionId MIPS_INS_SDBBP16;
    public static MipsInstructionId MIPS_INS_SDC1;
    public static MipsInstructionId MIPS_INS_SDC2;
    public static MipsInstructionId MIPS_INS_SDC3;
    public static MipsInstructionId MIPS_INS_SDL;
    public static MipsInstructionId MIPS_INS_SDR;
    public static MipsInstructionId MIPS_INS_SDXC1;
    public static MipsInstructionId MIPS_INS_SEB;
    public static MipsInstructionId MIPS_INS_SEH;
    public static MipsInstructionId MIPS_INS_SELEQZ;
    public static MipsInstructionId MIPS_INS_SELNEZ;
    public static MipsInstructionId MIPS_INS_SEL;
    public static MipsInstructionId MIPS_INS_SEQ;
    public static MipsInstructionId MIPS_INS_SEQI;
    public static MipsInstructionId MIPS_INS_SH;
    public static MipsInstructionId MIPS_INS_SH16;
    public static MipsInstructionId MIPS_INS_SHF;
    public static MipsInstructionId MIPS_INS_SHILO;
    public static MipsInstructionId MIPS_INS_SHILOV;
    public static MipsInstructionId MIPS_INS_SHLLV;
    public static MipsInstructionId MIPS_INS_SHLLV_S;
    public static MipsInstructionId MIPS_INS_SHLL;
    public static MipsInstructionId MIPS_INS_SHLL_S;
    public static MipsInstructionId MIPS_INS_SHRAV;
    public static MipsInstructionId MIPS_INS_SHRAV_R;
    public static MipsInstructionId MIPS_INS_SHRA;
    public static MipsInstructionId MIPS_INS_SHRA_R;
    public static MipsInstructionId MIPS_INS_SHRLV;
    public static MipsInstructionId MIPS_INS_SHRL;
    public static MipsInstructionId MIPS_INS_SLDI;
    public static MipsInstructionId MIPS_INS_SLD;
    public static MipsInstructionId MIPS_INS_SLL;
    public static MipsInstructionId MIPS_INS_SLL16;
    public static MipsInstructionId MIPS_INS_SLLI;
    public static MipsInstructionId MIPS_INS_SLLV;
    public static MipsInstructionId MIPS_INS_SLT;
    public static MipsInstructionId MIPS_INS_SLTI;
    public static MipsInstructionId MIPS_INS_SLTIU;
    public static MipsInstructionId MIPS_INS_SLTU;
    public static MipsInstructionId MIPS_INS_SNE;
    public static MipsInstructionId MIPS_INS_SNEI;
    public static MipsInstructionId MIPS_INS_SPLATI;
    public static MipsInstructionId MIPS_INS_SPLAT;
    public static MipsInstructionId MIPS_INS_SRA;
    public static MipsInstructionId MIPS_INS_SRAI;
    public static MipsInstructionId MIPS_INS_SRARI;
    public static MipsInstructionId MIPS_INS_SRAR;
    public static MipsInstructionId MIPS_INS_SRAV;
    public static MipsInstructionId MIPS_INS_SRL;
    public static MipsInstructionId MIPS_INS_SRL16;
    public static MipsInstructionId MIPS_INS_SRLI;
    public static MipsInstructionId MIPS_INS_SRLRI;
    public static MipsInstructionId MIPS_INS_SRLR;
    public static MipsInstructionId MIPS_INS_SRLV;
    public static MipsInstructionId MIPS_INS_SSNOP;
    public static MipsInstructionId MIPS_INS_ST;
    public static MipsInstructionId MIPS_INS_SUBQH;
    public static MipsInstructionId MIPS_INS_SUBQH_R;
    public static MipsInstructionId MIPS_INS_SUBQ;
    public static MipsInstructionId MIPS_INS_SUBQ_S;
    public static MipsInstructionId MIPS_INS_SUBSUS_U;
    public static MipsInstructionId MIPS_INS_SUBSUU_S;
    public static MipsInstructionId MIPS_INS_SUBS_S;
    public static MipsInstructionId MIPS_INS_SUBS_U;
    public static MipsInstructionId MIPS_INS_SUBU16;
    public static MipsInstructionId MIPS_INS_SUBUH;
    public static MipsInstructionId MIPS_INS_SUBUH_R;
    public static MipsInstructionId MIPS_INS_SUBU;
    public static MipsInstructionId MIPS_INS_SUBU_S;
    public static MipsInstructionId MIPS_INS_SUBVI;
    public static MipsInstructionId MIPS_INS_SUBV;
    public static MipsInstructionId MIPS_INS_SUXC1;
    public static MipsInstructionId MIPS_INS_SW;
    public static MipsInstructionId MIPS_INS_SW16;
    public static MipsInstructionId MIPS_INS_SWC1;
    public static MipsInstructionId MIPS_INS_SWC2;
    public static MipsInstructionId MIPS_INS_SWC3;
    public static MipsInstructionId MIPS_INS_SWL;
    public static MipsInstructionId MIPS_INS_SWM16;
    public static MipsInstructionId MIPS_INS_SWM32;
    public static MipsInstructionId MIPS_INS_SWP;
    public static MipsInstructionId MIPS_INS_SWR;
    public static MipsInstructionId MIPS_INS_SWXC1;
    public static MipsInstructionId MIPS_INS_SYNC;
    public static MipsInstructionId MIPS_INS_SYNCI;
    public static MipsInstructionId MIPS_INS_SYSCALL;
    public static MipsInstructionId MIPS_INS_TEQ;
    public static MipsInstructionId MIPS_INS_TEQI;
    public static MipsInstructionId MIPS_INS_TGE;
    public static MipsInstructionId MIPS_INS_TGEI;
    public static MipsInstructionId MIPS_INS_TGEIU;
    public static MipsInstructionId MIPS_INS_TGEU;
    public static MipsInstructionId MIPS_INS_TLBP;
    public static MipsInstructionId MIPS_INS_TLBR;
    public static MipsInstructionId MIPS_INS_TLBWI;
    public static MipsInstructionId MIPS_INS_TLBWR;
    public static MipsInstructionId MIPS_INS_TLT;
    public static MipsInstructionId MIPS_INS_TLTI;
    public static MipsInstructionId MIPS_INS_TLTIU;
    public static MipsInstructionId MIPS_INS_TLTU;
    public static MipsInstructionId MIPS_INS_TNE;
    public static MipsInstructionId MIPS_INS_TNEI;
    public static MipsInstructionId MIPS_INS_TRUNC;
    public static MipsInstructionId MIPS_INS_V3MULU;
    public static MipsInstructionId MIPS_INS_VMM0;
    public static MipsInstructionId MIPS_INS_VMULU;
    public static MipsInstructionId MIPS_INS_VSHF;
    public static MipsInstructionId MIPS_INS_WAIT;
    public static MipsInstructionId MIPS_INS_WRDSP;
    public static MipsInstructionId MIPS_INS_WSBH;
    public static MipsInstructionId MIPS_INS_XOR;
    public static MipsInstructionId MIPS_INS_XOR16;
    public static MipsInstructionId MIPS_INS_XORI;
    public static MipsInstructionId MIPS_INS_NOP;
    public static MipsInstructionId MIPS_INS_NEGU;
    public static MipsInstructionId MIPS_INS_JALR_HB;
    public static MipsInstructionId MIPS_INS_JR_HB;
}
public class Gee.External.Capstone.Mips.MipsMemoryOperandValue : object {
    [CompilerGeneratedAttribute]
private MipsRegister <Base>k__BackingField;
    [CompilerGeneratedAttribute]
private long <Displacement>k__BackingField;
    public MipsRegister Base { get; }
    public long Displacement { get; }
    internal MipsMemoryOperandValue(CapstoneDisassembler disassembler, NativeMipsMemoryOperandValue& nativeMemoryOperandValue);
    [CompilerGeneratedAttribute]
public MipsRegister get_Base();
    [CompilerGeneratedAttribute]
public long get_Displacement();
}
public class Gee.External.Capstone.Mips.MipsOperand : object {
    private long _immediate;
    private MipsMemoryOperandValue _memory;
    private MipsRegister _register;
    [CompilerGeneratedAttribute]
private MipsOperandType <Type>k__BackingField;
    public long Immediate { get; }
    public MipsMemoryOperandValue Memory { get; }
    public MipsRegister Register { get; }
    public MipsOperandType Type { get; }
    internal MipsOperand(CapstoneDisassembler disassembler, NativeMipsOperand& nativeOperand);
    public long get_Immediate();
    public MipsMemoryOperandValue get_Memory();
    public MipsRegister get_Register();
    [CompilerGeneratedAttribute]
public MipsOperandType get_Type();
    internal static MipsOperand[] Create(CapstoneDisassembler disassembler, NativeMipsInstructionDetail& nativeInstructionDetail);
}
public enum Gee.External.Capstone.Mips.MipsOperandType : Enum {
    public int value__;
    public static MipsOperandType Invalid;
    public static MipsOperandType Register;
    public static MipsOperandType Immediate;
    public static MipsOperandType Memory;
}
public class Gee.External.Capstone.Mips.MipsRegister : Register`1<MipsRegisterId> {
    internal MipsRegister(MipsRegisterId id, string name);
    internal static MipsRegister TryCreate(CapstoneDisassembler disassembler, MipsRegisterId id);
}
public enum Gee.External.Capstone.Mips.MipsRegisterId : Enum {
    public int value__;
    public static MipsRegisterId Invalid;
    public static MipsRegisterId MIPS_REG_PC;
    public static MipsRegisterId MIPS_REG_0;
    public static MipsRegisterId MIPS_REG_1;
    public static MipsRegisterId MIPS_REG_2;
    public static MipsRegisterId MIPS_REG_3;
    public static MipsRegisterId MIPS_REG_4;
    public static MipsRegisterId MIPS_REG_5;
    public static MipsRegisterId MIPS_REG_6;
    public static MipsRegisterId MIPS_REG_7;
    public static MipsRegisterId MIPS_REG_8;
    public static MipsRegisterId MIPS_REG_9;
    public static MipsRegisterId MIPS_REG_10;
    public static MipsRegisterId MIPS_REG_11;
    public static MipsRegisterId MIPS_REG_12;
    public static MipsRegisterId MIPS_REG_13;
    public static MipsRegisterId MIPS_REG_14;
    public static MipsRegisterId MIPS_REG_15;
    public static MipsRegisterId MIPS_REG_16;
    public static MipsRegisterId MIPS_REG_17;
    public static MipsRegisterId MIPS_REG_18;
    public static MipsRegisterId MIPS_REG_19;
    public static MipsRegisterId MIPS_REG_20;
    public static MipsRegisterId MIPS_REG_21;
    public static MipsRegisterId MIPS_REG_22;
    public static MipsRegisterId MIPS_REG_23;
    public static MipsRegisterId MIPS_REG_24;
    public static MipsRegisterId MIPS_REG_25;
    public static MipsRegisterId MIPS_REG_26;
    public static MipsRegisterId MIPS_REG_27;
    public static MipsRegisterId MIPS_REG_28;
    public static MipsRegisterId MIPS_REG_29;
    public static MipsRegisterId MIPS_REG_30;
    public static MipsRegisterId MIPS_REG_31;
    public static MipsRegisterId MIPS_REG_DSPCCOND;
    public static MipsRegisterId MIPS_REG_DSPCARRY;
    public static MipsRegisterId MIPS_REG_DSPEFI;
    public static MipsRegisterId MIPS_REG_DSPOUTFLAG;
    public static MipsRegisterId MIPS_REG_DSPOUTFLAG16_19;
    public static MipsRegisterId MIPS_REG_DSPOUTFLAG20;
    public static MipsRegisterId MIPS_REG_DSPOUTFLAG21;
    public static MipsRegisterId MIPS_REG_DSPOUTFLAG22;
    public static MipsRegisterId MIPS_REG_DSPOUTFLAG23;
    public static MipsRegisterId MIPS_REG_DSPPOS;
    public static MipsRegisterId MIPS_REG_DSPSCOUNT;
    public static MipsRegisterId MIPS_REG_AC0;
    public static MipsRegisterId MIPS_REG_AC1;
    public static MipsRegisterId MIPS_REG_AC2;
    public static MipsRegisterId MIPS_REG_AC3;
    public static MipsRegisterId MIPS_REG_CC0;
    public static MipsRegisterId MIPS_REG_CC1;
    public static MipsRegisterId MIPS_REG_CC2;
    public static MipsRegisterId MIPS_REG_CC3;
    public static MipsRegisterId MIPS_REG_CC4;
    public static MipsRegisterId MIPS_REG_CC5;
    public static MipsRegisterId MIPS_REG_CC6;
    public static MipsRegisterId MIPS_REG_CC7;
    public static MipsRegisterId MIPS_REG_F0;
    public static MipsRegisterId MIPS_REG_F1;
    public static MipsRegisterId MIPS_REG_F2;
    public static MipsRegisterId MIPS_REG_F3;
    public static MipsRegisterId MIPS_REG_F4;
    public static MipsRegisterId MIPS_REG_F5;
    public static MipsRegisterId MIPS_REG_F6;
    public static MipsRegisterId MIPS_REG_F7;
    public static MipsRegisterId MIPS_REG_F8;
    public static MipsRegisterId MIPS_REG_F9;
    public static MipsRegisterId MIPS_REG_F10;
    public static MipsRegisterId MIPS_REG_F11;
    public static MipsRegisterId MIPS_REG_F12;
    public static MipsRegisterId MIPS_REG_F13;
    public static MipsRegisterId MIPS_REG_F14;
    public static MipsRegisterId MIPS_REG_F15;
    public static MipsRegisterId MIPS_REG_F16;
    public static MipsRegisterId MIPS_REG_F17;
    public static MipsRegisterId MIPS_REG_F18;
    public static MipsRegisterId MIPS_REG_F19;
    public static MipsRegisterId MIPS_REG_F20;
    public static MipsRegisterId MIPS_REG_F21;
    public static MipsRegisterId MIPS_REG_F22;
    public static MipsRegisterId MIPS_REG_F23;
    public static MipsRegisterId MIPS_REG_F24;
    public static MipsRegisterId MIPS_REG_F25;
    public static MipsRegisterId MIPS_REG_F26;
    public static MipsRegisterId MIPS_REG_F27;
    public static MipsRegisterId MIPS_REG_F28;
    public static MipsRegisterId MIPS_REG_F29;
    public static MipsRegisterId MIPS_REG_F30;
    public static MipsRegisterId MIPS_REG_F31;
    public static MipsRegisterId MIPS_REG_FCC0;
    public static MipsRegisterId MIPS_REG_FCC1;
    public static MipsRegisterId MIPS_REG_FCC2;
    public static MipsRegisterId MIPS_REG_FCC3;
    public static MipsRegisterId MIPS_REG_FCC4;
    public static MipsRegisterId MIPS_REG_FCC5;
    public static MipsRegisterId MIPS_REG_FCC6;
    public static MipsRegisterId MIPS_REG_FCC7;
    public static MipsRegisterId MIPS_REG_W0;
    public static MipsRegisterId MIPS_REG_W1;
    public static MipsRegisterId MIPS_REG_W2;
    public static MipsRegisterId MIPS_REG_W3;
    public static MipsRegisterId MIPS_REG_W4;
    public static MipsRegisterId MIPS_REG_W5;
    public static MipsRegisterId MIPS_REG_W6;
    public static MipsRegisterId MIPS_REG_W7;
    public static MipsRegisterId MIPS_REG_W8;
    public static MipsRegisterId MIPS_REG_W9;
    public static MipsRegisterId MIPS_REG_W10;
    public static MipsRegisterId MIPS_REG_W11;
    public static MipsRegisterId MIPS_REG_W12;
    public static MipsRegisterId MIPS_REG_W13;
    public static MipsRegisterId MIPS_REG_W14;
    public static MipsRegisterId MIPS_REG_W15;
    public static MipsRegisterId MIPS_REG_W16;
    public static MipsRegisterId MIPS_REG_W17;
    public static MipsRegisterId MIPS_REG_W18;
    public static MipsRegisterId MIPS_REG_W19;
    public static MipsRegisterId MIPS_REG_W20;
    public static MipsRegisterId MIPS_REG_W21;
    public static MipsRegisterId MIPS_REG_W22;
    public static MipsRegisterId MIPS_REG_W23;
    public static MipsRegisterId MIPS_REG_W24;
    public static MipsRegisterId MIPS_REG_W25;
    public static MipsRegisterId MIPS_REG_W26;
    public static MipsRegisterId MIPS_REG_W27;
    public static MipsRegisterId MIPS_REG_W28;
    public static MipsRegisterId MIPS_REG_W29;
    public static MipsRegisterId MIPS_REG_W30;
    public static MipsRegisterId MIPS_REG_W31;
    public static MipsRegisterId MIPS_REG_HI;
    public static MipsRegisterId MIPS_REG_LO;
    public static MipsRegisterId MIPS_REG_P0;
    public static MipsRegisterId MIPS_REG_P1;
    public static MipsRegisterId MIPS_REG_P2;
    public static MipsRegisterId MIPS_REG_MPL0;
    public static MipsRegisterId MIPS_REG_MPL1;
    public static MipsRegisterId MIPS_REG_MPL2;
    public static MipsRegisterId MIPS_REG_ZERO;
    public static MipsRegisterId MIPS_REG_AT;
    public static MipsRegisterId MIPS_REG_V0;
    public static MipsRegisterId MIPS_REG_V1;
    public static MipsRegisterId MIPS_REG_A0;
    public static MipsRegisterId MIPS_REG_A1;
    public static MipsRegisterId MIPS_REG_A2;
    public static MipsRegisterId MIPS_REG_A3;
    public static MipsRegisterId MIPS_REG_T0;
    public static MipsRegisterId MIPS_REG_T1;
    public static MipsRegisterId MIPS_REG_T2;
    public static MipsRegisterId MIPS_REG_T3;
    public static MipsRegisterId MIPS_REG_T4;
    public static MipsRegisterId MIPS_REG_T5;
    public static MipsRegisterId MIPS_REG_T6;
    public static MipsRegisterId MIPS_REG_T7;
    public static MipsRegisterId MIPS_REG_S0;
    public static MipsRegisterId MIPS_REG_S1;
    public static MipsRegisterId MIPS_REG_S2;
    public static MipsRegisterId MIPS_REG_S3;
    public static MipsRegisterId MIPS_REG_S4;
    public static MipsRegisterId MIPS_REG_S5;
    public static MipsRegisterId MIPS_REG_S6;
    public static MipsRegisterId MIPS_REG_S7;
    public static MipsRegisterId MIPS_REG_T8;
    public static MipsRegisterId MIPS_REG_T9;
    public static MipsRegisterId MIPS_REG_K0;
    public static MipsRegisterId MIPS_REG_K1;
    public static MipsRegisterId MIPS_REG_GP;
    public static MipsRegisterId MIPS_REG_SP;
    public static MipsRegisterId MIPS_REG_FP;
    public static MipsRegisterId MIPS_REG_S8;
    public static MipsRegisterId MIPS_REG_RA;
    public static MipsRegisterId MIPS_REG_HI0;
    public static MipsRegisterId MIPS_REG_HI1;
    public static MipsRegisterId MIPS_REG_HI2;
    public static MipsRegisterId MIPS_REG_HI3;
    public static MipsRegisterId MIPS_REG_LO0;
    public static MipsRegisterId MIPS_REG_LO1;
    public static MipsRegisterId MIPS_REG_LO2;
    public static MipsRegisterId MIPS_REG_LO3;
}
internal class Gee.External.Capstone.Mips.NativeMipsInstructionDetail : ValueType {
    public byte OperandCount;
    public NativeMipsOperand[] Operands;
}
internal class Gee.External.Capstone.Mips.NativeMipsMemoryOperandValue : ValueType {
    public MipsRegisterId Base;
    public long Displacement;
}
internal class Gee.External.Capstone.Mips.NativeMipsOperand : ValueType {
    public MipsOperandType Type;
    public NativeMipsOperandValue Value;
}
internal class Gee.External.Capstone.Mips.NativeMipsOperandValue : ValueType {
    public MipsRegisterId Register;
    public long Immediate;
    public NativeMipsMemoryOperandValue Memory;
}
internal static class Gee.External.Capstone.NativeCapstone : object {
    private static int MagicInstructionArchitectureDetailsFieldOffset;
    private static NativeCapstone();
    internal static NativeDisassemblerHandle CreateDisassembler(DisassembleArchitecture disassembleArchitecture, NativeDisassembleMode disassembleMode);
    internal static NativeInstructionHandle CreateInstruction(NativeDisassemblerHandle hDisassembler);
    internal static Tuple`2<Int16[], Int16[]> GetAccessedRegisters(NativeDisassemblerHandle hDisassembler, NativeInstructionHandle hInstruction);
    internal static NativeInstruction GetInstruction(NativeInstructionHandle hInstruction);
    internal static Nullable`1<NativeInstructionDetail> GetInstructionDetail(NativeInstructionHandle hInstruction);
    internal static Nullable`1<TInstructionDetail> GetInstructionDetail(NativeInstructionHandle hInstruction);
    internal static Nullable`1<NativeInstructionDetail> GetInstructionDetail(NativeInstruction& instruction);
    internal static Nullable`1<TInstructionDetails> GetInstructionDetail(NativeInstruction& instruction);
    internal static string GetInstructionGroupName(NativeDisassemblerHandle hDisassembler, int instructionGroupId);
    internal static string GetRegisterName(NativeDisassemblerHandle hDisassembler, int registerId);
    internal static Version GetVersion();
    internal static bool Iterate(NativeDisassemblerHandle hDisassembler, Byte[] binaryCode, Int32& binaryCodeOffset, Int64& address, NativeInstructionHandle hInstruction);
    [ConditionalAttribute("NET40")]
[ConditionalAttribute("NET45")]
internal static void LoadLibrary();
    internal static bool Query(NativeQueryOption queryOption);
    internal static void SetDisassembleModeOption(NativeDisassemblerHandle hDisassembler, NativeDisassembleMode disassembleMode);
    internal static void SetDisassemblerOption(NativeDisassemblerHandle hDisassembler, NativeDisassemblerOptionType optionType, NativeDisassemblerOptionValue optionValue);
    internal static void SetInstructionMnemonicOption(NativeDisassemblerHandle hDisassembler, NativeInstructionMnemonicOptionValue& optionValue);
    internal static void SetSkipDataOption(NativeDisassemblerHandle hDisassembler, NativeSkipDataOptionValue& optionValue);
}
internal static class Gee.External.Capstone.NativeCapstoneImport : object {
    internal static NativeCapstoneResultCode CloseDisassembler(IntPtr& pDissembler);
    internal static NativeCapstoneResultCode CreateDisassembler(DisassembleArchitecture disassembleArchitecture, NativeDisassembleMode disassembleMode, IntPtr& pDisassembler);
    internal static IntPtr CreateInstruction(NativeDisassemblerHandle hDisassembler);
    internal static IntPtr Disassemble(NativeDisassemblerHandle hDisassembler, IntPtr pCode, IntPtr codeSize, long startingAddress, IntPtr count, IntPtr& pInstructions);
    internal static void FreeInstructions(IntPtr pInstructions, IntPtr count);
    internal static NativeCapstoneResultCode GetAccessedRegisters(NativeDisassemblerHandle hDisassembler, NativeInstructionHandle hInstruction, Int16[] readRegisters, Byte& readRegistersCount, Int16[] writtenRegisters, Byte& writtenRegistersCount);
    internal static IntPtr GetInstructionGroupName(NativeDisassemblerHandle hDisassembler, int instructionGroupId);
    internal static NativeCapstoneResultCode GetLastErrorCode(NativeDisassemblerHandle hDisassembler);
    internal static IntPtr GetRegisterName(NativeDisassemblerHandle hDisassembler, int registerId);
    internal static int GetVersion(Int32& majorVersion, Int32& minorVersion);
    internal static bool Iterate(NativeDisassemblerHandle hDisassembler, IntPtr& pCode, IntPtr& codeSize, Int64& address, NativeInstructionHandle hInstruction);
    internal static IntPtr LoadLibrary(string libraryFilePath);
    internal static bool Query(NativeQueryOption queryOption);
    internal static NativeCapstoneResultCode SetDisassemblerOption(NativeDisassemblerHandle hDisassembler, NativeDisassemblerOptionType optionType, IntPtr optionValue);
}
internal enum Gee.External.Capstone.NativeCapstoneResultCode : Enum {
    public int value__;
    public static NativeCapstoneResultCode Ok;
    public static NativeCapstoneResultCode OutOfMemory;
    public static NativeCapstoneResultCode UnsupportedDisassembleArchitecture;
    public static NativeCapstoneResultCode InvalidHandle1;
    public static NativeCapstoneResultCode InvalidHandle2;
    public static NativeCapstoneResultCode UnsupportedDisassembleMode;
    public static NativeCapstoneResultCode InvalidOption;
    public static NativeCapstoneResultCode UnsupportedInstructionDetail;
    public static NativeCapstoneResultCode UninitializedMemoryManagement;
    public static NativeCapstoneResultCode UnsupportedVersion;
    public static NativeCapstoneResultCode UnSupportedDietModeOperation;
    public static NativeCapstoneResultCode UnsupportedSkipDataModeOperation;
    public static NativeCapstoneResultCode UnSupportedX86AttSyntax;
    public static NativeCapstoneResultCode UnSupportedX86IntelSyntax;
    public static NativeCapstoneResultCode UnSupportedX86MasmSyntax;
}
[FlagsAttribute]
internal enum Gee.External.Capstone.NativeDisassembleMode : Enum {
    public int value__;
    public static NativeDisassembleMode LittleEndian;
    public static NativeDisassembleMode Arm;
    public static NativeDisassembleMode Bit16;
    public static NativeDisassembleMode Bit32;
    public static NativeDisassembleMode Bit64;
    public static NativeDisassembleMode ArmThumb;
    public static NativeDisassembleMode ArmCortexM;
    public static NativeDisassembleMode ArmV8;
    public static NativeDisassembleMode MipsMicro;
    public static NativeDisassembleMode Mips3;
    public static NativeDisassembleMode Mips32R6;
    public static NativeDisassembleMode Mips2;
    public static NativeDisassembleMode SparcV9;
    public static NativeDisassembleMode PowerPcQuadProcessingExtensions;
    public static NativeDisassembleMode M68K000;
    public static NativeDisassembleMode M68K010;
    public static NativeDisassembleMode M68K020;
    public static NativeDisassembleMode M68K030;
    public static NativeDisassembleMode M68K040;
    public static NativeDisassembleMode M68K060;
    public static NativeDisassembleMode BigEndian;
    public static NativeDisassembleMode Mips32;
    public static NativeDisassembleMode Mips64;
    public static NativeDisassembleMode M680X6301;
    public static NativeDisassembleMode M680X6309;
    public static NativeDisassembleMode M680X6800;
    public static NativeDisassembleMode M680X6801;
    public static NativeDisassembleMode M680X6805;
    public static NativeDisassembleMode M680X6808;
    public static NativeDisassembleMode M680X6809;
    public static NativeDisassembleMode M680X6811;
    public static NativeDisassembleMode M680XCpu12;
    public static NativeDisassembleMode M680XHcS08;
}
internal class Gee.External.Capstone.NativeDisassemblerHandle : SafeHandleZeroOrMinusOneIsInvalid {
    internal NativeDisassemblerHandle(IntPtr pDisassembler);
    protected virtual bool ReleaseHandle();
}
internal enum Gee.External.Capstone.NativeDisassemblerOptionType : Enum {
    public int value__;
    public static NativeDisassemblerOptionType None;
    public static NativeDisassemblerOptionType SetSyntax;
    public static NativeDisassemblerOptionType SetInstructionDetails;
    public static NativeDisassemblerOptionType SetDisassembleMode;
    public static NativeDisassemblerOptionType SetMemory;
    public static NativeDisassemblerOptionType SetSkipData;
    public static NativeDisassemblerOptionType SetSkipDataConfig;
    public static NativeDisassemblerOptionType SetMnemonic;
    public static NativeDisassemblerOptionType SetUnsigned;
}
internal enum Gee.External.Capstone.NativeDisassemblerOptionValue : Enum {
    public int value__;
    public static NativeDisassemblerOptionValue Disable;
    public static NativeDisassemblerOptionValue Enable;
    public static NativeDisassemblerOptionValue UseDefaultSyntax;
    public static NativeDisassemblerOptionValue UseIntelSyntax;
    public static NativeDisassemblerOptionValue UseAttSyntax;
    public static NativeDisassemblerOptionValue UseMasmSyntax;
}
internal class Gee.External.Capstone.NativeInstruction : ValueType {
    public int Id;
    public long Address;
    public short Size;
    public Byte[] Bytes;
    public string Mnemonic;
    public string Operand;
    public IntPtr Details;
}
internal class Gee.External.Capstone.NativeInstructionDetail : ValueType {
    public Int16[] ImplicitlyReadRegisters;
    public byte ImplicitlyReadRegisterCount;
    public Int16[] ImplicitlyWrittenRegisters;
    public byte ImplicitlyWrittenRegisterCount;
    public Byte[] Groups;
    public byte GroupCount;
}
internal class Gee.External.Capstone.NativeInstructionHandle : SafeHandleZeroOrMinusOneIsInvalid {
    internal NativeInstructionHandle(IntPtr pInstruction);
    protected virtual bool ReleaseHandle();
}
internal class Gee.External.Capstone.NativeInstructionMnemonicOptionValue : ValueType {
    public int InstructionId;
    public string InstructionMnemonic;
}
internal enum Gee.External.Capstone.NativeQueryOption : Enum {
    public int value__;
    public static NativeQueryOption QueryArmArchitecture;
    public static NativeQueryOption QueryArm64Architecture;
    public static NativeQueryOption QueryMipsArchitecture;
    public static NativeQueryOption QueryX86Architecture;
    public static NativeQueryOption QueryPowerPcArchitecture;
    public static NativeQueryOption QuerySparcArchitecture;
    public static NativeQueryOption QuerySystemZArchitecture;
    public static NativeQueryOption QueryXCoreArchitecture;
    public static NativeQueryOption QueryM68KArchitecture;
    public static NativeQueryOption QueryTms320C64XArchitecture;
    public static NativeQueryOption QueryM680XArchitecture;
    public static NativeQueryOption QueryEvmArchitecture;
    public static NativeQueryOption QueryAllArchitectures;
    public static NativeQueryOption QueryDietMode;
    public static NativeQueryOption QueryX86ReduceMode;
}
internal class Gee.External.Capstone.NativeSkipDataOptionValue : ValueType {
    public string InstructionMnemonic;
    public SkipDataCallback Callback;
    public IntPtr State;
}
[FlagsAttribute]
public enum Gee.External.Capstone.OperandAccessType : Enum {
    public byte value__;
    public static OperandAccessType Invalid;
    public static OperandAccessType Read;
    public static OperandAccessType Write;
}
public class Gee.External.Capstone.PowerPc.CapstonePowerPcDisassembler : CapstoneDisassembler`8<PowerPcDisassembleMode, PowerPcInstruction, PowerPcInstructionDetail, PowerPcInstructionGroup, PowerPcInstructionGroupId, PowerPcInstructionId, PowerPcRegister, PowerPcRegisterId> {
    public CapstonePowerPcDisassembler(PowerPcDisassembleMode disassembleMode);
    private protected virtual PowerPcInstruction CreateInstruction(NativeInstructionHandle hInstruction);
}
internal class Gee.External.Capstone.PowerPc.NativePowerPcConditionRegisterOperandValue : ValueType {
    public int Scale;
    public PowerPcRegisterId Register;
    public PowerPcBranchCode BranchCode;
}
internal class Gee.External.Capstone.PowerPc.NativePowerPcInstructionDetail : ValueType {
    public PowerPcBranchCode BranchCode;
    public PowerPcBranchHint BranchHint;
    public bool UpdateCr0;
    public byte OperandCount;
    public NativePowerPcOperand[] Operands;
}
internal class Gee.External.Capstone.PowerPc.NativePowerPcMemoryOperandValue : ValueType {
    public PowerPcRegisterId Base;
    public int Displacement;
}
internal class Gee.External.Capstone.PowerPc.NativePowerPcOperand : ValueType {
    public PowerPcOperandType Type;
    public NativePowerPcOperandValue Value;
}
internal class Gee.External.Capstone.PowerPc.NativePowerPcOperandValue : ValueType {
    public PowerPcRegisterId Register;
    public long Immediate;
    public NativePowerPcMemoryOperandValue Memory;
    public NativePowerPcConditionRegisterOperandValue ConditionRegister;
}
public enum Gee.External.Capstone.PowerPc.PowerPcBranchCode : Enum {
    public int value__;
    public static PowerPcBranchCode Invalid;
    public static PowerPcBranchCode PPC_BC_LT;
    public static PowerPcBranchCode PPC_BC_LE;
    public static PowerPcBranchCode PPC_BC_EQ;
    public static PowerPcBranchCode PPC_BC_GE;
    public static PowerPcBranchCode PPC_BC_GT;
    public static PowerPcBranchCode PPC_BC_NE;
    public static PowerPcBranchCode PPC_BC_UN;
    public static PowerPcBranchCode PPC_BC_NU;
    public static PowerPcBranchCode PPC_BC_SO;
    public static PowerPcBranchCode PPC_BC_NS;
}
public enum Gee.External.Capstone.PowerPc.PowerPcBranchHint : Enum {
    public int value__;
    public static PowerPcBranchHint Invalid;
    public static PowerPcBranchHint PPC_BH_PLUS;
    public static PowerPcBranchHint PPC_BH_MINUS;
}
public class Gee.External.Capstone.PowerPc.PowerPcConditionRegisterOperandValue : object {
    [CompilerGeneratedAttribute]
private PowerPcBranchCode <BranchCode>k__BackingField;
    [CompilerGeneratedAttribute]
private PowerPcRegister <Register>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Scale>k__BackingField;
    public PowerPcBranchCode BranchCode { get; }
    public PowerPcRegister Register { get; }
    public int Scale { get; }
    internal PowerPcConditionRegisterOperandValue(CapstoneDisassembler disassembler, NativePowerPcConditionRegisterOperandValue& nativeConditionRegisterOperandValue);
    [CompilerGeneratedAttribute]
public PowerPcBranchCode get_BranchCode();
    [CompilerGeneratedAttribute]
public PowerPcRegister get_Register();
    [CompilerGeneratedAttribute]
public int get_Scale();
}
[FlagsAttribute]
public enum Gee.External.Capstone.PowerPc.PowerPcDisassembleMode : Enum {
    public int value__;
    public static PowerPcDisassembleMode BigEndian;
    public static PowerPcDisassembleMode Bit32;
    public static PowerPcDisassembleMode Bit64;
    public static PowerPcDisassembleMode LittleEndian;
    public static PowerPcDisassembleMode QuadProcessingExtensions;
}
public class Gee.External.Capstone.PowerPc.PowerPcInstruction : Instruction`8<PowerPcInstruction, PowerPcInstructionDetail, PowerPcDisassembleMode, PowerPcInstructionGroup, PowerPcInstructionGroupId, PowerPcInstructionId, PowerPcRegister, PowerPcRegisterId> {
    internal PowerPcInstruction(PowerPcInstructionBuilder builder);
    internal static PowerPcInstruction Create(CapstoneDisassembler disassembler, NativeInstructionHandle hInstruction);
}
internal class Gee.External.Capstone.PowerPc.PowerPcInstructionBuilder : InstructionBuilder`8<PowerPcInstructionDetail, PowerPcDisassembleMode, PowerPcInstructionGroup, PowerPcInstructionGroupId, PowerPcInstruction, PowerPcInstructionId, PowerPcRegister, PowerPcRegisterId> {
    internal PowerPcInstruction Create();
    private protected virtual PowerPcInstructionDetail CreateDetails(CapstoneDisassembler disassembler, NativeInstructionHandle hInstruction);
    private protected virtual PowerPcDisassembleMode CreateDisassembleMode(NativeDisassembleMode nativeDisassembleMode);
    private protected virtual PowerPcInstructionId CreateId(int id);
}
public class Gee.External.Capstone.PowerPc.PowerPcInstructionDetail : InstructionDetail`8<PowerPcInstructionDetail, PowerPcDisassembleMode, PowerPcInstructionGroup, PowerPcInstructionGroupId, PowerPcInstruction, PowerPcInstructionId, PowerPcRegister, PowerPcRegisterId> {
    [CompilerGeneratedAttribute]
private PowerPcBranchCode <BranchCode>k__BackingField;
    [CompilerGeneratedAttribute]
private PowerPcBranchHint <BranchHint>k__BackingField;
    [CompilerGeneratedAttribute]
private PowerPcOperand[] <Operands>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UpdateCr0>k__BackingField;
    public PowerPcBranchCode BranchCode { get; }
    public PowerPcBranchHint BranchHint { get; }
    public PowerPcOperand[] Operands { get; }
    public bool UpdateCr0 { get; }
    internal PowerPcInstructionDetail(PowerPcInstructionDetailBuilder builder);
    [CompilerGeneratedAttribute]
public PowerPcBranchCode get_BranchCode();
    [CompilerGeneratedAttribute]
public PowerPcBranchHint get_BranchHint();
    [CompilerGeneratedAttribute]
public PowerPcOperand[] get_Operands();
    [CompilerGeneratedAttribute]
public bool get_UpdateCr0();
    internal static PowerPcInstructionDetail Create(CapstoneDisassembler disassembler, NativeInstructionHandle hInstruction);
}
internal class Gee.External.Capstone.PowerPc.PowerPcInstructionDetailBuilder : InstructionDetailBuilder`8<PowerPcInstructionDetail, PowerPcDisassembleMode, PowerPcInstructionGroup, PowerPcInstructionGroupId, PowerPcInstruction, PowerPcInstructionId, PowerPcRegister, PowerPcRegisterId> {
    [CompilerGeneratedAttribute]
private PowerPcBranchCode <BranchCode>k__BackingField;
    [CompilerGeneratedAttribute]
private PowerPcBranchHint <BranchHint>k__BackingField;
    [CompilerGeneratedAttribute]
private PowerPcOperand[] <Operands>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UpdateCr0>k__BackingField;
    internal PowerPcBranchCode BranchCode { get; private set; }
    internal PowerPcBranchHint BranchHint { get; private set; }
    internal PowerPcOperand[] Operands { get; private set; }
    internal bool UpdateCr0 { get; private set; }
    [CompilerGeneratedAttribute]
internal PowerPcBranchCode get_BranchCode();
    [CompilerGeneratedAttribute]
private void set_BranchCode(PowerPcBranchCode value);
    [CompilerGeneratedAttribute]
internal PowerPcBranchHint get_BranchHint();
    [CompilerGeneratedAttribute]
private void set_BranchHint(PowerPcBranchHint value);
    [CompilerGeneratedAttribute]
internal PowerPcOperand[] get_Operands();
    [CompilerGeneratedAttribute]
private void set_Operands(PowerPcOperand[] value);
    [CompilerGeneratedAttribute]
internal bool get_UpdateCr0();
    [CompilerGeneratedAttribute]
private void set_UpdateCr0(bool value);
    internal virtual void Build(CapstoneDisassembler disassembler, NativeInstructionHandle hInstruction);
    internal PowerPcInstructionDetail Create();
    private protected virtual PowerPcDisassembleMode CreateDisassembleMode(NativeDisassembleMode nativeDisassembleMode);
    private protected virtual PowerPcInstructionGroup CreateInstructionGroup(CapstoneDisassembler disassembler, byte instructionGroupId);
    private protected virtual PowerPcRegister CreateRegister(CapstoneDisassembler disassembler, short registerId);
}
public class Gee.External.Capstone.PowerPc.PowerPcInstructionGroup : InstructionGroup`1<PowerPcInstructionGroupId> {
    internal PowerPcInstructionGroup(PowerPcInstructionGroupId id, string name);
    internal static PowerPcInstructionGroup Create(CapstoneDisassembler disassembler, PowerPcInstructionGroupId id);
}
public enum Gee.External.Capstone.PowerPc.PowerPcInstructionGroupId : Enum {
    public int value__;
    public static PowerPcInstructionGroupId Invalid;
    public static PowerPcInstructionGroupId PPC_GRP_JUMP;
    public static PowerPcInstructionGroupId PPC_GRP_ALTIVEC;
    public static PowerPcInstructionGroupId PPC_GRP_MODE32;
    public static PowerPcInstructionGroupId PPC_GRP_MODE64;
    public static PowerPcInstructionGroupId PPC_GRP_BOOKE;
    public static PowerPcInstructionGroupId PPC_GRP_NOTBOOKE;
    public static PowerPcInstructionGroupId PPC_GRP_SPE;
    public static PowerPcInstructionGroupId PPC_GRP_VSX;
    public static PowerPcInstructionGroupId PPC_GRP_E500;
    public static PowerPcInstructionGroupId PPC_GRP_PPC4XX;
    public static PowerPcInstructionGroupId PPC_GRP_PPC6XX;
    public static PowerPcInstructionGroupId PPC_GRP_ICBT;
    public static PowerPcInstructionGroupId PPC_GRP_P8ALTIVEC;
    public static PowerPcInstructionGroupId PPC_GRP_P8VECTOR;
    public static PowerPcInstructionGroupId PPC_GRP_QPX;
}
public enum Gee.External.Capstone.PowerPc.PowerPcInstructionId : Enum {
    public int value__;
    public static PowerPcInstructionId Invalid;
    public static PowerPcInstructionId PPC_INS_ADD;
    public static PowerPcInstructionId PPC_INS_ADDC;
    public static PowerPcInstructionId PPC_INS_ADDE;
    public static PowerPcInstructionId PPC_INS_ADDI;
    public static PowerPcInstructionId PPC_INS_ADDIC;
    public static PowerPcInstructionId PPC_INS_ADDIS;
    public static PowerPcInstructionId PPC_INS_ADDME;
    public static PowerPcInstructionId PPC_INS_ADDZE;
    public static PowerPcInstructionId PPC_INS_AND;
    public static PowerPcInstructionId PPC_INS_ANDC;
    public static PowerPcInstructionId PPC_INS_ANDIS;
    public static PowerPcInstructionId PPC_INS_ANDI;
    public static PowerPcInstructionId PPC_INS_ATTN;
    public static PowerPcInstructionId PPC_INS_B;
    public static PowerPcInstructionId PPC_INS_BA;
    public static PowerPcInstructionId PPC_INS_BC;
    public static PowerPcInstructionId PPC_INS_BCCTR;
    public static PowerPcInstructionId PPC_INS_BCCTRL;
    public static PowerPcInstructionId PPC_INS_BCL;
    public static PowerPcInstructionId PPC_INS_BCLR;
    public static PowerPcInstructionId PPC_INS_BCLRL;
    public static PowerPcInstructionId PPC_INS_BCTR;
    public static PowerPcInstructionId PPC_INS_BCTRL;
    public static PowerPcInstructionId PPC_INS_BCT;
    public static PowerPcInstructionId PPC_INS_BDNZ;
    public static PowerPcInstructionId PPC_INS_BDNZA;
    public static PowerPcInstructionId PPC_INS_BDNZL;
    public static PowerPcInstructionId PPC_INS_BDNZLA;
    public static PowerPcInstructionId PPC_INS_BDNZLR;
    public static PowerPcInstructionId PPC_INS_BDNZLRL;
    public static PowerPcInstructionId PPC_INS_BDZ;
    public static PowerPcInstructionId PPC_INS_BDZA;
    public static PowerPcInstructionId PPC_INS_BDZL;
    public static PowerPcInstructionId PPC_INS_BDZLA;
    public static PowerPcInstructionId PPC_INS_BDZLR;
    public static PowerPcInstructionId PPC_INS_BDZLRL;
    public static PowerPcInstructionId PPC_INS_BL;
    public static PowerPcInstructionId PPC_INS_BLA;
    public static PowerPcInstructionId PPC_INS_BLR;
    public static PowerPcInstructionId PPC_INS_BLRL;
    public static PowerPcInstructionId PPC_INS_BRINC;
    public static PowerPcInstructionId PPC_INS_CMPB;
    public static PowerPcInstructionId PPC_INS_CMPD;
    public static PowerPcInstructionId PPC_INS_CMPDI;
    public static PowerPcInstructionId PPC_INS_CMPLD;
    public static PowerPcInstructionId PPC_INS_CMPLDI;
    public static PowerPcInstructionId PPC_INS_CMPLW;
    public static PowerPcInstructionId PPC_INS_CMPLWI;
    public static PowerPcInstructionId PPC_INS_CMPW;
    public static PowerPcInstructionId PPC_INS_CMPWI;
    public static PowerPcInstructionId PPC_INS_CNTLZD;
    public static PowerPcInstructionId PPC_INS_CNTLZW;
    public static PowerPcInstructionId PPC_INS_CREQV;
    public static PowerPcInstructionId PPC_INS_CRXOR;
    public static PowerPcInstructionId PPC_INS_CRAND;
    public static PowerPcInstructionId PPC_INS_CRANDC;
    public static PowerPcInstructionId PPC_INS_CRNAND;
    public static PowerPcInstructionId PPC_INS_CRNOR;
    public static PowerPcInstructionId PPC_INS_CROR;
    public static PowerPcInstructionId PPC_INS_CRORC;
    public static PowerPcInstructionId PPC_INS_DCBA;
    public static PowerPcInstructionId PPC_INS_DCBF;
    public static PowerPcInstructionId PPC_INS_DCBI;
    public static PowerPcInstructionId PPC_INS_DCBST;
    public static PowerPcInstructionId PPC_INS_DCBT;
    public static PowerPcInstructionId PPC_INS_DCBTST;
    public static PowerPcInstructionId PPC_INS_DCBZ;
    public static PowerPcInstructionId PPC_INS_DCBZL;
    public static PowerPcInstructionId PPC_INS_DCCCI;
    public static PowerPcInstructionId PPC_INS_DIVD;
    public static PowerPcInstructionId PPC_INS_DIVDU;
    public static PowerPcInstructionId PPC_INS_DIVW;
    public static PowerPcInstructionId PPC_INS_DIVWU;
    public static PowerPcInstructionId PPC_INS_DSS;
    public static PowerPcInstructionId PPC_INS_DSSALL;
    public static PowerPcInstructionId PPC_INS_DST;
    public static PowerPcInstructionId PPC_INS_DSTST;
    public static PowerPcInstructionId PPC_INS_DSTSTT;
    public static PowerPcInstructionId PPC_INS_DSTT;
    public static PowerPcInstructionId PPC_INS_EQV;
    public static PowerPcInstructionId PPC_INS_EVABS;
    public static PowerPcInstructionId PPC_INS_EVADDIW;
    public static PowerPcInstructionId PPC_INS_EVADDSMIAAW;
    public static PowerPcInstructionId PPC_INS_EVADDSSIAAW;
    public static PowerPcInstructionId PPC_INS_EVADDUMIAAW;
    public static PowerPcInstructionId PPC_INS_EVADDUSIAAW;
    public static PowerPcInstructionId PPC_INS_EVADDW;
    public static PowerPcInstructionId PPC_INS_EVAND;
    public static PowerPcInstructionId PPC_INS_EVANDC;
    public static PowerPcInstructionId PPC_INS_EVCMPEQ;
    public static PowerPcInstructionId PPC_INS_EVCMPGTS;
    public static PowerPcInstructionId PPC_INS_EVCMPGTU;
    public static PowerPcInstructionId PPC_INS_EVCMPLTS;
    public static PowerPcInstructionId PPC_INS_EVCMPLTU;
    public static PowerPcInstructionId PPC_INS_EVCNTLSW;
    public static PowerPcInstructionId PPC_INS_EVCNTLZW;
    public static PowerPcInstructionId PPC_INS_EVDIVWS;
    public static PowerPcInstructionId PPC_INS_EVDIVWU;
    public static PowerPcInstructionId PPC_INS_EVEQV;
    public static PowerPcInstructionId PPC_INS_EVEXTSB;
    public static PowerPcInstructionId PPC_INS_EVEXTSH;
    public static PowerPcInstructionId PPC_INS_EVLDD;
    public static PowerPcInstructionId PPC_INS_EVLDDX;
    public static PowerPcInstructionId PPC_INS_EVLDH;
    public static PowerPcInstructionId PPC_INS_EVLDHX;
    public static PowerPcInstructionId PPC_INS_EVLDW;
    public static PowerPcInstructionId PPC_INS_EVLDWX;
    public static PowerPcInstructionId PPC_INS_EVLHHESPLAT;
    public static PowerPcInstructionId PPC_INS_EVLHHESPLATX;
    public static PowerPcInstructionId PPC_INS_EVLHHOSSPLAT;
    public static PowerPcInstructionId PPC_INS_EVLHHOSSPLATX;
    public static PowerPcInstructionId PPC_INS_EVLHHOUSPLAT;
    public static PowerPcInstructionId PPC_INS_EVLHHOUSPLATX;
    public static PowerPcInstructionId PPC_INS_EVLWHE;
    public static PowerPcInstructionId PPC_INS_EVLWHEX;
    public static PowerPcInstructionId PPC_INS_EVLWHOS;
    public static PowerPcInstructionId PPC_INS_EVLWHOSX;
    public static PowerPcInstructionId PPC_INS_EVLWHOU;
    public static PowerPcInstructionId PPC_INS_EVLWHOUX;
    public static PowerPcInstructionId PPC_INS_EVLWHSPLAT;
    public static PowerPcInstructionId PPC_INS_EVLWHSPLATX;
    public static PowerPcInstructionId PPC_INS_EVLWWSPLAT;
    public static PowerPcInstructionId PPC_INS_EVLWWSPLATX;
    public static PowerPcInstructionId PPC_INS_EVMERGEHI;
    public static PowerPcInstructionId PPC_INS_EVMERGEHILO;
    public static PowerPcInstructionId PPC_INS_EVMERGELO;
    public static PowerPcInstructionId PPC_INS_EVMERGELOHI;
    public static PowerPcInstructionId PPC_INS_EVMHEGSMFAA;
    public static PowerPcInstructionId PPC_INS_EVMHEGSMFAN;
    public static PowerPcInstructionId PPC_INS_EVMHEGSMIAA;
    public static PowerPcInstructionId PPC_INS_EVMHEGSMIAN;
    public static PowerPcInstructionId PPC_INS_EVMHEGUMIAA;
    public static PowerPcInstructionId PPC_INS_EVMHEGUMIAN;
    public static PowerPcInstructionId PPC_INS_EVMHESMF;
    public static PowerPcInstructionId PPC_INS_EVMHESMFA;
    public static PowerPcInstructionId PPC_INS_EVMHESMFAAW;
    public static PowerPcInstructionId PPC_INS_EVMHESMFANW;
    public static PowerPcInstructionId PPC_INS_EVMHESMI;
    public static PowerPcInstructionId PPC_INS_EVMHESMIA;
    public static PowerPcInstructionId PPC_INS_EVMHESMIAAW;
    public static PowerPcInstructionId PPC_INS_EVMHESMIANW;
    public static PowerPcInstructionId PPC_INS_EVMHESSF;
    public static PowerPcInstructionId PPC_INS_EVMHESSFA;
    public static PowerPcInstructionId PPC_INS_EVMHESSFAAW;
    public static PowerPcInstructionId PPC_INS_EVMHESSFANW;
    public static PowerPcInstructionId PPC_INS_EVMHESSIAAW;
    public static PowerPcInstructionId PPC_INS_EVMHESSIANW;
    public static PowerPcInstructionId PPC_INS_EVMHEUMI;
    public static PowerPcInstructionId PPC_INS_EVMHEUMIA;
    public static PowerPcInstructionId PPC_INS_EVMHEUMIAAW;
    public static PowerPcInstructionId PPC_INS_EVMHEUMIANW;
    public static PowerPcInstructionId PPC_INS_EVMHEUSIAAW;
    public static PowerPcInstructionId PPC_INS_EVMHEUSIANW;
    public static PowerPcInstructionId PPC_INS_EVMHOGSMFAA;
    public static PowerPcInstructionId PPC_INS_EVMHOGSMFAN;
    public static PowerPcInstructionId PPC_INS_EVMHOGSMIAA;
    public static PowerPcInstructionId PPC_INS_EVMHOGSMIAN;
    public static PowerPcInstructionId PPC_INS_EVMHOGUMIAA;
    public static PowerPcInstructionId PPC_INS_EVMHOGUMIAN;
    public static PowerPcInstructionId PPC_INS_EVMHOSMF;
    public static PowerPcInstructionId PPC_INS_EVMHOSMFA;
    public static PowerPcInstructionId PPC_INS_EVMHOSMFAAW;
    public static PowerPcInstructionId PPC_INS_EVMHOSMFANW;
    public static PowerPcInstructionId PPC_INS_EVMHOSMI;
    public static PowerPcInstructionId PPC_INS_EVMHOSMIA;
    public static PowerPcInstructionId PPC_INS_EVMHOSMIAAW;
    public static PowerPcInstructionId PPC_INS_EVMHOSMIANW;
    public static PowerPcInstructionId PPC_INS_EVMHOSSF;
    public static PowerPcInstructionId PPC_INS_EVMHOSSFA;
    public static PowerPcInstructionId PPC_INS_EVMHOSSFAAW;
    public static PowerPcInstructionId PPC_INS_EVMHOSSFANW;
    public static PowerPcInstructionId PPC_INS_EVMHOSSIAAW;
    public static PowerPcInstructionId PPC_INS_EVMHOSSIANW;
    public static PowerPcInstructionId PPC_INS_EVMHOUMI;
    public static PowerPcInstructionId PPC_INS_EVMHOUMIA;
    public static PowerPcInstructionId PPC_INS_EVMHOUMIAAW;
    public static PowerPcInstructionId PPC_INS_EVMHOUMIANW;
    public static PowerPcInstructionId PPC_INS_EVMHOUSIAAW;
    public static PowerPcInstructionId PPC_INS_EVMHOUSIANW;
    public static PowerPcInstructionId PPC_INS_EVMRA;
    public static PowerPcInstructionId PPC_INS_EVMWHSMF;
    public static PowerPcInstructionId PPC_INS_EVMWHSMFA;
    public static PowerPcInstructionId PPC_INS_EVMWHSMI;
    public static PowerPcInstructionId PPC_INS_EVMWHSMIA;
    public static PowerPcInstructionId PPC_INS_EVMWHSSF;
    public static PowerPcInstructionId PPC_INS_EVMWHSSFA;
    public static PowerPcInstructionId PPC_INS_EVMWHUMI;
    public static PowerPcInstructionId PPC_INS_EVMWHUMIA;
    public static PowerPcInstructionId PPC_INS_EVMWLSMIAAW;
    public static PowerPcInstructionId PPC_INS_EVMWLSMIANW;
    public static PowerPcInstructionId PPC_INS_EVMWLSSIAAW;
    public static PowerPcInstructionId PPC_INS_EVMWLSSIANW;
    public static PowerPcInstructionId PPC_INS_EVMWLUMI;
    public static PowerPcInstructionId PPC_INS_EVMWLUMIA;
    public static PowerPcInstructionId PPC_INS_EVMWLUMIAAW;
    public static PowerPcInstructionId PPC_INS_EVMWLUMIANW;
    public static PowerPcInstructionId PPC_INS_EVMWLUSIAAW;
    public static PowerPcInstructionId PPC_INS_EVMWLUSIANW;
    public static PowerPcInstructionId PPC_INS_EVMWSMF;
    public static PowerPcInstructionId PPC_INS_EVMWSMFA;
    public static PowerPcInstructionId PPC_INS_EVMWSMFAA;
    public static PowerPcInstructionId PPC_INS_EVMWSMFAN;
    public static PowerPcInstructionId PPC_INS_EVMWSMI;
    public static PowerPcInstructionId PPC_INS_EVMWSMIA;
    public static PowerPcInstructionId PPC_INS_EVMWSMIAA;
    public static PowerPcInstructionId PPC_INS_EVMWSMIAN;
    public static PowerPcInstructionId PPC_INS_EVMWSSF;
    public static PowerPcInstructionId PPC_INS_EVMWSSFA;
    public static PowerPcInstructionId PPC_INS_EVMWSSFAA;
    public static PowerPcInstructionId PPC_INS_EVMWSSFAN;
    public static PowerPcInstructionId PPC_INS_EVMWUMI;
    public static PowerPcInstructionId PPC_INS_EVMWUMIA;
    public static PowerPcInstructionId PPC_INS_EVMWUMIAA;
    public static PowerPcInstructionId PPC_INS_EVMWUMIAN;
    public static PowerPcInstructionId PPC_INS_EVNAND;
    public static PowerPcInstructionId PPC_INS_EVNEG;
    public static PowerPcInstructionId PPC_INS_EVNOR;
    public static PowerPcInstructionId PPC_INS_EVOR;
    public static PowerPcInstructionId PPC_INS_EVORC;
    public static PowerPcInstructionId PPC_INS_EVRLW;
    public static PowerPcInstructionId PPC_INS_EVRLWI;
    public static PowerPcInstructionId PPC_INS_EVRNDW;
    public static PowerPcInstructionId PPC_INS_EVSLW;
    public static PowerPcInstructionId PPC_INS_EVSLWI;
    public static PowerPcInstructionId PPC_INS_EVSPLATFI;
    public static PowerPcInstructionId PPC_INS_EVSPLATI;
    public static PowerPcInstructionId PPC_INS_EVSRWIS;
    public static PowerPcInstructionId PPC_INS_EVSRWIU;
    public static PowerPcInstructionId PPC_INS_EVSRWS;
    public static PowerPcInstructionId PPC_INS_EVSRWU;
    public static PowerPcInstructionId PPC_INS_EVSTDD;
    public static PowerPcInstructionId PPC_INS_EVSTDDX;
    public static PowerPcInstructionId PPC_INS_EVSTDH;
    public static PowerPcInstructionId PPC_INS_EVSTDHX;
    public static PowerPcInstructionId PPC_INS_EVSTDW;
    public static PowerPcInstructionId PPC_INS_EVSTDWX;
    public static PowerPcInstructionId PPC_INS_EVSTWHE;
    public static PowerPcInstructionId PPC_INS_EVSTWHEX;
    public static PowerPcInstructionId PPC_INS_EVSTWHO;
    public static PowerPcInstructionId PPC_INS_EVSTWHOX;
    public static PowerPcInstructionId PPC_INS_EVSTWWE;
    public static PowerPcInstructionId PPC_INS_EVSTWWEX;
    public static PowerPcInstructionId PPC_INS_EVSTWWO;
    public static PowerPcInstructionId PPC_INS_EVSTWWOX;
    public static PowerPcInstructionId PPC_INS_EVSUBFSMIAAW;
    public static PowerPcInstructionId PPC_INS_EVSUBFSSIAAW;
    public static PowerPcInstructionId PPC_INS_EVSUBFUMIAAW;
    public static PowerPcInstructionId PPC_INS_EVSUBFUSIAAW;
    public static PowerPcInstructionId PPC_INS_EVSUBFW;
    public static PowerPcInstructionId PPC_INS_EVSUBIFW;
    public static PowerPcInstructionId PPC_INS_EVXOR;
    public static PowerPcInstructionId PPC_INS_EXTSB;
    public static PowerPcInstructionId PPC_INS_EXTSH;
    public static PowerPcInstructionId PPC_INS_EXTSW;
    public static PowerPcInstructionId PPC_INS_EIEIO;
    public static PowerPcInstructionId PPC_INS_FABS;
    public static PowerPcInstructionId PPC_INS_FADD;
    public static PowerPcInstructionId PPC_INS_FADDS;
    public static PowerPcInstructionId PPC_INS_FCFID;
    public static PowerPcInstructionId PPC_INS_FCFIDS;
    public static PowerPcInstructionId PPC_INS_FCFIDU;
    public static PowerPcInstructionId PPC_INS_FCFIDUS;
    public static PowerPcInstructionId PPC_INS_FCMPU;
    public static PowerPcInstructionId PPC_INS_FCPSGN;
    public static PowerPcInstructionId PPC_INS_FCTID;
    public static PowerPcInstructionId PPC_INS_FCTIDUZ;
    public static PowerPcInstructionId PPC_INS_FCTIDZ;
    public static PowerPcInstructionId PPC_INS_FCTIW;
    public static PowerPcInstructionId PPC_INS_FCTIWUZ;
    public static PowerPcInstructionId PPC_INS_FCTIWZ;
    public static PowerPcInstructionId PPC_INS_FDIV;
    public static PowerPcInstructionId PPC_INS_FDIVS;
    public static PowerPcInstructionId PPC_INS_FMADD;
    public static PowerPcInstructionId PPC_INS_FMADDS;
    public static PowerPcInstructionId PPC_INS_FMR;
    public static PowerPcInstructionId PPC_INS_FMSUB;
    public static PowerPcInstructionId PPC_INS_FMSUBS;
    public static PowerPcInstructionId PPC_INS_FMUL;
    public static PowerPcInstructionId PPC_INS_FMULS;
    public static PowerPcInstructionId PPC_INS_FNABS;
    public static PowerPcInstructionId PPC_INS_FNEG;
    public static PowerPcInstructionId PPC_INS_FNMADD;
    public static PowerPcInstructionId PPC_INS_FNMADDS;
    public static PowerPcInstructionId PPC_INS_FNMSUB;
    public static PowerPcInstructionId PPC_INS_FNMSUBS;
    public static PowerPcInstructionId PPC_INS_FRE;
    public static PowerPcInstructionId PPC_INS_FRES;
    public static PowerPcInstructionId PPC_INS_FRIM;
    public static PowerPcInstructionId PPC_INS_FRIN;
    public static PowerPcInstructionId PPC_INS_FRIP;
    public static PowerPcInstructionId PPC_INS_FRIZ;
    public static PowerPcInstructionId PPC_INS_FRSP;
    public static PowerPcInstructionId PPC_INS_FRSQRTE;
    public static PowerPcInstructionId PPC_INS_FRSQRTES;
    public static PowerPcInstructionId PPC_INS_FSEL;
    public static PowerPcInstructionId PPC_INS_FSQRT;
    public static PowerPcInstructionId PPC_INS_FSQRTS;
    public static PowerPcInstructionId PPC_INS_FSUB;
    public static PowerPcInstructionId PPC_INS_FSUBS;
    public static PowerPcInstructionId PPC_INS_ICBI;
    public static PowerPcInstructionId PPC_INS_ICBT;
    public static PowerPcInstructionId PPC_INS_ICCCI;
    public static PowerPcInstructionId PPC_INS_ISEL;
    public static PowerPcInstructionId PPC_INS_ISYNC;
    public static PowerPcInstructionId PPC_INS_LA;
    public static PowerPcInstructionId PPC_INS_LBZ;
    public static PowerPcInstructionId PPC_INS_LBZCIX;
    public static PowerPcInstructionId PPC_INS_LBZU;
    public static PowerPcInstructionId PPC_INS_LBZUX;
    public static PowerPcInstructionId PPC_INS_LBZX;
    public static PowerPcInstructionId PPC_INS_LD;
    public static PowerPcInstructionId PPC_INS_LDARX;
    public static PowerPcInstructionId PPC_INS_LDBRX;
    public static PowerPcInstructionId PPC_INS_LDCIX;
    public static PowerPcInstructionId PPC_INS_LDU;
    public static PowerPcInstructionId PPC_INS_LDUX;
    public static PowerPcInstructionId PPC_INS_LDX;
    public static PowerPcInstructionId PPC_INS_LFD;
    public static PowerPcInstructionId PPC_INS_LFDU;
    public static PowerPcInstructionId PPC_INS_LFDUX;
    public static PowerPcInstructionId PPC_INS_LFDX;
    public static PowerPcInstructionId PPC_INS_LFIWAX;
    public static PowerPcInstructionId PPC_INS_LFIWZX;
    public static PowerPcInstructionId PPC_INS_LFS;
    public static PowerPcInstructionId PPC_INS_LFSU;
    public static PowerPcInstructionId PPC_INS_LFSUX;
    public static PowerPcInstructionId PPC_INS_LFSX;
    public static PowerPcInstructionId PPC_INS_LHA;
    public static PowerPcInstructionId PPC_INS_LHAU;
    public static PowerPcInstructionId PPC_INS_LHAUX;
    public static PowerPcInstructionId PPC_INS_LHAX;
    public static PowerPcInstructionId PPC_INS_LHBRX;
    public static PowerPcInstructionId PPC_INS_LHZ;
    public static PowerPcInstructionId PPC_INS_LHZCIX;
    public static PowerPcInstructionId PPC_INS_LHZU;
    public static PowerPcInstructionId PPC_INS_LHZUX;
    public static PowerPcInstructionId PPC_INS_LHZX;
    public static PowerPcInstructionId PPC_INS_LI;
    public static PowerPcInstructionId PPC_INS_LIS;
    public static PowerPcInstructionId PPC_INS_LMW;
    public static PowerPcInstructionId PPC_INS_LSWI;
    public static PowerPcInstructionId PPC_INS_LVEBX;
    public static PowerPcInstructionId PPC_INS_LVEHX;
    public static PowerPcInstructionId PPC_INS_LVEWX;
    public static PowerPcInstructionId PPC_INS_LVSL;
    public static PowerPcInstructionId PPC_INS_LVSR;
    public static PowerPcInstructionId PPC_INS_LVX;
    public static PowerPcInstructionId PPC_INS_LVXL;
    public static PowerPcInstructionId PPC_INS_LWA;
    public static PowerPcInstructionId PPC_INS_LWARX;
    public static PowerPcInstructionId PPC_INS_LWAUX;
    public static PowerPcInstructionId PPC_INS_LWAX;
    public static PowerPcInstructionId PPC_INS_LWBRX;
    public static PowerPcInstructionId PPC_INS_LWZ;
    public static PowerPcInstructionId PPC_INS_LWZCIX;
    public static PowerPcInstructionId PPC_INS_LWZU;
    public static PowerPcInstructionId PPC_INS_LWZUX;
    public static PowerPcInstructionId PPC_INS_LWZX;
    public static PowerPcInstructionId PPC_INS_LXSDX;
    public static PowerPcInstructionId PPC_INS_LXVD2X;
    public static PowerPcInstructionId PPC_INS_LXVDSX;
    public static PowerPcInstructionId PPC_INS_LXVW4X;
    public static PowerPcInstructionId PPC_INS_MBAR;
    public static PowerPcInstructionId PPC_INS_MCRF;
    public static PowerPcInstructionId PPC_INS_MCRFS;
    public static PowerPcInstructionId PPC_INS_MFCR;
    public static PowerPcInstructionId PPC_INS_MFCTR;
    public static PowerPcInstructionId PPC_INS_MFDCR;
    public static PowerPcInstructionId PPC_INS_MFFS;
    public static PowerPcInstructionId PPC_INS_MFLR;
    public static PowerPcInstructionId PPC_INS_MFMSR;
    public static PowerPcInstructionId PPC_INS_MFOCRF;
    public static PowerPcInstructionId PPC_INS_MFSPR;
    public static PowerPcInstructionId PPC_INS_MFSR;
    public static PowerPcInstructionId PPC_INS_MFSRIN;
    public static PowerPcInstructionId PPC_INS_MFTB;
    public static PowerPcInstructionId PPC_INS_MFVSCR;
    public static PowerPcInstructionId PPC_INS_MSYNC;
    public static PowerPcInstructionId PPC_INS_MTCRF;
    public static PowerPcInstructionId PPC_INS_MTCTR;
    public static PowerPcInstructionId PPC_INS_MTDCR;
    public static PowerPcInstructionId PPC_INS_MTFSB0;
    public static PowerPcInstructionId PPC_INS_MTFSB1;
    public static PowerPcInstructionId PPC_INS_MTFSF;
    public static PowerPcInstructionId PPC_INS_MTFSFI;
    public static PowerPcInstructionId PPC_INS_MTLR;
    public static PowerPcInstructionId PPC_INS_MTMSR;
    public static PowerPcInstructionId PPC_INS_MTMSRD;
    public static PowerPcInstructionId PPC_INS_MTOCRF;
    public static PowerPcInstructionId PPC_INS_MTSPR;
    public static PowerPcInstructionId PPC_INS_MTSR;
    public static PowerPcInstructionId PPC_INS_MTSRIN;
    public static PowerPcInstructionId PPC_INS_MTVSCR;
    public static PowerPcInstructionId PPC_INS_MULHD;
    public static PowerPcInstructionId PPC_INS_MULHDU;
    public static PowerPcInstructionId PPC_INS_MULHW;
    public static PowerPcInstructionId PPC_INS_MULHWU;
    public static PowerPcInstructionId PPC_INS_MULLD;
    public static PowerPcInstructionId PPC_INS_MULLI;
    public static PowerPcInstructionId PPC_INS_MULLW;
    public static PowerPcInstructionId PPC_INS_NAND;
    public static PowerPcInstructionId PPC_INS_NEG;
    public static PowerPcInstructionId PPC_INS_NOP;
    public static PowerPcInstructionId PPC_INS_ORI;
    public static PowerPcInstructionId PPC_INS_NOR;
    public static PowerPcInstructionId PPC_INS_OR;
    public static PowerPcInstructionId PPC_INS_ORC;
    public static PowerPcInstructionId PPC_INS_ORIS;
    public static PowerPcInstructionId PPC_INS_POPCNTD;
    public static PowerPcInstructionId PPC_INS_POPCNTW;
    public static PowerPcInstructionId PPC_INS_QVALIGNI;
    public static PowerPcInstructionId PPC_INS_QVESPLATI;
    public static PowerPcInstructionId PPC_INS_QVFABS;
    public static PowerPcInstructionId PPC_INS_QVFADD;
    public static PowerPcInstructionId PPC_INS_QVFADDS;
    public static PowerPcInstructionId PPC_INS_QVFCFID;
    public static PowerPcInstructionId PPC_INS_QVFCFIDS;
    public static PowerPcInstructionId PPC_INS_QVFCFIDU;
    public static PowerPcInstructionId PPC_INS_QVFCFIDUS;
    public static PowerPcInstructionId PPC_INS_QVFCMPEQ;
    public static PowerPcInstructionId PPC_INS_QVFCMPGT;
    public static PowerPcInstructionId PPC_INS_QVFCMPLT;
    public static PowerPcInstructionId PPC_INS_QVFCPSGN;
    public static PowerPcInstructionId PPC_INS_QVFCTID;
    public static PowerPcInstructionId PPC_INS_QVFCTIDU;
    public static PowerPcInstructionId PPC_INS_QVFCTIDUZ;
    public static PowerPcInstructionId PPC_INS_QVFCTIDZ;
    public static PowerPcInstructionId PPC_INS_QVFCTIW;
    public static PowerPcInstructionId PPC_INS_QVFCTIWU;
    public static PowerPcInstructionId PPC_INS_QVFCTIWUZ;
    public static PowerPcInstructionId PPC_INS_QVFCTIWZ;
    public static PowerPcInstructionId PPC_INS_QVFLOGICAL;
    public static PowerPcInstructionId PPC_INS_QVFMADD;
    public static PowerPcInstructionId PPC_INS_QVFMADDS;
    public static PowerPcInstructionId PPC_INS_QVFMR;
    public static PowerPcInstructionId PPC_INS_QVFMSUB;
    public static PowerPcInstructionId PPC_INS_QVFMSUBS;
    public static PowerPcInstructionId PPC_INS_QVFMUL;
    public static PowerPcInstructionId PPC_INS_QVFMULS;
    public static PowerPcInstructionId PPC_INS_QVFNABS;
    public static PowerPcInstructionId PPC_INS_QVFNEG;
    public static PowerPcInstructionId PPC_INS_QVFNMADD;
    public static PowerPcInstructionId PPC_INS_QVFNMADDS;
    public static PowerPcInstructionId PPC_INS_QVFNMSUB;
    public static PowerPcInstructionId PPC_INS_QVFNMSUBS;
    public static PowerPcInstructionId PPC_INS_QVFPERM;
    public static PowerPcInstructionId PPC_INS_QVFRE;
    public static PowerPcInstructionId PPC_INS_QVFRES;
    public static PowerPcInstructionId PPC_INS_QVFRIM;
    public static PowerPcInstructionId PPC_INS_QVFRIN;
    public static PowerPcInstructionId PPC_INS_QVFRIP;
    public static PowerPcInstructionId PPC_INS_QVFRIZ;
    public static PowerPcInstructionId PPC_INS_QVFRSP;
    public static PowerPcInstructionId PPC_INS_QVFRSQRTE;
    public static PowerPcInstructionId PPC_INS_QVFRSQRTES;
    public static PowerPcInstructionId PPC_INS_QVFSEL;
    public static PowerPcInstructionId PPC_INS_QVFSUB;
    public static PowerPcInstructionId PPC_INS_QVFSUBS;
    public static PowerPcInstructionId PPC_INS_QVFTSTNAN;
    public static PowerPcInstructionId PPC_INS_QVFXMADD;
    public static PowerPcInstructionId PPC_INS_QVFXMADDS;
    public static PowerPcInstructionId PPC_INS_QVFXMUL;
    public static PowerPcInstructionId PPC_INS_QVFXMULS;
    public static PowerPcInstructionId PPC_INS_QVFXXCPNMADD;
    public static PowerPcInstructionId PPC_INS_QVFXXCPNMADDS;
    public static PowerPcInstructionId PPC_INS_QVFXXMADD;
    public static PowerPcInstructionId PPC_INS_QVFXXMADDS;
    public static PowerPcInstructionId PPC_INS_QVFXXNPMADD;
    public static PowerPcInstructionId PPC_INS_QVFXXNPMADDS;
    public static PowerPcInstructionId PPC_INS_QVGPCI;
    public static PowerPcInstructionId PPC_INS_QVLFCDUX;
    public static PowerPcInstructionId PPC_INS_QVLFCDUXA;
    public static PowerPcInstructionId PPC_INS_QVLFCDX;
    public static PowerPcInstructionId PPC_INS_QVLFCDXA;
    public static PowerPcInstructionId PPC_INS_QVLFCSUX;
    public static PowerPcInstructionId PPC_INS_QVLFCSUXA;
    public static PowerPcInstructionId PPC_INS_QVLFCSX;
    public static PowerPcInstructionId PPC_INS_QVLFCSXA;
    public static PowerPcInstructionId PPC_INS_QVLFDUX;
    public static PowerPcInstructionId PPC_INS_QVLFDUXA;
    public static PowerPcInstructionId PPC_INS_QVLFDX;
    public static PowerPcInstructionId PPC_INS_QVLFDXA;
    public static PowerPcInstructionId PPC_INS_QVLFIWAX;
    public static PowerPcInstructionId PPC_INS_QVLFIWAXA;
    public static PowerPcInstructionId PPC_INS_QVLFIWZX;
    public static PowerPcInstructionId PPC_INS_QVLFIWZXA;
    public static PowerPcInstructionId PPC_INS_QVLFSUX;
    public static PowerPcInstructionId PPC_INS_QVLFSUXA;
    public static PowerPcInstructionId PPC_INS_QVLFSX;
    public static PowerPcInstructionId PPC_INS_QVLFSXA;
    public static PowerPcInstructionId PPC_INS_QVLPCLDX;
    public static PowerPcInstructionId PPC_INS_QVLPCLSX;
    public static PowerPcInstructionId PPC_INS_QVLPCRDX;
    public static PowerPcInstructionId PPC_INS_QVLPCRSX;
    public static PowerPcInstructionId PPC_INS_QVSTFCDUX;
    public static PowerPcInstructionId PPC_INS_QVSTFCDUXA;
    public static PowerPcInstructionId PPC_INS_QVSTFCDUXI;
    public static PowerPcInstructionId PPC_INS_QVSTFCDUXIA;
    public static PowerPcInstructionId PPC_INS_QVSTFCDX;
    public static PowerPcInstructionId PPC_INS_QVSTFCDXA;
    public static PowerPcInstructionId PPC_INS_QVSTFCDXI;
    public static PowerPcInstructionId PPC_INS_QVSTFCDXIA;
    public static PowerPcInstructionId PPC_INS_QVSTFCSUX;
    public static PowerPcInstructionId PPC_INS_QVSTFCSUXA;
    public static PowerPcInstructionId PPC_INS_QVSTFCSUXI;
    public static PowerPcInstructionId PPC_INS_QVSTFCSUXIA;
    public static PowerPcInstructionId PPC_INS_QVSTFCSX;
    public static PowerPcInstructionId PPC_INS_QVSTFCSXA;
    public static PowerPcInstructionId PPC_INS_QVSTFCSXI;
    public static PowerPcInstructionId PPC_INS_QVSTFCSXIA;
    public static PowerPcInstructionId PPC_INS_QVSTFDUX;
    public static PowerPcInstructionId PPC_INS_QVSTFDUXA;
    public static PowerPcInstructionId PPC_INS_QVSTFDUXI;
    public static PowerPcInstructionId PPC_INS_QVSTFDUXIA;
    public static PowerPcInstructionId PPC_INS_QVSTFDX;
    public static PowerPcInstructionId PPC_INS_QVSTFDXA;
    public static PowerPcInstructionId PPC_INS_QVSTFDXI;
    public static PowerPcInstructionId PPC_INS_QVSTFDXIA;
    public static PowerPcInstructionId PPC_INS_QVSTFIWX;
    public static PowerPcInstructionId PPC_INS_QVSTFIWXA;
    public static PowerPcInstructionId PPC_INS_QVSTFSUX;
    public static PowerPcInstructionId PPC_INS_QVSTFSUXA;
    public static PowerPcInstructionId PPC_INS_QVSTFSUXI;
    public static PowerPcInstructionId PPC_INS_QVSTFSUXIA;
    public static PowerPcInstructionId PPC_INS_QVSTFSX;
    public static PowerPcInstructionId PPC_INS_QVSTFSXA;
    public static PowerPcInstructionId PPC_INS_QVSTFSXI;
    public static PowerPcInstructionId PPC_INS_QVSTFSXIA;
    public static PowerPcInstructionId PPC_INS_RFCI;
    public static PowerPcInstructionId PPC_INS_RFDI;
    public static PowerPcInstructionId PPC_INS_RFI;
    public static PowerPcInstructionId PPC_INS_RFID;
    public static PowerPcInstructionId PPC_INS_RFMCI;
    public static PowerPcInstructionId PPC_INS_RLDCL;
    public static PowerPcInstructionId PPC_INS_RLDCR;
    public static PowerPcInstructionId PPC_INS_RLDIC;
    public static PowerPcInstructionId PPC_INS_RLDICL;
    public static PowerPcInstructionId PPC_INS_RLDICR;
    public static PowerPcInstructionId PPC_INS_RLDIMI;
    public static PowerPcInstructionId PPC_INS_RLWIMI;
    public static PowerPcInstructionId PPC_INS_RLWINM;
    public static PowerPcInstructionId PPC_INS_RLWNM;
    public static PowerPcInstructionId PPC_INS_SC;
    public static PowerPcInstructionId PPC_INS_SLBIA;
    public static PowerPcInstructionId PPC_INS_SLBIE;
    public static PowerPcInstructionId PPC_INS_SLBMFEE;
    public static PowerPcInstructionId PPC_INS_SLBMTE;
    public static PowerPcInstructionId PPC_INS_SLD;
    public static PowerPcInstructionId PPC_INS_SLW;
    public static PowerPcInstructionId PPC_INS_SRAD;
    public static PowerPcInstructionId PPC_INS_SRADI;
    public static PowerPcInstructionId PPC_INS_SRAW;
    public static PowerPcInstructionId PPC_INS_SRAWI;
    public static PowerPcInstructionId PPC_INS_SRD;
    public static PowerPcInstructionId PPC_INS_SRW;
    public static PowerPcInstructionId PPC_INS_STB;
    public static PowerPcInstructionId PPC_INS_STBCIX;
    public static PowerPcInstructionId PPC_INS_STBU;
    public static PowerPcInstructionId PPC_INS_STBUX;
    public static PowerPcInstructionId PPC_INS_STBX;
    public static PowerPcInstructionId PPC_INS_STD;
    public static PowerPcInstructionId PPC_INS_STDBRX;
    public static PowerPcInstructionId PPC_INS_STDCIX;
    public static PowerPcInstructionId PPC_INS_STDCX;
    public static PowerPcInstructionId PPC_INS_STDU;
    public static PowerPcInstructionId PPC_INS_STDUX;
    public static PowerPcInstructionId PPC_INS_STDX;
    public static PowerPcInstructionId PPC_INS_STFD;
    public static PowerPcInstructionId PPC_INS_STFDU;
    public static PowerPcInstructionId PPC_INS_STFDUX;
    public static PowerPcInstructionId PPC_INS_STFDX;
    public static PowerPcInstructionId PPC_INS_STFIWX;
    public static PowerPcInstructionId PPC_INS_STFS;
    public static PowerPcInstructionId PPC_INS_STFSU;
    public static PowerPcInstructionId PPC_INS_STFSUX;
    public static PowerPcInstructionId PPC_INS_STFSX;
    public static PowerPcInstructionId PPC_INS_STH;
    public static PowerPcInstructionId PPC_INS_STHBRX;
    public static PowerPcInstructionId PPC_INS_STHCIX;
    public static PowerPcInstructionId PPC_INS_STHU;
    public static PowerPcInstructionId PPC_INS_STHUX;
    public static PowerPcInstructionId PPC_INS_STHX;
    public static PowerPcInstructionId PPC_INS_STMW;
    public static PowerPcInstructionId PPC_INS_STSWI;
    public static PowerPcInstructionId PPC_INS_STVEBX;
    public static PowerPcInstructionId PPC_INS_STVEHX;
    public static PowerPcInstructionId PPC_INS_STVEWX;
    public static PowerPcInstructionId PPC_INS_STVX;
    public static PowerPcInstructionId PPC_INS_STVXL;
    public static PowerPcInstructionId PPC_INS_STW;
    public static PowerPcInstructionId PPC_INS_STWBRX;
    public static PowerPcInstructionId PPC_INS_STWCIX;
    public static PowerPcInstructionId PPC_INS_STWCX;
    public static PowerPcInstructionId PPC_INS_STWU;
    public static PowerPcInstructionId PPC_INS_STWUX;
    public static PowerPcInstructionId PPC_INS_STWX;
    public static PowerPcInstructionId PPC_INS_STXSDX;
    public static PowerPcInstructionId PPC_INS_STXVD2X;
    public static PowerPcInstructionId PPC_INS_STXVW4X;
    public static PowerPcInstructionId PPC_INS_SUBF;
    public static PowerPcInstructionId PPC_INS_SUBFC;
    public static PowerPcInstructionId PPC_INS_SUBFE;
    public static PowerPcInstructionId PPC_INS_SUBFIC;
    public static PowerPcInstructionId PPC_INS_SUBFME;
    public static PowerPcInstructionId PPC_INS_SUBFZE;
    public static PowerPcInstructionId PPC_INS_SYNC;
    public static PowerPcInstructionId PPC_INS_TD;
    public static PowerPcInstructionId PPC_INS_TDI;
    public static PowerPcInstructionId PPC_INS_TLBIA;
    public static PowerPcInstructionId PPC_INS_TLBIE;
    public static PowerPcInstructionId PPC_INS_TLBIEL;
    public static PowerPcInstructionId PPC_INS_TLBIVAX;
    public static PowerPcInstructionId PPC_INS_TLBLD;
    public static PowerPcInstructionId PPC_INS_TLBLI;
    public static PowerPcInstructionId PPC_INS_TLBRE;
    public static PowerPcInstructionId PPC_INS_TLBSX;
    public static PowerPcInstructionId PPC_INS_TLBSYNC;
    public static PowerPcInstructionId PPC_INS_TLBWE;
    public static PowerPcInstructionId PPC_INS_TRAP;
    public static PowerPcInstructionId PPC_INS_TW;
    public static PowerPcInstructionId PPC_INS_TWI;
    public static PowerPcInstructionId PPC_INS_VADDCUW;
    public static PowerPcInstructionId PPC_INS_VADDFP;
    public static PowerPcInstructionId PPC_INS_VADDSBS;
    public static PowerPcInstructionId PPC_INS_VADDSHS;
    public static PowerPcInstructionId PPC_INS_VADDSWS;
    public static PowerPcInstructionId PPC_INS_VADDUBM;
    public static PowerPcInstructionId PPC_INS_VADDUBS;
    public static PowerPcInstructionId PPC_INS_VADDUDM;
    public static PowerPcInstructionId PPC_INS_VADDUHM;
    public static PowerPcInstructionId PPC_INS_VADDUHS;
    public static PowerPcInstructionId PPC_INS_VADDUWM;
    public static PowerPcInstructionId PPC_INS_VADDUWS;
    public static PowerPcInstructionId PPC_INS_VAND;
    public static PowerPcInstructionId PPC_INS_VANDC;
    public static PowerPcInstructionId PPC_INS_VAVGSB;
    public static PowerPcInstructionId PPC_INS_VAVGSH;
    public static PowerPcInstructionId PPC_INS_VAVGSW;
    public static PowerPcInstructionId PPC_INS_VAVGUB;
    public static PowerPcInstructionId PPC_INS_VAVGUH;
    public static PowerPcInstructionId PPC_INS_VAVGUW;
    public static PowerPcInstructionId PPC_INS_VCFSX;
    public static PowerPcInstructionId PPC_INS_VCFUX;
    public static PowerPcInstructionId PPC_INS_VCLZB;
    public static PowerPcInstructionId PPC_INS_VCLZD;
    public static PowerPcInstructionId PPC_INS_VCLZH;
    public static PowerPcInstructionId PPC_INS_VCLZW;
    public static PowerPcInstructionId PPC_INS_VCMPBFP;
    public static PowerPcInstructionId PPC_INS_VCMPEQFP;
    public static PowerPcInstructionId PPC_INS_VCMPEQUB;
    public static PowerPcInstructionId PPC_INS_VCMPEQUD;
    public static PowerPcInstructionId PPC_INS_VCMPEQUH;
    public static PowerPcInstructionId PPC_INS_VCMPEQUW;
    public static PowerPcInstructionId PPC_INS_VCMPGEFP;
    public static PowerPcInstructionId PPC_INS_VCMPGTFP;
    public static PowerPcInstructionId PPC_INS_VCMPGTSB;
    public static PowerPcInstructionId PPC_INS_VCMPGTSD;
    public static PowerPcInstructionId PPC_INS_VCMPGTSH;
    public static PowerPcInstructionId PPC_INS_VCMPGTSW;
    public static PowerPcInstructionId PPC_INS_VCMPGTUB;
    public static PowerPcInstructionId PPC_INS_VCMPGTUD;
    public static PowerPcInstructionId PPC_INS_VCMPGTUH;
    public static PowerPcInstructionId PPC_INS_VCMPGTUW;
    public static PowerPcInstructionId PPC_INS_VCTSXS;
    public static PowerPcInstructionId PPC_INS_VCTUXS;
    public static PowerPcInstructionId PPC_INS_VEQV;
    public static PowerPcInstructionId PPC_INS_VEXPTEFP;
    public static PowerPcInstructionId PPC_INS_VLOGEFP;
    public static PowerPcInstructionId PPC_INS_VMADDFP;
    public static PowerPcInstructionId PPC_INS_VMAXFP;
    public static PowerPcInstructionId PPC_INS_VMAXSB;
    public static PowerPcInstructionId PPC_INS_VMAXSD;
    public static PowerPcInstructionId PPC_INS_VMAXSH;
    public static PowerPcInstructionId PPC_INS_VMAXSW;
    public static PowerPcInstructionId PPC_INS_VMAXUB;
    public static PowerPcInstructionId PPC_INS_VMAXUD;
    public static PowerPcInstructionId PPC_INS_VMAXUH;
    public static PowerPcInstructionId PPC_INS_VMAXUW;
    public static PowerPcInstructionId PPC_INS_VMHADDSHS;
    public static PowerPcInstructionId PPC_INS_VMHRADDSHS;
    public static PowerPcInstructionId PPC_INS_VMINUD;
    public static PowerPcInstructionId PPC_INS_VMINFP;
    public static PowerPcInstructionId PPC_INS_VMINSB;
    public static PowerPcInstructionId PPC_INS_VMINSD;
    public static PowerPcInstructionId PPC_INS_VMINSH;
    public static PowerPcInstructionId PPC_INS_VMINSW;
    public static PowerPcInstructionId PPC_INS_VMINUB;
    public static PowerPcInstructionId PPC_INS_VMINUH;
    public static PowerPcInstructionId PPC_INS_VMINUW;
    public static PowerPcInstructionId PPC_INS_VMLADDUHM;
    public static PowerPcInstructionId PPC_INS_VMRGHB;
    public static PowerPcInstructionId PPC_INS_VMRGHH;
    public static PowerPcInstructionId PPC_INS_VMRGHW;
    public static PowerPcInstructionId PPC_INS_VMRGLB;
    public static PowerPcInstructionId PPC_INS_VMRGLH;
    public static PowerPcInstructionId PPC_INS_VMRGLW;
    public static PowerPcInstructionId PPC_INS_VMSUMMBM;
    public static PowerPcInstructionId PPC_INS_VMSUMSHM;
    public static PowerPcInstructionId PPC_INS_VMSUMSHS;
    public static PowerPcInstructionId PPC_INS_VMSUMUBM;
    public static PowerPcInstructionId PPC_INS_VMSUMUHM;
    public static PowerPcInstructionId PPC_INS_VMSUMUHS;
    public static PowerPcInstructionId PPC_INS_VMULESB;
    public static PowerPcInstructionId PPC_INS_VMULESH;
    public static PowerPcInstructionId PPC_INS_VMULESW;
    public static PowerPcInstructionId PPC_INS_VMULEUB;
    public static PowerPcInstructionId PPC_INS_VMULEUH;
    public static PowerPcInstructionId PPC_INS_VMULEUW;
    public static PowerPcInstructionId PPC_INS_VMULOSB;
    public static PowerPcInstructionId PPC_INS_VMULOSH;
    public static PowerPcInstructionId PPC_INS_VMULOSW;
    public static PowerPcInstructionId PPC_INS_VMULOUB;
    public static PowerPcInstructionId PPC_INS_VMULOUH;
    public static PowerPcInstructionId PPC_INS_VMULOUW;
    public static PowerPcInstructionId PPC_INS_VMULUWM;
    public static PowerPcInstructionId PPC_INS_VNAND;
    public static PowerPcInstructionId PPC_INS_VNMSUBFP;
    public static PowerPcInstructionId PPC_INS_VNOR;
    public static PowerPcInstructionId PPC_INS_VOR;
    public static PowerPcInstructionId PPC_INS_VORC;
    public static PowerPcInstructionId PPC_INS_VPERM;
    public static PowerPcInstructionId PPC_INS_VPKPX;
    public static PowerPcInstructionId PPC_INS_VPKSHSS;
    public static PowerPcInstructionId PPC_INS_VPKSHUS;
    public static PowerPcInstructionId PPC_INS_VPKSWSS;
    public static PowerPcInstructionId PPC_INS_VPKSWUS;
    public static PowerPcInstructionId PPC_INS_VPKUHUM;
    public static PowerPcInstructionId PPC_INS_VPKUHUS;
    public static PowerPcInstructionId PPC_INS_VPKUWUM;
    public static PowerPcInstructionId PPC_INS_VPKUWUS;
    public static PowerPcInstructionId PPC_INS_VPOPCNTB;
    public static PowerPcInstructionId PPC_INS_VPOPCNTD;
    public static PowerPcInstructionId PPC_INS_VPOPCNTH;
    public static PowerPcInstructionId PPC_INS_VPOPCNTW;
    public static PowerPcInstructionId PPC_INS_VREFP;
    public static PowerPcInstructionId PPC_INS_VRFIM;
    public static PowerPcInstructionId PPC_INS_VRFIN;
    public static PowerPcInstructionId PPC_INS_VRFIP;
    public static PowerPcInstructionId PPC_INS_VRFIZ;
    public static PowerPcInstructionId PPC_INS_VRLB;
    public static PowerPcInstructionId PPC_INS_VRLD;
    public static PowerPcInstructionId PPC_INS_VRLH;
    public static PowerPcInstructionId PPC_INS_VRLW;
    public static PowerPcInstructionId PPC_INS_VRSQRTEFP;
    public static PowerPcInstructionId PPC_INS_VSEL;
    public static PowerPcInstructionId PPC_INS_VSL;
    public static PowerPcInstructionId PPC_INS_VSLB;
    public static PowerPcInstructionId PPC_INS_VSLD;
    public static PowerPcInstructionId PPC_INS_VSLDOI;
    public static PowerPcInstructionId PPC_INS_VSLH;
    public static PowerPcInstructionId PPC_INS_VSLO;
    public static PowerPcInstructionId PPC_INS_VSLW;
    public static PowerPcInstructionId PPC_INS_VSPLTB;
    public static PowerPcInstructionId PPC_INS_VSPLTH;
    public static PowerPcInstructionId PPC_INS_VSPLTISB;
    public static PowerPcInstructionId PPC_INS_VSPLTISH;
    public static PowerPcInstructionId PPC_INS_VSPLTISW;
    public static PowerPcInstructionId PPC_INS_VSPLTW;
    public static PowerPcInstructionId PPC_INS_VSR;
    public static PowerPcInstructionId PPC_INS_VSRAB;
    public static PowerPcInstructionId PPC_INS_VSRAD;
    public static PowerPcInstructionId PPC_INS_VSRAH;
    public static PowerPcInstructionId PPC_INS_VSRAW;
    public static PowerPcInstructionId PPC_INS_VSRB;
    public static PowerPcInstructionId PPC_INS_VSRD;
    public static PowerPcInstructionId PPC_INS_VSRH;
    public static PowerPcInstructionId PPC_INS_VSRO;
    public static PowerPcInstructionId PPC_INS_VSRW;
    public static PowerPcInstructionId PPC_INS_VSUBCUW;
    public static PowerPcInstructionId PPC_INS_VSUBFP;
    public static PowerPcInstructionId PPC_INS_VSUBSBS;
    public static PowerPcInstructionId PPC_INS_VSUBSHS;
    public static PowerPcInstructionId PPC_INS_VSUBSWS;
    public static PowerPcInstructionId PPC_INS_VSUBUBM;
    public static PowerPcInstructionId PPC_INS_VSUBUBS;
    public static PowerPcInstructionId PPC_INS_VSUBUDM;
    public static PowerPcInstructionId PPC_INS_VSUBUHM;
    public static PowerPcInstructionId PPC_INS_VSUBUHS;
    public static PowerPcInstructionId PPC_INS_VSUBUWM;
    public static PowerPcInstructionId PPC_INS_VSUBUWS;
    public static PowerPcInstructionId PPC_INS_VSUM2SWS;
    public static PowerPcInstructionId PPC_INS_VSUM4SBS;
    public static PowerPcInstructionId PPC_INS_VSUM4SHS;
    public static PowerPcInstructionId PPC_INS_VSUM4UBS;
    public static PowerPcInstructionId PPC_INS_VSUMSWS;
    public static PowerPcInstructionId PPC_INS_VUPKHPX;
    public static PowerPcInstructionId PPC_INS_VUPKHSB;
    public static PowerPcInstructionId PPC_INS_VUPKHSH;
    public static PowerPcInstructionId PPC_INS_VUPKLPX;
    public static PowerPcInstructionId PPC_INS_VUPKLSB;
    public static PowerPcInstructionId PPC_INS_VUPKLSH;
    public static PowerPcInstructionId PPC_INS_VXOR;
    public static PowerPcInstructionId PPC_INS_WAIT;
    public static PowerPcInstructionId PPC_INS_WRTEE;
    public static PowerPcInstructionId PPC_INS_WRTEEI;
    public static PowerPcInstructionId PPC_INS_XOR;
    public static PowerPcInstructionId PPC_INS_XORI;
    public static PowerPcInstructionId PPC_INS_XORIS;
    public static PowerPcInstructionId PPC_INS_XSABSDP;
    public static PowerPcInstructionId PPC_INS_XSADDDP;
    public static PowerPcInstructionId PPC_INS_XSCMPODP;
    public static PowerPcInstructionId PPC_INS_XSCMPUDP;
    public static PowerPcInstructionId PPC_INS_XSCPSGNDP;
    public static PowerPcInstructionId PPC_INS_XSCVDPSP;
    public static PowerPcInstructionId PPC_INS_XSCVDPSXDS;
    public static PowerPcInstructionId PPC_INS_XSCVDPSXWS;
    public static PowerPcInstructionId PPC_INS_XSCVDPUXDS;
    public static PowerPcInstructionId PPC_INS_XSCVDPUXWS;
    public static PowerPcInstructionId PPC_INS_XSCVSPDP;
    public static PowerPcInstructionId PPC_INS_XSCVSXDDP;
    public static PowerPcInstructionId PPC_INS_XSCVUXDDP;
    public static PowerPcInstructionId PPC_INS_XSDIVDP;
    public static PowerPcInstructionId PPC_INS_XSMADDADP;
    public static PowerPcInstructionId PPC_INS_XSMADDMDP;
    public static PowerPcInstructionId PPC_INS_XSMAXDP;
    public static PowerPcInstructionId PPC_INS_XSMINDP;
    public static PowerPcInstructionId PPC_INS_XSMSUBADP;
    public static PowerPcInstructionId PPC_INS_XSMSUBMDP;
    public static PowerPcInstructionId PPC_INS_XSMULDP;
    public static PowerPcInstructionId PPC_INS_XSNABSDP;
    public static PowerPcInstructionId PPC_INS_XSNEGDP;
    public static PowerPcInstructionId PPC_INS_XSNMADDADP;
    public static PowerPcInstructionId PPC_INS_XSNMADDMDP;
    public static PowerPcInstructionId PPC_INS_XSNMSUBADP;
    public static PowerPcInstructionId PPC_INS_XSNMSUBMDP;
    public static PowerPcInstructionId PPC_INS_XSRDPI;
    public static PowerPcInstructionId PPC_INS_XSRDPIC;
    public static PowerPcInstructionId PPC_INS_XSRDPIM;
    public static PowerPcInstructionId PPC_INS_XSRDPIP;
    public static PowerPcInstructionId PPC_INS_XSRDPIZ;
    public static PowerPcInstructionId PPC_INS_XSREDP;
    public static PowerPcInstructionId PPC_INS_XSRSQRTEDP;
    public static PowerPcInstructionId PPC_INS_XSSQRTDP;
    public static PowerPcInstructionId PPC_INS_XSSUBDP;
    public static PowerPcInstructionId PPC_INS_XSTDIVDP;
    public static PowerPcInstructionId PPC_INS_XSTSQRTDP;
    public static PowerPcInstructionId PPC_INS_XVABSDP;
    public static PowerPcInstructionId PPC_INS_XVABSSP;
    public static PowerPcInstructionId PPC_INS_XVADDDP;
    public static PowerPcInstructionId PPC_INS_XVADDSP;
    public static PowerPcInstructionId PPC_INS_XVCMPEQDP;
    public static PowerPcInstructionId PPC_INS_XVCMPEQSP;
    public static PowerPcInstructionId PPC_INS_XVCMPGEDP;
    public static PowerPcInstructionId PPC_INS_XVCMPGESP;
    public static PowerPcInstructionId PPC_INS_XVCMPGTDP;
    public static PowerPcInstructionId PPC_INS_XVCMPGTSP;
    public static PowerPcInstructionId PPC_INS_XVCPSGNDP;
    public static PowerPcInstructionId PPC_INS_XVCPSGNSP;
    public static PowerPcInstructionId PPC_INS_XVCVDPSP;
    public static PowerPcInstructionId PPC_INS_XVCVDPSXDS;
    public static PowerPcInstructionId PPC_INS_XVCVDPSXWS;
    public static PowerPcInstructionId PPC_INS_XVCVDPUXDS;
    public static PowerPcInstructionId PPC_INS_XVCVDPUXWS;
    public static PowerPcInstructionId PPC_INS_XVCVSPDP;
    public static PowerPcInstructionId PPC_INS_XVCVSPSXDS;
    public static PowerPcInstructionId PPC_INS_XVCVSPSXWS;
    public static PowerPcInstructionId PPC_INS_XVCVSPUXDS;
    public static PowerPcInstructionId PPC_INS_XVCVSPUXWS;
    public static PowerPcInstructionId PPC_INS_XVCVSXDDP;
    public static PowerPcInstructionId PPC_INS_XVCVSXDSP;
    public static PowerPcInstructionId PPC_INS_XVCVSXWDP;
    public static PowerPcInstructionId PPC_INS_XVCVSXWSP;
    public static PowerPcInstructionId PPC_INS_XVCVUXDDP;
    public static PowerPcInstructionId PPC_INS_XVCVUXDSP;
    public static PowerPcInstructionId PPC_INS_XVCVUXWDP;
    public static PowerPcInstructionId PPC_INS_XVCVUXWSP;
    public static PowerPcInstructionId PPC_INS_XVDIVDP;
    public static PowerPcInstructionId PPC_INS_XVDIVSP;
    public static PowerPcInstructionId PPC_INS_XVMADDADP;
    public static PowerPcInstructionId PPC_INS_XVMADDASP;
    public static PowerPcInstructionId PPC_INS_XVMADDMDP;
    public static PowerPcInstructionId PPC_INS_XVMADDMSP;
    public static PowerPcInstructionId PPC_INS_XVMAXDP;
    public static PowerPcInstructionId PPC_INS_XVMAXSP;
    public static PowerPcInstructionId PPC_INS_XVMINDP;
    public static PowerPcInstructionId PPC_INS_XVMINSP;
    public static PowerPcInstructionId PPC_INS_XVMSUBADP;
    public static PowerPcInstructionId PPC_INS_XVMSUBASP;
    public static PowerPcInstructionId PPC_INS_XVMSUBMDP;
    public static PowerPcInstructionId PPC_INS_XVMSUBMSP;
    public static PowerPcInstructionId PPC_INS_XVMULDP;
    public static PowerPcInstructionId PPC_INS_XVMULSP;
    public static PowerPcInstructionId PPC_INS_XVNABSDP;
    public static PowerPcInstructionId PPC_INS_XVNABSSP;
    public static PowerPcInstructionId PPC_INS_XVNEGDP;
    public static PowerPcInstructionId PPC_INS_XVNEGSP;
    public static PowerPcInstructionId PPC_INS_XVNMADDADP;
    public static PowerPcInstructionId PPC_INS_XVNMADDASP;
    public static PowerPcInstructionId PPC_INS_XVNMADDMDP;
    public static PowerPcInstructionId PPC_INS_XVNMADDMSP;
    public static PowerPcInstructionId PPC_INS_XVNMSUBADP;
    public static PowerPcInstructionId PPC_INS_XVNMSUBASP;
    public static PowerPcInstructionId PPC_INS_XVNMSUBMDP;
    public static PowerPcInstructionId PPC_INS_XVNMSUBMSP;
    public static PowerPcInstructionId PPC_INS_XVRDPI;
    public static PowerPcInstructionId PPC_INS_XVRDPIC;
    public static PowerPcInstructionId PPC_INS_XVRDPIM;
    public static PowerPcInstructionId PPC_INS_XVRDPIP;
    public static PowerPcInstructionId PPC_INS_XVRDPIZ;
    public static PowerPcInstructionId PPC_INS_XVREDP;
    public static PowerPcInstructionId PPC_INS_XVRESP;
    public static PowerPcInstructionId PPC_INS_XVRSPI;
    public static PowerPcInstructionId PPC_INS_XVRSPIC;
    public static PowerPcInstructionId PPC_INS_XVRSPIM;
    public static PowerPcInstructionId PPC_INS_XVRSPIP;
    public static PowerPcInstructionId PPC_INS_XVRSPIZ;
    public static PowerPcInstructionId PPC_INS_XVRSQRTEDP;
    public static PowerPcInstructionId PPC_INS_XVRSQRTESP;
    public static PowerPcInstructionId PPC_INS_XVSQRTDP;
    public static PowerPcInstructionId PPC_INS_XVSQRTSP;
    public static PowerPcInstructionId PPC_INS_XVSUBDP;
    public static PowerPcInstructionId PPC_INS_XVSUBSP;
    public static PowerPcInstructionId PPC_INS_XVTDIVDP;
    public static PowerPcInstructionId PPC_INS_XVTDIVSP;
    public static PowerPcInstructionId PPC_INS_XVTSQRTDP;
    public static PowerPcInstructionId PPC_INS_XVTSQRTSP;
    public static PowerPcInstructionId PPC_INS_XXLAND;
    public static PowerPcInstructionId PPC_INS_XXLANDC;
    public static PowerPcInstructionId PPC_INS_XXLEQV;
    public static PowerPcInstructionId PPC_INS_XXLNAND;
    public static PowerPcInstructionId PPC_INS_XXLNOR;
    public static PowerPcInstructionId PPC_INS_XXLOR;
    public static PowerPcInstructionId PPC_INS_XXLORC;
    public static PowerPcInstructionId PPC_INS_XXLXOR;
    public static PowerPcInstructionId PPC_INS_XXMRGHW;
    public static PowerPcInstructionId PPC_INS_XXMRGLW;
    public static PowerPcInstructionId PPC_INS_XXPERMDI;
    public static PowerPcInstructionId PPC_INS_XXSEL;
    public static PowerPcInstructionId PPC_INS_XXSLDWI;
    public static PowerPcInstructionId PPC_INS_XXSPLTW;
    public static PowerPcInstructionId PPC_INS_BCA;
    public static PowerPcInstructionId PPC_INS_BCLA;
    public static PowerPcInstructionId PPC_INS_SLWI;
    public static PowerPcInstructionId PPC_INS_SRWI;
    public static PowerPcInstructionId PPC_INS_SLDI;
    public static PowerPcInstructionId PPC_INS_BTA;
    public static PowerPcInstructionId PPC_INS_CRSET;
    public static PowerPcInstructionId PPC_INS_CRNOT;
    public static PowerPcInstructionId PPC_INS_CRMOVE;
    public static PowerPcInstructionId PPC_INS_CRCLR;
    public static PowerPcInstructionId PPC_INS_MFBR0;
    public static PowerPcInstructionId PPC_INS_MFBR1;
    public static PowerPcInstructionId PPC_INS_MFBR2;
    public static PowerPcInstructionId PPC_INS_MFBR3;
    public static PowerPcInstructionId PPC_INS_MFBR4;
    public static PowerPcInstructionId PPC_INS_MFBR5;
    public static PowerPcInstructionId PPC_INS_MFBR6;
    public static PowerPcInstructionId PPC_INS_MFBR7;
    public static PowerPcInstructionId PPC_INS_MFXER;
    public static PowerPcInstructionId PPC_INS_MFRTCU;
    public static PowerPcInstructionId PPC_INS_MFRTCL;
    public static PowerPcInstructionId PPC_INS_MFDSCR;
    public static PowerPcInstructionId PPC_INS_MFDSISR;
    public static PowerPcInstructionId PPC_INS_MFDAR;
    public static PowerPcInstructionId PPC_INS_MFSRR2;
    public static PowerPcInstructionId PPC_INS_MFSRR3;
    public static PowerPcInstructionId PPC_INS_MFCFAR;
    public static PowerPcInstructionId PPC_INS_MFAMR;
    public static PowerPcInstructionId PPC_INS_MFPID;
    public static PowerPcInstructionId PPC_INS_MFTBLO;
    public static PowerPcInstructionId PPC_INS_MFTBHI;
    public static PowerPcInstructionId PPC_INS_MFDBATU;
    public static PowerPcInstructionId PPC_INS_MFDBATL;
    public static PowerPcInstructionId PPC_INS_MFIBATU;
    public static PowerPcInstructionId PPC_INS_MFIBATL;
    public static PowerPcInstructionId PPC_INS_MFDCCR;
    public static PowerPcInstructionId PPC_INS_MFICCR;
    public static PowerPcInstructionId PPC_INS_MFDEAR;
    public static PowerPcInstructionId PPC_INS_MFESR;
    public static PowerPcInstructionId PPC_INS_MFSPEFSCR;
    public static PowerPcInstructionId PPC_INS_MFTCR;
    public static PowerPcInstructionId PPC_INS_MFASR;
    public static PowerPcInstructionId PPC_INS_MFPVR;
    public static PowerPcInstructionId PPC_INS_MFTBU;
    public static PowerPcInstructionId PPC_INS_MTCR;
    public static PowerPcInstructionId PPC_INS_MTBR0;
    public static PowerPcInstructionId PPC_INS_MTBR1;
    public static PowerPcInstructionId PPC_INS_MTBR2;
    public static PowerPcInstructionId PPC_INS_MTBR3;
    public static PowerPcInstructionId PPC_INS_MTBR4;
    public static PowerPcInstructionId PPC_INS_MTBR5;
    public static PowerPcInstructionId PPC_INS_MTBR6;
    public static PowerPcInstructionId PPC_INS_MTBR7;
    public static PowerPcInstructionId PPC_INS_MTXER;
    public static PowerPcInstructionId PPC_INS_MTDSCR;
    public static PowerPcInstructionId PPC_INS_MTDSISR;
    public static PowerPcInstructionId PPC_INS_MTDAR;
    public static PowerPcInstructionId PPC_INS_MTSRR2;
    public static PowerPcInstructionId PPC_INS_MTSRR3;
    public static PowerPcInstructionId PPC_INS_MTCFAR;
    public static PowerPcInstructionId PPC_INS_MTAMR;
    public static PowerPcInstructionId PPC_INS_MTPID;
    public static PowerPcInstructionId PPC_INS_MTTBL;
    public static PowerPcInstructionId PPC_INS_MTTBU;
    public static PowerPcInstructionId PPC_INS_MTTBLO;
    public static PowerPcInstructionId PPC_INS_MTTBHI;
    public static PowerPcInstructionId PPC_INS_MTDBATU;
    public static PowerPcInstructionId PPC_INS_MTDBATL;
    public static PowerPcInstructionId PPC_INS_MTIBATU;
    public static PowerPcInstructionId PPC_INS_MTIBATL;
    public static PowerPcInstructionId PPC_INS_MTDCCR;
    public static PowerPcInstructionId PPC_INS_MTICCR;
    public static PowerPcInstructionId PPC_INS_MTDEAR;
    public static PowerPcInstructionId PPC_INS_MTESR;
    public static PowerPcInstructionId PPC_INS_MTSPEFSCR;
    public static PowerPcInstructionId PPC_INS_MTTCR;
    public static PowerPcInstructionId PPC_INS_NOT;
    public static PowerPcInstructionId PPC_INS_MR;
    public static PowerPcInstructionId PPC_INS_ROTLD;
    public static PowerPcInstructionId PPC_INS_ROTLDI;
    public static PowerPcInstructionId PPC_INS_CLRLDI;
    public static PowerPcInstructionId PPC_INS_ROTLWI;
    public static PowerPcInstructionId PPC_INS_CLRLWI;
    public static PowerPcInstructionId PPC_INS_ROTLW;
    public static PowerPcInstructionId PPC_INS_SUB;
    public static PowerPcInstructionId PPC_INS_SUBC;
    public static PowerPcInstructionId PPC_INS_LWSYNC;
    public static PowerPcInstructionId PPC_INS_PTESYNC;
    public static PowerPcInstructionId PPC_INS_TDLT;
    public static PowerPcInstructionId PPC_INS_TDEQ;
    public static PowerPcInstructionId PPC_INS_TDGT;
    public static PowerPcInstructionId PPC_INS_TDNE;
    public static PowerPcInstructionId PPC_INS_TDLLT;
    public static PowerPcInstructionId PPC_INS_TDLGT;
    public static PowerPcInstructionId PPC_INS_TDU;
    public static PowerPcInstructionId PPC_INS_TDLTI;
    public static PowerPcInstructionId PPC_INS_TDEQI;
    public static PowerPcInstructionId PPC_INS_TDGTI;
    public static PowerPcInstructionId PPC_INS_TDNEI;
    public static PowerPcInstructionId PPC_INS_TDLLTI;
    public static PowerPcInstructionId PPC_INS_TDLGTI;
    public static PowerPcInstructionId PPC_INS_TDUI;
    public static PowerPcInstructionId PPC_INS_TLBREHI;
    public static PowerPcInstructionId PPC_INS_TLBRELO;
    public static PowerPcInstructionId PPC_INS_TLBWEHI;
    public static PowerPcInstructionId PPC_INS_TLBWELO;
    public static PowerPcInstructionId PPC_INS_TWLT;
    public static PowerPcInstructionId PPC_INS_TWEQ;
    public static PowerPcInstructionId PPC_INS_TWGT;
    public static PowerPcInstructionId PPC_INS_TWNE;
    public static PowerPcInstructionId PPC_INS_TWLLT;
    public static PowerPcInstructionId PPC_INS_TWLGT;
    public static PowerPcInstructionId PPC_INS_TWU;
    public static PowerPcInstructionId PPC_INS_TWLTI;
    public static PowerPcInstructionId PPC_INS_TWEQI;
    public static PowerPcInstructionId PPC_INS_TWGTI;
    public static PowerPcInstructionId PPC_INS_TWNEI;
    public static PowerPcInstructionId PPC_INS_TWLLTI;
    public static PowerPcInstructionId PPC_INS_TWLGTI;
    public static PowerPcInstructionId PPC_INS_TWUI;
    public static PowerPcInstructionId PPC_INS_WAITRSV;
    public static PowerPcInstructionId PPC_INS_WAITIMPL;
    public static PowerPcInstructionId PPC_INS_XNOP;
    public static PowerPcInstructionId PPC_INS_XVMOVDP;
    public static PowerPcInstructionId PPC_INS_XVMOVSP;
    public static PowerPcInstructionId PPC_INS_XXSPLTD;
    public static PowerPcInstructionId PPC_INS_XXMRGHD;
    public static PowerPcInstructionId PPC_INS_XXMRGLD;
    public static PowerPcInstructionId PPC_INS_XXSWAPD;
    public static PowerPcInstructionId PPC_INS_BT;
    public static PowerPcInstructionId PPC_INS_BF;
    public static PowerPcInstructionId PPC_INS_BDNZT;
    public static PowerPcInstructionId PPC_INS_BDNZF;
    public static PowerPcInstructionId PPC_INS_BDZF;
    public static PowerPcInstructionId PPC_INS_BDZT;
    public static PowerPcInstructionId PPC_INS_BFA;
    public static PowerPcInstructionId PPC_INS_BDNZTA;
    public static PowerPcInstructionId PPC_INS_BDNZFA;
    public static PowerPcInstructionId PPC_INS_BDZTA;
    public static PowerPcInstructionId PPC_INS_BDZFA;
    public static PowerPcInstructionId PPC_INS_BTCTR;
    public static PowerPcInstructionId PPC_INS_BFCTR;
    public static PowerPcInstructionId PPC_INS_BTCTRL;
    public static PowerPcInstructionId PPC_INS_BFCTRL;
    public static PowerPcInstructionId PPC_INS_BTL;
    public static PowerPcInstructionId PPC_INS_BFL;
    public static PowerPcInstructionId PPC_INS_BDNZTL;
    public static PowerPcInstructionId PPC_INS_BDNZFL;
    public static PowerPcInstructionId PPC_INS_BDZTL;
    public static PowerPcInstructionId PPC_INS_BDZFL;
    public static PowerPcInstructionId PPC_INS_BTLA;
    public static PowerPcInstructionId PPC_INS_BFLA;
    public static PowerPcInstructionId PPC_INS_BDNZTLA;
    public static PowerPcInstructionId PPC_INS_BDNZFLA;
    public static PowerPcInstructionId PPC_INS_BDZTLA;
    public static PowerPcInstructionId PPC_INS_BDZFLA;
    public static PowerPcInstructionId PPC_INS_BTLR;
    public static PowerPcInstructionId PPC_INS_BFLR;
    public static PowerPcInstructionId PPC_INS_BDNZTLR;
    public static PowerPcInstructionId PPC_INS_BDZTLR;
    public static PowerPcInstructionId PPC_INS_BDZFLR;
    public static PowerPcInstructionId PPC_INS_BTLRL;
    public static PowerPcInstructionId PPC_INS_BFLRL;
    public static PowerPcInstructionId PPC_INS_BDNZTLRL;
    public static PowerPcInstructionId PPC_INS_BDNZFLRL;
    public static PowerPcInstructionId PPC_INS_BDZTLRL;
    public static PowerPcInstructionId PPC_INS_BDZFLRL;
    public static PowerPcInstructionId PPC_INS_QVFAND;
    public static PowerPcInstructionId PPC_INS_QVFCLR;
    public static PowerPcInstructionId PPC_INS_QVFANDC;
    public static PowerPcInstructionId PPC_INS_QVFCTFB;
    public static PowerPcInstructionId PPC_INS_QVFXOR;
    public static PowerPcInstructionId PPC_INS_QVFOR;
    public static PowerPcInstructionId PPC_INS_QVFNOR;
    public static PowerPcInstructionId PPC_INS_QVFEQU;
    public static PowerPcInstructionId PPC_INS_QVFNOT;
    public static PowerPcInstructionId PPC_INS_QVFORC;
    public static PowerPcInstructionId PPC_INS_QVFNAND;
    public static PowerPcInstructionId PPC_INS_QVFSET;
}
public class Gee.External.Capstone.PowerPc.PowerPcMemoryOperandValue : object {
    [CompilerGeneratedAttribute]
private PowerPcRegister <Base>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Displacement>k__BackingField;
    public PowerPcRegister Base { get; }
    public int Displacement { get; }
    internal PowerPcMemoryOperandValue(CapstoneDisassembler disassembler, NativePowerPcMemoryOperandValue& nativeMemoryOperandValue);
    [CompilerGeneratedAttribute]
public PowerPcRegister get_Base();
    [CompilerGeneratedAttribute]
public int get_Displacement();
}
public class Gee.External.Capstone.PowerPc.PowerPcOperand : object {
    private PowerPcConditionRegisterOperandValue _conditionRegister;
    private long _immediate;
    private PowerPcMemoryOperandValue _memory;
    private PowerPcRegister _register;
    [CompilerGeneratedAttribute]
private PowerPcOperandType <Type>k__BackingField;
    public PowerPcConditionRegisterOperandValue ConditionRegister { get; }
    public long Immediate { get; }
    public PowerPcMemoryOperandValue Memory { get; }
    public PowerPcRegister Register { get; }
    public PowerPcOperandType Type { get; }
    internal PowerPcOperand(CapstoneDisassembler disassembler, NativePowerPcOperand& nativeOperand);
    public PowerPcConditionRegisterOperandValue get_ConditionRegister();
    public long get_Immediate();
    public PowerPcMemoryOperandValue get_Memory();
    public PowerPcRegister get_Register();
    [CompilerGeneratedAttribute]
public PowerPcOperandType get_Type();
    internal static PowerPcOperand[] Create(CapstoneDisassembler disassembler, NativePowerPcInstructionDetail& nativeInstructionDetail);
}
public enum Gee.External.Capstone.PowerPc.PowerPcOperandType : Enum {
    public int value__;
    public static PowerPcOperandType Invalid;
    public static PowerPcOperandType Register;
    public static PowerPcOperandType Immediate;
    public static PowerPcOperandType Memory;
    public static PowerPcOperandType ConditionRegister;
}
public class Gee.External.Capstone.PowerPc.PowerPcRegister : Register`1<PowerPcRegisterId> {
    internal PowerPcRegister(PowerPcRegisterId id, string name);
    internal static PowerPcRegister TryCreate(CapstoneDisassembler disassembler, PowerPcRegisterId id);
}
public enum Gee.External.Capstone.PowerPc.PowerPcRegisterId : Enum {
    public int value__;
    public static PowerPcRegisterId Invalid;
    public static PowerPcRegisterId PPC_REG_CARRY;
    public static PowerPcRegisterId PPC_REG_CR0;
    public static PowerPcRegisterId PPC_REG_CR1;
    public static PowerPcRegisterId PPC_REG_CR2;
    public static PowerPcRegisterId PPC_REG_CR3;
    public static PowerPcRegisterId PPC_REG_CR4;
    public static PowerPcRegisterId PPC_REG_CR5;
    public static PowerPcRegisterId PPC_REG_CR6;
    public static PowerPcRegisterId PPC_REG_CR7;
    public static PowerPcRegisterId PPC_REG_CTR;
    public static PowerPcRegisterId PPC_REG_F0;
    public static PowerPcRegisterId PPC_REG_F1;
    public static PowerPcRegisterId PPC_REG_F2;
    public static PowerPcRegisterId PPC_REG_F3;
    public static PowerPcRegisterId PPC_REG_F4;
    public static PowerPcRegisterId PPC_REG_F5;
    public static PowerPcRegisterId PPC_REG_F6;
    public static PowerPcRegisterId PPC_REG_F7;
    public static PowerPcRegisterId PPC_REG_F8;
    public static PowerPcRegisterId PPC_REG_F9;
    public static PowerPcRegisterId PPC_REG_F10;
    public static PowerPcRegisterId PPC_REG_F11;
    public static PowerPcRegisterId PPC_REG_F12;
    public static PowerPcRegisterId PPC_REG_F13;
    public static PowerPcRegisterId PPC_REG_F14;
    public static PowerPcRegisterId PPC_REG_F15;
    public static PowerPcRegisterId PPC_REG_F16;
    public static PowerPcRegisterId PPC_REG_F17;
    public static PowerPcRegisterId PPC_REG_F18;
    public static PowerPcRegisterId PPC_REG_F19;
    public static PowerPcRegisterId PPC_REG_F20;
    public static PowerPcRegisterId PPC_REG_F21;
    public static PowerPcRegisterId PPC_REG_F22;
    public static PowerPcRegisterId PPC_REG_F23;
    public static PowerPcRegisterId PPC_REG_F24;
    public static PowerPcRegisterId PPC_REG_F25;
    public static PowerPcRegisterId PPC_REG_F26;
    public static PowerPcRegisterId PPC_REG_F27;
    public static PowerPcRegisterId PPC_REG_F28;
    public static PowerPcRegisterId PPC_REG_F29;
    public static PowerPcRegisterId PPC_REG_F30;
    public static PowerPcRegisterId PPC_REG_F31;
    public static PowerPcRegisterId PPC_REG_LR;
    public static PowerPcRegisterId PPC_REG_R0;
    public static PowerPcRegisterId PPC_REG_R1;
    public static PowerPcRegisterId PPC_REG_R2;
    public static PowerPcRegisterId PPC_REG_R3;
    public static PowerPcRegisterId PPC_REG_R4;
    public static PowerPcRegisterId PPC_REG_R5;
    public static PowerPcRegisterId PPC_REG_R6;
    public static PowerPcRegisterId PPC_REG_R7;
    public static PowerPcRegisterId PPC_REG_R8;
    public static PowerPcRegisterId PPC_REG_R9;
    public static PowerPcRegisterId PPC_REG_R10;
    public static PowerPcRegisterId PPC_REG_R11;
    public static PowerPcRegisterId PPC_REG_R12;
    public static PowerPcRegisterId PPC_REG_R13;
    public static PowerPcRegisterId PPC_REG_R14;
    public static PowerPcRegisterId PPC_REG_R15;
    public static PowerPcRegisterId PPC_REG_R16;
    public static PowerPcRegisterId PPC_REG_R17;
    public static PowerPcRegisterId PPC_REG_R18;
    public static PowerPcRegisterId PPC_REG_R19;
    public static PowerPcRegisterId PPC_REG_R20;
    public static PowerPcRegisterId PPC_REG_R21;
    public static PowerPcRegisterId PPC_REG_R22;
    public static PowerPcRegisterId PPC_REG_R23;
    public static PowerPcRegisterId PPC_REG_R24;
    public static PowerPcRegisterId PPC_REG_R25;
    public static PowerPcRegisterId PPC_REG_R26;
    public static PowerPcRegisterId PPC_REG_R27;
    public static PowerPcRegisterId PPC_REG_R28;
    public static PowerPcRegisterId PPC_REG_R29;
    public static PowerPcRegisterId PPC_REG_R30;
    public static PowerPcRegisterId PPC_REG_R31;
    public static PowerPcRegisterId PPC_REG_V0;
    public static PowerPcRegisterId PPC_REG_V1;
    public static PowerPcRegisterId PPC_REG_V2;
    public static PowerPcRegisterId PPC_REG_V3;
    public static PowerPcRegisterId PPC_REG_V4;
    public static PowerPcRegisterId PPC_REG_V5;
    public static PowerPcRegisterId PPC_REG_V6;
    public static PowerPcRegisterId PPC_REG_V7;
    public static PowerPcRegisterId PPC_REG_V8;
    public static PowerPcRegisterId PPC_REG_V9;
    public static PowerPcRegisterId PPC_REG_V10;
    public static PowerPcRegisterId PPC_REG_V11;
    public static PowerPcRegisterId PPC_REG_V12;
    public static PowerPcRegisterId PPC_REG_V13;
    public static PowerPcRegisterId PPC_REG_V14;
    public static PowerPcRegisterId PPC_REG_V15;
    public static PowerPcRegisterId PPC_REG_V16;
    public static PowerPcRegisterId PPC_REG_V17;
    public static PowerPcRegisterId PPC_REG_V18;
    public static PowerPcRegisterId PPC_REG_V19;
    public static PowerPcRegisterId PPC_REG_V20;
    public static PowerPcRegisterId PPC_REG_V21;
    public static PowerPcRegisterId PPC_REG_V22;
    public static PowerPcRegisterId PPC_REG_V23;
    public static PowerPcRegisterId PPC_REG_V24;
    public static PowerPcRegisterId PPC_REG_V25;
    public static PowerPcRegisterId PPC_REG_V26;
    public static PowerPcRegisterId PPC_REG_V27;
    public static PowerPcRegisterId PPC_REG_V28;
    public static PowerPcRegisterId PPC_REG_V29;
    public static PowerPcRegisterId PPC_REG_V30;
    public static PowerPcRegisterId PPC_REG_V31;
    public static PowerPcRegisterId PPC_REG_VRSAVE;
    public static PowerPcRegisterId PPC_REG_VS0;
    public static PowerPcRegisterId PPC_REG_VS1;
    public static PowerPcRegisterId PPC_REG_VS2;
    public static PowerPcRegisterId PPC_REG_VS3;
    public static PowerPcRegisterId PPC_REG_VS4;
    public static PowerPcRegisterId PPC_REG_VS5;
    public static PowerPcRegisterId PPC_REG_VS6;
    public static PowerPcRegisterId PPC_REG_VS7;
    public static PowerPcRegisterId PPC_REG_VS8;
    public static PowerPcRegisterId PPC_REG_VS9;
    public static PowerPcRegisterId PPC_REG_VS10;
    public static PowerPcRegisterId PPC_REG_VS11;
    public static PowerPcRegisterId PPC_REG_VS12;
    public static PowerPcRegisterId PPC_REG_VS13;
    public static PowerPcRegisterId PPC_REG_VS14;
    public static PowerPcRegisterId PPC_REG_VS15;
    public static PowerPcRegisterId PPC_REG_VS16;
    public static PowerPcRegisterId PPC_REG_VS17;
    public static PowerPcRegisterId PPC_REG_VS18;
    public static PowerPcRegisterId PPC_REG_VS19;
    public static PowerPcRegisterId PPC_REG_VS20;
    public static PowerPcRegisterId PPC_REG_VS21;
    public static PowerPcRegisterId PPC_REG_VS22;
    public static PowerPcRegisterId PPC_REG_VS23;
    public static PowerPcRegisterId PPC_REG_VS24;
    public static PowerPcRegisterId PPC_REG_VS25;
    public static PowerPcRegisterId PPC_REG_VS26;
    public static PowerPcRegisterId PPC_REG_VS27;
    public static PowerPcRegisterId PPC_REG_VS28;
    public static PowerPcRegisterId PPC_REG_VS29;
    public static PowerPcRegisterId PPC_REG_VS30;
    public static PowerPcRegisterId PPC_REG_VS31;
    public static PowerPcRegisterId PPC_REG_VS32;
    public static PowerPcRegisterId PPC_REG_VS33;
    public static PowerPcRegisterId PPC_REG_VS34;
    public static PowerPcRegisterId PPC_REG_VS35;
    public static PowerPcRegisterId PPC_REG_VS36;
    public static PowerPcRegisterId PPC_REG_VS37;
    public static PowerPcRegisterId PPC_REG_VS38;
    public static PowerPcRegisterId PPC_REG_VS39;
    public static PowerPcRegisterId PPC_REG_VS40;
    public static PowerPcRegisterId PPC_REG_VS41;
    public static PowerPcRegisterId PPC_REG_VS42;
    public static PowerPcRegisterId PPC_REG_VS43;
    public static PowerPcRegisterId PPC_REG_VS44;
    public static PowerPcRegisterId PPC_REG_VS45;
    public static PowerPcRegisterId PPC_REG_VS46;
    public static PowerPcRegisterId PPC_REG_VS47;
    public static PowerPcRegisterId PPC_REG_VS48;
    public static PowerPcRegisterId PPC_REG_VS49;
    public static PowerPcRegisterId PPC_REG_VS50;
    public static PowerPcRegisterId PPC_REG_VS51;
    public static PowerPcRegisterId PPC_REG_VS52;
    public static PowerPcRegisterId PPC_REG_VS53;
    public static PowerPcRegisterId PPC_REG_VS54;
    public static PowerPcRegisterId PPC_REG_VS55;
    public static PowerPcRegisterId PPC_REG_VS56;
    public static PowerPcRegisterId PPC_REG_VS57;
    public static PowerPcRegisterId PPC_REG_VS58;
    public static PowerPcRegisterId PPC_REG_VS59;
    public static PowerPcRegisterId PPC_REG_VS60;
    public static PowerPcRegisterId PPC_REG_VS61;
    public static PowerPcRegisterId PPC_REG_VS62;
    public static PowerPcRegisterId PPC_REG_VS63;
    public static PowerPcRegisterId PPC_REG_Q0;
    public static PowerPcRegisterId PPC_REG_Q1;
    public static PowerPcRegisterId PPC_REG_Q2;
    public static PowerPcRegisterId PPC_REG_Q3;
    public static PowerPcRegisterId PPC_REG_Q4;
    public static PowerPcRegisterId PPC_REG_Q5;
    public static PowerPcRegisterId PPC_REG_Q6;
    public static PowerPcRegisterId PPC_REG_Q7;
    public static PowerPcRegisterId PPC_REG_Q8;
    public static PowerPcRegisterId PPC_REG_Q9;
    public static PowerPcRegisterId PPC_REG_Q10;
    public static PowerPcRegisterId PPC_REG_Q11;
    public static PowerPcRegisterId PPC_REG_Q12;
    public static PowerPcRegisterId PPC_REG_Q13;
    public static PowerPcRegisterId PPC_REG_Q14;
    public static PowerPcRegisterId PPC_REG_Q15;
    public static PowerPcRegisterId PPC_REG_Q16;
    public static PowerPcRegisterId PPC_REG_Q17;
    public static PowerPcRegisterId PPC_REG_Q18;
    public static PowerPcRegisterId PPC_REG_Q19;
    public static PowerPcRegisterId PPC_REG_Q20;
    public static PowerPcRegisterId PPC_REG_Q21;
    public static PowerPcRegisterId PPC_REG_Q22;
    public static PowerPcRegisterId PPC_REG_Q23;
    public static PowerPcRegisterId PPC_REG_Q24;
    public static PowerPcRegisterId PPC_REG_Q25;
    public static PowerPcRegisterId PPC_REG_Q26;
    public static PowerPcRegisterId PPC_REG_Q27;
    public static PowerPcRegisterId PPC_REG_Q28;
    public static PowerPcRegisterId PPC_REG_Q29;
    public static PowerPcRegisterId PPC_REG_Q30;
    public static PowerPcRegisterId PPC_REG_Q31;
    public static PowerPcRegisterId PPC_REG_RM;
    public static PowerPcRegisterId PPC_REG_CTR8;
    public static PowerPcRegisterId PPC_REG_LR8;
    public static PowerPcRegisterId PPC_REG_CR1EQ;
    public static PowerPcRegisterId PPC_REG_X2;
}
public abstract class Gee.External.Capstone.Register`1 : object {
    private string _name;
    [CompilerGeneratedAttribute]
private TId <Id>k__BackingField;
    public TId Id { get; }
    public bool IsDietModeEnabled { get; }
    public string Name { get; }
    private protected Register`1(TId id, string name);
    [CompilerGeneratedAttribute]
public TId get_Id();
    public bool get_IsDietModeEnabled();
    public string get_Name();
    public virtual bool Equals(object object);
    public virtual int GetHashCode();
}
[ExtensionAttribute]
internal static class Gee.External.Capstone.SafeHandleExtension : object {
    [ExtensionAttribute]
internal static IntPtr DangerousAddRefAndGetHandle(SafeHandle this);
}
public class Gee.External.Capstone.X86.CapstoneX86Disassembler : CapstoneDisassembler`8<X86DisassembleMode, X86Instruction, X86InstructionDetail, X86InstructionGroup, X86InstructionGroupId, X86InstructionId, X86Register, X86RegisterId> {
    public bool IsReduceModeEnabled { get; }
    public CapstoneX86Disassembler(X86DisassembleMode disassembleMode);
    public bool get_IsReduceModeEnabled();
    private protected virtual X86Instruction CreateInstruction(NativeInstructionHandle hInstruction);
}
internal class Gee.External.Capstone.X86.NativeX86Encoding : ValueType {
    public byte ModRmOffset;
    public byte DisplacementOffset;
    public byte DisplacementSize;
    public byte ImmediateOffset;
    public byte ImmediateSize;
}
internal class Gee.External.Capstone.X86.NativeX86Flag : ValueType {
    public long EFlags;
    public long FpuFlags;
}
internal class Gee.External.Capstone.X86.NativeX86InstructionDetail : ValueType {
    public X86Prefix[] Prefix;
    public Byte[] Opcode;
    public byte Rex;
    public byte AddressSize;
    public byte ModRm;
    public byte Sib;
    public long Displacement;
    public X86RegisterId SibIndex;
    public byte SibScale;
    public X86RegisterId SibBase;
    public X86XopConditionCode XopConditionCode;
    public X86SseConditionCode SseConditionCode;
    public X86AvxConditionCode AvxConditionCode;
    public bool AvxSuppressAllExceptions;
    public X86AvxRoundingMode AvxRoundingMode;
    public NativeX86Flag Flag;
    public byte OperandCount;
    public NativeX86Operand[] Operands;
    public NativeX86Encoding Encoding;
}
internal class Gee.External.Capstone.X86.NativeX86MemoryOperandValue : ValueType {
    public X86RegisterId Segment;
    public X86RegisterId Base;
    public X86RegisterId Index;
    public int Scale;
    public long Displacement;
}
internal class Gee.External.Capstone.X86.NativeX86Operand : ValueType {
    public X86OperandType Type;
    public NativeX86OperandValue Value;
    public byte Size;
    public OperandAccessType AccessType;
    public X86AvxBroadcast AvxBroadcast;
    public bool AvxZeroOpMask;
}
internal class Gee.External.Capstone.X86.NativeX86OperandValue : ValueType {
    public X86RegisterId Register;
    public long Immediate;
    public NativeX86MemoryOperandValue Memory;
}
public enum Gee.External.Capstone.X86.X86AvxBroadcast : Enum {
    public int value__;
    public static X86AvxBroadcast Invalid;
    public static X86AvxBroadcast X86_AVX_BCAST_2;
    public static X86AvxBroadcast X86_AVX_BCAST_4;
    public static X86AvxBroadcast X86_AVX_BCAST_8;
    public static X86AvxBroadcast X86_AVX_BCAST_16;
}
public enum Gee.External.Capstone.X86.X86AvxConditionCode : Enum {
    public int value__;
    public static X86AvxConditionCode Invalid;
    public static X86AvxConditionCode X86_AVX_CC_EQ;
    public static X86AvxConditionCode X86_AVX_CC_LT;
    public static X86AvxConditionCode X86_AVX_CC_LE;
    public static X86AvxConditionCode X86_AVX_CC_UNORD;
    public static X86AvxConditionCode X86_AVX_CC_NEQ;
    public static X86AvxConditionCode X86_AVX_CC_NLT;
    public static X86AvxConditionCode X86_AVX_CC_NLE;
    public static X86AvxConditionCode X86_AVX_CC_ORD;
    public static X86AvxConditionCode X86_AVX_CC_EQ_UQ;
    public static X86AvxConditionCode X86_AVX_CC_NGE;
    public static X86AvxConditionCode X86_AVX_CC_NGT;
    public static X86AvxConditionCode X86_AVX_CC_FALSE;
    public static X86AvxConditionCode X86_AVX_CC_NEQ_OQ;
    public static X86AvxConditionCode X86_AVX_CC_GE;
    public static X86AvxConditionCode X86_AVX_CC_GT;
    public static X86AvxConditionCode X86_AVX_CC_TRUE;
    public static X86AvxConditionCode X86_AVX_CC_EQ_OS;
    public static X86AvxConditionCode X86_AVX_CC_LT_OQ;
    public static X86AvxConditionCode X86_AVX_CC_LE_OQ;
    public static X86AvxConditionCode X86_AVX_CC_UNORD_S;
    public static X86AvxConditionCode X86_AVX_CC_NEQ_US;
    public static X86AvxConditionCode X86_AVX_CC_NLT_UQ;
    public static X86AvxConditionCode X86_AVX_CC_NLE_UQ;
    public static X86AvxConditionCode X86_AVX_CC_ORD_S;
    public static X86AvxConditionCode X86_AVX_CC_EQ_US;
    public static X86AvxConditionCode X86_AVX_CC_NGE_UQ;
    public static X86AvxConditionCode X86_AVX_CC_NGT_UQ;
    public static X86AvxConditionCode X86_AVX_CC_FALSE_OS;
    public static X86AvxConditionCode X86_AVX_CC_NEQ_OS;
    public static X86AvxConditionCode X86_AVX_CC_GE_OQ;
    public static X86AvxConditionCode X86_AVX_CC_GT_OQ;
    public static X86AvxConditionCode X86_AVX_CC_TRUE_US;
}
public enum Gee.External.Capstone.X86.X86AvxRoundingMode : Enum {
    public int value__;
    public static X86AvxRoundingMode Invalid;
    public static X86AvxRoundingMode X86_AVX_RM_RN;
    public static X86AvxRoundingMode X86_AVX_RM_RD;
    public static X86AvxRoundingMode X86_AVX_RM_RU;
    public static X86AvxRoundingMode X86_AVX_RM_RZ;
}
[FlagsAttribute]
public enum Gee.External.Capstone.X86.X86DisassembleMode : Enum {
    public int value__;
    public static X86DisassembleMode Bit16;
    public static X86DisassembleMode Bit32;
    public static X86DisassembleMode Bit64;
    public static X86DisassembleMode LittleEndian;
}
public class Gee.External.Capstone.X86.X86Encoding : object {
    [CompilerGeneratedAttribute]
private byte <DisplacementOffset>k__BackingField;
    [CompilerGeneratedAttribute]
private byte <DisplacementSize>k__BackingField;
    [CompilerGeneratedAttribute]
private byte <ImmediateOffset>k__BackingField;
    [CompilerGeneratedAttribute]
private byte <ImmediateSize>k__BackingField;
    [CompilerGeneratedAttribute]
private byte <ModRmOffset>k__BackingField;
    public byte DisplacementOffset { get; }
    public byte DisplacementSize { get; }
    public byte ImmediateOffset { get; }
    public byte ImmediateSize { get; }
    public byte ModRmOffset { get; }
    internal X86Encoding(NativeX86Encoding& nativeEncoding);
    [CompilerGeneratedAttribute]
public byte get_DisplacementOffset();
    [CompilerGeneratedAttribute]
public byte get_DisplacementSize();
    [CompilerGeneratedAttribute]
public byte get_ImmediateOffset();
    [CompilerGeneratedAttribute]
public byte get_ImmediateSize();
    [CompilerGeneratedAttribute]
public byte get_ModRmOffset();
}
public class Gee.External.Capstone.X86.X86Instruction : Instruction`8<X86Instruction, X86InstructionDetail, X86DisassembleMode, X86InstructionGroup, X86InstructionGroupId, X86InstructionId, X86Register, X86RegisterId> {
    internal X86Instruction(X86InstructionBuilder builder);
    internal static X86Instruction Create(CapstoneDisassembler disassembler, NativeInstructionHandle hInstruction);
}
internal class Gee.External.Capstone.X86.X86InstructionBuilder : InstructionBuilder`8<X86InstructionDetail, X86DisassembleMode, X86InstructionGroup, X86InstructionGroupId, X86Instruction, X86InstructionId, X86Register, X86RegisterId> {
    internal X86Instruction Create();
    private protected virtual X86InstructionDetail CreateDetails(CapstoneDisassembler disassembler, NativeInstructionHandle hInstruction);
    private protected virtual X86DisassembleMode CreateDisassembleMode(NativeDisassembleMode nativeDisassembleMode);
    private protected virtual X86InstructionId CreateId(int id);
}
public class Gee.External.Capstone.X86.X86InstructionDetail : InstructionDetail`8<X86InstructionDetail, X86DisassembleMode, X86InstructionGroup, X86InstructionGroupId, X86Instruction, X86InstructionId, X86Register, X86RegisterId> {
    [CompilerGeneratedAttribute]
private byte <AddressSize>k__BackingField;
    [CompilerGeneratedAttribute]
private X86AvxConditionCode <AvxConditionCode>k__BackingField;
    [CompilerGeneratedAttribute]
private X86AvxRoundingMode <AvxRoundingMode>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AvxSuppressAllExceptions>k__BackingField;
    [CompilerGeneratedAttribute]
private long <Displacement>k__BackingField;
    [CompilerGeneratedAttribute]
private long <EFlags>k__BackingField;
    [CompilerGeneratedAttribute]
private X86Encoding <Encoding>k__BackingField;
    [CompilerGeneratedAttribute]
private long <FpuFlags>k__BackingField;
    [CompilerGeneratedAttribute]
private byte <ModRm>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <Opcode>k__BackingField;
    [CompilerGeneratedAttribute]
private X86Operand[] <Operands>k__BackingField;
    [CompilerGeneratedAttribute]
private X86Prefix[] <Prefix>k__BackingField;
    [CompilerGeneratedAttribute]
private byte <Rex>k__BackingField;
    [CompilerGeneratedAttribute]
private byte <Sib>k__BackingField;
    [CompilerGeneratedAttribute]
private X86Register <SibBase>k__BackingField;
    [CompilerGeneratedAttribute]
private X86Register <SibIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private byte <SibScale>k__BackingField;
    [CompilerGeneratedAttribute]
private X86SseConditionCode <SseConditionCode>k__BackingField;
    [CompilerGeneratedAttribute]
private X86XopConditionCode <XopConditionCode>k__BackingField;
    public byte AddressSize { get; }
    public X86AvxConditionCode AvxConditionCode { get; }
    public X86AvxRoundingMode AvxRoundingMode { get; }
    public bool AvxSuppressAllExceptions { get; }
    public long Displacement { get; }
    public long EFlags { get; }
    public X86Encoding Encoding { get; }
    public long FpuFlags { get; }
    public byte ModRm { get; }
    public Byte[] Opcode { get; }
    public X86Operand[] Operands { get; }
    public X86Prefix[] Prefix { get; }
    public byte Rex { get; }
    public byte Sib { get; }
    public X86Register SibBase { get; }
    public X86Register SibIndex { get; }
    public byte SibScale { get; }
    public X86SseConditionCode SseConditionCode { get; }
    public X86XopConditionCode XopConditionCode { get; }
    internal X86InstructionDetail(X86InstructionDetailBuilder builder);
    [CompilerGeneratedAttribute]
public byte get_AddressSize();
    [CompilerGeneratedAttribute]
public X86AvxConditionCode get_AvxConditionCode();
    [CompilerGeneratedAttribute]
public X86AvxRoundingMode get_AvxRoundingMode();
    [CompilerGeneratedAttribute]
public bool get_AvxSuppressAllExceptions();
    [CompilerGeneratedAttribute]
public long get_Displacement();
    [CompilerGeneratedAttribute]
public long get_EFlags();
    [CompilerGeneratedAttribute]
public X86Encoding get_Encoding();
    [CompilerGeneratedAttribute]
public long get_FpuFlags();
    [CompilerGeneratedAttribute]
public byte get_ModRm();
    [CompilerGeneratedAttribute]
public Byte[] get_Opcode();
    [CompilerGeneratedAttribute]
public X86Operand[] get_Operands();
    [CompilerGeneratedAttribute]
public X86Prefix[] get_Prefix();
    [CompilerGeneratedAttribute]
public byte get_Rex();
    [CompilerGeneratedAttribute]
public byte get_Sib();
    [CompilerGeneratedAttribute]
public X86Register get_SibBase();
    [CompilerGeneratedAttribute]
public X86Register get_SibIndex();
    [CompilerGeneratedAttribute]
public byte get_SibScale();
    [CompilerGeneratedAttribute]
public X86SseConditionCode get_SseConditionCode();
    [CompilerGeneratedAttribute]
public X86XopConditionCode get_XopConditionCode();
    internal static X86InstructionDetail Create(CapstoneDisassembler disassembler, NativeInstructionHandle hInstruction);
}
internal class Gee.External.Capstone.X86.X86InstructionDetailBuilder : InstructionDetailBuilder`8<X86InstructionDetail, X86DisassembleMode, X86InstructionGroup, X86InstructionGroupId, X86Instruction, X86InstructionId, X86Register, X86RegisterId> {
    [CompilerGeneratedAttribute]
private byte <AddressSize>k__BackingField;
    [CompilerGeneratedAttribute]
private X86AvxConditionCode <AvxConditionCode>k__BackingField;
    [CompilerGeneratedAttribute]
private X86AvxRoundingMode <AvxRoundingMode>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AvxSuppressAllExceptions>k__BackingField;
    [CompilerGeneratedAttribute]
private long <Displacement>k__BackingField;
    [CompilerGeneratedAttribute]
private long <EFlags>k__BackingField;
    [CompilerGeneratedAttribute]
private X86Encoding <Encoding>k__BackingField;
    [CompilerGeneratedAttribute]
private long <FpuFlags>k__BackingField;
    [CompilerGeneratedAttribute]
private byte <ModRm>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <Opcode>k__BackingField;
    [CompilerGeneratedAttribute]
private X86Operand[] <Operands>k__BackingField;
    [CompilerGeneratedAttribute]
private X86Prefix[] <Prefix>k__BackingField;
    [CompilerGeneratedAttribute]
private byte <Rex>k__BackingField;
    [CompilerGeneratedAttribute]
private byte <Sib>k__BackingField;
    [CompilerGeneratedAttribute]
private X86Register <SibBase>k__BackingField;
    [CompilerGeneratedAttribute]
private X86Register <SibIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private byte <SibScale>k__BackingField;
    [CompilerGeneratedAttribute]
private X86SseConditionCode <SseConditionCode>k__BackingField;
    [CompilerGeneratedAttribute]
private X86XopConditionCode <XopConditionCode>k__BackingField;
    internal byte AddressSize { get; private set; }
    internal X86AvxConditionCode AvxConditionCode { get; private set; }
    internal X86AvxRoundingMode AvxRoundingMode { get; private set; }
    internal bool AvxSuppressAllExceptions { get; private set; }
    internal long Displacement { get; private set; }
    internal long EFlags { get; private set; }
    internal X86Encoding Encoding { get; private set; }
    internal long FpuFlags { get; private set; }
    internal byte ModRm { get; private set; }
    internal Byte[] Opcode { get; private set; }
    internal X86Operand[] Operands { get; private set; }
    internal X86Prefix[] Prefix { get; private set; }
    internal byte Rex { get; private set; }
    internal byte Sib { get; private set; }
    internal X86Register SibBase { get; private set; }
    internal X86Register SibIndex { get; private set; }
    internal byte SibScale { get; private set; }
    internal X86SseConditionCode SseConditionCode { get; private set; }
    internal X86XopConditionCode XopConditionCode { get; private set; }
    [CompilerGeneratedAttribute]
internal byte get_AddressSize();
    [CompilerGeneratedAttribute]
private void set_AddressSize(byte value);
    [CompilerGeneratedAttribute]
internal X86AvxConditionCode get_AvxConditionCode();
    [CompilerGeneratedAttribute]
private void set_AvxConditionCode(X86AvxConditionCode value);
    [CompilerGeneratedAttribute]
internal X86AvxRoundingMode get_AvxRoundingMode();
    [CompilerGeneratedAttribute]
private void set_AvxRoundingMode(X86AvxRoundingMode value);
    [CompilerGeneratedAttribute]
internal bool get_AvxSuppressAllExceptions();
    [CompilerGeneratedAttribute]
private void set_AvxSuppressAllExceptions(bool value);
    [CompilerGeneratedAttribute]
internal long get_Displacement();
    [CompilerGeneratedAttribute]
private void set_Displacement(long value);
    [CompilerGeneratedAttribute]
internal long get_EFlags();
    [CompilerGeneratedAttribute]
private void set_EFlags(long value);
    [CompilerGeneratedAttribute]
internal X86Encoding get_Encoding();
    [CompilerGeneratedAttribute]
private void set_Encoding(X86Encoding value);
    [CompilerGeneratedAttribute]
internal long get_FpuFlags();
    [CompilerGeneratedAttribute]
private void set_FpuFlags(long value);
    [CompilerGeneratedAttribute]
internal byte get_ModRm();
    [CompilerGeneratedAttribute]
private void set_ModRm(byte value);
    [CompilerGeneratedAttribute]
internal Byte[] get_Opcode();
    [CompilerGeneratedAttribute]
private void set_Opcode(Byte[] value);
    [CompilerGeneratedAttribute]
internal X86Operand[] get_Operands();
    [CompilerGeneratedAttribute]
private void set_Operands(X86Operand[] value);
    [CompilerGeneratedAttribute]
internal X86Prefix[] get_Prefix();
    [CompilerGeneratedAttribute]
private void set_Prefix(X86Prefix[] value);
    [CompilerGeneratedAttribute]
internal byte get_Rex();
    [CompilerGeneratedAttribute]
private void set_Rex(byte value);
    [CompilerGeneratedAttribute]
internal byte get_Sib();
    [CompilerGeneratedAttribute]
private void set_Sib(byte value);
    [CompilerGeneratedAttribute]
internal X86Register get_SibBase();
    [CompilerGeneratedAttribute]
private void set_SibBase(X86Register value);
    [CompilerGeneratedAttribute]
internal X86Register get_SibIndex();
    [CompilerGeneratedAttribute]
private void set_SibIndex(X86Register value);
    [CompilerGeneratedAttribute]
internal byte get_SibScale();
    [CompilerGeneratedAttribute]
private void set_SibScale(byte value);
    [CompilerGeneratedAttribute]
internal X86SseConditionCode get_SseConditionCode();
    [CompilerGeneratedAttribute]
private void set_SseConditionCode(X86SseConditionCode value);
    [CompilerGeneratedAttribute]
internal X86XopConditionCode get_XopConditionCode();
    [CompilerGeneratedAttribute]
private void set_XopConditionCode(X86XopConditionCode value);
    internal virtual void Build(CapstoneDisassembler disassembler, NativeInstructionHandle hInstruction);
    internal X86InstructionDetail Create();
    private protected virtual X86DisassembleMode CreateDisassembleMode(NativeDisassembleMode nativeDisassembleMode);
    private protected virtual X86InstructionGroup CreateInstructionGroup(CapstoneDisassembler disassembler, byte instructionGroupId);
    private protected virtual X86Register CreateRegister(CapstoneDisassembler disassembler, short registerId);
}
public class Gee.External.Capstone.X86.X86InstructionGroup : InstructionGroup`1<X86InstructionGroupId> {
    internal X86InstructionGroup(X86InstructionGroupId id, string name);
    internal static X86InstructionGroup Create(CapstoneDisassembler disassembler, X86InstructionGroupId id);
}
public enum Gee.External.Capstone.X86.X86InstructionGroupId : Enum {
    public byte value__;
    public static X86InstructionGroupId Invalid;
    public static X86InstructionGroupId X86_GRP_JUMP;
    public static X86InstructionGroupId X86_GRP_CALL;
    public static X86InstructionGroupId X86_GRP_RET;
    public static X86InstructionGroupId X86_GRP_INT;
    public static X86InstructionGroupId X86_GRP_IRET;
    public static X86InstructionGroupId X86_GRP_PRIVILEGE;
    public static X86InstructionGroupId X86_GRP_BRANCH_RELATIVE;
    public static X86InstructionGroupId X86_GRP_VM;
    public static X86InstructionGroupId X86_GRP_3DNOW;
    public static X86InstructionGroupId X86_GRP_AES;
    public static X86InstructionGroupId X86_GRP_ADX;
    public static X86InstructionGroupId X86_GRP_AVX;
    public static X86InstructionGroupId X86_GRP_AVX2;
    public static X86InstructionGroupId X86_GRP_AVX512;
    public static X86InstructionGroupId X86_GRP_BMI;
    public static X86InstructionGroupId X86_GRP_BMI2;
    public static X86InstructionGroupId X86_GRP_CMOV;
    public static X86InstructionGroupId X86_GRP_F16C;
    public static X86InstructionGroupId X86_GRP_FMA;
    public static X86InstructionGroupId X86_GRP_FMA4;
    public static X86InstructionGroupId X86_GRP_FSGSBASE;
    public static X86InstructionGroupId X86_GRP_HLE;
    public static X86InstructionGroupId X86_GRP_MMX;
    public static X86InstructionGroupId X86_GRP_MODE32;
    public static X86InstructionGroupId X86_GRP_MODE64;
    public static X86InstructionGroupId X86_GRP_RTM;
    public static X86InstructionGroupId X86_GRP_SHA;
    public static X86InstructionGroupId X86_GRP_SSE1;
    public static X86InstructionGroupId X86_GRP_SSE2;
    public static X86InstructionGroupId X86_GRP_SSE3;
    public static X86InstructionGroupId X86_GRP_SSE41;
    public static X86InstructionGroupId X86_GRP_SSE42;
    public static X86InstructionGroupId X86_GRP_SSE4A;
    public static X86InstructionGroupId X86_GRP_SSSE3;
    public static X86InstructionGroupId X86_GRP_PCLMUL;
    public static X86InstructionGroupId X86_GRP_XOP;
    public static X86InstructionGroupId X86_GRP_CDI;
    public static X86InstructionGroupId X86_GRP_ERI;
    public static X86InstructionGroupId X86_GRP_TBM;
    public static X86InstructionGroupId X86_GRP_16BITMODE;
    public static X86InstructionGroupId X86_GRP_NOT64BITMODE;
    public static X86InstructionGroupId X86_GRP_SGX;
    public static X86InstructionGroupId X86_GRP_DQI;
    public static X86InstructionGroupId X86_GRP_BWI;
    public static X86InstructionGroupId X86_GRP_PFI;
    public static X86InstructionGroupId X86_GRP_VLX;
    public static X86InstructionGroupId X86_GRP_SMAP;
    public static X86InstructionGroupId X86_GRP_NOVLX;
    public static X86InstructionGroupId X86_GRP_FPU;
}
public enum Gee.External.Capstone.X86.X86InstructionId : Enum {
    public int value__;
    public static X86InstructionId Invalid;
    public static X86InstructionId X86_INS_AAA;
    public static X86InstructionId X86_INS_AAD;
    public static X86InstructionId X86_INS_AAM;
    public static X86InstructionId X86_INS_AAS;
    public static X86InstructionId X86_INS_FABS;
    public static X86InstructionId X86_INS_ADC;
    public static X86InstructionId X86_INS_ADCX;
    public static X86InstructionId X86_INS_ADD;
    public static X86InstructionId X86_INS_ADDPD;
    public static X86InstructionId X86_INS_ADDPS;
    public static X86InstructionId X86_INS_ADDSD;
    public static X86InstructionId X86_INS_ADDSS;
    public static X86InstructionId X86_INS_ADDSUBPD;
    public static X86InstructionId X86_INS_ADDSUBPS;
    public static X86InstructionId X86_INS_FADD;
    public static X86InstructionId X86_INS_FIADD;
    public static X86InstructionId X86_INS_FADDP;
    public static X86InstructionId X86_INS_ADOX;
    public static X86InstructionId X86_INS_AESDECLAST;
    public static X86InstructionId X86_INS_AESDEC;
    public static X86InstructionId X86_INS_AESENCLAST;
    public static X86InstructionId X86_INS_AESENC;
    public static X86InstructionId X86_INS_AESIMC;
    public static X86InstructionId X86_INS_AESKEYGENASSIST;
    public static X86InstructionId X86_INS_AND;
    public static X86InstructionId X86_INS_ANDN;
    public static X86InstructionId X86_INS_ANDNPD;
    public static X86InstructionId X86_INS_ANDNPS;
    public static X86InstructionId X86_INS_ANDPD;
    public static X86InstructionId X86_INS_ANDPS;
    public static X86InstructionId X86_INS_ARPL;
    public static X86InstructionId X86_INS_BEXTR;
    public static X86InstructionId X86_INS_BLCFILL;
    public static X86InstructionId X86_INS_BLCI;
    public static X86InstructionId X86_INS_BLCIC;
    public static X86InstructionId X86_INS_BLCMSK;
    public static X86InstructionId X86_INS_BLCS;
    public static X86InstructionId X86_INS_BLENDPD;
    public static X86InstructionId X86_INS_BLENDPS;
    public static X86InstructionId X86_INS_BLENDVPD;
    public static X86InstructionId X86_INS_BLENDVPS;
    public static X86InstructionId X86_INS_BLSFILL;
    public static X86InstructionId X86_INS_BLSI;
    public static X86InstructionId X86_INS_BLSIC;
    public static X86InstructionId X86_INS_BLSMSK;
    public static X86InstructionId X86_INS_BLSR;
    public static X86InstructionId X86_INS_BOUND;
    public static X86InstructionId X86_INS_BSF;
    public static X86InstructionId X86_INS_BSR;
    public static X86InstructionId X86_INS_BSWAP;
    public static X86InstructionId X86_INS_BT;
    public static X86InstructionId X86_INS_BTC;
    public static X86InstructionId X86_INS_BTR;
    public static X86InstructionId X86_INS_BTS;
    public static X86InstructionId X86_INS_BZHI;
    public static X86InstructionId X86_INS_CALL;
    public static X86InstructionId X86_INS_CBW;
    public static X86InstructionId X86_INS_CDQ;
    public static X86InstructionId X86_INS_CDQE;
    public static X86InstructionId X86_INS_FCHS;
    public static X86InstructionId X86_INS_CLAC;
    public static X86InstructionId X86_INS_CLC;
    public static X86InstructionId X86_INS_CLD;
    public static X86InstructionId X86_INS_CLFLUSH;
    public static X86InstructionId X86_INS_CLFLUSHOPT;
    public static X86InstructionId X86_INS_CLGI;
    public static X86InstructionId X86_INS_CLI;
    public static X86InstructionId X86_INS_CLTS;
    public static X86InstructionId X86_INS_CLWB;
    public static X86InstructionId X86_INS_CMC;
    public static X86InstructionId X86_INS_CMOVA;
    public static X86InstructionId X86_INS_CMOVAE;
    public static X86InstructionId X86_INS_CMOVB;
    public static X86InstructionId X86_INS_CMOVBE;
    public static X86InstructionId X86_INS_FCMOVBE;
    public static X86InstructionId X86_INS_FCMOVB;
    public static X86InstructionId X86_INS_CMOVE;
    public static X86InstructionId X86_INS_FCMOVE;
    public static X86InstructionId X86_INS_CMOVG;
    public static X86InstructionId X86_INS_CMOVGE;
    public static X86InstructionId X86_INS_CMOVL;
    public static X86InstructionId X86_INS_CMOVLE;
    public static X86InstructionId X86_INS_FCMOVNBE;
    public static X86InstructionId X86_INS_FCMOVNB;
    public static X86InstructionId X86_INS_CMOVNE;
    public static X86InstructionId X86_INS_FCMOVNE;
    public static X86InstructionId X86_INS_CMOVNO;
    public static X86InstructionId X86_INS_CMOVNP;
    public static X86InstructionId X86_INS_FCMOVNU;
    public static X86InstructionId X86_INS_CMOVNS;
    public static X86InstructionId X86_INS_CMOVO;
    public static X86InstructionId X86_INS_CMOVP;
    public static X86InstructionId X86_INS_FCMOVU;
    public static X86InstructionId X86_INS_CMOVS;
    public static X86InstructionId X86_INS_CMP;
    public static X86InstructionId X86_INS_CMPSB;
    public static X86InstructionId X86_INS_CMPSQ;
    public static X86InstructionId X86_INS_CMPSW;
    public static X86InstructionId X86_INS_CMPXCHG16B;
    public static X86InstructionId X86_INS_CMPXCHG;
    public static X86InstructionId X86_INS_CMPXCHG8B;
    public static X86InstructionId X86_INS_COMISD;
    public static X86InstructionId X86_INS_COMISS;
    public static X86InstructionId X86_INS_FCOMP;
    public static X86InstructionId X86_INS_FCOMIP;
    public static X86InstructionId X86_INS_FCOMI;
    public static X86InstructionId X86_INS_FCOM;
    public static X86InstructionId X86_INS_FCOS;
    public static X86InstructionId X86_INS_CPUID;
    public static X86InstructionId X86_INS_CQO;
    public static X86InstructionId X86_INS_CRC32;
    public static X86InstructionId X86_INS_CVTDQ2PD;
    public static X86InstructionId X86_INS_CVTDQ2PS;
    public static X86InstructionId X86_INS_CVTPD2DQ;
    public static X86InstructionId X86_INS_CVTPD2PS;
    public static X86InstructionId X86_INS_CVTPS2DQ;
    public static X86InstructionId X86_INS_CVTPS2PD;
    public static X86InstructionId X86_INS_CVTSD2SI;
    public static X86InstructionId X86_INS_CVTSD2SS;
    public static X86InstructionId X86_INS_CVTSI2SD;
    public static X86InstructionId X86_INS_CVTSI2SS;
    public static X86InstructionId X86_INS_CVTSS2SD;
    public static X86InstructionId X86_INS_CVTSS2SI;
    public static X86InstructionId X86_INS_CVTTPD2DQ;
    public static X86InstructionId X86_INS_CVTTPS2DQ;
    public static X86InstructionId X86_INS_CVTTSD2SI;
    public static X86InstructionId X86_INS_CVTTSS2SI;
    public static X86InstructionId X86_INS_CWD;
    public static X86InstructionId X86_INS_CWDE;
    public static X86InstructionId X86_INS_DAA;
    public static X86InstructionId X86_INS_DAS;
    public static X86InstructionId X86_INS_DATA16;
    public static X86InstructionId X86_INS_DEC;
    public static X86InstructionId X86_INS_DIV;
    public static X86InstructionId X86_INS_DIVPD;
    public static X86InstructionId X86_INS_DIVPS;
    public static X86InstructionId X86_INS_FDIVR;
    public static X86InstructionId X86_INS_FIDIVR;
    public static X86InstructionId X86_INS_FDIVRP;
    public static X86InstructionId X86_INS_DIVSD;
    public static X86InstructionId X86_INS_DIVSS;
    public static X86InstructionId X86_INS_FDIV;
    public static X86InstructionId X86_INS_FIDIV;
    public static X86InstructionId X86_INS_FDIVP;
    public static X86InstructionId X86_INS_DPPD;
    public static X86InstructionId X86_INS_DPPS;
    public static X86InstructionId X86_INS_RET;
    public static X86InstructionId X86_INS_ENCLS;
    public static X86InstructionId X86_INS_ENCLU;
    public static X86InstructionId X86_INS_ENTER;
    public static X86InstructionId X86_INS_EXTRACTPS;
    public static X86InstructionId X86_INS_EXTRQ;
    public static X86InstructionId X86_INS_F2XM1;
    public static X86InstructionId X86_INS_LCALL;
    public static X86InstructionId X86_INS_LJMP;
    public static X86InstructionId X86_INS_FBLD;
    public static X86InstructionId X86_INS_FBSTP;
    public static X86InstructionId X86_INS_FCOMPP;
    public static X86InstructionId X86_INS_FDECSTP;
    public static X86InstructionId X86_INS_FEMMS;
    public static X86InstructionId X86_INS_FFREE;
    public static X86InstructionId X86_INS_FICOM;
    public static X86InstructionId X86_INS_FICOMP;
    public static X86InstructionId X86_INS_FINCSTP;
    public static X86InstructionId X86_INS_FLDCW;
    public static X86InstructionId X86_INS_FLDENV;
    public static X86InstructionId X86_INS_FLDL2E;
    public static X86InstructionId X86_INS_FLDL2T;
    public static X86InstructionId X86_INS_FLDLG2;
    public static X86InstructionId X86_INS_FLDLN2;
    public static X86InstructionId X86_INS_FLDPI;
    public static X86InstructionId X86_INS_FNCLEX;
    public static X86InstructionId X86_INS_FNINIT;
    public static X86InstructionId X86_INS_FNOP;
    public static X86InstructionId X86_INS_FNSTCW;
    public static X86InstructionId X86_INS_FNSTSW;
    public static X86InstructionId X86_INS_FPATAN;
    public static X86InstructionId X86_INS_FPREM;
    public static X86InstructionId X86_INS_FPREM1;
    public static X86InstructionId X86_INS_FPTAN;
    public static X86InstructionId X86_INS_FFREEP;
    public static X86InstructionId X86_INS_FRNDINT;
    public static X86InstructionId X86_INS_FRSTOR;
    public static X86InstructionId X86_INS_FNSAVE;
    public static X86InstructionId X86_INS_FSCALE;
    public static X86InstructionId X86_INS_FSETPM;
    public static X86InstructionId X86_INS_FSINCOS;
    public static X86InstructionId X86_INS_FNSTENV;
    public static X86InstructionId X86_INS_FXAM;
    public static X86InstructionId X86_INS_FXRSTOR;
    public static X86InstructionId X86_INS_FXRSTOR64;
    public static X86InstructionId X86_INS_FXSAVE;
    public static X86InstructionId X86_INS_FXSAVE64;
    public static X86InstructionId X86_INS_FXTRACT;
    public static X86InstructionId X86_INS_FYL2X;
    public static X86InstructionId X86_INS_FYL2XP1;
    public static X86InstructionId X86_INS_MOVAPD;
    public static X86InstructionId X86_INS_MOVAPS;
    public static X86InstructionId X86_INS_ORPD;
    public static X86InstructionId X86_INS_ORPS;
    public static X86InstructionId X86_INS_VMOVAPD;
    public static X86InstructionId X86_INS_VMOVAPS;
    public static X86InstructionId X86_INS_XORPD;
    public static X86InstructionId X86_INS_XORPS;
    public static X86InstructionId X86_INS_GETSEC;
    public static X86InstructionId X86_INS_HADDPD;
    public static X86InstructionId X86_INS_HADDPS;
    public static X86InstructionId X86_INS_HLT;
    public static X86InstructionId X86_INS_HSUBPD;
    public static X86InstructionId X86_INS_HSUBPS;
    public static X86InstructionId X86_INS_IDIV;
    public static X86InstructionId X86_INS_FILD;
    public static X86InstructionId X86_INS_IMUL;
    public static X86InstructionId X86_INS_IN;
    public static X86InstructionId X86_INS_INC;
    public static X86InstructionId X86_INS_INSB;
    public static X86InstructionId X86_INS_INSERTPS;
    public static X86InstructionId X86_INS_INSERTQ;
    public static X86InstructionId X86_INS_INSD;
    public static X86InstructionId X86_INS_INSW;
    public static X86InstructionId X86_INS_INT;
    public static X86InstructionId X86_INS_INT1;
    public static X86InstructionId X86_INS_INT3;
    public static X86InstructionId X86_INS_INTO;
    public static X86InstructionId X86_INS_INVD;
    public static X86InstructionId X86_INS_INVEPT;
    public static X86InstructionId X86_INS_INVLPG;
    public static X86InstructionId X86_INS_INVLPGA;
    public static X86InstructionId X86_INS_INVPCID;
    public static X86InstructionId X86_INS_INVVPID;
    public static X86InstructionId X86_INS_IRET;
    public static X86InstructionId X86_INS_IRETD;
    public static X86InstructionId X86_INS_IRETQ;
    public static X86InstructionId X86_INS_FISTTP;
    public static X86InstructionId X86_INS_FIST;
    public static X86InstructionId X86_INS_FISTP;
    public static X86InstructionId X86_INS_UCOMISD;
    public static X86InstructionId X86_INS_UCOMISS;
    public static X86InstructionId X86_INS_VCOMISD;
    public static X86InstructionId X86_INS_VCOMISS;
    public static X86InstructionId X86_INS_VCVTSD2SS;
    public static X86InstructionId X86_INS_VCVTSI2SD;
    public static X86InstructionId X86_INS_VCVTSI2SS;
    public static X86InstructionId X86_INS_VCVTSS2SD;
    public static X86InstructionId X86_INS_VCVTTSD2SI;
    public static X86InstructionId X86_INS_VCVTTSD2USI;
    public static X86InstructionId X86_INS_VCVTTSS2SI;
    public static X86InstructionId X86_INS_VCVTTSS2USI;
    public static X86InstructionId X86_INS_VCVTUSI2SD;
    public static X86InstructionId X86_INS_VCVTUSI2SS;
    public static X86InstructionId X86_INS_VUCOMISD;
    public static X86InstructionId X86_INS_VUCOMISS;
    public static X86InstructionId X86_INS_JAE;
    public static X86InstructionId X86_INS_JA;
    public static X86InstructionId X86_INS_JBE;
    public static X86InstructionId X86_INS_JB;
    public static X86InstructionId X86_INS_JCXZ;
    public static X86InstructionId X86_INS_JECXZ;
    public static X86InstructionId X86_INS_JE;
    public static X86InstructionId X86_INS_JGE;
    public static X86InstructionId X86_INS_JG;
    public static X86InstructionId X86_INS_JLE;
    public static X86InstructionId X86_INS_JL;
    public static X86InstructionId X86_INS_JMP;
    public static X86InstructionId X86_INS_JNE;
    public static X86InstructionId X86_INS_JNO;
    public static X86InstructionId X86_INS_JNP;
    public static X86InstructionId X86_INS_JNS;
    public static X86InstructionId X86_INS_JO;
    public static X86InstructionId X86_INS_JP;
    public static X86InstructionId X86_INS_JRCXZ;
    public static X86InstructionId X86_INS_JS;
    public static X86InstructionId X86_INS_KANDB;
    public static X86InstructionId X86_INS_KANDD;
    public static X86InstructionId X86_INS_KANDNB;
    public static X86InstructionId X86_INS_KANDND;
    public static X86InstructionId X86_INS_KANDNQ;
    public static X86InstructionId X86_INS_KANDNW;
    public static X86InstructionId X86_INS_KANDQ;
    public static X86InstructionId X86_INS_KANDW;
    public static X86InstructionId X86_INS_KMOVB;
    public static X86InstructionId X86_INS_KMOVD;
    public static X86InstructionId X86_INS_KMOVQ;
    public static X86InstructionId X86_INS_KMOVW;
    public static X86InstructionId X86_INS_KNOTB;
    public static X86InstructionId X86_INS_KNOTD;
    public static X86InstructionId X86_INS_KNOTQ;
    public static X86InstructionId X86_INS_KNOTW;
    public static X86InstructionId X86_INS_KORB;
    public static X86InstructionId X86_INS_KORD;
    public static X86InstructionId X86_INS_KORQ;
    public static X86InstructionId X86_INS_KORTESTB;
    public static X86InstructionId X86_INS_KORTESTD;
    public static X86InstructionId X86_INS_KORTESTQ;
    public static X86InstructionId X86_INS_KORTESTW;
    public static X86InstructionId X86_INS_KORW;
    public static X86InstructionId X86_INS_KSHIFTLB;
    public static X86InstructionId X86_INS_KSHIFTLD;
    public static X86InstructionId X86_INS_KSHIFTLQ;
    public static X86InstructionId X86_INS_KSHIFTLW;
    public static X86InstructionId X86_INS_KSHIFTRB;
    public static X86InstructionId X86_INS_KSHIFTRD;
    public static X86InstructionId X86_INS_KSHIFTRQ;
    public static X86InstructionId X86_INS_KSHIFTRW;
    public static X86InstructionId X86_INS_KUNPCKBW;
    public static X86InstructionId X86_INS_KXNORB;
    public static X86InstructionId X86_INS_KXNORD;
    public static X86InstructionId X86_INS_KXNORQ;
    public static X86InstructionId X86_INS_KXNORW;
    public static X86InstructionId X86_INS_KXORB;
    public static X86InstructionId X86_INS_KXORD;
    public static X86InstructionId X86_INS_KXORQ;
    public static X86InstructionId X86_INS_KXORW;
    public static X86InstructionId X86_INS_LAHF;
    public static X86InstructionId X86_INS_LAR;
    public static X86InstructionId X86_INS_LDDQU;
    public static X86InstructionId X86_INS_LDMXCSR;
    public static X86InstructionId X86_INS_LDS;
    public static X86InstructionId X86_INS_FLDZ;
    public static X86InstructionId X86_INS_FLD1;
    public static X86InstructionId X86_INS_FLD;
    public static X86InstructionId X86_INS_LEA;
    public static X86InstructionId X86_INS_LEAVE;
    public static X86InstructionId X86_INS_LES;
    public static X86InstructionId X86_INS_LFENCE;
    public static X86InstructionId X86_INS_LFS;
    public static X86InstructionId X86_INS_LGDT;
    public static X86InstructionId X86_INS_LGS;
    public static X86InstructionId X86_INS_LIDT;
    public static X86InstructionId X86_INS_LLDT;
    public static X86InstructionId X86_INS_LMSW;
    public static X86InstructionId X86_INS_OR;
    public static X86InstructionId X86_INS_SUB;
    public static X86InstructionId X86_INS_XOR;
    public static X86InstructionId X86_INS_LODSB;
    public static X86InstructionId X86_INS_LODSD;
    public static X86InstructionId X86_INS_LODSQ;
    public static X86InstructionId X86_INS_LODSW;
    public static X86InstructionId X86_INS_LOOP;
    public static X86InstructionId X86_INS_LOOPE;
    public static X86InstructionId X86_INS_LOOPNE;
    public static X86InstructionId X86_INS_RETF;
    public static X86InstructionId X86_INS_RETFQ;
    public static X86InstructionId X86_INS_LSL;
    public static X86InstructionId X86_INS_LSS;
    public static X86InstructionId X86_INS_LTR;
    public static X86InstructionId X86_INS_XADD;
    public static X86InstructionId X86_INS_LZCNT;
    public static X86InstructionId X86_INS_MASKMOVDQU;
    public static X86InstructionId X86_INS_MAXPD;
    public static X86InstructionId X86_INS_MAXPS;
    public static X86InstructionId X86_INS_MAXSD;
    public static X86InstructionId X86_INS_MAXSS;
    public static X86InstructionId X86_INS_MFENCE;
    public static X86InstructionId X86_INS_MINPD;
    public static X86InstructionId X86_INS_MINPS;
    public static X86InstructionId X86_INS_MINSD;
    public static X86InstructionId X86_INS_MINSS;
    public static X86InstructionId X86_INS_CVTPD2PI;
    public static X86InstructionId X86_INS_CVTPI2PD;
    public static X86InstructionId X86_INS_CVTPI2PS;
    public static X86InstructionId X86_INS_CVTPS2PI;
    public static X86InstructionId X86_INS_CVTTPD2PI;
    public static X86InstructionId X86_INS_CVTTPS2PI;
    public static X86InstructionId X86_INS_EMMS;
    public static X86InstructionId X86_INS_MASKMOVQ;
    public static X86InstructionId X86_INS_MOVD;
    public static X86InstructionId X86_INS_MOVDQ2Q;
    public static X86InstructionId X86_INS_MOVNTQ;
    public static X86InstructionId X86_INS_MOVQ2DQ;
    public static X86InstructionId X86_INS_MOVQ;
    public static X86InstructionId X86_INS_PABSB;
    public static X86InstructionId X86_INS_PABSD;
    public static X86InstructionId X86_INS_PABSW;
    public static X86InstructionId X86_INS_PACKSSDW;
    public static X86InstructionId X86_INS_PACKSSWB;
    public static X86InstructionId X86_INS_PACKUSWB;
    public static X86InstructionId X86_INS_PADDB;
    public static X86InstructionId X86_INS_PADDD;
    public static X86InstructionId X86_INS_PADDQ;
    public static X86InstructionId X86_INS_PADDSB;
    public static X86InstructionId X86_INS_PADDSW;
    public static X86InstructionId X86_INS_PADDUSB;
    public static X86InstructionId X86_INS_PADDUSW;
    public static X86InstructionId X86_INS_PADDW;
    public static X86InstructionId X86_INS_PALIGNR;
    public static X86InstructionId X86_INS_PANDN;
    public static X86InstructionId X86_INS_PAND;
    public static X86InstructionId X86_INS_PAVGB;
    public static X86InstructionId X86_INS_PAVGW;
    public static X86InstructionId X86_INS_PCMPEQB;
    public static X86InstructionId X86_INS_PCMPEQD;
    public static X86InstructionId X86_INS_PCMPEQW;
    public static X86InstructionId X86_INS_PCMPGTB;
    public static X86InstructionId X86_INS_PCMPGTD;
    public static X86InstructionId X86_INS_PCMPGTW;
    public static X86InstructionId X86_INS_PEXTRW;
    public static X86InstructionId X86_INS_PHADDSW;
    public static X86InstructionId X86_INS_PHADDW;
    public static X86InstructionId X86_INS_PHADDD;
    public static X86InstructionId X86_INS_PHSUBD;
    public static X86InstructionId X86_INS_PHSUBSW;
    public static X86InstructionId X86_INS_PHSUBW;
    public static X86InstructionId X86_INS_PINSRW;
    public static X86InstructionId X86_INS_PMADDUBSW;
    public static X86InstructionId X86_INS_PMADDWD;
    public static X86InstructionId X86_INS_PMAXSW;
    public static X86InstructionId X86_INS_PMAXUB;
    public static X86InstructionId X86_INS_PMINSW;
    public static X86InstructionId X86_INS_PMINUB;
    public static X86InstructionId X86_INS_PMOVMSKB;
    public static X86InstructionId X86_INS_PMULHRSW;
    public static X86InstructionId X86_INS_PMULHUW;
    public static X86InstructionId X86_INS_PMULHW;
    public static X86InstructionId X86_INS_PMULLW;
    public static X86InstructionId X86_INS_PMULUDQ;
    public static X86InstructionId X86_INS_POR;
    public static X86InstructionId X86_INS_PSADBW;
    public static X86InstructionId X86_INS_PSHUFB;
    public static X86InstructionId X86_INS_PSHUFW;
    public static X86InstructionId X86_INS_PSIGNB;
    public static X86InstructionId X86_INS_PSIGND;
    public static X86InstructionId X86_INS_PSIGNW;
    public static X86InstructionId X86_INS_PSLLD;
    public static X86InstructionId X86_INS_PSLLQ;
    public static X86InstructionId X86_INS_PSLLW;
    public static X86InstructionId X86_INS_PSRAD;
    public static X86InstructionId X86_INS_PSRAW;
    public static X86InstructionId X86_INS_PSRLD;
    public static X86InstructionId X86_INS_PSRLQ;
    public static X86InstructionId X86_INS_PSRLW;
    public static X86InstructionId X86_INS_PSUBB;
    public static X86InstructionId X86_INS_PSUBD;
    public static X86InstructionId X86_INS_PSUBQ;
    public static X86InstructionId X86_INS_PSUBSB;
    public static X86InstructionId X86_INS_PSUBSW;
    public static X86InstructionId X86_INS_PSUBUSB;
    public static X86InstructionId X86_INS_PSUBUSW;
    public static X86InstructionId X86_INS_PSUBW;
    public static X86InstructionId X86_INS_PUNPCKHBW;
    public static X86InstructionId X86_INS_PUNPCKHDQ;
    public static X86InstructionId X86_INS_PUNPCKHWD;
    public static X86InstructionId X86_INS_PUNPCKLBW;
    public static X86InstructionId X86_INS_PUNPCKLDQ;
    public static X86InstructionId X86_INS_PUNPCKLWD;
    public static X86InstructionId X86_INS_PXOR;
    public static X86InstructionId X86_INS_MONITOR;
    public static X86InstructionId X86_INS_MONTMUL;
    public static X86InstructionId X86_INS_MOV;
    public static X86InstructionId X86_INS_MOVABS;
    public static X86InstructionId X86_INS_MOVBE;
    public static X86InstructionId X86_INS_MOVDDUP;
    public static X86InstructionId X86_INS_MOVDQA;
    public static X86InstructionId X86_INS_MOVDQU;
    public static X86InstructionId X86_INS_MOVHLPS;
    public static X86InstructionId X86_INS_MOVHPD;
    public static X86InstructionId X86_INS_MOVHPS;
    public static X86InstructionId X86_INS_MOVLHPS;
    public static X86InstructionId X86_INS_MOVLPD;
    public static X86InstructionId X86_INS_MOVLPS;
    public static X86InstructionId X86_INS_MOVMSKPD;
    public static X86InstructionId X86_INS_MOVMSKPS;
    public static X86InstructionId X86_INS_MOVNTDQA;
    public static X86InstructionId X86_INS_MOVNTDQ;
    public static X86InstructionId X86_INS_MOVNTI;
    public static X86InstructionId X86_INS_MOVNTPD;
    public static X86InstructionId X86_INS_MOVNTPS;
    public static X86InstructionId X86_INS_MOVNTSD;
    public static X86InstructionId X86_INS_MOVNTSS;
    public static X86InstructionId X86_INS_MOVSB;
    public static X86InstructionId X86_INS_MOVSD;
    public static X86InstructionId X86_INS_MOVSHDUP;
    public static X86InstructionId X86_INS_MOVSLDUP;
    public static X86InstructionId X86_INS_MOVSQ;
    public static X86InstructionId X86_INS_MOVSS;
    public static X86InstructionId X86_INS_MOVSW;
    public static X86InstructionId X86_INS_MOVSX;
    public static X86InstructionId X86_INS_MOVSXD;
    public static X86InstructionId X86_INS_MOVUPD;
    public static X86InstructionId X86_INS_MOVUPS;
    public static X86InstructionId X86_INS_MOVZX;
    public static X86InstructionId X86_INS_MPSADBW;
    public static X86InstructionId X86_INS_MUL;
    public static X86InstructionId X86_INS_MULPD;
    public static X86InstructionId X86_INS_MULPS;
    public static X86InstructionId X86_INS_MULSD;
    public static X86InstructionId X86_INS_MULSS;
    public static X86InstructionId X86_INS_MULX;
    public static X86InstructionId X86_INS_FMUL;
    public static X86InstructionId X86_INS_FIMUL;
    public static X86InstructionId X86_INS_FMULP;
    public static X86InstructionId X86_INS_MWAIT;
    public static X86InstructionId X86_INS_NEG;
    public static X86InstructionId X86_INS_NOP;
    public static X86InstructionId X86_INS_NOT;
    public static X86InstructionId X86_INS_OUT;
    public static X86InstructionId X86_INS_OUTSB;
    public static X86InstructionId X86_INS_OUTSD;
    public static X86InstructionId X86_INS_OUTSW;
    public static X86InstructionId X86_INS_PACKUSDW;
    public static X86InstructionId X86_INS_PAUSE;
    public static X86InstructionId X86_INS_PAVGUSB;
    public static X86InstructionId X86_INS_PBLENDVB;
    public static X86InstructionId X86_INS_PBLENDW;
    public static X86InstructionId X86_INS_PCLMULQDQ;
    public static X86InstructionId X86_INS_PCMPEQQ;
    public static X86InstructionId X86_INS_PCMPESTRI;
    public static X86InstructionId X86_INS_PCMPESTRM;
    public static X86InstructionId X86_INS_PCMPGTQ;
    public static X86InstructionId X86_INS_PCMPISTRI;
    public static X86InstructionId X86_INS_PCMPISTRM;
    public static X86InstructionId X86_INS_PCOMMIT;
    public static X86InstructionId X86_INS_PDEP;
    public static X86InstructionId X86_INS_PEXT;
    public static X86InstructionId X86_INS_PEXTRB;
    public static X86InstructionId X86_INS_PEXTRD;
    public static X86InstructionId X86_INS_PEXTRQ;
    public static X86InstructionId X86_INS_PF2ID;
    public static X86InstructionId X86_INS_PF2IW;
    public static X86InstructionId X86_INS_PFACC;
    public static X86InstructionId X86_INS_PFADD;
    public static X86InstructionId X86_INS_PFCMPEQ;
    public static X86InstructionId X86_INS_PFCMPGE;
    public static X86InstructionId X86_INS_PFCMPGT;
    public static X86InstructionId X86_INS_PFMAX;
    public static X86InstructionId X86_INS_PFMIN;
    public static X86InstructionId X86_INS_PFMUL;
    public static X86InstructionId X86_INS_PFNACC;
    public static X86InstructionId X86_INS_PFPNACC;
    public static X86InstructionId X86_INS_PFRCPIT1;
    public static X86InstructionId X86_INS_PFRCPIT2;
    public static X86InstructionId X86_INS_PFRCP;
    public static X86InstructionId X86_INS_PFRSQIT1;
    public static X86InstructionId X86_INS_PFRSQRT;
    public static X86InstructionId X86_INS_PFSUBR;
    public static X86InstructionId X86_INS_PFSUB;
    public static X86InstructionId X86_INS_PHMINPOSUW;
    public static X86InstructionId X86_INS_PI2FD;
    public static X86InstructionId X86_INS_PI2FW;
    public static X86InstructionId X86_INS_PINSRB;
    public static X86InstructionId X86_INS_PINSRD;
    public static X86InstructionId X86_INS_PINSRQ;
    public static X86InstructionId X86_INS_PMAXSB;
    public static X86InstructionId X86_INS_PMAXSD;
    public static X86InstructionId X86_INS_PMAXUD;
    public static X86InstructionId X86_INS_PMAXUW;
    public static X86InstructionId X86_INS_PMINSB;
    public static X86InstructionId X86_INS_PMINSD;
    public static X86InstructionId X86_INS_PMINUD;
    public static X86InstructionId X86_INS_PMINUW;
    public static X86InstructionId X86_INS_PMOVSXBD;
    public static X86InstructionId X86_INS_PMOVSXBQ;
    public static X86InstructionId X86_INS_PMOVSXBW;
    public static X86InstructionId X86_INS_PMOVSXDQ;
    public static X86InstructionId X86_INS_PMOVSXWD;
    public static X86InstructionId X86_INS_PMOVSXWQ;
    public static X86InstructionId X86_INS_PMOVZXBD;
    public static X86InstructionId X86_INS_PMOVZXBQ;
    public static X86InstructionId X86_INS_PMOVZXBW;
    public static X86InstructionId X86_INS_PMOVZXDQ;
    public static X86InstructionId X86_INS_PMOVZXWD;
    public static X86InstructionId X86_INS_PMOVZXWQ;
    public static X86InstructionId X86_INS_PMULDQ;
    public static X86InstructionId X86_INS_PMULHRW;
    public static X86InstructionId X86_INS_PMULLD;
    public static X86InstructionId X86_INS_POP;
    public static X86InstructionId X86_INS_POPAW;
    public static X86InstructionId X86_INS_POPAL;
    public static X86InstructionId X86_INS_POPCNT;
    public static X86InstructionId X86_INS_POPF;
    public static X86InstructionId X86_INS_POPFD;
    public static X86InstructionId X86_INS_POPFQ;
    public static X86InstructionId X86_INS_PREFETCH;
    public static X86InstructionId X86_INS_PREFETCHNTA;
    public static X86InstructionId X86_INS_PREFETCHT0;
    public static X86InstructionId X86_INS_PREFETCHT1;
    public static X86InstructionId X86_INS_PREFETCHT2;
    public static X86InstructionId X86_INS_PREFETCHW;
    public static X86InstructionId X86_INS_PSHUFD;
    public static X86InstructionId X86_INS_PSHUFHW;
    public static X86InstructionId X86_INS_PSHUFLW;
    public static X86InstructionId X86_INS_PSLLDQ;
    public static X86InstructionId X86_INS_PSRLDQ;
    public static X86InstructionId X86_INS_PSWAPD;
    public static X86InstructionId X86_INS_PTEST;
    public static X86InstructionId X86_INS_PUNPCKHQDQ;
    public static X86InstructionId X86_INS_PUNPCKLQDQ;
    public static X86InstructionId X86_INS_PUSH;
    public static X86InstructionId X86_INS_PUSHAW;
    public static X86InstructionId X86_INS_PUSHAL;
    public static X86InstructionId X86_INS_PUSHF;
    public static X86InstructionId X86_INS_PUSHFD;
    public static X86InstructionId X86_INS_PUSHFQ;
    public static X86InstructionId X86_INS_RCL;
    public static X86InstructionId X86_INS_RCPPS;
    public static X86InstructionId X86_INS_RCPSS;
    public static X86InstructionId X86_INS_RCR;
    public static X86InstructionId X86_INS_RDFSBASE;
    public static X86InstructionId X86_INS_RDGSBASE;
    public static X86InstructionId X86_INS_RDMSR;
    public static X86InstructionId X86_INS_RDPMC;
    public static X86InstructionId X86_INS_RDRAND;
    public static X86InstructionId X86_INS_RDSEED;
    public static X86InstructionId X86_INS_RDTSC;
    public static X86InstructionId X86_INS_RDTSCP;
    public static X86InstructionId X86_INS_ROL;
    public static X86InstructionId X86_INS_ROR;
    public static X86InstructionId X86_INS_RORX;
    public static X86InstructionId X86_INS_ROUNDPD;
    public static X86InstructionId X86_INS_ROUNDPS;
    public static X86InstructionId X86_INS_ROUNDSD;
    public static X86InstructionId X86_INS_ROUNDSS;
    public static X86InstructionId X86_INS_RSM;
    public static X86InstructionId X86_INS_RSQRTPS;
    public static X86InstructionId X86_INS_RSQRTSS;
    public static X86InstructionId X86_INS_SAHF;
    public static X86InstructionId X86_INS_SAL;
    public static X86InstructionId X86_INS_SALC;
    public static X86InstructionId X86_INS_SAR;
    public static X86InstructionId X86_INS_SARX;
    public static X86InstructionId X86_INS_SBB;
    public static X86InstructionId X86_INS_SCASB;
    public static X86InstructionId X86_INS_SCASD;
    public static X86InstructionId X86_INS_SCASQ;
    public static X86InstructionId X86_INS_SCASW;
    public static X86InstructionId X86_INS_SETAE;
    public static X86InstructionId X86_INS_SETA;
    public static X86InstructionId X86_INS_SETBE;
    public static X86InstructionId X86_INS_SETB;
    public static X86InstructionId X86_INS_SETE;
    public static X86InstructionId X86_INS_SETGE;
    public static X86InstructionId X86_INS_SETG;
    public static X86InstructionId X86_INS_SETLE;
    public static X86InstructionId X86_INS_SETL;
    public static X86InstructionId X86_INS_SETNE;
    public static X86InstructionId X86_INS_SETNO;
    public static X86InstructionId X86_INS_SETNP;
    public static X86InstructionId X86_INS_SETNS;
    public static X86InstructionId X86_INS_SETO;
    public static X86InstructionId X86_INS_SETP;
    public static X86InstructionId X86_INS_SETS;
    public static X86InstructionId X86_INS_SFENCE;
    public static X86InstructionId X86_INS_SGDT;
    public static X86InstructionId X86_INS_SHA1MSG1;
    public static X86InstructionId X86_INS_SHA1MSG2;
    public static X86InstructionId X86_INS_SHA1NEXTE;
    public static X86InstructionId X86_INS_SHA1RNDS4;
    public static X86InstructionId X86_INS_SHA256MSG1;
    public static X86InstructionId X86_INS_SHA256MSG2;
    public static X86InstructionId X86_INS_SHA256RNDS2;
    public static X86InstructionId X86_INS_SHL;
    public static X86InstructionId X86_INS_SHLD;
    public static X86InstructionId X86_INS_SHLX;
    public static X86InstructionId X86_INS_SHR;
    public static X86InstructionId X86_INS_SHRD;
    public static X86InstructionId X86_INS_SHRX;
    public static X86InstructionId X86_INS_SHUFPD;
    public static X86InstructionId X86_INS_SHUFPS;
    public static X86InstructionId X86_INS_SIDT;
    public static X86InstructionId X86_INS_FSIN;
    public static X86InstructionId X86_INS_SKINIT;
    public static X86InstructionId X86_INS_SLDT;
    public static X86InstructionId X86_INS_SMSW;
    public static X86InstructionId X86_INS_SQRTPD;
    public static X86InstructionId X86_INS_SQRTPS;
    public static X86InstructionId X86_INS_SQRTSD;
    public static X86InstructionId X86_INS_SQRTSS;
    public static X86InstructionId X86_INS_FSQRT;
    public static X86InstructionId X86_INS_STAC;
    public static X86InstructionId X86_INS_STC;
    public static X86InstructionId X86_INS_STD;
    public static X86InstructionId X86_INS_STGI;
    public static X86InstructionId X86_INS_STI;
    public static X86InstructionId X86_INS_STMXCSR;
    public static X86InstructionId X86_INS_STOSB;
    public static X86InstructionId X86_INS_STOSD;
    public static X86InstructionId X86_INS_STOSQ;
    public static X86InstructionId X86_INS_STOSW;
    public static X86InstructionId X86_INS_STR;
    public static X86InstructionId X86_INS_FST;
    public static X86InstructionId X86_INS_FSTP;
    public static X86InstructionId X86_INS_FSTPNCE;
    public static X86InstructionId X86_INS_FXCH;
    public static X86InstructionId X86_INS_SUBPD;
    public static X86InstructionId X86_INS_SUBPS;
    public static X86InstructionId X86_INS_FSUBR;
    public static X86InstructionId X86_INS_FISUBR;
    public static X86InstructionId X86_INS_FSUBRP;
    public static X86InstructionId X86_INS_SUBSD;
    public static X86InstructionId X86_INS_SUBSS;
    public static X86InstructionId X86_INS_FSUB;
    public static X86InstructionId X86_INS_FISUB;
    public static X86InstructionId X86_INS_FSUBP;
    public static X86InstructionId X86_INS_SWAPGS;
    public static X86InstructionId X86_INS_SYSCALL;
    public static X86InstructionId X86_INS_SYSENTER;
    public static X86InstructionId X86_INS_SYSEXIT;
    public static X86InstructionId X86_INS_SYSRET;
    public static X86InstructionId X86_INS_T1MSKC;
    public static X86InstructionId X86_INS_TEST;
    public static X86InstructionId X86_INS_UD2;
    public static X86InstructionId X86_INS_FTST;
    public static X86InstructionId X86_INS_TZCNT;
    public static X86InstructionId X86_INS_TZMSK;
    public static X86InstructionId X86_INS_FUCOMIP;
    public static X86InstructionId X86_INS_FUCOMI;
    public static X86InstructionId X86_INS_FUCOMPP;
    public static X86InstructionId X86_INS_FUCOMP;
    public static X86InstructionId X86_INS_FUCOM;
    public static X86InstructionId X86_INS_UD2B;
    public static X86InstructionId X86_INS_UNPCKHPD;
    public static X86InstructionId X86_INS_UNPCKHPS;
    public static X86InstructionId X86_INS_UNPCKLPD;
    public static X86InstructionId X86_INS_UNPCKLPS;
    public static X86InstructionId X86_INS_VADDPD;
    public static X86InstructionId X86_INS_VADDPS;
    public static X86InstructionId X86_INS_VADDSD;
    public static X86InstructionId X86_INS_VADDSS;
    public static X86InstructionId X86_INS_VADDSUBPD;
    public static X86InstructionId X86_INS_VADDSUBPS;
    public static X86InstructionId X86_INS_VAESDECLAST;
    public static X86InstructionId X86_INS_VAESDEC;
    public static X86InstructionId X86_INS_VAESENCLAST;
    public static X86InstructionId X86_INS_VAESENC;
    public static X86InstructionId X86_INS_VAESIMC;
    public static X86InstructionId X86_INS_VAESKEYGENASSIST;
    public static X86InstructionId X86_INS_VALIGND;
    public static X86InstructionId X86_INS_VALIGNQ;
    public static X86InstructionId X86_INS_VANDNPD;
    public static X86InstructionId X86_INS_VANDNPS;
    public static X86InstructionId X86_INS_VANDPD;
    public static X86InstructionId X86_INS_VANDPS;
    public static X86InstructionId X86_INS_VBLENDMPD;
    public static X86InstructionId X86_INS_VBLENDMPS;
    public static X86InstructionId X86_INS_VBLENDPD;
    public static X86InstructionId X86_INS_VBLENDPS;
    public static X86InstructionId X86_INS_VBLENDVPD;
    public static X86InstructionId X86_INS_VBLENDVPS;
    public static X86InstructionId X86_INS_VBROADCASTF128;
    public static X86InstructionId X86_INS_VBROADCASTI32X4;
    public static X86InstructionId X86_INS_VBROADCASTI64X4;
    public static X86InstructionId X86_INS_VBROADCASTSD;
    public static X86InstructionId X86_INS_VBROADCASTSS;
    public static X86InstructionId X86_INS_VCOMPRESSPD;
    public static X86InstructionId X86_INS_VCOMPRESSPS;
    public static X86InstructionId X86_INS_VCVTDQ2PD;
    public static X86InstructionId X86_INS_VCVTDQ2PS;
    public static X86InstructionId X86_INS_VCVTPD2DQX;
    public static X86InstructionId X86_INS_VCVTPD2DQ;
    public static X86InstructionId X86_INS_VCVTPD2PSX;
    public static X86InstructionId X86_INS_VCVTPD2PS;
    public static X86InstructionId X86_INS_VCVTPD2UDQ;
    public static X86InstructionId X86_INS_VCVTPH2PS;
    public static X86InstructionId X86_INS_VCVTPS2DQ;
    public static X86InstructionId X86_INS_VCVTPS2PD;
    public static X86InstructionId X86_INS_VCVTPS2PH;
    public static X86InstructionId X86_INS_VCVTPS2UDQ;
    public static X86InstructionId X86_INS_VCVTSD2SI;
    public static X86InstructionId X86_INS_VCVTSD2USI;
    public static X86InstructionId X86_INS_VCVTSS2SI;
    public static X86InstructionId X86_INS_VCVTSS2USI;
    public static X86InstructionId X86_INS_VCVTTPD2DQX;
    public static X86InstructionId X86_INS_VCVTTPD2DQ;
    public static X86InstructionId X86_INS_VCVTTPD2UDQ;
    public static X86InstructionId X86_INS_VCVTTPS2DQ;
    public static X86InstructionId X86_INS_VCVTTPS2UDQ;
    public static X86InstructionId X86_INS_VCVTUDQ2PD;
    public static X86InstructionId X86_INS_VCVTUDQ2PS;
    public static X86InstructionId X86_INS_VDIVPD;
    public static X86InstructionId X86_INS_VDIVPS;
    public static X86InstructionId X86_INS_VDIVSD;
    public static X86InstructionId X86_INS_VDIVSS;
    public static X86InstructionId X86_INS_VDPPD;
    public static X86InstructionId X86_INS_VDPPS;
    public static X86InstructionId X86_INS_VERR;
    public static X86InstructionId X86_INS_VERW;
    public static X86InstructionId X86_INS_VEXP2PD;
    public static X86InstructionId X86_INS_VEXP2PS;
    public static X86InstructionId X86_INS_VEXPANDPD;
    public static X86InstructionId X86_INS_VEXPANDPS;
    public static X86InstructionId X86_INS_VEXTRACTF128;
    public static X86InstructionId X86_INS_VEXTRACTF32X4;
    public static X86InstructionId X86_INS_VEXTRACTF64X4;
    public static X86InstructionId X86_INS_VEXTRACTI128;
    public static X86InstructionId X86_INS_VEXTRACTI32X4;
    public static X86InstructionId X86_INS_VEXTRACTI64X4;
    public static X86InstructionId X86_INS_VEXTRACTPS;
    public static X86InstructionId X86_INS_VFMADD132PD;
    public static X86InstructionId X86_INS_VFMADD132PS;
    public static X86InstructionId X86_INS_VFMADDPD;
    public static X86InstructionId X86_INS_VFMADD213PD;
    public static X86InstructionId X86_INS_VFMADD231PD;
    public static X86InstructionId X86_INS_VFMADDPS;
    public static X86InstructionId X86_INS_VFMADD213PS;
    public static X86InstructionId X86_INS_VFMADD231PS;
    public static X86InstructionId X86_INS_VFMADDSD;
    public static X86InstructionId X86_INS_VFMADD213SD;
    public static X86InstructionId X86_INS_VFMADD132SD;
    public static X86InstructionId X86_INS_VFMADD231SD;
    public static X86InstructionId X86_INS_VFMADDSS;
    public static X86InstructionId X86_INS_VFMADD213SS;
    public static X86InstructionId X86_INS_VFMADD132SS;
    public static X86InstructionId X86_INS_VFMADD231SS;
    public static X86InstructionId X86_INS_VFMADDSUB132PD;
    public static X86InstructionId X86_INS_VFMADDSUB132PS;
    public static X86InstructionId X86_INS_VFMADDSUBPD;
    public static X86InstructionId X86_INS_VFMADDSUB213PD;
    public static X86InstructionId X86_INS_VFMADDSUB231PD;
    public static X86InstructionId X86_INS_VFMADDSUBPS;
    public static X86InstructionId X86_INS_VFMADDSUB213PS;
    public static X86InstructionId X86_INS_VFMADDSUB231PS;
    public static X86InstructionId X86_INS_VFMSUB132PD;
    public static X86InstructionId X86_INS_VFMSUB132PS;
    public static X86InstructionId X86_INS_VFMSUBADD132PD;
    public static X86InstructionId X86_INS_VFMSUBADD132PS;
    public static X86InstructionId X86_INS_VFMSUBADDPD;
    public static X86InstructionId X86_INS_VFMSUBADD213PD;
    public static X86InstructionId X86_INS_VFMSUBADD231PD;
    public static X86InstructionId X86_INS_VFMSUBADDPS;
    public static X86InstructionId X86_INS_VFMSUBADD213PS;
    public static X86InstructionId X86_INS_VFMSUBADD231PS;
    public static X86InstructionId X86_INS_VFMSUBPD;
    public static X86InstructionId X86_INS_VFMSUB213PD;
    public static X86InstructionId X86_INS_VFMSUB231PD;
    public static X86InstructionId X86_INS_VFMSUBPS;
    public static X86InstructionId X86_INS_VFMSUB213PS;
    public static X86InstructionId X86_INS_VFMSUB231PS;
    public static X86InstructionId X86_INS_VFMSUBSD;
    public static X86InstructionId X86_INS_VFMSUB213SD;
    public static X86InstructionId X86_INS_VFMSUB132SD;
    public static X86InstructionId X86_INS_VFMSUB231SD;
    public static X86InstructionId X86_INS_VFMSUBSS;
    public static X86InstructionId X86_INS_VFMSUB213SS;
    public static X86InstructionId X86_INS_VFMSUB132SS;
    public static X86InstructionId X86_INS_VFMSUB231SS;
    public static X86InstructionId X86_INS_VFNMADD132PD;
    public static X86InstructionId X86_INS_VFNMADD132PS;
    public static X86InstructionId X86_INS_VFNMADDPD;
    public static X86InstructionId X86_INS_VFNMADD213PD;
    public static X86InstructionId X86_INS_VFNMADD231PD;
    public static X86InstructionId X86_INS_VFNMADDPS;
    public static X86InstructionId X86_INS_VFNMADD213PS;
    public static X86InstructionId X86_INS_VFNMADD231PS;
    public static X86InstructionId X86_INS_VFNMADDSD;
    public static X86InstructionId X86_INS_VFNMADD213SD;
    public static X86InstructionId X86_INS_VFNMADD132SD;
    public static X86InstructionId X86_INS_VFNMADD231SD;
    public static X86InstructionId X86_INS_VFNMADDSS;
    public static X86InstructionId X86_INS_VFNMADD213SS;
    public static X86InstructionId X86_INS_VFNMADD132SS;
    public static X86InstructionId X86_INS_VFNMADD231SS;
    public static X86InstructionId X86_INS_VFNMSUB132PD;
    public static X86InstructionId X86_INS_VFNMSUB132PS;
    public static X86InstructionId X86_INS_VFNMSUBPD;
    public static X86InstructionId X86_INS_VFNMSUB213PD;
    public static X86InstructionId X86_INS_VFNMSUB231PD;
    public static X86InstructionId X86_INS_VFNMSUBPS;
    public static X86InstructionId X86_INS_VFNMSUB213PS;
    public static X86InstructionId X86_INS_VFNMSUB231PS;
    public static X86InstructionId X86_INS_VFNMSUBSD;
    public static X86InstructionId X86_INS_VFNMSUB213SD;
    public static X86InstructionId X86_INS_VFNMSUB132SD;
    public static X86InstructionId X86_INS_VFNMSUB231SD;
    public static X86InstructionId X86_INS_VFNMSUBSS;
    public static X86InstructionId X86_INS_VFNMSUB213SS;
    public static X86InstructionId X86_INS_VFNMSUB132SS;
    public static X86InstructionId X86_INS_VFNMSUB231SS;
    public static X86InstructionId X86_INS_VFRCZPD;
    public static X86InstructionId X86_INS_VFRCZPS;
    public static X86InstructionId X86_INS_VFRCZSD;
    public static X86InstructionId X86_INS_VFRCZSS;
    public static X86InstructionId X86_INS_VORPD;
    public static X86InstructionId X86_INS_VORPS;
    public static X86InstructionId X86_INS_VXORPD;
    public static X86InstructionId X86_INS_VXORPS;
    public static X86InstructionId X86_INS_VGATHERDPD;
    public static X86InstructionId X86_INS_VGATHERDPS;
    public static X86InstructionId X86_INS_VGATHERPF0DPD;
    public static X86InstructionId X86_INS_VGATHERPF0DPS;
    public static X86InstructionId X86_INS_VGATHERPF0QPD;
    public static X86InstructionId X86_INS_VGATHERPF0QPS;
    public static X86InstructionId X86_INS_VGATHERPF1DPD;
    public static X86InstructionId X86_INS_VGATHERPF1DPS;
    public static X86InstructionId X86_INS_VGATHERPF1QPD;
    public static X86InstructionId X86_INS_VGATHERPF1QPS;
    public static X86InstructionId X86_INS_VGATHERQPD;
    public static X86InstructionId X86_INS_VGATHERQPS;
    public static X86InstructionId X86_INS_VHADDPD;
    public static X86InstructionId X86_INS_VHADDPS;
    public static X86InstructionId X86_INS_VHSUBPD;
    public static X86InstructionId X86_INS_VHSUBPS;
    public static X86InstructionId X86_INS_VINSERTF128;
    public static X86InstructionId X86_INS_VINSERTF32X4;
    public static X86InstructionId X86_INS_VINSERTF32X8;
    public static X86InstructionId X86_INS_VINSERTF64X2;
    public static X86InstructionId X86_INS_VINSERTF64X4;
    public static X86InstructionId X86_INS_VINSERTI128;
    public static X86InstructionId X86_INS_VINSERTI32X4;
    public static X86InstructionId X86_INS_VINSERTI32X8;
    public static X86InstructionId X86_INS_VINSERTI64X2;
    public static X86InstructionId X86_INS_VINSERTI64X4;
    public static X86InstructionId X86_INS_VINSERTPS;
    public static X86InstructionId X86_INS_VLDDQU;
    public static X86InstructionId X86_INS_VLDMXCSR;
    public static X86InstructionId X86_INS_VMASKMOVDQU;
    public static X86InstructionId X86_INS_VMASKMOVPD;
    public static X86InstructionId X86_INS_VMASKMOVPS;
    public static X86InstructionId X86_INS_VMAXPD;
    public static X86InstructionId X86_INS_VMAXPS;
    public static X86InstructionId X86_INS_VMAXSD;
    public static X86InstructionId X86_INS_VMAXSS;
    public static X86InstructionId X86_INS_VMCALL;
    public static X86InstructionId X86_INS_VMCLEAR;
    public static X86InstructionId X86_INS_VMFUNC;
    public static X86InstructionId X86_INS_VMINPD;
    public static X86InstructionId X86_INS_VMINPS;
    public static X86InstructionId X86_INS_VMINSD;
    public static X86InstructionId X86_INS_VMINSS;
    public static X86InstructionId X86_INS_VMLAUNCH;
    public static X86InstructionId X86_INS_VMLOAD;
    public static X86InstructionId X86_INS_VMMCALL;
    public static X86InstructionId X86_INS_VMOVQ;
    public static X86InstructionId X86_INS_VMOVDDUP;
    public static X86InstructionId X86_INS_VMOVD;
    public static X86InstructionId X86_INS_VMOVDQA32;
    public static X86InstructionId X86_INS_VMOVDQA64;
    public static X86InstructionId X86_INS_VMOVDQA;
    public static X86InstructionId X86_INS_VMOVDQU16;
    public static X86InstructionId X86_INS_VMOVDQU32;
    public static X86InstructionId X86_INS_VMOVDQU64;
    public static X86InstructionId X86_INS_VMOVDQU8;
    public static X86InstructionId X86_INS_VMOVDQU;
    public static X86InstructionId X86_INS_VMOVHLPS;
    public static X86InstructionId X86_INS_VMOVHPD;
    public static X86InstructionId X86_INS_VMOVHPS;
    public static X86InstructionId X86_INS_VMOVLHPS;
    public static X86InstructionId X86_INS_VMOVLPD;
    public static X86InstructionId X86_INS_VMOVLPS;
    public static X86InstructionId X86_INS_VMOVMSKPD;
    public static X86InstructionId X86_INS_VMOVMSKPS;
    public static X86InstructionId X86_INS_VMOVNTDQA;
    public static X86InstructionId X86_INS_VMOVNTDQ;
    public static X86InstructionId X86_INS_VMOVNTPD;
    public static X86InstructionId X86_INS_VMOVNTPS;
    public static X86InstructionId X86_INS_VMOVSD;
    public static X86InstructionId X86_INS_VMOVSHDUP;
    public static X86InstructionId X86_INS_VMOVSLDUP;
    public static X86InstructionId X86_INS_VMOVSS;
    public static X86InstructionId X86_INS_VMOVUPD;
    public static X86InstructionId X86_INS_VMOVUPS;
    public static X86InstructionId X86_INS_VMPSADBW;
    public static X86InstructionId X86_INS_VMPTRLD;
    public static X86InstructionId X86_INS_VMPTRST;
    public static X86InstructionId X86_INS_VMREAD;
    public static X86InstructionId X86_INS_VMRESUME;
    public static X86InstructionId X86_INS_VMRUN;
    public static X86InstructionId X86_INS_VMSAVE;
    public static X86InstructionId X86_INS_VMULPD;
    public static X86InstructionId X86_INS_VMULPS;
    public static X86InstructionId X86_INS_VMULSD;
    public static X86InstructionId X86_INS_VMULSS;
    public static X86InstructionId X86_INS_VMWRITE;
    public static X86InstructionId X86_INS_VMXOFF;
    public static X86InstructionId X86_INS_VMXON;
    public static X86InstructionId X86_INS_VPABSB;
    public static X86InstructionId X86_INS_VPABSD;
    public static X86InstructionId X86_INS_VPABSQ;
    public static X86InstructionId X86_INS_VPABSW;
    public static X86InstructionId X86_INS_VPACKSSDW;
    public static X86InstructionId X86_INS_VPACKSSWB;
    public static X86InstructionId X86_INS_VPACKUSDW;
    public static X86InstructionId X86_INS_VPACKUSWB;
    public static X86InstructionId X86_INS_VPADDB;
    public static X86InstructionId X86_INS_VPADDD;
    public static X86InstructionId X86_INS_VPADDQ;
    public static X86InstructionId X86_INS_VPADDSB;
    public static X86InstructionId X86_INS_VPADDSW;
    public static X86InstructionId X86_INS_VPADDUSB;
    public static X86InstructionId X86_INS_VPADDUSW;
    public static X86InstructionId X86_INS_VPADDW;
    public static X86InstructionId X86_INS_VPALIGNR;
    public static X86InstructionId X86_INS_VPANDD;
    public static X86InstructionId X86_INS_VPANDND;
    public static X86InstructionId X86_INS_VPANDNQ;
    public static X86InstructionId X86_INS_VPANDN;
    public static X86InstructionId X86_INS_VPANDQ;
    public static X86InstructionId X86_INS_VPAND;
    public static X86InstructionId X86_INS_VPAVGB;
    public static X86InstructionId X86_INS_VPAVGW;
    public static X86InstructionId X86_INS_VPBLENDD;
    public static X86InstructionId X86_INS_VPBLENDMB;
    public static X86InstructionId X86_INS_VPBLENDMD;
    public static X86InstructionId X86_INS_VPBLENDMQ;
    public static X86InstructionId X86_INS_VPBLENDMW;
    public static X86InstructionId X86_INS_VPBLENDVB;
    public static X86InstructionId X86_INS_VPBLENDW;
    public static X86InstructionId X86_INS_VPBROADCASTB;
    public static X86InstructionId X86_INS_VPBROADCASTD;
    public static X86InstructionId X86_INS_VPBROADCASTMB2Q;
    public static X86InstructionId X86_INS_VPBROADCASTMW2D;
    public static X86InstructionId X86_INS_VPBROADCASTQ;
    public static X86InstructionId X86_INS_VPBROADCASTW;
    public static X86InstructionId X86_INS_VPCLMULQDQ;
    public static X86InstructionId X86_INS_VPCMOV;
    public static X86InstructionId X86_INS_VPCMPB;
    public static X86InstructionId X86_INS_VPCMPD;
    public static X86InstructionId X86_INS_VPCMPEQB;
    public static X86InstructionId X86_INS_VPCMPEQD;
    public static X86InstructionId X86_INS_VPCMPEQQ;
    public static X86InstructionId X86_INS_VPCMPEQW;
    public static X86InstructionId X86_INS_VPCMPESTRI;
    public static X86InstructionId X86_INS_VPCMPESTRM;
    public static X86InstructionId X86_INS_VPCMPGTB;
    public static X86InstructionId X86_INS_VPCMPGTD;
    public static X86InstructionId X86_INS_VPCMPGTQ;
    public static X86InstructionId X86_INS_VPCMPGTW;
    public static X86InstructionId X86_INS_VPCMPISTRI;
    public static X86InstructionId X86_INS_VPCMPISTRM;
    public static X86InstructionId X86_INS_VPCMPQ;
    public static X86InstructionId X86_INS_VPCMPUB;
    public static X86InstructionId X86_INS_VPCMPUD;
    public static X86InstructionId X86_INS_VPCMPUQ;
    public static X86InstructionId X86_INS_VPCMPUW;
    public static X86InstructionId X86_INS_VPCMPW;
    public static X86InstructionId X86_INS_VPCOMB;
    public static X86InstructionId X86_INS_VPCOMD;
    public static X86InstructionId X86_INS_VPCOMPRESSD;
    public static X86InstructionId X86_INS_VPCOMPRESSQ;
    public static X86InstructionId X86_INS_VPCOMQ;
    public static X86InstructionId X86_INS_VPCOMUB;
    public static X86InstructionId X86_INS_VPCOMUD;
    public static X86InstructionId X86_INS_VPCOMUQ;
    public static X86InstructionId X86_INS_VPCOMUW;
    public static X86InstructionId X86_INS_VPCOMW;
    public static X86InstructionId X86_INS_VPCONFLICTD;
    public static X86InstructionId X86_INS_VPCONFLICTQ;
    public static X86InstructionId X86_INS_VPERM2F128;
    public static X86InstructionId X86_INS_VPERM2I128;
    public static X86InstructionId X86_INS_VPERMD;
    public static X86InstructionId X86_INS_VPERMI2D;
    public static X86InstructionId X86_INS_VPERMI2PD;
    public static X86InstructionId X86_INS_VPERMI2PS;
    public static X86InstructionId X86_INS_VPERMI2Q;
    public static X86InstructionId X86_INS_VPERMIL2PD;
    public static X86InstructionId X86_INS_VPERMIL2PS;
    public static X86InstructionId X86_INS_VPERMILPD;
    public static X86InstructionId X86_INS_VPERMILPS;
    public static X86InstructionId X86_INS_VPERMPD;
    public static X86InstructionId X86_INS_VPERMPS;
    public static X86InstructionId X86_INS_VPERMQ;
    public static X86InstructionId X86_INS_VPERMT2D;
    public static X86InstructionId X86_INS_VPERMT2PD;
    public static X86InstructionId X86_INS_VPERMT2PS;
    public static X86InstructionId X86_INS_VPERMT2Q;
    public static X86InstructionId X86_INS_VPEXPANDD;
    public static X86InstructionId X86_INS_VPEXPANDQ;
    public static X86InstructionId X86_INS_VPEXTRB;
    public static X86InstructionId X86_INS_VPEXTRD;
    public static X86InstructionId X86_INS_VPEXTRQ;
    public static X86InstructionId X86_INS_VPEXTRW;
    public static X86InstructionId X86_INS_VPGATHERDD;
    public static X86InstructionId X86_INS_VPGATHERDQ;
    public static X86InstructionId X86_INS_VPGATHERQD;
    public static X86InstructionId X86_INS_VPGATHERQQ;
    public static X86InstructionId X86_INS_VPHADDBD;
    public static X86InstructionId X86_INS_VPHADDBQ;
    public static X86InstructionId X86_INS_VPHADDBW;
    public static X86InstructionId X86_INS_VPHADDDQ;
    public static X86InstructionId X86_INS_VPHADDD;
    public static X86InstructionId X86_INS_VPHADDSW;
    public static X86InstructionId X86_INS_VPHADDUBD;
    public static X86InstructionId X86_INS_VPHADDUBQ;
    public static X86InstructionId X86_INS_VPHADDUBW;
    public static X86InstructionId X86_INS_VPHADDUDQ;
    public static X86InstructionId X86_INS_VPHADDUWD;
    public static X86InstructionId X86_INS_VPHADDUWQ;
    public static X86InstructionId X86_INS_VPHADDWD;
    public static X86InstructionId X86_INS_VPHADDWQ;
    public static X86InstructionId X86_INS_VPHADDW;
    public static X86InstructionId X86_INS_VPHMINPOSUW;
    public static X86InstructionId X86_INS_VPHSUBBW;
    public static X86InstructionId X86_INS_VPHSUBDQ;
    public static X86InstructionId X86_INS_VPHSUBD;
    public static X86InstructionId X86_INS_VPHSUBSW;
    public static X86InstructionId X86_INS_VPHSUBWD;
    public static X86InstructionId X86_INS_VPHSUBW;
    public static X86InstructionId X86_INS_VPINSRB;
    public static X86InstructionId X86_INS_VPINSRD;
    public static X86InstructionId X86_INS_VPINSRQ;
    public static X86InstructionId X86_INS_VPINSRW;
    public static X86InstructionId X86_INS_VPLZCNTD;
    public static X86InstructionId X86_INS_VPLZCNTQ;
    public static X86InstructionId X86_INS_VPMACSDD;
    public static X86InstructionId X86_INS_VPMACSDQH;
    public static X86InstructionId X86_INS_VPMACSDQL;
    public static X86InstructionId X86_INS_VPMACSSDD;
    public static X86InstructionId X86_INS_VPMACSSDQH;
    public static X86InstructionId X86_INS_VPMACSSDQL;
    public static X86InstructionId X86_INS_VPMACSSWD;
    public static X86InstructionId X86_INS_VPMACSSWW;
    public static X86InstructionId X86_INS_VPMACSWD;
    public static X86InstructionId X86_INS_VPMACSWW;
    public static X86InstructionId X86_INS_VPMADCSSWD;
    public static X86InstructionId X86_INS_VPMADCSWD;
    public static X86InstructionId X86_INS_VPMADDUBSW;
    public static X86InstructionId X86_INS_VPMADDWD;
    public static X86InstructionId X86_INS_VPMASKMOVD;
    public static X86InstructionId X86_INS_VPMASKMOVQ;
    public static X86InstructionId X86_INS_VPMAXSB;
    public static X86InstructionId X86_INS_VPMAXSD;
    public static X86InstructionId X86_INS_VPMAXSQ;
    public static X86InstructionId X86_INS_VPMAXSW;
    public static X86InstructionId X86_INS_VPMAXUB;
    public static X86InstructionId X86_INS_VPMAXUD;
    public static X86InstructionId X86_INS_VPMAXUQ;
    public static X86InstructionId X86_INS_VPMAXUW;
    public static X86InstructionId X86_INS_VPMINSB;
    public static X86InstructionId X86_INS_VPMINSD;
    public static X86InstructionId X86_INS_VPMINSQ;
    public static X86InstructionId X86_INS_VPMINSW;
    public static X86InstructionId X86_INS_VPMINUB;
    public static X86InstructionId X86_INS_VPMINUD;
    public static X86InstructionId X86_INS_VPMINUQ;
    public static X86InstructionId X86_INS_VPMINUW;
    public static X86InstructionId X86_INS_VPMOVDB;
    public static X86InstructionId X86_INS_VPMOVDW;
    public static X86InstructionId X86_INS_VPMOVM2B;
    public static X86InstructionId X86_INS_VPMOVM2D;
    public static X86InstructionId X86_INS_VPMOVM2Q;
    public static X86InstructionId X86_INS_VPMOVM2W;
    public static X86InstructionId X86_INS_VPMOVMSKB;
    public static X86InstructionId X86_INS_VPMOVQB;
    public static X86InstructionId X86_INS_VPMOVQD;
    public static X86InstructionId X86_INS_VPMOVQW;
    public static X86InstructionId X86_INS_VPMOVSDB;
    public static X86InstructionId X86_INS_VPMOVSDW;
    public static X86InstructionId X86_INS_VPMOVSQB;
    public static X86InstructionId X86_INS_VPMOVSQD;
    public static X86InstructionId X86_INS_VPMOVSQW;
    public static X86InstructionId X86_INS_VPMOVSXBD;
    public static X86InstructionId X86_INS_VPMOVSXBQ;
    public static X86InstructionId X86_INS_VPMOVSXBW;
    public static X86InstructionId X86_INS_VPMOVSXDQ;
    public static X86InstructionId X86_INS_VPMOVSXWD;
    public static X86InstructionId X86_INS_VPMOVSXWQ;
    public static X86InstructionId X86_INS_VPMOVUSDB;
    public static X86InstructionId X86_INS_VPMOVUSDW;
    public static X86InstructionId X86_INS_VPMOVUSQB;
    public static X86InstructionId X86_INS_VPMOVUSQD;
    public static X86InstructionId X86_INS_VPMOVUSQW;
    public static X86InstructionId X86_INS_VPMOVZXBD;
    public static X86InstructionId X86_INS_VPMOVZXBQ;
    public static X86InstructionId X86_INS_VPMOVZXBW;
    public static X86InstructionId X86_INS_VPMOVZXDQ;
    public static X86InstructionId X86_INS_VPMOVZXWD;
    public static X86InstructionId X86_INS_VPMOVZXWQ;
    public static X86InstructionId X86_INS_VPMULDQ;
    public static X86InstructionId X86_INS_VPMULHRSW;
    public static X86InstructionId X86_INS_VPMULHUW;
    public static X86InstructionId X86_INS_VPMULHW;
    public static X86InstructionId X86_INS_VPMULLD;
    public static X86InstructionId X86_INS_VPMULLQ;
    public static X86InstructionId X86_INS_VPMULLW;
    public static X86InstructionId X86_INS_VPMULUDQ;
    public static X86InstructionId X86_INS_VPORD;
    public static X86InstructionId X86_INS_VPORQ;
    public static X86InstructionId X86_INS_VPOR;
    public static X86InstructionId X86_INS_VPPERM;
    public static X86InstructionId X86_INS_VPROTB;
    public static X86InstructionId X86_INS_VPROTD;
    public static X86InstructionId X86_INS_VPROTQ;
    public static X86InstructionId X86_INS_VPROTW;
    public static X86InstructionId X86_INS_VPSADBW;
    public static X86InstructionId X86_INS_VPSCATTERDD;
    public static X86InstructionId X86_INS_VPSCATTERDQ;
    public static X86InstructionId X86_INS_VPSCATTERQD;
    public static X86InstructionId X86_INS_VPSCATTERQQ;
    public static X86InstructionId X86_INS_VPSHAB;
    public static X86InstructionId X86_INS_VPSHAD;
    public static X86InstructionId X86_INS_VPSHAQ;
    public static X86InstructionId X86_INS_VPSHAW;
    public static X86InstructionId X86_INS_VPSHLB;
    public static X86InstructionId X86_INS_VPSHLD;
    public static X86InstructionId X86_INS_VPSHLQ;
    public static X86InstructionId X86_INS_VPSHLW;
    public static X86InstructionId X86_INS_VPSHUFB;
    public static X86InstructionId X86_INS_VPSHUFD;
    public static X86InstructionId X86_INS_VPSHUFHW;
    public static X86InstructionId X86_INS_VPSHUFLW;
    public static X86InstructionId X86_INS_VPSIGNB;
    public static X86InstructionId X86_INS_VPSIGND;
    public static X86InstructionId X86_INS_VPSIGNW;
    public static X86InstructionId X86_INS_VPSLLDQ;
    public static X86InstructionId X86_INS_VPSLLD;
    public static X86InstructionId X86_INS_VPSLLQ;
    public static X86InstructionId X86_INS_VPSLLVD;
    public static X86InstructionId X86_INS_VPSLLVQ;
    public static X86InstructionId X86_INS_VPSLLW;
    public static X86InstructionId X86_INS_VPSRAD;
    public static X86InstructionId X86_INS_VPSRAQ;
    public static X86InstructionId X86_INS_VPSRAVD;
    public static X86InstructionId X86_INS_VPSRAVQ;
    public static X86InstructionId X86_INS_VPSRAW;
    public static X86InstructionId X86_INS_VPSRLDQ;
    public static X86InstructionId X86_INS_VPSRLD;
    public static X86InstructionId X86_INS_VPSRLQ;
    public static X86InstructionId X86_INS_VPSRLVD;
    public static X86InstructionId X86_INS_VPSRLVQ;
    public static X86InstructionId X86_INS_VPSRLW;
    public static X86InstructionId X86_INS_VPSUBB;
    public static X86InstructionId X86_INS_VPSUBD;
    public static X86InstructionId X86_INS_VPSUBQ;
    public static X86InstructionId X86_INS_VPSUBSB;
    public static X86InstructionId X86_INS_VPSUBSW;
    public static X86InstructionId X86_INS_VPSUBUSB;
    public static X86InstructionId X86_INS_VPSUBUSW;
    public static X86InstructionId X86_INS_VPSUBW;
    public static X86InstructionId X86_INS_VPTESTMD;
    public static X86InstructionId X86_INS_VPTESTMQ;
    public static X86InstructionId X86_INS_VPTESTNMD;
    public static X86InstructionId X86_INS_VPTESTNMQ;
    public static X86InstructionId X86_INS_VPTEST;
    public static X86InstructionId X86_INS_VPUNPCKHBW;
    public static X86InstructionId X86_INS_VPUNPCKHDQ;
    public static X86InstructionId X86_INS_VPUNPCKHQDQ;
    public static X86InstructionId X86_INS_VPUNPCKHWD;
    public static X86InstructionId X86_INS_VPUNPCKLBW;
    public static X86InstructionId X86_INS_VPUNPCKLDQ;
    public static X86InstructionId X86_INS_VPUNPCKLQDQ;
    public static X86InstructionId X86_INS_VPUNPCKLWD;
    public static X86InstructionId X86_INS_VPXORD;
    public static X86InstructionId X86_INS_VPXORQ;
    public static X86InstructionId X86_INS_VPXOR;
    public static X86InstructionId X86_INS_VRCP14PD;
    public static X86InstructionId X86_INS_VRCP14PS;
    public static X86InstructionId X86_INS_VRCP14SD;
    public static X86InstructionId X86_INS_VRCP14SS;
    public static X86InstructionId X86_INS_VRCP28PD;
    public static X86InstructionId X86_INS_VRCP28PS;
    public static X86InstructionId X86_INS_VRCP28SD;
    public static X86InstructionId X86_INS_VRCP28SS;
    public static X86InstructionId X86_INS_VRCPPS;
    public static X86InstructionId X86_INS_VRCPSS;
    public static X86InstructionId X86_INS_VRNDSCALEPD;
    public static X86InstructionId X86_INS_VRNDSCALEPS;
    public static X86InstructionId X86_INS_VRNDSCALESD;
    public static X86InstructionId X86_INS_VRNDSCALESS;
    public static X86InstructionId X86_INS_VROUNDPD;
    public static X86InstructionId X86_INS_VROUNDPS;
    public static X86InstructionId X86_INS_VROUNDSD;
    public static X86InstructionId X86_INS_VROUNDSS;
    public static X86InstructionId X86_INS_VRSQRT14PD;
    public static X86InstructionId X86_INS_VRSQRT14PS;
    public static X86InstructionId X86_INS_VRSQRT14SD;
    public static X86InstructionId X86_INS_VRSQRT14SS;
    public static X86InstructionId X86_INS_VRSQRT28PD;
    public static X86InstructionId X86_INS_VRSQRT28PS;
    public static X86InstructionId X86_INS_VRSQRT28SD;
    public static X86InstructionId X86_INS_VRSQRT28SS;
    public static X86InstructionId X86_INS_VRSQRTPS;
    public static X86InstructionId X86_INS_VRSQRTSS;
    public static X86InstructionId X86_INS_VSCATTERDPD;
    public static X86InstructionId X86_INS_VSCATTERDPS;
    public static X86InstructionId X86_INS_VSCATTERPF0DPD;
    public static X86InstructionId X86_INS_VSCATTERPF0DPS;
    public static X86InstructionId X86_INS_VSCATTERPF0QPD;
    public static X86InstructionId X86_INS_VSCATTERPF0QPS;
    public static X86InstructionId X86_INS_VSCATTERPF1DPD;
    public static X86InstructionId X86_INS_VSCATTERPF1DPS;
    public static X86InstructionId X86_INS_VSCATTERPF1QPD;
    public static X86InstructionId X86_INS_VSCATTERPF1QPS;
    public static X86InstructionId X86_INS_VSCATTERQPD;
    public static X86InstructionId X86_INS_VSCATTERQPS;
    public static X86InstructionId X86_INS_VSHUFPD;
    public static X86InstructionId X86_INS_VSHUFPS;
    public static X86InstructionId X86_INS_VSQRTPD;
    public static X86InstructionId X86_INS_VSQRTPS;
    public static X86InstructionId X86_INS_VSQRTSD;
    public static X86InstructionId X86_INS_VSQRTSS;
    public static X86InstructionId X86_INS_VSTMXCSR;
    public static X86InstructionId X86_INS_VSUBPD;
    public static X86InstructionId X86_INS_VSUBPS;
    public static X86InstructionId X86_INS_VSUBSD;
    public static X86InstructionId X86_INS_VSUBSS;
    public static X86InstructionId X86_INS_VTESTPD;
    public static X86InstructionId X86_INS_VTESTPS;
    public static X86InstructionId X86_INS_VUNPCKHPD;
    public static X86InstructionId X86_INS_VUNPCKHPS;
    public static X86InstructionId X86_INS_VUNPCKLPD;
    public static X86InstructionId X86_INS_VUNPCKLPS;
    public static X86InstructionId X86_INS_VZEROALL;
    public static X86InstructionId X86_INS_VZEROUPPER;
    public static X86InstructionId X86_INS_WAIT;
    public static X86InstructionId X86_INS_WBINVD;
    public static X86InstructionId X86_INS_WRFSBASE;
    public static X86InstructionId X86_INS_WRGSBASE;
    public static X86InstructionId X86_INS_WRMSR;
    public static X86InstructionId X86_INS_XABORT;
    public static X86InstructionId X86_INS_XACQUIRE;
    public static X86InstructionId X86_INS_XBEGIN;
    public static X86InstructionId X86_INS_XCHG;
    public static X86InstructionId X86_INS_XCRYPTCBC;
    public static X86InstructionId X86_INS_XCRYPTCFB;
    public static X86InstructionId X86_INS_XCRYPTCTR;
    public static X86InstructionId X86_INS_XCRYPTECB;
    public static X86InstructionId X86_INS_XCRYPTOFB;
    public static X86InstructionId X86_INS_XEND;
    public static X86InstructionId X86_INS_XGETBV;
    public static X86InstructionId X86_INS_XLATB;
    public static X86InstructionId X86_INS_XRELEASE;
    public static X86InstructionId X86_INS_XRSTOR;
    public static X86InstructionId X86_INS_XRSTOR64;
    public static X86InstructionId X86_INS_XRSTORS;
    public static X86InstructionId X86_INS_XRSTORS64;
    public static X86InstructionId X86_INS_XSAVE;
    public static X86InstructionId X86_INS_XSAVE64;
    public static X86InstructionId X86_INS_XSAVEC;
    public static X86InstructionId X86_INS_XSAVEC64;
    public static X86InstructionId X86_INS_XSAVEOPT;
    public static X86InstructionId X86_INS_XSAVEOPT64;
    public static X86InstructionId X86_INS_XSAVES;
    public static X86InstructionId X86_INS_XSAVES64;
    public static X86InstructionId X86_INS_XSETBV;
    public static X86InstructionId X86_INS_XSHA1;
    public static X86InstructionId X86_INS_XSHA256;
    public static X86InstructionId X86_INS_XSTORE;
    public static X86InstructionId X86_INS_XTEST;
    public static X86InstructionId X86_INS_FDISI8087_NOP;
    public static X86InstructionId X86_INS_FENI8087_NOP;
    public static X86InstructionId X86_INS_CMPSS;
    public static X86InstructionId X86_INS_CMPEQSS;
    public static X86InstructionId X86_INS_CMPLTSS;
    public static X86InstructionId X86_INS_CMPLESS;
    public static X86InstructionId X86_INS_CMPUNORDSS;
    public static X86InstructionId X86_INS_CMPNEQSS;
    public static X86InstructionId X86_INS_CMPNLTSS;
    public static X86InstructionId X86_INS_CMPNLESS;
    public static X86InstructionId X86_INS_CMPORDSS;
    public static X86InstructionId X86_INS_CMPSD;
    public static X86InstructionId X86_INS_CMPEQSD;
    public static X86InstructionId X86_INS_CMPLTSD;
    public static X86InstructionId X86_INS_CMPLESD;
    public static X86InstructionId X86_INS_CMPUNORDSD;
    public static X86InstructionId X86_INS_CMPNEQSD;
    public static X86InstructionId X86_INS_CMPNLTSD;
    public static X86InstructionId X86_INS_CMPNLESD;
    public static X86InstructionId X86_INS_CMPORDSD;
    public static X86InstructionId X86_INS_CMPPS;
    public static X86InstructionId X86_INS_CMPEQPS;
    public static X86InstructionId X86_INS_CMPLTPS;
    public static X86InstructionId X86_INS_CMPLEPS;
    public static X86InstructionId X86_INS_CMPUNORDPS;
    public static X86InstructionId X86_INS_CMPNEQPS;
    public static X86InstructionId X86_INS_CMPNLTPS;
    public static X86InstructionId X86_INS_CMPNLEPS;
    public static X86InstructionId X86_INS_CMPORDPS;
    public static X86InstructionId X86_INS_CMPPD;
    public static X86InstructionId X86_INS_CMPEQPD;
    public static X86InstructionId X86_INS_CMPLTPD;
    public static X86InstructionId X86_INS_CMPLEPD;
    public static X86InstructionId X86_INS_CMPUNORDPD;
    public static X86InstructionId X86_INS_CMPNEQPD;
    public static X86InstructionId X86_INS_CMPNLTPD;
    public static X86InstructionId X86_INS_CMPNLEPD;
    public static X86InstructionId X86_INS_CMPORDPD;
    public static X86InstructionId X86_INS_VCMPSS;
    public static X86InstructionId X86_INS_VCMPEQSS;
    public static X86InstructionId X86_INS_VCMPLTSS;
    public static X86InstructionId X86_INS_VCMPLESS;
    public static X86InstructionId X86_INS_VCMPUNORDSS;
    public static X86InstructionId X86_INS_VCMPNEQSS;
    public static X86InstructionId X86_INS_VCMPNLTSS;
    public static X86InstructionId X86_INS_VCMPNLESS;
    public static X86InstructionId X86_INS_VCMPORDSS;
    public static X86InstructionId X86_INS_VCMPEQ_UQSS;
    public static X86InstructionId X86_INS_VCMPNGESS;
    public static X86InstructionId X86_INS_VCMPNGTSS;
    public static X86InstructionId X86_INS_VCMPFALSESS;
    public static X86InstructionId X86_INS_VCMPNEQ_OQSS;
    public static X86InstructionId X86_INS_VCMPGESS;
    public static X86InstructionId X86_INS_VCMPGTSS;
    public static X86InstructionId X86_INS_VCMPTRUESS;
    public static X86InstructionId X86_INS_VCMPEQ_OSSS;
    public static X86InstructionId X86_INS_VCMPLT_OQSS;
    public static X86InstructionId X86_INS_VCMPLE_OQSS;
    public static X86InstructionId X86_INS_VCMPUNORD_SSS;
    public static X86InstructionId X86_INS_VCMPNEQ_USSS;
    public static X86InstructionId X86_INS_VCMPNLT_UQSS;
    public static X86InstructionId X86_INS_VCMPNLE_UQSS;
    public static X86InstructionId X86_INS_VCMPORD_SSS;
    public static X86InstructionId X86_INS_VCMPEQ_USSS;
    public static X86InstructionId X86_INS_VCMPNGE_UQSS;
    public static X86InstructionId X86_INS_VCMPNGT_UQSS;
    public static X86InstructionId X86_INS_VCMPFALSE_OSSS;
    public static X86InstructionId X86_INS_VCMPNEQ_OSSS;
    public static X86InstructionId X86_INS_VCMPGE_OQSS;
    public static X86InstructionId X86_INS_VCMPGT_OQSS;
    public static X86InstructionId X86_INS_VCMPTRUE_USSS;
    public static X86InstructionId X86_INS_VCMPSD;
    public static X86InstructionId X86_INS_VCMPEQSD;
    public static X86InstructionId X86_INS_VCMPLTSD;
    public static X86InstructionId X86_INS_VCMPLESD;
    public static X86InstructionId X86_INS_VCMPUNORDSD;
    public static X86InstructionId X86_INS_VCMPNEQSD;
    public static X86InstructionId X86_INS_VCMPNLTSD;
    public static X86InstructionId X86_INS_VCMPNLESD;
    public static X86InstructionId X86_INS_VCMPORDSD;
    public static X86InstructionId X86_INS_VCMPEQ_UQSD;
    public static X86InstructionId X86_INS_VCMPNGESD;
    public static X86InstructionId X86_INS_VCMPNGTSD;
    public static X86InstructionId X86_INS_VCMPFALSESD;
    public static X86InstructionId X86_INS_VCMPNEQ_OQSD;
    public static X86InstructionId X86_INS_VCMPGESD;
    public static X86InstructionId X86_INS_VCMPGTSD;
    public static X86InstructionId X86_INS_VCMPTRUESD;
    public static X86InstructionId X86_INS_VCMPEQ_OSSD;
    public static X86InstructionId X86_INS_VCMPLT_OQSD;
    public static X86InstructionId X86_INS_VCMPLE_OQSD;
    public static X86InstructionId X86_INS_VCMPUNORD_SSD;
    public static X86InstructionId X86_INS_VCMPNEQ_USSD;
    public static X86InstructionId X86_INS_VCMPNLT_UQSD;
    public static X86InstructionId X86_INS_VCMPNLE_UQSD;
    public static X86InstructionId X86_INS_VCMPORD_SSD;
    public static X86InstructionId X86_INS_VCMPEQ_USSD;
    public static X86InstructionId X86_INS_VCMPNGE_UQSD;
    public static X86InstructionId X86_INS_VCMPNGT_UQSD;
    public static X86InstructionId X86_INS_VCMPFALSE_OSSD;
    public static X86InstructionId X86_INS_VCMPNEQ_OSSD;
    public static X86InstructionId X86_INS_VCMPGE_OQSD;
    public static X86InstructionId X86_INS_VCMPGT_OQSD;
    public static X86InstructionId X86_INS_VCMPTRUE_USSD;
    public static X86InstructionId X86_INS_VCMPPS;
    public static X86InstructionId X86_INS_VCMPEQPS;
    public static X86InstructionId X86_INS_VCMPLTPS;
    public static X86InstructionId X86_INS_VCMPLEPS;
    public static X86InstructionId X86_INS_VCMPUNORDPS;
    public static X86InstructionId X86_INS_VCMPNEQPS;
    public static X86InstructionId X86_INS_VCMPNLTPS;
    public static X86InstructionId X86_INS_VCMPNLEPS;
    public static X86InstructionId X86_INS_VCMPORDPS;
    public static X86InstructionId X86_INS_VCMPEQ_UQPS;
    public static X86InstructionId X86_INS_VCMPNGEPS;
    public static X86InstructionId X86_INS_VCMPNGTPS;
    public static X86InstructionId X86_INS_VCMPFALSEPS;
    public static X86InstructionId X86_INS_VCMPNEQ_OQPS;
    public static X86InstructionId X86_INS_VCMPGEPS;
    public static X86InstructionId X86_INS_VCMPGTPS;
    public static X86InstructionId X86_INS_VCMPTRUEPS;
    public static X86InstructionId X86_INS_VCMPEQ_OSPS;
    public static X86InstructionId X86_INS_VCMPLT_OQPS;
    public static X86InstructionId X86_INS_VCMPLE_OQPS;
    public static X86InstructionId X86_INS_VCMPUNORD_SPS;
    public static X86InstructionId X86_INS_VCMPNEQ_USPS;
    public static X86InstructionId X86_INS_VCMPNLT_UQPS;
    public static X86InstructionId X86_INS_VCMPNLE_UQPS;
    public static X86InstructionId X86_INS_VCMPORD_SPS;
    public static X86InstructionId X86_INS_VCMPEQ_USPS;
    public static X86InstructionId X86_INS_VCMPNGE_UQPS;
    public static X86InstructionId X86_INS_VCMPNGT_UQPS;
    public static X86InstructionId X86_INS_VCMPFALSE_OSPS;
    public static X86InstructionId X86_INS_VCMPNEQ_OSPS;
    public static X86InstructionId X86_INS_VCMPGE_OQPS;
    public static X86InstructionId X86_INS_VCMPGT_OQPS;
    public static X86InstructionId X86_INS_VCMPTRUE_USPS;
    public static X86InstructionId X86_INS_VCMPPD;
    public static X86InstructionId X86_INS_VCMPEQPD;
    public static X86InstructionId X86_INS_VCMPLTPD;
    public static X86InstructionId X86_INS_VCMPLEPD;
    public static X86InstructionId X86_INS_VCMPUNORDPD;
    public static X86InstructionId X86_INS_VCMPNEQPD;
    public static X86InstructionId X86_INS_VCMPNLTPD;
    public static X86InstructionId X86_INS_VCMPNLEPD;
    public static X86InstructionId X86_INS_VCMPORDPD;
    public static X86InstructionId X86_INS_VCMPEQ_UQPD;
    public static X86InstructionId X86_INS_VCMPNGEPD;
    public static X86InstructionId X86_INS_VCMPNGTPD;
    public static X86InstructionId X86_INS_VCMPFALSEPD;
    public static X86InstructionId X86_INS_VCMPNEQ_OQPD;
    public static X86InstructionId X86_INS_VCMPGEPD;
    public static X86InstructionId X86_INS_VCMPGTPD;
    public static X86InstructionId X86_INS_VCMPTRUEPD;
    public static X86InstructionId X86_INS_VCMPEQ_OSPD;
    public static X86InstructionId X86_INS_VCMPLT_OQPD;
    public static X86InstructionId X86_INS_VCMPLE_OQPD;
    public static X86InstructionId X86_INS_VCMPUNORD_SPD;
    public static X86InstructionId X86_INS_VCMPNEQ_USPD;
    public static X86InstructionId X86_INS_VCMPNLT_UQPD;
    public static X86InstructionId X86_INS_VCMPNLE_UQPD;
    public static X86InstructionId X86_INS_VCMPORD_SPD;
    public static X86InstructionId X86_INS_VCMPEQ_USPD;
    public static X86InstructionId X86_INS_VCMPNGE_UQPD;
    public static X86InstructionId X86_INS_VCMPNGT_UQPD;
    public static X86InstructionId X86_INS_VCMPFALSE_OSPD;
    public static X86InstructionId X86_INS_VCMPNEQ_OSPD;
    public static X86InstructionId X86_INS_VCMPGE_OQPD;
    public static X86InstructionId X86_INS_VCMPGT_OQPD;
    public static X86InstructionId X86_INS_VCMPTRUE_USPD;
    public static X86InstructionId X86_INS_UD0;
    public static X86InstructionId X86_INS_ENDBR32;
    public static X86InstructionId X86_INS_ENDBR64;
}
public class Gee.External.Capstone.X86.X86MemoryOperandValue : object {
    [CompilerGeneratedAttribute]
private X86Register <Base>k__BackingField;
    [CompilerGeneratedAttribute]
private long <Displacement>k__BackingField;
    [CompilerGeneratedAttribute]
private X86Register <Index>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Scale>k__BackingField;
    [CompilerGeneratedAttribute]
private X86Register <Segment>k__BackingField;
    public X86Register Base { get; }
    public long Displacement { get; }
    public X86Register Index { get; }
    public int Scale { get; }
    public X86Register Segment { get; }
    internal X86MemoryOperandValue(CapstoneDisassembler disassembler, NativeX86MemoryOperandValue& nativeMemoryOperandValue);
    [CompilerGeneratedAttribute]
public X86Register get_Base();
    [CompilerGeneratedAttribute]
public long get_Displacement();
    [CompilerGeneratedAttribute]
public X86Register get_Index();
    [CompilerGeneratedAttribute]
public int get_Scale();
    [CompilerGeneratedAttribute]
public X86Register get_Segment();
}
public class Gee.External.Capstone.X86.X86Operand : object {
    private OperandAccessType _accessType;
    private long _immediate;
    private X86MemoryOperandValue _memory;
    private X86Register _register;
    [CompilerGeneratedAttribute]
private X86AvxBroadcast <AvxBroadcast>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AvxZeroOpMask>k__BackingField;
    [CompilerGeneratedAttribute]
private byte <Size>k__BackingField;
    [CompilerGeneratedAttribute]
private X86OperandType <Type>k__BackingField;
    public OperandAccessType AccessType { get; }
    public X86AvxBroadcast AvxBroadcast { get; }
    public bool AvxZeroOpMask { get; }
    public long Immediate { get; }
    public bool IsDietModeEnabled { get; }
    public X86MemoryOperandValue Memory { get; }
    public X86Register Register { get; }
    public byte Size { get; }
    public X86OperandType Type { get; }
    internal X86Operand(CapstoneDisassembler disassembler, NativeX86Operand& nativeOperand);
    public OperandAccessType get_AccessType();
    [CompilerGeneratedAttribute]
public X86AvxBroadcast get_AvxBroadcast();
    [CompilerGeneratedAttribute]
public bool get_AvxZeroOpMask();
    public long get_Immediate();
    public bool get_IsDietModeEnabled();
    public X86MemoryOperandValue get_Memory();
    public X86Register get_Register();
    [CompilerGeneratedAttribute]
public byte get_Size();
    [CompilerGeneratedAttribute]
public X86OperandType get_Type();
    internal static X86Operand[] Create(CapstoneDisassembler disassembler, NativeX86InstructionDetail& nativeInstructionDetail);
}
public enum Gee.External.Capstone.X86.X86OperandType : Enum {
    public int value__;
    public static X86OperandType Invalid;
    public static X86OperandType Register;
    public static X86OperandType Immediate;
    public static X86OperandType Memory;
}
public enum Gee.External.Capstone.X86.X86Prefix : Enum {
    public byte value__;
    public static X86Prefix Invalid;
    public static X86Prefix X86_PREFIX_LOCK;
    public static X86Prefix X86_PREFIX_REP;
    public static X86Prefix X86_PREFIX_REPE;
    public static X86Prefix X86_PREFIX_REPNE;
    public static X86Prefix X86_PREFIX_CS;
    public static X86Prefix X86_PREFIX_SS;
    public static X86Prefix X86_PREFIX_DS;
    public static X86Prefix X86_PREFIX_ES;
    public static X86Prefix X86_PREFIX_FS;
    public static X86Prefix X86_PREFIX_GS;
    public static X86Prefix X86_PREFIX_OPSIZE;
    public static X86Prefix X86_PREFIX_ADDRSIZE;
}
public class Gee.External.Capstone.X86.X86Register : Register`1<X86RegisterId> {
    internal X86Register(X86RegisterId id, string name);
    internal static X86Register TryCreate(CapstoneDisassembler disassembler, X86RegisterId id);
}
public enum Gee.External.Capstone.X86.X86RegisterId : Enum {
    public int value__;
    public static X86RegisterId Invalid;
    public static X86RegisterId X86_REG_AH;
    public static X86RegisterId X86_REG_AL;
    public static X86RegisterId X86_REG_AX;
    public static X86RegisterId X86_REG_BH;
    public static X86RegisterId X86_REG_BL;
    public static X86RegisterId X86_REG_BP;
    public static X86RegisterId X86_REG_BPL;
    public static X86RegisterId X86_REG_BX;
    public static X86RegisterId X86_REG_CH;
    public static X86RegisterId X86_REG_CL;
    public static X86RegisterId X86_REG_CS;
    public static X86RegisterId X86_REG_CX;
    public static X86RegisterId X86_REG_DH;
    public static X86RegisterId X86_REG_DI;
    public static X86RegisterId X86_REG_DIL;
    public static X86RegisterId X86_REG_DL;
    public static X86RegisterId X86_REG_DS;
    public static X86RegisterId X86_REG_DX;
    public static X86RegisterId X86_REG_EAX;
    public static X86RegisterId X86_REG_EBP;
    public static X86RegisterId X86_REG_EBX;
    public static X86RegisterId X86_REG_ECX;
    public static X86RegisterId X86_REG_EDI;
    public static X86RegisterId X86_REG_EDX;
    public static X86RegisterId X86_REG_EFLAGS;
    public static X86RegisterId X86_REG_EIP;
    public static X86RegisterId X86_REG_EIZ;
    public static X86RegisterId X86_REG_ES;
    public static X86RegisterId X86_REG_ESI;
    public static X86RegisterId X86_REG_ESP;
    public static X86RegisterId X86_REG_FPSW;
    public static X86RegisterId X86_REG_FS;
    public static X86RegisterId X86_REG_GS;
    public static X86RegisterId X86_REG_IP;
    public static X86RegisterId X86_REG_RAX;
    public static X86RegisterId X86_REG_RBP;
    public static X86RegisterId X86_REG_RBX;
    public static X86RegisterId X86_REG_RCX;
    public static X86RegisterId X86_REG_RDI;
    public static X86RegisterId X86_REG_RDX;
    public static X86RegisterId X86_REG_RIP;
    public static X86RegisterId X86_REG_RIZ;
    public static X86RegisterId X86_REG_RSI;
    public static X86RegisterId X86_REG_RSP;
    public static X86RegisterId X86_REG_SI;
    public static X86RegisterId X86_REG_SIL;
    public static X86RegisterId X86_REG_SP;
    public static X86RegisterId X86_REG_SPL;
    public static X86RegisterId X86_REG_SS;
    public static X86RegisterId X86_REG_CR0;
    public static X86RegisterId X86_REG_CR1;
    public static X86RegisterId X86_REG_CR2;
    public static X86RegisterId X86_REG_CR3;
    public static X86RegisterId X86_REG_CR4;
    public static X86RegisterId X86_REG_CR5;
    public static X86RegisterId X86_REG_CR6;
    public static X86RegisterId X86_REG_CR7;
    public static X86RegisterId X86_REG_CR8;
    public static X86RegisterId X86_REG_CR9;
    public static X86RegisterId X86_REG_CR10;
    public static X86RegisterId X86_REG_CR11;
    public static X86RegisterId X86_REG_CR12;
    public static X86RegisterId X86_REG_CR13;
    public static X86RegisterId X86_REG_CR14;
    public static X86RegisterId X86_REG_CR15;
    public static X86RegisterId X86_REG_DR0;
    public static X86RegisterId X86_REG_DR1;
    public static X86RegisterId X86_REG_DR2;
    public static X86RegisterId X86_REG_DR3;
    public static X86RegisterId X86_REG_DR4;
    public static X86RegisterId X86_REG_DR5;
    public static X86RegisterId X86_REG_DR6;
    public static X86RegisterId X86_REG_DR7;
    public static X86RegisterId X86_REG_DR8;
    public static X86RegisterId X86_REG_DR9;
    public static X86RegisterId X86_REG_DR10;
    public static X86RegisterId X86_REG_DR11;
    public static X86RegisterId X86_REG_DR12;
    public static X86RegisterId X86_REG_DR13;
    public static X86RegisterId X86_REG_DR14;
    public static X86RegisterId X86_REG_DR15;
    public static X86RegisterId X86_REG_FP0;
    public static X86RegisterId X86_REG_FP1;
    public static X86RegisterId X86_REG_FP2;
    public static X86RegisterId X86_REG_FP3;
    public static X86RegisterId X86_REG_FP4;
    public static X86RegisterId X86_REG_FP5;
    public static X86RegisterId X86_REG_FP6;
    public static X86RegisterId X86_REG_FP7;
    public static X86RegisterId X86_REG_K0;
    public static X86RegisterId X86_REG_K1;
    public static X86RegisterId X86_REG_K2;
    public static X86RegisterId X86_REG_K3;
    public static X86RegisterId X86_REG_K4;
    public static X86RegisterId X86_REG_K5;
    public static X86RegisterId X86_REG_K6;
    public static X86RegisterId X86_REG_K7;
    public static X86RegisterId X86_REG_MM0;
    public static X86RegisterId X86_REG_MM1;
    public static X86RegisterId X86_REG_MM2;
    public static X86RegisterId X86_REG_MM3;
    public static X86RegisterId X86_REG_MM4;
    public static X86RegisterId X86_REG_MM5;
    public static X86RegisterId X86_REG_MM6;
    public static X86RegisterId X86_REG_MM7;
    public static X86RegisterId X86_REG_R8;
    public static X86RegisterId X86_REG_R9;
    public static X86RegisterId X86_REG_R10;
    public static X86RegisterId X86_REG_R11;
    public static X86RegisterId X86_REG_R12;
    public static X86RegisterId X86_REG_R13;
    public static X86RegisterId X86_REG_R14;
    public static X86RegisterId X86_REG_R15;
    public static X86RegisterId X86_REG_ST0;
    public static X86RegisterId X86_REG_ST1;
    public static X86RegisterId X86_REG_ST2;
    public static X86RegisterId X86_REG_ST3;
    public static X86RegisterId X86_REG_ST4;
    public static X86RegisterId X86_REG_ST5;
    public static X86RegisterId X86_REG_ST6;
    public static X86RegisterId X86_REG_ST7;
    public static X86RegisterId X86_REG_XMM0;
    public static X86RegisterId X86_REG_XMM1;
    public static X86RegisterId X86_REG_XMM2;
    public static X86RegisterId X86_REG_XMM3;
    public static X86RegisterId X86_REG_XMM4;
    public static X86RegisterId X86_REG_XMM5;
    public static X86RegisterId X86_REG_XMM6;
    public static X86RegisterId X86_REG_XMM7;
    public static X86RegisterId X86_REG_XMM8;
    public static X86RegisterId X86_REG_XMM9;
    public static X86RegisterId X86_REG_XMM10;
    public static X86RegisterId X86_REG_XMM11;
    public static X86RegisterId X86_REG_XMM12;
    public static X86RegisterId X86_REG_XMM13;
    public static X86RegisterId X86_REG_XMM14;
    public static X86RegisterId X86_REG_XMM15;
    public static X86RegisterId X86_REG_XMM16;
    public static X86RegisterId X86_REG_XMM17;
    public static X86RegisterId X86_REG_XMM18;
    public static X86RegisterId X86_REG_XMM19;
    public static X86RegisterId X86_REG_XMM20;
    public static X86RegisterId X86_REG_XMM21;
    public static X86RegisterId X86_REG_XMM22;
    public static X86RegisterId X86_REG_XMM23;
    public static X86RegisterId X86_REG_XMM24;
    public static X86RegisterId X86_REG_XMM25;
    public static X86RegisterId X86_REG_XMM26;
    public static X86RegisterId X86_REG_XMM27;
    public static X86RegisterId X86_REG_XMM28;
    public static X86RegisterId X86_REG_XMM29;
    public static X86RegisterId X86_REG_XMM30;
    public static X86RegisterId X86_REG_XMM31;
    public static X86RegisterId X86_REG_YMM0;
    public static X86RegisterId X86_REG_YMM1;
    public static X86RegisterId X86_REG_YMM2;
    public static X86RegisterId X86_REG_YMM3;
    public static X86RegisterId X86_REG_YMM4;
    public static X86RegisterId X86_REG_YMM5;
    public static X86RegisterId X86_REG_YMM6;
    public static X86RegisterId X86_REG_YMM7;
    public static X86RegisterId X86_REG_YMM8;
    public static X86RegisterId X86_REG_YMM9;
    public static X86RegisterId X86_REG_YMM10;
    public static X86RegisterId X86_REG_YMM11;
    public static X86RegisterId X86_REG_YMM12;
    public static X86RegisterId X86_REG_YMM13;
    public static X86RegisterId X86_REG_YMM14;
    public static X86RegisterId X86_REG_YMM15;
    public static X86RegisterId X86_REG_YMM16;
    public static X86RegisterId X86_REG_YMM17;
    public static X86RegisterId X86_REG_YMM18;
    public static X86RegisterId X86_REG_YMM19;
    public static X86RegisterId X86_REG_YMM20;
    public static X86RegisterId X86_REG_YMM21;
    public static X86RegisterId X86_REG_YMM22;
    public static X86RegisterId X86_REG_YMM23;
    public static X86RegisterId X86_REG_YMM24;
    public static X86RegisterId X86_REG_YMM25;
    public static X86RegisterId X86_REG_YMM26;
    public static X86RegisterId X86_REG_YMM27;
    public static X86RegisterId X86_REG_YMM28;
    public static X86RegisterId X86_REG_YMM29;
    public static X86RegisterId X86_REG_YMM30;
    public static X86RegisterId X86_REG_YMM31;
    public static X86RegisterId X86_REG_ZMM0;
    public static X86RegisterId X86_REG_ZMM1;
    public static X86RegisterId X86_REG_ZMM2;
    public static X86RegisterId X86_REG_ZMM3;
    public static X86RegisterId X86_REG_ZMM4;
    public static X86RegisterId X86_REG_ZMM5;
    public static X86RegisterId X86_REG_ZMM6;
    public static X86RegisterId X86_REG_ZMM7;
    public static X86RegisterId X86_REG_ZMM8;
    public static X86RegisterId X86_REG_ZMM9;
    public static X86RegisterId X86_REG_ZMM10;
    public static X86RegisterId X86_REG_ZMM11;
    public static X86RegisterId X86_REG_ZMM12;
    public static X86RegisterId X86_REG_ZMM13;
    public static X86RegisterId X86_REG_ZMM14;
    public static X86RegisterId X86_REG_ZMM15;
    public static X86RegisterId X86_REG_ZMM16;
    public static X86RegisterId X86_REG_ZMM17;
    public static X86RegisterId X86_REG_ZMM18;
    public static X86RegisterId X86_REG_ZMM19;
    public static X86RegisterId X86_REG_ZMM20;
    public static X86RegisterId X86_REG_ZMM21;
    public static X86RegisterId X86_REG_ZMM22;
    public static X86RegisterId X86_REG_ZMM23;
    public static X86RegisterId X86_REG_ZMM24;
    public static X86RegisterId X86_REG_ZMM25;
    public static X86RegisterId X86_REG_ZMM26;
    public static X86RegisterId X86_REG_ZMM27;
    public static X86RegisterId X86_REG_ZMM28;
    public static X86RegisterId X86_REG_ZMM29;
    public static X86RegisterId X86_REG_ZMM30;
    public static X86RegisterId X86_REG_ZMM31;
    public static X86RegisterId X86_REG_R8B;
    public static X86RegisterId X86_REG_R9B;
    public static X86RegisterId X86_REG_R10B;
    public static X86RegisterId X86_REG_R11B;
    public static X86RegisterId X86_REG_R12B;
    public static X86RegisterId X86_REG_R13B;
    public static X86RegisterId X86_REG_R14B;
    public static X86RegisterId X86_REG_R15B;
    public static X86RegisterId X86_REG_R8D;
    public static X86RegisterId X86_REG_R9D;
    public static X86RegisterId X86_REG_R10D;
    public static X86RegisterId X86_REG_R11D;
    public static X86RegisterId X86_REG_R12D;
    public static X86RegisterId X86_REG_R13D;
    public static X86RegisterId X86_REG_R14D;
    public static X86RegisterId X86_REG_R15D;
    public static X86RegisterId X86_REG_R8W;
    public static X86RegisterId X86_REG_R9W;
    public static X86RegisterId X86_REG_R10W;
    public static X86RegisterId X86_REG_R11W;
    public static X86RegisterId X86_REG_R12W;
    public static X86RegisterId X86_REG_R13W;
    public static X86RegisterId X86_REG_R14W;
    public static X86RegisterId X86_REG_R15W;
}
public enum Gee.External.Capstone.X86.X86SseConditionCode : Enum {
    public int value__;
    public static X86SseConditionCode Invalid;
    public static X86SseConditionCode X86_SSE_CC_EQ;
    public static X86SseConditionCode X86_SSE_CC_LT;
    public static X86SseConditionCode X86_SSE_CC_LE;
    public static X86SseConditionCode X86_SSE_CC_UNORD;
    public static X86SseConditionCode X86_SSE_CC_NEQ;
    public static X86SseConditionCode X86_SSE_CC_NLT;
    public static X86SseConditionCode X86_SSE_CC_NLE;
    public static X86SseConditionCode X86_SSE_CC_ORD;
}
public enum Gee.External.Capstone.X86.X86XopConditionCode : Enum {
    public int value__;
    public static X86XopConditionCode Invalid;
    public static X86XopConditionCode X86_XOP_CC_LT;
    public static X86XopConditionCode X86_XOP_CC_LE;
    public static X86XopConditionCode X86_XOP_CC_GT;
    public static X86XopConditionCode X86_XOP_CC_GE;
    public static X86XopConditionCode X86_XOP_CC_EQ;
    public static X86XopConditionCode X86_XOP_CC_NEQ;
    public static X86XopConditionCode X86_XOP_CC_FALSE;
    public static X86XopConditionCode X86_XOP_CC_TRUE;
}
public class Gee.External.Capstone.XCore.CapstoneXCoreDisassembler : CapstoneDisassembler`8<XCoreDisassembleMode, XCoreInstruction, XCoreInstructionDetail, XCoreInstructionGroup, XCoreInstructionGroupId, XCoreInstructionId, XCoreRegister, XCoreRegisterId> {
    public CapstoneXCoreDisassembler(XCoreDisassembleMode disassembleMode);
    private protected virtual XCoreInstruction CreateInstruction(NativeInstructionHandle hInstruction);
}
internal class Gee.External.Capstone.XCore.NativeXCoreInstructionDetail : ValueType {
    public byte OperandCount;
    public NativeXCoreOperand[] Operands;
}
internal class Gee.External.Capstone.XCore.NativeXCoreMemoryOperandValue : ValueType {
    public byte Base;
    public byte Index;
    public int Displacement;
    public int Direct;
}
internal class Gee.External.Capstone.XCore.NativeXCoreOperand : ValueType {
    public XCoreOperandType Type;
    public NativeXCoreOperandValue Value;
}
internal class Gee.External.Capstone.XCore.NativeXCoreOperandValue : ValueType {
    public XCoreRegisterId Register;
    public int Immediate;
    public NativeXCoreMemoryOperandValue Memory;
}
public enum Gee.External.Capstone.XCore.XCoreDisassembleMode : Enum {
    public int value__;
    public static XCoreDisassembleMode BigEndian;
}
public class Gee.External.Capstone.XCore.XCoreInstruction : Instruction`8<XCoreInstruction, XCoreInstructionDetail, XCoreDisassembleMode, XCoreInstructionGroup, XCoreInstructionGroupId, XCoreInstructionId, XCoreRegister, XCoreRegisterId> {
    internal XCoreInstruction(XCoreInstructionBuilder builder);
    internal static XCoreInstruction Create(CapstoneDisassembler disassembler, NativeInstructionHandle hInstruction);
}
internal class Gee.External.Capstone.XCore.XCoreInstructionBuilder : InstructionBuilder`8<XCoreInstructionDetail, XCoreDisassembleMode, XCoreInstructionGroup, XCoreInstructionGroupId, XCoreInstruction, XCoreInstructionId, XCoreRegister, XCoreRegisterId> {
    internal XCoreInstruction Create();
    private protected virtual XCoreInstructionDetail CreateDetails(CapstoneDisassembler disassembler, NativeInstructionHandle hInstruction);
    private protected virtual XCoreDisassembleMode CreateDisassembleMode(NativeDisassembleMode nativeDisassembleMode);
    private protected virtual XCoreInstructionId CreateId(int id);
}
public class Gee.External.Capstone.XCore.XCoreInstructionDetail : InstructionDetail`8<XCoreInstructionDetail, XCoreDisassembleMode, XCoreInstructionGroup, XCoreInstructionGroupId, XCoreInstruction, XCoreInstructionId, XCoreRegister, XCoreRegisterId> {
    [CompilerGeneratedAttribute]
private XCoreOperand[] <Operands>k__BackingField;
    public XCoreOperand[] Operands { get; }
    internal XCoreInstructionDetail(XCoreInstructionDetailBuilder builder);
    [CompilerGeneratedAttribute]
public XCoreOperand[] get_Operands();
    internal static XCoreInstructionDetail Create(CapstoneDisassembler disassembler, NativeInstructionHandle hInstruction);
}
internal class Gee.External.Capstone.XCore.XCoreInstructionDetailBuilder : InstructionDetailBuilder`8<XCoreInstructionDetail, XCoreDisassembleMode, XCoreInstructionGroup, XCoreInstructionGroupId, XCoreInstruction, XCoreInstructionId, XCoreRegister, XCoreRegisterId> {
    [CompilerGeneratedAttribute]
private XCoreOperand[] <Operands>k__BackingField;
    internal XCoreOperand[] Operands { get; private set; }
    [CompilerGeneratedAttribute]
internal XCoreOperand[] get_Operands();
    [CompilerGeneratedAttribute]
private void set_Operands(XCoreOperand[] value);
    internal virtual void Build(CapstoneDisassembler disassembler, NativeInstructionHandle hInstruction);
    internal XCoreInstructionDetail Create();
    private protected virtual XCoreDisassembleMode CreateDisassembleMode(NativeDisassembleMode nativeDisassembleMode);
    private protected virtual XCoreInstructionGroup CreateInstructionGroup(CapstoneDisassembler disassembler, byte instructionGroupId);
    private protected virtual XCoreRegister CreateRegister(CapstoneDisassembler disassembler, short registerId);
}
public class Gee.External.Capstone.XCore.XCoreInstructionGroup : InstructionGroup`1<XCoreInstructionGroupId> {
    internal XCoreInstructionGroup(XCoreInstructionGroupId id, string name);
    internal static XCoreInstructionGroup Create(CapstoneDisassembler disassembler, XCoreInstructionGroupId id);
}
public enum Gee.External.Capstone.XCore.XCoreInstructionGroupId : Enum {
    public int value__;
    public static XCoreInstructionGroupId Invalid;
    public static XCoreInstructionGroupId XCORE_GRP_JUMP;
}
public enum Gee.External.Capstone.XCore.XCoreInstructionId : Enum {
    public int value__;
    public static XCoreInstructionId Invalid;
    public static XCoreInstructionId XCORE_INS_ADD;
    public static XCoreInstructionId XCORE_INS_ANDNOT;
    public static XCoreInstructionId XCORE_INS_AND;
    public static XCoreInstructionId XCORE_INS_ASHR;
    public static XCoreInstructionId XCORE_INS_BAU;
    public static XCoreInstructionId XCORE_INS_BITREV;
    public static XCoreInstructionId XCORE_INS_BLA;
    public static XCoreInstructionId XCORE_INS_BLAT;
    public static XCoreInstructionId XCORE_INS_BL;
    public static XCoreInstructionId XCORE_INS_BF;
    public static XCoreInstructionId XCORE_INS_BT;
    public static XCoreInstructionId XCORE_INS_BU;
    public static XCoreInstructionId XCORE_INS_BRU;
    public static XCoreInstructionId XCORE_INS_BYTEREV;
    public static XCoreInstructionId XCORE_INS_CHKCT;
    public static XCoreInstructionId XCORE_INS_CLRE;
    public static XCoreInstructionId XCORE_INS_CLRPT;
    public static XCoreInstructionId XCORE_INS_CLRSR;
    public static XCoreInstructionId XCORE_INS_CLZ;
    public static XCoreInstructionId XCORE_INS_CRC8;
    public static XCoreInstructionId XCORE_INS_CRC32;
    public static XCoreInstructionId XCORE_INS_DCALL;
    public static XCoreInstructionId XCORE_INS_DENTSP;
    public static XCoreInstructionId XCORE_INS_DGETREG;
    public static XCoreInstructionId XCORE_INS_DIVS;
    public static XCoreInstructionId XCORE_INS_DIVU;
    public static XCoreInstructionId XCORE_INS_DRESTSP;
    public static XCoreInstructionId XCORE_INS_DRET;
    public static XCoreInstructionId XCORE_INS_ECALLF;
    public static XCoreInstructionId XCORE_INS_ECALLT;
    public static XCoreInstructionId XCORE_INS_EDU;
    public static XCoreInstructionId XCORE_INS_EEF;
    public static XCoreInstructionId XCORE_INS_EET;
    public static XCoreInstructionId XCORE_INS_EEU;
    public static XCoreInstructionId XCORE_INS_ENDIN;
    public static XCoreInstructionId XCORE_INS_ENTSP;
    public static XCoreInstructionId XCORE_INS_EQ;
    public static XCoreInstructionId XCORE_INS_EXTDP;
    public static XCoreInstructionId XCORE_INS_EXTSP;
    public static XCoreInstructionId XCORE_INS_FREER;
    public static XCoreInstructionId XCORE_INS_FREET;
    public static XCoreInstructionId XCORE_INS_GETD;
    public static XCoreInstructionId XCORE_INS_GET;
    public static XCoreInstructionId XCORE_INS_GETN;
    public static XCoreInstructionId XCORE_INS_GETR;
    public static XCoreInstructionId XCORE_INS_GETSR;
    public static XCoreInstructionId XCORE_INS_GETST;
    public static XCoreInstructionId XCORE_INS_GETTS;
    public static XCoreInstructionId XCORE_INS_INCT;
    public static XCoreInstructionId XCORE_INS_INIT;
    public static XCoreInstructionId XCORE_INS_INPW;
    public static XCoreInstructionId XCORE_INS_INSHR;
    public static XCoreInstructionId XCORE_INS_INT;
    public static XCoreInstructionId XCORE_INS_IN;
    public static XCoreInstructionId XCORE_INS_KCALL;
    public static XCoreInstructionId XCORE_INS_KENTSP;
    public static XCoreInstructionId XCORE_INS_KRESTSP;
    public static XCoreInstructionId XCORE_INS_KRET;
    public static XCoreInstructionId XCORE_INS_LADD;
    public static XCoreInstructionId XCORE_INS_LD16S;
    public static XCoreInstructionId XCORE_INS_LD8U;
    public static XCoreInstructionId XCORE_INS_LDA16;
    public static XCoreInstructionId XCORE_INS_LDAP;
    public static XCoreInstructionId XCORE_INS_LDAW;
    public static XCoreInstructionId XCORE_INS_LDC;
    public static XCoreInstructionId XCORE_INS_LDW;
    public static XCoreInstructionId XCORE_INS_LDIVU;
    public static XCoreInstructionId XCORE_INS_LMUL;
    public static XCoreInstructionId XCORE_INS_LSS;
    public static XCoreInstructionId XCORE_INS_LSUB;
    public static XCoreInstructionId XCORE_INS_LSU;
    public static XCoreInstructionId XCORE_INS_MACCS;
    public static XCoreInstructionId XCORE_INS_MACCU;
    public static XCoreInstructionId XCORE_INS_MJOIN;
    public static XCoreInstructionId XCORE_INS_MKMSK;
    public static XCoreInstructionId XCORE_INS_MSYNC;
    public static XCoreInstructionId XCORE_INS_MUL;
    public static XCoreInstructionId XCORE_INS_NEG;
    public static XCoreInstructionId XCORE_INS_NOT;
    public static XCoreInstructionId XCORE_INS_OR;
    public static XCoreInstructionId XCORE_INS_OUTCT;
    public static XCoreInstructionId XCORE_INS_OUTPW;
    public static XCoreInstructionId XCORE_INS_OUTSHR;
    public static XCoreInstructionId XCORE_INS_OUTT;
    public static XCoreInstructionId XCORE_INS_OUT;
    public static XCoreInstructionId XCORE_INS_PEEK;
    public static XCoreInstructionId XCORE_INS_REMS;
    public static XCoreInstructionId XCORE_INS_REMU;
    public static XCoreInstructionId XCORE_INS_RETSP;
    public static XCoreInstructionId XCORE_INS_SETCLK;
    public static XCoreInstructionId XCORE_INS_SET;
    public static XCoreInstructionId XCORE_INS_SETC;
    public static XCoreInstructionId XCORE_INS_SETD;
    public static XCoreInstructionId XCORE_INS_SETEV;
    public static XCoreInstructionId XCORE_INS_SETN;
    public static XCoreInstructionId XCORE_INS_SETPSC;
    public static XCoreInstructionId XCORE_INS_SETPT;
    public static XCoreInstructionId XCORE_INS_SETRDY;
    public static XCoreInstructionId XCORE_INS_SETSR;
    public static XCoreInstructionId XCORE_INS_SETTW;
    public static XCoreInstructionId XCORE_INS_SETV;
    public static XCoreInstructionId XCORE_INS_SEXT;
    public static XCoreInstructionId XCORE_INS_SHL;
    public static XCoreInstructionId XCORE_INS_SHR;
    public static XCoreInstructionId XCORE_INS_SSYNC;
    public static XCoreInstructionId XCORE_INS_ST16;
    public static XCoreInstructionId XCORE_INS_ST8;
    public static XCoreInstructionId XCORE_INS_STW;
    public static XCoreInstructionId XCORE_INS_SUB;
    public static XCoreInstructionId XCORE_INS_SYNCR;
    public static XCoreInstructionId XCORE_INS_TESTCT;
    public static XCoreInstructionId XCORE_INS_TESTLCL;
    public static XCoreInstructionId XCORE_INS_TESTWCT;
    public static XCoreInstructionId XCORE_INS_TSETMR;
    public static XCoreInstructionId XCORE_INS_START;
    public static XCoreInstructionId XCORE_INS_WAITEF;
    public static XCoreInstructionId XCORE_INS_WAITET;
    public static XCoreInstructionId XCORE_INS_WAITEU;
    public static XCoreInstructionId XCORE_INS_XOR;
    public static XCoreInstructionId XCORE_INS_ZEXT;
}
public class Gee.External.Capstone.XCore.XCoreMemoryOperandValue : object {
    [CompilerGeneratedAttribute]
private XCoreRegister <Base>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Direct>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Displacement>k__BackingField;
    [CompilerGeneratedAttribute]
private XCoreRegister <Index>k__BackingField;
    internal XCoreRegister Base { get; }
    internal int Direct { get; }
    internal int Displacement { get; }
    internal XCoreRegister Index { get; }
    internal XCoreMemoryOperandValue(CapstoneDisassembler disassembler, NativeXCoreMemoryOperandValue& nativeMemoryOperandValue);
    [CompilerGeneratedAttribute]
internal XCoreRegister get_Base();
    [CompilerGeneratedAttribute]
internal int get_Direct();
    [CompilerGeneratedAttribute]
internal int get_Displacement();
    [CompilerGeneratedAttribute]
internal XCoreRegister get_Index();
}
public class Gee.External.Capstone.XCore.XCoreOperand : object {
    private int _immediate;
    private XCoreMemoryOperandValue _memory;
    private XCoreRegister _register;
    [CompilerGeneratedAttribute]
private XCoreOperandType <Type>k__BackingField;
    public long Immediate { get; }
    public XCoreMemoryOperandValue Memory { get; }
    public XCoreRegister Register { get; }
    public XCoreOperandType Type { get; }
    internal XCoreOperand(CapstoneDisassembler disassembler, NativeXCoreOperand& nativeOperand);
    public long get_Immediate();
    public XCoreMemoryOperandValue get_Memory();
    public XCoreRegister get_Register();
    [CompilerGeneratedAttribute]
public XCoreOperandType get_Type();
    internal static XCoreOperand[] Create(CapstoneDisassembler disassembler, NativeXCoreInstructionDetail& nativeInstructionDetail);
}
public enum Gee.External.Capstone.XCore.XCoreOperandType : Enum {
    public int value__;
    public static XCoreOperandType Invalid;
    public static XCoreOperandType Register;
    public static XCoreOperandType Immediate;
    public static XCoreOperandType Memory;
}
public class Gee.External.Capstone.XCore.XCoreRegister : Register`1<XCoreRegisterId> {
    internal XCoreRegister(XCoreRegisterId id, string name);
    internal static XCoreRegister TryCreate(CapstoneDisassembler disassembler, XCoreRegisterId id);
}
public enum Gee.External.Capstone.XCore.XCoreRegisterId : Enum {
    public int value__;
    public static XCoreRegisterId Invalid;
    public static XCoreRegisterId XCORE_REG_CP;
    public static XCoreRegisterId XCORE_REG_DP;
    public static XCoreRegisterId XCORE_REG_LR;
    public static XCoreRegisterId XCORE_REG_SP;
    public static XCoreRegisterId XCORE_REG_R0;
    public static XCoreRegisterId XCORE_REG_R1;
    public static XCoreRegisterId XCORE_REG_R2;
    public static XCoreRegisterId XCORE_REG_R3;
    public static XCoreRegisterId XCORE_REG_R4;
    public static XCoreRegisterId XCORE_REG_R5;
    public static XCoreRegisterId XCORE_REG_R6;
    public static XCoreRegisterId XCORE_REG_R7;
    public static XCoreRegisterId XCORE_REG_R8;
    public static XCoreRegisterId XCORE_REG_R9;
    public static XCoreRegisterId XCORE_REG_R10;
    public static XCoreRegisterId XCORE_REG_R11;
    public static XCoreRegisterId XCORE_REG_PC;
    public static XCoreRegisterId XCORE_REG_SCP;
    public static XCoreRegisterId XCORE_REG_SSR;
    public static XCoreRegisterId XCORE_REG_ET;
    public static XCoreRegisterId XCORE_REG_ED;
    public static XCoreRegisterId XCORE_REG_SED;
    public static XCoreRegisterId XCORE_REG_KEP;
    public static XCoreRegisterId XCORE_REG_KSP;
    public static XCoreRegisterId XCORE_REG_ID;
}
