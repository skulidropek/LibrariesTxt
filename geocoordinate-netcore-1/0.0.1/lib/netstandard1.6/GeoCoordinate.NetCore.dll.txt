public class GeoCoordinatePortable.GeoCoordinate : object {
    public static GeoCoordinate Unknown;
    private double _course;
    private double _horizontalAccuracy;
    private double _latitude;
    private double _longitude;
    private double _speed;
    private double _verticalAccuracy;
    [CompilerGeneratedAttribute]
private double <Altitude>k__BackingField;
    public double Latitude { get; public set; }
    public double Longitude { get; public set; }
    public double HorizontalAccuracy { get; public set; }
    public double VerticalAccuracy { get; public set; }
    public double Speed { get; public set; }
    public double Course { get; public set; }
    public bool IsUnknown { get; }
    public double Altitude { get; public set; }
    public GeoCoordinate(double latitude, double longitude);
    public GeoCoordinate(double latitude, double longitude, double altitude);
    public GeoCoordinate(double latitude, double longitude, double altitude, double horizontalAccuracy, double verticalAccuracy, double speed, double course);
    private static GeoCoordinate();
    public double get_Latitude();
    public void set_Latitude(double value);
    public double get_Longitude();
    public void set_Longitude(double value);
    public double get_HorizontalAccuracy();
    public void set_HorizontalAccuracy(double value);
    public double get_VerticalAccuracy();
    public void set_VerticalAccuracy(double value);
    public double get_Speed();
    public void set_Speed(double value);
    public double get_Course();
    public void set_Course(double value);
    public bool get_IsUnknown();
    [CompilerGeneratedAttribute]
public double get_Altitude();
    [CompilerGeneratedAttribute]
public void set_Altitude(double value);
    public sealed virtual bool Equals(GeoCoordinate other);
    public static bool op_Equality(GeoCoordinate left, GeoCoordinate right);
    public static bool op_Inequality(GeoCoordinate left, GeoCoordinate right);
    public double GetDistanceTo(GeoCoordinate other);
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public virtual string ToString();
}
public class GeoCoordinatePortable.GeoPosition`1 : object {
    [CompilerGeneratedAttribute]
private T <Location>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <Timestamp>k__BackingField;
    public T Location { get; public set; }
    public DateTimeOffset Timestamp { get; public set; }
    public GeoPosition`1(DateTimeOffset timestamp, T location);
    [CompilerGeneratedAttribute]
public T get_Location();
    [CompilerGeneratedAttribute]
public void set_Location(T value);
    [CompilerGeneratedAttribute]
public DateTimeOffset get_Timestamp();
    [CompilerGeneratedAttribute]
public void set_Timestamp(DateTimeOffset value);
}
