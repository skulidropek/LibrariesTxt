public class GeoJSON.Net.Converters.CrsConverter : JsonConverter {
    public virtual bool CanConvert(Type objectType);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
}
public class GeoJSON.Net.Converters.GeoJsonConverter : JsonConverter {
    public bool CanWrite { get; }
    public virtual bool get_CanWrite();
    public virtual bool CanConvert(Type objectType);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
    private static IGeoJSONObject ReadGeoJson(JObject value);
}
public class GeoJSON.Net.Converters.GeometryConverter : JsonConverter {
    public bool CanWrite { get; }
    public virtual bool get_CanWrite();
    public virtual bool CanConvert(Type objectType);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
    private static IGeometryObject ReadGeoJson(JObject value);
}
public class GeoJSON.Net.Converters.LineStringEnumerableConverter : JsonConverter {
    private static PositionEnumerableConverter LineStringConverter;
    private static LineStringEnumerableConverter();
    public virtual bool CanConvert(Type objectType);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
}
public class GeoJSON.Net.Converters.PointEnumerableConverter : JsonConverter {
    private static PositionConverter PositionConverter;
    private static PointEnumerableConverter();
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    public virtual bool CanConvert(Type objectType);
}
public class GeoJSON.Net.Converters.PolygonEnumerableConverter : JsonConverter {
    private static LineStringEnumerableConverter PolygonConverter;
    private static PolygonEnumerableConverter();
    public virtual bool CanConvert(Type objectType);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
}
public class GeoJSON.Net.Converters.PositionConverter : JsonConverter {
    public virtual bool CanConvert(Type objectType);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
}
public class GeoJSON.Net.Converters.PositionEnumerableConverter : JsonConverter {
    private static PositionConverter PositionConverter;
    private static PositionEnumerableConverter();
    public virtual bool CanConvert(Type objectType);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
}
[ExtensionAttribute]
public static class GeoJSON.Net.Converters.TypeExtensions : object {
    [ExtensionAttribute]
public static bool IsAssignableFromType(Type self, Type other);
}
[JsonObjectAttribute]
public abstract class GeoJSON.Net.CoordinateReferenceSystem.CRSBase : object {
    [CompilerGeneratedAttribute]
private Dictionary`2<string, object> <Properties>k__BackingField;
    [CompilerGeneratedAttribute]
private CRSType <Type>k__BackingField;
    [JsonPropertyAttribute]
public Dictionary`2<string, object> Properties { get; internal set; }
    [JsonPropertyAttribute]
[JsonConverterAttribute("Newtonsoft.Json.Converters.StringEnumConverter")]
public CRSType Type { get; internal set; }
    [CompilerGeneratedAttribute]
public Dictionary`2<string, object> get_Properties();
    [CompilerGeneratedAttribute]
internal void set_Properties(Dictionary`2<string, object> value);
    [CompilerGeneratedAttribute]
public sealed virtual CRSType get_Type();
    [CompilerGeneratedAttribute]
internal void set_Type(CRSType value);
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(CRSBase other);
    public sealed virtual bool Equals(CRSBase left, CRSBase right);
    public static bool op_Equality(CRSBase left, CRSBase right);
    public static bool op_Inequality(CRSBase left, CRSBase right);
    public virtual int GetHashCode();
    public sealed virtual int GetHashCode(CRSBase obj);
}
public enum GeoJSON.Net.CoordinateReferenceSystem.CRSType : Enum {
    public int value__;
    [EnumMemberAttribute]
public static CRSType Unspecified;
    [EnumMemberAttribute]
public static CRSType Name;
    [EnumMemberAttribute]
public static CRSType Link;
}
public class GeoJSON.Net.CoordinateReferenceSystem.DefaultCRS : NamedCRS {
    [CompilerGeneratedAttribute]
private static DefaultCRS <Instance>k__BackingField;
    public static DefaultCRS Instance { get; }
    private static DefaultCRS();
    [CompilerGeneratedAttribute]
public static DefaultCRS get_Instance();
}
public interface GeoJSON.Net.CoordinateReferenceSystem.ICRSObject {
    public CRSType Type { get; }
    public abstract virtual CRSType get_Type();
}
public class GeoJSON.Net.CoordinateReferenceSystem.LinkedCRS : CRSBase {
    public LinkedCRS(string href, string type);
    public LinkedCRS(Uri href, string type);
}
public class GeoJSON.Net.CoordinateReferenceSystem.NamedCRS : CRSBase {
    public NamedCRS(string name);
}
public class GeoJSON.Net.CoordinateReferenceSystem.UnspecifiedCRS : object {
    public CRSType Type { get; }
    public sealed virtual CRSType get_Type();
    public virtual bool Equals(object obj);
    public bool Equals(ICRSObject obj);
    public static bool op_Equality(UnspecifiedCRS left, UnspecifiedCRS right);
    public static bool op_Inequality(UnspecifiedCRS left, UnspecifiedCRS right);
    public virtual int GetHashCode();
}
public class GeoJSON.Net.DoubleTenDecimalPlaceComparer : object {
    public sealed virtual bool Equals(double x, double y);
    public sealed virtual int GetHashCode(double obj);
}
public class GeoJSON.Net.Feature.Feature : Feature`1<IGeometryObject> {
    [JsonConstructorAttribute]
public Feature(IGeometryObject geometry, IDictionary`2<string, object> properties, string id);
    public Feature(IGeometryObject geometry, object properties, string id);
}
public class GeoJSON.Net.Feature.Feature`1 : Feature`2<TGeometry, IDictionary`2<string, object>> {
    [JsonConstructorAttribute]
public Feature`1(TGeometry geometry, IDictionary`2<string, object> properties, string id);
    public Feature`1(TGeometry geometry, object properties, string id);
    private static Dictionary`2<string, object> GetDictionaryOfPublicProperties(object properties);
    public sealed virtual bool Equals(Feature`1<TGeometry> other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(Feature`1<TGeometry> left, Feature`1<TGeometry> right);
    public static bool op_Inequality(Feature`1<TGeometry> left, Feature`1<TGeometry> right);
}
public class GeoJSON.Net.Feature.Feature`2 : GeoJSONObject {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private TGeometry <Geometry>k__BackingField;
    [CompilerGeneratedAttribute]
private TProps <Properties>k__BackingField;
    public GeoJSONObjectType Type { get; }
    [JsonPropertyAttribute]
public string Id { get; }
    [JsonPropertyAttribute]
[JsonConverterAttribute("GeoJSON.Net.Converters.GeometryConverter")]
public TGeometry Geometry { get; }
    [JsonPropertyAttribute]
public TProps Properties { get; }
    [JsonConstructorAttribute]
public Feature`2(TGeometry geometry, TProps properties, string id);
    public virtual GeoJSONObjectType get_Type();
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public TGeometry get_Geometry();
    [CompilerGeneratedAttribute]
public TProps get_Properties();
    public sealed virtual bool Equals(Feature`2<TGeometry, TProps> other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(Feature`2<TGeometry, TProps> left, Feature`2<TGeometry, TProps> right);
    public static bool op_Inequality(Feature`2<TGeometry, TProps> left, Feature`2<TGeometry, TProps> right);
}
public class GeoJSON.Net.Feature.FeatureCollection : GeoJSONObject {
    [CompilerGeneratedAttribute]
private List`1<Feature> <Features>k__BackingField;
    public GeoJSONObjectType Type { get; }
    [JsonPropertyAttribute]
public List`1<Feature> Features { get; private set; }
    public FeatureCollection(List`1<Feature> features);
    public virtual GeoJSONObjectType get_Type();
    [CompilerGeneratedAttribute]
public List`1<Feature> get_Features();
    [CompilerGeneratedAttribute]
private void set_Features(List`1<Feature> value);
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(FeatureCollection other);
    public sealed virtual bool Equals(FeatureCollection left, FeatureCollection right);
    public static bool op_Equality(FeatureCollection left, FeatureCollection right);
    public static bool op_Inequality(FeatureCollection left, FeatureCollection right);
    public virtual int GetHashCode();
    public sealed virtual int GetHashCode(FeatureCollection other);
}
public class GeoJSON.Net.Feature.FeatureCollection`1 : FeatureCollection {
    [CompilerGeneratedAttribute]
private List`1<Feature`2<IGeometryObject, TProps>> <Features>k__BackingField;
    public GeoJSONObjectType Type { get; }
    [JsonPropertyAttribute]
public List`1<Feature`2<IGeometryObject, TProps>> Features { get; private set; }
    public FeatureCollection`1(List`1<Feature`2<IGeometryObject, TProps>> features);
    public virtual GeoJSONObjectType get_Type();
    [CompilerGeneratedAttribute]
public List`1<Feature`2<IGeometryObject, TProps>> get_Features();
    [CompilerGeneratedAttribute]
private void set_Features(List`1<Feature`2<IGeometryObject, TProps>> value);
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(FeatureCollection`1<TProps> other);
    public sealed virtual bool Equals(FeatureCollection`1<TProps> left, FeatureCollection`1<TProps> right);
    public static bool op_Equality(FeatureCollection`1<TProps> left, FeatureCollection`1<TProps> right);
    public static bool op_Inequality(FeatureCollection`1<TProps> left, FeatureCollection`1<TProps> right);
    public virtual int GetHashCode();
    public sealed virtual int GetHashCode(FeatureCollection`1<TProps> other);
}
[JsonObjectAttribute]
public abstract class GeoJSON.Net.GeoJSONObject : object {
    internal static DoubleTenDecimalPlaceComparer DoubleComparer;
    [CompilerGeneratedAttribute]
private Double[] <BoundingBoxes>k__BackingField;
    [CompilerGeneratedAttribute]
private ICRSObject <CRS>k__BackingField;
    [JsonPropertyAttribute]
public Double[] BoundingBoxes { get; public set; }
    [JsonPropertyAttribute]
[JsonConverterAttribute("GeoJSON.Net.Converters.CrsConverter")]
public ICRSObject CRS { get; public set; }
    [JsonPropertyAttribute]
[JsonConverterAttribute("Newtonsoft.Json.Converters.StringEnumConverter")]
public GeoJSONObjectType Type { get; }
    private static GeoJSONObject();
    [CompilerGeneratedAttribute]
public sealed virtual Double[] get_BoundingBoxes();
    [CompilerGeneratedAttribute]
public sealed virtual void set_BoundingBoxes(Double[] value);
    [CompilerGeneratedAttribute]
public sealed virtual ICRSObject get_CRS();
    [CompilerGeneratedAttribute]
public void set_CRS(ICRSObject value);
    public abstract virtual GeoJSONObjectType get_Type();
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(GeoJSONObject other);
    public sealed virtual bool Equals(GeoJSONObject left, GeoJSONObject right);
    public static bool op_Equality(GeoJSONObject left, GeoJSONObject right);
    public static bool op_Inequality(GeoJSONObject left, GeoJSONObject right);
    public virtual int GetHashCode();
    public sealed virtual int GetHashCode(GeoJSONObject obj);
}
public enum GeoJSON.Net.GeoJSONObjectType : Enum {
    public int value__;
    public static GeoJSONObjectType Point;
    public static GeoJSONObjectType MultiPoint;
    public static GeoJSONObjectType LineString;
    public static GeoJSONObjectType MultiLineString;
    public static GeoJSONObjectType Polygon;
    public static GeoJSONObjectType MultiPolygon;
    public static GeoJSONObjectType GeometryCollection;
    public static GeoJSONObjectType Feature;
    public static GeoJSONObjectType FeatureCollection;
}
public class GeoJSON.Net.Geometry.GeometryCollection : GeoJSONObject {
    [CompilerGeneratedAttribute]
private ReadOnlyCollection`1<IGeometryObject> <Geometries>k__BackingField;
    public GeoJSONObjectType Type { get; }
    [JsonPropertyAttribute]
[JsonConverterAttribute("GeoJSON.Net.Converters.GeometryConverter")]
public ReadOnlyCollection`1<IGeometryObject> Geometries { get; private set; }
    public GeometryCollection(IEnumerable`1<IGeometryObject> geometries);
    public virtual GeoJSONObjectType get_Type();
    [CompilerGeneratedAttribute]
public ReadOnlyCollection`1<IGeometryObject> get_Geometries();
    [CompilerGeneratedAttribute]
private void set_Geometries(ReadOnlyCollection`1<IGeometryObject> value);
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(GeometryCollection other);
    public sealed virtual bool Equals(GeometryCollection left, GeometryCollection right);
    public static bool op_Equality(GeometryCollection left, GeometryCollection right);
    public static bool op_Inequality(GeometryCollection left, GeometryCollection right);
    public virtual int GetHashCode();
    public sealed virtual int GetHashCode(GeometryCollection other);
}
public interface GeoJSON.Net.Geometry.IGeometryObject {
    public GeoJSONObjectType Type { get; }
    public abstract virtual GeoJSONObjectType get_Type();
}
public interface GeoJSON.Net.Geometry.IPosition {
    public Nullable`1<double> Altitude { get; }
    public double Latitude { get; }
    public double Longitude { get; }
    public abstract virtual Nullable`1<double> get_Altitude();
    public abstract virtual double get_Latitude();
    public abstract virtual double get_Longitude();
}
[JsonObjectAttribute]
public class GeoJSON.Net.Geometry.LineString : GeoJSONObject {
    [CompilerGeneratedAttribute]
private ReadOnlyCollection`1<IPosition> <Coordinates>k__BackingField;
    public GeoJSONObjectType Type { get; }
    [JsonPropertyAttribute]
[JsonConverterAttribute("GeoJSON.Net.Converters.PositionEnumerableConverter")]
public ReadOnlyCollection`1<IPosition> Coordinates { get; }
    [JsonConstructorAttribute]
public LineString(IEnumerable`1<IEnumerable`1<double>> coordinates);
    public LineString(IEnumerable`1<IPosition> coordinates);
    public virtual GeoJSONObjectType get_Type();
    [CompilerGeneratedAttribute]
public ReadOnlyCollection`1<IPosition> get_Coordinates();
    public bool IsClosed();
    public bool IsLinearRing();
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(LineString other);
    public sealed virtual bool Equals(LineString left, LineString right);
    public static bool op_Equality(LineString left, LineString right);
    public static bool op_Inequality(LineString left, LineString right);
    public virtual int GetHashCode();
    public sealed virtual int GetHashCode(LineString other);
}
public class GeoJSON.Net.Geometry.MultiLineString : GeoJSONObject {
    [CompilerGeneratedAttribute]
private ReadOnlyCollection`1<LineString> <Coordinates>k__BackingField;
    public GeoJSONObjectType Type { get; }
    [JsonPropertyAttribute]
[JsonConverterAttribute("GeoJSON.Net.Converters.LineStringEnumerableConverter")]
public ReadOnlyCollection`1<LineString> Coordinates { get; }
    public MultiLineString(IEnumerable`1<LineString> coordinates);
    [JsonConstructorAttribute]
public MultiLineString(IEnumerable`1<IEnumerable`1<IEnumerable`1<double>>> coordinates);
    public virtual GeoJSONObjectType get_Type();
    [CompilerGeneratedAttribute]
public ReadOnlyCollection`1<LineString> get_Coordinates();
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(MultiLineString other);
    public sealed virtual bool Equals(MultiLineString left, MultiLineString right);
    public static bool op_Equality(MultiLineString left, MultiLineString right);
    public static bool op_Inequality(MultiLineString left, MultiLineString right);
    public virtual int GetHashCode();
    public sealed virtual int GetHashCode(MultiLineString other);
}
public class GeoJSON.Net.Geometry.MultiPoint : GeoJSONObject {
    [CompilerGeneratedAttribute]
private ReadOnlyCollection`1<Point> <Coordinates>k__BackingField;
    public GeoJSONObjectType Type { get; }
    [JsonPropertyAttribute]
[JsonConverterAttribute("GeoJSON.Net.Converters.PointEnumerableConverter")]
public ReadOnlyCollection`1<Point> Coordinates { get; }
    public MultiPoint(IEnumerable`1<Point> coordinates);
    [JsonConstructorAttribute]
public MultiPoint(IEnumerable`1<IEnumerable`1<double>> coordinates);
    public virtual GeoJSONObjectType get_Type();
    [CompilerGeneratedAttribute]
public ReadOnlyCollection`1<Point> get_Coordinates();
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(MultiPoint other);
    public sealed virtual bool Equals(MultiPoint left, MultiPoint right);
    public static bool op_Equality(MultiPoint left, MultiPoint right);
    public static bool op_Inequality(MultiPoint left, MultiPoint right);
    public virtual int GetHashCode();
    public sealed virtual int GetHashCode(MultiPoint other);
}
public class GeoJSON.Net.Geometry.MultiPolygon : GeoJSONObject {
    [CompilerGeneratedAttribute]
private ReadOnlyCollection`1<Polygon> <Coordinates>k__BackingField;
    public GeoJSONObjectType Type { get; }
    [JsonPropertyAttribute]
[JsonConverterAttribute("GeoJSON.Net.Converters.PolygonEnumerableConverter")]
public ReadOnlyCollection`1<Polygon> Coordinates { get; }
    public MultiPolygon(IEnumerable`1<Polygon> polygons);
    [JsonConstructorAttribute]
public MultiPolygon(IEnumerable`1<IEnumerable`1<IEnumerable`1<IEnumerable`1<double>>>> coordinates);
    public virtual GeoJSONObjectType get_Type();
    [CompilerGeneratedAttribute]
public ReadOnlyCollection`1<Polygon> get_Coordinates();
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(MultiPolygon other);
    public sealed virtual bool Equals(MultiPolygon left, MultiPolygon right);
    public static bool op_Equality(MultiPolygon left, MultiPolygon right);
    public static bool op_Inequality(MultiPolygon left, MultiPolygon right);
    public virtual int GetHashCode();
    public sealed virtual int GetHashCode(MultiPolygon other);
}
public class GeoJSON.Net.Geometry.Point : GeoJSONObject {
    [CompilerGeneratedAttribute]
private IPosition <Coordinates>k__BackingField;
    public GeoJSONObjectType Type { get; }
    [JsonPropertyAttribute]
[JsonConverterAttribute("GeoJSON.Net.Converters.PositionConverter")]
public IPosition Coordinates { get; }
    public Point(IPosition coordinates);
    public virtual GeoJSONObjectType get_Type();
    [CompilerGeneratedAttribute]
public IPosition get_Coordinates();
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(Point other);
    public sealed virtual bool Equals(Point left, Point right);
    public static bool op_Equality(Point left, Point right);
    public static bool op_Inequality(Point left, Point right);
    public virtual int GetHashCode();
    public sealed virtual int GetHashCode(Point other);
}
public class GeoJSON.Net.Geometry.Polygon : GeoJSONObject {
    [CompilerGeneratedAttribute]
private ReadOnlyCollection`1<LineString> <Coordinates>k__BackingField;
    public GeoJSONObjectType Type { get; }
    [JsonPropertyAttribute]
[JsonConverterAttribute("GeoJSON.Net.Converters.LineStringEnumerableConverter")]
public ReadOnlyCollection`1<LineString> Coordinates { get; }
    public Polygon(IEnumerable`1<LineString> coordinates);
    [JsonConstructorAttribute]
public Polygon(IEnumerable`1<IEnumerable`1<IEnumerable`1<double>>> coordinates);
    public virtual GeoJSONObjectType get_Type();
    [CompilerGeneratedAttribute]
public ReadOnlyCollection`1<LineString> get_Coordinates();
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(Polygon other);
    public sealed virtual bool Equals(Polygon left, Polygon right);
    public static bool op_Equality(Polygon left, Polygon right);
    public static bool op_Inequality(Polygon left, Polygon right);
    public virtual int GetHashCode();
    public sealed virtual int GetHashCode(Polygon other);
}
public class GeoJSON.Net.Geometry.Position : object {
    private static DoubleTenDecimalPlaceComparer DoubleComparer;
    [CompilerGeneratedAttribute]
private Nullable`1<double> <Altitude>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Latitude>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Longitude>k__BackingField;
    public Nullable`1<double> Altitude { get; }
    public double Latitude { get; }
    public double Longitude { get; }
    public Position(double latitude, double longitude, Nullable`1<double> altitude);
    public Position(string latitude, string longitude, string altitude);
    private static Position();
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<double> get_Altitude();
    [CompilerGeneratedAttribute]
public sealed virtual double get_Latitude();
    [CompilerGeneratedAttribute]
public sealed virtual double get_Longitude();
    public virtual string ToString();
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(Position other);
    public sealed virtual bool Equals(Position left, Position right);
    public static bool op_Equality(Position left, Position right);
    public static bool op_Inequality(Position left, Position right);
    public virtual int GetHashCode();
    public sealed virtual int GetHashCode(Position other);
}
public interface GeoJSON.Net.IGeoJSONObject {
    public GeoJSONObjectType Type { get; }
    public ICRSObject CRS { get; }
    public Double[] BoundingBoxes { get; public set; }
    public abstract virtual GeoJSONObjectType get_Type();
    public abstract virtual ICRSObject get_CRS();
    public abstract virtual Double[] get_BoundingBoxes();
    public abstract virtual void set_BoundingBoxes(Double[] value);
}
[ExtensionAttribute]
internal static class GeoJSON.Net.PositionExtensions : object {
    [ExtensionAttribute]
internal static Position ToPosition(IEnumerable`1<double> coordinates);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
