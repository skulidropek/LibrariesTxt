[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class GitVersion.Agents.AppVeyor : BuildAgentBase {
    public static string EnvironmentVariableName;
    protected string EnvironmentVariable { get; }
    public AppVeyor(IEnvironment environment, ILog log);
    protected virtual string get_EnvironmentVariable();
    public virtual string GenerateSetVersionMessage(GitVersionVariables variables);
    public virtual String[] GenerateSetParameterMessage(string name, string value);
    private static HttpClient GetHttpClient(string apiUrl);
    [NullableContextAttribute("2")]
public virtual string GetCurrentBranch(bool usingDynamicRepos);
    public virtual bool PreventFetch();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class GitVersion.Agents.AzurePipelines : BuildAgentBase {
    public static string EnvironmentVariableName;
    protected string EnvironmentVariable { get; }
    public AzurePipelines(IEnvironment environment, ILog log);
    protected virtual string get_EnvironmentVariable();
    public virtual String[] GenerateSetParameterMessage(string name, string value);
    [NullableContextAttribute("2")]
public virtual string GetCurrentBranch(bool usingDynamicRepos);
    public virtual bool PreventFetch();
    public virtual string GenerateSetVersionMessage(GitVersionVariables variables);
    private static string ReplaceVariables(string buildNumberEnv, KeyValuePair`2<string, string> variable);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class GitVersion.Agents.BitBucketPipelines : BuildAgentBase {
    public static string EnvironmentVariableName;
    public static string BranchEnvironmentVariableName;
    public static string TagEnvironmentVariableName;
    public static string PullRequestEnvironmentVariableName;
    [NullableAttribute("2")]
private string propertyFile;
    [NullableAttribute("2")]
private string ps1File;
    protected string EnvironmentVariable { get; }
    public BitBucketPipelines(IEnvironment environment, ILog log);
    protected virtual string get_EnvironmentVariable();
    public virtual string GenerateSetVersionMessage(GitVersionVariables variables);
    public void WithPropertyFile(string propertiesFileName);
    public void WithPowershellFile(string powershellFileName);
    public virtual String[] GenerateSetParameterMessage(string name, string value);
    public virtual void WriteIntegration(Action`1<string> writer, GitVersionVariables variables, bool updateBuildNumber);
    [NullableContextAttribute("2")]
public virtual string GetCurrentBranch(bool usingDynamicRepos);
    private string EvaluateEnvironmentVariable(string variableName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class GitVersion.Agents.BuildKite : BuildAgentBase {
    public static string EnvironmentVariableName;
    protected string EnvironmentVariable { get; }
    public BuildKite(IEnvironment environment, ILog log);
    protected virtual string get_EnvironmentVariable();
    public virtual bool CanApplyToCurrentContext();
    public virtual string GenerateSetVersionMessage(GitVersionVariables variables);
    public virtual String[] GenerateSetParameterMessage(string name, string value);
    [NullableContextAttribute("2")]
public virtual string GetCurrentBranch(bool usingDynamicRepos);
    public virtual bool PreventFetch();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class GitVersion.Agents.CodeBuild : BuildAgentBase {
    [NullableAttribute("2")]
private string file;
    public static string WebHookEnvironmentVariableName;
    public static string SourceVersionEnvironmentVariableName;
    protected string EnvironmentVariable { get; }
    public CodeBuild(IEnvironment environment, ILog log);
    public void WithPropertyFile(string propertiesFileName);
    protected virtual string get_EnvironmentVariable();
    public virtual string GenerateSetVersionMessage(GitVersionVariables variables);
    public virtual String[] GenerateSetParameterMessage(string name, string value);
    [NullableContextAttribute("2")]
public virtual string GetCurrentBranch(bool usingDynamicRepos);
    public virtual void WriteIntegration(Action`1<string> writer, GitVersionVariables variables, bool updateBuildNumber);
    public virtual bool PreventFetch();
    public virtual bool CanApplyToCurrentContext();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class GitVersion.Agents.ContinuaCi : BuildAgentBase {
    public static string EnvironmentVariableName;
    protected string EnvironmentVariable { get; }
    public ContinuaCi(IEnvironment environment, ILog log);
    protected virtual string get_EnvironmentVariable();
    public virtual String[] GenerateSetParameterMessage(string name, string value);
    public virtual string GenerateSetVersionMessage(GitVersionVariables variables);
    public virtual bool PreventFetch();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class GitVersion.Agents.Drone : BuildAgentBase {
    public static string EnvironmentVariableName;
    protected string EnvironmentVariable { get; }
    public Drone(IEnvironment environment, ILog log);
    protected virtual string get_EnvironmentVariable();
    public virtual bool CanApplyToCurrentContext();
    public virtual string GenerateSetVersionMessage(GitVersionVariables variables);
    public virtual String[] GenerateSetParameterMessage(string name, string value);
    [NullableContextAttribute("2")]
public virtual string GetCurrentBranch(bool usingDynamicRepos);
    public virtual bool PreventFetch();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class GitVersion.Agents.EnvRun : BuildAgentBase {
    public static string EnvironmentVariableName;
    protected string EnvironmentVariable { get; }
    public EnvRun(IEnvironment environment, ILog log);
    protected virtual string get_EnvironmentVariable();
    public virtual bool CanApplyToCurrentContext();
    public virtual string GenerateSetVersionMessage(GitVersionVariables variables);
    public virtual String[] GenerateSetParameterMessage(string name, string value);
    public virtual bool PreventFetch();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class GitVersion.Agents.GitHubActions : BuildAgentBase {
    public static string EnvironmentVariableName;
    public static string GitHubSetEnvTempFileEnvironmentVariableName;
    protected string EnvironmentVariable { get; }
    public GitHubActions(IEnvironment environment, ILog log);
    protected virtual string get_EnvironmentVariable();
    public virtual string GenerateSetVersionMessage(GitVersionVariables variables);
    public virtual String[] GenerateSetParameterMessage(string name, string value);
    public virtual void WriteIntegration(Action`1<string> writer, GitVersionVariables variables, bool updateBuildNumber);
    [NullableContextAttribute("2")]
public virtual string GetCurrentBranch(bool usingDynamicRepos);
    public virtual bool PreventFetch();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class GitVersion.Agents.GitLabCi : BuildAgentBase {
    public static string EnvironmentVariableName;
    [NullableAttribute("2")]
private string file;
    protected string EnvironmentVariable { get; }
    public GitLabCi(IEnvironment environment, ILog log);
    public void WithPropertyFile(string propertiesFileName);
    protected virtual string get_EnvironmentVariable();
    public virtual string GenerateSetVersionMessage(GitVersionVariables variables);
    public virtual String[] GenerateSetParameterMessage(string name, string value);
    [NullableContextAttribute("2")]
public virtual string GetCurrentBranch(bool usingDynamicRepos);
    public virtual bool PreventFetch();
    public virtual void WriteIntegration(Action`1<string> writer, GitVersionVariables variables, bool updateBuildNumber);
}
public class GitVersion.Agents.GitVersionBuildAgentsModule : object {
    [NullableContextAttribute("1")]
public sealed virtual void RegisterTypes(IServiceCollection services);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class GitVersion.Agents.Jenkins : BuildAgentBase {
    public static string EnvironmentVariableName;
    [NullableAttribute("2")]
private string file;
    protected string EnvironmentVariable { get; }
    public Jenkins(IEnvironment environment, ILog log);
    protected virtual string get_EnvironmentVariable();
    public void WithPropertyFile(string propertiesFileName);
    public virtual string GenerateSetVersionMessage(GitVersionVariables variables);
    public virtual String[] GenerateSetParameterMessage(string name, string value);
    [NullableContextAttribute("2")]
public virtual string GetCurrentBranch(bool usingDynamicRepos);
    private bool IsPipelineAsCode();
    public virtual bool PreventFetch();
    public virtual bool ShouldCleanUpRemotes();
    public virtual void WriteIntegration(Action`1<string> writer, GitVersionVariables variables, bool updateBuildNumber);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class GitVersion.Agents.MyGet : BuildAgentBase {
    public static string EnvironmentVariableName;
    protected string EnvironmentVariable { get; }
    public MyGet(IEnvironment environment, ILog log);
    protected virtual string get_EnvironmentVariable();
    public virtual bool CanApplyToCurrentContext();
    public virtual String[] GenerateSetParameterMessage(string name, string value);
    public virtual string GenerateSetVersionMessage(GitVersionVariables variables);
    public virtual bool PreventFetch();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class GitVersion.Agents.SpaceAutomation : BuildAgentBase {
    public static string EnvironmentVariableName;
    protected string EnvironmentVariable { get; }
    public SpaceAutomation(IEnvironment environment, ILog log);
    protected virtual string get_EnvironmentVariable();
    [NullableContextAttribute("2")]
public virtual string GetCurrentBranch(bool usingDynamicRepos);
    public virtual String[] GenerateSetParameterMessage(string name, string value);
    public virtual string GenerateSetVersionMessage(GitVersionVariables variables);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class GitVersion.Agents.TeamCity : BuildAgentBase {
    public static string EnvironmentVariableName;
    protected string EnvironmentVariable { get; }
    public TeamCity(IEnvironment environment, ILog log);
    protected virtual string get_EnvironmentVariable();
    [NullableContextAttribute("2")]
public virtual string GetCurrentBranch(bool usingDynamicRepos);
    private void WriteBranchEnvVariableWarning();
    public virtual bool PreventFetch();
    public virtual String[] GenerateSetParameterMessage(string name, string value);
    public virtual string GenerateSetVersionMessage(GitVersionVariables variables);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class GitVersion.Agents.TravisCi : BuildAgentBase {
    public static string EnvironmentVariableName;
    protected string EnvironmentVariable { get; }
    public TravisCi(IEnvironment environment, ILog log);
    protected virtual string get_EnvironmentVariable();
    public virtual bool CanApplyToCurrentContext();
    public virtual string GenerateSetVersionMessage(GitVersionVariables variables);
    public virtual String[] GenerateSetParameterMessage(string name, string value);
    public virtual bool PreventFetch();
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
