public enum GitVersion.Configuration.Attributes.Format : Enum {
    public int value__;
    public static Format Date;
    public static Format DateTime;
    public static Format Duration;
    public static Format Email;
    public static Format Hostname;
    public static Format IdnEmail;
    public static Format IdnHostname;
    public static Format Ipv4;
    public static Format Ipv6;
    public static Format Iri;
    public static Format IriReference;
    public static Format JsonPointer;
    public static Format Regex;
    public static Format RelativeJsonPointer;
    public static Format Time;
    public static Format Uri;
    public static Format UriReference;
    public static Format UriTemplate;
    public static Format Uuid;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("384")]
public class GitVersion.Configuration.Attributes.JsonPropertyDefaultAttribute : JsonAttribute {
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    public string Value { get; }
    [NullableContextAttribute("2")]
public JsonPropertyDefaultAttribute(string value);
    public JsonPropertyDefaultAttribute(bool value);
    public JsonPropertyDefaultAttribute(SemanticVersionFormat value);
    public JsonPropertyDefaultAttribute(AssemblyVersioningScheme value);
    public JsonPropertyDefaultAttribute(AssemblyFileVersioningScheme value);
    [NullableContextAttribute("2")]
public JsonPropertyDefaultAttribute(object boxedValue);
    [CompilerGeneratedAttribute]
public string get_Value();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("384")]
public class GitVersion.Configuration.Attributes.JsonPropertyDescriptionAttribute : JsonAttribute {
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    public string Description { get; }
    public JsonPropertyDescriptionAttribute(string description);
    [CompilerGeneratedAttribute]
public string get_Description();
}
[AttributeUsageAttribute("384")]
public class GitVersion.Configuration.Attributes.JsonPropertyFormatAttribute : JsonAttribute {
    [CompilerGeneratedAttribute]
private Format <Format>k__BackingField;
    public Format Format { get; }
    public JsonPropertyFormatAttribute(Format format);
    [CompilerGeneratedAttribute]
public Format get_Format();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class GitVersion.Configuration.BranchConfiguration : object {
    [CompilerGeneratedAttribute]
private Nullable`1<DeploymentMode> <DeploymentMode>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <Label>k__BackingField;
    [CompilerGeneratedAttribute]
private IncrementStrategy <Increment>k__BackingField;
    [CompilerGeneratedAttribute]
private PreventIncrementConfiguration <PreventIncrement>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <LabelNumberPattern>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <TrackMergeTarget>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <TrackMergeMessage>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<CommitMessageIncrementMode> <CommitMessageIncrementing>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <RegularExpression>k__BackingField;
    [CompilerGeneratedAttribute]
private HashSet`1<string> <SourceBranches>k__BackingField;
    [CompilerGeneratedAttribute]
private HashSet`1<string> <IsSourceBranchFor>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <TracksReleaseBranches>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <IsReleaseBranch>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <IsMainBranch>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <PreReleaseWeight>k__BackingField;
    [CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    [JsonPropertyNameAttribute("mode")]
[JsonPropertyDescriptionAttribute("The deployment mode for this branch. Can be 'ManualDeployment', 'ContinuousDelivery', 'ContinuousDeployment'.")]
public Nullable`1<DeploymentMode> DeploymentMode { get; internal set; }
    [NullableAttribute("2")]
[JsonPropertyNameAttribute("label")]
[JsonPropertyDescriptionAttribute("The label to use for this branch. Use the value {BranchName} or similar as a placeholder to insert a named capture group from RegularExpression (fx. the branch name).")]
public string Label { get; internal set; }
    [JsonPropertyNameAttribute("increment")]
[JsonPropertyDescriptionAttribute("The increment strategy for this branch. Can be 'Inherit', 'Patch', 'Minor', 'Major', 'None'.")]
public IncrementStrategy Increment { get; internal set; }
    [JsonIgnoreAttribute]
private IPreventIncrementConfiguration GitVersion.Configuration.IBranchConfiguration.PreventIncrement { get; }
    [JsonPropertyNameAttribute("prevent-increment")]
[JsonPropertyDescriptionAttribute("The prevent increment configuration section.")]
public PreventIncrementConfiguration PreventIncrement { get; internal set; }
    [NullableAttribute("2")]
[JsonPropertyNameAttribute("label-number-pattern")]
[JsonPropertyDescriptionAttribute("The regular expression pattern to use to extract the number from the branch name. Defaults to '[/-](?<number>\d+)'.")]
[JsonPropertyDefaultAttribute("[/-](?<number>\d+)")]
[JsonPropertyFormatAttribute("12")]
public string LabelNumberPattern { get; internal set; }
    [JsonPropertyNameAttribute("track-merge-target")]
[JsonPropertyDescriptionAttribute("Strategy which will look for tagged merge commits directly off the current branch.")]
public Nullable`1<bool> TrackMergeTarget { get; internal set; }
    [JsonPropertyNameAttribute("track-merge-message")]
[JsonPropertyDescriptionAttribute("This property is a branch related property and gives the user the possibility to control the behavior of whether the merge commit message will be interpreted as a next version or not.")]
public Nullable`1<bool> TrackMergeMessage { get; internal set; }
    [JsonPropertyNameAttribute("commit-message-incrementing")]
[JsonPropertyDescriptionAttribute("Sets whether it should be possible to increment the version with special syntax in the commit message. Can be 'Disabled', 'Enabled' or 'MergeMessageOnly'.")]
public Nullable`1<CommitMessageIncrementMode> CommitMessageIncrementing { get; internal set; }
    [NullableAttribute("2")]
[JsonPropertyNameAttribute("regex")]
[JsonPropertyDescriptionAttribute("The regular expression pattern to use to match this branch.")]
[JsonPropertyFormatAttribute("12")]
public string RegularExpression { get; internal set; }
    [NullableAttribute("2")]
[JsonIgnoreAttribute]
private string GitVersion.Configuration.IBranchConfiguration.RegularExpression { get; }
    [JsonPropertyNameAttribute("source-branches")]
[JsonPropertyDescriptionAttribute("The source branches for this branch.")]
public HashSet`1<string> SourceBranches { get; internal set; }
    [JsonIgnoreAttribute]
private IReadOnlyCollection`1<string> GitVersion.Configuration.IBranchConfiguration.SourceBranches { get; }
    [JsonPropertyNameAttribute("is-source-branch-for")]
[JsonPropertyDescriptionAttribute("The branches that this branch is a source branch.")]
public HashSet`1<string> IsSourceBranchFor { get; internal set; }
    [JsonIgnoreAttribute]
private IReadOnlyCollection`1<string> GitVersion.Configuration.IBranchConfiguration.IsSourceBranchFor { get; }
    [JsonPropertyNameAttribute("tracks-release-branches")]
[JsonPropertyDescriptionAttribute("Indicates this branch configuration represents develop in GitFlow.")]
public Nullable`1<bool> TracksReleaseBranches { get; internal set; }
    [JsonPropertyNameAttribute("is-release-branch")]
[JsonPropertyDescriptionAttribute("Indicates this branch configuration represents a release branch in GitFlow.")]
public Nullable`1<bool> IsReleaseBranch { get; internal set; }
    [JsonPropertyNameAttribute("is-main-branch")]
[JsonPropertyDescriptionAttribute("When using Mainline mode, this indicates that this branch is a mainline. By default main and support/* are mainlines.")]
public Nullable`1<bool> IsMainBranch { get; internal set; }
    [JsonPropertyNameAttribute("pre-release-weight")]
[JsonPropertyDescriptionAttribute("Provides a way to translate the PreReleaseLabel to a number.")]
public Nullable`1<int> PreReleaseWeight { get; internal set; }
    [CompilerGeneratedAttribute]
protected BranchConfiguration(BranchConfiguration original);
    [CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<DeploymentMode> get_DeploymentMode();
    [CompilerGeneratedAttribute]
internal void set_DeploymentMode(Nullable`1<DeploymentMode> value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual string get_Label();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal void set_Label(string value);
    [CompilerGeneratedAttribute]
public sealed virtual IncrementStrategy get_Increment();
    [CompilerGeneratedAttribute]
internal void set_Increment(IncrementStrategy value);
    private sealed virtual override IPreventIncrementConfiguration GitVersion.Configuration.IBranchConfiguration.get_PreventIncrement();
    [CompilerGeneratedAttribute]
public PreventIncrementConfiguration get_PreventIncrement();
    [CompilerGeneratedAttribute]
internal void set_PreventIncrement(PreventIncrementConfiguration value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual string get_LabelNumberPattern();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal void set_LabelNumberPattern(string value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<bool> get_TrackMergeTarget();
    [CompilerGeneratedAttribute]
internal void set_TrackMergeTarget(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<bool> get_TrackMergeMessage();
    [CompilerGeneratedAttribute]
internal void set_TrackMergeMessage(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<CommitMessageIncrementMode> get_CommitMessageIncrementing();
    [CompilerGeneratedAttribute]
internal void set_CommitMessageIncrementing(Nullable`1<CommitMessageIncrementMode> value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_RegularExpression();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal void set_RegularExpression(string value);
    [NullableContextAttribute("2")]
private sealed virtual override string GitVersion.Configuration.IBranchConfiguration.get_RegularExpression();
    [CompilerGeneratedAttribute]
public HashSet`1<string> get_SourceBranches();
    [CompilerGeneratedAttribute]
internal void set_SourceBranches(HashSet`1<string> value);
    private sealed virtual override IReadOnlyCollection`1<string> GitVersion.Configuration.IBranchConfiguration.get_SourceBranches();
    [CompilerGeneratedAttribute]
public HashSet`1<string> get_IsSourceBranchFor();
    [CompilerGeneratedAttribute]
internal void set_IsSourceBranchFor(HashSet`1<string> value);
    private sealed virtual override IReadOnlyCollection`1<string> GitVersion.Configuration.IBranchConfiguration.get_IsSourceBranchFor();
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<bool> get_TracksReleaseBranches();
    [CompilerGeneratedAttribute]
internal void set_TracksReleaseBranches(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<bool> get_IsReleaseBranch();
    [CompilerGeneratedAttribute]
internal void set_IsReleaseBranch(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<bool> get_IsMainBranch();
    [CompilerGeneratedAttribute]
internal void set_IsMainBranch(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<int> get_PreReleaseWeight();
    [CompilerGeneratedAttribute]
internal void set_PreReleaseWeight(Nullable`1<int> value);
    public virtual IBranchConfiguration Inherit(IBranchConfiguration configuration);
    public virtual IBranchConfiguration Inherit(EffectiveConfiguration configuration);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(BranchConfiguration left, BranchConfiguration right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(BranchConfiguration left, BranchConfiguration right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(BranchConfiguration other);
    [CompilerGeneratedAttribute]
public virtual BranchConfiguration <Clone>$();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class GitVersion.Configuration.BranchConfigurationBuilder : object {
    private Nullable`1<DeploymentMode> deploymentMode;
    [NullableAttribute("2")]
private string label;
    private IncrementStrategy increment;
    private Nullable`1<bool> preventIncrementOfMergedBranch;
    private Nullable`1<bool> preventIncrementWhenBranchMerged;
    private Nullable`1<bool> preventIncrementWhenCurrentCommitTagged;
    [NullableAttribute("2")]
private string labelNumberPattern;
    private Nullable`1<bool> trackMergeTarget;
    private Nullable`1<bool> trackMergeMessage;
    private Nullable`1<CommitMessageIncrementMode> commitMessageIncrementing;
    [NullableAttribute("2")]
private string regularExpression;
    private HashSet`1<string> sourceBranches;
    private HashSet`1<string> isSourceBranchFor;
    private Nullable`1<bool> tracksReleaseBranches;
    private Nullable`1<bool> isReleaseBranch;
    private Nullable`1<bool> isMainBranch;
    private Nullable`1<int> preReleaseWeight;
    public static BranchConfigurationBuilder New { get; }
    public static BranchConfigurationBuilder get_New();
    public virtual BranchConfigurationBuilder WithDeploymentMode(Nullable`1<DeploymentMode> value);
    public virtual BranchConfigurationBuilder WithLabel(string value);
    public virtual BranchConfigurationBuilder WithIncrement(IncrementStrategy value);
    public virtual BranchConfigurationBuilder WithPreventIncrementOfMergedBranch(Nullable`1<bool> value);
    public virtual BranchConfigurationBuilder WithPreventIncrementWhenBranchMerged(Nullable`1<bool> value);
    public virtual BranchConfigurationBuilder WithPreventIncrementWhenCurrentCommitTagged(Nullable`1<bool> value);
    public virtual BranchConfigurationBuilder WithLabelNumberPattern(string value);
    public virtual BranchConfigurationBuilder WithTrackMergeTarget(Nullable`1<bool> value);
    public virtual BranchConfigurationBuilder WithTrackMergeMessage(Nullable`1<bool> value);
    public virtual BranchConfigurationBuilder WithCommitMessageIncrementing(Nullable`1<CommitMessageIncrementMode> value);
    public virtual BranchConfigurationBuilder WithRegularExpression(string value);
    public virtual BranchConfigurationBuilder WithSourceBranches(IEnumerable`1<string> values);
    public virtual BranchConfigurationBuilder WithSourceBranches(String[] values);
    public virtual BranchConfigurationBuilder WithIsSourceBranchFor(IEnumerable`1<string> values);
    public virtual BranchConfigurationBuilder WithIsSourceBranchFor(String[] values);
    public virtual BranchConfigurationBuilder WithTracksReleaseBranches(Nullable`1<bool> value);
    public virtual BranchConfigurationBuilder WithIsReleaseBranch(Nullable`1<bool> value);
    public virtual BranchConfigurationBuilder WithIsMainBranch(Nullable`1<bool> value);
    public virtual BranchConfigurationBuilder WithPreReleaseWeight(Nullable`1<int> value);
    public virtual BranchConfigurationBuilder WithConfiguration(IBranchConfiguration value);
    public IBranchConfiguration Build();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class GitVersion.Configuration.ConfigurationBuilder : ConfigurationBuilderBase`1<ConfigurationBuilder> {
    public static ConfigurationBuilder New { get; }
    public static ConfigurationBuilder get_New();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class GitVersion.Configuration.ConfigurationBuilderBase`1 : object {
    private Nullable`1<AssemblyVersioningScheme> assemblyVersioningScheme;
    private Nullable`1<AssemblyFileVersioningScheme> assemblyFileVersioningScheme;
    [NullableAttribute("2")]
private string assemblyInformationalFormat;
    [NullableAttribute("2")]
private string assemblyVersioningFormat;
    [NullableAttribute("2")]
private string assemblyFileVersioningFormat;
    [NullableAttribute("2")]
private string tagPrefix;
    [NullableAttribute("2")]
private string versionInBranchPattern;
    [NullableAttribute("2")]
private string nextVersion;
    [NullableAttribute("2")]
private string majorVersionBumpMessage;
    [NullableAttribute("2")]
private string minorVersionBumpMessage;
    [NullableAttribute("2")]
private string patchVersionBumpMessage;
    [NullableAttribute("2")]
private string noBumpMessage;
    private Nullable`1<int> tagPreReleaseWeight;
    private IgnoreConfiguration ignore;
    [NullableAttribute("2")]
private string commitDateFormat;
    private bool updateBuildNumber;
    private SemanticVersionFormat semanticVersionFormat;
    private VersionStrategies[] versionStrategies;
    private Dictionary`2<string, string> mergeMessageFormats;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<IReadOnlyDictionary`2<object, object>> overrides;
    private Dictionary`2<string, BranchConfigurationBuilder> branchConfigurationBuilders;
    private Nullable`1<DeploymentMode> versioningMode;
    [NullableAttribute("2")]
private string label;
    private IncrementStrategy increment;
    private Nullable`1<bool> preventIncrementOfMergedBranch;
    private Nullable`1<bool> preventIncrementWhenBranchMerged;
    private Nullable`1<bool> preventIncrementWhenCurrentCommitTagged;
    [NullableAttribute("2")]
private string labelNumberPattern;
    private Nullable`1<bool> trackMergeTarget;
    private Nullable`1<bool> trackMergeMessage;
    private Nullable`1<CommitMessageIncrementMode> commitMessageIncrementing;
    [NullableAttribute("2")]
private string regularExpression;
    private Nullable`1<bool> tracksReleaseBranches;
    private Nullable`1<bool> isReleaseBranch;
    private Nullable`1<bool> isMainBranch;
    private Nullable`1<int> preReleaseWeight;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
protected BranchMetaData<TConfigurationBuilder> MainBranch;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
protected BranchMetaData<TConfigurationBuilder> DevelopBranch;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
protected BranchMetaData<TConfigurationBuilder> ReleaseBranch;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
protected BranchMetaData<TConfigurationBuilder> FeatureBranch;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
protected BranchMetaData<TConfigurationBuilder> PullRequestBranch;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
protected BranchMetaData<TConfigurationBuilder> HotfixBranch;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
protected BranchMetaData<TConfigurationBuilder> SupportBranch;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
protected BranchMetaData<TConfigurationBuilder> UnknownBranch;
    public virtual TConfigurationBuilder WithAssemblyVersioningScheme(Nullable`1<AssemblyVersioningScheme> value);
    public virtual TConfigurationBuilder WithAssemblyFileVersioningScheme(Nullable`1<AssemblyFileVersioningScheme> value);
    public virtual TConfigurationBuilder WithAssemblyInformationalFormat(string value);
    public virtual TConfigurationBuilder WithAssemblyVersioningFormat(string value);
    public virtual TConfigurationBuilder WithAssemblyFileVersioningFormat(string value);
    public virtual TConfigurationBuilder WithTagPrefix(string value);
    public virtual TConfigurationBuilder WithVersionInBranchPattern(string value);
    public virtual TConfigurationBuilder WithNextVersion(string value);
    public virtual TConfigurationBuilder WithMajorVersionBumpMessage(string value);
    public virtual TConfigurationBuilder WithMinorVersionBumpMessage(string value);
    public virtual TConfigurationBuilder WithPatchVersionBumpMessage(string value);
    public virtual TConfigurationBuilder WithNoBumpMessage(string value);
    public virtual TConfigurationBuilder WithTagPreReleaseWeight(Nullable`1<int> value);
    public virtual TConfigurationBuilder WithIgnoreConfiguration(IIgnoreConfiguration value);
    public virtual TConfigurationBuilder WithCommitDateFormat(string value);
    public virtual TConfigurationBuilder WithUpdateBuildNumber(bool value);
    public virtual TConfigurationBuilder WithSemanticVersionFormat(SemanticVersionFormat value);
    public virtual TConfigurationBuilder WithVersionStrategy(VersionStrategies value);
    public virtual TConfigurationBuilder WithVersionStrategies(VersionStrategies[] values);
    public virtual TConfigurationBuilder WithMergeMessageFormats(IReadOnlyDictionary`2<string, string> value);
    public virtual TConfigurationBuilder WithoutBranches();
    public virtual BranchConfigurationBuilder WithBranch(string value);
    public virtual BranchConfigurationBuilder WithBranch(string value, BranchConfigurationBuilder builder);
    public virtual TConfigurationBuilder WithBranch(string value, Action`1<BranchConfigurationBuilder> action);
    public virtual TConfigurationBuilder WithDeploymentMode(Nullable`1<DeploymentMode> value);
    public virtual TConfigurationBuilder WithLabel(string value);
    public virtual TConfigurationBuilder WithIncrement(IncrementStrategy value);
    public virtual TConfigurationBuilder WithPreventIncrementOfMergedBranch(Nullable`1<bool> value);
    public virtual TConfigurationBuilder WithPreventIncrementWhenBranchMerged(Nullable`1<bool> value);
    public virtual TConfigurationBuilder WithPreventIncrementWhenCurrentCommitTagged(Nullable`1<bool> value);
    public virtual TConfigurationBuilder WithLabelNumberPattern(string value);
    public virtual TConfigurationBuilder WithTrackMergeTarget(Nullable`1<bool> value);
    public virtual TConfigurationBuilder WithTrackMergeMessage(Nullable`1<bool> value);
    public virtual TConfigurationBuilder WithCommitMessageIncrementing(Nullable`1<CommitMessageIncrementMode> value);
    public virtual TConfigurationBuilder WithRegularExpression(string value);
    public virtual TConfigurationBuilder WithTracksReleaseBranches(Nullable`1<bool> value);
    public virtual TConfigurationBuilder WithIsReleaseBranch(Nullable`1<bool> value);
    public virtual TConfigurationBuilder WithIsMainBranch(Nullable`1<bool> value);
    public virtual TConfigurationBuilder WithPreReleaseWeight(Nullable`1<int> value);
    public virtual TConfigurationBuilder WithConfiguration(IGitVersionConfiguration value);
    public sealed virtual void AddOverride(IReadOnlyDictionary`2<object, object> value);
    public virtual IGitVersionConfiguration Build();
    private static void FinalizeConfiguration(IGitVersionConfiguration configuration);
    private static void FinalizeBranchConfiguration(IGitVersionConfiguration configuration, string branchName, IBranchConfiguration branchConfiguration);
    private static void ValidateConfiguration(IGitVersionConfiguration configuration);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class GitVersion.Configuration.ConfigurationException : GitVersionException {
    public ConfigurationException(string msg);
    public ConfigurationException(string message, Exception innerException);
    public ConfigurationException(string messageFormat, Object[] args);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class GitVersion.Configuration.ConfigurationFileLocator : object {
    public static string DefaultFileName;
    public static string DefaultAlternativeFileName;
    private IFileSystem fileSystem;
    private ILog log;
    private IOptions`1<GitVersionOptions> options;
    [NullableAttribute("2")]
private string ConfigurationFile { get; }
    public ConfigurationFileLocator(IFileSystem fileSystem, ILog log, IOptions`1<GitVersionOptions> options);
    [NullableContextAttribute("2")]
private string get_ConfigurationFile();
    [NullableContextAttribute("2")]
public sealed virtual void Verify(string workingDirectory, string projectRootDirectory);
    [NullableContextAttribute("2")]
public sealed virtual string GetConfigurationFile(string directory);
    [NullableContextAttribute("2")]
private void WarnAboutAmbiguousConfigFileSelection(string workingDirectory, string projectRootDirectory);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class GitVersion.Configuration.ConfigurationHelper : object {
    [NullableAttribute("2")]
private string yaml;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private IReadOnlyDictionary`2<object, object> dictionary;
    [NullableAttribute("2")]
private IGitVersionConfiguration configuration;
    private static ConfigurationSerializer Serializer { get; }
    private string Yaml { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal IReadOnlyDictionary`2<object, object> Dictionary { get; }
    public IGitVersionConfiguration Configuration { get; }
    internal ConfigurationHelper(string yaml);
    internal ConfigurationHelper(IReadOnlyDictionary`2<object, object> dictionary);
    public ConfigurationHelper(IGitVersionConfiguration configuration);
    private static ConfigurationSerializer get_Serializer();
    private string get_Yaml();
    internal IReadOnlyDictionary`2<object, object> get_Dictionary();
    public IGitVersionConfiguration get_Configuration();
    public void Override(IReadOnlyDictionary`2<object, object> value);
    private static void Merge(IDictionary`2<object, object> dictionary, IReadOnlyDictionary`2<object, object> anotherDictionary);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class GitVersion.Configuration.ConfigurationProvider : object {
    private IConfigurationFileLocator configFileLocator;
    private IFileSystem fileSystem;
    private IConfigurationSerializer configurationSerializer;
    private IOptions`1<GitVersionOptions> options;
    public ConfigurationProvider(IConfigurationFileLocator configFileLocator, IFileSystem fileSystem, IConfigurationSerializer configurationSerializer, IOptions`1<GitVersionOptions> options);
    public sealed virtual IGitVersionConfiguration Provide(IReadOnlyDictionary`2<object, object> overrideConfiguration);
    internal IGitVersionConfiguration ProvideForDirectory(string workingDirectory, IReadOnlyDictionary`2<object, object> overrideConfiguration);
    private IGitVersionConfiguration ProvideConfiguration(string configFile, IReadOnlyDictionary`2<object, object> overrideConfiguration);
    [NullableContextAttribute("2")]
private IReadOnlyDictionary`2<object, object> ReadOverrideConfiguration(string configFilePath);
    [NullableContextAttribute("2")]
private static string GetWorkflow(IReadOnlyDictionary`2<object, object> overrideConfiguration, IReadOnlyDictionary`2<object, object> overrideConfigurationFromFile);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class GitVersion.Configuration.ConfigurationSerializer : object {
    private static IDeserializer Deserializer { get; }
    private static ISerializer Serializer { get; }
    private static IDeserializer get_Deserializer();
    private static ISerializer get_Serializer();
    public sealed virtual T Deserialize(string input);
    public sealed virtual string Serialize(object graph);
    public sealed virtual IGitVersionConfiguration ReadConfiguration(string input);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class GitVersion.Configuration.EmptyConfigurationBuilder : ConfigurationBuilderBase`1<EmptyConfigurationBuilder> {
    public static EmptyConfigurationBuilder New { get; }
    public static EmptyConfigurationBuilder get_New();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class GitVersion.Configuration.GitFlowConfigurationBuilder : ConfigurationBuilderBase`1<GitFlowConfigurationBuilder> {
    public static GitFlowConfigurationBuilder New { get; }
    public static GitFlowConfigurationBuilder get_New();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class GitVersion.Configuration.GitHubFlowConfigurationBuilder : ConfigurationBuilderBase`1<GitHubFlowConfigurationBuilder> {
    public static GitHubFlowConfigurationBuilder New { get; }
    public static GitHubFlowConfigurationBuilder get_New();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class GitVersion.Configuration.GitVersionConfiguration : BranchConfiguration {
    [CompilerGeneratedAttribute]
private string <Workflow>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<AssemblyVersioningScheme> <AssemblyVersioningScheme>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<AssemblyFileVersioningScheme> <AssemblyFileVersioningScheme>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AssemblyInformationalFormat>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AssemblyVersioningFormat>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AssemblyFileVersioningFormat>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TagPrefix>k__BackingField;
    [CompilerGeneratedAttribute]
private string <VersionInBranchPattern>k__BackingField;
    private Regex versionInBranchRegex;
    private string nextVersion;
    [CompilerGeneratedAttribute]
private string <MajorVersionBumpMessage>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MinorVersionBumpMessage>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PatchVersionBumpMessage>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NoBumpMessage>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <TagPreReleaseWeight>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CommitDateFormat>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private Dictionary`2<string, string> <MergeMessageFormats>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UpdateBuildNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private SemanticVersionFormat <SemanticVersionFormat>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private VersionStrategies[] <VersionStrategies>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private Dictionary`2<string, BranchConfiguration> <Branches>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private IgnoreConfiguration <Ignore>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    [JsonPropertyNameAttribute("workflow")]
[JsonPropertyDescriptionAttribute("The base template of the configuration to use. Possible values are: 'GitFlow/v1' or 'GitHubFlow/v1'")]
public string Workflow { get; internal set; }
    [JsonPropertyNameAttribute("assembly-versioning-scheme")]
[JsonPropertyDescriptionAttribute("The scheme to use when setting AssemblyVersion attribute. Can be 'MajorMinorPatchTag', 'MajorMinorPatch', 'MajorMinor', 'Major', 'None'. Defaults to 'MajorMinorPatch'.")]
[JsonPropertyDefaultAttribute("1")]
public Nullable`1<AssemblyVersioningScheme> AssemblyVersioningScheme { get; internal set; }
    [JsonPropertyNameAttribute("assembly-file-versioning-scheme")]
[JsonPropertyDescriptionAttribute("The scheme to use when setting AssemblyFileVersion attribute. Can be 'MajorMinorPatchTag', 'MajorMinorPatch', 'MajorMinor', 'Major', 'None'. Defaults to 'MajorMinorPatch'.")]
[JsonPropertyDefaultAttribute("1")]
public Nullable`1<AssemblyFileVersioningScheme> AssemblyFileVersioningScheme { get; internal set; }
    [JsonPropertyNameAttribute("assembly-informational-format")]
[JsonPropertyDescriptionAttribute("Specifies the format of AssemblyInformationalVersion. Defaults to '{InformationalVersion}'.")]
[JsonPropertyDefaultAttribute("'{InformationalVersion}'")]
public string AssemblyInformationalFormat { get; internal set; }
    [JsonPropertyNameAttribute("assembly-versioning-format")]
[JsonPropertyDescriptionAttribute("Specifies the format of AssemblyVersion and overwrites the value of assembly-versioning-scheme.")]
public string AssemblyVersioningFormat { get; internal set; }
    [JsonPropertyNameAttribute("assembly-file-versioning-format")]
[JsonPropertyDescriptionAttribute("Specifies the format of AssemblyFileVersion and overwrites the value of assembly-file-versioning-scheme.")]
public string AssemblyFileVersioningFormat { get; internal set; }
    [JsonPropertyNameAttribute("tag-prefix")]
[JsonPropertyDescriptionAttribute("A regular expression which is used to trim Git tags before processing. Defaults to '[vV]?'")]
[JsonPropertyDefaultAttribute("[vV]?")]
[JsonPropertyFormatAttribute("12")]
public string TagPrefix { get; internal set; }
    [JsonPropertyNameAttribute("version-in-branch-pattern")]
[JsonPropertyDescriptionAttribute("A regular expression which is used to determine the version number in the branch name or commit message (e.g., v1.0.0-LTS). Defaults to '(?<version>[vV]?\d+(\.\d+)?(\.\d+)?).*'.")]
[JsonPropertyDefaultAttribute("(?<version>[vV]?\d+(\.\d+)?(\.\d+)?).*")]
[JsonPropertyFormatAttribute("12")]
public string VersionInBranchPattern { get; internal set; }
    [NullableAttribute("1")]
[JsonIgnoreAttribute]
public Regex VersionInBranchRegex { get; }
    [JsonPropertyNameAttribute("next-version")]
[JsonPropertyDescriptionAttribute("Allows you to bump the next version explicitly. Useful for bumping main or a feature branch with breaking changes")]
public string NextVersion { get; internal set; }
    [JsonPropertyNameAttribute("major-version-bump-message")]
[JsonPropertyDescriptionAttribute("The regular expression to match commit messages with to perform a major version increment. Defaults to '\+semver:\s?(breaking|major)'")]
[JsonPropertyDefaultAttribute("\+semver:\s?(breaking|major)")]
[JsonPropertyFormatAttribute("12")]
public string MajorVersionBumpMessage { get; internal set; }
    [JsonPropertyNameAttribute("minor-version-bump-message")]
[JsonPropertyDescriptionAttribute("The regular expression to match commit messages with to perform a minor version increment. Defaults to '\+semver:\s?(feature|minor)'")]
[JsonPropertyDefaultAttribute("\+semver:\s?(feature|minor)")]
[JsonPropertyFormatAttribute("12")]
public string MinorVersionBumpMessage { get; internal set; }
    [JsonPropertyNameAttribute("patch-version-bump-message")]
[JsonPropertyDescriptionAttribute("The regular expression to match commit messages with to perform a patch version increment. Defaults to '\+semver:\s?(fix|patch)'")]
[JsonPropertyDefaultAttribute("\+semver:\s?(fix|patch)")]
[JsonPropertyFormatAttribute("12")]
public string PatchVersionBumpMessage { get; internal set; }
    [JsonPropertyNameAttribute("no-bump-message")]
[JsonPropertyDescriptionAttribute("Used to tell GitVersion not to increment when in Mainline development mode. Defaults to '\+semver:\s?(none|skip)'")]
[JsonPropertyDefaultAttribute("\+semver:\s?(none|skip)")]
[JsonPropertyFormatAttribute("12")]
public string NoBumpMessage { get; internal set; }
    [JsonPropertyNameAttribute("tag-pre-release-weight")]
[JsonPropertyDescriptionAttribute("The pre-release weight in case of tagged commits. Defaults to 60000.")]
public Nullable`1<int> TagPreReleaseWeight { get; internal set; }
    [JsonPropertyNameAttribute("commit-date-format")]
[JsonPropertyDescriptionAttribute("The format to use when calculating the commit date. Defaults to 'yyyy-MM-dd'. See [Standard Date and Time Format Strings](https://learn.microsoft.com/en-us/dotnet/standard/base-types/standard-date-and-time-format-strings) and [Custom Date and Time Format Strings](https://learn.microsoft.com/en-us/dotnet/standard/base-types/standard-date-and-time-format-strings).")]
[JsonPropertyDefaultAttribute("yyyy-MM-dd")]
public string CommitDateFormat { get; internal set; }
    [NullableAttribute("1")]
[JsonPropertyNameAttribute("merge-message-formats")]
[JsonPropertyDescriptionAttribute("Custom merge message formats to enable identification of merge messages that do not follow the built-in conventions.")]
public Dictionary`2<string, string> MergeMessageFormats { get; internal set; }
    [NullableAttribute("1")]
[JsonIgnoreAttribute]
private IReadOnlyDictionary`2<string, string> GitVersion.Configuration.IGitVersionConfiguration.MergeMessageFormats { get; }
    [JsonPropertyNameAttribute("update-build-number")]
[JsonPropertyDescriptionAttribute("Whether to update the build number in the project file. Defaults to true.")]
[JsonPropertyDefaultAttribute("True")]
public bool UpdateBuildNumber { get; internal set; }
    [JsonPropertyNameAttribute("semantic-version-format")]
[JsonPropertyDescriptionAttribute("Specifies the semantic version format that is used when parsing the string. Can be 'Strict' or 'Loose'. Defaults to 'Strict'.")]
[JsonPropertyDefaultAttribute("0")]
public SemanticVersionFormat SemanticVersionFormat { get; internal set; }
    [JsonIgnoreAttribute]
private VersionStrategies GitVersion.Configuration.IGitVersionConfiguration.VersionStrategy { get; }
    [NullableAttribute("1")]
[JsonPropertyNameAttribute("strategies")]
[JsonPropertyDescriptionAttribute("Specifies which version strategies (one or more) will be used to determine the next version. Following values are available: 'ConfiguredNextVersion', 'MergeMessage', 'TaggedCommit', 'TrackReleaseBranches', 'VersionInBranchName' and 'Mainline'.")]
public VersionStrategies[] VersionStrategies { get; internal set; }
    [NullableAttribute("1")]
[JsonIgnoreAttribute]
private IReadOnlyDictionary`2<string, IBranchConfiguration> GitVersion.Configuration.IGitVersionConfiguration.Branches { get; }
    [NullableAttribute("1")]
[JsonPropertyNameAttribute("branches")]
[JsonPropertyDescriptionAttribute("The header for all the individual branch configuration.")]
public Dictionary`2<string, BranchConfiguration> Branches { get; internal set; }
    [NullableAttribute("1")]
[JsonIgnoreAttribute]
private IIgnoreConfiguration GitVersion.Configuration.IGitVersionConfiguration.Ignore { get; }
    [NullableAttribute("1")]
[JsonPropertyNameAttribute("ignore")]
[JsonPropertyDescriptionAttribute("The header property for the ignore configuration.")]
public IgnoreConfiguration Ignore { get; internal set; }
    [CompilerGeneratedAttribute]
private GitVersionConfiguration(GitVersionConfiguration original);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Workflow();
    [CompilerGeneratedAttribute]
internal void set_Workflow(string value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<AssemblyVersioningScheme> get_AssemblyVersioningScheme();
    [CompilerGeneratedAttribute]
internal void set_AssemblyVersioningScheme(Nullable`1<AssemblyVersioningScheme> value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<AssemblyFileVersioningScheme> get_AssemblyFileVersioningScheme();
    [CompilerGeneratedAttribute]
internal void set_AssemblyFileVersioningScheme(Nullable`1<AssemblyFileVersioningScheme> value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_AssemblyInformationalFormat();
    [CompilerGeneratedAttribute]
internal void set_AssemblyInformationalFormat(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_AssemblyVersioningFormat();
    [CompilerGeneratedAttribute]
internal void set_AssemblyVersioningFormat(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_AssemblyFileVersioningFormat();
    [CompilerGeneratedAttribute]
internal void set_AssemblyFileVersioningFormat(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_TagPrefix();
    [CompilerGeneratedAttribute]
internal void set_TagPrefix(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_VersionInBranchPattern();
    [CompilerGeneratedAttribute]
internal void set_VersionInBranchPattern(string value);
    [NullableContextAttribute("1")]
public sealed virtual Regex get_VersionInBranchRegex();
    [NullableContextAttribute("1")]
private string GetVersionInBranchPattern();
    public sealed virtual string get_NextVersion();
    internal void set_NextVersion(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_MajorVersionBumpMessage();
    [CompilerGeneratedAttribute]
internal void set_MajorVersionBumpMessage(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_MinorVersionBumpMessage();
    [CompilerGeneratedAttribute]
internal void set_MinorVersionBumpMessage(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_PatchVersionBumpMessage();
    [CompilerGeneratedAttribute]
internal void set_PatchVersionBumpMessage(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_NoBumpMessage();
    [CompilerGeneratedAttribute]
internal void set_NoBumpMessage(string value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<int> get_TagPreReleaseWeight();
    [CompilerGeneratedAttribute]
internal void set_TagPreReleaseWeight(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_CommitDateFormat();
    [CompilerGeneratedAttribute]
internal void set_CommitDateFormat(string value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_MergeMessageFormats();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
internal void set_MergeMessageFormats(Dictionary`2<string, string> value);
    [NullableContextAttribute("1")]
private sealed virtual override IReadOnlyDictionary`2<string, string> GitVersion.Configuration.IGitVersionConfiguration.get_MergeMessageFormats();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_UpdateBuildNumber();
    [CompilerGeneratedAttribute]
internal void set_UpdateBuildNumber(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual SemanticVersionFormat get_SemanticVersionFormat();
    [CompilerGeneratedAttribute]
internal void set_SemanticVersionFormat(SemanticVersionFormat value);
    private sealed virtual override VersionStrategies GitVersion.Configuration.IGitVersionConfiguration.get_VersionStrategy();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public VersionStrategies[] get_VersionStrategies();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
internal void set_VersionStrategies(VersionStrategies[] value);
    [NullableContextAttribute("1")]
private sealed virtual override IReadOnlyDictionary`2<string, IBranchConfiguration> GitVersion.Configuration.IGitVersionConfiguration.get_Branches();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public Dictionary`2<string, BranchConfiguration> get_Branches();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
internal void set_Branches(Dictionary`2<string, BranchConfiguration> value);
    [NullableContextAttribute("1")]
private sealed virtual override IIgnoreConfiguration GitVersion.Configuration.IGitVersionConfiguration.get_Ignore();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public IgnoreConfiguration get_Ignore();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
internal void set_Ignore(IgnoreConfiguration value);
    [NullableContextAttribute("1")]
public virtual IBranchConfiguration Inherit(IBranchConfiguration configuration);
    [NullableContextAttribute("1")]
public virtual IBranchConfiguration Inherit(EffectiveConfiguration configuration);
    [NullableContextAttribute("1")]
public sealed virtual IBranchConfiguration GetEmptyBranchConfiguration();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual string ToString();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(GitVersionConfiguration left, GitVersionConfiguration right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(GitVersionConfiguration left, GitVersionConfiguration right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(BranchConfiguration other);
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(GitVersionConfiguration other);
    [NullableContextAttribute("1")]
[PreserveBaseOverridesAttribute]
[CompilerGeneratedAttribute]
public virtual override GitVersionConfiguration <Clone>$();
}
public class GitVersion.Configuration.GitVersionConfigurationModule : object {
    [NullableContextAttribute("1")]
public sealed virtual void RegisterTypes(IServiceCollection services);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class GitVersion.Configuration.IgnoreConfiguration : object {
    [CompilerGeneratedAttribute]
private Nullable`1<DateTimeOffset> <Before>k__BackingField;
    [CompilerGeneratedAttribute]
private HashSet`1<string> <Shas>k__BackingField;
    [CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    [JsonIgnoreAttribute]
public Nullable`1<DateTimeOffset> Before { get; public set; }
    [NullableAttribute("2")]
[JsonPropertyNameAttribute("commits-before")]
[JsonPropertyDescriptionAttribute("Commits before this date will be ignored. Format: yyyy-MM-ddTHH:mm:ss.")]
[JsonPropertyFormatAttribute("1")]
public string BeforeString { get; public set; }
    [JsonIgnoreAttribute]
private IReadOnlySet`1<string> GitVersion.Configuration.IIgnoreConfiguration.Shas { get; }
    [JsonPropertyNameAttribute("sha")]
[JsonPropertyDescriptionAttribute("A sequence of SHAs to be excluded from the version calculations.")]
public HashSet`1<string> Shas { get; public set; }
    [CompilerGeneratedAttribute]
protected IgnoreConfiguration(IgnoreConfiguration original);
    [CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<DateTimeOffset> get_Before();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Before(Nullable`1<DateTimeOffset> value);
    [NullableContextAttribute("2")]
public string get_BeforeString();
    [NullableContextAttribute("2")]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_BeforeString(string value);
    private sealed virtual override IReadOnlySet`1<string> GitVersion.Configuration.IIgnoreConfiguration.get_Shas();
    [CompilerGeneratedAttribute]
public HashSet`1<string> get_Shas();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Shas(HashSet`1<string> value);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(IgnoreConfiguration left, IgnoreConfiguration right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(IgnoreConfiguration left, IgnoreConfiguration right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(IgnoreConfiguration other);
    [CompilerGeneratedAttribute]
public virtual IgnoreConfiguration <Clone>$();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class GitVersion.Configuration.IgnoreConfigurationBuilder : object {
    private Nullable`1<DateTimeOffset> before;
    private HashSet`1<string> shas;
    public static IgnoreConfigurationBuilder New { get; }
    public static IgnoreConfigurationBuilder get_New();
    public IgnoreConfigurationBuilder WithBefore(Nullable`1<DateTimeOffset> value);
    public IgnoreConfigurationBuilder WithShas(IEnumerable`1<string> values);
    public IgnoreConfigurationBuilder WithShas(String[] values);
    public IgnoreConfigurationBuilder WithShas(HashSet`1<string> value);
    public IIgnoreConfiguration Build();
}
internal class GitVersion.Configuration.PreventIncrementConfiguration : object {
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <OfMergedBranch>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <WhenBranchMerged>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <WhenCurrentCommitTagged>k__BackingField;
    [JsonPropertyNameAttribute("of-merged-branch")]
[JsonPropertyDescriptionAttribute("Prevent increment when branch merged.")]
public Nullable`1<bool> OfMergedBranch { get; public set; }
    [JsonPropertyNameAttribute("when-branch-merged")]
[JsonPropertyDescriptionAttribute("Prevent increment when branch merged.")]
public Nullable`1<bool> WhenBranchMerged { get; public set; }
    [JsonPropertyNameAttribute("when-current-commit-tagged")]
[JsonPropertyDescriptionAttribute("This branch related property controls the behavior whether to use the tagged (value set to true) or the incremented (value set to false) semantic version. Defaults to true.")]
public Nullable`1<bool> WhenCurrentCommitTagged { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<bool> get_OfMergedBranch();
    [CompilerGeneratedAttribute]
public void set_OfMergedBranch(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<bool> get_WhenBranchMerged();
    [CompilerGeneratedAttribute]
public void set_WhenBranchMerged(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<bool> get_WhenCurrentCommitTagged();
    [CompilerGeneratedAttribute]
public void set_WhenCurrentCommitTagged(Nullable`1<bool> value);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class GitVersion.Configuration.TrunkBasedConfigurationBuilder : ConfigurationBuilderBase`1<TrunkBasedConfigurationBuilder> {
    public static TrunkBasedConfigurationBuilder New { get; }
    public static TrunkBasedConfigurationBuilder get_New();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class GitVersion.Configuration.Workflows.WorkflowManager : object {
    private static string ResourceNameTemplate;
    private static ConfigurationSerializer Serializer { get; }
    private static WorkflowManager();
    private static ConfigurationSerializer get_Serializer();
    private static string DetermineResourceNameTemplate();
    [NullableContextAttribute("2")]
public static IReadOnlyDictionary`2<object, object> GetOverrideConfiguration(string workflow);
    private static string GetResourceName(string workflow);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
