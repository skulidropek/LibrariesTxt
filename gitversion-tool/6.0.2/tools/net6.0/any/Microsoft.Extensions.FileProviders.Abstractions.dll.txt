internal static class FxResources.Microsoft.Extensions.FileProviders.Abstractions.SR : object {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
internal class Microsoft.Extensions.FileProviders.EmptyDisposable : object {
    [CompilerGeneratedAttribute]
private static EmptyDisposable <Instance>k__BackingField;
    public static EmptyDisposable Instance { get; }
    private static EmptyDisposable();
    [CompilerGeneratedAttribute]
public static EmptyDisposable get_Instance();
    public sealed virtual void Dispose();
}
public interface Microsoft.Extensions.FileProviders.IDirectoryContents {
    public bool Exists { get; }
    public abstract virtual bool get_Exists();
}
[NullableContextAttribute("1")]
public interface Microsoft.Extensions.FileProviders.IFileInfo {
    public bool Exists { get; }
    public long Length { get; }
    [NullableAttribute("2")]
public string PhysicalPath { get; }
    public string Name { get; }
    public DateTimeOffset LastModified { get; }
    public bool IsDirectory { get; }
    public abstract virtual bool get_Exists();
    public abstract virtual long get_Length();
    [NullableContextAttribute("2")]
public abstract virtual string get_PhysicalPath();
    public abstract virtual string get_Name();
    public abstract virtual DateTimeOffset get_LastModified();
    public abstract virtual bool get_IsDirectory();
    public abstract virtual Stream CreateReadStream();
}
[NullableContextAttribute("1")]
public interface Microsoft.Extensions.FileProviders.IFileProvider {
    public abstract virtual IFileInfo GetFileInfo(string subpath);
    public abstract virtual IDirectoryContents GetDirectoryContents(string subpath);
    public abstract virtual IChangeToken Watch(string filter);
}
public class Microsoft.Extensions.FileProviders.NotFoundDirectoryContents : object {
    [CompilerGeneratedAttribute]
private static NotFoundDirectoryContents <Singleton>k__BackingField;
    [NullableAttribute("1")]
public static NotFoundDirectoryContents Singleton { get; }
    public bool Exists { get; }
    private static NotFoundDirectoryContents();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public static NotFoundDirectoryContents get_Singleton();
    public sealed virtual bool get_Exists();
    [NullableContextAttribute("1")]
public sealed virtual IEnumerator`1<IFileInfo> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.Extensions.FileProviders.NotFoundFileInfo : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public bool Exists { get; }
    public bool IsDirectory { get; }
    public DateTimeOffset LastModified { get; }
    public long Length { get; }
    public string Name { get; }
    [NullableAttribute("2")]
public string PhysicalPath { get; }
    public NotFoundFileInfo(string name);
    public sealed virtual bool get_Exists();
    public sealed virtual bool get_IsDirectory();
    public sealed virtual DateTimeOffset get_LastModified();
    public sealed virtual long get_Length();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    [NullableContextAttribute("2")]
public sealed virtual string get_PhysicalPath();
    [DoesNotReturnAttribute]
public sealed virtual Stream CreateReadStream();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.Extensions.FileProviders.NullChangeToken : object {
    [CompilerGeneratedAttribute]
private static NullChangeToken <Singleton>k__BackingField;
    public static NullChangeToken Singleton { get; }
    public bool HasChanged { get; }
    public bool ActiveChangeCallbacks { get; }
    private static NullChangeToken();
    [CompilerGeneratedAttribute]
public static NullChangeToken get_Singleton();
    public sealed virtual bool get_HasChanged();
    public sealed virtual bool get_ActiveChangeCallbacks();
    public sealed virtual IDisposable RegisterChangeCallback(Action`1<object> callback, object state);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.Extensions.FileProviders.NullFileProvider : object {
    public sealed virtual IDirectoryContents GetDirectoryContents(string subpath);
    public sealed virtual IFileInfo GetFileInfo(string subpath);
    public sealed virtual IChangeToken Watch(string filter);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.NullablePublicOnlyAttribute : Attribute {
    public bool IncludesInternals;
    public NullablePublicOnlyAttribute(bool );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
[AttributeUsageAttribute("64")]
internal class System.Runtime.InteropServices.LibraryImportAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <LibraryName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EntryPoint>k__BackingField;
    [CompilerGeneratedAttribute]
private StringMarshalling <StringMarshalling>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <StringMarshallingCustomType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SetLastError>k__BackingField;
    public string LibraryName { get; }
    public string EntryPoint { get; public set; }
    public StringMarshalling StringMarshalling { get; public set; }
    public Type StringMarshallingCustomType { get; public set; }
    public bool SetLastError { get; public set; }
    public LibraryImportAttribute(string libraryName);
    [CompilerGeneratedAttribute]
public string get_LibraryName();
    [CompilerGeneratedAttribute]
public string get_EntryPoint();
    [CompilerGeneratedAttribute]
public void set_EntryPoint(string value);
    [CompilerGeneratedAttribute]
public StringMarshalling get_StringMarshalling();
    [CompilerGeneratedAttribute]
public void set_StringMarshalling(StringMarshalling value);
    [CompilerGeneratedAttribute]
public Type get_StringMarshallingCustomType();
    [CompilerGeneratedAttribute]
public void set_StringMarshallingCustomType(Type value);
    [CompilerGeneratedAttribute]
public bool get_SetLastError();
    [CompilerGeneratedAttribute]
public void set_SetLastError(bool value);
}
internal enum System.Runtime.InteropServices.StringMarshalling : Enum {
    public int value__;
    public static StringMarshalling Custom;
    public static StringMarshalling Utf8;
    public static StringMarshalling Utf16;
}
internal static class System.SR : object {
    private static bool s_usingResourceKeys;
    private static ResourceManager s_resourceManager;
    internal static ResourceManager ResourceManager { get; }
    internal static string FileNotExists { get; }
    private static SR();
    internal static bool UsingResourceKeys();
    private static string GetResourceString(string resourceKey);
    private static string GetResourceString(string resourceKey, string defaultString);
    internal static string Format(string resourceFormat, object p1);
    internal static string Format(string resourceFormat, object p1, object p2);
    internal static string Format(string resourceFormat, object p1, object p2, object p3);
    internal static string Format(string resourceFormat, Object[] args);
    internal static string Format(IFormatProvider provider, string resourceFormat, object p1);
    internal static string Format(IFormatProvider provider, string resourceFormat, object p1, object p2);
    internal static string Format(IFormatProvider provider, string resourceFormat, object p1, object p2, object p3);
    internal static string Format(IFormatProvider provider, string resourceFormat, Object[] args);
    internal static ResourceManager get_ResourceManager();
    internal static string get_FileNotExists();
}
