internal static class FxResources.Microsoft.Extensions.Logging.Console.SR : object {
}
internal static class Interop : object {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Configuration.Binder.SourceGeneration", "8.0.9.3103")]
internal static class Microsoft.Extensions.Configuration.Binder.SourceGeneration.<BindingExtensions_g>FC276FD7C89D1ED0B2B3E96BAC8F157FABB86A642EAABC54639B357A857C01D08__BindingExtensions : object {
    private static Lazy`1<HashSet`1<string>> s_configKeys_ConsoleFormatterOptions;
    private static Lazy`1<HashSet`1<string>> s_configKeys_ConsoleLoggerOptions;
    private static Lazy`1<HashSet`1<string>> s_configKeys_JavaScriptEncoder;
    private static Lazy`1<HashSet`1<string>> s_configKeys_JsonWriterOptions;
    private static Lazy`1<HashSet`1<string>> s_configKeys_JsonConsoleFormatterOptions;
    private static Lazy`1<HashSet`1<string>> s_configKeys_SimpleConsoleFormatterOptions;
    private static <BindingExtensions_g>FC276FD7C89D1ED0B2B3E96BAC8F157FABB86A642EAABC54639B357A857C01D08__BindingExtensions();
    [ExtensionAttribute]
[<BindingExtensions_g>FC276FD7C89D1ED0B2B3E96BAC8F157FABB86A642EAABC54639B357A857C01D08__InterceptsLocationAttribute("/_/src/libraries/Microsoft.Extensions.Logging.Console/src/ConsoleFormatterOptions.cs", "35", "88")]
public static void Bind_ConsoleFormatterOptions(IConfiguration configuration, object instance);
    [ExtensionAttribute]
[<BindingExtensions_g>FC276FD7C89D1ED0B2B3E96BAC8F157FABB86A642EAABC54639B357A857C01D08__InterceptsLocationAttribute("/_/src/libraries/Microsoft.Extensions.Logging.Console/src/ConsoleLoggerConfigureOptions.cs", "29", "79")]
[<BindingExtensions_g>FC276FD7C89D1ED0B2B3E96BAC8F157FABB86A642EAABC54639B357A857C01D08__InterceptsLocationAttribute("/_/src/libraries/Microsoft.Extensions.Logging.Console/src/ConsoleLoggerExtensions.Obsolete.cs", "146", "51")]
public static void Bind_ConsoleLoggerOptions(IConfiguration configuration, object instance);
    [ExtensionAttribute]
[<BindingExtensions_g>FC276FD7C89D1ED0B2B3E96BAC8F157FABB86A642EAABC54639B357A857C01D08__InterceptsLocationAttribute("/_/src/libraries/Microsoft.Extensions.Logging.Console/src/JsonConsoleFormatterOptions.cs", "26", "89")]
public static void Bind_JsonConsoleFormatterOptions(IConfiguration configuration, object instance);
    [ExtensionAttribute]
[<BindingExtensions_g>FC276FD7C89D1ED0B2B3E96BAC8F157FABB86A642EAABC54639B357A857C01D08__InterceptsLocationAttribute("/_/src/libraries/Microsoft.Extensions.Logging.Console/src/SimpleConsoleFormatterOptions.cs", "28", "89")]
public static void Bind_SimpleConsoleFormatterOptions(IConfiguration configuration, object instance);
    public static void BindCore(IConfiguration configuration, ConsoleFormatterOptions& instance, bool defaultValueIfNotFound, BinderOptions binderOptions);
    public static void BindCore(IConfiguration configuration, ConsoleLoggerOptions& instance, bool defaultValueIfNotFound, BinderOptions binderOptions);
    public static void BindCore(IConfiguration configuration, JavaScriptEncoder& instance, bool defaultValueIfNotFound, BinderOptions binderOptions);
    public static void BindCore(IConfiguration configuration, JsonWriterOptions& instance, bool defaultValueIfNotFound, BinderOptions binderOptions);
    public static void BindCore(IConfiguration configuration, JsonConsoleFormatterOptions& instance, bool defaultValueIfNotFound, BinderOptions binderOptions);
    public static void BindCore(IConfiguration configuration, SimpleConsoleFormatterOptions& instance, bool defaultValueIfNotFound, BinderOptions binderOptions);
    public static void ValidateConfigurationKeys(Type type, Lazy`1<HashSet`1<string>> keys, IConfiguration configuration, BinderOptions binderOptions);
    public static IConfiguration AsConfigWithChildren(IConfiguration configuration);
    public static bool ParseBool(string value, Func`1<string> getPath);
    [NullableContextAttribute("0")]
public static T ParseEnum(string value, Func`1<string> getPath);
    public static int ParseInt(string value, Func`1<string> getPath);
}
internal class Microsoft.Extensions.Logging.Console.AnsiLogConsole : object {
    private TextWriter _textWriter;
    public AnsiLogConsole(bool stdErr);
    [NullableContextAttribute("1")]
public sealed virtual void Write(string message);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Extensions.Logging.Console.AnsiParser : object {
    private Action`5<string, int, int, Nullable`1<ConsoleColor>, Nullable`1<ConsoleColor>> _onParseWrite;
    internal static string DefaultForegroundColor;
    internal static string DefaultBackgroundColor;
    public AnsiParser(Action`5<string, int, int, Nullable`1<ConsoleColor>, Nullable`1<ConsoleColor>> onParseWrite);
    public void Parse(string message);
    private static bool IsDigit(char c);
    internal static string GetForegroundColorEscapeCode(ConsoleColor color);
    internal static string GetBackgroundColorEscapeCode(ConsoleColor color);
    private static bool TryGetForegroundColor(int number, bool isBright, Nullable`1& color);
    private static bool TryGetBackgroundColor(int number, Nullable`1& color);
}
[UnsupportedOSPlatformAttribute("android")]
[UnsupportedOSPlatformAttribute("browser")]
[UnsupportedOSPlatformAttribute("ios")]
[UnsupportedOSPlatformAttribute("tvos")]
internal class Microsoft.Extensions.Logging.Console.AnsiParsingLogConsole : object {
    private TextWriter _textWriter;
    private AnsiParser _parser;
    public AnsiParsingLogConsole(bool stdErr);
    [NullableContextAttribute("1")]
public sealed virtual void Write(string message);
    private static bool SetColor(Nullable`1<ConsoleColor> background, Nullable`1<ConsoleColor> foreground);
    private static bool SetBackgroundColor(Nullable`1<ConsoleColor> background);
    private static bool SetForegroundColor(Nullable`1<ConsoleColor> foreground);
    private static void ResetColor();
    private void WriteToConsole(string message, int startIndex, int length, Nullable`1<ConsoleColor> background, Nullable`1<ConsoleColor> foreground);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[EditorBrowsableAttribute("1")]
[ObsoleteAttribute("This type is retained only for compatibility. The recommended alternative is ConsoleLoggerOptions.")]
public class Microsoft.Extensions.Logging.Console.ConfigurationConsoleLoggerSettings : object {
    internal IConfiguration _configuration;
    [CompilerGeneratedAttribute]
private IChangeToken <ChangeToken>k__BackingField;
    [NullableAttribute("2")]
public IChangeToken ChangeToken { get; private set; }
    public bool IncludeScopes { get; }
    public ConfigurationConsoleLoggerSettings(IConfiguration configuration);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual IChangeToken get_ChangeToken();
    [CompilerGeneratedAttribute]
private void set_ChangeToken(IChangeToken value);
    public sealed virtual bool get_IncludeScopes();
    public sealed virtual IConsoleLoggerSettings Reload();
    public sealed virtual bool TryGetSwitch(string name, LogLevel& level);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Microsoft.Extensions.Logging.Console.ConsoleFormatter : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Name { get; }
    protected ConsoleFormatter(string name);
    [CompilerGeneratedAttribute]
public string get_Name();
    [NullableContextAttribute("2")]
public abstract virtual void Write(LogEntry`1& modreq(System.Runtime.InteropServices.InAttribute) logEntry, IExternalScopeProvider scopeProvider, TextWriter textWriter);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Microsoft.Extensions.Logging.Console.ConsoleFormatterNames : object {
    public static string Simple;
    public static string Json;
    public static string Systemd;
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.Extensions.Logging.Console.ConsoleFormatterOptions : object {
    [CompilerGeneratedAttribute]
private bool <IncludeScopes>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TimestampFormat>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseUtcTimestamp>k__BackingField;
    public bool IncludeScopes { get; public set; }
    [StringSyntaxAttribute("DateTimeFormat")]
public string TimestampFormat { get; public set; }
    public bool UseUtcTimestamp { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_IncludeScopes();
    [CompilerGeneratedAttribute]
public void set_IncludeScopes(bool value);
    [CompilerGeneratedAttribute]
public string get_TimestampFormat();
    [CompilerGeneratedAttribute]
public void set_TimestampFormat(string value);
    [CompilerGeneratedAttribute]
public bool get_UseUtcTimestamp();
    [CompilerGeneratedAttribute]
public void set_UseUtcTimestamp(bool value);
    [NullableContextAttribute("1")]
internal virtual void Configure(IConfiguration configuration);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[UnsupportedOSPlatformAttribute("browser")]
internal class Microsoft.Extensions.Logging.Console.ConsoleLogger : object {
    private string _name;
    private ConsoleLoggerProcessor _queueProcessor;
    [CompilerGeneratedAttribute]
private ConsoleFormatter <Formatter>k__BackingField;
    [CompilerGeneratedAttribute]
private IExternalScopeProvider <ScopeProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private ConsoleLoggerOptions <Options>k__BackingField;
    [ThreadStaticAttribute]
private static StringWriter t_stringWriter;
    internal ConsoleFormatter Formatter { get; internal set; }
    [NullableAttribute("2")]
internal IExternalScopeProvider ScopeProvider { get; internal set; }
    internal ConsoleLoggerOptions Options { get; internal set; }
    internal ConsoleLogger(string name, ConsoleLoggerProcessor loggerProcessor, ConsoleFormatter formatter, IExternalScopeProvider scopeProvider, ConsoleLoggerOptions options);
    [CompilerGeneratedAttribute]
internal ConsoleFormatter get_Formatter();
    [CompilerGeneratedAttribute]
internal void set_Formatter(ConsoleFormatter value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal IExternalScopeProvider get_ScopeProvider();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal void set_ScopeProvider(IExternalScopeProvider value);
    [CompilerGeneratedAttribute]
internal ConsoleLoggerOptions get_Options();
    [CompilerGeneratedAttribute]
internal void set_Options(ConsoleLoggerOptions value);
    [NullableContextAttribute("2")]
public sealed virtual void Log(LogLevel logLevel, EventId eventId, TState state, Exception exception, Func`3<TState, Exception, string> formatter);
    public sealed virtual bool IsEnabled(LogLevel logLevel);
    public sealed virtual IDisposable BeginScope(TState state);
}
[ObsoleteAttribute("ConsoleLoggerFormat has been deprecated.")]
public enum Microsoft.Extensions.Logging.Console.ConsoleLoggerFormat : Enum {
    public int value__;
    public static ConsoleLoggerFormat Default;
    public static ConsoleLoggerFormat Systemd;
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.Extensions.Logging.Console.ConsoleLoggerOptions : object {
    [CompilerGeneratedAttribute]
private bool <DisableColors>k__BackingField;
    private ConsoleLoggerFormat _format;
    [CompilerGeneratedAttribute]
private string <FormatterName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IncludeScopes>k__BackingField;
    [CompilerGeneratedAttribute]
private LogLevel <LogToStandardErrorThreshold>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TimestampFormat>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseUtcTimestamp>k__BackingField;
    private ConsoleLoggerQueueFullMode _queueFullMode;
    internal static int DefaultMaxQueueLengthValue;
    private int _maxQueuedMessages;
    [ObsoleteAttribute("ConsoleLoggerOptions.DisableColors has been deprecated. Use SimpleConsoleFormatterOptions.ColorBehavior instead.")]
public bool DisableColors { get; public set; }
    [ObsoleteAttribute("ConsoleLoggerOptions.Format has been deprecated. Use ConsoleLoggerOptions.FormatterName instead.")]
public ConsoleLoggerFormat Format { get; public set; }
    public string FormatterName { get; public set; }
    [ObsoleteAttribute("ConsoleLoggerOptions.IncludeScopes has been deprecated. Use ConsoleFormatterOptions.IncludeScopes instead.")]
public bool IncludeScopes { get; public set; }
    public LogLevel LogToStandardErrorThreshold { get; public set; }
    [ObsoleteAttribute("ConsoleLoggerOptions.TimestampFormat has been deprecated. Use ConsoleFormatterOptions.TimestampFormat instead.")]
public string TimestampFormat { get; public set; }
    [ObsoleteAttribute("ConsoleLoggerOptions.UseUtcTimestamp has been deprecated. Use ConsoleFormatterOptions.UseUtcTimestamp instead.")]
public bool UseUtcTimestamp { get; public set; }
    public ConsoleLoggerQueueFullMode QueueFullMode { get; public set; }
    public int MaxQueueLength { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_DisableColors();
    [CompilerGeneratedAttribute]
public void set_DisableColors(bool value);
    public ConsoleLoggerFormat get_Format();
    public void set_Format(ConsoleLoggerFormat value);
    [CompilerGeneratedAttribute]
public string get_FormatterName();
    [CompilerGeneratedAttribute]
public void set_FormatterName(string value);
    [CompilerGeneratedAttribute]
public bool get_IncludeScopes();
    [CompilerGeneratedAttribute]
public void set_IncludeScopes(bool value);
    [CompilerGeneratedAttribute]
public LogLevel get_LogToStandardErrorThreshold();
    [CompilerGeneratedAttribute]
public void set_LogToStandardErrorThreshold(LogLevel value);
    [CompilerGeneratedAttribute]
public string get_TimestampFormat();
    [CompilerGeneratedAttribute]
public void set_TimestampFormat(string value);
    [CompilerGeneratedAttribute]
public bool get_UseUtcTimestamp();
    [CompilerGeneratedAttribute]
public void set_UseUtcTimestamp(bool value);
    public ConsoleLoggerQueueFullMode get_QueueFullMode();
    public void set_QueueFullMode(ConsoleLoggerQueueFullMode value);
    public int get_MaxQueueLength();
    public void set_MaxQueueLength(int value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[UnsupportedOSPlatformAttribute("browser")]
internal class Microsoft.Extensions.Logging.Console.ConsoleLoggerProcessor : object {
    private Queue`1<LogMessageEntry> _messageQueue;
    private Int32 modreq(System.Runtime.CompilerServices.IsVolatile) _messagesDropped;
    private bool _isAddingCompleted;
    private int _maxQueuedMessages;
    private ConsoleLoggerQueueFullMode _fullMode;
    private Thread _outputThread;
    [CompilerGeneratedAttribute]
private IConsole <Console>k__BackingField;
    [CompilerGeneratedAttribute]
private IConsole <ErrorConsole>k__BackingField;
    public int MaxQueueLength { get; public set; }
    public ConsoleLoggerQueueFullMode FullMode { get; public set; }
    public IConsole Console { get; }
    public IConsole ErrorConsole { get; }
    public ConsoleLoggerProcessor(IConsole console, IConsole errorConsole, ConsoleLoggerQueueFullMode fullMode, int maxQueueLength);
    public int get_MaxQueueLength();
    public void set_MaxQueueLength(int value);
    public ConsoleLoggerQueueFullMode get_FullMode();
    public void set_FullMode(ConsoleLoggerQueueFullMode value);
    [CompilerGeneratedAttribute]
public IConsole get_Console();
    [CompilerGeneratedAttribute]
public IConsole get_ErrorConsole();
    public virtual void EnqueueMessage(LogMessageEntry message);
    internal void WriteMessage(LogMessageEntry entry);
    private void ProcessLogQueue();
    public bool Enqueue(LogMessageEntry item);
    public bool TryDequeue(LogMessageEntry& item);
    public sealed virtual void Dispose();
    private void CompleteAdding();
}
[UnsupportedOSPlatformAttribute("browser")]
[ProviderAliasAttribute("Console")]
public class Microsoft.Extensions.Logging.Console.ConsoleLoggerProvider : object {
    private IOptionsMonitor`1<ConsoleLoggerOptions> _options;
    private ConcurrentDictionary`2<string, ConsoleLogger> _loggers;
    private ConcurrentDictionary`2<string, ConsoleFormatter> _formatters;
    private ConsoleLoggerProcessor _messageQueue;
    private IDisposable _optionsReloadToken;
    private IExternalScopeProvider _scopeProvider;
    [NullableContextAttribute("1")]
public ConsoleLoggerProvider(IOptionsMonitor`1<ConsoleLoggerOptions> options);
    [NullableContextAttribute("1")]
public ConsoleLoggerProvider(IOptionsMonitor`1<ConsoleLoggerOptions> options, IEnumerable`1<ConsoleFormatter> formatters);
    [UnsupportedOSPlatformGuardAttribute("windows")]
private static bool DoesConsoleSupportAnsi();
    [MemberNotNullAttribute("_formatters")]
private void SetFormatters(IEnumerable`1<ConsoleFormatter> formatters);
    private void ReloadLoggerOptions(ConsoleLoggerOptions options);
    [NullableContextAttribute("1")]
public sealed virtual ILogger CreateLogger(string name);
    private static void UpdateFormatterOptions(ConsoleFormatter formatter, ConsoleLoggerOptions deprecatedFromOptions);
    public sealed virtual void Dispose();
    [NullableContextAttribute("1")]
public sealed virtual void SetScopeProvider(IExternalScopeProvider scopeProvider);
}
public enum Microsoft.Extensions.Logging.Console.ConsoleLoggerQueueFullMode : Enum {
    public int value__;
    public static ConsoleLoggerQueueFullMode Wait;
    public static ConsoleLoggerQueueFullMode DropWrite;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[EditorBrowsableAttribute("1")]
[ObsoleteAttribute("This type is retained only for compatibility. The recommended alternative is ConsoleLoggerOptions.", "True")]
public class Microsoft.Extensions.Logging.Console.ConsoleLoggerSettings : object {
    [CompilerGeneratedAttribute]
private IChangeToken <ChangeToken>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IncludeScopes>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DisableColors>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, LogLevel> <Switches>k__BackingField;
    [NullableAttribute("2")]
public IChangeToken ChangeToken { get; public set; }
    public bool IncludeScopes { get; public set; }
    public bool DisableColors { get; public set; }
    public IDictionary`2<string, LogLevel> Switches { get; public set; }
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual IChangeToken get_ChangeToken();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_ChangeToken(IChangeToken value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IncludeScopes();
    [CompilerGeneratedAttribute]
public void set_IncludeScopes(bool value);
    [CompilerGeneratedAttribute]
public bool get_DisableColors();
    [CompilerGeneratedAttribute]
public void set_DisableColors(bool value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, LogLevel> get_Switches();
    [CompilerGeneratedAttribute]
public void set_Switches(IDictionary`2<string, LogLevel> value);
    public sealed virtual IConsoleLoggerSettings Reload();
    public sealed virtual bool TryGetSwitch(string name, LogLevel& level);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Extensions.Logging.Console.FormatterOptionsMonitor`1 : object {
    private TOptions _options;
    public TOptions CurrentValue { get; }
    public FormatterOptionsMonitor`1(TOptions options);
    public sealed virtual TOptions Get(string name);
    public sealed virtual IDisposable OnChange(Action`2<TOptions, string> listener);
    public sealed virtual TOptions get_CurrentValue();
}
[NullableContextAttribute("1")]
internal interface Microsoft.Extensions.Logging.Console.IConsole {
    public abstract virtual void Write(string message);
}
[NullableContextAttribute("1")]
[EditorBrowsableAttribute("1")]
[ObsoleteAttribute("This type is retained only for compatibility. The recommended alternative is ConsoleLoggerOptions.", "True")]
public interface Microsoft.Extensions.Logging.Console.IConsoleLoggerSettings {
    public bool IncludeScopes { get; }
    [NullableAttribute("2")]
public IChangeToken ChangeToken { get; }
    public abstract virtual bool get_IncludeScopes();
    [NullableContextAttribute("2")]
public abstract virtual IChangeToken get_ChangeToken();
    public abstract virtual bool TryGetSwitch(string name, LogLevel& level);
    public abstract virtual IConsoleLoggerSettings Reload();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Extensions.Logging.Console.JsonConsoleFormatter : ConsoleFormatter {
    private IDisposable _optionsReloadToken;
    [CompilerGeneratedAttribute]
private JsonConsoleFormatterOptions <FormatterOptions>k__BackingField;
    internal JsonConsoleFormatterOptions FormatterOptions { get; internal set; }
    public JsonConsoleFormatter(IOptionsMonitor`1<JsonConsoleFormatterOptions> options);
    [NullableContextAttribute("2")]
public virtual void Write(LogEntry`1& modreq(System.Runtime.InteropServices.InAttribute) logEntry, IExternalScopeProvider scopeProvider, TextWriter textWriter);
    private static string GetLogLevelString(LogLevel logLevel);
    private void WriteScopeInformation(Utf8JsonWriter writer, IExternalScopeProvider scopeProvider);
    private static void WriteItem(Utf8JsonWriter writer, KeyValuePair`2<string, object> item);
    private static string ToInvariantString(object obj);
    [CompilerGeneratedAttribute]
internal JsonConsoleFormatterOptions get_FormatterOptions();
    [CompilerGeneratedAttribute]
internal void set_FormatterOptions(JsonConsoleFormatterOptions value);
    [MemberNotNullAttribute("FormatterOptions")]
private void ReloadLoggerOptions(JsonConsoleFormatterOptions options);
    public sealed virtual void Dispose();
}
public class Microsoft.Extensions.Logging.Console.JsonConsoleFormatterOptions : ConsoleFormatterOptions {
    [CompilerGeneratedAttribute]
private JsonWriterOptions <JsonWriterOptions>k__BackingField;
    public JsonWriterOptions JsonWriterOptions { get; public set; }
    [CompilerGeneratedAttribute]
public JsonWriterOptions get_JsonWriterOptions();
    [CompilerGeneratedAttribute]
public void set_JsonWriterOptions(JsonWriterOptions value);
    [NullableContextAttribute("1")]
internal virtual void Configure(IConfiguration configuration);
}
public enum Microsoft.Extensions.Logging.Console.LoggerColorBehavior : Enum {
    public int value__;
    public static LoggerColorBehavior Default;
    public static LoggerColorBehavior Enabled;
    public static LoggerColorBehavior Disabled;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
internal class Microsoft.Extensions.Logging.Console.LogMessageEntry : ValueType {
    public string Message;
    public bool LogAsError;
    public LogMessageEntry(string message, bool logAsError);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Extensions.Logging.Console.SimpleConsoleFormatter : ConsoleFormatter {
    private static string LoglevelPadding;
    private static string _messagePadding;
    private static string _newLineWithMessagePadding;
    private IDisposable _optionsReloadToken;
    [CompilerGeneratedAttribute]
private SimpleConsoleFormatterOptions <FormatterOptions>k__BackingField;
    private static bool IsAndroidOrAppleMobile { get; }
    internal SimpleConsoleFormatterOptions FormatterOptions { get; internal set; }
    public SimpleConsoleFormatter(IOptionsMonitor`1<SimpleConsoleFormatterOptions> options);
    private static SimpleConsoleFormatter();
    private static bool get_IsAndroidOrAppleMobile();
    [MemberNotNullAttribute("FormatterOptions")]
private void ReloadLoggerOptions(SimpleConsoleFormatterOptions options);
    public sealed virtual void Dispose();
    [CompilerGeneratedAttribute]
internal SimpleConsoleFormatterOptions get_FormatterOptions();
    [CompilerGeneratedAttribute]
internal void set_FormatterOptions(SimpleConsoleFormatterOptions value);
    [NullableContextAttribute("2")]
public virtual void Write(LogEntry`1& modreq(System.Runtime.InteropServices.InAttribute) logEntry, IExternalScopeProvider scopeProvider, TextWriter textWriter);
    private void CreateDefaultLogMessage(TextWriter textWriter, LogEntry`1& logEntry, string message, IExternalScopeProvider scopeProvider);
    private static void WriteMessage(TextWriter textWriter, string message, bool singleLine);
    private DateTimeOffset GetCurrentDateTime();
    private static string GetLogLevelString(LogLevel logLevel);
    private ConsoleColors GetLogLevelConsoleColors(LogLevel logLevel);
    private void WriteScopeInformation(TextWriter textWriter, IExternalScopeProvider scopeProvider, bool singleLine);
    [CompilerGeneratedAttribute]
internal static void <WriteMessage>g__WriteReplacing|15_0(TextWriter writer, string oldValue, string newValue, string message);
}
public class Microsoft.Extensions.Logging.Console.SimpleConsoleFormatterOptions : ConsoleFormatterOptions {
    [CompilerGeneratedAttribute]
private LoggerColorBehavior <ColorBehavior>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SingleLine>k__BackingField;
    public LoggerColorBehavior ColorBehavior { get; public set; }
    public bool SingleLine { get; public set; }
    [CompilerGeneratedAttribute]
public LoggerColorBehavior get_ColorBehavior();
    [CompilerGeneratedAttribute]
public void set_ColorBehavior(LoggerColorBehavior value);
    [CompilerGeneratedAttribute]
public bool get_SingleLine();
    [CompilerGeneratedAttribute]
public void set_SingleLine(bool value);
    [NullableContextAttribute("1")]
internal virtual void Configure(IConfiguration configuration);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Extensions.Logging.Console.SystemdConsoleFormatter : ConsoleFormatter {
    private IDisposable _optionsReloadToken;
    [CompilerGeneratedAttribute]
private ConsoleFormatterOptions <FormatterOptions>k__BackingField;
    internal ConsoleFormatterOptions FormatterOptions { get; internal set; }
    public SystemdConsoleFormatter(IOptionsMonitor`1<ConsoleFormatterOptions> options);
    [MemberNotNullAttribute("FormatterOptions")]
private void ReloadLoggerOptions(ConsoleFormatterOptions options);
    public sealed virtual void Dispose();
    [CompilerGeneratedAttribute]
internal ConsoleFormatterOptions get_FormatterOptions();
    [CompilerGeneratedAttribute]
internal void set_FormatterOptions(ConsoleFormatterOptions value);
    [NullableContextAttribute("2")]
public virtual void Write(LogEntry`1& modreq(System.Runtime.InteropServices.InAttribute) logEntry, IExternalScopeProvider scopeProvider, TextWriter textWriter);
    private DateTimeOffset GetCurrentDateTime();
    private static string GetSyslogSeverityString(LogLevel logLevel);
    private void WriteScopeInformation(TextWriter textWriter, IExternalScopeProvider scopeProvider);
    [CompilerGeneratedAttribute]
internal static void <Write>g__WriteReplacingNewLine|8_0(TextWriter writer, string message);
}
[ExtensionAttribute]
internal static class Microsoft.Extensions.Logging.Console.TextWriterExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static void WriteColoredMessage(TextWriter textWriter, string message, Nullable`1<ConsoleColor> background, Nullable`1<ConsoleColor> foreground);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Extensions.Logging.ConsoleFormatterConfigureOptions : object {
    private IConfiguration _configuration;
    [UnsupportedOSPlatformAttribute("browser")]
public ConsoleFormatterConfigureOptions(ILoggerProviderConfiguration`1<ConsoleLoggerProvider> providerConfiguration);
    public sealed virtual void Configure(ConsoleFormatterOptions options);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Extensions.Logging.ConsoleLoggerConfigureOptions : object {
    private IConfiguration _configuration;
    [UnsupportedOSPlatformAttribute("browser")]
public ConsoleLoggerConfigureOptions(ILoggerProviderConfiguration`1<ConsoleLoggerProvider> providerConfiguration);
    public sealed virtual void Configure(ConsoleLoggerOptions options);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
[UnsupportedOSPlatformAttribute("browser")]
public static class Microsoft.Extensions.Logging.ConsoleLoggerExtensions : object {
    internal static string RequiresDynamicCodeMessage;
    internal static string TrimmingRequiresUnreferencedCodeMessage;
    [ExtensionAttribute]
public static ILoggingBuilder AddConsole(ILoggingBuilder builder);
    [ExtensionAttribute]
public static ILoggingBuilder AddConsole(ILoggingBuilder builder, Action`1<ConsoleLoggerOptions> configure);
    [ExtensionAttribute]
public static ILoggingBuilder AddSimpleConsole(ILoggingBuilder builder);
    [ExtensionAttribute]
public static ILoggingBuilder AddSimpleConsole(ILoggingBuilder builder, Action`1<SimpleConsoleFormatterOptions> configure);
    [ExtensionAttribute]
public static ILoggingBuilder AddJsonConsole(ILoggingBuilder builder);
    [ExtensionAttribute]
public static ILoggingBuilder AddJsonConsole(ILoggingBuilder builder, Action`1<JsonConsoleFormatterOptions> configure);
    [ExtensionAttribute]
public static ILoggingBuilder AddSystemdConsole(ILoggingBuilder builder, Action`1<ConsoleFormatterOptions> configure);
    [ExtensionAttribute]
public static ILoggingBuilder AddSystemdConsole(ILoggingBuilder builder);
    [ExtensionAttribute]
internal static ILoggingBuilder AddConsoleWithFormatter(ILoggingBuilder builder, string name, Action`1<TOptions> configure);
    [ExtensionAttribute]
private static ILoggingBuilder AddFormatterWithName(ILoggingBuilder builder, string name);
    [ExtensionAttribute]
[RequiresDynamicCodeAttribute("Binding TOptions to configuration values may require generating dynamic code at runtime.")]
[RequiresUnreferencedCodeAttribute("TOptions's dependent types may have their members trimmed. Ensure all required members are preserved.")]
public static ILoggingBuilder AddConsoleFormatter(ILoggingBuilder builder);
    [ExtensionAttribute]
[RequiresDynamicCodeAttribute("Binding TOptions to configuration values may require generating dynamic code at runtime.")]
[RequiresUnreferencedCodeAttribute("TOptions's dependent types may have their members trimmed. Ensure all required members are preserved.")]
public static ILoggingBuilder AddConsoleFormatter(ILoggingBuilder builder, Action`1<TOptions> configure);
    [ExtensionAttribute]
private static ILoggingBuilder AddConsoleFormatter(ILoggingBuilder builder);
    [ExtensionAttribute]
internal static IConfiguration GetFormatterOptionsSection(ILoggerProviderConfiguration`1<ConsoleLoggerProvider> providerConfiguration);
    [ExtensionAttribute]
[EditorBrowsableAttribute("1")]
[ObsoleteAttribute("This method is retained only for compatibility. The recommended alternative is AddConsole(this ILoggingBuilder builder).", "True")]
public static ILoggerFactory AddConsole(ILoggerFactory factory, IConfiguration configuration);
    [ExtensionAttribute]
[EditorBrowsableAttribute("1")]
[ObsoleteAttribute("This method is retained only for compatibility. The recommended alternative is AddConsole(this ILoggingBuilder builder).", "True")]
public static ILoggerFactory AddConsole(ILoggerFactory factory, IConsoleLoggerSettings settings);
    [ExtensionAttribute]
[EditorBrowsableAttribute("1")]
[ObsoleteAttribute("This method is retained only for compatibility. The recommended alternative is AddConsole(this ILoggingBuilder builder).", "True")]
public static ILoggerFactory AddConsole(ILoggerFactory factory, LogLevel minLevel, bool includeScopes);
    [ExtensionAttribute]
[EditorBrowsableAttribute("1")]
[ObsoleteAttribute("This method is retained only for compatibility. The recommended alternative is AddConsole(this ILoggingBuilder builder).", "True")]
public static ILoggerFactory AddConsole(ILoggerFactory factory, LogLevel minLevel);
    [ExtensionAttribute]
[EditorBrowsableAttribute("1")]
[ObsoleteAttribute("This method is retained only for compatibility. The recommended alternative is AddConsole(this ILoggingBuilder builder).", "True")]
public static ILoggerFactory AddConsole(ILoggerFactory factory, bool includeScopes);
    [ExtensionAttribute]
[EditorBrowsableAttribute("1")]
[ObsoleteAttribute("This method is retained only for compatibility. The recommended alternative is AddConsole(this ILoggingBuilder builder).", "True")]
public static ILoggerFactory AddConsole(ILoggerFactory factory, Func`3<string, LogLevel, bool> filter, bool includeScopes);
    [ExtensionAttribute]
[EditorBrowsableAttribute("1")]
[ObsoleteAttribute("This method is retained only for compatibility. The recommended alternative is AddConsole(this ILoggingBuilder builder).", "True")]
public static ILoggerFactory AddConsole(ILoggerFactory factory, Func`3<string, LogLevel, bool> filter);
    [ExtensionAttribute]
[EditorBrowsableAttribute("1")]
[ObsoleteAttribute("This method is retained only for compatibility. The recommended alternative is AddConsole(this ILoggingBuilder builder).", "True")]
public static ILoggerFactory AddConsole(ILoggerFactory factory);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[UnsupportedOSPlatformAttribute("browser")]
internal class Microsoft.Extensions.Logging.ConsoleLoggerFormatterConfigureOptions`2 : ConfigureFromConfigurationOptions`1<TOptions> {
    [RequiresDynamicCodeAttribute("Binding TOptions to configuration values may require generating dynamic code at runtime.")]
[RequiresUnreferencedCodeAttribute("TOptions's dependent types may have their members trimmed. Ensure all required members are preserved.")]
public ConsoleLoggerFormatterConfigureOptions`2(ILoggerProviderConfiguration`1<ConsoleLoggerProvider> providerConfiguration);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[UnsupportedOSPlatformAttribute("browser")]
internal class Microsoft.Extensions.Logging.ConsoleLoggerFormatterOptionsChangeTokenSource`2 : ConfigurationChangeTokenSource`1<TOptions> {
    public ConsoleLoggerFormatterOptionsChangeTokenSource`2(ILoggerProviderConfiguration`1<ConsoleLoggerProvider> providerConfiguration);
}
internal class Microsoft.Extensions.Logging.NullExternalScopeProvider : object {
    [CompilerGeneratedAttribute]
private static IExternalScopeProvider <Instance>k__BackingField;
    [NullableAttribute("1")]
public static IExternalScopeProvider Instance { get; }
    private static NullExternalScopeProvider();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public static IExternalScopeProvider get_Instance();
    private sealed virtual override void Microsoft.Extensions.Logging.IExternalScopeProvider.ForEachScope(Action`2<object, TState> callback, TState state);
    private sealed virtual override IDisposable Microsoft.Extensions.Logging.IExternalScopeProvider.Push(object state);
}
internal class Microsoft.Extensions.Logging.NullScope : object {
    [CompilerGeneratedAttribute]
private static NullScope <Instance>k__BackingField;
    [NullableAttribute("1")]
public static NullScope Instance { get; }
    private static NullScope();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public static NullScope get_Instance();
    public sealed virtual void Dispose();
}
internal static class System.ConsoleUtils : object {
    private static Int32 modreq(System.Runtime.CompilerServices.IsVolatile) s_emitAnsiColorCodes;
    public static bool EmitAnsiColorCodes { get; }
    private static ConsoleUtils();
    public static bool get_EmitAnsiColorCodes();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("100")]
internal class System.Diagnostics.CodeAnalysis.RequiresDynamicCodeAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    public string Message { get; }
    [NullableAttribute("2")]
public string Url { get; public set; }
    public RequiresDynamicCodeAttribute(string message);
    [CompilerGeneratedAttribute]
public string get_Message();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_Url();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Url(string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("2432")]
internal class System.Diagnostics.CodeAnalysis.StringSyntaxAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Syntax>k__BackingField;
    [CompilerGeneratedAttribute]
private Object[] <Arguments>k__BackingField;
    public static string CompositeFormat;
    public static string DateOnlyFormat;
    public static string DateTimeFormat;
    public static string EnumFormat;
    public static string GuidFormat;
    public static string Json;
    public static string NumericFormat;
    public static string Regex;
    public static string TimeOnlyFormat;
    public static string TimeSpanFormat;
    public static string Uri;
    public static string Xml;
    public string Syntax { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Object[] Arguments { get; }
    public StringSyntaxAttribute(string syntax);
    public StringSyntaxAttribute(string syntax, Object[] arguments);
    [CompilerGeneratedAttribute]
public string get_Syntax();
    [CompilerGeneratedAttribute]
public Object[] get_Arguments();
}
[GeneratedCodeAttribute("Microsoft.Extensions.Configuration.Binder.SourceGeneration", "8.0.9.3103")]
[AttributeUsageAttribute("64")]
internal class System.Runtime.CompilerServices.<BindingExtensions_g>FC276FD7C89D1ED0B2B3E96BAC8F157FABB86A642EAABC54639B357A857C01D08__InterceptsLocationAttribute : Attribute {
    [NullableContextAttribute("1")]
public <BindingExtensions_g>FC276FD7C89D1ED0B2B3E96BAC8F157FABB86A642EAABC54639B357A857C01D08__InterceptsLocationAttribute(string filePath, int line, int column);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.NullablePublicOnlyAttribute : Attribute {
    public bool IncludesInternals;
    public NullablePublicOnlyAttribute(bool );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[AttributeUsageAttribute("64")]
internal class System.Runtime.InteropServices.LibraryImportAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <LibraryName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EntryPoint>k__BackingField;
    [CompilerGeneratedAttribute]
private StringMarshalling <StringMarshalling>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <StringMarshallingCustomType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SetLastError>k__BackingField;
    [NullableAttribute("1")]
public string LibraryName { get; }
    public string EntryPoint { get; public set; }
    public StringMarshalling StringMarshalling { get; public set; }
    public Type StringMarshallingCustomType { get; public set; }
    public bool SetLastError { get; public set; }
    [NullableContextAttribute("1")]
public LibraryImportAttribute(string libraryName);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public string get_LibraryName();
    [CompilerGeneratedAttribute]
public string get_EntryPoint();
    [CompilerGeneratedAttribute]
public void set_EntryPoint(string value);
    [CompilerGeneratedAttribute]
public StringMarshalling get_StringMarshalling();
    [CompilerGeneratedAttribute]
public void set_StringMarshalling(StringMarshalling value);
    [CompilerGeneratedAttribute]
public Type get_StringMarshallingCustomType();
    [CompilerGeneratedAttribute]
public void set_StringMarshallingCustomType(Type value);
    [CompilerGeneratedAttribute]
public bool get_SetLastError();
    [CompilerGeneratedAttribute]
public void set_SetLastError(bool value);
}
internal enum System.Runtime.InteropServices.StringMarshalling : Enum {
    public int value__;
    public static StringMarshalling Custom;
    public static StringMarshalling Utf8;
    public static StringMarshalling Utf16;
}
internal static class System.SR : object {
    private static bool s_usingResourceKeys;
    private static ResourceManager s_resourceManager;
    internal static ResourceManager ResourceManager { get; }
    internal static string BufferMaximumSizeExceeded { get; }
    internal static string QueueModeNotSupported { get; }
    internal static string MaxQueueLengthBadValue { get; }
    internal static string WarningMessageOnDrop { get; }
    internal static string InvalidConfigurationData { get; }
    private static SR();
    internal static bool UsingResourceKeys();
    private static string GetResourceString(string resourceKey);
    private static string GetResourceString(string resourceKey, string defaultString);
    [NullableContextAttribute("1")]
internal static string Format(string resourceFormat, object p1);
    [NullableContextAttribute("1")]
internal static string Format(string resourceFormat, object p1, object p2);
    [NullableContextAttribute("2")]
internal static string Format(string resourceFormat, object p1, object p2, object p3);
    [NullableContextAttribute("1")]
internal static string Format(string resourceFormat, Object[] args);
    [NullableContextAttribute("1")]
internal static string Format(IFormatProvider provider, string resourceFormat, object p1);
    [NullableContextAttribute("2")]
internal static string Format(IFormatProvider provider, string resourceFormat, object p1, object p2);
    [NullableContextAttribute("2")]
internal static string Format(IFormatProvider provider, string resourceFormat, object p1, object p2, object p3);
    [NullableContextAttribute("1")]
internal static string Format(IFormatProvider provider, string resourceFormat, Object[] args);
    internal static ResourceManager get_ResourceManager();
    internal static string get_BufferMaximumSizeExceeded();
    internal static string get_QueueModeNotSupported();
    internal static string get_MaxQueueLengthBadValue();
    internal static string get_WarningMessageOnDrop();
    internal static string get_InvalidConfigurationData();
}
internal class System.Text.Json.PooledByteBufferWriter : object {
    private Byte[] _rentedBuffer;
    private int _index;
    private static int MinimumBufferSize;
    public static int MaximumBufferSize;
    public ReadOnlyMemory`1<byte> WrittenMemory { get; }
    public int WrittenCount { get; }
    public int Capacity { get; }
    public int FreeCapacity { get; }
    public PooledByteBufferWriter(int initialCapacity);
    public ReadOnlyMemory`1<byte> get_WrittenMemory();
    public int get_WrittenCount();
    public int get_Capacity();
    public int get_FreeCapacity();
    public void Clear();
    public void ClearAndReturnBuffers();
    private void ClearHelper();
    public sealed virtual void Dispose();
    public void InitializeEmptyInstance(int initialCapacity);
    [NullableContextAttribute("1")]
public static PooledByteBufferWriter CreateEmptyInstanceForCaching();
    public sealed virtual void Advance(int count);
    public sealed virtual Memory`1<byte> GetMemory(int sizeHint);
    public sealed virtual Span`1<byte> GetSpan(int sizeHint);
    [NullableContextAttribute("1")]
internal ValueTask WriteToStreamAsync(Stream destination, CancellationToken cancellationToken);
    [NullableContextAttribute("1")]
internal void WriteToStream(Stream destination);
    private void CheckAndResizeBuffer(int sizeHint);
}
internal static class System.Text.Json.ThrowHelper : object {
    [DoesNotReturnAttribute]
public static void ThrowOutOfMemoryException_BufferMaximumSizeExceeded(UInt32 capacity);
}
internal static class System.ThrowHelper : object {
    [NullableContextAttribute("2")]
internal static void ThrowIfNull(object argument, string paramName);
    [DoesNotReturnAttribute]
private static void Throw(string paramName);
    [NullableContextAttribute("1")]
public static string IfNullOrWhitespace(string argument, string paramName);
}
