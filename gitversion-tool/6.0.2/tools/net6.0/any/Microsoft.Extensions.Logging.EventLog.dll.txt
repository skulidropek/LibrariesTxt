[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Extensions.Logging.EventLog.EventLogLogger : object {
    private string _name;
    private EventLogSettings _settings;
    private IExternalScopeProvider _externalScopeProvider;
    private static string ContinuationString;
    private int _beginOrEndMessageSegmentSize;
    private int _intermediateMessageSegmentSize;
    [CompilerGeneratedAttribute]
private IEventLog <EventLog>k__BackingField;
    public IEventLog EventLog { get; }
    public EventLogLogger(string name, EventLogSettings settings, IExternalScopeProvider externalScopeProvider);
    [CompilerGeneratedAttribute]
public IEventLog get_EventLog();
    public sealed virtual IDisposable BeginScope(TState state);
    public sealed virtual bool IsEnabled(LogLevel logLevel);
    [NullableContextAttribute("2")]
public sealed virtual void Log(LogLevel logLevel, EventId eventId, TState state, Exception exception, Func`3<TState, Exception, string> formatter);
    private void WriteMessage(string message, EventLogEntryType eventLogEntryType, int eventId);
    private static EventLogEntryType GetEventLogEntryType(LogLevel level);
}
[ProviderAliasAttribute("EventLog")]
public class Microsoft.Extensions.Logging.EventLog.EventLogLoggerProvider : object {
    [NullableAttribute("1")]
internal EventLogSettings _settings;
    private IExternalScopeProvider _scopeProvider;
    [NullableContextAttribute("2")]
public EventLogLoggerProvider(EventLogSettings settings);
    [NullableContextAttribute("1")]
public EventLogLoggerProvider(IOptions`1<EventLogSettings> options);
    [NullableContextAttribute("1")]
public sealed virtual ILogger CreateLogger(string name);
    public sealed virtual void Dispose();
    [NullableContextAttribute("1")]
public sealed virtual void SetScopeProvider(IExternalScopeProvider scopeProvider);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.Extensions.Logging.EventLog.EventLogSettings : object {
    private IEventLog _eventLog;
    [CompilerGeneratedAttribute]
private string <LogName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SourceName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MachineName>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`3<string, LogLevel, bool> <Filter>k__BackingField;
    public string LogName { get; public set; }
    public string SourceName { get; public set; }
    public string MachineName { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Func`3<string, LogLevel, bool> Filter { get; public set; }
    [NullableAttribute("1")]
internal IEventLog EventLog { get; internal set; }
    [CompilerGeneratedAttribute]
public string get_LogName();
    [CompilerGeneratedAttribute]
public void set_LogName(string value);
    [CompilerGeneratedAttribute]
public string get_SourceName();
    [CompilerGeneratedAttribute]
public void set_SourceName(string value);
    [CompilerGeneratedAttribute]
public string get_MachineName();
    [CompilerGeneratedAttribute]
public void set_MachineName(string value);
    [CompilerGeneratedAttribute]
public Func`3<string, LogLevel, bool> get_Filter();
    [CompilerGeneratedAttribute]
public void set_Filter(Func`3<string, LogLevel, bool> value);
    [NullableContextAttribute("1")]
internal IEventLog get_EventLog();
    [NullableContextAttribute("1")]
internal void set_EventLog(IEventLog value);
    private WindowsEventLog CreateDefaultEventLog();
}
[NullableContextAttribute("1")]
internal interface Microsoft.Extensions.Logging.EventLog.IEventLog {
    public Nullable`1<int> DefaultEventId { get; }
    public int MaxMessageSize { get; }
    public abstract virtual Nullable`1<int> get_DefaultEventId();
    public abstract virtual int get_MaxMessageSize();
    public abstract virtual void WriteEntry(string message, EventLogEntryType type, int eventID, short category);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[SupportedOSPlatformAttribute("windows")]
internal class Microsoft.Extensions.Logging.EventLog.WindowsEventLog : object {
    private static int MaximumMessageSize;
    private bool _enabled;
    [CompilerGeneratedAttribute]
private EventLog <DiagnosticsEventLog>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <DefaultEventId>k__BackingField;
    public EventLog DiagnosticsEventLog { get; }
    public int MaxMessageSize { get; }
    public Nullable`1<int> DefaultEventId { get; public set; }
    public WindowsEventLog(string logName, string machineName, string sourceName);
    [CompilerGeneratedAttribute]
public EventLog get_DiagnosticsEventLog();
    public sealed virtual int get_MaxMessageSize();
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<int> get_DefaultEventId();
    [CompilerGeneratedAttribute]
public void set_DefaultEventId(Nullable`1<int> value);
    public sealed virtual void WriteEntry(string message, EventLogEntryType type, int eventID, short category);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.Extensions.Logging.EventLoggerFactoryExtensions : object {
    [ExtensionAttribute]
[EditorBrowsableAttribute("1")]
[ObsoleteAttribute("This method is retained only for compatibility. The recommended alternative is AddEventLog(this ILoggingBuilder builder).", "True")]
public static ILoggerFactory AddEventLog(ILoggerFactory factory, EventLogSettings settings);
    [ExtensionAttribute]
[EditorBrowsableAttribute("1")]
[ObsoleteAttribute("This method is retained only for compatibility. The recommended alternative is AddEventLog(this ILoggingBuilder builder).", "True")]
public static ILoggerFactory AddEventLog(ILoggerFactory factory, LogLevel minLevel);
    [ExtensionAttribute]
[EditorBrowsableAttribute("1")]
[ObsoleteAttribute("This method is retained only for compatibility. The recommended alternative is AddEventLog(this ILoggingBuilder builder).", "True")]
public static ILoggerFactory AddEventLog(ILoggerFactory factory);
    [ExtensionAttribute]
public static ILoggingBuilder AddEventLog(ILoggingBuilder builder);
    [ExtensionAttribute]
public static ILoggingBuilder AddEventLog(ILoggingBuilder builder, EventLogSettings settings);
    [ExtensionAttribute]
public static ILoggingBuilder AddEventLog(ILoggingBuilder builder, Action`1<EventLogSettings> configure);
}
internal class Microsoft.Extensions.Logging.NullExternalScopeProvider : object {
    [CompilerGeneratedAttribute]
private static IExternalScopeProvider <Instance>k__BackingField;
    [NullableAttribute("1")]
public static IExternalScopeProvider Instance { get; }
    private static NullExternalScopeProvider();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public static IExternalScopeProvider get_Instance();
    private sealed virtual override void Microsoft.Extensions.Logging.IExternalScopeProvider.ForEachScope(Action`2<object, TState> callback, TState state);
    private sealed virtual override IDisposable Microsoft.Extensions.Logging.IExternalScopeProvider.Push(object state);
}
internal class Microsoft.Extensions.Logging.NullScope : object {
    [CompilerGeneratedAttribute]
private static NullScope <Instance>k__BackingField;
    [NullableAttribute("1")]
public static NullScope Instance { get; }
    private static NullScope();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public static NullScope get_Instance();
    public sealed virtual void Dispose();
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.NullablePublicOnlyAttribute : Attribute {
    public bool IncludesInternals;
    public NullablePublicOnlyAttribute(bool );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[AttributeUsageAttribute("64")]
internal class System.Runtime.InteropServices.LibraryImportAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <LibraryName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EntryPoint>k__BackingField;
    [CompilerGeneratedAttribute]
private StringMarshalling <StringMarshalling>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <StringMarshallingCustomType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SetLastError>k__BackingField;
    [NullableAttribute("1")]
public string LibraryName { get; }
    public string EntryPoint { get; public set; }
    public StringMarshalling StringMarshalling { get; public set; }
    public Type StringMarshallingCustomType { get; public set; }
    public bool SetLastError { get; public set; }
    [NullableContextAttribute("1")]
public LibraryImportAttribute(string libraryName);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public string get_LibraryName();
    [CompilerGeneratedAttribute]
public string get_EntryPoint();
    [CompilerGeneratedAttribute]
public void set_EntryPoint(string value);
    [CompilerGeneratedAttribute]
public StringMarshalling get_StringMarshalling();
    [CompilerGeneratedAttribute]
public void set_StringMarshalling(StringMarshalling value);
    [CompilerGeneratedAttribute]
public Type get_StringMarshallingCustomType();
    [CompilerGeneratedAttribute]
public void set_StringMarshallingCustomType(Type value);
    [CompilerGeneratedAttribute]
public bool get_SetLastError();
    [CompilerGeneratedAttribute]
public void set_SetLastError(bool value);
}
internal enum System.Runtime.InteropServices.StringMarshalling : Enum {
    public int value__;
    public static StringMarshalling Custom;
    public static StringMarshalling Utf8;
    public static StringMarshalling Utf16;
}
internal static class System.ThrowHelper : object {
    [NullableContextAttribute("2")]
internal static void ThrowIfNull(object argument, string paramName);
    [DoesNotReturnAttribute]
private static void Throw(string paramName);
    [NullableContextAttribute("1")]
public static string IfNullOrWhitespace(string argument, string paramName);
}
