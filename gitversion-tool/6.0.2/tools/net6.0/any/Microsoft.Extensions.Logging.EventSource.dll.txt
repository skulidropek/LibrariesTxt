[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Extensions.Logging.EventLogFiltersConfigureOptions : object {
    private LoggingEventSource _eventSource;
    public EventLogFiltersConfigureOptions(LoggingEventSource eventSource);
    public sealed virtual void Configure(LoggerFilterOptions options);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Extensions.Logging.EventLogFiltersConfigureOptionsChangeSource : object {
    private LoggingEventSource _eventSource;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [NullableAttribute("2")]
public string Name { get; }
    public EventLogFiltersConfigureOptionsChangeSource(LoggingEventSource eventSource);
    public sealed virtual IChangeToken GetChangeToken();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual string get_Name();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Extensions.Logging.EventSource.EventSourceLogger : object {
    private static int _activityIds;
    private LoggingEventSource _eventSource;
    private int _factoryID;
    [CompilerGeneratedAttribute]
private string <CategoryName>k__BackingField;
    [CompilerGeneratedAttribute]
private LogLevel <Level>k__BackingField;
    [CompilerGeneratedAttribute]
private EventSourceLogger <Next>k__BackingField;
    public string CategoryName { get; }
    public LogLevel Level { get; public set; }
    [NullableAttribute("2")]
public EventSourceLogger Next { get; }
    public EventSourceLogger(string categoryName, int factoryID, LoggingEventSource eventSource, EventSourceLogger next);
    [CompilerGeneratedAttribute]
public string get_CategoryName();
    [CompilerGeneratedAttribute]
public LogLevel get_Level();
    [CompilerGeneratedAttribute]
public void set_Level(LogLevel value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public EventSourceLogger get_Next();
    public sealed virtual bool IsEnabled(LogLevel logLevel);
    [NullableContextAttribute("2")]
public sealed virtual void Log(LogLevel logLevel, EventId eventId, TState state, Exception exception, Func`3<TState, Exception, string> formatter);
    public sealed virtual IDisposable BeginScope(TState state);
    private static ExceptionInfo GetExceptionInfo(Exception exception);
    private static KeyValuePair`2[] GetProperties(object state);
    private static string ToJson(IReadOnlyList`1<KeyValuePair`2<string, string>> keyValues);
}
[ProviderAliasAttribute("EventSource")]
public class Microsoft.Extensions.Logging.EventSource.EventSourceLoggerProvider : object {
    private static int _globalFactoryID;
    private int _factoryID;
    private EventSourceLogger _loggers;
    private LoggingEventSource _eventSource;
    [NullableContextAttribute("1")]
public EventSourceLoggerProvider(LoggingEventSource eventSource);
    [NullableContextAttribute("1")]
public sealed virtual ILogger CreateLogger(string categoryName);
    public sealed virtual void Dispose();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[EventDataAttribute]
internal class Microsoft.Extensions.Logging.EventSource.ExceptionInfo : object {
    [CompilerGeneratedAttribute]
private static ExceptionInfo <Empty>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TypeName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private int <HResult>k__BackingField;
    [CompilerGeneratedAttribute]
private string <VerboseMessage>k__BackingField;
    [NullableAttribute("1")]
public static ExceptionInfo Empty { get; }
    public string TypeName { get; }
    public string Message { get; }
    public int HResult { get; }
    public string VerboseMessage { get; }
    [NullableContextAttribute("1")]
public ExceptionInfo(Exception exception);
    private static ExceptionInfo();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public static ExceptionInfo get_Empty();
    [CompilerGeneratedAttribute]
public string get_TypeName();
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
public int get_HResult();
    [CompilerGeneratedAttribute]
public string get_VerboseMessage();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[EventSourceAttribute]
public class Microsoft.Extensions.Logging.EventSource.LoggingEventSource : EventSource {
    internal static LoggingEventSource Instance;
    private LoggerFilterRule[] _filterSpec;
    private CancellationTokenSource _cancellationTokenSource;
    private static string UseAppFilters;
    private static string WriteEventCoreSuppressionJustification;
    private static string WriteEventDynamicDependencySuppressionJustification;
    private static Char[] s_semicolon;
    private static Char[] s_colon;
    private static LoggingEventSource();
    [EventAttribute("1")]
[UnconditionalSuppressMessageAttribute("ReflectionAnalysis", "IL2026:RequiresUnreferencedCode")]
internal void FormattedMessage(LogLevel Level, int FactoryID, string LoggerName, int EventId, string EventName, string FormattedMessage);
    [EventAttribute("2")]
[DynamicDependencyAttribute("512", "System.Collections.Generic.KeyValuePair`2<System.String,System.String>")]
[UnconditionalSuppressMessageAttribute("ReflectionAnalysis", "IL2026:RequiresUnreferencedCode")]
internal void Message(LogLevel Level, int FactoryID, string LoggerName, int EventId, string EventName, ExceptionInfo Exception, IEnumerable`1<KeyValuePair`2<string, string>> Arguments);
    [EventAttribute("3")]
[DynamicDependencyAttribute("512", "System.Collections.Generic.KeyValuePair`2<System.String,System.String>")]
[UnconditionalSuppressMessageAttribute("ReflectionAnalysis", "IL2026:RequiresUnreferencedCode")]
internal void ActivityStart(int ID, int FactoryID, string LoggerName, IEnumerable`1<KeyValuePair`2<string, string>> Arguments);
    [EventAttribute("4")]
[UnconditionalSuppressMessageAttribute("ReflectionAnalysis", "IL2026:RequiresUnreferencedCode")]
internal void ActivityStop(int ID, int FactoryID, string LoggerName);
    [EventAttribute("5")]
[UnconditionalSuppressMessageAttribute("ReflectionAnalysis", "IL2026:RequiresUnreferencedCode")]
internal void MessageJson(LogLevel Level, int FactoryID, string LoggerName, int EventId, string EventName, string ExceptionJson, string ArgumentsJson, string FormattedMessage);
    [EventAttribute("6")]
[UnconditionalSuppressMessageAttribute("ReflectionAnalysis", "IL2026:RequiresUnreferencedCode")]
internal void ActivityJsonStart(int ID, int FactoryID, string LoggerName, string ArgumentsJson);
    [EventAttribute("7")]
[UnconditionalSuppressMessageAttribute("ReflectionAnalysis", "IL2026:RequiresUnreferencedCode")]
internal void ActivityJsonStop(int ID, int FactoryID, string LoggerName);
    protected virtual void OnEventCommand(EventCommandEventArgs command);
    [NonEventAttribute]
private void SetFilterSpec(string filterSpec);
    [NonEventAttribute]
internal IChangeToken GetFilterChangeToken();
    [NonEventAttribute]
private void FireChangeToken();
    [NonEventAttribute]
private static LoggerFilterRule[] ParseFilterSpec(string filterSpec, LogLevel defaultLevel);
    [NonEventAttribute]
private static bool TryParseLevel(LogLevel defaultLevel, string levelString, LogLevel& ret);
    [NonEventAttribute]
private LogLevel GetDefaultLevel();
    [NonEventAttribute]
internal LoggerFilterRule[] GetFilterRules();
    [NonEventAttribute]
private static void SetEventData(EventData& eventData, T& value, Void* pinnedString);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.Extensions.Logging.EventSourceLoggerFactoryExtensions : object {
    [ExtensionAttribute]
[EditorBrowsableAttribute("1")]
[ObsoleteAttribute("This method is retained only for compatibility. The recommended alternative is AddEventSourceLogger(this ILoggingBuilder builder).", "True")]
public static ILoggerFactory AddEventSourceLogger(ILoggerFactory factory);
    [ExtensionAttribute]
public static ILoggingBuilder AddEventSourceLogger(ILoggingBuilder builder);
}
internal class Microsoft.Extensions.Logging.NullExternalScopeProvider : object {
    [CompilerGeneratedAttribute]
private static IExternalScopeProvider <Instance>k__BackingField;
    [NullableAttribute("1")]
public static IExternalScopeProvider Instance { get; }
    private static NullExternalScopeProvider();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public static IExternalScopeProvider get_Instance();
    private sealed virtual override void Microsoft.Extensions.Logging.IExternalScopeProvider.ForEachScope(Action`2<object, TState> callback, TState state);
    private sealed virtual override IDisposable Microsoft.Extensions.Logging.IExternalScopeProvider.Push(object state);
}
internal class Microsoft.Extensions.Logging.NullScope : object {
    [CompilerGeneratedAttribute]
private static NullScope <Instance>k__BackingField;
    [NullableAttribute("1")]
public static NullScope Instance { get; }
    private static NullScope();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public static NullScope get_Instance();
    public sealed virtual void Dispose();
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.NullablePublicOnlyAttribute : Attribute {
    public bool IncludesInternals;
    public NullablePublicOnlyAttribute(bool );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[AttributeUsageAttribute("64")]
internal class System.Runtime.InteropServices.LibraryImportAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <LibraryName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EntryPoint>k__BackingField;
    [CompilerGeneratedAttribute]
private StringMarshalling <StringMarshalling>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <StringMarshallingCustomType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SetLastError>k__BackingField;
    [NullableAttribute("1")]
public string LibraryName { get; }
    public string EntryPoint { get; public set; }
    public StringMarshalling StringMarshalling { get; public set; }
    public Type StringMarshallingCustomType { get; public set; }
    public bool SetLastError { get; public set; }
    [NullableContextAttribute("1")]
public LibraryImportAttribute(string libraryName);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public string get_LibraryName();
    [CompilerGeneratedAttribute]
public string get_EntryPoint();
    [CompilerGeneratedAttribute]
public void set_EntryPoint(string value);
    [CompilerGeneratedAttribute]
public StringMarshalling get_StringMarshalling();
    [CompilerGeneratedAttribute]
public void set_StringMarshalling(StringMarshalling value);
    [CompilerGeneratedAttribute]
public Type get_StringMarshallingCustomType();
    [CompilerGeneratedAttribute]
public void set_StringMarshallingCustomType(Type value);
    [CompilerGeneratedAttribute]
public bool get_SetLastError();
    [CompilerGeneratedAttribute]
public void set_SetLastError(bool value);
}
internal enum System.Runtime.InteropServices.StringMarshalling : Enum {
    public int value__;
    public static StringMarshalling Custom;
    public static StringMarshalling Utf8;
    public static StringMarshalling Utf16;
}
internal static class System.ThrowHelper : object {
    [NullableContextAttribute("2")]
internal static void ThrowIfNull(object argument, string paramName);
    [DoesNotReturnAttribute]
private static void Throw(string paramName);
    [NullableContextAttribute("1")]
public static string IfNullOrWhitespace(string argument, string paramName);
}
