[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class GitVersion.ArgumentParser : object {
    private IEnvironment environment;
    private ICurrentBuildAgent buildAgent;
    private IConsole console;
    private IGlobbingResolver globbingResolver;
    private static string defaultOutputFileName;
    private static IEnumerable`1<string> availableVariables;
    public ArgumentParser(IEnvironment environment, ICurrentBuildAgent buildAgent, IConsole console, IGlobbingResolver globbingResolver);
    private static ArgumentParser();
    public sealed virtual Arguments ParseArguments(string commandLineArguments);
    public sealed virtual Arguments ParseArguments(String[] commandLineArguments);
    private static void ValidateConfigurationFile(Arguments arguments);
    private void ParseSwitchArguments(Arguments arguments, NameValueCollection switchesAndValues, int i);
    private void AddAuthentication(Arguments arguments);
    [IteratorStateMachineAttribute("GitVersion.ArgumentParser/<ResolveFiles>d__12")]
private IEnumerable`1<string> ResolveFiles(string workingDirectory, ISet`1<string> assemblyInfoFiles);
    [NullableContextAttribute("2")]
private void ParseTargetPath(Arguments arguments, string name, IReadOnlyList`1<string> values, string value, bool parseEnded);
    [NullableContextAttribute("2")]
private static bool ParseSwitches(Arguments arguments, string name, IReadOnlyList`1<string> values, string value);
    [NullableContextAttribute("2")]
private static bool ParseConfigArguments(Arguments arguments, string name, IReadOnlyList`1<string> values, string value);
    [NullableContextAttribute("2")]
private static bool ParseRemoteArguments(Arguments arguments, string name, IReadOnlyList`1<string> values, string value);
    [NullableContextAttribute("2")]
private static void ParseShowVariable(Arguments arguments, string value, string name);
    private static void ParseFormat(Arguments arguments, string value);
    private static void ParseEnsureAssemblyInfo(Arguments arguments, string value);
    private static void ParseOutput(Arguments arguments, IEnumerable`1<string> values);
    private static void ParseVerbosity(Arguments arguments, string value);
    private static void ParseOverrideConfig(Arguments arguments, IReadOnlyCollection`1<string> values);
    private static void ParseUpdateAssemblyInfo(Arguments arguments, string value, IReadOnlyCollection`1<string> values);
    private static void ParseUpdateProjectInfo(Arguments arguments, string value, IReadOnlyCollection`1<string> values);
    private static void EnsureArgumentValueCount(IReadOnlyList`1<string> values);
    private static NameValueCollection CollectSwitchesAndValuesFromArguments(IList`1<string> namedArguments, Boolean& firstArgumentIsSwitch);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class GitVersion.ArgumentParserExtensions : object {
    private static String[] TrueValues;
    private static String[] FalseValues;
    private static ArgumentParserExtensions();
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static bool IsTrue(string value);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static bool IsFalse(string value);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static bool IsValidPath(string path);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static bool IsSwitchArgument(string value);
    [ExtensionAttribute]
public static bool IsSwitch(string value, string switchName);
    [ExtensionAttribute]
public static bool IsHelp(string singleArgument);
    [ExtensionAttribute]
public static bool ArgumentRequiresValue(string argument, int argumentIndex);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class GitVersion.Arguments : object {
    [NullableAttribute("1")]
public AuthenticationInfo Authentication;
    public string ConfigurationFile;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IReadOnlyDictionary`2<object, object> OverrideConfiguration;
    public bool ShowConfiguration;
    public string TargetPath;
    public bool UpdateWixVersionFile;
    public string TargetUrl;
    public string TargetBranch;
    public string CommitId;
    public string ClonePath;
    public bool Diag;
    public bool IsVersion;
    public bool IsHelp;
    public bool NoFetch;
    public bool NoCache;
    public bool NoNormalize;
    public string LogFilePath;
    public string ShowVariable;
    public string Format;
    public string OutputFile;
    [NullableAttribute("1")]
public ISet`1<OutputType> Output;
    public Verbosity Verbosity;
    public bool UpdateProjectFiles;
    public bool UpdateAssemblyInfo;
    public bool EnsureAssemblyInfo;
    [NullableAttribute("1")]
public ISet`1<string> UpdateAssemblyInfoFileName;
    [NullableContextAttribute("1")]
public GitVersionOptions ToOptions();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class GitVersion.GitVersionApp : object {
    private ILog log;
    private IHostApplicationLifetime applicationLifetime;
    private IGitVersionExecutor gitVersionExecutor;
    private IOptions`1<GitVersionOptions> options;
    public GitVersionApp(ILog log, IHostApplicationLifetime applicationLifetime, IGitVersionExecutor gitVersionExecutor, IOptions`1<GitVersionOptions> options);
    public sealed virtual Task StartAsync(CancellationToken cancellationToken);
    public sealed virtual Task StopAsync(CancellationToken cancellationToken);
}
internal class GitVersion.GitVersionAppModule : object {
    [NullableContextAttribute("1")]
public sealed virtual void RegisterTypes(IServiceCollection services);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class GitVersion.GitVersionExecutor : object {
    private ILog log;
    private IConsole console;
    private IVersionWriter versionWriter;
    private IHelpWriter helpWriter;
    private IConfigurationFileLocator configurationFileLocator;
    private IConfigurationProvider configurationProvider;
    private IConfigurationSerializer configurationSerializer;
    private IGitVersionCalculateTool gitVersionCalculateTool;
    private IGitVersionOutputTool gitVersionOutputTool;
    private IGitRepository gitRepository;
    private IGitRepositoryInfo repositoryInfo;
    public GitVersionExecutor(ILog log, IConsole console, IVersionWriter versionWriter, IHelpWriter helpWriter, IConfigurationFileLocator configurationFileLocator, IConfigurationProvider configurationProvider, IConfigurationSerializer configurationSerializer, IGitVersionCalculateTool gitVersionCalculateTool, IGitVersionOutputTool gitVersionOutputTool, IGitRepository gitRepository, IGitRepositoryInfo repositoryInfo);
    public sealed virtual int Execute(GitVersionOptions gitVersionOptions);
    private int RunGitVersionTool(GitVersionOptions gitVersionOptions);
    private bool HandleNonMainCommand(GitVersionOptions gitVersionOptions, Int32& exitCode);
    private static void ConfigureLogging(GitVersionOptions gitVersionOptions, ILog log);
    [CompilerGeneratedAttribute]
private void <RunGitVersionTool>b__13_0(string logMessage);
    [CompilerGeneratedAttribute]
private void <HandleNonMainCommand>b__14_0(string logMessage);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class GitVersion.GlobbingResolver : object {
    private Matcher matcher;
    public sealed virtual IEnumerable`1<string> Resolve(string workingDirectory, string pattern);
    protected virtual DirectoryInfoBase GetDirectoryInfoWrapper(string workingDirectory);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class GitVersion.HelpWriter : object {
    private IVersionWriter versionWriter;
    private IConsole console;
    public HelpWriter(IVersionWriter versionWriter, IConsole console);
    public sealed virtual void Write();
    public sealed virtual void WriteTo(Action`1<string> writeAction);
    private string ArgumentList();
}
[NullableContextAttribute("1")]
internal interface GitVersion.IArgumentParser {
    public abstract virtual Arguments ParseArguments(string commandLineArguments);
    public abstract virtual Arguments ParseArguments(String[] commandLineArguments);
}
[NullableContextAttribute("1")]
internal interface GitVersion.IGitVersionExecutor {
    public abstract virtual int Execute(GitVersionOptions gitVersionOptions);
}
[NullableContextAttribute("1")]
internal interface GitVersion.IGlobbingResolver {
    public abstract virtual IEnumerable`1<string> Resolve(string workingDirectory, string pattern);
}
[NullableContextAttribute("1")]
internal interface GitVersion.IHelpWriter {
    public abstract virtual void Write();
    public abstract virtual void WriteTo(Action`1<string> writeAction);
}
[NullableContextAttribute("1")]
internal interface GitVersion.IVersionWriter {
    public abstract virtual void Write(Assembly assembly);
    public abstract virtual void WriteTo(Assembly assembly, Action`1<string> writeAction);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class GitVersion.OverrideConfigurationOptionParser : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Dictionary`2<object, object> overrideConfiguration;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static Lazy`1<ILookup`2<string, PropertyInfo>> _lazySupportedProperties;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal static ILookup`2<string, PropertyInfo> SupportedProperties { get; }
    private static OverrideConfigurationOptionParser();
    internal static ILookup`2<string, PropertyInfo> get_SupportedProperties();
    private static ILookup`2<string, PropertyInfo> GetSupportedProperties();
    private static bool IsSupportedPropertyType(Type propertyType);
    internal void SetValue(string key, string value);
    internal IReadOnlyDictionary`2<object, object> GetOverrideConfiguration();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class GitVersion.Program : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Action`1<IServiceCollection> overrides;
    internal Program(Action`1<IServiceCollection> overrides);
    [AsyncStateMachineAttribute("GitVersion.Program/<Main>d__2")]
private static Task Main(String[] args);
    internal Task RunAsync(String[] args);
    private IHostBuilder CreateHostBuilder(String[] args);
    private static void <Main>(String[] args);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class GitVersion.QuotedStringHelpers : object {
    public static String[] SplitUnquoted(string input, char splitChar);
    public static string UnquoteText(string input);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class GitVersion.VersionWriter : object {
    private IConsole console;
    public VersionWriter(IConsole console);
    public sealed virtual void Write(Assembly assembly);
    public sealed virtual void WriteTo(Assembly assembly, Action`1<string> writeAction);
    private static string GetAssemblyVersion(Assembly assembly);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
