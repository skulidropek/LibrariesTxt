[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class GitVersion.Git.Branch : object {
    private static LambdaEqualityHelper`1<IBranch> equalityHelper;
    private static LambdaKeyComparer`2<IBranch, string> comparerHelper;
    private Branch innerBranch;
    [CompilerGeneratedAttribute]
private ReferenceName <Name>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private ICommit <Tip>k__BackingField;
    [CompilerGeneratedAttribute]
private ICommitCollection <Commits>k__BackingField;
    public ReferenceName Name { get; }
    [NullableAttribute("2")]
public ICommit Tip { get; }
    public ICommitCollection Commits { get; }
    public bool IsDetachedHead { get; }
    public bool IsRemote { get; }
    public bool IsTracking { get; }
    internal Branch(Branch branch);
    private static Branch();
    [CompilerGeneratedAttribute]
public sealed virtual ReferenceName get_Name();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual ICommit get_Tip();
    [CompilerGeneratedAttribute]
public sealed virtual ICommitCollection get_Commits();
    [NullableContextAttribute("2")]
public sealed virtual int CompareTo(IBranch other);
    [NullableContextAttribute("2")]
public sealed virtual bool Equals(IBranch other);
    public sealed virtual bool get_IsDetachedHead();
    public sealed virtual bool get_IsRemote();
    public sealed virtual bool get_IsTracking();
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    public static Branch op_Implicit(Branch d);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
internal class GitVersion.Git.BranchCollection : object {
    private BranchCollection innerCollection;
    [NullableAttribute("2")]
public IBranch Item { get; }
    internal BranchCollection(BranchCollection collection);
    public sealed virtual IEnumerator`1<IBranch> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual IBranch get_Item(string name);
    public sealed virtual IEnumerable`1<IBranch> ExcludeBranches(IEnumerable`1<IBranch> branchesToExclude);
    public sealed virtual void UpdateTrackedBranch(IBranch branch, string remoteTrackingReferenceName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class GitVersion.Git.Commit : GitObject {
    private static LambdaEqualityHelper`1<ICommit> equalityHelper;
    private static LambdaKeyComparer`2<ICommit, string> comparerHelper;
    private Lazy`1<IReadOnlyList`1<ICommit>> parentsLazy;
    private Commit innerCommit;
    [CompilerGeneratedAttribute]
private DateTimeOffset <When>k__BackingField;
    public IReadOnlyList`1<ICommit> Parents { get; }
    public DateTimeOffset When { get; }
    public string Message { get; }
    internal Commit(Commit innerCommit);
    private static Commit();
    [NullableContextAttribute("2")]
public sealed virtual int CompareTo(ICommit other);
    [NullableContextAttribute("2")]
public sealed virtual bool Equals(ICommit other);
    public sealed virtual IReadOnlyList`1<ICommit> get_Parents();
    [CompilerGeneratedAttribute]
public sealed virtual DateTimeOffset get_When();
    public sealed virtual string get_Message();
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    public static Commit op_Implicit(Commit d);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class GitVersion.Git.CommitCollection : object {
    private ICommitLog innerCollection;
    internal CommitCollection(ICommitLog collection);
    public sealed virtual IEnumerator`1<ICommit> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual IEnumerable`1<ICommit> GetCommitsPriorTo(DateTimeOffset olderThan);
    public sealed virtual IEnumerable`1<ICommit> QueryBy(CommitFilter commitFilter);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal static object <QueryBy>g__GetReacheableFrom|5_0(object item);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class GitVersion.Git.GitObject : object {
    private static LambdaEqualityHelper`1<IGitObject> equalityHelper;
    private static LambdaKeyComparer`2<IGitObject, string> comparerHelper;
    [CompilerGeneratedAttribute]
private IObjectId <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Sha>k__BackingField;
    public IObjectId Id { get; }
    public string Sha { get; }
    internal GitObject(GitObject innerGitObject);
    private static GitObject();
    [NullableContextAttribute("2")]
public sealed virtual int CompareTo(IGitObject other);
    [NullableContextAttribute("2")]
public sealed virtual bool Equals(IGitObject other);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    [CompilerGeneratedAttribute]
public sealed virtual IObjectId get_Id();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Sha();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class GitVersion.Git.GitRepository : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Lazy`1<IRepository> repositoryLazy;
    private ILog log;
    private IRepository RepositoryInstance { get; }
    public string Path { get; }
    public string WorkingDirectory { get; }
    public bool IsHeadDetached { get; }
    public bool IsShallow { get; }
    public IBranch Head { get; }
    public ITagCollection Tags { get; }
    public IReferenceCollection Refs { get; }
    public IBranchCollection Branches { get; }
    public ICommitCollection Commits { get; }
    public IRemoteCollection Remotes { get; }
    public GitRepository(ILog log);
    private IRepository get_RepositoryInstance();
    public sealed virtual string get_Path();
    public sealed virtual string get_WorkingDirectory();
    public sealed virtual bool get_IsHeadDetached();
    public sealed virtual bool get_IsShallow();
    public sealed virtual IBranch get_Head();
    public sealed virtual ITagCollection get_Tags();
    public sealed virtual IReferenceCollection get_Refs();
    public sealed virtual IBranchCollection get_Branches();
    public sealed virtual ICommitCollection get_Commits();
    public sealed virtual IRemoteCollection get_Remotes();
    [NullableContextAttribute("2")]
public sealed virtual void DiscoverRepository(string gitDirectory);
    public sealed virtual ICommit FindMergeBase(ICommit commit, ICommit otherCommit);
    public sealed virtual int GetNumberOfUncommittedChanges();
    public sealed virtual void Dispose();
    private int GetNumberOfUncommittedChangesInternal();
    [NullableContextAttribute("2")]
public sealed virtual void Clone(string sourceUrl, string workdirPath, AuthenticationInfo auth);
    public sealed virtual void Checkout(string commitOrBranchSpec);
    public sealed virtual void Fetch(string remote, IEnumerable`1<string> refSpecs, AuthenticationInfo auth, string logMessage);
    public sealed virtual void CreateBranchForPullRequestBranch(AuthenticationInfo auth);
    private DirectReference GetPullRequestReference(AuthenticationInfo auth, Remote remote, string headTipSha);
    private static FetchOptions GetFetchOptions(AuthenticationInfo auth);
    private static CloneOptions GetCloneOptions(AuthenticationInfo auth);
    private static CredentialsHandler GetCredentialsProvider(AuthenticationInfo auth);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class GitVersion.Git.GitRepositoryInfo : object {
    [NullableAttribute("1")]
private IOptions`1<GitVersionOptions> options;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Lazy`1<string> dynamicGitRepositoryPath;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Lazy`1<string> dotGitDirectory;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Lazy`1<string> gitRootPath;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Lazy`1<string> projectRootDirectory;
    [NullableAttribute("1")]
private GitVersionOptions gitVersionOptions { get; }
    public string DynamicGitRepositoryPath { get; }
    public string DotGitDirectory { get; }
    public string GitRootPath { get; }
    public string ProjectRootDirectory { get; }
    [NullableContextAttribute("1")]
public GitRepositoryInfo(IOptions`1<GitVersionOptions> options);
    [NullableContextAttribute("1")]
private GitVersionOptions get_gitVersionOptions();
    public sealed virtual string get_DynamicGitRepositoryPath();
    public sealed virtual string get_DotGitDirectory();
    public sealed virtual string get_GitRootPath();
    public sealed virtual string get_ProjectRootDirectory();
    private string GetDynamicGitRepositoryPath();
    private string GetDotGitDirectory();
    [NullableContextAttribute("1")]
private string GetProjectRootDirectory();
    private string GetGitRootPath();
    [NullableContextAttribute("1")]
private static bool GitRepoHasMatchingRemote(string possiblePath, string targetUrl);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class GitVersion.Git.ObjectId : object {
    private static LambdaEqualityHelper`1<IObjectId> equalityHelper;
    private static LambdaKeyComparer`2<IObjectId, string> comparerHelper;
    private ObjectId innerObjectId;
    public string Sha { get; }
    internal ObjectId(ObjectId objectId);
    public ObjectId(string sha);
    private static ObjectId();
    [NullableContextAttribute("2")]
public sealed virtual int CompareTo(IObjectId other);
    [NullableContextAttribute("2")]
public sealed virtual bool Equals(IObjectId other);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    public static ObjectId op_Implicit(ObjectId d);
    public sealed virtual string get_Sha();
    public sealed virtual string ToString(int prefixLength);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class GitVersion.Git.Reference : object {
    private static LambdaEqualityHelper`1<IReference> equalityHelper;
    private static LambdaKeyComparer`2<IReference, string> comparerHelper;
    internal Reference innerReference;
    [CompilerGeneratedAttribute]
private ReferenceName <Name>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private IObjectId <ReferenceTargetId>k__BackingField;
    public ReferenceName Name { get; }
    [NullableAttribute("2")]
public IObjectId ReferenceTargetId { get; }
    public string TargetIdentifier { get; }
    internal Reference(Reference reference);
    private static Reference();
    [CompilerGeneratedAttribute]
public sealed virtual ReferenceName get_Name();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual IObjectId get_ReferenceTargetId();
    [NullableContextAttribute("2")]
public sealed virtual int CompareTo(IReference other);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
public sealed virtual bool Equals(IReference other);
    public virtual int GetHashCode();
    public virtual string ToString();
    public sealed virtual string get_TargetIdentifier();
    public static Reference op_Implicit(Reference d);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
internal class GitVersion.Git.ReferenceCollection : object {
    private ReferenceCollection innerCollection;
    [NullableAttribute("2")]
public IReference Item { get; }
    [NullableAttribute("2")]
public IReference Item { get; }
    [NullableAttribute("2")]
public IReference Head { get; }
    internal ReferenceCollection(ReferenceCollection collection);
    public sealed virtual IEnumerator`1<IReference> GetEnumerator();
    public sealed virtual void Add(string name, string canonicalRefNameOrObject, bool allowOverwrite);
    public sealed virtual void UpdateTarget(IReference directRef, IObjectId targetId);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual IReference get_Item(string name);
    public sealed virtual IReference get_Item(ReferenceName referenceName);
    [NullableContextAttribute("2")]
public sealed virtual IReference get_Head();
    public sealed virtual IEnumerable`1<IReference> FromGlob(string prefix);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class GitVersion.Git.RefSpec : object {
    private static LambdaEqualityHelper`1<IRefSpec> equalityHelper;
    private static LambdaKeyComparer`2<IRefSpec, string> comparerHelper;
    private RefSpec innerRefSpec;
    public string Specification { get; }
    public RefSpecDirection Direction { get; }
    public string Source { get; }
    public string Destination { get; }
    internal RefSpec(RefSpec refSpec);
    private static RefSpec();
    [NullableContextAttribute("2")]
public sealed virtual int CompareTo(IRefSpec other);
    [NullableContextAttribute("2")]
public sealed virtual bool Equals(IRefSpec other);
    public sealed virtual string get_Specification();
    public sealed virtual RefSpecDirection get_Direction();
    public sealed virtual string get_Source();
    public sealed virtual string get_Destination();
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class GitVersion.Git.RefSpecCollection : object {
    private RefSpecCollection innerCollection;
    internal RefSpecCollection(RefSpecCollection collection);
    public sealed virtual IEnumerator`1<IRefSpec> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class GitVersion.Git.Remote : object {
    private static LambdaEqualityHelper`1<IRemote> equalityHelper;
    private static LambdaKeyComparer`2<IRemote, string> comparerHelper;
    private Remote innerRemote;
    public string Name { get; }
    public string Url { get; }
    public IEnumerable`1<IRefSpec> RefSpecs { get; }
    public IEnumerable`1<IRefSpec> FetchRefSpecs { get; }
    public IEnumerable`1<IRefSpec> PushRefSpecs { get; }
    internal Remote(Remote remote);
    private static Remote();
    [NullableContextAttribute("2")]
public sealed virtual int CompareTo(IRemote other);
    [NullableContextAttribute("2")]
public sealed virtual bool Equals(IRemote other);
    public sealed virtual string get_Name();
    public sealed virtual string get_Url();
    public sealed virtual IEnumerable`1<IRefSpec> get_RefSpecs();
    public sealed virtual IEnumerable`1<IRefSpec> get_FetchRefSpecs();
    public sealed virtual IEnumerable`1<IRefSpec> get_PushRefSpecs();
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
internal class GitVersion.Git.RemoteCollection : object {
    private RemoteCollection innerCollection;
    [NullableAttribute("2")]
public IRemote Item { get; }
    internal RemoteCollection(RemoteCollection collection);
    public sealed virtual IEnumerator`1<IRemote> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual IRemote get_Item(string name);
    public sealed virtual void Remove(string remoteName);
    public sealed virtual void Update(string remoteName, string refSpec);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class GitVersion.Git.RepositoryExtensions : object {
    internal static void RunSafe(Action operation);
    internal static T RunSafe(Func`1<T> operation);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class GitVersion.Git.Tag : object {
    private static LambdaEqualityHelper`1<ITag> equalityHelper;
    private static LambdaKeyComparer`2<ITag, string> comparerHelper;
    private Tag innerTag;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Lazy`1<ICommit> commitLazy;
    [CompilerGeneratedAttribute]
private ReferenceName <Name>k__BackingField;
    public ReferenceName Name { get; }
    public string TargetSha { get; }
    public ICommit Commit { get; }
    internal Tag(Tag tag);
    private static Tag();
    [CompilerGeneratedAttribute]
public sealed virtual ReferenceName get_Name();
    [NullableContextAttribute("2")]
public sealed virtual int CompareTo(ITag other);
    [NullableContextAttribute("2")]
public sealed virtual bool Equals(ITag other);
    public sealed virtual string get_TargetSha();
    public sealed virtual ICommit get_Commit();
    [NullableContextAttribute("2")]
private ICommit PeeledTargetCommit();
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class GitVersion.Git.TagCollection : object {
    private TagCollection innerCollection;
    internal TagCollection(TagCollection collection);
    public sealed virtual IEnumerator`1<ITag> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public class GitVersion.GitVersionLibGit2SharpModule : object {
    [NullableContextAttribute("1")]
public sealed virtual void RegisterTypes(IServiceCollection services);
}
