[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class GitVersion.GitVersionOutputTool : object {
    private GitVersionOptions gitVersionOptions;
    private IOutputGenerator outputGenerator;
    private IWixVersionFileUpdater wixVersionFileUpdater;
    private IGitVersionInfoGenerator gitVersionInfoGenerator;
    private IAssemblyInfoFileUpdater assemblyInfoFileUpdater;
    private IProjectFileUpdater projectFileUpdater;
    public GitVersionOutputTool(IOptions`1<GitVersionOptions> options, IOutputGenerator outputGenerator, IWixVersionFileUpdater wixVersionFileUpdater, IGitVersionInfoGenerator gitVersionInfoGenerator, IAssemblyInfoFileUpdater assemblyInfoFileUpdater, IProjectFileUpdater projectFileUpdater);
    public sealed virtual void OutputVariables(GitVersionVariables variables, bool updateBuildNumber);
    public sealed virtual void UpdateAssemblyInfo(GitVersionVariables variables);
    public sealed virtual void UpdateWixVersionFile(GitVersionVariables variables);
    public sealed virtual void GenerateGitVersionInformation(GitVersionVariables variables, FileWriteInfo fileWriteInfo, string targetNamespace);
}
[NullableContextAttribute("1")]
public interface GitVersion.IGitVersionOutputTool {
    public abstract virtual void OutputVariables(GitVersionVariables variables, bool updateBuildNumber);
    public abstract virtual void UpdateAssemblyInfo(GitVersionVariables variables);
    public abstract virtual void UpdateWixVersionFile(GitVersionVariables variables);
    public abstract virtual void GenerateGitVersionInformation(GitVersionVariables variables, FileWriteInfo fileWriteInfo, string targetNamespace);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
internal class GitVersion.Output.AssemblyInfo.AssemblyInfoContext : ValueType {
    [CompilerGeneratedAttribute]
private string <WorkingDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnsureAssemblyInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <AssemblyInfoFiles>k__BackingField;
    public string WorkingDirectory { get; public set; }
    public bool EnsureAssemblyInfo { get; public set; }
    public String[] AssemblyInfoFiles { get; public set; }
    public AssemblyInfoContext(string WorkingDirectory, bool EnsureAssemblyInfo, String[] AssemblyInfoFiles);
    [CompilerGeneratedAttribute]
public sealed virtual string get_WorkingDirectory();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_WorkingDirectory(string value);
    [CompilerGeneratedAttribute]
public bool get_EnsureAssemblyInfo();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_EnsureAssemblyInfo(bool value);
    [CompilerGeneratedAttribute]
public String[] get_AssemblyInfoFiles();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_AssemblyInfoFiles(String[] value);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
public virtual string ToString();
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(AssemblyInfoContext left, AssemblyInfoContext right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(AssemblyInfoContext left, AssemblyInfoContext right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(AssemblyInfoContext other);
    [CompilerGeneratedAttribute]
public void Deconstruct(String& WorkingDirectory, Boolean& EnsureAssemblyInfo, String[]& AssemblyInfoFiles);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class GitVersion.Output.AssemblyInfo.AssemblyInfoFileUpdater : object {
    [CompilerGeneratedAttribute]
private ILog <log>P;
    [CompilerGeneratedAttribute]
private IFileSystem <fileSystem>P;
    private List`1<Action> restoreBackupTasks;
    private List`1<Action> cleanupBackupTasks;
    private IDictionary`2<string, Regex> assemblyAttributeRegexes;
    private Regex assemblyVersionRegex;
    private Regex assemblyInfoVersionRegex;
    private Regex assemblyFileVersionRegex;
    private static string NewLine;
    private TemplateManager templateManager;
    public AssemblyInfoFileUpdater(ILog log, IFileSystem fileSystem);
    public sealed virtual void Execute(GitVersionVariables variables, AssemblyInfoContext context);
    public sealed virtual void Dispose();
    private void CommitChanges();
    private string ReplaceOrInsertAfterLastAssemblyAttributeOrAppend(Regex replaceRegex, string inputString, string replaceString, string fileExtension, Boolean& appendedAttributes);
    [IteratorStateMachineAttribute("GitVersion.Output.AssemblyInfo.AssemblyInfoFileUpdater/<GetAssemblyInfoFiles>d__15")]
private IEnumerable`1<FileInfo> GetAssemblyInfoFiles(AssemblyInfoContext context);
    private bool EnsureVersionAssemblyInfoFile(string fullPath, bool ensureAssemblyInfo);
}
internal interface GitVersion.Output.AssemblyInfo.IAssemblyInfoFileUpdater {
}
internal interface GitVersion.Output.AssemblyInfo.IProjectFileUpdater {
    [NullableContextAttribute("1")]
public abstract virtual bool CanUpdateProjectFile(XElement xmlRoot);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class GitVersion.Output.AssemblyInfo.ProjectFileUpdater : object {
    [CompilerGeneratedAttribute]
private ILog <log>P;
    [CompilerGeneratedAttribute]
private IFileSystem <fileSystem>P;
    internal static string AssemblyVersionElement;
    private static string FileVersionElement;
    private static string InformationalVersionElement;
    private static string VersionElement;
    private List`1<Action> restoreBackupTasks;
    private List`1<Action> cleanupBackupTasks;
    public ProjectFileUpdater(ILog log, IFileSystem fileSystem);
    public sealed virtual void Execute(GitVersionVariables variables, AssemblyInfoContext context);
    public sealed virtual bool CanUpdateProjectFile(XElement xmlRoot);
    internal static void UpdateProjectVersionElement(XElement xmlRoot, string versionElement, string versionValue);
    public sealed virtual void Dispose();
    private void CommitChanges();
    [IteratorStateMachineAttribute("GitVersion.Output.AssemblyInfo.ProjectFileUpdater/<GetProjectFiles>d__14")]
private IEnumerable`1<FileInfo> GetProjectFiles(AssemblyInfoContext context);
    private static bool IsSupportedProjectFile(string fileName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("384")]
public class GitVersion.Output.Attributes.JsonPropertyDescriptionAttribute : JsonAttribute {
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    public string Description { get; }
    public JsonPropertyDescriptionAttribute(string description);
    [CompilerGeneratedAttribute]
public string get_Description();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
internal class GitVersion.Output.GitVersionInfo.GitVersionInfoContext : ValueType {
    [CompilerGeneratedAttribute]
private string <WorkingDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FileName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FileExtension>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <TargetNamespace>k__BackingField;
    public string WorkingDirectory { get; public set; }
    public string FileName { get; public set; }
    public string FileExtension { get; public set; }
    [NullableAttribute("2")]
public string TargetNamespace { get; public set; }
    public GitVersionInfoContext(string WorkingDirectory, string FileName, string FileExtension, string TargetNamespace);
    public GitVersionInfoContext(string workingDirectory, string fileName, string fileExtension);
    [CompilerGeneratedAttribute]
public sealed virtual string get_WorkingDirectory();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_WorkingDirectory(string value);
    [CompilerGeneratedAttribute]
public string get_FileName();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_FileName(string value);
    [CompilerGeneratedAttribute]
public string get_FileExtension();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_FileExtension(string value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_TargetNamespace();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_TargetNamespace(string value);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
public virtual string ToString();
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(GitVersionInfoContext left, GitVersionInfoContext right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(GitVersionInfoContext left, GitVersionInfoContext right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(GitVersionInfoContext other);
    [CompilerGeneratedAttribute]
public void Deconstruct(String& WorkingDirectory, String& FileName, String& FileExtension, String& TargetNamespace);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class GitVersion.Output.GitVersionInfo.GitVersionInfoGenerator : object {
    private static string targetNamespaceSentinelValue;
    private IFileSystem fileSystem;
    private TemplateManager templateManager;
    public GitVersionInfoGenerator(IFileSystem fileSystem);
    public sealed virtual void Execute(GitVersionVariables variables, GitVersionInfoContext context);
    public sealed virtual void Dispose();
    private static string GetIndentation(string fileExtension);
}
internal interface GitVersion.Output.GitVersionInfo.IGitVersionInfoGenerator {
}
public class GitVersion.Output.GitVersionOutputModule : object {
    [NullableContextAttribute("1")]
public sealed virtual void RegisterTypes(IServiceCollection services);
}
internal interface GitVersion.Output.OutputGenerator.IOutputGenerator {
}
[IsReadOnlyAttribute]
internal class GitVersion.Output.OutputGenerator.OutputContext : ValueType {
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private string <WorkingDirectory>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <OutputFile>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <UpdateBuildNumber>k__BackingField;
    [NullableAttribute("1")]
public string WorkingDirectory { get; public set; }
    [NullableAttribute("2")]
public string OutputFile { get; public set; }
    public Nullable`1<bool> UpdateBuildNumber { get; public set; }
    [NullableContextAttribute("1")]
public OutputContext(string WorkingDirectory, string OutputFile, Nullable`1<bool> UpdateBuildNumber);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public sealed virtual string get_WorkingDirectory();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_WorkingDirectory(string value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_OutputFile();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_OutputFile(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_UpdateBuildNumber();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_UpdateBuildNumber(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(OutputContext left, OutputContext right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(OutputContext left, OutputContext right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(OutputContext other);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public void Deconstruct(String& WorkingDirectory, String& OutputFile, Nullable`1& UpdateBuildNumber);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class GitVersion.Output.OutputGenerator.OutputGenerator : object {
    [CompilerGeneratedAttribute]
private IEnvironment <environment>P;
    private IConsole console;
    private IFileSystem fileSystem;
    private IVersionVariableSerializer serializer;
    private IOptions`1<GitVersionOptions> options;
    private ICurrentBuildAgent buildAgent;
    public OutputGenerator(ICurrentBuildAgent buildAgent, IConsole console, IFileSystem fileSystem, IVersionVariableSerializer serializer, IEnvironment environment, IOptions`1<GitVersionOptions> options);
    public sealed virtual void Execute(GitVersionVariables variables, OutputContext context);
    public sealed virtual void Dispose();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class GitVersion.Output.TemplateManager : object {
    private Dictionary`2<string, string> templates;
    private Dictionary`2<string, string> addFormats;
    public TemplateManager(TemplateType templateType);
    public string GetTemplateFor(string fileExtension);
    public string GetAddFormatFor(string fileExtension);
    public bool IsSupported(string fileExtension);
    [IteratorStateMachineAttribute("GitVersion.Output.TemplateManager/<GetEmbeddedTemplates>d__6")]
private static IEnumerable`1<ValueTuple`2<string, string>> GetEmbeddedTemplates(TemplateType templateType, string templateCategory);
}
internal enum GitVersion.Output.TemplateType : Enum {
    public int value__;
    public static TemplateType AssemblyInfo;
    public static TemplateType GitVersionInfo;
}
internal interface GitVersion.Output.WixUpdater.IWixVersionFileUpdater {
}
[IsReadOnlyAttribute]
internal class GitVersion.Output.WixUpdater.WixVersionContext : ValueType {
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private string <WorkingDirectory>k__BackingField;
    [NullableAttribute("1")]
public string WorkingDirectory { get; public set; }
    [NullableContextAttribute("1")]
public WixVersionContext(string WorkingDirectory);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public sealed virtual string get_WorkingDirectory();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_WorkingDirectory(string value);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(WixVersionContext left, WixVersionContext right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(WixVersionContext left, WixVersionContext right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(WixVersionContext other);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public void Deconstruct(String& WorkingDirectory);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class GitVersion.Output.WixUpdater.WixVersionFileUpdater : object {
    private IFileSystem fileSystem;
    private ILog log;
    [NullableAttribute("2")]
private string wixVersionFile;
    public static string WixVersionFileName;
    public WixVersionFileUpdater(ILog log, IFileSystem fileSystem);
    public sealed virtual void Execute(GitVersionVariables variables, WixVersionContext context);
    private static string GetWixFormatFromVersionVariables(GitVersionVariables variables);
    public sealed virtual void Dispose();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class GitVersion.OutputVariables.VersionVariableSerializer : object {
    [CompilerGeneratedAttribute]
private IFileSystem <fileSystem>P;
    public VersionVariableSerializer(IFileSystem fileSystem);
    public sealed virtual GitVersionVariables FromJson(string json);
    public sealed virtual string ToJson(GitVersionVariables gitVersionVariables);
    public sealed virtual GitVersionVariables FromFile(string filePath);
    public sealed virtual void ToFile(GitVersionVariables gitVersionVariables, string filePath);
    private static GitVersionVariables FromDictionary(IEnumerable`1<KeyValuePair`2<string, string>> properties);
    private GitVersionVariables FromFileInternal(string filePath);
    private void ToFileInternal(GitVersionVariables gitVersionVariables, string filePath);
    private static JsonSerializerOptions JsonSerializerOptions();
    [NullableContextAttribute("2")]
private static object ChangeType(object value, Type type);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class GitVersion.OutputVariables.VersionVariablesJsonModel : object {
    [CompilerGeneratedAttribute]
private string <AssemblySemFileVer>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AssemblySemVer>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BranchName>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <BuildMetaData>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CommitDate>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <CommitsSinceVersionSource>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EscapedBranchName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FullBuildMetaData>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FullSemVer>k__BackingField;
    [CompilerGeneratedAttribute]
private string <InformationalVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Major>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MajorMinorPatch>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Minor>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Patch>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PreReleaseLabel>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PreReleaseLabelWithDash>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <PreReleaseNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PreReleaseTag>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PreReleaseTagWithDash>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SemVer>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Sha>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ShortSha>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <UncommittedChanges>k__BackingField;
    [CompilerGeneratedAttribute]
private string <VersionSourceSha>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <WeightedPreReleaseNumber>k__BackingField;
    [JsonPropertyDescriptionAttribute("Suitable for .NET AssemblyFileVersion. Defaults to Major.Minor.Patch.0.")]
public string AssemblySemFileVer { get; public set; }
    [JsonPropertyDescriptionAttribute("Suitable for .NET AssemblyVersion. Defaults to Major.Minor.0.0")]
public string AssemblySemVer { get; public set; }
    [JsonPropertyDescriptionAttribute("The name of the checked out Git branch.")]
public string BranchName { get; public set; }
    [JsonPropertyDescriptionAttribute("The build metadata, usually representing number of commits since the VersionSourceSha.")]
public Nullable`1<int> BuildMetaData { get; public set; }
    [JsonPropertyDescriptionAttribute("The ISO-8601 formatted date of the commit identified by Sha.")]
public string CommitDate { get; public set; }
    [JsonPropertyDescriptionAttribute("The number of commits since the version source.")]
public Nullable`1<int> CommitsSinceVersionSource { get; public set; }
    [JsonPropertyDescriptionAttribute("Equal to BranchName, but with / replaced with -.")]
public string EscapedBranchName { get; public set; }
    [JsonPropertyDescriptionAttribute("The BuildMetaData suffixed with BranchName and Sha.")]
public string FullBuildMetaData { get; public set; }
    [JsonPropertyDescriptionAttribute("The full, SemVer 2.0 compliant version number.")]
public string FullSemVer { get; public set; }
    [JsonPropertyDescriptionAttribute("Suitable for .NET AssemblyInformationalVersion. Defaults to FullSemVer suffixed by FullBuildMetaData.")]
public string InformationalVersion { get; public set; }
    [JsonPropertyDescriptionAttribute("The major version. Should be incremented on breaking changes.")]
public Nullable`1<int> Major { get; public set; }
    [JsonPropertyDescriptionAttribute("Major, Minor and Patch joined together, separated by '.'.")]
public string MajorMinorPatch { get; public set; }
    [JsonPropertyDescriptionAttribute("The minor version. Should be incremented on new features.")]
public Nullable`1<int> Minor { get; public set; }
    [JsonPropertyDescriptionAttribute("The patch version. Should be incremented on bug fixes.")]
public Nullable`1<int> Patch { get; public set; }
    [JsonPropertyDescriptionAttribute("The pre-release label is the name of the pre-release.")]
public string PreReleaseLabel { get; public set; }
    [JsonPropertyDescriptionAttribute("The pre-release label prefixed with a dash.")]
public string PreReleaseLabelWithDash { get; public set; }
    [JsonPropertyDescriptionAttribute("The pre-release number is the number of commits since the last version bump.")]
public Nullable`1<int> PreReleaseNumber { get; public set; }
    [JsonPropertyDescriptionAttribute("The pre-release tag is the pre-release label suffixed by the PreReleaseNumber.")]
public string PreReleaseTag { get; public set; }
    [JsonPropertyDescriptionAttribute("The pre-release tag prefixed with a dash.")]
public string PreReleaseTagWithDash { get; public set; }
    [JsonPropertyDescriptionAttribute("The semantic version number, including PreReleaseTagWithDash for pre-release version numbers.")]
public string SemVer { get; public set; }
    [JsonPropertyDescriptionAttribute("The SHA of the Git commit.")]
public string Sha { get; public set; }
    [JsonPropertyDescriptionAttribute("The Sha limited to 7 characters.")]
public string ShortSha { get; public set; }
    [JsonPropertyDescriptionAttribute("The number of uncommitted changes present in the repository.")]
public Nullable`1<int> UncommittedChanges { get; public set; }
    [JsonPropertyDescriptionAttribute("The SHA of the commit used as version source.")]
public string VersionSourceSha { get; public set; }
    [JsonPropertyDescriptionAttribute("A summation of branch specific pre-release-weight and the PreReleaseNumber. Can be used to obtain a monotonically increasing version number across the branches.")]
public Nullable`1<int> WeightedPreReleaseNumber { get; public set; }
    [CompilerGeneratedAttribute]
public string get_AssemblySemFileVer();
    [CompilerGeneratedAttribute]
public void set_AssemblySemFileVer(string value);
    [CompilerGeneratedAttribute]
public string get_AssemblySemVer();
    [CompilerGeneratedAttribute]
public void set_AssemblySemVer(string value);
    [CompilerGeneratedAttribute]
public string get_BranchName();
    [CompilerGeneratedAttribute]
public void set_BranchName(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_BuildMetaData();
    [CompilerGeneratedAttribute]
public void set_BuildMetaData(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public string get_CommitDate();
    [CompilerGeneratedAttribute]
public void set_CommitDate(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_CommitsSinceVersionSource();
    [CompilerGeneratedAttribute]
public void set_CommitsSinceVersionSource(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public string get_EscapedBranchName();
    [CompilerGeneratedAttribute]
public void set_EscapedBranchName(string value);
    [CompilerGeneratedAttribute]
public string get_FullBuildMetaData();
    [CompilerGeneratedAttribute]
public void set_FullBuildMetaData(string value);
    [CompilerGeneratedAttribute]
public string get_FullSemVer();
    [CompilerGeneratedAttribute]
public void set_FullSemVer(string value);
    [CompilerGeneratedAttribute]
public string get_InformationalVersion();
    [CompilerGeneratedAttribute]
public void set_InformationalVersion(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Major();
    [CompilerGeneratedAttribute]
public void set_Major(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public string get_MajorMinorPatch();
    [CompilerGeneratedAttribute]
public void set_MajorMinorPatch(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Minor();
    [CompilerGeneratedAttribute]
public void set_Minor(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Patch();
    [CompilerGeneratedAttribute]
public void set_Patch(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public string get_PreReleaseLabel();
    [CompilerGeneratedAttribute]
public void set_PreReleaseLabel(string value);
    [CompilerGeneratedAttribute]
public string get_PreReleaseLabelWithDash();
    [CompilerGeneratedAttribute]
public void set_PreReleaseLabelWithDash(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_PreReleaseNumber();
    [CompilerGeneratedAttribute]
public void set_PreReleaseNumber(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public string get_PreReleaseTag();
    [CompilerGeneratedAttribute]
public void set_PreReleaseTag(string value);
    [CompilerGeneratedAttribute]
public string get_PreReleaseTagWithDash();
    [CompilerGeneratedAttribute]
public void set_PreReleaseTagWithDash(string value);
    [CompilerGeneratedAttribute]
public string get_SemVer();
    [CompilerGeneratedAttribute]
public void set_SemVer(string value);
    [CompilerGeneratedAttribute]
public string get_Sha();
    [CompilerGeneratedAttribute]
public void set_Sha(string value);
    [CompilerGeneratedAttribute]
public string get_ShortSha();
    [CompilerGeneratedAttribute]
public void set_ShortSha(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_UncommittedChanges();
    [CompilerGeneratedAttribute]
public void set_UncommittedChanges(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public string get_VersionSourceSha();
    [CompilerGeneratedAttribute]
public void set_VersionSourceSha(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_WeightedPreReleaseNumber();
    [CompilerGeneratedAttribute]
public void set_WeightedPreReleaseNumber(Nullable`1<int> value);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class GitVersion.OutputVariables.VersionVariablesJsonStringConverter : JsonConverter`1<string> {
    public bool HandleNull { get; }
    public virtual bool CanConvert(Type typeToConvert);
    public virtual string Read(Utf8JsonReader& reader, Type typeToConvert, JsonSerializerOptions options);
    public virtual void Write(Utf8JsonWriter writer, string value, JsonSerializerOptions options);
    public virtual bool get_HandleNull();
}
