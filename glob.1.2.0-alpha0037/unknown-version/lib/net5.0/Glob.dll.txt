[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class GlobExpressions.AST.CharacterSet : SubSegment {
    [CompilerGeneratedAttribute]
private bool <Inverted>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Characters>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExpandedCharacters>k__BackingField;
    public bool Inverted { get; }
    public string Characters { get; }
    public string ExpandedCharacters { get; }
    public CharacterSet(string characters, bool inverted);
    [CompilerGeneratedAttribute]
public bool get_Inverted();
    [CompilerGeneratedAttribute]
public string get_Characters();
    [CompilerGeneratedAttribute]
public string get_ExpandedCharacters();
    public bool Matches(char c, bool caseSensitive);
    private bool Contains(char c, bool caseSensitive);
    private string CalculateExpandedForm(string chars);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class GlobExpressions.AST.CharacterWildcard : SubSegment {
    public static CharacterWildcard Default;
    private static CharacterWildcard();
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class GlobExpressions.AST.DirectorySegment : Segment {
    [CompilerGeneratedAttribute]
private SubSegment[] <SubSegments>k__BackingField;
    public SubSegment[] SubSegments { get; }
    public DirectorySegment(IEnumerable`1<SubSegment> subSegments);
    [CompilerGeneratedAttribute]
public SubSegment[] get_SubSegments();
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class GlobExpressions.AST.DirectoryWildcard : Segment {
    public static DirectoryWildcard Default;
    private static DirectoryWildcard();
    public virtual string ToString();
}
internal abstract class GlobExpressions.AST.GlobNode : object {
    [CompilerGeneratedAttribute]
private GlobNodeType <Type>k__BackingField;
    public GlobNodeType Type { get; }
    protected GlobNode(GlobNodeType type);
    [CompilerGeneratedAttribute]
public GlobNodeType get_Type();
}
internal enum GlobExpressions.AST.GlobNodeType : Enum {
    public int value__;
    public static GlobNodeType Tree;
    public static GlobNodeType Root;
    public static GlobNodeType DirectoryWildcard;
    public static GlobNodeType DirectorySegment;
    public static GlobNodeType CharacterSet;
    public static GlobNodeType Identifier;
    public static GlobNodeType LiteralSet;
    public static GlobNodeType StringWildcard;
    public static GlobNodeType CharacterWildcard;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class GlobExpressions.AST.Identifier : SubSegment {
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    public string Value { get; }
    public Identifier(string value);
    [CompilerGeneratedAttribute]
public string get_Value();
    public virtual string ToString();
    public static Identifier op_Implicit(string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class GlobExpressions.AST.LiteralSet : SubSegment {
    [CompilerGeneratedAttribute]
private Identifier[] <Literals>k__BackingField;
    public Identifier[] Literals { get; }
    public LiteralSet(Identifier[] literals);
    public LiteralSet(IEnumerable`1<Identifier> literals);
    [CompilerGeneratedAttribute]
public Identifier[] get_Literals();
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class GlobExpressions.AST.Root : Segment {
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    public string Text { get; }
    public Root(string text);
    [CompilerGeneratedAttribute]
public string get_Text();
    public virtual string ToString();
}
internal abstract class GlobExpressions.AST.Segment : GlobNode {
    protected Segment(GlobNodeType type);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class GlobExpressions.AST.StringWildcard : SubSegment {
    public static StringWildcard Default;
    private static StringWildcard();
    public virtual string ToString();
}
internal abstract class GlobExpressions.AST.SubSegment : GlobNode {
    protected SubSegment(GlobNodeType type);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class GlobExpressions.AST.Tree : GlobNode {
    [CompilerGeneratedAttribute]
private Segment[] <Segments>k__BackingField;
    public Segment[] Segments { get; }
    public Tree(IEnumerable`1<Segment> segments);
    [CompilerGeneratedAttribute]
public Segment[] get_Segments();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class GlobExpressions.Glob : object {
    [CompilerGeneratedAttribute]
private string <Pattern>k__BackingField;
    [NullableAttribute("2")]
private Tree _root;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Segment[] _segments;
    private bool _caseSensitive;
    private bool _matchFilenameOnly;
    public string Pattern { get; }
    public Glob(string pattern, GlobOptions options);
    [CompilerGeneratedAttribute]
public string get_Pattern();
    private void Compile();
    public bool IsMatch(string input);
    public static bool IsMatch(string input, string pattern, GlobOptions options);
    public static IEnumerable`1<string> Files(string workingDirectory, string pattern, GlobOptions options);
    public static IEnumerable`1<string> Files(string workingDirectory, string pattern);
    public static IEnumerable`1<FileInfo> Files(DirectoryInfo workingDirectory, string pattern);
    public static IEnumerable`1<FileInfo> Files(DirectoryInfo workingDirectory, string pattern, GlobOptions options);
    public static IEnumerable`1<string> Directories(string workingDirectory, string pattern);
    public static IEnumerable`1<string> Directories(string workingDirectory, string pattern, GlobOptions options);
    private static Func`2<T, string> RemovePrefix(int truncateLength);
    public static IEnumerable`1<DirectoryInfo> Directories(DirectoryInfo workingDirectory, string pattern);
    public static IEnumerable`1<DirectoryInfo> Directories(DirectoryInfo workingDirectory, string pattern, GlobOptions options);
    public static IEnumerable`1<string> FilesAndDirectories(string workingDirectory, string pattern);
    public static IEnumerable`1<string> FilesAndDirectories(string workingDirectory, string pattern, GlobOptions options);
    public static IEnumerable`1<FileSystemInfo> FilesAndDirectories(DirectoryInfo workingDirectory, string pattern);
    public static IEnumerable`1<FileSystemInfo> FilesAndDirectories(DirectoryInfo workingDirectory, string pattern, GlobOptions options);
    private static int GetTruncateLength(FileSystemInfo directoryInfo);
}
internal static class GlobExpressions.GlobEvaluator : object {
    [NullableContextAttribute("1")]
public static bool Eval(Segment[] segments, int segmentIndex, String[] input, int inputIndex, bool caseSensitive);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class GlobExpressions.GlobExtensions : object {
    [ExtensionAttribute]
public static IEnumerable`1<DirectoryInfo> GlobDirectories(DirectoryInfo di, string pattern);
    [ExtensionAttribute]
public static IEnumerable`1<FileInfo> GlobFiles(DirectoryInfo di, string pattern);
    [ExtensionAttribute]
public static IEnumerable`1<FileSystemInfo> GlobFileSystemInfos(DirectoryInfo di, string pattern);
}
[FlagsAttribute]
public enum GlobExpressions.GlobOptions : Enum {
    public int value__;
    public static GlobOptions None;
    public static GlobOptions Compiled;
    public static GlobOptions CaseInsensitive;
    public static GlobOptions MatchFilenameOnly;
}
public class GlobExpressions.GlobPatternException : Exception {
    [NullableContextAttribute("1")]
internal GlobPatternException(string message);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class GlobExpressions.Matcher : object {
    [ExtensionAttribute]
public static bool MatchesSegment(DirectorySegment segment, string pathSegment, bool caseSensitive);
    private static bool MatchesSubSegment(SubSegment[] segments, int segmentIndex, int literalSetIndex, string pathSegment, int pathIndex, bool caseSensitive);
    private static bool SubstringEquals(string segment, int segmentIndex, string search, bool caseSensitive);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class GlobExpressions.Parser : object {
    private string _source;
    private int _sourceIndex;
    private int _currentCharacter;
    private StringBuilder _spelling;
    [NullableContextAttribute("2")]
public Parser(string pattern);
    private string GetSpelling();
    private StringWildcard ParseStar();
    private CharacterWildcard ParseCharacterWildcard();
    private CharacterSet ParseCharacterSet();
    private LiteralSet ParseLiteralSet();
    private void Accept();
    private void Accept(int expected);
    private void SkipIt(int expected);
    private void SkipIt();
    private void SetCurrentCharacter();
    private int PeekChar();
    private Identifier ParseIdentifier(bool inLiteralSet);
    private void ParseEscapeSequence(bool inLiteralSet);
    private SubSegment ParseSubSegment();
    private Segment ParseSegment();
    private Root ParseRoot();
    protected internal Tree ParseTree();
    public GlobNode Parse();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class GlobExpressions.PathTraverser : object {
    [ExtensionAttribute]
public static IEnumerable`1<FileSystemInfo> Traverse(DirectoryInfo root, string pattern, bool caseSensitive, bool emitFiles, bool emitDirectories);
    internal static IEnumerable`1<FileSystemInfo> Traverse(DirectoryInfo root, Segment[] segments, TraverseOptions options);
    private static IEnumerable`1<FileSystemInfo> Traverse(List`1<DirectoryInfo> roots, Segment[] segments, TraverseOptions options);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class GlobExpressions.PathTraverserEnumerable : object {
    private List`1<DirectoryInfo> _originalRoots;
    private Segment[] _segments;
    private TraverseOptions _options;
    private static FileSystemInfo[] _emptyFileSystemInfoArray;
    private static DirectoryInfo[] _emptyPathJobArray;
    public PathTraverserEnumerable(List`1<DirectoryInfo> roots, Segment[] segments, TraverseOptions options);
    private static PathTraverserEnumerable();
    [IteratorStateMachineAttribute("GlobExpressions.PathTraverserEnumerable/<GetEnumerator>d__6")]
public sealed virtual IEnumerator`1<FileSystemInfo> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private IEnumerable`1<DirectoryInfo> JobsMatchingSegment(List`1<DirectoryInfo> nextSegmentRoots, DirectoryInfo directoryInfo, Segment segment);
    private static IEnumerable`1<FileSystemInfo> FilesMatchingSegment(IEnumerable`1<FileInfo> fileInfos, Segment segment, bool caseSensitive);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class GlobExpressions.TraverseOptions : object {
    private Dictionary`2<string, FileInfo[]> _fileCache;
    private Dictionary`2<string, DirectoryInfo[]> _dirCache;
    [CompilerGeneratedAttribute]
private bool <CaseSensitive>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EmitFiles>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EmitDirectories>k__BackingField;
    private static FileInfo[] _emptyFileInfos;
    private static DirectoryInfo[] _emptyDirectoryInfos;
    public bool CaseSensitive { get; }
    public bool EmitFiles { get; }
    public bool EmitDirectories { get; }
    public TraverseOptions(bool caseSensitive, bool emitFiles, bool emitDirectories);
    private static TraverseOptions();
    [CompilerGeneratedAttribute]
public bool get_CaseSensitive();
    [CompilerGeneratedAttribute]
public bool get_EmitFiles();
    [CompilerGeneratedAttribute]
public bool get_EmitDirectories();
    public virtual FileInfo[] GetFiles(DirectoryInfo root);
    public virtual DirectoryInfo[] GetDirectories(DirectoryInfo root);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
