internal static class Google.Api.Gax.ActivitySources : object {
    private static ConcurrentDictionary`2<Type, ActivitySource> s_activitySources;
    private static ActivitySources();
    public static ActivitySource FromType(Type type);
    public static ActivitySource FromType();
    private static ActivitySource CreateActivitySource(Type type);
}
[FlagsAttribute]
public enum Google.Api.Gax.ApiTransports : Enum {
    public int value__;
    public static ApiTransports None;
    public static ApiTransports Grpc;
    public static ApiTransports Rest;
}
public class Google.Api.Gax.BatchingSettings : object {
    [CompilerGeneratedAttribute]
private Nullable`1<long> <ElementCountThreshold>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <ByteCountThreshold>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TimeSpan> <DelayThreshold>k__BackingField;
    public Nullable`1<long> ElementCountThreshold { get; }
    public Nullable`1<long> ByteCountThreshold { get; }
    public Nullable`1<TimeSpan> DelayThreshold { get; }
    public BatchingSettings(Nullable`1<long> elementCountThreshold, Nullable`1<long> byteCountThreshold, Nullable`1<TimeSpan> delayThreshold);
    [CompilerGeneratedAttribute]
public Nullable`1<long> get_ElementCountThreshold();
    [CompilerGeneratedAttribute]
public Nullable`1<long> get_ByteCountThreshold();
    [CompilerGeneratedAttribute]
public Nullable`1<TimeSpan> get_DelayThreshold();
}
public class Google.Api.Gax.CloudRunPlatformDetails : object {
    [CompilerGeneratedAttribute]
private string <MetadataJson>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProjectId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Zone>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Region>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ServiceName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RevisionName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ConfigurationName>k__BackingField;
    public string MetadataJson { get; }
    public string ProjectId { get; }
    public string Zone { get; }
    public string Region { get; }
    public string ServiceName { get; }
    public string RevisionName { get; }
    public string ConfigurationName { get; }
    public CloudRunPlatformDetails(string metadataJson, string projectId, string zone, string serviceName, string revisionName, string configurationName);
    public static CloudRunPlatformDetails TryLoad(string metadataJson);
    [CompilerGeneratedAttribute]
public string get_MetadataJson();
    [CompilerGeneratedAttribute]
public string get_ProjectId();
    [CompilerGeneratedAttribute]
public string get_Zone();
    [CompilerGeneratedAttribute]
public string get_Region();
    [CompilerGeneratedAttribute]
public string get_ServiceName();
    [CompilerGeneratedAttribute]
public string get_RevisionName();
    [CompilerGeneratedAttribute]
public string get_ConfigurationName();
    public virtual string ToString();
}
public static class Google.Api.Gax.EmptyDictionary`2 : object {
    [CompilerGeneratedAttribute]
private static IDictionary`2<TKey, TValue> <Instance>k__BackingField;
    public static IDictionary`2<TKey, TValue> Instance { get; }
    private static EmptyDictionary`2();
    [CompilerGeneratedAttribute]
public static IDictionary`2<TKey, TValue> get_Instance();
}
public enum Google.Api.Gax.EmulatorDetection : Enum {
    public int value__;
    public static EmulatorDetection None;
    public static EmulatorDetection ProductionOnly;
    public static EmulatorDetection EmulatorOnly;
    public static EmulatorDetection EmulatorOrProduction;
}
public class Google.Api.Gax.Expiration : object {
    [CompilerGeneratedAttribute]
private static Expiration <None>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TimeSpan> <Timeout>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <Deadline>k__BackingField;
    public static Expiration None { get; }
    public Nullable`1<TimeSpan> Timeout { get; }
    public Nullable`1<DateTime> Deadline { get; }
    public ExpirationType Type { get; }
    private Expiration(Nullable`1<TimeSpan> timeout, Nullable`1<DateTime> deadline);
    private static Expiration();
    public static Expiration FromTimeout(TimeSpan timeout);
    public static Expiration FromDeadline(DateTime deadline);
    [CompilerGeneratedAttribute]
public static Expiration get_None();
    [CompilerGeneratedAttribute]
public Nullable`1<TimeSpan> get_Timeout();
    [CompilerGeneratedAttribute]
public Nullable`1<DateTime> get_Deadline();
    public ExpirationType get_Type();
}
[ExtensionAttribute]
public static class Google.Api.Gax.ExpirationExtensions : object {
    [ExtensionAttribute]
public static Nullable`1<DateTime> CalculateDeadline(Expiration expiration, IClock clock);
}
public enum Google.Api.Gax.ExpirationType : Enum {
    public int value__;
    public static ExpirationType None;
    public static ExpirationType Timeout;
    public static ExpirationType Deadline;
}
public static class Google.Api.Gax.FieldFormats : object {
    public static string GenerateUuid4();
}
public class Google.Api.Gax.FlowControlSettings : object {
    [CompilerGeneratedAttribute]
private Nullable`1<long> <MaxOutstandingElementCount>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <MaxOutstandingByteCount>k__BackingField;
    public Nullable`1<long> MaxOutstandingElementCount { get; }
    public Nullable`1<long> MaxOutstandingByteCount { get; }
    public FlowControlSettings(Nullable`1<long> maxOutstandingElementCount, Nullable`1<long> maxOutstandingByteCount);
    [CompilerGeneratedAttribute]
public Nullable`1<long> get_MaxOutstandingElementCount();
    [CompilerGeneratedAttribute]
public Nullable`1<long> get_MaxOutstandingByteCount();
}
public class Google.Api.Gax.GaePlatformDetails : object {
    [CompilerGeneratedAttribute]
private string <ProjectId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <InstanceId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ServiceId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <VersionId>k__BackingField;
    public string ProjectId { get; }
    public string InstanceId { get; }
    public string ServiceId { get; }
    public string VersionId { get; }
    public GaePlatformDetails(string gcloudProject, string gaeInstance, string gaeService, string gaeVersion);
    [CompilerGeneratedAttribute]
public string get_ProjectId();
    [CompilerGeneratedAttribute]
public string get_InstanceId();
    [CompilerGeneratedAttribute]
public string get_ServiceId();
    [CompilerGeneratedAttribute]
public string get_VersionId();
    public virtual string ToString();
}
public static class Google.Api.Gax.GaxEqualityHelpers : object {
    private static int HashInitialValue;
    public static bool ListsEqual(IReadOnlyList`1<T> left, IReadOnlyList`1<T> right);
    public static int GetListHashCode(IReadOnlyList`1<T> list);
    public static int CombineHashCodes(int hash1, int hash2);
    public static int CombineHashCodes(int hash1, int hash2, int hash3);
    public static int CombineHashCodes(int hash1, int hash2, int hash3, int hash4);
    public static int CombineHashCodes(int hash1, int hash2, int hash3, int hash4, int hash5);
    public static int CombineHashCodes(int hash1, int hash2, int hash3, int hash4, int hash5, int hash6);
    public static int CombineHashCodes(int hash1, int hash2, int hash3, int hash4, int hash5, int hash6, int hash7);
    public static int CombineHashCodes(int hash1, int hash2, int hash3, int hash4, int hash5, int hash6, int hash7, int hash8);
}
public static class Google.Api.Gax.GaxPreconditions : object {
    public static T CheckNotNull(T argument, string paramName);
    public static string CheckNotNullOrEmpty(string argument, string paramName);
    public static int CheckArgumentRange(int argument, string paramName, int minInclusive, int maxInclusive);
    public static T CheckArgumentRange(T argument, string paramName, T minInclusive, T maxInclusive);
    public static Nullable`1<T> CheckArgumentRange(Nullable`1<T> argument, string paramName, T minInclusive, T maxInclusive);
    public static int CheckNonNegative(int argument, string paramName);
    public static Nullable`1<int> CheckNonNegative(Nullable`1<int> argument, string paramName);
    public static long CheckNonNegative(long argument, string paramName);
    public static Nullable`1<long> CheckNonNegative(Nullable`1<long> argument, string paramName);
    public static double CheckNonNegative(double argument, string paramName);
    public static Nullable`1<double> CheckNonNegative(Nullable`1<double> argument, string paramName);
    public static void CheckState(bool condition, string message);
    public static void CheckState(bool condition, string format, T arg0);
    public static void CheckState(bool condition, string format, T1 arg0, T2 arg1);
    public static void CheckState(bool condition, string format, T1 arg0, T2 arg1, T3 arg2);
    public static void CheckArgument(bool condition, string paramName, string message);
    public static void CheckArgument(bool condition, string paramName, string format, T arg0);
    public static void CheckArgument(bool condition, string paramName, string format, T1 arg0, T2 arg1);
    public static T CheckEnumValue(T value, string paramName);
    public static TimeSpan CheckNonNegativeDelay(TimeSpan value, string paramName);
}
public class Google.Api.Gax.GcePlatformDetails : object {
    [CompilerGeneratedAttribute]
private string <MetadataJson>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProjectId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <InstanceId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ZoneName>k__BackingField;
    public string MetadataJson { get; }
    public string ProjectId { get; }
    public string InstanceId { get; }
    public string ZoneName { get; }
    public string Location { get; }
    public GcePlatformDetails(string metadataJson, string projectId, string instanceId, string zoneName);
    public static GcePlatformDetails TryLoad(string metadataJson);
    [CompilerGeneratedAttribute]
public string get_MetadataJson();
    [CompilerGeneratedAttribute]
public string get_ProjectId();
    [CompilerGeneratedAttribute]
public string get_InstanceId();
    [CompilerGeneratedAttribute]
public string get_ZoneName();
    public string get_Location();
    public virtual string ToString();
}
public class Google.Api.Gax.GkePlatformDetails : object {
    private static Regex s_mountInfoPathPattern;
    [CompilerGeneratedAttribute]
private string <MetadataJson>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProjectId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ClusterName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Location>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HostName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <InstanceId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Zone>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NamespaceId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PodId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContainerName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ClusterLocation>k__BackingField;
    public string MetadataJson { get; }
    public string ProjectId { get; }
    public string ClusterName { get; }
    public string Location { get; }
    public string HostName { get; }
    public string InstanceId { get; }
    public string Zone { get; }
    public string NamespaceId { get; }
    public string PodId { get; }
    public string ContainerName { get; }
    public string ClusterLocation { get; }
    public GkePlatformDetails(string metadataJson, string projectId, string clusterName, string location, string hostName, string instanceId, string zone, string namespaceId, string podId, string containerName, string clusterLocation);
    private static GkePlatformDetails();
    [AsyncStateMachineAttribute("Google.Api.Gax.GkePlatformDetails/<LoadKubernetesDataAsync>d__1")]
internal static Task`1<KubernetesData> LoadKubernetesDataAsync();
    public static GkePlatformDetails TryLoad(string metadataJson, KubernetesData kubernetesData);
    private static string DeriveContainerName(string podUid, String[] mountInfoLines);
    [CompilerGeneratedAttribute]
public string get_MetadataJson();
    [CompilerGeneratedAttribute]
public string get_ProjectId();
    [CompilerGeneratedAttribute]
public string get_ClusterName();
    [CompilerGeneratedAttribute]
public string get_Location();
    [CompilerGeneratedAttribute]
public string get_HostName();
    [CompilerGeneratedAttribute]
public string get_InstanceId();
    [CompilerGeneratedAttribute]
public string get_Zone();
    [CompilerGeneratedAttribute]
public string get_NamespaceId();
    [CompilerGeneratedAttribute]
public string get_PodId();
    [CompilerGeneratedAttribute]
public string get_ContainerName();
    [CompilerGeneratedAttribute]
public string get_ClusterLocation();
    public virtual string ToString();
    [CompilerGeneratedAttribute]
internal static ValueTuple`2<string, string> <DeriveContainerName>g__GetContainerNameAndPodUidFromMountInfoLine|4_1(string line);
}
public interface Google.Api.Gax.IClock {
    public abstract virtual DateTime GetCurrentDateTimeUtc();
}
public interface Google.Api.Gax.IResourceName {
    public bool IsKnownPattern { get; }
    public abstract virtual bool get_IsKnownPattern();
    public abstract virtual string ToString();
}
public interface Google.Api.Gax.IScheduler {
    public abstract virtual Task Delay(TimeSpan delay, CancellationToken cancellationToken);
}
internal class Google.Api.Gax.Json.InvalidJsonException : IOException {
    internal InvalidJsonException(string message);
}
internal class Google.Api.Gax.Json.JsonBuilder : object {
    private static String[] CommonRepresentations;
    private StringBuilder _builder;
    private bool _trailingComma;
    private int _depth;
    private static string Hex;
    private static JsonBuilder();
    internal JsonBuilder(StringBuilder builder);
    internal JsonBuilder StartObject();
    internal JsonBuilder StartArray();
    internal JsonBuilder EndArray();
    internal JsonBuilder EndObject();
    internal JsonBuilder Value(string value);
    internal JsonBuilder Value(bool value);
    internal JsonBuilder Value(double value);
    internal JsonBuilder Property(string name, string value);
    internal JsonBuilder Property(string name, bool value);
    internal JsonBuilder Property(string name, double value);
    internal JsonBuilder PropertyName(string name);
    public virtual string ToString();
    private void StripTrailingComma();
    private void MaybeAppendComma();
    private void WriteString(string value);
    private void HexEncodeUtf16CodeUnit(char c);
}
internal static class Google.Api.Gax.Json.JsonParser : object {
    internal static object Parse(string json);
    internal static object Parse(TextReader reader);
    private static object ParseValue(JsonTokenizer tokenizer);
    private static Dictionary`2<string, object> ParseObject(JsonTokenizer tokenizer);
    private static List`1<object> ParseArray(JsonTokenizer tokenizer);
}
internal class Google.Api.Gax.Json.JsonToken : object {
    [CompilerGeneratedAttribute]
private static JsonToken <Null>k__BackingField;
    [CompilerGeneratedAttribute]
private static JsonToken <False>k__BackingField;
    [CompilerGeneratedAttribute]
private static JsonToken <True>k__BackingField;
    [CompilerGeneratedAttribute]
private static JsonToken <StartObject>k__BackingField;
    [CompilerGeneratedAttribute]
private static JsonToken <EndObject>k__BackingField;
    [CompilerGeneratedAttribute]
private static JsonToken <StartArray>k__BackingField;
    [CompilerGeneratedAttribute]
private static JsonToken <EndArray>k__BackingField;
    [CompilerGeneratedAttribute]
private static JsonToken <EndDocument>k__BackingField;
    [CompilerGeneratedAttribute]
private TokenType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StringValue>k__BackingField;
    [CompilerGeneratedAttribute]
private double <NumberValue>k__BackingField;
    internal static JsonToken Null { get; }
    internal static JsonToken False { get; }
    internal static JsonToken True { get; }
    internal static JsonToken StartObject { get; }
    internal static JsonToken EndObject { get; }
    internal static JsonToken StartArray { get; }
    internal static JsonToken EndArray { get; }
    internal static JsonToken EndDocument { get; }
    internal TokenType Type { get; }
    internal string StringValue { get; }
    internal double NumberValue { get; }
    private JsonToken(TokenType type, string stringValue, double numberValue);
    private static JsonToken();
    [CompilerGeneratedAttribute]
internal static JsonToken get_Null();
    [CompilerGeneratedAttribute]
internal static JsonToken get_False();
    [CompilerGeneratedAttribute]
internal static JsonToken get_True();
    [CompilerGeneratedAttribute]
internal static JsonToken get_StartObject();
    [CompilerGeneratedAttribute]
internal static JsonToken get_EndObject();
    [CompilerGeneratedAttribute]
internal static JsonToken get_StartArray();
    [CompilerGeneratedAttribute]
internal static JsonToken get_EndArray();
    [CompilerGeneratedAttribute]
internal static JsonToken get_EndDocument();
    internal static JsonToken Name(string name);
    internal static JsonToken Value(string value);
    internal static JsonToken Value(double value);
    [CompilerGeneratedAttribute]
internal TokenType get_Type();
    [CompilerGeneratedAttribute]
internal string get_StringValue();
    [CompilerGeneratedAttribute]
internal double get_NumberValue();
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(JsonToken other);
    public virtual int GetHashCode();
    public virtual string ToString();
}
internal class Google.Api.Gax.Json.JsonTokenizer : object {
    internal static int MaxDepth;
    private static State ValueStates;
    private Stack`1<ContainerType> containerStack;
    private PushBackReader reader;
    private State state;
    private JsonToken bufferedToken;
    private JsonTokenizer(TextReader reader);
    private static JsonTokenizer();
    internal static JsonTokenizer FromTextReader(TextReader reader);
    private void PushContainer(ContainerType type);
    internal JsonToken Peek();
    internal void SkipValue();
    internal JsonToken Next();
    private void ValidateState(State validStates, string errorPrefix);
    private string ReadString();
    private char ReadEscapedCharacter();
    private char ReadUnicodeEscape();
    private void ConsumeLiteral(string text);
    private double ReadNumber(char initialCharacter);
    private Nullable`1<char> ReadInt(StringBuilder builder);
    private Nullable`1<char> ReadFrac(StringBuilder builder);
    private Nullable`1<char> ReadExp(StringBuilder builder);
    private Nullable`1<char> ConsumeDigits(StringBuilder builder, Int32& count);
    private void ValidateAndModifyStateForValue(string errorPrefix);
    private void PopContainer();
}
public class Google.Api.Gax.Page`1 : object {
    private IEnumerable`1<TResource> _resources;
    [CompilerGeneratedAttribute]
private string <NextPageToken>k__BackingField;
    public string NextPageToken { get; }
    public Page`1(IEnumerable`1<TResource> resources, string nextPageToken);
    [CompilerGeneratedAttribute]
public string get_NextPageToken();
    public sealed virtual IEnumerator`1<TResource> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public abstract class Google.Api.Gax.PagedAsyncEnumerable`2 : object {
    public virtual IAsyncEnumerable`1<TResponse> AsRawResponses();
    public virtual Task`1<Page`1<TResource>> ReadPageAsync(int pageSize, CancellationToken cancellationToken);
    public virtual IAsyncEnumerator`1<TResource> GetAsyncEnumerator(CancellationToken cancellationToken);
}
public abstract class Google.Api.Gax.PagedEnumerable`2 : object {
    public virtual IEnumerable`1<TResponse> AsRawResponses();
    public virtual Page`1<TResource> ReadPage(int pageSize);
    public virtual IEnumerator`1<TResource> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public class Google.Api.Gax.PathTemplate : object {
    private static Char[] s_slashSplit;
    private IReadOnlyList`1<Segment> _segments;
    private IReadOnlyList`1<Segment> _parameterSegments;
    private string _originalTemplate;
    private bool _hasPathWildcard;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<string> <ParameterNames>k__BackingField;
    public IReadOnlyList`1<string> ParameterNames { get; }
    public int ParameterCount { get; }
    public PathTemplate(string template);
    private static PathTemplate();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<string> get_ParameterNames();
    public int get_ParameterCount();
    internal static void ValidateServiceName(string serviceName, string parameterName);
    internal void ValidateResourceId(int index, string resourceId);
    internal void ValidateResourceIds(String[] resourceIds);
    public string Expand(String[] resourceIds);
    public string ExpandWithService(string serviceName, String[] resourceIds);
    internal string ReplaceParameters(string serviceName, String[] resourceIds);
    public bool TryParseName(string name, TemplatedResourceName& result);
    public TemplatedResourceName ParseName(string name);
    private string TryParseNameInternal(string name, TemplatedResourceName& result);
    public virtual string ToString();
}
public class Google.Api.Gax.Platform : object {
    internal static string DefaultMetadataHost;
    internal static string MetadataHostOverrideEnvironmentVariable;
    internal static string MetadataEmulatorHostEnvironmentVariable;
    internal static PathTemplate s_zoneTemplate;
    private static Lazy`1<Task`1<Platform>> s_instance;
    [CompilerGeneratedAttribute]
private GaePlatformDetails <GaeDetails>k__BackingField;
    [CompilerGeneratedAttribute]
private GcePlatformDetails <GceDetails>k__BackingField;
    [CompilerGeneratedAttribute]
private GkePlatformDetails <GkeDetails>k__BackingField;
    [CompilerGeneratedAttribute]
private CloudRunPlatformDetails <CloudRunDetails>k__BackingField;
    public GaePlatformDetails GaeDetails { get; }
    public GcePlatformDetails GceDetails { get; }
    public GkePlatformDetails GkeDetails { get; }
    public CloudRunPlatformDetails CloudRunDetails { get; }
    public PlatformType Type { get; }
    public string ProjectId { get; }
    public Platform(GcePlatformDetails gceDetails);
    public Platform(GaePlatformDetails gaeDetails);
    public Platform(GkePlatformDetails gkeDetails);
    public Platform(CloudRunPlatformDetails cloudRunDetails);
    private static Platform();
    public static Task`1<Platform> InstanceAsync();
    public static Platform Instance();
    [AsyncStateMachineAttribute("Google.Api.Gax.Platform/<LoadMetadataAsync>d__7")]
private static Task`1<string> LoadMetadataAsync();
    internal static string GetEffectiveMetadataHost();
    private static GaePlatformDetails LoadGaeDetails();
    [AsyncStateMachineAttribute("Google.Api.Gax.Platform/<LoadInstanceAsync>d__10")]
private static Task`1<Platform> LoadInstanceAsync();
    [CompilerGeneratedAttribute]
public GaePlatformDetails get_GaeDetails();
    [CompilerGeneratedAttribute]
public GcePlatformDetails get_GceDetails();
    [CompilerGeneratedAttribute]
public GkePlatformDetails get_GkeDetails();
    [CompilerGeneratedAttribute]
public CloudRunPlatformDetails get_CloudRunDetails();
    public PlatformType get_Type();
    public string get_ProjectId();
    public virtual string ToString();
}
public enum Google.Api.Gax.PlatformType : Enum {
    public int value__;
    public static PlatformType Unknown;
    public static PlatformType Gce;
    public static PlatformType Gae;
    public static PlatformType Gke;
    public static PlatformType CloudRun;
}
public static class Google.Api.Gax.Polling : object {
    public static TResponse PollRepeatedly(Func`2<Nullable`1<DateTime>, TResponse> pollAction, Predicate`1<TResponse> completionPredicate, IClock clock, IScheduler scheduler, PollSettings pollSettings, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Google.Api.Gax.Polling/<PollRepeatedlyAsync>d__1`1")]
public static Task`1<TResponse> PollRepeatedlyAsync(Func`2<Nullable`1<DateTime>, Task`1<TResponse>> pollAction, Predicate`1<TResponse> completionPredicate, IClock clock, IScheduler scheduler, PollSettings pollSettings, CancellationToken cancellationToken);
}
public class Google.Api.Gax.PollSettings : object {
    [CompilerGeneratedAttribute]
private Expiration <Expiration>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <Delay>k__BackingField;
    [CompilerGeneratedAttribute]
private double <DelayMultiplier>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <MaxDelay>k__BackingField;
    public Expiration Expiration { get; }
    public TimeSpan Delay { get; }
    public double DelayMultiplier { get; }
    public TimeSpan MaxDelay { get; }
    public PollSettings(Expiration expiration, TimeSpan delay);
    public PollSettings(Expiration expiration, TimeSpan delay, double delayMultiplier, TimeSpan maxDelay);
    [CompilerGeneratedAttribute]
public Expiration get_Expiration();
    [CompilerGeneratedAttribute]
public TimeSpan get_Delay();
    [CompilerGeneratedAttribute]
public double get_DelayMultiplier();
    [CompilerGeneratedAttribute]
public TimeSpan get_MaxDelay();
    internal TimeSpan NextDelay(TimeSpan currentDelay);
}
public class Google.Api.Gax.ResourceMismatchException : Exception {
    public ResourceMismatchException(string message);
}
[DefaultMemberAttribute("Item")]
public class Google.Api.Gax.ResourceNameList`1 : object {
    private IList`1<string> _underlyingList;
    private Func`2<TName, string> _nameToString;
    private Func`2<string, TName> _stringToName;
    public int Count { get; }
    public bool IsReadOnly { get; }
    public TName Item { get; public set; }
    public ResourceNameList`1(IList`1<string> underlyingList, Func`2<string, TName> stringToName);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual TName get_Item(int index);
    public sealed virtual void set_Item(int index, TName value);
    public sealed virtual void Add(TName item);
    public void Add(IEnumerable`1<TName> items);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(TName item);
    public sealed virtual void CopyTo(TName[] array, int arrayIndex);
    public sealed virtual IEnumerator`1<TName> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual int IndexOf(TName item);
    public sealed virtual void Insert(int index, TName item);
    public sealed virtual bool Remove(TName item);
    public sealed virtual void RemoveAt(int index);
}
public class Google.Api.Gax.ResourceNames.BillingAccountName : object {
    private static PathTemplate s_billingAccount;
    [CompilerGeneratedAttribute]
private ResourceNameType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private UnparsedResourceName <UnparsedResource>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BillingAccountId>k__BackingField;
    public ResourceNameType Type { get; }
    public UnparsedResourceName UnparsedResource { get; }
    public string BillingAccountId { get; }
    public bool IsKnownPattern { get; }
    private BillingAccountName(ResourceNameType type, UnparsedResourceName unparsedResourceName, string billingAccountId);
    public BillingAccountName(string billingAccountId);
    private static BillingAccountName();
    public static BillingAccountName FromUnparsed(UnparsedResourceName unparsedResourceName);
    public static BillingAccountName FromBillingAccount(string billingAccountId);
    public static string Format(string billingAccountId);
    public static string FormatBillingAccount(string billingAccountId);
    public static BillingAccountName Parse(string billingAccountName);
    public static BillingAccountName Parse(string billingAccountName, bool allowUnparsed);
    public static bool TryParse(string billingAccountName, BillingAccountName& result);
    public static bool TryParse(string billingAccountName, bool allowUnparsed, BillingAccountName& result);
    [CompilerGeneratedAttribute]
public ResourceNameType get_Type();
    [CompilerGeneratedAttribute]
public UnparsedResourceName get_UnparsedResource();
    [CompilerGeneratedAttribute]
public string get_BillingAccountId();
    public sealed virtual bool get_IsKnownPattern();
    public virtual string ToString();
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(BillingAccountName other);
    public static bool op_Equality(BillingAccountName a, BillingAccountName b);
    public static bool op_Inequality(BillingAccountName a, BillingAccountName b);
}
public class Google.Api.Gax.ResourceNames.FolderName : object {
    private static PathTemplate s_folder;
    [CompilerGeneratedAttribute]
private ResourceNameType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private UnparsedResourceName <UnparsedResource>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FolderId>k__BackingField;
    public ResourceNameType Type { get; }
    public UnparsedResourceName UnparsedResource { get; }
    public string FolderId { get; }
    public bool IsKnownPattern { get; }
    private FolderName(ResourceNameType type, UnparsedResourceName unparsedResourceName, string folderId);
    public FolderName(string folderId);
    private static FolderName();
    public static FolderName FromUnparsed(UnparsedResourceName unparsedResourceName);
    public static FolderName FromFolder(string folderId);
    public static string Format(string folderId);
    public static string FormatFolder(string folderId);
    public static FolderName Parse(string folderName);
    public static FolderName Parse(string folderName, bool allowUnparsed);
    public static bool TryParse(string folderName, FolderName& result);
    public static bool TryParse(string folderName, bool allowUnparsed, FolderName& result);
    [CompilerGeneratedAttribute]
public ResourceNameType get_Type();
    [CompilerGeneratedAttribute]
public UnparsedResourceName get_UnparsedResource();
    [CompilerGeneratedAttribute]
public string get_FolderId();
    public sealed virtual bool get_IsKnownPattern();
    public virtual string ToString();
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(FolderName other);
    public static bool op_Equality(FolderName a, FolderName b);
    public static bool op_Inequality(FolderName a, FolderName b);
}
public class Google.Api.Gax.ResourceNames.LocationName : object {
    private static PathTemplate s_projectLocation;
    [CompilerGeneratedAttribute]
private ResourceNameType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private UnparsedResourceName <UnparsedResource>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LocationId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProjectId>k__BackingField;
    public ResourceNameType Type { get; }
    public UnparsedResourceName UnparsedResource { get; }
    public string LocationId { get; }
    public string ProjectId { get; }
    public bool IsKnownPattern { get; }
    private LocationName(ResourceNameType type, UnparsedResourceName unparsedResourceName, string locationId, string projectId);
    public LocationName(string projectId, string locationId);
    private static LocationName();
    public static LocationName FromUnparsed(UnparsedResourceName unparsedResourceName);
    public static LocationName FromProjectLocation(string projectId, string locationId);
    public static string Format(string projectId, string locationId);
    public static string FormatProjectLocation(string projectId, string locationId);
    public static LocationName Parse(string locationName);
    public static LocationName Parse(string locationName, bool allowUnparsed);
    public static bool TryParse(string locationName, LocationName& result);
    public static bool TryParse(string locationName, bool allowUnparsed, LocationName& result);
    [CompilerGeneratedAttribute]
public ResourceNameType get_Type();
    [CompilerGeneratedAttribute]
public UnparsedResourceName get_UnparsedResource();
    [CompilerGeneratedAttribute]
public string get_LocationId();
    [CompilerGeneratedAttribute]
public string get_ProjectId();
    public sealed virtual bool get_IsKnownPattern();
    public virtual string ToString();
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(LocationName other);
    public static bool op_Equality(LocationName a, LocationName b);
    public static bool op_Inequality(LocationName a, LocationName b);
}
public class Google.Api.Gax.ResourceNames.OrganizationName : object {
    private static PathTemplate s_organization;
    [CompilerGeneratedAttribute]
private ResourceNameType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private UnparsedResourceName <UnparsedResource>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OrganizationId>k__BackingField;
    public ResourceNameType Type { get; }
    public UnparsedResourceName UnparsedResource { get; }
    public string OrganizationId { get; }
    public bool IsKnownPattern { get; }
    private OrganizationName(ResourceNameType type, UnparsedResourceName unparsedResourceName, string organizationId);
    public OrganizationName(string organizationId);
    private static OrganizationName();
    public static OrganizationName FromUnparsed(UnparsedResourceName unparsedResourceName);
    public static OrganizationName FromOrganization(string organizationId);
    public static string Format(string organizationId);
    public static string FormatOrganization(string organizationId);
    public static OrganizationName Parse(string organizationName);
    public static OrganizationName Parse(string organizationName, bool allowUnparsed);
    public static bool TryParse(string organizationName, OrganizationName& result);
    public static bool TryParse(string organizationName, bool allowUnparsed, OrganizationName& result);
    [CompilerGeneratedAttribute]
public ResourceNameType get_Type();
    [CompilerGeneratedAttribute]
public UnparsedResourceName get_UnparsedResource();
    [CompilerGeneratedAttribute]
public string get_OrganizationId();
    public sealed virtual bool get_IsKnownPattern();
    public virtual string ToString();
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(OrganizationName other);
    public static bool op_Equality(OrganizationName a, OrganizationName b);
    public static bool op_Inequality(OrganizationName a, OrganizationName b);
}
public class Google.Api.Gax.ResourceNames.ProjectName : object {
    private static PathTemplate s_project;
    [CompilerGeneratedAttribute]
private ResourceNameType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private UnparsedResourceName <UnparsedResource>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProjectId>k__BackingField;
    public ResourceNameType Type { get; }
    public UnparsedResourceName UnparsedResource { get; }
    public string ProjectId { get; }
    public bool IsKnownPattern { get; }
    private ProjectName(ResourceNameType type, UnparsedResourceName unparsedResourceName, string projectId);
    public ProjectName(string projectId);
    private static ProjectName();
    public static ProjectName FromUnparsed(UnparsedResourceName unparsedResourceName);
    public static ProjectName FromProject(string projectId);
    public static string Format(string projectId);
    public static string FormatProject(string projectId);
    public static ProjectName Parse(string projectName);
    public static ProjectName Parse(string projectName, bool allowUnparsed);
    public static bool TryParse(string projectName, ProjectName& result);
    public static bool TryParse(string projectName, bool allowUnparsed, ProjectName& result);
    [CompilerGeneratedAttribute]
public ResourceNameType get_Type();
    [CompilerGeneratedAttribute]
public UnparsedResourceName get_UnparsedResource();
    [CompilerGeneratedAttribute]
public string get_ProjectId();
    public sealed virtual bool get_IsKnownPattern();
    public virtual string ToString();
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(ProjectName other);
    public static bool op_Equality(ProjectName a, ProjectName b);
    public static bool op_Inequality(ProjectName a, ProjectName b);
}
[ExtensionAttribute]
public static class Google.Api.Gax.SchedulerExtensions : object {
    [ExtensionAttribute]
public static void Sleep(IScheduler scheduler, TimeSpan delay, CancellationToken cancellationToken);
}
public class Google.Api.Gax.SystemClock : object {
    [CompilerGeneratedAttribute]
private static IClock <Instance>k__BackingField;
    public static IClock Instance { get; }
    private static SystemClock();
    [CompilerGeneratedAttribute]
public static IClock get_Instance();
    public sealed virtual DateTime GetCurrentDateTimeUtc();
}
public class Google.Api.Gax.SystemScheduler : object {
    [CompilerGeneratedAttribute]
private static SystemScheduler <Instance>k__BackingField;
    public static SystemScheduler Instance { get; }
    private static SystemScheduler();
    [CompilerGeneratedAttribute]
public static SystemScheduler get_Instance();
    public sealed virtual Task Delay(TimeSpan timeSpan, CancellationToken cancellationToken);
}
[ExtensionAttribute]
public static class Google.Api.Gax.TaskCompletionSourceExtensions : object {
    [ExtensionAttribute]
public static Task`1<TResult> WithCancellationToken(TaskCompletionSource`1<TResult> source, CancellationToken cancellationToken);
}
[ExtensionAttribute]
public static class Google.Api.Gax.TaskExtensions : object {
    [ExtensionAttribute]
public static T ResultWithUnwrappedExceptions(Task`1<T> task);
    [ExtensionAttribute]
public static void WaitWithUnwrappedExceptions(Task task);
    [ExtensionAttribute]
public static bool WaitWithUnwrappedExceptions(Task task, TimeSpan timeout);
    [ExtensionAttribute]
public static bool WaitWithUnwrappedExceptions(Task task, int millisecondsTimeout);
    [ExtensionAttribute]
public static bool WaitWithUnwrappedExceptions(Task task, int millisecondsTimeout, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static void WaitWithUnwrappedExceptions(Task task, CancellationToken cancellationToken);
}
[DefaultMemberAttribute("Item")]
public class Google.Api.Gax.TemplatedResourceName : object {
    [CompilerGeneratedAttribute]
private PathTemplate <Template>k__BackingField;
    private string _serviceName;
    private String[] _resourceIds;
    public PathTemplate Template { get; }
    public string ServiceName { get; public set; }
    public string Item { get; public set; }
    public string Item { get; public set; }
    public bool IsKnownPattern { get; }
    public TemplatedResourceName(PathTemplate template, String[] resourceIds);
    private TemplatedResourceName(PathTemplate template, string serviceName, String[] resourceIds, bool ignored);
    [CompilerGeneratedAttribute]
public PathTemplate get_Template();
    public string get_ServiceName();
    public void set_ServiceName(string value);
    public string get_Item(int index);
    public void set_Item(int index, string value);
    private int GetParameterIndex(string parameterName);
    public string get_Item(string parameterName);
    public void set_Item(string parameterName, string value);
    public TemplatedResourceName Clone();
    internal static TemplatedResourceName CreateWithShallowCopy(PathTemplate template, string serviceName, String[] resourceIds);
    public sealed virtual bool get_IsKnownPattern();
    public virtual string ToString();
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(TemplatedResourceName other);
    public static bool op_Equality(TemplatedResourceName a, TemplatedResourceName b);
    public static bool op_Inequality(TemplatedResourceName a, TemplatedResourceName b);
}
public class Google.Api.Gax.UnparsedResourceName : object {
    private string _name;
    public bool IsKnownPattern { get; }
    public UnparsedResourceName(string name);
    public static UnparsedResourceName Parse(string name);
    public static bool TryParse(string name, UnparsedResourceName& result);
    public sealed virtual bool get_IsKnownPattern();
    public virtual string ToString();
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(UnparsedResourceName other);
    public static bool op_Equality(UnparsedResourceName a, UnparsedResourceName b);
    public static bool op_Inequality(UnparsedResourceName a, UnparsedResourceName b);
}
public class Google.Api.Gax.VersionHeaderBuilder : object {
    private static Lazy`1<string> s_environmentVersion;
    public static string HeaderName;
    private List`1<string> _names;
    private List`1<string> _values;
    private static VersionHeaderBuilder();
    public VersionHeaderBuilder AppendVersion(string name, string version);
    public VersionHeaderBuilder AppendAssemblyVersion(string name, Type type);
    public VersionHeaderBuilder AppendDotNetEnvironment();
    private static bool IsHeaderNameValueValid(string nameOrValue);
    private static string GetEnvironmentVersion();
    private static string GetEntryAssemblyVersionOrNull();
    internal static string FormatAssemblyVersion(Type type);
    internal static string FormatInformationalVersion(string info);
    private static string FormatVersion(Version version);
    public virtual string ToString();
    public VersionHeaderBuilder Clone();
}
