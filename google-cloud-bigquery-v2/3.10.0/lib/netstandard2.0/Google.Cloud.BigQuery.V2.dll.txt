[AttributeUsageAttribute("256")]
internal class Google.Cloud.BigQuery.V2.ApiValueAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    public string Value { get; public set; }
    public ApiValueAttribute(string value);
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(string value);
    public static IEnumerable`1<KeyValuePair`2<T, string>> GetApiValueNamesIn();
    private static KeyValuePair`2<T, string> CreateKeyValuePair(FieldInfo field);
}
public class Google.Cloud.BigQuery.V2.BigQueryBigNumeric : ValueType {
    private static NumericType s_numericType;
    [CompilerGeneratedAttribute]
private static BigQueryBigNumeric <Zero>k__BackingField;
    [CompilerGeneratedAttribute]
private static BigQueryBigNumeric <MaxValue>k__BackingField;
    [CompilerGeneratedAttribute]
private static BigQueryBigNumeric <MinValue>k__BackingField;
    [CompilerGeneratedAttribute]
private static BigQueryBigNumeric <Epsilon>k__BackingField;
    private NumericValue _numericValue;
    public static BigQueryBigNumeric Zero { get; }
    public static BigQueryBigNumeric MaxValue { get; }
    public static BigQueryBigNumeric MinValue { get; }
    public static BigQueryBigNumeric Epsilon { get; }
    private BigQueryBigNumeric(NumericValue value);
    private static BigQueryBigNumeric();
    [CompilerGeneratedAttribute]
public static BigQueryBigNumeric get_Zero();
    [CompilerGeneratedAttribute]
public static BigQueryBigNumeric get_MaxValue();
    [CompilerGeneratedAttribute]
public static BigQueryBigNumeric get_MinValue();
    [CompilerGeneratedAttribute]
public static BigQueryBigNumeric get_Epsilon();
    public sealed virtual int CompareTo(BigQueryBigNumeric other);
    private sealed virtual override int System.IComparable.CompareTo(object obj);
    public sealed virtual bool Equals(BigQueryBigNumeric other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static BigQueryBigNumeric Parse(string text);
    public static bool TryParse(string text, BigQueryBigNumeric& value);
    public virtual string ToString();
    public static BigQueryBigNumeric op_Implicit(decimal value);
    public static BigQueryBigNumeric op_Implicit(int value);
    public static BigQueryBigNumeric op_Implicit(long value);
    public static BigQueryBigNumeric op_Implicit(ulong value);
    public decimal ToDecimal(LossOfPrecisionHandling lossOfPrecisionHandling);
    public static decimal op_Explicit(BigQueryBigNumeric value);
    public static bool op_Equality(BigQueryBigNumeric lhs, BigQueryBigNumeric rhs);
    public static bool op_Inequality(BigQueryBigNumeric lhs, BigQueryBigNumeric rhs);
    public static BigQueryBigNumeric op_Addition(BigQueryBigNumeric lhs, BigQueryBigNumeric rhs);
    public static BigQueryBigNumeric op_Subtraction(BigQueryBigNumeric lhs, BigQueryBigNumeric rhs);
    public static BigQueryBigNumeric op_UnaryPlus(BigQueryBigNumeric value);
    public static BigQueryBigNumeric op_UnaryNegation(BigQueryBigNumeric value);
}
public abstract class Google.Cloud.BigQuery.V2.BigQueryClient : object {
    private static String[] s_scopes;
    [CompilerGeneratedAttribute]
private static ScopedCredentialProvider <ScopedCredentialProvider>k__BackingField;
    internal static ScopedCredentialProvider ScopedCredentialProvider { get; }
    public BigqueryService Service { get; }
    public string ProjectId { get; }
    public string DefaultLocation { get; }
    public bool PrettyPrint { get; }
    private static BigQueryClient();
    [CompilerGeneratedAttribute]
internal static ScopedCredentialProvider get_ScopedCredentialProvider();
    public virtual BigqueryService get_Service();
    public virtual string get_ProjectId();
    public virtual string get_DefaultLocation();
    public virtual bool get_PrettyPrint();
    public static Task`1<BigQueryClient> CreateAsync(string projectId, GoogleCredential credential);
    public static BigQueryClient Create(string projectId, GoogleCredential credential);
    public virtual BigQueryClient WithDefaultLocation(string defaultLocation);
    public TableReference GetTableReference(string datasetId, string tableId);
    public TableReference GetTableReference(string projectId, string datasetId, string tableId);
    public DatasetReference GetDatasetReference(string datasetId);
    public DatasetReference GetDatasetReference(string projectId, string datasetId);
    internal ProjectReference GetProjectReference();
    public ProjectReference GetProjectReference(string projectId);
    public JobReference GetJobReference(string jobId);
    public JobReference GetJobReference(string projectId, string jobId);
    public JobReference GetJobReference(string projectId, string jobId, string location);
    public ModelReference GetModelReference(string datasetId, string modelId);
    public ModelReference GetModelReference(string projectId, string datasetId, string modelId);
    public RoutineReference GetRoutineReference(string datasetId, string routineId);
    public RoutineReference GetRoutineReference(string projectId, string datasetId, string routineId);
    public static JsonSerializerSettings CreateJsonSerializersSettings();
    internal T CheckETag(T resource, string etag);
    internal static void RetryIfETagPresent(BigqueryBaseServiceRequest`1<TResponse> request, TResource resource);
    public virtual void Dispose();
    public virtual PagedEnumerable`2<DatasetList, BigQueryDataset> ListDatasets(ListDatasetsOptions options);
    public virtual PagedEnumerable`2<DatasetList, BigQueryDataset> ListDatasets(string projectId, ListDatasetsOptions options);
    public virtual PagedEnumerable`2<DatasetList, BigQueryDataset> ListDatasets(ProjectReference projectReference, ListDatasetsOptions options);
    public virtual PagedAsyncEnumerable`2<DatasetList, BigQueryDataset> ListDatasetsAsync(ListDatasetsOptions options);
    public virtual PagedAsyncEnumerable`2<DatasetList, BigQueryDataset> ListDatasetsAsync(string projectId, ListDatasetsOptions options);
    public virtual PagedAsyncEnumerable`2<DatasetList, BigQueryDataset> ListDatasetsAsync(ProjectReference projectReference, ListDatasetsOptions options);
    public virtual BigQueryDataset GetDataset(string datasetId, GetDatasetOptions options);
    public virtual BigQueryDataset GetDataset(string projectId, string datasetId, GetDatasetOptions options);
    public virtual BigQueryDataset GetDataset(DatasetReference datasetReference, GetDatasetOptions options);
    public virtual Task`1<BigQueryDataset> GetDatasetAsync(string datasetId, GetDatasetOptions options, CancellationToken cancellationToken);
    public virtual Task`1<BigQueryDataset> GetDatasetAsync(string projectId, string datasetId, GetDatasetOptions options, CancellationToken cancellationToken);
    public virtual Task`1<BigQueryDataset> GetDatasetAsync(DatasetReference datasetReference, GetDatasetOptions options, CancellationToken cancellationToken);
    public virtual BigQueryDataset CreateDataset(string datasetId, Dataset resource, CreateDatasetOptions options);
    public virtual BigQueryDataset CreateDataset(string projectId, string datasetId, Dataset resource, CreateDatasetOptions options);
    public virtual BigQueryDataset CreateDataset(DatasetReference datasetReference, Dataset resource, CreateDatasetOptions options);
    public virtual Task`1<BigQueryDataset> CreateDatasetAsync(string datasetId, Dataset resource, CreateDatasetOptions options, CancellationToken cancellationToken);
    public virtual Task`1<BigQueryDataset> CreateDatasetAsync(string projectId, string datasetId, Dataset resource, CreateDatasetOptions options, CancellationToken cancellationToken);
    public virtual Task`1<BigQueryDataset> CreateDatasetAsync(DatasetReference datasetReference, Dataset resource, CreateDatasetOptions options, CancellationToken cancellationToken);
    public virtual BigQueryDataset GetOrCreateDataset(string datasetId, Dataset resource, GetDatasetOptions getOptions, CreateDatasetOptions createOptions);
    public virtual BigQueryDataset GetOrCreateDataset(string projectId, string datasetId, Dataset resource, GetDatasetOptions getOptions, CreateDatasetOptions createOptions);
    public virtual BigQueryDataset GetOrCreateDataset(DatasetReference datasetReference, Dataset resource, GetDatasetOptions getOptions, CreateDatasetOptions createOptions);
    public virtual Task`1<BigQueryDataset> GetOrCreateDatasetAsync(string datasetId, Dataset resource, GetDatasetOptions getOptions, CreateDatasetOptions createOptions, CancellationToken cancellationToken);
    public virtual Task`1<BigQueryDataset> GetOrCreateDatasetAsync(string projectId, string datasetId, Dataset resource, GetDatasetOptions getOptions, CreateDatasetOptions createOptions, CancellationToken cancellationToken);
    public virtual Task`1<BigQueryDataset> GetOrCreateDatasetAsync(DatasetReference datasetReference, Dataset resource, GetDatasetOptions getOptions, CreateDatasetOptions createOptions, CancellationToken cancellationToken);
    public virtual void DeleteDataset(string datasetId, DeleteDatasetOptions options);
    public virtual void DeleteDataset(string projectId, string datasetId, DeleteDatasetOptions options);
    public virtual void DeleteDataset(DatasetReference datasetReference, DeleteDatasetOptions options);
    public virtual Task DeleteDatasetAsync(string datasetId, DeleteDatasetOptions options, CancellationToken cancellationToken);
    public virtual Task DeleteDatasetAsync(string projectId, string datasetId, DeleteDatasetOptions options, CancellationToken cancellationToken);
    public virtual Task DeleteDatasetAsync(DatasetReference datasetReference, DeleteDatasetOptions options, CancellationToken cancellationToken);
    public virtual BigQueryDataset UpdateDataset(string datasetId, Dataset resource, UpdateDatasetOptions options);
    public virtual BigQueryDataset UpdateDataset(string projectId, string datasetId, Dataset resource, UpdateDatasetOptions options);
    public virtual BigQueryDataset UpdateDataset(DatasetReference datasetReference, Dataset resource, UpdateDatasetOptions options);
    public virtual Task`1<BigQueryDataset> UpdateDatasetAsync(string datasetId, Dataset resource, UpdateDatasetOptions options, CancellationToken cancellationToken);
    public virtual Task`1<BigQueryDataset> UpdateDatasetAsync(string projectId, string datasetId, Dataset resource, UpdateDatasetOptions options, CancellationToken cancellationToken);
    public virtual Task`1<BigQueryDataset> UpdateDatasetAsync(DatasetReference datasetReference, Dataset resource, UpdateDatasetOptions options, CancellationToken cancellationToken);
    public virtual BigQueryDataset PatchDataset(string datasetId, Dataset resource, PatchDatasetOptions options);
    public virtual BigQueryDataset PatchDataset(string projectId, string datasetId, Dataset resource, PatchDatasetOptions options);
    public virtual BigQueryDataset PatchDataset(DatasetReference datasetReference, Dataset resource, PatchDatasetOptions options);
    public virtual Task`1<BigQueryDataset> PatchDatasetAsync(string datasetId, Dataset resource, PatchDatasetOptions options, CancellationToken cancellationToken);
    public virtual Task`1<BigQueryDataset> PatchDatasetAsync(string projectId, string datasetId, Dataset resource, PatchDatasetOptions options, CancellationToken cancellationToken);
    public virtual Task`1<BigQueryDataset> PatchDatasetAsync(DatasetReference datasetReference, Dataset resource, PatchDatasetOptions options, CancellationToken cancellationToken);
    public virtual string SetDatasetLabel(string datasetId, string labelName, string labelValue, ModifyLabelsOptions options);
    public virtual string SetDatasetLabel(string projectId, string datasetId, string labelName, string labelValue, ModifyLabelsOptions options);
    public virtual string SetDatasetLabel(DatasetReference datasetReference, string labelName, string labelValue, ModifyLabelsOptions options);
    public virtual Task`1<string> SetDatasetLabelAsync(string datasetId, string labelName, string labelValue, ModifyLabelsOptions options, CancellationToken cancellationToken);
    public virtual Task`1<string> SetDatasetLabelAsync(string projectId, string datasetId, string labelName, string labelValue, ModifyLabelsOptions options, CancellationToken cancellationToken);
    public virtual Task`1<string> SetDatasetLabelAsync(DatasetReference datasetReference, string labelName, string labelValue, ModifyLabelsOptions options, CancellationToken cancellationToken);
    public virtual string RemoveDatasetLabel(string datasetId, string labelName, ModifyLabelsOptions options);
    public virtual string RemoveDatasetLabel(string projectId, string datasetId, string labelName, ModifyLabelsOptions options);
    public virtual string RemoveDatasetLabel(DatasetReference datasetReference, string labelName, ModifyLabelsOptions options);
    public virtual Task`1<string> RemoveDatasetLabelAsync(string datasetId, string labelName, ModifyLabelsOptions options, CancellationToken cancellationToken);
    public virtual Task`1<string> RemoveDatasetLabelAsync(string projectId, string datasetId, string labelName, ModifyLabelsOptions options, CancellationToken cancellationToken);
    public virtual Task`1<string> RemoveDatasetLabelAsync(DatasetReference datasetReference, string labelName, ModifyLabelsOptions options, CancellationToken cancellationToken);
    public virtual IDictionary`2<string, string> ClearDatasetLabels(string datasetId, ModifyLabelsOptions options);
    public virtual IDictionary`2<string, string> ClearDatasetLabels(string projectId, string datasetId, ModifyLabelsOptions options);
    public virtual IDictionary`2<string, string> ClearDatasetLabels(DatasetReference datasetReference, ModifyLabelsOptions options);
    public virtual Task`1<IDictionary`2<string, string>> ClearDatasetLabelsAsync(string datasetId, ModifyLabelsOptions options, CancellationToken cancellationToken);
    public virtual Task`1<IDictionary`2<string, string>> ClearDatasetLabelsAsync(string projectId, string datasetId, ModifyLabelsOptions options, CancellationToken cancellationToken);
    public virtual Task`1<IDictionary`2<string, string>> ClearDatasetLabelsAsync(DatasetReference datasetReference, ModifyLabelsOptions options, CancellationToken cancellationToken);
    public virtual IDictionary`2<string, string> ModifyDatasetLabels(string datasetId, IDictionary`2<string, string> labels, ModifyLabelsOptions options);
    public virtual IDictionary`2<string, string> ModifyDatasetLabels(string projectId, string datasetId, IDictionary`2<string, string> labels, ModifyLabelsOptions options);
    public virtual IDictionary`2<string, string> ModifyDatasetLabels(DatasetReference datasetReference, IDictionary`2<string, string> labels, ModifyLabelsOptions options);
    public virtual Task`1<IDictionary`2<string, string>> ModifyDatasetLabelsAsync(string datasetId, IDictionary`2<string, string> labels, ModifyLabelsOptions options, CancellationToken cancellationToken);
    public virtual Task`1<IDictionary`2<string, string>> ModifyDatasetLabelsAsync(string projectId, string datasetId, IDictionary`2<string, string> labels, ModifyLabelsOptions options, CancellationToken cancellationToken);
    public virtual Task`1<IDictionary`2<string, string>> ModifyDatasetLabelsAsync(DatasetReference datasetReference, IDictionary`2<string, string> labels, ModifyLabelsOptions options, CancellationToken cancellationToken);
    public virtual BigQueryInsertResults InsertRow(string projectId, string datasetId, string tableId, BigQueryInsertRow row, InsertOptions options);
    public virtual BigQueryInsertResults InsertRow(string datasetId, string tableId, BigQueryInsertRow row, InsertOptions options);
    public virtual BigQueryInsertResults InsertRow(TableReference tableReference, BigQueryInsertRow row, InsertOptions options);
    public virtual Task`1<BigQueryInsertResults> InsertRowAsync(string projectId, string datasetId, string tableId, BigQueryInsertRow row, InsertOptions options, CancellationToken cancellationToken);
    public virtual Task`1<BigQueryInsertResults> InsertRowAsync(string datasetId, string tableId, BigQueryInsertRow row, InsertOptions options, CancellationToken cancellationToken);
    public virtual Task`1<BigQueryInsertResults> InsertRowAsync(TableReference tableReference, BigQueryInsertRow row, InsertOptions options, CancellationToken cancellationToken);
    public virtual BigQueryInsertResults InsertRows(string projectId, string datasetId, string tableId, BigQueryInsertRow[] rows);
    public virtual BigQueryInsertResults InsertRows(string datasetId, string tableId, BigQueryInsertRow[] rows);
    public virtual BigQueryInsertResults InsertRows(TableReference tableReference, BigQueryInsertRow[] rows);
    public virtual Task`1<BigQueryInsertResults> InsertRowsAsync(string projectId, string datasetId, string tableId, BigQueryInsertRow[] rows);
    public virtual Task`1<BigQueryInsertResults> InsertRowsAsync(string datasetId, string tableId, BigQueryInsertRow[] rows);
    public virtual Task`1<BigQueryInsertResults> InsertRowsAsync(TableReference tableReference, BigQueryInsertRow[] rows);
    public virtual BigQueryJob UploadCsv(string datasetId, string tableId, TableSchema schema, Stream input, UploadCsvOptions options);
    public virtual BigQueryJob UploadCsv(string projectId, string datasetId, string tableId, TableSchema schema, Stream input, UploadCsvOptions options);
    public virtual BigQueryJob UploadCsv(TableReference tableReference, TableSchema schema, Stream input, UploadCsvOptions options);
    public virtual Task`1<BigQueryJob> UploadCsvAsync(string datasetId, string tableId, TableSchema schema, Stream input, UploadCsvOptions options, CancellationToken cancellationToken);
    public virtual Task`1<BigQueryJob> UploadCsvAsync(string projectId, string datasetId, string tableId, TableSchema schema, Stream input, UploadCsvOptions options, CancellationToken cancellationToken);
    public virtual Task`1<BigQueryJob> UploadCsvAsync(TableReference tableReference, TableSchema schema, Stream input, UploadCsvOptions options, CancellationToken cancellationToken);
    public virtual BigQueryJob UploadJson(string datasetId, string tableId, TableSchema schema, Stream input, UploadJsonOptions options);
    public virtual BigQueryJob UploadJson(string projectId, string datasetId, string tableId, TableSchema schema, Stream input, UploadJsonOptions options);
    public virtual BigQueryJob UploadJson(TableReference tableReference, TableSchema schema, Stream input, UploadJsonOptions options);
    public virtual Task`1<BigQueryJob> UploadJsonAsync(string datasetId, string tableId, TableSchema schema, Stream input, UploadJsonOptions options, CancellationToken cancellationToken);
    public virtual Task`1<BigQueryJob> UploadJsonAsync(string projectId, string datasetId, string tableId, TableSchema schema, Stream input, UploadJsonOptions options, CancellationToken cancellationToken);
    public virtual Task`1<BigQueryJob> UploadJsonAsync(TableReference tableReference, TableSchema schema, Stream input, UploadJsonOptions options, CancellationToken cancellationToken);
    public virtual BigQueryJob UploadJson(string datasetId, string tableId, TableSchema schema, IEnumerable`1<string> rows, UploadJsonOptions options);
    public virtual BigQueryJob UploadJson(string projectId, string datasetId, string tableId, TableSchema schema, IEnumerable`1<string> rows, UploadJsonOptions options);
    public virtual BigQueryJob UploadJson(TableReference tableReference, TableSchema schema, IEnumerable`1<string> rows, UploadJsonOptions options);
    public virtual Task`1<BigQueryJob> UploadJsonAsync(string datasetId, string tableId, TableSchema schema, IEnumerable`1<string> rows, UploadJsonOptions options, CancellationToken cancellationToken);
    public virtual Task`1<BigQueryJob> UploadJsonAsync(string projectId, string datasetId, string tableId, TableSchema schema, IEnumerable`1<string> rows, UploadJsonOptions options, CancellationToken cancellationToken);
    public virtual Task`1<BigQueryJob> UploadJsonAsync(TableReference tableReference, TableSchema schema, IEnumerable`1<string> rows, UploadJsonOptions options, CancellationToken cancellationToken);
    public virtual BigQueryJob UploadAvro(string datasetId, string tableId, TableSchema schema, Stream input, UploadAvroOptions options);
    public virtual BigQueryJob UploadAvro(string projectId, string datasetId, string tableId, TableSchema schema, Stream input, UploadAvroOptions options);
    public virtual BigQueryJob UploadAvro(TableReference tableReference, TableSchema schema, Stream input, UploadAvroOptions options);
    public virtual Task`1<BigQueryJob> UploadAvroAsync(string datasetId, string tableId, TableSchema schema, Stream input, UploadAvroOptions options, CancellationToken cancellationToken);
    public virtual Task`1<BigQueryJob> UploadAvroAsync(string projectId, string datasetId, string tableId, TableSchema schema, Stream input, UploadAvroOptions options, CancellationToken cancellationToken);
    public virtual Task`1<BigQueryJob> UploadAvroAsync(TableReference tableReference, TableSchema schema, Stream input, UploadAvroOptions options, CancellationToken cancellationToken);
    public virtual BigQueryJob UploadParquet(string datasetId, string tableId, Stream input, UploadParquetOptions options);
    public virtual BigQueryJob UploadParquet(string projectId, string datasetId, string tableId, Stream input, UploadParquetOptions options);
    public virtual BigQueryJob UploadParquet(TableReference tableReference, Stream input, UploadParquetOptions options);
    public virtual Task`1<BigQueryJob> UploadParquetAsync(string datasetId, string tableId, Stream input, UploadParquetOptions options, CancellationToken cancellationToken);
    public virtual Task`1<BigQueryJob> UploadParquetAsync(string projectId, string datasetId, string tableId, Stream input, UploadParquetOptions options, CancellationToken cancellationToken);
    public virtual Task`1<BigQueryJob> UploadParquetAsync(TableReference tableReference, Stream input, UploadParquetOptions options, CancellationToken cancellationToken);
    public virtual BigQueryJob UploadOrc(string datasetId, string tableId, Stream input, UploadOrcOptions options);
    public virtual BigQueryJob UploadOrc(string projectId, string datasetId, string tableId, Stream input, UploadOrcOptions options);
    public virtual BigQueryJob UploadOrc(TableReference tableReference, Stream input, UploadOrcOptions options);
    public virtual Task`1<BigQueryJob> UploadOrcAsync(string datasetId, string tableId, Stream input, UploadOrcOptions options, CancellationToken cancellationToken);
    public virtual Task`1<BigQueryJob> UploadOrcAsync(string projectId, string datasetId, string tableId, Stream input, UploadOrcOptions options, CancellationToken cancellationToken);
    public virtual Task`1<BigQueryJob> UploadOrcAsync(TableReference tableReference, Stream input, UploadOrcOptions options, CancellationToken cancellationToken);
    public virtual BigQueryInsertResults InsertRows(string datasetId, string tableId, IEnumerable`1<BigQueryInsertRow> rows, InsertOptions options);
    public virtual BigQueryInsertResults InsertRows(string projectId, string datasetId, string tableId, IEnumerable`1<BigQueryInsertRow> rows, InsertOptions options);
    public virtual BigQueryInsertResults InsertRows(TableReference tableReference, IEnumerable`1<BigQueryInsertRow> rows, InsertOptions options);
    public virtual Task`1<BigQueryInsertResults> InsertRowsAsync(string datasetId, string tableId, IEnumerable`1<BigQueryInsertRow> rows, InsertOptions options, CancellationToken cancellationToken);
    public virtual Task`1<BigQueryInsertResults> InsertRowsAsync(string projectId, string datasetId, string tableId, IEnumerable`1<BigQueryInsertRow> rows, InsertOptions options, CancellationToken cancellationToken);
    public virtual Task`1<BigQueryInsertResults> InsertRowsAsync(TableReference tableReference, IEnumerable`1<BigQueryInsertRow> rows, InsertOptions options, CancellationToken cancellationToken);
    public virtual PagedEnumerable`2<JobList, BigQueryJob> ListJobs(ListJobsOptions options);
    public virtual PagedEnumerable`2<JobList, BigQueryJob> ListJobs(string projectId, ListJobsOptions options);
    public virtual PagedEnumerable`2<JobList, BigQueryJob> ListJobs(ProjectReference projectReference, ListJobsOptions options);
    public virtual PagedAsyncEnumerable`2<JobList, BigQueryJob> ListJobsAsync(ListJobsOptions options);
    public virtual PagedAsyncEnumerable`2<JobList, BigQueryJob> ListJobsAsync(string projectId, ListJobsOptions options);
    public virtual PagedAsyncEnumerable`2<JobList, BigQueryJob> ListJobsAsync(ProjectReference projectReference, ListJobsOptions options);
    public virtual BigQueryJob CreateExtractJob(string projectId, string datasetId, string tableId, string destinationUri, CreateExtractJobOptions options);
    public virtual BigQueryJob CreateExtractJob(string datasetId, string tableId, string destinationUri, CreateExtractJobOptions options);
    public virtual BigQueryJob CreateExtractJob(TableReference tableReference, string destinationUri, CreateExtractJobOptions options);
    public virtual Task`1<BigQueryJob> CreateExtractJobAsync(string projectId, string datasetId, string tableId, string destinationUri, CreateExtractJobOptions options, CancellationToken cancellationToken);
    public virtual Task`1<BigQueryJob> CreateExtractJobAsync(string datasetId, string tableId, string destinationUri, CreateExtractJobOptions options, CancellationToken cancellationToken);
    public virtual Task`1<BigQueryJob> CreateExtractJobAsync(TableReference tableReference, string destinationUri, CreateExtractJobOptions options, CancellationToken cancellationToken);
    public virtual BigQueryJob CreateCopyJob(TableReference source, TableReference destination, CreateCopyJobOptions options);
    public virtual BigQueryJob CreateCopyJob(IEnumerable`1<TableReference> sources, TableReference destination, CreateCopyJobOptions options);
    public virtual Task`1<BigQueryJob> CreateCopyJobAsync(TableReference source, TableReference destination, CreateCopyJobOptions options, CancellationToken cancellationToken);
    public virtual Task`1<BigQueryJob> CreateCopyJobAsync(IEnumerable`1<TableReference> sources, TableReference destination, CreateCopyJobOptions options, CancellationToken cancellationToken);
    public virtual BigQueryJob CreateLoadJob(string sourceUri, TableReference destination, TableSchema schema, CreateLoadJobOptions options);
    public virtual BigQueryJob CreateLoadJob(IEnumerable`1<string> sourceUris, TableReference destination, TableSchema schema, CreateLoadJobOptions options);
    public virtual Task`1<BigQueryJob> CreateLoadJobAsync(string sourceUri, TableReference destination, TableSchema schema, CreateLoadJobOptions options, CancellationToken cancellationToken);
    public virtual Task`1<BigQueryJob> CreateLoadJobAsync(IEnumerable`1<string> sourceUris, TableReference destination, TableSchema schema, CreateLoadJobOptions options, CancellationToken cancellationToken);
    public virtual BigQueryJob CreateModelExtractJob(string datasetId, string modelId, string destinationUri, CreateModelExtractJobOptions options);
    public virtual BigQueryJob CreateModelExtractJob(string projectId, string datasetId, string modelId, string destinationUri, CreateModelExtractJobOptions options);
    public virtual BigQueryJob CreateModelExtractJob(ModelReference modelReference, string destinationUri, CreateModelExtractJobOptions options);
    public virtual Task`1<BigQueryJob> CreateModelExtractJobAsync(string datasetId, string modelId, string destinationUri, CreateModelExtractJobOptions options, CancellationToken cancellationToken);
    public virtual Task`1<BigQueryJob> CreateModelExtractJobAsync(string projectId, string datasetId, string modelId, string destinationUri, CreateModelExtractJobOptions options, CancellationToken cancellationToken);
    public virtual Task`1<BigQueryJob> CreateModelExtractJobAsync(ModelReference modelReference, string destinationUri, CreateModelExtractJobOptions options, CancellationToken cancellationToken);
    public virtual BigQueryJob PollJobUntilCompleted(string jobId, GetJobOptions options, PollSettings pollSettings);
    public virtual BigQueryJob PollJobUntilCompleted(string projectId, string jobId, GetJobOptions options, PollSettings pollSettings);
    public virtual BigQueryJob PollJobUntilCompleted(JobReference jobReference, GetJobOptions options, PollSettings pollSettings);
    public virtual Task`1<BigQueryJob> PollJobUntilCompletedAsync(string jobId, GetJobOptions options, PollSettings pollSettings, CancellationToken cancellationToken);
    public virtual Task`1<BigQueryJob> PollJobUntilCompletedAsync(string projectId, string jobId, GetJobOptions options, PollSettings pollSettings, CancellationToken cancellationToken);
    public virtual Task`1<BigQueryJob> PollJobUntilCompletedAsync(JobReference jobReference, GetJobOptions options, PollSettings pollSettings, CancellationToken cancellationToken);
    public virtual BigQueryJob GetJob(string jobId, GetJobOptions options);
    public virtual BigQueryJob GetJob(string projectId, string jobId, GetJobOptions options);
    public virtual BigQueryJob GetJob(JobReference jobReference, GetJobOptions options);
    public virtual Task`1<BigQueryJob> GetJobAsync(string jobId, GetJobOptions options, CancellationToken cancellationToken);
    public virtual Task`1<BigQueryJob> GetJobAsync(string projectId, string jobId, GetJobOptions options, CancellationToken cancellationToken);
    public virtual Task`1<BigQueryJob> GetJobAsync(JobReference jobReference, GetJobOptions options, CancellationToken cancellationToken);
    public virtual BigQueryJob CancelJob(string jobId, CancelJobOptions options);
    public virtual BigQueryJob CancelJob(string projectId, string jobId, CancelJobOptions options);
    public virtual BigQueryJob CancelJob(JobReference jobReference, CancelJobOptions options);
    public virtual Task`1<BigQueryJob> CancelJobAsync(string jobId, CancelJobOptions options, CancellationToken cancellationToken);
    public virtual Task`1<BigQueryJob> CancelJobAsync(string projectId, string jobId, CancelJobOptions options, CancellationToken cancellationToken);
    public virtual Task`1<BigQueryJob> CancelJobAsync(JobReference jobReference, CancelJobOptions options, CancellationToken cancellationToken);
    public virtual BigQueryJob CreateExtractJob(string datasetId, string tableId, IEnumerable`1<string> destinationUris, CreateExtractJobOptions options);
    public virtual BigQueryJob CreateExtractJob(string projectId, string datasetId, string tableId, IEnumerable`1<string> destinationUris, CreateExtractJobOptions options);
    public virtual BigQueryJob CreateExtractJob(TableReference tableReference, IEnumerable`1<string> destinationUris, CreateExtractJobOptions options);
    public virtual Task`1<BigQueryJob> CreateExtractJobAsync(string datasetId, string tableId, IEnumerable`1<string> destinationUris, CreateExtractJobOptions options, CancellationToken cancellationToken);
    public virtual Task`1<BigQueryJob> CreateExtractJobAsync(string projectId, string datasetId, string tableId, IEnumerable`1<string> destinationUris, CreateExtractJobOptions options, CancellationToken cancellationToken);
    public virtual Task`1<BigQueryJob> CreateExtractJobAsync(TableReference tableReference, IEnumerable`1<string> destinationUris, CreateExtractJobOptions options, CancellationToken cancellationToken);
    public virtual BigQueryJob CreateModelExtractJob(string datasetId, string modelId, IEnumerable`1<string> destinationUris, CreateModelExtractJobOptions options);
    public virtual BigQueryJob CreateModelExtractJob(string projectId, string datasetId, string modelId, IEnumerable`1<string> destinationUris, CreateModelExtractJobOptions options);
    public virtual BigQueryJob CreateModelExtractJob(ModelReference modelReference, IEnumerable`1<string> destinationUris, CreateModelExtractJobOptions options);
    public virtual Task`1<BigQueryJob> CreateModelExtractJobAsync(string datasetId, string modelId, IEnumerable`1<string> destinationUris, CreateModelExtractJobOptions options, CancellationToken cancellationToken);
    public virtual Task`1<BigQueryJob> CreateModelExtractJobAsync(string projectId, string datasetId, string modelId, IEnumerable`1<string> destinationUris, CreateModelExtractJobOptions options, CancellationToken cancellationToken);
    public virtual Task`1<BigQueryJob> CreateModelExtractJobAsync(ModelReference modelReference, IEnumerable`1<string> destinationUris, CreateModelExtractJobOptions options, CancellationToken cancellationToken);
    public virtual void DeleteJob(string jobId, DeleteJobOptions options);
    public virtual void DeleteJob(string projectId, string jobId, DeleteJobOptions options);
    public virtual void DeleteJob(JobReference jobReference, DeleteJobOptions options);
    public virtual Task DeleteJobAsync(string jobId, DeleteJobOptions options, CancellationToken cancellationToken);
    public virtual Task DeleteJobAsync(string projectId, string jobId, DeleteJobOptions options, CancellationToken cancellationToken);
    public virtual Task DeleteJobAsync(JobReference jobReference, DeleteJobOptions options, CancellationToken cancellationToken);
    public virtual PagedEnumerable`2<ListModelsResponse, BigQueryModel> ListModels(string projectId, string datasetId, ListModelsOptions options);
    public virtual PagedEnumerable`2<ListModelsResponse, BigQueryModel> ListModels(string datasetId, ListModelsOptions options);
    public virtual PagedEnumerable`2<ListModelsResponse, BigQueryModel> ListModels(DatasetReference datasetReference, ListModelsOptions options);
    public virtual PagedAsyncEnumerable`2<ListModelsResponse, BigQueryModel> ListModelsAsync(string projectId, string datasetId, ListModelsOptions options);
    public virtual PagedAsyncEnumerable`2<ListModelsResponse, BigQueryModel> ListModelsAsync(string datasetId, ListModelsOptions options);
    public virtual PagedAsyncEnumerable`2<ListModelsResponse, BigQueryModel> ListModelsAsync(DatasetReference datasetReference, ListModelsOptions options);
    public virtual BigQueryModel GetModel(string datasetId, string modelId, GetModelOptions options);
    public virtual BigQueryModel GetModel(string projectId, string datasetId, string modelId, GetModelOptions options);
    public virtual BigQueryModel GetModel(ModelReference modelReference, GetModelOptions options);
    public virtual Task`1<BigQueryModel> GetModelAsync(string datasetId, string modelId, GetModelOptions options, CancellationToken cancellationToken);
    public virtual Task`1<BigQueryModel> GetModelAsync(string projectId, string datasetId, string modelId, GetModelOptions options, CancellationToken cancellationToken);
    public virtual Task`1<BigQueryModel> GetModelAsync(ModelReference modelReference, GetModelOptions options, CancellationToken cancellationToken);
    public virtual void DeleteModel(string datasetId, string modelId, DeleteModelOptions options);
    public virtual void DeleteModel(string projectId, string datasetId, string modelId, DeleteModelOptions options);
    public virtual void DeleteModel(ModelReference modelReference, DeleteModelOptions options);
    public virtual Task DeleteModelAsync(string datasetId, string modelId, DeleteModelOptions options, CancellationToken cancellationToken);
    public virtual Task DeleteModelAsync(string projectId, string datasetId, string modelId, DeleteModelOptions options, CancellationToken cancellationToken);
    public virtual Task DeleteModelAsync(ModelReference modelReference, DeleteModelOptions options, CancellationToken cancellationToken);
    public virtual BigQueryModel PatchModel(string datasetId, string modelId, Model resource, PatchModelOptions options);
    public virtual BigQueryModel PatchModel(string projectId, string datasetId, string modelId, Model resource, PatchModelOptions options);
    public virtual BigQueryModel PatchModel(ModelReference modelReference, Model resource, PatchModelOptions options);
    public virtual Task`1<BigQueryModel> PatchModelAsync(string datasetId, string modelId, Model resource, PatchModelOptions options, CancellationToken cancellationToken);
    public virtual Task`1<BigQueryModel> PatchModelAsync(string projectId, string datasetId, string modelId, Model resource, PatchModelOptions options, CancellationToken cancellationToken);
    public virtual Task`1<BigQueryModel> PatchModelAsync(ModelReference modelReference, Model resource, PatchModelOptions options, CancellationToken cancellationToken);
    public virtual PagedEnumerable`2<ProjectList, CloudProject> ListProjects(ListProjectsOptions options);
    public virtual PagedAsyncEnumerable`2<ProjectList, CloudProject> ListProjectsAsync(ListProjectsOptions options);
    public virtual BigQueryResults ExecuteQuery(string sql, IEnumerable`1<BigQueryParameter> parameters, QueryOptions queryOptions, GetQueryResultsOptions resultsOptions);
    [AsyncStateMachineAttribute("Google.Cloud.BigQuery.V2.BigQueryClient/<ExecuteQueryAsync>d__241")]
public virtual Task`1<BigQueryResults> ExecuteQueryAsync(string sql, IEnumerable`1<BigQueryParameter> parameters, QueryOptions queryOptions, GetQueryResultsOptions resultsOptions, CancellationToken cancellationToken);
    public virtual BigQueryJob CreateQueryJob(string sql, IEnumerable`1<BigQueryParameter> parameters, QueryOptions options);
    public virtual Task`1<BigQueryJob> CreateQueryJobAsync(string sql, IEnumerable`1<BigQueryParameter> parameters, QueryOptions options, CancellationToken cancellationToken);
    public virtual PagedEnumerable`2<TableDataList, BigQueryRow> ListRows(string projectId, string datasetId, string tableId, TableSchema schema, ListRowsOptions options);
    public virtual PagedEnumerable`2<TableDataList, BigQueryRow> ListRows(string datasetId, string tableId, TableSchema schema, ListRowsOptions options);
    public virtual PagedEnumerable`2<TableDataList, BigQueryRow> ListRows(TableReference tableReference, TableSchema schema, ListRowsOptions options);
    public virtual PagedAsyncEnumerable`2<TableDataList, BigQueryRow> ListRowsAsync(string projectId, string datasetId, string tableId, TableSchema schema, ListRowsOptions options);
    public virtual PagedAsyncEnumerable`2<TableDataList, BigQueryRow> ListRowsAsync(string datasetId, string tableId, TableSchema schema, ListRowsOptions options);
    public virtual PagedAsyncEnumerable`2<TableDataList, BigQueryRow> ListRowsAsync(TableReference tableReference, TableSchema schema, ListRowsOptions options);
    internal virtual GetQueryResultsResponse GetRawQueryResults(JobReference jobReference, GetQueryResultsOptions options, Nullable`1<DateTime> timeoutBase);
    internal virtual Task`1<GetQueryResultsResponse> GetRawQueryResultsAsync(JobReference jobReference, GetQueryResultsOptions options, Nullable`1<DateTime> timeoutBase, CancellationToken cancellationToken);
    internal virtual BigQueryResults GetQueryResults(JobReference jobReference, TableReference tableReference, GetQueryResultsOptions options);
    internal virtual Task`1<BigQueryResults> GetQueryResultsAsync(JobReference jobReference, TableReference tableReference, GetQueryResultsOptions options, CancellationToken cancellationToken);
    public virtual BigQueryResults GetQueryResults(string jobId, GetQueryResultsOptions options);
    public virtual BigQueryResults GetQueryResults(string projectId, string jobId, GetQueryResultsOptions options);
    public virtual BigQueryResults GetQueryResults(JobReference jobReference, GetQueryResultsOptions options);
    public virtual Task`1<BigQueryResults> GetQueryResultsAsync(string jobId, GetQueryResultsOptions options, CancellationToken cancellationToken);
    public virtual Task`1<BigQueryResults> GetQueryResultsAsync(string projectId, string jobId, GetQueryResultsOptions options, CancellationToken cancellationToken);
    public virtual Task`1<BigQueryResults> GetQueryResultsAsync(JobReference jobReference, GetQueryResultsOptions options, CancellationToken cancellationToken);
    public virtual PagedEnumerable`2<ListRoutinesResponse, BigQueryRoutine> ListRoutines(string projectId, string datasetId, ListRoutinesOptions options);
    public virtual PagedEnumerable`2<ListRoutinesResponse, BigQueryRoutine> ListRoutines(string datasetId, ListRoutinesOptions options);
    public virtual PagedEnumerable`2<ListRoutinesResponse, BigQueryRoutine> ListRoutines(DatasetReference datasetReference, ListRoutinesOptions options);
    public virtual PagedAsyncEnumerable`2<ListRoutinesResponse, BigQueryRoutine> ListRoutinesAsync(string projectId, string datasetId, ListRoutinesOptions options);
    public virtual PagedAsyncEnumerable`2<ListRoutinesResponse, BigQueryRoutine> ListRoutinesAsync(string datasetId, ListRoutinesOptions options);
    public virtual PagedAsyncEnumerable`2<ListRoutinesResponse, BigQueryRoutine> ListRoutinesAsync(DatasetReference datasetReference, ListRoutinesOptions options);
    public virtual BigQueryRoutine GetRoutine(string datasetId, string routineId, GetRoutineOptions options);
    public virtual BigQueryRoutine GetRoutine(string projectId, string datasetId, string routineId, GetRoutineOptions options);
    public virtual BigQueryRoutine GetRoutine(RoutineReference routineReference, GetRoutineOptions options);
    public virtual Task`1<BigQueryRoutine> GetRoutineAsync(string datasetId, string routineId, GetRoutineOptions options, CancellationToken cancellationToken);
    public virtual Task`1<BigQueryRoutine> GetRoutineAsync(string projectId, string datasetId, string routineId, GetRoutineOptions options, CancellationToken cancellationToken);
    public virtual Task`1<BigQueryRoutine> GetRoutineAsync(RoutineReference routineReference, GetRoutineOptions options, CancellationToken cancellationToken);
    public virtual BigQueryRoutine CreateRoutine(string datasetId, string routineId, Routine resource, CreateRoutineOptions options);
    public virtual BigQueryRoutine CreateRoutine(string projectId, string datasetId, string routineId, Routine resource, CreateRoutineOptions options);
    public virtual BigQueryRoutine CreateRoutine(RoutineReference routineReference, Routine resource, CreateRoutineOptions options);
    public virtual Task`1<BigQueryRoutine> CreateRoutineAsync(string datasetId, string routineId, Routine resource, CreateRoutineOptions options, CancellationToken cancellationToken);
    public virtual Task`1<BigQueryRoutine> CreateRoutineAsync(string projectId, string datasetId, string routineId, Routine resource, CreateRoutineOptions options, CancellationToken cancellationToken);
    public virtual Task`1<BigQueryRoutine> CreateRoutineAsync(RoutineReference routineReference, Routine resource, CreateRoutineOptions options, CancellationToken cancellationToken);
    public virtual BigQueryRoutine GetOrCreateRoutine(string datasetId, string routineId, Routine resource, GetRoutineOptions getOptions, CreateRoutineOptions createOptions);
    public virtual BigQueryRoutine GetOrCreateRoutine(string projectId, string datasetId, string routineId, Routine resource, GetRoutineOptions getOptions, CreateRoutineOptions createOptions);
    public virtual BigQueryRoutine GetOrCreateRoutine(RoutineReference routineReference, Routine resource, GetRoutineOptions getOptions, CreateRoutineOptions createOptions);
    public virtual Task`1<BigQueryRoutine> GetOrCreateRoutineAsync(string datasetId, string routineId, Routine resource, GetRoutineOptions getOptions, CreateRoutineOptions createOptions, CancellationToken cancellationToken);
    public virtual Task`1<BigQueryRoutine> GetOrCreateRoutineAsync(string projectId, string datasetId, string routineId, Routine resource, GetRoutineOptions getOptions, CreateRoutineOptions createOptions, CancellationToken cancellationToken);
    public virtual Task`1<BigQueryRoutine> GetOrCreateRoutineAsync(RoutineReference routineReference, Routine resource, GetRoutineOptions getOptions, CreateRoutineOptions createOptions, CancellationToken cancellationToken);
    public virtual void DeleteRoutine(string datasetId, string routineId, DeleteRoutineOptions options);
    public virtual void DeleteRoutine(string projectId, string datasetId, string routineId, DeleteRoutineOptions options);
    public virtual void DeleteRoutine(RoutineReference routineReference, DeleteRoutineOptions options);
    public virtual Task DeleteRoutineAsync(string datasetId, string routineId, DeleteRoutineOptions options, CancellationToken cancellationToken);
    public virtual Task DeleteRoutineAsync(string projectId, string datasetId, string routineId, DeleteRoutineOptions options, CancellationToken cancellationToken);
    public virtual Task DeleteRoutineAsync(RoutineReference routineReference, DeleteRoutineOptions options, CancellationToken cancellationToken);
    public virtual BigQueryRoutine UpdateRoutine(string datasetId, string routineId, Routine resource, UpdateRoutineOptions options);
    public virtual BigQueryRoutine UpdateRoutine(string projectId, string datasetId, string routineId, Routine resource, UpdateRoutineOptions options);
    public virtual BigQueryRoutine UpdateRoutine(RoutineReference routineReference, Routine resource, UpdateRoutineOptions options);
    public virtual Task`1<BigQueryRoutine> UpdateRoutineAsync(string datasetId, string routineId, Routine resource, UpdateRoutineOptions options, CancellationToken cancellationToken);
    public virtual Task`1<BigQueryRoutine> UpdateRoutineAsync(string projectId, string datasetId, string routineId, Routine resource, UpdateRoutineOptions options, CancellationToken cancellationToken);
    public virtual Task`1<BigQueryRoutine> UpdateRoutineAsync(RoutineReference routineReference, Routine resource, UpdateRoutineOptions options, CancellationToken cancellationToken);
    public virtual string GetBigQueryServiceAccountEmail(GetBigQueryServiceAccountEmailOptions options);
    public virtual string GetBigQueryServiceAccountEmail(string projectId, GetBigQueryServiceAccountEmailOptions options);
    public virtual string GetBigQueryServiceAccountEmail(ProjectReference projectReference, GetBigQueryServiceAccountEmailOptions options);
    public virtual Task`1<string> GetBigQueryServiceAccountEmailAsync(GetBigQueryServiceAccountEmailOptions options, CancellationToken cancellationToken);
    public virtual Task`1<string> GetBigQueryServiceAccountEmailAsync(string projectId, GetBigQueryServiceAccountEmailOptions options, CancellationToken cancellationToken);
    public virtual Task`1<string> GetBigQueryServiceAccountEmailAsync(ProjectReference projectReference, GetBigQueryServiceAccountEmailOptions options, CancellationToken cancellationToken);
    public virtual PagedEnumerable`2<TableList, BigQueryTable> ListTables(string projectId, string datasetId, ListTablesOptions options);
    public virtual PagedEnumerable`2<TableList, BigQueryTable> ListTables(string datasetId, ListTablesOptions options);
    public virtual PagedEnumerable`2<TableList, BigQueryTable> ListTables(DatasetReference datasetReference, ListTablesOptions options);
    public virtual PagedAsyncEnumerable`2<TableList, BigQueryTable> ListTablesAsync(string projectId, string datasetId, ListTablesOptions options);
    public virtual PagedAsyncEnumerable`2<TableList, BigQueryTable> ListTablesAsync(string datasetId, ListTablesOptions options);
    public virtual PagedAsyncEnumerable`2<TableList, BigQueryTable> ListTablesAsync(DatasetReference datasetReference, ListTablesOptions options);
    public virtual BigQueryTable GetTable(string datasetId, string tableId, GetTableOptions options);
    public virtual BigQueryTable GetTable(string projectId, string datasetId, string tableId, GetTableOptions options);
    public virtual BigQueryTable GetTable(TableReference tableReference, GetTableOptions options);
    public virtual Task`1<BigQueryTable> GetTableAsync(string datasetId, string tableId, GetTableOptions options, CancellationToken cancellationToken);
    public virtual Task`1<BigQueryTable> GetTableAsync(string projectId, string datasetId, string tableId, GetTableOptions options, CancellationToken cancellationToken);
    public virtual Task`1<BigQueryTable> GetTableAsync(TableReference tableReference, GetTableOptions options, CancellationToken cancellationToken);
    public virtual BigQueryTable CreateTable(string datasetId, string tableId, Table resource, CreateTableOptions options);
    public virtual BigQueryTable CreateTable(string projectId, string datasetId, string tableId, Table resource, CreateTableOptions options);
    public virtual BigQueryTable CreateTable(TableReference tableReference, Table resource, CreateTableOptions options);
    public virtual Task`1<BigQueryTable> CreateTableAsync(string datasetId, string tableId, Table resource, CreateTableOptions options, CancellationToken cancellationToken);
    public virtual Task`1<BigQueryTable> CreateTableAsync(string projectId, string datasetId, string tableId, Table resource, CreateTableOptions options, CancellationToken cancellationToken);
    public virtual Task`1<BigQueryTable> CreateTableAsync(TableReference tableReference, Table resource, CreateTableOptions options, CancellationToken cancellationToken);
    public virtual BigQueryTable CreateTable(string datasetId, string tableId, TableSchema schema, CreateTableOptions options);
    public virtual BigQueryTable CreateTable(string projectId, string datasetId, string tableId, TableSchema schema, CreateTableOptions options);
    public virtual BigQueryTable CreateTable(TableReference tableReference, TableSchema schema, CreateTableOptions options);
    public virtual Task`1<BigQueryTable> CreateTableAsync(string datasetId, string tableId, TableSchema schema, CreateTableOptions options, CancellationToken cancellationToken);
    public virtual Task`1<BigQueryTable> CreateTableAsync(string projectId, string datasetId, string tableId, TableSchema schema, CreateTableOptions options, CancellationToken cancellationToken);
    public virtual Task`1<BigQueryTable> CreateTableAsync(TableReference tableReference, TableSchema schema, CreateTableOptions options, CancellationToken cancellationToken);
    public virtual BigQueryTable GetOrCreateTable(string datasetId, string tableId, Table resource, GetTableOptions getOptions, CreateTableOptions createOptions);
    public virtual BigQueryTable GetOrCreateTable(string projectId, string datasetId, string tableId, Table resource, GetTableOptions getOptions, CreateTableOptions createOptions);
    public virtual BigQueryTable GetOrCreateTable(TableReference tableReference, Table resource, GetTableOptions getOptions, CreateTableOptions createOptions);
    public virtual Task`1<BigQueryTable> GetOrCreateTableAsync(string datasetId, string tableId, Table resource, GetTableOptions getOptions, CreateTableOptions createOptions, CancellationToken cancellationToken);
    public virtual Task`1<BigQueryTable> GetOrCreateTableAsync(string projectId, string datasetId, string tableId, Table resource, GetTableOptions getOptions, CreateTableOptions createOptions, CancellationToken cancellationToken);
    public virtual Task`1<BigQueryTable> GetOrCreateTableAsync(TableReference tableReference, Table resource, GetTableOptions getOptions, CreateTableOptions createOptions, CancellationToken cancellationToken);
    public virtual BigQueryTable GetOrCreateTable(string datasetId, string tableId, TableSchema schema, GetTableOptions getOptions, CreateTableOptions createOptions);
    public virtual BigQueryTable GetOrCreateTable(string projectId, string datasetId, string tableId, TableSchema schema, GetTableOptions getOptions, CreateTableOptions createOptions);
    public virtual BigQueryTable GetOrCreateTable(TableReference tableReference, TableSchema schema, GetTableOptions getOptions, CreateTableOptions createOptions);
    public virtual Task`1<BigQueryTable> GetOrCreateTableAsync(string datasetId, string tableId, TableSchema schema, GetTableOptions getOptions, CreateTableOptions createOptions, CancellationToken cancellationToken);
    public virtual Task`1<BigQueryTable> GetOrCreateTableAsync(string projectId, string datasetId, string tableId, TableSchema schema, GetTableOptions getOptions, CreateTableOptions createOptions, CancellationToken cancellationToken);
    public virtual Task`1<BigQueryTable> GetOrCreateTableAsync(TableReference tableReference, TableSchema schema, GetTableOptions getOptions, CreateTableOptions createOptions, CancellationToken cancellationToken);
    public virtual void DeleteTable(string datasetId, string tableId, DeleteTableOptions options);
    public virtual void DeleteTable(string projectId, string datasetId, string tableId, DeleteTableOptions options);
    public virtual void DeleteTable(TableReference tableReference, DeleteTableOptions options);
    public virtual Task DeleteTableAsync(string datasetId, string tableId, DeleteTableOptions options, CancellationToken cancellationToken);
    public virtual Task DeleteTableAsync(string projectId, string datasetId, string tableId, DeleteTableOptions options, CancellationToken cancellationToken);
    public virtual Task DeleteTableAsync(TableReference tableReference, DeleteTableOptions options, CancellationToken cancellationToken);
    public virtual BigQueryTable UpdateTable(string datasetId, string tableId, Table resource, UpdateTableOptions options);
    public virtual BigQueryTable UpdateTable(string projectId, string datasetId, string tableId, Table resource, UpdateTableOptions options);
    public virtual BigQueryTable UpdateTable(TableReference tableReference, Table resource, UpdateTableOptions options);
    public virtual Task`1<BigQueryTable> UpdateTableAsync(string datasetId, string tableId, Table resource, UpdateTableOptions options, CancellationToken cancellationToken);
    public virtual Task`1<BigQueryTable> UpdateTableAsync(string projectId, string datasetId, string tableId, Table resource, UpdateTableOptions options, CancellationToken cancellationToken);
    public virtual Task`1<BigQueryTable> UpdateTableAsync(TableReference tableReference, Table resource, UpdateTableOptions options, CancellationToken cancellationToken);
    public virtual BigQueryTable PatchTable(string datasetId, string tableId, Table resource, PatchTableOptions options);
    public virtual BigQueryTable PatchTable(string projectId, string datasetId, string tableId, Table resource, PatchTableOptions options);
    public virtual BigQueryTable PatchTable(TableReference tableReference, Table resource, PatchTableOptions options);
    public virtual Task`1<BigQueryTable> PatchTableAsync(string datasetId, string tableId, Table resource, PatchTableOptions options, CancellationToken cancellationToken);
    public virtual Task`1<BigQueryTable> PatchTableAsync(string projectId, string datasetId, string tableId, Table resource, PatchTableOptions options, CancellationToken cancellationToken);
    public virtual Task`1<BigQueryTable> PatchTableAsync(TableReference tableReference, Table resource, PatchTableOptions options, CancellationToken cancellationToken);
    public virtual Policy GetTableIamPolicy(string datasetId, string tableId, GetTableIamPolicyOptions options);
    public virtual Policy GetTableIamPolicy(string projectId, string datasetId, string tableId, GetTableIamPolicyOptions options);
    public virtual Policy GetTableIamPolicy(TableReference tableReference, GetTableIamPolicyOptions options);
    public virtual Task`1<Policy> GetTableIamPolicyAsync(string datasetId, string tableId, GetTableIamPolicyOptions options, CancellationToken cancellationToken);
    public virtual Task`1<Policy> GetTableIamPolicyAsync(string projectId, string datasetId, string tableId, GetTableIamPolicyOptions options, CancellationToken cancellationToken);
    public virtual Task`1<Policy> GetTableIamPolicyAsync(TableReference tableReference, GetTableIamPolicyOptions options, CancellationToken cancellationToken);
    public virtual Policy SetTableIamPolicy(string datasetId, string tableId, Policy policy, SetTableIamPolicyOptions options);
    public virtual Policy SetTableIamPolicy(string projectId, string datasetId, string tableId, Policy policy, SetTableIamPolicyOptions options);
    public virtual Policy SetTableIamPolicy(TableReference tableReference, Policy policy, SetTableIamPolicyOptions options);
    public virtual Task`1<Policy> SetTableIamPolicyAsync(string datasetId, string tableId, Policy policy, SetTableIamPolicyOptions options, CancellationToken cancellationToken);
    public virtual Task`1<Policy> SetTableIamPolicyAsync(string projectId, string datasetId, string tableId, Policy policy, SetTableIamPolicyOptions options, CancellationToken cancellationToken);
    public virtual Task`1<Policy> SetTableIamPolicyAsync(TableReference tableReference, Policy policy, SetTableIamPolicyOptions options, CancellationToken cancellationToken);
    public virtual TestIamPermissionsResponse TestTableIamPermissions(string datasetId, string tableId, IList`1<string> permissions, TestTableIamPermissionsOptions options);
    public virtual TestIamPermissionsResponse TestTableIamPermissions(string projectId, string datasetId, string tableId, IList`1<string> permissions, TestTableIamPermissionsOptions options);
    public virtual TestIamPermissionsResponse TestTableIamPermissions(TableReference tableReference, IList`1<string> permissions, TestTableIamPermissionsOptions options);
    public virtual Task`1<TestIamPermissionsResponse> TestTableIamPermissionsAsync(string datasetId, string tableId, IList`1<string> permissions, TestTableIamPermissionsOptions options, CancellationToken cancellationToken);
    public virtual Task`1<TestIamPermissionsResponse> TestTableIamPermissionsAsync(string projectId, string datasetId, string tableId, IList`1<string> permissions, TestTableIamPermissionsOptions options, CancellationToken cancellationToken);
    public virtual Task`1<TestIamPermissionsResponse> TestTableIamPermissionsAsync(TableReference tableReference, IList`1<string> permissions, TestTableIamPermissionsOptions options, CancellationToken cancellationToken);
}
public class Google.Cloud.BigQuery.V2.BigQueryClientBuilder : ClientBuilderBase`1<BigQueryClient> {
    [CompilerGeneratedAttribute]
private string <ProjectId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DefaultLocation>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <PrettyPrint>k__BackingField;
    [CompilerGeneratedAttribute]
private BigqueryService <Service>k__BackingField;
    public string ProjectId { get; public set; }
    public string DefaultLocation { get; public set; }
    public Nullable`1<bool> PrettyPrint { get; public set; }
    internal BigqueryService Service { get; internal set; }
    [CompilerGeneratedAttribute]
public string get_ProjectId();
    [CompilerGeneratedAttribute]
public void set_ProjectId(string value);
    [CompilerGeneratedAttribute]
public string get_DefaultLocation();
    [CompilerGeneratedAttribute]
public void set_DefaultLocation(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_PrettyPrint();
    [CompilerGeneratedAttribute]
public void set_PrettyPrint(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
internal BigqueryService get_Service();
    [CompilerGeneratedAttribute]
internal void set_Service(BigqueryService value);
    public virtual BigQueryClient Build();
    [AsyncStateMachineAttribute("Google.Cloud.BigQuery.V2.BigQueryClientBuilder/<BuildAsync>d__17")]
public virtual Task`1<BigQueryClient> BuildAsync(CancellationToken cancellationToken);
    protected virtual string GetDefaultApplicationName();
    protected virtual ScopedCredentialProvider GetScopedCredentialProvider();
    protected virtual void Validate();
}
public class Google.Cloud.BigQuery.V2.BigQueryClientImpl : BigQueryClient {
    private static object _applicationNameLock;
    private static string _applicationName;
    [CompilerGeneratedAttribute]
private BigqueryService <Service>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProjectId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DefaultLocation>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PrettyPrint>k__BackingField;
    private static PollSettings s_defaultPollSettings;
    internal static string DefaultJobIdPrefix;
    private static long s_maxGetQueryResultsRequestTimeout;
    private IClock Clock { get; }
    private IScheduler Scheduler { get; }
    public static string ApplicationName { get; public set; }
    public BigqueryService Service { get; }
    public string ProjectId { get; }
    public string DefaultLocation { get; }
    public bool PrettyPrint { get; }
    internal BigQueryClientImpl(string projectId, BigqueryService service, string defaultLocation, bool prettyPrint);
    public BigQueryClientImpl(string projectId, BigqueryService service, string defaultLocation);
    public BigQueryClientImpl(string projectId, BigqueryService service);
    public BigQueryClientImpl(ProjectReference projectReference, BigqueryService service, string defaultLocation);
    public BigQueryClientImpl(ProjectReference projectReference, BigqueryService service);
    private static BigQueryClientImpl();
    private IClock get_Clock();
    private IScheduler get_Scheduler();
    public static string get_ApplicationName();
    public static void set_ApplicationName(string value);
    [CompilerGeneratedAttribute]
public virtual BigqueryService get_Service();
    [CompilerGeneratedAttribute]
public virtual string get_ProjectId();
    [CompilerGeneratedAttribute]
public virtual string get_DefaultLocation();
    [CompilerGeneratedAttribute]
public virtual bool get_PrettyPrint();
    public virtual void Dispose();
    public virtual BigQueryClient WithDefaultLocation(string defaultLocation);
    public virtual BigQueryDataset GetDataset(DatasetReference datasetReference, GetDatasetOptions options);
    [AsyncStateMachineAttribute("Google.Cloud.BigQuery.V2.BigQueryClientImpl/<GetDatasetAsync>d__30")]
public virtual Task`1<BigQueryDataset> GetDatasetAsync(DatasetReference datasetReference, GetDatasetOptions options, CancellationToken cancellationToken);
    public virtual PagedEnumerable`2<DatasetList, BigQueryDataset> ListDatasets(ProjectReference projectReference, ListDatasetsOptions options);
    public virtual PagedAsyncEnumerable`2<DatasetList, BigQueryDataset> ListDatasetsAsync(ProjectReference projectReference, ListDatasetsOptions options);
    public virtual BigQueryDataset CreateDataset(DatasetReference datasetReference, Dataset resource, CreateDatasetOptions options);
    [AsyncStateMachineAttribute("Google.Cloud.BigQuery.V2.BigQueryClientImpl/<CreateDatasetAsync>d__34")]
public virtual Task`1<BigQueryDataset> CreateDatasetAsync(DatasetReference datasetReference, Dataset resource, CreateDatasetOptions options, CancellationToken cancellationToken);
    public virtual BigQueryDataset GetOrCreateDataset(DatasetReference datasetReference, Dataset resource, GetDatasetOptions getOptions, CreateDatasetOptions createOptions);
    [AsyncStateMachineAttribute("Google.Cloud.BigQuery.V2.BigQueryClientImpl/<GetOrCreateDatasetAsync>d__36")]
public virtual Task`1<BigQueryDataset> GetOrCreateDatasetAsync(DatasetReference datasetReference, Dataset resource, GetDatasetOptions getOptions, CreateDatasetOptions createOptions, CancellationToken cancellationToken);
    public virtual void DeleteDataset(DatasetReference datasetReference, DeleteDatasetOptions options);
    [AsyncStateMachineAttribute("Google.Cloud.BigQuery.V2.BigQueryClientImpl/<DeleteDatasetAsync>d__38")]
public virtual Task DeleteDatasetAsync(DatasetReference datasetReference, DeleteDatasetOptions options, CancellationToken cancellationToken);
    public virtual BigQueryDataset UpdateDataset(DatasetReference datasetReference, Dataset resource, UpdateDatasetOptions options);
    [AsyncStateMachineAttribute("Google.Cloud.BigQuery.V2.BigQueryClientImpl/<UpdateDatasetAsync>d__40")]
public virtual Task`1<BigQueryDataset> UpdateDatasetAsync(DatasetReference datasetReference, Dataset resource, UpdateDatasetOptions options, CancellationToken cancellationToken);
    public virtual BigQueryDataset PatchDataset(DatasetReference datasetReference, Dataset resource, PatchDatasetOptions options);
    [AsyncStateMachineAttribute("Google.Cloud.BigQuery.V2.BigQueryClientImpl/<PatchDatasetAsync>d__42")]
public virtual Task`1<BigQueryDataset> PatchDatasetAsync(DatasetReference datasetReference, Dataset resource, PatchDatasetOptions options, CancellationToken cancellationToken);
    private GetRequest CreateGetDatasetRequest(DatasetReference datasetReference, GetDatasetOptions options);
    private ListRequest CreateListDatasetsRequest(ProjectReference projectReference, ListDatasetsOptions options);
    private InsertRequest CreateInsertDatasetRequest(DatasetReference datasetReference, Dataset resource, CreateDatasetOptions options);
    private DeleteRequest CreateDeleteDatasetRequest(DatasetReference datasetReference, DeleteDatasetOptions options);
    private UpdateRequest CreateUpdateDatasetRequest(DatasetReference datasetReference, Dataset resource, UpdateDatasetOptions options);
    private PatchRequest CreatePatchDatasetRequest(DatasetReference datasetReference, Dataset resource, PatchDatasetOptions options);
    public virtual string RemoveDatasetLabel(DatasetReference datasetReference, string labelName, ModifyLabelsOptions options);
    [AsyncStateMachineAttribute("Google.Cloud.BigQuery.V2.BigQueryClientImpl/<RemoveDatasetLabelAsync>d__50")]
public virtual Task`1<string> RemoveDatasetLabelAsync(DatasetReference datasetReference, string labelName, ModifyLabelsOptions options, CancellationToken cancellationToken);
    public virtual string SetDatasetLabel(DatasetReference datasetReference, string labelName, string labelValue, ModifyLabelsOptions options);
    [AsyncStateMachineAttribute("Google.Cloud.BigQuery.V2.BigQueryClientImpl/<SetDatasetLabelAsync>d__52")]
public virtual Task`1<string> SetDatasetLabelAsync(DatasetReference datasetReference, string labelName, string labelValue, ModifyLabelsOptions options, CancellationToken cancellationToken);
    public virtual IDictionary`2<string, string> ModifyDatasetLabels(DatasetReference datasetReference, IDictionary`2<string, string> labels, ModifyLabelsOptions options);
    [AsyncStateMachineAttribute("Google.Cloud.BigQuery.V2.BigQueryClientImpl/<ModifyDatasetLabelsAsync>d__54")]
public virtual Task`1<IDictionary`2<string, string>> ModifyDatasetLabelsAsync(DatasetReference datasetReference, IDictionary`2<string, string> labels, ModifyLabelsOptions options, CancellationToken cancellationToken);
    public virtual IDictionary`2<string, string> ClearDatasetLabels(DatasetReference datasetReference, ModifyLabelsOptions options);
    [AsyncStateMachineAttribute("Google.Cloud.BigQuery.V2.BigQueryClientImpl/<ClearDatasetLabelsAsync>d__56")]
public virtual Task`1<IDictionary`2<string, string>> ClearDatasetLabelsAsync(DatasetReference datasetReference, ModifyLabelsOptions options, CancellationToken cancellationToken);
    private static IDictionary`2<string, string> GetDifferences(IDictionary`2<string, string> requested, IDictionary`2<string, string> existing);
    public virtual BigQueryJob UploadCsv(TableReference tableReference, TableSchema schema, Stream input, UploadCsvOptions options);
    public virtual BigQueryJob UploadAvro(TableReference tableReference, TableSchema schema, Stream input, UploadAvroOptions options);
    public virtual BigQueryJob UploadParquet(TableReference tableReference, Stream input, UploadParquetOptions options);
    public virtual BigQueryJob UploadOrc(TableReference tableReference, Stream input, UploadOrcOptions options);
    public virtual BigQueryJob UploadJson(TableReference tableReference, TableSchema schema, IEnumerable`1<string> rows, UploadJsonOptions options);
    public virtual BigQueryJob UploadJson(TableReference tableReference, TableSchema schema, Stream input, UploadJsonOptions options);
    private TableSchema GetSchema(TableReference tableReference);
    private BigQueryJob UploadData(JobConfigurationLoad loadConfiguration, Stream input, string contentType, JobCreationOptions options);
    public virtual BigQueryInsertResults InsertRows(TableReference tableReference, IEnumerable`1<BigQueryInsertRow> rows, InsertOptions options);
    [AsyncStateMachineAttribute("Google.Cloud.BigQuery.V2.BigQueryClientImpl/<UploadCsvAsync>d__67")]
public virtual Task`1<BigQueryJob> UploadCsvAsync(TableReference tableReference, TableSchema schema, Stream input, UploadCsvOptions options, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Google.Cloud.BigQuery.V2.BigQueryClientImpl/<UploadAvroAsync>d__68")]
public virtual Task`1<BigQueryJob> UploadAvroAsync(TableReference tableReference, TableSchema schema, Stream input, UploadAvroOptions options, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Google.Cloud.BigQuery.V2.BigQueryClientImpl/<UploadParquetAsync>d__69")]
public virtual Task`1<BigQueryJob> UploadParquetAsync(TableReference tableReference, Stream input, UploadParquetOptions options, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Google.Cloud.BigQuery.V2.BigQueryClientImpl/<UploadOrcAsync>d__70")]
public virtual Task`1<BigQueryJob> UploadOrcAsync(TableReference tableReference, Stream input, UploadOrcOptions options, CancellationToken cancellationToken);
    public virtual Task`1<BigQueryJob> UploadJsonAsync(TableReference tableReference, TableSchema schema, IEnumerable`1<string> rows, UploadJsonOptions options, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Google.Cloud.BigQuery.V2.BigQueryClientImpl/<UploadJsonAsync>d__72")]
public virtual Task`1<BigQueryJob> UploadJsonAsync(TableReference tableReference, TableSchema schema, Stream input, UploadJsonOptions options, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Google.Cloud.BigQuery.V2.BigQueryClientImpl/<GetSchemaAsync>d__73")]
private Task`1<TableSchema> GetSchemaAsync(TableReference tableReference, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Google.Cloud.BigQuery.V2.BigQueryClientImpl/<UploadDataAsync>d__74")]
private Task`1<BigQueryJob> UploadDataAsync(JobConfigurationLoad loadConfiguration, Stream input, string contentType, JobCreationOptions options, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Google.Cloud.BigQuery.V2.BigQueryClientImpl/<InsertRowsAsync>d__75")]
public virtual Task`1<BigQueryInsertResults> InsertRowsAsync(TableReference tableReference, IEnumerable`1<BigQueryInsertRow> rows, InsertOptions options, CancellationToken cancellationToken);
    private static Stream CreateJsonStream(IEnumerable`1<string> rows);
    private InsertAllRequest CreateInsertAllRequest(TableReference tableReference, IEnumerable`1<BigQueryInsertRow> rows, InsertOptions options, IReadOnlyList`1& validatedRows);
    public virtual PagedEnumerable`2<JobList, BigQueryJob> ListJobs(ProjectReference projectReference, ListJobsOptions options);
    public virtual PagedAsyncEnumerable`2<JobList, BigQueryJob> ListJobsAsync(ProjectReference projectReference, ListJobsOptions options);
    public virtual BigQueryJob PollJobUntilCompleted(JobReference jobReference, GetJobOptions options, PollSettings pollSettings);
    public virtual Task`1<BigQueryJob> PollJobUntilCompletedAsync(JobReference jobReference, GetJobOptions options, PollSettings pollSettings, CancellationToken cancellationToken);
    public virtual BigQueryJob GetJob(JobReference jobReference, GetJobOptions options);
    [AsyncStateMachineAttribute("Google.Cloud.BigQuery.V2.BigQueryClientImpl/<GetJobAsync>d__86")]
public virtual Task`1<BigQueryJob> GetJobAsync(JobReference jobReference, GetJobOptions options, CancellationToken cancellationToken);
    public virtual BigQueryJob CancelJob(JobReference jobReference, CancelJobOptions options);
    [AsyncStateMachineAttribute("Google.Cloud.BigQuery.V2.BigQueryClientImpl/<CancelJobAsync>d__88")]
public virtual Task`1<BigQueryJob> CancelJobAsync(JobReference jobReference, CancelJobOptions options, CancellationToken cancellationToken);
    public virtual BigQueryJob CreateExtractJob(TableReference tableReference, IEnumerable`1<string> destinationUris, CreateExtractJobOptions options);
    [AsyncStateMachineAttribute("Google.Cloud.BigQuery.V2.BigQueryClientImpl/<CreateExtractJobAsync>d__90")]
public virtual Task`1<BigQueryJob> CreateExtractJobAsync(TableReference tableReference, IEnumerable`1<string> destinationUris, CreateExtractJobOptions options, CancellationToken cancellationToken);
    public virtual BigQueryJob CreateCopyJob(IEnumerable`1<TableReference> sources, TableReference destination, CreateCopyJobOptions options);
    [AsyncStateMachineAttribute("Google.Cloud.BigQuery.V2.BigQueryClientImpl/<CreateCopyJobAsync>d__92")]
public virtual Task`1<BigQueryJob> CreateCopyJobAsync(IEnumerable`1<TableReference> sources, TableReference destination, CreateCopyJobOptions options, CancellationToken cancellationToken);
    public virtual BigQueryJob CreateLoadJob(IEnumerable`1<string> sourceUris, TableReference destination, TableSchema schema, CreateLoadJobOptions options);
    [AsyncStateMachineAttribute("Google.Cloud.BigQuery.V2.BigQueryClientImpl/<CreateLoadJobAsync>d__94")]
public virtual Task`1<BigQueryJob> CreateLoadJobAsync(IEnumerable`1<string> sourceUris, TableReference destination, TableSchema schema, CreateLoadJobOptions options, CancellationToken cancellationToken);
    public virtual BigQueryJob CreateModelExtractJob(ModelReference modelReference, IEnumerable`1<string> destinationUris, CreateModelExtractJobOptions options);
    [AsyncStateMachineAttribute("Google.Cloud.BigQuery.V2.BigQueryClientImpl/<CreateModelExtractJobAsync>d__96")]
public virtual Task`1<BigQueryJob> CreateModelExtractJobAsync(ModelReference modelReference, IEnumerable`1<string> destinationUris, CreateModelExtractJobOptions options, CancellationToken cancellationToken);
    public virtual void DeleteJob(JobReference jobReference, DeleteJobOptions options);
    [AsyncStateMachineAttribute("Google.Cloud.BigQuery.V2.BigQueryClientImpl/<DeleteJobAsync>d__98")]
public virtual Task DeleteJobAsync(JobReference jobReference, DeleteJobOptions options, CancellationToken cancellationToken);
    internal Job CreateJob(JobConfiguration configuration, JobCreationOptions options);
    private GetRequest CreateGetJobRequest(JobReference jobReference, GetJobOptions options);
    private ListRequest CreateListJobsRequest(ProjectReference projectReference, ListJobsOptions options);
    private CancelRequest CreateCancelJobRequest(JobReference jobReference, CancelJobOptions options);
    private InsertRequest CreateExtractJobRequest(TableReference tableReference, IEnumerable`1<string> destinationUris, CreateExtractJobOptions options);
    private InsertRequest CreateCopyJobRequest(IEnumerable`1<TableReference> sources, TableReference destination, CreateCopyJobOptions options);
    private InsertRequest CreateLoadJobRequest(IEnumerable`1<string> sourceUris, TableReference destination, TableSchema schema, CreateLoadJobOptions options);
    private InsertRequest CreateInsertJobRequest(JobConfiguration configuration, JobCreationOptions options);
    private InsertRequest CreateModelExtractJobRequest(ModelReference modelReference, IEnumerable`1<string> destinationUris, CreateModelExtractJobOptions options);
    private DeleteRequest CreateDeleteJobRequest(JobReference jobReference, DeleteJobOptions options);
    public virtual BigQueryModel GetModel(ModelReference modelReference, GetModelOptions options);
    [AsyncStateMachineAttribute("Google.Cloud.BigQuery.V2.BigQueryClientImpl/<GetModelAsync>d__112")]
public virtual Task`1<BigQueryModel> GetModelAsync(ModelReference modelReference, GetModelOptions options, CancellationToken cancellationToken);
    public virtual void DeleteModel(ModelReference modelReference, DeleteModelOptions options);
    [AsyncStateMachineAttribute("Google.Cloud.BigQuery.V2.BigQueryClientImpl/<DeleteModelAsync>d__114")]
public virtual Task DeleteModelAsync(ModelReference modelReference, DeleteModelOptions options, CancellationToken cancellationToken);
    public virtual BigQueryModel PatchModel(ModelReference modelReference, Model resource, PatchModelOptions options);
    [AsyncStateMachineAttribute("Google.Cloud.BigQuery.V2.BigQueryClientImpl/<PatchModelAsync>d__116")]
public virtual Task`1<BigQueryModel> PatchModelAsync(ModelReference modelReference, Model resource, PatchModelOptions options, CancellationToken cancellationToken);
    public virtual PagedEnumerable`2<ListModelsResponse, BigQueryModel> ListModels(DatasetReference datasetReference, ListModelsOptions options);
    public virtual PagedAsyncEnumerable`2<ListModelsResponse, BigQueryModel> ListModelsAsync(DatasetReference datasetReference, ListModelsOptions options);
    private GetRequest CreateGetModelRequest(ModelReference modelReference, GetModelOptions options);
    private DeleteRequest CreateDeleteModelRequest(ModelReference modelReference, DeleteModelOptions options);
    private PatchRequest CreatePatchModelRequest(ModelReference modelReference, Model resource, PatchModelOptions options);
    private ListRequest CreateListModelsRequest(DatasetReference datasetReference, ListModelsOptions options);
    public virtual PagedEnumerable`2<ProjectList, CloudProject> ListProjects(ListProjectsOptions options);
    public virtual PagedAsyncEnumerable`2<ProjectList, CloudProject> ListProjectsAsync(ListProjectsOptions options);
    private ListRequest CreateListProjectsRequest(ListProjectsOptions options);
    public virtual BigQueryJob CreateQueryJob(string sql, IEnumerable`1<BigQueryParameter> parameters, QueryOptions options);
    [AsyncStateMachineAttribute("Google.Cloud.BigQuery.V2.BigQueryClientImpl/<CreateQueryJobAsync>d__129")]
public virtual Task`1<BigQueryJob> CreateQueryJobAsync(string sql, IEnumerable`1<BigQueryParameter> parameters, QueryOptions options, CancellationToken cancellationToken);
    public virtual BigQueryResults GetQueryResults(JobReference jobReference, GetQueryResultsOptions options);
    internal virtual GetQueryResultsResponse GetRawQueryResults(JobReference jobReference, GetQueryResultsOptions options, Nullable`1<DateTime> timeoutBase);
    internal virtual BigQueryResults GetQueryResults(JobReference jobReference, TableReference tableReference, GetQueryResultsOptions options);
    internal virtual Task`1<GetQueryResultsResponse> GetRawQueryResultsAsync(JobReference jobReference, GetQueryResultsOptions options, Nullable`1<DateTime> timeoutBase, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Google.Cloud.BigQuery.V2.BigQueryClientImpl/<GetQueryResultsAsync>d__134")]
public virtual Task`1<BigQueryResults> GetQueryResultsAsync(JobReference jobReference, GetQueryResultsOptions options, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Google.Cloud.BigQuery.V2.BigQueryClientImpl/<GetQueryResultsAsync>d__135")]
internal virtual Task`1<BigQueryResults> GetQueryResultsAsync(JobReference jobReference, TableReference tableReference, GetQueryResultsOptions options, CancellationToken cancellationToken);
    public virtual PagedEnumerable`2<TableDataList, BigQueryRow> ListRows(TableReference tableReference, TableSchema schema, ListRowsOptions options);
    public virtual PagedAsyncEnumerable`2<TableDataList, BigQueryRow> ListRowsAsync(TableReference tableReference, TableSchema schema, ListRowsOptions options);
    private InsertRequest CreateInsertQueryJobRequest(string sql, IEnumerable`1<BigQueryParameter> parameters, QueryOptions options);
    private ListRequest CreateListRequest(TableReference tableReference, ListRowsOptions options, TableSchema schema);
    private GetQueryResultsRequest CreateGetQueryResultsRequest(JobReference jobReference, GetQueryResultsOptions options, DateTime loopStart);
    public virtual BigQueryRoutine GetRoutine(RoutineReference routineReference, GetRoutineOptions options);
    [AsyncStateMachineAttribute("Google.Cloud.BigQuery.V2.BigQueryClientImpl/<GetRoutineAsync>d__144")]
public virtual Task`1<BigQueryRoutine> GetRoutineAsync(RoutineReference routineReference, GetRoutineOptions options, CancellationToken cancellationToken);
    public virtual PagedEnumerable`2<ListRoutinesResponse, BigQueryRoutine> ListRoutines(DatasetReference datasetReference, ListRoutinesOptions options);
    public virtual PagedAsyncEnumerable`2<ListRoutinesResponse, BigQueryRoutine> ListRoutinesAsync(DatasetReference datasetReference, ListRoutinesOptions options);
    public virtual BigQueryRoutine CreateRoutine(RoutineReference routineReference, Routine resource, CreateRoutineOptions options);
    [AsyncStateMachineAttribute("Google.Cloud.BigQuery.V2.BigQueryClientImpl/<CreateRoutineAsync>d__148")]
public virtual Task`1<BigQueryRoutine> CreateRoutineAsync(RoutineReference routineReference, Routine resource, CreateRoutineOptions options, CancellationToken cancellationToken);
    public virtual BigQueryRoutine GetOrCreateRoutine(RoutineReference routineReference, Routine resource, GetRoutineOptions getOptions, CreateRoutineOptions createOptions);
    [AsyncStateMachineAttribute("Google.Cloud.BigQuery.V2.BigQueryClientImpl/<GetOrCreateRoutineAsync>d__150")]
public virtual Task`1<BigQueryRoutine> GetOrCreateRoutineAsync(RoutineReference routineReference, Routine resource, GetRoutineOptions getOptions, CreateRoutineOptions createOptions, CancellationToken cancellationToken);
    public virtual void DeleteRoutine(RoutineReference routineReference, DeleteRoutineOptions options);
    [AsyncStateMachineAttribute("Google.Cloud.BigQuery.V2.BigQueryClientImpl/<DeleteRoutineAsync>d__152")]
public virtual Task DeleteRoutineAsync(RoutineReference routineReference, DeleteRoutineOptions options, CancellationToken cancellationToken);
    public virtual BigQueryRoutine UpdateRoutine(RoutineReference routineReference, Routine resource, UpdateRoutineOptions options);
    [AsyncStateMachineAttribute("Google.Cloud.BigQuery.V2.BigQueryClientImpl/<UpdateRoutineAsync>d__154")]
public virtual Task`1<BigQueryRoutine> UpdateRoutineAsync(RoutineReference routineReference, Routine resource, UpdateRoutineOptions options, CancellationToken cancellationToken);
    private GetRequest CreateGetRoutineRequest(RoutineReference routineReference, GetRoutineOptions options);
    private ListRequest CreateListRoutinesRequest(DatasetReference datasetReference, ListRoutinesOptions options);
    private InsertRequest CreateInsertRoutineRequest(RoutineReference routineReference, Routine resource, CreateRoutineOptions options);
    private DeleteRequest CreateDeleteRoutineRequest(RoutineReference routineReference, DeleteRoutineOptions options);
    private UpdateRequest CreateUpdateRoutineRequest(RoutineReference routineReference, Routine resource, UpdateRoutineOptions options);
    private static void CheckResourceReference(RoutineReference routineReference, Routine resource);
    public virtual string GetBigQueryServiceAccountEmail(ProjectReference projectReference, GetBigQueryServiceAccountEmailOptions options);
    [AsyncStateMachineAttribute("Google.Cloud.BigQuery.V2.BigQueryClientImpl/<GetBigQueryServiceAccountEmailAsync>d__162")]
public virtual Task`1<string> GetBigQueryServiceAccountEmailAsync(ProjectReference projectReference, GetBigQueryServiceAccountEmailOptions options, CancellationToken cancellationToken);
    private GetServiceAccountRequest CreateGetServiceAccountEmailRequest(ProjectReference projectReference, GetBigQueryServiceAccountEmailOptions options);
    public virtual BigQueryTable GetTable(TableReference tableReference, GetTableOptions options);
    [AsyncStateMachineAttribute("Google.Cloud.BigQuery.V2.BigQueryClientImpl/<GetTableAsync>d__166")]
public virtual Task`1<BigQueryTable> GetTableAsync(TableReference tableReference, GetTableOptions options, CancellationToken cancellationToken);
    public virtual PagedEnumerable`2<TableList, BigQueryTable> ListTables(DatasetReference datasetReference, ListTablesOptions options);
    public virtual PagedAsyncEnumerable`2<TableList, BigQueryTable> ListTablesAsync(DatasetReference datasetReference, ListTablesOptions options);
    public virtual BigQueryTable CreateTable(TableReference tableReference, TableSchema schema, CreateTableOptions options);
    public virtual Task`1<BigQueryTable> CreateTableAsync(TableReference tableReference, TableSchema schema, CreateTableOptions options, CancellationToken cancellationToken);
    public virtual BigQueryTable CreateTable(TableReference tableReference, Table resource, CreateTableOptions options);
    [AsyncStateMachineAttribute("Google.Cloud.BigQuery.V2.BigQueryClientImpl/<CreateTableAsync>d__172")]
public virtual Task`1<BigQueryTable> CreateTableAsync(TableReference tableReference, Table resource, CreateTableOptions options, CancellationToken cancellationToken);
    public virtual BigQueryTable GetOrCreateTable(TableReference tableReference, TableSchema schema, GetTableOptions getOptions, CreateTableOptions createOptions);
    public virtual Task`1<BigQueryTable> GetOrCreateTableAsync(TableReference tableReference, TableSchema schema, GetTableOptions getOptions, CreateTableOptions createOptions, CancellationToken cancellationToken);
    public virtual BigQueryTable GetOrCreateTable(TableReference tableReference, Table resource, GetTableOptions getOptions, CreateTableOptions createOptions);
    [AsyncStateMachineAttribute("Google.Cloud.BigQuery.V2.BigQueryClientImpl/<GetOrCreateTableAsync>d__176")]
public virtual Task`1<BigQueryTable> GetOrCreateTableAsync(TableReference tableReference, Table resource, GetTableOptions getOptions, CreateTableOptions createOptions, CancellationToken cancellationToken);
    public virtual void DeleteTable(TableReference tableReference, DeleteTableOptions options);
    [AsyncStateMachineAttribute("Google.Cloud.BigQuery.V2.BigQueryClientImpl/<DeleteTableAsync>d__178")]
public virtual Task DeleteTableAsync(TableReference tableReference, DeleteTableOptions options, CancellationToken cancellationToken);
    public virtual BigQueryTable UpdateTable(TableReference tableReference, Table resource, UpdateTableOptions options);
    [AsyncStateMachineAttribute("Google.Cloud.BigQuery.V2.BigQueryClientImpl/<UpdateTableAsync>d__180")]
public virtual Task`1<BigQueryTable> UpdateTableAsync(TableReference tableReference, Table resource, UpdateTableOptions options, CancellationToken cancellationToken);
    public virtual BigQueryTable PatchTable(TableReference tableReference, Table resource, PatchTableOptions options);
    [AsyncStateMachineAttribute("Google.Cloud.BigQuery.V2.BigQueryClientImpl/<PatchTableAsync>d__182")]
public virtual Task`1<BigQueryTable> PatchTableAsync(TableReference tableReference, Table resource, PatchTableOptions options, CancellationToken cancellationToken);
    public virtual Policy GetTableIamPolicy(TableReference tableReference, GetTableIamPolicyOptions options);
    [AsyncStateMachineAttribute("Google.Cloud.BigQuery.V2.BigQueryClientImpl/<GetTableIamPolicyAsync>d__184")]
public virtual Task`1<Policy> GetTableIamPolicyAsync(TableReference tableReference, GetTableIamPolicyOptions options, CancellationToken cancellationToken);
    public virtual Policy SetTableIamPolicy(TableReference tableReference, Policy policy, SetTableIamPolicyOptions options);
    [AsyncStateMachineAttribute("Google.Cloud.BigQuery.V2.BigQueryClientImpl/<SetTableIamPolicyAsync>d__186")]
public virtual Task`1<Policy> SetTableIamPolicyAsync(TableReference tableReference, Policy policy, SetTableIamPolicyOptions options, CancellationToken cancellationToken);
    public virtual TestIamPermissionsResponse TestTableIamPermissions(TableReference tableReference, IList`1<string> permissions, TestTableIamPermissionsOptions options);
    [AsyncStateMachineAttribute("Google.Cloud.BigQuery.V2.BigQueryClientImpl/<TestTableIamPermissionsAsync>d__188")]
public virtual Task`1<TestIamPermissionsResponse> TestTableIamPermissionsAsync(TableReference tableReference, IList`1<string> permissions, TestTableIamPermissionsOptions options, CancellationToken cancellationToken);
    private GetRequest CreateGetTableRequest(TableReference tableReference, GetTableOptions options);
    private ListRequest CreateListTablesRequest(DatasetReference datasetReference, ListTablesOptions options);
    private InsertRequest CreateInsertTableRequest(TableReference tableReference, Table resource, CreateTableOptions options);
    private void CheckResourceForCreation(TableReference tableReference, Table resource);
    private DeleteRequest CreateDeleteTableRequest(TableReference tableReference, DeleteTableOptions options);
    private UpdateRequest CreateUpdateTableRequest(TableReference tableReference, Table resource, UpdateTableOptions options);
    private PatchRequest CreatePatchTableRequest(TableReference tableReference, Table resource, PatchTableOptions options);
    private GetIamPolicyRequest CreateGetTableIamPolicyRequest(TableReference tableReference, GetTableIamPolicyOptions options);
    private SetIamPolicyRequest CreateSetTableIamPolicyRequest(TableReference tableReference, Policy policy, SetTableIamPolicyOptions options);
    private TestIamPermissionsRequest CreateTestTableIamPermissionsRequest(TableReference tableReference, IList`1<string> permissions, TestTableIamPermissionsOptions options);
    [CompilerGeneratedAttribute]
internal static void <CheckResourceForCreation>g__ValidateAtMostOneNotNull|192_0(string message, Object[] values);
}
public class Google.Cloud.BigQuery.V2.BigQueryDataset : object {
    private BigQueryClient _client;
    [CompilerGeneratedAttribute]
private Dataset <Resource>k__BackingField;
    public Dataset Resource { get; }
    public DatasetReference Reference { get; }
    public string FullyQualifiedId { get; }
    internal BigQueryDataset(BigQueryClient client, DatasetsData resource);
    public BigQueryDataset(BigQueryClient client, Dataset resource);
    [CompilerGeneratedAttribute]
public Dataset get_Resource();
    public DatasetReference get_Reference();
    public string get_FullyQualifiedId();
    public BigQueryJob UploadCsv(string tableId, TableSchema schema, Stream input, UploadCsvOptions options);
    public BigQueryJob UploadAvro(string tableId, TableSchema schema, Stream input, UploadAvroOptions options);
    public BigQueryJob UploadParquet(string tableId, Stream input, UploadParquetOptions options);
    public BigQueryJob UploadOrc(string tableId, Stream input, UploadOrcOptions options);
    public BigQueryJob UploadJson(string tableId, TableSchema schema, Stream input, UploadJsonOptions options);
    public BigQueryJob UploadJson(string tableId, TableSchema schema, IEnumerable`1<string> rows, UploadJsonOptions options);
    public PagedEnumerable`2<TableList, BigQueryTable> ListTables(ListTablesOptions options);
    public BigQueryTable CreateTable(string tableId, TableSchema schema, CreateTableOptions options);
    public BigQueryTable CreateTable(string tableId, Table table, CreateTableOptions options);
    public BigQueryTable GetTable(string tableId, GetTableOptions options);
    public BigQueryTable GetOrCreateTable(string tableId, TableSchema schema, GetTableOptions getOptions, CreateTableOptions createOptions);
    public BigQueryTable GetOrCreateTable(string tableId, Table table, GetTableOptions getOptions, CreateTableOptions createOptions);
    public TableReference GetTableReference(string tableId);
    public PagedEnumerable`2<ListModelsResponse, BigQueryModel> ListModels(ListModelsOptions options);
    public BigQueryModel GetModel(string modelId, GetModelOptions options);
    public ModelReference GetModelReference(string modelId);
    public PagedEnumerable`2<ListRoutinesResponse, BigQueryRoutine> ListRoutines(ListRoutinesOptions options);
    public BigQueryRoutine CreateRoutine(string routineId, Routine routine, CreateRoutineOptions options);
    public BigQueryRoutine GetRoutine(string routineId, GetRoutineOptions options);
    public BigQueryRoutine GetOrCreateRoutine(string routineId, Routine routine, GetRoutineOptions getOptions, CreateRoutineOptions createOptions);
    public RoutineReference GetRoutineReference(string routineId);
    public void Delete(DeleteDatasetOptions options);
    public BigQueryDataset Update(Dataset resource, UpdateDatasetOptions options);
    public BigQueryDataset Patch(Dataset resource, bool matchETag, PatchDatasetOptions options);
    public Task`1<BigQueryJob> UploadCsvAsync(string tableId, TableSchema schema, Stream input, UploadCsvOptions options, CancellationToken cancellationToken);
    public Task`1<BigQueryJob> UploadAvroAsync(string tableId, TableSchema schema, Stream input, UploadAvroOptions options, CancellationToken cancellationToken);
    public Task`1<BigQueryJob> UploadParquetAsync(string tableId, Stream input, UploadParquetOptions options, CancellationToken cancellationToken);
    public Task`1<BigQueryJob> UploadOrcAsync(string tableId, Stream input, UploadOrcOptions options, CancellationToken cancellationToken);
    public Task`1<BigQueryJob> UploadJsonAsync(string tableId, TableSchema schema, IEnumerable`1<string> rows, UploadJsonOptions options, CancellationToken cancellationToken);
    public Task`1<BigQueryJob> UploadJsonAsync(string tableId, TableSchema schema, Stream input, UploadJsonOptions options, CancellationToken cancellationToken);
    public PagedAsyncEnumerable`2<TableList, BigQueryTable> ListTablesAsync(ListTablesOptions options);
    public Task`1<BigQueryTable> CreateTableAsync(string tableId, TableSchema schema, CreateTableOptions options, CancellationToken cancellationToken);
    public Task`1<BigQueryTable> CreateTableAsync(string tableId, Table table, CreateTableOptions options, CancellationToken cancellationToken);
    public Task`1<BigQueryTable> GetTableAsync(string tableId, GetTableOptions options, CancellationToken cancellationToken);
    public Task`1<BigQueryTable> GetOrCreateTableAsync(string tableId, TableSchema schema, GetTableOptions getOptions, CreateTableOptions createOptions, CancellationToken cancellationToken);
    public Task`1<BigQueryTable> GetOrCreateTableAsync(string tableId, Table table, GetTableOptions getOptions, CreateTableOptions createOptions, CancellationToken cancellationToken);
    public PagedAsyncEnumerable`2<ListModelsResponse, BigQueryModel> ListModelsAsync(ListModelsOptions options);
    public Task`1<BigQueryModel> GetModelAsync(string modelId, GetModelOptions options, CancellationToken cancellationToken);
    public PagedAsyncEnumerable`2<ListRoutinesResponse, BigQueryRoutine> ListRoutinesAsync(ListRoutinesOptions options);
    public Task`1<BigQueryRoutine> CreateRoutineAsync(string routineId, Routine routine, CreateRoutineOptions options, CancellationToken cancellationToken);
    public Task`1<BigQueryRoutine> GetRoutineAsync(string routineId, GetRoutineOptions options, CancellationToken cancellationToken);
    public Task`1<BigQueryRoutine> GetOrCreateRoutineAsync(string routineId, Routine routine, GetRoutineOptions getOptions, CreateRoutineOptions createOptions, CancellationToken cancellationToken);
    public Task DeleteAsync(DeleteDatasetOptions options, CancellationToken cancellationToken);
    public Task`1<BigQueryDataset> UpdateAsync(Dataset resource, UpdateDatasetOptions options, CancellationToken cancellationToken);
    public Task`1<BigQueryDataset> PatchAsync(Dataset resource, bool matchETag, PatchDatasetOptions options, CancellationToken cancellationToken);
}
[ExtensionAttribute]
public static class Google.Cloud.BigQuery.V2.BigQueryDateTimeExtensions : object {
    [ExtensionAttribute]
public static string AsBigQueryDate(DateTime value);
    [ExtensionAttribute]
public static string AsBigQueryDate(DateTimeOffset value);
}
public enum Google.Cloud.BigQuery.V2.BigQueryDbType : Enum {
    public int value__;
    [ApiValueAttribute("INTEGER")]
public static BigQueryDbType Int64;
    [ApiValueAttribute("FLOAT")]
public static BigQueryDbType Float64;
    [ApiValueAttribute("BOOLEAN")]
public static BigQueryDbType Bool;
    public static BigQueryDbType String;
    public static BigQueryDbType Bytes;
    public static BigQueryDbType Date;
    public static BigQueryDbType DateTime;
    public static BigQueryDbType Time;
    public static BigQueryDbType Timestamp;
    public static BigQueryDbType Array;
    [ApiValueAttribute("RECORD")]
public static BigQueryDbType Struct;
    public static BigQueryDbType Numeric;
    public static BigQueryDbType Geography;
    public static BigQueryDbType BigNumeric;
    public static BigQueryDbType Json;
}
[ExtensionAttribute]
internal static class Google.Cloud.BigQuery.V2.BigQueryDbTypeExtensions : object {
    private static Dictionary`2<BigQueryDbType, string> s_typeToNameMapping;
    private static BigQueryDbTypeExtensions();
    [ExtensionAttribute]
internal static string ToParameterApiType(BigQueryDbType type);
}
public enum Google.Cloud.BigQuery.V2.BigQueryFieldMode : Enum {
    public int value__;
    public static BigQueryFieldMode Nullable;
    public static BigQueryFieldMode Required;
    public static BigQueryFieldMode Repeated;
}
public class Google.Cloud.BigQuery.V2.BigQueryGeography : object {
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    public string Text { get; }
    private BigQueryGeography(string text);
    [CompilerGeneratedAttribute]
public string get_Text();
    public static BigQueryGeography Parse(string text);
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(BigQueryGeography other);
    public virtual string ToString();
}
public class Google.Cloud.BigQuery.V2.BigQueryInsertResults : object {
    private BigQueryClient _client;
    private InsertOptions _options;
    private IReadOnlyList`1<BigQueryInsertRowErrors> _errors;
    [CompilerGeneratedAttribute]
private int <InsertAttemptRowCount>k__BackingField;
    [CompilerGeneratedAttribute]
private int <OriginalRowsWithErrors>k__BackingField;
    public BigQueryInsertStatus Status { get; }
    public IEnumerable`1<BigQueryInsertRowErrors> Errors { get; }
    public int InsertAttemptRowCount { get; }
    public int OriginalRowsWithErrors { get; }
    public BigQueryInsertResults(BigQueryClient client, InsertOptions options, IReadOnlyList`1<BigQueryInsertRow> originalRows, TableDataInsertAllResponse insertResponse);
    public BigQueryInsertStatus get_Status();
    public IEnumerable`1<BigQueryInsertRowErrors> get_Errors();
    [CompilerGeneratedAttribute]
public int get_InsertAttemptRowCount();
    [CompilerGeneratedAttribute]
public int get_OriginalRowsWithErrors();
    public BigQueryInsertResults ThrowOnNotAllInserted();
    public BigQueryInsertResults ThrowOnNoneInserted();
    public BigQueryInsertResults ThrowOnAnyError();
    internal BigQueryInsertResults ThrowIfNotSuppressing(Nullable`1<bool> suppressInsertErrors);
}
[DefaultMemberAttribute("Item")]
public class Google.Cloud.BigQuery.V2.BigQueryInsertRow : object {
    private static HashSet`1<Type> ValidSingleTypes;
    private static List`1<TypeInfo> ValidRepeatedTypes;
    private IDictionary`2<string, object> _fields;
    [CompilerGeneratedAttribute]
private string <InsertId>k__BackingField;
    public string InsertId { get; public set; }
    public object Item { get; public set; }
    public BigQueryInsertRow(string insertId);
    private static BigQueryInsertRow();
    [CompilerGeneratedAttribute]
public string get_InsertId();
    [CompilerGeneratedAttribute]
public void set_InsertId(string value);
    public void Add(IDictionary`2<string, object> fields);
    public void Add(string key, object value);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public object get_Item(string name);
    public void set_Item(string name, object value);
    internal RowsData ToRowsData(bool allowEmptyInsertIds);
    internal Dictionary`2<string, object> GetJsonValues();
    private static object ConvertRowValue(object value);
    private static DateTime ConvertTimeSpanToDateTime(TimeSpan timeSpan);
    private static object GetValue(object value);
    private static object ValidateRepeatedElementNotNull(object value);
    private void ValidateValue(object value, string paramName);
}
public class Google.Cloud.BigQuery.V2.BigQueryInsertRowErrors : object {
    private IReadOnlyList`1<InsertErrorsData> _errors;
    [CompilerGeneratedAttribute]
private BigQueryInsertRow <OriginalRow>k__BackingField;
    public BigQueryInsertRow OriginalRow { get; }
    public Nullable`1<long> OriginalRowIndex { get; }
    public BigQueryInsertRowErrors(BigQueryInsertRow originalRow, IReadOnlyList`1<InsertErrorsData> errors);
    [CompilerGeneratedAttribute]
public BigQueryInsertRow get_OriginalRow();
    public Nullable`1<long> get_OriginalRowIndex();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual IEnumerator`1<SingleError> GetEnumerator();
}
public enum Google.Cloud.BigQuery.V2.BigQueryInsertStatus : Enum {
    public int value__;
    public static BigQueryInsertStatus AllRowsInserted;
    public static BigQueryInsertStatus SomeRowsInserted;
    public static BigQueryInsertStatus NoRowsInserted;
}
public class Google.Cloud.BigQuery.V2.BigQueryJob : object {
    private BigQueryClient _client;
    [CompilerGeneratedAttribute]
private Job <Resource>k__BackingField;
    public Job Resource { get; }
    public JobReference Reference { get; }
    public JobState State { get; }
    public JobStatistics Statistics { get; }
    public JobStatus Status { get; }
    public BigQueryJob(BigQueryClient client, Job resource);
    internal BigQueryJob(BigQueryClient client, JobsData resource);
    [CompilerGeneratedAttribute]
public Job get_Resource();
    public JobReference get_Reference();
    public JobState get_State();
    public JobStatistics get_Statistics();
    public JobStatus get_Status();
    public BigQueryJob ThrowOnAnyError();
    public BigQueryJob ThrowOnFatalError();
    private GoogleApiException ConvertToRequestError(IReadOnlyList`1<ErrorProto> errors);
    public BigQueryJob PollUntilCompleted(GetJobOptions options, PollSettings pollSettings);
    public BigQueryResults GetQueryResults(GetQueryResultsOptions options);
    public BigQueryJob Cancel(CancelJobOptions options);
    public void Delete(DeleteJobOptions options);
    public Task`1<BigQueryJob> PollUntilCompletedAsync(GetJobOptions options, PollSettings pollSettings, CancellationToken cancellationToken);
    public Task`1<BigQueryResults> GetQueryResultsAsync(GetQueryResultsOptions options, CancellationToken cancellationToken);
    public Task`1<BigQueryJob> CancelAsync(CancelJobOptions options, CancellationToken cancellationToken);
    public Task DeleteAsync(DeleteJobOptions options, CancellationToken cancellationToken);
    private TableReference GetQueryDestinationTable();
}
public class Google.Cloud.BigQuery.V2.BigQueryModel : object {
    private BigQueryClient _client;
    [CompilerGeneratedAttribute]
private Model <Resource>k__BackingField;
    public Model Resource { get; }
    public ModelReference Reference { get; }
    public BigQueryModel(BigQueryClient client, Model resource);
    [CompilerGeneratedAttribute]
public Model get_Resource();
    public ModelReference get_Reference();
    public BigQueryModel Patch(Model resource, bool matchETag, PatchModelOptions options);
    public void Delete(DeleteModelOptions options);
    public BigQueryJob CreateModelExtractJob(string destinationUri, CreateModelExtractJobOptions options);
    public BigQueryJob CreateModelExtractJob(IEnumerable`1<string> destinationUris, CreateModelExtractJobOptions options);
    public Task`1<BigQueryModel> PatchAsync(Model resource, bool matchETag, PatchModelOptions options, CancellationToken cancellationToken);
    public Task DeleteAsync(DeleteModelOptions options, CancellationToken cancellationToken);
    public Task`1<BigQueryJob> CreateModelExtractJobAsync(string destinationUri, CreateModelExtractJobOptions options, CancellationToken cancellationToken);
    public Task`1<BigQueryJob> CreateModelExtractJobAsync(IEnumerable`1<string> destinationUris, CreateModelExtractJobOptions options, CancellationToken cancellationToken);
}
public class Google.Cloud.BigQuery.V2.BigQueryNumeric : ValueType {
    private static NumericType s_numericType;
    [CompilerGeneratedAttribute]
private static BigQueryNumeric <Zero>k__BackingField;
    [CompilerGeneratedAttribute]
private static BigQueryNumeric <MaxValue>k__BackingField;
    [CompilerGeneratedAttribute]
private static BigQueryNumeric <MinValue>k__BackingField;
    [CompilerGeneratedAttribute]
private static BigQueryNumeric <Epsilon>k__BackingField;
    private NumericValue _numericValue;
    public static BigQueryNumeric Zero { get; }
    public static BigQueryNumeric MaxValue { get; }
    public static BigQueryNumeric MinValue { get; }
    public static BigQueryNumeric Epsilon { get; }
    private BigQueryNumeric(NumericValue value);
    private static BigQueryNumeric();
    [CompilerGeneratedAttribute]
public static BigQueryNumeric get_Zero();
    [CompilerGeneratedAttribute]
public static BigQueryNumeric get_MaxValue();
    [CompilerGeneratedAttribute]
public static BigQueryNumeric get_MinValue();
    [CompilerGeneratedAttribute]
public static BigQueryNumeric get_Epsilon();
    public sealed virtual int CompareTo(BigQueryNumeric other);
    private sealed virtual override int System.IComparable.CompareTo(object obj);
    public sealed virtual bool Equals(BigQueryNumeric other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static BigQueryNumeric Parse(string text);
    public static bool TryParse(string text, BigQueryNumeric& value);
    public virtual string ToString();
    public static BigQueryNumeric FromDecimal(decimal value, LossOfPrecisionHandling lossOfPrecisionHandling);
    public static BigQueryNumeric op_Explicit(decimal value);
    public static BigQueryNumeric op_Implicit(int value);
    public static BigQueryNumeric op_Implicit(long value);
    public static BigQueryNumeric op_Implicit(ulong value);
    public decimal ToDecimal(LossOfPrecisionHandling lossOfPrecisionHandling);
    public static decimal op_Explicit(BigQueryNumeric value);
    public static bool op_Equality(BigQueryNumeric lhs, BigQueryNumeric rhs);
    public static bool op_Inequality(BigQueryNumeric lhs, BigQueryNumeric rhs);
    public static BigQueryNumeric op_Addition(BigQueryNumeric lhs, BigQueryNumeric rhs);
    public static BigQueryNumeric op_Subtraction(BigQueryNumeric lhs, BigQueryNumeric rhs);
    public static BigQueryNumeric op_UnaryPlus(BigQueryNumeric value);
    public static BigQueryNumeric op_UnaryNegation(BigQueryNumeric value);
}
public class Google.Cloud.BigQuery.V2.BigQueryPage : object {
    [CompilerGeneratedAttribute]
private JobReference <JobReference>k__BackingField;
    [CompilerGeneratedAttribute]
private TableReference <TableReference>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<BigQueryRow> <Rows>k__BackingField;
    [CompilerGeneratedAttribute]
private TableSchema <Schema>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NextPageToken>k__BackingField;
    public JobReference JobReference { get; }
    public TableReference TableReference { get; }
    public IReadOnlyList`1<BigQueryRow> Rows { get; }
    public TableSchema Schema { get; }
    public string NextPageToken { get; }
    public BigQueryPage(List`1<BigQueryRow> rows, TableSchema schema, JobReference jobReference, TableReference tableReference, string nextPageToken);
    internal BigQueryPage(Page`1<BigQueryRow> page, TableSchema schema, JobReference jobReference, TableReference tableReference);
    [CompilerGeneratedAttribute]
public JobReference get_JobReference();
    [CompilerGeneratedAttribute]
public TableReference get_TableReference();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<BigQueryRow> get_Rows();
    [CompilerGeneratedAttribute]
public TableSchema get_Schema();
    [CompilerGeneratedAttribute]
public string get_NextPageToken();
}
public class Google.Cloud.BigQuery.V2.BigQueryParameter : object {
    private static HashSet`1<Type> s_validSingleTypes;
    private static List`1<TypeInfo> s_validRepeatedTypes;
    private static Dictionary`2<Type, BigQueryDbType> s_typeMapping;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    private Nullable`1<BigQueryDbType> _type;
    private Nullable`1<BigQueryDbType> _arrayElementType;
    private object _value;
    public string Name { get; public set; }
    public Nullable`1<BigQueryDbType> Type { get; public set; }
    public Nullable`1<BigQueryDbType> ArrayElementType { get; public set; }
    public object Value { get; public set; }
    public BigQueryParameter(BigQueryDbType type);
    public BigQueryParameter(Nullable`1<BigQueryDbType> type, object value);
    public BigQueryParameter(string name);
    public BigQueryParameter(string name, Nullable`1<BigQueryDbType> type);
    public BigQueryParameter(string name, Nullable`1<BigQueryDbType> type, object value);
    private static BigQueryParameter();
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    public Nullable`1<BigQueryDbType> get_Type();
    public void set_Type(Nullable`1<BigQueryDbType> value);
    public Nullable`1<BigQueryDbType> get_ArrayElementType();
    public void set_ArrayElementType(Nullable`1<BigQueryDbType> value);
    public object get_Value();
    public void set_Value(object value);
    internal QueryParameter ToQueryParameter();
    private static string FormatTimeSpan(TimeSpan ts);
    private static BigQueryDbType InferParameterType(object value);
    private static QueryParameter PopulateArrayParameter(QueryParameter parameter, object value, Nullable`1<BigQueryDbType> arrayType);
    private static void ValidateValue(object value, string paramName);
    private static bool IsArrayValue(object value);
    private static Type GetArrayElementType(object value);
    [CompilerGeneratedAttribute]
internal static string <ToQueryParameter>g__ConvertTimestampToString|25_0(DateTime dateTime);
}
public enum Google.Cloud.BigQuery.V2.BigQueryParameterMode : Enum {
    public int value__;
    public static BigQueryParameterMode Named;
    public static BigQueryParameterMode Positional;
}
public class Google.Cloud.BigQuery.V2.BigQueryResults : object {
    private BigQueryClient _client;
    private GetQueryResultsOptions _options;
    private GetQueryResultsResponse _response;
    private Dictionary`2<string, int> _fieldNames;
    [CompilerGeneratedAttribute]
private TableReference <TableReference>k__BackingField;
    public JobReference JobReference { get; }
    public TableSchema Schema { get; }
    public TableReference TableReference { get; }
    public Nullable`1<ulong> TotalRows { get; }
    public Nullable`1<long> NumDmlAffectedRows { get; }
    public bool CacheHit { get; }
    private IEnumerable`1<BigQueryRow> ResponseRows { get; }
    public BigQueryResults(BigQueryClient client, GetQueryResultsResponse response, TableReference tableReference, GetQueryResultsOptions options);
    public JobReference get_JobReference();
    public TableSchema get_Schema();
    [CompilerGeneratedAttribute]
public TableReference get_TableReference();
    public Nullable`1<ulong> get_TotalRows();
    public Nullable`1<long> get_NumDmlAffectedRows();
    public bool get_CacheHit();
    private IEnumerable`1<BigQueryRow> get_ResponseRows();
    public IAsyncEnumerable`1<BigQueryRow> GetRowsAsync();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    [IteratorStateMachineAttribute("Google.Cloud.BigQuery.V2.BigQueryResults/<GetEnumerator>d__22")]
public sealed virtual IEnumerator`1<BigQueryRow> GetEnumerator();
    public BigQueryPage ReadPage(int pageSize);
    [AsyncStateMachineAttribute("Google.Cloud.BigQuery.V2.BigQueryResults/<ReadPageAsync>d__24")]
public Task`1<BigQueryPage> ReadPageAsync(int pageSize, CancellationToken cancellationToken);
    public BigQueryResults ThrowOnAnyError();
    private IEnumerable`1<BigQueryRow> ConvertResponseRows(GetQueryResultsResponse response);
    [CompilerGeneratedAttribute]
private BigQueryRow <ConvertResponseRows>b__28_0(TableRow r);
}
public class Google.Cloud.BigQuery.V2.BigQueryRoutine : object {
    private BigQueryClient _client;
    [CompilerGeneratedAttribute]
private Routine <Resource>k__BackingField;
    public Routine Resource { get; }
    public string FullyQualifiedId { get; }
    public RoutineReference Reference { get; }
    public BigQueryRoutine(BigQueryClient client, Routine resource);
    [CompilerGeneratedAttribute]
public Routine get_Resource();
    public string get_FullyQualifiedId();
    public RoutineReference get_Reference();
    public void Delete(DeleteRoutineOptions options);
    public Task DeleteAsync(DeleteRoutineOptions options, CancellationToken cancellationToken);
    public BigQueryRoutine Update(Routine resource, UpdateRoutineOptions options);
    public Task`1<BigQueryRoutine> UpdateAsync(Routine resource, UpdateRoutineOptions options, CancellationToken cancellationToken);
}
[DefaultMemberAttribute("Item")]
public class Google.Cloud.BigQuery.V2.BigQueryRow : object {
    [CompilerGeneratedAttribute]
private TableRow <RawRow>k__BackingField;
    [CompilerGeneratedAttribute]
private TableSchema <Schema>k__BackingField;
    private bool _useInt64Timestamp;
    private IDictionary`2<string, int> _fieldNameIndexMap;
    private static Func`2<string, string> StringConverter;
    private static Func`2<string, long> Int64Converter;
    private static Func`2<string, double> DoubleConverter;
    private static Func`2<string, DateTime> DoubleTimestampConverter;
    private static Func`2<string, DateTime> Int64TimestampConverter;
    private static Func`2<string, DateTime> DateConverter;
    private static Func`2<string, TimeSpan> TimeConverter;
    private static Func`2<string, DateTime> DateTimeConverter;
    private static Func`2<string, Byte[]> BytesConverter;
    private static Func`2<string, bool> BooleanConverter;
    private static Func`2<string, BigQueryNumeric> NumericConverter;
    private static Func`2<string, BigQueryBigNumeric> BigNumericConverter;
    private static Func`2<string, BigQueryGeography> GeographyConverter;
    public TableRow RawRow { get; }
    public TableSchema Schema { get; }
    public object Item { get; }
    public object Item { get; }
    public BigQueryRow(TableRow rawRow, TableSchema schema);
    internal BigQueryRow(TableRow rawRow, TableSchema schema, IDictionary`2<string, int> fieldNameIndexMap, bool useInt64Timestamp);
    private static BigQueryRow();
    [CompilerGeneratedAttribute]
public TableRow get_RawRow();
    [CompilerGeneratedAttribute]
public TableSchema get_Schema();
    public object get_Item(string name);
    public object get_Item(int index);
    private static object ConvertSingleValue(object rawValue, TableFieldSchema field, bool useInt64Timestamp);
    private static T[] ConvertArray(JArray array, Func`2<string, T> converter);
    private static T[] ConvertArray(JArray array, Func`2<object, T> converter);
    private static Dictionary`2[] ConvertRecordArray(JArray array, TableFieldSchema fieldSchema, bool useInt64Timestamp);
    private static Dictionary`2<string, object> ConvertRecord(JObject record, TableFieldSchema fieldSchema, bool useInt64Timestamp);
}
public class Google.Cloud.BigQuery.V2.BigQueryTable : object {
    private BigQueryClient _client;
    [CompilerGeneratedAttribute]
private Table <Resource>k__BackingField;
    public Table Resource { get; }
    public string FullyQualifiedId { get; }
    public TableSchema Schema { get; }
    public TableReference Reference { get; }
    public BigQueryTable(BigQueryClient client, Table resource);
    [CompilerGeneratedAttribute]
public Table get_Resource();
    public string get_FullyQualifiedId();
    public TableSchema get_Schema();
    public TableReference get_Reference();
    public BigQueryJob UploadCsv(Stream input, UploadCsvOptions options);
    public BigQueryJob UploadAvro(Stream input, UploadAvroOptions options);
    public BigQueryJob UploadParquet(Stream input, UploadParquetOptions options);
    public BigQueryJob UploadOrc(Stream input, UploadOrcOptions options);
    public BigQueryJob UploadJson(Stream input, UploadJsonOptions options);
    public BigQueryJob UploadJson(IEnumerable`1<string> rows, UploadJsonOptions options);
    public PagedEnumerable`2<TableDataList, BigQueryRow> ListRows(ListRowsOptions options);
    public BigQueryInsertResults InsertRow(BigQueryInsertRow row, InsertOptions options);
    public BigQueryInsertResults InsertRows(IEnumerable`1<BigQueryInsertRow> rows, InsertOptions options);
    public BigQueryInsertResults InsertRows(BigQueryInsertRow[] rows);
    public void Delete(DeleteTableOptions options);
    public BigQueryJob CreateExtractJob(string destinationUri, CreateExtractJobOptions options);
    public BigQueryJob CreateExtractJob(IEnumerable`1<string> destinationUris, CreateExtractJobOptions options);
    public BigQueryJob CreateCopyJob(TableReference destination, CreateCopyJobOptions options);
    public BigQueryTable Update(Table resource, UpdateTableOptions options);
    public BigQueryTable Patch(Table resource, bool matchETag, PatchTableOptions options);
    public Policy GetIamPolicy(GetTableIamPolicyOptions options);
    public Policy SetIamPolicy(Policy policy, SetTableIamPolicyOptions options);
    public TestIamPermissionsResponse TestIamPermissions(IList`1<string> permissions, TestTableIamPermissionsOptions options);
    public Task`1<BigQueryJob> UploadCsvAsync(Stream input, UploadCsvOptions options, CancellationToken cancellationToken);
    public Task`1<BigQueryJob> UploadAvroAsync(Stream input, UploadAvroOptions options, CancellationToken cancellationToken);
    public Task`1<BigQueryJob> UploadParquetAsync(Stream input, UploadParquetOptions options, CancellationToken cancellationToken);
    public Task`1<BigQueryJob> UploadOrcAsync(Stream input, UploadOrcOptions options, CancellationToken cancellationToken);
    public Task`1<BigQueryJob> UploadJsonAsync(IEnumerable`1<string> rows, UploadJsonOptions options, CancellationToken cancellationToken);
    public Task`1<BigQueryJob> UploadJsonAsync(Stream input, UploadJsonOptions options, CancellationToken cancellationToken);
    public PagedAsyncEnumerable`2<TableDataList, BigQueryRow> ListRowsAsync(ListRowsOptions options);
    public Task`1<BigQueryInsertResults> InsertRowAsync(BigQueryInsertRow row, InsertOptions options, CancellationToken cancellationToken);
    public Task`1<BigQueryInsertResults> InsertRowsAsync(IEnumerable`1<BigQueryInsertRow> rows, InsertOptions options, CancellationToken cancellationToken);
    public Task`1<BigQueryInsertResults> InsertRowsAsync(BigQueryInsertRow[] rows);
    public Task DeleteAsync(DeleteTableOptions options, CancellationToken cancellationToken);
    public Task`1<BigQueryJob> CreateExtractJobAsync(string destinationUri, CreateExtractJobOptions options, CancellationToken cancellationToken);
    public Task`1<BigQueryJob> CreateExtractJobAsync(IEnumerable`1<string> destinationUris, CreateExtractJobOptions options, CancellationToken cancellationToken);
    public Task`1<BigQueryJob> CreateCopyJobAsync(TableReference destination, CreateCopyJobOptions options, CancellationToken cancellationToken);
    public Task`1<BigQueryTable> UpdateAsync(Table resource, UpdateTableOptions options, CancellationToken cancellationToken);
    public Task`1<BigQueryTable> PatchAsync(Table resource, bool matchETag, PatchTableOptions options, CancellationToken cancellationToken);
    public Task`1<Policy> GetIamPolicyAsync(GetTableIamPolicyOptions options, CancellationToken cancellationToken);
    public Task`1<Policy> SetIamPolicyAsync(Policy policy, SetTableIamPolicyOptions options, CancellationToken cancellationToken);
    public Task`1<TestIamPermissionsResponse> TestIamPermissionsAsync(IList`1<string> permissions, TestTableIamPermissionsOptions options, CancellationToken cancellationToken);
    public string ToLegacySqlFormat();
    public virtual string ToString();
    public sealed virtual string ToString(string format, IFormatProvider formatProvider);
}
public class Google.Cloud.BigQuery.V2.CancelJobOptions : object {
    internal void ModifyRequest(CancelRequest request);
}
public class Google.Cloud.BigQuery.V2.CloudProject : object {
    private BigQueryClient _client;
    [CompilerGeneratedAttribute]
private ProjectsData <Resource>k__BackingField;
    public ProjectsData Resource { get; }
    public string ProjectId { get; }
    public ProjectReference Reference { get; }
    public string FriendlyName { get; }
    internal CloudProject(BigQueryClient _client, ProjectsData resource);
    [CompilerGeneratedAttribute]
public ProjectsData get_Resource();
    public string get_ProjectId();
    public ProjectReference get_Reference();
    public string get_FriendlyName();
    public BigQueryClient CreateClient();
}
public enum Google.Cloud.BigQuery.V2.CompressionType : Enum {
    public int value__;
    public static CompressionType None;
    public static CompressionType Gzip;
}
public enum Google.Cloud.BigQuery.V2.CopyOperationType : Enum {
    public int value__;
    [ApiValueAttribute("OPERATION_TYPE_UNSPECIFIED")]
public static CopyOperationType Unspecified;
    [ApiValueAttribute("COPY")]
public static CopyOperationType Copy;
    [ApiValueAttribute("SNAPSHOT")]
public static CopyOperationType Snapshot;
    [ApiValueAttribute("RESTORE")]
public static CopyOperationType Restore;
    [ApiValueAttribute("CLONE")]
public static CopyOperationType Clone;
}
public class Google.Cloud.BigQuery.V2.CreateCopyJobOptions : JobCreationOptions {
    [CompilerGeneratedAttribute]
private Nullable`1<CreateDisposition> <CreateDisposition>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<WriteDisposition> <WriteDisposition>k__BackingField;
    [CompilerGeneratedAttribute]
private EncryptionConfiguration <DestinationEncryptionConfiguration>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<CopyOperationType> <OperationType>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<JobConfigurationTableCopy> <ConfigurationModifier>k__BackingField;
    public Nullable`1<CreateDisposition> CreateDisposition { get; public set; }
    public Nullable`1<WriteDisposition> WriteDisposition { get; public set; }
    public EncryptionConfiguration DestinationEncryptionConfiguration { get; public set; }
    public Nullable`1<CopyOperationType> OperationType { get; public set; }
    public Action`1<JobConfigurationTableCopy> ConfigurationModifier { get; public set; }
    [CompilerGeneratedAttribute]
public Nullable`1<CreateDisposition> get_CreateDisposition();
    [CompilerGeneratedAttribute]
public void set_CreateDisposition(Nullable`1<CreateDisposition> value);
    [CompilerGeneratedAttribute]
public Nullable`1<WriteDisposition> get_WriteDisposition();
    [CompilerGeneratedAttribute]
public void set_WriteDisposition(Nullable`1<WriteDisposition> value);
    [CompilerGeneratedAttribute]
public EncryptionConfiguration get_DestinationEncryptionConfiguration();
    [CompilerGeneratedAttribute]
public void set_DestinationEncryptionConfiguration(EncryptionConfiguration value);
    [CompilerGeneratedAttribute]
public Nullable`1<CopyOperationType> get_OperationType();
    [CompilerGeneratedAttribute]
public void set_OperationType(Nullable`1<CopyOperationType> value);
    [CompilerGeneratedAttribute]
public Action`1<JobConfigurationTableCopy> get_ConfigurationModifier();
    [CompilerGeneratedAttribute]
public void set_ConfigurationModifier(Action`1<JobConfigurationTableCopy> value);
    internal void ModifyRequest(JobConfigurationTableCopy copy);
}
public class Google.Cloud.BigQuery.V2.CreateDatasetOptions : object {
    internal void ModifyRequest(InsertRequest request);
}
public enum Google.Cloud.BigQuery.V2.CreateDisposition : Enum {
    public int value__;
    [ApiValueAttribute("CREATE_IF_NEEDED")]
public static CreateDisposition CreateIfNeeded;
    [ApiValueAttribute("CREATE_NEVER")]
public static CreateDisposition CreateNever;
}
public class Google.Cloud.BigQuery.V2.CreateExtractJobOptions : JobCreationOptions {
    [CompilerGeneratedAttribute]
private Nullable`1<FileFormat> <DestinationFormat>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<CompressionType> <Compression>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FieldDelimiter>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <PrintHeader>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <UseAvroLogicalTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<JobConfigurationExtract> <ConfigurationModifier>k__BackingField;
    public Nullable`1<FileFormat> DestinationFormat { get; public set; }
    public Nullable`1<CompressionType> Compression { get; public set; }
    public string FieldDelimiter { get; public set; }
    public Nullable`1<bool> PrintHeader { get; public set; }
    public Nullable`1<bool> UseAvroLogicalTypes { get; public set; }
    public Action`1<JobConfigurationExtract> ConfigurationModifier { get; public set; }
    [CompilerGeneratedAttribute]
public Nullable`1<FileFormat> get_DestinationFormat();
    [CompilerGeneratedAttribute]
public void set_DestinationFormat(Nullable`1<FileFormat> value);
    [CompilerGeneratedAttribute]
public Nullable`1<CompressionType> get_Compression();
    [CompilerGeneratedAttribute]
public void set_Compression(Nullable`1<CompressionType> value);
    [CompilerGeneratedAttribute]
public string get_FieldDelimiter();
    [CompilerGeneratedAttribute]
public void set_FieldDelimiter(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_PrintHeader();
    [CompilerGeneratedAttribute]
public void set_PrintHeader(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_UseAvroLogicalTypes();
    [CompilerGeneratedAttribute]
public void set_UseAvroLogicalTypes(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Action`1<JobConfigurationExtract> get_ConfigurationModifier();
    [CompilerGeneratedAttribute]
public void set_ConfigurationModifier(Action`1<JobConfigurationExtract> value);
    internal void ModifyRequest(JobConfigurationExtract extract);
}
public class Google.Cloud.BigQuery.V2.CreateLoadJobOptions : JobCreationOptions {
    [CompilerGeneratedAttribute]
private Nullable`1<int> <SkipLeadingRows>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Quote>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <AllowQuotedNewlines>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <AllowJaggedRows>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FieldDelimiter>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <IgnoreUnknownValues>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <MaxBadRecords>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<CreateDisposition> <CreateDisposition>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<WriteDisposition> <WriteDisposition>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Autodetect>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NullMarker>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Encoding>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<string> <ProjectionFields>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<FileFormat> <SourceFormat>k__BackingField;
    [CompilerGeneratedAttribute]
private TimePartitioning <TimePartitioning>k__BackingField;
    [CompilerGeneratedAttribute]
private EncryptionConfiguration <DestinationEncryptionConfiguration>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<SchemaUpdateOption> <DestinationSchemaUpdateOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <UseAvroLogicalTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<JobConfigurationLoad> <ConfigurationModifier>k__BackingField;
    public Nullable`1<int> SkipLeadingRows { get; public set; }
    public string Quote { get; public set; }
    public Nullable`1<bool> AllowQuotedNewlines { get; public set; }
    public Nullable`1<bool> AllowJaggedRows { get; public set; }
    public string FieldDelimiter { get; public set; }
    public Nullable`1<bool> IgnoreUnknownValues { get; public set; }
    public Nullable`1<int> MaxBadRecords { get; public set; }
    public Nullable`1<CreateDisposition> CreateDisposition { get; public set; }
    public Nullable`1<WriteDisposition> WriteDisposition { get; public set; }
    public Nullable`1<bool> Autodetect { get; public set; }
    public string NullMarker { get; public set; }
    public string Encoding { get; public set; }
    public IList`1<string> ProjectionFields { get; public set; }
    public Nullable`1<FileFormat> SourceFormat { get; public set; }
    public TimePartitioning TimePartitioning { get; public set; }
    public EncryptionConfiguration DestinationEncryptionConfiguration { get; public set; }
    public Nullable`1<SchemaUpdateOption> DestinationSchemaUpdateOptions { get; public set; }
    public Nullable`1<bool> UseAvroLogicalTypes { get; public set; }
    public Action`1<JobConfigurationLoad> ConfigurationModifier { get; public set; }
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_SkipLeadingRows();
    [CompilerGeneratedAttribute]
public void set_SkipLeadingRows(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public string get_Quote();
    [CompilerGeneratedAttribute]
public void set_Quote(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_AllowQuotedNewlines();
    [CompilerGeneratedAttribute]
public void set_AllowQuotedNewlines(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_AllowJaggedRows();
    [CompilerGeneratedAttribute]
public void set_AllowJaggedRows(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public string get_FieldDelimiter();
    [CompilerGeneratedAttribute]
public void set_FieldDelimiter(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_IgnoreUnknownValues();
    [CompilerGeneratedAttribute]
public void set_IgnoreUnknownValues(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_MaxBadRecords();
    [CompilerGeneratedAttribute]
public void set_MaxBadRecords(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<CreateDisposition> get_CreateDisposition();
    [CompilerGeneratedAttribute]
public void set_CreateDisposition(Nullable`1<CreateDisposition> value);
    [CompilerGeneratedAttribute]
public Nullable`1<WriteDisposition> get_WriteDisposition();
    [CompilerGeneratedAttribute]
public void set_WriteDisposition(Nullable`1<WriteDisposition> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Autodetect();
    [CompilerGeneratedAttribute]
public void set_Autodetect(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public string get_NullMarker();
    [CompilerGeneratedAttribute]
public void set_NullMarker(string value);
    [CompilerGeneratedAttribute]
public string get_Encoding();
    [CompilerGeneratedAttribute]
public void set_Encoding(string value);
    [CompilerGeneratedAttribute]
public IList`1<string> get_ProjectionFields();
    [CompilerGeneratedAttribute]
public void set_ProjectionFields(IList`1<string> value);
    [CompilerGeneratedAttribute]
public Nullable`1<FileFormat> get_SourceFormat();
    [CompilerGeneratedAttribute]
public void set_SourceFormat(Nullable`1<FileFormat> value);
    [CompilerGeneratedAttribute]
public TimePartitioning get_TimePartitioning();
    [CompilerGeneratedAttribute]
public void set_TimePartitioning(TimePartitioning value);
    [CompilerGeneratedAttribute]
public EncryptionConfiguration get_DestinationEncryptionConfiguration();
    [CompilerGeneratedAttribute]
public void set_DestinationEncryptionConfiguration(EncryptionConfiguration value);
    [CompilerGeneratedAttribute]
public Nullable`1<SchemaUpdateOption> get_DestinationSchemaUpdateOptions();
    [CompilerGeneratedAttribute]
public void set_DestinationSchemaUpdateOptions(Nullable`1<SchemaUpdateOption> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_UseAvroLogicalTypes();
    [CompilerGeneratedAttribute]
public void set_UseAvroLogicalTypes(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Action`1<JobConfigurationLoad> get_ConfigurationModifier();
    [CompilerGeneratedAttribute]
public void set_ConfigurationModifier(Action`1<JobConfigurationLoad> value);
    internal void ModifyRequest(JobConfigurationLoad load);
}
public class Google.Cloud.BigQuery.V2.CreateModelExtractJobOptions : JobCreationOptions {
    [CompilerGeneratedAttribute]
private Nullable`1<ModelFormat> <DestinationFormat>k__BackingField;
    public Nullable`1<ModelFormat> DestinationFormat { get; public set; }
    [CompilerGeneratedAttribute]
public Nullable`1<ModelFormat> get_DestinationFormat();
    [CompilerGeneratedAttribute]
public void set_DestinationFormat(Nullable`1<ModelFormat> value);
    internal void ModifyRequest(JobConfigurationExtract extract);
}
public class Google.Cloud.BigQuery.V2.CreateRoutineOptions : object {
    internal void ModifyRequest(InsertRequest request);
}
public class Google.Cloud.BigQuery.V2.CreateTableOptions : object {
    internal void ModifyRequest(InsertRequest request);
}
internal class Google.Cloud.BigQuery.V2.CustomMediaUpload : InsertMediaUpload {
    internal ResumableUploadOptions Options { get; }
    public CustomMediaUpload(IClientService service, Job body, string projectId, Stream stream, string contentType);
    internal ResumableUploadOptions get_Options();
}
[ExtensionAttribute]
public static class Google.Cloud.BigQuery.V2.DatasetExtensions : object {
    [ExtensionAttribute]
public static Nullable`1<TimeSpan> GetDefaultTableExpiration(Dataset dataset);
    [ExtensionAttribute]
public static Dataset SetDefaultTableExpiration(Dataset dataset, Nullable`1<TimeSpan> expiration);
    [ExtensionAttribute]
public static Nullable`1<TimeSpan> GetDefaultPartitionExpiration(Dataset dataset);
    [ExtensionAttribute]
public static Dataset SetDefaultPartitionExpiration(Dataset dataset, Nullable`1<TimeSpan> expiration);
    [ExtensionAttribute]
internal static bool ReferencesSameAs(DatasetReference datasetReference1, DatasetReference datasetReference2);
}
public class Google.Cloud.BigQuery.V2.DeleteDatasetOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <DeleteContents>k__BackingField;
    public Nullable`1<bool> DeleteContents { get; public set; }
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_DeleteContents();
    [CompilerGeneratedAttribute]
public void set_DeleteContents(Nullable`1<bool> value);
    internal void ModifyRequest(DeleteRequest request);
}
public class Google.Cloud.BigQuery.V2.DeleteJobOptions : object {
    internal void ModifyRequest(DeleteRequest request);
}
public class Google.Cloud.BigQuery.V2.DeleteModelOptions : object {
    internal void ModifyRequest(DeleteRequest request);
}
public class Google.Cloud.BigQuery.V2.DeleteRoutineOptions : object {
    internal void ModifyRequest(DeleteRequest request);
}
public class Google.Cloud.BigQuery.V2.DeleteTableOptions : object {
    internal void ModifyRequest(DeleteRequest request);
}
internal static class Google.Cloud.BigQuery.V2.EnumMap : object {
    internal static string ToApiValue(T value, string paramName);
    internal static ISet`1<string> ToApiValues(T value);
}
internal static class Google.Cloud.BigQuery.V2.EnumMap`1 : object {
    private static Dictionary`2<string, T> s_stringToValue;
    private static Dictionary`2<T, string> s_valueToString;
    private static EnumMap`1();
    internal static string ToApiValue(T value, string paramName);
    internal static T ToValue(string apiValue, string paramName);
}
public enum Google.Cloud.BigQuery.V2.FileFormat : Enum {
    public int value__;
    [ApiValueAttribute("CSV")]
public static FileFormat Csv;
    [ApiValueAttribute("NEWLINE_DELIMITED_JSON")]
public static FileFormat NewlineDelimitedJson;
    [ApiValueAttribute("AVRO")]
public static FileFormat Avro;
    [ApiValueAttribute("DATASTORE_BACKUP")]
public static FileFormat DatastoreBackup;
    [ApiValueAttribute("PARQUET")]
public static FileFormat Parquet;
    [ApiValueAttribute("ORC")]
public static FileFormat Orc;
}
public static class Google.Cloud.BigQuery.V2.Filters : object {
    public static string FromLabel(string name, string value);
    public static string FromLabels(IDictionary`2<string, string> labels);
}
internal static class Google.Cloud.BigQuery.V2.FlagsEnumMap`1 : object {
    private static Dictionary`2<int, string> s_intValueToString;
    private static FlagsEnumMap`1();
    internal static ISet`1<string> ToApiValues(T value);
}
public class Google.Cloud.BigQuery.V2.GetBigQueryServiceAccountEmailOptions : object {
    internal void ModifyRequest(GetServiceAccountRequest request);
}
public class Google.Cloud.BigQuery.V2.GetDatasetOptions : object {
    [CompilerGeneratedAttribute]
private string <ETag>k__BackingField;
    public string ETag { get; public set; }
    [CompilerGeneratedAttribute]
public string get_ETag();
    [CompilerGeneratedAttribute]
public void set_ETag(string value);
    internal void ModifyRequest(GetRequest request);
}
public class Google.Cloud.BigQuery.V2.GetJobOptions : object {
    internal void ModifyRequest(GetRequest request);
}
public class Google.Cloud.BigQuery.V2.GetModelOptions : object {
    internal void ModifyRequest(GetRequest request);
}
public class Google.Cloud.BigQuery.V2.GetQueryResultsOptions : object {
    internal static TimeSpan DefaultTimeout;
    [CompilerGeneratedAttribute]
private Nullable`1<TimeSpan> <Timeout>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <PageSize>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<ulong> <StartIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PageToken>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <UseInt64Timestamp>k__BackingField;
    public Nullable`1<TimeSpan> Timeout { get; public set; }
    public Nullable`1<int> PageSize { get; public set; }
    public Nullable`1<ulong> StartIndex { get; public set; }
    public string PageToken { get; public set; }
    public Nullable`1<bool> UseInt64Timestamp { get; public set; }
    private static GetQueryResultsOptions();
    [CompilerGeneratedAttribute]
public Nullable`1<TimeSpan> get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(Nullable`1<TimeSpan> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_PageSize();
    [CompilerGeneratedAttribute]
public void set_PageSize(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<ulong> get_StartIndex();
    [CompilerGeneratedAttribute]
public void set_StartIndex(Nullable`1<ulong> value);
    [CompilerGeneratedAttribute]
public string get_PageToken();
    [CompilerGeneratedAttribute]
public void set_PageToken(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_UseInt64Timestamp();
    [CompilerGeneratedAttribute]
public void set_UseInt64Timestamp(Nullable`1<bool> value);
    internal static void ModifyRequest(GetQueryResultsOptions options, GetQueryResultsRequest request);
    private void ModifyRequest(GetQueryResultsRequest request);
    internal GetQueryResultsOptions Clone();
}
public class Google.Cloud.BigQuery.V2.GetRoutineOptions : object {
    [CompilerGeneratedAttribute]
private string <ReadMask>k__BackingField;
    public string ReadMask { get; public set; }
    [CompilerGeneratedAttribute]
public string get_ReadMask();
    [CompilerGeneratedAttribute]
public void set_ReadMask(string value);
    internal void ModifyRequest(GetRequest request);
}
public class Google.Cloud.BigQuery.V2.GetTableIamPolicyOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<int> <PolicyVersion>k__BackingField;
    public Nullable`1<int> PolicyVersion { get; public set; }
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_PolicyVersion();
    [CompilerGeneratedAttribute]
public void set_PolicyVersion(Nullable`1<int> value);
    internal void ModifyRequest(GetIamPolicyRequest body);
}
public class Google.Cloud.BigQuery.V2.GetTableOptions : object {
    [CompilerGeneratedAttribute]
private string <SelectedFields>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TableView> <View>k__BackingField;
    public string SelectedFields { get; public set; }
    public Nullable`1<TableView> View { get; public set; }
    [CompilerGeneratedAttribute]
public string get_SelectedFields();
    [CompilerGeneratedAttribute]
public void set_SelectedFields(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<TableView> get_View();
    [CompilerGeneratedAttribute]
public void set_View(Nullable`1<TableView> value);
    internal void ModifyRequest(GetRequest request);
}
public class Google.Cloud.BigQuery.V2.InsertOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <AllowUnknownFields>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <SkipInvalidRows>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SuppressInsertErrors>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TemplateSuffix>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowEmptyInsertIds>k__BackingField;
    public Nullable`1<bool> AllowUnknownFields { get; public set; }
    public Nullable`1<bool> SkipInvalidRows { get; public set; }
    public bool SuppressInsertErrors { get; public set; }
    public string TemplateSuffix { get; public set; }
    public bool AllowEmptyInsertIds { get; public set; }
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_AllowUnknownFields();
    [CompilerGeneratedAttribute]
public void set_AllowUnknownFields(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_SkipInvalidRows();
    [CompilerGeneratedAttribute]
public void set_SkipInvalidRows(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public bool get_SuppressInsertErrors();
    [CompilerGeneratedAttribute]
public void set_SuppressInsertErrors(bool value);
    [CompilerGeneratedAttribute]
public string get_TemplateSuffix();
    [CompilerGeneratedAttribute]
public void set_TemplateSuffix(string value);
    [CompilerGeneratedAttribute]
public bool get_AllowEmptyInsertIds();
    [CompilerGeneratedAttribute]
public void set_AllowEmptyInsertIds(bool value);
    internal void ModifyRequest(TableDataInsertAllRequest body);
}
public abstract class Google.Cloud.BigQuery.V2.JobCreationOptions : object {
    [CompilerGeneratedAttribute]
private string <ProjectId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <JobIdPrefix>k__BackingField;
    [CompilerGeneratedAttribute]
private string <JobId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <JobLocation>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <Labels>k__BackingField;
    public string ProjectId { get; public set; }
    public string JobIdPrefix { get; public set; }
    public string JobId { get; public set; }
    public string JobLocation { get; public set; }
    public IDictionary`2<string, string> Labels { get; public set; }
    [CompilerGeneratedAttribute]
public string get_ProjectId();
    [CompilerGeneratedAttribute]
public void set_ProjectId(string value);
    [CompilerGeneratedAttribute]
public string get_JobIdPrefix();
    [CompilerGeneratedAttribute]
public void set_JobIdPrefix(string value);
    [CompilerGeneratedAttribute]
public string get_JobId();
    [CompilerGeneratedAttribute]
public void set_JobId(string value);
    [CompilerGeneratedAttribute]
public string get_JobLocation();
    [CompilerGeneratedAttribute]
public void set_JobLocation(string value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, string> get_Labels();
    [CompilerGeneratedAttribute]
public void set_Labels(IDictionary`2<string, string> value);
}
public enum Google.Cloud.BigQuery.V2.JobState : Enum {
    public int value__;
    public static JobState Done;
    public static JobState Pending;
    public static JobState Running;
}
public class Google.Cloud.BigQuery.V2.ListDatasetsOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<int> <PageSize>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Filter>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <IncludeHidden>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PageToken>k__BackingField;
    public Nullable`1<int> PageSize { get; public set; }
    public string Filter { get; public set; }
    public Nullable`1<bool> IncludeHidden { get; public set; }
    public string PageToken { get; public set; }
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_PageSize();
    [CompilerGeneratedAttribute]
public void set_PageSize(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public string get_Filter();
    [CompilerGeneratedAttribute]
public void set_Filter(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_IncludeHidden();
    [CompilerGeneratedAttribute]
public void set_IncludeHidden(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public string get_PageToken();
    [CompilerGeneratedAttribute]
public void set_PageToken(string value);
    internal void ModifyRequest(ListRequest request);
}
public class Google.Cloud.BigQuery.V2.ListJobsOptions : object {
    private static DateTimeOffset UnixEpoch;
    [CompilerGeneratedAttribute]
private Nullable`1<JobState> <StateFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <PageSize>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <AllUsers>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<ProjectionEnum> <Projection>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PageToken>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTimeOffset> <MinCreationTime>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTimeOffset> <MaxCreationTime>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ParentJobId>k__BackingField;
    public Nullable`1<JobState> StateFilter { get; public set; }
    public Nullable`1<int> PageSize { get; public set; }
    public Nullable`1<bool> AllUsers { get; public set; }
    public Nullable`1<ProjectionEnum> Projection { get; public set; }
    public string PageToken { get; public set; }
    public Nullable`1<DateTimeOffset> MinCreationTime { get; public set; }
    public Nullable`1<DateTimeOffset> MaxCreationTime { get; public set; }
    public string ParentJobId { get; public set; }
    private static ListJobsOptions();
    [CompilerGeneratedAttribute]
public Nullable`1<JobState> get_StateFilter();
    [CompilerGeneratedAttribute]
public void set_StateFilter(Nullable`1<JobState> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_PageSize();
    [CompilerGeneratedAttribute]
public void set_PageSize(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_AllUsers();
    [CompilerGeneratedAttribute]
public void set_AllUsers(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<ProjectionEnum> get_Projection();
    [CompilerGeneratedAttribute]
public void set_Projection(Nullable`1<ProjectionEnum> value);
    [CompilerGeneratedAttribute]
public string get_PageToken();
    [CompilerGeneratedAttribute]
public void set_PageToken(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTimeOffset> get_MinCreationTime();
    [CompilerGeneratedAttribute]
public void set_MinCreationTime(Nullable`1<DateTimeOffset> value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTimeOffset> get_MaxCreationTime();
    [CompilerGeneratedAttribute]
public void set_MaxCreationTime(Nullable`1<DateTimeOffset> value);
    [CompilerGeneratedAttribute]
public string get_ParentJobId();
    [CompilerGeneratedAttribute]
public void set_ParentJobId(string value);
    internal void ModifyRequest(ListRequest request);
    private ulong ConvertDateTimeOffset(DateTimeOffset value, string name);
}
public class Google.Cloud.BigQuery.V2.ListModelsOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<int> <PageSize>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PageToken>k__BackingField;
    public Nullable`1<int> PageSize { get; public set; }
    public string PageToken { get; public set; }
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_PageSize();
    [CompilerGeneratedAttribute]
public void set_PageSize(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public string get_PageToken();
    [CompilerGeneratedAttribute]
public void set_PageToken(string value);
    internal void ModifyRequest(ListRequest request);
}
public class Google.Cloud.BigQuery.V2.ListProjectsOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<int> <PageSize>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PageToken>k__BackingField;
    public Nullable`1<int> PageSize { get; public set; }
    public string PageToken { get; public set; }
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_PageSize();
    [CompilerGeneratedAttribute]
public void set_PageSize(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public string get_PageToken();
    [CompilerGeneratedAttribute]
public void set_PageToken(string value);
    internal void ModifyRequest(ListRequest request);
}
public class Google.Cloud.BigQuery.V2.ListRoutinesOptions : object {
    private static string RoutineTypeFilterName;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <PageSize>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PageToken>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ReadMask>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<RoutineType> <RoutineTypeFilter>k__BackingField;
    public Nullable`1<int> PageSize { get; public set; }
    public string PageToken { get; public set; }
    public string ReadMask { get; public set; }
    public Nullable`1<RoutineType> RoutineTypeFilter { get; public set; }
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_PageSize();
    [CompilerGeneratedAttribute]
public void set_PageSize(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public string get_PageToken();
    [CompilerGeneratedAttribute]
public void set_PageToken(string value);
    [CompilerGeneratedAttribute]
public string get_ReadMask();
    [CompilerGeneratedAttribute]
public void set_ReadMask(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<RoutineType> get_RoutineTypeFilter();
    [CompilerGeneratedAttribute]
public void set_RoutineTypeFilter(Nullable`1<RoutineType> value);
    internal void ModifyRequest(ListRequest request);
}
public class Google.Cloud.BigQuery.V2.ListRowsOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<int> <PageSize>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PageToken>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<ulong> <StartIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <UseInt64Timestamp>k__BackingField;
    public Nullable`1<int> PageSize { get; public set; }
    public string PageToken { get; public set; }
    public Nullable`1<ulong> StartIndex { get; public set; }
    public Nullable`1<bool> UseInt64Timestamp { get; public set; }
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_PageSize();
    [CompilerGeneratedAttribute]
public void set_PageSize(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public string get_PageToken();
    [CompilerGeneratedAttribute]
public void set_PageToken(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<ulong> get_StartIndex();
    [CompilerGeneratedAttribute]
public void set_StartIndex(Nullable`1<ulong> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_UseInt64Timestamp();
    [CompilerGeneratedAttribute]
public void set_UseInt64Timestamp(Nullable`1<bool> value);
    internal static void ModifyRequest(ListRowsOptions options, ListRequest request);
    private void ModifyRequest(ListRequest request);
}
public class Google.Cloud.BigQuery.V2.ListTablesOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<int> <PageSize>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PageToken>k__BackingField;
    public Nullable`1<int> PageSize { get; public set; }
    public string PageToken { get; public set; }
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_PageSize();
    [CompilerGeneratedAttribute]
public void set_PageSize(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public string get_PageToken();
    [CompilerGeneratedAttribute]
public void set_PageToken(string value);
    internal void ModifyRequest(ListRequest request);
}
public static class Google.Cloud.BigQuery.V2.Locations : object {
    [CompilerGeneratedAttribute]
private static string <UnitedStates>k__BackingField;
    [CompilerGeneratedAttribute]
private static string <EuropeanUnion>k__BackingField;
    [CompilerGeneratedAttribute]
private static string <Tokyo>k__BackingField;
    public static string UnitedStates { get; }
    public static string EuropeanUnion { get; }
    public static string Tokyo { get; }
    private static Locations();
    [CompilerGeneratedAttribute]
public static string get_UnitedStates();
    [CompilerGeneratedAttribute]
public static string get_EuropeanUnion();
    [CompilerGeneratedAttribute]
public static string get_Tokyo();
}
public enum Google.Cloud.BigQuery.V2.LossOfPrecisionHandling : Enum {
    public int value__;
    public static LossOfPrecisionHandling Truncate;
    public static LossOfPrecisionHandling Throw;
}
public enum Google.Cloud.BigQuery.V2.ModelFormat : Enum {
    public int value__;
    [ApiValueAttribute("ML_TF_SAVED_MODEL")]
public static ModelFormat TensorflowSavedModel;
    [ApiValueAttribute("ML_XGBOOST_BOOSTER")]
public static ModelFormat XGBoostBooster;
}
public class Google.Cloud.BigQuery.V2.ModifyLabelsOptions : object {
    internal static int DefaultRetries;
    [CompilerGeneratedAttribute]
private string <ETag>k__BackingField;
    private Nullable`1<int> _retries;
    public string ETag { get; public set; }
    public Nullable`1<int> Retries { get; public set; }
    [CompilerGeneratedAttribute]
public string get_ETag();
    [CompilerGeneratedAttribute]
public void set_ETag(string value);
    public Nullable`1<int> get_Retries();
    public void set_Retries(Nullable`1<int> value);
}
internal class Google.Cloud.BigQuery.V2.NumericType : object {
    internal static int MaxSupportedScale;
    internal static BigInteger[] PowersOf10;
    private static Regex s_validation;
    private Parameters _parameters;
    private Lazy`1<NumericValue> _lazyMaxValue;
    private Lazy`1<NumericValue> _lazyMinValue;
    private Lazy`1<NumericValue> _lazyEpsilon;
    private Lazy`1<NumericValue> _lazyZero;
    public int Scale { get; }
    public NumericValue Zero { get; }
    public NumericValue MaxValue { get; }
    public NumericValue MinValue { get; }
    public NumericValue Epsilon { get; }
    private NumericType(Parameters parameters);
    private static NumericType();
    internal static NumericType NumericTypeFor(BigInteger scaledMinValue, BigInteger scaledMaxValue, int scale);
    internal static NumericType NumericTypeFor(BigInteger scaledMaxValue, int scale);
    public int get_Scale();
    public NumericValue get_Zero();
    public NumericValue get_MaxValue();
    public NumericValue get_MinValue();
    public NumericValue get_Epsilon();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public NumericValue ParseNumericValue(string text);
    internal bool TryParseNumericValue(string text, NumericValue& value);
    private string TryParseNumericValueImpl(string text, NumericValue& value);
    internal bool IsUnscaledValueInRange(BigInteger integer);
    internal NumericValue ValueFromScaledInteger(BigInteger scaledValue);
    public NumericValue ValueFromDecimal(decimal value, LossOfPrecisionHandling lossOfPrecisionHandling);
    public NumericValue ValueFromInt64(long value);
    public NumericValue ValueFromUInt64(ulong value);
    [CompilerGeneratedAttribute]
private NumericValue <.ctor>b__9_0();
    [CompilerGeneratedAttribute]
private NumericValue <.ctor>b__9_1();
    [CompilerGeneratedAttribute]
private NumericValue <.ctor>b__9_2();
    [CompilerGeneratedAttribute]
private NumericValue <.ctor>b__9_3();
}
internal class Google.Cloud.BigQuery.V2.NumericValue : ValueType {
    private BigInteger _scaledValue;
    [CompilerGeneratedAttribute]
private NumericType <Type>k__BackingField;
    internal NumericType Type { get; }
    internal NumericValue(BigInteger scaledValue, NumericType type);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
internal NumericType get_Type();
    public sealed virtual int CompareTo(NumericValue other);
    private sealed virtual override int System.IComparable.CompareTo(object obj);
    public sealed virtual bool Equals(NumericValue other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    private string ToString(Func`4<string, int, int, int> decimalPrecisionCalculator);
    public decimal ToDecimal(LossOfPrecisionHandling lossOfPrecisionHandling);
    public static decimal op_Explicit(NumericValue value);
    public static bool op_Equality(NumericValue lhs, NumericValue rhs);
    public static bool op_Inequality(NumericValue lhs, NumericValue rhs);
    public static NumericValue op_Addition(NumericValue lhs, NumericValue rhs);
    public static NumericValue op_Subtraction(NumericValue lhs, NumericValue rhs);
    public static NumericValue op_UnaryPlus(NumericValue value);
    public static NumericValue op_UnaryNegation(NumericValue value);
}
public class Google.Cloud.BigQuery.V2.PatchDatasetOptions : object {
    internal void ModifyRequest(PatchRequest request);
}
public class Google.Cloud.BigQuery.V2.PatchModelOptions : object {
    internal void ModifyRequest(PatchRequest request);
}
public class Google.Cloud.BigQuery.V2.PatchTableOptions : object {
    internal void ModifyRequest(PatchRequest request);
}
public class Google.Cloud.BigQuery.V2.QueryOptions : JobCreationOptions {
    [CompilerGeneratedAttribute]
private TableReference <DestinationTable>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <UseQueryCache>k__BackingField;
    [CompilerGeneratedAttribute]
private DatasetReference <DefaultDataset>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <AllowLargeResults>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<CreateDisposition> <CreateDisposition>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<WriteDisposition> <WriteDisposition>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <FlattenResults>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <MaximumBillingTier>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <MaximumBytesBilled>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<QueryPriority> <Priority>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <UseLegacySql>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <DryRun>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<BigQueryParameterMode> <ParameterMode>k__BackingField;
    [CompilerGeneratedAttribute]
private EncryptionConfiguration <DestinationEncryptionConfiguration>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<SchemaUpdateOption> <DestinationSchemaUpdateOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private TimePartitioning <TimePartitioning>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<JobConfigurationQuery> <ConfigurationModifier>k__BackingField;
    public TableReference DestinationTable { get; public set; }
    public Nullable`1<bool> UseQueryCache { get; public set; }
    public DatasetReference DefaultDataset { get; public set; }
    public Nullable`1<bool> AllowLargeResults { get; public set; }
    public Nullable`1<CreateDisposition> CreateDisposition { get; public set; }
    public Nullable`1<WriteDisposition> WriteDisposition { get; public set; }
    public Nullable`1<bool> FlattenResults { get; public set; }
    public Nullable`1<int> MaximumBillingTier { get; public set; }
    public Nullable`1<long> MaximumBytesBilled { get; public set; }
    public Nullable`1<QueryPriority> Priority { get; public set; }
    public Nullable`1<bool> UseLegacySql { get; public set; }
    public Nullable`1<bool> DryRun { get; public set; }
    public Nullable`1<BigQueryParameterMode> ParameterMode { get; public set; }
    public EncryptionConfiguration DestinationEncryptionConfiguration { get; public set; }
    public Nullable`1<SchemaUpdateOption> DestinationSchemaUpdateOptions { get; public set; }
    public TimePartitioning TimePartitioning { get; public set; }
    public Action`1<JobConfigurationQuery> ConfigurationModifier { get; public set; }
    [CompilerGeneratedAttribute]
public TableReference get_DestinationTable();
    [CompilerGeneratedAttribute]
public void set_DestinationTable(TableReference value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_UseQueryCache();
    [CompilerGeneratedAttribute]
public void set_UseQueryCache(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public DatasetReference get_DefaultDataset();
    [CompilerGeneratedAttribute]
public void set_DefaultDataset(DatasetReference value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_AllowLargeResults();
    [CompilerGeneratedAttribute]
public void set_AllowLargeResults(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<CreateDisposition> get_CreateDisposition();
    [CompilerGeneratedAttribute]
public void set_CreateDisposition(Nullable`1<CreateDisposition> value);
    [CompilerGeneratedAttribute]
public Nullable`1<WriteDisposition> get_WriteDisposition();
    [CompilerGeneratedAttribute]
public void set_WriteDisposition(Nullable`1<WriteDisposition> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_FlattenResults();
    [CompilerGeneratedAttribute]
public void set_FlattenResults(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_MaximumBillingTier();
    [CompilerGeneratedAttribute]
public void set_MaximumBillingTier(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<long> get_MaximumBytesBilled();
    [CompilerGeneratedAttribute]
public void set_MaximumBytesBilled(Nullable`1<long> value);
    [CompilerGeneratedAttribute]
public Nullable`1<QueryPriority> get_Priority();
    [CompilerGeneratedAttribute]
public void set_Priority(Nullable`1<QueryPriority> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_UseLegacySql();
    [CompilerGeneratedAttribute]
public void set_UseLegacySql(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_DryRun();
    [CompilerGeneratedAttribute]
public void set_DryRun(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<BigQueryParameterMode> get_ParameterMode();
    [CompilerGeneratedAttribute]
public void set_ParameterMode(Nullable`1<BigQueryParameterMode> value);
    [CompilerGeneratedAttribute]
public EncryptionConfiguration get_DestinationEncryptionConfiguration();
    [CompilerGeneratedAttribute]
public void set_DestinationEncryptionConfiguration(EncryptionConfiguration value);
    [CompilerGeneratedAttribute]
public Nullable`1<SchemaUpdateOption> get_DestinationSchemaUpdateOptions();
    [CompilerGeneratedAttribute]
public void set_DestinationSchemaUpdateOptions(Nullable`1<SchemaUpdateOption> value);
    [CompilerGeneratedAttribute]
public TimePartitioning get_TimePartitioning();
    [CompilerGeneratedAttribute]
public void set_TimePartitioning(TimePartitioning value);
    [CompilerGeneratedAttribute]
public Action`1<JobConfigurationQuery> get_ConfigurationModifier();
    [CompilerGeneratedAttribute]
public void set_ConfigurationModifier(Action`1<JobConfigurationQuery> value);
    internal void ModifyRequest(JobConfigurationQuery query);
}
[ExtensionAttribute]
internal static class Google.Cloud.BigQuery.V2.QueryParameterExtensions : object {
    private static NumberFormatInfo s_floatingPointFormat;
    private static QueryParameterExtensions();
    [ExtensionAttribute]
internal static QueryParameter PopulateScalar(QueryParameter parameter, object value, Func`2<T, string> converter);
    [ExtensionAttribute]
internal static QueryParameter PopulateInteger(QueryParameter parameter, object value);
    [ExtensionAttribute]
internal static QueryParameter PopulateFloatingPoint(QueryParameter parameter, object value);
    [ExtensionAttribute]
internal static QueryParameter UseNullScalarOrThrow(QueryParameter parameter, object value);
}
public enum Google.Cloud.BigQuery.V2.QueryPriority : Enum {
    public int value__;
    public static QueryPriority Interactive;
    public static QueryPriority Batch;
}
internal class Google.Cloud.BigQuery.V2.RetryHandler : object {
    private static String[] s_retriableErrors;
    private static RetryHandler s_instance;
    private static RetryHandler();
    internal static void MarkAsRetriable(BigqueryBaseServiceRequest`1<TResponse> request);
    [AsyncStateMachineAttribute("Google.Cloud.BigQuery.V2.RetryHandler/<IsRetriableResponse>d__4")]
internal static Task`1<bool> IsRetriableResponse(HttpResponseMessage response);
    [AsyncStateMachineAttribute("Google.Cloud.BigQuery.V2.RetryHandler/<HandleResponseAsync>d__5")]
public sealed virtual Task`1<bool> HandleResponseAsync(HandleUnsuccessfulResponseArgs args);
}
[ExtensionAttribute]
public static class Google.Cloud.BigQuery.V2.RoutineExtensions : object {
    private static string UnspecifiedRoutineType;
    private static string UnspecifiedLanguage;
    [ExtensionAttribute]
public static Nullable`1<RoutineType> GetRoutineType(Routine routine);
    [ExtensionAttribute]
public static void SetRoutineType(Routine routine, Nullable`1<RoutineType> type);
    [ExtensionAttribute]
public static Nullable`1<RoutineLanguage> GetRoutineLanguage(Routine routine);
    [ExtensionAttribute]
public static void SetRoutineLanguage(Routine routine, Nullable`1<RoutineLanguage> language);
    [ExtensionAttribute]
internal static bool ReferencesSameAs(RoutineReference routineReference1, RoutineReference routineReference2);
}
public enum Google.Cloud.BigQuery.V2.RoutineLanguage : Enum {
    public int value__;
    public static RoutineLanguage Sql;
    public static RoutineLanguage JavaScript;
}
public enum Google.Cloud.BigQuery.V2.RoutineType : Enum {
    public int value__;
    [ApiValueAttribute("SCALAR_FUNCTION")]
public static RoutineType ScalarFunction;
    [ApiValueAttribute("PROCEDURE")]
public static RoutineType StoredProcedure;
}
[FlagsAttribute]
public enum Google.Cloud.BigQuery.V2.SchemaUpdateOption : Enum {
    public int value__;
    [ApiValueAttribute("ALLOW_FIELD_ADDITION")]
public static SchemaUpdateOption AllowFieldAddition;
    [ApiValueAttribute("ALLOW_FIELD_RELAXATION")]
public static SchemaUpdateOption AllowFieldRelaxation;
}
public class Google.Cloud.BigQuery.V2.SetTableIamPolicyOptions : object {
    [CompilerGeneratedAttribute]
private string <UpdateMask>k__BackingField;
    public string UpdateMask { get; public set; }
    [CompilerGeneratedAttribute]
public string get_UpdateMask();
    [CompilerGeneratedAttribute]
public void set_UpdateMask(string value);
    internal void ModifyRequest(SetIamPolicyRequest body);
}
[ExtensionAttribute]
public static class Google.Cloud.BigQuery.V2.TableExtensions : object {
    private static DateTimeOffset UnixEpoch;
    private static TableExtensions();
    [ExtensionAttribute]
public static Nullable`1<DateTimeOffset> GetExpirationTime(Table table);
    [ExtensionAttribute]
public static Table SetExpirationTime(Table table, Nullable`1<DateTimeOffset> expiration);
    [ExtensionAttribute]
internal static bool ReferencesSameAs(TableReference tableReference1, TableReference tableReference2);
    [ExtensionAttribute]
internal static string GetResourceName(TableReference tableReference);
}
[ExtensionAttribute]
internal static class Google.Cloud.BigQuery.V2.TableFieldSchemaExtensions : object {
    [ExtensionAttribute]
internal static BigQueryDbType GetFieldType(TableFieldSchema field);
    [ExtensionAttribute]
internal static BigQueryFieldMode GetFieldMode(TableFieldSchema field);
}
public class Google.Cloud.BigQuery.V2.TableSchemaBuilder : object {
    private List`1<TableFieldSchema> _fields;
    public void Add(TableFieldSchema field);
    public TableSchemaBuilder ModifyField(string fieldName, Action`1<TableFieldSchema> fieldModifier);
    public void Add(string name, BigQueryDbType type, BigQueryFieldMode mode, string description);
    internal static void ValidateFieldName(string name, string paramName);
    private static bool IsValidFieldName(string name);
    public void Add(string name, TableSchema nestedSchema, BigQueryFieldMode mode, string description);
    public void Add(string name, TableSchemaBuilder nestedSchema, BigQueryFieldMode mode, string description);
    public TableSchema Build();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[ExtensionAttribute]
internal static class Google.Cloud.BigQuery.V2.TableSchemaExtensions : object {
    [ExtensionAttribute]
internal static Dictionary`2<string, int> IndexFieldNames(TableSchema schema);
    [ExtensionAttribute]
internal static string BuildSelectedFields(TableSchema schema);
    private static void BuildSelectedFields(IList`1<TableFieldSchema> fieldSchemas, IList`1<string> currentPath, IList`1<string> built);
}
public enum Google.Cloud.BigQuery.V2.TableView : Enum {
    public int value__;
    public static TableView Basic;
    public static TableView Full;
    public static TableView StorageStats;
}
public class Google.Cloud.BigQuery.V2.TestTableIamPermissionsOptions : object {
    internal void ModifyRequest(TestIamPermissionsRequest body);
}
public static class Google.Cloud.BigQuery.V2.TimePartition : object {
    public static TimePartitioning CreateDailyPartitioning(Nullable`1<TimeSpan> expiration);
    public static TimePartitioning CreateDailyPartitioning(Nullable`1<TimeSpan> expiration, string field);
}
public class Google.Cloud.BigQuery.V2.UpdateDatasetOptions : object {
    internal void ModifyRequest(UpdateRequest request);
}
public class Google.Cloud.BigQuery.V2.UpdateRoutineOptions : object {
    internal void ModifyRequest(UpdateRequest request);
}
public class Google.Cloud.BigQuery.V2.UpdateTableOptions : object {
    internal void ModifyRequest(UpdateRequest request);
}
public class Google.Cloud.BigQuery.V2.UploadAvroOptions : JobCreationOptions {
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <AllowUnknownFields>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <MaxBadRecords>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<CreateDisposition> <CreateDisposition>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<WriteDisposition> <WriteDisposition>k__BackingField;
    [CompilerGeneratedAttribute]
private TimePartitioning <TimePartitioning>k__BackingField;
    [CompilerGeneratedAttribute]
private EncryptionConfiguration <DestinationEncryptionConfiguration>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<SchemaUpdateOption> <DestinationSchemaUpdateOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <UseAvroLogicalTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<JobConfigurationLoad> <ConfigurationModifier>k__BackingField;
    public Nullable`1<bool> AllowUnknownFields { get; public set; }
    public Nullable`1<int> MaxBadRecords { get; public set; }
    public Nullable`1<CreateDisposition> CreateDisposition { get; public set; }
    public Nullable`1<WriteDisposition> WriteDisposition { get; public set; }
    public TimePartitioning TimePartitioning { get; public set; }
    public EncryptionConfiguration DestinationEncryptionConfiguration { get; public set; }
    public Nullable`1<SchemaUpdateOption> DestinationSchemaUpdateOptions { get; public set; }
    public Nullable`1<bool> UseAvroLogicalTypes { get; public set; }
    public Action`1<JobConfigurationLoad> ConfigurationModifier { get; public set; }
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_AllowUnknownFields();
    [CompilerGeneratedAttribute]
public void set_AllowUnknownFields(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_MaxBadRecords();
    [CompilerGeneratedAttribute]
public void set_MaxBadRecords(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<CreateDisposition> get_CreateDisposition();
    [CompilerGeneratedAttribute]
public void set_CreateDisposition(Nullable`1<CreateDisposition> value);
    [CompilerGeneratedAttribute]
public Nullable`1<WriteDisposition> get_WriteDisposition();
    [CompilerGeneratedAttribute]
public void set_WriteDisposition(Nullable`1<WriteDisposition> value);
    [CompilerGeneratedAttribute]
public TimePartitioning get_TimePartitioning();
    [CompilerGeneratedAttribute]
public void set_TimePartitioning(TimePartitioning value);
    [CompilerGeneratedAttribute]
public EncryptionConfiguration get_DestinationEncryptionConfiguration();
    [CompilerGeneratedAttribute]
public void set_DestinationEncryptionConfiguration(EncryptionConfiguration value);
    [CompilerGeneratedAttribute]
public Nullable`1<SchemaUpdateOption> get_DestinationSchemaUpdateOptions();
    [CompilerGeneratedAttribute]
public void set_DestinationSchemaUpdateOptions(Nullable`1<SchemaUpdateOption> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_UseAvroLogicalTypes();
    [CompilerGeneratedAttribute]
public void set_UseAvroLogicalTypes(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Action`1<JobConfigurationLoad> get_ConfigurationModifier();
    [CompilerGeneratedAttribute]
public void set_ConfigurationModifier(Action`1<JobConfigurationLoad> value);
    internal void ModifyConfiguration(JobConfigurationLoad loadRequest);
}
public class Google.Cloud.BigQuery.V2.UploadCsvOptions : JobCreationOptions {
    [CompilerGeneratedAttribute]
private Nullable`1<int> <SkipLeadingRows>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Quote>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <AllowQuotedNewlines>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <AllowJaggedRows>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FieldDelimiter>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <AllowTrailingColumns>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <MaxBadRecords>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<CreateDisposition> <CreateDisposition>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<WriteDisposition> <WriteDisposition>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Autodetect>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NullMarker>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Encoding>k__BackingField;
    [CompilerGeneratedAttribute]
private TimePartitioning <TimePartitioning>k__BackingField;
    [CompilerGeneratedAttribute]
private EncryptionConfiguration <DestinationEncryptionConfiguration>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<SchemaUpdateOption> <DestinationSchemaUpdateOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<JobConfigurationLoad> <ConfigurationModifier>k__BackingField;
    public Nullable`1<int> SkipLeadingRows { get; public set; }
    public string Quote { get; public set; }
    public Nullable`1<bool> AllowQuotedNewlines { get; public set; }
    public Nullable`1<bool> AllowJaggedRows { get; public set; }
    public string FieldDelimiter { get; public set; }
    public Nullable`1<bool> AllowTrailingColumns { get; public set; }
    public Nullable`1<int> MaxBadRecords { get; public set; }
    public Nullable`1<CreateDisposition> CreateDisposition { get; public set; }
    public Nullable`1<WriteDisposition> WriteDisposition { get; public set; }
    public Nullable`1<bool> Autodetect { get; public set; }
    public string NullMarker { get; public set; }
    public string Encoding { get; public set; }
    public TimePartitioning TimePartitioning { get; public set; }
    public EncryptionConfiguration DestinationEncryptionConfiguration { get; public set; }
    public Nullable`1<SchemaUpdateOption> DestinationSchemaUpdateOptions { get; public set; }
    public Action`1<JobConfigurationLoad> ConfigurationModifier { get; public set; }
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_SkipLeadingRows();
    [CompilerGeneratedAttribute]
public void set_SkipLeadingRows(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public string get_Quote();
    [CompilerGeneratedAttribute]
public void set_Quote(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_AllowQuotedNewlines();
    [CompilerGeneratedAttribute]
public void set_AllowQuotedNewlines(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_AllowJaggedRows();
    [CompilerGeneratedAttribute]
public void set_AllowJaggedRows(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public string get_FieldDelimiter();
    [CompilerGeneratedAttribute]
public void set_FieldDelimiter(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_AllowTrailingColumns();
    [CompilerGeneratedAttribute]
public void set_AllowTrailingColumns(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_MaxBadRecords();
    [CompilerGeneratedAttribute]
public void set_MaxBadRecords(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<CreateDisposition> get_CreateDisposition();
    [CompilerGeneratedAttribute]
public void set_CreateDisposition(Nullable`1<CreateDisposition> value);
    [CompilerGeneratedAttribute]
public Nullable`1<WriteDisposition> get_WriteDisposition();
    [CompilerGeneratedAttribute]
public void set_WriteDisposition(Nullable`1<WriteDisposition> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Autodetect();
    [CompilerGeneratedAttribute]
public void set_Autodetect(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public string get_NullMarker();
    [CompilerGeneratedAttribute]
public void set_NullMarker(string value);
    [CompilerGeneratedAttribute]
public string get_Encoding();
    [CompilerGeneratedAttribute]
public void set_Encoding(string value);
    [CompilerGeneratedAttribute]
public TimePartitioning get_TimePartitioning();
    [CompilerGeneratedAttribute]
public void set_TimePartitioning(TimePartitioning value);
    [CompilerGeneratedAttribute]
public EncryptionConfiguration get_DestinationEncryptionConfiguration();
    [CompilerGeneratedAttribute]
public void set_DestinationEncryptionConfiguration(EncryptionConfiguration value);
    [CompilerGeneratedAttribute]
public Nullable`1<SchemaUpdateOption> get_DestinationSchemaUpdateOptions();
    [CompilerGeneratedAttribute]
public void set_DestinationSchemaUpdateOptions(Nullable`1<SchemaUpdateOption> value);
    [CompilerGeneratedAttribute]
public Action`1<JobConfigurationLoad> get_ConfigurationModifier();
    [CompilerGeneratedAttribute]
public void set_ConfigurationModifier(Action`1<JobConfigurationLoad> value);
    internal void ModifyConfiguration(JobConfigurationLoad loadRequest);
}
public class Google.Cloud.BigQuery.V2.UploadJsonOptions : JobCreationOptions {
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <AllowUnknownFields>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <MaxBadRecords>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<CreateDisposition> <CreateDisposition>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<WriteDisposition> <WriteDisposition>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Autodetect>k__BackingField;
    [CompilerGeneratedAttribute]
private TimePartitioning <TimePartitioning>k__BackingField;
    [CompilerGeneratedAttribute]
private EncryptionConfiguration <DestinationEncryptionConfiguration>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<SchemaUpdateOption> <DestinationSchemaUpdateOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<JobConfigurationLoad> <ConfigurationModifier>k__BackingField;
    public Nullable`1<bool> AllowUnknownFields { get; public set; }
    public Nullable`1<int> MaxBadRecords { get; public set; }
    public Nullable`1<CreateDisposition> CreateDisposition { get; public set; }
    public Nullable`1<WriteDisposition> WriteDisposition { get; public set; }
    public Nullable`1<bool> Autodetect { get; public set; }
    public TimePartitioning TimePartitioning { get; public set; }
    public EncryptionConfiguration DestinationEncryptionConfiguration { get; public set; }
    public Nullable`1<SchemaUpdateOption> DestinationSchemaUpdateOptions { get; public set; }
    public Action`1<JobConfigurationLoad> ConfigurationModifier { get; public set; }
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_AllowUnknownFields();
    [CompilerGeneratedAttribute]
public void set_AllowUnknownFields(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_MaxBadRecords();
    [CompilerGeneratedAttribute]
public void set_MaxBadRecords(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<CreateDisposition> get_CreateDisposition();
    [CompilerGeneratedAttribute]
public void set_CreateDisposition(Nullable`1<CreateDisposition> value);
    [CompilerGeneratedAttribute]
public Nullable`1<WriteDisposition> get_WriteDisposition();
    [CompilerGeneratedAttribute]
public void set_WriteDisposition(Nullable`1<WriteDisposition> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Autodetect();
    [CompilerGeneratedAttribute]
public void set_Autodetect(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public TimePartitioning get_TimePartitioning();
    [CompilerGeneratedAttribute]
public void set_TimePartitioning(TimePartitioning value);
    [CompilerGeneratedAttribute]
public EncryptionConfiguration get_DestinationEncryptionConfiguration();
    [CompilerGeneratedAttribute]
public void set_DestinationEncryptionConfiguration(EncryptionConfiguration value);
    [CompilerGeneratedAttribute]
public Nullable`1<SchemaUpdateOption> get_DestinationSchemaUpdateOptions();
    [CompilerGeneratedAttribute]
public void set_DestinationSchemaUpdateOptions(Nullable`1<SchemaUpdateOption> value);
    [CompilerGeneratedAttribute]
public Action`1<JobConfigurationLoad> get_ConfigurationModifier();
    [CompilerGeneratedAttribute]
public void set_ConfigurationModifier(Action`1<JobConfigurationLoad> value);
    internal void ModifyConfiguration(JobConfigurationLoad loadRequest);
}
public class Google.Cloud.BigQuery.V2.UploadOrcOptions : JobCreationOptions {
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <AllowUnknownFields>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <MaxBadRecords>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<CreateDisposition> <CreateDisposition>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<WriteDisposition> <WriteDisposition>k__BackingField;
    [CompilerGeneratedAttribute]
private TimePartitioning <TimePartitioning>k__BackingField;
    [CompilerGeneratedAttribute]
private EncryptionConfiguration <DestinationEncryptionConfiguration>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<SchemaUpdateOption> <DestinationSchemaUpdateOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<JobConfigurationLoad> <ConfigurationModifier>k__BackingField;
    public Nullable`1<bool> AllowUnknownFields { get; public set; }
    public Nullable`1<int> MaxBadRecords { get; public set; }
    public Nullable`1<CreateDisposition> CreateDisposition { get; public set; }
    public Nullable`1<WriteDisposition> WriteDisposition { get; public set; }
    public TimePartitioning TimePartitioning { get; public set; }
    public EncryptionConfiguration DestinationEncryptionConfiguration { get; public set; }
    public Nullable`1<SchemaUpdateOption> DestinationSchemaUpdateOptions { get; public set; }
    public Action`1<JobConfigurationLoad> ConfigurationModifier { get; public set; }
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_AllowUnknownFields();
    [CompilerGeneratedAttribute]
public void set_AllowUnknownFields(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_MaxBadRecords();
    [CompilerGeneratedAttribute]
public void set_MaxBadRecords(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<CreateDisposition> get_CreateDisposition();
    [CompilerGeneratedAttribute]
public void set_CreateDisposition(Nullable`1<CreateDisposition> value);
    [CompilerGeneratedAttribute]
public Nullable`1<WriteDisposition> get_WriteDisposition();
    [CompilerGeneratedAttribute]
public void set_WriteDisposition(Nullable`1<WriteDisposition> value);
    [CompilerGeneratedAttribute]
public TimePartitioning get_TimePartitioning();
    [CompilerGeneratedAttribute]
public void set_TimePartitioning(TimePartitioning value);
    [CompilerGeneratedAttribute]
public EncryptionConfiguration get_DestinationEncryptionConfiguration();
    [CompilerGeneratedAttribute]
public void set_DestinationEncryptionConfiguration(EncryptionConfiguration value);
    [CompilerGeneratedAttribute]
public Nullable`1<SchemaUpdateOption> get_DestinationSchemaUpdateOptions();
    [CompilerGeneratedAttribute]
public void set_DestinationSchemaUpdateOptions(Nullable`1<SchemaUpdateOption> value);
    [CompilerGeneratedAttribute]
public Action`1<JobConfigurationLoad> get_ConfigurationModifier();
    [CompilerGeneratedAttribute]
public void set_ConfigurationModifier(Action`1<JobConfigurationLoad> value);
    internal void ModifyConfiguration(JobConfigurationLoad loadRequest);
}
public class Google.Cloud.BigQuery.V2.UploadParquetOptions : JobCreationOptions {
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <AllowUnknownFields>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <MaxBadRecords>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<CreateDisposition> <CreateDisposition>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<WriteDisposition> <WriteDisposition>k__BackingField;
    [CompilerGeneratedAttribute]
private TimePartitioning <TimePartitioning>k__BackingField;
    [CompilerGeneratedAttribute]
private EncryptionConfiguration <DestinationEncryptionConfiguration>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<SchemaUpdateOption> <DestinationSchemaUpdateOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<JobConfigurationLoad> <ConfigurationModifier>k__BackingField;
    public Nullable`1<bool> AllowUnknownFields { get; public set; }
    public Nullable`1<int> MaxBadRecords { get; public set; }
    public Nullable`1<CreateDisposition> CreateDisposition { get; public set; }
    public Nullable`1<WriteDisposition> WriteDisposition { get; public set; }
    public TimePartitioning TimePartitioning { get; public set; }
    public EncryptionConfiguration DestinationEncryptionConfiguration { get; public set; }
    public Nullable`1<SchemaUpdateOption> DestinationSchemaUpdateOptions { get; public set; }
    public Action`1<JobConfigurationLoad> ConfigurationModifier { get; public set; }
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_AllowUnknownFields();
    [CompilerGeneratedAttribute]
public void set_AllowUnknownFields(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_MaxBadRecords();
    [CompilerGeneratedAttribute]
public void set_MaxBadRecords(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<CreateDisposition> get_CreateDisposition();
    [CompilerGeneratedAttribute]
public void set_CreateDisposition(Nullable`1<CreateDisposition> value);
    [CompilerGeneratedAttribute]
public Nullable`1<WriteDisposition> get_WriteDisposition();
    [CompilerGeneratedAttribute]
public void set_WriteDisposition(Nullable`1<WriteDisposition> value);
    [CompilerGeneratedAttribute]
public TimePartitioning get_TimePartitioning();
    [CompilerGeneratedAttribute]
public void set_TimePartitioning(TimePartitioning value);
    [CompilerGeneratedAttribute]
public EncryptionConfiguration get_DestinationEncryptionConfiguration();
    [CompilerGeneratedAttribute]
public void set_DestinationEncryptionConfiguration(EncryptionConfiguration value);
    [CompilerGeneratedAttribute]
public Nullable`1<SchemaUpdateOption> get_DestinationSchemaUpdateOptions();
    [CompilerGeneratedAttribute]
public void set_DestinationSchemaUpdateOptions(Nullable`1<SchemaUpdateOption> value);
    [CompilerGeneratedAttribute]
public Action`1<JobConfigurationLoad> get_ConfigurationModifier();
    [CompilerGeneratedAttribute]
public void set_ConfigurationModifier(Action`1<JobConfigurationLoad> value);
    internal void ModifyConfiguration(JobConfigurationLoad loadRequest);
}
public enum Google.Cloud.BigQuery.V2.WriteDisposition : Enum {
    public int value__;
    [ApiValueAttribute("WRITE_APPEND")]
public static WriteDisposition WriteAppend;
    [ApiValueAttribute("WRITE_TRUNCATE")]
public static WriteDisposition WriteTruncate;
    [ApiValueAttribute("WRITE_EMPTY")]
public static WriteDisposition WriteIfEmpty;
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.IsReadOnlyAttribute : Attribute {
}
