public class Google.Cloud.Firestore.AggregateField : object {
    internal static string CountAlias;
    [CompilerGeneratedAttribute]
private Aggregation <Aggregation>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Alias>k__BackingField;
    private Aggregation Aggregation { get; }
    public string Alias { get; }
    private AggregateField(Aggregation aggregation, string alias);
    [CompilerGeneratedAttribute]
private Aggregation get_Aggregation();
    [CompilerGeneratedAttribute]
public string get_Alias();
    public static AggregateField Count();
    public static AggregateField Sum(string field, string alias);
    public static AggregateField Average(string field, string alias);
    public sealed virtual bool Equals(AggregateField other);
    public virtual int GetHashCode();
    internal Aggregation GetAggregationForIndex(int index);
    internal string GetAliasForIndex(int index);
}
public class Google.Cloud.Firestore.AggregateQuery : object {
    private Query _query;
    private IReadOnlyList`1<AggregateField> _aggregateFields;
    internal FirestoreDb Database { get; }
    internal AggregateQuery(Query query, IReadOnlyList`1<AggregateField> aggregateFields);
    internal FirestoreDb get_Database();
    public Task`1<AggregateQuerySnapshot> GetSnapshotAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Google.Cloud.Firestore.AggregateQuery/<GetSnapshotAsync>d__6")]
internal Task`1<AggregateQuerySnapshot> GetSnapshotAsync(ByteString transactionId, CancellationToken cancellationToken);
    [AsyncIteratorStateMachineAttribute("Google.Cloud.Firestore.AggregateQuery/<GetAggregationQueryResponseStreamAsync>d__7")]
private IAsyncEnumerable`1<RunAggregationQueryResponse> GetAggregationQueryResponseStreamAsync(ByteString transactionId, CancellationToken cancellationToken);
    internal StructuredAggregationQuery ToStructuredAggregationQuery();
    public virtual int GetHashCode();
    public sealed virtual bool Equals(AggregateQuery other);
    public virtual bool Equals(object obj);
}
public class Google.Cloud.Firestore.AggregateQuerySnapshot : object {
    private MapField`2<string, Value> _data;
    [CompilerGeneratedAttribute]
private AggregateQuery <Query>k__BackingField;
    [CompilerGeneratedAttribute]
private Timestamp <ReadTime>k__BackingField;
    public AggregateQuery Query { get; }
    public Timestamp ReadTime { get; }
    public Nullable`1<long> Count { get; }
    private FirestoreDb Google.Cloud.Firestore.IDeserializationContext.Database { get; }
    private DocumentReference Google.Cloud.Firestore.IDeserializationContext.DocumentReference { get; }
    private Nullable`1<Timestamp> Google.Cloud.Firestore.IDeserializationContext.CreateTime { get; }
    private Nullable`1<Timestamp> Google.Cloud.Firestore.IDeserializationContext.UpdateTime { get; }
    internal AggregateQuerySnapshot(AggregateQuery query, Timestamp readTime, MapField`2<string, Value> data);
    [CompilerGeneratedAttribute]
public AggregateQuery get_Query();
    [CompilerGeneratedAttribute]
public sealed virtual Timestamp get_ReadTime();
    public Nullable`1<long> get_Count();
    public T GetValue(string alias);
    public T GetValue(AggregateField aggregateField);
    internal bool TryGetValue(string alias, T& value);
    internal bool TryGetValue(AggregateField aggregateField, T& value);
    public sealed virtual bool Equals(AggregateQuerySnapshot other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override FirestoreDb Google.Cloud.Firestore.IDeserializationContext.get_Database();
    private sealed virtual override DocumentReference Google.Cloud.Firestore.IDeserializationContext.get_DocumentReference();
    private sealed virtual override Nullable`1<Timestamp> Google.Cloud.Firestore.IDeserializationContext.get_CreateTime();
    private sealed virtual override Nullable`1<Timestamp> Google.Cloud.Firestore.IDeserializationContext.get_UpdateTime();
}
internal static class Google.Cloud.Firestore.Aggregates : object {
    internal static string CountAlias;
    internal static Aggregation CreateCountAggregate();
}
internal class Google.Cloud.Firestore.AugmentedValue : object {
    private static MessageParser`1<AugmentedValue> _parser;
    private UnknownFieldSet _unknownFields;
    public static int KindFieldNumber;
    private SentinelKind kind_;
    public static int ArrayFieldNumber;
    private ArrayValue array_;
    public static int IncrementFieldNumber;
    private Value increment_;
    [DebuggerNonUserCodeAttribute]
public static MessageParser`1<AugmentedValue> Parser { get; }
    [DebuggerNonUserCodeAttribute]
public static MessageDescriptor Descriptor { get; }
    [DebuggerNonUserCodeAttribute]
private MessageDescriptor pb::Google.Protobuf.IMessage.Descriptor { get; }
    [DebuggerNonUserCodeAttribute]
public SentinelKind Kind { get; public set; }
    [DebuggerNonUserCodeAttribute]
public ArrayValue Array { get; public set; }
    [DebuggerNonUserCodeAttribute]
public Value Increment { get; public set; }
    [DebuggerNonUserCodeAttribute]
public AugmentedValue(AugmentedValue other);
    private static AugmentedValue();
    public static MessageParser`1<AugmentedValue> get_Parser();
    public static MessageDescriptor get_Descriptor();
    private sealed virtual override MessageDescriptor pb::Google.Protobuf.IMessage.get_Descriptor();
    [DebuggerNonUserCodeAttribute]
public sealed virtual AugmentedValue Clone();
    public SentinelKind get_Kind();
    public void set_Kind(SentinelKind value);
    public ArrayValue get_Array();
    public void set_Array(ArrayValue value);
    public Value get_Increment();
    public void set_Increment(Value value);
    [DebuggerNonUserCodeAttribute]
public virtual bool Equals(object other);
    [DebuggerNonUserCodeAttribute]
public sealed virtual bool Equals(AugmentedValue other);
    [DebuggerNonUserCodeAttribute]
public virtual int GetHashCode();
    [DebuggerNonUserCodeAttribute]
public virtual string ToString();
    [DebuggerNonUserCodeAttribute]
public sealed virtual void WriteTo(CodedOutputStream output);
    [DebuggerNonUserCodeAttribute]
private sealed virtual override void pb::Google.Protobuf.IBufferMessage.InternalWriteTo(WriteContext& output);
    [DebuggerNonUserCodeAttribute]
public sealed virtual int CalculateSize();
    [DebuggerNonUserCodeAttribute]
public sealed virtual void MergeFrom(AugmentedValue other);
    [DebuggerNonUserCodeAttribute]
public sealed virtual void MergeFrom(CodedInputStream input);
    [DebuggerNonUserCodeAttribute]
private sealed virtual override void pb::Google.Protobuf.IBufferMessage.InternalMergeFrom(ParseContext& input);
}
[DefaultMemberAttribute("Item")]
public class Google.Cloud.Firestore.Blob : ValueType {
    private ByteString _byteString;
    public ByteString ByteString { get; }
    public int Length { get; }
    public byte Item { get; }
    private Blob(ByteString byteString);
    public ByteString get_ByteString();
    public int get_Length();
    public byte get_Item(int index);
    public static Blob FromByteString(ByteString byteString);
    public static Blob CopyFrom(Byte[] bytes);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public sealed virtual bool Equals(Blob other);
    public static bool op_Equality(Blob lhs, Blob rhs);
    public static bool op_Inequality(Blob lhs, Blob rhs);
    public virtual string ToString();
}
public class Google.Cloud.Firestore.CollectionReference : Query {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private DocumentReference <Parent>k__BackingField;
    public string Id { get; }
    public string Path { get; }
    public DocumentReference Parent { get; }
    internal CollectionReference(FirestoreDb database, DocumentReference parent, string id);
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
public DocumentReference get_Parent();
    public DocumentReference Document();
    public DocumentReference Document(string path);
    [AsyncStateMachineAttribute("Google.Cloud.Firestore.CollectionReference/<AddAsync>d__12")]
public Task`1<DocumentReference> AddAsync(object documentData, CancellationToken cancellationToken);
    public IAsyncEnumerable`1<DocumentReference> ListDocumentsAsync();
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(CollectionReference other);
    public virtual string ToString();
    public sealed virtual int CompareTo(CollectionReference other);
    [CompilerGeneratedAttribute]
private DocumentReference <ListDocumentsAsync>b__13_0(Document doc);
}
public class Google.Cloud.Firestore.ConverterRegistry : object {
    private List`1<object> _converterList;
    private Dictionary`2<Type, IFirestoreInternalConverter> _converters;
    public void Add(IFirestoreConverter`1<T> converter);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    internal IReadOnlyDictionary`2<Type, IFirestoreInternalConverter> ToConverterDictionary();
}
internal class Google.Cloud.Firestore.Converters.AnonymousTypeConverter : MapConverterBase {
    private IReadOnlyList`1<PropertyInfo> _properties;
    internal AnonymousTypeConverter(Type targetType);
    public virtual void SerializeMap(SerializationContext context, object value, IDictionary`2<string, Value> map);
}
internal class Google.Cloud.Firestore.Converters.ArrayConverter : ListConverterBase {
    private Type _elementType;
    internal ArrayConverter(Type elementType);
    protected virtual object DeserializeArray(IDeserializationContext context, RepeatedField`1<Value> values);
}
internal class Google.Cloud.Firestore.Converters.AttributedIdAssigner : object {
    private static ConcurrentDictionary`2<Type, AttributedIdAssigner> s_assigners;
    private List`1<PropertyInfo> _idProperties;
    private List`1<PropertyInfo> _referenceProperties;
    private AttributedIdAssigner(List`1<PropertyInfo> idProperties, List`1<PropertyInfo> referenceProperties);
    private static AttributedIdAssigner();
    private void AssignId(object value, DocumentReference reference);
    internal static void MaybeAssignId(object value, DocumentReference reference);
    private static AttributedIdAssigner MaybeCreateAssigner(Type type);
}
internal static class Google.Cloud.Firestore.Converters.AttributedTimestampAssigner : object {
    private static Dictionary`2<Type, Func`2<Nullable`1<Timestamp>, object>> s_converters;
    private static ConcurrentDictionary`2<Type, Action`2<object, IDeserializationContext>> s_assigners;
    private static AttributedTimestampAssigner();
    internal static void MaybeAssignTimestamps(object value, IDeserializationContext context);
    private static Action`2<object, IDeserializationContext> MaybeCreateAssigner(Type type);
    private static Action`2<object, IDeserializationContext> MaybeCreateAssigner(PropertyInfo property, Func`2<IDeserializationContext, Nullable`1<Timestamp>> timestampSelector, Boolean& hasAttribute);
}
internal class Google.Cloud.Firestore.Converters.AttributedTypeConverter : MapConverterBase {
    private IReadOnlyDictionary`2<string, AttributedProperty> _writableProperties;
    private IReadOnlyList`1<AttributedProperty> _readableProperties;
    private Func`1<object> _createInstance;
    private FirestoreDataAttribute _attribute;
    private AttributedTypeConverter(Type targetType, FirestoreDataAttribute attribute);
    private static Func`1<object> CreateObjectCreator(TypeInfo typeInfo);
    internal static IFirestoreInternalConverter ForType(Type targetType);
    public virtual object DeserializeMap(IDeserializationContext context, IDictionary`2<string, Value> values);
    public virtual void SerializeMap(SerializationContext context, object value, IDictionary`2<string, Value> map);
}
internal class Google.Cloud.Firestore.Converters.BlobConverter : ConverterBase {
    public virtual Value Serialize(SerializationContext context, object value);
    protected virtual object DeserializeBytes(IDeserializationContext context, ByteString value);
}
internal class Google.Cloud.Firestore.Converters.BooleanConverter : ConverterBase {
    public virtual Value Serialize(SerializationContext context, object value);
    protected virtual object DeserializeBoolean(IDeserializationContext context, bool value);
}
internal class Google.Cloud.Firestore.Converters.ByteArrayConverter : ConverterBase {
    public virtual Value Serialize(SerializationContext context, object value);
    protected virtual object DeserializeBytes(IDeserializationContext context, ByteString value);
}
internal class Google.Cloud.Firestore.Converters.ByteConverter : IntegerConverterBase {
    public virtual Value Serialize(SerializationContext context, object value);
    protected virtual object DeserializeInteger(IDeserializationContext context, long value);
}
internal class Google.Cloud.Firestore.Converters.ByteStringConverter : ConverterBase {
    public virtual Value Serialize(SerializationContext context, object value);
    protected virtual object DeserializeBytes(IDeserializationContext context, ByteString value);
}
internal abstract class Google.Cloud.Firestore.Converters.ConverterBase : object {
    [CompilerGeneratedAttribute]
private Type <TargetType>k__BackingField;
    protected Type TargetType { get; }
    protected ConverterBase(Type targetType);
    [CompilerGeneratedAttribute]
protected Type get_TargetType();
    public virtual object DeserializeMap(IDeserializationContext context, IDictionary`2<string, Value> values);
    public virtual object DeserializeValue(IDeserializationContext context, Value value);
    public abstract virtual Value Serialize(SerializationContext context, object value);
    public virtual void SerializeMap(SerializationContext context, object value, IDictionary`2<string, Value> map);
    protected virtual object DeserializeArray(IDeserializationContext context, RepeatedField`1<Value> values);
    protected virtual object DeserializeBoolean(IDeserializationContext context, bool value);
    protected virtual object DeserializeBytes(IDeserializationContext context, ByteString value);
    protected virtual object DeserializeDouble(IDeserializationContext context, double value);
    protected virtual object DeserializeGeoPoint(IDeserializationContext context, LatLng value);
    protected virtual object DeserializeInteger(IDeserializationContext context, long value);
    protected virtual object DeserializeReference(IDeserializationContext context, string value);
    protected virtual object DeserializeString(IDeserializationContext context, string value);
    protected virtual object DeserializeTimestamp(IDeserializationContext context, Timestamp value);
}
internal static class Google.Cloud.Firestore.Converters.ConverterCache : object {
    private static ConcurrentDictionary`2<Type, IFirestoreInternalConverter> s_converters;
    private static MethodInfo s_createDictionaryConverter;
    private static ConverterCache();
    internal static IFirestoreInternalConverter GetConverter(Type targetType);
    private static IFirestoreInternalConverter CreateDictionaryConverter(Type targetType);
    private static IFirestoreInternalConverter CreateConverter(Type targetType);
    internal static Type TryGetStringDictionaryValueType(Type type);
    internal static Type TryGetListType(Type targetType);
    [CompilerGeneratedAttribute]
internal static Type <TryGetStringDictionaryValueType>g__MapInterfaceToDictionaryValueTypeArgument|5_1(Type iface);
    [CompilerGeneratedAttribute]
internal static Type <TryGetListType>g__MapInterfaceToTypeArgument|6_1(Type iface);
}
internal static class Google.Cloud.Firestore.Converters.CustomConverter : object {
    private static MethodInfo _method;
    private static CustomConverter();
    internal static IFirestoreInternalConverter ForConverterType(Type converterType, Type targetType);
    private static IFirestoreInternalConverter CreateInstance(IFirestoreConverter`1<T> wrappedConverter);
}
internal class Google.Cloud.Firestore.Converters.CustomConverter`1 : object {
    private IFirestoreConverter`1<T> _wrappedConverter;
    private IReadOnlyList`1<FirestoreDeserializationConfigurationAttribute> _configurationAttributes;
    internal CustomConverter`1(IFirestoreConverter`1<T> wrappedConverter);
    public sealed virtual object DeserializeMap(IDeserializationContext context, IDictionary`2<string, Value> values);
    public sealed virtual object DeserializeValue(IDeserializationContext context, Value value);
    private object ApplyConversionToPoco(IDeserializationContext context, object poco);
    public sealed virtual Value Serialize(SerializationContext context, object value);
    public sealed virtual void SerializeMap(SerializationContext context, object value, IDictionary`2<string, Value> map);
}
internal class Google.Cloud.Firestore.Converters.DateTimeConverter : ConverterBase {
    public virtual Value Serialize(SerializationContext context, object value);
    protected virtual object DeserializeTimestamp(IDeserializationContext context, Timestamp value);
}
internal class Google.Cloud.Firestore.Converters.DateTimeOffsetConverter : ConverterBase {
    public virtual Value Serialize(SerializationContext context, object value);
    protected virtual object DeserializeTimestamp(IDeserializationContext context, Timestamp value);
}
internal class Google.Cloud.Firestore.Converters.DictionaryConverter`1 : MapConverterBase {
    private Type _concreteType;
    internal DictionaryConverter`1(Type targetType);
    public virtual object DeserializeMap(IDeserializationContext context, IDictionary`2<string, Value> values);
    public virtual void SerializeMap(SerializationContext context, object value, IDictionary`2<string, Value> map);
}
internal class Google.Cloud.Firestore.Converters.DocumentReferenceConverter : ConverterBase {
    public virtual Value Serialize(SerializationContext context, object value);
    protected virtual object DeserializeReference(IDeserializationContext context, string value);
}
internal class Google.Cloud.Firestore.Converters.DoubleConverter : ConverterBase {
    public virtual Value Serialize(SerializationContext context, object value);
    protected virtual object DeserializeDouble(IDeserializationContext context, double value);
    protected virtual object DeserializeInteger(IDeserializationContext context, long value);
}
internal class Google.Cloud.Firestore.Converters.EnumConverter : ConverterBase {
    private TypeCode _typeCode;
    internal EnumConverter(Type targetType);
    protected virtual object DeserializeInteger(IDeserializationContext context, long value);
    public virtual Value Serialize(SerializationContext context, object value);
    private long EnumToInt64(object value);
    private object Int64ToEnumBaseType(long value);
}
internal class Google.Cloud.Firestore.Converters.GeoPointConverter : ConverterBase {
    public virtual Value Serialize(SerializationContext context, object value);
    protected virtual object DeserializeGeoPoint(IDeserializationContext context, LatLng value);
}
internal interface Google.Cloud.Firestore.Converters.IFirestoreInternalConverter {
    public abstract virtual object DeserializeValue(IDeserializationContext context, Value value);
    public abstract virtual object DeserializeMap(IDeserializationContext context, IDictionary`2<string, Value> values);
    public abstract virtual Value Serialize(SerializationContext context, object value);
    public abstract virtual void SerializeMap(SerializationContext context, object value, IDictionary`2<string, Value> map);
}
internal class Google.Cloud.Firestore.Converters.Int16Converter : IntegerConverterBase {
    public virtual Value Serialize(SerializationContext context, object value);
    protected virtual object DeserializeInteger(IDeserializationContext context, long value);
}
internal class Google.Cloud.Firestore.Converters.Int32Converter : IntegerConverterBase {
    public virtual Value Serialize(SerializationContext context, object value);
    protected virtual object DeserializeInteger(IDeserializationContext context, long value);
}
internal class Google.Cloud.Firestore.Converters.Int64Converter : IntegerConverterBase {
    public virtual Value Serialize(SerializationContext context, object value);
    protected virtual object DeserializeInteger(IDeserializationContext context, long value);
}
internal abstract class Google.Cloud.Firestore.Converters.IntegerConverterBase : ConverterBase {
    internal IntegerConverterBase(Type type);
    protected virtual object DeserializeDouble(IDeserializationContext context, double value);
}
internal class Google.Cloud.Firestore.Converters.LatLngConverter : ConverterBase {
    public virtual Value Serialize(SerializationContext context, object value);
    protected virtual object DeserializeGeoPoint(IDeserializationContext context, LatLng value);
}
internal class Google.Cloud.Firestore.Converters.ListConverter : ListConverterBase {
    private Type _elementType;
    internal ListConverter(Type targetType);
    protected virtual object DeserializeArray(IDeserializationContext context, RepeatedField`1<Value> values);
}
internal abstract class Google.Cloud.Firestore.Converters.ListConverterBase : ConverterBase {
    internal ListConverterBase(Type targetType);
    public virtual Value Serialize(SerializationContext context, object value);
}
internal abstract class Google.Cloud.Firestore.Converters.MapConverterBase : ConverterBase {
    internal MapConverterBase(Type targetType);
    public virtual Value Serialize(SerializationContext context, object value);
}
internal class Google.Cloud.Firestore.Converters.SByteConverter : IntegerConverterBase {
    public virtual Value Serialize(SerializationContext context, object value);
    protected virtual object DeserializeInteger(IDeserializationContext context, long value);
}
internal class Google.Cloud.Firestore.Converters.SentinelValueConverter : ConverterBase {
    public virtual Value Serialize(SerializationContext context, object value);
}
internal class Google.Cloud.Firestore.Converters.SequenceConverter : ListConverterBase {
    internal SequenceConverter(Type targetType);
    protected virtual object DeserializeArray(IDeserializationContext context, RepeatedField`1<Value> values);
}
internal class Google.Cloud.Firestore.Converters.SingleConverter : ConverterBase {
    public virtual Value Serialize(SerializationContext context, object value);
    protected virtual object DeserializeDouble(IDeserializationContext context, double value);
    protected virtual object DeserializeInteger(IDeserializationContext context, long value);
}
internal class Google.Cloud.Firestore.Converters.StringConverter : ConverterBase {
    public virtual Value Serialize(SerializationContext context, object value);
    protected virtual object DeserializeString(IDeserializationContext context, string value);
}
internal class Google.Cloud.Firestore.Converters.TimestampConverter : ConverterBase {
    public virtual Value Serialize(SerializationContext context, object value);
    protected virtual object DeserializeTimestamp(IDeserializationContext context, Timestamp value);
}
internal class Google.Cloud.Firestore.Converters.TimestampProtoConverter : ConverterBase {
    public virtual Value Serialize(SerializationContext context, object value);
    protected virtual object DeserializeTimestamp(IDeserializationContext context, Timestamp value);
}
internal class Google.Cloud.Firestore.Converters.UInt16Converter : IntegerConverterBase {
    public virtual Value Serialize(SerializationContext context, object value);
    protected virtual object DeserializeInteger(IDeserializationContext context, long value);
}
internal class Google.Cloud.Firestore.Converters.UInt32Converter : IntegerConverterBase {
    public virtual Value Serialize(SerializationContext context, object value);
    protected virtual object DeserializeInteger(IDeserializationContext context, long value);
}
internal class Google.Cloud.Firestore.Converters.UInt64Converter : IntegerConverterBase {
    public virtual Value Serialize(SerializationContext context, object value);
    protected virtual object DeserializeInteger(IDeserializationContext context, long value);
}
internal class Google.Cloud.Firestore.Converters.ValueConverter : ConverterBase {
    public virtual Value Serialize(SerializationContext context, object value);
    public virtual object DeserializeValue(IDeserializationContext context, Value value);
}
internal class Google.Cloud.Firestore.Converters.ValueTupleConverter : MapConverterBase {
    private static Type[] s_genericTupleTypes;
    private static Type[] s_accessorTypesByArity;
    private IList`1<string> _names;
    private Type[] _elementTypes;
    private Type _accessorType;
    private ValueTupleConverter(Type tupleType, IList`1<string> names);
    private static ValueTupleConverter();
    internal static ValueTupleConverter MaybeCreateConverter(PropertyInfo property);
    public virtual object DeserializeMap(IDeserializationContext context, IDictionary`2<string, Value> values);
    public virtual void SerializeMap(SerializationContext context, object value, IDictionary`2<string, Value> map);
    private ITupleAccessor CreateAccessor(object obj);
}
public class Google.Cloud.Firestore.DocumentChange : object {
    [CompilerGeneratedAttribute]
private DocumentSnapshot <Document>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <ChangeType>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <OldIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <NewIndex>k__BackingField;
    public DocumentSnapshot Document { get; }
    public Type ChangeType { get; }
    public Nullable`1<int> OldIndex { get; }
    public Nullable`1<int> NewIndex { get; }
    internal DocumentChange(DocumentSnapshot document, Type type, Nullable`1<int> oldIndex, Nullable`1<int> newIndex);
    [CompilerGeneratedAttribute]
public DocumentSnapshot get_Document();
    [CompilerGeneratedAttribute]
public Type get_ChangeType();
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_OldIndex();
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_NewIndex();
    public sealed virtual bool Equals(DocumentChange other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class Google.Cloud.Firestore.DocumentReference : object {
    [CompilerGeneratedAttribute]
private FirestoreDb <Database>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private CollectionReference <Parent>k__BackingField;
    public FirestoreDb Database { get; }
    public string Id { get; }
    public string Path { get; }
    public CollectionReference Parent { get; }
    internal DocumentReference(FirestoreDb database, CollectionReference parent, string id);
    [CompilerGeneratedAttribute]
public FirestoreDb get_Database();
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
public CollectionReference get_Parent();
    public CollectionReference Collection(string path);
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(DocumentReference other);
    public virtual string ToString();
    public sealed virtual int CompareTo(DocumentReference other);
    [AsyncStateMachineAttribute("Google.Cloud.Firestore.DocumentReference/<CreateAsync>d__19")]
public Task`1<WriteResult> CreateAsync(object documentData, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Google.Cloud.Firestore.DocumentReference/<DeleteAsync>d__20")]
public Task`1<WriteResult> DeleteAsync(Precondition precondition, CancellationToken cancellationToken);
    public Task`1<WriteResult> UpdateAsync(IDictionary`2<string, object> updates, Precondition precondition, CancellationToken cancellationToken);
    public Task`1<WriteResult> UpdateAsync(string field, object value, Precondition precondition, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Google.Cloud.Firestore.DocumentReference/<UpdateAsync>d__23")]
public Task`1<WriteResult> UpdateAsync(IDictionary`2<FieldPath, object> updates, Precondition precondition, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Google.Cloud.Firestore.DocumentReference/<SetAsync>d__24")]
public Task`1<WriteResult> SetAsync(object documentData, SetOptions options, CancellationToken cancellationToken);
    public Task`1<DocumentSnapshot> GetSnapshotAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Google.Cloud.Firestore.DocumentReference/<GetSnapshotAsync>d__26")]
internal Task`1<DocumentSnapshot> GetSnapshotAsync(ByteString transactionId, CancellationToken cancellationToken);
    public IAsyncEnumerable`1<CollectionReference> ListCollectionsAsync();
    public FirestoreChangeListener Listen(Func`3<DocumentSnapshot, CancellationToken, Task> callback, CancellationToken cancellationToken);
    public FirestoreChangeListener Listen(Action`1<DocumentSnapshot> callback, CancellationToken cancellationToken);
}
internal class Google.Cloud.Firestore.DocumentSet : object {
    private static ImmutableSortedDictionary`2<DocumentReference, DocumentSnapshot> _emptyKeyIndex;
    private ImmutableSortedDictionary`2<DocumentReference, DocumentSnapshot> _keyIndex;
    private ImmutableSortedSet`1<DocumentSnapshot> _sortedSet;
    internal int Count { get; }
    private DocumentSet(ImmutableSortedDictionary`2<DocumentReference, DocumentSnapshot> keyIndex, ImmutableSortedSet`1<DocumentSnapshot> sortedSet);
    private static DocumentSet();
    internal int get_Count();
    internal bool Contains(DocumentReference docRef);
    internal static DocumentSet Empty(IComparer`1<DocumentSnapshot> comparer);
    internal bool TryGetDocument(DocumentReference docRef, DocumentSnapshot& document);
    internal int IndexOf(DocumentReference docRef);
    internal DocumentSet WithDocumentAdded(DocumentSnapshot document);
    internal DocumentSet WithDocumentRemoved(DocumentReference docRef);
    public sealed virtual IEnumerator`1<DocumentSnapshot> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public class Google.Cloud.Firestore.DocumentSnapshot : object {
    [CompilerGeneratedAttribute]
private Document <Document>k__BackingField;
    [CompilerGeneratedAttribute]
private DocumentReference <Reference>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<Timestamp> <CreateTime>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<Timestamp> <UpdateTime>k__BackingField;
    [CompilerGeneratedAttribute]
private Timestamp <ReadTime>k__BackingField;
    internal Document Document { get; }
    public DocumentReference Reference { get; }
    private DocumentReference Google.Cloud.Firestore.IDeserializationContext.DocumentReference { get; }
    public FirestoreDb Database { get; }
    public string Id { get; }
    public bool Exists { get; }
    public Nullable`1<Timestamp> CreateTime { get; }
    public Nullable`1<Timestamp> UpdateTime { get; }
    public Timestamp ReadTime { get; }
    private DocumentSnapshot(FirestoreDb db, string resourceName, Document document, Timestamp readTime);
    [CompilerGeneratedAttribute]
internal Document get_Document();
    [CompilerGeneratedAttribute]
public DocumentReference get_Reference();
    private sealed virtual override DocumentReference Google.Cloud.Firestore.IDeserializationContext.get_DocumentReference();
    public sealed virtual FirestoreDb get_Database();
    public string get_Id();
    public bool get_Exists();
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<Timestamp> get_CreateTime();
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<Timestamp> get_UpdateTime();
    [CompilerGeneratedAttribute]
public sealed virtual Timestamp get_ReadTime();
    internal static DocumentSnapshot ForDocument(FirestoreDb db, Document document, Timestamp readTime);
    internal static DocumentSnapshot ForMissingDocument(FirestoreDb db, string name, Timestamp readTime);
    public Dictionary`2<string, object> ToDictionary();
    public T ConvertTo();
    public T GetValue(string path);
    public bool TryGetValue(string path, T& value);
    public T GetValue(FieldPath path);
    public bool TryGetValue(FieldPath path, T& value);
    public bool ContainsField(string path);
    public bool ContainsField(FieldPath path);
    internal Value ExtractValue(FieldPath path);
    public sealed virtual bool Equals(DocumentSnapshot other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class Google.Cloud.Firestore.FieldMask : object {
    private SortedSet`1<FieldPath> _fieldPaths;
    private FieldMask(IEnumerable`1<FieldPath> paths);
    public FieldMask(String[] paths);
    public FieldMask(FieldPath[] paths);
    private static IEnumerable`1<FieldPath> ConvertPaths(String[] paths);
    private static IEnumerable`1<FieldPath> CheckPaths(FieldPath[] paths);
    internal DocumentMask ToProto();
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(FieldMask other);
}
public class Google.Cloud.Firestore.FieldPath : object {
    private static Char[] s_dotSplit;
    private static Char[] s_prohibitedCharacters;
    [CompilerGeneratedAttribute]
private static FieldPath <DocumentId>k__BackingField;
    [CompilerGeneratedAttribute]
private static FieldPath <Empty>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Segments>k__BackingField;
    private string _encodedPath;
    public static FieldPath DocumentId { get; }
    internal static FieldPath Empty { get; }
    internal String[] Segments { get; }
    internal string EncodedPath { get; }
    private FieldPath(String[] segments, bool trusted);
    public FieldPath(String[] segments);
    private static FieldPath();
    [CompilerGeneratedAttribute]
public static FieldPath get_DocumentId();
    [CompilerGeneratedAttribute]
internal static FieldPath get_Empty();
    [CompilerGeneratedAttribute]
internal String[] get_Segments();
    internal string get_EncodedPath();
    internal static FieldPath FromDotSeparatedString(string path);
    internal FieldPath Append(string segment);
    private static string GetCanonicalPath(String[] fields);
    private static bool IsValidIdentifier(string identifier);
    public virtual string ToString();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public sealed virtual bool Equals(FieldPath other);
    public sealed virtual int CompareTo(FieldPath other);
    internal FieldReference ToFieldReference();
    internal bool IsPrefixOf(FieldPath path);
}
public static class Google.Cloud.Firestore.FieldValue : object {
    [CompilerGeneratedAttribute]
private static object <ServerTimestamp>k__BackingField;
    [CompilerGeneratedAttribute]
private static object <Delete>k__BackingField;
    public static object ServerTimestamp { get; }
    public static object Delete { get; }
    private static FieldValue();
    [CompilerGeneratedAttribute]
public static object get_ServerTimestamp();
    [CompilerGeneratedAttribute]
public static object get_Delete();
    public static object ArrayUnion(Object[] values);
    public static object ArrayRemove(Object[] values);
    public static object ArrayUnion(FirestoreDb database, Object[] values);
    public static object ArrayRemove(FirestoreDb database, Object[] values);
    public static object Increment(long amount);
    public static object Increment(double amount);
}
public abstract class Google.Cloud.Firestore.Filter : object {
    internal abstract virtual Filter ToProto(QueryRoot queryRoot);
    internal abstract virtual void ValidateForSentinels(SerializationContext context);
    public abstract virtual bool Equals(Filter other);
    private static IEnumerable ValidateWhereInValues(IEnumerable values);
    internal static void ValidateNoSentinelsRecursively(Value value, string message);
    internal static UnaryFilter GetOrderingFilter(CompositeFilter compositeFilter);
    public static Filter GreaterThan(string fieldPath, object value);
    public static Filter GreaterThan(FieldPath fieldPath, object value);
    public static Filter GreaterThanOrEqualTo(string fieldPath, object value);
    public static Filter GreaterThanOrEqualTo(FieldPath fieldPath, object value);
    public static Filter LessThan(string fieldPath, object value);
    public static Filter LessThan(FieldPath fieldPath, object value);
    public static Filter LessThanOrEqualTo(string fieldPath, object value);
    public static Filter LessThanOrEqualTo(FieldPath fieldPath, object value);
    public static Filter ArrayContains(string fieldPath, object value);
    public static Filter ArrayContains(FieldPath fieldPath, object value);
    public static Filter ArrayContainsAny(FieldPath fieldPath, IEnumerable values);
    public static Filter ArrayContainsAny(string fieldPath, IEnumerable values);
    public static Filter InArray(FieldPath fieldPath, IEnumerable values);
    public static Filter InArray(string fieldPath, IEnumerable values);
    public static Filter NotInArray(FieldPath fieldPath, IEnumerable values);
    public static Filter NotInArray(string fieldPath, IEnumerable values);
    public static Filter EqualTo(string fieldPath, object value);
    public static Filter EqualTo(FieldPath fieldPath, object value);
    public static Filter NotEqualTo(string fieldPath, object value);
    public static Filter NotEqualTo(FieldPath fieldPath, object value);
    public static Filter And(IEnumerable`1<Filter> filters);
    public static Filter And(Filter[] filters);
    public static Filter Or(IEnumerable`1<Filter> filters);
    public static Filter Or(Filter[] filters);
    [CompilerGeneratedAttribute]
internal static bool <GetOrderingFilter>g__IsOrderingFilter|7_0(UnaryFilter filter);
}
public class Google.Cloud.Firestore.FirestoreChangeListener : object {
    private WatchStream _stream;
    private int _stopped;
    [CompilerGeneratedAttribute]
private Task <ListenerTask>k__BackingField;
    public Task ListenerTask { get; }
    internal FirestoreChangeListener(WatchStream stream, Task task);
    [CompilerGeneratedAttribute]
public Task get_ListenerTask();
    internal static FirestoreChangeListener Start(WatchStream stream);
    public Task StopAsync(CancellationToken cancellationToken);
}
[AttributeUsageAttribute("5148")]
public class Google.Cloud.Firestore.FirestoreDataAttribute : Attribute {
    [CompilerGeneratedAttribute]
private UnknownPropertyHandling <UnknownPropertyHandling>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <ConverterType>k__BackingField;
    public UnknownPropertyHandling UnknownPropertyHandling { get; public set; }
    public Type ConverterType { get; public set; }
    public FirestoreDataAttribute(UnknownPropertyHandling unknownPropertyHandling);
    [CompilerGeneratedAttribute]
public UnknownPropertyHandling get_UnknownPropertyHandling();
    [CompilerGeneratedAttribute]
public void set_UnknownPropertyHandling(UnknownPropertyHandling value);
    [CompilerGeneratedAttribute]
public Type get_ConverterType();
    [CompilerGeneratedAttribute]
public void set_ConverterType(Type value);
}
public class Google.Cloud.Firestore.FirestoreDb : object {
    private static RetrySettings s_defaultBatchGetDocumentsRetrySettings;
    private static string DefaultDatabaseId;
    [CompilerGeneratedAttribute]
private FirestoreClient <Client>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProjectId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DatabaseId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RootPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DocumentsPath>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<string> <WarningLogger>k__BackingField;
    [CompilerGeneratedAttribute]
private SerializationContext <SerializationContext>k__BackingField;
    private RetrySettings _batchGetDocumentsRetrySettings;
    public FirestoreClient Client { get; }
    public string ProjectId { get; }
    public string DatabaseId { get; }
    internal string RootPath { get; }
    internal string DocumentsPath { get; }
    private Action`1<string> WarningLogger { get; }
    internal SerializationContext SerializationContext { get; }
    private FirestoreDb(string projectId, string databaseId, FirestoreClient client, Action`1<string> warningLogger, SerializationContext serializationContext, RetrySettings batchGetDocumentsRetrySettings);
    private static FirestoreDb();
    [CompilerGeneratedAttribute]
public FirestoreClient get_Client();
    [CompilerGeneratedAttribute]
public string get_ProjectId();
    [CompilerGeneratedAttribute]
public string get_DatabaseId();
    [CompilerGeneratedAttribute]
internal string get_RootPath();
    [CompilerGeneratedAttribute]
internal string get_DocumentsPath();
    [CompilerGeneratedAttribute]
private Action`1<string> get_WarningLogger();
    [CompilerGeneratedAttribute]
internal SerializationContext get_SerializationContext();
    public static FirestoreDb Create(string projectId, FirestoreClient client);
    [AsyncStateMachineAttribute("Google.Cloud.Firestore.FirestoreDb/<CreateAsync>d__26")]
public static Task`1<FirestoreDb> CreateAsync(string projectId, FirestoreClient client);
    internal static FirestoreDb Create(string projectId, string databaseId, FirestoreClient client, Action`1<string> warningLogger, ConverterRegistry converterRegistry, RetrySettings batchGetDocumentsRetrySettings);
    public FirestoreDb WithWarningLogger(Action`1<string> warningLogger);
    internal void LogWarning(string message);
    public CollectionReference Collection(string path);
    public DocumentReference Document(string path);
    public Query CollectionGroup(string collectionId);
    public WriteBatch StartBatch();
    internal DocumentReference GetDocumentReferenceFromResourceName(string referenceValue);
    public Task`1<IList`1<DocumentSnapshot>> GetAllSnapshotsAsync(IEnumerable`1<DocumentReference> documents, CancellationToken cancellationToken);
    public Task`1<IList`1<DocumentSnapshot>> GetAllSnapshotsAsync(IEnumerable`1<DocumentReference> documents, FieldMask fieldMask, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Google.Cloud.Firestore.FirestoreDb/<GetAllSnapshotsAsync>d__37")]
internal Task`1<IList`1<DocumentSnapshot>> GetAllSnapshotsAsync(IEnumerable`1<DocumentReference> documents, ByteString transactionId, FieldMask fieldMask, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Google.Cloud.Firestore.FirestoreDb/<GetDocumentSnapshotsAsync>d__38")]
internal Task`1<IList`1<DocumentSnapshot>> GetDocumentSnapshotsAsync(IEnumerable`1<DocumentReference> documents, ByteString transactionId, FieldMask fieldMask, CancellationToken cancellationToken);
    public IAsyncEnumerable`1<CollectionReference> ListRootCollectionsAsync();
    internal IAsyncEnumerable`1<CollectionReference> ListCollectionsAsync(DocumentReference parent);
    public Task RunTransactionAsync(Func`2<Transaction, Task> callback, TransactionOptions options, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Google.Cloud.Firestore.FirestoreDb/<RunTransactionAsync>d__42`1")]
public Task`1<T> RunTransactionAsync(Func`2<Transaction, Task`1<T>> callback, TransactionOptions options, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Google.Cloud.Firestore.FirestoreDb/<<GetDocumentSnapshotsAsync>b__38_0>d")]
[CompilerGeneratedAttribute]
private Task`1<List`1<DocumentSnapshot>> <GetDocumentSnapshotsAsync>b__38_0(BatchGetDocumentsRequest req, CallSettings settings);
    [CompilerGeneratedAttribute]
internal static string <GetDocumentSnapshotsAsync>g__ExtractPath|38_1(DocumentReference documentReference);
    [CompilerGeneratedAttribute]
internal static bool <RunTransactionAsync>g__CheckRetry|42_0(RpcException e, Boolean& rollback, <>c__DisplayClass42_0`1& );
}
public class Google.Cloud.Firestore.FirestoreDbBuilder : ClientBuilderBase`1<FirestoreDb> {
    private static string s_emulatorHostVariable;
    private static String[] s_emulatorEnvironmentVariables;
    private static CallSettings BearerOwnerSettings;
    private static FirestoreSettings s_defaultSettings;
    [CompilerGeneratedAttribute]
private FirestoreSettings <Settings>k__BackingField;
    [CompilerGeneratedAttribute]
private RetrySettings <BatchGetDocumentsRetrySettings>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProjectId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DatabaseId>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<string> <WarningLogger>k__BackingField;
    [CompilerGeneratedAttribute]
private ConverterRegistry <ConverterRegistry>k__BackingField;
    [CompilerGeneratedAttribute]
private FirestoreClient <Client>k__BackingField;
    public FirestoreSettings Settings { get; public set; }
    public RetrySettings BatchGetDocumentsRetrySettings { get; public set; }
    public string ProjectId { get; public set; }
    public string DatabaseId { get; public set; }
    public Action`1<string> WarningLogger { get; public set; }
    public ConverterRegistry ConverterRegistry { get; public set; }
    internal FirestoreClient Client { get; internal set; }
    public EmulatorDetection EmulatorDetection { get; public set; }
    private static FirestoreDbBuilder();
    [CompilerGeneratedAttribute]
public FirestoreSettings get_Settings();
    [CompilerGeneratedAttribute]
public void set_Settings(FirestoreSettings value);
    [CompilerGeneratedAttribute]
public RetrySettings get_BatchGetDocumentsRetrySettings();
    [CompilerGeneratedAttribute]
public void set_BatchGetDocumentsRetrySettings(RetrySettings value);
    [CompilerGeneratedAttribute]
public string get_ProjectId();
    [CompilerGeneratedAttribute]
public void set_ProjectId(string value);
    [CompilerGeneratedAttribute]
public string get_DatabaseId();
    [CompilerGeneratedAttribute]
public void set_DatabaseId(string value);
    [CompilerGeneratedAttribute]
public Action`1<string> get_WarningLogger();
    [CompilerGeneratedAttribute]
public void set_WarningLogger(Action`1<string> value);
    [CompilerGeneratedAttribute]
public ConverterRegistry get_ConverterRegistry();
    [CompilerGeneratedAttribute]
public void set_ConverterRegistry(ConverterRegistry value);
    [CompilerGeneratedAttribute]
internal FirestoreClient get_Client();
    [CompilerGeneratedAttribute]
internal void set_Client(FirestoreClient value);
    public EmulatorDetection get_EmulatorDetection();
    public void set_EmulatorDetection(EmulatorDetection value);
    public virtual FirestoreDb Build();
    [AsyncStateMachineAttribute("Google.Cloud.Firestore.FirestoreDbBuilder/<BuildAsync>d__37")]
public virtual Task`1<FirestoreDb> BuildAsync(CancellationToken cancellationToken);
    protected virtual ChannelPool GetChannelPool();
    private FirestoreDb BuildFromClient(string projectId, FirestoreClient client);
    private FirestoreSettings GetEffectiveSettings();
    private static FirestoreSettings AddGcclVersionHeader(FirestoreSettings settings);
    private FirestoreDbBuilder MaybeUseEmulator();
}
[AttributeUsageAttribute("64")]
public class Google.Cloud.Firestore.FirestoreDeserializationConfigurationAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <DocumentIdKey>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CreateTimestampKey>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UpdateTimestampKey>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ReadTimestampKey>k__BackingField;
    public string DocumentIdKey { get; public set; }
    public string CreateTimestampKey { get; public set; }
    public string UpdateTimestampKey { get; public set; }
    public string ReadTimestampKey { get; public set; }
    [CompilerGeneratedAttribute]
public string get_DocumentIdKey();
    [CompilerGeneratedAttribute]
public void set_DocumentIdKey(string value);
    [CompilerGeneratedAttribute]
public string get_CreateTimestampKey();
    [CompilerGeneratedAttribute]
public void set_CreateTimestampKey(string value);
    [CompilerGeneratedAttribute]
public string get_UpdateTimestampKey();
    [CompilerGeneratedAttribute]
public void set_UpdateTimestampKey(string value);
    [CompilerGeneratedAttribute]
public string get_ReadTimestampKey();
    [CompilerGeneratedAttribute]
public void set_ReadTimestampKey(string value);
    internal void ApplyContext(IDeserializationContext context, Dictionary`2<string, object> map);
}
[AttributeUsageAttribute("128")]
public class Google.Cloud.Firestore.FirestoreDocumentCreateTimestampAttribute : Attribute {
}
[AttributeUsageAttribute("128")]
public class Google.Cloud.Firestore.FirestoreDocumentIdAttribute : Attribute {
}
[AttributeUsageAttribute("128")]
public class Google.Cloud.Firestore.FirestoreDocumentReadTimestampAttribute : Attribute {
}
[AttributeUsageAttribute("128")]
public class Google.Cloud.Firestore.FirestoreDocumentUpdateTimestampAttribute : Attribute {
}
public class Google.Cloud.Firestore.FirestoreEnumNameConverter`1 : object {
    private static Dictionary`2<string, T> s_nameToValueMap;
    private static Dictionary`2<T, string> s_valueToNameMap;
    private static FirestoreEnumNameConverter`1();
    public sealed virtual T FromFirestore(object value);
    public sealed virtual object ToFirestore(T value);
}
[AttributeUsageAttribute("128")]
public class Google.Cloud.Firestore.FirestorePropertyAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <ConverterType>k__BackingField;
    public string Name { get; public set; }
    public Type ConverterType { get; public set; }
    public FirestorePropertyAttribute(string name);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public Type get_ConverterType();
    [CompilerGeneratedAttribute]
public void set_ConverterType(Type value);
}
public class Google.Cloud.Firestore.GeoPoint : ValueType {
    private double _latitude;
    private double _longitude;
    public double Latitude { get; }
    public double Longitude { get; }
    public GeoPoint(double latitude, double longitude);
    public double get_Latitude();
    public double get_Longitude();
    public LatLng ToProto();
    public static GeoPoint FromProto(LatLng proto);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public sealed virtual bool Equals(GeoPoint other);
    public static bool op_Equality(GeoPoint lhs, GeoPoint rhs);
    public static bool op_Inequality(GeoPoint lhs, GeoPoint rhs);
    public virtual string ToString();
}
internal interface Google.Cloud.Firestore.IDeserializationContext {
    public FirestoreDb Database { get; }
    public DocumentReference DocumentReference { get; }
    public Nullable`1<Timestamp> CreateTime { get; }
    public Nullable`1<Timestamp> UpdateTime { get; }
    public Timestamp ReadTime { get; }
    public abstract virtual FirestoreDb get_Database();
    public abstract virtual DocumentReference get_DocumentReference();
    public abstract virtual Nullable`1<Timestamp> get_CreateTime();
    public abstract virtual Nullable`1<Timestamp> get_UpdateTime();
    public abstract virtual Timestamp get_ReadTime();
}
public interface Google.Cloud.Firestore.IFirestoreConverter`1 {
    public abstract virtual object ToFirestore(T value);
    public abstract virtual T FromFirestore(object value);
}
internal interface Google.Cloud.Firestore.IWatchState {
    public ByteString ResumeToken { get; }
    public abstract virtual ByteString get_ResumeToken();
    public abstract virtual void OnStreamInitialization(StreamInitializationCause cause);
    public abstract virtual Task`1<WatchResponseResult> HandleResponseAsync(ListenResponse response, CancellationToken cancellationToken);
}
internal class Google.Cloud.Firestore.PathComparer : object {
    [CompilerGeneratedAttribute]
private static PathComparer <Instance>k__BackingField;
    internal static PathComparer Instance { get; }
    private static PathComparer();
    [CompilerGeneratedAttribute]
internal static PathComparer get_Instance();
    public sealed virtual int Compare(string left, string right);
}
internal static class Google.Cloud.Firestore.PathUtilities : object {
    private static string s_generationDomain;
    private static RandomNumberGenerator s_rng;
    private static Byte[] s_rngBuffer;
    private static Char[] s_slashSplit;
    private static PathUtilities();
    internal static String[] SplitPath(string path);
    internal static string ValidateId(string id, string paramName);
    internal static string GenerateId();
}
public class Google.Cloud.Firestore.Precondition : object {
    [CompilerGeneratedAttribute]
private static Precondition <None>k__BackingField;
    [CompilerGeneratedAttribute]
private static Precondition <MustExist>k__BackingField;
    [CompilerGeneratedAttribute]
private static Precondition <MustNotExist>k__BackingField;
    [CompilerGeneratedAttribute]
private Precondition <Proto>k__BackingField;
    public static Precondition None { get; }
    public static Precondition MustExist { get; }
    internal static Precondition MustNotExist { get; }
    public Nullable`1<Timestamp> LastUpdateTime { get; }
    public Nullable`1<bool> Exists { get; }
    internal Precondition Proto { get; }
    private Precondition(Precondition proto);
    private static Precondition();
    [CompilerGeneratedAttribute]
public static Precondition get_None();
    [CompilerGeneratedAttribute]
public static Precondition get_MustExist();
    [CompilerGeneratedAttribute]
internal static Precondition get_MustNotExist();
    public static Precondition LastUpdated(Timestamp timestamp);
    public Nullable`1<Timestamp> get_LastUpdateTime();
    public Nullable`1<bool> get_Exists();
    [CompilerGeneratedAttribute]
internal Precondition get_Proto();
    internal static Precondition FromProto(Precondition proto);
}
public class Google.Cloud.Firestore.Query : object {
    private int _offset;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Nullable`1<ValueTuple`2<int, LimitType>> _limit;
    private IReadOnlyList`1<InternalOrdering> _orderings;
    private CompositeFilter _filters;
    private IReadOnlyList`1<FieldPath> _projections;
    private Cursor _startAt;
    private Cursor _endAt;
    private QueryRoot _root;
    private bool IsLimitToLast { get; }
    public FirestoreDb Database { get; }
    internal string ParentPath { get; }
    private Query(QueryRoot root);
    private protected Query(FirestoreDb database, DocumentReference parent, string collectionId);
    private Query(QueryRoot root, int offset, Nullable`1<ValueTuple`2<int, LimitType>> limit, IReadOnlyList`1<InternalOrdering> orderings, CompositeFilter filter, IReadOnlyList`1<FieldPath> projections, Cursor startAt, Cursor endAt);
    private bool get_IsLimitToLast();
    public virtual FirestoreDb get_Database();
    internal string get_ParentPath();
    internal static Query ForCollectionGroup(FirestoreDb database, string collectionId);
    internal StructuredQuery ToStructuredQuery();
    public Query Select(String[] fieldPaths);
    public Query Select(FieldPath[] fieldPaths);
    public Query WhereEqualTo(string fieldPath, object value);
    public Query WhereEqualTo(FieldPath fieldPath, object value);
    public Query WhereNotEqualTo(string fieldPath, object value);
    public Query WhereNotEqualTo(FieldPath fieldPath, object value);
    public Query WhereLessThan(string fieldPath, object value);
    public Query WhereLessThan(FieldPath fieldPath, object value);
    public Query WhereLessThanOrEqualTo(string fieldPath, object value);
    public Query WhereLessThanOrEqualTo(FieldPath fieldPath, object value);
    public Query WhereGreaterThan(string fieldPath, object value);
    public Query WhereGreaterThan(FieldPath fieldPath, object value);
    public Query WhereGreaterThanOrEqualTo(string fieldPath, object value);
    public Query WhereGreaterThanOrEqualTo(FieldPath fieldPath, object value);
    public Query WhereArrayContains(string fieldPath, object value);
    public Query WhereArrayContains(FieldPath fieldPath, object value);
    public Query WhereArrayContainsAny(string fieldPath, IEnumerable values);
    public Query WhereArrayContainsAny(FieldPath fieldPath, IEnumerable values);
    public Query WhereIn(string fieldPath, IEnumerable values);
    public Query WhereIn(FieldPath fieldPath, IEnumerable values);
    public Query WhereNotIn(string fieldPath, IEnumerable values);
    public Query WhereNotIn(FieldPath fieldPath, IEnumerable values);
    public AggregateQuery Count();
    public AggregateQuery Aggregate(AggregateField aggregateField, AggregateField[] aggregateFields);
    public AggregateQuery Aggregate(IEnumerable`1<AggregateField> aggregateFields);
    public Query Where(Filter filter);
    public Query OrderBy(string fieldPath);
    public Query OrderByDescending(string fieldPath);
    public Query OrderBy(FieldPath fieldPath);
    public Query OrderByDescending(FieldPath fieldPath);
    private Query OrderBy(string fieldPath, Direction direction);
    private Query OrderBy(FieldPath fieldPath, Direction direction);
    public Query Limit(int limit);
    public Query LimitToLast(int limit);
    public Query Offset(int offset);
    public Query StartAt(Object[] fieldValues);
    public Query StartAfter(Object[] fieldValues);
    public Query EndBefore(Object[] fieldValues);
    public Query EndAt(Object[] fieldValues);
    public Query StartAt(DocumentSnapshot snapshot);
    public Query StartAfter(DocumentSnapshot snapshot);
    public Query EndBefore(DocumentSnapshot snapshot);
    public Query EndAt(DocumentSnapshot snapshot);
    public Task`1<QuerySnapshot> GetSnapshotAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Google.Cloud.Firestore.Query/<GetSnapshotAsync>d__63")]
internal Task`1<QuerySnapshot> GetSnapshotAsync(ByteString transactionId, CancellationToken cancellationToken);
    internal IComparer`1<DocumentSnapshot> CreateDocumentSnapshotComparer();
    public IAsyncEnumerable`1<DocumentSnapshot> StreamAsync(CancellationToken cancellationToken);
    internal IAsyncEnumerable`1<DocumentSnapshot> StreamAsync(ByteString transactionId, CancellationToken cancellationToken, bool allowLimitToLast);
    [AsyncIteratorStateMachineAttribute("Google.Cloud.Firestore.Query/<StreamResponsesAsync>d__67")]
private IAsyncEnumerable`1<RunQueryResponse> StreamResponsesAsync(ByteString transactionId, CancellationToken cancellationToken, bool allowLimitToLast);
    internal Query StartAt(Object[] fieldValues, bool before);
    internal Query EndAt(Object[] fieldValues, bool before);
    private Cursor CreateCursor(Object[] fieldValues, bool before);
    private Query StartAtSnapshot(DocumentSnapshot snapshot, bool before);
    private Query EndAtSnapshot(DocumentSnapshot snapshot, bool before);
    private Cursor CreateCursorFromSnapshot(DocumentSnapshot snapshot, bool before, IReadOnlyList`1& newOrderings);
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(Query other);
    public virtual int GetHashCode();
    public FirestoreChangeListener Listen(Func`3<QuerySnapshot, CancellationToken, Task> callback, CancellationToken cancellationToken);
    public FirestoreChangeListener Listen(Action`1<QuerySnapshot> callback, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
internal static Cursor <ToStructuredQuery>g__InvertCursor|18_0(Cursor cursor);
    [CompilerGeneratedAttribute]
private DocumentSnapshot <StreamAsync>b__66_1(RunQueryResponse resp);
    [CompilerGeneratedAttribute]
private bool <Equals>g__FiltersEqual|75_0(<>c__DisplayClass75_0& );
}
[DefaultMemberAttribute("Item")]
public class Google.Cloud.Firestore.QuerySnapshot : object {
    private Lazy`1<IReadOnlyList`1<DocumentSnapshot>> _lazyDocumentList;
    private Lazy`1<IReadOnlyList`1<DocumentChange>> _lazyChangeList;
    [CompilerGeneratedAttribute]
private Query <Query>k__BackingField;
    [CompilerGeneratedAttribute]
private Timestamp <ReadTime>k__BackingField;
    public Query Query { get; }
    public Timestamp ReadTime { get; }
    public IReadOnlyList`1<DocumentSnapshot> Documents { get; }
    public IReadOnlyList`1<DocumentChange> Changes { get; }
    public DocumentSnapshot Item { get; }
    public int Count { get; }
    private QuerySnapshot(Query query, Func`1<IReadOnlyList`1<DocumentSnapshot>> documentProvider, Func`1<IReadOnlyList`1<DocumentChange>> changesProvider, Timestamp readTime);
    internal static QuerySnapshot ForDocuments(Query query, IReadOnlyList`1<DocumentSnapshot> documents, Timestamp readTime);
    internal static QuerySnapshot ForChanges(Query query, IEnumerable`1<DocumentSnapshot> documentSet, IReadOnlyList`1<DocumentChange> changes, Timestamp readTime);
    [CompilerGeneratedAttribute]
public Query get_Query();
    [CompilerGeneratedAttribute]
public Timestamp get_ReadTime();
    public IReadOnlyList`1<DocumentSnapshot> get_Documents();
    public IReadOnlyList`1<DocumentChange> get_Changes();
    public sealed virtual DocumentSnapshot get_Item(int index);
    public sealed virtual int get_Count();
    public sealed virtual IEnumerator`1<DocumentSnapshot> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual bool Equals(QuerySnapshot other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
internal static class Google.Cloud.Firestore.RetryHelper : object {
    [AsyncStateMachineAttribute("Google.Cloud.Firestore.RetryHelper/<Retry>d__0`2")]
internal static Task`1<TResponse> Retry(RetrySettings retrySettings, Func`3<TRequest, CallSettings, Task`1<TResponse>> fn, TRequest request, CallSettings callSettings, IClock clock, IScheduler scheduler);
}
internal enum Google.Cloud.Firestore.SentinelKind : Enum {
    public int value__;
    [OriginalNameAttribute("SENTINEL_KIND_NONE")]
public static SentinelKind None;
    [OriginalNameAttribute("SERVER_TIMESTAMP")]
public static SentinelKind ServerTimestamp;
    [OriginalNameAttribute("DELETE")]
public static SentinelKind Delete;
    [OriginalNameAttribute("ARRAY_UNION")]
public static SentinelKind ArrayUnion;
    [OriginalNameAttribute("ARRAY_REMOVE")]
public static SentinelKind ArrayRemove;
    [OriginalNameAttribute("NUMERIC_INCREMENT")]
public static SentinelKind NumericIncrement;
}
internal static class Google.Cloud.Firestore.SentinelReflection : object {
    private static FileDescriptor descriptor;
    public static FileDescriptor Descriptor { get; }
    private static SentinelReflection();
    public static FileDescriptor get_Descriptor();
}
internal class Google.Cloud.Firestore.SentinelValue : object {
    private static NullValue ServerTimestampSentinelNullValue;
    private static NullValue DeleteSentinelNullValue;
    private Func`1<Value> _protoFactory;
    [CompilerGeneratedAttribute]
private static SentinelValue <ServerTimestamp>k__BackingField;
    [CompilerGeneratedAttribute]
private static SentinelValue <Delete>k__BackingField;
    [CompilerGeneratedAttribute]
private SentinelKind <Kind>k__BackingField;
    private static SentinelKind s_maxSentinelKind;
    internal static SentinelValue ServerTimestamp { get; }
    internal static SentinelValue Delete { get; }
    internal SentinelKind Kind { get; }
    private SentinelValue(SentinelKind kind, Func`1<Value> protoFactory);
    private SentinelValue(AugmentedValue augmentedValue);
    private static SentinelValue();
    [CompilerGeneratedAttribute]
internal static SentinelValue get_ServerTimestamp();
    [CompilerGeneratedAttribute]
internal static SentinelValue get_Delete();
    internal Value ToProtoValue();
    [CompilerGeneratedAttribute]
internal SentinelKind get_Kind();
    internal static SentinelKind GetKind(Value value);
    internal static SentinelValue FromPropertyAttributes(PropertyInfo property);
    internal static SentinelValue ForArrayValue(SerializationContext context, SentinelKind sentinelKind, Object[] values);
    internal static SentinelValue ForIncrement(Value value);
    private static bool FindNestedSentinels(Value value);
    internal static ArrayValue GetArrayValue(Value value);
    internal static Value GetIncrement(Value value);
    private static AugmentedValue ReserializeToAugmentedValue(Value value);
}
internal class Google.Cloud.Firestore.SerializationContext : object {
    [CompilerGeneratedAttribute]
private static SerializationContext <Default>k__BackingField;
    private IReadOnlyDictionary`2<Type, IFirestoreInternalConverter> _customConverters;
    internal static SerializationContext Default { get; }
    internal SerializationContext(ConverterRegistry converterRegistry);
    private static SerializationContext();
    [CompilerGeneratedAttribute]
internal static SerializationContext get_Default();
    internal IFirestoreInternalConverter GetConverter(Type targetType);
}
[AttributeUsageAttribute("128")]
public class Google.Cloud.Firestore.ServerTimestampAttribute : Attribute {
}
public class Google.Cloud.Firestore.SetOptions : object {
    [CompilerGeneratedAttribute]
private static SetOptions <Overwrite>k__BackingField;
    [CompilerGeneratedAttribute]
private static SetOptions <MergeAll>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Merge>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<FieldPath> <FieldMask>k__BackingField;
    public static SetOptions Overwrite { get; }
    public static SetOptions MergeAll { get; }
    public bool Merge { get; }
    public IReadOnlyList`1<FieldPath> FieldMask { get; }
    private SetOptions(bool merge, FieldPath[] fieldMask);
    private static SetOptions();
    [CompilerGeneratedAttribute]
public static SetOptions get_Overwrite();
    [CompilerGeneratedAttribute]
public static SetOptions get_MergeAll();
    public static SetOptions MergeFields(String[] fieldMask);
    public static SetOptions MergeFields(FieldPath[] fieldMask);
    [CompilerGeneratedAttribute]
public bool get_Merge();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<FieldPath> get_FieldMask();
}
internal enum Google.Cloud.Firestore.StreamInitializationCause : Enum {
    public int value__;
    public static StreamInitializationCause WatchStarting;
    public static StreamInitializationCause ResetRequested;
    public static StreamInitializationCause RpcError;
    public static StreamInitializationCause StreamCompleted;
}
public class Google.Cloud.Firestore.Timestamp : ValueType {
    private static DateTime s_unixEpoch;
    internal static long MinSeconds;
    internal static long MaxSeconds;
    private static long BclSecondsAtUnixEpoch;
    private static int NanosecondsPerTick;
    private long _seconds;
    private int _nanoseconds;
    internal Timestamp(long seconds, int nanoseconds);
    private static Timestamp();
    public DateTime ToDateTime();
    public DateTimeOffset ToDateTimeOffset();
    public static Timestamp FromDateTime(DateTime dateTime);
    public static Timestamp FromDateTimeOffset(DateTimeOffset dateTimeOffset);
    public static Timestamp GetCurrentTimestamp();
    public Timestamp ToProto();
    public static Timestamp FromProto(Timestamp proto);
    internal static Nullable`1<Timestamp> FromProtoOrNull(Timestamp proto);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public sealed virtual bool Equals(Timestamp other);
    public sealed virtual int CompareTo(Timestamp other);
    public sealed virtual int CompareTo(object obj);
    public static bool op_Equality(Timestamp lhs, Timestamp rhs);
    public static bool op_Inequality(Timestamp lhs, Timestamp rhs);
    public static bool op_LessThan(Timestamp lhs, Timestamp rhs);
    public static bool op_LessThanOrEqual(Timestamp lhs, Timestamp rhs);
    public static bool op_GreaterThan(Timestamp lhs, Timestamp rhs);
    public static bool op_GreaterThanOrEqual(Timestamp lhs, Timestamp rhs);
    public virtual string ToString();
}
public class Google.Cloud.Firestore.Transaction : object {
    [CompilerGeneratedAttribute]
private CancellationToken <CancellationToken>k__BackingField;
    [CompilerGeneratedAttribute]
private FirestoreDb <Database>k__BackingField;
    private WriteBatch _writes;
    [CompilerGeneratedAttribute]
private ByteString <TransactionId>k__BackingField;
    public CancellationToken CancellationToken { get; }
    public FirestoreDb Database { get; }
    internal ByteString TransactionId { get; }
    internal Transaction(FirestoreDb db, ByteString transactionId, CancellationToken overallCancellationToken);
    [CompilerGeneratedAttribute]
public CancellationToken get_CancellationToken();
    [CompilerGeneratedAttribute]
public FirestoreDb get_Database();
    [CompilerGeneratedAttribute]
internal ByteString get_TransactionId();
    [AsyncStateMachineAttribute("Google.Cloud.Firestore.Transaction/<BeginAsync>d__11")]
internal static Task`1<Transaction> BeginAsync(FirestoreDb db, ByteString previousTransactionId, CancellationToken cancellationToken);
    public Task`1<DocumentSnapshot> GetSnapshotAsync(DocumentReference documentReference, CancellationToken cancellationToken);
    public Task`1<IList`1<DocumentSnapshot>> GetAllSnapshotsAsync(IEnumerable`1<DocumentReference> documentReferences, CancellationToken cancellationToken);
    public Task`1<IList`1<DocumentSnapshot>> GetAllSnapshotsAsync(IEnumerable`1<DocumentReference> documentReferences, FieldMask fieldMask, CancellationToken cancellationToken);
    public Task`1<QuerySnapshot> GetSnapshotAsync(Query query, CancellationToken cancellationToken);
    public Task`1<AggregateQuerySnapshot> GetSnapshotAsync(AggregateQuery query, CancellationToken cancellationToken);
    public void Create(DocumentReference documentReference, object documentData);
    public void Set(DocumentReference documentReference, object documentData, SetOptions options);
    public void Update(DocumentReference documentReference, IDictionary`2<string, object> updates, Precondition precondition);
    public void Update(DocumentReference documentReference, string field, object value, Precondition precondition);
    public void Update(DocumentReference documentReference, IDictionary`2<FieldPath, object> updates, Precondition precondition);
    public void Delete(DocumentReference documentReference, Precondition precondition);
    internal Task CommitAsync();
    internal Task RollbackAsync();
}
public class Google.Cloud.Firestore.TransactionOptions : object {
    [CompilerGeneratedAttribute]
private static TransactionOptions <Default>k__BackingField;
    [CompilerGeneratedAttribute]
private RetrySettings <RetrySettings>k__BackingField;
    public static TransactionOptions Default { get; }
    public int MaxAttempts { get; }
    public RetrySettings RetrySettings { get; }
    private TransactionOptions(RetrySettings retrySettings);
    private static TransactionOptions();
    [CompilerGeneratedAttribute]
public static TransactionOptions get_Default();
    public int get_MaxAttempts();
    [CompilerGeneratedAttribute]
public RetrySettings get_RetrySettings();
    public static TransactionOptions ForMaxAttempts(int maxAttempts);
    public static TransactionOptions ForRetrySettings(RetrySettings retrySettings);
}
public enum Google.Cloud.Firestore.UnknownPropertyHandling : Enum {
    public int value__;
    public static UnknownPropertyHandling Ignore;
    public static UnknownPropertyHandling Warn;
    public static UnknownPropertyHandling Throw;
}
internal class Google.Cloud.Firestore.ValueComparer : object {
    [CompilerGeneratedAttribute]
private static ValueComparer <Instance>k__BackingField;
    private static Dictionary`2<ValueTypeOneofCase, TypeOrder> s_typeMap;
    internal static ValueComparer Instance { get; }
    private static ValueComparer();
    [CompilerGeneratedAttribute]
internal static ValueComparer get_Instance();
    private TypeOrder GetType(Value value);
    public sealed virtual int Compare(Value left, Value right);
    private int CompareStrings(Value left, Value right);
    private int CompareBlobs(Value left, Value right);
    private int CompareTimestamps(Value left, Value right);
    private int CompareGeoPoints(Value left, Value right);
    private int CompareResourcePaths(Value left, Value right);
    private int CompareArrays(Value left, Value right);
    private int CompareObjects(Value left, Value right);
    private int CompareNumbers(Value left, Value right);
    private int CompareDoubles(double left, double right);
}
internal static class Google.Cloud.Firestore.ValueDeserializer : object {
    internal static object Deserialize(IDeserializationContext context, Value value, Type targetType);
    internal static object DeserializeMap(IDeserializationContext context, IDictionary`2<string, Value> values, Type targetType);
    private static Type GetTargetType(Value value);
}
internal static class Google.Cloud.Firestore.ValueSerializer : object {
    internal static Value Serialize(SerializationContext context, object value);
    internal static Dictionary`2<string, Value> SerializeMap(SerializationContext context, object value);
}
internal enum Google.Cloud.Firestore.WatchResponseResult : Enum {
    public int value__;
    public static WatchResponseResult Continue;
    public static WatchResponseResult ResetStream;
    public static WatchResponseResult StreamHealthy;
}
internal class Google.Cloud.Firestore.WatchState : object {
    private Func`3<QuerySnapshot, CancellationToken, Task> _callback;
    private Query _query;
    private IComparer`1<DocumentSnapshot> _comparer;
    private IDictionary`2<DocumentReference, Document> _changeMap;
    private DocumentSet _documentSet;
    private bool _current;
    private bool _hasPushed;
    [CompilerGeneratedAttribute]
private ByteString <ResumeToken>k__BackingField;
    public ByteString ResumeToken { get; private set; }
    internal WatchState(Query query, Func`3<QuerySnapshot, CancellationToken, Task> callback);
    [CompilerGeneratedAttribute]
public sealed virtual ByteString get_ResumeToken();
    [CompilerGeneratedAttribute]
private void set_ResumeToken(ByteString value);
    public sealed virtual void OnStreamInitialization(StreamInitializationCause cause);
    [AsyncStateMachineAttribute("Google.Cloud.Firestore.WatchState/<HandleResponseAsync>d__13")]
public sealed virtual Task`1<WatchResponseResult> HandleResponseAsync(ListenResponse response, CancellationToken cancellationToken);
    private void ResetDocs();
    [AsyncStateMachineAttribute("Google.Cloud.Firestore.WatchState/<PushSnapshotAsync>d__15")]
private Task PushSnapshotAsync(Timestamp readTime, ByteString nextResumeToken, CancellationToken cancellationToken);
    private List`1<DocumentChange> ComputeSnapshot(Timestamp readTime);
    private DocumentChange DeleteDocument(DocumentSnapshot oldDocument);
    private DocumentChange AddDocument(DocumentSnapshot newDocument);
    private DocumentChange ModifyDocument(DocumentSnapshot newDocument);
    private ChangeSet ExtractChanges(Timestamp readTime);
    private DocumentReference CreateDocumentReference(string documentName);
}
internal class Google.Cloud.Firestore.WatchStream : object {
    private static HashSet`1<StatusCode> s_transientErrorStatusCodes;
    internal static int WatchTargetId;
    private IScheduler _scheduler;
    private FirestoreDb _db;
    private CancellationTokenSource _networkCancellationTokenSource;
    private CancellationTokenSource _callbackCancellationTokenSource;
    private IWatchState _state;
    private RetrySettings _backoffSettings;
    private Target _target;
    private CallSettings _listenCallSettings;
    private object _stateLock;
    private CancellationTokenRegistration _stopCancellationTokenRegistration;
    private bool _finished;
    internal WatchStream(IWatchState state, Target target, FirestoreDb db, CancellationToken cancellationToken);
    internal WatchStream(IScheduler scheduler, IWatchState state, Target target, FirestoreDb db, CancellationToken cancellationToken);
    private static WatchStream();
    [AsyncStateMachineAttribute("Google.Cloud.Firestore.WatchStream/<StartAsync>d__15")]
internal Task StartAsync();
    internal void Stop(CancellationToken userCancellationToken);
    internal static Target CreateTarget(DocumentReference doc);
    internal static Target CreateTarget(Query query);
    internal ListenRequest CreateRequest(ByteString resumeToken);
    [CompilerGeneratedAttribute]
private void <Stop>b__16_0();
}
public class Google.Cloud.Firestore.WriteBatch : object {
    private static IReadOnlyList`1<FieldPath> s_emptyFieldPathList;
    private FirestoreDb _db;
    [CompilerGeneratedAttribute]
private List`1<Write> <Writes>k__BackingField;
    internal bool IsEmpty { get; }
    internal List`1<Write> Writes { get; }
    internal WriteBatch(FirestoreDb firestoreDb);
    private static WriteBatch();
    internal bool get_IsEmpty();
    [CompilerGeneratedAttribute]
internal List`1<Write> get_Writes();
    public WriteBatch Create(DocumentReference documentReference, object documentData);
    public WriteBatch Delete(DocumentReference documentReference, Precondition precondition);
    public WriteBatch Update(DocumentReference documentReference, IDictionary`2<string, object> updates, Precondition precondition);
    public WriteBatch Update(DocumentReference documentReference, string field, object value, Precondition precondition);
    public WriteBatch Update(DocumentReference documentReference, IDictionary`2<FieldPath, object> updates, Precondition precondition);
    public WriteBatch Set(DocumentReference documentReference, object documentData, SetOptions options);
    public Task`1<IList`1<WriteResult>> CommitAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Google.Cloud.Firestore.WriteBatch/<CommitAsync>d__15")]
internal Task`1<IList`1<WriteResult>> CommitAsync(ByteString transactionId, CancellationToken cancellationToken);
    private void AddUpdateWrite(DocumentReference documentReference, IDictionary`2<string, Value> fields, IReadOnlyList`1<FieldPath> updatePaths, Precondition precondition, IList`1<SentinelField> sentinelFields);
    private static List`1<SentinelField> FindSentinels(IDictionary`2<string, Value> fields);
    private static bool RemoveSentinels(IDictionary`2<string, Value> fields, IEnumerable`1<SentinelField> sentinelFields);
    internal static IDictionary`2<string, Value> ExpandObject(IDictionary`2<FieldPath, Value> data);
    internal static Dictionary`2<FieldPath, Value> ApplyFieldMask(IDictionary`2<string, Value> fields, IEnumerable`1<FieldPath> fieldMask);
    internal static IReadOnlyList`1<FieldPath> ExtractDocumentMask(IDictionary`2<string, Value> fields);
    internal static void ValidateNoPrefixes(IEnumerable`1<FieldPath> paths);
    [CompilerGeneratedAttribute]
internal static void <FindSentinels>g__FindSentinelsRecursively|17_0(IDictionary`2<string, Value> currentFields, FieldPath currentParentPath, <>c__DisplayClass17_0& );
    [CompilerGeneratedAttribute]
internal static void <FindSentinels>g__ValidateNoSentinelValues|17_1(IEnumerable`1<Value> values);
    [CompilerGeneratedAttribute]
internal static bool <RemoveSentinels>g__RemoveSentinel|18_0(IDictionary`2<string, Value> currentFields, FieldPath path, int segmentIndex);
    [CompilerGeneratedAttribute]
internal static void <ApplyFieldMask>g__ApplyFieldMaskImpl|20_0(IDictionary`2<string, Value> currentFields, FieldPath parentPath, <>c__DisplayClass20_0& );
    [CompilerGeneratedAttribute]
internal static void <ExtractDocumentMask>g__AppendDocumentMask|21_0(IDictionary`2<string, Value> currentFields, FieldPath parentPath, <>c__DisplayClass21_0& );
}
public class Google.Cloud.Firestore.WriteResult : object {
    [CompilerGeneratedAttribute]
private Timestamp <UpdateTime>k__BackingField;
    public Timestamp UpdateTime { get; }
    private WriteResult(Timestamp updateTime);
    [CompilerGeneratedAttribute]
public Timestamp get_UpdateTime();
    internal static WriteResult FromProto(WriteResult result, Timestamp commitTime);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[ExtensionAttribute]
public static class Microsoft.Extensions.DependencyInjection.ServiceCollectionExtensions : object {
    [ExtensionAttribute]
public static IServiceCollection AddFirestoreDb(IServiceCollection services, Action`1<FirestoreDbBuilder> action);
    [ExtensionAttribute]
public static IServiceCollection AddFirestoreDb(IServiceCollection services, Action`2<IServiceProvider, FirestoreDbBuilder> action);
    [ExtensionAttribute]
public static IServiceCollection AddFirestoreDb(IServiceCollection services, string projectId);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.IsReadOnlyAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
