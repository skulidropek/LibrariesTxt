public class Google.Authenticator.Base32Encoding : object {
    public static Byte[] ToBytes(string input);
    public static string ToString(Byte[] input);
    private static int CharToValue(char c);
    private static char ValueToChar(byte b);
}
public enum Google.Authenticator.HashType : Enum {
    public int value__;
    public static HashType SHA1;
    public static HashType SHA256;
    public static HashType SHA512;
}
public class Google.Authenticator.QRException : Exception {
    public QRException(string message);
    public QRException(string message, Exception innerException);
}
public class Google.Authenticator.SetupCode : object {
    [CompilerGeneratedAttribute]
private string <Account>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ManualEntryKey>k__BackingField;
    [CompilerGeneratedAttribute]
private string <QrCodeSetupImageUrl>k__BackingField;
    public string Account { get; internal set; }
    public string ManualEntryKey { get; internal set; }
    public string QrCodeSetupImageUrl { get; internal set; }
    public SetupCode(string account, string manualEntryKey, string qrCodeSetupImageUrl);
    [CompilerGeneratedAttribute]
public string get_Account();
    [CompilerGeneratedAttribute]
internal void set_Account(string value);
    [CompilerGeneratedAttribute]
public string get_ManualEntryKey();
    [CompilerGeneratedAttribute]
internal void set_ManualEntryKey(string value);
    [CompilerGeneratedAttribute]
public string get_QrCodeSetupImageUrl();
    [CompilerGeneratedAttribute]
internal void set_QrCodeSetupImageUrl(string value);
}
public class Google.Authenticator.TwoFactorAuthenticator : object {
    private static DateTime _epoch;
    private TimeSpan DefaultClockDriftTolerance;
    private HashType HashType;
    private int timeStep;
    public TwoFactorAuthenticator(HashType hashType);
    public TwoFactorAuthenticator(int timeStep);
    public TwoFactorAuthenticator(HashType hashType, int timeStep);
    private static TwoFactorAuthenticator();
    public SetupCode GenerateSetupCode(string issuer, string accountTitleNoSpaces, string accountSecretKey, bool secretIsBase32, int qrPixelsPerModule);
    public SetupCode GenerateSetupCode(string issuer, string accountTitleNoSpaces, Byte[] accountSecretKey, int qrPixelsPerModule, bool generateQrCode);
    private static string GenerateQrCodeUrl(int qrPixelsPerModule, string provisionUrl);
    private static string RemoveWhitespace(string str);
    private string UrlEncode(string value);
    public string GeneratePINAtInterval(string accountSecretKey, long counter, int digits, bool secretIsBase32);
    public string GeneratePINAtInterval(Byte[] accountSecretKey, long counter, int digits);
    private string GenerateHashedCode(Byte[] key, long iterationNumber, int digits);
    private long GetCurrentCounter();
    private long GetCurrentCounter(DateTime now, DateTime epoch);
    public bool ValidateTwoFactorPIN(string accountSecretKey, string twoFactorCodeFromClient, bool secretIsBase32);
    public bool ValidateTwoFactorPIN(string accountSecretKey, string twoFactorCodeFromClient, TimeSpan timeTolerance, bool secretIsBase32);
    public bool ValidateTwoFactorPIN(Byte[] accountSecretKey, string twoFactorCodeFromClient);
    public bool ValidateTwoFactorPIN(Byte[] accountSecretKey, string twoFactorCodeFromClient, TimeSpan timeTolerance);
    public bool ValidateTwoFactorPIN(string accountSecretKey, string twoFactorCodeFromClient, int iterationOffset, bool secretIsBase32);
    public bool ValidateTwoFactorPIN(Byte[] accountSecretKey, string twoFactorCodeFromClient, int iterationOffset);
    public string GetCurrentPIN(string accountSecretKey, bool secretIsBase32);
    public string GetCurrentPIN(string accountSecretKey, DateTime now, bool secretIsBase32);
    public string GetCurrentPIN(Byte[] accountSecretKey);
    public string GetCurrentPIN(Byte[] accountSecretKey, DateTime now);
    public String[] GetCurrentPINs(string accountSecretKey, bool secretIsBase32);
    public String[] GetCurrentPINs(string accountSecretKey, TimeSpan timeTolerance, bool secretIsBase32);
    public String[] GetCurrentPINs(Byte[] accountSecretKey);
    public String[] GetCurrentPINs(Byte[] accountSecretKey, TimeSpan timeTolerance);
    public String[] GetCurrentPINs(Byte[] accountSecretKey, int iterationOffset);
    private static Byte[] ConvertSecretToBytes(string secret, bool secretIsBase32);
}
