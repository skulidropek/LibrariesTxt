public class GraphQL.Server.BasicGraphQLExecuter`1 : object {
    [CompilerGeneratedAttribute]
private TSchema <Schema>k__BackingField;
    private IDocumentExecuter _documentExecuter;
    private GraphQLOptions _options;
    public TSchema Schema { get; }
    public BasicGraphQLExecuter`1(TSchema schema, IDocumentExecuter documentExecuter, IOptions`1<GraphQLOptions> options);
    [CompilerGeneratedAttribute]
public sealed virtual TSchema get_Schema();
    [AsyncStateMachineAttribute("GraphQL.Server.BasicGraphQLExecuter`1/<ExecuteAsync>d__6")]
public virtual Task`1<ExecutionResult> ExecuteAsync(string operationName, string query, Inputs variables, IDictionary`2<string, object> context, IServiceProvider requestServices, CancellationToken cancellationToken);
    protected virtual ExecutionOptions GetOptions(string operationName, string query, Inputs variables, IDictionary`2<string, object> context, IServiceProvider requestServices, CancellationToken cancellationToken);
}
public class GraphQL.Server.DefaultErrorInfoProvider : ErrorInfoProvider {
    public DefaultErrorInfoProvider(IOptions`1<ErrorInfoProviderOptions> options);
}
[ObsoleteAttribute]
public class GraphQL.Server.DefaultGraphQLExecuter`1 : object {
    [CompilerGeneratedAttribute]
private TSchema <Schema>k__BackingField;
    private IDocumentExecuter _documentExecuter;
    private GraphQLOptions _options;
    private IEnumerable`1<IDocumentExecutionListener> _listeners;
    private IEnumerable`1<IValidationRule> _validationRules;
    public TSchema Schema { get; }
    public DefaultGraphQLExecuter`1(TSchema schema, IDocumentExecuter documentExecuter, IOptions`1<GraphQLOptions> options, IEnumerable`1<IDocumentExecutionListener> listeners, IEnumerable`1<IValidationRule> validationRules);
    [CompilerGeneratedAttribute]
public sealed virtual TSchema get_Schema();
    [AsyncStateMachineAttribute("GraphQL.Server.DefaultGraphQLExecuter`1/<ExecuteAsync>d__8")]
public virtual Task`1<ExecutionResult> ExecuteAsync(string operationName, string query, Inputs variables, IDictionary`2<string, object> context, IServiceProvider requestServices, CancellationToken cancellationToken);
    protected virtual ExecutionOptions GetOptions(string operationName, string query, Inputs variables, IDictionary`2<string, object> context, IServiceProvider requestServices, CancellationToken cancellationToken);
}
[ObsoleteAttribute]
internal class GraphQL.Server.GraphQLBuilder : object {
    [CompilerGeneratedAttribute]
private IServiceCollection <Services>k__BackingField;
    public IServiceCollection Services { get; }
    public GraphQLBuilder(IServiceCollection services);
    [CompilerGeneratedAttribute]
public sealed virtual IServiceCollection get_Services();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class GraphQL.Server.GraphQLBuilderCoreExtensions : object {
    [ExtensionAttribute]
public static IGraphQLBuilder AddServer(IGraphQLBuilder builder, bool installMetricsMiddleware, Action`1<GraphQLOptions> configureOptions);
    [ExtensionAttribute]
public static IGraphQLBuilder AddServer(IGraphQLBuilder builder, bool installMetricsMiddleware, Action`2<GraphQLOptions, IServiceProvider> configureOptions);
    [ExtensionAttribute]
[ObsoleteAttribute]
public static IGraphQLBuilder AddErrorInfoProvider(IGraphQLBuilder builder, Action`1<ErrorInfoProviderOptions> configureOptions);
    [ExtensionAttribute]
[ObsoleteAttribute]
public static IGraphQLBuilder AddErrorInfoProvider(IGraphQLBuilder builder, Action`1<ErrorInfoProviderOptions> configureOptions);
    [ExtensionAttribute]
[ObsoleteAttribute]
public static IGraphQLBuilder AddErrorInfoProvider(IGraphQLBuilder builder, Action`2<ErrorInfoProviderOptions, IServiceProvider> configureOptions);
    [ExtensionAttribute]
[ObsoleteAttribute]
public static IGraphQLBuilder AddErrorInfoProvider(IGraphQLBuilder builder, Action`2<ErrorInfoProviderOptions, IServiceProvider> configureOptions);
    [ExtensionAttribute]
[ObsoleteAttribute]
public static IGraphQLBuilder AddDataLoader(IGraphQLBuilder builder);
    [ExtensionAttribute]
[ObsoleteAttribute]
public static IGraphQLBuilder AddGraphTypes(IGraphQLBuilder builder, ServiceLifetime serviceLifetime);
    [ExtensionAttribute]
[ObsoleteAttribute]
public static IGraphQLBuilder AddGraphTypes(IGraphQLBuilder builder, Type typeFromAssembly, ServiceLifetime serviceLifetime);
    [ExtensionAttribute]
[ObsoleteAttribute]
public static IGraphQLBuilder AddGraphTypes(IGraphQLBuilder builder, Assembly assembly, ServiceLifetime serviceLifetime);
    [ExtensionAttribute]
[ObsoleteAttribute]
public static IGraphQLBuilder AddRelayGraphTypes(IGraphQLBuilder builder);
}
public class GraphQL.Server.GraphQLOptions : object {
    [CompilerGeneratedAttribute]
private ComplexityConfiguration <ComplexityConfiguration>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableMetrics>k__BackingField;
    public Action`1<UnhandledExceptionContext> UnhandledExceptionDelegate;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <MaxParallelExecutionCount>k__BackingField;
    public ComplexityConfiguration ComplexityConfiguration { get; public set; }
    public bool EnableMetrics { get; public set; }
    public Nullable`1<int> MaxParallelExecutionCount { get; public set; }
    [CompilerGeneratedAttribute]
public ComplexityConfiguration get_ComplexityConfiguration();
    [CompilerGeneratedAttribute]
public void set_ComplexityConfiguration(ComplexityConfiguration value);
    [CompilerGeneratedAttribute]
public bool get_EnableMetrics();
    [CompilerGeneratedAttribute]
public void set_EnableMetrics(bool value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_MaxParallelExecutionCount();
    [CompilerGeneratedAttribute]
public void set_MaxParallelExecutionCount(Nullable`1<int> value);
}
public class GraphQL.Server.GraphQLRequest : object {
    public static string OPERATION_NAME_KEY;
    public static string QUERY_KEY;
    public static string VARIABLES_KEY;
    public static string EXTENSIONS_KEY;
    [CompilerGeneratedAttribute]
private string <OperationName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Query>k__BackingField;
    [CompilerGeneratedAttribute]
private Inputs <Inputs>k__BackingField;
    [CompilerGeneratedAttribute]
private Inputs <Extensions>k__BackingField;
    public string OperationName { get; public set; }
    public string Query { get; public set; }
    public Inputs Inputs { get; public set; }
    public Inputs Extensions { get; public set; }
    [CompilerGeneratedAttribute]
public string get_OperationName();
    [CompilerGeneratedAttribute]
public void set_OperationName(string value);
    [CompilerGeneratedAttribute]
public string get_Query();
    [CompilerGeneratedAttribute]
public void set_Query(string value);
    [CompilerGeneratedAttribute]
public Inputs get_Inputs();
    [CompilerGeneratedAttribute]
public void set_Inputs(Inputs value);
    [CompilerGeneratedAttribute]
public Inputs get_Extensions();
    [CompilerGeneratedAttribute]
public void set_Extensions(Inputs value);
}
[ObsoleteAttribute]
public interface GraphQL.Server.IGraphQLBuilder {
    public IServiceCollection Services { get; }
    public abstract virtual IServiceCollection get_Services();
}
public interface GraphQL.Server.IGraphQLExecuter {
    public abstract virtual Task`1<ExecutionResult> ExecuteAsync(string operationName, string query, Inputs variables, IDictionary`2<string, object> context, IServiceProvider requestServices, CancellationToken cancellationToken);
}
public interface GraphQL.Server.IGraphQLExecuter`1 {
    public TSchema Schema { get; }
    public abstract virtual TSchema get_Schema();
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[ExtensionAttribute]
public static class Microsoft.Extensions.DependencyInjection.ServiceCollectionExtensions : object {
    [ExtensionAttribute]
[ObsoleteAttribute]
public static IGraphQLBuilder AddGraphQL(IServiceCollection services);
    [ExtensionAttribute]
[ObsoleteAttribute]
public static IGraphQLBuilder AddGraphQL(IServiceCollection services, Action`1<GraphQLOptions> configureOptions);
    [ExtensionAttribute]
[ObsoleteAttribute]
public static IGraphQLBuilder AddGraphQL(IServiceCollection services, Action`2<GraphQLOptions, IServiceProvider> configureOptions);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
