public interface GraphQL.Server.Transports.Subscriptions.Abstractions.IMessageTransport {
    public IReaderPipeline Reader { get; }
    public IWriterPipeline Writer { get; }
    public abstract virtual IReaderPipeline get_Reader();
    public abstract virtual IWriterPipeline get_Writer();
}
internal class GraphQL.Server.Transports.Subscriptions.Abstractions.Internal.ResultHelper : object {
    public static string GetErrorString(ExecutionResult result);
}
public interface GraphQL.Server.Transports.Subscriptions.Abstractions.IOperationMessageListener {
    public abstract virtual Task BeforeHandleAsync(MessageHandlingContext context);
    public abstract virtual Task HandleAsync(MessageHandlingContext context);
    public abstract virtual Task AfterHandleAsync(MessageHandlingContext context);
}
public interface GraphQL.Server.Transports.Subscriptions.Abstractions.IReaderPipeline {
    public Task Completion { get; }
    public abstract virtual Task get_Completion();
    public abstract virtual void LinkTo(ITargetBlock`1<OperationMessage> target);
    public abstract virtual Task Complete();
}
public interface GraphQL.Server.Transports.Subscriptions.Abstractions.IServerOperations {
    public IReaderPipeline TransportReader { get; }
    public IWriterPipeline TransportWriter { get; }
    public ISubscriptionManager Subscriptions { get; }
    public abstract virtual Task Terminate();
    public abstract virtual IReaderPipeline get_TransportReader();
    public abstract virtual IWriterPipeline get_TransportWriter();
    public abstract virtual ISubscriptionManager get_Subscriptions();
}
public interface GraphQL.Server.Transports.Subscriptions.Abstractions.ISubscriptionManager {
    public abstract virtual Task SubscribeOrExecuteAsync(string id, GraphQLRequest payload, MessageHandlingContext context);
    public abstract virtual Task UnsubscribeAsync(string id);
}
public interface GraphQL.Server.Transports.Subscriptions.Abstractions.IWriterPipeline {
    public Task Completion { get; }
    public abstract virtual Task get_Completion();
    public abstract virtual bool Post(OperationMessage message);
    public abstract virtual Task SendAsync(OperationMessage message);
    public abstract virtual Task Complete();
}
public class GraphQL.Server.Transports.Subscriptions.Abstractions.LogMessagesListener : object {
    private ILogger`1<LogMessagesListener> _logger;
    public LogMessagesListener(ILogger`1<LogMessagesListener> logger);
    public sealed virtual Task BeforeHandleAsync(MessageHandlingContext context);
    public sealed virtual Task HandleAsync(MessageHandlingContext context);
    public sealed virtual Task AfterHandleAsync(MessageHandlingContext context);
}
public class GraphQL.Server.Transports.Subscriptions.Abstractions.MessageHandlingContext : Dictionary`2<string, object> {
    private IServerOperations _server;
    [CompilerGeneratedAttribute]
private IReaderPipeline <Reader>k__BackingField;
    [CompilerGeneratedAttribute]
private IWriterPipeline <Writer>k__BackingField;
    [CompilerGeneratedAttribute]
private ISubscriptionManager <Subscriptions>k__BackingField;
    [CompilerGeneratedAttribute]
private OperationMessage <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private ConcurrentDictionary`2<string, object> <Properties>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Terminated>k__BackingField;
    public IReaderPipeline Reader { get; }
    public IWriterPipeline Writer { get; }
    public ISubscriptionManager Subscriptions { get; }
    public OperationMessage Message { get; }
    public ConcurrentDictionary`2<string, object> Properties { get; protected set; }
    public bool Terminated { get; public set; }
    public MessageHandlingContext(IServerOperations server, OperationMessage message);
    [CompilerGeneratedAttribute]
public IReaderPipeline get_Reader();
    [CompilerGeneratedAttribute]
public IWriterPipeline get_Writer();
    [CompilerGeneratedAttribute]
public ISubscriptionManager get_Subscriptions();
    [CompilerGeneratedAttribute]
public OperationMessage get_Message();
    [CompilerGeneratedAttribute]
public ConcurrentDictionary`2<string, object> get_Properties();
    [CompilerGeneratedAttribute]
protected void set_Properties(ConcurrentDictionary`2<string, object> value);
    [CompilerGeneratedAttribute]
public bool get_Terminated();
    [CompilerGeneratedAttribute]
public void set_Terminated(bool value);
    public sealed virtual void Dispose();
    public T Get(string key);
    public Task Terminate();
}
public class GraphQL.Server.Transports.Subscriptions.Abstractions.MessageType : object {
    public static string GQL_CONNECTION_INIT;
    public static string GQL_CONNECTION_ACK;
    public static string GQL_CONNECTION_ERROR;
    public static string GQL_CONNECTION_KEEP_ALIVE;
    public static string GQL_CONNECTION_TERMINATE;
    public static string GQL_START;
    public static string GQL_DATA;
    public static string GQL_ERROR;
    public static string GQL_COMPLETE;
    public static string GQL_STOP;
}
public class GraphQL.Server.Transports.Subscriptions.Abstractions.ProtocolMessageListener : object {
    private ILogger`1<ProtocolMessageListener> _logger;
    private IGraphQLSerializer _serializer;
    public ProtocolMessageListener(ILogger`1<ProtocolMessageListener> logger, IGraphQLSerializer serializer);
    public sealed virtual Task BeforeHandleAsync(MessageHandlingContext context);
    public sealed virtual Task HandleAsync(MessageHandlingContext context);
    public sealed virtual Task AfterHandleAsync(MessageHandlingContext context);
    private Task HandleUnknownAsync(MessageHandlingContext context);
    private Task HandleStopAsync(MessageHandlingContext context);
    private Task HandleStartAsync(MessageHandlingContext context);
    private Task HandleInitAsync(MessageHandlingContext context);
    private Task HandleTerminateAsync(MessageHandlingContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class GraphQL.Server.Transports.Subscriptions.Abstractions.Subscription : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Action`1<Subscription> _completed;
    private ILogger`1<Subscription> _logger;
    [NullableAttribute("2")]
private IWriterPipeline _writer;
    [NullableAttribute("2")]
private IDisposable _unsubscribe;
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private GraphQLRequest <OriginalPayload>k__BackingField;
    public string Id { get; }
    public GraphQLRequest OriginalPayload { get; }
    public Subscription(string id, GraphQLRequest payload, ExecutionResult result, IWriterPipeline writer, Action`1<Subscription> completed, ILogger`1<Subscription> logger);
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public GraphQLRequest get_OriginalPayload();
    public sealed virtual void OnCompleted();
    public sealed virtual void OnError(Exception error);
    public sealed virtual void OnNext(ExecutionResult value);
    public Task UnsubscribeAsync();
    private void Subscribe(ExecutionResult result);
    public virtual void Dispose();
}
[DefaultMemberAttribute("Item")]
public class GraphQL.Server.Transports.Subscriptions.Abstractions.SubscriptionManager : object {
    private IDocumentExecuter _executer;
    private ILogger`1<SubscriptionManager> _logger;
    private IServiceScopeFactory _serviceScopeFactory;
    private ILoggerFactory _loggerFactory;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) _disposed;
    private ConcurrentDictionary`2<string, Subscription> _subscriptions;
    public Subscription Item { get; }
    public SubscriptionManager(IDocumentExecuter executer, ILoggerFactory loggerFactory, IServiceScopeFactory serviceScopeFactory);
    public Subscription get_Item(string id);
    public sealed virtual IEnumerator`1<Subscription> GetEnumerator();
    [AsyncStateMachineAttribute("GraphQL.Server.Transports.Subscriptions.Abstractions.SubscriptionManager/<SubscribeOrExecuteAsync>d__10")]
public sealed virtual Task SubscribeOrExecuteAsync(string id, GraphQLRequest payload, MessageHandlingContext context);
    public sealed virtual Task UnsubscribeAsync(string id);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    [AsyncStateMachineAttribute("GraphQL.Server.Transports.Subscriptions.Abstractions.SubscriptionManager/<ExecuteAsync>d__13")]
private Task`1<Subscription> ExecuteAsync(string id, GraphQLRequest payload, MessageHandlingContext context);
    public virtual void Dispose();
}
public class GraphQL.Server.Transports.Subscriptions.Abstractions.SubscriptionServer : object {
    private ILogger`1<SubscriptionServer> _logger;
    private IEnumerable`1<IOperationMessageListener> _messageListeners;
    private ActionBlock`1<OperationMessage> _handler;
    [CompilerGeneratedAttribute]
private IMessageTransport <Transport>k__BackingField;
    [CompilerGeneratedAttribute]
private ISubscriptionManager <Subscriptions>k__BackingField;
    [CompilerGeneratedAttribute]
private IReaderPipeline <TransportReader>k__BackingField;
    [CompilerGeneratedAttribute]
private IWriterPipeline <TransportWriter>k__BackingField;
    public IMessageTransport Transport { get; }
    public ISubscriptionManager Subscriptions { get; }
    public IReaderPipeline TransportReader { get; public set; }
    public IWriterPipeline TransportWriter { get; public set; }
    public SubscriptionServer(IMessageTransport transport, ISubscriptionManager subscriptions, IEnumerable`1<IOperationMessageListener> messageListeners, ILogger`1<SubscriptionServer> logger);
    [CompilerGeneratedAttribute]
public IMessageTransport get_Transport();
    [CompilerGeneratedAttribute]
public sealed virtual ISubscriptionManager get_Subscriptions();
    [CompilerGeneratedAttribute]
public sealed virtual IReaderPipeline get_TransportReader();
    [CompilerGeneratedAttribute]
public void set_TransportReader(IReaderPipeline value);
    [CompilerGeneratedAttribute]
public sealed virtual IWriterPipeline get_TransportWriter();
    [CompilerGeneratedAttribute]
public void set_TransportWriter(IWriterPipeline value);
    [AsyncStateMachineAttribute("GraphQL.Server.Transports.Subscriptions.Abstractions.SubscriptionServer/<OnConnect>d__18")]
public Task OnConnect();
    public Task OnDisconnect();
    [AsyncStateMachineAttribute("GraphQL.Server.Transports.Subscriptions.Abstractions.SubscriptionServer/<Terminate>d__20")]
public sealed virtual Task Terminate();
    private void LogServerInformation();
    private void LinkToTransportReader();
    [AsyncStateMachineAttribute("GraphQL.Server.Transports.Subscriptions.Abstractions.SubscriptionServer/<HandleMessageAsync>d__23")]
private Task HandleMessageAsync(OperationMessage message);
    [AsyncStateMachineAttribute("GraphQL.Server.Transports.Subscriptions.Abstractions.SubscriptionServer/<OnBeforeHandleAsync>d__24")]
private Task OnBeforeHandleAsync(MessageHandlingContext context);
    private Task`1<MessageHandlingContext> BuildMessageHandlingContext(OperationMessage message);
    [AsyncStateMachineAttribute("GraphQL.Server.Transports.Subscriptions.Abstractions.SubscriptionServer/<OnHandleAsync>d__26")]
private Task OnHandleAsync(MessageHandlingContext context);
    [AsyncStateMachineAttribute("GraphQL.Server.Transports.Subscriptions.Abstractions.SubscriptionServer/<OnAfterHandleAsync>d__27")]
private Task OnAfterHandleAsync(MessageHandlingContext context);
    private void LinkToTransportWriter();
    public virtual void Dispose();
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
