[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("448")]
public class GraphQL.AllowAnonymousAttribute : GraphQLAttribute {
    public virtual void Modify(FieldConfig field);
    public virtual void Modify(FieldType fieldType, bool isInputType);
}
[AttributeUsageAttribute("64")]
internal class GraphQL.AllowedOnAttribute`1 : Attribute {
}
[AttributeUsageAttribute("64")]
internal class GraphQL.AllowedOnAttribute`2 : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class GraphQL.AssemblyExtensions : object {
    private static Type[] _typesToRegister;
    private static AssemblyExtensions();
    [ExtensionAttribute]
public static List`1<ValueTuple`2<Type, Type>> GetClrTypeMappings(Assembly assembly);
    [ExtensionAttribute]
internal static string GetNuGetVersion(Assembly assembly);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class GraphQL.AuthorizationExtensions : object {
    public static string POLICY_KEY;
    public static string ROLE_KEY;
    public static string AUTHORIZE_KEY;
    public static string ANONYMOUS_KEY;
    [ExtensionAttribute]
public static List`1<string> GetPolicies(IMetadataReader provider);
    [ExtensionAttribute]
public static List`1<string> GetRoles(IMetadataReader provider);
    [ExtensionAttribute]
public static bool IsAnonymousAllowed(IMetadataReader provider);
    [ExtensionAttribute]
public static TMetadataProvider AllowAnonymous(TMetadataProvider provider);
    [ExtensionAttribute]
public static bool IsAuthorizationRequired(IMetadataReader provider);
    [ExtensionAttribute]
public static TMetadataProvider Authorize(TMetadataProvider provider);
    [ExtensionAttribute]
public static TMetadataProvider AuthorizeWithPolicy(TMetadataProvider provider, string policy);
    [ExtensionAttribute]
public static TMetadataProvider AuthorizeWithRoles(TMetadataProvider provider, string roles);
    [ExtensionAttribute]
public static TMetadataProvider AuthorizeWithRoles(TMetadataProvider provider, String[] roles);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class GraphQL.AuthorizeAttribute : GraphQLAttribute {
    [CompilerGeneratedAttribute]
private string <Policy>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Roles>k__BackingField;
    public string Policy { get; public set; }
    public string Roles { get; public set; }
    [NullableContextAttribute("1")]
public AuthorizeAttribute(string policy);
    [CompilerGeneratedAttribute]
public string get_Policy();
    [CompilerGeneratedAttribute]
public void set_Policy(string value);
    [CompilerGeneratedAttribute]
public string get_Roles();
    [CompilerGeneratedAttribute]
public void set_Roles(string value);
    [NullableContextAttribute("1")]
public virtual void Modify(TypeConfig type);
    [NullableContextAttribute("1")]
public virtual void Modify(FieldConfig field);
    [NullableContextAttribute("1")]
public virtual void Modify(IGraphType graphType);
    [NullableContextAttribute("1")]
public virtual void Modify(FieldType fieldType, bool isInputType);
    [NullableContextAttribute("1")]
public virtual void Modify(QueryArgument queryArgument);
    [NullableContextAttribute("1")]
public virtual void Modify(EnumValueDefinition enumValueDefinition);
}
[FlagsAttribute]
public enum GraphQL.AutoRegisteringMode : Enum {
    public int value__;
    public static AutoRegisteringMode Input;
    public static AutoRegisteringMode Output;
    public static AutoRegisteringMode Both;
}
internal static class GraphQL.BigInt : object {
    public static bool TryParse(ReadOnlySpan`1<char> s, BigInteger& result);
    public static bool TryParse(ReadOnlySpan`1<char> s, NumberStyles style, IFormatProvider provider, BigInteger& result);
    public static BigInteger Parse(ReadOnlySpan`1<char> s);
    public static BigInteger Parse(ReadOnlySpan`1<char> s, NumberStyles style, IFormatProvider provider);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class GraphQL.BoolBox : object {
    public static object True;
    public static object False;
    private static BoolBox();
    [ExtensionAttribute]
public static object Boxed(bool value);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static object Boxed(Nullable`1<bool> value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class GraphQL.Builders.ConnectionBuilder : object {
    [ObsoleteAttribute("Please use the overload that accepts the mandatory name argument. This method will be removed in v9.")]
public static ConnectionBuilder`1<TSourceType> Create();
    public static ConnectionBuilder`1<TSourceType> Create(string name);
    [ObsoleteAttribute("Please use the overload that accepts the mandatory name argument. This method will be removed in v9.")]
public static ConnectionBuilder`1<TSourceType> Create();
    public static ConnectionBuilder`1<TSourceType> Create(string name);
    [ObsoleteAttribute("Please use the overload that accepts the mandatory name argument. This method will be removed in v9.")]
public static ConnectionBuilder`1<TSourceType> Create();
    public static ConnectionBuilder`1<TSourceType> Create(string name);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class GraphQL.Builders.ConnectionBuilder`1 : object {
    internal static string PAGE_SIZE_METADATA_KEY;
    [CompilerGeneratedAttribute]
private FieldType <FieldType>k__BackingField;
    private bool IsBidirectional { get; }
    private Nullable`1<int> PageSizeFromMetadata { get; private set; }
    public FieldType FieldType { get; protected set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Dictionary`2<string, object> GraphQL.Types.IProvideMetadata.Metadata { get; }
    private IMetadataReader GraphQL.Types.IMetadataWriter.MetadataReader { get; }
    protected ConnectionBuilder`1(FieldType fieldType);
    private bool get_IsBidirectional();
    private Nullable`1<int> get_PageSizeFromMetadata();
    private void set_PageSizeFromMetadata(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public FieldType get_FieldType();
    [CompilerGeneratedAttribute]
protected void set_FieldType(FieldType value);
    [ObsoleteAttribute("Please use the overload that accepts the mandatory name argument. This method will be removed in v9.")]
public static ConnectionBuilder`1<TSourceType> Create();
    public static ConnectionBuilder`1<TSourceType> Create(string name);
    [ObsoleteAttribute("Please use the overload that accepts the mandatory name argument. This method will be removed in v9.")]
public static ConnectionBuilder`1<TSourceType> Create();
    public static ConnectionBuilder`1<TSourceType> Create(string name);
    [ObsoleteAttribute("Please use the overload that accepts the mandatory name argument. This method will be removed in v9.")]
public static ConnectionBuilder`1<TSourceType> Create();
    public static ConnectionBuilder`1<TSourceType> Create(string name);
    public ConnectionBuilder`1<TSourceType> Bidirectional();
    [ObsoleteAttribute("Please configure the connection name by providing the name as an argument to the 'Connection' method.")]
public virtual ConnectionBuilder`1<TSourceType> Name(string name);
    public virtual ConnectionBuilder`1<TSourceType> Description(string description);
    public virtual ConnectionBuilder`1<TSourceType> DeprecationReason(string deprecationReason);
    public virtual ConnectionBuilder`1<TSourceType> PageSize(int pageSize);
    public virtual ConnectionBuilder`1<TSourceType> ReturnAll();
    [AllowedOnAttribute`2]
public virtual ConnectionBuilder`1<TSourceType> Argument(string name, Action`1<QueryArgument> configure);
    [AllowedOnAttribute`2]
public virtual ConnectionBuilder`1<TSourceType> Argument(string name, string description);
    [AllowedOnAttribute`2]
public virtual ConnectionBuilder`1<TSourceType> Argument(string name, string description, Action`1<QueryArgument> configure);
    [AllowedOnAttribute`2]
public virtual ConnectionBuilder`1<TSourceType> Argument(string name, string description, TArgumentType defaultValue);
    [AllowedOnAttribute`2]
public virtual ConnectionBuilder`1<TSourceType> Argument(string name, string description, TArgumentType defaultValue, Action`1<QueryArgument> configure);
    public virtual ConnectionBuilder`1<TSourceType> Configure(Action`1<FieldType> configure);
    public virtual ConnectionBuilder`1<TSourceType> Directive(string name);
    public virtual ConnectionBuilder`1<TSourceType> Directive(string name, string argumentName, object argumentValue);
    public virtual ConnectionBuilder`1<TSourceType> Directive(string name, Action`1<AppliedDirective> configure);
    public virtual ConnectionBuilder`2<TSourceType, TNewReturnType> Returns();
    [AllowedOnAttribute`1]
public virtual ConnectionBuilder`1<TSourceType> Resolve(Func`2<IResolveConnectionContext`1<TSourceType>, object> resolver);
    [AllowedOnAttribute`1]
public virtual ConnectionBuilder`1<TSourceType> ResolveAsync(Func`2<IResolveConnectionContext`1<TSourceType>, Task`1<object>> resolver);
    private static void CheckForErrors(IResolveConnectionContext`1<TSourceType> context);
    private sealed virtual override Dictionary`2<string, object> GraphQL.Types.IProvideMetadata.get_Metadata();
    private sealed virtual override IMetadataReader GraphQL.Types.IMetadataWriter.get_MetadataReader();
    private sealed virtual override TType GraphQL.Types.IProvideMetadata.GetMetadata(string key, TType defaultValue);
    private sealed virtual override TType GraphQL.Types.IProvideMetadata.GetMetadata(string key, Func`1<TType> defaultValueFactory);
    private sealed virtual override bool GraphQL.Types.IProvideMetadata.HasMetadata(string key);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class GraphQL.Builders.ConnectionBuilder`2 : object {
    [CompilerGeneratedAttribute]
private FieldType <FieldType>k__BackingField;
    private bool IsBidirectional { get; }
    private Nullable`1<int> PageSizeFromMetadata { get; private set; }
    public FieldType FieldType { get; protected set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Dictionary`2<string, object> GraphQL.Types.IProvideMetadata.Metadata { get; }
    private IMetadataReader GraphQL.Types.IMetadataWriter.MetadataReader { get; }
    protected internal ConnectionBuilder`2(FieldType fieldType);
    private bool get_IsBidirectional();
    private Nullable`1<int> get_PageSizeFromMetadata();
    private void set_PageSizeFromMetadata(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public FieldType get_FieldType();
    [CompilerGeneratedAttribute]
protected void set_FieldType(FieldType value);
    public static ConnectionBuilder`2<TSourceType, TReturnType> Create(string name);
    public static ConnectionBuilder`2<TSourceType, TReturnType> Create(string name);
    public static ConnectionBuilder`2<TSourceType, TReturnType> Create(string name);
    public virtual ConnectionBuilder`2<TSourceType, TReturnType> Bidirectional();
    [ObsoleteAttribute("Please configure the connection name by providing the name as an argument to the 'Connection' method. This method will be removed in v9.")]
public virtual ConnectionBuilder`2<TSourceType, TReturnType> Name(string name);
    public virtual ConnectionBuilder`2<TSourceType, TReturnType> Description(string description);
    public virtual ConnectionBuilder`2<TSourceType, TReturnType> DeprecationReason(string deprecationReason);
    public virtual ConnectionBuilder`2<TSourceType, TReturnType> PageSize(Nullable`1<int> pageSize);
    [AllowedOnAttribute`2]
public virtual ConnectionBuilder`2<TSourceType, TReturnType> Argument(string name, Action`1<QueryArgument> configure);
    [AllowedOnAttribute`2]
public virtual ConnectionBuilder`2<TSourceType, TReturnType> Argument(string name, string description, Action`1<QueryArgument> configure);
    [AllowedOnAttribute`2]
public virtual ConnectionBuilder`2<TSourceType, TReturnType> Argument(string name, string description, TArgumentType defaultValue, Action`1<QueryArgument> configure);
    public virtual ConnectionBuilder`2<TSourceType, TReturnType> Configure(Action`1<FieldType> configure);
    public virtual ConnectionBuilder`2<TSourceType, TReturnType> Directive(string name);
    public virtual ConnectionBuilder`2<TSourceType, TReturnType> Directive(string name, string argumentName, object argumentValue);
    public virtual ConnectionBuilder`2<TSourceType, TReturnType> Directive(string name, Action`1<AppliedDirective> configure);
    public virtual ConnectionBuilder`2<TSourceType, TNewReturnType> Returns();
    [AllowedOnAttribute`1]
public virtual ConnectionBuilder`2<TSourceType, TReturnType> Resolve(Func`2<IResolveConnectionContext`1<TSourceType>, TReturnType> resolver);
    [AllowedOnAttribute`1]
public virtual ConnectionBuilder`2<TSourceType, TReturnType> ResolveAsync(Func`2<IResolveConnectionContext`1<TSourceType>, Task`1<TReturnType>> resolver);
    private static void CheckForErrors(IResolveConnectionContext`1<TSourceType> context);
    private sealed virtual override Dictionary`2<string, object> GraphQL.Types.IProvideMetadata.get_Metadata();
    private sealed virtual override IMetadataReader GraphQL.Types.IMetadataWriter.get_MetadataReader();
    private sealed virtual override TType GraphQL.Types.IProvideMetadata.GetMetadata(string key, TType defaultValue);
    private sealed virtual override TType GraphQL.Types.IProvideMetadata.GetMetadata(string key, Func`1<TType> defaultValueFactory);
    private sealed virtual override bool GraphQL.Types.IProvideMetadata.HasMetadata(string key);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class GraphQL.Builders.FieldBuilder`2 : object {
    [CompilerGeneratedAttribute]
private FieldType <FieldType>k__BackingField;
    public FieldType FieldType { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Dictionary`2<string, object> GraphQL.Types.IProvideMetadata.Metadata { get; }
    private IMetadataReader GraphQL.Types.IMetadataWriter.MetadataReader { get; }
    protected FieldBuilder`2(FieldType fieldType);
    [CompilerGeneratedAttribute]
public FieldType get_FieldType();
    [ObsoleteAttribute("Please use the overload that accepts the name as the first argument. This method will be removed in v9.")]
public static FieldBuilder`2<TSourceType, TReturnType> Create(IGraphType type, string name);
    public static FieldBuilder`2<TSourceType, TReturnType> Create(string name, IGraphType type);
    [ObsoleteAttribute("Please use the overload that accepts the name as the first argument. This method will be removed in v9.")]
public static FieldBuilder`2<TSourceType, TReturnType> Create(Type type, string name);
    public static FieldBuilder`2<TSourceType, TReturnType> Create(string name, Type type);
    public virtual FieldBuilder`2<TSourceType, TReturnType> Type(IGraphType type);
    [ObsoleteAttribute("Please configure the field name by providing the name as an argument to the 'Field' method. This method will be removed in v9.")]
public virtual FieldBuilder`2<TSourceType, TReturnType> Name(string name);
    public virtual FieldBuilder`2<TSourceType, TReturnType> Description(string description);
    public virtual FieldBuilder`2<TSourceType, TReturnType> DeprecationReason(string deprecationReason);
    public virtual FieldBuilder`2<TSourceType, TReturnType> DefaultValue(TReturnType defaultValue);
    internal FieldBuilder`2<TSourceType, TReturnType> DefaultValue(object defaultValue);
    [AllowedOnAttribute`1]
public virtual FieldBuilder`2<TSourceType, TReturnType> ParseValue(Func`2<object, object> parseValue);
    [AllowedOnAttribute`1]
public virtual FieldBuilder`2<TSourceType, TReturnType> Validate(Action`1<object> validation);
    [AllowedOnAttribute`2]
public virtual FieldBuilder`2<TSourceType, TReturnType> ValidateArguments(Action`1<FieldArgumentsValidationContext> validation);
    [AllowedOnAttribute`2]
public virtual FieldBuilder`2<TSourceType, TReturnType> ValidateArguments(Func`2<FieldArgumentsValidationContext, ValueTask> validation);
    [AllowedOnAttribute`1]
public virtual FieldBuilder`2<TSourceType, TReturnType> Resolve(IFieldResolver resolver);
    [AllowedOnAttribute`1]
public virtual FieldBuilder`2<TSourceType, TReturnType> Resolve(Func`2<IResolveFieldContext`1<TSourceType>, TReturnType> resolve);
    [AllowedOnAttribute`1]
public virtual FieldBuilder`2<TSourceType, TReturnType> ResolveAsync(Func`2<IResolveFieldContext`1<TSourceType>, Task`1<TReturnType>> resolve);
    [AllowedOnAttribute`1]
public virtual FieldBuilder`2<TSourceType, TReturnType> ResolveDelegate(Delegate resolve);
    public virtual FieldBuilder`2<TSourceType, TNewReturnType> Returns();
    [AllowedOnAttribute`2]
public virtual FieldBuilder`2<TSourceType, TReturnType> Argument(string name, string description, Action`1<QueryArgument> configure);
    [ObsoleteAttribute("Please use Action<QueryArgument> parameter from other Argument() method overloads to set default value for parameter or use Arguments() method. This method will be removed in v9.")]
public virtual FieldBuilder`2<TSourceType, TReturnType> Argument(string name, string description, TArgumentType defaultValue, Action`1<QueryArgument> configure);
    [AllowedOnAttribute`2]
public virtual FieldBuilder`2<TSourceType, TReturnType> Argument(string name);
    [AllowedOnAttribute`2]
public virtual FieldBuilder`2<TSourceType, TReturnType> Argument(string name, Action`1<QueryArgument> configure);
    [AllowedOnAttribute`2]
public virtual FieldBuilder`2<TSourceType, TReturnType> Argument(string name, bool nullable, Action`1<QueryArgument> configure);
    [AllowedOnAttribute`2]
public virtual FieldBuilder`2<TSourceType, TReturnType> Argument(string name, bool nullable, string description, Action`1<QueryArgument> configure);
    [AllowedOnAttribute`2]
public virtual FieldBuilder`2<TSourceType, TReturnType> Argument(Type type, string name, Action`1<QueryArgument> configure);
    [AllowedOnAttribute`2]
public virtual FieldBuilder`2<TSourceType, TReturnType> Argument(IGraphType type, string name, Action`1<QueryArgument> configure);
    [AllowedOnAttribute`2]
public virtual FieldBuilder`2<TSourceType, TReturnType> Arguments(IEnumerable`1<QueryArgument> arguments);
    [AllowedOnAttribute`2]
public virtual FieldBuilder`2<TSourceType, TReturnType> Arguments(QueryArgument[] arguments);
    public virtual FieldBuilder`2<TSourceType, TReturnType> Configure(Action`1<FieldType> configure);
    [AllowedOnAttribute`1]
public virtual FieldBuilder`2<TSourceType, TReturnType> ResolveStream(Func`2<IResolveFieldContext`1<TSourceType>, IObservable`1<TReturnType>> sourceStreamResolver);
    [AllowedOnAttribute`1]
public virtual FieldBuilder`2<TSourceType, TReturnType> ResolveStreamAsync(Func`2<IResolveFieldContext`1<TSourceType>, Task`1<IObservable`1<TReturnType>>> sourceStreamResolver);
    [ObsoleteAttribute("Please use the ApplyDirective method. This method will be removed in v9.")]
public virtual FieldBuilder`2<TSourceType, TReturnType> Directive(string name);
    [ObsoleteAttribute("Please use the ApplyDirective method. This method will be removed in v9.")]
public virtual FieldBuilder`2<TSourceType, TReturnType> Directive(string name, string argumentName, object argumentValue);
    [ObsoleteAttribute("Please use the ApplyDirective method. This method will be removed in v9.")]
public virtual FieldBuilder`2<TSourceType, TReturnType> Directive(string name, string argument1Name, object argument1Value, string argument2Name, object argument2Value);
    [ObsoleteAttribute("Please use the ApplyDirective method. This method will be removed in v9.")]
public virtual FieldBuilder`2<TSourceType, TReturnType> Directive(string name, Action`1<AppliedDirective> configure);
    [ObsoleteAttribute("Please use the WithComplexityImpact method. This method will be removed in v9.")]
public virtual FieldBuilder`2<TSourceType, TReturnType> ComplexityImpact(double impact);
    private sealed virtual override Dictionary`2<string, object> GraphQL.Types.IProvideMetadata.get_Metadata();
    private sealed virtual override IMetadataReader GraphQL.Types.IMetadataWriter.get_MetadataReader();
    private sealed virtual override TType GraphQL.Types.IProvideMetadata.GetMetadata(string key, TType defaultValue);
    private sealed virtual override TType GraphQL.Types.IProvideMetadata.GetMetadata(string key, Func`1<TType> defaultValueFactory);
    private sealed virtual override bool GraphQL.Types.IProvideMetadata.HasMetadata(string key);
}
[NullableContextAttribute("2")]
public interface GraphQL.Builders.IResolveConnectionContext {
    public bool IsUnidirectional { get; }
    public Nullable`1<int> First { get; }
    public Nullable`1<int> Last { get; }
    public string After { get; }
    public string Before { get; }
    public Nullable`1<int> PageSize { get; }
    public abstract virtual bool get_IsUnidirectional();
    public abstract virtual Nullable`1<int> get_First();
    public abstract virtual Nullable`1<int> get_Last();
    public abstract virtual string get_After();
    public abstract virtual string get_Before();
    public abstract virtual Nullable`1<int> get_PageSize();
}
public interface GraphQL.Builders.IResolveConnectionContext`1 {
}
[NullableContextAttribute("2")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class GraphQL.Builders.ResolveConnectionContext`1 : ResolveFieldContext`1<T> {
    private Nullable`1<int> _defaultPageSize;
    [CompilerGeneratedAttribute]
private bool <IsUnidirectional>k__BackingField;
    public bool IsUnidirectional { get; private set; }
    public Nullable`1<int> First { get; }
    private Nullable`1<int> FirstInternal { get; }
    public Nullable`1<int> Last { get; }
    public string After { get; }
    public string Before { get; }
    public Nullable`1<int> PageSize { get; }
    [NullableContextAttribute("1")]
public ResolveConnectionContext`1(IResolveFieldContext context, bool isUnidirectional, Nullable`1<int> defaultPageSize);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsUnidirectional();
    [CompilerGeneratedAttribute]
private void set_IsUnidirectional(bool value);
    public sealed virtual Nullable`1<int> get_First();
    private Nullable`1<int> get_FirstInternal();
    public sealed virtual Nullable`1<int> get_Last();
    public sealed virtual string get_After();
    public sealed virtual string get_Before();
    public sealed virtual Nullable`1<int> get_PageSize();
}
internal static class GraphQL.Byte : object {
    public static bool TryParse(ReadOnlySpan`1<char> s, Byte& result);
    public static bool TryParse(ReadOnlySpan`1<char> s, NumberStyles style, IFormatProvider provider, Byte& result);
    public static byte Parse(ReadOnlySpan`1<char> s);
    public static byte Parse(ReadOnlySpan`1<char> s, NumberStyles style, IFormatProvider provider);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class GraphQL.ComplexityAnalayzerMetadataExtensions : object {
    private static string COMPLEXITY_IMPACT;
    private static string COMPLEXITY_IMPACT_FUNC;
    [ExtensionAttribute]
public static TMetadataProvider WithComplexityImpact(TMetadataProvider provider, double impact);
    [ExtensionAttribute]
public static TMetadataProvider WithComplexityImpact(TMetadataProvider provider, double fieldImpact, double childImpactMultiplier);
    [ExtensionAttribute]
public static TMetadataProvider WithComplexityImpact(TMetadataProvider provider, Func`2<FieldImpactContext, FieldComplexityResult> func);
    [ExtensionAttribute]
[ObsoleteAttribute("Please use GetComplexityImpactDelegate instead. This method will be removed in v9.")]
public static Nullable`1<double> GetComplexityImpact(IMetadataReader provider);
    [ExtensionAttribute]
public static Func`2<FieldImpactContext, FieldComplexityResult> GetComplexityImpactDelegate(FieldType provider);
    [ExtensionAttribute]
public static TSchema WithIntrospectionComplexityImpact(TSchema schema, double impact);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("448")]
public class GraphQL.ComplexityAttribute : GraphQLAttribute {
    [CompilerGeneratedAttribute]
private Nullable`1<double> <FieldImpact>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<double> <ChildImpactMultiplier>k__BackingField;
    [NullableAttribute("2")]
private Func`2<FieldImpactContext, FieldComplexityResult> _fieldComplexityAnalyzerDelegate;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private Type <FieldComplexityAnalyzer>k__BackingField;
    public Nullable`1<double> FieldImpact { get; }
    public Nullable`1<double> ChildImpactMultiplier { get; }
    [NullableAttribute("2")]
public Type FieldComplexityAnalyzer { get; }
    public ComplexityAttribute(double fieldImpact);
    public ComplexityAttribute(double fieldImpact, double childImpactMultiplier);
    public ComplexityAttribute(Type fieldComplexityAnalyzer);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_FieldImpact();
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_ChildImpactMultiplier();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public Type get_FieldComplexityAnalyzer();
    public virtual void Modify(FieldConfig field);
    public virtual void Modify(FieldType fieldType, bool isInputType);
    private void ModifyField(IFieldMetadataWriter field);
    [CompilerGeneratedAttribute]
private FieldComplexityResult <ModifyField>b__15_0(FieldImpactContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("448")]
public class GraphQL.ComplexityAttribute`1 : GraphQLAttribute {
    private Func`2<FieldImpactContext, FieldComplexityResult> _func;
    public virtual void Modify(FieldConfig field);
    public virtual void Modify(FieldType fieldType, bool isInputType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class GraphQL.ConfigureAutoSchema`1 : object {
    [CompilerGeneratedAttribute]
private IGraphQLBuilder <Builder>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <SchemaType>k__BackingField;
    public IGraphQLBuilder Builder { get; }
    public Type SchemaType { get; }
    public ConfigureAutoSchema`1(IGraphQLBuilder baseBuilder);
    [CompilerGeneratedAttribute]
public sealed virtual IGraphQLBuilder get_Builder();
    [CompilerGeneratedAttribute]
public sealed virtual Type get_SchemaType();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
internal class GraphQL.ConstrainedArray`1 : object {
    private T[] _array;
    [CompilerGeneratedAttribute]
private int <Count>k__BackingField;
    public T Item { get; public set; }
    [NullableAttribute("2")]
private object System.Collections.IList.Item { get; private set; }
    public int Count { get; }
    public bool IsSynchronized { get; }
    public object SyncRoot { get; }
    public bool IsReadOnly { get; }
    public bool IsFixedSize { get; }
    public ConstrainedArray`1(T[] array, int count);
    public sealed virtual T get_Item(int index);
    public sealed virtual void set_Item(int index, T value);
    [NullableContextAttribute("2")]
private sealed virtual override object System.Collections.IList.get_Item(int index);
    [NullableContextAttribute("2")]
private sealed virtual override void System.Collections.IList.set_Item(int index, object value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_Count();
    public sealed virtual bool get_IsSynchronized();
    public sealed virtual object get_SyncRoot();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual bool get_IsFixedSize();
    public sealed virtual int IndexOf(T item);
    [NullableContextAttribute("2")]
public sealed virtual int IndexOf(object value);
    public sealed virtual bool Contains(T item);
    [NullableContextAttribute("2")]
public sealed virtual bool Contains(object value);
    public sealed virtual void CopyTo(T[] array, int arrayIndex);
    public sealed virtual void CopyTo(Array array, int index);
    public sealed virtual IEnumerator`1<T> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual void Clear();
    [NullableContextAttribute("2")]
public sealed virtual void Insert(int index, object value);
    public sealed virtual bool Remove(T item);
    [NullableContextAttribute("2")]
public sealed virtual void Remove(object value);
    public sealed virtual void RemoveAt(int index);
    public sealed virtual void Insert(int index, T item);
    public sealed virtual void Add(T item);
    [NullableContextAttribute("2")]
public sealed virtual int Add(object value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class GraphQL.Conversion.ArrayListConverterFactory : object {
    [CompilerGeneratedAttribute]
private static ArrayListConverterFactory <Instance>k__BackingField;
    public static ArrayListConverterFactory Instance { get; }
    private static ArrayListConverterFactory();
    [CompilerGeneratedAttribute]
public static ArrayListConverterFactory get_Instance();
    public sealed virtual IListConverter Create(Type listType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class GraphQL.Conversion.CamelCaseNameConverter : object {
    public static CamelCaseNameConverter Instance;
    private static CamelCaseNameConverter();
    public sealed virtual string NameForField(string fieldName, IComplexGraphType parentGraphType);
    public sealed virtual string NameForArgument(string argumentName, IComplexGraphType parentGraphType, FieldType field);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class GraphQL.Conversion.CustomListConverterFactory : object {
    private static MethodInfo _castMethodInfo;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private Type <_implementationType>k__BackingField;
    [CompilerGeneratedAttribute]
private static CustomListConverterFactory <DefaultInstance>k__BackingField;
    [NullableAttribute("2")]
private Type _implementationType { get; }
    public static CustomListConverterFactory DefaultInstance { get; }
    private static CustomListConverterFactory();
    public CustomListConverterFactory(Type implementationType);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private Type get__implementationType();
    [CompilerGeneratedAttribute]
public static CustomListConverterFactory get_DefaultInstance();
    public sealed virtual IListConverter Create(Type listType);
    private static MethodInfo GetAddMethod(Type listType, Type elementType);
    private static Func`2<Object[], object> CreateReflectionBasedLambda(Type listType, object elementDefault);
    private static Func`2<Object[], object> CreateLambdaViaConstructor(Type elementType, ConstructorInfo constructor);
    private static Func`2<Object[], object> CreateLambdaViaAdd(ConstructorInfo parameterlessCtor, MethodInfo addMethod);
    [IteratorStateMachineAttribute("GraphQL.Conversion.CustomListConverterFactory/<CastOrDefault>d__15`1")]
private static IEnumerable`1<T> CastOrDefault(Object[] source);
}
internal class GraphQL.Conversion.DefaultListConverterFactory : ListConverterFactoryBase {
    [NullableAttribute("1")]
public static DefaultListConverterFactory Instance;
    private static DefaultListConverterFactory();
    [NullableContextAttribute("2")]
public virtual Func`2<Object[], object> Create();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class GraphQL.Conversion.DefaultNameConverter : object {
    public static DefaultNameConverter Instance;
    private static DefaultNameConverter();
    public sealed virtual string NameForField(string fieldName, IComplexGraphType parentGraphType);
    public sealed virtual string NameForArgument(string argumentName, IComplexGraphType parentGraphType, FieldType field);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class GraphQL.Conversion.DelegateListConverter`2 : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Func`2<Object[], object> _converter;
    [CompilerGeneratedAttribute]
private Type <ElementType>k__BackingField;
    public Type ElementType { get; }
    public DelegateListConverter`2(Func`2<IEnumerable`1<TElementType>, TListType> converter);
    [CompilerGeneratedAttribute]
public sealed virtual Type get_ElementType();
    public sealed virtual object Convert(Object[] list);
    public sealed virtual IListConverter Create(Type listType);
    [IteratorStateMachineAttribute("GraphQL.Conversion.DelegateListConverter`2/<CastOrDefault>d__7`1")]
private static IEnumerable`1<T> CastOrDefault(Object[] source);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class GraphQL.Conversion.HashSetListConverterFactory : ListConverterFactoryBase {
    [CompilerGeneratedAttribute]
private static HashSetListConverterFactory <Instance>k__BackingField;
    public static HashSetListConverterFactory Instance { get; }
    private static HashSetListConverterFactory();
    [CompilerGeneratedAttribute]
public static HashSetListConverterFactory get_Instance();
    [NullableContextAttribute("2")]
public virtual Func`2<Object[], object> Create();
}
[NullableContextAttribute("1")]
public interface GraphQL.Conversion.IListConverter {
    public Type ElementType { get; }
    public abstract virtual Type get_ElementType();
    public abstract virtual object Convert(Object[] list);
}
[NullableContextAttribute("1")]
public interface GraphQL.Conversion.IListConverterFactory {
    public abstract virtual IListConverter Create(Type listType);
}
[NullableContextAttribute("1")]
public interface GraphQL.Conversion.INameConverter {
    public abstract virtual string NameForField(string fieldName, IComplexGraphType parentGraphType);
    public abstract virtual string NameForArgument(string argumentName, IComplexGraphType parentGraphType, FieldType field);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class GraphQL.Conversion.ListConverter : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Func`2<Object[], object> _converter;
    [CompilerGeneratedAttribute]
private Type <ElementType>k__BackingField;
    public Type ElementType { get; }
    public ListConverter(Type elementType, Func`2<Object[], object> converter);
    [CompilerGeneratedAttribute]
public sealed virtual Type get_ElementType();
    public sealed virtual object Convert(Object[] list);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class GraphQL.Conversion.ListConverterFactoryBase : object {
    private MethodInfo _convertMethodInfo;
    public virtual IListConverter Create(Type listType);
    protected virtual Type GetElementType(Type listType);
    [NullableContextAttribute("2")]
public abstract virtual Func`2<Object[], object> Create();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class GraphQL.Conversion.PascalCaseNameConverter : object {
    public static PascalCaseNameConverter Instance;
    private static PascalCaseNameConverter();
    public sealed virtual string NameForField(string fieldName, IComplexGraphType parentGraphType);
    public sealed virtual string NameForArgument(string argumentName, IComplexGraphType parentGraphType, FieldType field);
}
public interface GraphQL.DataLoader.IDataLoaderResult {
    public abstract virtual Task`1<object> GetResultAsync(CancellationToken cancellationToken);
}
public interface GraphQL.DataLoader.IDataLoaderResult`1 {
    [NullableContextAttribute("1")]
public abstract virtual Task`1<T> GetResultAsync(CancellationToken cancellationToken);
}
internal static class GraphQL.Decimal : object {
    public static bool TryParse(ReadOnlySpan`1<char> s, Decimal& result);
    public static bool TryParse(ReadOnlySpan`1<char> s, NumberStyles style, IFormatProvider provider, Decimal& result);
    public static decimal Parse(ReadOnlySpan`1<char> s);
    public static decimal Parse(ReadOnlySpan`1<char> s, NumberStyles style, IFormatProvider provider);
}
[IsReadOnlyAttribute]
internal class GraphQL.DecimalData : ValueType {
    public UInt32 Flags;
    public UInt32 Hi;
    public UInt32 Lo;
    public UInt32 Mid;
    internal DecimalData(UInt32 flags, UInt32 hi, UInt32 lo, UInt32 mid);
    internal bool Equals(DecimalData& other);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("2432")]
public class GraphQL.DefaultAstValueAttribute : GraphQLAttribute {
    private GraphQLValue _value;
    private static ParserOptions _options;
    public DefaultAstValueAttribute(string astValue);
    private static DefaultAstValueAttribute();
    public virtual void Modify(FieldType fieldType, bool isInputType);
    public virtual void Modify(QueryArgument queryArgument);
    public virtual void Modify(FieldConfig field);
}
public class GraphQL.DefaultServiceProvider : object {
    [NullableContextAttribute("1")]
public sealed virtual object GetService(Type serviceType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class GraphQL.DI.ConfigureExecution : object {
    private Func`3<ExecutionOptions, ExecutionDelegate, Task`1<ExecutionResult>> _action;
    public float SortOrder { get; }
    public ConfigureExecution(Func`3<ExecutionOptions, ExecutionDelegate, Task`1<ExecutionResult>> action);
    public sealed virtual Task`1<ExecutionResult> ExecuteAsync(ExecutionOptions options, ExecutionDelegate next);
    public sealed virtual float get_SortOrder();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class GraphQL.DI.ConfigureExecutionOptions : object {
    private Func`2<ExecutionOptions, Task> _action;
    public float SortOrder { get; }
    public ConfigureExecutionOptions(Func`2<ExecutionOptions, Task> action);
    public ConfigureExecutionOptions(Action`1<ExecutionOptions> action);
    public sealed virtual Task`1<ExecutionResult> ExecuteAsync(ExecutionOptions options, ExecutionDelegate next);
    public sealed virtual float get_SortOrder();
    [AsyncStateMachineAttribute("GraphQL.DI.ConfigureExecutionOptions/<<ExecuteAsync>g__Continuer|3_0>d")]
[CompilerGeneratedAttribute]
internal static Task`1<ExecutionResult> <ExecuteAsync>g__Continuer|3_0(Task task, ExecutionOptions options, ExecutionDelegate next);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class GraphQL.DI.ConfigureSchema : object {
    private Action`2<ISchema, IServiceProvider> _action;
    public ConfigureSchema(Action`2<ISchema, IServiceProvider> action);
    public sealed virtual void Configure(ISchema schema, IServiceProvider serviceProvider);
}
public class GraphQL.DI.ExecutionDelegate : MulticastDelegate {
    public ExecutionDelegate(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual Task`1<ExecutionResult> Invoke(ExecutionOptions options);
    public virtual IAsyncResult BeginInvoke(ExecutionOptions options, AsyncCallback callback, object object);
    public virtual Task`1<ExecutionResult> EndInvoke(IAsyncResult result);
}
public abstract class GraphQL.DI.GraphQLBuilderBase : object {
    [NullableAttribute("1")]
public IServiceRegister Services { get; }
    protected virtual void RegisterDefaultServices();
    [NullableContextAttribute("1")]
public abstract virtual IServiceRegister get_Services();
}
[NullableContextAttribute("1")]
public interface GraphQL.DI.IConfigureExecution {
    public float SortOrder { get; }
    public abstract virtual Task`1<ExecutionResult> ExecuteAsync(ExecutionOptions options, ExecutionDelegate next);
    public abstract virtual float get_SortOrder();
}
[NullableContextAttribute("1")]
public interface GraphQL.DI.IConfigureSchema {
    public abstract virtual void Configure(ISchema schema, IServiceProvider serviceProvider);
}
[NullableContextAttribute("1")]
public interface GraphQL.DI.IGraphQLBuilder {
    public IServiceRegister Services { get; }
    public abstract virtual IServiceRegister get_Services();
}
[NullableContextAttribute("1")]
public interface GraphQL.DI.IServiceRegister {
    public abstract virtual IServiceRegister Register(Type serviceType, Type implementationType, ServiceLifetime serviceLifetime, bool replace);
    public abstract virtual IServiceRegister Register(Type serviceType, Func`2<IServiceProvider, object> implementationFactory, ServiceLifetime serviceLifetime, bool replace);
    public abstract virtual IServiceRegister Register(Type serviceType, object implementationInstance, bool replace);
    public abstract virtual IServiceRegister TryRegister(Type serviceType, Type implementationType, ServiceLifetime serviceLifetime, RegistrationCompareMode mode);
    public abstract virtual IServiceRegister TryRegister(Type serviceType, Func`2<IServiceProvider, object> implementationFactory, ServiceLifetime serviceLifetime, RegistrationCompareMode mode);
    public abstract virtual IServiceRegister TryRegister(Type serviceType, object implementationInstance, RegistrationCompareMode mode);
    public abstract virtual IServiceRegister Configure(Action`2<TOptions, IServiceProvider> action);
}
public enum GraphQL.DI.RegistrationCompareMode : Enum {
    public int value__;
    public static RegistrationCompareMode ServiceType;
    public static RegistrationCompareMode ServiceTypeAndImplementationType;
}
public enum GraphQL.DI.ServiceLifetime : Enum {
    public int value__;
    public static ServiceLifetime Singleton;
    public static ServiceLifetime Scoped;
    public static ServiceLifetime Transient;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class GraphQL.DIExtensions : object {
    [ExtensionAttribute]
public static IServiceProvider RequestServicesOrThrow(ExecutionOptions options);
    [ExtensionAttribute]
public static IServiceProvider RequestServicesOrThrow(IExecutionContext context);
    [ExtensionAttribute]
public static IServiceProvider RequestServicesOrThrow(ValidationContext context);
    [ExtensionAttribute]
internal static IServiceProvider RequestServicesOrThrow(IResolveFieldContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("3548")]
public class GraphQL.DirectiveAttribute : GraphQLAttribute {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Dictionary`2<string, object> Arguments;
    public string Name { get; }
    public DirectiveAttribute(string name);
    public DirectiveAttribute(string name, string argumentName, object argumentValue);
    public DirectiveAttribute(string name, string argumentName1, object argumentValue1, string argumentName2, object argumentValue2);
    public DirectiveAttribute(string name, string argumentName1, object argumentValue1, string argumentName2, object argumentValue2, string argumentName3, object argumentValue3);
    public DirectiveAttribute(string name, Object[] argsAndValues);
    [CompilerGeneratedAttribute]
public string get_Name();
    public virtual void Modify(TypeConfig type);
    public virtual void Modify(FieldConfig field);
    public virtual void Modify(EnumValueDefinition enumValueDefinition);
    public virtual void Modify(IGraphType graphType);
    public virtual void Modify(FieldType fieldType, bool isInputType);
    public virtual void Modify(QueryArgument queryArgument);
    private void ApplyDirectives(AppliedDirective directive);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class GraphQL.DirectivesExtensions : object {
    private static string DIRECTIVES_KEY;
    [ExtensionAttribute]
public static bool HasAppliedDirectives(IMetadataReader provider);
    [ExtensionAttribute]
public static AppliedDirectives GetAppliedDirectives(IMetadataReader provider);
    [ExtensionAttribute]
public static AppliedDirective FindAppliedDirective(IMetadataReader provider, string name);
    [ExtensionAttribute]
public static TMetadataProvider ApplyDirective(TMetadataProvider provider, string name);
    [ExtensionAttribute]
public static TMetadataProvider ApplyDirective(TMetadataProvider provider, string name, string argumentName, object argumentValue);
    [ExtensionAttribute]
public static TMetadataProvider ApplyDirective(TMetadataProvider provider, string name, string argument1Name, object argument1Value, string argument2Name, object argument2Value);
    [ExtensionAttribute]
public static TMetadataProvider ApplyDirective(TMetadataProvider provider, string name, Action`1<AppliedDirective> configure);
    [ExtensionAttribute]
public static TMetadataProvider RemoveAppliedDirective(TMetadataProvider provider, string name);
    [ExtensionAttribute]
internal static string GetDeprecationReason(IMetadataReader provider);
    [ExtensionAttribute]
internal static void SetDeprecationReason(IMetadataWriter provider, string reason);
    [ExtensionAttribute]
internal static void AddAppliedDirectivesField(ComplexGraphType`1<TSourceType> type, string element);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class GraphQL.DocumentExecuter : object {
    private IDocumentBuilder _documentBuilder;
    private IDocumentValidator _documentValidator;
    private ExecutionDelegate _execution;
    private IExecutionStrategySelector _executionStrategySelector;
    public DocumentExecuter(IDocumentBuilder documentBuilder, IDocumentValidator documentValidator);
    public DocumentExecuter(IDocumentBuilder documentBuilder, IDocumentValidator documentValidator, IExecutionStrategySelector executionStrategySelector, IEnumerable`1<IConfigureExecution> configurations);
    private ExecutionDelegate BuildExecutionDelegate(IEnumerable`1<IConfigureExecution> configurations);
    public virtual Task`1<ExecutionResult> ExecuteAsync(ExecutionOptions options);
    [AsyncStateMachineAttribute("GraphQL.DocumentExecuter/<CoreExecuteAsync>d__9")]
private Task`1<ExecutionResult> CoreExecuteAsync(ExecutionOptions options);
    protected virtual ExecutionContext BuildExecutionContext(ExecutionOptions options, GraphQLDocument document, GraphQLOperationDefinition operation, IValidationResult validationResult, Metrics metrics);
    protected virtual GraphQLOperationDefinition GetOperation(string operationName, GraphQLDocument document);
    protected virtual IExecutionStrategy SelectExecutionStrategy(ExecutionContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class GraphQL.DocumentExecuter`1 : object {
    private IDocumentExecuter _documentExecuter;
    public DocumentExecuter`1(IDocumentExecuter documentExecuter);
    public sealed virtual Task`1<ExecutionResult> ExecuteAsync(ExecutionOptions options);
}
[ExtensionAttribute]
public static class GraphQL.DocumentExecuterExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static Task`1<ExecutionResult> ExecuteAsync(IDocumentExecuter executer, Action`1<ExecutionOptions> configure);
}
[AttributeUsageAttribute("4")]
public class GraphQL.DoNotMapClrTypeAttribute : Attribute {
}
[AttributeUsageAttribute("4")]
public class GraphQL.DoNotRegisterAttribute : Attribute {
}
internal static class GraphQL.Double : object {
    public static bool TryParse(ReadOnlySpan`1<char> s, Double& result);
    public static bool TryParse(ReadOnlySpan`1<char> s, NumberStyles style, IFormatProvider provider, Double& result);
    public static double Parse(ReadOnlySpan`1<char> s);
    public static double Parse(ReadOnlySpan`1<char> s, NumberStyles style, IFormatProvider provider);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class GraphQL.EmptyExecutionErrors : ExecutionErrors {
    public static EmptyExecutionErrors Instance;
    private static EmptyExecutionErrors();
    public virtual void Add(ExecutionError error);
    public virtual void AddRange(IEnumerable`1<ExecutionError> errors);
}
[ExtensionAttribute]
internal static class GraphQL.EnumerableExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static bool FastAll(IEnumerable`1<T> source, Func`2<T, bool> predicate);
}
public enum GraphQL.Execution.ArgumentSource : Enum {
    public int value__;
    public static ArgumentSource FieldDefault;
    public static ArgumentSource Literal;
    public static ArgumentSource Variable;
    public static ArgumentSource VariableDefault;
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class GraphQL.Execution.ArgumentValue : ValueType {
    [CompilerGeneratedAttribute]
private object <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private ArgumentSource <Source>k__BackingField;
    public static ArgumentValue NullLiteral { get; }
    public static ArgumentValue NullVariable { get; }
    public object Value { get; }
    public ArgumentSource Source { get; }
    public ArgumentValue(object value, ArgumentSource source);
    public static ArgumentValue get_NullLiteral();
    public static ArgumentValue get_NullVariable();
    [CompilerGeneratedAttribute]
public object get_Value();
    [CompilerGeneratedAttribute]
public ArgumentSource get_Source();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class GraphQL.Execution.ArrayExecutionNode : ExecutionNode {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private List`1<ExecutionNode> <Items>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable <SerializedResult>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public List`1<ExecutionNode> Items { get; public set; }
    public IEnumerable SerializedResult { get; public set; }
    [NullableContextAttribute("1")]
public ArrayExecutionNode(ExecutionNode parent, IGraphType graphType, GraphQLField field, FieldType fieldDefinition, Nullable`1<int> indexInParentNode);
    [CompilerGeneratedAttribute]
public List`1<ExecutionNode> get_Items();
    [CompilerGeneratedAttribute]
public void set_Items(List`1<ExecutionNode> value);
    [CompilerGeneratedAttribute]
public IEnumerable get_SerializedResult();
    [CompilerGeneratedAttribute]
public void set_SerializedResult(IEnumerable value);
    public virtual object ToValue();
    public virtual bool PropagateNull();
    [NullableContextAttribute("1")]
private sealed virtual override IEnumerable`1<ExecutionNode> GraphQL.Execution.IParentExecutionNode.GetChildNodes();
    [NullableContextAttribute("1")]
public sealed virtual void ApplyToChildren(Action`2<ExecutionNode, TState> action, TState state, bool reverse);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class GraphQL.Execution.DefaultExecutionStrategySelector : object {
    private ExecutionStrategyRegistration[] _registrations;
    public DefaultExecutionStrategySelector(IEnumerable`1<ExecutionStrategyRegistration> registrations);
    public virtual IExecutionStrategy Select(ExecutionContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class GraphQL.Execution.DirectiveInfo : object {
    [CompilerGeneratedAttribute]
private Directive <Directive>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, ArgumentValue> <Arguments>k__BackingField;
    public Directive Directive { get; }
    public IDictionary`2<string, ArgumentValue> Arguments { get; }
    public DirectiveInfo(Directive directive, IDictionary`2<string, ArgumentValue> arguments);
    [CompilerGeneratedAttribute]
public Directive get_Directive();
    [CompilerGeneratedAttribute]
public IDictionary`2<string, ArgumentValue> get_Arguments();
    public TType GetArgument(string name, TType defaultValue);
    public object GetArgument(Type argumentType, string name, object defaultValue);
    private bool TryGetArgument(Type argumentType, string name, Object& result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class GraphQL.Execution.DocumentError : ExecutionError {
    public DocumentError(string message);
    public DocumentError(string message, Exception innerException);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class GraphQL.Execution.DocumentExecutionListenerBase : object {
    public virtual Task AfterValidationAsync(IExecutionContext context, IValidationResult validationResult);
    public virtual Task BeforeExecutionAsync(IExecutionContext context);
    public virtual Task AfterExecutionAsync(IExecutionContext context);
}
public class GraphQL.Execution.ErrorInfo : ValueType {
    [NullableAttribute("1")]
public string Message;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IDictionary`2<string, object> Extensions;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class GraphQL.Execution.ErrorInfoProvider : object {
    private static ConcurrentDictionary`2<Type, string> _exceptionErrorCodes;
    private ErrorInfoProviderOptions _options;
    public ErrorInfoProvider(ErrorInfoProviderOptions options);
    public ErrorInfoProvider(Action`1<ErrorInfoProviderOptions> optionsBuilder);
    private static ErrorInfoProvider();
    public virtual ErrorInfo GetInfo(ExecutionError executionError);
    [IteratorStateMachineAttribute("GraphQL.Execution.ErrorInfoProvider/<GetCodesForError>d__6")]
protected virtual IEnumerable`1<string> GetCodesForError(ExecutionError executionError);
    public static string GetErrorCode(Type exceptionType);
    public static string GetErrorCode();
    public static string GetErrorCode(Exception exception);
    private static string NormalizeErrorCode(Type exceptionType);
}
public class GraphQL.Execution.ErrorInfoProviderOptions : object {
    [CompilerGeneratedAttribute]
private bool <ExposeExceptionDetails>k__BackingField;
    [CompilerGeneratedAttribute]
private ExposeExceptionDetailsMode <ExposeExceptionDetailsMode>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ExposeExtensions>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ExposeCode>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ExposeCodes>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ExposeData>k__BackingField;
    public bool ExposeExceptionDetails { get; public set; }
    public ExposeExceptionDetailsMode ExposeExceptionDetailsMode { get; public set; }
    public bool ExposeExtensions { get; public set; }
    public bool ExposeCode { get; public set; }
    public bool ExposeCodes { get; public set; }
    public bool ExposeData { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_ExposeExceptionDetails();
    [CompilerGeneratedAttribute]
public void set_ExposeExceptionDetails(bool value);
    [CompilerGeneratedAttribute]
public ExposeExceptionDetailsMode get_ExposeExceptionDetailsMode();
    [CompilerGeneratedAttribute]
public void set_ExposeExceptionDetailsMode(ExposeExceptionDetailsMode value);
    [CompilerGeneratedAttribute]
public bool get_ExposeExtensions();
    [CompilerGeneratedAttribute]
public void set_ExposeExtensions(bool value);
    [CompilerGeneratedAttribute]
public bool get_ExposeCode();
    [CompilerGeneratedAttribute]
public void set_ExposeCode(bool value);
    [CompilerGeneratedAttribute]
public bool get_ExposeCodes();
    [CompilerGeneratedAttribute]
public void set_ExposeCodes(bool value);
    [CompilerGeneratedAttribute]
public bool get_ExposeData();
    [CompilerGeneratedAttribute]
public void set_ExposeData(bool value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class GraphQL.Execution.ExecutionContext : object {
    [CompilerGeneratedAttribute]
private IExecutionStrategy <ExecutionStrategy>k__BackingField;
    [CompilerGeneratedAttribute]
private GraphQLDocument <Document>k__BackingField;
    [CompilerGeneratedAttribute]
private ISchema <Schema>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private object <RootValue>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IDictionary`2<string, object> <UserContext>k__BackingField;
    [CompilerGeneratedAttribute]
private GraphQLOperationDefinition <Operation>k__BackingField;
    [CompilerGeneratedAttribute]
private Variables <Variables>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IReadOnlyDictionary`2<GraphQLField, IDictionary`2<string, ArgumentValue>> <ArgumentValues>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IReadOnlyDictionary`2<ASTNode, IDictionary`2<string, DirectiveInfo>> <DirectiveValues>k__BackingField;
    [CompilerGeneratedAttribute]
private ExecutionErrors <Errors>k__BackingField;
    [CompilerGeneratedAttribute]
private CancellationToken <CancellationToken>k__BackingField;
    [CompilerGeneratedAttribute]
private Metrics <Metrics>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<IDocumentExecutionListener> <Listeners>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ThrowOnUnhandledException>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<UnhandledExceptionContext, Task> <UnhandledExceptionDelegate>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <MaxParallelExecutionCount>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IReadOnlyDictionary`2<string, object> <InputExtensions>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Dictionary`2<string, object> <OutputExtensions>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private IServiceProvider <RequestServices>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private ClaimsPrincipal <User>k__BackingField;
    [CompilerGeneratedAttribute]
private ExecutionOptions <ExecutionOptions>k__BackingField;
    private List`1<Array> _trackedArrays;
    public IExecutionStrategy ExecutionStrategy { get; public set; }
    public GraphQLDocument Document { get; public set; }
    public ISchema Schema { get; public set; }
    [NullableAttribute("2")]
public object RootValue { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IDictionary`2<string, object> UserContext { get; public set; }
    public GraphQLOperationDefinition Operation { get; public set; }
    public Variables Variables { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IReadOnlyDictionary`2<GraphQLField, IDictionary`2<string, ArgumentValue>> ArgumentValues { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IReadOnlyDictionary`2<ASTNode, IDictionary`2<string, DirectiveInfo>> DirectiveValues { get; public set; }
    public ExecutionErrors Errors { get; public set; }
    public CancellationToken CancellationToken { get; public set; }
    public Metrics Metrics { get; public set; }
    public List`1<IDocumentExecutionListener> Listeners { get; public set; }
    public bool ThrowOnUnhandledException { get; public set; }
    public Func`2<UnhandledExceptionContext, Task> UnhandledExceptionDelegate { get; public set; }
    public Nullable`1<int> MaxParallelExecutionCount { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IReadOnlyDictionary`2<string, object> InputExtensions { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Dictionary`2<string, object> OutputExtensions { get; public set; }
    [NullableAttribute("2")]
public IServiceProvider RequestServices { get; public set; }
    [NullableAttribute("2")]
public ClaimsPrincipal User { get; public set; }
    public ExecutionOptions ExecutionOptions { get; public set; }
    public ExecutionContext(ExecutionContext context);
    [CompilerGeneratedAttribute]
public sealed virtual IExecutionStrategy get_ExecutionStrategy();
    [CompilerGeneratedAttribute]
public void set_ExecutionStrategy(IExecutionStrategy value);
    [CompilerGeneratedAttribute]
public sealed virtual GraphQLDocument get_Document();
    [CompilerGeneratedAttribute]
public void set_Document(GraphQLDocument value);
    [CompilerGeneratedAttribute]
public sealed virtual ISchema get_Schema();
    [CompilerGeneratedAttribute]
public void set_Schema(ISchema value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual object get_RootValue();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_RootValue(object value);
    [CompilerGeneratedAttribute]
public sealed virtual IDictionary`2<string, object> get_UserContext();
    [CompilerGeneratedAttribute]
public void set_UserContext(IDictionary`2<string, object> value);
    [CompilerGeneratedAttribute]
public sealed virtual GraphQLOperationDefinition get_Operation();
    [CompilerGeneratedAttribute]
public void set_Operation(GraphQLOperationDefinition value);
    [CompilerGeneratedAttribute]
public sealed virtual Variables get_Variables();
    [CompilerGeneratedAttribute]
public void set_Variables(Variables value);
    [CompilerGeneratedAttribute]
public sealed virtual IReadOnlyDictionary`2<GraphQLField, IDictionary`2<string, ArgumentValue>> get_ArgumentValues();
    [CompilerGeneratedAttribute]
public void set_ArgumentValues(IReadOnlyDictionary`2<GraphQLField, IDictionary`2<string, ArgumentValue>> value);
    [CompilerGeneratedAttribute]
public sealed virtual IReadOnlyDictionary`2<ASTNode, IDictionary`2<string, DirectiveInfo>> get_DirectiveValues();
    [CompilerGeneratedAttribute]
public void set_DirectiveValues(IReadOnlyDictionary`2<ASTNode, IDictionary`2<string, DirectiveInfo>> value);
    [CompilerGeneratedAttribute]
public sealed virtual ExecutionErrors get_Errors();
    [CompilerGeneratedAttribute]
public void set_Errors(ExecutionErrors value);
    [CompilerGeneratedAttribute]
public sealed virtual CancellationToken get_CancellationToken();
    [CompilerGeneratedAttribute]
public void set_CancellationToken(CancellationToken value);
    [CompilerGeneratedAttribute]
public sealed virtual Metrics get_Metrics();
    [CompilerGeneratedAttribute]
public void set_Metrics(Metrics value);
    [CompilerGeneratedAttribute]
public sealed virtual List`1<IDocumentExecutionListener> get_Listeners();
    [CompilerGeneratedAttribute]
public void set_Listeners(List`1<IDocumentExecutionListener> value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_ThrowOnUnhandledException();
    [CompilerGeneratedAttribute]
public void set_ThrowOnUnhandledException(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual Func`2<UnhandledExceptionContext, Task> get_UnhandledExceptionDelegate();
    [CompilerGeneratedAttribute]
public void set_UnhandledExceptionDelegate(Func`2<UnhandledExceptionContext, Task> value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<int> get_MaxParallelExecutionCount();
    [CompilerGeneratedAttribute]
public void set_MaxParallelExecutionCount(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public sealed virtual IReadOnlyDictionary`2<string, object> get_InputExtensions();
    [CompilerGeneratedAttribute]
public void set_InputExtensions(IReadOnlyDictionary`2<string, object> value);
    [CompilerGeneratedAttribute]
public sealed virtual Dictionary`2<string, object> get_OutputExtensions();
    [CompilerGeneratedAttribute]
public void set_OutputExtensions(Dictionary`2<string, object> value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual IServiceProvider get_RequestServices();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_RequestServices(IServiceProvider value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual ClaimsPrincipal get_User();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_User(ClaimsPrincipal value);
    [CompilerGeneratedAttribute]
public sealed virtual ExecutionOptions get_ExecutionOptions();
    [CompilerGeneratedAttribute]
public void set_ExecutionOptions(ExecutionOptions value);
    public sealed virtual TElement[] Rent(int minimumLength);
    public sealed virtual void Dispose();
    protected virtual void ClearContext();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public static class GraphQL.Execution.ExecutionHelper : object {
    [NullableAttribute("1")]
private static IDictionary`2<string, ArgumentValue> _emptyDirectiveArguments;
    private static ExecutionHelper();
    [NullableContextAttribute("1")]
public static IDictionary`2<string, DirectiveInfo> GetDirectives(IHasDirectivesNode node, Variables variables, ISchema schema, GraphQLDocument document);
    public static Dictionary`2<string, ArgumentValue> GetArguments(QueryArguments definitionArguments, GraphQLArguments astArguments, Variables variables, GraphQLDocument document, ASTNode fieldOrFragmentSpread, GraphQLDirective directive);
    public static ArgumentValue CoerceValue(IGraphType type, GraphQLValue input, Variables variables, object fieldDefault);
    internal static ArgumentValue CoerceValue(IGraphType type, GraphQLValue input, CoerceValueContext context, object fieldDefault);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
internal static bool <CoerceValue>g__WrapType|5_0(IGraphType& type, Object& value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
internal static bool <CoerceValue>g__IsASTListType|5_1(GraphQLType type);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class GraphQL.Execution.ExecutionNode : object {
    [CompilerGeneratedAttribute]
private ExecutionNode <Parent>k__BackingField;
    [CompilerGeneratedAttribute]
private IGraphType <GraphType>k__BackingField;
    [CompilerGeneratedAttribute]
private GraphQLField <Field>k__BackingField;
    [CompilerGeneratedAttribute]
private FieldType <FieldDefinition>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <IndexInParentNode>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private object <Result>k__BackingField;
    private static object _num0;
    private static object _num1;
    private static object _num2;
    private static object _num3;
    private static object _num4;
    private static object _num5;
    private static object _num6;
    private static object _num7;
    private static object _num8;
    private static object _num9;
    private static object _num10;
    private static object _num11;
    private static object _num12;
    private static object _num13;
    private static object _num14;
    private static object _num15;
    public ExecutionNode Parent { get; }
    public IGraphType GraphType { get; }
    public GraphQLField Field { get; }
    public FieldType FieldDefinition { get; }
    public Nullable`1<int> IndexInParentNode { get; }
    [NullableAttribute("2")]
internal IGraphType ResolvedType { get; }
    [NullableAttribute("2")]
public string Name { get; }
    [NullableAttribute("2")]
public object Result { get; public set; }
    [NullableAttribute("2")]
public object Source { get; }
    public IEnumerable`1<object> Path { get; }
    public IEnumerable`1<object> ResponsePath { get; }
    protected ExecutionNode(ExecutionNode parent, IGraphType graphType, GraphQLField field, FieldType fieldDefinition, Nullable`1<int> indexInParentNode);
    private static ExecutionNode();
    [CompilerGeneratedAttribute]
public ExecutionNode get_Parent();
    [CompilerGeneratedAttribute]
public IGraphType get_GraphType();
    [CompilerGeneratedAttribute]
public GraphQLField get_Field();
    [CompilerGeneratedAttribute]
public FieldType get_FieldDefinition();
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_IndexInParentNode();
    [NullableContextAttribute("2")]
internal IGraphType get_ResolvedType();
    [NullableContextAttribute("2")]
public string get_Name();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public object get_Result();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Result(object value);
    [NullableContextAttribute("2")]
public virtual object get_Source();
    [NullableContextAttribute("2")]
public abstract virtual object ToValue();
    public virtual bool PropagateNull();
    public IObjectGraphType GetParentType(ISchema schema);
    public IEnumerable`1<object> get_Path();
    public IEnumerable`1<object> get_ResponsePath();
    private static object GetObjectIndex(int index);
    private IEnumerable`1<object> GeneratePath(bool preferAlias);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class GraphQL.Execution.ExecutionStrategy : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ThreadStaticAttribute]
private static Dictionary`2<string, ValueTuple`2<GraphQLField, FieldType>> _reusableFields;
    [NullableAttribute("2")]
[ThreadStaticAttribute]
private static ReadonlyResolveFieldContext _readonlyResolveFieldContext;
    [AsyncStateMachineAttribute("GraphQL.Execution.ExecutionStrategy/<ExecuteAsync>d__0")]
public virtual Task`1<ExecutionResult> ExecuteAsync(ExecutionContext context);
    public abstract virtual Task ExecuteNodeTreeAsync(ExecutionContext context, ExecutionNode rootNode);
    protected virtual IObjectGraphType GetOperationRootType(ExecutionContext context);
    protected virtual RootExecutionNode BuildExecutionRootNode(ExecutionContext context, IObjectGraphType rootType);
    protected virtual ExecutionNode BuildExecutionNode(ExecutionNode parent, IGraphType graphType, GraphQLField field, FieldType fieldDefinition, Nullable`1<int> indexInParentNode);
    protected virtual bool ShouldIncludeNode(ExecutionContext context, TASTNode node);
    protected virtual void SetSubFieldNodes(ExecutionContext context, ObjectExecutionNode parent);
    protected FieldType GetFieldDefinition(ISchema schema, IComplexGraphType parentType, GraphQLField field);
    public virtual Dictionary`2<string, ValueTuple`2<GraphQLField, FieldType>> GetSubFields(ExecutionContext context, ExecutionNode node);
    protected virtual Dictionary`2<string, ValueTuple`2<GraphQLField, FieldType>> CollectFieldsFrom(ExecutionContext context, IGraphType specificType, GraphQLSelectionSet selectionSet, Dictionary`2<string, ValueTuple`2<GraphQLField, FieldType>> fields);
    protected bool DoesFragmentConditionMatch(ExecutionContext context, ROM fragmentName, IGraphType type);
    [AsyncStateMachineAttribute("GraphQL.Execution.ExecutionStrategy/<SetArrayItemNodesAsync>d__12")]
protected virtual Task SetArrayItemNodesAsync(ExecutionContext context, ArrayExecutionNode parent);
    protected virtual IFieldResolver SelectResolver(ExecutionNode node, ExecutionContext context);
    [AsyncStateMachineAttribute("GraphQL.Execution.ExecutionStrategy/<ExecuteNodeAsync>d__15")]
protected virtual Task ExecuteNodeAsync(ExecutionContext context, ExecutionNode node);
    [AsyncStateMachineAttribute("GraphQL.Execution.ExecutionStrategy/<CompleteDataLoaderNodeAsync>d__16")]
protected virtual Task CompleteDataLoaderNodeAsync(ExecutionContext context, ExecutionNode node);
    [AsyncStateMachineAttribute("GraphQL.Execution.ExecutionStrategy/<CompleteNodeAsync>d__17")]
protected virtual Task CompleteNodeAsync(ExecutionContext context, ExecutionNode node);
    protected virtual void SetNodeError(ExecutionContext context, ExecutionNode node, ExecutionError error);
    [AsyncStateMachineAttribute("GraphQL.Execution.ExecutionStrategy/<ProcessNodeUnhandledExceptionAsync>d__19")]
protected virtual Task`1<bool> ProcessNodeUnhandledExceptionAsync(ExecutionContext context, ExecutionNode node, Exception ex);
    protected virtual void ValidateNodeResult(ExecutionContext context, ExecutionNode node);
    [CompilerGeneratedAttribute]
private void <CollectFieldsFrom>g__CollectFields|10_0(ExecutionContext context, IGraphType specificType, GraphQLSelectionSet selectionSet, Dictionary`2<string, ValueTuple`2<GraphQLField, FieldType>> fields, ROM[] visitedFragmentNames, int foundFragments);
    [CompilerGeneratedAttribute]
internal static bool <CollectFieldsFrom>g__Contains|10_4(ROM[] array, ROM item, int count);
    [CompilerGeneratedAttribute]
internal static void <CollectFieldsFrom>g__Add|10_1(Dictionary`2<string, ValueTuple`2<GraphQLField, FieldType>> fields, GraphQLField field, FieldType fieldType);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal static GraphQLSelectionSet <CollectFieldsFrom>g__Merge|10_2(GraphQLSelectionSet selection, GraphQLSelectionSet otherSelection);
    [CompilerGeneratedAttribute]
internal static int <CollectFieldsFrom>g__GetFragmentSpreads|10_3(ExecutionContext context, GraphQLSelectionSet selectionSet);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class GraphQL.Execution.ExecutionStrategyRegistration : object {
    [CompilerGeneratedAttribute]
private IExecutionStrategy <Strategy>k__BackingField;
    [CompilerGeneratedAttribute]
private OperationType <Operation>k__BackingField;
    [CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public IExecutionStrategy Strategy { get; public set; }
    public OperationType Operation { get; public set; }
    public ExecutionStrategyRegistration(IExecutionStrategy Strategy, OperationType Operation);
    [CompilerGeneratedAttribute]
protected ExecutionStrategyRegistration(ExecutionStrategyRegistration original);
    [CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public IExecutionStrategy get_Strategy();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Strategy(IExecutionStrategy value);
    [CompilerGeneratedAttribute]
public OperationType get_Operation();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Operation(OperationType value);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(ExecutionStrategyRegistration left, ExecutionStrategyRegistration right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(ExecutionStrategyRegistration left, ExecutionStrategyRegistration right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(ExecutionStrategyRegistration other);
    [CompilerGeneratedAttribute]
public virtual ExecutionStrategyRegistration <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(IExecutionStrategy& Strategy, OperationType& Operation);
}
public enum GraphQL.Execution.ExposeExceptionDetailsMode : Enum {
    public int value__;
    public static ExposeExceptionDetailsMode Message;
    public static ExposeExceptionDetailsMode Extensions;
}
public class GraphQL.Execution.GraphQLDocumentBuilder : object {
    [CompilerGeneratedAttribute]
private bool <IgnoreComments>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IgnoreLocations>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <MaxDepth>k__BackingField;
    public bool IgnoreComments { get; public set; }
    public bool IgnoreLocations { get; public set; }
    public Nullable`1<int> MaxDepth { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_IgnoreComments();
    [CompilerGeneratedAttribute]
public void set_IgnoreComments(bool value);
    [CompilerGeneratedAttribute]
public bool get_IgnoreLocations();
    [CompilerGeneratedAttribute]
public void set_IgnoreLocations(bool value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_MaxDepth();
    [CompilerGeneratedAttribute]
public void set_MaxDepth(Nullable`1<int> value);
    [NullableContextAttribute("1")]
public sealed virtual GraphQLDocument Build(string body);
    private IgnoreOptions CreateIgnoreOptions();
}
[NullableContextAttribute("1")]
public interface GraphQL.Execution.IDocumentBuilder {
    public abstract virtual GraphQLDocument Build(string body);
}
[NullableContextAttribute("1")]
public interface GraphQL.Execution.IDocumentExecutionListener {
    public abstract virtual Task AfterValidationAsync(IExecutionContext context, IValidationResult validationResult);
    public abstract virtual Task BeforeExecutionAsync(IExecutionContext context);
    public abstract virtual Task AfterExecutionAsync(IExecutionContext context);
}
[NullableContextAttribute("1")]
public interface GraphQL.Execution.IErrorInfoProvider {
    public abstract virtual ErrorInfo GetInfo(ExecutionError executionError);
}
[NullableContextAttribute("1")]
public interface GraphQL.Execution.IExecutionArrayPool {
    public abstract virtual TElement[] Rent(int minimumLength);
}
[NullableContextAttribute("1")]
public interface GraphQL.Execution.IExecutionContext {
    public IExecutionStrategy ExecutionStrategy { get; }
    public CancellationToken CancellationToken { get; }
    public GraphQLDocument Document { get; }
    public ExecutionErrors Errors { get; }
    public List`1<IDocumentExecutionListener> Listeners { get; }
    public Nullable`1<int> MaxParallelExecutionCount { get; }
    public Metrics Metrics { get; }
    public GraphQLOperationDefinition Operation { get; }
    [NullableAttribute("2")]
public object RootValue { get; }
    public ISchema Schema { get; }
    public bool ThrowOnUnhandledException { get; }
    public Func`2<UnhandledExceptionContext, Task> UnhandledExceptionDelegate { get; }
    public Variables Variables { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IReadOnlyDictionary`2<GraphQLField, IDictionary`2<string, ArgumentValue>> ArgumentValues { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IReadOnlyDictionary`2<ASTNode, IDictionary`2<string, DirectiveInfo>> DirectiveValues { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IReadOnlyDictionary`2<string, object> InputExtensions { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Dictionary`2<string, object> OutputExtensions { get; }
    [NullableAttribute("2")]
public IServiceProvider RequestServices { get; }
    [NullableAttribute("2")]
public ClaimsPrincipal User { get; }
    public ExecutionOptions ExecutionOptions { get; }
    public abstract virtual IExecutionStrategy get_ExecutionStrategy();
    public abstract virtual CancellationToken get_CancellationToken();
    public abstract virtual GraphQLDocument get_Document();
    public abstract virtual ExecutionErrors get_Errors();
    public abstract virtual List`1<IDocumentExecutionListener> get_Listeners();
    public abstract virtual Nullable`1<int> get_MaxParallelExecutionCount();
    public abstract virtual Metrics get_Metrics();
    public abstract virtual GraphQLOperationDefinition get_Operation();
    [NullableContextAttribute("2")]
public abstract virtual object get_RootValue();
    public abstract virtual ISchema get_Schema();
    public abstract virtual bool get_ThrowOnUnhandledException();
    public abstract virtual Func`2<UnhandledExceptionContext, Task> get_UnhandledExceptionDelegate();
    public abstract virtual Variables get_Variables();
    public abstract virtual IReadOnlyDictionary`2<GraphQLField, IDictionary`2<string, ArgumentValue>> get_ArgumentValues();
    public abstract virtual IReadOnlyDictionary`2<ASTNode, IDictionary`2<string, DirectiveInfo>> get_DirectiveValues();
    public abstract virtual IReadOnlyDictionary`2<string, object> get_InputExtensions();
    public abstract virtual Dictionary`2<string, object> get_OutputExtensions();
    [NullableContextAttribute("2")]
public abstract virtual IServiceProvider get_RequestServices();
    [NullableContextAttribute("2")]
public abstract virtual ClaimsPrincipal get_User();
    public abstract virtual ExecutionOptions get_ExecutionOptions();
}
[NullableContextAttribute("1")]
public interface GraphQL.Execution.IExecutionStrategy {
    public abstract virtual Task`1<ExecutionResult> ExecuteAsync(ExecutionContext context);
    public abstract virtual Task ExecuteNodeTreeAsync(ExecutionContext context, ExecutionNode rootNode);
    public abstract virtual Dictionary`2<string, ValueTuple`2<GraphQLField, FieldType>> GetSubFields(ExecutionContext executionContext, ExecutionNode executionNode);
}
[NullableContextAttribute("1")]
public interface GraphQL.Execution.IExecutionStrategySelector {
    public abstract virtual IExecutionStrategy Select(ExecutionContext context);
}
public class GraphQL.Execution.InvalidOperationError : DocumentError {
    [NullableContextAttribute("1")]
public InvalidOperationError(string message);
}
public class GraphQL.Execution.InvalidOperationNameError : DocumentError {
    [NullableContextAttribute("1")]
public InvalidOperationNameError(string operationName);
}
[NullableContextAttribute("1")]
public interface GraphQL.Execution.IParentExecutionNode {
    public abstract virtual IEnumerable`1<ExecutionNode> GetChildNodes();
    public abstract virtual void ApplyToChildren(Action`2<ExecutionNode, TState> action, TState state, bool reverse);
}
public interface GraphQL.Execution.IProvideUserContext {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IDictionary`2<string, object> UserContext { get; }
    public abstract virtual IDictionary`2<string, object> get_UserContext();
}
public class GraphQL.Execution.NoOperationError : DocumentError {
}
public class GraphQL.Execution.NoOperationNameError : DocumentError {
}
public class GraphQL.Execution.NullExecutionNode : ExecutionNode {
    [NullableContextAttribute("1")]
public NullExecutionNode(ExecutionNode parent, IGraphType graphType, GraphQLField field, FieldType fieldDefinition, Nullable`1<int> indexInParentNode);
    [NullableContextAttribute("2")]
public virtual object ToValue();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class GraphQL.Execution.ObjectExecutionNode : ExecutionNode {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private ExecutionNode[] <SubFields>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ExecutionNode[] SubFields { get; public set; }
    [NullableAttribute("2")]
public GraphQLSelectionSet SelectionSet { get; }
    public ObjectExecutionNode(ExecutionNode parent, IGraphType graphType, GraphQLField field, FieldType fieldDefinition, Nullable`1<int> indexInParentNode);
    [CompilerGeneratedAttribute]
public ExecutionNode[] get_SubFields();
    [CompilerGeneratedAttribute]
public void set_SubFields(ExecutionNode[] value);
    public IObjectGraphType GetObjectGraphType(ISchema schema);
    [NullableContextAttribute("2")]
public virtual object ToValue();
    public virtual bool PropagateNull();
    private sealed virtual override IEnumerable`1<ExecutionNode> GraphQL.Execution.IParentExecutionNode.GetChildNodes();
    [NullableContextAttribute("2")]
public virtual GraphQLSelectionSet get_SelectionSet();
    public sealed virtual void ApplyToChildren(Action`2<ExecutionNode, TState> action, TState state, bool reverse);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class GraphQL.Execution.ParallelExecutionStrategy : ExecutionStrategy {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Queue`1<ExecutionNode> _reusablePendingNodes;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Queue`1<ExecutionNode> _reusablePendingDataLoaders;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<Task> _reusableCurrentTasks;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<ExecutionNode> _reusableCurrentNodes;
    [CompilerGeneratedAttribute]
private static ParallelExecutionStrategy <Instance>k__BackingField;
    public static ParallelExecutionStrategy Instance { get; }
    private static ParallelExecutionStrategy();
    [CompilerGeneratedAttribute]
public static ParallelExecutionStrategy get_Instance();
    [AsyncStateMachineAttribute("GraphQL.Execution.ParallelExecutionStrategy/<ExecuteNodeTreeAsync>d__7")]
public virtual Task ExecuteNodeTreeAsync(ExecutionContext context, ExecutionNode rootNode);
}
public class GraphQL.Execution.QueryMissingError : RequestError {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class GraphQL.Execution.RequestError : ExecutionError {
    public RequestError(string message);
    public RequestError(string message, Exception innerException);
    internal string GetErrorCode();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class GraphQL.Execution.RootExecutionNode : ObjectExecutionNode {
    [CompilerGeneratedAttribute]
private GraphQLSelectionSet <SelectionSet>k__BackingField;
    public GraphQLSelectionSet SelectionSet { get; }
    [NullableContextAttribute("1")]
public RootExecutionNode(IObjectGraphType graphType, GraphQLSelectionSet selectionSet);
    [CompilerGeneratedAttribute]
public virtual GraphQLSelectionSet get_SelectionSet();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class GraphQL.Execution.SerialExecutionStrategy : ExecutionStrategy {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Stack`1<ExecutionNode> _reusableNodes;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Queue`1<ExecutionNode> _reusableDataLoaderNodes;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Stack`1<ExecutionNode> _reusableAddlNodes;
    [CompilerGeneratedAttribute]
private static SerialExecutionStrategy <Instance>k__BackingField;
    public static SerialExecutionStrategy Instance { get; }
    private static SerialExecutionStrategy();
    [CompilerGeneratedAttribute]
public static SerialExecutionStrategy get_Instance();
    [AsyncStateMachineAttribute("GraphQL.Execution.SerialExecutionStrategy/<ExecuteNodeTreeAsync>d__6")]
public virtual Task ExecuteNodeTreeAsync(ExecutionContext context, ExecutionNode rootNode);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class GraphQL.Execution.SubscriptionArrayExecutionNode : ArrayExecutionNode {
    [CompilerGeneratedAttribute]
private object <Source>k__BackingField;
    public object Source { get; }
    public SubscriptionArrayExecutionNode(ExecutionNode parent, IGraphType graphType, GraphQLField field, FieldType fieldDefinition, Nullable`1<int> indexInParentNode, object source);
    [CompilerGeneratedAttribute]
public virtual object get_Source();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class GraphQL.Execution.SubscriptionExecutionStrategy : ExecutionStrategy {
    private IExecutionStrategy _baseExecutionStrategy;
    [CompilerGeneratedAttribute]
private static SubscriptionExecutionStrategy <Instance>k__BackingField;
    public static SubscriptionExecutionStrategy Instance { get; }
    public SubscriptionExecutionStrategy(IExecutionStrategy baseExecutionStrategy);
    private static SubscriptionExecutionStrategy();
    [CompilerGeneratedAttribute]
public static SubscriptionExecutionStrategy get_Instance();
    [AsyncStateMachineAttribute("GraphQL.Execution.SubscriptionExecutionStrategy/<ExecuteAsync>d__6")]
public virtual Task`1<ExecutionResult> ExecuteAsync(ExecutionContext context);
    [AsyncStateMachineAttribute("GraphQL.Execution.SubscriptionExecutionStrategy/<ExecuteSubscriptionNodesAsync>d__7")]
private Task`1<IDictionary`2<string, IObservable`1<ExecutionResult>>> ExecuteSubscriptionNodesAsync(ExecutionContext context, ExecutionNode[] nodes);
    [AsyncStateMachineAttribute("GraphQL.Execution.SubscriptionExecutionStrategy/<ResolveResponseStreamAsync>d__8")]
protected virtual Task`1<IObservable`1<ExecutionResult>> ResolveResponseStreamAsync(ExecutionContext context, ExecutionNode node);
    protected virtual ExecutionContext CloneExecutionContext(ExecutionContext context, CancellationToken token);
    [AsyncStateMachineAttribute("GraphQL.Execution.SubscriptionExecutionStrategy/<ProcessDataAsync>d__10")]
protected virtual ValueTask`1<ExecutionResult> ProcessDataAsync(ExecutionContext context, ExecutionNode node, object value);
    protected virtual Task`1<ExecutionError> ProcessErrorAsync(ExecutionContext context, ExecutionNode node, Exception exception);
    [AsyncStateMachineAttribute("GraphQL.Execution.SubscriptionExecutionStrategy/<HandleExceptionInternalAsync>d__12")]
private Task`1<ExecutionError> HandleExceptionInternalAsync(ExecutionContext context, ExecutionNode node, Exception exception, string defaultMessage);
    [AsyncStateMachineAttribute("GraphQL.Execution.SubscriptionExecutionStrategy/<HandleExceptionAsync>d__13")]
protected virtual Task`1<ExecutionError> HandleExceptionAsync(ExecutionContext context, ExecutionNode node, Exception exception, string defaultMessage);
    protected ExecutionNode BuildSubscriptionExecutionNode(ExecutionNode parent, IGraphType graphType, GraphQLField field, FieldType fieldDefinition, Nullable`1<int> indexInParentNode, object source);
    private ExecutionError GenerateError(ExecutionContext context, ExecutionNode node, string message, Exception ex);
    public virtual Task ExecuteNodeTreeAsync(ExecutionContext context, ExecutionNode rootNode);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class GraphQL.Execution.SubscriptionObjectExecutionNode : ObjectExecutionNode {
    [CompilerGeneratedAttribute]
private object <Source>k__BackingField;
    public object Source { get; }
    public SubscriptionObjectExecutionNode(ExecutionNode parent, IGraphType graphType, GraphQLField field, FieldType fieldDefinition, Nullable`1<int> indexInParentNode, object source);
    [CompilerGeneratedAttribute]
public virtual object get_Source();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class GraphQL.Execution.SubscriptionValueExecutionNode : ValueExecutionNode {
    [CompilerGeneratedAttribute]
private object <Source>k__BackingField;
    public object Source { get; }
    public SubscriptionValueExecutionNode(ExecutionNode parent, ScalarGraphType graphType, GraphQLField field, FieldType fieldDefinition, Nullable`1<int> indexInParentNode, object source);
    [CompilerGeneratedAttribute]
public virtual object get_Source();
}
public class GraphQL.Execution.SyntaxError : DocumentError {
    [NullableContextAttribute("1")]
public SyntaxError(GraphQLSyntaxErrorException ex);
}
public enum GraphQL.Execution.TimeoutAction : Enum {
    public int value__;
    public static TimeoutAction ReturnTimeoutError;
    public static TimeoutAction ThrowTimeoutException;
}
public class GraphQL.Execution.TimeoutError : ExecutionError {
    [NullableContextAttribute("1")]
public TimeoutError(string message, Exception innerException);
}
public class GraphQL.Execution.UnhandledError : ExecutionError {
    [NullableContextAttribute("1")]
public UnhandledError(string message, Exception innerException);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class GraphQL.Execution.UnhandledExceptionContext : object {
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private IExecutionContext <Context>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private IResolveFieldContext <FieldContext>k__BackingField;
    [CompilerGeneratedAttribute]
private ExecutionOptions <ExecutionOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private Exception <OriginalException>k__BackingField;
    [CompilerGeneratedAttribute]
private Exception <Exception>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <ErrorMessage>k__BackingField;
    [NullableAttribute("2")]
public IExecutionContext Context { get; }
    [NullableAttribute("2")]
public IResolveFieldContext FieldContext { get; }
    public ExecutionOptions ExecutionOptions { get; }
    public Exception OriginalException { get; }
    public Exception Exception { get; public set; }
    [NullableAttribute("2")]
public string ErrorMessage { get; public set; }
    public UnhandledExceptionContext(IExecutionContext context, IResolveFieldContext fieldContext, Exception originalException);
    public UnhandledExceptionContext(ExecutionOptions options, Exception originalException);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public IExecutionContext get_Context();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public IResolveFieldContext get_FieldContext();
    [CompilerGeneratedAttribute]
public ExecutionOptions get_ExecutionOptions();
    [CompilerGeneratedAttribute]
public Exception get_OriginalException();
    [CompilerGeneratedAttribute]
public Exception get_Exception();
    [CompilerGeneratedAttribute]
public void set_Exception(Exception value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_ErrorMessage();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_ErrorMessage(string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class GraphQL.Execution.ValueExecutionNode : ExecutionNode {
    public ScalarGraphType GraphType { get; }
    public ValueExecutionNode(ExecutionNode parent, ScalarGraphType graphType, GraphQLField field, FieldType fieldDefinition, Nullable`1<int> indexInParentNode);
    [NullableContextAttribute("2")]
public virtual object ToValue();
    public ScalarGraphType get_GraphType();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class GraphQL.ExecutionContextExtensions : object {
    [ExtensionAttribute]
public static IDictionary`2<string, ArgumentValue> GetArguments(IExecutionContext executionContext, FieldType fieldDefinition, GraphQLField astField);
    [ExtensionAttribute]
public static IDictionary`2<string, DirectiveInfo> GetDirectives(IExecutionContext executionContext, ASTNode astNode);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class GraphQL.ExecutionError : Exception {
    [CompilerGeneratedAttribute]
private List`1<Location> <Locations>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Code>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IEnumerable`1<object> <Path>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Dictionary`2<string, object> <Extensions>k__BackingField;
    public List`1<Location> Locations { get; private set; }
    public string Code { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IEnumerable`1<object> Path { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Dictionary`2<string, object> Extensions { get; public set; }
    [NullableContextAttribute("1")]
public ExecutionError(string message);
    [NullableContextAttribute("1")]
public ExecutionError(string message, IDictionary data);
    [NullableContextAttribute("1")]
public ExecutionError(string message, Exception innerException);
    [CompilerGeneratedAttribute]
public List`1<Location> get_Locations();
    [CompilerGeneratedAttribute]
private void set_Locations(List`1<Location> value);
    [CompilerGeneratedAttribute]
public string get_Code();
    [CompilerGeneratedAttribute]
public void set_Code(string value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<object> get_Path();
    [CompilerGeneratedAttribute]
public void set_Path(IEnumerable`1<object> value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, object> get_Extensions();
    [CompilerGeneratedAttribute]
public void set_Extensions(Dictionary`2<string, object> value);
    public void AddLocation(Location location);
    private void SetCode(Exception exception);
    private void SetData(Exception exception);
    [NullableContextAttribute("1")]
private void SetData(IDictionary dict);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class GraphQL.ExecutionErrorExtensions : object {
    [ExtensionAttribute]
public static TError AddLocation(TError error, ASTNode abstractNode, GraphQLDocument document);
    [ExtensionAttribute]
public static TError AddExtension(TError error, string key, object value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class GraphQL.ExecutionErrors : object {
    private object _lock;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal List`1<ExecutionError> List;
    public int Count { get; }
    public ExecutionError Item { get; }
    internal ExecutionErrors(int capacity);
    internal ExecutionErrors(ExecutionError error);
    public virtual void Add(ExecutionError error);
    public virtual void AddRange(IEnumerable`1<ExecutionError> errors);
    public int get_Count();
    public ExecutionError get_Item(int index);
    public sealed virtual IEnumerator`1<ExecutionError> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class GraphQL.ExecutionOptions : object {
    [CompilerGeneratedAttribute]
private ISchema <Schema>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Root>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Query>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DocumentId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OperationName>k__BackingField;
    [CompilerGeneratedAttribute]
private GraphQLDocument <Document>k__BackingField;
    [CompilerGeneratedAttribute]
private Inputs <Variables>k__BackingField;
    [CompilerGeneratedAttribute]
private Inputs <Extensions>k__BackingField;
    [CompilerGeneratedAttribute]
private CancellationToken <CancellationToken>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IEnumerable`1<IValidationRule> <CachedDocumentValidationRules>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IEnumerable`1<IValidationRule> <ValidationRules>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IDictionary`2<string, object> <UserContext>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private List`1<IDocumentExecutionListener> <Listeners>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableMetrics>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ThrowOnUnhandledException>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private Func`2<UnhandledExceptionContext, Task> <UnhandledExceptionDelegate>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <MaxParallelExecutionCount>k__BackingField;
    [CompilerGeneratedAttribute]
private IServiceProvider <RequestServices>k__BackingField;
    [CompilerGeneratedAttribute]
private ClaimsPrincipal <User>k__BackingField;
    private TimeSpan _timeout;
    [CompilerGeneratedAttribute]
private TimeoutAction <TimeoutAction>k__BackingField;
    public ISchema Schema { get; public set; }
    public object Root { get; public set; }
    public string Query { get; public set; }
    public string DocumentId { get; public set; }
    public string OperationName { get; public set; }
    public GraphQLDocument Document { get; public set; }
    public Inputs Variables { get; public set; }
    public Inputs Extensions { get; public set; }
    public CancellationToken CancellationToken { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IEnumerable`1<IValidationRule> CachedDocumentValidationRules { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IEnumerable`1<IValidationRule> ValidationRules { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IDictionary`2<string, object> UserContext { get; public set; }
    [NullableAttribute("1")]
public List`1<IDocumentExecutionListener> Listeners { get; }
    public bool EnableMetrics { get; public set; }
    public bool ThrowOnUnhandledException { get; public set; }
    [NullableAttribute("1")]
public Func`2<UnhandledExceptionContext, Task> UnhandledExceptionDelegate { get; public set; }
    public Nullable`1<int> MaxParallelExecutionCount { get; public set; }
    public IServiceProvider RequestServices { get; public set; }
    public ClaimsPrincipal User { get; public set; }
    public TimeSpan Timeout { get; public set; }
    public TimeoutAction TimeoutAction { get; public set; }
    [CompilerGeneratedAttribute]
public ISchema get_Schema();
    [CompilerGeneratedAttribute]
public void set_Schema(ISchema value);
    [CompilerGeneratedAttribute]
public object get_Root();
    [CompilerGeneratedAttribute]
public void set_Root(object value);
    [CompilerGeneratedAttribute]
public string get_Query();
    [CompilerGeneratedAttribute]
public void set_Query(string value);
    [CompilerGeneratedAttribute]
public string get_DocumentId();
    [CompilerGeneratedAttribute]
public void set_DocumentId(string value);
    [CompilerGeneratedAttribute]
public string get_OperationName();
    [CompilerGeneratedAttribute]
public void set_OperationName(string value);
    [CompilerGeneratedAttribute]
public GraphQLDocument get_Document();
    [CompilerGeneratedAttribute]
public void set_Document(GraphQLDocument value);
    [CompilerGeneratedAttribute]
public Inputs get_Variables();
    [CompilerGeneratedAttribute]
public void set_Variables(Inputs value);
    [CompilerGeneratedAttribute]
public Inputs get_Extensions();
    [CompilerGeneratedAttribute]
public void set_Extensions(Inputs value);
    [CompilerGeneratedAttribute]
public CancellationToken get_CancellationToken();
    [CompilerGeneratedAttribute]
public void set_CancellationToken(CancellationToken value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<IValidationRule> get_CachedDocumentValidationRules();
    [CompilerGeneratedAttribute]
public void set_CachedDocumentValidationRules(IEnumerable`1<IValidationRule> value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<IValidationRule> get_ValidationRules();
    [CompilerGeneratedAttribute]
public void set_ValidationRules(IEnumerable`1<IValidationRule> value);
    [CompilerGeneratedAttribute]
public sealed virtual IDictionary`2<string, object> get_UserContext();
    [CompilerGeneratedAttribute]
public void set_UserContext(IDictionary`2<string, object> value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public List`1<IDocumentExecutionListener> get_Listeners();
    [CompilerGeneratedAttribute]
public bool get_EnableMetrics();
    [CompilerGeneratedAttribute]
public void set_EnableMetrics(bool value);
    [CompilerGeneratedAttribute]
public bool get_ThrowOnUnhandledException();
    [CompilerGeneratedAttribute]
public void set_ThrowOnUnhandledException(bool value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public Func`2<UnhandledExceptionContext, Task> get_UnhandledExceptionDelegate();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public void set_UnhandledExceptionDelegate(Func`2<UnhandledExceptionContext, Task> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_MaxParallelExecutionCount();
    [CompilerGeneratedAttribute]
public void set_MaxParallelExecutionCount(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public IServiceProvider get_RequestServices();
    [CompilerGeneratedAttribute]
public void set_RequestServices(IServiceProvider value);
    [CompilerGeneratedAttribute]
public ClaimsPrincipal get_User();
    [CompilerGeneratedAttribute]
public void set_User(ClaimsPrincipal value);
    public TimeSpan get_Timeout();
    public void set_Timeout(TimeSpan value);
    [CompilerGeneratedAttribute]
public TimeoutAction get_TimeoutAction();
    [CompilerGeneratedAttribute]
public void set_TimeoutAction(TimeoutAction value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class GraphQL.ExecutionResult : object {
    [CompilerGeneratedAttribute]
private bool <Executed>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Data>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IDictionary`2<string, IObservable`1<ExecutionResult>> <Streams>k__BackingField;
    [CompilerGeneratedAttribute]
private ExecutionErrors <Errors>k__BackingField;
    [CompilerGeneratedAttribute]
private ROM <Query>k__BackingField;
    [CompilerGeneratedAttribute]
private GraphQLDocument <Document>k__BackingField;
    [CompilerGeneratedAttribute]
private GraphQLOperationDefinition <Operation>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private PerfRecord[] <Perf>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Dictionary`2<string, object> <Extensions>k__BackingField;
    public bool Executed { get; public set; }
    public object Data { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IDictionary`2<string, IObservable`1<ExecutionResult>> Streams { get; public set; }
    public ExecutionErrors Errors { get; public set; }
    public ROM Query { get; public set; }
    public GraphQLDocument Document { get; public set; }
    public GraphQLOperationDefinition Operation { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public PerfRecord[] Perf { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Dictionary`2<string, object> Extensions { get; public set; }
    [NullableContextAttribute("1")]
public ExecutionResult(ExecutionError error);
    [NullableContextAttribute("1")]
public ExecutionResult(ExecutionResult result);
    [NullableContextAttribute("1")]
internal ExecutionResult(ExecutionContext context);
    [CompilerGeneratedAttribute]
public bool get_Executed();
    [CompilerGeneratedAttribute]
public void set_Executed(bool value);
    [CompilerGeneratedAttribute]
public object get_Data();
    [CompilerGeneratedAttribute]
public void set_Data(object value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, IObservable`1<ExecutionResult>> get_Streams();
    [CompilerGeneratedAttribute]
public void set_Streams(IDictionary`2<string, IObservable`1<ExecutionResult>> value);
    [CompilerGeneratedAttribute]
public ExecutionErrors get_Errors();
    [CompilerGeneratedAttribute]
public void set_Errors(ExecutionErrors value);
    [CompilerGeneratedAttribute]
public ROM get_Query();
    [CompilerGeneratedAttribute]
public void set_Query(ROM value);
    [CompilerGeneratedAttribute]
public GraphQLDocument get_Document();
    [CompilerGeneratedAttribute]
public void set_Document(GraphQLDocument value);
    [CompilerGeneratedAttribute]
public GraphQLOperationDefinition get_Operation();
    [CompilerGeneratedAttribute]
public void set_Operation(GraphQLOperationDefinition value);
    [CompilerGeneratedAttribute]
public PerfRecord[] get_Perf();
    [CompilerGeneratedAttribute]
public void set_Perf(PerfRecord[] value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, object> get_Extensions();
    [CompilerGeneratedAttribute]
public void set_Extensions(Dictionary`2<string, object> value);
    [NullableContextAttribute("1")]
public ExecutionResult AddError(ExecutionError error);
    [NullableContextAttribute("1")]
public ExecutionResult AddErrors(ExecutionErrors errors);
}
public class GraphQL.ExperimentalFeatures : object {
    [CompilerGeneratedAttribute]
private bool <AppliedDirectives>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RepeatableDirectives>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DeprecationOfInputValues>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowScalarVariablesForListTypes>k__BackingField;
    public bool AppliedDirectives { get; public set; }
    public bool RepeatableDirectives { get; public set; }
    public bool DeprecationOfInputValues { get; public set; }
    public bool AllowScalarVariablesForListTypes { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_AppliedDirectives();
    [CompilerGeneratedAttribute]
public void set_AppliedDirectives(bool value);
    [CompilerGeneratedAttribute]
public bool get_RepeatableDirectives();
    [CompilerGeneratedAttribute]
public void set_RepeatableDirectives(bool value);
    [CompilerGeneratedAttribute]
public bool get_DeprecationOfInputValues();
    [CompilerGeneratedAttribute]
public void set_DeprecationOfInputValues(bool value);
    [CompilerGeneratedAttribute]
public bool get_AllowScalarVariablesForListTypes();
    [CompilerGeneratedAttribute]
public void set_AllowScalarVariablesForListTypes(bool value);
}
public enum GraphQL.ExperimentalIntrospectionFeaturesMode : Enum {
    public int value__;
    public static ExperimentalIntrospectionFeaturesMode ExecutionOnly;
    public static ExperimentalIntrospectionFeaturesMode IntrospectionAndExecution;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class GraphQL.ExpressionExtensions : object {
    [ExtensionAttribute]
public static Expression Replace(Expression expression, ParameterExpression oldParameter, Expression newBody);
}
[AttributeUsageAttribute("452")]
public class GraphQL.Federation.ExternalAttribute : GraphQLAttribute {
    [NullableContextAttribute("1")]
public virtual void Modify(FieldType fieldType, bool isInputType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class GraphQL.Federation.FederationFieldMetadataExtensions : object {
    [ExtensionAttribute]
public static TMetadataWriter Shareable(TMetadataWriter graphType);
    [ExtensionAttribute]
public static TMetadataWriter Override(TMetadataWriter fieldType, string from);
    [ExtensionAttribute]
public static TMetadataWriter External(TMetadataWriter fieldType);
    [ExtensionAttribute]
public static TMetadataWriter Provides(TMetadataWriter fieldType, String[] fields);
    [ExtensionAttribute]
public static TMetadataWriter Provides(TMetadataWriter fieldType, string fields);
    [ExtensionAttribute]
public static TMetadataWriter Requires(TMetadataWriter fieldType, String[] fields);
    [ExtensionAttribute]
public static TMetadataWriter Requires(TMetadataWriter fieldType, string fields);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class GraphQL.Federation.FederationGraphTypeExtensions : object {
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static void ResolveReference(ObjectGraphType`1<TReturnType> graphType, Func`3<IResolveFieldContext, TSourceType, TReturnType> resolver);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static void ResolveReference(ObjectGraphType`1<TReturnType> graphType, Func`3<IResolveFieldContext, TSourceType, Task`1<TReturnType>> resolver);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static void ResolveReference(ObjectGraphType`1<TReturnType> graphType, Func`3<IResolveFieldContext, TSourceType, IDataLoaderResult`1<TReturnType>> resolver);
    [ExtensionAttribute]
public static void ResolveReference(ObjectGraphType`1<TSourceType> graphType, Func`3<IResolveFieldContext, TSourceType, TSourceType> resolver);
    [ExtensionAttribute]
public static void ResolveReference(ObjectGraphType`1<TSourceType> graphType, Func`3<IResolveFieldContext, TSourceType, Task`1<TSourceType>> resolver);
    [ExtensionAttribute]
public static void ResolveReference(ObjectGraphType`1<TSourceType> graphType, Func`3<IResolveFieldContext, TSourceType, IDataLoaderResult`1<TSourceType>> resolver);
    [ExtensionAttribute]
public static void ResolveReference(ObjectGraphType`1<TSourceType> graphType, IFederationResolver resolver);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class GraphQL.Federation.FederationHelper : object {
    public static string AST_METAFIELD;
    public static string RESOLVER_METADATA;
    public static string FEDERATION_RESOLVER_FIELD;
    public static string LINK_SCHEMA_EXTENSION_METADATA;
    public static string FEDERATION_LINK_SCHEMA_URL;
    public static string FEDERATION_LINK_PREFIX;
    public static string KEY_DIRECTIVE;
    public static string SHAREABLE_DIRECTIVE;
    public static string INACCESSIBLE_DIRECTIVE;
    public static string OVERRIDE_DIRECTIVE;
    public static string EXTERNAL_DIRECTIVE;
    public static string PROVIDES_DIRECTIVE;
    public static string REQUIRES_DIRECTIVE;
    public static string FIELDS_ARGUMENT;
    public static string FROM_ARGUMENT;
    public static string RESOLVABLE_ARGUMENT;
    public static string REPRESENTATIONS_ARGUMENT;
    public static string LINK_DIRECTIVE;
    [ExtensionAttribute]
public static void AddFederationLink(ISchema schema, string version, Action`1<LinkConfiguration> configureLinkDirective);
    [ExtensionAttribute]
public static void AddFederationTypesAndDirectives(ISchema schema, string versionString);
    [NullableContextAttribute("0")]
internal static bool TryParseVersion(string versionString, ValueTuple`2& version);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class GraphQL.Federation.FederationInterfaceMetadataExtensions : object {
    [ExtensionAttribute]
public static TMetadataWriter Key(TMetadataWriter graphType, String[] fields, bool resolvable);
    [ExtensionAttribute]
public static TMetadataWriter Key(TMetadataWriter graphType, string fields, bool resolvable);
}
[ExtensionAttribute]
public static class GraphQL.Federation.FederationMetadataExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static TMetadataWriter Inaccessible(TMetadataWriter graphType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class GraphQL.Federation.FederationObjectMetadataExtensions : object {
    [ExtensionAttribute]
public static TMetadataWriter Key(TMetadataWriter graphType, String[] fields, bool resolvable);
    [ExtensionAttribute]
public static TMetadataWriter Key(TMetadataWriter graphType, string fields, bool resolvable);
    [ExtensionAttribute]
public static TMetadataWriter Shareable(TMetadataWriter graphType);
    [ExtensionAttribute]
public static TMetadataWriter External(TMetadataWriter fieldType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("64")]
public class GraphQL.Federation.FederationResolverAttribute : GraphQLAttribute {
    public virtual bool ShouldInclude(MemberInfo memberInfo, Nullable`1<bool> isInputType);
    public virtual void Modify(TypeInformation typeInformation);
    public virtual void Modify(FieldType fieldType, bool isInputType, IGraphType graphType, MemberInfo memberInfo, Boolean& ignore);
    [CompilerGeneratedAttribute]
internal static ValueTuple`2<string, string> <Modify>g__GetMemberInfo|3_0(<>c__DisplayClass3_0& );
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("3540")]
public class GraphQL.Federation.InaccessibleAttribute : GraphQLAttribute {
    public virtual void Modify(IGraphType graphType);
    public virtual void Modify(FieldType fieldType, bool isInputType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ObsoleteAttribute("This class will be removed in GraphQL.NET v9.")]
public class GraphQL.Federation.InjectTypenameValidationRule : object {
    public sealed virtual ValueTask EnterAsync(ASTNode node, ValidationContext context);
    private static void InjectTypename(GraphQLSelectionSet selectionSet);
    public sealed virtual ValueTask`1<INodeVisitor> GetPostNodeVisitorAsync(ValidationContext context);
    public sealed virtual ValueTask`1<INodeVisitor> GetPreNodeVisitorAsync(ValidationContext context);
    public sealed virtual ValueTask`1<IVariableVisitor> GetVariableVisitorAsync(ValidationContext context);
    public sealed virtual ValueTask LeaveAsync(ASTNode node, ValidationContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("4")]
public class GraphQL.Federation.KeyAttribute : GraphQLAttribute {
    private string _fields;
    [CompilerGeneratedAttribute]
private bool <Resolvable>k__BackingField;
    public bool Resolvable { get; public set; }
    public KeyAttribute(string fields);
    public KeyAttribute(String[] fields);
    [CompilerGeneratedAttribute]
public bool get_Resolvable();
    [CompilerGeneratedAttribute]
public void set_Resolvable(bool value);
    public virtual void Modify(IGraphType graphType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("448")]
public class GraphQL.Federation.OverrideAttribute : GraphQLAttribute {
    [CompilerGeneratedAttribute]
private string <From>k__BackingField;
    public string From { get; }
    public OverrideAttribute(string from);
    [CompilerGeneratedAttribute]
public string get_From();
    public virtual void Modify(FieldType fieldType, bool isInputType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("448")]
public class GraphQL.Federation.ProvidesAttribute : GraphQLAttribute {
    private string _fields;
    public ProvidesAttribute(string fields);
    public ProvidesAttribute(String[] fields);
    public virtual void Modify(FieldType fieldType, bool isInputType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("448")]
public class GraphQL.Federation.RequiresAttribute : GraphQLAttribute {
    private string _fields;
    public RequiresAttribute(string fields);
    public RequiresAttribute(String[] fields);
    public virtual void Modify(FieldType fieldType, bool isInputType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class GraphQL.Federation.Resolvers.EntityResolver : object {
    [CompilerGeneratedAttribute]
private static EntityResolver <Instance>k__BackingField;
    public static EntityResolver Instance { get; }
    private static EntityResolver();
    [CompilerGeneratedAttribute]
public static EntityResolver get_Instance();
    public IEnumerable`1<Representation> ConvertRepresentations(ISchema schema, IList representations);
    private static IFederationResolver SelectFederationResolver(object resolvers, string typeName, IDictionary`2<string, object> representation);
    public sealed virtual ValueTask`1<object> ResolveAsync(IResolveFieldContext context);
}
[NullableContextAttribute("2")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class GraphQL.Federation.Resolvers.FederationResolver`1 : FederationResolver`2<TClrType, TClrType> {
    public FederationResolver`1(Func`3<IResolveFieldContext, TClrType, TClrType> resolveFunc);
    public FederationResolver`1(Func`3<IResolveFieldContext, TClrType, Task`1<TClrType>> resolveFunc);
    public FederationResolver`1(Func`3<IResolveFieldContext, TClrType, IDataLoaderResult`1<TClrType>> resolveFunc);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class GraphQL.Federation.Resolvers.FederationResolver`2 : FederationResolverBase`1<TSourceType> {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal Func`3<IResolveFieldContext, TSourceType, ValueTask`1<object>> _resolveFunc;
    public Type SourceType { get; }
    public FederationResolver`2(Func`3<IResolveFieldContext, TSourceType, TReturnType> resolveFunc);
    public FederationResolver`2(Func`3<IResolveFieldContext, TSourceType, Task`1<TReturnType>> resolveFunc);
    public FederationResolver`2(Func`3<IResolveFieldContext, TSourceType, IDataLoaderResult`1<TReturnType>> resolveFunc);
    public virtual Type get_SourceType();
    public virtual ValueTask`1<object> ResolveAsync(IResolveFieldContext context, IObjectGraphType graphType, TSourceType source);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class GraphQL.Federation.Resolvers.FederationResolverBase : object {
    public Type SourceType { get; }
    public abstract virtual Type get_SourceType();
    public virtual bool MatchKeys(IDictionary`2<string, object> representation);
    public abstract virtual ValueTask`1<object> ResolveAsync(IResolveFieldContext context, IObjectGraphType graphType, object parsedRepresentation);
    public sealed virtual object ParseRepresentation(IObjectGraphType graphType, IDictionary`2<string, object> representation);
    private static object ToObject(Type objectType, IObjectGraphType objectGraphType, IDictionary`2<string, object> map);
    private static object Deserialize(string fieldName, IGraphType graphType, Type valueType, object value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class GraphQL.Federation.Resolvers.FederationResolverBase`1 : FederationResolverBase {
    public Type SourceType { get; }
    public virtual Type get_SourceType();
    public virtual ValueTask`1<object> ResolveAsync(IResolveFieldContext context, IObjectGraphType graphType, object parsedRepresentation);
    public abstract virtual ValueTask`1<object> ResolveAsync(IResolveFieldContext context, IObjectGraphType graphType, TParsedType parsedRepresentation);
}
[NullableContextAttribute("1")]
public interface GraphQL.Federation.Resolvers.IFederationResolver {
    public abstract virtual bool MatchKeys(IDictionary`2<string, object> representation);
    public abstract virtual object ParseRepresentation(IObjectGraphType graphType, IDictionary`2<string, object> representation);
    public abstract virtual ValueTask`1<object> ResolveAsync(IResolveFieldContext context, IObjectGraphType graphType, object parsedRepresentation);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class GraphQL.Federation.Resolvers.Representation : object {
    [CompilerGeneratedAttribute]
private IObjectGraphType <GraphType>k__BackingField;
    [CompilerGeneratedAttribute]
private IFederationResolver <Resolver>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Value>k__BackingField;
    [CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public IObjectGraphType GraphType { get; public set; }
    public IFederationResolver Resolver { get; public set; }
    public object Value { get; public set; }
    public Representation(IObjectGraphType GraphType, IFederationResolver Resolver, object Value);
    [CompilerGeneratedAttribute]
protected Representation(Representation original);
    [CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public IObjectGraphType get_GraphType();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_GraphType(IObjectGraphType value);
    [CompilerGeneratedAttribute]
public IFederationResolver get_Resolver();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Resolver(IFederationResolver value);
    [CompilerGeneratedAttribute]
public object get_Value();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Value(object value);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(Representation left, Representation right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(Representation left, Representation right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(Representation other);
    [CompilerGeneratedAttribute]
public virtual Representation <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(IObjectGraphType& GraphType, IFederationResolver& Resolver, Object& Value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("452")]
public class GraphQL.Federation.ShareableAttribute : GraphQLAttribute {
    public virtual void Modify(IGraphType graphType);
    public virtual void Modify(FieldType fieldType, bool isInputType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class GraphQL.Federation.TypeConfigExtensions : object {
    [ExtensionAttribute]
public static void ResolveReference(TypeConfig typeConfig, Func`3<IResolveFieldContext, TSourceType, TSourceType> resolver);
    [ExtensionAttribute]
public static void ResolveReference(TypeConfig typeConfig, Func`3<IResolveFieldContext, TSourceType, Task`1<TSourceType>> resolver);
    [ExtensionAttribute]
public static void ResolveReference(TypeConfig typeConfig, Func`3<IResolveFieldContext, TSourceType, IDataLoaderResult`1<TSourceType>> resolver);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static void ResolveReference(TypeConfig config, Func`3<IResolveFieldContext, TSourceType, Task`1<TReturnType>> resolver);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static void ResolveReference(TypeConfig config, Func`3<IResolveFieldContext, TSourceType, IDataLoaderResult`1<TReturnType>> resolver);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static void ResolveReference(TypeConfig config, Func`3<IResolveFieldContext, TSourceType, TReturnType> resolver);
    [ExtensionAttribute]
public static void ResolveReference(TypeConfig config, IFederationResolver resolver);
}
public class GraphQL.Federation.Types.AnyScalarGraphType : ComplexScalarGraphType {
}
public class GraphQL.Federation.Types.ContextFieldValueGraphType : StringGraphType {
}
public class GraphQL.Federation.Types.EntityGraphType : UnionGraphType {
}
public class GraphQL.Federation.Types.FederationPrintOptions : PrintOptions {
}
public class GraphQL.Federation.Types.FieldSetGraphType : StringGraphType {
}
public class GraphQL.Federation.Types.ServiceGraphType : ObjectGraphType {
    [NullableAttribute("2")]
private string _sdl;
    [NullableContextAttribute("1")]
public ServiceGraphType(FederationPrintOptions printOptions);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class GraphQL.Federation.Visitors.FederationEntitiesSchemaNodeVisitor : BaseSchemaNodeVisitor {
    private Func`2<AppliedDirective, bool> _keyDirectivePredicate;
    public virtual void VisitSchema(ISchema schema);
    public virtual void VisitObject(IObjectGraphType type, ISchema schema);
    public virtual void PostVisitSchema(ISchema schema);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private bool <VisitObject>b__2_0(AppliedDirective d);
}
internal class GraphQL.Federation.Visitors.FederationServiceSchemaNodeVisitor : BaseSchemaNodeVisitor {
    [NullableContextAttribute("1")]
public virtual void VisitSchema(ISchema schema);
}
[ExtensionAttribute]
public static class GraphQL.FederationGraphQLBuilderExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static IGraphQLBuilder AddFederation(IGraphQLBuilder builder, string version, Action`1<LinkConfiguration> configureLinkDirective);
}
[AttributeUsageAttribute("2048")]
public class GraphQL.FromServicesAttribute : GraphQLAttribute {
    [NullableContextAttribute("1")]
public virtual void Modify(ArgumentInformation argumentInformation);
}
[AttributeUsageAttribute("2048")]
public class GraphQL.FromSourceAttribute : GraphQLAttribute {
    [NullableContextAttribute("1")]
public virtual void Modify(ArgumentInformation argumentInformation);
}
[AttributeUsageAttribute("2048")]
public class GraphQL.FromUserContextAttribute : GraphQLAttribute {
    [NullableContextAttribute("1")]
public virtual void Modify(ArgumentInformation argumentInformation);
}
public class GraphQL.FuncServiceProvider : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Func`2<Type, object> _resolver;
    public FuncServiceProvider(Func`2<Type, object> resolver);
    [NullableContextAttribute("1")]
public sealed virtual object GetService(Type type);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class GraphQL.GlobalSwitches : object {
    [CompilerGeneratedAttribute]
private static bool <EnableReadDefaultValueFromAttributes>k__BackingField;
    [CompilerGeneratedAttribute]
private static bool <EnableReadDeprecationReasonFromAttributes>k__BackingField;
    [CompilerGeneratedAttribute]
private static bool <EnableReadDescriptionFromAttributes>k__BackingField;
    [CompilerGeneratedAttribute]
private static bool <EnableReadDescriptionFromXmlDocumentation>k__BackingField;
    public static Action`2<string, NamedElement> NameValidation;
    [CompilerGeneratedAttribute]
private static bool <UseDeclaringTypeNames>k__BackingField;
    [CompilerGeneratedAttribute]
private static bool <TrackGraphTypeInitialization>k__BackingField;
    [CompilerGeneratedAttribute]
private static ICollection`1<GraphQLAttribute> <GlobalAttributes>k__BackingField;
    [CompilerGeneratedAttribute]
private static bool <RequireRootQueryType>k__BackingField;
    [CompilerGeneratedAttribute]
private static bool <UseLegacyTypeNaming>k__BackingField;
    [CompilerGeneratedAttribute]
private static bool <EnableReflectionCaching>k__BackingField;
    [CompilerGeneratedAttribute]
private static bool <DynamicallyCompileToObject>k__BackingField;
    [CompilerGeneratedAttribute]
private static bool <InferFieldNullabilityFromNRTAnnotations>k__BackingField;
    public static bool EnableReadDefaultValueFromAttributes { get; public set; }
    public static bool EnableReadDeprecationReasonFromAttributes { get; public set; }
    public static bool EnableReadDescriptionFromAttributes { get; public set; }
    public static bool EnableReadDescriptionFromXmlDocumentation { get; public set; }
    public static bool UseDeclaringTypeNames { get; public set; }
    public static bool TrackGraphTypeInitialization { get; public set; }
    public static ICollection`1<GraphQLAttribute> GlobalAttributes { get; }
    [ObsoleteAttribute("The query root operation type must be provided and must be an Object type. See https://spec.graphql.org/October2021/#sec-Root-Operation-Types. This property will be removed in v9.")]
public static bool RequireRootQueryType { get; public set; }
    [ObsoleteAttribute("This property will be removed in v9.")]
public static bool UseLegacyTypeNaming { get; public set; }
    public static bool EnableReflectionCaching { get; public set; }
    public static bool DynamicallyCompileToObject { get; public set; }
    public static bool InferFieldNullabilityFromNRTAnnotations { get; public set; }
    private static GlobalSwitches();
    [CompilerGeneratedAttribute]
public static bool get_EnableReadDefaultValueFromAttributes();
    [CompilerGeneratedAttribute]
public static void set_EnableReadDefaultValueFromAttributes(bool value);
    [CompilerGeneratedAttribute]
public static bool get_EnableReadDeprecationReasonFromAttributes();
    [CompilerGeneratedAttribute]
public static void set_EnableReadDeprecationReasonFromAttributes(bool value);
    [CompilerGeneratedAttribute]
public static bool get_EnableReadDescriptionFromAttributes();
    [CompilerGeneratedAttribute]
public static void set_EnableReadDescriptionFromAttributes(bool value);
    [CompilerGeneratedAttribute]
public static bool get_EnableReadDescriptionFromXmlDocumentation();
    [CompilerGeneratedAttribute]
public static void set_EnableReadDescriptionFromXmlDocumentation(bool value);
    [CompilerGeneratedAttribute]
public static bool get_UseDeclaringTypeNames();
    [CompilerGeneratedAttribute]
public static void set_UseDeclaringTypeNames(bool value);
    [CompilerGeneratedAttribute]
public static bool get_TrackGraphTypeInitialization();
    [CompilerGeneratedAttribute]
public static void set_TrackGraphTypeInitialization(bool value);
    [CompilerGeneratedAttribute]
public static ICollection`1<GraphQLAttribute> get_GlobalAttributes();
    [CompilerGeneratedAttribute]
public static bool get_RequireRootQueryType();
    [CompilerGeneratedAttribute]
public static void set_RequireRootQueryType(bool value);
    [CompilerGeneratedAttribute]
public static bool get_UseLegacyTypeNaming();
    [CompilerGeneratedAttribute]
public static void set_UseLegacyTypeNaming(bool value);
    [CompilerGeneratedAttribute]
public static bool get_EnableReflectionCaching();
    [CompilerGeneratedAttribute]
public static void set_EnableReflectionCaching(bool value);
    [CompilerGeneratedAttribute]
public static bool get_DynamicallyCompileToObject();
    [CompilerGeneratedAttribute]
public static void set_DynamicallyCompileToObject(bool value);
    [CompilerGeneratedAttribute]
public static bool get_InferFieldNullabilityFromNRTAnnotations();
    [CompilerGeneratedAttribute]
public static void set_InferFieldNullabilityFromNRTAnnotations(bool value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("2508")]
public abstract class GraphQL.GraphQLAttribute : Attribute {
    private static MethodInfo _modifyMethod;
    private static ConcurrentDictionary`2<Type, MethodInfo> _typedModifyMethods;
    public float Priority { get; }
    private static GraphQLAttribute();
    public virtual void Modify(TypeConfig type);
    public virtual void Modify(FieldConfig field);
    public virtual void Modify(IGraphType graphType);
    public virtual void Modify(IGraphType graphType, Type sourceType);
    public virtual void Modify(EnumValueDefinition enumValueDefinition);
    public virtual void Modify(FieldType fieldType, bool isInputType);
    public virtual void Modify(FieldType fieldType, bool isInputType, IGraphType graphType, MemberInfo memberInfo, Boolean& ignore);
    public virtual void Modify(TypeInformation typeInformation);
    public virtual void Modify(ArgumentInformation argumentInformation);
    public virtual void Modify(ArgumentInformation argumentInformation);
    public virtual void Modify(QueryArgument queryArgument);
    public virtual void Modify(QueryArgument queryArgument, ParameterInfo parameterInfo);
    public virtual bool ShouldInclude(MemberInfo memberInfo, Nullable`1<bool> isInputType);
    public virtual float get_Priority();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class GraphQL.GraphQLBuilderExtensions : object {
    internal static float SORT_ORDER_OPTIONS;
    internal static float SORT_ORDER_CONFIGURATION;
    [ExtensionAttribute]
public static IServiceRegister Register(IServiceRegister services, ServiceLifetime serviceLifetime, bool replace);
    [ExtensionAttribute]
public static IServiceRegister Register(IServiceRegister services, ServiceLifetime serviceLifetime, bool replace);
    [ExtensionAttribute]
public static IServiceRegister Register(IServiceRegister services, Func`2<IServiceProvider, TService> implementationFactory, ServiceLifetime serviceLifetime, bool replace);
    [ExtensionAttribute]
public static IServiceRegister Register(IServiceRegister services, TService implementationInstance, bool replace);
    [ExtensionAttribute]
public static IServiceRegister TryRegister(IServiceRegister services, ServiceLifetime serviceLifetime);
    [ExtensionAttribute]
public static IServiceRegister TryRegister(IServiceRegister services, ServiceLifetime serviceLifetime, RegistrationCompareMode mode);
    [ExtensionAttribute]
public static IServiceRegister TryRegister(IServiceRegister services, Func`2<IServiceProvider, TImplementation> implementationFactory, ServiceLifetime serviceLifetime, RegistrationCompareMode mode);
    [ExtensionAttribute]
public static IServiceRegister TryRegister(IServiceRegister services, Func`2<IServiceProvider, TService> implementationFactory, ServiceLifetime serviceLifetime);
    [ExtensionAttribute]
public static IServiceRegister TryRegister(IServiceRegister services, TService implementationInstance, RegistrationCompareMode mode);
    [ExtensionAttribute]
public static IServiceRegister Configure(IServiceRegister services, Action`1<TOptions> action);
    [ExtensionAttribute]
private static IServiceRegister RegisterAsBoth(IServiceRegister services, ServiceLifetime serviceLifetime);
    [ExtensionAttribute]
private static IServiceRegister RegisterAsBoth(IServiceRegister services, Func`2<IServiceProvider, TImplementation> implementationFactory, ServiceLifetime serviceLifetime);
    [ExtensionAttribute]
private static IServiceRegister RegisterAsBoth(IServiceRegister services, TImplementation implementationInstance);
    [ExtensionAttribute]
private static IServiceRegister TryRegisterAsBoth(IServiceRegister services, ServiceLifetime serviceLifetime);
    [ExtensionAttribute]
private static IServiceRegister TryRegisterAsBoth(IServiceRegister services, Func`2<IServiceProvider, TImplementation> implementationFactory, ServiceLifetime serviceLifetime);
    [ExtensionAttribute]
private static IServiceRegister TryRegisterAsBoth(IServiceRegister services, TImplementation implementationInstance);
    [ExtensionAttribute]
public static IGraphQLBuilder AddSchema(IGraphQLBuilder builder, ServiceLifetime serviceLifetime);
    [ExtensionAttribute]
public static IGraphQLBuilder AddSchema(IGraphQLBuilder builder, TSchema schema);
    [ExtensionAttribute]
public static IGraphQLBuilder AddSchema(IGraphQLBuilder builder, Func`2<IServiceProvider, TSchema> schemaFactory, ServiceLifetime serviceLifetime);
    [ExtensionAttribute]
public static IGraphQLBuilder AddGraphTypeMappingProvider(IGraphQLBuilder builder);
    [ExtensionAttribute]
public static IGraphQLBuilder AddGraphTypeMappingProvider(IGraphQLBuilder builder, Func`2<IServiceProvider, TGraphTypeMappingProvider> factory);
    [ExtensionAttribute]
public static IGraphQLBuilder AddGraphTypeMappingProvider(IGraphQLBuilder builder, TGraphTypeMappingProvider instance);
    [ExtensionAttribute]
public static IGraphQLBuilder AddAutoSchema(IGraphQLBuilder builder, Action`1<IConfigureAutoSchema> configure);
    [ExtensionAttribute]
public static IConfigureAutoSchema WithMutation(IConfigureAutoSchema builder);
    [ExtensionAttribute]
public static IConfigureAutoSchema WithSubscription(IConfigureAutoSchema builder);
    [ExtensionAttribute]
public static IGraphQLBuilder AddDocumentExecuter(IGraphQLBuilder builder);
    [ExtensionAttribute]
public static IGraphQLBuilder AddDocumentExecuter(IGraphQLBuilder builder, TDocumentExecuter documentExecuter);
    [ExtensionAttribute]
public static IGraphQLBuilder AddDocumentExecuter(IGraphQLBuilder builder, Func`2<IServiceProvider, TDocumentExecuter> documentExecuterFactory);
    [ExtensionAttribute]
[ObsoleteAttribute("Please use the new complexity analyzer. The v7 complexity analyzer will be removed in v9.")]
public static IGraphQLBuilder AddLegacyComplexityAnalyzer(IGraphQLBuilder builder, Action`1<LegacyComplexityConfiguration> action);
    [ExtensionAttribute]
[ObsoleteAttribute("Please use the new complexity analyzer. The v7 complexity analyzer will be removed in v9.")]
public static IGraphQLBuilder AddLegacyComplexityAnalyzer(IGraphQLBuilder builder, Action`2<LegacyComplexityConfiguration, IServiceProvider> action);
    [ExtensionAttribute]
public static IGraphQLBuilder AddComplexityAnalyzer(IGraphQLBuilder builder, Action`1<ComplexityOptions> action);
    [ExtensionAttribute]
public static IGraphQLBuilder AddComplexityAnalyzer(IGraphQLBuilder builder, Action`2<ComplexityOptions, IServiceProvider> action);
    [ExtensionAttribute]
public static IGraphQLBuilder AddErrorInfoProvider(IGraphQLBuilder builder, Action`1<ErrorInfoProviderOptions> action);
    [ExtensionAttribute]
public static IGraphQLBuilder AddErrorInfoProvider(IGraphQLBuilder builder, Action`2<ErrorInfoProviderOptions, IServiceProvider> action);
    [ExtensionAttribute]
public static IGraphQLBuilder AddErrorInfoProvider(IGraphQLBuilder builder);
    [ExtensionAttribute]
public static IGraphQLBuilder AddErrorInfoProvider(IGraphQLBuilder builder, TProvider errorInfoProvider);
    [ExtensionAttribute]
public static IGraphQLBuilder AddErrorInfoProvider(IGraphQLBuilder builder, Func`2<IServiceProvider, TProvider> errorInfoProviderFactory);
    [ExtensionAttribute]
public static IGraphQLBuilder AddGraphTypes(IGraphQLBuilder builder);
    [ExtensionAttribute]
public static IGraphQLBuilder AddGraphTypes(IGraphQLBuilder builder, Assembly assembly);
    [ExtensionAttribute]
public static IGraphQLBuilder AddClrTypeMappings(IGraphQLBuilder builder);
    [ExtensionAttribute]
public static IGraphQLBuilder AddClrTypeMappings(IGraphQLBuilder builder, Assembly assembly);
    [ExtensionAttribute]
public static IGraphQLBuilder AddAutoClrMappings(IGraphQLBuilder builder, bool mapInputTypes, bool mapOutputTypes);
    [ExtensionAttribute]
public static IGraphQLBuilder AddDocumentListener(IGraphQLBuilder builder, ServiceLifetime serviceLifetime);
    [ExtensionAttribute]
public static IGraphQLBuilder AddDocumentListener(IGraphQLBuilder builder, TDocumentListener documentListener);
    [ExtensionAttribute]
public static IGraphQLBuilder AddDocumentListener(IGraphQLBuilder builder, Func`2<IServiceProvider, TDocumentListener> documentListenerFactory, ServiceLifetime serviceLifetime);
    [ExtensionAttribute]
public static IGraphQLBuilder UseMiddleware(IGraphQLBuilder builder, bool install, ServiceLifetime serviceLifetime);
    [ExtensionAttribute]
public static IGraphQLBuilder UseMiddleware(IGraphQLBuilder builder, Func`3<IServiceProvider, ISchema, bool> installPredicate, ServiceLifetime serviceLifetime);
    [ExtensionAttribute]
public static IGraphQLBuilder UseMiddleware(IGraphQLBuilder builder, TMiddleware middleware, bool install);
    [ExtensionAttribute]
public static IGraphQLBuilder UseMiddleware(IGraphQLBuilder builder, TMiddleware middleware, Func`3<IServiceProvider, ISchema, bool> installPredicate);
    [ExtensionAttribute]
public static IGraphQLBuilder AddSerializer(IGraphQLBuilder builder);
    [ExtensionAttribute]
public static IGraphQLBuilder AddSerializer(IGraphQLBuilder builder, TSerializer serializer);
    [ExtensionAttribute]
public static IGraphQLBuilder AddSerializer(IGraphQLBuilder builder, Func`2<IServiceProvider, TSerializer> serializerFactory);
    [ExtensionAttribute]
public static IGraphQLBuilder ConfigureSchema(IGraphQLBuilder builder, Action`1<ISchema> action);
    [ExtensionAttribute]
public static IGraphQLBuilder ConfigureSchema(IGraphQLBuilder builder, Action`2<ISchema, IServiceProvider> action);
    [ExtensionAttribute]
public static IGraphQLBuilder ConfigureSchema(IGraphQLBuilder builder);
    [ExtensionAttribute]
public static IGraphQLBuilder ConfigureExecutionOptions(IGraphQLBuilder builder, Action`1<ExecutionOptions> action);
    [ExtensionAttribute]
public static IGraphQLBuilder ConfigureExecutionOptions(IGraphQLBuilder builder, Func`2<ExecutionOptions, Task> action);
    [ExtensionAttribute]
public static IGraphQLBuilder ConfigureExecution(IGraphQLBuilder builder, Func`3<ExecutionOptions, ExecutionDelegate, Task`1<ExecutionResult>> action);
    [ExtensionAttribute]
public static IGraphQLBuilder ConfigureExecution(IGraphQLBuilder builder);
    [ExtensionAttribute]
public static IGraphQLBuilder ConfigureExecution(IGraphQLBuilder builder, TConfigureExecution instance);
    [ExtensionAttribute]
public static IGraphQLBuilder ConfigureExecution(IGraphQLBuilder builder, Func`2<IServiceProvider, TConfigureExecution> factory);
    [ExtensionAttribute]
public static IGraphQLBuilder AddValidationRule(IGraphQLBuilder builder, bool useForCachedDocuments, ServiceLifetime serviceLifetime);
    [ExtensionAttribute]
public static IGraphQLBuilder AddValidationRule(IGraphQLBuilder builder, TValidationRule validationRule, bool useForCachedDocuments);
    [ExtensionAttribute]
public static IGraphQLBuilder AddValidationRule(IGraphQLBuilder builder, Func`2<IServiceProvider, TValidationRule> validationRuleFactory, bool useForCachedDocuments, ServiceLifetime serviceLifetime);
    [ExtensionAttribute]
public static IGraphQLBuilder UseApolloTracing(IGraphQLBuilder builder, bool enableMetrics);
    [ExtensionAttribute]
public static IGraphQLBuilder UseApolloTracing(IGraphQLBuilder builder, Func`2<ExecutionOptions, bool> enableMetricsPredicate);
    [ExtensionAttribute]
public static IGraphQLBuilder AddExecutionStrategySelector(IGraphQLBuilder builder);
    [ExtensionAttribute]
public static IGraphQLBuilder AddExecutionStrategySelector(IGraphQLBuilder builder, TExecutionStrategySelector executionStrategySelector);
    [ExtensionAttribute]
public static IGraphQLBuilder AddExecutionStrategySelector(IGraphQLBuilder builder, Func`2<IServiceProvider, TExecutionStrategySelector> executionStrategySelectorFactory);
    [ExtensionAttribute]
public static IGraphQLBuilder AddExecutionStrategy(IGraphQLBuilder builder, OperationType operationType);
    [ExtensionAttribute]
public static IGraphQLBuilder AddExecutionStrategy(IGraphQLBuilder builder, TExecutionStrategy executionStrategy, OperationType operationType);
    [ExtensionAttribute]
public static IGraphQLBuilder AddExecutionStrategy(IGraphQLBuilder builder, Func`2<IServiceProvider, TExecutionStrategy> executionStrategyFactory, OperationType operationType);
    [ExtensionAttribute]
public static IGraphQLBuilder AddUnhandledExceptionHandler(IGraphQLBuilder builder, Func`2<UnhandledExceptionContext, Task> unhandledExceptionDelegate);
    [ExtensionAttribute]
public static IGraphQLBuilder AddUnhandledExceptionHandler(IGraphQLBuilder builder, Func`3<UnhandledExceptionContext, ExecutionOptions, Task> unhandledExceptionDelegate);
    [ExtensionAttribute]
public static IGraphQLBuilder AddUnhandledExceptionHandler(IGraphQLBuilder builder, Action`1<UnhandledExceptionContext> unhandledExceptionDelegate);
    [ExtensionAttribute]
[ObsoleteAttribute("Reference the UnhandledExceptionContext.ExecutionOptions property instead of using this overload. This method will be removed in v9.")]
public static IGraphQLBuilder AddUnhandledExceptionHandler(IGraphQLBuilder builder, Action`2<UnhandledExceptionContext, ExecutionOptions> unhandledExceptionDelegate);
    [ExtensionAttribute]
public static IGraphQLBuilder AddSchemaVisitor(IGraphQLBuilder builder);
    [ExtensionAttribute]
public static IGraphQLBuilder AddSchemaVisitor(IGraphQLBuilder builder, TSchemaVisitor schemaVisitor);
    [ExtensionAttribute]
public static IGraphQLBuilder AddSchemaVisitor(IGraphQLBuilder builder, Func`2<IServiceProvider, TSchemaVisitor> schemaVisitorFactory);
    [ExtensionAttribute]
public static IGraphQLBuilder UsePersistedDocuments(IGraphQLBuilder builder, ServiceLifetime serviceLifetime, Action`1<PersistedDocumentOptions> action);
    [ExtensionAttribute]
public static IGraphQLBuilder UsePersistedDocuments(IGraphQLBuilder builder, ServiceLifetime serviceLifetime, Action`2<PersistedDocumentOptions, IServiceProvider> action);
    [ExtensionAttribute]
public static IGraphQLBuilder UsePersistedDocuments(IGraphQLBuilder builder, Action`1<PersistedDocumentOptions> action);
    [ExtensionAttribute]
public static IGraphQLBuilder UsePersistedDocuments(IGraphQLBuilder builder, Action`2<PersistedDocumentOptions, IServiceProvider> action);
    [ExtensionAttribute]
public static IGraphQLBuilder WithTimeout(IGraphQLBuilder builder, TimeSpan timeout);
    [ExtensionAttribute]
public static IGraphQLBuilder WithTimeout(IGraphQLBuilder builder, TimeSpan timeout, Func`2<ExecutionOptions, ExecutionResult> timeoutDelegate);
    [ExtensionAttribute]
public static IGraphQLBuilder WithTimeout(IGraphQLBuilder builder, TimeSpan timeout, Func`2<ExecutionOptions, Task`1<ExecutionResult>> timeoutDelegate);
    [ExtensionAttribute]
public static IGraphQLBuilder WithTimeout(IGraphQLBuilder builder, TimeSpan timeout, TimeoutAction timeoutAction);
}
[AttributeUsageAttribute("32")]
public class GraphQL.GraphQLConstructorAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class GraphQL.GraphQLExtensions : object {
    private static Char[] _escapes;
    private static SDLPrinter _sdlPrinter;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static ReadOnlyDictionary`2<string, object> _empty;
    private static GraphQLExtensions();
    [ExtensionAttribute]
internal static bool IsIntrospectionType(IGraphType type);
    [ExtensionAttribute]
public static bool IsCompositeType(IGraphType type);
    [ExtensionAttribute]
public static bool IsLeafType(IGraphType type);
    [ExtensionAttribute]
public static bool IsInputType(Type type);
    [ExtensionAttribute]
public static bool IsInputType(IGraphType type);
    [ExtensionAttribute]
public static bool IsOutputType(Type type);
    [ExtensionAttribute]
public static bool IsOutputType(IGraphType type);
    [ExtensionAttribute]
public static bool IsInputObjectType(IGraphType type);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
internal static bool IsGraphQLTypeReference(IGraphType type);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
internal static ValueTuple`2<IGraphType, Type> GetNamedTypes(IGraphType type);
    [ExtensionAttribute]
public static IGraphType GetNamedType(IGraphType type);
    [ExtensionAttribute]
public static Type GetNamedType(Type type);
    [ExtensionAttribute]
public static bool IsValidInterfaceFor(IInterfaceGraphType implementedType, IComplexGraphType type, bool throwError);
    [ExtensionAttribute]
public static string NameOf(Expression`1<Func`2<TSourceType, TProperty>> expression);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static string DescriptionOf(Expression`1<Func`2<TSourceType, TProperty>> expression);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static string DeprecationReasonOf(Expression`1<Func`2<TSourceType, TProperty>> expression);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static object DefaultValueOf(Expression`1<Func`2<TSourceType, TProperty>> expression);
    [ExtensionAttribute]
public static TMetadataProvider WithMetadata(TMetadataProvider provider, string key, object value);
    [ExtensionAttribute]
public static bool IsSubtypeOf(IGraphType maybeSubType, IGraphType superType);
    [ExtensionAttribute]
public static bool IsSubtypeOf(IGraphType maybeSubType, IGraphType superType, bool allowScalarsForLists);
    public static bool DoTypesOverlap(IGraphType typeA, IGraphType typeB);
    [ExtensionAttribute]
public static bool IsValidDefault(IGraphType type, object value);
    [ExtensionAttribute]
public static GraphQLValue ToAST(IGraphType type, object value);
    [ExtensionAttribute]
internal static string MergeComments(ASTNode node);
    [ExtensionAttribute]
internal static string Print(IGraphType type, object value);
    [ExtensionAttribute]
internal static string Print(ASTNode node);
    [ExtensionAttribute]
internal static object ParseAnyLiteral(GraphQLValue value);
    private static IDictionary`2<string, object> ParseObject(GraphQLObjectValue v);
    private static IList`1<object> ParseList(GraphQLListValue v);
    private static object ParseInt(GraphQLIntValue v);
    private static object ParseFloat(GraphQLFloatValue v);
    private static object ThrowLiteralConversionError(GraphQLValue input, string description);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[AttributeUsageAttribute("3548")]
public class GraphQL.GraphQLMetadataAttribute : GraphQLAttribute {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DeprecationReason>k__BackingField;
    [CompilerGeneratedAttribute]
private ResolverType <ResolverType>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <IsTypeOf>k__BackingField;
    public string Name { get; public set; }
    public string Description { get; public set; }
    public string DeprecationReason { get; public set; }
    public ResolverType ResolverType { get; public set; }
    public Type IsTypeOf { get; public set; }
    [NullableContextAttribute("1")]
public GraphQLMetadataAttribute(string name);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
    [CompilerGeneratedAttribute]
public string get_DeprecationReason();
    [CompilerGeneratedAttribute]
public void set_DeprecationReason(string value);
    [CompilerGeneratedAttribute]
public ResolverType get_ResolverType();
    [CompilerGeneratedAttribute]
public void set_ResolverType(ResolverType value);
    [CompilerGeneratedAttribute]
public Type get_IsTypeOf();
    [CompilerGeneratedAttribute]
public void set_IsTypeOf(Type value);
    [NullableContextAttribute("1")]
public virtual void Modify(TypeConfig type);
    [NullableContextAttribute("1")]
public virtual void Modify(FieldConfig field);
    [NullableContextAttribute("1")]
public virtual void Modify(EnumValueDefinition enumValueDefinition);
    [NullableContextAttribute("1")]
public virtual void Modify(IGraphType graphType);
    [NullableContextAttribute("1")]
public virtual void Modify(FieldType fieldType, bool isInputType);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private bool <Modify>b__22_0(object t);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private bool <Modify>b__25_0(object obj);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class GraphQL.GraphQLValuesCache : object {
    private static Object[] _positiveInts;
    private static Object[] _negativeInts;
    private static Object[] _positiveLongs;
    private static Object[] _negativeLongs;
    public static GraphQLNullValue Null;
    public static GraphQLBooleanValue True;
    public static GraphQLBooleanValue False;
    private static GraphQLValuesCache();
    public static object GetInt(ROM value);
    public static object GetLong(ROM value);
}
[NullableContextAttribute("1")]
public interface GraphQL.IConfigureAutoSchema {
    public IGraphQLBuilder Builder { get; }
    public Type SchemaType { get; }
    public abstract virtual IGraphQLBuilder get_Builder();
    public abstract virtual Type get_SchemaType();
}
[AttributeUsageAttribute("2496")]
public class GraphQL.IdAttribute : GraphQLAttribute {
    [NullableContextAttribute("1")]
public virtual void Modify(TypeInformation typeInformation);
}
[NullableContextAttribute("1")]
public interface GraphQL.IDocumentExecuter {
    public abstract virtual Task`1<ExecutionResult> ExecuteAsync(ExecutionOptions options);
}
public interface GraphQL.IDocumentExecuter`1 {
}
[AttributeUsageAttribute("448")]
public class GraphQL.IgnoreAttribute : GraphQLAttribute {
    [NullableContextAttribute("1")]
public virtual bool ShouldInclude(MemberInfo memberInfo, Nullable`1<bool> isInputType);
}
[NullableContextAttribute("1")]
public interface GraphQL.IGraphQLSerializer {
    public bool IsNativelyAsync { get; }
    public abstract virtual Task WriteAsync(Stream stream, T value, CancellationToken cancellationToken);
    public abstract virtual ValueTask`1<T> ReadAsync(Stream stream, CancellationToken cancellationToken);
    [NullableContextAttribute("2")]
public abstract virtual T ReadNode(object value);
    public abstract virtual bool get_IsNativelyAsync();
}
[NullableContextAttribute("2")]
public interface GraphQL.IGraphQLTextSerializer {
    public abstract virtual string Serialize(T value);
    public abstract virtual T Deserialize(string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("1036")]
public class GraphQL.ImplementsAttribute : GraphQLAttribute {
    [CompilerGeneratedAttribute]
private Type <InterfaceGraphType>k__BackingField;
    public Type InterfaceGraphType { get; }
    public ImplementsAttribute(Type type);
    [CompilerGeneratedAttribute]
public Type get_InterfaceGraphType();
    public virtual void Modify(IGraphType graphType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("3468")]
public class GraphQL.InputNameAttribute : GraphQLAttribute {
    private string _name;
    public string Name { get; public set; }
    public InputNameAttribute(string name);
    public string get_Name();
    public void set_Name(string value);
    public virtual void Modify(IGraphType graphType);
    public virtual void Modify(FieldType fieldType, bool isInputType);
    public virtual void Modify(QueryArgument queryArgument);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class GraphQL.Inputs : ReadOnlyDictionary`2<string, object> {
    public static Inputs Empty;
    public Inputs(IDictionary`2<string, object> dictionary);
    private static Inputs();
}
[ExtensionAttribute]
public static class GraphQL.InputsExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static Inputs ToInputs(Dictionary`2<string, object> dictionary);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("3468")]
public class GraphQL.InputTypeAttribute : GraphQLAttribute {
    private Type _inputType;
    public Type InputType { get; public set; }
    public InputTypeAttribute(Type graphType);
    public Type get_InputType();
    public void set_InputType(Type value);
    public virtual void Modify(FieldType fieldType, bool isInputType);
    public virtual void Modify(QueryArgument queryArgument);
}
public class GraphQL.InputTypeAttribute`1 : InputTypeAttribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class GraphQL.Instrumentation.ApolloTrace : object {
    [CompilerGeneratedAttribute]
private DateTime <StartTime>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <EndTime>k__BackingField;
    [CompilerGeneratedAttribute]
private long <Duration>k__BackingField;
    [CompilerGeneratedAttribute]
private OperationTrace <Parsing>k__BackingField;
    [CompilerGeneratedAttribute]
private OperationTrace <Validation>k__BackingField;
    [CompilerGeneratedAttribute]
private ExecutionTrace <Execution>k__BackingField;
    public int Version { get; }
    public DateTime StartTime { get; }
    public DateTime EndTime { get; }
    public long Duration { get; }
    public OperationTrace Parsing { get; }
    public OperationTrace Validation { get; }
    public ExecutionTrace Execution { get; }
    public ApolloTrace(DateTime start, double durationMs);
    public int get_Version();
    [CompilerGeneratedAttribute]
public DateTime get_StartTime();
    [CompilerGeneratedAttribute]
public DateTime get_EndTime();
    [CompilerGeneratedAttribute]
public long get_Duration();
    [CompilerGeneratedAttribute]
public OperationTrace get_Parsing();
    [CompilerGeneratedAttribute]
public OperationTrace get_Validation();
    [CompilerGeneratedAttribute]
public ExecutionTrace get_Execution();
    internal static long ConvertTime(double ms);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class GraphQL.Instrumentation.ApolloTracingExtensions : object {
    [ExtensionAttribute]
public static void EnrichWithApolloTracing(ExecutionResult result, DateTime start);
    public static ApolloTrace CreateTrace(PerfRecord[] perf, DateTime start);
}
public class GraphQL.Instrumentation.FieldMiddlewareBuilder : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Func`2<FieldMiddlewareDelegate, FieldMiddlewareDelegate> _middleware;
    [NullableAttribute("1")]
private static FieldMiddlewareDelegate _defaultDelegate;
    private static FieldMiddlewareBuilder();
    [NullableContextAttribute("1")]
public sealed virtual IFieldMiddlewareBuilder Use(Func`2<FieldMiddlewareDelegate, FieldMiddlewareDelegate> middleware);
    public sealed virtual Func`2<FieldMiddlewareDelegate, FieldMiddlewareDelegate> Build();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private FieldMiddlewareDelegate <Build>b__3_0(FieldMiddlewareDelegate start);
}
[ExtensionAttribute]
public static class GraphQL.Instrumentation.FieldMiddlewareBuilderExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static IFieldMiddlewareBuilder Use(IFieldMiddlewareBuilder builder, IFieldMiddleware middleware);
}
public class GraphQL.Instrumentation.FieldMiddlewareDelegate : MulticastDelegate {
    public FieldMiddlewareDelegate(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual ValueTask`1<object> Invoke(IResolveFieldContext context);
    public virtual IAsyncResult BeginInvoke(IResolveFieldContext context, AsyncCallback callback, object object);
    public virtual ValueTask`1<object> EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("1")]
public interface GraphQL.Instrumentation.IFieldMiddleware {
    public abstract virtual ValueTask`1<object> ResolveAsync(IResolveFieldContext context, FieldMiddlewareDelegate next);
}
[NullableContextAttribute("1")]
public interface GraphQL.Instrumentation.IFieldMiddlewareBuilder {
    public abstract virtual IFieldMiddlewareBuilder Use(Func`2<FieldMiddlewareDelegate, FieldMiddlewareDelegate> middleware);
    public abstract virtual Func`2<FieldMiddlewareDelegate, FieldMiddlewareDelegate> Build();
}
public class GraphQL.Instrumentation.InstrumentFieldsMiddleware : object {
    [NullableContextAttribute("1")]
public sealed virtual ValueTask`1<object> ResolveAsync(IResolveFieldContext context, FieldMiddlewareDelegate next);
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("GraphQL.Instrumentation.InstrumentFieldsMiddleware/<ResolveWhenMetricsEnabledAsync>d__1")]
private ValueTask`1<object> ResolveWhenMetricsEnabledAsync(IResolveFieldContext context, FieldMiddlewareDelegate next);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class GraphQL.Instrumentation.Metrics : object {
    private ValueStopwatch _stopwatch;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<PerfRecord> _records;
    [NullableAttribute("2")]
private PerfRecord _main;
    [CompilerGeneratedAttribute]
private static Metrics <None>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Enabled>k__BackingField;
    public static Metrics None { get; }
    public bool Enabled { get; }
    public Metrics(bool enabled);
    private static Metrics();
    [CompilerGeneratedAttribute]
public static Metrics get_None();
    [CompilerGeneratedAttribute]
public bool get_Enabled();
    public Metrics Start(string operationName);
    public Metrics SetOperationName(ROM name);
    public Marker Subject(string category, string subject, Dictionary`2<string, object> metadata);
    public PerfRecord[] Finish();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DebuggerDisplayAttribute("Type={Category} Subject={Subject} Duration={Duration}")]
public class GraphQL.Instrumentation.PerfRecord : object {
    [CompilerGeneratedAttribute]
private string <Category>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <Subject>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Dictionary`2<string, object> <Metadata>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Start>k__BackingField;
    [CompilerGeneratedAttribute]
private double <End>k__BackingField;
    public string Category { get; public set; }
    [NullableAttribute("2")]
public string Subject { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Dictionary`2<string, object> Metadata { get; public set; }
    public double Start { get; public set; }
    public double End { get; public set; }
    public double Duration { get; }
    public PerfRecord(string category, string subject, double start, Dictionary`2<string, object> metadata);
    public void MarkEnd(double end);
    [CompilerGeneratedAttribute]
public string get_Category();
    [CompilerGeneratedAttribute]
public void set_Category(string value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_Subject();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Subject(string value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, object> get_Metadata();
    [CompilerGeneratedAttribute]
public void set_Metadata(Dictionary`2<string, object> value);
    [CompilerGeneratedAttribute]
public double get_Start();
    [CompilerGeneratedAttribute]
public void set_Start(double value);
    [CompilerGeneratedAttribute]
public double get_End();
    [CompilerGeneratedAttribute]
public void set_End(double value);
    public double get_Duration();
    [NullableContextAttribute("2")]
public T MetaField(string key);
}
[IsReadOnlyAttribute]
public class GraphQL.Instrumentation.ValueStopwatch : ValueType {
    private static double _timestampToTicks;
    private long _startTimestamp;
    public bool IsActive { get; }
    public TimeSpan Elapsed { get; }
    private ValueStopwatch(long startTimestamp);
    private static ValueStopwatch();
    public bool get_IsActive();
    public static ValueStopwatch StartNew();
    public TimeSpan get_Elapsed();
}
internal static class GraphQL.Int : object {
    public static bool TryParse(ReadOnlySpan`1<char> s, Int32& result);
    public static bool TryParse(ReadOnlySpan`1<char> s, NumberStyles style, IFormatProvider provider, Int32& result);
    public static int Parse(ReadOnlySpan`1<char> s);
    public static int Parse(ReadOnlySpan`1<char> s, NumberStyles style, IFormatProvider provider);
}
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class GraphQL.Introspection.__AppliedDirective : ObjectGraphType`1<AppliedDirective> {
}
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class GraphQL.Introspection.__Directive : ObjectGraphType`1<Directive> {
    public __Directive(bool allowAppliedDirectives, bool allowRepeatable);
}
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class GraphQL.Introspection.__DirectiveArgument : ObjectGraphType`1<DirectiveArgument> {
}
public class GraphQL.Introspection.__DirectiveLocation : EnumerationGraphType`1<DirectiveLocation> {
    [NullableAttribute("1")]
internal static __DirectiveLocation Instance;
    private static __DirectiveLocation();
}
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class GraphQL.Introspection.__EnumValue : ObjectGraphType`1<EnumValueDefinition> {
    public __EnumValue(bool allowAppliedDirectives);
}
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class GraphQL.Introspection.__Field : ObjectGraphType`1<IFieldType> {
    public __Field(bool allowAppliedDirectives);
    public __Field(bool allowAppliedDirectives, bool deprecationOfInputValues);
}
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class GraphQL.Introspection.__InputValue : ObjectGraphType`1<IMetadataReader> {
    public __InputValue(bool allowAppliedDirectives);
    public __InputValue(bool allowAppliedDirectives, bool deprecationOfInputValues);
}
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class GraphQL.Introspection.__Schema : ObjectGraphType`1<ISchema> {
    public __Schema(bool allowAppliedDirectives);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class GraphQL.Introspection.__Type : ObjectGraphType`1<IGraphType> {
    public __Type(bool allowAppliedDirectives);
    public __Type(bool allowAppliedDirectives, bool deprecationOfInputValues);
    private static object KindForInstance(IGraphType type);
}
public class GraphQL.Introspection.__TypeKind : EnumerationGraphType`1<TypeKind> {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class GraphQL.Introspection.AlphabeticalSchemaComparer : object {
    private static TypeByNameComparer _instance1;
    private static DirectiveByNameComparer _instance2;
    private static ArgumentByNameComparer _instance3;
    private static EnumValueByNameComparer _instance4;
    private static FieldByNameComparer _instance5;
    public IComparer`1<IGraphType> TypeComparer { get; }
    public IComparer`1<Directive> DirectiveComparer { get; }
    private static AlphabeticalSchemaComparer();
    public virtual IComparer`1<IGraphType> get_TypeComparer();
    public virtual IComparer`1<Directive> get_DirectiveComparer();
    public virtual IComparer`1<QueryArgument> ArgumentComparer(IFieldType field);
    public virtual IComparer`1<EnumValueDefinition> EnumValueComparer(EnumerationGraphType parent);
    public virtual IComparer`1<IFieldType> FieldComparer(IGraphType parent);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class GraphQL.Introspection.DefaultSchemaComparer : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IComparer`1<IGraphType> TypeComparer { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IComparer`1<Directive> DirectiveComparer { get; }
    public virtual IComparer`1<IGraphType> get_TypeComparer();
    public virtual IComparer`1<Directive> get_DirectiveComparer();
    public virtual IComparer`1<QueryArgument> ArgumentComparer(IFieldType field);
    public virtual IComparer`1<EnumValueDefinition> EnumValueComparer(EnumerationGraphType parent);
    public virtual IComparer`1<IFieldType> FieldComparer(IGraphType parent);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class GraphQL.Introspection.DefaultSchemaFilter : object {
    protected static Task`1<bool> Allowed;
    protected static Task`1<bool> Forbidden;
    private static DefaultSchemaFilter();
    public virtual Task`1<bool> AllowType(IGraphType type);
    public virtual Task`1<bool> AllowField(IGraphType parent, IFieldType field);
    public virtual Task`1<bool> AllowArgument(IFieldType field, QueryArgument argument);
    public virtual Task`1<bool> AllowEnumValue(EnumerationGraphType parent, EnumValueDefinition enumValue);
    public virtual Task`1<bool> AllowDirective(Directive directive);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class GraphQL.Introspection.ExperimentalIntrospectionFeaturesSchemaFilter : DefaultSchemaFilter {
    public virtual Task`1<bool> AllowType(IGraphType type);
    public virtual Task`1<bool> AllowField(IGraphType parent, IFieldType field);
}
[NullableContextAttribute("1")]
public interface GraphQL.Introspection.ISchemaComparer {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IComparer`1<IGraphType> TypeComparer { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IComparer`1<Directive> DirectiveComparer { get; }
    public abstract virtual IComparer`1<IGraphType> get_TypeComparer();
    public abstract virtual IComparer`1<IFieldType> FieldComparer(IGraphType parent);
    public abstract virtual IComparer`1<QueryArgument> ArgumentComparer(IFieldType field);
    public abstract virtual IComparer`1<EnumValueDefinition> EnumValueComparer(EnumerationGraphType parent);
    public abstract virtual IComparer`1<Directive> get_DirectiveComparer();
}
[NullableContextAttribute("1")]
public interface GraphQL.Introspection.ISchemaFilter {
    public abstract virtual Task`1<bool> AllowType(IGraphType type);
    public abstract virtual Task`1<bool> AllowField(IGraphType parent, IFieldType field);
    public abstract virtual Task`1<bool> AllowArgument(IFieldType field, QueryArgument argument);
    public abstract virtual Task`1<bool> AllowEnumValue(EnumerationGraphType parent, EnumValueDefinition enumValue);
    public abstract virtual Task`1<bool> AllowDirective(Directive directive);
}
public class GraphQL.Introspection.SchemaMetaFieldType : FieldType {
}
public enum GraphQL.Introspection.TypeKind : Enum {
    public int value__;
    [DescriptionAttribute("Indicates this type is a scalar.")]
public static TypeKind SCALAR;
    [DescriptionAttribute("Indicates this type is an object. `fields` and `possibleTypes` are valid fields.")]
public static TypeKind OBJECT;
    [DescriptionAttribute("Indicates this type is an interface. `fields` and `possibleTypes` are valid fields.")]
public static TypeKind INTERFACE;
    [DescriptionAttribute("Indicates this type is a union. `possibleTypes` is a valid field.")]
public static TypeKind UNION;
    [DescriptionAttribute("Indicates this type is an enum. `enumValues` is a valid field.")]
public static TypeKind ENUM;
    [DescriptionAttribute("Indicates this type is an input object. `inputFields` is a valid field.")]
public static TypeKind INPUT_OBJECT;
    [DescriptionAttribute("Indicates this type is a list. `ofType` is a valid field.")]
public static TypeKind LIST;
    [DescriptionAttribute("Indicates this type is a non-null. `ofType` is a valid field.")]
public static TypeKind NON_NULL;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class GraphQL.Introspection.TypeKindBoxed : object {
    public static object SCALAR;
    public static object OBJECT;
    public static object INTERFACE;
    public static object UNION;
    public static object ENUM;
    public static object INPUT_OBJECT;
    public static object LIST;
    public static object NON_NULL;
    private static TypeKindBoxed();
}
public class GraphQL.Introspection.TypeMetaFieldType : FieldType {
}
public class GraphQL.Introspection.TypeNameMetaFieldType : FieldType {
}
[NullableContextAttribute("1")]
public interface GraphQL.IResolveFieldContext {
    public GraphQLField FieldAst { get; }
    public FieldType FieldDefinition { get; }
    public IObjectGraphType ParentType { get; }
    [NullableAttribute("2")]
public IResolveFieldContext Parent { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IDictionary`2<string, ArgumentValue> Arguments { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IDictionary`2<string, DirectiveInfo> Directives { get; }
    [NullableAttribute("2")]
public object RootValue { get; }
    [NullableAttribute("2")]
public object Source { get; }
    public ISchema Schema { get; }
    public GraphQLDocument Document { get; }
    public GraphQLOperationDefinition Operation { get; }
    public Variables Variables { get; }
    public CancellationToken CancellationToken { get; }
    public Metrics Metrics { get; }
    public ExecutionErrors Errors { get; }
    public IEnumerable`1<object> Path { get; }
    public IEnumerable`1<object> ResponsePath { get; }
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Dictionary`2<string, ValueTuple`2<GraphQLField, FieldType>> SubFields { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IReadOnlyDictionary`2<string, object> InputExtensions { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IDictionary`2<string, object> OutputExtensions { get; }
    [NullableAttribute("2")]
public IServiceProvider RequestServices { get; }
    public IExecutionArrayPool ArrayPool { get; }
    [NullableAttribute("2")]
public ClaimsPrincipal User { get; }
    public IExecutionContext ExecutionContext { get; }
    public abstract virtual GraphQLField get_FieldAst();
    public abstract virtual FieldType get_FieldDefinition();
    public abstract virtual IObjectGraphType get_ParentType();
    [NullableContextAttribute("2")]
public abstract virtual IResolveFieldContext get_Parent();
    public abstract virtual IDictionary`2<string, ArgumentValue> get_Arguments();
    public abstract virtual IDictionary`2<string, DirectiveInfo> get_Directives();
    [NullableContextAttribute("2")]
public abstract virtual object get_RootValue();
    [NullableContextAttribute("2")]
public abstract virtual object get_Source();
    public abstract virtual ISchema get_Schema();
    public abstract virtual GraphQLDocument get_Document();
    public abstract virtual GraphQLOperationDefinition get_Operation();
    public abstract virtual Variables get_Variables();
    public abstract virtual CancellationToken get_CancellationToken();
    public abstract virtual Metrics get_Metrics();
    public abstract virtual ExecutionErrors get_Errors();
    public abstract virtual IEnumerable`1<object> get_Path();
    public abstract virtual IEnumerable`1<object> get_ResponsePath();
    public abstract virtual Dictionary`2<string, ValueTuple`2<GraphQLField, FieldType>> get_SubFields();
    public abstract virtual IReadOnlyDictionary`2<string, object> get_InputExtensions();
    public abstract virtual IDictionary`2<string, object> get_OutputExtensions();
    [NullableContextAttribute("2")]
public abstract virtual IServiceProvider get_RequestServices();
    public abstract virtual IExecutionArrayPool get_ArrayPool();
    [NullableContextAttribute("2")]
public abstract virtual ClaimsPrincipal get_User();
    public abstract virtual IExecutionContext get_ExecutionContext();
}
public interface GraphQL.IResolveFieldContext`1 {
    [NullableAttribute("1")]
public TSource Source { get; }
    [NullableContextAttribute("1")]
public abstract virtual TSource get_Source();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class GraphQL.LightweightCache`2 : object {
    private IDictionary`2<TKey, TValue> _values;
    private Func`2<TKey, TValue> _onMissing;
    unknown Func`2<TKey, TValue> OnMissing {public set; }
    public int Count { get; }
    public TValue Item { get; public set; }
    public IEnumerable`1<TKey> Keys { get; }
    public LightweightCache`2(Func`2<TKey, TValue> onMissing);
    public LightweightCache`2(IDictionary`2<TKey, TValue> dictionary, Func`2<TKey, TValue> onMissing);
    public LightweightCache`2(IDictionary`2<TKey, TValue> dictionary);
    public void set_OnMissing(Func`2<TKey, TValue> value);
    public int get_Count();
    public TValue get_Item(TKey key);
    public void set_Item(TKey key, TValue value);
    public IEnumerable`1<TKey> get_Keys();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual IEnumerator`1<TValue> GetEnumerator();
    public void FillDefault(TKey key);
    public void Fill(TKey key, TValue value);
    public bool TryRetrieve(TKey key, TValue& value);
    public void Each(Action`1<TValue> action);
    public void Each(Action`2<TKey, TValue> action);
    public bool Has(TKey key);
    public bool Exists(Predicate`1<TValue> predicate);
    public TValue Find(Predicate`1<TValue> predicate);
    public TValue[] GetAll();
    public void Remove(TKey key);
    public void Clear();
    public void WithValue(TKey key, Action`1<TValue> action);
    public void ClearAll();
}
internal static class GraphQL.Long : object {
    public static bool TryParse(ReadOnlySpan`1<char> s, Int64& result);
    public static bool TryParse(ReadOnlySpan`1<char> s, NumberStyles style, IFormatProvider provider, Int64& result);
    public static long Parse(ReadOnlySpan`1<char> s);
    public static long Parse(ReadOnlySpan`1<char> s, NumberStyles style, IFormatProvider provider);
}
[AttributeUsageAttribute("4")]
public class GraphQL.MapAutoClrTypeAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class GraphQL.MemoryExtensions : object {
    private static ConcurrentDictionary`2<Type, Action`1<Array>> _delegates;
    private static Func`2<Type, Action`1<Array>> _factory;
    private static MemoryExtensions();
    [ExtensionAttribute]
internal static void Return(Array array);
    private static Action`1<Array> CreateDelegate(Type arrayType);
    [ExtensionAttribute]
public static IList`1<T> Constrained(T[] array, int count);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("3548")]
public class GraphQL.MetadataAttribute : GraphQLAttribute {
    [CompilerGeneratedAttribute]
private string <Key>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private object <Value>k__BackingField;
    public string Key { get; public set; }
    [NullableAttribute("2")]
public object Value { get; public set; }
    public MetadataAttribute(string key, object value);
    [CompilerGeneratedAttribute]
public string get_Key();
    [CompilerGeneratedAttribute]
public void set_Key(string value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public object get_Value();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Value(object value);
    public virtual void Modify(TypeConfig type);
    public virtual void Modify(FieldConfig field);
    public virtual void Modify(EnumValueDefinition enumValueDefinition);
    public virtual void Modify(IGraphType graphType);
    public virtual void Modify(FieldType fieldType, bool isInputType);
    public virtual void Modify(QueryArgument queryArgument);
}
[ExtensionAttribute]
internal static class GraphQL.MethodInfoExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static T CreateDelegate(MethodInfo methodInfo);
}
public class GraphQL.MissingRequestServicesException : InvalidOperationException {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("3548")]
public class GraphQL.NameAttribute : GraphQLAttribute {
    private string _name;
    public string Name { get; public set; }
    public NameAttribute(string name);
    public string get_Name();
    public void set_Name(string value);
    public virtual void Modify(EnumValueDefinition enumValueDefinition);
    public virtual void Modify(IGraphType graphType);
    public virtual void Modify(FieldType fieldType, bool isInputType);
    public virtual void Modify(QueryArgument queryArgument);
}
[AttributeUsageAttribute("16384")]
internal class GraphQL.NotAGraphTypeAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class GraphQL.ObjectExtensions : object {
    private static MethodInfo _convertToObjectArrayMethod;
    private static MethodInfo _getPropertyValueUntypedMethod;
    private static MethodInfo _getPropertyValueTypedMethod;
    private static ParameterExpression _dictionaryParam;
    private static MethodInfo _getOrDefaultMethod;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static ConcurrentDictionary`2<Type, ValueTuple`2<ConstructorInfo, ParameterInfo[]>> _types;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static ConcurrentDictionary`2<ValueTuple`2<Type, string>, ValueTuple`3<MemberInfo, bool, bool>> _members;
    private static ObjectExtensions();
    public static Func`2<IDictionary`2<string, object>, object> CompileToObject(Type sourceType, IInputObjectGraphType graphType);
    private static Func`2<IDictionary`2<string, object>, object> CompileToObject(ReflectionInfo info);
    private static Object[] ConvertToObjectArray(object list);
    private static object GetPropertyValueUntyped(Type returnType, object value, IGraphType mappedType);
    [NullableContextAttribute("2")]
private static T GetPropertyValueTyped(object value, IGraphType mappedType);
    private static Expression UpdateArray(ParameterExpression objectArray, Func`2<ParameterExpression, Expression> loopContent);
    private static ValueTuple`2<object, bool> GetOrDefaultImplementation(IDictionary`2<string, object> obj, string key);
    [ExtensionAttribute]
public static object ToObject(IDictionary`2<string, object> source, Type type, IGraphType mappedType);
    [ExtensionAttribute]
private static object ToObject(IDictionary`2<string, object> source, ReflectionInfo reflectionInfo);
    private static ReflectionInfo GetReflectionInformation(Type clrType, IInputObjectGraphType graphType);
    [ExtensionAttribute]
public static object GetPropertyValue(object propertyValue, Type fieldType, IGraphType mappedType);
    public static bool IsDefinedEnumValue(Type type, object value);
    [ExtensionAttribute]
internal static string ToSafeString(object value);
    [CompilerGeneratedAttribute]
internal static Expression <CompileToObject>g__GetExpressionForCtorParameter|1_0(CtorParameterInfo member);
    [CompilerGeneratedAttribute]
internal static MemberAssignment <CompileToObject>g__GetBindingForMember|1_1(MemberFieldInfo member);
    [CompilerGeneratedAttribute]
internal static Expression <CompileToObject>g__GetCoerceOrDefault|1_2(string key, Type type, IGraphType graphType);
    [CompilerGeneratedAttribute]
internal static Expression <CompileToObject>g__ConditionallySetMember|1_3(ParameterExpression objParam, MemberFieldInfo member);
    [CompilerGeneratedAttribute]
internal static Expression <CompileToObject>g__CoerceExpression|1_4(Expression expr, Type type, IGraphType graphType, bool asObject);
    [CompilerGeneratedAttribute]
internal static Expression <CompileToObject>g__CoerceExpressionInternal|1_5(Expression expr, Type type, IGraphType graphType, bool asObject);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class GraphQL.ObservableExtensions : object {
    [ExtensionAttribute]
public static IObservable`1<TOut> SelectCatchAsync(IObservable`1<TIn> source, Func`3<TIn, CancellationToken, ValueTask`1<TOut>> transformNext, Func`3<Exception, CancellationToken, ValueTask`1<Exception>> transformError);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
internal static bool TryPeek(Queue`1<T> queue, T& value);
}
[AttributeUsageAttribute("4")]
public class GraphQL.OneOfAttribute : GraphQLAttribute {
    [NullableContextAttribute("1")]
public virtual void Modify(IGraphType graphType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("1484")]
public class GraphQL.OutputNameAttribute : GraphQLAttribute {
    private string _name;
    public string Name { get; public set; }
    public OutputNameAttribute(string name);
    public string get_Name();
    public void set_Name(string value);
    public virtual void Modify(IGraphType graphType);
    public virtual void Modify(FieldType fieldType, bool isInputType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("1484")]
public class GraphQL.OutputTypeAttribute : GraphQLAttribute {
    private Type _outputType;
    public Type OutputType { get; public set; }
    public OutputTypeAttribute(Type graphType);
    public Type get_OutputType();
    public void set_OutputType(Type value);
    public virtual void Modify(FieldType fieldType, bool isInputType);
}
public class GraphQL.OutputTypeAttribute`1 : OutputTypeAttribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("2432")]
public class GraphQL.ParserAttribute : GraphQLAttribute {
    private static string DEFAULT_METHOD_NAME;
    [NullableAttribute("2")]
private Type _parserType;
    private string _parserMethodName;
    public ParserAttribute(string parserMethodName);
    public ParserAttribute(Type parserType);
    public ParserAttribute(Type parserType, string parserMethodName);
    public virtual void Modify(FieldType fieldType, bool isInputType, IGraphType graphType, MemberInfo memberInfo, Boolean& ignore);
    public virtual void Modify(QueryArgument queryArgument, ParameterInfo parameterInfo);
}
public class GraphQL.PersistedDocuments.DocumentIdInvalidError : RequestError {
}
public class GraphQL.PersistedDocuments.DocumentIdMissingError : RequestError {
}
public class GraphQL.PersistedDocuments.DocumentNotFoundError : RequestError {
}
public class GraphQL.PersistedDocuments.InvalidRequestError : RequestError {
}
[NullableContextAttribute("1")]
public interface GraphQL.PersistedDocuments.IPersistedDocumentLoader {
    public abstract virtual ValueTask`1<string> GetQueryAsync(string documentIdPrefix, string documentIdPayload, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class GraphQL.PersistedDocuments.PersistedDocumentHandler : object {
    private PersistedDocumentOptions _options;
    private static Dictionary`2<string, Func`2<string, bool>> _documentIdValidators;
    public float SortOrder { get; }
    public PersistedDocumentHandler(PersistedDocumentOptions options);
    private static PersistedDocumentHandler();
    protected virtual ExecutionResult CreateExecutionResult(ExecutionError error);
    [AsyncStateMachineAttribute("GraphQL.PersistedDocuments.PersistedDocumentHandler/<ExecuteAsync>d__5")]
public sealed virtual Task`1<ExecutionResult> ExecuteAsync(ExecutionOptions options, ExecutionDelegate next);
    private ValueTuple`2<string, string> ParseDocumentId(string documentId);
    public virtual float get_SortOrder();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class GraphQL.PersistedDocuments.PersistedDocumentOptions : object {
    private static string ERROR_NO_REQUESTSERVICES;
    private static string ERROR_NO_LOADER;
    [CompilerGeneratedAttribute]
private bool <AllowOnlyPersistedDocuments>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private HashSet`1<string> <AllowedPrefixes>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`4<ExecutionOptions, string, string, ValueTask`1<string>> <GetQueryDelegate>k__BackingField;
    public bool AllowOnlyPersistedDocuments { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public HashSet`1<string> AllowedPrefixes { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Func`4<ExecutionOptions, string, string, ValueTask`1<string>> GetQueryDelegate { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_AllowOnlyPersistedDocuments();
    [CompilerGeneratedAttribute]
public void set_AllowOnlyPersistedDocuments(bool value);
    [CompilerGeneratedAttribute]
public HashSet`1<string> get_AllowedPrefixes();
    [CompilerGeneratedAttribute]
public Func`4<ExecutionOptions, string, string, ValueTask`1<string>> get_GetQueryDelegate();
    [CompilerGeneratedAttribute]
public void set_GetQueryDelegate(Func`4<ExecutionOptions, string, string, ValueTask`1<string>> value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class GraphQL.QueryArgumentExtensions : object {
    [ExtensionAttribute]
public static QueryArgument ParseValue(QueryArgument argument, Func`2<object, object> parseValue);
    [ExtensionAttribute]
public static QueryArgument Validate(QueryArgument argument, Action`1<object> validator);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class GraphQL.ReadonlyResolveFieldContext : object {
    private ExecutionNode _executionNode;
    private ExecutionContext _executionContext;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Dictionary`2<string, ValueTuple`2<GraphQLField, FieldType>> _subFields;
    [NullableAttribute("2")]
private IResolveFieldContext _parent;
    [NullableAttribute("2")]
public object Source { get; }
    public GraphQLField FieldAst { get; }
    public FieldType FieldDefinition { get; }
    public IObjectGraphType ParentType { get; }
    [NullableAttribute("2")]
public IResolveFieldContext Parent { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IDictionary`2<string, ArgumentValue> Arguments { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IDictionary`2<string, DirectiveInfo> Directives { get; }
    [NullableAttribute("2")]
public object RootValue { get; }
    public ISchema Schema { get; }
    public GraphQLDocument Document { get; }
    public GraphQLOperationDefinition Operation { get; }
    public Variables Variables { get; }
    public CancellationToken CancellationToken { get; }
    public Metrics Metrics { get; }
    public ExecutionErrors Errors { get; }
    public IEnumerable`1<object> Path { get; }
    public IEnumerable`1<object> ResponsePath { get; }
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Dictionary`2<string, ValueTuple`2<GraphQLField, FieldType>> SubFields { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IDictionary`2<string, object> UserContext { get; }
    [NullableAttribute("2")]
private object GraphQL.IResolveFieldContext.Source { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IReadOnlyDictionary`2<string, object> InputExtensions { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IDictionary`2<string, object> OutputExtensions { get; }
    [NullableAttribute("2")]
public IServiceProvider RequestServices { get; }
    public IExecutionArrayPool ArrayPool { get; }
    [NullableAttribute("2")]
public ClaimsPrincipal User { get; }
    public IExecutionContext ExecutionContext { get; }
    public ReadonlyResolveFieldContext(ExecutionNode node, ExecutionContext context);
    [NullableContextAttribute("2")]
internal ReadonlyResolveFieldContext Reset(ExecutionNode node, ExecutionContext context);
    [NullableContextAttribute("2")]
public sealed virtual object get_Source();
    public sealed virtual GraphQLField get_FieldAst();
    public sealed virtual FieldType get_FieldDefinition();
    public sealed virtual IObjectGraphType get_ParentType();
    [NullableContextAttribute("2")]
public sealed virtual IResolveFieldContext get_Parent();
    public sealed virtual IDictionary`2<string, ArgumentValue> get_Arguments();
    public sealed virtual IDictionary`2<string, DirectiveInfo> get_Directives();
    [NullableContextAttribute("2")]
public sealed virtual object get_RootValue();
    public sealed virtual ISchema get_Schema();
    public sealed virtual GraphQLDocument get_Document();
    public sealed virtual GraphQLOperationDefinition get_Operation();
    public sealed virtual Variables get_Variables();
    public sealed virtual CancellationToken get_CancellationToken();
    public sealed virtual Metrics get_Metrics();
    public sealed virtual ExecutionErrors get_Errors();
    public sealed virtual IEnumerable`1<object> get_Path();
    public sealed virtual IEnumerable`1<object> get_ResponsePath();
    public sealed virtual Dictionary`2<string, ValueTuple`2<GraphQLField, FieldType>> get_SubFields();
    public sealed virtual IDictionary`2<string, object> get_UserContext();
    [NullableContextAttribute("2")]
private sealed virtual override object GraphQL.IResolveFieldContext.get_Source();
    public sealed virtual IReadOnlyDictionary`2<string, object> get_InputExtensions();
    public sealed virtual IDictionary`2<string, object> get_OutputExtensions();
    [NullableContextAttribute("2")]
public sealed virtual IServiceProvider get_RequestServices();
    public sealed virtual IExecutionArrayPool get_ArrayPool();
    [NullableContextAttribute("2")]
public sealed virtual ClaimsPrincipal get_User();
    public sealed virtual IExecutionContext get_ExecutionContext();
}
[NullableContextAttribute("1")]
public interface GraphQL.Reflection.IAccessor {
    public string FieldName { get; }
    public Type ReturnType { get; }
    public Type DeclaringType { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ParameterInfo[] Parameters { get; }
    public MethodInfo MethodInfo { get; }
    public abstract virtual string get_FieldName();
    public abstract virtual Type get_ReturnType();
    public abstract virtual Type get_DeclaringType();
    public abstract virtual ParameterInfo[] get_Parameters();
    public abstract virtual MethodInfo get_MethodInfo();
    [NullableContextAttribute("2")]
public abstract virtual object GetValue(object target, Object[] arguments);
    public abstract virtual IEnumerable`1<T> GetAttributes();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class GraphQL.Reflection.ReflectionHelper : object {
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static IAccessor ToAccessor(Type type, string field, ResolverType resolverType);
    [ExtensionAttribute]
public static MethodInfo MethodForField(Type type, string field, ResolverType resolverType);
    [ExtensionAttribute]
public static PropertyInfo PropertyForField(Type type, string field);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class GraphQL.Reflection.SingleMethodAccessor : object {
    [CompilerGeneratedAttribute]
private Type <DeclaringType>k__BackingField;
    [CompilerGeneratedAttribute]
private MethodInfo <MethodInfo>k__BackingField;
    public string FieldName { get; }
    public Type ReturnType { get; }
    public Type DeclaringType { get; }
    public ParameterInfo[] Parameters { get; }
    public MethodInfo MethodInfo { get; }
    public SingleMethodAccessor(Type declaringType, MethodInfo method);
    public sealed virtual string get_FieldName();
    public sealed virtual Type get_ReturnType();
    [CompilerGeneratedAttribute]
public sealed virtual Type get_DeclaringType();
    public sealed virtual ParameterInfo[] get_Parameters();
    [CompilerGeneratedAttribute]
public sealed virtual MethodInfo get_MethodInfo();
    public sealed virtual IEnumerable`1<T> GetAttributes();
    [NullableContextAttribute("2")]
public sealed virtual object GetValue(object target, Object[] arguments);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class GraphQL.Reflection.SinglePropertyAccessor : object {
    private PropertyInfo _property;
    [CompilerGeneratedAttribute]
private Type <DeclaringType>k__BackingField;
    public string FieldName { get; }
    public Type ReturnType { get; }
    public Type DeclaringType { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ParameterInfo[] Parameters { get; }
    public MethodInfo MethodInfo { get; }
    public SinglePropertyAccessor(Type declaringType, PropertyInfo property);
    public sealed virtual string get_FieldName();
    public sealed virtual Type get_ReturnType();
    [CompilerGeneratedAttribute]
public sealed virtual Type get_DeclaringType();
    public sealed virtual ParameterInfo[] get_Parameters();
    public sealed virtual MethodInfo get_MethodInfo();
    public sealed virtual IEnumerable`1<T> GetAttributes();
    [NullableContextAttribute("2")]
public sealed virtual object GetValue(object target, Object[] arguments);
}
[AttributeUsageAttribute("1024")]
internal class GraphQL.RequireParameterlessConstructorAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class GraphQL.ResolveFieldContext : object {
    [CompilerGeneratedAttribute]
private GraphQLField <FieldAst>k__BackingField;
    [CompilerGeneratedAttribute]
private FieldType <FieldDefinition>k__BackingField;
    [CompilerGeneratedAttribute]
private IObjectGraphType <ParentType>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private IResolveFieldContext <Parent>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IDictionary`2<string, ArgumentValue> <Arguments>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IDictionary`2<string, DirectiveInfo> <Directives>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private object <RootValue>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IDictionary`2<string, object> <UserContext>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private object <Source>k__BackingField;
    [CompilerGeneratedAttribute]
private ISchema <Schema>k__BackingField;
    [CompilerGeneratedAttribute]
private GraphQLDocument <Document>k__BackingField;
    [CompilerGeneratedAttribute]
private GraphQLOperationDefinition <Operation>k__BackingField;
    [CompilerGeneratedAttribute]
private Variables <Variables>k__BackingField;
    [CompilerGeneratedAttribute]
private CancellationToken <CancellationToken>k__BackingField;
    [CompilerGeneratedAttribute]
private Metrics <Metrics>k__BackingField;
    [CompilerGeneratedAttribute]
private ExecutionErrors <Errors>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<object> <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<object> <ResponsePath>k__BackingField;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Dictionary`2<string, ValueTuple`2<GraphQLField, FieldType>> <SubFields>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private IServiceProvider <RequestServices>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IReadOnlyDictionary`2<string, object> <InputExtensions>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IDictionary`2<string, object> <OutputExtensions>k__BackingField;
    [CompilerGeneratedAttribute]
private IExecutionArrayPool <ArrayPool>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private ClaimsPrincipal <User>k__BackingField;
    [CompilerGeneratedAttribute]
private IExecutionContext <ExecutionContext>k__BackingField;
    public GraphQLField FieldAst { get; public set; }
    public FieldType FieldDefinition { get; public set; }
    public IObjectGraphType ParentType { get; public set; }
    [NullableAttribute("2")]
public IResolveFieldContext Parent { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IDictionary`2<string, ArgumentValue> Arguments { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IDictionary`2<string, DirectiveInfo> Directives { get; public set; }
    [NullableAttribute("2")]
public object RootValue { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IDictionary`2<string, object> UserContext { get; public set; }
    [NullableAttribute("2")]
public object Source { get; public set; }
    public ISchema Schema { get; public set; }
    public GraphQLDocument Document { get; public set; }
    public GraphQLOperationDefinition Operation { get; public set; }
    public Variables Variables { get; public set; }
    public CancellationToken CancellationToken { get; public set; }
    public Metrics Metrics { get; public set; }
    public ExecutionErrors Errors { get; public set; }
    public IEnumerable`1<object> Path { get; public set; }
    public IEnumerable`1<object> ResponsePath { get; public set; }
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Dictionary`2<string, ValueTuple`2<GraphQLField, FieldType>> SubFields { get; public set; }
    [NullableAttribute("2")]
public IServiceProvider RequestServices { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IReadOnlyDictionary`2<string, object> InputExtensions { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IDictionary`2<string, object> OutputExtensions { get; public set; }
    public IExecutionArrayPool ArrayPool { get; public set; }
    [NullableAttribute("2")]
public ClaimsPrincipal User { get; public set; }
    public IExecutionContext ExecutionContext { get; public set; }
    public ResolveFieldContext(IResolveFieldContext context);
    [CompilerGeneratedAttribute]
public sealed virtual GraphQLField get_FieldAst();
    [CompilerGeneratedAttribute]
public void set_FieldAst(GraphQLField value);
    [CompilerGeneratedAttribute]
public sealed virtual FieldType get_FieldDefinition();
    [CompilerGeneratedAttribute]
public void set_FieldDefinition(FieldType value);
    [CompilerGeneratedAttribute]
public sealed virtual IObjectGraphType get_ParentType();
    [CompilerGeneratedAttribute]
public void set_ParentType(IObjectGraphType value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual IResolveFieldContext get_Parent();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Parent(IResolveFieldContext value);
    [CompilerGeneratedAttribute]
public sealed virtual IDictionary`2<string, ArgumentValue> get_Arguments();
    [CompilerGeneratedAttribute]
public void set_Arguments(IDictionary`2<string, ArgumentValue> value);
    [CompilerGeneratedAttribute]
public sealed virtual IDictionary`2<string, DirectiveInfo> get_Directives();
    [CompilerGeneratedAttribute]
public void set_Directives(IDictionary`2<string, DirectiveInfo> value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual object get_RootValue();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_RootValue(object value);
    [CompilerGeneratedAttribute]
public sealed virtual IDictionary`2<string, object> get_UserContext();
    [CompilerGeneratedAttribute]
public void set_UserContext(IDictionary`2<string, object> value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual object get_Source();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Source(object value);
    [CompilerGeneratedAttribute]
public sealed virtual ISchema get_Schema();
    [CompilerGeneratedAttribute]
public void set_Schema(ISchema value);
    [CompilerGeneratedAttribute]
public sealed virtual GraphQLDocument get_Document();
    [CompilerGeneratedAttribute]
public void set_Document(GraphQLDocument value);
    [CompilerGeneratedAttribute]
public sealed virtual GraphQLOperationDefinition get_Operation();
    [CompilerGeneratedAttribute]
public void set_Operation(GraphQLOperationDefinition value);
    [CompilerGeneratedAttribute]
public sealed virtual Variables get_Variables();
    [CompilerGeneratedAttribute]
public void set_Variables(Variables value);
    [CompilerGeneratedAttribute]
public sealed virtual CancellationToken get_CancellationToken();
    [CompilerGeneratedAttribute]
public void set_CancellationToken(CancellationToken value);
    [CompilerGeneratedAttribute]
public sealed virtual Metrics get_Metrics();
    [CompilerGeneratedAttribute]
public void set_Metrics(Metrics value);
    [CompilerGeneratedAttribute]
public sealed virtual ExecutionErrors get_Errors();
    [CompilerGeneratedAttribute]
public void set_Errors(ExecutionErrors value);
    [CompilerGeneratedAttribute]
public sealed virtual IEnumerable`1<object> get_Path();
    [CompilerGeneratedAttribute]
public void set_Path(IEnumerable`1<object> value);
    [CompilerGeneratedAttribute]
public sealed virtual IEnumerable`1<object> get_ResponsePath();
    [CompilerGeneratedAttribute]
public void set_ResponsePath(IEnumerable`1<object> value);
    [CompilerGeneratedAttribute]
public sealed virtual Dictionary`2<string, ValueTuple`2<GraphQLField, FieldType>> get_SubFields();
    [CompilerGeneratedAttribute]
public void set_SubFields(Dictionary`2<string, ValueTuple`2<GraphQLField, FieldType>> value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual IServiceProvider get_RequestServices();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_RequestServices(IServiceProvider value);
    [CompilerGeneratedAttribute]
public sealed virtual IReadOnlyDictionary`2<string, object> get_InputExtensions();
    [CompilerGeneratedAttribute]
public void set_InputExtensions(IReadOnlyDictionary`2<string, object> value);
    [CompilerGeneratedAttribute]
public sealed virtual IDictionary`2<string, object> get_OutputExtensions();
    [CompilerGeneratedAttribute]
public void set_OutputExtensions(IDictionary`2<string, object> value);
    [CompilerGeneratedAttribute]
public sealed virtual IExecutionArrayPool get_ArrayPool();
    [CompilerGeneratedAttribute]
public void set_ArrayPool(IExecutionArrayPool value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual ClaimsPrincipal get_User();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_User(ClaimsPrincipal value);
    [CompilerGeneratedAttribute]
public sealed virtual IExecutionContext get_ExecutionContext();
    [CompilerGeneratedAttribute]
public void set_ExecutionContext(IExecutionContext value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class GraphQL.ResolveFieldContext`1 : ResolveFieldContext {
    public TSource Source { get; public set; }
    public ResolveFieldContext`1(IResolveFieldContext context);
    public sealed virtual TSource get_Source();
    public void set_Source(TSource value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class GraphQL.ResolveFieldContextAdapter`1 : object {
    private IResolveFieldContext _baseContext;
    private static bool _acceptNulls;
    [CompilerGeneratedAttribute]
private T <Source>k__BackingField;
    public T Source { get; private set; }
    public GraphQLField FieldAst { get; }
    public FieldType FieldDefinition { get; }
    public IObjectGraphType ParentType { get; }
    [NullableAttribute("2")]
public IResolveFieldContext Parent { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IDictionary`2<string, ArgumentValue> Arguments { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IDictionary`2<string, DirectiveInfo> Directives { get; }
    [NullableAttribute("2")]
public object RootValue { get; }
    public ISchema Schema { get; }
    public GraphQLDocument Document { get; }
    public GraphQLOperationDefinition Operation { get; }
    public Variables Variables { get; }
    public CancellationToken CancellationToken { get; }
    public Metrics Metrics { get; }
    public ExecutionErrors Errors { get; }
    public IEnumerable`1<object> Path { get; }
    public IEnumerable`1<object> ResponsePath { get; }
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Dictionary`2<string, ValueTuple`2<GraphQLField, FieldType>> SubFields { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IDictionary`2<string, object> UserContext { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IReadOnlyDictionary`2<string, object> InputExtensions { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IDictionary`2<string, object> OutputExtensions { get; }
    [NullableAttribute("2")]
private object GraphQL.IResolveFieldContext.Source { get; }
    [NullableAttribute("2")]
public IServiceProvider RequestServices { get; }
    public IExecutionArrayPool ArrayPool { get; }
    [NullableAttribute("2")]
public ClaimsPrincipal User { get; }
    public IExecutionContext ExecutionContext { get; }
    public ResolveFieldContextAdapter`1(IResolveFieldContext baseContext);
    private static ResolveFieldContextAdapter`1();
    internal void Reset();
    internal ResolveFieldContextAdapter`1<T> Set(IResolveFieldContext baseContext);
    [CompilerGeneratedAttribute]
public sealed virtual T get_Source();
    [CompilerGeneratedAttribute]
private void set_Source(T value);
    public sealed virtual GraphQLField get_FieldAst();
    public sealed virtual FieldType get_FieldDefinition();
    public sealed virtual IObjectGraphType get_ParentType();
    [NullableContextAttribute("2")]
public sealed virtual IResolveFieldContext get_Parent();
    public sealed virtual IDictionary`2<string, ArgumentValue> get_Arguments();
    public sealed virtual IDictionary`2<string, DirectiveInfo> get_Directives();
    [NullableContextAttribute("2")]
public sealed virtual object get_RootValue();
    public sealed virtual ISchema get_Schema();
    public sealed virtual GraphQLDocument get_Document();
    public sealed virtual GraphQLOperationDefinition get_Operation();
    public sealed virtual Variables get_Variables();
    public sealed virtual CancellationToken get_CancellationToken();
    public sealed virtual Metrics get_Metrics();
    public sealed virtual ExecutionErrors get_Errors();
    public sealed virtual IEnumerable`1<object> get_Path();
    public sealed virtual IEnumerable`1<object> get_ResponsePath();
    public sealed virtual Dictionary`2<string, ValueTuple`2<GraphQLField, FieldType>> get_SubFields();
    public sealed virtual IDictionary`2<string, object> get_UserContext();
    public sealed virtual IReadOnlyDictionary`2<string, object> get_InputExtensions();
    public sealed virtual IDictionary`2<string, object> get_OutputExtensions();
    [NullableContextAttribute("2")]
private sealed virtual override object GraphQL.IResolveFieldContext.get_Source();
    [NullableContextAttribute("2")]
public sealed virtual IServiceProvider get_RequestServices();
    public sealed virtual IExecutionArrayPool get_ArrayPool();
    [NullableContextAttribute("2")]
public sealed virtual ClaimsPrincipal get_User();
    public sealed virtual IExecutionContext get_ExecutionContext();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class GraphQL.ResolveFieldContextExtensions : object {
    private static Char[] _separators;
    private static ResolveFieldContextExtensions();
    [ExtensionAttribute]
public static bool HasDirectives(IResolveFieldContext context);
    [ExtensionAttribute]
public static bool HasDirective(IResolveFieldContext context, string name);
    [ExtensionAttribute]
public static DirectiveInfo GetDirective(IResolveFieldContext context, string name);
    [ExtensionAttribute]
public static TType GetArgument(IResolveFieldContext context, string name, TType defaultValue);
    [ExtensionAttribute]
public static object GetArgument(IResolveFieldContext context, Type argumentType, string name, object defaultValue);
    [ExtensionAttribute]
internal static bool TryGetArgument(IResolveFieldContext context, Type argumentType, string name, Object& result);
    [ExtensionAttribute]
internal static bool TryGetArgumentExact(IResolveFieldContext context, Type argumentType, string argumentName, Object& result);
    [ExtensionAttribute]
public static bool HasArgument(IResolveFieldContext context, string name);
    [ExtensionAttribute]
private static bool IsIntrospectionField(FieldType fieldType);
    [ExtensionAttribute]
public static IResolveFieldContext`1<TSourceType> As(IResolveFieldContext context);
    [ExtensionAttribute]
public static object GetInputExtension(IResolveFieldContext context, string path);
    [ExtensionAttribute]
public static object GetOutputExtension(IResolveFieldContext context, string path);
    private static object GetByPath(IReadOnlyDictionary`2<string, object> dictionary, string path, bool useLock);
    [ExtensionAttribute]
public static void SetOutputExtension(IResolveFieldContext context, string path, object value);
    [ExtensionAttribute]
public static IResolveFieldContext Copy(IResolveFieldContext context);
    [ExtensionAttribute]
public static IResolveFieldContext`1<TSource> Copy(IResolveFieldContext`1<TSource> context);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal static object <GetByPath>g__Get|13_0(<>c__DisplayClass13_0& );
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class GraphQL.Resolvers.ExpressionFieldResolver`2 : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Func`2<IResolveFieldContext, ValueTask`1<object>> _resolver;
    private static PropertyInfo _sourcePropertyInfo;
    public ExpressionFieldResolver`2(Expression`1<Func`2<TSourceType, TProperty>> property);
    private static ExpressionFieldResolver`2();
    private sealed virtual override ValueTask`1<object> GraphQL.Resolvers.IFieldResolver.ResolveAsync(IResolveFieldContext context);
}
public class GraphQL.Resolvers.FuncFieldResolver`1 : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Func`2<IResolveFieldContext, ValueTask`1<object>> _resolver;
    public FuncFieldResolver`1(Func`2<IResolveFieldContext, TReturnType> resolver);
    public FuncFieldResolver`1(Func`2<IResolveFieldContext, ValueTask`1<TReturnType>> resolver);
    [NullableContextAttribute("1")]
public sealed virtual ValueTask`1<object> ResolveAsync(IResolveFieldContext context);
}
public class GraphQL.Resolvers.FuncFieldResolver`2 : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Func`2<IResolveFieldContext, ValueTask`1<object>> _resolver;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static ResolveFieldContextAdapter`1<TSourceType> _sharedAdapter;
    public FuncFieldResolver`2(Func`2<IResolveFieldContext`1<TSourceType>, TReturnType> resolver);
    public FuncFieldResolver`2(Func`2<IResolveFieldContext`1<TSourceType>, ValueTask`1<TReturnType>> resolver);
    private Func`2<IResolveFieldContext, ValueTask`1<object>> GetResolverFor(Func`2<IResolveFieldContext`1<TSourceType>, TReturnType> resolver);
    [NullableContextAttribute("1")]
public sealed virtual ValueTask`1<object> ResolveAsync(IResolveFieldContext context);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
internal static bool <GetResolverFor>g__CanReuseContextForType|4_4(Type type);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal static bool <GetResolverFor>g__CanReuseContextForValue|4_5(object value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
internal static bool <GetResolverFor>g__IsEnumerableType|4_6(Type type);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal static bool <GetResolverFor>g__IsEnumerableValue|4_7(object value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
internal static bool <GetResolverFor>g__IsDataLoaderType|4_8(Type type);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal static bool <GetResolverFor>g__IsDataLoaderValue|4_9(object value);
}
[NullableContextAttribute("1")]
public interface GraphQL.Resolvers.IFieldResolver {
    public abstract virtual ValueTask`1<object> ResolveAsync(IResolveFieldContext context);
}
[NullableContextAttribute("1")]
public interface GraphQL.Resolvers.ISourceStreamResolver {
    public abstract virtual ValueTask`1<IObservable`1<object>> ResolveAsync(IResolveFieldContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class GraphQL.Resolvers.MemberResolver : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Func`2<IResolveFieldContext, ValueTask`1<object>> _resolver;
    private static MethodInfo _marshalTaskAsyncMethod;
    private static MethodInfo _marshalValueTaskAsyncMethod;
    public MemberResolver(FieldInfo fieldInfo, LambdaExpression instanceExpression);
    public MemberResolver(PropertyInfo propertyInfo, LambdaExpression instanceExpression);
    public MemberResolver(MethodInfo methodInfo, LambdaExpression instanceExpression, IList`1<LambdaExpression> methodArgumentExpressions);
    private static MemberResolver();
    protected virtual Func`2<IResolveFieldContext, ValueTask`1<object>> BuildFieldResolver(ParameterExpression resolveFieldContextParameter, Expression bodyExpression);
    internal static Func`2<IResolveFieldContext, ValueTask`1<object>> BuildFieldResolverInternal(ParameterExpression resolveFieldContextParameter, Expression bodyExpression);
    [AsyncStateMachineAttribute("GraphQL.Resolvers.MemberResolver/<MarshalTaskAsync>d__7`1")]
private static ValueTask`1<object> MarshalTaskAsync(Task`1<T> task);
    [NullableContextAttribute("2")]
[AsyncStateMachineAttribute("GraphQL.Resolvers.MemberResolver/<MarshalValueTaskAsync>d__9`1")]
private static ValueTask`1<object> MarshalValueTaskAsync(ValueTask`1<T> task);
    public virtual ValueTask`1<object> ResolveAsync(IResolveFieldContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class GraphQL.Resolvers.NameFieldResolver : object {
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static ConcurrentDictionary`2<ValueTuple`2<Type, string>, IFieldResolver> _resolvers;
    [CompilerGeneratedAttribute]
private static NameFieldResolver <Instance>k__BackingField;
    private static PropertyInfo _sourcePropertyInfo;
    public static NameFieldResolver Instance { get; }
    private static NameFieldResolver();
    [CompilerGeneratedAttribute]
public static NameFieldResolver get_Instance();
    public sealed virtual ValueTask`1<object> ResolveAsync(IResolveFieldContext context);
    private static ValueTask`1<object> Resolve(IResolveFieldContext context, string name);
    private static IFieldResolver CreateResolver(Type target, string name);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class GraphQL.Resolvers.ObservableAdapter`1 : object {
    private IObservable`1<T> _observable;
    public ObservableAdapter`1(IObservable`1<T> observable);
    public sealed virtual IDisposable Subscribe(IObserver`1<object> observer);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class GraphQL.Resolvers.ObservableFromAsyncEnumerable`1 : object {
    private CancellationTokenSource _cancellationTokenSource;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private IAsyncEnumerable`1<T> _enumerable;
    private ObservableFromAsyncEnumerable`1(CancellationTokenSource cts, IAsyncEnumerable`1<T> enumerable);
    public static Func`2<IResolveFieldContext, ValueTask`1<IObservable`1<object>>> Create(Func`2<IResolveFieldContext, ValueTask`1<IAsyncEnumerable`1<T>>> func);
    public static Func`2<IResolveFieldContext, ValueTask`1<IObservable`1<object>>> Create(Func`2<IResolveFieldContext, Task`1<IAsyncEnumerable`1<T>>> func);
    public static Func`2<IResolveFieldContext, ValueTask`1<IObservable`1<object>>> Create(Func`2<IResolveFieldContext, IAsyncEnumerable`1<T>> func);
    public sealed virtual IDisposable Subscribe(IObserver`1<object> observer);
    [AsyncStateMachineAttribute("GraphQL.Resolvers.ObservableFromAsyncEnumerable`1/<SubscribeInternalAsync>d__7")]
private void SubscribeInternalAsync(IObserver`1<object> observer, IAsyncEnumerable`1<T> enumerable);
    private sealed virtual override void System.IDisposable.Dispose();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class GraphQL.Resolvers.SourceFieldResolver : object {
    [CompilerGeneratedAttribute]
private static SourceFieldResolver <Instance>k__BackingField;
    public static SourceFieldResolver Instance { get; }
    private static SourceFieldResolver();
    [CompilerGeneratedAttribute]
public static SourceFieldResolver get_Instance();
    public sealed virtual ValueTask`1<object> ResolveAsync(IResolveFieldContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class GraphQL.Resolvers.SourceStreamMethodResolver : MemberResolver {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Func`2<IResolveFieldContext, ValueTask`1<IObservable`1<object>>> _sourceStreamResolver;
    private static ConstructorInfo _valueTaskObservableCtor;
    private static ConstructorInfo _valueTaskTaskObservableCtor;
    private static MethodInfo _convertFromAsyncEnumerableMethodInfo;
    private static MethodInfo _convertFromTaskAsyncEnumerableMethodInfo;
    private static MethodInfo _convertFromValueTaskAsyncEnumerableMethodInfo;
    private static MethodInfo _castFromValueTaskAsyncMethodInfo;
    private static MethodInfo _castFromValueTask2AsyncMethodInfo;
    private static MethodInfo _castFromTaskAsyncMethodInfo;
    private static MethodInfo _castFromTask2AsyncMethodInfo;
    public SourceStreamMethodResolver(MethodInfo methodInfo, LambdaExpression instanceExpression, IList`1<LambdaExpression> methodArgumentExpressions);
    private static SourceStreamMethodResolver();
    protected virtual Func`2<IResolveFieldContext, ValueTask`1<object>> BuildFieldResolver(ParameterExpression resolveFieldContextParameter, Expression bodyExpression);
    protected virtual Func`2<IResolveFieldContext, ValueTask`1<IObservable`1<object>>> BuildSourceStreamResolver(ParameterExpression resolveFieldContextParameter, Expression bodyExpression);
    private static Func`2<IResolveFieldContext, ValueTask`1<IObservable`1<object>>> ConvertFromAsyncEnumerable(Expression body, ParameterExpression resolveFieldContextParameter);
    private static Func`2<IResolveFieldContext, ValueTask`1<IObservable`1<object>>> ConvertFromTaskAsyncEnumerable(Expression body, ParameterExpression resolveFieldContextParameter);
    private static Func`2<IResolveFieldContext, ValueTask`1<IObservable`1<object>>> ConvertFromValueTaskAsyncEnumerable(Expression body, ParameterExpression resolveFieldContextParameter);
    [AsyncStateMachineAttribute("GraphQL.Resolvers.SourceStreamMethodResolver/<CastFromValueTaskAsync>d__13`1")]
private static ValueTask`1<IObservable`1<object>> CastFromValueTaskAsync(ValueTask`1<IObservable`1<T>> task);
    [NullableContextAttribute("2")]
[AsyncStateMachineAttribute("GraphQL.Resolvers.SourceStreamMethodResolver/<CastFromValueTask2Async>d__15`1")]
private static ValueTask`1<IObservable`1<object>> CastFromValueTask2Async(ValueTask`1<IObservable`1<T>> task);
    [AsyncStateMachineAttribute("GraphQL.Resolvers.SourceStreamMethodResolver/<CastFromTaskAsync>d__17`1")]
private static ValueTask`1<IObservable`1<object>> CastFromTaskAsync(Task`1<IObservable`1<T>> task);
    [AsyncStateMachineAttribute("GraphQL.Resolvers.SourceStreamMethodResolver/<CastFromTask2Async>d__19`1")]
private static ValueTask`1<IObservable`1<object>> CastFromTask2Async(Task`1<IObservable`1<T>> task);
    public ValueTask`1<IObservable`1<object>> ResolveStreamAsync(IResolveFieldContext context);
    private sealed virtual override ValueTask`1<IObservable`1<object>> GraphQL.Resolvers.ISourceStreamResolver.ResolveAsync(IResolveFieldContext context);
    [CompilerGeneratedAttribute]
internal static Func`2<IResolveFieldContext, ValueTask`1<IObservable`1<object>>> <BuildSourceStreamResolver>g__Compile|3_0(Expression taskBodyExpression, <>c__DisplayClass3_0& );
}
public class GraphQL.Resolvers.SourceStreamResolver`1 : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Func`2<IResolveFieldContext, ValueTask`1<IObservable`1<object>>> _sourceStreamResolver;
    public SourceStreamResolver`1(Func`2<IResolveFieldContext, IObservable`1<TReturnType>> sourceStreamResolver);
    public SourceStreamResolver`1(Func`2<IResolveFieldContext, ValueTask`1<IObservable`1<TReturnType>>> sourceStreamResolver);
    [NullableContextAttribute("1")]
public sealed virtual ValueTask`1<IObservable`1<object>> ResolveAsync(IResolveFieldContext context);
}
public class GraphQL.Resolvers.SourceStreamResolver`2 : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Func`2<IResolveFieldContext, ValueTask`1<IObservable`1<object>>> _sourceStreamResolver;
    public SourceStreamResolver`2(Func`2<IResolveFieldContext`1<TSourceType>, IObservable`1<TReturnType>> sourceStreamResolver);
    public SourceStreamResolver`2(Func`2<IResolveFieldContext`1<TSourceType>, ValueTask`1<IObservable`1<TReturnType>>> sourceStreamResolver);
    [NullableContextAttribute("1")]
public sealed virtual ValueTask`1<IObservable`1<object>> ResolveAsync(IResolveFieldContext context);
}
public enum GraphQL.ResolverType : Enum {
    public int value__;
    public static ResolverType Resolver;
    public static ResolverType StreamResolver;
}
internal static class GraphQL.SByte : object {
    public static bool TryParse(ReadOnlySpan`1<char> s, SByte& result);
    public static bool TryParse(ReadOnlySpan`1<char> s, NumberStyles style, IFormatProvider provider, SByte& result);
    public static sbyte Parse(ReadOnlySpan`1<char> s);
    public static sbyte Parse(ReadOnlySpan`1<char> s, NumberStyles style, IFormatProvider provider);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class GraphQL.SchemaExtensions : object {
    private static PrintOptions _defaultPrintOptions;
    private static SchemaExtensions();
    [ExtensionAttribute]
public static void RegisterVisitor(ISchema schema);
    [ExtensionAttribute]
public static void RegisterType(ISchema schema);
    [ExtensionAttribute]
public static TSchema RegisterTypes(TSchema schema, Type[] types);
    [ExtensionAttribute]
public static void RegisterTypes(TSchema schema, IGraphType[] types);
    [ExtensionAttribute]
public static void RegisterTypeMapping(ISchema schema);
    [NullableContextAttribute("2")]
private static void Preserve();
    [ExtensionAttribute]
public static string Print(ISchema schema, PrintOptions options);
    [ExtensionAttribute]
public static ValueTask PrintAsync(ISchema schema, TextWriter writer, PrintOptions options, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static void AutoRegister(ISchema schema, Type clrType, AutoRegisteringMode mode);
    [ExtensionAttribute]
public static void AutoRegister(ISchema schema, AutoRegisteringMode mode);
    [ExtensionAttribute]
public static void RegisterTypeMappings(ISchema schema);
    [ExtensionAttribute]
public static void RegisterTypeMappings(ISchema schema, Assembly assembly);
    [ExtensionAttribute]
public static TSchema EnableExperimentalIntrospectionFeatures(TSchema schema, ExperimentalIntrospectionFeaturesMode mode);
    [AsyncStateMachineAttribute("GraphQL.SchemaExtensions/<ExecuteAsync>d__14")]
[ExtensionAttribute]
public static Task`1<string> ExecuteAsync(ISchema schema, IGraphQLTextSerializer serializer, Action`1<ExecutionOptions> configure);
    [ExtensionAttribute]
public static void Run(ISchemaNodeVisitor visitor, ISchema schema);
    [ExtensionAttribute]
public static TSchema ReplaceScalar(TSchema schema, ScalarGraphType scalar);
    [ExtensionAttribute]
public static GraphQLDocument ToAST(ISchema schema);
    [ExtensionAttribute]
public static void AddLinkDirectiveSupport(ISchema schema, Action`1<LinkConfiguration> configuration);
    [ExtensionAttribute]
public static void LinkSchema(ISchema schema, string url, Action`1<LinkConfiguration> configuration);
    [ExtensionAttribute]
public static IEnumerable`1<LinkConfiguration> GetLinkedSchemas(ISchema schema);
}
internal static class GraphQL.Short : object {
    public static bool TryParse(ReadOnlySpan`1<char> s, Int16& result);
    public static bool TryParse(ReadOnlySpan`1<char> s, NumberStyles style, IFormatProvider provider, Int16& result);
    public static short Parse(ReadOnlySpan`1<char> s);
    public static short Parse(ReadOnlySpan`1<char> s, NumberStyles style, IFormatProvider provider);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class GraphQL.StringExtensions : object {
    private static Char[] _bangs;
    private static StringExtensions();
    [ExtensionAttribute]
internal static string ToFormat(string format, Object[] args);
    [ExtensionAttribute]
public static string ToCamelCase(string s);
    [ExtensionAttribute]
public static string ToPascalCase(string s);
    private static string FastChangeFirstLetter(char newFirstLetter, string s);
    [ExtensionAttribute]
public static string ToConstantCase(string value);
    [ExtensionAttribute]
public static string TrimGraphQLTypes(string name);
    [CompilerGeneratedAttribute]
internal static void <ToConstantCase>g__InsertUnderscore|4_0(<>c__DisplayClass4_0& );
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class GraphQL.Transport.GraphQLRequest : object {
    [CompilerGeneratedAttribute]
private string <OperationName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Query>k__BackingField;
    [CompilerGeneratedAttribute]
private Inputs <Variables>k__BackingField;
    [CompilerGeneratedAttribute]
private Inputs <Extensions>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DocumentId>k__BackingField;
    public string OperationName { get; public set; }
    public string Query { get; public set; }
    public Inputs Variables { get; public set; }
    public Inputs Extensions { get; public set; }
    public string DocumentId { get; public set; }
    [CompilerGeneratedAttribute]
public string get_OperationName();
    [CompilerGeneratedAttribute]
public void set_OperationName(string value);
    [CompilerGeneratedAttribute]
public string get_Query();
    [CompilerGeneratedAttribute]
public void set_Query(string value);
    [CompilerGeneratedAttribute]
public Inputs get_Variables();
    [CompilerGeneratedAttribute]
public void set_Variables(Inputs value);
    [CompilerGeneratedAttribute]
public Inputs get_Extensions();
    [CompilerGeneratedAttribute]
public void set_Extensions(Inputs value);
    [CompilerGeneratedAttribute]
public string get_DocumentId();
    [CompilerGeneratedAttribute]
public void set_DocumentId(string value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class GraphQL.Transport.OperationMessage : object {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Payload>k__BackingField;
    public string Id { get; public set; }
    public string Type { get; public set; }
    public object Payload { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(string value);
    [CompilerGeneratedAttribute]
public string get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(string value);
    [CompilerGeneratedAttribute]
public object get_Payload();
    [CompilerGeneratedAttribute]
public void set_Payload(object value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class GraphQL.TypeExtensions : object {
    [ExtensionAttribute]
internal static Type GetListElementType(Type listType);
    [ExtensionAttribute]
internal static Object[] ToObjectArray(IEnumerable values);
    [ExtensionAttribute]
public static bool IsGraphType(Type type);
    [ExtensionAttribute]
internal static bool IsNamedType(Type type);
    [ExtensionAttribute]
public static string GraphQLName(Type type);
    [ExtensionAttribute]
public static Type GetGraphTypeFromType(Type type, bool isNullable, TypeMappingMode mode);
    [ExtensionAttribute]
internal static string GetFriendlyName(Type type);
    private static bool TryGetEnumerableElementType(Type type, Type& elementType);
    [ExtensionAttribute]
public static bool ImplementsGenericType(Type type, Type genericType);
    [ExtensionAttribute]
public static string Description(MemberInfo memberInfo);
    [ExtensionAttribute]
public static string Description(ParameterInfo parameterInfo);
    [ExtensionAttribute]
public static string ObsoleteMessage(MemberInfo memberInfo);
    [ExtensionAttribute]
public static object DefaultValue(MemberInfo memberInfo);
    [ExtensionAttribute]
public static IEnumerable`1<GraphQLAttribute> GetGraphQLAttributes(MemberInfo memberInfo);
    [ExtensionAttribute]
public static IEnumerable`1<GraphQLAttribute> GetGraphQLAttributes(ParameterInfo parameterInfo);
    [ExtensionAttribute]
internal static ValueTuple`3<MemberInfo, bool, bool> FindWritableMember(Type type, string propertyName);
    [CompilerGeneratedAttribute]
internal static string <GraphQLName>g__NameOf|4_0(Type type);
    [CompilerGeneratedAttribute]
internal static bool <GetGraphTypeFromType>g__IsNullableType|5_0(Type type);
}
public enum GraphQL.TypeMappingMode : Enum {
    public int value__;
    public static TypeMappingMode UseBuiltInScalarMappings;
    public static TypeMappingMode InputType;
    public static TypeMappingMode OutputType;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class GraphQL.Types.AbstractGraphTypeExtensions : object {
    [ExtensionAttribute]
public static bool IsPossibleType(IAbstractGraphType abstractType, IGraphType type);
    [ExtensionAttribute]
public static IObjectGraphType GetObjectType(IAbstractGraphType abstractType, object value, ISchema schema);
    [CompilerGeneratedAttribute]
internal static IObjectGraphType <GetObjectType>g__GetTypeOf|1_0(IAbstractGraphType abstractType, object value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class GraphQL.Types.AppliedDirective : MetadataProvider {
    private string _name;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private List`1<DirectiveArgument> <List>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <FromSchemaUrl>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal List`1<DirectiveArgument> List { get; private set; }
    public string Name { get; public set; }
    [NullableAttribute("2")]
public string FromSchemaUrl { get; public set; }
    public int ArgumentsCount { get; }
    public AppliedDirective(string name);
    [CompilerGeneratedAttribute]
internal List`1<DirectiveArgument> get_List();
    [CompilerGeneratedAttribute]
private void set_List(List`1<DirectiveArgument> value);
    public string get_Name();
    public void set_Name(string value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_FromSchemaUrl();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_FromSchemaUrl(string value);
    public int get_ArgumentsCount();
    public AppliedDirective AddArgument(DirectiveArgument argument);
    public DirectiveArgument FindArgument(string argumentName);
    public sealed virtual IEnumerator`1<DirectiveArgument> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class GraphQL.Types.AppliedDirectives : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private List`1<AppliedDirective> <List>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal List`1<AppliedDirective> List { get; private set; }
    public int Count { get; }
    [CompilerGeneratedAttribute]
internal List`1<AppliedDirective> get_List();
    [CompilerGeneratedAttribute]
private void set_List(List`1<AppliedDirective> value);
    public int get_Count();
    public void Add(AppliedDirective directive);
    public AppliedDirective Find(string name);
    public int Remove(string name);
    public sealed virtual IEnumerator`1<AppliedDirective> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class GraphQL.Types.ArgumentInformation : object {
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private ParameterInfo <ParameterInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <SourceType>k__BackingField;
    [CompilerGeneratedAttribute]
private FieldType <FieldType>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private TypeInformation <TypeInformation>k__BackingField;
    private LambdaExpression _expression;
    [NullableAttribute("1")]
public ParameterInfo ParameterInfo { get; }
    public Type SourceType { get; }
    public FieldType FieldType { get; }
    [NullableAttribute("1")]
public TypeInformation TypeInformation { get; }
    public LambdaExpression Expression { get; public set; }
    public ArgumentInformation(ParameterInfo parameterInfo, Type sourceType, FieldType fieldType, TypeInformation typeInformation, LambdaExpression expression);
    [NullableContextAttribute("1")]
public ArgumentInformation(ParameterInfo parameterInfo, Type sourceType, FieldType fieldType, TypeInformation typeInformation);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public ParameterInfo get_ParameterInfo();
    [CompilerGeneratedAttribute]
public Type get_SourceType();
    [CompilerGeneratedAttribute]
public FieldType get_FieldType();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public TypeInformation get_TypeInformation();
    public LambdaExpression get_Expression();
    public void set_Expression(LambdaExpression value);
    public void SetDelegate(Func`2<IResolveFieldContext, TParameterType> argumentDelegate);
    public void SetDelegateWithCast(Func`2<IResolveFieldContext, object> argumentDelegate);
    public virtual void ApplyAttributes();
    public virtual ValueTuple`2<QueryArgument, LambdaExpression> ConstructQueryArgument();
}
public class GraphQL.Types.AsIsCaseAttribute : EnumCaseAttribute {
    [NullableContextAttribute("1")]
public virtual string ChangeEnumCase(string val);
}
public class GraphQL.Types.AutoRegisteringGraphTypeMappingProvider : object {
    private bool _mapInputTypes;
    private bool _mapOutputTypes;
    private bool _mapInterfaceTypes;
    public AutoRegisteringGraphTypeMappingProvider(bool mapInputTypes, bool mapOutputTypes, bool mapInterfaceTypes);
    [NullableContextAttribute("2")]
public virtual Type GetGraphTypeFromClrType(Type clrType, bool isInputType, Type preferredType);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
internal static bool <GetGraphTypeFromClrType>g__IsForcedType|5_0(Type type);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class GraphQL.Types.AutoRegisteringHelper : object {
    private static MethodInfo _buildSourceExpressionForSchemaBuilderInternalMethodInfo;
    private static MethodInfo _getArgumentMethod;
    private static AutoRegisteringHelper();
    public static IFieldResolver BuildFieldResolver(MemberInfo memberInfo, Type sourceType, FieldType fieldType, LambdaExpression instanceExpression);
    public static ISourceStreamResolver BuildSourceStreamResolver(MethodInfo methodInfo, Type sourceType, FieldType fieldType, LambdaExpression instanceExpression);
    private static IList`1<LambdaExpression> BuildFieldResolver_BuildMethodArguments(MethodInfo methodInfo, Type sourceType, FieldType fieldType);
    internal static LambdaExpression BuildInstanceExpressionForSchemaBuilder(Type sourceType, IServiceProvider serviceProvider);
    private static Expression`1<Func`2<IResolveFieldContext, T>> BuildSourceExpressionForSchemaBuilderInternal(IServiceProvider serviceProvider);
    private static T BuildSourceExpressionForSchemaBuilderInternal_GetSource(IResolveFieldContext context, IServiceProvider serviceProvider);
    internal static void ApplyGraphQLAttributes(IGraphType graphType);
    internal static IEnumerable`1<PropertyInfo> ExcludeProperties(IEnumerable`1<PropertyInfo> properties, Expression`1[] excludedProperties);
    internal static FieldType CreateField(IGraphType graphType, MemberInfo memberInfo, Func`2<MemberInfo, TypeInformation> getTypeInformation, Action`2<FieldType, MemberInfo> buildFieldType, bool isInputType);
    internal static FieldType CreateField(MemberInfo memberInfo, Type graphType, bool isInputType);
    internal static void ApplyFieldAttributes(IGraphType graphType, MemberInfo memberInfo, FieldType fieldType, bool isInputType, Boolean& ignore);
    private static string GetPropertyName(Expression`1<Func`2<TSourceType, object>> expression);
    internal static LambdaExpression GetParameterExpression(Type parameterType, QueryArgument queryArgument);
    private static T GetArgumentInternal(IResolveFieldContext context, QueryArgument queryArgument);
    [IteratorStateMachineAttribute("GraphQL.Types.AutoRegisteringHelper/<ProvideFields>d__16")]
internal static IEnumerable`1<FieldType> ProvideFields(IEnumerable`1<MemberInfo> members, Func`2<MemberInfo, FieldType> createField, bool isInputType);
    internal static TypeInformation GetTypeInformation(MemberInfo memberInfo, bool isInputType);
    internal static TypeInformation GetTypeInformation(ParameterInfo parameterInfo);
    [NullableContextAttribute("2")]
internal static ConstructorInfo GetConstructorOrDefault();
    internal static ConstructorInfo GetConstructorOrDefault(Type sourceType);
    internal static ConstructorInfo GetConstructor(Type sourceType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class GraphQL.Types.AutoRegisteringInputObjectGraphType : object {
    [CompilerGeneratedAttribute]
private static ConcurrentDictionary`2<Type, IInputObjectGraphType> <ReflectionCache>k__BackingField;
    public static ConcurrentDictionary`2<Type, IInputObjectGraphType> ReflectionCache { get; }
    private static AutoRegisteringInputObjectGraphType();
    [CompilerGeneratedAttribute]
public static ConcurrentDictionary`2<Type, IInputObjectGraphType> get_ReflectionCache();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class GraphQL.Types.AutoRegisteringInputObjectGraphType`1 : InputObjectGraphType`1<TSourceType> {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Expression`1[] _excludedProperties;
    public AutoRegisteringInputObjectGraphType`1(Expression`1[] excludedProperties);
    internal AutoRegisteringInputObjectGraphType`1(AutoRegisteringInputObjectGraphType`1<TSourceType> cloneFrom, Expression`1[] excludedProperties, bool cache);
    protected virtual void ConfigureGraph();
    protected virtual IEnumerable`1<FieldType> ProvideFields();
    protected virtual FieldType CreateField(MemberInfo memberInfo);
    protected virtual IEnumerable`1<MemberInfo> GetRegisteredMembers();
    protected virtual TypeInformation GetTypeInformation(MemberInfo memberInfo);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class GraphQL.Types.AutoRegisteringInterfaceGraphType : object {
    [CompilerGeneratedAttribute]
private static ConcurrentDictionary`2<Type, IInterfaceGraphType> <ReflectionCache>k__BackingField;
    public static ConcurrentDictionary`2<Type, IInterfaceGraphType> ReflectionCache { get; }
    private static AutoRegisteringInterfaceGraphType();
    [CompilerGeneratedAttribute]
public static ConcurrentDictionary`2<Type, IInterfaceGraphType> get_ReflectionCache();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class GraphQL.Types.AutoRegisteringInterfaceGraphType`1 : InterfaceGraphType`1<TSourceType> {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Expression`1[] _excludedProperties;
    private static MethodInfo _getArgumentInformationInternalMethodInfo;
    public AutoRegisteringInterfaceGraphType`1(Expression`1[] excludedProperties);
    internal AutoRegisteringInterfaceGraphType`1(AutoRegisteringInterfaceGraphType`1<TSourceType> cloneFrom, Expression`1[] excludedProperties, bool cache);
    private static AutoRegisteringInterfaceGraphType`1();
    protected virtual void ConfigureGraph();
    protected virtual IEnumerable`1<FieldType> ProvideFields();
    protected virtual FieldType CreateField(MemberInfo memberInfo);
    protected void BuildFieldType(FieldType fieldType, MemberInfo memberInfo);
    private ArgumentInformation GetArgumentInformationInternal(FieldType fieldType, ParameterInfo parameterInfo);
    protected virtual void ApplyArgumentAttributes(ParameterInfo parameterInfo, QueryArgument queryArgument);
    protected virtual ArgumentInformation GetArgumentInformation(FieldType fieldType, ParameterInfo parameterInfo);
    protected virtual IEnumerable`1<MemberInfo> GetRegisteredMembers();
    protected virtual TypeInformation GetTypeInformation(MemberInfo memberInfo);
    protected virtual TypeInformation GetTypeInformation(ParameterInfo parameterInfo);
    [CompilerGeneratedAttribute]
private Func`3<FieldType, ParameterInfo, ArgumentInformation> <BuildFieldType>b__7_0(Type parameterType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class GraphQL.Types.AutoRegisteringObjectGraphType : object {
    [CompilerGeneratedAttribute]
private static ConcurrentDictionary`2<Type, IObjectGraphType> <ReflectionCache>k__BackingField;
    public static ConcurrentDictionary`2<Type, IObjectGraphType> ReflectionCache { get; }
    private static AutoRegisteringObjectGraphType();
    [CompilerGeneratedAttribute]
public static ConcurrentDictionary`2<Type, IObjectGraphType> get_ReflectionCache();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class GraphQL.Types.AutoRegisteringObjectGraphType`1 : ObjectGraphType`1<TSourceType> {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Expression`1[] _excludedProperties;
    private static Expression`1<Func`2<IResolveFieldContext, TSourceType>> _sourceExpression;
    private static MethodInfo _getArgumentInformationInternalMethodInfo;
    public AutoRegisteringObjectGraphType`1(Expression`1[] excludedProperties);
    internal AutoRegisteringObjectGraphType`1(AutoRegisteringObjectGraphType`1<TSourceType> cloneFrom, Expression`1[] excludedProperties, bool cache);
    private static AutoRegisteringObjectGraphType`1();
    protected virtual void ConfigureGraph();
    protected virtual IEnumerable`1<FieldType> ProvideFields();
    protected virtual FieldType CreateField(MemberInfo memberInfo);
    protected void BuildFieldType(FieldType fieldType, MemberInfo memberInfo);
    protected virtual LambdaExpression BuildMemberInstanceExpression(MemberInfo memberInfo);
    private static object ThrowSourceNullException();
    private ArgumentInformation GetArgumentInformationInternal(FieldType fieldType, ParameterInfo parameterInfo);
    protected virtual void ApplyArgumentAttributes(ParameterInfo parameterInfo, QueryArgument queryArgument);
    protected virtual ArgumentInformation GetArgumentInformation(FieldType fieldType, ParameterInfo parameterInfo);
    protected virtual IEnumerable`1<MemberInfo> GetRegisteredMembers();
    protected virtual TypeInformation GetTypeInformation(MemberInfo memberInfo);
    protected virtual TypeInformation GetTypeInformation(ParameterInfo parameterInfo);
    [CompilerGeneratedAttribute]
private Func`3<FieldType, ParameterInfo, ArgumentInformation> <BuildFieldType>b__7_0(Type parameterType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class GraphQL.Types.AutoRegisteringOutputHelper : object {
    public static void BuildFieldType(MemberInfo memberInfo, FieldType fieldType, Func`2<MemberInfo, LambdaExpression> buildMemberInstanceExpressionFunc, Func`2<Type, Func`3<FieldType, ParameterInfo, ArgumentInformation>> getTypedArgumentInfoMethod, Action`2<ParameterInfo, QueryArgument> applyArgumentAttributesFunc);
    private static bool IsObservableOrAsyncEnumerable(Type type);
    public static IEnumerable`1<MemberInfo> GetRegisteredMembers(Expression`1[] excludedProperties);
    private static bool IsRecordEqualsMethod(MethodInfo method);
    private static bool IsTypeSourceOrAncestor(Type sourceType, Type type);
    public static ArgumentInformation GetArgumentInformation(TypeInformation typeInformation, FieldType fieldType, ParameterInfo parameterInfo);
    public static void ApplyArgumentAttributes(ParameterInfo parameterInfo, QueryArgument queryArgument);
}
public class GraphQL.Types.AutoSchema`1 : Schema {
    [NullableContextAttribute("1")]
public AutoSchema`1(IServiceProvider serviceProvider);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class GraphQL.Types.BigIntGraphType : ScalarGraphType {
    public virtual object ParseLiteral(GraphQLValue value);
    public virtual bool CanParseLiteral(GraphQLValue value);
    [NullableContextAttribute("2")]
public virtual object ParseValue(object value);
    public virtual bool CanSerializeList(IEnumerable list, bool allowNulls);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class GraphQL.Types.BooleanGraphType : ScalarGraphType {
    public virtual object ParseLiteral(GraphQLValue value);
    public virtual bool CanParseLiteral(GraphQLValue value);
    [NullableContextAttribute("2")]
public virtual object ParseValue(object value);
    [NullableContextAttribute("2")]
public virtual bool CanParseValue(object value);
    public virtual GraphQLValue ToAST(object value);
    public virtual bool CanSerializeList(IEnumerable list, bool allowNulls);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class GraphQL.Types.ByteGraphType : ScalarGraphType {
    public virtual object ParseLiteral(GraphQLValue value);
    public virtual bool CanParseLiteral(GraphQLValue value);
    [NullableContextAttribute("2")]
public virtual object ParseValue(object value);
    public virtual bool CanSerializeList(IEnumerable list, bool allowNulls);
}
public class GraphQL.Types.CamelCaseAttribute : EnumCaseAttribute {
    [NullableContextAttribute("1")]
public virtual string ChangeEnumCase(string val);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class GraphQL.Types.Collections.ManualGraphTypeMappingProvider : object {
    private Type _clrType;
    private Type _graphType;
    private bool _isInputType;
    private bool _isOutputType;
    public ManualGraphTypeMappingProvider(Type clrType, Type graphType);
    [NullableContextAttribute("2")]
public sealed virtual Type GetGraphTypeFromClrType(Type clrType, bool isInputType, Type preferredGraphType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class GraphQL.Types.ComplexGraphType`1 : GraphType {
    internal static string ORIGINAL_EXPRESSION_PROPERTY_NAME;
    [CompilerGeneratedAttribute]
private TypeFields <Fields>k__BackingField;
    public TypeFields Fields { get; }
    internal ComplexGraphType`1(ComplexGraphType`1<TSourceType> cloneFrom);
    [CompilerGeneratedAttribute]
public sealed virtual TypeFields get_Fields();
    public sealed virtual bool HasField(string name);
    [NullableContextAttribute("2")]
public sealed virtual FieldType GetField(ROM name);
    public virtual FieldType AddField(FieldType fieldType);
    [ObsoleteAttribute("Please use the overload that accepts the name as the first argument. This method will be removed in v9.")]
protected virtual FieldBuilder`2<TSourceType, TReturnType> CreateBuilder(Type type);
    protected virtual FieldBuilder`2<TSourceType, TReturnType> CreateBuilder(string name, Type type);
    [ObsoleteAttribute("Please use the overload that accepts the name as the first argument. This method will be removed in v9.")]
protected virtual FieldBuilder`2<TSourceType, TReturnType> CreateBuilder(IGraphType type);
    protected virtual FieldBuilder`2<TSourceType, TReturnType> CreateBuilder(string name, IGraphType type);
    [ObsoleteAttribute("Please use one of the Field() methods returning FieldBuilder and the methods defined on it or just use AddField() method directly. This method will be removed in v9.")]
public FieldType Field(Type type, string name, string description, QueryArguments arguments, Func`2<IResolveFieldContext`1<TSourceType>, object> resolve, string deprecationReason);
    [ObsoleteAttribute("Please use one of the Field() methods returning FieldBuilder and the methods defined on it or just use AddField() method directly. This method will be removed in v9.")]
public FieldType Field(string name, string description, QueryArguments arguments, Func`2<IResolveFieldContext`1<TSourceType>, object> resolve, string deprecationReason);
    [NullableContextAttribute("2")]
[ObsoleteAttribute("Please use one of the Field() methods returning FieldBuilder and the methods defined on it or just use AddField() method directly. This method will be removed in v9.")]
public FieldType FieldDelegate(string name, string description, QueryArguments arguments, Delegate resolve, string deprecationReason);
    [ObsoleteAttribute("Please use one of the Field() methods returning FieldBuilder and the methods defined on it or just use AddField() method directly. This method will be removed in v9.")]
public FieldType FieldAsync(Type type, string name, string description, QueryArguments arguments, Func`2<IResolveFieldContext`1<TSourceType>, Task`1<object>> resolve, string deprecationReason);
    [ObsoleteAttribute("Please use one of the Field() methods returning FieldBuilder and the methods defined on it or just use AddField() method directly. This method will be removed in v9.")]
public FieldType FieldAsync(string name, string description, QueryArguments arguments, Func`2<IResolveFieldContext`1<TSourceType>, Task`1<object>> resolve, string deprecationReason);
    [NullableContextAttribute("2")]
[ObsoleteAttribute("Please use one of the Field() methods returning FieldBuilder and the methods defined on it or just use AddField() method directly. This method will be removed in v9.")]
public FieldType FieldAsync(string name, string description, QueryArguments arguments, Func`2<IResolveFieldContext`1<TSourceType>, Task`1<TReturnType>> resolve, string deprecationReason);
    [ObsoleteAttribute("Please use one of the Field() methods returning FieldBuilder and the methods defined on it or just use AddField() method directly. This method will be removed in v9.")]
public FieldType FieldSubscribe(string name, string description, QueryArguments arguments, Func`2<IResolveFieldContext`1<TSourceType>, object> resolve, Func`2<IResolveFieldContext, IObservable`1<object>> subscribe, string deprecationReason);
    [ObsoleteAttribute("Please use one of the Field() methods returning FieldBuilder and the methods defined on it or just use AddField() method directly. This method will be removed in v9.")]
public FieldType FieldSubscribeAsync(string name, string description, QueryArguments arguments, Func`2<IResolveFieldContext`1<TSourceType>, object> resolve, Func`2<IResolveFieldContext, Task`1<IObservable`1<object>>> subscribeAsync, string deprecationReason);
    public virtual FieldBuilder`2<TSourceType, TReturnType> Field(string name);
    [ObsoleteAttribute("Please call Field<TGraphType, TReturnType>(string name) instead. This method will be removed in v9.")]
public virtual FieldBuilder`2<TSourceType, TReturnType> Field();
    [ObsoleteAttribute("Please call Field<TGraphType>(string name) instead. This method will be removed in v9.")]
public virtual FieldBuilder`2<TSourceType, object> Field();
    public virtual FieldBuilder`2<TSourceType, object> Field(string name);
    public virtual FieldBuilder`2<TSourceType, TReturnType> Field(string name, bool nullable);
    public virtual FieldBuilder`2<TSourceType, object> Field(string name, Type type);
    public virtual FieldBuilder`2<TSourceType, object> Field(string name, IGraphType type);
    [ObsoleteAttribute("Please use another overload that receives only one of the 'nullable' or 'type' arguments. This method will be removed in v9.")]
public virtual FieldBuilder`2<TSourceType, TProperty> Field(string name, Expression`1<Func`2<TSourceType, TProperty>> expression, bool nullable, Type type);
    private FieldBuilder`2<TSourceType, TProperty> Field(string name, Expression`1<Func`2<TSourceType, TProperty>> expression, Nullable`1<bool> nullable, Type type);
    public virtual FieldBuilder`2<TSourceType, TProperty> Field(string name, Expression`1<Func`2<TSourceType, TProperty>> expression);
    public virtual FieldBuilder`2<TSourceType, TProperty> Field(string name, Expression`1<Func`2<TSourceType, TProperty>> expression, bool nullable);
    public virtual FieldBuilder`2<TSourceType, TProperty> Field(string name, Expression`1<Func`2<TSourceType, TProperty>> expression, Type type);
    [ObsoleteAttribute("Please use another overload that receives only one of the 'nullable' or 'type' arguments. This method will be removed in v9.")]
public virtual FieldBuilder`2<TSourceType, TProperty> Field(Expression`1<Func`2<TSourceType, TProperty>> expression, bool nullable, Type type);
    private FieldBuilder`2<TSourceType, TProperty> Field(Expression`1<Func`2<TSourceType, TProperty>> expression, Nullable`1<bool> nullable, Type type);
    public virtual FieldBuilder`2<TSourceType, TProperty> Field(Expression`1<Func`2<TSourceType, TProperty>> expression);
    public virtual FieldBuilder`2<TSourceType, TProperty> Field(Expression`1<Func`2<TSourceType, TProperty>> expression, bool nullable);
    public virtual FieldBuilder`2<TSourceType, TProperty> Field(Expression`1<Func`2<TSourceType, TProperty>> expression, Type type);
    [ObsoleteAttribute("Please use the overload that accepts the mandatory name argument. This method will be removed in v9.")]
public ConnectionBuilder`1<TSourceType> Connection();
    public ConnectionBuilder`1<TSourceType> Connection(string name);
    [ObsoleteAttribute("Please use the overload that accepts the mandatory name argument. This method will be removed in v9.")]
public ConnectionBuilder`1<TSourceType> Connection();
    public ConnectionBuilder`1<TSourceType> Connection(string name);
    [ObsoleteAttribute("Please use the overload that accepts the mandatory name argument. This method will be removed in v9.")]
public ConnectionBuilder`1<TSourceType> Connection();
    public ConnectionBuilder`1<TSourceType> Connection(string name);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class GraphQL.Types.ComplexScalarGraphType : ScalarGraphType {
    public virtual object ParseLiteral(GraphQLValue value);
    [NullableContextAttribute("2")]
public virtual object ParseValue(object value);
    public virtual bool CanParseLiteral(GraphQLValue value);
    [NullableContextAttribute("2")]
public virtual bool CanParseValue(object value);
    [NullableContextAttribute("2")]
public virtual object Serialize(object value);
    public virtual bool CanSerializeList(IEnumerable list, bool allowNulls);
    public virtual GraphQLValue ToAST(object value);
    [CompilerGeneratedAttribute]
private GraphQLObjectValue <ToAST>g__ConvertDictionary|7_0(IDictionary dictionary);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private GraphQLObjectField <ToAST>b__7_2(KeyValuePair`2<string, object> row);
    [CompilerGeneratedAttribute]
private GraphQLListValue <ToAST>g__ConvertList|7_1(IEnumerable list);
}
public class GraphQL.Types.ConstantCaseAttribute : EnumCaseAttribute {
    [NullableContextAttribute("1")]
public virtual string ChangeEnumCase(string val);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class GraphQL.Types.DateGraphType : ScalarGraphType {
    public virtual object ParseLiteral(GraphQLValue value);
    [NullableContextAttribute("2")]
public virtual object ParseValue(object value);
    [NullableContextAttribute("2")]
public virtual object Serialize(object value);
    private static DateTime ParseDate(ROM stringValue);
    private static object ValidateDate(DateTime value, object date);
    private static DateTime ValidateDate(DateTime value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class GraphQL.Types.DateTimeGraphType : ScalarGraphType {
    [NullableContextAttribute("1")]
public virtual object ParseLiteral(GraphQLValue value);
    public virtual object ParseValue(object value);
    private static DateTime ParseDate(ROM stringValue);
    public virtual object Serialize(object value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class GraphQL.Types.DateTimeOffsetGraphType : ScalarGraphType {
    [NullableContextAttribute("1")]
public virtual object ParseLiteral(GraphQLValue value);
    public virtual object ParseValue(object value);
    private static DateTimeOffset ParseDate(ROM stringValue);
    public virtual object Serialize(object value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class GraphQL.Types.DecimalGraphType : ScalarGraphType {
    public virtual object ParseLiteral(GraphQLValue value);
    public virtual bool CanParseLiteral(GraphQLValue value);
    [NullableContextAttribute("2")]
public virtual object ParseValue(object value);
    public virtual bool CanSerializeList(IEnumerable list, bool allowNulls);
}
public class GraphQL.Types.DefaultGraphTypeFactory`1 : object {
    [NullableContextAttribute("1")]
public sealed virtual TGraphType Create();
}
public class GraphQL.Types.DeprecatedDirective : Directive {
    public Nullable`1<bool> Introspectable { get; }
    public virtual Nullable`1<bool> get_Introspectable();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class GraphQL.Types.Directive : MetadataProvider {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Repeatable>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private QueryArguments <Arguments>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<DirectiveLocation> <Locations>k__BackingField;
    public string Name { get; public set; }
    [NullableAttribute("2")]
public string Description { get; public set; }
    public Nullable`1<bool> Introspectable { get; }
    public bool Repeatable { get; public set; }
    [NullableAttribute("2")]
public QueryArguments Arguments { get; public set; }
    public List`1<DirectiveLocation> Locations { get; }
    internal Directive(string name);
    public Directive(string name, IEnumerable`1<DirectiveLocation> locations);
    public Directive(string name, DirectiveLocation[] locations);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Name(string value);
    public virtual string ToString();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual string get_Description();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual void set_Description(string value);
    public virtual Nullable`1<bool> get_Introspectable();
    [CompilerGeneratedAttribute]
public bool get_Repeatable();
    [CompilerGeneratedAttribute]
public void set_Repeatable(bool value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public QueryArguments get_Arguments();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Arguments(QueryArguments value);
    [CompilerGeneratedAttribute]
public List`1<DirectiveLocation> get_Locations();
    public virtual void Validate(AppliedDirective applied);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class GraphQL.Types.DirectiveArgument : object {
    private string _name;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private object <Value>k__BackingField;
    public string Name { get; public set; }
    [NullableAttribute("2")]
public object Value { get; public set; }
    public DirectiveArgument(string name);
    public string get_Name();
    public void set_Name(string value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public object get_Value();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Value(object value);
}
[AttributeUsageAttribute("16")]
public abstract class GraphQL.Types.EnumCaseAttribute : Attribute {
    [NullableContextAttribute("1")]
public abstract virtual string ChangeEnumCase(string val);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class GraphQL.Types.EnumerationGraphType : ScalarGraphType {
    [CompilerGeneratedAttribute]
private EnumValuesBase <Values>k__BackingField;
    public EnumValuesBase Values { get; }
    [NullableContextAttribute("2")]
public void Add(string name, object value, string description, string deprecationReason);
    public void Add(EnumValueDefinition value);
    [CompilerGeneratedAttribute]
public EnumValuesBase get_Values();
    protected virtual EnumValuesBase CreateValues();
    public virtual object ParseLiteral(GraphQLValue value);
    public virtual bool CanParseLiteral(GraphQLValue value);
    [NullableContextAttribute("2")]
public virtual object ParseValue(object value);
    [NullableContextAttribute("2")]
public virtual bool CanParseValue(object value);
    [NullableContextAttribute("2")]
public virtual object Serialize(object value);
    public virtual GraphQLValue ToAST(object value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class GraphQL.Types.EnumerationGraphType`1 : EnumerationGraphType {
    [NullableAttribute("2")]
private static EnumCaseAttribute _caseAttr;
    private static EnumerationGraphType`1();
    protected virtual EnumValuesBase CreateValues();
    [NullableContextAttribute("2")]
public virtual object ParseValue(object value);
    [NullableContextAttribute("2")]
public virtual bool CanParseValue(object value);
    protected virtual string ChangeEnumCase(string val);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[DebuggerDisplayAttribute("{Name}: {Value}")]
public class GraphQL.Types.EnumValueDefinition : MetadataProvider {
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private object <UnderlyingValue>k__BackingField;
    [NullableAttribute("1")]
public string Name { get; public set; }
    public string Description { get; public set; }
    public string DeprecationReason { get; public set; }
    public object Value { get; }
    internal object UnderlyingValue { get; }
    [NullableContextAttribute("1")]
public EnumValueDefinition(string name, object value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public string get_Name();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Description();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Description(string value);
    public sealed virtual string get_DeprecationReason();
    public sealed virtual void set_DeprecationReason(string value);
    [CompilerGeneratedAttribute]
public object get_Value();
    [CompilerGeneratedAttribute]
internal object get_UnderlyingValue();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class GraphQL.Types.EnumValues : EnumValuesBase {
    [CompilerGeneratedAttribute]
private List`1<EnumValueDefinition> <List>k__BackingField;
    private List`1<EnumValueDefinition> List { get; }
    public int Count { get; }
    [CompilerGeneratedAttribute]
private List`1<EnumValueDefinition> get_List();
    public virtual int get_Count();
    public virtual void Add(EnumValueDefinition value);
    [NullableContextAttribute("2")]
public virtual EnumValueDefinition FindByName(ROM name);
    [NullableContextAttribute("2")]
public virtual EnumValueDefinition FindByValue(object value);
    public virtual IEnumerator`1<EnumValueDefinition> GetEnumerator();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class GraphQL.Types.EnumValues`1 : EnumValuesBase {
    [CompilerGeneratedAttribute]
private Dictionary`2<ROM, EnumValueDefinition> <DictionaryByName>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<TEnum, EnumValueDefinition> <DictionaryByValue>k__BackingField;
    private Dictionary`2<ROM, EnumValueDefinition> DictionaryByName { get; }
    private Dictionary`2<TEnum, EnumValueDefinition> DictionaryByValue { get; }
    public int Count { get; }
    [CompilerGeneratedAttribute]
private Dictionary`2<ROM, EnumValueDefinition> get_DictionaryByName();
    [CompilerGeneratedAttribute]
private Dictionary`2<TEnum, EnumValueDefinition> get_DictionaryByValue();
    public virtual int get_Count();
    public virtual void Add(EnumValueDefinition value);
    [NullableContextAttribute("2")]
public virtual EnumValueDefinition FindByName(ROM name);
    [NullableContextAttribute("2")]
public virtual EnumValueDefinition FindByValue(object value);
    public virtual IEnumerator`1<EnumValueDefinition> GetEnumerator();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public abstract class GraphQL.Types.EnumValuesBase : object {
    [NullableAttribute("2")]
public EnumValueDefinition Item { get; }
    public int Count { get; }
    public EnumValueDefinition get_Item(string name);
    public abstract virtual int get_Count();
    public abstract virtual void Add(EnumValueDefinition value);
    [NullableContextAttribute("2")]
public abstract virtual EnumValueDefinition FindByName(ROM name);
    [NullableContextAttribute("2")]
public abstract virtual EnumValueDefinition FindByValue(object value);
    public abstract virtual IEnumerator`1<EnumValueDefinition> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[DebuggerDisplayAttribute("{Name,nq}: {ResolvedType,nq}")]
public class GraphQL.Types.FieldType : MetadataProvider {
    private string _name;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private object <DefaultValue>k__BackingField;
    private Type _type;
    [CompilerGeneratedAttribute]
private IGraphType <ResolvedType>k__BackingField;
    [CompilerGeneratedAttribute]
private QueryArguments <Arguments>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IDictionary`2<string, ArgumentValue> <DefaultArgumentValues>k__BackingField;
    [CompilerGeneratedAttribute]
private IFieldResolver <Resolver>k__BackingField;
    [CompilerGeneratedAttribute]
private ISourceStreamResolver <StreamResolver>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`2<object, object> <Parser>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Action`1<object> <Validator>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<FieldArgumentsValidationContext, ValueTask> <ValidateArguments>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsPrivate>k__BackingField;
    [NullableAttribute("1")]
public string Name { get; public set; }
    public string Description { get; public set; }
    public string DeprecationReason { get; public set; }
    public object DefaultValue { get; public set; }
    public Type Type { get; public set; }
    public IGraphType ResolvedType { get; public set; }
    public QueryArguments Arguments { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal IDictionary`2<string, ArgumentValue> DefaultArgumentValues { get; internal set; }
    public IFieldResolver Resolver { get; public set; }
    public ISourceStreamResolver StreamResolver { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Func`2<object, object> Parser { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Action`1<object> Validator { get; public set; }
    public Func`2<FieldArgumentsValidationContext, ValueTask> ValidateArguments { get; public set; }
    public bool IsPrivate { get; public set; }
    [NullableContextAttribute("1")]
public sealed virtual string get_Name();
    [NullableContextAttribute("1")]
public sealed virtual void set_Name(string value);
    [NullableContextAttribute("1")]
internal void SetName(string name, bool validate);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Description();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Description(string value);
    public sealed virtual string get_DeprecationReason();
    public sealed virtual void set_DeprecationReason(string value);
    [CompilerGeneratedAttribute]
public sealed virtual object get_DefaultValue();
    [CompilerGeneratedAttribute]
public void set_DefaultValue(object value);
    public Type get_Type();
    public void set_Type(Type value);
    [CompilerGeneratedAttribute]
public sealed virtual IGraphType get_ResolvedType();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ResolvedType(IGraphType value);
    [CompilerGeneratedAttribute]
public sealed virtual QueryArguments get_Arguments();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Arguments(QueryArguments value);
    [CompilerGeneratedAttribute]
internal IDictionary`2<string, ArgumentValue> get_DefaultArgumentValues();
    [CompilerGeneratedAttribute]
internal void set_DefaultArgumentValues(IDictionary`2<string, ArgumentValue> value);
    [CompilerGeneratedAttribute]
public IFieldResolver get_Resolver();
    [CompilerGeneratedAttribute]
public void set_Resolver(IFieldResolver value);
    [CompilerGeneratedAttribute]
public ISourceStreamResolver get_StreamResolver();
    [CompilerGeneratedAttribute]
public void set_StreamResolver(ISourceStreamResolver value);
    [CompilerGeneratedAttribute]
public Func`2<object, object> get_Parser();
    [CompilerGeneratedAttribute]
public void set_Parser(Func`2<object, object> value);
    [CompilerGeneratedAttribute]
public Action`1<object> get_Validator();
    [CompilerGeneratedAttribute]
public void set_Validator(Action`1<object> value);
    [CompilerGeneratedAttribute]
public Func`2<FieldArgumentsValidationContext, ValueTask> get_ValidateArguments();
    [CompilerGeneratedAttribute]
public void set_ValidateArguments(Func`2<FieldArgumentsValidationContext, ValueTask> value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsPrivate();
    [CompilerGeneratedAttribute]
public sealed virtual void set_IsPrivate(bool value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class GraphQL.Types.FloatGraphType : ScalarGraphType {
    public virtual object ParseLiteral(GraphQLValue value);
    public virtual bool CanParseLiteral(GraphQLValue value);
    [NullableContextAttribute("0")]
private bool TryParse(ReadOnlySpan`1<char> chars);
    [NullableContextAttribute("2")]
public virtual object ParseValue(object value);
    public virtual bool CanSerializeList(IEnumerable list, bool allowNulls);
}
public class GraphQL.Types.GraphQLClrInputTypeReference`1 : InputObjectGraphType {
}
public class GraphQL.Types.GraphQLClrOutputTypeReference`1 : InterfaceGraphType {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Func`2<object, bool> GraphQL.Types.IObjectGraphType.IsTypeOf { get; private set; }
    private bool GraphQL.Types.IObjectGraphType.SkipTypeCheck { get; private set; }
    [NullableAttribute("1")]
private Interfaces GraphQL.Types.IImplementInterfaces.Interfaces { get; }
    [NullableAttribute("1")]
private ResolvedInterfaces GraphQL.Types.IImplementInterfaces.ResolvedInterfaces { get; }
    private sealed virtual override Func`2<object, bool> GraphQL.Types.IObjectGraphType.get_IsTypeOf();
    private sealed virtual override void GraphQL.Types.IObjectGraphType.set_IsTypeOf(Func`2<object, bool> value);
    private sealed virtual override bool GraphQL.Types.IObjectGraphType.get_SkipTypeCheck();
    private sealed virtual override void GraphQL.Types.IObjectGraphType.set_SkipTypeCheck(bool value);
    [NullableContextAttribute("1")]
private sealed virtual override Interfaces GraphQL.Types.IImplementInterfaces.get_Interfaces();
    [NullableContextAttribute("1")]
private sealed virtual override ResolvedInterfaces GraphQL.Types.IImplementInterfaces.get_ResolvedInterfaces();
    [NullableContextAttribute("1")]
private sealed virtual override void GraphQL.Types.IImplementInterfaces.AddResolvedInterface(IInterfaceGraphType graphType);
}
[DebuggerDisplayAttribute("ref {TypeName,nq}")]
public class GraphQL.Types.GraphQLTypeReference : InterfaceGraphType {
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private string <TypeName>k__BackingField;
    [NullableAttribute("1")]
public string TypeName { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Func`2<object, bool> IsTypeOf { get; public set; }
    public bool SkipTypeCheck { get; public set; }
    [NullableContextAttribute("1")]
public GraphQLTypeReference(string typeName);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public string get_TypeName();
    public sealed virtual Func`2<object, bool> get_IsTypeOf();
    public sealed virtual void set_IsTypeOf(Func`2<object, bool> value);
    public sealed virtual bool get_SkipTypeCheck();
    public sealed virtual void set_SkipTypeCheck(bool value);
    [NullableContextAttribute("1")]
private InvalidOperationException Invalid();
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class GraphQL.Types.GraphType : MetadataProvider {
    private string _name;
    private bool _initialized;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsPrivate>k__BackingField;
    private bool IsTypeModifier { get; }
    public string Name { get; public set; }
    [NullableAttribute("2")]
public string Description { get; public set; }
    [NullableAttribute("2")]
public string DeprecationReason { get; public set; }
    public bool IsPrivate { get; public set; }
    [NullableContextAttribute("2")]
internal GraphType(GraphType cloneFrom);
    public virtual void Initialize(ISchema schema);
    private bool get_IsTypeModifier();
    private string GetDefaultName();
    internal void SetName(string name, bool validate);
    public sealed virtual string get_Name();
    public sealed virtual void set_Name(string value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual string get_Description();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual void set_Description(string value);
    [NullableContextAttribute("2")]
public sealed virtual string get_DeprecationReason();
    [NullableContextAttribute("2")]
public sealed virtual void set_DeprecationReason(string value);
    public virtual string ToString();
    protected bool Equals(IGraphType other);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsPrivate();
    [CompilerGeneratedAttribute]
public sealed virtual void set_IsPrivate(bool value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class GraphQL.Types.GuidGraphType : ScalarGraphType {
    public virtual object ParseLiteral(GraphQLValue value);
    public virtual bool CanParseLiteral(GraphQLValue value);
    [NullableContextAttribute("2")]
public virtual object ParseValue(object value);
    [NullableContextAttribute("2")]
public virtual bool CanParseValue(object value);
    [NullableContextAttribute("2")]
public virtual object Serialize(object value);
    public virtual bool CanSerializeList(IEnumerable list, bool allowNulls);
    public virtual IEnumerable SerializeList(IEnumerable list);
}
public interface GraphQL.Types.IAbstractGraphType {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Func`2<object, IObjectGraphType> ResolveType { get; public set; }
    [NullableAttribute("1")]
public PossibleTypes PossibleTypes { get; }
    public abstract virtual Func`2<object, IObjectGraphType> get_ResolveType();
    public abstract virtual void set_ResolveType(Func`2<object, IObjectGraphType> value);
    [NullableContextAttribute("1")]
public abstract virtual PossibleTypes get_PossibleTypes();
    [NullableContextAttribute("1")]
public abstract virtual void AddPossibleType(IObjectGraphType type);
}
public interface GraphQL.Types.IComplexGraphType {
    [NullableAttribute("1")]
public TypeFields Fields { get; }
    [NullableContextAttribute("1")]
public abstract virtual TypeFields get_Fields();
    [NullableContextAttribute("1")]
public abstract virtual FieldType AddField(FieldType fieldType);
    [NullableContextAttribute("1")]
public abstract virtual bool HasField(string name);
    [NullableContextAttribute("2")]
public abstract virtual FieldType GetField(ROM name);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class GraphQL.Types.IdGraphType : ScalarGraphType {
    public virtual object ParseLiteral(GraphQLValue value);
    public virtual bool CanParseLiteral(GraphQLValue value);
    [NullableContextAttribute("2")]
public virtual object ParseValue(object value);
    [NullableContextAttribute("2")]
public virtual object Serialize(object value);
    public virtual bool CanSerializeList(IEnumerable list, bool allowNulls);
    public virtual IEnumerable SerializeList(IEnumerable list);
}
public interface GraphQL.Types.IFieldMetadataWriter {
}
public interface GraphQL.Types.IFieldType {
    [NullableAttribute("1")]
public string Name { get; public set; }
    [NullableAttribute("2")]
public QueryArguments Arguments { get; public set; }
    public bool IsPrivate { get; public set; }
    [NullableContextAttribute("1")]
public abstract virtual string get_Name();
    [NullableContextAttribute("1")]
public abstract virtual void set_Name(string value);
    [NullableContextAttribute("2")]
public abstract virtual QueryArguments get_Arguments();
    [NullableContextAttribute("2")]
public abstract virtual void set_Arguments(QueryArguments value);
    public abstract virtual bool get_IsPrivate();
    public abstract virtual void set_IsPrivate(bool value);
}
public interface GraphQL.Types.IGraphType {
    public bool IsPrivate { get; public set; }
    [NullableContextAttribute("1")]
public abstract virtual void Initialize(ISchema schema);
    public abstract virtual bool get_IsPrivate();
    public abstract virtual void set_IsPrivate(bool value);
}
[NullableContextAttribute("1")]
public interface GraphQL.Types.IGraphTypeFactory`1 {
    public abstract virtual TGraphType Create();
}
[NullableContextAttribute("2")]
public interface GraphQL.Types.IGraphTypeMappingProvider {
    public abstract virtual Type GetGraphTypeFromClrType(Type clrType, bool isInputType, Type preferredGraphType);
}
[NullableContextAttribute("2")]
public interface GraphQL.Types.IHaveDefaultValue {
    public object DefaultValue { get; }
    public abstract virtual object get_DefaultValue();
}
public interface GraphQL.Types.IImplementInterfaces {
    [NullableAttribute("1")]
public Interfaces Interfaces { get; }
    [NullableAttribute("1")]
public ResolvedInterfaces ResolvedInterfaces { get; }
    [NullableContextAttribute("1")]
public abstract virtual Interfaces get_Interfaces();
    [NullableContextAttribute("1")]
public abstract virtual ResolvedInterfaces get_ResolvedInterfaces();
    [NullableContextAttribute("1")]
public abstract virtual void AddResolvedInterface(IInterfaceGraphType graphType);
}
public interface GraphQL.Types.IInputObjectGraphType {
    public bool IsOneOf { get; public set; }
    [NullableContextAttribute("1")]
public abstract virtual object ParseDictionary(IDictionary`2<string, object> value);
    [NullableContextAttribute("1")]
public abstract virtual bool IsValidDefault(object value);
    [NullableContextAttribute("1")]
public abstract virtual GraphQLValue ToAST(object value);
    public abstract virtual bool get_IsOneOf();
    public abstract virtual void set_IsOneOf(bool value);
}
public interface GraphQL.Types.IInterfaceGraphType {
}
public interface GraphQL.Types.IMetadataReader {
}
[NullableContextAttribute("1")]
public interface GraphQL.Types.IMetadataWriter {
    public IMetadataReader MetadataReader { get; }
    public abstract virtual IMetadataReader get_MetadataReader();
}
[NullableContextAttribute("1")]
public interface GraphQL.Types.INamedType {
    public string Name { get; public set; }
    public abstract virtual string get_Name();
    public abstract virtual void set_Name(string value);
}
public class GraphQL.Types.IncludeDirective : Directive {
}
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class GraphQL.Types.InputObjectGraphType : InputObjectGraphType`1<object> {
}
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class GraphQL.Types.InputObjectGraphType`1 : ComplexGraphType`1<TSourceType> {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Func`2<IDictionary`2<string, object>, object> _parseDictionary;
    [CompilerGeneratedAttribute]
private bool <IsOneOf>k__BackingField;
    public bool IsOneOf { get; public set; }
    internal InputObjectGraphType`1(InputObjectGraphType`1<TSourceType> cloneFrom);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsOneOf();
    [CompilerGeneratedAttribute]
public sealed virtual void set_IsOneOf(bool value);
    [NullableContextAttribute("1")]
public virtual void Initialize(ISchema schema);
    [NullableContextAttribute("1")]
public virtual object ParseDictionary(IDictionary`2<string, object> value);
    [NullableContextAttribute("1")]
private object ParseDictionaryViaReflection(IDictionary`2<string, object> value);
    [NullableContextAttribute("1")]
public virtual bool IsValidDefault(object value);
    [NullableContextAttribute("1")]
public virtual GraphQLValue ToAST(object value);
    [NullableContextAttribute("2")]
private static object GetFieldValue(FieldType field, object value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private object <Initialize>b__7_0(IDictionary`2<string, object> data);
}
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class GraphQL.Types.InterfaceGraphType : InterfaceGraphType`1<object> {
}
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class GraphQL.Types.InterfaceGraphType`1 : ComplexGraphType`1<TSource> {
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private PossibleTypes <PossibleTypes>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`2<object, IObjectGraphType> <ResolveType>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private Interfaces <Interfaces>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private ResolvedInterfaces <ResolvedInterfaces>k__BackingField;
    [NullableAttribute("1")]
public PossibleTypes PossibleTypes { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Func`2<object, IObjectGraphType> ResolveType { get; public set; }
    [NullableAttribute("1")]
public Interfaces Interfaces { get; }
    [NullableAttribute("1")]
public ResolvedInterfaces ResolvedInterfaces { get; }
    internal InterfaceGraphType`1(InterfaceGraphType`1<TSource> copyFrom);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public sealed virtual PossibleTypes get_PossibleTypes();
    [CompilerGeneratedAttribute]
public sealed virtual Func`2<object, IObjectGraphType> get_ResolveType();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ResolveType(Func`2<object, IObjectGraphType> value);
    [NullableContextAttribute("1")]
public sealed virtual void AddResolvedInterface(IInterfaceGraphType graphType);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public sealed virtual Interfaces get_Interfaces();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public sealed virtual ResolvedInterfaces get_ResolvedInterfaces();
    [NullableContextAttribute("1")]
public sealed virtual void AddPossibleType(IObjectGraphType type);
    public void Interface();
    [NullableContextAttribute("1")]
public void Interface(Type type);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class GraphQL.Types.Interfaces : object {
    [CompilerGeneratedAttribute]
private List`1<Type> <List>k__BackingField;
    internal List`1<Type> List { get; }
    public int Count { get; }
    [CompilerGeneratedAttribute]
internal List`1<Type> get_List();
    public int get_Count();
    [NullableContextAttribute("0")]
public void Add();
    public void Add(Type type);
    public bool Contains(Type type);
    public sealed virtual IEnumerator`1<Type> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class GraphQL.Types.IntGraphType : ScalarGraphType {
    public virtual object ParseLiteral(GraphQLValue value);
    public virtual bool CanParseLiteral(GraphQLValue value);
    [NullableContextAttribute("2")]
public virtual object ParseValue(object value);
    public virtual bool CanSerializeList(IEnumerable list, bool allowNulls);
}
public interface GraphQL.Types.IObjectGraphType {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Func`2<object, bool> IsTypeOf { get; public set; }
    public bool SkipTypeCheck { get; public set; }
    public abstract virtual Func`2<object, bool> get_IsTypeOf();
    public abstract virtual void set_IsTypeOf(Func`2<object, bool> value);
    public abstract virtual bool get_SkipTypeCheck();
    public abstract virtual void set_SkipTypeCheck(bool value);
}
[NullableContextAttribute("2")]
public interface GraphQL.Types.IProvideDeprecationReason {
    public string DeprecationReason { get; public set; }
    public abstract virtual string get_DeprecationReason();
    public abstract virtual void set_DeprecationReason(string value);
}
[NullableContextAttribute("2")]
public interface GraphQL.Types.IProvideDescription {
    public string Description { get; public set; }
    public abstract virtual string get_Description();
    public abstract virtual void set_Description(string value);
}
[NullableContextAttribute("1")]
public interface GraphQL.Types.IProvideMetadata {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Dictionary`2<string, object> Metadata { get; }
    public abstract virtual Dictionary`2<string, object> get_Metadata();
    public abstract virtual TType GetMetadata(string key, TType defaultValue);
    public abstract virtual TType GetMetadata(string key, Func`1<TType> defaultValueFactory);
    public abstract virtual bool HasMetadata(string key);
}
[NullableContextAttribute("2")]
public interface GraphQL.Types.IProvideResolvedType {
    public IGraphType ResolvedType { get; public set; }
    public abstract virtual IGraphType get_ResolvedType();
    public abstract virtual void set_ResolvedType(IGraphType value);
}
[NullableContextAttribute("1")]
public interface GraphQL.Types.ISchema {
    public ExperimentalFeatures Features { get; public set; }
    public bool Initialized { get; }
    public INameConverter NameConverter { get; }
    public IFieldMiddlewareBuilder FieldMiddleware { get; }
    public IObjectGraphType Query { get; public set; }
    [NullableAttribute("2")]
public IObjectGraphType Mutation { get; public set; }
    [NullableAttribute("2")]
public IObjectGraphType Subscription { get; public set; }
    public SchemaDirectives Directives { get; }
    public SchemaTypes AllTypes { get; }
    public IEnumerable`1<Type> AdditionalTypes { get; }
    public IEnumerable`1<IGraphType> AdditionalTypeInstances { get; }
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IEnumerable`1<ValueTuple`2<Type, Type>> TypeMappings { get; }
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IEnumerable`1<ValueTuple`2<Type, Type>> BuiltInTypeMappings { get; }
    public ISchemaFilter Filter { get; public set; }
    public ISchemaComparer Comparer { get; public set; }
    public FieldType SchemaMetaFieldType { get; }
    public FieldType TypeMetaFieldType { get; }
    public FieldType TypeNameMetaFieldType { get; }
    public abstract virtual ExperimentalFeatures get_Features();
    public abstract virtual void set_Features(ExperimentalFeatures value);
    public abstract virtual bool get_Initialized();
    public abstract virtual void Initialize();
    public abstract virtual INameConverter get_NameConverter();
    public abstract virtual IFieldMiddlewareBuilder get_FieldMiddleware();
    public abstract virtual IObjectGraphType get_Query();
    public abstract virtual void set_Query(IObjectGraphType value);
    [NullableContextAttribute("2")]
public abstract virtual IObjectGraphType get_Mutation();
    [NullableContextAttribute("2")]
public abstract virtual void set_Mutation(IObjectGraphType value);
    [NullableContextAttribute("2")]
public abstract virtual IObjectGraphType get_Subscription();
    [NullableContextAttribute("2")]
public abstract virtual void set_Subscription(IObjectGraphType value);
    public abstract virtual SchemaDirectives get_Directives();
    public abstract virtual SchemaTypes get_AllTypes();
    public abstract virtual IEnumerable`1<Type> get_AdditionalTypes();
    public abstract virtual IEnumerable`1<IGraphType> get_AdditionalTypeInstances();
    public abstract virtual void RegisterVisitor(ISchemaNodeVisitor visitor);
    public abstract virtual void RegisterVisitor(Type type);
    public abstract virtual void RegisterType(IGraphType type);
    public abstract virtual void RegisterType(Type type);
    public abstract virtual void RegisterTypeMapping(Type clrType, Type graphType);
    public abstract virtual IEnumerable`1<ValueTuple`2<Type, Type>> get_TypeMappings();
    public abstract virtual IEnumerable`1<ValueTuple`2<Type, Type>> get_BuiltInTypeMappings();
    public abstract virtual ISchemaFilter get_Filter();
    public abstract virtual void set_Filter(ISchemaFilter value);
    public abstract virtual ISchemaComparer get_Comparer();
    public abstract virtual void set_Comparer(ISchemaComparer value);
    public abstract virtual FieldType get_SchemaMetaFieldType();
    public abstract virtual FieldType get_TypeMetaFieldType();
    public abstract virtual FieldType get_TypeNameMetaFieldType();
}
public class GraphQL.Types.LengthDirective : Directive {
    public Nullable`1<bool> Introspectable { get; }
    public virtual Nullable`1<bool> get_Introspectable();
    [NullableContextAttribute("1")]
public virtual void Validate(AppliedDirective applied);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class GraphQL.Types.ListGraphType : GraphType {
    private IGraphType _resolvedType;
    private string _cachedString;
    public Type Type { get; }
    public IGraphType ResolvedType { get; public set; }
    public ListGraphType(IGraphType type);
    public virtual Type get_Type();
    public sealed virtual IGraphType get_ResolvedType();
    public sealed virtual void set_ResolvedType(IGraphType value);
    [NullableContextAttribute("1")]
public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class GraphQL.Types.ListGraphType`1 : ListGraphType {
    public Type Type { get; }
    public virtual Type get_Type();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class GraphQL.Types.LongGraphType : ScalarGraphType {
    public virtual object ParseLiteral(GraphQLValue value);
    public virtual bool CanParseLiteral(GraphQLValue value);
    [NullableContextAttribute("2")]
public virtual object ParseValue(object value);
    public virtual bool CanSerializeList(IEnumerable list, bool allowNulls);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class GraphQL.Types.NonNullGraphType : GraphType {
    private IGraphType _resolvedType;
    private string _cachedString;
    public Type Type { get; }
    public IGraphType ResolvedType { get; public set; }
    public NonNullGraphType(IGraphType type);
    public virtual Type get_Type();
    public sealed virtual IGraphType get_ResolvedType();
    public sealed virtual void set_ResolvedType(IGraphType value);
    [NullableContextAttribute("1")]
public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class GraphQL.Types.NonNullGraphType`1 : NonNullGraphType {
    public Type Type { get; }
    public virtual Type get_Type();
}
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class GraphQL.Types.ObjectGraphType : ObjectGraphType`1<object> {
}
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class GraphQL.Types.ObjectGraphType`1 : ComplexGraphType`1<TSourceType> {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`2<object, bool> <IsTypeOf>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SkipTypeCheck>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private Interfaces <Interfaces>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private ResolvedInterfaces <ResolvedInterfaces>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Func`2<object, bool> IsTypeOf { get; public set; }
    public bool SkipTypeCheck { get; public set; }
    [NullableAttribute("1")]
public Interfaces Interfaces { get; }
    [NullableAttribute("1")]
public ResolvedInterfaces ResolvedInterfaces { get; }
    internal ObjectGraphType`1(ObjectGraphType`1<TSourceType> cloneFrom);
    [CompilerGeneratedAttribute]
public sealed virtual Func`2<object, bool> get_IsTypeOf();
    [CompilerGeneratedAttribute]
public sealed virtual void set_IsTypeOf(Func`2<object, bool> value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_SkipTypeCheck();
    [CompilerGeneratedAttribute]
public sealed virtual void set_SkipTypeCheck(bool value);
    [NullableContextAttribute("1")]
public sealed virtual void AddResolvedInterface(IInterfaceGraphType graphType);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public sealed virtual Interfaces get_Interfaces();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public sealed virtual ResolvedInterfaces get_ResolvedInterfaces();
    public void Interface();
    [NullableContextAttribute("1")]
public void Interface(Type type);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
[ObsoleteAttribute("This class will be removed in v9.")]
public static class GraphQL.Types.ObjectGraphTypeExtensions : object {
    [ExtensionAttribute]
[ObsoleteAttribute("Please use one of the Field() methods returning FieldBuilder and then methods defined on it or just use AddField() method directly. This method will be removed in v9.")]
public static void Field(IObjectGraphType obj, string name, IGraphType type, string description, QueryArguments arguments, Func`2<IResolveFieldContext, object> resolve);
    [ExtensionAttribute]
[ObsoleteAttribute("Please use one of the Field() methods returning FieldBuilder and then methods defined on it or just use AddField() method directly. This method will be removed in v9.")]
public static void FieldAsync(IObjectGraphType obj, string name, IGraphType type, string description, QueryArguments arguments, Func`2<IResolveFieldContext, Task`1<object>> resolve);
}
public class GraphQL.Types.PascalCaseAttribute : EnumCaseAttribute {
    [NullableContextAttribute("1")]
public virtual string ChangeEnumCase(string val);
}
public class GraphQL.Types.PatternMatchingDirective : Directive {
    public Nullable`1<bool> Introspectable { get; }
    public virtual Nullable`1<bool> get_Introspectable();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class GraphQL.Types.PossibleTypes : object {
    [CompilerGeneratedAttribute]
private List`1<IObjectGraphType> <List>k__BackingField;
    internal List`1<IObjectGraphType> List { get; }
    public int Count { get; }
    [CompilerGeneratedAttribute]
internal List`1<IObjectGraphType> get_List();
    public int get_Count();
    internal void Add(IObjectGraphType type);
    public bool Contains(IObjectGraphType type);
    public sealed virtual IEnumerator`1<IObjectGraphType> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[DebuggerDisplayAttribute("{Name,nq}: {ResolvedType,nq}")]
public class GraphQL.Types.QueryArgument : MetadataProvider {
    private Type _type;
    private IGraphType _resolvedType;
    private string _name;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private object <DefaultValue>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`2<object, object> <Parser>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Action`1<object> <Validator>k__BackingField;
    [NullableAttribute("1")]
public string Name { get; public set; }
    public string Description { get; public set; }
    public string DeprecationReason { get; public set; }
    public object DefaultValue { get; public set; }
    public IGraphType ResolvedType { get; public set; }
    public Type Type { get; internal set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Func`2<object, object> Parser { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Action`1<object> Validator { get; public set; }
    [NullableContextAttribute("1")]
public QueryArgument(IGraphType type);
    [NullableContextAttribute("1")]
public QueryArgument(Type type);
    [NullableContextAttribute("1")]
public string get_Name();
    [NullableContextAttribute("1")]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Description();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Description(string value);
    public sealed virtual string get_DeprecationReason();
    public sealed virtual void set_DeprecationReason(string value);
    [CompilerGeneratedAttribute]
public sealed virtual object get_DefaultValue();
    [CompilerGeneratedAttribute]
public void set_DefaultValue(object value);
    public sealed virtual IGraphType get_ResolvedType();
    public sealed virtual void set_ResolvedType(IGraphType value);
    public Type get_Type();
    internal void set_Type(Type value);
    private Type CheckType(Type type);
    private IGraphType CheckResolvedType(IGraphType type);
    [CompilerGeneratedAttribute]
public Func`2<object, object> get_Parser();
    [CompilerGeneratedAttribute]
public void set_Parser(Func`2<object, object> value);
    [CompilerGeneratedAttribute]
public Action`1<object> get_Validator();
    [CompilerGeneratedAttribute]
public void set_Validator(Action`1<object> value);
    [NullableContextAttribute("1")]
private ArgumentOutOfRangeException Create(string paramName, Type value);
}
public class GraphQL.Types.QueryArgument`1 : QueryArgument {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class GraphQL.Types.QueryArguments : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private List`1<QueryArgument> <List>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal List`1<QueryArgument> List { get; private set; }
    public QueryArgument Item { get; public set; }
    public int Count { get; }
    public QueryArguments(QueryArgument[] args);
    public QueryArguments(IEnumerable`1<QueryArgument> list);
    [CompilerGeneratedAttribute]
internal List`1<QueryArgument> get_List();
    [CompilerGeneratedAttribute]
private void set_List(List`1<QueryArgument> value);
    public QueryArgument get_Item(int index);
    public void set_Item(int index, QueryArgument value);
    public int get_Count();
    public void Add(QueryArgument argument);
    [NullableContextAttribute("2")]
public QueryArgument Find(ROM name);
    public sealed virtual IEnumerator`1<QueryArgument> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class GraphQL.Types.Relay.ConnectionType`1 : ConnectionType`2<TNodeType, EdgeType`1<TNodeType>> {
}
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class GraphQL.Types.Relay.ConnectionType`2 : ObjectGraphType`1<object> {
}
[NullableContextAttribute("2")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class GraphQL.Types.Relay.DataObjects.Connection`1 : Connection`2<TNode, Edge`1<TNode>> {
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class GraphQL.Types.Relay.DataObjects.Connection`2 : object {
    [CompilerGeneratedAttribute]
private Nullable`1<int> <TotalCount>k__BackingField;
    [CompilerGeneratedAttribute]
private PageInfo <PageInfo>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private List`1<TEdge> <Edges>k__BackingField;
    public Nullable`1<int> TotalCount { get; public set; }
    public PageInfo PageInfo { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public List`1<TEdge> Edges { get; public set; }
    public List`1<TNode> Items { get; }
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_TotalCount();
    [CompilerGeneratedAttribute]
public void set_TotalCount(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public PageInfo get_PageInfo();
    [CompilerGeneratedAttribute]
public void set_PageInfo(PageInfo value);
    [CompilerGeneratedAttribute]
public List`1<TEdge> get_Edges();
    [CompilerGeneratedAttribute]
public void set_Edges(List`1<TEdge> value);
    public List`1<TNode> get_Items();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class GraphQL.Types.Relay.DataObjects.Edge`1 : object {
    [CompilerGeneratedAttribute]
private string <Cursor>k__BackingField;
    [CompilerGeneratedAttribute]
private TNode <Node>k__BackingField;
    public string Cursor { get; public set; }
    public TNode Node { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Cursor();
    [CompilerGeneratedAttribute]
public void set_Cursor(string value);
    [CompilerGeneratedAttribute]
public TNode get_Node();
    [CompilerGeneratedAttribute]
public void set_Node(TNode value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class GraphQL.Types.Relay.DataObjects.PageInfo : object {
    [CompilerGeneratedAttribute]
private bool <HasNextPage>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasPreviousPage>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StartCursor>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EndCursor>k__BackingField;
    public bool HasNextPage { get; public set; }
    public bool HasPreviousPage { get; public set; }
    public string StartCursor { get; public set; }
    public string EndCursor { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_HasNextPage();
    [CompilerGeneratedAttribute]
public void set_HasNextPage(bool value);
    [CompilerGeneratedAttribute]
public bool get_HasPreviousPage();
    [CompilerGeneratedAttribute]
public void set_HasPreviousPage(bool value);
    [CompilerGeneratedAttribute]
public string get_StartCursor();
    [CompilerGeneratedAttribute]
public void set_StartCursor(string value);
    [CompilerGeneratedAttribute]
public string get_EndCursor();
    [CompilerGeneratedAttribute]
public void set_EndCursor(string value);
}
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class GraphQL.Types.Relay.EdgeType`1 : ObjectGraphType`1<object> {
}
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class GraphQL.Types.Relay.PageInfoType : ObjectGraphType`1<object> {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class GraphQL.Types.ResolvedInterfaces : object {
    [CompilerGeneratedAttribute]
private List`1<IInterfaceGraphType> <List>k__BackingField;
    internal List`1<IInterfaceGraphType> List { get; }
    public int Count { get; }
    [CompilerGeneratedAttribute]
internal List`1<IInterfaceGraphType> get_List();
    public int get_Count();
    internal void Add(IInterfaceGraphType type);
    public bool Contains(IInterfaceGraphType type);
    public sealed virtual IEnumerator`1<IInterfaceGraphType> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class GraphQL.Types.SByteGraphType : ScalarGraphType {
    public virtual object ParseLiteral(GraphQLValue value);
    public virtual bool CanParseLiteral(GraphQLValue value);
    [NullableContextAttribute("2")]
public virtual object ParseValue(object value);
    public virtual bool CanSerializeList(IEnumerable list, bool allowNulls);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class GraphQL.Types.ScalarGraphType : GraphType {
    [NullableContextAttribute("2")]
public virtual object Serialize(object value);
    public virtual bool CanSerializeList(IEnumerable list, bool allowNulls);
    [NullableContextAttribute("0")]
internal static bool CanSerializeList(IEnumerable list, bool allowNulls);
    public virtual IEnumerable SerializeList(IEnumerable list);
    public virtual object ParseLiteral(GraphQLValue value);
    protected double ParseDoubleAccordingSpec(TValueNode node);
    [NullableContextAttribute("2")]
public abstract virtual object ParseValue(object value);
    public virtual bool CanParseLiteral(GraphQLValue value);
    [NullableContextAttribute("2")]
public virtual bool CanParseValue(object value);
    public virtual bool IsValidDefault(object value);
    public virtual GraphQLValue ToAST(object value);
    [DoesNotReturnAttribute]
protected internal GraphQLValue ThrowASTConversionError(object value);
    [DoesNotReturnAttribute]
protected object ThrowLiteralConversionError(GraphQLValue input, string description);
    [DoesNotReturnAttribute]
protected object ThrowValueConversionError(object value);
    [DoesNotReturnAttribute]
protected object ThrowSerializationError(object value);
    public virtual void Initialize(ISchema schema);
}
public class GraphQL.Types.Scalars.LinkImportGraphType : AnyScalarGraphType {
}
[ConstantCaseAttribute]
public enum GraphQL.Types.Scalars.LinkPurpose : Enum {
    public int value__;
    [DescriptionAttribute("`SECURITY` features provide metadata necessary to securely resolve fields.")]
public static LinkPurpose Security;
    [DescriptionAttribute("`EXECUTION` features provide metadata necessary for operation execution.")]
public static LinkPurpose Execution;
}
public class GraphQL.Types.Scalars.LinkPurposeGraphType : EnumerationGraphType`1<LinkPurpose> {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DebuggerTypeProxyAttribute("GraphQL.Types.Schema/SchemaDebugView")]
public class GraphQL.Types.Schema : MetadataProvider {
    private bool _disposed;
    private IServiceProvider _services;
    [NullableAttribute("2")]
private SchemaTypes _allTypes;
    [NullableAttribute("2")]
private ExceptionDispatchInfo _initializationException;
    private object _allTypesInitializationLock;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<Type> _additionalTypes;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<IGraphType> _additionalInstances;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<Type> _visitorTypes;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<ISchemaNodeVisitor> _visitors;
    [CompilerGeneratedAttribute]
private ExperimentalFeatures <Features>k__BackingField;
    [CompilerGeneratedAttribute]
private INameConverter <NameConverter>k__BackingField;
    [CompilerGeneratedAttribute]
private IFieldMiddlewareBuilder <FieldMiddleware>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Initialized>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private IObjectGraphType <Query>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private IObjectGraphType <Mutation>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private IObjectGraphType <Subscription>k__BackingField;
    [CompilerGeneratedAttribute]
private ISchemaFilter <Filter>k__BackingField;
    [CompilerGeneratedAttribute]
private ISchemaComparer <Comparer>k__BackingField;
    [CompilerGeneratedAttribute]
private SchemaDirectives <Directives>k__BackingField;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<ValueTuple`2<Type, Type>> _clrToGraphTypeMappings;
    public ExperimentalFeatures Features { get; public set; }
    public INameConverter NameConverter { get; public set; }
    public IFieldMiddlewareBuilder FieldMiddleware { get; internal set; }
    public bool Initialized { get; private set; }
    [NullableAttribute("2")]
public string Description { get; public set; }
    public IObjectGraphType Query { get; public set; }
    [NullableAttribute("2")]
public IObjectGraphType Mutation { get; public set; }
    [NullableAttribute("2")]
public IObjectGraphType Subscription { get; public set; }
    public ISchemaFilter Filter { get; public set; }
    public ISchemaComparer Comparer { get; public set; }
    public SchemaDirectives Directives { get; }
    public SchemaTypes AllTypes { get; }
    public IEnumerable`1<Type> AdditionalTypes { get; }
    public IEnumerable`1<IGraphType> AdditionalTypeInstances { get; }
    public FieldType SchemaMetaFieldType { get; }
    public FieldType TypeMetaFieldType { get; }
    public FieldType TypeNameMetaFieldType { get; }
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IEnumerable`1<ValueTuple`2<Type, Type>> TypeMappings { get; }
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IEnumerable`1<ValueTuple`2<Type, Type>> BuiltInTypeMappings { get; }
    public Schema(IServiceProvider services);
    public Schema(IServiceProvider services, bool runConfigurations);
    public Schema(IServiceProvider services, IEnumerable`1<IConfigureSchema> configurations);
    public static Schema For(string typeDefinitions, Action`1<SchemaBuilder> configure);
    public static Schema For(string typeDefinitions, Action`1<TSchemaBuilder> configure);
    [CompilerGeneratedAttribute]
public sealed virtual ExperimentalFeatures get_Features();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Features(ExperimentalFeatures value);
    [CompilerGeneratedAttribute]
public sealed virtual INameConverter get_NameConverter();
    [CompilerGeneratedAttribute]
public void set_NameConverter(INameConverter value);
    [CompilerGeneratedAttribute]
public sealed virtual IFieldMiddlewareBuilder get_FieldMiddleware();
    [CompilerGeneratedAttribute]
internal void set_FieldMiddleware(IFieldMiddlewareBuilder value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_Initialized();
    [CompilerGeneratedAttribute]
private void set_Initialized(bool value);
    private void CheckInitialized(string name);
    public sealed virtual void Initialize();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual string get_Description();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual void set_Description(string value);
    [CompilerGeneratedAttribute]
public sealed virtual IObjectGraphType get_Query();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Query(IObjectGraphType value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual IObjectGraphType get_Mutation();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual void set_Mutation(IObjectGraphType value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual IObjectGraphType get_Subscription();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual void set_Subscription(IObjectGraphType value);
    private sealed virtual override object System.IServiceProvider.GetService(Type serviceType);
    [CompilerGeneratedAttribute]
public sealed virtual ISchemaFilter get_Filter();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Filter(ISchemaFilter value);
    [CompilerGeneratedAttribute]
public sealed virtual ISchemaComparer get_Comparer();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Comparer(ISchemaComparer value);
    [CompilerGeneratedAttribute]
public sealed virtual SchemaDirectives get_Directives();
    public sealed virtual SchemaTypes get_AllTypes();
    public sealed virtual IEnumerable`1<Type> get_AdditionalTypes();
    public sealed virtual IEnumerable`1<IGraphType> get_AdditionalTypeInstances();
    public sealed virtual FieldType get_SchemaMetaFieldType();
    public sealed virtual FieldType get_TypeMetaFieldType();
    public sealed virtual FieldType get_TypeNameMetaFieldType();
    public sealed virtual void RegisterVisitor(ISchemaNodeVisitor visitor);
    public sealed virtual void RegisterVisitor(Type type);
    public sealed virtual void RegisterType(IGraphType type);
    public sealed virtual void RegisterType(Type type);
    public void RegisterTypes(Type[] types);
    public sealed virtual void RegisterTypeMapping(Type clrType, Type graphType);
    public sealed virtual IEnumerable`1<ValueTuple`2<Type, Type>> get_TypeMappings();
    [IteratorStateMachineAttribute("GraphQL.Types.Schema/<get_BuiltInTypeMappings>d__84")]
public sealed virtual IEnumerable`1<ValueTuple`2<Type, Type>> get_BuiltInTypeMappings();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    private void CheckDisposed();
    private void CreateAndInitializeSchemaTypes();
    protected virtual SchemaTypes CreateSchemaTypes();
    protected virtual void Validate();
    protected virtual void CoerceInputTypeDefaultValues();
    [CompilerGeneratedAttribute]
internal static Type <RegisterTypeMapping>g__CheckClrType|80_0(Type clrType);
    [CompilerGeneratedAttribute]
internal static Type <RegisterTypeMapping>g__CheckGraphType|80_1(Type graphType);
    [IteratorStateMachineAttribute("GraphQL.Types.Schema/<<CreateAndInitializeSchemaTypes>g__GetVisitors|88_0>d")]
[CompilerGeneratedAttribute]
private IEnumerable`1<ISchemaNodeVisitor> <CreateAndInitializeSchemaTypes>g__GetVisitors|88_0();
    [CompilerGeneratedAttribute]
internal static void <CoerceInputTypeDefaultValues>g__ExamineType|91_0(IInputObjectGraphType inputType, HashSet`1<IInputObjectGraphType> completed, Stack`1<IInputObjectGraphType> inProcess);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class GraphQL.Types.SchemaDirectives : object {
    [CompilerGeneratedAttribute]
private List`1<Directive> <List>k__BackingField;
    [CompilerGeneratedAttribute]
private IncludeDirective <Include>k__BackingField;
    [CompilerGeneratedAttribute]
private SkipDirective <Skip>k__BackingField;
    [CompilerGeneratedAttribute]
private DeprecatedDirective <Deprecated>k__BackingField;
    internal List`1<Directive> List { get; }
    public IncludeDirective Include { get; }
    public SkipDirective Skip { get; }
    public DeprecatedDirective Deprecated { get; }
    public int Count { get; }
    [CompilerGeneratedAttribute]
internal List`1<Directive> get_List();
    [CompilerGeneratedAttribute]
public virtual IncludeDirective get_Include();
    [CompilerGeneratedAttribute]
public virtual SkipDirective get_Skip();
    [CompilerGeneratedAttribute]
public virtual DeprecatedDirective get_Deprecated();
    public int get_Count();
    public void Register(Directive directive);
    public void Register(Directive[] directives);
    [NullableContextAttribute("2")]
public Directive Find(ROM name);
    public sealed virtual IEnumerator`1<Directive> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class GraphQL.Types.SchemaTypes : object {
    private static string INITIALIZATIION_TRACE_KEY;
    [CompilerGeneratedAttribute]
private static ReadOnlyDictionary`2<Type, Type> <BuiltInScalarMappings>k__BackingField;
    private Dictionary`2<Type, IGraphType> _introspectionTypes;
    private static Dictionary`2<Type, IGraphType> _builtInScalars;
    private static Dictionary`2<Type, IGraphType> _builtInCustomScalars;
    private TypeCollectionContext _context;
    private INameConverter _nameConverter;
    private bool _initialized;
    [CompilerGeneratedAttribute]
private Dictionary`2<ROM, IGraphType> <Dictionary>k__BackingField;
    private Dictionary`2<Type, IGraphType> _typeDictionary;
    [CompilerGeneratedAttribute]
private FieldType <SchemaMetaFieldType>k__BackingField;
    [CompilerGeneratedAttribute]
private FieldType <TypeMetaFieldType>k__BackingField;
    [CompilerGeneratedAttribute]
private FieldType <TypeNameMetaFieldType>k__BackingField;
    public static ReadOnlyDictionary`2<Type, Type> BuiltInScalarMappings { get; }
    protected internal Dictionary`2<ROM, IGraphType> Dictionary { get; }
    public int Count { get; }
    [NullableAttribute("2")]
public IGraphType Item { get; }
    protected internal FieldType SchemaMetaFieldType { get; }
    protected internal FieldType TypeMetaFieldType { get; }
    protected internal FieldType TypeNameMetaFieldType { get; }
    private static SchemaTypes();
    public SchemaTypes(ISchema schema, IServiceProvider serviceProvider);
    public SchemaTypes(ISchema schema, IServiceProvider serviceProvider, IEnumerable`1<IGraphTypeMappingProvider> graphTypeMappings);
    [CompilerGeneratedAttribute]
public static ReadOnlyDictionary`2<Type, Type> get_BuiltInScalarMappings();
    protected void Initialize(ISchema schema, IServiceProvider serviceProvider, IEnumerable`1<IGraphTypeMappingProvider> graphTypeMappings);
    private static ValueTuple`2<IEnumerable`1<IGraphType>, IEnumerable`1<Type>> GetSchemaTypes(ISchema schema, IServiceProvider serviceProvider);
    [IteratorStateMachineAttribute("GraphQL.Types.SchemaTypes/<GetSchemaTypeInstances>d__16")]
private static IEnumerable`1<IGraphType> GetSchemaTypeInstances(ISchema schema, IServiceProvider serviceProvider);
    private static Dictionary`2<Type, IGraphType> CreateIntrospectionTypes(bool allowAppliedDirectives, bool allowRepeatable, bool deprecationOfInputValues);
    [CompilerGeneratedAttribute]
protected internal virtual Dictionary`2<ROM, IGraphType> get_Dictionary();
    public sealed virtual IEnumerator`1<IGraphType> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public int get_Count();
    private IGraphType BuildGraphQLType(Type type, IGraphType resolvedType);
    protected internal virtual IGraphType BuildGraphQLType(Type type, Func`2<Type, IGraphType> resolve);
    public void ApplyMiddleware(IFieldMiddlewareBuilder fieldMiddlewareBuilder);
    public void ApplyMiddleware(Func`2<FieldMiddlewareDelegate, FieldMiddlewareDelegate> transform);
    [NullableContextAttribute("2")]
public IGraphType get_Item(ROM typeName);
    private IGraphType FindGraphType(Type type);
    private void AddType(IGraphType type, TypeCollectionContext context);
    private void HandleField(IComplexGraphType parentType, FieldType field, TypeCollectionContext context, bool applyNameConverter);
    private void HandleDirective(Directive directive, TypeCollectionContext context);
    private void AddTypeWithLoopCheck(IGraphType resolvedType, TypeCollectionContext context, Type namedType);
    private IGraphType AddTypeIfNotRegistered(Type type, TypeCollectionContext context);
    private void AddTypeIfNotRegistered(IGraphType type, TypeCollectionContext context);
    private void EnsureTypeEquality(IGraphType existingType, IGraphType newType, TypeCollectionContext context);
    private object RebuildType(Type type, bool input, IEnumerable`1<IGraphTypeMappingProvider> typeMappings);
    private object GetGraphType(Type clrType, bool input, IEnumerable`1<IGraphTypeMappingProvider> typeMappings);
    protected virtual Type GetGraphTypeFromClrType(Type clrType, bool isInputType, IEnumerable`1<IGraphTypeMappingProvider> typeMappings);
    private void ApplyTypeReferences();
    private void ApplyTypeReference(IGraphType type);
    private IGraphType ConvertTypeReference(INamedType parentType, IGraphType type);
    private void SetGraphType(string typeName, IGraphType graphType);
    private void InheritInterfaceDescriptions();
    [CompilerGeneratedAttribute]
protected internal virtual FieldType get_SchemaMetaFieldType();
    [CompilerGeneratedAttribute]
protected internal virtual FieldType get_TypeMetaFieldType();
    [CompilerGeneratedAttribute]
protected internal virtual FieldType get_TypeNameMetaFieldType();
    [CompilerGeneratedAttribute]
internal static void <.cctor>g__Preserve|4_0();
    [CompilerGeneratedAttribute]
internal static string <EnsureTypeEquality>g__ErrorMessage|39_0(<>c__DisplayClass39_0& );
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class GraphQL.Types.ShortGraphType : ScalarGraphType {
    public virtual object ParseLiteral(GraphQLValue value);
    public virtual bool CanParseLiteral(GraphQLValue value);
    [NullableContextAttribute("2")]
public virtual object ParseValue(object value);
    public virtual bool CanSerializeList(IEnumerable list, bool allowNulls);
}
public class GraphQL.Types.SkipDirective : Directive {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class GraphQL.Types.StringGraphType : ScalarGraphType {
    public virtual object ParseLiteral(GraphQLValue value);
    public virtual bool CanParseLiteral(GraphQLValue value);
    [NullableContextAttribute("2")]
public virtual object ParseValue(object value);
    [NullableContextAttribute("2")]
public virtual bool CanParseValue(object value);
    public virtual bool CanSerializeList(IEnumerable list, bool allowNulls);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class GraphQL.Types.TimeSpanMillisecondsGraphType : ScalarGraphType {
    [NullableContextAttribute("1")]
public virtual object ParseLiteral(GraphQLValue value);
    public virtual object ParseValue(object value);
    public virtual object Serialize(object value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class GraphQL.Types.TimeSpanSecondsGraphType : ScalarGraphType {
    [NullableContextAttribute("1")]
public virtual object ParseLiteral(GraphQLValue value);
    public virtual object ParseValue(object value);
    public virtual object Serialize(object value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class GraphQL.Types.TypeCollectionContext : object {
    [CompilerGeneratedAttribute]
private Func`2<Type, IGraphType> <ResolveType>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`3<string, IGraphType, TypeCollectionContext> <AddType>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IEnumerable`1<IGraphTypeMappingProvider> <ClrToGraphTypeMappings>k__BackingField;
    [CompilerGeneratedAttribute]
private Stack`1<Type> <InFlightRegisteredTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private ISchema <Schema>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private List`1<string> <InitializationTrace>k__BackingField;
    internal Func`2<Type, IGraphType> ResolveType { get; }
    internal Action`3<string, IGraphType, TypeCollectionContext> AddType { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal IEnumerable`1<IGraphTypeMappingProvider> ClrToGraphTypeMappings { get; }
    internal Stack`1<Type> InFlightRegisteredTypes { get; }
    internal ISchema Schema { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal List`1<string> InitializationTrace { get; internal set; }
    internal TypeCollectionContext(Func`2<Type, IGraphType> resolver, Action`3<string, IGraphType, TypeCollectionContext> addType, IEnumerable`1<IGraphTypeMappingProvider> typeMappings, ISchema schema);
    [CompilerGeneratedAttribute]
internal Func`2<Type, IGraphType> get_ResolveType();
    [CompilerGeneratedAttribute]
internal Action`3<string, IGraphType, TypeCollectionContext> get_AddType();
    [CompilerGeneratedAttribute]
internal IEnumerable`1<IGraphTypeMappingProvider> get_ClrToGraphTypeMappings();
    [CompilerGeneratedAttribute]
internal Stack`1<Type> get_InFlightRegisteredTypes();
    [CompilerGeneratedAttribute]
internal ISchema get_Schema();
    [CompilerGeneratedAttribute]
internal List`1<string> get_InitializationTrace();
    [CompilerGeneratedAttribute]
internal void set_InitializationTrace(List`1<string> value);
    internal TypeCollectionContextInitializationTrace Trace(string traceElement);
    internal TypeCollectionContextInitializationTrace Trace(string traceElement, object arg1);
    [NullableContextAttribute("2")]
internal TypeCollectionContextInitializationTrace Trace(string traceElement, object arg1, object arg2);
}
[IsReadOnlyAttribute]
internal class GraphQL.Types.TypeCollectionContextInitializationTrace : ValueType {
    [NullableAttribute("2")]
private TypeCollectionContext _context;
    [NullableContextAttribute("1")]
public TypeCollectionContextInitializationTrace(TypeCollectionContext context, string traceElement);
    public sealed virtual void Dispose();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class GraphQL.Types.TypeExtensions : object {
    [ExtensionAttribute]
public static IGraphType NamedGraphTypeFromType(GraphQLType type, ISchema schema);
    [ExtensionAttribute]
public static IGraphType GraphTypeFromType(GraphQLType type, ISchema schema);
    [ExtensionAttribute]
public static string Name(GraphQLType type);
    [ExtensionAttribute]
public static string FullName(GraphQLType type);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class GraphQL.Types.TypeFields : object {
    [CompilerGeneratedAttribute]
private List`1<FieldType> <List>k__BackingField;
    internal List`1<FieldType> List { get; }
    public int Count { get; }
    [CompilerGeneratedAttribute]
internal List`1<FieldType> get_List();
    public int get_Count();
    internal void Add(FieldType field);
    public FieldType Find(string name);
    [NullableContextAttribute("2")]
public FieldType Find(ROM name);
    public bool Contains(FieldType field);
    public bool Contains(IFieldType field);
    public sealed virtual IEnumerator`1<FieldType> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class GraphQL.Types.TypeInformation : object {
    [CompilerGeneratedAttribute]
private MemberInfo <MemberInfo>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private ParameterInfo <ParameterInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsInputType>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsNullable>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsList>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ListIsNullable>k__BackingField;
    [NullableAttribute("2")]
private Type _graphType;
    internal static Type[] EnumerableListTypes;
    public MemberInfo MemberInfo { get; }
    [NullableAttribute("2")]
public ParameterInfo ParameterInfo { get; }
    public bool IsInputType { get; }
    public Type Type { get; public set; }
    public bool IsNullable { get; public set; }
    public bool IsList { get; public set; }
    public bool ListIsNullable { get; public set; }
    [NullableAttribute("2")]
public Type GraphType { get; public set; }
    public TypeInformation(MemberInfo memberInfo, bool isInputType, Type type, bool isNullable, bool isList, bool listIsNullable, Type graphType);
    public TypeInformation(ParameterInfo parameterInfo, Type type, bool isNullable, bool isList, bool listIsNullable, Type graphType);
    public TypeInformation(PropertyInfo propertyInfo, bool isInput);
    public TypeInformation(FieldInfo fieldInfo, bool isInput);
    public TypeInformation(MethodInfo methodInfo);
    public TypeInformation(ParameterInfo parameterInfo);
    private static TypeInformation();
    [CompilerGeneratedAttribute]
public MemberInfo get_MemberInfo();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public ParameterInfo get_ParameterInfo();
    [CompilerGeneratedAttribute]
public bool get_IsInputType();
    [CompilerGeneratedAttribute]
public Type get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(Type value);
    [CompilerGeneratedAttribute]
public bool get_IsNullable();
    [CompilerGeneratedAttribute]
public void set_IsNullable(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsList();
    [CompilerGeneratedAttribute]
public void set_IsList(bool value);
    [CompilerGeneratedAttribute]
public bool get_ListIsNullable();
    [CompilerGeneratedAttribute]
public void set_ListIsNullable(bool value);
    [NullableContextAttribute("2")]
public Type get_GraphType();
    [NullableContextAttribute("2")]
public void set_GraphType(Type value);
    private void ProcessTypeTree(List`1<ValueTuple`2<Type, NullabilityState>> typeTree, bool isInput);
    private static List`1<ValueTuple`2<Type, NullabilityState>> Interpret(NullabilityInfo info, bool isInput);
    public virtual void ApplyAttributes();
    public virtual Type ConstructGraphType();
    private bool IsRecognizedListType(Type type);
    [CompilerGeneratedAttribute]
internal static void <Interpret>g__RecursiveLoop|36_0(NullabilityInfo info, <>c__DisplayClass36_0& );
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class GraphQL.Types.UIntGraphType : ScalarGraphType {
    public virtual object ParseLiteral(GraphQLValue value);
    public virtual bool CanParseLiteral(GraphQLValue value);
    [NullableContextAttribute("2")]
public virtual object ParseValue(object value);
    public virtual bool CanSerializeList(IEnumerable list, bool allowNulls);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class GraphQL.Types.ULongGraphType : ScalarGraphType {
    public virtual object ParseLiteral(GraphQLValue value);
    public virtual bool CanParseLiteral(GraphQLValue value);
    [NullableContextAttribute("2")]
public virtual object ParseValue(object value);
    public virtual bool CanSerializeList(IEnumerable list, bool allowNulls);
}
public class GraphQL.Types.UnionGraphType : GraphType {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<Type> _types;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private PossibleTypes <PossibleTypes>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`2<object, IObjectGraphType> <ResolveType>k__BackingField;
    [NullableAttribute("1")]
public PossibleTypes PossibleTypes { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Func`2<object, IObjectGraphType> ResolveType { get; public set; }
    [NullableAttribute("1")]
public IEnumerable`1<Type> Types { get; public set; }
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public sealed virtual PossibleTypes get_PossibleTypes();
    [CompilerGeneratedAttribute]
public sealed virtual Func`2<object, IObjectGraphType> get_ResolveType();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ResolveType(Func`2<object, IObjectGraphType> value);
    [NullableContextAttribute("1")]
public sealed virtual void AddPossibleType(IObjectGraphType type);
    [NullableContextAttribute("1")]
public IEnumerable`1<Type> get_Types();
    [NullableContextAttribute("1")]
public void set_Types(IEnumerable`1<Type> value);
    public void Type();
    [NullableContextAttribute("1")]
public void Type(Type type);
    private void EnsureTypes();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class GraphQL.Types.UriGraphType : ScalarGraphType {
    [NullableContextAttribute("1")]
public virtual object ParseLiteral(GraphQLValue value);
    public virtual object ParseValue(object value);
    public virtual object Serialize(object value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class GraphQL.Types.UShortGraphType : ScalarGraphType {
    public virtual object ParseLiteral(GraphQLValue value);
    public virtual bool CanParseLiteral(GraphQLValue value);
    [NullableContextAttribute("2")]
public virtual object ParseValue(object value);
    public virtual bool CanSerializeList(IEnumerable list, bool allowNulls);
}
internal static class GraphQL.UInt : object {
    public static bool TryParse(ReadOnlySpan`1<char> s, UInt32& result);
    public static bool TryParse(ReadOnlySpan`1<char> s, NumberStyles style, IFormatProvider provider, UInt32& result);
    public static UInt32 Parse(ReadOnlySpan`1<char> s);
    public static UInt32 Parse(ReadOnlySpan`1<char> s, NumberStyles style, IFormatProvider provider);
}
internal static class GraphQL.ULong : object {
    public static bool TryParse(ReadOnlySpan`1<char> s, UInt64& result);
    public static bool TryParse(ReadOnlySpan`1<char> s, NumberStyles style, IFormatProvider provider, UInt64& result);
    public static ulong Parse(ReadOnlySpan`1<char> s);
    public static ulong Parse(ReadOnlySpan`1<char> s, NumberStyles style, IFormatProvider provider);
}
internal static class GraphQL.UShort : object {
    public static bool TryParse(ReadOnlySpan`1<char> s, UInt16& result);
    public static bool TryParse(ReadOnlySpan`1<char> s, NumberStyles style, IFormatProvider provider, UInt16& result);
    public static ushort Parse(ReadOnlySpan`1<char> s);
    public static ushort Parse(ReadOnlySpan`1<char> s, NumberStyles style, IFormatProvider provider);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class GraphQL.Utilities.AppliedDirectivesValidationVisitor : object {
    private List`1<Exception> _exceptions;
    public static void Run(ISchema schema);
    private void ReportError(Exception ex);
    public sealed virtual void VisitObjectFieldArgumentDefinition(QueryArgument argument, FieldType field, IObjectGraphType type, ISchema schema);
    public sealed virtual void VisitInterfaceFieldArgumentDefinition(QueryArgument argument, FieldType field, IInterfaceGraphType type, ISchema schema);
    public sealed virtual void VisitDirectiveArgumentDefinition(QueryArgument argument, Directive directive, ISchema schema);
    public sealed virtual void VisitEnum(EnumerationGraphType type, ISchema schema);
    public sealed virtual void VisitDirective(Directive directive, ISchema schema);
    public sealed virtual void VisitEnumValue(EnumValueDefinition value, EnumerationGraphType type, ISchema schema);
    public sealed virtual void VisitObjectFieldDefinition(FieldType field, IObjectGraphType type, ISchema schema);
    public sealed virtual void VisitInterfaceFieldDefinition(FieldType field, IInterfaceGraphType type, ISchema schema);
    public sealed virtual void VisitInputObjectFieldDefinition(FieldType field, IInputObjectGraphType type, ISchema schema);
    public sealed virtual void VisitInputObject(IInputObjectGraphType type, ISchema schema);
    public sealed virtual void VisitInterface(IInterfaceGraphType type, ISchema schema);
    public sealed virtual void VisitObject(IObjectGraphType type, ISchema schema);
    public sealed virtual void VisitScalar(ScalarGraphType type, ISchema schema);
    public sealed virtual void VisitSchema(ISchema schema);
    public sealed virtual void PostVisitSchema(ISchema schema);
    public sealed virtual void VisitUnion(UnionGraphType type, ISchema schema);
    private void ValidateAppliedDirectives(IMetadataReader provider, object parent1, object parent2, ISchema schema, Nullable`1<DirectiveLocation> location);
    [CompilerGeneratedAttribute]
internal static string <ValidateAppliedDirectives>g__GetElementDescription|20_0(<>c__DisplayClass20_0& );
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class GraphQL.Utilities.ArgumentConfig : MetadataProvider {
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private object <DefaultValue>k__BackingField;
    [NullableAttribute("1")]
public string Name { get; }
    public string Description { get; public set; }
    public object DefaultValue { get; public set; }
    [NullableContextAttribute("1")]
public ArgumentConfig(string name);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
    [CompilerGeneratedAttribute]
public object get_DefaultValue();
    [CompilerGeneratedAttribute]
public void set_DefaultValue(object value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class GraphQL.Utilities.BaseSchemaNodeVisitor : object {
    public virtual void VisitSchema(ISchema schema);
    public virtual void PostVisitSchema(ISchema schema);
    public virtual void VisitDirective(Directive directive, ISchema schema);
    public virtual void VisitScalar(ScalarGraphType type, ISchema schema);
    public virtual void VisitObject(IObjectGraphType type, ISchema schema);
    public virtual void VisitInputObject(IInputObjectGraphType type, ISchema schema);
    public virtual void VisitObjectFieldDefinition(FieldType field, IObjectGraphType type, ISchema schema);
    public virtual void VisitInterfaceFieldDefinition(FieldType field, IInterfaceGraphType type, ISchema schema);
    public virtual void VisitInputObjectFieldDefinition(FieldType field, IInputObjectGraphType type, ISchema schema);
    public virtual void VisitObjectFieldArgumentDefinition(QueryArgument argument, FieldType field, IObjectGraphType type, ISchema schema);
    public virtual void VisitInterfaceFieldArgumentDefinition(QueryArgument argument, FieldType field, IInterfaceGraphType type, ISchema schema);
    public virtual void VisitDirectiveArgumentDefinition(QueryArgument argument, Directive directive, ISchema schema);
    public virtual void VisitInterface(IInterfaceGraphType type, ISchema schema);
    public virtual void VisitUnion(UnionGraphType type, ISchema schema);
    public virtual void VisitEnum(EnumerationGraphType type, ISchema schema);
    public virtual void VisitEnumValue(EnumValueDefinition value, EnumerationGraphType type, ISchema schema);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ObsoleteAttribute("This class will be removed in v9 as it is not needed with GraphQL.Federation.Resolvers.IFederationResolver.")]
public class GraphQL.Utilities.Federation.FederatedResolveContext : object {
    [CompilerGeneratedAttribute]
private IResolveFieldContext <ParentFieldContext>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Dictionary`2<string, object> <Arguments>k__BackingField;
    public IResolveFieldContext ParentFieldContext { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Dictionary`2<string, object> Arguments { get; public set; }
    [CompilerGeneratedAttribute]
public IResolveFieldContext get_ParentFieldContext();
    [CompilerGeneratedAttribute]
public void set_ParentFieldContext(IResolveFieldContext value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, object> get_Arguments();
    [CompilerGeneratedAttribute]
public void set_Arguments(Dictionary`2<string, object> value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ObsoleteAttribute("Please use Schema.For with graphQlBuilder.AddFederation() instead. This class will be removed in v9.")]
public class GraphQL.Utilities.Federation.FederatedSchema : object {
    public static Schema For(string typeDefinitions, Action`1<FederatedSchemaBuilder> configure);
    public static Schema For(string typeDefinitions, Action`1<TFederatedSchemaBuilder> configure);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ObsoleteAttribute("Please use SchemaBuilder with graphQlBuilder.AddFederation() instead. This class will be removed in v9.")]
public class GraphQL.Utilities.Federation.FederatedSchemaBuilder : SchemaBuilder {
    internal static string RESOLVER_METADATA_FIELD;
    private static string FEDERATED_SDL;
    public virtual Schema Build(string typeDefinitions);
    protected virtual void PreConfigure(Schema schema);
    private void AddRootEntityFields(ISchema schema);
    private UnionGraphType BuildEntityGraphType();
    private bool IsEntity(IGraphType type);
    private static GraphQLDirective Directive(IEnumerable`1<GraphQLDirective> directives, string name);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ObsoleteAttribute("Please use the schema.Print() extension method instead. This class will be removed in v9.")]
public class GraphQL.Utilities.Federation.FederatedSchemaPrinter : SchemaPrinter {
    private List`1<string> _federatedDirectives;
    private List`1<string> _federatedTypes;
    public FederatedSchemaPrinter(ISchema schema, SchemaPrinterOptions options);
    public string PrintFederatedDirectives(IGraphType type);
    public string PrintFederatedDirectivesFromAst(IMetadataReader type);
    public string PrintAstDirective(GraphQLDirective directive);
    public virtual string PrintObject(IObjectGraphType type);
    public virtual string PrintInterface(IInterfaceGraphType type);
    public virtual string PrintFields(IComplexGraphType type);
    public string PrintFederatedSchema();
    public bool IsFederatedDirective(string directiveName);
    public bool IsFederatedType(string typeName);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private bool <PrintFederatedDirectivesFromAst>b__4_0(GraphQLDirective x);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private bool <PrintObject>b__6_1(FieldType x);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private bool <PrintFields>b__8_0(FieldType x);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private <>f__AnonymousType1`6<string, IGraphType, string, string, string, string> <PrintFields>b__8_1(FieldType x);
    [CompilerGeneratedAttribute]
private bool <PrintFederatedSchema>b__9_0(string directiveName);
    [CompilerGeneratedAttribute]
private bool <PrintFederatedSchema>b__9_1(string typeName);
}
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ObsoleteAttribute("Please use the GraphQL.Federation.FederationResolver class instead. This class will be removed in v9.")]
public class GraphQL.Utilities.Federation.FuncFederatedResolver`1 : FederationResolver`2<Dictionary`2<string, object>, TReturn> {
    public FuncFederatedResolver`1(Func`2<FederatedResolveContext, Task`1<TReturn>> func);
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("GraphQL.Utilities.Federation.FuncFederatedResolver`1/<Resolve>d__1")]
public sealed virtual Task`1<object> Resolve(FederatedResolveContext context);
}
[NullableContextAttribute("1")]
[ObsoleteAttribute("Please use IFederationResolver instead. This interface will be removed in v9.")]
public interface GraphQL.Utilities.Federation.IFederatedResolver {
    public abstract virtual Task`1<object> Resolve(FederatedResolveContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class GraphQL.Utilities.Federation.TypeConfigExtensions : object {
    [ExtensionAttribute]
[ObsoleteAttribute("Please use another overload instead, found in the GraphQL.Federation namespace. This method will be removed in v9.")]
public static void ResolveReferenceAsync(TypeConfig config, Func`2<FederatedResolveContext, Task`1<T>> resolver);
    [ExtensionAttribute]
[ObsoleteAttribute("Please use ResolveReference instead, found in the GraphQL.Federation namespace. This method will be removed in v9.")]
public static void ResolveReferenceAsync(TypeConfig config, IFederatedResolver resolver);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class GraphQL.Utilities.FieldConfig : MetadataProvider {
    [NullableAttribute("1")]
private LightweightCache`2<string, ArgumentConfig> _arguments;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DeprecationReason>k__BackingField;
    [CompilerGeneratedAttribute]
private object <DefaultValue>k__BackingField;
    [CompilerGeneratedAttribute]
private IFieldResolver <Resolver>k__BackingField;
    [CompilerGeneratedAttribute]
private ISourceStreamResolver <StreamResolver>k__BackingField;
    [CompilerGeneratedAttribute]
private IAccessor <ResolverAccessor>k__BackingField;
    [CompilerGeneratedAttribute]
private IAccessor <StreamResolverAccessor>k__BackingField;
    [NullableAttribute("1")]
public string Name { get; }
    public string Description { get; public set; }
    public string DeprecationReason { get; public set; }
    public object DefaultValue { get; public set; }
    public IFieldResolver Resolver { get; public set; }
    public ISourceStreamResolver StreamResolver { get; public set; }
    public IAccessor ResolverAccessor { get; public set; }
    public IAccessor StreamResolverAccessor { get; public set; }
    [NullableContextAttribute("1")]
public FieldConfig(string name);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
    [CompilerGeneratedAttribute]
public string get_DeprecationReason();
    [CompilerGeneratedAttribute]
public void set_DeprecationReason(string value);
    [CompilerGeneratedAttribute]
public object get_DefaultValue();
    [CompilerGeneratedAttribute]
public void set_DefaultValue(object value);
    [CompilerGeneratedAttribute]
public IFieldResolver get_Resolver();
    [CompilerGeneratedAttribute]
public void set_Resolver(IFieldResolver value);
    [CompilerGeneratedAttribute]
public ISourceStreamResolver get_StreamResolver();
    [CompilerGeneratedAttribute]
public void set_StreamResolver(ISourceStreamResolver value);
    [CompilerGeneratedAttribute]
public IAccessor get_ResolverAccessor();
    [CompilerGeneratedAttribute]
public void set_ResolverAccessor(IAccessor value);
    [CompilerGeneratedAttribute]
public IAccessor get_StreamResolverAccessor();
    [CompilerGeneratedAttribute]
public void set_StreamResolverAccessor(IAccessor value);
    [NullableContextAttribute("1")]
public ArgumentConfig ArgumentFor(string argumentName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class GraphQL.Utilities.FieldTypeDefaultArgumentsVisitor : BaseSchemaNodeVisitor {
    public static FieldTypeDefaultArgumentsVisitor Instance;
    private static FieldTypeDefaultArgumentsVisitor();
    public virtual void VisitObjectFieldDefinition(FieldType field, IObjectGraphType type, ISchema schema);
    public virtual void VisitInterfaceFieldDefinition(FieldType field, IInterfaceGraphType type, ISchema schema);
}
[NullableContextAttribute("1")]
public interface GraphQL.Utilities.ISchemaNodeVisitor {
    public abstract virtual void VisitSchema(ISchema schema);
    public abstract virtual void PostVisitSchema(ISchema schema);
    public abstract virtual void VisitDirective(Directive directive, ISchema schema);
    public abstract virtual void VisitScalar(ScalarGraphType type, ISchema schema);
    public abstract virtual void VisitObject(IObjectGraphType type, ISchema schema);
    public abstract virtual void VisitInputObject(IInputObjectGraphType type, ISchema schema);
    public abstract virtual void VisitObjectFieldDefinition(FieldType field, IObjectGraphType type, ISchema schema);
    public abstract virtual void VisitInterfaceFieldDefinition(FieldType field, IInterfaceGraphType type, ISchema schema);
    public abstract virtual void VisitInputObjectFieldDefinition(FieldType field, IInputObjectGraphType type, ISchema schema);
    public abstract virtual void VisitObjectFieldArgumentDefinition(QueryArgument argument, FieldType field, IObjectGraphType type, ISchema schema);
    public abstract virtual void VisitInterfaceFieldArgumentDefinition(QueryArgument argument, FieldType field, IInterfaceGraphType type, ISchema schema);
    public abstract virtual void VisitDirectiveArgumentDefinition(QueryArgument argument, Directive directive, ISchema schema);
    public abstract virtual void VisitInterface(IInterfaceGraphType type, ISchema schema);
    public abstract virtual void VisitUnion(UnionGraphType type, ISchema schema);
    public abstract virtual void VisitEnum(EnumerationGraphType type, ISchema schema);
    public abstract virtual void VisitEnumValue(EnumValueDefinition value, EnumerationGraphType type, ISchema schema);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class GraphQL.Utilities.LinkConfiguration : object {
    internal static string LINK_URL;
    internal static string METADATA_KEY;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [NullableAttribute("2")]
private string _originalNamespace;
    [NullableAttribute("2")]
private string _namespace;
    [CompilerGeneratedAttribute]
private Nullable`1<LinkPurpose> <Purpose>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <Imports>k__BackingField;
    public string Url { get; }
    [NullableAttribute("2")]
public string Namespace { get; public set; }
    public Nullable`1<LinkPurpose> Purpose { get; public set; }
    public Dictionary`2<string, string> Imports { get; }
    public LinkConfiguration(string url);
    [CompilerGeneratedAttribute]
public string get_Url();
    [NullableContextAttribute("2")]
public string get_Namespace();
    [NullableContextAttribute("2")]
public void set_Namespace(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<LinkPurpose> get_Purpose();
    [CompilerGeneratedAttribute]
public void set_Purpose(Nullable`1<LinkPurpose> value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_Imports();
    public string NameForType(string typeName);
    public string NameForDirective(string directiveName);
    internal void ConfigureAppliedDirective(AppliedDirective o);
    private static ValueTuple`2<string, string> TryParseUrl(string url);
    internal static LinkConfiguration GetConfiguration(AppliedDirective appliedDirective);
    internal static bool TryParseDirective(AppliedDirective appliedDirective, bool saveToMetadata, LinkConfiguration& configuration);
    [CompilerGeneratedAttribute]
internal static bool <TryParseUrl>g__IsValidVersionTag|21_0(string version);
    [CompilerGeneratedAttribute]
internal static bool <TryParseUrl>g__IsValidGraphQLName|21_1(string name);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class GraphQL.Utilities.MetadataProvider : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Dictionary`2<string, object> _metadata;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Dictionary`2<string, object> Metadata { get; }
    private IMetadataReader GraphQL.Types.IMetadataWriter.MetadataReader { get; }
    public sealed virtual Dictionary`2<string, object> get_Metadata();
    private sealed virtual override IMetadataReader GraphQL.Types.IMetadataWriter.get_MetadataReader();
    public sealed virtual TType GetMetadata(string key, TType defaultValue);
    public sealed virtual TType GetMetadata(string key, Func`1<TType> defaultValueFactory);
    public sealed virtual bool HasMetadata(string key);
    public void CopyMetadataTo(IMetadataWriter target);
}
public enum GraphQL.Utilities.NamedElement : Enum {
    public int value__;
    public static NamedElement Field;
    public static NamedElement Type;
    public static NamedElement Argument;
    public static NamedElement EnumValue;
    public static NamedElement Directive;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class GraphQL.Utilities.NameValidator : object {
    public static void ValidateName(string name, NamedElement type);
    internal static void ValidateNameOnSchemaInitialize(string name, NamedElement type);
    public static void ValidateDefault(string name, NamedElement type);
    internal static void ValidateNameNotNull(string name, NamedElement type);
    [CompilerGeneratedAttribute]
internal static void <ValidateDefault>g__ThrowMatchError|2_0(<>c__DisplayClass2_0& );
}
public class GraphQL.Utilities.PrintOptions : SDLPrinterOptions {
    [CompilerGeneratedAttribute]
private bool <IncludeDescriptions>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IncludeDeprecationReasons>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<StringComparison> <StringComparison>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IncludeFederationTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IncludeImportedDefinitions>k__BackingField;
    public bool IncludeDescriptions { get; public set; }
    public bool IncludeDeprecationReasons { get; public set; }
    public Nullable`1<StringComparison> StringComparison { get; public set; }
    public bool IncludeFederationTypes { get; public set; }
    public bool IncludeImportedDefinitions { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_IncludeDescriptions();
    [CompilerGeneratedAttribute]
public void set_IncludeDescriptions(bool value);
    [CompilerGeneratedAttribute]
public bool get_IncludeDeprecationReasons();
    [CompilerGeneratedAttribute]
public void set_IncludeDeprecationReasons(bool value);
    [CompilerGeneratedAttribute]
public Nullable`1<StringComparison> get_StringComparison();
    [CompilerGeneratedAttribute]
public void set_StringComparison(Nullable`1<StringComparison> value);
    [CompilerGeneratedAttribute]
public bool get_IncludeFederationTypes();
    [CompilerGeneratedAttribute]
public void set_IncludeFederationTypes(bool value);
    [CompilerGeneratedAttribute]
public bool get_IncludeImportedDefinitions();
    [CompilerGeneratedAttribute]
public void set_IncludeImportedDefinitions(bool value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class GraphQL.Utilities.RemovePrivateTypesAndFieldsVisitor : BaseSchemaNodeVisitor {
    public static RemovePrivateTypesAndFieldsVisitor Instance;
    private static RemovePrivateTypesAndFieldsVisitor();
    public virtual void VisitSchema(ISchema schema);
    public virtual void VisitInputObject(IInputObjectGraphType type, ISchema schema);
    public virtual void VisitObject(IObjectGraphType type, ISchema schema);
    public virtual void VisitInterface(IInterfaceGraphType type, ISchema schema);
    public virtual void VisitUnion(UnionGraphType type, ISchema schema);
    public virtual void VisitDirectiveArgumentDefinition(QueryArgument argument, Directive directive, ISchema schema);
    public virtual void VisitInterfaceFieldArgumentDefinition(QueryArgument argument, FieldType field, IInterfaceGraphType type, ISchema schema);
    public virtual void VisitObjectFieldArgumentDefinition(QueryArgument argument, FieldType field, IObjectGraphType type, ISchema schema);
    private static void ValidateFieldArgument(IGraphType parentType, FieldType field, QueryArgument argument);
    private static void RemovePrivateTypes(PossibleTypes possibleTypes);
    private static void ExamineFields(IGraphType parentType, TypeFields typeFields);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class GraphQL.Utilities.SchemaBuilder : object {
    protected Dictionary`2<string, IGraphType> _types;
    [NullableAttribute("2")]
private GraphQLSchemaDefinition _schemaDef;
    [CompilerGeneratedAttribute]
private IServiceProvider <ServiceProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IgnoreComments>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IgnoreLocations>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowUnknownTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowUnknownFields>k__BackingField;
    [CompilerGeneratedAttribute]
private TypeSettings <Types>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RunConfigurations>k__BackingField;
    public IServiceProvider ServiceProvider { get; public set; }
    public bool IgnoreComments { get; public set; }
    public bool IgnoreLocations { get; public set; }
    public bool AllowUnknownTypes { get; public set; }
    public bool AllowUnknownFields { get; public set; }
    public TypeSettings Types { get; }
    public bool RunConfigurations { get; public set; }
    private IgnoreOptions CreateIgnoreOptions();
    [CompilerGeneratedAttribute]
public IServiceProvider get_ServiceProvider();
    [CompilerGeneratedAttribute]
public void set_ServiceProvider(IServiceProvider value);
    [CompilerGeneratedAttribute]
public bool get_IgnoreComments();
    [CompilerGeneratedAttribute]
public void set_IgnoreComments(bool value);
    [CompilerGeneratedAttribute]
public bool get_IgnoreLocations();
    [CompilerGeneratedAttribute]
public void set_IgnoreLocations(bool value);
    [CompilerGeneratedAttribute]
public bool get_AllowUnknownTypes();
    [CompilerGeneratedAttribute]
public void set_AllowUnknownTypes(bool value);
    [CompilerGeneratedAttribute]
public bool get_AllowUnknownFields();
    [CompilerGeneratedAttribute]
public void set_AllowUnknownFields(bool value);
    [CompilerGeneratedAttribute]
public TypeSettings get_Types();
    [CompilerGeneratedAttribute]
public bool get_RunConfigurations();
    [CompilerGeneratedAttribute]
public void set_RunConfigurations(bool value);
    public virtual Schema Build(string typeDefinitions);
    protected virtual void Validate(GraphQLDocument document);
    protected virtual Schema CreateSchema();
    private Schema BuildSchemaFrom(GraphQLDocument document);
    protected virtual void PreConfigure(Schema schema);
    protected virtual IGraphType GetType(string name);
    private bool IsSubscriptionType(ObjectGraphType type);
    private void AssertKnownType(TypeConfig typeConfig);
    private void AssertKnownField(FieldConfig fieldConfig, TypeConfig typeConfig);
    private void OverrideDeprecationReason(IProvideDeprecationReason element, string reason);
    protected virtual IObjectGraphType ToObjectGraphType(GraphQLObjectTypeDefinition astType, bool isExtensionType);
    private void InitializeField(FieldConfig config, Type parentType);
    private void InitializeSubscriptionField(FieldConfig config, Type parentType);
    protected virtual FieldType ToFieldType(string parentTypeName, GraphQLFieldDefinition fieldDef);
    protected virtual FieldType ToSubscriptionFieldType(string parentTypeName, GraphQLFieldDefinition fieldDef);
    protected virtual FieldType ToFieldType(string parentTypeName, GraphQLInputValueDefinition inputDef);
    protected virtual InterfaceGraphType ToInterfaceType(GraphQLInterfaceTypeDefinition interfaceDef);
    protected virtual UnionGraphType ToUnionType(GraphQLUnionTypeDefinition unionDef);
    protected virtual InputObjectGraphType ToInputObjectType(GraphQLInputObjectTypeDefinition inputDef);
    protected virtual EnumerationGraphType ToEnumerationType(GraphQLEnumTypeDefinition enumDef);
    protected virtual Directive ToDirective(GraphQLDirectiveDefinition directiveDef);
    private EnumValueDefinition ToEnumValue(GraphQLEnumValueDefinition valDef, Type enumType);
    protected virtual QueryArgument ToArgument(ArgumentConfig argumentConfig, GraphQLInputValueDefinition inputDef);
    private IGraphType ToGraphType(GraphQLType astType);
    private QueryArguments ToQueryArguments(List`1<GraphQLInputValueDefinition> arguments);
    private QueryArguments ToQueryArguments(FieldConfig fieldConfig, List`1<GraphQLInputValueDefinition> arguments);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private QueryArgument <ToQueryArguments>b__54_0(GraphQLInputValueDefinition a);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class GraphQL.Utilities.SchemaBuilderExtensions : object {
    private static string AST_METAFIELD;
    private static string EXTENSION_AST_METAFIELD;
    [ExtensionAttribute]
public static bool IsExtensionType(IMetadataReader type);
    [ExtensionAttribute]
public static bool AstTypeHasFields(IMetadataReader type);
    [ExtensionAttribute]
public static T GetAstType(IMetadataReader type);
    [ExtensionAttribute]
public static TMetadataProvider SetAstType(TMetadataProvider provider, ASTNode node);
    [ExtensionAttribute]
public static TMetadataProvider CopyDirectivesFrom(TMetadataProvider provider, IHasDirectivesNode node);
    [ExtensionAttribute]
public static bool HasExtensionAstTypes(IMetadataReader type);
    [ExtensionAttribute]
public static void AddExtensionAstType(IMetadataWriter type, T astType);
    [ExtensionAttribute]
public static List`1<ASTNode> GetExtensionAstTypes(IMetadataReader type);
    [ExtensionAttribute]
public static IEnumerable`1<GraphQLDirective> GetExtensionDirectives(IMetadataReader type);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class GraphQL.Utilities.SchemaExporter : object {
    [CompilerGeneratedAttribute]
private ISchema <Schema>k__BackingField;
    private static HashSet`1<string> _builtInScalars;
    private static HashSet`1<string> _builtInDirectives;
    protected ISchema Schema { get; }
    public SchemaExporter(ISchema schema);
    private static SchemaExporter();
    [CompilerGeneratedAttribute]
protected ISchema get_Schema();
    public virtual GraphQLDocument Export();
    protected virtual bool IsDefaultSchemaConfiguration(GraphQLSchemaDefinition schemaDefinition);
    protected static bool IsIntrospectionType(string typeName);
    protected static bool IsBuiltInScalar(string typeName);
    protected static bool IsBuiltInDirective(string directiveName);
    protected virtual GraphQLTypeDefinition ExportTypeDefinition(IGraphType graphType);
    protected virtual GraphQLInputObjectTypeDefinition ExportInputObjectTypeDefinition(IInputObjectGraphType graphType);
    protected virtual GraphQLInputFieldDefinition ExportInputFieldDefinition(FieldType fieldType);
    protected virtual GraphQLInterfaceTypeDefinition ExportInterfaceTypeDefinition(IInterfaceGraphType graphType);
    protected virtual GraphQLObjectTypeDefinition ExportObjectTypeDefinition(IObjectGraphType graphType);
    protected virtual ASTNode ApplyExtend(ASTNode node, IMetadataReader graphType);
    protected virtual GraphQLFieldDefinition ExportFieldDefinition(FieldType fieldType);
    protected virtual GraphQLUnionTypeDefinition ExportUnionTypeDefinition(UnionGraphType graphType);
    protected virtual GraphQLScalarTypeDefinition ExportScalarTypeDefinition(ScalarGraphType scalarType);
    protected virtual GraphQLEnumTypeDefinition ExportEnumTypeDefinition(EnumerationGraphType enumType);
    protected virtual GraphQLSchemaDefinition ExportSchemaDefinition();
    protected virtual GraphQLDirectiveDefinition ExportDirectiveDefinition(Directive directive);
    [NullableContextAttribute("2")]
private GraphQLArgumentsDefinition ExportArgumentsDefinition(QueryArguments arguments);
    protected virtual GraphQLArgumentDefinition ExportArgumentDefinition(QueryArgument argument);
    protected virtual GraphQLType ExportTypeReference(IGraphType graphType);
    protected virtual T ApplyDescription(T node, IProvideDescription obj);
    protected virtual T ApplyDirectives(T node, IMetadataReader obj);
    protected virtual GraphQLDirective ExportAppliedDirective(AppliedDirective appliedDirective);
    protected virtual GraphQLArgument ExportAppliedDirectiveArgument(Directive directive, DirectiveArgument argument);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ObsoleteAttribute("Please use the schema.Print() extension method instead. This class will be removed in v9.")]
public class GraphQL.Utilities.SchemaPrinter : object {
    private static List`1<string> _builtInScalars;
    private static List`1<string> _builtInDirectives;
    [CompilerGeneratedAttribute]
private ISchema <Schema>k__BackingField;
    [CompilerGeneratedAttribute]
private SchemaPrinterOptions <Options>k__BackingField;
    protected ISchema Schema { get; protected set; }
    protected SchemaPrinterOptions Options { get; }
    public SchemaPrinter(ISchema schema, SchemaPrinterOptions options);
    private static SchemaPrinter();
    protected static bool IsIntrospectionType(string typeName);
    protected static bool IsBuiltInScalar(string typeName);
    protected static bool IsBuiltInDirective(string directiveName);
    [CompilerGeneratedAttribute]
protected ISchema get_Schema();
    [CompilerGeneratedAttribute]
protected void set_Schema(ISchema value);
    [CompilerGeneratedAttribute]
protected SchemaPrinterOptions get_Options();
    public string Print();
    public string PrintIntrospectionSchema();
    public string PrintFilteredSchema(Func`2<string, bool> directiveFilter, Func`2<string, bool> typeFilter);
    protected virtual bool IsDefinedDirective(string directiveName);
    protected virtual bool IsDefinedType(string typeName);
    public string PrintSchemaDefinition(ISchema schema);
    public bool IsSchemaOfCommonNames(ISchema schema);
    public string PrintType(IGraphType type);
    public virtual string PrintScalar(ScalarGraphType type);
    public virtual string PrintObject(IObjectGraphType type);
    public virtual string PrintInterface(IInterfaceGraphType type);
    public virtual string PrintUnion(UnionGraphType type);
    public virtual string PrintEnum(EnumerationGraphType type);
    public virtual string PrintInputObject(IInputObjectGraphType type);
    public virtual string PrintFields(IComplexGraphType type);
    public virtual string PrintArgs(FieldType field);
    public string PrintInputValue(FieldType field);
    public string PrintInputValue(QueryArgument argument);
    public string PrintDirective(Directive directive);
    private string FormatDirectiveArguments(QueryArguments arguments);
    private string FormatDirectiveLocationList(IEnumerable`1<DirectiveLocation> locations);
    protected string FormatDescription(string description, string indentation);
    public string FormatDefaultValue(object value, IGraphType graphType);
    private string FormatInputObjectValue(object value, IInputObjectGraphType input);
    public virtual string PrintComment(string comment, string indentation, bool firstInBlock);
    public string PrintDescription(string description, string indentation, bool firstInBlock);
    public string PrintDeprecation(string reason);
    public String[] BreakLine(string line, int len);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private string <PrintEnum>b__25_0(EnumValueDefinition x);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private string <PrintInputObject>b__26_0(FieldType x);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private <>f__AnonymousType2`5<string, IGraphType, string, string, string> <PrintFields>b__27_0(FieldType x);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private string <FormatDirectiveArguments>b__32_0(QueryArgument arg);
}
[ExtensionAttribute]
internal static class GraphQL.Utilities.SchemaPrinterExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static IEnumerable`1<T> OrderBy(IEnumerable`1<T> list, IComparer`1<T> comparer);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class GraphQL.Utilities.SchemaPrinterOptions : object {
    [CompilerGeneratedAttribute]
private bool <IncludeDescriptions>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IncludeDeprecationReasons>k__BackingField;
    [CompilerGeneratedAttribute]
private ISchemaComparer <Comparer>k__BackingField;
    public bool IncludeDescriptions { get; public set; }
    public bool IncludeDeprecationReasons { get; public set; }
    public ISchemaComparer Comparer { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_IncludeDescriptions();
    [CompilerGeneratedAttribute]
public void set_IncludeDescriptions(bool value);
    [CompilerGeneratedAttribute]
public bool get_IncludeDeprecationReasons();
    [CompilerGeneratedAttribute]
public void set_IncludeDeprecationReasons(bool value);
    [CompilerGeneratedAttribute]
public ISchemaComparer get_Comparer();
    [CompilerGeneratedAttribute]
public void set_Comparer(ISchemaComparer value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class GraphQL.Utilities.SchemaValidationVisitor : BaseSchemaNodeVisitor {
    private List`1<Exception> _exceptions;
    private bool _hasFieldArgumentValidation;
    public static void Run(ISchema schema);
    public virtual void VisitObject(IObjectGraphType type, ISchema schema);
    public virtual void VisitObjectFieldDefinition(FieldType field, IObjectGraphType type, ISchema schema);
    public virtual void VisitObjectFieldArgumentDefinition(QueryArgument argument, FieldType field, IObjectGraphType type, ISchema schema);
    public virtual void VisitInterface(IInterfaceGraphType type, ISchema schema);
    private void CheckTransitiveInterfaces(IImplementInterfaces type);
    public virtual void VisitInterfaceFieldDefinition(FieldType field, IInterfaceGraphType type, ISchema schema);
    public virtual void VisitInterfaceFieldArgumentDefinition(QueryArgument argument, FieldType field, IInterfaceGraphType type, ISchema schema);
    public virtual void VisitInputObject(IInputObjectGraphType type, ISchema schema);
    public virtual void VisitInputObjectFieldDefinition(FieldType field, IInputObjectGraphType type, ISchema schema);
    public virtual void VisitSchema(ISchema schema);
    public virtual void VisitUnion(UnionGraphType type, ISchema schema);
    public virtual void VisitEnum(EnumerationGraphType type, ISchema schema);
    public virtual void VisitDirective(Directive directive, ISchema schema);
    public virtual void VisitDirectiveArgumentDefinition(QueryArgument argument, Directive directive, ISchema schema);
    private void ValidateQueryArgumentDefaultValue(QueryArgument argument, FieldType field, INamedType type);
    private void ValidateFieldArgumentsUniqueness(FieldType field, INamedType type);
    private void ValidateDirectiveArgumentsUniqueness(Directive directive);
    private static bool HasFullSpecifiedResolvedType(IProvideResolvedType type);
    private void ReportError(Exception ex);
    [CompilerGeneratedAttribute]
private void <VisitInterface>g__CheckCyclicReferences|7_1(IInterfaceGraphType iface, <>c__DisplayClass7_0& , <>c__DisplayClass7_1& );
    [CompilerGeneratedAttribute]
private void <CheckTransitiveInterfaces>g__CheckChildren|8_0(IImplementInterfaces iface, <>c__DisplayClass8_0& );
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class GraphQL.Utilities.ServiceProviderExtensions : object {
    [ExtensionAttribute]
public static T GetRequiredService(IServiceProvider provider);
    [ExtensionAttribute]
public static object GetRequiredService(IServiceProvider provider, Type serviceType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class GraphQL.Utilities.StringUtils : object {
    public static string QuotedOrList(IEnumerable`1<string> items, int maxLength);
    public static String[] SuggestionList(string input, IEnumerable`1<string> options);
    public static int DamerauLevenshteinDistance(string source, string target, int threshold);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
internal static void <DamerauLevenshteinDistance>g__Swap|2_0(T& arg1, T& arg2);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class GraphQL.Utilities.TypeConfig : MetadataProvider {
    [NullableAttribute("1")]
private LightweightCache`2<string, FieldConfig> _fields;
    private Type _type;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DeprecationReason>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`2<object, IObjectGraphType> <ResolveType>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`2<object, bool> <IsTypeOfFunc>k__BackingField;
    public Type Type { get; public set; }
    [NullableAttribute("1")]
public string Name { get; }
    public string Description { get; public set; }
    public string DeprecationReason { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Func`2<object, IObjectGraphType> ResolveType { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Func`2<object, bool> IsTypeOfFunc { get; public set; }
    [NullableContextAttribute("1")]
public TypeConfig(string name);
    public Type get_Type();
    public void set_Type(Type value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
    [CompilerGeneratedAttribute]
public string get_DeprecationReason();
    [CompilerGeneratedAttribute]
public void set_DeprecationReason(string value);
    [CompilerGeneratedAttribute]
public Func`2<object, IObjectGraphType> get_ResolveType();
    [CompilerGeneratedAttribute]
public void set_ResolveType(Func`2<object, IObjectGraphType> value);
    [CompilerGeneratedAttribute]
public Func`2<object, bool> get_IsTypeOfFunc();
    [CompilerGeneratedAttribute]
public void set_IsTypeOfFunc(Func`2<object, bool> value);
    public void IsTypeOf();
    [NullableContextAttribute("1")]
public FieldConfig FieldFor(string fieldName);
    private void ApplyMetadata(Type type);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class GraphQL.Utilities.TypeSettings : object {
    private LightweightCache`2<string, TypeConfig> _typeConfigurations;
    private List`1<Action`1<TypeConfig>> _forAllTypesConfigurationDelegates;
    public TypeConfig For(string typeName);
    public TypeSettings ForAll(Action`1<TypeConfig> configure);
    [NullableContextAttribute("2")]
public void Include();
    public void Include(string name);
    public void Include(Type type);
    public void Include(string name, Type type);
    [NullableContextAttribute("2")]
public void Include();
    [NullableContextAttribute("2")]
public void Include(string name);
    public void Include(Type type, Type typeOfType);
    public void Include(string name, Type type, Type typeOfType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class GraphQL.Utilities.Visitors.ParseLinkVisitor : BaseSchemaNodeVisitor {
    [CompilerGeneratedAttribute]
private static ParseLinkVisitor <Instance>k__BackingField;
    public static ParseLinkVisitor Instance { get; }
    private static ParseLinkVisitor();
    [CompilerGeneratedAttribute]
public static ParseLinkVisitor get_Instance();
    public void Run(ISchema schema);
    public virtual void VisitSchema(ISchema schema);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class GraphQL.Utilities.Visitors.PatternMatchingVisitor : BaseSchemaNodeVisitor {
    public virtual void VisitInputObjectFieldDefinition(FieldType field, IInputObjectGraphType type, ISchema schema);
    public virtual void VisitObjectFieldArgumentDefinition(QueryArgument argument, FieldType field, IObjectGraphType type, ISchema schema);
    public virtual void VisitInterfaceFieldArgumentDefinition(QueryArgument argument, FieldType field, IInterfaceGraphType type, ISchema schema);
    private static Action`1<object> GetValidator(QueryArgument argument, FieldType field, INamedType type);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class GraphQL.Utilities.Visitors.RemoveDeprecationReasonsVisitor : ASTVisitor`1<NullVisitorContext> {
    private static RemoveDeprecationReasonsVisitor _instance;
    private static RemoveDeprecationReasonsVisitor();
    public static void Visit(ASTNode node);
    protected virtual ValueTask VisitDirectiveAsync(GraphQLDirective directive, NullVisitorContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class GraphQL.Utilities.Visitors.RemoveDescriptionsVisitor : ASTVisitor`1<NullVisitorContext> {
    private static RemoveDescriptionsVisitor _instance;
    private static RemoveDescriptionsVisitor();
    public static void Visit(ASTNode node);
    [NullableContextAttribute("2")]
public virtual ValueTask VisitAsync(ASTNode node, NullVisitorContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class GraphQL.Utilities.Visitors.RemoveFederationTypesVisitor : ASTVisitor`1<Context> {
    private static HashSet`1<string> _federatedDirectives;
    private static HashSet`1<string> _federatedTypes;
    private static RemoveFederationTypesVisitor _instance;
    private static RemoveFederationTypesVisitor();
    public static void Visit(ASTNode node);
    protected virtual ValueTask VisitDocumentAsync(GraphQLDocument document, Context context);
    protected virtual ValueTask VisitObjectTypeDefinitionAsync(GraphQLObjectTypeDefinition objectTypeDefinition, Context context);
    protected virtual ValueTask VisitObjectTypeExtensionAsync(GraphQLObjectTypeExtension objectTypeExtension, Context context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class GraphQL.Utilities.Visitors.RemoveImportedTypesVisitor : ASTVisitor`1<Context> {
    private static RemoveImportedTypesVisitor _instance;
    private static RemoveImportedTypesVisitor();
    public static void Visit(ASTNode node, ISchema schema);
    protected virtual ValueTask VisitDocumentAsync(GraphQLDocument document, Context context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class GraphQL.Utilities.Visitors.RenameImportedDirectivesVisitor : BaseSchemaNodeVisitor {
    private List`1<LinkConfiguration> _linkConfigurations;
    public RenameImportedDirectivesVisitor(List`1<LinkConfiguration> linkConfigurations);
    public static void Run(ISchema schema);
    public virtual void VisitEnum(EnumerationGraphType type, ISchema schema);
    public virtual void VisitEnumValue(EnumValueDefinition value, EnumerationGraphType type, ISchema schema);
    public virtual void VisitInputObject(IInputObjectGraphType type, ISchema schema);
    public virtual void VisitInputObjectFieldDefinition(FieldType field, IInputObjectGraphType type, ISchema schema);
    public virtual void VisitInterface(IInterfaceGraphType type, ISchema schema);
    public virtual void VisitInterfaceFieldArgumentDefinition(QueryArgument argument, FieldType field, IInterfaceGraphType type, ISchema schema);
    public virtual void VisitInterfaceFieldDefinition(FieldType field, IInterfaceGraphType type, ISchema schema);
    public virtual void VisitObject(IObjectGraphType type, ISchema schema);
    public virtual void VisitObjectFieldArgumentDefinition(QueryArgument argument, FieldType field, IObjectGraphType type, ISchema schema);
    public virtual void VisitObjectFieldDefinition(FieldType field, IObjectGraphType type, ISchema schema);
    public virtual void VisitScalar(ScalarGraphType type, ISchema schema);
    public virtual void VisitSchema(ISchema schema);
    public virtual void VisitUnion(UnionGraphType type, ISchema schema);
    private void VisitNode(IMetadataReader metadataReader);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class GraphQL.Utilities.XmlDocumentationExtensions : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static ConcurrentDictionary`2<string, XDocument> _cachedXml;
    private static XmlDocumentationExtensions();
    [ExtensionAttribute]
private static string GetParameterName(ParameterInfo parameter);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
private static string NullIfEmpty(string text);
    private static string GetTypeName(Type type);
    private static string GetMemberElementName(MemberInfo member);
    private static XDocument GetDocument(Assembly asm, string pathToXmlFile);
    [ExtensionAttribute]
public static string GetXmlDocumentation(MemberInfo member);
    [ExtensionAttribute]
public static string GetXmlDocumentation(MemberInfo member, string pathToXmlFile);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static string GetXmlDocumentation(MemberInfo member, XDocument xml);
    [ExtensionAttribute]
public static string GetXmlDocumentation(ParameterInfo parameter);
    [ExtensionAttribute]
public static string GetXmlDocumentation(ParameterInfo parameter, string pathToXmlFile);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static string GetXmlDocumentation(ParameterInfo parameter, XDocument xml);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("64")]
public class GraphQL.ValidateArgumentsAttribute : GraphQLAttribute {
    private static string DEFAULT_METHOD_NAME;
    [NullableAttribute("2")]
private Type _validationType;
    private string _validationMethodName;
    public ValidateArgumentsAttribute(string validationMethodName);
    public ValidateArgumentsAttribute(Type validationType);
    public ValidateArgumentsAttribute(Type validationType, string validationMethodName);
    public virtual void Modify(FieldType fieldType, bool isInputType, IGraphType graphType, MemberInfo memberInfo, Boolean& ignore);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class GraphQL.Validation.BaseVariableVisitor : object {
    public virtual ValueTask VisitFieldAsync(ValidationContext context, GraphQLVariableDefinition variable, VariableName variableName, IInputObjectGraphType type, FieldType field, object variableValue, object parsedValue);
    public virtual ValueTask VisitListAsync(ValidationContext context, GraphQLVariableDefinition variable, VariableName variableName, ListGraphType type, object variableValue, IList`1<object> parsedValue);
    public virtual ValueTask VisitObjectAsync(ValidationContext context, GraphQLVariableDefinition variable, VariableName variableName, IInputObjectGraphType type, object variableValue, object parsedValue);
    public virtual ValueTask VisitScalarAsync(ValidationContext context, GraphQLVariableDefinition variable, VariableName variableName, ScalarGraphType type, object variableValue, object parsedValue);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class GraphQL.Validation.BasicVisitor : ASTVisitor`1<State> {
    private IList`1<INodeVisitor> _visitors;
    public BasicVisitor(INodeVisitor[] visitors);
    public BasicVisitor(IList`1<INodeVisitor> visitors);
    [NullableContextAttribute("2")]
[AsyncStateMachineAttribute("GraphQL.Validation.BasicVisitor/<VisitAsync>d__3")]
public virtual ValueTask VisitAsync(ASTNode node, State context);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private ValueTask <>n__0(ASTNode node, State context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class GraphQL.Validation.Complexity.ComplexityOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<int> <MaxDepth>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <MaxComplexity>k__BackingField;
    [CompilerGeneratedAttribute]
private double <DefaultScalarImpact>k__BackingField;
    [CompilerGeneratedAttribute]
private double <DefaultObjectImpact>k__BackingField;
    [CompilerGeneratedAttribute]
private double <DefaultListImpactMultiplier>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`2<ComplexityValidationContext, Task> <ValidateComplexityDelegate>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<FieldImpactContext, FieldComplexityResult> <DefaultComplexityImpactDelegate>k__BackingField;
    public Nullable`1<int> MaxDepth { get; public set; }
    public Nullable`1<int> MaxComplexity { get; public set; }
    public double DefaultScalarImpact { get; public set; }
    public double DefaultObjectImpact { get; public set; }
    public double DefaultListImpactMultiplier { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Func`2<ComplexityValidationContext, Task> ValidateComplexityDelegate { get; public set; }
    public Func`2<FieldImpactContext, FieldComplexityResult> DefaultComplexityImpactDelegate { get; public set; }
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_MaxDepth();
    [CompilerGeneratedAttribute]
public void set_MaxDepth(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_MaxComplexity();
    [CompilerGeneratedAttribute]
public void set_MaxComplexity(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public double get_DefaultScalarImpact();
    [CompilerGeneratedAttribute]
public void set_DefaultScalarImpact(double value);
    [CompilerGeneratedAttribute]
public double get_DefaultObjectImpact();
    [CompilerGeneratedAttribute]
public void set_DefaultObjectImpact(double value);
    [CompilerGeneratedAttribute]
public double get_DefaultListImpactMultiplier();
    [CompilerGeneratedAttribute]
public void set_DefaultListImpactMultiplier(double value);
    [CompilerGeneratedAttribute]
public Func`2<ComplexityValidationContext, Task> get_ValidateComplexityDelegate();
    [CompilerGeneratedAttribute]
public void set_ValidateComplexityDelegate(Func`2<ComplexityValidationContext, Task> value);
    [CompilerGeneratedAttribute]
public Func`2<FieldImpactContext, FieldComplexityResult> get_DefaultComplexityImpactDelegate();
    [CompilerGeneratedAttribute]
public void set_DefaultComplexityImpactDelegate(Func`2<FieldImpactContext, FieldComplexityResult> value);
    private static FieldComplexityResult DefaultComplexityImpactDelegateImpl(FieldImpactContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class GraphQL.Validation.Complexity.ComplexityValidationContext : object {
    [CompilerGeneratedAttribute]
private ValidationContext <ValidationContext>k__BackingField;
    [CompilerGeneratedAttribute]
private ComplexityOptions <Configuration>k__BackingField;
    [CompilerGeneratedAttribute]
private double <TotalImpact>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaxDepth>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private ValidationError <Error>k__BackingField;
    public ValidationContext ValidationContext { get; }
    public ComplexityOptions Configuration { get; }
    public double TotalImpact { get; }
    public int MaxDepth { get; }
    [NullableAttribute("2")]
public ValidationError Error { get; public set; }
    public ComplexityValidationContext(ValidationContext validationContext, ComplexityOptions complexityOptions, double totalImpact, int maxDepth, ValidationError error);
    [CompilerGeneratedAttribute]
public ValidationContext get_ValidationContext();
    [CompilerGeneratedAttribute]
public ComplexityOptions get_Configuration();
    [CompilerGeneratedAttribute]
public double get_TotalImpact();
    [CompilerGeneratedAttribute]
public int get_MaxDepth();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public ValidationError get_Error();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Error(ValidationError value);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class GraphQL.Validation.Complexity.ComplexityVisitor : ASTVisitor`1<ComplexityVisitorContext> {
    private static ComplexityVisitor _instance;
    private static ComplexityVisitor();
    [AsyncStateMachineAttribute("GraphQL.Validation.Complexity.ComplexityVisitor/<RunAsync>d__2")]
public static ValueTask`1<ValueTuple`2<double, int>> RunAsync(ValidationContext validationContext, ComplexityOptions complexityConfiguration);
    protected virtual ValueTask VisitOperationDefinitionAsync(GraphQLOperationDefinition operationDefinition, ComplexityVisitorContext context);
    [AsyncStateMachineAttribute("GraphQL.Validation.Complexity.ComplexityVisitor/<VisitFragmentDefinitionAsync>d__4")]
protected virtual ValueTask VisitFragmentDefinitionAsync(GraphQLFragmentDefinition fragmentDefinition, ComplexityVisitorContext context);
    [AsyncStateMachineAttribute("GraphQL.Validation.Complexity.ComplexityVisitor/<VisitInlineFragmentAsync>d__5")]
protected virtual ValueTask VisitInlineFragmentAsync(GraphQLInlineFragment inlineFragment, ComplexityVisitorContext context);
    [AsyncStateMachineAttribute("GraphQL.Validation.Complexity.ComplexityVisitor/<VisitFragmentSpreadAsync>d__6")]
protected virtual ValueTask VisitFragmentSpreadAsync(GraphQLFragmentSpread fragmentSpread, ComplexityVisitorContext context);
    protected virtual ValueTask VisitFieldAsync(GraphQLField field, ComplexityVisitorContext context);
    [CompilerGeneratedAttribute]
[DoesNotReturnAttribute]
internal static IObjectGraphType <VisitOperationDefinitionAsync>g__ThrowInvalidOperation|3_0(OperationType operationType);
    [CompilerGeneratedAttribute]
[DoesNotReturnAttribute]
internal static void <VisitOperationDefinitionAsync>g__ThrowOperationNotDefined|3_1(OperationType operationType);
    [CompilerGeneratedAttribute]
[DoesNotReturnAttribute]
internal static IGraphType <VisitFragmentDefinitionAsync>g__ThrowInvalidType|4_0(GraphQLName typeName);
    [CompilerGeneratedAttribute]
[DoesNotReturnAttribute]
internal static IGraphType <VisitInlineFragmentAsync>g__ThrowInvalidType|5_0(GraphQLName typeName);
    [CompilerGeneratedAttribute]
[DoesNotReturnAttribute]
internal static GraphQLFragmentDefinition <VisitFragmentSpreadAsync>g__ThrowInvalidFragment|6_0(GraphQLName fragmentName);
    [CompilerGeneratedAttribute]
[DoesNotReturnAttribute]
internal static InvalidOperationException <VisitFragmentSpreadAsync>g__ThrowCircularReference|6_1(GraphQLName fragmentName);
    [AsyncStateMachineAttribute("GraphQL.Validation.Complexity.ComplexityVisitor/<<VisitFieldAsync>g__VisitChildrenAsync|7_0>d")]
[CompilerGeneratedAttribute]
internal static ValueTask <VisitFieldAsync>g__VisitChildrenAsync|7_0(ComplexityVisitor visitor, ComplexityVisitorContext context, GraphQLField field, FieldType fieldType, double multiplier);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
[DoesNotReturnAttribute]
internal static void <VisitFieldAsync>g__ThrowNotObjectType|7_1(IGraphType type);
    [CompilerGeneratedAttribute]
[DoesNotReturnAttribute]
internal static FieldType <VisitFieldAsync>g__ThrowFieldNotFound|7_2(GraphQLField field, IComplexGraphType type);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class GraphQL.Validation.Complexity.ComplexityVisitorContext : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static Stack`1<GraphQLField> _sharedFieldAsts;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static Stack`1<FieldType> _sharedFieldDefinitions;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static Stack`1<IGraphType> _sharedParentTypes;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static Stack`1<GraphQLFragmentDefinition> _sharedFragmentsProcessed;
    public ValidationContext ValidationContext;
    public ComplexityOptions Configuration;
    public Stack`1<GraphQLFragmentDefinition> FragmentsProcessed;
    public Stack`1<GraphQLField> FieldAsts;
    public Stack`1<FieldType> FieldDefinitions;
    public Stack`1<IGraphType> ParentTypes;
    [NullableAttribute("2")]
public IGraphType ParentType;
    public double TotalComplexity;
    public double StandingComplexity;
    public int TotalDepth;
    public int MaximumDepth;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IDictionary`2<GraphQLField, IDictionary`2<string, ArgumentValue>> Arguments { get; }
    public ISchema Schema { get; }
    public GraphQLDocument Document { get; }
    public GraphQLOperationDefinition Operation { get; }
    public CancellationToken CancellationToken { get; }
    public ComplexityVisitorContext(ValidationContext validationContext, ComplexityOptions complexityConfiguration);
    public IDictionary`2<GraphQLField, IDictionary`2<string, ArgumentValue>> get_Arguments();
    public ISchema get_Schema();
    public GraphQLDocument get_Document();
    public GraphQLOperationDefinition get_Operation();
    public bool ShouldIncludeNode(ASTNode node);
    public sealed virtual CancellationToken get_CancellationToken();
    public sealed virtual void Dispose();
}
public class GraphQL.Validation.Complexity.FieldComplexityResult : ValueType {
    [CompilerGeneratedAttribute]
private double <FieldImpact>k__BackingField;
    [CompilerGeneratedAttribute]
private double <ChildImpactMultiplier>k__BackingField;
    public double FieldImpact { get; public set; }
    public double ChildImpactMultiplier { get; public set; }
    public FieldComplexityResult(double fieldImpact, double childImpactMultiplier);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public double get_FieldImpact();
    [CompilerGeneratedAttribute]
public void set_FieldImpact(double value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public double get_ChildImpactMultiplier();
    [CompilerGeneratedAttribute]
public void set_ChildImpactMultiplier(double value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class GraphQL.Validation.Complexity.FieldImpactContext : ValueType {
    [CompilerGeneratedAttribute]
private FieldType <FieldDefinition>k__BackingField;
    [CompilerGeneratedAttribute]
private GraphQLField <FieldAst>k__BackingField;
    [CompilerGeneratedAttribute]
private IGraphType <ParentType>k__BackingField;
    internal ComplexityVisitorContext VisitorContext;
    private int _parentDepth;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private IDictionary`2<string, ArgumentValue> _arguments;
    public FieldType FieldDefinition { get; public set; }
    public GraphQLField FieldAst { get; public set; }
    public IGraphType ParentType { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IDictionary`2<string, ArgumentValue> Arguments { get; }
    public ValidationContext ValidationContext { get; }
    public ComplexityOptions Configuration { get; }
    public Nullable`1<FieldImpactContext> Parent { get; }
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public FieldType get_FieldDefinition();
    [CompilerGeneratedAttribute]
public void set_FieldDefinition(FieldType value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public GraphQLField get_FieldAst();
    [CompilerGeneratedAttribute]
public void set_FieldAst(GraphQLField value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public IGraphType get_ParentType();
    [CompilerGeneratedAttribute]
public void set_ParentType(IGraphType value);
    public IDictionary`2<string, ArgumentValue> get_Arguments();
    public TType GetArgument(string name, TType defaultValue);
    public ValidationContext get_ValidationContext();
    public ComplexityOptions get_Configuration();
    public Nullable`1<FieldImpactContext> get_Parent();
    private static T PeekElement(Stack`1<T> from, int index);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
internal static T <PeekElement>g__GetElement|24_0(Stack`1<T> from, int index);
}
[RequireParameterlessConstructorAttribute]
public interface GraphQL.Validation.Complexity.IFieldComplexityAnalyzer {
    public abstract virtual FieldComplexityResult Analyze(FieldImpactContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ObsoleteAttribute("Please use the new complexity analyzer. This class will be removed in v9.")]
internal class GraphQL.Validation.Complexity.LegacyAnalysisContext : object {
    [CompilerGeneratedAttribute]
private double <AvgImpact>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<double> <CurrentSubSelectionImpact>k__BackingField;
    [CompilerGeneratedAttribute]
private double <CurrentEndNodeImpact>k__BackingField;
    [CompilerGeneratedAttribute]
private LegacyFragmentComplexity <CurrentFragmentComplexity>k__BackingField;
    [CompilerGeneratedAttribute]
private LegacyComplexityResult <Result>k__BackingField;
    [CompilerGeneratedAttribute]
private int <LoopCounter>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaxRecursionCount>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <FragmentMapAlreadyBuilt>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, LegacyFragmentComplexity> <FragmentMap>k__BackingField;
    public double AvgImpact { get; public set; }
    public Nullable`1<double> CurrentSubSelectionImpact { get; public set; }
    public double CurrentEndNodeImpact { get; public set; }
    public LegacyFragmentComplexity CurrentFragmentComplexity { get; public set; }
    public LegacyComplexityResult Result { get; }
    public int LoopCounter { get; public set; }
    public int MaxRecursionCount { get; public set; }
    public bool FragmentMapAlreadyBuilt { get; public set; }
    public Dictionary`2<string, LegacyFragmentComplexity> FragmentMap { get; }
    public CancellationToken CancellationToken { get; }
    [CompilerGeneratedAttribute]
public double get_AvgImpact();
    [CompilerGeneratedAttribute]
public void set_AvgImpact(double value);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_CurrentSubSelectionImpact();
    [CompilerGeneratedAttribute]
public void set_CurrentSubSelectionImpact(Nullable`1<double> value);
    [CompilerGeneratedAttribute]
public double get_CurrentEndNodeImpact();
    [CompilerGeneratedAttribute]
public void set_CurrentEndNodeImpact(double value);
    [CompilerGeneratedAttribute]
public LegacyFragmentComplexity get_CurrentFragmentComplexity();
    [CompilerGeneratedAttribute]
public void set_CurrentFragmentComplexity(LegacyFragmentComplexity value);
    [CompilerGeneratedAttribute]
public LegacyComplexityResult get_Result();
    [CompilerGeneratedAttribute]
public int get_LoopCounter();
    [CompilerGeneratedAttribute]
public void set_LoopCounter(int value);
    [CompilerGeneratedAttribute]
public int get_MaxRecursionCount();
    [CompilerGeneratedAttribute]
public void set_MaxRecursionCount(int value);
    [CompilerGeneratedAttribute]
public bool get_FragmentMapAlreadyBuilt();
    [CompilerGeneratedAttribute]
public void set_FragmentMapAlreadyBuilt(bool value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, LegacyFragmentComplexity> get_FragmentMap();
    public sealed virtual CancellationToken get_CancellationToken();
    public void AssertRecursion();
    public static Nullable`1<double> GetImpactFromArgs(GraphQLField node);
    public void RecordFieldComplexity(ASTNode node, double impact);
}
[ObsoleteAttribute("Please use the new complexity analyzer. This class will be removed in v9.")]
public class GraphQL.Validation.Complexity.LegacyComplexityConfiguration : object {
    [CompilerGeneratedAttribute]
private Nullable`1<int> <MaxDepth>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <MaxComplexity>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<double> <FieldImpact>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaxRecursionCount>k__BackingField;
    public Nullable`1<int> MaxDepth { get; public set; }
    public Nullable`1<int> MaxComplexity { get; public set; }
    public Nullable`1<double> FieldImpact { get; public set; }
    public int MaxRecursionCount { get; public set; }
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_MaxDepth();
    [CompilerGeneratedAttribute]
public void set_MaxDepth(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_MaxComplexity();
    [CompilerGeneratedAttribute]
public void set_MaxComplexity(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_FieldImpact();
    [CompilerGeneratedAttribute]
public void set_FieldImpact(Nullable`1<double> value);
    [CompilerGeneratedAttribute]
public int get_MaxRecursionCount();
    [CompilerGeneratedAttribute]
public void set_MaxRecursionCount(int value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ObsoleteAttribute("Please use the new complexity analyzer. This class will be removed in v9.")]
public class GraphQL.Validation.Complexity.LegacyComplexityResult : object {
    [CompilerGeneratedAttribute]
private Dictionary`2<ASTNode, double> <ComplexityMap>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Complexity>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TotalQueryDepth>k__BackingField;
    public Dictionary`2<ASTNode, double> ComplexityMap { get; }
    public double Complexity { get; public set; }
    public int TotalQueryDepth { get; public set; }
    [CompilerGeneratedAttribute]
public Dictionary`2<ASTNode, double> get_ComplexityMap();
    [CompilerGeneratedAttribute]
public double get_Complexity();
    [CompilerGeneratedAttribute]
public void set_Complexity(double value);
    [CompilerGeneratedAttribute]
public int get_TotalQueryDepth();
    [CompilerGeneratedAttribute]
public void set_TotalQueryDepth(int value);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ObsoleteAttribute("Please use the new complexity analyzer. This class will be removed in v9.")]
internal class GraphQL.Validation.Complexity.LegacyComplexityVisitor : ASTVisitor`1<LegacyAnalysisContext> {
    [NullableAttribute("2")]
private TypeInfo _visitor;
    public LegacyComplexityVisitor(ISchema schema);
    [AsyncStateMachineAttribute("GraphQL.Validation.Complexity.LegacyComplexityVisitor/<VisitAsync>d__3")]
public virtual ValueTask VisitAsync(ASTNode node, LegacyAnalysisContext context);
    [AsyncStateMachineAttribute("GraphQL.Validation.Complexity.LegacyComplexityVisitor/<VisitFragmentDefinitionAsync>d__4")]
protected virtual ValueTask VisitFragmentDefinitionAsync(GraphQLFragmentDefinition fragmentDefinition, LegacyAnalysisContext context);
    [AsyncStateMachineAttribute("GraphQL.Validation.Complexity.LegacyComplexityVisitor/<VisitFieldAsync>d__5")]
protected virtual ValueTask VisitFieldAsync(GraphQLField field, LegacyAnalysisContext context);
    [AsyncStateMachineAttribute("GraphQL.Validation.Complexity.LegacyComplexityVisitor/<VisitFragmentSpreadAsync>d__6")]
protected virtual ValueTask VisitFragmentSpreadAsync(GraphQLFragmentSpread fragmentSpread, LegacyAnalysisContext context);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private ValueTask <>n__0(ASTNode node, LegacyAnalysisContext context);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private ValueTask <>n__1(GraphQLFragmentDefinition fragmentDefinition, LegacyAnalysisContext context);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private ValueTask <>n__2(GraphQLField field, LegacyAnalysisContext context);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private ValueTask <>n__3(GraphQLFragmentSpread fragmentSpread, LegacyAnalysisContext context);
}
[ObsoleteAttribute("Please use the new complexity analyzer. This class will be removed in v9.")]
internal class GraphQL.Validation.Complexity.LegacyFragmentComplexity : object {
    [CompilerGeneratedAttribute]
private int <Depth>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Complexity>k__BackingField;
    public int Depth { get; public set; }
    public double Complexity { get; public set; }
    [CompilerGeneratedAttribute]
public int get_Depth();
    [CompilerGeneratedAttribute]
public void set_Depth(int value);
    [CompilerGeneratedAttribute]
public double get_Complexity();
    [CompilerGeneratedAttribute]
public void set_Complexity(double value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class GraphQL.Validation.CompositeVariableVisitor : object {
    private List`1<IVariableVisitor> _visitors;
    public CompositeVariableVisitor(List`1<IVariableVisitor> visitors);
    [AsyncStateMachineAttribute("GraphQL.Validation.CompositeVariableVisitor/<VisitFieldAsync>d__2")]
public sealed virtual ValueTask VisitFieldAsync(ValidationContext context, GraphQLVariableDefinition variable, VariableName variableName, IInputObjectGraphType type, FieldType field, object variableValue, object parsedValue);
    [AsyncStateMachineAttribute("GraphQL.Validation.CompositeVariableVisitor/<VisitListAsync>d__3")]
public sealed virtual ValueTask VisitListAsync(ValidationContext context, GraphQLVariableDefinition variable, VariableName variableName, ListGraphType type, object variableValue, IList`1<object> parsedValue);
    [AsyncStateMachineAttribute("GraphQL.Validation.CompositeVariableVisitor/<VisitObjectAsync>d__4")]
public sealed virtual ValueTask VisitObjectAsync(ValidationContext context, GraphQLVariableDefinition variable, VariableName variableName, IInputObjectGraphType type, object variableValue, object parsedValue);
    [AsyncStateMachineAttribute("GraphQL.Validation.CompositeVariableVisitor/<VisitScalarAsync>d__5")]
public sealed virtual ValueTask VisitScalarAsync(ValidationContext context, GraphQLVariableDefinition variable, VariableName variableName, ScalarGraphType type, object variableValue, object parsedValue);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class GraphQL.Validation.DocumentValidator : object {
    [NullableAttribute("2")]
private ValidationContext _reusableValidationContext;
    public static IEnumerable`1<IValidationRule> CoreRules;
    private static DocumentValidator();
    public Task`1<IValidationResult> ValidateAsync(ValidationOptions& options);
    [AsyncStateMachineAttribute("GraphQL.Validation.DocumentValidator/<ValidateAsyncCoreAsync>d__3")]
private Task`1<IValidationResult> ValidateAsyncCoreAsync(ValidationContext context, IEnumerable`1<IValidationRule> rules);
    private sealed virtual override Task`1<IValidationResult> GraphQL.Validation.IDocumentValidator.ValidateAsync(ValidationOptions& modreq(System.Runtime.InteropServices.InAttribute) options);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class GraphQL.Validation.Errors.ArgumentsOfCorrectTypeError : ValidationError {
    internal static string NUMBER;
    public ArgumentsOfCorrectTypeError(ValidationContext context, GraphQLArgument node, string verboseErrors);
    internal static string BadValueMessage(string argName, string verboseErrors);
}
public class GraphQL.Validation.Errors.Custom.ComplexityError : ValidationError {
    [NullableContextAttribute("1")]
public ComplexityError(string message);
}
public class GraphQL.Validation.Errors.Custom.NoIntrospectionError : ValidationError {
    [NullableContextAttribute("1")]
public NoIntrospectionError(ROM source, ASTNode node);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class GraphQL.Validation.Errors.DefaultValuesOfCorrectTypeError : ValidationError {
    internal static string NUMBER;
    public DefaultValuesOfCorrectTypeError(ValidationContext context, GraphQLVariableDefinition varDefAst, IGraphType inputType, string verboseErrors);
    internal static string BadValueForDefaultArgMessage(string varName, string type, string value, string verboseErrors);
}
public class GraphQL.Validation.Errors.DirectivesInAllowedLocationsError : ValidationError {
    [NullableContextAttribute("1")]
public DirectivesInAllowedLocationsError(ValidationContext context, GraphQLDirective node, DirectiveLocation candidateLocation);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class GraphQL.Validation.Errors.FieldsOnCorrectTypeError : ValidationError {
    internal static string NUMBER;
    public FieldsOnCorrectTypeError(ValidationContext context, GraphQLField node, IGraphType type, IEnumerable`1<string> suggestedTypeNames, IEnumerable`1<string> suggestedFieldNames);
    internal static string UndefinedFieldMessage(string fieldName, string type, IEnumerable`1<string> suggestedTypeNames, IEnumerable`1<string> suggestedFieldNames);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class GraphQL.Validation.Errors.FragmentsOnCompositeTypesError : ValidationError {
    internal static string NUMBER;
    public FragmentsOnCompositeTypesError(ValidationContext context, GraphQLInlineFragment node);
    public FragmentsOnCompositeTypesError(ValidationContext context, GraphQLFragmentDefinition node);
    internal static string InlineFragmentOnNonCompositeErrorMessage(string type);
    internal static string FragmentOnNonCompositeErrorMessage(string fragName, string type);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class GraphQL.Validation.Errors.InputFieldsAndArgumentsOfCorrectLengthError : ValidationError {
    private static string NUMBER;
    public InputFieldsAndArgumentsOfCorrectLengthError(ValidationContext context, ASTNode node, Nullable`1<int> length, Nullable`1<int> min, Nullable`1<int> max);
    public InputFieldsAndArgumentsOfCorrectLengthError(ValidationContext context, GraphQLVariableDefinition node, VariableName variableName, Nullable`1<int> length, Nullable`1<int> min, Nullable`1<int> max);
    private static string BadValueMessage(ASTNode node, Nullable`1<int> length, Nullable`1<int> minLength, Nullable`1<int> maxLength);
    private static string BadValueMessage(VariableName variableName, Nullable`1<int> length, Nullable`1<int> minLength, Nullable`1<int> maxLength);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class GraphQL.Validation.Errors.KnownArgumentNamesError : ValidationError {
    internal static string NUMBER;
    public KnownArgumentNamesError(ValidationContext context, GraphQLArgument node, FieldType fieldDef, IGraphType parentType);
    public KnownArgumentNamesError(ValidationContext context, GraphQLArgument node, Directive directive);
    internal static string UnknownArgMessage(string argName, string fieldName, string type, String[] suggestedArgs);
    internal static string UnknownDirectiveArgMessage(string argName, string directiveName, String[] suggestedArgs);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class GraphQL.Validation.Errors.KnownDirectivesError : ValidationError {
    internal static string NUMBER;
    public KnownDirectivesError(ValidationContext context, GraphQLDirective node);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class GraphQL.Validation.Errors.KnownFragmentNamesError : ValidationError {
    internal static string NUMBER;
    public KnownFragmentNamesError(ValidationContext context, GraphQLFragmentSpread node, string fragmentName);
    internal static string UnknownFragmentMessage(string fragName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class GraphQL.Validation.Errors.KnownTypeNamesError : ValidationError {
    internal static string NUMBER;
    public KnownTypeNamesError(ValidationContext context, GraphQLNamedType node, String[] suggestedTypes);
    internal static string UnknownTypeMessage(string type, String[] suggestedTypes);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class GraphQL.Validation.Errors.LoneAnonymousOperationError : ValidationError {
    internal static string NUMBER;
    public LoneAnonymousOperationError(ValidationContext context, GraphQLOperationDefinition node);
    internal static string AnonOperationNotAloneMessage();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class GraphQL.Validation.Errors.NoFragmentCyclesError : ValidationError {
    internal static string NUMBER;
    public NoFragmentCyclesError(ValidationContext context, string fragName, String[] spreadNames, ASTNode[] nodes);
    internal static string CycleErrorMessage(string fragName, String[] spreadNames);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class GraphQL.Validation.Errors.NoUndefinedVariablesError : ValidationError {
    internal static string NUMBER;
    public NoUndefinedVariablesError(ValidationContext context, GraphQLOperationDefinition node, GraphQLVariable variableReference);
    internal static string UndefinedVarMessage(string varName, string opName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class GraphQL.Validation.Errors.NoUnusedFragmentsError : ValidationError {
    internal static string NUMBER;
    public NoUnusedFragmentsError(ValidationContext context, GraphQLFragmentDefinition node);
    internal static string UnusedFragMessage(string fragName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class GraphQL.Validation.Errors.NoUnusedVariablesError : ValidationError {
    internal static string NUMBER;
    public NoUnusedVariablesError(ValidationContext context, GraphQLVariableDefinition node, GraphQLOperationDefinition op);
    internal static string UnusedVariableMessage(string varName, string opName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class GraphQL.Validation.Errors.OneOfInputValuesError : ValidationError {
    internal static string NUMBER;
    internal static string MULTIPLE_VALUES;
    public OneOfInputValuesError(ValidationContext context, GraphQLValue node);
    public OneOfInputValuesError(ValidationContext context, GraphQLObjectField node);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class GraphQL.Validation.Errors.OverlappingFieldsCanBeMergedError : ValidationError {
    internal static string NUMBER;
    public OverlappingFieldsCanBeMergedError(ValidationContext context, Conflict conflict);
    internal static string FieldsConflictMessage(string responseName, ConflictReason reason);
    private static string ReasonMessage(Message reasonMessage);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class GraphQL.Validation.Errors.PossibleFragmentSpreadsError : ValidationError {
    internal static string NUMBER;
    public PossibleFragmentSpreadsError(ValidationContext context, GraphQLInlineFragment node, IGraphType parentType, IGraphType fragType);
    public PossibleFragmentSpreadsError(ValidationContext context, GraphQLFragmentSpread node, IGraphType parentType, IGraphType fragType);
    internal static string TypeIncompatibleSpreadMessage(string fragName, string parentType, string fragType);
    internal static string TypeIncompatibleAnonSpreadMessage(string parentType, string fragType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class GraphQL.Validation.Errors.ProvidedNonNullArgumentsError : ValidationError {
    internal static string NUMBER;
    public ProvidedNonNullArgumentsError(ValidationContext context, GraphQLField node, QueryArgument arg);
    public ProvidedNonNullArgumentsError(ValidationContext context, GraphQLDirective node, QueryArgument arg);
    internal static string MissingFieldArgMessage(string fieldName, string argName, string type);
    internal static string MissingDirectiveArgMessage(string directiveName, string argName, string type);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class GraphQL.Validation.Errors.ScalarLeafsError : ValidationError {
    internal static string NUMBER;
    public ScalarLeafsError(ValidationContext context, GraphQLSelectionSet node, GraphQLField field, IGraphType type);
    public ScalarLeafsError(ValidationContext context, GraphQLField node, IGraphType type);
    internal static string NoSubselectionAllowedMessage(string field, string type);
    internal static string RequiredSubselectionMessage(string field, string type);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class GraphQL.Validation.Errors.SingleRootFieldSubscriptionsError : ValidationError {
    internal static string NUMBER;
    public SingleRootFieldSubscriptionsError(ValidationContext context, GraphQLOperationDefinition operation, ASTNode[] nodes);
    internal static string InvalidNumberOfRootFieldMessage(GraphQLName name);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class GraphQL.Validation.Errors.UniqueArgumentNamesError : ValidationError {
    internal static string NUMBER;
    public UniqueArgumentNamesError(ValidationContext context, GraphQLArgument node, GraphQLArgument otherNode);
    internal static string DuplicateArgMessage(string argName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class GraphQL.Validation.Errors.UniqueDirectivesPerLocationError : ValidationError {
    internal static string NUMBER;
    public UniqueDirectivesPerLocationError(ValidationContext context, GraphQLDirective node);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class GraphQL.Validation.Errors.UniqueFragmentNamesError : ValidationError {
    internal static string NUMBER;
    public UniqueFragmentNamesError(ValidationContext context, GraphQLFragmentDefinition node, GraphQLFragmentDefinition altNode);
    internal static string DuplicateFragmentNameMessage(string fragName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class GraphQL.Validation.Errors.UniqueInputFieldNamesError : ValidationError {
    internal static string NUMBER;
    public UniqueInputFieldNamesError(ValidationContext context, GraphQLValue node, GraphQLObjectField altNode);
    internal static string DuplicateInputField(string fieldName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class GraphQL.Validation.Errors.UniqueOperationNamesError : ValidationError {
    internal static string NUMBER;
    public UniqueOperationNamesError(ValidationContext context, GraphQLOperationDefinition node);
    internal static string DuplicateOperationNameMessage(string opName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class GraphQL.Validation.Errors.UniqueVariableNamesError : ValidationError {
    internal static string NUMBER;
    public UniqueVariableNamesError(ValidationContext context, GraphQLVariableDefinition node, GraphQLVariableDefinition altNode);
    internal static string DuplicateVariableMessage(string variableName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class GraphQL.Validation.Errors.VariablesAreInputTypesError : ValidationError {
    internal static string NUMBER;
    public VariablesAreInputTypesError(ValidationContext context, GraphQLVariableDefinition node, IGraphType type);
    internal static string UndefinedVarMessage(string variableName, string typeName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class GraphQL.Validation.Errors.VariablesInAllowedPositionError : ValidationError {
    internal static string NUMBER;
    public VariablesInAllowedPositionError(ValidationContext context, GraphQLVariableDefinition varDef, IGraphType varType, VariableUsage usage);
    internal static string BadVarPosMessage(VariableUsage usage, string varType);
    internal static string BadVarPosMessage(string varName, string varType, string expectedType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class GraphQL.Validation.FieldArgumentsValidationContext : ValueType {
    [CompilerGeneratedAttribute]
private GraphQLField <FieldAst>k__BackingField;
    [CompilerGeneratedAttribute]
private FieldType <FieldDefinition>k__BackingField;
    [NullableAttribute("2")]
private IGraphType _parentType;
    [CompilerGeneratedAttribute]
private ValidationContext <ValidationContext>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private IDictionary`2<string, ArgumentValue> _arguments;
    private bool _argumentsSet;
    public GraphQLField FieldAst { get; public set; }
    public FieldType FieldDefinition { get; public set; }
    [NullableAttribute("2")]
public IGraphType ParentType { get; }
    public ValidationContext ValidationContext { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IDictionary`2<string, ArgumentValue> Arguments { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IDictionary`2<string, DirectiveInfo> Directives { get; }
    [NullableAttribute("2")]
public IServiceProvider RequestServices { get; }
    public CancellationToken CancellationToken { get; }
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public GraphQLField get_FieldAst();
    [CompilerGeneratedAttribute]
public void set_FieldAst(GraphQLField value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public FieldType get_FieldDefinition();
    [CompilerGeneratedAttribute]
public void set_FieldDefinition(FieldType value);
    [NullableContextAttribute("2")]
public IGraphType get_ParentType();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public ValidationContext get_ValidationContext();
    [CompilerGeneratedAttribute]
public void set_ValidationContext(ValidationContext value);
    public IDictionary`2<string, ArgumentValue> get_Arguments();
    public void set_Arguments(IDictionary`2<string, ArgumentValue> value);
    public IDictionary`2<string, DirectiveInfo> get_Directives();
    [IsReadOnlyAttribute]
[NullableContextAttribute("2")]
public IServiceProvider get_RequestServices();
    [IsReadOnlyAttribute]
public CancellationToken get_CancellationToken();
    public T GetArgument(string name, T defaultValue);
    public void SetArgument(string name, object value);
    [IsReadOnlyAttribute]
public void ReportError(ValidationError error);
}
[NullableContextAttribute("1")]
public interface GraphQL.Validation.IDocumentValidator {
    public abstract virtual Task`1<IValidationResult> ValidateAsync(ValidationOptions& modreq(System.Runtime.InteropServices.InAttribute) options);
}
[NullableContextAttribute("1")]
public interface GraphQL.Validation.INodeVisitor {
    public abstract virtual ValueTask EnterAsync(ASTNode node, ValidationContext context);
    public abstract virtual ValueTask LeaveAsync(ASTNode node, ValidationContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class GraphQL.Validation.InvalidLiteralError : ValidationError {
    private static string NUMBER;
    public InvalidLiteralError(GraphQLDocument document, ASTNode parentNode, GraphQLDirective directive, GraphQLArgument argument, ASTNode node, string message, Exception innerException);
    public InvalidLiteralError(GraphQLDocument document, ASTNode parentNode, GraphQLDirective directive, GraphQLArgument argument, ASTNode node, Exception innerException);
    private static string GetFieldDescription(ASTNode node, GraphQLDirective directive, GraphQLArgument argument);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class GraphQL.Validation.InvalidValueError : ValidationError {
    private static string NUMBER;
    public InvalidValueError(GraphQLDocument document, ASTNode parentNode, GraphQLDirective directive, GraphQLArgument argument, ASTNode node, string message, Exception innerException);
    public InvalidValueError(GraphQLDocument document, ASTNode parentNode, GraphQLDirective directive, GraphQLArgument argument, ASTNode node, Exception innerException);
    private static string GetFieldDescription(ASTNode node, GraphQLDirective directive, GraphQLArgument argument);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class GraphQL.Validation.InvalidVariableError : ValidationError {
    private static string NUMBER;
    public InvalidVariableError(ValidationContext context, GraphQLVariableDefinition node, VariableName variableName, string message);
    public InvalidVariableError(ValidationContext context, GraphQLVariableDefinition node, VariableName variableName, string message, Exception innerException);
}
[NullableContextAttribute("1")]
public interface GraphQL.Validation.IValidationResult {
    public bool IsValid { get; }
    public ExecutionErrors Errors { get; }
    [NullableAttribute("2")]
public Variables Variables { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IReadOnlyDictionary`2<GraphQLField, IDictionary`2<string, ArgumentValue>> ArgumentValues { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IReadOnlyDictionary`2<ASTNode, IDictionary`2<string, DirectiveInfo>> DirectiveValues { get; }
    public abstract virtual bool get_IsValid();
    public abstract virtual ExecutionErrors get_Errors();
    [NullableContextAttribute("2")]
public abstract virtual Variables get_Variables();
    public abstract virtual IReadOnlyDictionary`2<GraphQLField, IDictionary`2<string, ArgumentValue>> get_ArgumentValues();
    public abstract virtual IReadOnlyDictionary`2<ASTNode, IDictionary`2<string, DirectiveInfo>> get_DirectiveValues();
}
[NullableContextAttribute("1")]
public interface GraphQL.Validation.IValidationRule {
    public abstract virtual ValueTask`1<INodeVisitor> GetPreNodeVisitorAsync(ValidationContext context);
    public abstract virtual ValueTask`1<IVariableVisitor> GetVariableVisitorAsync(ValidationContext context);
    public abstract virtual ValueTask`1<INodeVisitor> GetPostNodeVisitorAsync(ValidationContext context);
}
[NullableContextAttribute("1")]
public interface GraphQL.Validation.IVariableVisitor {
    public abstract virtual ValueTask VisitScalarAsync(ValidationContext context, GraphQLVariableDefinition variable, VariableName variableName, ScalarGraphType type, object variableValue, object parsedValue);
    public abstract virtual ValueTask VisitListAsync(ValidationContext context, GraphQLVariableDefinition variable, VariableName variableName, ListGraphType type, object variableValue, IList`1<object> parsedValue);
    public abstract virtual ValueTask VisitObjectAsync(ValidationContext context, GraphQLVariableDefinition variable, VariableName variableName, IInputObjectGraphType type, object variableValue, object parsedValue);
    public abstract virtual ValueTask VisitFieldAsync(ValidationContext context, GraphQLVariableDefinition variable, VariableName variableName, IInputObjectGraphType type, FieldType field, object variableValue, object parsedValue);
}
public class GraphQL.Validation.MatchingNodeVisitor`1 : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Func`3<TNode, ValidationContext, ValueTask> _enter;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Func`3<TNode, ValidationContext, ValueTask> _leave;
    public MatchingNodeVisitor`1(Action`2<TNode, ValidationContext> enter, Action`2<TNode, ValidationContext> leave);
    public MatchingNodeVisitor`1(Func`3<TNode, ValidationContext, ValueTask> enter, Func`3<TNode, ValidationContext, ValueTask> leave);
    private static Func`3<TNode, ValidationContext, ValueTask> FromAction(Action`2<TNode, ValidationContext> action);
    [NullableContextAttribute("1")]
private sealed virtual override ValueTask GraphQL.Validation.INodeVisitor.EnterAsync(ASTNode node, ValidationContext context);
    [NullableContextAttribute("1")]
private sealed virtual override ValueTask GraphQL.Validation.INodeVisitor.LeaveAsync(ASTNode node, ValidationContext context);
}
public class GraphQL.Validation.MatchingNodeVisitor`2 : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Action`3<TNode, ValidationContext, TState> _enter;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Action`3<TNode, ValidationContext, TState> _leave;
    [NullableAttribute("2")]
private TState _state;
    [NullableContextAttribute("2")]
public MatchingNodeVisitor`2(TState state, Action`3<TNode, ValidationContext, TState> enter, Action`3<TNode, ValidationContext, TState> leave);
    [NullableContextAttribute("1")]
private sealed virtual override ValueTask GraphQL.Validation.INodeVisitor.EnterAsync(ASTNode node, ValidationContext context);
    [NullableContextAttribute("1")]
private sealed virtual override ValueTask GraphQL.Validation.INodeVisitor.LeaveAsync(ASTNode node, ValidationContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class GraphQL.Validation.NodeVisitors : object {
    private INodeVisitor[] _nodeVisitors;
    public NodeVisitors(INodeVisitor[] nodeVisitors);
    [AsyncStateMachineAttribute("GraphQL.Validation.NodeVisitors/<GraphQL-Validation-INodeVisitor-EnterAsync>d__2")]
private sealed virtual override ValueTask GraphQL.Validation.INodeVisitor.EnterAsync(ASTNode node, ValidationContext context);
    [AsyncStateMachineAttribute("GraphQL.Validation.NodeVisitors/<GraphQL-Validation-INodeVisitor-LeaveAsync>d__3")]
private sealed virtual override ValueTask GraphQL.Validation.INodeVisitor.LeaveAsync(ASTNode node, ValidationContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class GraphQL.Validation.Rules.ArgumentsOfCorrectType : ValidationRuleBase {
    public static ArgumentsOfCorrectType Instance;
    private static INodeVisitor _nodeVisitor;
    private static ArgumentsOfCorrectType();
    public virtual ValueTask`1<INodeVisitor> GetPreNodeVisitorAsync(ValidationContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class GraphQL.Validation.Rules.Custom.ComplexityValidationRule : ValidationRuleBase {
    [CompilerGeneratedAttribute]
private ComplexityOptions <Options>k__BackingField;
    protected ComplexityOptions Options { get; }
    public ComplexityValidationRule(ComplexityOptions options);
    [CompilerGeneratedAttribute]
protected ComplexityOptions get_Options();
    [AsyncStateMachineAttribute("GraphQL.Validation.Rules.Custom.ComplexityValidationRule/<GetPostNodeVisitorAsync>d__4")]
public virtual ValueTask`1<INodeVisitor> GetPostNodeVisitorAsync(ValidationContext context);
    [NullableContextAttribute("0")]
protected virtual ValueTask`1<ValueTuple`2<double, int>> CalculateComplexityAsync(ValidationContext context);
    [AsyncStateMachineAttribute("GraphQL.Validation.Rules.Custom.ComplexityValidationRule/<ValidateComplexityAsync>d__6")]
protected virtual ValueTask ValidateComplexityAsync(ValidationContext context, double totalComplexity, int maxDepth);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ObsoleteAttribute("Please use the new complexity analyzer. The v7 complexity analyzer will be removed in v9.")]
public class GraphQL.Validation.Rules.Custom.LegacyComplexityValidationRule : ValidationRuleBase {
    [CompilerGeneratedAttribute]
private LegacyComplexityConfiguration <ComplexityConfiguration>k__BackingField;
    private LegacyComplexityConfiguration ComplexityConfiguration { get; }
    public LegacyComplexityValidationRule(LegacyComplexityConfiguration complexityConfiguration);
    [CompilerGeneratedAttribute]
private LegacyComplexityConfiguration get_ComplexityConfiguration();
    public virtual ValueTask`1<INodeVisitor> GetPreNodeVisitorAsync(ValidationContext context);
    private sealed virtual override ValueTask GraphQL.Validation.INodeVisitor.EnterAsync(ASTNode node, ValidationContext context);
    private sealed virtual override ValueTask GraphQL.Validation.INodeVisitor.LeaveAsync(ASTNode node, ValidationContext context);
    public void Validate(GraphQLDocument document, ISchema schema);
    protected virtual void Analyzed(GraphQLDocument document, LegacyComplexityResult complexityResult);
    internal static LegacyComplexityResult Analyze(GraphQLDocument doc, double avgImpact, int maxRecursionCount, ISchema schema);
    private static GraphQLFragmentDefinition GetFirstFragmentWithoutPendingDependencies(Dictionary`2<GraphQLFragmentDefinition, HashSet`1<GraphQLFragmentDefinition>> dependencies);
    private static Dictionary`2<GraphQLFragmentDefinition, HashSet`1<GraphQLFragmentDefinition>> BuildDependencies(GraphQLDocument document);
    [CompilerGeneratedAttribute]
internal static string <Validate>g__GetName|7_2(ASTNode node);
    [CompilerGeneratedAttribute]
internal static HashSet`1<GraphQLFragmentDefinition> <BuildDependencies>g__GetDependencies|11_0(GraphQLFragmentDefinition def, <>c__DisplayClass11_0& );
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class GraphQL.Validation.Rules.Custom.NoIntrospectionValidationRule : ValidationRuleBase {
    public static NoIntrospectionValidationRule Instance;
    private static MatchingNodeVisitor`1<GraphQLField> _visitor;
    private static NoIntrospectionValidationRule();
    public virtual ValueTask`1<INodeVisitor> GetPreNodeVisitorAsync(ValidationContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class GraphQL.Validation.Rules.DefaultValuesOfCorrectType : ValidationRuleBase {
    public static DefaultValuesOfCorrectType Instance;
    private static INodeVisitor _nodeVisitor;
    private static DefaultValuesOfCorrectType();
    public virtual ValueTask`1<INodeVisitor> GetPreNodeVisitorAsync(ValidationContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class GraphQL.Validation.Rules.FieldArgumentsAreValidRule : ValidationRuleBase {
    public static string HAS_FIELD_ARGUMENT_VALIDATION_KEY;
    [CompilerGeneratedAttribute]
private static FieldArgumentsAreValidRule <Instance>k__BackingField;
    public static FieldArgumentsAreValidRule Instance { get; }
    private static FieldArgumentsAreValidRule();
    [CompilerGeneratedAttribute]
public static FieldArgumentsAreValidRule get_Instance();
    public virtual ValueTask`1<INodeVisitor> GetPostNodeVisitorAsync(ValidationContext context);
    private sealed virtual override ValueTask GraphQL.Validation.INodeVisitor.EnterAsync(ASTNode node, ValidationContext context);
    private sealed virtual override ValueTask GraphQL.Validation.INodeVisitor.LeaveAsync(ASTNode node, ValidationContext context);
    [AsyncStateMachineAttribute("GraphQL.Validation.Rules.FieldArgumentsAreValidRule/<<GraphQL-Validation-INodeVisitor-EnterAsync>g__Validate|6_0>d")]
[CompilerGeneratedAttribute]
internal static ValueTask <GraphQL.Validation.INodeVisitor.EnterAsync>g__Validate|6_0(Func`2<FieldArgumentsValidationContext, ValueTask> func, FieldArgumentsValidationContext ctx);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class GraphQL.Validation.Rules.FieldsOnCorrectType : ValidationRuleBase {
    public static FieldsOnCorrectType Instance;
    private static INodeVisitor _nodeVisitor;
    private static FieldsOnCorrectType();
    public virtual ValueTask`1<INodeVisitor> GetPreNodeVisitorAsync(ValidationContext context);
    private static IEnumerable`1<string> GetSuggestedTypeNames(IGraphType type, string fieldName);
    private static IEnumerable`1<string> GetSuggestedFieldNames(IGraphType type, string fieldName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class GraphQL.Validation.Rules.FragmentsOnCompositeTypes : ValidationRuleBase {
    public static FragmentsOnCompositeTypes Instance;
    private static INodeVisitor _nodeVisitor;
    private static FragmentsOnCompositeTypes();
    public virtual ValueTask`1<INodeVisitor> GetPreNodeVisitorAsync(ValidationContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class GraphQL.Validation.Rules.InputFieldsAndArgumentsOfCorrectLength : ValidationRuleBase {
    public static InputFieldsAndArgumentsOfCorrectLength Instance;
    private static INodeVisitor _nodeVisitor;
    private static InputFieldsAndArgumentsOfCorrectLength();
    public virtual ValueTask`1<IVariableVisitor> GetVariableVisitorAsync(ValidationContext context);
    public virtual ValueTask`1<INodeVisitor> GetPreNodeVisitorAsync(ValidationContext context);
    private static void CheckLength(ASTNode node, GraphQLValue value, IMetadataReader provider, ValidationContext context);
    [CompilerGeneratedAttribute]
internal static void <CheckLength>g__CheckStringLength|6_0(int length, <>c__DisplayClass6_0& );
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class GraphQL.Validation.Rules.ISelectionNodeExtensions : object {
    [ExtensionAttribute]
public static ROM GetName(ISelectionNode selection);
    [ExtensionAttribute]
public static GraphQLArguments GetArguments(ISelectionNode selection);
    [ExtensionAttribute]
public static GraphQLSelectionSet GetSelectionSet(ISelectionNode selection);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class GraphQL.Validation.Rules.KnownArgumentNames : ValidationRuleBase {
    public static KnownArgumentNames Instance;
    private static INodeVisitor _nodeVisitor;
    private static KnownArgumentNames();
    public virtual ValueTask`1<INodeVisitor> GetPreNodeVisitorAsync(ValidationContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class GraphQL.Validation.Rules.KnownDirectivesInAllowedLocations : ValidationRuleBase {
    public static KnownDirectivesInAllowedLocations Instance;
    private static INodeVisitor _nodeVisitor;
    private static KnownDirectivesInAllowedLocations();
    public virtual ValueTask`1<INodeVisitor> GetPreNodeVisitorAsync(ValidationContext context);
    private static DirectiveLocation DirectiveLocationForAstPath(ValidationContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class GraphQL.Validation.Rules.KnownFragmentNames : ValidationRuleBase {
    public static KnownFragmentNames Instance;
    private static INodeVisitor _nodeVisitor;
    private static KnownFragmentNames();
    public virtual ValueTask`1<INodeVisitor> GetPreNodeVisitorAsync(ValidationContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class GraphQL.Validation.Rules.KnownTypeNames : ValidationRuleBase {
    public static KnownTypeNames Instance;
    private static INodeVisitor _nodeVisitor;
    private static KnownTypeNames();
    public virtual ValueTask`1<INodeVisitor> GetPreNodeVisitorAsync(ValidationContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class GraphQL.Validation.Rules.LoneAnonymousOperation : ValidationRuleBase {
    public static LoneAnonymousOperation Instance;
    private static INodeVisitor _nodeVisitor;
    private static LoneAnonymousOperation();
    public virtual ValueTask`1<INodeVisitor> GetPreNodeVisitorAsync(ValidationContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class GraphQL.Validation.Rules.NoFragmentCycles : ValidationRuleBase {
    public static NoFragmentCycles Instance;
    private static INodeVisitor _nodeVisitor;
    private static NoFragmentCycles();
    public virtual ValueTask`1<INodeVisitor> GetPreNodeVisitorAsync(ValidationContext context);
    private static void DetectCycleRecursive(GraphQLFragmentDefinition fragment, Stack`1<GraphQLFragmentSpread> spreadPath, HashSet`1<ROM> visitedFrags, Dictionary`2<ROM, int> spreadPathIndexByName, ValidationContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class GraphQL.Validation.Rules.NoUndefinedVariables : ValidationRuleBase {
    public static NoUndefinedVariables Instance;
    private static INodeVisitor _nodeVisitor;
    private static NoUndefinedVariables();
    public virtual ValueTask`1<INodeVisitor> GetPreNodeVisitorAsync(ValidationContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class GraphQL.Validation.Rules.NoUnusedFragments : ValidationRuleBase {
    public static NoUnusedFragments Instance;
    private static INodeVisitor _nodeVisitor;
    private static NoUnusedFragments();
    public virtual ValueTask`1<INodeVisitor> GetPreNodeVisitorAsync(ValidationContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class GraphQL.Validation.Rules.NoUnusedVariables : ValidationRuleBase {
    public static NoUnusedVariables Instance;
    private static INodeVisitor _nodeVisitor;
    private static NoUnusedVariables();
    public virtual ValueTask`1<INodeVisitor> GetPreNodeVisitorAsync(ValidationContext context);
    [CompilerGeneratedAttribute]
internal static bool <.cctor>g__Contains|4_3(List`1<VariableUsage> usages, GraphQLVariableDefinition def);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class GraphQL.Validation.Rules.OverlappingFieldsCanBeMerged : ValidationRuleBase {
    public static OverlappingFieldsCanBeMerged Instance;
    private static OverlappingFieldsCanBeMerged();
    public virtual ValueTask`1<INodeVisitor> GetPreNodeVisitorAsync(ValidationContext context);
    private static List`1<Conflict> FindConflictsWithinSelectionSet(ValidationContext context, Dictionary`2<GraphQLSelectionSet, CachedField> cachedFieldsAndFragmentNames, PairSet comparedFragmentPairs, IGraphType parentType, GraphQLSelectionSet selectionSet);
    private static void CollectConflictsWithin(ValidationContext context, List`1& conflicts, Dictionary`2<GraphQLSelectionSet, CachedField> cachedFieldsAndFragmentNames, PairSet comparedFragmentPairs, Dictionary`2<ROM, List`1<FieldDefPair>> fieldMap);
    private static Conflict FindConflict(ValidationContext context, Dictionary`2<GraphQLSelectionSet, CachedField> cachedFieldsAndFragmentNames, PairSet comparedFragmentPairs, bool parentFieldsAreMutuallyExclusive, ROM responseName, FieldDefPair fieldDefPair1, FieldDefPair fieldDefPair2);
    private static List`1<Conflict> FindConflictsBetweenSubSelectionSets(ValidationContext context, Dictionary`2<GraphQLSelectionSet, CachedField> cachedFieldsAndFragmentNames, PairSet comparedFragmentPairs, bool areMutuallyExclusive, IGraphType parentType1, GraphQLSelectionSet selectionSet1, IGraphType parentType2, GraphQLSelectionSet selectionSet2);
    private static void CollectConflictsBetweenFragments(ValidationContext context, List`1& conflicts, Dictionary`2<GraphQLSelectionSet, CachedField> cachedFieldsAndFragmentNames, PairSet comparedFragmentPairs, bool areMutuallyExclusive, ROM fragmentName1, ROM fragmentName2);
    private static void CollectConflictsBetweenFieldsAndFragment(ValidationContext context, List`1& conflicts, Dictionary`2<GraphQLSelectionSet, CachedField> cachedFieldsAndFragmentNames, HashSet`1<ROM> comparedFragments, PairSet comparedFragmentPairs, bool areMutuallyExclusive, Dictionary`2<ROM, List`1<FieldDefPair>> fieldMap, ROM fragmentName);
    private static void CollectConflictsBetween(ValidationContext context, List`1& conflicts, Dictionary`2<GraphQLSelectionSet, CachedField> cachedFieldsAndFragmentNames, PairSet comparedFragmentPairs, bool parentFieldsAreMutuallyExclusive, Dictionary`2<ROM, List`1<FieldDefPair>> fieldMap1, Dictionary`2<ROM, List`1<FieldDefPair>> fieldMap2);
    private static bool DoTypesConflict(IGraphType type1, IGraphType type2);
    [NullableContextAttribute("2")]
private static bool SameArguments(GraphQLArguments arguments1, GraphQLArguments arguments2);
    private static bool SameValue(GraphQLArgument arg1, GraphQLArgument arg2);
    private static CachedField GetFieldsAndFragmentNames(ValidationContext context, Dictionary`2<GraphQLSelectionSet, CachedField> cachedFieldsAndFragmentNames, IGraphType parentType, GraphQLSelectionSet selectionSet);
    private static CachedField GetReferencedFieldsAndFragmentNames(ValidationContext context, Dictionary`2<GraphQLSelectionSet, CachedField> cachedFieldsAndFragmentNames, GraphQLFragmentDefinition fragment);
    private static void CollectFieldsAndFragmentNames(ValidationContext context, IGraphType parentType, GraphQLSelectionSet selectionSet, Dictionary`2<ROM, List`1<FieldDefPair>> nodeAndDefs, HashSet`1<ROM> fragments);
    [NullableContextAttribute("2")]
private static bool isInterfaceType(IGraphType parentType);
    [NullableContextAttribute("2")]
private static bool isObjectType(IGraphType parentType);
    private static Conflict SubfieldConflicts(List`1<Conflict> conflicts, ROM responseName, ISelectionNode node1, ISelectionNode node2);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class GraphQL.Validation.Rules.PossibleFragmentSpreads : ValidationRuleBase {
    public static PossibleFragmentSpreads Instance;
    private static INodeVisitor _nodeVisitor;
    private static PossibleFragmentSpreads();
    public virtual ValueTask`1<INodeVisitor> GetPreNodeVisitorAsync(ValidationContext context);
    private static IGraphType getFragmentType(ValidationContext context, ROM name);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class GraphQL.Validation.Rules.ProvidedNonNullArguments : ValidationRuleBase {
    public static ProvidedNonNullArguments Instance;
    private static INodeVisitor _nodeVisitor;
    private static ProvidedNonNullArguments();
    public virtual ValueTask`1<INodeVisitor> GetPreNodeVisitorAsync(ValidationContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class GraphQL.Validation.Rules.ScalarLeafs : ValidationRuleBase {
    public static ScalarLeafs Instance;
    private static INodeVisitor _nodeVisitor;
    private static ScalarLeafs();
    public virtual ValueTask`1<INodeVisitor> GetPreNodeVisitorAsync(ValidationContext context);
    private static void Field(IGraphType type, GraphQLField field, ValidationContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class GraphQL.Validation.Rules.SingleRootFieldSubscriptions : ValidationRuleBase {
    public static SingleRootFieldSubscriptions Instance;
    private static INodeVisitor _nodeVisitor;
    private static SingleRootFieldSubscriptions();
    public virtual ValueTask`1<INodeVisitor> GetPreNodeVisitorAsync(ValidationContext context);
    private static bool IsIntrospectionField(GraphQLField field);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class GraphQL.Validation.Rules.UniqueArgumentNames : ValidationRuleBase {
    public static UniqueArgumentNames Instance;
    private static INodeVisitor _nodeVisitor;
    private static UniqueArgumentNames();
    public virtual ValueTask`1<INodeVisitor> GetPreNodeVisitorAsync(ValidationContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class GraphQL.Validation.Rules.UniqueDirectivesPerLocation : ValidationRuleBase {
    public static UniqueDirectivesPerLocation Instance;
    private static INodeVisitor _nodeVisitor;
    private static UniqueDirectivesPerLocation();
    public virtual ValueTask`1<INodeVisitor> GetPreNodeVisitorAsync(ValidationContext context);
    private static void CheckDuplicates(ValidationContext context, GraphQLDirectives directives);
    private static int GetCount(GraphQLDirectives directives, ROM name);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class GraphQL.Validation.Rules.UniqueFragmentNames : ValidationRuleBase {
    public static UniqueFragmentNames Instance;
    private static INodeVisitor _nodeVisitor;
    private static UniqueFragmentNames();
    public virtual ValueTask`1<INodeVisitor> GetPreNodeVisitorAsync(ValidationContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class GraphQL.Validation.Rules.UniqueInputFieldNames : ValidationRuleBase {
    public static UniqueInputFieldNames Instance;
    private static INodeVisitor _nodeVisitor;
    private static UniqueInputFieldNames();
    public virtual ValueTask`1<INodeVisitor> GetPreNodeVisitorAsync(ValidationContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class GraphQL.Validation.Rules.UniqueOperationNames : ValidationRuleBase {
    public static UniqueOperationNames Instance;
    private static INodeVisitor _nodeVisitor;
    private static UniqueOperationNames();
    public virtual ValueTask`1<INodeVisitor> GetPreNodeVisitorAsync(ValidationContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class GraphQL.Validation.Rules.UniqueVariableNames : ValidationRuleBase {
    public static UniqueVariableNames Instance;
    private static INodeVisitor _nodeVisitor;
    private static UniqueVariableNames();
    public virtual ValueTask`1<INodeVisitor> GetPreNodeVisitorAsync(ValidationContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class GraphQL.Validation.Rules.VariablesAreInputTypes : ValidationRuleBase {
    public static VariablesAreInputTypes Instance;
    private static INodeVisitor _nodeVisitor;
    private static VariablesAreInputTypes();
    public virtual ValueTask`1<INodeVisitor> GetPreNodeVisitorAsync(ValidationContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class GraphQL.Validation.Rules.VariablesInAllowedPosition : ValidationRuleBase {
    public static VariablesInAllowedPosition Instance;
    private static INodeVisitor _nodeVisitor;
    private static VariablesInAllowedPosition();
    public virtual ValueTask`1<INodeVisitor> GetPreNodeVisitorAsync(ValidationContext context);
    private static bool IsVariableUsageAllowed(GraphQLVariableDefinition variableDefinition, IGraphType variableType, VariableUsage variableUsage, bool allowScalarsForLists);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class GraphQL.Validation.SuccessfullyValidatedResult : object {
    public static IValidationResult Instance;
    public bool IsValid { get; }
    public ExecutionErrors Errors { get; }
    [NullableAttribute("2")]
public Variables Variables { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IReadOnlyDictionary`2<GraphQLField, IDictionary`2<string, ArgumentValue>> ArgumentValues { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IReadOnlyDictionary`2<ASTNode, IDictionary`2<string, DirectiveInfo>> DirectiveValues { get; }
    private static SuccessfullyValidatedResult();
    public sealed virtual bool get_IsValid();
    public sealed virtual ExecutionErrors get_Errors();
    [NullableContextAttribute("2")]
public sealed virtual Variables get_Variables();
    public sealed virtual IReadOnlyDictionary`2<GraphQLField, IDictionary`2<string, ArgumentValue>> get_ArgumentValues();
    public sealed virtual IReadOnlyDictionary`2<ASTNode, IDictionary`2<string, DirectiveInfo>> get_DirectiveValues();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class GraphQL.Validation.TypeInfo : object {
    [NullableAttribute("1")]
private ISchema _schema;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Stack`1<IGraphType> _typeStack;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Stack`1<IGraphType> _inputTypeStack;
    [NullableAttribute("1")]
private Stack`1<IGraphType> _parentTypeStack;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Stack`1<FieldType> _fieldDefStack;
    [NullableAttribute("1")]
private Stack`1<ASTNode> _ancestorStack;
    private Directive _directive;
    private QueryArgument _argument;
    internal HashSet`1<ROM> NoFragmentCycles_VisitedFrags;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal Stack`1<GraphQLFragmentSpread> NoFragmentCycles_SpreadPath;
    internal Dictionary`2<ROM, int> NoFragmentCycles_SpreadPathIndexByName;
    internal HashSet`1<ROM> NoUndefinedVariables_VariableNameDefined;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal List`1<GraphQLOperationDefinition> NoUnusedFragments_OperationDefs;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal List`1<GraphQLFragmentDefinition> NoUnusedFragments_FragmentDefs;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal List`1<GraphQLVariableDefinition> NoUnusedVariables_VariableDefs;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal Dictionary`2<ROM, GraphQLArgument> UniqueArgumentNames_KnownArgs;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal Dictionary`2<ROM, GraphQLFragmentDefinition> UniqueFragmentNames_KnownFragments;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal Stack`1<Dictionary`2<ROM, GraphQLValue>> UniqueInputFieldNames_KnownNameStack;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal Dictionary`2<ROM, GraphQLValue> UniqueInputFieldNames_KnownNames;
    internal HashSet`1<ROM> UniqueOperationNames_Frequency;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal Dictionary`2<ROM, GraphQLVariableDefinition> UniqueVariableNames_KnownVariables;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal Dictionary`2<ROM, GraphQLVariableDefinition> VariablesInAllowedPosition_VarDefMap;
    [NullableContextAttribute("1")]
public TypeInfo(ISchema schema);
    public void Clear();
    private static T PeekElement(Stack`1<T> from, int index);
    public ASTNode GetAncestor(int index);
    public IGraphType GetLastType(int index);
    public IGraphType GetInputType(int index);
    public IGraphType GetParentType(int index);
    public FieldType GetFieldDef(int index);
    public Directive GetDirective();
    public QueryArgument GetArgument();
    [NullableContextAttribute("1")]
public sealed virtual ValueTask EnterAsync(ASTNode node, ValidationContext context);
    [NullableContextAttribute("1")]
public sealed virtual ValueTask LeaveAsync(ASTNode node, ValidationContext context);
    [NullableContextAttribute("1")]
private static FieldType GetFieldDef(ISchema schema, IGraphType parentType, GraphQLField field);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class GraphQL.Validation.ValidationContext : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<ValidationError> _errors;
    [CompilerGeneratedAttribute]
private GraphQLOperationDefinition <Operation>k__BackingField;
    [CompilerGeneratedAttribute]
private ISchema <Schema>k__BackingField;
    [CompilerGeneratedAttribute]
private GraphQLDocument <Document>k__BackingField;
    [CompilerGeneratedAttribute]
private TypeInfo <TypeInfo>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IDictionary`2<string, object> <UserContext>k__BackingField;
    [CompilerGeneratedAttribute]
private Metrics <Metrics>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Dictionary`2<string, object> <NonUserContext>k__BackingField;
    [CompilerGeneratedAttribute]
private Inputs <Variables>k__BackingField;
    [CompilerGeneratedAttribute]
private Inputs <Extensions>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private IServiceProvider <RequestServices>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private ClaimsPrincipal <User>k__BackingField;
    [CompilerGeneratedAttribute]
private CancellationToken <CancellationToken>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Dictionary`2<GraphQLField, IDictionary`2<string, ArgumentValue>> <ArgumentValues>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Dictionary`2<ASTNode, IDictionary`2<string, DirectiveInfo>> <DirectiveValues>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Dictionary`2<GraphQLOperationDefinition, List`1<GraphQLFragmentDefinition>> _fragments;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Dictionary`2<GraphQLOperationDefinition, List`1<GraphQLFragmentDefinition>> _usedFragments;
    private Nullable`1<bool> _noFragments;
    private static GetVariablesVisitor _getVariablesVisitor;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Dictionary`2<GraphQLOperationDefinition, List`1<VariableUsage>> _variables;
    public GraphQLOperationDefinition Operation { get; public set; }
    public ISchema Schema { get; public set; }
    public GraphQLDocument Document { get; public set; }
    public TypeInfo TypeInfo { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IDictionary`2<string, object> UserContext { get; public set; }
    public Metrics Metrics { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal Dictionary`2<string, object> NonUserContext { get; internal set; }
    public IEnumerable`1<ValidationError> Errors { get; }
    public bool HasErrors { get; }
    public Inputs Variables { get; public set; }
    public Inputs Extensions { get; public set; }
    [NullableAttribute("2")]
public IServiceProvider RequestServices { get; public set; }
    [NullableAttribute("2")]
public ClaimsPrincipal User { get; public set; }
    public CancellationToken CancellationToken { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Dictionary`2<GraphQLField, IDictionary`2<string, ArgumentValue>> ArgumentValues { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Dictionary`2<ASTNode, IDictionary`2<string, DirectiveInfo>> DirectiveValues { get; public set; }
    private static ValidationContext();
    internal void Reset();
    [CompilerGeneratedAttribute]
public GraphQLOperationDefinition get_Operation();
    [CompilerGeneratedAttribute]
public void set_Operation(GraphQLOperationDefinition value);
    [CompilerGeneratedAttribute]
public ISchema get_Schema();
    [CompilerGeneratedAttribute]
public void set_Schema(ISchema value);
    [CompilerGeneratedAttribute]
public GraphQLDocument get_Document();
    [CompilerGeneratedAttribute]
public void set_Document(GraphQLDocument value);
    [CompilerGeneratedAttribute]
public TypeInfo get_TypeInfo();
    [CompilerGeneratedAttribute]
public void set_TypeInfo(TypeInfo value);
    [CompilerGeneratedAttribute]
public sealed virtual IDictionary`2<string, object> get_UserContext();
    [CompilerGeneratedAttribute]
public void set_UserContext(IDictionary`2<string, object> value);
    [CompilerGeneratedAttribute]
public Metrics get_Metrics();
    [CompilerGeneratedAttribute]
public void set_Metrics(Metrics value);
    [CompilerGeneratedAttribute]
internal Dictionary`2<string, object> get_NonUserContext();
    [CompilerGeneratedAttribute]
internal void set_NonUserContext(Dictionary`2<string, object> value);
    public IEnumerable`1<ValidationError> get_Errors();
    public bool get_HasErrors();
    [CompilerGeneratedAttribute]
public Inputs get_Variables();
    [CompilerGeneratedAttribute]
public void set_Variables(Inputs value);
    [CompilerGeneratedAttribute]
public Inputs get_Extensions();
    [CompilerGeneratedAttribute]
public void set_Extensions(Inputs value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public IServiceProvider get_RequestServices();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_RequestServices(IServiceProvider value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public ClaimsPrincipal get_User();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_User(ClaimsPrincipal value);
    [CompilerGeneratedAttribute]
public CancellationToken get_CancellationToken();
    [CompilerGeneratedAttribute]
public void set_CancellationToken(CancellationToken value);
    [CompilerGeneratedAttribute]
public Dictionary`2<GraphQLField, IDictionary`2<string, ArgumentValue>> get_ArgumentValues();
    [CompilerGeneratedAttribute]
public void set_ArgumentValues(Dictionary`2<GraphQLField, IDictionary`2<string, ArgumentValue>> value);
    [CompilerGeneratedAttribute]
public Dictionary`2<ASTNode, IDictionary`2<string, DirectiveInfo>> get_DirectiveValues();
    [CompilerGeneratedAttribute]
public void set_DirectiveValues(Dictionary`2<ASTNode, IDictionary`2<string, DirectiveInfo>> value);
    public void ReportError(ValidationError error);
    public List`1<GraphQLFragmentSpread> GetFragmentSpreads(GraphQLSelectionSet node);
    [NullableContextAttribute("2")]
[AsyncStateMachineAttribute("GraphQL.Validation.ValidationContext/<GetVariablesValuesAsync>d__64")]
public ValueTask`1<ValueTuple`2<Variables, List`1<ValidationError>>> GetVariablesValuesAsync(IVariableVisitor visitor);
    private ValueTask`1<object> GetVariableValueAsync(IGraphType graphType, GraphQLVariableDefinition variableDef, object input, IVariableVisitor visitor);
    public string IsValidLiteralValue(IGraphType type, GraphQLValue valueAst);
    public List`1<GraphQLFragmentDefinition> GetRecursivelyReferencedFragments(GraphQLOperationDefinition operation, bool onlyUsed);
    public virtual bool ShouldIncludeNode(ASTNode node);
    public List`1<GraphQLFragmentDefinition> GetRecursivelyReferencedFragments(List`1<GraphQLOperationDefinition> operations);
    public List`1<VariableUsage> GetVariables(TNode node);
    public List`1<VariableUsage> GetRecursiveVariables(GraphQLOperationDefinition operation);
    [AsyncStateMachineAttribute("GraphQL.Validation.ValidationContext/<<GetVariableValueAsync>g__ParseValueAsync|65_0>d")]
[CompilerGeneratedAttribute]
private ValueTask`1<object> <GetVariableValueAsync>g__ParseValueAsync|65_0(IGraphType type, GraphQLVariableDefinition variableDef, VariableName variableName, object value, IVariableVisitor visitor);
    [CompilerGeneratedAttribute]
private object <GetVariableValueAsync>g__ParseValueScalar|65_1(ScalarGraphType scalarGraphType, GraphQLVariableDefinition variableDef, VariableName variableName, object value);
    [AsyncStateMachineAttribute("GraphQL.Validation.ValidationContext/<<GetVariableValueAsync>g__ParseValueListAsync|65_2>d")]
[CompilerGeneratedAttribute]
private ValueTask`1<IList`1<object>> <GetVariableValueAsync>g__ParseValueListAsync|65_2(ListGraphType listGraphType, GraphQLVariableDefinition variableDef, VariableName variableName, object value, IVariableVisitor visitor);
    [AsyncStateMachineAttribute("GraphQL.Validation.ValidationContext/<<GetVariableValueAsync>g__ParseValueObjectAsync|65_3>d")]
[CompilerGeneratedAttribute]
private ValueTask`1<object> <GetVariableValueAsync>g__ParseValueObjectAsync|65_3(IInputObjectGraphType graphType, GraphQLVariableDefinition variableDef, VariableName variableName, object value, IVariableVisitor visitor);
    [CompilerGeneratedAttribute]
private bool <ShouldIncludeNode>g__GetDirectiveValue|71_0(GraphQLDirective directive, bool defaultValue);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class GraphQL.Validation.ValidationContextExtensions : object {
    [ExtensionAttribute]
public static void AddListItem(ValidationContext context, string listKey, T item);
    [ExtensionAttribute]
public static List`1<T> GetList(ValidationContext context, string listKey, bool reset);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class GraphQL.Validation.ValidationError : DocumentError {
    private List`1<ASTNode> _nodes;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <Number>k__BackingField;
    public IEnumerable`1<ASTNode> Nodes { get; }
    [NullableAttribute("2")]
public string Number { get; public set; }
    public ValidationError(string message);
    public ValidationError(string message, Exception innerException);
    public ValidationError(ROM originalQuery, string number, string message, ASTNode node);
    public ValidationError(ROM originalQuery, string number, string message, ASTNode[] nodes);
    public ValidationError(ROM originalQuery, string number, string message, Exception innerException, ASTNode node);
    [NullableContextAttribute("2")]
public ValidationError(ROM originalQuery, string number, string message, Exception innerException, ASTNode[] nodes);
    internal static string GetValidationErrorCode(Type type);
    internal void AddNode(ROM source, ASTNode node);
    public IEnumerable`1<ASTNode> get_Nodes();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_Number();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Number(string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class GraphQL.Validation.ValidationOptions : ValueType {
    [CompilerGeneratedAttribute]
private ISchema <Schema>k__BackingField;
    [CompilerGeneratedAttribute]
private GraphQLDocument <Document>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IEnumerable`1<IValidationRule> <Rules>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IDictionary`2<string, object> <UserContext>k__BackingField;
    [CompilerGeneratedAttribute]
private Metrics <Metrics>k__BackingField;
    [CompilerGeneratedAttribute]
private Inputs <Variables>k__BackingField;
    [CompilerGeneratedAttribute]
private Inputs <Extensions>k__BackingField;
    [CompilerGeneratedAttribute]
private GraphQLOperationDefinition <Operation>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private IServiceProvider <RequestServices>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private ClaimsPrincipal <User>k__BackingField;
    [CompilerGeneratedAttribute]
private CancellationToken <CancellationToken>k__BackingField;
    public ISchema Schema { get; public set; }
    public GraphQLDocument Document { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IEnumerable`1<IValidationRule> Rules { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IDictionary`2<string, object> UserContext { get; public set; }
    public Metrics Metrics { get; public set; }
    public Inputs Variables { get; public set; }
    public Inputs Extensions { get; public set; }
    public GraphQLOperationDefinition Operation { get; public set; }
    [NullableAttribute("2")]
public IServiceProvider RequestServices { get; public set; }
    [NullableAttribute("2")]
public ClaimsPrincipal User { get; public set; }
    public CancellationToken CancellationToken { get; public set; }
    public ValidationOptions(ISchema schema, GraphQLDocument document, IEnumerable`1<IValidationRule> rules, IDictionary`2<string, object> userContext, Metrics metrics, Inputs variables, Inputs extensions, GraphQLOperationDefinition operation, IServiceProvider requestServices, ClaimsPrincipal user, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
public ISchema get_Schema();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Schema(ISchema value);
    [CompilerGeneratedAttribute]
public GraphQLDocument get_Document();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Document(GraphQLDocument value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<IValidationRule> get_Rules();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Rules(IEnumerable`1<IValidationRule> value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, object> get_UserContext();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_UserContext(IDictionary`2<string, object> value);
    [CompilerGeneratedAttribute]
public Metrics get_Metrics();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Metrics(Metrics value);
    [CompilerGeneratedAttribute]
public Inputs get_Variables();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Variables(Inputs value);
    [CompilerGeneratedAttribute]
public Inputs get_Extensions();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Extensions(Inputs value);
    [CompilerGeneratedAttribute]
public GraphQLOperationDefinition get_Operation();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Operation(GraphQLOperationDefinition value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public IServiceProvider get_RequestServices();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_RequestServices(IServiceProvider value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public ClaimsPrincipal get_User();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_User(ClaimsPrincipal value);
    [CompilerGeneratedAttribute]
public CancellationToken get_CancellationToken();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_CancellationToken(CancellationToken value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class GraphQL.Validation.ValidationResult : object {
    private ExecutionErrors _errors;
    [CompilerGeneratedAttribute]
private Variables <Variables>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IReadOnlyDictionary`2<GraphQLField, IDictionary`2<string, ArgumentValue>> <ArgumentValues>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IReadOnlyDictionary`2<ASTNode, IDictionary`2<string, DirectiveInfo>> <DirectiveValues>k__BackingField;
    public bool IsValid { get; }
    [NullableAttribute("1")]
public ExecutionErrors Errors { get; }
    public Variables Variables { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IReadOnlyDictionary`2<GraphQLField, IDictionary`2<string, ArgumentValue>> ArgumentValues { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IReadOnlyDictionary`2<ASTNode, IDictionary`2<string, DirectiveInfo>> DirectiveValues { get; public set; }
    [NullableContextAttribute("1")]
public ValidationResult(IEnumerable`1<ValidationError> errors);
    [NullableContextAttribute("1")]
public ValidationResult(ValidationError[] errors);
    public sealed virtual bool get_IsValid();
    [NullableContextAttribute("1")]
public sealed virtual ExecutionErrors get_Errors();
    [CompilerGeneratedAttribute]
public sealed virtual Variables get_Variables();
    [CompilerGeneratedAttribute]
public void set_Variables(Variables value);
    [CompilerGeneratedAttribute]
public sealed virtual IReadOnlyDictionary`2<GraphQLField, IDictionary`2<string, ArgumentValue>> get_ArgumentValues();
    [CompilerGeneratedAttribute]
public void set_ArgumentValues(IReadOnlyDictionary`2<GraphQLField, IDictionary`2<string, ArgumentValue>> value);
    [CompilerGeneratedAttribute]
public sealed virtual IReadOnlyDictionary`2<ASTNode, IDictionary`2<string, DirectiveInfo>> get_DirectiveValues();
    [CompilerGeneratedAttribute]
public void set_DirectiveValues(IReadOnlyDictionary`2<ASTNode, IDictionary`2<string, DirectiveInfo>> value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class GraphQL.Validation.ValidationRuleBase : object {
    public virtual ValueTask`1<INodeVisitor> GetPreNodeVisitorAsync(ValidationContext context);
    public virtual ValueTask`1<IVariableVisitor> GetVariableVisitorAsync(ValidationContext context);
    public virtual ValueTask`1<INodeVisitor> GetPostNodeVisitorAsync(ValidationContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class GraphQL.Validation.Variable : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [NullableAttribute("2")]
private object _value;
    [CompilerGeneratedAttribute]
private GraphQLVariableDefinition <Definition>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ValueSpecified>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsDefault>k__BackingField;
    public string Name { get; }
    [NullableAttribute("2")]
public object Value { get; public set; }
    public GraphQLVariableDefinition Definition { get; public set; }
    public bool ValueSpecified { get; private set; }
    public bool IsDefault { get; public set; }
    public Variable(string name, GraphQLVariableDefinition definition);
    [CompilerGeneratedAttribute]
public string get_Name();
    [NullableContextAttribute("2")]
public object get_Value();
    [NullableContextAttribute("2")]
public void set_Value(object value);
    [CompilerGeneratedAttribute]
public GraphQLVariableDefinition get_Definition();
    [CompilerGeneratedAttribute]
public void set_Definition(GraphQLVariableDefinition value);
    [CompilerGeneratedAttribute]
public bool get_ValueSpecified();
    [CompilerGeneratedAttribute]
private void set_ValueSpecified(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsDefault();
    [CompilerGeneratedAttribute]
public void set_IsDefault(bool value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class GraphQL.Validation.Variables : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<Variable> _variables;
    [CompilerGeneratedAttribute]
private static Variables <None>k__BackingField;
    public static Variables None { get; }
    internal Variables(int initialCount);
    private static Variables();
    public virtual void Add(Variable variable);
    [NullableContextAttribute("2")]
public object ValueFor(string name, object defaultValue);
    [NullableContextAttribute("2")]
public Variable Find(ROM name);
    public bool ValueFor(ROM name, ArgumentValue& value);
    public sealed virtual IEnumerator`1<Variable> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    [CompilerGeneratedAttribute]
public static Variables get_None();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class GraphQL.Validation.VariableUsage : object {
    [CompilerGeneratedAttribute]
private GraphQLVariable <Node>k__BackingField;
    [CompilerGeneratedAttribute]
private IGraphType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasDefault>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsRequired>k__BackingField;
    public GraphQLVariable Node { get; }
    public IGraphType Type { get; }
    public bool HasDefault { get; }
    public bool IsRequired { get; }
    public VariableUsage(GraphQLVariable node, IGraphType type, bool hasDefault, bool isRequired);
    [CompilerGeneratedAttribute]
public GraphQLVariable get_Node();
    [CompilerGeneratedAttribute]
public IGraphType get_Type();
    [CompilerGeneratedAttribute]
public bool get_HasDefault();
    [CompilerGeneratedAttribute]
public bool get_IsRequired();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("2432")]
public class GraphQL.ValidatorAttribute : GraphQLAttribute {
    private static string DEFAULT_METHOD_NAME;
    [NullableAttribute("2")]
private Type _validatorType;
    private string _validatorMethodName;
    public ValidatorAttribute(string validatorMethodName);
    public ValidatorAttribute(Type validatorType);
    public ValidatorAttribute(Type validatorType, string validatorMethodName);
    public virtual void Modify(FieldType fieldType, bool isInputType, IGraphType graphType, MemberInfo memberInfo, Boolean& ignore);
    public virtual void Modify(QueryArgument queryArgument, ParameterInfo parameterInfo);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class GraphQL.ValueConverter : object {
    private static ConcurrentDictionary`2<Type, ConcurrentDictionary`2<Type, Func`2<object, object>>> _valueConversions;
    private static ConcurrentDictionary`2<Type, IListConverterFactory> _listConverterFactories;
    private static ConcurrentDictionary`2<Type, IListConverter> _listConverterCache;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private static IListConverterFactory <DefaultListConverterFactory>k__BackingField;
    [NullableAttribute("2")]
public static IListConverterFactory DefaultListConverterFactory { get; public set; }
    private static ValueConverter();
    [NullableContextAttribute("2")]
public static T ConvertTo(object value);
    [NullableContextAttribute("2")]
public static object ConvertTo(object value, Type targetType);
    [NullableContextAttribute("2")]
internal static bool TryConvertTo(object value, Type targetType, Object& result, Type sourceType);
    public static Func`2<object, object> GetConversion(Type valueType, Type targetType);
    public static void Register(Type valueType, Type targetType, Func`2<object, object> conversion);
    [NullableContextAttribute("2")]
public static void Register(Func`2<TSource, TTarget> conversion);
    public static void Register(Func`2<IDictionary`2<string, object>, TTarget> conversion);
    public static void RegisterListConverterFactory(Type listType, IListConverterFactory converter);
    public static void RegisterListConverterFactory(Type listType, Type implementationType);
    [NullableContextAttribute("0")]
public static void RegisterListConverter(Func`2<IEnumerable`1<TElementType>, TListType> conversion);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static IListConverterFactory get_DefaultListConverterFactory();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static void set_DefaultListConverterFactory(IListConverterFactory value);
    public static IListConverterFactory GetListConverterFactory(Type listType);
    public static IListConverter GetListConverter(Type listType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class GraphQL.VariableName : ValueType {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Index>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <ChildName>k__BackingField;
    public string Name { get; public set; }
    public Nullable`1<int> Index { get; public set; }
    [NullableAttribute("2")]
public string ChildName { get; public set; }
    public VariableName(VariableName variableName, int index);
    public VariableName(VariableName variableName, string childName);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public Nullable`1<int> get_Index();
    [CompilerGeneratedAttribute]
public void set_Index(Nullable`1<int> value);
    [IsReadOnlyAttribute]
[NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_ChildName();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_ChildName(string value);
    public virtual string ToString();
    public static VariableName op_Implicit(string name);
    public static string op_Implicit(VariableName variableName);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[AttributeUsageAttribute("2432")]
[ExcludeFromCodeCoverageAttribute]
internal class System.Diagnostics.CodeAnalysis.AllowNullAttribute : Attribute {
}
[AttributeUsageAttribute("2432")]
[ExcludeFromCodeCoverageAttribute]
internal class System.Diagnostics.CodeAnalysis.DisallowNullAttribute : Attribute {
}
[AttributeUsageAttribute("64")]
[ExcludeFromCodeCoverageAttribute]
internal class System.Diagnostics.CodeAnalysis.DoesNotReturnAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
[ExcludeFromCodeCoverageAttribute]
internal class System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ParameterValue>k__BackingField;
    public bool ParameterValue { get; }
    public DoesNotReturnIfAttribute(bool parameterValue);
    [CompilerGeneratedAttribute]
public bool get_ParameterValue();
}
[AttributeUsageAttribute("28108")]
[ExcludeFromCodeCoverageAttribute]
[ConditionalAttribute("MULTI_TARGETING_SUPPORT_ATTRIBUTES")]
internal class System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembersAttribute : Attribute {
    [CompilerGeneratedAttribute]
private DynamicallyAccessedMemberTypes <MemberTypes>k__BackingField;
    public DynamicallyAccessedMemberTypes MemberTypes { get; }
    public DynamicallyAccessedMembersAttribute(DynamicallyAccessedMemberTypes memberTypes);
    [CompilerGeneratedAttribute]
public DynamicallyAccessedMemberTypes get_MemberTypes();
}
[FlagsAttribute]
internal enum System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes : Enum {
    public int value__;
    public static DynamicallyAccessedMemberTypes None;
    public static DynamicallyAccessedMemberTypes PublicParameterlessConstructor;
    public static DynamicallyAccessedMemberTypes PublicConstructors;
    public static DynamicallyAccessedMemberTypes NonPublicConstructors;
    public static DynamicallyAccessedMemberTypes PublicMethods;
    public static DynamicallyAccessedMemberTypes NonPublicMethods;
    public static DynamicallyAccessedMemberTypes PublicFields;
    public static DynamicallyAccessedMemberTypes NonPublicFields;
    public static DynamicallyAccessedMemberTypes PublicNestedTypes;
    public static DynamicallyAccessedMemberTypes NonPublicNestedTypes;
    public static DynamicallyAccessedMemberTypes PublicProperties;
    public static DynamicallyAccessedMemberTypes NonPublicProperties;
    public static DynamicallyAccessedMemberTypes PublicEvents;
    public static DynamicallyAccessedMemberTypes NonPublicEvents;
    public static DynamicallyAccessedMemberTypes Interfaces;
    public static DynamicallyAccessedMemberTypes All;
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[AttributeUsageAttribute("352")]
[ExcludeFromCodeCoverageAttribute]
[ConditionalAttribute("MULTI_TARGETING_SUPPORT_ATTRIBUTES")]
internal class System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <MemberSignature>k__BackingField;
    [CompilerGeneratedAttribute]
private DynamicallyAccessedMemberTypes <MemberTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TypeName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AssemblyName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Condition>k__BackingField;
    public string MemberSignature { get; }
    public DynamicallyAccessedMemberTypes MemberTypes { get; }
    public Type Type { get; }
    public string TypeName { get; }
    public string AssemblyName { get; }
    public string Condition { get; public set; }
    [NullableContextAttribute("1")]
public DynamicDependencyAttribute(string memberSignature);
    [NullableContextAttribute("1")]
public DynamicDependencyAttribute(string memberSignature, Type type);
    [NullableContextAttribute("1")]
public DynamicDependencyAttribute(string memberSignature, string typeName, string assemblyName);
    [NullableContextAttribute("1")]
public DynamicDependencyAttribute(DynamicallyAccessedMemberTypes memberTypes, Type type);
    [NullableContextAttribute("1")]
public DynamicDependencyAttribute(DynamicallyAccessedMemberTypes memberTypes, string typeName, string assemblyName);
    [CompilerGeneratedAttribute]
public string get_MemberSignature();
    [CompilerGeneratedAttribute]
public DynamicallyAccessedMemberTypes get_MemberTypes();
    [CompilerGeneratedAttribute]
public Type get_Type();
    [CompilerGeneratedAttribute]
public string get_TypeName();
    [CompilerGeneratedAttribute]
public string get_AssemblyName();
    [CompilerGeneratedAttribute]
public string get_Condition();
    [CompilerGeneratedAttribute]
public void set_Condition(string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("6143")]
[ExcludeFromCodeCoverageAttribute]
internal class System.Diagnostics.CodeAnalysis.ExperimentalAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <DiagnosticId>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <UrlFormat>k__BackingField;
    public string DiagnosticId { get; }
    [NullableAttribute("2")]
public string UrlFormat { get; public set; }
    public ExperimentalAttribute(string diagnosticId);
    [CompilerGeneratedAttribute]
public string get_DiagnosticId();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_UrlFormat();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_UrlFormat(string value);
}
[AttributeUsageAttribute("10624")]
[ExcludeFromCodeCoverageAttribute]
internal class System.Diagnostics.CodeAnalysis.MaybeNullAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
[ExcludeFromCodeCoverageAttribute]
internal class System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ReturnValue>k__BackingField;
    public bool ReturnValue { get; }
    public MaybeNullWhenAttribute(bool returnValue);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("192")]
[ExcludeFromCodeCoverageAttribute]
internal class System.Diagnostics.CodeAnalysis.MemberNotNullAttribute : Attribute {
    [CompilerGeneratedAttribute]
private String[] <Members>k__BackingField;
    public String[] Members { get; }
    public MemberNotNullAttribute(string member);
    public MemberNotNullAttribute(String[] members);
    [CompilerGeneratedAttribute]
public String[] get_Members();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("192")]
[ExcludeFromCodeCoverageAttribute]
internal class System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ReturnValue>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Members>k__BackingField;
    public bool ReturnValue { get; }
    public String[] Members { get; }
    public MemberNotNullWhenAttribute(bool returnValue, string member);
    public MemberNotNullWhenAttribute(bool returnValue, String[] members);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
    [CompilerGeneratedAttribute]
public String[] get_Members();
}
[AttributeUsageAttribute("10624")]
[ExcludeFromCodeCoverageAttribute]
internal class System.Diagnostics.CodeAnalysis.NotNullAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("10368")]
[ExcludeFromCodeCoverageAttribute]
internal class System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <ParameterName>k__BackingField;
    public string ParameterName { get; }
    public NotNullIfNotNullAttribute(string parameterName);
    [CompilerGeneratedAttribute]
public string get_ParameterName();
}
[AttributeUsageAttribute("2048")]
[ExcludeFromCodeCoverageAttribute]
internal class System.Diagnostics.CodeAnalysis.NotNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ReturnValue>k__BackingField;
    public bool ReturnValue { get; }
    public NotNullWhenAttribute(bool returnValue);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[AttributeUsageAttribute("736")]
[ExcludeFromCodeCoverageAttribute]
[ConditionalAttribute("MULTI_TARGETING_SUPPORT_ATTRIBUTES")]
internal class System.Diagnostics.CodeAnalysis.RequiresAssemblyFilesAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    public string Message { get; }
    public string Url { get; public set; }
    [NullableContextAttribute("1")]
public RequiresAssemblyFilesAttribute(string message);
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
public void set_Url(string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("100")]
[ExcludeFromCodeCoverageAttribute]
[ConditionalAttribute("MULTI_TARGETING_SUPPORT_ATTRIBUTES")]
internal class System.Diagnostics.CodeAnalysis.RequiresDynamicCodeAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    public string Message { get; }
    [NullableAttribute("2")]
public string Url { get; public set; }
    public RequiresDynamicCodeAttribute(string message);
    [CompilerGeneratedAttribute]
public string get_Message();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_Url();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Url(string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("100")]
[ExcludeFromCodeCoverageAttribute]
[ConditionalAttribute("MULTI_TARGETING_SUPPORT_ATTRIBUTES")]
internal class System.Diagnostics.CodeAnalysis.RequiresUnreferencedCodeAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    public string Message { get; }
    [NullableAttribute("2")]
public string Url { get; public set; }
    public RequiresUnreferencedCodeAttribute(string message);
    [CompilerGeneratedAttribute]
public string get_Message();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_Url();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Url(string value);
}
[AttributeUsageAttribute("32")]
[ExcludeFromCodeCoverageAttribute]
internal class System.Diagnostics.CodeAnalysis.SetsRequiredMembersAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("2432")]
[ExcludeFromCodeCoverageAttribute]
internal class System.Diagnostics.CodeAnalysis.StringSyntaxAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Syntax>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Object[] <Arguments>k__BackingField;
    public static string CompositeFormat;
    public static string DateOnlyFormat;
    public static string DateTimeFormat;
    public static string EnumFormat;
    public static string GuidFormat;
    public static string Json;
    public static string NumericFormat;
    public static string Regex;
    public static string TimeOnlyFormat;
    public static string TimeSpanFormat;
    public static string Uri;
    public static string Xml;
    public string Syntax { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Object[] Arguments { get; }
    public StringSyntaxAttribute(string syntax);
    public StringSyntaxAttribute(string syntax, Object[] arguments);
    [CompilerGeneratedAttribute]
public string get_Syntax();
    [CompilerGeneratedAttribute]
public Object[] get_Arguments();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[AttributeUsageAttribute("32767")]
[ExcludeFromCodeCoverageAttribute]
[ConditionalAttribute("MULTI_TARGETING_SUPPORT_ATTRIBUTES")]
internal class System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute : Attribute {
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private string <Category>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private string <CheckId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Scope>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Target>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MessageId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Justification>k__BackingField;
    [NullableAttribute("1")]
public string Category { get; }
    [NullableAttribute("1")]
public string CheckId { get; }
    public string Scope { get; public set; }
    public string Target { get; public set; }
    public string MessageId { get; public set; }
    public string Justification { get; public set; }
    [NullableContextAttribute("1")]
public UnconditionalSuppressMessageAttribute(string category, string checkId);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public string get_Category();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public string get_CheckId();
    [CompilerGeneratedAttribute]
public string get_Scope();
    [CompilerGeneratedAttribute]
public void set_Scope(string value);
    [CompilerGeneratedAttribute]
public string get_Target();
    [CompilerGeneratedAttribute]
public void set_Target(string value);
    [CompilerGeneratedAttribute]
public string get_MessageId();
    [CompilerGeneratedAttribute]
public void set_MessageId(string value);
    [CompilerGeneratedAttribute]
public string get_Justification();
    [CompilerGeneratedAttribute]
public void set_Justification(string value);
}
[AttributeUsageAttribute("2240")]
[ExcludeFromCodeCoverageAttribute]
internal class System.Diagnostics.CodeAnalysis.UnscopedRefAttribute : Attribute {
}
[AttributeUsageAttribute("108")]
[ExcludeFromCodeCoverageAttribute]
[ConditionalAttribute("MULTI_TARGETING_SUPPORT_ATTRIBUTES")]
internal class System.Diagnostics.StackTraceHiddenAttribute : Attribute {
}
[IsReadOnlyAttribute]
[ExcludeFromCodeCoverageAttribute]
internal class System.Index : ValueType {
    private int _value;
    public static Index Start { get; }
    public static Index End { get; }
    public int Value { get; }
    public bool IsFromEnd { get; }
    public Index(int value, bool fromEnd);
    private Index(int value);
    public static Index get_Start();
    public static Index get_End();
    public static Index FromStart(int value);
    public static Index FromEnd(int value);
    public int get_Value();
    public bool get_IsFromEnd();
    public int GetOffset(int length);
    [NullableContextAttribute("2")]
public virtual bool Equals(object value);
    public sealed virtual bool Equals(Index other);
    public virtual int GetHashCode();
    public static Index op_Implicit(int value);
    [NullableContextAttribute("1")]
public virtual string ToString();
    [NullableContextAttribute("1")]
private string ToStringFromEnd();
}
[IsReadOnlyAttribute]
[ExcludeFromCodeCoverageAttribute]
internal class System.Range : ValueType {
    [CompilerGeneratedAttribute]
private Index <Start>k__BackingField;
    [CompilerGeneratedAttribute]
private Index <End>k__BackingField;
    public Index Start { get; }
    public Index End { get; }
    public static Range All { get; }
    public Range(Index start, Index end);
    [CompilerGeneratedAttribute]
public Index get_Start();
    [CompilerGeneratedAttribute]
public Index get_End();
    [NullableContextAttribute("2")]
public virtual bool Equals(object value);
    public sealed virtual bool Equals(Range other);
    public virtual int GetHashCode();
    [NullableContextAttribute("1")]
public virtual string ToString();
    public static Range StartAt(Index start);
    public static Range EndAt(Index end);
    public static Range get_All();
    public ValueTuple`2<int, int> GetOffsetAndLength(int length);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class System.Reflection.NullabilityInfo : object {
    [CompilerGeneratedAttribute]
private Type <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private NullabilityState <ReadState>k__BackingField;
    [CompilerGeneratedAttribute]
private NullabilityState <WriteState>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private NullabilityInfo <ElementType>k__BackingField;
    [CompilerGeneratedAttribute]
private NullabilityInfo[] <GenericTypeArguments>k__BackingField;
    public Type Type { get; }
    public NullabilityState ReadState { get; internal set; }
    public NullabilityState WriteState { get; internal set; }
    [NullableAttribute("2")]
public NullabilityInfo ElementType { get; }
    public NullabilityInfo[] GenericTypeArguments { get; }
    internal NullabilityInfo(Type type, NullabilityState readState, NullabilityState writeState, NullabilityInfo elementType, NullabilityInfo[] typeArguments);
    [CompilerGeneratedAttribute]
public Type get_Type();
    [CompilerGeneratedAttribute]
public NullabilityState get_ReadState();
    [CompilerGeneratedAttribute]
internal void set_ReadState(NullabilityState value);
    [CompilerGeneratedAttribute]
public NullabilityState get_WriteState();
    [CompilerGeneratedAttribute]
internal void set_WriteState(NullabilityState value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public NullabilityInfo get_ElementType();
    [CompilerGeneratedAttribute]
public NullabilityInfo[] get_GenericTypeArguments();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class System.Reflection.NullabilityInfoContext : object {
    private static string CompilerServicesNameSpace;
    private Dictionary`2<Module, NotAnnotatedStatus> _publicOnlyModules;
    private Dictionary`2<MemberInfo, NullabilityState> _context;
    [CompilerGeneratedAttribute]
private static bool <IsSupported>k__BackingField;
    internal static bool IsSupported { get; }
    private static NullabilityInfoContext();
    [CompilerGeneratedAttribute]
internal static bool get_IsSupported();
    [NullableContextAttribute("2")]
private Nullable`1<NullabilityState> GetNullableContext(MemberInfo memberInfo);
    public NullabilityInfo Create(ParameterInfo parameterInfo);
    private void CheckParameterMetadataType(ParameterInfo parameter, NullabilityInfo nullability);
    private static ParameterInfo GetMetaParameter(MethodBase metaMethod, ParameterInfo parameter);
    private static MethodInfo GetMethodMetadataDefinition(MethodInfo method);
    private static void CheckNullabilityAttributes(NullabilityInfo nullability, IList`1<CustomAttributeData> attributes);
    public NullabilityInfo Create(PropertyInfo propertyInfo);
    private bool IsPrivateOrInternalMethodAndAnnotationDisabled(MethodBase method);
    public NullabilityInfo Create(EventInfo eventInfo);
    public NullabilityInfo Create(FieldInfo fieldInfo);
    private static void EnsureIsSupported();
    private bool IsPrivateOrInternalFieldAndAnnotationDisabled(FieldInfo fieldInfo);
    private bool IsPublicOnly(bool isPrivate, bool isFamilyAndAssembly, bool isAssembly, Module module);
    private static NotAnnotatedStatus PopulateAnnotationInfo(IList`1<CustomAttributeData> customAttributes);
    private NullabilityInfo GetNullabilityInfo(MemberInfo memberInfo, Type type, NullableAttributeStateParser parser);
    private NullabilityInfo GetNullabilityInfo(MemberInfo memberInfo, Type type, NullableAttributeStateParser parser, Int32& index);
    private static NullableAttributeStateParser CreateParser(IList`1<CustomAttributeData> customAttributes);
    private void TryLoadGenericMetaTypeNullability(MemberInfo memberInfo, NullabilityInfo nullability);
    private static MemberInfo GetMemberMetadataDefinition(MemberInfo member);
    private static Type GetPropertyMetaType(PropertyInfo property);
    private void CheckGenericParameters(NullabilityInfo nullability, MemberInfo metaMember, Type metaType, Type reflectedType);
    private bool TryUpdateGenericParameterNullability(NullabilityInfo nullability, Type genericParameter, Type reflectedType);
    private bool TryUpdateGenericTypeParameterNullabilityFromReflectedType(NullabilityInfo nullability, Type genericParameter, Type context, Type reflectedType);
    private static bool TryPopulateNullabilityInfo(NullabilityInfo nullability, NullableAttributeStateParser parser, Int32& index);
    [NullableContextAttribute("2")]
private static NullabilityState TranslateByte(object value);
    private static NullabilityState TranslateByte(byte b);
    private static bool IsValueTypeOrValueTypeByRef(Type type);
    [CompilerGeneratedAttribute]
internal static int <TryUpdateGenericTypeParameterNullabilityFromReflectedType>g__CountNullabilityStates|29_0(Type type);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class System.Reflection.NullabilityInfoExtensions : object {
    private static ConcurrentDictionary`2<ParameterInfo, NullabilityInfo> parameterCache;
    private static ConcurrentDictionary`2<PropertyInfo, NullabilityInfo> propertyCache;
    private static ConcurrentDictionary`2<EventInfo, NullabilityInfo> eventCache;
    private static ConcurrentDictionary`2<FieldInfo, NullabilityInfo> fieldCache;
    private static NullabilityInfoExtensions();
    [ExtensionAttribute]
internal static NullabilityInfo GetNullabilityInfo(MemberInfo info);
    [ExtensionAttribute]
internal static NullabilityState GetNullability(MemberInfo info);
    [ExtensionAttribute]
internal static bool IsNullable(MemberInfo info);
    [ExtensionAttribute]
internal static NullabilityInfo GetNullabilityInfo(FieldInfo info);
    [ExtensionAttribute]
internal static NullabilityState GetNullability(FieldInfo info);
    [ExtensionAttribute]
internal static bool IsNullable(FieldInfo info);
    [ExtensionAttribute]
internal static NullabilityInfo GetNullabilityInfo(EventInfo info);
    [ExtensionAttribute]
internal static NullabilityState GetNullability(EventInfo info);
    [ExtensionAttribute]
internal static bool IsNullable(EventInfo info);
    [ExtensionAttribute]
internal static NullabilityInfo GetNullabilityInfo(PropertyInfo info);
    [ExtensionAttribute]
internal static NullabilityState GetNullability(PropertyInfo info);
    [ExtensionAttribute]
internal static bool IsNullable(PropertyInfo info);
    [ExtensionAttribute]
internal static NullabilityInfo GetNullabilityInfo(ParameterInfo info);
    [ExtensionAttribute]
internal static NullabilityState GetNullability(ParameterInfo info);
    [ExtensionAttribute]
internal static bool IsNullable(ParameterInfo info);
    private static NullabilityState GetReadOrWriteState(NullabilityInfo nullability);
    private static NullabilityState GetKnownState(string name, NullabilityInfo nullability);
    private static bool IsNullable(string name, NullabilityInfo nullability);
    internal static MemberInfo GetMemberWithSameMetadataDefinitionAs(Type type, MemberInfo member);
    [ExtensionAttribute]
private static bool HasSameMetadataDefinitionAs(MemberInfo target, MemberInfo other);
    [ExtensionAttribute]
internal static bool IsGenericMethodParameter(Type target);
}
internal enum System.Reflection.NullabilityState : Enum {
    public int value__;
    public static NullabilityState Unknown;
    public static NullabilityState NotNull;
    public static NullabilityState Nullable;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("2048")]
[ExcludeFromCodeCoverageAttribute]
internal class System.Runtime.CompilerServices.CallerArgumentExpressionAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <ParameterName>k__BackingField;
    public string ParameterName { get; }
    public CallerArgumentExpressionAttribute(string parameterName);
    [CompilerGeneratedAttribute]
public string get_ParameterName();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("1036")]
[ExcludeFromCodeCoverageAttribute]
internal class System.Runtime.CompilerServices.CollectionBuilderAttribute : Attribute {
    [CompilerGeneratedAttribute]
private Type <BuilderType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MethodName>k__BackingField;
    public Type BuilderType { get; }
    public string MethodName { get; }
    public CollectionBuilderAttribute(Type builderType, string methodName);
    [CompilerGeneratedAttribute]
public Type get_BuilderType();
    [CompilerGeneratedAttribute]
public string get_MethodName();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("32767")]
[ExcludeFromCodeCoverageAttribute]
internal class System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <FeatureName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsOptional>k__BackingField;
    public static string RefStructs;
    public static string RequiredMembers;
    public string FeatureName { get; }
    public bool IsOptional { get; public set; }
    public CompilerFeatureRequiredAttribute(string featureName);
    [CompilerGeneratedAttribute]
public string get_FeatureName();
    [CompilerGeneratedAttribute]
public bool get_IsOptional();
    [CompilerGeneratedAttribute]
public void set_IsOptional(bool value);
}
[AttributeUsageAttribute("1")]
[ExcludeFromCodeCoverageAttribute]
[ConditionalAttribute("MULTI_TARGETING_SUPPORT_ATTRIBUTES")]
internal class System.Runtime.CompilerServices.DisableRuntimeMarshallingAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("2048")]
[ExcludeFromCodeCoverageAttribute]
internal class System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute : Attribute {
    [CompilerGeneratedAttribute]
private String[] <Arguments>k__BackingField;
    public String[] Arguments { get; }
    public InterpolatedStringHandlerArgumentAttribute(string argument);
    public InterpolatedStringHandlerArgumentAttribute(String[] arguments);
    [CompilerGeneratedAttribute]
public String[] get_Arguments();
}
[AttributeUsageAttribute("12")]
[ExcludeFromCodeCoverageAttribute]
internal class System.Runtime.CompilerServices.InterpolatedStringHandlerAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.IsByRefLikeAttribute : Attribute {
}
[EditorBrowsableAttribute("1")]
[ExcludeFromCodeCoverageAttribute]
internal static class System.Runtime.CompilerServices.IsExternalInit : object {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.IsReadOnlyAttribute : Attribute {
}
[AttributeUsageAttribute("64")]
[ExcludeFromCodeCoverageAttribute]
internal class System.Runtime.CompilerServices.ModuleInitializerAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
[AttributeUsageAttribute("396")]
[ExcludeFromCodeCoverageAttribute]
internal class System.Runtime.CompilerServices.RequiredMemberAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
[EditorBrowsableAttribute("1")]
[ExcludeFromCodeCoverageAttribute]
internal class System.Runtime.CompilerServices.RequiresLocationAttribute : Attribute {
}
[AttributeUsageAttribute("1774")]
[ExcludeFromCodeCoverageAttribute]
internal class System.Runtime.CompilerServices.SkipLocalsInitAttribute : Attribute {
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[AttributeUsageAttribute("64")]
[ExcludeFromCodeCoverageAttribute]
[ConditionalAttribute("MULTI_TARGETING_SUPPORT_ATTRIBUTES")]
internal class System.Runtime.CompilerServices.UnsafeAccessorAttribute : Attribute {
    [CompilerGeneratedAttribute]
private UnsafeAccessorKind <Kind>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public UnsafeAccessorKind Kind { get; }
    public string Name { get; public set; }
    public UnsafeAccessorAttribute(UnsafeAccessorKind kind);
    [CompilerGeneratedAttribute]
public UnsafeAccessorKind get_Kind();
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
}
internal enum System.Runtime.CompilerServices.UnsafeAccessorKind : Enum {
    public int value__;
    public static UnsafeAccessorKind Constructor;
    public static UnsafeAccessorKind Method;
    public static UnsafeAccessorKind StaticMethod;
    public static UnsafeAccessorKind Field;
    public static UnsafeAccessorKind StaticField;
}
[AttributeUsageAttribute("8")]
[ExcludeFromCodeCoverageAttribute]
[ConditionalAttribute("MULTI_TARGETING_SUPPORT_ATTRIBUTES")]
internal class System.Runtime.CompilerServices2.InlineArrayAttribute : Attribute {
    [CompilerGeneratedAttribute]
private int <Length>k__BackingField;
    public int Length { get; }
    public InlineArrayAttribute(int length);
    [CompilerGeneratedAttribute]
public int get_Length();
}
[AttributeUsageAttribute("64")]
[ExcludeFromCodeCoverageAttribute]
[ConditionalAttribute("MULTI_TARGETING_SUPPORT_ATTRIBUTES")]
internal class System.Runtime.InteropServices.SuppressGCTransitionAttribute : Attribute {
}
[AttributeUsageAttribute("64")]
[ExcludeFromCodeCoverageAttribute]
[ConditionalAttribute("MULTI_TARGETING_SUPPORT_ATTRIBUTES")]
internal class System.Runtime.InteropServices.UnmanagedCallersOnlyAttribute : Attribute {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Type[] CallConvs;
    [NullableAttribute("2")]
public string EntryPoint;
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[AttributeUsageAttribute("2047")]
[ExcludeFromCodeCoverageAttribute]
[ConditionalAttribute("MULTI_TARGETING_SUPPORT_ATTRIBUTES")]
internal class System.Runtime.Versioning.ObsoletedOSPlatformAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    public string Message { get; }
    public string Url { get; public set; }
    [NullableContextAttribute("1")]
public ObsoletedOSPlatformAttribute(string platformName);
    [NullableContextAttribute("1")]
public ObsoletedOSPlatformAttribute(string platformName, string message);
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
public void set_Url(string value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[AttributeUsageAttribute("6143")]
[ExcludeFromCodeCoverageAttribute]
internal class System.Runtime.Versioning.RequiresPreviewFeaturesAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    public string Message { get; }
    public string Url { get; public set; }
    public RequiresPreviewFeaturesAttribute(string message);
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
public void set_Url(string value);
}
[AttributeUsageAttribute("2047")]
[ExcludeFromCodeCoverageAttribute]
[ConditionalAttribute("MULTI_TARGETING_SUPPORT_ATTRIBUTES")]
internal class System.Runtime.Versioning.SupportedOSPlatformAttribute : Attribute {
    [NullableContextAttribute("1")]
public SupportedOSPlatformAttribute(string platformName);
}
[AttributeUsageAttribute("448")]
[ExcludeFromCodeCoverageAttribute]
[ConditionalAttribute("MULTI_TARGETING_SUPPORT_ATTRIBUTES")]
internal class System.Runtime.Versioning.SupportedOSPlatformGuardAttribute : Attribute {
    [NullableContextAttribute("1")]
public SupportedOSPlatformGuardAttribute(string platformName);
}
[AttributeUsageAttribute("1")]
[ExcludeFromCodeCoverageAttribute]
[ConditionalAttribute("MULTI_TARGETING_SUPPORT_ATTRIBUTES")]
internal class System.Runtime.Versioning.TargetPlatformAttribute : Attribute {
    [NullableContextAttribute("1")]
public TargetPlatformAttribute(string platformName);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[AttributeUsageAttribute("2047")]
[ExcludeFromCodeCoverageAttribute]
[ConditionalAttribute("MULTI_TARGETING_SUPPORT_ATTRIBUTES")]
internal class System.Runtime.Versioning.UnsupportedOSPlatformAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    public string Message { get; }
    [NullableContextAttribute("1")]
public UnsupportedOSPlatformAttribute(string platformName);
    [NullableContextAttribute("1")]
public UnsupportedOSPlatformAttribute(string platformName, string message);
    [CompilerGeneratedAttribute]
public string get_Message();
}
[AttributeUsageAttribute("448")]
[ExcludeFromCodeCoverageAttribute]
[ConditionalAttribute("MULTI_TARGETING_SUPPORT_ATTRIBUTES")]
internal class System.Runtime.Versioning.UnsupportedOSPlatformGuardAttribute : Attribute {
    [NullableContextAttribute("1")]
public UnsupportedOSPlatformGuardAttribute(string platformName);
}
