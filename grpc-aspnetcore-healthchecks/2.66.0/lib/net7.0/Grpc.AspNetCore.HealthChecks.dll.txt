[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Grpc.AspNetCore.HealthChecks.GrpcHealthChecksOptions : object {
    [CompilerGeneratedAttribute]
private ServiceMappingCollection <Services>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseHealthChecksCache>k__BackingField;
    public ServiceMappingCollection Services { get; }
    public bool UseHealthChecksCache { get; public set; }
    [CompilerGeneratedAttribute]
public ServiceMappingCollection get_Services();
    [CompilerGeneratedAttribute]
public bool get_UseHealthChecksCache();
    [CompilerGeneratedAttribute]
public void set_UseHealthChecksCache(bool value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Grpc.AspNetCore.HealthChecks.GrpcHealthChecksPublisher : object {
    private HealthServiceImpl _healthService;
    private ILogger _logger;
    private GrpcHealthChecksOptions _options;
    public GrpcHealthChecksPublisher(HealthServiceImpl healthService, IOptions`1<GrpcHealthChecksOptions> options, ILoggerFactory loggerFactory);
    public sealed virtual Task PublishAsync(HealthReport report, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Grpc.AspNetCore.HealthChecks.HealthCheckMapContext : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <Tags>k__BackingField;
    public string Name { get; }
    public IEnumerable`1<string> Tags { get; }
    public HealthCheckMapContext(string name, IEnumerable`1<string> tags);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public IEnumerable`1<string> get_Tags();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ObsoleteAttribute("HealthResult is obsolete and will be removed in a future release. Use HealthCheckMapContext instead.")]
public class Grpc.AspNetCore.HealthChecks.HealthResult : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <Tags>k__BackingField;
    [CompilerGeneratedAttribute]
private HealthStatus <Status>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyDictionary`2<string, object> <Data>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private Exception <Exception>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <Duration>k__BackingField;
    public string Name { get; }
    public IEnumerable`1<string> Tags { get; }
    public HealthStatus Status { get; }
    [NullableAttribute("2")]
public string Description { get; }
    public IReadOnlyDictionary`2<string, object> Data { get; }
    [NullableAttribute("2")]
public Exception Exception { get; }
    public TimeSpan Duration { get; }
    public HealthResult(string name, IEnumerable`1<string> tags, HealthStatus status, string description, TimeSpan duration, Exception exception, IReadOnlyDictionary`2<string, object> data);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public IEnumerable`1<string> get_Tags();
    [CompilerGeneratedAttribute]
public HealthStatus get_Status();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public IReadOnlyDictionary`2<string, object> get_Data();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public Exception get_Exception();
    [CompilerGeneratedAttribute]
public TimeSpan get_Duration();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Grpc.AspNetCore.HealthChecks.Internal.HealthServiceIntegration : HealthBase {
    private HealthCheckOptions _healthCheckOptions;
    private GrpcHealthChecksOptions _grpcHealthCheckOptions;
    private HealthServiceImpl _healthServiceImpl;
    private HealthCheckService _healthCheckService;
    public HealthServiceIntegration(HealthServiceImpl healthServiceImpl, IOptions`1<HealthCheckOptions> healthCheckOptions, IOptions`1<GrpcHealthChecksOptions> grpcHealthCheckOptions, HealthCheckService healthCheckService);
    public virtual Task`1<HealthCheckResponse> Check(HealthCheckRequest request, ServerCallContext context);
    public virtual Task Watch(HealthCheckRequest request, IServerStreamWriter`1<HealthCheckResponse> responseStream, ServerCallContext context);
    [AsyncStateMachineAttribute("Grpc.AspNetCore.HealthChecks.Internal.HealthServiceIntegration/<GetHealthCheckResponseAsync>d__7")]
private Task`1<HealthCheckResponse> GetHealthCheckResponseAsync(string service, bool throwOnNotFound, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Grpc.AspNetCore.HealthChecks.ServiceMapping : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`2<HealthCheckMapContext, bool> <HealthCheckPredicate>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`2<HealthResult, bool> <Predicate>k__BackingField;
    public string Name { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Func`2<HealthCheckMapContext, bool> HealthCheckPredicate { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ObsoleteAttribute("This member is obsolete and will be removed in the future. Use HealthCheckPredicate to map service names to .NET health checks.")]
public Func`2<HealthResult, bool> Predicate { get; }
    [ObsoleteAttribute("This constructor is obsolete and will be removed in the future. Use ServiceMapping(string name, Func<HealthCheckRegistration, bool> predicate) to map service names to .NET health checks.")]
public ServiceMapping(string name, Func`2<HealthResult, bool> predicate);
    public ServiceMapping(string name, Func`2<HealthCheckMapContext, bool> predicate);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public Func`2<HealthCheckMapContext, bool> get_HealthCheckPredicate();
    [CompilerGeneratedAttribute]
public Func`2<HealthResult, bool> get_Predicate();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Grpc.AspNetCore.HealthChecks.ServiceMappingCollection : object {
    private ServiceMappingKeyedCollection _mappings;
    public int Count { get; }
    private bool System.Collections.Generic.ICollection<Grpc.AspNetCore.HealthChecks.ServiceMapping>.IsReadOnly { get; }
    public sealed virtual int get_Count();
    private sealed virtual override bool System.Collections.Generic.ICollection<Grpc.AspNetCore.HealthChecks.ServiceMapping>.get_IsReadOnly();
    internal bool TryGetServiceMapping(string name, ServiceMapping& serviceMapping);
    public sealed virtual void Clear();
    public void Remove(string name);
    public sealed virtual void Add(ServiceMapping service);
    [ObsoleteAttribute("This method is obsolete and will be removed in the future. Use Map(string name, Func<HealthCheckRegistration, bool> predicate) to map service names to .NET health checks.")]
public void MapService(string name, Func`2<HealthResult, bool> predicate);
    public void Map(string name, Func`2<HealthCheckMapContext, bool> predicate);
    public sealed virtual IEnumerator`1<ServiceMapping> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override bool System.Collections.Generic.ICollection<Grpc.AspNetCore.HealthChecks.ServiceMapping>.Contains(ServiceMapping item);
    private sealed virtual override void System.Collections.Generic.ICollection<Grpc.AspNetCore.HealthChecks.ServiceMapping>.CopyTo(ServiceMapping[] array, int arrayIndex);
    private sealed virtual override bool System.Collections.Generic.ICollection<Grpc.AspNetCore.HealthChecks.ServiceMapping>.Remove(ServiceMapping item);
}
internal static class Grpc.Shared.ArgumentNullThrowHelper : object {
    [NullableContextAttribute("2")]
public static void ThrowIfNull(object argument, string paramName);
}
internal static class HealthChecksStatusHelpers : object {
    public static ValueTuple`2<ServingStatus, int> GetStatus(IEnumerable`1<KeyValuePair`2<string, HealthReportEntry>> results);
}
[ExtensionAttribute]
public static class Microsoft.AspNetCore.Builder.GrpcHealthChecksEndpointRouteBuilderExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static GrpcServiceEndpointConventionBuilder MapGrpcHealthChecksService(IEndpointRouteBuilder builder);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.Extensions.DependencyInjection.GrpcHealthChecksServiceExtensions : object {
    [ExtensionAttribute]
public static IHealthChecksBuilder AddGrpcHealthChecks(IServiceCollection services);
    [ExtensionAttribute]
public static IHealthChecksBuilder AddGrpcHealthChecks(IServiceCollection services, Action`1<GrpcHealthChecksOptions> configure);
    private static IHealthChecksBuilder AddGrpcHealthChecksCore(IServiceCollection services);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
