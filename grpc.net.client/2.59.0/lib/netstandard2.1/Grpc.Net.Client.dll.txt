[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Grpc.Net.Client.Configuration.ConfigObject : object {
    [CompilerGeneratedAttribute]
private IDictionary`2<string, object> <Inner>k__BackingField;
    public IDictionary`2<string, object> Inner { get; }
    private object Grpc.Net.Client.Internal.Configuration.IConfigValue.Inner { get; }
    internal ConfigObject(IDictionary`2<string, object> inner);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, object> get_Inner();
    private sealed virtual override object Grpc.Net.Client.Internal.Configuration.IConfigValue.get_Inner();
    [NullableContextAttribute("2")]
internal T GetValue(string key);
    [NullableContextAttribute("2")]
internal void SetValue(string key, T value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Grpc.Net.Client.Configuration.HedgingPolicy : ConfigObject {
    internal static string MaxAttemptsPropertyName;
    internal static string HedgingDelayPropertyName;
    internal static string NonFatalStatusCodesPropertyName;
    private ConfigProperty`2<Values`2<StatusCode, object>, IList`1<object>> _nonFatalStatusCodes;
    public Nullable`1<int> MaxAttempts { get; public set; }
    public Nullable`1<TimeSpan> HedgingDelay { get; public set; }
    public IList`1<StatusCode> NonFatalStatusCodes { get; }
    internal HedgingPolicy(IDictionary`2<string, object> inner);
    public Nullable`1<int> get_MaxAttempts();
    public void set_MaxAttempts(Nullable`1<int> value);
    public Nullable`1<TimeSpan> get_HedgingDelay();
    public void set_HedgingDelay(Nullable`1<TimeSpan> value);
    public IList`1<StatusCode> get_NonFatalStatusCodes();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Grpc.Net.Client.Configuration.LoadBalancingConfig : ConfigObject {
    public static string PickFirstPolicyName;
    public static string RoundRobinPolicyName;
    public string PolicyName { get; }
    public LoadBalancingConfig(string loadBalancingPolicyName);
    internal LoadBalancingConfig(IDictionary`2<string, object> inner);
    public string get_PolicyName();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Grpc.Net.Client.Configuration.MethodConfig : ConfigObject {
    private static string NamePropertyName;
    private static string RetryPolicyPropertyName;
    private static string HedgingPolicyPropertyName;
    private ConfigProperty`2<Values`2<MethodName, object>, IList`1<object>> _names;
    private ConfigProperty`2<RetryPolicy, IDictionary`2<string, object>> _retryPolicy;
    private ConfigProperty`2<HedgingPolicy, IDictionary`2<string, object>> _hedgingPolicy;
    [NullableAttribute("2")]
public RetryPolicy RetryPolicy { get; public set; }
    [NullableAttribute("2")]
public HedgingPolicy HedgingPolicy { get; public set; }
    public IList`1<MethodName> Names { get; }
    internal MethodConfig(IDictionary`2<string, object> inner);
    [NullableContextAttribute("2")]
public RetryPolicy get_RetryPolicy();
    [NullableContextAttribute("2")]
public void set_RetryPolicy(RetryPolicy value);
    [NullableContextAttribute("2")]
public HedgingPolicy get_HedgingPolicy();
    [NullableContextAttribute("2")]
public void set_HedgingPolicy(HedgingPolicy value);
    public IList`1<MethodName> get_Names();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Grpc.Net.Client.Configuration.MethodName : ConfigObject {
    [NullableAttribute("1")]
public static MethodName Default;
    [NullableAttribute("1")]
private static string ServicePropertyName;
    [NullableAttribute("1")]
private static string MethodPropertyName;
    public string Service { get; public set; }
    public string Method { get; public set; }
    [NullableContextAttribute("1")]
internal MethodName(IDictionary`2<string, object> inner);
    private static MethodName();
    public string get_Service();
    public void set_Service(string value);
    public string get_Method();
    public void set_Method(string value);
}
public class Grpc.Net.Client.Configuration.PickFirstConfig : LoadBalancingConfig {
    [NullableContextAttribute("1")]
internal PickFirstConfig(IDictionary`2<string, object> inner);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Grpc.Net.Client.Configuration.RetryPolicy : ConfigObject {
    internal static string MaxAttemptsPropertyName;
    internal static string InitialBackoffPropertyName;
    internal static string MaxBackoffPropertyName;
    internal static string BackoffMultiplierPropertyName;
    internal static string RetryableStatusCodesPropertyName;
    private ConfigProperty`2<Values`2<StatusCode, object>, IList`1<object>> _retryableStatusCodes;
    public Nullable`1<int> MaxAttempts { get; public set; }
    public Nullable`1<TimeSpan> InitialBackoff { get; public set; }
    public Nullable`1<TimeSpan> MaxBackoff { get; public set; }
    public Nullable`1<double> BackoffMultiplier { get; public set; }
    public IList`1<StatusCode> RetryableStatusCodes { get; }
    internal RetryPolicy(IDictionary`2<string, object> inner);
    public Nullable`1<int> get_MaxAttempts();
    public void set_MaxAttempts(Nullable`1<int> value);
    public Nullable`1<TimeSpan> get_InitialBackoff();
    public void set_InitialBackoff(Nullable`1<TimeSpan> value);
    public Nullable`1<TimeSpan> get_MaxBackoff();
    public void set_MaxBackoff(Nullable`1<TimeSpan> value);
    public Nullable`1<double> get_BackoffMultiplier();
    public void set_BackoffMultiplier(Nullable`1<double> value);
    public IList`1<StatusCode> get_RetryableStatusCodes();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Grpc.Net.Client.Configuration.RetryThrottlingPolicy : ConfigObject {
    internal static string MaxTokensPropertyName;
    internal static string TokenRatioPropertyName;
    public Nullable`1<int> MaxTokens { get; public set; }
    public Nullable`1<double> TokenRatio { get; public set; }
    internal RetryThrottlingPolicy(IDictionary`2<string, object> inner);
    public Nullable`1<int> get_MaxTokens();
    public void set_MaxTokens(Nullable`1<int> value);
    public Nullable`1<double> get_TokenRatio();
    public void set_TokenRatio(Nullable`1<double> value);
}
public class Grpc.Net.Client.Configuration.RoundRobinConfig : LoadBalancingConfig {
    [NullableContextAttribute("1")]
internal RoundRobinConfig(IDictionary`2<string, object> inner);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Grpc.Net.Client.Configuration.ServiceConfig : ConfigObject {
    private static string MethodConfigPropertyName;
    private static string LoadBalancingConfigPropertyName;
    private static string RetryThrottlingPropertyName;
    private ConfigProperty`2<Values`2<MethodConfig, object>, IList`1<object>> _methods;
    private ConfigProperty`2<Values`2<LoadBalancingConfig, object>, IList`1<object>> _loadBalancingConfigs;
    private ConfigProperty`2<RetryThrottlingPolicy, IDictionary`2<string, object>> _retryThrottling;
    public IList`1<LoadBalancingConfig> LoadBalancingConfigs { get; }
    public IList`1<MethodConfig> MethodConfigs { get; }
    [NullableAttribute("2")]
public RetryThrottlingPolicy RetryThrottling { get; public set; }
    internal ServiceConfig(IDictionary`2<string, object> inner);
    private static LoadBalancingConfig CreateLoadBalancingConfig(IDictionary`2<string, object> s);
    public IList`1<LoadBalancingConfig> get_LoadBalancingConfigs();
    public IList`1<MethodConfig> get_MethodConfigs();
    [NullableContextAttribute("2")]
public RetryThrottlingPolicy get_RetryThrottling();
    [NullableContextAttribute("2")]
public void set_RetryThrottling(RetryThrottlingPolicy value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DebuggerDisplayAttribute("{DebuggerToString(),nq}")]
public class Grpc.Net.Client.GrpcChannel : ChannelBase {
    internal static int DefaultMaxReceiveMessageSize;
    internal static int DefaultMaxRetryAttempts;
    internal static long DefaultMaxRetryBufferSize;
    internal static long DefaultMaxRetryBufferPerCallSize;
    private object _lock;
    private ConcurrentDictionary`2<IMethod, GrpcMethodInfo> _methodInfoCache;
    private Func`2<IMethod, GrpcMethodInfo> _createMethodInfoFunc;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Dictionary`2<MethodKey, MethodConfig> _serviceConfigMethods;
    private bool _isSecure;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<CallCredentials> _callCredentials;
    private HashSet`1<IDisposable> _activeCalls;
    [CompilerGeneratedAttribute]
private Uri <Address>k__BackingField;
    [CompilerGeneratedAttribute]
private HttpMessageInvoker <HttpInvoker>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TimeSpan> <ConnectTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TimeSpan> <ConnectionIdleTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private HttpHandlerType <HttpHandlerType>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <InitialReconnectBackoff>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TimeSpan> <MaxReconnectBackoff>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <SendMaxMessageSize>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <ReceiveMaxMessageSize>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <MaxRetryAttempts>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <MaxRetryBufferSize>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <MaxRetryBufferPerCallSize>k__BackingField;
    [CompilerGeneratedAttribute]
private ILoggerFactory <LoggerFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private ILogger <Logger>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ThrowOperationCanceledOnCancellation>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UnsafeUseInsecureChannelCallCredentials>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, ICompressionProvider> <CompressionProviders>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MessageAcceptEncoding>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Disposed>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private ChannelRetryThrottling <RetryThrottling>k__BackingField;
    internal long CurrentRetryBufferSize;
    internal ISystemClock Clock;
    internal IOperatingSystem OperatingSystem;
    internal IRandomGenerator RandomGenerator;
    internal IDebugger Debugger;
    internal bool DisableClientDeadline;
    internal long MaxTimerDueTime;
    private bool _shouldDisposeHttpClient;
    internal Uri Address { get; }
    internal HttpMessageInvoker HttpInvoker { get; }
    internal Nullable`1<TimeSpan> ConnectTimeout { get; }
    internal Nullable`1<TimeSpan> ConnectionIdleTimeout { get; }
    internal HttpHandlerType HttpHandlerType { get; }
    internal TimeSpan InitialReconnectBackoff { get; }
    internal Nullable`1<TimeSpan> MaxReconnectBackoff { get; }
    internal Nullable`1<int> SendMaxMessageSize { get; }
    internal Nullable`1<int> ReceiveMaxMessageSize { get; }
    internal Nullable`1<int> MaxRetryAttempts { get; }
    internal Nullable`1<long> MaxRetryBufferSize { get; }
    internal Nullable`1<long> MaxRetryBufferPerCallSize { get; }
    internal ILoggerFactory LoggerFactory { get; }
    internal ILogger Logger { get; }
    internal bool ThrowOperationCanceledOnCancellation { get; }
    internal bool UnsafeUseInsecureChannelCallCredentials { get; }
    internal bool IsSecure { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal List`1<CallCredentials> CallCredentials { get; }
    internal Dictionary`2<string, ICompressionProvider> CompressionProviders { get; }
    internal string MessageAcceptEncoding { get; }
    internal bool Disposed { get; private set; }
    [NullableAttribute("2")]
internal ChannelRetryThrottling RetryThrottling { get; }
    internal GrpcChannel(Uri address, GrpcChannelOptions channelOptions);
    [CompilerGeneratedAttribute]
internal Uri get_Address();
    [CompilerGeneratedAttribute]
internal HttpMessageInvoker get_HttpInvoker();
    [CompilerGeneratedAttribute]
internal Nullable`1<TimeSpan> get_ConnectTimeout();
    [CompilerGeneratedAttribute]
internal Nullable`1<TimeSpan> get_ConnectionIdleTimeout();
    [CompilerGeneratedAttribute]
internal HttpHandlerType get_HttpHandlerType();
    [CompilerGeneratedAttribute]
internal TimeSpan get_InitialReconnectBackoff();
    [CompilerGeneratedAttribute]
internal Nullable`1<TimeSpan> get_MaxReconnectBackoff();
    [CompilerGeneratedAttribute]
internal Nullable`1<int> get_SendMaxMessageSize();
    [CompilerGeneratedAttribute]
internal Nullable`1<int> get_ReceiveMaxMessageSize();
    [CompilerGeneratedAttribute]
internal Nullable`1<int> get_MaxRetryAttempts();
    [CompilerGeneratedAttribute]
internal Nullable`1<long> get_MaxRetryBufferSize();
    [CompilerGeneratedAttribute]
internal Nullable`1<long> get_MaxRetryBufferPerCallSize();
    [CompilerGeneratedAttribute]
internal ILoggerFactory get_LoggerFactory();
    [CompilerGeneratedAttribute]
internal ILogger get_Logger();
    [CompilerGeneratedAttribute]
internal bool get_ThrowOperationCanceledOnCancellation();
    [CompilerGeneratedAttribute]
internal bool get_UnsafeUseInsecureChannelCallCredentials();
    internal bool get_IsSecure();
    internal List`1<CallCredentials> get_CallCredentials();
    [CompilerGeneratedAttribute]
internal Dictionary`2<string, ICompressionProvider> get_CompressionProviders();
    [CompilerGeneratedAttribute]
internal string get_MessageAcceptEncoding();
    [CompilerGeneratedAttribute]
internal bool get_Disposed();
    [CompilerGeneratedAttribute]
private void set_Disposed(bool value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal ChannelRetryThrottling get_RetryThrottling();
    private void ResolveCredentials(GrpcChannelOptions channelOptions, Boolean& isSecure, List`1& callCredentials);
    private static bool IsHttpOrHttpsAddress(Uri address);
    private static HttpHandlerContext CalculateHandlerContext(ILogger logger, Uri address, bool isSecure, GrpcChannelOptions channelOptions);
    private ChannelRetryThrottling CreateChannelRetryThrottling(RetryThrottlingPolicy retryThrottling);
    private static Dictionary`2<MethodKey, MethodConfig> CreateServiceConfigMethods(ServiceConfig serviceConfig);
    private HttpMessageInvoker CreateInternalHttpInvoker(HttpMessageHandler handler);
    internal void RegisterActiveCall(IDisposable grpcCall);
    internal void FinishActiveCall(IDisposable grpcCall);
    internal GrpcMethodInfo GetCachedGrpcMethodInfo(IMethod method);
    private GrpcMethodInfo CreateMethodInfo(IMethod method);
    private MethodConfig ResolveMethodConfig(IMethod method);
    private static Dictionary`2<string, ICompressionProvider> ResolveCompressionProviders(IList`1<ICompressionProvider> compressionProviders);
    private void ValidateChannelCredentials();
    public virtual CallInvoker CreateCallInvoker();
    public static GrpcChannel ForAddress(string address);
    public static GrpcChannel ForAddress(string address, GrpcChannelOptions channelOptions);
    public static GrpcChannel ForAddress(Uri address);
    public static GrpcChannel ForAddress(Uri address, GrpcChannelOptions channelOptions);
    public sealed virtual void Dispose();
    internal bool TryAddToRetryBuffer(long messageSize);
    internal void RemoveFromRetryBuffer(long messageSize);
    internal int GetRandomNumber(int minValue, int maxValue);
    internal IDisposable[] GetActiveCalls();
    internal string DebuggerToString();
    [CompilerGeneratedAttribute]
internal static InvalidOperationException <CreateChannelRetryThrottling>g__CreateException|88_0(string propertyName);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Grpc.Net.Client.GrpcChannelOptions : object {
    [CompilerGeneratedAttribute]
private ChannelCredentials <Credentials>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <MaxSendMessageSize>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <MaxReceiveMessageSize>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <MaxRetryAttempts>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <MaxRetryBufferSize>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <MaxRetryBufferPerCallSize>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IList`1<ICompressionProvider> <CompressionProviders>k__BackingField;
    [CompilerGeneratedAttribute]
private ILoggerFactory <LoggerFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private HttpClient <HttpClient>k__BackingField;
    [CompilerGeneratedAttribute]
private HttpMessageHandler <HttpHandler>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DisposeHttpClient>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ThrowOperationCanceledOnCancellation>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UnsafeUseInsecureChannelCallCredentials>k__BackingField;
    [CompilerGeneratedAttribute]
private ServiceConfig <ServiceConfig>k__BackingField;
    [CompilerGeneratedAttribute]
private IServiceProvider <ServiceProvider>k__BackingField;
    public ChannelCredentials Credentials { get; public set; }
    public Nullable`1<int> MaxSendMessageSize { get; public set; }
    public Nullable`1<int> MaxReceiveMessageSize { get; public set; }
    public Nullable`1<int> MaxRetryAttempts { get; public set; }
    public Nullable`1<long> MaxRetryBufferSize { get; public set; }
    public Nullable`1<long> MaxRetryBufferPerCallSize { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IList`1<ICompressionProvider> CompressionProviders { get; public set; }
    public ILoggerFactory LoggerFactory { get; public set; }
    public HttpClient HttpClient { get; public set; }
    public HttpMessageHandler HttpHandler { get; public set; }
    public bool DisposeHttpClient { get; public set; }
    public bool ThrowOperationCanceledOnCancellation { get; public set; }
    public bool UnsafeUseInsecureChannelCallCredentials { get; public set; }
    public ServiceConfig ServiceConfig { get; public set; }
    public IServiceProvider ServiceProvider { get; public set; }
    [CompilerGeneratedAttribute]
public ChannelCredentials get_Credentials();
    [CompilerGeneratedAttribute]
public void set_Credentials(ChannelCredentials value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_MaxSendMessageSize();
    [CompilerGeneratedAttribute]
public void set_MaxSendMessageSize(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_MaxReceiveMessageSize();
    [CompilerGeneratedAttribute]
public void set_MaxReceiveMessageSize(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_MaxRetryAttempts();
    [CompilerGeneratedAttribute]
public void set_MaxRetryAttempts(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<long> get_MaxRetryBufferSize();
    [CompilerGeneratedAttribute]
public void set_MaxRetryBufferSize(Nullable`1<long> value);
    [CompilerGeneratedAttribute]
public Nullable`1<long> get_MaxRetryBufferPerCallSize();
    [CompilerGeneratedAttribute]
public void set_MaxRetryBufferPerCallSize(Nullable`1<long> value);
    [CompilerGeneratedAttribute]
public IList`1<ICompressionProvider> get_CompressionProviders();
    [CompilerGeneratedAttribute]
public void set_CompressionProviders(IList`1<ICompressionProvider> value);
    [CompilerGeneratedAttribute]
public ILoggerFactory get_LoggerFactory();
    [CompilerGeneratedAttribute]
public void set_LoggerFactory(ILoggerFactory value);
    [CompilerGeneratedAttribute]
public HttpClient get_HttpClient();
    [CompilerGeneratedAttribute]
public void set_HttpClient(HttpClient value);
    [CompilerGeneratedAttribute]
public HttpMessageHandler get_HttpHandler();
    [CompilerGeneratedAttribute]
public void set_HttpHandler(HttpMessageHandler value);
    [CompilerGeneratedAttribute]
public bool get_DisposeHttpClient();
    [CompilerGeneratedAttribute]
public void set_DisposeHttpClient(bool value);
    [CompilerGeneratedAttribute]
public bool get_ThrowOperationCanceledOnCancellation();
    [CompilerGeneratedAttribute]
public void set_ThrowOperationCanceledOnCancellation(bool value);
    [CompilerGeneratedAttribute]
public bool get_UnsafeUseInsecureChannelCallCredentials();
    [CompilerGeneratedAttribute]
public void set_UnsafeUseInsecureChannelCallCredentials(bool value);
    [CompilerGeneratedAttribute]
public ServiceConfig get_ServiceConfig();
    [CompilerGeneratedAttribute]
public void set_ServiceConfig(ServiceConfig value);
    [CompilerGeneratedAttribute]
public IServiceProvider get_ServiceProvider();
    [CompilerGeneratedAttribute]
public void set_ServiceProvider(IServiceProvider value);
    [NullableContextAttribute("1")]
internal T ResolveService(T defaultValue);
}
internal enum Grpc.Net.Client.HttpHandlerType : Enum {
    public int value__;
    public static HttpHandlerType SocketsHttpHandler;
    public static HttpHandlerType HttpClientHandler;
    public static HttpHandlerType WinHttpHandler;
    public static HttpHandlerType Custom;
}
internal class Grpc.Net.Client.Internal.CachedDebugger : object {
    [CompilerGeneratedAttribute]
private bool <IsAttached>k__BackingField;
    public bool IsAttached { get; }
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsAttached();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class Grpc.Net.Client.Internal.ClientStreamWriterBase`1 : object {
    [CompilerGeneratedAttribute]
private ILogger <Logger>k__BackingField;
    [CompilerGeneratedAttribute]
private object <WriteLock>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private Task <WriteTask>k__BackingField;
    protected ILogger Logger { get; }
    protected object WriteLock { get; }
    [NullableAttribute("2")]
protected Task WriteTask { get; protected set; }
    [NullableAttribute("2")]
public WriteOptions WriteOptions { get; public set; }
    protected bool IsWriteInProgressUnsynchronized { get; }
    protected ClientStreamWriterBase`1(ILogger logger);
    [CompilerGeneratedAttribute]
protected ILogger get_Logger();
    [CompilerGeneratedAttribute]
protected object get_WriteLock();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
protected Task get_WriteTask();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
protected void set_WriteTask(Task value);
    [NullableContextAttribute("2")]
public abstract virtual WriteOptions get_WriteOptions();
    [NullableContextAttribute("2")]
public abstract virtual void set_WriteOptions(WriteOptions value);
    public abstract virtual Task CompleteAsync();
    public sealed virtual Task WriteAsync(TRequest message);
    private sealed virtual override Task Grpc.Core.IAsyncStreamWriter<TRequest>.WriteAsync(TRequest message, CancellationToken cancellationToken);
    public abstract virtual Task WriteCoreAsync(TRequest message, CancellationToken cancellationToken);
    protected Task CreateErrorTask(string message);
    public void Dispose();
    protected bool get_IsWriteInProgressUnsynchronized();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Grpc.Net.Client.Internal.ClientStreamWriterBaseLog : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static Action`2<ILogger, Exception> _completingClientStream;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static Action`2<ILogger, Exception> _writeMessageError;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static Action`2<ILogger, Exception> _completeClientStreamError;
    private static ClientStreamWriterBaseLog();
    public static void CompletingClientStream(ILogger logger);
    public static void WriteMessageError(ILogger logger, Exception ex);
    public static void CompleteClientStreamError(ILogger logger, Exception ex);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Grpc.Net.Client.Internal.Configuration.ConfigProperty`2 : object {
    [NullableAttribute("2")]
private TValue _value;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Func`2<TInner, TValue> _valueFactory;
    private string _key;
    public ConfigProperty`2(Func`2<TInner, TValue> valueFactory, string key);
    public TValue GetValue(ConfigObject inner);
    public void SetValue(ConfigObject inner, TValue value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Grpc.Net.Client.Internal.Configuration.ConvertHelpers : object {
    public static string ConvertStatusCode(StatusCode statusCode);
    public static StatusCode ConvertStatusCode(string statusCode);
    [NullableContextAttribute("2")]
public static Nullable`1<TimeSpan> ConvertDurationText(string text);
    [NullableContextAttribute("2")]
public static string ToDurationText(Nullable`1<TimeSpan> value);
}
[NullableContextAttribute("1")]
internal interface Grpc.Net.Client.Internal.Configuration.IConfigValue {
    public object Inner { get; }
    public abstract virtual object get_Inner();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
internal class Grpc.Net.Client.Internal.Configuration.Values`2 : object {
    internal IList`1<TInner> Inner;
    private IList`1<T> _values;
    internal Func`2<T, TInner> _convertTo;
    internal Func`2<TInner, T> _convertFrom;
    public T Item { get; public set; }
    public int Count { get; }
    public bool IsReadOnly { get; }
    private object Grpc.Net.Client.Internal.Configuration.IConfigValue.Inner { get; }
    public Values`2(IList`1<TInner> inner, Func`2<T, TInner> convertTo, Func`2<TInner, T> convertFrom);
    public sealed virtual T get_Item(int index);
    public sealed virtual void set_Item(int index, T value);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    private sealed virtual override object Grpc.Net.Client.Internal.Configuration.IConfigValue.get_Inner();
    public sealed virtual void Add(T item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(T item);
    public sealed virtual void CopyTo(T[] array, int arrayIndex);
    public sealed virtual IEnumerator`1<T> GetEnumerator();
    public sealed virtual int IndexOf(T item);
    public sealed virtual void Insert(int index, T item);
    public sealed virtual bool Remove(T item);
    public sealed virtual void RemoveAt(int index);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class Grpc.Net.Client.Internal.DefaultCallCredentialsConfigurator : CallCredentialsConfiguratorBase {
    [CompilerGeneratedAttribute]
private AsyncAuthInterceptor <Interceptor>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IReadOnlyList`1<CallCredentials> <CompositeCredentials>k__BackingField;
    [CompilerGeneratedAttribute]
private AuthInterceptorContext <CachedContext>k__BackingField;
    public AsyncAuthInterceptor Interceptor { get; private set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IReadOnlyList`1<CallCredentials> CompositeCredentials { get; private set; }
    public AuthInterceptorContext CachedContext { get; public set; }
    [CompilerGeneratedAttribute]
public AsyncAuthInterceptor get_Interceptor();
    [CompilerGeneratedAttribute]
private void set_Interceptor(AsyncAuthInterceptor value);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<CallCredentials> get_CompositeCredentials();
    [CompilerGeneratedAttribute]
private void set_CompositeCredentials(IReadOnlyList`1<CallCredentials> value);
    [CompilerGeneratedAttribute]
public AuthInterceptorContext get_CachedContext();
    [CompilerGeneratedAttribute]
public void set_CachedContext(AuthInterceptorContext value);
    public void ResetPerCallCredentialState();
    [NullableContextAttribute("1")]
public virtual void SetAsyncAuthInterceptorCredentials(object state, AsyncAuthInterceptor interceptor);
    [NullableContextAttribute("1")]
public virtual void SetCompositeCredentials(object state, IReadOnlyList`1<CallCredentials> credentials);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Grpc.Net.Client.Internal.DefaultChannelCredentialsConfigurator : ChannelCredentialsConfiguratorBase {
    private bool _allowInsecureChannelCallCredentials;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <IsSecure>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private List`1<CallCredentials> <CallCredentials>k__BackingField;
    public Nullable`1<bool> IsSecure { get; private set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public List`1<CallCredentials> CallCredentials { get; private set; }
    public DefaultChannelCredentialsConfigurator(bool allowInsecureChannelCallCredentials);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_IsSecure();
    [CompilerGeneratedAttribute]
private void set_IsSecure(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public List`1<CallCredentials> get_CallCredentials();
    [CompilerGeneratedAttribute]
private void set_CallCredentials(List`1<CallCredentials> value);
    public virtual void SetCompositeCredentials(object state, ChannelCredentials channelCredentials, CallCredentials callCredentials);
    public virtual void SetInsecureCredentials(object state);
    [NullableContextAttribute("2")]
public virtual void SetSslCredentials(object state, string rootCertificates, KeyCertificatePair keyCertificatePair, VerifyPeerCallback verifyPeerCallback);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class Grpc.Net.Client.Internal.GrpcCall : object {
    private static string LoggerName;
    [NullableAttribute("2")]
private GrpcCallSerializationContext _serializationContext;
    [NullableAttribute("2")]
private DefaultDeserializationContext _deserializationContext;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private Metadata <Trailers>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ResponseFinished>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private HttpResponseMessage <HttpResponse>k__BackingField;
    [CompilerGeneratedAttribute]
private CallOptions <Options>k__BackingField;
    [CompilerGeneratedAttribute]
private ILogger <Logger>k__BackingField;
    [CompilerGeneratedAttribute]
private GrpcChannel <Channel>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <RequestGrpcEncoding>k__BackingField;
    [NullableAttribute("2")]
protected Metadata Trailers { get; protected set; }
    public bool ResponseFinished { get; protected set; }
    [NullableAttribute("2")]
public HttpResponseMessage HttpResponse { get; protected set; }
    public GrpcCallSerializationContext SerializationContext { get; }
    public DefaultDeserializationContext DeserializationContext { get; }
    public CallOptions Options { get; }
    public ILogger Logger { get; }
    public GrpcChannel Channel { get; }
    [NullableAttribute("2")]
public string RequestGrpcEncoding { get; internal set; }
    public Task`1<Status> CallTask { get; }
    public CancellationToken CancellationToken { get; }
    public Type RequestType { get; }
    public Type ResponseType { get; }
    protected GrpcCall(CallOptions options, GrpcChannel channel);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
protected Metadata get_Trailers();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
protected void set_Trailers(Metadata value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_ResponseFinished();
    [CompilerGeneratedAttribute]
protected void set_ResponseFinished(bool value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public HttpResponseMessage get_HttpResponse();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
protected void set_HttpResponse(HttpResponseMessage value);
    public GrpcCallSerializationContext get_SerializationContext();
    public DefaultDeserializationContext get_DeserializationContext();
    [CompilerGeneratedAttribute]
public CallOptions get_Options();
    [CompilerGeneratedAttribute]
public ILogger get_Logger();
    [CompilerGeneratedAttribute]
public GrpcChannel get_Channel();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_RequestGrpcEncoding();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal void set_RequestGrpcEncoding(string value);
    public abstract virtual Task`1<Status> get_CallTask();
    public abstract virtual CancellationToken get_CancellationToken();
    public abstract virtual Type get_RequestType();
    public abstract virtual Type get_ResponseType();
    public Exception CreateCanceledStatusException(Exception ex);
    public CancellationToken GetCanceledToken(CancellationToken methodCancellationToken);
    internal RpcException CreateRpcException(Status status);
    public sealed virtual Exception CreateFailureStatusException(Status status);
    [NullableContextAttribute("2")]
protected bool TryGetTrailers(Metadata& trailers);
    internal static Nullable`1<Status> ValidateHeaders(HttpResponseMessage httpResponse, Metadata& trailers);
    private static StatusCode MapHttpStatusToGrpcCode(HttpStatusCode httpStatusCode);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Grpc.Net.Client.Internal.GrpcCall`2 : GrpcCall {
    internal static string ErrorStartingCallMessage;
    private CancellationTokenSource _callCts;
    private TaskCompletionSource`1<HttpResponseMessage> _httpResponseTcs;
    private TaskCompletionSource`1<Status> _callTcs;
    private GrpcMethodInfo _grpcMethodInfo;
    private int _attemptCount;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Task`1<Metadata> _responseHeadersTask;
    [NullableAttribute("2")]
private Timer _deadlineTimer;
    private DateTime _deadline;
    private Nullable`1<CancellationTokenRegistration> _ctsRegistration;
    [CompilerGeneratedAttribute]
private bool <Disposed>k__BackingField;
    [CompilerGeneratedAttribute]
private Method`2<TRequest, TResponse> <Method>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private TaskCompletionSource`1<TResponse> _responseTcs;
    [NullableAttribute("2")]
private TRequest _request;
    [CompilerGeneratedAttribute]
private int <MessagesWritten>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MessagesRead>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private HttpContentClientStreamWriter`2<TRequest, TResponse> <ClientStreamWriter>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private HttpContentClientStreamReader`2<TRequest, TResponse> <ClientStreamReader>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private object <CallWrapper>k__BackingField;
    internal Task`1<HttpResponseMessage> HttpResponseTask { get; }
    public bool Disposed { get; private set; }
    public Method`2<TRequest, TResponse> Method { get; }
    public int MessagesWritten { get; private set; }
    public int MessagesRead { get; private set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public HttpContentClientStreamWriter`2<TRequest, TResponse> ClientStreamWriter { get; private set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public HttpContentClientStreamReader`2<TRequest, TResponse> ClientStreamReader { get; private set; }
    [NullableAttribute("2")]
public MethodConfigInfo MethodConfig { get; }
    public Task`1<Status> CallTask { get; }
    public CancellationToken CancellationToken { get; }
    public Type RequestType { get; }
    public Type ResponseType { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private IClientStreamWriter`1<TRequest> Grpc.Net.Client.Internal.IGrpcCall<TRequest,TResponse>.ClientStreamWriter { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private IAsyncStreamReader`1<TResponse> Grpc.Net.Client.Internal.IGrpcCall<TRequest,TResponse>.ClientStreamReader { get; }
    [NullableAttribute("2")]
public object CallWrapper { get; public set; }
    public GrpcCall`2(Method`2<TRequest, TResponse> method, GrpcMethodInfo grpcMethodInfo, CallOptions options, GrpcChannel channel, int attemptCount);
    internal Task`1<HttpResponseMessage> get_HttpResponseTask();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_Disposed();
    [CompilerGeneratedAttribute]
private void set_Disposed(bool value);
    [CompilerGeneratedAttribute]
public Method`2<TRequest, TResponse> get_Method();
    [CompilerGeneratedAttribute]
public int get_MessagesWritten();
    [CompilerGeneratedAttribute]
private void set_MessagesWritten(int value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_MessagesRead();
    [CompilerGeneratedAttribute]
private void set_MessagesRead(int value);
    [CompilerGeneratedAttribute]
public HttpContentClientStreamWriter`2<TRequest, TResponse> get_ClientStreamWriter();
    [CompilerGeneratedAttribute]
private void set_ClientStreamWriter(HttpContentClientStreamWriter`2<TRequest, TResponse> value);
    [CompilerGeneratedAttribute]
public HttpContentClientStreamReader`2<TRequest, TResponse> get_ClientStreamReader();
    [CompilerGeneratedAttribute]
private void set_ClientStreamReader(HttpContentClientStreamReader`2<TRequest, TResponse> value);
    [NullableContextAttribute("2")]
public MethodConfigInfo get_MethodConfig();
    private void ValidateDeadline(Nullable`1<DateTime> deadline);
    public virtual Task`1<Status> get_CallTask();
    public virtual CancellationToken get_CancellationToken();
    public virtual Type get_RequestType();
    public virtual Type get_ResponseType();
    private sealed virtual override IClientStreamWriter`1<TRequest> Grpc.Net.Client.Internal.IGrpcCall<TRequest,TResponse>.get_ClientStreamWriter();
    private sealed virtual override IAsyncStreamReader`1<TResponse> Grpc.Net.Client.Internal.IGrpcCall<TRequest,TResponse>.get_ClientStreamReader();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual object get_CallWrapper();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual void set_CallWrapper(object value);
    public sealed virtual void StartUnary(TRequest request);
    public sealed virtual void StartClientStreaming();
    public sealed virtual void StartServerStreaming(TRequest request);
    private HttpContent CreatePushUnaryContent(TRequest request);
    public sealed virtual void StartDuplexStreaming();
    internal void StartUnaryCore(HttpContent content);
    internal void StartServerStreamingCore(HttpContent content);
    internal void StartClientStreamingCore(HttpContentClientStreamWriter`2<TRequest, TResponse> clientStreamWriter, HttpContent content);
    public void StartDuplexStreamingCore(HttpContentClientStreamWriter`2<TRequest, TResponse> clientStreamWriter, HttpContent content);
    public sealed virtual void Dispose();
    private void Cleanup(Status status);
    public void EnsureNotDisposed();
    private void FinishResponseAndCleanUp(Status status);
    public void ResponseStreamEnded(Status status, bool finishedGracefully);
    public sealed virtual Task`1<Metadata> GetResponseHeadersAsync();
    [AsyncStateMachineAttribute("Grpc.Net.Client.Internal.GrpcCall`2/<GetResponseHeadersCoreAsync>d__72")]
private Task`1<Metadata> GetResponseHeadersCoreAsync();
    public sealed virtual Status GetStatus();
    public sealed virtual Task`1<TResponse> GetResponseAsync();
    public sealed virtual Metadata GetTrailers();
    private void SetMessageContent(HttpContent content, HttpRequestMessage message);
    public sealed virtual bool TryRegisterCancellation(CancellationToken cancellationToken, Nullable`1& cancellationTokenRegistration);
    private CancellationTokenRegistration RegisterCancellation(CancellationToken cancellationToken);
    private void CancelCallFromCancellationToken(CancellationToken cancellationToken);
    private void CancelCall(Status status);
    [NullableContextAttribute("2")]
internal IDisposable StartScope();
    [AsyncStateMachineAttribute("Grpc.Net.Client.Internal.GrpcCall`2/<RunCall>d__82")]
private Task RunCall(HttpRequestMessage request, Nullable`1<TimeSpan> timeout);
    private bool IsCancellationOrDeadlineException(Exception ex);
    internal bool ResolveException(string summary, Exception ex, Nullable`1& status, Exception& resolvedException);
    public Exception EnsureUserCancellationTokenReported(Exception ex, CancellationToken cancellationToken);
    private void SetFailedResult(Status status);
    private ValueTuple`2<bool, Activity> InitializeCall(HttpRequestMessage request, Nullable`1<TimeSpan> timeout);
    private bool FinishCall(HttpRequestMessage request, bool diagnosticSourceEnabled, Activity activity, Status status);
    private bool IsDeadlineExceededUnsynchronized();
    [AsyncStateMachineAttribute("Grpc.Net.Client.Internal.GrpcCall`2/<ReadCredentials>d__90")]
private Task ReadCredentials(HttpRequestMessage request);
    private void SetWriter(HttpRequestMessage message, HttpContentClientStreamWriter`2<TRequest, TResponse> clientStreamWriter, HttpContent content);
    private HttpRequestMessage CreateHttpRequestMessage(Nullable`1<TimeSpan> timeout);
    private Nullable`1<TimeSpan> GetTimeout();
    [NullableContextAttribute("2")]
private void DeadlineExceededCallback(object state);
    private void DeadlineExceeded();
    internal Task WriteMessageAsync(Stream stream, ReadOnlyMemory`1<byte> message, CancellationToken cancellationToken);
    internal Task WriteMessageAsync(Stream stream, TRequest message, CallOptions callOptions);
    [AsyncStateMachineAttribute("Grpc.Net.Client.Internal.GrpcCall`2/<ReadMessageAsync>d__98")]
internal ValueTask`1<TResponse> ReadMessageAsync(Stream responseStream, string grpcEncoding, bool singleMessage, CancellationToken cancellationToken);
    public sealed virtual Task WriteClientStreamAsync(Func`5<GrpcCall`2<TRequest, TResponse>, Stream, CallOptions, TState, Task> writeFunc, TState state, CancellationToken cancellationToken);
    private static void WriteDiagnosticEvent(DiagnosticSource diagnosticSource, string name, TValue value);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual IEnumerator`1<KeyValuePair`2<string, object>> GetEnumerator();
    [CompilerGeneratedAttribute]
private Task <CreatePushUnaryContent>g__WriteAsync|60_0(TRequest request, Stream stream);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Grpc.Net.Client.Internal.GrpcCallLog : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static Action`4<ILogger, MethodType, Uri, Exception> _startingCall;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static Action`2<ILogger, Exception> _responseHeadersReceived;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static Action`4<ILogger, StatusCode, string, Exception> _grpcStatusError;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static Action`2<ILogger, Exception> _finishedCall;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static Action`3<ILogger, TimeSpan, Exception> _startingDeadlineTimeout;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static Action`2<ILogger, Exception> _errorStartingCall;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static Action`2<ILogger, Exception> _deadlineExceeded;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static Action`2<ILogger, Exception> _canceledCall;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static Action`2<ILogger, Exception> _messageNotReturned;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static Action`2<ILogger, Exception> _callCredentialsNotUsed;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static Action`2<ILogger, Exception> _readingMessage;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static Action`2<ILogger, Exception> _noMessageReturned;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static Action`4<ILogger, int, Type, Exception> _deserializingMessage;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static Action`2<ILogger, Exception> _receivedMessage;
    private static Action`2<ILogger, Exception> _errorReadingMessage;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static Action`2<ILogger, Exception> _sendingMessage;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static Action`2<ILogger, Exception> _messageSent;
    private static Action`2<ILogger, Exception> _errorSendingMessage;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static Action`4<ILogger, Type, int, Exception> _serializedMessage;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static Action`3<ILogger, string, Exception> _compressingMessage;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static Action`3<ILogger, string, Exception> _decompressingMessage;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static Action`3<ILogger, TimeSpan, Exception> _deadlineTimeoutTooLong;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static Action`3<ILogger, TimeSpan, Exception> _deadlineTimerRescheduled;
    private static Action`2<ILogger, Exception> _errorParsingTrailers;
    private static Action`2<ILogger, Exception> _errorExceedingDeadline;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static Action`2<ILogger, Exception> _invalidGrpcStatusInHeader;
    private static GrpcCallLog();
    public static void StartingCall(ILogger logger, MethodType methodType, Uri uri);
    public static void ResponseHeadersReceived(ILogger logger);
    public static void GrpcStatusError(ILogger logger, StatusCode status, string message, Exception debugException);
    public static void FinishedCall(ILogger logger);
    public static void StartingDeadlineTimeout(ILogger logger, TimeSpan deadlineTimeout);
    public static void ErrorStartingCall(ILogger logger);
    public static void DeadlineExceeded(ILogger logger);
    public static void CanceledCall(ILogger logger);
    public static void MessageNotReturned(ILogger logger);
    public static void CallCredentialsNotUsed(ILogger logger);
    public static void ReadingMessage(ILogger logger);
    public static void NoMessageReturned(ILogger logger);
    public static void DeserializingMessage(ILogger logger, int messageLength, Type messageType);
    public static void ReceivedMessage(ILogger logger);
    public static void ErrorReadingMessage(ILogger logger, Exception ex);
    public static void SendingMessage(ILogger logger);
    public static void MessageSent(ILogger logger);
    public static void ErrorSendingMessage(ILogger logger, Exception ex);
    public static void SerializedMessage(ILogger logger, Type messageType, int messageLength);
    public static void CompressingMessage(ILogger logger, string messageEncoding);
    public static void DecompressingMessage(ILogger logger, string messageEncoding);
    public static void DeadlineTimeoutTooLong(ILogger logger, TimeSpan timeout);
    public static void DeadlineTimerRescheduled(ILogger logger, TimeSpan remaining);
    public static void ErrorParsingTrailers(ILogger logger, Exception ex);
    public static void ErrorExceedingDeadline(ILogger logger, Exception ex);
    public static void InvalidGrpcStatusInHeader(ILogger logger);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
internal class Grpc.Net.Client.Internal.GrpcCallScope : object {
    private static string GrpcMethodTypeKey;
    private static string GrpcUriKey;
    private MethodType _methodType;
    private Uri _uri;
    [NullableAttribute("2")]
private string _cachedToString;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public KeyValuePair`2<string, object> Item { get; }
    public int Count { get; }
    public GrpcCallScope(MethodType methodType, Uri uri);
    public sealed virtual KeyValuePair`2<string, object> get_Item(int index);
    public sealed virtual int get_Count();
    [IteratorStateMachineAttribute("Grpc.Net.Client.Internal.GrpcCallScope/<GetEnumerator>d__10")]
public sealed virtual IEnumerator`1<KeyValuePair`2<string, object>> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public virtual string ToString();
}
internal class Grpc.Net.Client.Internal.GrpcCallSerializationContext : SerializationContext {
    private static Status SendingMessageExceedsLimitStatus;
    [NullableAttribute("1")]
private GrpcCall _call;
    private InternalState _state;
    private Nullable`1<int> _payloadLength;
    [NullableAttribute("2")]
private ICompressionProvider _compressionProvider;
    [NullableAttribute("2")]
private ArrayBufferWriter`1<byte> _bufferWriter;
    [NullableAttribute("2")]
private Byte[] _buffer;
    private int _bufferPosition;
    [CompilerGeneratedAttribute]
private CallOptions <CallOptions>k__BackingField;
    public CallOptions CallOptions { get; public set; }
    [NullableContextAttribute("1")]
public GrpcCallSerializationContext(GrpcCall call);
    private static GrpcCallSerializationContext();
    private bool IsDirectSerializationSupported(Int32& payloadLength);
    [CompilerGeneratedAttribute]
public CallOptions get_CallOptions();
    [CompilerGeneratedAttribute]
public void set_CallOptions(CallOptions value);
    public void Initialize();
    public void Reset();
    public ReadOnlyMemory`1<byte> GetWrittenPayload();
    [NullableContextAttribute("2")]
private ICompressionProvider ResolveCompressionProvider();
    public virtual void SetPayloadLength(int payloadLength);
    [NullableContextAttribute("1")]
public virtual void Complete(Byte[] payload);
    private static void WriteHeader(Span`1<byte> headerData, int length, bool compress);
    [NullableContextAttribute("1")]
public virtual IBufferWriter`1<byte> GetBufferWriter();
    [NullableContextAttribute("1")]
private IBufferWriter`1<byte> ResolveBufferWriter();
    private void EnsureMessageSizeAllowed(int payloadLength);
    private static void ThrowInvalidState(InternalState state);
    public virtual void Complete();
    private void WriteMessage(ReadOnlySpan`1<byte> data);
    private ReadOnlySpan`1<byte> CompressMessage(ReadOnlySpan`1<byte> messageData);
    public sealed virtual void Advance(int count);
    public sealed virtual Memory`1<byte> GetMemory(int sizeHint);
    public sealed virtual Span`1<byte> GetSpan(int sizeHint);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Grpc.Net.Client.Internal.GrpcDiagnostics : object {
    public static DiagnosticListener DiagnosticListener;
    public static ActivitySource ActivitySource;
    public static string ActivityName;
    public static string ActivityStartKey;
    public static string ActivityStopKey;
    public static string GrpcMethodTagName;
    public static string GrpcStatusCodeTagName;
    private static GrpcDiagnostics();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class Grpc.Net.Client.Internal.GrpcEventSource : EventSource {
    [NullableAttribute("1")]
public static GrpcEventSource Log;
    private PollingCounter _totalCallsCounter;
    private PollingCounter _currentCallsCounter;
    private PollingCounter _messagesSentCounter;
    private PollingCounter _messagesReceivedCounter;
    private PollingCounter _callsFailedCounter;
    private PollingCounter _callsDeadlineExceededCounter;
    private long _totalCalls;
    private long _currentCalls;
    private long _messageSent;
    private long _messageReceived;
    private long _callsFailed;
    private long _callsDeadlineExceeded;
    [NullableContextAttribute("1")]
internal GrpcEventSource(string eventSourceName);
    private static GrpcEventSource();
    [NonEventAttribute]
internal void ResetCounters();
    [NullableContextAttribute("1")]
[EventAttribute("1")]
public void CallStart(string method);
    [EventAttribute("2")]
public void CallStop();
    [EventAttribute("3")]
public void CallFailed(StatusCode statusCode);
    [EventAttribute("4")]
public void CallDeadlineExceeded();
    [EventAttribute("5")]
public void MessageSent();
    [EventAttribute("6")]
public void MessageReceived();
    [ConditionalAttribute("DEBUG")]
[NonEventAttribute]
private void AssertEventSourceEnabled();
    [NullableContextAttribute("1")]
protected virtual void OnEventCommand(EventCommandEventArgs command);
    [CompilerGeneratedAttribute]
private double <OnEventCommand>b__23_0();
    [CompilerGeneratedAttribute]
private double <OnEventCommand>b__23_1();
    [CompilerGeneratedAttribute]
private double <OnEventCommand>b__23_2();
    [CompilerGeneratedAttribute]
private double <OnEventCommand>b__23_3();
    [CompilerGeneratedAttribute]
private double <OnEventCommand>b__23_4();
    [CompilerGeneratedAttribute]
private double <OnEventCommand>b__23_5();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Grpc.Net.Client.Internal.GrpcMethodInfo : object {
    [CompilerGeneratedAttribute]
private GrpcCallScope <LogScope>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <CallUri>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private MethodConfigInfo <MethodConfig>k__BackingField;
    public GrpcCallScope LogScope { get; }
    public Uri CallUri { get; }
    [NullableAttribute("2")]
public MethodConfigInfo MethodConfig { get; }
    public GrpcMethodInfo(GrpcCallScope logScope, Uri callUri, MethodConfig methodConfig);
    [NullableContextAttribute("2")]
private MethodConfigInfo CreateMethodConfig(MethodConfig methodConfig);
    internal static RetryPolicyInfo CreateRetryPolicy(RetryPolicy r);
    internal static HedgingPolicyInfo CreateHedgingPolicy(HedgingPolicy h);
    [CompilerGeneratedAttribute]
public GrpcCallScope get_LogScope();
    [CompilerGeneratedAttribute]
public Uri get_CallUri();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public MethodConfigInfo get_MethodConfig();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Grpc.Net.Client.Internal.GrpcProtocolConstants : object {
    public static Version Http2Version;
    internal static string GrpcContentType;
    internal static MediaTypeHeaderValue GrpcContentTypeHeaderValue;
    internal static string TimeoutHeader;
    internal static string MessageEncodingHeader;
    internal static string StatusTrailer;
    internal static string MessageTrailer;
    internal static string IdentityGrpcEncoding;
    internal static string MessageAcceptEncodingHeader;
    internal static string CompressionRequestAlgorithmHeader;
    internal static string RetryPushbackHeader;
    internal static string RetryPreviousAttemptsHeader;
    internal static string DropRequestTrailer;
    internal static Dictionary`2<string, ICompressionProvider> DefaultCompressionProviders;
    internal static int MessageDelimiterSize;
    internal static int HeaderSize;
    internal static string DefaultMessageAcceptEncodingValue;
    internal static string UserAgentHeader;
    internal static string UserAgentHeaderValue;
    internal static string TEHeader;
    internal static string TEHeaderValue;
    internal static Status DeadlineExceededStatus;
    internal static Status ThrottledStatus;
    private static GrpcProtocolConstants();
    [NullableContextAttribute("2")]
internal static Status CreateClientCanceledStatus(Exception exception);
    [NullableContextAttribute("2")]
internal static Status CreateDisposeCanceledStatus(Exception exception);
    internal static string GetMessageAcceptEncoding(Dictionary`2<string, ICompressionProvider> compressionProviders);
    [IteratorStateMachineAttribute("Grpc.Net.Client.Internal.GrpcProtocolConstants/<GetDebugEnumerator>d__26")]
public static IEnumerator`1<KeyValuePair`2<string, object>> GetDebugEnumerator(ChannelBase channel, IMethod method, object request);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Grpc.Net.Client.Internal.GrpcProtocolHelpers : object {
    private static int MillisecondsPerSecond;
    public static Byte[] ParseBinaryHeader(string base64);
    public static Metadata BuildMetadata(HttpHeaders responseHeaders);
    internal static bool ShouldSkipHeader(string name);
    private static long TimeoutRoundUpToThreeSignificantFigures(long x);
    private static string FormatTimeout(long value, char ext);
    private static string EncodeTimeoutSeconds(long sec);
    private static string EncodeTimeoutMilliseconds(long x);
    public static string EncodeTimeout(long timeout);
    internal static string GetRequestEncoding(HttpRequestHeaders headers);
    internal static string GetGrpcEncoding(HttpResponseMessage response);
    internal static string GetMessageAcceptEncoding(Dictionary`2<string, ICompressionProvider> compressionProviders);
    [NullableContextAttribute("2")]
internal static bool CanWriteCompressed(WriteOptions writeOptions);
    internal static AuthInterceptorContext CreateAuthInterceptorContext(Uri baseAddress, IMethod method, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Grpc.Net.Client.Internal.GrpcProtocolHelpers/<ReadCredentialMetadata>d__14")]
internal static Task ReadCredentialMetadata(DefaultCallCredentialsConfigurator configurator, GrpcChannel channel, HttpRequestMessage message, IMethod method, CallCredentials credentials, CancellationToken cancellationToken);
    public static void AddHeader(HttpRequestHeaders headers, Entry entry);
    [NullableContextAttribute("2")]
public static string GetHeaderValue(HttpHeaders headers, string name, bool first);
    public static Status GetResponseStatus(HttpResponseMessage httpResponse, bool isBrowser, bool isWinHttp);
    public static bool TryGetStatusCore(HttpHeaders headers, Nullable`1& status);
    public static StatusCode ResolveRpcExceptionStatusCode(Exception ex);
    public static Status CreateStatusFromException(string summary, Exception ex, Nullable`1<StatusCode> statusCode);
    [CompilerGeneratedAttribute]
internal static long <TimeoutRoundUpToThreeSignificantFigures>g__RoundUp|4_0(long x, long divisor);
    [CompilerGeneratedAttribute]
internal static bool <ResolveRpcExceptionStatusCode>g__TryGetProtocol|19_0(string message, Int64& protocolError);
    [CompilerGeneratedAttribute]
internal static StatusCode <ResolveRpcExceptionStatusCode>g__MapHttp2ErrorCodeToStatus|19_1(long protocolError);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Grpc.Net.Client.Internal.HedgingPolicyInfo : object {
    [CompilerGeneratedAttribute]
private int <MaxAttempts>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <HedgingDelay>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<StatusCode> <NonFatalStatusCodes>k__BackingField;
    public int MaxAttempts { get; public set; }
    public TimeSpan HedgingDelay { get; public set; }
    public List`1<StatusCode> NonFatalStatusCodes { get; public set; }
    [CompilerGeneratedAttribute]
public int get_MaxAttempts();
    [CompilerGeneratedAttribute]
public void set_MaxAttempts(int value);
    [CompilerGeneratedAttribute]
public TimeSpan get_HedgingDelay();
    [CompilerGeneratedAttribute]
public void set_HedgingDelay(TimeSpan value);
    [CompilerGeneratedAttribute]
public List`1<StatusCode> get_NonFatalStatusCodes();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_NonFatalStatusCodes(List`1<StatusCode> value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Grpc.Net.Client.Internal.Http.PushStreamContent`2 : HttpContent {
    private HttpContentClientStreamWriter`2<TRequest, TResponse> _streamWriter;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Func`2<Stream, Task> _startCallback;
    internal Task PushComplete { get; }
    public PushStreamContent`2(HttpContentClientStreamWriter`2<TRequest, TResponse> streamWriter);
    public PushStreamContent`2(HttpContentClientStreamWriter`2<TRequest, TResponse> streamWriter, Func`2<Stream, Task> startCallback);
    [AsyncStateMachineAttribute("Grpc.Net.Client.Internal.Http.PushStreamContent`2/<SerializeToStreamAsync>d__4")]
protected virtual Task SerializeToStreamAsync(Stream stream, TransportContext context);
    protected virtual bool TryComputeLength(Int64& length);
    internal Task get_PushComplete();
    internal Task SerializeToStreamAsync(Stream stream);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Grpc.Net.Client.Internal.Http.WinHttpUnaryContent`2 : HttpContent {
    private TRequest _request;
    private Func`3<TRequest, Stream, Task> _startCallback;
    private GrpcCall`2<TRequest, TResponse> _call;
    public WinHttpUnaryContent`2(TRequest request, Func`3<TRequest, Stream, Task> startCallback, GrpcCall`2<TRequest, TResponse> call);
    protected virtual Task SerializeToStreamAsync(Stream stream, TransportContext context);
    [AsyncStateMachineAttribute("Grpc.Net.Client.Internal.Http.WinHttpUnaryContent`2/<WriteMessageCore>d__5")]
private static Task WriteMessageCore(Task writeMessageTask);
    protected virtual bool TryComputeLength(Int64& length);
    private int GetPayloadLength();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DebuggerDisplayAttribute("{Channel}")]
internal class Grpc.Net.Client.Internal.HttpClientCallInvoker : CallInvoker {
    [CompilerGeneratedAttribute]
private GrpcChannel <Channel>k__BackingField;
    internal GrpcChannel Channel { get; }
    public HttpClientCallInvoker(GrpcChannel channel);
    [CompilerGeneratedAttribute]
internal GrpcChannel get_Channel();
    public virtual AsyncClientStreamingCall`2<TRequest, TResponse> AsyncClientStreamingCall(Method`2<TRequest, TResponse> method, string host, CallOptions options);
    public virtual AsyncDuplexStreamingCall`2<TRequest, TResponse> AsyncDuplexStreamingCall(Method`2<TRequest, TResponse> method, string host, CallOptions options);
    public virtual AsyncServerStreamingCall`1<TResponse> AsyncServerStreamingCall(Method`2<TRequest, TResponse> method, string host, CallOptions options, TRequest request);
    public virtual AsyncUnaryCall`1<TResponse> AsyncUnaryCall(Method`2<TRequest, TResponse> method, string host, CallOptions options, TRequest request);
    [ConditionalAttribute("ASSERT_METHOD_TYPE")]
private static void AssertMethodType(IMethod method, MethodType methodType);
    public virtual TResponse BlockingUnaryCall(Method`2<TRequest, TResponse> method, string host, CallOptions options, TRequest request);
    private static IGrpcCall`2<TRequest, TResponse> CreateRootGrpcCall(GrpcChannel channel, Method`2<TRequest, TResponse> method, CallOptions options);
    private void PrepareForDebugging(IGrpcCall`2<TRequest, TResponse> call, object callWrapper);
    public static GrpcCall`2<TRequest, TResponse> CreateGrpcCall(GrpcChannel channel, Method`2<TRequest, TResponse> method, CallOptions options, int attempt, object callWrapper);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DebuggerDisplayAttribute("{DebuggerToString(),nq}")]
[DebuggerTypeProxyAttribute("Grpc.Net.Client.Internal.HttpContentClientStreamReader`2/HttpContentClientStreamReaderDebugView")]
internal class Grpc.Net.Client.Internal.HttpContentClientStreamReader`2 : object {
    private static string LoggerName;
    private GrpcCall`2<TRequest, TResponse> _call;
    private ILogger _logger;
    private object _moveNextLock;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private TaskCompletionSource`1<ValueTuple`2<HttpResponseMessage, Nullable`1<Status>>> <HttpResponseTcs>k__BackingField;
    [NullableAttribute("2")]
private HttpResponseMessage _httpResponse;
    [NullableAttribute("2")]
private string _grpcEncoding;
    [NullableAttribute("2")]
private Stream _responseStream;
    [NullableAttribute("2")]
private Task`1<bool> _moveNextTask;
    [CompilerGeneratedAttribute]
private TResponse <Current>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public TaskCompletionSource`1<ValueTuple`2<HttpResponseMessage, Nullable`1<Status>>> HttpResponseTcs { get; }
    public TResponse Current { get; private set; }
    private bool IsMoveNextInProgressUnsynchronized { get; }
    public HttpContentClientStreamReader`2(GrpcCall`2<TRequest, TResponse> call);
    [CompilerGeneratedAttribute]
public TaskCompletionSource`1<ValueTuple`2<HttpResponseMessage, Nullable`1<Status>>> get_HttpResponseTcs();
    [CompilerGeneratedAttribute]
public sealed virtual TResponse get_Current();
    [CompilerGeneratedAttribute]
private void set_Current(TResponse value);
    public void Dispose();
    public sealed virtual Task`1<bool> MoveNext(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Grpc.Net.Client.Internal.HttpContentClientStreamReader`2/<MoveNextCore>d__18")]
private Task`1<bool> MoveNextCore(CancellationToken cancellationToken);
    private bool get_IsMoveNextInProgressUnsynchronized();
    private string DebuggerToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Grpc.Net.Client.Internal.HttpContentClientStreamReaderLog : object {
    private static Action`2<ILogger, Exception> _readMessageError;
    private static HttpContentClientStreamReaderLog();
    public static void ReadMessageError(ILogger logger, Exception ex);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[DebuggerDisplayAttribute("{DebuggerToString(),nq}")]
[DebuggerTypeProxyAttribute("Grpc.Net.Client.Internal.HttpContentClientStreamWriter`2/HttpContentClientStreamWriterDebugView")]
internal class Grpc.Net.Client.Internal.HttpContentClientStreamWriter`2 : ClientStreamWriterBase`1<TRequest> {
    private static string LoggerName;
    private GrpcCall`2<TRequest, TResponse> _call;
    private bool _completeCalled;
    [CompilerGeneratedAttribute]
private TaskCompletionSource`1<Stream> <WriteStreamTcs>k__BackingField;
    [CompilerGeneratedAttribute]
private TaskCompletionSource`1<bool> <CompleteTcs>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private WriteOptions <WriteOptions>k__BackingField;
    public TaskCompletionSource`1<Stream> WriteStreamTcs { get; }
    public TaskCompletionSource`1<bool> CompleteTcs { get; }
    [NullableAttribute("2")]
public WriteOptions WriteOptions { get; public set; }
    public GrpcCall`2<TRequest, TResponse> Call { get; }
    public HttpContentClientStreamWriter`2(GrpcCall`2<TRequest, TResponse> call);
    [CompilerGeneratedAttribute]
public TaskCompletionSource`1<Stream> get_WriteStreamTcs();
    [CompilerGeneratedAttribute]
public TaskCompletionSource`1<bool> get_CompleteTcs();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual WriteOptions get_WriteOptions();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual void set_WriteOptions(WriteOptions value);
    public virtual Task CompleteAsync();
    [AsyncStateMachineAttribute("Grpc.Net.Client.Internal.HttpContentClientStreamWriter`2/<WriteCoreAsync>d__15")]
public virtual Task WriteCoreAsync(TRequest message, CancellationToken cancellationToken);
    public Task WriteAsync(Func`5<GrpcCall`2<TRequest, TResponse>, Stream, CallOptions, TState, Task> writeFunc, TState state, CancellationToken cancellationToken);
    public GrpcCall`2<TRequest, TResponse> get_Call();
    [AsyncStateMachineAttribute("Grpc.Net.Client.Internal.HttpContentClientStreamWriter`2/<WriteAsyncCore>d__19`1")]
public Task WriteAsyncCore(Func`5<GrpcCall`2<TRequest, TResponse>, Stream, CallOptions, TState, Task> writeFunc, TState state, CancellationToken cancellationToken);
    private string DebuggerToString();
    [CompilerGeneratedAttribute]
internal static Task <WriteCoreAsync>g__WriteMessageToStream|15_0(GrpcCall`2<TRequest, TResponse> call, Stream writeStream, CallOptions callOptions, TRequest message);
}
internal interface Grpc.Net.Client.Internal.IDebugger {
    public bool IsAttached { get; }
    public abstract virtual bool get_IsAttached();
}
[NullableContextAttribute("1")]
internal interface Grpc.Net.Client.Internal.IGrpcCall`2 {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IClientStreamWriter`1<TRequest> ClientStreamWriter { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IAsyncStreamReader`1<TResponse> ClientStreamReader { get; }
    [NullableAttribute("2")]
public object CallWrapper { get; public set; }
    public bool Disposed { get; }
    public bool ResponseFinished { get; }
    public int MessagesRead { get; }
    public abstract virtual Task`1<TResponse> GetResponseAsync();
    public abstract virtual Task`1<Metadata> GetResponseHeadersAsync();
    public abstract virtual Status GetStatus();
    public abstract virtual Metadata GetTrailers();
    public abstract virtual IClientStreamWriter`1<TRequest> get_ClientStreamWriter();
    public abstract virtual IAsyncStreamReader`1<TResponse> get_ClientStreamReader();
    public abstract virtual void StartUnary(TRequest request);
    public abstract virtual void StartClientStreaming();
    public abstract virtual void StartServerStreaming(TRequest request);
    public abstract virtual void StartDuplexStreaming();
    public abstract virtual Task WriteClientStreamAsync(Func`5<GrpcCall`2<TRequest, TResponse>, Stream, CallOptions, TState, Task> writeFunc, TState state, CancellationToken cancellationToken);
    public abstract virtual Exception CreateFailureStatusException(Status status);
    public abstract virtual bool TryRegisterCancellation(CancellationToken cancellationToken, Nullable`1& cancellationTokenRegistration);
    [NullableContextAttribute("2")]
public abstract virtual object get_CallWrapper();
    [NullableContextAttribute("2")]
public abstract virtual void set_CallWrapper(object value);
    public abstract virtual bool get_Disposed();
    public abstract virtual bool get_ResponseFinished();
    public abstract virtual int get_MessagesRead();
}
[NullableContextAttribute("1")]
internal interface Grpc.Net.Client.Internal.IOperatingSystem {
    public bool IsBrowser { get; }
    public bool IsAndroid { get; }
    public bool IsWindows { get; }
    public Version OSVersion { get; }
    public abstract virtual bool get_IsBrowser();
    public abstract virtual bool get_IsAndroid();
    public abstract virtual bool get_IsWindows();
    public abstract virtual Version get_OSVersion();
}
internal interface Grpc.Net.Client.Internal.IRandomGenerator {
    public abstract virtual int Next(int minValue, int maxValue);
    public abstract virtual double NextDouble();
}
internal interface Grpc.Net.Client.Internal.ISystemClock {
    public DateTime UtcNow { get; }
    public abstract virtual DateTime get_UtcNow();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class Grpc.Net.Client.Internal.MethodConfigInfo : object {
    [CompilerGeneratedAttribute]
private RetryPolicyInfo <RetryPolicy>k__BackingField;
    [CompilerGeneratedAttribute]
private HedgingPolicyInfo <HedgingPolicy>k__BackingField;
    public RetryPolicyInfo RetryPolicy { get; public set; }
    public HedgingPolicyInfo HedgingPolicy { get; public set; }
    [CompilerGeneratedAttribute]
public RetryPolicyInfo get_RetryPolicy();
    [CompilerGeneratedAttribute]
public void set_RetryPolicy(RetryPolicyInfo value);
    [CompilerGeneratedAttribute]
public HedgingPolicyInfo get_HedgingPolicy();
    [CompilerGeneratedAttribute]
public void set_HedgingPolicy(HedgingPolicyInfo value);
}
internal static class Grpc.Net.Client.Internal.NtDll : object {
    internal static NTSTATUS RtlGetVersion(OSVERSIONINFOEX& versionInfo);
    [NullableContextAttribute("1")]
internal static Version DetectWindowsVersion();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Grpc.Net.Client.Internal.OperatingSystem : object {
    public static OperatingSystem Instance;
    [CompilerGeneratedAttribute]
private bool <IsBrowser>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsAndroid>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsWindows>k__BackingField;
    [CompilerGeneratedAttribute]
private Version <OSVersion>k__BackingField;
    public bool IsBrowser { get; }
    public bool IsAndroid { get; }
    public bool IsWindows { get; }
    public Version OSVersion { get; }
    private static OperatingSystem();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsBrowser();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsAndroid();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsWindows();
    [CompilerGeneratedAttribute]
public sealed virtual Version get_OSVersion();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Grpc.Net.Client.Internal.PushUnaryContent`2 : HttpContent {
    private TRequest _request;
    private Func`3<TRequest, Stream, Task> _startCallback;
    public PushUnaryContent`2(TRequest request, Func`3<TRequest, Stream, Task> startCallback);
    protected virtual Task SerializeToStreamAsync(Stream stream, TransportContext context);
    [AsyncStateMachineAttribute("Grpc.Net.Client.Internal.PushUnaryContent`2/<WriteMessageCore>d__4")]
private static Task WriteMessageCore(Task writeMessageTask);
    protected virtual bool TryComputeLength(Int64& length);
}
internal class Grpc.Net.Client.Internal.RandomGenerator : object {
    [NullableAttribute("1")]
private Random _random;
    public sealed virtual int Next(int minValue, int maxValue);
    public sealed virtual double NextDouble();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Grpc.Net.Client.Internal.Retry.ChannelRetryThrottling : object {
    private object _lock;
    private double _tokenRatio;
    private int _maxTokens;
    private ILogger _logger;
    private double _tokenCount;
    private double _tokenThreshold;
    private bool _isRetryThrottlingActive;
    public ChannelRetryThrottling(int maxTokens, double tokenRatio, ILoggerFactory loggerFactory);
    public bool IsRetryThrottlingActive();
    public void CallSuccess();
    public void CallFailure();
    private void UpdateRetryThrottlingActive();
}
internal enum Grpc.Net.Client.Internal.Retry.CommitReason : Enum {
    public int value__;
    public static CommitReason ResponseHeadersReceived;
    public static CommitReason FatalStatusCode;
    public static CommitReason ExceededAttemptCount;
    public static CommitReason DeadlineExceeded;
    public static CommitReason Throttled;
    public static CommitReason BufferExceeded;
    public static CommitReason PushbackStop;
    public static CommitReason UnexpectedError;
    public static CommitReason Canceled;
    public static CommitReason Drop;
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class Grpc.Net.Client.Internal.Retry.HedgingCall`2 : RetryCallBase`2<TRequest, TResponse> {
    private static string LoggerName;
    private HedgingPolicyInfo _hedgingPolicy;
    [NullableAttribute("2")]
private CancellationTokenSource _hedgingDelayCts;
    [NullableAttribute("2")]
private TaskCompletionSource`1<object> _delayInterruptTcs;
    private Nullable`1<TimeSpan> _pushbackDelay;
    [NullableAttribute("2")]
private TaskCompletionSource`1<bool> _writeClientMessageTcs;
    private int _writeClientMessageCount;
    [CompilerGeneratedAttribute]
private List`1<IGrpcCall`2<TRequest, TResponse>> <_activeCalls>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private Task <CreateHedgingCallsTask>k__BackingField;
    internal List`1<IGrpcCall`2<TRequest, TResponse>> _activeCalls { get; }
    [NullableAttribute("2")]
internal Task CreateHedgingCallsTask { get; internal set; }
    public HedgingCall`2(HedgingPolicyInfo hedgingPolicy, GrpcChannel channel, Method`2<TRequest, TResponse> method, CallOptions options);
    [CompilerGeneratedAttribute]
internal List`1<IGrpcCall`2<TRequest, TResponse>> get__activeCalls();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal Task get_CreateHedgingCallsTask();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal void set_CreateHedgingCallsTask(Task value);
    [AsyncStateMachineAttribute("Grpc.Net.Client.Internal.Retry.HedgingCall`2/<StartCall>d__15")]
private Task StartCall(Action`1<GrpcCall`2<TRequest, TResponse>> startCallFunc);
    protected virtual void OnCommitCall(IGrpcCall`2<TRequest, TResponse> call);
    private void CleanUpUnsynchronized();
    protected virtual void StartCore(Action`1<GrpcCall`2<TRequest, TResponse>> startCallFunc);
    [AsyncStateMachineAttribute("Grpc.Net.Client.Internal.Retry.HedgingCall`2/<CreateHedgingCalls>d__19")]
private Task CreateHedgingCalls(Action`1<GrpcCall`2<TRequest, TResponse>> startCallFunc);
    [AsyncStateMachineAttribute("Grpc.Net.Client.Internal.Retry.HedgingCall`2/<HedgingDelayAsync>d__20")]
private Task HedgingDelayAsync(TimeSpan hedgingDelay);
    protected virtual void Dispose(bool disposing);
    public virtual Task ClientStreamCompleteAsync();
    [AsyncStateMachineAttribute("Grpc.Net.Client.Internal.Retry.HedgingCall`2/<ClientStreamWriteAsync>d__23")]
public virtual Task ClientStreamWriteAsync(TRequest message, CancellationToken cancellationToken);
    private Task DoClientStreamActionAsync(Func`2<IList`1<IGrpcCall`2<TRequest, TResponse>>, Task> action);
    protected virtual void OnBufferMessageWritten(int count);
    protected virtual void OnCancellation();
    [AsyncStateMachineAttribute("Grpc.Net.Client.Internal.Retry.HedgingCall`2/<<DoClientStreamActionAsync>g__WaitForCallUnsynchronizedAsync|24_0>d")]
[CompilerGeneratedAttribute]
private Task <DoClientStreamActionAsync>g__WaitForCallUnsynchronizedAsync|24_0(Func`2<IList`1<IGrpcCall`2<TRequest, TResponse>>, Task> action);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class Grpc.Net.Client.Internal.Retry.RetryCall`2 : RetryCallBase`2<TRequest, TResponse> {
    private static string LoggerName;
    private RetryPolicyInfo _retryPolicy;
    private int _nextRetryDelayMilliseconds;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private GrpcCall`2<TRequest, TResponse> _activeCall;
    public RetryCall`2(RetryPolicyInfo retryPolicy, GrpcChannel channel, Method`2<TRequest, TResponse> method, CallOptions options);
    private int CalculateNextRetryDelay();
    private Nullable`1<CommitReason> EvaluateRetry(Status status, Nullable`1<int> retryPushbackMilliseconds);
    [AsyncStateMachineAttribute("Grpc.Net.Client.Internal.Retry.RetryCall`2/<StartRetry>d__7")]
private Task StartRetry(Action`1<GrpcCall`2<TRequest, TResponse>> startCallFunc);
    private bool IsSuccessfulStreamingCall(Status responseStatus);
    protected virtual void OnCommitCall(IGrpcCall`2<TRequest, TResponse> call);
    protected virtual void Dispose(bool disposing);
    protected virtual void StartCore(Action`1<GrpcCall`2<TRequest, TResponse>> startCallFunc);
    public virtual Task ClientStreamCompleteAsync();
    [AsyncStateMachineAttribute("Grpc.Net.Client.Internal.Retry.RetryCall`2/<ClientStreamWriteAsync>d__13")]
public virtual Task ClientStreamWriteAsync(TRequest message, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Grpc.Net.Client.Internal.Retry.RetryCall`2/<DoClientStreamActionAsync>d__14")]
private Task DoClientStreamActionAsync(Func`2<IGrpcCall`2<TRequest, TResponse>, Task> action);
    private Task`1<IGrpcCall`2<TRequest, TResponse>> GetActiveCallAsync(IGrpcCall`2<TRequest, TResponse> previousCall);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class Grpc.Net.Client.Internal.Retry.RetryCallBase`2 : object {
    private TaskCompletionSource`1<IGrpcCall`2<TRequest, TResponse>> _commitedCallTcs;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private RetryCallBaseClientStreamReader`2<TRequest, TResponse> _retryBaseClientStreamReader;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private RetryCallBaseClientStreamWriter`2<TRequest, TResponse> _retryBaseClientStreamWriter;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Task`1<TResponse> _responseTask;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Task`1<Metadata> _responseHeadersTask;
    [NullableAttribute("2")]
private TRequest _request;
    internal Nullable`1<CancellationTokenRegistration> _ctsRegistration;
    [CompilerGeneratedAttribute]
private object <Lock>k__BackingField;
    [CompilerGeneratedAttribute]
private ILogger <Logger>k__BackingField;
    [CompilerGeneratedAttribute]
private Method`2<TRequest, TResponse> <Method>k__BackingField;
    [CompilerGeneratedAttribute]
private CallOptions <Options>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaxRetryAttempts>k__BackingField;
    [CompilerGeneratedAttribute]
private CancellationTokenSource <CancellationTokenSource>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private TaskCompletionSource`1<IGrpcCall`2<TRequest, TResponse>> <NewActiveCallTcs>k__BackingField;
    [CompilerGeneratedAttribute]
private GrpcChannel <Channel>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private WriteOptions <ClientStreamWriteOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ClientStreamComplete>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MessagesWritten>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Disposed>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private object <CallWrapper>k__BackingField;
    [CompilerGeneratedAttribute]
private int <AttemptCount>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private List`1<ReadOnlyMemory`1<byte>> <BufferedMessages>k__BackingField;
    [CompilerGeneratedAttribute]
private long <CurrentCallBufferSize>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <BufferedCurrentMessage>k__BackingField;
    protected object Lock { get; }
    protected ILogger Logger { get; }
    protected Method`2<TRequest, TResponse> Method { get; }
    protected CallOptions Options { get; }
    protected int MaxRetryAttempts { get; }
    protected CancellationTokenSource CancellationTokenSource { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
protected TaskCompletionSource`1<IGrpcCall`2<TRequest, TResponse>> NewActiveCallTcs { get; protected set; }
    public GrpcChannel Channel { get; }
    public Task`1<IGrpcCall`2<TRequest, TResponse>> CommitedCallTask { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IAsyncStreamReader`1<TResponse> ClientStreamReader { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IClientStreamWriter`1<TRequest> ClientStreamWriter { get; }
    [NullableAttribute("2")]
public WriteOptions ClientStreamWriteOptions { get; internal set; }
    public bool ClientStreamComplete { get; public set; }
    public int MessagesWritten { get; private set; }
    public bool Disposed { get; private set; }
    [NullableAttribute("2")]
public object CallWrapper { get; public set; }
    public bool ResponseFinished { get; }
    public int MessagesRead { get; }
    protected int AttemptCount { get; private set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
protected List`1<ReadOnlyMemory`1<byte>> BufferedMessages { get; }
    protected long CurrentCallBufferSize { get; protected set; }
    protected bool BufferedCurrentMessage { get; protected set; }
    protected RetryCallBase`2(GrpcChannel channel, Method`2<TRequest, TResponse> method, CallOptions options, string loggerName, int retryAttempts);
    [CompilerGeneratedAttribute]
protected object get_Lock();
    [CompilerGeneratedAttribute]
protected ILogger get_Logger();
    [CompilerGeneratedAttribute]
protected Method`2<TRequest, TResponse> get_Method();
    [CompilerGeneratedAttribute]
protected CallOptions get_Options();
    [CompilerGeneratedAttribute]
protected int get_MaxRetryAttempts();
    [CompilerGeneratedAttribute]
protected CancellationTokenSource get_CancellationTokenSource();
    [CompilerGeneratedAttribute]
protected TaskCompletionSource`1<IGrpcCall`2<TRequest, TResponse>> get_NewActiveCallTcs();
    [CompilerGeneratedAttribute]
protected void set_NewActiveCallTcs(TaskCompletionSource`1<IGrpcCall`2<TRequest, TResponse>> value);
    [CompilerGeneratedAttribute]
public GrpcChannel get_Channel();
    public Task`1<IGrpcCall`2<TRequest, TResponse>> get_CommitedCallTask();
    public sealed virtual IAsyncStreamReader`1<TResponse> get_ClientStreamReader();
    public sealed virtual IClientStreamWriter`1<TRequest> get_ClientStreamWriter();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public WriteOptions get_ClientStreamWriteOptions();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal void set_ClientStreamWriteOptions(WriteOptions value);
    [CompilerGeneratedAttribute]
public bool get_ClientStreamComplete();
    [CompilerGeneratedAttribute]
public void set_ClientStreamComplete(bool value);
    [CompilerGeneratedAttribute]
public int get_MessagesWritten();
    [CompilerGeneratedAttribute]
private void set_MessagesWritten(int value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_Disposed();
    [CompilerGeneratedAttribute]
private void set_Disposed(bool value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual object get_CallWrapper();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual void set_CallWrapper(object value);
    public sealed virtual bool get_ResponseFinished();
    public sealed virtual int get_MessagesRead();
    [CompilerGeneratedAttribute]
protected int get_AttemptCount();
    [CompilerGeneratedAttribute]
private void set_AttemptCount(int value);
    [CompilerGeneratedAttribute]
protected List`1<ReadOnlyMemory`1<byte>> get_BufferedMessages();
    [CompilerGeneratedAttribute]
protected long get_CurrentCallBufferSize();
    [CompilerGeneratedAttribute]
protected void set_CurrentCallBufferSize(long value);
    [CompilerGeneratedAttribute]
protected bool get_BufferedCurrentMessage();
    [CompilerGeneratedAttribute]
protected void set_BufferedCurrentMessage(bool value);
    public sealed virtual Task`1<TResponse> GetResponseAsync();
    [AsyncStateMachineAttribute("Grpc.Net.Client.Internal.Retry.RetryCallBase`2/<GetResponseCoreAsync>d__79")]
private Task`1<TResponse> GetResponseCoreAsync();
    public sealed virtual Task`1<Metadata> GetResponseHeadersAsync();
    [AsyncStateMachineAttribute("Grpc.Net.Client.Internal.Retry.RetryCallBase`2/<GetResponseHeadersCoreAsync>d__81")]
private Task`1<Metadata> GetResponseHeadersCoreAsync();
    public sealed virtual Status GetStatus();
    public sealed virtual Metadata GetTrailers();
    public sealed virtual void Dispose();
    public sealed virtual void StartUnary(TRequest request);
    public sealed virtual void StartClientStreaming();
    public sealed virtual void StartServerStreaming(TRequest request);
    public sealed virtual void StartDuplexStreaming();
    private HttpContent CreatePushUnaryContent(TRequest request, GrpcCall`2<TRequest, TResponse> call);
    private PushStreamContent`2<TRequest, TResponse> CreatePushStreamContent(GrpcCall`2<TRequest, TResponse> call, HttpContentClientStreamWriter`2<TRequest, TResponse> clientStreamWriter);
    [AsyncStateMachineAttribute("Grpc.Net.Client.Internal.Retry.RetryCallBase`2/<WriteBufferedMessages>d__91")]
private Task WriteBufferedMessages(GrpcCall`2<TRequest, TResponse> call, Stream requestStream, ReadOnlyMemory`1[] bufferedMessages);
    protected virtual void OnBufferMessageWritten(int count);
    protected abstract virtual void StartCore(Action`1<GrpcCall`2<TRequest, TResponse>> startCallFunc);
    public abstract virtual Task ClientStreamCompleteAsync();
    public abstract virtual Task ClientStreamWriteAsync(TRequest message, CancellationToken cancellationToken);
    protected CancellationTokenRegistration RegisterRetryCancellationToken(CancellationToken cancellationToken);
    protected bool IsDeadlineExceeded();
    [NullableContextAttribute("2")]
protected Nullable`1<int> GetRetryPushback(HttpResponseMessage httpResponse);
    protected Byte[] SerializePayload(GrpcCall`2<TRequest, TResponse> call, CallOptions callOptions, TRequest request);
    [AsyncStateMachineAttribute("Grpc.Net.Client.Internal.Retry.RetryCallBase`2/<WriteNewMessage>d__100")]
protected Task WriteNewMessage(GrpcCall`2<TRequest, TResponse> call, Stream writeStream, CallOptions callOptions, TRequest message);
    protected void CommitCall(IGrpcCall`2<TRequest, TResponse> call, CommitReason commitReason);
    protected abstract virtual void OnCommitCall(IGrpcCall`2<TRequest, TResponse> call);
    protected bool HasClientStream();
    protected bool HasResponseStream();
    protected void SetNewActiveCallUnsynchronized(IGrpcCall`2<TRequest, TResponse> call);
    private sealed virtual override Task Grpc.Net.Client.Internal.IGrpcCall<TRequest,TResponse>.WriteClientStreamAsync(Func`5<GrpcCall`2<TRequest, TResponse>, Stream, CallOptions, TState, Task> writeFunc, TState state, CancellationToken cancellationTokens);
    [AsyncStateMachineAttribute("Grpc.Net.Client.Internal.Retry.RetryCallBase`2/<GetActiveCallUnsynchronizedAsync>d__107")]
protected Task`1<IGrpcCall`2<TRequest, TResponse>> GetActiveCallUnsynchronizedAsync(IGrpcCall`2<TRequest, TResponse> previousCall);
    protected virtual void Dispose(bool disposing);
    protected void Cleanup(bool observeExceptions);
    [NullableContextAttribute("0")]
internal bool TryAddToRetryBuffer(ReadOnlyMemory`1<byte> message);
    internal void ClearRetryBuffer();
    protected StatusGrpcCall`2<TRequest, TResponse> CreateStatusCall(Status status);
    protected void HandleUnexpectedError(Exception ex);
    protected void OnStartingAttempt();
    protected virtual void OnCancellation();
    protected bool IsRetryThrottlingActive();
    protected void RetryAttemptCallSuccess();
    protected void RetryAttemptCallFailure();
    public sealed virtual bool TryRegisterCancellation(CancellationToken cancellationToken, Nullable`1& cancellationTokenRegistration);
    public sealed virtual Exception CreateFailureStatusException(Status status);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual IEnumerator`1<KeyValuePair`2<string, object>> GetEnumerator();
    [CompilerGeneratedAttribute]
private void <StartClientStreaming>b__86_0(GrpcCall`2<TRequest, TResponse> call);
    [CompilerGeneratedAttribute]
private void <StartDuplexStreaming>b__88_0(GrpcCall`2<TRequest, TResponse> call);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DebuggerDisplayAttribute("{DebuggerToString(),nq}")]
[DebuggerTypeProxyAttribute("Grpc.Net.Client.Internal.Retry.RetryCallBaseClientStreamReader`2/RetryCallBaseClientStreamReaderDebugView")]
internal class Grpc.Net.Client.Internal.Retry.RetryCallBaseClientStreamReader`2 : object {
    private RetryCallBase`2<TRequest, TResponse> _retryCallBase;
    public TResponse Current { get; }
    public RetryCallBaseClientStreamReader`2(RetryCallBase`2<TRequest, TResponse> retryCallBase);
    public sealed virtual TResponse get_Current();
    [AsyncStateMachineAttribute("Grpc.Net.Client.Internal.Retry.RetryCallBaseClientStreamReader`2/<MoveNext>d__4")]
public sealed virtual Task`1<bool> MoveNext(CancellationToken cancellationToken);
    private string DebuggerToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[DebuggerDisplayAttribute("{DebuggerToString(),nq}")]
[DebuggerTypeProxyAttribute("Grpc.Net.Client.Internal.Retry.RetryCallBaseClientStreamWriter`2/RetryCallBaseClientStreamWriterDebugView")]
internal class Grpc.Net.Client.Internal.Retry.RetryCallBaseClientStreamWriter`2 : ClientStreamWriterBase`1<TRequest> {
    private static string LoggerName;
    private RetryCallBase`2<TRequest, TResponse> _retryCallBase;
    [NullableAttribute("2")]
public WriteOptions WriteOptions { get; public set; }
    public RetryCallBaseClientStreamWriter`2(RetryCallBase`2<TRequest, TResponse> retryCallBase);
    [NullableContextAttribute("2")]
public virtual WriteOptions get_WriteOptions();
    [NullableContextAttribute("2")]
public virtual void set_WriteOptions(WriteOptions value);
    public virtual Task CompleteAsync();
    public virtual Task WriteCoreAsync(TRequest message, CancellationToken cancellationToken);
    private string DebuggerToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Grpc.Net.Client.Internal.Retry.RetryCallBaseLog : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static Action`5<ILogger, StatusCode, int, bool, Exception> _retryEvaluated;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static Action`3<ILogger, string, Exception> _retryPushbackReceived;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static Action`3<ILogger, TimeSpan, Exception> _startingRetryDelay;
    private static Action`2<ILogger, Exception> _errorRetryingCall;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static Action`3<ILogger, int, Exception> _sendingBufferedMessages;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static Action`4<ILogger, int, long, Exception> _messageAddedToBuffer;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static Action`3<ILogger, CommitReason, Exception> _callCommited;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static Action`2<ILogger, Exception> _startingRetryWorker;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static Action`2<ILogger, Exception> _stoppingRetryWorker;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static Action`4<ILogger, int, int, Exception> _maxAttemptsLimited;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static Action`2<ILogger, Exception> _additionalCallsBlockedByRetryThrottling;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static Action`3<ILogger, int, Exception> _startingAttempt;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static Action`2<ILogger, Exception> _canceledRetry;
    private static RetryCallBaseLog();
    internal static void RetryEvaluated(ILogger logger, StatusCode statusCode, int attemptCount, bool willRetry);
    internal static void RetryPushbackReceived(ILogger logger, string retryPushback);
    internal static void StartingRetryDelay(ILogger logger, TimeSpan delayDuration);
    internal static void ErrorRetryingCall(ILogger logger, Exception ex);
    internal static void SendingBufferedMessages(ILogger logger, int messageCount);
    internal static void MessageAddedToBuffer(ILogger logger, int messageSize, long callBufferSize);
    internal static void CallCommited(ILogger logger, CommitReason commitReason);
    internal static void StartingRetryWorker(ILogger logger);
    internal static void StoppingRetryWorker(ILogger logger);
    internal static void MaxAttemptsLimited(ILogger logger, int serviceConfigMaxAttempts, int channelMaxAttempts);
    internal static void AdditionalCallsBlockedByRetryThrottling(ILogger logger);
    internal static void StartingAttempt(ILogger logger, int attempts);
    internal static void CanceledRetry(ILogger logger);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Grpc.Net.Client.Internal.Retry.StatusGrpcCall`2 : object {
    private Status _status;
    private GrpcChannel _channel;
    private Method`2<TRequest, TResponse> _method;
    [NullableAttribute("2")]
private TRequest _request;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private IClientStreamWriter`1<TRequest> _clientStreamWriter;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private IAsyncStreamReader`1<TResponse> _clientStreamReader;
    [CompilerGeneratedAttribute]
private int <MessagesRead>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private object <CallWrapper>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IClientStreamWriter`1<TRequest> ClientStreamWriter { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IAsyncStreamReader`1<TResponse> ClientStreamReader { get; }
    public bool Disposed { get; }
    public bool ResponseFinished { get; }
    public int MessagesRead { get; }
    [NullableAttribute("2")]
public object CallWrapper { get; public set; }
    public StatusGrpcCall`2(Status status, GrpcChannel channel, Method`2<TRequest, TResponse> method, int messagesRead, TRequest request);
    public sealed virtual IClientStreamWriter`1<TRequest> get_ClientStreamWriter();
    public sealed virtual IAsyncStreamReader`1<TResponse> get_ClientStreamReader();
    public sealed virtual bool get_Disposed();
    public sealed virtual bool get_ResponseFinished();
    [CompilerGeneratedAttribute]
public sealed virtual int get_MessagesRead();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual object get_CallWrapper();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual void set_CallWrapper(object value);
    public sealed virtual void Dispose();
    public sealed virtual Task`1<TResponse> GetResponseAsync();
    public sealed virtual Task`1<Metadata> GetResponseHeadersAsync();
    public sealed virtual Status GetStatus();
    public sealed virtual Metadata GetTrailers();
    public sealed virtual void StartClientStreaming();
    public sealed virtual void StartDuplexStreaming();
    public sealed virtual void StartServerStreaming(TRequest request);
    public sealed virtual void StartUnary(TRequest request);
    public sealed virtual Task WriteClientStreamAsync(Func`5<GrpcCall`2<TRequest, TResponse>, Stream, CallOptions, TState, Task> writeFunc, TState state, CancellationToken cancellationToken);
    public sealed virtual bool TryRegisterCancellation(CancellationToken cancellationToken, Nullable`1& cancellationTokenRegistration);
    public sealed virtual Exception CreateFailureStatusException(Status status);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual IEnumerator`1<KeyValuePair`2<string, object>> GetEnumerator();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Grpc.Net.Client.Internal.RetryPolicyInfo : object {
    [CompilerGeneratedAttribute]
private int <MaxAttempts>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <InitialBackoff>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <MaxBackoff>k__BackingField;
    [CompilerGeneratedAttribute]
private double <BackoffMultiplier>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<StatusCode> <RetryableStatusCodes>k__BackingField;
    public int MaxAttempts { get; public set; }
    public TimeSpan InitialBackoff { get; public set; }
    public TimeSpan MaxBackoff { get; public set; }
    public double BackoffMultiplier { get; public set; }
    public List`1<StatusCode> RetryableStatusCodes { get; public set; }
    [CompilerGeneratedAttribute]
public int get_MaxAttempts();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_MaxAttempts(int value);
    [CompilerGeneratedAttribute]
public TimeSpan get_InitialBackoff();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_InitialBackoff(TimeSpan value);
    [CompilerGeneratedAttribute]
public TimeSpan get_MaxBackoff();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_MaxBackoff(TimeSpan value);
    [CompilerGeneratedAttribute]
public double get_BackoffMultiplier();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_BackoffMultiplier(double value);
    [CompilerGeneratedAttribute]
public List`1<StatusCode> get_RetryableStatusCodes();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_RetryableStatusCodes(List`1<StatusCode> value);
}
internal static class Grpc.Net.Client.Internal.RuntimeHelpers : object {
    [NullableContextAttribute("1")]
public static bool QueryRuntimeSettingSwitch(string switchName, bool defaultValue);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class Grpc.Net.Client.Internal.StreamExtensions : object {
    private static Status ReceivedMessageExceedsLimitStatus;
    private static Status NoMessageEncodingMessageStatus;
    private static Status IdentityMessageEncodingMessageStatus;
    private static StreamExtensions();
    private static Status CreateUnknownMessageEncodingMessageStatus(string unsupportedEncoding, IEnumerable`1<string> supportedEncodings);
    [AsyncStateMachineAttribute("Grpc.Net.Client.Internal.StreamExtensions/<ReadMessageAsync>d__4`1")]
[ExtensionAttribute]
public static ValueTask`1<TResponse> ReadMessageAsync(Stream responseStream, GrpcCall call, Func`2<DeserializationContext, TResponse> deserializer, string grpcEncoding, bool singleMessage, CancellationToken cancellationToken);
    [NullableContextAttribute("0")]
private static int ReadMessageLength(Span`1<byte> header);
    [AsyncStateMachineAttribute("Grpc.Net.Client.Internal.StreamExtensions/<ReadMessageContentAsync>d__6")]
private static Task ReadMessageContentAsync(Stream responseStream, Memory`1<byte> messageData, int length, CancellationToken cancellationToken);
    private static bool TryDecompressMessage(ILogger logger, string compressionEncoding, Dictionary`2<string, ICompressionProvider> compressionProviders, Byte[] messageData, int length, ReadOnlySequence`1& result);
    private static bool ReadCompressedFlag(byte flag);
    [AsyncStateMachineAttribute("Grpc.Net.Client.Internal.StreamExtensions/<WriteMessageAsync>d__9`1")]
[ExtensionAttribute]
public static Task WriteMessageAsync(Stream stream, GrpcCall call, TMessage message, Action`2<TMessage, SerializationContext> serializer, CallOptions callOptions);
    [AsyncStateMachineAttribute("Grpc.Net.Client.Internal.StreamExtensions/<WriteMessageAsync>d__10")]
[ExtensionAttribute]
public static Task WriteMessageAsync(Stream stream, GrpcCall call, ReadOnlyMemory`1<byte> data, CancellationToken cancellationToken);
    private static bool IsCancellationException(Exception ex);
    private static bool TryCreateCallCompleteException(Exception originalException, GrpcCall call, Exception& exception);
}
internal class Grpc.Net.Client.Internal.SystemClock : object {
    [NullableAttribute("1")]
public static SystemClock Instance;
    public DateTime UtcNow { get; }
    private static SystemClock();
    public sealed virtual DateTime get_UtcNow();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class Grpc.Net.Client.Internal.TaskExtensions : object {
    private static Action`1<Task> IgnoreTaskContinuation;
    private static TaskExtensions();
    [ExtensionAttribute]
public static void ObserveException(Task task);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Grpc.Net.Client.Internal.UserAgentGenerator : object {
    internal static string GetUserAgentString();
    [NullableContextAttribute("2")]
internal static string GetUserAgentString(Architecture processArch, Version clrVersion, string assemblyVersion, string runtimeInformation, string frameworkName, string operatingSystem);
    private static string GetGrpcDotNetVersion(string assemblyVersion);
    private static string GetOS();
    private static string GetFrameworkName(string frameworkName);
    private static string GetFrameworkDescription(string frameworkDescription);
    [CompilerGeneratedAttribute]
internal static string <GetUserAgentString>g__GetClrVersion|1_0(Version clrVersion);
    [CompilerGeneratedAttribute]
internal static string <GetUserAgentString>g__GetProcessArch|1_1(Architecture processArch);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal static class Grpc.Shared.ArgumentNullThrowHelper : object {
    public static void ThrowIfNull(object argument, string paramName);
    [DoesNotReturnAttribute]
internal static void Throw(string paramName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Grpc.Shared.CommonGrpcProtocolHelpers : object {
    public static Task`1<bool> TrueTask;
    public static Task`1<bool> FalseTask;
    private static int TimerEpsilonMilliseconds;
    private static CommonGrpcProtocolHelpers();
    public static long GetTimerDueTime(TimeSpan timeout, long maxTimerDueTime);
    public static bool IsContentType(string contentType, string s);
    public static string ConvertToRpcExceptionMessage(Exception ex);
    private static string BuildErrorMessage(Exception ex);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class Grpc.Shared.CompatibilityHelpers : object {
    [NullableContextAttribute("2")]
[ConditionalAttribute("DEBUG")]
public static void Assert(bool condition, string message);
    [ExtensionAttribute]
public static bool IsCompletedSuccessfully(Task task);
    [ExtensionAttribute]
public static bool IsCompletedSuccessfully(ValueTask task);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static bool IsCompletedSuccessfully(ValueTask`1<T> task);
    public static int IndexOf(string s, char value, StringComparison comparisonType);
    [AsyncStateMachineAttribute("Grpc.Shared.CompatibilityHelpers/<WaitAsync>d__5`1")]
[ExtensionAttribute]
public static Task`1<T> WaitAsync(Task`1<T> task, CancellationToken cancellationToken);
    [NullableContextAttribute("2")]
public static CancellationTokenRegistration RegisterWithCancellationTokenCallback(CancellationToken cancellationToken, Action`2<object, CancellationToken> callback, object state);
    public static Task`1<T> AwaitWithYieldAsync(Task`1<T> callTask);
    [AsyncStateMachineAttribute("Grpc.Shared.CompatibilityHelpers/<<AwaitWithYieldAsync>g__AwaitWithYieldAsyncCore|7_0>d`1")]
[CompilerGeneratedAttribute]
internal static Task`1<T> <AwaitWithYieldAsync>g__AwaitWithYieldAsyncCore|7_0(Task`1<T> callTask);
}
internal class Grpc.Shared.DefaultDeserializationContext : DeserializationContext {
    private Nullable`1<ReadOnlySequence`1<byte>> _payload;
    public int PayloadLength { get; }
    public void SetPayload(Nullable`1& payload);
    [NullableContextAttribute("1")]
public virtual Byte[] PayloadAsNewBuffer();
    public virtual ReadOnlySequence`1<byte> PayloadAsReadOnlySequence();
    public virtual int get_PayloadLength();
}
internal enum Grpc.Shared.Http2ErrorCode : Enum {
    public long value__;
    public static Http2ErrorCode NO_ERROR;
    public static Http2ErrorCode PROTOCOL_ERROR;
    public static Http2ErrorCode INTERNAL_ERROR;
    public static Http2ErrorCode FLOW_CONTROL_ERROR;
    public static Http2ErrorCode SETTINGS_TIMEOUT;
    public static Http2ErrorCode STREAM_CLOSED;
    public static Http2ErrorCode FRAME_SIZE_ERROR;
    public static Http2ErrorCode REFUSED_STREAM;
    public static Http2ErrorCode CANCEL;
    public static Http2ErrorCode COMPRESSION_ERROR;
    public static Http2ErrorCode CONNECT_ERROR;
    public static Http2ErrorCode ENHANCE_YOUR_CALM;
    public static Http2ErrorCode INADEQUATE_SECURITY;
    public static Http2ErrorCode HTTP_1_1_REQUIRED;
}
internal enum Grpc.Shared.Http3ErrorCode : Enum {
    public long value__;
    public static Http3ErrorCode H3_NO_ERROR;
    public static Http3ErrorCode H3_GENERAL_PROTOCOL_ERROR;
    public static Http3ErrorCode H3_INTERNAL_ERROR;
    public static Http3ErrorCode H3_STREAM_CREATION_ERROR;
    public static Http3ErrorCode H3_CLOSED_CRITICAL_STREAM;
    public static Http3ErrorCode H3_FRAME_UNEXPECTED;
    public static Http3ErrorCode H3_FRAME_ERROR;
    public static Http3ErrorCode H3_EXCESSIVE_LOAD;
    public static Http3ErrorCode H3_ID_ERROR;
    public static Http3ErrorCode H3_SETTINGS_ERROR;
    public static Http3ErrorCode H3_MISSING_SETTINGS;
    public static Http3ErrorCode H3_REQUEST_REJECTED;
    public static Http3ErrorCode H3_REQUEST_CANCELLED;
    public static Http3ErrorCode H3_REQUEST_INCOMPLETE;
    public static Http3ErrorCode H3_MESSAGE_ERROR;
    public static Http3ErrorCode H3_CONNECT_ERROR;
    public static Http3ErrorCode H3_VERSION_FALLBACK;
}
internal static class Grpc.Shared.HttpHandlerFactory : object {
    [NullableContextAttribute("1")]
public static HttpMessageHandler CreatePrimaryHandler();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class Grpc.Shared.HttpRequestHelpers : object {
    [ExtensionAttribute]
public static bool TryGetOption(HttpRequestMessage requestMessage, string key, T& value);
    [ExtensionAttribute]
public static void SetOption(HttpRequestMessage requestMessage, string key, T value);
    public static bool HasHttpHandlerType(HttpMessageHandler handler, string handlerTypeName);
    public static HttpMessageHandler GetHttpHandlerType(HttpMessageHandler handler, string handlerTypeName);
    private static bool IsType(Type type, string handlerTypeName);
    public static bool HasHttpHandlerType(HttpMessageHandler handler);
    public static T GetHttpHandlerType(HttpMessageHandler handler);
}
internal static class Grpc.Shared.NonCapturingTimer : object {
    [NullableContextAttribute("1")]
public static Timer Create(TimerCallback callback, object state, TimeSpan dueTime, TimeSpan period);
}
internal class Grpc.Shared.NonDisposableMemoryStream : MemoryStream {
    protected virtual void Dispose(bool disposing);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Grpc.Shared.ObjectDisposedThrowHelper : object {
    public static void ThrowIf(bool condition, object instance);
    public static void ThrowIf(bool condition, Type type);
    [NullableContextAttribute("2")]
[DoesNotReturnAttribute]
private static void ThrowObjectDisposedException(object instance);
    [NullableContextAttribute("2")]
[DoesNotReturnAttribute]
private static void ThrowObjectDisposedException(Type type);
}
[ExtensionAttribute]
internal static class Grpc.Shared.TrailingHeadersHelpers : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static HttpHeaders TrailingHeaders(HttpResponseMessage responseMessage);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("192")]
internal class System.Diagnostics.CodeAnalysis.MemberNotNullAttribute : Attribute {
    [CompilerGeneratedAttribute]
private String[] <Members>k__BackingField;
    public String[] Members { get; }
    public MemberNotNullAttribute(string member);
    public MemberNotNullAttribute(String[] members);
    [CompilerGeneratedAttribute]
public String[] get_Members();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("192")]
internal class System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ReturnValue>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Members>k__BackingField;
    public bool ReturnValue { get; }
    public String[] Members { get; }
    public MemberNotNullWhenAttribute(bool returnValue, string member);
    public MemberNotNullWhenAttribute(bool returnValue, String[] members);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
    [CompilerGeneratedAttribute]
public String[] get_Members();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("2048")]
internal class System.Runtime.CompilerServices.CallerArgumentExpressionAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <ParameterName>k__BackingField;
    public string ParameterName { get; }
    public CallerArgumentExpressionAttribute(string parameterName);
    [CompilerGeneratedAttribute]
public string get_ParameterName();
}
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal static class System.Runtime.CompilerServices.IsExternalInit : object {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
